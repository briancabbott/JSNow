tximport StateMachine from "./../../tx_samples/state_machine/state_machine.tx"

overwrite style:
    // compound node shapes
    {"selector": "node.state, node.event-container"
        , "style": {
            "shape": "roundrectangle", "width": "label", "background-color": "white", "background-opacity": 0.4,
            "border-width": 4, "border-style": "solid", "border-color": "black", "border-opacity": 1,
            "label": "data(label)", "text-background-color": "white", "text-background-opacity": 0.2, "text-background-shape": "rectangle",
            "text-margin-y": 25, "padding": "35px", "text-outline-width": "2", "text-outline-color": "white",
            "font-size": 21, "font-style": "italic", "font-weight": "bold", "color": "black"
        }
    }
    ,{"selector": "node.event-container"
        , "style": {
                "shape": "rectangle"
        }
    }
    // edges
    ,{"selector": "edge.state-transitions-to_state"
        , "style": {
            "curve-style": "bezier", "width": 4, "arrow-scale": 2, "target-arrow-shape": "triangle", "target-arrow-fill": "filled", "target-arrow-color": "black",
            "target-distance-from-node": "5", "label": "data(label)", "font-size": 18
        }
    }
    // hide contained items
    ,{"selector": "node.command, node.event"
        , "style": {
            "shape": "vee", "background-color": "black", "background-opacity": 0,
            "border-style": "solid", "border-color": "white", "border-opacity": 0,
            "label": "data(label)", "font-size": 18, "font-style": "normal", "color": "black",
            "text-background-color": "white", "text-background-opacity": 1, "text-background-shape": "roundrectangle"
        }
    }
    // compound nodes when selected
    ,{"selector": "node.state:selected, node.event-container:selected"
        , "style": {
            "background-color": "red", "background-opacity": 0.1, "border-color": "red", "color": "red"
        }
    }
    // contained nodes when compound nodes selected
    ,{"selector": "node:selected node"
        , "style": {
            "background-color": "red", "border-color": "red", "color": "red"
        }
    }
:style end

view StateMachine as None

view State as Roundrectangle
{
    label: State.name
    link
    {
        // from: implicit if not defined
        to: State.transitions.to_state
        label: State.transitions.event.name
    }
}

view Command as Vee child of State
{
    label: Command.name
}

view Event as Star inside Rectangle where this = StateMachine.resetEvents
{
    label: Event.name
    container
    {
        label: 'Reset Events:'
    }
}