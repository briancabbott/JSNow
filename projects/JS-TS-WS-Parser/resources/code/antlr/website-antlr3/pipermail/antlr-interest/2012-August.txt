From lgcraymer at yahoo.com  Wed Aug  1 04:11:51 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 1 Aug 2012 04:11:51 -0700 (PDT)
Subject: [antlr-interest] Changing the order of execution of tree
	pattern matching rules
In-Reply-To: <50182B14.8070000@oracle.com>
References: <50182B14.8070000@oracle.com>
Message-ID: <1343819511.40698.YahooMailNeo@web125502.mail.ne1.yahoo.com>

Look at CommonTreeNodeStream.java. ?You can't use ANTLR to do bottom up parsing (i. e.: ?LR instead of LL), but you can use the TreeNodeStream serialization ( repetitively calling LT(1) then consume()).

--Loring




>________________________________
> From: Andrew Mains <andrew.mains at oracle.com>
>To: antlr-interest at antlr.org 
>Sent: Tuesday, July 31, 2012 11:59 AM
>Subject: [antlr-interest] Changing the order of execution of tree pattern matching rules
> 
>Hi all,
>
>I am currently working on preprocessing an AST in order to compute some 
>properties about the code and make my code generation easier. To do 
>this, I'm using a tree grammar with pattern matching (filter = true).
>
>My question is this: I want to set a flag on each node of the tree in a 
>bottomup manner, and then use the information from this flag in a 
>topdown walk of the tree. Unfortunately for me, ANTLR does only one 
>depth first walk of the tree, (sensibly) executing the topdown actions 
>first, since they are performed in the preorder position. Since my 
>topdown action is dependent on my bottomup action, this order doesn't 
>work for me.
>
>Is there any convenient method of telling ANTLR to perform multiple DF 
>walks of the tree so I can perform my bottomup action in the first walk 
>and my topdown action in the second?
>
>If possible, I'd prefer to avoid splitting my grammar into two, as this 
>is less convenient, but I'll do so if necessary. I am, of course, open 
>to different ways of looking at the problem--this was just what made the 
>most sense to me initially (and what I would do if I were walking the 
>tree "by hand")
>
>Let me know if anything is unclear--I'm happy to provide more 
>details/actual code if it will help.
>
>Thanks for the help!
>
>Andrew
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From Jost.Baron at gmx.de  Wed Aug  1 12:14:31 2012
From: Jost.Baron at gmx.de (Jost Baron)
Date: Wed, 01 Aug 2012 21:14:31 +0200
Subject: [antlr-interest] Building C++-Target fails in ANTLR 3.4
Message-ID: <50198017.2080802@gmx.de>

Hi!

I've build a quite large grammar for ANTLR, and it compiles fine for the 
Java target. But as soon as I switch to the CPP-Target, I get the 
following error:

http://pastebin.com/8GZ96Ew6

I've googled, but have not found a solution to this problem - According 
to the ANTLR-site the CPP-target was synced with ANTLR 3.4, so i guess 
the error is somewhere on my side. Any hints where?

Regards,
Jost

From Jost.Baron at gmx.de  Wed Aug  1 14:00:39 2012
From: Jost.Baron at gmx.de (Jost Baron)
Date: Wed, 01 Aug 2012 23:00:39 +0200
Subject: [antlr-interest] Building C++-Target fails in ANTLR 3.4
In-Reply-To: <50198B2D.5030408@ibrezina.net>
References: <50198017.2080802@gmx.de> <50198B2D.5030408@ibrezina.net>
Message-ID: <501998F7.9000402@gmx.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Ivan,

thanks for your answer - I didn't know that there are different
C++-Targets. I used the old CPP target (it was the only one in
antlr-3.4-complete), but now I've found the "Cpp"-target, and it seems
to work fine.

Jost

PS: here's the code from pastebin, in case it gets deleted there:

CPP.stg 133:33: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 134:33: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 208:6: required parameters (filterMode) must appear before
optional parameters
CPP.stg 272:1: required parameters (labelType) must appear before
optional parameters
CPP.stg 272:12: required parameters (members) must appear before
optional parameters
CPP.stg 272:21: required parameters (filterMode) must appear before
optional parameters
CPP.stg 279:18: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 280:18: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 324:66: required parameters (filterMode) must appear before
optional parameters
CPP.stg 458:51: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 459:51: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 475:27: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 478:27: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 484:27: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 501:46: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 502:46: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 540:68: invalid character '<'
CPP.stg 540:68: invalid character '\'
CPP.stg 540:70: 'n' came as a complete surprise to me
CPP.stg 667:28: implicitly-defined attribute i not visible
CPP.stg 980:49: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 1029:21: invalid character '}'
CPP.stg 1029:21: mismatched input '};' expecting ID
CPP.stg 1154:56: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 1163:54: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 1215:47: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 1221:46: anonymous template has 0 arg(s) but mapped across 1
value(s)
CPP.stg 1341:95: anonymous template has 0 arg(s) but mapped across 1
value(s)
error(10):  internal error: grammar.g :
java.lang.IllegalArgumentException: no such attribute: buildAST
org.stringtemplate.v4.ST.add(ST.java:187)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:349)
org.antlr.Tool.generateRecognizer(Tool.java:655)
org.antlr.Tool.process(Tool.java:468)
org.antlr.Tool.main(Tool.java:93)

On 08/01/2012 10:01 PM, Ivan Brezina wrote:
> On 08/01/2012 09:14 PM, Jost Baron wrote:
>> Hi!
>> 
>> I've build a quite large grammar for ANTLR, and it compiles fine 
>> for the Java target. But as soon as I switch to the CPP-Target,
>> I get the following error:
>> 
>> http://pastebin.com/8GZ96Ew6
>> 
>> I've googled, but have not found a solution to this problem - 
>> According to the ANTLR-site the CPP-target was synced with ANTLR 
>> 3.4, so i guess the error is somewhere on my side. Any hints 
>> where?
>> 
>> 
> I'm afraid I will not help you too much. Just to clarify you use 
> target "Cpp" - written by Terence Parr not the "alternative"
> target "CPP" - written by Gokul
> 
> Ivan PS: please do not refer to pastebin, when asking for help. 
> Your question will be helpful lately for others.
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBAgAGBQJQGZjxAAoJEG6HPMAgWtVztOEP+QGar2Zq8ybTd8N9pB9Bb8qy
KTa19lzYT83f++6hrK4bRY2rj6SAbcIi+E3BBsEnd5+i6iCW8jghC1q9EgX9Ht5Q
anbNe7GW0H+oqZJvGKOVHKcAte7+7Z9APFTU3+wXnawNV8s1+MLuApwJ6gdvq34z
AoZLXAJwaO97gjF6+Mk9XEJItQrCcpkYOeaW+dax86Shex10VHrDDI80Adlfi+0F
XXDf0BsDkBFbUrR9Zsvck1fWgbRzDA7gFggjN65yBpa7oQXefE86CxVTRHpDZARl
k+Hn0Dv/dO/If1heInlEh4QMmy4f57Rv0BB2lVU8imvb+HuvvHEaRqLR1kMDA+c4
X2n+iaVLFshAfTjYhJChdytSP/QzZ5gRvnakWoo4S9M7YIy/kePfgg1CqfXWLWOa
bXTZdWwMw+J2ckSCjEPl6VRZkM5+zI11dh8diczK+Mkpr+xEnamM3XtnCTomsIJz
vz14nr2054MWoXpLEx3h/2A6XVcsLCh+nSX3dPiJkkm2wqR9wjB77cy3je2y1IKO
CZdL99qL7+5uieGO6MNV+KHCqDnXniQ0b6ozCY9GuQPw4dE7/7Q3hXRNjsjlKuhY
ktKBpchuY+FT4O2YwxLo3XuQPpbXTQPbR6pvE8rfJhdiEwh1jdKPs66wm25MqSc2
At2S8IbjHSOtu408w+Ro
=4FLT
-----END PGP SIGNATURE-----

From krishsub at microsoft.com  Wed Aug  1 14:13:16 2012
From: krishsub at microsoft.com (Krishnan Subramanian)
Date: Wed, 1 Aug 2012 21:13:16 +0000
Subject: [antlr-interest] Augmenting AST with additional info
Message-ID: <A0EF8C41D8FC2842A6477290B001CA2CD5E037@DB3EX14MBXC329.europe.corp.microsoft.com>

Hi all,

I have some information that needs to be augmented to an AST and I cannot figure out how to go about it.

It is maybe best to illustrate via an example:

Assuming I have a grammar where a method & its method body are declared and the AST as follows:

method_declaration
                :               return_type type_name OPEN_PARENS formal_parameter_list? CLOSE_PARENS LEFT_BRACE method_body RIGHT_BRACE
                                -> ^(METHOD_DECL return_type type_name formal_parameter_list? method_body)
                ;

Problem description
================
In my AST, for METHOD_DECL (a token), I need to add some information that tells me the location where the method has ended . That is, the line number and column of RIGHT_BRACE.

Given that I eliminate RIGHT_BRACE from my AST, is there any mechanism to augment METHOD_DECL with (say) the line number and column number information for RIGHT_BRACE?

Regards,

-krish

From jimi at temporal-wave.com  Wed Aug  1 15:25:28 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 1 Aug 2012 15:25:28 -0700
Subject: [antlr-interest] Augmenting AST with additional info
In-Reply-To: <A0EF8C41D8FC2842A6477290B001CA2CD5E037@DB3EX14MBXC329.europe.corp.microsoft.com>
References: <A0EF8C41D8FC2842A6477290B001CA2CD5E037@DB3EX14MBXC329.europe.corp.microsoft.com>
Message-ID: <06c4a229c90c07b285e439431dbb97a2@mail.gmail.com>

The METHOD_DECL node will give you the first and last token, then you can
get the line number and offset of the last token.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Krishnan Subramanian
> Sent: Wednesday, August 01, 2012 2:13 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Augmenting AST with additional info
>
> Hi all,
>
> I have some information that needs to be augmented to an AST and I
> cannot figure out how to go about it.
>
> It is maybe best to illustrate via an example:
>
> Assuming I have a grammar where a method & its method body are declared
> and the AST as follows:
>
> method_declaration
>                 :               return_type type_name OPEN_PARENS
> formal_parameter_list? CLOSE_PARENS LEFT_BRACE method_body RIGHT_BRACE
>                                 -> ^(METHOD_DECL return_type type_name
> formal_parameter_list? method_body)
>                 ;
>
> Problem description
> ================
> In my AST, for METHOD_DECL (a token), I need to add some information
> that tells me the location where the method has ended . That is, the
> line number and column of RIGHT_BRACE.
>
> Given that I eliminate RIGHT_BRACE from my AST, is there any mechanism
> to augment METHOD_DECL with (say) the line number and column number
> information for RIGHT_BRACE?
>
> Regards,
>
> -krish
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From vpandit at quantivo.com  Wed Aug  1 21:43:46 2012
From: vpandit at quantivo.com (Vinay Pandit)
Date: Wed, 1 Aug 2012 23:43:46 -0500
Subject: [antlr-interest] Parsing question
Message-ID: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>

I am trying to parse a date time literal in ANTLR and I am having issues with the grammar.

Here are the rules defined in the parser

dateValue : ( yearValue MINUS monthValue MINUS dayValue);

yearValue : datetimeValue ;

monthValue : datetimeValue;

dayValue : datetimeValue;

datetimeValue : UNSIGNED_INTEGER;

The Lexer has

MINUS         : '-' ;
DIGIT : ('0'..'9');
UNSIGNED_INTEGER : (DIGIT) +;


When I parse a date like 2012-01-01 for the dateValue rule, the parser throws an exception.

com. qexpr.ParseException: line 1:4 - mismatched input '-01' expecting MINUS
               at com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77)
               at com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
               at com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.java:25)
...

Looking at the error message it is obvious that I am not getting the Minus token. Instead the internal token that I get is an INTEGER (signed). I tried the greedy=false option, but that did not seem to help either. I am running out of ideas as to why the input does not match. Obviously I am doing something wrong, but I am not sure what!

Regards
Vinay


From jimi at temporal-wave.com  Wed Aug  1 22:48:25 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 1 Aug 2012 22:48:25 -0700
Subject: [antlr-interest] Parsing question
In-Reply-To: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
Message-ID: <2c5aedb77eda131533d12d162fb32963@mail.gmail.com>

That should be:

fragment
DIGIT ....

And you don't need separate parser rules for yearValue and the other two -
they are the same thing, just use UNSIGNED_INTEGER directly.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Vinay Pandit
> Sent: Wednesday, August 01, 2012 9:44 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Parsing question
>
> I am trying to parse a date time literal in ANTLR and I am having
> issues with the grammar.
>
> Here are the rules defined in the parser
>
> dateValue : ( yearValue MINUS monthValue MINUS dayValue);
>
> yearValue : datetimeValue ;
>
> monthValue : datetimeValue;
>
> dayValue : datetimeValue;
>
> datetimeValue : UNSIGNED_INTEGER;
>
> The Lexer has
>
> MINUS         : '-' ;
> DIGIT : ('0'..'9');
> UNSIGNED_INTEGER : (DIGIT) +;
>
>
> When I parse a date like 2012-01-01 for the dateValue rule, the parser
> throws an exception.
>
> com. qexpr.ParseException: line 1:4 - mismatched input '-01' expecting
> MINUS
>                at
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77)
>                at
> com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
>                at
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.ja
> va:25)
> ...
>
> Looking at the error message it is obvious that I am not getting the
> Minus token. Instead the internal token that I get is an INTEGER
> (signed). I tried the greedy=false option, but that did not seem to
> help either. I am running out of ideas as to why the input does not
> match. Obviously I am doing something wrong, but I am not sure what!
>
> Regards
> Vinay
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From vpandit at quantivo.com  Wed Aug  1 23:14:14 2012
From: vpandit at quantivo.com (Vinay Pandit)
Date: Thu, 2 Aug 2012 01:14:14 -0500
Subject: [antlr-interest] Parsing question
In-Reply-To: <2c5aedb77eda131533d12d162fb32963@mail.gmail.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
	<2c5aedb77eda131533d12d162fb32963@mail.gmail.com>
Message-ID: <8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>

Thanks for the reply. That did not work either.

Regards
Vinay

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Wednesday, August 01, 2012 10:48 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Parsing question

That should be:

fragment
DIGIT ....

And you don't need separate parser rules for yearValue and the other two - they are the same thing, just use UNSIGNED_INTEGER directly.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Vinay Pandit
> Sent: Wednesday, August 01, 2012 9:44 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Parsing question
>
> I am trying to parse a date time literal in ANTLR and I am having 
> issues with the grammar.
>
> Here are the rules defined in the parser
>
> dateValue : ( yearValue MINUS monthValue MINUS dayValue);
>
> yearValue : datetimeValue ;
>
> monthValue : datetimeValue;
>
> dayValue : datetimeValue;
>
> datetimeValue : UNSIGNED_INTEGER;
>
> The Lexer has
>
> MINUS         : '-' ;
> DIGIT : ('0'..'9');
> UNSIGNED_INTEGER : (DIGIT) +;
>
>
> When I parse a date like 2012-01-01 for the dateValue rule, the parser 
> throws an exception.
>
> com. qexpr.ParseException: line 1:4 - mismatched input '-01' expecting 
> MINUS
>                at
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77)
>                at
> com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
>                at
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.j
> a
> va:25)
> ...
>
> Looking at the error message it is obvious that I am not getting the 
> Minus token. Instead the internal token that I get is an INTEGER 
> (signed). I tried the greedy=false option, but that did not seem to 
> help either. I am running out of ideas as to why the input does not 
> match. Obviously I am doing something wrong, but I am not sure what!
>
> Regards
> Vinay
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From krishsub at microsoft.com  Thu Aug  2 02:28:59 2012
From: krishsub at microsoft.com (Krishnan Subramanian)
Date: Thu, 2 Aug 2012 09:28:59 +0000
Subject: [antlr-interest] Augmenting AST with additional info
In-Reply-To: <06c4a229c90c07b285e439431dbb97a2@mail.gmail.com>
References: <A0EF8C41D8FC2842A6477290B001CA2CD5E037@DB3EX14MBXC329.europe.corp.microsoft.com>
	<06c4a229c90c07b285e439431dbb97a2@mail.gmail.com>
Message-ID: <A0EF8C41D8FC2842A6477290B001CA2CD5E41C@DB3EX14MBXC329.europe.corp.microsoft.com>

Hi Jim,

The METHOD_DECL node gives me the TokenStartIndex and TokenStopIndex as integers (I'm using C#; I don't know if Java is different).

How would one translate the int to the actual token efficiently (e.g. as a lookup?)  in order to get the token's line number and offset?

Regards,

-krish

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Thursday, August 2, 2012 12:25 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Augmenting AST with additional info

The METHOD_DECL node will give you the first and last token, then you can get the line number and offset of the last token.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Krishnan Subramanian
> Sent: Wednesday, August 01, 2012 2:13 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Augmenting AST with additional info
>
> Hi all,
>
> I have some information that needs to be augmented to an AST and I 
> cannot figure out how to go about it.
>
> It is maybe best to illustrate via an example:
>
> Assuming I have a grammar where a method & its method body are 
> declared and the AST as follows:
>
> method_declaration
>                 :               return_type type_name OPEN_PARENS
> formal_parameter_list? CLOSE_PARENS LEFT_BRACE method_body RIGHT_BRACE
>                                 -> ^(METHOD_DECL return_type type_name 
> formal_parameter_list? method_body)
>                 ;
>
> Problem description
> ================
> In my AST, for METHOD_DECL (a token), I need to add some information 
> that tells me the location where the method has ended . That is, the 
> line number and column of RIGHT_BRACE.
>
> Given that I eliminate RIGHT_BRACE from my AST, is there any mechanism 
> to augment METHOD_DECL with (say) the line number and column number 
> information for RIGHT_BRACE?
>
> Regards,
>
> -krish
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From ibre5041 at ibrezina.net  Thu Aug  2 02:59:01 2012
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Thu, 02 Aug 2012 11:59:01 +0200
Subject: [antlr-interest] Parsing question
In-Reply-To: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
Message-ID: <20120802115901.8ehxtyk96oc4gw4w@webmail.kamm.cz>

Quoting Vinay Pandit <vpandit at quantivo.com>:

> I am trying to parse a date time literal in ANTLR and I am having   
> issues with the grammar.
>
> Here are the rules defined in the parser
>
> dateValue : ( yearValue MINUS monthValue MINUS dayValue);
>
> yearValue : datetimeValue ;
>
> monthValue : datetimeValue;
>
> dayValue : datetimeValue;
>
> datetimeValue : UNSIGNED_INTEGER;
>
> The Lexer has
>
> MINUS         : '-' ;
> DIGIT : ('0'..'9');
> UNSIGNED_INTEGER : (DIGIT) +;
>
>

Your rule dateValue is a parser one.
I means that it could accept input containing whitespaces and comments like:
2010 - /* blblbala*/ 01 - 01

Such an input is obviously ambiguous = it is also a numerical  
expression (the result is 2008).
You probably want dateValue to be a Lexer rule (the one starting with  
capital letter).
Also beware that the order of Lexer rules is important.

Ivan



----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.


From Jost.Baron at gmx.de  Thu Aug  2 06:39:24 2012
From: Jost.Baron at gmx.de (Jost Baron)
Date: Thu, 02 Aug 2012 15:39:24 +0200
Subject: [antlr-interest] C++-Target - write AST as XML
Message-ID: <501A830C.8000109@gmx.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi!

I've successfully created a grammar for some DSL, and now want to
print an AST the input into XML format. As the grammar is quite large
(several hundred rules), doing this manually would be slow and error
prone.

So my question is: Is there anything that could help me to at least
partly automatize the xml generation?

Thanks,
Jost
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBAgAGBQJQGoMHAAoJEG6HPMAgWtVzIjkQAIVC9EbzPHicbNobJIDCfrG/
VGZf98X+9ljD5wrMH2OStQym9wt1TDJQC98RcqTNmhiL0LcQrIHGFZQkqQ+uuj9h
Ei53bxhp4dAjnCIZTtnK+mUEmFpPjNFy4eLqr2QLiouEjfWItW4k63kEimGf2V0G
x2ZjMEmRXBDe1C7t//5HxN0DMGmhL0tH7cLHFEBTDzic92LbkhaQHrqvKI2R2MSq
lEPNN7ASlSPXQYifQP83Hyoq340hiyDdeg55I6l60Fdpx0QPURKHD3GVe5KzH2h9
giNvpeDzXsTvo4aswDvsg+UU67K//91sxzVVFkcsS3OqVib3hJ7ancX0vmQEA4tT
KbasRb4M6AA3WYvkNis7bnCpeV4hBeSeq/jmFSASuG6spqR/zFEIMCxo8QIDkwfC
Do/U9iNoiDXo2WTQYMSEkTcTV9cmvixJfalSvDi23i05UehVYuN17YgT4VeYFjHU
JZRoJFc1mXNrPzgK1Ivn5Ti0+F6yu/CFbz3eaINaY+fysD8yHQjHJlUkBq9RyP4h
w5SGdW0S+z96+lMjcczKl6q/HrxOdHu7CBQorpRfVocD3V94QDHNGQdvJJOYjxYu
tmjuBnJGwAPd3M1rA5f/zwcW+AP8g70cdaN343Shm90E/qMp7S0mpVU7djQiEXLA
XDCH960jrNOOKXninVQX
=DBwi
-----END PGP SIGNATURE-----

From jimi at temporal-wave.com  Thu Aug  2 09:21:49 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 2 Aug 2012 09:21:49 -0700
Subject: [antlr-interest] Parsing question
In-Reply-To: <8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
	<2c5aedb77eda131533d12d162fb32963@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>
Message-ID: <f3a9cd5e2eb43fb8014b3ed9e714a85d@mail.gmail.com>

OK - your example was not clear enough. You do need a fragment there.

However it sounds like you are trying to get the lexer to handle negative
numbers and that is usually the wrong way - you want to handle that in the
parser's expression tree. However, I might be tempted to handle the date
literal in the lexer rather than the parser as you will otherwise create a
lot of conflicts.


MINUS : '-';
fragment DATE :;
INTEGER : '0'..'9'+
          (('-' '0'..'9'+ '-' '0'..'9')=>('-' '0'..'9'+ '-' '0'..'9'+) {
$type = DATE; })?
;

Are you sure that your language allows date strings that are not quote
delimited? There is an obvious conflict with the subtract operator unless
there are separate expression trees based on context.

Jim

> -----Original Message-----
> From: Vinay Pandit [mailto:vpandit at quantivo.com]
> Sent: Wednesday, August 01, 2012 11:14 PM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Parsing question
>
> Thanks for the reply. That did not work either.
>
> Regards
> Vinay
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Wednesday, August 01, 2012 10:48 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing question
>
> That should be:
>
> fragment
> DIGIT ....
>
> And you don't need separate parser rules for yearValue and the other
> two - they are the same thing, just use UNSIGNED_INTEGER directly.
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Vinay Pandit
> > Sent: Wednesday, August 01, 2012 9:44 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Parsing question
> >
> > I am trying to parse a date time literal in ANTLR and I am having
> > issues with the grammar.
> >
> > Here are the rules defined in the parser
> >
> > dateValue : ( yearValue MINUS monthValue MINUS dayValue);
> >
> > yearValue : datetimeValue ;
> >
> > monthValue : datetimeValue;
> >
> > dayValue : datetimeValue;
> >
> > datetimeValue : UNSIGNED_INTEGER;
> >
> > The Lexer has
> >
> > MINUS         : '-' ;
> > DIGIT : ('0'..'9');
> > UNSIGNED_INTEGER : (DIGIT) +;
> >
> >
> > When I parse a date like 2012-01-01 for the dateValue rule, the
> parser
> > throws an exception.
> >
> > com. qexpr.ParseException: line 1:4 - mismatched input '-01'
> expecting
> > MINUS
> >                at
> >
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77)
> >                at
> > com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
> >                at
> >
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.j
> > a
> > va:25)
> > ...
> >
> > Looking at the error message it is obvious that I am not getting the
> > Minus token. Instead the internal token that I get is an INTEGER
> > (signed). I tried the greedy=false option, but that did not seem to
> > help either. I am running out of ideas as to why the input does not
> > match. Obviously I am doing something wrong, but I am not sure what!
> >
> > Regards
> > Vinay
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jimi at temporal-wave.com  Thu Aug  2 09:24:10 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 2 Aug 2012 09:24:10 -0700
Subject: [antlr-interest] Augmenting AST with additional info
In-Reply-To: <A0EF8C41D8FC2842A6477290B001CA2CD5E41C@DB3EX14MBXC329.europe.corp.microsoft.com>
References: <A0EF8C41D8FC2842A6477290B001CA2CD5E037@DB3EX14MBXC329.europe.corp.microsoft.com>
	<06c4a229c90c07b285e439431dbb97a2@mail.gmail.com>
	<A0EF8C41D8FC2842A6477290B001CA2CD5E41C@DB3EX14MBXC329.europe.corp.microsoft.com>
Message-ID: <101d12eb87242c4e9bec5ae5310bbb31@mail.gmail.com>

It is the index to the token stream, so you just get those tokens out of
the token stream and they then tell you what their start line and offset
are.

Jim

> -----Original Message-----
> From: Krishnan Subramanian [mailto:krishsub at microsoft.com]
> Sent: Thursday, August 02, 2012 2:29 AM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Augmenting AST with additional info
>
> Hi Jim,
>
> The METHOD_DECL node gives me the TokenStartIndex and TokenStopIndex as
> integers (I'm using C#; I don't know if Java is different).
>
> How would one translate the int to the actual token efficiently (e.g.
> as a lookup?)  in order to get the token's line number and offset?
>
> Regards,
>
> -krish
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Thursday, August 2, 2012 12:25 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Augmenting AST with additional info
>
> The METHOD_DECL node will give you the first and last token, then you
> can get the line number and offset of the last token.
>
> Jim
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Krishnan Subramanian
> > Sent: Wednesday, August 01, 2012 2:13 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Augmenting AST with additional info
> >
> > Hi all,
> >
> > I have some information that needs to be augmented to an AST and I
> > cannot figure out how to go about it.
> >
> > It is maybe best to illustrate via an example:
> >
> > Assuming I have a grammar where a method & its method body are
> > declared and the AST as follows:
> >
> > method_declaration
> >                 :               return_type type_name OPEN_PARENS
> > formal_parameter_list? CLOSE_PARENS LEFT_BRACE method_body
> RIGHT_BRACE
> >                                 -> ^(METHOD_DECL return_type
> type_name
> > formal_parameter_list? method_body)
> >                 ;
> >
> > Problem description
> > ================
> > In my AST, for METHOD_DECL (a token), I need to add some information
> > that tells me the location where the method has ended . That is, the
> > line number and column of RIGHT_BRACE.
> >
> > Given that I eliminate RIGHT_BRACE from my AST, is there any
> mechanism
> > to augment METHOD_DECL with (say) the line number and column number
> > information for RIGHT_BRACE?
> >
> > Regards,
> >
> > -krish
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address
>

From jimi at temporal-wave.com  Thu Aug  2 09:27:59 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 2 Aug 2012 09:27:59 -0700
Subject: [antlr-interest] C++-Target - write AST as XML
In-Reply-To: <501A830C.8000109@gmx.de>
References: <501A830C.8000109@gmx.de>
Message-ID: <c0d8bae34e913c344a9fd0c0364cab50@mail.gmail.com>

It isn't clear what you are trying to make in to XML. The input as a
translation, or the AST itself?

Either way, this should be a fairly trivial set of methods that
recursively walk the AST manually just check what node they are seeing.
Look at the source code for the dot transformer in the ANTLR runtime for a
template.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jost Baron
> Sent: Thursday, August 02, 2012 6:39 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] C++-Target - write AST as XML
>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi!
>
> I've successfully created a grammar for some DSL, and now want to print
> an AST the input into XML format. As the grammar is quite large
> (several hundred rules), doing this manually would be slow and error
> prone.
>
> So my question is: Is there anything that could help me to at least
> partly automatize the xml generation?
>
> Thanks,
> Jost
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.11 (GNU/Linux)
> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/
>
> iQIcBAEBAgAGBQJQGoMHAAoJEG6HPMAgWtVzIjkQAIVC9EbzPHicbNobJIDCfrG/
> VGZf98X+9ljD5wrMH2OStQym9wt1TDJQC98RcqTNmhiL0LcQrIHGFZQkqQ+uuj9h
> Ei53bxhp4dAjnCIZTtnK+mUEmFpPjNFy4eLqr2QLiouEjfWItW4k63kEimGf2V0G
> x2ZjMEmRXBDe1C7t//5HxN0DMGmhL0tH7cLHFEBTDzic92LbkhaQHrqvKI2R2MSq
> lEPNN7ASlSPXQYifQP83Hyoq340hiyDdeg55I6l60Fdpx0QPURKHD3GVe5KzH2h9
> giNvpeDzXsTvo4aswDvsg+UU67K//91sxzVVFkcsS3OqVib3hJ7ancX0vmQEA4tT
> KbasRb4M6AA3WYvkNis7bnCpeV4hBeSeq/jmFSASuG6spqR/zFEIMCxo8QIDkwfC
> Do/U9iNoiDXo2WTQYMSEkTcTV9cmvixJfalSvDi23i05UehVYuN17YgT4VeYFjHU
> JZRoJFc1mXNrPzgK1Ivn5Ti0+F6yu/CFbz3eaINaY+fysD8yHQjHJlUkBq9RyP4h
> w5SGdW0S+z96+lMjcczKl6q/HrxOdHu7CBQorpRfVocD3V94QDHNGQdvJJOYjxYu
> tmjuBnJGwAPd3M1rA5f/zwcW+AP8g70cdaN343Shm90E/qMp7S0mpVU7djQiEXLA
> XDCH960jrNOOKXninVQX
> =DBwi
> -----END PGP SIGNATURE-----
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From vpandit at quantivo.com  Thu Aug  2 09:34:40 2012
From: vpandit at quantivo.com (Vinay Pandit)
Date: Thu, 2 Aug 2012 11:34:40 -0500
Subject: [antlr-interest] Parsing question
In-Reply-To: <f3a9cd5e2eb43fb8014b3ed9e714a85d@mail.gmail.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
	<2c5aedb77eda131533d12d162fb32963@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>
	<f3a9cd5e2eb43fb8014b3ed9e714a85d@mail.gmail.com>
Message-ID: <8AEDB49057949A48B244C5C103B5F6F70D07415A15@DFW1MBX07.mex07a.mlsrvr.com>

Yes, I think I was not clear enough. Here is what I wanted to do. In SQL we have a date string of the form date '2001-01-01'. I wanted to try and parse this date literal. I was just trying to figure out the dateValue subrule in my earlier mail.

Here is the grammar I came up with (which does not seem to work). I am excluding timeLiteral and timestamp literal for brevity. I was just not sure that I could get rid of the ambiguity by moving things into the lexer. For e.g. ultimately '2001-01-01' fragment of the input would match a STRING token, but because I have the 'date' in from of it the parser should use that rule. I am used to Javacc where you can provide lookaheads in order to tackle ambiguities. 

Hope this email clarifies my problem. Please let me know if you need any more input

Thanks for your help
Vinay

-------------------------------------------
datetimeLiteral
    	: dateLiteral | timeLiteral | timestampLiteral;
    	    
dateLiteral : DATE dateString;

dateString : QUOTE dateValue QUOTE;

dateValue : UNSIGNED_INTEGER MINUS UNSIGNED_INTEGER MINUS UNSIGNED_INTEGER;

The Lexer rules are

fragment 
DIGIT : ('0'..'9');
DATE          : ('D'|'d')('A'|'a')('T'|'t')('E'|'e');
UNSIGNED_INTEGER : (DIGIT) +;
MINUS         : '-' ;
QUOTE         : '\'';



-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Thursday, August 02, 2012 9:22 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Parsing question

OK - your example was not clear enough. You do need a fragment there.

However it sounds like you are trying to get the lexer to handle negative numbers and that is usually the wrong way - you want to handle that in the parser's expression tree. However, I might be tempted to handle the date literal in the lexer rather than the parser as you will otherwise create a lot of conflicts.


MINUS : '-';
fragment DATE :;
INTEGER : '0'..'9'+
          (('-' '0'..'9'+ '-' '0'..'9')=>('-' '0'..'9'+ '-' '0'..'9'+) { $type = DATE; })?
;

Are you sure that your language allows date strings that are not quote delimited? There is an obvious conflict with the subtract operator unless there are separate expression trees based on context.

Jim

> -----Original Message-----
> From: Vinay Pandit [mailto:vpandit at quantivo.com]
> Sent: Wednesday, August 01, 2012 11:14 PM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Parsing question
>
> Thanks for the reply. That did not work either.
>
> Regards
> Vinay
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Wednesday, August 01, 2012 10:48 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing question
>
> That should be:
>
> fragment
> DIGIT ....
>
> And you don't need separate parser rules for yearValue and the other 
> two - they are the same thing, just use UNSIGNED_INTEGER directly.
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> > bounces at antlr.org] On Behalf Of Vinay Pandit
> > Sent: Wednesday, August 01, 2012 9:44 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Parsing question
> >
> > I am trying to parse a date time literal in ANTLR and I am having 
> > issues with the grammar.
> >
> > Here are the rules defined in the parser
> >
> > dateValue : ( yearValue MINUS monthValue MINUS dayValue);
> >
> > yearValue : datetimeValue ;
> >
> > monthValue : datetimeValue;
> >
> > dayValue : datetimeValue;
> >
> > datetimeValue : UNSIGNED_INTEGER;
> >
> > The Lexer has
> >
> > MINUS         : '-' ;
> > DIGIT : ('0'..'9');
> > UNSIGNED_INTEGER : (DIGIT) +;
> >
> >
> > When I parse a date like 2012-01-01 for the dateValue rule, the
> parser
> > throws an exception.
> >
> > com. qexpr.ParseException: line 1:4 - mismatched input '-01'
> expecting
> > MINUS
> >                at
> >
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77
> )
> >                at
> > com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
> >                at
> >
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.j
> > a
> > va:25)
> > ...
> >
> > Looking at the error message it is obvious that I am not getting the 
> > Minus token. Instead the internal token that I get is an INTEGER 
> > (signed). I tried the greedy=false option, but that did not seem to 
> > help either. I am running out of ideas as to why the input does not 
> > match. Obviously I am doing something wrong, but I am not sure what!
> >
> > Regards
> > Vinay
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Thu Aug  2 09:40:42 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 2 Aug 2012 09:40:42 -0700
Subject: [antlr-interest] Parsing question
In-Reply-To: <8AEDB49057949A48B244C5C103B5F6F70D07415A15@DFW1MBX07.mex07a.mlsrvr.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
	<2c5aedb77eda131533d12d162fb32963@mail.gmail.com>	<8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>
	<f3a9cd5e2eb43fb8014b3ed9e714a85d@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D07415A15@DFW1MBX07.mex07a.mlsrvr.com>
Message-ID: <38c9daf5813ae9cd3ea394263424174a@mail.gmail.com>

That's what I thought. You are applying way too much context in to the
mix.

Take out all the special attempts to handle date in either the lexer or
the parser and just accept SQUOTE (as in the simple string). And also fix
trying to have a signed and unsigned integer in the lexer - the parser
will have to do that.

Then when you verify your AST (or as you parse if no AST), call a function
that validates the date (you can just use standard Java Date stuff). Then
you issue a semantic error if it is invalid.

In SQL you may not be able to tell this until execution time unless you
have access to the table metadata so that you can see that a field is a
date type:

... WHERE T.myDate < '1964-07-14'


Jim


> -----Original Message-----
> From: Vinay Pandit [mailto:vpandit at quantivo.com]
> Sent: Thursday, August 02, 2012 9:35 AM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Parsing question
>
> Yes, I think I was not clear enough. Here is what I wanted to do. In
> SQL we have a date string of the form date '2001-01-01'. I wanted to
> try and parse this date literal. I was just trying to figure out the
> dateValue subrule in my earlier mail.
>
> Here is the grammar I came up with (which does not seem to work). I am
> excluding timeLiteral and timestamp literal for brevity. I was just not
> sure that I could get rid of the ambiguity by moving things into the
> lexer. For e.g. ultimately '2001-01-01' fragment of the input would
> match a STRING token, but because I have the 'date' in from of it the
> parser should use that rule. I am used to Javacc where you can provide
> lookaheads in order to tackle ambiguities.
>
> Hope this email clarifies my problem. Please let me know if you need
> any more input
>
> Thanks for your help
> Vinay
>
> -------------------------------------------
> datetimeLiteral
>     	: dateLiteral | timeLiteral | timestampLiteral;
>
> dateLiteral : DATE dateString;
>
> dateString : QUOTE dateValue QUOTE;
>
> dateValue : UNSIGNED_INTEGER MINUS UNSIGNED_INTEGER MINUS
> UNSIGNED_INTEGER;
>
> The Lexer rules are
>
> fragment
> DIGIT : ('0'..'9');
> DATE          : ('D'|'d')('A'|'a')('T'|'t')('E'|'e');
> UNSIGNED_INTEGER : (DIGIT) +;
> MINUS         : '-' ;
> QUOTE         : '\'';
>
>
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Thursday, August 02, 2012 9:22 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing question
>
> OK - your example was not clear enough. You do need a fragment there.
>
> However it sounds like you are trying to get the lexer to handle
> negative numbers and that is usually the wrong way - you want to handle
> that in the parser's expression tree. However, I might be tempted to
> handle the date literal in the lexer rather than the parser as you will
> otherwise create a lot of conflicts.
>
>
> MINUS : '-';
> fragment DATE :;
> INTEGER : '0'..'9'+
>           (('-' '0'..'9'+ '-' '0'..'9')=>('-' '0'..'9'+ '-' '0'..'9'+)
> { $type = DATE; })?
> ;
>
> Are you sure that your language allows date strings that are not quote
> delimited? There is an obvious conflict with the subtract operator
> unless there are separate expression trees based on context.
>
> Jim
>
> > -----Original Message-----
> > From: Vinay Pandit [mailto:vpandit at quantivo.com]
> > Sent: Wednesday, August 01, 2012 11:14 PM
> > To: Jim Idle; antlr-interest at antlr.org
> > Subject: RE: [antlr-interest] Parsing question
> >
> > Thanks for the reply. That did not work either.
> >
> > Regards
> > Vinay
> >
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Jim Idle
> > Sent: Wednesday, August 01, 2012 10:48 PM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing question
> >
> > That should be:
> >
> > fragment
> > DIGIT ....
> >
> > And you don't need separate parser rules for yearValue and the other
> > two - they are the same thing, just use UNSIGNED_INTEGER directly.
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of Vinay Pandit
> > > Sent: Wednesday, August 01, 2012 9:44 PM
> > > To: antlr-interest at antlr.org
> > > Subject: [antlr-interest] Parsing question
> > >
> > > I am trying to parse a date time literal in ANTLR and I am having
> > > issues with the grammar.
> > >
> > > Here are the rules defined in the parser
> > >
> > > dateValue : ( yearValue MINUS monthValue MINUS dayValue);
> > >
> > > yearValue : datetimeValue ;
> > >
> > > monthValue : datetimeValue;
> > >
> > > dayValue : datetimeValue;
> > >
> > > datetimeValue : UNSIGNED_INTEGER;
> > >
> > > The Lexer has
> > >
> > > MINUS         : '-' ;
> > > DIGIT : ('0'..'9');
> > > UNSIGNED_INTEGER : (DIGIT) +;
> > >
> > >
> > > When I parse a date like 2012-01-01 for the dateValue rule, the
> > parser
> > > throws an exception.
> > >
> > > com. qexpr.ParseException: line 1:4 - mismatched input '-01'
> > expecting
> > > MINUS
> > >                at
> > >
> >
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77
> > )
> > >                at
> > > com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
> > >                at
> > >
> >
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.j
> > > a
> > > va:25)
> > > ...
> > >
> > > Looking at the error message it is obvious that I am not getting
> the
> > > Minus token. Instead the internal token that I get is an INTEGER
> > > (signed). I tried the greedy=false option, but that did not seem to
> > > help either. I am running out of ideas as to why the input does not
> > > match. Obviously I am doing something wrong, but I am not sure
> what!
> > >
> > > Regards
> > > Vinay
> > >
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> > interest/your-
> > > email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From vpandit at quantivo.com  Thu Aug  2 09:48:57 2012
From: vpandit at quantivo.com (Vinay Pandit)
Date: Thu, 2 Aug 2012 11:48:57 -0500
Subject: [antlr-interest] Parsing question
In-Reply-To: <38c9daf5813ae9cd3ea394263424174a@mail.gmail.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
	<2c5aedb77eda131533d12d162fb32963@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>
	<f3a9cd5e2eb43fb8014b3ed9e714a85d@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D07415A15@DFW1MBX07.mex07a.mlsrvr.com>
	<38c9daf5813ae9cd3ea394263424174a@mail.gmail.com>
Message-ID: <8AEDB49057949A48B244C5C103B5F6F70D07415A28@DFW1MBX07.mex07a.mlsrvr.com>

The date parsing made sense to me. I was just wondering about the signed and unsigned integer comment. If I make the decision about the sign in the parser I just thought it would clutter it all up. Which is the reason why I moved it into the LEXER.

Regards
Vinay



-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Thursday, August 02, 2012 9:41 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Parsing question

That's what I thought. You are applying way too much context in to the mix.

Take out all the special attempts to handle date in either the lexer or the parser and just accept SQUOTE (as in the simple string). And also fix trying to have a signed and unsigned integer in the lexer - the parser will have to do that.

Then when you verify your AST (or as you parse if no AST), call a function that validates the date (you can just use standard Java Date stuff). Then you issue a semantic error if it is invalid.

In SQL you may not be able to tell this until execution time unless you have access to the table metadata so that you can see that a field is a date type:

... WHERE T.myDate < '1964-07-14'


Jim


> -----Original Message-----
> From: Vinay Pandit [mailto:vpandit at quantivo.com]
> Sent: Thursday, August 02, 2012 9:35 AM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Parsing question
>
> Yes, I think I was not clear enough. Here is what I wanted to do. In 
> SQL we have a date string of the form date '2001-01-01'. I wanted to 
> try and parse this date literal. I was just trying to figure out the 
> dateValue subrule in my earlier mail.
>
> Here is the grammar I came up with (which does not seem to work). I am 
> excluding timeLiteral and timestamp literal for brevity. I was just 
> not sure that I could get rid of the ambiguity by moving things into 
> the lexer. For e.g. ultimately '2001-01-01' fragment of the input 
> would match a STRING token, but because I have the 'date' in from of 
> it the parser should use that rule. I am used to Javacc where you can 
> provide lookaheads in order to tackle ambiguities.
>
> Hope this email clarifies my problem. Please let me know if you need 
> any more input
>
> Thanks for your help
> Vinay
>
> -------------------------------------------
> datetimeLiteral
>     	: dateLiteral | timeLiteral | timestampLiteral;
>
> dateLiteral : DATE dateString;
>
> dateString : QUOTE dateValue QUOTE;
>
> dateValue : UNSIGNED_INTEGER MINUS UNSIGNED_INTEGER MINUS 
> UNSIGNED_INTEGER;
>
> The Lexer rules are
>
> fragment
> DIGIT : ('0'..'9');
> DATE          : ('D'|'d')('A'|'a')('T'|'t')('E'|'e');
> UNSIGNED_INTEGER : (DIGIT) +;
> MINUS         : '-' ;
> QUOTE         : '\'';
>
>
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Thursday, August 02, 2012 9:22 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing question
>
> OK - your example was not clear enough. You do need a fragment there.
>
> However it sounds like you are trying to get the lexer to handle 
> negative numbers and that is usually the wrong way - you want to 
> handle that in the parser's expression tree. However, I might be 
> tempted to handle the date literal in the lexer rather than the parser 
> as you will otherwise create a lot of conflicts.
>
>
> MINUS : '-';
> fragment DATE :;
> INTEGER : '0'..'9'+
>           (('-' '0'..'9'+ '-' '0'..'9')=>('-' '0'..'9'+ '-' '0'..'9'+) 
> { $type = DATE; })?
> ;
>
> Are you sure that your language allows date strings that are not quote 
> delimited? There is an obvious conflict with the subtract operator 
> unless there are separate expression trees based on context.
>
> Jim
>
> > -----Original Message-----
> > From: Vinay Pandit [mailto:vpandit at quantivo.com]
> > Sent: Wednesday, August 01, 2012 11:14 PM
> > To: Jim Idle; antlr-interest at antlr.org
> > Subject: RE: [antlr-interest] Parsing question
> >
> > Thanks for the reply. That did not work either.
> >
> > Regards
> > Vinay
> >
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> > bounces at antlr.org] On Behalf Of Jim Idle
> > Sent: Wednesday, August 01, 2012 10:48 PM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing question
> >
> > That should be:
> >
> > fragment
> > DIGIT ....
> >
> > And you don't need separate parser rules for yearValue and the other 
> > two - they are the same thing, just use UNSIGNED_INTEGER directly.
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> > > bounces at antlr.org] On Behalf Of Vinay Pandit
> > > Sent: Wednesday, August 01, 2012 9:44 PM
> > > To: antlr-interest at antlr.org
> > > Subject: [antlr-interest] Parsing question
> > >
> > > I am trying to parse a date time literal in ANTLR and I am having 
> > > issues with the grammar.
> > >
> > > Here are the rules defined in the parser
> > >
> > > dateValue : ( yearValue MINUS monthValue MINUS dayValue);
> > >
> > > yearValue : datetimeValue ;
> > >
> > > monthValue : datetimeValue;
> > >
> > > dayValue : datetimeValue;
> > >
> > > datetimeValue : UNSIGNED_INTEGER;
> > >
> > > The Lexer has
> > >
> > > MINUS         : '-' ;
> > > DIGIT : ('0'..'9');
> > > UNSIGNED_INTEGER : (DIGIT) +;
> > >
> > >
> > > When I parse a date like 2012-01-01 for the dateValue rule, the
> > parser
> > > throws an exception.
> > >
> > > com. qexpr.ParseException: line 1:4 - mismatched input '-01'
> > expecting
> > > MINUS
> > >                at
> > >
> >
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77
> > )
> > >                at
> > > com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
> > >                at
> > >
> >
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.j
> > > a
> > > va:25)
> > > ...
> > >
> > > Looking at the error message it is obvious that I am not getting
> the
> > > Minus token. Instead the internal token that I get is an INTEGER 
> > > (signed). I tried the greedy=false option, but that did not seem 
> > > to help either. I am running out of ideas as to why the input does 
> > > not match. Obviously I am doing something wrong, but I am not sure
> what!
> > >
> > > Regards
> > > Vinay
> > >
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> > interest/your-
> > > email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Thu Aug  2 09:53:50 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 2 Aug 2012 09:53:50 -0700
Subject: [antlr-interest] Parsing question
In-Reply-To: <8AEDB49057949A48B244C5C103B5F6F70D07415A28@DFW1MBX07.mex07a.mlsrvr.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
	<2c5aedb77eda131533d12d162fb32963@mail.gmail.com>	<8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>
	<f3a9cd5e2eb43fb8014b3ed9e714a85d@mail.gmail.com>	<8AEDB49057949A48B244C5C103B5F6F70D07415A15@DFW1MBX07.mex07a.mlsrvr.com>
	<38c9daf5813ae9cd3ea394263424174a@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D07415A28@DFW1MBX07.mex07a.mlsrvr.com>
Message-ID: <2b560b03fb549d1909e1cdf53375c37e@mail.gmail.com>

If you put it in the lexer, how will you parse:

6 -4

When this is meant to be "subtract 4 from 6".

Jim

> -----Original Message-----
> From: Vinay Pandit [mailto:vpandit at quantivo.com]
> Sent: Thursday, August 02, 2012 9:49 AM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Parsing question
>
> The date parsing made sense to me. I was just wondering about the
> signed and unsigned integer comment. If I make the decision about the
> sign in the parser I just thought it would clutter it all up. Which is
> the reason why I moved it into the LEXER.
>
> Regards
> Vinay
>
>
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Thursday, August 02, 2012 9:41 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing question
>
> That's what I thought. You are applying way too much context in to the
> mix.
>
> Take out all the special attempts to handle date in either the lexer or
> the parser and just accept SQUOTE (as in the simple string). And also
> fix trying to have a signed and unsigned integer in the lexer - the
> parser will have to do that.
>
> Then when you verify your AST (or as you parse if no AST), call a
> function that validates the date (you can just use standard Java Date
> stuff). Then you issue a semantic error if it is invalid.
>
> In SQL you may not be able to tell this until execution time unless you
> have access to the table metadata so that you can see that a field is a
> date type:
>
> ... WHERE T.myDate < '1964-07-14'
>
>
> Jim
>
>
> > -----Original Message-----
> > From: Vinay Pandit [mailto:vpandit at quantivo.com]
> > Sent: Thursday, August 02, 2012 9:35 AM
> > To: Jim Idle; antlr-interest at antlr.org
> > Subject: RE: [antlr-interest] Parsing question
> >
> > Yes, I think I was not clear enough. Here is what I wanted to do. In
> > SQL we have a date string of the form date '2001-01-01'. I wanted to
> > try and parse this date literal. I was just trying to figure out the
> > dateValue subrule in my earlier mail.
> >
> > Here is the grammar I came up with (which does not seem to work). I
> am
> > excluding timeLiteral and timestamp literal for brevity. I was just
> > not sure that I could get rid of the ambiguity by moving things into
> > the lexer. For e.g. ultimately '2001-01-01' fragment of the input
> > would match a STRING token, but because I have the 'date' in from of
> > it the parser should use that rule. I am used to Javacc where you can
> > provide lookaheads in order to tackle ambiguities.
> >
> > Hope this email clarifies my problem. Please let me know if you need
> > any more input
> >
> > Thanks for your help
> > Vinay
> >
> > -------------------------------------------
> > datetimeLiteral
> >     	: dateLiteral | timeLiteral | timestampLiteral;
> >
> > dateLiteral : DATE dateString;
> >
> > dateString : QUOTE dateValue QUOTE;
> >
> > dateValue : UNSIGNED_INTEGER MINUS UNSIGNED_INTEGER MINUS
> > UNSIGNED_INTEGER;
> >
> > The Lexer rules are
> >
> > fragment
> > DIGIT : ('0'..'9');
> > DATE          : ('D'|'d')('A'|'a')('T'|'t')('E'|'e');
> > UNSIGNED_INTEGER : (DIGIT) +;
> > MINUS         : '-' ;
> > QUOTE         : '\'';
> >
> >
> >
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Jim Idle
> > Sent: Thursday, August 02, 2012 9:22 AM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing question
> >
> > OK - your example was not clear enough. You do need a fragment there.
> >
> > However it sounds like you are trying to get the lexer to handle
> > negative numbers and that is usually the wrong way - you want to
> > handle that in the parser's expression tree. However, I might be
> > tempted to handle the date literal in the lexer rather than the
> parser
> > as you will otherwise create a lot of conflicts.
> >
> >
> > MINUS : '-';
> > fragment DATE :;
> > INTEGER : '0'..'9'+
> >           (('-' '0'..'9'+ '-' '0'..'9')=>('-' '0'..'9'+ '-'
> '0'..'9'+)
> > { $type = DATE; })?
> > ;
> >
> > Are you sure that your language allows date strings that are not
> quote
> > delimited? There is an obvious conflict with the subtract operator
> > unless there are separate expression trees based on context.
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: Vinay Pandit [mailto:vpandit at quantivo.com]
> > > Sent: Wednesday, August 01, 2012 11:14 PM
> > > To: Jim Idle; antlr-interest at antlr.org
> > > Subject: RE: [antlr-interest] Parsing question
> > >
> > > Thanks for the reply. That did not work either.
> > >
> > > Regards
> > > Vinay
> > >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of Jim Idle
> > > Sent: Wednesday, August 01, 2012 10:48 PM
> > > To: antlr-interest at antlr.org
> > > Subject: Re: [antlr-interest] Parsing question
> > >
> > > That should be:
> > >
> > > fragment
> > > DIGIT ....
> > >
> > > And you don't need separate parser rules for yearValue and the
> other
> > > two - they are the same thing, just use UNSIGNED_INTEGER directly.
> > >
> > > Jim
> > >
> > > > -----Original Message-----
> > > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > > bounces at antlr.org] On Behalf Of Vinay Pandit
> > > > Sent: Wednesday, August 01, 2012 9:44 PM
> > > > To: antlr-interest at antlr.org
> > > > Subject: [antlr-interest] Parsing question
> > > >
> > > > I am trying to parse a date time literal in ANTLR and I am having
> > > > issues with the grammar.
> > > >
> > > > Here are the rules defined in the parser
> > > >
> > > > dateValue : ( yearValue MINUS monthValue MINUS dayValue);
> > > >
> > > > yearValue : datetimeValue ;
> > > >
> > > > monthValue : datetimeValue;
> > > >
> > > > dayValue : datetimeValue;
> > > >
> > > > datetimeValue : UNSIGNED_INTEGER;
> > > >
> > > > The Lexer has
> > > >
> > > > MINUS         : '-' ;
> > > > DIGIT : ('0'..'9');
> > > > UNSIGNED_INTEGER : (DIGIT) +;
> > > >
> > > >
> > > > When I parse a date like 2012-01-01 for the dateValue rule, the
> > > parser
> > > > throws an exception.
> > > >
> > > > com. qexpr.ParseException: line 1:4 - mismatched input '-01'
> > > expecting
> > > > MINUS
> > > >                at
> > > >
> > >
> >
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77
> > > )
> > > >                at
> > > > com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
> > > >                at
> > > >
> > >
> >
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.j
> > > > a
> > > > va:25)
> > > > ...
> > > >
> > > > Looking at the error message it is obvious that I am not getting
> > the
> > > > Minus token. Instead the internal token that I get is an INTEGER
> > > > (signed). I tried the greedy=false option, but that did not seem
> > > > to help either. I am running out of ideas as to why the input
> does
> > > > not match. Obviously I am doing something wrong, but I am not
> sure
> > what!
> > > >
> > > > Regards
> > > > Vinay
> > > >
> > > >
> > > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> > > interest/your-
> > > > email-address
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> > interest/your-
> > > email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From vpandit at quantivo.com  Thu Aug  2 10:00:19 2012
From: vpandit at quantivo.com (Vinay Pandit)
Date: Thu, 2 Aug 2012 12:00:19 -0500
Subject: [antlr-interest] Parsing question
In-Reply-To: <2b560b03fb549d1909e1cdf53375c37e@mail.gmail.com>
References: <8AEDB49057949A48B244C5C103B5F6F70D074158C6@DFW1MBX07.mex07a.mlsrvr.com>
	<2c5aedb77eda131533d12d162fb32963@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D074158CB@DFW1MBX07.mex07a.mlsrvr.com>
	<f3a9cd5e2eb43fb8014b3ed9e714a85d@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D07415A15@DFW1MBX07.mex07a.mlsrvr.com>
	<38c9daf5813ae9cd3ea394263424174a@mail.gmail.com>
	<8AEDB49057949A48B244C5C103B5F6F70D07415A28@DFW1MBX07.mex07a.mlsrvr.com>
	<2b560b03fb549d1909e1cdf53375c37e@mail.gmail.com>
Message-ID: <8AEDB49057949A48B244C5C103B5F6F70D07415A36@DFW1MBX07.mex07a.mlsrvr.com>

Right. As you might have guessed I am a newbie with ANTLR! I have used Javacc previously and the parser had lookahead calls you could make to take care of ambiguities in the parser. I am not sure that the how to do this in ANTLR as yet. But that is a separate issue. Thanks for all your help

Regards
Vinay



-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Thursday, August 02, 2012 9:54 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Parsing question

If you put it in the lexer, how will you parse:

6 -4

When this is meant to be "subtract 4 from 6".

Jim

> -----Original Message-----
> From: Vinay Pandit [mailto:vpandit at quantivo.com]
> Sent: Thursday, August 02, 2012 9:49 AM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Parsing question
>
> The date parsing made sense to me. I was just wondering about the 
> signed and unsigned integer comment. If I make the decision about the 
> sign in the parser I just thought it would clutter it all up. Which is 
> the reason why I moved it into the LEXER.
>
> Regards
> Vinay
>
>
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Thursday, August 02, 2012 9:41 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing question
>
> That's what I thought. You are applying way too much context in to the 
> mix.
>
> Take out all the special attempts to handle date in either the lexer 
> or the parser and just accept SQUOTE (as in the simple string). And 
> also fix trying to have a signed and unsigned integer in the lexer - 
> the parser will have to do that.
>
> Then when you verify your AST (or as you parse if no AST), call a 
> function that validates the date (you can just use standard Java Date 
> stuff). Then you issue a semantic error if it is invalid.
>
> In SQL you may not be able to tell this until execution time unless 
> you have access to the table metadata so that you can see that a field 
> is a date type:
>
> ... WHERE T.myDate < '1964-07-14'
>
>
> Jim
>
>
> > -----Original Message-----
> > From: Vinay Pandit [mailto:vpandit at quantivo.com]
> > Sent: Thursday, August 02, 2012 9:35 AM
> > To: Jim Idle; antlr-interest at antlr.org
> > Subject: RE: [antlr-interest] Parsing question
> >
> > Yes, I think I was not clear enough. Here is what I wanted to do. In 
> > SQL we have a date string of the form date '2001-01-01'. I wanted to 
> > try and parse this date literal. I was just trying to figure out the 
> > dateValue subrule in my earlier mail.
> >
> > Here is the grammar I came up with (which does not seem to work). I
> am
> > excluding timeLiteral and timestamp literal for brevity. I was just 
> > not sure that I could get rid of the ambiguity by moving things into 
> > the lexer. For e.g. ultimately '2001-01-01' fragment of the input 
> > would match a STRING token, but because I have the 'date' in from of 
> > it the parser should use that rule. I am used to Javacc where you 
> > can provide lookaheads in order to tackle ambiguities.
> >
> > Hope this email clarifies my problem. Please let me know if you need 
> > any more input
> >
> > Thanks for your help
> > Vinay
> >
> > -------------------------------------------
> > datetimeLiteral
> >     	: dateLiteral | timeLiteral | timestampLiteral;
> >
> > dateLiteral : DATE dateString;
> >
> > dateString : QUOTE dateValue QUOTE;
> >
> > dateValue : UNSIGNED_INTEGER MINUS UNSIGNED_INTEGER MINUS 
> > UNSIGNED_INTEGER;
> >
> > The Lexer rules are
> >
> > fragment
> > DIGIT : ('0'..'9');
> > DATE          : ('D'|'d')('A'|'a')('T'|'t')('E'|'e');
> > UNSIGNED_INTEGER : (DIGIT) +;
> > MINUS         : '-' ;
> > QUOTE         : '\'';
> >
> >
> >
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> > bounces at antlr.org] On Behalf Of Jim Idle
> > Sent: Thursday, August 02, 2012 9:22 AM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing question
> >
> > OK - your example was not clear enough. You do need a fragment there.
> >
> > However it sounds like you are trying to get the lexer to handle 
> > negative numbers and that is usually the wrong way - you want to 
> > handle that in the parser's expression tree. However, I might be 
> > tempted to handle the date literal in the lexer rather than the
> parser
> > as you will otherwise create a lot of conflicts.
> >
> >
> > MINUS : '-';
> > fragment DATE :;
> > INTEGER : '0'..'9'+
> >           (('-' '0'..'9'+ '-' '0'..'9')=>('-' '0'..'9'+ '-'
> '0'..'9'+)
> > { $type = DATE; })?
> > ;
> >
> > Are you sure that your language allows date strings that are not
> quote
> > delimited? There is an obvious conflict with the subtract operator 
> > unless there are separate expression trees based on context.
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: Vinay Pandit [mailto:vpandit at quantivo.com]
> > > Sent: Wednesday, August 01, 2012 11:14 PM
> > > To: Jim Idle; antlr-interest at antlr.org
> > > Subject: RE: [antlr-interest] Parsing question
> > >
> > > Thanks for the reply. That did not work either.
> > >
> > > Regards
> > > Vinay
> > >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> > > bounces at antlr.org] On Behalf Of Jim Idle
> > > Sent: Wednesday, August 01, 2012 10:48 PM
> > > To: antlr-interest at antlr.org
> > > Subject: Re: [antlr-interest] Parsing question
> > >
> > > That should be:
> > >
> > > fragment
> > > DIGIT ....
> > >
> > > And you don't need separate parser rules for yearValue and the
> other
> > > two - they are the same thing, just use UNSIGNED_INTEGER directly.
> > >
> > > Jim
> > >
> > > > -----Original Message-----
> > > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> > > > bounces at antlr.org] On Behalf Of Vinay Pandit
> > > > Sent: Wednesday, August 01, 2012 9:44 PM
> > > > To: antlr-interest at antlr.org
> > > > Subject: [antlr-interest] Parsing question
> > > >
> > > > I am trying to parse a date time literal in ANTLR and I am 
> > > > having issues with the grammar.
> > > >
> > > > Here are the rules defined in the parser
> > > >
> > > > dateValue : ( yearValue MINUS monthValue MINUS dayValue);
> > > >
> > > > yearValue : datetimeValue ;
> > > >
> > > > monthValue : datetimeValue;
> > > >
> > > > dayValue : datetimeValue;
> > > >
> > > > datetimeValue : UNSIGNED_INTEGER;
> > > >
> > > > The Lexer has
> > > >
> > > > MINUS         : '-' ;
> > > > DIGIT : ('0'..'9');
> > > > UNSIGNED_INTEGER : (DIGIT) +;
> > > >
> > > >
> > > > When I parse a date like 2012-01-01 for the dateValue rule, the
> > > parser
> > > > throws an exception.
> > > >
> > > > com. qexpr.ParseException: line 1:4 - mismatched input '-01'
> > > expecting
> > > > MINUS
> > > >                at
> > > >
> > >
> >
> com.quantivo.qexpr.AbstractQParser.reportError(AbstractQParser.java:77
> > > )
> > > >                at
> > > > com.quantivo.qexpr.SQLGrammar.dateValue(SQLGrammar.java:4730)
> > > >                at
> > > >
> > >
> >
> com.quantivo.qexpr.model.SQLGrammarTest.testDateValue(SQLGrammarTest.j
> > > > a
> > > > va:25)
> > > > ...
> > > >
> > > > Looking at the error message it is obvious that I am not getting
> > the
> > > > Minus token. Instead the internal token that I get is an INTEGER 
> > > > (signed). I tried the greedy=false option, but that did not seem 
> > > > to help either. I am running out of ideas as to why the input
> does
> > > > not match. Obviously I am doing something wrong, but I am not
> sure
> > what!
> > > >
> > > > Regards
> > > > Vinay
> > > >
> > > >
> > > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> > > interest/your-
> > > > email-address
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> > interest/your-
> > > email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From veena.braj at gmail.com  Thu Aug  2 12:01:01 2012
From: veena.braj at gmail.com (vybs)
Date: Thu, 2 Aug 2012 12:01:01 -0700 (PDT)
Subject: [antlr-interest] Serializing the ANTRL AST
Message-ID: <1343934061789-7578504.post@n2.nabble.com>

I need a way to serialize the AST /CommonTreeNodeStream generated by Antlr
and then store it, so that I don't parse every time I walk the tree

Is this even possible in ANTLR3? I am a newbie and any pointers in this
direction will help. ( I did google for prev posts and stackoverflow, but I
could not derive anything conclusive)

thanks in advance



--
View this message in context: http://antlr.1301665.n2.nabble.com/Serializing-the-ANTRL-AST-tp7578504.html
Sent from the ANTLR mailing list archive at Nabble.com.

From Jost.Baron at gmx.de  Thu Aug  2 12:53:10 2012
From: Jost.Baron at gmx.de (Jost Baron)
Date: Thu, 02 Aug 2012 21:53:10 +0200
Subject: [antlr-interest] C++-Target - write AST as XML
In-Reply-To: <c0d8bae34e913c344a9fd0c0364cab50@mail.gmail.com>
References: <501A830C.8000109@gmx.de>
	<c0d8bae34e913c344a9fd0c0364cab50@mail.gmail.com>
Message-ID: <501ADAA6.8020203@gmx.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Jimi,

I want some form of the input file in a XML representation. If its a
generic AST or something else, doesn't matter, its going to be
transformed by XSLT anyway.

My current problem is to get the AST generation running with the
Cpp-Target: On setting "output=AST;", a ton of error messages is
generated at compiletime. These error messages look like this:

error: TreeType doesn't name a type.
error: ?struct myParser_timeStamp_return? has no member named ?tree?
(a follow up of #1)
error: ?ADAPTOR? was not declared in this scope
error: ?INPUT? was not declared in this scope
error: ?EXCEPTION? was not declared in this scope

Obviously, something is not included or a type not defined - any idea
how to solve this?

Jost

On 08/02/2012 06:27 PM, Jim Idle wrote:
> It isn't clear what you are trying to make in to XML. The input as
> a translation, or the AST itself?
> 
> Either way, this should be a fairly trivial set of methods that 
> recursively walk the AST manually just check what node they are
> seeing. Look at the source code for the dot transformer in the
> ANTLR runtime for a template.
> 
> Jim
> 
>> -----Original Message----- From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest- bounces at antlr.org] On Behalf Of Jost
>> Baron Sent: Thursday, August 02, 2012 6:39 AM To:
>> antlr-interest at antlr.org Subject: [antlr-interest] C++-Target -
>> write AST as XML
>> 
> Hi!
> 
> I've successfully created a grammar for some DSL, and now want to
> print an AST the input into XML format. As the grammar is quite
> large (several hundred rules), doing this manually would be slow
> and error prone.
> 
> So my question is: Is there anything that could help me to at
> least partly automatize the xml generation?
> 
> Thanks, Jost
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest 
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your- 
>> email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest 
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBAgAGBQJQGtqhAAoJEG6HPMAgWtVzJggQAJVCzY7nzMBTS4HxTDTAyfDT
jwk/vWW/mN4w8SRek31R/tjqhwO/DHKUiz48KNT50hc7dE2ciinkTqHBkNoX7/R7
tzAV3mwJOvYwo2M5KAA6W9iiPtS/x3Al5w1cqiJzWC9ES0cMPaduylEYy14+Ee5y
APp0OVzNwyoGcCdAdsrYsCoVAaeWfu8lCCjVTgGGF1/JIhtGtwm2aqjRUpA6rqly
cosoZoX/FFfbJ8LueA2eqhAwPqk3CC/ZKAfQo1rWCeJXdV3c28745KSjGY0uZs5+
a2uWz7Ao1Rxmag20av07m0zsUNNPXZ7LW5JIfbt98T+5+m+ivn0foaD/vFJb+Etf
lTHN2GbbOvxLMmf00lGxVCF2VS6aeZMHs4Ae3F9aclZ5TujfgCWt5dJcci5DuafE
koSezMWASAUXBJzwgdM6NYaB9lc1Ia3r76IpwsknObEUjIVtfZ34g4kecEP7uXJJ
3oyLJMI9B/dWskWjXGPhscNqM4BWYpRXVrjmHrRStg778JDTcFipmqHaMm+OJJVc
AFFEwzEV8HwNu7ChJY2QPqzdgx9V89G2FuPgh8+FBUSS4XUr+izNGwjg6bVYGdXB
+KsMtjpEa4WidLmaA2mOXk7r58uubtJ5KFc3pxkssYFNq65GHm2q3jzwxSRyO4IC
Vg94foGiloeosOjpZaLf
=2gAE
-----END PGP SIGNATURE-----

From parrt at cs.usfca.edu  Thu Aug  2 15:02:51 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 2 Aug 2012 15:02:51 -0700
Subject: [antlr-interest] antlr.org box going down briefly
Message-ID: <AEE1E5DA-3A24-43A8-9AAF-E28A64B8321E@cs.usfca.edu>

Hiya, adding more RAM to prevent out of memory errors with tomcat. antlr.org will be back up hopefully within the hour.
Terence

From jimi at temporal-wave.com  Fri Aug  3 10:19:26 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 3 Aug 2012 10:19:26 -0700
Subject: [antlr-interest] C++-Target - write AST as XML
In-Reply-To: <501ADAA6.8020203@gmx.de>
References: <501A830C.8000109@gmx.de>	<c0d8bae34e913c344a9fd0c0364cab50@mail.gmail.com>
	<501ADAA6.8020203@gmx.de>
Message-ID: <824a8921660b699a50e003d18e4af780@mail.gmail.com>

Looks like someone copied my C templates to make a Cpp target, but has not
implemented AST generation. I did not even know we had release a Cpp
target to be honest. You may be at a dead end unless you can find the Cpp
author. However, there is no overall reason you need to use Cpp, you can
compile the C target as C++/intermingle it with C++


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jost Baron
> Sent: Thursday, August 02, 2012 12:53 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] C++-Target - write AST as XML
>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hi Jimi,
>
> I want some form of the input file in a XML representation. If its a
> generic AST or something else, doesn't matter, its going to be
> transformed by XSLT anyway.
>
> My current problem is to get the AST generation running with the
> Cpp-Target: On setting "output=AST;", a ton of error messages is
> generated at compiletime. These error messages look like this:
>
> error: TreeType doesn't name a type.
> error: 'struct myParser_timeStamp_return' has no member named 'tree'
> (a follow up of #1)
> error: 'ADAPTOR' was not declared in this scope
> error: 'INPUT' was not declared in this scope
> error: 'EXCEPTION' was not declared in this scope
>
> Obviously, something is not included or a type not defined - any idea
> how to solve this?
>
> Jost
>
> On 08/02/2012 06:27 PM, Jim Idle wrote:
> > It isn't clear what you are trying to make in to XML. The input as a
> > translation, or the AST itself?
> >
> > Either way, this should be a fairly trivial set of methods that
> > recursively walk the AST manually just check what node they are
> > seeing. Look at the source code for the dot transformer in the ANTLR
> > runtime for a template.
> >
> > Jim
> >
> >> -----Original Message----- From: antlr-interest-bounces at antlr.org
> >> [mailto:antlr-interest- bounces at antlr.org] On Behalf Of Jost Baron
> >> Sent: Thursday, August 02, 2012 6:39 AM To:
> >> antlr-interest at antlr.org Subject: [antlr-interest] C++-Target -
> write
> >> AST as XML
> >>
> > Hi!
> >
> > I've successfully created a grammar for some DSL, and now want to
> > print an AST the input into XML format. As the grammar is quite large
> > (several hundred rules), doing this manually would be slow and error
> > prone.
> >
> > So my question is: Is there anything that could help me to at least
> > partly automatize the xml generation?
> >
> > Thanks, Jost
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-
> >> email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.11 (GNU/Linux)
> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/
>
> iQIcBAEBAgAGBQJQGtqhAAoJEG6HPMAgWtVzJggQAJVCzY7nzMBTS4HxTDTAyfDT
> jwk/vWW/mN4w8SRek31R/tjqhwO/DHKUiz48KNT50hc7dE2ciinkTqHBkNoX7/R7
> tzAV3mwJOvYwo2M5KAA6W9iiPtS/x3Al5w1cqiJzWC9ES0cMPaduylEYy14+Ee5y
> APp0OVzNwyoGcCdAdsrYsCoVAaeWfu8lCCjVTgGGF1/JIhtGtwm2aqjRUpA6rqly
> cosoZoX/FFfbJ8LueA2eqhAwPqk3CC/ZKAfQo1rWCeJXdV3c28745KSjGY0uZs5+
> a2uWz7Ao1Rxmag20av07m0zsUNNPXZ7LW5JIfbt98T+5+m+ivn0foaD/vFJb+Etf
> lTHN2GbbOvxLMmf00lGxVCF2VS6aeZMHs4Ae3F9aclZ5TujfgCWt5dJcci5DuafE
> koSezMWASAUXBJzwgdM6NYaB9lc1Ia3r76IpwsknObEUjIVtfZ34g4kecEP7uXJJ
> 3oyLJMI9B/dWskWjXGPhscNqM4BWYpRXVrjmHrRStg778JDTcFipmqHaMm+OJJVc
> AFFEwzEV8HwNu7ChJY2QPqzdgx9V89G2FuPgh8+FBUSS4XUr+izNGwjg6bVYGdXB
> +KsMtjpEa4WidLmaA2mOXk7r58uubtJ5KFc3pxkssYFNq65GHm2q3jzwxSRyO4IC
> Vg94foGiloeosOjpZaLf
> =2gAE
> -----END PGP SIGNATURE-----
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From Jost.Baron at gmx.de  Fri Aug  3 11:17:49 2012
From: Jost.Baron at gmx.de (Jost Baron)
Date: Fri, 03 Aug 2012 20:17:49 +0200
Subject: [antlr-interest] C++-Target - write AST as XML
In-Reply-To: <824a8921660b699a50e003d18e4af780@mail.gmail.com>
References: <501A830C.8000109@gmx.de>	<c0d8bae34e913c344a9fd0c0364cab50@mail.gmail.com>
	<501ADAA6.8020203@gmx.de>
	<824a8921660b699a50e003d18e4af780@mail.gmail.com>
Message-ID: <501C15CD.90005@gmx.de>

HI Jimi,

i've got it working now. The way was to simply add a @init and @after 
action to each rule, which starts or ends a xml node. This wasn't much 
effort using the regex find/replace mechanism of eclipse. It only gives 
me a parse tree in XML format, but that's fine, XSLT will do the rest.

The C++-Target has potential, but it still needs some work - better 
documentation, working support for custom members and AST-support are 
the most pressing issues to my mind (maybe Gokul reads this?). I can 
provide details about bugs if wanted.

JOst

On 08/03/2012 07:19 PM, Jim Idle wrote:
> Looks like someone copied my C templates to make a Cpp target, but has not
> implemented AST generation. I did not even know we had release a Cpp
> target to be honest. You may be at a dead end unless you can find the Cpp
> author. However, there is no overall reason you need to use Cpp, you can
> compile the C target as C++/intermingle it with C++
>
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Jost Baron
>> Sent: Thursday, August 02, 2012 12:53 PM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] C++-Target - write AST as XML
>>
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA1
>>
>> Hi Jimi,
>>
>> I want some form of the input file in a XML representation. If its a
>> generic AST or something else, doesn't matter, its going to be
>> transformed by XSLT anyway.
>>
>> My current problem is to get the AST generation running with the
>> Cpp-Target: On setting "output=AST;", a ton of error messages is
>> generated at compiletime. These error messages look like this:
>>
>> error: TreeType doesn't name a type.
>> error: 'struct myParser_timeStamp_return' has no member named 'tree'
>> (a follow up of #1)
>> error: 'ADAPTOR' was not declared in this scope
>> error: 'INPUT' was not declared in this scope
>> error: 'EXCEPTION' was not declared in this scope
>>
>> Obviously, something is not included or a type not defined - any idea
>> how to solve this?
>>
>> Jost
>>
>> On 08/02/2012 06:27 PM, Jim Idle wrote:
>>> It isn't clear what you are trying to make in to XML. The input as a
>>> translation, or the AST itself?
>>>
>>> Either way, this should be a fairly trivial set of methods that
>>> recursively walk the AST manually just check what node they are
>>> seeing. Look at the source code for the dot transformer in the ANTLR
>>> runtime for a template.
>>>
>>> Jim
>>>
>>>> -----Original Message----- From: antlr-interest-bounces at antlr.org
>>>> [mailto:antlr-interest- bounces at antlr.org] On Behalf Of Jost Baron
>>>> Sent: Thursday, August 02, 2012 6:39 AM To:
>>>> antlr-interest at antlr.org Subject: [antlr-interest] C++-Target -
>> write
>>>> AST as XML
>>>>
>>> Hi!
>>>
>>> I've successfully created a grammar for some DSL, and now want to
>>> print an AST the input into XML format. As the grammar is quite large
>>> (several hundred rules), doing this manually would be slow and error
>>> prone.
>>>
>>> So my question is: Is there anything that could help me to at least
>>> partly automatize the xml generation?
>>>
>>> Thanks, Jost
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-
>>>> email-address
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> address
>> -----BEGIN PGP SIGNATURE-----
>> Version: GnuPG v1.4.11 (GNU/Linux)
>> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/
>>
>> iQIcBAEBAgAGBQJQGtqhAAoJEG6HPMAgWtVzJggQAJVCzY7nzMBTS4HxTDTAyfDT
>> jwk/vWW/mN4w8SRek31R/tjqhwO/DHKUiz48KNT50hc7dE2ciinkTqHBkNoX7/R7
>> tzAV3mwJOvYwo2M5KAA6W9iiPtS/x3Al5w1cqiJzWC9ES0cMPaduylEYy14+Ee5y
>> APp0OVzNwyoGcCdAdsrYsCoVAaeWfu8lCCjVTgGGF1/JIhtGtwm2aqjRUpA6rqly
>> cosoZoX/FFfbJ8LueA2eqhAwPqk3CC/ZKAfQo1rWCeJXdV3c28745KSjGY0uZs5+
>> a2uWz7Ao1Rxmag20av07m0zsUNNPXZ7LW5JIfbt98T+5+m+ivn0foaD/vFJb+Etf
>> lTHN2GbbOvxLMmf00lGxVCF2VS6aeZMHs4Ae3F9aclZ5TujfgCWt5dJcci5DuafE
>> koSezMWASAUXBJzwgdM6NYaB9lc1Ia3r76IpwsknObEUjIVtfZ34g4kecEP7uXJJ
>> 3oyLJMI9B/dWskWjXGPhscNqM4BWYpRXVrjmHrRStg778JDTcFipmqHaMm+OJJVc
>> AFFEwzEV8HwNu7ChJY2QPqzdgx9V89G2FuPgh8+FBUSS4XUr+izNGwjg6bVYGdXB
>> +KsMtjpEa4WidLmaA2mOXk7r58uubtJ5KFc3pxkssYFNq65GHm2q3jzwxSRyO4IC
>> Vg94foGiloeosOjpZaLf
>> =2gAE
>> -----END PGP SIGNATURE-----
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From forumer at smartmobili.com  Fri Aug  3 15:58:23 2012
From: forumer at smartmobili.com (forumer at smartmobili.com)
Date: Sat, 04 Aug 2012 00:58:23 +0200
Subject: [antlr-interest] Newbie trying to tame lexer
Message-ID: <5faf342bcd6e7b9ae03fcf0c5ce4de39@smartmobili.com>

Hi,

I would like to use antlr to generate a lexer to highlight some keyword 
and comments and so far
everything is fine as long as I don't try to handle multiline comments.
To solve my problem I wrote the following lines :


BLOCK_COMMENT
     : '/*'
	;

CONTINUE_COMMENT
     : ~('*/')*            // DOESN'T WORK
     ;

END_BLOCK_COMMENT
     :   '*/'
	;

LINE_COMMENT
     :   '//' ~('\n'|'\r')*  ('\r\n' | '\r' | '\n')
             {
                  $channel = Hidden;
             }
     |   '//' ~('\n'|'\r')*     // a line comment could appear at the 
end of the file without CR/LF
             {
                  $channel = Hidden;
             }
     ;

The problem is with BLOCK_COMMENT, CONTINUE_COMMENT and  
END_BLOCK_COMMENT rules so my question is:

Once the lexer is inside BLOCK_COMMENT how do I tell him to pass to 
CONTINUE_COMMENT rule
and then how do I tell CONTINUE_COMMENT to eat everything except '*/' ?



Thanks


From kierans777 at gmail.com  Sat Aug  4 04:03:02 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Sat, 04 Aug 2012 21:03:02 +1000
Subject: [antlr-interest] Serializing the ANTRL AST
In-Reply-To: <1343934061789-7578504.post@n2.nabble.com>
References: <1343934061789-7578504.post@n2.nabble.com>
Message-ID: <501D0166.9080107@gmail.com>

If you're using the Java target, then you have Java objects at the end 
of the parse.  You can serialise the objects to a binary file (ie: a bit 
blob), then when needing to read them back in.

However I'd only do that if the source of the parse is unlikely to 
change very often or if deserialising the bit blob is actually faster 
than reparsing your source.

HTH.

Cheers,

On 3/08/12 5:01 AM, vybs wrote:
> I need a way to serialize the AST /CommonTreeNodeStream generated by Antlr
> and then store it, so that I don't parse every time I walk the tree
>
> Is this even possible in ANTLR3? I am a newbie and any pointers in this
> direction will help. ( I did google for prev posts and stackoverflow, but I
> could not derive anything conclusive)
>
> thanks in advance

From bkiers at gmail.com  Sat Aug  4 11:20:13 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 4 Aug 2012 20:20:13 +0200
Subject: [antlr-interest] Newbie trying to tame lexer
In-Reply-To: <5faf342bcd6e7b9ae03fcf0c5ce4de39@smartmobili.com>
References: <5faf342bcd6e7b9ae03fcf0c5ce4de39@smartmobili.com>
Message-ID: <CAOrgODYsO9gMiMsZ8EsEn1Aa8XtNB-XeP5mF0-yRk7SR-VWguw@mail.gmail.com>

Hi forumer,

You'd normally create a single rule for a block comment, like this:

BLOCK_COMMENT
 : '/*' .* '*/'
 ;

(note that `.*` and `.+` are ungreedy by default!)

Be careful, however, you can't have a trailing `.*` or `.+` though: it will
consume the entire input.

Also, you can't negate two characters: `~('*/')` is wrong. And you should
never have a lexer rule that matches an empty string (your
`CONTINUE_COMMENT` does that): your lexer might go in an infinite loop:
there are an infinite number of empty string in any input, after all.

Regards,

Bart.


On Sat, Aug 4, 2012 at 12:58 AM, <forumer at smartmobili.com> wrote:

> Hi,
>
> I would like to use antlr to generate a lexer to highlight some keyword
> and comments and so far
> everything is fine as long as I don't try to handle multiline comments.
> To solve my problem I wrote the following lines :
>
>
> BLOCK_COMMENT
>      : '/*'
>         ;
>
> CONTINUE_COMMENT
>      : ~('*/')*            // DOESN'T WORK
>      ;
>
> END_BLOCK_COMMENT
>      :   '*/'
>         ;
>
> LINE_COMMENT
>      :   '//' ~('\n'|'\r')*  ('\r\n' | '\r' | '\n')
>              {
>                   $channel = Hidden;
>              }
>      |   '//' ~('\n'|'\r')*     // a line comment could appear at the
> end of the file without CR/LF
>              {
>                   $channel = Hidden;
>              }
>      ;
>
> The problem is with BLOCK_COMMENT, CONTINUE_COMMENT and
> END_BLOCK_COMMENT rules so my question is:
>
> Once the lexer is inside BLOCK_COMMENT how do I tell him to pass to
> CONTINUE_COMMENT rule
> and then how do I tell CONTINUE_COMMENT to eat everything except '*/' ?
>
>
>
> Thanks
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From forumer at smartmobili.com  Sat Aug  4 13:34:54 2012
From: forumer at smartmobili.com (forumer at smartmobili.com)
Date: Sat, 04 Aug 2012 22:34:54 +0200
Subject: [antlr-interest] Newbie trying to tame lexer
In-Reply-To: <CAOrgODYsO9gMiMsZ8EsEn1Aa8XtNB-XeP5mF0-yRk7SR-VWguw@mail.gmail.com>
References: <5faf342bcd6e7b9ae03fcf0c5ce4de39@smartmobili.com>
	<CAOrgODYsO9gMiMsZ8EsEn1Aa8XtNB-XeP5mF0-yRk7SR-VWguw@mail.gmail.com>
Message-ID: <65f49234e44a369de29444c1370c7c09@smartmobili.com>

Le 04.08.2012 20:20, Bart Kiers a ?crit?:
> Hi forumer,
>
> Youd normally create a single rule for a block comment, like this:
>
> BLOCK_COMMENT
> ?: /* .* */
> ?;
>
Yes I know but I need a parser that can accept invalid multiline 
comments, ex

/*
* I am an invalid multiline comment

With the traditional approach I will get a match exception and I don't 
want that.
So is it possible ?




From bkiers at gmail.com  Sun Aug  5 10:53:55 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Sun, 5 Aug 2012 19:53:55 +0200
Subject: [antlr-interest] Newbie trying to tame lexer
In-Reply-To: <65f49234e44a369de29444c1370c7c09@smartmobili.com>
References: <5faf342bcd6e7b9ae03fcf0c5ce4de39@smartmobili.com>
	<CAOrgODYsO9gMiMsZ8EsEn1Aa8XtNB-XeP5mF0-yRk7SR-VWguw@mail.gmail.com>
	<65f49234e44a369de29444c1370c7c09@smartmobili.com>
Message-ID: <CAOrgODbCG5JFsUok7AVyMWXqi=OoWkhi=2dy=LuOVsuy31q-qw@mail.gmail.com>

Try something like this:

BLOCK_COMMENT
 : '/*' ({input.LA(1) != '*' && input.LA(2) != '/'}?=> . )*
   ( '*/'
   | EOF {System.err.println("Oi, wrong BLOCK_COMMENT!");}
   )
 ;


Note that the predicate, `{input.LA(1) != '*' && input.LA(2) != '/'}?=>`,
contains target-specific code (Java, in my example).

Regards,

Bart.


On Sat, Aug 4, 2012 at 10:34 PM, <forumer at smartmobili.com> wrote:

> Le 04.08.2012 20:20, Bart Kiers a ?crit :
>
>> Hi forumer,
>>
>> Youd normally create a single rule for a block comment, like this:
>>
>> BLOCK_COMMENT
>>  : /* .* */
>>  ;
>>
>>  Yes I know but I need a parser that can accept invalid multiline
> comments, ex
>
> /*
> * I am an invalid multiline comment
>
> With the traditional approach I will get a match exception and I don't
> want that.
> So is it possible ?
>
>
>
>

From veena.braj at gmail.com  Sun Aug  5 13:30:55 2012
From: veena.braj at gmail.com (vybs)
Date: Sun, 5 Aug 2012 13:30:55 -0700 (PDT)
Subject: [antlr-interest] Is there a difference in performance using
 CommonTreeNode Vs BufferTreeNode
Message-ID: <1344198655048-7578520.post@n2.nabble.com>

I am trying to walk a really huge tree, and see substantial amount of time
spent walking the tree grammar.
CommonTreeNodeStream Vs BufferTreeNodeStream
Does  one perform better than the other ?



--
View this message in context: http://antlr.1301665.n2.nabble.com/Is-there-a-difference-in-performance-using-CommonTreeNode-Vs-BufferTreeNode-tp7578520.html
Sent from the ANTLR mailing list archive at Nabble.com.

From grzm at seespotcode.net  Sun Aug  5 16:12:23 2012
From: grzm at seespotcode.net (Michael Glaesemann)
Date: Sun, 5 Aug 2012 19:12:23 -0400
Subject: [antlr-interest] "replace: range invalid" error when rewriting an
	imaginary token/empty block
Message-ID: <9082725F-B036-4D04-ABF9-4547F216E1DC@seespotcode.net>

Hi!

I'm writing a code annotator and am having issues annotating empty blocks.
I'm just starting with ANTLR, and have searched both TDAR and Google, but
haven't found a solution to my problem. I'm using AntlrWorks 1.4.3.

What I want to do:

# source
begin statement end

# annotated source indicating position of the block
begin /* line 1 pos 0 */ statement end

# source
begin statement statement end

# annotated source
begin /* line 1 pos 0 */ statement statement end

I have the above working. However, it fails with empty blocks:

# source
begin end

#error
java.lang.IllegalArgumentException: replace: range invalid: 2..0(size=4)

Here are my combined and tree grammars:

grammar EmptyBlock;
options {
  output=AST;
  ASTLabelType=CommonTree;
}

tokens {
	BLOCK;
  SLIST;
}

@header { package mtblock; }
@lexer::header { package mtblock; }

block
	: BEGIN stats END -> ^(BLOCK BEGIN stats END)
	;
	
stats
	: stat* -> ^(SLIST stat*)
	;

stat
 	: STAT
 	;

STAT
	: 'statement'
	;

BEGIN 
	: 'begin'
	;

END
	: 'end'
	;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;


tree grammar Annotate;
options {
  tokenVocab=EmptyBlock;
  ASTLabelType=CommonTree;
  output=template;
  rewrite=true;
}
@header { package mtblock; }

block
scope {
  int line;
  int pos;
}
	: ^(BLOCK {$block::line=$BLOCK.line; $block::pos=$BLOCK.pos;}
	    BEGIN  stats END)
	;

stats
	: ^(SLIST stat*)
  	-> template(l={$block::line},p={$block::pos},s={$text})
  		"/* line <l> pos <p> */ <s>"
	;

stat
	: STAT
	;


I found one post to the mailing list that I thought was similar:
<http://www.antlr.org/pipermail/antlr-interest/2009-September/035969.html>

When I tried what was suggested (see below), I got the same error as before.

I think it has to do with the fact that the SLIST token doesn't have any stream
information associated with it. It has no indexes in the stream, so I'm getting
the range error. However, if that's the case I'm at a loss as to how to add
appropriate index information to the SLIST token.

Thanks for any assistance.

Michael Glaesemann
grzm seespotcode net





grammar EmptyBlock;
options {
  output=AST;
  ASTLabelType=CommonTree;
}

tokens {
	BLOCK;
  SLIST;
}

@header { package mtblock; }
@lexer::header { package mtblock; }

block
	: BEGIN block_body END -> ^(BLOCK BEGIN block_body END)
	;
	
block_body
  :	 stats? -> ^(SLIST stats?)
  ;

stats
	: stat+
	;

stat
 	: STAT
 	;

STAT
	: 'statement'
	;

BEGIN 
	: 'begin'
	;

END
	: 'end'
	;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;


tree grammar Annotate;
options {
  tokenVocab=EmptyBlock;
  ASTLabelType=CommonTree;
  output=template;
  rewrite=true;
}
@header { package mtblock; }

block
scope {
  int line;
  int pos;
}
	: ^(BLOCK {$block::line=$BLOCK.line; $block::pos=$BLOCK.pos;}
	    BEGIN block_body END)
	;

block_body
	: ^(SLIST stats)
  	-> template(l={$block::line},p={$block::pos},s={$text})
  		"/* line <l> pos <p> */ <s>"
	| SLIST
  	-> template(l={$block::line},p={$block::pos})
  		"/* line <l> pos <p> */"
	;

stats
	: stat+
	;

stat
	: STAT
	;


From kunalsawlani at gmail.com  Sun Aug  5 20:10:26 2012
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Sun, 5 Aug 2012 23:10:26 -0400
Subject: [antlr-interest] Antlr and Java 7
Message-ID: <CAFJ6+2fBoQwxxEuPaa7aEfzidO4ViykjenVHrga+kJ_oNiAyuA@mail.gmail.com>

Hi all,

I have been working with ANTLR 3.3 and Java 6, and have not had any trouble
with this. I recently started using Java 1.7 and have been having a few
issues.

I tried to search for compatibility information on the website, but could
not find anything.

Could someone tell me if  ANTLR  3.3 or which version of  ANTLR are
compatible with Java 7.

Thanks,

-- 
Kunal Sawlani

From bkiers at gmail.com  Sun Aug  5 23:59:10 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 6 Aug 2012 08:59:10 +0200
Subject: [antlr-interest] Antlr and Java 7
In-Reply-To: <CAFJ6+2fBoQwxxEuPaa7aEfzidO4ViykjenVHrga+kJ_oNiAyuA@mail.gmail.com>
References: <CAFJ6+2fBoQwxxEuPaa7aEfzidO4ViykjenVHrga+kJ_oNiAyuA@mail.gmail.com>
Message-ID: <CAOrgODajequR07Z6wuzf4wz=TV-mjELs0fVHwAAUxHrF8-Cb1g@mail.gmail.com>

Hi,

I've never had any issues with Java 1.5, 1.6 or 1.7 in combination with
ANTLR 3.x.

Regards,

Bart.


On Mon, Aug 6, 2012 at 5:10 AM, Kunal Sawlani <kunalsawlani at gmail.com>wrote:

> Hi all,
>
> I have been working with ANTLR 3.3 and Java 6, and have not had any trouble
> with this. I recently started using Java 1.7 and have been having a few
> issues.
>
> I tried to search for compatibility information on the website, but could
> not find anything.
>
> Could someone tell me if  ANTLR  3.3 or which version of  ANTLR are
> compatible with Java 7.
>
> Thanks,
>
> --
> Kunal Sawlani
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From atul at entrib.com  Mon Aug  6 04:43:44 2012
From: atul at entrib.com (Atul Dambalkar)
Date: Mon, 6 Aug 2012 17:13:44 +0530
Subject: [antlr-interest] Issue while building objects at the parsing stage.
Message-ID: <CAKAzyDeqsEzZdm-7=_uyt1hm-eJUrmqTYnBO_aGTmx2RL+HAXQ@mail.gmail.com>

Hi,

Please take a look at following grammar/parser. The grammar is simply for
parsing the expressions (logical, relational and arithmetic). So it has the
same rules related to operator precedence as well as the non-LR parsing. In
the parser I have added Java code (which should be fairly self explanatory)
which constructs the nested expression object once the entire expression is
parsed. I am also using tree creation constructs in the grammar but that
can be ignored.

Expression like this is getting parsed successfully - tag2 >= (435 * ----12
+ (12 ---23)) && tag1 starts "200" || tag3 starts "200"
The above expression after being parsed the tree gets printed as - (|| (&&
(>= tag2 (+ (* 435 - - - - 12) (- 12 - - 23))) (starts tag1 "200")) (starts
tag3 "200"))

But the nested data structure I try to build skips one complete sub-tree
which roots at && node. But the same (&&) node gets added if I change the
above expression to -  (tag2 >= (435 * ----12 + (12 ---23)) && tag1 starts
"200") || tag3 starts "200". Please note I just added a left paren and
right paren to the && node.

After little bit of looking into the generated code, I realized that the &&
expression node object gets built correctly but it gets overwritten by one
of the node objects for "starts" in the expression later. And I believe the
reason it gets over-written is due the "do-while" code in the generated
code which is kind-of iterating while parsing the expression (I guess due
to non-LR parsing). Only if I put a the left paren and right paren, the
expression parsing takes a different route as per the grammar and the &&
node gets constructed through different route and hence gets added to the
nested expression object.

Can someone help me here in fixing specifically the part where recursive
logical expression is getting built?

Thanks and appreciate the help.

================================
// Author: Atul Dambalkar (atul at entrib.com)

parser grammar TParser;

options {

    // Default language but name it anyway
    language  = Java;

    // output as AST
    output = AST;

    // Use a superclass to implement all helper methods, instance variables
and overrides
    // of ANTLR default methods, such as error handling.
    //
    superClass = AbstractTParser;

    // Use the vocabulary generated by the accompanying lexer. Maven knows
how to work out the relationship
    // between the lexer and parser and will build the lexer before the
parser. It will also rebuild the
    // parser if the lexer changes.
    tokenVocab = TLexer;
}

// Some imaginary tokens for tree rewrites
tokens {
    UNARYNOT;
    UNARYMINUS;
    UNARYEXISTS;
}

// What package should the generated source exist in?
@header {
    package com.entrib.poc.antlr;
    import com.entrib.poc.antlr.converter.type.*;
    import com.entrib.poc.antlr.converter.expr.*;
}

prog returns [Expression expression]
    : expr { $expression = $expr.expression; } EOF
    ;

expr returns [Expression expression]
    : relationalExpression1 { $expression =
$relationalExpression1.expression; }
    (
        {
            $expression = new LogicalExpression();

((LogicalExpression)$expression).setExpression1($relationalExpression1.expression);
        }
        (
            AND^ {
((LogicalExpression)$expression).setLogicalOperatorEnum(LogicalExpression.LogicalOperatorEnum.AND);
}
            |
            OR^ {
((LogicalExpression)$expression).setLogicalOperatorEnum(LogicalExpression.LogicalOperatorEnum.OR);
}
        )
        relationalExpression2 {
((LogicalExpression)$expression).setExpression2($relationalExpression2.expression);
}
    )*
    ;

relationalExpression1 returns [Expression expression]
    : relationalExpression { $expression =
$relationalExpression.expression; }
    ;

relationalExpression2 returns [Expression expression]
    : relationalExpression { $expression =
$relationalExpression.expression; }
    ;

valueList
    : LB!
        (primitiveValue)
        (COMMA primitiveValue)*
      RB!
    ;

primitiveValue returns [Expression expression]
    : INT { $expression = createValueObject(ValueType.INT, $INT.text); }
    |
    FLOAT { $expression = createValueObject(ValueType.FLOAT, $FLOAT.text); }
    |
    TIMESTAMP { $expression = createValueObject(ValueType.DATE,
$TIMESTAMP.text); }
    |
    STRING { $expression = createValueObject(ValueType.STRING,
$STRING.text); }
    |
    ID { $expression = createValueObject(ValueType.ID, $ID.text); }
    |
    TAG { $expression = createValueObject(ValueType.TAG, $TAG.text); }
    |
    LP! expr { $expression = $expr.expression; } RP!
    ;

expr1
    : expr
    ;

expr2
    : expr
    ;

primitiveElement returns [Expression expression]
     : primitiveValue { $expression = $primitiveValue.expression; }
     |
     valueList
     ;

existsExpression returns [Expression expression]
     : EXISTS TAG { $expression = createExistsExpression($TAG.text); }
     ;

relationalExpression returns [Expression expression]
     : arithExpression1 { $expression = $arithExpression1.expression; }
     (
         {
             $expression = new RelationalExpression();

 ((RelationalExpression)$expression).setExpression1($arithExpression1.expression);
         }
         (
             EQ^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.EQ);
}
             |
             NEQ^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.NEQ);
}
             |
             GT^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(
RelationalExpression.RelationalOperatorEnum.GT); }
             |
             GTE^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.GTE);
}
             |
             LT^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(
RelationalExpression.RelationalOperatorEnum.LT); }
             |
             LTE^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.LTE);
}
             |
             IN^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(
RelationalExpression.RelationalOperatorEnum.IN); }
             |
             NIN^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.NIN);
}
             |
             CONTAINS^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.CONTAINS);
}
             |
             STARTS^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.STARTS);
}
             |
             ENDS^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.ENDS);
}
             |
             ALL^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.ALL);
}
             |
             NOR^ {
((RelationalExpression)$expression).setRelationalOperatorEnum(RelationalExpression.RelationalOperatorEnum.NOR);
}
         )
         arithExpression2 {
((RelationalExpression)$expression).setExpression2($arithExpression2.expression);
}
     )*
     ;

arithExpression1 returns [Expression expression]
    : arithExpression { $expression = $arithExpression.expression; }
    ;

arithExpression2 returns [Expression expression]
    : arithExpression { $expression = $arithExpression.expression; }
    ;

arithExpression returns [Expression expression]
     : multiplyingExpression1 { $expression =
$multiplyingExpression1.expression; }
     (
         {
             $expression = new ArithExpression();

 ((ArithExpression)$expression).setExpression1($multiplyingExpression1.expression);
         }
         (
             PLUS^ {
((ArithExpression)$expression).setArithOperatorEnum(ArithExpression.ArithOperatorEnum.PLUS);
}
             |
             MINUS^ {
((ArithExpression)$expression).setArithOperatorEnum(ArithExpression.ArithOperatorEnum.MINUS);
}
         )
         multiplyingExpression2 {
((ArithExpression)$expression).setExpression2($multiplyingExpression2.expression);
}
     )*
     ;

multiplyingExpression1 returns [Expression expression]
    : multiplyingExpression { $expression =
$multiplyingExpression.expression; }
    ;

multiplyingExpression2 returns [Expression expression]
    : multiplyingExpression { $expression =
$multiplyingExpression.expression; }
    ;

signExpression returns [Expression expression]
     : { $expression = new MinusExpression(); }
     MINUS signExpression1 {
((MinusExpression)$expression).setExpression($signExpression1.expression); }
     | existsExpression { $expression = $existsExpression.expression; }
     | primitiveElement { $expression = $primitiveElement.expression; }
     ;

multiplyingExpression returns [Expression expression]
     : signExpression1 { $expression = $signExpression1.expression; }
     (
         {
             $expression = new MultiplyingExpression();

 ((MultiplyingExpression)$expression).setExpression1($signExpression1.expression);
         }
         (
             MULTI^ {
((MultiplyingExpression)$expression).setMultiplyingOperatorEnum(MultiplyingExpression.MultiplyingOperatorEnum.MULTI);
}
             |
             DIV^ {
((MultiplyingExpression)$expression).setMultiplyingOperatorEnum(MultiplyingExpression.MultiplyingOperatorEnum.DIV);
}
             |
             MOD^ {
((MultiplyingExpression)$expression).setMultiplyingOperatorEnum(MultiplyingExpression.MultiplyingOperatorEnum.MOD);
}
         )
         signExpression2 {
((MultiplyingExpression)$expression).setExpression2($signExpression2.expression);
}
     )*
     ;

signExpression1 returns [Expression expression]
    : signExpression { $expression = $signExpression.expression; }
    ;

signExpression2 returns [Expression expression]
    : signExpression { $expression = $signExpression.expression; }
    ;
======================================================

Just the grammar without the Java code

======================================================

// Author: Atul Dambalkar (atul at entrib.com)

parser grammar TParser;

options {

    // Default language but name it anyway
    language  = Java;

    // output as AST
    output = AST;

    // Use a superclass to implement all helper methods, instance variables
and overrides
    // of ANTLR default methods, such as error handling.
    //
    superClass = AbstractTParser;

    // Use the vocabulary generated by the accompanying lexer. Maven knows
how to work out the relationship
    // between the lexer and parser and will build the lexer before the
parser. It will also rebuild the
    // parser if the lexer changes.
    tokenVocab = TLexer;
}

// Some imaginary tokens for tree rewrites
tokens {
    UNARYNOT;
    UNARYMINUS;
    UNARYEXISTS;
}

// What package should the generated source exist in?
@header {
    package com.entrib.poc.antlr;
}

prog
    : expr EOF
    ;

expr
    :
    relationalExpression
    (
        (
            AND^
            |
            OR^
        )
        relationalExpression
    )*
    ;

valueList
    : LB!
        (primitiveValue)
        (COMMA primitiveValue)*
      RB!
    ;

primitiveValue
    : INT
    |
    FLOAT
    |
    TIMESTAMP
    |
    STRING
    |
    ID
    |
    TAG
    |
    LP! expr RP!
    ;

primitiveElement
     :
     primitiveValue
     |
     valueList
     ;

existsExpression
     : EXISTS TAG
     ;

relationalExpression
     : arithExpression
     (
         (
             EQ^
             |
             NEQ^
             |
             GT^
             |
             GTE^
             |
             LT^
             |
             LTE^
             |
             IN^
             |
             NIN^
             |
             CONTAINS^
             |
             STARTS^
             |
             ENDS^
             |
             ALL^
             |
             NOR^
         )
         arithExpression
     )*
     ;

arithExpression
     : multiplyingExpression
     (
         (
             PLUS^
             |
             MINUS^
         )
         multiplyingExpression
     )*
     ;

signExpression
     :
     MINUS signExpression
     | existsExpression
     | primitiveElement
     ;

multiplyingExpression
     : signExpression
     (
         (
             MULTI^
             |
             DIV^
             |
             MOD^
         )
         signExpression
     )*
     ;
============================================================

-- 
Co-founder & CTO | Entrib Technologies | www.entrib.com  | Cell: +91 94223
15436 | Office: +91 20 4129 7982 | Email: atul at entrib.com <kiran at entrib.com>

From andrew.gacek at gmail.com  Mon Aug  6 06:29:45 2012
From: andrew.gacek at gmail.com (Andrew Gacek)
Date: Mon, 6 Aug 2012 08:29:45 -0500
Subject: [antlr-interest] Expression grammars and *non*-ambiguities
Message-ID: <CAHgzvFh1Srpm3GkQ-ERH0+W4_fQ4g0C_sECqWtj47Xu6snPONA@mail.gmail.com>

Suppose I am trying to parse an expression language with
multiplication, addition, and if-then-else where multiplication has
the highest precedence and if-then-else has the lowest. For example,

  a + b * c   is parsed as   a + (b * c)
  if a then b else c * d   is parsed as   if a then b else (c * d)
  a * if b then c else d   is parsed as   a * (if a then b else c)

Note that in the last example, there is no ambiguity and thus no need
for precedence. I started with a grammar like the following:


expr: conditional;

conditional
: term
| 'if' expr 'then' expr 'else' expr
;

term: factor ('+' factor)*;

factor: atom ('*' atom)*;

atom
: INT
| '(' expr ')'
;

INT: ('0'..'9')+;


The problem with this grammar is that it rejects "a * if b then c else
d" since to the right of a multiplication must be an atom.
Alternatively, I've tried the following grammar which moves
if-then-else down to the atom level:


expr: term;

term: factor ('+' factor)*;

factor: atom ('*' atom)*;

atom
: INT
| '(' expr ')'
| 'if' expr 'then' expr 'else' expr
;

INT: ('0'..'9')+;


This grammar is rejected by ANTLR for ambiguities in the term and
factor rules. Is there an accepted way for encoding the parsing rules
for this kind of language? At it's core, the problem seems to be that
there is a *non*-ambiguity in "a * if b then c else d".

Thanks,
Andrew

From glenn at fenris.net  Mon Aug  6 13:22:11 2012
From: glenn at fenris.net (Glenn McGregor)
Date: Mon, 06 Aug 2012 13:22:11 -0700
Subject: [antlr-interest] Lexer consumes input but doesn't emit all tokens
Message-ID: <50202773.5090206@fenris.net>

Given the partial grammar from a much larger...


tokens { COLON = ':' }

fragment
ALPHA_NUM
     :    'A'..'Z' | 'a'..'z' | '0'..'9';

NAME_LITERAL
     :    '\\'? ALPHA_NUM ( ( ':' | '_' | '-' | ALPHA_NUM )* ALPHA_NUM )? ;

ANY    :    . ;



I would like the input

test:ack:

to arrive as two tokens, a NAME_LITERAL of 'test:ack', and a COLON.

Instead, this input disappears entirely, but parses successfully.

Any suggestions?

Glenn McGregor


From oana_ureche2000 at yahoo.com  Mon Aug  6 23:03:07 2012
From: oana_ureche2000 at yahoo.com (Oana Ureche)
Date: Mon, 6 Aug 2012 23:03:07 -0700 (PDT)
Subject: [antlr-interest] Class instead of grammar and feeding grammars
In-Reply-To: <1337583879.35320.YahooMailClassic@web161504.mail.bf1.yahoo.com>
References: <1337583879.35320.YahooMailClassic@web161504.mail.bf1.yahoo.com>
Message-ID: <1344319387.84361.YahooMailNeo@web125306.mail.ne1.yahoo.com>

Hi all,

Could I please ask your clarification on two matters? I am a newbie so sorry in advance.

I am trying to convert source code to XML which I have been successful with PHP, but I think it was by luck, because I can't seem to do it for Java.?
While trying to, I have encountered two things...

I have noticed that some grammars start with class instead of grammar, such as:
class JavaRecognizer extends Parser;
options { ...
} and thus I am having errors when trying to generate the Java file:

C:\>java -cp antlrworks-1.4.3.jar org.antlr.Tool java15.g
error(10): ?internal error: ?: java.lang.Error: Error parsing java15.g: 'class'
not expected 'grammar'

So I am curious what is the difference and how am I going to get the Java generated file?

Second, I have noticed that some Java grammars have two files, such as: Java.g and JavaParserTree.g and I have ran into the concept of ?"a tree grammar that can be fed?with the Java.g grammer's output." How do I "feed" the grammar exactly? Do I first generate the Java files and do the feeding in the file that processes the output? For example,?

CommonTokenStream tokens = new CommonTokenStream(lexer); //lexer generated from Java.g
JavaTreeParser parser = new JavaTreeParser(tokens);?

Thank you very much in advance,
oanure

From lgcraymer at yahoo.com  Tue Aug  7 01:04:52 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 7 Aug 2012 01:04:52 -0700 (PDT)
Subject: [antlr-interest] Class instead of grammar and feeding grammars
In-Reply-To: <1344319387.84361.YahooMailNeo@web125306.mail.ne1.yahoo.com>
References: <1337583879.35320.YahooMailClassic@web161504.mail.bf1.yahoo.com>
	<1344319387.84361.YahooMailNeo@web125306.mail.ne1.yahoo.com>
Message-ID: <1344326692.38633.YahooMailNeo@web125501.mail.ne1.yahoo.com>

You have both ANTLR 2 and ANTLR 3 grammars: ?"class" is used for ANTLR 2 grammars, and "grammar" for ANTLR 3. ?ANTLR 2 and ANTLR 3 are different tools and have different libraries.

--Loring



>________________________________
> From: Oana Ureche <oana_ureche2000 at yahoo.com>
>To: "antlr-interest at antlr.org" <antlr-interest at antlr.org> 
>Sent: Monday, August 6, 2012 11:03 PM
>Subject: [antlr-interest] Class instead of grammar and feeding grammars
> 
>Hi all,
>
>Could I please ask your clarification on two matters? I am a newbie so sorry in advance.
>
>I am trying to convert source code to XML which I have been successful with PHP, but I think it was by luck, because I can't seem to do it for Java.?
>While trying to, I have encountered two things...
>
>I have noticed that some grammars start with class instead of grammar, such as:
>class JavaRecognizer extends Parser;
>options { ...
>} and thus I am having errors when trying to generate the Java file:
>
>C:\>java -cp antlrworks-1.4.3.jar org.antlr.Tool java15.g
>error(10): ?internal error: ?: java.lang.Error: Error parsing java15.g: 'class'
>not expected 'grammar'
>
>So I am curious what is the difference and how am I going to get the Java generated file?
>
>Second, I have noticed that some Java grammars have two files, such as: Java.g and JavaParserTree.g and I have ran into the concept of ?"a tree grammar that can be fed?with the Java.g grammer's output." How do I "feed" the grammar exactly? Do I first generate the Java files and do the feeding in the file that processes the output? For example,?
>
>CommonTokenStream tokens = new CommonTokenStream(lexer); //lexer generated from Java.g
>JavaTreeParser parser = new JavaTreeParser(tokens);?
>
>Thank you very much in advance,
>oanure
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From andrew.mains at oracle.com  Tue Aug  7 13:07:35 2012
From: andrew.mains at oracle.com (Andrew Mains)
Date: Tue, 07 Aug 2012 13:07:35 -0700
Subject: [antlr-interest] GUnit Tree Parsing
In-Reply-To: <mailman.1.1344366002.17382.antlr-interest@antlr.org>
References: <mailman.1.1344366002.17382.antlr-interest@antlr.org>
Message-ID: <50217587.2040808@oracle.com>

Hi all,

Let me know if this isn't the right forum for this, but I'm wondering if 
there would be any interest in creating a "tree parsing mode" for GUnit. 
Currently (afaik), one can only test tree grammars by entering the raw 
text for the source one wants to parse, running the lexer/parser on that 
to generate
the tree, and then running your tree parser on that generated tree. This 
works fine (and is great for more end-to-end style testing), but is less 
good for unit testing.

The problems as I see them are these:

1. Bugs in your lexer/parser can cause tests to fail in the tree grammar 
unit tests.

2. It's oftentimes easier (for me at least) to specify a test in terms 
of the tree structure directly, rather
than deducing what source code will give me the sort of tree structure I 
want.
     2. a. Trees are (usually) more concise than the source they come from.

My idea to fix both of these problems is this: allow test cases which 
specify tree structures as input, using the same syntax as ANTLR's 
rewrite rules. Test cases would look like this:

my_tree_grammar_rule: ^(SOME_CONSTRUCT VAL1 VAL2 (SOME_NESTED_THING 
...)) ->
                                         (ALTERED_CONSTRUCT ....);

I have implemented something that does basically this for myself, but 
I'd love to integrate it fully with GUnit (I'm currently using it in 
JUnit tests).

Is there already development on something like this (maybe for v4?), and 
if not, would anyone be interested in seeing something like this happen? 
Feel free to email me with any questions, suggestions or concerns (and 
again, let me know if this is the wrong forum for this sort of question).

Thanks!

Andrew

On 08/07/2012 12:00 PM, antlr-interest-request at antlr.org wrote:
> Send antlr-interest mailing list submissions to
> 	antlr-interest at antlr.org
>
> To subscribe or unsubscribe via the World Wide Web, visit
> 	http://www.antlr.org/mailman/listinfo/antlr-interest
> or, via email, send a message with subject or body 'help' to
> 	antlr-interest-request at antlr.org
>
> You can reach the person managing the list at
> 	antlr-interest-owner at antlr.org
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of antlr-interest digest..."
>
>
> Today's Topics:
>
>     1. Lexer consumes input but doesn't emit all tokens (Glenn McGregor)
>     2. Class instead of grammar and feeding grammars (Oana Ureche)
>     3. Re: Class instead of grammar and feeding grammars (Loring Craymer)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Mon, 06 Aug 2012 13:22:11 -0700
> From: Glenn McGregor <glenn at fenris.net>
> Subject: [antlr-interest] Lexer consumes input but doesn't emit all
> 	tokens
> To: antlr-interest at antlr.org
> Message-ID: <50202773.5090206 at fenris.net>
> Content-Type: text/plain; charset=ISO-8859-1; format=flowed
>
> Given the partial grammar from a much larger...
>
>
> tokens { COLON = ':' }
>
> fragment
> ALPHA_NUM
>       :    'A'..'Z' | 'a'..'z' | '0'..'9';
>
> NAME_LITERAL
>       :    '\\'? ALPHA_NUM ( ( ':' | '_' | '-' | ALPHA_NUM )* ALPHA_NUM )? ;
>
> ANY    :    . ;
>
>
>
> I would like the input
>
> test:ack:
>
> to arrive as two tokens, a NAME_LITERAL of 'test:ack', and a COLON.
>
> Instead, this input disappears entirely, but parses successfully.
>
> Any suggestions?
>
> Glenn McGregor
>
>
>
> ------------------------------
>
> Message: 2
> Date: Mon, 6 Aug 2012 23:03:07 -0700 (PDT)
> From: Oana Ureche <oana_ureche2000 at yahoo.com>
> Subject: [antlr-interest] Class instead of grammar and feeding
> 	grammars
> To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Message-ID:
> 	<1344319387.84361.YahooMailNeo at web125306.mail.ne1.yahoo.com>
> Content-Type: text/plain; charset=iso-8859-1
>
> Hi all,
>
> Could I please ask your clarification on two matters? I am a newbie so sorry in advance.
>
> I am trying to convert source code to XML which I have been successful with PHP, but I think it was by luck, because I can't seem to do it for Java.?
> While trying to, I have encountered two things...
>
> I have noticed that some grammars start with class instead of grammar, such as:
> class JavaRecognizer extends Parser;
> options { ...
> } and thus I am having errors when trying to generate the Java file:
>
> C:\>java -cp antlrworks-1.4.3.jar org.antlr.Tool java15.g
> error(10): ?internal error: ?: java.lang.Error: Error parsing java15.g: 'class'
> not expected 'grammar'
>
> So I am curious what is the difference and how am I going to get the Java generated file?
>
> Second, I have noticed that some Java grammars have two files, such as: Java.g and JavaParserTree.g and I have ran into the concept of ?"a tree grammar that can be fed?with the Java.g grammer's output." How do I "feed" the grammar exactly? Do I first generate the Java files and do the feeding in the file that processes the output? For example,?
>
> CommonTokenStream tokens = new CommonTokenStream(lexer); //lexer generated from Java.g
> JavaTreeParser parser = new JavaTreeParser(tokens);?
>
> Thank you very much in advance,
> oanure
>
> ------------------------------
>
> Message: 3
> Date: Tue, 7 Aug 2012 01:04:52 -0700 (PDT)
> From: Loring Craymer <lgcraymer at yahoo.com>
> Subject: Re: [antlr-interest] Class instead of grammar and feeding
> 	grammars
> To: Oana Ureche <oana_ureche2000 at yahoo.com>,
> 	"antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Message-ID:
> 	<1344326692.38633.YahooMailNeo at web125501.mail.ne1.yahoo.com>
> Content-Type: text/plain; charset=iso-8859-1
>
> You have both ANTLR 2 and ANTLR 3 grammars: ?"class" is used for ANTLR 2 grammars, and "grammar" for ANTLR 3. ?ANTLR 2 and ANTLR 3 are different tools and have different libraries.
>
> --Loring
>
>
>
>> ________________________________
>> From: Oana Ureche <oana_ureche2000 at yahoo.com>
>> To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
>> Sent: Monday, August 6, 2012 11:03 PM
>> Subject: [antlr-interest] Class instead of grammar and feeding grammars
>>
>> Hi all,
>>
>> Could I please ask your clarification on two matters? I am a newbie so sorry in advance.
>>
>> I am trying to convert source code to XML which I have been successful with PHP, but I think it was by luck, because I can't seem to do it for Java.?
>> While trying to, I have encountered two things...
>>
>> I have noticed that some grammars start with class instead of grammar, such as:
>> class JavaRecognizer extends Parser;
>> options { ...
>> } and thus I am having errors when trying to generate the Java file:
>>
>> C:\>java -cp antlrworks-1.4.3.jar org.antlr.Tool java15.g
>> error(10): ?internal error: ?: java.lang.Error: Error parsing java15.g: 'class'
>> not expected 'grammar'
>>
>> So I am curious what is the difference and how am I going to get the Java generated file?
>>
>> Second, I have noticed that some Java grammars have two files, such as: Java.g and JavaParserTree.g and I have ran into the concept of ?"a tree grammar that can be fed?with the Java.g grammer's output." How do I "feed" the grammar exactly? Do I first generate the Java files and do the feeding in the file that processes the output? For example,?
>>
>> CommonTokenStream tokens = new CommonTokenStream(lexer); //lexer generated from Java.g
>> JavaTreeParser parser = new JavaTreeParser(tokens);?
>>
>> Thank you very much in advance,
>> oanure
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>>
> ------------------------------
>
> _______________________________________________
> antlr-interest mailing list
> antlr-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/antlr-interest
>
> End of antlr-interest Digest, Vol 93, Issue 7
> *********************************************


From andron-eiu at mail.ru  Tue Aug  7 15:05:10 2012
From: andron-eiu at mail.ru (=?UTF-8?B?0JDQvdC00YDQtdC5INCQ0YHQtdC10LI=?=)
Date: Wed, 08 Aug 2012 02:05:10 +0400
Subject: [antlr-interest] Lexer consumes input but doesn't emit all
	tokens
Message-ID: <50219116.80105@mail.ru>

It would be, at example, if you choose incorrect rule in ANTLRWorks 
interpreter rule box. :)

Or show there your gramar rule you use to parse test input.

> Given the partial grammar from a much larger...
>
>
> tokens { COLON = ':' }
>
> fragment
> ALPHA_NUM
>       :    'A'..'Z' | 'a'..'z' | '0'..'9';
>
> NAME_LITERAL
>       :    '\\'? ALPHA_NUM ( ( ':' | '_' | '-' | ALPHA_NUM )* ALPHA_NUM )? ;
>
> ANY    :    . ;
>
>
>
> I would like the input
>
> test:ack:
>
> to arrive as two tokens, a NAME_LITERAL of 'test:ack', and a COLON.
>
> Instead, this input disappears entirely, but parses successfully.
>
> Any suggestions?
>
> Glenn McGregor
-- 
? ?????????, ????? ??????.
?????????? ???????????????, ??????? ?????????? ??????????, ??????? ???
http://1c.krasnodar.su



From glenn at fenris.net  Tue Aug  7 16:39:00 2012
From: glenn at fenris.net (Glenn McGregor)
Date: Tue, 07 Aug 2012 16:39:00 -0700
Subject: [antlr-interest] Lexer consumes input but doesn't emit all
	tokens
In-Reply-To: <50219116.80105@mail.ru>
References: <50219116.80105@mail.ru>
Message-ID: <5021A714.9050307@fenris.net>

On 8/7/2012 3:05 PM, ?????? ????? wrote:
> It would be, at example, if you choose incorrect rule in ANTLRWorks
> interpreter rule box. :)
>
> Or show there your gramar rule you use to parse test input.

If i change the input to 'test:ack :', it parses just fine, and returns 
appropriate tokens.


The grammar is about 500 lines long, and I tried to show just the 
hopefully relevant entries.

But it the rule in AntlrWorks starts at my

start_program
     :    program EOF! ;


I can post my grammar somewhere if it becomes necessary to pursue this.


The output of the interpreter shows  (in bad ascii art)

<grammar Tal>
     start_program
         program
             <epsilon>
         t

with the altered input, I get

<grammar Tal>
     start_program
         program
             statement
                 label_statement
                     string_literal
                         test:ack
                     :
<EOF>

Thanks

Glenn

>
>> Given the partial grammar from a much larger...
>>
>>
>> tokens { COLON = ':' }
>>
>> fragment
>> ALPHA_NUM
>>        :    'A'..'Z' | 'a'..'z' | '0'..'9';
>>
>> NAME_LITERAL
>>        :    '\\'? ALPHA_NUM ( ( ':' | '_' | '-' | ALPHA_NUM )* ALPHA_NUM )? ;
>>
>> ANY    :    . ;
>>
>>
>>
>> I would like the input
>>
>> test:ack:
>>
>> to arrive as two tokens, a NAME_LITERAL of 'test:ack', and a COLON.
>>
>> Instead, this input disappears entirely, but parses successfully.
>>
>> Any suggestions?
>>
>> Glenn McGregor


From cummings at kjchome.homeip.net  Tue Aug  7 23:38:50 2012
From: cummings at kjchome.homeip.net (Kevin Cummings)
Date: Wed, 08 Aug 2012 02:38:50 -0400
Subject: [antlr-interest] Lexer consumes input but doesn't emit all
	tokens
In-Reply-To: <50202773.5090206@fenris.net>
References: <50202773.5090206@fenris.net>
Message-ID: <5FF7D0C8-A963-4812-BE4E-4F8366133E61@kjchome.homeip.net>

On Aug 6, 2012, at 16:22, Glenn McGregor <glenn at fenris.net> wrote:
> NAME_LITERAL
>     :    '\\'? ALPHA_NUM ( ( ':' | '_' | '-' | ALPHA_NUM )* ALPHA_NUM )? ;
> 
> ANY    :    . ;
> 
> 
> 
> I would like the input
> 
> test:ack:
> 
> to arrive as two tokens, a NAME_LITERAL of 'test:ack', and a COLON.
> 
> Instead, this input disappears entirely, but parses successfully.
> 
> Any suggestions?

Your problem is the way you specified your NAME_LITERAL.  After it lexes test:ack it sees the next : character and continues with the ()* loop.  What you need to do is only recognize the : inside the loop if an ALPHA_NUM follows it.  In that way you will stop the NAME_LITERAL after test:ack and be left with a : character.

The reason why adding the white space works is that your lexer handles it as a token delimiter and stops Lexington the NAME_LITERAL when it is encountered.

Look at some of the older examples for multi-line comments, how they handle the closing */ combinations and allow * characters inside the comment with a predicate checking the following LT.  You can do the same thing with your internal : characters.

--
Kevin J. Cummings
kjchome at verizon.net
cummings at kjchome.homeip.net
cummings at kjc386.framingham.ma.us
Registered Linux User #1232
(http://www.linuxcounter.net/)

From andron-eiu at mail.ru  Wed Aug  8 03:03:03 2012
From: andron-eiu at mail.ru (=?UTF-8?B?0JDQvdC00YDQtdC5INCQ0YHQtdC10LI=?=)
Date: Wed, 08 Aug 2012 14:03:03 +0400
Subject: [antlr-interest] Lexer consumes input but doesn't emit all
	tokens
In-Reply-To: <5021A714.9050307@fenris.net>
References: <50219116.80105@mail.ru> <5021A714.9050307@fenris.net>
Message-ID: <50223957.9020407@mail.ru>

Hello, Glenn.

With a closer look to your problem, I found reasons.
ANTLR algorith uses greedy method for parsing loops.
And ':' token activate inner loop in ALPHA_NUM and not backtrack on 
unexpected EOF.

I hacked my brain for an hour to help you...
Only way I invented is:

Parse NAME_LITERALS without token ':'

NAME_LITERAL
        :    '\\'? ALPHA_NUM ( ( '_' | '-' | ALPHA_NUM )* ALPHA_NUM )? ;


Then, process lexer stream in your target language.
Somehow you may process it and change token sequence
<NAME_LITERAL>a, <COLON>col, <NAME_LITERAL>b
to
<NAME_LITERAL>(a+col+b)

or vice versa, allow token ':' on end

NAME_LITERAL
        :    '\\'? ALPHA_NUM ( ':' | '_' | '-' | ALPHA_NUM )*;

then process lexer stream and split last special chars to separated 
tokens manually
<NAME_LITERAL>"abc:"
to
<NAME_LITERAL>"abc", <COLON>":"


08.08.2012 3:39, Glenn McGregor ?????:
> On 8/7/2012 3:05 PM, ?????? ????? wrote:
>> It would be, at example, if you choose incorrect rule in ANTLRWorks
>> interpreter rule box. :)
>>
>> Or show there your gramar rule you use to parse test input.
> If i change the input to 'test:ack :', it parses just fine, and returns
> appropriate tokens.
>
>
> The grammar is about 500 lines long, and I tried to show just the
> hopefully relevant entries.
>
> But it the rule in AntlrWorks starts at my
>
> start_program
>       :    program EOF! ;
>
>
> I can post my grammar somewhere if it becomes necessary to pursue this.
>
>
> The output of the interpreter shows  (in bad ascii art)
>
> <grammar Tal>
>       start_program
>           program
>               <epsilon>
>           t
>
> with the altered input, I get
>
> <grammar Tal>
>       start_program
>           program
>               statement
>                   label_statement
>                       string_literal
>                           test:ack
>                       :
> <EOF>
>
> Thanks
>
> Glenn
>
>>> Given the partial grammar from a much larger...
>>>
>>>
>>> tokens { COLON = ':' }
>>>
>>> fragment
>>> ALPHA_NUM
>>>         :    'A'..'Z' | 'a'..'z' | '0'..'9';
>>>
>>> NAME_LITERAL
>>>         :    '\\'? ALPHA_NUM ( ( ':' | '_' | '-' | ALPHA_NUM )* ALPHA_NUM )? ;
>>>
>>> ANY    :    . ;
>>>
>>>
>>>
>>> I would like the input
>>>
>>> test:ack:
>>>
>>> to arrive as two tokens, a NAME_LITERAL of 'test:ack', and a COLON.
>>>
>>> Instead, this input disappears entirely, but parses successfully.
>>>
>>> Any suggestions?
>>>
>>> Glenn McGregor
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From francis.andre.kampbell at orange.fr  Wed Aug  8 21:04:30 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Thu, 09 Aug 2012 06:04:30 +0200
Subject: [antlr-interest] Help on gated semantic predicate
Message-ID: <502336CE.6070007@orange.fr>

Hi

With such reduced grammar

start           : ID;
MASK        :    {false}?=>( 'A' | 'B');
VARIABLE   : 'A'..'Z';
ID               :   ('a'..'z'|'A'..'Z'|'_') 
('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
WS             :   ( ' '   | '\t' | '\r' | '\n' )+        { 
$channel=HIDDEN; }    ;


With an input such as a single character:    A

the lexer/parser produces
enter MASK A line=1:0
exit MASK A line=1:0
line 1:0 rule MASK failed predicate: {false}?
tokens=
enter start [@0,1:1='<EOF>',<-1>,1:1]
exit start [@0,1:1='<EOF>',<-1>,1:1]


while I would expect to get this
enter VARIABLE A line=1:0
exit VARIABLE ? line=1:1
tokens=A
enter start [@0,0:0='A',<6>,1:0]
exit start [@0,0:0='A',<6>,1:0]
line 1:0 missing ID at 'A'


Why the rule MASK with the gated predicate {false}?==> is executed??

TIA for your help.

FA

From jimi at temporal-wave.com  Wed Aug  8 21:46:08 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 8 Aug 2012 21:46:08 -0700
Subject: [antlr-interest] Help on gated semantic predicate
In-Reply-To: <502336CE.6070007@orange.fr>
References: <502336CE.6070007@orange.fr>
Message-ID: <77ECB5A3-361A-4B1C-9E77-F8DAF75C8C05@temporal-wave.com>

Why would you expect that? Your gate  is always false and you have ambiguous rules. The trace reflects that. 

As general advice to everyone, look at the generated code, it helps to understand what is going on. 

Good luck,

Jim

On Aug 8, 2012, at 9:04 PM, Francis ANDRE <francis.andre.kampbell at orange.fr> wrote:

> Hi
> 
> With such reduced grammar
> 
> start           : ID;
> MASK        :    {false}?=>( 'A' | 'B');
> VARIABLE   : 'A'..'Z';
> ID               :   ('a'..'z'|'A'..'Z'|'_') 
> ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
> WS             :   ( ' '   | '\t' | '\r' | '\n' )+        { 
> $channel=HIDDEN; }    ;
> 
> 
> With an input such as a single character:    A
> 
> the lexer/parser produces
> enter MASK A line=1:0
> exit MASK A line=1:0
> line 1:0 rule MASK failed predicate: {false}?
> tokens=
> enter start [@0,1:1='<EOF>',<-1>,1:1]
> exit start [@0,1:1='<EOF>',<-1>,1:1]
> 
> 
> while I would expect to get this
> enter VARIABLE A line=1:0
> exit VARIABLE ? line=1:1
> tokens=A
> enter start [@0,0:0='A',<6>,1:0]
> exit start [@0,0:0='A',<6>,1:0]
> line 1:0 missing ID at 'A'
> 
> 
> Why the rule MASK with the gated predicate {false}?==> is executed??
> 
> TIA for your help.
> 
> FA
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From bluedzins at op.pl  Thu Aug  9 10:33:45 2012
From: bluedzins at op.pl (Maciej Pilichowski)
Date: Thu, 9 Aug 2012 19:33:45 +0200
Subject: [antlr-interest] How to create binary AST with multiple operators?
Message-ID: <201208091933.45785.bluedzins@op.pl>

Hello all,

  I try to build entire AST with custom nodes, so for example my unary 
expressions look like this:

-----------------------------------------------------------
not_expr :  term 
            | op='not' ex=not_expr -> { new UnaryExpression($op,
$ex.tree) };


unary_expr : not_expr
           | op='-' ex=unary_expr -> { new UnaryExpression(op,
$ex.tree) } 
           | '+'! unary_expr;
-----------------------------------------------------------

I had first problems when tackling binary expression -- power (like 2 
^ 5). But thanks it is single operator, I could write method which 
takes entire list of operands, and creates nested binary tree. And so 
the rule is simple:

-----------------------------------------------------------
pow_expr : ex+=unary_expr (op='^' ex+=unary_expr)* 
           -> { BinaryExpression.createRightTree(op,$ex) }; 
-----------------------------------------------------------

However when I came to multi-operator binary expression I am lost -- 
now I try to handle multiplication and division at the same time. 
This is my try:

-----------------------------------------------------------
mult_expr : exl=pow_expr { retval.tree = $exl.tree; } (
              op=('*'|'/'|'mod'|'div') exr=pow_expr -> { new 
BinaryExpression(op,$exl.tree,$exr.tree) } 
            )*;
-----------------------------------------------------------

First thing I don't like the start of it -- there is too much hackery 
for my taste for the initial value (retval...), second -- there is no 
mechanism which "glues" consecutive expressions (like 5*3*2), and 
third -- it does not work at all.

So the question is -- how to do it?

Thank you in advance,




From bluedzins at op.pl  Thu Aug  9 14:30:26 2012
From: bluedzins at op.pl (Maciej Pilichowski)
Date: Thu, 9 Aug 2012 23:30:26 +0200
Subject: [antlr-interest] How to create binary AST with multiple
	operators?
In-Reply-To: <201208091933.45785.bluedzins@op.pl>
References: <201208091933.45785.bluedzins@op.pl>
Message-ID: <201208092330.26496.bluedzins@op.pl>

PS. Now a little rewrite, by the book (ANTLR Ref. p.174), so I ended 
up with:

-----------------------------------------------------------
mult_expr : (pow_expr -> pow_expr ) 
            (op=('*'|'/'|'mod'|'div') exr=pow_expr 
     -> { new BinaryExpression($op,$mult_expr.tree,$exr.tree) })*; 
-----------------------------------------------------------

but still no luck, when I run the program against the input "5*2" the 
error says:

line 1:1 missing EOF at '*'
5

The struggle continues... ;-)

From andron-eiu at mail.ru  Thu Aug  9 11:54:27 2012
From: andron-eiu at mail.ru (=?UTF-8?B?0JDQvdC00YDQtdC5INCQ0YHQtdC10LI=?=)
Date: Thu, 09 Aug 2012 22:54:27 +0400
Subject: [antlr-interest] How to create binary AST with multiple
	operators?
In-Reply-To: <201208091933.45785.bluedzins@op.pl>
References: <201208091933.45785.bluedzins@op.pl>
Message-ID: <50240763.9090903@mail.ru>

Hello, Maciej.

I recommend you to learn about AST parser and separate your logic into 
two grammars: "parser grammar" and "tree grammar". That's would be good 
for your taste :)

1) parser grammar

mult_expr : pow_expr (MULDIV^ pow_expr)*;
pow_expr : unary_expr (POW^ unary_expr)*;
unary_expr : not_expr | MINUS^ unary_expr | '+'! unary_expr; // which language supports +++--+---+6, huh? :)
not_expr :  term | NOT^ not_expr;

... and so on by such style

2) then, tree grammar
expr: mult_expr | pow_expr | unary_expr | not_expr;
mult_expr:  ^(MULDIV exl=expr exr=expr) {new BinaryExpression($MULDIV, $exl.tree, $exr.tree)};
pow_expr:   ^(POW exl=expr exr=expr)    {new BinaryExpression($POW, $exl.tree, $exr.tree)};
unary_expr: ^(MINUS expr)               {new UnaryExpression($MINUS, $expr.tree)};
not_expr:   ^(NOT expr)                 {new UnaryExpression($NOT, $expr.tree)};

Now, you see, that's would be much more simplified by uniting similary nodes.

Regards, colleague.

09.08.2012 21:33, Maciej Pilichowski ?????:
> Hello all,
>
>    I try to build entire AST with custom nodes, so for example my unary
> expressions look like this:
>
> -----------------------------------------------------------
> not_expr :  term
>              | op='not' ex=not_expr ->  { new UnaryExpression($op,
> $ex.tree) };
>
>
> unary_expr : not_expr
>             | op='-' ex=unary_expr ->  { new UnaryExpression(op,
> $ex.tree) }
>             | '+'! unary_expr;
> -----------------------------------------------------------
>
> I had first problems when tackling binary expression -- power (like 2
> ^ 5). But thanks it is single operator, I could write method which
> takes entire list of operands, and creates nested binary tree. And so
> the rule is simple:
>
> -----------------------------------------------------------
> pow_expr : ex+=unary_expr (op='^' ex+=unary_expr)*
>             ->  { BinaryExpression.createRightTree(op,$ex) };
> -----------------------------------------------------------
>
> However when I came to multi-operator binary expression I am lost --
> now I try to handle multiplication and division at the same time.
> This is my try:
>
> -----------------------------------------------------------
> mult_expr : exl=pow_expr { retval.tree = $exl.tree; } (
>                op=('*'|'/'|'mod'|'div') exr=pow_expr ->  { new
> BinaryExpression(op,$exl.tree,$exr.tree) }
>              )*;
> -----------------------------------------------------------
>
> First thing I don't like the start of it -- there is too much hackery
> for my taste for the initial value (retval...), second -- there is no
> mechanism which "glues" consecutive expressions (like 5*3*2), and
> third -- it does not work at all.
>
> So the question is -- how to do it?
>
> Thank you in advance,
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From andrew.mains at oracle.com  Fri Aug 10 11:23:56 2012
From: andrew.mains at oracle.com (Andrew Mains)
Date: Fri, 10 Aug 2012 11:23:56 -0700
Subject: [antlr-interest]  Help on gated semantic predicate
In-Reply-To: <mailman.1.1344538801.12505.antlr-interest@antlr.org>
References: <mailman.1.1344538801.12505.antlr-interest@antlr.org>
Message-ID: <502551BC.6020704@oracle.com>

Francis,

The problem here is that both MASK and ID are lexer rules, not parser 
rules. As you probably know, even though you are using a combined 
grammar, the lexer and parser still compile down to separate Java 
classes.  Since the lexer provides tokens for the parser, it necessarily 
executes its rules before the parser
sees a single token. Furthermore, rules defined first in the lexer have 
precedence over those defined later, so the lexer will match MASK 
instead of ID.

Therefore, the lexer matches MASK before start is even called, giving 
the behavior you observed.

If mask were a parser rule instead of a lexer rule, it would act as you 
expected.

Hope this helps!

Andrew

On 08/09/2012 12:00 PM, antlr-interest-request at antlr.org wrote:
> start           : ID;
> MASK        :    {false}?=>( 'A' | 'B');
> VARIABLE   : 'A'..'Z';
> ID               :   ('a'..'z'|'A'..'Z'|'_')
> ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
> WS             :   ( ' '   | '\t' | '\r' | '\n' )+        {
> $channel=HIDDEN; }    ;
>


From amal.khailtash at gmail.com  Fri Aug 10 14:11:06 2012
From: amal.khailtash at gmail.com (Amal Khailtash)
Date: Fri, 10 Aug 2012 17:11:06 -0400
Subject: [antlr-interest] Bug: String constant is too big in Parser
 generated by ANTLR v4
Message-ID: <CAFh=k9GBqS2tRKh6--wRAf7BneopO9N-s1Rof264b0XBLgxxDw@mail.gmail.com>

I encounter the same error "error: UTF8 representation for string "???..."
is too long for the constant pool" for a test grammar I am working on.

Is this going to be fixed soon?

Thanks,
*-- Amal*

From sam at tunnelvisionlabs.com  Fri Aug 10 17:20:45 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Fri, 10 Aug 2012 19:20:45 -0500
Subject: [antlr-interest] Bug: String constant is too big in Parser
	generated by ANTLR v4
In-Reply-To: <CAFh=k9GBqS2tRKh6--wRAf7BneopO9N-s1Rof264b0XBLgxxDw@mail.gmail.com>
References: <CAFh=k9GBqS2tRKh6--wRAf7BneopO9N-s1Rof264b0XBLgxxDw@mail.gmail.com>
Message-ID: <0a1301cd7757$2743b060$75cb1120$@tunnelvisionlabs.com>

Is there any way you can you send me a copy of the grammar for testing?

Thanks,
--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Amal Khailtash [mailto:amal.khailtash at gmail.com] 
Sent: Friday, August 10, 2012 4:11 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Bug: String constant is too big in Parser
generated by ANTLR v4

I encounter the same error "error: UTF8 representation for string "???..."
is too long for the constant pool" for a test grammar I am working on.

Is this going to be fixed soon?

Thanks,
*-- Amal*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kierans777 at gmail.com  Sat Aug 11 06:16:41 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Sat, 11 Aug 2012 23:16:41 +1000
Subject: [antlr-interest] Help on gated semantic predicate
In-Reply-To: <502551BC.6020704@oracle.com>
References: <mailman.1.1344538801.12505.antlr-interest@antlr.org>
	<502551BC.6020704@oracle.com>
Message-ID: <50265B39.90403@gmail.com>

Yep, I've had the problem too.  The way I got around it was much in the 
vein of Andrews post, moving the "decision" into a parser rule (and thus 
the Parser class).  By having the parser "cast" the token it overcomes 
this shortcoming of the lexer.  For example:

id: MASK | ID;

Since MASK is really a subset of the characters than an ID can be, an id 
parser rule can consume either token, and the caller of the id rule will 
know that the input was matched correctly (semantically you got an ID 
with bit of syntactic trickery).

HTH.

Cheers,

On 11/08/12 4:23 AM, Andrew Mains wrote:
> Francis,
>
> The problem here is that both MASK and ID are lexer rules, not parser
> rules. As you probably know, even though you are using a combined
> grammar, the lexer and parser still compile down to separate Java
> classes. Since the lexer provides tokens for the parser, it necessarily
> executes its rules before the parser
> sees a single token. Furthermore, rules defined first in the lexer have
> precedence over those defined later, so the lexer will match MASK
> instead of ID.
>
> Therefore, the lexer matches MASK before start is even called, giving
> the behavior you observed.
>
> If mask were a parser rule instead of a lexer rule, it would act as you
> expected.
>
> Hope this helps!
>
> Andrew
>
> On 08/09/2012 12:00 PM, antlr-interest-request at antlr.org wrote:
>> start : ID;
>> MASK : {false}?=>( 'A' | 'B');
>> VARIABLE : 'A'..'Z';
>> ID : ('a'..'z'|'A'..'Z'|'_')
>> ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
>> WS : ( ' ' | '\t' | '\r' | '\n' )+ {
>> $channel=HIDDEN; } ;
>>
>
>

From qn.666 at gmx.net  Sat Aug 11 20:01:43 2012
From: qn.666 at gmx.net (qn)
Date: Sun, 12 Aug 2012 05:01:43 +0200
Subject: [antlr-interest] Return Values and Element Labels ?= S-Attribute
	Grammar
Message-ID: <50271C97.70901@gmx.net>

Hi, as far as I understand, using return values and element labels in 
Antlr are sufficient to build an AST. e.g.

r[int a, String b] returns [int c, String d] :   a='class' b=ID  ... 
{$c=$a; $d=$b;}

What's the name of this kind of extension to eBNF? Is this called a 
S-Attribute Grammar?

-stefan

P.S. is there newsgroup access to this mailinglist?

From amal.khailtash at gmail.com  Sun Aug 12 18:06:30 2012
From: amal.khailtash at gmail.com (Amal Khailtash)
Date: Sun, 12 Aug 2012 21:06:30 -0400
Subject: [antlr-interest] Bug: String constant is too big in Parser
 generated by ANTLR v4
In-Reply-To: <0a1301cd7757$2743b060$75cb1120$@tunnelvisionlabs.com>
References: <CAFh=k9GBqS2tRKh6--wRAf7BneopO9N-s1Rof264b0XBLgxxDw@mail.gmail.com>
	<0a1301cd7757$2743b060$75cb1120$@tunnelvisionlabs.com>
Message-ID: <CAFh=k9H7YyadrNzUkX6fhvDKJ7Wz+cJXVTNSSXktMgE_PKifGQ@mail.gmail.com>

I might have been doing something wrong.  I was writing a fuzzy grammar
with many Lexer rules.  I am not sure if I am doing it correctly.  I
searched the mailing list and I saw similar message.

Basically I am trying to use Verilog 200x grammar (
http://v2kparse.sourceforge.net/) to filter all module_instantiation in the
source file.

Not sure if I can do this easily as a fuzzy lexer, or there are too many
lexer rules that start from module_instantiation.

*-- Amal*


On Fri, Aug 10, 2012 at 8:20 PM, Sam Harwell <sam at tunnelvisionlabs.com>wrote:

> Is there any way you can you send me a copy of the grammar for testing?
>
> Thanks,
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
> -----Original Message-----
> From: Amal Khailtash [mailto:amal.khailtash at gmail.com]
> Sent: Friday, August 10, 2012 4:11 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Bug: String constant is too big in Parser
> generated by ANTLR v4
>
> I encounter the same error "error: UTF8 representation for string "???..."
> is too long for the constant pool" for a test grammar I am working on.
>
> Is this going to be fixed soon?
>
> Thanks,
> *-- Amal*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From francis.andre.kampbell at orange.fr  Mon Aug 13 05:52:51 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Mon, 13 Aug 2012 14:52:51 +0200
Subject: [antlr-interest] StringTemplate: help on global dynamically scoped
	attribute/value/parameter
Message-ID: <5028F8A3.1030301@orange.fr>

Hi

I am concerned about defining/using global dynamic scope attributes in ST. 
Beside reading the documentation, I did not found anything that is closed to 
this concept.

Can someone confirm that there is no global attribute statically or dynamically 
scoped?

TIA

FA

From parrt at cs.usfca.edu  Mon Aug 13 12:40:52 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 13 Aug 2012 12:40:52 -0700
Subject: [antlr-interest] StringTemplate: help on global dynamically
	scoped attribute/value/parameter
In-Reply-To: <5028F8A3.1030301@orange.fr>
References: <5028F8A3.1030301@orange.fr>
Message-ID: <2702B9DC-2FB9-49FD-AD09-469BE318B6CA@cs.usfca.edu>

Hi, to make a "global" just create an attribute in the outermost template. That, through dynamic scoping, any template that is embedded within that template will see that outermost attribute. For example, when I am generating a file I usually have a fileName attribute at the outermost level in file() template. then, and I stick inside like method() can access that fileName attribute with <fileName>.
T
On Aug 13, 2012, at 5:52 AM, Francis ANDRE wrote:

> Hi
> 
> I am concerned about defining/using global dynamic scope attributes in ST. 
> Beside reading the documentation, I did not found anything that is closed to 
> this concept.
> 
> Can someone confirm that there is no global attribute statically or dynamically 
> scoped?
> 
> TIA
> 
> FA
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Mon Aug 13 12:44:35 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 13 Aug 2012 12:44:35 -0700
Subject: [antlr-interest] Bug: String constant is too big in Parser
	generated by ANTLR v4
In-Reply-To: <CAFh=k9H7YyadrNzUkX6fhvDKJ7Wz+cJXVTNSSXktMgE_PKifGQ@mail.gmail.com>
References: <CAFh=k9GBqS2tRKh6--wRAf7BneopO9N-s1Rof264b0XBLgxxDw@mail.gmail.com>
	<0a1301cd7757$2743b060$75cb1120$@tunnelvisionlabs.com>
	<CAFh=k9H7YyadrNzUkX6fhvDKJ7Wz+cJXVTNSSXktMgE_PKifGQ@mail.gmail.com>
Message-ID: <57EF1066-A8DA-458F-BE19-8C126B1FF63D@cs.usfca.edu>

Hi.That is an ANTLR v2 grammar? I'm shocked that he didn't give you a syntax error using v4.
Ter
On Aug 12, 2012, at 6:06 PM, Amal Khailtash wrote:

> I might have been doing something wrong.  I was writing a fuzzy grammar
> with many Lexer rules.  I am not sure if I am doing it correctly.  I
> searched the mailing list and I saw similar message.
> 
> Basically I am trying to use Verilog 200x grammar (
> http://v2kparse.sourceforge.net/) to filter all module_instantiation in the
> source file.
> 
> Not sure if I can do this easily as a fuzzy lexer, or there are too many
> lexer rules that start from module_instantiation.
> 
> *-- Amal*
> 
> 
> On Fri, Aug 10, 2012 at 8:20 PM, Sam Harwell <sam at tunnelvisionlabs.com>wrote:
> 
>> Is there any way you can you send me a copy of the grammar for testing?
>> 
>> Thanks,
>> --
>> Sam Harwell
>> Owner, Lead Developer
>> http://tunnelvisionlabs.com
>> 
>> -----Original Message-----
>> From: Amal Khailtash [mailto:amal.khailtash at gmail.com]
>> Sent: Friday, August 10, 2012 4:11 PM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Bug: String constant is too big in Parser
>> generated by ANTLR v4
>> 
>> I encounter the same error "error: UTF8 representation for string "???..."
>> is too long for the constant pool" for a test grammar I am working on.
>> 
>> Is this going to be fixed soon?
>> 
>> Thanks,
>> *-- Amal*
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From amal.khailtash at gmail.com  Mon Aug 13 13:34:29 2012
From: amal.khailtash at gmail.com (Amal Khailtash)
Date: Mon, 13 Aug 2012 16:34:29 -0400
Subject: [antlr-interest] Bug: String constant is too big in Parser
 generated by ANTLR v4
In-Reply-To: <57EF1066-A8DA-458F-BE19-8C126B1FF63D@cs.usfca.edu>
References: <CAFh=k9GBqS2tRKh6--wRAf7BneopO9N-s1Rof264b0XBLgxxDw@mail.gmail.com>
	<0a1301cd7757$2743b060$75cb1120$@tunnelvisionlabs.com>
	<CAFh=k9H7YyadrNzUkX6fhvDKJ7Wz+cJXVTNSSXktMgE_PKifGQ@mail.gmail.com>
	<57EF1066-A8DA-458F-BE19-8C126B1FF63D@cs.usfca.edu>
Message-ID: <CAFh=k9Ft2-vjUPw3zk=A6HO2KRsz8+qwNQrvZMZttjH2jd_TRQ@mail.gmail.com>

Hi Terrence,

That is not the exact grammar I used, but one that is based on that.  I
just wanted pointed you guys to the rule "module_instantiation" and wanted
you to comment on how I can filter this rule in a fuzzy lexer.  As you can
see this rule (converted to a lexer rule) uses many other rules to match.

*-- Amal*

On Mon, Aug 13, 2012 at 3:44 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi.That is an ANTLR v2 grammar? I'm shocked that he didn't give you a
> syntax error using v4.
> Ter
> On Aug 12, 2012, at 6:06 PM, Amal Khailtash wrote:
>
> > I might have been doing something wrong.  I was writing a fuzzy grammar
> > with many Lexer rules.  I am not sure if I am doing it correctly.  I
> > searched the mailing list and I saw similar message.
> >
> > Basically I am trying to use Verilog 200x grammar (
> > http://v2kparse.sourceforge.net/) to filter all module_instantiation in
> the
> > source file.
> >
> > Not sure if I can do this easily as a fuzzy lexer, or there are too many
> > lexer rules that start from module_instantiation.
> >
> > *-- Amal*
> >
> >
> > On Fri, Aug 10, 2012 at 8:20 PM, Sam Harwell <sam at tunnelvisionlabs.com
> >wrote:
> >
> >> Is there any way you can you send me a copy of the grammar for testing?
> >>
> >> Thanks,
> >> --
> >> Sam Harwell
> >> Owner, Lead Developer
> >> http://tunnelvisionlabs.com
> >>
> >> -----Original Message-----
> >> From: Amal Khailtash [mailto:amal.khailtash at gmail.com]
> >> Sent: Friday, August 10, 2012 4:11 PM
> >> To: antlr-interest at antlr.org
> >> Subject: Re: [antlr-interest] Bug: String constant is too big in Parser
> >> generated by ANTLR v4
> >>
> >> I encounter the same error "error: UTF8 representation for string
> "???..."
> >> is too long for the constant pool" for a test grammar I am working on.
> >>
> >> Is this going to be fixed soon?
> >>
> >> Thanks,
> >> *-- Amal*
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >>
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From francis.andre.kampbell at orange.fr  Mon Aug 13 22:33:29 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Tue, 14 Aug 2012 07:33:29 +0200
Subject: [antlr-interest] StringTemplate: help on global dynamically
 scoped attribute/value/parameter
In-Reply-To: <2702B9DC-2FB9-49FD-AD09-469BE318B6CA@cs.usfca.edu>
References: <5028F8A3.1030301@orange.fr>
	<2702B9DC-2FB9-49FD-AD09-469BE318B6CA@cs.usfca.edu>
Message-ID: <5029E329.8010405@orange.fr>

Hi Terr

By looking at the Java.stg of the org.antlr.tool, this is what I deduced about 
the dynamic scope of attribute. For example, the LEXER attribute specified in 
the outputFile template as parameter is used all along the various templates.

But what puzzles me is that <LEXER> is not recognized when it is used in the 
evalSynPredicate template.

WIth:
evalSynPredicate(pred,description) ::= "<pred>() /*<LEXER>*/"

I got this error
context [/evalSynPredicate] 1:52 attribute LEXER isn't defined

So, what's wrong with the reference of <LEXER> in evalSynPredicate??

FA


Le 13/08/2012 21:40, Terence Parr a ?crit :
> Hi, to make a "global" just create an attribute in the outermost template. That, through dynamic scoping, any template that is embedded within that template will see that outermost attribute. For example, when I am generating a file I usually have a fileName attribute at the outermost level in file() template. then, and I stick inside like method() can access that fileName attribute with <fileName>.
> T
> On Aug 13, 2012, at 5:52 AM, Francis ANDRE wrote:
>
>> Hi
>>
>> I am concerned about defining/using global dynamic scope attributes in ST.
>> Beside reading the documentation, I did not found anything that is closed to
>> this concept.
>>
>> Can someone confirm that there is no global attribute statically or dynamically
>> scoped?
>>
>> TIA
>>
>> FA
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From yezonghui at gmail.com  Tue Aug 14 09:05:56 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Wed, 15 Aug 2012 00:05:56 +0800
Subject: [antlr-interest] problem about "the code for the static initializer
 is exceeding the 65535 bytes limit"
Message-ID: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>

Hi,

Here we have a big grammar and the generated parser.java got a compilation
: "the code for the static initializer is exceeding the 65535 bytes limit".

I've searched the net for a while and found that is a widely known limit in
JVM or Javac compiler, and not yet has an option to change it higher.

On the ANTLR side, I found 2 solutions proposed by others, but neither of
them is totally satisfying:

1. Seperate the big grammar into 2 *.g files, import one from the other.
   Yes, this removes the compilation error with genereated Java. But
ANTLRWorks does not support imported grammar well. E.g., I can not
interpret a rule in the imported grammar, it's simply not in the rule list
for interpreting. And gunit always fail with rules defined in imported
grammar.

2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
constants into several static classes and change references to them
accordingly.
   This is proposed here -
http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html .
The author of the post actually has a solution into ANTLR source code (some
string template). But I can't find the attachment he referred to. And
that's in 2009, I suspect the fix could be incompatible with current ANTLR
version.
   Without this fix we have to do the modificaiton manually or write a
script for that. The script is not that easy.

And we found a 3rd solution by ourself, that also involve changing the
generated Java:

3. Remove those FOLLOW_... constant completely, and replace the references
with "null".
   Surprisingly this works, just no error recovery after this, not a
problem for us. But we really worry this is unsafe, since it's not
documented anywhere.

After all, we're looking for any other solution that is easier to apply,
asumming we'll be constantly changing the grammar and recompile the parser.

 Maybe there is a way to get ANTLRWorks and gunit play well with imported
grammar?
Maybe there is already a commandline option for antlr Tool, that can
genereate FOLLOW_... constants in seperate classes?
Maybe there is already a commandline option for antlr Tool, that can
supress FOLLOW_... constants code generation?

-- 
Regards,

Yang, Zhaohui

From parrt at cs.usfca.edu  Tue Aug 14 10:57:18 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 14 Aug 2012 10:57:18 -0700
Subject: [antlr-interest] StringTemplate: help on global dynamically
	scoped attribute/value/parameter
In-Reply-To: <5029E329.8010405@orange.fr>
References: <5028F8A3.1030301@orange.fr>
	<2702B9DC-2FB9-49FD-AD09-469BE318B6CA@cs.usfca.edu>
	<5029E329.8010405@orange.fr>
Message-ID: <12F6C6AF-40F5-4E3E-AEB3-394D76A4C0D7@cs.usfca.edu>

It could be that those actions are evaluated to strings before they are injected into the output template. I try to avoid that, but there could have been some implementation convenience I needed to do that for.

Ter
On Aug 13, 2012, at 10:33 PM, Francis ANDRE wrote:

> Hi Terr
> 
> By looking at the Java.stg of the org.antlr.tool, this is what I deduced about 
> the dynamic scope of attribute. For example, the LEXER attribute specified in 
> the outputFile template as parameter is used all along the various templates.
> 
> But what puzzles me is that <LEXER> is not recognized when it is used in the 
> evalSynPredicate template.
> 
> WIth:
> evalSynPredicate(pred,description) ::= "<pred>() /*<LEXER>*/"
> 
> I got this error
> context [/evalSynPredicate] 1:52 attribute LEXER isn't defined
> 
> So, what's wrong with the reference of <LEXER> in evalSynPredicate??
> 
> FA
> 
> 
> Le 13/08/2012 21:40, Terence Parr a ?crit :
>> Hi, to make a "global" just create an attribute in the outermost template. That, through dynamic scoping, any template that is embedded within that template will see that outermost attribute. For example, when I am generating a file I usually have a fileName attribute at the outermost level in file() template. then, and I stick inside like method() can access that fileName attribute with <fileName>.
>> T
>> On Aug 13, 2012, at 5:52 AM, Francis ANDRE wrote:
>> 
>>> Hi
>>> 
>>> I am concerned about defining/using global dynamic scope attributes in ST.
>>> Beside reading the documentation, I did not found anything that is closed to
>>> this concept.
>>> 
>>> Can someone confirm that there is no global attribute statically or dynamically
>>> scoped?
>>> 
>>> TIA
>>> 
>>> FA
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From burton.samograd at markit.com  Tue Aug 14 11:47:32 2012
From: burton.samograd at markit.com (Burton Samograd)
Date: Tue, 14 Aug 2012 14:47:32 -0400
Subject: [antlr-interest] Difficult to explain prediction error
Message-ID: <D2A5C7470D67A54FACE86B838946D49D192DE508C9@NJ4MSGSCR02.markit.partners>

Hello,

I have the following rule in my tree walker:

filter
        : ( return_type[...] selection_logic[...] )* { return_type | { /* handle nothing */ } )

which causes no warnings or errors from the Antlr compiler.  It seems
to be working well but in one case where I have a certain
return_type.  return_type is a selection of rules similar to the
following in the grammar:

return_type: (return_a|return_b|return_c|return_d) ;

return_a : RETURNA ;

return_b : RETURNB ;

return_c : RETURNC ( LPAREN float RPAREN )? -> ^(RETURNC float?)

return_d : RETURND ( LPAREN float COMMA float RPAREN )? -> ^(RETURNC float+)

return_c and return_d are tokens with optional parameters after them.

The problem is when I try a single return_c without the parameters.  A
single return_d without parameters does not have a problem.

I've single stepped into the generated Antlr tree walker and have
found that it is throwing an exception and giving the following error
message:

-unknown source-(0)  : error 3 : ()* loopback of 520:7: (
return_type[...] selection_logic[...] )*, at offset 0, near UP :
cannot match to any predicted input...

This is caused by an exception that is generated when stepping over a
function called cdfa37.predict.

I'm having problems understanding why this exception is being
generated because the * after the rule in the above error message
should cause the rule to be skipped and move onto the next one, which
is a single (optional) return_type.

And like I said, this rule passes pretty much all of the test cases
except for one that I have found. Can anybody shed some light on why
my grammar is behaving this way?

--
Burton Samograd

________________________________
This e-mail, including accompanying communications and attachments, is strictly confidential and only for the intended recipient. Any retention, use or disclosure not expressly authorised by Markit is prohibited. This email is subject to all waivers and other terms at the following link: http://www.markit.com/en/about/legal/email-disclaimer.page

Please visit http://www.markit.com/en/about/contact/contact-us.page? for contact information on our offices worldwide.

From nodcosta at in.ibm.com  Tue Aug 14 15:38:26 2012
From: nodcosta at in.ibm.com (Noel Dcosta)
Date: Wed, 15 Aug 2012 04:08:26 +0530
Subject: [antlr-interest] AUTO: Noel Dcosta is out of the office (returning
	08/16/2012)
Message-ID: <OF1E12170B.D9CCF0DA-ON65257A5A.007C5E6F-65257A5A.007C5E6F@in.ibm.com>


I am out of the office until 08/16/2012.

Holiday at ISL


Note: This is an automated response to your message  "antlr-interest
Digest, Vol 93, Issue 14" sent on 15/08/2012 0:30:01.

This is the only notification you will receive while this person is away.


From francis.andre.kampbell at orange.fr  Tue Aug 14 20:37:13 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Wed, 15 Aug 2012 05:37:13 +0200
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
Message-ID: <502B1969.1070700@orange.fr>

Hi Zhaohui

I am currently working on fixing this issues with antlr3.4... Once I will have a 
proper patch, would you be interested in testing it??

FA
Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
> Hi,
>
> Here we have a big grammar and the generated parser.java got a compilation
> : "the code for the static initializer is exceeding the 65535 bytes limit".
>
> I've searched the net for a while and found that is a widely known limit in
> JVM or Javac compiler, and not yet has an option to change it higher.
>
> On the ANTLR side, I found 2 solutions proposed by others, but neither of
> them is totally satisfying:
>
> 1. Seperate the big grammar into 2 *.g files, import one from the other.
>     Yes, this removes the compilation error with genereated Java. But
> ANTLRWorks does not support imported grammar well. E.g., I can not
> interpret a rule in the imported grammar, it's simply not in the rule list
> for interpreting. And gunit always fail with rules defined in imported
> grammar.
>
> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
> constants into several static classes and change references to them
> accordingly.
>     This is proposed here -
> http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html .
> The author of the post actually has a solution into ANTLR source code (some
> string template). But I can't find the attachment he referred to. And
> that's in 2009, I suspect the fix could be incompatible with current ANTLR
> version.
>     Without this fix we have to do the modificaiton manually or write a
> script for that. The script is not that easy.
>
> And we found a 3rd solution by ourself, that also involve changing the
> generated Java:
>
> 3. Remove those FOLLOW_... constant completely, and replace the references
> with "null".
>     Surprisingly this works, just no error recovery after this, not a
> problem for us. But we really worry this is unsafe, since it's not
> documented anywhere.
>
> After all, we're looking for any other solution that is easier to apply,
> asumming we'll be constantly changing the grammar and recompile the parser.
>
>   Maybe there is a way to get ANTLRWorks and gunit play well with imported
> grammar?
> Maybe there is already a commandline option for antlr Tool, that can
> genereate FOLLOW_... constants in seperate classes?
> Maybe there is already a commandline option for antlr Tool, that can
> supress FOLLOW_... constants code generation?
>


From yezonghui at gmail.com  Wed Aug 15 07:17:18 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Wed, 15 Aug 2012 22:17:18 +0800
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <502B1969.1070700@orange.fr>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
Message-ID: <CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>

It's great someone is already trying a fix. I'd be glad to test your fix
when it's out.

Would you please introduce a bit what kind of fix is that? Is it for
ANTLRWorks or ANTLR tool, is it a command line option for seperating FOLLOW
set or supressing that, or something else?

2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr>

> Hi Zhaohui
>
> I am currently working on fixing this issues with antlr3.4... Once I will
> have a proper patch, would you be interested in testing it??
>
> FA
> Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
>
> Hi,
>>
>> Here we have a big grammar and the generated parser.java got a compilation
>> : "the code for the static initializer is exceeding the 65535 bytes
>> limit".
>>
>> I've searched the net for a while and found that is a widely known limit
>> in
>> JVM or Javac compiler, and not yet has an option to change it higher.
>>
>> On the ANTLR side, I found 2 solutions proposed by others, but neither of
>> them is totally satisfying:
>>
>> 1. Seperate the big grammar into 2 *.g files, import one from the other.
>>     Yes, this removes the compilation error with genereated Java. But
>> ANTLRWorks does not support imported grammar well. E.g., I can not
>> interpret a rule in the imported grammar, it's simply not in the rule list
>> for interpreting. And gunit always fail with rules defined in imported
>> grammar.
>>
>> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
>> constants into several static classes and change references to them
>> accordingly.
>>     This is proposed here -
>> http://www.antlr.org/**pipermail/antlr-interest/2009-**
>> November/036608.html<http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html>.
>> The author of the post actually has a solution into ANTLR source code
>> (some
>> string template). But I can't find the attachment he referred to. And
>> that's in 2009, I suspect the fix could be incompatible with current ANTLR
>> version.
>>     Without this fix we have to do the modificaiton manually or write a
>> script for that. The script is not that easy.
>>
>> And we found a 3rd solution by ourself, that also involve changing the
>> generated Java:
>>
>> 3. Remove those FOLLOW_... constant completely, and replace the references
>> with "null".
>>     Surprisingly this works, just no error recovery after this, not a
>> problem for us. But we really worry this is unsafe, since it's not
>> documented anywhere.
>>
>> After all, we're looking for any other solution that is easier to apply,
>> asumming we'll be constantly changing the grammar and recompile the
>> parser.
>>
>>   Maybe there is a way to get ANTLRWorks and gunit play well with imported
>> grammar?
>> Maybe there is already a commandline option for antlr Tool, that can
>> genereate FOLLOW_... constants in seperate classes?
>> Maybe there is already a commandline option for antlr Tool, that can
>> supress FOLLOW_... constants code generation?
>>
>>
>


-- 
Regards,

Yang, Zhaohui

From yezonghui at gmail.com  Wed Aug 15 08:17:58 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Wed, 15 Aug 2012 23:17:58 +0800
Subject: [antlr-interest] big lexer problem
Message-ID: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>

Hi,

I'm having big problem with big generated Lexer.java. Any help appreciated.

The language is COBOL. And I found multiple reasons that the lexer get's
too big:

1. I'm adding semantic predicate into the lexer, to simulate "lexer state"
as in YACC and JavaCC. It's like

       PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
matching things like AXX(9).99 after a 'PIC' key word

   The lexer without semantic predicates is 18K lines.
   When I add predicates to one or two of the lexer rules, it grows to more
than 20K.
   When I add a single more, it explodes to more than 60K and ANTLR give up
generating lexer with error: code is too long.

2. COBOL has a LOT of key words, that may explain the original 18K lines.

3. I have tokens referencing other tokens.
   I've inlined most of them now, as suggested by others. But the size has
not reduced much.

So the question could be:
1. how to generate smaller lexer without removing semantic predicate?
2. If that's not possible, how to simulate "lexer state" without semantic
predicate?
3. Any other solution?

Thanks.

-- 
Regards,

Yang, Zhaohui

From francis.andre.kampbell at orange.fr  Wed Aug 15 10:14:03 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Wed, 15 Aug 2012 19:14:03 +0200
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
Message-ID: <502BD8DB.3010605@orange.fr>

Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
> It's great someone is already trying a fix. I'd be glad to test your 
> fix when it's out.
>
> Would you please introduce a bit what kind of fix is that? Is it for 
> ANTLRWorks or ANTLR tool, is it a command line option for seperating 
> FOLLOW set or supressing that, or something else?
The 64K syndrone is a pure Java problem due to the constraint that the 
JVM does not support static initializer greater than 64K  -- shame on it 
--. Thus if you look to the generated lexer and parser, you will see 
certainly a lot of DFA classes, each of them having some static 
initializer values. The point is that the sum of the static initializer 
of all those DFAs is greater than 64K while the static initialization of 
each DFA is somewhat small or in most of case les than 64K. Thus, one 
solution is to extract all those DFAs classes and put them outside the 
lexer or the parser in fixed directories like the following pattern:

Let <grammar> the directory of the grammar to generate, then all the 
generated DFAs will go in

for the lexer's DFAs:    package <grammar>.lexer;
for the parser's DAFs: package <grammar>.parser;

and the reference of all those DFAs will be
in the lexer:                 import <grammar>.lexer.*;
in the parser                import <grammar>.parser.*;

But hold on, the fix has to be approved by Terr and I did not yet submit 
it. It need to pass all unit tests of the ANTLR3.4 and I am working on 
it... there is a real challenge getting the parser/lexer compiled for 
java code generated without a package...; and all those unit tests are 
producing java parser/lexer at the top level directory.
>
> 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr 
> <mailto:francis.andre.kampbell at orange.fr>>
>
>     Hi Zhaohui
>
>     I am currently working on fixing this issues with antlr3.4... Once
>     I will have a proper patch, would you be interested in testing it??
>
>     FA
>     Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
>
>         Hi,
>
>         Here we have a big grammar and the generated parser.java got a
>         compilation
>         : "the code for the static initializer is exceeding the 65535
>         bytes limit".
>
>         I've searched the net for a while and found that is a widely
>         known limit in
>         JVM or Javac compiler, and not yet has an option to change it
>         higher.
>
>         On the ANTLR side, I found 2 solutions proposed by others, but
>         neither of
>         them is totally satisfying:
>
>         1. Seperate the big grammar into 2 *.g files, import one from
>         the other.
>             Yes, this removes the compilation error with genereated
>         Java. But
>         ANTLRWorks does not support imported grammar well. E.g., I can not
>         interpret a rule in the imported grammar, it's simply not in
>         the rule list
>         for interpreting. And gunit always fail with rules defined in
>         imported
>         grammar.
>
>         2. Modify the generated Java source, seperate the
>         "FOLLOW_xxx_in_yyy"
>         constants into several static classes and change references to
>         them
>         accordingly.
>             This is proposed here -
>         http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html
>         .
>         The author of the post actually has a solution into ANTLR
>         source code (some
>         string template). But I can't find the attachment he referred
>         to. And
>         that's in 2009, I suspect the fix could be incompatible with
>         current ANTLR
>         version.
>             Without this fix we have to do the modificaiton manually
>         or write a
>         script for that. The script is not that easy.
>
>         And we found a 3rd solution by ourself, that also involve
>         changing the
>         generated Java:
>
>         3. Remove those FOLLOW_... constant completely, and replace
>         the references
>         with "null".
>             Surprisingly this works, just no error recovery after
>         this, not a
>         problem for us. But we really worry this is unsafe, since it's not
>         documented anywhere.
>
>         After all, we're looking for any other solution that is easier
>         to apply,
>         asumming we'll be constantly changing the grammar and
>         recompile the parser.
>
>           Maybe there is a way to get ANTLRWorks and gunit play well
>         with imported
>         grammar?
>         Maybe there is already a commandline option for antlr Tool,
>         that can
>         genereate FOLLOW_... constants in seperate classes?
>         Maybe there is already a commandline option for antlr Tool,
>         that can
>         supress FOLLOW_... constants code generation?
>
>
>
>
>
> -- 
> Regards,
>
> Yang, Zhaohui
>


From jimi at temporal-wave.com  Wed Aug 15 11:32:08 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 11:32:08 -0700
Subject: [antlr-interest] big lexer problem
In-Reply-To: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
Message-ID: <d97497be4a0866591621e45230ff9041@mail.gmail.com>

This really means that your lexer is too complicated and I suspect that
you are just trying to type in a grammar from a normative spec without
thinking ahead a little (not trying to insult you here). The specs are
usually designed to explain the language/syntax, not necessarily to be
copied straight in to a parser grammar.

You should really post your grammar files to get better help, but
generally you are trying to introduce context/state in to the lexer, which
is not necessary in all but a few cases. For instance, why do you care
about the token type in the lexer if the same pattern is used for two
token types? Take a token that matches a PIC pattern generally, then
verify that the pattern is a good PIC spec when you are walking the tree,
not in the lexer.

On top of this, if you are trying to drive the lexer state from the
parser, then it is very unlikely it will work anyway.

Try to take a step back, and reduce the number of tokens to a minimum,
remove any state that you can, move all the error checking and validation
as far away from the lexer as you can (at the lexer level you have a
minimum context, at the tree walk level you have much more information and
can issue much better errors/warnings).

Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
the grammar and spend time on left factoring the rules, that all/a lot of
your problems will go away. If you still have issues with generated code
size at that point, then you need to start importing grammars and
debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
trying to change the output of ANTLR. The only time I have had to use
imports is for a full TSQL grammar, which is huge because SQL is so
terrible. COBOL is pretty big, but nothing like SQL.


Jim






> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Zhaohui Yang
> Sent: Wednesday, August 15, 2012 8:18 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] big lexer problem
>
> Hi,
>
> I'm having big problem with big generated Lexer.java. Any help
> appreciated.
>
> The language is COBOL. And I found multiple reasons that the lexer
> get's too big:
>
> 1. I'm adding semantic predicate into the lexer, to simulate "lexer
> state"
> as in YACC and JavaCC. It's like
>
>        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
> matching things like AXX(9).99 after a 'PIC' key word
>
>    The lexer without semantic predicates is 18K lines.
>    When I add predicates to one or two of the lexer rules, it grows to
> more than 20K.
>    When I add a single more, it explodes to more than 60K and ANTLR
> give up generating lexer with error: code is too long.
>
> 2. COBOL has a LOT of key words, that may explain the original 18K
> lines.
>
> 3. I have tokens referencing other tokens.
>    I've inlined most of them now, as suggested by others. But the size
> has not reduced much.
>
> So the question could be:
> 1. how to generate smaller lexer without removing semantic predicate?
> 2. If that's not possible, how to simulate "lexer state" without
> semantic predicate?
> 3. Any other solution?
>
> Thanks.
>
> --
> Regards,
>
> Yang, Zhaohui
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jimi at temporal-wave.com  Wed Aug 15 11:38:54 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 11:38:54 -0700
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <502BD8DB.3010605@orange.fr>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
Message-ID: <925ce1df1c75295afe33be1ab5c7d9c9@mail.gmail.com>

It does not need a fix. It is the grammar that needs to be improved. The
huge DFAs are indicative of your grammars being overly complicated or poorly
left factored. ANTLR might do better than it does in some cases, and v4 may
well get around a lot of similar issues, but in general, improve your
grammar files.

First, look at the generated DFA. What rule, or combination of rules is
generating this? Start there. Left factor. Simplify. Stop trying to do much
of anything in the lexer other than match the simplest common token set.
Stop trying to impose semantics in the parser ("you can only have at most
two of 'these' here" - push such things in the tree walk, or add semantic
checks (allow any number of 'these', count how many you got, then issue a
semantic error).

Writing good grammars is not easy. In some ways, because it is easy to just
type stuff in and give it a whirl, ANTLR can cause you to shoot yourself in
the foot!

Step back and consider your grammar files. Do you really want a grammar that
generates such huge decision tables? What is going wrong? It usually is not
ANTLR itself.


Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Francis ANDRE
> Sent: Wednesday, August 15, 2012 10:14 AM
> To: Zhaohui Yang
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] problem about "the code for the static
> initializer is exceeding the 65535 bytes limit"
>
> Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
> > It's great someone is already trying a fix. I'd be glad to test your
> > fix when it's out.
> >
> > Would you please introduce a bit what kind of fix is that? Is it for
> > ANTLRWorks or ANTLR tool, is it a command line option for seperating
> > FOLLOW set or supressing that, or something else?
> The 64K syndrone is a pure Java problem due to the constraint that the
> JVM does not support static initializer greater than 64K  -- shame on
> it --. Thus if you look to the generated lexer and parser, you will see
> certainly a lot of DFA classes, each of them having some static
> initializer values. The point is that the sum of the static initializer
> of all those DFAs is greater than 64K while the static initialization
> of each DFA is somewhat small or in most of case les than 64K. Thus,
> one solution is to extract all those DFAs classes and put them outside
> the lexer or the parser in fixed directories like the following
> pattern:
>
> Let <grammar> the directory of the grammar to generate, then all the
> generated DFAs will go in
>
> for the lexer's DFAs:    package <grammar>.lexer;
> for the parser's DAFs: package <grammar>.parser;
>
> and the reference of all those DFAs will be
> in the lexer:                 import <grammar>.lexer.*;
> in the parser                import <grammar>.parser.*;
>
> But hold on, the fix has to be approved by Terr and I did not yet
> submit it. It need to pass all unit tests of the ANTLR3.4 and I am
> working on it... there is a real challenge getting the parser/lexer
> compiled for java code generated without a package...; and all those
> unit tests are producing java parser/lexer at the top level directory.
> >
> > 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr
> > <mailto:francis.andre.kampbell at orange.fr>>
> >
> >     Hi Zhaohui
> >
> >     I am currently working on fixing this issues with antlr3.4...
> Once
> >     I will have a proper patch, would you be interested in testing
> it??
> >
> >     FA
> >     Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
> >
> >         Hi,
> >
> >         Here we have a big grammar and the generated parser.java got
> a
> >         compilation
> >         : "the code for the static initializer is exceeding the 65535
> >         bytes limit".
> >
> >         I've searched the net for a while and found that is a widely
> >         known limit in
> >         JVM or Javac compiler, and not yet has an option to change it
> >         higher.
> >
> >         On the ANTLR side, I found 2 solutions proposed by others,
> but
> >         neither of
> >         them is totally satisfying:
> >
> >         1. Seperate the big grammar into 2 *.g files, import one from
> >         the other.
> >             Yes, this removes the compilation error with genereated
> >         Java. But
> >         ANTLRWorks does not support imported grammar well. E.g., I
> can not
> >         interpret a rule in the imported grammar, it's simply not in
> >         the rule list
> >         for interpreting. And gunit always fail with rules defined in
> >         imported
> >         grammar.
> >
> >         2. Modify the generated Java source, seperate the
> >         "FOLLOW_xxx_in_yyy"
> >         constants into several static classes and change references
> to
> >         them
> >         accordingly.
> >             This is proposed here -
> >         http://www.antlr.org/pipermail/antlr-interest/2009-
> November/036608.html
> >         .
> >         The author of the post actually has a solution into ANTLR
> >         source code (some
> >         string template). But I can't find the attachment he referred
> >         to. And
> >         that's in 2009, I suspect the fix could be incompatible with
> >         current ANTLR
> >         version.
> >             Without this fix we have to do the modificaiton manually
> >         or write a
> >         script for that. The script is not that easy.
> >
> >         And we found a 3rd solution by ourself, that also involve
> >         changing the
> >         generated Java:
> >
> >         3. Remove those FOLLOW_... constant completely, and replace
> >         the references
> >         with "null".
> >             Surprisingly this works, just no error recovery after
> >         this, not a
> >         problem for us. But we really worry this is unsafe, since
> it's not
> >         documented anywhere.
> >
> >         After all, we're looking for any other solution that is
> easier
> >         to apply,
> >         asumming we'll be constantly changing the grammar and
> >         recompile the parser.
> >
> >           Maybe there is a way to get ANTLRWorks and gunit play well
> >         with imported
> >         grammar?
> >         Maybe there is already a commandline option for antlr Tool,
> >         that can
> >         genereate FOLLOW_... constants in seperate classes?
> >         Maybe there is already a commandline option for antlr Tool,
> >         that can
> >         supress FOLLOW_... constants code generation?
> >
> >
> >
> >
> >
> > --
> > Regards,
> >
> > Yang, Zhaohui
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From francis.andre.kampbell at orange.fr  Wed Aug 15 13:08:25 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Wed, 15 Aug 2012 22:08:25 +0200
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <925ce1df1c75295afe33be1ab5c7d9c9@mail.gmail.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<925ce1df1c75295afe33be1ab5c7d9c9@mail.gmail.com>
Message-ID: <502C01B9.5000009@orange.fr>

Hi Jim

With all respect I have for you, you cannot say that the only problem is 
a poorly designed grammar.

First of all, I would suggest you to look at language such as Cobol or 
Natural or esoteric third level language to take the "problem" in 
scope.  Just as an exemple, Natural allows this kind of syntaxes

99 / 99                   which means : divide 99 by 99
99/99                    which is a mask for date number editing

The real solution for this kind of expressions should be to let to the 
lexer do the job with contextual predicates as the WHITE token is 
generally ignored. If due to the 64K limitation, one should use a parser 
rule instead of lexer rules then the WHITE token becomes fully 
meaningfull and should be expressed in ALL rules of the grammar...which 
is really a painfull change since ANTR2 was working fine with contextual 
semantic predicates in the lexer rules.

Secondly, ANTLR as a generic and general compiler's compiler tool should 
be able to produce lexer and parser even for poorly written grammar if 
such grammar respect the specification of the meta langage.

Third, the 64K problem is really a Java problem linked to the inlining 
of the DFA classes into the lexer and parser. As extracting the DFAs 
outside the generated lexer and parser solve this issue, I do not see 
why one should reject this option since it improves the capability of 
ANTLR without compromising its functionnal offer.

Fourth, the software should adapt at its best to the human and not the 
contrary. That's why compilers have all an optimisation phase so that 
people could write for example i = i + 1; instead of i++ which is the 
cleaner and proper readable way to increment an integer. So it should be 
as much as possible the same for ANTLR for accepting grammar that are 
not overly left factored to overcome a Java limitation.


Terr, what's your position on this??

Francis

Le 15/08/2012 20:38, Jim Idle a ?crit :
> It does not need a fix. It is the grammar that needs to be improved. The
> huge DFAs are indicative of your grammars being overly complicated or poorly
> left factored. ANTLR might do better than it does in some cases, and v4 may
> well get around a lot of similar issues, but in general, improve your
> grammar files.
>
> First, look at the generated DFA. What rule, or combination of rules is
> generating this? Start there. Left factor. Simplify. Stop trying to do much
> of anything in the lexer other than match the simplest common token set.
> Stop trying to impose semantics in the parser ("you can only have at most
> two of 'these' here" - push such things in the tree walk, or add semantic
> checks (allow any number of 'these', count how many you got, then issue a
> semantic error).
>
> Writing good grammars is not easy. In some ways, because it is easy to just
> type stuff in and give it a whirl, ANTLR can cause you to shoot yourself in
> the foot!
>
> Step back and consider your grammar files. Do you really want a grammar that
> generates such huge decision tables? What is going wrong? It usually is not
> ANTLR itself.
>
>
> Jim
>
>
>> -----Original Message-----
>> From:antlr-interest-bounces at antlr.org  [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Francis ANDRE
>> Sent: Wednesday, August 15, 2012 10:14 AM
>> To: Zhaohui Yang
>> Cc:antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] problem about "the code for the static
>> initializer is exceeding the 65535 bytes limit"
>>
>> Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
>>> It's great someone is already trying a fix. I'd be glad to test your
>>> fix when it's out.
>>>
>>> Would you please introduce a bit what kind of fix is that? Is it for
>>> ANTLRWorks or ANTLR tool, is it a command line option for seperating
>>> FOLLOW set or supressing that, or something else?
>> The 64K syndrone is a pure Java problem due to the constraint that the
>> JVM does not support static initializer greater than 64K  -- shame on
>> it --. Thus if you look to the generated lexer and parser, you will see
>> certainly a lot of DFA classes, each of them having some static
>> initializer values. The point is that the sum of the static initializer
>> of all those DFAs is greater than 64K while the static initialization
>> of each DFA is somewhat small or in most of case les than 64K. Thus,
>> one solution is to extract all those DFAs classes and put them outside
>> the lexer or the parser in fixed directories like the following
>> pattern:
>>
>> Let <grammar> the directory of the grammar to generate, then all the
>> generated DFAs will go in
>>
>> for the lexer's DFAs:    package <grammar>.lexer;
>> for the parser's DAFs: package <grammar>.parser;
>>
>> and the reference of all those DFAs will be
>> in the lexer:                 import <grammar>.lexer.*;
>> in the parser                import <grammar>.parser.*;
>>
>> But hold on, the fix has to be approved by Terr and I did not yet
>> submit it. It need to pass all unit tests of the ANTLR3.4 and I am
>> working on it... there is a real challenge getting the parser/lexer
>> compiled for java code generated without a package...; and all those
>> unit tests are producing java parser/lexer at the top level directory.
>>> 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr
>>> <mailto:francis.andre.kampbell at orange.fr>>
>>>
>>>      Hi Zhaohui
>>>
>>>      I am currently working on fixing this issues with antlr3.4...
>> Once
>>>      I will have a proper patch, would you be interested in testing
>> it??
>>>      FA
>>>      Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
>>>
>>>          Hi,
>>>
>>>          Here we have a big grammar and the generated parser.java got
>> a
>>>          compilation
>>>          : "the code for the static initializer is exceeding the 65535
>>>          bytes limit".
>>>
>>>          I've searched the net for a while and found that is a widely
>>>          known limit in
>>>          JVM or Javac compiler, and not yet has an option to change it
>>>          higher.
>>>
>>>          On the ANTLR side, I found 2 solutions proposed by others,
>> but
>>>          neither of
>>>          them is totally satisfying:
>>>
>>>          1. Seperate the big grammar into 2 *.g files, import one from
>>>          the other.
>>>              Yes, this removes the compilation error with genereated
>>>          Java. But
>>>          ANTLRWorks does not support imported grammar well. E.g., I
>> can not
>>>          interpret a rule in the imported grammar, it's simply not in
>>>          the rule list
>>>          for interpreting. And gunit always fail with rules defined in
>>>          imported
>>>          grammar.
>>>
>>>          2. Modify the generated Java source, seperate the
>>>          "FOLLOW_xxx_in_yyy"
>>>          constants into several static classes and change references
>> to
>>>          them
>>>          accordingly.
>>>              This is proposed here -
>>>          http://www.antlr.org/pipermail/antlr-interest/2009-
>> November/036608.html
>>>          .
>>>          The author of the post actually has a solution into ANTLR
>>>          source code (some
>>>          string template). But I can't find the attachment he referred
>>>          to. And
>>>          that's in 2009, I suspect the fix could be incompatible with
>>>          current ANTLR
>>>          version.
>>>              Without this fix we have to do the modificaiton manually
>>>          or write a
>>>          script for that. The script is not that easy.
>>>
>>>          And we found a 3rd solution by ourself, that also involve
>>>          changing the
>>>          generated Java:
>>>
>>>          3. Remove those FOLLOW_... constant completely, and replace
>>>          the references
>>>          with "null".
>>>              Surprisingly this works, just no error recovery after
>>>          this, not a
>>>          problem for us. But we really worry this is unsafe, since
>> it's not
>>>          documented anywhere.
>>>
>>>          After all, we're looking for any other solution that is
>> easier
>>>          to apply,
>>>          asumming we'll be constantly changing the grammar and
>>>          recompile the parser.
>>>
>>>            Maybe there is a way to get ANTLRWorks and gunit play well
>>>          with imported
>>>          grammar?
>>>          Maybe there is already a commandline option for antlr Tool,
>>>          that can
>>>          genereate FOLLOW_... constants in seperate classes?
>>>          Maybe there is already a commandline option for antlr Tool,
>>>          that can
>>>          supress FOLLOW_... constants code generation?
>>>
>>>
>>>
>>>
>>>
>>> --
>>> Regards,
>>>
>>> Yang, Zhaohui
>>>
>> List:http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> List:http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From tijet at mac.com  Wed Aug 15 13:21:25 2012
From: tijet at mac.com (Trevor John Thompson)
Date: Wed, 15 Aug 2012 13:21:25 -0700
Subject: [antlr-interest] problem about "the code for the static
	initializer is exceeding the 65535 bytes limit"
In-Reply-To: <502C01B9.5000009@orange.fr>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<925ce1df1c75295afe33be1ab5c7d9c9@mail.gmail.com>
	<502C01B9.5000009@orange.fr>
Message-ID: <F5597E16-63A3-4537-9BDC-0B8E33E58024@mac.com>

On 2012 Aug 15, at 13:08, Francis ANDRE <francis.andre.kampbell at orange.fr> wrote:

>  Just as an exemple, Natural allows this kind of syntaxes
> 
> 99 / 99                   which means : divide 99 by 99
> 99/99                    which is a mask for date number editing

This only demonstrates that Natural is an atrociously bad design for a language.
Try viewing it in a variable width font to see why.
--
Trevor John Thompson    (425) 246-4023
tijet at me.com
Quidquid Latine scriptum sit, altum videtur.


From jimi at temporal-wave.com  Wed Aug 15 13:49:20 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 13:49:20 -0700
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <502C01B9.5000009@orange.fr>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<925ce1df1c75295afe33be1ab5c7d9c9@mail.gmail.com>
	<502C01B9.5000009@orange.fr>
Message-ID: <52f26bca1101a52c94b46cc63c141eac@mail.gmail.com>

Maybe your example is one where the lexer does need state, but it should not
cause these huge DFAs unless there is something wonky with the grammar. I am
not having a go at you ;)


I still say that you should start with the grammar. Look at the generated
DFA and see which rule/decision is causing this and left factor:

fragment MASK: ;
INT : ('0'..'9')+ /* Perhaps gated predicate here */ ( '/' '0'..'9'+ { $type
= MASK; } )? ;

But, if I can't see your grammars, I can't get more specific than a few
guesses.

V4 has lexer modes, which may well help you a lot.

Jim

> -----Original Message-----
> From: Francis ANDRE [mailto:francis.andre.kampbell at orange.fr]
> Sent: Wednesday, August 15, 2012 1:08 PM
> To: Jim Idle; parrt at cs.usfca.edu >> Terence Parr
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] problem about "the code for the static
> initializer is exceeding the 65535 bytes limit"
>
> Hi Jim
>
> With all respect I have for you, you cannot say that the only problem
> is a poorly designed grammar.
>
> First of all, I would suggest you to look at language such as Cobol or
> Natural or esoteric third level language to take the "problem" in
> scope.  Just as an exemple, Natural allows this kind of syntaxes
>
> 99 / 99                   which means : divide 99 by 99
> 99/99                    which is a mask for date number editing
>
> The real solution for this kind of expressions should be to let to the
> lexer do the job with contextual predicates as the WHITE token is
> generally ignored. If due to the 64K limitation, one should use a
> parser rule instead of lexer rules then the WHITE token becomes fully
> meaningfull and should be expressed in ALL rules of the grammar...which
> is really a painfull change since ANTR2 was working fine with
> contextual semantic predicates in the lexer rules.
>
> Secondly, ANTLR as a generic and general compiler's compiler tool
> should be able to produce lexer and parser even for poorly written
> grammar if such grammar respect the specification of the meta langage.
>
> Third, the 64K problem is really a Java problem linked to the inlining
> of the DFA classes into the lexer and parser. As extracting the DFAs
> outside the generated lexer and parser solve this issue, I do not see
> why one should reject this option since it improves the capability of
> ANTLR without compromising its functionnal offer.
>
> Fourth, the software should adapt at its best to the human and not the
> contrary. That's why compilers have all an optimisation phase so that
> people could write for example i = i + 1; instead of i++ which is the
> cleaner and proper readable way to increment an integer. So it should
> be as much as possible the same for ANTLR for accepting grammar that
> are not overly left factored to overcome a Java limitation.
>
>
> Terr, what's your position on this??
>
> Francis
>
> Le 15/08/2012 20:38, Jim Idle a ?crit :
> > It does not need a fix. It is the grammar that needs to be improved.
> > The huge DFAs are indicative of your grammars being overly
> complicated
> > or poorly left factored. ANTLR might do better than it does in some
> > cases, and v4 may well get around a lot of similar issues, but in
> > general, improve your grammar files.
> >
> > First, look at the generated DFA. What rule, or combination of rules
> > is generating this? Start there. Left factor. Simplify. Stop trying
> to
> > do much of anything in the lexer other than match the simplest common
> token set.
> > Stop trying to impose semantics in the parser ("you can only have at
> > most two of 'these' here" - push such things in the tree walk, or add
> > semantic checks (allow any number of 'these', count how many you got,
> > then issue a semantic error).
> >
> > Writing good grammars is not easy. In some ways, because it is easy
> to
> > just type stuff in and give it a whirl, ANTLR can cause you to shoot
> > yourself in the foot!
> >
> > Step back and consider your grammar files. Do you really want a
> > grammar that generates such huge decision tables? What is going
> wrong?
> > It usually is not ANTLR itself.
> >
> >
> > Jim
> >
> >
> >> -----Original Message-----
> >> From:antlr-interest-bounces at antlr.org  [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Francis ANDRE
> >> Sent: Wednesday, August 15, 2012 10:14 AM
> >> To: Zhaohui Yang
> >> Cc:antlr-interest at antlr.org
> >> Subject: Re: [antlr-interest] problem about "the code for the static
> >> initializer is exceeding the 65535 bytes limit"
> >>
> >> Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
> >>> It's great someone is already trying a fix. I'd be glad to test
> your
> >>> fix when it's out.
> >>>
> >>> Would you please introduce a bit what kind of fix is that? Is it
> for
> >>> ANTLRWorks or ANTLR tool, is it a command line option for
> seperating
> >>> FOLLOW set or supressing that, or something else?
> >> The 64K syndrone is a pure Java problem due to the constraint that
> >> the JVM does not support static initializer greater than 64K  --
> >> shame on it --. Thus if you look to the generated lexer and parser,
> >> you will see certainly a lot of DFA classes, each of them having
> some
> >> static initializer values. The point is that the sum of the static
> >> initializer of all those DFAs is greater than 64K while the static
> >> initialization of each DFA is somewhat small or in most of case les
> >> than 64K. Thus, one solution is to extract all those DFAs classes
> and
> >> put them outside the lexer or the parser in fixed directories like
> >> the following
> >> pattern:
> >>
> >> Let <grammar> the directory of the grammar to generate, then all the
> >> generated DFAs will go in
> >>
> >> for the lexer's DFAs:    package <grammar>.lexer;
> >> for the parser's DAFs: package <grammar>.parser;
> >>
> >> and the reference of all those DFAs will be
> >> in the lexer:                 import <grammar>.lexer.*;
> >> in the parser                import <grammar>.parser.*;
> >>
> >> But hold on, the fix has to be approved by Terr and I did not yet
> >> submit it. It need to pass all unit tests of the ANTLR3.4 and I am
> >> working on it... there is a real challenge getting the parser/lexer
> >> compiled for java code generated without a package...; and all those
> >> unit tests are producing java parser/lexer at the top level
> directory.
> >>> 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr
> >>> <mailto:francis.andre.kampbell at orange.fr>>
> >>>
> >>>      Hi Zhaohui
> >>>
> >>>      I am currently working on fixing this issues with antlr3.4...
> >> Once
> >>>      I will have a proper patch, would you be interested in testing
> >> it??
> >>>      FA
> >>>      Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
> >>>
> >>>          Hi,
> >>>
> >>>          Here we have a big grammar and the generated parser.java
> >>> got
> >> a
> >>>          compilation
> >>>          : "the code for the static initializer is exceeding the
> 65535
> >>>          bytes limit".
> >>>
> >>>          I've searched the net for a while and found that is a
> widely
> >>>          known limit in
> >>>          JVM or Javac compiler, and not yet has an option to change
> it
> >>>          higher.
> >>>
> >>>          On the ANTLR side, I found 2 solutions proposed by others,
> >> but
> >>>          neither of
> >>>          them is totally satisfying:
> >>>
> >>>          1. Seperate the big grammar into 2 *.g files, import one
> from
> >>>          the other.
> >>>              Yes, this removes the compilation error with
> genereated
> >>>          Java. But
> >>>          ANTLRWorks does not support imported grammar well. E.g., I
> >> can not
> >>>          interpret a rule in the imported grammar, it's simply not
> in
> >>>          the rule list
> >>>          for interpreting. And gunit always fail with rules defined
> in
> >>>          imported
> >>>          grammar.
> >>>
> >>>          2. Modify the generated Java source, seperate the
> >>>          "FOLLOW_xxx_in_yyy"
> >>>          constants into several static classes and change
> references
> >> to
> >>>          them
> >>>          accordingly.
> >>>              This is proposed here -
> >>>          http://www.antlr.org/pipermail/antlr-interest/2009-
> >> November/036608.html
> >>>          .
> >>>          The author of the post actually has a solution into ANTLR
> >>>          source code (some
> >>>          string template). But I can't find the attachment he
> referred
> >>>          to. And
> >>>          that's in 2009, I suspect the fix could be incompatible
> with
> >>>          current ANTLR
> >>>          version.
> >>>              Without this fix we have to do the modificaiton
> manually
> >>>          or write a
> >>>          script for that. The script is not that easy.
> >>>
> >>>          And we found a 3rd solution by ourself, that also involve
> >>>          changing the
> >>>          generated Java:
> >>>
> >>>          3. Remove those FOLLOW_... constant completely, and
> replace
> >>>          the references
> >>>          with "null".
> >>>              Surprisingly this works, just no error recovery after
> >>>          this, not a
> >>>          problem for us. But we really worry this is unsafe, since
> >> it's not
> >>>          documented anywhere.
> >>>
> >>>          After all, we're looking for any other solution that is
> >> easier
> >>>          to apply,
> >>>          asumming we'll be constantly changing the grammar and
> >>>          recompile the parser.
> >>>
> >>>            Maybe there is a way to get ANTLRWorks and gunit play
> well
> >>>          with imported
> >>>          grammar?
> >>>          Maybe there is already a commandline option for antlr
> Tool,
> >>>          that can
> >>>          genereate FOLLOW_... constants in seperate classes?
> >>>          Maybe there is already a commandline option for antlr
> Tool,
> >>>          that can
> >>>          supress FOLLOW_... constants code generation?
> >>>
> >>>
> >>>
> >>>
> >>>
> >>> --
> >>> Regards,
> >>>
> >>> Yang, Zhaohui
> >>>
> >> List:http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:http://www.antlr.org/mailman/options/antlr-
> interest/your-
> >> email-address
> > List:http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:http://www.antlr.org/mailman/options/antlr-interest/your-
> e
> > mail-address
>

From jimi at temporal-wave.com  Wed Aug 15 13:53:42 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 13:53:42 -0700
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <F5597E16-63A3-4537-9BDC-0B8E33E58024@mac.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<925ce1df1c75295afe33be1ab5c7d9c9@mail.gmail.com>
	<502C01B9.5000009@orange.fr>
	<F5597E16-63A3-4537-9BDC-0B8E33E58024@mac.com>
Message-ID: <9fa892386ec6a822be7068e180194f79@mail.gmail.com>

Ha - true, but the poster still has to write a lexer/parser to deal with
it. In this case though, I would still deal with it in the parser, not the
lexer as the parser has some context for the decision.

... PIC { getMask(); /* Code to pick up the mask tokens and concatenate */
}


Jim


> -----Original Message-----
> From: Trevor John Thompson [mailto:tijet at mac.com]
> Sent: Wednesday, August 15, 2012 1:21 PM
> To: Francis ANDRE
> Cc: Jim Idle; parrt at cs.usfca.edu >> Terence Parr; antlr-
> interest at antlr.org
> Subject: Re: [antlr-interest] problem about "the code for the static
> initializer is exceeding the 65535 bytes limit"
>
> On 2012 Aug 15, at 13:08, Francis ANDRE
> <francis.andre.kampbell at orange.fr> wrote:
>
> >  Just as an exemple, Natural allows this kind of syntaxes
> >
> > 99 / 99                   which means : divide 99 by 99
> > 99/99                    which is a mask for date number editing
>
> This only demonstrates that Natural is an atrociously bad design for a
> language.
> Try viewing it in a variable width font to see why.
> --
> Trevor John Thompson    (425) 246-4023
> tijet at me.com
> Quidquid Latine scriptum sit, altum videtur.

From yezonghui at gmail.com  Wed Aug 15 17:43:16 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Thu, 16 Aug 2012 08:43:16 +0800
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <502BD8DB.3010605@orange.fr>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
Message-ID: <CAO51=GRiDORAhBoVfFs=kEamH5Xh5SfxbbUEw7RnnLkBgVLEDA@mail.gmail.com>

sounds promising :)

We have written a program to separate those constants into several inner
classes, solves for now.

Yours is definitely better:)
? 2012-8-16 ??1:13?"Francis ANDRE" <francis.andre.kampbell at orange.fr>???

>  Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
>
> It's great someone is already trying a fix. I'd be glad to test your fix
> when it's out.
>
> Would you please introduce a bit what kind of fix is that? Is it for
> ANTLRWorks or ANTLR tool, is it a command line option for seperating FOLLOW
> set or supressing that, or something else?
>
> The 64K syndrone is a pure Java problem due to the constraint that the JVM
> does not support static initializer greater than 64K  -- shame on it --.
> Thus if you look to the generated lexer and parser, you will see certainly
> a lot of DFA classes, each of them having some static initializer values.
> The point is that the sum of the static initializer of all those DFAs is
> greater than 64K while the static initialization of each DFA is somewhat
> small or in most of case les than 64K. Thus, one solution is to extract all
> those DFAs classes and put them outside the lexer or the parser in fixed
> directories like the following pattern:
>
> Let <grammar> the directory of the grammar to generate, then all the
> generated DFAs will go in
>
> for the lexer's DFAs:    package <grammar>.lexer;
> for the parser's DAFs: package <grammar>.parser;
>
> and the reference of all those DFAs will be
> in the lexer:                 import <grammar>.lexer.*;
> in the parser                import <grammar>.parser.*;
>
> But hold on, the fix has to be approved by Terr and I did not yet submit
> it. It need to pass all unit tests of the ANTLR3.4 and I am working on
> it... there is a real challenge getting the parser/lexer compiled for java
> code generated without a package...; and all those unit tests are producing
> java parser/lexer at the top level directory.
>
>
> 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr>
>
>> Hi Zhaohui
>>
>> I am currently working on fixing this issues with antlr3.4... Once I will
>> have a proper patch, would you be interested in testing it??
>>
>> FA
>> Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
>>
>> Hi,
>>>
>>> Here we have a big grammar and the generated parser.java got a
>>> compilation
>>> : "the code for the static initializer is exceeding the 65535 bytes
>>> limit".
>>>
>>> I've searched the net for a while and found that is a widely known limit
>>> in
>>> JVM or Javac compiler, and not yet has an option to change it higher.
>>>
>>> On the ANTLR side, I found 2 solutions proposed by others, but neither of
>>> them is totally satisfying:
>>>
>>> 1. Seperate the big grammar into 2 *.g files, import one from the other.
>>>     Yes, this removes the compilation error with genereated Java. But
>>> ANTLRWorks does not support imported grammar well. E.g., I can not
>>> interpret a rule in the imported grammar, it's simply not in the rule
>>> list
>>> for interpreting. And gunit always fail with rules defined in imported
>>> grammar.
>>>
>>> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
>>> constants into several static classes and change references to them
>>> accordingly.
>>>     This is proposed here -
>>> http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html.
>>> The author of the post actually has a solution into ANTLR source code
>>> (some
>>> string template). But I can't find the attachment he referred to. And
>>> that's in 2009, I suspect the fix could be incompatible with current
>>> ANTLR
>>> version.
>>>     Without this fix we have to do the modificaiton manually or write a
>>> script for that. The script is not that easy.
>>>
>>> And we found a 3rd solution by ourself, that also involve changing the
>>> generated Java:
>>>
>>> 3. Remove those FOLLOW_... constant completely, and replace the
>>> references
>>> with "null".
>>>     Surprisingly this works, just no error recovery after this, not a
>>> problem for us. But we really worry this is unsafe, since it's not
>>> documented anywhere.
>>>
>>> After all, we're looking for any other solution that is easier to apply,
>>> asumming we'll be constantly changing the grammar and recompile the
>>> parser.
>>>
>>>   Maybe there is a way to get ANTLRWorks and gunit play well with
>>> imported
>>> grammar?
>>> Maybe there is already a commandline option for antlr Tool, that can
>>> genereate FOLLOW_... constants in seperate classes?
>>> Maybe there is already a commandline option for antlr Tool, that can
>>> supress FOLLOW_... constants code generation?
>>>
>>>
>>
>
>
> --
> Regards,
>
> Yang, Zhaohui
>
>
>

From vinicius.durelli at gmail.com  Wed Aug 15 17:54:12 2012
From: vinicius.durelli at gmail.com (Vinicius Durelli)
Date: Wed, 15 Aug 2012 21:54:12 -0300
Subject: [antlr-interest] Testing a grammar with output=template setting
	through gUnit
Message-ID: <CAFVj062V4sHKVp+ESz52+7CCCdYNpAchSYvhwkiZftwhm83T7w@mail.gmail.com>

Hi all,

I am trying to test the CMinus grammar (from Terence's book) just to get
the hang of using gUnit.
However, I am getting the following error message:

$ java -cp ./antlr-3.4-complete.jar:. org.antlr.gunit.Interp CMinus.gunit
-----------------------------------------------------------------------
executing testsuite for grammar:CMinus with 1 tests
-----------------------------------------------------------------------
1 failures found:
test1 (variable, line4) -
expected: int x; /* x variable declaration*/
actual: java.lang.ClassCastException: org.antlr.runtime.CommonTokenStream
cannot be cast to org.antlr.runtime.TokenRewriteStream


Here is my gunit file:

gunit CMinus;

variable:
<<
int x;
>> -> "int x; /* x variable declaration*/"

Am I missing something? How do I state that my grammar is set to output a
template?

(I am running antlr 3.4)

Best,
Vinicius

From kferrio at gmail.com  Wed Aug 15 18:04:13 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 15 Aug 2012 18:04:13 -0700
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <CAO51=GRiDORAhBoVfFs=kEamH5Xh5SfxbbUEw7RnnLkBgVLEDA@mail.gmail.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<CAO51=GRiDORAhBoVfFs=kEamH5Xh5SfxbbUEw7RnnLkBgVLEDA@mail.gmail.com>
Message-ID: <CAAfeETrZ4TrFD-adT=Ex-GtD1QO2uGzdq3m8RCd6V2+OVpptMA@mail.gmail.com>

Hi Zhaohui,

You already know that you've discovered a theme which evokes some passion
in the ANTLR community.

There is a *lot* of wisdom in Jim Idles's suggestions.  Each one could be a
whole lecture.  If you take a class in compiler construction (or go back to
your notes, if you already had the class) you will see this up close.

My version is "preserve information; defer decisions as long as possible;
and make every decision as simple as possible."  If you do these things,
your language will be easy to maintain and extend.  And if you have users
for any length of time, these characteristics are probably high on your
list.  Hopefully you were not given a pathelogical language spec.

Good luck!
 On Aug 15, 2012 5:43 PM, "Zhaohui Yang" <yezonghui at gmail.com> wrote:

> sounds promising :)
>
> We have written a program to separate those constants into several inner
> classes, solves for now.
>
> Yours is definitely better:)
> ? 2012-8-16 ??1:13?"Francis ANDRE" <francis.andre.kampbell at orange.fr>???
>
> >  Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
> >
> > It's great someone is already trying a fix. I'd be glad to test your fix
> > when it's out.
> >
> > Would you please introduce a bit what kind of fix is that? Is it for
> > ANTLRWorks or ANTLR tool, is it a command line option for seperating
> FOLLOW
> > set or supressing that, or something else?
> >
> > The 64K syndrone is a pure Java problem due to the constraint that the
> JVM
> > does not support static initializer greater than 64K  -- shame on it --.
> > Thus if you look to the generated lexer and parser, you will see
> certainly
> > a lot of DFA classes, each of them having some static initializer values.
> > The point is that the sum of the static initializer of all those DFAs is
> > greater than 64K while the static initialization of each DFA is somewhat
> > small or in most of case les than 64K. Thus, one solution is to extract
> all
> > those DFAs classes and put them outside the lexer or the parser in fixed
> > directories like the following pattern:
> >
> > Let <grammar> the directory of the grammar to generate, then all the
> > generated DFAs will go in
> >
> > for the lexer's DFAs:    package <grammar>.lexer;
> > for the parser's DAFs: package <grammar>.parser;
> >
> > and the reference of all those DFAs will be
> > in the lexer:                 import <grammar>.lexer.*;
> > in the parser                import <grammar>.parser.*;
> >
> > But hold on, the fix has to be approved by Terr and I did not yet submit
> > it. It need to pass all unit tests of the ANTLR3.4 and I am working on
> > it... there is a real challenge getting the parser/lexer compiled for
> java
> > code generated without a package...; and all those unit tests are
> producing
> > java parser/lexer at the top level directory.
> >
> >
> > 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr>
> >
> >> Hi Zhaohui
> >>
> >> I am currently working on fixing this issues with antlr3.4... Once I
> will
> >> have a proper patch, would you be interested in testing it??
> >>
> >> FA
> >> Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
> >>
> >> Hi,
> >>>
> >>> Here we have a big grammar and the generated parser.java got a
> >>> compilation
> >>> : "the code for the static initializer is exceeding the 65535 bytes
> >>> limit".
> >>>
> >>> I've searched the net for a while and found that is a widely known
> limit
> >>> in
> >>> JVM or Javac compiler, and not yet has an option to change it higher.
> >>>
> >>> On the ANTLR side, I found 2 solutions proposed by others, but neither
> of
> >>> them is totally satisfying:
> >>>
> >>> 1. Seperate the big grammar into 2 *.g files, import one from the
> other.
> >>>     Yes, this removes the compilation error with genereated Java. But
> >>> ANTLRWorks does not support imported grammar well. E.g., I can not
> >>> interpret a rule in the imported grammar, it's simply not in the rule
> >>> list
> >>> for interpreting. And gunit always fail with rules defined in imported
> >>> grammar.
> >>>
> >>> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
> >>> constants into several static classes and change references to them
> >>> accordingly.
> >>>     This is proposed here -
> >>>
> http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html.
> >>> The author of the post actually has a solution into ANTLR source code
> >>> (some
> >>> string template). But I can't find the attachment he referred to. And
> >>> that's in 2009, I suspect the fix could be incompatible with current
> >>> ANTLR
> >>> version.
> >>>     Without this fix we have to do the modificaiton manually or write a
> >>> script for that. The script is not that easy.
> >>>
> >>> And we found a 3rd solution by ourself, that also involve changing the
> >>> generated Java:
> >>>
> >>> 3. Remove those FOLLOW_... constant completely, and replace the
> >>> references
> >>> with "null".
> >>>     Surprisingly this works, just no error recovery after this, not a
> >>> problem for us. But we really worry this is unsafe, since it's not
> >>> documented anywhere.
> >>>
> >>> After all, we're looking for any other solution that is easier to
> apply,
> >>> asumming we'll be constantly changing the grammar and recompile the
> >>> parser.
> >>>
> >>>   Maybe there is a way to get ANTLRWorks and gunit play well with
> >>> imported
> >>> grammar?
> >>> Maybe there is already a commandline option for antlr Tool, that can
> >>> genereate FOLLOW_... constants in seperate classes?
> >>> Maybe there is already a commandline option for antlr Tool, that can
> >>> supress FOLLOW_... constants code generation?
> >>>
> >>>
> >>
> >
> >
> > --
> > Regards,
> >
> > Yang, Zhaohui
> >
> >
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From martin.zhang717 at gmail.com  Wed Aug 15 18:16:21 2012
From: martin.zhang717 at gmail.com (Martin Zhang)
Date: Thu, 16 Aug 2012 09:16:21 +0800
Subject: [antlr-interest] =?gb2312?b?tPC4tDogYW50bHItaW50ZXJlc3QgRGlnZXN0?=
	=?gb2312?b?LCBWb2wgOTMsIElzc3VlIDE1?=
In-Reply-To: <mailman.1.1345057202.1226.antlr-interest@antlr.org>
References: <mailman.1.1345057202.1226.antlr-interest@antlr.org>
Message-ID: <502c49cd.21bf440a.759f.ffff8079@mx.google.com>

Hello, I do not want these mails any more, but I forgot my password, can
anyone help?

Thanks, 
Martin

-----????-----
???: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] ?? antlr-interest-request at antlr.
org
????: 2012?8?16? 3:00
???: antlr-interest at antlr.org
??: antlr-interest Digest, Vol 93, Issue 15

Send antlr-interest mailing list submissions to
	antlr-interest at antlr.org

To subscribe or unsubscribe via the World Wide Web, visit
	http://www.antlr.org/mailman/listinfo/antlr-interest
or, via email, send a message with subject or body 'help' to
	antlr-interest-request at antlr.org

You can reach the person managing the list at
	antlr-interest-owner at antlr.org

When replying, please edit your Subject line so it is more specific
than "Re: Contents of antlr-interest digest..."


Today's Topics:

   1. AUTO: Noel Dcosta is out of the office (returning	08/16/2012)
      (Noel Dcosta)
   2. Re: problem about "the code for the static initializer is
      exceeding the 65535 bytes limit" (Francis ANDRE)
   3. Re: problem about "the code for the static initializer is
      exceeding the 65535 bytes limit" (Zhaohui Yang)
   4. big lexer problem (Zhaohui Yang)
   5. Re: problem about "the code for the static initializer is
      exceeding the 65535 bytes limit" (Francis ANDRE)
   6. Re: big lexer problem (Jim Idle)
   7. Re: problem about "the code for the static initializer is
      exceeding the 65535 bytes limit" (Jim Idle)


----------------------------------------------------------------------

Message: 1
Date: Wed, 15 Aug 2012 04:08:26 +0530
From: Noel Dcosta <nodcosta at in.ibm.com>
Subject: [antlr-interest] AUTO: Noel Dcosta is out of the office
	(returning	08/16/2012)
To: antlr-interest at antlr.org
Message-ID:
	
<OF1E12170B.D9CCF0DA-ON65257A5A.007C5E6F-65257A5A.007C5E6F at in.ibm.com>
Content-Type: text/plain; charset=US-ASCII


I am out of the office until 08/16/2012.

Holiday at ISL


Note: This is an automated response to your message  "antlr-interest
Digest, Vol 93, Issue 14" sent on 15/08/2012 0:30:01.

This is the only notification you will receive while this person is away.



------------------------------

Message: 2
Date: Wed, 15 Aug 2012 05:37:13 +0200
From: Francis ANDRE <francis.andre.kampbell at orange.fr>
Subject: Re: [antlr-interest] problem about "the code for the static
	initializer is exceeding the 65535 bytes limit"
To: Zhaohui Yang <yezonghui at gmail.com>
Cc: antlr-interest at antlr.org
Message-ID: <502B1969.1070700 at orange.fr>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed

Hi Zhaohui

I am currently working on fixing this issues with antlr3.4... Once I will
have a 
proper patch, would you be interested in testing it??

FA
Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
> Hi,
>
> Here we have a big grammar and the generated parser.java got a compilation
> : "the code for the static initializer is exceeding the 65535 bytes
limit".
>
> I've searched the net for a while and found that is a widely known limit
in
> JVM or Javac compiler, and not yet has an option to change it higher.
>
> On the ANTLR side, I found 2 solutions proposed by others, but neither of
> them is totally satisfying:
>
> 1. Seperate the big grammar into 2 *.g files, import one from the other.
>     Yes, this removes the compilation error with genereated Java. But
> ANTLRWorks does not support imported grammar well. E.g., I can not
> interpret a rule in the imported grammar, it's simply not in the rule list
> for interpreting. And gunit always fail with rules defined in imported
> grammar.
>
> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
> constants into several static classes and change references to them
> accordingly.
>     This is proposed here -
> http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html .
> The author of the post actually has a solution into ANTLR source code
(some
> string template). But I can't find the attachment he referred to. And
> that's in 2009, I suspect the fix could be incompatible with current ANTLR
> version.
>     Without this fix we have to do the modificaiton manually or write a
> script for that. The script is not that easy.
>
> And we found a 3rd solution by ourself, that also involve changing the
> generated Java:
>
> 3. Remove those FOLLOW_... constant completely, and replace the references
> with "null".
>     Surprisingly this works, just no error recovery after this, not a
> problem for us. But we really worry this is unsafe, since it's not
> documented anywhere.
>
> After all, we're looking for any other solution that is easier to apply,
> asumming we'll be constantly changing the grammar and recompile the
parser.
>
>   Maybe there is a way to get ANTLRWorks and gunit play well with imported
> grammar?
> Maybe there is already a commandline option for antlr Tool, that can
> genereate FOLLOW_... constants in seperate classes?
> Maybe there is already a commandline option for antlr Tool, that can
> supress FOLLOW_... constants code generation?
>



------------------------------

Message: 3
Date: Wed, 15 Aug 2012 22:17:18 +0800
From: Zhaohui Yang <yezonghui at gmail.com>
Subject: Re: [antlr-interest] problem about "the code for the static
	initializer is exceeding the 65535 bytes limit"
To: francis.andre.kampbell at orange.fr
Cc: antlr-interest at antlr.org
Message-ID:
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

It's great someone is already trying a fix. I'd be glad to test your fix
when it's out.

Would you please introduce a bit what kind of fix is that? Is it for
ANTLRWorks or ANTLR tool, is it a command line option for seperating FOLLOW
set or supressing that, or something else?

2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr>

> Hi Zhaohui
>
> I am currently working on fixing this issues with antlr3.4... Once I will
> have a proper patch, would you be interested in testing it??
>
> FA
> Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
>
> Hi,
>>
>> Here we have a big grammar and the generated parser.java got a
compilation
>> : "the code for the static initializer is exceeding the 65535 bytes
>> limit".
>>
>> I've searched the net for a while and found that is a widely known limit
>> in
>> JVM or Javac compiler, and not yet has an option to change it higher.
>>
>> On the ANTLR side, I found 2 solutions proposed by others, but neither of
>> them is totally satisfying:
>>
>> 1. Seperate the big grammar into 2 *.g files, import one from the other.
>>     Yes, this removes the compilation error with genereated Java. But
>> ANTLRWorks does not support imported grammar well. E.g., I can not
>> interpret a rule in the imported grammar, it's simply not in the rule
list
>> for interpreting. And gunit always fail with rules defined in imported
>> grammar.
>>
>> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
>> constants into several static classes and change references to them
>> accordingly.
>>     This is proposed here -
>> http://www.antlr.org/**pipermail/antlr-interest/2009-**
>>
November/036608.html<http://www.antlr.org/pipermail/antlr-interest/2009-Nove
mber/036608.html>.
>> The author of the post actually has a solution into ANTLR source code
>> (some
>> string template). But I can't find the attachment he referred to. And
>> that's in 2009, I suspect the fix could be incompatible with current
ANTLR
>> version.
>>     Without this fix we have to do the modificaiton manually or write a
>> script for that. The script is not that easy.
>>
>> And we found a 3rd solution by ourself, that also involve changing the
>> generated Java:
>>
>> 3. Remove those FOLLOW_... constant completely, and replace the
references
>> with "null".
>>     Surprisingly this works, just no error recovery after this, not a
>> problem for us. But we really worry this is unsafe, since it's not
>> documented anywhere.
>>
>> After all, we're looking for any other solution that is easier to apply,
>> asumming we'll be constantly changing the grammar and recompile the
>> parser.
>>
>>   Maybe there is a way to get ANTLRWorks and gunit play well with
imported
>> grammar?
>> Maybe there is already a commandline option for antlr Tool, that can
>> genereate FOLLOW_... constants in seperate classes?
>> Maybe there is already a commandline option for antlr Tool, that can
>> supress FOLLOW_... constants code generation?
>>
>>
>


-- 
Regards,

Yang, Zhaohui


------------------------------

Message: 4
Date: Wed, 15 Aug 2012 23:17:58 +0800
From: Zhaohui Yang <yezonghui at gmail.com>
Subject: [antlr-interest] big lexer problem
To: antlr-interest at antlr.org
Message-ID:
	<CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

Hi,

I'm having big problem with big generated Lexer.java. Any help appreciated.

The language is COBOL. And I found multiple reasons that the lexer get's
too big:

1. I'm adding semantic predicate into the lexer, to simulate "lexer state"
as in YACC and JavaCC. It's like

       PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
matching things like AXX(9).99 after a 'PIC' key word

   The lexer without semantic predicates is 18K lines.
   When I add predicates to one or two of the lexer rules, it grows to more
than 20K.
   When I add a single more, it explodes to more than 60K and ANTLR give up
generating lexer with error: code is too long.

2. COBOL has a LOT of key words, that may explain the original 18K lines.

3. I have tokens referencing other tokens.
   I've inlined most of them now, as suggested by others. But the size has
not reduced much.

So the question could be:
1. how to generate smaller lexer without removing semantic predicate?
2. If that's not possible, how to simulate "lexer state" without semantic
predicate?
3. Any other solution?

Thanks.

-- 
Regards,

Yang, Zhaohui


------------------------------

Message: 5
Date: Wed, 15 Aug 2012 19:14:03 +0200
From: Francis ANDRE <francis.andre.kampbell at orange.fr>
Subject: Re: [antlr-interest] problem about "the code for the static
	initializer is exceeding the 65535 bytes limit"
To: Zhaohui Yang <yezonghui at gmail.com>
Cc: antlr-interest at antlr.org
Message-ID: <502BD8DB.3010605 at orange.fr>
Content-Type: text/plain; charset=UTF-8; format=flowed

Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
> It's great someone is already trying a fix. I'd be glad to test your 
> fix when it's out.
>
> Would you please introduce a bit what kind of fix is that? Is it for 
> ANTLRWorks or ANTLR tool, is it a command line option for seperating 
> FOLLOW set or supressing that, or something else?
The 64K syndrone is a pure Java problem due to the constraint that the 
JVM does not support static initializer greater than 64K  -- shame on it 
--. Thus if you look to the generated lexer and parser, you will see 
certainly a lot of DFA classes, each of them having some static 
initializer values. The point is that the sum of the static initializer 
of all those DFAs is greater than 64K while the static initialization of 
each DFA is somewhat small or in most of case les than 64K. Thus, one 
solution is to extract all those DFAs classes and put them outside the 
lexer or the parser in fixed directories like the following pattern:

Let <grammar> the directory of the grammar to generate, then all the 
generated DFAs will go in

for the lexer's DFAs:    package <grammar>.lexer;
for the parser's DAFs: package <grammar>.parser;

and the reference of all those DFAs will be
in the lexer:                 import <grammar>.lexer.*;
in the parser                import <grammar>.parser.*;

But hold on, the fix has to be approved by Terr and I did not yet submit 
it. It need to pass all unit tests of the ANTLR3.4 and I am working on 
it... there is a real challenge getting the parser/lexer compiled for 
java code generated without a package...; and all those unit tests are 
producing java parser/lexer at the top level directory.
>
> 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr 
> <mailto:francis.andre.kampbell at orange.fr>>
>
>     Hi Zhaohui
>
>     I am currently working on fixing this issues with antlr3.4... Once
>     I will have a proper patch, would you be interested in testing it??
>
>     FA
>     Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
>
>         Hi,
>
>         Here we have a big grammar and the generated parser.java got a
>         compilation
>         : "the code for the static initializer is exceeding the 65535
>         bytes limit".
>
>         I've searched the net for a while and found that is a widely
>         known limit in
>         JVM or Javac compiler, and not yet has an option to change it
>         higher.
>
>         On the ANTLR side, I found 2 solutions proposed by others, but
>         neither of
>         them is totally satisfying:
>
>         1. Seperate the big grammar into 2 *.g files, import one from
>         the other.
>             Yes, this removes the compilation error with genereated
>         Java. But
>         ANTLRWorks does not support imported grammar well. E.g., I can not
>         interpret a rule in the imported grammar, it's simply not in
>         the rule list
>         for interpreting. And gunit always fail with rules defined in
>         imported
>         grammar.
>
>         2. Modify the generated Java source, seperate the
>         "FOLLOW_xxx_in_yyy"
>         constants into several static classes and change references to
>         them
>         accordingly.
>             This is proposed here -
>
http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html
>         .
>         The author of the post actually has a solution into ANTLR
>         source code (some
>         string template). But I can't find the attachment he referred
>         to. And
>         that's in 2009, I suspect the fix could be incompatible with
>         current ANTLR
>         version.
>             Without this fix we have to do the modificaiton manually
>         or write a
>         script for that. The script is not that easy.
>
>         And we found a 3rd solution by ourself, that also involve
>         changing the
>         generated Java:
>
>         3. Remove those FOLLOW_... constant completely, and replace
>         the references
>         with "null".
>             Surprisingly this works, just no error recovery after
>         this, not a
>         problem for us. But we really worry this is unsafe, since it's not
>         documented anywhere.
>
>         After all, we're looking for any other solution that is easier
>         to apply,
>         asumming we'll be constantly changing the grammar and
>         recompile the parser.
>
>           Maybe there is a way to get ANTLRWorks and gunit play well
>         with imported
>         grammar?
>         Maybe there is already a commandline option for antlr Tool,
>         that can
>         genereate FOLLOW_... constants in seperate classes?
>         Maybe there is already a commandline option for antlr Tool,
>         that can
>         supress FOLLOW_... constants code generation?
>
>
>
>
>
> -- 
> Regards,
>
> Yang, Zhaohui
>



------------------------------

Message: 6
Date: Wed, 15 Aug 2012 11:32:08 -0700
From: Jim Idle <jimi at temporal-wave.com>
Subject: Re: [antlr-interest] big lexer problem
To: antlr-interest at antlr.org
Message-ID: <d97497be4a0866591621e45230ff9041 at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

This really means that your lexer is too complicated and I suspect that
you are just trying to type in a grammar from a normative spec without
thinking ahead a little (not trying to insult you here). The specs are
usually designed to explain the language/syntax, not necessarily to be
copied straight in to a parser grammar.

You should really post your grammar files to get better help, but
generally you are trying to introduce context/state in to the lexer, which
is not necessary in all but a few cases. For instance, why do you care
about the token type in the lexer if the same pattern is used for two
token types? Take a token that matches a PIC pattern generally, then
verify that the pattern is a good PIC spec when you are walking the tree,
not in the lexer.

On top of this, if you are trying to drive the lexer state from the
parser, then it is very unlikely it will work anyway.

Try to take a step back, and reduce the number of tokens to a minimum,
remove any state that you can, move all the error checking and validation
as far away from the lexer as you can (at the lexer level you have a
minimum context, at the tree walk level you have much more information and
can issue much better errors/warnings).

Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
the grammar and spend time on left factoring the rules, that all/a lot of
your problems will go away. If you still have issues with generated code
size at that point, then you need to start importing grammars and
debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
trying to change the output of ANTLR. The only time I have had to use
imports is for a full TSQL grammar, which is huge because SQL is so
terrible. COBOL is pretty big, but nothing like SQL.


Jim






> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Zhaohui Yang
> Sent: Wednesday, August 15, 2012 8:18 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] big lexer problem
>
> Hi,
>
> I'm having big problem with big generated Lexer.java. Any help
> appreciated.
>
> The language is COBOL. And I found multiple reasons that the lexer
> get's too big:
>
> 1. I'm adding semantic predicate into the lexer, to simulate "lexer
> state"
> as in YACC and JavaCC. It's like
>
>        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
> matching things like AXX(9).99 after a 'PIC' key word
>
>    The lexer without semantic predicates is 18K lines.
>    When I add predicates to one or two of the lexer rules, it grows to
> more than 20K.
>    When I add a single more, it explodes to more than 60K and ANTLR
> give up generating lexer with error: code is too long.
>
> 2. COBOL has a LOT of key words, that may explain the original 18K
> lines.
>
> 3. I have tokens referencing other tokens.
>    I've inlined most of them now, as suggested by others. But the size
> has not reduced much.
>
> So the question could be:
> 1. how to generate smaller lexer without removing semantic predicate?
> 2. If that's not possible, how to simulate "lexer state" without
> semantic predicate?
> 3. Any other solution?
>
> Thanks.
>
> --
> Regards,
>
> Yang, Zhaohui
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address


------------------------------

Message: 7
Date: Wed, 15 Aug 2012 11:38:54 -0700
From: Jim Idle <jimi at temporal-wave.com>
Subject: Re: [antlr-interest] problem about "the code for the static
	initializer is exceeding the 65535 bytes limit"
Cc: antlr-interest at antlr.org
Message-ID: <925ce1df1c75295afe33be1ab5c7d9c9 at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

It does not need a fix. It is the grammar that needs to be improved. The
huge DFAs are indicative of your grammars being overly complicated or poorly
left factored. ANTLR might do better than it does in some cases, and v4 may
well get around a lot of similar issues, but in general, improve your
grammar files.

First, look at the generated DFA. What rule, or combination of rules is
generating this? Start there. Left factor. Simplify. Stop trying to do much
of anything in the lexer other than match the simplest common token set.
Stop trying to impose semantics in the parser ("you can only have at most
two of 'these' here" - push such things in the tree walk, or add semantic
checks (allow any number of 'these', count how many you got, then issue a
semantic error).

Writing good grammars is not easy. In some ways, because it is easy to just
type stuff in and give it a whirl, ANTLR can cause you to shoot yourself in
the foot!

Step back and consider your grammar files. Do you really want a grammar that
generates such huge decision tables? What is going wrong? It usually is not
ANTLR itself.


Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Francis ANDRE
> Sent: Wednesday, August 15, 2012 10:14 AM
> To: Zhaohui Yang
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] problem about "the code for the static
> initializer is exceeding the 65535 bytes limit"
>
> Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
> > It's great someone is already trying a fix. I'd be glad to test your
> > fix when it's out.
> >
> > Would you please introduce a bit what kind of fix is that? Is it for
> > ANTLRWorks or ANTLR tool, is it a command line option for seperating
> > FOLLOW set or supressing that, or something else?
> The 64K syndrone is a pure Java problem due to the constraint that the
> JVM does not support static initializer greater than 64K  -- shame on
> it --. Thus if you look to the generated lexer and parser, you will see
> certainly a lot of DFA classes, each of them having some static
> initializer values. The point is that the sum of the static initializer
> of all those DFAs is greater than 64K while the static initialization
> of each DFA is somewhat small or in most of case les than 64K. Thus,
> one solution is to extract all those DFAs classes and put them outside
> the lexer or the parser in fixed directories like the following
> pattern:
>
> Let <grammar> the directory of the grammar to generate, then all the
> generated DFAs will go in
>
> for the lexer's DFAs:    package <grammar>.lexer;
> for the parser's DAFs: package <grammar>.parser;
>
> and the reference of all those DFAs will be
> in the lexer:                 import <grammar>.lexer.*;
> in the parser                import <grammar>.parser.*;
>
> But hold on, the fix has to be approved by Terr and I did not yet
> submit it. It need to pass all unit tests of the ANTLR3.4 and I am
> working on it... there is a real challenge getting the parser/lexer
> compiled for java code generated without a package...; and all those
> unit tests are producing java parser/lexer at the top level directory.
> >
> > 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr
> > <mailto:francis.andre.kampbell at orange.fr>>
> >
> >     Hi Zhaohui
> >
> >     I am currently working on fixing this issues with antlr3.4...
> Once
> >     I will have a proper patch, would you be interested in testing
> it??
> >
> >     FA
> >     Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
> >
> >         Hi,
> >
> >         Here we have a big grammar and the generated parser.java got
> a
> >         compilation
> >         : "the code for the static initializer is exceeding the 65535
> >         bytes limit".
> >
> >         I've searched the net for a while and found that is a widely
> >         known limit in
> >         JVM or Javac compiler, and not yet has an option to change it
> >         higher.
> >
> >         On the ANTLR side, I found 2 solutions proposed by others,
> but
> >         neither of
> >         them is totally satisfying:
> >
> >         1. Seperate the big grammar into 2 *.g files, import one from
> >         the other.
> >             Yes, this removes the compilation error with genereated
> >         Java. But
> >         ANTLRWorks does not support imported grammar well. E.g., I
> can not
> >         interpret a rule in the imported grammar, it's simply not in
> >         the rule list
> >         for interpreting. And gunit always fail with rules defined in
> >         imported
> >         grammar.
> >
> >         2. Modify the generated Java source, seperate the
> >         "FOLLOW_xxx_in_yyy"
> >         constants into several static classes and change references
> to
> >         them
> >         accordingly.
> >             This is proposed here -
> >         http://www.antlr.org/pipermail/antlr-interest/2009-
> November/036608.html
> >         .
> >         The author of the post actually has a solution into ANTLR
> >         source code (some
> >         string template). But I can't find the attachment he referred
> >         to. And
> >         that's in 2009, I suspect the fix could be incompatible with
> >         current ANTLR
> >         version.
> >             Without this fix we have to do the modificaiton manually
> >         or write a
> >         script for that. The script is not that easy.
> >
> >         And we found a 3rd solution by ourself, that also involve
> >         changing the
> >         generated Java:
> >
> >         3. Remove those FOLLOW_... constant completely, and replace
> >         the references
> >         with "null".
> >             Surprisingly this works, just no error recovery after
> >         this, not a
> >         problem for us. But we really worry this is unsafe, since
> it's not
> >         documented anywhere.
> >
> >         After all, we're looking for any other solution that is
> easier
> >         to apply,
> >         asumming we'll be constantly changing the grammar and
> >         recompile the parser.
> >
> >           Maybe there is a way to get ANTLRWorks and gunit play well
> >         with imported
> >         grammar?
> >         Maybe there is already a commandline option for antlr Tool,
> >         that can
> >         genereate FOLLOW_... constants in seperate classes?
> >         Maybe there is already a commandline option for antlr Tool,
> >         that can
> >         supress FOLLOW_... constants code generation?
> >
> >
> >
> >
> >
> > --
> > Regards,
> >
> > Yang, Zhaohui
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address


------------------------------

_______________________________________________
antlr-interest mailing list
antlr-interest at antlr.org
http://www.antlr.org/mailman/listinfo/antlr-interest

End of antlr-interest Digest, Vol 93, Issue 15
**********************************************


From jimi at temporal-wave.com  Wed Aug 15 20:25:19 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 20:25:19 -0700
Subject: [antlr-interest] problem about "the code for the static
	initializer is exceeding the 65535 bytes limit"
In-Reply-To: <CAAfeETrZ4TrFD-adT=Ex-GtD1QO2uGzdq3m8RCd6V2+OVpptMA@mail.gmail.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<CAO51=GRiDORAhBoVfFs=kEamH5Xh5SfxbbUEw7RnnLkBgVLEDA@mail.gmail.com>
	<CAAfeETrZ4TrFD-adT=Ex-GtD1QO2uGzdq3m8RCd6V2+OVpptMA@mail.gmail.com>
Message-ID: <B8079114-D382-4462-B8C8-07CC37E65D7A@temporal-wave.com>

Thanks Kyle. 

BTW guys, you might not want to publish your grammars to the world, but       If you want to send them to me privately I will give you a few pointers for free. I have even been known to accept paid gigs, though that does not seem to have happened for a while in this economy ;$

Jim

On Aug 15, 2012, at 6:04 PM, Kyle Ferrio <kferrio at gmail.com> wrote:

> Hi Zhaohui,
> 
> You already know that you've discovered a theme which evokes some passion
> in the ANTLR community.
> 
> There is a *lot* of wisdom in Jim Idles's suggestions.  Each one could be a
> whole lecture.  If you take a class in compiler construction (or go back to
> your notes, if you already had the class) you will see this up close.
> 
> My version is "preserve information; defer decisions as long as possible;
> and make every decision as simple as possible."  If you do these things,
> your language will be easy to maintain and extend.  And if you have users
> for any length of time, these characteristics are probably high on your
> list.  Hopefully you were not given a pathelogical language spec.
> 
> Good luck!
> On Aug 15, 2012 5:43 PM, "Zhaohui Yang" <yezonghui at gmail.com> wrote:
> 
>> sounds promising :)
>> 
>> We have written a program to separate those constants into several inner
>> classes, solves for now.
>> 
>> Yours is definitely better:)
>> ? 2012-8-16 ??1:13?"Francis ANDRE" <francis.andre.kampbell at orange.fr>???
>> 
>>> Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
>>> 
>>> It's great someone is already trying a fix. I'd be glad to test your fix
>>> when it's out.
>>> 
>>> Would you please introduce a bit what kind of fix is that? Is it for
>>> ANTLRWorks or ANTLR tool, is it a command line option for seperating
>> FOLLOW
>>> set or supressing that, or something else?
>>> 
>>> The 64K syndrone is a pure Java problem due to the constraint that the
>> JVM
>>> does not support static initializer greater than 64K  -- shame on it --.
>>> Thus if you look to the generated lexer and parser, you will see
>> certainly
>>> a lot of DFA classes, each of them having some static initializer values.
>>> The point is that the sum of the static initializer of all those DFAs is
>>> greater than 64K while the static initialization of each DFA is somewhat
>>> small or in most of case les than 64K. Thus, one solution is to extract
>> all
>>> those DFAs classes and put them outside the lexer or the parser in fixed
>>> directories like the following pattern:
>>> 
>>> Let <grammar> the directory of the grammar to generate, then all the
>>> generated DFAs will go in
>>> 
>>> for the lexer's DFAs:    package <grammar>.lexer;
>>> for the parser's DAFs: package <grammar>.parser;
>>> 
>>> and the reference of all those DFAs will be
>>> in the lexer:                 import <grammar>.lexer.*;
>>> in the parser                import <grammar>.parser.*;
>>> 
>>> But hold on, the fix has to be approved by Terr and I did not yet submit
>>> it. It need to pass all unit tests of the ANTLR3.4 and I am working on
>>> it... there is a real challenge getting the parser/lexer compiled for
>> java
>>> code generated without a package...; and all those unit tests are
>> producing
>>> java parser/lexer at the top level directory.
>>> 
>>> 
>>> 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr>
>>> 
>>>> Hi Zhaohui
>>>> 
>>>> I am currently working on fixing this issues with antlr3.4... Once I
>> will
>>>> have a proper patch, would you be interested in testing it??
>>>> 
>>>> FA
>>>> Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
>>>> 
>>>> Hi,
>>>>> 
>>>>> Here we have a big grammar and the generated parser.java got a
>>>>> compilation
>>>>> : "the code for the static initializer is exceeding the 65535 bytes
>>>>> limit".
>>>>> 
>>>>> I've searched the net for a while and found that is a widely known
>> limit
>>>>> in
>>>>> JVM or Javac compiler, and not yet has an option to change it higher.
>>>>> 
>>>>> On the ANTLR side, I found 2 solutions proposed by others, but neither
>> of
>>>>> them is totally satisfying:
>>>>> 
>>>>> 1. Seperate the big grammar into 2 *.g files, import one from the
>> other.
>>>>>    Yes, this removes the compilation error with genereated Java. But
>>>>> ANTLRWorks does not support imported grammar well. E.g., I can not
>>>>> interpret a rule in the imported grammar, it's simply not in the rule
>>>>> list
>>>>> for interpreting. And gunit always fail with rules defined in imported
>>>>> grammar.
>>>>> 
>>>>> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
>>>>> constants into several static classes and change references to them
>>>>> accordingly.
>>>>>    This is proposed here -
>> http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html.
>>>>> The author of the post actually has a solution into ANTLR source code
>>>>> (some
>>>>> string template). But I can't find the attachment he referred to. And
>>>>> that's in 2009, I suspect the fix could be incompatible with current
>>>>> ANTLR
>>>>> version.
>>>>>    Without this fix we have to do the modificaiton manually or write a
>>>>> script for that. The script is not that easy.
>>>>> 
>>>>> And we found a 3rd solution by ourself, that also involve changing the
>>>>> generated Java:
>>>>> 
>>>>> 3. Remove those FOLLOW_... constant completely, and replace the
>>>>> references
>>>>> with "null".
>>>>>    Surprisingly this works, just no error recovery after this, not a
>>>>> problem for us. But we really worry this is unsafe, since it's not
>>>>> documented anywhere.
>>>>> 
>>>>> After all, we're looking for any other solution that is easier to
>> apply,
>>>>> asumming we'll be constantly changing the grammar and recompile the
>>>>> parser.
>>>>> 
>>>>>  Maybe there is a way to get ANTLRWorks and gunit play well with
>>>>> imported
>>>>> grammar?
>>>>> Maybe there is already a commandline option for antlr Tool, that can
>>>>> genereate FOLLOW_... constants in seperate classes?
>>>>> Maybe there is already a commandline option for antlr Tool, that can
>>>>> supress FOLLOW_... constants code generation?
>>> 
>>> 
>>> --
>>> Regards,
>>> 
>>> Yang, Zhaohui
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From yezonghui at gmail.com  Wed Aug 15 20:40:53 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Thu, 16 Aug 2012 11:40:53 +0800
Subject: [antlr-interest] big lexer problem
In-Reply-To: <d97497be4a0866591621e45230ff9041@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>
Message-ID: <CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>

I admit that my grammar was not well designed in the first place. And I'm
working on it.

However, lexer state is not that evil a thing anyway. At least it simplify
things conceptually. As for this example of PICTURE string, if I use a
parser rule pic_string to capture that, I'll have to imagine all kinds of
tokens/parser rules that may combine into a pic_string. For example,
"$AX(9).99" would be a "$", an array(index) expression, and a decimal
number starting with dot. This could be frustrating enough.

Well, I'm still trying to modify the lexer so that the pic_string could be
combination of simple tokens. One question is how do I ensure these tokens
does not have spaces between them?

Back to lexer state thing. I found that ANTLR 2.7 has a TokenStreamSelector
for exactly this purpose. And it can result in smaller lexer classes since
each lexer cares for its own DFA, not poluting each other.

I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(

2012/8/16 Jim Idle <jimi at temporal-wave.com>

> This really means that your lexer is too complicated and I suspect that
> you are just trying to type in a grammar from a normative spec without
> thinking ahead a little (not trying to insult you here). The specs are
> usually designed to explain the language/syntax, not necessarily to be
> copied straight in to a parser grammar.
>
> You should really post your grammar files to get better help, but
> generally you are trying to introduce context/state in to the lexer, which
> is not necessary in all but a few cases. For instance, why do you care
> about the token type in the lexer if the same pattern is used for two
> token types? Take a token that matches a PIC pattern generally, then
> verify that the pattern is a good PIC spec when you are walking the tree,
> not in the lexer.
>
> On top of this, if you are trying to drive the lexer state from the
> parser, then it is very unlikely it will work anyway.
>
> Try to take a step back, and reduce the number of tokens to a minimum,
> remove any state that you can, move all the error checking and validation
> as far away from the lexer as you can (at the lexer level you have a
> minimum context, at the tree walk level you have much more information and
> can issue much better errors/warnings).
>
> Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
> the grammar and spend time on left factoring the rules, that all/a lot of
> your problems will go away. If you still have issues with generated code
> size at that point, then you need to start importing grammars and
> debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
> trying to change the output of ANTLR. The only time I have had to use
> imports is for a full TSQL grammar, which is huge because SQL is so
> terrible. COBOL is pretty big, but nothing like SQL.
>
>
> Jim
>
>
>
>
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Zhaohui Yang
> > Sent: Wednesday, August 15, 2012 8:18 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] big lexer problem
> >
>  > Hi,
> >
> > I'm having big problem with big generated Lexer.java. Any help
> > appreciated.
> >
> > The language is COBOL. And I found multiple reasons that the lexer
> > get's too big:
> >
> > 1. I'm adding semantic predicate into the lexer, to simulate "lexer
> > state"
> > as in YACC and JavaCC. It's like
> >
> >        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
> > matching things like AXX(9).99 after a 'PIC' key word
> >
> >    The lexer without semantic predicates is 18K lines.
> >    When I add predicates to one or two of the lexer rules, it grows to
> > more than 20K.
> >    When I add a single more, it explodes to more than 60K and ANTLR
> > give up generating lexer with error: code is too long.
> >
> > 2. COBOL has a LOT of key words, that may explain the original 18K
> > lines.
> >
> > 3. I have tokens referencing other tokens.
> >    I've inlined most of them now, as suggested by others. But the size
> > has not reduced much.
> >
> > So the question could be:
> > 1. how to generate smaller lexer without removing semantic predicate?
> > 2. If that's not possible, how to simulate "lexer state" without
> > semantic predicate?
> > 3. Any other solution?
> >
> > Thanks.
> >
> > --
> > Regards,
> >
> > Yang, Zhaohui
> >
>  > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Regards,

Yang, Zhaohui

From yezonghui at gmail.com  Wed Aug 15 20:43:26 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Thu, 16 Aug 2012 11:43:26 +0800
Subject: [antlr-interest] big lexer problem
In-Reply-To: <CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>
	<CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
Message-ID: <CAO51=GTyciTPkubBNZjj=MfWvgbVT0WyxGRg-H30uoRx1xtu_w@mail.gmail.com>

And I'm sorry I can't provide the grammar source for the moment. I'm
waiting for permission from my company.

2012/8/16 Zhaohui Yang <yezonghui at gmail.com>

> I admit that my grammar was not well designed in the first place. And I'm
> working on it.
>
> However, lexer state is not that evil a thing anyway. At least it simplify
> things conceptually. As for this example of PICTURE string, if I use a
> parser rule pic_string to capture that, I'll have to imagine all kinds of
> tokens/parser rules that may combine into a pic_string. For example,
> "$AX(9).99" would be a "$", an array(index) expression, and a decimal
> number starting with dot. This could be frustrating enough.
>
> Well, I'm still trying to modify the lexer so that the pic_string could be
> combination of simple tokens. One question is how do I ensure these tokens
> does not have spaces between them?
>
> Back to lexer state thing. I found that ANTLR 2.7 has a
> TokenStreamSelector for exactly this purpose. And it can result in smaller
> lexer classes since each lexer cares for its own DFA, not poluting each
> other.
>
> I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(
>
>  2012/8/16 Jim Idle <jimi at temporal-wave.com>
>
>> This really means that your lexer is too complicated and I suspect that
>> you are just trying to type in a grammar from a normative spec without
>> thinking ahead a little (not trying to insult you here). The specs are
>> usually designed to explain the language/syntax, not necessarily to be
>> copied straight in to a parser grammar.
>>
>> You should really post your grammar files to get better help, but
>> generally you are trying to introduce context/state in to the lexer, which
>> is not necessary in all but a few cases. For instance, why do you care
>> about the token type in the lexer if the same pattern is used for two
>> token types? Take a token that matches a PIC pattern generally, then
>> verify that the pattern is a good PIC spec when you are walking the tree,
>> not in the lexer.
>>
>> On top of this, if you are trying to drive the lexer state from the
>> parser, then it is very unlikely it will work anyway.
>>
>> Try to take a step back, and reduce the number of tokens to a minimum,
>> remove any state that you can, move all the error checking and validation
>> as far away from the lexer as you can (at the lexer level you have a
>> minimum context, at the tree walk level you have much more information and
>> can issue much better errors/warnings).
>>
>> Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
>> the grammar and spend time on left factoring the rules, that all/a lot of
>> your problems will go away. If you still have issues with generated code
>> size at that point, then you need to start importing grammars and
>> debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
>> trying to change the output of ANTLR. The only time I have had to use
>> imports is for a full TSQL grammar, which is huge because SQL is so
>> terrible. COBOL is pretty big, but nothing like SQL.
>>
>>
>> Jim
>>
>>
>>
>>
>>
>>
>> > -----Original Message-----
>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > bounces at antlr.org] On Behalf Of Zhaohui Yang
>> > Sent: Wednesday, August 15, 2012 8:18 AM
>> > To: antlr-interest at antlr.org
>> > Subject: [antlr-interest] big lexer problem
>> >
>>  > Hi,
>> >
>> > I'm having big problem with big generated Lexer.java. Any help
>> > appreciated.
>> >
>> > The language is COBOL. And I found multiple reasons that the lexer
>> > get's too big:
>> >
>> > 1. I'm adding semantic predicate into the lexer, to simulate "lexer
>> > state"
>> > as in YACC and JavaCC. It's like
>> >
>> >        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
>> > matching things like AXX(9).99 after a 'PIC' key word
>> >
>> >    The lexer without semantic predicates is 18K lines.
>> >    When I add predicates to one or two of the lexer rules, it grows to
>> > more than 20K.
>> >    When I add a single more, it explodes to more than 60K and ANTLR
>> > give up generating lexer with error: code is too long.
>> >
>> > 2. COBOL has a LOT of key words, that may explain the original 18K
>> > lines.
>> >
>> > 3. I have tokens referencing other tokens.
>> >    I've inlined most of them now, as suggested by others. But the size
>> > has not reduced much.
>> >
>> > So the question could be:
>> > 1. how to generate smaller lexer without removing semantic predicate?
>> > 2. If that's not possible, how to simulate "lexer state" without
>> > semantic predicate?
>> > 3. Any other solution?
>> >
>> > Thanks.
>> >
>> > --
>> > Regards,
>> >
>> > Yang, Zhaohui
>> >
>>  > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> > email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
> --
> Regards,
>
> Yang, Zhaohui
>
>


-- 
Regards,

Yang, Zhaohui

From yezonghui at gmail.com  Wed Aug 15 20:47:22 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Thu, 16 Aug 2012 11:47:22 +0800
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <B8079114-D382-4462-B8C8-07CC37E65D7A@temporal-wave.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<CAO51=GRiDORAhBoVfFs=kEamH5Xh5SfxbbUEw7RnnLkBgVLEDA@mail.gmail.com>
	<CAAfeETrZ4TrFD-adT=Ex-GtD1QO2uGzdq3m8RCd6V2+OVpptMA@mail.gmail.com>
	<B8079114-D382-4462-B8C8-07CC37E65D7A@temporal-wave.com>
Message-ID: <CAO51=GQevf-b88AwfNiGs=MjuXpt6egqaKipCr6Nuz3a8_Dx8w@mail.gmail.com>

Thank you all for the advices. I'll learn more on grammar design and
improve the grammar it self.

Currently I'm applying for the permission from my company to be able to
send out the grammar.

2012/8/16 Jim Idle <jimi at temporal-wave.com>

> Thanks Kyle.
>
> BTW guys, you might not want to publish your grammars to the world, but
>     If you want to send them to me privately I will give you a few pointers
> for free. I have even been known to accept paid gigs, though that does not
> seem to have happened for a while in this economy ;$
>
> Jim
>
> On Aug 15, 2012, at 6:04 PM, Kyle Ferrio <kferrio at gmail.com> wrote:
>
> > Hi Zhaohui,
> >
> > You already know that you've discovered a theme which evokes some passion
> > in the ANTLR community.
> >
> > There is a *lot* of wisdom in Jim Idles's suggestions.  Each one could
> be a
> > whole lecture.  If you take a class in compiler construction (or go back
> to
> > your notes, if you already had the class) you will see this up close.
> >
> > My version is "preserve information; defer decisions as long as possible;
> > and make every decision as simple as possible."  If you do these things,
> > your language will be easy to maintain and extend.  And if you have users
> > for any length of time, these characteristics are probably high on your
> > list.  Hopefully you were not given a pathelogical language spec.
> >
> > Good luck!
> > On Aug 15, 2012 5:43 PM, "Zhaohui Yang" <yezonghui at gmail.com> wrote:
> >
> >> sounds promising :)
> >>
> >> We have written a program to separate those constants into several inner
> >> classes, solves for now.
> >>
> >> Yours is definitely better:)
> >> ? 2012-8-16 ??1:13?"Francis ANDRE" <francis.andre.kampbell at orange.fr
> >???
> >>
> >>> Le 15/08/2012 16:17, Zhaohui Yang a ?crit :
> >>>
> >>> It's great someone is already trying a fix. I'd be glad to test your
> fix
> >>> when it's out.
> >>>
> >>> Would you please introduce a bit what kind of fix is that? Is it for
> >>> ANTLRWorks or ANTLR tool, is it a command line option for seperating
> >> FOLLOW
> >>> set or supressing that, or something else?
> >>>
> >>> The 64K syndrone is a pure Java problem due to the constraint that the
> >> JVM
> >>> does not support static initializer greater than 64K  -- shame on it
> --.
> >>> Thus if you look to the generated lexer and parser, you will see
> >> certainly
> >>> a lot of DFA classes, each of them having some static initializer
> values.
> >>> The point is that the sum of the static initializer of all those DFAs
> is
> >>> greater than 64K while the static initialization of each DFA is
> somewhat
> >>> small or in most of case les than 64K. Thus, one solution is to extract
> >> all
> >>> those DFAs classes and put them outside the lexer or the parser in
> fixed
> >>> directories like the following pattern:
> >>>
> >>> Let <grammar> the directory of the grammar to generate, then all the
> >>> generated DFAs will go in
> >>>
> >>> for the lexer's DFAs:    package <grammar>.lexer;
> >>> for the parser's DAFs: package <grammar>.parser;
> >>>
> >>> and the reference of all those DFAs will be
> >>> in the lexer:                 import <grammar>.lexer.*;
> >>> in the parser                import <grammar>.parser.*;
> >>>
> >>> But hold on, the fix has to be approved by Terr and I did not yet
> submit
> >>> it. It need to pass all unit tests of the ANTLR3.4 and I am working on
> >>> it... there is a real challenge getting the parser/lexer compiled for
> >> java
> >>> code generated without a package...; and all those unit tests are
> >> producing
> >>> java parser/lexer at the top level directory.
> >>>
> >>>
> >>> 2012/8/15 Francis ANDRE <francis.andre.kampbell at orange.fr>
> >>>
> >>>> Hi Zhaohui
> >>>>
> >>>> I am currently working on fixing this issues with antlr3.4... Once I
> >> will
> >>>> have a proper patch, would you be interested in testing it??
> >>>>
> >>>> FA
> >>>> Le 14/08/2012 18:05, Zhaohui Yang a ?crit :
> >>>>
> >>>> Hi,
> >>>>>
> >>>>> Here we have a big grammar and the generated parser.java got a
> >>>>> compilation
> >>>>> : "the code for the static initializer is exceeding the 65535 bytes
> >>>>> limit".
> >>>>>
> >>>>> I've searched the net for a while and found that is a widely known
> >> limit
> >>>>> in
> >>>>> JVM or Javac compiler, and not yet has an option to change it higher.
> >>>>>
> >>>>> On the ANTLR side, I found 2 solutions proposed by others, but
> neither
> >> of
> >>>>> them is totally satisfying:
> >>>>>
> >>>>> 1. Seperate the big grammar into 2 *.g files, import one from the
> >> other.
> >>>>>    Yes, this removes the compilation error with genereated Java. But
> >>>>> ANTLRWorks does not support imported grammar well. E.g., I can not
> >>>>> interpret a rule in the imported grammar, it's simply not in the rule
> >>>>> list
> >>>>> for interpreting. And gunit always fail with rules defined in
> imported
> >>>>> grammar.
> >>>>>
> >>>>> 2. Modify the generated Java source, seperate the "FOLLOW_xxx_in_yyy"
> >>>>> constants into several static classes and change references to them
> >>>>> accordingly.
> >>>>>    This is proposed here -
> >> http://www.antlr.org/pipermail/antlr-interest/2009-November/036608.html
> .
> >>>>> The author of the post actually has a solution into ANTLR source code
> >>>>> (some
> >>>>> string template). But I can't find the attachment he referred to. And
> >>>>> that's in 2009, I suspect the fix could be incompatible with current
> >>>>> ANTLR
> >>>>> version.
> >>>>>    Without this fix we have to do the modificaiton manually or write
> a
> >>>>> script for that. The script is not that easy.
> >>>>>
> >>>>> And we found a 3rd solution by ourself, that also involve changing
> the
> >>>>> generated Java:
> >>>>>
> >>>>> 3. Remove those FOLLOW_... constant completely, and replace the
> >>>>> references
> >>>>> with "null".
> >>>>>    Surprisingly this works, just no error recovery after this, not a
> >>>>> problem for us. But we really worry this is unsafe, since it's not
> >>>>> documented anywhere.
> >>>>>
> >>>>> After all, we're looking for any other solution that is easier to
> >> apply,
> >>>>> asumming we'll be constantly changing the grammar and recompile the
> >>>>> parser.
> >>>>>
> >>>>>  Maybe there is a way to get ANTLRWorks and gunit play well with
> >>>>> imported
> >>>>> grammar?
> >>>>> Maybe there is already a commandline option for antlr Tool, that can
> >>>>> genereate FOLLOW_... constants in seperate classes?
> >>>>> Maybe there is already a commandline option for antlr Tool, that can
> >>>>> supress FOLLOW_... constants code generation?
> >>>
> >>>
> >>> --
> >>> Regards,
> >>>
> >>> Yang, Zhaohui
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Regards,

Yang, Zhaohui

From jimi at temporal-wave.com  Wed Aug 15 20:52:46 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 20:52:46 -0700
Subject: [antlr-interest] big lexer problem
In-Reply-To: <CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>
	<CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
Message-ID: <B908B5EF-B204-43AE-A82A-447A80D66A1B@temporal-wave.com>

You can use embedded lexers/parsers if you like. I have done that a bunch of times for similar issues. 

However you are over complicating the pic thing I think. Just read all the tokens and concat the contents till you hit a white space. Then verify the pic afterwards. Your error messages will be loved by your users. 

Jim 





On Aug 15, 2012, at 8:40 PM, Zhaohui Yang <yezonghui at gmail.com> wrote:

> I admit that my grammar was not well designed in the first place. And I'm working on it.
>  
> However, lexer state is not that evil a thing anyway. At least it simplify things conceptually. As for this example of PICTURE string, if I use a parser rule pic_string to capture that, I'll have to imagine all kinds of tokens/parser rules that may combine into a pic_string. For example, "$AX(9).99" would be a "$", an array(index) expression, and a decimal number starting with dot. This could be frustrating enough.
>  
> Well, I'm still trying to modify the lexer so that the pic_string could be combination of simple tokens. One question is how do I ensure these tokens does not have spaces between them?
>  
> Back to lexer state thing. I found that ANTLR 2.7 has a TokenStreamSelector for exactly this purpose. And it can result in smaller lexer classes since each lexer cares for its own DFA, not poluting each other.
>  
> I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(   
> 
> 2012/8/16 Jim Idle <jimi at temporal-wave.com>
>> This really means that your lexer is too complicated and I suspect that
>> you are just trying to type in a grammar from a normative spec without
>> thinking ahead a little (not trying to insult you here). The specs are
>> usually designed to explain the language/syntax, not necessarily to be
>> copied straight in to a parser grammar.
>> 
>> You should really post your grammar files to get better help, but
>> generally you are trying to introduce context/state in to the lexer, which
>> is not necessary in all but a few cases. For instance, why do you care
>> about the token type in the lexer if the same pattern is used for two
>> token types? Take a token that matches a PIC pattern generally, then
>> verify that the pattern is a good PIC spec when you are walking the tree,
>> not in the lexer.
>> 
>> On top of this, if you are trying to drive the lexer state from the
>> parser, then it is very unlikely it will work anyway.
>> 
>> Try to take a step back, and reduce the number of tokens to a minimum,
>> remove any state that you can, move all the error checking and validation
>> as far away from the lexer as you can (at the lexer level you have a
>> minimum context, at the tree walk level you have much more information and
>> can issue much better errors/warnings).
>> 
>> Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
>> the grammar and spend time on left factoring the rules, that all/a lot of
>> your problems will go away. If you still have issues with generated code
>> size at that point, then you need to start importing grammars and
>> debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
>> trying to change the output of ANTLR. The only time I have had to use
>> imports is for a full TSQL grammar, which is huge because SQL is so
>> terrible. COBOL is pretty big, but nothing like SQL.
>> 
>> 
>> Jim
>> 
>> 
>> 
>> 
>> 
>> 
>> > -----Original Message-----
>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > bounces at antlr.org] On Behalf Of Zhaohui Yang
>> > Sent: Wednesday, August 15, 2012 8:18 AM
>> > To: antlr-interest at antlr.org
>> > Subject: [antlr-interest] big lexer problem
>> >
>> > Hi,
>> >
>> > I'm having big problem with big generated Lexer.java. Any help
>> > appreciated.
>> >
>> > The language is COBOL. And I found multiple reasons that the lexer
>> > get's too big:
>> >
>> > 1. I'm adding semantic predicate into the lexer, to simulate "lexer
>> > state"
>> > as in YACC and JavaCC. It's like
>> >
>> >        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
>> > matching things like AXX(9).99 after a 'PIC' key word
>> >
>> >    The lexer without semantic predicates is 18K lines.
>> >    When I add predicates to one or two of the lexer rules, it grows to
>> > more than 20K.
>> >    When I add a single more, it explodes to more than 60K and ANTLR
>> > give up generating lexer with error: code is too long.
>> >
>> > 2. COBOL has a LOT of key words, that may explain the original 18K
>> > lines.
>> >
>> > 3. I have tokens referencing other tokens.
>> >    I've inlined most of them now, as suggested by others. But the size
>> > has not reduced much.
>> >
>> > So the question could be:
>> > 1. how to generate smaller lexer without removing semantic predicate?
>> > 2. If that's not possible, how to simulate "lexer state" without
>> > semantic predicate?
>> > 3. Any other solution?
>> >
>> > Thanks.
>> >
>> > --
>> > Regards,
>> >
>> > Yang, Zhaohui
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> > email-address
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> -- 
> Regards,
> 
> Yang, Zhaohui
> 

From jimi at temporal-wave.com  Wed Aug 15 20:52:46 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 20:52:46 -0700
Subject: [antlr-interest] big lexer problem
In-Reply-To: <CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>
	<CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
Message-ID: <B908B5EF-B204-43AE-A82A-447A80D66A1B@temporal-wave.com>

You can use embedded lexers/parsers if you like. I have done that a bunch of times for similar issues. 

However you are over complicating the pic thing I think. Just read all the tokens and concat the contents till you hit a white space. Then verify the pic afterwards. Your error messages will be loved by your users. 

Jim 





On Aug 15, 2012, at 8:40 PM, Zhaohui Yang <yezonghui at gmail.com> wrote:

> I admit that my grammar was not well designed in the first place. And I'm working on it.
>  
> However, lexer state is not that evil a thing anyway. At least it simplify things conceptually. As for this example of PICTURE string, if I use a parser rule pic_string to capture that, I'll have to imagine all kinds of tokens/parser rules that may combine into a pic_string. For example, "$AX(9).99" would be a "$", an array(index) expression, and a decimal number starting with dot. This could be frustrating enough.
>  
> Well, I'm still trying to modify the lexer so that the pic_string could be combination of simple tokens. One question is how do I ensure these tokens does not have spaces between them?
>  
> Back to lexer state thing. I found that ANTLR 2.7 has a TokenStreamSelector for exactly this purpose. And it can result in smaller lexer classes since each lexer cares for its own DFA, not poluting each other.
>  
> I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(   
> 
> 2012/8/16 Jim Idle <jimi at temporal-wave.com>
>> This really means that your lexer is too complicated and I suspect that
>> you are just trying to type in a grammar from a normative spec without
>> thinking ahead a little (not trying to insult you here). The specs are
>> usually designed to explain the language/syntax, not necessarily to be
>> copied straight in to a parser grammar.
>> 
>> You should really post your grammar files to get better help, but
>> generally you are trying to introduce context/state in to the lexer, which
>> is not necessary in all but a few cases. For instance, why do you care
>> about the token type in the lexer if the same pattern is used for two
>> token types? Take a token that matches a PIC pattern generally, then
>> verify that the pattern is a good PIC spec when you are walking the tree,
>> not in the lexer.
>> 
>> On top of this, if you are trying to drive the lexer state from the
>> parser, then it is very unlikely it will work anyway.
>> 
>> Try to take a step back, and reduce the number of tokens to a minimum,
>> remove any state that you can, move all the error checking and validation
>> as far away from the lexer as you can (at the lexer level you have a
>> minimum context, at the tree walk level you have much more information and
>> can issue much better errors/warnings).
>> 
>> Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
>> the grammar and spend time on left factoring the rules, that all/a lot of
>> your problems will go away. If you still have issues with generated code
>> size at that point, then you need to start importing grammars and
>> debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
>> trying to change the output of ANTLR. The only time I have had to use
>> imports is for a full TSQL grammar, which is huge because SQL is so
>> terrible. COBOL is pretty big, but nothing like SQL.
>> 
>> 
>> Jim
>> 
>> 
>> 
>> 
>> 
>> 
>> > -----Original Message-----
>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > bounces at antlr.org] On Behalf Of Zhaohui Yang
>> > Sent: Wednesday, August 15, 2012 8:18 AM
>> > To: antlr-interest at antlr.org
>> > Subject: [antlr-interest] big lexer problem
>> >
>> > Hi,
>> >
>> > I'm having big problem with big generated Lexer.java. Any help
>> > appreciated.
>> >
>> > The language is COBOL. And I found multiple reasons that the lexer
>> > get's too big:
>> >
>> > 1. I'm adding semantic predicate into the lexer, to simulate "lexer
>> > state"
>> > as in YACC and JavaCC. It's like
>> >
>> >        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
>> > matching things like AXX(9).99 after a 'PIC' key word
>> >
>> >    The lexer without semantic predicates is 18K lines.
>> >    When I add predicates to one or two of the lexer rules, it grows to
>> > more than 20K.
>> >    When I add a single more, it explodes to more than 60K and ANTLR
>> > give up generating lexer with error: code is too long.
>> >
>> > 2. COBOL has a LOT of key words, that may explain the original 18K
>> > lines.
>> >
>> > 3. I have tokens referencing other tokens.
>> >    I've inlined most of them now, as suggested by others. But the size
>> > has not reduced much.
>> >
>> > So the question could be:
>> > 1. how to generate smaller lexer without removing semantic predicate?
>> > 2. If that's not possible, how to simulate "lexer state" without
>> > semantic predicate?
>> > 3. Any other solution?
>> >
>> > Thanks.
>> >
>> > --
>> > Regards,
>> >
>> > Yang, Zhaohui
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> > email-address
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> -- 
> Regards,
> 
> Yang, Zhaohui
> 

From jimi at temporal-wave.com  Wed Aug 15 20:56:14 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 15 Aug 2012 20:56:14 -0700
Subject: [antlr-interest] big lexer problem
In-Reply-To: <CAO51=GTyciTPkubBNZjj=MfWvgbVT0WyxGRg-H30uoRx1xtu_w@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>
	<CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
	<CAO51=GTyciTPkubBNZjj=MfWvgbVT0WyxGRg-H30uoRx1xtu_w@mail.gmail.com>
Message-ID: <0C2F577C-035C-4A34-BC7C-75E9096C663C@temporal-wave.com>

That's ok, commercial projects must be careful. As much as anything, such grammars may generate some ideas for v4. 

Jim

On Aug 15, 2012, at 8:43 PM, Zhaohui Yang <yezonghui at gmail.com> wrote:

> And I'm sorry I can't provide the grammar source for the moment. I'm waiting for permission from my company.
> 
> 2012/8/16 Zhaohui Yang <yezonghui at gmail.com>
>> I admit that my grammar was not well designed in the first place. And I'm working on it.
>>  
>> However, lexer state is not that evil a thing anyway. At least it simplify things conceptually. As for this example of PICTURE string, if I use a parser rule pic_string to capture that, I'll have to imagine all kinds of tokens/parser rules that may combine into a pic_string. For example, "$AX(9).99" would be a "$", an array(index) expression, and a decimal number starting with dot. This could be frustrating enough.
>>  
>> Well, I'm still trying to modify the lexer so that the pic_string could be combination of simple tokens. One question is how do I ensure these tokens does not have spaces between them?
>>  
>> Back to lexer state thing. I found that ANTLR 2.7 has a TokenStreamSelector for exactly this purpose. And it can result in smaller lexer classes since each lexer cares for its own DFA, not poluting each other.
>>  
>> I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(   
>> 
>> 2012/8/16 Jim Idle <jimi at temporal-wave.com>
>>> This really means that your lexer is too complicated and I suspect that
>>> you are just trying to type in a grammar from a normative spec without
>>> thinking ahead a little (not trying to insult you here). The specs are
>>> usually designed to explain the language/syntax, not necessarily to be
>>> copied straight in to a parser grammar.
>>> 
>>> You should really post your grammar files to get better help, but
>>> generally you are trying to introduce context/state in to the lexer, which
>>> is not necessary in all but a few cases. For instance, why do you care
>>> about the token type in the lexer if the same pattern is used for two
>>> token types? Take a token that matches a PIC pattern generally, then
>>> verify that the pattern is a good PIC spec when you are walking the tree,
>>> not in the lexer.
>>> 
>>> On top of this, if you are trying to drive the lexer state from the
>>> parser, then it is very unlikely it will work anyway.
>>> 
>>> Try to take a step back, and reduce the number of tokens to a minimum,
>>> remove any state that you can, move all the error checking and validation
>>> as far away from the lexer as you can (at the lexer level you have a
>>> minimum context, at the tree walk level you have much more information and
>>> can issue much better errors/warnings).
>>> 
>>> Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
>>> the grammar and spend time on left factoring the rules, that all/a lot of
>>> your problems will go away. If you still have issues with generated code
>>> size at that point, then you need to start importing grammars and
>>> debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
>>> trying to change the output of ANTLR. The only time I have had to use
>>> imports is for a full TSQL grammar, which is huge because SQL is so
>>> terrible. COBOL is pretty big, but nothing like SQL.
>>> 
>>> 
>>> Jim
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> > -----Original Message-----
>>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> > bounces at antlr.org] On Behalf Of Zhaohui Yang
>>> > Sent: Wednesday, August 15, 2012 8:18 AM
>>> > To: antlr-interest at antlr.org
>>> > Subject: [antlr-interest] big lexer problem
>>> >
>>> > Hi,
>>> >
>>> > I'm having big problem with big generated Lexer.java. Any help
>>> > appreciated.
>>> >
>>> > The language is COBOL. And I found multiple reasons that the lexer
>>> > get's too big:
>>> >
>>> > 1. I'm adding semantic predicate into the lexer, to simulate "lexer
>>> > state"
>>> > as in YACC and JavaCC. It's like
>>> >
>>> >        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
>>> > matching things like AXX(9).99 after a 'PIC' key word
>>> >
>>> >    The lexer without semantic predicates is 18K lines.
>>> >    When I add predicates to one or two of the lexer rules, it grows to
>>> > more than 20K.
>>> >    When I add a single more, it explodes to more than 60K and ANTLR
>>> > give up generating lexer with error: code is too long.
>>> >
>>> > 2. COBOL has a LOT of key words, that may explain the original 18K
>>> > lines.
>>> >
>>> > 3. I have tokens referencing other tokens.
>>> >    I've inlined most of them now, as suggested by others. But the size
>>> > has not reduced much.
>>> >
>>> > So the question could be:
>>> > 1. how to generate smaller lexer without removing semantic predicate?
>>> > 2. If that's not possible, how to simulate "lexer state" without
>>> > semantic predicate?
>>> > 3. Any other solution?
>>> >
>>> > Thanks.
>>> >
>>> > --
>>> > Regards,
>>> >
>>> > Yang, Zhaohui
>>> >
>>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>> > email-address
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> 
>> -- 
>> Regards,
>> 
>> Yang, Zhaohui
> 
> 
> 
> -- 
> Regards,
> 
> Yang, Zhaohui
> 

From francis.andre.kampbell at orange.fr  Thu Aug 16 05:01:38 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Thu, 16 Aug 2012 14:01:38 +0200
Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
 generated for a syntactic predicate for a rule with a parameter
Message-ID: <502CE122.8030700@orange.fr>

Hi

The generation of the method for the syntactic predicate of a rule with a 
parameter is missing the parameter in its signature, which leads to a compile 
error. I did not find out a way to fix this problem in the code base of antlr.

I would appreciate that someone looks at it and eventually fix this problem 
because I am stuck

Rgds

FA

Here the CMinus grammar modified with the variable rule having a parameter and 
conditioned by a syntactic predicate:
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
program
scope {
   List globals;
   List functions;
}
@init {
   $program::globals = new ArrayList();
   $program::functions = new ArrayList();
}
     : _declaration[2]_+
         -> program(globals={$program::globals},functions={$program::functions})
     ;

declaration[int i]
     : _(variable[i])=>variable[i]_ {$program::globals.add($variable.st);}
     |   f=function {$program::functions.add($f.st);}
     ;


_variable[int i]_
     :   type declarator ';'
         -> {$function.size()>0 && $function::name==null}?
            globalVariable(type={$type.st},name={$declarator.st})
         -> variable(type={$type.st},name={$declarator.st})
     ;


Here the generated code
---------------------------------
     // $ANTLR start synpred1_CMinus
     public final void synpred1_CMinus_fragment() throws RecognitionException {
         // 
C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39:9: ( 
variable[i] )
         // 
C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39:10: 
variable[i]
         {
         pushFollow(FOLLOW_variable_in_synpred1_CMinus101);
         variable(i); _// <== i cannot be resolved to a variable    
CMinusParser.java    /zAntlr3/src/cminus line 1744    Java Problem_


         state._fsp--;
         if (state.failed) return ;

         }

     }
     // $ANTLR end synpred1_CMinus



_______________________________________________
antlr-dev mailing list
antlr-dev at antlr.org
http://www.antlr.org/mailman/listinfo/antlr-dev


From yezonghui at gmail.com  Thu Aug 16 08:13:12 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Thu, 16 Aug 2012 23:13:12 +0800
Subject: [antlr-interest] big lexer problem
In-Reply-To: <B908B5EF-B204-43AE-A82A-447A80D66A1B@temporal-wave.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>
	<CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
	<B908B5EF-B204-43AE-A82A-447A80D66A1B@temporal-wave.com>
Message-ID: <CAO51=GSau7k8iEUupFWxmPRrw-pyRbRJFqJFV-dU0_1qFX-3vg@mail.gmail.com>

Ah, I guess I got the idea of not doing semantic analysis in lexer. We're
now defining the sequence "PIC xxxx-any-thing-without-white-space-xxxx" as
a single token. That totally removed the need for PICTURE_STATE.

Would you please point me to some guide or reference on embedding
lexers/parsers in ANTLR v3 ? I guess we still need that for embedded SQL
and embedded CISC, etc.

2012/8/16 Jim Idle <jimi at temporal-wave.com>

>  You can use embedded lexers/parsers if you like. I have done that a
> bunch of times for similar issues.
>
> However you are over complicating the pic thing I think. Just read all the
> tokens and concat the contents till you hit a white space. Then verify the
> pic afterwards. Your error messages will be loved by your users.
>
> Jim
>
>
>
>
>
> On Aug 15, 2012, at 8:40 PM, Zhaohui Yang <yezonghui at gmail.com> wrote:
>
>  I admit that my grammar was not well designed in the first place. And
> I'm working on it.
>
> However, lexer state is not that evil a thing anyway. At least it simplify
> things conceptually. As for this example of PICTURE string, if I use a
> parser rule pic_string to capture that, I'll have to imagine all kinds of
> tokens/parser rules that may combine into a pic_string. For example,
> "$AX(9).99" would be a "$", an array(index) expression, and a decimal
> number starting with dot. This could be frustrating enough.
>
> Well, I'm still trying to modify the lexer so that the pic_string could be
> combination of simple tokens. One question is how do I ensure these tokens
> does not have spaces between them?
>
> Back to lexer state thing. I found that ANTLR 2.7 has a
> TokenStreamSelector for exactly this purpose. And it can result in smaller
> lexer classes since each lexer cares for its own DFA, not poluting each
> other.
>
> I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(
>
> 2012/8/16 Jim Idle <jimi at temporal-wave.com>
>
>> This really means that your lexer is too complicated and I suspect that
>> you are just trying to type in a grammar from a normative spec without
>> thinking ahead a little (not trying to insult you here). The specs are
>> usually designed to explain the language/syntax, not necessarily to be
>> copied straight in to a parser grammar.
>>
>> You should really post your grammar files to get better help, but
>> generally you are trying to introduce context/state in to the lexer, which
>> is not necessary in all but a few cases. For instance, why do you care
>> about the token type in the lexer if the same pattern is used for two
>> token types? Take a token that matches a PIC pattern generally, then
>> verify that the pattern is a good PIC spec when you are walking the tree,
>> not in the lexer.
>>
>> On top of this, if you are trying to drive the lexer state from the
>> parser, then it is very unlikely it will work anyway.
>>
>> Try to take a step back, and reduce the number of tokens to a minimum,
>> remove any state that you can, move all the error checking and validation
>> as far away from the lexer as you can (at the lexer level you have a
>> minimum context, at the tree walk level you have much more information and
>> can issue much better errors/warnings).
>>
>> Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
>> the grammar and spend time on left factoring the rules, that all/a lot of
>> your problems will go away. If you still have issues with generated code
>> size at that point, then you need to start importing grammars and
>> debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
>> trying to change the output of ANTLR. The only time I have had to use
>> imports is for a full TSQL grammar, which is huge because SQL is so
>> terrible. COBOL is pretty big, but nothing like SQL.
>>
>>
>> Jim
>>
>>
>>
>>
>>
>>
>> > -----Original Message-----
>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > bounces at antlr.org] On Behalf Of Zhaohui Yang
>> > Sent: Wednesday, August 15, 2012 8:18 AM
>> > To: antlr-interest at antlr.org
>> > Subject: [antlr-interest] big lexer problem
>> >
>>  > Hi,
>> >
>> > I'm having big problem with big generated Lexer.java. Any help
>> > appreciated.
>> >
>> > The language is COBOL. And I found multiple reasons that the lexer
>> > get's too big:
>> >
>> > 1. I'm adding semantic predicate into the lexer, to simulate "lexer
>> > state"
>> > as in YACC and JavaCC. It's like
>> >
>> >        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
>> > matching things like AXX(9).99 after a 'PIC' key word
>> >
>> >    The lexer without semantic predicates is 18K lines.
>> >    When I add predicates to one or two of the lexer rules, it grows to
>> > more than 20K.
>> >    When I add a single more, it explodes to more than 60K and ANTLR
>> > give up generating lexer with error: code is too long.
>> >
>> > 2. COBOL has a LOT of key words, that may explain the original 18K
>> > lines.
>> >
>> > 3. I have tokens referencing other tokens.
>> >    I've inlined most of them now, as suggested by others. But the size
>> > has not reduced much.
>> >
>> > So the question could be:
>> > 1. how to generate smaller lexer without removing semantic predicate?
>> > 2. If that's not possible, how to simulate "lexer state" without
>> > semantic predicate?
>> > 3. Any other solution?
>> >
>> > Thanks.
>> >
>> > --
>> > Regards,
>> >
>> > Yang, Zhaohui
>> >
>>  > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> > email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
> --
> Regards,
>
> Yang, Zhaohui
>
>


-- 
Regards,

Yang, Zhaohui

From jimi at temporal-wave.com  Thu Aug 16 09:04:15 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 16 Aug 2012 09:04:15 -0700
Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
 generated for a syntactic predicate for a rule with a parameter
In-Reply-To: <502CE122.8030700@orange.fr>
References: <502CE122.8030700@orange.fr>
Message-ID: <be86f154a6a07527e229f87d4e8208ef@mail.gmail.com>

Hi Francis,

You cannot use a local parameter to a rule in a predicate because the
predicate can be hoisted in to rules higher up the chain and so the
predicate is its own function. If you need the local rule variable, then
place it in a scope and reference it that way - the scope is available
outside the rule, and you will find that that works.

A question from your snippet here though is what the difference between a
variable and a function is. For many languages, this can be left factored
in to something like this:


varFuncDecl:  ID
              (  LPAREN params RPAREN
                  (   funcBody  // Function
                    | // Function prototype
                  )
                | // Variable reference
              )
;

I don't know if that is the case for the language you are parsing, but
keep this kind of technique in mind :)


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Francis ANDRE
> Sent: Thursday, August 16, 2012 5:02 AM
> To: antlr ANTLR
> Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
> generated for a syntactic predicate for a rule with a parameter
>
> Hi
>
> The generation of the method for the syntactic predicate of a rule with
> a parameter is missing the parameter in its signature, which leads to a
> compile error. I did not find out a way to fix this problem in the code
> base of antlr.
>
> I would appreciate that someone looks at it and eventually fix this
> problem because I am stuck
>
> Rgds
>
> FA
>
> Here the CMinus grammar modified with the variable rule having a
> parameter and conditioned by a syntactic predicate:
> -----------------------------------------------------------------------
> -----------------------------------------------------------------------
> ---------------------------
> program
> scope {
>    List globals;
>    List functions;
> }
> @init {
>    $program::globals = new ArrayList();
>    $program::functions = new ArrayList(); }
>      : _declaration[2]_+
>          ->
> program(globals={$program::globals},functions={$program::functions})
>      ;
>
> declaration[int i]
>      : _(variable[i])=>variable[i]_
> {$program::globals.add($variable.st);}
>      |   f=function {$program::functions.add($f.st);}
>      ;
>
>
> _variable[int i]_
>      :   type declarator ';'
>          -> {$function.size()>0 && $function::name==null}?
>             globalVariable(type={$type.st},name={$declarator.st})
>          -> variable(type={$type.st},name={$declarator.st})
>      ;
>
>
> Here the generated code
> ---------------------------------
>      // $ANTLR start synpred1_CMinus
>      public final void synpred1_CMinus_fragment() throws
> RecognitionException {
>          //
> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39:9
> : ( variable[i] )
>          //
> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39:1
> 0:
> variable[i]
>          {
>          pushFollow(FOLLOW_variable_in_synpred1_CMinus101);
>          variable(i); _// <== i cannot be resolved to a variable
> CMinusParser.java    /zAntlr3/src/cminus line 1744    Java Problem_
>
>
>          state._fsp--;
>          if (state.failed) return ;
>
>          }
>
>      }
>      // $ANTLR end synpred1_CMinus
>
>
>
> _______________________________________________
> antlr-dev mailing list
> antlr-dev at antlr.org
> http://www.antlr.org/mailman/listinfo/antlr-dev
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jimi at temporal-wave.com  Thu Aug 16 09:10:04 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 16 Aug 2012 09:10:04 -0700
Subject: [antlr-interest] big lexer problem
In-Reply-To: <CAO51=GSau7k8iEUupFWxmPRrw-pyRbRJFqJFV-dU0_1qFX-3vg@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>	<CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
	<B908B5EF-B204-43AE-A82A-447A80D66A1B@temporal-wave.com>
	<CAO51=GSau7k8iEUupFWxmPRrw-pyRbRJFqJFV-dU0_1qFX-3vg@mail.gmail.com>
Message-ID: <e107d20af40915809f64b120b22031ce@mail.gmail.com>

Look for the ?island grammar? example in the downloadable tar of example
grammars. That search term should give you a few examples too. Island
grammars are useful when the language change is detectable purely in the
lexer.



Creating a single PIC token is just fine, but you can also leave PIC on its
own, then in the parser:



? PIC { call a function to consume tokens until a whitespace (might be off
channel) } ?



I think that your single token is probably the ?correct? way in this case,
but sometimes the parser solution works better (when the lexer cannot
handle such a token on its own).



Jim



*From:* Zhaohui Yang [mailto:yezonghui at gmail.com]
*Sent:* Thursday, August 16, 2012 8:13 AM
*To:* Jim Idle
*Cc:* antlr-interest at antlr.org
*Subject:* Re: [antlr-interest] big lexer problem



Ah, I guess I got the idea of not doing semantic analysis in lexer. We're
now defining the sequence "PIC xxxx-any-thing-without-white-space-xxxx" as
a single token. That totally removed the need for PICTURE_STATE.



Would you please point me to some guide or reference on embedding
lexers/parsers in ANTLR v3 ? I guess we still need that for embedded SQL
and embedded CISC, etc.

2012/8/16 Jim Idle <jimi at temporal-wave.com>

You can use embedded lexers/parsers if you like. I have done that a bunch
of times for similar issues.



However you are over complicating the pic thing I think. Just read all the
tokens and concat the contents till you hit a white space. Then verify the
pic afterwards. Your error messages will be loved by your users.



Jim









On Aug 15, 2012, at 8:40 PM, Zhaohui Yang <yezonghui at gmail.com> wrote:

I admit that my grammar was not well designed in the first place. And I'm
working on it.



However, lexer state is not that evil a thing anyway. At least it simplify
things conceptually. As for this example of PICTURE string, if I use a
parser rule pic_string to capture that, I'll have to imagine all kinds of
tokens/parser rules that may combine into a pic_string. For example,
"$AX(9).99" would be a "$", an array(index) expression, and a decimal
number starting with dot. This could be frustrating enough.



Well, I'm still trying to modify the lexer so that the pic_string could be
combination of simple tokens. One question is how do I ensure these tokens
does not have spaces between them?



Back to lexer state thing. I found that ANTLR 2.7 has a TokenStreamSelector
for exactly this purpose. And it can result in smaller lexer classes since
each lexer cares for its own DFA, not poluting each other.



I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(

2012/8/16 Jim Idle <jimi at temporal-wave.com>

This really means that your lexer is too complicated and I suspect that
you are just trying to type in a grammar from a normative spec without
thinking ahead a little (not trying to insult you here). The specs are
usually designed to explain the language/syntax, not necessarily to be
copied straight in to a parser grammar.

You should really post your grammar files to get better help, but
generally you are trying to introduce context/state in to the lexer, which
is not necessary in all but a few cases. For instance, why do you care
about the token type in the lexer if the same pattern is used for two
token types? Take a token that matches a PIC pattern generally, then
verify that the pattern is a good PIC spec when you are walking the tree,
not in the lexer.

On top of this, if you are trying to drive the lexer state from the
parser, then it is very unlikely it will work anyway.

Try to take a step back, and reduce the number of tokens to a minimum,
remove any state that you can, move all the error checking and validation
as far away from the lexer as you can (at the lexer level you have a
minimum context, at the tree walk level you have much more information and
can issue much better errors/warnings).

Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
the grammar and spend time on left factoring the rules, that all/a lot of
your problems will go away. If you still have issues with generated code
size at that point, then you need to start importing grammars and
debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
trying to change the output of ANTLR. The only time I have had to use
imports is for a full TSQL grammar, which is huge because SQL is so
terrible. COBOL is pretty big, but nothing like SQL.


Jim







> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Zhaohui Yang
> Sent: Wednesday, August 15, 2012 8:18 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] big lexer problem
>

> Hi,
>
> I'm having big problem with big generated Lexer.java. Any help
> appreciated.
>
> The language is COBOL. And I found multiple reasons that the lexer
> get's too big:
>
> 1. I'm adding semantic predicate into the lexer, to simulate "lexer
> state"
> as in YACC and JavaCC. It's like
>
>        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
> matching things like AXX(9).99 after a 'PIC' key word
>
>    The lexer without semantic predicates is 18K lines.
>    When I add predicates to one or two of the lexer rules, it grows to
> more than 20K.
>    When I add a single more, it explodes to more than 60K and ANTLR
> give up generating lexer with error: code is too long.
>
> 2. COBOL has a LOT of key words, that may explain the original 18K
> lines.
>
> 3. I have tokens referencing other tokens.
>    I've inlined most of them now, as suggested by others. But the size
> has not reduced much.
>
> So the question could be:
> 1. how to generate smaller lexer without removing semantic predicate?
> 2. If that's not possible, how to simulate "lexer state" without
> semantic predicate?
> 3. Any other solution?
>
> Thanks.
>
> --
> Regards,
>
> Yang, Zhaohui
>

> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address




-- 
Regards,


Yang, Zhaohui






-- 
Regards,


Yang, Zhaohui

From burton.samograd at markit.com  Thu Aug 16 09:49:55 2012
From: burton.samograd at markit.com (Burton Samograd)
Date: Thu, 16 Aug 2012 12:49:55 -0400
Subject: [antlr-interest] Difficult to explain prediction error
In-Reply-To: <D2A5C7470D67A54FACE86B838946D49D192DE508C9@NJ4MSGSCR02.markit.partners>
References: <D2A5C7470D67A54FACE86B838946D49D192DE508C9@NJ4MSGSCR02.markit.partners>
Message-ID: <D2A5C7470D67A54FACE86B838946D49D192DE509A2@NJ4MSGSCR02.markit.partners>

Re-sending in case this question was missed.  Any feedback or help appreciated.

--
Burton Samograd

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Burton Samograd
Sent: Tuesday, August 14, 2012 12:48 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Difficult to explain prediction error

Hello,

I have the following rule in my tree walker:

filter
        : ( return_type[...] selection_logic[...] )* { return_type | { /* handle nothing */ } )

which causes no warnings or errors from the Antlr compiler.  It seems to be working well but in one case where I have a certain return_type.  return_type is a selection of rules similar to the following in the grammar:

return_type: (return_a|return_b|return_c|return_d) ;

return_a : RETURNA ;

return_b : RETURNB ;

return_c : RETURNC ( LPAREN float RPAREN )? -> ^(RETURNC float?)

return_d : RETURND ( LPAREN float COMMA float RPAREN )? -> ^(RETURNC float+)

return_c and return_d are tokens with optional parameters after them.

The problem is when I try a single return_c without the parameters.  A single return_d without parameters does not have a problem.

I've single stepped into the generated Antlr tree walker and have found that it is throwing an exception and giving the following error
message:

-unknown source-(0)  : error 3 : ()* loopback of 520:7: ( return_type[...] selection_logic[...] )*, at offset 0, near UP :
cannot match to any predicted input...

This is caused by an exception that is generated when stepping over a function called cdfa37.predict.

I'm having problems understanding why this exception is being generated because the * after the rule in the above error message should cause the rule to be skipped and move onto the next one, which is a single (optional) return_type.

And like I said, this rule passes pretty much all of the test cases except for one that I have found. Can anybody shed some light on why my grammar is behaving this way?

--
Burton Samograd

________________________________
This e-mail, including accompanying communications and attachments, is strictly confidential and only for the intended recipient. Any retention, use or disclosure not expressly authorised by Markit is prohibited. This email is subject to all waivers and other terms at the following link: http://www.markit.com/en/about/legal/email-disclaimer.page

Please visit http://www.markit.com/en/about/contact/contact-us.page? for contact information on our offices worldwide.

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

This e-mail, including accompanying communications and attachments, is strictly confidential and only for the intended recipient. Any retention, use or disclosure not expressly authorised by Markit is prohibited. This email is subject to all waivers and other terms at the following link: http://www.markit.com/en/about/legal/email-disclaimer.page

Please visit http://www.markit.com/en/about/contact/contact-us.page? for contact information on our offices worldwide.

From francis.andre.kampbell at orange.fr  Thu Aug 16 11:38:33 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Thu, 16 Aug 2012 20:38:33 +0200
Subject: [antlr-interest] problem about "the code for the static
 initializer is exceeding the 65535 bytes limit"
In-Reply-To: <F5597E16-63A3-4537-9BDC-0B8E33E58024@mac.com>
References: <CAO51=GRinpjNp3NSRMXH3huCDJOMdMcSCD=qXbh1WrDo=FEBBA@mail.gmail.com>
	<502B1969.1070700@orange.fr>
	<CAO51=GTn42+SZk0E_0y-KPdXzJ-P_cwU9hjJqkR_u6jT37nc6A@mail.gmail.com>
	<502BD8DB.3010605@orange.fr>
	<925ce1df1c75295afe33be1ab5c7d9c9@mail.gmail.com>
	<502C01B9.5000009@orange.fr>
	<F5597E16-63A3-4537-9BDC-0B8E33E58024@mac.com>
Message-ID: <502D3E29.7060501@orange.fr>

Hi Trevor

Totally agree with but that's the way it is... Just another interesting 
challenge. The following statement is a perfect legal Natural statement

WRITE 3X INT1 (PM=I) 4T  / "Text"(3) (PM=I) INT4 (PM=I) 3/4 P*/INT2 AAA

3X              : skip 3 spaces
INT1           : variable reference
(PM=I)        : write it in reverse order
/                  : CR LF
"text"(3)      : print the literal "Text" 3 times
3/4               position the cursor at 3/4 of the line
P*/INT2 AAA         : print the AAA variable at the same column as the INT2 variable

Have fun!!


Le 15/08/2012 22:21, Trevor John Thompson a ?crit :
> On 2012 Aug 15, at 13:08, Francis ANDRE <francis.andre.kampbell at orange.fr> wrote:
>
>>   Just as an exemple, Natural allows this kind of syntaxes
>>
>> 99 / 99                   which means : divide 99 by 99
>> 99/99                    which is a mask for date number editing
> This only demonstrates that Natural is an atrociously bad design for a language.
> Try viewing it in a variable width font to see why.
> --
> Trevor John Thompson    (425) 246-4023
> tijet at me.com
> Quidquid Latine scriptum sit, altum videtur.
>
>


From yezonghui at gmail.com  Thu Aug 16 12:00:13 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Fri, 17 Aug 2012 03:00:13 +0800
Subject: [antlr-interest] big lexer problem
In-Reply-To: <e107d20af40915809f64b120b22031ce@mail.gmail.com>
References: <CAO51=GRXpR8teCYw=D5G-4pGATvOKa9XQhD-N0LFU8vQUW4kyA@mail.gmail.com>
	<d97497be4a0866591621e45230ff9041@mail.gmail.com>
	<CAO51=GSE78495FZTN4TEBe1TNkWXVPmU8SJF-jQ4htOx2wE=Fw@mail.gmail.com>
	<B908B5EF-B204-43AE-A82A-447A80D66A1B@temporal-wave.com>
	<CAO51=GSau7k8iEUupFWxmPRrw-pyRbRJFqJFV-dU0_1qFX-3vg@mail.gmail.com>
	<e107d20af40915809f64b120b22031ce@mail.gmail.com>
Message-ID: <CAO51=GSG8brVS5s1Me3FnXqm3cSCFuoujRb7LD2zRQGWtk+Hiw@mail.gmail.com>

Thanks for pointing to Island grammars :)

And for " call a function to consume tokens until a whitespace (might be
off channel) ", I guess this can be achieved with help of
LA() and consume(). Just don't have the experience how to make a token from
the captured pic string, while keeping the token stream and lexer objects
in consistent state. (e.g. the token index will leave a gap? backtracking
to an earlier point could have problem then)


2012/8/17 Jim Idle <jimi at temporal-wave.com>

> Look for the ?island grammar? example in the downloadable tar of example
> grammars. That search term should give you a few examples too. Island
> grammars are useful when the language change is detectable purely in the
> lexer.
>
>
>
> Creating a single PIC token is just fine, but you can also leave PIC on its
> own, then in the parser:
>
>
>
> ? PIC { call a function to consume tokens until a whitespace (might be off
> channel) } ?
>
>
>
> I think that your single token is probably the ?correct? way in this case,
> but sometimes the parser solution works better (when the lexer cannot
> handle such a token on its own).
>
>
>
> Jim
>
>
>
> *From:* Zhaohui Yang [mailto:yezonghui at gmail.com]
> *Sent:* Thursday, August 16, 2012 8:13 AM
> *To:* Jim Idle
> *Cc:* antlr-interest at antlr.org
> *Subject:* Re: [antlr-interest] big lexer problem
>
>
>
> Ah, I guess I got the idea of not doing semantic analysis in lexer. We're
> now defining the sequence "PIC xxxx-any-thing-without-white-space-xxxx" as
> a single token. That totally removed the need for PICTURE_STATE.
>
>
>
> Would you please point me to some guide or reference on embedding
> lexers/parsers in ANTLR v3 ? I guess we still need that for embedded SQL
> and embedded CISC, etc.
>
> 2012/8/16 Jim Idle <jimi at temporal-wave.com>
>
> You can use embedded lexers/parsers if you like. I have done that a bunch
> of times for similar issues.
>
>
>
> However you are over complicating the pic thing I think. Just read all the
> tokens and concat the contents till you hit a white space. Then verify the
> pic afterwards. Your error messages will be loved by your users.
>
>
>
> Jim
>
>
>
>
>
>
>
>
>
> On Aug 15, 2012, at 8:40 PM, Zhaohui Yang <yezonghui at gmail.com> wrote:
>
> I admit that my grammar was not well designed in the first place. And I'm
> working on it.
>
>
>
> However, lexer state is not that evil a thing anyway. At least it simplify
> things conceptually. As for this example of PICTURE string, if I use a
> parser rule pic_string to capture that, I'll have to imagine all kinds of
> tokens/parser rules that may combine into a pic_string. For example,
> "$AX(9).99" would be a "$", an array(index) expression, and a decimal
> number starting with dot. This could be frustrating enough.
>
>
>
> Well, I'm still trying to modify the lexer so that the pic_string could be
> combination of simple tokens. One question is how do I ensure these tokens
> does not have spaces between them?
>
>
>
> Back to lexer state thing. I found that ANTLR 2.7 has a TokenStreamSelector
> for exactly this purpose. And it can result in smaller lexer classes since
> each lexer cares for its own DFA, not poluting each other.
>
>
>
> I realy like to see this TokenStreamSelector in ANTLR 3. Realy ! :(
>
> 2012/8/16 Jim Idle <jimi at temporal-wave.com>
>
> This really means that your lexer is too complicated and I suspect that
> you are just trying to type in a grammar from a normative spec without
> thinking ahead a little (not trying to insult you here). The specs are
> usually designed to explain the language/syntax, not necessarily to be
> copied straight in to a parser grammar.
>
> You should really post your grammar files to get better help, but
> generally you are trying to introduce context/state in to the lexer, which
> is not necessary in all but a few cases. For instance, why do you care
> about the token type in the lexer if the same pattern is used for two
> token types? Take a token that matches a PIC pattern generally, then
> verify that the pattern is a good PIC spec when you are walking the tree,
> not in the lexer.
>
> On top of this, if you are trying to drive the lexer state from the
> parser, then it is very unlikely it will work anyway.
>
> Try to take a step back, and reduce the number of tokens to a minimum,
> remove any state that you can, move all the error checking and validation
> as far away from the lexer as you can (at the lexer level you have a
> minimum context, at the tree walk level you have much more information and
> can issue much better errors/warnings).
>
> Next, you don't need a 'fix' for ANTLR. You will find that as you simplify
> the grammar and spend time on left factoring the rules, that all/a lot of
> your problems will go away. If you still have issues with generated code
> size at that point, then you need to start importing grammars and
> debugging remotely (do not use the interpreter in ANTLRWorks anyway), not
> trying to change the output of ANTLR. The only time I have had to use
> imports is for a full TSQL grammar, which is huge because SQL is so
> terrible. COBOL is pretty big, but nothing like SQL.
>
>
> Jim
>
>
>
>
>
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Zhaohui Yang
> > Sent: Wednesday, August 15, 2012 8:18 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] big lexer problem
> >
>
> > Hi,
> >
> > I'm having big problem with big generated Lexer.java. Any help
> > appreciated.
> >
> > The language is COBOL. And I found multiple reasons that the lexer
> > get's too big:
> >
> > 1. I'm adding semantic predicate into the lexer, to simulate "lexer
> > state"
> > as in YACC and JavaCC. It's like
> >
> >        PICTURE_STRING: {lexerState==PIXTURE_STATE}?=> blah blah //
> > matching things like AXX(9).99 after a 'PIC' key word
> >
> >    The lexer without semantic predicates is 18K lines.
> >    When I add predicates to one or two of the lexer rules, it grows to
> > more than 20K.
> >    When I add a single more, it explodes to more than 60K and ANTLR
> > give up generating lexer with error: code is too long.
> >
> > 2. COBOL has a LOT of key words, that may explain the original 18K
> > lines.
> >
> > 3. I have tokens referencing other tokens.
> >    I've inlined most of them now, as suggested by others. But the size
> > has not reduced much.
> >
> > So the question could be:
> > 1. how to generate smaller lexer without removing semantic predicate?
> > 2. If that's not possible, how to simulate "lexer state" without
> > semantic predicate?
> > 3. Any other solution?
> >
> > Thanks.
> >
> > --
> > Regards,
> >
> > Yang, Zhaohui
> >
>
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> --
> Regards,
>
>
> Yang, Zhaohui
>
>
>
>
>
>
> --
> Regards,
>
>
> Yang, Zhaohui
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Regards,

Yang, Zhaohui

From rjack at elegancetech.com  Thu Aug 16 12:19:07 2012
From: rjack at elegancetech.com (Roger Jack)
Date: Thu, 16 Aug 2012 15:19:07 -0400
Subject: [antlr-interest] Unicode Character Classes available
Message-ID: <502D47AB.6000309@elegancetech.com>

I have just uploaded a AntlrUnicode.txt file into the Grammar section of 
the Antlr website.  The file contains Unicode Character Classes in Antlr 
lexer fragment format. Is this useful to anybody? Is there a better way 
to handle Unicode Character Classes?

Thanks!

Roger Jack



From mperdikeas at gmail.com  Thu Aug 16 13:01:38 2012
From: mperdikeas at gmail.com (Menelaos Perdikeas)
Date: Thu, 16 Aug 2012 23:01:38 +0300
Subject: [antlr-interest] ANTLRWorks generate parser and lexer with command
 line invocation (for build automation)
Message-ID: <CAMKa=eocr9i-6iCHpxxwhjejq8miOcHkD7v0vhKgZX-b0w0hRg@mail.gmail.com>

Hi,

I am trying to automate my build process and would like to be able to
invoke ANTLRWorks from the command line, pass it a grammar *.g file and
instruct it where to place the generated parser and lexer files. The idea
being that an Ant script can then be used to build my project from the
source control repository (where I only keep the *.g file and not the
generated parser / lexer) instead of requiring me to manually fire up
ANTLRWorks and do point-and-click with the mouse before the build can start.

Is this possible?

Rgrds,
Menelaos.

From jimi at temporal-wave.com  Thu Aug 16 13:30:15 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 16 Aug 2012 13:30:15 -0700
Subject: [antlr-interest] ANTLRWorks generate parser and lexer with
	command line invocation (for build automation)
In-Reply-To: <CAMKa=eocr9i-6iCHpxxwhjejq8miOcHkD7v0vhKgZX-b0w0hRg@mail.gmail.com>
References: <CAMKa=eocr9i-6iCHpxxwhjejq8miOcHkD7v0vhKgZX-b0w0hRg@mail.gmail.com>
Message-ID: <A61F70FF-8049-4AA9-9F0B-3079C2BB0E0D@temporal-wave.com>

I don't think that the ant task for ANTLR is working any more but you might try that. Maven is much easier if you can use it. 

However you want the antlrcomplete jar then type

Java -jar antlrcomplete.jar 

And it will give you all the options. 

Jim

On Aug 16, 2012, at 1:01 PM, Menelaos Perdikeas <mperdikeas at gmail.com> wrote:

> Hi,
> 
> I am trying to automate my build process and would like to be able to
> invoke ANTLRWorks from the command line, pass it a grammar *.g file and
> instruct it where to place the generated parser and lexer files. The idea
> being that an Ant script can then be used to build my project from the
> source control repository (where I only keep the *.g file and not the
> generated parser / lexer) instead of requiring me to manually fire up
> ANTLRWorks and do point-and-click with the mouse before the build can start.
> 
> Is this possible?
> 
> Rgrds,
> Menelaos.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From sam at tunnelvisionlabs.com  Thu Aug 16 15:01:50 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 16 Aug 2012 17:01:50 -0500
Subject: [antlr-interest] Unicode Character Classes available
In-Reply-To: <502D47AB.6000309@elegancetech.com>
References: <502D47AB.6000309@elegancetech.com>
Message-ID: <006901cd7bfa$bd8801a0$389804e0$@tunnelvisionlabs.com>

I think those could certainly be handy. :) I have a couple grammars which
rely on Unicode letters and/or digits (by class), and they're currently
implemented by "hacking" the internal data structures produced by ANTLR 4 at
runtime using the results of Character.isLetter(c) and/or
Character.isDigit(c).

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Roger Jack [mailto:rjack at elegancetech.com] 
Sent: Thursday, August 16, 2012 2:19 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Unicode Character Classes available

I have just uploaded a AntlrUnicode.txt file into the Grammar section of the
Antlr website.  The file contains Unicode Character Classes in Antlr lexer
fragment format. Is this useful to anybody? Is there a better way to handle
Unicode Character Classes?

Thanks!

Roger Jack



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From francis.andre.kampbell at orange.fr  Fri Aug 17 01:44:32 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Fri, 17 Aug 2012 10:44:32 +0200
Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
 generated for a syntactic predicate for a rule with a parameter
In-Reply-To: <be86f154a6a07527e229f87d4e8208ef@mail.gmail.com>
References: <502CE122.8030700@orange.fr>
	<be86f154a6a07527e229f87d4e8208ef@mail.gmail.com>
Message-ID: <502E0470.1010706@orange.fr>

Hi Jim

I got the same missing reference -- here the 'f' parameter of the fooSpec rule 
-- for the following snippet while there is no syntactic predicate

fooStatement
     returns[FOO f = null]
@init
     { }
     : t = foo { f = new FOO (t); }
       (fooSpec[f])?
;
fooSpec
     [FOO f]
: blablabla


Is this the same problem?

Does it mean that one cannot have a rule with one or more parameter as soon as 
it is embedded in an optional rule?

FA

Le 16/08/2012 18:04, Jim Idle a ?crit :
> Hi Francis,
>
> You cannot use a local parameter to a rule in a predicate because the
> predicate can be hoisted in to rules higher up the chain and so the
> predicate is its own function. If you need the local rule variable, then
> place it in a scope and reference it that way - the scope is available
> outside the rule, and you will find that that works.
>
> A question from your snippet here though is what the difference between a
> variable and a function is. For many languages, this can be left factored
> in to something like this:
>
>
> varFuncDecl:  ID
>                (  LPAREN params RPAREN
>                    (   funcBody  // Function
>                      | // Function prototype
>                    )
>                  | // Variable reference
>                )
> ;
>
> I don't know if that is the case for the language you are parsing, but
> keep this kind of technique in mind :)
>
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Francis ANDRE
>> Sent: Thursday, August 16, 2012 5:02 AM
>> To: antlr ANTLR
>> Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
>> generated for a syntactic predicate for a rule with a parameter
>>
>> Hi
>>
>> The generation of the method for the syntactic predicate of a rule with
>> a parameter is missing the parameter in its signature, which leads to a
>> compile error. I did not find out a way to fix this problem in the code
>> base of antlr.
>>
>> I would appreciate that someone looks at it and eventually fix this
>> problem because I am stuck
>>
>> Rgds
>>
>> FA
>>
>> Here the CMinus grammar modified with the variable rule having a
>> parameter and conditioned by a syntactic predicate:
>> -----------------------------------------------------------------------
>> -----------------------------------------------------------------------
>> ---------------------------
>> program
>> scope {
>>     List globals;
>>     List functions;
>> }
>> @init {
>>     $program::globals = new ArrayList();
>>     $program::functions = new ArrayList(); }
>>       : _declaration[2]_+
>>           ->
>> program(globals={$program::globals},functions={$program::functions})
>>       ;
>>
>> declaration[int i]
>>       : _(variable[i])=>variable[i]_
>> {$program::globals.add($variable.st);}
>>       |   f=function {$program::functions.add($f.st);}
>>       ;
>>
>>
>> _variable[int i]_
>>       :   type declarator ';'
>>           -> {$function.size()>0 && $function::name==null}?
>>              globalVariable(type={$type.st},name={$declarator.st})
>>           -> variable(type={$type.st},name={$declarator.st})
>>       ;
>>
>>
>> Here the generated code
>> ---------------------------------
>>       // $ANTLR start synpred1_CMinus
>>       public final void synpred1_CMinus_fragment() throws
>> RecognitionException {
>>           //
>> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39:9
>> : ( variable[i] )
>>           //
>> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39:1
>> 0:
>> variable[i]
>>           {
>>           pushFollow(FOLLOW_variable_in_synpred1_CMinus101);
>>           variable(i); _// <== i cannot be resolved to a variable
>> CMinusParser.java    /zAntlr3/src/cminus line 1744    Java Problem_
>>
>>
>>           state._fsp--;
>>           if (state.failed) return ;
>>
>>           }
>>
>>       }
>>       // $ANTLR end synpred1_CMinus
>>
>>
>>
>> _______________________________________________
>> antlr-dev mailing list
>> antlr-dev at antlr.org
>> http://www.antlr.org/mailman/listinfo/antlr-dev
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From sam at tunnelvisionlabs.com  Fri Aug 17 06:26:11 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Fri, 17 Aug 2012 08:26:11 -0500
Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
	generated for a syntactic predicate for a rule with a parameter
In-Reply-To: <502E0470.1010706@orange.fr>
References: <502CE122.8030700@orange.fr>	<be86f154a6a07527e229f87d4e8208ef@mail.gmail.com>
	<502E0470.1010706@orange.fr>
Message-ID: <009b01cd7c7b$deeedc70$9ccc9550$@tunnelvisionlabs.com>

My guess is you have backtrack=true, which can automatically generate
predicates for many decisions.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Francis ANDRE [mailto:francis.andre.kampbell at orange.fr] 
Sent: Friday, August 17, 2012 3:45 AM
To: Jim Idle
Cc: antlr ANTLR
Subject: Re: [antlr-interest] ANTLR 3.4: missing parameter in the method
generated for a syntactic predicate for a rule with a parameter

Hi Jim

I got the same missing reference -- here the 'f' parameter of the fooSpec
rule
-- for the following snippet while there is no syntactic predicate

fooStatement
     returns[FOO f = null]
@init
     { }
     : t = foo { f = new FOO (t); }
       (fooSpec[f])?
;
fooSpec
     [FOO f]
: blablabla


Is this the same problem?

Does it mean that one cannot have a rule with one or more parameter as soon
as it is embedded in an optional rule?

FA

Le 16/08/2012 18:04, Jim Idle a ?crit :
> Hi Francis,
>
> You cannot use a local parameter to a rule in a predicate because the 
> predicate can be hoisted in to rules higher up the chain and so the 
> predicate is its own function. If you need the local rule variable, 
> then place it in a scope and reference it that way - the scope is 
> available outside the rule, and you will find that that works.
>
> A question from your snippet here though is what the difference 
> between a variable and a function is. For many languages, this can be 
> left factored in to something like this:
>
>
> varFuncDecl:  ID
>                (  LPAREN params RPAREN
>                    (   funcBody  // Function
>                      | // Function prototype
>                    )
>                  | // Variable reference
>                )
> ;
>
> I don't know if that is the case for the language you are parsing, but 
> keep this kind of technique in mind :)
>
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
>> bounces at antlr.org] On Behalf Of Francis ANDRE
>> Sent: Thursday, August 16, 2012 5:02 AM
>> To: antlr ANTLR
>> Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method 
>> generated for a syntactic predicate for a rule with a parameter
>>
>> Hi
>>
>> The generation of the method for the syntactic predicate of a rule 
>> with a parameter is missing the parameter in its signature, which 
>> leads to a compile error. I did not find out a way to fix this 
>> problem in the code base of antlr.
>>
>> I would appreciate that someone looks at it and eventually fix this 
>> problem because I am stuck
>>
>> Rgds
>>
>> FA
>>
>> Here the CMinus grammar modified with the variable rule having a 
>> parameter and conditioned by a syntactic predicate:
>> ---------------------------------------------------------------------
>> --
>> ---------------------------------------------------------------------
>> --
>> ---------------------------
>> program
>> scope {
>>     List globals;
>>     List functions;
>> }
>> @init {
>>     $program::globals = new ArrayList();
>>     $program::functions = new ArrayList(); }
>>       : _declaration[2]_+
>>           ->
>> program(globals={$program::globals},functions={$program::functions})
>>       ;
>>
>> declaration[int i]
>>       : _(variable[i])=>variable[i]_
>> {$program::globals.add($variable.st);}
>>       |   f=function {$program::functions.add($f.st);}
>>       ;
>>
>>
>> _variable[int i]_
>>       :   type declarator ';'
>>           -> {$function.size()>0 && $function::name==null}?
>>              globalVariable(type={$type.st},name={$declarator.st})
>>           -> variable(type={$type.st},name={$declarator.st})
>>       ;
>>
>>
>> Here the generated code
>> ---------------------------------
>>       // $ANTLR start synpred1_CMinus
>>       public final void synpred1_CMinus_fragment() throws 
>> RecognitionException {
>>           //
>> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39
>> :9
>> : ( variable[i] )
>>           //
>> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39
>> :1
>> 0:
>> variable[i]
>>           {
>>           pushFollow(FOLLOW_variable_in_synpred1_CMinus101);
>>           variable(i); _// <== i cannot be resolved to a variable
>> CMinusParser.java    /zAntlr3/src/cminus line 1744    Java Problem_
>>
>>
>>           state._fsp--;
>>           if (state.failed) return ;
>>
>>           }
>>
>>       }
>>       // $ANTLR end synpred1_CMinus
>>
>>
>>
>> _______________________________________________
>> antlr-dev mailing list
>> antlr-dev at antlr.org
>> http://www.antlr.org/mailman/listinfo/antlr-dev
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: 
>> http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Fri Aug 17 08:34:52 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 17 Aug 2012 08:34:52 -0700
Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
 generated for a syntactic predicate for a rule with a parameter
In-Reply-To: <502E0470.1010706@orange.fr>
References: <502CE122.8030700@orange.fr>
	<be86f154a6a07527e229f87d4e8208ef@mail.gmail.com>
	<502E0470.1010706@orange.fr>
Message-ID: <d24f7d8f080df70faa3188a9d0f95236@mail.gmail.com>

Do you have backtrack turned on? Basically you can't use local variables
in any predicate and backtrack will manufacture predicates for you.

You should really turn backtrack off and solve the ambiguities though as
you will be unable to issue good error messages with backtracking turned
on.

Jim


> -----Original Message-----
> From: Francis ANDRE [mailto:francis.andre.kampbell at orange.fr]
> Sent: Friday, August 17, 2012 1:45 AM
> To: Jim Idle
> Cc: antlr ANTLR
> Subject: Re: [antlr-interest] ANTLR 3.4: missing parameter in the
> method generated for a syntactic predicate for a rule with a parameter
>
> Hi Jim
>
> I got the same missing reference -- here the 'f' parameter of the
> fooSpec rule
> -- for the following snippet while there is no syntactic predicate
>
> fooStatement
>      returns[FOO f = null]
> @init
>      { }
>      : t = foo { f = new FOO (t); }
>        (fooSpec[f])?
> ;
> fooSpec
>      [FOO f]
> : blablabla
>
>
> Is this the same problem?
>
> Does it mean that one cannot have a rule with one or more parameter as
> soon as it is embedded in an optional rule?
>
> FA
>
> Le 16/08/2012 18:04, Jim Idle a ?crit :
> > Hi Francis,
> >
> > You cannot use a local parameter to a rule in a predicate because the
> > predicate can be hoisted in to rules higher up the chain and so the
> > predicate is its own function. If you need the local rule variable,
> > then place it in a scope and reference it that way - the scope is
> > available outside the rule, and you will find that that works.
> >
> > A question from your snippet here though is what the difference
> > between a variable and a function is. For many languages, this can be
> > left factored in to something like this:
> >
> >
> > varFuncDecl:  ID
> >                (  LPAREN params RPAREN
> >                    (   funcBody  // Function
> >                      | // Function prototype
> >                    )
> >                  | // Variable reference
> >                )
> > ;
> >
> > I don't know if that is the case for the language you are parsing,
> but
> > keep this kind of technique in mind :)
> >
> >
> > Jim
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Francis ANDRE
> >> Sent: Thursday, August 16, 2012 5:02 AM
> >> To: antlr ANTLR
> >> Subject: [antlr-interest] ANTLR 3.4: missing parameter in the method
> >> generated for a syntactic predicate for a rule with a parameter
> >>
> >> Hi
> >>
> >> The generation of the method for the syntactic predicate of a rule
> >> with a parameter is missing the parameter in its signature, which
> >> leads to a compile error. I did not find out a way to fix this
> >> problem in the code base of antlr.
> >>
> >> I would appreciate that someone looks at it and eventually fix this
> >> problem because I am stuck
> >>
> >> Rgds
> >>
> >> FA
> >>
> >> Here the CMinus grammar modified with the variable rule having a
> >> parameter and conditioned by a syntactic predicate:
> >> --------------------------------------------------------------------
> -
> >> --
> >> --------------------------------------------------------------------
> -
> >> --
> >> ---------------------------
> >> program
> >> scope {
> >>     List globals;
> >>     List functions;
> >> }
> >> @init {
> >>     $program::globals = new ArrayList();
> >>     $program::functions = new ArrayList(); }
> >>       : _declaration[2]_+
> >>           ->
> >> program(globals={$program::globals},functions={$program::functions})
> >>       ;
> >>
> >> declaration[int i]
> >>       : _(variable[i])=>variable[i]_
> >> {$program::globals.add($variable.st);}
> >>       |   f=function {$program::functions.add($f.st);}
> >>       ;
> >>
> >>
> >> _variable[int i]_
> >>       :   type declarator ';'
> >>           -> {$function.size()>0 && $function::name==null}?
> >>              globalVariable(type={$type.st},name={$declarator.st})
> >>           -> variable(type={$type.st},name={$declarator.st})
> >>       ;
> >>
> >>
> >> Here the generated code
> >> ---------------------------------
> >>       // $ANTLR start synpred1_CMinus
> >>       public final void synpred1_CMinus_fragment() throws
> >> RecognitionException {
> >>           //
> >>
> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39
> >> :9
> >> : ( variable[i] )
> >>           //
> >>
> C:\\Users\\FrancisANDRE\\workspace\\zAntlr3\\src\\cminus\\CMinus.g:39
> >> :1
> >> 0:
> >> variable[i]
> >>           {
> >>           pushFollow(FOLLOW_variable_in_synpred1_CMinus101);
> >>           variable(i); _// <== i cannot be resolved to a variable
> >> CMinusParser.java    /zAntlr3/src/cminus line 1744    Java Problem_
> >>
> >>
> >>           state._fsp--;
> >>           if (state.failed) return ;
> >>
> >>           }
> >>
> >>       }
> >>       // $ANTLR end synpred1_CMinus
> >>
> >>
> >>
> >> _______________________________________________
> >> antlr-dev mailing list
> >> antlr-dev at antlr.org
> >> http://www.antlr.org/mailman/listinfo/antlr-dev
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-
> >> email-address
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >

From andrew.gacek at gmail.com  Fri Aug 17 11:56:20 2012
From: andrew.gacek at gmail.com (Andrew Gacek)
Date: Fri, 17 Aug 2012 13:56:20 -0500
Subject: [antlr-interest] Expression grammars and *non*-ambiguities
In-Reply-To: <CAHgzvFh1Srpm3GkQ-ERH0+W4_fQ4g0C_sECqWtj47Xu6snPONA@mail.gmail.com>
References: <CAHgzvFh1Srpm3GkQ-ERH0+W4_fQ4g0C_sECqWtj47Xu6snPONA@mail.gmail.com>
Message-ID: <CAHgzvFjkpVDC=ZE9Lb3e-=2tNnHLLn+zJ5pAszGC+9dxHwGErA@mail.gmail.com>

I have investigated this a bit more. The following grammar is flagged
as ambiguous by ANTLR, but the resulting parser seems to make the
correct decisions. Is there a sensible way to rewrite the grammar to
remove the ambiguity?

expr: term;

term: factor ('+' factor)*;

factor: atom ('*' atom)*;

atom
: INT
| '(' expr ')'
| 'if' expr 'then' expr 'else' expr
;

INT: ('0'..'9')+;

-Andrew

From jimi at temporal-wave.com  Fri Aug 17 12:17:57 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 17 Aug 2012 12:17:57 -0700
Subject: [antlr-interest] Expression grammars and *non*-ambiguities
In-Reply-To: <CAHgzvFjkpVDC=ZE9Lb3e-=2tNnHLLn+zJ5pAszGC+9dxHwGErA@mail.gmail.com>
References: <CAHgzvFh1Srpm3GkQ-ERH0+W4_fQ4g0C_sECqWtj47Xu6snPONA@mail.gmail.com>
	<CAHgzvFjkpVDC=ZE9Lb3e-=2tNnHLLn+zJ5pAszGC+9dxHwGErA@mail.gmail.com>
Message-ID: <05a79e446a0317e729fdae9d4388b175@mail.gmail.com>

The issue is that your trailing expression in the if has no terminator to
indicate the end of the if statement.

If you had something like:

'if' expr 'then' expr 'else' expr 'end'

Then it will go away. The correct decision is made, but it is difficult to
make ANTLR not issue the warning. If you cannot change the language, it
might be better to just document that the clause causes a warning and
leave it at that.

You could try playing with k=1 and so on - that might make the warning go
away and you could add single token predicates. Also, don't use literals
in the parser, they will confuse you later.

grammar jim;

tu	: expr EOF
	;
	
expr: term;

term: factor ((PLUS)=>PLUS factor)*
	;

factor: atom ((MUL)=>MUL atom)*;

atom
: INT
	| '(' expr ')'
	| 'if' expr 'then' expr 'else' expr
	;

INT: ('0'..'9')+;
MUL : '*';
PLUS : '+';


Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andrew Gacek
> Sent: Friday, August 17, 2012 11:56 AM
> To: antlr-interest
> Subject: Re: [antlr-interest] Expression grammars and *non*-ambiguities
>
> I have investigated this a bit more. The following grammar is flagged
> as ambiguous by ANTLR, but the resulting parser seems to make the
> correct decisions. Is there a sensible way to rewrite the grammar to
> remove the ambiguity?
>
> expr: term;
>
> term: factor ('+' factor)*;
>
> factor: atom ('*' atom)*;
>
> atom
> : INT
> | '(' expr ')'
> | 'if' expr 'then' expr 'else' expr
> ;
>
> INT: ('0'..'9')+;
>
> -Andrew
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jbb at acm.org  Fri Aug 17 12:18:52 2012
From: jbb at acm.org (John B. Brodie)
Date: Fri, 17 Aug 2012 15:18:52 -0400
Subject: [antlr-interest] Expression grammars and *non*-ambiguities
In-Reply-To: <CAHgzvFjkpVDC=ZE9Lb3e-=2tNnHLLn+zJ5pAszGC+9dxHwGErA@mail.gmail.com>
References: <CAHgzvFh1Srpm3GkQ-ERH0+W4_fQ4g0C_sECqWtj47Xu6snPONA@mail.gmail.com>
	<CAHgzvFjkpVDC=ZE9Lb3e-=2tNnHLLn+zJ5pAszGC+9dxHwGErA@mail.gmail.com>
Message-ID: <502E991C.5080901@acm.org>

Greetings!

On 08/17/2012 02:56 PM, Andrew Gacek wrote:
> I have investigated this a bit more. The following grammar is flagged
> as ambiguous by ANTLR, but the resulting parser seems to make the
> correct decisions. Is there a sensible way to rewrite the grammar to
> remove the ambiguity?

this apparently valid sentence has an ambiguous parse under your grammar:

1 * if 2 then 3 else 4 * 5

it could be 1 * (if 2 then 3 else (4*5))
or 1 * ((if 2 then 3 else 4) * 5)

fix by adding a closing keyword to your if construct
atom : ..... | 'if' expr 'then' expr 'else' expr 'fi'

or muck with the precedence of the if-then-else operator

Hope this helps
    -jbb

>
> expr: term;
>
> term: factor ('+' factor)*;
>
> factor: atom ('*' atom)*;
>
> atom
> : INT
> | '(' expr ')'
> | 'if' expr 'then' expr 'else' expr
> ;
>
> INT: ('0'..'9')+;
>
> -Andrew
>


From forumer at smartmobili.com  Sat Aug 18 06:08:55 2012
From: forumer at smartmobili.com (forumer at smartmobili.com)
Date: Sat, 18 Aug 2012 15:08:55 +0200
Subject: [antlr-interest] Newbie trying to tame lexer
In-Reply-To: <CAOrgODbCG5JFsUok7AVyMWXqi=OoWkhi=2dy=LuOVsuy31q-qw@mail.gmail.com>
References: <5faf342bcd6e7b9ae03fcf0c5ce4de39@smartmobili.com>
	<CAOrgODYsO9gMiMsZ8EsEn1Aa8XtNB-XeP5mF0-yRk7SR-VWguw@mail.gmail.com>
	<65f49234e44a369de29444c1370c7c09@smartmobili.com>
	<CAOrgODbCG5JFsUok7AVyMWXqi=OoWkhi=2dy=LuOVsuy31q-qw@mail.gmail.com>
Message-ID: <4e881f3481f89b6628405b4cc9de495b@smartmobili.com>

Thanks a lot, I just see your answer now and I am trying it.
It seems to work except for javadoc comment :

/**
public class FooBar extends Bar {

}
*/

I get a new FailedPredicateException(input, "BLOCK_COMMENT", 
"input.LA(1) != '*' && input.LA(2) != '/'");







Le 05.08.2012 19:53, Bart Kiers a ?crit?:
> Try something like this:
>
>> BLOCK_COMMENT
>>
>> ?: /* ({input.LA(1) != * && input.LA(2) != /}?=> . )*?
>>
>> ? ?( */?
>>
>> ? ?| EOF {System.err.println("Oi, wrong BLOCK_COMMENT!");}
>>
>> ? ?)
>>
>> ?;
>
> Note that the predicate, `{input.LA(1) != * && input.LA(2) != /}?=>`,
> contains target-specific code (Java, in my example).
>
> Regards,
>
> Bart.
>
> On Sat, Aug 4, 2012 at 10:34 PM,  wrote:
>
>> Le 04.08.2012 20:20, Bart Kiers a ?crit?:
>>
>>> Hi forumer,
>>>
>>> Youd normally create a single rule for a block comment, like
>>> this:
>>>
>>> BLOCK_COMMENT
>>> ?: /* .* */
>>> ?;
>> Yes I know but I need a parser that can accept invalid multiline
>> comments, ex
>>
>> /*
>> * I am an invalid multiline comment
>>
>> With the traditional approach I will get a match exception and I
>> dont want that.
>> So is it possible ?
>
>
>
> Links:
> ------
> [1] mailto:forumer at smartmobili.com

From andron-eiu at mail.ru  Sat Aug 18 07:20:13 2012
From: andron-eiu at mail.ru (=?UTF-8?B?0JDQvdC00YDQtdC5INCQ0YHQtdC10LI=?=)
Date: Sat, 18 Aug 2012 18:20:13 +0400
Subject: [antlr-interest] ANTLRWorks generate parser and lexer with
 command line invocation (for build automation)
In-Reply-To: <CAMKa=eocr9i-6iCHpxxwhjejq8miOcHkD7v0vhKgZX-b0w0hRg@mail.gmail.com>
References: <CAMKa=eocr9i-6iCHpxxwhjejq8miOcHkD7v0vhKgZX-b0w0hRg@mail.gmail.com>
Message-ID: <502FA49D.8060004@mail.ru>

Hello, Menelaos.

That would help http://www.antlr.org/wiki/pages/viewpage.action?pageId=729

17.08.2012 0:01, Menelaos Perdikeas ?????:
> Hi,
>
> I am trying to automate my build process and would like to be able to
> invoke ANTLRWorks from the command line, pass it a grammar *.g file and
> instruct it where to place the generated parser and lexer files. The idea
> being that an Ant script can then be used to build my project from the
> source control repository (where I only keep the *.g file and not the
> generated parser / lexer) instead of requiring me to manually fire up
> ANTLRWorks and do point-and-click with the mouse before the build can start.
>
> Is this possible?
>
> Rgrds,
> Menelaos.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From forumer at smartmobili.com  Sat Aug 18 09:19:41 2012
From: forumer at smartmobili.com (forumer at smartmobili.com)
Date: Sat, 18 Aug 2012 18:19:41 +0200
Subject: [antlr-interest] Newbie trying to tame lexer
In-Reply-To: <4e881f3481f89b6628405b4cc9de495b@smartmobili.com>
References: <5faf342bcd6e7b9ae03fcf0c5ce4de39@smartmobili.com>
	<CAOrgODYsO9gMiMsZ8EsEn1Aa8XtNB-XeP5mF0-yRk7SR-VWguw@mail.gmail.com>
	<65f49234e44a369de29444c1370c7c09@smartmobili.com>
	<CAOrgODbCG5JFsUok7AVyMWXqi=OoWkhi=2dy=LuOVsuy31q-qw@mail.gmail.com>
	<4e881f3481f89b6628405b4cc9de495b@smartmobili.com>
Message-ID: <26c1f7e7375b54af6f376fd34a97231e@smartmobili.com>

I have declared a new rule

JAVADOC_COMMENT
  : '/**' ({input.LA(1) != '*' && input.LA(2) != '/'}?=> . )*
  ;


I suppose it will fix my problem.

Thanks

Le 18.08.2012 15:08, forumer... a ?crit?:
> Thanks a lot, I just see your answer now and I am trying it.
> It seems to work except for javadoc comment :
>
> /**
> public class FooBar extends Bar {
>
> }
> */
>
> I get a new FailedPredicateException(input, "BLOCK_COMMENT",
> "input.LA(1) != '*' && input.LA(2) != '/'");
>
>
>
>
>
>
>
> Le 05.08.2012 19:53, Bart Kiers a ?crit?:
>> Try something like this:
>>
>>> BLOCK_COMMENT
>>>
>>> ?: /* ({input.LA(1) != * && input.LA(2) != /}?=> . )*?
>>>
>>> ? ?( */?
>>>
>>> ? ?| EOF {System.err.println("Oi, wrong BLOCK_COMMENT!");}
>>>
>>> ? ?)
>>>
>>> ?;
>>
>> Note that the predicate, `{input.LA(1) != * && input.LA(2) != 
>> /}?=>`,
>> contains target-specific code (Java, in my example).
>>
>> Regards,
>>
>> Bart.
>>
>> On Sat, Aug 4, 2012 at 10:34 PM,  wrote:
>>
>>> Le 04.08.2012 20:20, Bart Kiers a ?crit?:
>>>
>>>> Hi forumer,
>>>>
>>>> Youd normally create a single rule for a block comment, like
>>>> this:
>>>>
>>>> BLOCK_COMMENT
>>>> ?: /* .* */
>>>> ?;
>>> Yes I know but I need a parser that can accept invalid multiline
>>> comments, ex
>>>
>>> /*
>>> * I am an invalid multiline comment
>>>
>>> With the traditional approach I will get a match exception and I
>>> dont want that.
>>> So is it possible ?
>>
>>
>>
>> Links:
>> ------
>> [1] mailto:forumer at smartmobili.com
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From vinicius.durelli at gmail.com  Sat Aug 18 13:53:03 2012
From: vinicius.durelli at gmail.com (Vinicius Durelli)
Date: Sat, 18 Aug 2012 17:53:03 -0300
Subject: [antlr-interest] Why can't I make StringTemplate to indent?
Message-ID: <CAFVj0601B5GouZkHN2zomt03iHFbZTKB-gtsGSe+HW_X8Z=-tA@mail.gmail.com>

Hi all,

I have the following StringTemplate group

group RPInstr;

before(firstStat) ::= <<
<{<[beforeEnteringInstr(),firstStat]; anchor, separator="\n">}; anchor>
>>

beforeEnteringInstr() ::= "before();"

I am trying to make the first statement of a method to align with the
instrumentation code ("before();").
However, what I am getting right now is something like this:

public  int method() {
   before();
System.out.println("testing");
   System.out.println("testing again");
}

What is the proper way to indent before(); and the next statement so I get
the following?

public  int method() {
   before();
           System.out.println("testing");
   System.out.println("testing again");
}


Thanks in advance.

PS: the options that I am using in my grammar are the following

options {output=template; rewrite=true; backtrack=true; memoize=true;}


Regards,
~Vinicius

From pohilets at gmail.com  Sun Aug 19 05:13:10 2012
From: pohilets at gmail.com (kjam)
Date: Sun, 19 Aug 2012 05:13:10 -0700 (PDT)
Subject: [antlr-interest] C++ Target - pANTLR3_BASE_TREE_ADAPTOR
Message-ID: <1345378389963-7578597.post@n2.nabble.com>

Hi All,

I'm reading The Definitive ANTLR Reference and I've tried to write
AST-building parser as shown in Chapter 3.3. The grammar is here -
http://pastebin.com/Hd5rtTZk. I'm using ANTLR from Uber Jar
'antlr-3.4-with-cpp.jar' posted by Gokulakannan Somasundaram.

When ANTLR runs, it generates following error:

But parser and lexer are generated.

Parser header file contains these lines:

When compiling generated files, C++ compiler issues a compilation error on
those lines:

Seems that those lines are legacy from the plain C target. Is there any
solution to this problem? I'd like to use C++ target and avoid mixing C++
and plain C code.



--
View this message in context: http://antlr.1301665.n2.nabble.com/C-Target-pANTLR3-BASE-TREE-ADAPTOR-tp7578597.html
Sent from the ANTLR mailing list archive at Nabble.com.

From ibre5041 at ibrezina.net  Sun Aug 19 06:05:38 2012
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Sun, 19 Aug 2012 15:05:38 +0200
Subject: [antlr-interest] C++ Target - pANTLR3_BASE_TREE_ADAPTOR
In-Reply-To: <1345378389963-7578597.post@n2.nabble.com>
References: <1345378389963-7578597.post@n2.nabble.com>
Message-ID: <5030E4A2.7000105@ibrezina.net>

On 08/19/2012 02:13 PM, kjam wrote:
> Hi All,
>
> I'm reading The Definitive ANTLR Reference and I've tried to write
> AST-building parser as shown in Chapter 3.3. The grammar is here -
> http://pastebin.com/Hd5rtTZk. I'm using ANTLR from Uber Jar
> 'antlr-3.4-with-cpp.jar' posted by Gokulakannan Somasundaram.
>
> When ANTLR runs, it generates following error:
>
> But parser and lexer are generated.
>
> Parser header file contains these lines:
>
> When compiling generated files, C++ compiler issues a compilation error on
> those lines:
>
> Seems that those lines are legacy from the plain C target. Is there any
> solution to this problem? I'd like to use C++ target and avoid mixing C++
> and plain C code.
>
>
So far AST is not supported by Gokul's Cpp target.
You'll have to try the template output a generate the AST by your own.

Ivan


From pohilets at gmail.com  Mon Aug 20 11:55:51 2012
From: pohilets at gmail.com (kjam)
Date: Mon, 20 Aug 2012 11:55:51 -0700 (PDT)
Subject: [antlr-interest] C++ Target - pANTLR3_BASE_TREE_ADAPTOR
In-Reply-To: <5030E4A2.7000105@ibrezina.net>
References: <1345378389963-7578597.post@n2.nabble.com>
	<5030E4A2.7000105@ibrezina.net>
Message-ID: <1345488951984-7578599.post@n2.nabble.com>

> So far AST is not supported by Gokul's Cpp target.
Pity(((... I've skipped AST section for now and reading further.

> You'll have to try the template output a generate the AST by your own.
Currently I do not have enough knowledge to do it, maybe later.



--
View this message in context: http://antlr.1301665.n2.nabble.com/C-Target-pANTLR3-BASE-TREE-ADAPTOR-tp7578597p7578599.html
Sent from the ANTLR mailing list archive at Nabble.com.

From francis.andre.kampbell at orange.fr  Tue Aug 21 00:32:50 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Tue, 21 Aug 2012 09:32:50 +0200
Subject: [antlr-interest] ANTLR3.4: help on @init and @after
Message-ID: <503339A2.6080404@orange.fr>

Hi

This parser rule

foo
     returns[Token = null]
@init
{ allowFOO(true); }
@after
{ allowFOO(false); }
:    FOO { l = $FOO; }
;

is translated into this snippet

          allowFOO(true);
         try {
             {
             FOO1=(Lexem)match(input,FOO,FOLLOW_FOO_in_FOO1247); if 
(state.failed) return l;
             if ( state.backtracking==0 ) { l = FOO1; }
             }
             if ( state.backtracking==0 ) { allowFOO(false); }

Why the @after action is conditioned by a backtracking equal to 0, while 
the @init one is not??

FA

From pohilets at gmail.com  Tue Aug 21 03:44:22 2012
From: pohilets at gmail.com (kjam)
Date: Tue, 21 Aug 2012 03:44:22 -0700 (PDT)
Subject: [antlr-interest] C++ Target - PythonTokenStream.java
Message-ID: <1345545862451-7578601.post@n2.nabble.com>

Hi,

I'm trying to implement parser for custom indentation-sensitive language
(like Python) with C++ target.

AFAICS, for Java runtime, TokeSource interface is a more convenient point to
patch stream of tokens than TokenStream. Also comment in UserTraints.hpp in
Gokul's composite_java example also suggests to hook TokenSource. Is this
correct? Why in PythonTokenStream.java TokenStream was hooked, but not the
TokenSource?



--
View this message in context: http://antlr.1301665.n2.nabble.com/C-Target-PythonTokenStream-java-tp7578601.html
Sent from the ANTLR mailing list archive at Nabble.com.

From sam at tunnelvisionlabs.com  Tue Aug 21 05:46:27 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 21 Aug 2012 07:46:27 -0500
Subject: [antlr-interest] ANTLR3.4: help on @init and @after
In-Reply-To: <503339A2.6080404@orange.fr>
References: <503339A2.6080404@orange.fr>
Message-ID: <01fb01cd7f9a$fbffaa20$f3fefe60$@tunnelvisionlabs.com>

The @init section is frequently used to declare and initialize variables
which are used in predicates and/or actions later in the rule. If these were
placed inside a generated (state.backtracking==0) block, the scoping rules
of the language would leave you with no way to declare variables and would
not initialize variables if they are used in semantic predicates and/or
forced actions.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Francis ANDRE [mailto:francis.andre.kampbell at orange.fr] 
Sent: Tuesday, August 21, 2012 2:33 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] ANTLR3.4: help on @init and @after

Hi

This parser rule

foo
     returns[Token = null]
@init
{ allowFOO(true); }
@after
{ allowFOO(false); }
:    FOO { l = $FOO; }
;

is translated into this snippet

          allowFOO(true);
         try {
             {
             FOO1=(Lexem)match(input,FOO,FOLLOW_FOO_in_FOO1247); if 
(state.failed) return l;
             if ( state.backtracking==0 ) { l = FOO1; }
             }
             if ( state.backtracking==0 ) { allowFOO(false); }

Why the @after action is conditioned by a backtracking equal to 0, while 
the @init one is not??

FA

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From francis.andre.kampbell at orange.fr  Tue Aug 21 06:55:48 2012
From: francis.andre.kampbell at orange.fr (Francis ANDRE)
Date: Tue, 21 Aug 2012 15:55:48 +0200
Subject: [antlr-interest] ANTLR3.4: help on @init and @after
In-Reply-To: <01fb01cd7f9a$fbffaa20$f3fefe60$@tunnelvisionlabs.com>
References: <503339A2.6080404@orange.fr>
	<01fb01cd7f9a$fbffaa20$f3fefe60$@tunnelvisionlabs.com>
Message-ID: <50339364.4090702@orange.fr>

Hi Sam

I understand the point on the @init section which is fine for me, but my 
question was more related to the @after section which I would consider 
as the @init, i.e., not beeing conditioned by the state.backtracking 
test. IMHO, it would be more coherent....

I tried to use @after {{  }} but that' produces a syntax error.....

Le 21/08/2012 14:46, Sam Harwell a ?crit :
> The @init section is frequently used to declare and initialize variables
> which are used in predicates and/or actions later in the rule. If these were
> placed inside a generated (state.backtracking==0) block, the scoping rules
> of the language would leave you with no way to declare variables and would
> not initialize variables if they are used in semantic predicates and/or
> forced actions.
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Francis ANDRE [mailto:francis.andre.kampbell at orange.fr]
> Sent: Tuesday, August 21, 2012 2:33 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3.4: help on @init and @after
>
> Hi
>
> This parser rule
>
> foo
>       returns[Token = null]
> @init
> { allowFOO(true); }
> @after
> { allowFOO(false); }
> :    FOO { l = $FOO; }
> ;
>
> is translated into this snippet
>
>            allowFOO(true);
>           try {
>               {
>               FOO1=(Lexem)match(input,FOO,FOLLOW_FOO_in_FOO1247); if
> (state.failed) return l;
>               if ( state.backtracking==0 ) { l = FOO1; }
>               }
>               if ( state.backtracking==0 ) { allowFOO(false); }
>
> Why the @after action is conditioned by a backtracking equal to 0, while
> the @init one is not??
>
> FA
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From sam at tunnelvisionlabs.com  Tue Aug 21 07:45:45 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 21 Aug 2012 09:45:45 -0500
Subject: [antlr-interest] ANTLR3.4: help on @init and @after
In-Reply-To: <50339364.4090702@orange.fr>
References: <503339A2.6080404@orange.fr>
	<01fb01cd7f9a$fbffaa20$f3fefe60$@tunnelvisionlabs.com>
	<50339364.4090702@orange.fr>
Message-ID: <020e01cd7fab$a61fced0$f25f6c70$@tunnelvisionlabs.com>

For guaranteed cleanup, you should be able to use a finally block which is
placed after the ';' as follows.

rule : ... ;
finally {
...
}

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Francis ANDRE [mailto:francis.andre.kampbell at orange.fr] 
Sent: Tuesday, August 21, 2012 8:56 AM
To: Sam Harwell
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] ANTLR3.4: help on @init and @after

Hi Sam

I understand the point on the @init section which is fine for me, but my
question was more related to the @after section which I would consider as
the @init, i.e., not beeing conditioned by the state.backtracking test.
IMHO, it would be more coherent....

I tried to use @after {{  }} but that' produces a syntax error.....

Le 21/08/2012 14:46, Sam Harwell a ?crit :
> The @init section is frequently used to declare and initialize 
> variables which are used in predicates and/or actions later in the 
> rule. If these were placed inside a generated (state.backtracking==0) 
> block, the scoping rules of the language would leave you with no way 
> to declare variables and would not initialize variables if they are 
> used in semantic predicates and/or forced actions.
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Francis ANDRE [mailto:francis.andre.kampbell at orange.fr]
> Sent: Tuesday, August 21, 2012 2:33 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3.4: help on @init and @after
>
> Hi
>
> This parser rule
>
> foo
>       returns[Token = null]
> @init
> { allowFOO(true); }
> @after
> { allowFOO(false); }
> :    FOO { l = $FOO; }
> ;
>
> is translated into this snippet
>
>            allowFOO(true);
>           try {
>               {
>               FOO1=(Lexem)match(input,FOO,FOLLOW_FOO_in_FOO1247); if
> (state.failed) return l;
>               if ( state.backtracking==0 ) { l = FOO1; }
>               }
>               if ( state.backtracking==0 ) { allowFOO(false); }
>
> Why the @after action is conditioned by a backtracking equal to 0, 
> while the @init one is not??
>
> FA
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From rich at dreambox.com  Tue Aug 21 18:26:49 2012
From: rich at dreambox.com (Richard Knox)
Date: Wed, 22 Aug 2012 01:26:49 +0000
Subject: [antlr-interest] Performance problem with $text in ANTLR 3.1
Message-ID: <CC598353.1EDBF%rich@dreambox.com>

I recently upgraded an ANTLR based application from ANTLR 3.0.1 to ANTLR 3.1. Since doing this, our application has been running MUCH slower. I did some profiling with VisualVM and found that we were spending most of our time in TokenRewriteStream.getKindOfOps. We get there when we reference $text from a grammar with options output=template and rewrite=true. Are there known performance issues with this scenario in ANTRL 3.1? Would I get better perf with a later version? Any suggested work arounds? Thanks!

-rich

From jimi at temporal-wave.com  Tue Aug 21 18:55:22 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 21 Aug 2012 18:55:22 -0700
Subject: [antlr-interest] Performance problem with $text in ANTLR 3.1
In-Reply-To: <CC598353.1EDBF%rich@dreambox.com>
References: <CC598353.1EDBF%rich@dreambox.com>
Message-ID: <9FC5D144-5C79-4512-A9CA-20CE81286452@temporal-wave.com>

Move to 3.4. String template is much faster. However I am not sure about your view of the performance traits; but go to 3.4 and then you will be in a space to start analysis properly. At 3.1 no one can really help. 

Jim

On Aug 21, 2012, at 6:26 PM, Richard Knox <rich at dreambox.com> wrote:

> I recently upgraded an ANTLR based application from ANTLR 3.0.1 to ANTLR 3.1. Since doing this, our application has been running MUCH slower. I did some profiling with VisualVM and found that we were spending most of our time in TokenRewriteStream.getKindOfOps. We get there when we reference $text from a grammar with options output=template and rewrite=true. Are there known performance issues with this scenario in ANTRL 3.1? Would I get better perf with a later version? Any suggested work arounds? Thanks!
> 
> -rich
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rich at dreambox.com  Wed Aug 22 14:53:04 2012
From: rich at dreambox.com (Richard Knox)
Date: Wed, 22 Aug 2012 21:53:04 +0000
Subject: [antlr-interest] Common token vocabulary
Message-ID: <CC5AA2BB.1EF4C%rich@dreambox.com>

I have an ANTLR based application that parses either of two variations of a target language. The two variations have a mostly common vocabulary. There are around 200 tokens in common and less than 10 specific to one variations or the other. I want to token types for the common vocabulary tokens to be the same for both language variations so that I can reference token types in custom Java code that is used by both variations.

I had a solution working with ANTLR 3.1 that put the common tokens in a base vocabulary lexer grammar. The base vocabulary grammar was imported into combined lexer/parse grammars, one for each language variation. ANTLR 3.1 generated token types in the order the token appeared, so the common vocabulary tokens had the same types in both language variations. The variation specific tokens were then assigned larger numbers.

I'm currently attempting to upgrade this to ANTLR 3.4, and have run into a problem. ANTLR 3.4 seems to alpha sort the tokens by name before assigning token types. This mixes variation specific tokens with common vocabulary tokens, and the type numbers no longer match for the common tokens.

Is there a better way to accomplish this in ANTLR 3.4? Thanks.

-rich

From jimi at temporal-wave.com  Wed Aug 22 15:04:42 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 22 Aug 2012 15:04:42 -0700
Subject: [antlr-interest] Common token vocabulary
In-Reply-To: <CC5AA2BB.1EF4C%rich@dreambox.com>
References: <CC5AA2BB.1EF4C%rich@dreambox.com>
Message-ID: <f2a23719d8a360e8e55fde21ca4b78aa@mail.gmail.com>

It's easier than that.

List your tokens in a file (mytokens.tokens), copying the trivial output
style of one of your lexers. Add all the tokens for both lexers. Then use
the vocab=mytokens; option in both of your lexers. Just make sure that the
token numbers are contiguous, and that they are not duplicate. Also, make
sure you add to the list if you add new rules.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Richard Knox
> Sent: Wednesday, August 22, 2012 2:53 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Common token vocabulary
>
> I have an ANTLR based application that parses either of two variations
> of a target language. The two variations have a mostly common
> vocabulary. There are around 200 tokens in common and less than 10
> specific to one variations or the other. I want to token types for the
> common vocabulary tokens to be the same for both language variations so
> that I can reference token types in custom Java code that is used by
> both variations.
>
> I had a solution working with ANTLR 3.1 that put the common tokens in a
> base vocabulary lexer grammar. The base vocabulary grammar was imported
> into combined lexer/parse grammars, one for each language variation.
> ANTLR 3.1 generated token types in the order the token appeared, so the
> common vocabulary tokens had the same types in both language
> variations. The variation specific tokens were then assigned larger
> numbers.
>
> I'm currently attempting to upgrade this to ANTLR 3.4, and have run
> into a problem. ANTLR 3.4 seems to alpha sort the tokens by name before
> assigning token types. This mixes variation specific tokens with common
> vocabulary tokens, and the type numbers no longer match for the common
> tokens.
>
> Is there a better way to accomplish this in ANTLR 3.4? Thanks.
>
> -rich
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From kirby.bohling at gmail.com  Wed Aug 22 15:09:49 2012
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Wed, 22 Aug 2012 17:09:49 -0500
Subject: [antlr-interest] Common token vocabulary
In-Reply-To: <CC5AA2BB.1EF4C%rich@dreambox.com>
References: <CC5AA2BB.1EF4C%rich@dreambox.com>
Message-ID: <CA+bn5rxwUtNt=noi_87VMjqYJLgZ-dONxv5KcuNODM3i3s=_5g@mail.gmail.com>

Isn't there an option to specify the tokens property file.  You'd just have
to enumerate the tokens once by hand (which would be annoying).

Here this guy talks about the option and a problem he's had with it:
http://qscribble.blogspot.com/2007/07/im-not-sure-if-lexers-support.html

The option is called "tokenVocab".

Kirby


On Wed, Aug 22, 2012 at 4:53 PM, Richard Knox <rich at dreambox.com> wrote:

> I have an ANTLR based application that parses either of two variations of
> a target language. The two variations have a mostly common vocabulary.
> There are around 200 tokens in common and less than 10 specific to one
> variations or the other. I want to token types for the common vocabulary
> tokens to be the same for both language variations so that I can reference
> token types in custom Java code that is used by both variations.
>
> I had a solution working with ANTLR 3.1 that put the common tokens in a
> base vocabulary lexer grammar. The base vocabulary grammar was imported
> into combined lexer/parse grammars, one for each language variation. ANTLR
> 3.1 generated token types in the order the token appeared, so the common
> vocabulary tokens had the same types in both language variations. The
> variation specific tokens were then assigned larger numbers.
>
> I'm currently attempting to upgrade this to ANTLR 3.4, and have run into a
> problem. ANTLR 3.4 seems to alpha sort the tokens by name before assigning
> token types. This mixes variation specific tokens with common vocabulary
> tokens, and the type numbers no longer match for the common tokens.
>
> Is there a better way to accomplish this in ANTLR 3.4? Thanks.
>
> -rich
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rich at dreambox.com  Thu Aug 23 10:58:36 2012
From: rich at dreambox.com (Richard Knox)
Date: Thu, 23 Aug 2012 17:58:36 +0000
Subject: [antlr-interest] Performance problem with $text in ANTLR 3.1
In-Reply-To: <9FC5D144-5C79-4512-A9CA-20CE81286452@temporal-wave.com>
Message-ID: <CC5BB787.1EFD0%rich@dreambox.com>

I've upgraded to ANTLR 3.4, and I'm still seeing the same problem. One
test with VisualVM showed us spending 126 sec. (78% of total time) in
TokenRewriteStream.getKindOfOps. The big time consumers came from usages
of $text. Some of this grammar is old and krufty. We may be using $text
gratuitously, but I didn't see these problems with ANTLR 3.0.1.

I may be able to mitigate this problem by avoiding use of $text. For
example the following code accounted for 58 seconds of the time we spent
in getKindOfOps:

regular_tokens
	:	WORD -> template(val={ cpp.Lookup($text) }) "<val>"
	|	INT_LITERAL
	|	STRING_LITERAL
	|	PROXY_START_LITERAL | PROXY_MIDDLE_LITERAL | PROXY_END_LITERAL
	|	punctuation
	;

I made the following change to use $WORD.text instead of text:

regular_tokens
	:	WORD -> template(val={ cpp.Lookup($WORD.text) }) "<val>"
	|	INT_LITERAL
	|	STRING_LITERAL
	|	PROXY_START_LITERAL | PROXY_MIDDLE_LITERAL | PROXY_END_LITERAL
	|	punctuation
	;

This dropped total time in getKindOfOpes from 126 sec to 37 sec.

Two questions:
1) Is $text known to be badly performing? Should we avoid its use wherever
possible?
2) What changed from ANTLR 3.0.1 to cause this dramatic slow down?

Thanks.

-rich



On 8/21/12 6:55 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:

>Move to 3.4. String template is much faster. However I am not sure about
>your view of the performance traits; but go to 3.4 and then you will be
>in a space to start analysis properly. At 3.1 no one can really help.
>
>Jim
>
>On Aug 21, 2012, at 6:26 PM, Richard Knox <rich at dreambox.com> wrote:
>
>> I recently upgraded an ANTLR based application from ANTLR 3.0.1 to
>>ANTLR 3.1. Since doing this, our application has been running MUCH
>>slower. I did some profiling with VisualVM and found that we were
>>spending most of our time in TokenRewriteStream.getKindOfOps. We get
>>there when we reference $text from a grammar with options
>>output=template and rewrite=true. Are there known performance issues
>>with this scenario in ANTRL 3.1? Would I get better perf with a later
>>version? Any suggested work arounds? Thanks!
>> 
>> -rich
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: 
>>http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu Aug 23 15:06:49 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 23 Aug 2012 15:06:49 -0700
Subject: [antlr-interest] Performance problem with $text in ANTLR 3.1
In-Reply-To: <CC5BB787.1EFD0%rich@dreambox.com>
References: <CC5BB787.1EFD0%rich@dreambox.com>
Message-ID: <BAE2B661-6723-46A1-8CE5-836AA9B30406@antlr.org>

hi. maybe your grammar backtracks a lot and so there's lots of template construction.
Ter
On Aug 23, 2012, at 10:58 AM, Richard Knox <rich at dreambox.com> wrote:

> I've upgraded to ANTLR 3.4, and I'm still seeing the same problem. One
> test with VisualVM showed us spending 126 sec. (78% of total time) in
> TokenRewriteStream.getKindOfOps. The big time consumers came from usages
> of $text. Some of this grammar is old and krufty. We may be using $text
> gratuitously, but I didn't see these problems with ANTLR 3.0.1.
> 
> I may be able to mitigate this problem by avoiding use of $text. For
> example the following code accounted for 58 seconds of the time we spent
> in getKindOfOps:
> 
> regular_tokens
> 	:	WORD -> template(val={ cpp.Lookup($text) }) "<val>"
> 	|	INT_LITERAL
> 	|	STRING_LITERAL
> 	|	PROXY_START_LITERAL | PROXY_MIDDLE_LITERAL | PROXY_END_LITERAL
> 	|	punctuation
> 	;
> 
> I made the following change to use $WORD.text instead of text:
> 
> regular_tokens
> 	:	WORD -> template(val={ cpp.Lookup($WORD.text) }) "<val>"
> 	|	INT_LITERAL
> 	|	STRING_LITERAL
> 	|	PROXY_START_LITERAL | PROXY_MIDDLE_LITERAL | PROXY_END_LITERAL
> 	|	punctuation
> 	;
> 
> This dropped total time in getKindOfOpes from 126 sec to 37 sec.
> 
> Two questions:
> 1) Is $text known to be badly performing? Should we avoid its use wherever
> possible?
> 2) What changed from ANTLR 3.0.1 to cause this dramatic slow down?
> 
> Thanks.
> 
> -rich
> 
> 
> 
> On 8/21/12 6:55 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:
> 
>> Move to 3.4. String template is much faster. However I am not sure about
>> your view of the performance traits; but go to 3.4 and then you will be
>> in a space to start analysis properly. At 3.1 no one can really help.
>> 
>> Jim
>> 
>> On Aug 21, 2012, at 6:26 PM, Richard Knox <rich at dreambox.com> wrote:
>> 
>>> I recently upgraded an ANTLR based application from ANTLR 3.0.1 to
>>> ANTLR 3.1. Since doing this, our application has been running MUCH
>>> slower. I did some profiling with VisualVM and found that we were
>>> spending most of our time in TokenRewriteStream.getKindOfOps. We get
>>> there when we reference $text from a grammar with options
>>> output=template and rewrite=true. Are there known performance issues
>>> with this scenario in ANTRL 3.1? Would I get better perf with a later
>>> version? Any suggested work arounds? Thanks!
>>> 
>>> -rich
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: 
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rich at dreambox.com  Thu Aug 23 18:09:56 2012
From: rich at dreambox.com (Richard Knox)
Date: Fri, 24 Aug 2012 01:09:56 +0000
Subject: [antlr-interest] Performance problem with $text in ANTLR 3.1
In-Reply-To: <BAE2B661-6723-46A1-8CE5-836AA9B30406@antlr.org>
Message-ID: <CC5C1E6E.1F0D3%rich@dreambox.com>

I'm not sure backtracking is the issue here. This grammar implements a C
like preprocessor by rewriting the token input stream. The rewrite grammar
option is true and we use a TokeRewriteStream as input. Using $text
results in a call stack like this:

  BufferedTokeStream.toString(Token, Token)
  TokenRewriteStream.toString(int, int)
  TokenRewriteStream.toString(String, int, int)

  TokenRewriteStream.reduceToSingleOperationPerIndex(List)
  TokenRewriteStream.getKindOfOps(List, Class, int)

I haven't analyzed the code in detail, but reduceToSingleOperationPerIndex
seems to a lot of work, although most of the time is spent in
getKindOfOps. I found two places where $text was referenced many times in
each input line. I found ways of getting the desired behavior without
referencing $text. We're still not as fast as we were with 3.0.1, but
performance is now usable and getKindOfOps is no longer a major hot spot.

Thanks all for your suggestions.

-rich
  

On 8/23/12 3:06 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

>hi. maybe your grammar backtracks a lot and so there's lots of template
>construction.
>Ter
>On Aug 23, 2012, at 10:58 AM, Richard Knox <rich at dreambox.com> wrote:
>
>> I've upgraded to ANTLR 3.4, and I'm still seeing the same problem. One
>> test with VisualVM showed us spending 126 sec. (78% of total time) in
>> TokenRewriteStream.getKindOfOps. The big time consumers came from usages
>> of $text. Some of this grammar is old and krufty. We may be using $text
>> gratuitously, but I didn't see these problems with ANTLR 3.0.1.
>> 
>> I may be able to mitigate this problem by avoiding use of $text. For
>> example the following code accounted for 58 seconds of the time we spent
>> in getKindOfOps:
>> 
>> regular_tokens
>> 	:	WORD -> template(val={ cpp.Lookup($text) }) "<val>"
>> 	|	INT_LITERAL
>> 	|	STRING_LITERAL
>> 	|	PROXY_START_LITERAL | PROXY_MIDDLE_LITERAL | PROXY_END_LITERAL
>> 	|	punctuation
>> 	;
>> 
>> I made the following change to use $WORD.text instead of text:
>> 
>> regular_tokens
>> 	:	WORD -> template(val={ cpp.Lookup($WORD.text) }) "<val>"
>> 	|	INT_LITERAL
>> 	|	STRING_LITERAL
>> 	|	PROXY_START_LITERAL | PROXY_MIDDLE_LITERAL | PROXY_END_LITERAL
>> 	|	punctuation
>> 	;
>> 
>> This dropped total time in getKindOfOpes from 126 sec to 37 sec.
>> 
>> Two questions:
>> 1) Is $text known to be badly performing? Should we avoid its use
>>wherever
>> possible?
>> 2) What changed from ANTLR 3.0.1 to cause this dramatic slow down?
>> 
>> Thanks.
>> 
>> -rich
>> 
>> 
>> 
>> On 8/21/12 6:55 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:
>> 
>>> Move to 3.4. String template is much faster. However I am not sure
>>>about
>>> your view of the performance traits; but go to 3.4 and then you will be
>>> in a space to start analysis properly. At 3.1 no one can really help.
>>> 
>>> Jim
>>> 
>>> On Aug 21, 2012, at 6:26 PM, Richard Knox <rich at dreambox.com> wrote:
>>> 
>>>> I recently upgraded an ANTLR based application from ANTLR 3.0.1 to
>>>> ANTLR 3.1. Since doing this, our application has been running MUCH
>>>> slower. I did some profiling with VisualVM and found that we were
>>>> spending most of our time in TokenRewriteStream.getKindOfOps. We get
>>>> there when we reference $text from a grammar with options
>>>> output=template and rewrite=true. Are there known performance issues
>>>> with this scenario in ANTRL 3.1? Would I get better perf with a later
>>>> version? Any suggested work arounds? Thanks!
>>>> 
>>>> -rich
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: 
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: 
>>http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From thiriet.aurelien at gmail.com  Fri Aug 24 02:41:47 2012
From: thiriet.aurelien at gmail.com (Aurelien Thiriet)
Date: Fri, 24 Aug 2012 11:41:47 +0200
Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
Message-ID: <CAM28Gco48Frm4O2wV=GjiriHJfk-=1T3US4SGVRtaJ_mQspWDg@mail.gmail.com>

Hi,

I'm new to ANTLR (I've read the books by the way ;)).


I'd like to parse and build AST for this kind of file :

"
package1 data11;
package1 data12;

package2 data21;
package2 data22;
"

Which means  data11 and data12 belongs to package1, data21 and data22
belongs to package2.


Its very easy to build this kind of AST :

(DOCUMENT (DATA ( PACKAGE(package1) data11) DATA ( PACKAGE(package1)
data12) DATA ( PACKAGE(package2) data21) DATA ( PACKAGE(package1) data22)))


But my point is to reverse it like this :
(DOCUMENT ( PACKAGE (package1 DATA(data11) DATA(data12)))    ( PACKAGE
(package2 DATA(data21) DATA(data22)))   )


How would you write the grammar to perform this AST ?

I've almost succed using many  java code into grammar file, but I'd like to
use grammar only if possible.


Thanks a lot

Aur?lien

From andron-eiu at mail.ru  Fri Aug 24 04:30:40 2012
From: andron-eiu at mail.ru (=?UTF-8?B?0JDQvdC00YDQtdC5INCQ0YHQtdC10LI=?=)
Date: Fri, 24 Aug 2012 15:30:40 +0400
Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
In-Reply-To: <CAM28Gco48Frm4O2wV=GjiriHJfk-=1T3US4SGVRtaJ_mQspWDg@mail.gmail.com>
References: <CAM28Gco48Frm4O2wV=GjiriHJfk-=1T3US4SGVRtaJ_mQspWDg@mail.gmail.com>
Message-ID: <503765E0.8040700@mail.ru>

Hi, Aurelien.

Do you want grammar to build AST or to perform AST reverse transformaion?

24.08.2012 13:41, Aurelien Thiriet ?????:
> Hi,
>
> I'm new to ANTLR (I've read the books by the way ;)).
>
>
> I'd like to parse and build AST for this kind of file :
>
> "
> package1 data11;
> package1 data12;
>
> package2 data21;
> package2 data22;
> "
>
> Which means  data11 and data12 belongs to package1, data21 and data22
> belongs to package2.
>
>
> Its very easy to build this kind of AST :
>
> (DOCUMENT (DATA ( PACKAGE(package1) data11) DATA ( PACKAGE(package1)
> data12) DATA ( PACKAGE(package2) data21) DATA ( PACKAGE(package1) data22)))
>
>
> But my point is to reverse it like this :
> (DOCUMENT ( PACKAGE (package1 DATA(data11) DATA(data12)))    ( PACKAGE
> (package2 DATA(data21) DATA(data22)))   )
>
>
> How would you write the grammar to perform this AST ?
>
> I've almost succed using many  java code into grammar file, but I'd like to
> use grammar only if possible.
>
>
> Thanks a lot
>
> Aur?lien
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From jimi at temporal-wave.com  Fri Aug 24 11:36:50 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 24 Aug 2012 11:36:50 -0700
Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
In-Reply-To: <CAM28Gco48Frm4O2wV=GjiriHJfk-=1T3US4SGVRtaJ_mQspWDg@mail.gmail.com>
References: <CAM28Gco48Frm4O2wV=GjiriHJfk-=1T3US4SGVRtaJ_mQspWDg@mail.gmail.com>
Message-ID: <d4d256bf0419454b0e9fe12e23288a03@mail.gmail.com>

I can't see why you would want to do this. Perhaps you are asking the
wrong question - can you explain what you are trying to achieve, as there
may be better ways to achieve what you are trying to do.

Your question as it stands cannot really be answered as you don't say
anything about the bounds/cardinality. If your input is always four lines
like this, then there is no need for a grammar, as a few lines of C would
do it. If there is an unlimited set, then how do you determine what swaps
with what?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Aurelien Thiriet
> Sent: Friday, August 24, 2012 2:42 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
>
> Hi,
>
> I'm new to ANTLR (I've read the books by the way ;)).
>
>
> I'd like to parse and build AST for this kind of file :
>
> "
> package1 data11;
> package1 data12;
>
> package2 data21;
> package2 data22;
> "
>
> Which means  data11 and data12 belongs to package1, data21 and data22
> belongs to package2.
>
>
> Its very easy to build this kind of AST :
>
> (DOCUMENT (DATA ( PACKAGE(package1) data11) DATA ( PACKAGE(package1)
> data12) DATA ( PACKAGE(package2) data21) DATA ( PACKAGE(package1)
> data22)))
>
>
> But my point is to reverse it like this :
> (DOCUMENT ( PACKAGE (package1 DATA(data11) DATA(data12)))    ( PACKAGE
> (package2 DATA(data21) DATA(data22)))   )
>
>
> How would you write the grammar to perform this AST ?
>
> I've almost succed using many  java code into grammar file, but I'd
> like to use grammar only if possible.
>
>
> Thanks a lot
>
> Aur?lien
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jmcgrew at hansprestige.com  Fri Aug 24 12:46:11 2012
From: jmcgrew at hansprestige.com (Jesse McGrew)
Date: Fri, 24 Aug 2012 12:46:11 -0700
Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
In-Reply-To: <d4d256bf0419454b0e9fe12e23288a03@mail.gmail.com>
References: <CAM28Gco48Frm4O2wV=GjiriHJfk-=1T3US4SGVRtaJ_mQspWDg@mail.gmail.com>
	<d4d256bf0419454b0e9fe12e23288a03@mail.gmail.com>
Message-ID: <CAJ3AhhXA6A-4TdcRq6cq=HQFxQm46CSVfeg8T_vS8_SoqvXhNQ@mail.gmail.com>

It sounds like he just wants to group the AST by the package name
(first token on the line). So all the "package1" data nodes go in one
tree, all the "package2" data nodes go in another, etc.

Jesse

On Fri, Aug 24, 2012 at 11:36 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> I can't see why you would want to do this. Perhaps you are asking the
> wrong question - can you explain what you are trying to achieve, as there
> may be better ways to achieve what you are trying to do.
>
> Your question as it stands cannot really be answered as you don't say
> anything about the bounds/cardinality. If your input is always four lines
> like this, then there is no need for a grammar, as a few lines of C would
> do it. If there is an unlimited set, then how do you determine what swaps
> with what?
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Aurelien Thiriet
>> Sent: Friday, August 24, 2012 2:42 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
>>
>> Hi,
>>
>> I'm new to ANTLR (I've read the books by the way ;)).
>>
>>
>> I'd like to parse and build AST for this kind of file :
>>
>> "
>> package1 data11;
>> package1 data12;
>>
>> package2 data21;
>> package2 data22;
>> "
>>
>> Which means  data11 and data12 belongs to package1, data21 and data22
>> belongs to package2.
>>
>>
>> Its very easy to build this kind of AST :
>>
>> (DOCUMENT (DATA ( PACKAGE(package1) data11) DATA ( PACKAGE(package1)
>> data12) DATA ( PACKAGE(package2) data21) DATA ( PACKAGE(package1)
>> data22)))
>>
>>
>> But my point is to reverse it like this :
>> (DOCUMENT ( PACKAGE (package1 DATA(data11) DATA(data12)))    ( PACKAGE
>> (package2 DATA(data21) DATA(data22)))   )
>>
>>
>> How would you write the grammar to perform this AST ?
>>
>> I've almost succed using many  java code into grammar file, but I'd
>> like to use grammar only if possible.
>>
>>
>> Thanks a lot
>>
>> Aur?lien
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jmcgrew at hansprestige.com  Fri Aug 24 12:53:39 2012
From: jmcgrew at hansprestige.com (Jesse McGrew)
Date: Fri, 24 Aug 2012 12:53:39 -0700
Subject: [antlr-interest] Triggering a lexical "include" from the parser
Message-ID: <CAJ3AhhW4jn3NTmSxi7cZ8EXrb=evWD4CW+-+qBen-WqDEjTnXw@mail.gmail.com>

Hi all, I posted this question to StackOverflow
(http://stackoverflow.com/questions/12104324/how-can-my-antlr-parser-not-lexer-trigger-a-lexical-include-not-ast-splice)
but I'd appreciate your input on it too, either here or over there...

The ANTLR website describes two approaches
(http://www.antlr.org/wiki/pages/viewpage.action?pageId=557057) to
implementing "include" directives. The first approach is to recognize
the directive in the lexer and include the file lexically (by pushing
the CharStream onto a stack and replacing it with one that reads the
new file); the second is to recognize the directive in the parser,
launch a sub-parser to parse the new file, and splice in the AST
generated by the sub-parser. Neither of these are quite what I need.

In the language I'm parsing, recognizing the directive in the lexer is
impractical for a few reasons:

* There is no self-contained character pattern that always means "this
is an include directive". For example, 'Include "foo";' at top level
is an include directive, but in 'Array bar --> Include "foo";' or
'Constant Include "foo";' the word 'Include' is an identifier.
* The name of the file to include may be given as a string or as a
constant identifier, and such constants can be defined with
arbitrarily complex expressions. (That is, the Constant directive in
general supports arbitrary expressions, as long as they can be
calculated at compile time, although there are no compile-time string
operators so in this specific case the expressions are either a quoted
string or another constant identifier.)

So I want to trigger the inclusion from the parser. But to perform the
inclusion, I can't launch a sub-parser and splice the AST together; I
have to splice the tokens. It's legal for a block to begin with '{' in
the main file and be terminated by '}' in the included file. A file
included inside a function can even close the function definition and
start a new one.

It seems like I'll need something like the first approach but at the
level of TokenStreams instead of CharStreams. Is that a viable
approach? How much state would I need to keep on the stack, and how
would I make the parser switch back to the original token stream
instead of terminating when it hits EOF? Or is there a better way to
handle this?

Here's an example of the language, demonstrating that blocks opened in
the main file can be closed in the included file (and vice versa).
Note that the '#' before 'Include' is required when the directive is
inside a function, but optional outside.

main.inf:

    [ Main;
      print "This is Main!";
      if (0) {
      #include "other.h";
      print "This is OtherFunction!";
    ];

other.h:

      } ! end if
    ];  ! end Main

    [ OtherFunction;

From cristiano at defaveri.com.br  Fri Aug 24 16:45:32 2012
From: cristiano at defaveri.com.br (cristiano at defaveri.com.br)
Date: Fri, 24 Aug 2012 20:45:32 -0300
Subject: [antlr-interest] Keeping AST state between parsing and walker
Message-ID: <dc90b52b54ea69b45bfe3f5a2e5df1bf@defaveri.com.br>

  

Hi All, 

We are working on a language translator with antlr 3.x
and we divided our job in 3 passes (lexer/parsing, walker (tree grammar)
to perform some transformation and semantic checks and a generator to
write our final code) 

In order to perform semantic analysis, we
created heterogeneous AST nodes on phase 1 to keep additional
information depending on the token type. On the phase 2 (walker), we
would use that information to check some dependencies. Our doubt is how
could we keep these specific node on the construction of the AST of the
second phase ?  

We realized the dupNode() method from CommonTree
swallow the current node and create another one using the adaptor. One
solution we thought about is to override the adaptor and rewrite the
dupNode(Object), loading the necessary information to this new node.
Thus, since we have different node type, this would be a very hard work
do to.  

Does anyone know another solution or could share some design
you have used for semantic checking between phases ? 

Thank you in
advance. 

Example (phase1) : the findClause rewrites the FIND to node
to be of FindClause type. @after fills some information in the object of
FindClause type. 

... 

findClause 

@after { 

 registerFind
((CommonTree)$findClause.tree, $bo);  

 } 

 : FIND bindingObject (','
bindingObject)* -> ^(FIND["FIND"] bindingObject+)
 ; 

bindingObject
 :
(objectType ID*) 
 ; 

objectType 

 : PACKAGE | CLASS | ASPECT |
INTERFACE 

 ; 

resultsClause 

 : RESULTS ID* -> ^(RESULTS ID+) 

 ; 


This is the AST after parsing : 

Parser => (FIND (aspect a)) (results
a) 

--- WALKER --- 

... 

findClause 

 : ^(FIND bindingObject+)  

 ;


bindingObject 

 : ^(objectType ID*)  

 ; 

objectType 

 : PACKAGE |
CLASS | ASPECT | INTERFACE  

 ; 

resultsClause 

 : ^(RESULTS ID*)  


;  

--- FindClause class --- 

public class FindClause extends
CommonTree { 

 protected void registerBinding (List binding) {}  


public FindClause(Token token) { 

  this.token = token; 

 } 

 public
FindClause(int tType, String text) { 

  this(new CommonToken(tType,
text)); 

 } 

 public FindClause(CommonTree node) { 

  super(node); 


} 

 public Tree dupNode() {  

  return new FindClause(this);  

 }  


public String toString() {  

  return token.getText(); 

 } 

} 

  

From thiriet.aurelien at gmail.com  Sun Aug 26 23:53:19 2012
From: thiriet.aurelien at gmail.com (Aurelien Thiriet)
Date: Mon, 27 Aug 2012 08:53:19 +0200
Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
	(Jesse McGrew)
Message-ID: <CAM28Gcrf-znNn2TLVMxx7i93L15PYyk2c_zOgDaRtBCPg-cbGQ@mail.gmail.com>

Hi Jesse,


You got it, this is my need.

For sure I could have done it's parsing directly in raw C, but the exemple
I give is a simplified one... the grammar I'm working on is much more
complex but I didn't want to mix problems.

If I could solve this little one first, I would be happy !



Aurelien

> ----------------------------------------------------------------------
>
> Message: 1
> Date: Fri, 24 Aug 2012 12:46:11 -0700
> From: Jesse McGrew <jmcgrew at hansprestige.com>
> Subject: Re: [antlr-interest] Problem to build AST (kind of reverse
>         AST)
> To: antlr-interest <antlr-interest at antlr.org>
> Message-ID:
>         <CAJ3AhhXA6A-4TdcRq6cq=
> HQFxQm46CSVfeg8T_vS8_SoqvXhNQ at mail.gmail.com>
> Content-Type: text/plain; charset=ISO-8859-1
>
> It sounds like he just wants to group the AST by the package name
> (first token on the line). So all the "package1" data nodes go in one
> tree, all the "package2" data nodes go in another, etc.
>
> Jesse
>
> On Fri, Aug 24, 2012 at 11:36 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> > I can't see why you would want to do this. Perhaps you are asking the
> > wrong question - can you explain what you are trying to achieve, as there
> > may be better ways to achieve what you are trying to do.
> >
> > Your question as it stands cannot really be answered as you don't say
> > anything about the bounds/cardinality. If your input is always four lines
> > like this, then there is no need for a grammar, as a few lines of C would
> > do it. If there is an unlimited set, then how do you determine what swaps
> > with what?
> >
> > Jim
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Aurelien Thiriet
> >> Sent: Friday, August 24, 2012 2:42 AM
> >> To: antlr-interest at antlr.org
> >> Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
> >>
> >> Hi,
> >>
> >> I'm new to ANTLR (I've read the books by the way ;)).
> >>
> >>
> >> I'd like to parse and build AST for this kind of file :
> >>
> >> "
> >> package1 data11;
> >> package1 data12;
> >>
> >> package2 data21;
> >> package2 data22;
> >> "
> >>
> >> Which means  data11 and data12 belongs to package1, data21 and data22
> >> belongs to package2.
> >>
> >>
> >> Its very easy to build this kind of AST :
> >>
> >> (DOCUMENT (DATA ( PACKAGE(package1) data11) DATA ( PACKAGE(package1)
> >> data12) DATA ( PACKAGE(package2) data21) DATA ( PACKAGE(package1)
> >> data22)))
> >>
> >>
> >> But my point is to reverse it like this :
> >> (DOCUMENT ( PACKAGE (package1 DATA(data11) DATA(data12)))    ( PACKAGE
> >> (package2 DATA(data21) DATA(data22)))   )
> >>
> >>
> >> How would you write the grammar to perform this AST ?
> >>
> >> I've almost succed using many  java code into grammar file, but I'd
> >> like to use grammar only if possible.
> >>
> >>
> >> Thanks a lot
> >>
> >> Aur?lien
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> >> email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From atul at entrib.com  Mon Aug 27 00:01:13 2012
From: atul at entrib.com (Atul Dambalkar)
Date: Mon, 27 Aug 2012 12:31:13 +0530
Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
	(Jesse McGrew)
In-Reply-To: <CAM28Gcrf-znNn2TLVMxx7i93L15PYyk2c_zOgDaRtBCPg-cbGQ@mail.gmail.com>
References: <CAM28Gcrf-znNn2TLVMxx7i93L15PYyk2c_zOgDaRtBCPg-cbGQ@mail.gmail.com>
Message-ID: <00b001cd8421$c18330c0$44899240$@entrib.com>

Hi Aurelien,

Can you pass the current grammar for parsing following, 

package1 data11;
package1 data12;

package2 data21;
package2 data22;

I can give it a try to help.

-Atul

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Aurelien Thiriet
Sent: Monday, August 27, 2012 12:23 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Problem to build AST (kind of reverse AST)
(Jesse McGrew)

Hi Jesse,


You got it, this is my need.

For sure I could have done it's parsing directly in raw C, but the exemple I
give is a simplified one... the grammar I'm working on is much more complex
but I didn't want to mix problems.

If I could solve this little one first, I would be happy !



Aurelien

> ----------------------------------------------------------------------
>
> Message: 1
> Date: Fri, 24 Aug 2012 12:46:11 -0700
> From: Jesse McGrew <jmcgrew at hansprestige.com>
> Subject: Re: [antlr-interest] Problem to build AST (kind of reverse
>         AST)
> To: antlr-interest <antlr-interest at antlr.org>
> Message-ID:
>         <CAJ3AhhXA6A-4TdcRq6cq=
> HQFxQm46CSVfeg8T_vS8_SoqvXhNQ at mail.gmail.com>
> Content-Type: text/plain; charset=ISO-8859-1
>
> It sounds like he just wants to group the AST by the package name 
> (first token on the line). So all the "package1" data nodes go in one 
> tree, all the "package2" data nodes go in another, etc.
>
> Jesse
>
> On Fri, Aug 24, 2012 at 11:36 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> > I can't see why you would want to do this. Perhaps you are asking 
> > the wrong question - can you explain what you are trying to achieve, 
> > as there may be better ways to achieve what you are trying to do.
> >
> > Your question as it stands cannot really be answered as you don't 
> > say anything about the bounds/cardinality. If your input is always 
> > four lines like this, then there is no need for a grammar, as a few 
> > lines of C would do it. If there is an unlimited set, then how do 
> > you determine what swaps with what?
> >
> > Jim
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> >> bounces at antlr.org] On Behalf Of Aurelien Thiriet
> >> Sent: Friday, August 24, 2012 2:42 AM
> >> To: antlr-interest at antlr.org
> >> Subject: [antlr-interest] Problem to build AST (kind of reverse 
> >> AST)
> >>
> >> Hi,
> >>
> >> I'm new to ANTLR (I've read the books by the way ;)).
> >>
> >>
> >> I'd like to parse and build AST for this kind of file :
> >>
> >> "
> >> package1 data11;
> >> package1 data12;
> >>
> >> package2 data21;
> >> package2 data22;
> >> "
> >>
> >> Which means  data11 and data12 belongs to package1, data21 and 
> >> data22 belongs to package2.
> >>
> >>
> >> Its very easy to build this kind of AST :
> >>
> >> (DOCUMENT (DATA ( PACKAGE(package1) data11) DATA ( 
> >> PACKAGE(package1)
> >> data12) DATA ( PACKAGE(package2) data21) DATA ( PACKAGE(package1)
> >> data22)))
> >>
> >>
> >> But my point is to reverse it like this :
> >> (DOCUMENT ( PACKAGE (package1 DATA(data11) DATA(data12)))    ( PACKAGE
> >> (package2 DATA(data21) DATA(data22)))   )
> >>
> >>
> >> How would you write the grammar to perform this AST ?
> >>
> >> I've almost succed using many  java code into grammar file, but I'd 
> >> like to use grammar only if possible.
> >>
> >>
> >> Thanks a lot
> >>
> >> Aur?lien
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe: 
> >> http://www.antlr.org/mailman/options/antlr-interest/your-
> >> email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From pedrogfrancisco at gmail.com  Mon Aug 27 03:43:37 2012
From: pedrogfrancisco at gmail.com (Pedro Francisco)
Date: Mon, 27 Aug 2012 11:43:37 +0100
Subject: [antlr-interest] Is www.antlr.org down?
In-Reply-To: <68E9B107-7545-4EC2-9D54-55140EA65F9F@cs.usfca.edu>
References: <CAN45N12JbkWK6nS9b5WL=5pLYqiORMeEGvHiQP5X3eXK5=9rpA@mail.gmail.com>
	<68E9B107-7545-4EC2-9D54-55140EA65F9F@cs.usfca.edu>
Message-ID: <CAJZjf_wr7hAZUZr5_7TASFXVfLzAzpQu1QwNNYwTotOE6+Lw4A@mail.gmail.com>

On Tue, Jun 26, 2012 at 5:16 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> hi. sorry. tomcat/confluence wiki combo likes to get wedged every few weeks. even after killing jira. oh well.  back up.

Site appears to be down again :)

From atul at entrib.com  Mon Aug 27 07:19:40 2012
From: atul at entrib.com (Atul Dambalkar)
Date: Mon, 27 Aug 2012 19:49:40 +0530
Subject: [antlr-interest] Problem to build AST (kind of reverse AST)
	(Jesse McGrew)
In-Reply-To: <CAM28Gco7PVGT46tHX8oEC0Bar99_hA51mgS9zSD9TdAE_yEbdQ@mail.gmail.com>
References: <CAM28Gcrf-znNn2TLVMxx7i93L15PYyk2c_zOgDaRtBCPg-cbGQ@mail.gmail.com>
	<00b001cd8421$c18330c0$44899240$@entrib.com>
	<CAM28Gco7PVGT46tHX8oEC0Bar99_hA51mgS9zSD9TdAE_yEbdQ@mail.gmail.com>
Message-ID: <002701cd845f$01bd38b0$0537aa10$@entrib.com>

Hi Aurlien,

 

I don't think if it's possible for Antlr to generate the tree structure you
want. Simply because, there is some semantics involved here. You will have
to keep track of the package name seen earlier in the parsing to append the
respective data name nodes. You either will have to tweak your grammar to
chain the package along with data nodes or do another in-memory pass on the
current generated AST to turn into the way you want it.

 

Also cc'ing it to the group so that if anyone has any other comments.

 

HTH,

 

-Atul

 

From: Aurelien Thiriet [mailto:thiriet.aurelien at gmail.com] 
Sent: Monday, August 27, 2012 1:20 PM
To: atul at entrib.com
Subject: Re: [antlr-interest] Problem to build AST (kind of reverse AST)
(Jesse McGrew)

 

Hi Atul,

Thanks for your interest.


This is the grammar I start with to parse :
"
package1 data11;
package1 data12;

package2 data21;
package2 data22;
"

"
grammar myDebug;

options
{ 
    output=AST;
}

tokens
{
    DOCUMENT;
    PACKAGE;
    PACKAGENAME;
    PACKAGECONTENT;
    
    DATA;
}

myDocument
    :
        (myData)*
        -> ^(DOCUMENT myData*)
    ;

myData    :
        thePackage=ID  theData=ID ';'
        -> ^(DATA ^(PACKAGE ^(PACKAGENAME $thePackage) ^(PACKAGECONTENT) )
$theData)
    ;


ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;
"


With this one this is the output AST : see ExportGrammarForm1.JPG



But I'd like to directly output this AST : see ExportGrammarForm2.JPG








2012/8/27 Atul Dambalkar <atul at entrib.com>

Hi Aurelien,

Can you pass the current grammar for parsing following,


package1 data11;
package1 data12;

package2 data21;
package2 data22;

I can give it a try to help.

-Atul


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Aurelien Thiriet
Sent: Monday, August 27, 2012 12:23 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Problem to build AST (kind of reverse AST)

(Jesse McGrew)

Hi Jesse,


You got it, this is my need.

For sure I could have done it's parsing directly in raw C, but the exemple I
give is a simplified one... the grammar I'm working on is much more complex
but I didn't want to mix problems.

If I could solve this little one first, I would be happy !



Aurelien

> ----------------------------------------------------------------------
>
> Message: 1
> Date: Fri, 24 Aug 2012 12:46:11 -0700
> From: Jesse McGrew <jmcgrew at hansprestige.com>
> Subject: Re: [antlr-interest] Problem to build AST (kind of reverse
>         AST)
> To: antlr-interest <antlr-interest at antlr.org>
> Message-ID:
>         <CAJ3AhhXA6A-4TdcRq6cq=
> HQFxQm46CSVfeg8T_vS8_SoqvXhNQ at mail.gmail.com>
> Content-Type: text/plain; charset=ISO-8859-1
>
> It sounds like he just wants to group the AST by the package name
> (first token on the line). So all the "package1" data nodes go in one
> tree, all the "package2" data nodes go in another, etc.
>
> Jesse
>
> On Fri, Aug 24, 2012 at 11:36 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> > I can't see why you would want to do this. Perhaps you are asking
> > the wrong question - can you explain what you are trying to achieve,
> > as there may be better ways to achieve what you are trying to do.
> >
> > Your question as it stands cannot really be answered as you don't
> > say anything about the bounds/cardinality. If your input is always
> > four lines like this, then there is no need for a grammar, as a few
> > lines of C would do it. If there is an unlimited set, then how do
> > you determine what swaps with what?
> >
> > Jim
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Aurelien Thiriet
> >> Sent: Friday, August 24, 2012 2:42 AM
> >> To: antlr-interest at antlr.org
> >> Subject: [antlr-interest] Problem to build AST (kind of reverse
> >> AST)
> >>
> >> Hi,
> >>
> >> I'm new to ANTLR (I've read the books by the way ;)).
> >>
> >>
> >> I'd like to parse and build AST for this kind of file :
> >>
> >> "
> >> package1 data11;
> >> package1 data12;
> >>
> >> package2 data21;
> >> package2 data22;
> >> "
> >>
> >> Which means  data11 and data12 belongs to package1, data21 and
> >> data22 belongs to package2.
> >>
> >>
> >> Its very easy to build this kind of AST :
> >>
> >> (DOCUMENT (DATA ( PACKAGE(package1) data11) DATA (
> >> PACKAGE(package1)
> >> data12) DATA ( PACKAGE(package2) data21) DATA ( PACKAGE(package1)
> >> data22)))
> >>
> >>
> >> But my point is to reverse it like this :
> >> (DOCUMENT ( PACKAGE (package1 DATA(data11) DATA(data12)))    ( PACKAGE
> >> (package2 DATA(data21) DATA(data22)))   )
> >>
> >>
> >> How would you write the grammar to perform this AST ?
> >>
> >> I've almost succed using many  java code into grammar file, but I'd
> >> like to use grammar only if possible.
> >>
> >>
> >> Thanks a lot
> >>
> >> Aur?lien
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-
> >> email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

 


From parrt at cs.usfca.edu  Mon Aug 27 17:33:08 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 27 Aug 2012 17:33:08 -0700
Subject: [antlr-interest] confluence / mysql help
Message-ID: <AE6B51C5-F7E7-4E2E-8EEF-5FA018935A5A@cs.usfca.edu>

Hi, Does anybody want to help me migrate the confluence wiki to mysql from the in memory database hsql? Perhaps I just need some general advice as I go along. I remember getting stuck and frustrated trying to install it the last time.

I can create a clean box at Amazon Web services for trying out installation?

Ter

From darren at darrenduncan.net  Mon Aug 27 22:58:43 2012
From: darren at darrenduncan.net (Darren Duncan)
Date: Mon, 27 Aug 2012 22:58:43 -0700
Subject: [antlr-interest] confluence / mysql help
In-Reply-To: <AE6B51C5-F7E7-4E2E-8EEF-5FA018935A5A@cs.usfca.edu>
References: <AE6B51C5-F7E7-4E2E-8EEF-5FA018935A5A@cs.usfca.edu>
Message-ID: <503C5E13.4020506@darrenduncan.net>

Terence Parr wrote:
> Hi, Does anybody want to help me migrate the confluence wiki to mysql from the in memory database hsql? Perhaps I just need some general advice as I go along. I remember getting stuck and frustrated trying to install it the last time.
> 
> I can create a clean box at Amazon Web services for trying out installation?
> 
> Ter

If you want a SQL database I strongly recommend you use PostgreSQL instead of 
MySQL, as you'll have a better experience.

Postgres 9.1.x is the current stable version and 9.2 is the next major version, 
currently in RC1 status, and is expected to be stable in September.  Use 9.1 if 
you're moving now.

In any event, a quick bit of Googling found these pages:

https://confluence.atlassian.com/display/DOC/Database+Setup+for+PostgreSQL

https://confluence.atlassian.com/display/DOC/Database+Setup+For+MySQL

If you decide to use Postgres I may be able to give you more help in installing it.

-- Darren Duncan

From kierans777 at gmail.com  Tue Aug 28 06:13:54 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Tue, 28 Aug 2012 23:13:54 +1000
Subject: [antlr-interest] Tree pattern matching in C target
Message-ID: <503CC412.8050408@gmail.com>

I tried to write a tree pattern matcher (cf: 
http://www.antlr.org/wiki/display/ANTLR3/Tree+pattern+matching) however 
my C code doesn't have a downup() function.

Searching the mailing list I found a discussion from 2010 about this and 
Jim said that the tree pattern matching had not yet been implemented in 
C.  Is this still the case?

Cheers,

From tomnebula at gmail.com  Tue Aug 28 06:43:18 2012
From: tomnebula at gmail.com (Meng Tian)
Date: Tue, 28 Aug 2012 14:43:18 +0100
Subject: [antlr-interest] Any clue for this internal error?
Message-ID: <CADo5jynA=DgJf+HUoeAGPo62QUL1SHHNsRp0bHULLZHSS3zBvw@mail.gmail.com>

Hello

I am new to ANTLR, and I try to start with a very simple grammar definition
(as follows).

=======================================
grammar CL;

    fragment INPUTS : 'A' | 'B' | 'C' | 'D' | 'E' | 'F';
    fragment OUTPUTS : 'U' | 'V' | 'X' | 'Y' | 'Z';

    fragment INPUT : 'i';
    fragment OUTPUT : 'o';

    ACTION : ( INPUT INPUTS ) | ( OUTPUT OUTPUTS );
=======================================

I was expecting that strings like "iA" and "oU" should be successfully
recognized and given the "ACTION" token. But when I run "java
org.antlr.Tool CL.g", I had the following error message:

=======================================
error(10):  internal error: CL.g : java.lang.ClassCastException:
org.antlr.runtime.tree.CommonTree cannot be cast to
org.antlr.tool.GrammarAST
org.antlr.grammar.v3.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:1467)
org.antlr.grammar.v3.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:1441)
org.antlr.grammar.v3.CodeGenTreeWalker.grammar_(CodeGenTreeWalker.java:509)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:421)
org.antlr.Tool.generateRecognizer(Tool.java:655)
org.antlr.Tool.process(Tool.java:468)
org.antlr.Tool.main(Tool.java:93)
=======================================

I have no idea about this error. Any clue on this?

Thank you.


Regards,
Meng

From kirby.bohling at gmail.com  Tue Aug 28 07:44:41 2012
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Tue, 28 Aug 2012 09:44:41 -0500
Subject: [antlr-interest] Any clue for this internal error?
In-Reply-To: <CADo5jynA=DgJf+HUoeAGPo62QUL1SHHNsRp0bHULLZHSS3zBvw@mail.gmail.com>
References: <CADo5jynA=DgJf+HUoeAGPo62QUL1SHHNsRp0bHULLZHSS3zBvw@mail.gmail.com>
Message-ID: <CA+bn5rwSiqa5nrpRPyqDTBpdBnbZMJS4fw9uZmiC-+uKoOerkg@mail.gmail.com>

That sure looks like you don't have a parser rule, only lexer rules.  I
believe this would work, but I don't have ANTLR handy to actually try it.

=======================================
grammar CL;

    INPUTS : 'A' | 'B' | 'C' | 'D' | 'E' | 'F';
    OUTPUTS : 'U' | 'V' | 'X' | 'Y' | 'Z';

    INPUT : 'i';
    OUTPUT : 'o';

    action: ( INPUT INPUTS ) | ( OUTPUT OUTPUTS );
=======================================

Kirby


On Tue, Aug 28, 2012 at 8:43 AM, Meng Tian <tomnebula at gmail.com> wrote:

> Hello
>
> I am new to ANTLR, and I try to start with a very simple grammar definition
> (as follows).
>
> =======================================
> grammar CL;
>
>     fragment INPUTS : 'A' | 'B' | 'C' | 'D' | 'E' | 'F';
>     fragment OUTPUTS : 'U' | 'V' | 'X' | 'Y' | 'Z';
>
>     fragment INPUT : 'i';
>     fragment OUTPUT : 'o';
>
>     ACTION : ( INPUT INPUTS ) | ( OUTPUT OUTPUTS );
> =======================================
>
> I was expecting that strings like "iA" and "oU" should be successfully
> recognized and given the "ACTION" token. But when I run "java
> org.antlr.Tool CL.g", I had the following error message:
>
> =======================================
> error(10):  internal error: CL.g : java.lang.ClassCastException:
> org.antlr.runtime.tree.CommonTree cannot be cast to
> org.antlr.tool.GrammarAST
> org.antlr.grammar.v3.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:1467)
>
> org.antlr.grammar.v3.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:1441)
> org.antlr.grammar.v3.CodeGenTreeWalker.grammar_(CodeGenTreeWalker.java:509)
> org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:421)
> org.antlr.Tool.generateRecognizer(Tool.java:655)
> org.antlr.Tool.process(Tool.java:468)
> org.antlr.Tool.main(Tool.java:93)
> =======================================
>
> I have no idea about this error. Any clue on this?
>
> Thank you.
>
>
> Regards,
> Meng
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From tomnebula at gmail.com  Tue Aug 28 07:50:14 2012
From: tomnebula at gmail.com (Meng Tian)
Date: Tue, 28 Aug 2012 15:50:14 +0100
Subject: [antlr-interest] Any clue for this internal error?
In-Reply-To: <CA+bn5rwSiqa5nrpRPyqDTBpdBnbZMJS4fw9uZmiC-+uKoOerkg@mail.gmail.com>
References: <CADo5jynA=DgJf+HUoeAGPo62QUL1SHHNsRp0bHULLZHSS3zBvw@mail.gmail.com>
	<CA+bn5rwSiqa5nrpRPyqDTBpdBnbZMJS4fw9uZmiC-+uKoOerkg@mail.gmail.com>
Message-ID: <CADo5jymh8N8BxytFskuiTHbZzg2Q-=fpZa_MdfyCXkgqvFOPww@mail.gmail.com>

Ah, I see. Yes, you are right. There is no complaining after I add a parser
rule as you suggested.

Thank you.

On Tue, Aug 28, 2012 at 3:44 PM, Kirby Bohling <kirby.bohling at gmail.com>wrote:

> That sure looks like you don't have a parser rule, only lexer rules.  I
> believe this would work, but I don't have ANTLR handy to actually try it.
>
> =======================================
> grammar CL;
>
>
>     INPUTS : 'A' | 'B' | 'C' | 'D' | 'E' | 'F';
>     OUTPUTS : 'U' | 'V' | 'X' | 'Y' | 'Z';
>
>     INPUT : 'i';
>     OUTPUT : 'o';
>
>     action: ( INPUT INPUTS ) | ( OUTPUT OUTPUTS );
> =======================================
>
> Kirby
>
>
> On Tue, Aug 28, 2012 at 8:43 AM, Meng Tian <tomnebula at gmail.com> wrote:
>
>> Hello
>>
>> I am new to ANTLR, and I try to start with a very simple grammar
>> definition
>> (as follows).
>>
>> =======================================
>> grammar CL;
>>
>>     fragment INPUTS : 'A' | 'B' | 'C' | 'D' | 'E' | 'F';
>>     fragment OUTPUTS : 'U' | 'V' | 'X' | 'Y' | 'Z';
>>
>>     fragment INPUT : 'i';
>>     fragment OUTPUT : 'o';
>>
>>     ACTION : ( INPUT INPUTS ) | ( OUTPUT OUTPUTS );
>> =======================================
>>
>> I was expecting that strings like "iA" and "oU" should be successfully
>> recognized and given the "ACTION" token. But when I run "java
>> org.antlr.Tool CL.g", I had the following error message:
>>
>> =======================================
>> error(10):  internal error: CL.g : java.lang.ClassCastException:
>> org.antlr.runtime.tree.CommonTree cannot be cast to
>> org.antlr.tool.GrammarAST
>> org.antlr.grammar.v3.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:1467)
>>
>> org.antlr.grammar.v3.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:1441)
>>
>> org.antlr.grammar.v3.CodeGenTreeWalker.grammar_(CodeGenTreeWalker.java:509)
>> org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:421)
>> org.antlr.Tool.generateRecognizer(Tool.java:655)
>> org.antlr.Tool.process(Tool.java:468)
>> org.antlr.Tool.main(Tool.java:93)
>> =======================================
>>
>> I have no idea about this error. Any clue on this?
>>
>> Thank you.
>>
>>
>> Regards,
>> Meng
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From pedrogfrancisco at gmail.com  Tue Aug 28 14:31:27 2012
From: pedrogfrancisco at gmail.com (Pedro Francisco)
Date: Tue, 28 Aug 2012 22:31:27 +0100
Subject: [antlr-interest] praising setUnknownTokenBoundaries()
Message-ID: <CAJZjf_xjdE4BJf91VKb6aiQKCUU9rik=AigYLpE26gS700fMJw@mail.gmail.com>

Hello!

I've recently found setUnknownTokenBoundaries() and finally CommonTree's
getTokenStartIndex() and getTokenStopIndex() started making sense (i.e.,
working as expected :) ).

Thing is, I always thought start and stop index would be calculated either
automatically on Tree construction or on-demand when requested (which
taking a quick look at the source would indicate so).

So I'm missing something here? Why does it seem Start and Stop token aren't
computed for a tree with a list of child nodes?

Thanks in Advance,
-- 
Pedro

From jimi at temporal-wave.com  Tue Aug 28 14:35:05 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 28 Aug 2012 14:35:05 -0700
Subject: [antlr-interest] praising setUnknownTokenBoundaries()
In-Reply-To: <CAJZjf_xjdE4BJf91VKb6aiQKCUU9rik=AigYLpE26gS700fMJw@mail.gmail.com>
References: <CAJZjf_xjdE4BJf91VKb6aiQKCUU9rik=AigYLpE26gS700fMJw@mail.gmail.com>
Message-ID: <ef83d5a3c660036b76e5e77d9e6f8318@mail.gmail.com>

If you use:


-> ^(X Y ^(Z A B C))

Then the indexes for Z are not calculated as that is only done for the X
node as the generated method is exited.

That is the only instance I know of where the start and stop will not be
set, so I always use subrules for those.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Pedro Francisco
> Sent: Tuesday, August 28, 2012 2:31 PM
> To: ANTLR interest
> Subject: [antlr-interest] praising setUnknownTokenBoundaries()
>
> Hello!
>
> I've recently found setUnknownTokenBoundaries() and finally
> CommonTree's
> getTokenStartIndex() and getTokenStopIndex() started making sense
> (i.e., working as expected :) ).
>
> Thing is, I always thought start and stop index would be calculated
> either automatically on Tree construction or on-demand when requested
> (which taking a quick look at the source would indicate so).
>
> So I'm missing something here? Why does it seem Start and Stop token
> aren't computed for a tree with a list of child nodes?
>
> Thanks in Advance,
> --
> Pedro
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From owen.jacobson at grimoire.ca  Tue Aug 28 15:35:07 2012
From: owen.jacobson at grimoire.ca (Owen Jacobson)
Date: Tue, 28 Aug 2012 18:35:07 -0400
Subject: [antlr-interest] An ambiguous lexing problem
Message-ID: <ECA9DFBB-9672-4C01-893D-FB0BB002EE3D@grimoire.ca>

Hi folks,

I'm tinkering with an Antlr grammar for the LambdaMOO programming language, largely documented at http://www.hayseed.net/MOO/manuals/ProgrammersManual_toc.html. The existing implementation is in very hoary C, originally built in the early 90s using yacc and a hand-rolled lexer (you can see both on Github: https://github.com/wrog/lambdamoo/blob/master/parser.y contains the yacc grammar and the yylex function required to feed it).

The language permits floating-point literals of the forms "1." (evaluating to 1.0) and ".3" (evaluating to 0.3), along with the usual suite of scientific notation options. It also permits "range" expressions for "for" loops and for indexing into lists, which have the form '[' expression '..' expression ']'. The C implementation parses

	for x in [1..3]
		"? Loop body ?";
	endfor

as a loop over 1, 2, and 3. Given the lexer rules I've worked out so far, my parser turns the "[1..3]" part into a few syntax errors and then applies error recovery to the range, producing a loop from 1. to .3. Obviously, this is not what I want.

Experimenting with LambdaMOO's evaluator demonstrates that ranges like "[1..3]" compile successfuly but fail at runtime (one or the other value is interpreted as a float; I don't care which one, as the error is the same either way) and that ranges like "[1....4]" are syntax errors, so it's a pretty constrained special case in the existing lexer.

My existing grammar is at the end of this mail. As I'm generating Python from Antlr, I'm running Antlr 3.1.3. I've also included a sample input that demonstrates the problem, which you can feed to the generated parser using

	python langParser.py --rule program for-range.moo

I spent some time staring at Antlr's generated code and experimenting with syntactic and semantic predicates on the INT and FLOAT lexer rules, to no avail. I'd love a pointer in the right direction; I understand why Antlr is picking the token sequence it's picking, since the production for FLOAT really does permit the sequence the parser's receiving and it's the longest match at each stage of lexical analysis, but I don't know how to (or if it's even possible to) special case sequences like this to produce the tokens I really want.

It occurred to me to lift numeric literals out of the lexer and into the parser, but the existing implementation doesn't permit whitespace within numeric literals and I don't want to litter the grammar with "and whitespace is allowed here, and here, and here" dummy rules if I take the { $channel = HIDDEN; } off of WHITESPACE. If this is the only way to get what I want, obviously I'll do it, but it feels like there should be something more localized for solving this. (I could also reproduce the hand-rolled lexer, but? yuck.)

I also thought about negative lookahead, but Antlr's lexer doesn't support lookahead or lookbehind assertions, so that's out.

Help!

-o

---- lang.g ----
grammar lang;

options {
    language=Python;
    output=AST;
    ASTLabelType=CommonTree;
}

tokens {
    BLOCK;
    PROGRAM;
    STATEMENT;
    LOOP_TAG;
}

program
    : statement* EOF
        -> ^(PROGRAM statement*)
    ;

statement
    :   simple_statement ';'
        -> simple_statement
    |   if_statement
    |   while_statement
    |   for_statement
    |   ';'
        ->
    ;

simple_statement
    :   expression
        -> ^(STATEMENT expression)
    |   RETURN expression?
        -> ^(RETURN expression?)
    ;

// This writes out the branches if the IF statement *BACKWARDS*. Be careful!
// Doing it the "wrong" way around makes generating jump targets in compile.g
// way easier.
if_statement
    :   if_part elseif_parts? else_part? ENDIF
        -> ^(ENDIF else_part? elseif_parts? if_part)
    ;

if_part
    :   IF condition statement*
        -> ^(IF condition statement*)
    ;

elseif_parts
    :   ELSEIF condition statement* elseif_parts?
        -> elseif_parts? ^(ELSEIF condition statement*)
    ;

else_part
    :   ELSE statement*
        -> ^(ELSE statement*)
    ;

while_statement
    :   WHILE condition statement* ENDWHILE
        -> ^(ENDWHILE condition statement*)
    |   WHILE IDENTIFIER condition statement* ENDWHILE
        -> ^(ENDWHILE ^(LOOP_TAG IDENTIFIER) condition statement*)
    ;

for_statement
    :   for_list_statement
    |   for_range_statement
    ;

for_list_statement
    :   FOR IDENTIFIER IN '(' expression ')' statement* ENDFOR
        -> ^(ENDFOR ^(LOOP_TAG IDENTIFIER) expression statement*)
    ;

for_range_statement
    :   FOR IDENTIFIER IN range statement* ENDFOR
        -> ^(ENDFOR ^(LOOP_TAG IDENTIFIER) range statement*)
    ;

range
    :   RANGE_START start=expression TO end=expression RANGE_END
        -> ^(RANGE_START $start $end)
    ;

condition
    :   '(' expression ')'
        -> expression
    ;

expression
    :   root_expression
    ;

root_expression
    :   literal
    |   IDENTIFIER
    ;

literal
    :   INT
    |   FLOAT
    |   STRING
    |   OBJECT_NUM
    |   ERROR
    |   list_literal
    ;

list_literal
    :   LIST_START list_body? LIST_END
        -> ^(LIST_START list_body?)
    ;

list_body
    :   list_element (',' list_element)*
        -> list_element*
    ;

list_element
    :   expression
    |   list_splice
    ;

list_splice
    :   '@' expression
        -> ^('@' expression)
    ;

// --------------------
// Fixed-content tokens
// --------------------

ERROR
    :   'e_range'
    |   'e_recmove'
    |   'e_none'
    |   'e_propnf'
    |   'e_quota'
    |   'e_div'
    |   'e_args'
    |   'e_varnf'
    |   'e_verbnf'
    |   'e_perm'
    |   'e_invind'
    |   'e_nacc'
    |   'e_type'
    |   'e_float'
    |   'e_invarg'
    |   'e_maxrec'
    ;

ANY: 'any';
IF: 'if';
ELSEIF: 'elseif';
ELSE: 'else';
ENDIF: 'endif';
WHILE: 'while';
ENDWHILE: 'endwhile';
FOR: 'for';
IN: 'in';
ENDFOR: 'endfor';
RETURN: 'return';

LIST_START: '{';
LIST_END: '}';
RANGE_START: '[';
RANGE_END: ']';

DOT: '.';
TO: '..';

// -----------------------
// Variable-content tokens
// -----------------------

// printable ASCII, minus double quote and backslash.
fragment STRING_CHAR
    :   '\u0020'..'\u0021'
    |   '\u0023'..'\u005B'
    |   '\u005D'..'\u007E'
    ;

fragment STRING_ESCAPE
    :   '\\' ('"' | '\\')
    ;

STRING: '"' (STRING_CHAR | STRING_ESCAPE) * '"';

fragment DIGIT: '0'..'9';
fragment SIGN: '-'?;

INT: SIGN DIGIT+;

fragment FLOAT_EXPONENT
    :   'e' ('+'|'-')? DIGIT+
    ;

FLOAT
    :   SIGN DIGIT+ FLOAT_EXPONENT
    |   SIGN DIGIT+ DOT DIGIT* FLOAT_EXPONENT?
    |   SIGN DOT DIGIT+ FLOAT_EXPONENT?
    ;

OBJECT_NUM
    :   '#' '-'? DIGIT+
    ;

fragment IDENT_FIRST_CHAR
    :   'a'..'z' | '_'
    ;

fragment IDENT_CHAR
    :   IDENT_FIRST_CHAR | DIGIT
    ;

IDENTIFIER
    :   IDENT_FIRST_CHAR IDENT_CHAR*
    ;

// Newlines aren't technically legal in MOO strings, where most code comes
// from. However, permitting them in the language means source from files can
// be compiled without stripping newlines in advance.
WHITESPACE
    :   (' ' | '\t' | '\r' | '\n') { $channel = HIDDEN; }
    ;

COMMENT
    :   '/*' .* '*/' { $channel = HIDDEN; }
    ;

/* eof */
---- for-range.moo ----
for x in [1..5]
endfor

/* This should parse identically to the above. */
for x in [1 .. 5]
endfor

for y in [6..10]
    "Non-empty.";
endfor
/* eof */

From owen.jacobson at grimoire.ca  Tue Aug 28 15:42:30 2012
From: owen.jacobson at grimoire.ca (Owen Jacobson)
Date: Tue, 28 Aug 2012 18:42:30 -0400
Subject: [antlr-interest] An ambiguous lexing problem
In-Reply-To: <ECA9DFBB-9672-4C01-893D-FB0BB002EE3D@grimoire.ca>
References: <ECA9DFBB-9672-4C01-893D-FB0BB002EE3D@grimoire.ca>
Message-ID: <9B9605E3-54FF-42AF-8B8C-450DF4384CC4@grimoire.ca>


On 2012-08-28, at 6:35 PM, Owen Jacobson <owen.jacobson at grimoire.ca> wrote:

> Experimenting with LambdaMOO's evaluator demonstrates that ranges like "[1..3]" 

That should have been "[1...3]".

Sorry for the appalling wrapping in my last mail; hopefully I've sorted it out.

-o


From jimi at temporal-wave.com  Tue Aug 28 15:46:28 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 28 Aug 2012 15:46:28 -0700
Subject: [antlr-interest] An ambiguous lexing problem
In-Reply-To: <ECA9DFBB-9672-4C01-893D-FB0BB002EE3D@grimoire.ca>
References: <ECA9DFBB-9672-4C01-893D-FB0BB002EE3D@grimoire.ca>
Message-ID: <1d50bbe0dd0455f9c1e8d42b786a16b3@mail.gmail.com>

See FAQ:


http://tinyurl.com/8t4pnhv


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Owen Jacobson
> Sent: Tuesday, August 28, 2012 3:35 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] An ambiguous lexing problem
>
> Hi folks,
>
> I'm tinkering with an Antlr grammar for the LambdaMOO programming
> language, largely documented at
> http://www.hayseed.net/MOO/manuals/ProgrammersManual_toc.html. The
> existing implementation is in very hoary C, originally built in the
> early 90s using yacc and a hand-rolled lexer (you can see both on
> Github: https://github.com/wrog/lambdamoo/blob/master/parser.y contains
> the yacc grammar and the yylex function required to feed it).
>
> The language permits floating-point literals of the forms "1."
> (evaluating to 1.0) and ".3" (evaluating to 0.3), along with the usual
> suite of scientific notation options. It also permits "range"
> expressions for "for" loops and for indexing into lists, which have the
> form '[' expression '..' expression ']'. The C implementation parses
>
> 	for x in [1..3]
> 		". Loop body .";
> 	endfor
>
> as a loop over 1, 2, and 3. Given the lexer rules I've worked out so
> far, my parser turns the "[1..3]" part into a few syntax errors and
> then applies error recovery to the range, producing a loop from 1. to
> .3. Obviously, this is not what I want.
>
> Experimenting with LambdaMOO's evaluator demonstrates that ranges like
> "[1..3]" compile successfuly but fail at runtime (one or the other
> value is interpreted as a float; I don't care which one, as the error
> is the same either way) and that ranges like "[1....4]" are syntax
> errors, so it's a pretty constrained special case in the existing
> lexer.
>
> My existing grammar is at the end of this mail. As I'm generating
> Python from Antlr, I'm running Antlr 3.1.3. I've also included a sample
> input that demonstrates the problem, which you can feed to the
> generated parser using
>
> 	python langParser.py --rule program for-range.moo
>
> I spent some time staring at Antlr's generated code and experimenting
> with syntactic and semantic predicates on the INT and FLOAT lexer
> rules, to no avail. I'd love a pointer in the right direction; I
> understand why Antlr is picking the token sequence it's picking, since
> the production for FLOAT really does permit the sequence the parser's
> receiving and it's the longest match at each stage of lexical analysis,
> but I don't know how to (or if it's even possible to) special case
> sequences like this to produce the tokens I really want.
>
> It occurred to me to lift numeric literals out of the lexer and into
> the parser, but the existing implementation doesn't permit whitespace
> within numeric literals and I don't want to litter the grammar with
> "and whitespace is allowed here, and here, and here" dummy rules if I
> take the { $channel = HIDDEN; } off of WHITESPACE. If this is the only
> way to get what I want, obviously I'll do it, but it feels like there
> should be something more localized for solving this. (I could also
> reproduce the hand-rolled lexer, but. yuck.)
>
> I also thought about negative lookahead, but Antlr's lexer doesn't
> support lookahead or lookbehind assertions, so that's out.
>
> Help!
>
> -o
>
> ---- lang.g ----
> grammar lang;
>
> options {
>     language=Python;
>     output=AST;
>     ASTLabelType=CommonTree;
> }
>
> tokens {
>     BLOCK;
>     PROGRAM;
>     STATEMENT;
>     LOOP_TAG;
> }
>
> program
>     : statement* EOF
>         -> ^(PROGRAM statement*)
>     ;
>
> statement
>     :   simple_statement ';'
>         -> simple_statement
>     |   if_statement
>     |   while_statement
>     |   for_statement
>     |   ';'
>         ->
>     ;
>
> simple_statement
>     :   expression
>         -> ^(STATEMENT expression)
>     |   RETURN expression?
>         -> ^(RETURN expression?)
>     ;
>
> // This writes out the branches if the IF statement *BACKWARDS*. Be
> careful!
> // Doing it the "wrong" way around makes generating jump targets in
> compile.g // way easier.
> if_statement
>     :   if_part elseif_parts? else_part? ENDIF
>         -> ^(ENDIF else_part? elseif_parts? if_part)
>     ;
>
> if_part
>     :   IF condition statement*
>         -> ^(IF condition statement*)
>     ;
>
> elseif_parts
>     :   ELSEIF condition statement* elseif_parts?
>         -> elseif_parts? ^(ELSEIF condition statement*)
>     ;
>
> else_part
>     :   ELSE statement*
>         -> ^(ELSE statement*)
>     ;
>
> while_statement
>     :   WHILE condition statement* ENDWHILE
>         -> ^(ENDWHILE condition statement*)
>     |   WHILE IDENTIFIER condition statement* ENDWHILE
>         -> ^(ENDWHILE ^(LOOP_TAG IDENTIFIER) condition statement*)
>     ;
>
> for_statement
>     :   for_list_statement
>     |   for_range_statement
>     ;
>
> for_list_statement
>     :   FOR IDENTIFIER IN '(' expression ')' statement* ENDFOR
>         -> ^(ENDFOR ^(LOOP_TAG IDENTIFIER) expression statement*)
>     ;
>
> for_range_statement
>     :   FOR IDENTIFIER IN range statement* ENDFOR
>         -> ^(ENDFOR ^(LOOP_TAG IDENTIFIER) range statement*)
>     ;
>
> range
>     :   RANGE_START start=expression TO end=expression RANGE_END
>         -> ^(RANGE_START $start $end)
>     ;
>
> condition
>     :   '(' expression ')'
>         -> expression
>     ;
>
> expression
>     :   root_expression
>     ;
>
> root_expression
>     :   literal
>     |   IDENTIFIER
>     ;
>
> literal
>     :   INT
>     |   FLOAT
>     |   STRING
>     |   OBJECT_NUM
>     |   ERROR
>     |   list_literal
>     ;
>
> list_literal
>     :   LIST_START list_body? LIST_END
>         -> ^(LIST_START list_body?)
>     ;
>
> list_body
>     :   list_element (',' list_element)*
>         -> list_element*
>     ;
>
> list_element
>     :   expression
>     |   list_splice
>     ;
>
> list_splice
>     :   '@' expression
>         -> ^('@' expression)
>     ;
>
> // --------------------
> // Fixed-content tokens
> // --------------------
>
> ERROR
>     :   'e_range'
>     |   'e_recmove'
>     |   'e_none'
>     |   'e_propnf'
>     |   'e_quota'
>     |   'e_div'
>     |   'e_args'
>     |   'e_varnf'
>     |   'e_verbnf'
>     |   'e_perm'
>     |   'e_invind'
>     |   'e_nacc'
>     |   'e_type'
>     |   'e_float'
>     |   'e_invarg'
>     |   'e_maxrec'
>     ;
>
> ANY: 'any';
> IF: 'if';
> ELSEIF: 'elseif';
> ELSE: 'else';
> ENDIF: 'endif';
> WHILE: 'while';
> ENDWHILE: 'endwhile';
> FOR: 'for';
> IN: 'in';
> ENDFOR: 'endfor';
> RETURN: 'return';
>
> LIST_START: '{';
> LIST_END: '}';
> RANGE_START: '[';
> RANGE_END: ']';
>
> DOT: '.';
> TO: '..';
>
> // -----------------------
> // Variable-content tokens
> // -----------------------
>
> // printable ASCII, minus double quote and backslash.
> fragment STRING_CHAR
>     :   '\u0020'..'\u0021'
>     |   '\u0023'..'\u005B'
>     |   '\u005D'..'\u007E'
>     ;
>
> fragment STRING_ESCAPE
>     :   '\\' ('"' | '\\')
>     ;
>
> STRING: '"' (STRING_CHAR | STRING_ESCAPE) * '"';
>
> fragment DIGIT: '0'..'9';
> fragment SIGN: '-'?;
>
> INT: SIGN DIGIT+;
>
> fragment FLOAT_EXPONENT
>     :   'e' ('+'|'-')? DIGIT+
>     ;
>
> FLOAT
>     :   SIGN DIGIT+ FLOAT_EXPONENT
>     |   SIGN DIGIT+ DOT DIGIT* FLOAT_EXPONENT?
>     |   SIGN DOT DIGIT+ FLOAT_EXPONENT?
>     ;
>
> OBJECT_NUM
>     :   '#' '-'? DIGIT+
>     ;
>
> fragment IDENT_FIRST_CHAR
>     :   'a'..'z' | '_'
>     ;
>
> fragment IDENT_CHAR
>     :   IDENT_FIRST_CHAR | DIGIT
>     ;
>
> IDENTIFIER
>     :   IDENT_FIRST_CHAR IDENT_CHAR*
>     ;
>
> // Newlines aren't technically legal in MOO strings, where most code
> comes // from. However, permitting them in the language means source
> from files can // be compiled without stripping newlines in advance.
> WHITESPACE
>     :   (' ' | '\t' | '\r' | '\n') { $channel = HIDDEN; }
>     ;
>
> COMMENT
>     :   '/*' .* '*/' { $channel = HIDDEN; }
>     ;
>
> /* eof */
> ---- for-range.moo ----
> for x in [1..5]
> endfor
>
> /* This should parse identically to the above. */ for x in [1 .. 5]
> endfor
>
> for y in [6..10]
>     "Non-empty.";
> endfor
> /* eof */
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From owen.jacobson at grimoire.ca  Tue Aug 28 15:58:54 2012
From: owen.jacobson at grimoire.ca (Owen Jacobson)
Date: Tue, 28 Aug 2012 18:58:54 -0400
Subject: [antlr-interest] An ambiguous lexing problem
In-Reply-To: <1d50bbe0dd0455f9c1e8d42b786a16b3@mail.gmail.com>
References: <ECA9DFBB-9672-4C01-893D-FB0BB002EE3D@grimoire.ca>
	<1d50bbe0dd0455f9c1e8d42b786a16b3@mail.gmail.com>
Message-ID: <5A2A0C40-8E41-45D7-913C-AD6B832773E7@grimoire.ca>

Yow. I had a look through the FAQ, but I somehow missed that one, even
though it has my problem right in the name. Thanks for the clue. I'll
go play with that and see what I come up with - thankfully, LambdaMOO
is considerably simpler than JavaFX?

-o

On 2012-08-28, at 6:46 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> See FAQ:
> 
> 
> http://tinyurl.com/8t4pnhv
> 
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Owen Jacobson
>> Sent: Tuesday, August 28, 2012 3:35 PM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] An ambiguous lexing problem
>> 
>> Hi folks,
>> 
>> I'm tinkering with an Antlr grammar for the LambdaMOO programming
>> language, largely documented at
>> http://www.hayseed.net/MOO/manuals/ProgrammersManual_toc.html. The
>> existing implementation is in very hoary C, originally built in the
>> early 90s using yacc and a hand-rolled lexer (you can see both on
>> Github: https://github.com/wrog/lambdamoo/blob/master/parser.y contains
>> the yacc grammar and the yylex function required to feed it).
>> 
>> The language permits floating-point literals of the forms "1."
>> (evaluating to 1.0) and ".3" (evaluating to 0.3), along with the usual
>> suite of scientific notation options. It also permits "range"
>> expressions for "for" loops and for indexing into lists, which have the
>> form '[' expression '..' expression ']'. The C implementation parses
>> 
>> 	for x in [1..3]
>> 		". Loop body .";
>> 	endfor
>> 
>> as a loop over 1, 2, and 3. Given the lexer rules I've worked out so
>> far, my parser turns the "[1..3]" part into a few syntax errors and
>> then applies error recovery to the range, producing a loop from 1. to
>> .3. Obviously, this is not what I want.
>> 
>> Experimenting with LambdaMOO's evaluator demonstrates that ranges like
>> "[1..3]" compile successfuly but fail at runtime (one or the other
>> value is interpreted as a float; I don't care which one, as the error
>> is the same either way) and that ranges like "[1....4]" are syntax
>> errors, so it's a pretty constrained special case in the existing
>> lexer.
>> 
>> My existing grammar is at the end of this mail. As I'm generating
>> Python from Antlr, I'm running Antlr 3.1.3. I've also included a sample
>> input that demonstrates the problem, which you can feed to the
>> generated parser using
>> 
>> 	python langParser.py --rule program for-range.moo
>> 
>> I spent some time staring at Antlr's generated code and experimenting
>> with syntactic and semantic predicates on the INT and FLOAT lexer
>> rules, to no avail. I'd love a pointer in the right direction; I
>> understand why Antlr is picking the token sequence it's picking, since
>> the production for FLOAT really does permit the sequence the parser's
>> receiving and it's the longest match at each stage of lexical analysis,
>> but I don't know how to (or if it's even possible to) special case
>> sequences like this to produce the tokens I really want.
>> 
>> It occurred to me to lift numeric literals out of the lexer and into
>> the parser, but the existing implementation doesn't permit whitespace
>> within numeric literals and I don't want to litter the grammar with
>> "and whitespace is allowed here, and here, and here" dummy rules if I
>> take the { $channel = HIDDEN; } off of WHITESPACE. If this is the only
>> way to get what I want, obviously I'll do it, but it feels like there
>> should be something more localized for solving this. (I could also
>> reproduce the hand-rolled lexer, but. yuck.)
>> 
>> I also thought about negative lookahead, but Antlr's lexer doesn't
>> support lookahead or lookbehind assertions, so that's out.
>> 
>> Help!
>> 
>> -o
>> 
>> ---- lang.g ----
>> grammar lang;
>> 
>> options {
>>    language=Python;
>>    output=AST;
>>    ASTLabelType=CommonTree;
>> }
>> 
>> tokens {
>>    BLOCK;
>>    PROGRAM;
>>    STATEMENT;
>>    LOOP_TAG;
>> }
>> 
>> program
>>    : statement* EOF
>>        -> ^(PROGRAM statement*)
>>    ;
>> 
>> statement
>>    :   simple_statement ';'
>>        -> simple_statement
>>    |   if_statement
>>    |   while_statement
>>    |   for_statement
>>    |   ';'
>>        ->
>>    ;
>> 
>> simple_statement
>>    :   expression
>>        -> ^(STATEMENT expression)
>>    |   RETURN expression?
>>        -> ^(RETURN expression?)
>>    ;
>> 
>> // This writes out the branches if the IF statement *BACKWARDS*. Be
>> careful!
>> // Doing it the "wrong" way around makes generating jump targets in
>> compile.g // way easier.
>> if_statement
>>    :   if_part elseif_parts? else_part? ENDIF
>>        -> ^(ENDIF else_part? elseif_parts? if_part)
>>    ;
>> 
>> if_part
>>    :   IF condition statement*
>>        -> ^(IF condition statement*)
>>    ;
>> 
>> elseif_parts
>>    :   ELSEIF condition statement* elseif_parts?
>>        -> elseif_parts? ^(ELSEIF condition statement*)
>>    ;
>> 
>> else_part
>>    :   ELSE statement*
>>        -> ^(ELSE statement*)
>>    ;
>> 
>> while_statement
>>    :   WHILE condition statement* ENDWHILE
>>        -> ^(ENDWHILE condition statement*)
>>    |   WHILE IDENTIFIER condition statement* ENDWHILE
>>        -> ^(ENDWHILE ^(LOOP_TAG IDENTIFIER) condition statement*)
>>    ;
>> 
>> for_statement
>>    :   for_list_statement
>>    |   for_range_statement
>>    ;
>> 
>> for_list_statement
>>    :   FOR IDENTIFIER IN '(' expression ')' statement* ENDFOR
>>        -> ^(ENDFOR ^(LOOP_TAG IDENTIFIER) expression statement*)
>>    ;
>> 
>> for_range_statement
>>    :   FOR IDENTIFIER IN range statement* ENDFOR
>>        -> ^(ENDFOR ^(LOOP_TAG IDENTIFIER) range statement*)
>>    ;
>> 
>> range
>>    :   RANGE_START start=expression TO end=expression RANGE_END
>>        -> ^(RANGE_START $start $end)
>>    ;
>> 
>> condition
>>    :   '(' expression ')'
>>        -> expression
>>    ;
>> 
>> expression
>>    :   root_expression
>>    ;
>> 
>> root_expression
>>    :   literal
>>    |   IDENTIFIER
>>    ;
>> 
>> literal
>>    :   INT
>>    |   FLOAT
>>    |   STRING
>>    |   OBJECT_NUM
>>    |   ERROR
>>    |   list_literal
>>    ;
>> 
>> list_literal
>>    :   LIST_START list_body? LIST_END
>>        -> ^(LIST_START list_body?)
>>    ;
>> 
>> list_body
>>    :   list_element (',' list_element)*
>>        -> list_element*
>>    ;
>> 
>> list_element
>>    :   expression
>>    |   list_splice
>>    ;
>> 
>> list_splice
>>    :   '@' expression
>>        -> ^('@' expression)
>>    ;
>> 
>> // --------------------
>> // Fixed-content tokens
>> // --------------------
>> 
>> ERROR
>>    :   'e_range'
>>    |   'e_recmove'
>>    |   'e_none'
>>    |   'e_propnf'
>>    |   'e_quota'
>>    |   'e_div'
>>    |   'e_args'
>>    |   'e_varnf'
>>    |   'e_verbnf'
>>    |   'e_perm'
>>    |   'e_invind'
>>    |   'e_nacc'
>>    |   'e_type'
>>    |   'e_float'
>>    |   'e_invarg'
>>    |   'e_maxrec'
>>    ;
>> 
>> ANY: 'any';
>> IF: 'if';
>> ELSEIF: 'elseif';
>> ELSE: 'else';
>> ENDIF: 'endif';
>> WHILE: 'while';
>> ENDWHILE: 'endwhile';
>> FOR: 'for';
>> IN: 'in';
>> ENDFOR: 'endfor';
>> RETURN: 'return';
>> 
>> LIST_START: '{';
>> LIST_END: '}';
>> RANGE_START: '[';
>> RANGE_END: ']';
>> 
>> DOT: '.';
>> TO: '..';
>> 
>> // -----------------------
>> // Variable-content tokens
>> // -----------------------
>> 
>> // printable ASCII, minus double quote and backslash.
>> fragment STRING_CHAR
>>    :   '\u0020'..'\u0021'
>>    |   '\u0023'..'\u005B'
>>    |   '\u005D'..'\u007E'
>>    ;
>> 
>> fragment STRING_ESCAPE
>>    :   '\\' ('"' | '\\')
>>    ;
>> 
>> STRING: '"' (STRING_CHAR | STRING_ESCAPE) * '"';
>> 
>> fragment DIGIT: '0'..'9';
>> fragment SIGN: '-'?;
>> 
>> INT: SIGN DIGIT+;
>> 
>> fragment FLOAT_EXPONENT
>>    :   'e' ('+'|'-')? DIGIT+
>>    ;
>> 
>> FLOAT
>>    :   SIGN DIGIT+ FLOAT_EXPONENT
>>    |   SIGN DIGIT+ DOT DIGIT* FLOAT_EXPONENT?
>>    |   SIGN DOT DIGIT+ FLOAT_EXPONENT?
>>    ;
>> 
>> OBJECT_NUM
>>    :   '#' '-'? DIGIT+
>>    ;
>> 
>> fragment IDENT_FIRST_CHAR
>>    :   'a'..'z' | '_'
>>    ;
>> 
>> fragment IDENT_CHAR
>>    :   IDENT_FIRST_CHAR | DIGIT
>>    ;
>> 
>> IDENTIFIER
>>    :   IDENT_FIRST_CHAR IDENT_CHAR*
>>    ;
>> 
>> // Newlines aren't technically legal in MOO strings, where most code
>> comes // from. However, permitting them in the language means source
>> from files can // be compiled without stripping newlines in advance.
>> WHITESPACE
>>    :   (' ' | '\t' | '\r' | '\n') { $channel = HIDDEN; }
>>    ;
>> 
>> COMMENT
>>    :   '/*' .* '*/' { $channel = HIDDEN; }
>>    ;
>> 
>> /* eof */
>> ---- for-range.moo ----
>> for x in [1..5]
>> endfor
>> 
>> /* This should parse identically to the above. */ for x in [1 .. 5]
>> endfor
>> 
>> for y in [6..10]
>>    "Non-empty.";
>> endfor
>> /* eof */
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kierans777 at gmail.com  Wed Aug 29 04:44:00 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Wed, 29 Aug 2012 21:44:00 +1000
Subject: [antlr-interest] Section for C grammar that follow macro definitions
Message-ID: <503E0080.8060903@gmail.com>

In the C target FAQ 
(http://www.antlr.org/wiki/display/ANTLR3/FAQ+-+C+Target) there's a 
question "SKIP() vs skip() in 'C' runtime".  As part of the answer there 
is this:

"In an @section that follows the macro definition of SKIP"

What section is that?  In a similar fashion, I want to embed some code 
into my tree grammar that will make use of the macros (eg: MATCHT), but 
using @postinclude results in my static function being inserted before 
the macro definitions.

How can I get embedded code after the macro definitions please?

Cheers,

From jimi at temporal-wave.com  Wed Aug 29 13:05:28 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 29 Aug 2012 13:05:28 -0700
Subject: [antlr-interest] Section for C grammar that follow macro
	definitions
In-Reply-To: <503E0080.8060903@gmail.com>
References: <503E0080.8060903@gmail.com>
Message-ID: <7872adcc4ff12fbfabf268d7fd925157@mail.gmail.com>

I'm sorry, I don't follow what your question is. If you just want to use
the macros, then you don't need to play with postinclude and so on. That's
only if you want to redefine them,

Did you read: http://www.antlr.org/api/C/index.html

Mostly for these inquiries, I ask "What is it you are trying to do,
perhaps you are asking the wrong question?" :)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kieran Simpson
> Sent: Wednesday, August 29, 2012 4:44 AM
> To: antlr-interest Interest
> Subject: [antlr-interest] Section for C grammar that follow macro
> definitions
>
> In the C target FAQ
> (http://www.antlr.org/wiki/display/ANTLR3/FAQ+-+C+Target) there's a
> question "SKIP() vs skip() in 'C' runtime".  As part of the answer
> there is this:
>
> "In an @section that follows the macro definition of SKIP"
>
> What section is that?  In a similar fashion, I want to embed some code
> into my tree grammar that will make use of the macros (eg: MATCHT), but
> using @postinclude results in my static function being inserted before
> the macro definitions.
>
> How can I get embedded code after the macro definitions please?
>
> Cheers,
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From mike at lischke-online.de  Thu Aug 30 07:57:14 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Thu, 30 Aug 2012 16:57:14 +0200
Subject: [antlr-interest] Additional char from LEXER->getText
Message-ID: <AB4C83C0-27B1-45C0-8953-1655D0965DCC@lischke-online.de>

Hi,

there seems to be a problem in the C-target lexer, which returns an additional char in getText.

I have this lexer rule:

UNDERSCORE_CHARSET:		UNDERLINE_SYMBOL LETTER_WHEN_UNQUOTED+ { $type = check_charset($text); };

For input like:

SELECT _utf8 'text'

I actually get the string "_utf8 ", which is not correct (I have the usual white space rule of course). I think either LEXER->getText itself is wrong (end pointer is one too far) or antlr38BitSubstr. Looking at the code of the latter I wonder why there's that +1. When I have a start and end pointer pointing to the same place in memory I would expect to get an empty string returned, not the single char at the start position.

I can work around this problem via pANTLR3_STRING->len - 1, but ...

Mike
-- 
www.soft-gems.net


From pedrogfrancisco at gmail.com  Thu Aug 30 08:55:54 2012
From: pedrogfrancisco at gmail.com (Pedro Francisco)
Date: Thu, 30 Aug 2012 16:55:54 +0100
Subject: [antlr-interest] Java.g -> AST == exception
Message-ID: <CAJZjf_w+HhGe=H2iz2Oj85izmNN7N34j2Gfxu4c3Zo=PTwBrqg@mail.gmail.com>

On ANTLR's site's Java.g (OpenJDK version) we find the following rule
(sligthly adapted here):

normalParameterDecl
    :   variableModifiers type IDENTIFIER
        dblSquareBrckt*
    ;

dblSquareBrckt : '[' ']' ;

I tried applying a simple rewrite rule (on a variant of Java.g) by doing:
normalParameterDecl
    :   variableModifiers type IDENTIFIER dblSquareBrckt* ->
variableModifiers type IDENTIFIER dblSquareBrckt*
    ;

Though it compiles, when I run it on a Java file I get:
Exception in thread "main"
org.antlr.runtime.tree.RewriteEmptyStreamException: rule
variableModifiers
	at org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
	at org.antlr.runtime.tree.RewriteRuleElementStream.nextTree(RewriteRuleElementStream.java:145)
	at com.example.javap.JavaPParser.normalParameterDecl(JavaPParser.java:9832)
        (...)

The workaround is below: (notice the '?' in variableModifiers after the ->)
normalParameterDecl
    :   variableModifiers type IDENTIFIER dblSquareBrckt* ->
variableModifiers? type IDENTIFIER dblSquareBrckt*
    ;

Though I was able to workaround it, I don't understand what is
happening. Is it expected? (I didn't check with a vanilla Java.g but I
don't touch variableModifiers rule so I thought it should work...).
So, what is going on here?

Thanks in Advance,
-- 
Pedro

From Stefan.Maetje at esd-electronics.com  Thu Aug 30 09:35:18 2012
From: Stefan.Maetje at esd-electronics.com (=?ISO-8859-1?Q?Stefan_M=E4tje?=)
Date: Thu, 30 Aug 2012 18:35:18 +0200
Subject: [antlr-interest] Java.g -> AST == exception
In-Reply-To: <CAJZjf_w+HhGe=H2iz2Oj85izmNN7N34j2Gfxu4c3Zo=PTwBrqg@mail.gmail.com>
References: <CAJZjf_w+HhGe=H2iz2Oj85izmNN7N34j2Gfxu4c3Zo=PTwBrqg@mail.gmail.com>
Message-ID: <503F9646.1020507@esd-electronics.com>

Am 30.08.2012 17:55, schrieb Pedro Francisco:
> On ANTLR's site's Java.g (OpenJDK version) we find the following rule
> (sligthly adapted here):
>
> normalParameterDecl
>      :   variableModifiers type IDENTIFIER
>          dblSquareBrckt*
>      ;
>
> dblSquareBrckt : '[' ']' ;
>
> I tried applying a simple rewrite rule (on a variant of Java.g) by doing:
> normalParameterDecl
>      :   variableModifiers type IDENTIFIER dblSquareBrckt* ->
> variableModifiers type IDENTIFIER dblSquareBrckt*
>      ;
>
> Though it compiles, when I run it on a Java file I get:
> Exception in thread "main"
> org.antlr.runtime.tree.RewriteEmptyStreamException: rule
> variableModifiers
> 	at org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
> 	at org.antlr.runtime.tree.RewriteRuleElementStream.nextTree(RewriteRuleElementStream.java:145)
> 	at com.example.javap.JavaPParser.normalParameterDecl(JavaPParser.java:9832)
>          (...)
>
> The workaround is below: (notice the '?' in variableModifiers after the ->)
> normalParameterDecl
>      :   variableModifiers type IDENTIFIER dblSquareBrckt* ->
> variableModifiers? type IDENTIFIER dblSquareBrckt*
>      ;
>
> Though I was able to workaround it, I don't understand what is
> happening. Is it expected? (I didn't check with a vanilla Java.g but I
> don't touch variableModifiers rule so I thought it should work...).
> So, what is going on here?

It's in some way surprising that you have to use a different syntax in 
the parser part of the rule (before ->) and in the rewrite part of the 
rule (after ->). In the parser part you simply use "variableModifiers" 
which rule presumably could be completely empty (no public / private... 
present). But variableModifiers hides this property from the calling 
rule on the parser level.

But on the rewrite rule level you must TELL Antlr that the resulting 
tree of variableModifiers may be empty. Therefore you need the "?" 
added. Without the "?" ANTLR expects to get something as result from 
"variableModifiers".

You won't need the "?" if the "variableModifier" rule would always 
return something. This would be the case if the source always has
some "public" or "private" or "protected" in front of the type 
designator. This kind of source code would hide the possible crash that 
you experienced.

This is my experience so far with ANTLR. Hope that clarifies the 
behavior a little bit. But as you can derive from this post I also was 
hit by this unexpected behaviour.

Best regards,
	Stefan





From jimi at temporal-wave.com  Thu Aug 30 11:18:54 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 30 Aug 2012 11:18:54 -0700
Subject: [antlr-interest] Additional char from LEXER->getText
In-Reply-To: <AB4C83C0-27B1-45C0-8953-1655D0965DCC@lischke-online.de>
References: <AB4C83C0-27B1-45C0-8953-1655D0965DCC@lischke-online.de>
Message-ID: <6b11d2f7fd78294f2f073a8537aa7852@mail.gmail.com>

Actually, those routines are really only there for convenience. You will
find them too slow and and cumbersome for any complicated tasks. It is
better to use the pointer to the input stream directly and avoid any
copying and malloc() calls.

However is this because you have a UTF8 input but are using the 8 bit
input stream?

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Mike Lischke
> Sent: Thursday, August 30, 2012 7:57 AM
> To: ANTLR Mailing List
> Subject: [antlr-interest] Additional char from LEXER->getText
>
> Hi,
>
> there seems to be a problem in the C-target lexer, which returns an
> additional char in getText.
>
> I have this lexer rule:
>
> UNDERSCORE_CHARSET:		UNDERLINE_SYMBOL LETTER_WHEN_UNQUOTED+ {
$type
> = check_charset($text); };
>
> For input like:
>
> SELECT _utf8 'text'
>
> I actually get the string "_utf8 ", which is not correct (I have the
> usual white space rule of course). I think either LEXER->getText itself
> is wrong (end pointer is one too far) or antlr38BitSubstr. Looking at
> the code of the latter I wonder why there's that +1. When I have a
> start and end pointer pointing to the same place in memory I would
> expect to get an empty string returned, not the single char at the
> start position.
>
> I can work around this problem via pANTLR3_STRING->len - 1, but ...
>
> Mike
> --
> www.soft-gems.net
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jmurray at aerotech.com  Thu Aug 30 13:27:15 2012
From: jmurray at aerotech.com (Justin Murray)
Date: Thu, 30 Aug 2012 16:27:15 -0400
Subject: [antlr-interest] Pre-processor advice [C target]
Message-ID: <6B458D23F5D4A24ABCDB3C78EA97393B0B8EFA94@EXCH-VIRTUAL.aerotechad.com>

Hello all,

 

We have a DSL at my company, for which we have our own compiler written
in C/C++. It is very old, monstrous, and terribly written. A little over
a year ago, I successfully replaced the lexer and parser with an ANTLR
implementation, and now I am tasked with replacing the preprocessor. I
am writing to ask for some general advice on the best approach for this.

 

The current process is such that we read the source file from disk into
a memory buffer. The preprocessor works on this buffer, doing text
transformations as necessary. This string is then passed into
antlr3StringStreamNew(), and the ANTLR lexer and parser take over from
there, ultimately executing the semantic actions that produce our binary
object code. Ideally, the preprocessor would be a drop-in replacement in
this process.

 

The set of preprocessor commands is relatively short, and fairly
typical:

#include, #define, #undef,  #ifdef, #else, #elseif, #endif, #nosubst,
#subst (these last 2 basically just switch the #define substitution off
and on for a block of code)

 

There are a few requirements that complicate this a bit:

1.       The original line numbers must be preserved for later stages
(for error messages, and status at runtime), even after multi-line macro
substitutions

2.       The rules for #define substitution are very complex. The
allowed identifier for the macro name can contain any symbols, except
for white space. The crazy thing is though, when searching the code text
for possible substitutions, non-alphanumeric symbols are treated as both
delimiters and not. The current algorithm is to identify tokens using
white-space as a true delimiter, then identify all possible sub-tokens
based on these partial delimiters. Each candidate sub-token is looked up
in the table of defines, and if there is a match, the text is
substituted. It does these largest to smallest, moving on once a
substitution is found, or all possible tokens were tried. I suspect that
I will still be doing this sub-token parsing and substitution by hand,
since I don't think ANTLR supports overlapping tokens like these (but I
would love to hear if someone has done something like this).

3.       Add support for function-like macros (text substitution with
arguments).

 

I have spent some time searching the mailing lists and re-reading the
ANTLR book, where I found some hints, but no clear-cut solution to my
problems. String templates and TokenRewriteStream look the most
promising, but as far as I can tell the TokenRewriteStream has not been
implemented in the C target runtime. Can anyone suggest what options
might be available to me, given these requirements?

 

Thank you!

 

- Justin Murray

 

 


From jimi at temporal-wave.com  Thu Aug 30 13:44:29 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 30 Aug 2012 13:44:29 -0700
Subject: [antlr-interest] Pre-processor advice [C target]
In-Reply-To: <6B458D23F5D4A24ABCDB3C78EA97393B0B8EFA94@EXCH-VIRTUAL.aerotechad.com>
References: <6B458D23F5D4A24ABCDB3C78EA97393B0B8EFA94@EXCH-VIRTUAL.aerotechad.com>
Message-ID: <d2e21d77e3bd6937dae3c3753f7ec17a@mail.gmail.com>

I would just create a couple of functions that worked off an output buffer
and then add the text of the tokens that are in the output to that output
buffer, adding blank lines for lines that don't make it.

It looks to me like you can do that with a lexer only grammar:

int switch = 0; // Inc and decrement, output only when zero


IFDEF: '#ifdef' EXPR { process EXPR, inc/dec etc add a newline}

...

NL: '\n' { add a newline to preserve line numbers }|

ANY : . {add this character if output is on} ;


Should be fairly trivial unless your command set is larger than you show
here. Also, have you thought of just coding it in m4? I doubt that using
streams is much slower than in memory anyway except for huge numbers of
input files.


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Justin Murray
> Sent: Thursday, August 30, 2012 1:27 PM
> To: antlr-interest at antlr.org
> Cc: "Robert Jacobs"@www.antlr.org
> Subject: [antlr-interest] Pre-processor advice [C target]
>
> Hello all,
>
>
>
> We have a DSL at my company, for which we have our own compiler written
> in C/C++. It is very old, monstrous, and terribly written. A little
> over a year ago, I successfully replaced the lexer and parser with an
> ANTLR implementation, and now I am tasked with replacing the
> preprocessor. I am writing to ask for some general advice on the best
> approach for this.
>
>
>
> The current process is such that we read the source file from disk into
> a memory buffer. The preprocessor works on this buffer, doing text
> transformations as necessary. This string is then passed into
> antlr3StringStreamNew(), and the ANTLR lexer and parser take over from
> there, ultimately executing the semantic actions that produce our
> binary object code. Ideally, the preprocessor would be a drop-in
> replacement in this process.
>
>
>
> The set of preprocessor commands is relatively short, and fairly
> typical:
>
> #include, #define, #undef,  #ifdef, #else, #elseif, #endif, #nosubst,
> #subst (these last 2 basically just switch the #define substitution off
> and on for a block of code)
>
>
>
> There are a few requirements that complicate this a bit:
>
> 1.       The original line numbers must be preserved for later stages
> (for error messages, and status at runtime), even after multi-line
> macro substitutions
>
> 2.       The rules for #define substitution are very complex. The
> allowed identifier for the macro name can contain any symbols, except
> for white space. The crazy thing is though, when searching the code
> text for possible substitutions, non-alphanumeric symbols are treated
> as both delimiters and not. The current algorithm is to identify tokens
> using white-space as a true delimiter, then identify all possible sub-
> tokens based on these partial delimiters. Each candidate sub-token is
> looked up in the table of defines, and if there is a match, the text is
> substituted. It does these largest to smallest, moving on once a
> substitution is found, or all possible tokens were tried. I suspect
> that I will still be doing this sub-token parsing and substitution by
> hand, since I don't think ANTLR supports overlapping tokens like these
> (but I would love to hear if someone has done something like this).
>
> 3.       Add support for function-like macros (text substitution with
> arguments).
>
>
>
> I have spent some time searching the mailing lists and re-reading the
> ANTLR book, where I found some hints, but no clear-cut solution to my
> problems. String templates and TokenRewriteStream look the most
> promising, but as far as I can tell the TokenRewriteStream has not been
> implemented in the C target runtime. Can anyone suggest what options
> might be available to me, given these requirements?
>
>
>
> Thank you!
>
>
>
> - Justin Murray
>
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From kierans777 at gmail.com  Thu Aug 30 15:39:38 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Fri, 31 Aug 2012 08:39:38 +1000
Subject: [antlr-interest] Section for C grammar that follow macro
 definitions
In-Reply-To: <7872adcc4ff12fbfabf268d7fd925157@mail.gmail.com>
References: <503E0080.8060903@gmail.com>
	<7872adcc4ff12fbfabf268d7fd925157@mail.gmail.com>
Message-ID: <503FEBAA.7080601@gmail.com>

I want to insert a static function into the generated grammar code that 
uses the macros to do some sub tree skipping (since tree pattern 
matching isn't available).  However because the function is defined 
before the macros I'm getting compiler errors.

If there's no way to insert the function after the macros, I'll just 
have to put it somewhere else and include it.

I did read through the API first and didn't see anything (however in a 
moment of eye glaziness I might have missed something :p)

Cheers,

On 30/08/12 6:05 AM, Jim Idle wrote:
> I'm sorry, I don't follow what your question is. If you just want to use
> the macros, then you don't need to play with postinclude and so on. That's
> only if you want to redefine them,
>
> Did you read: http://www.antlr.org/api/C/index.html
>
> Mostly for these inquiries, I ask "What is it you are trying to do,
> perhaps you are asking the wrong question?" :)
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Kieran Simpson
>> Sent: Wednesday, August 29, 2012 4:44 AM
>> To: antlr-interest Interest
>> Subject: [antlr-interest] Section for C grammar that follow macro
>> definitions
>>
>> In the C target FAQ
>> (http://www.antlr.org/wiki/display/ANTLR3/FAQ+-+C+Target) there's a
>> question "SKIP() vs skip() in 'C' runtime".  As part of the answer
>> there is this:
>>
>> "In an @section that follows the macro definition of SKIP"
>>
>> What section is that?  In a similar fashion, I want to embed some code
>> into my tree grammar that will make use of the macros (eg: MATCHT), but
>> using @postinclude results in my static function being inserted before
>> the macro definitions.
>>
>> How can I get embedded code after the macro definitions please?
>>
>> Cheers,
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>

From jimi at temporal-wave.com  Thu Aug 30 15:57:49 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 30 Aug 2012 15:57:49 -0700
Subject: [antlr-interest] Section for C grammar that follow macro
	definitions
In-Reply-To: <503FEBAA.7080601@gmail.com>
References: <503E0080.8060903@gmail.com>
	<7872adcc4ff12fbfabf268d7fd925157@mail.gmail.com>
	<503FEBAA.7080601@gmail.com>
Message-ID: <7D3B1339-B783-47C2-A9CA-B083BFE0C5B3@temporal-wave.com>

Does @members not work for you? 

Jim

On Aug 30, 2012, at 3:39 PM, Kieran Simpson <kierans777 at gmail.com> wrote:

> I want to insert a static function into the generated grammar code that uses the macros to do some sub tree skipping (since tree pattern matching isn't available).  However because the function is defined before the macros I'm getting compiler errors.
> 
> If there's no way to insert the function after the macros, I'll just have to put it somewhere else and include it.
> 
> I did read through the API first and didn't see anything (however in a moment of eye glaziness I might have missed something :p)
> 
> Cheers,
> 
> On 30/08/12 6:05 AM, Jim Idle wrote:
>> I'm sorry, I don't follow what your question is. If you just want to use
>> the macros, then you don't need to play with postinclude and so on. That's
>> only if you want to redefine them,
>> 
>> Did you read: http://www.antlr.org/api/C/index.html
>> 
>> Mostly for these inquiries, I ask "What is it you are trying to do,
>> perhaps you are asking the wrong question?" :)
>> 
>> Jim
>> 
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> bounces at antlr.org] On Behalf Of Kieran Simpson
>>> Sent: Wednesday, August 29, 2012 4:44 AM
>>> To: antlr-interest Interest
>>> Subject: [antlr-interest] Section for C grammar that follow macro
>>> definitions
>>> 
>>> In the C target FAQ
>>> (http://www.antlr.org/wiki/display/ANTLR3/FAQ+-+C+Target) there's a
>>> question "SKIP() vs skip() in 'C' runtime".  As part of the answer
>>> there is this:
>>> 
>>> "In an @section that follows the macro definition of SKIP"
>>> 
>>> What section is that?  In a similar fashion, I want to embed some code
>>> into my tree grammar that will make use of the macros (eg: MATCHT), but
>>> using @postinclude results in my static function being inserted before
>>> the macro definitions.
>>> 
>>> How can I get embedded code after the macro definitions please?
>>> 
>>> Cheers,
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>> email-address
>> 

From mike at lischke-online.de  Fri Aug 31 00:26:35 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Fri, 31 Aug 2012 09:26:35 +0200
Subject: [antlr-interest] Additional char from LEXER->getText
In-Reply-To: <6b11d2f7fd78294f2f073a8537aa7852@mail.gmail.com>
References: <AB4C83C0-27B1-45C0-8953-1655D0965DCC@lischke-online.de>
	<6b11d2f7fd78294f2f073a8537aa7852@mail.gmail.com>
Message-ID: <8227E49B-8812-41EA-9FE0-62C5327ABCFC@lischke-online.de>


Hi Jim,

> Actually, those routines are really only there for convenience. You will
> find them too slow and and cumbersome for any complicated tasks. It is
> better to use the pointer to the input stream directly and avoid any
> copying and malloc() calls.

Well, this is what the target uses for the $text token in the grammar. If the used code is not good shouldn't the code generator then use a better one? I would like to avoid language specific stuff in my grammar where I can.

> However is this because you have a UTF8 input but are using the 8 bit
> input stream?



My setup goes like this:

  input = antlr3StringStreamNew((pANTLR3_UINT8)utf8.c_str(), ANTLR3_ENC_UTF8, utf8.size(), (pANTLR3_UINT8)"sql-script");
  input->setUcaseLA(input, ANTLR3_TRUE); // Make input case-insensitive. String literals must all be upper case in the grammer!
  
  lexer = MySQL56LexerNew(input);
  tokens = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lexer));
  parser = MySQL56ParserNew(tokens);

  MySQL56Parser_query_return ast = parser->query(parser);

Isn't that how it is supposed to work?

Mike
-- 
www.soft-gems.net



From kierans777 at gmail.com  Fri Aug 31 04:34:20 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Fri, 31 Aug 2012 21:34:20 +1000
Subject: [antlr-interest] Section for C grammar that follow macro
	definitions
In-Reply-To: <7D3B1339-B783-47C2-A9CA-B083BFE0C5B3@temporal-wave.com>
References: <503E0080.8060903@gmail.com>
	<7872adcc4ff12fbfabf268d7fd925157@mail.gmail.com>
	<503FEBAA.7080601@gmail.com>
	<7D3B1339-B783-47C2-A9CA-B083BFE0C5B3@temporal-wave.com>
Message-ID: <5040A13C.1000705@gmail.com>

@members worked.  I've never used @members before in a grammar so I 
didn't think of it.

Thanks.

Cheers,

On 31/08/12 8:57 AM, Jim Idle wrote:
> Does @members not work for you?
>
> Jim
>
> On Aug 30, 2012, at 3:39 PM, Kieran Simpson<kierans777 at gmail.com>  wrote:
>
>> I want to insert a static function into the generated grammar code that uses the macros to do some sub tree skipping (since tree pattern matching isn't available).  However because the function is defined before the macros I'm getting compiler errors.
>>
>> If there's no way to insert the function after the macros, I'll just have to put it somewhere else and include it.
>>
>> I did read through the API first and didn't see anything (however in a moment of eye glaziness I might have missed something :p)
>>
>> Cheers,
>>
>> On 30/08/12 6:05 AM, Jim Idle wrote:
>>> I'm sorry, I don't follow what your question is. If you just want to use
>>> the macros, then you don't need to play with postinclude and so on. That's
>>> only if you want to redefine them,
>>>
>>> Did you read: http://www.antlr.org/api/C/index.html
>>>
>>> Mostly for these inquiries, I ask "What is it you are trying to do,
>>> perhaps you are asking the wrong question?" :)
>>>
>>> Jim
>>>
>>>> -----Original Message-----
>>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>>> bounces at antlr.org] On Behalf Of Kieran Simpson
>>>> Sent: Wednesday, August 29, 2012 4:44 AM
>>>> To: antlr-interest Interest
>>>> Subject: [antlr-interest] Section for C grammar that follow macro
>>>> definitions
>>>>
>>>> In the C target FAQ
>>>> (http://www.antlr.org/wiki/display/ANTLR3/FAQ+-+C+Target) there's a
>>>> question "SKIP() vs skip() in 'C' runtime".  As part of the answer
>>>> there is this:
>>>>
>>>> "In an @section that follows the macro definition of SKIP"
>>>>
>>>> What section is that?  In a similar fashion, I want to embed some code
>>>> into my tree grammar that will make use of the macros (eg: MATCHT), but
>>>> using @postinclude results in my static function being inserted before
>>>> the macro definitions.
>>>>
>>>> How can I get embedded code after the macro definitions please?
>>>>
>>>> Cheers,
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>>> email-address
>>>

From jimi at temporal-wave.com  Fri Aug 31 08:53:30 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 31 Aug 2012 08:53:30 -0700
Subject: [antlr-interest] Additional char from LEXER->getText
In-Reply-To: <8227E49B-8812-41EA-9FE0-62C5327ABCFC@lischke-online.de>
References: <AB4C83C0-27B1-45C0-8953-1655D0965DCC@lischke-online.de>
	<6b11d2f7fd78294f2f073a8537aa7852@mail.gmail.com>
	<8227E49B-8812-41EA-9FE0-62C5327ABCFC@lischke-online.de>
Message-ID: <E908C789-F632-4EDE-9948-BBA5524B61C2@temporal-wave.com>

I added support for $text because so many examples had it. It is fine if you are not doing anything that is performance or memory sensitive. 

I think that the goal of non language specific action isn't that realistic and will get in the way of doing things correctly. 

Also note that the case insensitive option only works on ASCII and not the full Unicode code point set. 

Jim

On Aug 31, 2012, at 12:26 AM, Mike Lischke <mike at lischke-online.de> wrote:

> 
> Hi Jim,
> 
>> Actually, those routines are really only there for convenience. You will
>> find them too slow and and cumbersome for any complicated tasks. It is
>> better to use the pointer to the input stream directly and avoid any
>> copying and malloc() calls.
> 
> Well, this is what the target uses for the $text token in the grammar. If the used code is not good shouldn't the code generator then use a better one? I would like to avoid language specific stuff in my grammar where I can.
> 
>> However is this because you have a UTF8 input but are using the 8 bit
>> input stream?
> 
> 
> 
> My setup goes like this:
> 
>  input = antlr3StringStreamNew((pANTLR3_UINT8)utf8.c_str(), ANTLR3_ENC_UTF8, utf8.size(), (pANTLR3_UINT8)"sql-script");
>  input->setUcaseLA(input, ANTLR3_TRUE); // Make input case-insensitive. String literals must all be upper case in the grammer!
> 
>  lexer = MySQL56LexerNew(input);
>  tokens = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lexer));
>  parser = MySQL56ParserNew(tokens);
> 
>  MySQL56Parser_query_return ast = parser->query(parser);
> 
> Isn't that how it is supposed to work?
> 
> Mike
> -- 
> www.soft-gems.net
> 
> 

From eja at arcor.de  Fri Aug 31 13:26:04 2012
From: eja at arcor.de (Edgar Jakumeit)
Date: Fri, 31 Aug 2012 22:26:04 +0200
Subject: [antlr-interest] The code for the static initializer is exceeding
 the 65535 bytes limit
Message-ID: <50411DDC.4050106@arcor.de>

Hi,

I just ran into the very same issue "problem about the code for the 
static initializer is exceeding the 65535 bytes limit" Zhaohui Yang 
posted 2 weeks ago, but the code I'm working with (the graph rewrite 
generator GrGen.NET) is public, so given the grammar file at
https://bitbucket.org/eja/grgen/src/20956f86416f/frontend/de/unika/ipd/grgen/parser/antlr/GrGen.g 
I'd like to express my interest in
a) the free pointers offered by Jim
b) the patch offered by FA
(Note: the grammar builds the AST directly from the semantic actions.)

After 9 years of contributions of different people and a target which 
moved beyond what was originally envisioned the grammar is not as lean 
as one could hope for, but I don't think it's so bad the parser 
generator (better: the code generated) should fail.

Regards
Edgar

