From loic.habermacher at gmail.com  Sat May  1 08:44:09 2010
From: loic.habermacher at gmail.com (=?UTF-8?Q?Lo=C3=AFc_Habermacher?=)
Date: Sat, 1 May 2010 17:44:09 +0200
Subject: [antlr-interest] Suggestion about refactoring a rule
Message-ID: <j2vcebf2d7c1005010844y40727bbbib51462bd15595a14@mail.gmail.com>

Hello everyone,

I have a rule that works fine but I would like to factor it for better
readibility.
I am processing the INSERT SQL request which looks like :
*insert into table1 (col1,col2,col3) values (1,foo,bar);*
I want to create an AST with table1 as root and with ^(col1 1)  ^(col2
foo)  ^(col3 bar) as child of table1.

It works fine with the grammar below but I find the *insert_def* rule
difficult to read
------extract from grammar.g ------
insert_def:
  'insert' 'into' table_name
  LEFT_PAREN a=column_name (COMMA cls+=column_name)* RIGHT_PAREN
  'values' LEFT_PAREN b=atom (COMMA ats+=atom)* RIGHT_PAREN
  SEMICOLON
   -> ^(INSERT ^(table_name ^($a $b) ^($cls $ats)*))
  ;

colum_name: ID;
table_name : ID;
atom: ID | NUMBER;
----------------------------
I would prefer to have a grammar like the one below :
--------------------------------------------
insert_def:
  'insert' 'into' table_name
  column_list
  value_list
  SEMICOLON
   -> ^(INSERT ^(table_name ^(column_list value_list)+))
  ;

column_list:
  LEFT_PAREN column_name (COMMA column_name)* RIGHT_PAREN
  -> column_name+
  ;
value_list:
  values' LEFT_PAREN atom (COMMA atom)* RIGHT_PAREN
  -> atom+
  ;
---------------------------------------
but at runtime with the second grammar I get a "more than one node as root"
exception. However, the first grammar works and ANTLR construct multiple
trees on the base of two lists (cls and ats) ....
Any help is very welcome.

Thanks

From parrt at cs.usfca.edu  Sat May  1 10:25:40 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 1 May 2010 10:25:40 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <z2j30dde8ce1004302321m71742236x18b7046135b95188@mail.gmail.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
	<AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
	<CE21E231-69D0-49C2-B35E-0C909B3FF632@temporal-wave.com>
	<FAE09190-9185-436B-8B61-2C0D6B45A40B@cs.usfca.edu>
	<z2j30dde8ce1004302321m71742236x18b7046135b95188@mail.gmail.com>
Message-ID: <70A28CD9-C673-4B80-B5F7-55E9CA2EF497@cs.usfca.edu>


On Apr 30, 2010, at 11:21 PM, Ron Burk wrote:
> Of course, Thompson's algorithm (and Cox's analysis)
> is oriented towards building lots of NFA's on the fly
> for short-term use. Lexical analyzer generators have
> the luxury of enormous CPU time to spit out optimized
> (if not optimal -- though what one might be optimizing
> for can vary) DFAs.

I plan to just try out the NFA simulation (with some static analysis hints encoded into SPLIT instructions) to see how fast they are.  I must balance speed with simplicity etc.. in generated recognizers.  It's fun to play!

Ter

From jimi at temporal-wave.com  Sat May  1 12:00:27 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 01 May 2010 12:00:27 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <z2j30dde8ce1004302321m71742236x18b7046135b95188@mail.gmail.com>
Message-ID: <95eb0d35255a954895dd9762477a5bec@temporal-wave.com>

I agree with your conjecture - if you look at the performance of the C runtime as it stands, I have optimized away almost everything but the LA() call. The only way I get that to go away from the list of hot spots is to inline the code, which makes it faster by eliminating the indirect function call, but merely elides the information telling you that the performance is all about traversing the input stream, which at some point causes L1 cache misses and the CPU stalls. 

With the new VM approach, the memory fetch loop is going to be even more important and I suspect that LA being 60% of the total execution time may well turn out to be an underestimate. At some point though, we have to read the characters, and once they are in L1 cache it doesn't matter how often; that first cache miss is the killer. So optimizing the DFA is cool but as soon as we get a cache miss, it all goes to hell in a hand basket ;-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ron Burk
> Sent: Friday, April 30, 2010 11:21 PM
> To: Terence Parr
> Cc: antlr-interest Interest
> Subject: Re: [antlr-interest] Any plans of next ANTLR Release
> 
> > According to Cox, Thompson's original algorithm generated
> > machine code in the 1960s.
> 
> It was a fair portion of the beauty of his paper that he could
> present mostly complete code in such a short space. However,
> the machine architecture of the machine he was working
> on fit this algorithm very well (and Thompson was clever
> in coding it). I would not be as blithe as Cox in assuming that
> modern machines are fast enough to forgo that advantage
> (YAMV - Your App May Vary). Lexical analysis so easily
> can consume a nontrivial portion of parsing CPU cost.
> E.g., in  http://tinyurl.com/yebzy5o is claimed:
> 
>   "From Intel XML Parsing Accelerator, we found that character
> checking loop occupies more than 60% CPU cycles of the whole parsing
> process, depending on the property of benchmark."
> 
> Of course, Thompson's algorithm (and Cox's analysis)
> is oriented towards building lots of NFA's on the fly
> for short-term use. Lexical analyzer generators have
> the luxury of enormous CPU time to spit out optimized
> (if not optimal -- though what one might be optimizing
> for can vary) DFAs.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From parrt at cs.usfca.edu  Sat May  1 14:54:51 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 1 May 2010 14:54:51 -0700
Subject: [antlr-interest] yet more on v4 lexer progress
Message-ID: <AA00CAFA-E81F-4538-BA2D-C9C585AD8C0B@cs.usfca.edu>

Wow. got recursive lexer rule invocation working in a few hours from the "no calls allowed" core (it mimics LL(*) analysis but at runtime).

	@Test public void testRecursiveCall() throws Exception {
		LexerGrammar g = new LexerGrammar(
			"lexer grammar L;\n" +
			"ACTION : '{' (ACTION|.)* '}' ;\n");
		String expecting = "ACTION, EOF";
		checkMatches(g, "{hi}", expecting);
		checkMatches(g, "{{hi}}", expecting);
		checkMatches(g, "{{x}{y}}", expecting);
		checkMatches(g, "{{{{{{x}}}}}}", expecting);
	}

Note how simple the bytecodes are for the grammar:

ACTION : '{' (ACTION | .)* '}' ;

gives:

0000:	split         5
0005:	match8        '{'      // Start of ACTION
0007:	split         14, 31
0014:	split         21, 27
0021:	call          5 // call ACTION
0024:	jmp           28
0027:	wildcard        
0028:	jmp           7
0031:	match8        '}'
0033:	accept        4

v4 does what you'd expect now: longest match with priority given to earlier rules upon match of same length.

It also handles case where it must remember all possible matches and rewind if it fails further on.  This was highlighted in

http://www.antlr.org/jira/browse/ANTLR-189

Now it works automatically:

	@Test public void testRewindBackToLastGoodMatch_DOT_vs_NUM() throws Exception {
		LexerGrammar g = new LexerGrammar(
			"lexer grammar L;\n" +
			"NUM: '0'..'9'+ ('.' '0'..'9'+)? ;\n"+
			"DOT : '.' ;\n"+
			"WS : ' ' ;\n");
		checkMatches(g, "3.14 .", "NUM, WS, DOT, EOF");
		checkMatches(g, "9", "NUM, EOF");
		checkMatches(g, ".1", "DOT, NUM, EOF");
		checkMatches(g, "1.", "NUM, DOT, EOF");
	}

Here, "1." starts NUM and enters ('.' '0'..'9'+)? subrule due to '.' after '1'.  Ooops, no digit after '.'.  Rewind to spot where we looked like an integer: "1" then next match sees '.'. cool.

Java impl of this more complicated VM is still only about 1200 bytes (in java bytecodes).  Can use lots more memory at runtime than "no rule invocation" version as well.

Woohoo!
Ter

From gthouraya at yahoo.fr  Sun May  2 03:37:17 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Sun, 2 May 2010 10:37:17 +0000 (GMT)
Subject: [antlr-interest] Antlrworks or Maven in translation
Message-ID: <510949.74337.qm@web26308.mail.ukl.yahoo.com>

Hello,
I want to make the translation between two languages X and Y by using the token rewrite and the string template, can I use only the ANTLRWork? 
?Otherwise, if I have to install the maven, how? can I use it to make the translation? 



      

From spam_dumpster2 at cox.net  Sun May  2 08:31:23 2010
From: spam_dumpster2 at cox.net (Spam Dumpster)
Date: Sun, 02 May 2010 08:31:23 -0700
Subject: [antlr-interest] C Target: thread-safe trees
Message-ID: <20100502153143.BSGR20564.fed1rmmtao105.cox.net@fed1rmimpo02.cox.net>


I'm concerned about concurrent parsing in C++ applications.  What is 
the best practice for declaring trees locally to support 
thread-safety?  Can it be done in the grammar file?


From jimi at temporal-wave.com  Sun May  2 09:32:38 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 02 May 2010 09:32:38 -0700
Subject: [antlr-interest] C Target: thread-safe trees
In-Reply-To: <20100502153143.BSGR20564.fed1rmmtao105.cox.net@fed1rmimpo02.cox.net>
Message-ID: <3e2035e111c81a4193d849bde345c1de@temporal-wave.com>

The C target is free threading, there is nothing to do other than use it and make sure your own code is free threading.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Spam Dumpster
> Sent: Sunday, May 02, 2010 8:31 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] C Target: thread-safe trees
> 
> 
> I'm concerned about concurrent parsing in C++ applications.  What is
> the best practice for declaring trees locally to support
> thread-safety?  Can it be done in the grammar file?
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jsuijs at gmail.com  Sun May  2 11:49:13 2010
From: jsuijs at gmail.com (Joep Suijs)
Date: Sun, 2 May 2010 20:49:13 +0200
Subject: [antlr-interest] access to filename
Message-ID: <q2z9d92de171005021149we6c516d8xae5cd7a9b0ed725e@mail.gmail.com>

Hi guys,

For error reporting, I need access to the origination of a token when
I walk through the tree after it is parsed. This works okay for line
number and position on the line, but fails for the filename. A piece
of the code used:

      ANTLR3_UINT32 TokenType = child->getType(child);
      CIndent(Level);
      printf("%s (%d, %s from ",child->toString(child)->chars,
TokenType, jalParserTokenNames[TokenType]);

      ANTLR3_INPUT_STREAM *is = Token->input;
      printf("input stream %x,",is);
//      printf("input stream %d,",is->fileName);
      printf("Line %d:%d)",Token->getLine(Token),
Token->getCharPositionInLine(Token));

The input stream print shows a non-zero pointer, but uncommenting the
last line triggers an exception. The next line prints the line &
postion as expected.
What am I doing wrong?

Joep

From marcin.rzeznicki at gmail.com  Sun May  2 14:43:05 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Sun, 2 May 2010 23:43:05 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
Message-ID: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>

Good day to all of you
I have just encountered weird issue and I can't think of any way to
resolve my problem.
First, I prepared my grammar - free of any actions - and compiled a
parser without an issue. Next, I started adding actions - being
halfway done I compiled parser again to debug/check some things. It
compiled without any error or complaint about non-LL(*) rules, mind
you - just few ambiguities which I chose to live with as they were
minor issue at that point. After adding few more actions, input
parameters, results from production etc I tried to compile grammar
again and I was surprised by ANTLR tool complaining about non-LL(*)
alts here and there. I did not change the "structure" of the grammar,
just added actions etc. Now, I am lost. I know this question may sound
a bit vague, but I cannot confine this problem to anything. Does
anyone know whether (and why) adding actions/input parameters to
grammar's productions may confuse ANTLR to report non-LL(*)
alternatives on previously well-defined LL(*) grammar? Thanks for any
hints
PS. I am not giving examples because the whole grammar is quite large
and probably messy. Thus, I am just looking for some general hints.
-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Sun May  2 15:55:00 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 2 May 2010 15:55:00 -0700
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
Message-ID: <AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>

hi. actions hide semantic predicates...got any?
T
On May 2, 2010, at 2:43 PM, Marcin Rze?nicki wrote:

> Good day to all of you
> I have just encountered weird issue and I can't think of any way to
> resolve my problem.
> First, I prepared my grammar - free of any actions - and compiled a
> parser without an issue. Next, I started adding actions - being
> halfway done I compiled parser again to debug/check some things. It
> compiled without any error or complaint about non-LL(*) rules, mind
> you - just few ambiguities which I chose to live with as they were
> minor issue at that point. After adding few more actions, input
> parameters, results from production etc I tried to compile grammar
> again and I was surprised by ANTLR tool complaining about non-LL(*)
> alts here and there. I did not change the "structure" of the grammar,
> just added actions etc. Now, I am lost. I know this question may sound
> a bit vague, but I cannot confine this problem to anything. Does
> anyone know whether (and why) adding actions/input parameters to
> grammar's productions may confuse ANTLR to report non-LL(*)
> alternatives on previously well-defined LL(*) grammar? Thanks for any
> hints
> PS. I am not giving examples because the whole grammar is quite large
> and probably messy. Thus, I am just looking for some general hints.
> -- 
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From marcin.rzeznicki at gmail.com  Sun May  2 16:26:11 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 3 May 2010 01:26:11 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
Message-ID: <w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>

On Mon, May 3, 2010 at 12:55 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> hi. actions hide semantic predicates...got any?
> T
> On May 2, 2010, at 2:43 PM, Marcin Rze?nicki wrote:

Yes, quite a lot :-) Could you elaborate? In what way they do "hide" them?

-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Sun May  2 16:32:27 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 2 May 2010 16:32:27 -0700
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
Message-ID: <F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>


On May 2, 2010, at 4:26 PM, Marcin Rze?nicki wrote:

> On Mon, May 3, 2010 at 12:55 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> hi. actions hide semantic predicates...got any?
>> T
>> On May 2, 2010, at 2:43 PM, Marcin Rze?nicki wrote:
> 
> Yes, quite a lot :-) Could you elaborate? In what way they do "hide" them?

ANTLR cannot test a predicate during prediction (before alt executes) if an action is in front of it:

a : {action} {p}? ID
  | ID
  ;

action could alter results of p.

Ter

From jimi at temporal-wave.com  Sun May  2 16:33:45 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 02 May 2010 16:33:45 -0700
Subject: [antlr-interest] access to filename
In-Reply-To: <q2z9d92de171005021149we6c516d8xae5cd7a9b0ed725e@mail.gmail.com>
Message-ID: <d4ccae48ed2abf4d8f85c1d36761629e@temporal-wave.com>

It is a pANTLR3_STRING, not a char *.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Joep Suijs
> Sent: Sunday, May 02, 2010 11:49 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] access to filename
> 
> Hi guys,
> 
> For error reporting, I need access to the origination of a token when
> I walk through the tree after it is parsed. This works okay for line
> number and position on the line, but fails for the filename. A piece
> of the code used:
> 
>       ANTLR3_UINT32 TokenType = child->getType(child);
>       CIndent(Level);
>       printf("%s (%d, %s from ",child->toString(child)->chars,
> TokenType, jalParserTokenNames[TokenType]);
> 
>       ANTLR3_INPUT_STREAM *is = Token->input;
>       printf("input stream %x,",is);
> //      printf("input stream %d,",is->fileName);
>       printf("Line %d:%d)",Token->getLine(Token),
> Token->getCharPositionInLine(Token));
> 
> The input stream print shows a non-zero pointer, but uncommenting the
> last line triggers an exception. The next line prints the line &
> postion as expected.
> What am I doing wrong?
> 
> Joep
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From marcin.rzeznicki at gmail.com  Sun May  2 16:42:57 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 3 May 2010 01:42:57 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
Message-ID: <l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>

2010/5/3 Terence Parr <parrt at cs.usfca.edu>:
>
> On May 2, 2010, at 4:26 PM, Marcin Rze?nicki wrote:
>
>> On Mon, May 3, 2010 at 12:55 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> hi. actions hide semantic predicates...got any?
>>> T
>>> On May 2, 2010, at 2:43 PM, Marcin Rze?nicki wrote:
>>
>> Yes, quite a lot :-) Could you elaborate? In what way they do "hide" them?
>
> ANTLR cannot test a predicate during prediction (before alt executes) if an action is in front of it:
>
> a : {action} {p}? ID
> ?| ID
> ?;
>
> action could alter results of p.
>
> Ter

ah, thanks a lot - that explains a lot
So, in th example you posted above - with an action in front it is
equivalent to:
a : {action} ID
?| ID
;
right?
So, care to give me any hint about reorganizing actions in similar
case? Thx a lot


-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Sun May  2 16:47:32 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 2 May 2010 16:47:32 -0700
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
Message-ID: <69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>


On May 2, 2010, at 4:42 PM, Marcin Rze?nicki wrote:
> ah, thanks a lot - that explains a lot
> So, in th example you posted above - with an action in front it is
> equivalent to:
> a : {action} ID
>  | ID
> ;
> right?

yup.

> So, care to give me any hint about reorganizing actions in similar
> case? Thx a lot

move the pred to the left of action. ;) if function of action, move code into pred.
T

From markwright at internode.on.net  Sun May  2 16:48:45 2010
From: markwright at internode.on.net (Mark Wright)
Date: Mon, 3 May 2010 09:48:45 +1000
Subject: [antlr-interest] access to filename
In-Reply-To: <q2z9d92de171005021149we6c516d8xae5cd7a9b0ed725e@mail.gmail.com>
References: <q2z9d92de171005021149we6c516d8xae5cd7a9b0ed725e@mail.gmail.com>
Message-ID: <20100502234845.GA1810@internode.on.net>

On Sun, May 02, 2010 at 08:49:13PM +0200, Joep Suijs wrote:
> Hi guys,
> 
> For error reporting, I need access to the origination of a token when
> I walk through the tree after it is parsed. This works okay for line
> number and position on the line, but fails for the filename. A piece
> of the code used:
> 
>       ANTLR3_UINT32 TokenType = child->getType(child);
>       CIndent(Level);
>       printf("%s (%d, %s from ",child->toString(child)->chars,
> TokenType, jalParserTokenNames[TokenType]);
> 
>       ANTLR3_INPUT_STREAM *is = Token->input;
>       printf("input stream %x,",is);
> //      printf("input stream %d,",is->fileName);

Hi Joep,

You might be able to workaround this by obtaining
the file name from a pointer to your lexer that
was generated by ANTLR, something like:

jalLexer *lexer;
// Need to initialize lexer somehow
printf("file name %s,",lexer->pLexer->input->fileName->chars);

Regards, Mark

>       printf("Line %d:%d)",Token->getLine(Token),
> Token->getCharPositionInLine(Token));
> 
> The input stream print shows a non-zero pointer, but uncommenting the
> last line triggers an exception. The next line prints the line &
> postion as expected.
> What am I doing wrong?
> 
> Joep
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From marcin.rzeznicki at gmail.com  Sun May  2 16:55:26 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 3 May 2010 01:55:26 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
	<69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
Message-ID: <x2y14799bf61005021655ma823b538k7cf582b538165ed4@mail.gmail.com>

On Mon, May 3, 2010 at 1:47 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>
>> So, care to give me any hint about reorganizing actions in similar
>> case? Thx a lot
>
> if function of action, move code into pred.

<slaps his forehead> Right :-) Thank you very much


-- 
Greetings
Marcin Rze?nicki

From jsuijs at gmail.com  Sun May  2 23:28:15 2010
From: jsuijs at gmail.com (Joep Suijs)
Date: Mon, 3 May 2010 08:28:15 +0200
Subject: [antlr-interest] access to filename
In-Reply-To: <20100502234845.GA1810@internode.on.net>
References: <q2z9d92de171005021149we6c516d8xae5cd7a9b0ed725e@mail.gmail.com>
	<20100502234845.GA1810@internode.on.net>
Message-ID: <m2k9d92de171005022328we1cc4c46uecce66f75cc1bc5f@mail.gmail.com>

Hi Mark, Jim,


2010/5/3 Mark Wright <markwright at internode.on.net>:
> jalLexer *lexer;
> // Need to initialize lexer somehow
> printf("file name %s,",lexer->pLexer->input->fileName->chars);
>

Thank you for your suggestion, it prints the root file name. The
program also include subfiles with PUSHSTREAM macro, so tokens tokens
come from different files. I guess the tokens need to be the starting
point to get the appropriate filename...


@Jim
>> //      printf("input stream %d,",is->fileName);
> It is a pANTLR3_STRING, not a char *.

I don't understand how I can use it when even printing the value of
the pointer (is->fileName) fails. Please enlighten me.

Joep


From marcin.rzeznicki at gmail.com  Mon May  3 05:33:30 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 3 May 2010 14:33:30 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
	<69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
Message-ID: <s2s14799bf61005030533x975272c5v447d5697d8f8dcf7@mail.gmail.com>

On Mon, May 3, 2010 at 1:47 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On May 2, 2010, at 4:42 PM, Marcin Rze?nicki wrote:
>> ah, thanks a lot - that explains a lot
>> So, in th example you posted above - with an action in front it is
>> equivalent to:
>> a : {action} ID
>> ?| ID
>> ;
>> right?
>
> yup.
>
>> So, care to give me any hint about reorganizing actions in similar
>> case? Thx a lot
>
> move the pred to the left of action. ;) if function of action, move code into pred.
> T
>

Hi again,
Thanks to your advice I was able to resolve my problems, yet I think
that ANTLR is buggy in one aspect. If I understand this correctly:
during evaluation of semantic predicates  actions are not executed, so
if the action is in front of a predicate, behavior of parser may be
inconsistent - parsing and backtracking modes might take different
routes due to action's side effect. But, if actions is marked as '{{'
which means execute regardless of backtracking then, following the
reasoning above, it should not hide following predicates because
anything this action can do wrt. changing parsing state will be
visible in both 'modes' and behavior of parsing will be consistent.
But ANTLR still hides predicate, even if action is '{{'.



-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Mon May  3 09:27:16 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 3 May 2010 09:27:16 -0700
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <s2s14799bf61005030533x975272c5v447d5697d8f8dcf7@mail.gmail.com>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
	<69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
	<s2s14799bf61005030533x975272c5v447d5697d8f8dcf7@mail.gmail.com>
Message-ID: <2751F0C8-7696-401D-9842-8A6FF0C90B87@cs.usfca.edu>

it still won't execute the {{...}}} before the pred is evaluated  
during prediction. it must not eval disambiguating preds after actions  
in any circumstance.
Ter
On May 3, 2010, at 5:33 AM, Marcin Rze?nicki wrote:

> On Mon, May 3, 2010 at 1:47 AM, Terence Parr <parrt at cs.usfca.edu>  
> wrote:
>>
>> On May 2, 2010, at 4:42 PM, Marcin Rze?nicki wrote:
>>> ah, thanks a lot - that explains a lot
>>> So, in th example you posted above - with an action in front it is
>>> equivalent to:
>>> a : {action} ID
>>>  | ID
>>> ;
>>> right?
>>
>> yup.
>>
>>> So, care to give me any hint about reorganizing actions in similar
>>> case? Thx a lot
>>
>> move the pred to the left of action. ;) if function of action, move  
>> code into pred.
>> T
>>
>
> Hi again,
> Thanks to your advice I was able to resolve my problems, yet I think
> that ANTLR is buggy in one aspect. If I understand this correctly:
> during evaluation of semantic predicates  actions are not executed, so
> if the action is in front of a predicate, behavior of parser may be
> inconsistent - parsing and backtracking modes might take different
> routes due to action's side effect. But, if actions is marked as '{{'
> which means execute regardless of backtracking then, following the
> reasoning above, it should not hide following predicates because
> anything this action can do wrt. changing parsing state will be
> visible in both 'modes' and behavior of parsing will be consistent.
> But ANTLR still hides predicate, even if action is '{{'.
>
>
>
> -- 
> Greetings
> Marcin Rze?nicki


From marcin.rzeznicki at gmail.com  Mon May  3 10:08:52 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 3 May 2010 19:08:52 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <2751F0C8-7696-401D-9842-8A6FF0C90B87@cs.usfca.edu>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
	<69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
	<s2s14799bf61005030533x975272c5v447d5697d8f8dcf7@mail.gmail.com>
	<2751F0C8-7696-401D-9842-8A6FF0C90B87@cs.usfca.edu>
Message-ID: <y2z14799bf61005031008qdcfaf071yd77db8acfc41ef6d@mail.gmail.com>

2010/5/3 Terence Parr <parrt at cs.usfca.edu>:
> it still won't execute the {{...}}} before the pred is evaluated during
> prediction. it must not eval disambiguating preds after actions in any
> circumstance.
> Ter

I see. So that poses yet another problem with recursive tree-like
definitions. If I got production like

s returns[Tree tree]
:
a1=a {$tree = $a1.tree; }  (DELIMITER a2=a {$tree = new Tree($tree,$a2.tree);})*

AND there is an ambiguity in whether to enter the loop or leave it (it
creates predicate under the hood) then the first action hides that
predicate. Then the solution is to explicitly check in the second
action whether current iteration is the first one, which is pretty
ugly and imposes performance hit as this means that this test is
repeated on every loop roll, or unroll the loop manually one time
which is ugly too :-/ I suppose there is no syntax which marks an
action as predicate-safe? :-)

-- 
Greetings
Marcin Rze?nicki

From ronburk at gmail.com  Mon May  3 10:56:23 2010
From: ronburk at gmail.com (Ron Burk)
Date: Mon, 3 May 2010 10:56:23 -0700
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
Message-ID: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>

Something that has been bugging me:

Why do virtually all parser generators produce a warning
for the classic case of if-else ambiguity? It's only technically
ambiguous: there is absolutely only one resolution to the
ambiguity that could possibly make any sense at all,
so warning the user that an ambiguity exists just
wastes the users time -- this is a class of ambiguity
for which the parser generator can make the correct
choice with 100% confidence.

Indeed, it wastes a huge amount of user time even
if you only measure the time spent posting and answering
the same "why is this else ambiguous" question over
and over again (as a quick Google will show). This is
not, as is often claimed, a situation where using a
default of "consuming more input" is "usually what
you want". This particular example is a case where
there is only one possible choice that could be right.

Part of the problem is people keep explaining the problem
utterly incorrectly. For example, the yacc manual goes
into the if-else ambiguity in great detail, and claims
that the problem is that the else can bind to either
an inner or outer if. That is wrong. The else can only
bind to the inner if.

One can demonstrate that point by taking the example
if-else grammar from the yacc manual and then using
%prec to force it to choose to reduce instead of shift
when it encounters an "else" token. The result is a parser
that produces a syntax error whenever it sees an "else"
token -- no "else" token can ever be consumed. There
were never really two possible choices that could
make sense, there was never any possibility of matching
an "else" to an outer if. There is only one *valid* choice
between the two *technically* ambiguous choices since
the other alternative is, as the Dragon Book says,
"surely wrong".

There is no doubt that this particular "ambiguity" can
be resolved with 100% confidence 100% automatically,
without wasting endless hours of user time by informing
them that it was "ambiguous". The only interesting question
is, what is the general category this case belongs to?

Roughly speaking, I think the category is simply those
situations where ambiguity arises because, effectively,
you have the same optional non-terminal adjacent to
itself:
        N? N?

For example, in this grammar:

%token IF ELSE EXPR
%%

stmt
    : if
    | EXPR
    ;

if
    : IF EXPR stmt else_opt
    ;

else_opt    /* optional else */
    : ELSE stmt
    |
    ;

The ambiguity could be identified (by either a top-down
or bottom up parser generator) as occurring in the "if"
production right after "stmt" has been recognized.
However, it can be automatically determined that
the cause is the fact that "stmt" can end with an
optional else, putting two optional else nonterminals
adjacent to each other, which matches the previously
mentioned category -- therefore this is a false
ambiguity.

One can see the problem simplified here:

%token DIGIT
%%
digits
    : '(' DIGIT digit_opt digit_opt ')'
digit_opt  /* optional digit */
    : DIGIT
    | /* epsilon */
    ;

Only one choice for the "ambiguity" can possibly be right;
the alternative is that the parser would never be able to
match any of the optional digits. It will always be the case
when you have two adjacent optional non-terminals that
there is a technically ambiguous choice between either
consuming input, or rendering illegal a token that obviously
should be legal at that point. The correct choice is always
clear, and the alternative could never make sense.

There are many other (at least vaguely related)
cases where a warning absolutely should be
issued, of course:
     N* N*
for example, or
    N* N
or even
    N? O?
where FIRST(N) and FIRST(O) intersect (I'm all for
warning if there's the slightest possibility the user
isn't going to understand what's going to happen).
But for this category I've identified as pseudo
ambiguities, there is no possibility of user confusion,
there is no actual alternative that could ever
possibly make any sense. It is a mere curiosity,
not a true ambiguity.

IMHO, modern parser generators should not be
wasting enormous amounts of total user time by
warning about this class of pseudo ambiguities.
And modern parser generator documentation
should not repeat the utterly incorrect if-else
explanation that implies there is a different
choice that produces anything sensible
whatsoever.

I feel better now. :-)

From scott at javadude.com  Mon May  3 11:14:47 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Mon, 3 May 2010 14:14:47 -0400
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
Message-ID: <o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>

You only have 100% confidence in it because that's how you define the
semantics for the if/else ambiguity for your language. The construct
itself is ambiguous when if/else doesn't require some kind of block
specification (like C/C++/Java).

Some other language could define the semantics to intentionally match
the else to the _outermost_ if. (I think that would be a _really_ bad
idea and confuse a lot of people, but we shouldn't be dictating
language definition.)

That said, we could define a special
"if/else-uses-standard-resolution" option, but isn't that really
similar to being explicit with predicates? Why introduce an explicit
option for one construct that not all languages need?

-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Mon, May 3, 2010 at 1:56 PM, Ron Burk <ronburk at gmail.com> wrote:
> Something that has been bugging me:
>
> Why do virtually all parser generators produce a warning
> for the classic case of if-else ambiguity? It's only technically
> ambiguous: there is absolutely only one resolution to the
> ambiguity that could possibly make any sense at all,
> so warning the user that an ambiguity exists just
> wastes the users time -- this is a class of ambiguity
> for which the parser generator can make the correct
> choice with 100% confidence.
>
> Indeed, it wastes a huge amount of user time even
> if you only measure the time spent posting and answering
> the same "why is this else ambiguous" question over
> and over again (as a quick Google will show). This is
> not, as is often claimed, a situation where using a
> default of "consuming more input" is "usually what
> you want". This particular example is a case where
> there is only one possible choice that could be right.
>
> Part of the problem is people keep explaining the problem
> utterly incorrectly. For example, the yacc manual goes
> into the if-else ambiguity in great detail, and claims
> that the problem is that the else can bind to either
> an inner or outer if. That is wrong. The else can only
> bind to the inner if.
>
> One can demonstrate that point by taking the example
> if-else grammar from the yacc manual and then using
> %prec to force it to choose to reduce instead of shift
> when it encounters an "else" token. The result is a parser
> that produces a syntax error whenever it sees an "else"
> token -- no "else" token can ever be consumed. There
> were never really two possible choices that could
> make sense, there was never any possibility of matching
> an "else" to an outer if. There is only one *valid* choice
> between the two *technically* ambiguous choices since
> the other alternative is, as the Dragon Book says,
> "surely wrong".
>
> There is no doubt that this particular "ambiguity" can
> be resolved with 100% confidence 100% automatically,
> without wasting endless hours of user time by informing
> them that it was "ambiguous". The only interesting question
> is, what is the general category this case belongs to?
>
> Roughly speaking, I think the category is simply those
> situations where ambiguity arises because, effectively,
> you have the same optional non-terminal adjacent to
> itself:
> ? ? ? ?N? N?
>
> For example, in this grammar:
>
> %token IF ELSE EXPR
> %%
>
> stmt
> ? ?: if
> ? ?| EXPR
> ? ?;
>
> if
> ? ?: IF EXPR stmt else_opt
> ? ?;
>
> else_opt ? ?/* optional else */
> ? ?: ELSE stmt
> ? ?|
> ? ?;
>
> The ambiguity could be identified (by either a top-down
> or bottom up parser generator) as occurring in the "if"
> production right after "stmt" has been recognized.
> However, it can be automatically determined that
> the cause is the fact that "stmt" can end with an
> optional else, putting two optional else nonterminals
> adjacent to each other, which matches the previously
> mentioned category -- therefore this is a false
> ambiguity.
>
> One can see the problem simplified here:
>
> %token DIGIT
> %%
> digits
> ? ?: '(' DIGIT digit_opt digit_opt ')'
> digit_opt ?/* optional digit */
> ? ?: DIGIT
> ? ?| /* epsilon */
> ? ?;
>
> Only one choice for the "ambiguity" can possibly be right;
> the alternative is that the parser would never be able to
> match any of the optional digits. It will always be the case
> when you have two adjacent optional non-terminals that
> there is a technically ambiguous choice between either
> consuming input, or rendering illegal a token that obviously
> should be legal at that point. The correct choice is always
> clear, and the alternative could never make sense.
>
> There are many other (at least vaguely related)
> cases where a warning absolutely should be
> issued, of course:
> ? ? N* N*
> for example, or
> ? ?N* N
> or even
> ? ?N? O?
> where FIRST(N) and FIRST(O) intersect (I'm all for
> warning if there's the slightest possibility the user
> isn't going to understand what's going to happen).
> But for this category I've identified as pseudo
> ambiguities, there is no possibility of user confusion,
> there is no actual alternative that could ever
> possibly make any sense. It is a mere curiosity,
> not a true ambiguity.
>
> IMHO, modern parser generators should not be
> wasting enormous amounts of total user time by
> warning about this class of pseudo ambiguities.
> And modern parser generator documentation
> should not repeat the utterly incorrect if-else
> explanation that implies there is a different
> choice that produces anything sensible
> whatsoever.
>
> I feel better now. :-)
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From andersen at highfleet.com  Mon May  3 15:21:20 2010
From: andersen at highfleet.com (Bill Andersen)
Date: Mon, 3 May 2010 18:21:20 -0400
Subject: [antlr-interest] String template conundrum
Message-ID: <ABB0D7FB-020E-478C-8501-855AF54962F3@highfleet.com>

Hi folks

I have a grammar I'm working on for a pattern-matching language with string template output that is meant to generate java code to do the matching.  Here's an example (partial) production:

pattern
	: LP op=ID left=pattern right=pattern RP ->
	  matchBinOp(name0={ps.genName();}, op={$op}, 
	    name1={$left.st.getAttribute("name0")}, 
	    name2={$right.st.getAttribute("name0"})
	 // ???
	;

[ Note ps.genName() is just a name generator method in some support code for the parser ]

I want the output Java code to look like this

// Generated by matchBinOp template
boolean match1(...) {
   ... match2(...)
   ... match3(...)
}

// Generated by template for $left
boolean match2(...) { ... }

// Generated by template for $right
boolean match3(...) { ... } 

So the question is, how do I get all three methods in the output (the above production only generates the first method)?  Both $left and $right are (recursive) calls to the same production but each can (recursively) generate its own methods.  I want to get from that to a linear list of method in the class code.

I have an (inelegant) workaround that involves adding parameters to matchBinOp (and similar templates) to stitch the code together, eg.

	  matchBinOp(name0={ps.genName();}, op={$op}, 
	    name1={$left.st.getAttribute("name0")}, 
	    name2={$right.st.getAttribute("name0"})
	    code1={$left.st}
	    code2={$left.st})

but I don't like this solution and am looking for something better.

Thanks for any help

	.bill

Bill Andersen
Highfleet, Inc. (www.highfleet.com)
3600 O'Donnell Street, Suite 600
Baltimore, MD 21224
Office: +1.410.675.1201
Cell: +1.443.858.6444
Fax: +1.410.675.1204






From marcin.rzeznicki at gmail.com  Mon May  3 15:36:36 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 4 May 2010 00:36:36 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <y2z14799bf61005031008qdcfaf071yd77db8acfc41ef6d@mail.gmail.com>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
	<69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
	<s2s14799bf61005030533x975272c5v447d5697d8f8dcf7@mail.gmail.com>
	<2751F0C8-7696-401D-9842-8A6FF0C90B87@cs.usfca.edu>
	<y2z14799bf61005031008qdcfaf071yd77db8acfc41ef6d@mail.gmail.com>
Message-ID: <u2r14799bf61005031536z97ee6362l3305cdb1cca69568@mail.gmail.com>

2010/5/3 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>:
> 2010/5/3 Terence Parr <parrt at cs.usfca.edu>:
>> it still won't execute the {{...}}} before the pred is evaluated during
>> prediction. it must not eval disambiguating preds after actions in any
>> circumstance.
>> Ter
>
> I see. So that poses yet another problem with recursive tree-like
> definitions. If I got production like
>
> s returns[Tree tree]
> :
> a1=a {$tree = $a1.tree; } ?(DELIMITER a2=a {$tree = new Tree($tree,$a2.tree);})*
>
> AND there is an ambiguity in whether to enter the loop or leave it (it
> creates predicate under the hood) then the first action hides that
> predicate. Then the solution is to explicitly check in the second
> action whether current iteration is the first one, which is pretty
> ugly and imposes performance hit as this means that this test is
> repeated on every loop roll, or unroll the loop manually one time
> which is ugly too :-/ I suppose there is no syntax which marks an
> action as predicate-safe? :-)
>
All this is harder than it sounds, I see - as lot of problems emerge
from automatically generated ANTLR predicates. In presence of this
discovery my question is: how can you deal with actions and implicit
predicates? I cannot "move" the predicate to the left obviously, and
this "hiding" rule seems to be really constraining in this case.

-- 
Greetings
Marcin Rze?nicki

From ronburk at gmail.com  Mon May  3 15:37:00 2010
From: ronburk at gmail.com (Ron Burk)
Date: Mon, 3 May 2010 15:37:00 -0700
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
Message-ID: <l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>

> You only have 100% confidence in it because that's how you define the
> semantics for the if/else ambiguity for your language.

No, that's what all those paragraphs in the middle of the post
were refuting. :-).

> The construct
> itself is ambiguous when if/else doesn't require some kind of block
> specification (like C/C++/Java).

No, it's really not. Do you understand why Sethi, Aho, and Ullman,
when writing about this precise grammar situation, say that
the alternative choice of the (merely technical) ambiguity is
"surely wrong"? They're not saying it because it's a bad idea
to handle if/else differently; they're saying it because the alternate
choice is the nonsensical removal of "else" from the language
completely. The result is (guess I better try caps) A PARSER
THAT NO LONGER ACCEPTS INPUTS THAT ARE LEGAL IN
THE SPECIFIED GRAMMAR. That's how you get 100% confidence
that the machine can resolve the "ambiguity" automatically.
THE OTHER CHOICE IS A BROKEN PARSER. Try the
exercise I suggested with yacc (bison will work fine) if
that statement's truth is not obvious.

> Some other language could define the semantics to intentionally match
> the else to the _outermost_ if.

Let's diverge to that non sequitur for a moment. Could you post
a grammar for such a language? I would like to see how that
can be done with a CFG. I guess the rule would be that else
is illegal for any if that is inside of another if statement. Seems
like you would have to define a new non-terminal (e.g., inner_if)
that does everything an if does, but can't contain an if (only
another inner_if) and can't be followed by an else. So, the
traditional discussion of if/else ambiguity is absurd on two
levels: a) nobody ever takes that extra step to think about
what it would actually mean to bind the else to the outermost
if and b) how the else binds has *nothing* to do with source
of the (trivial, technical, meaningless) grammar ambiguity.

But of course, the
real point is not what might be happening in the infinite
universe of possible grammars, but whether this precise
grammar's alleged ambiguous choice between the null
production and the non-null production could ever possibly
produce anything *anyone* would deem sensible if the
null production choice is selected. It can't. It can only
fail to produce a parser that meets the grammar spec.

> That said, we could define a special
> "if/else-uses-standard-resolution" option,

That's already the only option. The only issue is that parser
generators keep wasting users time by claiming that there
was an alternative choice that could possibly make sense.
There isn't. When you have two adjacent instances of the
same optional non-terminal, the only choice is the
non-null production, otherwise you render a terminal
illegal at a point where it should clearly be legal,
and your parser no longer accepts the language specified
by the grammar.

It's like having a warning message that says "I was going
to insert a bug on line 34, but I decided not to,
but you should spend hours studying this in case
you feel I should have went with the bug after all."

   r monty_python_parrot_sketch.txt
   s/parrot/parser/
   s/dead/broken/
   s/sleeping/ambiguous/
   w
   q

> Why introduce an explicit option for one construct that
> not all languages need?

No new options needed at all. Just stop complaining about
"ambiguities" for which the only alternative choice cannot
possibly be correct because it produces a parser that
no longer accepts the specified grammar. The ambiguity
is a "pseudo" ambiguity, because one of the two
choices produces a broken parser. This class of spurious
warnings has wasted enormous amounts of user time
over past decades. It seems likely to do so into the future.

Won't somebody please think of the children?  :-)

From parrt at cs.usfca.edu  Mon May  3 15:47:37 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 3 May 2010 15:47:37 -0700
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <u2r14799bf61005031536z97ee6362l3305cdb1cca69568@mail.gmail.com>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<AC978102-E3C5-422A-A5A7-D06A57DDE49E@cs.usfca.edu>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
	<69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
	<s2s14799bf61005030533x975272c5v447d5697d8f8dcf7@mail.gmail.com>
	<2751F0C8-7696-401D-9842-8A6FF0C90B87@cs.usfca.edu>
	<y2z14799bf61005031008qdcfaf071yd77db8acfc41ef6d@mail.gmail.com>
	<u2r14799bf61005031536z97ee6362l3305cdb1cca69568@mail.gmail.com>
Message-ID: <9323DAB7-B2B2-4EC4-9E80-C76602245C16@cs.usfca.edu>

Marcin, ANTLR should let backtracking predicates work even with actions.
Ter
On May 3, 2010, at 3:36 PM, Marcin Rze?nicki wrote:

> 2010/5/3 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>:
>> 2010/5/3 Terence Parr <parrt at cs.usfca.edu>:
>>> it still won't execute the {{...}}} before the pred is evaluated during
>>> prediction. it must not eval disambiguating preds after actions in any
>>> circumstance.
>>> Ter
>> 
>> I see. So that poses yet another problem with recursive tree-like
>> definitions. If I got production like
>> 
>> s returns[Tree tree]
>> :
>> a1=a {$tree = $a1.tree; }  (DELIMITER a2=a {$tree = new Tree($tree,$a2.tree);})*
>> 
>> AND there is an ambiguity in whether to enter the loop or leave it (it
>> creates predicate under the hood) then the first action hides that
>> predicate. Then the solution is to explicitly check in the second
>> action whether current iteration is the first one, which is pretty
>> ugly and imposes performance hit as this means that this test is
>> repeated on every loop roll, or unroll the loop manually one time
>> which is ugly too :-/ I suppose there is no syntax which marks an
>> action as predicate-safe? :-)
>> 
> All this is harder than it sounds, I see - as lot of problems emerge
> from automatically generated ANTLR predicates. In presence of this
> discovery my question is: how can you deal with actions and implicit
> predicates? I cannot "move" the predicate to the left obviously, and
> this "hiding" rule seems to be really constraining in this case.
> 
> -- 
> Greetings
> Marcin Rze?nicki


From acondit at IPNS.COM  Mon May  3 16:49:44 2010
From: acondit at IPNS.COM (Alan Condit)
Date: Mon, 3 May 2010 16:49:44 -0700
Subject: [antlr-interest] Modifying a target language template file for
	AntlrWorks
Message-ID: <3D09B8A6-4CC9-4821-B48B-B7D667A16229@IPNS.COM>

Is it possible to modify a target language template for use with AntlrWorks, without rebuilding the Antlr jar?
For example I want to change the C template to have it output a ".m" file for linking with objective-C.

Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From rgildea at googlemail.com  Tue May  4 04:14:21 2010
From: rgildea at googlemail.com (Richard Gildea)
Date: Tue, 4 May 2010 12:14:21 +0100
Subject: [antlr-interest] Line wrapping in generated lexer/parser
Message-ID: <z2s5fde6a5b1005040414l9247e302u4058c37618845bdd@mail.gmail.com>

Hi,

I am using Antlr-3.1.2 to generate a Python target for my grammar.  I am
observing slight discrepancies in the generated code between different
platforms, which shows up as differences when committing to svn.
I suspect it is an issue with the different line endings for the different
platforms, which is causing the lines to be wrapped differently.

e.g.
(on Windows)
        DFA.unpack(u"\2\144\2\uffff\1\144\22\uffff\20\144\12\u00da\105"
        u"\144"),
vs
(on Mac)

 DFA.unpack(u"\2\144\2\uffff\1\144\22\uffff\20\144\12\u00dc\105\144"),

In all cases it seems to be where one character is pushed to the next line.
 Is this an issue with CR+LF counting as two characters on Windows, and
causing the line to creep over the character limit? If so, is there a
possible way round this behaviour so that I can get a clean diff between
generated code on different platforms?

Thanks,

Richard

From markwright at internode.on.net  Tue May  4 05:06:34 2010
From: markwright at internode.on.net (Mark Wright)
Date: Tue, 4 May 2010 22:06:34 +1000
Subject: [antlr-interest] Line wrapping in generated lexer/parser
In-Reply-To: <z2s5fde6a5b1005040414l9247e302u4058c37618845bdd@mail.gmail.com>
References: <z2s5fde6a5b1005040414l9247e302u4058c37618845bdd@mail.gmail.com>
Message-ID: <20100504120634.GE1810@internode.on.net>

Hi Richard,

Of course you can just download the antlr source code, and fix it,
I think the place to look is in this file:

antlr-3.2/tool/src/main/java/org/antlr/codegen/PythonTarget.java

Regards, Mark

On Tue, May 04, 2010 at 12:14:21PM +0100, Richard Gildea wrote:
> Hi,
> 
> I am using Antlr-3.1.2 to generate a Python target for my grammar.  I am
> observing slight discrepancies in the generated code between different
> platforms, which shows up as differences when committing to svn.
> I suspect it is an issue with the different line endings for the different
> platforms, which is causing the lines to be wrapped differently.
> 
> e.g.
> (on Windows)
>         DFA.unpack(u"\2\144\2\uffff\1\144\22\uffff\20\144\12\u00da\105"
>         u"\144"),
> vs
> (on Mac)
> 
>  DFA.unpack(u"\2\144\2\uffff\1\144\22\uffff\20\144\12\u00dc\105\144"),
> 
> In all cases it seems to be where one character is pushed to the next line.
>  Is this an issue with CR+LF counting as two characters on Windows, and
> causing the line to creep over the character limit? If so, is there a
> possible way round this behaviour so that I can get a clean diff between
> generated code on different platforms?
> 
> Thanks,
> 
> Richard
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From cconway at cs.nyu.edu  Tue May  4 05:26:26 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Tue, 4 May 2010 08:26:26 -0400
Subject: [antlr-interest] Line wrapping in generated lexer/parser
In-Reply-To: <z2s5fde6a5b1005040414l9247e302u4058c37618845bdd@mail.gmail.com>
References: <z2s5fde6a5b1005040414l9247e302u4058c37618845bdd@mail.gmail.com>
Message-ID: <g2z4a051d931005040526r78b130e0xb004ee03a31afb38@mail.gmail.com>

Richard,

It's generally not a good idea to check generated code into source
control. This is a good example of why.

Regards,
Chris

On Tue, May 4, 2010 at 7:14 AM, Richard Gildea <rgildea at googlemail.com> wrote:
> Hi,
>
> I am using Antlr-3.1.2 to generate a Python target for my grammar. ?I am
> observing slight discrepancies in the generated code between different
> platforms, which shows up as differences when committing to svn.
> I suspect it is an issue with the different line endings for the different
> platforms, which is causing the lines to be wrapped differently.
>
> e.g.
> (on Windows)
> ? ? ? ?DFA.unpack(u"\2\144\2\uffff\1\144\22\uffff\20\144\12\u00da\105"
> ? ? ? ?u"\144"),
> vs
> (on Mac)
>
> ?DFA.unpack(u"\2\144\2\uffff\1\144\22\uffff\20\144\12\u00dc\105\144"),
>
> In all cases it seems to be where one character is pushed to the next line.
> ?Is this an issue with CR+LF counting as two characters on Windows, and
> causing the line to creep over the character limit? If so, is there a
> possible way round this behaviour so that I can get a clean diff between
> generated code on different platforms?
>
> Thanks,
>
> Richard
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cconway at cs.nyu.edu  Tue May  4 05:43:45 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Tue, 4 May 2010 08:43:45 -0400
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
Message-ID: <m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com>

Ron,

There really is an ambiguity. Given the rule
    Expr : if Expr then Expr (else Expr)? | ...
the input
    if A then if B then C else D
really can be parsed, in general, as either
    if A then (if B then C else D)
or
    if A then (if B then C) else D

What you are correct in pointing out is that only hard and fast rule
that makes sense (and hard and fast rules are generally helpful in
programming computers) is to parse the "else" eagerly. You could
imagine a parser that did not implement a hard and fast rule and
instead generated both parse trees and allowed the client to decide
which it liked best (and indeed there are parser generators that
behave that way, e.g., SGLR [1]).

It really is best to avoid these kinds of ambiguities and to
understand them if they exist in your grammar. Issuing a warning is
the right thing to do. The grammar author can take a look and say,
"Yes, this is an if-then-else-like construct and I'm OK with the eager
behavior," or, "No, this is a mistake. I'm going to rethink this
rule."

Regards,
Chris

  [1]: http://strategoxt.org/Sdf/SGLR


On Mon, May 3, 2010 at 6:37 PM, Ron Burk <ronburk at gmail.com> wrote:
>> You only have 100% confidence in it because that's how you define the
>> semantics for the if/else ambiguity for your language.
>
> No, that's what all those paragraphs in the middle of the post
> were refuting. :-).
>
>> The construct
>> itself is ambiguous when if/else doesn't require some kind of block
>> specification (like C/C++/Java).
>
> No, it's really not. Do you understand why Sethi, Aho, and Ullman,
> when writing about this precise grammar situation, say that
> the alternative choice of the (merely technical) ambiguity is
> "surely wrong"? They're not saying it because it's a bad idea
> to handle if/else differently; they're saying it because the alternate
> choice is the nonsensical removal of "else" from the language
> completely. The result is (guess I better try caps) A PARSER
> THAT NO LONGER ACCEPTS INPUTS THAT ARE LEGAL IN
> THE SPECIFIED GRAMMAR. That's how you get 100% confidence
> that the machine can resolve the "ambiguity" automatically.
> THE OTHER CHOICE IS A BROKEN PARSER. Try the
> exercise I suggested with yacc (bison will work fine) if
> that statement's truth is not obvious.
>
>> Some other language could define the semantics to intentionally match
>> the else to the _outermost_ if.
>
> Let's diverge to that non sequitur for a moment. Could you post
> a grammar for such a language? I would like to see how that
> can be done with a CFG. I guess the rule would be that else
> is illegal for any if that is inside of another if statement. Seems
> like you would have to define a new non-terminal (e.g., inner_if)
> that does everything an if does, but can't contain an if (only
> another inner_if) and can't be followed by an else. So, the
> traditional discussion of if/else ambiguity is absurd on two
> levels: a) nobody ever takes that extra step to think about
> what it would actually mean to bind the else to the outermost
> if and b) how the else binds has *nothing* to do with source
> of the (trivial, technical, meaningless) grammar ambiguity.
>
> But of course, the
> real point is not what might be happening in the infinite
> universe of possible grammars, but whether this precise
> grammar's alleged ambiguous choice between the null
> production and the non-null production could ever possibly
> produce anything *anyone* would deem sensible if the
> null production choice is selected. It can't. It can only
> fail to produce a parser that meets the grammar spec.
>
>> That said, we could define a special
>> "if/else-uses-standard-resolution" option,
>
> That's already the only option. The only issue is that parser
> generators keep wasting users time by claiming that there
> was an alternative choice that could possibly make sense.
> There isn't. When you have two adjacent instances of the
> same optional non-terminal, the only choice is the
> non-null production, otherwise you render a terminal
> illegal at a point where it should clearly be legal,
> and your parser no longer accepts the language specified
> by the grammar.
>
> It's like having a warning message that says "I was going
> to insert a bug on line 34, but I decided not to,
> but you should spend hours studying this in case
> you feel I should have went with the bug after all."
>
> ? r monty_python_parrot_sketch.txt
> ? s/parrot/parser/
> ? s/dead/broken/
> ? s/sleeping/ambiguous/
> ? w
> ? q
>
>> Why introduce an explicit option for one construct that
>> not all languages need?
>
> No new options needed at all. Just stop complaining about
> "ambiguities" for which the only alternative choice cannot
> possibly be correct because it produces a parser that
> no longer accepts the specified grammar. The ambiguity
> is a "pseudo" ambiguity, because one of the two
> choices produces a broken parser. This class of spurious
> warnings has wasted enormous amounts of user time
> over past decades. It seems likely to do so into the future.
>
> Won't somebody please think of the children? ?:-)
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From marcin.rzeznicki at gmail.com  Tue May  4 06:10:08 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 4 May 2010 15:10:08 +0200
Subject: [antlr-interest] Actions and non-LL(*) rules ??
In-Reply-To: <9323DAB7-B2B2-4EC4-9E80-C76602245C16@cs.usfca.edu>
References: <z2z14799bf61005021443i3d9caeb7zc737a46ef2d99f8a@mail.gmail.com>
	<w2p14799bf61005021626qf2cf91d7mb9b2022e286d341d@mail.gmail.com>
	<F4851912-2053-4F17-8516-6BE9EBA1FF71@cs.usfca.edu>
	<l2t14799bf61005021642t43136602m122e71f29350c85e@mail.gmail.com>
	<69646391-0AE2-4E0C-8CF2-07AE48AB4FFE@cs.usfca.edu>
	<s2s14799bf61005030533x975272c5v447d5697d8f8dcf7@mail.gmail.com>
	<2751F0C8-7696-401D-9842-8A6FF0C90B87@cs.usfca.edu>
	<y2z14799bf61005031008qdcfaf071yd77db8acfc41ef6d@mail.gmail.com>
	<u2r14799bf61005031536z97ee6362l3305cdb1cca69568@mail.gmail.com>
	<9323DAB7-B2B2-4EC4-9E80-C76602245C16@cs.usfca.edu>
Message-ID: <h2v14799bf61005040610r3f9351d0zf541da508aa78484@mail.gmail.com>

On Tue, May 4, 2010 at 12:47 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Marcin, ANTLR should let backtracking predicates work even with actions.
> Ter
> On May 3, 2010, at 3:36 PM, Marcin Rze?nicki wrote:
>

Hmm, there is something wrong with all this. I removed all actions
from the grammar - checked - it is ok. Now, I started to add actions
one by one to see which one causes this mess. I haven't found that
yet, but where  I got the rule like
s: a1 {action} | a2 {action} | a3 ( a1{action} | a2{action} )? {action}
it started to complain about hidden predicates (it is a warning only
though). While I understand where the ambiguity comes from (it is
because of the outer rule which chains Ses, so input like a3 a1 can be
parsed in tow ways: either (a3) (a1) or (a3 a1)), I sincerely do not
understand from where it drawn the conclusion that predicate is
hidden.

-- 
Greetings
Marcin Rze?nicki

From scott at javadude.com  Tue May  4 06:18:53 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Tue, 4 May 2010 09:18:53 -0400
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
Message-ID: <h2od19d16481005040618s220895ccu20eafce4f767f8b9@mail.gmail.com>

>> The construct
>> itself is ambiguous when if/else doesn't require some kind of block
>> specification (like C/C++/Java).
>
> No, it's really not. Do you understand why Sethi, Aho, and Ullman,
> when writing about this precise grammar situation, say that
> the alternative choice of the (merely technical) ambiguity is
> "surely wrong"?

Sure - the way we normally resolve the ambiguity is (probably) the
only reasonable way to do so. The issue is really who makes that
decision.

The grammar is a tool we use to describe our intention in the
language. The parser generator can only "do what we say" vs "do what
we mean". It's far too easy to make mistakes when writing rules;
grammars are not easy!

>> Some other language could define the semantics to intentionally match
>> the else to the _outermost_ if.
>
> Let's diverge to that non sequitur for a moment. Could you post
> a grammar for such a language?

It makes my head hurt thinking about that possibility ;)
It doesn't matter _how_ such a feature could be implemented; the point
is that it's up to the language designer to make that choice, even if
the choice doesn't feel right. It's their language.

Someone designed APL after all...

> Won't somebody please think of the children? ?:-)

heheh... ;)

I prefer to correct children (and explain why they're incorrect) when
they use improper grammar in conversation. It not only helps them on
the sentence they're currently saying, but also helps them understand
the overall grammatical concepts a little better.

[Note that here the "grammar" equivalence is the language of ANTLR or
some other parser generator, not the language they're attempting to
implement using ANTLR or some other parser generator.]

Ciao,
-- Scott

From ronburk at gmail.com  Tue May  4 07:03:01 2010
From: ronburk at gmail.com (Ron Burk)
Date: Tue, 4 May 2010 07:03:01 -0700
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com>
Message-ID: <n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com>

> There really is an ambiguity.

The grammar (a high-level, abstract specification) is ambiguous.
The parser conflict (a low-level, implementation decision) is not ambiguous.
Recall that parser generators, in the general case, know only about
conflicts in building their tables, not grammar ambiguities (as we all
know by heart, no program can detect ambiguous grammars in the general
case). In the grammar I supplied, all parser generators are warning
about conflicts in building their tables; one should not assume those
conflicts correspond to different alternatives of the grammar
ambiguity.

> really can be parsed, in general, as either

Not by an LL(1) parser with that grammar as input.
Not by an LALR(1) parser with that grammar as input.

More importantly, that is NOT what ANTLR or any other parser generator
is warning about when trying to process this grammar, and overriding
the default choice of ANTLR or any other parser generator will give
you a BROKEN PARSER, not one that selects an alternative
interpretation of the (in this case, happens to be) ambiguous grammar.

> What you are correct in pointing out is that only hard and fast rule
> that makes sense

This really sounds like you don't understand that overriding the
choice the parser generator is complaining about produces a BROKEN
parser.

> imagine a parser that did not implement a hard and fast rule and
> instead generated both parse trees and allowed the client to decide
> which it liked best (and indeed there are parser generators that
> behave that way, e.g., SGLR [1]).

Again, ANTLR is not complaining that the grammar is ambiguous. It is
complaining about a conflict between two choices. One of which utterly
fails to produce a parser that recognizes the input grammar.

> It really is best to avoid these kinds of ambiguities and to
> understand them if they exist in your grammar. Issuing a warning is
> the right thing to do.

Again, parser generators do not detect grammar ambiguities -- they
detect conflicts in constructing their tables. ANTLR is not warning
that the grammar is ambiguous. It is warning that it could not decide
between two choices -- one of which results in a BROKEN PARSER.

> It really is best to avoid these kinds of ambiguities and to
> understand them if they exist in your grammar. Issuing a warning is
> the right thing to do. The grammar author can take a look and say,
> "Yes, this is an if-then-else-like construct and I'm OK with the eager
> behavior," or, "No, this is a mistake. I'm going to rethink this
> rule."

No. This specific category of parser conflict always has the same
answer, always has an obvious meaning, and always results in
the parser claiming it was conflicted about choosing between the
obvious meaning and a BROKEN PARSER.

From ron.hunter-duvar at oracle.com  Tue May  4 08:16:48 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Tue, 04 May 2010 09:16:48 -0600
Subject: [antlr-interest] Modifying a target language template file for
 AntlrWorks
In-Reply-To: <3D09B8A6-4CC9-4821-B48B-B7D667A16229@IPNS.COM>
References: <3D09B8A6-4CC9-4821-B48B-B7D667A16229@IPNS.COM>
Message-ID: <4BE03A60.8050501@oracle.com>

Hi Alan,

I found this page to be very helpful as a starting point:

    
http://www.antlr.org/wiki/display/ANTLR3/How+to+build+an+ANTLR+code+generation+target

I've been able to make some simple changes to the Java target using 
these instructions. The hard part is trying to unravel the convoluted 
flow of the templates to be able to make meaningful changes. Due to 
StringTemplate's ability to use indirection (call a template whose name 
is stored in a variable), it is sometimes nearly impossible to tell 
where a template is used (or whether it is used at all).

Ron


Alan Condit wrote:
> Is it possible to modify a target language template for use with AntlrWorks, without rebuilding the Antlr jar?
> For example I want to change the C template to have it output a ".m" file for linking with objective-C.
>
> Alan
> ---
>
> Alan Condit
> 1085 Tierra Ct.
> Woodburn, OR 97071
>
> Email -- acondit at ipns.com
> Home-Office (503) 982-0906
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From cconway at cs.nyu.edu  Tue May  4 08:57:56 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Tue, 4 May 2010 11:57:56 -0400
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com>
	<n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com>
Message-ID: <u2g4a051d931005040857raa1c9f85m78ae32a85f135115@mail.gmail.com>

Dude. Chill out.

Best regards,
Chris

On Tue, May 4, 2010 at 10:03 AM, Ron Burk <ronburk at gmail.com> wrote:
>> There really is an ambiguity.
>
> The grammar (a high-level, abstract specification) is ambiguous.
> The parser conflict (a low-level, implementation decision) is not ambiguous.
> Recall that parser generators, in the general case, know only about
> conflicts in building their tables, not grammar ambiguities (as we all
> know by heart, no program can detect ambiguous grammars in the general
> case). In the grammar I supplied, all parser generators are warning
> about conflicts in building their tables; one should not assume those
> conflicts correspond to different alternatives of the grammar
> ambiguity.
>
>> really can be parsed, in general, as either
>
> Not by an LL(1) parser with that grammar as input.
> Not by an LALR(1) parser with that grammar as input.
>
> More importantly, that is NOT what ANTLR or any other parser generator
> is warning about when trying to process this grammar, and overriding
> the default choice of ANTLR or any other parser generator will give
> you a BROKEN PARSER, not one that selects an alternative
> interpretation of the (in this case, happens to be) ambiguous grammar.
>
>> What you are correct in pointing out is that only hard and fast rule
>> that makes sense
>
> This really sounds like you don't understand that overriding the
> choice the parser generator is complaining about produces a BROKEN
> parser.
>
>> imagine a parser that did not implement a hard and fast rule and
>> instead generated both parse trees and allowed the client to decide
>> which it liked best (and indeed there are parser generators that
>> behave that way, e.g., SGLR [1]).
>
> Again, ANTLR is not complaining that the grammar is ambiguous. It is
> complaining about a conflict between two choices. One of which utterly
> fails to produce a parser that recognizes the input grammar.
>
>> It really is best to avoid these kinds of ambiguities and to
>> understand them if they exist in your grammar. Issuing a warning is
>> the right thing to do.
>
> Again, parser generators do not detect grammar ambiguities -- they
> detect conflicts in constructing their tables. ANTLR is not warning
> that the grammar is ambiguous. It is warning that it could not decide
> between two choices -- one of which results in a BROKEN PARSER.
>
>> It really is best to avoid these kinds of ambiguities and to
>> understand them if they exist in your grammar. Issuing a warning is
>> the right thing to do. The grammar author can take a look and say,
>> "Yes, this is an if-then-else-like construct and I'm OK with the eager
>> behavior," or, "No, this is a mistake. I'm going to rethink this
>> rule."
>
> No. This specific category of parser conflict always has the same
> answer, always has an obvious meaning, and always results in
> the parser claiming it was conflicted about choosing between the
> obvious meaning and a BROKEN PARSER.
>

From ronburk at gmail.com  Tue May  4 09:00:04 2010
From: ronburk at gmail.com (Ron Burk)
Date: Tue, 4 May 2010 09:00:04 -0700
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <h2od19d16481005040618s220895ccu20eafce4f767f8b9@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<h2od19d16481005040618s220895ccu20eafce4f767f8b9@mail.gmail.com>
Message-ID: <l2v30dde8ce1005040900h92b32a80hc4f20ddd362b3cad@mail.gmail.com>

> Sure - the way we normally resolve the ambiguity is (probably) the
> only reasonable way to do so. The issue is really who makes that
> decision.

No, the issue is that ANTLR is complaining about a conflict between
two choices, one of which produces a parser that is broken, that
cannot accept languages that conform to the grammar specification at
all. I really can't tell if you understand that choosing the
alternative that ANTLR decided not to choose (the "conflict" it is
actually complaining about, rather than the grammar ambiguity) results
in a parser that cannot recognize any "else" statement at all and is
therefore completely broken.

I think from what you're saying that you imagine ANTLR is complaining
about the grammar ambiguity rather than a conflict in constructing
tables. It does not have a grammar ambiguity detector.

>  It's far too easy to make mistakes when writing rules;
> grammars are not easy!

That's true. And it's made even harder by tools that claim the problem
is they couldn't choose between A and B, where B would produce a
broken result that is completely illegal (not a matter of taste or
choice, but a complete failure to recognize the specified language)
and violates the entire premise of the tool. The warning you think is
informing users is actually misleading them. The grammar ambiguity
does not arise from any different possibilities of how else could
bind, it arises from non-deterministic behavior, which nobody using a
tool that creates deterministic parsers could ever want.

> It doesn't matter _how_ such a feature could be implemented;

Actually, I think if you did try to implement such a feature, you
would begin to grasp why the ambiguity formed by N? N? will always
have only one deterministic parser implementation that doesn't violate
the grammar. Happily, it is also INVARIABLY exactly what the human
writing the grammar intended.

But at least seeing that the unambiguous grammar that represents the
other choice bears no resemblance to this one should help make it
clear that parser generators report parser table conflicts, not
grammar ambiguities. The conflict being reported in this case does not
at all correspond between two different ambiguous interpretations of
the input grammar. It corresponds to the only deterministic choice for
this grammar, or producing a broken parser that no longer accepts the
language.

And, if you think carefully (trying to root out of your brain decades
of repetition of the same wrong explanation of what's going on in this
case), you'll see that at the grammar level (high-level, abstract
specification), the ambiguity is one of non-determinism. Is it true
that the grammar I gave can derive a sentence in which else binds to
the outermost if? Absolutely. How does it do that? By taking one
ambiguous branch on one occasion and the other ambiguous branch on
another occasion! Something that no deterministic parser can do.
Something that never can make sense to a human ("yeah, my language
accepts else statements sometimes, but other times it just doesn't
feel like it.").

So, the ambiguity has nothing to do with how else "binds" and it is
not the least bit informative to claim it does to users -- this
grammar gives no clue whatsoever how to create an unambiguous grammar
that produces a different "binding" for else, because that is a
completely unrelated problem. No, the ambiguity is of the specific
form N? N?, which always has exactly one meaning to humans, and
exactly one deterministic implementation that does not violate the
grammar specification. In essence, the ambiguity is a choice between
non-deterministic behavior and deterministic behavior.

The nature of the if-else grammar ambiguity is identical to that of
the "digits" example I gave in the original post. When two optional
instances of the same non-terminal are adjacent, a non-deterministic
parser could magically decide to NOT match the next digit to the first
optional non-terminal, then magically make the OPPOSITE choice for the
second optional non-terminal. That is the source of the ambiguity.
Magical behavior that humans don't want and deterministic tools cannot
implement.

The non-deterministic alternative (eat an else sometimes, other times
magically decide not to in the exact same situation) does not
correspond to a different "binding"  for else. It is not generally of
any use to humans. It is not something a deterministic parser
generator can create. Humans do not select a tool for creating
deterministic parsers and ever expect it to produce non-deterministic
results.

When deterministic parser generators encounter this precise form of
grammar ambiguity, they arrive at a "conflict" between two choices.
One choice is the only deterministic solution to the grammar
specification. The other choice completely discards some legal syntax,
resulting in a parser that is flat-out broken. There is never any good
reason to warn the user that your deterministic parser generator has
decided to create a deterministic parser instead of a
non-deterministic one. But yeah, if you want to claim that a warning
message must be emitted, then the correct one is something like: "This
grammar has a non-deterministic interpretation; I chose the
deterministic one, the only choice I am capable of making, the only
choice that makes any sense to humans."

IMHO.

======== ifelse.lex  ==============
%option noyywrap
%%
if  { return IF; }
else    { return ELSE; }

[0-9]+    { return cond; }

\{\}        { return STMT; }


[ \t\n]*   ;

.       { return yytext[0]; }
============ ifelse.y ============
/* force yacc to create a broken parser by choosing
 * the non-default choice for an if-else "ambiguity"
 */
%token IF ELSE cond STMT

%left ELSE
%left IF

%%

stat    :       IF  '('  cond  ')'  stat %prec IF
    { printf("Got an If with no else!\n"); }
        |       IF  '('  cond  ')'  stat  ELSE  stat %prec IF
    { printf("Got an If with else!\n"); }
        |       STMT
;

%%
#include "lex.yy.c"

void main(void)
    {
    yydebug = 1;
    yyparse();
    }

int  yyerror (char* s)
    {
    fprintf (stderr, "%s\n", s);
    }
============ output  ============
ronburk at alpha ~/yacc $ ./a.out
Starting parse
Entering state 0
Reading a token: if(0)if(1)else
Next token is token IF ()
Shifting token IF ()
Entering state 1
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 4
Reading a token: Next token is token cond ()
Shifting token cond ()
Entering state 6
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 7
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 1
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 4
Reading a token: Next token is token cond ()
Shifting token cond ()
Entering state 6
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 7
Reading a token: Next token is token ELSE ()
syntax error, unexpected ELSE, expecting IF or STMT
Error: popping token ')' ()
Stack now 0 1 4 6 7 1 4 6
Error: popping token cond ()
Stack now 0 1 4 6 7 1 4
Error: popping token '(' ()
Stack now 0 1 4 6 7 1
Error: popping token IF ()
Stack now 0 1 4 6 7
Error: popping token ')' ()
Stack now 0 1 4 6
Error: popping token cond ()
Stack now 0 1 4
Error: popping token '(' ()
Stack now 0 1
Error: popping token IF ()
Stack now 0
Cleanup: discarding lookahead token ELSE ()
Stack now 0

From marcin.rzeznicki at gmail.com  Tue May  4 09:19:01 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 4 May 2010 18:19:01 +0200
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com>
	<n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com>
Message-ID: <l2v14799bf61005040919nc75bfbdbnd3b682f147cbceb7@mail.gmail.com>

On Tue, May 4, 2010 at 4:03 PM, Ron Burk <ronburk at gmail.com> wrote:

Hi, I've been following this thread and I must say that I've been
scratching my head thinking about what you have been attempting to
prove. Let me offer my two cents worth on all this.

>> There really is an ambiguity.
>
> The grammar (a high-level, abstract specification) is ambiguous.
> The parser conflict (a low-level, implementation decision) is not ambiguous.
> Recall that parser generators, in the general case, know only about
> conflicts in building their tables, not grammar ambiguities (as we all
> know by heart, no program can detect ambiguous grammars in the general
> case). In the grammar I supplied, all parser generators are warning
> about conflicts in building their tables; one should not assume those
> conflicts correspond to different alternatives of the grammar
> ambiguity.
>

Why shouldn't 'one assume those conflicts correspond to different alternatives'?
There is theorem that states that if a language generated by the cfg
grammar is accepted by some deterministic push-down automata then that
language has unambiguous cfg grammar. Negating this theorem gives you
that: if language is ambiguous then no deterministic push-down
automata for it exists. So it suffices to say that cfg parser is a
push-down automata to see that conflict in the parser table are effect
of language ambiguity and if you show that parser without conflicts
can be  built for a given language then that language has unambiguous
grammar

>> really can be parsed, in general, as either
>
> Not by an LL(1) parser with that grammar as input.
> Not by an LALR(1) parser with that grammar as input.
>
> More importantly, that is NOT what ANTLR or any other parser generator
> is warning about when trying to process this grammar, and overriding
> the default choice of ANTLR or any other parser generator will give
> you a BROKEN PARSER, not one that selects an alternative
> interpretation of the (in this case, happens to be) ambiguous grammar.
>

Why BROKEN? This is more generic conflict than you are trying to show
it is. This is NOT only if-else specific conflict so to be
sufficiently generic parser needs to issue a warning.

>> What you are correct in pointing out is that only hard and fast rule
>> that makes sense
>
> This really sounds like you don't understand that overriding the
> choice the parser generator is complaining about produces a BROKEN
> parser.
>

This really sounds like you like the word BROKEN :-)

>> imagine a parser that did not implement a hard and fast rule and
>> instead generated both parse trees and allowed the client to decide
>> which it liked best (and indeed there are parser generators that
>> behave that way, e.g., SGLR [1]).
>
> Again, ANTLR is not complaining that the grammar is ambiguous. It is
> complaining about a conflict between two choices. One of which utterly
> fails to produce a parser that recognizes the input grammar.
>

Nope. Conflict between two choices and ambiguity are one and the same
thing, only in different models.


>
> No. This specific category of parser conflict always has the same
> answer, always has an obvious meaning, and always results in
> the parser claiming it was conflicted about choosing between the
> obvious meaning and a BROKEN PARSER.
>

No. this is not specific category. This is very broad category of
conflicts. Let me show you an example of exactly the same conflict:
Expression can have form : {ID : type } expression
and expressions can be chained together without any delimiter
Then parser must issue a warning that  {a : INTEGER } a + b can be
seen as ( + ({a : INTEGER} a) b) or ({a: INTEGER} (+a b)).
This is exactly the same conflict yet even you, without knowing what
language I am talking about, cannot give the resolution. How can you
expect parser to give you any?

From rgildea at googlemail.com  Tue May  4 09:25:17 2010
From: rgildea at googlemail.com (Richard Gildea)
Date: Tue, 4 May 2010 17:25:17 +0100
Subject: [antlr-interest] Line wrapping in generated lexer/parser
In-Reply-To: <g2z4a051d931005040526r78b130e0xb004ee03a31afb38@mail.gmail.com>
References: <z2s5fde6a5b1005040414l9247e302u4058c37618845bdd@mail.gmail.com>
	<g2z4a051d931005040526r78b130e0xb004ee03a31afb38@mail.gmail.com>
Message-ID: <j2l5fde6a5b1005040925lb7e77b8bo668fc584af64e70a@mail.gmail.com>

On 4 May 2010 13:26, Christopher L Conway <cconway at cs.nyu.edu> wrote:

> Richard,
>
> It's generally not a good idea to check generated code into source
> control. This is a good example of why.
>

Ideally we would avoid placing the generated code under source control,
however this would cause our C++/Python library to have a dependency on
Java/ANTLR in order to be used, instead of just the runtime libraries.
Placing it under source control ensures that other developers/users will
have the up-to-date version of the parser without relying on them to
regenerate it from the grammar.

However, I am open to suggestions as to how better to deal with this issue
(and the runtime dependencies) alongside a source control system.

Thanks,

Richard

From scott at javadude.com  Tue May  4 09:25:49 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Tue, 4 May 2010 12:25:49 -0400
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <l2v30dde8ce1005040900h92b32a80hc4f20ddd362b3cad@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<h2od19d16481005040618s220895ccu20eafce4f767f8b9@mail.gmail.com>
	<l2v30dde8ce1005040900h92b32a80hc4f20ddd362b3cad@mail.gmail.com>
Message-ID: <w2id19d16481005040925z21d3b0c8hc8608975e984614a@mail.gmail.com>

>>  It's far too easy to make mistakes when writing rules;
>> grammars are not easy!
>
> That's true. And it's made even harder by tools that claim the problem
> is they couldn't choose between A and B, where B would produce a
> broken result that is completely illegal (not a matter of taste or
> choice, but a complete failure to recognize the specified language)

I think "specified language" is the key here. What I specify and what
I mean are often two different things, especially in early
development. The more a tool can help me with "did you really mean
that", the better.

I've gotta say you have an interesting argument here, but I always get
afeared of the "slippery slope" and "trickle-down" effects. After
this, what would be the next "only reasonable way" that we move into
the tool? It makes the tool less general-purpose, and could end up
having some unintended consequences.

Of course there is another option: you can create your own parser
generator that does this. If this feature and others prove more
helpful and easier to understand, natural selection should take its
course...

I prefer to have tools be a wee-bit less clever so I don't need to
understand their cleverness to use them, though it's a fine line to
find...

-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com

From rgildea at googlemail.com  Tue May  4 09:30:07 2010
From: rgildea at googlemail.com (Richard Gildea)
Date: Tue, 4 May 2010 17:30:07 +0100
Subject: [antlr-interest] Line wrapping in generated lexer/parser
In-Reply-To: <20100504120634.GE1810@internode.on.net>
References: <z2s5fde6a5b1005040414l9247e302u4058c37618845bdd@mail.gmail.com>
	<20100504120634.GE1810@internode.on.net>
Message-ID: <z2y5fde6a5b1005040930o745c395fk42a2a34221591657@mail.gmail.com>

Hi Mark,

I was rather hoping that there would be an option that I have missed to
either specify the line endings to be used instead of native endings, or to
alter the behaviour of the line wrapping.  I am not familiar with
programming in Java, so would rather not have to alter the antlr source
code, and this would also not be a sustainable solution in the long run.

Thanks,

Richard

On 4 May 2010 13:06, Mark Wright <markwright at internode.on.net> wrote:

> Hi Richard,
>
> Of course you can just download the antlr source code, and fix it,
> I think the place to look is in this file:
>
> antlr-3.2/tool/src/main/java/org/antlr/codegen/PythonTarget.java
>
> Regards, Mark

From jimi at temporal-wave.com  Tue May  4 09:54:20 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 04 May 2010 09:54:20 -0700
Subject: [antlr-interest] Line wrapping in generated lexer/parser
In-Reply-To: <j2l5fde6a5b1005040925lb7e77b8bo668fc584af64e70a@mail.gmail.com>
Message-ID: <e7fcd0e6bc4b3644842043b5b1d80573@temporal-wave.com>

It is a small bug and I run across it myself. If you are checking in generated source (and it is better to have the dependency than do this - you don't check in assembly listings from the C compiler ;-), then check in only from Unix and the code will always be the same. It probably does need to be fixed in StringTemplate, but you are not likely to get that fix too quickly I would think.

Jim 

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Richard Gildea
> Sent: Tuesday, May 04, 2010 9:25 AM
> To: Christopher L Conway
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Line wrapping in generated lexer/parser
> 
> On 4 May 2010 13:26, Christopher L Conway <cconway at cs.nyu.edu> wrote:
> 
> > Richard,
> >
> > It's generally not a good idea to check generated code into source
> > control. This is a good example of why.
> >
> 
> Ideally we would avoid placing the generated code under source control,
> however this would cause our C++/Python library to have a dependency on
> Java/ANTLR in order to be used, instead of just the runtime libraries.
> Placing it under source control ensures that other developers/users
> will
> have the up-to-date version of the parser without relying on them to
> regenerate it from the grammar.
> 
> However, I am open to suggestions as to how better to deal with this
> issue
> (and the runtime dependencies) alongside a source control system.
> 
> Thanks,
> 
> Richard
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From rgildea at googlemail.com  Tue May  4 10:06:06 2010
From: rgildea at googlemail.com (Richard Gildea)
Date: Tue, 4 May 2010 18:06:06 +0100
Subject: [antlr-interest] Line wrapping in generated lexer/parser
In-Reply-To: <e7fcd0e6bc4b3644842043b5b1d80573@temporal-wave.com>
References: <j2l5fde6a5b1005040925lb7e77b8bo668fc584af64e70a@mail.gmail.com>
	<e7fcd0e6bc4b3644842043b5b1d80573@temporal-wave.com>
Message-ID: <t2h5fde6a5b1005041006jde27c81ag4946220faaa35571@mail.gmail.com>

On 4 May 2010 17:54, Jim Idle <jimi at temporal-wave.com> wrote:

> It is a small bug and I run across it myself. If you are checking in
> generated source (and it is better to have the dependency than do this - you
> don't check in assembly listings from the C compiler ;-), then check in only
> from Unix and the code will always be the same. It probably does need to be
> fixed in StringTemplate, but you are not likely to get that fix too quickly
> I would think.
>

Hi Jim,

I have realised that any changes in the grammar result in much greater diffs
in the generated code, so this is probably a non-issue really.  It was just
an initial concern about getting different results on different platforms,
but it shouldn't matter too much in the long run, as long as we know it is
harmless and the code is otherwise identical :)

As I mentioned before, I am not sure how we can avoid checking in the
generated source, without forcing an unnecessary dependency for our library
on Java and ANTLR, in addition to the runtime libraries. Any extra
dependencies will likely cause more headaches for our library maintainer.

Thanks,

Richard

From stefika at gmail.com  Tue May  4 11:18:36 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Tue, 4 May 2010 13:18:36 -0500
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <w2id19d16481005040925z21d3b0c8hc8608975e984614a@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<h2od19d16481005040618s220895ccu20eafce4f767f8b9@mail.gmail.com>
	<l2v30dde8ce1005040900h92b32a80hc4f20ddd362b3cad@mail.gmail.com>
	<w2id19d16481005040925z21d3b0c8hc8608975e984614a@mail.gmail.com>
Message-ID: <o2p1332b72e1005041118s5ff74c69r83412d6294f989d2@mail.gmail.com>

> I think "specified language" is the key here. What I specify and what
> I mean are often two different things, especially in early
> development. The more a tool can help me with "did you really mean
> that", the better.
>
> I've gotta say you have an interesting argument here, but I always get
> afeared of the "slippery slope" and "trickle-down" effects. After
> this, what would be the next "only reasonable way" that we move into
> the tool? It makes the tool less general-purpose, and could end up
> having some unintended consequences.
>
> Of course there is another option: you can create your own parser
> generator that does this. If this feature and others prove more
> helpful and easier to understand, natural selection should take its
> course...
>
> I prefer to have tools be a wee-bit less clever so I don't need to
> understand their cleverness to use them, though it's a fine line to
> find...
>

Well said, Scott. I know in our case, the grammars we define often have a
plethora of complex cases, which aren't always easy to find or diagnose, let
alone fix. All else being equal, those extra warnings can be very helpful
sometimes. In the few cases where are sort of extraneous, I can deal with
that.

Stefik

From cheetomonster at gmail.com  Tue May  4 14:04:27 2010
From: cheetomonster at gmail.com (Chris verBurg)
Date: Tue, 4 May 2010 14:04:27 -0700
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <l2v14799bf61005040919nc75bfbdbnd3b682f147cbceb7@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com> 
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com> 
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com> 
	<m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com> 
	<n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com> 
	<l2v14799bf61005040919nc75bfbdbnd3b682f147cbceb7@mail.gmail.com>
Message-ID: <j2n7c29484b1005041404y7057fc90j9fc7fd2546e57a90@mail.gmail.com>

I'm not sure my comments would be useful amongst all the parsing-theory
heavyweights on this list, but here goes.  :)


2010/5/4 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>

> On Tue, May 4, 2010 at 4:03 PM, Ron Burk <ronburk at gmail.com> wrote:
>
> Hi, I've been following this thread and I must say that I've been
> scratching my head thinking about what you have been attempting to
> prove.


After my own bout of head-scratching, I think I finally realize what Ron's
assertion is.  A parser that binds the "else" to the outermost "if" is
unable to handle a rather simple case:

    if A then
        if B then
            ...
        else
            ...
    else
        ...

If that first "else" bound to the first "if", then the second "else" is a
syntax error -- it's just sitting out in la-la land without an "if" to
attach to.  In this case, the first "else" has to bind to the last "if".
 Ron's assertion is that if you generalize *that* as the rule, then
"if-else" isn't really ambiguous.


No. this is not specific category. This is very broad category of
> conflicts. Let me show you an example of exactly the same conflict:
> Expression can have form : {ID : type } expression
> and expressions can be chained together without any delimiter
> Then parser must issue a warning that  {a : INTEGER } a + b can be
> seen as ( + ({a : INTEGER} a) b) or ({a: INTEGER} (+a b)).
> This is exactly the same conflict yet even you, without knowing what
> language I am talking about, cannot give the resolution. How can you
> expect parser to give you any?
>

I may be misreading your example here, and if so please correct me:

Your expression ("{a: INTEGER} a+ b") could also be written as "{a: INTEGER}
a + {b: INTEGER} b", and the only valid parse for that is "(+ ({a: INTEGER}
a) ({b: INTEGER} b))".  Thus the correct parse for your original expression
is your first one, "(+ ({a: INTEGER} a) (b))".

Though the more I read this over the more I think I misunderstood you.  :)

-Chris

From marcin.rzeznicki at gmail.com  Tue May  4 14:32:50 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 4 May 2010 23:32:50 +0200
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <j2n7c29484b1005041404y7057fc90j9fc7fd2546e57a90@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com>
	<n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com>
	<l2v14799bf61005040919nc75bfbdbnd3b682f147cbceb7@mail.gmail.com>
	<j2n7c29484b1005041404y7057fc90j9fc7fd2546e57a90@mail.gmail.com>
Message-ID: <s2k14799bf61005041432r30d47398ta665d46dd0ba8179@mail.gmail.com>

2010/5/4 Chris verBurg <cheetomonster at gmail.com>:
>
> I'm not sure my comments would be useful amongst all the parsing-theory
> heavyweights on this list, but here goes. ?:)
>

That's not me ;-)

> 2010/5/4 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>
>>
>> On Tue, May 4, 2010 at 4:03 PM, Ron Burk <ronburk at gmail.com> wrote:
>>
>> Hi, I've been following this thread and I must say that I've been
>> scratching my head thinking about what you have been attempting to
>> prove.
>
> After my own bout of head-scratching, I think I finally realize what Ron's
> assertion is. ?A parser that binds the "else" to the outermost "if" is
> unable to handle a rather simple case:
> ?? ?if A then
> ?? ? ? ?if B then
> ?? ? ? ? ? ?...
> ?? ? ? ?else
> ?? ? ? ? ? ?...
> ?? ?else
> ?? ? ? ?...
> If that first "else" bound to the first "if", then the second "else" is a
> syntax error -- it's just sitting out in la-la land without an "if" to
> attach to. ?In this case, the first "else" has to bind to the last "if".
> ?Ron's assertion is that if you generalize that as the rule, then "if-else"
> isn't really ambiguous.
>

That's what backtracking is for IMO - yet parser needs to make local
decision at some point and no fixed lookahead is sure to be
sufficient. While there is more than one decision to be made
well-behaved parser generator should warn user. And no amount of
"we-all-know-what-we-mean-this-is-simple-if-statement" is appropriate
here because, as I have shown, there are other problems of this kind
not in this category. I think that the OP has been so eager to reason
about this case, because he is so strongly confident in what if-else
should be that he has forgotten that it is not the only problem in
language parsing. If the language you are parsing is not so idiomatic
as mine then one tends to be grateful for warnings

>> No. this is not specific category. This is very broad category of
>> conflicts. Let me show you an example of exactly the same conflict:
>> Expression can have form : {ID : type } expression
>> and expressions can be chained together without any delimiter
>> Then parser must issue a warning that ?{a : INTEGER } a + b can be
>> seen as ( + ({a : INTEGER} a) b) or ({a: INTEGER} (+a b)).
>> This is exactly the same conflict yet even you, without knowing what
>> language I am talking about, cannot give the resolution. How can you
>> expect parser to give you any?
>
> I may be misreading your example here, and if so please correct me:
> Your expression ("{a: INTEGER} a+ b") could also be written as "{a: INTEGER}
> a + {b: INTEGER} b", and the only valid parse for that is "(+ ({a: INTEGER}
> a) ({b: INTEGER} b))". ?Thus the correct parse for your original expression
> is your first one, "(+ ({a: INTEGER} a) (b))".

hehe, the thing is that I am not sure, I'll have to check in the
standard, but I strongly believe the other interpretation is correct,
at least that's what my parser does at these points. if what you
showed was right then it would be problematic in:
{a:INTEGER}{b:INTEGER} a*b + 1000 as you would have to interpret this
as two expressions ({a:INTEGER}<empty>)(+ etc.) and meaning of this
construct is intended to set scope where some property of 'a' holds,
so having empty scopes is pointless. Anyway, that is not the point.
What I am trying to show is that a) "the correct parse for your
original expression" is non-existent because there are two "correct"
ways (syntactically, of course only one is correct semantically), thus
ambiguity - which ANTLR warned me about and I came to thinking  b) if
language is not widely understood and C-like then having your tool to
match blindly "obvious" behavior of if-then is pointless and error
prone c) making special case for if-then-else is not elegant.

-- 
Greetings
Marcin Rze?nicki

From marcin.rzeznicki at gmail.com  Tue May  4 14:35:47 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 4 May 2010 23:35:47 +0200
Subject: [antlr-interest] The Classic else (Non-)Ambiguity
In-Reply-To: <s2k14799bf61005041432r30d47398ta665d46dd0ba8179@mail.gmail.com>
References: <x2w30dde8ce1005031056oeeabeddr4e3899fc6f85595a@mail.gmail.com>
	<o2od19d16481005031114l8c867fa6j75d7783595a3cdc0@mail.gmail.com>
	<l2j30dde8ce1005031537sb7a488e3hede7b0948d8a24ae@mail.gmail.com>
	<m2o4a051d931005040543v124e352rdd0df710e57a979e@mail.gmail.com>
	<n2l30dde8ce1005040703o15ec6419y4f31d4a5624bd686@mail.gmail.com>
	<l2v14799bf61005040919nc75bfbdbnd3b682f147cbceb7@mail.gmail.com>
	<j2n7c29484b1005041404y7057fc90j9fc7fd2546e57a90@mail.gmail.com>
	<s2k14799bf61005041432r30d47398ta665d46dd0ba8179@mail.gmail.com>
Message-ID: <z2p14799bf61005041435le16538a5u768bbe656627d83c@mail.gmail.com>

> language parsing. If the language you are parsing is not so idiomatic
> as mine then one tends to be grateful for warnings
>

This should be: If the language you are parsing is not so idiomatic,
as mine is, then (...)

From AmarLakshmi_Gejje at infosys.com  Tue May  4 21:32:44 2010
From: AmarLakshmi_Gejje at infosys.com (Amar Lakshmi Gejje)
Date: Wed, 5 May 2010 10:02:44 +0530
Subject: [antlr-interest] Query on ANTLR C Grammar
Message-ID: <AF0F4B2F77FCA9408EB4FCBC860B55881374B17FA5@BLRKECMBX09.ad.infosys.com>

Hi,

I have downloaded the C Grammar for Antlrv3 from the ANTLR website (antlr.org). I was trying to generating the code in target language 'C' and was successful. I have set the 'options' block  with the target language as 'C' as shown below.

options {
    backtrack=true;
    memoize=true;
    k=2;
    language = C;
}

When I tried to compile the generated CLexer.C and CParser.C files using GCC compiler, huge errors are thrown. Please correct me in setting the target language correctly

Thanks & Regards,
Amar Lakshmi


From jimi at temporal-wave.com  Wed May  5 10:15:21 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 05 May 2010 10:15:21 -0700
Subject: [antlr-interest] Query on ANTLR C Grammar
In-Reply-To: <AF0F4B2F77FCA9408EB4FCBC860B55881374B17FA5@BLRKECMBX09.ad.infosys.com>
Message-ID: <1f71f61621e5d141a22e659d2006497c@temporal-wave.com>

You are probably not using the -I option hugely enough.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Amar Lakshmi Gejje
> Sent: Tuesday, May 04, 2010 9:33 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Query on ANTLR C Grammar
> 
> Hi,
> 
> I have downloaded the C Grammar for Antlrv3 from the ANTLR website
> (antlr.org). I was trying to generating the code in target language 'C'
> and was successful. I have set the 'options' block  with the target
> language as 'C' as shown below.
> 
> options {
>     backtrack=true;
>     memoize=true;
>     k=2;
>     language = C;
> }
> 
> When I tried to compile the generated CLexer.C and CParser.C files
> using GCC compiler, huge errors are thrown. Please correct me in
> setting the target language correctly
> 
> Thanks & Regards,
> Amar Lakshmi
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From singh.nishanth5 at gmail.com  Thu May  6 06:44:47 2010
From: singh.nishanth5 at gmail.com (Nishanth singh)
Date: Thu, 6 May 2010 09:44:47 -0400
Subject: [antlr-interest] antlr doubt
Message-ID: <h2n34d2b4e01005060644n50f3deb9i2c8c177df14c67d3@mail.gmail.com>

> Hello,
> I'm totally new to AntLR.
> I created a simple grammar for a lexer in ANTLRWorks and generated it
> via the "Generate" menu. However, when I'm going to compile the
> generated Java code I get an error.
>
> I'm compiling it using "javac mygrammarLexer.java". I'm running Windows XP and installed ANTLR via apt-get, the package manager of Ubuntu.
>
> This is the error I get when I try to compile:
>
>     $ javac locoTokensLexer.java
>     locoTokensLexer.java:3: package org.antlr.runtime does not exist
>     import org.antlr.runtime.*;
>     ^
>     locoTokensLexer.java:8: cannot find symbol
>     symbol: class Lexer
>     public class locoTokensLexer extends Lexer {
>                                          ^
>
>
> Then I get a lot of other errors.

Please some one help me out.

                                                             Regards,
                                                             Nishanth.

From boughtonp at gmail.com  Thu May  6 06:51:55 2010
From: boughtonp at gmail.com (Peter Boughton)
Date: Thu, 6 May 2010 14:51:55 +0100
Subject: [antlr-interest] antlr doubt
In-Reply-To: <h2n34d2b4e01005060644n50f3deb9i2c8c177df14c67d3@mail.gmail.com>
References: <h2n34d2b4e01005060644n50f3deb9i2c8c177df14c67d3@mail.gmail.com>
Message-ID: <AANLkTilZOq8g0SF7LJk2XLSG4ShUpAV_avbDlTqHxxuZ@mail.gmail.com>

Before trying your own grammar, find a simple example that is known to
work (the ANTLR website should have some).
This will help to confirm whether the problem is with how ANTLR is
installed, or a with your own grammar.

This is confusing:
>> I'm running Windows XP and installed ANTLR via apt-get, the package manager of Ubuntu.

Are you running ANTLR on Windows or Ubuntu?

If you're doing both, stick to one or the other until you've got things working.


Other than that, it'd probably be helpful to post more details (e.g.
your grammar), but you'll probably have to wait for someone more adept
with ANTLR for specific help.

From bkiers at gmail.com  Thu May  6 06:54:38 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 6 May 2010 15:54:38 +0200
Subject: [antlr-interest] antlr doubt
In-Reply-To: <h2n34d2b4e01005060644n50f3deb9i2c8c177df14c67d3@mail.gmail.com>
References: <h2n34d2b4e01005060644n50f3deb9i2c8c177df14c67d3@mail.gmail.com>
Message-ID: <s2vaf443a971005060654re3a469cdi7cb402e33f28e479@mail.gmail.com>

On Thu, May 6, 2010 at 3:44 PM, Nishanth singh <singh.nishanth5 at gmail.com>wrote:

> > ...
> > This is the error I get when I try to compile:
> >
> >     $ javac locoTokensLexer.java
> >     locoTokensLexer.java:3: package org.antlr.runtime does not exist
> >     import org.antlr.runtime.*;
> >     ^
> >     locoTokensLexer.java:8: cannot find symbol
> >     symbol: class Lexer
> >     public class locoTokensLexer extends Lexer {
> >                                          ^
> >
> >
> > Then I get a lot of other errors.
>
> Please some one help me out.
>
>                                                             Regards,
>                                                             Nishanth.
>

Nishanth, don't take this the wrong way, but this mailing list is not the
best place to ask your question. It seems you're struggling with the very
basics of Java (the classpath specifically). When compiling Java source
files from your command, you either must have all classes your source
file(s) use already in your classpath, or must provide all of them through
the command line parameter when invoking javac. I highly recommend doing
some basic tutorials:
http://java.sun.com/docs/books/tutorial/getStarted/index.html
and/or Google a bit about classpath issues. If you don't get past it, I
suggest you ask your question on a less specific forum (Stackoverflow.com is
hot these days), and post back here if you have specific ANTLR questions.

Best of luck!

Regards,

Bart.

From elvis at greentab.net  Thu May  6 10:11:58 2010
From: elvis at greentab.net (Elvis Presley)
Date: Thu, 6 May 2010 10:11:58 -0700
Subject: [antlr-interest] Custom data in ANTLR3_BASE_TREE in C runtime
Message-ID: <AANLkTimICZNUFGnrkwdyZabYJLSbnT3_Y2uZYhn8PxQ_@mail.gmail.com>

I'm using the ANTLR3 C runtime and I'd like to be able to add custom data to
my AST.  I see there is a "u" field in the ANTLR3_BASE_TREE, which I would
like to use to point to my own struct that contains the data I need for that
node in the tree.  My problem is that it doesn't look like "u" is ever
initialized to NULL so I don't have a way to determine if I need to allocate
new memory for my struct or not.

I can't quite figure out by looking at the code if there is a way to
override the behavior in ANTLR3_BASE_TREE or in the adaptor so that I can
always guarantee that "u" is always NULL or points to one of my custom
structs.   Any help here would be appreciated.  Thanks

--Bryce

From jimi at temporal-wave.com  Thu May  6 10:33:21 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 06 May 2010 10:33:21 -0700
Subject: [antlr-interest] Custom data in ANTLR3_BASE_TREE in C runtime
In-Reply-To: <AANLkTimICZNUFGnrkwdyZabYJLSbnT3_Y2uZYhn8PxQ_@mail.gmail.com>
Message-ID: <b6ba2a914d8c7c4e9dfee531c44092f4@temporal-wave.com>

Dear Elvis,

I think that I have changed this so it is NULLed in the current development version, but you should be able to do this:

1) Set it to NULL yourself at an appropriate place. 
2) In the ANTLR source code, you will find:

#ifndef ANTLR3_MALLOC
/// Default definition of ANTLR3_MALLOC. You can override this before including
/// antlr3.h if you wish to use your own implementation.
///
#define	ANTLR3_MALLOC(request)          malloc  ((size_t)(request))
#endif

Change that to

#ifndef ANTLR3_MALLOC
/// Default definition of ANTLR3_MALLOC. You can override this before including
/// antlr3.h if you wish to use your own implementation.
///
#define	ANTLR3_MALLOC(request)          calloc  (1, (size_t)(request))
#endif


And rebuild the runtime and you will sacrifice a little performance for nulled space.

3) Find the code that creates new nodes from a tree factory (the function newPooltree in antlr3commontree.c) and before the return statement, add:

tree->baseTree.u = NULL;

This is essentially the fix in the current development branch.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Elvis Presley
> Sent: Thursday, May 06, 2010 10:12 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Custom data in ANTLR3_BASE_TREE in C runtime
> 
> I'm using the ANTLR3 C runtime and I'd like to be able to add custom
> data to
> my AST.  I see there is a "u" field in the ANTLR3_BASE_TREE, which I
> would
> like to use to point to my own struct that contains the data I need for
> that
> node in the tree.  My problem is that it doesn't look like "u" is ever
> initialized to NULL so I don't have a way to determine if I need to
> allocate
> new memory for my struct or not.
> 
> I can't quite figure out by looking at the code if there is a way to
> override the behavior in ANTLR3_BASE_TREE or in the adaptor so that I
> can
> always guarantee that "u" is always NULL or points to one of my custom
> structs.   Any help here would be appreciated.  Thanks
> 
> --Bryce
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From rmann at latencyzero.com  Thu May  6 16:41:40 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Thu, 6 May 2010 16:41:40 -0700
Subject: [antlr-interest] Error building from source: The scm url cannot
	be null
In-Reply-To: <1afda7bcc67cd147b0d176bb8025de09@temporal-wave.com>
References: <1afda7bcc67cd147b0d176bb8025de09@temporal-wave.com>
Message-ID: <F355888A-DC8C-4EA5-ACBD-1D539DDBECE9@latencyzero.com>

Thanks. Seems like a fairly old problem. I tried the solution proposed by one poster, adding the <scm> tag to the top-level pom. 
On Apr 13, 2010, at 15:27:57, Jim Idle wrote:

> Please use:
> 
> antlr.markmail.org
> 
> Where you will find this explained many times.
> 
> Thanks,
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Rick Mann
>> Sent: Tuesday, April 13, 2010 3:18 PM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Error building from source: The scm url
>> cannot be null
>> 
>> Hi all,
>> 
>> I just downloaded antlr-3.2, and installed Maven 2.2.1. After
>> downloading a bunch of jars, it ran into an error. The maven invocation
>> and error are below. Did I do something wrong?
>> 
>> $ mvn -Dmaven.test.skip=true
>> ...
>> [INFO] [buildnumber:create {execution: default}]
>> [INFO] Storing buildNumber: Apr 13, 2010 15:13:46 at timestamp:
>> 1271196826772
>> [INFO] ----------------------------------------------------------------
>> --------
>> [ERROR] FATAL ERROR
>> [INFO] ----------------------------------------------------------------
>> --------
>> [INFO] The scm url cannot be null.
>> [INFO] ----------------------------------------------------------------
>> --------
>> [INFO] Trace
>> java.lang.NullPointerException: The scm url cannot be null.
>> 	at
>> org.apache.maven.scm.manager.AbstractScmManager.makeScmRepository(Abstr
>> actScmManager.java:181)
>> 	at
>> org.codehaus.mojo.build.CreateMojo.getScmRepository(CreateMojo.java:722
>> )
>> 	at
>> org.codehaus.mojo.build.CreateMojo.getScmBranch(CreateMojo.java:593)
>> 	at
>> org.codehaus.mojo.build.CreateMojo.execute(CreateMojo.java:452)
>> 	at
>> org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginM
>> anager.java:490)
>> 	at
>> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Defaul
>> tLifecycleExecutor.java:694)
>> 	at
>> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLife
>> cycle(DefaultLifecycleExecutor.java:556)
>> 	at
>> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Default
>> LifecycleExecutor.java:535)
>> 	at
>> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandl
>> eFailures(DefaultLifecycleExecutor.java:387)
>> 	at
>> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments
>> (DefaultLifecycleExecutor.java:348)
>> 	at
>> org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLife
>> cycleExecutor.java:180)
>> 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
>> 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
>> 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
>> 	at
>> org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
>> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>> 	at
>> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.ja
>> va:39)
>> 	at
>> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccesso
>> rImpl.java:25)
>> 	at java.lang.reflect.Method.invoke(Method.java:597)
>> 	at
>> org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
>> 	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
>> 	at
>> org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
>> 	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
>> [INFO] ----------------------------------------------------------------
>> --------
>> [INFO] Total time: 1 minute 41 seconds
>> [INFO] Finished at: Tue Apr 13 15:13:46 PDT 2010
>> [INFO] Final Memory: 20M/79M
>> [INFO] ----------------------------------------------------------------
>> --------
>> 
>> 
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rmann at latencyzero.com  Thu May  6 16:42:12 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Thu, 6 May 2010 16:42:12 -0700
Subject: [antlr-interest] Error building from source: The scm url cannot
	be null
In-Reply-To: <1afda7bcc67cd147b0d176bb8025de09@temporal-wave.com>
References: <1afda7bcc67cd147b0d176bb8025de09@temporal-wave.com>
Message-ID: <8BD1D0FA-AD7C-4222-9A29-115172FCCD54@latencyzero.com>

Sorry, ignore that last email from me. Meant to delete the draft.



From harish.butani at sap.com  Thu May  6 18:06:19 2010
From: harish.butani at sap.com (Butani, Harish)
Date: Thu, 6 May 2010 21:06:19 -0400
Subject: [antlr-interest] TreeRewriter with Python
Message-ID: <C46265B3B3158249A5014DFCA150D2FD04E74B42@usphle19.phl.sap.corp>

Hi,

Reading 'Language Implementation Patterns', enjoying it very much.
I wanted to try the rewriting e.g.s using Python.
I don't see a 3.2 version available, so wrote a quick and dirty rewriter
to work with version 3.1.3, it's attached. 
Tested with the Reduce grammar from the book, it works.

- had to write a new Visitor to do the child replacement
- the Rewriter is not the same as java because 'failed' is not tracked
in the state object for 3.1.3
- I just catch Backtrackingfailed and ignore it.

The changed Reduce grammar from the walking chapter is below. (the
backtracking option doesn't work in Python generation; the generated
code doesn't compile. Because applyOnce sets backtracking, I assume it
is ok not set the backtracking option in the grammar). Simple Test below
it

Anybody tried Tree rewriting with Python? Does anybody see issues with
the attached Rewriter? I would like to use it in my Project, but wanted
to get feedback on this before diving deeper; especially if there is a
major issue with this approach. 

Thanks for your help.

Regards,
Harish

 <<treerewriter.py>> 

The Grammar:
--------------------
tree grammar Reduce;

options {
    language=Python;
    output=AST;
    ASTLabelType=CommonTree;
    tokenVocab=VecMath;
    superClass=TreeRewriter;
    //backtrack=true;          // allow backtracking if it's needed
}

@header {
from antlr3.treerewriter import TreeRewriter
}

bottomup:  
  xPlusx |
  multBy2 |
  combineShifts 
;

xPlusx: ^('+' i=INT j=INT {int($i.text) == int($j.text)}?) ->
^(MULT["*"] INT["2"] $j);

multBy2
    :   ^('*' x=INT {int($x.text) == 2}? y=.) -> ^(SHIFT["<<"] $y
INT["1"])
    |   ^('*' a=. b=INT {int($b.text)==2}?) -> ^(SHIFT["<<"] $a
INT["1"])
    ;

combineShifts 
    :  ^(SHIFT ^(SHIFT e=. n=INT) m=INT)
       -> ^(SHIFT["<<"] $e INT[str(int($n.text) + int($m.text))])
  ;

Test Code:
---------------
from antlr3 import *
from antlr3.tree import *
from VecMathLexer import VecMathLexer
from VecMathParser import VecMathParser
from Reduce import Reduce

cStream = StringStream("print (3 + 3) * 2 * 2")
lexer = VecMathLexer(cStream)
tStream = CommonTokenStream(lexer)
parser = VecMathParser(tStream)
t = parser.prog().tree
print "Original tree: "+ t.toStringTree()
nodes = CommonTreeNodeStream(t)
red = Reduce(nodes);
t = red.downup(t, False)
print "Simplified tree: " + t.toStringTree()
-------------- next part --------------
A non-text attachment was scrubbed...
Name: treerewriter.py
Type: application/octet-stream
Size: 3354 bytes
Desc: treerewriter.py
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100506/46520c3c/attachment.obj 

From cheetomonster at gmail.com  Thu May  6 18:06:48 2010
From: cheetomonster at gmail.com (Chris verBurg)
Date: Thu, 6 May 2010 18:06:48 -0700
Subject: [antlr-interest] Is parser control over the lexer possible?
In-Reply-To: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>
References: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>
Message-ID: <x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>

Hey all,

OK, let me try a related but far less involved question:

ANTLR tokenizes all input into an internal list before parsing anything in
that list.  (Right?)  Hence, it runs out of memory trying to read my
6.2-million-line input file, because that list is huge.  What's the ANTLR
way to handle such large input streams?

Thanks,
-Chris




On Thu, Apr 29, 2010 at 4:33 PM, Chris verBurg <cheetomonster at gmail.com>wrote:

> Hey guys,
>
> A question was posted a few days ago about dealing with an infinite input
> stream, and the suggestion was to subclass TokenStream so that it didn't
> read in all of the input upfront.
>
> I'm running into a similar problem, but before I go run off and subclass
> things I thought I'd see if there's a "best practice" for my situation.  It
> also overlaps with the "how do I use keywords as identifiers<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1741>"
> FAQ.
>
> I have a data-file grammar that recognizes strings, numbers, and a ton of
> keywords.  Pretending "VERSION" and "LIMIT" are two keywords, here's (part
> of) the .g file:
>
> data_file:
>   'VERSION' STRING ';'
>   | 'LIMIT' NUMBER ';'
>   ;
>
> NUMBER:
>   ('-'|'+')? ('0'..'9')+
>   | ('-'|'+')? ('0'..'9')* '.' ('0'..'9')*
>   ;
>
> STRING:
>   ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+ ;
>
>
> Problem input #1:
>
> VERSION 1.2 ;
>
> The "1.2" is lexed as a number instead of a string, so I get a parse error.
>
> Problem input #2:
>
> VERSION LIMIT ;
>
> The "LIMIT" is lexed as a keyword instead of a string, so I get a parse
> error.
>
>
> I saw the FAQ about keywords-as-identifiers, but I don't think it's helpful
> for me.  For the NUMBER-that-should-be-a-STRING problem, there's no exact
> string I could pass to input.LT(1).getText().equals(), because it requires
> a regex to match a NUMBER.  The other solution was to make an "identifier"
> rule to match all possibilities -- is the best solution here really to
> change the rule to 'VERSION' (STRING | NUMBER) ';'?
>
> For the keyword-that-should-be-a-STRING problem, I'm hesitant to use either
> of those solutions because of the sheer number of keywords in this grammar.
>
>
> Ideally what I'd like to do is what I did in Flex and Bison (which I'm
> porting this grammar from).  What I did there was have the parser control
> how the lexer interpreted subsequent tokens.  I embedded a rule in the
> parser, immediately after the 'VERSION' token, to tell Flex to enter a
> "force-the-next-token-to-be-a-STRING-no-matter-what" start state.  It worked
> beautifully.  I got most of the way through implementing that in my ANTLR
> grammar when I found out that ANTLRFileStream reads all the tokens in before
> the parser even starts up -- which means the parser can't give the lexer any
> direction over token interpretation.
>
>
> Thoughts, suggestions, outrageous flames?  Is there a "good" way to do
> this, or maybe is there a completely different approach I should take?
>
> Thanks!
> -Chris
>
>
>

From mike.matera at xilinx.com  Thu May  6 19:13:29 2010
From: mike.matera at xilinx.com (Mike Matera)
Date: Thu, 6 May 2010 19:13:29 -0700
Subject: [antlr-interest] Is parser control over the lexer possible?
In-Reply-To: <x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>
References: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>
	<x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>
Message-ID: <aa39c786-cadd-4f46-90ad-ec42449556a5@SG2EHSMHS006.ehs.local>

Hi Chris,

Yes, antlr reads the whole file into memory.  I don't know how to stop 
it from doing that. 

Cheers
./m

Chris verBurg wrote:
> Hey all,
>
> OK, let me try a related but far less involved question:
>
> ANTLR tokenizes all input into an internal list before parsing anything in
> that list.  (Right?)  Hence, it runs out of memory trying to read my
> 6.2-million-line input file, because that list is huge.  What's the ANTLR
> way to handle such large input streams?
>
> Thanks,
> -Chris
>
>
>
>
> On Thu, Apr 29, 2010 at 4:33 PM, Chris verBurg <cheetomonster at gmail.com>wrote:
>
>   
>> Hey guys,
>>
>> A question was posted a few days ago about dealing with an infinite input
>> stream, and the suggestion was to subclass TokenStream so that it didn't
>> read in all of the input upfront.
>>
>> I'm running into a similar problem, but before I go run off and subclass
>> things I thought I'd see if there's a "best practice" for my situation.  It
>> also overlaps with the "how do I use keywords as identifiers<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1741>"
>> FAQ.
>>
>> I have a data-file grammar that recognizes strings, numbers, and a ton of
>> keywords.  Pretending "VERSION" and "LIMIT" are two keywords, here's (part
>> of) the .g file:
>>
>> data_file:
>>   'VERSION' STRING ';'
>>   | 'LIMIT' NUMBER ';'
>>   ;
>>
>> NUMBER:
>>   ('-'|'+')? ('0'..'9')+
>>   | ('-'|'+')? ('0'..'9')* '.' ('0'..'9')*
>>   ;
>>
>> STRING:
>>   ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+ ;
>>
>>
>> Problem input #1:
>>
>> VERSION 1.2 ;
>>
>> The "1.2" is lexed as a number instead of a string, so I get a parse error.
>>
>> Problem input #2:
>>
>> VERSION LIMIT ;
>>
>> The "LIMIT" is lexed as a keyword instead of a string, so I get a parse
>> error.
>>
>>
>> I saw the FAQ about keywords-as-identifiers, but I don't think it's helpful
>> for me.  For the NUMBER-that-should-be-a-STRING problem, there's no exact
>> string I could pass to input.LT(1).getText().equals(), because it requires
>> a regex to match a NUMBER.  The other solution was to make an "identifier"
>> rule to match all possibilities -- is the best solution here really to
>> change the rule to 'VERSION' (STRING | NUMBER) ';'?
>>
>> For the keyword-that-should-be-a-STRING problem, I'm hesitant to use either
>> of those solutions because of the sheer number of keywords in this grammar.
>>
>>
>> Ideally what I'd like to do is what I did in Flex and Bison (which I'm
>> porting this grammar from).  What I did there was have the parser control
>> how the lexer interpreted subsequent tokens.  I embedded a rule in the
>> parser, immediately after the 'VERSION' token, to tell Flex to enter a
>> "force-the-next-token-to-be-a-STRING-no-matter-what" start state.  It worked
>> beautifully.  I got most of the way through implementing that in my ANTLR
>> grammar when I found out that ANTLRFileStream reads all the tokens in before
>> the parser even starts up -- which means the parser can't give the lexer any
>> direction over token interpretation.
>>
>>
>> Thoughts, suggestions, outrageous flames?  Is there a "good" way to do
>> this, or maybe is there a completely different approach I should take?
>>
>> Thanks!
>> -Chris
>>
>>
>>
>>     
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

This email and any attachments are intended for the sole use of the named recipient(s) and contain(s) confidential information that may be proprietary, privileged or copyrighted under applicable law. If you are not the intended recipient, do not read, copy, or forward this email message or any attachments. Delete this email message and any attachments immediately.



From BrianC at sannas.org  Thu May  6 19:37:13 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Fri, 7 May 2010 10:37:13 +0800
Subject: [antlr-interest] Is parser control over the lexer possible?
In-Reply-To: <aa39c786-cadd-4f46-90ad-ec42449556a5@SG2EHSMHS006.ehs.local>
References: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>	<x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>
	<aa39c786-cadd-4f46-90ad-ec42449556a5@SG2EHSMHS006.ehs.local>
Message-ID: <008501caed8e$34871f50$9d955df0$@sannas.org>

I too would be interested in changing that behavior.  I use ANTLR as a
command parser, so instantiating everything for every new command is a lot
of overhead.  I think ANTLR needs a mode in where it only fetches one line
at a time, by calling a GetInput routine that we supply

 -Brian

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mike Matera
Sent: Friday, May 07, 2010 10:13
To: Chris verBurg
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Is parser control over the lexer possible?

Hi Chris,

Yes, antlr reads the whole file into memory.  I don't know how to stop it
from doing that. 

Cheers
./m

Chris verBurg wrote:
> Hey all,
>
> OK, let me try a related but far less involved question:
>
> ANTLR tokenizes all input into an internal list before parsing 
> anything in that list.  (Right?)  Hence, it runs out of memory trying 
> to read my 6.2-million-line input file, because that list is huge.  
> What's the ANTLR way to handle such large input streams?
>
> Thanks,
> -Chris
>
>
>
>
> On Thu, Apr 29, 2010 at 4:33 PM, Chris verBurg
<cheetomonster at gmail.com>wrote:
>
>   
>> Hey guys,
>>
>> A question was posted a few days ago about dealing with an infinite 
>> input stream, and the suggestion was to subclass TokenStream so that 
>> it didn't read in all of the input upfront.
>>
>> I'm running into a similar problem, but before I go run off and 
>> subclass things I thought I'd see if there's a "best practice" for my 
>> situation.  It also overlaps with the "how do I use keywords as
identifiers<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1741>"
>> FAQ.
>>
>> I have a data-file grammar that recognizes strings, numbers, and a 
>> ton of keywords.  Pretending "VERSION" and "LIMIT" are two keywords, 
>> here's (part
>> of) the .g file:
>>
>> data_file:
>>   'VERSION' STRING ';'
>>   | 'LIMIT' NUMBER ';'
>>   ;
>>
>> NUMBER:
>>   ('-'|'+')? ('0'..'9')+
>>   | ('-'|'+')? ('0'..'9')* '.' ('0'..'9')*
>>   ;
>>
>> STRING:
>>   ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+ ;
>>
>>
>> Problem input #1:
>>
>> VERSION 1.2 ;
>>
>> The "1.2" is lexed as a number instead of a string, so I get a parse
error.
>>
>> Problem input #2:
>>
>> VERSION LIMIT ;
>>
>> The "LIMIT" is lexed as a keyword instead of a string, so I get a 
>> parse error.
>>
>>
>> I saw the FAQ about keywords-as-identifiers, but I don't think it's 
>> helpful for me.  For the NUMBER-that-should-be-a-STRING problem, 
>> there's no exact string I could pass to 
>> input.LT(1).getText().equals(), because it requires a regex to match a
NUMBER.  The other solution was to make an "identifier"
>> rule to match all possibilities -- is the best solution here really 
>> to change the rule to 'VERSION' (STRING | NUMBER) ';'?
>>
>> For the keyword-that-should-be-a-STRING problem, I'm hesitant to use 
>> either of those solutions because of the sheer number of keywords in this
grammar.
>>
>>
>> Ideally what I'd like to do is what I did in Flex and Bison (which 
>> I'm porting this grammar from).  What I did there was have the parser 
>> control how the lexer interpreted subsequent tokens.  I embedded a 
>> rule in the parser, immediately after the 'VERSION' token, to tell 
>> Flex to enter a "force-the-next-token-to-be-a-STRING-no-matter-what" 
>> start state.  It worked beautifully.  I got most of the way through 
>> implementing that in my ANTLR grammar when I found out that 
>> ANTLRFileStream reads all the tokens in before the parser even starts 
>> up -- which means the parser can't give the lexer any direction over
token interpretation.
>>
>>
>> Thoughts, suggestions, outrageous flames?  Is there a "good" way to 
>> do this, or maybe is there a completely different approach I should take?
>>
>> Thanks!
>> -Chris
>>
>>
>>
>>     
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

This email and any attachments are intended for the sole use of the named
recipient(s) and contain(s) confidential information that may be
proprietary, privileged or copyrighted under applicable law. If you are not
the intended recipient, do not read, copy, or forward this email message or
any attachments. Delete this email message and any attachments immediately.



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From cliff.s.hudson at gmail.com  Fri May  7 00:58:11 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 7 May 2010 00:58:11 -0700
Subject: [antlr-interest] Is parser control over the lexer possible?
In-Reply-To: <008501caed8e$34871f50$9d955df0$@sannas.org>
References: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>	<x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>	<aa39c786-cadd-4f46-90ad-ec42449556a5@SG2EHSMHS006.ehs.local>
	<008501caed8e$34871f50$9d955df0$@sannas.org>
Message-ID: <4be3c81a.0663730a.670d.7310@mx.google.com>

It's not at all difficult to let ANTLR handle indeterminate amounts of
input.  As has been suggested before, you will need to provide your own
token stream to provide tokens at the rate you wish to give them.  The
problem is one of interfacing the pull model of the parser with the push
model of your input. 

Lets assume you have a parser which runs indefinitely so long as you keep
feeding it tokens, until you feed it the EOF token.  For example:

command : expr+;

So long as the parser can receive tokens which match the grammar for expr, a
call to command() will not return.  In your case, you may very well have an
infinite number of tokens, but you aren't wanting to provide them up-front.
The solution is a token stream which provides tokens in batches you choose.
You can do this by letting ANTLR control the input loop, as follows:

Create your custom token stream.
Pass it to the parser.
Execute command();
In your token stream's implementation of NextToken() you will either:
1) If you have no stored tokens, ask the "user" for additional input.  If
you are reading from a file, this might consist of reading in a line and
sending it to the lexer, which will spit out a bunch of tokens. In an
interactive interpreter sort of scenario, you might prompt the user for a
line of text. Store these tokens in some ordered collection, and return the
first one; or
2) If you still have stored tokens, return the next one.

In this way, ANTLR will parse only as much as you have to give at any time,
and will wait for you to provide it more tokens if you don't have any at the
moment.  When you are finished with your session, you can pass EOF back from
NextToken() which will tell the parser that there is no more input to be
had.  The call to command() will return.

Note that as long as command() hasn't returned, ANTLR will be able to
process rules and execute grammar actions when you return tokens to it from
NextToken().

Does that make sense?

On the subject of the parser controlling how the lexer works, this is not
something that ANTLR is designed to do "out of the box".  However, you
control the token stream, and you control what happens when certain actions
are invoked.  You could construct a system whereby when an action is
executed, it changes the lexer used by your NextToken() call to fetch
additional tokens.  Remember, you are utterly in control of which tokens are
provided to the parser and - as illustrated by the technique above - when
they are provided.  You control which lexer you use and when.  But I would
caution you that such a system can become fairly complex - for instance you
have to ensure that token IDs don't conflict between your lexers, which may
require mapping them by hand in your NextToken call and altering the token
IDs used by the generated parser itself.  I've not tried this before, though
I'd be a bit surprised if it couldn't be done.

I personally have a system where there are two grammars and two parsers.
The 'outer' grammar knows about areas where the inner grammar would be used.
Those areas are lexed as a single token (quoted string in this case).  When
the rule in the outer grammar matches the quoted string, it uses a lexer and
parser for the 'inner' grammar to process it.

Hope this has helped.



-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Brian Catlin
Sent: Thursday, May 06, 2010 7:37 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Is parser control over the lexer possible?

I too would be interested in changing that behavior.  I use ANTLR as a
command parser, so instantiating everything for every new command is a lot
of overhead.  I think ANTLR needs a mode in where it only fetches one line
at a time, by calling a GetInput routine that we supply

 -Brian

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mike Matera
Sent: Friday, May 07, 2010 10:13
To: Chris verBurg
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Is parser control over the lexer possible?

Hi Chris,

Yes, antlr reads the whole file into memory.  I don't know how to stop it
from doing that. 

Cheers
./m

Chris verBurg wrote:
> Hey all,
>
> OK, let me try a related but far less involved question:
>
> ANTLR tokenizes all input into an internal list before parsing 
> anything in that list.  (Right?)  Hence, it runs out of memory trying 
> to read my 6.2-million-line input file, because that list is huge.  
> What's the ANTLR way to handle such large input streams?
>
> Thanks,
> -Chris
>
>
>
>
> On Thu, Apr 29, 2010 at 4:33 PM, Chris verBurg
<cheetomonster at gmail.com>wrote:
>
>   
>> Hey guys,
>>
>> A question was posted a few days ago about dealing with an infinite 
>> input stream, and the suggestion was to subclass TokenStream so that 
>> it didn't read in all of the input upfront.
>>
>> I'm running into a similar problem, but before I go run off and 
>> subclass things I thought I'd see if there's a "best practice" for my 
>> situation.  It also overlaps with the "how do I use keywords as
identifiers<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1741>"
>> FAQ.
>>
>> I have a data-file grammar that recognizes strings, numbers, and a 
>> ton of keywords.  Pretending "VERSION" and "LIMIT" are two keywords, 
>> here's (part
>> of) the .g file:
>>
>> data_file:
>>   'VERSION' STRING ';'
>>   | 'LIMIT' NUMBER ';'
>>   ;
>>
>> NUMBER:
>>   ('-'|'+')? ('0'..'9')+
>>   | ('-'|'+')? ('0'..'9')* '.' ('0'..'9')*
>>   ;
>>
>> STRING:
>>   ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+ ;
>>
>>
>> Problem input #1:
>>
>> VERSION 1.2 ;
>>
>> The "1.2" is lexed as a number instead of a string, so I get a parse
error.
>>
>> Problem input #2:
>>
>> VERSION LIMIT ;
>>
>> The "LIMIT" is lexed as a keyword instead of a string, so I get a 
>> parse error.
>>
>>
>> I saw the FAQ about keywords-as-identifiers, but I don't think it's 
>> helpful for me.  For the NUMBER-that-should-be-a-STRING problem, 
>> there's no exact string I could pass to 
>> input.LT(1).getText().equals(), because it requires a regex to match a
NUMBER.  The other solution was to make an "identifier"
>> rule to match all possibilities -- is the best solution here really 
>> to change the rule to 'VERSION' (STRING | NUMBER) ';'?
>>
>> For the keyword-that-should-be-a-STRING problem, I'm hesitant to use 
>> either of those solutions because of the sheer number of keywords in this
grammar.
>>
>>
>> Ideally what I'd like to do is what I did in Flex and Bison (which 
>> I'm porting this grammar from).  What I did there was have the parser 
>> control how the lexer interpreted subsequent tokens.  I embedded a 
>> rule in the parser, immediately after the 'VERSION' token, to tell 
>> Flex to enter a "force-the-next-token-to-be-a-STRING-no-matter-what" 
>> start state.  It worked beautifully.  I got most of the way through 
>> implementing that in my ANTLR grammar when I found out that 
>> ANTLRFileStream reads all the tokens in before the parser even starts 
>> up -- which means the parser can't give the lexer any direction over
token interpretation.
>>
>>
>> Thoughts, suggestions, outrageous flames?  Is there a "good" way to 
>> do this, or maybe is there a completely different approach I should take?
>>
>> Thanks!
>> -Chris
>>
>>
>>
>>     
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

This email and any attachments are intended for the sole use of the named
recipient(s) and contain(s) confidential information that may be
proprietary, privileged or copyrighted under applicable law. If you are not
the intended recipient, do not read, copy, or forward this email message or
any attachments. Delete this email message and any attachments immediately.



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From BrianC at sannas.org  Fri May  7 01:12:34 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Fri, 7 May 2010 16:12:34 +0800
Subject: [antlr-interest] Is parser control over the lexer possible?
In-Reply-To: <4be3c81a.0663730a.670d.7310@mx.google.com>
References: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>	<x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>	<aa39c786-cadd-4f46-90ad-ec42449556a5@SG2EHSMHS006.ehs.local>
	<008501caed8e$34871f50$9d955df0$@sannas.org>
	<4be3c81a.0663730a.670d.7310@mx.google.com>
Message-ID: <00d601caedbd$0e04d500$2a0e7f00$@sannas.org>

Thanks Cliff, that is very helpful.  I currently don't have the time to
learn the guts of the ANTLR C port in order to write that.  Are there any
examples of this for C/C++?  

 -Brian

-----Original Message-----
From: Cliff Hudson [mailto:cliff.s.hudson at gmail.com] 
Sent: Friday, May 07, 2010 15:58
To: BrianC at sannas.org; antlr-interest at antlr.org
Subject: RE: [antlr-interest] Is parser control over the lexer possible?

It's not at all difficult to let ANTLR handle indeterminate amounts of
input.  As has been suggested before, you will need to provide your own
token stream to provide tokens at the rate you wish to give them.  The
problem is one of interfacing the pull model of the parser with the push
model of your input. 

Lets assume you have a parser which runs indefinitely so long as you keep
feeding it tokens, until you feed it the EOF token.  For example:

command : expr+;

So long as the parser can receive tokens which match the grammar for expr, a
call to command() will not return.  In your case, you may very well have an
infinite number of tokens, but you aren't wanting to provide them up-front.
The solution is a token stream which provides tokens in batches you choose.
You can do this by letting ANTLR control the input loop, as follows:

Create your custom token stream.
Pass it to the parser.
Execute command();
In your token stream's implementation of NextToken() you will either:
1) If you have no stored tokens, ask the "user" for additional input.  If
you are reading from a file, this might consist of reading in a line and
sending it to the lexer, which will spit out a bunch of tokens. In an
interactive interpreter sort of scenario, you might prompt the user for a
line of text. Store these tokens in some ordered collection, and return the
first one; or
2) If you still have stored tokens, return the next one.

In this way, ANTLR will parse only as much as you have to give at any time,
and will wait for you to provide it more tokens if you don't have any at the
moment.  When you are finished with your session, you can pass EOF back from
NextToken() which will tell the parser that there is no more input to be
had.  The call to command() will return.

Note that as long as command() hasn't returned, ANTLR will be able to
process rules and execute grammar actions when you return tokens to it from
NextToken().

Does that make sense?

On the subject of the parser controlling how the lexer works, this is not
something that ANTLR is designed to do "out of the box".  However, you
control the token stream, and you control what happens when certain actions
are invoked.  You could construct a system whereby when an action is
executed, it changes the lexer used by your NextToken() call to fetch
additional tokens.  Remember, you are utterly in control of which tokens are
provided to the parser and - as illustrated by the technique above - when
they are provided.  You control which lexer you use and when.  But I would
caution you that such a system can become fairly complex - for instance you
have to ensure that token IDs don't conflict between your lexers, which may
require mapping them by hand in your NextToken call and altering the token
IDs used by the generated parser itself.  I've not tried this before, though
I'd be a bit surprised if it couldn't be done.

I personally have a system where there are two grammars and two parsers.
The 'outer' grammar knows about areas where the inner grammar would be used.
Those areas are lexed as a single token (quoted string in this case).  When
the rule in the outer grammar matches the quoted string, it uses a lexer and
parser for the 'inner' grammar to process it.

Hope this has helped.



-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Brian Catlin
Sent: Thursday, May 06, 2010 7:37 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Is parser control over the lexer possible?

I too would be interested in changing that behavior.  I use ANTLR as a
command parser, so instantiating everything for every new command is a lot
of overhead.  I think ANTLR needs a mode in where it only fetches one line
at a time, by calling a GetInput routine that we supply

 -Brian

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mike Matera
Sent: Friday, May 07, 2010 10:13
To: Chris verBurg
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Is parser control over the lexer possible?

Hi Chris,

Yes, antlr reads the whole file into memory.  I don't know how to stop it
from doing that. 

Cheers
./m

Chris verBurg wrote:
> Hey all,
>
> OK, let me try a related but far less involved question:
>
> ANTLR tokenizes all input into an internal list before parsing 
> anything in that list.  (Right?)  Hence, it runs out of memory trying 
> to read my 6.2-million-line input file, because that list is huge.
> What's the ANTLR way to handle such large input streams?
>
> Thanks,
> -Chris
>
>
>
>
> On Thu, Apr 29, 2010 at 4:33 PM, Chris verBurg
<cheetomonster at gmail.com>wrote:
>
>   
>> Hey guys,
>>
>> A question was posted a few days ago about dealing with an infinite 
>> input stream, and the suggestion was to subclass TokenStream so that 
>> it didn't read in all of the input upfront.
>>
>> I'm running into a similar problem, but before I go run off and 
>> subclass things I thought I'd see if there's a "best practice" for my 
>> situation.  It also overlaps with the "how do I use keywords as
identifiers<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1741>"
>> FAQ.
>>
>> I have a data-file grammar that recognizes strings, numbers, and a 
>> ton of keywords.  Pretending "VERSION" and "LIMIT" are two keywords, 
>> here's (part
>> of) the .g file:
>>
>> data_file:
>>   'VERSION' STRING ';'
>>   | 'LIMIT' NUMBER ';'
>>   ;
>>
>> NUMBER:
>>   ('-'|'+')? ('0'..'9')+
>>   | ('-'|'+')? ('0'..'9')* '.' ('0'..'9')*
>>   ;
>>
>> STRING:
>>   ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+ ;
>>
>>
>> Problem input #1:
>>
>> VERSION 1.2 ;
>>
>> The "1.2" is lexed as a number instead of a string, so I get a parse
error.
>>
>> Problem input #2:
>>
>> VERSION LIMIT ;
>>
>> The "LIMIT" is lexed as a keyword instead of a string, so I get a 
>> parse error.
>>
>>
>> I saw the FAQ about keywords-as-identifiers, but I don't think it's 
>> helpful for me.  For the NUMBER-that-should-be-a-STRING problem, 
>> there's no exact string I could pass to 
>> input.LT(1).getText().equals(), because it requires a regex to match 
>> a
NUMBER.  The other solution was to make an "identifier"
>> rule to match all possibilities -- is the best solution here really 
>> to change the rule to 'VERSION' (STRING | NUMBER) ';'?
>>
>> For the keyword-that-should-be-a-STRING problem, I'm hesitant to use 
>> either of those solutions because of the sheer number of keywords in 
>> this
grammar.
>>
>>
>> Ideally what I'd like to do is what I did in Flex and Bison (which 
>> I'm porting this grammar from).  What I did there was have the parser 
>> control how the lexer interpreted subsequent tokens.  I embedded a 
>> rule in the parser, immediately after the 'VERSION' token, to tell 
>> Flex to enter a "force-the-next-token-to-be-a-STRING-no-matter-what"
>> start state.  It worked beautifully.  I got most of the way through 
>> implementing that in my ANTLR grammar when I found out that 
>> ANTLRFileStream reads all the tokens in before the parser even starts 
>> up -- which means the parser can't give the lexer any direction over
token interpretation.
>>
>>
>> Thoughts, suggestions, outrageous flames?  Is there a "good" way to 
>> do this, or maybe is there a completely different approach I should take?
>>
>> Thanks!
>> -Chris
>>
>>
>>
>>     
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

This email and any attachments are intended for the sole use of the named
recipient(s) and contain(s) confidential information that may be
proprietary, privileged or copyrighted under applicable law. If you are not
the intended recipient, do not read, copy, or forward this email message or
any attachments. Delete this email message and any attachments immediately.



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rug at maconomy.com  Fri May  7 09:52:26 2010
From: rug at maconomy.com (Rune Glerup)
Date: Fri, 7 May 2010 18:52:26 +0200
Subject: [antlr-interest] Help debugging Tree Grammar
Message-ID: <437BD6CADC498842A158A08DD48FAB8F01B6C7E7@mx-cph.maconomy.com>

Hi

I have a tree grammar rule for the purpose of rewriting this pattern:

something or false     => something
something or true      => true
false     or something => something
true      or something => true

The rule looks like this:

orRewrite : ^(n=OR . . {binaryOperatorHasValueOperand($n)}?) -> {
  rewriteOrExpression($n)
} ;

It seems however that ^(OR . .) does not match this AST (printed with
toStringTree()):

(or (CALL fun ARGS) true)

It is a bit hard to actually find out what is going on inside the
runtime other than match() gets the token EOF at a time, when it expects
UP.

Am I doing something obvious wrong?

Thanks!

-- 
Rune



From cliff.s.hudson at gmail.com  Fri May  7 11:03:26 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 7 May 2010 11:03:26 -0700
Subject: [antlr-interest] Is parser control over the lexer possible?
In-Reply-To: <00d601caedbd$0e04d500$2a0e7f00$@sannas.org>
References: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>	<x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>	<aa39c786-cadd-4f46-90ad-ec42449556a5@SG2EHSMHS006.ehs.local>
	<008501caed8e$34871f50$9d955df0$@sannas.org>
	<4be3c81a.0663730a.670d.7310@mx.google.com>
	<00d601caedbd$0e04d500$2a0e7f00$@sannas.org>
Message-ID: <4be455f5.1065730a.19b8.ffff9717@mx.google.com>

I do not personally have such examples.  I know there are others here who
have written interactive interpreters who may have dealt with this.

-----Original Message-----
From: Brian Catlin [mailto:BrianC at sannas.org] 
Sent: Friday, May 07, 2010 1:13 AM
To: 'Cliff Hudson'; antlr-interest at antlr.org
Subject: RE: [antlr-interest] Is parser control over the lexer possible?

Thanks Cliff, that is very helpful.  I currently don't have the time to
learn the guts of the ANTLR C port in order to write that.  Are there any
examples of this for C/C++?  

 -Brian

-----Original Message-----
From: Cliff Hudson [mailto:cliff.s.hudson at gmail.com] 
Sent: Friday, May 07, 2010 15:58
To: BrianC at sannas.org; antlr-interest at antlr.org
Subject: RE: [antlr-interest] Is parser control over the lexer possible?

It's not at all difficult to let ANTLR handle indeterminate amounts of
input.  As has been suggested before, you will need to provide your own
token stream to provide tokens at the rate you wish to give them.  The
problem is one of interfacing the pull model of the parser with the push
model of your input. 

Lets assume you have a parser which runs indefinitely so long as you keep
feeding it tokens, until you feed it the EOF token.  For example:

command : expr+;

So long as the parser can receive tokens which match the grammar for expr, a
call to command() will not return.  In your case, you may very well have an
infinite number of tokens, but you aren't wanting to provide them up-front.
The solution is a token stream which provides tokens in batches you choose.
You can do this by letting ANTLR control the input loop, as follows:

Create your custom token stream.
Pass it to the parser.
Execute command();
In your token stream's implementation of NextToken() you will either:
1) If you have no stored tokens, ask the "user" for additional input.  If
you are reading from a file, this might consist of reading in a line and
sending it to the lexer, which will spit out a bunch of tokens. In an
interactive interpreter sort of scenario, you might prompt the user for a
line of text. Store these tokens in some ordered collection, and return the
first one; or
2) If you still have stored tokens, return the next one.

In this way, ANTLR will parse only as much as you have to give at any time,
and will wait for you to provide it more tokens if you don't have any at the
moment.  When you are finished with your session, you can pass EOF back from
NextToken() which will tell the parser that there is no more input to be
had.  The call to command() will return.

Note that as long as command() hasn't returned, ANTLR will be able to
process rules and execute grammar actions when you return tokens to it from
NextToken().

Does that make sense?

On the subject of the parser controlling how the lexer works, this is not
something that ANTLR is designed to do "out of the box".  However, you
control the token stream, and you control what happens when certain actions
are invoked.  You could construct a system whereby when an action is
executed, it changes the lexer used by your NextToken() call to fetch
additional tokens.  Remember, you are utterly in control of which tokens are
provided to the parser and - as illustrated by the technique above - when
they are provided.  You control which lexer you use and when.  But I would
caution you that such a system can become fairly complex - for instance you
have to ensure that token IDs don't conflict between your lexers, which may
require mapping them by hand in your NextToken call and altering the token
IDs used by the generated parser itself.  I've not tried this before, though
I'd be a bit surprised if it couldn't be done.

I personally have a system where there are two grammars and two parsers.
The 'outer' grammar knows about areas where the inner grammar would be used.
Those areas are lexed as a single token (quoted string in this case).  When
the rule in the outer grammar matches the quoted string, it uses a lexer and
parser for the 'inner' grammar to process it.

Hope this has helped.



-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Brian Catlin
Sent: Thursday, May 06, 2010 7:37 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Is parser control over the lexer possible?

I too would be interested in changing that behavior.  I use ANTLR as a
command parser, so instantiating everything for every new command is a lot
of overhead.  I think ANTLR needs a mode in where it only fetches one line
at a time, by calling a GetInput routine that we supply

 -Brian

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mike Matera
Sent: Friday, May 07, 2010 10:13
To: Chris verBurg
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Is parser control over the lexer possible?

Hi Chris,

Yes, antlr reads the whole file into memory.  I don't know how to stop it
from doing that. 

Cheers
./m

Chris verBurg wrote:
> Hey all,
>
> OK, let me try a related but far less involved question:
>
> ANTLR tokenizes all input into an internal list before parsing 
> anything in that list.  (Right?)  Hence, it runs out of memory trying 
> to read my 6.2-million-line input file, because that list is huge.
> What's the ANTLR way to handle such large input streams?
>
> Thanks,
> -Chris
>
>
>
>
> On Thu, Apr 29, 2010 at 4:33 PM, Chris verBurg
<cheetomonster at gmail.com>wrote:
>
>   
>> Hey guys,
>>
>> A question was posted a few days ago about dealing with an infinite 
>> input stream, and the suggestion was to subclass TokenStream so that 
>> it didn't read in all of the input upfront.
>>
>> I'm running into a similar problem, but before I go run off and 
>> subclass things I thought I'd see if there's a "best practice" for my 
>> situation.  It also overlaps with the "how do I use keywords as
identifiers<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1741>"
>> FAQ.
>>
>> I have a data-file grammar that recognizes strings, numbers, and a 
>> ton of keywords.  Pretending "VERSION" and "LIMIT" are two keywords, 
>> here's (part
>> of) the .g file:
>>
>> data_file:
>>   'VERSION' STRING ';'
>>   | 'LIMIT' NUMBER ';'
>>   ;
>>
>> NUMBER:
>>   ('-'|'+')? ('0'..'9')+
>>   | ('-'|'+')? ('0'..'9')* '.' ('0'..'9')*
>>   ;
>>
>> STRING:
>>   ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+ ;
>>
>>
>> Problem input #1:
>>
>> VERSION 1.2 ;
>>
>> The "1.2" is lexed as a number instead of a string, so I get a parse
error.
>>
>> Problem input #2:
>>
>> VERSION LIMIT ;
>>
>> The "LIMIT" is lexed as a keyword instead of a string, so I get a 
>> parse error.
>>
>>
>> I saw the FAQ about keywords-as-identifiers, but I don't think it's 
>> helpful for me.  For the NUMBER-that-should-be-a-STRING problem, 
>> there's no exact string I could pass to 
>> input.LT(1).getText().equals(), because it requires a regex to match 
>> a
NUMBER.  The other solution was to make an "identifier"
>> rule to match all possibilities -- is the best solution here really 
>> to change the rule to 'VERSION' (STRING | NUMBER) ';'?
>>
>> For the keyword-that-should-be-a-STRING problem, I'm hesitant to use 
>> either of those solutions because of the sheer number of keywords in 
>> this
grammar.
>>
>>
>> Ideally what I'd like to do is what I did in Flex and Bison (which 
>> I'm porting this grammar from).  What I did there was have the parser 
>> control how the lexer interpreted subsequent tokens.  I embedded a 
>> rule in the parser, immediately after the 'VERSION' token, to tell 
>> Flex to enter a "force-the-next-token-to-be-a-STRING-no-matter-what"
>> start state.  It worked beautifully.  I got most of the way through 
>> implementing that in my ANTLR grammar when I found out that 
>> ANTLRFileStream reads all the tokens in before the parser even starts 
>> up -- which means the parser can't give the lexer any direction over
token interpretation.
>>
>>
>> Thoughts, suggestions, outrageous flames?  Is there a "good" way to 
>> do this, or maybe is there a completely different approach I should take?
>>
>> Thanks!
>> -Chris
>>
>>
>>
>>     
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

This email and any attachments are intended for the sole use of the named
recipient(s) and contain(s) confidential information that may be
proprietary, privileged or copyrighted under applicable law. If you are not
the intended recipient, do not read, copy, or forward this email message or
any attachments. Delete this email message and any attachments immediately.



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From andersen at highfleet.com  Fri May  7 12:40:27 2010
From: andersen at highfleet.com (Bill Andersen)
Date: Fri, 7 May 2010 15:40:27 -0400
Subject: [antlr-interest] Stringtemplate : parallel multi-valued attribute
	iteration
Message-ID: <B566C164-BCF9-4939-8FDE-DA6C67046F23@highfleet.com>

Folks

I have a template defined in a group file

classDef(vars,types,body) ::= <<
public class Foo {

  <vars,types:{ var,type | <type> <var> = null; }>
  <body>
  
}
>>

and I pass in a (Java) array of strings as values for the 'vars' and 'types' attributes.  So given

	vars = ["v1","v2"]
	types = ["T1","T2"]

I'd like the output for the iterator on 'vars' and 'types' to be

  T1 v1 = null;
  T2 v2 = null;

except that I'm seeing instead the output

  [Ljava.lang.String;@63b9240e [Ljava.lang.String;@fee4648 = null; 

Iterating on one of the multi-valued attributes alone yields correct results.  I'm using the ANTLR 3.2 jars.  Any help appreciated.

	.bill


Bill Andersen 
Highfleet, Inc. (www.highfleet.com)
3600 O'Donnell Street, Suite 600
Baltimore, MD 21224
Office: +1.410.675.1201
Cell: +1.443.858.6444
Fax: +1.410.675.1204






From parrt at cs.usfca.edu  Fri May  7 12:56:40 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 7 May 2010 12:56:40 -0700
Subject: [antlr-interest] Stringtemplate : parallel multi-valued
	attribute iteration
In-Reply-To: <B566C164-BCF9-4939-8FDE-DA6C67046F23@highfleet.com>
References: <B566C164-BCF9-4939-8FDE-DA6C67046F23@highfleet.com>
Message-ID: <EE5F9541-28C5-4F1A-9420-B1FA91A6AD24@cs.usfca.edu>

Hi Bill. that should work.  Can you show us how you set attributes types, vars?
Ter
On May 7, 2010, at 12:40 PM, Bill Andersen wrote:

> Folks
> 
> I have a template defined in a group file
> 
> classDef(vars,types,body) ::= <<
> public class Foo {
> 
>  <vars,types:{ var,type | <type> <var> = null; }>
>  <body>
> 
> }
>>> 
> 
> and I pass in a (Java) array of strings as values for the 'vars' and 'types' attributes.  So given
> 
> 	vars = ["v1","v2"]
> 	types = ["T1","T2"]
> 
> I'd like the output for the iterator on 'vars' and 'types' to be
> 
>  T1 v1 = null;
>  T2 v2 = null;
> 
> except that I'm seeing instead the output
> 
>  [Ljava.lang.String;@63b9240e [Ljava.lang.String;@fee4648 = null; 
> 
> Iterating on one of the multi-valued attributes alone yields correct results.  I'm using the ANTLR 3.2 jars.  Any help appreciated.
> 
> 	.bill
> 
> 
> Bill Andersen 
> Highfleet, Inc. (www.highfleet.com)
> 3600 O'Donnell Street, Suite 600
> Baltimore, MD 21224
> Office: +1.410.675.1201
> Cell: +1.443.858.6444
> Fax: +1.410.675.1204
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From ldelara at affsys.com  Fri May  7 13:13:10 2010
From: ldelara at affsys.com (Lorenzo de Lara)
Date: Fri, 7 May 2010 20:13:10 +0000
Subject: [antlr-interest] compilation error building ANTLR csharp2 with nant
Message-ID: <19374419BC12B24EB568920A91F8548401E6D6@affmail01.affsys.com>

I'm having problems compiling the CSharp2 version of ANTLR with NAnt on WinXP. I've obtained the source from http://fisheye2.atlassian.com/browse/antlr/runtime/CSharp2
I run nant as instructed in the README:

nant release -t:net-2.0

The compilation errors are as follows:

....
                 [csc] Compiling 103 files to 'C:\ANTLR\CSharp2\bin\Antlr3.Runtime.dll'.
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(82,53): error CS1002: ; expected
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(83,9): error CS1519: Invalid token '{' in class, struct, or interface member declaration
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(84,18): error CS1519: Invalid token '=' in class, struct, or interface member declaration
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(85,9): error CS1519: Invalid token '}' in class, struct, or interface member declaration
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(87,32): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(87,48): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(92,32): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(92,45): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime\TokenConstants.cs(97,1): error CS1022: Type or namespace definition, or end-of-file expected
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(45,35): error CS1031: Type expected
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(45,58): error CS1002: ; expected
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(47,25): error CS1519: Invalid token '(' in class, struct, or interface member declaration
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(51,23): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(57,23): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(63,23): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(69,23): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(75,23): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(81,23): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(81,62): error CS1001: Identifier expected
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(81,64): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(87,23): error CS1518: Expected class, delegate, enum, interface, or struct
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(92,1): error CS1022: Type or namespace definition, or end-of-file expected
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(56,18): error CS0101: The namespace 'Antlr.Runtime.JavaExtensions' already contains a definition for '?'
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(50,18): (Location of symbol related to previous error)
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(62,18): error CS0101: The namespace 'Antlr.Runtime.JavaExtensions' already contains a definition for '?'
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(50,18): (Location of symbol related to previous error)
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(68,18): error CS0101: The namespace 'Antlr.Runtime.JavaExtensions' already contains a definition for '?'
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(50,18): (Location of symbol related to previous error)
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(74,18): error CS0101: The namespace 'Antlr.Runtime.JavaExtensions' already contains a definition for '?'
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(50,18): (Location of symbol related to previous error)
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(80,18): error CS0101: The namespace 'Antlr.Runtime.JavaExtensions' already contains a definition for '?'
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(50,18): (Location of symbol related to previous error)
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(81,62): error CS0101: The namespace 'Antlr.Runtime.JavaExtensions' already contains a definition for '?'
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(50,18): (Location of symbol related to previous error)
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(86,18): error CS0101: The namespace 'Antlr.Runtime.JavaExtensions' already contains a definition for '?'
                [csc] c:\ANTLR\CSharp2\Sources\Antlr3.Runtime\Antlr.Runtime.JavaExtensions\IOExtensions.cs(50,18): (Location of symbol related to previous error)

          BUILD FAILED

          C:\ANTLR\CSharp2\Sources\Antlr3.Runtime\default.build(83,4):
          External Program Failed: c:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\csc.exe (return code was 1)

          Total time: 0.3 seconds.

Can anyone help me?

Thanks,
Lorenzo

From parrt at cs.usfca.edu  Fri May  7 13:16:06 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 7 May 2010 13:16:06 -0700
Subject: [antlr-interest] Stringtemplate : parallel multi-valued
	attribute iteration
In-Reply-To: <A05E11C7-0B35-443C-8E48-6A49280CBCD7@highfleet.com>
References: <B566C164-BCF9-4939-8FDE-DA6C67046F23@highfleet.com>
	<EE5F9541-28C5-4F1A-9420-B1FA91A6AD24@cs.usfca.edu>
	<A05E11C7-0B35-443C-8E48-6A49280CBCD7@highfleet.com>
Message-ID: <5B98FAD5-A3E0-48C7-9EF1-15329568393F@cs.usfca.edu>

Hiya. ok, first question, why not just pass the lists? why create an array?
Ter
On May 7, 2010, at 1:08 PM, Bill Andersen wrote:

> 
> On May 7, 2010, at 15:56 , Terence Parr wrote:
> 
>> Hi Bill. that should work.  Can you show us how you set attributes types, vars?
>> Ter
> 
> 	  classDef(vars={ds.vars()},types={ds.types()}...)
> 
> where 'ds' is an instance of a support class for the parser.  It collects up variable references and types as parsing proceeds into two linked lists
> 
> 		List<String> vars = new LinkedList<String>();
> 		List<String> types = new LinkedList<String>();
> 
> 		public String[] vars() {
> 			return vars.toArray(new String[vars.size()]);
> 		}
> 		
> 		public String[] types() {
> 			return types.toArray(new String[types.size()]);
> 		}
> 
> and then converts those lists to arrays for passing into the template.
> 
>> On May 7, 2010, at 12:40 PM, Bill Andersen wrote:
>> 
>>> Folks
>>> 
>>> I have a template defined in a group file
>>> 
>>> classDef(vars,types,body) ::= <<
>>> public class Foo {
>>> 
>>> <vars,types:{ var,type | <type> <var> = null; }>
>>> <body>
>>> 
>>> }
>>>>> 
>>> 
>>> and I pass in a (Java) array of strings as values for the 'vars' and 'types' attributes.  So given
>>> 
>>> 	vars = ["v1","v2"]
>>> 	types = ["T1","T2"]
>>> 
>>> I'd like the output for the iterator on 'vars' and 'types' to be
>>> 
>>> T1 v1 = null;
>>> T2 v2 = null;
>>> 
>>> except that I'm seeing instead the output
>>> 
>>> [Ljava.lang.String;@63b9240e [Ljava.lang.String;@fee4648 = null; 
>>> 
>>> Iterating on one of the multi-valued attributes alone yields correct results.  I'm using the ANTLR 3.2 jars.  Any help appreciated.
>>> 
>>> 	.bill
>>> 
>>> 
>>> Bill Andersen 
>>> Highfleet, Inc. (www.highfleet.com)
>>> 3600 O'Donnell Street, Suite 600
>>> Baltimore, MD 21224
>>> Office: +1.410.675.1201
>>> Cell: +1.443.858.6444
>>> Fax: +1.410.675.1204
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> Bill Andersen 
> Highfleet, Inc. (www.highfleet.com)
> 3600 O'Donnell Street, Suite 600
> Baltimore, MD 21224
> Office: +1.410.675.1201
> Cell: +1.443.858.6444
> Fax: +1.410.675.1204
> 
> 
> 
> 
> 


From Daniel.Kasmeroglu at Kasisoft.net  Fri May  7 14:12:29 2010
From: Daniel.Kasmeroglu at Kasisoft.net (Daniel Kasmeroglu)
Date: Fri, 07 May 2010 23:12:29 +0200
Subject: [antlr-interest] [StringTemplate] Double-Types in StringTemplate:
	Maybe I'm blind
Message-ID: <4BE4823D.6070904@Kasisoft.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi there,

Maybe someone of you can point me to the corresponding doc to solve my problem. I've got
the following template:

$if(choice)$
<CHOICE>$choice$</CHOICE>
$endif$

This obviously shall evaluate to either '<CHOICE>true</CHOICE>' or
'<CHOICE>false</CHOICE>' . My problem is that 'choice' is of type 'Boolean'. If it's null
the fragment shall not be generated. Unfortunately the value 'Boolean.FALSE' prohibits the
evaluation. At the moment I'm solving this while providing special test methods for the
wrapping objects but I was wondering if there's some kind of 'ifset' test or something
like that to solve this.

Thanks in advance.


- -- 
Best regards

Daniel Kasmeroglu

http://www.kasisoft.com
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.7 (MingW32)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQEVAwUBS+SCPRY813X6YpljAQIIZQf/RS2YIueFwmCBUKhrTHDDnRP2Nxtn+QbH
i0PmYSBap47oSzCpRPPmiqlQTkQvDXYngGSEFBZ9eAdBdvho73mgWyTzfQl0ZREH
fDIhSfeU7rLgPirGgiABLJIglPVyHJ4TFBzYX74MwSfiQo5zYR75ShM/+MDk6A4Q
CDIlnD4+OzkgvnmokYVzLOqJqh1veLV3En3A5beKRHH7Q86Sfb+gfaqyYCfqfvg1
1dZTa9vDRwKsKBU5LFhfOzbl+/fJZJgyfsu+PUF0MfuFuHQUcayyfSt4sKpuW4km
hXAOqNC3VAkTRHr3BbKUwGzvxut+nF7ZOYV/EUvDleu5E/T0hbGRvw==
=rgIE
-----END PGP SIGNATURE-----

From parrt at cs.usfca.edu  Fri May  7 14:14:17 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 7 May 2010 14:14:17 -0700
Subject: [antlr-interest] [StringTemplate] Double-Types in
	StringTemplate: Maybe I'm blind
In-Reply-To: <4BE4823D.6070904@Kasisoft.net>
References: <4BE4823D.6070904@Kasisoft.net>
Message-ID: <A2C03A21-4405-452C-808F-4C85063EEBB3@cs.usfca.edu>

why not:

> <CHOICE>$choice$</CHOICE>

alone?
Ter
On May 7, 2010, at 2:12 PM, Daniel Kasmeroglu wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Hi there,
> 
> Maybe someone of you can point me to the corresponding doc to solve my problem. I've got
> the following template:
> 
> $if(choice)$
> <CHOICE>$choice$</CHOICE>
> $endif$
> 
> This obviously shall evaluate to either '<CHOICE>true</CHOICE>' or
> '<CHOICE>false</CHOICE>' . My problem is that 'choice' is of type 'Boolean'. If it's null
> the fragment shall not be generated. Unfortunately the value 'Boolean.FALSE' prohibits the
> evaluation. At the moment I'm solving this while providing special test methods for the
> wrapping objects but I was wondering if there's some kind of 'ifset' test or something
> like that to solve this.
> 
> Thanks in advance.
> 
> 
> - -- 
> Best regards
> 
> Daniel Kasmeroglu
> 
> http://www.kasisoft.com
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.7 (MingW32)
> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/
> 
> iQEVAwUBS+SCPRY813X6YpljAQIIZQf/RS2YIueFwmCBUKhrTHDDnRP2Nxtn+QbH
> i0PmYSBap47oSzCpRPPmiqlQTkQvDXYngGSEFBZ9eAdBdvho73mgWyTzfQl0ZREH
> fDIhSfeU7rLgPirGgiABLJIglPVyHJ4TFBzYX74MwSfiQo5zYR75ShM/+MDk6A4Q
> CDIlnD4+OzkgvnmokYVzLOqJqh1veLV3En3A5beKRHH7Q86Sfb+gfaqyYCfqfvg1
> 1dZTa9vDRwKsKBU5LFhfOzbl+/fJZJgyfsu+PUF0MfuFuHQUcayyfSt4sKpuW4km
> hXAOqNC3VAkTRHr3BbKUwGzvxut+nF7ZOYV/EUvDleu5E/T0hbGRvw==
> =rgIE
> -----END PGP SIGNATURE-----
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From anteusz at freemail.hu  Sat May  8 07:11:00 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Sat, 08 May 2010 16:11:00 +0200
Subject: [antlr-interest] How to get position in bytes in the stream or
	string that is parsed?
Message-ID: <4BE570F4.5080805@freemail.hu>

Hi,
How to get position in bytes in the stream or string that is parsed?
Could someone tell me how to get that?

I read the faq where it was witten what had to be overridden.
Is there a clear example somewhere?

Regards

Marton Papp



From jimi at temporal-wave.com  Sat May  8 09:44:44 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 08 May 2010 09:44:44 -0700
Subject: [antlr-interest] How to get position in bytes in the stream or
	string that is parsed?
In-Reply-To: <4BE570F4.5080805@freemail.hu>
Message-ID: <0ed42d84a58ace4a80796d0fee867856@temporal-wave.com>

Java? C#? C?

You mean the position of a particular token? Look at the API for CommonToken. You will see methods such as getStartIndex. You can also use $tok.start and things like that in a grammar.


http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_common_token.html


Jim 

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of anteusz at freemail.hu
> Sent: Saturday, May 08, 2010 7:11 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] How to get position in bytes in the stream or
> string that is parsed?
> 
> Hi,
> How to get position in bytes in the stream or string that is parsed?
> Could someone tell me how to get that?
> 
> I read the faq where it was witten what had to be overridden.
> Is there a clear example somewhere?
> 
> Regards
> 
> Marton Papp
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From rgildea at googlemail.com  Sat May  8 10:15:17 2010
From: rgildea at googlemail.com (Richard Gildea)
Date: Sat, 8 May 2010 18:15:17 +0100
Subject: [antlr-interest] C runtime intel compiler warning
Message-ID: <AANLkTimCvXdnfbT6e1otVIl4rAc3Sm1Ec2N428JPe0sN@mail.gmail.com>

Hi,

Compiling the C runtime libraries (version 3.2) on Linux with the
Intel compiler (icc 11.1) causes the following warning:

/src/antlr3baserecognizer.c(589):

  warning #186: pointless comparison of unsigned integer with zero

  		if	(recognizer->state->following->vector->count >= 0)

This looks like it could potentially be a bug in the code, since the
statement will always be true for an unsigned integer.

Thanks,

Richard

From anteusz at freemail.hu  Sat May  8 10:15:40 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Sat, 08 May 2010 19:15:40 +0200
Subject: [antlr-interest] How to get position in bytes in the stream or
 string that is parsed?
In-Reply-To: <0ed42d84a58ace4a80796d0fee867856@temporal-wave.com>
References: <0ed42d84a58ace4a80796d0fee867856@temporal-wave.com>
Message-ID: <4BE59C3C.3080607@freemail.hu>

5/8/2010 6:44 PM keltez?ssel, Jim Idle ?rta:
> Java? C#? C?
>
> You mean the position of a particular token? Look at the API for CommonToken. You will see methods such as getStartIndex. You can also use $tok.start and things like that in a grammar.
>
>
> http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_common_token.html
>
>
> Jim
>    

C#.
I have a parser object..

myparser= new myparser(tokenStream);

How do I get to common token from there?


Marton


From bios.bob.frankel at gmail.com  Sat May  8 16:17:11 2010
From: bios.bob.frankel at gmail.com (Bob Frankel)
Date: Sat, 08 May 2010 16:17:11 -0700
Subject: [antlr-interest] detecting illegal input chars in the lexer
Message-ID: <4BE5F0F7.1070907@gmail.com>

what's the best way to detected illegal input chars in the lexer -- in 
my case, chars with a code > 127  [i just had my grammar enter an 
infinite loop on an arithmetic expression where the minus sign was 
really an en-dash with code == 150, but maybe that's another problem!!!]

presumably, some pattern that matches chars \u0080 -- \uFFFF and yields 
some distinguished token that causes the grammar to fail???

thanks in advance....


From jimi at temporal-wave.com  Sat May  8 20:17:11 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 08 May 2010 20:17:11 -0700
Subject: [antlr-interest] detecting illegal input chars in the lexer
In-Reply-To: <4BE5F0F7.1070907@gmail.com>
Message-ID: <b6c81523097d4d45a6cc11987efc9978@temporal-wave.com>

Should not enter an infinite loop so your rules are probably broken somewhere (but maybe not). Check for rules that can match nothing at all:  T : 'a'* ;

However, your lexer should never enter the ANTLR error trapping usually, you should program for all eventualities if you can. The final catch all is a last rule in the file:

ANY : . { /* Call your error handler and talk about illegal characters */ ; $type = HIDDEN; } ;

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob Frankel
> Sent: Saturday, May 08, 2010 4:17 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] detecting illegal input chars in the lexer
> 
> what's the best way to detected illegal input chars in the lexer -- in
> my case, chars with a code > 127  [i just had my grammar enter an
> infinite loop on an arithmetic expression where the minus sign was
> really an en-dash with code == 150, but maybe that's another
> problem!!!]
> 
> presumably, some pattern that matches chars \u0080 -- \uFFFF and yields
> some distinguished token that causes the grammar to fail???
> 
> thanks in advance....
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From antlr-list at arizona-software.ch  Sun May  9 21:58:28 2010
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sun, 9 May 2010 21:58:28 -0700
Subject: [antlr-interest] ANTLRWorks 1.4 released
Message-ID: <62D12332-0AEC-4E13-B66A-4DD52799922C@arizona-software.ch>

Hi,

ANTLRWorks 1.4 is now available from http://www.antlr.org/works/index.html. It mainly includes improvements in syntax errors highlighting.

Regards,

Jean


From jogojapan at gmail.com  Sun May  9 23:04:45 2010
From: jogojapan at gmail.com (Johannes Goller)
Date: Mon, 10 May 2010 15:04:45 +0900
Subject: [antlr-interest] Error handling using parallel instances of a
	C-target parser
Message-ID: <l2q67666dea1005092304j8b698e64uc6d3b60723a15da7@mail.gmail.com>

Hello,

I am working with a C-target parser, and I have multiple instances of the
parser running in parallel.

Now I would like to stop the parser from printing error messages to stderr.
Instead, I would like each instance of the parser to collect
the error messages in a list of strings, so that the caller can access the
complete list of error messages after the parser finished
and decide what to do about them.

>From an example I found here:
http://groups.google.com/group/il-antlr-interest/browse_thread/thread/80ec25032e9af7a8?pli=1
I understand how members of the parser instance can be defined using
@parser::context and @parser::apifuncs, and that works
very well. So, let's say I defined a member

   error_list_t   *error_list

which points to some kind of dynamic list structure, and assume there is a
global function

  add_to_error_list(error_list_t *, const char* msg)

which can be used to add a new message to the list.

Now I wonder how can the error handling methods of ANTLR be modified to add
error messages to the list rather than printing them to stderr.

Looking at various sources on the internet, it seems there is a function
emitErrorMessage() which is called whenever an error occurs.
Taking that as a starting point, I have the following questions:

(1) Is that the right function to override? Or is there a better one?
(2) How exactly do I have to specifiy the override in the ANTLR grammar?
(3) How can I access the current instance of the parser from inside the
error handling function?
Remember that error_list must be a member of the parser, rather than a
global object, because I have several parsers operating in parallel.

Many thanks for any help.

johannes.

From tcorbat at hsr.ch  Mon May 10 07:46:59 2010
From: tcorbat at hsr.ch (tcorbat at hsr.ch)
Date: Mon, 10 May 2010 16:46:59 +0200
Subject: [antlr-interest] Modifying a tree node stream
Message-ID: <E1FBA77227279347B0AAEFA3C17DBC4836659547C0@sid00101.hsr.ch>

Hello

I've got a question about reparsing a rewritten rule in tree grammars. I'm currently working on a preprocessor (for C++). While I think I have solved the functional requirement I think there could be improvements regarding performance  - which I did not consider in the first place.

While preprocessing C++ code, there are macros to expand. After expanding a macro the replacement, together with the rest of the code, is rescanned for further macros to expand. Is there a neat way to implement such a behavior with a tree grammar?

In my current approach I have a lexer for tokenizing the files and a parser which creates an AST, introducing some structure. Basically, I perform the expansion of the macros in two tree grammars. One is generally for traversing the AST, created in the parser, determining which groups (lines of code) have to become output. The other is for expanding the macros.  The expanding grammar is invoked by the other, to perform all expansions.

So, after recognizing a group of code lines, which will become output of the preprocessor, an expander, taking these lines as input in tree-form, is created. The expander contains a rule, which consumes the next token (or several, if it is a function-like-macro call, including the arguments) and returns the replacement in tree-form. Since I have to reprocess the replacement and all following tokens, in case of an expanded macro, I take this result, together with the remaining nodes from the tree node stream and build a new stream to create a new expander. If there is no macro-expansion the printer just consumes the token und continues.

Now, I don't like creating a new stream every time a macro-expansion is encountered. Is there an alternative? Can I somehow mark the position in the current stream, perform the replacement in the stream, rewind the stream and start over with the expander?

Probably I got a bit narrow-minded while reading the C++ standard and trying to solve this problem and there could be a much easier approach.


I know my description might be a bit confusing, I'll try to explain it on a small example:

---
#define X Y
#define Y(a) a
X(2)
---
Primarily "X" gets expanded to "Y", resulting in "Y(2)". As "Y" is reprocessed, together with "(2)" it has to be expanded again, becoming "2"

The Lexer creates the Tokens for the Parser. The Parser creates an AST. The Printer traverses that AST. When it comes to the line "X(2)" which has to be expanded an Expander is created, with the subtree representing "X(2)" as input. The Printer invokes the "expand" rule of the Expander and receives the replacement for "X": "Y". Currently, the Printer reads the rest of the stream "(2)", appends it to the replacement, resulting in "Y(2)" and creates a new stream and Expander for this input and reinvokes the "expand" rule.
Is it possible to modify the node stream of the expander, instead of creating a new one?

I hope I did not confuse everybody with my problem.
I appreciate every answer.

Regards,
Thomas

From jimi at temporal-wave.com  Mon May 10 10:07:14 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 10 May 2010 10:07:14 -0700
Subject: [antlr-interest] Error handling using parallel instances of a
	C-target parser
In-Reply-To: <l2q67666dea1005092304j8b698e64uc6d3b60723a15da7@mail.gmail.com>
Message-ID: <c7191a70da9dde4d9d04acd3aa760f88@temporal-wave.com>

Use antlr.markmail.org and look for displayRecognitionError. Remember that if you have parallel threads, you will want the error collections to be thread instances, not global members. Therefore you add them as context members @apifuncs etc.

http://antlr.markmail.org/search/?q=apifuncs#

http://antlr.markmail.org/search/?q=displayRecognitionError+C


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Johannes Goller
> Sent: Sunday, May 09, 2010 11:05 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Error handling using parallel instances of a
> C-target parser
> 
> Hello,
> 
> I am working with a C-target parser, and I have multiple instances of
> the
> parser running in parallel.
> 
> Now I would like to stop the parser from printing error messages to
> stderr.
> Instead, I would like each instance of the parser to collect
> the error messages in a list of strings, so that the caller can access
> the
> complete list of error messages after the parser finished
> and decide what to do about them.
> 
> >From an example I found here:
> http://groups.google.com/group/il-antlr-
> interest/browse_thread/thread/80ec25032e9af7a8?pli=1
> I understand how members of the parser instance can be defined using
> @parser::context and @parser::apifuncs, and that works
> very well. So, let's say I defined a member
> 
>    error_list_t   *error_list
> 
> which points to some kind of dynamic list structure, and assume there
> is a
> global function
> 
>   add_to_error_list(error_list_t *, const char* msg)
> 
> which can be used to add a new message to the list.
> 
> Now I wonder how can the error handling methods of ANTLR be modified to
> add
> error messages to the list rather than printing them to stderr.
> 
> Looking at various sources on the internet, it seems there is a
> function
> emitErrorMessage() which is called whenever an error occurs.
> Taking that as a starting point, I have the following questions:
> 
> (1) Is that the right function to override? Or is there a better one?
> (2) How exactly do I have to specifiy the override in the ANTLR
> grammar?
> (3) How can I access the current instance of the parser from inside the
> error handling function?
> Remember that error_list must be a member of the parser, rather than a
> global object, because I have several parsers operating in parallel.
> 
> Many thanks for any help.
> 
> johannes.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From anteusz at freemail.hu  Mon May 10 11:00:07 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Mon, 10 May 2010 20:00:07 +0200
Subject: [antlr-interest] Error handling using parallel instances of a
 C-target parser
In-Reply-To: <c7191a70da9dde4d9d04acd3aa760f88@temporal-wave.com>
References: <c7191a70da9dde4d9d04acd3aa760f88@temporal-wave.com>
Message-ID: <4BE849A7.9040806@freemail.hu>

5/10/2010 7:07 PM keltez?ssel, Jim Idle ?rta:
> Use antlr.markmail.org and look for displayRecognitionError. Remember that if you have parallel threads, you will want the error collections to be thread instances, not global members. Therefore you add them as context members @apifuncs etc.
>
> http://antlr.markmail.org/search/?q=apifuncs#
>
> http://antlr.markmail.org/search/?q=displayRecognitionError+C
>
>
> Jim
>
>    
Hi,
I tried this method too in C#..
I overrode
displayRecognitionError but I can still see some error message printed by

this code:
if (parser.TokenStream.LT(1) == Token.EOF_TOKEN)
return -1;

Marton


From andersen at highfleet.com  Mon May 10 12:53:33 2010
From: andersen at highfleet.com (Bill Andersen)
Date: Mon, 10 May 2010 15:53:33 -0400
Subject: [antlr-interest] Stringtemplate : conditional expansion based on
	template type
Message-ID: <DFE1F8AA-3CB3-4DA9-819A-814C5188B60D@highfleet.com>

Hi folks

I'd like to do something like the following with these template definitions

A() ::= <<
>>

B() ::= <<
>>

C(template_arg) ::= <<
// if value of template_arg is an instance of A
//    expand this way
// else if value of template_arg is an instance of B
//    expand some other way
>>

Question - is querying the type of a template passed as a parameter a legitimate predicate in an <if ...> construct?

	.bill

Bill Andersen 
Highfleet, Inc. (www.highfleet.com)
3600 O'Donnell Street, Suite 600
Baltimore, MD 21224
Office: +1.410.675.1201
Cell: +1.443.858.6444
Fax: +1.410.675.1204






From Jane.Eisenstein at MEDecision.com  Mon May 10 13:38:14 2010
From: Jane.Eisenstein at MEDecision.com (Jane Eisenstein)
Date: Mon, 10 May 2010 16:38:14 -0400
Subject: [antlr-interest] unable to run or debug grammar in antlrworks 1.4
	on Windows XP
Message-ID: <D4E264EF9655CF42A7186E4757C7E9292D5721962E@CWPPR-E2K7MBX-1.medecision.com>

I've been using the Snow Leopard version of antlrworks to develop and run a simple grammar. At work, I only have Windows XP and am running into problems trying to run/debug the grammar with the MS Windows version of antlrworks. I'm using sun's jdk1.6.0_17.

Selecting Run/Run... results in this console message: TODO: run and send output to this console
Is this command not supported under MS Windows?

Also, trying to debug results in an alert stating:
Cannot launch the debugger Tab. Time-out waiting to connect to the remote parser.
Running netstat -aon | find /i "49100" returns no results

Is there something I can do to correct these problems?



--------------------------------------------------------------------------------------
The information transmitted is intended only for the person or entity to 
which it is addressed and may contain confidential and/or privileged 
material. Any review, retransmission, dissemination or other use of, or 
taking of any action in reliance upon, this information by persons or 
entities other than the intended recipient is prohibited. If you received 
this message in error, please contact the sender and delete the material 
from any computer.
--------------------------------------------------------------------------------------


From kaleb.pederson at gmail.com  Mon May 10 15:51:29 2010
From: kaleb.pederson at gmail.com (Kaleb Pederson)
Date: Mon, 10 May 2010 15:51:29 -0700
Subject: [antlr-interest] GUnit testsuite Run / Debug Configuration for
	Eclipse
Message-ID: <201005101551.29545.kaleb.pederson@gmail.com>

Does anybody know of an easy way to run gunit tests within Eclipse, hopefully 
in a way that will allow them to be picked up as tests?

Last I checked, there is no JUnit code generator option for the maven-gunit-
plugin, and I believe it's still using JUnit 3.

I'm running the ANTLR IDE Eclipse plugin (thanks Edgar!), but to my knowledge 
it doesn't add any options in this area.

Thanks for any suggestions.

--
Kaleb Pederson

Blog - http://kalebpederson.com
Twitter - http://twitter.com/kalebpederson

From Stefan.Chrobot at sabre.com  Tue May 11 02:17:25 2010
From: Stefan.Chrobot at sabre.com (Chrobot, Stefan)
Date: Tue, 11 May 2010 10:17:25 +0100
Subject: [antlr-interest] ANTLR performance
Message-ID: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>

Hi,

 

I'm using ANTLR with the C# target. The generated parser performs too
slow for my needs. My grammar uses k = 6.

Does it have a performance impact? What value should I target to get
optimum performance - 1 or *? Would changing the grammar to 1/* give
significant performance boost?

 

 

Stefan


From matianyi at legendapl.com  Tue May 11 02:37:08 2010
From: matianyi at legendapl.com (Terry Ma)
Date: Tue, 11 May 2010 18:37:08 +0900
Subject: [antlr-interest] newbie, need help!
Message-ID: <hsb8g5$58g$1@dough.gmane.org>

hello, everyone.

I want to parse the statement like following:

any character <#if expression> any character </#if> any character

I want to consume any character until find <#if ...>,
and then consume any character until find next </#if>,
and so on.

can i use antlr to do this?
i don't know how to write the grammar to parse the above statement.


Terry.


From anteusz at freemail.hu  Tue May 11 02:47:09 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Tue, 11 May 2010 11:47:09 +0200
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
Message-ID: <4BE9279D.5080304@freemail.hu>

5/11/2010 11:17 AM keltez?ssel, Chrobot, Stefan ?rta:
> Hi,
>
>
>
> I'm using ANTLR with the C# target. The generated parser performs too
> slow for my needs. My grammar uses k = 6.
>
> Does it have a performance impact? What value should I target to get
> optimum performance - 1 or *? Would changing the grammar to 1/* give
> significant performance boost?
>
>
>
>
>
> Stefan
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>    
Could you try it yourself?
I mean test it. I would be interested in your results too..


Marton


From Stefan.Chrobot at sabre.com  Tue May 11 03:26:53 2010
From: Stefan.Chrobot at sabre.com (Chrobot, Stefan)
Date: Tue, 11 May 2010 11:26:53 +0100
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <4BE9279D.5080304@freemail.hu>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
	<4BE9279D.5080304@freemail.hu>
Message-ID: <664A13B770987A4BB77A103AF4174ECC0441A6BF@sglonms01.Global.ad.sabre.com>

>> I'm using ANTLR with the C# target. The generated parser performs too
>> slow for my needs. My grammar uses k = 6.
>>
>> Does it have a performance impact? What value should I target to get
>> optimum performance - 1 or *? Would changing the grammar to 1/* give
>> significant performance boost?
>>
>>    
>Could you try it yourself?
>I mean test it. I would be interested in your results too..


It would probably take a good amount of time to change the grammar and
the actions. I can't invest my time in that. Even more, since I found
that the real performance bottleneck is in my case the use of rewrite
rules, TokenRewriteStream and StringTemplate. I got about 100x
performance boost after disabling the rewriting (leaving my actions in
place). I guess I'll have to do the outputting myself. This will be a
costly task (both implementation and performance-wise), but I suspect
(and truly hope) to get something like 50x performance improvement from
the original solution.


Stefan

From anteusz at freemail.hu  Tue May 11 03:42:58 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Tue, 11 May 2010 12:42:58 +0200
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <664A13B770987A4BB77A103AF4174ECC0441A6BF@sglonms01.Global.ad.sabre.com>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>	<4BE9279D.5080304@freemail.hu>
	<664A13B770987A4BB77A103AF4174ECC0441A6BF@sglonms01.Global.ad.sabre.com>
Message-ID: <4BE934B2.7080005@freemail.hu>

5/11/2010 12:26 PM keltez?ssel, Chrobot, Stefan ?rta:
>>> I'm using ANTLR with the C# target. The generated parser performs too
>>> slow for my needs. My grammar uses k = 6.
>>>
>>> Does it have a performance impact? What value should I target to get
>>> optimum performance - 1 or *? Would changing the grammar to 1/* give
>>> significant performance boost?
>>>
>>>
>>>        
>> Could you try it yourself?
>> I mean test it. I would be interested in your results too..
>>      
>
> It would probably take a good amount of time to change the grammar and
> the actions. I can't invest my time in that. Even more, since I found
> that the real performance bottleneck is in my case the use of rewrite
> rules, TokenRewriteStream and StringTemplate. I got about 100x
> performance boost after disabling the rewriting (leaving my actions in
> place). I guess I'll have to do the outputting myself. This will be a
> costly task (both implementation and performance-wise), but I suspect
> (and truly hope) to get something like 50x performance improvement from
> the original solution.
>
>
> Stefan
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>    
What kind of speed is slow for you? How big are the files that you analyse?

Marton


From Stefan.Chrobot at sabre.com  Tue May 11 04:34:25 2010
From: Stefan.Chrobot at sabre.com (Chrobot, Stefan)
Date: Tue, 11 May 2010 12:34:25 +0100
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <4BE934B2.7080005@freemail.hu>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>	<4BE9279D.5080304@freemail.hu><664A13B770987A4BB77A103AF4174ECC0441A6BF@sglonms01.Global.ad.sabre.com>
	<4BE934B2.7080005@freemail.hu>
Message-ID: <664A13B770987A4BB77A103AF4174ECC0441A714@sglonms01.Global.ad.sabre.com>

>>>> I'm using ANTLR with the C# target. The generated parser performs
too
>>>> slow for my needs. My grammar uses k = 6.
>>>>
>>>> Does it have a performance impact? What value should I target to
get
>>>> optimum performance - 1 or *? Would changing the grammar to 1/*
give
>>>> significant performance boost?
>>>>        
>>> Could you try it yourself?
>>> I mean test it. I would be interested in your results too..
>>>      
>>
>> It would probably take a good amount of time to change the grammar
and
>> the actions. I can't invest my time in that. Even more, since I found
>> that the real performance bottleneck is in my case the use of rewrite
>> rules, TokenRewriteStream and StringTemplate. I got about 100x
>> performance boost after disabling the rewriting (leaving my actions
in
>> place). I guess I'll have to do the outputting myself. This will be a
>> costly task (both implementation and performance-wise), but I suspect
>> (and truly hope) to get something like 50x performance improvement
from
>> the original solution.
>>
>What kind of speed is slow for you? How big are the files that you
analyse?

For my needs, 10 seconds is definitely too much for a 25KB input. I'm
shooting for up to 0.5sec.


Stefan

From marcin.rzeznicki at gmail.com  Tue May 11 05:22:35 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 11 May 2010 14:22:35 +0200
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <664A13B770987A4BB77A103AF4174ECC0441A714@sglonms01.Global.ad.sabre.com>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
	<4BE9279D.5080304@freemail.hu>
	<664A13B770987A4BB77A103AF4174ECC0441A6BF@sglonms01.Global.ad.sabre.com>
	<4BE934B2.7080005@freemail.hu>
	<664A13B770987A4BB77A103AF4174ECC0441A714@sglonms01.Global.ad.sabre.com>
Message-ID: <AANLkTimTWdSmKGlva1iABuyCKXyNejIvPHMYuUFdNLWA@mail.gmail.com>

On Tue, May 11, 2010 at 1:34 PM, Chrobot, Stefan
<Stefan.Chrobot at sabre.com> wrote:
>>>>> I'm using ANTLR with the C# target. The generated parser performs
> too
>>>>> slow for my needs. My grammar uses k = 6.
>>>>>
>>>>> Does it have a performance impact? What value should I target to
> get
>>>>> optimum performance - 1 or *? Would changing the grammar to 1/*
> give
>>>>> significant performance boost?
>>>>>
>>>> Could you try it yourself?
>>>> I mean test it. I would be interested in your results too..
>>>>
>>>
>>> It would probably take a good amount of time to change the grammar
> and
>>> the actions. I can't invest my time in that. Even more, since I found
>>> that the real performance bottleneck is in my case the use of rewrite
>>> rules, TokenRewriteStream and StringTemplate. I got about 100x
>>> performance boost after disabling the rewriting (leaving my actions
> in
>>> place). I guess I'll have to do the outputting myself. This will be a
>>> costly task (both implementation and performance-wise), but I suspect
>>> (and truly hope) to get something like 50x performance improvement
> from
>>> the original solution.
>>>
>>What kind of speed is slow for you? How big are the files that you
> analyse?
>
> For my needs, 10 seconds is definitely too much for a 25KB input. I'm
> shooting for up to 0.5sec.
>
>

Hi
I have never cared about parsing performance that much, so there is a
chance that my comment here will be useless to you, measure yourself:
So, having said that, I have generally observed that automatic tree
construction is kind of slow (though it's been ok for my use cases) -
basically, if that's feasible, I rather try to implement my own trees
using visitor pattern/and or specific tree structures that are aligned
to what I need. Also, default CharStream/TokenStream implementations
may not be what you want. See for example how it implements
mark/release. I gained once a lot of speedup implementing my own line
counting and got rid of its state keeping in mark/release, I used
simple table of line endings positions with binary search. There are
lot of things to tailor. Also I try not to use mechanism which buffers
file input at once - but that might not prove to be big gain to you
(if you assume that most of your input is correct then it will
probably not be, if you assume otherwise than it may be). Let us know
how it goes.


-- 
Greetings
Marcin Rze?nicki

From marcin.rzeznicki at gmail.com  Tue May 11 05:24:41 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 11 May 2010 14:24:41 +0200
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <AANLkTimTWdSmKGlva1iABuyCKXyNejIvPHMYuUFdNLWA@mail.gmail.com>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
	<4BE9279D.5080304@freemail.hu>
	<664A13B770987A4BB77A103AF4174ECC0441A6BF@sglonms01.Global.ad.sabre.com>
	<4BE934B2.7080005@freemail.hu>
	<664A13B770987A4BB77A103AF4174ECC0441A714@sglonms01.Global.ad.sabre.com>
	<AANLkTimTWdSmKGlva1iABuyCKXyNejIvPHMYuUFdNLWA@mail.gmail.com>
Message-ID: <AANLkTim1JrWAOyCuWWjfx-4hyqBJfiTnCJ3mpsy6Sckl@mail.gmail.com>

>
> Hi

PS. I am talking about Java parser, you need to check if c# parser is
different. Sorry, I did not notice this in the first place.

-- 
Greetings
Marcin Rze?nicki

From anteusz at freemail.hu  Tue May 11 06:14:49 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Tue, 11 May 2010 15:14:49 +0200
Subject: [antlr-interest] newbie, need help!
In-Reply-To: <hsb8g5$58g$1@dough.gmane.org>
References: <hsb8g5$58g$1@dough.gmane.org>
Message-ID: <4BE95849.6010308@freemail.hu>

5/11/2010 11:37 AM keltez?ssel, Terry Ma ?rta:
> hello, everyone.
>
> I want to parse the statement like following:
>
> any character<#if expression>  any character</#if>  any character
>
> I want to consume any character until find<#if ...>,
> and then consume any character until find next</#if>,
> and so on.
>
> can i use antlr to do this?
> i don't know how to write the grammar to parse the above statement.
>
>
> Terry.
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>    
Do you mean something like this:

grammar if;


start_rule    : anythingbefore anythinguntilclosingif;

anythingbefore:  ( options {greedy=false;} : . )* '<#if';


anythinguntilclosingif
     :    ( options {greedy=false;} : . )* '</#if>';


Marton


From ldelara at affsys.com  Tue May 11 07:35:20 2010
From: ldelara at affsys.com (Lorenzo de Lara)
Date: Tue, 11 May 2010 14:35:20 +0000
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
Message-ID: <6E1EB951-0881-42F8-9B3A-6AD0E5F92D7B@affsys.com>

I have noticed the same thing with rewrite=true and came upon this bug report from 2008, which is currently still open:

http://www.antlr.org/jira/browse/ANTLR-371

The problem is parsers with rewrite rules run in non-linear time on any inputs above a few hundred rewrites. I've verified this in both Java and C#. You can verify this for yourself by commenting out your rewrite rules and running the parser and observing much closer to linear runtime. (5 minutes with rewrite rules on vs. 5 seconds rewrite rules off on a typical 1500 line input for us) The offending method is GetKindOfOps in TokenRewriteStream taking up to 100% of the runtime according to a Java profiling tool.

I've implemented the proposed fix (in Java) which does away with calling GetKindOfOps completely and can confirm it does result in much more reasonable, linear-like performance, without introducing any new problems, as far as I can tell.

-Lorenzo

On 2010-05-11, at 5:17 , Chrobot, Stefan wrote:

Hi,



I'm using ANTLR with the C# target. The generated parser performs too
slow for my needs. My grammar uses k = 6.

Does it have a performance impact? What value should I target to get
optimum performance - 1 or *? Would changing the grammar to 1/* give
significant performance boost?





Stefan


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From Stefan.Chrobot at sabre.com  Tue May 11 07:46:30 2010
From: Stefan.Chrobot at sabre.com (Chrobot, Stefan)
Date: Tue, 11 May 2010 15:46:30 +0100
Subject: [antlr-interest] ANTLR performance
In-Reply-To: <6E1EB951-0881-42F8-9B3A-6AD0E5F92D7B@affsys.com>
References: <664A13B770987A4BB77A103AF4174ECC0441A675@sglonms01.Global.ad.sabre.com>
	<6E1EB951-0881-42F8-9B3A-6AD0E5F92D7B@affsys.com>
Message-ID: <664A13B770987A4BB77A103AF4174ECC0441A818@sglonms01.Global.ad.sabre.com>

Thanks for your response, Lorenzo!

This is exactly what's happening with my code.
I dropped the rewriting and created my own mechanism. The running time
dropped from ~10.00sec to ~00.10sec. Below I present my solution.


Stefan


1) I created a custom token class:
internal class CustomToken : CommonToken
{
    private string myText;

    public CustomToken(ICharStream input, int type, int channel, int
start, int stop)
        : base(input, type, channel, start, stop)
    {
    }

    public void ParseAs(string text)
    {
        myText = text;
    }

    public override string Text
    {
        get
        {
            return myText ?? base.Text;
        }
        set
        {
            base.Text = value;
        }
    }
}

2) Made lexer emit CustomTokens:
public override IToken Emit()
{
    var token = new CustomToken(this.input, base.state.type,
base.state.channel, base.state.tokenStartCharIndex, this.CharIndex - 1);
    token.Line = base.state.tokenStartLine;
    token.Text = base.state.text;
    token.CharPositionInLine = base.state.tokenStartCharPositionInLine;
    this.Emit(token);
    return token;
}	

3) Added "rewrite" method to the parser:
private void ParseAs(CustomToken start, string text)
{
    start.ParseAs(text);

    var stop = (CustomToken)input.LT(-1);
    for (int i = start.TokenIndex + 1; i <= stop.TokenIndex; ++i)
    {
        var token = (CustomToken)input.Get(i);
        token.ParseAs("");
    }
}

4) Set grammar option:
TokenLabelType = CustomToken;


Usage:

assignment
	:	ID '=' INT	{ ParseAs($assignment.start,
"<assignment>"); }
	;



-----Original Message-----
From: Lorenzo de Lara [mailto:ldelara at affsys.com] 
Sent: Tuesday, May 11, 2010 4:35 PM
To: Chrobot, Stefan
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] ANTLR performance

I have noticed the same thing with rewrite=true and came upon this bug
report from 2008, which is currently still open:

http://www.antlr.org/jira/browse/ANTLR-371

The problem is parsers with rewrite rules run in non-linear time on any
inputs above a few hundred rewrites. I've verified this in both Java and
C#. You can verify this for yourself by commenting out your rewrite
rules and running the parser and observing much closer to linear
runtime. (5 minutes with rewrite rules on vs. 5 seconds rewrite rules
off on a typical 1500 line input for us) The offending method is
GetKindOfOps in TokenRewriteStream taking up to 100% of the runtime
according to a Java profiling tool.

I've implemented the proposed fix (in Java) which does away with calling
GetKindOfOps completely and can confirm it does result in much more
reasonable, linear-like performance, without introducing any new
problems, as far as I can tell.

-Lorenzo

On 2010-05-11, at 5:17 , Chrobot, Stefan wrote:

Hi,



I'm using ANTLR with the C# target. The generated parser performs too
slow for my needs. My grammar uses k = 6.

Does it have a performance impact? What value should I target to get
optimum performance - 1 or *? Would changing the grammar to 1/* give
significant performance boost?





Stefan


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From acondit at ipns.com  Tue May 11 09:13:31 2010
From: acondit at ipns.com (Alan Condit)
Date: Tue, 11 May 2010 09:13:31 -0700
Subject: [antlr-interest] Directory organization
Message-ID: <6B021628-9F8C-481D-8B2A-B3D4117108F7@ipns.com>

I am running a Mac with OS X 10.6.

I have built a grammar under Antlrworks and have it compiling in my project with Objective-C. I am currently using "language=C".  It is a real pain in the butt to have to go delete the parser and lexer '.m' files and rename the '.c' files to '.m' every time I do code generation under Antlrworks. 

I downloaded the tarball for Antlr-3.2 and unpacked it in my "source" directory. In looking at the documentation on code generation targets, the directories from the source tarball don't seem to come close to the directories discussed on the wiki documentation pages. 

I have the last two books by Terrance Parr also but I am not finding any good info on getting started on modifying template files and using them from within Antlrworks.

I have found the C templates and where to modify them to generate .m files that I need instead of .c files they now generate. Now I just need to figure out how to get Antlrworks/Antlr to use them instead of the ones in the jar.

Help please!

Thanks,
Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From jimi at temporal-wave.com  Tue May 11 10:25:02 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 11 May 2010 10:25:02 -0700
Subject: [antlr-interest] Directory organization
In-Reply-To: <6B021628-9F8C-481D-8B2A-B3D4117108F7@ipns.com>
Message-ID: <f6467cad83debe41a3e4937b99132fdd@temporal-wave.com>

Modify CTarget.java (if you need to in any way) and the templates, then install Maven. Find the pom.xml file in the main directory and read the BUILD.TXT file that is there.

You can also set the classpath to include the path of your template before anything else and it should load your template rather than the one in the jar (or at least it used to ;), but if you want to change the output file names, then it is easier to rebuild your own jar and use that.

I thought objective C could use any suffix though just like gcc (but you have to tell it that it is a C file). That might be easier than changing the output templates. Also, when using as part of a build, you could just add the rename to the Makefile.

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Tuesday, May 11, 2010 9:14 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Directory organization
> 
> I am running a Mac with OS X 10.6.
> 
> I have built a grammar under Antlrworks and have it compiling in my
> project with Objective-C. I am currently using "language=C".  It is a
> real pain in the butt to have to go delete the parser and lexer '.m'
> files and rename the '.c' files to '.m' every time I do code generation
> under Antlrworks.
> 
> I downloaded the tarball for Antlr-3.2 and unpacked it in my "source"
> directory. In looking at the documentation on code generation targets,
> the directories from the source tarball don't seem to come close to the
> directories discussed on the wiki documentation pages.
> 
> I have the last two books by Terrance Parr also but I am not finding
> any good info on getting started on modifying template files and using
> them from within Antlrworks.
> 
> I have found the C templates and where to modify them to generate .m
> files that I need instead of .c files they now generate. Now I just
> need to figure out how to get Antlrworks/Antlr to use them instead of
> the ones in the jar.
> 
> Help please!
> 
> Thanks,
> Alan
> ---
> 
> Alan Condit
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at ipns.com
> Home-Office (503) 982-0906
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From dr.jaymahdi at gmail.com  Tue May 11 11:58:29 2010
From: dr.jaymahdi at gmail.com (DR JAYMAHDI)
Date: Tue, 11 May 2010 14:58:29 -0400
Subject: [antlr-interest] Problems compiling with C target with example
Message-ID: <AANLkTinDoNDe-iKjxS6vtNgu1lSq3wLCGCbKxczhqcgb@mail.gmail.com>

Hi:

I am currently having some problems compiling the C target example based on
this famous link:
http://www.antlr.org/wiki/display/ANTLR3/Five+minute+introduction+to+ANTLR+3--
which I found very useful. I have some problems however, trying to
properly compile this using g++ since the targeted C code will be used for
my C++ development.

I basically copied/pasted the code (as verbatim) from that webpage into the
Antlrworks 3.2 (just released today). The C runtime library file I used is:
libantlr3c-3.2.tar.gz. I followed the instructions listed here (
http://www.antlr.org/api/C/build.html) and did a ./configure --enable-64bit
since I am using a 64bit OS. I generated the parser files from the
Antlrworks, as expected. I did a compile gcc *.c -lantlr3c -o parser_example
which produced no errors.

However, as I tried ./parser_example, it gave me the message "error while
loading shared libraries: libantlr3c.so: cannot open shared object file: No
such file or directory". I was able to locate the libantlr3c.so which was in
my /usr/local/lib directory. So I created a symbolic link using sudo ln -s
/usr/local/lib libantlr3c.so into my /usr/lib directory. Problem slightly
solved but now I have a segmentation fault everytime I run ./parser_example
.

I did not modify the generated parser files in anyway to cause this problem.
So I am not sure why it is accessing the wrong memory address location.

So if someone could please help me with this (hopefully simple?) problem,
it'll be greatly appreciated.

Thanks in advanced,

Jay

From acondit at ipns.com  Tue May 11 13:02:32 2010
From: acondit at ipns.com (Alan Condit)
Date: Tue, 11 May 2010 13:02:32 -0700
Subject: [antlr-interest] Directory organization
In-Reply-To: <mailman.1.1273604401.12766.antlr-interest@antlr.org>
References: <mailman.1.1273604401.12766.antlr-interest@antlr.org>
Message-ID: <335E5B35-132B-40E1-8880-C0DEB7964E82@ipns.com>

Jim,

I have never built anything before with Java, so when you say "set the classpath to include the path of your template" I guess that I am trying to find out where to do that. The antlr-3.2 jar is inside the antlrworks package. I have built a lot of unix tools in the terminal environment and set environment variables but I have never had to set a path variable in the OS X graphics environment.

It is part of a multi-source project built under xcode. The xcode build rules expect (require) that a file end with '.m' to compile as an Objective-C file. Since I am calling Objective-C methods in the parser, I have to compile it as an Objective-C source, hence it needs to be a '.m' file. There isn't a 'makefile' in the conventional sense. Also I have c-files that have to be compiled as c-files so I can't just change the build rules willy-nilly. If I can avoid learning yet another language 'Java' to solve my problem, that would be my preference.

Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906

On May 11, 2010, at 12:00 PM, antlr-interest-request at antlr.org wrote:
> Message: 16
> Date: Tue, 11 May 2010 10:25:02 -0700
> From: "Jim Idle" <jimi at temporal-wave.com>
> Subject: Re: [antlr-interest] Directory organization
> To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Message-ID: <f6467cad83debe41a3e4937b99132fdd at temporal-wave.com>
> Content-Type: text/plain;	charset="us-ascii"
> 
> Modify CTarget.java (if you need to in any way) and the templates, then install Maven. Find the pom.xml file in the main directory and read the BUILD.TXT file that is there.
> 
> You can also set the classpath to include the path of your template before anything else and it should load your template rather than the one in the jar (or at least it used to ;), but if you want to change the output file names, then it is easier to rebuild your own jar and use that.
> 
> I thought objective C could use any suffix though just like gcc (but you have to tell it that it is a C file). That might be easier than changing the output templates. Also, when using as part of a build, you could just add the rename to the Makefile.
> 
> Jim
> 
> 
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Alan Condit
>> Sent: Tuesday, May 11, 2010 9:14 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Directory organization
>> 
>> I am running a Mac with OS X 10.6.
>> 
>> I have built a grammar under Antlrworks and have it compiling in my
>> project with Objective-C. I am currently using "language=C".  It is a
>> real pain in the butt to have to go delete the parser and lexer '.m'
>> files and rename the '.c' files to '.m' every time I do code generation
>> under Antlrworks.
>> 
>> I downloaded the tarball for Antlr-3.2 and unpacked it in my "source"
>> directory. In looking at the documentation on code generation targets,
>> the directories from the source tarball don't seem to come close to the
>> directories discussed on the wiki documentation pages.
>> 
>> I have the last two books by Terrance Parr also but I am not finding
>> any good info on getting started on modifying template files and using
>> them from within Antlrworks.
>> 
>> I have found the C templates and where to modify them to generate .m
>> files that I need instead of .c files they now generate. Now I just
>> need to figure out how to get Antlrworks/Antlr to use them instead of
>> the ones in the jar.
>> 
>> Help please!
>> 
>> Thanks,
>> Alan
>> ---
>> 
>> Alan Condit
>> 1085 Tierra Ct.
>> Woodburn, OR 97071
>> 
>> Email -- acondit at ipns.com
>> Home-Office (503) 982-0906


From julio at rochsquadron.net  Tue May 11 15:41:13 2010
From: julio at rochsquadron.net (=?UTF-8?Q?Julio_C=C3=A9sar_Rocha?=)
Date: Tue, 11 May 2010 17:41:13 -0500
Subject: [antlr-interest] ANTLRWorks 1.4 released
Message-ID: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>

Even since version 1.3.1, the console displays errors for every single key
stroke on the grammar code until it is syntactically correct. this is quite
bugging because you have to clear the console messages often. How can we
disable this behaviour?

From parrt at cs.usfca.edu  Tue May 11 18:27:46 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 May 2010 18:27:46 -0700
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
References: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
Message-ID: <2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>

Hi. i have heard of this but it never happens to me.  is this windoze?  
Mac? linux? which java version?
T
On May 11, 2010, at 3:41 PM, Julio C?sar Rocha wrote:

> Even since version 1.3.1, the console displays errors for every  
> single key
> stroke on the grammar code until it is syntactically correct. this  
> is quite
> bugging because you have to clear the console messages often. How  
> can we
> disable this behaviour?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From wclodius at los-alamos.net  Tue May 11 20:05:11 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Tue, 11 May 2010 21:05:11 -0600
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
References: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
	<2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
Message-ID: <C7B4FFBB-98F8-4E91-8556-90134A56EA8E@los-alamos.net>


On May 11, 2010, at 7:27 PM, Terence Parr wrote:

> Hi. i have heard of this but it never happens to me.  is this windoze?  
> Mac? linux? which java version?
> T
<snip>

I have complained in the past. It still happens for me in ANTLRWorks 4.1, Mac OS X 10.6.3, Javac, whichever version is the default for 10.6.3. To me it has to be in the ANTLRWorks code. Does it have very different code depending on OS/Java version?

From julio at rochsquadron.net  Tue May 11 21:37:45 2010
From: julio at rochsquadron.net (=?UTF-8?Q?Julio_C=C3=A9sar_Rocha?=)
Date: Tue, 11 May 2010 23:37:45 -0500
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
References: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
	<2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
Message-ID: <AANLkTil1hZq-b-FGoZBzONoi9lgPjdxuXMEXJKectfoh@mail.gmail.com>

Sun Java 1.6, on Windows XP, Vista, 7, Mac OS X 10.6. I'll attach details
tomorrow.

From sivaits4u at gmail.com  Wed May 12 01:30:37 2010
From: sivaits4u at gmail.com (Bujji)
Date: Wed, 12 May 2010 14:00:37 +0530
Subject: [antlr-interest] scala support for ANTLR
Message-ID: <AANLkTikiCIh3zE58wxlosnRAxx3cimtGgb4XhH_UPCqR@mail.gmail.com>

Hi all,
Is there any support for scala in ANTLR..

i want to use scala as target language

is it possible ?
if so plz give me links or examples ....

plz help...

Thanks
Bujji

From marcin.rzeznicki at gmail.com  Wed May 12 01:43:44 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Wed, 12 May 2010 10:43:44 +0200
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <C7B4FFBB-98F8-4E91-8556-90134A56EA8E@los-alamos.net>
References: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
	<2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
	<C7B4FFBB-98F8-4E91-8556-90134A56EA8E@los-alamos.net>
Message-ID: <AANLkTil5oiK4nv0JOzAP1Cn6MMKVU9AD5Ws1tfoEKqgi@mail.gmail.com>

On Wed, May 12, 2010 at 5:05 AM, William B. Clodius
<wclodius at los-alamos.net> wrote:
>
> On May 11, 2010, at 7:27 PM, Terence Parr wrote:
>
>> Hi. i have heard of this but it never happens to me. ?is this windoze?
>> Mac? linux? which java version?
>> T
> <snip>
>
> I have complained in the past. It still happens for me in ANTLRWorks 4.1, Mac OS X 10.6.3, Javac, whichever version is the default for 10.6.3. To me it has to be in the ANTLRWorks code. Does it have very different code depending on OS/Java version?

Same here. Tested on two systems - Vista + Sun 1.6.18, Fedora 12 +
Open JDK 1.6.0

-- 
Greetings
Marcin Rze?nicki

From anteusz at freemail.hu  Wed May 12 02:13:29 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Wed, 12 May 2010 11:13:29 +0200
Subject: [antlr-interest] ANTLR1.4 crashes a lot
In-Reply-To: <AANLkTikiCIh3zE58wxlosnRAxx3cimtGgb4XhH_UPCqR@mail.gmail.com>
References: <AANLkTikiCIh3zE58wxlosnRAxx3cimtGgb4XhH_UPCqR@mail.gmail.com>
Message-ID: <4BEA7139.6050400@freemail.hu>

Hi,

I am on Windows 7. Antlr keeps crashing when I try to deubg something.
It does not crash every time but there is a probability to it. Let us 
say every 5th time.
Does anyone know about it?

Marton


From Gordon.Tyler at quest.com  Wed May 12 06:39:05 2010
From: Gordon.Tyler at quest.com (Gordon Tyler)
Date: Wed, 12 May 2010 06:39:05 -0700
Subject: [antlr-interest] scala support for ANTLR
In-Reply-To: <AANLkTikiCIh3zE58wxlosnRAxx3cimtGgb4XhH_UPCqR@mail.gmail.com>
References: <AANLkTikiCIh3zE58wxlosnRAxx3cimtGgb4XhH_UPCqR@mail.gmail.com>
Message-ID: <1FE9A296676737419A8912A6FD22AE1D027A2BF726@alvxmbw04.prod.quest.corp>

You should be able to use the Java target since Java classes can be used from Scala.

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Bujji
Sent: May 12, 2010 4:31 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] scala support for ANTLR

Hi all,
Is there any support for scala in ANTLR..

i want to use scala as target language

is it possible ?
if so plz give me links or examples ....

plz help...

Thanks
Bujji

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From pchapin at cems.uvm.edu  Wed May 12 09:07:51 2010
From: pchapin at cems.uvm.edu (Peter C. Chapin)
Date: Wed, 12 May 2010 12:07:51 -0400
Subject: [antlr-interest] scala support for ANTLR
In-Reply-To: <AANLkTikiCIh3zE58wxlosnRAxx3cimtGgb4XhH_UPCqR@mail.gmail.com>
References: <AANLkTikiCIh3zE58wxlosnRAxx3cimtGgb4XhH_UPCqR@mail.gmail.com>
Message-ID: <1273680471.30043.3.camel@dustdevil.cis.vtc.edu>

On Wed, 2010-05-12 at 14:00 +0530, Bujji wrote:

> Hi all,
> Is there any support for scala in ANTLR..
> 
> i want to use scala as target language

I'm working on a language translation project using Scala. I use the
Java target of ANTLR and call into it from Scala code. It seems to work
fine.

In my case I run the AST produced by ANTLR through a method of my own
construction that converts it into an instance of a suitable case class.
I do this so I can use Scala pattern matching on the abstract syntax
tree. It's a bit of a pain and it would be nice if there was a real
Scala target for ANTLR, but what I'm doing is workable for me (so far
anyway!).

Peter



From pchapin at cems.uvm.edu  Wed May 12 09:10:06 2010
From: pchapin at cems.uvm.edu (Peter C. Chapin)
Date: Wed, 12 May 2010 12:10:06 -0400
Subject: [antlr-interest] ANTLRworks 1.4 download link?
Message-ID: <1273680606.30043.5.camel@dustdevil.cis.vtc.edu>

I see that there has been an ANTLRworks 1.4 release. Where can it be
downloaded? The page here

http://www.antlr.org/download.html

only shows the 1.3.1 version.

Thanks!

Peter



From boughtonp at gmail.com  Wed May 12 09:17:27 2010
From: boughtonp at gmail.com (Peter Boughton)
Date: Wed, 12 May 2010 17:17:27 +0100
Subject: [antlr-interest] ANTLRworks 1.4 download link?
In-Reply-To: <1273680606.30043.5.camel@dustdevil.cis.vtc.edu>
References: <1273680606.30043.5.camel@dustdevil.cis.vtc.edu>
Message-ID: <AANLkTikMnHXDLJvekpIAG6WkNzRt0z1-KRQWIKh80Gt0@mail.gmail.com>

There are ANTLRworks 1.4 download links here:
http://www.antlr.org/works/index.html

From jimi at temporal-wave.com  Wed May 12 10:18:21 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 May 2010 10:18:21 -0700
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <AANLkTil5oiK4nv0JOzAP1Cn6MMKVU9AD5Ws1tfoEKqgi@mail.gmail.com>
Message-ID: <e5f2e785ba5ffb4a9e1d1bffd017a63c@temporal-wave.com>

Raise the keystroke timeout in the preferences to something more in keeping with your (or anyone's for that matter ;-), ability to type in a complete grammar rule. I use about 2 seconds.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> Sent: Wednesday, May 12, 2010 1:44 AM
> To: William B. Clodius
> Cc: antlr-interest interest
> Subject: Re: [antlr-interest] ANTLRWorks 1.4 released
> 
> On Wed, May 12, 2010 at 5:05 AM, William B. Clodius
> <wclodius at los-alamos.net> wrote:
> >
> > On May 11, 2010, at 7:27 PM, Terence Parr wrote:
> >
> >> Hi. i have heard of this but it never happens to me. ?is this
> windoze?
> >> Mac? linux? which java version?
> >> T
> > <snip>
> >
> > I have complained in the past. It still happens for me in ANTLRWorks
> 4.1, Mac OS X 10.6.3, Javac, whichever version is the default for
> 10.6.3. To me it has to be in the ANTLRWorks code. Does it have very
> different code depending on OS/Java version?
> 
> Same here. Tested on two systems - Vista + Sun 1.6.18, Fedora 12 +
> Open JDK 1.6.0
> 
> --
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From parrt at cs.usfca.edu  Wed May 12 11:25:31 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 12 May 2010 11:25:31 -0700
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <C7B4FFBB-98F8-4E91-8556-90134A56EA8E@los-alamos.net>
References: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
	<2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
	<C7B4FFBB-98F8-4E91-8556-90134A56EA8E@los-alamos.net>
Message-ID: <D015BFAE-2562-42E6-AADE-5D0211EA6BE4@cs.usfca.edu>

Wow. This is really weird, because that is my exact setup!

OH! Duh.I am not looking at the console. I'm an idiot. doh! ok, what is the suggested solution? I'm sure I can fix it for Jean.   as Jim suggests, you can simply turn up the delay  for the grammar analysis. I guess it should simply not spit out any errors at all and simply highlight the elements in the grammar text, right?

Ter
On May 11, 2010, at 8:05 PM, William B. Clodius wrote:

> 
> On May 11, 2010, at 7:27 PM, Terence Parr wrote:
> 
>> Hi. i have heard of this but it never happens to me.  is this windoze?  
>> Mac? linux? which java version?
>> T
> <snip>
> 
> I have complained in the past. It still happens for me in ANTLRWorks 4.1, Mac OS X 10.6.3, Javac, whichever version is the default for 10.6.3. To me it has to be in the ANTLRWorks code. Does it have very different code depending on OS/Java version?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Wed May 12 11:30:54 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 12 May 2010 11:30:54 -0700
Subject: [antlr-interest] ANTLRworks 1.4 download link?
In-Reply-To: <AANLkTikMnHXDLJvekpIAG6WkNzRt0z1-KRQWIKh80Gt0@mail.gmail.com>
References: <1273680606.30043.5.camel@dustdevil.cis.vtc.edu>
	<AANLkTikMnHXDLJvekpIAG6WkNzRt0z1-KRQWIKh80Gt0@mail.gmail.com>
Message-ID: <B0981602-F74E-4B6C-AD86-7B71E70B75B3@cs.usfca.edu>

oops.I have fixed the download page to include the latest version.
Ter

On May 12, 2010, at 9:17 AM, Peter Boughton wrote:

> There are ANTLRworks 1.4 download links here:
> http://www.antlr.org/works/index.html
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From dr.jaymahdi at gmail.com  Wed May 12 13:30:29 2010
From: dr.jaymahdi at gmail.com (Jay T)
Date: Wed, 12 May 2010 16:30:29 -0400
Subject: [antlr-interest] Problems compiling with C target with example
In-Reply-To: <AANLkTinDoNDe-iKjxS6vtNgu1lSq3wLCGCbKxczhqcgb@mail.gmail.com>
References: <AANLkTinDoNDe-iKjxS6vtNgu1lSq3wLCGCbKxczhqcgb@mail.gmail.com>
Message-ID: <AANLkTinCxqOh7-2BpBa_5JEfM_4rJxKvA51PsV04ipNo@mail.gmail.com>

Hi:

Nevermind, I solved my problem. Sorry to ask such dumb questions, I am a
very new person with Antlr!

Thanks

J

From wclodius at los-alamos.net  Wed May 12 18:52:07 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Wed, 12 May 2010 19:52:07 -0600
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <D015BFAE-2562-42E6-AADE-5D0211EA6BE4@cs.usfca.edu>
References: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
	<2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
	<C7B4FFBB-98F8-4E91-8556-90134A56EA8E@los-alamos.net>
	<D015BFAE-2562-42E6-AADE-5D0211EA6BE4@cs.usfca.edu>
Message-ID: <55C2B43F-9CE6-4C6C-980E-117A9BFBF280@los-alamos.net>


On May 12, 2010, at 12:25 PM, Terence Parr wrote:

> Wow. This is really weird, because that is my exact setup!
> 
> OH! Duh.I am not looking at the console. I'm an idiot. doh! ok, what is the suggested solution? I'm sure I can fix it for Jean.   as Jim suggests, you can simply turn up the delay  for the grammar analysis. I guess it should simply not spit out any errors at all and simply highlight the elements in the grammar text, right?
> 
> Ter
<snip>
Ter:

This is a problem with human interface design, and humans are notoriously error prone and impatient which makes human interface design very difficult. What typically happens with me is ANTLRWorks starts up with the Syntax Diagram display, I do an extensive edit, ask it to Generate Code, it tells me there are errors and to check the Console, I go there to see the errors and they start scrolling off the screen as it continues to report errors due to intermediate changes that have not fixed the error I am working on. Turning up the delay is an unintuitive kluge that will continually cause problems for newbys. Also ANTLRWorks became less stable after this behavior appeared and less responsive. Could the error reporting be keeping track of more state than earlier versions?

Think about what you want from the console and even if you want the console. Can the functionality be put in the Interpreter or Debugger? A keyboard command to go to the next error could work well in another window.

If you had a mode that distinguished errors and only errors that might be good. For me highlighting is already being overused. Why do you need to visually distinguish minor aspects of syntax? Particularly when most syntactic elements are already distinguished by capitalization rules. How do the color blind deal with it?

How is ANTLRWorks deciding  when to check for errors? From Jim's comment it sounds as if it checks if a given interval has passed since the last keystroke. I would instead check either after a command to check, or after one of a finite set of keystrokes i.e. a carriage return or a space that would not normally be associated with changing an ANTLR lexical item. I would make checking after those keystrokes a user selectable preference. I would never check after a delete or the entry of a printable character.


From chr_reisinger at yahoo.de  Thu May 13 03:17:02 2010
From: chr_reisinger at yahoo.de (Christian Reisinger)
Date: Thu, 13 May 2010 10:17:02 +0000 (GMT)
Subject: [antlr-interest] scala support for ANTLR
Message-ID: <504531.13179.qm@web26602.mail.ukl.yahoo.com>

Hi,


I have changed the org\antlr\codegen\templates\Java\ StringTemplate files to produce Scala files and so that i can use Scala Code in ANTLR actions. 
It is a hack and produces somewhat ugly Scala code, but it works for me. 
I've tested it with my 2500 LOC grammar file and 500K LOC test data, and so far i did not encountered any problems.
I do not use any "advanced" feature like AST generating or the built-in scope support, so i do not know if they are working too.

Christian




From keith.smillie at gmail.com  Thu May 13 05:04:53 2010
From: keith.smillie at gmail.com (keith smillie)
Date: Thu, 13 May 2010 13:04:53 +0100
Subject: [antlr-interest] Flattening my expression tree.
Message-ID: <AANLkTimJ9LLhZVFaAkeO-cfbvJaHULETlSW7sMPSWTKx@mail.gmail.com>

Hi All,

I have a simple grammar which describes expressions. Everything seems fine
but the resulting tree is very verbose and I was wondering if someone could
suggest how to flatten it.

The expression part of the grammar looks something like this, with the
expressions nested in order of precedence.

expression
  : assignmentExpression
  -> ^(EXPRESSION assignmentExpression)
  ;

 assignmentExpression
  : x+=listConcatExpression (ASSIGN x+=listConcatExpression )*
  -> ^(ASSIGNMENT_EXPRESSION $x+)
  ;

listConcatExpression
  : x+=logicalExpression (COLON x+=logicalExpression)*
  -> ^(LIST_EXPRESSION $x+)
  ;

logicalExpression
  : x+=relationalExpression (o1=logicalOperators x+=relationalExpression)*

  -> ^(LOGICAL_EXPRESSION $o1* $x+)
  ;

If I parse an expression such as: '1 + 2' I get the following tree which
seems far too verbose.

ASSIGNMENT_EXPRESSION
        LIST_EXPRESSION
                LOGICAL_EXPRESSION
                        RELATIONAL_EXPRESSION
                                ADDITION_EXPRESSION
                                        +
                                        MULTIPLY_EXPRESSION
                                                UNARY_EXPRESSION
                                                        SUBSCRIPT_EXPRESSION

                                                                NUMBER
                                                                        1
                                        MULTIPLY_EXPRESSION
                                                UNARY_EXPRESSION
                                                        SUBSCRIPT_EXPRESSION

                                                                NUMBER
                                                                        2

I would like the resulting tree to be flattened into something like the
following. Has anyone got any suggestions?

ADDITION_EXPRESSION
        +
        NUMBER
                1
        NUMBER
                2

Regards, Keith

From jimi at temporal-wave.com  Thu May 13 06:27:28 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 May 2010 06:27:28 -0700
Subject: [antlr-interest] Flattening my expression tree.
In-Reply-To: <AANLkTimJ9LLhZVFaAkeO-cfbvJaHULETlSW7sMPSWTKx@mail.gmail.com>
Message-ID: <e675db88da3ca04db8c074f46fcb7e8e@temporal-wave.com>

Rather than use rewrite operators, use the operators themselves. The names of the rules are really parse points (and so they appear in the parse tree)and not AST node points. So:



expression
   : assignmentExpression
   -> ^(EXPRESSION assignmentExpression)
   ;

assignmentExpression
   : listConcatExpression (ASSIGN^ listConcatExpression )*
   ;

And so on...

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of keith smillie
> Sent: Thursday, May 13, 2010 5:05 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Flattening my expression tree.
> 
> Hi All,
> 
> I have a simple grammar which describes expressions. Everything seems
> fine
> but the resulting tree is very verbose and I was wondering if someone
> could
> suggest how to flatten it.
> 
> The expression part of the grammar looks something like this, with the
> expressions nested in order of precedence.
> 
> expression
>   : assignmentExpression
>   -> ^(EXPRESSION assignmentExpression)
>   ;
> 
>  assignmentExpression
>   : x+=listConcatExpression (ASSIGN x+=listConcatExpression )*
>   -> ^(ASSIGNMENT_EXPRESSION $x+)
>   ;
> 
> listConcatExpression
>   : x+=logicalExpression (COLON x+=logicalExpression)*
>   -> ^(LIST_EXPRESSION $x+)
>   ;
> 
> logicalExpression
>   : x+=relationalExpression (o1=logicalOperators
> x+=relationalExpression)*
> 
>   -> ^(LOGICAL_EXPRESSION $o1* $x+)
>   ;
> 
> If I parse an expression such as: '1 + 2' I get the following tree
> which
> seems far too verbose.
> 
> ASSIGNMENT_EXPRESSION
>         LIST_EXPRESSION
>                 LOGICAL_EXPRESSION
>                         RELATIONAL_EXPRESSION
>                                 ADDITION_EXPRESSION
>                                         +
>                                         MULTIPLY_EXPRESSION
>                                                 UNARY_EXPRESSION
> 
> SUBSCRIPT_EXPRESSION
> 
>                                                                 NUMBER
> 
> 1
>                                         MULTIPLY_EXPRESSION
>                                                 UNARY_EXPRESSION
> 
> SUBSCRIPT_EXPRESSION
> 
>                                                                 NUMBER
> 
> 2
> 
> I would like the resulting tree to be flattened into something like the
> following. Has anyone got any suggestions?
> 
> ADDITION_EXPRESSION
>         +
>         NUMBER
>                 1
>         NUMBER
>                 2
> 
> Regards, Keith
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From kaleb.pederson at gmail.com  Thu May 13 11:01:23 2010
From: kaleb.pederson at gmail.com (Kaleb Pederson)
Date: Thu, 13 May 2010 11:01:23 -0700
Subject: [antlr-interest] gunit syntax for tree walker with a flat list of
	nodes
Message-ID: <201005131101.23920.kaleb.pederson@gmail.com>

Here's a simple gunit test for a portion of my grammar which generates a flat 
list of nodes:

objectOption walks objectOption:
	<<one:"value">> -> (one "value")

In the above, I purposefully left out the caret (i.e. ^(one "value)) since 
it's a flat list of nodes and not a tree.  Another option which seems intuitive 
is to leave off the parenthesis, like this:

objectOption walks objectOption:
	<<one:"value">> -> one "value"

In the first case the parenthesis cause an error

1 failures found:
test2 (objectOption walks objectOption, line17) - 
expected: (one \"value\")
actual: one \"value\"

And in the second case I get an exception:

line 17:20 no viable alternative at input 'one'
line 17:24 missing ':' at 'value'
line 0:-1 no viable alternative at input '<EOF>'
java.lang.NullPointerException
        at org.antlr.gunit.OutputTest.getExpected(OutputTest.java:65)
        at org.antlr.gunit.gUnitExecutor.executeTests(gUnitExecutor.java:245)
        ...

What is the correct way to match a flat tree?

Thanks.

--
Kaleb Pederson

Blog - http://kalebpederson.com
Twitter - http://twitter.com/kalebpederson

From kaleb.pederson at gmail.com  Thu May 13 16:20:23 2010
From: kaleb.pederson at gmail.com (Kaleb Pederson)
Date: Thu, 13 May 2010 16:20:23 -0700
Subject: [antlr-interest] throws on rule declaration being ignored
Message-ID: <201005131620.23668.kaleb.pederson@gmail.com>

I have a tree parser that's doing semantic analysis on the AST generated by my 
parser.  It has a rule declared as follows:

transitionDefinition throws WorkflowStateNotFoundException: /* ... */

This compiles just fine and matches the rule syntax at 
http://www.antlr.org/wiki/display/ANTLR3/Grammars but my exception is never 
declared so the Java compiler complains.

./tool/src/main/antlr3/org/antlr/grammar/v3/ANTLRv3.g shows that it's building 
a tree (but I'm not actually positive if it's the v2 or v3 grammar that ANTLR 
3.2 is using):

throwsSpec
    :   'throws' id ( ',' id )* -> ^('throws' id+)
    ;

I know I can make it a runtime exception, but I'd like to use my exception 
hierarchy.  Am I doing something wrong or should that syntax work?

Thanks.

--
Kaleb Pederson

Blog - http://kalebpederson.com
Twitter - http://twitter.com/kalebpederson

From lepilache at hotmail.com  Fri May 14 00:32:09 2010
From: lepilache at hotmail.com (Damien Urruty)
Date: Fri, 14 May 2010 07:32:09 +0000
Subject: [antlr-interest] ANTLRWorks 1.4 released
Message-ID: <BLU139-W18E96158F0E5050A749A4CBCFD0@phx.gbl>


Why don't you create a checkbox in the Preferences, to activate / deactivate the automatic check. That would be a cool feature !

On May 12, 2010, at 12:25 PM, Terence Parr wrote:

Wow. This is really weird, because that is my exact setup!

OH! Duh.I am not looking at the console. I'm an idiot. doh! ok, what is the
suggested solution? I'm sure I can fix it for Jean.   as Jim suggests, you can
simply turn up the delay  for the grammar analysis. I guess it should simply not
spit out any errors at all and simply highlight the elements in the grammar
text, right?

Ter
<snip>
Ter:

This is a problem with human interface design, and humans are notoriously error
prone and impatient which makes human interface design very difficult. What
typically happens with me is ANTLRWorks starts up with the Syntax Diagram
display, I do an extensive edit, ask it to Generate Code, it tells me there are
errors and to check the Console, I go there to see the errors and they start
scrolling off the screen as it continues to report errors due to intermediate
changes that have not fixed the error I am working on. Turning up the delay is
an unintuitive kluge that will continually cause problems for newbys. Also
ANTLRWorks became less stable after this behavior appeared and less responsive.
Could the error reporting be keeping track of more state than earlier versions?

Think about what you want from the console and even if you want the console. Can
the functionality be put in the Interpreter or Debugger? A keyboard command to
go to the next error could work well in another window.

If you had a mode that distinguished errors and only errors that might be good.
For me highlighting is already being overused. Why do you need to visually
distinguish minor aspects of syntax? Particularly when most syntactic elements
are already distinguished by capitalization rules. How do the color blind deal
with it?

How is ANTLRWorks deciding  when to check for errors? From Jim's comment it
sounds as if it checks if a given interval has passed since the last keystroke.
I would instead check either after a command to check, or after one of a finite
set of keystrokes i.e. a carriage return or a space that would not normally be
associated with changing an ANTLR lexical item. I would make checking after
those keystrokes a user selectable preference. I would never check after a
delete or the entry of a printable character.

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address 		 	   		  
_________________________________________________________________
La bo?te mail NOW G?n?ration vous permet de r?unir toutes vos bo?tes mail dans Hotmail !
http://www.windowslive.fr/hotmail/nowgeneration/

From aheck at gmx.de  Fri May 14 06:59:06 2010
From: aheck at gmx.de (Andreas Heck)
Date: Fri, 14 May 2010 15:59:06 +0200
Subject: [antlr-interest] Parsing erroneous input
Message-ID: <1273845546.2819.139.camel@tpad>

Hello everybody,

I have a parser based on the C target that I want to use to check for
correct syntax in one program but I also want to use it to parse
erroneous input to do autocompletion in another program.

If I just parse some input where a semicolon is missing on one line the
parser recovers since the following statements are transformed into
correct AST nodes but the code from the line which caused the error gets
represented by two "Tree Node Error" nodes in the AST.

Unfortunately you can't count on perfectly valid input if you want to
provide some form of autocompletion.

What is the best approach to parse erroneous input? Do I have to create
a second grammar that also accepts input with common errors like a
missing semicolon?

Or is there a better way where I can just use the parser which only
accepts correct input? Maybe I could somehow get the code line which
caused the error and use handwritten code for common error cases to
extract the information I need? Or maybe there is a way to get the raw
tokens that caused the problem from antlr or make it put the best
partial derivation it can create into the AST?

Are there any other approaches?


Best regards,

Andreas


From ssedai at gmail.com  Fri May 14 07:10:28 2010
From: ssedai at gmail.com (Sergei Smolov)
Date: Fri, 14 May 2010 18:10:28 +0400
Subject: [antlr-interest] Tree construction in Antlr
Message-ID: <AANLkTilUxwICN__8NzOF0LmURR4r6bdZOwmdQtbpnRIY@mail.gmail.com>

Hello, everybody!
I have a very simple question. For example, I have the following grammar
rule:

FirstToken : Second Third;

And I want to generate the following tree from such rule (I mean Tree in
Java terms):

        FirstToken
        /           \
 Second      Third

How should I rewrite my grammar rule? As far, as I understand, I can use '^'
and '!' operators for it. But I don't understand how to make First Token a
root of this tree.

Thanks in advance

-- 
Sergey Smolov

From oliver.zeigermann at gmail.com  Fri May 14 07:29:16 2010
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Fri, 14 May 2010 16:29:16 +0200
Subject: [antlr-interest] Tree construction in Antlr
In-Reply-To: <AANLkTilUxwICN__8NzOF0LmURR4r6bdZOwmdQtbpnRIY@mail.gmail.com>
References: <AANLkTilUxwICN__8NzOF0LmURR4r6bdZOwmdQtbpnRIY@mail.gmail.com>
Message-ID: <AANLkTikwdyglpaZow8TTlE3E5f-zOnTiu8JwyT5eMXkx@mail.gmail.com>

Hi Sergei!

The problem might be that in your grammar FirstToken is not a token,
but the name of a rule. You might want to create a new token, though?

FirstToken : Second Third
->
^( FIRSTTOKEN["firstToken"] Second Third)
;

Hope that helps!

- Oliver

2010/5/14 Sergei Smolov <ssedai at gmail.com>:
> Hello, everybody!
> I have a very simple question. For example, I have the following grammar
> rule:
>
> FirstToken : Second Third;
>
> And I want to generate the following tree from such rule (I mean Tree in
> Java terms):
>
> ? ? ? ?FirstToken
> ? ? ? ?/ ? ? ? ? ? \
> ?Second ? ? ?Third
>
> How should I rewrite my grammar rule? As far, as I understand, I can use '^'
> and '!' operators for it. But I don't understand how to make First Token a
> root of this tree.
>
> Thanks in advance
>
> --
> Sergey Smolov
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From ssedai at gmail.com  Fri May 14 07:34:48 2010
From: ssedai at gmail.com (Sergei Smolov)
Date: Fri, 14 May 2010 18:34:48 +0400
Subject: [antlr-interest] Tree construction in Antlr
In-Reply-To: <AANLkTikwdyglpaZow8TTlE3E5f-zOnTiu8JwyT5eMXkx@mail.gmail.com>
References: <AANLkTilUxwICN__8NzOF0LmURR4r6bdZOwmdQtbpnRIY@mail.gmail.com>
	<AANLkTikwdyglpaZow8TTlE3E5f-zOnTiu8JwyT5eMXkx@mail.gmail.com>
Message-ID: <AANLkTilp2jkg3BohZ7fVP7_4q2EPuqNchE34g_xVqV6O@mail.gmail.com>

Thank you, Oliver, that helps me so much! FirstToken really not a token, but
a name of rule.

By the way, is it true, that FIRSTTOKEN must be included in "tokens {...}"
block? Or I can avoid from that?



2010/5/14 Oliver Zeigermann <oliver.zeigermann at gmail.com>

> Hi Sergei!
>
> The problem might be that in your grammar FirstToken is not a token,
> but the name of a rule. You might want to create a new token, though?
>
> FirstToken : Second Third
> ->
> ^( FIRSTTOKEN["firstToken"] Second Third)
> ;
>
> Hope that helps!
>
> - Oliver
>
> 2010/5/14 Sergei Smolov <ssedai at gmail.com>:
> > Hello, everybody!
> > I have a very simple question. For example, I have the following grammar
> > rule:
> >
> > FirstToken : Second Third;
> >
> > And I want to generate the following tree from such rule (I mean Tree in
> > Java terms):
> >
> >        FirstToken
> >        /           \
> >  Second      Third
> >
> > How should I rewrite my grammar rule? As far, as I understand, I can use
> '^'
> > and '!' operators for it. But I don't understand how to make First Token
> a
> > root of this tree.
> >
> > Thanks in advance
> >
> > --
> > Sergey Smolov
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>



-- 
Sergey Smolov

From oliver.zeigermann at gmail.com  Fri May 14 07:39:04 2010
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Fri, 14 May 2010 16:39:04 +0200
Subject: [antlr-interest] Tree construction in Antlr
In-Reply-To: <AANLkTilp2jkg3BohZ7fVP7_4q2EPuqNchE34g_xVqV6O@mail.gmail.com>
References: <AANLkTilUxwICN__8NzOF0LmURR4r6bdZOwmdQtbpnRIY@mail.gmail.com>
	<AANLkTikwdyglpaZow8TTlE3E5f-zOnTiu8JwyT5eMXkx@mail.gmail.com>
	<AANLkTilp2jkg3BohZ7fVP7_4q2EPuqNchE34g_xVqV6O@mail.gmail.com>
Message-ID: <AANLkTiny6j6IQjxC2B2xnLFjLN6nIN9ZEns7RgqlB1e3@mail.gmail.com>

Not quite sure if it has to be included in that secion, but it would
be good style in any case.

2010/5/14 Sergei Smolov <ssedai at gmail.com>:
> Thank you, Oliver, that helps me so much! FirstToken really not a token, but
> a name of rule.
>
> By the way, is it true, that FIRSTTOKEN must be included in "tokens {...}"
> block? Or I can avoid from that?
>
>
> 2010/5/14 Oliver Zeigermann <oliver.zeigermann at gmail.com>
>>
>> Hi Sergei!
>>
>> The problem might be that in your grammar FirstToken is not a token,
>> but the name of a rule. You might want to create a new token, though?
>>
>> FirstToken : Second Third
>> ->
>> ^( FIRSTTOKEN["firstToken"] Second Third)
>> ;
>>
>> Hope that helps!
>>
>> - Oliver
>>
>> 2010/5/14 Sergei Smolov <ssedai at gmail.com>:
>> > Hello, everybody!
>> > I have a very simple question. For example, I have the following grammar
>> > rule:
>> >
>> > FirstToken : Second Third;
>> >
>> > And I want to generate the following tree from such rule (I mean Tree in
>> > Java terms):
>> >
>> > ? ? ? ?FirstToken
>> > ? ? ? ?/ ? ? ? ? ? \
>> > ?Second ? ? ?Third
>> >
>> > How should I rewrite my grammar rule? As far, as I understand, I can use
>> > '^'
>> > and '!' operators for it. But I don't understand how to make First Token
>> > a
>> > root of this tree.
>> >
>> > Thanks in advance
>> >
>> > --
>> > Sergey Smolov
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>
>
>
> --
> Sergey Smolov
>

From jjsnyders at rcn.com  Fri May 14 08:17:25 2010
From: jjsnyders at rcn.com (John Snyders)
Date: Fri, 14 May 2010 11:17:25 -0400 (EDT)
Subject: [antlr-interest] Looking for gunit that supports TreeAdaptor in
 generated junit
Message-ID: <20100514111725.CHO56831@ms18.lnh.mail.rcn.net>

Hi all,
I am using antlr version 3.2 and having trouble with gunit.
Specifically I need the junit java file generated by gunit to support 
the TreeAdaptor option.
I found various threads pointing to newer versions of gunit.
 
http://www.antlr.org/wiki/pages/viewpageattachments.action?pageId=3244061&metadataLink=true
The top two files on the list are: gunit-1.0.6b-src.tar.gz and 
gunit-1.0.6b.jar but I don't think they match
In other words I don't think the jar was built from those sources. The 
dates of these files (source being added months after the jar) made me 
nervous but I decided to assume they were related based on the matching 
version number.

I see in the sources a file junit.stg with the following line
       <if(hasTreeAdaptor)><\t><\t>this.treeAdaptorPath = 
"<treeAdaptorPath>";<endif>
This gave me hope that the 1.0.6b version would solve my problem

So I tried the jar and still had the same problem.
When I dig into the jar I find that the junit.stg file does not have the 
line that adds the adapter.

Where can I get a jar with a gunit that matches the 1.0.6b sources or 
more specifically one that supports TreeAdapter in junt tests?

Any plans for an update to the antlr 3.2 version with the latest correct 
gunit?

Thanks,
-John

From jimi at temporal-wave.com  Fri May 14 08:56:57 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 14 May 2010 08:56:57 -0700
Subject: [antlr-interest] Parsing erroneous input
In-Reply-To: <1273845546.2819.139.camel@tpad>
Message-ID: <e3afb784537dc14abc761e878d371580@temporal-wave.com>

You have to be careful how you implement your grammar rules such that you can recover sensibly from errors. Generally you build a tree or partial tree then analyze that. You may also need to specifically code for some potential missing elements, but again you have to be careful not to introduce ambiguities that break the normal grammar.

For hints on how to code rules that recover well from errors (especially in loops), see:

http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andreas Heck
> Sent: Friday, May 14, 2010 6:59 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Parsing erroneous input
> 
> Hello everybody,
> 
> I have a parser based on the C target that I want to use to check for
> correct syntax in one program but I also want to use it to parse
> erroneous input to do autocompletion in another program.
> 
> If I just parse some input where a semicolon is missing on one line the
> parser recovers since the following statements are transformed into
> correct AST nodes but the code from the line which caused the error
> gets
> represented by two "Tree Node Error" nodes in the AST.
> 
> Unfortunately you can't count on perfectly valid input if you want to
> provide some form of autocompletion.
> 
> What is the best approach to parse erroneous input? Do I have to create
> a second grammar that also accepts input with common errors like a
> missing semicolon?
> 
> Or is there a better way where I can just use the parser which only
> accepts correct input? Maybe I could somehow get the code line which
> caused the error and use handwritten code for common error cases to
> extract the information I need? Or maybe there is a way to get the raw
> tokens that caused the problem from antlr or make it put the best
> partial derivation it can create into the AST?
> 
> Are there any other approaches?
> 
> 
> Best regards,
> 
> Andreas
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From chancharles at gmail.com  Fri May 14 09:05:49 2010
From: chancharles at gmail.com (Charles Chan)
Date: Fri, 14 May 2010 12:05:49 -0400
Subject: [antlr-interest] Parser not generating error?
Message-ID: <AANLkTikefyCCVOmkVtpnEQCgt6SsutPuGZdKd7IyyTsN@mail.gmail.com>

Hi, all. I am trying to write a parser for an input similar to the following:

A = 'TEST1' and B = 'TEST2'

The problem I am having is that the parser is not returning error in
the following scenarios:

1. A dangling left paren:

A = 'TEST1' and B = 'TEST2' (

2. A dangling ID:

A = 'TEST1' and B = 'TEST2' A

Is there some options I need to turn on to get these kinds of errors?

Thanks!
Charles


grammar Script;

options {
  output=AST;
}

@parser::header {

import java.util.Map;
import java.util.HashMap;
import java.math.BigDecimal;
}

@parser::members {
  public Map<String, Object> values = new HashMap<String, Object>();

  public static void main(String[] args) throws Exception {
    ScriptLexer lexer = new ScriptLexer(new ANTLRFileStream(args[0]));
    CommonTokenStream tokenStream = new CommonTokenStream(lexer);
    ScriptParser parser = new ScriptParser(tokenStream);
    parser.values.put("A", "TEST1");
    parser.values.put("B", "TEST2");
    parser.values.put("C", "TEST3");
    System.out.println(parser.statement().value);
  }

  protected void mismatch(IntStream input, int ttype, BitSet follow)
throws RecognitionException {
    throw new MismatchedTokenException(ttype, input);
  }

  public Object recoverFromMismatchedSet(IntStream input,
RecognitionException e, BitSet follow) throws RecognitionException {
    throw e;
  }
}

@rulecatch {
  catch (RecognitionException ex) {
    throw ex;
  }
}

/*------------------------------------------------------------------
 * PARSER RULES
 *------------------------------------------------------------------*/

statement returns [boolean value]: e=orcondition { $value = $e.value; }
         ;

orcondition returns [boolean value]
    :   e=andcondition  { $value = $e.value; } (OR^ e=andcondition {
$value = $value || $e.value; })*
    ;

andcondition returns [boolean value]
    : e=expression { $value = $e.value; } (AND^ e=expression { $value
= $value && $e.value; })*
    ;

expression returns [boolean value]
    : ID operator rhs
    {
      Object idValue = (Object)values.get($ID.text);
	  Object rhsValue = $rhs.value;
      $value = idValue.equals(rhsValue);
    }
    | LEFT_PAREN! orcondition RIGHT_PAREN!
	{
	  $value = $orcondition.value;
	}
    ;

operator : GTE | LTE | GT | LT | EQ | NOT_EQ
         ;
rhs returns [Object value]
    : e=INTEGER        { $value = Integer.valueOf($e.text); } |
      e=FLOAT          { $value = new BigDecimal($e.text); } |
	  e=STRING_LITERAL { $value = $e.text.substring(1, $e.text.length() - 1); } |
	  TRUE             { $value = Boolean.TRUE; } |
	  FALSE            { $value = Boolean.FALSE; }
    ;
	
/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/
AND     :       'and'
        ;
OR      :       'or'
        ;
LT      :       '<'
        ;
GT      :       '>'
        ;
LTE     :       '<='
        ;
GTE     :       '>='
        ;
EQ      :       '='
        ;
NOT_EQ  :       '!='
        ;
TRUE    :       'true'
        ;
FALSE   :       'false'
        ;
ID      :       ( 'a' .. 'z' | 'A' .. 'Z' | '.' | '_' )+
        ;
STRING_LITERAL  : '\'' ( ( '\'' '\'' )=>  '\'' '\'' | ~'\'' )* '\''
                ;
LEFT_PAREN      : '('
                ;
RIGHT_PAREN     : ')'
                ;
WS      : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+    { $channel = HIDDEN; }
        ;
SIGN    : '+' | '-'
        ;

INTEGER: '0' | SIGN? '1'..'9' '0'..'9'*;
FLOAT: INTEGER '.' '0'..'9'+;

From jimi at temporal-wave.com  Fri May 14 09:07:16 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 14 May 2010 09:07:16 -0700
Subject: [antlr-interest] Parser not generating error?
In-Reply-To: <AANLkTikefyCCVOmkVtpnEQCgt6SsutPuGZdKd7IyyTsN@mail.gmail.com>
Message-ID: <8f2c2131e10e6d4192bae41a09d23e9b@temporal-wave.com>

Your statement rule needs to end with the EOF token.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Charles Chan
> Sent: Friday, May 14, 2010 9:06 AM
> To: antlr-interest
> Subject: [antlr-interest] Parser not generating error?
> 
> Hi, all. I am trying to write a parser for an input similar to the
> following:
> 
> A = 'TEST1' and B = 'TEST2'
> 
> The problem I am having is that the parser is not returning error in
> the following scenarios:
> 
> 1. A dangling left paren:
> 
> A = 'TEST1' and B = 'TEST2' (
> 
> 2. A dangling ID:
> 
> A = 'TEST1' and B = 'TEST2' A
> 
> Is there some options I need to turn on to get these kinds of errors?
> 
> Thanks!
> Charles
> 
> 
> grammar Script;
> 
> options {
>   output=AST;
> }
> 
> @parser::header {
> 
> import java.util.Map;
> import java.util.HashMap;
> import java.math.BigDecimal;
> }
> 
> @parser::members {
>   public Map<String, Object> values = new HashMap<String, Object>();
> 
>   public static void main(String[] args) throws Exception {
>     ScriptLexer lexer = new ScriptLexer(new ANTLRFileStream(args[0]));
>     CommonTokenStream tokenStream = new CommonTokenStream(lexer);
>     ScriptParser parser = new ScriptParser(tokenStream);
>     parser.values.put("A", "TEST1");
>     parser.values.put("B", "TEST2");
>     parser.values.put("C", "TEST3");
>     System.out.println(parser.statement().value);
>   }
> 
>   protected void mismatch(IntStream input, int ttype, BitSet follow)
> throws RecognitionException {
>     throw new MismatchedTokenException(ttype, input);
>   }
> 
>   public Object recoverFromMismatchedSet(IntStream input,
> RecognitionException e, BitSet follow) throws RecognitionException {
>     throw e;
>   }
> }
> 
> @rulecatch {
>   catch (RecognitionException ex) {
>     throw ex;
>   }
> }
> 
> /*------------------------------------------------------------------
>  * PARSER RULES
>  *------------------------------------------------------------------*/
> 
> statement returns [boolean value]: e=orcondition { $value = $e.value; }
>          ;
> 
> orcondition returns [boolean value]
>     :   e=andcondition  { $value = $e.value; } (OR^ e=andcondition {
> $value = $value || $e.value; })*
>     ;
> 
> andcondition returns [boolean value]
>     : e=expression { $value = $e.value; } (AND^ e=expression { $value
> = $value && $e.value; })*
>     ;
> 
> expression returns [boolean value]
>     : ID operator rhs
>     {
>       Object idValue = (Object)values.get($ID.text);
> 	  Object rhsValue = $rhs.value;
>       $value = idValue.equals(rhsValue);
>     }
>     | LEFT_PAREN! orcondition RIGHT_PAREN!
> 	{
> 	  $value = $orcondition.value;
> 	}
>     ;
> 
> operator : GTE | LTE | GT | LT | EQ | NOT_EQ
>          ;
> rhs returns [Object value]
>     : e=INTEGER        { $value = Integer.valueOf($e.text); } |
>       e=FLOAT          { $value = new BigDecimal($e.text); } |
> 	  e=STRING_LITERAL { $value = $e.text.substring(1,
> $e.text.length() - 1); } |
> 	  TRUE             { $value = Boolean.TRUE; } |
> 	  FALSE            { $value = Boolean.FALSE; }
>     ;
> 
> /*------------------------------------------------------------------
>  * LEXER RULES
>  *------------------------------------------------------------------*/
> AND     :       'and'
>         ;
> OR      :       'or'
>         ;
> LT      :       '<'
>         ;
> GT      :       '>'
>         ;
> LTE     :       '<='
>         ;
> GTE     :       '>='
>         ;
> EQ      :       '='
>         ;
> NOT_EQ  :       '!='
>         ;
> TRUE    :       'true'
>         ;
> FALSE   :       'false'
>         ;
> ID      :       ( 'a' .. 'z' | 'A' .. 'Z' | '.' | '_' )+
>         ;
> STRING_LITERAL  : '\'' ( ( '\'' '\'' )=>  '\'' '\'' | ~'\'' )* '\''
>                 ;
> LEFT_PAREN      : '('
>                 ;
> RIGHT_PAREN     : ')'
>                 ;
> WS      : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+    { $channel =
> HIDDEN; }
>         ;
> SIGN    : '+' | '-'
>         ;
> 
> INTEGER: '0' | SIGN? '1'..'9' '0'..'9'*;
> FLOAT: INTEGER '.' '0'..'9'+;
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From chancharles at gmail.com  Fri May 14 09:25:27 2010
From: chancharles at gmail.com (Charles Chan)
Date: Fri, 14 May 2010 12:25:27 -0400
Subject: [antlr-interest] How to skip evaluating part of a rule?
Message-ID: <AANLkTimFHqLP6wtpmDQVlmDNjEAe1Huv7hNc8aXfMIx6@mail.gmail.com>

Hi, all. I have a parser optimization question for you guys. In my
grammar (below), I have to evaluate an OR condition and an AND
condition. We all know that "true OR true/false" is always true and
"false AND true/false" is always false. So, technically, if I can skip
evaluating RHS under those conditions.

Is there a way for me to incorporate this kind of optimization in my
grammar? Currently, I am retrieving the values from a Map so that
performance is okay but I plan to retrieve them from DB, so any
optimization to skip the retrieval process would be great.

Any idea?

Thanks!
Charles


grammar Script;

options {
  output=AST;
}

@parser::header {

import java.util.Map;
import java.util.HashMap;
import java.math.BigDecimal;
}

@parser::members {
  public Map<String, Object> values = new HashMap<String, Object>();

  public static void main(String[] args) throws Exception {
    ScriptLexer lexer = new ScriptLexer(new ANTLRFileStream(args[0]));
    CommonTokenStream tokenStream = new CommonTokenStream(lexer);
    ScriptParser parser = new ScriptParser(tokenStream);
    parser.values.put("A", "TEST1");
    parser.values.put("B", "TEST2");
    parser.values.put("C", "TEST3");
    System.out.println(parser.statement().value);
  }

  protected void mismatch(IntStream input, int ttype, BitSet follow)
throws RecognitionException {
    throw new MismatchedTokenException(ttype, input);
  }

  public Object recoverFromMismatchedSet(IntStream input,
RecognitionException e, BitSet follow) throws RecognitionException {
    throw e;
  }
}

@rulecatch {
  catch (RecognitionException ex) {
    throw ex;
  }
}

/*------------------------------------------------------------------
 * PARSER RULES
 *------------------------------------------------------------------*/

statement returns [boolean value]: e=orcondition { $value = $e.value; }
         ;

orcondition returns [boolean value]
    :   e=andcondition  { $value = $e.value; }
        (OR^ e=andcondition
        {
		  $value = $value || $e.value;
        })*
    ;

andcondition returns [boolean value]
    : e=expression { $value = $e.value; }
      (AND^ e=expression
      {
	    $value = $value && $e.value;
      })*
    ;

expression returns [boolean value]
    : ID operator rhs
    {
      Object idValue = (Object)values.get($ID.text);
	  Object rhsValue = $rhs.value;
      $value = idValue.equals(rhsValue);
    }
    | LEFT_PAREN! orcondition RIGHT_PAREN!
	{
	  $value = $orcondition.value;
	}
    ;

operator : GTE | LTE | GT | LT | EQ | NOT_EQ
         ;
rhs returns [Object value]
    : e=INTEGER        { $value = Integer.valueOf($e.text); } |
      e=FLOAT          { $value = new BigDecimal($e.text); } |
	  e=STRING_LITERAL { $value = $e.text.substring(1, $e.text.length() - 1); } |
	  TRUE             { $value = Boolean.TRUE; } |
	  FALSE            { $value = Boolean.FALSE; }
    ;
	
/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/
AND     :       'and'
        ;
OR      :       'or'
        ;
LT      :       '<'
        ;
GT      :       '>'
        ;
LTE     :       '<='
        ;
GTE     :       '>='
        ;
EQ      :       '='
        ;
NOT_EQ  :       '!='
        ;
TRUE    :       'true'
        ;
FALSE   :       'false'
        ;
ID      :       ( 'a' .. 'z' | 'A' .. 'Z' | '.' | '_' )+
        ;
STRING_LITERAL  : '\'' ( ( '\'' '\'' )=>  '\'' '\'' | ~'\'' )* '\''
                ;
LEFT_PAREN      : '('
                ;
RIGHT_PAREN     : ')'
                ;
WS      : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+    { $channel = HIDDEN; }
        ;
SIGN    : '+' | '-'
        ;

INTEGER: '0' | SIGN? '1'..'9' '0'..'9'*;

FLOAT: INTEGER '.' '0'..'9'+;

From chancharles at gmail.com  Fri May 14 09:51:32 2010
From: chancharles at gmail.com (Charles Chan)
Date: Fri, 14 May 2010 12:51:32 -0400
Subject: [antlr-interest] parser not generating error?
Message-ID: <AANLkTinv2pRkn9JSiTEj1r13BqrLc75m7vddXjhYCqeQ@mail.gmail.com>

Works like magic!

Thank you so much, Jim!

Charles

From marcin.rzeznicki at gmail.com  Fri May 14 12:23:42 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Fri, 14 May 2010 21:23:42 +0200
Subject: [antlr-interest] How to skip evaluating part of a rule?
In-Reply-To: <AANLkTimFHqLP6wtpmDQVlmDNjEAe1Huv7hNc8aXfMIx6@mail.gmail.com>
References: <AANLkTimFHqLP6wtpmDQVlmDNjEAe1Huv7hNc8aXfMIx6@mail.gmail.com>
Message-ID: <AANLkTinVyGFB6baAcfbq1bxg7T5B9l8hpXZ5gF9ksSFd@mail.gmail.com>

On Fri, May 14, 2010 at 6:25 PM, Charles Chan <chancharles at gmail.com> wrote:
> Hi, all. I have a parser optimization question for you guys. In my
> grammar (below), I have to evaluate an OR condition and an AND
> condition. We all know that "true OR true/false" is always true and
> "false AND true/false" is always false. So, technically, if I can skip
> evaluating RHS under those conditions.
>
> Is there a way for me to incorporate this kind of optimization in my
> grammar? Currently, I am retrieving the values from a Map so that
> performance is okay but I plan to retrieve them from DB, so any
> optimization to skip the retrieval process would be great.
>
> Any idea?
>

Sync to follow set if you have simple rules, where no element of
follow can possibly be present within the rule you're escaping from.
In your case you can freely sync to ';' so that should solve your
problems. In any case you can define special flag, like SKIPPING_STATE
= 10000; - set backtracking state to this value so you know that you
are escaping and continue with parsing, no actions will be taken so
you should be fine with this solution to. Just remember to unset
backtracking state on exit.


-- 
Pozdrawiam
Marcin Rze?nicki

From chancharles at gmail.com  Fri May 14 13:29:22 2010
From: chancharles at gmail.com (Charles Chan)
Date: Fri, 14 May 2010 16:29:22 -0400
Subject: [antlr-interest] How to skip evaluating part of a rule?
In-Reply-To: <AANLkTinVyGFB6baAcfbq1bxg7T5B9l8hpXZ5gF9ksSFd@mail.gmail.com>
References: <AANLkTimFHqLP6wtpmDQVlmDNjEAe1Huv7hNc8aXfMIx6@mail.gmail.com>
	<AANLkTinVyGFB6baAcfbq1bxg7T5B9l8hpXZ5gF9ksSFd@mail.gmail.com>
Message-ID: <AANLkTinVURsEsMHx45V2t0e4qlHwC5Ue5WamxofNeq05@mail.gmail.com>

Thanks, Marcin. I am walking thru the returned tree to do the
evaluation instead. This seems to be cleaner.

Charles


On Fri, May 14, 2010 at 3:23 PM, Marcin Rze?nicki
<marcin.rzeznicki at gmail.com> wrote:
> On Fri, May 14, 2010 at 6:25 PM, Charles Chan <chancharles at gmail.com> wrote:
>> Hi, all. I have a parser optimization question for you guys. In my
>> grammar (below), I have to evaluate an OR condition and an AND
>> condition. We all know that "true OR true/false" is always true and
>> "false AND true/false" is always false. So, technically, if I can skip
>> evaluating RHS under those conditions.
>>
>> Is there a way for me to incorporate this kind of optimization in my
>> grammar? Currently, I am retrieving the values from a Map so that
>> performance is okay but I plan to retrieve them from DB, so any
>> optimization to skip the retrieval process would be great.
>>
>> Any idea?
>>
>
> Sync to follow set if you have simple rules, where no element of
> follow can possibly be present within the rule you're escaping from.
> In your case you can freely sync to ';' so that should solve your
> problems. In any case you can define special flag, like SKIPPING_STATE
> = 10000; - set backtracking state to this value so you know that you
> are escaping and continue with parsing, no actions will be taken so
> you should be fine with this solution to. Just remember to unset
> backtracking state on exit.
>
>
> --
> Pozdrawiam
> Marcin Rze?nicki
>

From marcin.rzeznicki at gmail.com  Fri May 14 18:02:32 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Sat, 15 May 2010 03:02:32 +0200
Subject: [antlr-interest] How to skip evaluating part of a rule?
In-Reply-To: <AANLkTinVURsEsMHx45V2t0e4qlHwC5Ue5WamxofNeq05@mail.gmail.com>
References: <AANLkTimFHqLP6wtpmDQVlmDNjEAe1Huv7hNc8aXfMIx6@mail.gmail.com>
	<AANLkTinVyGFB6baAcfbq1bxg7T5B9l8hpXZ5gF9ksSFd@mail.gmail.com>
	<AANLkTinVURsEsMHx45V2t0e4qlHwC5Ue5WamxofNeq05@mail.gmail.com>
Message-ID: <AANLkTinekrU_46kIfwtx-SYT4bzPp-04N00iraBr33EL@mail.gmail.com>

2010/5/14 Charles Chan <chancharles at gmail.com>:
> Thanks, Marcin. I am walking thru the returned tree to do the
> evaluation instead. This seems to be cleaner.
>

No problem :-)

From naveen.garg at gmail.com  Sat May 15 13:27:14 2010
From: naveen.garg at gmail.com (Naveen Garg)
Date: Sat, 15 May 2010 15:27:14 -0500
Subject: [antlr-interest] template output in atlrworks debugger
Message-ID: <AANLkTil9zuUx5EP-JbkoIOYWTrASm7MNeYe4vQH5rooJ@mail.gmail.com>

Is it possible to show template outputs in the antlrworks debugger ?

I am trying to run the templates example in antlrworks:
( from "the definitive antlr reference":  templates/T.g, T.Java, T.stg )
T.g compiles in antlrworks, but it didn't know how to find T.stg...
editing T.g under Run => Edit T.g Test Rig for Java to match T.Java from the
bookcode caused problems connecting the debugger.
So, I just took the template from T.stg and put it inline:
options {output=template;}
s : ID '=' INT ';' -> template(x={$ID.text},y={$INT.text}) "<x> := <y>;" ;
Now the template was found, and the debugger parses the input fine, but I
get nothing in the debugger output.

Running the example from the command line, and connecting to the remote
debugger under antlrworks:
java org.antlr.Tool -debug T.g
javac Test.java TParser.java TLexer.java
I get the template output on the command line but not in the antlrworks
debugger...

From Shuo.Zhou at haw-hamburg.de  Sat May 15 14:47:43 2010
From: Shuo.Zhou at haw-hamburg.de (Zhou Shuo)
Date: Sat, 15 May 2010 23:47:43 +0200
Subject: [antlr-interest] antlr newbie question..
Message-ID: <E0CDE9E4C8140543957EAE3DD68E10FB01289D383BF6@dehawsmb05.mailcluster.haw-hamburg.de>

Hi everyone!

I am an absolute newbie here and I would like to know if ANTLR is able to do the following job:

Say I have some code containing:

{

...

motor1_speed = 100; //assigned value can be arbitrary..
motor2_speed = 200;

...

}

And I need to translate it in:


{

...

motor.1.setSpeed(100);
motor.2.setSpeed(200);

...

}

For this task my professor has recommended me to use the lexer/parser combination tool and 
for me ANTLR seems to be very promising . But after some research I still could not get an overview
about how to use ANTLR for this task... The tutorials/examples seem to be all about building some compilers..

Also I found something about the translation on the ANTLR homepage:

/*
@grammar
...
@@ to
<begin lang="grammar">
...
</end>
*/
GRAMMAR
        :       '@grammar' '\n'
                {out.println("<begin lang=\"grammar\">");}
                CODE_CHUNK
                {out.println("</end>");}
        ;

EVERYTHING_ELSE
    :   c=.             {out.print((char)c);}
    ;

As I have understood the code above will match 
the keyword "grammar" and translate it into "<begin lang="grammar">" (Please correct me if i'm wrong..)

But in my case how would I be able to get the values(100, 200..) that are assigned to the variables..
Do I need to write all these lexer/parser files for the compilers as well o.O

I'm totally lost here....

I will be so grateful If anyone could give me some hints on this!
Or the best would be a simple example that might be able to solve the issue I mentioned in the beginning..
Well.. I know I'm asking too much..

Anyway..

Thanks all in advance!
Shuo

From naveen.garg at gmail.com  Sat May 15 15:27:00 2010
From: naveen.garg at gmail.com (Naveen)
Date: Sat, 15 May 2010 15:27:00 -0700 (PDT)
Subject: [antlr-interest] Help with Null Pointer Exception
In-Reply-To: <fa7ae3a11003012201v194468cdw300aa2321b0abc60@mail.gmail.com>
References: <fa7ae3a11003012201v194468cdw300aa2321b0abc60@mail.gmail.com>
Message-ID: <e213813b-54a2-42fe-b33f-6fafc652bc9a@e21g2000vbl.googlegroups.com>

On Mar 2, 1:01?am, swathy murthy <pskswa... at gmail.com> wrote:
>  the template is not executing. It
> is giving a Null Pointer Exception.

An alternative to
stat -> {$stat.st} ;  // for every stat[ement]
is
use rewrite in your grammar file
options {output=template;
	 rewrite=true;
	}
and use TokenReWriteStream instead of CommonTokenStream in the testrig
TokenRewriteStream tokens = new TokenRewriteStream(lexer);

See the /templates/rewriter/1pass example in the antlr book

From naveen.garg at gmail.com  Sat May 15 15:40:03 2010
From: naveen.garg at gmail.com (Naveen Garg)
Date: Sat, 15 May 2010 17:40:03 -0500
Subject: [antlr-interest] Help with Null Pointer Exception
In-Reply-To: <e213813b-54a2-42fe-b33f-6fafc652bc9a@e21g2000vbl.googlegroups.com>
References: <fa7ae3a11003012201v194468cdw300aa2321b0abc60@mail.gmail.com> 
	<e213813b-54a2-42fe-b33f-6fafc652bc9a@e21g2000vbl.googlegroups.com>
Message-ID: <AANLkTilCgGhxyuMEZ6n3H1TwQlweeD8Q9PQB6uQFSX-m@mail.gmail.com>

I forgot to mention: you also need to us the rewritten tokenstream instead
of the output:
System.out.println(tokens.toString()); // emit rewritten source  instead
of System.out.println(output.toString());// emit translation

On Sat, May 15, 2010 at 5:27 PM, Naveen <naveen.garg at gmail.com> wrote:

> On Mar 2, 1:01 am, swathy murthy <pskswa... at gmail.com> wrote:
> >  the template is not executing. It
> > is giving a Null Pointer Exception.
>
> An alternative to
> stat -> {$stat.st} ;  // for every stat[ement]
> is
> use rewrite in your grammar file

From aheck at gmx.de  Sat May 15 17:37:37 2010
From: aheck at gmx.de (Andreas Heck)
Date: Sun, 16 May 2010 02:37:37 +0200
Subject: [antlr-interest] Parsing erroneous input
In-Reply-To: <e3afb784537dc14abc761e878d371580@temporal-wave.com>
References: <e3afb784537dc14abc761e878d371580@temporal-wave.com>
Message-ID: <1273970257.2849.18.camel@tpad>

Hi Jim,

thanks for this great article :)

After thinking about the options and reading some of the code of the C
target I came to the conclusion that I would prefer to write an
exception handler for each rule for which I really need error handling.

I have only a few special cases where I want to accept special cases of
erroneous input so this would be manageable and give me full control.

I just added such an exception handler to one rule of my grammar and now
I want to handle a special case where I need to insert a semicolon token
to fix the syntax. I know how to detect this special case in the handler
how to create a token object but how do insert the token and reapply the
production? I guess I have to insert the token into the input stream,
rewind the stream with REWIND(retval.start), call the production
function and return whatever it returns?

The biggest question for me is how do I insert a new token into the
input stream?

In antlr3baserecognizer.c you insert tokens by propagating them through
the call stack and ultimately returning them by match(). But it doesn't
look like I could do something like that. Is it even possible to change
the input stream or do I have no other option than to overwrite
something like recoverFromMismatchedToken() and handle all my special
cases in there?


Best regards,

Andreas

Am Freitag, den 14.05.2010, 08:56 -0700 schrieb Jim Idle:
> You have to be careful how you implement your grammar rules such that you can recover sensibly from errors. Generally you build a tree or partial tree then analyze that. You may also need to specifically code for some potential missing elements, but again you have to be careful not to introduce ambiguities that break the normal grammar.
> 
> For hints on how to code rules that recover well from errors (especially in loops), see:
> 
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Andreas Heck
> > Sent: Friday, May 14, 2010 6:59 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Parsing erroneous input
> > 
> > Hello everybody,
> > 
> > I have a parser based on the C target that I want to use to check for
> > correct syntax in one program but I also want to use it to parse
> > erroneous input to do autocompletion in another program.
> > 
> > If I just parse some input where a semicolon is missing on one line the
> > parser recovers since the following statements are transformed into
> > correct AST nodes but the code from the line which caused the error
> > gets
> > represented by two "Tree Node Error" nodes in the AST.
> > 
> > Unfortunately you can't count on perfectly valid input if you want to
> > provide some form of autocompletion.
> > 
> > What is the best approach to parse erroneous input? Do I have to create
> > a second grammar that also accepts input with common errors like a
> > missing semicolon?
> > 
> > Or is there a better way where I can just use the parser which only
> > accepts correct input? Maybe I could somehow get the code line which
> > caused the error and use handwritten code for common error cases to
> > extract the information I need? Or maybe there is a way to get the raw
> > tokens that caused the problem from antlr or make it put the best
> > partial derivation it can create into the AST?
> > 
> > Are there any other approaches?
> > 
> > 
> > Best regards,
> > 
> > Andreas
> > 
> > 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From markaren1 at xtra.co.nz  Sun May 16 02:11:51 2010
From: markaren1 at xtra.co.nz (Mark Atherton)
Date: Sun, 16 May 2010 21:11:51 +1200
Subject: [antlr-interest] OT - ANTLR / Eclipse installation problem
In-Reply-To: <00d601caedbd$0e04d500$2a0e7f00$@sannas.org>
References: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>
	<x2x7c29484b1005061806i4ea6d09ew957ed9687e4630af@mail.gmail.com>
	<aa39c786-cadd-4f46-90ad-ec42449556a5@SG2EHSMHS006.ehs.local>
	<008501caed8e$34871f50$9d955df0$@sannas.org>
	<4be3c81a.0663730a.670d.7310@mx.google.com>
	<00d601caedbd$0e04d500$2a0e7f00$@sannas.org>
Message-ID: <20100516091152.ESGZ574.mta02.xtra.co.nz@mainmachine.xtra.co.nz>

Hi All,

Sorry to be a pest, I know this is OT but I am pulling my hair out.

I have been following the jolly good ANTLR video tutorials by Scott 
Stanchfield and up until last week had managed to make my way through 
to part 3 without too many problems.

My HD fell over late last week and I have just completed 
re-installing XP/32 on a 586 machine.

Having installed "jre-6u20-windows-i586-s.exe" and unzipped and 
located to a good run location (near the root) "eclipse-SDK-3.5.2-win32.zip"

Running Eclipse -> Help -> Install New Software -> Available software 
sites -> Galileo -> Test Connection, I get the message 
"http://download.eclipse.org/releases/galileo is available" - so far so good.

While attempted to installing Dynamic Language Tools, GEF and ZEST 
there seems to be a NEXT button click step missing (associated with 
accepting license, maybe I saw it once).

In any case, I get the error messages below.

I have been through this several times and also tried it on a machine 
with a fresh install of XP - both machines behave the same.

A week ago I went through the whole installation process and had 
ANTLR / Eclipse up and running in a couple of hours (with help from 
Scott's installation video).

The latest installation is a completely fresh install of XP on a new HD.

I did notice that Scott's video refers to Eclipse 3.5.1 and I have 3.5.2...

Any pointers appreciated.

Thanks,

Mark (thinning, approaching bald)

============

An error occurred while collecting items to be installed
   session context was:(profile=SDKProfile, 
phase=org.eclipse.equinox.internal.provisional.p2.engine.phases.Collect, 
operand=, action=).
   No repository found containing: 
osgi.bundle,org.eclipse.dltk,1.0.1.v20090903-2153
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.console,1.0.0.v20090610-1638
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.console.ui,1.0.0.v20090610-1638
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.core,1.0.2.v20100209-1928
   No repository found containing: 
org.eclipse.update.feature,org.eclipse.dltk.core,1.0.2.v20100208-7C-77EAAoORwQXXqBeY-d
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.debug,1.0.0.v20090613-1432
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.debug.ui,1.0.1.v20091111-1837
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.formatter,1.0.1.v20090903-2153
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.launching,1.0.1.v20090910-1601
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.testing,1.0.0.v20090610-1638
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.ui,1.0.2.v20100209-1928
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.validators.core,1.0.0.v20090610-1638
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.validators.externalchecker,1.0.0.v20090610-1638
   No repository found containing: 
osgi.bundle,org.eclipse.dltk.validators.ui,1.0.0.v20090610-1638
   No repository found containing: 
osgi.bundle,org.eclipse.draw2d,3.5.2.v20091126-1908
   No repository found containing: 
org.eclipse.update.feature,org.eclipse.draw2d,3.5.2.v20100111-1352-4417w311A223702A19
   No repository found containing: 
osgi.bundle,org.eclipse.emf.common,2.5.0.v200906151043
   No repository found containing: 
osgi.bundle,org.eclipse.emf.ecore,2.5.0.v200906151043
   No repository found containing: 
osgi.bundle,org.eclipse.emf.ecore.change,2.5.0.v200906151043
   No repository found containing: 
org.eclipse.update.feature,org.eclipse.emf.ecore,2.5.0.v200906151043
   No repository found containing: 
osgi.bundle,org.eclipse.emf.ecore.xmi,2.5.0.v200906151043
   No repository found containing: 
osgi.bundle,org.eclipse.gef,3.5.1.v20090910-2020
   No repository found containing: 
org.eclipse.update.feature,org.eclipse.gef,3.5.2.v20100111-1352-777928194B66D5D476C33B2A
   No repository found containing: 
osgi.bundle,org.eclipse.zest.core,1.1.0.v20090504-1850
   No repository found containing: 
org.eclipse.update.feature,org.eclipse.zest,1.1.2.v20100111-1352-6618yD6DH8G6N59OM53B2A
   No repository found containing: 
osgi.bundle,org.eclipse.zest.layouts,1.1.0.v20090504-1850


From parrt at cs.usfca.edu  Sun May 16 13:05:01 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 16 May 2010 13:05:01 -0700
Subject: [antlr-interest] ANTLRWorks 1.4 released
In-Reply-To: <55C2B43F-9CE6-4C6C-980E-117A9BFBF280@los-alamos.net>
References: <AANLkTik62rxCjzI8U-Tb3g7zqP4i3fD4KYi5wmWCQLFz@mail.gmail.com>
	<2C1C6532-ED6B-4440-832E-5D037D862CF6@cs.usfca.edu>
	<C7B4FFBB-98F8-4E91-8556-90134A56EA8E@los-alamos.net>
	<D015BFAE-2562-42E6-AADE-5D0211EA6BE4@cs.usfca.edu>
	<55C2B43F-9CE6-4C6C-980E-117A9BFBF280@los-alamos.net>
Message-ID: <0C8D366A-2F88-4351-B156-A44A6BAD93BB@cs.usfca.edu>

Hi William. thanks much for the thoughts. My biggest problem is that Jean it is no longer able to maintain the software and I'm busy with all of my other software maintenance projects. Further, I think that I will end-of-life AW for version 3 of ANTLR and work with somebody else for ANTLR v4's tool. It would take me considerable effort to modify the internals of AW to work with the new version of ANTLR since it accesses some many of the guts.

Ter

On May 12, 2010, at 6:52 PM, William B. Clodius wrote:
> This is a problem with human interface design, and humans are notoriously error prone and impatient which makes human interface design very difficult. What typically happens with me is ANTLRWorks starts up with the Syntax Diagram display, I do an extensive edit, ask it to Generate Code, it tells me there are errors and to check the Console, I go there to see the errors and they start scrolling off the screen as it continues to report errors due to intermediate changes that have not fixed the error I am working on. Turning up the delay is an unintuitive kluge that will continually cause problems for newbys. Also ANTLRWorks became less stable after this behavior appeared and less responsive. Could the error reporting be keeping track of more state than earlier versions?
> 
> Think about what you want from the console and even if you want the console. Can the functionality be put in the Interpreter or Debugger? A keyboard command to go to the next error could work well in another window.
> 
> If you had a mode that distinguished errors and only errors that might be good. For me highlighting is already being overused. Why do you need to visually distinguish minor aspects of syntax? Particularly when most syntactic elements are already distinguished by capitalization rules. How do the color blind deal with it?
> 
> How is ANTLRWorks deciding  when to check for errors? From Jim's comment it sounds as if it checks if a given interval has passed since the last keystroke. I would instead check either after a command to check, or after one of a finite set of keystrokes i.e. a carriage return or a space that would not normally be associated with changing an ANTLR lexical item. I would make checking after those keystrokes a user selectable preference. I would never check after a delete or the entry of a printable character.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jogojapan at gmail.com  Mon May 17 00:02:53 2010
From: jogojapan at gmail.com (Johannes Goller)
Date: Mon, 17 May 2010 16:02:53 +0900
Subject: [antlr-interest] Error handling using parallel instances of a
	C-target parser
Message-ID: <AANLkTiksRIZ5xb1bFjF3Z515SzTMIzoBadtXDhkmKFWn@mail.gmail.com>

Thank you, Jim, for the quick reply.
I read through all the posts I could find related to
displayRecognitionError, but I still have one question:
Inside my new definition of displayRecongitionError, how do I access
the members of my parser defined
through @apifuncs?

displayRecongitionError has two arguments: the recognizer and the
token names. The recognizer appears
to contain a "super" pointer that leads to the ANTLR3_PARSER struct.
That also has a "super" member, but
I don't understand where it points to.
How can I get to the data structure, whose members are defined by @apifuncs?


Many thanks,
johannes.


Use antlr.markmail.org and look for displayRecognitionError. Remember that if
you have parallel threads, you will want the error collections to be thread
instances, not global members. Therefore you add them as context members
@apifuncs etc.

http://antlr.markmail.org/search/?q=apifuncs#

http://antlr.markmail.org/search/?q=displayRecognitionError+C

Jim

-----Original Message----- From: antl... at antlr.org
[mailto:antlr-interest- boun... at antlr.org] On Behalf Of Johannes
Goller Sent: Sunday, May 09, 2010 11:05 PM To: antl... at antlr.org
Subject: [antlr-interest] Error handling using parallel instances of a
C-target parser

Hello,

I am working with a C-target parser, and I have multiple instances of
the parser running in parallel.

Now I would like to stop the parser from printing error messages to
stderr. Instead, I would like each instance of the parser to collect
the error messages in a list of strings, so that the caller can access
the complete list of error messages after the parser finished and
decide what to do about them.

>From an example I found here: http://groups.google.com/group/il-antlr-
interest/browse_thread/thread/80ec25032e9af7a8?pli=1 I understand how
members of the parser instance can be defined using @parser::context
and @parser::apifuncs, and that works very well. So, let's say I
defined a member

error_list_t *error_list

which points to some kind of dynamic list structure, and assume there
is a global function

add_to_error_list(error_list_t *, const char* msg)

which can be used to add a new message to the list.

Now I wonder how can the error handling methods of ANTLR be modified
to add error messages to the list rather than printing them to stderr.

Looking at various sources on the internet, it seems there is a
function emitErrorMessage() which is called whenever an error occurs.
Taking that as a starting point, I have the following questions:

(1) Is that the right function to override? Or is there a better one?
(2) How exactly do I have to specifiy the override in the ANTLR
grammar? (3) How can I access the current instance of the parser from
inside the error handling function? Remember that error_list must be a
member of the parser, rather than a global object, because I have
several parsers operating in parallel.

Many thanks for any help.

johannes.

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
email-address

From horst.dehmer at gmail.com  Mon May 17 07:01:27 2010
From: horst.dehmer at gmail.com (Horst Dehmer)
Date: Mon, 17 May 2010 16:01:27 +0200
Subject: [antlr-interest] Streaming Support
Message-ID: <B9006942-799C-4CD0-8AC7-DE447BAAC902@gmail.com>

Hi there,

I'd like to parse 'large' streams (200 MBytes and more) with only  
small chunks of data (tokens/characters) in memory at a time.
The goal is that the parser/lexer should block until more chars are  
available from the underlying input stream. I have a few simple  
'callbacks' embedded in the grammar which call into the business logic  
to process recognized data. But with the standard setup, the callbacks  
are just called after the complete input stream was read.

// uncompressed replication transaction.
transaction
   : { if(callback != null) callback.startTransaction(); }
     x01 (update_type)+
     { if(callback != null) callback.endTransaction(); }
   ;

update_type
   : entityId = entity_id '{' (values = basic_update)+ '}'
     { if(callback != null) callback.updateType(entityId, values); }
   ;

basic_update returns [List<String> values]
@init {
   values = new ArrayList<String>();
}
   : '{' s = value { values.add(s); } ('|' (s = value  
{ values.add(s); } )? )* '}'
   ;

There are a few reasons why I'd like to do it this way:

1. the data is received in rather small chunks (< 4k or so) from NIO  
sockets
2. I don't want to buffer the data on the file system (file I/O)
3. have as small a memory footprint as possible
4. it is possible that many streams are processed/parsed at one time

I'm using ANTLR 3.1.3 (Java/Scala).

 From what I see CommonTokenStream.fillBuffer() is pretty greedy and  
loads all tokens at once. Right now I'm using ANTLRInputStream as the  
CharStream.

Is there a (simple) way to accomplish this? What would be the right  
approach: a custom Token Stream or rather another Char Stream? BTW:  
Lookahead of 1 is fine for me.

Thanks for your help.

Cheers,
	Horst



From sameh.wz at gmail.com  Mon May 17 07:33:23 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Mon, 17 May 2010 16:33:23 +0200
Subject: [antlr-interest] ANTLR Two Simple Questions :-)
In-Reply-To: <AANLkTikHxplNK-VkahqtepISzP-9-osu7nWyFUjAmnjE@mail.gmail.com>
References: <AANLkTikHxplNK-VkahqtepISzP-9-osu7nWyFUjAmnjE@mail.gmail.com>
Message-ID: <AANLkTikeS0XlwvoB9BnB3dK4eKEBv0m2qNC2593Ic0kD@mail.gmail.com>

Dear All,

I am a Masters student, I use Java, and I am trying to make my parser with
the help of ANTLR. I need this for my Masters project.
I am using ANTLRWorks 1.3.1
I had 2 questions concerning it:

1) How can I have a dynamic token name (or dynamic lexer)?
*Example: (the symbol SERVICE, will have different token values, depending
on certain list (array) whose contents change over time)*
*
*
So, in some scenario, SERVICE will, let's say, have the following form:
*SERVICE* : ('networking' | 'internet' | 'intranet') ;

But in other scenario, I want service to address a different set of token
values, let's say:
*SERVICE* : ('hardware' | 'software') ;

=========================================================
I tried to solve it in 2 ways:
A) each time the contents of the array change, I generate a new grammar
file, *but I faced the problem:* that I did not find the method that takes
as input the grammar file (.g) and generates the tokens file, the
lexer.java, and the parser.java (i.e. the exact task that is done by the
button 'Generate Code' in ANTLRWorks 1.3.1)
B) I tried to play in the generated Lexer.java, but I fear that this might
destroy my plans in point 2 (if what I will ask in this point is doable)

2) Given a certain grammar, how can I (or: is it possible to) get the list
of all possible next tokens? In other words, is there a method (or a trick
to make such a method) that takes as input a grammar, and a non-complete
(but so far correct) sentence of this grammar and gives as output the set of
all possible next tokens that can be inserted to keep the sentence true?
*Example: (the good thing is that all tokens to be used are pre-defined, so
we do NOT have a rule such as ID  : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..
'Z'|'0'..'9'|'_')*;)*

*start* : *ANIMAL* ('or' *ANIMAL*)* 'and' *SERVICE EOF* ;

*ANIMAL* : ('dog' | 'cat' | 'horse') ;
*SERVICE* : ('hardware' | 'software') ;

==========================================================
So, imagine this scenario:
A) the user inserts "dog" and now asks for the autocomplete, so I want to
give the user the list of possible next tokens that he can write, and the
list will be "or, and"
B) Now let's say the user chose "or", so the sentence now is "dog or" and
then asks for the autocomplete so I display the list "dog, cat, horse"
C) .. and so forth :-)


Any Idea?
Many Thanks for your time :-)
-- 
Sameh W. Zaky

From cross at kojeware.com  Mon May 17 08:23:23 2010
From: cross at kojeware.com (Cameron Ross)
Date: Mon, 17 May 2010 11:23:23 -0400
Subject: [antlr-interest] Adding parameters to lexer and parser constructors
Message-ID: <AANLkTinFvxJgegGlAOauZ6Ckxc8bpAFLQCtD-1BOiMwv@mail.gmail.com>

Hi,

I'm implementing custom error reporting as per these instructions:
http://www.antlr.org/wiki/display/ANTLR3/Error+reporting+and+recovery. As
mentioned in this post, "it is generally the case that the destination for
errors does not change once lexing and parsing has begun, so a refinement on
the above solution is to pass the error reporter object in as an extra
parameter to the lexer and parser constructor methods, instead of using a
completely separate method".  I would like to implement this refinement,
 but I
m not sure how to specify custom constructors for the lexer and parser.  Any
advice would be greatly appreciated.

Cameron.

From jimi at temporal-wave.com  Mon May 17 09:48:32 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 17 May 2010 09:48:32 -0700
Subject: [antlr-interest] Error handling using parallel instances of a
	C-target parser
In-Reply-To: <AANLkTiksRIZ5xb1bFjF3Z515SzTMIzoBadtXDhkmKFWn@mail.gmail.com>
Message-ID: <544f85e9c1c8024b9c0a88c2261dfafd@temporal-wave.com>

Read through this, which shows you how to get back through the chain.

http://markmail.org/message/taakrcaujhqk7uy4

You can use the CTX macro to get the overall context pointer and store that somewhere accessible by you too.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Johannes Goller
> Sent: Monday, May 17, 2010 12:03 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Error handling using parallel instances
> of a C-target parser
> 
> Thank you, Jim, for the quick reply.
> I read through all the posts I could find related to
> displayRecognitionError, but I still have one question:
> Inside my new definition of displayRecongitionError, how do I access
> the members of my parser defined
> through @apifuncs?
> 
> displayRecongitionError has two arguments: the recognizer and the
> token names. The recognizer appears
> to contain a "super" pointer that leads to the ANTLR3_PARSER struct.
> That also has a "super" member, but
> I don't understand where it points to.
> How can I get to the data structure, whose members are defined by
> @apifuncs?
> 
> 
> Many thanks,
> johannes.
> 
> 
> Use antlr.markmail.org and look for displayRecognitionError. Remember
> that if
> you have parallel threads, you will want the error collections to be
> thread
> instances, not global members. Therefore you add them as context
> members
> @apifuncs etc.
> 
> http://antlr.markmail.org/search/?q=apifuncs#
> 
> http://antlr.markmail.org/search/?q=displayRecognitionError+C
> 
> Jim
> 
> -----Original Message----- From: antl... at antlr.org
> [mailto:antlr-interest- boun... at antlr.org] On Behalf Of Johannes
> Goller Sent: Sunday, May 09, 2010 11:05 PM To: antl... at antlr.org
> Subject: [antlr-interest] Error handling using parallel instances of a
> C-target parser
> 
> Hello,
> 
> I am working with a C-target parser, and I have multiple instances of
> the parser running in parallel.
> 
> Now I would like to stop the parser from printing error messages to
> stderr. Instead, I would like each instance of the parser to collect
> the error messages in a list of strings, so that the caller can access
> the complete list of error messages after the parser finished and
> decide what to do about them.
> 
> >From an example I found here: http://groups.google.com/group/il-antlr-
> interest/browse_thread/thread/80ec25032e9af7a8?pli=1 I understand how
> members of the parser instance can be defined using @parser::context
> and @parser::apifuncs, and that works very well. So, let's say I
> defined a member
> 
> error_list_t *error_list
> 
> which points to some kind of dynamic list structure, and assume there
> is a global function
> 
> add_to_error_list(error_list_t *, const char* msg)
> 
> which can be used to add a new message to the list.
> 
> Now I wonder how can the error handling methods of ANTLR be modified
> to add error messages to the list rather than printing them to stderr.
> 
> Looking at various sources on the internet, it seems there is a
> function emitErrorMessage() which is called whenever an error occurs.
> Taking that as a starting point, I have the following questions:
> 
> (1) Is that the right function to override? Or is there a better one?
> (2) How exactly do I have to specifiy the override in the ANTLR
> grammar? (3) How can I access the current instance of the parser from
> inside the error handling function? Remember that error_list must be a
> member of the parser, rather than a global object, because I have
> several parsers operating in parallel.
> 
> Many thanks for any help.
> 
> johannes.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Mon May 17 09:54:43 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 17 May 2010 09:54:43 -0700
Subject: [antlr-interest] ANTLR Two Simple Questions :-)
In-Reply-To: <AANLkTikeS0XlwvoB9BnB3dK4eKEBv0m2qNC2593Ic0kD@mail.gmail.com>
Message-ID: <21a311d78cf7824fa2a99fcc1dc9e207@temporal-wave.com>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sameh W. Zaky
> Sent: Monday, May 17, 2010 7:33 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR Two Simple Questions :-)
> 
> Dear All,
> 
> I am a Masters student, I use Java, and I am trying to make my parser
> with
> the help of ANTLR. I need this for my Masters project.
> I am using ANTLRWorks 1.3.1
> I had 2 questions concerning it:
> 
> 1) How can I have a dynamic token name (or dynamic lexer)?
> *Example: (the symbol SERVICE, will have different token values,
> depending
> on certain list (array) whose contents change over time)*

Match the possible sequences generally, then change the token type if the strings match your dynamic list:

fragment SERVICE : ;
ID : ('a'..'z')+
    {
       If (myLookupMethod($text)) { $type = SERVICE; }
    }
  ;

So the token ID will be returned if the matched text is not in your list and the token SERVICE will be returned if it is.


> 2) Given a certain grammar, how can I (or: is it possible to) get the
> list
> of all possible next tokens? 

Read: http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery 

Do I get a masters too? ;-)

Jim




From Todd.T.Stevenson at ge.com  Mon May 17 10:34:18 2010
From: Todd.T.Stevenson at ge.com (Stevenson, Todd (GE Healthcare))
Date: Mon, 17 May 2010 13:34:18 -0400
Subject: [antlr-interest] Combined grammars behave differently than separate
	parser/lexer grammars
Message-ID: <B4B0A329ACAB3247830EA5930E0C902F0740CA85@ALPMLVEM16.e2k.ad.ge.com>

I recently split a combined grammar that I had built into separate
parser and lexer grammars.  I noticed  that in the combined grammar when
I attempt to reference an undefined token, Antlr throws an error.
However, after I split this grammar into separate lexer and parser
grammars, Antlr allowed me to reference lexer tokens in the parser
grammar not defined by the lexer grammar.  These become very difficult
to debug.   Am I missing something, or is the the correct behavior?
 
thanks.
 
 

From jimi at temporal-wave.com  Mon May 17 10:43:37 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 17 May 2010 10:43:37 -0700
Subject: [antlr-interest] Combined grammars behave differently than
	separate parser/lexer grammars
In-Reply-To: <B4B0A329ACAB3247830EA5930E0C902F0740CA85@ALPMLVEM16.e2k.ad.ge.com>
Message-ID: <cec8dda7fddb4f48bc0ecc1a1ad3b8a0@temporal-wave.com>

No, it is a bug and I fall for it all the time too with large grammars. It turns out to be not so easy to fix because there are cases when tokens should be added silently. I think when I looked at it, we were unable to distinguish between cases as the information needed to know what to do is elided by that point. Then Ter is working on v4 and so nothing happened with this I am afraid.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Stevenson, Todd (GE Healthcare)
> Sent: Monday, May 17, 2010 10:34 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Combined grammars behave differently than
> separate parser/lexer grammars
> 
> I recently split a combined grammar that I had built into separate
> parser and lexer grammars.  I noticed  that in the combined grammar
> when
> I attempt to reference an undefined token, Antlr throws an error.
> However, after I split this grammar into separate lexer and parser
> grammars, Antlr allowed me to reference lexer tokens in the parser
> grammar not defined by the lexer grammar.  These become very difficult
> to debug.   Am I missing something, or is the the correct behavior?
> 
> thanks.
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From nourchn at gmail.com  Mon May 17 10:49:38 2010
From: nourchn at gmail.com (Nourchn Nor)
Date: Mon, 17 May 2010 19:49:38 +0200
Subject: [antlr-interest] Some error in debug
Message-ID: <AANLkTin5knuo1DW3G10lXRs_QOjecCNo7n7x0drGpx6w@mail.gmail.com>

Please I have some problem during debug of Tree Walker of an grammar.
1st, In the tree Parser I meet about errors and the example cannot be all to
"Tree" and here is the error "org.antlr.runtime.EarlyExitException "
2eme, In the part output of debugger, I meet this error " 1:24 no viable
alternative at input ' \r\n' "
3eme, In the part Input of debugger of Tree Walker, this input is in the
form of Tree, not the input that I download.
 I work with the ANTLRWorks1.3.1

Please, help me

From ron.hunter-duvar at oracle.com  Mon May 17 10:56:49 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Mon, 17 May 2010 11:56:49 -0600
Subject: [antlr-interest] Combined grammars behave differently than
 separate parser/lexer grammars
In-Reply-To: <B4B0A329ACAB3247830EA5930E0C902F0740CA85@ALPMLVEM16.e2k.ad.ge.com>
References: <B4B0A329ACAB3247830EA5930E0C902F0740CA85@ALPMLVEM16.e2k.ad.ge.com>
Message-ID: <4BF18361.9050008@oracle.com>

As a work around for this, I wrote a short script that sorts each of the 
*.token files and diffs them. The only tokens that should show up as 
added in the parser are those that are defined in the tokens section at 
the top (I only use that for token types being used as imaginary AST 
nodes, and I distinguish these by naming convention). If all your token 
types are supposed to be defined in the lexer, then there should be no 
diffs.

Ron


Stevenson, Todd (GE Healthcare) wrote:
> I recently split a combined grammar that I had built into separate
> parser and lexer grammars.  I noticed  that in the combined grammar when
> I attempt to reference an undefined token, Antlr throws an error.
> However, after I split this grammar into separate lexer and parser
> grammars, Antlr allowed me to reference lexer tokens in the parser
> grammar not defined by the lexer grammar.  These become very difficult
> to debug.   Am I missing something, or is the the correct behavior?
>  
> thanks.
>  
>  
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From bill.andersen at mac.com  Mon May 17 11:47:59 2010
From: bill.andersen at mac.com (Bill Andersen)
Date: Mon, 17 May 2010 14:47:59 -0400
Subject: [antlr-interest] Stringtemplate: passing args to templates passed
	as args
Message-ID: <5D1148C5-854F-4E76-9C27-D10CF8711657@mac.com>

Folks

I have the following template def

emitMatchListReluctant(in,v1,v2,c2,v3,fail) ::= <<
<v1> = new LinkedList\<Form\>();
<v3> = new LinkedList\<Form\>();
matched = false;
for (Form <v2> : <in>) {
  <c2>
  if (!matched) {
    <v1>.add(<v2>);
  } else {
    <v3>.add(<v2>);
  }
}
if (!matched) {
  <if (fail)><fail><else>return false;<endif>
}
>>

c2 is a template argument passed into this template.  What I'd like to do is, where <c2> appears above, to pass an extra parameter to the template that is the actual parameter for c2.  Something like

	<c2 param=value>

to influence the expansion of <c2>

Is this possible?  If so, how?  I can't find it.

Thanks

	Bill

From marcel at schaible-consulting.de  Mon May 17 14:14:05 2010
From: marcel at schaible-consulting.de (Marcel Schaible)
Date: Mon, 17 May 2010 23:14:05 +0200
Subject: [antlr-interest] Variants of a grammar
Message-ID: <4BF1B19D.3090401@schaible-consulting.de>

Hi,

I am currently reworking some old big YACC grammar files. Each of them 
(about 15 different YACC files with 5kB to 80Kb size) are describing a 
command language for a specific hardware device and share a lot of 
common rules. Now I was wondering if it is feasable to do some kind of 
object-oriented approach like put all shared rules in some kind of a 
base class and all the special command and command derivations in a 
derived class.  Another idea I am thinking of is using StringTemplate to 
generate the YACC grammar files.

Maybe one of you stumbled over a similar problem and has a nice solution 
and could push me in the rigth direction?

Thanks for sharing your thoughts in advance!

Marcel

From kirby.bohling at gmail.com  Mon May 17 15:32:25 2010
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Mon, 17 May 2010 17:32:25 -0500
Subject: [antlr-interest] Variants of a grammar
In-Reply-To: <4BF1B19D.3090401@schaible-consulting.de>
References: <4BF1B19D.3090401@schaible-consulting.de>
Message-ID: <AANLkTilviHGsl2uor3qEDB-VYNyIoChJ2UEU0Ko8V2O3@mail.gmail.com>

On Mon, May 17, 2010 at 4:14 PM, Marcel Schaible
<marcel at schaible-consulting.de> wrote:
> Hi,
>
> I am currently reworking some old big YACC grammar files. Each of them
> (about 15 different YACC files with 5kB to 80Kb size) are describing a
> command language for a specific hardware device and share a lot of
> common rules. Now I was wondering if it is feasable to do some kind of
> object-oriented approach like put all shared rules in some kind of a
> base class and all the special command and command derivations in a
> derived class. ?Another idea I am thinking of is using StringTemplate to
> generate the YACC grammar files.
>
> Maybe one of you stumbled over a similar problem and has a nice solution
> and could push me in the rigth direction?

My immediate thought is to use split grammars, and import the common
rules into the specifics.

http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars

I've used this with TreeWalkers and Parsers.  Each phase of my
TreeWalker did one or two mundane things to 3-4 rules out of ~100,
rather then duplicate all 100 rules, I just imported the base
"walker", and override any rules I needed to in the specific file.
This is probably a really bad idea from a performance perspective, but
it was really easy to debug and mentally manage each "phase" my
walkers implemented independently.  However, you wouldn't have the
performance concerns.

I'm pretty sure I made the Lexers all act the same, not sure how well
that would work.

Kirby


>
> Thanks for sharing your thoughts in advance!
>
> Marcel
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Mon May 17 15:32:47 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 17 May 2010 15:32:47 -0700
Subject: [antlr-interest] Variants of a grammar
In-Reply-To: <4BF1B19D.3090401@schaible-consulting.de>
Message-ID: <59608673184ba041aaba382170f545d2@temporal-wave.com>

Use the import feature to include grammars in more than one file.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Marcel Schaible
> Sent: Monday, May 17, 2010 2:14 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Variants of a grammar
> 
> Hi,
> 
> I am currently reworking some old big YACC grammar files. Each of them
> (about 15 different YACC files with 5kB to 80Kb size) are describing a
> command language for a specific hardware device and share a lot of
> common rules. Now I was wondering if it is feasable to do some kind of
> object-oriented approach like put all shared rules in some kind of a
> base class and all the special command and command derivations in a
> derived class.  Another idea I am thinking of is using StringTemplate
> to
> generate the YACC grammar files.
> 
> Maybe one of you stumbled over a similar problem and has a nice
> solution
> and could push me in the rigth direction?
> 
> Thanks for sharing your thoughts in advance!
> 
> Marcel
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From sameh.wz at gmail.com  Mon May 17 16:00:38 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Tue, 18 May 2010 01:00:38 +0200
Subject: [antlr-interest] ANTLR Problem When a Token Name is a Prefix of
	Another Token Name
Message-ID: <AANLkTinSUe9C9-kQy67k638yhhjKKOY8LmTw7n-ok-um@mail.gmail.com>

Hey all,

In the following simple grammar:

*start* : *ANIMAL* ('or' *ANIMAL*)* 'and' *SERVICE EOF* ;

*ANIMAL* : ('dog' | 'cat' | 'horse') ;
*SERVICE* : ('dog hardware' | 'software') ;

NOTICE: 'dog' is a proper prefix of 'dog hardware'..
======================================================

*When I run this grammar by giving an input sentence, something goes wrong
whenever I use the token 'dog'..*
"dog and software" --> "dog and" disappears in the input box, and also in
the tree
"dog or cat or software"  --> "dog or" disappears in the input box, and also
in the tree
"cat or dog and software" --> "dog and" disappears..

*While there is no problem with the token 'dog hardware'*
"cat and dog hardware" --> works fine..

I know the reason.. It's because the grammar is confused when one token is a
proper prefix of another token.. So the token with the bigger length works
fine while the other one doesn't..

Any solution to this problem? (Other than changing the name of the token
because in my real grammar I really need the token names to stay as they
are)

Many Thanks for your time :-)

-- 
Sameh W. Zaky

From parrt at cs.usfca.edu  Mon May 17 16:08:14 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 17 May 2010 16:08:14 -0700
Subject: [antlr-interest] ANTLR v4 generates its first parser and lexer!
Message-ID: <4B2B7BDE-4AE7-4D60-8F65-A3527DD80459@cs.usfca.edu>

Hiya. I am working hard on the code generator infrastructure for v4. I'm extremely pleased with how the internals look and how easy it is to build the templates for source code generation. Also, I'm very happy with how the lexer bytecode interpreter has worked out. Here is the simple parser and lexer I ran through the system:

parser grammar T;
options { tokenVocab = L; }

a : ID '=' expr ;

expr : INT ;

lexer grammar L;

ID : 'a'..'z'+ ;
INT : '0'..'9'+ ;
EQ : '=' ;

Just popping my head up as v4 hits milestones...

v4 runtime is almost exactly the same as v3 runtime.  so far, the v4 grammar syntax is identical as well (hurray!)

I still have a long way to go because ANTLR has so many little features and lots of  implementation details to worry about. I also need to work on an academic paper this summer, which will delay me for a few months.

Ter


From andyh at sunrunhome.com  Mon May 17 17:25:01 2010
From: andyh at sunrunhome.com (Andy Hull)
Date: Mon, 17 May 2010 17:25:01 -0700
Subject: [antlr-interest] A little trouble with parsing unary operators
Message-ID: <17A4449B-F4C0-4460-B110-4B1CA1BAD18B@sunrunhome.com>

Hi everyone,

I really need my parser to emit something like this for unary values:

  unary: ^(NOT unary) | ^(NEGATE unary);

because I need to deal with recursive unary constructs like !!17

but I'm having difficulty with the parser. Currently I have a parser rule like:

unary:   ((NOT | NEGATE)^)? term;

but clearly this won't handled nested unary operators. Given that for the input:

!!17

I need to produce

^(NOT ^(NOT INTEGER))

Can someone point me in the correct direction?

Thanks in advance!

Andy

--


From andyh at sunrunhome.com  Mon May 17 17:43:33 2010
From: andyh at sunrunhome.com (Andy Hull)
Date: Mon, 17 May 2010 17:43:33 -0700
Subject: [antlr-interest] A little trouble with parsing unary operators
In-Reply-To: <17A4449B-F4C0-4460-B110-4B1CA1BAD18B@sunrunhome.com>
References: <17A4449B-F4C0-4460-B110-4B1CA1BAD18B@sunrunhome.com>
Message-ID: <27D9AB8C-3175-4F37-8175-BA387BC3FD57@sunrunhome.com>

I've been looking at this for several hours... and then I am grated inspiration just after I send the email to the group...

unary
:
(NOT | NEGATE)^ unary
|
term
;



On May 17, 2010, at 5:25 PM, Andy Hull wrote:

Hi everyone,

I really need my parser to emit something like this for unary values:

 unary: ^(NOT unary) | ^(NEGATE unary);

because I need to deal with recursive unary constructs like !!17

but I'm having difficulty with the parser. Currently I have a parser rule like:

unary:   ((NOT | NEGATE)^)? term;

but clearly this won't handled nested unary operators. Given that for the input:

!!17

I need to produce

^(NOT ^(NOT INTEGER))

Can someone point me in the correct direction?

Thanks in advance!

Andy

--


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

--
Andy Hull | Senior Software Engineer
SunRun Inc.<http://www.sunrunhome.com/>
direct  415.684.9851

Review SunRun on Yelp<http://www.yelp.com/biz/sunrun-san-francisco>
click on the link above and then on ?write a review?


From wclodius at los-alamos.net  Mon May 17 20:31:57 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Mon, 17 May 2010 21:31:57 -0600
Subject: [antlr-interest] ANTLR Problem When a Token Name is a Prefix of
	Another Token Name
In-Reply-To: <AANLkTinSUe9C9-kQy67k638yhhjKKOY8LmTw7n-ok-um@mail.gmail.com>
References: <AANLkTinSUe9C9-kQy67k638yhhjKKOY8LmTw7n-ok-um@mail.gmail.com>
Message-ID: <05F75F3E-0D4D-4AB8-A4F4-CAA731E7CD73@los-alamos.net>


On May 17, 2010, at 5:00 PM, Sameh W. Zaky wrote:

> Hey all,
> 
> In the following simple grammar:
> 
> *start* : *ANIMAL* ('or' *ANIMAL*)* 'and' *SERVICE EOF* ;
> 
> *ANIMAL* : ('dog' | 'cat' | 'horse') ;
> *SERVICE* : ('dog hardware' | 'software') ;
> 
> NOTICE: 'dog' is a proper prefix of 'dog hardware'..
> ======================================================
> 
> *When I run this grammar by giving an input sentence, something goes wrong
> whenever I use the token 'dog'..*
> "dog and software" --> "dog and" disappears in the input box, and also in
> the tree
> "dog or cat or software"  --> "dog or" disappears in the input box, and also
> in the tree
> "cat or dog and software" --> "dog and" disappears..
> 
> *While there is no problem with the token 'dog hardware'*
> "cat and dog hardware" --> works fine..
> 
> I know the reason.. It's because the grammar is confused when one token is a
> proper prefix of another token.. So the token with the bigger length works
> fine while the other one doesn't..
> 
> Any solution to this problem? (Other than changing the name of the token
> because in my real grammar I really need the token names to stay as they
> are)
<snip>

Sameh:

Resolving this problem requires lookahead in a form more commonly used in syntactic analysis and not lexical analysis. Is there really a good reason why they have to be lexical elements (tokens) and not syntactic elements (productions)? What will you do if the input has two spaces between the words in your token e.g., between 'dog' and 'hardware'?

For example why isn't the following acceptable?

*start* : *animal* ('or' *animal*)* 'and' *service EOF* ;

*animal* : (DOG | CAT | HORSE) ;
*DOG* : 'dog';
*CAT* : 'cat';
*HORSE* : 'horse';
*service* : (DOG HARDWARE | SOFTWARE) ;
*HARDWARE* : 'hardware';
*SOFTWARE* : 'software';

From sameh.wz at gmail.com  Tue May 18 07:35:36 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Tue, 18 May 2010 16:35:36 +0200
Subject: [antlr-interest] Find X :-)
Message-ID: <AANLkTimAVwx6cIroFVksj4VSzEUFcDQS8hPUgHdP03e3@mail.gmail.com>

Dear All,

I have in my grammar:

fragment UNIT_NAME :;

ID : ('a'..'z'|'_')*
{
if ( myLookUpMethod( *X* ) ) $type=UNIT_NAME;
}
;
===============================

Instead of *X*, I wanna refer to the text that is in red.. For example, the
token "w_aw_s"  is ID. I want to take the text of this token "w_aw_s" and
look it up in a certain array and if it is in this array then I set its type
to UNIT_NAME.

P.S.: I tried to replace *X* with *$text* but I receive the error:

[16:15:56] symbol  : method myLookUpMethod(java.lang.String)
[16:15:56] location: class SimpleTestLexer
[16:15:56]             if(myLookUpMethod(getText())) _type=UNIT_NAME;
[16:15:56]                ^
[16:15:56] 1 error

Find X :-)

Many Thanks !
-- 
Sameh W. Zaky

From sameh.wz at gmail.com  Tue May 18 08:10:30 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Tue, 18 May 2010 17:10:30 +0200
Subject: [antlr-interest] Find X :-)
In-Reply-To: <AANLkTimAVwx6cIroFVksj4VSzEUFcDQS8hPUgHdP03e3@mail.gmail.com>
References: <AANLkTimAVwx6cIroFVksj4VSzEUFcDQS8hPUgHdP03e3@mail.gmail.com>
Message-ID: <AANLkTinThAcVoD5Rd8xf51k69c22ntIVin6nIuMDTufj@mail.gmail.com>

OK, Sorry for that!

Just after I have sent this message I realized that the problem is that
ANTLR cannot find my method myLookUpMethod..
I have defined it in @members{} part of the grammar file.. But ANTLR still
cannot find it.. Any idea?

On Tue, May 18, 2010 at 4:35 PM, Sameh W. Zaky <sameh.wz at gmail.com> wrote:

> Dear All,
>
> I have in my grammar:
>
> fragment UNIT_NAME :;
>
> ID : ('a'..'z'|'_')*
>  {
> if ( myLookUpMethod( *X* ) ) $type=UNIT_NAME;
>  }
> ;
> ===============================
>
> Instead of *X*, I wanna refer to the text that is in red.. For example,
> the token "w_aw_s"  is ID. I want to take the text of this token "w_aw_s"
> and look it up in a certain array and if it is in this array then I set its
> type to UNIT_NAME.
>
> P.S.: I tried to replace *X* with *$text* but I receive the error:
>
> [16:15:56] symbol  : method myLookUpMethod(java.lang.String)
> [16:15:56] location: class SimpleTestLexer
> [16:15:56]             if(myLookUpMethod(getText())) _type=UNIT_NAME;
> [16:15:56]                ^
> [16:15:56] 1 error
>
> Find X :-)
>
> Many Thanks !
> --
> Sameh W. Zaky
>



-- 
Sameh W. Zaky

From jbb at acm.org  Tue May 18 08:25:00 2010
From: jbb at acm.org (John B. Brodie)
Date: Tue, 18 May 2010 11:25:00 -0400
Subject: [antlr-interest] Find X :-)
In-Reply-To: <AANLkTinThAcVoD5Rd8xf51k69c22ntIVin6nIuMDTufj@mail.gmail.com>
References: <AANLkTimAVwx6cIroFVksj4VSzEUFcDQS8hPUgHdP03e3@mail.gmail.com>
	<AANLkTinThAcVoD5Rd8xf51k69c22ntIVin6nIuMDTufj@mail.gmail.com>
Message-ID: <1274196300.9772.2.camel@gecko.home.org>

On Tue, 2010-05-18 at 17:10 +0200, Sameh W. Zaky wrote:
> OK, Sorry for that!
> 
> Just after I have sent this message I realized that the problem is that
> ANTLR cannot find my method myLookUpMethod..
> I have defined it in @members{} part of the grammar file.. But ANTLR still
> cannot find it.. Any idea?

since it is in the lexer, the method needs to be defined in a
@lexer::members{} section....

@members{} defaults to the parser when placed in a combined grammar.

> 
> On Tue, May 18, 2010 at 4:35 PM, Sameh W. Zaky <sameh.wz at gmail.com> wrote:
> 
> > Dear All,
> >
> > I have in my grammar:
> >
> > fragment UNIT_NAME :;
> >
> > ID : ('a'..'z'|'_')*
> >  {
> > if ( myLookUpMethod( *X* ) ) $type=UNIT_NAME;
> >  }
> > ;
> > ===============================
> >
> > Instead of *X*, I wanna refer to the text that is in red.. For example,
> > the token "w_aw_s"  is ID. I want to take the text of this token "w_aw_s"
> > and look it up in a certain array and if it is in this array then I set its
> > type to UNIT_NAME.
> >
> > P.S.: I tried to replace *X* with *$text* but I receive the error:
> >
> > [16:15:56] symbol  : method myLookUpMethod(java.lang.String)
> > [16:15:56] location: class SimpleTestLexer
> > [16:15:56]             if(myLookUpMethod(getText())) _type=UNIT_NAME;
> > [16:15:56]                ^
> > [16:15:56] 1 error
> >
> > Find X :-)
> >
> > Many Thanks !
> > --
> > Sameh W. Zaky
> >
> 
> 
> 




From jimi at temporal-wave.com  Tue May 18 08:31:46 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 18 May 2010 08:31:46 -0700
Subject: [antlr-interest] ANTLR Two Simple Questions :-)
In-Reply-To: <AANLkTil2ANaSwPCIQ8NFkYf0abREjkMZv97GGo1Fj0RQ@mail.gmail.com>
Message-ID: <342681a8ca67dd4b8dc46fe03619483b@temporal-wave.com>

Well, err the method inArray() is an imaginary method that you will write. It just needs to take a string and see if that string is currently something that should be a UNIT_NAME. If it is real simple then you could just use a standard List object of your choice.

 

Please replay to the list and not my personal email - thanks J

 

Jim

 

From: Sameh W. Zaky [mailto:sameh.wz at gmail.com] 
Sent: Tuesday, May 18, 2010 7:21 AM
To: Jim Idle
Subject: Re: [antlr-interest] ANTLR Two Simple Questions :-)

 

Dear Jim,

 

thanks for your reply.

 

Concerning point (1):

 

I did as you said:

 

fragment UNIT_NAME       :;

 

ID      :           ('a'..'z'|'_')*

          {

                      if(inArray($text)) $type=UNIT_NAME;

          }

          ;

 

But when I click 'run' to run a test I get the error:

D:\My Documents\Downloads\Simple Test Grammar\output\SimpleTestLexer.java:604: cannot find symbol

[16:15:56] symbol  : method inArray(java.lang.String)

[16:15:56] location: class SimpleTestLexer

[16:15:56]                              if(inArray(getText())) _type=UNIT_NAME; 

 

Any idea, how I can overcome this?

 

Thanks again for your time :-)

 

On Mon, May 17, 2010 at 6:54 PM, Jim Idle <jimi at temporal-wave.com> wrote:



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sameh W. Zaky
> Sent: Monday, May 17, 2010 7:33 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR Two Simple Questions :-)
>
> Dear All,
>
> I am a Masters student, I use Java, and I am trying to make my parser
> with
> the help of ANTLR. I need this for my Masters project.
> I am using ANTLRWorks 1.3.1
> I had 2 questions concerning it:
>
> 1) How can I have a dynamic token name (or dynamic lexer)?
> *Example: (the symbol SERVICE, will have different token values,
> depending

> on certain list (array) whose contents change over time)*

Match the possible sequences generally, then change the token type if the strings match your dynamic list:

fragment SERVICE : ;
ID : ('a'..'z')+
   {
      If (myLookupMethod($text)) { $type = SERVICE; }
   }
 ;

So the token ID will be returned if the matched text is not in your list and the token SERVICE will be returned if it is.



> 2) Given a certain grammar, how can I (or: is it possible to) get the
> list
> of all possible next tokens?

Read: http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery

Do I get a masters too? ;-)

Jim




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address




-- 
Sameh W. Zaky




From marcel at schaible-consulting.de  Tue May 18 08:56:02 2010
From: marcel at schaible-consulting.de (Marcel Schaible)
Date: Tue, 18 May 2010 17:56:02 +0200 (MEST)
Subject: [antlr-interest] Variants of a grammar
Message-ID: <201005181556.o4IFu2mZ012701@post.webmailer.de>

Jim and Kirby, thanks for your help . I'll try it out and will give some feedback here.

Marcel

----- original Nachricht --------

Betreff: Re: [antlr-interest] Variants of a grammar
Gesendet: Di, 18. Mai 2010
Von: Jim Idle<jimi at temporal-wave.com>

> Use the import feature to include grammars in more than one file.
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Marcel Schaible
> > Sent: Monday, May 17, 2010 2:14 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Variants of a grammar
> > 
> > Hi,
> > 
> > I am currently reworking some old big YACC grammar files. Each of them
> > (about 15 different YACC files with 5kB to 80Kb size) are describing a
> > command language for a specific hardware device and share a lot of
> > common rules. Now I was wondering if it is feasable to do some kind of
> > object-oriented approach like put all shared rules in some kind of a
> > base class and all the special command and command derivations in a
> > derived class.  Another idea I am thinking of is using StringTemplate
> > to
> > generate the YACC grammar files.
> > 
> > Maybe one of you stumbled over a similar problem and has a nice
> > solution
> > and could push me in the rigth direction?
> > 
> > Thanks for sharing your thoughts in advance!
> > 
> > Marcel
> > 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

--- original Nachricht Ende ----


From cross at kojeware.com  Tue May 18 09:04:02 2010
From: cross at kojeware.com (Cameron Ross)
Date: Tue, 18 May 2010 12:04:02 -0400
Subject: [antlr-interest] Custom lexer and parser constructors
Message-ID: <AANLkTikolZtt_dw7OclFONBlXGx3TmaKU-NPN3WCg9Kt@mail.gmail.com>

Hi,

Is there a way to define custom constructors for ANTLR lexers and parsers?


Thanks,
Cameon.

From jimi at temporal-wave.com  Tue May 18 09:15:55 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 18 May 2010 09:15:55 -0700
Subject: [antlr-interest] Custom lexer and parser constructors
In-Reply-To: <AANLkTikolZtt_dw7OclFONBlXGx3TmaKU-NPN3WCg9Kt@mail.gmail.com>
Message-ID: <102e93de736fdd4dba13dc25ea2dfcc1@temporal-wave.com>

Using a superClass=xyz option will probably get you where you want to be, but you might be better phrasing your question in terms of what you want to achieve rather than whether you can change the constructors.

However, it is just as easy to add members to the class and supply setter methods.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Cameron Ross
> Sent: Tuesday, May 18, 2010 9:04 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Custom lexer and parser constructors
> 
> Hi,
> 
> Is there a way to define custom constructors for ANTLR lexers and
> parsers?
> 
> 
> Thanks,
> Cameon.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From bkiers at gmail.com  Tue May 18 09:18:23 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Tue, 18 May 2010 18:18:23 +0200
Subject: [antlr-interest] Custom lexer and parser constructors
In-Reply-To: <AANLkTikolZtt_dw7OclFONBlXGx3TmaKU-NPN3WCg9Kt@mail.gmail.com>
References: <AANLkTikolZtt_dw7OclFONBlXGx3TmaKU-NPN3WCg9Kt@mail.gmail.com>
Message-ID: <AANLkTikLJmNdcE2XlWqdIs97tjvmffGN5DKFYYPEkBcV@mail.gmail.com>

On Tue, May 18, 2010 at 6:04 PM, Cameron Ross <cross at kojeware.com> wrote:

> Hi,
>
> Is there a way to define custom constructors for ANTLR lexers and parsers?
>

Sure, you can create custom methods, c-tors and attributes in:

@parser::members {
  // here
}

or

@lexer::members {
  // here
}

Regards,

Bart Kiers.

From cross at kojeware.com  Tue May 18 09:19:19 2010
From: cross at kojeware.com (Cameron Ross)
Date: Tue, 18 May 2010 12:19:19 -0400
Subject: [antlr-interest] Custom lexer and parser constructors
In-Reply-To: <102e93de736fdd4dba13dc25ea2dfcc1@temporal-wave.com>
References: <AANLkTikolZtt_dw7OclFONBlXGx3TmaKU-NPN3WCg9Kt@mail.gmail.com>
	<102e93de736fdd4dba13dc25ea2dfcc1@temporal-wave.com>
Message-ID: <AANLkTintJxa6uNTqaX5vCMW0JUbm95H-FWBV8XQ2C4b8@mail.gmail.com>

Hi Jim,

My previous positing went unanswered so I thought I'd rephrase it to be more
generic: http://www.antlr.org/pipermail/antlr-interest/2010-May/038661.html.
 Thanks for the lead on the superClass option... I'll look into it.

Cameron.

On Tue, May 18, 2010 at 12:15 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> Using a superClass=xyz option will probably get you where you want to be,
> but you might be better phrasing your question in terms of what you want to
> achieve rather than whether you can change the constructors.
>
> However, it is just as easy to add members to the class and supply setter
> methods.
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Cameron Ross
> > Sent: Tuesday, May 18, 2010 9:04 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Custom lexer and parser constructors
> >
> > Hi,
> >
> > Is there a way to define custom constructors for ANTLR lexers and
> > parsers?
> >
> >
> > Thanks,
> > Cameon.
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Kojeware Corporation

From jimi at temporal-wave.com  Tue May 18 09:25:59 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 18 May 2010 09:25:59 -0700
Subject: [antlr-interest] Custom lexer and parser constructors
In-Reply-To: <AANLkTintJxa6uNTqaX5vCMW0JUbm95H-FWBV8XQ2C4b8@mail.gmail.com>
Message-ID: <8fa41bd5cfd08542933b993849e9683d@temporal-wave.com>

OK - just add the reporter to the paresr members and create a setErrorReporter() method.

 

Jim

 

From: Cameron Ross [mailto:cross at kojeware.com] 
Sent: Tuesday, May 18, 2010 9:19 AM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Custom lexer and parser constructors

 

Hi Jim,

 

My previous positing went unanswered so I thought I'd rephrase it to be more generic: http://www.antlr.org/pipermail/antlr-interest/2010-May/038661.html.  Thanks for the lead on the superClass option... I'll look into it.

 

Cameron.

 

On Tue, May 18, 2010 at 12:15 PM, Jim Idle <jimi at temporal-wave.com> wrote:

Using a superClass=xyz option will probably get you where you want to be, but you might be better phrasing your question in terms of what you want to achieve rather than whether you can change the constructors.

However, it is just as easy to add members to the class and supply setter methods.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Cameron Ross
> Sent: Tuesday, May 18, 2010 9:04 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Custom lexer and parser constructors
>
> Hi,
>
> Is there a way to define custom constructors for ANTLR lexers and
> parsers?
>
>
> Thanks,
> Cameon.
>

> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address




-- 
Kojeware Corporation




From cross at kojeware.com  Tue May 18 09:42:28 2010
From: cross at kojeware.com (Cameron Ross)
Date: Tue, 18 May 2010 12:42:28 -0400
Subject: [antlr-interest] Custom lexer and parser constructors
In-Reply-To: <AANLkTikLJmNdcE2XlWqdIs97tjvmffGN5DKFYYPEkBcV@mail.gmail.com>
References: <AANLkTikolZtt_dw7OclFONBlXGx3TmaKU-NPN3WCg9Kt@mail.gmail.com>
	<AANLkTikLJmNdcE2XlWqdIs97tjvmffGN5DKFYYPEkBcV@mail.gmail.com>
Message-ID: <AANLkTinvm9hJnD1smGtD_pxgDv9UH34OQ5UnWU8aC9nE@mail.gmail.com>

My initial problem with using the @member blocks is that you cannot redefine
default ctor generation from within the @member blocks (I was thinking of
adding a default stderr log handler to the default ctors).  This would
ensure that the error logger was always set to something.  I've come up with
an alternative approach where I initialize the error logger on the member
definition and then overwrite it from a custom ctor defined within the
@member blocks.  Everything is now working as I'd like.

Thanks for the help guys.
Cameron.

On Tue, May 18, 2010 at 12:18 PM, Bart Kiers <bkiers at gmail.com> wrote:

> On Tue, May 18, 2010 at 6:04 PM, Cameron Ross <cross at kojeware.com> wrote:
>
>> Hi,
>>
>> Is there a way to define custom constructors for ANTLR lexers and parsers?
>>
>
> Sure, you can create custom methods, c-tors and attributes in:
>
> @parser::members {
>   // here
> }
>
> or
>
> @lexer::members {
>   // here
> }
>
> Regards,
>
> Bart Kiers.
>



-- 
Kojeware Corporation

From sameh.wz at gmail.com  Tue May 18 10:24:48 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Tue, 18 May 2010 19:24:48 +0200
Subject: [antlr-interest] Find X :-)
In-Reply-To: <1274196300.9772.2.camel@gecko.home.org>
References: <AANLkTimAVwx6cIroFVksj4VSzEUFcDQS8hPUgHdP03e3@mail.gmail.com>
	<AANLkTinThAcVoD5Rd8xf51k69c22ntIVin6nIuMDTufj@mail.gmail.com>
	<1274196300.9772.2.camel@gecko.home.org>
Message-ID: <AANLkTik922BL8Fqc-bh_hOQNq16MPALEIh_G8L-T3SP6@mail.gmail.com>

Yea that was helpful, Thanks :-)

On Tue, May 18, 2010 at 5:25 PM, John B. Brodie <jbb at acm.org> wrote:

> On Tue, 2010-05-18 at 17:10 +0200, Sameh W. Zaky wrote:
> > OK, Sorry for that!
> >
> > Just after I have sent this message I realized that the problem is that
> > ANTLR cannot find my method myLookUpMethod..
> > I have defined it in @members{} part of the grammar file.. But ANTLR
> still
> > cannot find it.. Any idea?
>
> since it is in the lexer, the method needs to be defined in a
> @lexer::members{} section....
>
> @members{} defaults to the parser when placed in a combined grammar.
>
> >
> > On Tue, May 18, 2010 at 4:35 PM, Sameh W. Zaky <sameh.wz at gmail.com>
> wrote:
> >
> > > Dear All,
> > >
> > > I have in my grammar:
> > >
> > > fragment UNIT_NAME :;
> > >
> > > ID : ('a'..'z'|'_')*
> > >  {
> > > if ( myLookUpMethod( *X* ) ) $type=UNIT_NAME;
> > >  }
> > > ;
> > > ===============================
> > >
> > > Instead of *X*, I wanna refer to the text that is in red.. For example,
> > > the token "w_aw_s"  is ID. I want to take the text of this token
> "w_aw_s"
> > > and look it up in a certain array and if it is in this array then I set
> its
> > > type to UNIT_NAME.
> > >
> > > P.S.: I tried to replace *X* with *$text* but I receive the error:
> > >
> > > [16:15:56] symbol  : method myLookUpMethod(java.lang.String)
> > > [16:15:56] location: class SimpleTestLexer
> > > [16:15:56]             if(myLookUpMethod(getText())) _type=UNIT_NAME;
> > > [16:15:56]                ^
> > > [16:15:56] 1 error
> > >
> > > Find X :-)
> > >
> > > Many Thanks !
> > > --
> > > Sameh W. Zaky
> > >
> >
> >
> >
>
>
>
>


-- 
Sameh W. Zaky

From sameh.wz at gmail.com  Tue May 18 10:25:39 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Tue, 18 May 2010 19:25:39 +0200
Subject: [antlr-interest] ANTLR Two Simple Questions :-)
In-Reply-To: <342681a8ca67dd4b8dc46fe03619483b@temporal-wave.com>
References: <AANLkTil2ANaSwPCIQ8NFkYf0abREjkMZv97GGo1Fj0RQ@mail.gmail.com>
	<342681a8ca67dd4b8dc46fe03619483b@temporal-wave.com>
Message-ID: <AANLkTikyOvf7av437bhcyDQKqrSHPmvkCPomE1puwXfi@mail.gmail.com>

That was helpful, thanks :-)

On Tue, May 18, 2010 at 5:31 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> Well, err the method inArray() is an imaginary method that you will write.
> It just needs to take a string and see if that string is currently something
> that should be a UNIT_NAME. If it is real simple then you could just use a
> standard List object of your choice.
>
>
>
> Please replay to the list and not my personal email - thanks J
>
>
>
> Jim
>
>
>
> From: Sameh W. Zaky [mailto:sameh.wz at gmail.com]
> Sent: Tuesday, May 18, 2010 7:21 AM
> To: Jim Idle
> Subject: Re: [antlr-interest] ANTLR Two Simple Questions :-)
>
>
>
> Dear Jim,
>
>
>
> thanks for your reply.
>
>
>
> Concerning point (1):
>
>
>
> I did as you said:
>
>
>
> fragment UNIT_NAME       :;
>
>
>
> ID      :           ('a'..'z'|'_')*
>
>          {
>
>                      if(inArray($text)) $type=UNIT_NAME;
>
>          }
>
>          ;
>
>
>
> But when I click 'run' to run a test I get the error:
>
> D:\My Documents\Downloads\Simple Test
> Grammar\output\SimpleTestLexer.java:604: cannot find symbol
>
> [16:15:56] symbol  : method inArray(java.lang.String)
>
> [16:15:56] location: class SimpleTestLexer
>
> [16:15:56]                              if(inArray(getText()))
> _type=UNIT_NAME;
>
>
>
> Any idea, how I can overcome this?
>
>
>
> Thanks again for your time :-)
>
>
>
> On Mon, May 17, 2010 at 6:54 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Sameh W. Zaky
> > Sent: Monday, May 17, 2010 7:33 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] ANTLR Two Simple Questions :-)
> >
> > Dear All,
> >
> > I am a Masters student, I use Java, and I am trying to make my parser
> > with
> > the help of ANTLR. I need this for my Masters project.
> > I am using ANTLRWorks 1.3.1
> > I had 2 questions concerning it:
> >
> > 1) How can I have a dynamic token name (or dynamic lexer)?
> > *Example: (the symbol SERVICE, will have different token values,
> > depending
>
> > on certain list (array) whose contents change over time)*
>
> Match the possible sequences generally, then change the token type if the
> strings match your dynamic list:
>
> fragment SERVICE : ;
> ID : ('a'..'z')+
>   {
>      If (myLookupMethod($text)) { $type = SERVICE; }
>   }
>  ;
>
> So the token ID will be returned if the matched text is not in your list
> and the token SERVICE will be returned if it is.
>
>
>
> > 2) Given a certain grammar, how can I (or: is it possible to) get the
> > list
> > of all possible next tokens?
>
> Read:
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
>
> Do I get a masters too? ;-)
>
> Jim
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> --
> Sameh W. Zaky
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Sameh W. Zaky

From parrt at cs.usfca.edu  Tue May 18 13:42:32 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 18 May 2010 13:42:32 -0700
Subject: [antlr-interest] enums in v4 ANTLR Java code generation considered
	useless
Message-ID: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>

 A lot of you have wondered why I'd don't use enum types for token types in the generated Java-based parsers:

enum TokenType { ID(3), INT(4) };

I gave it my best shot but once again I found that enums just don't seem to work for me. For example, without inheritance how can I define the match method?

void match(TokenType t) {....}

Unfortunately this is in the superclass not the generated class so TokenType is not yet defined. Without inheritance, I have to use match(int). That means that there's no point in using the enum.

But, you say, I should be using generics on the parser to pass in the token type enum type. Fair enough, And I'll try once I tried to generic'ize the v3 runtime for v4. We've had some discussion of this on the dev list.

Ter

From espina.edgar at gmail.com  Tue May 18 13:47:41 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Tue, 18 May 2010 17:47:41 -0300
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
Message-ID: <AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>

Hi,

 TokenType can be an interface. Then your generated tokens can implemented
this interface.

enum GeneratedTokenType implements TokenType {
 ID(3);
}

Thanks,
edgar

On Tue, May 18, 2010 at 5:42 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>  A lot of you have wondered why I'd don't use enum types for token types in
> the generated Java-based parsers:
>
> enum TokenType { ID(3), INT(4) };
>
> I gave it my best shot but once again I found that enums just don't seem to
> work for me. For example, without inheritance how can I define the match
> method?
>
> void match(TokenType t) {....}
>
> Unfortunately this is in the superclass not the generated class so
> TokenType is not yet defined. Without inheritance, I have to use match(int).
> That means that there's no point in using the enum.
>
> But, you say, I should be using generics on the parser to pass in the token
> type enum type. Fair enough, And I'll try once I tried to generic'ize the v3
> runtime for v4. We've had some discussion of this on the dev list.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
edgar

From parrt at cs.usfca.edu  Tue May 18 13:52:29 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 18 May 2010 13:52:29 -0700
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
	<AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
Message-ID: <CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>

hi Edgar :)

Don't i have to pass objects around then instead of ints with extra method calls etc...?

void match(TokenType t) {
  int ttype = t.getType();
}

no autoboxing etc... 

match(GeneratedTokenType.ID);

Also i need Parser.GeneratedTokenType.ID in outside code.  pretty ugly.

I guess i don't see enum advantages for token types and they cause confusion. "enum GeneratedTokenType implements TokenType" vs "int", in other words.

Ter

On May 18, 2010, at 1:47 PM, Edgar Espina wrote:

> Hi,
> 
> TokenType can be an interface. Then your generated tokens can implemented
> this interface.
> 
> enum GeneratedTokenType implements TokenType {
> ID(3);
> }
> 
> Thanks,
> edgar
> 
> On Tue, May 18, 2010 at 5:42 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> 
>> A lot of you have wondered why I'd don't use enum types for token types in
>> the generated Java-based parsers:
>> 
>> enum TokenType { ID(3), INT(4) };
>> 
>> I gave it my best shot but once again I found that enums just don't seem to
>> work for me. For example, without inheritance how can I define the match
>> method?
>> 
>> void match(TokenType t) {....}
>> 
>> Unfortunately this is in the superclass not the generated class so
>> TokenType is not yet defined. Without inheritance, I have to use match(int).
>> That means that there's no point in using the enum.
>> 
>> But, you say, I should be using generics on the parser to pass in the token
>> type enum type. Fair enough, And I'll try once I tried to generic'ize the v3
>> runtime for v4. We've had some discussion of this on the dev list.
>> 
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> 
> 
> -- 
> edgar
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From scott at javadude.com  Tue May 18 14:58:24 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Tue, 18 May 2010 17:58:24 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
	<AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
	<CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>
Message-ID: <AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>

There are several advantages to enums:
* there is a discrete set of values that can be used (no accidental
42's passed in when 42 isn't a token type)
* the enum value can carry extra information
* the enum values can override methods differently

OH - one of the things that's clouding this is that you really don't
need the numeric type identifers anymore. You can just have

  public enum TokenType {
    IDENT, INT ...;
  }

then in your match method:

  void match(TokenType type) {
    if (LA(1).getType() == type) {
        ...
    }
  }

And you can use the types in a switch statement:

  switch(type) {
    case INT:
    case IDENT:
    ...
  }

No more magic numbers! Woohoo!

-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Tue, May 18, 2010 at 4:52 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> hi Edgar :)
>
> Don't i have to pass objects around then instead of ints with extra method calls etc...?
>
> void match(TokenType t) {
> ?int ttype = t.getType();
> }
>
> no autoboxing etc...
>
> match(GeneratedTokenType.ID);
>
> Also i need Parser.GeneratedTokenType.ID in outside code. ?pretty ugly.
>
> I guess i don't see enum advantages for token types and they cause confusion. "enum GeneratedTokenType implements TokenType" vs "int", in other words.
>
> Ter
>
> On May 18, 2010, at 1:47 PM, Edgar Espina wrote:
>
>> Hi,
>>
>> TokenType can be an interface. Then your generated tokens can implemented
>> this interface.
>>
>> enum GeneratedTokenType implements TokenType {
>> ID(3);
>> }
>>
>> Thanks,
>> edgar
>>
>> On Tue, May 18, 2010 at 5:42 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>
>>> A lot of you have wondered why I'd don't use enum types for token types in
>>> the generated Java-based parsers:
>>>
>>> enum TokenType { ID(3), INT(4) };
>>>
>>> I gave it my best shot but once again I found that enums just don't seem to
>>> work for me. For example, without inheritance how can I define the match
>>> method?
>>>
>>> void match(TokenType t) {....}
>>>
>>> Unfortunately this is in the superclass not the generated class so
>>> TokenType is not yet defined. Without inheritance, I have to use match(int).
>>> That means that there's no point in using the enum.
>>>
>>> But, you say, I should be using generics on the parser to pass in the token
>>> type enum type. Fair enough, And I'll try once I tried to generic'ize the v3
>>> runtime for v4. We've had some discussion of this on the dev list.
>>>
>>> Ter
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>>
>> --
>> edgar
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From scott at javadude.com  Tue May 18 15:20:24 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Tue, 18 May 2010 18:20:24 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
	<AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
	<CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>
	<AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>
Message-ID: <AANLkTin0CkELoTyxCYGAo71ceEhJqm8woJ43p36JlKen@mail.gmail.com>

A little clarification...

Start with (as Edgar said)

  public interface TokenType { }
  public enum CommonTypes implements TokenType {
      EOF;  // others?
  }

  public class Token {
    private TokenType type;
    public TokenType getType() {return type;}
    ...
  }

  public class Parser ... {
      void match(TokenType type) {
        if (LA(1).getType() == type) {
          ...
        }
      }
      ...
  }


then for the specific parser, generate

  public enum FooParserTokenType implements TokenType {
    IDENT, INT, ...;
  }


What might be nice would be to have a "description" available for the
type, something like

  public interface TokenType {
    String getDescription();
  }

  public enum FooParserTokenType implements TokenType {
        IDENT("identifier (lower camel case word of doom)"),
        INT("integer (digits, no decimal points)", ...;
    private String description;
    private FooParserTokenType(String description) {
      this.description = description;
    }
    public String getDescription() {
      return description;
    }
  }

this could be fed by something like

  IDENT
    options {description="identifier (lower camel case word of doom)"} : ...

and could be used to really help error messages by using
token.getType().getDescription().

This is where Java enums get really cool -- carrying extra data.

I've gotta upload an enumeration talk I gave at work (which described
other cool things you can do, like the GoF state pattern and something
kinda close to function pointers in java)

Hope this helps!
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Tue, May 18, 2010 at 5:58 PM, Scott Stanchfield <scott at javadude.com> wrote:
> There are several advantages to enums:
> * there is a discrete set of values that can be used (no accidental
> 42's passed in when 42 isn't a token type)
> * the enum value can carry extra information
> * the enum values can override methods differently
>
> OH - one of the things that's clouding this is that you really don't
> need the numeric type identifers anymore. You can just have
>
> ?public enum TokenType {
> ? ?IDENT, INT ...;
> ?}
>
> then in your match method:
>
> ?void match(TokenType type) {
> ? ?if (LA(1).getType() == type) {
> ? ? ? ?...
> ? ?}
> ?}
>
> And you can use the types in a switch statement:
>
> ?switch(type) {
> ? ?case INT:
> ? ?case IDENT:
> ? ?...
> ?}
>
> No more magic numbers! Woohoo!
>
> -- Scott
>
> ----------------------------------------
> Scott Stanchfield
> http://javadude.com
>
>
>
> On Tue, May 18, 2010 at 4:52 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> hi Edgar :)
>>
>> Don't i have to pass objects around then instead of ints with extra method calls etc...?
>>
>> void match(TokenType t) {
>> ?int ttype = t.getType();
>> }
>>
>> no autoboxing etc...
>>
>> match(GeneratedTokenType.ID);
>>
>> Also i need Parser.GeneratedTokenType.ID in outside code. ?pretty ugly.
>>
>> I guess i don't see enum advantages for token types and they cause confusion. "enum GeneratedTokenType implements TokenType" vs "int", in other words.
>>
>> Ter
>>
>> On May 18, 2010, at 1:47 PM, Edgar Espina wrote:
>>
>>> Hi,
>>>
>>> TokenType can be an interface. Then your generated tokens can implemented
>>> this interface.
>>>
>>> enum GeneratedTokenType implements TokenType {
>>> ID(3);
>>> }
>>>
>>> Thanks,
>>> edgar
>>>
>>> On Tue, May 18, 2010 at 5:42 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>
>>>> A lot of you have wondered why I'd don't use enum types for token types in
>>>> the generated Java-based parsers:
>>>>
>>>> enum TokenType { ID(3), INT(4) };
>>>>
>>>> I gave it my best shot but once again I found that enums just don't seem to
>>>> work for me. For example, without inheritance how can I define the match
>>>> method?
>>>>
>>>> void match(TokenType t) {....}
>>>>
>>>> Unfortunately this is in the superclass not the generated class so
>>>> TokenType is not yet defined. Without inheritance, I have to use match(int).
>>>> That means that there's no point in using the enum.
>>>>
>>>> But, you say, I should be using generics on the parser to pass in the token
>>>> type enum type. Fair enough, And I'll try once I tried to generic'ize the v3
>>>> runtime for v4. We've had some discussion of this on the dev list.
>>>>
>>>> Ter
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>
>>>
>>>
>>> --
>>> edgar
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>

From hcastlem at rocketmail.com  Tue May 18 17:10:49 2010
From: hcastlem at rocketmail.com (Ernesto Castillo)
Date: Tue, 18 May 2010 17:10:49 -0700 (PDT)
Subject: [antlr-interest] help please
Message-ID: <124970.95807.qm@web111915.mail.gq1.yahoo.com>

hello everybody my name is Ernesto and i am calling for help on antlr programming, i am a newby in this and  i am in my second semester  master , after 12 years ago that finish my degree in computer science but because the circumstance never work  in the computer  field, but planning to get into, so this semester i am taking compiler, and my first  programming assignment was really bad because i am not clear how put together the java with the antlr. i know how Java work because my first semester i took Java and i used it with eclipse . Now i thing i have properly installed the antlr 3.2 nevertheless  i do not know if i have to install antlrwork because the IDE , i was trying to do the main java with eclipse to invoke antlr but never work . so i feel lost in the sea and i have the antlr book but look like is the old version. my computer is Mac . i would appreciate the help thanks  



      


From cross at kojeware.com  Tue May 18 17:48:42 2010
From: cross at kojeware.com (Cameron Ross)
Date: Tue, 18 May 2010 20:48:42 -0400
Subject: [antlr-interest] Finding character index from parser exception
Message-ID: <AANLkTin7qOzjdhJdduqyfL-NWI93XkQXjS_iOr_xktv0@mail.gmail.com>

Hi,

I have an application that needs to know the index within the lexer's input
character stream where a parser exception occurred.  The RecognizerException
generated in the parser contains the line # and character position within
the line.  It also contains the index within the parser's input token stream
where the exception occurred.  How can I determine the character index
within the lexer's input stream when the exception is generated in the
parser?

Thanks,
Cameron.

From acondit at ipns.com  Tue May 18 21:42:16 2010
From: acondit at ipns.com (Alan Condit)
Date: Tue, 18 May 2010 21:42:16 -0700
Subject: [antlr-interest] SKIP() vs skip() in 'C' runtime
Message-ID: <7B58D53F-BB94-425A-9B14-6BC07FD31DC7@ipns.com>

Where is the code for SKIP() found in the 'C' runtime? I had SKIP() in my C code version of the parser then I had to move to Java to find some bugs in my grammar. There I had to change SKIP() to skip(). Now I am going back to 'C' but I would like to change the 'C' runtime so that it will accept the lowercase skip().

Thanks,
Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From bkiers at gmail.com  Tue May 18 22:59:08 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Wed, 19 May 2010 07:59:08 +0200
Subject: [antlr-interest] help please
In-Reply-To: <124970.95807.qm@web111915.mail.gq1.yahoo.com>
References: <124970.95807.qm@web111915.mail.gq1.yahoo.com>
Message-ID: <AANLkTinFga04Hxhr7Y8fNEfXFa3kVMdviIRhvWMllD7O@mail.gmail.com>

On Wed, May 19, 2010 at 2:10 AM, Ernesto Castillo
<hcastlem at rocketmail.com>wrote:

> hello everybody my name is Ernesto and i am calling for help on antlr
> programming, i am a newby in this and  i am in my second semester  master ,
> after 12 years ago that finish my degree in computer science but because the
> circumstance never work  in the computer  field, but planning to get into,
> so this semester i am taking compiler, and my first  programming assignment
> was really bad because i am not clear how put together the java with the
> antlr. i know how Java work because my first semester i took Java and i used
> it with eclipse . Now i thing i have properly installed the antlr 3.2
> nevertheless  i do not know if i have to install antlrwork because the IDE ,
> i was trying to do the main java with eclipse to invoke antlr but never work
> . so i feel lost in the sea and i have the antlr book but look like is the
> old version. my computer is Mac . i would appreciate the help thanks
>
>
Scott  Stanchfield has written some excellent video tutorials starting from
the very basics (setting up ANTLR with Eclipse). Have a look at them:
http://javadude.com/articles/antlr3xtut/<%20http://javadude.com/articles/antlr3xtut/>

Kind regards,

Bart Kiers.

From anteusz at freemail.hu  Wed May 19 01:58:36 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Wed, 19 May 2010 10:58:36 +0200
Subject: [antlr-interest] another question about custom lexer
Message-ID: <4BF3A83C.2070007@freemail.hu>

Hi,

I have a hand-made lexer that returns tokens.
Let us say it has a fuction string getnexttoken(int & tokentype);

How would you plug that in the Antlr?


Thanks.

Marton Papp





From sameh.wz at gmail.com  Wed May 19 02:37:23 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Wed, 19 May 2010 11:37:23 +0200
Subject: [antlr-interest] The Java Method that Generates the Lexer and the
	Parser
Message-ID: <AANLkTilw3CfwB0E-ZUBdplPakaolHKIXqjrNXlteIAPH@mail.gmail.com>

Dear All,

I am a Java developer using ANTLR 1.3.1
I am working is some dynamic environment, so my grammar is changing over
time due to the continuous change in vocabulary..
So I was thinking of generating my *.g grammar file automatically not to
write it by myself..

But now I face the problem that I cannot find the runtime method that takes
the grammar file as input, and gives as output the generation of the tokens
file, lexer.java file, and parser.java file.. In other words, I simply want
the method that does the exact same task as the "Generate Code" option in
the "Generate" menu in ANTLR 1.3.1 :-)

Any help?
Thanks in Advance ;-)

-- 
Sameh W. Zaky

From sameh.wz at gmail.com  Wed May 19 02:38:25 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Wed, 19 May 2010 11:38:25 +0200
Subject: [antlr-interest] The Java Method that Generates the Lexer and
	the Parser
In-Reply-To: <AANLkTilw3CfwB0E-ZUBdplPakaolHKIXqjrNXlteIAPH@mail.gmail.com>
References: <AANLkTilw3CfwB0E-ZUBdplPakaolHKIXqjrNXlteIAPH@mail.gmail.com>
Message-ID: <AANLkTinEkDVHKlKlZA4AW_MXy83gIUnJdNY6DBkgkQQy@mail.gmail.com>

Sorry, I meant ANTLRWorks 1.3.1..

On Wed, May 19, 2010 at 11:37 AM, Sameh W. Zaky <sameh.wz at gmail.com> wrote:

> Dear All,
>
> I am a Java developer using ANTLR 1.3.1
> I am working is some dynamic environment, so my grammar is changing over
> time due to the continuous change in vocabulary..
> So I was thinking of generating my *.g grammar file automatically not to
> write it by myself..
>
> But now I face the problem that I cannot find the runtime method that takes
> the grammar file as input, and gives as output the generation of the tokens
> file, lexer.java file, and parser.java file.. In other words, I simply want
> the method that does the exact same task as the "Generate Code" option in
> the "Generate" menu in ANTLR 1.3.1 :-)
>
> Any help?
> Thanks in Advance ;-)
>
> --
> Sameh W. Zaky
>



-- 
Sameh W. Zaky

From jhvdven at xs4all.nl  Wed May 19 05:19:20 2010
From: jhvdven at xs4all.nl (Jan H. van der Ven)
Date: Wed, 19 May 2010 14:19:20 +0200
Subject: [antlr-interest] Skip subtree in tree grammar
In-Reply-To: <c376e6ec0905071138m1eded2c9r897afdcabbe95c63@mail.gmail.com>
References: <c376e6ec0905050638t3bbf53cx2c298b33231831c@mail.gmail.com>	<4a009601.0c0bca0a.24a7.2c70SMTPIN_ADDED@mx.google.com>	<c376e6ec0905061056u2a51512bo6cc72fbebcd7358a@mail.gmail.com>	<4A01D12B.5090300@temporal-wave.com>	<c376e6ec0905061154t538fcf6bp61e6eeb2ea8b8d2@mail.gmail.com>	<4a01fbe1.170bca0a.58bb.ffff9de7SMTPIN_ADDED@mx.google.com>
	<c376e6ec0905071138m1eded2c9r897afdcabbe95c63@mail.gmail.com>
Message-ID: <4BF3D748.8090702@xs4all.nl>

Hello list,


Did someone solve this? I have a similar problem with a grammar I took 
from this list (Eval.g and Simple.g). It concerns the .

ifElse
scope {
   bool expResult;
} :
    ^(
       IFTHEN b = expression { $ifElse::expResult = b; }
       (
          {$ifElse::expResult == true}?=> actionSequence
          | . // if expResult == false, no action required but eat the token
       )
      )
    |
    ^(
       IFTHENELSE b = expression { $ifElse::expResult = b; }
       (
          {$ifElse::expResult == true}? actionSequence
          . // if expResult == true, call the 'then' action and 'eat' 
the else action
          | . actionSequence // if expResult == false, 'eat' the 'then' 
action and call the else action
       )
      );
On nested statements this fails to throw away the 'false' part of the tree.
How can I fix that?

Kind regards,


Jan


On 7-5-2009 20:38, Martijn Reuvers wrote:
> Hello!
>
> I tried it, but neither works. :/ I ran it against a snapshot of 3.1.4
> runtime that I built with mave (3.1.3 has the same errors btw):
>
> The skip option says when run:
> * Wildcard invalid as root; wildcard can itself be a tree.
>
> As for the | * option it still has a similar error as before:
> * node from after line 22:12 no viable alternative at input 'DOWN'.
>
> This is what I have for the |*
> --------------
> bool_function_content[Boolean value]
> scope {
> 	Boolean t;
> }
> @init {
> 	$bool_function_content::t = $value;
> }
>   : {$bool_function_content::t  != null&&
> $bool_function_content::t.booleanValue() }? =>  function_content*
>   | .*
>   ;	
>
> Any thoughts?
>
> Martijn
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>    

From jimi at temporal-wave.com  Wed May 19 07:23:27 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 07:23:27 -0700
Subject: [antlr-interest] SKIP() vs skip() in 'C' runtime
In-Reply-To: <7B58D53F-BB94-425A-9B14-6BC07FD31DC7@ipns.com>
Message-ID: <afe76665bdc2d947b2e8cf1cdce74d98@temporal-wave.com>

Why?

:s/skip\(\)/SKIP()/g

However it is a macro defined in the generated code, all you need do is:

#define skip() SKIP()

In an @section that follows the macro definition of SKIP

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Tuesday, May 18, 2010 9:42 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] SKIP() vs skip() in 'C' runtime
> 
> Where is the code for SKIP() found in the 'C' runtime? I had SKIP() in
> my C code version of the parser then I had to move to Java to find some
> bugs in my grammar. There I had to change SKIP() to skip(). Now I am
> going back to 'C' but I would like to change the 'C' runtime so that it
> will accept the lowercase skip().
> 
> Thanks,
> Alan
> ---
> 
> Alan Condit
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at ipns.com
> Home-Office (503) 982-0906
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Wed May 19 07:48:13 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 07:48:13 -0700
Subject: [antlr-interest] another question about custom lexer
In-Reply-To: <4BF3A83C.2070007@freemail.hu>
Message-ID: <9c6212a214335548854879e738eb2f1a@temporal-wave.com>

Well, what language are you talking about? What are you trying to achieve? Why do you think you need a custom lexer? 

http://perl.plover.com/Questions.html


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of anteusz at freemail.hu
> Sent: Wednesday, May 19, 2010 1:59 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] another question about custom lexer
> 
> Hi,
> 
> I have a hand-made lexer that returns tokens.
> Let us say it has a fuction string getnexttoken(int & tokentype);
> 
> How would you plug that in the Antlr?
> 
> 
> Thanks.
> 
> Marton Papp
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From temporaryemail at comcast.net  Wed May 19 08:30:57 2010
From: temporaryemail at comcast.net (Bob)
Date: Wed, 19 May 2010 08:30:57 -0700
Subject: [antlr-interest] Input buffer instead of reading the whole file
Message-ID: <000001caf768$474f28b0$d5ed7a10$@net>

Hi, a back-breaker question,

 

Is it possible under these circumstances to have the input file read in
blocks (say, 8kb) instead of reading the whole file into memory?

 

I'll be writing actions for every rule (not using Antlr's AST). Once the
actions are processed the input history is not used.

 

Reason: Some source files are 800mb - 1.4gb in size and reading the entire
thing into 32 bit address space doesn't leave much leftover.

 

If it's possible to limit the input buffer size, can you point me in the
right direction?

 

Thanks,

Bob

 


From temporaryemail at comcast.net  Wed May 19 08:33:39 2010
From: temporaryemail at comcast.net (Bob)
Date: Wed, 19 May 2010 08:33:39 -0700
Subject: [antlr-interest] Token lin lexer
Message-ID: <000501caf768$a7a81370$f6f83a50$@net>

I'm 1 day into Antlr and hope for an answer to this:

 

With an identifier rule (for example this one):

 

SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (
'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')* ;

 

Is it possible, when the lexer recognizes the input stream to be a
SIMPLE_IDENTIFIER, to add some extra code that would

look-up the SIMPLE_IDENTIFIER and return possibly a different token? - Thus
directing the parser to different grammar rules.

 

Take this expression for example:

 

(  V(n1)/r1 + Func(arg1) )

 

where the semantics of V(n1) are more akin to n1->V rather than a function
call to V with arg n1.

I'd like to capture the V(n1) during parsing and make it a n1->V node
instead of a function call node.

 

Using flex this is easy: Once the identifier string is matched it can be
used in a lookup to determine the token type then fed to bison.

 

So, Can Antlr let me switch the token type at the lexical level before the
parser gets hold of it?

 

Hope this makes sense!

 


From jimi at temporal-wave.com  Wed May 19 08:35:36 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 08:35:36 -0700
Subject: [antlr-interest] Token lin lexer
In-Reply-To: <000501caf768$a7a81370$f6f83a50$@net>
Message-ID: <6cba4a63be56af438a09ff0a245e0b9b@temporal-wave.com>

Please consult: http://antlr.markmail.org where you will find this answered lots of times, including just two days ago. Look for $type.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Wednesday, May 19, 2010 8:34 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Token lin lexer
> 
> I'm 1 day into Antlr and hope for an answer to this:
> 
> 
> 
> With an identifier rule (for example this one):
> 
> 
> 
> SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (
> 'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')* ;
> 
> 
> 
> Is it possible, when the lexer recognizes the input stream to be a
> SIMPLE_IDENTIFIER, to add some extra code that would
> 
> look-up the SIMPLE_IDENTIFIER and return possibly a different token? -
> Thus
> directing the parser to different grammar rules.
> 
> 
> 
> Take this expression for example:
> 
> 
> 
> (  V(n1)/r1 + Func(arg1) )
> 
> 
> 
> where the semantics of V(n1) are more akin to n1->V rather than a
> function
> call to V with arg n1.
> 
> I'd like to capture the V(n1) during parsing and make it a n1->V node
> instead of a function call node.
> 
> 
> 
> Using flex this is easy: Once the identifier string is matched it can
> be
> used in a lookup to determine the token type then fed to bison.
> 
> 
> 
> So, Can Antlr let me switch the token type at the lexical level before
> the
> parser gets hold of it?
> 
> 
> 
> Hope this makes sense!
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From naveen.garg at gmail.com  Wed May 19 09:59:04 2010
From: naveen.garg at gmail.com (Naveen)
Date: Wed, 19 May 2010 09:59:04 -0700 (PDT)
Subject: [antlr-interest] Building ANTLR v3.2 from source.
In-Reply-To: <1268450736.3166.15.camel@dustdevil.cis.vtc.edu>
References: <1268450736.3166.15.camel@dustdevil.cis.vtc.edu>
Message-ID: <fe4e2fe9-d632-422c-aab2-a47f744c9577@j27g2000vbp.googlegroups.com>

> Is it possible for just anyone to read the ANTLR Perforce depot?
Their is a mirror at github: http://github.com/antlr
incidentally, the error is fixed in the the development branch.
I don't know why the wiki download doesn't suggest downloading from
github or perforce instead of offering an outdated source archive with
a faulty pom.xml.

cloning the repo fails with:
Cannot obtain needed tree 23d67ec01a2eba755068ead240ab22f8b2582344
also, there are no tags setup...

but you can download the master HEAD using the github web interface,
unzip, and:

mvn -N install
mvn -Dmaven.test.skip=true
mvn -Dmaven.test.skip=true package assembly:assembly




From acondit at IPNS.COM  Wed May 19 11:24:43 2010
From: acondit at IPNS.COM (Alan Condit)
Date: Wed, 19 May 2010 11:24:43 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
Message-ID: <1829DE77-034A-4AA9-B1AB-5B2BC69959B4@IPNS.COM>

Help!!!

I am getting a null pointer to setTokenBoundaries in the following line of generated code. 
"ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);" 

The grammar works under Java.  In moving it back to 'C', I changed the language option to 'C', added option ASTLabelType=pANTLR3_BASE_TREE; and added the necessary includes to compile and link under Objective-C.

Is there anything obvious that I am doing wrong?

Thanks,
Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From parrt at cs.usfca.edu  Wed May 19 11:34:35 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 19 May 2010 11:34:35 -0700
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
	<AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
	<CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>
	<AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>
Message-ID: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>


On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:

> There are several advantages to enums:
> * there is a discrete set of values that can be used (no accidental
> 42's passed in when 42 isn't a token type)
> * the enum value can carry extra information
> * the enum values can override methods differently

These are all excellent advantages. I believe that these mostly apply when you're writing code, not generating. Just like the compiler generates integers underneath, if antlr is generating integers, it's probably okay.

> OH - one of the things that's clouding this is that you really don't
> need the numeric type identifers anymore. You can just have
> 
>  public enum TokenType {
>    IDENT, INT ...;
>  }
> 
> then in your match method:
> 
>  void match(TokenType type) {
>    if (LA(1).getType() == type) {
>        ...
>    }
>  }

The only problem is that match() lives up in the superclass in the library but the generated parser needs to define the enum.

I also have the problem that I need to merge token types from multiple grammars for grammar imports. This gets more competition with enum types without inheritance.

> 
> And you can use the types in a switch statement:
> 
>  switch(type) {
>    case INT:
>    case IDENT:
>    ...
>  }
> 
> No more magic numbers! Woohoo!

ANTLR already uses the labels when possible such as INT. If you use a literal in your grammar such as ';' in don't label it in the lexer, than I had no choice but to generate the integer token type or a weird label like TOKEN34.

Ter

From scott at javadude.com  Wed May 19 11:39:13 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Wed, 19 May 2010 14:39:13 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
	<AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
	<CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>
	<AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>
	<10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
Message-ID: <AANLkTimJOIq_4FjQCFx7VBpGFkD39SRKWc6xzF03mGxZ@mail.gmail.com>

You can still define the match in the superclass -- just use an
interface like Edgar mentioned and I demonstrated in the
"clarification" note I sent.

I think the big value here would be that it forces every place that
uses the token types to use the enum names (as there are no integer
values). I think that would help debugging enormously (rather than
seeing '4' as the value in the variables window, you'd see 'IDENT').
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Wed, May 19, 2010 at 2:34 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
>
>> There are several advantages to enums:
>> * there is a discrete set of values that can be used (no accidental
>> 42's passed in when 42 isn't a token type)
>> * the enum value can carry extra information
>> * the enum values can override methods differently
>
> These are all excellent advantages. I believe that these mostly apply when you're writing code, not generating. Just like the compiler generates integers underneath, if antlr is generating integers, it's probably okay.
>
>> OH - one of the things that's clouding this is that you really don't
>> need the numeric type identifers anymore. You can just have
>>
>> ?public enum TokenType {
>> ? ?IDENT, INT ...;
>> ?}
>>
>> then in your match method:
>>
>> ?void match(TokenType type) {
>> ? ?if (LA(1).getType() == type) {
>> ? ? ? ?...
>> ? ?}
>> ?}
>
> The only problem is that match() lives up in the superclass in the library but the generated parser needs to define the enum.
>
> I also have the problem that I need to merge token types from multiple grammars for grammar imports. This gets more competition with enum types without inheritance.
>
>>
>> And you can use the types in a switch statement:
>>
>> ?switch(type) {
>> ? ?case INT:
>> ? ?case IDENT:
>> ? ?...
>> ?}
>>
>> No more magic numbers! Woohoo!
>
> ANTLR already uses the labels when possible such as INT. If you use a literal in your grammar such as ';' in don't label it in the lexer, than I had no choice but to generate the integer token type or a weird label like TOKEN34.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Wed May 19 11:42:06 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 19 May 2010 11:42:06 -0700
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTimJOIq_4FjQCFx7VBpGFkD39SRKWc6xzF03mGxZ@mail.gmail.com>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
	<AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
	<CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>
	<AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>
	<10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
	<AANLkTimJOIq_4FjQCFx7VBpGFkD39SRKWc6xzF03mGxZ@mail.gmail.com>
Message-ID: <AAF069DF-5FE0-486D-AD65-F68163375DF8@cs.usfca.edu>


On May 19, 2010, at 11:39 AM, Scott Stanchfield wrote:

> You can still define the match in the superclass -- just use an
> interface like Edgar mentioned and I demonstrated in the
> "clarification" note I sent.

oh right.

> I think the big value here would be that it forces every place that
> uses the token types to use the enum names (as there are no integer
> values). I think that would help debugging enormously (rather than
> seeing '4' as the value in the variables window, you'd see 'IDENT').

what about ';' token?  What's it's label?
T

From parrt at antlr.org  Wed May 19 11:49:30 2010
From: parrt at antlr.org (Terence Parr)
Date: Wed, 19 May 2010 11:49:30 -0700
Subject: [antlr-interest] company looking for 2 ANTLR developers
Message-ID: <4F129610-57B9-43BA-B135-2B85DFCC2BB5@antlr.org>

Hi, a recruiter in NYC has 2 positions to fill for a client.  full-time and paying anywhere from $100k to $120k. Contact info:

Hamilton Daza
Intrigue Systems, Inc.
7211 Austin Street #259
Forest Hills, NY 11375
800.809.0318 Main
917.699.3376 Mobile
718.841.7091 Fax
hdaza at intriguesys.com

Ter

From scott at javadude.com  Wed May 19 11:54:24 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Wed, 19 May 2010 14:54:24 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AAF069DF-5FE0-486D-AD65-F68163375DF8@cs.usfca.edu>
References: <B63B9658-8A6C-4137-B183-600FCF195F44@cs.usfca.edu>
	<AANLkTik2WX2uMBMS5cFRMCgUA6GfRHLVUv94gCc_KCuU@mail.gmail.com>
	<CD1D8FC5-7F51-41B0-A1A5-A115346A1FDE@cs.usfca.edu>
	<AANLkTilzOqafSchbkfsPnL4Dmf0UKW3-ILDJOqtu5GRe@mail.gmail.com>
	<10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
	<AANLkTimJOIq_4FjQCFx7VBpGFkD39SRKWc6xzF03mGxZ@mail.gmail.com>
	<AAF069DF-5FE0-486D-AD65-F68163375DF8@cs.usfca.edu>
Message-ID: <AANLkTilfPQFx_MJcG5cIADsUozKwK6J4i-bISO3toqhZ@mail.gmail.com>

Hmmm... that's evil, ya know that ;)  Good to catch that now, though...

Probably LITERAL_1, LITERAL_2, etc. To make it easier for
debugging/printing/reporting you could add a pattern property (hmmm...
the more I think about it the more I like it... if there's a
description it could be printed w/ the error message, otherwise the
pattern. both could be useful for other purposes)

  public enum FooParserTokens implements TokenType {
    IDENT("('a'..'z')('a'..'z'|'A'..'Z')*", "an identifier ..."),
    LITERAL_1(";", null),
    LITERAL_2("+", null);
    private String pattern;
    private String description;
    private FooParserTokens(String pattern, String description) {
      this.pattern = pattern;
      this.description = description;
    }
  }

-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Wed, May 19, 2010 at 2:42 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On May 19, 2010, at 11:39 AM, Scott Stanchfield wrote:
>
>> You can still define the match in the superclass -- just use an
>> interface like Edgar mentioned and I demonstrated in the
>> "clarification" note I sent.
>
> oh right.
>
>> I think the big value here would be that it forces every place that
>> uses the token types to use the enum names (as there are no integer
>> values). I think that would help debugging enormously (rather than
>> seeing '4' as the value in the variables window, you'd see 'IDENT').
>
> what about ';' token? ?What's it's label?
> T
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Wed May 19 12:01:04 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 12:01:04 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
In-Reply-To: <1829DE77-034A-4AA9-B1AB-5B2BC69959B4@IPNS.COM>
Message-ID: <88da248d576a6744a7dba35f9df33b64@temporal-wave.com>

Please post more information about your grammar, what the null pointer is, etc. It is hard to interpolate, but the common mistake is not adding output=AST; to the options, so you do not get a tree adaptor created.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Wednesday, May 19, 2010 11:25 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
> 
> Help!!!
> 
> I am getting a null pointer to setTokenBoundaries in the following line
> of generated code.
> "ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start,
> retval.stop);"
> 
> The grammar works under Java.  In moving it back to 'C', I changed the
> language option to 'C', added option ASTLabelType=pANTLR3_BASE_TREE;
> and added the necessary includes to compile and link under Objective-C.
> 
> Is there anything obvious that I am doing wrong?
> 
> Thanks,
> Alan
> ---
> 
> Alan Condit
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at ipns.com
> Home-Office (503) 982-0906
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Wed May 19 12:04:15 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 12:04:15 -0700
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
Message-ID: <8721bec599fed34eb50a525a16dccee8@temporal-wave.com>

I also have doubts about the performance characteristics and the possibility of starting to rely on the target language to fill in gaps such as token numbering - we could get to the point where code generators cannot be built for more primitive languages because the schema is relying the language to automatically do things. 

The generated code should be as primitive as possible, with the runtime being as maintainable and clear as possible while not sacrificing performance.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Wednesday, May 19, 2010 11:35 AM
> To: antlr-interest interest
> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code generation
> considered useless
> 
> 
> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
> 
> > There are several advantages to enums:
> > * there is a discrete set of values that can be used (no accidental
> > 42's passed in when 42 isn't a token type)
> > * the enum value can carry extra information
> > * the enum values can override methods differently
> 
> These are all excellent advantages. I believe that these mostly apply
> when you're writing code, not generating. Just like the compiler
> generates integers underneath, if antlr is generating integers, it's
> probably okay.
> 
> > OH - one of the things that's clouding this is that you really don't
> > need the numeric type identifers anymore. You can just have
> >
> >  public enum TokenType {
> >    IDENT, INT ...;
> >  }
> >
> > then in your match method:
> >
> >  void match(TokenType type) {
> >    if (LA(1).getType() == type) {
> >        ...
> >    }
> >  }
> 
> The only problem is that match() lives up in the superclass in the
> library but the generated parser needs to define the enum.
> 
> I also have the problem that I need to merge token types from multiple
> grammars for grammar imports. This gets more competition with enum
> types without inheritance.
> 
> >
> > And you can use the types in a switch statement:
> >
> >  switch(type) {
> >    case INT:
> >    case IDENT:
> >    ...
> >  }
> >
> > No more magic numbers! Woohoo!
> 
> ANTLR already uses the labels when possible such as INT. If you use a
> literal in your grammar such as ';' in don't label it in the lexer,
> than I had no choice but to generate the integer token type or a weird
> label like TOKEN34.
> 
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From scott at javadude.com  Wed May 19 12:13:19 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Wed, 19 May 2010 15:13:19 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
References: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
	<8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
Message-ID: <AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com>

Interesting point re common code generation approaches, but as far as
performance goes, it's equivalent - all == tests are done using
pointers, which are the same size as ints. If switch is used the
ordinal values of the enums are used, and the java compiler may be
able to better optimize which switch bytecode is used b/c it knows the
exact possible range of values.

I'd much rather use enums where available, though. I'd think any code
generator could generate a simple int equivalent where enums don't
exist, though. The only "gotcha" would be if we had the
pattern/description properties, which would have to be represented as
separate arrays in most languages. They aren't necessary though (but
I'd love to have them)
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Wed, May 19, 2010 at 3:04 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> I also have doubts about the performance characteristics and the possibility of starting to rely on the target language to fill in gaps such as token numbering - we could get to the point where code generators cannot be built for more primitive languages because the schema is relying the language to automatically do things.
>
> The generated code should be as primitive as possible, with the runtime being as maintainable and clear as possible while not sacrificing performance.
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Wednesday, May 19, 2010 11:35 AM
>> To: antlr-interest interest
>> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code generation
>> considered useless
>>
>>
>> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
>>
>> > There are several advantages to enums:
>> > * there is a discrete set of values that can be used (no accidental
>> > 42's passed in when 42 isn't a token type)
>> > * the enum value can carry extra information
>> > * the enum values can override methods differently
>>
>> These are all excellent advantages. I believe that these mostly apply
>> when you're writing code, not generating. Just like the compiler
>> generates integers underneath, if antlr is generating integers, it's
>> probably okay.
>>
>> > OH - one of the things that's clouding this is that you really don't
>> > need the numeric type identifers anymore. You can just have
>> >
>> > ?public enum TokenType {
>> > ? ?IDENT, INT ...;
>> > ?}
>> >
>> > then in your match method:
>> >
>> > ?void match(TokenType type) {
>> > ? ?if (LA(1).getType() == type) {
>> > ? ? ? ?...
>> > ? ?}
>> > ?}
>>
>> The only problem is that match() lives up in the superclass in the
>> library but the generated parser needs to define the enum.
>>
>> I also have the problem that I need to merge token types from multiple
>> grammars for grammar imports. This gets more competition with enum
>> types without inheritance.
>>
>> >
>> > And you can use the types in a switch statement:
>> >
>> > ?switch(type) {
>> > ? ?case INT:
>> > ? ?case IDENT:
>> > ? ?...
>> > ?}
>> >
>> > No more magic numbers! Woohoo!
>>
>> ANTLR already uses the labels when possible such as INT. If you use a
>> literal in your grammar such as ';' in don't label it in the lexer,
>> than I had no choice but to generate the integer token type or a weird
>> label like TOKEN34.
>>
>> Ter
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kirby.bohling at gmail.com  Wed May 19 12:59:17 2010
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Wed, 19 May 2010 14:59:17 -0500
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com>
References: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu> 
	<8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
	<AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com>
Message-ID: <AANLkTikZbuK-swYuAzY-f0rOIpkFXYhxQVzCmgvXQC1g@mail.gmail.com>

On Wed, May 19, 2010 at 2:13 PM, Scott Stanchfield <scott at javadude.com> wrote:
> Interesting point re common code generation approaches, but as far as
> performance goes, it's equivalent - all == tests are done using
> pointers, which are the same size as ints. If switch is used the
> ordinal values of the enums are used, and the java compiler may be
> able to better optimize which switch bytecode is used b/c it knows the
> exact possible range of values.

That's true of most full scale JVMs with good JIT, but for many
embedded VM's that isn't true.  See the Dalvik VM for Android.

This link for instance:
http://developer.android.com/guide/practices/design/performance.html#avoid_enums

I believe it is becoming less true as time goes along, but from what I
know right now it is true.

If you can't support generating both, I'd agree with Jim Idle support
the one that will go everywhere.  If however you could treat it like
the C target does with using switch vs. if/else, I'd think that'd be
nifty.  Doubly so because maintenance burden is free when somebody
else is doing the work.  As this affects the external API, I would
assume that it's a non-option to generate one or the other.


>
> I'd much rather use enums where available, though. I'd think any code
> generator could generate a simple int equivalent where enums don't
> exist, though. The only "gotcha" would be if we had the
> pattern/description properties, which would have to be represented as
> separate arrays in most languages. They aren't necessary though (but
> I'd love to have them)
> -- Scott
>
> ----------------------------------------
> Scott Stanchfield
> http://javadude.com
>
>
>
> On Wed, May 19, 2010 at 3:04 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>> I also have doubts about the performance characteristics and the possibility of starting to rely on the target language to fill in gaps such as token numbering - we could get to the point where code generators cannot be built for more primitive languages because the schema is relying the language to automatically do things.
>>
>> The generated code should be as primitive as possible, with the runtime being as maintainable and clear as possible while not sacrificing performance.
>>
>> Jim
>>
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> bounces at antlr.org] On Behalf Of Terence Parr
>>> Sent: Wednesday, May 19, 2010 11:35 AM
>>> To: antlr-interest interest
>>> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code generation
>>> considered useless
>>>
>>>
>>> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
>>>
>>> > There are several advantages to enums:
>>> > * there is a discrete set of values that can be used (no accidental
>>> > 42's passed in when 42 isn't a token type)
>>> > * the enum value can carry extra information
>>> > * the enum values can override methods differently
>>>
>>> These are all excellent advantages. I believe that these mostly apply
>>> when you're writing code, not generating. Just like the compiler
>>> generates integers underneath, if antlr is generating integers, it's
>>> probably okay.
>>>
>>> > OH - one of the things that's clouding this is that you really don't
>>> > need the numeric type identifers anymore. You can just have
>>> >
>>> > ?public enum TokenType {
>>> > ? ?IDENT, INT ...;
>>> > ?}
>>> >
>>> > then in your match method:
>>> >
>>> > ?void match(TokenType type) {
>>> > ? ?if (LA(1).getType() == type) {
>>> > ? ? ? ?...
>>> > ? ?}
>>> > ?}
>>>
>>> The only problem is that match() lives up in the superclass in the
>>> library but the generated parser needs to define the enum.
>>>
>>> I also have the problem that I need to merge token types from multiple
>>> grammars for grammar imports. This gets more competition with enum
>>> types without inheritance.
>>>
>>> >
>>> > And you can use the types in a switch statement:
>>> >
>>> > ?switch(type) {
>>> > ? ?case INT:
>>> > ? ?case IDENT:
>>> > ? ?...
>>> > ?}
>>> >
>>> > No more magic numbers! Woohoo!
>>>
>>> ANTLR already uses the labels when possible such as INT. If you use a
>>> literal in your grammar such as ';' in don't label it in the lexer,
>>> than I had no choice but to generate the integer token type or a weird
>>> label like TOKEN34.
>>>
>>> Ter
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>> email-address
>>
>>
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sameh.wz at gmail.com  Wed May 19 13:06:08 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Wed, 19 May 2010 22:06:08 +0200
Subject: [antlr-interest] how to generate Parser and Lexer in Java runtime
Message-ID: <AANLkTinDbGoPEQHbiXa1A1bLVtQ9We6N5r8mWNYXemT9@mail.gmail.com>

Dear All,

I am a Java developer and use ANTLRWorks 1.3.1
I am working is some dynamic environment, so my grammar is changing over
time due to the continuous change in vocabulary..
So I was thinking of generating my *.g grammar file automatically not to
write it by myself..

But now I face the problem that I cannot find the runtime method that takes
the grammar file as input, and gives as output the generation of the tokens
file, lexer.java file, and parser.java file.. In other words, I simply want
the method that does the exact same task as the "Generate Code" option in
the "Generate" menu in ANTLRWorks 1.3.1 :-)

Any help?
Thanks in Advance ;-)

-- 
Sameh W. Zaky

From scott at javadude.com  Wed May 19 13:30:13 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Wed, 19 May 2010 16:30:13 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTikZbuK-swYuAzY-f0rOIpkFXYhxQVzCmgvXQC1g@mail.gmail.com>
References: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
	<8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
	<AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com>
	<AANLkTikZbuK-swYuAzY-f0rOIpkFXYhxQVzCmgvXQC1g@mail.gmail.com>
Message-ID: <AANLkTimbX3XA6J0Fb67CEvFE-0LfxUkzxzETJnjwn5jy@mail.gmail.com>

Don't pre-optimize for things like this. Profile, then optimize. This
won't even show up as an issue.

I think whoever wrote that page was daydreaming about any minor way
performance might be increased - note that they don't talk at all on
that page about the big performance issues (I/O, networking, etc),
though I do like that they talk about limiting object creation.

With the example they show on that android dev page, you'll never
see/feel the difference. And their example on grabbing the ordinal
value so you don't need to lookup a static field is really silly. If
they just want to avoid looking up the static field everytime through
the loop, don't do:

?   int valX = MyEnum.VAL_X.ordinal();
    int valY = MyEnum.VAL_Y.ordinal();
    int count = list.size();
    MyItem items = list.items();
    for (int  n = 0; n < count; n++)   {
        int  valItem = items[n].e.ordinal();
        if (valItem == valX)
            // do stuff 1
        else if (valItem == valY)
            // do stuff 2
    }

instead do

    MyEnum valX = MyEnum.VAL_X;
    MyEnum valY = MyEnum.VAL_Y;
    int count = list.size();
    MyItem items = list.items();
    for (int  n = 0; n < count; n++)   {
        MyEnum valItem = items[n].e;
        if (valItem == valX)
            // do stuff 1
        else if (valItem == valY)
            // do stuff 2
    }

Stuff like that makes me think whoever wrote that really didn't think
it through all the way. The pointer comparison is the same expense as
the int comparison and avoids n+2 calls to ordinal() in their example
code.

Moreso, the suggestion to use constants that the compiler will inline
is truly evil. Compiler constant inlining can very easily lead to
incorrect constant values when a library (that provides a constant)
changes (new jar dropped in with a new value for the constant) but the
code using that library isn't recompiled. Safety issue.

If this becomes an issue (which I doubt it will), someone can always
extend the code generator to tweak it.
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Wed, May 19, 2010 at 3:59 PM, Kirby Bohling <kirby.bohling at gmail.com> wrote:
> On Wed, May 19, 2010 at 2:13 PM, Scott Stanchfield <scott at javadude.com> wrote:
>> Interesting point re common code generation approaches, but as far as
>> performance goes, it's equivalent - all == tests are done using
>> pointers, which are the same size as ints. If switch is used the
>> ordinal values of the enums are used, and the java compiler may be
>> able to better optimize which switch bytecode is used b/c it knows the
>> exact possible range of values.
>
> That's true of most full scale JVMs with good JIT, but for many
> embedded VM's that isn't true. ?See the Dalvik VM for Android.
>
> This link for instance:
> http://developer.android.com/guide/practices/design/performance.html#avoid_enums
>
> I believe it is becoming less true as time goes along, but from what I
> know right now it is true.
>
> If you can't support generating both, I'd agree with Jim Idle support
> the one that will go everywhere. ?If however you could treat it like
> the C target does with using switch vs. if/else, I'd think that'd be
> nifty. ?Doubly so because maintenance burden is free when somebody
> else is doing the work. ?As this affects the external API, I would
> assume that it's a non-option to generate one or the other.
>
>
>>
>> I'd much rather use enums where available, though. I'd think any code
>> generator could generate a simple int equivalent where enums don't
>> exist, though. The only "gotcha" would be if we had the
>> pattern/description properties, which would have to be represented as
>> separate arrays in most languages. They aren't necessary though (but
>> I'd love to have them)
>> -- Scott
>>
>> ----------------------------------------
>> Scott Stanchfield
>> http://javadude.com
>>
>>
>>
>> On Wed, May 19, 2010 at 3:04 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>>> I also have doubts about the performance characteristics and the possibility of starting to rely on the target language to fill in gaps such as token numbering - we could get to the point where code generators cannot be built for more primitive languages because the schema is relying the language to automatically do things.
>>>
>>> The generated code should be as primitive as possible, with the runtime being as maintainable and clear as possible while not sacrificing performance.
>>>
>>> Jim
>>>
>>>> -----Original Message-----
>>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>>> bounces at antlr.org] On Behalf Of Terence Parr
>>>> Sent: Wednesday, May 19, 2010 11:35 AM
>>>> To: antlr-interest interest
>>>> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code generation
>>>> considered useless
>>>>
>>>>
>>>> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
>>>>
>>>> > There are several advantages to enums:
>>>> > * there is a discrete set of values that can be used (no accidental
>>>> > 42's passed in when 42 isn't a token type)
>>>> > * the enum value can carry extra information
>>>> > * the enum values can override methods differently
>>>>
>>>> These are all excellent advantages. I believe that these mostly apply
>>>> when you're writing code, not generating. Just like the compiler
>>>> generates integers underneath, if antlr is generating integers, it's
>>>> probably okay.
>>>>
>>>> > OH - one of the things that's clouding this is that you really don't
>>>> > need the numeric type identifers anymore. You can just have
>>>> >
>>>> > ?public enum TokenType {
>>>> > ? ?IDENT, INT ...;
>>>> > ?}
>>>> >
>>>> > then in your match method:
>>>> >
>>>> > ?void match(TokenType type) {
>>>> > ? ?if (LA(1).getType() == type) {
>>>> > ? ? ? ?...
>>>> > ? ?}
>>>> > ?}
>>>>
>>>> The only problem is that match() lives up in the superclass in the
>>>> library but the generated parser needs to define the enum.
>>>>
>>>> I also have the problem that I need to merge token types from multiple
>>>> grammars for grammar imports. This gets more competition with enum
>>>> types without inheritance.
>>>>
>>>> >
>>>> > And you can use the types in a switch statement:
>>>> >
>>>> > ?switch(type) {
>>>> > ? ?case INT:
>>>> > ? ?case IDENT:
>>>> > ? ?...
>>>> > ?}
>>>> >
>>>> > No more magic numbers! Woohoo!
>>>>
>>>> ANTLR already uses the labels when possible such as INT. If you use a
>>>> literal in your grammar such as ';' in don't label it in the lexer,
>>>> than I had no choice but to generate the integer token type or a weird
>>>> label like TOKEN34.
>>>>
>>>> Ter
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>>> email-address
>>>
>>>
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>

From acondit at ipns.com  Wed May 19 14:06:25 2010
From: acondit at ipns.com (Alan Condit)
Date: Wed, 19 May 2010 14:06:25 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
Message-ID: <9B93193E-6C38-42F0-BE14-A1CF54B6D40A@ipns.com>

Jim,

Here is what I have set in options:
options {
	backtrack 	= 	true;
	memoize		= 	true;
	language	=	C;
	output		=	AST;
	ASTLabelType	=	pANTLR3_BASE_TREE;
	}

The null is inside 'ctx' inside 'adaptor' at 'setTokenBoundaries'.

It is inside a function 
/** 
* $ANTLR start line
* /Users/acondit/source/GCCnv/LatheBranch/trunk/Parser/RS274ngc.g:184:1: line : ( ( line_number )? ( segment )+ K_NEWLINE -> ^( STMT ( segment )+ ) | ( line_number )? K_NEWLINE -> | oword_stmt -> ^( STMT oword_stmt ) );
*/
static RS274ngcParser_line_return
line(pRS274ngcParser ctx)
{
...
}

which I assume, based on the comment, is generated from this rule:
line	:	line_number? segment+ K_NEWLINE
		-> ^(STMT segment+)
	|	line_number? K_NEWLINE
		->
	|	oword_stmt
		-> ^(STMT oword_stmt)
	;

The grammar is for parsing an existing language not one of my invention, and grammatically the newlines delineate a semantic block therefore must be known by the parser, but empty lines are discarded and therefore should not be in the tree.

Alan
---

Alan's MachineWorks
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at alansmachineworks.com
www.alansmachineworks.com

Jim wrote--
Please post more information about your grammar, what the null pointer is, etc. It is hard to interpolate, but the common mistake is not adding output=AST; to the options, so you do not get a tree adaptor created.

Jim
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-
> bounces at antlr.org
] On Behalf Of Alan Condit

> Sent: Wednesday, May 19, 2010 11:25 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
> 
> Help!!!
> 
> I am getting a null pointer to setTokenBoundaries in the following line
> of generated code.
> "ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start,
> retval.stop);"
> 
> The grammar works under Java.  In moving it back to 'C', I changed the
> language option to 'C', added option ASTLabelType=pANTLR3_BASE_TREE;
> and added the necessary includes to compile and link under Objective-C.
> 
> Is there anything obvious that I am doing wrong?
> 
> Thanks,
> Alan
> 



From cristian.tarsoaga at gmail.com  Wed May 19 14:08:06 2010
From: cristian.tarsoaga at gmail.com (=?ISO-8859-2?Q?Cristian_T=E2r=BAoag=E3?=)
Date: Thu, 20 May 2010 00:08:06 +0300
Subject: [antlr-interest] C target - initialization of return/scope
	structures
Message-ID: <AANLkTiknWiZXpe41H_EpRw8L3j2noAi9h5omDuFmMaEW@mail.gmail.com>

Hi All,

My name is Chris, I started to use antlr and I like it a lot!
I use C++ and I have successfully used it to generate some sourcecode.

I need to use C++: I want std::string, std::vector and more things like
this.
But since I use the C target, it didn't took too much time to get into some
quirks though.

One of the problems I had/have is this: structures used for return values
and those used for scope values are NOT initialized.

Since I tried to use a std:string as a scoped value, I quickly got a nice
crash since my string was created using malloc.

These are (well) known problems, I know that. I found some posts from other
guys having the same problems.
I also found some recommendations on how to avoid initialization problems.
E.g:
http://www.mail-archive.com/il-antlr-interest at googlegroups.com/msg02614.html

The hint there was to use pointers, and:

1. define ANTLR3_MALLOC / ANTLR3_FREE to override antlr's allocators

or

2. manually allocate/deallocate those pointers, probably inside @init and
@after


I'd like to have a clean solution to this, but I can't see how any of these
two options can properly work.


Option 1: I can't override antlr allocator like suggested
#define ANTLR3_MALLOC(request) new request()
because ANTLR_MALLOC is actually called with an argument which is actually
the SIZE of the type that will be allocated and not the TYPE itself.
I think a simple change inside antlr can fix this, but until then.... I
tried the other way...


Option 2: I can't use @init and @after because this will create memory
leaks.
Imagine that I have a scoped value x. I would do @init {x = new X();} and
@after{delete x;}
When rule is fully matched, this works perfectly.
But when the parser fails, the code the pops the scoped value from the stack
is called (and my piece of code inside @after is skipped) so I will get a
memory leak!!
I noticed that the scoped values also have a free function pointer inside
(member), that can take care of deallocation in that situations, but I
couldn't find a way to set it. (?)


So:
- my suggestion: change the ANTLR_MALLOC macro (change the name to
ANTLR_ALLOC and change the impl to take as arg the type itself, so that a
c++ impl could override it with 'new')
- my suggestion: generate a properly initialized structure (I know, it's C
code, but still...once you have such a smart StringTemplate lib, this
shouldn't be a problem)
- my question: what would be a clean way to allocate/deallocate pointers
(without leaks)?


THANKS a lot for ANTLR and for your help!

   Chris


PS: I have some other problems too with the C target: I wasn't able to use
composite grammars with C++. I will get back on this later :-)

From j at junkwallah.org  Wed May 19 15:21:03 2010
From: j at junkwallah.org (Junkman)
Date: Wed, 19 May 2010 15:21:03 -0700
Subject: [antlr-interest] Referencing attributes
Message-ID: <4BF4644F.3060502@junkwallah.org>

Greetings,

I'm a Antlr noob, and have a question regarding accessing attributes.

Where, outside of action, can you reference attributes?  One place seems
to be as parameter to rule invocation like this:

decl: type declarator[ $type.text ] ';' ;
 
This is from The Definitive Antlr Reference,  page 119.

Is that true in general?  Are there other locations outside of actions
where attributes can be accessed?

As noted, I am a noob to Antlr and just joined this list.  Please let me
know if this email's question/topic is not appropriate to the list.

Thanks.



From jbb at acm.org  Wed May 19 15:36:07 2010
From: jbb at acm.org (John B. Brodie)
Date: Wed, 19 May 2010 18:36:07 -0400
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
In-Reply-To: <9B93193E-6C38-42F0-BE14-A1CF54B6D40A@ipns.com>
References: <9B93193E-6C38-42F0-BE14-A1CF54B6D40A@ipns.com>
Message-ID: <1274308567.5618.14.camel@gecko.home.org>

Pardon me for butting in.

And I have never used the C code generator, but.....

On Wed, 2010-05-19 at 14:06 -0700, Alan Condit wrote:

> which I assume, based on the comment, is generated from this rule:
> line	:	line_number? segment+ K_NEWLINE
> 		-> ^(STMT segment+)
> 	|	line_number? K_NEWLINE
> 		->
> 	|	oword_stmt
> 		-> ^(STMT oword_stmt)
> 	;
> 
> The grammar is for parsing an existing language not one of my invention,
> and grammatically the newlines delineate a semantic block therefore must
> be known by the parser, but empty lines are discarded and therefore
> should not be in the tree.

having an empty RHS of the -> rewrite operator feels well unusual.

i am not sure that ANTLR permits a rule which produces no tree when
output=AST is present....

Maybe try (untested):

line : line_number? ( segment+ -> ^(STMT segment+) )? K_NEWLINE
     | oword_stmt -> ^(STMT oword_stmt)
     ;

but i do not know what would happen when no segment is present for the
above rule....

have you considered building a dummy tree node for the empty case and
then your tree walker can just ignore it?

not sure that i have really helped any, sorry.
   -jbb



From naveen.garg at gmail.com  Wed May 19 15:57:28 2010
From: naveen.garg at gmail.com (Naveen)
Date: Wed, 19 May 2010 15:57:28 -0700 (PDT)
Subject: [antlr-interest] Question about building code generation target
In-Reply-To: <49710158.8000201@temporal-wave.com>
References: <C976391F-93C8-4576-8B9E-2F03E69E8711@latencyzero.com> 
	<49710158.8000201@temporal-wave.com>
Message-ID: <ca22c111-cd62-456a-b84c-590cf7ed560c@s41g2000vba.googlegroups.com>

On Jan 16 2009, 4:51?pm, Jim Idle <j... at temporal-wave.com> wrote:
> When you change your template or codegen target java file, you just type:
> mvn
> And it rebuilds just what has changed in a second or two (depends on your machine speed of course).
On my slow machine, this takes 33 seconds after changing 1 template
file.
However, once its built, I can unjar to /path/to/antlr_unjarred
export CLASSPATH=/path/to/antlr_unjarred:$CLASSPATH
and edit the templates without having to rebuild anything.

by the way, are there plans to integrate the build of the other
runtimes into maven ?

From kirby.bohling at gmail.com  Wed May 19 16:29:07 2010
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Wed, 19 May 2010 18:29:07 -0500
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTimbX3XA6J0Fb67CEvFE-0LfxUkzxzETJnjwn5jy@mail.gmail.com>
References: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu> 
	<8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
	<AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com> 
	<AANLkTikZbuK-swYuAzY-f0rOIpkFXYhxQVzCmgvXQC1g@mail.gmail.com> 
	<AANLkTimbX3XA6J0Fb67CEvFE-0LfxUkzxzETJnjwn5jy@mail.gmail.com>
Message-ID: <AANLkTimA8FmekWxyT1clZlStR2cscxlQaes39Jfep6x_@mail.gmail.com>

On topic, I think the only important decision to make is from an API
perspective, while one can go "tweak" the generator, going from int's
to enums would change the API.  I'd suggest just deciding which one
you want to support.  Enums are definitely nicer from that
perspective.  Given the below performance benchmarks, and just how
much of ANTLR's output is really just a series of "if/else" or switch
blocks buried inside of a huge number of loops, I actually do think
you'd spot the difference.

Moving well off-topic, but since you said to, I did just what you suggested:

Using my personal laptop running Fedora 11 using x86_64 for the kernel and JVM:
$ java -version
java version "1.6.0_18"
OpenJDK Runtime Environment (IcedTea6 1.8) (fedora-35.b18.fc11-x86_64)
OpenJDK 64-Bit Server VM (build 14.0-b16, mixed mode)

Both CPU's are Intel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz w/ 3MB cache.

These aren't spectacular benchmarks from an accuracy perspective, but
illustrate that assuming ints and enums have identical performance
characteristics in all cases is an invalid assumption:

Using java -Xint Foo:
Enum Time: 516121334
Int Time : 424748884
Enum Time: 514078841
Int Time : 423574161

~21% performance hit to use enums with HotSpot disabled, (similar to
the DalikVM because it has minimal JIT as of right now, which I'm
guessing why the original article suggested you stay away from them
near performance critical areas).

Using: java -client Foo
Enum Time: 25707993
Int Time : 28520406
Enum Time: 34060167
Int Time : 24820249

~10% speed up for using enums.

Using: java -server Foo
Enum Time: 25543589
Int Time : 28637110
Enum Time: 32887612
Int Time : 28968574

Again ~10% speed up for using enums.

So there might actually be a reason to support Enum's internally from
a speed/performance perspective if the non-JIT case is considered
negligible.  I thought they'd match your claim in this case.  Didn't
have any reason to actually think enums would be faster then int's.

-- Sample code:

public class Foo {

    private static long MAX = 10000000;

    public static void main(String[] args) {
        doEnums();
        doInts();
        doEnums();
        doInts();
    }

    public static void doInts() {
        int val = 0;
        long start = System.nanoTime();
        for (long iii = 0; iii < MAX; ++iii) {
            if (0 == val) {
                val = 1;
            } else if (1 == val) {
                val = 0;
            }
        }
        long end = System.nanoTime();
        System.out.println("Int Time : " + (end - start));
    }

    enum Parity { EVEN, ODD };
    public static void doEnums() {
        Parity val = Parity.EVEN;
        long start = System.nanoTime();
        for (long iii = 0; iii < MAX; ++iii) {
            if (Parity.EVEN == val) {
                val = Parity.ODD;
            } else if (Parity.ODD == val) {
                val = Parity.EVEN;
            }
        }
        long end = System.nanoTime();
        System.out.println("Enum Time: " + (end - start));
    }

}


On Wed, May 19, 2010 at 3:30 PM, Scott Stanchfield <scott at javadude.com> wrote:
> Don't pre-optimize for things like this. Profile, then optimize. This
> won't even show up as an issue.
>
> I think whoever wrote that page was daydreaming about any minor way
> performance might be increased - note that they don't talk at all on
> that page about the big performance issues (I/O, networking, etc),
> though I do like that they talk about limiting object creation.
>
> With the example they show on that android dev page, you'll never
> see/feel the difference. And their example on grabbing the ordinal
> value so you don't need to lookup a static field is really silly. If
> they just want to avoid looking up the static field everytime through
> the loop, don't do:
>
> ? ? int valX = MyEnum.VAL_X.ordinal();
> ? ?int valY = MyEnum.VAL_Y.ordinal();
> ? ?int count = list.size();
> ? ?MyItem items = list.items();
> ? ?for (int ?n = 0; n < count; n++) ? {
> ? ? ? ?int ?valItem = items[n].e.ordinal();
> ? ? ? ?if (valItem == valX)
> ? ? ? ? ? ?// do stuff 1
> ? ? ? ?else if (valItem == valY)
> ? ? ? ? ? ?// do stuff 2
> ? ?}
>
> instead do
>
> ? ?MyEnum valX = MyEnum.VAL_X;
> ? ?MyEnum valY = MyEnum.VAL_Y;
> ? ?int count = list.size();
> ? ?MyItem items = list.items();
> ? ?for (int ?n = 0; n < count; n++) ? {
> ? ? ? ?MyEnum valItem = items[n].e;
> ? ? ? ?if (valItem == valX)
> ? ? ? ? ? ?// do stuff 1
> ? ? ? ?else if (valItem == valY)
> ? ? ? ? ? ?// do stuff 2
> ? ?}
>
> Stuff like that makes me think whoever wrote that really didn't think
> it through all the way. The pointer comparison is the same expense as
> the int comparison and avoids n+2 calls to ordinal() in their example
> code.
>
> Moreso, the suggestion to use constants that the compiler will inline
> is truly evil. Compiler constant inlining can very easily lead to
> incorrect constant values when a library (that provides a constant)
> changes (new jar dropped in with a new value for the constant) but the
> code using that library isn't recompiled. Safety issue.
>
> If this becomes an issue (which I doubt it will), someone can always
> extend the code generator to tweak it.
> -- Scott
>
> ----------------------------------------
> Scott Stanchfield
> http://javadude.com
>
>
>
> On Wed, May 19, 2010 at 3:59 PM, Kirby Bohling <kirby.bohling at gmail.com> wrote:
>> On Wed, May 19, 2010 at 2:13 PM, Scott Stanchfield <scott at javadude.com> wrote:
>>> Interesting point re common code generation approaches, but as far as
>>> performance goes, it's equivalent - all == tests are done using
>>> pointers, which are the same size as ints. If switch is used the
>>> ordinal values of the enums are used, and the java compiler may be
>>> able to better optimize which switch bytecode is used b/c it knows the
>>> exact possible range of values.
>>
>> That's true of most full scale JVMs with good JIT, but for many
>> embedded VM's that isn't true. ?See the Dalvik VM for Android.
>>
>> This link for instance:
>> http://developer.android.com/guide/practices/design/performance.html#avoid_enums
>>
>> I believe it is becoming less true as time goes along, but from what I
>> know right now it is true.
>>
>> If you can't support generating both, I'd agree with Jim Idle support
>> the one that will go everywhere. ?If however you could treat it like
>> the C target does with using switch vs. if/else, I'd think that'd be
>> nifty. ?Doubly so because maintenance burden is free when somebody
>> else is doing the work. ?As this affects the external API, I would
>> assume that it's a non-option to generate one or the other.
>>
>>
>>>
>>> I'd much rather use enums where available, though. I'd think any code
>>> generator could generate a simple int equivalent where enums don't
>>> exist, though. The only "gotcha" would be if we had the
>>> pattern/description properties, which would have to be represented as
>>> separate arrays in most languages. They aren't necessary though (but
>>> I'd love to have them)
>>> -- Scott
>>>
>>> ----------------------------------------
>>> Scott Stanchfield
>>> http://javadude.com
>>>
>>>
>>>
>>> On Wed, May 19, 2010 at 3:04 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>>>> I also have doubts about the performance characteristics and the possibility of starting to rely on the target language to fill in gaps such as token numbering - we could get to the point where code generators cannot be built for more primitive languages because the schema is relying the language to automatically do things.
>>>>
>>>> The generated code should be as primitive as possible, with the runtime being as maintainable and clear as possible while not sacrificing performance.
>>>>
>>>> Jim
>>>>
>>>>> -----Original Message-----
>>>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>>>> bounces at antlr.org] On Behalf Of Terence Parr
>>>>> Sent: Wednesday, May 19, 2010 11:35 AM
>>>>> To: antlr-interest interest
>>>>> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code generation
>>>>> considered useless
>>>>>
>>>>>
>>>>> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
>>>>>
>>>>> > There are several advantages to enums:
>>>>> > * there is a discrete set of values that can be used (no accidental
>>>>> > 42's passed in when 42 isn't a token type)
>>>>> > * the enum value can carry extra information
>>>>> > * the enum values can override methods differently
>>>>>
>>>>> These are all excellent advantages. I believe that these mostly apply
>>>>> when you're writing code, not generating. Just like the compiler
>>>>> generates integers underneath, if antlr is generating integers, it's
>>>>> probably okay.
>>>>>
>>>>> > OH - one of the things that's clouding this is that you really don't
>>>>> > need the numeric type identifers anymore. You can just have
>>>>> >
>>>>> > ?public enum TokenType {
>>>>> > ? ?IDENT, INT ...;
>>>>> > ?}
>>>>> >
>>>>> > then in your match method:
>>>>> >
>>>>> > ?void match(TokenType type) {
>>>>> > ? ?if (LA(1).getType() == type) {
>>>>> > ? ? ? ?...
>>>>> > ? ?}
>>>>> > ?}
>>>>>
>>>>> The only problem is that match() lives up in the superclass in the
>>>>> library but the generated parser needs to define the enum.
>>>>>
>>>>> I also have the problem that I need to merge token types from multiple
>>>>> grammars for grammar imports. This gets more competition with enum
>>>>> types without inheritance.
>>>>>
>>>>> >
>>>>> > And you can use the types in a switch statement:
>>>>> >
>>>>> > ?switch(type) {
>>>>> > ? ?case INT:
>>>>> > ? ?case IDENT:
>>>>> > ? ?...
>>>>> > ?}
>>>>> >
>>>>> > No more magic numbers! Woohoo!
>>>>>
>>>>> ANTLR already uses the labels when possible such as INT. If you use a
>>>>> literal in your grammar such as ';' in don't label it in the lexer,
>>>>> than I had no choice but to generate the integer token type or a weird
>>>>> label like TOKEN34.
>>>>>
>>>>> Ter
>>>>>
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>>>> email-address
>>>>
>>>>
>>>>
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>

From acondit at ipns.com  Wed May 19 17:00:40 2010
From: acondit at ipns.com (Alan Condit)
Date: Wed, 19 May 2010 17:00:40 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
In-Reply-To: <1274308567.5618.14.camel@gecko.home.org>
References: <9B93193E-6C38-42F0-BE14-A1CF54B6D40A@ipns.com>
	<1274308567.5618.14.camel@gecko.home.org>
Message-ID: <78B2364A-F5D4-4CE5-99F3-A710992B62C1@ipns.com>

On page 164 of "The Definitive Antlr Reference" under the heading "Omitting Input Elements" Terrance shows using an empty rewrite rule to allow omitting unneeded symbols from the output AST tree.

This does not say that it could not be causing a problem with the generated 'C' code.

Jim, is there a possibility that this is a problem?

Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906

On May 19, 2010, at 3:36 PM, John B. Brodie wrote:

> Pardon me for butting in.
> 
> And I have never used the C code generator, but.....
> 
> On Wed, 2010-05-19 at 14:06 -0700, Alan Condit wrote:
> 
>> which I assume, based on the comment, is generated from this rule:
>> line	:	line_number? segment+ K_NEWLINE
>> 		-> ^(STMT segment+)
>> 	|	line_number? K_NEWLINE
>> 		->
>> 	|	oword_stmt
>> 		-> ^(STMT oword_stmt)
>> 	;
>> 
>> The grammar is for parsing an existing language not one of my invention,
>> and grammatically the newlines delineate a semantic block therefore must
>> be known by the parser, but empty lines are discarded and therefore
>> should not be in the tree.
> 
> having an empty RHS of the -> rewrite operator feels well unusual.
> 
> i am not sure that ANTLR permits a rule which produces no tree when
> output=AST is present....
> 
> Maybe try (untested):
> 
> line : line_number? ( segment+ -> ^(STMT segment+) )? K_NEWLINE
>     | oword_stmt -> ^(STMT oword_stmt)
>     ;
> 
> but i do not know what would happen when no segment is present for the
> above rule....
> 
> have you considered building a dummy tree node for the empty case and
> then your tree walker can just ignore it?
> 
> not sure that i have really helped any, sorry.
>   -jbb
> 
> 


From jimi at temporal-wave.com  Wed May 19 18:02:18 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 18:02:18 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
In-Reply-To: <9B93193E-6C38-42F0-BE14-A1CF54B6D40A@ipns.com>
Message-ID: <6da4da5674ca904f9a28cbbb07bc84be@temporal-wave.com>

I think you will have to put those three productions in separate rules, but I will look into it more.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Wednesday, May 19, 2010 2:06 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] null pointer to ADAPTOR-
> >setTokenBoundaries
> 
> Jim,
> 
> Here is what I have set in options:
> options {
> 	backtrack 	= 	true;
> 	memoize		= 	true;
> 	language	=	C;
> 	output		=	AST;
> 	ASTLabelType	=	pANTLR3_BASE_TREE;
> 	}
> 
> The null is inside 'ctx' inside 'adaptor' at 'setTokenBoundaries'.
> 
> It is inside a function
> /**
> * $ANTLR start line
> *
> /Users/acondit/source/GCCnv/LatheBranch/trunk/Parser/RS274ngc.g:184:1:
> line : ( ( line_number )? ( segment )+ K_NEWLINE -> ^( STMT ( segment
> )+ ) | ( line_number )? K_NEWLINE -> | oword_stmt -> ^( STMT oword_stmt
> ) );
> */
> static RS274ngcParser_line_return
> line(pRS274ngcParser ctx)
> {
> ...
> }
> 
> which I assume, based on the comment, is generated from this rule:
> line	:	line_number? segment+ K_NEWLINE
> 		-> ^(STMT segment+)
> 	|	line_number? K_NEWLINE
> 		->
> 	|	oword_stmt
> 		-> ^(STMT oword_stmt)
> 	;
> 
> The grammar is for parsing an existing language not one of my
> invention, and grammatically the newlines delineate a semantic block
> therefore must be known by the parser, but empty lines are discarded
> and therefore should not be in the tree.
> 
> Alan
> ---
> 
> Alan's MachineWorks
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at alansmachineworks.com
> www.alansmachineworks.com
> 
> Jim wrote--
> Please post more information about your grammar, what the null pointer
> is, etc. It is hard to interpolate, but the common mistake is not
> adding output=AST; to the options, so you do not get a tree adaptor
> created.
> 
> Jim
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-
> > bounces at antlr.org
> ] On Behalf Of Alan Condit
> 
> > Sent: Wednesday, May 19, 2010 11:25 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
> >
> > Help!!!
> >
> > I am getting a null pointer to setTokenBoundaries in the following
> line
> > of generated code.
> > "ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start,
> > retval.stop);"
> >
> > The grammar works under Java.  In moving it back to 'C', I changed
> the
> > language option to 'C', added option ASTLabelType=pANTLR3_BASE_TREE;
> > and added the necessary includes to compile and link under Objective-
> C.
> >
> > Is there anything obvious that I am doing wrong?
> >
> > Thanks,
> > Alan
> >
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Wed May 19 18:07:17 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 18:07:17 -0700
Subject: [antlr-interest] C target - initialization of return/scope
	structures
In-Reply-To: <AANLkTiknWiZXpe41H_EpRw8L3j2noAi9h5omDuFmMaEW@mail.gmail.com>
Message-ID: <8dc64d3445f05c43bd8b7573a3f618ec@temporal-wave.com>

Why would you try to use a return value that you have not set? If it is set to NULL then you will core dump unless you check for NULL so it would not help you. The values are not initialized because I don't know what they are, they might be object references or something that cannot be set to NULL. I changed from assuming a nullable target because everyone complained ;-)

But I assure you that you can initialize all your values in the @init{} section. Where is it that you are having problems. I think that your question might not be the one you are asking.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Cristian T?r?oag?
> Sent: Wednesday, May 19, 2010 2:08 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] C target - initialization of return/scope
> structures
> 
> Hi All,
> 
> My name is Chris, I started to use antlr and I like it a lot!
> I use C++ and I have successfully used it to generate some sourcecode.
> 
> I need to use C++: I want std::string, std::vector and more things like
> this.
> But since I use the C target, it didn't took too much time to get into
> some
> quirks though.
> 
> One of the problems I had/have is this: structures used for return
> values
> and those used for scope values are NOT initialized.
> 
> Since I tried to use a std:string as a scoped value, I quickly got a
> nice
> crash since my string was created using malloc.
> 
> These are (well) known problems, I know that. I found some posts from
> other
> guys having the same problems.
> I also found some recommendations on how to avoid initialization
> problems.
> E.g:
> http://www.mail-archive.com/il-antlr-
> interest at googlegroups.com/msg02614.html
> 
> The hint there was to use pointers, and:
> 
> 1. define ANTLR3_MALLOC / ANTLR3_FREE to override antlr's allocators
> 
> or
> 
> 2. manually allocate/deallocate those pointers, probably inside @init
> and
> @after
> 
> 
> I'd like to have a clean solution to this, but I can't see how any of
> these
> two options can properly work.
> 
> 
> Option 1: I can't override antlr allocator like suggested
> #define ANTLR3_MALLOC(request) new request()
> because ANTLR_MALLOC is actually called with an argument which is
> actually
> the SIZE of the type that will be allocated and not the TYPE itself.
> I think a simple change inside antlr can fix this, but until then.... I
> tried the other way...
> 
> 
> Option 2: I can't use @init and @after because this will create memory
> leaks.
> Imagine that I have a scoped value x. I would do @init {x = new X();}
> and
> @after{delete x;}
> When rule is fully matched, this works perfectly.
> But when the parser fails, the code the pops the scoped value from the
> stack
> is called (and my piece of code inside @after is skipped) so I will get
> a
> memory leak!!
> I noticed that the scoped values also have a free function pointer
> inside
> (member), that can take care of deallocation in that situations, but I
> couldn't find a way to set it. (?)
> 
> 
> So:
> - my suggestion: change the ANTLR_MALLOC macro (change the name to
> ANTLR_ALLOC and change the impl to take as arg the type itself, so that
> a
> c++ impl could override it with 'new')
> - my suggestion: generate a properly initialized structure (I know,
> it's C
> code, but still...once you have such a smart StringTemplate lib, this
> shouldn't be a problem)
> - my question: what would be a clean way to allocate/deallocate
> pointers
> (without leaks)?
> 
> 
> THANKS a lot for ANTLR and for your help!
> 
>    Chris
> 
> 
> PS: I have some other problems too with the C target: I wasn't able to
> use
> composite grammars with C++. I will get back on this later :-)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Wed May 19 18:25:54 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 18:25:54 -0700
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTimA8FmekWxyT1clZlStR2cscxlQaes39Jfep6x_@mail.gmail.com>
Message-ID: <46e67e9439d1f946b5c6d03761e95a1f@temporal-wave.com>

I suspect that your benchmark runs afoul of clock granularity issues for the JIT. If you run it a few times you will likely get different results. Also you say 10% better for enums but look at your results again. 

Take the client JIT, your first run gives:

Enum Time: 25707993
Int Time : 28520406

So enum is slightly better, but your second run gives:

Enum Time: 34060167
Int Time : 24820249


And Int time in this run is superior to your enum time by a far greater margin than the reverse in the first run. Your server shows a similar disparity. You have to run for much longer times and repeat many times, then average out because the JIT does not always make the same decision. 

Unless there is something about your print outs that I am missing?

Finally, I would not trust 64 bit openjdk as far as I can throw my house :-)

Finally, finally, you need to look at switch() performance really, and as ANTLR will (does if you set the -X options to the same values as I use in the C generator) use them. There tend to be a fair number of switch cases with some further embedded switches. 

The C optimizer will murder those but the Java JIT has some opportunity to reorder the case at runtime and theoretically it could do better than the C compiler for some use cases. It rarely does though because of other overheads and the fact that most real world applications don't exhibit a polarization to one or two oft used cases out of many. You can see that ANTLR generated code would only do this if out of many alts, just one or two were taken a lot (which would depend on the language being parsed).

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kirby Bohling
> Sent: Wednesday, May 19, 2010 4:29 PM
> To: Scott Stanchfield
> Cc: antlr-interest interest
> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code generation
> considered useless
> 
> On topic, I think the only important decision to make is from an API
> perspective, while one can go "tweak" the generator, going from int's
> to enums would change the API.  I'd suggest just deciding which one
> you want to support.  Enums are definitely nicer from that
> perspective.  Given the below performance benchmarks, and just how
> much of ANTLR's output is really just a series of "if/else" or switch
> blocks buried inside of a huge number of loops, I actually do think
> you'd spot the difference.
> 
> Moving well off-topic, but since you said to, I did just what you
> suggested:
> 
> Using my personal laptop running Fedora 11 using x86_64 for the kernel
> and JVM:
> $ java -version
> java version "1.6.0_18"
> OpenJDK Runtime Environment (IcedTea6 1.8) (fedora-35.b18.fc11-x86_64)
> OpenJDK 64-Bit Server VM (build 14.0-b16, mixed mode)
> 
> Both CPU's are Intel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz w/ 3MB
> cache.
> 
> These aren't spectacular benchmarks from an accuracy perspective, but
> illustrate that assuming ints and enums have identical performance
> characteristics in all cases is an invalid assumption:
> 
> Using java -Xint Foo:
> Enum Time: 516121334
> Int Time : 424748884
> Enum Time: 514078841
> Int Time : 423574161
> 
> ~21% performance hit to use enums with HotSpot disabled, (similar to
> the DalikVM because it has minimal JIT as of right now, which I'm
> guessing why the original article suggested you stay away from them
> near performance critical areas).
> 
> Using: java -client Foo
> Enum Time: 25707993
> Int Time : 28520406
> Enum Time: 34060167
> Int Time : 24820249
> 
> ~10% speed up for using enums.
> 
> Using: java -server Foo
> Enum Time: 25543589
> Int Time : 28637110
> Enum Time: 32887612
> Int Time : 28968574
> 
> Again ~10% speed up for using enums.
> 
> So there might actually be a reason to support Enum's internally from
> a speed/performance perspective if the non-JIT case is considered
> negligible.  I thought they'd match your claim in this case.  Didn't
> have any reason to actually think enums would be faster then int's.
> 
> -- Sample code:
> 
> public class Foo {
> 
>     private static long MAX = 10000000;
> 
>     public static void main(String[] args) {
>         doEnums();
>         doInts();
>         doEnums();
>         doInts();
>     }
> 
>     public static void doInts() {
>         int val = 0;
>         long start = System.nanoTime();
>         for (long iii = 0; iii < MAX; ++iii) {
>             if (0 == val) {
>                 val = 1;
>             } else if (1 == val) {
>                 val = 0;
>             }
>         }
>         long end = System.nanoTime();
>         System.out.println("Int Time : " + (end - start));
>     }
> 
>     enum Parity { EVEN, ODD };
>     public static void doEnums() {
>         Parity val = Parity.EVEN;
>         long start = System.nanoTime();
>         for (long iii = 0; iii < MAX; ++iii) {
>             if (Parity.EVEN == val) {
>                 val = Parity.ODD;
>             } else if (Parity.ODD == val) {
>                 val = Parity.EVEN;
>             }
>         }
>         long end = System.nanoTime();
>         System.out.println("Enum Time: " + (end - start));
>     }
> 
> }
> 
> 
> On Wed, May 19, 2010 at 3:30 PM, Scott Stanchfield <scott at javadude.com>
> wrote:
> > Don't pre-optimize for things like this. Profile, then optimize. This
> > won't even show up as an issue.
> >
> > I think whoever wrote that page was daydreaming about any minor way
> > performance might be increased - note that they don't talk at all on
> > that page about the big performance issues (I/O, networking, etc),
> > though I do like that they talk about limiting object creation.
> >
> > With the example they show on that android dev page, you'll never
> > see/feel the difference. And their example on grabbing the ordinal
> > value so you don't need to lookup a static field is really silly. If
> > they just want to avoid looking up the static field everytime through
> > the loop, don't do:
> >
> > ? ? int valX = MyEnum.VAL_X.ordinal();
> > ? ?int valY = MyEnum.VAL_Y.ordinal();
> > ? ?int count = list.size();
> > ? ?MyItem items = list.items();
> > ? ?for (int ?n = 0; n < count; n++) ? {
> > ? ? ? ?int ?valItem = items[n].e.ordinal();
> > ? ? ? ?if (valItem == valX)
> > ? ? ? ? ? ?// do stuff 1
> > ? ? ? ?else if (valItem == valY)
> > ? ? ? ? ? ?// do stuff 2
> > ? ?}
> >
> > instead do
> >
> > ? ?MyEnum valX = MyEnum.VAL_X;
> > ? ?MyEnum valY = MyEnum.VAL_Y;
> > ? ?int count = list.size();
> > ? ?MyItem items = list.items();
> > ? ?for (int ?n = 0; n < count; n++) ? {
> > ? ? ? ?MyEnum valItem = items[n].e;
> > ? ? ? ?if (valItem == valX)
> > ? ? ? ? ? ?// do stuff 1
> > ? ? ? ?else if (valItem == valY)
> > ? ? ? ? ? ?// do stuff 2
> > ? ?}
> >
> > Stuff like that makes me think whoever wrote that really didn't think
> > it through all the way. The pointer comparison is the same expense as
> > the int comparison and avoids n+2 calls to ordinal() in their example
> > code.
> >
> > Moreso, the suggestion to use constants that the compiler will inline
> > is truly evil. Compiler constant inlining can very easily lead to
> > incorrect constant values when a library (that provides a constant)
> > changes (new jar dropped in with a new value for the constant) but
> the
> > code using that library isn't recompiled. Safety issue.
> >
> > If this becomes an issue (which I doubt it will), someone can always
> > extend the code generator to tweak it.
> > -- Scott
> >
> > ----------------------------------------
> > Scott Stanchfield
> > http://javadude.com
> >
> >
> >
> > On Wed, May 19, 2010 at 3:59 PM, Kirby Bohling
> <kirby.bohling at gmail.com> wrote:
> >> On Wed, May 19, 2010 at 2:13 PM, Scott Stanchfield
> <scott at javadude.com> wrote:
> >>> Interesting point re common code generation approaches, but as far
> as
> >>> performance goes, it's equivalent - all == tests are done using
> >>> pointers, which are the same size as ints. If switch is used the
> >>> ordinal values of the enums are used, and the java compiler may be
> >>> able to better optimize which switch bytecode is used b/c it knows
> the
> >>> exact possible range of values.
> >>
> >> That's true of most full scale JVMs with good JIT, but for many
> >> embedded VM's that isn't true. ?See the Dalvik VM for Android.
> >>
> >> This link for instance:
> >>
> http://developer.android.com/guide/practices/design/performance.html#av
> oid_enums
> >>
> >> I believe it is becoming less true as time goes along, but from what
> I
> >> know right now it is true.
> >>
> >> If you can't support generating both, I'd agree with Jim Idle
> support
> >> the one that will go everywhere. ?If however you could treat it like
> >> the C target does with using switch vs. if/else, I'd think that'd be
> >> nifty. ?Doubly so because maintenance burden is free when somebody
> >> else is doing the work. ?As this affects the external API, I would
> >> assume that it's a non-option to generate one or the other.
> >>
> >>
> >>>
> >>> I'd much rather use enums where available, though. I'd think any
> code
> >>> generator could generate a simple int equivalent where enums don't
> >>> exist, though. The only "gotcha" would be if we had the
> >>> pattern/description properties, which would have to be represented
> as
> >>> separate arrays in most languages. They aren't necessary though
> (but
> >>> I'd love to have them)
> >>> -- Scott
> >>>
> >>> ----------------------------------------
> >>> Scott Stanchfield
> >>> http://javadude.com
> >>>
> >>>
> >>>
> >>> On Wed, May 19, 2010 at 3:04 PM, Jim Idle <jimi at temporal-wave.com>
> wrote:
> >>>> I also have doubts about the performance characteristics and the
> possibility of starting to rely on the target language to fill in gaps
> such as token numbering - we could get to the point where code
> generators cannot be built for more primitive languages because the
> schema is relying the language to automatically do things.
> >>>>
> >>>> The generated code should be as primitive as possible, with the
> runtime being as maintainable and clear as possible while not
> sacrificing performance.
> >>>>
> >>>> Jim
> >>>>
> >>>>> -----Original Message-----
> >>>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >>>>> bounces at antlr.org] On Behalf Of Terence Parr
> >>>>> Sent: Wednesday, May 19, 2010 11:35 AM
> >>>>> To: antlr-interest interest
> >>>>> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code
> generation
> >>>>> considered useless
> >>>>>
> >>>>>
> >>>>> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
> >>>>>
> >>>>> > There are several advantages to enums:
> >>>>> > * there is a discrete set of values that can be used (no
> accidental
> >>>>> > 42's passed in when 42 isn't a token type)
> >>>>> > * the enum value can carry extra information
> >>>>> > * the enum values can override methods differently
> >>>>>
> >>>>> These are all excellent advantages. I believe that these mostly
> apply
> >>>>> when you're writing code, not generating. Just like the compiler
> >>>>> generates integers underneath, if antlr is generating integers,
> it's
> >>>>> probably okay.
> >>>>>
> >>>>> > OH - one of the things that's clouding this is that you really
> don't
> >>>>> > need the numeric type identifers anymore. You can just have
> >>>>> >
> >>>>> > ?public enum TokenType {
> >>>>> > ? ?IDENT, INT ...;
> >>>>> > ?}
> >>>>> >
> >>>>> > then in your match method:
> >>>>> >
> >>>>> > ?void match(TokenType type) {
> >>>>> > ? ?if (LA(1).getType() == type) {
> >>>>> > ? ? ? ?...
> >>>>> > ? ?}
> >>>>> > ?}
> >>>>>
> >>>>> The only problem is that match() lives up in the superclass in
> the
> >>>>> library but the generated parser needs to define the enum.
> >>>>>
> >>>>> I also have the problem that I need to merge token types from
> multiple
> >>>>> grammars for grammar imports. This gets more competition with
> enum
> >>>>> types without inheritance.
> >>>>>
> >>>>> >
> >>>>> > And you can use the types in a switch statement:
> >>>>> >
> >>>>> > ?switch(type) {
> >>>>> > ? ?case INT:
> >>>>> > ? ?case IDENT:
> >>>>> > ? ?...
> >>>>> > ?}
> >>>>> >
> >>>>> > No more magic numbers! Woohoo!
> >>>>>
> >>>>> ANTLR already uses the labels when possible such as INT. If you
> use a
> >>>>> literal in your grammar such as ';' in don't label it in the
> lexer,
> >>>>> than I had no choice but to generate the integer token type or a
> weird
> >>>>> label like TOKEN34.
> >>>>>
> >>>>> Ter
> >>>>>
> >>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> >>>>> email-address
> >>>>
> >>>>
> >>>>
> >>>>
> >>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> >>>>
> >>>
> >>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> >>>
> >>
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Wed May 19 18:27:18 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 May 2010 18:27:18 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
In-Reply-To: <78B2364A-F5D4-4CE5-99F3-A710992B62C1@ipns.com>
Message-ID: <6bf9965b607cc146bf9cdca469c5f2bd@temporal-wave.com>

Possibly, though I suspect your easy work around is to make each alt a subrule. I will look tomorrow.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Wednesday, May 19, 2010 5:01 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] null pointer to ADAPTOR-
> >setTokenBoundaries
> 
> On page 164 of "The Definitive Antlr Reference" under the heading
> "Omitting Input Elements" Terrance shows using an empty rewrite rule to
> allow omitting unneeded symbols from the output AST tree.
> 
> This does not say that it could not be causing a problem with the
> generated 'C' code.
> 
> Jim, is there a possibility that this is a problem?
> 
> Alan
> ---
> 
> Alan Condit
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at ipns.com
> Home-Office (503) 982-0906
> 
> On May 19, 2010, at 3:36 PM, John B. Brodie wrote:
> 
> > Pardon me for butting in.
> >
> > And I have never used the C code generator, but.....
> >
> > On Wed, 2010-05-19 at 14:06 -0700, Alan Condit wrote:
> >
> >> which I assume, based on the comment, is generated from this rule:
> >> line	:	line_number? segment+ K_NEWLINE
> >> 		-> ^(STMT segment+)
> >> 	|	line_number? K_NEWLINE
> >> 		->
> >> 	|	oword_stmt
> >> 		-> ^(STMT oword_stmt)
> >> 	;
> >>
> >> The grammar is for parsing an existing language not one of my
> invention,
> >> and grammatically the newlines delineate a semantic block therefore
> must
> >> be known by the parser, but empty lines are discarded and therefore
> >> should not be in the tree.
> >
> > having an empty RHS of the -> rewrite operator feels well unusual.
> >
> > i am not sure that ANTLR permits a rule which produces no tree when
> > output=AST is present....
> >
> > Maybe try (untested):
> >
> > line : line_number? ( segment+ -> ^(STMT segment+) )? K_NEWLINE
> >     | oword_stmt -> ^(STMT oword_stmt)
> >     ;
> >
> > but i do not know what would happen when no segment is present for
> the
> > above rule....
> >
> > have you considered building a dummy tree node for the empty case and
> > then your tree walker can just ignore it?
> >
> > not sure that i have really helped any, sorry.
> >   -jbb
> >
> >
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From scott at javadude.com  Wed May 19 18:59:20 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Wed, 19 May 2010 21:59:20 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTimA8FmekWxyT1clZlStR2cscxlQaes39Jfep6x_@mail.gmail.com>
References: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
	<8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
	<AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com>
	<AANLkTikZbuK-swYuAzY-f0rOIpkFXYhxQVzCmgvXQC1g@mail.gmail.com>
	<AANLkTimbX3XA6J0Fb67CEvFE-0LfxUkzxzETJnjwn5jy@mail.gmail.com>
	<AANLkTimA8FmekWxyT1clZlStR2cscxlQaes39Jfep6x_@mail.gmail.com>
Message-ID: <AANLkTik4AQWSrPw7SaEaEsrd0EWSylxSjUyFkOSqiryU@mail.gmail.com>

I just ran that code with it looping through doEnums/doInts 1000
times. The difference was ~5% for -client and -Xbatch, and ~10% for
-server. (I tried -Xint and it took waaaaaay too long). All had enums
as higher, which sounds reasonable (as there's static field lookups
being done)

My main point here is that while we're seeing 5-10% or so differences,
that's 5-10% difference in part of the program that goes incredibly
fast (so a 5-10% hit is unnoticeable), whereas a 5-10% hit in I/O
could be a very big deal.

We're measuring a performance difference of millions of calls. In a
typical parse, you may have a few thousand tokens, each of which may
be tested a few dozen times.

-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Wed, May 19, 2010 at 7:29 PM, Kirby Bohling <kirby.bohling at gmail.com> wrote:
> On topic, I think the only important decision to make is from an API
> perspective, while one can go "tweak" the generator, going from int's
> to enums would change the API. ?I'd suggest just deciding which one
> you want to support. ?Enums are definitely nicer from that
> perspective. ?Given the below performance benchmarks, and just how
> much of ANTLR's output is really just a series of "if/else" or switch
> blocks buried inside of a huge number of loops, I actually do think
> you'd spot the difference.
>
> Moving well off-topic, but since you said to, I did just what you suggested:
>
> Using my personal laptop running Fedora 11 using x86_64 for the kernel and JVM:
> $ java -version
> java version "1.6.0_18"
> OpenJDK Runtime Environment (IcedTea6 1.8) (fedora-35.b18.fc11-x86_64)
> OpenJDK 64-Bit Server VM (build 14.0-b16, mixed mode)
>
> Both CPU's are Intel(R) Core(TM)2 Duo CPU ? ? P8600 ?@ 2.40GHz w/ 3MB cache.
>
> These aren't spectacular benchmarks from an accuracy perspective, but
> illustrate that assuming ints and enums have identical performance
> characteristics in all cases is an invalid assumption:
>
> Using java -Xint Foo:
> Enum Time: 516121334
> Int Time : 424748884
> Enum Time: 514078841
> Int Time : 423574161
>
> ~21% performance hit to use enums with HotSpot disabled, (similar to
> the DalikVM because it has minimal JIT as of right now, which I'm
> guessing why the original article suggested you stay away from them
> near performance critical areas).
>
> Using: java -client Foo
> Enum Time: 25707993
> Int Time : 28520406
> Enum Time: 34060167
> Int Time : 24820249
>
> ~10% speed up for using enums.
>
> Using: java -server Foo
> Enum Time: 25543589
> Int Time : 28637110
> Enum Time: 32887612
> Int Time : 28968574
>
> Again ~10% speed up for using enums.
>
> So there might actually be a reason to support Enum's internally from
> a speed/performance perspective if the non-JIT case is considered
> negligible. ?I thought they'd match your claim in this case. ?Didn't
> have any reason to actually think enums would be faster then int's.
>
> -- Sample code:
>
> public class Foo {
>
> ? ?private static long MAX = 10000000;
>
> ? ?public static void main(String[] args) {
> ? ? ? ?doEnums();
> ? ? ? ?doInts();
> ? ? ? ?doEnums();
> ? ? ? ?doInts();
> ? ?}
>
> ? ?public static void doInts() {
> ? ? ? ?int val = 0;
> ? ? ? ?long start = System.nanoTime();
> ? ? ? ?for (long iii = 0; iii < MAX; ++iii) {
> ? ? ? ? ? ?if (0 == val) {
> ? ? ? ? ? ? ? ?val = 1;
> ? ? ? ? ? ?} else if (1 == val) {
> ? ? ? ? ? ? ? ?val = 0;
> ? ? ? ? ? ?}
> ? ? ? ?}
> ? ? ? ?long end = System.nanoTime();
> ? ? ? ?System.out.println("Int Time : " + (end - start));
> ? ?}
>
> ? ?enum Parity { EVEN, ODD };
> ? ?public static void doEnums() {
> ? ? ? ?Parity val = Parity.EVEN;
> ? ? ? ?long start = System.nanoTime();
> ? ? ? ?for (long iii = 0; iii < MAX; ++iii) {
> ? ? ? ? ? ?if (Parity.EVEN == val) {
> ? ? ? ? ? ? ? ?val = Parity.ODD;
> ? ? ? ? ? ?} else if (Parity.ODD == val) {
> ? ? ? ? ? ? ? ?val = Parity.EVEN;
> ? ? ? ? ? ?}
> ? ? ? ?}
> ? ? ? ?long end = System.nanoTime();
> ? ? ? ?System.out.println("Enum Time: " + (end - start));
> ? ?}
>
> }
>
>
> On Wed, May 19, 2010 at 3:30 PM, Scott Stanchfield <scott at javadude.com> wrote:
>> Don't pre-optimize for things like this. Profile, then optimize. This
>> won't even show up as an issue.
>>
>> I think whoever wrote that page was daydreaming about any minor way
>> performance might be increased - note that they don't talk at all on
>> that page about the big performance issues (I/O, networking, etc),
>> though I do like that they talk about limiting object creation.
>>
>> With the example they show on that android dev page, you'll never
>> see/feel the difference. And their example on grabbing the ordinal
>> value so you don't need to lookup a static field is really silly. If
>> they just want to avoid looking up the static field everytime through
>> the loop, don't do:
>>
>> ? ? int valX = MyEnum.VAL_X.ordinal();
>> ? ?int valY = MyEnum.VAL_Y.ordinal();
>> ? ?int count = list.size();
>> ? ?MyItem items = list.items();
>> ? ?for (int ?n = 0; n < count; n++) ? {
>> ? ? ? ?int ?valItem = items[n].e.ordinal();
>> ? ? ? ?if (valItem == valX)
>> ? ? ? ? ? ?// do stuff 1
>> ? ? ? ?else if (valItem == valY)
>> ? ? ? ? ? ?// do stuff 2
>> ? ?}
>>
>> instead do
>>
>> ? ?MyEnum valX = MyEnum.VAL_X;
>> ? ?MyEnum valY = MyEnum.VAL_Y;
>> ? ?int count = list.size();
>> ? ?MyItem items = list.items();
>> ? ?for (int ?n = 0; n < count; n++) ? {
>> ? ? ? ?MyEnum valItem = items[n].e;
>> ? ? ? ?if (valItem == valX)
>> ? ? ? ? ? ?// do stuff 1
>> ? ? ? ?else if (valItem == valY)
>> ? ? ? ? ? ?// do stuff 2
>> ? ?}
>>
>> Stuff like that makes me think whoever wrote that really didn't think
>> it through all the way. The pointer comparison is the same expense as
>> the int comparison and avoids n+2 calls to ordinal() in their example
>> code.
>>
>> Moreso, the suggestion to use constants that the compiler will inline
>> is truly evil. Compiler constant inlining can very easily lead to
>> incorrect constant values when a library (that provides a constant)
>> changes (new jar dropped in with a new value for the constant) but the
>> code using that library isn't recompiled. Safety issue.
>>
>> If this becomes an issue (which I doubt it will), someone can always
>> extend the code generator to tweak it.
>> -- Scott
>>
>> ----------------------------------------
>> Scott Stanchfield
>> http://javadude.com
>>
>>
>>
>> On Wed, May 19, 2010 at 3:59 PM, Kirby Bohling <kirby.bohling at gmail.com> wrote:
>>> On Wed, May 19, 2010 at 2:13 PM, Scott Stanchfield <scott at javadude.com> wrote:
>>>> Interesting point re common code generation approaches, but as far as
>>>> performance goes, it's equivalent - all == tests are done using
>>>> pointers, which are the same size as ints. If switch is used the
>>>> ordinal values of the enums are used, and the java compiler may be
>>>> able to better optimize which switch bytecode is used b/c it knows the
>>>> exact possible range of values.
>>>
>>> That's true of most full scale JVMs with good JIT, but for many
>>> embedded VM's that isn't true. ?See the Dalvik VM for Android.
>>>
>>> This link for instance:
>>> http://developer.android.com/guide/practices/design/performance.html#avoid_enums
>>>
>>> I believe it is becoming less true as time goes along, but from what I
>>> know right now it is true.
>>>
>>> If you can't support generating both, I'd agree with Jim Idle support
>>> the one that will go everywhere. ?If however you could treat it like
>>> the C target does with using switch vs. if/else, I'd think that'd be
>>> nifty. ?Doubly so because maintenance burden is free when somebody
>>> else is doing the work. ?As this affects the external API, I would
>>> assume that it's a non-option to generate one or the other.
>>>
>>>
>>>>
>>>> I'd much rather use enums where available, though. I'd think any code
>>>> generator could generate a simple int equivalent where enums don't
>>>> exist, though. The only "gotcha" would be if we had the
>>>> pattern/description properties, which would have to be represented as
>>>> separate arrays in most languages. They aren't necessary though (but
>>>> I'd love to have them)
>>>> -- Scott
>>>>
>>>> ----------------------------------------
>>>> Scott Stanchfield
>>>> http://javadude.com
>>>>
>>>>
>>>>
>>>> On Wed, May 19, 2010 at 3:04 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>>>>> I also have doubts about the performance characteristics and the possibility of starting to rely on the target language to fill in gaps such as token numbering - we could get to the point where code generators cannot be built for more primitive languages because the schema is relying the language to automatically do things.
>>>>>
>>>>> The generated code should be as primitive as possible, with the runtime being as maintainable and clear as possible while not sacrificing performance.
>>>>>
>>>>> Jim
>>>>>
>>>>>> -----Original Message-----
>>>>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>>>>> bounces at antlr.org] On Behalf Of Terence Parr
>>>>>> Sent: Wednesday, May 19, 2010 11:35 AM
>>>>>> To: antlr-interest interest
>>>>>> Subject: Re: [antlr-interest] enums in v4 ANTLR Java code generation
>>>>>> considered useless
>>>>>>
>>>>>>
>>>>>> On May 18, 2010, at 2:58 PM, Scott Stanchfield wrote:
>>>>>>
>>>>>> > There are several advantages to enums:
>>>>>> > * there is a discrete set of values that can be used (no accidental
>>>>>> > 42's passed in when 42 isn't a token type)
>>>>>> > * the enum value can carry extra information
>>>>>> > * the enum values can override methods differently
>>>>>>
>>>>>> These are all excellent advantages. I believe that these mostly apply
>>>>>> when you're writing code, not generating. Just like the compiler
>>>>>> generates integers underneath, if antlr is generating integers, it's
>>>>>> probably okay.
>>>>>>
>>>>>> > OH - one of the things that's clouding this is that you really don't
>>>>>> > need the numeric type identifers anymore. You can just have
>>>>>> >
>>>>>> > ?public enum TokenType {
>>>>>> > ? ?IDENT, INT ...;
>>>>>> > ?}
>>>>>> >
>>>>>> > then in your match method:
>>>>>> >
>>>>>> > ?void match(TokenType type) {
>>>>>> > ? ?if (LA(1).getType() == type) {
>>>>>> > ? ? ? ?...
>>>>>> > ? ?}
>>>>>> > ?}
>>>>>>
>>>>>> The only problem is that match() lives up in the superclass in the
>>>>>> library but the generated parser needs to define the enum.
>>>>>>
>>>>>> I also have the problem that I need to merge token types from multiple
>>>>>> grammars for grammar imports. This gets more competition with enum
>>>>>> types without inheritance.
>>>>>>
>>>>>> >
>>>>>> > And you can use the types in a switch statement:
>>>>>> >
>>>>>> > ?switch(type) {
>>>>>> > ? ?case INT:
>>>>>> > ? ?case IDENT:
>>>>>> > ? ?...
>>>>>> > ?}
>>>>>> >
>>>>>> > No more magic numbers! Woohoo!
>>>>>>
>>>>>> ANTLR already uses the labels when possible such as INT. If you use a
>>>>>> literal in your grammar such as ';' in don't label it in the lexer,
>>>>>> than I had no choice but to generate the integer token type or a weird
>>>>>> label like TOKEN34.
>>>>>>
>>>>>> Ter
>>>>>>
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>>>>> email-address
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>
>>
>

From cristian.tarsoaga at gmail.com  Thu May 20 00:04:09 2010
From: cristian.tarsoaga at gmail.com (=?ISO-8859-2?Q?Cristian_T=E2r=BAoag=E3?=)
Date: Thu, 20 May 2010 10:04:09 +0300
Subject: [antlr-interest] C target - initialization of return/scope
	structures
Message-ID: <AANLkTileH17QMFNAY8sqlDZdx44rE5qg2ZbU_1M9OioI@mail.gmail.com>

Hi Jim, that is not my problem, let me show you an example

I want to have a scoped value which is a structure, and my structure holds
some std::strings

struct MyStruct
{
  std::string s1;
  std::string s2;
};

//this is part of my grammar
myrule
scope {MyStruct s;} //scoped VALUE
@init{}
@after{}
: rulegoeshere....;

As you can see, there is no pointer here, the scoped variable is a 'value'.
The code generated by antlr creates a scoped wrapper structure that holds
MyStruct, something like:

ctx->pMyParser_myruleTop = pMyParser_myrulePush(ctx); // this will create a
wrapper for the scoped value by calling ANTLR3_MALLOC

the wrapper looks like this:

typedef struct  MyParser_myrule_SCOPE_struct
{
    void    (ANTLR3_CDECL *free)    (struct MyParser_myrule_SCOPE_struct *
frame);
    MyStruct s;
}

As you can see my struct is inside this structure. The problem is that to
create the wrapper (see pMyParser_myrulePush above)
antlr calls ANTLR3_MALLOC (which does malloc of course).

THIS MEANS I'M GONNA GET A CRASH!

Why? because std::string is a c++ class, which HAS to be created/destroyed
using new/delete, not malloc/free.

That means, I cannot use a scoped VALUE, I have to use a scoped POINTER
instead, as suggested here:

http://www.mail-archive.com/il-antlr-interest at googlegroups.com/msg02614.html



Suggested Solution 1: local new/delete allocation/deallocation
------------------------------
-----------------------------------------------------------
So my rule will now look like this:

myrule
scope {MyStruct* s;} //scoped POINTER
@init{ $myrule::s = new MyStruct();} //explicit allocation using new
@after{ delete $myrule::s; } //explicit deallocation using delete
: rulegoeshere....;

Looks good? Well, I think not!
Because when the rule fails, the @after action is NOT called, and I'm gonna
get a nice memory leak.

Solution 1': the scoped wrapper has a member called free that can hold a
'deleter', but I couldn't find a way to set that.


Suggested Solution2: override antlr macros ANTLR3_MALLOC and ANTLR3_FREE
------------------------------------------------------------------------------------------------------------------------

Nice try, but ANTLR3_MALLOC is currently defined like this:
#define    ANTLR3_MALLOC(request)                    malloc
((size_t)(request))

As you can see, the 'request' argument is a SIZE, not a type, which means
that if I want to override it to make it use 'new' instead of malloc, I
cannot use it.
>From the given size I cannot deduce the type (this could work the other way
around if you change the define, to pass it the type you could get the size,
and it could be possible to override the default way of antlr's
allocations/deallocations)



That is my problem and those are the options I have. Maybe with some
adjustment some of them will work, but right now, I'm not happy with any of
them: first one leaks, second one is not usable.

Maybe you have some hints for me :-)

Thanks a lot for your answer

   Chris

From Anders.Karlsson at sybase.com  Thu May 20 00:08:46 2010
From: Anders.Karlsson at sybase.com (Anders.Karlsson at sybase.com)
Date: Thu, 20 May 2010 15:08:46 +0800
Subject: [antlr-interest] C target - initialization of
	return/scope	structures
In-Reply-To: <AANLkTileH17QMFNAY8sqlDZdx44rE5qg2ZbU_1M9OioI@mail.gmail.com>
References: <AANLkTileH17QMFNAY8sqlDZdx44rE5qg2ZbU_1M9OioI@mail.gmail.com>
Message-ID: <OF24E5653A.BD3DC63F-ON48257729.0026D5FC-48257729.0027925D@sybase.com>


Hi,


Why don't you just use a smart pointer?


myrule
scope {auto_ptr<MyStruct> s;} //scoped POINTER
@init{ $myrule::s = auto_ptr<MyStruct>(new MyStruct());} //explicit
allocation using new
: rulegoeshere....;

or preferably boost:shared pointer


Thank you and kind regards,
Anders



Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65
6571 3125 | * anders.karlsson at sybase.com
-- It takes a tonne of fact to overcome an ounce of opinion



                                                                           
             Cristian T?r?oag?                                             
             <cristian.tarsoag                                             
             a at gmail.com>                                               To 
             Sent by:                  antlr-interest                      
             <antlr-interest-b         <antlr-interest at antlr.org>          
             ounces at antlr.org>                                          cc 
                                                                           
                                                                   Subject 
             05/20/2010 03:04          [antlr-interest] C target -         
             PM                        initialization of return/scope      
                                       structures                          
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           




Hi Jim, that is not my problem, let me show you an example

I want to have a scoped value which is a structure, and my structure holds
some std::strings

struct MyStruct
{
  std::string s1;
  std::string s2;
};

//this is part of my grammar
myrule
scope {MyStruct s;} //scoped VALUE
@init{}
@after{}
: rulegoeshere....;

As you can see, there is no pointer here, the scoped variable is a 'value'.
The code generated by antlr creates a scoped wrapper structure that holds
MyStruct, something like:

ctx->pMyParser_myruleTop = pMyParser_myrulePush(ctx); // this will create a
wrapper for the scoped value by calling ANTLR3_MALLOC

the wrapper looks like this:

typedef struct  MyParser_myrule_SCOPE_struct
{
    void    (ANTLR3_CDECL *free)    (struct MyParser_myrule_SCOPE_struct *
frame);
    MyStruct s;
}

As you can see my struct is inside this structure. The problem is that to
create the wrapper (see pMyParser_myrulePush above)
antlr calls ANTLR3_MALLOC (which does malloc of course).

THIS MEANS I'M GONNA GET A CRASH!

Why? because std::string is a c++ class, which HAS to be created/destroyed
using new/delete, not malloc/free.

That means, I cannot use a scoped VALUE, I have to use a scoped POINTER
instead, as suggested here:

http://www.mail-archive.com/il-antlr-interest at googlegroups.com/msg02614.html




Suggested Solution 1: local new/delete allocation/deallocation
------------------------------
-----------------------------------------------------------
So my rule will now look like this:

myrule
scope {MyStruct* s;} //scoped POINTER
@init{ $myrule::s = new MyStruct();} //explicit allocation using new
@after{ delete $myrule::s; } //explicit deallocation using delete
: rulegoeshere....;

Looks good? Well, I think not!
Because when the rule fails, the @after action is NOT called, and I'm gonna
get a nice memory leak.

Solution 1': the scoped wrapper has a member called free that can hold a
'deleter', but I couldn't find a way to set that.


Suggested Solution2: override antlr macros ANTLR3_MALLOC and ANTLR3_FREE
------------------------------------------------------------------------------------------------------------------------


Nice try, but ANTLR3_MALLOC is currently defined like this:
#define    ANTLR3_MALLOC(request)                    malloc
((size_t)(request))

As you can see, the 'request' argument is a SIZE, not a type, which means
that if I want to override it to make it use 'new' instead of malloc, I
cannot use it.
>From the given size I cannot deduce the type (this could work the other
way
around if you change the define, to pass it the type you could get the
size,
and it could be possible to override the default way of antlr's
allocations/deallocations)



That is my problem and those are the options I have. Maybe with some
adjustment some of them will work, but right now, I'm not happy with any of
them: first one leaks, second one is not usable.

Maybe you have some hints for me :-)

Thanks a lot for your answer

   Chris

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address




From cristian.tarsoaga at gmail.com  Thu May 20 00:35:42 2010
From: cristian.tarsoaga at gmail.com (=?ISO-8859-2?Q?Cristian_T=E2r=BAoag=E3?=)
Date: Thu, 20 May 2010 10:35:42 +0300
Subject: [antlr-interest] C target - initialization of return/scope
	structures
In-Reply-To: <OF24E5653A.BD3DC63F-ON48257729.0026D5FC-48257729.0027925D@sybase.com>
References: <AANLkTileH17QMFNAY8sqlDZdx44rE5qg2ZbU_1M9OioI@mail.gmail.com> 
	<OF24E5653A.BD3DC63F-ON48257729.0026D5FC-48257729.0027925D@sybase.com>
Message-ID: <AANLkTimWtCSW-U3jcDiha2C4ehFMNrT0xmUzWpNTfW4p@mail.gmail.com>

Hi,

I thought about that too :-)
But it won't work, for the same reasons.

They will be wrapped into a scoped structure.
Note that the generated code does not just put MyStruct/smartptr on the
stack...
it will create some antlr_blah_blah_scoped_mystruct which holds
MyStruct/smartptr inside, and that is done using malloc
Since THAT structure will be malloc-ed, MyStruct OR a smartptr inside it
won't be correctly initialized, so I will just get another crash.

  Chris



2010/5/20 <Anders.Karlsson at sybase.com>

>
> Hi,
>
>
> Why don't you just use a smart pointer?
>
>
> myrule
> scope {auto_ptr<MyStruct> s;} //scoped POINTER
> @init{ $myrule::s = auto_ptr<MyStruct>(new MyStruct());} //explicit
> allocation using new
> : rulegoeshere....;
>
> or preferably boost:shared pointer
>
>
> Thank you and kind regards,
> Anders
>
>
>
> Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65
> 6571 3125 | * anders.karlsson at sybase.com
> -- It takes a tonne of fact to overcome an ounce of opinion
>
>
>
>
>             Cristian T?r?oag?
>             <cristian.tarsoag
>             a at gmail.com>                                               To
>             Sent by:                  antlr-interest
>             <antlr-interest-b         <antlr-interest at antlr.org>
>             ounces at antlr.org>                                          cc
>
>                                                                   Subject
>             05/20/2010 03:04          [antlr-interest] C target -
>             PM                        initialization of return/scope
>                                       structures
>
>
>
>
>
>
>
>
>
>
> Hi Jim, that is not my problem, let me show you an example
>
> I want to have a scoped value which is a structure, and my structure holds
> some std::strings
>
> struct MyStruct
> {
>  std::string s1;
>  std::string s2;
> };
>
> //this is part of my grammar
> myrule
> scope {MyStruct s;} //scoped VALUE
> @init{}
> @after{}
> : rulegoeshere....;
>
> As you can see, there is no pointer here, the scoped variable is a 'value'.
> The code generated by antlr creates a scoped wrapper structure that holds
> MyStruct, something like:
>
> ctx->pMyParser_myruleTop = pMyParser_myrulePush(ctx); // this will create a
> wrapper for the scoped value by calling ANTLR3_MALLOC
>
> the wrapper looks like this:
>
> typedef struct  MyParser_myrule_SCOPE_struct
> {
>    void    (ANTLR3_CDECL *free)    (struct MyParser_myrule_SCOPE_struct *
> frame);
>    MyStruct s;
> }
>
> As you can see my struct is inside this structure. The problem is that to
> create the wrapper (see pMyParser_myrulePush above)
> antlr calls ANTLR3_MALLOC (which does malloc of course).
>
> THIS MEANS I'M GONNA GET A CRASH!
>
> Why? because std::string is a c++ class, which HAS to be created/destroyed
> using new/delete, not malloc/free.
>
> That means, I cannot use a scoped VALUE, I have to use a scoped POINTER
> instead, as suggested here:
>
>
> http://www.mail-archive.com/il-antlr-interest at googlegroups.com/msg02614.html
>
>
>
>
> Suggested Solution 1: local new/delete allocation/deallocation
> ------------------------------
> -----------------------------------------------------------
> So my rule will now look like this:
>
> myrule
> scope {MyStruct* s;} //scoped POINTER
> @init{ $myrule::s = new MyStruct();} //explicit allocation using new
> @after{ delete $myrule::s; } //explicit deallocation using delete
> : rulegoeshere....;
>
> Looks good? Well, I think not!
> Because when the rule fails, the @after action is NOT called, and I'm gonna
> get a nice memory leak.
>
> Solution 1': the scoped wrapper has a member called free that can hold a
> 'deleter', but I couldn't find a way to set that.
>
>
> Suggested Solution2: override antlr macros ANTLR3_MALLOC and ANTLR3_FREE
>
> ------------------------------------------------------------------------------------------------------------------------
>
>
> Nice try, but ANTLR3_MALLOC is currently defined like this:
> #define    ANTLR3_MALLOC(request)                    malloc
> ((size_t)(request))
>
> As you can see, the 'request' argument is a SIZE, not a type, which means
> that if I want to override it to make it use 'new' instead of malloc, I
> cannot use it.
> >From the given size I cannot deduce the type (this could work the other
> way
> around if you change the define, to pass it the type you could get the
> size,
> and it could be possible to override the default way of antlr's
> allocations/deallocations)
>
>
>
> That is my problem and those are the options I have. Maybe with some
> adjustment some of them will work, but right now, I'm not happy with any of
> them: first one leaks, second one is not usable.
>
> Maybe you have some hints for me :-)
>
> Thanks a lot for your answer
>
>   Chris
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From anteusz at freemail.hu  Thu May 20 00:58:49 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Thu, 20 May 2010 09:58:49 +0200
Subject: [antlr-interest] another question about custom lexer
In-Reply-To: <9c6212a214335548854879e738eb2f1a@temporal-wave.com>
References: <9c6212a214335548854879e738eb2f1a@temporal-wave.com>
Message-ID: <4BF4EBB9.5080303@freemail.hu>

5/19/2010 4:48 PM keltez?ssel, Jim Idle ?rta:
> Well, what language are you talking about? What are you trying to achieve? Why do you think you need a custom lexer?
>
> http://perl.plover.com/Questions.html
>
>
> Jim
>
>    
C# is the language I use for ANTLR. I have already a tokenizer written. 
It may be faster than the generated lexer.
The language that is parsed is Perl.. I have a tokenizer for it.
I just want to reuse code. It may be faster to reuse the code and to 
write it again.
Not to mention the fact that some tokens are hard to parse...
E.g
q<some character stored it in B var> .* <the character in B var again>

Marton




From markwright at internode.on.net  Thu May 20 05:13:56 2010
From: markwright at internode.on.net (Mark Wright)
Date: Thu, 20 May 2010 22:13:56 +1000
Subject: [antlr-interest] C target - initialization of return/scope
 structures
In-Reply-To: <AANLkTileH17QMFNAY8sqlDZdx44rE5qg2ZbU_1M9OioI@mail.gmail.com>
References: <AANLkTileH17QMFNAY8sqlDZdx44rE5qg2ZbU_1M9OioI@mail.gmail.com>
Message-ID: <20100520121356.GA5042@internode.on.net>

On Thu, May 20, 2010 at 10:04:09AM +0300, Cristian T?r?oag? wrote:
> Hi Jim, that is not my problem, let me show you an example
> 
> I want to have a scoped value which is a structure, and my structure holds
> some std::strings
> 
> struct MyStruct
> {
>   std::string s1;
>   std::string s2;
> };
> 
> //this is part of my grammar
> myrule
> scope {MyStruct s;} //scoped VALUE
> @init{}
> @after{}
> : rulegoeshere....;
> 
> As you can see, there is no pointer here, the scoped variable is a 'value'.
> The code generated by antlr creates a scoped wrapper structure that holds
> MyStruct, something like:
> 
> ctx->pMyParser_myruleTop = pMyParser_myrulePush(ctx); // this will create a
> wrapper for the scoped value by calling ANTLR3_MALLOC
> 
> the wrapper looks like this:
> 
> typedef struct  MyParser_myrule_SCOPE_struct
> {
>     void    (ANTLR3_CDECL *free)    (struct MyParser_myrule_SCOPE_struct *
> frame);
>     MyStruct s;
> }
> 
> As you can see my struct is inside this structure. The problem is that to
> create the wrapper (see pMyParser_myrulePush above)
> antlr calls ANTLR3_MALLOC (which does malloc of course).
> 
> THIS MEANS I'M GONNA GET A CRASH!
> 
> Why? because std::string is a c++ class, which HAS to be created/destroyed
> using new/delete, not malloc/free.

Hi Cristian,

As Jim advised, you need to initialise it in @init().  As the memory has
already been allocated, the correct way to initialise it is to call the
constructor with placement operator new.

And it is necessary to register your own free method to call the destructor.

grammar MyGrammar;

options {
        language = C;
}

scope GS {
  MyStruct s;
}

@parser::includes {
#include <new>
#include "MyStruct.h"
}

myrule
scope GS;
@init{
  new(&($GS::s))MyStruct;
  ctx->pMyGrammarParser_GSTop->free = &free_MyStruct;
}
        : 'foo'
        | 'bar'
        ;

mystruct.h:
#include <string>
#include <antlr3.h>

struct MyStruct
{
  std::string s1;
  std::string s2;
};

extern "C" {
  void ANTLR3_CDECL free_MyStruct(struct MyGrammarParser_GS_SCOPE_struct *scope);
}

mystruct.cpp:
extern "C" {
void ANTLR3_CDECL free_MyStruct(struct MyGrammarParser_GS_SCOPE_struct *scope)
{
  // Call the destructor
  (&(scope->s))->MyStruct::~MyStruct();
}
}

Regards, Mark
 
> That means, I cannot use a scoped VALUE, I have to use a scoped POINTER
> instead, as suggested here:
> 
> http://www.mail-archive.com/il-antlr-interest at googlegroups.com/msg02614.html
> 
> 
> 
> Suggested Solution 1: local new/delete allocation/deallocation
> ------------------------------
> -----------------------------------------------------------
> So my rule will now look like this:
> 
> myrule
> scope {MyStruct* s;} //scoped POINTER
> @init{ $myrule::s = new MyStruct();} //explicit allocation using new
> @after{ delete $myrule::s; } //explicit deallocation using delete
> : rulegoeshere....;
> 
> Looks good? Well, I think not!
> Because when the rule fails, the @after action is NOT called, and I'm gonna
> get a nice memory leak.
> 
> Solution 1': the scoped wrapper has a member called free that can hold a
> 'deleter', but I couldn't find a way to set that.
> 
> 
> Suggested Solution2: override antlr macros ANTLR3_MALLOC and ANTLR3_FREE
> ------------------------------------------------------------------------------------------------------------------------
> 
> Nice try, but ANTLR3_MALLOC is currently defined like this:
> #define    ANTLR3_MALLOC(request)                    malloc
> ((size_t)(request))
> 
> As you can see, the 'request' argument is a SIZE, not a type, which means
> that if I want to override it to make it use 'new' instead of malloc, I
> cannot use it.
> >From the given size I cannot deduce the type (this could work the other way
> around if you change the define, to pass it the type you could get the size,
> and it could be possible to override the default way of antlr's
> allocations/deallocations)
> 
> 
> 
> That is my problem and those are the options I have. Maybe with some
> adjustment some of them will work, but right now, I'm not happy with any of
> them: first one leaks, second one is not usable.
> 
> Maybe you have some hints for me :-)
> 
> Thanks a lot for your answer
> 
>    Chris
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From cristian.tarsoaga at gmail.com  Thu May 20 05:48:37 2010
From: cristian.tarsoaga at gmail.com (=?ISO-8859-2?Q?Cristian_T=E2r=BAoag=E3?=)
Date: Thu, 20 May 2010 15:48:37 +0300
Subject: [antlr-interest] C target - initialization of return/scope
	structures
In-Reply-To: <20100520121356.GA5042@internode.on.net>
References: <AANLkTileH17QMFNAY8sqlDZdx44rE5qg2ZbU_1M9OioI@mail.gmail.com> 
	<20100520121356.GA5042@internode.on.net>
Message-ID: <AANLkTin0d8bPJC9ya_kSa1KtcCF-jMx5GUB81MaU307H@mail.gmail.com>

Hi Mark,

thanks a lot, I think that is what I was looking for!
once I'll be able to install a custom deleter, my problems are solved!
allocation was not a problem even without using 'placement' new, but
deletion was a problem indeed (only when the rule was failing, leaks could
occur)

Honestly, I never thought to put something like this:
ctx->pMyGrammarParser_GSTop->free = &free_MyStruct;
in the @init action, I thought that maybe there is a general way to install
the deleter, using a macro...I don't know...

But you're right, this WILL delete my pointers properly, THANKS!!   :-)

    Chris





2010/5/20 Mark Wright <markwright at internode.on.net>

> On Thu, May 20, 2010 at 10:04:09AM +0300, Cristian T?r?oag? wrote:
> > Hi Jim, that is not my problem, let me show you an example
> >
> > I want to have a scoped value which is a structure, and my structure
> holds
> > some std::strings
> >
> > struct MyStruct
> > {
> >   std::string s1;
> >   std::string s2;
> > };
> >
> > //this is part of my grammar
> > myrule
> > scope {MyStruct s;} //scoped VALUE
> > @init{}
> > @after{}
> > : rulegoeshere....;
> >
> > As you can see, there is no pointer here, the scoped variable is a
> 'value'.
> > The code generated by antlr creates a scoped wrapper structure that holds
> > MyStruct, something like:
> >
> > ctx->pMyParser_myruleTop = pMyParser_myrulePush(ctx); // this will create
> a
> > wrapper for the scoped value by calling ANTLR3_MALLOC
> >
> > the wrapper looks like this:
> >
> > typedef struct  MyParser_myrule_SCOPE_struct
> > {
> >     void    (ANTLR3_CDECL *free)    (struct MyParser_myrule_SCOPE_struct
> *
> > frame);
> >     MyStruct s;
> > }
> >
> > As you can see my struct is inside this structure. The problem is that to
> > create the wrapper (see pMyParser_myrulePush above)
> > antlr calls ANTLR3_MALLOC (which does malloc of course).
> >
> > THIS MEANS I'M GONNA GET A CRASH!
> >
> > Why? because std::string is a c++ class, which HAS to be
> created/destroyed
> > using new/delete, not malloc/free.
>
> Hi Cristian,
>
> As Jim advised, you need to initialise it in @init().  As the memory has
> already been allocated, the correct way to initialise it is to call the
> constructor with placement operator new.
>
> And it is necessary to register your own free method to call the
> destructor.
>
> grammar MyGrammar;
>
> options {
>        language = C;
> }
>
> scope GS {
>  MyStruct s;
> }
>
> @parser::includes {
> #include <new>
> #include "MyStruct.h"
> }
>
> myrule
> scope GS;
> @init{
>  new(&($GS::s))MyStruct;
>  ctx->pMyGrammarParser_GSTop->free = &free_MyStruct;
> }
>        : 'foo'
>        | 'bar'
>        ;
>
> mystruct.h:
> #include <string>
> #include <antlr3.h>
>
> struct MyStruct
> {
>  std::string s1;
>  std::string s2;
> };
>
> extern "C" {
>  void ANTLR3_CDECL free_MyStruct(struct MyGrammarParser_GS_SCOPE_struct
> *scope);
> }
>
> mystruct.cpp:
> extern "C" {
> void ANTLR3_CDECL free_MyStruct(struct MyGrammarParser_GS_SCOPE_struct
> *scope)
> {
>  // Call the destructor
>  (&(scope->s))->MyStruct::~MyStruct();
> }
> }
>
> Regards, Mark
>
> > That means, I cannot use a scoped VALUE, I have to use a scoped POINTER
> > instead, as suggested here:
> >
> >
> http://www.mail-archive.com/il-antlr-interest at googlegroups.com/msg02614.html
> >
> >
> >
> > Suggested Solution 1: local new/delete allocation/deallocation
> > ------------------------------
> > -----------------------------------------------------------
> > So my rule will now look like this:
> >
> > myrule
> > scope {MyStruct* s;} //scoped POINTER
> > @init{ $myrule::s = new MyStruct();} //explicit allocation using new
> > @after{ delete $myrule::s; } //explicit deallocation using delete
> > : rulegoeshere....;
> >
> > Looks good? Well, I think not!
> > Because when the rule fails, the @after action is NOT called, and I'm
> gonna
> > get a nice memory leak.
> >
> > Solution 1': the scoped wrapper has a member called free that can hold a
> > 'deleter', but I couldn't find a way to set that.
> >
> >
> > Suggested Solution2: override antlr macros ANTLR3_MALLOC and ANTLR3_FREE
> >
> ------------------------------------------------------------------------------------------------------------------------
> >
> > Nice try, but ANTLR3_MALLOC is currently defined like this:
> > #define    ANTLR3_MALLOC(request)                    malloc
> > ((size_t)(request))
> >
> > As you can see, the 'request' argument is a SIZE, not a type, which means
> > that if I want to override it to make it use 'new' instead of malloc, I
> > cannot use it.
> > >From the given size I cannot deduce the type (this could work the other
> way
> > around if you change the define, to pass it the type you could get the
> size,
> > and it could be possible to override the default way of antlr's
> > allocations/deallocations)
> >
> >
> >
> > That is my problem and those are the options I have. Maybe with some
> > adjustment some of them will work, but right now, I'm not happy with any
> of
> > them: first one leaks, second one is not usable.
> >
> > Maybe you have some hints for me :-)
> >
> > Thanks a lot for your answer
> >
> >    Chris
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>

From cristian.tarsoaga at gmail.com  Thu May 20 06:02:52 2010
From: cristian.tarsoaga at gmail.com (=?ISO-8859-2?Q?Cristian_T=E2r=BAoag=E3?=)
Date: Thu, 20 May 2010 16:02:52 +0300
Subject: [antlr-interest] ANTLR3_MALLOC
Message-ID: <AANLkTildDt_WVp-sb2Zjx4ZPv5Q-7Rqi1YSbLBFHofmu@mail.gmail.com>

Hello (again),

I'm back with a suggestion related to the ANTLR3_MALLOC macro.

I am using C++, so I use the C target with antlr.

After finding a workaround for my previous problem (regarding memory
initialization issues), I'm back with a small suggestion.

This is somehow related to my previous posts, and possibly offers a clean
way to override memory allocators/deallocators in antlr.



There are currently 2 macros to do just that, ANTLR3_MALLOC and ANTLR3_FREE

Since I use C++, I thought about replacing malloc with new and replace free
with delete!

But that is not possible because ANTLR3_MALLOC is defined (by default) as
  #define ANTLR3_MALLOC(request)   malloc((size_t)request)

suggestion:

Instead of passing as argument the 'size' of the memory to be allocated, I
think a better macro could take the 'type' as parameter, like

  #define ANTLR3_ALLOC(type) malloc(sizeof(type)) //use C's malloc

This would make it easier to override memory allocation in antlr, e.g by
overriding it with

  #define ANTLR3_ALLOC(type) new type() //use C++'s new

I think this should be easy to change, backward compatible and offer more
flexibility (for guys like me, who need c++, at least for the types with
noarg constructors)

What do you think?


  thanks
     Chris

From jimi at temporal-wave.com  Thu May 20 06:17:25 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 20 May 2010 06:17:25 -0700
Subject: [antlr-interest] C target - initialization of return/scope
	structures
In-Reply-To: <AANLkTin0d8bPJC9ya_kSa1KtcCF-jMx5GUB81MaU307H@mail.gmail.com>
Message-ID: <0c063dcdea80ad449964eab4fe5d4fee@temporal-wave.com>

There is a macro to access the SCOPE_TOP(). 

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Cristian T?r?oag?
> Sent: Thursday, May 20, 2010 5:49 AM
> To: antlr-interest
> Subject: Re: [antlr-interest] C target - initialization of return/scope
> structures
> 
> Hi Mark,
> 
> thanks a lot, I think that is what I was looking for!
> once I'll be able to install a custom deleter, my problems are solved!
> allocation was not a problem even without using 'placement' new, but
> deletion was a problem indeed (only when the rule was failing, leaks
> could
> occur)
> 
> Honestly, I never thought to put something like this:
> ctx->pMyGrammarParser_GSTop->free = &free_MyStruct;
> in the @init action, I thought that maybe there is a general way to
> install
> the deleter, using a macro...I don't know...
> 
> But you're right, this WILL delete my pointers properly, THANKS!!   :-)
> 
>     Chris
> 
> 
> 
> 
> 
> 2010/5/20 Mark Wright <markwright at internode.on.net>
> 
> > On Thu, May 20, 2010 at 10:04:09AM +0300, Cristian T?r?oag? wrote:
> > > Hi Jim, that is not my problem, let me show you an example
> > >
> > > I want to have a scoped value which is a structure, and my
> structure
> > holds
> > > some std::strings
> > >
> > > struct MyStruct
> > > {
> > >   std::string s1;
> > >   std::string s2;
> > > };
> > >
> > > //this is part of my grammar
> > > myrule
> > > scope {MyStruct s;} //scoped VALUE
> > > @init{}
> > > @after{}
> > > : rulegoeshere....;
> > >
> > > As you can see, there is no pointer here, the scoped variable is a
> > 'value'.
> > > The code generated by antlr creates a scoped wrapper structure that
> holds
> > > MyStruct, something like:
> > >
> > > ctx->pMyParser_myruleTop = pMyParser_myrulePush(ctx); // this will
> create
> > a
> > > wrapper for the scoped value by calling ANTLR3_MALLOC
> > >
> > > the wrapper looks like this:
> > >
> > > typedef struct  MyParser_myrule_SCOPE_struct
> > > {
> > >     void    (ANTLR3_CDECL *free)    (struct
> MyParser_myrule_SCOPE_struct
> > *
> > > frame);
> > >     MyStruct s;
> > > }
> > >
> > > As you can see my struct is inside this structure. The problem is
> that to
> > > create the wrapper (see pMyParser_myrulePush above)
> > > antlr calls ANTLR3_MALLOC (which does malloc of course).
> > >
> > > THIS MEANS I'M GONNA GET A CRASH!
> > >
> > > Why? because std::string is a c++ class, which HAS to be
> > created/destroyed
> > > using new/delete, not malloc/free.
> >
> > Hi Cristian,
> >
> > As Jim advised, you need to initialise it in @init().  As the memory
> has
> > already been allocated, the correct way to initialise it is to call
> the
> > constructor with placement operator new.
> >
> > And it is necessary to register your own free method to call the
> > destructor.
> >
> > grammar MyGrammar;
> >
> > options {
> >        language = C;
> > }
> >
> > scope GS {
> >  MyStruct s;
> > }
> >
> > @parser::includes {
> > #include <new>
> > #include "MyStruct.h"
> > }
> >
> > myrule
> > scope GS;
> > @init{
> >  new(&($GS::s))MyStruct;
> >  ctx->pMyGrammarParser_GSTop->free = &free_MyStruct;
> > }
> >        : 'foo'
> >        | 'bar'
> >        ;
> >
> > mystruct.h:
> > #include <string>
> > #include <antlr3.h>
> >
> > struct MyStruct
> > {
> >  std::string s1;
> >  std::string s2;
> > };
> >
> > extern "C" {
> >  void ANTLR3_CDECL free_MyStruct(struct
> MyGrammarParser_GS_SCOPE_struct
> > *scope);
> > }
> >
> > mystruct.cpp:
> > extern "C" {
> > void ANTLR3_CDECL free_MyStruct(struct
> MyGrammarParser_GS_SCOPE_struct
> > *scope)
> > {
> >  // Call the destructor
> >  (&(scope->s))->MyStruct::~MyStruct();
> > }
> > }
> >
> > Regards, Mark
> >
> > > That means, I cannot use a scoped VALUE, I have to use a scoped
> POINTER
> > > instead, as suggested here:
> > >
> > >
> > http://www.mail-archive.com/il-antlr-
> interest at googlegroups.com/msg02614.html
> > >
> > >
> > >
> > > Suggested Solution 1: local new/delete allocation/deallocation
> > > ------------------------------
> > > -----------------------------------------------------------
> > > So my rule will now look like this:
> > >
> > > myrule
> > > scope {MyStruct* s;} //scoped POINTER
> > > @init{ $myrule::s = new MyStruct();} //explicit allocation using
> new
> > > @after{ delete $myrule::s; } //explicit deallocation using delete
> > > : rulegoeshere....;
> > >
> > > Looks good? Well, I think not!
> > > Because when the rule fails, the @after action is NOT called, and
> I'm
> > gonna
> > > get a nice memory leak.
> > >
> > > Solution 1': the scoped wrapper has a member called free that can
> hold a
> > > 'deleter', but I couldn't find a way to set that.
> > >
> > >
> > > Suggested Solution2: override antlr macros ANTLR3_MALLOC and
> ANTLR3_FREE
> > >
> > ---------------------------------------------------------------------
> ---------------------------------------------------
> > >
> > > Nice try, but ANTLR3_MALLOC is currently defined like this:
> > > #define    ANTLR3_MALLOC(request)                    malloc
> > > ((size_t)(request))
> > >
> > > As you can see, the 'request' argument is a SIZE, not a type, which
> means
> > > that if I want to override it to make it use 'new' instead of
> malloc, I
> > > cannot use it.
> > > >From the given size I cannot deduce the type (this could work the
> other
> > way
> > > around if you change the define, to pass it the type you could get
> the
> > size,
> > > and it could be possible to override the default way of antlr's
> > > allocations/deallocations)
> > >
> > >
> > >
> > > That is my problem and those are the options I have. Maybe with
> some
> > > adjustment some of them will work, but right now, I'm not happy
> with any
> > of
> > > them: first one leaks, second one is not usable.
> > >
> > > Maybe you have some hints for me :-)
> > >
> > > Thanks a lot for your answer
> > >
> > >    Chris
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> > >
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From acondit at ipns.com  Thu May 20 08:05:15 2010
From: acondit at ipns.com (Alan Condit)
Date: Thu, 20 May 2010 08:05:15 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
In-Reply-To: <mailman.1.1274295601.21407.antlr-interest@antlr.org>
References: <mailman.1.1274295601.21407.antlr-interest@antlr.org>
Message-ID: <10B590B8-16EF-4A0A-A12D-855D5175AA3B@ipns.com>

I can put two of the productions in separate rules but the first two productions are really one split for simplicity of writing the rewrite rules.

Without the rewrite rules it is this
line	:	line_number? segment* K_NEWLINE
	| 	oword_stmt
	;

With the rewrite rules you can get to this
line	:	line_number? ((segment+)? -> ^(STMT segment+)?) K_NEWLINE
	| 	oword_stmt
		-> ^(STMT oword_stmt)
	;

You can split those two productions into two separate rules but they ultimately have to be combined. Like shown below:
program	:	stmt
	;

stmt	:	line+
	;

line	:	line_number? ((segment+)? -> ^(STMT segment+)?) K_NEWLINE
	| 	oword_stmt
		-> ^(STMT oword_stmt)
	;

So by splitting them you would get something like this:
program	:	stmt
	;

stmt	:	line+
		    ;

line	:	sline
	| 	oline
	;

		// a segment line can have 0 to several segments
		// but segment lines with 0 segments should not be in the AST tree
sline	:	line_number? ((segment+)? -> ^(STMT segment+)?) K_NEWLINE
	;

oline
	| 	oword_stmt
		-> ^(STMT oword_stmt)
	;

The line_number and the K_NEWLINE token are never in the tree. Bottom line is you still have to deal with an empty rewrite rule.

Alan

jim wrote:

I think you will have to put those three productions in separate rules, but I will look into it more.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Wednesday, May 19, 2010 2:06 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] null pointer to ADAPTOR-
>> setTokenBoundaries
> 
> Jim,
> 
> Here is what I have set in options:
> options {
> 	backtrack 	= 	true;
> 	memoize		= 	true;
> 	language	=	C;
> 	output		=	AST;
> 	ASTLabelType	=	pANTLR3_BASE_TREE;
> 	}
> 
> The null is inside 'ctx' inside 'adaptor' at 'setTokenBoundaries'.
> 
> It is inside a function
> /**
> * $ANTLR start line
> *
> /Users/acondit/source/GCCnv/LatheBranch/trunk/Parser/RS274ngc.g:184:1:
> line : ( ( line_number )? ( segment )+ K_NEWLINE -> ^( STMT ( segment
> )+ ) | ( line_number )? K_NEWLINE -> | oword_stmt -> ^( STMT oword_stmt
> ) );
> */
> static RS274ngcParser_line_return
> line(pRS274ngcParser ctx)
> {
> ...
> }
> 
> which I assume, based on the comment, is generated from this rule:
> line	:	line_number? segment+ K_NEWLINE
> 		-> ^(STMT segment+)
> 	|	line_number? K_NEWLINE
> 		->
> 	|	oword_stmt
> 		-> ^(STMT oword_stmt)
> 	;
> 
> The grammar is for parsing an existing language not one of my
> invention, and grammatically the newlines delineate a semantic block
> therefore must be known by the parser, but empty lines are discarded
> and therefore should not be in the tree.
> 
> Alan
> ---
> 
> Alan's MachineWorks
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at alansmachineworks.com
> www.alansmachineworks.com
> 
> Jim wrote--
> Please post more information about your grammar, what the null pointer
> is, etc. It is hard to interpolate, but the common mistake is not
> adding output=AST; to the options, so you do not get a tree adaptor
> created.
> 
> Jim
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-
>> bounces at antlr.org
> ] On Behalf Of Alan Condit
> 
>> Sent: Wednesday, May 19, 2010 11:25 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
>> 
>> Help!!!
>> 
>> I am getting a null pointer to setTokenBoundaries in the following
> line
>> of generated code.
>> "ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start,
>> retval.stop);"
>> 
>> The grammar works under Java.  In moving it back to 'C', I changed
> the
>> language option to 'C', added option ASTLabelType=pANTLR3_BASE_TREE;
>> and added the necessary includes to compile and link under Objective-
> C.
>> 
>> Is there anything obvious that I am doing wrong?
>> 
>> Thanks,
>> Alan
>> 


From acondit at ipns.com  Thu May 20 08:59:47 2010
From: acondit at ipns.com (Alan Condit)
Date: Thu, 20 May 2010 08:59:47 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
Message-ID: <4FADF3A5-81D3-41E3-849A-5EA393CE6813@ipns.com>

Jim,

What I am still seeing is that 
"ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);" 
is resulting in a call to a null pointer. It seems to me that either ADAPTOR->setTokenBoundaries is not being initialized or ADAPTOR->setTokenBoundaries should be tested for null before the call.

Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From cristian.tarsoaga at gmail.com  Thu May 20 09:09:10 2010
From: cristian.tarsoaga at gmail.com (=?ISO-8859-2?Q?Cristian_T=E2r=BAoag=E3?=)
Date: Thu, 20 May 2010 19:09:10 +0300
Subject: [antlr-interest] C target - initialization of return/scope
	structures
In-Reply-To: <0c063dcdea80ad449964eab4fe5d4fee@temporal-wave.com>
References: <AANLkTin0d8bPJC9ya_kSa1KtcCF-jMx5GUB81MaU307H@mail.gmail.com> 
	<0c063dcdea80ad449964eab4fe5d4fee@temporal-wave.com>
Message-ID: <AANLkTinJ86mXJ4_Z2nUypi31kcbtML6e6jZmVaJxnxk3@mail.gmail.com>

Thank you!! :-)

  Chris

On Thu, May 20, 2010 at 4:17 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> There is a macro to access the SCOPE_TOP().
>
> Jim
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Cristian T?r?oag?
> > Sent: Thursday, May 20, 2010 5:49 AM
> > To: antlr-interest
> > Subject: Re: [antlr-interest] C target - initialization of return/scope
> > structures
> >
> > Hi Mark,
> >
> > thanks a lot, I think that is what I was looking for!
> > once I'll be able to install a custom deleter, my problems are solved!
> > allocation was not a problem even without using 'placement' new, but
> > deletion was a problem indeed (only when the rule was failing, leaks
> > could
> > occur)
> >
> > Honestly, I never thought to put something like this:
> > ctx->pMyGrammarParser_GSTop->free = &free_MyStruct;
> > in the @init action, I thought that maybe there is a general way to
> > install
> > the deleter, using a macro...I don't know...
> >
> > But you're right, this WILL delete my pointers properly, THANKS!!   :-)
> >
> >     Chris
> >
> >
> >
> >
> >
> > 2010/5/20 Mark Wright <markwright at internode.on.net>
> >
> > > On Thu, May 20, 2010 at 10:04:09AM +0300, Cristian T?r?oag? wrote:
> > > > Hi Jim, that is not my problem, let me show you an example
> > > >
> > > > I want to have a scoped value which is a structure, and my
> > structure
> > > holds
> > > > some std::strings
> > > >
> > > > struct MyStruct
> > > > {
> > > >   std::string s1;
> > > >   std::string s2;
> > > > };
> > > >
> > > > //this is part of my grammar
> > > > myrule
> > > > scope {MyStruct s;} //scoped VALUE
> > > > @init{}
> > > > @after{}
> > > > : rulegoeshere....;
> > > >
> > > > As you can see, there is no pointer here, the scoped variable is a
> > > 'value'.
> > > > The code generated by antlr creates a scoped wrapper structure that
> > holds
> > > > MyStruct, something like:
> > > >
> > > > ctx->pMyParser_myruleTop = pMyParser_myrulePush(ctx); // this will
> > create
> > > a
> > > > wrapper for the scoped value by calling ANTLR3_MALLOC
> > > >
> > > > the wrapper looks like this:
> > > >
> > > > typedef struct  MyParser_myrule_SCOPE_struct
> > > > {
> > > >     void    (ANTLR3_CDECL *free)    (struct
> > MyParser_myrule_SCOPE_struct
> > > *
> > > > frame);
> > > >     MyStruct s;
> > > > }
> > > >
> > > > As you can see my struct is inside this structure. The problem is
> > that to
> > > > create the wrapper (see pMyParser_myrulePush above)
> > > > antlr calls ANTLR3_MALLOC (which does malloc of course).
> > > >
> > > > THIS MEANS I'M GONNA GET A CRASH!
> > > >
> > > > Why? because std::string is a c++ class, which HAS to be
> > > created/destroyed
> > > > using new/delete, not malloc/free.
> > >
> > > Hi Cristian,
> > >
> > > As Jim advised, you need to initialise it in @init().  As the memory
> > has
> > > already been allocated, the correct way to initialise it is to call
> > the
> > > constructor with placement operator new.
> > >
> > > And it is necessary to register your own free method to call the
> > > destructor.
> > >
> > > grammar MyGrammar;
> > >
> > > options {
> > >        language = C;
> > > }
> > >
> > > scope GS {
> > >  MyStruct s;
> > > }
> > >
> > > @parser::includes {
> > > #include <new>
> > > #include "MyStruct.h"
> > > }
> > >
> > > myrule
> > > scope GS;
> > > @init{
> > >  new(&($GS::s))MyStruct;
> > >  ctx->pMyGrammarParser_GSTop->free = &free_MyStruct;
> > > }
> > >        : 'foo'
> > >        | 'bar'
> > >        ;
> > >
> > > mystruct.h:
> > > #include <string>
> > > #include <antlr3.h>
> > >
> > > struct MyStruct
> > > {
> > >  std::string s1;
> > >  std::string s2;
> > > };
> > >
> > > extern "C" {
> > >  void ANTLR3_CDECL free_MyStruct(struct
> > MyGrammarParser_GS_SCOPE_struct
> > > *scope);
> > > }
> > >
> > > mystruct.cpp:
> > > extern "C" {
> > > void ANTLR3_CDECL free_MyStruct(struct
> > MyGrammarParser_GS_SCOPE_struct
> > > *scope)
> > > {
> > >  // Call the destructor
> > >  (&(scope->s))->MyStruct::~MyStruct();
> > > }
> > > }
> > >
> > > Regards, Mark
> > >
> > > > That means, I cannot use a scoped VALUE, I have to use a scoped
> > POINTER
> > > > instead, as suggested here:
> > > >
> > > >
> > > http://www.mail-archive.com/il-antlr-
> > interest at googlegroups.com/msg02614.html
> > > >
> > > >
> > > >
> > > > Suggested Solution 1: local new/delete allocation/deallocation
> > > > ------------------------------
> > > > -----------------------------------------------------------
> > > > So my rule will now look like this:
> > > >
> > > > myrule
> > > > scope {MyStruct* s;} //scoped POINTER
> > > > @init{ $myrule::s = new MyStruct();} //explicit allocation using
> > new
> > > > @after{ delete $myrule::s; } //explicit deallocation using delete
> > > > : rulegoeshere....;
> > > >
> > > > Looks good? Well, I think not!
> > > > Because when the rule fails, the @after action is NOT called, and
> > I'm
> > > gonna
> > > > get a nice memory leak.
> > > >
> > > > Solution 1': the scoped wrapper has a member called free that can
> > hold a
> > > > 'deleter', but I couldn't find a way to set that.
> > > >
> > > >
> > > > Suggested Solution2: override antlr macros ANTLR3_MALLOC and
> > ANTLR3_FREE
> > > >
> > > ---------------------------------------------------------------------
> > ---------------------------------------------------
> > > >
> > > > Nice try, but ANTLR3_MALLOC is currently defined like this:
> > > > #define    ANTLR3_MALLOC(request)                    malloc
> > > > ((size_t)(request))
> > > >
> > > > As you can see, the 'request' argument is a SIZE, not a type, which
> > means
> > > > that if I want to override it to make it use 'new' instead of
> > malloc, I
> > > > cannot use it.
> > > > >From the given size I cannot deduce the type (this could work the
> > other
> > > way
> > > > around if you change the define, to pass it the type you could get
> > the
> > > size,
> > > > and it could be possible to override the default way of antlr's
> > > > allocations/deallocations)
> > > >
> > > >
> > > >
> > > > That is my problem and those are the options I have. Maybe with
> > some
> > > > adjustment some of them will work, but right now, I'm not happy
> > with any
> > > of
> > > > them: first one leaks, second one is not usable.
> > > >
> > > > Maybe you have some hints for me :-)
> > > >
> > > > Thanks a lot for your answer
> > > >
> > > >    Chris
> > > >
> > > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > > Unsubscribe:
> > > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> > address
> > > >
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Thu May 20 09:40:59 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 20 May 2010 09:40:59 -0700
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <AANLkTik4AQWSrPw7SaEaEsrd0EWSylxSjUyFkOSqiryU@mail.gmail.com>
References: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
	<8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
	<AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com>
	<AANLkTikZbuK-swYuAzY-f0rOIpkFXYhxQVzCmgvXQC1g@mail.gmail.com>
	<AANLkTimbX3XA6J0Fb67CEvFE-0LfxUkzxzETJnjwn5jy@mail.gmail.com>
	<AANLkTimA8FmekWxyT1clZlStR2cscxlQaes39Jfep6x_@mail.gmail.com>
	<AANLkTik4AQWSrPw7SaEaEsrd0EWSylxSjUyFkOSqiryU@mail.gmail.com>
Message-ID: <A1D4993E-9989-45ED-BD31-3CD76B1A08BF@cs.usfca.edu>

hi guys. thanks for all the feedback.  I'm going to try both again and  
see how they look.

The v4 output so far is just so freakin clean. exactly what you'd do  
by hand.  i have an output model than can be optimized etc... before  
going to ST.

Ter

From scott at javadude.com  Thu May 20 09:47:24 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Thu, 20 May 2010 12:47:24 -0400
Subject: [antlr-interest] enums in v4 ANTLR Java code generation
	considered useless
In-Reply-To: <A1D4993E-9989-45ED-BD31-3CD76B1A08BF@cs.usfca.edu>
References: <10853076-528D-4F6B-B22F-766CD8820810@cs.usfca.edu>
	<8721bec599fed34eb50a525a16dccee8@temporal-wave.com>
	<AANLkTimQR2eEg3AHc4-DJiUfcxBzBaMn8Tr4srTvjLMv@mail.gmail.com>
	<AANLkTikZbuK-swYuAzY-f0rOIpkFXYhxQVzCmgvXQC1g@mail.gmail.com>
	<AANLkTimbX3XA6J0Fb67CEvFE-0LfxUkzxzETJnjwn5jy@mail.gmail.com>
	<AANLkTimA8FmekWxyT1clZlStR2cscxlQaes39Jfep6x_@mail.gmail.com>
	<AANLkTik4AQWSrPw7SaEaEsrd0EWSylxSjUyFkOSqiryU@mail.gmail.com>
	<A1D4993E-9989-45ED-BD31-3CD76B1A08BF@cs.usfca.edu>
Message-ID: <AANLkTinfuv8sTQmw2XulAWr5A6ZNTXQbZUWseX5FgGP_@mail.gmail.com>

Sweet! Let us know how it goes. Glad to hear the gen'd code looks shibby,
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Thu, May 20, 2010 at 12:40 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> hi guys. thanks for all the feedback. ?I'm going to try both again and
> see how they look.
>
> The v4 output so far is just so freakin clean. exactly what you'd do
> by hand. ?i have an output model than can be optimized etc... before
> going to ST.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Thu May 20 11:41:31 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 20 May 2010 11:41:31 -0700
Subject: [antlr-interest] null pointer to ADAPTOR->setTokenBoundaries
In-Reply-To: <10B590B8-16EF-4A0A-A12D-855D5175AA3B@ipns.com>
Message-ID: <73b776b998951c4f9e21941708f6c769@temporal-wave.com>

Ah, hang on. Why have you got (segment+)? And you are discarding yoru line number and rewriting in the subrule.

Try this first:

line
   : line_number? segment* K_NEWLINE
	
        ->^(STMT line_number? segment*)

   | oword_stmt

        ->^(STMT oword_stmt)
;

The problem is that your telling me that the cardinality of segment is + but it is in fact *. I am pretty sure that this will work then.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Thursday, May 20, 2010 8:05 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] null pointer to ADAPTOR-
> >setTokenBoundaries
> 
> I can put two of the productions in separate rules but the first two
> productions are really one split for simplicity of writing the rewrite
> rules.
> 
> Without the rewrite rules it is this
> line	:	line_number? segment* K_NEWLINE
> 	| 	oword_stmt
> 	;
> 
> With the rewrite rules you can get to this
> line	:	line_number? ((segment+)? -> ^(STMT segment+)?) K_NEWLINE
> 	| 	oword_stmt
> 		-> ^(STMT oword_stmt)
> 	;
> 
> You can split those two productions into two separate rules but they
> ultimately have to be combined. Like shown below:
> program	:	stmt
> 	;
> 
> stmt	:	line+
> 	;
> 
> line	:	line_number? ((segment+)? -> ^(STMT segment+)?) K_NEWLINE
> 	| 	oword_stmt
> 		-> ^(STMT oword_stmt)
> 	;
> 
> So by splitting them you would get something like this:
> program	:	stmt
> 	;
> 
> stmt	:	line+
> 		    ;
> 
> line	:	sline
> 	| 	oline
> 	;
> 
> 		// a segment line can have 0 to several segments
> 		// but segment lines with 0 segments should not be in the
> AST tree
> sline	:	line_number? ((segment+)? -> ^(STMT segment+)?) K_NEWLINE
> 	;
> 
> oline
> 	| 	oword_stmt
> 		-> ^(STMT oword_stmt)
> 	;
> 
> The line_number and the K_NEWLINE token are never in the tree. Bottom
> line is you still have to deal with an empty rewrite rule.
> 
> Alan
> 
> jim wrote:
> 
> I think you will have to put those three productions in separate rules,
> but I will look into it more.
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Alan Condit
> > Sent: Wednesday, May 19, 2010 2:06 PM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] null pointer to ADAPTOR-
> >> setTokenBoundaries
> >
> > Jim,
> >
> > Here is what I have set in options:
> > options {
> > 	backtrack 	= 	true;
> > 	memoize		= 	true;
> > 	language	=	C;
> > 	output		=	AST;
> > 	ASTLabelType	=	pANTLR3_BASE_TREE;
> > 	}
> >
> > The null is inside 'ctx' inside 'adaptor' at 'setTokenBoundaries'.
> >
> > It is inside a function
> > /**
> > * $ANTLR start line
> > *
> >
> /Users/acondit/source/GCCnv/LatheBranch/trunk/Parser/RS274ngc.g:184:1:
> > line : ( ( line_number )? ( segment )+ K_NEWLINE -> ^( STMT ( segment
> > )+ ) | ( line_number )? K_NEWLINE -> | oword_stmt -> ^( STMT
> oword_stmt
> > ) );
> > */
> > static RS274ngcParser_line_return
> > line(pRS274ngcParser ctx)
> > {
> > ...
> > }
> >
> > which I assume, based on the comment, is generated from this rule:
> > line	:	line_number? segment+ K_NEWLINE
> > 		-> ^(STMT segment+)
> > 	|	line_number? K_NEWLINE
> > 		->
> > 	|	oword_stmt
> > 		-> ^(STMT oword_stmt)
> > 	;
> >
> > The grammar is for parsing an existing language not one of my
> > invention, and grammatically the newlines delineate a semantic block
> > therefore must be known by the parser, but empty lines are discarded
> > and therefore should not be in the tree.
> >
> > Alan
> > ---
> >
> > Alan's MachineWorks
> > 1085 Tierra Ct.
> > Woodburn, OR 97071
> >
> > Email -- acondit at alansmachineworks.com
> > www.alansmachineworks.com
> >
> > Jim wrote--
> > Please post more information about your grammar, what the null
> pointer
> > is, etc. It is hard to interpolate, but the common mistake is not
> > adding output=AST; to the options, so you do not get a tree adaptor
> > created.
> >
> > Jim
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org
> > [mailto:antlr-interest-
> >> bounces at antlr.org
> > ] On Behalf Of Alan Condit
> >
> >> Sent: Wednesday, May 19, 2010 11:25 AM
> >> To: antlr-interest at antlr.org
> >> Subject: [antlr-interest] null pointer to ADAPTOR-
> >setTokenBoundaries
> >>
> >> Help!!!
> >>
> >> I am getting a null pointer to setTokenBoundaries in the following
> > line
> >> of generated code.
> >> "ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start,
> >> retval.stop);"
> >>
> >> The grammar works under Java.  In moving it back to 'C', I changed
> > the
> >> language option to 'C', added option ASTLabelType=pANTLR3_BASE_TREE;
> >> and added the necessary includes to compile and link under
> Objective-
> > C.
> >>
> >> Is there anything obvious that I am doing wrong?
> >>
> >> Thanks,
> >> Alan
> >>
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From sameh.wz at gmail.com  Thu May 20 11:50:24 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Thu, 20 May 2010 20:50:24 +0200
Subject: [antlr-interest]  Java Target - Where to put Jar files?
Message-ID: <AANLkTimV9XAhIc5gJU8YkoeomtQMHxEdIcy3uC6ol8dQ@mail.gmail.com>

Hey folks,

I am using ANTLRWorks 1.3.1
I am importing some packages in the section @lexer::hearder..

The problem is that I do not know where to put the corresponding .jar files
of these packages..
(They are not found when I put them in the same folder as the .g grammar nor
when I put them in the output folder)

Any idea?
Thanks in advance..
-- 
Sameh W. Zaky

From j at junkwallah.org  Thu May 20 12:19:45 2010
From: j at junkwallah.org (Junkman)
Date: Thu, 20 May 2010 12:19:45 -0700
Subject: [antlr-interest] Referencing attributes
In-Reply-To: <4BF4644F.3060502@junkwallah.org>
References: <4BF4644F.3060502@junkwallah.org>
Message-ID: <4BF58B51.1080602@junkwallah.org>

Sorry for dupe, but I'm hoping to get some/any response.

Are attribute reference allowed outside actions and action-like elements
 (e.g., semantic predicates), other than as parameters in rule invocation?

Thanks for any info.

J

Junkman wrote:
> Greetings,
> 
> I'm a Antlr noob, and have a question regarding accessing attributes.
> 
> Where, outside of action, can you reference attributes?  One place seems
> to be as parameter to rule invocation like this:
> 
> decl: type declarator[ $type.text ] ';' ;
>  
> This is from The Definitive Antlr Reference,  page 119.
> 
> Is that true in general?  Are there other locations outside of actions
> where attributes can be accessed?
> 
> As noted, I am a noob to Antlr and just joined this list.  Please let me
> know if this email's question/topic is not appropriate to the list.
> 
> Thanks.
> 
> 
> 


From parrt at cs.usfca.edu  Thu May 20 12:23:07 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 20 May 2010 12:23:07 -0700
Subject: [antlr-interest] Referencing attributes
In-Reply-To: <4BF58B51.1080602@junkwallah.org>
References: <4BF4644F.3060502@junkwallah.org> <4BF58B51.1080602@junkwallah.org>
Message-ID: <66D226BF-AA92-4CC1-890E-040F87D63137@cs.usfca.edu>

anywhere you can do arbitrary code, though not all attr are always visible.
T
On May 20, 2010, at 12:19 PM, Junkman wrote:

> Sorry for dupe, but I'm hoping to get some/any response.
> 
> Are attribute reference allowed outside actions and action-like elements
> (e.g., semantic predicates), other than as parameters in rule invocation?
> 
> Thanks for any info.
> 
> J
> 
> Junkman wrote:
>> Greetings,
>> 
>> I'm a Antlr noob, and have a question regarding accessing attributes.
>> 
>> Where, outside of action, can you reference attributes?  One place seems
>> to be as parameter to rule invocation like this:
>> 
>> decl: type declarator[ $type.text ] ';' ;
>> 
>> This is from The Definitive Antlr Reference,  page 119.
>> 
>> Is that true in general?  Are there other locations outside of actions
>> where attributes can be accessed?
>> 
>> As noted, I am a noob to Antlr and just joined this list.  Please let me
>> know if this email's question/topic is not appropriate to the list.
>> 
>> Thanks.
>> 
>> 
>> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From bryce at greentab.net  Thu May 20 18:52:29 2010
From: bryce at greentab.net (Bryce Carman)
Date: Thu, 20 May 2010 18:52:29 -0700
Subject: [antlr-interest] SEEK with ANTLR C runtime in tree grammar
Message-ID: <AANLkTikvJKpHPbpgXQmuu-Vn1OtG6tWCYmTxnfkaN0lI@mail.gmail.com>

I'm using the ANTLR C runtime and I am trying to figure out if there is a
way to jump to an earlier part of the AST during a tree grammar.  I have the
pANTLR3_BASE_TREE pointer to where I want to jump to, but SEEK seems to

pANTLR3_BASE_TREE tree = *...*
ANTLR3_MARKER mark = MARK();
SEEK(tree->savedIndex);
rule(ctx);
REWIND(mark);

It seems like after calling SEEK, it is actually moving to the parent of the
node that I really want to seek to.  Am I doing the MARK, SEEK, REWIND
correctly for a tree grammar?  Any idea why I actually seem to seek to the
parent node?

From lennyrann at gmail.com  Thu May 20 21:02:00 2010
From: lennyrann at gmail.com (Leonard Rann)
Date: Thu, 20 May 2010 22:02:00 -0600
Subject: [antlr-interest] Looking for consulting / development for parser /
	interpreter
Message-ID: <4BF605B8.6050301@gmail.com>


From Todd.T.Stevenson at ge.com  Fri May 21 08:31:13 2010
From: Todd.T.Stevenson at ge.com (Stevenson, Todd (GE Healthcare))
Date: Fri, 21 May 2010 11:31:13 -0400
Subject: [antlr-interest] Lexer not backtracking properly?
Message-ID: <B4B0A329ACAB3247830EA5930E0C902F074BF5A0@ALPMLVEM16.e2k.ad.ge.com>

I have been working on a lexer grammar that appears to try to process
one rule but, 
when it fails, does not back track and find the correct rule.
 
Consider this grammar:
 
start
   : LBRACE option RBRACE EOF
   ;
 

option
   : DELETE
   | IMPORT
   | ALL
   ;
 
DELETE  : 'delete';
ALL     : 'all';
IMPORT  : 'import';
 
LBRACE    : '{';
 
RBRACE    : '}';
 
GUID    : LBRACE XDIGIT+ RBRACE;
 
HEXNUMBER : XDIGIT+;
 
WS        : ( ' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};
 
fragment
XDIGIT     : '0' .. '9' | 'a' .. 'f' | 'A' .. 'F';
 
------------------------
 
When I use the following input '{all}' it fails because it appears to
try to process the 'GUID'
rule but when it fails, cannot backtrack and process the 'LBRACE' rule.
It works correctly
when I processing the input '{ all}'.  Is this correct behavior?   
 
I know that the GUID rule could probably be a parser rule but I wanted
to not allow embedded 
whitespace so I left it as a lexer rule.
 
 

From cummings at kjchome.homeip.net  Fri May 21 09:59:42 2010
From: cummings at kjchome.homeip.net (Kevin J. Cummings)
Date: Fri, 21 May 2010 12:59:42 -0400
Subject: [antlr-interest] Lexer not backtracking properly?
In-Reply-To: <B4B0A329ACAB3247830EA5930E0C902F074BF5A0@ALPMLVEM16.e2k.ad.ge.com>
References: <B4B0A329ACAB3247830EA5930E0C902F074BF5A0@ALPMLVEM16.e2k.ad.ge.com>
Message-ID: <4BF6BBFE.6080304@kjchome.homeip.net>

On 05/21/2010 11:31 AM, Stevenson, Todd (GE Healthcare) wrote:
> I have been working on a lexer grammar that appears to try to process
> one rule but, 
> when it fails, does not back track and find the correct rule.
>  
> Consider this grammar:
>  
> start
>    : LBRACE option RBRACE EOF
>    ;
>  
> 
> option
>    : DELETE
>    | IMPORT
>    | ALL
>    ;
>  
> DELETE  : 'delete';
> ALL     : 'all';
> IMPORT  : 'import';
>  
> LBRACE    : '{';

How about:

LBRACE	: '{' ( XDIGIT+ RBRACE { $type = GUID; } )?
	;

and delete your GUID production.  You'll probably have to define GUID in
a TOKENS {} section, too.  [I use _ttype instead of $type in ANTLR v2]

> RBRACE    : '}';
>  
> GUID    : LBRACE XDIGIT+ RBRACE;
>  
> HEXNUMBER : XDIGIT+;
>  
> WS        : ( ' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};
>  
> fragment
> XDIGIT     : '0' .. '9' | 'a' .. 'f' | 'A' .. 'F';
>  
> ------------------------
>  
> When I use the following input '{all}' it fails because it appears to
> try to process the 'GUID'
> rule but when it fails, cannot backtrack and process the 'LBRACE' rule.
> It works correctly
> when I processing the input '{ all}'.  Is this correct behavior?   

Yes, because your GUID rule gets done before your LBRACE rule (it tries
to be greedy when it can).  Since whitespace won't match in your GUID,
but the character 'a' does!

> I know that the GUID rule could probably be a parser rule but I wanted
> to not allow embedded 
> whitespace so I left it as a lexer rule.

-- 
Kevin J. Cummings
kjchome at rcn.com
cummings at kjchome.homeip.net
cummings at kjc386.framingham.ma.us
Registered Linux User #1232 (http://counter.li.org)

From bryce at greentab.net  Fri May 21 14:31:07 2010
From: bryce at greentab.net (Bryce Carman)
Date: Fri, 21 May 2010 14:31:07 -0700
Subject: [antlr-interest] SEEK with ANTLR C runtime in tree grammar
In-Reply-To: <AANLkTikvJKpHPbpgXQmuu-Vn1OtG6tWCYmTxnfkaN0lI@mail.gmail.com>
References: <AANLkTikvJKpHPbpgXQmuu-Vn1OtG6tWCYmTxnfkaN0lI@mail.gmail.com>
Message-ID: <AANLkTilkNXXH2e4oQUfWbn1_QSCF2GpwodsF6ZwQeMqD@mail.gmail.com>

Nevermind. I think I figured out my issue.

It looks like tree->savedIndex is not set automatically like I though it
was.  Setting that field to when I originally parse the target node in the
tree is now allowing me to SEEK to the correct location.

On Thu, May 20, 2010 at 6:52 PM, Bryce Carman <bryce at greentab.net> wrote:

> I'm using the ANTLR C runtime and I am trying to figure out if there is a
> way to jump to an earlier part of the AST during a tree grammar.  I have the
> pANTLR3_BASE_TREE pointer to where I want to jump to, but SEEK seems to
>
> pANTLR3_BASE_TREE tree = *...*
> ANTLR3_MARKER mark = MARK();
> SEEK(tree->savedIndex);
> rule(ctx);
> REWIND(mark);
>
> It seems like after calling SEEK, it is actually moving to the parent of
> the node that I really want to seek to.  Am I doing the MARK, SEEK, REWIND
> correctly for a tree grammar?  Any idea why I actually seem to seek to the
> parent node?
>

From parrt at cs.usfca.edu  Fri May 21 15:54:50 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 May 2010 15:54:50 -0700
Subject: [antlr-interest] parser runtime error listeners
In-Reply-To: <1FE9A296676737419A8912A6FD22AE1D02799008A4@alvxmbw04.prod.quest.corp>
References: <186DA6A1-31D0-463E-98D9-80887331AD50@cs.usfca.edu>
	<1FE9A296676737419A8912A6FD22AE1D02799008A4@alvxmbw04.prod.quest.corp>
Message-ID: <7A70E706-86B3-4511-8C21-AF0AA526177C@cs.usfca.edu>


On Apr 21, 2010, at 7:22 AM, Gordon Tyler wrote:

> The parser itself could register a listener, which calls reportError.

ah. excellent point.  i'm now at the error handling phase of v4.

T

From temporaryemail at comcast.net  Fri May 21 19:46:47 2010
From: temporaryemail at comcast.net (Bob)
Date: Fri, 21 May 2010 19:46:47 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35 Speed/Memory
Message-ID: <001e01caf959$05d214e0$11763ea0$@net>

A tiny grammar was implemented in both Antlr and Bison+Flex (shown below).

Test files repeating two lines (shown below) were made in 6 different

sizes.

One executable compiled with command line switch choosing either 

Antlr or Bison+Flex.

One run with empty actions, one run with actions populated, to compare

pure parsing with some actual work.

 

Results:

 
CPU time    Peak Memory

File Name     File Size # modules #tokens  Bison Antlr  Bison Antlr

Action bodies empty:

source.v10m     460mb      10m      150m         28s          572k  *

source.v5m       230mb       5m        75m           15s          572k  *

source.v2.5m    115mb       2.5m     37m           7s           572k  *

source.v1m       46mb         1m        15m            2s           572k  *

source.v500k    23mb        500k      7.5m          1s            572k  *

source.v250k    11mb        250k      3.7m        <1s   4s     572k  1.7g
<-----------

Action bodies populated:

source.v250k    11mb        250k      3.7m         9s   13s    477m  1.7g
<-----------

 

* Antlr ran out of memory at 2gb

 

Comments:

 

1. I expected the requirement that the entire file be resident in memory

   to be the memory glut. Surprise! Quick inspection suggests an initial

   tokenizing of the entire in-memory file consumes gobbs of memory, pushing

   a small footprint up to 1.7gb before releasing it. Only the smallest

   test file was under the runable 32 bit 2gb limit.     Please fix!!

 

2. Speed is clearly slower than bison+flex, however empty actions don't make

   interesting programs. The test with actions enabled shows a 9s vs. 13s

   difference, considerable less than the empty action case.

 

3. If you've never setup bison+flex I have only one comment: !#@%$#. Two

   thumbs up for Antlr.

 

Details:

 

  Vista 64, AMD opteron 2.4Ghz, 16gb ram

  Visual Studio 2008 Sp1

  One exe file with both Antlr and Bison+Flex, targeting 32 bit

  Full Optimization (/Ox), Inline Any suitable (/Ob2), Favor Small Code
(/Os)

  Versions:

    Antlr 3.2

    Bison 2.4.2 LR(1)

    Flex  2.5.35

 

 

------------------- Input file -----------------------------

module tiptop #(int p1=3, p2=4 );

endmodule

... repeat to the indicated number of modules ...

------------------- Antlr Grammar --------------------------

source_text : description ( description )*

    ;

description : module_declaration 

    ;

module_declaration : module_ansi_header ENDMODULE ( ':' module_identifier )?

        { act_module(); }

    ;

module_ansi_header : MODULE_KEYWORD module_identifier ( parameter_port_list
)? ';'

    ;

module_identifier : identifier

    ;

parameter_port_list 

    : '#' '(' parameter_port_declaration ( ',' parameter_port_declaration )*
')'

    | '#' '(' ')'

    ;

parameter_port_declaration returns [void* node]

scope {

    void* type;

    void* head;

    void* tail;

}

    : data_type

        { $parameter_port_declaration::type = $data_type.node;

            $parameter_port_declaration::head=NULL; }
list_of_param_assignments

        { $node = $parameter_port_declaration::head; }

    ;

list_of_param_assignments

    : param_assignment ( ',' param_assignment )*

    ;

param_assignment

    : parameter_identifier '=' constant_param_expression

        { act_param_assignment

            (

                & $parameter_port_declaration::head,

                & $parameter_port_declaration::tail,

                $parameter_identifier.node,

                $parameter_port_declaration::type,

                $constant_param_expression.node

            );

        }

    ;

constant_param_expression returns [void* node]

    : constant_mintypmax_expression

        { $node = $constant_mintypmax_expression.node; }

//    | '$'

    ;

constant_mintypmax_expression returns [void* node]

    : constant_expression

        { $node = $constant_expression.node; }

    ;

// Deviate from LRM

constant_expression returns [void* node]

    : expr { $node = $expr.node; }

    ;

parameter_identifier returns [void* node]

    : identifier { $node = $identifier.node; }

    ;

data_type returns [void* node]

    : integer_atom_type signing

       {$node=act_type($integer_atom_type.value,$signing.value);}

    | integer_atom_type

       {$node=act_type($integer_atom_type.value,-1);}

    ;

 

 

expr returns [void* node] : NUMBER

        { $node = act_number( $NUMBER.text->chars ); }

        ;

 

identifier returns [void* node] : SIMPLE_IDENTIFIER

        { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }

    ;

 

/*------------------------------------------------------------------

 * LEXER RULES

 *------------------------------------------------------------------*/

 

integer_atom_type returns [int value]

    : TokByte       {$value = TokByte;}

    | TokShortint   {$value = TokShortint;}

    | TokInt        {$value = TokInt;}

    | TokLongint    {$value = TokLongint;}

    | TokInteger    {$value = TokInteger;}

    | TokTime       {$value = TokTime;}

    ;

signing returns [int value]

    : TokSigned     {$value= TokSigned;}

    | TokUnsigned   {$value= TokUnsigned;}

    ;

MODULE_KEYWORD  : (( 'module' )|('macromodule') )

    ;

ENDMODULE       : 'endmodule'

    ;

SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (
'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*

    ;

 

NUMBER : (DIGIT)+ 

            ;

 

WHITESPACE  : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+

              {

                 $channel = HIDDEN;

              }

            ;

fragment

DIGIT         : '0'..'9'

            ;

------------------- Bison Grammar --------------------------

%%

source_text : description

    ;

description

                : module_declaration

                | description module_declaration

    ;

module_declaration

                : module_ansi_header TokEndmodule

                { act_module(); }

                | module_ansi_header TokEndmodule ':' module_identifier

                { act_module(); }

    ;

module_ansi_header

                : TokModule module_identifier ';'

                | TokModule module_identifier parameter_port_list ';'

    ;

module_identifier : identifier

                { $$ = $1; }

    ;

parameter_port_list 

    : '#' '(' parameter_port_list_recur ')'

    | '#' '(' ')'

    ;

parameter_port_list_recur

                : parameter_port_declaration

                | parameter_port_list_recur ',' parameter_port_declaration

                ;

parameter_port_declaration

                : parameter_port_declaration_scope

                    data_type { $1.type = $2; $1.head = NULL; }

                      list_of_param_assignments { $$ = $1.head; }

    ;

parameter_port_declaration_scope :

                ;

list_of_param_assignments

    : nil                       nil param_assignment

/* FIX:: need LR(2) here */

    | list_of_param_assignments ',' param_assignment

    ;

param_assignment

    : parameter_identifier '=' constant_param_expression

    { act_param_assignment

      (

       & $<scope1>-3.head,

       & $<scope1>-3.tail,

       $1,

       $<scope1>-3.type,

       $3

       );

    }

    ;

constant_param_expression

                : constant_mintypmax_expression { $$ = $1; }

//    | '$'

    ;

constant_mintypmax_expression

    : constant_expression { $$ = $1; }

    ;

// Deviate from LRM

constant_expression : expr { $$ = $1; }

    ;

parameter_identifier : identifier

    { $$ = $1; }

    ;

data_type

                : integer_atom_type signing { $$ = act_typeB($1,$2); }

                | integer_atom_type         { $$ = act_typeB($1,-1); }

                ;

expr       : TokNumber

                { $$ = act_number( $1 ); }

                ;

 

nil           : /* empty */

    ;

identifier : TokIdentifier

                { $$ = act_identifier( $1 ); }

    ;

integer_atom_type

                : TokByte     { $$ = $1; }

                | TokShortint { $$ = $1; }

                | TokInt      { $$ = $1; }

                | TokLongint  { $$ = $1; }

                | TokInteger  { $$ = $1; }

                | TokTime     { $$ = $1; }

                ;

signing  : TokSigned   { $$ = $1; }

                | TokUnsigned { $$ = $1; }

                ;

%%

---------------------------------------------------------------


From jimi at temporal-wave.com  Fri May 21 22:00:37 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 21 May 2010 22:00:37 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
	Speed/Memory
In-Reply-To: <001e01caf959$05d214e0$11763ea0$@net>
Message-ID: <712fffda786809459c964ea18fe16243@temporal-wave.com>

Well, you're comparing apples to cheese here. Bison/Flex do not create complicated tokens with method calls and so on, so ANTLR is winning here in reality. That said, I am going to implementing some of this stuff with a more fly weight pattern in v4. However, it sounds like you need to implement your own token stream that discards the tokens at certain points. 

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Friday, May 21, 2010 7:47 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> Speed/Memory
> 
> A tiny grammar was implemented in both Antlr and Bison+Flex (shown
> below).
> 
> Test files repeating two lines (shown below) were made in 6 different
> 
> sizes.
> 
> One executable compiled with command line switch choosing either
> 
> Antlr or Bison+Flex.
> 
> One run with empty actions, one run with actions populated, to compare
> 
> pure parsing with some actual work.
> 
> 
> 
> Results:
> 
> 
> CPU time    Peak Memory
> 
> File Name     File Size # modules #tokens  Bison Antlr  Bison Antlr
> 
> Action bodies empty:
> 
> source.v10m     460mb      10m      150m         28s          572k  *
> 
> source.v5m       230mb       5m        75m           15s          572k
> *
> 
> source.v2.5m    115mb       2.5m     37m           7s           572k  *
> 
> source.v1m       46mb         1m        15m            2s
> 572k  *
> 
> source.v500k    23mb        500k      7.5m          1s            572k
> *
> 
> source.v250k    11mb        250k      3.7m        <1s   4s     572k
> 1.7g
> <-----------
> 
> Action bodies populated:
> 
> source.v250k    11mb        250k      3.7m         9s   13s    477m
> 1.7g
> <-----------
> 
> 
> 
> * Antlr ran out of memory at 2gb
> 
> 
> 
> Comments:
> 
> 
> 
> 1. I expected the requirement that the entire file be resident in
> memory
> 
>    to be the memory glut. Surprise! Quick inspection suggests an
> initial
> 
>    tokenizing of the entire in-memory file consumes gobbs of memory,
> pushing
> 
>    a small footprint up to 1.7gb before releasing it. Only the smallest
> 
>    test file was under the runable 32 bit 2gb limit.     Please fix!!
> 
> 
> 
> 2. Speed is clearly slower than bison+flex, however empty actions don't
> make
> 
>    interesting programs. The test with actions enabled shows a 9s vs.
> 13s
> 
>    difference, considerable less than the empty action case.
> 
> 
> 
> 3. If you've never setup bison+flex I have only one comment: !#@%$#.
> Two
> 
>    thumbs up for Antlr.
> 
> 
> 
> Details:
> 
> 
> 
>   Vista 64, AMD opteron 2.4Ghz, 16gb ram
> 
>   Visual Studio 2008 Sp1
> 
>   One exe file with both Antlr and Bison+Flex, targeting 32 bit
> 
>   Full Optimization (/Ox), Inline Any suitable (/Ob2), Favor Small Code
> (/Os)
> 
>   Versions:
> 
>     Antlr 3.2
> 
>     Bison 2.4.2 LR(1)
> 
>     Flex  2.5.35
> 
> 
> 
> 
> 
> ------------------- Input file -----------------------------
> 
> module tiptop #(int p1=3, p2=4 );
> 
> endmodule
> 
> ... repeat to the indicated number of modules ...
> 
> ------------------- Antlr Grammar --------------------------
> 
> source_text : description ( description )*
> 
>     ;
> 
> description : module_declaration
> 
>     ;
> 
> module_declaration : module_ansi_header ENDMODULE ( ':'
> module_identifier )?
> 
>         { act_module(); }
> 
>     ;
> 
> module_ansi_header : MODULE_KEYWORD module_identifier (
> parameter_port_list
> )? ';'
> 
>     ;
> 
> module_identifier : identifier
> 
>     ;
> 
> parameter_port_list
> 
>     : '#' '(' parameter_port_declaration ( ','
> parameter_port_declaration )*
> ')'
> 
>     | '#' '(' ')'
> 
>     ;
> 
> parameter_port_declaration returns [void* node]
> 
> scope {
> 
>     void* type;
> 
>     void* head;
> 
>     void* tail;
> 
> }
> 
>     : data_type
> 
>         { $parameter_port_declaration::type = $data_type.node;
> 
>             $parameter_port_declaration::head=NULL; }
> list_of_param_assignments
> 
>         { $node = $parameter_port_declaration::head; }
> 
>     ;
> 
> list_of_param_assignments
> 
>     : param_assignment ( ',' param_assignment )*
> 
>     ;
> 
> param_assignment
> 
>     : parameter_identifier '=' constant_param_expression
> 
>         { act_param_assignment
> 
>             (
> 
>                 & $parameter_port_declaration::head,
> 
>                 & $parameter_port_declaration::tail,
> 
>                 $parameter_identifier.node,
> 
>                 $parameter_port_declaration::type,
> 
>                 $constant_param_expression.node
> 
>             );
> 
>         }
> 
>     ;
> 
> constant_param_expression returns [void* node]
> 
>     : constant_mintypmax_expression
> 
>         { $node = $constant_mintypmax_expression.node; }
> 
> //    | '$'
> 
>     ;
> 
> constant_mintypmax_expression returns [void* node]
> 
>     : constant_expression
> 
>         { $node = $constant_expression.node; }
> 
>     ;
> 
> // Deviate from LRM
> 
> constant_expression returns [void* node]
> 
>     : expr { $node = $expr.node; }
> 
>     ;
> 
> parameter_identifier returns [void* node]
> 
>     : identifier { $node = $identifier.node; }
> 
>     ;
> 
> data_type returns [void* node]
> 
>     : integer_atom_type signing
> 
>        {$node=act_type($integer_atom_type.value,$signing.value);}
> 
>     | integer_atom_type
> 
>        {$node=act_type($integer_atom_type.value,-1);}
> 
>     ;
> 
> 
> 
> 
> 
> expr returns [void* node] : NUMBER
> 
>         { $node = act_number( $NUMBER.text->chars ); }
> 
>         ;
> 
> 
> 
> identifier returns [void* node] : SIMPLE_IDENTIFIER
> 
>         { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }
> 
>     ;
> 
> 
> 
> /*------------------------------------------------------------------
> 
>  * LEXER RULES
> 
>  *------------------------------------------------------------------*/
> 
> 
> 
> integer_atom_type returns [int value]
> 
>     : TokByte       {$value = TokByte;}
> 
>     | TokShortint   {$value = TokShortint;}
> 
>     | TokInt        {$value = TokInt;}
> 
>     | TokLongint    {$value = TokLongint;}
> 
>     | TokInteger    {$value = TokInteger;}
> 
>     | TokTime       {$value = TokTime;}
> 
>     ;
> 
> signing returns [int value]
> 
>     : TokSigned     {$value= TokSigned;}
> 
>     | TokUnsigned   {$value= TokUnsigned;}
> 
>     ;
> 
> MODULE_KEYWORD  : (( 'module' )|('macromodule') )
> 
>     ;
> 
> ENDMODULE       : 'endmodule'
> 
>     ;
> 
> SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (
> 'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
> 
>     ;
> 
> 
> 
> NUMBER : (DIGIT)+
> 
>             ;
> 
> 
> 
> WHITESPACE  : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+
> 
>               {
> 
>                  $channel = HIDDEN;
> 
>               }
> 
>             ;
> 
> fragment
> 
> DIGIT         : '0'..'9'
> 
>             ;
> 
> ------------------- Bison Grammar --------------------------
> 
> %%
> 
> source_text : description
> 
>     ;
> 
> description
> 
>                 : module_declaration
> 
>                 | description module_declaration
> 
>     ;
> 
> module_declaration
> 
>                 : module_ansi_header TokEndmodule
> 
>                 { act_module(); }
> 
>                 | module_ansi_header TokEndmodule ':' module_identifier
> 
>                 { act_module(); }
> 
>     ;
> 
> module_ansi_header
> 
>                 : TokModule module_identifier ';'
> 
>                 | TokModule module_identifier parameter_port_list ';'
> 
>     ;
> 
> module_identifier : identifier
> 
>                 { $$ = $1; }
> 
>     ;
> 
> parameter_port_list
> 
>     : '#' '(' parameter_port_list_recur ')'
> 
>     | '#' '(' ')'
> 
>     ;
> 
> parameter_port_list_recur
> 
>                 : parameter_port_declaration
> 
>                 | parameter_port_list_recur ','
> parameter_port_declaration
> 
>                 ;
> 
> parameter_port_declaration
> 
>                 : parameter_port_declaration_scope
> 
>                     data_type { $1.type = $2; $1.head = NULL; }
> 
>                       list_of_param_assignments { $$ = $1.head; }
> 
>     ;
> 
> parameter_port_declaration_scope :
> 
>                 ;
> 
> list_of_param_assignments
> 
>     : nil                       nil param_assignment
> 
> /* FIX:: need LR(2) here */
> 
>     | list_of_param_assignments ',' param_assignment
> 
>     ;
> 
> param_assignment
> 
>     : parameter_identifier '=' constant_param_expression
> 
>     { act_param_assignment
> 
>       (
> 
>        & $<scope1>-3.head,
> 
>        & $<scope1>-3.tail,
> 
>        $1,
> 
>        $<scope1>-3.type,
> 
>        $3
> 
>        );
> 
>     }
> 
>     ;
> 
> constant_param_expression
> 
>                 : constant_mintypmax_expression { $$ = $1; }
> 
> //    | '$'
> 
>     ;
> 
> constant_mintypmax_expression
> 
>     : constant_expression { $$ = $1; }
> 
>     ;
> 
> // Deviate from LRM
> 
> constant_expression : expr { $$ = $1; }
> 
>     ;
> 
> parameter_identifier : identifier
> 
>     { $$ = $1; }
> 
>     ;
> 
> data_type
> 
>                 : integer_atom_type signing { $$ = act_typeB($1,$2); }
> 
>                 | integer_atom_type         { $$ = act_typeB($1,-1); }
> 
>                 ;
> 
> expr       : TokNumber
> 
>                 { $$ = act_number( $1 ); }
> 
>                 ;
> 
> 
> 
> nil           : /* empty */
> 
>     ;
> 
> identifier : TokIdentifier
> 
>                 { $$ = act_identifier( $1 ); }
> 
>     ;
> 
> integer_atom_type
> 
>                 : TokByte     { $$ = $1; }
> 
>                 | TokShortint { $$ = $1; }
> 
>                 | TokInt      { $$ = $1; }
> 
>                 | TokLongint  { $$ = $1; }
> 
>                 | TokInteger  { $$ = $1; }
> 
>                 | TokTime     { $$ = $1; }
> 
>                 ;
> 
> signing  : TokSigned   { $$ = $1; }
> 
>                 | TokUnsigned { $$ = $1; }
> 
>                 ;
> 
> %%
> 
> ---------------------------------------------------------------
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From sameh.wz at gmail.com  Sat May 22 04:33:41 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Sat, 22 May 2010 13:33:41 +0200
Subject: [antlr-interest] Java Target - How to Generate the Parser and Lexer
	at Runtime?
Message-ID: <AANLkTinG6FGlzRHhck9h7MYJsQA7Hkvba4nR4at-BDNg@mail.gmail.com>

Greetings,

I am still an ANTLR beginner..

I run a software where I generate the .g grammar file automatically. So I
would love to know how to generate the lexer and parser at runtime given the
.g file?

Thanks!
-- 
Sameh W. Zaky

From bkiers at gmail.com  Sat May 22 04:54:41 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 22 May 2010 13:54:41 +0200
Subject: [antlr-interest] Java Target - How to Generate the Parser and
	Lexer at Runtime?
In-Reply-To: <AANLkTinG6FGlzRHhck9h7MYJsQA7Hkvba4nR4at-BDNg@mail.gmail.com>
References: <AANLkTinG6FGlzRHhck9h7MYJsQA7Hkvba4nR4at-BDNg@mail.gmail.com>
Message-ID: <AANLkTin24-NZ4qOMwPDk4g_7o3ImH5-aixO4TDe681x7@mail.gmail.com>

On Sat, May 22, 2010 at 1:33 PM, Sameh W. Zaky <sameh.wz at gmail.com> wrote:

> Greetings,
>
> I am still an ANTLR beginner..
>
> I run a software where I generate the .g grammar file automatically. So I
> would love to know how to generate the lexer and parser at runtime given
> the
> .g file?
>

When generating lexers/parser on the command line, you'd do something like
this:

java -cp .:antlr-3.2.jar org.antlr.Tool /path/to/your/grammar.g

(the Tool class has a static main method taking a command line parameter!)
So generating them in your own code would look like:

String yourGrammarFile = "/path/to/your/grammar.g";
org.antlr.Tool.main(new String[]{yourGrammarFile});

Kind regards,

Bart.
**

From parrt at cs.usfca.edu  Sat May 22 09:18:58 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 22 May 2010 09:18:58 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
	Speed/Memory
In-Reply-To: <712fffda786809459c964ea18fe16243@temporal-wave.com>
References: <712fffda786809459c964ea18fe16243@temporal-wave.com>
Message-ID: <4A5889C6-3D55-4A15-ABEF-D5EEEF472074@cs.usfca.edu>

Very interesting. The token stream in v3.2 I don't think but first tokens by default, but it still buffers all of the input characters...

Ter
On May 21, 2010, at 10:00 PM, Jim Idle wrote:

> Well, you're comparing apples to cheese here. Bison/Flex do not create complicated tokens with method calls and so on, so ANTLR is winning here in reality. That said, I am going to implementing some of this stuff with a more fly weight pattern in v4. However, it sounds like you need to implement your own token stream that discards the tokens at certain points. 
> 
> Jim


From jimi at temporal-wave.com  Sat May 22 10:34:51 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 22 May 2010 10:34:51 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
	Speed/Memory
In-Reply-To: <4A5889C6-3D55-4A15-ABEF-D5EEEF472074@cs.usfca.edu>
Message-ID: <a89d6a3a4ed96f4fa55b3c94252f30f2@temporal-wave.com>

There needs to be a 3.2.1 to catch up the other targets to the Java Target. We released 3.2 for your book but I had not implemented the extensions you made for 3.2 yet.

There is also the fact that the input stream is implemented by method calls in ANTLR and not direct pointers (but there is a macro you can turn on to do it like bison if you know the encoding in advance), and we are also keeping track of the follow stack for error recovery, which LALR isn't very good at (and there is a macro in the development branch that allows turning off the stack). 

So, the ANTLR C runtime is performing a whole bunch of tasks that bison isn't. The only thing to add is the token stream that can discard after certain checkpoints. However, if you are producing a tree, then you need the tokens in the tree anyway, so such things are really only good for record traversal and so on, which is probably better done with awk anyway.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Saturday, May 22, 2010 9:19 AM
> To: ANTLR interest
> Subject: Re: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> Speed/Memory
> 
> Very interesting. The token stream in v3.2 I don't think but first
> tokens by default, but it still buffers all of the input characters...
> 
> Ter
> On May 21, 2010, at 10:00 PM, Jim Idle wrote:
> 
> > Well, you're comparing apples to cheese here. Bison/Flex do not
> create complicated tokens with method calls and so on, so ANTLR is
> winning here in reality. That said, I am going to implementing some of
> this stuff with a more fly weight pattern in v4. However, it sounds
> like you need to implement your own token stream that discards the
> tokens at certain points.
> >
> > Jim
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Sat May 22 10:36:53 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 22 May 2010 10:36:53 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
	Speed/Memory
In-Reply-To: <001e01caf959$05d214e0$11763ea0$@net>
Message-ID: <26c484109fa3a142adfd34bab3bc2252@temporal-wave.com>

The other thing to add here is that you are using the $xxx.text references, and these do not free up the string memory until you free the parser. With this many inputs, the memory usage you are seeing is probably this first and not the tokens.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Friday, May 21, 2010 7:47 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> Speed/Memory
> 
> A tiny grammar was implemented in both Antlr and Bison+Flex (shown
> below).
> 
> Test files repeating two lines (shown below) were made in 6 different
> 
> sizes.
> 
> One executable compiled with command line switch choosing either
> 
> Antlr or Bison+Flex.
> 
> One run with empty actions, one run with actions populated, to compare
> 
> pure parsing with some actual work.
> 
> 
> 
> Results:
> 
> 
> CPU time    Peak Memory
> 
> File Name     File Size # modules #tokens  Bison Antlr  Bison Antlr
> 
> Action bodies empty:
> 
> source.v10m     460mb      10m      150m         28s          572k  *
> 
> source.v5m       230mb       5m        75m           15s          572k
> *
> 
> source.v2.5m    115mb       2.5m     37m           7s           572k  *
> 
> source.v1m       46mb         1m        15m            2s
> 572k  *
> 
> source.v500k    23mb        500k      7.5m          1s            572k
> *
> 
> source.v250k    11mb        250k      3.7m        <1s   4s     572k
> 1.7g
> <-----------
> 
> Action bodies populated:
> 
> source.v250k    11mb        250k      3.7m         9s   13s    477m
> 1.7g
> <-----------
> 
> 
> 
> * Antlr ran out of memory at 2gb
> 
> 
> 
> Comments:
> 
> 
> 
> 1. I expected the requirement that the entire file be resident in
> memory
> 
>    to be the memory glut. Surprise! Quick inspection suggests an
> initial
> 
>    tokenizing of the entire in-memory file consumes gobbs of memory,
> pushing
> 
>    a small footprint up to 1.7gb before releasing it. Only the smallest
> 
>    test file was under the runable 32 bit 2gb limit.     Please fix!!
> 
> 
> 
> 2. Speed is clearly slower than bison+flex, however empty actions don't
> make
> 
>    interesting programs. The test with actions enabled shows a 9s vs.
> 13s
> 
>    difference, considerable less than the empty action case.
> 
> 
> 
> 3. If you've never setup bison+flex I have only one comment: !#@%$#.
> Two
> 
>    thumbs up for Antlr.
> 
> 
> 
> Details:
> 
> 
> 
>   Vista 64, AMD opteron 2.4Ghz, 16gb ram
> 
>   Visual Studio 2008 Sp1
> 
>   One exe file with both Antlr and Bison+Flex, targeting 32 bit
> 
>   Full Optimization (/Ox), Inline Any suitable (/Ob2), Favor Small Code
> (/Os)
> 
>   Versions:
> 
>     Antlr 3.2
> 
>     Bison 2.4.2 LR(1)
> 
>     Flex  2.5.35
> 
> 
> 
> 
> 
> ------------------- Input file -----------------------------
> 
> module tiptop #(int p1=3, p2=4 );
> 
> endmodule
> 
> ... repeat to the indicated number of modules ...
> 
> ------------------- Antlr Grammar --------------------------
> 
> source_text : description ( description )*
> 
>     ;
> 
> description : module_declaration
> 
>     ;
> 
> module_declaration : module_ansi_header ENDMODULE ( ':'
> module_identifier )?
> 
>         { act_module(); }
> 
>     ;
> 
> module_ansi_header : MODULE_KEYWORD module_identifier (
> parameter_port_list
> )? ';'
> 
>     ;
> 
> module_identifier : identifier
> 
>     ;
> 
> parameter_port_list
> 
>     : '#' '(' parameter_port_declaration ( ','
> parameter_port_declaration )*
> ')'
> 
>     | '#' '(' ')'
> 
>     ;
> 
> parameter_port_declaration returns [void* node]
> 
> scope {
> 
>     void* type;
> 
>     void* head;
> 
>     void* tail;
> 
> }
> 
>     : data_type
> 
>         { $parameter_port_declaration::type = $data_type.node;
> 
>             $parameter_port_declaration::head=NULL; }
> list_of_param_assignments
> 
>         { $node = $parameter_port_declaration::head; }
> 
>     ;
> 
> list_of_param_assignments
> 
>     : param_assignment ( ',' param_assignment )*
> 
>     ;
> 
> param_assignment
> 
>     : parameter_identifier '=' constant_param_expression
> 
>         { act_param_assignment
> 
>             (
> 
>                 & $parameter_port_declaration::head,
> 
>                 & $parameter_port_declaration::tail,
> 
>                 $parameter_identifier.node,
> 
>                 $parameter_port_declaration::type,
> 
>                 $constant_param_expression.node
> 
>             );
> 
>         }
> 
>     ;
> 
> constant_param_expression returns [void* node]
> 
>     : constant_mintypmax_expression
> 
>         { $node = $constant_mintypmax_expression.node; }
> 
> //    | '$'
> 
>     ;
> 
> constant_mintypmax_expression returns [void* node]
> 
>     : constant_expression
> 
>         { $node = $constant_expression.node; }
> 
>     ;
> 
> // Deviate from LRM
> 
> constant_expression returns [void* node]
> 
>     : expr { $node = $expr.node; }
> 
>     ;
> 
> parameter_identifier returns [void* node]
> 
>     : identifier { $node = $identifier.node; }
> 
>     ;
> 
> data_type returns [void* node]
> 
>     : integer_atom_type signing
> 
>        {$node=act_type($integer_atom_type.value,$signing.value);}
> 
>     | integer_atom_type
> 
>        {$node=act_type($integer_atom_type.value,-1);}
> 
>     ;
> 
> 
> 
> 
> 
> expr returns [void* node] : NUMBER
> 
>         { $node = act_number( $NUMBER.text->chars ); }
> 
>         ;
> 
> 
> 
> identifier returns [void* node] : SIMPLE_IDENTIFIER
> 
>         { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }
> 
>     ;
> 
> 
> 
> /*------------------------------------------------------------------
> 
>  * LEXER RULES
> 
>  *------------------------------------------------------------------*/
> 
> 
> 
> integer_atom_type returns [int value]
> 
>     : TokByte       {$value = TokByte;}
> 
>     | TokShortint   {$value = TokShortint;}
> 
>     | TokInt        {$value = TokInt;}
> 
>     | TokLongint    {$value = TokLongint;}
> 
>     | TokInteger    {$value = TokInteger;}
> 
>     | TokTime       {$value = TokTime;}
> 
>     ;
> 
> signing returns [int value]
> 
>     : TokSigned     {$value= TokSigned;}
> 
>     | TokUnsigned   {$value= TokUnsigned;}
> 
>     ;
> 
> MODULE_KEYWORD  : (( 'module' )|('macromodule') )
> 
>     ;
> 
> ENDMODULE       : 'endmodule'
> 
>     ;
> 
> SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (
> 'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
> 
>     ;
> 
> 
> 
> NUMBER : (DIGIT)+
> 
>             ;
> 
> 
> 
> WHITESPACE  : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+
> 
>               {
> 
>                  $channel = HIDDEN;
> 
>               }
> 
>             ;
> 
> fragment
> 
> DIGIT         : '0'..'9'
> 
>             ;
> 
> ------------------- Bison Grammar --------------------------
> 
> %%
> 
> source_text : description
> 
>     ;
> 
> description
> 
>                 : module_declaration
> 
>                 | description module_declaration
> 
>     ;
> 
> module_declaration
> 
>                 : module_ansi_header TokEndmodule
> 
>                 { act_module(); }
> 
>                 | module_ansi_header TokEndmodule ':' module_identifier
> 
>                 { act_module(); }
> 
>     ;
> 
> module_ansi_header
> 
>                 : TokModule module_identifier ';'
> 
>                 | TokModule module_identifier parameter_port_list ';'
> 
>     ;
> 
> module_identifier : identifier
> 
>                 { $$ = $1; }
> 
>     ;
> 
> parameter_port_list
> 
>     : '#' '(' parameter_port_list_recur ')'
> 
>     | '#' '(' ')'
> 
>     ;
> 
> parameter_port_list_recur
> 
>                 : parameter_port_declaration
> 
>                 | parameter_port_list_recur ','
> parameter_port_declaration
> 
>                 ;
> 
> parameter_port_declaration
> 
>                 : parameter_port_declaration_scope
> 
>                     data_type { $1.type = $2; $1.head = NULL; }
> 
>                       list_of_param_assignments { $$ = $1.head; }
> 
>     ;
> 
> parameter_port_declaration_scope :
> 
>                 ;
> 
> list_of_param_assignments
> 
>     : nil                       nil param_assignment
> 
> /* FIX:: need LR(2) here */
> 
>     | list_of_param_assignments ',' param_assignment
> 
>     ;
> 
> param_assignment
> 
>     : parameter_identifier '=' constant_param_expression
> 
>     { act_param_assignment
> 
>       (
> 
>        & $<scope1>-3.head,
> 
>        & $<scope1>-3.tail,
> 
>        $1,
> 
>        $<scope1>-3.type,
> 
>        $3
> 
>        );
> 
>     }
> 
>     ;
> 
> constant_param_expression
> 
>                 : constant_mintypmax_expression { $$ = $1; }
> 
> //    | '$'
> 
>     ;
> 
> constant_mintypmax_expression
> 
>     : constant_expression { $$ = $1; }
> 
>     ;
> 
> // Deviate from LRM
> 
> constant_expression : expr { $$ = $1; }
> 
>     ;
> 
> parameter_identifier : identifier
> 
>     { $$ = $1; }
> 
>     ;
> 
> data_type
> 
>                 : integer_atom_type signing { $$ = act_typeB($1,$2); }
> 
>                 | integer_atom_type         { $$ = act_typeB($1,-1); }
> 
>                 ;
> 
> expr       : TokNumber
> 
>                 { $$ = act_number( $1 ); }
> 
>                 ;
> 
> 
> 
> nil           : /* empty */
> 
>     ;
> 
> identifier : TokIdentifier
> 
>                 { $$ = act_identifier( $1 ); }
> 
>     ;
> 
> integer_atom_type
> 
>                 : TokByte     { $$ = $1; }
> 
>                 | TokShortint { $$ = $1; }
> 
>                 | TokInt      { $$ = $1; }
> 
>                 | TokLongint  { $$ = $1; }
> 
>                 | TokInteger  { $$ = $1; }
> 
>                 | TokTime     { $$ = $1; }
> 
>                 ;
> 
> signing  : TokSigned   { $$ = $1; }
> 
>                 | TokUnsigned { $$ = $1; }
> 
>                 ;
> 
> %%
> 
> ---------------------------------------------------------------
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From temporaryemail at comcast.net  Sat May 22 11:33:13 2010
From: temporaryemail at comcast.net (Bob)
Date: Sat, 22 May 2010 11:33:13 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex
	2.5.35	Speed/Memory
Message-ID: <000301caf9dd$3cbeb420$b63c1c60$@net>

Perhaps you are correct regarding the strings. Looking at the antlr
generated "identifier" rule code, I see 

"SIMPLE_IDENTIFIER12" is not freed.  Is there a mechanism whereby I can free
the string when the rule is complete?

 

After reading the file into memory, the process size is ~11meg (size of
input file), then it rises to 853Meg before the 1st "module" .. "endmodule"
from the input is recognized. As subsequent "module".."endmodule"'s are
recognized memory rises to 1.2+Gb.

 

If you have a solution to free the strings when a rule is complete, I'll try
that and see where it stands. The expansion from 11Meg to over 1.2Gb is
quite a bit for strings!

 

 

Rule:

 

identifier returns [void* node] : SIMPLE_IDENTIFIER

        { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }

    ;

 

Code:

 

static void*

identifier(pNuVParser ctx)

{   

    void* node = NULL;

 

    pANTLR3_COMMON_TOKEN    SIMPLE_IDENTIFIER12;

 

    /* Initialize rule variables

     */

 

 

    SIMPLE_IDENTIFIER12       = NULL;

 

    {

        // NuV.g:102:33: ( SIMPLE_IDENTIFIER )

        // NuV.g:102:35: SIMPLE_IDENTIFIER

        {

            SIMPLE_IDENTIFIER12 = (pANTLR3_COMMON_TOKEN)
MATCHT(SIMPLE_IDENTIFIER, &FOLLOW_SIMPLE_IDENTIFIER_in_identifier608); 

            if  (HASEXCEPTION())

            {

                goto ruleidentifierEx;

            }

 

            {

                 node= act_identifier(
(SIMPLE_IDENTIFIER12->getText(SIMPLE_IDENTIFIER12))->chars ); 

            }

 

        }

 

    }

    

 

    // This is where rules clean up and exit

    //

    goto ruleidentifierEx; /* Prevent compiler warnings */

    ruleidentifierEx: ;

 

            if (HASEXCEPTION())

            {

                PREPORTERROR();

                PRECOVER();

            }

 

 

    return node;

}

 

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Saturday, May 22, 2010 10:37 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
Speed/Memory

 

The other thing to add here is that you are using the $xxx.text references,
and these do not free up the string memory until you free the parser. With
this many inputs, the memory usage you are seeing is probably this first and
not the tokens.

 

Jim

 

> -----Original Message-----

> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-

> bounces at antlr.org] On Behalf Of Bob

> Sent: Friday, May 21, 2010 7:47 PM

> To: antlr-interest at antlr.org

> Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35

> Speed/Memory

> 

> A tiny grammar was implemented in both Antlr and Bison+Flex (shown

> below).

> 

> Test files repeating two lines (shown below) were made in 6 different

> 

> sizes.

> 

> One executable compiled with command line switch choosing either

> 

> Antlr or Bison+Flex.

> 

> One run with empty actions, one run with actions populated, to compare

> 

> pure parsing with some actual work.

> 

> 

> 

> Results:

> 

> 

> CPU time    Peak Memory

> 

> File Name     File Size # modules #tokens  Bison Antlr  Bison Antlr

> 

> Action bodies empty:

> 

> source.v10m     460mb      10m      150m         28s          572k  *

> 

> source.v5m       230mb       5m        75m           15s          572k

> *

> 

> source.v2.5m    115mb       2.5m     37m           7s           572k  *

> 

> source.v1m       46mb         1m        15m            2s

> 572k  *

> 

> source.v500k    23mb        500k      7.5m          1s            572k

> *

> 

> source.v250k    11mb        250k      3.7m        <1s   4s     572k

> 1.7g

> <-----------

> 

> Action bodies populated:

> 

> source.v250k    11mb        250k      3.7m         9s   13s    477m

> 1.7g

> <-----------

> 

> 

> 

> * Antlr ran out of memory at 2gb

> 

> 

> 

> Comments:

> 

> 

> 

> 1. I expected the requirement that the entire file be resident in

> memory

> 

>    to be the memory glut. Surprise! Quick inspection suggests an

> initial

> 

>    tokenizing of the entire in-memory file consumes gobbs of memory,

> pushing

> 

>    a small footprint up to 1.7gb before releasing it. Only the smallest

> 

>    test file was under the runable 32 bit 2gb limit.     Please fix!!

> 

> 

> 

> 2. Speed is clearly slower than bison+flex, however empty actions don't

> make

> 

>    interesting programs. The test with actions enabled shows a 9s vs.

> 13s

> 

>    difference, considerable less than the empty action case.

> 

> 

> 

> 3. If you've never setup bison+flex I have only one comment: !#@%$#.

> Two

> 

>    thumbs up for Antlr.

> 

> 

> 

> Details:

> 

> 

> 

>   Vista 64, AMD opteron 2.4Ghz, 16gb ram

> 

>   Visual Studio 2008 Sp1

> 

>   One exe file with both Antlr and Bison+Flex, targeting 32 bit

> 

>   Full Optimization (/Ox), Inline Any suitable (/Ob2), Favor Small Code

> (/Os)

> 

>   Versions:

> 

>     Antlr 3.2

> 

>     Bison 2.4.2 LR(1)

> 

>     Flex  2.5.35

> 

> 

> 

> 

> 

> ------------------- Input file -----------------------------

> 

> module tiptop #(int p1=3, p2=4 );

> 

> endmodule

> 

> ... repeat to the indicated number of modules ...

> 

> ------------------- Antlr Grammar --------------------------

> 

> source_text : description ( description )*

> 

>     ;

> 

> description : module_declaration

> 

>     ;

> 

> module_declaration : module_ansi_header ENDMODULE ( ':'

> module_identifier )?

> 

>         { act_module(); }

> 

>     ;

> 

> module_ansi_header : MODULE_KEYWORD module_identifier (

> parameter_port_list

> )? ';'

> 

>     ;

> 

> module_identifier : identifier

> 

>     ;

> 

> parameter_port_list

> 

>     : '#' '(' parameter_port_declaration ( ','

> parameter_port_declaration )*

> ')'

> 

>     | '#' '(' ')'

> 

>     ;

> 

> parameter_port_declaration returns [void* node]

> 

> scope {

> 

>     void* type;

> 

>     void* head;

> 

>     void* tail;

> 

> }

> 

>     : data_type

> 

>         { $parameter_port_declaration::type = $data_type.node;

> 

>             $parameter_port_declaration::head=NULL; }

> list_of_param_assignments

> 

>         { $node = $parameter_port_declaration::head; }

> 

>     ;

> 

> list_of_param_assignments

> 

>     : param_assignment ( ',' param_assignment )*

> 

>     ;

> 

> param_assignment

> 

>     : parameter_identifier '=' constant_param_expression

> 

>         { act_param_assignment

> 

>             (

> 

>                 & $parameter_port_declaration::head,

> 

>                 & $parameter_port_declaration::tail,

> 

>                 $parameter_identifier.node,

> 

>                 $parameter_port_declaration::type,

> 

>                 $constant_param_expression.node

> 

>             );

> 

>         }

> 

>     ;

> 

> constant_param_expression returns [void* node]

> 

>     : constant_mintypmax_expression

> 

>         { $node = $constant_mintypmax_expression.node; }

> 

> //    | '$'

> 

>     ;

> 

> constant_mintypmax_expression returns [void* node]

> 

>     : constant_expression

> 

>         { $node = $constant_expression.node; }

> 

>     ;

> 

> // Deviate from LRM

> 

> constant_expression returns [void* node]

> 

>     : expr { $node = $expr.node; }

> 

>     ;

> 

> parameter_identifier returns [void* node]

> 

>     : identifier { $node = $identifier.node; }

> 

>     ;

> 

> data_type returns [void* node]

> 

>     : integer_atom_type signing

> 

>        {$node=act_type($integer_atom_type.value,$signing.value);}

> 

>     | integer_atom_type

> 

>        {$node=act_type($integer_atom_type.value,-1);}

> 

>     ;

> 

> 

> 

> 

> 

> expr returns [void* node] : NUMBER

> 

>         { $node = act_number( $NUMBER.text->chars ); }

> 

>         ;

> 

> 

> 

> identifier returns [void* node] : SIMPLE_IDENTIFIER

> 

>         { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }

> 

>     ;

> 

> 

> 

> /*------------------------------------------------------------------

> 

>  * LEXER RULES

> 

>  *------------------------------------------------------------------*/

> 

> 

> 

> integer_atom_type returns [int value]

> 

>     : TokByte       {$value = TokByte;}

> 

>     | TokShortint   {$value = TokShortint;}

> 

>     | TokInt        {$value = TokInt;}

> 

>     | TokLongint    {$value = TokLongint;}

> 

>     | TokInteger    {$value = TokInteger;}

> 

>     | TokTime       {$value = TokTime;}

> 

>     ;

> 

> signing returns [int value]

> 

>     : TokSigned     {$value= TokSigned;}

> 

>     | TokUnsigned   {$value= TokUnsigned;}

> 

>     ;

> 

> MODULE_KEYWORD  : (( 'module' )|('macromodule') )

> 

>     ;

> 

> ENDMODULE       : 'endmodule'

> 

>     ;

> 

> SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (

> 'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*

> 

>     ;

> 

> 

> 

> NUMBER : (DIGIT)+

> 

>             ;

> 

> 

> 

> WHITESPACE  : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+

> 

>               {

> 

>                  $channel = HIDDEN;

> 

>               }

> 

>             ;

> 

> fragment

> 

> DIGIT         : '0'..'9'

> 

>             ;

> 

> ------------------- Bison Grammar --------------------------

> 

> %%

> 

> source_text : description

> 

>     ;

> 

> description

> 

>                 : module_declaration

> 

>                 | description module_declaration

> 

>     ;

> 

> module_declaration

> 

>                 : module_ansi_header TokEndmodule

> 

>                 { act_module(); }

> 

>                 | module_ansi_header TokEndmodule ':' module_identifier

> 

>                 { act_module(); }

> 

>     ;

> 

> module_ansi_header

> 

>                 : TokModule module_identifier ';'

> 

>                 | TokModule module_identifier parameter_port_list ';'

> 

>     ;

> 

> module_identifier : identifier

> 

>                 { $$ = $1; }

> 

>     ;

> 

> parameter_port_list

> 

>     : '#' '(' parameter_port_list_recur ')'

> 

>     | '#' '(' ')'

> 

>     ;

> 

> parameter_port_list_recur

> 

>                 : parameter_port_declaration

> 

>                 | parameter_port_list_recur ','

> parameter_port_declaration

> 

>                 ;

> 

> parameter_port_declaration

> 

>                 : parameter_port_declaration_scope

> 

>                     data_type { $1.type = $2; $1.head = NULL; }

> 

>                       list_of_param_assignments { $$ = $1.head; }

> 

>     ;

> 

> parameter_port_declaration_scope :

> 

>                 ;

> 

> list_of_param_assignments

> 

>     : nil                       nil param_assignment

> 

> /* FIX:: need LR(2) here */

> 

>     | list_of_param_assignments ',' param_assignment

> 

>     ;

> 

> param_assignment

> 

>     : parameter_identifier '=' constant_param_expression

> 

>     { act_param_assignment

> 

>       (

> 

>        & $<scope1>-3.head,

> 

>        & $<scope1>-3.tail,

> 

>        $1,

> 

>        $<scope1>-3.type,

> 

>        $3

> 

>        );

> 

>     }

> 

>     ;

> 

> constant_param_expression

> 

>                 : constant_mintypmax_expression { $$ = $1; }

> 

> //    | '$'

> 

>     ;

> 

> constant_mintypmax_expression

> 

>     : constant_expression { $$ = $1; }

> 

>     ;

> 

> // Deviate from LRM

> 

> constant_expression : expr { $$ = $1; }

> 

>     ;

> 

> parameter_identifier : identifier

> 

>     { $$ = $1; }

> 

>     ;

> 

> data_type

> 

>                 : integer_atom_type signing { $$ = act_typeB($1,$2); }

> 

>                 | integer_atom_type         { $$ = act_typeB($1,-1); }

> 

>                 ;

> 

> expr       : TokNumber

> 

>                 { $$ = act_number( $1 ); }

> 

>                 ;

> 

> 

> 

> nil           : /* empty */

> 

>     ;

> 

> identifier : TokIdentifier

> 

>                 { $$ = act_identifier( $1 ); }

> 

>     ;

> 

> integer_atom_type

> 

>                 : TokByte     { $$ = $1; }

> 

>                 | TokShortint { $$ = $1; }

> 

>                 | TokInt      { $$ = $1; }

> 

>                 | TokLongint  { $$ = $1; }

> 

>                 | TokInteger  { $$ = $1; }

> 

>                 | TokTime     { $$ = $1; }

> 

>                 ;

> 

> signing  : TokSigned   { $$ = $1; }

> 

>                 | TokUnsigned { $$ = $1; }

> 

>                 ;

> 

> %%

> 

> ---------------------------------------------------------------

> 

> 

> List: http://www.antlr.org/mailman/listinfo/antlr-interest

> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-

> email-address

 

 

 

 

List: http://www.antlr.org/mailman/listinfo/antlr-interest

Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

 


From sameh.wz at gmail.com  Sat May 22 11:34:42 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Sat, 22 May 2010 20:34:42 +0200
Subject: [antlr-interest] Java Target - How to Generate the Parser and
	Lexer at Runtime?
In-Reply-To: <AANLkTin24-NZ4qOMwPDk4g_7o3ImH5-aixO4TDe681x7@mail.gmail.com>
References: <AANLkTinG6FGlzRHhck9h7MYJsQA7Hkvba4nR4at-BDNg@mail.gmail.com>
	<AANLkTin24-NZ4qOMwPDk4g_7o3ImH5-aixO4TDe681x7@mail.gmail.com>
Message-ID: <AANLkTil5W0w7tR1s46kjcXLTvFKH5OKfU82JEWogvwek@mail.gmail.com>

Dear Brat,

You're right..

But now I need to change my question because I found out that Parser.java
generated from this action is different than Parser.java generated when I
click 'Run..' in ANTLRWorks and give it an input text..

So my new question is: How, from the command line, do I run the grammar
(giving it an input text file, let's say)?

On Sat, May 22, 2010 at 1:54 PM, Bart Kiers <bkiers at gmail.com> wrote:

> On Sat, May 22, 2010 at 1:33 PM, Sameh W. Zaky <sameh.wz at gmail.com> wrote:
>
>> Greetings,
>>
>> I am still an ANTLR beginner..
>>
>> I run a software where I generate the .g grammar file automatically. So I
>> would love to know how to generate the lexer and parser at runtime given
>> the
>> .g file?
>>
>
> When generating lexers/parser on the command line, you'd do something like
> this:
>
> java -cp .:antlr-3.2.jar org.antlr.Tool /path/to/your/grammar.g
>
> (the Tool class has a static main method taking a command line parameter!)
> So generating them in your own code would look like:
>
> String yourGrammarFile = "/path/to/your/grammar.g";
> org.antlr.Tool.main(new String[]{yourGrammarFile});
>
> Kind regards,
>
> Bart.
> **
>



-- 
Sameh W. Zaky

From bkiers at gmail.com  Sat May 22 11:41:33 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 22 May 2010 20:41:33 +0200
Subject: [antlr-interest] Java Target - How to Generate the Parser and
	Lexer at Runtime?
In-Reply-To: <AANLkTil5W0w7tR1s46kjcXLTvFKH5OKfU82JEWogvwek@mail.gmail.com>
References: <AANLkTinG6FGlzRHhck9h7MYJsQA7Hkvba4nR4at-BDNg@mail.gmail.com>
	<AANLkTin24-NZ4qOMwPDk4g_7o3ImH5-aixO4TDe681x7@mail.gmail.com>
	<AANLkTil5W0w7tR1s46kjcXLTvFKH5OKfU82JEWogvwek@mail.gmail.com>
Message-ID: <AANLkTinN-vs1tsRMIAGtNCedQtHjJL8xvfxLjh5HO-Tp@mail.gmail.com>

>
> But now I need to change my question because I found out that Parser.java
> generated from this action is different than Parser.java generated when I
> click 'Run..' in ANTLRWorks and give it an input text..
>

Please explain what "different" means. And what do you mean by "input text"?


Kind regards,

Bart.

From sameh.wz at gmail.com  Sat May 22 11:56:18 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Sat, 22 May 2010 20:56:18 +0200
Subject: [antlr-interest] Java Target - How to Generate the Parser and
	Lexer at Runtime?
In-Reply-To: <AANLkTinN-vs1tsRMIAGtNCedQtHjJL8xvfxLjh5HO-Tp@mail.gmail.com>
References: <AANLkTinG6FGlzRHhck9h7MYJsQA7Hkvba4nR4at-BDNg@mail.gmail.com>
	<AANLkTin24-NZ4qOMwPDk4g_7o3ImH5-aixO4TDe681x7@mail.gmail.com>
	<AANLkTil5W0w7tR1s46kjcXLTvFKH5OKfU82JEWogvwek@mail.gmail.com>
	<AANLkTinN-vs1tsRMIAGtNCedQtHjJL8xvfxLjh5HO-Tp@mail.gmail.com>
Message-ID: <AANLkTikRJ6lL1lkaI5SNXmm3aPSEdVdwDsniIGYwayCN@mail.gmail.com>

OK, I will clarify my question (sorry that I was not clear in my previous
mail).

The 2 files are different mainly in the constructors

*When I use the method you told me about in the first message, the output
Parser.java has the constructors:*
*public **RulesGrammarParser(TokenStream input) {*
*            this(input, new RecognizerSharedState());*
*        }*
*public RulesGrammarParser(TokenStream input, RecognizerSharedState state) {
*
*            super(input, state);*
*             *
*        }*


*But when I use click 'Run..' in ANTLRWorks I get the output Parser.java has
the constructors:*

*public RulesGrammarParser(TokenStream input) {*
*            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new
RecognizerSharedState());*
*        }*
*public RulesGrammarParser(TokenStream input, int port,
RecognizerSharedState state) {*
*            super(input, state);*
*            DebugEventSocketProxy proxy =*
*                new DebugEventSocketProxy(this, port, null);*
*            setDebugListener(proxy);*
*            try {*
*                proxy.handshake();*
*            }*
*            catch (IOException ioe) {*
*                reportError(ioe);*
*            }*
*        }*
*public RulesGrammarParser(TokenStream input, DebugEventListener dbg) {*
*        super(input, dbg, new RecognizerSharedState());*

*}*


*In addition to this method:*
*protected boolean evalPredicate(boolean result, String predicate) {*
*        dbg.semanticPredicate(result, predicate);*
*        return result;*
*    }*

*and these declarations:*
*public static final String[] ruleNames = new String[] {*
*        "invalidRule", "in", "evaluation", "gt", "consequence", "lte", *
*        "times", "lte_math", "divided_by", "enumeration_value",
"gte_math", *
*        "range", "check", "variable", "last_connection", "numeric_value", *
*        "term", "gte", "modulus", "plus", "source_name", "connection",
"lt", *
*        "source", "function", "equal", "name_of_quality", "condition",
"primary", *
*        "minus", "value_of_quality", "arithmeticExpression"*
*    };*
*     *
*        public int ruleLevel = 0;*
*        public int getRuleLevel() { return ruleLevel; }*
*        public void incRuleLevel() { ruleLevel++; }*
*        public void decRuleLevel() { ruleLevel--; }*


And by input text, I mean the input.. The text that I write in ANTLRWorks
when I click 'Run..'

Thanks for your time :-)

On Sat, May 22, 2010 at 8:41 PM, Bart Kiers <bkiers at gmail.com> wrote:

> But now I need to change my question because I found out that Parser.java
>> generated from this action is different than Parser.java generated when I
>> click 'Run..' in ANTLRWorks and give it an input text..
>>
>
> Please explain what "different" means. And what do you mean by "input
> text"?
>
> Kind regards,
>
> Bart.
>



-- 
Sameh W. Zaky

From jimi at temporal-wave.com  Sat May 22 12:15:47 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 22 May 2010 12:15:47 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex
	2.5.35	Speed/Memory
In-Reply-To: <000301caf9dd$3cbeb420$b63c1c60$@net>
Message-ID: <61b0d9f845bd62489ed39177993482bf@temporal-wave.com>

The string stuff is just a convenience method for simple stuff. For real programs you should not do that but use the pointer to start and end that is contained in the token. Then you can just memcpy straight from the input source into whatever structure you are using.

Also, if your input is 8 bit then follow the examples and use direct pointers. If you don't need error recovery then in the next release you can turn off the stack overhead, or you can do it yourself by undefining the macrothat does this in the generated code.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Saturday, May 22, 2010 11:33 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> Speed/Memory
> 
> Perhaps you are correct regarding the strings. Looking at the antlr
> generated "identifier" rule code, I see
> 
> "SIMPLE_IDENTIFIER12" is not freed.  Is there a mechanism whereby I can
> free
> the string when the rule is complete?
> 
> 
> 
> After reading the file into memory, the process size is ~11meg (size of
> input file), then it rises to 853Meg before the 1st "module" ..
> "endmodule"
> from the input is recognized. As subsequent "module".."endmodule"'s are
> recognized memory rises to 1.2+Gb.
> 
> 
> 
> If you have a solution to free the strings when a rule is complete,
> I'll try
> that and see where it stands. The expansion from 11Meg to over 1.2Gb is
> quite a bit for strings!
> 
> 
> 
> 
> 
> Rule:
> 
> 
> 
> identifier returns [void* node] : SIMPLE_IDENTIFIER
> 
>         { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }
> 
>     ;
> 
> 
> 
> Code:
> 
> 
> 
> static void*
> 
> identifier(pNuVParser ctx)
> 
> {
> 
>     void* node = NULL;
> 
> 
> 
>     pANTLR3_COMMON_TOKEN    SIMPLE_IDENTIFIER12;
> 
> 
> 
>     /* Initialize rule variables
> 
>      */
> 
> 
> 
> 
> 
>     SIMPLE_IDENTIFIER12       = NULL;
> 
> 
> 
>     {
> 
>         // NuV.g:102:33: ( SIMPLE_IDENTIFIER )
> 
>         // NuV.g:102:35: SIMPLE_IDENTIFIER
> 
>         {
> 
>             SIMPLE_IDENTIFIER12 = (pANTLR3_COMMON_TOKEN)
> MATCHT(SIMPLE_IDENTIFIER, &FOLLOW_SIMPLE_IDENTIFIER_in_identifier608);
> 
>             if  (HASEXCEPTION())
> 
>             {
> 
>                 goto ruleidentifierEx;
> 
>             }
> 
> 
> 
>             {
> 
>                  node= act_identifier(
> (SIMPLE_IDENTIFIER12->getText(SIMPLE_IDENTIFIER12))->chars );
> 
>             }
> 
> 
> 
>         }
> 
> 
> 
>     }
> 
> 
> 
> 
> 
>     // This is where rules clean up and exit
> 
>     //
> 
>     goto ruleidentifierEx; /* Prevent compiler warnings */
> 
>     ruleidentifierEx: ;
> 
> 
> 
>             if (HASEXCEPTION())
> 
>             {
> 
>                 PREPORTERROR();
> 
>                 PRECOVER();
> 
>             }
> 
> 
> 
> 
> 
>     return node;
> 
> }
> 
> 
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Saturday, May 22, 2010 10:37 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> Speed/Memory
> 
> 
> 
> The other thing to add here is that you are using the $xxx.text
> references,
> and these do not free up the string memory until you free the parser.
> With
> this many inputs, the memory usage you are seeing is probably this
> first and
> not the tokens.
> 
> 
> 
> Jim
> 
> 
> 
> > -----Original Message-----
> 
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> 
> > bounces at antlr.org] On Behalf Of Bob
> 
> > Sent: Friday, May 21, 2010 7:47 PM
> 
> > To: antlr-interest at antlr.org
> 
> > Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> 
> > Speed/Memory
> 
> >
> 
> > A tiny grammar was implemented in both Antlr and Bison+Flex (shown
> 
> > below).
> 
> >
> 
> > Test files repeating two lines (shown below) were made in 6 different
> 
> >
> 
> > sizes.
> 
> >
> 
> > One executable compiled with command line switch choosing either
> 
> >
> 
> > Antlr or Bison+Flex.
> 
> >
> 
> > One run with empty actions, one run with actions populated, to
> compare
> 
> >
> 
> > pure parsing with some actual work.
> 
> >
> 
> >
> 
> >
> 
> > Results:
> 
> >
> 
> >
> 
> > CPU time    Peak Memory
> 
> >
> 
> > File Name     File Size # modules #tokens  Bison Antlr  Bison Antlr
> 
> >
> 
> > Action bodies empty:
> 
> >
> 
> > source.v10m     460mb      10m      150m         28s          572k  *
> 
> >
> 
> > source.v5m       230mb       5m        75m           15s
> 572k
> 
> > *
> 
> >
> 
> > source.v2.5m    115mb       2.5m     37m           7s           572k
> *
> 
> >
> 
> > source.v1m       46mb         1m        15m            2s
> 
> > 572k  *
> 
> >
> 
> > source.v500k    23mb        500k      7.5m          1s
> 572k
> 
> > *
> 
> >
> 
> > source.v250k    11mb        250k      3.7m        <1s   4s     572k
> 
> > 1.7g
> 
> > <-----------
> 
> >
> 
> > Action bodies populated:
> 
> >
> 
> > source.v250k    11mb        250k      3.7m         9s   13s    477m
> 
> > 1.7g
> 
> > <-----------
> 
> >
> 
> >
> 
> >
> 
> > * Antlr ran out of memory at 2gb
> 
> >
> 
> >
> 
> >
> 
> > Comments:
> 
> >
> 
> >
> 
> >
> 
> > 1. I expected the requirement that the entire file be resident in
> 
> > memory
> 
> >
> 
> >    to be the memory glut. Surprise! Quick inspection suggests an
> 
> > initial
> 
> >
> 
> >    tokenizing of the entire in-memory file consumes gobbs of memory,
> 
> > pushing
> 
> >
> 
> >    a small footprint up to 1.7gb before releasing it. Only the
> smallest
> 
> >
> 
> >    test file was under the runable 32 bit 2gb limit.     Please fix!!
> 
> >
> 
> >
> 
> >
> 
> > 2. Speed is clearly slower than bison+flex, however empty actions
> don't
> 
> > make
> 
> >
> 
> >    interesting programs. The test with actions enabled shows a 9s vs.
> 
> > 13s
> 
> >
> 
> >    difference, considerable less than the empty action case.
> 
> >
> 
> >
> 
> >
> 
> > 3. If you've never setup bison+flex I have only one comment: !#@%$#.
> 
> > Two
> 
> >
> 
> >    thumbs up for Antlr.
> 
> >
> 
> >
> 
> >
> 
> > Details:
> 
> >
> 
> >
> 
> >
> 
> >   Vista 64, AMD opteron 2.4Ghz, 16gb ram
> 
> >
> 
> >   Visual Studio 2008 Sp1
> 
> >
> 
> >   One exe file with both Antlr and Bison+Flex, targeting 32 bit
> 
> >
> 
> >   Full Optimization (/Ox), Inline Any suitable (/Ob2), Favor Small
> Code
> 
> > (/Os)
> 
> >
> 
> >   Versions:
> 
> >
> 
> >     Antlr 3.2
> 
> >
> 
> >     Bison 2.4.2 LR(1)
> 
> >
> 
> >     Flex  2.5.35
> 
> >
> 
> >
> 
> >
> 
> >
> 
> >
> 
> > ------------------- Input file -----------------------------
> 
> >
> 
> > module tiptop #(int p1=3, p2=4 );
> 
> >
> 
> > endmodule
> 
> >
> 
> > ... repeat to the indicated number of modules ...
> 
> >
> 
> > ------------------- Antlr Grammar --------------------------
> 
> >
> 
> > source_text : description ( description )*
> 
> >
> 
> >     ;
> 
> >
> 
> > description : module_declaration
> 
> >
> 
> >     ;
> 
> >
> 
> > module_declaration : module_ansi_header ENDMODULE ( ':'
> 
> > module_identifier )?
> 
> >
> 
> >         { act_module(); }
> 
> >
> 
> >     ;
> 
> >
> 
> > module_ansi_header : MODULE_KEYWORD module_identifier (
> 
> > parameter_port_list
> 
> > )? ';'
> 
> >
> 
> >     ;
> 
> >
> 
> > module_identifier : identifier
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_list
> 
> >
> 
> >     : '#' '(' parameter_port_declaration ( ','
> 
> > parameter_port_declaration )*
> 
> > ')'
> 
> >
> 
> >     | '#' '(' ')'
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_declaration returns [void* node]
> 
> >
> 
> > scope {
> 
> >
> 
> >     void* type;
> 
> >
> 
> >     void* head;
> 
> >
> 
> >     void* tail;
> 
> >
> 
> > }
> 
> >
> 
> >     : data_type
> 
> >
> 
> >         { $parameter_port_declaration::type = $data_type.node;
> 
> >
> 
> >             $parameter_port_declaration::head=NULL; }
> 
> > list_of_param_assignments
> 
> >
> 
> >         { $node = $parameter_port_declaration::head; }
> 
> >
> 
> >     ;
> 
> >
> 
> > list_of_param_assignments
> 
> >
> 
> >     : param_assignment ( ',' param_assignment )*
> 
> >
> 
> >     ;
> 
> >
> 
> > param_assignment
> 
> >
> 
> >     : parameter_identifier '=' constant_param_expression
> 
> >
> 
> >         { act_param_assignment
> 
> >
> 
> >             (
> 
> >
> 
> >                 & $parameter_port_declaration::head,
> 
> >
> 
> >                 & $parameter_port_declaration::tail,
> 
> >
> 
> >                 $parameter_identifier.node,
> 
> >
> 
> >                 $parameter_port_declaration::type,
> 
> >
> 
> >                 $constant_param_expression.node
> 
> >
> 
> >             );
> 
> >
> 
> >         }
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_param_expression returns [void* node]
> 
> >
> 
> >     : constant_mintypmax_expression
> 
> >
> 
> >         { $node = $constant_mintypmax_expression.node; }
> 
> >
> 
> > //    | '$'
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_mintypmax_expression returns [void* node]
> 
> >
> 
> >     : constant_expression
> 
> >
> 
> >         { $node = $constant_expression.node; }
> 
> >
> 
> >     ;
> 
> >
> 
> > // Deviate from LRM
> 
> >
> 
> > constant_expression returns [void* node]
> 
> >
> 
> >     : expr { $node = $expr.node; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_identifier returns [void* node]
> 
> >
> 
> >     : identifier { $node = $identifier.node; }
> 
> >
> 
> >     ;
> 
> >
> 
> > data_type returns [void* node]
> 
> >
> 
> >     : integer_atom_type signing
> 
> >
> 
> >        {$node=act_type($integer_atom_type.value,$signing.value);}
> 
> >
> 
> >     | integer_atom_type
> 
> >
> 
> >        {$node=act_type($integer_atom_type.value,-1);}
> 
> >
> 
> >     ;
> 
> >
> 
> >
> 
> >
> 
> >
> 
> >
> 
> > expr returns [void* node] : NUMBER
> 
> >
> 
> >         { $node = act_number( $NUMBER.text->chars ); }
> 
> >
> 
> >         ;
> 
> >
> 
> >
> 
> >
> 
> > identifier returns [void* node] : SIMPLE_IDENTIFIER
> 
> >
> 
> >         { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }
> 
> >
> 
> >     ;
> 
> >
> 
> >
> 
> >
> 
> > /*------------------------------------------------------------------
> 
> >
> 
> >  * LEXER RULES
> 
> >
> 
> >  *------------------------------------------------------------------
> */
> 
> >
> 
> >
> 
> >
> 
> > integer_atom_type returns [int value]
> 
> >
> 
> >     : TokByte       {$value = TokByte;}
> 
> >
> 
> >     | TokShortint   {$value = TokShortint;}
> 
> >
> 
> >     | TokInt        {$value = TokInt;}
> 
> >
> 
> >     | TokLongint    {$value = TokLongint;}
> 
> >
> 
> >     | TokInteger    {$value = TokInteger;}
> 
> >
> 
> >     | TokTime       {$value = TokTime;}
> 
> >
> 
> >     ;
> 
> >
> 
> > signing returns [int value]
> 
> >
> 
> >     : TokSigned     {$value= TokSigned;}
> 
> >
> 
> >     | TokUnsigned   {$value= TokUnsigned;}
> 
> >
> 
> >     ;
> 
> >
> 
> > MODULE_KEYWORD  : (( 'module' )|('macromodule') )
> 
> >
> 
> >     ;
> 
> >
> 
> > ENDMODULE       : 'endmodule'
> 
> >
> 
> >     ;
> 
> >
> 
> > SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (
> 
> > 'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
> 
> >
> 
> >     ;
> 
> >
> 
> >
> 
> >
> 
> > NUMBER : (DIGIT)+
> 
> >
> 
> >             ;
> 
> >
> 
> >
> 
> >
> 
> > WHITESPACE  : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+
> 
> >
> 
> >               {
> 
> >
> 
> >                  $channel = HIDDEN;
> 
> >
> 
> >               }
> 
> >
> 
> >             ;
> 
> >
> 
> > fragment
> 
> >
> 
> > DIGIT         : '0'..'9'
> 
> >
> 
> >             ;
> 
> >
> 
> > ------------------- Bison Grammar --------------------------
> 
> >
> 
> > %%
> 
> >
> 
> > source_text : description
> 
> >
> 
> >     ;
> 
> >
> 
> > description
> 
> >
> 
> >                 : module_declaration
> 
> >
> 
> >                 | description module_declaration
> 
> >
> 
> >     ;
> 
> >
> 
> > module_declaration
> 
> >
> 
> >                 : module_ansi_header TokEndmodule
> 
> >
> 
> >                 { act_module(); }
> 
> >
> 
> >                 | module_ansi_header TokEndmodule ':'
> module_identifier
> 
> >
> 
> >                 { act_module(); }
> 
> >
> 
> >     ;
> 
> >
> 
> > module_ansi_header
> 
> >
> 
> >                 : TokModule module_identifier ';'
> 
> >
> 
> >                 | TokModule module_identifier parameter_port_list ';'
> 
> >
> 
> >     ;
> 
> >
> 
> > module_identifier : identifier
> 
> >
> 
> >                 { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_list
> 
> >
> 
> >     : '#' '(' parameter_port_list_recur ')'
> 
> >
> 
> >     | '#' '(' ')'
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_list_recur
> 
> >
> 
> >                 : parameter_port_declaration
> 
> >
> 
> >                 | parameter_port_list_recur ','
> 
> > parameter_port_declaration
> 
> >
> 
> >                 ;
> 
> >
> 
> > parameter_port_declaration
> 
> >
> 
> >                 : parameter_port_declaration_scope
> 
> >
> 
> >                     data_type { $1.type = $2; $1.head = NULL; }
> 
> >
> 
> >                       list_of_param_assignments { $$ = $1.head; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_declaration_scope :
> 
> >
> 
> >                 ;
> 
> >
> 
> > list_of_param_assignments
> 
> >
> 
> >     : nil                       nil param_assignment
> 
> >
> 
> > /* FIX:: need LR(2) here */
> 
> >
> 
> >     | list_of_param_assignments ',' param_assignment
> 
> >
> 
> >     ;
> 
> >
> 
> > param_assignment
> 
> >
> 
> >     : parameter_identifier '=' constant_param_expression
> 
> >
> 
> >     { act_param_assignment
> 
> >
> 
> >       (
> 
> >
> 
> >        & $<scope1>-3.head,
> 
> >
> 
> >        & $<scope1>-3.tail,
> 
> >
> 
> >        $1,
> 
> >
> 
> >        $<scope1>-3.type,
> 
> >
> 
> >        $3
> 
> >
> 
> >        );
> 
> >
> 
> >     }
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_param_expression
> 
> >
> 
> >                 : constant_mintypmax_expression { $$ = $1; }
> 
> >
> 
> > //    | '$'
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_mintypmax_expression
> 
> >
> 
> >     : constant_expression { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > // Deviate from LRM
> 
> >
> 
> > constant_expression : expr { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_identifier : identifier
> 
> >
> 
> >     { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > data_type
> 
> >
> 
> >                 : integer_atom_type signing { $$ = act_typeB($1,$2);
> }
> 
> >
> 
> >                 | integer_atom_type         { $$ = act_typeB($1,-1);
> }
> 
> >
> 
> >                 ;
> 
> >
> 
> > expr       : TokNumber
> 
> >
> 
> >                 { $$ = act_number( $1 ); }
> 
> >
> 
> >                 ;
> 
> >
> 
> >
> 
> >
> 
> > nil           : /* empty */
> 
> >
> 
> >     ;
> 
> >
> 
> > identifier : TokIdentifier
> 
> >
> 
> >                 { $$ = act_identifier( $1 ); }
> 
> >
> 
> >     ;
> 
> >
> 
> > integer_atom_type
> 
> >
> 
> >                 : TokByte     { $$ = $1; }
> 
> >
> 
> >                 | TokShortint { $$ = $1; }
> 
> >
> 
> >                 | TokInt      { $$ = $1; }
> 
> >
> 
> >                 | TokLongint  { $$ = $1; }
> 
> >
> 
> >                 | TokInteger  { $$ = $1; }
> 
> >
> 
> >                 | TokTime     { $$ = $1; }
> 
> >
> 
> >                 ;
> 
> >
> 
> > signing  : TokSigned   { $$ = $1; }
> 
> >
> 
> >                 | TokUnsigned { $$ = $1; }
> 
> >
> 
> >                 ;
> 
> >
> 
> > %%
> 
> >
> 
> > ---------------------------------------------------------------
> 
> >
> 
> >
> 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> 
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> 
> > email-address
> 
> 
> 
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> 
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Sat May 22 12:17:43 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 22 May 2010 12:17:43 -0700
Subject: [antlr-interest] Java Target - How to Generate the Parser and
	Lexer at Runtime?
In-Reply-To: <AANLkTikRJ6lL1lkaI5SNXmm3aPSEdVdwDsniIGYwayCN@mail.gmail.com>
Message-ID: <20e749e3be2f6848908ed1ad81db9d51@temporal-wave.com>

You need to read the wiki articles and follow the examples.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sameh W. Zaky
> Sent: Saturday, May 22, 2010 11:56 AM
> To: Bart Kiers
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Java Target - How to Generate the Parser
> and Lexer at Runtime?
> 
> OK, I will clarify my question (sorry that I was not clear in my
> previous
> mail).
> 
> The 2 files are different mainly in the constructors
> 
> *When I use the method you told me about in the first message, the
> output
> Parser.java has the constructors:*
> *public **RulesGrammarParser(TokenStream input) {*
> *            this(input, new RecognizerSharedState());*
> *        }*
> *public RulesGrammarParser(TokenStream input, RecognizerSharedState
> state) {
> *
> *            super(input, state);*
> *             *
> *        }*
> 
> 
> *But when I use click 'Run..' in ANTLRWorks I get the output
> Parser.java has
> the constructors:*
> 
> *public RulesGrammarParser(TokenStream input) {*
> *            this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT,
> new
> RecognizerSharedState());*
> *        }*
> *public RulesGrammarParser(TokenStream input, int port,
> RecognizerSharedState state) {*
> *            super(input, state);*
> *            DebugEventSocketProxy proxy =*
> *                new DebugEventSocketProxy(this, port, null);*
> *            setDebugListener(proxy);*
> *            try {*
> *                proxy.handshake();*
> *            }*
> *            catch (IOException ioe) {*
> *                reportError(ioe);*
> *            }*
> *        }*
> *public RulesGrammarParser(TokenStream input, DebugEventListener dbg)
> {*
> *        super(input, dbg, new RecognizerSharedState());*
> 
> *}*
> 
> 
> *In addition to this method:*
> *protected boolean evalPredicate(boolean result, String predicate) {*
> *        dbg.semanticPredicate(result, predicate);*
> *        return result;*
> *    }*
> 
> *and these declarations:*
> *public static final String[] ruleNames = new String[] {*
> *        "invalidRule", "in", "evaluation", "gt", "consequence", "lte",
> *
> *        "times", "lte_math", "divided_by", "enumeration_value",
> "gte_math", *
> *        "range", "check", "variable", "last_connection",
> "numeric_value", *
> *        "term", "gte", "modulus", "plus", "source_name", "connection",
> "lt", *
> *        "source", "function", "equal", "name_of_quality", "condition",
> "primary", *
> *        "minus", "value_of_quality", "arithmeticExpression"*
> *    };*
> *     *
> *        public int ruleLevel = 0;*
> *        public int getRuleLevel() { return ruleLevel; }*
> *        public void incRuleLevel() { ruleLevel++; }*
> *        public void decRuleLevel() { ruleLevel--; }*
> 
> 
> And by input text, I mean the input.. The text that I write in
> ANTLRWorks
> when I click 'Run..'
> 
> Thanks for your time :-)
> 
> On Sat, May 22, 2010 at 8:41 PM, Bart Kiers <bkiers at gmail.com> wrote:
> 
> > But now I need to change my question because I found out that
> Parser.java
> >> generated from this action is different than Parser.java generated
> when I
> >> click 'Run..' in ANTLRWorks and give it an input text..
> >>
> >
> > Please explain what "different" means. And what do you mean by "input
> > text"?
> >
> > Kind regards,
> >
> > Bart.
> >
> 
> 
> 
> --
> Sameh W. Zaky
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From bruno.lehyaric at gmail.com  Sat May 22 12:22:15 2010
From: bruno.lehyaric at gmail.com (Pro)
Date: Sat, 22 May 2010 21:22:15 +0200
Subject: [antlr-interest] Coding rule checking for Ada 95
In-Reply-To: <t2ke8be804e1004221302jff6445a1k65e10ef585faa139@mail.gmail.com>
References: <t2ke8be804e1004221302jff6445a1k65e10ef585faa139@mail.gmail.com>
Message-ID: <CE102173-ECA2-4E3C-AEC4-19A589C41527@gmail.com>

I give a try to TXL.
Here is my TXL grammar for Ada 2005, under BSD-style licence :
  http://github.com/bu2/ada-2005-txl-grammar

And my roadmap :
http://wiki.github.com/bu2/fadacop/roadmap

Bruno.

On 22 avr. 2010, at 22:02, bruno le hyaric <bruno.lehyaric at gmail.com>  
wrote:

> Hum, okay...
>
> My problem is : the better I get it running, the better it is for my  
> ass ^^
>
> Now, I'm evaluating the feasibility of a solution :
> - based on ANTLR and Java target (thanks to Aonix & Hibachi eclipse  
> plugin)
> - with a Scala overlay to get a functionnal approach for all tree
> walking/matching algorithm
>
> I'm on the way to make a little prototype...

From acondit at ipns.com  Sat May 22 13:13:20 2010
From: acondit at ipns.com (Alan Condit)
Date: Sat, 22 May 2010 13:13:20 -0700
Subject: [antlr-interest] Building Antlr-3.2 from source on a Mac with Maven
Message-ID: <27D7118F-49C6-4B3E-9EA8-D3BF24609CE9@ipns.com>

Has anybody with a Mac successfully rebuilt Antlr-3.2 from source?

I am running Snow Leopard 10.6.3.

I have followed the directions that I found for building Antlr from source but I am getting a 881kb jar that doesn't run instead of a 1.9mb jar that does run.

I extracted a good jar and mine sorted the lines of the report and compared them.  I am missing all of the antlr/*.class classes and all of the org/antlr/gunit stuff. I also got an error message after I ran mvn clean and tried rebuilding.

[DEBUG] Output directory: /usr/share/java/antlr/main/tool/target/classes
[DEBUG] Classpath:
[DEBUG]  /usr/share/java/antlr/main/tool/target/classes
[DEBUG]  /usr/share/java/antlr/main/runtime/Java/target/antlr-runtime-3.2.1-SNAPSHOT.jar
[DEBUG]  /Users/acondit/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar
[DEBUG]  /Users/acondit/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar
[DEBUG] Source roots:
[DEBUG]  /usr/share/java/antlr/main/tool/src/main/java
[DEBUG]  /usr/share/java/antlr/main/tool/target/generated-sources/antlr
[DEBUG]  /usr/share/java/antlr/main/tool/target/generated-sources/antlr3
[INFO] Compiling 13 source files to /usr/share/java/antlr/main/tool/target/classes
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure
/usr/share/java/antlr/main/tool/src/main/java/org/antlr/tool/Interp.java:[55,17] cannot find symbol
symbol  : method sync(int)
location: class org.antlr.runtime.CommonTokenStream

Any help appreciated,
Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From janee at softweave.com  Sat May 22 14:12:27 2010
From: janee at softweave.com (Jane Eisenstein)
Date: Sat, 22 May 2010 17:12:27 -0400
Subject: [antlr-interest] seeking MS Windows ANTLRWorks that supports
	running grammars
Message-ID: <C12430A5-A0C1-4FA0-ADD1-B216504BC393@softweave.com>

Using the Macintosh 1.3.1 version of ANTLRWorks, I can run grammars to do quick interactive tests. Using the MS Windows (or Macintosh) 1.4 version of ANTLRWorks, trying to run a grammar results in a TODO console message.

Is there a pre-1.4 Windows version of ANTLRWorks that supports running grammars?


From kunalsawlani at gmail.com  Sat May 22 15:25:59 2010
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Sat, 22 May 2010 15:25:59 -0700 (PDT)
Subject: [antlr-interest] Invitation to connect on LinkedIn
Message-ID: <687225352.645226.1274567159266.JavaMail.app@ech3-cdn08.prod>

LinkedIn
------------Kunal Sawlani requested to add you as a connection on LinkedIn:
------------------------------------------

Ian,

I'd like to add you to my professional network on LinkedIn.

- Kunal

Accept invitation from Kunal Sawlani
http://www.linkedin.com/e/XJ_Jh42eHeYQ_eJ2S5_J_0Ueq9jQFT3yBwA6v-/blk/I2064900695_2/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYOnPkVdz0MejgSc399bTFniAllrDESbPAOc3cMcPkOcP4LrCBxbOYWrSlI/EML_comm_afe/

View invitation from Kunal Sawlani
http://www.linkedin.com/e/XJ_Jh42eHeYQ_eJ2S5_J_0Ueq9jQFT3yBwA6v-/blk/I2064900695_2/39vdjASc30Vd3oMcAALqnpPbOYWrSlI/svi/ 
------------------------------------------

DID YOU KNOW LinkedIn can help you find the right service providers using recommendations from your trusted network? Using LinkedIn Services, you can take the risky guesswork out of selecting service providers by reading the recommendations of credible, trustworthy members of your network. 
http://www.linkedin.com/e/svp/inv-25/

 
------
(c) 2010, LinkedIn Corporation

From j at junkwallah.org  Sat May 22 17:37:08 2010
From: j at junkwallah.org (Junkman)
Date: Sat, 22 May 2010 17:37:08 -0700
Subject: [antlr-interest] Dynamic scope for lexer rule
Message-ID: <4BF878B4.5070908@junkwallah.org>

Greetings,

I've added an attribute with dynamic scoping to a lexer rule, and when
generating code, I'm encountering an "internal error".  Listed below is
partial call stack reported:

error(10): internal error: Junkscript.g : java.lang.NullPointerException
	org.antlr.grammar.v2.DefineGrammarItemsWalker.ruleScopeSpec(DefineGrammarItemsWalker.java:1050)
	at
org.antlr.grammar.v2.DefineGrammarItemsWalker.rule(DefineGrammarItemsWalker.java:891)
	at
org.antlr.grammar.v2.DefineGrammarItemsWalker.rules(DefineGrammarItemsWalker.java:576)
	at
org.antlr.grammar.v2.DefineGrammarItemsWalker.grammarSpec(DefineGrammarItemsWalker.java:361)
	at
org.antlr.grammar.v2.DefineGrammarItemsWalker.grammar(DefineGrammarItemsWalker.java:193)
	at org.antlr.tool.Grammar.defineGrammarSymbols(Grammar.java:702)
	at
org.antlr.tool.CompositeGrammar.defineGrammarSymbols(CompositeGrammar.java:351)
...


Is dynamic scoping allowed for lexer rule attributes?

Thanks for any info.

J





From naveen.garg at gmail.com  Sat May 22 17:37:28 2010
From: naveen.garg at gmail.com (Naveen)
Date: Sat, 22 May 2010 17:37:28 -0700 (PDT)
Subject: [antlr-interest] Building Antlr-3.2 from source on a Mac with
	Maven
In-Reply-To: <27D7118F-49C6-4B3E-9EA8-D3BF24609CE9@ipns.com>
References: <27D7118F-49C6-4B3E-9EA8-D3BF24609CE9@ipns.com>
Message-ID: <d292dd70-ee7b-42a5-aeef-4c68aced25cf@m33g2000vbi.googlegroups.com>

On May 22, 3:13?pm, Alan Condit <acon... at ipns.com> wrote:
> Has anybody with a Mac successfully rebuilt Antlr-3.2 from source?

I built it successfully like this:
download latest source from http://github.com/antlr/antlr
edit the pom.xml in the root folder, remove the following two lines:
        <module>gunit</module>
        <module>gunit-maven-plugin</module>
there were errors building the gunit plugin otherwise on mac.
you may need an existing antlr-3.2 and antlr-2.7.7.jar in your
classpath
in the root folder again, run:
mvn -N install
mvn -Dmaven.test.skip=true
mvn -Dmaven.test.skip=true package assembly:assembly
this will put a antlr-master-3.2.1-SNAPSHOT-completejar.jar weighing
1.6mb in the target folder.



From acondit at ipns.com  Sat May 22 20:04:10 2010
From: acondit at ipns.com (Alan Condit)
Date: Sat, 22 May 2010 20:04:10 -0700
Subject: [antlr-interest] Building Antlr-3.2 from source on a Mac with
	Maven
Message-ID: <A398BC24-CD88-4A8C-A06C-CB5772AA5533@ipns.com>

Naveen,

Thanks, I got it working. I just wondered if it was possible for others and I was just messing up.
I unzipped a new copy of the files, fixed the pom.xml so that it didn't get the scm error, and everything worked.
Actually it stopped with errors a couple of times but by restarting it, it finally went on to completion.

Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From sameh.wz at gmail.com  Sun May 23 06:29:54 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Sun, 23 May 2010 15:29:54 +0200
Subject: [antlr-interest]  Context-Sensitive Follow Sets.. Bug?
Message-ID: <AANLkTinBaS-8Pe0zZi4pT9WDijPIpF7GG8yTgLRiUduX@mail.gmail.com>

Hello everyone..

After reading the wiki article
http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
(thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I went on
with developing my own example to test the method*:
computeContextSensitiveRuleFOLLOW()
*(described here:
http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_recognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
)

The method works perfectly in all cases except in the case of *zero or one*,
Consider the following simple grammar:

*start** **:** **animal (AND acClass)? service EOF;*
*
*
*
*
*animal** **:** **(DOG | CAT );*
* *
*service** **:** **(HARDWARE | SOFTWARE) ;*
*
*
*AND** **:** **'and';*
*
*
*DOG** **:** **'dog';*
*
*
*CAT** **:** **'cat';*
*
*
*HARDWARE:** **'hardware';*
*
*
*SOFTWARE:** **'software';*
*
*
*acClass*
*@init*
*{ System.out.println(computeContextSensitiveRuleFOLLOW().toString());}*
*    :     ;*

Testing this grammar, with let's say input:
"*dog and software*",
the result in the console is:
"{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
although it is supposed to be:
"{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because after *
acClass* in *start* rule, if we get "the" as next token this will make the
input invalid..


Any idea why this happens? Or how we can overcome it?

Thanks a bunch..
-- 
Sameh W. Zaky

From parrt at cs.usfca.edu  Sun May 23 09:27:45 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 May 2010 09:27:45 -0700
Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
In-Reply-To: <AANLkTinBaS-8Pe0zZi4pT9WDijPIpF7GG8yTgLRiUduX@mail.gmail.com>
References: <AANLkTinBaS-8Pe0zZi4pT9WDijPIpF7GG8yTgLRiUduX@mail.gmail.com>
Message-ID: <3F030A9E-A995-41F1-BD96-5753AABDE0CC@cs.usfca.edu>

hi.  can u resend w/o all the stars?
Ter
On May 23, 2010, at 6:29 AM, Sameh W. Zaky wrote:

> Hello everyone..
> 
> After reading the wiki article
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
> (thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I went on
> with developing my own example to test the method*:
> computeContextSensitiveRuleFOLLOW()
> *(described here:
> http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_recognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
> )
> 
> The method works perfectly in all cases except in the case of *zero or one*,
> Consider the following simple grammar:
> 
> *start** **:** **animal (AND acClass)? service EOF;*
> *
> *
> *
> *
> *animal** **:** **(DOG | CAT );*
> * *
> *service** **:** **(HARDWARE | SOFTWARE) ;*
> *
> *
> *AND** **:** **'and';*
> *
> *
> *DOG** **:** **'dog';*
> *
> *
> *CAT** **:** **'cat';*
> *
> *
> *HARDWARE:** **'hardware';*
> *
> *
> *SOFTWARE:** **'software';*
> *
> *
> *acClass*
> *@init*
> *{ System.out.println(computeContextSensitiveRuleFOLLOW().toString());}*
> *    :     ;*
> 
> Testing this grammar, with let's say input:
> "*dog and software*",
> the result in the console is:
> "{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
> although it is supposed to be:
> "{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because after *
> acClass* in *start* rule, if we get "the" as next token this will make the
> input invalid..
> 
> 
> Any idea why this happens? Or how we can overcome it?
> 
> Thanks a bunch..
> -- 
> Sameh W. Zaky
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sameh.wz at gmail.com  Sun May 23 10:06:16 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Sun, 23 May 2010 19:06:16 +0200
Subject: [antlr-interest]  Context-Sensitive Follow Sets.. Bug?
In-Reply-To: <AANLkTinBaS-8Pe0zZi4pT9WDijPIpF7GG8yTgLRiUduX@mail.gmail.com>
References: <AANLkTinBaS-8Pe0zZi4pT9WDijPIpF7GG8yTgLRiUduX@mail.gmail.com>
Message-ID: <AANLkTimI69nHSo_FMv3dsLkUriltKBhWTklKhCf6B1Ko@mail.gmail.com>

Here is the same message without formatting:

---------- Forwarded message ----------
From: Sameh W. Zaky <sameh.wz at gmail.com>
Date: Sun, May 23, 2010 at 3:29 PM
Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
To: antlr-interest at antlr.org


Hello everyone..
After reading the wiki article
http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
(thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I went on
with developing my own example to test the
method: computeContextSensitiveRuleFOLLOW() (described here:
http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_recognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
)
The method works perfectly in all cases except in the case of zero or one,
Consider the following simple grammar:

=============================================================================================

start : animal (AND acClass)? service EOF;

animal : (DOG | CAT );
service : (HARDWARE | SOFTWARE) ;
AND : 'and';
DOG : 'dog';
CAT : 'cat';
HARDWARE: 'hardware';
SOFTWARE: 'software';

acClass
@init
{ System.out.println(computeContextSensitiveRuleFOLLOW().toString());}
    :     ;
=====================================================================================

Testing this grammar, with let's say input:
"dog and software",
the result in the console is:
"{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
although it is supposed to be:
"{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because after
acClass in start rule, if we get "the" as next token this will make the
input invalid..

Any idea why this happens? Or how we can overcome it?
Thanks a bunch..
--
Sameh W. Zaky


Regards
--
Sameh W. Zaky

From parrt at cs.usfca.edu  Sun May 23 10:09:27 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 May 2010 10:09:27 -0700
Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
In-Reply-To: <AANLkTimI69nHSo_FMv3dsLkUriltKBhWTklKhCf6B1Ko@mail.gmail.com>
References: <AANLkTinBaS-8Pe0zZi4pT9WDijPIpF7GG8yTgLRiUduX@mail.gmail.com>
	<AANLkTimI69nHSo_FMv3dsLkUriltKBhWTklKhCf6B1Ko@mail.gmail.com>
Message-ID: <AFA18702-D176-4A8C-A41D-F2F01C4E77D9@cs.usfca.edu>

where is THE defined?
Ter
On May 23, 2010, at 10:06 AM, Sameh W. Zaky wrote:

> Here is the same message without formatting:
> 
> ---------- Forwarded message ----------
> From: Sameh W. Zaky <sameh.wz at gmail.com>
> Date: Sun, May 23, 2010 at 3:29 PM
> Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
> To: antlr-interest at antlr.org
> 
> 
> Hello everyone..
> After reading the wiki article
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
> (thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I went on
> with developing my own example to test the
> method: computeContextSensitiveRuleFOLLOW() (described here:
> http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_recognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
> )
> The method works perfectly in all cases except in the case of zero or one,
> Consider the following simple grammar:
> 
> =============================================================================================
> 
> start : animal (AND acClass)? service EOF;
> 
> animal : (DOG | CAT );
> service : (HARDWARE | SOFTWARE) ;
> AND : 'and';
> DOG : 'dog';
> CAT : 'cat';
> HARDWARE: 'hardware';
> SOFTWARE: 'software';
> 
> acClass
> @init
> { System.out.println(computeContextSensitiveRuleFOLLOW().toString());}
>    :     ;
> =====================================================================================
> 
> Testing this grammar, with let's say input:
> "dog and software",
> the result in the console is:
> "{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
> although it is supposed to be:
> "{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because after
> acClass in start rule, if we get "the" as next token this will make the
> input invalid..
> 
> Any idea why this happens? Or how we can overcome it?
> Thanks a bunch..
> --
> Sameh W. Zaky
> 
> 
> Regards
> --
> Sameh W. Zaky
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sun May 23 10:13:28 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 May 2010 10:13:28 -0700
Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
In-Reply-To: <AANLkTimI69nHSo_FMv3dsLkUriltKBhWTklKhCf6B1Ko@mail.gmail.com>
References: <AANLkTinBaS-8Pe0zZi4pT9WDijPIpF7GG8yTgLRiUduX@mail.gmail.com>
	<AANLkTimI69nHSo_FMv3dsLkUriltKBhWTklKhCf6B1Ko@mail.gmail.com>
Message-ID: <BA9DF1B6-102E-4101-8430-95BBB261224E@cs.usfca.edu>

oh. it includes AND (not THE).  That *is* weird.

I'll look.
Ter
On May 23, 2010, at 10:06 AM, Sameh W. Zaky wrote:

> Here is the same message without formatting:
> 
> ---------- Forwarded message ----------
> From: Sameh W. Zaky <sameh.wz at gmail.com>
> Date: Sun, May 23, 2010 at 3:29 PM
> Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
> To: antlr-interest at antlr.org
> 
> 
> Hello everyone..
> After reading the wiki article
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
> (thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I went on
> with developing my own example to test the
> method: computeContextSensitiveRuleFOLLOW() (described here:
> http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_recognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
> )
> The method works perfectly in all cases except in the case of zero or one,
> Consider the following simple grammar:
> 
> =============================================================================================
> 
> start : animal (AND acClass)? service EOF;
> 
> animal : (DOG | CAT );
> service : (HARDWARE | SOFTWARE) ;
> AND : 'and';
> DOG : 'dog';
> CAT : 'cat';
> HARDWARE: 'hardware';
> SOFTWARE: 'software';
> 
> acClass
> @init
> { System.out.println(computeContextSensitiveRuleFOLLOW().toString());}
>    :     ;
> =====================================================================================
> 
> Testing this grammar, with let's say input:
> "dog and software",
> the result in the console is:
> "{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
> although it is supposed to be:
> "{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because after
> acClass in start rule, if we get "the" as next token this will make the
> input invalid..
> 
> Any idea why this happens? Or how we can overcome it?
> Thanks a bunch..
> --
> Sameh W. Zaky
> 
> 
> Regards
> --
> Sameh W. Zaky
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Sun May 23 10:33:53 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 23 May 2010 10:33:53 -0700
Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
In-Reply-To: <BA9DF1B6-102E-4101-8430-95BBB261224E@cs.usfca.edu>
Message-ID: <b723285c0eeb384c8cdbdec76a3bdeac@temporal-wave.com>

Perhaps this is another instance of not clearing the cached set?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Sunday, May 23, 2010 10:13 AM
> To: Sameh W. Zaky
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
> 
> oh. it includes AND (not THE).  That *is* weird.
> 
> I'll look.
> Ter
> On May 23, 2010, at 10:06 AM, Sameh W. Zaky wrote:
> 
> > Here is the same message without formatting:
> >
> > ---------- Forwarded message ----------
> > From: Sameh W. Zaky <sameh.wz at gmail.com>
> > Date: Sun, May 23, 2010 at 3:29 PM
> > Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
> > To: antlr-interest at antlr.org
> >
> >
> > Hello everyone..
> > After reading the wiki article
> >
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
> > (thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I
> went on
> > with developing my own example to test the
> > method: computeContextSensitiveRuleFOLLOW() (described here:
> >
> http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_rec
> ognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
> > )
> > The method works perfectly in all cases except in the case of zero or
> one,
> > Consider the following simple grammar:
> >
> >
> =======================================================================
> ======================
> >
> > start : animal (AND acClass)? service EOF;
> >
> > animal : (DOG | CAT );
> > service : (HARDWARE | SOFTWARE) ;
> > AND : 'and';
> > DOG : 'dog';
> > CAT : 'cat';
> > HARDWARE: 'hardware';
> > SOFTWARE: 'software';
> >
> > acClass
> > @init
> > {
> System.out.println(computeContextSensitiveRuleFOLLOW().toString());}
> >    :     ;
> >
> =======================================================================
> ==============
> >
> > Testing this grammar, with let's say input:
> > "dog and software",
> > the result in the console is:
> > "{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
> > although it is supposed to be:
> > "{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because
> after
> > acClass in start rule, if we get "the" as next token this will make
> the
> > input invalid..
> >
> > Any idea why this happens? Or how we can overcome it?
> > Thanks a bunch..
> > --
> > Sameh W. Zaky
> >
> >
> > Regards
> > --
> > Sameh W. Zaky
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From parrt at cs.usfca.edu  Sun May 23 10:35:55 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 May 2010 10:35:55 -0700
Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
In-Reply-To: <b723285c0eeb384c8cdbdec76a3bdeac@temporal-wave.com>
References: <b723285c0eeb384c8cdbdec76a3bdeac@temporal-wave.com>
Message-ID: <46903599-5DAB-451F-90A4-2804947520A4@cs.usfca.edu>

could be. ANTLR v4 also reports something wacky; was coincidentally working on itnow
T
On May 23, 2010, at 10:33 AM, Jim Idle wrote:

> Perhaps this is another instance of not clearing the cached set?
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Sunday, May 23, 2010 10:13 AM
>> To: Sameh W. Zaky
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
>> 
>> oh. it includes AND (not THE).  That *is* weird.
>> 
>> I'll look.
>> Ter
>> On May 23, 2010, at 10:06 AM, Sameh W. Zaky wrote:
>> 
>>> Here is the same message without formatting:
>>> 
>>> ---------- Forwarded message ----------
>>> From: Sameh W. Zaky <sameh.wz at gmail.com>
>>> Date: Sun, May 23, 2010 at 3:29 PM
>>> Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
>>> To: antlr-interest at antlr.org
>>> 
>>> 
>>> Hello everyone..
>>> After reading the wiki article
>>> 
>> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
>>> (thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I
>> went on
>>> with developing my own example to test the
>>> method: computeContextSensitiveRuleFOLLOW() (described here:
>>> 
>> http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_rec
>> ognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
>>> )
>>> The method works perfectly in all cases except in the case of zero or
>> one,
>>> Consider the following simple grammar:
>>> 
>>> 
>> =======================================================================
>> ======================
>>> 
>>> start : animal (AND acClass)? service EOF;
>>> 
>>> animal : (DOG | CAT );
>>> service : (HARDWARE | SOFTWARE) ;
>>> AND : 'and';
>>> DOG : 'dog';
>>> CAT : 'cat';
>>> HARDWARE: 'hardware';
>>> SOFTWARE: 'software';
>>> 
>>> acClass
>>> @init
>>> {
>> System.out.println(computeContextSensitiveRuleFOLLOW().toString());}
>>>   :     ;
>>> 
>> =======================================================================
>> ==============
>>> 
>>> Testing this grammar, with let's say input:
>>> "dog and software",
>>> the result in the console is:
>>> "{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
>>> although it is supposed to be:
>>> "{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because
>> after
>>> acClass in start rule, if we get "the" as next token this will make
>> the
>>> input invalid..
>>> 
>>> Any idea why this happens? Or how we can overcome it?
>>> Thanks a bunch..
>>> --
>>> Sameh W. Zaky
>>> 
>>> 
>>> Regards
>>> --
>>> Sameh W. Zaky
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
>> interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sun May 23 10:48:36 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 May 2010 10:48:36 -0700
Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
In-Reply-To: <46903599-5DAB-451F-90A4-2804947520A4@cs.usfca.edu>
References: <b723285c0eeb384c8cdbdec76a3bdeac@temporal-wave.com>
	<46903599-5DAB-451F-90A4-2804947520A4@cs.usfca.edu>
Message-ID: <4B99E136-CDCC-494B-8232-5336B64F6FD4@cs.usfca.edu>

v4 is doing right thing. crap. ok, v3 is doing something crazy. grrr...
Ter
On May 23, 2010, at 10:35 AM, Terence Parr wrote:

> could be. ANTLR v4 also reports something wacky; was coincidentally working on itnow
> T
> On May 23, 2010, at 10:33 AM, Jim Idle wrote:
> 
>> Perhaps this is another instance of not clearing the cached set?
>> 
>> Jim
>> 
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> bounces at antlr.org] On Behalf Of Terence Parr
>>> Sent: Sunday, May 23, 2010 10:13 AM
>>> To: Sameh W. Zaky
>>> Cc: antlr-interest at antlr.org
>>> Subject: Re: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
>>> 
>>> oh. it includes AND (not THE).  That *is* weird.
>>> 
>>> I'll look.
>>> Ter
>>> On May 23, 2010, at 10:06 AM, Sameh W. Zaky wrote:
>>> 
>>>> Here is the same message without formatting:
>>>> 
>>>> ---------- Forwarded message ----------
>>>> From: Sameh W. Zaky <sameh.wz at gmail.com>
>>>> Date: Sun, May 23, 2010 at 3:29 PM
>>>> Subject: [antlr-interest] Context-Sensitive Follow Sets.. Bug?
>>>> To: antlr-interest at antlr.org
>>>> 
>>>> 
>>>> Hello everyone..
>>>> After reading the wiki article
>>>> 
>>> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery,
>>>> (thanks to Jim Idle, "Yes, you def. deserve a Masters too" ;-)) I
>>> went on
>>>> with developing my own example to test the
>>>> method: computeContextSensitiveRuleFOLLOW() (described here:
>>>> 
>>> http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1_base_rec
>>> ognizer.html#2b566e00e5d771f66dd4e29a4a27a1c4
>>>> )
>>>> The method works perfectly in all cases except in the case of zero or
>>> one,
>>>> Consider the following simple grammar:
>>>> 
>>>> 
>>> =======================================================================
>>> ======================
>>>> 
>>>> start : animal (AND acClass)? service EOF;
>>>> 
>>>> animal : (DOG | CAT );
>>>> service : (HARDWARE | SOFTWARE) ;
>>>> AND : 'and';
>>>> DOG : 'dog';
>>>> CAT : 'cat';
>>>> HARDWARE: 'hardware';
>>>> SOFTWARE: 'software';
>>>> 
>>>> acClass
>>>> @init
>>>> {
>>> System.out.println(computeContextSensitiveRuleFOLLOW().toString());}
>>>>  :     ;
>>>> 
>>> =======================================================================
>>> ==============
>>>> 
>>>> Testing this grammar, with let's say input:
>>>> "dog and software",
>>>> the result in the console is:
>>>> "{4, 7, 8}" (which stands for tokens {THE, HARDWARE, SOFTWARE}),
>>>> although it is supposed to be:
>>>> "{7,8}" (which stand for tokens {HARDWARE, SOFTWARE} only).. Because
>>> after
>>>> acClass in start rule, if we get "the" as next token this will make
>>> the
>>>> input invalid..
>>>> 
>>>> Any idea why this happens? Or how we can overcome it?
>>>> Thanks a bunch..
>>>> --
>>>> Sameh W. Zaky
>>>> 
>>>> 
>>>> Regards
>>>> --
>>>> Sameh W. Zaky
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
>>> interest/your-email-address
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>> email-address
>> 
>> 
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From stefika at gmail.com  Sun May 23 13:21:41 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Sun, 23 May 2010 15:21:41 -0500
Subject: [antlr-interest]  Removing unnecessary casts
Message-ID: <AANLkTimnVrD-80Q01CNqoa0tnb5-D6B8KSy1318NH0cP@mail.gmail.com>

Hi folks,

I'm going through my compiler finally removing some warnings and other
minor issues, as we bug fix and generally get ready for release. I was
wondering, when ANTLR generates code (Java target), it generates a
great of things "like" the following:

Object IF50_tree=null;

IF50_tree = (Object)adaptor.create(IF50);


Now, since IF50_tree is defined as an object, the second statement's
cast to type Object is redundant, which then throws a warning in the
compiler output. Is there any way to turn off the duplicate cast,
thereby making ANTLR generate, instead of the above, the following:

IF50_tree = adaptor.create(IF50);

This would remove the warnings. It's not a big deal, but since ANTLR
generates approximately 100 of these warnings (all caused by the same
issue), it sometimes gets in the way me digging through and finding
real problems.

Thoughts?

Stefik

From parrt at cs.usfca.edu  Sun May 23 17:06:35 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 May 2010 17:06:35 -0700
Subject: [antlr-interest] Removing unnecessary casts
In-Reply-To: <AANLkTimnVrD-80Q01CNqoa0tnb5-D6B8KSy1318NH0cP@mail.gmail.com>
References: <AANLkTimnVrD-80Q01CNqoa0tnb5-D6B8KSy1318NH0cP@mail.gmail.com>
Message-ID: <DFC7B596-749E-4D9B-80EC-6A181DDB3718@cs.usfca.edu>

have you set ASTLabelType?
Ter
On May 23, 2010, at 1:21 PM, Andreas Stefik wrote:

> Hi folks,
> 
> I'm going through my compiler finally removing some warnings and other
> minor issues, as we bug fix and generally get ready for release. I was
> wondering, when ANTLR generates code (Java target), it generates a
> great of things "like" the following:
> 
> Object IF50_tree=null;
> 
> IF50_tree = (Object)adaptor.create(IF50);
> 
> 
> Now, since IF50_tree is defined as an object, the second statement's
> cast to type Object is redundant, which then throws a warning in the
> compiler output. Is there any way to turn off the duplicate cast,
> thereby making ANTLR generate, instead of the above, the following:
> 
> IF50_tree = adaptor.create(IF50);
> 
> This would remove the warnings. It's not a big deal, but since ANTLR
> generates approximately 100 of these warnings (all caused by the same
> issue), it sometimes gets in the way me digging through and finding
> real problems.
> 
> Thoughts?
> 
> Stefik
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From stefika at gmail.com  Sun May 23 17:25:29 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Sun, 23 May 2010 19:25:29 -0500
Subject: [antlr-interest] Removing unnecessary casts
In-Reply-To: <DFC7B596-749E-4D9B-80EC-6A181DDB3718@cs.usfca.edu>
References: <AANLkTimnVrD-80Q01CNqoa0tnb5-D6B8KSy1318NH0cP@mail.gmail.com>
	<DFC7B596-749E-4D9B-80EC-6A181DDB3718@cs.usfca.edu>
Message-ID: <AANLkTikSWVF8UreISdJh_vZKyCImaJ0nv3TU63z9BKzF@mail.gmail.com>

The only option I have set is:

options {
	output=AST;
}

>From your question, I'm assuming I'm doing something wrong here?

Stefik


On Sun, May 23, 2010 at 7:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> have you set ASTLabelType?
> Ter
> On May 23, 2010, at 1:21 PM, Andreas Stefik wrote:
>
>> Hi folks,
>>
>> I'm going through my compiler finally removing some warnings and other
>> minor issues, as we bug fix and generally get ready for release. I was
>> wondering, when ANTLR generates code (Java target), it generates a
>> great of things "like" the following:
>>
>> Object IF50_tree=null;
>>
>> IF50_tree = (Object)adaptor.create(IF50);
>>
>>
>> Now, since IF50_tree is defined as an object, the second statement's
>> cast to type Object is redundant, which then throws a warning in the
>> compiler output. Is there any way to turn off the duplicate cast,
>> thereby making ANTLR generate, instead of the above, the following:
>>
>> IF50_tree = adaptor.create(IF50);
>>
>> This would remove the warnings. It's not a big deal, but since ANTLR
>> generates approximately 100 of these warnings (all caused by the same
>> issue), it sometimes gets in the way me digging through and finding
>> real problems.
>>
>> Thoughts?
>>
>> Stefik
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From temporaryemail at comcast.net  Sun May 23 17:28:55 2010
From: temporaryemail at comcast.net (Bob)
Date: Sun, 23 May 2010 17:28:55 -0700
Subject: [antlr-interest] Antlr 3.2 vs. Bison
	2.4.2+Flex	2.5.35	Speed/Memory
In-Reply-To: <61b0d9f845bd62489ed39177993482bf@temporal-wave.com>
References: <000301caf9dd$3cbeb420$b63c1c60$@net>
	<61b0d9f845bd62489ed39177993482bf@temporal-wave.com>
Message-ID: <000001cafad8$17e11f70$47a35e50$@net>

I have gotten rid of the string stuff and memory reduced from 1.7g to
830meg. 830Meg is still a lot bigger than the
11Meg input file. Do we revisit tokenizing of the entire input file to
explain this?
	
Here is a snapshot of the program stack while it's expanding memory. Hope it
helps you!
  
	TestExpr.exe!newPool(ANTLR3_TOKEN_FACTORY_struct *
factory=0x00825a40)  Line 167 + 0xd bytes	C
 	TestExpr.exe!newPoolToken(ANTLR3_TOKEN_FACTORY_struct *
factory=0x00825a40)  Line 190 + 0x9 bytes	C
 	TestExpr.exe!emit(ANTLR3_LEXER_struct * lexer=0x008255d8)  Line 631
+ 0x23 bytes	C
 	TestExpr.exe!nextTokenStr(ANTLR3_TOKEN_SOURCE_struct *
toksource=0x008258d0)  Line 272 + 0x9 bytes	C
 	TestExpr.exe!nextToken(ANTLR3_TOKEN_SOURCE_struct *
toksource=0x008258d0)  Line 316 + 0x9 bytes	C
 	TestExpr.exe!fillBuffer(ANTLR3_COMMON_TOKEN_STREAM_struct *
tokenStream=0x00bd40a8)  Line 964 + 0x15 bytes	C
 	TestExpr.exe!tokLT(ANTLR3_TOKEN_STREAM_struct * ts=0x00bd4128, int
k=1)  Line 319 + 0x9 bytes	C
 	TestExpr.exe!getCurrentInputSymbol(ANTLR3_BASE_RECOGNIZER_struct *
recognizer=0x00bd4408, ANTLR3_INT_STREAM_struct * istream=0x00bd41a0)  Line
2158 + 0x16 bytes	C
 	TestExpr.exe!match(ANTLR3_BASE_RECOGNIZER_struct *
recognizer=0x00bd4408, unsigned int ttype=17, ANTLR3_BITSET_LIST_struct *
follow=0x0041c210)  Line 451 + 0x12 bytes	C
 	TestExpr.exe!module_ansi_header(NuVParser_Ctx_struct *
ctx=0x00bd4310)  Line 893 + 0x1f bytes	C
 	TestExpr.exe!module_declaration(NuVParser_Ctx_struct *
ctx=0x00bd4310)  Line 800 + 0x9 bytes	C
 	TestExpr.exe!description(NuVParser_Ctx_struct * ctx=0x00bd4310)
Line 754 + 0x9 bytes	C
 	TestExpr.exe!source_text(NuVParser_Ctx_struct * ctx=0x00bd4310)
Line 667 + 0x9 bytes	C
 	TestExpr.exe!main(int argc=3, char * * argv=0x00824f78)  Line 35 +
0xe bytes	C++

This is the recommended change to get rid of the strings:

identifier returns [void* node] : SIMPLE_IDENTIFIER
        {
            pANTLR3_COMMON_TOKEN _pToken = $SIMPLE_IDENTIFIER;
            pANTLR3_UINT8 _f=(pANTLR3_UINT8)_pToken->getStartIndex(_pToken);
            pANTLR3_UINT8 _l=(pANTLR3_UINT8)_pToken->getStopIndex(_pToken);
            unsigned int  _size = _l-_f+1;
            char*         _p = (char*)alloca(_size+1);
            memcpy(_p,_f,_size);
            _p[_size] = 0;
            
            $node = act_identifier( _p );
        }
    ;
-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Saturday, May 22, 2010 12:16 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
Speed/Memory

The string stuff is just a convenience method for simple stuff. For real
programs you should not do that but use the pointer to start and end that is
contained in the token. Then you can just memcpy straight from the input
source into whatever structure you are using.

Also, if your input is 8 bit then follow the examples and use direct
pointers. If you don't need error recovery then in the next release you can
turn off the stack overhead, or you can do it yourself by undefining the
macrothat does this in the generated code.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Saturday, May 22, 2010 11:33 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> Speed/Memory
> 
> Perhaps you are correct regarding the strings. Looking at the antlr
> generated "identifier" rule code, I see
> 
> "SIMPLE_IDENTIFIER12" is not freed.  Is there a mechanism whereby I can
> free
> the string when the rule is complete?
> 
> 
> 
> After reading the file into memory, the process size is ~11meg (size of
> input file), then it rises to 853Meg before the 1st "module" ..
> "endmodule"
> from the input is recognized. As subsequent "module".."endmodule"'s are
> recognized memory rises to 1.2+Gb.
> 
> 
> 
> If you have a solution to free the strings when a rule is complete,
> I'll try
> that and see where it stands. The expansion from 11Meg to over 1.2Gb is
> quite a bit for strings!
> 
> 
> 
> 
> 
> Rule:
> 
> 
> 
> identifier returns [void* node] : SIMPLE_IDENTIFIER
> 
>         { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }
> 
>     ;
> 
> 
> 
> Code:
> 
> 
> 
> static void*
> 
> identifier(pNuVParser ctx)
> 
> {
> 
>     void* node = NULL;
> 
> 
> 
>     pANTLR3_COMMON_TOKEN    SIMPLE_IDENTIFIER12;
> 
> 
> 
>     /* Initialize rule variables
> 
>      */
> 
> 
> 
> 
> 
>     SIMPLE_IDENTIFIER12       = NULL;
> 
> 
> 
>     {
> 
>         // NuV.g:102:33: ( SIMPLE_IDENTIFIER )
> 
>         // NuV.g:102:35: SIMPLE_IDENTIFIER
> 
>         {
> 
>             SIMPLE_IDENTIFIER12 = (pANTLR3_COMMON_TOKEN)
> MATCHT(SIMPLE_IDENTIFIER, &FOLLOW_SIMPLE_IDENTIFIER_in_identifier608);
> 
>             if  (HASEXCEPTION())
> 
>             {
> 
>                 goto ruleidentifierEx;
> 
>             }
> 
> 
> 
>             {
> 
>                  node= act_identifier(
> (SIMPLE_IDENTIFIER12->getText(SIMPLE_IDENTIFIER12))->chars );
> 
>             }
> 
> 
> 
>         }
> 
> 
> 
>     }
> 
> 
> 
> 
> 
>     // This is where rules clean up and exit
> 
>     //
> 
>     goto ruleidentifierEx; /* Prevent compiler warnings */
> 
>     ruleidentifierEx: ;
> 
> 
> 
>             if (HASEXCEPTION())
> 
>             {
> 
>                 PREPORTERROR();
> 
>                 PRECOVER();
> 
>             }
> 
> 
> 
> 
> 
>     return node;
> 
> }
> 
> 
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Saturday, May 22, 2010 10:37 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> Speed/Memory
> 
> 
> 
> The other thing to add here is that you are using the $xxx.text
> references,
> and these do not free up the string memory until you free the parser.
> With
> this many inputs, the memory usage you are seeing is probably this
> first and
> not the tokens.
> 
> 
> 
> Jim
> 
> 
> 
> > -----Original Message-----
> 
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> 
> > bounces at antlr.org] On Behalf Of Bob
> 
> > Sent: Friday, May 21, 2010 7:47 PM
> 
> > To: antlr-interest at antlr.org
> 
> > Subject: [antlr-interest] Antlr 3.2 vs. Bison 2.4.2+Flex 2.5.35
> 
> > Speed/Memory
> 
> >
> 
> > A tiny grammar was implemented in both Antlr and Bison+Flex (shown
> 
> > below).
> 
> >
> 
> > Test files repeating two lines (shown below) were made in 6 different
> 
> >
> 
> > sizes.
> 
> >
> 
> > One executable compiled with command line switch choosing either
> 
> >
> 
> > Antlr or Bison+Flex.
> 
> >
> 
> > One run with empty actions, one run with actions populated, to
> compare
> 
> >
> 
> > pure parsing with some actual work.
> 
> >
> 
> >
> 
> >
> 
> > Results:
> 
> >
> 
> >
> 
> > CPU time    Peak Memory
> 
> >
> 
> > File Name     File Size # modules #tokens  Bison Antlr  Bison Antlr
> 
> >
> 
> > Action bodies empty:
> 
> >
> 
> > source.v10m     460mb      10m      150m         28s          572k  *
> 
> >
> 
> > source.v5m       230mb       5m        75m           15s
> 572k
> 
> > *
> 
> >
> 
> > source.v2.5m    115mb       2.5m     37m           7s           572k
> *
> 
> >
> 
> > source.v1m       46mb         1m        15m            2s
> 
> > 572k  *
> 
> >
> 
> > source.v500k    23mb        500k      7.5m          1s
> 572k
> 
> > *
> 
> >
> 
> > source.v250k    11mb        250k      3.7m        <1s   4s     572k
> 
> > 1.7g
> 
> > <-----------
> 
> >
> 
> > Action bodies populated:
> 
> >
> 
> > source.v250k    11mb        250k      3.7m         9s   13s    477m
> 
> > 1.7g
> 
> > <-----------
> 
> >
> 
> >
> 
> >
> 
> > * Antlr ran out of memory at 2gb
> 
> >
> 
> >
> 
> >
> 
> > Comments:
> 
> >
> 
> >
> 
> >
> 
> > 1. I expected the requirement that the entire file be resident in
> 
> > memory
> 
> >
> 
> >    to be the memory glut. Surprise! Quick inspection suggests an
> 
> > initial
> 
> >
> 
> >    tokenizing of the entire in-memory file consumes gobbs of memory,
> 
> > pushing
> 
> >
> 
> >    a small footprint up to 1.7gb before releasing it. Only the
> smallest
> 
> >
> 
> >    test file was under the runable 32 bit 2gb limit.     Please fix!!
> 
> >
> 
> >
> 
> >
> 
> > 2. Speed is clearly slower than bison+flex, however empty actions
> don't
> 
> > make
> 
> >
> 
> >    interesting programs. The test with actions enabled shows a 9s vs.
> 
> > 13s
> 
> >
> 
> >    difference, considerable less than the empty action case.
> 
> >
> 
> >
> 
> >
> 
> > 3. If you've never setup bison+flex I have only one comment: !#@%$#.
> 
> > Two
> 
> >
> 
> >    thumbs up for Antlr.
> 
> >
> 
> >
> 
> >
> 
> > Details:
> 
> >
> 
> >
> 
> >
> 
> >   Vista 64, AMD opteron 2.4Ghz, 16gb ram
> 
> >
> 
> >   Visual Studio 2008 Sp1
> 
> >
> 
> >   One exe file with both Antlr and Bison+Flex, targeting 32 bit
> 
> >
> 
> >   Full Optimization (/Ox), Inline Any suitable (/Ob2), Favor Small
> Code
> 
> > (/Os)
> 
> >
> 
> >   Versions:
> 
> >
> 
> >     Antlr 3.2
> 
> >
> 
> >     Bison 2.4.2 LR(1)
> 
> >
> 
> >     Flex  2.5.35
> 
> >
> 
> >
> 
> >
> 
> >
> 
> >
> 
> > ------------------- Input file -----------------------------
> 
> >
> 
> > module tiptop #(int p1=3, p2=4 );
> 
> >
> 
> > endmodule
> 
> >
> 
> > ... repeat to the indicated number of modules ...
> 
> >
> 
> > ------------------- Antlr Grammar --------------------------
> 
> >
> 
> > source_text : description ( description )*
> 
> >
> 
> >     ;
> 
> >
> 
> > description : module_declaration
> 
> >
> 
> >     ;
> 
> >
> 
> > module_declaration : module_ansi_header ENDMODULE ( ':'
> 
> > module_identifier )?
> 
> >
> 
> >         { act_module(); }
> 
> >
> 
> >     ;
> 
> >
> 
> > module_ansi_header : MODULE_KEYWORD module_identifier (
> 
> > parameter_port_list
> 
> > )? ';'
> 
> >
> 
> >     ;
> 
> >
> 
> > module_identifier : identifier
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_list
> 
> >
> 
> >     : '#' '(' parameter_port_declaration ( ','
> 
> > parameter_port_declaration )*
> 
> > ')'
> 
> >
> 
> >     | '#' '(' ')'
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_declaration returns [void* node]
> 
> >
> 
> > scope {
> 
> >
> 
> >     void* type;
> 
> >
> 
> >     void* head;
> 
> >
> 
> >     void* tail;
> 
> >
> 
> > }
> 
> >
> 
> >     : data_type
> 
> >
> 
> >         { $parameter_port_declaration::type = $data_type.node;
> 
> >
> 
> >             $parameter_port_declaration::head=NULL; }
> 
> > list_of_param_assignments
> 
> >
> 
> >         { $node = $parameter_port_declaration::head; }
> 
> >
> 
> >     ;
> 
> >
> 
> > list_of_param_assignments
> 
> >
> 
> >     : param_assignment ( ',' param_assignment )*
> 
> >
> 
> >     ;
> 
> >
> 
> > param_assignment
> 
> >
> 
> >     : parameter_identifier '=' constant_param_expression
> 
> >
> 
> >         { act_param_assignment
> 
> >
> 
> >             (
> 
> >
> 
> >                 & $parameter_port_declaration::head,
> 
> >
> 
> >                 & $parameter_port_declaration::tail,
> 
> >
> 
> >                 $parameter_identifier.node,
> 
> >
> 
> >                 $parameter_port_declaration::type,
> 
> >
> 
> >                 $constant_param_expression.node
> 
> >
> 
> >             );
> 
> >
> 
> >         }
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_param_expression returns [void* node]
> 
> >
> 
> >     : constant_mintypmax_expression
> 
> >
> 
> >         { $node = $constant_mintypmax_expression.node; }
> 
> >
> 
> > //    | '$'
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_mintypmax_expression returns [void* node]
> 
> >
> 
> >     : constant_expression
> 
> >
> 
> >         { $node = $constant_expression.node; }
> 
> >
> 
> >     ;
> 
> >
> 
> > // Deviate from LRM
> 
> >
> 
> > constant_expression returns [void* node]
> 
> >
> 
> >     : expr { $node = $expr.node; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_identifier returns [void* node]
> 
> >
> 
> >     : identifier { $node = $identifier.node; }
> 
> >
> 
> >     ;
> 
> >
> 
> > data_type returns [void* node]
> 
> >
> 
> >     : integer_atom_type signing
> 
> >
> 
> >        {$node=act_type($integer_atom_type.value,$signing.value);}
> 
> >
> 
> >     | integer_atom_type
> 
> >
> 
> >        {$node=act_type($integer_atom_type.value,-1);}
> 
> >
> 
> >     ;
> 
> >
> 
> >
> 
> >
> 
> >
> 
> >
> 
> > expr returns [void* node] : NUMBER
> 
> >
> 
> >         { $node = act_number( $NUMBER.text->chars ); }
> 
> >
> 
> >         ;
> 
> >
> 
> >
> 
> >
> 
> > identifier returns [void* node] : SIMPLE_IDENTIFIER
> 
> >
> 
> >         { $node = act_identifier( $SIMPLE_IDENTIFIER.text->chars ); }
> 
> >
> 
> >     ;
> 
> >
> 
> >
> 
> >
> 
> > /*------------------------------------------------------------------
> 
> >
> 
> >  * LEXER RULES
> 
> >
> 
> >  *------------------------------------------------------------------
> */
> 
> >
> 
> >
> 
> >
> 
> > integer_atom_type returns [int value]
> 
> >
> 
> >     : TokByte       {$value = TokByte;}
> 
> >
> 
> >     | TokShortint   {$value = TokShortint;}
> 
> >
> 
> >     | TokInt        {$value = TokInt;}
> 
> >
> 
> >     | TokLongint    {$value = TokLongint;}
> 
> >
> 
> >     | TokInteger    {$value = TokInteger;}
> 
> >
> 
> >     | TokTime       {$value = TokTime;}
> 
> >
> 
> >     ;
> 
> >
> 
> > signing returns [int value]
> 
> >
> 
> >     : TokSigned     {$value= TokSigned;}
> 
> >
> 
> >     | TokUnsigned   {$value= TokUnsigned;}
> 
> >
> 
> >     ;
> 
> >
> 
> > MODULE_KEYWORD  : (( 'module' )|('macromodule') )
> 
> >
> 
> >     ;
> 
> >
> 
> > ENDMODULE       : 'endmodule'
> 
> >
> 
> >     ;
> 
> >
> 
> > SIMPLE_IDENTIFIER : ( 'a'..'z'|'A'..'Z'|'_' ) (
> 
> > 'a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
> 
> >
> 
> >     ;
> 
> >
> 
> >
> 
> >
> 
> > NUMBER : (DIGIT)+
> 
> >
> 
> >             ;
> 
> >
> 
> >
> 
> >
> 
> > WHITESPACE  : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+
> 
> >
> 
> >               {
> 
> >
> 
> >                  $channel = HIDDEN;
> 
> >
> 
> >               }
> 
> >
> 
> >             ;
> 
> >
> 
> > fragment
> 
> >
> 
> > DIGIT         : '0'..'9'
> 
> >
> 
> >             ;
> 
> >
> 
> > ------------------- Bison Grammar --------------------------
> 
> >
> 
> > %%
> 
> >
> 
> > source_text : description
> 
> >
> 
> >     ;
> 
> >
> 
> > description
> 
> >
> 
> >                 : module_declaration
> 
> >
> 
> >                 | description module_declaration
> 
> >
> 
> >     ;
> 
> >
> 
> > module_declaration
> 
> >
> 
> >                 : module_ansi_header TokEndmodule
> 
> >
> 
> >                 { act_module(); }
> 
> >
> 
> >                 | module_ansi_header TokEndmodule ':'
> module_identifier
> 
> >
> 
> >                 { act_module(); }
> 
> >
> 
> >     ;
> 
> >
> 
> > module_ansi_header
> 
> >
> 
> >                 : TokModule module_identifier ';'
> 
> >
> 
> >                 | TokModule module_identifier parameter_port_list ';'
> 
> >
> 
> >     ;
> 
> >
> 
> > module_identifier : identifier
> 
> >
> 
> >                 { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_list
> 
> >
> 
> >     : '#' '(' parameter_port_list_recur ')'
> 
> >
> 
> >     | '#' '(' ')'
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_list_recur
> 
> >
> 
> >                 : parameter_port_declaration
> 
> >
> 
> >                 | parameter_port_list_recur ','
> 
> > parameter_port_declaration
> 
> >
> 
> >                 ;
> 
> >
> 
> > parameter_port_declaration
> 
> >
> 
> >                 : parameter_port_declaration_scope
> 
> >
> 
> >                     data_type { $1.type = $2; $1.head = NULL; }
> 
> >
> 
> >                       list_of_param_assignments { $$ = $1.head; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_port_declaration_scope :
> 
> >
> 
> >                 ;
> 
> >
> 
> > list_of_param_assignments
> 
> >
> 
> >     : nil                       nil param_assignment
> 
> >
> 
> > /* FIX:: need LR(2) here */
> 
> >
> 
> >     | list_of_param_assignments ',' param_assignment
> 
> >
> 
> >     ;
> 
> >
> 
> > param_assignment
> 
> >
> 
> >     : parameter_identifier '=' constant_param_expression
> 
> >
> 
> >     { act_param_assignment
> 
> >
> 
> >       (
> 
> >
> 
> >        & $<scope1>-3.head,
> 
> >
> 
> >        & $<scope1>-3.tail,
> 
> >
> 
> >        $1,
> 
> >
> 
> >        $<scope1>-3.type,
> 
> >
> 
> >        $3
> 
> >
> 
> >        );
> 
> >
> 
> >     }
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_param_expression
> 
> >
> 
> >                 : constant_mintypmax_expression { $$ = $1; }
> 
> >
> 
> > //    | '$'
> 
> >
> 
> >     ;
> 
> >
> 
> > constant_mintypmax_expression
> 
> >
> 
> >     : constant_expression { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > // Deviate from LRM
> 
> >
> 
> > constant_expression : expr { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > parameter_identifier : identifier
> 
> >
> 
> >     { $$ = $1; }
> 
> >
> 
> >     ;
> 
> >
> 
> > data_type
> 
> >
> 
> >                 : integer_atom_type signing { $$ = act_typeB($1,$2);
> }
> 
> >
> 
> >                 | integer_atom_type         { $$ = act_typeB($1,-1);
> }
> 
> >
> 
> >                 ;
> 
> >
> 
> > expr       : TokNumber
> 
> >
> 
> >                 { $$ = act_number( $1 ); }
> 
> >
> 
> >                 ;
> 
> >
> 
> >
> 
> >
> 
> > nil           : /* empty */
> 
> >
> 
> >     ;
> 
> >
> 
> > identifier : TokIdentifier
> 
> >
> 
> >                 { $$ = act_identifier( $1 ); }
> 
> >
> 
> >     ;
> 
> >
> 
> > integer_atom_type
> 
> >
> 
> >                 : TokByte     { $$ = $1; }
> 
> >
> 
> >                 | TokShortint { $$ = $1; }
> 
> >
> 
> >                 | TokInt      { $$ = $1; }
> 
> >
> 
> >                 | TokLongint  { $$ = $1; }
> 
> >
> 
> >                 | TokInteger  { $$ = $1; }
> 
> >
> 
> >                 | TokTime     { $$ = $1; }
> 
> >
> 
> >                 ;
> 
> >
> 
> > signing  : TokSigned   { $$ = $1; }
> 
> >
> 
> >                 | TokUnsigned { $$ = $1; }
> 
> >
> 
> >                 ;
> 
> >
> 
> > %%
> 
> >
> 
> > ---------------------------------------------------------------
> 
> >
> 
> >
> 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> 
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> 
> > email-address
> 
> 
> 
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> 
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sun May 23 17:29:52 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 May 2010 17:29:52 -0700
Subject: [antlr-interest] Removing unnecessary casts
In-Reply-To: <AANLkTikSWVF8UreISdJh_vZKyCImaJ0nv3TU63z9BKzF@mail.gmail.com>
References: <AANLkTimnVrD-80Q01CNqoa0tnb5-D6B8KSy1318NH0cP@mail.gmail.com>
	<DFC7B596-749E-4D9B-80EC-6A181DDB3718@cs.usfca.edu>
	<AANLkTikSWVF8UreISdJh_vZKyCImaJ0nv3TU63z9BKzF@mail.gmail.com>
Message-ID: <4000958B-A70C-4F16-9015-0C66FC8B6AD8@cs.usfca.edu>

yup. set option ASTLabelType
Ter
On May 23, 2010, at 5:25 PM, Andreas Stefik wrote:

> The only option I have set is:
> 
> options {
> 	output=AST;
> }
> 
>> From your question, I'm assuming I'm doing something wrong here?
> 
> Stefik
> 
> 
> On Sun, May 23, 2010 at 7:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> have you set ASTLabelType?
>> Ter
>> On May 23, 2010, at 1:21 PM, Andreas Stefik wrote:
>> 
>>> Hi folks,
>>> 
>>> I'm going through my compiler finally removing some warnings and other
>>> minor issues, as we bug fix and generally get ready for release. I was
>>> wondering, when ANTLR generates code (Java target), it generates a
>>> great of things "like" the following:
>>> 
>>> Object IF50_tree=null;
>>> 
>>> IF50_tree = (Object)adaptor.create(IF50);
>>> 
>>> 
>>> Now, since IF50_tree is defined as an object, the second statement's
>>> cast to type Object is redundant, which then throws a warning in the
>>> compiler output. Is there any way to turn off the duplicate cast,
>>> thereby making ANTLR generate, instead of the above, the following:
>>> 
>>> IF50_tree = adaptor.create(IF50);
>>> 
>>> This would remove the warnings. It's not a big deal, but since ANTLR
>>> generates approximately 100 of these warnings (all caused by the same
>>> issue), it sometimes gets in the way me digging through and finding
>>> real problems.
>>> 
>>> Thoughts?
>>> 
>>> Stefik
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 


From stefika at gmail.com  Sun May 23 18:47:44 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Sun, 23 May 2010 20:47:44 -0500
Subject: [antlr-interest] Removing unnecessary casts
In-Reply-To: <4000958B-A70C-4F16-9015-0C66FC8B6AD8@cs.usfca.edu>
References: <AANLkTimnVrD-80Q01CNqoa0tnb5-D6B8KSy1318NH0cP@mail.gmail.com>
	<DFC7B596-749E-4D9B-80EC-6A181DDB3718@cs.usfca.edu>
	<AANLkTikSWVF8UreISdJh_vZKyCImaJ0nv3TU63z9BKzF@mail.gmail.com>
	<4000958B-A70C-4F16-9015-0C66FC8B6AD8@cs.usfca.edu>
Message-ID: <AANLkTimxk46QWj1iysfH60AuVkFSp8W-4meOYvqIDayo@mail.gmail.com>

I see. So, I changed to this:

options {
	output=AST;
	ASTLabelType = CommonTree;
}

if I just want the default Node (I don't need any special processing).
I went through the generated code and think I see what's going on.
Looks like it removed the warnings, and nothing seemed to explode in
the compiler, so I'll chalk that up to a win.

Thanks Terrence!

Stefik

On Sun, May 23, 2010 at 7:29 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> yup. set option ASTLabelType
> Ter
> On May 23, 2010, at 5:25 PM, Andreas Stefik wrote:
>
>> The only option I have set is:
>>
>> options {
>> ? ? ? output=AST;
>> }
>>
>>> From your question, I'm assuming I'm doing something wrong here?
>>
>> Stefik
>>
>>
>> On Sun, May 23, 2010 at 7:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> have you set ASTLabelType?
>>> Ter
>>> On May 23, 2010, at 1:21 PM, Andreas Stefik wrote:
>>>
>>>> Hi folks,
>>>>
>>>> I'm going through my compiler finally removing some warnings and other
>>>> minor issues, as we bug fix and generally get ready for release. I was
>>>> wondering, when ANTLR generates code (Java target), it generates a
>>>> great of things "like" the following:
>>>>
>>>> Object IF50_tree=null;
>>>>
>>>> IF50_tree = (Object)adaptor.create(IF50);
>>>>
>>>>
>>>> Now, since IF50_tree is defined as an object, the second statement's
>>>> cast to type Object is redundant, which then throws a warning in the
>>>> compiler output. Is there any way to turn off the duplicate cast,
>>>> thereby making ANTLR generate, instead of the above, the following:
>>>>
>>>> IF50_tree = adaptor.create(IF50);
>>>>
>>>> This would remove the warnings. It's not a big deal, but since ANTLR
>>>> generates approximately 100 of these warnings (all caused by the same
>>>> issue), it sometimes gets in the way me digging through and finding
>>>> real problems.
>>>>
>>>> Thoughts?
>>>>
>>>> Stefik
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>
>

From Gogi66 at yandex.ru  Mon May 24 01:44:36 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Mon, 24 May 2010 12:44:36 +0400
Subject: [antlr-interest] Please, help to write a tree walker
Message-ID: <310511274690676@web80.yandex.ru>

Hi, can you help me to write Tree grammar.
ClassCastException is thrown while my Test runs.
Here is the code of Combined grammar and Tree grammar that doesn't work.

Combined grammar:
--------------------------------------------------------------------------------------------------------------------------------
grammar MetaDataExtractor;

options {
  language = Java;
  output = AST;
  ASTLabelType = CommonTree;
}

tokens {
  TOKEN;
  VAR;
  CR;
  SAVE;
  NEWLINE;
  LIST;
}


/* PARSER RULES */

template
	:	operator*
		list
		operator*
		EOF!
	;

list
	:	l='[#list]'
			operator*
			save
		'[/#list]'
		-> ^(LIST[$l, "LIST"] operator* save)
	;

operator
	:	token
	|	variable
	|	cr
	;

token
	:	(	t=WORD
		|	t=NUMBER
		|	t=ID
		|	t=SYMBOL
		|	t=STRING_LITERAL
		) -> ^(TOKEN $t)
	;

variable
	:	VARIABLE -> ^(VAR VARIABLE)
	;

cr
	:	'[#cr/]' -> ^(CR NEWLINE)
	;

save
	:	'[#save'
			'filename=' fname=STRING_LITERAL
			'template=' tpath=STRING_LITERAL
		'/]'
		-> ^(SAVE $fname $tpath)
	;



/* LEXER RULES*/

fragment LETTER : ('a'..'z' | 'A'..'Z') ;

fragment DIGIT : '0'..'9' ;

NUMBER : DIGIT+ ;

WORD : LETTER+ ;

ID : LETTER (LETTER | DIGIT)+ ;

SYMBOL : '!' | '#'..'/' | ':'..'@' | '['..'`' | '{'..'~' ;	// without quote
//SYMBOL : '!'..'/' | ':'..'@' | '['..'`' | '{'..'~' ;		// with quote

VARIABLE : '${' WORD '}' ;

WS : (' ' | '\t' | '\n' | '\r' | '\f')+ {$channel = HIDDEN;} ;

MULTILINE_COMMENT : '[#--' .* '--]' {$channel = HIDDEN;} ;

STRING_LITERAL
	:	'"'
		{ StringBuilder b = new StringBuilder(); }
		(	c=~('"' | '\r' | '\n'/* | VARIABLE*/)	{ b.appendCodePoint(c); }
		)*
		'"'
		{ "\"" +setText(b.toString()) + "\""; }
	;

--------------------------------------------------------------------------------------------------------------------------------
tree grammar MetaDataExtractorWalker;

options {
  language = Java;
  tokenVocab = MetaDataExtractor;
  ASTLabelType = CommonTree;
}


// COPIED FROM PARSER
template
	:	operator*
		list
		operator*

	;

list
	:	^(LIST operator* save)
	;

operator
	:	token
	|	variable
	|	cr
	;

token
	:	^(TOKEN WORD)
	|	^(TOKEN NUMBER)
	|	^(TOKEN ID)
	|	^(TOKEN SYMBOL)
	|	^(TOKEN STRING_LITERAL)
	;

variable
	:	(VAR VARIABLE)
	;

cr
	:	^(CR NEWLINE)
	;

save
	:	^(SAVE STRING_LITERAL STRING_LITERAL)
	;

And here is TreeParser grammar:
--------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------

From Gogi66 at yandex.ru  Mon May 24 01:55:51 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Mon, 24 May 2010 12:55:51 +0400
Subject: [antlr-interest] Please, help to write a tree walker
Message-ID: <316621274691352@web111.yandex.ru>

I forgot to put sample input 
here it is:


--------------------------------------------------------------------------------------------------------------------------------
 , \ some text
[#list]
${first} < ${edition} , ${channel}
[#save filename="fname" template="templ" /]
[/#list]
 , \ some text
--------------------------------------------------------------------------------------------------------------------------------
-------- ???????????? ????????? --------
24.05.10, 12:44, "?????" <Gogi66 at yandex.ru>:

Hi, can you help me to write Tree grammar.
ClassCastException is thrown while my Test runs.
Here is the code of Combined grammar and Tree grammar that doesn't work.

Combined grammar:
--------------------------------------------------------------------------------------------------------------------------------
grammar MetaDataExtractor;

options {
  language = Java;
  output = AST;
  ASTLabelType = CommonTree;
}

tokens {
  TOKEN;
  VAR;
  CR;
  SAVE;
  NEWLINE;
  LIST;
}


/* PARSER RULES */

template
	:	operator*
		list
		operator*
		EOF!
	;

list
	:	l='[#list]'
			operator*
			save
		'[/#list]'
		-> ^(LIST[$l, "LIST"] operator* save)
	;

operator
	:	token
	|	variable
	|	cr
	;

token
	:	(	t=WORD
		|	t=NUMBER
		|	t=ID
		|	t=SYMBOL
		|	t=STRING_LITERAL
		) -> ^(TOKEN $t)
	;

variable
	:	VARIABLE -> ^(VAR VARIABLE)
	;

cr
	:	'[#cr/]' -> ^(CR NEWLINE)
	;

save
	:	'[#save'
			'filename=' fname=STRING_LITERAL
			'template=' tpath=STRING_LITERAL
		'/]'
		-> ^(SAVE $fname $tpath)
	;



/* LEXER RULES*/

fragment LETTER : ('a'..'z' | 'A'..'Z') ;

fragment DIGIT : '0'..'9' ;

NUMBER : DIGIT+ ;

WORD : LETTER+ ;

ID : LETTER (LETTER | DIGIT)+ ;

SYMBOL : '!' | '#'..'/' | ':'..'@' | '['..'`' | '{'..'~' ;	// without quote
//SYMBOL : '!'..'/' | ':'..'@' | '['..'`' | '{'..'~' ;		// with quote

VARIABLE : '${' WORD '}' ;

WS : (' ' | '\t' | '\n' | '\r' | '\f')+ {$channel = HIDDEN;} ;

MULTILINE_COMMENT : '[#--' .* '--]' {$channel = HIDDEN;} ;

STRING_LITERAL
	:	'"'
		{ StringBuilder b = new StringBuilder(); }
		(	c=~('"' | '\r' | '\n'/* | VARIABLE*/)	{ b.appendCodePoint(c); }
		)*
		'"'
		{ "\"" +setText(b.toString()) + "\""; }
	;

--------------------------------------------------------------------------------------------------------------------------------
tree grammar MetaDataExtractorWalker;

options {
  language = Java;
  tokenVocab = MetaDataExtractor;
  ASTLabelType = CommonTree;
}


// COPIED FROM PARSER
template
	:	operator*
		list
		operator*

	;

list
	:	^(LIST operator* save)
	;

operator
	:	token
	|	variable
	|	cr
	;

token
	:	^(TOKEN WORD)
	|	^(TOKEN NUMBER)
	|	^(TOKEN ID)
	|	^(TOKEN SYMBOL)
	|	^(TOKEN STRING_LITERAL)
	;

variable
	:	(VAR VARIABLE)
	;

cr
	:	^(CR NEWLINE)
	;

save
	:	^(SAVE STRING_LITERAL STRING_LITERAL)
	;

And here is TreeParser grammar:
--------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------
-------- ?????????? ????????????? ????????? --------


-- 
??????.?????. ?????? ????. ????? - ???. http://mail.yandex.ru/nospam/sign

From jbb at acm.org  Mon May 24 06:26:06 2010
From: jbb at acm.org (John B. Brodie)
Date: Mon, 24 May 2010 09:26:06 -0400
Subject: [antlr-interest] Please, help to write a tree walker
In-Reply-To: <316621274691352@web111.yandex.ru>
References: <316621274691352@web111.yandex.ru>
Message-ID: <1274707566.27517.3.camel@gecko.home.org>

Greetings!

I am unable to compile your combined grammar.

On Mon, 2010-05-24 at 12:55 +0400, ????? wrote:
> STRING_LITERAL
>         :       '"'
>                 { StringBuilder b = new StringBuilder(); }
>                 (       c=~('"' | '\r' | '\n'/* | VARIABLE*/)
> { b.appendCodePoint(c); }
>                 )*
>                 '"'
>                 { "\"" +setText(b.toString()) + "\""; }
.................^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ; 

not a valid Java statement.....



From rdadolf at gmail.com  Mon May 24 06:29:45 2010
From: rdadolf at gmail.com (Bob Adolf)
Date: Mon, 24 May 2010 06:29:45 -0700
Subject: [antlr-interest] Custom return attributes ignored when matching a
	list
Message-ID: <1842087F-1C86-47E3-A21E-6EF3C12D6C63@gmail.com>

Hello all,

I seem to be having trouble finding the kosher way for returning  
custom attributes to a rule that matches a list. Easiest to explain  
with an example (in Python, but the behavior exists in java as well):

grammar demo;
options {
   language=Python;
   output=AST;
   ASTLabelType = CommonTree;
}

NUM: ('0'..'9')+ ;
CHAR: ('a'..'z'|'A'..'Z')+ ;
WS: (' '|'\t'|'\r'|'\n')+ { $channel=HIDDEN; } ;

broken_program: (plist+=pair)+ {
   for p in $plist:
     print p.custom
} ;

working_program: pair (working_program)? {
   print $pair.custom
} ;

pair returns [custom]:
   '(' CHAR ',' NUM ')' {
   $custom = [ $CHAR.text, $NUM.text ];
} ;

The driver program is trivial, and the input files look like pairs of  
letters and numbers: "(abc,123) (def,456)" etc. Invoking the  
working_program rule from a driver program works nicely. I get a list  
of all the pairs. Invoking the broken_program rule from a driver  
causes an AttributeError when the top-level rule tries to print  
p.custom. At first, I assumed that I had misunderstood the way  
returned attributes work. After looking at the generated code,  
however, I'm leaning towards a different conclusion.

In the working_program rule, the attribute reference $pair.custom is  
accessing the custom element of pair_return class, and it works. In  
the broken_program rule, the attribute reference p.custom is accessing  
a CommonTree object. The error message "AttributeError: 'CommonTree'  
object has no attribute 'custom'" supports this, and the generated  
code bears it out. The "+=" operator generates the code  
"list_plist.append(plist.tree)" in Python and  
"list_plist.add(plist.getTree());" in Java.

The behavior of single-matching and list-matching seems needlessly  
inconsistent, which makes me think that I'm just missing something  
about the way I'm supposed to write this. Unfortunately, my searches  
on both markmail and in the downloaded samples have turned up no  
grammars that use both return-attributes and list matching in tandem.

Someone out there know the right way to write this idiom?

Thanks in advance!

   -Bob



From singh.nishanth5 at gmail.com  Mon May 24 09:39:10 2010
From: singh.nishanth5 at gmail.com (Nishanth singh)
Date: Mon, 24 May 2010 12:39:10 -0400
Subject: [antlr-interest] bug in antlr 3.0
Message-ID: <AANLkTikZn95uRpLWw0jVf4bDM6FAn5HQDudpMeQoItWK@mail.gmail.com>

Hello,

I was trying to parse the following string "220v/60/1-ph, 2.8kw, 12.7
amps, NEMA 6-20P, 550 slices or bun halves per hour (nc) ". It is
succesffully parsing. But Instead of 550 if it is an 850 or instead of
12.7 if it is an 8.7 then it is showing some error. Except the number
8 all the other numbers are working fine. Please give me your
suggestions.

                                Thanking you,

                                                                  Regards,
                                                                  Nishanth.

From Roger.Kaiser at alico.com  Mon May 24 10:27:04 2010
From: Roger.Kaiser at alico.com (Kaiser, Roger)
Date: Mon, 24 May 2010 13:27:04 -0400
Subject: [antlr-interest] bug in antlr 3.0
Message-ID: <0B46AE568243064E945253CE3FAD07A5129113C0@xwilmbx07.aig.com>

You don't normally see that kind of behavior in a major appliance.

Could you post your grammar?

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Nishanth singh
Sent: Monday, May 24, 2010 12:39 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] bug in antlr 3.0

Hello,

I was trying to parse the following string "220v/60/1-ph, 2.8kw, 12.7
amps, NEMA 6-20P, 550 slices or bun halves per hour (nc) ". It is
succesffully parsing. But Instead of 550 if it is an 850 or instead of
12.7 if it is an 8.7 then it is showing some error. Except the number
8 all the other numbers are working fine. Please give me your
suggestions.

                                Thanking you,

                                                                  Regards,
                                                                  Nishanth.

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From Sheila.Morrissey at ithaka.org  Mon May 24 11:02:26 2010
From: Sheila.Morrissey at ithaka.org (Sheila M. Morrissey)
Date: Mon, 24 May 2010 14:02:26 -0400
Subject: [antlr-interest] unable to run or debug grammar in antlrworks
 1.4 on Windows XP
Message-ID: <9FAE20247CC9EB41A6863490C392F7180202C3C66E@pr1vmexch02.office.share.org>

I am having the same problem with the following configuration:
ANTLR Version: 3.2 Sep 23, 2009 12:02:23
ANTLRWorks (GUI) Version: 1.4
StringTemplate Version: 3.2.1
Operating System: Windows XP
Java Version: 1.6.0_17-b04

If I try to generate code, I get the following error message:
[13:50:30] error(1):  cannot write file Expr.tokens: java.io.FileNotFoundException: C:\C:\ExprParser.java (The filename, directory name, or volume label syntax is incorrect)
java.io.FileOutputStream.open(Native Method)
java.io.FileOutputStream.<init>(FileOutputStream.java:179)
java.io.FileOutputStream.<init>(FileOutputStream.java:131)
java.io.FileWriter.<init>(FileWriter.java:73)
org.antlr.Tool.getOutputFile(Tool.java:854)
org.antlr.codegen.CodeGenerator.write(CodeGenerator.java:1277)
org.antlr.codegen.Target.genRecognizerFile(Target.java:94)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:466)
org.antlr.Tool.generateRecognizer(Tool.java:641)
org.antlr.Tool.process(Tool.java:454)
org.antlr.works.generate.CodeGenerate.generate(CodeGenerate.java:104)
org.antlr.works.generate.CodeGenerate.run(CodeGenerate.java:185)
java.lang.Thread.run(Thread.java:619)
[13:50:30] error(1):  cannot write file Expr__.g: java.io.FileNotFoundException: C:\C:\Expr__.g (The filename, directory name, or volume label syntax is incorrect)
java.io.FileOutputStream.open(Native Method)
java.io.FileOutputStream.<init>(FileOutputStream.java:179)
java.io.FileOutputStream.<init>(FileOutputStream.java:131)
java.io.FileWriter.<init>(FileWriter.java:73)
org.antlr.Tool.getOutputFile(Tool.java:854)
org.antlr.Tool.process(Tool.java:480)
org.antlr.works.generate.CodeGenerate.generate(CodeGenerate.java:104)
org.antlr.works.generate.CodeGenerate.run(CodeGenerate.java:185)
java.lang.Thread.run(Thread.java:619)

No setting in preferences menu (or regedit hacks) seems to stop antlworks from injecting that extra c:\ in the output directory path.



Sheila M. Morrissey
Senior Research Developer
ITHAKA
609-986-2221
sheila.morrissey at ithaka.org<mailto:john.meyer at ithaka.org>

ITHAKA (www.ithaka.org<http://www.ithaka.org>) is a not-for-profit organization that helps the academic community use digital technologies to preserve the scholarly record and to advance research and teaching in sustainable ways.  We provide innovative services that benefit higher education, including Ithaka S+R, JSTOR, and Portico.


From j at junkwallah.org  Mon May 24 15:21:48 2010
From: j at junkwallah.org (Junkman)
Date: Mon, 24 May 2010 15:21:48 -0700
Subject: [antlr-interest] Dynamic scope for lexer rule
In-Reply-To: <4BF878B4.5070908@junkwallah.org>
References: <4BF878B4.5070908@junkwallah.org>
Message-ID: <4BFAFBFC.7070705@junkwallah.org>

Greetings,

Let me raise the question again.  Sorry that this is becoming something
of pattern for me.

Adding a dynamically scoped attribute to a lexer rule seems to generate
the error message (shown at the bottom as part of my previous post on
this subject) when generating recognizers.

The grammar is as follows:
---------------------

grammar Junkscript;



NEWLINE	
@init { $channel=HIDDEN; }
	:	'\n'
	;
	

COMMENT
/*
scope {
	String dynamic;
	}
@init {
	$COMMENT::dynamic = null;
	}
	*/
	:	'#' ( options {greedy=false;} : (~ NEWLINE)* ) ;


stmt	:	
	( . )+
	;
	


------------------------

The simple grammar works fine, but with the "scope" section (along with
init action) under COMMENT uncommented, Antlr generates the error.

Are dynamically scoped attributes allowed for lexer rules?   If so, what
is the error in the grammar above?

Thanks for any assistance.

Junkman

Junkman wrote:
> Greetings,
> 
> I've added an attribute with dynamic scoping to a lexer rule, and when
> generating code, I'm encountering an "internal error".  Listed below is
> partial call stack reported:
> 
> error(10): internal error: Junkscript.g : java.lang.NullPointerException
> 	org.antlr.grammar.v2.DefineGrammarItemsWalker.ruleScopeSpec(DefineGrammarItemsWalker.java:1050)
> 	at
> org.antlr.grammar.v2.DefineGrammarItemsWalker.rule(DefineGrammarItemsWalker.java:891)
> 	at
> org.antlr.grammar.v2.DefineGrammarItemsWalker.rules(DefineGrammarItemsWalker.java:576)
> 	at
> org.antlr.grammar.v2.DefineGrammarItemsWalker.grammarSpec(DefineGrammarItemsWalker.java:361)
> 	at
> org.antlr.grammar.v2.DefineGrammarItemsWalker.grammar(DefineGrammarItemsWalker.java:193)
> 	at org.antlr.tool.Grammar.defineGrammarSymbols(Grammar.java:702)
> 	at
> org.antlr.tool.CompositeGrammar.defineGrammarSymbols(CompositeGrammar.java:351)
> ...
> 
> 
> Is dynamic scoping allowed for lexer rule attributes?
> 
> Thanks for any info.
> 
> J
> 
> 
> 
> 
> 


From jimi at temporal-wave.com  Mon May 24 16:05:39 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 24 May 2010 16:05:39 -0700
Subject: [antlr-interest] Dynamic scope for lexer rule
In-Reply-To: <4BFAFBFC.7070705@junkwallah.org>
Message-ID: <95e0b481e4f125469fd65250bdbba41a@temporal-wave.com>

Scopes are not supported for lexer rules, you need to implement your own things to do this, but try to leave any kind of context out of the lexer if you can. You want to push such things as high up the tool chain as you can. IT isn't always possible though.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Junkman
> Sent: Monday, May 24, 2010 3:22 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Dynamic scope for lexer rule
> 
> Greetings,
> 
> Let me raise the question again.  Sorry that this is becoming something
> of pattern for me.
> 
> Adding a dynamically scoped attribute to a lexer rule seems to generate
> the error message (shown at the bottom as part of my previous post on
> this subject) when generating recognizers.
> 
> The grammar is as follows:
> ---------------------
> 
> grammar Junkscript;
> 
> 
> 
> NEWLINE
> @init { $channel=HIDDEN; }
> 	:	'\n'
> 	;
> 
> 
> COMMENT
> /*
> scope {
> 	String dynamic;
> 	}
> @init {
> 	$COMMENT::dynamic = null;
> 	}
> 	*/
> 	:	'#' ( options {greedy=false;} : (~ NEWLINE)* ) ;
> 
> 
> stmt	:
> 	( . )+
> 	;
> 
> 
> 
> ------------------------
> 
> The simple grammar works fine, but with the "scope" section (along with
> init action) under COMMENT uncommented, Antlr generates the error.
> 
> Are dynamically scoped attributes allowed for lexer rules?   If so,
> what
> is the error in the grammar above?
> 
> Thanks for any assistance.
> 
> Junkman
> 
> Junkman wrote:
> > Greetings,
> >
> > I've added an attribute with dynamic scoping to a lexer rule, and
> when
> > generating code, I'm encountering an "internal error".  Listed below
> is
> > partial call stack reported:
> >
> > error(10): internal error: Junkscript.g :
> java.lang.NullPointerException
> >
> 	org.antlr.grammar.v2.DefineGrammarItemsWalker.ruleScopeSpec(Defin
> eGrammarItemsWalker.java:1050)
> > 	at
> >
> org.antlr.grammar.v2.DefineGrammarItemsWalker.rule(DefineGrammarItemsWa
> lker.java:891)
> > 	at
> >
> org.antlr.grammar.v2.DefineGrammarItemsWalker.rules(DefineGrammarItemsW
> alker.java:576)
> > 	at
> >
> org.antlr.grammar.v2.DefineGrammarItemsWalker.grammarSpec(DefineGrammar
> ItemsWalker.java:361)
> > 	at
> >
> org.antlr.grammar.v2.DefineGrammarItemsWalker.grammar(DefineGrammarItem
> sWalker.java:193)
> > 	at org.antlr.tool.Grammar.defineGrammarSymbols(Grammar.java:702)
> > 	at
> >
> org.antlr.tool.CompositeGrammar.defineGrammarSymbols(CompositeGrammar.j
> ava:351)
> > ...
> >
> >
> > Is dynamic scoping allowed for lexer rule attributes?
> >
> > Thanks for any info.
> >
> > J
> >
> >
> >
> >
> >
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From Gogi66 at yandex.ru  Mon May 24 23:44:45 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Tue, 25 May 2010 10:44:45 +0400
Subject: [antlr-interest] ClassCastException in TreeParser grammar
Message-ID: <520011274769885@web96.yandex.ru>

Hi, can you help me to write Tree grammar.
ClassCastException is thrown while my Test runs.
Here is the code of Combined grammar and Tree grammar that doesn't work.

<b>Combined grammar:</b>
<font size=2>
<pre>
--------------------------------------------------------------------------------------------------------------------------------
grammar MetaDataExtractor;

options {
  language = Java;
  output = AST;
  ASTLabelType = CommonTree;
}

tokens {
  TOKEN;
  VAR;
  CR;
  SAVE;
  NEWLINE;
  LIST;
}


/* PARSER RULES */

template
	:	operator*
		list
		operator*
		EOF!
	;

list
	:	l='[#list]'
			operator*
			save
		'[/#list]'
		-> ^(LIST[$l, "LIST"] operator* save)
	;

operator
	:	token
	|	variable
	|	cr
	;

token
	:	(	t=WORD
		|	t=NUMBER
		|	t=ID
		|	t=SYMBOL
		|	t=STRING_LITERAL
		) -> ^(TOKEN $t)
	;

variable
	:	VARIABLE -> ^(VAR VARIABLE)
	;

cr
	:	'[#cr/]' -> ^(CR NEWLINE)
	;

save
	:	'[#save'
			'filename=' fname=STRING_LITERAL
			'template=' tpath=STRING_LITERAL
		'/]'
		-> ^(SAVE $fname $tpath)
	;



/* LEXER RULES*/

fragment LETTER : ('a'..'z' | 'A'..'Z') ;

fragment DIGIT : '0'..'9' ;

NUMBER : DIGIT+ ;

WORD : LETTER+ ;

ID : LETTER (LETTER | DIGIT)+ ;

SYMBOL : '!' | '#'..'/' | ':'..'@' | '['..'`' | '{'..'~' ;	// without quote
//SYMBOL : '!'..'/' | ':'..'@' | '['..'`' | '{'..'~' ;		// with quote

VARIABLE : '${' WORD '}' ;

WS : (' ' | '\t' | '\n' | '\r' | '\f')+ {$channel = HIDDEN;} ;

MULTILINE_COMMENT : '[#--' .* '--]' {$channel = HIDDEN;} ;

STRING_LITERAL
	:	'"'
		{ StringBuilder b = new StringBuilder(); }
		(	c=~('"' | '\r' | '\n'/* | VARIABLE*/)	{ b.appendCodePoint(c); }
		)*
		'"'
		{ "\"" +setText(b.toString()) + "\""; }
	;
</pre>
<font>

<b>And here is TreeParser grammar:</b>
--------------------------------------------------------------------------------------------------------------------------------
<font size=2>
<pre>
tree grammar MetaDataExtractorWalker;

options {
  language = Java;
  tokenVocab = MetaDataExtractor;
  ASTLabelType = CommonTree;
}


// COPIED FROM PARSER
template
	:	operator*
		list
		operator*

	;

list
	:	^(LIST operator* save)
	;

operator
	:	token
	|	variable
	|	cr
	;

token
	:	^(TOKEN WORD)
	|	^(TOKEN NUMBER)
	|	^(TOKEN ID)
	|	^(TOKEN SYMBOL)
	|	^(TOKEN STRING_LITERAL)
	;

variable
	:	(VAR VARIABLE)
	;

cr
	:	^(CR NEWLINE)
	;

save
	:	^(SAVE STRING_LITERAL STRING_LITERAL)
	;
</pre>
</font>


sample input 
here it is:
--------------------------------------------------------------------------------------------------------------------------------
 , \ some text
[#list]
${first} < ${edition} , ${channel}
[#save filename="fname" template="templ" /]
[/#list]
 , \ some text
--------------------------------------------------------------------------------------------------------------------------------

From jbb at acm.org  Tue May 25 06:27:20 2010
From: jbb at acm.org (John B. Brodie)
Date: Tue, 25 May 2010 09:27:20 -0400
Subject: [antlr-interest] ClassCastException in TreeParser grammar
In-Reply-To: <520011274769885@web96.yandex.ru>
References: <520011274769885@web96.yandex.ru>
Message-ID: <1274794040.23665.12.camel@gecko.home.org>

Hello :-

This grammar still has the same compilation problem as the one that you
posted yesterday..... did you change anything?

I fixed the STRING_LITERAL rule as you suggested in a private e-mail to
me (please keep all messages on this list).

I then did not get any ClassCastException. But got runtime complaints
from the tree walker that it got a VARIABLE token when expecting DOWN
(or maybe it was the other way around, can not remember)

Need to add a ^ to the VAR rule in the tree walker.

On Tue, 2010-05-25 at 10:44 +0400, ????? wrote:
> Hi, can you help me to write Tree grammar.
> ClassCastException is thrown while my Test runs.
> Here is the code of Combined grammar and Tree grammar that doesn't work.

.....snipped......
> 
> STRING_LITERAL
> 	:	'"'
> 		{ StringBuilder b = new StringBuilder(); }
> 		(	c=~('"' | '\r' | '\n'/* | VARIABLE*/)	{ b.appendCodePoint(c); }
> 		)*
> 		'"'
> 		{ "\"" +setText(b.toString()) + "\""; }
changed to { setText("\" + b.toString() + "\""); }

btw why do you use StringBuilder here? ANTLR will accumulate the token's
text for you, is it some unicode thing?


.....snipped.....
> variable
> 	:	(VAR VARIABLE)
> 	;

variable : ^(VAR VARIABLE) ;




perhaps there is some problem with your test rig?
(attached please find the Main.java that I used to run your example from
the command line without any problems after applying the 2 fixes
above...)


From j at junkwallah.org  Tue May 25 10:07:10 2010
From: j at junkwallah.org (Junkman)
Date: Tue, 25 May 2010 10:07:10 -0700
Subject: [antlr-interest] Dynamic scope for lexer rule
In-Reply-To: <95e0b481e4f125469fd65250bdbba41a@temporal-wave.com>
References: <95e0b481e4f125469fd65250bdbba41a@temporal-wave.com>
Message-ID: <4BFC03BE.9080008@junkwallah.org>

Thanks for the reply, Jim.  I understand the rationale for your suggestion.

Might this info be worth adding to the wiki?  It may be obvious to
seasoned hands, but difference in constraints between lexer and parser
rules would be helpful especially since both rule types share the same
basic syntax in Antlr.

Junkman

Jim Idle wrote:
> Scopes are not supported for lexer rules, you need to implement your own things to do this, but try to leave any kind of context out of the lexer if you can. You want to push such things as high up the tool chain as you can. IT isn't always possible though.
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Junkman
>> Sent: Monday, May 24, 2010 3:22 PM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Dynamic scope for lexer rule
>>
>> Greetings,
>>
>> Let me raise the question again.  Sorry that this is becoming something
>> of pattern for me.
>>
>> Adding a dynamically scoped attribute to a lexer rule seems to generate
>> the error message (shown at the bottom as part of my previous post on
>> this subject) when generating recognizers.
>>
>> The grammar is as follows:
>> ---------------------
>>
>> grammar Junkscript;
>>
>>
>>
>> NEWLINE
>> @init { $channel=HIDDEN; }
>> 	:	'\n'
>> 	;
>>
>>
>> COMMENT
>> /*
>> scope {
>> 	String dynamic;
>> 	}
>> @init {
>> 	$COMMENT::dynamic = null;
>> 	}
>> 	*/
>> 	:	'#' ( options {greedy=false;} : (~ NEWLINE)* ) ;
>>
>>
>> stmt	:
>> 	( . )+
>> 	;
>>
>>
>>
>> ------------------------
>>
>> The simple grammar works fine, but with the "scope" section (along with
>> init action) under COMMENT uncommented, Antlr generates the error.
>>
>> Are dynamically scoped attributes allowed for lexer rules?   If so,
>> what
>> is the error in the grammar above?
>>
>> Thanks for any assistance.
>>
>> Junkman
>>
>> Junkman wrote:
>>> Greetings,
>>>
>>> I've added an attribute with dynamic scoping to a lexer rule, and
>> when
>>> generating code, I'm encountering an "internal error".  Listed below
>> is
>>> partial call stack reported:
>>>
>>> error(10): internal error: Junkscript.g :
>> java.lang.NullPointerException
>> 	org.antlr.grammar.v2.DefineGrammarItemsWalker.ruleScopeSpec(Defin
>> eGrammarItemsWalker.java:1050)
>>> 	at
>>>
>> org.antlr.grammar.v2.DefineGrammarItemsWalker.rule(DefineGrammarItemsWa
>> lker.java:891)
>>> 	at
>>>
>> org.antlr.grammar.v2.DefineGrammarItemsWalker.rules(DefineGrammarItemsW
>> alker.java:576)
>>> 	at
>>>
>> org.antlr.grammar.v2.DefineGrammarItemsWalker.grammarSpec(DefineGrammar
>> ItemsWalker.java:361)
>>> 	at
>>>
>> org.antlr.grammar.v2.DefineGrammarItemsWalker.grammar(DefineGrammarItem
>> sWalker.java:193)
>>> 	at org.antlr.tool.Grammar.defineGrammarSymbols(Grammar.java:702)
>>> 	at
>>>
>> org.antlr.tool.CompositeGrammar.defineGrammarSymbols(CompositeGrammar.j
>> ava:351)
>>> ...
>>>
>>>
>>> Is dynamic scoping allowed for lexer rule attributes?
>>>
>>> Thanks for any info.
>>>
>>> J
>>>
>>>
>>>
>>>
>>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From aploese at gmx.de  Tue May 25 11:20:09 2010
From: aploese at gmx.de (Arne Ploese)
Date: Tue, 25 May 2010 20:20:09 +0200
Subject: [antlr-interest] Countinous parsing of inputstream (i.e. from
	Serial port)
Message-ID: <1274811609.4835.0.camel@knuffelchen>

Hi,
        
        I want to parse a stream from a serial port. There are packages
        like
        "T12346679FF22\r\n" which com in all 2 minutes. I want to
        lex/parse them
        at the moment they arrive.
        
        Using 
        
          ANTLRInputStream input = new ANTLRInputStream(is); 
          FhzLexer lexer = new FhzLexer(input);
          CommonTokenStream tokens = new CommonTokenStream(lexer);
          FhzParser parser = new FhzParser(tokens);
                    
        
        will give me the results only when I close the InputStream is.
        
        Any Idea how to archive this in "realtime".
        
        Arne Pl?se



From sameh.wz at gmail.com  Tue May 25 12:12:36 2010
From: sameh.wz at gmail.com (Sameh W. Zaky)
Date: Tue, 25 May 2010 21:12:36 +0200
Subject: [antlr-interest] What's wrong with org.antlr.Tool.main(String[]
	args)?
Message-ID: <AANLkTik8ufuoWgNpSEr1VgwmuWUrcttHhD9_gs58CHhQ@mail.gmail.com>

Hi all,

Using ANTLR v3.2, in the runtime I generate the lexer and parser Java files
using this code:
org.antlr.Tool.main(new String[]{projectPath+"GrammarFile.g"});

The problem is that, after this line of code, no other code gets executed,
for example, in this piece of code:
System.out.println("Before");
org.antlr.Tool.main(new String[]{projectPath+"GrammarFile.g"});
System.out.println("After");

Output: "Before" will be printed, the lexer and parser will be generated,
BUT "After" will NOT be printed..
Using Java Graphical User Interface, whenever I call this line of code in my
application, it indeed creates the lexer and parser but then the application
freezes..

Any idea why this happens? Or how I can avoid it?

-- 
Sameh W. Zaky

From jbb at acm.org  Tue May 25 12:54:23 2010
From: jbb at acm.org (John B. Brodie)
Date: Tue, 25 May 2010 15:54:23 -0400
Subject: [antlr-interest] What's wrong with org.antlr.Tool.main(String[]
 args)?
In-Reply-To: <AANLkTik8ufuoWgNpSEr1VgwmuWUrcttHhD9_gs58CHhQ@mail.gmail.com>
References: <AANLkTik8ufuoWgNpSEr1VgwmuWUrcttHhD9_gs58CHhQ@mail.gmail.com>
Message-ID: <1274817263.32057.3.camel@gecko.home.org>

On Tue, 2010-05-25 at 21:12 +0200, Sameh W. Zaky wrote:
> Hi all,
> 
> Using ANTLR v3.2, in the runtime I generate the lexer and parser Java files
> using this code:
> org.antlr.Tool.main(new String[]{projectPath+"GrammarFile.g"});
> 
> The problem is that, after this line of code, no other code gets executed,
> for example, in this piece of code:
> System.out.println("Before");
> org.antlr.Tool.main(new String[]{projectPath+"GrammarFile.g"});
> System.out.println("After");
> 
> Output: "Before" will be printed, the lexer and parser will be generated,
> BUT "After" will NOT be printed..
> Using Java Graphical User Interface, whenever I call this line of code in my
> application, it indeed creates the lexer and parser but then the application
> freezes..
> 
> Any idea why this happens? Or how I can avoid it?
> 

the main may call System.exit() ....

have you looked at how ANTLRWorks does this?

a *VERY* quick scan of the github sources gives us the file

main/src/org/antlr/works/generate/CodeGenerate.java

which contains the method generate() which seems to do the invocation of
the Tool.

as I say I did not spend any time trying to understand what is really
happening in that method so it may be a complete waste of time....

hope this helps
   -jbb



From rthrippl at progress.com  Tue May 25 13:01:36 2010
From: rthrippl at progress.com (Richard Thrippleton)
Date: Tue, 25 May 2010 16:01:36 -0400
Subject: [antlr-interest] Inexplicable RewriteEmptyStreamException in parser
	grammar
Message-ID: <3BF43CA81695C2428B61C224ABB71212FD3FF1B7@PSCMAIL03.bedford.progress.com>

I'm using the Java target with ANTLR 3.2, and having a problem in a rule in my parser grammar that looks like this:

"variableInit [ String name ]
  : ASSIGNMENT id=initializer
    -> ^(ASSIGNMENT IDENTIFIER[$ASSIGNMENT, $name] initializer)"

In a particular case where the 'initializer' rule fails to match and issues a syntax error, I'm getting a RewriteEmptyStreamException that cites "rule initializer" popping up from a line that looks like this:

"// 1151:5: -> ^( ASSIGNMENT IDENTIFIER[$ASSIGNMENT, $name] initializer )
{
  {
    CommonTree root_1 = (CommonTree)adaptor.nil();
    root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGNMENT.nextNode(), root_1);
    adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENTIFIER, ASSIGNMENT179, name));
    adaptor.addChild(root_1, stream_initializer.nextTree());           <-------------------- ****This line****
    adaptor.addChild(root_0, root_1);
  }
}"

In terms of error handling we're just using the default recovery (not overriding it with 'catch'/'rulecatch'). We've overridden reportError to pretty-print the RecognitionExceptions, but that's about it. Should I be needing to do anything special to cope with parsing failures of subrules, or should the default be sufficient to prevent these exceptions? Otherwise, where is the problem likely to lie - a defect elsewhere in my grammar, or in ANTLR?

Cheers,
Richard

From nourchn at gmail.com  Wed May 26 03:18:50 2010
From: nourchn at gmail.com (Nourchn Nor)
Date: Wed, 26 May 2010 12:18:50 +0200
Subject: [antlr-interest] Error in AST
Message-ID: <AANLkTikH2RtXum1BP8f5m0GdnKVMYaXxysCsI5Ai9jAM@mail.gmail.com>

I wrote one grammar on AntlrWorks but one error is shown when I add same
statement,
Here is the error: "error(211): Essai.g:87:16: [fatal] rule predicate has
non-LL(*) decision due to recursive rule invocations reachable from alts
5,6.  Resolve by left-factoring or using syntactic predicates or using
backtrack=true option"
And if I have correct by backtrack=true, the AST of every rule in the syntax
Diagram of Antlworks is consisted by { synpred1_Essai }? With Essai is the
name of grammar.
This is an error this  { synpred1_Essai }?  ? what can I  have to correct
him?
please help me

From aph at redhat.com  Wed May 26 03:21:46 2010
From: aph at redhat.com (Andrew Haley)
Date: Wed, 26 May 2010 11:21:46 +0100
Subject: [antlr-interest] Error in AST
In-Reply-To: <AANLkTikH2RtXum1BP8f5m0GdnKVMYaXxysCsI5Ai9jAM@mail.gmail.com>
References: <AANLkTikH2RtXum1BP8f5m0GdnKVMYaXxysCsI5Ai9jAM@mail.gmail.com>
Message-ID: <4BFCF63A.1070305@redhat.com>

On 05/26/2010 11:18 AM, Nourchn Nor wrote:
> I wrote one grammar on AntlrWorks but one error is shown when I add same
> statement,
> Here is the error: "error(211): Essai.g:87:16: [fatal] rule predicate has
> non-LL(*) decision due to recursive rule invocations reachable from alts
> 5,6.  Resolve by left-factoring or using syntactic predicates or using
> backtrack=true option"
> And if I have correct by backtrack=true, the AST of every rule in the syntax
> Diagram of Antlworks is consisted by { synpred1_Essai }? With Essai is the
> name of grammar.
> This is an error this  { synpred1_Essai }?  ? what can I  have to correct
> him?
> please help me

Have you read the book?  It explains LL(*) in detail, and what you have to
do to deal with things like this.

http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference

Andrew.

From george.soom at siria.cc  Wed May 26 04:01:18 2010
From: george.soom at siria.cc (George Soom)
Date: Wed, 26 May 2010 11:01:18 GMT
Subject: [antlr-interest] parsing rules
Message-ID: <20100526110118.23812.qmail@info9.gawab.com>

Hi,

I have to rewrite several files with mathematical text in them. Text
substitutions are really simple (e.g. 'a=4' -> 'a:=4;' and similar).
Input is in form:
----
a=4
b=3
draw(a)
draw(b)
----

Needed output
-----
a:=4;
b:=3;
draw(a, "constant arguments")
draw(b, "constant arguments")
----

The best option I have found is to use StringTemplate. At chapter 9.3 in
book 'The Definitive ANTLRD reference' has a suitable example.
To explain my probelm I will add lines from two examples:
Grammar:

grammar T;
options {output=template;}
s : ID '=' INT ';' -> assign(x={$ID.text},y={$INT.text}) ;
---lexer part not pasted---

Test.java
--header, input, parser-lexer generation etc. not pasted---
parser.setTemplateLib(templates); // give parser templates
TParser.s_return r = parser.s();      // parse rule s
StringTemplate output = r.getTemplate();
System.out.println(output.toString());// emit translation

This will work fine. But if I change rule s to 
s: assign+;
assign: ID '=' INT ';' -> assign(x={$ID.text},y={$INT.text}) ;

I have to call parse.assign() to get correct results. How can i still parse
starting from rule 's' and get desired output?

George


From KLPauba at west.com  Wed May 26 07:39:07 2010
From: KLPauba at west.com (Pauba, Kevin L)
Date: Wed, 26 May 2010 09:39:07 -0500
Subject: [antlr-interest] Using input.getSourceName() and INCLUDE processing
In-Reply-To: <4BF605B8.6050301@gmail.com>
References: <4BF605B8.6050301@gmail.com>
Message-ID: <226316B3E1F749498E28ACA66321D5BA027FFD54A2@oma00cexmbx03.corp.westworlds.com>

I have a JAVA language rewrite translator that adds some more modern control constructs to an existing DSL.  ANTLR has been invaluable.

I've provided "include" file support using the methods outlined in http://www.antlr.org/wiki/pages/viewpage.action?pageId=557057 but I would like to use the file name in the string template that is used to generate code:

        |       kw=KW_while {
                            whileLabelStack.push(new Label("while"));
                }
                l=string cond=string r=string
                (s+=statement)+
                KW_endwhile
                -> template(lhs={$l.text},
                            operator={$cond.text.replaceAll("<", "\\<")},
                            rhs={$r.text},
                            s={$s},
                            file={input.getSourceName()},
                            line={$kw.line},
                            label={whileLabelStack.pop().getLabel()})
<<
; while <lhs> <operator> <rhs>
let ${_source_line} = <file>,<line>
<label>:
        test <label>_end: <lhs> <operator> <rhs>
        <s>
        ; endwhile
        goto <label>:
<label>_end:
>>
        ;


The problem is the <file> attribute is always the name of the file that contains the include directive.  That is:

file1.cls:
--------------
#include file2.cls

while $01 < 1
   let $01 = 1
endwhile
--------------

file2.cls:
--------------
while $01 < 2
   let $01 = 2
endwhile
--------------

Translates to:

; while ${index} < 2
let ${_source_line} = file1.cls,1
L_0_while:
        test L_0_while_end: ${index} < 2

        let ${index} = 2

        ; endwhile
        goto L_0_while:
L_0_while_end:

; while ${index} < 1
let ${_source_line} = file1.cls,3
L_1_while:
        test L_1_while_end: ${index} < 1

        let ${index} = 1

        ; endwhile
        goto L_1_while:
L_1_while_end:

Notice that even though the line numbers are correct, the <file> attribute evaluates to file1.cls when processing file2.cls.

I've poured over the ANTLR Java runtime API documentation and it would appear that input.getSourceName() should change when processing the included file.

Does anyone have an idea on what I'm doing wrong?


Thanks

From jimi at temporal-wave.com  Wed May 26 08:43:53 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 26 May 2010 08:43:53 -0700
Subject: [antlr-interest] parsing rules
In-Reply-To: <20100526110118.23812.qmail@info9.gawab.com>
Message-ID: <06dcc07c7431cf4293cb8608cdc37082@temporal-wave.com>

Your s: rule needs to set $st to something too or it will return an empty template :-)
Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of George Soom
> Sent: Wednesday, May 26, 2010 4:01 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] parsing rules
> 
> Hi,
> 
> I have to rewrite several files with mathematical text in them. Text
> substitutions are really simple (e.g. 'a=4' -> 'a:=4;' and similar).
> Input is in form:
> ----
> a=4
> b=3
> draw(a)
> draw(b)
> ----
> 
> Needed output
> -----
> a:=4;
> b:=3;
> draw(a, "constant arguments")
> draw(b, "constant arguments")
> ----
> 
> The best option I have found is to use StringTemplate. At chapter 9.3
> in
> book 'The Definitive ANTLRD reference' has a suitable example.
> To explain my probelm I will add lines from two examples:
> Grammar:
> 
> grammar T;
> options {output=template;}
> s : ID '=' INT ';' -> assign(x={$ID.text},y={$INT.text}) ;
> ---lexer part not pasted---
> 
> Test.java
> --header, input, parser-lexer generation etc. not pasted---
> parser.setTemplateLib(templates); // give parser templates
> TParser.s_return r = parser.s();      // parse rule s
> StringTemplate output = r.getTemplate();
> System.out.println(output.toString());// emit translation
> 
> This will work fine. But if I change rule s to
> s: assign+;
> assign: ID '=' INT ';' -> assign(x={$ID.text},y={$INT.text}) ;
> 
> I have to call parse.assign() to get correct results. How can i still
> parse
> starting from rule 's' and get desired output?
> 
> George
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From richard.thrippleton at progress.com  Wed May 26 08:46:28 2010
From: richard.thrippleton at progress.com (Richard Thrippleton)
Date: Wed, 26 May 2010 16:46:28 +0100
Subject: [antlr-interest] Inexplicable RewriteEmptyStreamException in
 parser	grammar
In-Reply-To: <3BF43CA81695C2428B61C224ABB71212FD3FF1B7@PSCMAIL03.bedford.progress.com>
References: <3BF43CA81695C2428B61C224ABB71212FD3FF1B7@PSCMAIL03.bedford.progress.com>
Message-ID: <4BFD4254.2070401@progress.com>

False alarm. There was some subtle abuse going on deep down in our setup of 
the parser (our tree adaptor was creating error nodes incorrectly). Apologies!

Richard

Richard Thrippleton wrote:
> I'm using the Java target with ANTLR 3.2, and having a problem in a rule in my parser grammar that looks like this:
> 
> "variableInit [ String name ]
>   : ASSIGNMENT id=initializer
>     -> ^(ASSIGNMENT IDENTIFIER[$ASSIGNMENT, $name] initializer)"
> 
> In a particular case where the 'initializer' rule fails to match and issues a syntax error, I'm getting a RewriteEmptyStreamException that cites "rule initializer" popping up from a line that looks like this:
> 
> "// 1151:5: -> ^( ASSIGNMENT IDENTIFIER[$ASSIGNMENT, $name] initializer )
> {
>   {
>     CommonTree root_1 = (CommonTree)adaptor.nil();
>     root_1 = (CommonTree)adaptor.becomeRoot(stream_ASSIGNMENT.nextNode(), root_1);
>     adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENTIFIER, ASSIGNMENT179, name));
>     adaptor.addChild(root_1, stream_initializer.nextTree());           <-------------------- ****This line****
>     adaptor.addChild(root_0, root_1);
>   }
> }"
> 
> In terms of error handling we're just using the default recovery (not overriding it with 'catch'/'rulecatch'). We've overridden reportError to pretty-print the RecognitionExceptions, but that's about it. Should I be needing to do anything special to cope with parsing failures of subrules, or should the default be sufficient to prevent these exceptions? Otherwise, where is the problem likely to lie - a defect elsewhere in my grammar, or in ANTLR?
> 
> Cheers,
> Richard
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


-- 
\o/

From j at junkwallah.org  Wed May 26 12:45:58 2010
From: j at junkwallah.org (Junkman)
Date: Wed, 26 May 2010 12:45:58 -0700
Subject: [antlr-interest] greedy subrule option idiom
Message-ID: <4BFD7A76.8090506@junkwallah.org>

Hello,

Following is a lexer rule to match quoted string that allows backslash
escape sequence.


STRING
	: 	 '"' ( options {greedy=false;} : ( ~ '\\' | '\\' . ) )* '"'
	;


It seems to work.  But if you put the '*' operator inside the subrule
like this:


STRING
	: 	 '"' ( options {greedy=false;} : ( ~ '\\' | '\\' . )* ) '"'
	;


It eats up everything to EOF.

It's as if the greedy option applies to the ((subrule)*) instead of the
subrule itself, and only if the subrule is suffixed with '*' operator
(or with '+') externally (as in (subrule)*).

To my eyes, the second version seems the "correct" one.

Thoughts?

J











From ondro.krc at gmail.com  Wed May 26 13:33:33 2010
From: ondro.krc at gmail.com (Ondrej Krc-Jediny)
Date: Wed, 26 May 2010 22:33:33 +0200
Subject: [antlr-interest] Ambiguous grammar
Message-ID: <AANLkTim3IOSZA23OCwhZkWra8AMA7E5hKsjACdgKXOqV@mail.gmail.com>

Hello,

I am new to ANTLR and I'd appreciate help with my problem. At first
some grammar rules I am going to talk about:

DIGIT: '0'..'9';
LETTER: 'a'..'z'|'A'..'Z';

REAL
    :   (DIGIT)+ '.' (DIGIT)* EXPONENT?
    |   '.' (DIGIT)+ EXPONENT?
    |   (DIGIT)+ EXPONENT
    ;

INTEGER: DIGIT+;

IDENTIFIER: LETTER+;

range_expr:
  expr ('..' expr)?;

expr: expratom ('+' expratom)?;

expratom: INTEGER | REAL | IDENTIFIER;

This grammar allows '1.' and .1' as correct real numbers. Also, it
allows range expression '1..2', which gets parsed incorrectly as two
real numbers 1. and .2. Redefining token
INTEGER: DIGIT '..'?;
doesn't help, because then also valid range expression 'i + 1..2'. Is
there any way how to parse the '..' correctly in all cases?

Thank you very much,

Ondrej.

From jimi at temporal-wave.com  Wed May 26 13:50:46 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 26 May 2010 13:50:46 -0700
Subject: [antlr-interest] Ambiguous grammar
In-Reply-To: <AANLkTim3IOSZA23OCwhZkWra8AMA7E5hKsjACdgKXOqV@mail.gmail.com>
Message-ID: <f4a8764378150840b8a22c338266378a@temporal-wave.com>

Please see the FAQ:

http://www.antlr.org/wiki/display/ANTLR3/Lexer+grammar+for+floating+point%2C+dot%2C+range%2C+time+specs

Also note that there is a search engine:

http://antlr.markmail.org 

For this group, and it is really good:

http://antlr.markmail.org/search/?q=range 

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ondrej Krc-Jediny
> Sent: Wednesday, May 26, 2010 1:34 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Ambiguous grammar
> 
> Hello,
> 
> I am new to ANTLR and I'd appreciate help with my problem. At first
> some grammar rules I am going to talk about:
> 
> DIGIT: '0'..'9';
> LETTER: 'a'..'z'|'A'..'Z';
> 
> REAL
>     :   (DIGIT)+ '.' (DIGIT)* EXPONENT?
>     |   '.' (DIGIT)+ EXPONENT?
>     |   (DIGIT)+ EXPONENT
>     ;
> 
> INTEGER: DIGIT+;
> 
> IDENTIFIER: LETTER+;
> 
> range_expr:
>   expr ('..' expr)?;
> 
> expr: expratom ('+' expratom)?;
> 
> expratom: INTEGER | REAL | IDENTIFIER;
> 
> This grammar allows '1.' and .1' as correct real numbers. Also, it
> allows range expression '1..2', which gets parsed incorrectly as two
> real numbers 1. and .2. Redefining token
> INTEGER: DIGIT '..'?;
> doesn't help, because then also valid range expression 'i + 1..2'. Is
> there any way how to parse the '..' correctly in all cases?
> 
> Thank you very much,
> 
> Ondrej.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From Parrt at cs.usfca.edu  Wed May 26 16:18:28 2010
From: Parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 26 May 2010 16:18:28 -0700
Subject: [antlr-interest] ANTLR v4 progress
Message-ID: <508FF9A0-4422-4415-927D-3A9FB1E40091@cs.usfca.edu>

Just passing along an example HTML subset lexer/parser using ANTLR v4; thanks to  debugging and moral support from Oliver Zeigermann, we got the code generation and runtime support working sufficiently to use the following grammars.   generate some really nice code indeed. You will note that, except for the enhancement of the lexer modes, the grammars are backward compatible with v3 :)

I still have a long way to go, but it's looking more & more useful (only does LL(1) code generation at this point).

Ter
---------------------------
lexer grammar HTMLLexer;

TAG_START : '<' {pushMode(INSIDE);} ;

COMMENT : '<!--' .* '-->' {skip();} ;

TEXT : ~'<'+ ;

mode INSIDE;

TAG_STOP : '>' {popMode();} ;

END_TAG : '/' ID '>' {popMode();} ;

ID : ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'#')+ ;

EQ : '=' ;

STRING : '"' .* '"'
       ;

WS : ' '+ {skip();} ;

------------------------

parser grammar HTMLParser;

options { tokenVocab=HTMLLexer; }

file : ( TAG_START (starttag | endtag) | TEXT)+ EOF ;

starttag : ID attr* TAG_STOP ;

attr : ID (EQ (ID|STRING))? ;

endtag
	:	 END_TAG
	;


From kferrio at gmail.com  Wed May 26 19:07:50 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Thu, 27 May 2010 02:07:50 +0000
Subject: [antlr-interest] ANTLR v4 progress
In-Reply-To: <508FF9A0-4422-4415-927D-3A9FB1E40091@cs.usfca.edu>
References: <508FF9A0-4422-4415-927D-3A9FB1E40091@cs.usfca.edu>
Message-ID: <1763527633-1274926071-cardhu_decombobulator_blackberry.rim.net-368439910-@bda428.bisx.prod.on.blackberry>

Way cool!  Just curious...is the modal state variable automatically accessible to the parser?  Perhaps on a subchannel synced with the token stream?  Sorry to be tuning in late...always interested in new paths to semiosis.  :)   Anyway...I need to take a look at girhub and think up a fun use.

Kyle

Sent from my Verizon Wireless BlackBerry

-----Original Message-----
From: Terence Parr <Parrt at cs.usfca.edu>
Date: Wed, 26 May 2010 16:18:28 
To: antlr-interest at antlr.org interest<antlr-interest at antlr.org>
Subject: [antlr-interest] ANTLR v4 progress

Just passing along an example HTML subset lexer/parser using ANTLR v4; thanks to  debugging and moral support from Oliver Zeigermann, we got the code generation and runtime support working sufficiently to use the following grammars.   generate some really nice code indeed. You will note that, except for the enhancement of the lexer modes, the grammars are backward compatible with v3 :)

I still have a long way to go, but it's looking more & more useful (only does LL(1) code generation at this point).

Ter
---------------------------
lexer grammar HTMLLexer;

TAG_START : '<' {pushMode(INSIDE);} ;

COMMENT : '<!--' .* '-->' {skip();} ;

TEXT : ~'<'+ ;

mode INSIDE;

TAG_STOP : '>' {popMode();} ;

END_TAG : '/' ID '>' {popMode();} ;

ID : ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'#')+ ;

EQ : '=' ;

STRING : '"' .* '"'
       ;

WS : ' '+ {skip();} ;

------------------------

parser grammar HTMLParser;

options { tokenVocab=HTMLLexer; }

file : ( TAG_START (starttag | endtag) | TEXT)+ EOF ;

starttag : ID attr* TAG_STOP ;

attr : ID (EQ (ID|STRING))? ;

endtag
	:	 END_TAG
	;


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From ruslan_zasukhin at valentina-db.com  Wed May 26 21:54:47 2010
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Thu, 27 May 2010 07:54:47 +0300
Subject: [antlr-interest] ANTLR v4 progress // switch fro v2.7.2
In-Reply-To: <508FF9A0-4422-4415-927D-3A9FB1E40091@cs.usfca.edu>
Message-ID: <C823D5C7.D7867%ruslan_zasukhin@valentina-db.com>

On 27/5/10 2:18 AM, "Terence Parr" <Parrt at cs.usfca.edu> wrote:

Hi Terrence,

> Just passing along an example HTML subset lexer/parser using ANTLR v4; thanks
> to  debugging and moral support from Oliver Zeigermann, we got the code
> generation and runtime support working sufficiently to use the following
> grammars.   generate some really nice code indeed. You will note that, except
> for the enhancement of the lexer modes, the grammars are backward compatible
> with v3 :)

Congratulation on progress. :)

My question is. Currently we still use ANTLR 2.7.2.
Was not time jump to v3 yet.

What will be your advice:
    jump in nearest months to v3, and later this will move smooth
    to v4 also. Or just wait for v4 to avoid too big transfers?



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From mgb.klimstra at gmail.com  Thu May 27 02:18:43 2010
From: mgb.klimstra at gmail.com (Marcus Klimstra)
Date: Thu, 27 May 2010 11:18:43 +0200
Subject: [antlr-interest] Solution for specialStateTransition exceeding 65k
Message-ID: <AANLkTilvqdZT_zXIhtPseVK7Vb2ZggbQQnoVRJL78CgJ@mail.gmail.com>

Hi,

I ran into the problem of the huge specialStateTransition bytecode size when
using many gated semantic predicates in the lexer (in all my lexer rules
actually).  After a google search I found that this is a known issue to
which there are some workarounds, but no real solutions. At first I used the
workaround to manually add local variables for the outer-class references,
but at some point even that no longer worked. Therefore I changed the Java
code generator to create seperate methods for each switch-case. This works
quite well for me, so I wanted to share it with the community. Note that I
only tested this in the lexer, since my parser has no
specialStateTransition-method at the moment. I also added annotations to
suppress the useless warnings in the generated code. A diff-file with these
changes is attached.

- Marcus
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Java.stg.diff
Type: application/octet-stream
Size: 2734 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100527/ccf2bb3e/attachment.obj 

From haiscai2003 at yahoo.com  Thu May 27 02:43:04 2010
From: haiscai2003 at yahoo.com (H S)
Date: Thu, 27 May 2010 02:43:04 -0700 (PDT)
Subject: [antlr-interest] ANTLR3 C Target Runtime Error
Message-ID: <382762.62081.qm@web111712.mail.gq1.yahoo.com>

Hi,

There seems to be a bug in the generated C sources (antlr3lexer.c): the state variable is NULL and dues to that it crashes later. 
It is NULL because LangParserNew passes NULL to LangParserNew SSD, etc.
I have tried a few versions (3.1.3, 3.2,etc ) and all seem to have this problem.
Am I calling the wrong function (LangParserNew)?

Thanks.
Hai



      

From george.soom at siria.cc  Thu May 27 03:51:32 2010
From: george.soom at siria.cc (George Soom)
Date: Thu, 27 May 2010 10:51:32 GMT
Subject: [antlr-interest] parsing rules
Message-ID: <20100527105133.20207.qmail@info9.gawab.com>

Thank You,

now I understand my mistake. However, can You give me a bit bigger example?
All relevant tutorials seem to be for ANTLR v2
 (
http://www.antlr.org/wiki/display/ST/Language+Translation+Using+ANTLR+and+StringTemplate
) 
and syntax seems to bee changed more than I can understand.

Georg

Jim Idle <jimi at temporal-wave.com> wrote on 26 May 2010, 06:43 PM:
Subject: Re: [antlr-interest] parsing rules
>Your s: rule needs to set $st to something too or it will return an empty
>template :-)
>Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of George Soom
>> Sent: Wednesday, May 26, 2010 4:01 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] parsing rules
>> 
>> Hi,
>> 
>> I have to rewrite several files with mathematical text in them. Text
>> substitutions are really simple (e.g. 'a=4' -> 'a:=4;' and similar).
>> Input is in form:
>> ----
>> a=4
>> b=3
>> draw(a)
>> draw(b)
>> ----
>> 
>> Needed output
>> -----
>> a:=4;
>> b:=3;
>> draw(a, "constant arguments")
>> draw(b, "constant arguments")
>> ----
>> 
>> The best option I have found is to use StringTemplate. At chapter 9.3
>> in
>> book 'The Definitive ANTLRD reference' has a suitable example.
>> To explain my probelm I will add lines from two examples:
>> Grammar:
>> 
>> grammar T;
>> options {output=template;}
>> s : ID '=' INT ';' -> assign(x={$ID.text},y={$INT.text}) ;
>> ---lexer part not pasted---
>> 
>> Test.java
>> --header, input, parser-lexer generation etc. not pasted---
>> parser.setTemplateLib(templates); // give parser templates
>> TParser.s_return r = parser.s();      // parse rule s
>> StringTemplate output = r.getTemplate();
>> System.out.println(output.toString());// emit translation
>> 
>> This will work fine. But if I change rule s to
>> s: assign+;
>> assign: ID '=' INT ';' -> assign(x={$ID.text},y={$INT.text}) ;
>> 
>> I have to call parse.assign() to get correct results. How can i still
>> parse
>> starting from rule 's' and get desired output?
>> 
>> George
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
>
>
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe:
>http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From KLPauba at west.com  Thu May 27 06:48:12 2010
From: KLPauba at west.com (Pauba, Kevin L)
Date: Thu, 27 May 2010 08:48:12 -0500
Subject: [antlr-interest] Using input.getSourceName() and INCLUDE
	processing -- SOLVED
In-Reply-To: <226316B3E1F749498E28ACA66321D5BA027FFD54A2@oma00cexmbx03.corp.westworlds.com>
References: <4BF605B8.6050301@gmail.com>
	<226316B3E1F749498E28ACA66321D5BA027FFD54A2@oma00cexmbx03.corp.westworlds.com>
Message-ID: <226316B3E1F749498E28ACA66321D5BA027FFD5988@oma00cexmbx03.corp.westworlds.com>

Although it's bad form to reply to my own messages, I found a solution to my problem.

Jim Idle's suggestion to search the antlr.markmail.org site helped (it, indeed, is wonderful tool).

I modified:

file={input.getSourceName()},

to:

file={$kw.getInputStream().getSourceName()},

and that solved my problem.


Thanks Jim for helping me help myself!

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pauba, Kevin L
Sent: Wednesday, May 26, 2010 9:39 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Using input.getSourceName() and INCLUDE processing

I have a JAVA language rewrite translator that adds some more modern control constructs to an existing DSL.  ANTLR has been invaluable.

I've provided "include" file support using the methods outlined in http://www.antlr.org/wiki/pages/viewpage.action?pageId=557057 but I would like to use the file name in the string template that is used to generate code:

        |       kw=KW_while {
                            whileLabelStack.push(new Label("while"));
                }
                l=string cond=string r=string
                (s+=statement)+
                KW_endwhile
                -> template(lhs={$l.text},
                            operator={$cond.text.replaceAll("<", "\\<")},
                            rhs={$r.text},
                            s={$s},
                            file={input.getSourceName()},
                            line={$kw.line},
                            label={whileLabelStack.pop().getLabel()})
<<
; while <lhs> <operator> <rhs>
let ${_source_line} = <file>,<line>
<label>:
        test <label>_end: <lhs> <operator> <rhs>
        <s>
        ; endwhile
        goto <label>:
<label>_end:
>>
        ;


The problem is the <file> attribute is always the name of the file that contains the include directive.  That is:

file1.cls:
--------------
#include file2.cls

while $01 < 1
   let $01 = 1
endwhile
--------------

file2.cls:
--------------
while $01 < 2
   let $01 = 2
endwhile
--------------

Translates to:

; while ${index} < 2
let ${_source_line} = file1.cls,1
L_0_while:
        test L_0_while_end: ${index} < 2

        let ${index} = 2

        ; endwhile
        goto L_0_while:
L_0_while_end:

; while ${index} < 1
let ${_source_line} = file1.cls,3
L_1_while:
        test L_1_while_end: ${index} < 1

        let ${index} = 1

        ; endwhile
        goto L_1_while:
L_1_while_end:

Notice that even though the line numbers are correct, the <file> attribute evaluates to file1.cls when processing file2.cls.

I've poured over the ANTLR Java runtime API documentation and it would appear that input.getSourceName() should change when processing the included file.

Does anyone have an idea on what I'm doing wrong?


Thanks

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Thu May 27 06:50:56 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 27 May 2010 06:50:56 -0700
Subject: [antlr-interest] Solution for specialStateTransition exceeding
	65k
In-Reply-To: <AANLkTilvqdZT_zXIhtPseVK7Vb2ZggbQQnoVRJL78CgJ@mail.gmail.com>
Message-ID: <22b46a90fc719a4eacca5066626d4b2d@temporal-wave.com>

There is  quite often a way to rejig the lexer to avoid the huge expansion, if you post your grammar, maybe we can help. I think that such issues will go away in v4 :-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Marcus Klimstra
> Sent: Thursday, May 27, 2010 2:19 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Solution for specialStateTransition exceeding
> 65k
> 
> Hi,
> 
> I ran into the problem of the huge specialStateTransition bytecode size
> when using many gated semantic predicates in the lexer (in all my lexer
> rules actually).  After a google search I found that this is a known
> issue to which there are some workarounds, but no real solutions. At
> first I used the workaround to manually add local variables for the
> outer-class references, but at some point even that no longer worked.
> Therefore I changed the Java code generator to create seperate methods
> for each switch-case. This works quite well for me, so I wanted to
> share it with the community. Note that I only tested this in the lexer,
> since my parser has no specialStateTransition-method at the moment. I
> also added annotations to suppress the useless warnings in the
> generated code. A diff-file with these changes is attached.
> 
> - Marcus




From jimi at temporal-wave.com  Thu May 27 06:52:53 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 27 May 2010 06:52:53 -0700
Subject: [antlr-interest] ANTLR3 C Target Runtime Error
In-Reply-To: <382762.62081.qm@web111712.mail.gq1.yahoo.com>
Message-ID: <dbfa712b3a72ce4e8cbf03e66d57e4f0@temporal-wave.com>

Correct function, but obviously you are doing something wrong because the hundreds of parsers out there already would not be there if there was a bug as fundamental as this one. Follow the C examples or post your driver code so we can see what you are doing wrong.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of H S
> Sent: Thursday, May 27, 2010 2:43 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3 C Target Runtime Error
> 
> Hi,
> 
> There seems to be a bug in the generated C sources (antlr3lexer.c): the
> state variable is NULL and dues to that it crashes later.
> It is NULL because LangParserNew passes NULL to LangParserNew SSD, etc.
> I have tried a few versions (3.1.3, 3.2,etc ) and all seem to have this
> problem.
> Am I calling the wrong function (LangParserNew)?
> 
> Thanks.
> Hai
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Thu May 27 07:00:00 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 27 May 2010 07:00:00 -0700
Subject: [antlr-interest] parsing rules
In-Reply-To: <20100527105133.20207.qmail@info9.gawab.com>
Message-ID: <a84a29d7e1bee943867307b29fcf3287@temporal-wave.com>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of George Soom
> Sent: Thursday, May 27, 2010 3:52 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] parsing rules
> 
> Thank You,
> 
> now I understand my mistake. However, can You give me a bit bigger
> example?

OK. I use this (all the time ;-):

statements
    :   s+=statement*

        // The list of statements just needs to go on up the chain, but we
        // still use a template in our template group in case we ever
        // wish to adorn statements with something or the target changes
        //
        -> statements(stats={$s})
    ;

Then a template of:

statements(stats) ::= <<
<stats: {<it>}; separator="\n">
>>

(Sometimes you will need to iterate, sometimes not, depending on what you did lower down the chain. 

Other constructs are:

    |   COMMENT                 
            {
                // Get rid of leading spaces and the ' character, generate the comment line
                //
                $st = %lineComment(comment={$COMMENT.text.trim().substring(1)});
            }

To use a template within an action.

And:

        {
            // Ask the code generator to deal with the assignment
            //
            $st = codeGen.assign($v.st, $v.symbol, $expression.st, $expression.symbol, $expression.type);
        }

To call a method that returns a template (or List).

And:

	:	^(CALL

            id=IDENTIFIER
            {
                $st = %({$id.text})();

                f = (Function)localSymbols.lookup($id.text);
                %{$st}.instr=f.getInstruction();

                argNum = 0;
            }

...


To instantiate a template, the name of which is held in some String.


Jim







From jimi at temporal-wave.com  Thu May 27 08:00:48 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 27 May 2010 08:00:48 -0700
Subject: [antlr-interest] Solution for specialStateTransition exceeding
	65k
In-Reply-To: <AANLkTikAkZs8ZuAnMDqBWwNOFbg3W9UPcmhrgnhZTQzg@mail.gmail.com>
Message-ID: <650ff6ff4f773148b78d5db7b4ccc80a@temporal-wave.com>

You could look at the JavaFX lexer. JavaFX allows expressions in strings in a similar manner but I did not need to use so many predicates. It would probably help you. Find the JavaFX project on Kenai and you can download the source code. Just serach for *.g and you will find the lexer.

Jim



> -----Original Message-----
> From: Marcus Klimstra [mailto:mgb.klimstra at gmail.com]
> Sent: Thursday, May 27, 2010 7:58 AM
> To: Jim Idle
> Subject: Re: [antlr-interest] Solution for specialStateTransition
> exceeding 65k
> 
> Hi Jim,
> 
> Basically the language has string literals which can contain
> 'placeholders'; expressions surrounded by angle brackets:
> 
> stringLiteral
> ??? :??? SQUOTE! stringPart* SQUOTE!
> ??? ;
> 
> stringPart
> ??? :??? STRCONT
> ??? |??? LT! expr XGT!
> ??? ;
> 
> expr can also be a string, so 'foo <bar('baz')> quux' would be a valid
> expression. The only exception is that '> is not allowed within
> placeholders.
> 
> The lexer handles this with a stack of 'modes'. All operators and
> keywords have a predicate that the current mode must be 'normal' (i.e.
> outside a string or in a placeholder). When inside a placeholder the
> '>' character yields a XGT token instead of the normal GT, to prevent
> it from being cobbled up by a relational expression.
> 
> PLUS???????? :??? {inNormal}?=>??? '+'??????? ; MINUS??????? :
> {inNormal}?=>??? '-'??????? ; MUL????????? :??? {inNormal}?=>
> '*'??????? ; DIV????????? :??? {inNormal}?=>??? '/'??????? ;
> MOD????????? :??? {inNormal}?=>??? '%'??????? ; //etc NOT????????? :
> {inNormal}?=>??? 'not'????? ; OR?????????? :??? {inNormal}?=>
> 'or'?????? ; AND????????? :??? {inNormal}?=>??? 'and'????? ;
> TRUE???????? :??? {inNormal}?=>??? 'true'???? ; FALSE??????? :
> {inNormal}?=>??? 'false'??? ; //etc
> 
> SQUOTE
> ??? :??? {inNormal}?=>??????? '\''??? { pushMode(MODE_STRING); }
> ??? |??? {inString}?=>??????? '\''??? { popMode(); }
> ??? ;
> 
> XGT :??? {inPlaceholder}?=>?? '>'???? { popMode(); }
> ??? ;
> 
> GT? :??? {inNormal}?=>??????? '>'
> ??? ;
> 
> LT? :???????????????????????? '<'???? { if (inString) {
> pushMode(MODE_NORMAL); } }
> ??? ;
> 
> STRCONT
> ??? :??? {inString}?=>??????? ('a'..'z'|'A'..'Z'|'0'..'9'|' '|'_')+
> ??? ;
> 
> As you can see, at the moment strings can only contain /[a..z][0..9]
> _/i, since using (~('\''|'<'))+ results in an OutOfMemoryError...
> 
> inNormal, inString and inPlaceholder are booleans which are updated by
> pushMode and popMode:
> 
> private void updateMode() {
> ??? Integer mode??? = stack.peekFirst();
> ??? inNormal??????? = (stack.isEmpty() || mode == MODE_NORMAL);
> ??? inString??????? = (mode == MODE_STRING);
> ??? inPlaceholder?? = (mode == MODE_NORMAL); }
> 
> Although my current approach seems to work pretty well, I am ofcourse
> open for suggestions. I can't really wait for ANTLR v4 however :)
> 
> Thanks,
> 
> - Marcus
> 
> 
> On Thu, May 27, 2010 at 3:50 PM, Jim Idle <jimi at temporal-wave.com>
> wrote:
> >
> > There is ?quite often a way to rejig the lexer to avoid the huge
> > expansion, if you post your grammar, maybe we can help. I think that
> > such issues will go away in v4 :-)
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of Marcus Klimstra
> > > Sent: Thursday, May 27, 2010 2:19 AM
> > > To: antlr-interest at antlr.org
> > > Subject: [antlr-interest] Solution for specialStateTransition
> > > exceeding 65k
> > >
> > > Hi,
> > >
> > > I ran into the problem of the huge specialStateTransition bytecode
> > > size when using many gated semantic predicates in the lexer (in all
> > > my lexer rules actually). ?After a google search I found that this
> > > is a known issue to which there are some workarounds, but no real
> > > solutions. At first I used the workaround to manually add local
> > > variables for the outer-class references, but at some point even
> that no longer worked.
> > > Therefore I changed the Java code generator to create seperate
> > > methods for each switch-case. This works quite well for me, so I
> > > wanted to share it with the community. Note that I only tested this
> > > in the lexer, since my parser has no specialStateTransition-method
> > > at the moment. I also added annotations to suppress the useless
> > > warnings in the generated code. A diff-file with these changes is
> attached.
> > >
> > > - Marcus
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address




From mgb.klimstra at gmail.com  Thu May 27 08:06:34 2010
From: mgb.klimstra at gmail.com (Marcus Klimstra)
Date: Thu, 27 May 2010 17:06:34 +0200
Subject: [antlr-interest] Solution for specialStateTransition exceeding
	65k
In-Reply-To: <22b46a90fc719a4eacca5066626d4b2d@temporal-wave.com>
References: <AANLkTilvqdZT_zXIhtPseVK7Vb2ZggbQQnoVRJL78CgJ@mail.gmail.com>
	<22b46a90fc719a4eacca5066626d4b2d@temporal-wave.com>
Message-ID: <AANLkTilQxUj2FUGVsQjicch6tLFFoxgOiXTQj7nxzh7D@mail.gmail.com>

Hi Jim,

Basically the language has string literals which can contain
'placeholders'; expressions surrounded by angle brackets:

stringLiteral
    :    SQUOTE! stringPart* SQUOTE!
    ;

stringPart
    :    STRCONT
    |    LT! expr XGT!
    ;

expr can also be a string, so 'foo <bar('baz')> quux' would be a valid
expression. The only exception is that '> is not allowed within
placeholders.

The lexer handles this with a stack of 'modes'. All operators and
keywords have a predicate that the current mode must be 'normal' (i.e.
outside a string or in a placeholder). When inside a placeholder the
'>' character yields a XGT token instead of the normal GT, to prevent
it from being cobbled up by a relational expression.

PLUS         :    {inNormal}?=>    '+'        ;
MINUS        :    {inNormal}?=>    '-'        ;
MUL          :    {inNormal}?=>    '*'        ;
DIV          :    {inNormal}?=>    '/'        ;
MOD          :    {inNormal}?=>    '%'        ;
//etc
NOT          :    {inNormal}?=>    'not'      ;
OR           :    {inNormal}?=>    'or'       ;
AND          :    {inNormal}?=>    'and'      ;
TRUE         :    {inNormal}?=>    'true'     ;
FALSE        :    {inNormal}?=>    'false'    ;
//etc

SQUOTE
    :    {inNormal}?=>        '\''    { pushMode(MODE_STRING); }
    |    {inString}?=>        '\''    { popMode(); }
    ;

XGT :    {inPlaceholder}?=>   '>'     { popMode(); }
    ;

GT  :    {inNormal}?=>        '>'
    ;

LT  :                         '<'     { if (inString) {
pushMode(MODE_NORMAL); } }
    ;

STRCONT
    :    {inString}?=>        ('a'..'z'|'A'..'Z'|'0'..'9'|' '|'_')+
    ;

As you can see, at the moment strings can only contain /[a..z][0..9]
_/i, since using (~('\''|'<'))+ results in an OutOfMemoryError...

inNormal, inString and inPlaceholder are booleans which are updated by
pushMode and popMode:

private void updateMode() {
    Integer mode    = stack.peekFirst();
    inNormal        = (stack.isEmpty() || mode == MODE_NORMAL);
    inString        = (mode == MODE_STRING);
    inPlaceholder   = (mode == MODE_NORMAL);
}

Although my current approach seems to work pretty well, I am ofcourse
open for suggestions. I can't really wait for ANTLR v4 however :)

Thanks,

- Marcus

On Thu, May 27, 2010 at 3:50 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> There is ?quite often a way to rejig the lexer to avoid the huge expansion, if you post your grammar, maybe we can help. I think that such issues will go away in v4 :-)
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Marcus Klimstra
>> Sent: Thursday, May 27, 2010 2:19 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Solution for specialStateTransition exceeding
>> 65k
>>
>> Hi,
>>
>> I ran into the problem of the huge specialStateTransition bytecode size
>> when using many gated semantic predicates in the lexer (in all my lexer
>> rules actually). ?After a google search I found that this is a known
>> issue to which there are some workarounds, but no real solutions. At
>> first I used the workaround to manually add local variables for the
>> outer-class references, but at some point even that no longer worked.
>> Therefore I changed the Java code generator to create seperate methods
>> for each switch-case. This works quite well for me, so I wanted to
>> share it with the community. Note that I only tested this in the lexer,
>> since my parser has no specialStateTransition-method at the moment. I
>> also added annotations to suppress the useless warnings in the
>> generated code. A diff-file with these changes is attached.
>>
>> - Marcus
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
-------------- next part --------------
===========================================================

stringLiteral
    :    SQUOTE! stringPart* SQUOTE!
    ;

stringPart
    :    STRCONT
    |    LT! expr XGT!
    ;

===========================================================

PLUS         :    {inNormal}?=>    '+'        ;
MINUS        :    {inNormal}?=>    '-'        ;
MUL          :    {inNormal}?=>    '*'        ;
DIV          :    {inNormal}?=>    '/'        ;
MOD          :    {inNormal}?=>    '%'        ;
//etc
NOT          :    {inNormal}?=>    'not'      ;
OR           :    {inNormal}?=>    'or'       ;
AND          :    {inNormal}?=>    'and'      ;
TRUE         :    {inNormal}?=>    'true'     ;
FALSE        :    {inNormal}?=>    'false'    ;
//etc

SQUOTE
    :    {inNormal}?=>        '\''    { pushMode(MODE_STRING); }
    |    {inString}?=>        '\''    { popMode(); }
    ;

XGT :    {inPlaceholder}?=>   '>'     { popMode(); }
    ;
    
GT  :    {inNormal}?=>        '>'
    ;
    
LT  :                         '<'     { if (inString) { pushMode(MODE_NORMAL); } }
    ;

STRCONT
    :    {inString}?=>        ('a'..'z'|'A'..'Z'|'0'..'9'|' '|'_')+
    ;

===========================================================

private void updateMode() {
    Integer mode    = stack.peekFirst();
    inNormal        = (stack.isEmpty() || mode == MODE_NORMAL);
    inString        = (mode == MODE_STRING);
    inPlaceholder   = (mode == MODE_NORMAL);
}

===========================================================

From Parrt at cs.usfca.edu  Thu May 27 13:41:24 2010
From: Parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 May 2010 13:41:24 -0700
Subject: [antlr-interest] ANTLR v4 progress
In-Reply-To: <1763527633-1274926071-cardhu_decombobulator_blackberry.rim.net-368439910-@bda428.bisx.prod.on.blackberry>
References: <508FF9A0-4422-4415-927D-3A9FB1E40091@cs.usfca.edu>
	<1763527633-1274926071-cardhu_decombobulator_blackberry.rim.net-368439910-@bda428.bisx.prod.on.blackberry>
Message-ID: <D46C88BC-D7F4-4855-9D3D-3D4D404AD281@cs.usfca.edu>

The lexer/parser  really shouldn't interact since they can operate totally independently. In most cases what you really want is a scannerless parser, which I think I can easily implement as well.

Ter

On May 26, 2010, at 7:07 PM, kferrio at gmail.com wrote:

> Way cool!  Just curious...is the modal state variable automatically accessible to the parser?  Perhaps on a subchannel synced with the token stream?  Sorry to be tuning in late...always interested in new paths to semiosis.  :)   Anyway...I need to take a look at girhub and think up a fun use.
> 
> Kyle
> 
> Sent from my Verizon Wireless BlackBerry
> 
> -----Original Message-----
> From: Terence Parr <Parrt at cs.usfca.edu>
> Date: Wed, 26 May 2010 16:18:28 
> To: antlr-interest at antlr.org interest<antlr-interest at antlr.org>
> Subject: [antlr-interest] ANTLR v4 progress
> 
> Just passing along an example HTML subset lexer/parser using ANTLR v4; thanks to  debugging and moral support from Oliver Zeigermann, we got the code generation and runtime support working sufficiently to use the following grammars.   generate some really nice code indeed. You will note that, except for the enhancement of the lexer modes, the grammars are backward compatible with v3 :)
> 
> I still have a long way to go, but it's looking more & more useful (only does LL(1) code generation at this point).
> 
> Ter
> ---------------------------
> lexer grammar HTMLLexer;
> 
> TAG_START : '<' {pushMode(INSIDE);} ;
> 
> COMMENT : '<!--' .* '-->' {skip();} ;
> 
> TEXT : ~'<'+ ;
> 
> mode INSIDE;
> 
> TAG_STOP : '>' {popMode();} ;
> 
> END_TAG : '/' ID '>' {popMode();} ;
> 
> ID : ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'#')+ ;
> 
> EQ : '=' ;
> 
> STRING : '"' .* '"'
>       ;
> 
> WS : ' '+ {skip();} ;
> 
> ------------------------
> 
> parser grammar HTMLParser;
> 
> options { tokenVocab=HTMLLexer; }
> 
> file : ( TAG_START (starttag | endtag) | TEXT)+ EOF ;
> 
> starttag : ID attr* TAG_STOP ;
> 
> attr : ID (EQ (ID|STRING))? ;
> 
> endtag
> 	:	 END_TAG
> 	;
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu May 27 13:41:49 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 May 2010 13:41:49 -0700
Subject: [antlr-interest] ANTLR v4 progress // switch fro v2.7.2
In-Reply-To: <C823D5C7.D7867%ruslan_zasukhin@valentina-db.com>
References: <C823D5C7.D7867%ruslan_zasukhin@valentina-db.com>
Message-ID: <EC5AE461-ACB8-4CC1-B979-1BFC2059BFE4@cs.usfca.edu>

Hi. My suggestion is to go to version 3 since it will be an easy jump to version 4 and I'm not really sure when version 4 is ready.
Ter
On May 26, 2010, at 9:54 PM, Ruslan Zasukhin wrote:

> On 27/5/10 2:18 AM, "Terence Parr" <Parrt at cs.usfca.edu> wrote:
> 
> Hi Terrence,
> 
>> Just passing along an example HTML subset lexer/parser using ANTLR v4; thanks
>> to  debugging and moral support from Oliver Zeigermann, we got the code
>> generation and runtime support working sufficiently to use the following
>> grammars.   generate some really nice code indeed. You will note that, except
>> for the enhancement of the lexer modes, the grammars are backward compatible
>> with v3 :)
> 
> Congratulation on progress. :)
> 
> My question is. Currently we still use ANTLR 2.7.2.
> Was not time jump to v3 yet.
> 
> What will be your advice:
>    jump in nearest months to v3, and later this will move smooth
>    to v4 also. Or just wait for v4 to avoid too big transfers?
> 
> 
> 
> -- 
> Best regards,
> 
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
> 
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
> 
> [I feel the need: the need for speed]
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kferrio at gmail.com  Thu May 27 15:45:10 2010
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 27 May 2010 15:45:10 -0700
Subject: [antlr-interest] ANTLR v4 progress
In-Reply-To: <D46C88BC-D7F4-4855-9D3D-3D4D404AD281@cs.usfca.edu>
References: <508FF9A0-4422-4415-927D-3A9FB1E40091@cs.usfca.edu>
	<1763527633-1274926071-cardhu_decombobulator_blackberry.rim.net-368439910-@bda428.bisx.prod.on.blackberry>
	<D46C88BC-D7F4-4855-9D3D-3D4D404AD281@cs.usfca.edu>
Message-ID: <AANLkTilZkfz5J7Qar_pK9KzhlAancNW2DI1vLSWImqce@mail.gmail.com>

I think I agree with that for all the situations which come to mind
easily.  Using lexer modes to infer semantic context would be sugar
frosting  at best and an invitation to poor design at worst.  Point
taken.

Kyle


On 5/27/10, Terence Parr <Parrt at cs.usfca.edu> wrote:
> The lexer/parser  really shouldn't interact since they can operate totally
> independently. In most cases what you really want is a scannerless parser,
> which I think I can easily implement as well.
>
> Ter
>
> On May 26, 2010, at 7:07 PM, kferrio at gmail.com wrote:
>
>> Way cool!  Just curious...is the modal state variable automatically
>> accessible to the parser?  Perhaps on a subchannel synced with the token
>> stream?  Sorry to be tuning in late...always interested in new paths to
>> semiosis.  :)   Anyway...I need to take a look at girhub and think up a
>> fun use.
>>
>> Kyle
>>
>> Sent from my Verizon Wireless BlackBerry
>>
>> -----Original Message-----
>> From: Terence Parr <Parrt at cs.usfca.edu>
>> Date: Wed, 26 May 2010 16:18:28
>> To: antlr-interest at antlr.org interest<antlr-interest at antlr.org>
>> Subject: [antlr-interest] ANTLR v4 progress
>>
>> Just passing along an example HTML subset lexer/parser using ANTLR v4;
>> thanks to  debugging and moral support from Oliver Zeigermann, we got the
>> code generation and runtime support working sufficiently to use the
>> following grammars.   generate some really nice code indeed. You will note
>> that, except for the enhancement of the lexer modes, the grammars are
>> backward compatible with v3 :)
>>
>> I still have a long way to go, but it's looking more & more useful (only
>> does LL(1) code generation at this point).
>>
>> Ter
>> ---------------------------
>> lexer grammar HTMLLexer;
>>
>> TAG_START : '<' {pushMode(INSIDE);} ;
>>
>> COMMENT : '<!--' .* '-->' {skip();} ;
>>
>> TEXT : ~'<'+ ;
>>
>> mode INSIDE;
>>
>> TAG_STOP : '>' {popMode();} ;
>>
>> END_TAG : '/' ID '>' {popMode();} ;
>>
>> ID : ('A'..'Z'|'a'..'z'|'0'..'9'|'_'|'#')+ ;
>>
>> EQ : '=' ;
>>
>> STRING : '"' .* '"'
>>       ;
>>
>> WS : ' '+ {skip();} ;
>>
>> ------------------------
>>
>> parser grammar HTMLParser;
>>
>> options { tokenVocab=HTMLLexer; }
>>
>> file : ( TAG_START (starttag | endtag) | TEXT)+ EOF ;
>>
>> starttag : ID attr* TAG_STOP ;
>>
>> attr : ID (EQ (ID|STRING))? ;
>>
>> endtag
>> 	:	 END_TAG
>> 	;
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From j at junkwallah.org  Thu May 27 15:45:52 2010
From: j at junkwallah.org (Junkman)
Date: Thu, 27 May 2010 15:45:52 -0700
Subject: [antlr-interest] greedy subrule option idiom
In-Reply-To: <4BFD7A76.8090506@junkwallah.org>
References: <4BFD7A76.8090506@junkwallah.org>
Message-ID: <4BFEF620.1020207@junkwallah.org>

Hello,

The following grammar generates error:

---------------------
grammar Test;

fragment
CHAR	:	. ;

STRING	:	'"' ( options {greedy=false;} : CHAR )* '"' ;

stmt	:	
	( . )+
	;

---------------------

The error message generated by "Check Grammar" option of Antlrwork (1.4) is:

[15:34:52] error(201): Test.g:6:47: The following alternatives can never
be matched: 2

I think it means it cannot exit the non-greedy subrule (of the lexer
rule STRING).

If I substitute "." directly for "CHAR", no error.

Is this the expected behavior?  Is there a problem with the grammar
given above?

Thanks for any insight/assistance.

J

Junkman wrote:
> Hello,
> 
> Following is a lexer rule to match quoted string that allows backslash
> escape sequence.
> 
> 
> STRING
> 	: 	 '"' ( options {greedy=false;} : ( ~ '\\' | '\\' . ) )* '"'
> 	;
> 
> 
> It seems to work.  But if you put the '*' operator inside the subrule
> like this:
> 
> 
> STRING
> 	: 	 '"' ( options {greedy=false;} : ( ~ '\\' | '\\' . )* ) '"'
> 	;
> 
> 
> It eats up everything to EOF.
> 
> It's as if the greedy option applies to the ((subrule)*) instead of the
> subrule itself, and only if the subrule is suffixed with '*' operator
> (or with '+') externally (as in (subrule)*).
> 
> To my eyes, the second version seems the "correct" one.
> 
> Thoughts?
> 
> J
> 


From haiscai2003 at yahoo.com  Fri May 28 00:50:03 2010
From: haiscai2003 at yahoo.com (H S)
Date: Fri, 28 May 2010 00:50:03 -0700 (PDT)
Subject: [antlr-interest] ANTLR3 C Target Runtime Error
Message-ID: <361797.85052.qm@web111706.mail.gq1.yahoo.com>



The code I am using is the one in the documentation found here:
http://www.antlr.org/api/C/index.html

I have just changed these two lines, just to make it compile:

tstream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, lxr->pLexer->tokSource);

if (psr->pParser->rec->errorCount > 0)

For the first one, I had added the TOKENSOURCE macro and for the second one I changed errorCount to getNumberOfSyntaxErrors.

That's really it.

Thanks,
Hai

________________________________
From: Jim Idle <jimi at temporal-wave.com>
To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
Sent: Thu, May 27, 2010 2:52:53 PM
Subject: Re: [antlr-interest] ANTLR3 C Target Runtime Error

Correct function, but obviously you are doing something wrong because the hundreds of parsers out there already would not be there if there was a bug as fundamental as this one. Follow the C examples or post your driver code so we can see what you are doing wrong.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of H S
> Sent: Thursday, May 27, 2010 2:43 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3 C Target Runtime Error
> 
> Hi,
> 
> There seems to be a bug in the generated C sources (antlr3lexer.c): the
> state variable is NULL and dues to that it crashes later.
> It is NULL because LangParserNew passes NULL to LangParserNew SSD, etc.
> I have tried a few versions (3.1.3, 3.2,etc ) and all seem to have this
> problem.
> Am I calling the wrong function (LangParserNew)?
> 
> Thanks.
> Hai
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


      

From george.soom at siria.cc  Fri May 28 01:12:01 2010
From: george.soom at siria.cc (George Soom)
Date: Fri, 28 May 2010 08:12:01 GMT
Subject: [antlr-interest] parsing rules
Message-ID: <20100528081201.26961.qmail@info9.gawab.com>

Thank You, again

Sadly this leads me to some serious misunderstandings. My main job is
computing using
Maxima and Fortran, so this is all a bit too new for me. A
example-by-example is all I need.
Let me present You a complete simple grammar and template:
----
grammar TestGrammar;

options {
  output = template;
}

prog 
	: statement+
	; 

statement
	: assign
	| print
	;

assign
	:ID ':=' INT ';' -> assign(x={$ID.text},y={$INT.text})
	; 

print
	: 'toScreen' '(' STRING ')' ';' -> print(string={$STRING.text})
	;

ID: 'a'..'z' + ;
INT:'0'..'9' + ;
STRING: (ID|INT)+ ;
-----

and templates:

----
group TestTemplate;

assign(id,int) ::= "<id> = <int>"
print(string) ::= "print <string>"
----

What do I need to add to get translated result from parser.prog() ?

George

Jim Idle <jimi at temporal-wave.com> wrote on 27 May 2010, 05:00 PM:
Subject: Re: [antlr-interest] parsing rules
>
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of George Soom
>> Sent: Thursday, May 27, 2010 3:52 AM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] parsing rules
>> 
>> Thank You,
>> 
>> now I understand my mistake. However, can You give me a bit bigger
>> example?
>
>OK. I use this (all the time ;-):
>
>statements
>    :   s+=statement*
>
>        // The list of statements just needs to go on up the chain, but we
>        // still use a template in our template group in case we ever
>        // wish to adorn statements with something or the target changes
>        //
>        -> statements(stats={$s})
>    ;
>
>Then a template of:
>
>statements(stats) ::= <<
><stats: {<it>}; separator="\n">
>>>
>
>(Sometimes you will need to iterate, sometimes not, depending on what you
>did lower down the chain. 
>
>Other constructs are:
>
>    |   COMMENT                 
>            {
>                // Get rid of leading spaces and the ' character, generate
>the comment line
>                //
>                $st =
>%lineComment(comment={$COMMENT.text.trim().substring(1)});
>            }
>
>To use a template within an action.
>
>And:
>
>        {
>            // Ask the code generator to deal with the assignment
>            //
>            $st = codeGen.assign($v.st, $v.symbol, $expression.st,
>$expression.symbol, $expression.type);
>        }
>
>To call a method that returns a template (or List).
>
>And:
>
>	:	^(CALL
>
>            id=IDENTIFIER
>            {
>                $st = %({$id.text})();
>
>                f = (Function)localSymbols.lookup($id.text);
>                %{$st}.instr=f.getInstruction();
>
>                argNum = 0;
>            }
>
>...
>
>
>To instantiate a template, the name of which is held in some String.
>
>
>Jim
>
>
>
>
>
>
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe:
>http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From janee at softweave.com  Fri May 28 05:47:20 2010
From: janee at softweave.com (Jane Eisenstein)
Date: Fri, 28 May 2010 08:47:20 -0400
Subject: [antlr-interest] short circuiting further evaluation
Message-ID: <C29DD447-5BC9-44D5-8A55-4777260B5263@softweave.com>

I'm working with a simple expression grammar:

condition:	conditional_expression  EOF
	;

conditional_expression 
	:	conditional_term  
		(  OR conditional_expression  )?
	;

conditional_term 
	:	conditional_factor
		( AND conditional_term  )? 
	;

conditional_factor 
	:	conditional_primary
	|	NOT conditional_primary
	;

conditional_primary 
	: ID 
	| LEFT_PAREN conditional_expression RIGHT_PAREN 
	;

At runtime, ID tokens evaluate to either true or false. Once it is clear the condition as a whole will evaluate to either true or false, I'd like to stop the evaluation and return the value of the condition. So far, all I've managed to do is short-circuit further ID evaluations once an upper level outcome is know.

Is there a way to short circuit the entire parse? I'm not sure how to even tell it would be time to do so.

Jane





From janee at softweave.com  Fri May 28 05:50:00 2010
From: janee at softweave.com (Jane Eisenstein)
Date: Fri, 28 May 2010 08:50:00 -0400
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <C29DD447-5BC9-44D5-8A55-4777260B5263@softweave.com>
References: <C29DD447-5BC9-44D5-8A55-4777260B5263@softweave.com>
Message-ID: <371E1B74-71D6-444A-A780-1C8F26EBEE98@softweave.com>

I also don't know how to short circuit further parsing of sub trees when appropriate. I suspect these problems are related. :-)

Jane

On May 28, 2010, at 8:47 AM, Jane Eisenstein wrote:

> I'm working with a simple expression grammar:
> 
> condition:	conditional_expression  EOF
> 	;
> 
> conditional_expression 
> 	:	conditional_term  
> 		(  OR conditional_expression  )?
> 	;
> 
> conditional_term 
> 	:	conditional_factor
> 		( AND conditional_term  )? 
> 	;
> 
> conditional_factor 
> 	:	conditional_primary
> 	|	NOT conditional_primary
> 	;
> 
> conditional_primary 
> 	: ID 
> 	| LEFT_PAREN conditional_expression RIGHT_PAREN 
> 	;
> 
> At runtime, ID tokens evaluate to either true or false. Once it is clear the condition as a whole will evaluate to either true or false, I'd like to stop the evaluation and return the value of the condition. So far, all I've managed to do is short-circuit further ID evaluations once an upper level outcome is know.
> 
> Is there a way to short circuit the entire parse? I'm not sure how to even tell it would be time to do so.
> 
> Jane
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rschulz at sonic.net  Fri May 28 06:25:49 2010
From: rschulz at sonic.net (Randall R Schulz)
Date: Fri, 28 May 2010 06:25:49 -0700
Subject: [antlr-interest] parsing rules
In-Reply-To: <20100526110118.23812.qmail@info9.gawab.com>
References: <20100526110118.23812.qmail@info9.gawab.com>
Message-ID: <201005280625.49759.rschulz@sonic.net>

On Wednesday May 26 2010, George Soom wrote:
> Hi,
>
> I have to rewrite several files with mathematical text in them. Text
> substitutions are really simple (e.g. 'a=4' -> 'a:=4;' and similar).
> Input is in form:
> ----
> a=4
> b=3
> draw(a)
> draw(b)
> ----
>
> Needed output
> -----
> a:=4;
> b:=3;
> draw(a, "constant arguments")
> draw(b, "constant arguments")
> ----

Why don't you just use sed?


Randall Schulz

From john.farr at medtronic.com  Fri May 28 07:22:24 2010
From: john.farr at medtronic.com (Farr, John)
Date: Fri, 28 May 2010 09:22:24 -0500
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <C29DD447-5BC9-44D5-8A55-4777260B5263@softweave.com>
References: <C29DD447-5BC9-44D5-8A55-4777260B5263@softweave.com>
Message-ID: <0E0B60BD6BB03B4FA5F17D5C21AE4B3617AF70BE6C@MSPM1BMSGM102.ent.core.medtronic.com>

The message I posted on April 8 with the subject "Processing/traversing a rule -- dealing with conditionals" may help you.

--John


-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jane Eisenstein
Sent: Friday, May 28, 2010 7:47 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] short circuiting further evaluation

I'm working with a simple expression grammar:

condition:	conditional_expression  EOF
	;

conditional_expression 
	:	conditional_term  
		(  OR conditional_expression  )?
	;

conditional_term 
	:	conditional_factor
		( AND conditional_term  )? 
	;

conditional_factor 
	:	conditional_primary
	|	NOT conditional_primary
	;

conditional_primary 
	: ID 
	| LEFT_PAREN conditional_expression RIGHT_PAREN 
	;

At runtime, ID tokens evaluate to either true or false. Once it is clear the condition as a whole will evaluate to either true or false, I'd like to stop the evaluation and return the value of the condition. So far, all I've managed to do is short-circuit further ID evaluations once an upper level outcome is know.

Is there a way to short circuit the entire parse? I'm not sure how to even tell it would be time to do so.

Jane





List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


[CONFIDENTIALITY AND PRIVACY NOTICE]

Information transmitted by this email is proprietary to Medtronic and is intended for use only by the individual or entity to which it is addressed, and may contain information that is private, privileged, confidential or exempt from disclosure under applicable law. If you are not the intended recipient or it appears that this mail has been forwarded to you without proper authority, you are notified that any use or dissemination of this information in any manner is strictly prohibited. In such cases, please delete this mail from your records.
 
To view this notice in other languages you can either select the following link or manually copy and paste the link into the address bar of a web browser: http://emaildisclaimer.medtronic.com


From jimi at temporal-wave.com  Fri May 28 10:07:38 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 28 May 2010 10:07:38 -0700
Subject: [antlr-interest] parsing rules
In-Reply-To: <20100528081201.26961.qmail@info9.gawab.com>
Message-ID: <66cced06f7c4fa4b9470b4b989178636@temporal-wave.com>

I think  you need to work through the examples in the book as everything that you need to do this is in my answer to you below. Other than writing it for you, there is not much more to show you!

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of George Soom
> Sent: Friday, May 28, 2010 1:12 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] parsing rules
> 
> Thank You, again
> 
> Sadly this leads me to some serious misunderstandings. My main job is
> computing using
> Maxima and Fortran, so this is all a bit too new for me. A
> example-by-example is all I need.
> Let me present You a complete simple grammar and template:
> ----
> grammar TestGrammar;
> 
> options {
>   output = template;
> }
> 
> prog
> 	: s+=statement+
       ->prog(stats={$s})
> 	;
> 
> statement
> 	: assign { $st = $assign.st; }
> 	| print { $st = $print.st; }
> 	;
> 
> assign
> 	:ID ':=' INT ';' -> assign(x={$ID.text},y={$INT.text})
> 	;
> 
> print
> 	: 'toScreen' '(' STRING ')' ';' -> print(string={$STRING.text})
> 	;
> 
> ID: 'a'..'z' + ;
> INT:'0'..'9' + ;
> STRING: (ID|INT)+ ;
> -----
> 
> and templates:
> 
> ----
> group TestTemplate;
> 
> assign(id,int) ::= "<id> = <int>"
> print(string) ::= "print <string>"
prog(stats) ::= <<
<stats: {<it>}; separator="\n">
>>

> ----
> 
> What do I need to add to get translated result from parser.prog() ?

Get an instance of prog, do a toString on it. It's all in the book and also check the downloadable examples.

Jim




From j at junkwallah.org  Fri May 28 11:21:29 2010
From: j at junkwallah.org (Junkman)
Date: Fri, 28 May 2010 11:21:29 -0700
Subject: [antlr-interest] greedy subrule option idiom
In-Reply-To: <4BFEF620.1020207@junkwallah.org>
References: <4BFD7A76.8090506@junkwallah.org> <4BFEF620.1020207@junkwallah.org>
Message-ID: <4C0009A9.2010409@junkwallah.org>

Here is another variation of the grammar:

------------------

grammar Test;

fragment
CHAR	:	'\u0000'..'#' | '$'..'\uffff' ;

STRING	:	'##' ( options {greedy=false;} : CHAR )* '##' ;

stmt	:	
	( . )+
	;


--------------------

This generates grammar check error just like the one in my previous post
(attached at the bottom).

The error goes away if I pull the character '#' out of CHAR and inline
it into STRING with '|' operator next to CHAR like this:

--------------------

grammar Test;

fragment
CHAR	:	'\u0000'..'"' | '$'..'\uffff' ;

STRING	:	'##' ( options {greedy=false;} : CHAR | '#' )* '##' ;

stmt	:	
	( . )+
	;

---------------------

Looks like the DFA needs '#' at the top level of the greedy subrule
because the character also match the beginning of the exit branch (and
hence require more lookahead to decide).

I'd like to know if this is known (and consistent) behavior.  Or perhaps
I'm way off because I missed something very basic in the grammars above.

I did a quick search of the list archive using the MarkMail link Jim
provided, and did find a recent thread on non-greedy loop, but it
concerns suggestion for v4 and not sure it's directly applicable to this
question.

Sorry if it seems like I'm beating a dead horse.  Being a noob makes me
want to dot every i and j twice.

Junkman wrote:
> Hello,
> 
> The following grammar generates error:
> 
> ---------------------
> grammar Test;
> 
> fragment
> CHAR	:	. ;
> 
> STRING	:	'"' ( options {greedy=false;} : CHAR )* '"' ;
> 
> stmt	:	
> 	( . )+
> 	;
> 
> ---------------------
> 
> The error message generated by "Check Grammar" option of Antlrwork (1.4) is:
> 
> [15:34:52] error(201): Test.g:6:47: The following alternatives can never
> be matched: 2
> 
> I think it means it cannot exit the non-greedy subrule (of the lexer
> rule STRING).
> 
> If I substitute "." directly for "CHAR", no error.
> 
> Is this the expected behavior?  Is there a problem with the grammar
> given above?
> 
> Thanks for any insight/assistance.
> 
> J
> 
> Junkman wrote:
>> Hello,
>>
>> Following is a lexer rule to match quoted string that allows backslash
>> escape sequence.
>>
>>
>> STRING
>> 	: 	 '"' ( options {greedy=false;} : ( ~ '\\' | '\\' . ) )* '"'
>> 	;
>>
>>
>> It seems to work.  But if you put the '*' operator inside the subrule
>> like this:
>>
>>
>> STRING
>> 	: 	 '"' ( options {greedy=false;} : ( ~ '\\' | '\\' . )* ) '"'
>> 	;
>>
>>
>> It eats up everything to EOF.
>>
>> It's as if the greedy option applies to the ((subrule)*) instead of the
>> subrule itself, and only if the subrule is suffixed with '*' operator
>> (or with '+') externally (as in (subrule)*).
>>
>> To my eyes, the second version seems the "correct" one.
>>
>> Thoughts?
>>
>> J
>>
> 
> 


From grzegon at poczta.onet.pl  Fri May 28 12:00:36 2010
From: grzegon at poczta.onet.pl (Grzegorz)
Date: Fri, 28 May 2010 21:00:36 +0200
Subject: [antlr-interest] Antlr wiki access
Message-ID: <201005282100.36306.grzegon@poczta.onet.pl>

Hello to all ANTLR users,

 I am new to ANTLR and currently in the learning and reading phase. I use the 
content put on Confluence/wiki. Which I find really helpful.

 I wanted to ask what should I do if I spot some mistakes within wiki? 
Do I need an account there? If so, how do I get one?
Is commenting under the text the preferred way to notify?

Best regards,
Grzegorz

From kcarroll at signmgmt.com  Fri May 28 12:49:22 2010
From: kcarroll at signmgmt.com (Kevin Carroll)
Date: Fri, 28 May 2010 14:49:22 -0500
Subject: [antlr-interest] "Missing" Tokens Do Not Cause Errors
Message-ID: <80A5CDD2686EA042AE41C526324D445589B88E9BBF@EXCHANGE2007.signmgmt.local>

Here are a couple of simple rules extracted from a combined grammar I have:

RETURNS                             :               ('R'|'r')'eturns'   { $text = "RETURNS"; } ;

returnsStatement
                :               RETURNS ':' type ';'          ->            ^(RETURNS type)
                ;

(type's definition is, I think, irrelevant.  It matches the typical things - int, double, etc.).

Note that the rule uses the rewrite syntax and omits the ':' and ';' tokens in the AST.

I am observing that my parser accepts inputs even when these tokens are missing.

For example, the line:    "returns double" is accepted (note, no ':' or ';').  In stepping through the parse, the Match() method calls that should match the ':' and ';' return '<missing ':'>' and '<missing ';'>', respectively, yet do not fail.  I understand that a feature of ANTLR is that missing tokens are sometimes automatically inserted to allow the parse to proceed, but shouldn't the erroneous line(s) be reported?

Is this behavior correct and/or expected?  If not, does anyone have any clues as to what might be going wrong?

Thanks,
Kevin Carroll


From jimi at temporal-wave.com  Fri May 28 13:31:59 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 28 May 2010 13:31:59 -0700
Subject: [antlr-interest] "Missing" Tokens Do Not Cause Errors
In-Reply-To: <80A5CDD2686EA042AE41C526324D445589B88E9BBF@EXCHANGE2007.signmgmt.local>
Message-ID: <f962fa9bd5c01a44837262e331012b5c@temporal-wave.com>

Sounds like you are using ANTLRWorks? They are reported, but they don't thrown exceptions.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kevin Carroll
> Sent: Friday, May 28, 2010 12:49 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] "Missing" Tokens Do Not Cause Errors
> 
> Here are a couple of simple rules extracted from a combined grammar I
> have:
> 
> RETURNS                             :               ('R'|'r')'eturns'
> { $text = "RETURNS"; } ;
> 
> returnsStatement
>                 :               RETURNS ':' type ';'          ->
> ^(RETURNS type)
>                 ;
> 
> (type's definition is, I think, irrelevant.  It matches the typical
> things - int, double, etc.).
> 
> Note that the rule uses the rewrite syntax and omits the ':' and ';'
> tokens in the AST.
> 
> I am observing that my parser accepts inputs even when these tokens are
> missing.
> 
> For example, the line:    "returns double" is accepted (note, no ':' or
> ';').  In stepping through the parse, the Match() method calls that
> should match the ':' and ';' return '<missing ':'>' and '<missing
> ';'>', respectively, yet do not fail.  I understand that a feature of
> ANTLR is that missing tokens are sometimes automatically inserted to
> allow the parse to proceed, but shouldn't the erroneous line(s) be
> reported?
> 
> Is this behavior correct and/or expected?  If not, does anyone have any
> clues as to what might be going wrong?
> 
> Thanks,
> Kevin Carroll
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From anteusz at freemail.hu  Fri May 28 14:45:56 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Fri, 28 May 2010 23:45:56 +0200
Subject: [antlr-interest] How would you write newline() in Antrl 3?
In-Reply-To: <f962fa9bd5c01a44837262e331012b5c@temporal-wave.com>
References: <f962fa9bd5c01a44837262e331012b5c@temporal-wave.com>
Message-ID: <4C003994.6000706@freemail.hu>

Hi,

How would you write newline() in Antlr 3?
I saw in lexer action in Antlr 2.
Thanks.



Marton Papp


From anteusz at freemail.hu  Fri May 28 14:49:24 2010
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Fri, 28 May 2010 23:49:24 +0200
Subject: [antlr-interest] Lexer.java is not generated but Parser.java yes
In-Reply-To: <f962fa9bd5c01a44837262e331012b5c@temporal-wave.com>
References: <f962fa9bd5c01a44837262e331012b5c@temporal-wave.com>
Message-ID: <4C003A64.50502@freemail.hu>

Hi,

I have a grammar from which Antlr 3 - after compilation- generates a 
parser.java file but lexer java  file is not generated.

How can I figure out what is wrong? I use AntlrWorks 1.4.
What is not there a lexer file?


Thanks..

Marton Papp


From temporaryemail at comcast.net  Fri May 28 17:06:21 2010
From: temporaryemail at comcast.net (Bob)
Date: Fri, 28 May 2010 17:06:21 -0700
Subject: [antlr-interest] Can "returns" return an aggregate?
Message-ID: <001c01cafec2$c5665910$50330b30$@net>

Is there a way to return an aggregate ?

 

struct A { int m; double n; };

extern struct A foo(void);

 

myrule returns [struct A a] 

    : X

     { $a = foo(); }

  ;


From kcarroll at signmgmt.com  Fri May 28 18:39:24 2010
From: kcarroll at signmgmt.com (Kevin Carroll)
Date: Fri, 28 May 2010 20:39:24 -0500
Subject: [antlr-interest] "Missing" Tokens Do Not Cause Errors
In-Reply-To: <f962fa9bd5c01a44837262e331012b5c@temporal-wave.com>
References: <80A5CDD2686EA042AE41C526324D445589B88E9BBF@EXCHANGE2007.signmgmt.local>
	<f962fa9bd5c01a44837262e331012b5c@temporal-wave.com>
Message-ID: <80A5CDD2686EA042AE41C526324D445589B88E9BD3@EXCHANGE2007.signmgmt.local>

Jim,

Actually, I'm using the C# 3.2 beta with the parser and lexer files being generated using the stand-alone windows exe from Sam Harwell.

When you say "they are reported", how and to whom/what are they reported?

Thanks,
Kevin

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Friday, May 28, 2010 3:32 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] "Missing" Tokens Do Not Cause Errors

Sounds like you are using ANTLRWorks? They are reported, but they don't thrown exceptions.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kevin Carroll
> Sent: Friday, May 28, 2010 12:49 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] "Missing" Tokens Do Not Cause Errors
>
> Here are a couple of simple rules extracted from a combined grammar I
> have:
>
> RETURNS                             :               ('R'|'r')'eturns'
> { $text = "RETURNS"; } ;
>
> returnsStatement
>                 :               RETURNS ':' type ';'          ->
> ^(RETURNS type)
>                 ;
>
> (type's definition is, I think, irrelevant.  It matches the typical
> things - int, double, etc.).
>
> Note that the rule uses the rewrite syntax and omits the ':' and ';'
> tokens in the AST.
>
> I am observing that my parser accepts inputs even when these tokens are
> missing.
>
> For example, the line:    "returns double" is accepted (note, no ':' or
> ';').  In stepping through the parse, the Match() method calls that
> should match the ':' and ';' return '<missing ':'>' and '<missing
> ';'>', respectively, yet do not fail.  I understand that a feature of
> ANTLR is that missing tokens are sometimes automatically inserted to
> allow the parse to proceed, but shouldn't the erroneous line(s) be
> reported?
>
> Is this behavior correct and/or expected?  If not, does anyone have any
> clues as to what might be going wrong?
>
> Thanks,
> Kevin Carroll
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From lucabelluccini at gmail.com  Sat May 29 11:28:34 2010
From: lucabelluccini at gmail.com (Luca Belluccini)
Date: Sat, 29 May 2010 20:28:34 +0200
Subject: [antlr-interest] Creating a Python-like language using Antlr 3.2
Message-ID: <AANLkTimL9BiDfkuSwBeIfRSQxSpT8h4ykb1nCGRimc-T@mail.gmail.com>

I'm trying to develop a Python-like language for academic purposes.
This language will be turned into Twincat language (a language similar
to PASCAL used to control BECKHOFF PLCs).
We're not implementing classes or so on, but it will meet the
following requirements:
- INDENT/DEDENT code blocks
- data types will be handled as virtual classes (e.g. INTEGER in
Twincat is mapped using a "fake" out.integer object in case of output
data, in.integer in case of input data; out.time for TIME variables
and so on...)
I was trying to edit correctly the Python grammars written by?Terence
Parr and Loring Craymer.
I understood mostly the whole grammar (except some options such as
'greedy'). I bought the book "The Definitive ANTLR Reference" and I
read some stuff about parsing Python and multiple token emission.
The implementations I found, 2.5 and 2.3.3 are using a PythonTokenStream.java.
Is it possible to use the following code instead of the specific
PythonTokenStream Class (and add the INDENT/DEDENT rule into the Antlr
Grammar file, as in the hint at page 110) ?

@lexer::members {
List tokens = new ArrayList();
public void emit(Token token) {
        state.token = token;
    	tokens.add(token);
}
public Token nextToken() {
    	super.nextToken();
        if ( tokens.size()==0 ) {
            return Token.EOF_TOKEN;
        }
        return (Token)tokens.remove(0);
}
}

Thanks in advance, I hope to read some comments.

From janee at softweave.com  Sat May 29 14:15:56 2010
From: janee at softweave.com (Jane Eisenstein)
Date: Sat, 29 May 2010 17:15:56 -0400
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <0E0B60BD6BB03B4FA5F17D5C21AE4B3617AF70BE6C@MSPM1BMSGM102.ent.core.medtronic.com>
References: <C29DD447-5BC9-44D5-8A55-4777260B5263@softweave.com>
	<0E0B60BD6BB03B4FA5F17D5C21AE4B3617AF70BE6C@MSPM1BMSGM102.ent.core.medtronic.com>
Message-ID: <78F38DAF-E6BF-44B9-A21D-4A2203E41FCC@softweave.com>

Thanks. Using gated semantic predicates nicely simplifies the logic in each rule (while doubling the number of rules). 

It doesn't stop the parse though -- just the evaluation. 

Is there a clean way to determine the condition's final result and return it without having to complete the parse of the entire expression? 

Jane


On May 28, 2010, at 10:22 AM, Farr, John wrote:

> The message I posted on April 8 with the subject "Processing/traversing a rule -- dealing with conditionals" may help you.
> 
> --John
> 
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jane Eisenstein
> Sent: Friday, May 28, 2010 7:47 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] short circuiting further evaluation
> 
> I'm working with a simple expression grammar:
> 
> condition:	conditional_expression  EOF
> 	;
> 
> conditional_expression
> 	:	conditional_term
> 		(  OR conditional_expression  )?
> 	;
> 
> conditional_term
> 	:	conditional_factor
> 		( AND conditional_term  )?
> 	;
> 
> conditional_factor
> 	:	conditional_primary
> 	|	NOT conditional_primary
> 	;
> 
> conditional_primary
> 	: ID
> 	| LEFT_PAREN conditional_expression RIGHT_PAREN
> 	;
> 
> At runtime, ID tokens evaluate to either true or false. Once it is clear the condition as a whole will evaluate to either true or false, I'd like to stop the evaluation and return the value of the condition. So far, all I've managed to do is short-circuit further ID evaluations once an upper level outcome is know.
> 
> Is there a way to short circuit the entire parse? I'm not sure how to even tell it would be time to do so.
> 
> Jane
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> [CONFIDENTIALITY AND PRIVACY NOTICE]
> 
> Information transmitted by this email is proprietary to Medtronic and is intended for use only by the individual or entity to which it is addressed, and may contain information that is private, privileged, confidential or exempt from disclosure under applicable law. If you are not the intended recipient or it appears that this mail has been forwarded to you without proper authority, you are notified that any use or dissemination of this information in any manner is strictly prohibited. In such cases, please delete this mail from your records.
> 
> To view this notice in other languages you can either select the following link or manually copy and paste the link into the address bar of a web browser: http://emaildisclaimer.medtronic.com
> 


From jimi at temporal-wave.com  Sat May 29 15:18:52 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 29 May 2010 15:18:52 -0700
Subject: [antlr-interest] Can "returns" return an aggregate?
In-Reply-To: <001c01cafec2$c5665910$50330b30$@net>
Message-ID: <adf59cec1eb4af45a650b43453e9e328@temporal-wave.com>

You might have more success if you said what target you were using :-) Also remember antlr.markmail.com.

The generated routines already return a struct, so you cannot put a struct in that struct. You need to return a pointer to a struct.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Friday, May 28, 2010 5:06 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Can "returns" return an aggregate?
> 
> Is there a way to return an aggregate ?
> 
> 
> 
> struct A { int m; double n; };
> 
> extern struct A foo(void);
> 
> 
> 
> myrule returns [struct A a]
> 
>     : X
> 
>      { $a = foo(); }
> 
>   ;
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From lgcraymer at yahoo.com  Sat May 29 15:25:44 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sat, 29 May 2010 15:25:44 -0700 (PDT)
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <78F38DAF-E6BF-44B9-A21D-4A2203E41FCC@softweave.com>
References: <C29DD447-5BC9-44D5-8A55-4777260B5263@softweave.com>
	<0E0B60BD6BB03B4FA5F17D5C21AE4B3617AF70BE6C@MSPM1BMSGM102.ent.core.medtronic.com>
	<78F38DAF-E6BF-44B9-A21D-4A2203E41FCC@softweave.com>
Message-ID: <303550.64055.qm@web55904.mail.re3.yahoo.com>

Don't walk the tree to evaluate the expression; walk the tree to generate byte code and then interpret the byte code.  The overall problem then gets simpler and the resulting code runs faster.

--Loring



----- Original Message ----
> From: Jane Eisenstein <janee at softweave.com>
> To: "Farr, John" <john.farr at medtronic.com>
> Cc: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Sent: Sat, May 29, 2010 2:15:56 PM
> Subject: Re: [antlr-interest] short circuiting further evaluation
> 
> Thanks. Using gated semantic predicates nicely simplifies the logic in each rule 
> (while doubling the number of rules). 

It doesn't stop the parse though 
> -- just the evaluation. 

Is there a clean way to determine the 
> condition's final result and return it without having to complete the parse of 
> the entire expression? 

Jane


On May 28, 2010, at 10:22 AM, 
> Farr, John wrote:

> The message I posted on April 8 with the subject 
> "Processing/traversing a rule -- dealing with conditionals" may help 
> you.
> 
> --John
> 
> 
> -----Original 
> Message-----
> From: 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org 
> [mailto:
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org] 
> On Behalf Of Jane Eisenstein
> Sent: Friday, May 28, 2010 7:47 AM
> 
> To: 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
> 
> Subject: [antlr-interest] short circuiting further evaluation
> 
> 
> I'm working with a simple expression grammar:
> 
> 
> condition:    conditional_expression  EOF
> 
>     ;
> 
> conditional_expression
> 
>     :    conditional_term
> 
>         (  OR conditional_expression  
> )?
>     ;
> 
> conditional_term
> 
>     :    conditional_factor
> 
>         ( AND conditional_term  )?
> 
>     ;
> 
> conditional_factor
> 
>     :    conditional_primary
> 
>     |    NOT conditional_primary
> 
>     ;
> 
> conditional_primary
> 
>     : ID
>     | LEFT_PAREN 
> conditional_expression RIGHT_PAREN
>     ;
> 
> 
> At runtime, ID tokens evaluate to either true or false. Once it is clear the 
> condition as a whole will evaluate to either true or false, I'd like to stop the 
> evaluation and return the value of the condition. So far, all I've managed to do 
> is short-circuit further ID evaluations once an upper level outcome is 
> know.
> 
> Is there a way to short circuit the entire parse? I'm not 
> sure how to even tell it would be time to do so.
> 
> Jane
> 
> 
> 
> 
> 
> 
> List: 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> [CONFIDENTIALITY AND PRIVACY NOTICE]
> 
> 
> Information transmitted by this email is proprietary to Medtronic and is 
> intended for use only by the individual or entity to which it is addressed, and 
> may contain information that is private, privileged, confidential or exempt from 
> disclosure under applicable law. If you are not the intended recipient or it 
> appears that this mail has been forwarded to you without proper authority, you 
> are notified that any use or dissemination of this information in any manner is 
> strictly prohibited. In such cases, please delete this mail from your 
> records.
> 
> To view this notice in other languages you can either 
> select the following link or manually copy and paste the link into the address 
> bar of a web browser: 
> target=_blank >http://emaildisclaimer.medtronic.com
> 
> 


List: 
> target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-address" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-address


      


From jimi at temporal-wave.com  Sat May 29 16:28:11 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 29 May 2010 16:28:11 -0700
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <303550.64055.qm@web55904.mail.re3.yahoo.com>
Message-ID: <603763b2663144479173ce9255e59297@temporal-wave.com>

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Loring Craymer
> Sent: Saturday, May 29, 2010 3:26 PM
> 
> Don't walk the tree to evaluate the expression; walk the tree to
> generate byte code and then interpret the byte code.  The overall
> problem then gets simpler and the resulting code runs faster.
> 

Especially as code generation is almost trivial these days with ASM or LLVM (depending on your needs). If you can live with the JVM, then just use ASM and let the VM deal with it.

While writing a tree based interpreter is a useful experiment and learning aid, I think that overall, interpreting via the tree is somewhat awkward. Just my opinion of course.

Jim


> --Loring
> 
> 
> 
> ----- Original Message ----
> > From: Jane Eisenstein <janee at softweave.com>
> > To: "Farr, John" <john.farr at medtronic.com>
> > Cc: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> > Sent: Sat, May 29, 2010 2:15:56 PM
> > Subject: Re: [antlr-interest] short circuiting further evaluation
> >
> > Thanks. Using gated semantic predicates nicely simplifies the logic
> in each rule
> > (while doubling the number of rules).
> 
> It doesn't stop the parse though
> > -- just the evaluation.
> 
> Is there a clean way to determine the
> > condition's final result and return it without having to complete the
> parse of
> > the entire expression?
> 
> Jane
> 
> 
> On May 28, 2010, at 10:22 AM,
> > Farr, John wrote:
> 
> > The message I posted on April 8 with the subject
> > "Processing/traversing a rule -- dealing with conditionals" may help
> > you.
> >
> > --John
> >
> >
> > -----Original
> > Message-----
> > From:
> > href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-
> bounces at antlr.org
> > [mailto:
> > href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-
> bounces at antlr.org]
> > On Behalf Of Jane Eisenstein
> > Sent: Friday, May 28, 2010 7:47 AM
> >
> > To:
> > href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
> >
> > Subject: [antlr-interest] short circuiting further evaluation
> >
> >
> > I'm working with a simple expression grammar:
> >
> >
> > condition:    conditional_expression  EOF
> >
> >     ;
> >
> > conditional_expression
> >
> >     :    conditional_term
> >
> >         (  OR conditional_expression
> > )?
> >     ;
> >
> > conditional_term
> >
> >     :    conditional_factor
> >
> >         ( AND conditional_term  )?
> >
> >     ;
> >
> > conditional_factor
> >
> >     :    conditional_primary
> >
> >     |    NOT conditional_primary
> >
> >     ;
> >
> > conditional_primary
> >
> >     : ID
> >     | LEFT_PAREN
> > conditional_expression RIGHT_PAREN
> >     ;
> >
> >
> > At runtime, ID tokens evaluate to either true or false. Once it is
> clear the
> > condition as a whole will evaluate to either true or false, I'd like
> to stop the
> > evaluation and return the value of the condition. So far, all I've
> managed to do
> > is short-circuit further ID evaluations once an upper level outcome
> is
> > know.
> >
> > Is there a way to short circuit the entire parse? I'm not
> > sure how to even tell it would be time to do so.
> >
> > Jane
> >
> >
> >
> >
> >
> >
> > List:
> > href="http://www.antlr.org/mailman/listinfo/antlr-interest"
> target=_blank
> > >http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> >
> > target=_blank
> > >http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
> >
> >
> > [CONFIDENTIALITY AND PRIVACY NOTICE]
> >
> >
> > Information transmitted by this email is proprietary to Medtronic and
> is
> > intended for use only by the individual or entity to which it is
> addressed, and
> > may contain information that is private, privileged, confidential or
> exempt from
> > disclosure under applicable law. If you are not the intended
> recipient or it
> > appears that this mail has been forwarded to you without proper
> authority, you
> > are notified that any use or dissemination of this information in any
> manner is
> > strictly prohibited. In such cases, please delete this mail from your
> > records.
> >
> > To view this notice in other languages you can either
> > select the following link or manually copy and paste the link into
> the address
> > bar of a web browser:
> > target=_blank >http://emaildisclaimer.medtronic.com
> >
> >
> 
> 
> List:
> > target=_blank
> > >http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> > href="http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address"
> > target=_blank
> > >http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From janee at softweave.com  Sun May 30 01:45:58 2010
From: janee at softweave.com (Jane Eisenstein)
Date: Sun, 30 May 2010 04:45:58 -0400
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <603763b2663144479173ce9255e59297@temporal-wave.com>
References: <603763b2663144479173ce9255e59297@temporal-wave.com>
Message-ID: <040D3DA5-DC2C-4C2D-ACA1-5724A2E752E5@softweave.com>

I have implemented evaluators for this little language that parse a token stream and others that parse an AST. The tree based evaluators are noticeably slower on a quad core Windows XP machine (though faster on dual core Intel-based Mac OS 10!). Versions using gated semantic predicates are marginally slower than those that don't use gated semantic predicates.

My goal is to evaluate thousands of these expressions as quickly as possible in a multi-threaded environment. How likely is it that generating Java byte code to be interpreted at run time would significantly increase the performance of those evaluations? 

Jane
  
On May 29, 2010, at 7:28 PM, Jim Idle wrote:

>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Loring Craymer
>> Sent: Saturday, May 29, 2010 3:26 PM
>> 
>> Don't walk the tree to evaluate the expression; walk the tree to
>> generate byte code and then interpret the byte code.  The overall
>> problem then gets simpler and the resulting code runs faster.
>> 
> 
> Especially as code generation is almost trivial these days with ASM or LLVM (depending on your needs). If you can live with the JVM, then just use ASM and let the VM deal with it.
> 
> While writing a tree based interpreter is a useful experiment and learning aid, I think that overall, interpreting via the tree is somewhat awkward. Just my opinion of course.
> 
> Jim
> 
> 
>> --Loring
>> 
>> 
>> 
>> ----- Original Message ----
>>> From: Jane Eisenstein <janee at softweave.com>
>>> To: "Farr, John" <john.farr at medtronic.com>
>>> Cc: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
>>> Sent: Sat, May 29, 2010 2:15:56 PM
>>> Subject: Re: [antlr-interest] short circuiting further evaluation
>>> 
>>> Thanks. Using gated semantic predicates nicely simplifies the logic
>> in each rule
>>> (while doubling the number of rules).
>> 
>> It doesn't stop the parse though
>>> -- just the evaluation.
>> 
>> Is there a clean way to determine the
>>> condition's final result and return it without having to complete the
>> parse of
>>> the entire expression?
>> 
>> Jane
>> 
>> 
>> On May 28, 2010, at 10:22 AM,
>>> Farr, John wrote:
>> 
>>> The message I posted on April 8 with the subject
>>> "Processing/traversing a rule -- dealing with conditionals" may help
>>> you.
>>> 
>>> --John
>>> 
>>> 
>>> -----Original
>>> Message-----
>>> From:
>>> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-
>> bounces at antlr.org
>>> [mailto:
>>> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-
>> bounces at antlr.org]
>>> On Behalf Of Jane Eisenstein
>>> Sent: Friday, May 28, 2010 7:47 AM
>>> 
>>> To:
>>> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
>>> 
>>> Subject: [antlr-interest] short circuiting further evaluation
>>> 
>>> 
>>> I'm working with a simple expression grammar:
>>> 
>>> 
>>> condition:    conditional_expression  EOF
>>> 
>>>    ;
>>> 
>>> conditional_expression
>>> 
>>>    :    conditional_term
>>> 
>>>        (  OR conditional_expression
>>> )?
>>>    ;
>>> 
>>> conditional_term
>>> 
>>>    :    conditional_factor
>>> 
>>>        ( AND conditional_term  )?
>>> 
>>>    ;
>>> 
>>> conditional_factor
>>> 
>>>    :    conditional_primary
>>> 
>>>    |    NOT conditional_primary
>>> 
>>>    ;
>>> 
>>> conditional_primary
>>> 
>>>    : ID
>>>    | LEFT_PAREN
>>> conditional_expression RIGHT_PAREN
>>>    ;
>>> 
>>> 
>>> At runtime, ID tokens evaluate to either true or false. Once it is
>> clear the
>>> condition as a whole will evaluate to either true or false, I'd like
>> to stop the
>>> evaluation and return the value of the condition. So far, all I've
>> managed to do
>>> is short-circuit further ID evaluations once an upper level outcome
>> is
>>> know.
>>> 
>>> Is there a way to short circuit the entire parse? I'm not
>>> sure how to even tell it would be time to do so.
>>> 
>>> Jane
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> List:
>>> href="http://www.antlr.org/mailman/listinfo/antlr-interest"
>> target=_blank
>>>> http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> 
>>> target=_blank
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> address
>>> 
>>> 
>>> 
>>> [CONFIDENTIALITY AND PRIVACY NOTICE]
>>> 
>>> 
>>> Information transmitted by this email is proprietary to Medtronic and
>> is
>>> intended for use only by the individual or entity to which it is
>> addressed, and
>>> may contain information that is private, privileged, confidential or
>> exempt from
>>> disclosure under applicable law. If you are not the intended
>> recipient or it
>>> appears that this mail has been forwarded to you without proper
>> authority, you
>>> are notified that any use or dissemination of this information in any
>> manner is
>>> strictly prohibited. In such cases, please delete this mail from your
>>> records.
>>> 
>>> To view this notice in other languages you can either
>>> select the following link or manually copy and paste the link into
>> the address
>>> bar of a web browser:
>>> target=_blank >http://emaildisclaimer.medtronic.com
>>> 
>>> 
>> 
>> 
>> List:
>>> target=_blank
>>>> http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>>> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> address"
>>> target=_blank
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> address
>> 
>> 
>> 
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From temporaryemail at comcast.net  Sun May 30 09:59:31 2010
From: temporaryemail at comcast.net (Bob)
Date: Sun, 30 May 2010 09:59:31 -0700
Subject: [antlr-interest] Can "returns" return an aggregate?
In-Reply-To: <adf59cec1eb4af45a650b43453e9e328@temporal-wave.com>
References: <001c01cafec2$c5665910$50330b30$@net>
	<adf59cec1eb4af45a650b43453e9e328@temporal-wave.com>
Message-ID: <000001cb0019$78f6e560$6ae4b020$@net>

My target is "C" (wish it was "C++") and because I'm accustomed to byson's
stack items being a user-definable union, e.g.:



  %union {                                                   <-------
declares a union of all rule return types
    void*	node;
    struct ModuleHeader moduleHeader;
  }

  %type	<moduleHeader>	module_ansi_header                 <------ declares
return type of the specific rule

  module_ansi_header
	: TokModule { struct ModuleHeader _mh; $$ = _mh; }   <------ rule
returns a ModuleHeader struct on stack 



it was natural for me to think I could do something similar in Antlar, like
this:

  @members
  {
   struct ModuleHeader { void* a; void* b };
  }


  module_ansi_header returns [struct ModuleHeader rslt]
  scope {
   struct ModuleHeader mh;
  }
    : TokModule { $rslt = mh; }



Which does not work. So I altered the rule:


  module_ansi_header returns [void* a,void* b] 
  scope {
   struct ModuleHeader mh;
  }
    : TokModule { $a = mh.a; $b = mh.b; }



My problem is `ModuleHeader` is undefined in "xxParser.h" because the
inclusion order is incorrect:

  xxParser.c:

   #include "xxParser.h"                 <-------- typedef for rule return
type refers to not-yet-defined `ModuleHeader`
       .....
   struct ModuleHeader { void* a; void* b };  <--- placement of @members
block


Being inexperienced with Antlr, I'm thinking I've just missed something
simple. 

Is there a way to get the "@members" block emitted prior to the inclusion of
the "xxParser.h" file?

Thanks,
Bob


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Saturday, May 29, 2010 3:19 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Can "returns" return an aggregate?

You might have more success if you said what target you were using :-) Also
remember antlr.markmail.com.

The generated routines already return a struct, so you cannot put a struct
in that struct. You need to return a pointer to a struct.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Friday, May 28, 2010 5:06 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Can "returns" return an aggregate?
> 
> Is there a way to return an aggregate ?
> 
> 
> 
> struct A { int m; double n; };
> 
> extern struct A foo(void);
> 
> 
> 
> myrule returns [struct A a]
> 
>     : X
> 
>      { $a = foo(); }
> 
>   ;
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Sun May 30 15:05:24 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 30 May 2010 15:05:24 -0700
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <040D3DA5-DC2C-4C2D-ACA1-5724A2E752E5@softweave.com>
Message-ID: <fdc24663739ac346be206132b32749e6@temporal-wave.com>

You will reap orders of magnitude improvement with a certainty of 100% :-) Interpreters can be perfectly fine when performance is not a watchword, as soon as it is, then generate some code and execute it. If your target is fxied and only one platform, then LLVM may well be a better bet, but ASM is trivial to learn 9basically, write the Java class you want to generate (include all the things you will need to generate) and compile it, then ask ASM to build the Java that would generate that class - then you have all the code snippets you need to call from the AST walker and generate a Java class- you can get that going a lot quicker than your tree based interpreter, then you get the JIT advantage from the JVM for free. 

Of course, if you generated assembler directly, or generated C and compiled it, you would usually get an even better performing result.

Jim

> -----Original Message-----
> From: Jane Eisenstein [mailto:janee at softweave.com]
> Sent: Sunday, May 30, 2010 1:46 AM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] short circuiting further evaluation
> 
> I have implemented evaluators for this little language that parse a
> token stream and others that parse an AST. The tree based evaluators
> are noticeably slower on a quad core Windows XP machine (though faster
> on dual core Intel-based Mac OS 10!). Versions using gated semantic
> predicates are marginally slower than those that don't use gated
> semantic predicates.
> 
> My goal is to evaluate thousands of these expressions as quickly as
> possible in a multi-threaded environment. How likely is it that
> generating Java byte code to be interpreted at run time would
> significantly increase the performance of those evaluations?
> 
> 
> Jane
> 
> On May 29, 2010, at 7:28 PM, Jim Idle wrote:
> 
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Loring Craymer
> >> Sent: Saturday, May 29, 2010 3:26 PM
> >>
> >> Don't walk the tree to evaluate the expression; walk the tree to
> >> generate byte code and then interpret the byte code.  The overall
> >> problem then gets simpler and the resulting code runs faster.
> >>
> >
> > Especially as code generation is almost trivial these days with ASM
> or LLVM (depending on your needs). If you can live with the JVM, then
> just use ASM and let the VM deal with it.
> >
> > While writing a tree based interpreter is a useful experiment and
> learning aid, I think that overall, interpreting via the tree is
> somewhat awkward. Just my opinion of course.
> >
> > Jim
> >
> >
> >> --Loring
> >>
> >>
> >>
> >> ----- Original Message ----
> >>> From: Jane Eisenstein <janee at softweave.com>
> >>> To: "Farr, John" <john.farr at medtronic.com>
> >>> Cc: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> >>> Sent: Sat, May 29, 2010 2:15:56 PM
> >>> Subject: Re: [antlr-interest] short circuiting further evaluation
> >>>
> >>> Thanks. Using gated semantic predicates nicely simplifies the logic
> >> in each rule
> >>> (while doubling the number of rules).
> >>
> >> It doesn't stop the parse though
> >>> -- just the evaluation.
> >>
> >> Is there a clean way to determine the
> >>> condition's final result and return it without having to complete
> the
> >> parse of
> >>> the entire expression?
> >>
> >> Jane
> >>
> >>
> >> On May 28, 2010, at 10:22 AM,
> >>> Farr, John wrote:
> >>
> >>> The message I posted on April 8 with the subject
> >>> "Processing/traversing a rule -- dealing with conditionals" may
> help
> >>> you.
> >>>
> >>> --John
> >>>
> >>>
> >>> -----Original
> >>> Message-----
> >>> From:
> >>> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-
> >> bounces at antlr.org
> >>> [mailto:
> >>> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-
> >> bounces at antlr.org]
> >>> On Behalf Of Jane Eisenstein
> >>> Sent: Friday, May 28, 2010 7:47 AM
> >>>
> >>> To:
> >>> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
> >>>
> >>> Subject: [antlr-interest] short circuiting further evaluation
> >>>
> >>>
> >>> I'm working with a simple expression grammar:
> >>>
> >>>
> >>> condition:    conditional_expression  EOF
> >>>
> >>>    ;
> >>>
> >>> conditional_expression
> >>>
> >>>    :    conditional_term
> >>>
> >>>        (  OR conditional_expression
> >>> )?
> >>>    ;
> >>>
> >>> conditional_term
> >>>
> >>>    :    conditional_factor
> >>>
> >>>        ( AND conditional_term  )?
> >>>
> >>>    ;
> >>>
> >>> conditional_factor
> >>>
> >>>    :    conditional_primary
> >>>
> >>>    |    NOT conditional_primary
> >>>
> >>>    ;
> >>>
> >>> conditional_primary
> >>>
> >>>    : ID
> >>>    | LEFT_PAREN
> >>> conditional_expression RIGHT_PAREN
> >>>    ;
> >>>
> >>>
> >>> At runtime, ID tokens evaluate to either true or false. Once it is
> >> clear the
> >>> condition as a whole will evaluate to either true or false, I'd
> like
> >> to stop the
> >>> evaluation and return the value of the condition. So far, all I've
> >> managed to do
> >>> is short-circuit further ID evaluations once an upper level outcome
> >> is
> >>> know.
> >>>
> >>> Is there a way to short circuit the entire parse? I'm not
> >>> sure how to even tell it would be time to do so.
> >>>
> >>> Jane
> >>>
> >>>
> >>>
> >>>
> >>>
> >>>
> >>> List:
> >>> href="http://www.antlr.org/mailman/listinfo/antlr-interest"
> >> target=_blank
> >>>> http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe:
> >>>
> >>> target=_blank
> >>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
> >> address
> >>>
> >>>
> >>>
> >>> [CONFIDENTIALITY AND PRIVACY NOTICE]
> >>>
> >>>
> >>> Information transmitted by this email is proprietary to Medtronic
> and
> >> is
> >>> intended for use only by the individual or entity to which it is
> >> addressed, and
> >>> may contain information that is private, privileged, confidential
> or
> >> exempt from
> >>> disclosure under applicable law. If you are not the intended
> >> recipient or it
> >>> appears that this mail has been forwarded to you without proper
> >> authority, you
> >>> are notified that any use or dissemination of this information in
> any
> >> manner is
> >>> strictly prohibited. In such cases, please delete this mail from
> your
> >>> records.
> >>>
> >>> To view this notice in other languages you can either
> >>> select the following link or manually copy and paste the link into
> >> the address
> >>> bar of a web browser:
> >>> target=_blank >http://emaildisclaimer.medtronic.com
> >>>
> >>>
> >>
> >>
> >> List:
> >>> target=_blank
> >>>> http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >>> href="http://www.antlr.org/mailman/options/antlr-interest/your-
> email-
> >> address"
> >>> target=_blank
> >>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
> >> address
> >>
> >>
> >>
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> >> email-address
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address





From jimi at temporal-wave.com  Sun May 30 15:07:17 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 30 May 2010 15:07:17 -0700
Subject: [antlr-interest] Can "returns" return an aggregate?
In-Reply-To: <000001cb0019$78f6e560$6ae4b020$@net>
Message-ID: <1682c306f8312545bf8df110c72f81d4@temporal-wave.com>

Look a the documentation for @sections - there are different ones so you can include before, after the .h or before or after antlr.h and so on. Also look at how I put together the header files in my examples. Basicalyl I have one .h file that everything includes.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bob
> Sent: Sunday, May 30, 2010 10:00 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Can "returns" return an aggregate?
> 
> My target is "C" (wish it was "C++") and because I'm accustomed to
> byson's
> stack items being a user-definable union, e.g.:
> 
> 
> 
>   %union {                                                   <-------
> declares a union of all rule return types
>     void*	node;
>     struct ModuleHeader moduleHeader;
>   }
> 
>   %type	<moduleHeader>	module_ansi_header                 <-----
> - declares
> return type of the specific rule
> 
>   module_ansi_header
> 	: TokModule { struct ModuleHeader _mh; $$ = _mh; }   <------ rule
> returns a ModuleHeader struct on stack
> 
> 
> 
> it was natural for me to think I could do something similar in Antlar,
> like
> this:
> 
>   @members
>   {
>    struct ModuleHeader { void* a; void* b };
>   }
> 
> 
>   module_ansi_header returns [struct ModuleHeader rslt]
>   scope {
>    struct ModuleHeader mh;
>   }
>     : TokModule { $rslt = mh; }
> 
> 
> 
> Which does not work. So I altered the rule:
> 
> 
>   module_ansi_header returns [void* a,void* b]
>   scope {
>    struct ModuleHeader mh;
>   }
>     : TokModule { $a = mh.a; $b = mh.b; }
> 
> 
> 
> My problem is `ModuleHeader` is undefined in "xxParser.h" because the
> inclusion order is incorrect:
> 
>   xxParser.c:
> 
>    #include "xxParser.h"                 <-------- typedef for rule
> return
> type refers to not-yet-defined `ModuleHeader`
>        .....
>    struct ModuleHeader { void* a; void* b };  <--- placement of
> @members
> block
> 
> 
> Being inexperienced with Antlr, I'm thinking I've just missed something
> simple.
> 
> Is there a way to get the "@members" block emitted prior to the
> inclusion of
> the "xxParser.h" file?
> 
> Thanks,
> Bob
> 
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Saturday, May 29, 2010 3:19 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Can "returns" return an aggregate?
> 
> You might have more success if you said what target you were using :-)
> Also
> remember antlr.markmail.com.
> 
> The generated routines already return a struct, so you cannot put a
> struct
> in that struct. You need to return a pointer to a struct.
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Bob
> > Sent: Friday, May 28, 2010 5:06 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Can "returns" return an aggregate?
> >
> > Is there a way to return an aggregate ?
> >
> >
> >
> > struct A { int m; double n; };
> >
> > extern struct A foo(void);
> >
> >
> >
> > myrule returns [struct A a]
> >
> >     : X
> >
> >      { $a = foo(); }
> >
> >   ;
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From michael.r.stover at gmail.com  Sun May 30 15:37:44 2010
From: michael.r.stover at gmail.com (Michael Stover)
Date: Sun, 30 May 2010 18:37:44 -0400
Subject: [antlr-interest] Trouble with lexer ambiguity
Message-ID: <AANLkTinviR3HEUX5YsuUMfChOaJ2NaVAVIbm1m9ewvC2@mail.gmail.com>

I'm making a grammar that knows how to parse coordinates, such as:

4,5


It knows about offsets, like:

+2,-8

It should parse adding coordinates together:

4,5+5,9

However, it seems to see the '+' and from there predict the next token to be
an offset, despite the fact there is not '+'|'-' before the '9'.

Here's the grammar I think should work (I made k large enough to show it's
not helping, no matter how large):

grammar Test;

main    :  COORD '+' COORD
           |    OFFSET
           ;

COORD options{k=7;} :    '0'..'9'+  ',' '0'..'9'+
    ;

OFFSET options{k=7;} :    ('+'|'-') '0'..'9'+  ',' ('-'|'+') '0'..'9'+
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;


What am I missing?

From lgcraymer at yahoo.com  Sun May 30 16:20:11 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 30 May 2010 16:20:11 -0700 (PDT)
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <fdc24663739ac346be206132b32749e6@temporal-wave.com>
References: <fdc24663739ac346be206132b32749e6@temporal-wave.com>
Message-ID: <565750.56573.qm@web55906.mail.re3.yahoo.com>

The correct answer is more along the lines of "it depends".  Typically, string-based interpreters run about 50 times slower than compiled code; compiled machine code is about 2x slower than hand-coded assembler.  Threaded code (not to be confused with multi-threading) is somewhere in the middle.  Address-threaded code comes in two flavors:  direct threaded, which runs about 6x slower than native machine code (ignoring cache issues), and indirect threaded, which runs about 11x slower than native.  Byte code interpreters run about 20x slower than native code.  Cacheing affects performance, and threaded code gains considerably relative to compiled code because it requires fewer memory references to fetch the instruction stream and because the underlying virtual machine fits neatly in the instruction cache.

If the "thousands of expressions" need to be interpreted from strings on the fly, then writing a custom byte code interpreter (basically, a loop surrounding a case statement in which each case is an operation corresponding to a byte code) probably makes sense--it will cost some performance (in comparison to a string interpreter) for expressions that avoid branches, but wins when there are loops.  On the other hand, if the expressions are heavily re-used and typically packaged in standalone scripts, then it makes sense to translate to C and then compile.  If scripts are heavily reused either in dynamic fashion (lots of mixing and matching of scripts) or on multiple different hardware platforms, then Jim's suggestions apply.

--Loring





----- Original Message ----
> From: Jim Idle <jimi at temporal-wave.com>
> Cc: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Sent: Sun, May 30, 2010 3:05:24 PM
> Subject: Re: [antlr-interest] short circuiting further evaluation
> 
> You will reap orders of magnitude improvement with a certainty of 100% :-) 
> Interpreters can be perfectly fine when performance is not a watchword, as soon 
> as it is, then generate some code and execute it. If your target is fxied and 
> only one platform, then LLVM may well be a better bet, but ASM is trivial to 
> learn 9basically, write the Java class you want to generate (include all the 
> things you will need to generate) and compile it, then ask ASM to build the Java 
> that would generate that class - then you have all the code snippets you need to 
> call from the AST walker and generate a Java class- you can get that going a lot 
> quicker than your tree based interpreter, then you get the JIT advantage from 
> the JVM for free. 

Of course, if you generated assembler directly, or 
> generated C and compiled it, you would usually get an even better performing 
> result.

Jim

> -----Original Message-----
> From: Jane 
> Eisenstein [mailto:
> href="mailto:janee at softweave.com">janee at softweave.com]
> Sent: Sunday, 
> May 30, 2010 1:46 AM
> To: Jim Idle
> Cc: 
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
> 
> Subject: Re: [antlr-interest] short circuiting further evaluation
> 
> 
> I have implemented evaluators for this little language that parse 
> a
> token stream and others that parse an AST. The tree based 
> evaluators
> are noticeably slower on a quad core Windows XP machine 
> (though faster
> on dual core Intel-based Mac OS 10!). Versions using 
> gated semantic
> predicates are marginally slower than those that don't 
> use gated
> semantic predicates.
> 
> My goal is to evaluate 
> thousands of these expressions as quickly as
> possible in a 
> multi-threaded environment. How likely is it that
> generating Java byte 
> code to be interpreted at run time would
> significantly increase the 
> performance of those evaluations?
> 
> 
> Jane
> 
> 
> On May 29, 2010, at 7:28 PM, Jim Idle wrote:
> 
> >> 
> -----Original Message-----
> >> From: 
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-
> >> 
> href="mailto:bounces at antlr.org">bounces at antlr.org] On Behalf Of Loring 
> Craymer
> >> Sent: Saturday, May 29, 2010 3:26 PM
> 
> >>
> >> Don't walk the tree to evaluate the expression; walk 
> the tree to
> >> generate byte code and then interpret the byte 
> code.  The overall
> >> problem then gets simpler and the 
> resulting code runs faster.
> >>
> >
> > 
> Especially as code generation is almost trivial these days with ASM
> or 
> LLVM (depending on your needs). If you can live with the JVM, then
> just 
> use ASM and let the VM deal with it.
> >
> > While writing a 
> tree based interpreter is a useful experiment and
> learning aid, I think 
> that overall, interpreting via the tree is
> somewhat awkward. Just my 
> opinion of course.
> >
> > Jim
> >
> 
> >
> >> --Loring
> >>
> >>
> 
> >>
> >> ----- Original Message ----
> >>> From: 
> Jane Eisenstein <
> href="mailto:janee at softweave.com">janee at softweave.com>
> 
> >>> To: "Farr, John" <
> href="mailto:john.farr at medtronic.com">john.farr at medtronic.com>
> 
> >>> Cc: "
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org" <
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org>
> 
> >>> Sent: Sat, May 29, 2010 2:15:56 PM
> >>> Subject: 
> Re: [antlr-interest] short circuiting further evaluation
> 
> >>>
> >>> Thanks. Using gated semantic predicates nicely 
> simplifies the logic
> >> in each rule
> >>> (while 
> doubling the number of rules).
> >>
> >> It doesn't stop 
> the parse though
> >>> -- just the evaluation.
> 
> >>
> >> Is there a clean way to determine the
> 
> >>> condition's final result and return it without having to 
> complete
> the
> >> parse of
> >>> the entire 
> expression?
> >>
> >> Jane
> >>
> 
> >>
> >> On May 28, 2010, at 10:22 AM,
> >>> 
> Farr, John wrote:
> >>
> >>> The message I posted on 
> April 8 with the subject
> >>> "Processing/traversing a rule -- 
> dealing with conditionals" may
> help
> >>> you.
> 
> >>>
> >>> --John
> >>>
> 
> >>>
> >>> -----Original
> >>> 
> Message-----
> >>> From:
> >>> href="mailto:
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">antlr-interest-
> 
> >> 
> href="mailto:bounces at antlr.org">bounces at antlr.org
> >>> 
> [mailto:
> >>> href="mailto:
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">antlr-interest-
> 
> >> 
> href="mailto:bounces at antlr.org">bounces at antlr.org]
> >>> On 
> Behalf Of Jane Eisenstein
> >>> Sent: Friday, May 28, 2010 7:47 
> AM
> >>>
> >>> To:
> >>> 
> href="mailto:
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
> 
> >>>
> >>> Subject: [antlr-interest] short circuiting 
> further evaluation
> >>>
> >>>
> 
> >>> I'm working with a simple expression grammar:
> 
> >>>
> >>>
> >>> condition:    
> conditional_expression  EOF
> >>>
> >>>  
>   ;
> >>>
> >>> 
> conditional_expression
> >>>
> >>>    
> :    conditional_term
> >>>
> >>>  
>       (  OR conditional_expression
> >>> 
> )?
> >>>    ;
> >>>
> >>> 
> conditional_term
> >>>
> >>>    :  
>   conditional_factor
> >>>
> >>>    
>     ( AND conditional_term  )?
> >>>
> 
> >>>    ;
> >>>
> >>> 
> conditional_factor
> >>>
> >>>    
> :    conditional_primary
> >>>
> 
> >>>    |    NOT conditional_primary
> 
> >>>
> >>>    ;
> >>>
> 
> >>> conditional_primary
> >>>
> >>>  
>   : ID
> >>>    | LEFT_PAREN
> >>> 
> conditional_expression RIGHT_PAREN
> >>>    ;
> 
> >>>
> >>>
> >>> At runtime, ID tokens 
> evaluate to either true or false. Once it is
> >> clear the
> 
> >>> condition as a whole will evaluate to either true or false, 
> I'd
> like
> >> to stop the
> >>> evaluation 
> and return the value of the condition. So far, all I've
> >> managed 
> to do
> >>> is short-circuit further ID evaluations once an upper 
> level outcome
> >> is
> >>> know.
> 
> >>>
> >>> Is there a way to short circuit the entire 
> parse? I'm not
> >>> sure how to even tell it would be time to do 
> so.
> >>>
> >>> Jane
> >>>
> 
> >>>
> >>>
> >>>
> 
> >>>
> >>>
> >>> List:
> 
> >>> href="
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest"
> >> 
> target=_blank
> >>>> 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> 
> Unsubscribe:
> >>>
> >>> target=_blank
> 
> >>>> 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-
> 
> >> address
> >>>
> >>>
> 
> >>>
> >>> [CONFIDENTIALITY AND PRIVACY NOTICE]
> 
> >>>
> >>>
> >>> Information transmitted 
> by this email is proprietary to Medtronic
> and
> >> 
> is
> >>> intended for use only by the individual or entity to 
> which it is
> >> addressed, and
> >>> may contain 
> information that is private, privileged, confidential
> or
> 
> >> exempt from
> >>> disclosure under applicable law. If 
> you are not the intended
> >> recipient or it
> >>> 
> appears that this mail has been forwarded to you without proper
> >> 
> authority, you
> >>> are notified that any use or dissemination 
> of this information in
> any
> >> manner is
> 
> >>> strictly prohibited. In such cases, please delete this mail 
> from
> your
> >>> records.
> >>>
> 
> >>> To view this notice in other languages you can either
> 
> >>> select the following link or manually copy and paste the link 
> into
> >> the address
> >>> bar of a web 
> browser:
> >>> target=_blank >
> href="http://emaildisclaimer.medtronic.com" target=_blank 
> >http://emaildisclaimer.medtronic.com
> >>>
> 
> >>>
> >>
> >>
> >> List:
> 
> >>> target=_blank
> >>>> 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
> >> 
> Unsubscribe:
> >>> href="
> href="http://www.antlr.org/mailman/options/antlr-interest/your-" target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-
> 
> email-
> >> address"
> >>> target=_blank
> 
> >>>> 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-
> 
> >> address
> >>
> >>
> >>
> 
> >>
> >>
> >> List: 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
> >> 
> Unsubscribe: 
> >http://www.antlr.org/mailman/options/antlr-
> interest/your-
> 
> >> email-address
> >
> >
> >
> 
> >
> > List: 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
> > 
> Unsubscribe: 
> >http://www.antlr.org/mailman/options/antlr-
> 
> interest/your-email-address





List: 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-address" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-address


      


From espina.edgar at gmail.com  Sun May 30 16:46:13 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Sun, 30 May 2010 20:46:13 -0300
Subject: [antlr-interest] ANTLR IDE 2.1.0-rc1 released!
Message-ID: <AANLkTilXLCAOge5lfTFK_Df1pZqQEg-H54slhsB3fNKD@mail.gmail.com>

Hi Guys,

 A new version of ANTLR IDE is available for download. Please note that this
new version requires Eclipse 3.6.

For more information please visit: http://antlrv3ide.sourceforge.net/

Enjoy it!
-- 
edgar

From cummings at kjchome.homeip.net  Sun May 30 16:47:36 2010
From: cummings at kjchome.homeip.net (Kevin J. Cummings)
Date: Sun, 30 May 2010 19:47:36 -0400
Subject: [antlr-interest] Trouble with lexer ambiguity
In-Reply-To: <AANLkTinviR3HEUX5YsuUMfChOaJ2NaVAVIbm1m9ewvC2@mail.gmail.com>
References: <AANLkTinviR3HEUX5YsuUMfChOaJ2NaVAVIbm1m9ewvC2@mail.gmail.com>
Message-ID: <4C02F918.6050808@kjchome.homeip.net>

On 05/30/2010 06:37 PM, Michael Stover wrote:
> I'm making a grammar that knows how to parse coordinates, such as:
> 
> 4,5
> 
> 
> It knows about offsets, like:
> 
> +2,-8
> 
> It should parse adding coordinates together:
> 
> 4,5+5,9
> 
> However, it seems to see the '+' and from there predict the next token to be
> an offset, despite the fact there is not '+'|'-' before the '9'.
> 
> Here's the grammar I think should work (I made k large enough to show it's
> not helping, no matter how large):
> 
> grammar Test;
> 
> main    :  COORD '+' COORD
>            |    OFFSET
>            ;

When ANTLR lexes, it does so without regard to parser context.  Without
sufficient lookahead, it cannot tell that +5,9 is not a valid OFFSET,
since '+' is an OFFSET start character.  You would need to play with
your grammar in such a way that it can handle this case.  Perhaps
turning OFFSET into a parser rule instead of a lexer rule.

> COORD options{k=7;} :    '0'..'9'+  ',' '0'..'9'+
>     ;
> 
> OFFSET options{k=7;} :    ('+'|'-') '0'..'9'+  ',' ('-'|'+') '0'..'9'+
>     ;

I would try the following:

OFFSET : (('+'|'-') '0'..'9'+ ',' ('+'|'-'))=>
          ('+'|'-') '0'..'9'+ ',' ('-'|'+') '0'..'9'+
       ;

and if ANTLR doesn't like that, I'd make a parser rule to construct
offsets from lesser token sequences and use the syntactic predicate
in the parser rule to help differentiate the possible alternatives in
the parser rules which use OFFSETs.

> 
> WS  :   ( ' '
>         | '\t'
>         | '\r'
>         | '\n'
>         ) {$channel=HIDDEN;}
>     ;
> 
> 
> What am I missing?

You should take look at the example rule on the ANTLR wiki that shows
how to parse floating point numbers using selective look-ahead.  Its the
same principle that you need to help determine when you have an OFFSET
and when you don't....

> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


-- 
Kevin J. Cummings
kjchome at rcn.com
cummings at kjchome.homeip.net
cummings at kjc386.framingham.ma.us
Registered Linux User #1232 (http://counter.li.org)

From janee at softweave.com  Sun May 30 17:08:12 2010
From: janee at softweave.com (Jane Eisenstein)
Date: Sun, 30 May 2010 20:08:12 -0400
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <565750.56573.qm@web55906.mail.re3.yahoo.com>
References: <fdc24663739ac346be206132b32749e6@temporal-wave.com>
	<565750.56573.qm@web55906.mail.re3.yahoo.com>
Message-ID: <05175393-3D2F-43BB-A48C-519991A173CA@softweave.com>

Thank you all. This discussion is both interesting and getting beyond my depth. 

The expressions are heavily re-used, but can be changed dynamically and must run on multiple hardware platforms. 

In testing, interpreted expressions are running 21-24x slower than equivalent existing code. However, each test has other over head several times more costly than the time taken to interpret its expression. Introducing an expression language will allow a smaller number of tests to be written and should reduce the total time of each run -- even without generating byte code. Even without implementing true short circuiting. :-)

Jane


On May 30, 2010, at 7:20 PM, Loring Craymer wrote:

> The correct answer is more along the lines of "it depends".  Typically, string-based interpreters run about 50 times slower than compiled code; compiled machine code is about 2x slower than hand-coded assembler.  Threaded code (not to be confused with multi-threading) is somewhere in the middle.  Address-threaded code comes in two flavors:  direct threaded, which runs about 6x slower than native machine code (ignoring cache issues), and indirect threaded, which runs about 11x slower than native.  Byte code interpreters run about 20x slower than native code.  Cacheing affects performance, and threaded code gains considerably relative to compiled code because it requires fewer memory references to fetch the instruction stream and because the underlying virtual machine fits neatly in the instruction cache.
> 
> If the "thousands of expressions" need to be interpreted from strings on the fly, then writing a custom byte code interpreter (basically, a loop surrounding a case statement in which each case is an operation corresponding to a byte code) probably makes sense--it will cost some performance (in comparison to a string interpreter) for expressions that avoid branches, but wins when there are loops.  On the other hand, if the expressions are heavily re-used and typically packaged in standalone scripts, then it makes sense to translate to C and then compile.  If scripts are heavily reused either in dynamic fashion (lots of mixing and matching of scripts) or on multiple different hardware platforms, then Jim's suggestions apply.
> 
> --Loring
> 
> 
> 
> 
> 
> ----- Original Message ----
>> From: Jim Idle <jimi at temporal-wave.com>
>> Cc: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
>> Sent: Sun, May 30, 2010 3:05:24 PM
>> Subject: Re: [antlr-interest] short circuiting further evaluation
>> 
>> You will reap orders of magnitude improvement with a certainty of 100% :-) 
>> Interpreters can be perfectly fine when performance is not a watchword, as soon 
>> as it is, then generate some code and execute it. If your target is fxied and 
>> only one platform, then LLVM may well be a better bet, but ASM is trivial to 
>> learn 9basically, write the Java class you want to generate (include all the 
>> things you will need to generate) and compile it, then ask ASM to build the Java 
>> that would generate that class - then you have all the code snippets you need to 
>> call from the AST walker and generate a Java class- you can get that going a lot 
>> quicker than your tree based interpreter, then you get the JIT advantage from 
>> the JVM for free. 
> 
> Of course, if you generated assembler directly, or 
>> generated C and compiled it, you would usually get an even better performing 
>> result.
> 
> Jim
> 
>> -----Original Message-----
>> From: Jane 
>> Eisenstein [mailto:
>> href="mailto:janee at softweave.com">janee at softweave.com]
>> Sent: Sunday, 
>> May 30, 2010 1:46 AM
>> To: Jim Idle
>> Cc: 
>> ymailto="mailto:antlr-interest at antlr.org" 
>> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
>> 
>> Subject: Re: [antlr-interest] short circuiting further evaluation
>> 
>> 
>> I have implemented evaluators for this little language that parse 
>> a
>> token stream and others that parse an AST. The tree based 
>> evaluators
>> are noticeably slower on a quad core Windows XP machine 
>> (though faster
>> on dual core Intel-based Mac OS 10!). Versions using 
>> gated semantic
>> predicates are marginally slower than those that don't 
>> use gated
>> semantic predicates.
>> 
>> My goal is to evaluate 
>> thousands of these expressions as quickly as
>> possible in a 
>> multi-threaded environment. How likely is it that
>> generating Java byte 
>> code to be interpreted at run time would
>> significantly increase the 
>> performance of those evaluations?
>> 
>> 
>> Jane
>> 
>> 
>> On May 29, 2010, at 7:28 PM, Jim Idle wrote:
>> 
>>>> 
>> -----Original Message-----
>>>> From: 
>> ymailto="mailto:antlr-interest-bounces at antlr.org" 
>> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org 
>> [mailto:antlr-interest-
>>>> 
>> href="mailto:bounces at antlr.org">bounces at antlr.org] On Behalf Of Loring 
>> Craymer
>>>> Sent: Saturday, May 29, 2010 3:26 PM
>> 
>>>> 
>>>> Don't walk the tree to evaluate the expression; walk 
>> the tree to
>>>> generate byte code and then interpret the byte 
>> code.  The overall
>>>> problem then gets simpler and the 
>> resulting code runs faster.
>>>> 
>>> 
>>> 
>> Especially as code generation is almost trivial these days with ASM
>> or 
>> LLVM (depending on your needs). If you can live with the JVM, then
>> just 
>> use ASM and let the VM deal with it.
>>> 
>>> While writing a 
>> tree based interpreter is a useful experiment and
>> learning aid, I think 
>> that overall, interpreting via the tree is
>> somewhat awkward. Just my 
>> opinion of course.
>>> 
>>> Jim
>>> 
>> 
>>> 
>>>> --Loring
>>>> 
>>>> 
>> 
>>>> 
>>>> ----- Original Message ----
>>>>> From: 
>> Jane Eisenstein <
>> href="mailto:janee at softweave.com">janee at softweave.com>
>> 
>>>>> To: "Farr, John" <
>> href="mailto:john.farr at medtronic.com">john.farr at medtronic.com>
>> 
>>>>> Cc: "
>> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org" <
>> ymailto="mailto:antlr-interest at antlr.org" 
>> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org>
>> 
>>>>> Sent: Sat, May 29, 2010 2:15:56 PM
>>>>> Subject: 
>> Re: [antlr-interest] short circuiting further evaluation
>> 
>>>>> 
>>>>> Thanks. Using gated semantic predicates nicely 
>> simplifies the logic
>>>> in each rule
>>>>> (while 
>> doubling the number of rules).
>>>> 
>>>> It doesn't stop 
>> the parse though
>>>>> -- just the evaluation.
>> 
>>>> 
>>>> Is there a clean way to determine the
>> 
>>>>> condition's final result and return it without having to 
>> complete
>> the
>>>> parse of
>>>>> the entire 
>> expression?
>>>> 
>>>> Jane
>>>> 
>> 
>>>> 
>>>> On May 28, 2010, at 10:22 AM,
>>>>> 
>> Farr, John wrote:
>>>> 
>>>>> The message I posted on 
>> April 8 with the subject
>>>>> "Processing/traversing a rule -- 
>> dealing with conditionals" may
>> help
>>>>> you.
>> 
>>>>> 
>>>>> --John
>>>>> 
>> 
>>>>> 
>>>>> -----Original
>>>>> 
>> Message-----
>>>>> From:
>>>>> href="mailto:
>> ymailto="mailto:antlr-interest-bounces at antlr.org" 
>> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">antlr-interest-
>> 
>>>> 
>> href="mailto:bounces at antlr.org">bounces at antlr.org
>>>>> 
>> [mailto:
>>>>> href="mailto:
>> ymailto="mailto:antlr-interest-bounces at antlr.org" 
>> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">antlr-interest-
>> 
>>>> 
>> href="mailto:bounces at antlr.org">bounces at antlr.org]
>>>>> On 
>> Behalf Of Jane Eisenstein
>>>>> Sent: Friday, May 28, 2010 7:47 
>> AM
>>>>> 
>>>>> To:
>>>>> 
>> href="mailto:
>> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
>> ymailto="mailto:antlr-interest at antlr.org" 
>> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
>> 
>>>>> 
>>>>> Subject: [antlr-interest] short circuiting 
>> further evaluation
>>>>> 
>>>>> 
>> 
>>>>> I'm working with a simple expression grammar:
>> 
>>>>> 
>>>>> 
>>>>> condition:    
>> conditional_expression  EOF
>>>>> 
>>>>> 
>>  ;
>>>>> 
>>>>> 
>> conditional_expression
>>>>> 
>>>>> 
>> :    conditional_term
>>>>> 
>>>>> 
>>      (  OR conditional_expression
>>>>> 
>> )?
>>>>>   ;
>>>>> 
>>>>> 
>> conditional_term
>>>>> 
>>>>>   :  
>>  conditional_factor
>>>>> 
>>>>> 
>>    ( AND conditional_term  )?
>>>>> 
>> 
>>>>>   ;
>>>>> 
>>>>> 
>> conditional_factor
>>>>> 
>>>>> 
>> :    conditional_primary
>>>>> 
>> 
>>>>>   |    NOT conditional_primary
>> 
>>>>> 
>>>>>   ;
>>>>> 
>> 
>>>>> conditional_primary
>>>>> 
>>>>> 
>>  : ID
>>>>>   | LEFT_PAREN
>>>>> 
>> conditional_expression RIGHT_PAREN
>>>>>   ;
>> 
>>>>> 
>>>>> 
>>>>> At runtime, ID tokens 
>> evaluate to either true or false. Once it is
>>>> clear the
>> 
>>>>> condition as a whole will evaluate to either true or false, 
>> I'd
>> like
>>>> to stop the
>>>>> evaluation 
>> and return the value of the condition. So far, all I've
>>>> managed 
>> to do
>>>>> is short-circuit further ID evaluations once an upper 
>> level outcome
>>>> is
>>>>> know.
>> 
>>>>> 
>>>>> Is there a way to short circuit the entire 
>> parse? I'm not
>>>>> sure how to even tell it would be time to do 
>> so.
>>>>> 
>>>>> Jane
>>>>> 
>> 
>>>>> 
>>>>> 
>>>>> 
>> 
>>>>> 
>>>>> 
>>>>> List:
>> 
>>>>> href="
>> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
>>> http://www.antlr.org/mailman/listinfo/antlr-interest"
>>>> 
>> target=_blank
>>>>>> 
>> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
>>> http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> 
>> Unsubscribe:
>>>>> 
>>>>> target=_blank
>> 
>>>>>> 
>> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
>> target=_blank 
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> 
>>>> address
>>>>> 
>>>>> 
>> 
>>>>> 
>>>>> [CONFIDENTIALITY AND PRIVACY NOTICE]
>> 
>>>>> 
>>>>> 
>>>>> Information transmitted 
>> by this email is proprietary to Medtronic
>> and
>>>> 
>> is
>>>>> intended for use only by the individual or entity to 
>> which it is
>>>> addressed, and
>>>>> may contain 
>> information that is private, privileged, confidential
>> or
>> 
>>>> exempt from
>>>>> disclosure under applicable law. If 
>> you are not the intended
>>>> recipient or it
>>>>> 
>> appears that this mail has been forwarded to you without proper
>>>> 
>> authority, you
>>>>> are notified that any use or dissemination 
>> of this information in
>> any
>>>> manner is
>> 
>>>>> strictly prohibited. In such cases, please delete this mail 
>> from
>> your
>>>>> records.
>>>>> 
>> 
>>>>> To view this notice in other languages you can either
>> 
>>>>> select the following link or manually copy and paste the link 
>> into
>>>> the address
>>>>> bar of a web 
>> browser:
>>>>> target=_blank >
>> href="http://emaildisclaimer.medtronic.com" target=_blank 
>>> http://emaildisclaimer.medtronic.com
>>>>> 
>> 
>>>>> 
>>>> 
>>>> 
>>>> List:
>> 
>>>>> target=_blank
>>>>>> 
>> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
>>> http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> 
>> Unsubscribe:
>>>>> href="
>> href="http://www.antlr.org/mailman/options/antlr-interest/your-" target=_blank 
>>> http://www.antlr.org/mailman/options/antlr-interest/your-
>> 
>> email-
>>>> address"
>>>>> target=_blank
>> 
>>>>>> 
>> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
>> target=_blank 
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> 
>>>> address
>>>> 
>>>> 
>>>> 
>> 
>>>> 
>>>> 
>>>> List: 
>> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
>>> http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> 
>> Unsubscribe: 
>>> http://www.antlr.org/mailman/options/antlr-
>> interest/your-
>> 
>>>> email-address
>>> 
>>> 
>>> 
>> 
>>> 
>>> List: 
>> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
>>> http://www.antlr.org/mailman/listinfo/antlr-interest
>>> 
>> Unsubscribe: 
>>> http://www.antlr.org/mailman/options/antlr-
>> 
>> interest/your-email-address
> 
> 
> 
> 
> 
> List: 
>> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
>>> http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
>> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-address" 
>> target=_blank 
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From lgcraymer at yahoo.com  Sun May 30 19:04:49 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 30 May 2010 19:04:49 -0700 (PDT)
Subject: [antlr-interest] short circuiting further evaluation
In-Reply-To: <05175393-3D2F-43BB-A48C-519991A173CA@softweave.com>
References: <fdc24663739ac346be206132b32749e6@temporal-wave.com>
	<565750.56573.qm@web55906.mail.re3.yahoo.com>
	<05175393-3D2F-43BB-A48C-519991A173CA@softweave.com>
Message-ID: <422661.46542.qm@web55905.mail.re3.yahoo.com>

Is your language embedded in an application under test, or just used for hardware testing?  Either way, it is easier to generate code for interpretation than it is to interpret via tree walk, and most of the effort is just to reorganize code that you have already written.

--Loring




----- Original Message ----
> From: Jane Eisenstein <janee at softweave.com>
> To: Loring Craymer <lgcraymer at yahoo.com>
> Cc: Jim Idle <jimi at temporal-wave.com>; "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Sent: Sun, May 30, 2010 5:08:12 PM
> Subject: Re: [antlr-interest] short circuiting further evaluation
> 
> Thank you all. This discussion is both interesting and getting beyond my depth. 
> 

The expressions are heavily re-used, but can be changed dynamically and 
> must run on multiple hardware platforms. 

In testing, interpreted 
> expressions are running 21-24x slower than equivalent existing code. However, 
> each test has other over head several times more costly than the time taken to 
> interpret its expression. Introducing an expression language will allow a 
> smaller number of tests to be written and should reduce the total time of each 
> run -- even without generating byte code. Even without implementing true short 
> circuiting. :-)

Jane


On May 30, 2010, at 7:20 PM, Loring 
> Craymer wrote:

> The correct answer is more along the lines of "it 
> depends".  Typically, string-based interpreters run about 50 times slower 
> than compiled code; compiled machine code is about 2x slower than hand-coded 
> assembler.  Threaded code (not to be confused with multi-threading) is 
> somewhere in the middle.  Address-threaded code comes in two flavors:  
> direct threaded, which runs about 6x slower than native machine code (ignoring 
> cache issues), and indirect threaded, which runs about 11x slower than 
> native.  Byte code interpreters run about 20x slower than native 
> code.  Cacheing affects performance, and threaded code gains considerably 
> relative to compiled code because it requires fewer memory references to fetch 
> the instruction stream and because the underlying virtual machine fits neatly in 
> the instruction cache.
> 
> If the "thousands of expressions" need 
> to be interpreted from strings on the fly, then writing a custom byte code 
> interpreter (basically, a loop surrounding a case statement in which each case 
> is an operation corresponding to a byte code) probably makes sense--it will cost 
> some performance (in comparison to a string interpreter) for expressions that 
> avoid branches, but wins when there are loops.  On the other hand, if the 
> expressions are heavily re-used and typically packaged in standalone scripts, 
> then it makes sense to translate to C and then compile.  If scripts are 
> heavily reused either in dynamic fashion (lots of mixing and matching of 
> scripts) or on multiple different hardware platforms, then Jim's suggestions 
> apply.
> 
> --Loring
> 
> 
> 
> 
> 
> 
> ----- Original Message ----
>> From: Jim Idle <
> ymailto="mailto:jimi at temporal-wave.com" 
> href="mailto:jimi at temporal-wave.com">jimi at temporal-wave.com>
>> 
> Cc: "
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org" <
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org>
>> 
> Sent: Sun, May 30, 2010 3:05:24 PM
>> Subject: Re: [antlr-interest] 
> short circuiting further evaluation
>> 
>> You will reap 
> orders of magnitude improvement with a certainty of 100% :-) 
>> 
> Interpreters can be perfectly fine when performance is not a watchword, as soon 
> 
>> as it is, then generate some code and execute it. If your target is 
> fxied and 
>> only one platform, then LLVM may well be a better bet, 
> but ASM is trivial to 
>> learn 9basically, write the Java class you 
> want to generate (include all the 
>> things you will need to generate) 
> and compile it, then ask ASM to build the Java 
>> that would generate 
> that class - then you have all the code snippets you need to 
>> call 
> from the AST walker and generate a Java class- you can get that going a lot 
> 
>> quicker than your tree based interpreter, then you get the JIT 
> advantage from 
>> the JVM for free. 
> 
> Of course, if 
> you generated assembler directly, or 
>> generated C and compiled it, 
> you would usually get an even better performing 
>> result.
> 
> 
> Jim
> 
>> -----Original Message-----
>> From: 
> Jane 
>> Eisenstein [mailto:
>> href="mailto:
> ymailto="mailto:janee at softweave.com" 
> href="mailto:janee at softweave.com">janee at softweave.com">
> ymailto="mailto:janee at softweave.com" 
> href="mailto:janee at softweave.com">janee at softweave.com]
>> Sent: 
> Sunday, 
>> May 30, 2010 1:46 AM
>> To: Jim Idle
>> 
> Cc: 
>> ymailto="mailto:
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org" 
> 
>> href="mailto:
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
>> 
> 
>> Subject: Re: [antlr-interest] short circuiting further 
> evaluation
>> 
>> 
>> I have implemented evaluators 
> for this little language that parse 
>> a
>> token stream and 
> others that parse an AST. The tree based 
>> evaluators
>> are 
> noticeably slower on a quad core Windows XP machine 
>> (though 
> faster
>> on dual core Intel-based Mac OS 10!). Versions using 
> 
>> gated semantic
>> predicates are marginally slower than 
> those that don't 
>> use gated
>> semantic 
> predicates.
>> 
>> My goal is to evaluate 
>> 
> thousands of these expressions as quickly as
>> possible in a 
> 
>> multi-threaded environment. How likely is it that
>> 
> generating Java byte 
>> code to be interpreted at run time 
> would
>> significantly increase the 
>> performance of those 
> evaluations?
>> 
>> 
>> Jane
>> 
>> 
> 
>> On May 29, 2010, at 7:28 PM, Jim Idle wrote:
>> 
> 
>>>> 
>> -----Original Message-----
>>>> 
> From: 
>> ymailto="mailto:
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org" 
> 
>> href="mailto:
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org 
> 
>> [mailto:antlr-interest-
>>>> 
>> 
> href="mailto:
> href="mailto:bounces at antlr.org">bounces at antlr.org">
> ymailto="mailto:bounces at antlr.org" 
> href="mailto:bounces at antlr.org">bounces at antlr.org] On Behalf Of Loring 
> 
>> Craymer
>>>> Sent: Saturday, May 29, 2010 3:26 
> PM
>> 
>>>> 
>>>> Don't walk the tree to 
> evaluate the expression; walk 
>> the tree to
>>>> 
> generate byte code and then interpret the byte 
>> code.  The 
> overall
>>>> problem then gets simpler and the 
>> 
> resulting code runs faster.
>>>> 
>>> 
> 
>>> 
>> Especially as code generation is almost trivial 
> these days with ASM
>> or 
>> LLVM (depending on your needs). 
> If you can live with the JVM, then
>> just 
>> use ASM and let 
> the VM deal with it.
>>> 
>>> While writing a 
> 
>> tree based interpreter is a useful experiment and
>> 
> learning aid, I think 
>> that overall, interpreting via the tree 
> is
>> somewhat awkward. Just my 
>> opinion of 
> course.
>>> 
>>> Jim
>>> 
>> 
> 
>>> 
>>>> --Loring
>>>> 
> 
>>>> 
>> 
>>>> 
>>>> 
> ----- Original Message ----
>>>>> From: 
>> Jane 
> Eisenstein <
>> href="mailto:
> href="mailto:janee at softweave.com">janee at softweave.com">
> ymailto="mailto:janee at softweave.com" 
> href="mailto:janee at softweave.com">janee at softweave.com>
>> 
> 
>>>>> To: "Farr, John" <
>> href="mailto:
> ymailto="mailto:john.farr at medtronic.com" 
> href="mailto:john.farr at medtronic.com">john.farr at medtronic.com">
> ymailto="mailto:john.farr at medtronic.com" 
> href="mailto:john.farr at medtronic.com">john.farr at medtronic.com>
>> 
> 
>>>>> Cc: "
>> href="mailto:
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org" 
> <
>> ymailto="mailto:
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org" 
> 
>> href="mailto:
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org>
>> 
> 
>>>>> Sent: Sat, May 29, 2010 2:15:56 
> PM
>>>>> Subject: 
>> Re: [antlr-interest] short 
> circuiting further evaluation
>> 
>>>>> 
> 
>>>>> Thanks. Using gated semantic predicates nicely 
> 
>> simplifies the logic
>>>> in each 
> rule
>>>>> (while 
>> doubling the number of 
> rules).
>>>> 
>>>> It doesn't stop 
>> 
> the parse though
>>>>> -- just the evaluation.
>> 
> 
>>>> 
>>>> Is there a clean way to determine 
> the
>> 
>>>>> condition's final result and return it 
> without having to 
>> complete
>> the
>>>> 
> parse of
>>>>> the entire 
>> 
> expression?
>>>> 
>>>> Jane
>>>> 
> 
>> 
>>>> 
>>>> On May 28, 2010, at 10:22 
> AM,
>>>>> 
>> Farr, John wrote:
>>>> 
> 
>>>>> The message I posted on 
>> April 8 with the 
> subject
>>>>> "Processing/traversing a rule -- 
>> 
> dealing with conditionals" may
>> help
>>>>> 
> you.
>> 
>>>>> 
>>>>> 
> --John
>>>>> 
>> 
>>>>> 
> 
>>>>> -----Original
>>>>> 
>> 
> Message-----
>>>>> From:
>>>>> 
> href="mailto:
>> ymailto="mailto:
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org" 
> 
>> href="mailto:
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">antlr-interest-
>> 
> 
>>>> 
>> href="mailto:
> ymailto="mailto:bounces at antlr.org" 
> href="mailto:bounces at antlr.org">bounces at antlr.org">
> ymailto="mailto:bounces at antlr.org" 
> href="mailto:bounces at antlr.org">bounces at antlr.org
>>>>> 
> 
>> [mailto:
>>>>> href="mailto:
>> 
> ymailto="mailto:
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org" 
> 
>> href="mailto:
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">
> ymailto="mailto:antlr-interest-bounces at antlr.org" 
> href="mailto:antlr-interest-bounces at antlr.org">antlr-interest-bounces at antlr.org">antlr-interest-
>> 
> 
>>>> 
>> href="mailto:
> ymailto="mailto:bounces at antlr.org" 
> href="mailto:bounces at antlr.org">bounces at antlr.org">
> ymailto="mailto:bounces at antlr.org" 
> href="mailto:bounces at antlr.org">bounces at antlr.org]
>>>>> 
> On 
>> Behalf Of Jane Eisenstein
>>>>> Sent: Friday, 
> May 28, 2010 7:47 
>> AM
>>>>> 
> 
>>>>> To:
>>>>> 
>> 
> href="mailto:
>> href="mailto:
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
>> 
> ymailto="mailto:
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org" 
> 
>> href="mailto:
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org">
> ymailto="mailto:antlr-interest at antlr.org" 
> href="mailto:antlr-interest at antlr.org">antlr-interest at antlr.org
>> 
> 
>>>>> 
>>>>> Subject: [antlr-interest] 
> short circuiting 
>> further evaluation
>>>>> 
> 
>>>>> 
>> 
>>>>> I'm working with 
> a simple expression grammar:
>> 
>>>>> 
> 
>>>>> 
>>>>> condition:    
> 
>> conditional_expression  EOF
>>>>> 
> 
>>>>> 
>>  ;
>>>>> 
> 
>>>>> 
>> 
> conditional_expression
>>>>> 
>>>>> 
> 
>> :    conditional_term
>>>>> 
> 
>>>>> 
>>      (  OR 
> conditional_expression
>>>>> 
>> 
> )?
>>>>>   ;
>>>>> 
> 
>>>>> 
>> conditional_term
>>>>> 
> 
>>>>>   :  
>>  
> conditional_factor
>>>>> 
>>>>> 
> 
>>    ( AND conditional_term  
> )?
>>>>> 
>> 
>>>>>  
> ;
>>>>> 
>>>>> 
>> 
> conditional_factor
>>>>> 
>>>>> 
>> 
> :    conditional_primary
>>>>> 
>> 
> 
>>>>>   |    NOT 
> conditional_primary
>> 
>>>>> 
> 
>>>>>   ;
>>>>> 
>> 
> 
>>>>> conditional_primary
>>>>> 
> 
>>>>> 
>>  : ID
>>>>>  
> | LEFT_PAREN
>>>>> 
>> conditional_expression 
> RIGHT_PAREN
>>>>>   ;
>> 
> 
>>>>> 
>>>>> 
>>>>> At 
> runtime, ID tokens 
>> evaluate to either true or false. Once it 
> is
>>>> clear the
>> 
>>>>> condition 
> as a whole will evaluate to either true or false, 
>> I'd
>> 
> like
>>>> to stop the
>>>>> evaluation 
> 
>> and return the value of the condition. So far, all 
> I've
>>>> managed 
>> to do
>>>>> is 
> short-circuit further ID evaluations once an upper 
>> level 
> outcome
>>>> is
>>>>> know.
>> 
> 
>>>>> 
>>>>> Is there a way to short 
> circuit the entire 
>> parse? I'm not
>>>>> sure how 
> to even tell it would be time to do 
>> so.
>>>>> 
> 
>>>>> Jane
>>>>> 
>> 
> 
>>>>> 
>>>>> 
>>>>> 
> 
>> 
>>>>> 
>>>>> 
> 
>>>>> List:
>> 
>>>>> 
> href="
>> href="
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> 
>>> 
> target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest"
>>>> 
> 
>> target=_blank
>>>>>> 
>> href="
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> 
>>> 
> target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> 
> 
>> Unsubscribe:
>>>>> 
>>>>> 
> target=_blank
>> 
>>>>>> 
>> href="
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> 
>> target=_blank 
>>> 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> 
> 
>>>> address
>>>>> 
>>>>> 
> 
>> 
>>>>> 
>>>>> [CONFIDENTIALITY 
> AND PRIVACY NOTICE]
>> 
>>>>> 
> 
>>>>> 
>>>>> Information transmitted 
> 
>> by this email is proprietary to Medtronic
>> 
> and
>>>> 
>> is
>>>>> intended for use 
> only by the individual or entity to 
>> which it is
>>>> 
> addressed, and
>>>>> may contain 
>> information that 
> is private, privileged, confidential
>> or
>> 
> 
>>>> exempt from
>>>>> disclosure under 
> applicable law. If 
>> you are not the intended
>>>> 
> recipient or it
>>>>> 
>> appears that this mail has 
> been forwarded to you without proper
>>>> 
>> authority, 
> you
>>>>> are notified that any use or dissemination 
> 
>> of this information in
>> any
>>>> manner 
> is
>> 
>>>>> strictly prohibited. In such cases, 
> please delete this mail 
>> from
>> 
> your
>>>>> records.
>>>>> 
>> 
> 
>>>>> To view this notice in other languages you can 
> either
>> 
>>>>> select the following link or 
> manually copy and paste the link 
>> into
>>>> the 
> address
>>>>> bar of a web 
>> 
> browser:
>>>>> target=_blank >
>> href="
> href="http://emaildisclaimer.medtronic.com" target=_blank 
> >http://emaildisclaimer.medtronic.com" target=_blank 
>>> 
> href="http://emaildisclaimer.medtronic.com" target=_blank 
> >http://emaildisclaimer.medtronic.com
>>>>> 
>> 
> 
>>>>> 
>>>> 
>>>> 
> 
>>>> List:
>> 
>>>>> 
> target=_blank
>>>>>> 
>> href="
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> 
>>> 
> target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> 
> 
>> Unsubscribe:
>>>>> href="
>> href="
> href="http://www.antlr.org/mailman/options/antlr-interest/your-" target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-" target=_blank 
> 
>>> 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-" target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-
>> 
> 
>> email-
>>>> address"
>>>>> 
> target=_blank
>> 
>>>>>> 
>> href="
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> 
>> target=_blank 
>>> 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> 
> 
>>>> address
>>>> 
>>>> 
> 
>>>> 
>> 
>>>> 
>>>> 
> 
>>>> List: 
>> href="
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> 
>>> 
> target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> 
> 
>> Unsubscribe: 
>>> 
> href="http://www.antlr.org/mailman/options/antlr-" target=_blank 
> >http://www.antlr.org/mailman/options/antlr-
>> 
> interest/your-
>> 
>>>> email-address
>>> 
> 
>>> 
>>> 
>> 
>>> 
>>> 
> List: 
>> href="
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> 
>>> 
> target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
>>> 
> 
>> Unsubscribe: 
>>> 
> href="http://www.antlr.org/mailman/options/antlr-" target=_blank 
> >http://www.antlr.org/mailman/options/antlr-
>> 
>> 
> interest/your-email-address
> 
> 
> 
> 
> 
> 
> List: 
>> href="
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> 
>>> 
> target=_blank >http://www.antlr.org/mailman/listinfo/antlr-interest
> 
> Unsubscribe: 
>> href="
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-address" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-address" 
> 
>> target=_blank 
>>> 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-address" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> 
> 
> 
> List: 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-address


      


From Gogi66 at yandex.ru  Sun May 30 20:32:49 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Mon, 31 May 2010 07:32:49 +0400
Subject: [antlr-interest] Return to previously matched leaf in Tree Parser
Message-ID: <158571275276769@web87.yandex.ru>



-------- ???????????? ????????? --------
28.05.10, 15:31, "?????" <Gogi66 at yandex.ru>:

Hi, I want to ask how can I return to previously matched leaf in a TreeParser?regards,Almer Bolatov 
-------- ?????????? ????????????? ????????? --------


-- 
??????.?????. ?????? ????. ????? - ???. http://mail.yandex.ru/nospam/sign

From Anders.Karlsson at sybase.com  Sun May 30 23:29:49 2010
From: Anders.Karlsson at sybase.com (Anders.Karlsson at sybase.com)
Date: Mon, 31 May 2010 14:29:49 +0800
Subject: [antlr-interest] java versions
Message-ID: <OF33CB3B8D.BC95CB1E-ON48257734.0022D4A2-48257734.002410F8@sybase.com>

Hi,

I was wondering if there is some way for the ANTLRWorks (1.4) to dumb down 
the generated Java code? e.g. generate Java 1.4 code. This would be needed 
(AFAIK) in order to be compatible with the Blackberry.

Thank you and kind regards,
Anders

Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65 
6571 3125 | * anders.karlsson at sybase.com
-- It takes a tonne of fact to overcome an ounce of opinion

From Anders.Karlsson at sybase.com  Mon May 31 00:00:45 2010
From: Anders.Karlsson at sybase.com (Anders.Karlsson at sybase.com)
Date: Mon, 31 May 2010 15:00:45 +0800
Subject: [antlr-interest] java versions
In-Reply-To: <OF33CB3B8D.BC95CB1E-ON48257734.0022D4A2-48257734.002410F8@sybase.com>
References: <OF33CB3B8D.BC95CB1E-ON48257734.0022D4A2-48257734.002410F8@sybase.com>
Message-ID: <OF23DAE323.831B938F-ON48257734.00262CA9-48257734.0026E5F7@sybase.com>

Humm to be a bit more clear, its about the runtime libraries and not about 
the generated code which seems to be compilable. 
The runtime libraries seem to contain things that cannot be compiled in 
Java ME e.g. there is no file handling. Maybe I can 
just somehow remove those parts and hope they don't  affect the basic 
functionality although it seems a bit of a hack.

Is there maybe any better way?

Thanks for your patience :-)
Anders

Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65 
6571 3125 | * anders.karlsson at sybase.com
-- It takes a tonne of fact to overcome an ounce of opinion



<Anders.Karlsson at sybase.com> 
Sent by: <antlr-interest-bounces at antlr.org>
31/05/2010 14:29

To
antlr-interest at antlr.org
cc

Subject
[antlr-interest] java versions






Hi,

I was wondering if there is some way for the ANTLRWorks (1.4) to dumb down 

the generated Java code? e.g. generate Java 1.4 code. This would be needed 

(AFAIK) in order to be compatible with the Blackberry.

Thank you and kind regards,
Anders

Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65 
6571 3125 | * anders.karlsson at sybase.com
-- It takes a tonne of fact to overcome an ounce of opinion

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: 
http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From george.soom at siria.cc  Mon May 31 00:18:57 2010
From: george.soom at siria.cc (George Soom)
Date: Mon, 31 May 2010 07:18:57 GMT
Subject: [antlr-interest] parsing rules
Message-ID: <20100531071857.30536.qmail@info9.gawab.com>



Randall R Schulz <rschulz at sonic.net> wrote on 28 May 2010, 04:25 PM:
Subject: Re: [antlr-interest] parsing rules
>On Wednesday May 26 2010, George Soom wrote:
>> Hi,
>>
>> I have to rewrite several files with mathematical text in them. Text
>> substitutions are really simple (e.g. 'a=4' -> 'a:=4;' and similar).
>> Input is in form:
>> ----
>> a=4
>> b=3
>> draw(a)
>> draw(b)
>> ----
>>
>> Needed output
>> -----
>> a:=4;
>> b:=3;
>> draw(a, "constant arguments")
>> draw(b, "constant arguments")
>> ----
>
>Why don't you just use sed?
>
>
>Randall Schulz

This process is using sed for several years. But as input syntax is
constantly changing, managing all these ~100line sed scripts is quite a
mess. 


From ssedai at gmail.com  Mon May 31 04:06:39 2010
From: ssedai at gmail.com (Sergei Smolov)
Date: Mon, 31 May 2010 15:06:39 +0400
Subject: [antlr-interest] Can't find template actionSetAttribute.st;
	group hierarchy is [Java]
Message-ID: <AANLkTimZE-9iNLXpGsoLGKN7SPkY_iCFlQaHOBeipOXS@mail.gmail.com>

Hello, List!

I'm writing a SIP protocol parser and now I am using Antlr 3.2. While code
generation I've encountered the following error:

java.lang.IllegalArgumentException: Can't find template
actionSetAttribute.st; group hierarchy is [Java]
The thing is that I do not use a standard value of "output" option (I need
to generate my own class hierarchy, not AST\CommonTree).
So what can be the solution of my problem?
Thanks in advance.

-- 
Sergey Smolov

From parrt at cs.usfca.edu  Mon May 31 09:30:32 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 May 2010 09:30:32 -0700
Subject: [antlr-interest] Can't find template actionSetAttribute.st;
	group hierarchy is [Java]
In-Reply-To: <AANLkTimZE-9iNLXpGsoLGKN7SPkY_iCFlQaHOBeipOXS@mail.gmail.com>
References: <AANLkTimZE-9iNLXpGsoLGKN7SPkY_iCFlQaHOBeipOXS@mail.gmail.com>
Message-ID: <D09C0294-1E26-4F9E-A67F-A1184B1C9177@cs.usfca.edu>

You are missing actionSetAttribute in your Java.stg file.
T
On May 31, 2010, at 4:06 AM, Sergei Smolov wrote:

> Hello, List!
>
> I'm writing a SIP protocol parser and now I am using Antlr 3.2.  
> While code
> generation I've encountered the following error:
>
> java.lang.IllegalArgumentException: Can't find template
> actionSetAttribute.st; group hierarchy is [Java]
> The thing is that I do not use a standard value of "output" option  
> (I need
> to generate my own class hierarchy, not AST\CommonTree).
> So what can be the solution of my problem?
> Thanks in advance.
>
> -- 
> Sergey Smolov
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Mon May 31 12:12:01 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 May 2010 12:12:01 -0700
Subject: [antlr-interest] Return to previously matched leaf in Tree
	Parser
In-Reply-To: <158571275276769@web87.yandex.ru>
References: <158571275276769@web87.yandex.ru>
Message-ID: <AE3B1C9A-B6A0-49D0-9703-7C14EB939E35@temporal-wave.com>

Mark() release() see antlr.markmail.org

Jim

On May 30, 2010, at 20:32, ????? <Gogi66 at yandex.ru> wrote:

>
>
> -------- ???????????? ????????? --------
> 28.05.10, 15:31, "?????" <Gogi66 at yandex.ru>:
>
> Hi, I want to ask how can I return to previously matched leaf in a  
> TreeParser?regards,Almer Bolatov
> -------- ?????????? ?????????????  
> ????????? --------
>
>
> -- 
> ??????.?????. ?????? ????. ????? - ???. http 
> ://mail.yandex.ru/nospam/sign
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Mon May 31 12:47:23 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 May 2010 12:47:23 -0700
Subject: [antlr-interest] java versions
In-Reply-To: <OF33CB3B8D.BC95CB1E-ON48257734.0022D4A2-48257734.002410F8@sybase.com>
Message-ID: <62307e8178e3b34a85bf8ba28bd4ca28@temporal-wave.com>

Just use -jsr14 with the javac compiler and you will have 1.4 compatible classes. In fact the standard ANTLR build via Maven does this already so that the ANTLR jars are 1.4 readable. All the stuff about generics and so on is elided and the classes are marked as 1.4.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Anders.Karlsson at sybase.com
> Sent: Sunday, May 30, 2010 11:30 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] java versions
> 
> Hi,
> 
> I was wondering if there is some way for the ANTLRWorks (1.4) to dumb
> down
> the generated Java code? e.g. generate Java 1.4 code. This would be
> needed
> (AFAIK) in order to be compatible with the Blackberry.
> 
> Thank you and kind regards,
> Anders
> 
> Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65
> 6571 3125 | * anders.karlsson at sybase.com
> -- It takes a tonne of fact to overcome an ounce of opinion
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Mon May 31 12:49:22 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 May 2010 12:49:22 -0700
Subject: [antlr-interest] java versions
In-Reply-To: <OF23DAE323.831B938F-ON48257734.00262CA9-48257734.0026E5F7@sybase.com>
Message-ID: <3db3d7335b78aa46a544243c70386764@temporal-wave.com>

Ah - you mean ME, yes that is a different matter. You will have to create an ME version of the runtime that does not contain things ME can't handle. The sooner that ME dies the better if you ask me ;-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Anders.Karlsson at sybase.com
> Sent: Monday, May 31, 2010 12:01 AM
> To: Anders.Karlsson at sybase.com
> Cc: antlr-interest Interest
> Subject: Re: [antlr-interest] java versions
> 
> Humm to be a bit more clear, its about the runtime libraries and not
> about
> the generated code which seems to be compilable.
> The runtime libraries seem to contain things that cannot be compiled in
> Java ME e.g. there is no file handling. Maybe I can
> just somehow remove those parts and hope they don't  affect the basic
> functionality although it seems a bit of a hack.
> 
> Is there maybe any better way?
> 
> Thanks for your patience :-)
> Anders
> 
> Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65
> 6571 3125 | * anders.karlsson at sybase.com
> -- It takes a tonne of fact to overcome an ounce of opinion
> 
> 
> 
> <Anders.Karlsson at sybase.com>
> Sent by: <antlr-interest-bounces at antlr.org>
> 31/05/2010 14:29
> 
> To
> antlr-interest at antlr.org
> cc
> 
> Subject
> [antlr-interest] java versions
> 
> 
> 
> 
> 
> 
> Hi,
> 
> I was wondering if there is some way for the ANTLRWorks (1.4) to dumb
> down
> 
> the generated Java code? e.g. generate Java 1.4 code. This would be
> needed
> 
> (AFAIK) in order to be compatible with the Blackberry.
> 
> Thank you and kind regards,
> Anders
> 
> Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65
> 6571 3125 | * anders.karlsson at sybase.com
> -- It takes a tonne of fact to overcome an ounce of opinion
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Mon May 31 12:49:49 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 May 2010 12:49:49 -0700
Subject: [antlr-interest] parsing rules
In-Reply-To: <20100531071857.30536.qmail@info9.gawab.com>
Message-ID: <6fa39921f789fa40a990df4968ae0341@temporal-wave.com>

AWK would be better then.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of George Soom
> Sent: Monday, May 31, 2010 12:19 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] parsing rules
> 
> 
> 
> Randall R Schulz <rschulz at sonic.net> wrote on 28 May 2010, 04:25 PM:
> Subject: Re: [antlr-interest] parsing rules
> >On Wednesday May 26 2010, George Soom wrote:
> >> Hi,
> >>
> >> I have to rewrite several files with mathematical text in them. Text
> >> substitutions are really simple (e.g. 'a=4' -> 'a:=4;' and similar).
> >> Input is in form:
> >> ----
> >> a=4
> >> b=3
> >> draw(a)
> >> draw(b)
> >> ----
> >>
> >> Needed output
> >> -----
> >> a:=4;
> >> b:=3;
> >> draw(a, "constant arguments")
> >> draw(b, "constant arguments")
> >> ----
> >
> >Why don't you just use sed?
> >
> >
> >Randall Schulz
> 
> This process is using sed for several years. But as input syntax is
> constantly changing, managing all these ~100line sed scripts is quite a
> mess.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Mon May 31 12:52:13 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 May 2010 12:52:13 -0700
Subject: [antlr-interest] Can't find template actionSetAttribute.st;
	group hierarchy is [Java]
In-Reply-To: <AANLkTimZE-9iNLXpGsoLGKN7SPkY_iCFlQaHOBeipOXS@mail.gmail.com>
Message-ID: <7411da890e945149ad1551faea4cd334@temporal-wave.com>

You have not posted enough information for anyone to help. But you must be referencing something that isn't implemented. Post your grammar? Or grep the ANTLR source?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sergei Smolov
> Sent: Monday, May 31, 2010 4:07 AM
> To: antlr-interest
> Subject: [antlr-interest] Can't find template actionSetAttribute.st;
> group hierarchy is [Java]
> 
> Hello, List!
> 
> I'm writing a SIP protocol parser and now I am using Antlr 3.2. While
> code
> generation I've encountered the following error:
> 
> java.lang.IllegalArgumentException: Can't find template
> actionSetAttribute.st; group hierarchy is [Java]
> The thing is that I do not use a standard value of "output" option (I
> need
> to generate my own class hierarchy, not AST\CommonTree).
> So what can be the solution of my problem?
> Thanks in advance.
> 
> --
> Sergey Smolov
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From john at glowingslab.com  Mon May 31 14:21:12 2010
From: john at glowingslab.com (John Batty)
Date: Mon, 31 May 2010 22:21:12 +0100
Subject: [antlr-interest] Problems
Message-ID: <2B32A335-437C-48C4-8E69-3BC57E92B2FA@glowingslab.com>

Hi

I am trying to buld a grammar from the ANTLR grammar list (http://www.antlr.org/grammar/list 
), using ANTLR V3.2.

C Preprocessor
Youngki KU Wed Dec 20, 2006 17:38
C preprocessor grammar and tree.

The build fails with a large number of errors:
[22:05:28] error(100): Cpp.g:135:20: syntax error: antlr: Cpp.g: 
135:20: unexpected token: ^
[22:05:28] error(100): Cpp.g:136:20: syntax error: antlr: Cpp.g: 
136:20: unexpected token: ^
[22:05:28] error(100): Cpp.g:137:21: syntax error: antlr: Cpp.g: 
137:21: unexpected token: ^
[22:05:28] error(100): Cpp.g:138:18: syntax error: antlr: Cpp.g: 
138:18: unexpected token: ^

The corresponding grammar is...

assignmentExpression
		:	conditionalExpression
			(	(	ASSIGNEQUAL^^
				|   TIMESEQUAL^^
				|   DIVIDEEQUAL^^
				|   MODEQUAL^^
				|   PLUSEQUAL^^
				|   MINUSEQUAL^^
				|   SHIFTLEFTEQUAL^^
				|   SHIFTRIGHTEQUAL^^
				|	BITWISEANDEQUAL^^
				|	BITWISEXOREQUAL^^
				|	BITWISEOREQUAL^^
				)
			assignmentExpression
			)?
		;

So it is clearly the "^^" construct that ANTLR does not like.  I  
assume these is an ANTL version issue.

Can anyone tell me what this construct means in older versions of  
ANTLR, and what I need to do to make it work with ANTLR V3.2?

Best regards,

John



From Anders.Karlsson at sybase.com  Mon May 31 16:15:44 2010
From: Anders.Karlsson at sybase.com (Anders.Karlsson at sybase.com)
Date: Tue, 1 Jun 2010 08:15:44 +0900
Subject: [antlr-interest] java versions
In-Reply-To: <3db3d7335b78aa46a544243c70386764@temporal-wave.com>
References: <OF23DAE323.831B938F-ON48257734.00262CA9-48257734.0026E5F7@sybase.com>
	<3db3d7335b78aa46a544243c70386764@temporal-wave.com>
Message-ID: <OFC0743E33.89EF6C0C-ON48257734.007F55F5-C8257734.008028F1@sybase.com>

Guess there is no away around it then, thanks for your help.

Thank you and kind regards,
Anders

Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65 
6571 3125 | * anders.karlsson at sybase.com
-- It takes a tonne of fact to overcome an ounce of opinion



Jim Idle <jimi at temporal-wave.com> 
Sent by: <antlr-interest-bounces at antlr.org>
01/06/2010 03:49

To

cc
"antlr-interest Interest" <antlr-interest at antlr.org>
Subject
Re: [antlr-interest] java versions






Ah - you mean ME, yes that is a different matter. You will have to create 
an ME version of the runtime that does not contain things ME can't handle. 
The sooner that ME dies the better if you ask me ;-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Anders.Karlsson at sybase.com
> Sent: Monday, May 31, 2010 12:01 AM
> To: Anders.Karlsson at sybase.com
> Cc: antlr-interest Interest
> Subject: Re: [antlr-interest] java versions
> 
> Humm to be a bit more clear, its about the runtime libraries and not
> about
> the generated code which seems to be compilable.
> The runtime libraries seem to contain things that cannot be compiled in
> Java ME e.g. there is no file handling. Maybe I can
> just somehow remove those parts and hope they don't  affect the basic
> functionality although it seems a bit of a hack.
> 
> Is there maybe any better way?
> 
> Thanks for your patience :-)
> Anders
> 
> Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65
> 6571 3125 | * anders.karlsson at sybase.com
> -- It takes a tonne of fact to overcome an ounce of opinion
> 
> 
> 
> <Anders.Karlsson at sybase.com>
> Sent by: <antlr-interest-bounces at antlr.org>
> 31/05/2010 14:29
> 
> To
> antlr-interest at antlr.org
> cc
> 
> Subject
> [antlr-interest] java versions
> 
> 
> 
> 
> 
> 
> Hi,
> 
> I was wondering if there is some way for the ANTLRWorks (1.4) to dumb
> down
> 
> the generated Java code? e.g. generate Java 1.4 code. This would be
> needed
> 
> (AFAIK) in order to be compatible with the Blackberry.
> 
> Thank you and kind regards,
> Anders
> 
> Anders Karlsson | Staff SE II, Architect | Sybase Inc, Singapore, ( +65
> 6571 3125 | * anders.karlsson at sybase.com
> -- It takes a tonne of fact to overcome an ounce of opinion
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: 
http://www.antlr.org/mailman/options/antlr-interest/your-email-address



