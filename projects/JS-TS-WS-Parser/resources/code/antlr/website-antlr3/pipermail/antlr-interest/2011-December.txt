From jimi at temporal-wave.com  Thu Dec  1 06:07:31 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 1 Dec 2011 22:07:31 +0800
Subject: [antlr-interest] Has anyone seen this kind of stack trace?
In-Reply-To: <51807544-8F1C-4085-9A7D-6399CDB06565@toolazydogs.com>
References: <6B502859-A720-47B0-8B24-53410CDCD3BC@toolazydogs.com>
	<dea25c23c11eb34265910077f528c52c@mail.gmail.com>
	<7C0AFC37-AC63-41E6-98CD-AAF7E51FC34A@toolazydogs.com>
	<62e14411e61ebaaf8c759108839daa96@mail.gmail.com>
	<51807544-8F1C-4085-9A7D-6399CDB06565@toolazydogs.com>
Message-ID: <1556e6a0332fa570da8e36ca581c82d9@mail.gmail.com>

Could be, but I would double check it.

Jim

-----Original Message-----
From: Alan D. Cabrera [mailto:list at toolazydogs.com]
Sent: Thursday, December 01, 2011 9:48 AM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Has anyone seen this kind of stack trace?

Yep.  Just replied to that one too.  All tokens are accounted for.  This
is a different bug.  :)


Regards,
Alan

On Nov 30, 2011, at 5:31 PM, Jim Idle wrote:

> Yes - did you see my next email? You have a token that is being used
> but it does not have a lexer definition. When you use import, this is
> not detected. It is a bug but for some reason, it was not easy to fix
> and it has been left. So, it is being given the last token number plus
> one, but that does not exist and so it exceeds the bounds.
>
> Jim
>
> -----Original Message-----
> From: Alan D. Cabrera [mailto:list at toolazydogs.com]
> Sent: Thursday, December 01, 2011 9:25 AM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Has anyone seen this kind of stack trace?
>
> I am using maven and both *.g files get compiled by antlr:
>
> [INFO]
> [INFO] --- antlr3-maven-plugin:3.3:antlr (default) @ lua4j --- [INFO]
> ANTLR: Processing source directory
> /Users/adc/dev/lua4j/src/main/antlr3
> ANTLR Parser Generator  Version 3.3 Nov 30, 2010 12:46:29
> com/toolazydogs/lua4j/Lua.g com/toolazydogs/lua4j/LuaWalker.g
> error(10):  internal error: com/toolazydogs/lua4j/LuaWalker.g :
> java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 64
>
>
>
> Regards,
> Alan
>
> On Nov 30, 2011, at 5:12 PM, Jim Idle wrote:
>
>> Your tree, parser, lexer are out of sync and the token numbers have
>> therefore changed. Regen lexer, parser, then walker. If you use Maven
> then
>> this will be avoided.
>>
>> Jim
>>
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>> Cabrera
>> Sent: Tuesday, November 29, 2011 9:26 PM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Has anyone seen this kind of stack trace?
>>
>> I'm running ANTLR on my tree walker ANTLR file and get this error
> message
>> and don't understand what I'm doing wrong:
>>
>> error(10):  internal error: com/toolazydogs/lua4j/LuaWalker.g :
>> java.lang.ArrayIndexOutOfBoundsException: Array index out of range:
>> 64
>> java.util.Vector.set(Vector.java:712)
>> org.antlr.analysis.DFA.createMinMaxTables(DFA.java:535)
>> org.antlr.analysis.DFA.createStateTables(DFA.java:439)
>>
> org.antlr.codegen.CodeGenerator.genLookaheadDecision(CodeGenerator.jav
> a:64
>> 5)
>>
> org.antlr.grammar.v3.CodeGenTreeWalker.block(CodeGenTreeWalker.java:28
> 76)
>> org.antlr.grammar.v3.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:23
>> 82)
>>
> org.antlr.grammar.v3.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:15
> 37)
>>
>
org.antlr.grammar.v3.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:
>> 1441)
>>
> org.antlr.grammar.v3.CodeGenTreeWalker.grammar_(CodeGenTreeWalker.java
> :493
>> )
>> org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:421)
>> org.antlr.Tool.generateRecognizer(Tool.java:655)
>> org.antlr.Tool.process(Tool.java:468)
>> org.antlr.mojo.antlr3.Antlr3Mojo.execute(Antlr3Mojo.java:378)
>>
> org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultB
> uild
>> PluginManager.java:101)
>>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.
> java
>> :209)
>>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.
> java
>> :153)
>>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.
> java
>> :145)
>>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProjec
> t(Li
>> fecycleModuleBuilder.java:84)
>>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProjec
> t(Li
>> fecycleModuleBuilder.java:59)
>>
> org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBui
> ld(L
>> ifecycleStarter.java:183)
>>
> org.apache.maven.lifecycle.internal.LifecycleStarter.execute(Lifecycle
> Star
>> ter.java:161)
>> org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
>> org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
>> org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
>> org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
>> org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
>> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>>
>
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:
>> 39)
>>
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccess
> orIm
>> pl.java:25)
>> java.lang.reflect.Method.invoke(Method.java:597)
>>
>
org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.
>> java:290)
>>
> org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java
> :230
>> )
>>
> org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Lau
> nche
>> r.java:409)
>>
> org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:3
> 52)
>>
>>
>> /**
>> * Copyright 2010-2011 (C) Alan D. Cabrera
>> *
>> * Licensed under the Apache License, Version 2.0 (the "License");
>> * you may not use this file except in compliance with the License.
>> * You may obtain a copy of the License at
>> *
>> *    http://www.apache.org/licenses/LICENSE-2.0
>> *
>> * Unless required by applicable law or agreed to in writing, software
>> * distributed under the License is distributed on an "AS IS" BASIS,
>> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
> implied.
>> * See the License for the specific language governing permissions and
>> * limitations under the License.
>> */
>> tree grammar LuaWalker;
>> options
>> {
>>  tokenVocab=Lua;
>>  ASTLabelType=CommonTree;
>>  filter = true;
>> }
>> @header
>> {
>> package com.toolazydogs.lua4j;
>> import org.objectweb.asm.*;
>> import com.toolazydogs.lua4j.compiler.*; } @members {  void
>> print(String s) { System.out.print(s); }  void println(String s) {
>> System.out.println(s); } }
>>
>> chunk
>>  : ^(CHUNK c=.)
>>  ;
>>
>> stat
>>  : ^(ASSIGN varlist explist)
>>  | functioncall
>>  | chunk
>>  | ^(WHILE exp chunk)
>>  | ^(REPEAT chunk exp)
>>  | ^(IF exp chunk)
>>  | ^(IF exp chunk chunk)
>>  | ^(IF exp chunk elseif+ chunk?)
>>  | ^(FOR NAME exp exp exp chunk)
>>  | ^(FOR NAME exp exp chunk)
>>  | ^(FORIN namelist explist chunk)
>>  | ^(FUNCTION funcname funcbody)
>>  | ^(LOCAL namelist explist?)
>>  ;
>>
>> elseif
>>  : ^(ELSEIF exp chunk)
>>  ;
>>
>> laststat
>>  : RETURN
>>  | ^(RETURN explist)
>>  | BREAK
>>  ;
>>
>> funcname
>>  : ^(FNAMETHIS NAME NAME+)
>>  | ^(FNAME NAME+)
>>  ;
>>
>> varlist
>>  : ^(VARLIST var+)
>>  ;
>>
>> var
>>  : ^(INDEX varPrefix exp)
>>  | ^(VAR NAME)
>>  ;
>>
>> varPrefix
>>  : ^(FUNCALL vp=. nameAndArgs)
>>  | ^(SINGLE exp)
>>  | ^(VAR NAME)
>>  ;
>>
>> prefixexp
>>  : ^(FUNCALL p=. nameAndArgs)
>>  | varOrExp
>>  ;
>>
>> functioncall
>>  : ^(FUNCALL p=. nameAndArgs)
>>  ;
>>
>> varOrExp
>>  : var
>>  | ^(SINGLE exp)
>>  ;
>>
>> nameAndArgs
>>  : ^(ARGS args)
>>  | ^(ARGSWITHSELF NAME args)
>>  ;
>>
>> args
>>  : EXPLIST
>>  | explist
>>  | tableconstructor
>>  | string
>>  ;
>>
>> namelist
>>  : ^(NAMELIST NAME+)
>>  ;
>>
>> explist
>>  : ^(EXPLIST exp+)
>>  ;
>>
>> exp
>>  : ^('or' or or+)
>>  | or
>>  ;
>>
>> or
>>  : ^('and' and and+)
>>  | and
>>  ;
>>
>> and
>>  : ^('<' compare compare)
>>  | ^('<=' compare compare)
>>  | ^('>' compare compare)
>>  | ^('>=' compare compare)
>>  | ^('==' compare compare)
>>  | ^('~=' compare compare)
>>  | compare
>>  ;
>>
>> compare
>>  : ^('..' concatenation concatenation+)  | concatenation  ;
>>
>> concatenation
>>  : ^('+' add_sub add_sub)
>>  | ^('-' add_sub add_sub)
>>  | add_sub
>>  ;
>>
>> add_sub
>>  : ^('*' b b)
>>  | ^('/' b b)
>>  | ^('%' b b)
>>  | b
>>  ;
>>
>> b
>>  : ^(NEGATE unary)
>>  | unary
>>  ;
>>
>> unary
>>  : ^('^' atom atom)
>>  | atom
>>  ;
>>
>> atom    : 'nil'
>>      | 'false'
>>      | 'true'
>>      | number
>>      | string
>>      | ^(FUNCBODY parlist? chunk)
>>      | prefixexp
>>      | tableconstructor
>>      | '...'
>>   ;
>>
>> funcbody
>>  : ^(FUNCBODY parlist? chunk)
>>  ;
>>
>> parlist
>>  : ^(PARAMETERS namelist)
>>  | ^(PARAMETERS namelist '...')
>>  | ^(PARAMETERS '...')
>>  ;
>>
>> tableconstructor
>>  : ^(TBLCTOR field+)
>>  | TBLCTOR
>>  ;
>>
>> field
>>  : ^(TBLFIELD exp exp)
>>  | ^(TBLFIELD NAME exp)
>>  | ^(TBLFIELD exp)
>>  ;
>>
>> number
>>  : INTEGER
>>  | FLOAT
>>  | EXPONENT
>>  | HEX
>>  ;
>>
>> string
>>  : ^(STRING s=.)
>>  ;
>>
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rrahal at protecode.com  Thu Dec  1 12:54:34 2011
From: rrahal at protecode.com (Rana Rahal)
Date: Thu, 1 Dec 2011 15:54:34 -0500
Subject: [antlr-interest] beginner to ANTLR
Message-ID: <011701ccb06b$77f3fe10$67dbfa30$@protecode.com>

Hi,

 

I am new to ANTLR and I cannot figure out how to read a tag:value file,
where value can span multiple lines.

I have the following:

 

TOKEN

       :      ( TAG ':' ) => TAG ':'' '         {$setType(TAG);}

       |      (      '\n'          {newline();}

              |      '\r' '\n'     {newline();}

              |      .

              )

              {$setType(CHAR);}

;

 

What I'm trying to figure out is how I would stop reading into CHAR when I
reach a comment

 

TOKEN

       :      ( TAG ':' ) => TAG ':'' '         {$setType(TAG);}

       |   EXTCHAR

;

       

protected

CHAR

   : ( '\n'          {newline();}

              |      '\r' '\n'     {newline();}

              |      .

              )

;

 

EXTCHAR: CHAR ~LINE_COMMENT ; //I know I can't do this but how can I have
that behavior?

 

Also What's the best way to define this so that only the first : in a line
is the token others are ignored. Ex:  date: YYYY/MM/DD:HH:MM:SS

 

Thanks.

 

 

 


From rrahal at protecode.com  Fri Dec  2 05:39:03 2011
From: rrahal at protecode.com (Rana Rahal)
Date: Fri, 2 Dec 2011 08:39:03 -0500
Subject: [antlr-interest] beginner to ANTLR
In-Reply-To: <011701ccb06b$77f3fe10$67dbfa30$@protecode.com>
References: <011701ccb06b$77f3fe10$67dbfa30$@protecode.com>
Message-ID: <012b01ccb0f7$c2179d80$4646d880$@protecode.com>

I figured out the comment issue 

EXTCHAR: CHAR (LINE_COMMENT!)?

But if I can get some help on how I can set TAG to be up to the first ":" in
a line and any other ":" on that same line will be part of the VALUE portion
would be very appreciated.

Thanks

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Rana Rahal
Sent: Thursday, December 01, 2011 3:55 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] beginner to ANTLR

Hi,

 

I am new to ANTLR and I cannot figure out how to read a tag:value file,
where value can span multiple lines.

I have the following:

 

TOKEN

       :      ( TAG ':' ) => TAG ':'' '         {$setType(TAG);}

       |      (      '\n'          {newline();}

              |      '\r' '\n'     {newline();}

              |      .

              )

              {$setType(CHAR);}

;

 

What I'm trying to figure out is how I would stop reading into CHAR when I
reach a comment

 

TOKEN

       :      ( TAG ':' ) => TAG ':'' '         {$setType(TAG);}

       |   EXTCHAR

;

       

protected

CHAR

   : ( '\n'          {newline();}

              |      '\r' '\n'     {newline();}

              |      .

              )

;

 

EXTCHAR: CHAR ~LINE_COMMENT ; //I know I can't do this but how can I have
that behavior?

 

Also What's the best way to define this so that only the first : in a line
is the token others are ignored. Ex:  date: YYYY/MM/DD:HH:MM:SS

 

Thanks.

 

 

 


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rprememail at yahoo.com  Sat Dec  3 03:28:43 2011
From: rprememail at yahoo.com (Premkumar)
Date: Sat, 3 Dec 2011 03:28:43 -0800 (PST)
Subject: [antlr-interest] Fw:
Message-ID: <1322911723.18350.yint-ygo-j2me@web124706.mail.ne1.yahoo.com>

http://tmacrental.com/view_articles.php?eid=73&sequence=267&article=77&item=882&comment=32

From rprememail at yahoo.com  Sat Dec  3 09:45:11 2011
From: rprememail at yahoo.com (Premkumar)
Date: Sat, 3 Dec 2011 09:45:11 -0800 (PST)
Subject: [antlr-interest] Just look
Message-ID: <1322934311.46013.androidMobile@web124709.mail.ne1.yahoo.com>

<p>Hello Friend!<br>look into doing this If I can do it anyone can<br><a href="http://hadleigh-pom.net/profile/43JamesMacdonald/">http://hadleigh-pom.net/profile/43JamesMacdonald/</a><br>c ya.</p>

From lizhipeng at gmail.com  Sun Dec  4 23:14:13 2011
From: lizhipeng at gmail.com (=?UTF-8?B?5p2O5b+X6bmP?=)
Date: Mon, 5 Dec 2011 15:14:13 +0800
Subject: [antlr-interest] about space between operator
Message-ID: <CACTOmx9cx64ZY=_PtRCZFFY12qLXjcqrCVToGNkM2KhS_VoWWg@mail.gmail.com>

hello all

I have a very simple grammar like this:
grammar AA;

expression
: TYPE_DOUBLE (NOTEQUALS | LT)  TYPE_DOUBLE EOF
;

NOTEQUALS
: '<>' | '<' (' '+) '>'
;

LT : '<';

TYPE_DOUBLE
:   Digit+ '.' Digit*
|   '.' Digit+
;

fragment
Digit
: '0'..'9'
;
WS
:  (' '|'\r'|'\t'|'\u000C'|'\n')+ {$channel=HIDDEN;}
;

if input "1.6<>1.7" or "1.6<1.7" or "1.6 <>  1.7", it is ok
but input "1.6 < 1.7"(has white space on both sides '<' ), the grammar
can't resolve it

if I change as this
NOTEQUALS
: '<>'
;
above all are ok, but "1.6 <   > 1.7" is not work, I wan't use "<>" to mean
not equal,  and white space is allow between "< >", How Can i do?

thank you all

From bkiers at gmail.com  Mon Dec  5 02:06:14 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 5 Dec 2011 11:06:14 +0100
Subject: [antlr-interest] about space between operator
In-Reply-To: <CACTOmx9cx64ZY=_PtRCZFFY12qLXjcqrCVToGNkM2KhS_VoWWg@mail.gmail.com>
References: <CACTOmx9cx64ZY=_PtRCZFFY12qLXjcqrCVToGNkM2KhS_VoWWg@mail.gmail.com>
Message-ID: <CAOrgODbW8qn431S4dP0eGfEL31dhU9wtBuCBqoak=RUeYUgC-g@mail.gmail.com>

Try this:

NOTEQUALS
  :  '<>'
  ;

LT
  :  '<' (' '+ '>' {$type=NOTEQUALS;})?
  ;

Regards,

Bart.


On Mon, Dec 5, 2011 at 8:14 AM, ??? <lizhipeng at gmail.com> wrote:

> hello all
>
> I have a very simple grammar like this:
> grammar AA;
>
> expression
> : TYPE_DOUBLE (NOTEQUALS | LT)  TYPE_DOUBLE EOF
> ;
>
> NOTEQUALS
> : '<>' | '<' (' '+) '>'
> ;
>
> LT : '<';
>
> TYPE_DOUBLE
> :   Digit+ '.' Digit*
> |   '.' Digit+
> ;
>
> fragment
> Digit
> : '0'..'9'
> ;
> WS
> :  (' '|'\r'|'\t'|'\u000C'|'\n')+ {$channel=HIDDEN;}
> ;
>
> if input "1.6<>1.7" or "1.6<1.7" or "1.6 <>  1.7", it is ok
> but input "1.6 < 1.7"(has white space on both sides '<' ), the grammar
> can't resolve it
>
> if I change as this
> NOTEQUALS
> : '<>'
> ;
> above all are ok, but "1.6 <   > 1.7" is not work, I wan't use "<>" to mean
> not equal,  and white space is allow between "< >", How Can i do?
>
> thank you all
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From lizhipeng at gmail.com  Mon Dec  5 03:55:24 2011
From: lizhipeng at gmail.com (=?UTF-8?B?5p2O5b+X6bmP?=)
Date: Mon, 5 Dec 2011 19:55:24 +0800
Subject: [antlr-interest] about space between operator
In-Reply-To: <CAOrgODbW8qn431S4dP0eGfEL31dhU9wtBuCBqoak=RUeYUgC-g@mail.gmail.com>
References: <CACTOmx9cx64ZY=_PtRCZFFY12qLXjcqrCVToGNkM2KhS_VoWWg@mail.gmail.com>
	<CAOrgODbW8qn431S4dP0eGfEL31dhU9wtBuCBqoak=RUeYUgC-g@mail.gmail.com>
Message-ID: <CACTOmx-oaZiqWzTYrqhKsG4Q25xEbCtOhrgwzggdv4XNmwuzeA@mail.gmail.com>

thank you

but not work.....

On Monday, December 5, 2011, Bart Kiers wrote:

> Try this:
>
> NOTEQUALS
>   :  '<>'
>   ;
>
> LT
>   :  '<' (' '+ '>' {$type=NOTEQUALS;})?
>   ;
>
> Regards,
>
> Bart.
>
>
> On Mon, Dec 5, 2011 at 8:14 AM, ??? <lizhipeng at gmail.com<javascript:_e({}, 'cvml', 'lizhipeng at gmail.com');>
> > wrote:
>
>> hello all
>>
>> I have a very simple grammar like this:
>> grammar AA;
>>
>> expression
>> : TYPE_DOUBLE (NOTEQUALS | LT)  TYPE_DOUBLE EOF
>> ;
>>
>> NOTEQUALS
>> : '<>' | '<' (' '+) '>'
>> ;
>>
>> LT : '<';
>>
>> TYPE_DOUBLE
>> :   Digit+ '.' Digit*
>> |   '.' Digit+
>> ;
>>
>> fragment
>> Digit
>> : '0'..'9'
>> ;
>> WS
>> :  (' '|'\r'|'\t'|'\u000C'|'\n')+ {$channel=HIDDEN;}
>> ;
>>
>> if input "1.6<>1.7" or "1.6<1.7" or "1.6 <>  1.7", it is ok
>> but input "1.6 < 1.7"(has white space on both sides '<' ), the grammar
>> can't resolve it
>>
>> if I change as this
>> NOTEQUALS
>> : '<>'
>> ;
>> above all are ok, but "1.6 <   > 1.7" is not work, I wan't use "<>" to
>> mean
>> not equal,  and white space is allow between "< >", How Can i do?
>>
>> thank you all
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From bkiers at gmail.com  Mon Dec  5 04:25:06 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 5 Dec 2011 13:25:06 +0100
Subject: [antlr-interest] about space between operator
In-Reply-To: <CACTOmx-oaZiqWzTYrqhKsG4Q25xEbCtOhrgwzggdv4XNmwuzeA@mail.gmail.com>
References: <CACTOmx9cx64ZY=_PtRCZFFY12qLXjcqrCVToGNkM2KhS_VoWWg@mail.gmail.com>
	<CAOrgODbW8qn431S4dP0eGfEL31dhU9wtBuCBqoak=RUeYUgC-g@mail.gmail.com>
	<CACTOmx-oaZiqWzTYrqhKsG4Q25xEbCtOhrgwzggdv4XNmwuzeA@mail.gmail.com>
Message-ID: <CAOrgODb3i2jyCXD8ANj6MyJtHxWDestcO38U294D=6uvR86A8A@mail.gmail.com>

Ah, yeah, I forgot a `( ... )?` somewhere, sorry.

This works:

grammar AA;

@parser::members {
  public static void main(String[] args) throws Exception {
    String src = "1.1<>1.2; 1.3<1.4; 1.5 <>  1.6; 1.7 < 1.8;";
    AALexer lexer = new AALexer(new ANTLRStringStream(src));
    AAParser parser = new AAParser(new CommonTokenStream(lexer));
    parser.parse();
  }
}

parse
  :  (expression ';' {System.out.println("parsed: " + $expression.text);})+
EOF
  ;

expression
  :  TYPE_DOUBLE (NOTEQUALS | LT)  TYPE_DOUBLE
  ;

NOTEQUALS
  :  '<>'
  ;

LT
  :  '<' (' '+ ('>' {$type=NOTEQUALS;})?)?
  ;

TYPE_DOUBLE
  :  Digit+ '.' Digit*
  |  '.' Digit+
  ;

WS
  :  (' '|'\r'|'\t'|'\u000C'|'\n')+ {$channel=HIDDEN;}
  ;

fragment Digit : '0'..'9';


Regards,

Bart.


On Mon, Dec 5, 2011 at 12:55 PM, ??? <lizhipeng at gmail.com> wrote:

> thank you
>
> but not work.....
>
>
> On Monday, December 5, 2011, Bart Kiers wrote:
>
>> Try this:
>>
>> NOTEQUALS
>>   :  '<>'
>>   ;
>>
>> LT
>>   :  '<' (' '+ '>' {$type=NOTEQUALS;})?
>>   ;
>>
>> Regards,
>>
>> Bart.
>>
>>
>> On Mon, Dec 5, 2011 at 8:14 AM, ??? <lizhipeng at gmail.com> wrote:
>>
>>> hello all
>>>
>>> I have a very simple grammar like this:
>>> grammar AA;
>>>
>>> expression
>>> : TYPE_DOUBLE (NOTEQUALS | LT)  TYPE_DOUBLE EOF
>>> ;
>>>
>>> NOTEQUALS
>>> : '<>' | '<' (' '+) '>'
>>> ;
>>>
>>> LT : '<';
>>>
>>> TYPE_DOUBLE
>>> :   Digit+ '.' Digit*
>>> |   '.' Digit+
>>> ;
>>>
>>> fragment
>>> Digit
>>> : '0'..'9'
>>> ;
>>> WS
>>> :  (' '|'\r'|'\t'|'\u000C'|'\n')+ {$channel=HIDDEN;}
>>> ;
>>>
>>> if input "1.6<>1.7" or "1.6<1.7" or "1.6 <>  1.7", it is ok
>>> but input "1.6 < 1.7"(has white space on both sides '<' ), the grammar
>>> can't resolve it
>>>
>>> if I change as this
>>> NOTEQUALS
>>> : '<>'
>>> ;
>>> above all are ok, but "1.6 <   > 1.7" is not work, I wan't use "<>" to
>>> mean
>>> not equal,  and white space is allow between "< >", How Can i do?
>>>
>>> thank you all
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>

From lizhipeng at gmail.com  Mon Dec  5 04:59:46 2011
From: lizhipeng at gmail.com (=?UTF-8?B?5p2O5b+X6bmP?=)
Date: Mon, 5 Dec 2011 20:59:46 +0800
Subject: [antlr-interest] about space between operator
In-Reply-To: <CAOrgODb3i2jyCXD8ANj6MyJtHxWDestcO38U294D=6uvR86A8A@mail.gmail.com>
References: <CACTOmx9cx64ZY=_PtRCZFFY12qLXjcqrCVToGNkM2KhS_VoWWg@mail.gmail.com>
	<CAOrgODbW8qn431S4dP0eGfEL31dhU9wtBuCBqoak=RUeYUgC-g@mail.gmail.com>
	<CACTOmx-oaZiqWzTYrqhKsG4Q25xEbCtOhrgwzggdv4XNmwuzeA@mail.gmail.com>
	<CAOrgODb3i2jyCXD8ANj6MyJtHxWDestcO38U294D=6uvR86A8A@mail.gmail.com>
Message-ID: <CACTOmx9G=Cdh95hOWyrpEmVK_gNqXgLQAW1g0oFOZs32JANVFA@mail.gmail.com>

thank you
it works well


On Monday, December 5, 2011, Bart Kiers wrote:

> Ah, yeah, I forgot a `( ... )?` somewhere, sorry.
>
> This works:
>
> grammar AA;
>
> @parser::members {
>   public static void main(String[] args) throws Exception {
>     String src = "1.1<>1.2; 1.3<1.4; 1.5 <>  1.6; 1.7 < 1.8;";
>     AALexer lexer = new AALexer(new ANTLRStringStream(src));
>     AAParser parser = new AAParser(new CommonTokenStream(lexer));
>     parser.parse();
>   }
> }
>
> parse
>   :  (expression ';' {System.out.println("parsed: " +
> $expression.text);})+ EOF
>   ;
>
> expression
>   :  TYPE_DOUBLE (NOTEQUALS | LT)  TYPE_DOUBLE
>   ;
>
> NOTEQUALS
>   :  '<>'
>   ;
>
> LT
>   :  '<' (' '+ ('>' {$type=NOTEQUALS;})?)?
>   ;
>
> TYPE_DOUBLE
>   :  Digit+ '.' Digit*
>   |  '.' Digit+
>   ;
>
> WS
>   :  (' '|'\r'|'\t'|'\u000C'|'\n')+ {$channel=HIDDEN;}
>   ;
>
> fragment Digit : '0'..'9';
>
>
> Regards,
>
> Bart.
>
>
> On Mon, Dec 5, 2011 at 12:55 PM, ??? <lizhipeng at gmail.com<javascript:_e({}, 'cvml', 'lizhipeng at gmail.com');>
> > wrote:
>
>> thank you
>>
>> but not work.....
>>
>>
>> On Monday, December 5, 2011, Bart Kiers wrote:
>>
>>> Try this:
>>>
>>> NOTEQUALS
>>>   :  '<>'
>>>   ;
>>>
>>> LT
>>>   :  '<' (' '+ '>' {$type=NOTEQUALS;})?
>>>   ;
>>>
>>> Regards,
>>>
>>> Bart.
>>>
>>>
>>> On Mon, Dec 5, 2011 at 8:14 AM, ??? <lizhipeng at gmail.com> wrote:
>>>
>>>> hello all
>>>>
>>>> I have a very simple grammar like this:
>>>> grammar AA;
>>>>
>>>> expression
>>>> : TYPE_DOUBLE (NOTEQUALS | LT)  TYPE_DOUBLE EOF
>>>> ;
>>>>
>>>> NOTEQUALS
>>>> : '<>' | '<' (' '+) '>'
>>>> ;
>>>>
>>>> LT : '<';
>>>>
>>>> TYPE_DOUBLE
>>>> :   Digit+ '.' Digit*
>>>> |   '.' Digit+
>>>> ;
>>>>
>>>> fragment
>>>> Digit
>>>> : '0'..'9'
>>>> ;
>>>> WS
>>>> :  (' '|'\r'|'\t'|'\u000C'|'\n')+ {$channel=HIDDEN;}
>>>> ;
>>>>
>>>> if input "1.6<>1.7" or "1.6<1.7" or "1.6 <>  1.7", it is ok
>>>> but input "1.6 < 1.7"(has white space on both sides '<' ), the grammar
>>>> can't resolve it
>>>>
>>>> if I change as this
>>>> NOTEQUALS
>>>> : '<>'
>>>> ;
>>>> above all are ok, but "1.6 <   > 1.7" is not work, I wan't use "<>" to
>>>> mean
>>>> not equal,  and white space is allow between "< >", How Can i do?
>>>>
>>>> thank you all
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>
>>>
>

From Stefan.Maetje at esd-electronics.com  Mon Dec  5 10:17:25 2011
From: Stefan.Maetje at esd-electronics.com (Stefan =?iso-8859-1?b?TeR0amU=?=)
Date: Mon, 05 Dec 2011 19:17:25 +0100
Subject: [antlr-interest] Can't express a obvious thing in ANTLR tree
	rewriting syntax
Message-ID: <1323109045.1873.2@pc-stefanm>

Hi,

I unfortunately can't express what I want in ANTLR syntax. It should be  
obvious but I
can't see the solution at the moment. I want to build an AST while parsing  
generating
a VAR_DCL imaginary node for a variable declaration and an ARRAY_DCL imaginary  
node
for an array declaration.

Here are some example declarations and the expected AST:
DCL var		FIXED;	-> (VAR_DCL FIXED MOD_LIST var)
DCL array  (10)	FIXED;	-> (ARRAY_DCL ^(DIM_LIST BOUND 1 10) FIXED MOD_LIST  
array)

The language itself is not ambigious at this point of the grammar so it should  
be possible
to simply write the solution down without using syntactic or semantic  
predicates. But I
don't see how to solve it in the rule "dclSet". Possible semantic predicate  
marked with
"???CONDITION???".

I have the following parts of a lexer/parser grammar:

/**	"VariableDeclaration"
	*/
var_dcl:
	KW_DCL!			// "DCL"
	dclSet (',' dclSet)*
	';'!
	;

/**	"DeclareSentence"
*/
dclSet:
	ids=oneIdOrList dimAttr? i='INV'? simpleType globalAttr? initAttr?
		-> {???CONDITION???}?	^(ARRAY_DCL $dimAttr simpleType  
^(MOD_LIST $i? globalAttr?) $ids+)
		-> 			^(VAR_DCL simpleType ^(MOD_LIST $i?  
globalAttr?) $ids+)
	;

/** "OneIdentifierOrList"
*/
oneIdOrList:
	( ID | '(' ID (',' ID )* ')' )	-> ID+
	;

/**	"DimensionAttribute"
	The dimension boundaries for an array.
	*/
dimAttr:
	LPAREN dimBound ( ',' dimBound )* RPAREN	-> ^(DIM_LIST  
dimBound+)
	;

/**	"DimensionBoundaries"
	BOUND carries always two expressions for the LWB and UPB. If the LWB
	is not specified it is substituted as FIX_LIT with value 1. This is
	an "integer".
*/
dimBound
	:	lwb=constFixExpr COLON upb=constFixExpr	-> BOUND[$lwb.start]  
$lwb $upb
	|	upb=constFixExpr	-> BOUND[$upb.start]  
FIX_LIT[$upb.start,"1"] PRSZ["15"] $upb
	;


Any help appreciated,
	Stefan M?tje

From jbb at acm.org  Mon Dec  5 13:50:40 2011
From: jbb at acm.org (John B. Brodie)
Date: Mon, 05 Dec 2011 16:50:40 -0500
Subject: [antlr-interest] Can't express a obvious thing in ANTLR tree
 rewriting syntax
In-Reply-To: <1323109045.1873.2@pc-stefanm>
References: <1323109045.1873.2@pc-stefanm>
Message-ID: <4EDD3CB0.3010408@acm.org>

Greetings!

On 12/05/2011 01:17 PM, Stefan M?tje wrote:
> Hi,
>
> I unfortunately can't express what I want in ANTLR syntax. It should be  
> obvious but I
> can't see the solution at the moment. I want to build an AST while parsing  
> generating
> a VAR_DCL imaginary node for a variable declaration and an ARRAY_DCL imaginary  
> node
> for an array declaration.
>
> Here are some example declarations and the expected AST:
> DCL var		FIXED;	-> (VAR_DCL FIXED MOD_LIST var)
> DCL array  (10)	FIXED;	-> (ARRAY_DCL ^(DIM_LIST BOUND 1 10) FIXED MOD_LIST  
> array)
>
> The language itself is not ambigious at this point of the grammar so it should  
> be possible
> to simply write the solution down without using syntactic or semantic  
> predicates. But I
> don't see how to solve it in the rule "dclSet". Possible semantic predicate  
> marked with
> "???CONDITION???".
>
> I have the following parts of a lexer/parser grammar:
>
> /**	"VariableDeclaration"
> 	*/
> var_dcl:
> 	KW_DCL!			// "DCL"
> 	dclSet (',' dclSet)*
> 	';'!
> 	;
>
> /**	"DeclareSentence"
> */
> dclSet:
> 	ids=oneIdOrList dimAttr? i='INV'? simpleType globalAttr? initAttr?
> 		-> {???CONDITION???}?	^(ARRAY_DCL $dimAttr simpleType  
> ^(MOD_LIST $i? globalAttr?) $ids+)
> 		-> 			^(VAR_DCL simpleType ^(MOD_LIST $i?  
> globalAttr?) $ids+)
> 	;
>
> /** "OneIdentifierOrList"
> */
> oneIdOrList:
> 	( ID | '(' ID (',' ID )* ')' )	-> ID+
> 	;
>
> /**	"DimensionAttribute"
> 	The dimension boundaries for an array.
> 	*/
> dimAttr:
> 	LPAREN dimBound ( ',' dimBound )* RPAREN	-> ^(DIM_LIST  
> dimBound+)
> 	;
>
> /**	"DimensionBoundaries"
> 	BOUND carries always two expressions for the LWB and UPB. If the LWB
> 	is not specified it is substituted as FIX_LIT with value 1. This is
> 	an "integer".
> */
> dimBound
> 	:	lwb=constFixExpr COLON upb=constFixExpr	-> BOUND[$lwb.start]  
> $lwb $upb
> 	|	upb=constFixExpr	-> BOUND[$upb.start]  
> FIX_LIT[$upb.start,"1"] PRSZ["15"] $upb
> 	;
>
just a simple flag...

dclSet @init{boolean array=false;} :
    ids=oneIdOrList (dimAttr{array=true;})? i='INV'? simpleType
globalAttr? initAttr?
        -> {array}? ^(ARRAY_DCL dimAttr simpleType ^(MOD_LIST $i?
globalAttr?) $ids+)
        ->          ^(VAR_DCL simpleType ^(MOD_LIST $i? globalAttr?) $ids+)
    ;

(BTW, did you mean to leave initAttr out of the tree?)

hope this helps
   -jbb


From weissig at rbg.informatik.tu-darmstadt.de  Tue Dec  6 02:33:49 2011
From: weissig at rbg.informatik.tu-darmstadt.de (=?ISO-8859-15?Q?Yves_Wei=DFig?=)
Date: Tue, 06 Dec 2011 11:33:49 +0100
Subject: [antlr-interest] C: get underlying graph and struct
Message-ID: <4EDDEF8D.4090404@rbg.informatik.tu-darmstadt.de>

Hi,
I'm using the C backend for my generated grammar within my C++
application. It works great so far, but I'm planning on restructuring my
C++ code. I want to have distinct parse and unparse components. In
between I want to plug in different transformation on the tree. Now my
question: Once I generated my tree and I exit the C++ subroutine my tree
is gone. My naive approach would be to recursively deep copy the
ANTLR3_BASE_TREE_struct to a global variable, but I thought there might
be a better solution? Have you done something similar? Any ideas how to
solve this problem?
Best regards
Yves

From jimi at temporal-wave.com  Tue Dec  6 04:07:19 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 6 Dec 2011 20:07:19 +0800
Subject: [antlr-interest] C: get underlying graph and struct
In-Reply-To: <4EDDEF8D.4090404@rbg.informatik.tu-darmstadt.de>
References: <4EDDEF8D.4090404@rbg.informatik.tu-darmstadt.de>
Message-ID: <3DDFE4CD-E04C-4EBC-A1B4-4313C6073449@temporal-wave.com>

The tree will stay until you free it, so if you need it outside that function, store the references higher up in the hierarchy. 

Jim

On Dec 6, 2011, at 18:33, Yves Wei?ig <weissig at rbg.informatik.tu-darmstadt.de> wrote:

> Hi,
> I'm using the C backend for my generated grammar within my C++
> application. It works great so far, but I'm planning on restructuring my
> C++ code. I want to have distinct parse and unparse components. In
> between I want to plug in different transformation on the tree. Now my
> question: Once I generated my tree and I exit the C++ subroutine my tree
> is gone. My naive approach would be to recursively deep copy the
> ANTLR3_BASE_TREE_struct to a global variable, but I thought there might
> be a better solution? Have you done something similar? Any ideas how to
> solve this problem?
> Best regards
> Yves
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From weissig at rbg.informatik.tu-darmstadt.de  Tue Dec  6 06:05:44 2011
From: weissig at rbg.informatik.tu-darmstadt.de (=?UTF-8?B?WXZlcyBXZWnDn2ln?=)
Date: Tue, 06 Dec 2011 15:05:44 +0100
Subject: [antlr-interest] C: get underlying graph and struct
In-Reply-To: <3DDFE4CD-E04C-4EBC-A1B4-4313C6073449@temporal-wave.com>
References: <4EDDEF8D.4090404@rbg.informatik.tu-darmstadt.de>
	<3DDFE4CD-E04C-4EBC-A1B4-4313C6073449@temporal-wave.com>
Message-ID: <4EDE2138.6030106@rbg.informatik.tu-darmstadt.de>

Ah... thanks so much, I knew I was missing something really obvious.

Yves

Am 06.12.2011 13:07, schrieb Jim Idle:
> The tree will stay until you free it, so if you need it outside that function, store the references higher up in the hierarchy. 
> 
> Jim
> 
> On Dec 6, 2011, at 18:33, Yves Wei?ig <weissig at rbg.informatik.tu-darmstadt.de> wrote:
> 
>> Hi,
>> I'm using the C backend for my generated grammar within my C++
>> application. It works great so far, but I'm planning on restructuring my
>> C++ code. I want to have distinct parse and unparse components. In
>> between I want to plug in different transformation on the tree. Now my
>> question: Once I generated my tree and I exit the C++ subroutine my tree
>> is gone. My naive approach would be to recursively deep copy the
>> ANTLR3_BASE_TREE_struct to a global variable, but I thought there might
>> be a better solution? Have you done something similar? Any ideas how to
>> solve this problem?
>> Best regards
>> Yves
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From Stefan.Maetje at esd-electronics.com  Tue Dec  6 09:07:04 2011
From: Stefan.Maetje at esd-electronics.com (Stefan =?iso-8859-1?b?TeR0amU=?=)
Date: Tue, 06 Dec 2011 18:07:04 +0100
Subject: [antlr-interest] Can't express a obvious thing in ANTLR tree
 rewriting syntax
In-Reply-To: <4EDD3CB0.3010408@acm.org> (from jbb@acm.org on Mon Dec  5
	22:50:40 2011)
Message-ID: <1323191224.3569.1@pc-stefanm>

Thanks for the input.

I changed the dclSet rule now to this which works:

dclSet:
     ids=oneIdOrList dimAttr? i='INV'? simpleType globalAttr? initAttr?
         -> {null!=$dimAttr.tree}?    ^(ARRAY_DCL dimAttr simpleType  
^(MOD_LIST $i? globalAttr?) $ids+ initAttr?)
         ->                           ^(VAR_DCL simpleType ^(MOD_LIST $i?  
globalAttr?) $ids+ initAttr?)
	;

It was not clear to me if I must use a semantic predicate or if there would be  
a pure syntactic or
grammatic solution. Now I test if the dimAttr rule returns a tree then it must  
be an array declaration.

Greetings,
	Stefan

Btw.:	You were right, I don't want to leave the initAttr out of the tree but  
I have been stuck
	at the ARRAY_DCL / VAR_DCL issue.


Am 05.12.2011 22:50:40 schrieb(en) John B. Brodie:
> Greetings!
> 
> On 12/05/2011 01:17 PM, Stefan M?tje wrote:
> > Hi,
> >
> > I unfortunately can't express what I want in ANTLR syntax. It should be
> > obvious but I
> > can't see the solution at the moment. I want to build an AST while parsing
> 
> > generating
> > a VAR_DCL imaginary node for a variable declaration and an ARRAY_DCL
> imaginary
> > node
> > for an array declaration.
> >
> > Here are some example declarations and the expected AST:
> > DCL var		FIXED;	-> (VAR_DCL FIXED MOD_LIST var)
> > DCL array  (10)	FIXED;	-> (ARRAY_DCL ^(DIM_LIST BOUND 1 10)
> FIXED MOD_LIST
> > array)
> >
> > The language itself is not ambigious at this point of the grammar so it
> should
> > be possible
> > to simply write the solution down without using syntactic or semantic
> > predicates. But I
> > don't see how to solve it in the rule "dclSet". Possible semantic
> predicate
> 
> > marked with
> > "???CONDITION???".
> >
> > I have the following parts of a lexer/parser grammar:
> >
> > /**	"VariableDeclaration"
> > 	*/
> > var_dcl:
> > 	KW_DCL!			// "DCL"
> > 	dclSet (',' dclSet)*
> > 	';'!
> > 	;
> >
> > /**	"DeclareSentence"
> > */
> > dclSet:
> > 	ids=oneIdOrList dimAttr? i='INV'? simpleType globalAttr? initAttr?
> > 		-> {???CONDITION???}?	^(ARRAY_DCL $dimAttr
> simpleType
> > ^(MOD_LIST $i? globalAttr?) $ids+)
> > 		-> 			^(VAR_DCL simpleType ^(MOD_LIST
> $i?
> > globalAttr?) $ids+)
> > 	;
> >
> > /** "OneIdentifierOrList"
> > */
> > oneIdOrList:
> > 	( ID | '(' ID (',' ID )* ')' )	-> ID+
> > 	;
> >
> > /**	"DimensionAttribute"
> > 	The dimension boundaries for an array.
> > 	*/
> > dimAttr:
> > 	LPAREN dimBound ( ',' dimBound )* RPAREN	-> ^(DIM_LIST
> > dimBound+)
> > 	;
> >
> > /**	"DimensionBoundaries"
> > 	BOUND carries always two expressions for the LWB and UPB. If the
> LWB
> > 	is not specified it is substituted as FIX_LIT with value 1. This is
> > 	an "integer".
> > */
> > dimBound
> > 	:	lwb=constFixExpr COLON upb=constFixExpr	->
> BOUND[$lwb.start]
> > $lwb $upb
> > 	|	upb=constFixExpr	-> BOUND[$upb.start]
> > FIX_LIT[$upb.start,"1"] PRSZ["15"] $upb
> > 	;
> >
> just a simple flag...
> 
> dclSet @init{boolean array=false;} :
>     ids=oneIdOrList (dimAttr{array=true;})? i='INV'? simpleType
> globalAttr? initAttr?
>         -> {array}? ^(ARRAY_DCL dimAttr simpleType ^(MOD_LIST $i?
> globalAttr?) $ids+)
>         ->          ^(VAR_DCL simpleType ^(MOD_LIST $i? globalAttr?) $ids+)
>     ;
> 
> (BTW, did you mean to leave initAttr out of the tree?)
> 
> hope this helps
>    -jbb

From alex.redinger at segmint.com  Tue Dec  6 11:02:54 2011
From: alex.redinger at segmint.com (Alex Redinger)
Date: Tue, 6 Dec 2011 14:02:54 -0500
Subject: [antlr-interest] Need help spotting Tree grammar error(s)
Message-ID: <CACejs389ytJ-UTKpjMho7u-Yw+xLiZMtm70tdavMAPyRmR+4LQ@mail.gmail.com>

Hello All,

This is my first experience with Antlr (or anything related to BNF).
I am trying to make a program that will parse boolean equations, run them
against sets of data (integers for, now), and return true/false.

Currently, the lexer/parser portion is producing the expected ASTs.
 However, I the tree parser produces messages like...

node from line 1:12 required (...)+ loop did not match anything at input
'and'

and

"mismatched tree node: + expecting SET"

Below are my tree grammar and test class:

tree grammar KlicWalker;

options {
  tokenVocab=Klic;
  ASTLabelType=CommonTree;
}

@header {
  package klic;
  import java.util.ArrayList;
  import java.util.Arrays;
}

@members {
  ArrayList<String> set = new ArrayList<String>(Arrays.asList("1234567",
"9875639", "1254098", "8234524", "4937341", "9876543"));
  boolean isFit = false;

  public boolean getResults() {
     try{
        this.prog();
     }
     catch (RecognitionException e){
        System.out.println("Awe Snap!");
     }
     finally{
        return isFit;
     }
  }

  public void setSet(ArrayList newSet) {
     set = newSet;
     isFit = false;
  }
  public ArrayList getSet(){
     return set;
  }
}

prog
: stat+ EOF
;
stat
: expr NEWLINE {}
| NEWLINE {}
;

expr returns [boolean value]
: ^(OR a=expr b=expr) {$value = $a.value || $b.value;}
| ^(AND a=expr b=expr) {$value = $a.value && $b.value;}
| ^(NOT a=expr) {$value = !$a.value}
| ^(ALLIN ^(SET KLI)) {
$value = true;
ArrayList<CommonTree> includedSet = new
ArrayList<CommonTree>($SET.getChildren());
for(int i = 0; i < includedSet.size(); i++){
if(!set.contains(includedSet.get(i).getText())){
$value = false;
break;
}//endif
}//end of for loop */ }
}
| ^(PARTIN ^(SET KLI+)) {
$value = false;
ArrayList<CommonTree> partialSet = new
ArrayList<CommonTree>($SET.getChildren());
for(int i = 0; i < partialSet.size(); i++){
if(set.contains(partialSet.get(i).getText())){
$value = true;
break;
}
}
| ^(NOTIN ^(SET KLI+)) {
ArrayList<CommonTree> excludedSet = new
ArrayList<CommonTree>($SET.getChildren());
$value = true;
for(int i = 0; i < excludedSet.size(); i++){
if(set.contains(excludedSet.get(i).getText())){
$value = false;
break;
}//endif
}
}
;
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import java.io.*;
import org.antlr.runtime.*;
import org.antlr.runtime.debug.DebugEventSocketProxy;
import org.antlr.runtime.tree.*;

import java.util.*;
import klic.*;


public class setTest {

    public static void main(String args[]) throws Exception {
        KlicLexer lex = new KlicLexer(new ANTLRFileStream("input.txt",
"UTF8"));
        CommonTokenStream tokens = new CommonTokenStream(lex);

        KlicParser parser = new KlicParser(tokens);
KlicParser.prog_return r = parser.prog();
        CommonTree t  = (CommonTree)r.getTree();
        CommonTreeNodeStream nodes = new CommonTreeNodeStream(t);
        KlicWalker evaluator = new KlicWalker(nodes);

System.out.println(t.toStringTree());

        System.out.println(evaluator.getResults());
    }
}


So, if input is "+{1234567} or ^{9876543,1112223} and !{8273645,5556667}"
I get an AST of "(or (+ (SET 1234567)) (and (^ (SET 9876543 1112223)) (!
(SET 8273645 5556667))))".  Where '+' maps to ALLIN, '^' maps to PARTIN,
'!' maps to NOTIN, and SET is imaginary.

Any hints or help as to how to make my tree parser work is much appreciated.

A small side-note:  I also noticed that my parser's and tree parser's
.token don't really match.  I don't know if that is a problem

Thanks,
--Alex

From vladimir.iorio at gmail.com  Tue Dec  6 17:01:31 2011
From: vladimir.iorio at gmail.com (Vladimir Di Iorio)
Date: Tue, 6 Dec 2011 23:01:31 -0200
Subject: [antlr-interest] tree grammar generation
Message-ID: <CAGzrTte+u6=tmCY0ZENCQeEJSE6aQYJUVrE_DsnXpAE69kRu-A@mail.gmail.com>

Is there a tool for automatic tree grammar generation,
using as input the text of a ANTLR grammar annotated
with ^, ! and rewrite rules?

-- Vladimir

From researcher0x00 at gmail.com  Wed Dec  7 04:51:57 2011
From: researcher0x00 at gmail.com (Eric)
Date: Wed, 7 Dec 2011 07:51:57 -0500
Subject: [antlr-interest] ANTLR v4 C#
Message-ID: <CAN45N107EbYRK6O8uNA_8tLCFqV_ys4pVefyf1Pp0ErjuJiEFw@mail.gmail.com>

Hi Sam,

I know you and the others are busy working on ANTLR v4, and from looking at
the repository code, it looks like it will be another significant step
forward.

If these questions are being asked to early, or you want to hold off until
an announcement is ready, I understand.

I am only asking them because I am at cross roads and ANTLR v4, even in a
development version, might be a better path for me to take at this time for
a problem I am trying to solve using ANTLR.

Currently my understanding is that ANTLR v4 should be ready as a alpha in a
month or two, do you know if this is still true?

Will the C# target be ready at that time?

Will ANTLRworks v2 be ready at that time?

Will there be plug-ins for Visual Studio 2010?


Thanks,  Eric

From sharwell at pixelminegames.com  Wed Dec  7 06:23:59 2011
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Wed, 7 Dec 2011 08:23:59 -0600
Subject: [antlr-interest] ANTLR v4 C#
In-Reply-To: <CAN45N107EbYRK6O8uNA_8tLCFqV_ys4pVefyf1Pp0ErjuJiEFw@mail.gmail.com>
References: <CAN45N107EbYRK6O8uNA_8tLCFqV_ys4pVefyf1Pp0ErjuJiEFw@mail.gmail.com>
Message-ID: <012401ccb4eb$dd448030$97cd8090$@pixelminegames.com>

Hi Eric,

 

An early release of ANTLRWorks 2 should definitely be available with the
first public (preview) releases of ANTLR 4. So far all of the work has been
on the Java version. I'm only planning to begin the C# and C++ ports after
the code "settles down a bit," which will probably be sometime after the
initial alpha release.

 

Sam

 

From: Eric [mailto:researcher0x00 at gmail.com] 
Sent: Wednesday, December 07, 2011 6:52 AM
To: ANTLR interest; Sam Harwell
Subject: ANTLR v4 C#

 

Hi Sam,

 

I know you and the others are busy working on ANTLR v4, and from looking at
the repository code, it looks like it will be another significant step
forward.

 

If these questions are being asked to early, or you want to hold off until
an announcement is ready, I understand.

 

I am only asking them because I am at cross roads and ANTLR v4, even in a
development version, might be a better path for me to take at this time for
a problem I am trying to solve using ANTLR.

 

Currently my understanding is that ANTLR v4 should be ready as a alpha in a
month or two, do you know if this is still true?

 

Will the C# target be ready at that time?

 

Will ANTLRworks v2 be ready at that time?

 

Will there be plug-ins for Visual Studio 2010?

 

 

Thanks,  Eric

 

 

 

 


From researcher0x00 at gmail.com  Wed Dec  7 07:50:35 2011
From: researcher0x00 at gmail.com (Eric)
Date: Wed, 7 Dec 2011 10:50:35 -0500
Subject: [antlr-interest] ANTLR v4 C#
In-Reply-To: <012401ccb4eb$dd448030$97cd8090$@pixelminegames.com>
References: <CAN45N107EbYRK6O8uNA_8tLCFqV_ys4pVefyf1Pp0ErjuJiEFw@mail.gmail.com>
	<012401ccb4eb$dd448030$97cd8090$@pixelminegames.com>
Message-ID: <CAN45N11ev1hgHwHbSqonRTXnSzUYS_8z1VXC8osrEdibymgJVw@mail.gmail.com>

Sam,

Thanks.

And to all those working on ANTLR v4, thanks for all of your hard work.


On Wed, Dec 7, 2011 at 9:23 AM, Sam Harwell <sharwell at pixelminegames.com>wrote:

> Hi Eric,****
>
> ** **
>
> An early release of ANTLRWorks 2 should definitely be available with the
> first public (preview) releases of ANTLR 4. So far all of the work has been
> on the Java version. I?m only planning to begin the C# and C++ ports after
> the code ?settles down a bit,? which will probably be sometime after the
> initial alpha release.****
>
> ** **
>
> Sam****
>
> ** **
>
> *From:* Eric [mailto:researcher0x00 at gmail.com]
> *Sent:* Wednesday, December 07, 2011 6:52 AM
> *To:* ANTLR interest; Sam Harwell
> *Subject:* ANTLR v4 C#****
>
> ** **
>
> Hi Sam,****
>
>  ****
>
> I know you and the others are busy working on ANTLR v4, and from looking
> at the repository code, it looks like it will be another significant step
> forward.****
>
>  ****
>
> If these questions are being asked to early, or you want to hold off until
> an announcement is ready, I understand.****
>
>  ****
>
> I am only asking them because I am at cross roads and ANTLR v4, even in a
> development version, might be a better path for me to take at this time for
> a problem I am trying to solve using ANTLR.****
>
>  ****
>
> Currently my understanding is that ANTLR v4 should be ready as a alpha in
> a month or two, do you know if this is still true?****
>
>  ****
>
> Will the C# target be ready at that time?****
>
>  ****
>
> Will ANTLRworks v2 be ready at that time?****
>
>  ****
>
> Will there be plug-ins for Visual Studio 2010?****
>
>  ****
>
>  ****
>
> Thanks,  Eric****
>
>  ****
>
>  ****
>
>  ****
>
>  ****
>

From bill.andersen at mac.com  Wed Dec  7 08:01:14 2011
From: bill.andersen at mac.com (Bill Andersen)
Date: Wed, 07 Dec 2011 11:01:14 -0500
Subject: [antlr-interest] ST same line auto-indentation
Message-ID: <208A3257-BFAE-4887-9200-E685C886A073@mac.com>


Hi folks

I have some data I want to write out like this:

A1	B1
	B2
	B3

A2	B4
	B5

That is, with each A is a list of B's and I'd like to write this indented as above.  I've tried a template that looks like

write(a,blist) ::= <<
<a> <blist; separator="\n">
>>

but that writes like

A1 B1
B2
B3

Changing the template to 

write(a,blist) ::= <<
<a> 
	<blist; separator="\n">
>>

causes correct auto-indent behavior, but I don't want the output to look like this

A1
	B1
	B2
	B3

Any ideas?  Thanks in advance.

	.bill



From rag700504 at hotmail.com  Wed Dec  7 10:19:37 2011
From: rag700504 at hotmail.com (roberto)
Date: Wed, 7 Dec 2011 13:19:37 -0500
Subject: [antlr-interest] About removing the ";
	" In the last sentence of a block
Message-ID: <BLU0-SMTP37024839F4934A6D6B4383BBDBB0@phx.gbl>

Hello Everyone

Itried to create asimplelanguagewhere I want todeletethe last';'which 
appearsin a block.Besides having compound blocks,that do not need';'at 
the end ofthe sentence.

This exampleis what I have

*{

a=34;;;;

for(34)

a=59;

}

a=34;

I would liketoremove the';'which goesbehind the59.Iwondered 
ifthereanyway ofsaywhen you findaTOKEN, do not consume thisbutcontinue

expression_statement

: ';'

| expression (';' | *'}'*)

;

For exampleI would like thatwhen you find the'}'generatessentence but 
notbecause it willconsume thetokenusedby the commandblock.

grammar lteA;

program

:statement_list EOF

;

statement_list

: statement+

;

statement

: compound_statement

| expression_statement

| block

;

compound_statement

: sen_for

;

expression_statement

: ';'

| expression (';' |'}')

;

expression

: ID '=' (INT | STRING | FLOAT)

;

sen_for

: 'for' '(' INT ')'

;

block

: '*' '{' statement_list '}'

;

ID:('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*

;

INT :'0'..'9'+

;

FLOAT

:('0'..'9')+ '.' ('0'..'9')* EXPONENT?

|'.' ('0'..'9')+ EXPONENT?

|('0'..'9')+ EXPONENT

;

COMMENT

:'//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}

|'/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}

;

WS:( ' '

| '\t'

| '\r'

| '\n'

) {$channel=HIDDEN;}

;

STRING

:'"' ( ESC_SEQ | ~('\\'|'"') )* '"'

;

CHAR:'\'' ( ESC_SEQ | ~('\''|'\\') ) '\''

;

fragment

EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment

HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment

ESC_SEQ

:'\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')

|UNICODE_ESC

|OCTAL_ESC

;

fragment

OCTAL_ESC

:'\\' ('0'..'3') ('0'..'7') ('0'..'7')

|'\\' ('0'..'7') ('0'..'7')

|'\\' ('0'..'7')

;

fragment

UNICODE_ESC

:'\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT

;

  best
regard Roberto


From rag700504 at hotmail.com  Wed Dec  7 13:27:49 2011
From: rag700504 at hotmail.com (roberto)
Date: Wed, 7 Dec 2011 16:27:49 -0500
Subject: [antlr-interest] About removing the ";
 " In the last sentence of a block
In-Reply-To: <BLU0-SMTP37024839F4934A6D6B4383BBDBB0@phx.gbl>
References: <BLU0-SMTP37024839F4934A6D6B4383BBDBB0@phx.gbl>
Message-ID: <BLU0-SMTP250EF4BF6F9F4A106D4755BBDBB0@phx.gbl>

Hello Everyone

I tried to create a simple language where I want to delete the last ';' which appears in a block. Besides having compound blocks, that do not need ';' at the end of the sentence.

This example is what I have

*{
   a=34;;;;
   for(34)
   a=59;
}
a=34;

I would like to remove the ';' which goes behind the 59. I wondered if there anyway of say when you find a TOKEN, do not consume this but continue

expression_statement
      : ';'
      | expression (';' | *'}'*)
      ;

*For example I would like that when you find the'}'generates sentence but not because it will consume the token used by the command block.
*
=============== Here is the grammar I test ====================================

grammar lteA;

program	
	:  statement_list EOF
	;
	
statement_list
	: statement+
	;

statement
	: compound_statement
	| expression_statement
	| block
	;	
	
compound_statement
	: sen_for
	;
	
expression_statement
	: ';'
	| expression (';' | '}')
	;
	
expression	
	: ID '=' (INT | STRING | FLOAT | CHAR)
	;
	
sen_for
	: 'for' '(' INT ')'
	;
block	
	: '*' '{' statement_list '}'	
	;
		
ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
     ;

INT
	: '0'..'9'+
	| '0' 'x' HEX_DIGIT+
     ;

FLOAT
     :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
     |   '.' ('0'..'9')+ EXPONENT?
     |   ('0'..'9')+ EXPONENT
     ;

COMMENT
     :   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
     |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
     ;

WS  :   ( ' '
         | '\t'
         | '\r'
         | '\n'
         ) {$channel=HIDDEN;}
     ;

STRING
     :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
     ;


CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
     ;

fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
ESC_SEQ
     :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
     |   UNICODE_ESC
     |   OCTAL_ESC
     ;

fragment
OCTAL_ESC
     :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
     |   '\\' ('0'..'7') ('0'..'7')
     |   '\\' ('0'..'7')
     ;

fragment
UNICODE_ESC
     :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
     ;

===================================================================
  best
regard Roberto


Note:
I rewrite because was scribble when convert the HTML to text


From jbb at acm.org  Wed Dec  7 13:38:53 2011
From: jbb at acm.org (John B. Brodie)
Date: Wed, 07 Dec 2011 16:38:53 -0500
Subject: [antlr-interest] About removing the ";
 " In the last sentence of a block
In-Reply-To: <BLU0-SMTP250EF4BF6F9F4A106D4755BBDBB0@phx.gbl>
References: <BLU0-SMTP37024839F4934A6D6B4383BBDBB0@phx.gbl>
	<BLU0-SMTP250EF4BF6F9F4A106D4755BBDBB0@phx.gbl>
Message-ID: <4EDFDCED.1010403@acm.org>

Greetings!

Replace your first 5 rules (e.g. program, statement_list, statement,
compound_statement, and expression_statement) with these two rules:

program : statement_list ';' EOF ;

statement_list :
      ( expression (';' statement_list)? )
   |  ( ';' statement_list )
   |  ( ( sen_for | block ) statement_list? )
   ;


(note please find attached the complete test grammar i used to test this...)

and now that i think about it, it may not handle the last semicolon of
the program properly when the last element of the program's
statement_list is a block. sigh. maybe the statement_list for program
should have the same semicolon usage as the statement_list within a
block (e.g. the very last semicolon after the second 34 in your example
should not be present)?

anyway --- hope this helps...

   -jbb


On 12/07/2011 04:27 PM, roberto wrote:
> Hello Everyone
>
> I tried to create a simple language where I want to delete the last ';' which appears in a block. Besides having compound blocks, that do not need ';' at the end of the sentence.
>
> This example is what I have
>
> *{
>    a=34;;;;
>    for(34)
>    a=59;
> }
> a=34;
>
> I would like to remove the ';' which goes behind the 59. I wondered if there anyway of say when you find a TOKEN, do not consume this but continue
>
> expression_statement
>       : ';'
>       | expression (';' | *'}'*)
>       ;
>
> *For example I would like that when you find the'}'generates sentence but not because it will consume the token used by the command block.
> *
> =============== Here is the grammar I test ====================================
>
> grammar lteA;
>
> program	
> 	:  statement_list EOF
> 	;
> 	
> statement_list
> 	: statement+
> 	;
>
> statement
> 	: compound_statement
> 	| expression_statement
> 	| block
> 	;	
> 	
> compound_statement
> 	: sen_for
> 	;
> 	
> expression_statement
> 	: ';'
> 	| expression (';' | '}')
> 	;
> 	
> expression	
> 	: ID '=' (INT | STRING | FLOAT | CHAR)
> 	;
> 	
> sen_for
> 	: 'for' '(' INT ')'
> 	;
> block	
> 	: '*' '{' statement_list '}'	
> 	;
> 		
> ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
>      ;
>
> INT
> 	: '0'..'9'+
> 	| '0' 'x' HEX_DIGIT+
>      ;
>
> FLOAT
>      :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
>      |   '.' ('0'..'9')+ EXPONENT?
>      |   ('0'..'9')+ EXPONENT
>      ;
>
> COMMENT
>      :   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
>      |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
>      ;
>
> WS  :   ( ' '
>          | '\t'
>          | '\r'
>          | '\n'
>          ) {$channel=HIDDEN;}
>      ;
>
> STRING
>      :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
>      ;
>
>
> CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
>      ;
>
> fragment
> EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
>
> fragment
> HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;
>
> fragment
> ESC_SEQ
>      :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
>      |   UNICODE_ESC
>      |   OCTAL_ESC
>      ;
>
> fragment
> OCTAL_ESC
>      :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
>      |   '\\' ('0'..'7') ('0'..'7')
>      |   '\\' ('0'..'7')
>      ;
>
> fragment
> UNICODE_ESC
>      :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
>      ;
>
> ===================================================================
>   best
> regard Roberto
>
>
> Note:
> I rewrite because was scribble when convert the HTML to text
>
>
>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: Test.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20111207/92222a6d/attachment.pl 

From rag700504 at hotmail.com  Wed Dec  7 14:37:19 2011
From: rag700504 at hotmail.com (roberto)
Date: Wed, 7 Dec 2011 17:37:19 -0500
Subject: [antlr-interest] About removing the ";
 " In the last sentence of a block
In-Reply-To: <4EDFDCED.1010403@acm.org>
References: <BLU0-SMTP37024839F4934A6D6B4383BBDBB0@phx.gbl>
	<BLU0-SMTP250EF4BF6F9F4A106D4755BBDBB0@phx.gbl>
	<4EDFDCED.1010403@acm.org>
Message-ID: <BLU0-SMTP129F231BD0C8901288BFFB5BDBB0@phx.gbl>

Thank you very much, is exactly what I was trying to achieve.

I did a small change to what you sent me.

Inside the "program" and "block" rule I made the ';' optional.

==========================================
program : statement_list  ';'? EOF ;
...
block : '*' '{' statement_list ';'? '}' ;
============================================

thank for your help...
Roberto

On 12/7/2011 4:38 PM, John B. Brodie wrote:
> Greetings!
>
> Replace your first 5 rules (e.g. program, statement_list, statement,
> compound_statement, and expression_statement) with these two rules:
>
> program : statement_list ';' EOF ;
>
> statement_list :
>        ( expression (';' statement_list)? )
>     |  ( ';' statement_list )
>     |  ( ( sen_for | block ) statement_list? )
>     ;
>
>
> (note please find attached the complete test grammar i used to test this...)
>
> and now that i think about it, it may not handle the last semicolon of
> the program properly when the last element of the program's
> statement_list is a block. sigh. maybe the statement_list for program
> should have the same semicolon usage as the statement_list within a
> block (e.g. the very last semicolon after the second 34 in your example
> should not be present)?
>
> anyway --- hope this helps...
>
>     -jbb
>
>
> On 12/07/2011 04:27 PM, roberto wrote:
>> Hello Everyone
>>
>> I tried to create a simple language where I want to delete the last ';' which appears in a block. Besides having compound blocks, that do not need ';' at the end of the sentence.
>>
>> This example is what I have
>>
>> *{
>>     a=34;;;;
>>     for(34)
>>     a=59;
>> }
>> a=34;
>>
>> I would like to remove the ';' which goes behind the 59. I wondered if there anyway of say when you find a TOKEN, do not consume this but continue
>>
>> expression_statement
>>        : ';'
>>        | expression (';' | *'}'*)
>>        ;
>>
>> *For example I would like that when you find the'}'generates sentence but not because it will consume the token used by the command block.
>> *
>> =============== Here is the grammar I test ====================================
>>
>> grammar lteA;
>>
>> program	
>> 	:  statement_list EOF
>> 	;
>> 	
>> statement_list
>> 	: statement+
>> 	;
>>
>> statement
>> 	: compound_statement
>> 	| expression_statement
>> 	| block
>> 	;	
>> 	
>> compound_statement
>> 	: sen_for
>> 	;
>> 	
>> expression_statement
>> 	: ';'
>> 	| expression (';' | '}')
>> 	;
>> 	
>> expression	
>> 	: ID '=' (INT | STRING | FLOAT | CHAR)
>> 	;
>> 	
>> sen_for
>> 	: 'for' '(' INT ')'
>> 	;
>> block	
>> 	: '*' '{' statement_list '}'	
>> 	;
>> 		
>> ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
>>       ;
>>
>> INT
>> 	: '0'..'9'+
>> 	| '0' 'x' HEX_DIGIT+
>>       ;
>>
>> FLOAT
>>       :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
>>       |   '.' ('0'..'9')+ EXPONENT?
>>       |   ('0'..'9')+ EXPONENT
>>       ;
>>
>> COMMENT
>>       :   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
>>       |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
>>       ;
>>
>> WS  :   ( ' '
>>           | '\t'
>>           | '\r'
>>           | '\n'
>>           ) {$channel=HIDDEN;}
>>       ;
>>
>> STRING
>>       :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
>>       ;
>>
>>
>> CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
>>       ;
>>
>> fragment
>> EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
>>
>> fragment
>> HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;
>>
>> fragment
>> ESC_SEQ
>>       :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
>>       |   UNICODE_ESC
>>       |   OCTAL_ESC
>>       ;
>>
>> fragment
>> OCTAL_ESC
>>       :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
>>       |   '\\' ('0'..'7') ('0'..'7')
>>       |   '\\' ('0'..'7')
>>       ;
>>
>> fragment
>> UNICODE_ESC
>>       :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
>>       ;
>>
>> ===================================================================
>>    best
>> regard Roberto
>>
>>
>> Note:
>> I rewrite because was scribble when convert the HTML to text
>>
>>
>>


From gonzague.reydet at gmail.com  Thu Dec  8 00:10:57 2011
From: gonzague.reydet at gmail.com (Gonzague Reydet)
Date: Thu, 8 Dec 2011 09:10:57 +0100
Subject: [antlr-interest] [C] Warnings on old gcc version
Message-ID: <CAHHXKCYg=Kd+wSKVfO4iePkTrPfj7PB7S7XC5FtKsgDVXoHU0Q@mail.gmail.com>

Hi all,

When I compile my project that depends on Antlr headers with an old version
of GCC (3.4.5 20051201 (Red Hat 3.4.5-2)), I encounter the following
warning :

In file included from
../../..//antlrLib/32/include/antlr3baserecognizer.h:44,
                 from ../../..//antlrLib/32/include/antlr3cyclicdfa.h:38,
                 from ../../..//antlrLib/32/include/antlr3.h:40,
                 from ../../..//h/myHeader.h:27,
                 from myFile.c:47:
../../..//antlrLib/32/include/antlr3commontreenodestream.h:293: warning:
declaration of 'index' shadows a global declaration
/usr/include/string.h:304: warning: shadowed declaration is here

The same warnings also occur in the following file :
- antlr3intstream.h:177
- antlr3commontoken.h:293
- antlr3commontoken.h:301

In future versions of Antlr, should it be possible to rename the
corresponding function parameters so we can build without warning on such
old GCC?
This issue does not show up in more recent version of GCC like the
following : GCC 4.1.2 20080704 (Red Hat 4.1.2-46)

Regards
Gonzague

From chwchw at gmx.de  Thu Dec  8 01:04:06 2011
From: chwchw at gmx.de (Christian)
Date: Thu, 08 Dec 2011 10:04:06 +0100
Subject: [antlr-interest] notation algorithm translation
In-Reply-To: <1323311808.44172.YahooMailNeo@web190002.mail.sg3.yahoo.com>
References: <1321932220.38729.YahooMailNeo@web190006.mail.sg3.yahoo.com>
	<4ECB79BB.4060902@gmx.de>
	<1322141896.77600.YahooMailNeo@web190003.mail.sg3.yahoo.com>
	<4ECEC5D6.3070804@gmx.de>
	<1322486756.53221.YahooMailNeo@web190006.mail.sg3.yahoo.com>
	<4ED3911E.6010808@gmx.de>
	<1323311808.44172.YahooMailNeo@web190002.mail.sg3.yahoo.com>
Message-ID: <4EE07D86.9070405@gmx.de>

Hello,

which examples did you try and at which point had you stopped following?
Here is an example from the official website:
http://www.antlr.org/wiki/display/ST/Language+Translation+Using+ANTLR+and+StringTemplate

In your procedure rule, you have to add action code with ST code inside.
You must define a template that represents a void function with
parameters for the function's name, its formal parameters and
corresponding values, and its body.

Regards,
Christian

Am 08.12.2011 03:36, schrieb wijanarto wijanarto:
> Hi,
> Thank you for you last email, but i still not understand, how to
> translate 'Procedure' to 'void' using ST inside ANTLR. I have try a
> lot examples to
>  do that, but i got wrong result. Can you give me simple example to
> translate 'Procedure' to 'void' using st and antrl, please.Thank You.
> Regards,
> Wijanarto
> ------------------------------------------------------------------------
>   *From:* Christian <chwchw at gmx.de>
> *To:* wijanarto wijanarto <wijanarto.nagan at yahoo.com>
> *Cc:* "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> *Sent:* Monday, November 28, 2011 8:48 PM
> *Subject:* Re: [antlr-interest] notation algorithm translation
>
> Hello,
>> is ST and/or Antlr can solve that problem?
> Sure, it can! But a pattern matching framework could be a better
> alternative because it is more straight forward in mapping input to
> output. However, if you at all costs want to use ANTLR in combination
> with StringTemplate, you need to do the things I wrote to you.
>
> But for the sake of clarification, I name the steps again:
>
>  1. Define a lexer and a parser grammar for your input notation
>  2. Insert actions into your parser grammar (here you can use ST to
>     define your output in C)
>  3. Generate the corresponding lexer and parser in your favorite
>     programming language
>  4. Execute the lexer and parser on a text/file that contains an
>     instance of your notation (for example a particular algorithm)
>  5. Read the result of the parser
>      1. If you use ST, you can get the whole output from the result
>      2. If you, however, did not use ST, you have to programmatically
>         map the input tokens (such as 'Procedure' and 'Integer') to
>         your willing output tokens ('void' and 'int', respectively)
>  6. Save the result/mapping result to a file, for example
>     'converted_example_algorithm.c'
>
>
> Regards,
> Christian
>
> Am 28.11.2011 14:25, schrieb wijanarto wijanarto:
>> Hi...Sorry about my poor english, formally, i never learn english. I
>> hope in this example below can make it clear.
>> Input Notation:Procedure Bla(var input X:Integer;var output
>> Y:Integer) {//algorithm}
>> should be translate become (in C)
>> Output Language: void Bla (int X, int *Y){//algorithm}
>> is ST and/or Antlr can solve that problem?
>>
>>
>>
>>
>> ------------------------------------------------------------------------
>> *From:* Christian <chwchw at gmx.de> <mailto:chwchw at gmx.de>
>> *To:* wijanarto wijanarto <wijanarto.nagan at yahoo.com>
>> <mailto:wijanarto.nagan at yahoo.com>
>> *Sent:* Friday, November 25, 2011 5:31 AM
>> *Subject:* Re: [antlr-interest] notation algorithm translation
>>
>> Hello,
>>
>> unfortunately, I have some problems in understanding your english and
>> following your thoughts. So, I try to interpret:
>>
>>> so i have to create language for my notation (used ST-4.0.4) 
>> I think, you're right - only your phrasing is confusing. You have to
>> define an ANTLR grammar that represents your notation. You can then
>> insert actions to the grammar that utilize StringTemples (ST-4.0.4)
>> to directly generate your corresponding programming language fragment.
>>
>> I, however, recommend a separation of the pure grammar from output
>> generation for the sake of overview and adaptability. That means, do
>> not use actions and string templates in the grammar.
>>
>> Either write a program that maps the grammar parts (you get them from
>> the automatically generated ANTLR parser from your notation grammar)
>> to the corresponding programming language code (e.g., Java, C, or C#)
>> or do not use ANTLR but a pattern matching framework. The latter
>> should be much easier for language translation purposes (see, again,
>> the link that I have given to you in my first answer).
>>
>> Regards,
>> Christian
>>
>> Am 24.11.2011 14:38, schrieb wijanarto wijanarto:
>>> Hi Chris, thank you for fast reply,  ok i get it. I just want to
>>> help student to test algorithm that they wrote in notation as a
>>> function or procedure, and then compare it with actual code which is
>>> tested. It just for academic learning, that is my idea.
>>> so i have to create language for my notation (used ST-4.0.4) and
>>> then translate them into formal language (java/c, used ANTLR) to get
>>> source code, finally  compile and execute. Am i right ?????
>>>
>>> ------------------------------------------------------------------------
>>> *From:* Christian <chwchw at gmx.de> <mailto:chwchw at gmx.de>
>>> *To:* antlr-interest at antlr.org <mailto:antlr-interest at antlr.org>
>>> *Sent:* Tuesday, November 22, 2011 5:30 PM
>>> *Subject:* Re: [antlr-interest] notation algorithm translation
>>>
>>> Hi and Wellcome!
>>>
>>> First of all, ANTLR is a parser generator. Thus, ANTLR generates a
>>> parser in several programming languages, such as Java and C#, from an
>>> ANTLR-grammar. In order to read/parse your algorithm notation, you need
>>> to have or define an ANTLR grammar for this language. Then, ANTLR can
>>> generate a parser that is able to read your algorithm notation.
>>>
>>> If you further want to translate it your notation into source code, you
>>> have to write a mapping between your notation and the resulting source
>>> code. But you unfortunately gave less information about what you exactly
>>> want to do.
>>>
>>> For language translation, you should also have a look at this article,
>>> especially at chapter "Walking the AST":
>>> http://www.antlr.org/article/1136917339929/stringTemplate.html
>>>
>>> Regards,
>>> Christian
>>>
>>> Am 22.11.2011 04:23, schrieb wijanarto wijanarto:
>>> > Hi, I am totally newbie in DSL with antlr. It it posibble to
>>> create translation from algorithm notation (natural language) to
>>> generate specific source code (formal language) (eg. C/java)
>>> >
>>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> > Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> >
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>>
>>
>>
>>
>
>
>


From stephanie.balzer at gmail.com  Fri Dec  9 00:54:12 2011
From: stephanie.balzer at gmail.com (Stephanie Balzer)
Date: Fri, 9 Dec 2011 09:54:12 +0100
Subject: [antlr-interest] ANTLRWorks debugger timeout,
	but not due to port number
Message-ID: <CALuD779JD0Eg-Av6RDhJo414QfUj36hJEpxfw=UEPi1XOVar2g@mail.gmail.com>

Dear all,

We are using ANTLRWorks (1.4.3) for our Compiler Design course at our
university.  I came across the following problem:

A student sought help since he was, from one day to the other, no longer
able to debug his parser grammar using ANTLRWorks on his laptop.  All the
usual remedies (i.e, changing port number, disabling firewall) did not
help.  I should also add that the grammar was flawless, and I was able to
debug it with ANTLRWorks on my machine.

Being absolutely clueless, we decided that the student should try whether
he would be able to use the ANTLRWorks debugger on his desktop machine at
home.  And, it actually works!

The difference in terms of OS versions between the laptop and the desktop
machine are as follows: laptop, Windows 7 (64 bit), desktop machine,
Windows 7 (32 bit).

Does anyone of you have an explanation for this behavior?  Or, are there
any other sources of problems we could look at?

Thanks,

Stephanie

From paulo at matos-sorge.com  Fri Dec  9 09:19:07 2011
From: paulo at matos-sorge.com (Paulo J. Matos)
Date: Fri, 09 Dec 2011 17:19:07 +0000
Subject: [antlr-interest] Error reporting when using keywork in wrong place
Message-ID: <jbtfub$oss$1@dough.gmane.org>

Hello,

I have a C generated antlr3 parser and I have a token 'z'.
It's perhaps an unfortunate name but a lot of users try to use z as a 
variable name and hit a message like:
Error: near 'z' : syntax error.

This most likely will leave them baffled at what is going on if they 
don't realize that 'z' is a keyword.

I have redefined displayParserRecognitionError but the only thing I get 
when this happens is an exception of type ANTLR3_RECOGNITION_EXCEPTION 
which contains little information about context. Any hints on how to 
provide a slightly better error message?

Something like:
Error: trying to use keyword 'z' where something else is expected.

This would already be better. However, the problem is identifying 'z' as 
a keyword.

Cheers,
-- 
PMatos


From stephanie.balzer at gmail.com  Fri Dec  9 09:48:39 2011
From: stephanie.balzer at gmail.com (Stephanie Balzer)
Date: Fri, 9 Dec 2011 18:48:39 +0100
Subject: [antlr-interest] ANTLRWorks debugger timeout,
	but not due to port number
Message-ID: <CALuD77-tvgQ2HdUDRGru=GN2aWNi3xp6SBuH6nziAU8nCamCAw@mail.gmail.com>

Dear all,

We are using ANTLRWorks (1.4.3) for our Compiler Design course at our
university.  I came across the following problem:

A student sought help since he was, from one day to the other, no longer
able to debug his parser grammar using ANTLRWorks on his laptop.  All the
usual remedies (i.e, changing port number, disabling firewall) did not
help.  I should also add that the grammar was flawless, and I was able to
debug it with ANTLRWorks on my machine.

Being absolutely clueless, we decided that the student should try whether
he would be able to use the ANTLRWorks debugger on his desktop machine at
home.  And, it actually worked!

The difference in terms of OS versions between the laptop and the desktop
machine are as follows: laptop, Windows 7 (64 bit), desktop machine,
Windows 7 (32 bit).

Does anyone of you have an explanation for this behavior?  Or, are there
any other sources of problems we could look at?

Thanks,

Stephanie

From weissig at rbg.informatik.tu-darmstadt.de  Mon Dec 12 02:59:55 2011
From: weissig at rbg.informatik.tu-darmstadt.de (=?UTF-8?B?WXZlcyBXZWnDn2ln?=)
Date: Mon, 12 Dec 2011 11:59:55 +0100
Subject: [antlr-interest] C: get underlying graph and struct
In-Reply-To: <4EDE2138.6030106@rbg.informatik.tu-darmstadt.de>
References: <4EDDEF8D.4090404@rbg.informatik.tu-darmstadt.de>	<3DDFE4CD-E04C-4EBC-A1B4-4313C6073449@temporal-wave.com>
	<4EDE2138.6030106@rbg.informatik.tu-darmstadt.de>
Message-ID: <4EE5DEAB.5020409@rbg.informatik.tu-darmstadt.de>

Hi!

Again a question regarding to the C backend:
What would be the steps to manually create a pANTLR3_BASE_TREE from scratch?
Maybe I don't see the wood for the trees, but I don't know how construct
a node and link it to some children.
Or this generally not a good idea because the tree points to the input
stream?
I was just curious because I want to reuse my unparser. Manually
constructing a tree would be convenient.

Best regards
Yves

Am 06.12.2011 15:05, schrieb Yves Wei?ig:
> Ah... thanks so much, I knew I was missing something really obvious.
> 
> Yves
> 
> Am 06.12.2011 13:07, schrieb Jim Idle:
>> The tree will stay until you free it, so if you need it outside that function, store the references higher up in the hierarchy. 
>>
>> Jim
>>
>> On Dec 6, 2011, at 18:33, Yves Wei?ig <weissig at rbg.informatik.tu-darmstadt.de> wrote:
>>
>>> Hi,
>>> I'm using the C backend for my generated grammar within my C++
>>> application. It works great so far, but I'm planning on restructuring my
>>> C++ code. I want to have distinct parse and unparse components. In
>>> between I want to plug in different transformation on the tree. Now my
>>> question: Once I generated my tree and I exit the C++ subroutine my tree
>>> is gone. My naive approach would be to recursively deep copy the
>>> ANTLR3_BASE_TREE_struct to a global variable, but I thought there might
>>> be a better solution? Have you done something similar? Any ideas how to
>>> solve this problem?
>>> Best regards
>>> Yves
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From a.moderacja at gmail.com  Mon Dec 12 10:54:12 2011
From: a.moderacja at gmail.com (Borneq)
Date: Mon, 12 Dec 2011 19:54:12 +0100
Subject: [antlr-interest] Parsing HTML
Message-ID: <CANyn1kG-V5gBYAO61jCd=8UG5TzCj1GS_A24juzSFhbmM50X+w@mail.gmail.com>

Where I can found grammar? I found only grammar for old ANTLR.

From ashe at 1c.ru  Tue Dec 13 03:46:09 2011
From: ashe at 1c.ru (Shevchenko A )
Date: Tue, 13 Dec 2011 15:46:09 +0400
Subject: [antlr-interest] Integer literal ending problem
Message-ID: <001a01ccb98c$cebec2f0$6c3c48d0$@1c.ru>

Hello,

I am trying to write some tests for the lexical parser generated with ANTLR.
My grammar is simple:
INT: ('0'..'9')+;
ID: ('A'..'Z') ('A'..'Z' | '0'..'9')* ;
WS: (' ' | '\r' | '\n')* { skip(); };

With such a grammar the parser will interpret the string "123A" as 2 tokens,
and this is undesirable.
If I specify that integer should be ended with whitespace another problem
will come up. Not only whitespace is the ending but also all special
characters.

So, the question is about best practices to solve the problem.
Thanks in advance.

--
Regards,
Anton Shevchenko,
1C Company, Moscow.




From jmurray at aerotech.com  Tue Dec 13 05:50:05 2011
From: jmurray at aerotech.com (Justin Murray)
Date: Tue, 13 Dec 2011 08:50:05 -0500
Subject: [antlr-interest] Integer literal ending problem
In-Reply-To: <001a01ccb98c$cebec2f0$6c3c48d0$@1c.ru>
References: <001a01ccb98c$cebec2f0$6c3c48d0$@1c.ru>
Message-ID: <6B458D23F5D4A24ABCDB3C78EA97393B02AFFEBC@EXCH-VIRTUAL.aerotechad.com>

Hello Anton,

Why are two tokens a problem in that case? That is exactly what your 
lexer grammar dictates. If you want "123A" to error, make it error in 
the parsing stage (not during lexing) by simply making sure that you 
don't have a rule like:

myrule: INT ID;

If for some reason "123A" should be invalid, but "123 A" is ok, then you 
will need to use whitespace as part of your grammar:

myrule: INT WS ID;

This is not typically how most languages work though, it is better if 
whitespace can be ignored. Usually, some other delimiter should come 
between an INT and an ID, such as an operator or a comma.

- Justin

On 12/13/2011 6:46 AM, Shevchenko A wrote:
> Hello,
>
> I am trying to write some tests for the lexical parser generated with ANTLR.
> My grammar is simple:
> INT: ('0'..'9')+;
> ID: ('A'..'Z') ('A'..'Z' | '0'..'9')* ;
> WS: (' ' | '\r' | '\n')* { skip(); };
>
> With such a grammar the parser will interpret the string "123A" as 2 tokens,
> and this is undesirable.
> If I specify that integer should be ended with whitespace another problem
> will come up. Not only whitespace is the ending but also all special
> characters.
>
> So, the question is about best practices to solve the problem.
> Thanks in advance.
>
> --
> Regards,
> Anton Shevchenko,
> 1C Company, Moscow.
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From ashe at 1c.ru  Tue Dec 13 21:43:13 2011
From: ashe at 1c.ru (Shevchenko A )
Date: Wed, 14 Dec 2011 09:43:13 +0400
Subject: [antlr-interest] Integer literal ending problem
Message-ID: <000701ccba23$45741940$d05c4bc0$@1c.ru>

Hello Justin,

Thanks for response.
For languages like SQL, the string "SELECT 123 A ..." is valid and "SELECT
123A ..." is not.

The deeper problem is that I want to be able to differentiate integer
literal from decimal literal at the lexical parser layer (i.e., "123.456" is
decimal/numeric literal and "123" is integer literal).

So, the more complicated grammar would be
INTEGER_LITERAL: ('0'..'9')+;
DECIMAL_LITERAL: ('0'..'9')+ ('.' ('0'..'9')*)?;

I agree that specifying whitespace in the rule definition is not a good
idea.
But specifying all set of symbols invalid at the end is the bad idea too.

--
Regards,
Anton Shevchenko,
1C Company, Moscow.

--
Hello Anton,

Why are two tokens a problem in that case? That is exactly what your lexer
grammar dictates. If you want "123A" to error, make it error in the parsing
stage (not during lexing) by simply making sure that you don't have a rule
like:

myrule: INT ID;

If for some reason "123A" should be invalid, but "123 A" is ok, then you
will need to use whitespace as part of your grammar:

myrule: INT WS ID;

This is not typically how most languages work though, it is better if
whitespace can be ignored. Usually, some other delimiter should come between
an INT and an ID, such as an operator or a comma.

- Justin

On 12/13/2011 6:46 AM, Shevchenko A wrote:
> Hello,
>
> I am trying to write some tests for the lexical parser generated with
ANTLR.
> My grammar is simple:
> INT: ('0'..'9')+;
> ID: ('A'..'Z') ('A'..'Z' | '0'..'9')* ;
> WS: (' ' | '\r' | '\n')* { skip(); };
>
> With such a grammar the parser will interpret the string "123A" as 2 
> tokens, and this is undesirable.
> If I specify that integer should be ended with whitespace another 
> problem will come up. Not only whitespace is the ending but also all 
> special characters.
>
> So, the question is about best practices to solve the problem.
> Thanks in advance.
>
> --
> Regards,
> Anton Shevchenko,
> 1C Company, Moscow.



From ibre5041 at ibrezina.net  Wed Dec 14 00:36:04 2011
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Wed, 14 Dec 2011 09:36:04 +0100
Subject: [antlr-interest] Integer literal ending problem
In-Reply-To: <000701ccba23$45741940$d05c4bc0$@1c.ru>
References: <000701ccba23$45741940$d05c4bc0$@1c.ru>
Message-ID: <4EE85FF4.9060509@ibrezina.net>

On 12/14/2011 06:43 AM, Shevchenko A wrote:
> Hello Justin,
>
> Thanks for response.
> For languages like SQL, the string "SELECT 123 A ..." is valid and "SELECT
> 123A ..." is not.
>
>

Are you sure? For example in Oracle you can have statements like this:

SELECT 1D FROM DUAL; -- "D" is an alias for column 1
SELECT * FROM A WHERE A.C = :1AND A.D = :2; -- Note there is no gap 
between bindvar and "AND".

Ivan


From ranco.marcus at epirion.nl  Wed Dec 14 02:18:00 2011
From: ranco.marcus at epirion.nl (Ranco Marcus)
Date: Wed, 14 Dec 2011 10:18:00 +0000
Subject: [antlr-interest] [CSharp3] TreeRewriter.Downup ignores custom
	TreeAdaptor
Message-ID: <2B65C901391C804DBB9CF9E6FE30C6F96CDF7751@sun.epirion.local>

Hi Sam, all,

In method TreeRewriter.Downup( object t, bool showTransformations ) a tree visitor is created by using a new instance of CommonTreeAdaptor, ignoring the custom provided TreeAdaptor.

Shouldn't the visitor be created with originalTreeAdaptor?

Thanks and best regards,

Ranco Marcus
Epirion Knowledge Solutions B.V.


From Norman at dunbar-it.co.uk  Wed Dec 14 02:50:02 2011
From: Norman at dunbar-it.co.uk (Norman Dunbar)
Date: Wed, 14 Dec 2011 10:50:02 +0000
Subject: [antlr-interest] Integer literal ending problem
In-Reply-To: <4EE85FF4.9060509@ibrezina.net>
References: <000701ccba23$45741940$d05c4bc0$@1c.ru>
	<4EE85FF4.9060509@ibrezina.net>
Message-ID: <4EE87F5A.4000609@dunbar-it.co.uk>

On 14/12/11 08:36, Ivan Brezina wrote:

> Are you sure? For example in Oracle you can have statements like this:
>
> SELECT 1D FROM DUAL; -- "D" is an alias for column 1
> SELECT * FROM A WHERE A.C = :1AND A.D = :2; -- Note there is no gap
> between bindvar and "AND".

Oracle does a lot of weird stuff in syntax checks etc. For interest, see 
my own blogon the matter from this very moring (coincidences happen 
frequently!) 
http://qdosmsq.dunbar-it.co.uk/blog/2011/12/slightly-weird-oracle-stuff/


But for a better one, see Tanel Poder's blog at 
http://blog.tanelpoder.com/2011/01/10/is-this-valid-sql-syntax/.


Cheers,
Norm.

-- 
Norman Dunbar
Dunbar IT Consultants Ltd

Registered address:
Thorpe House
61 Richardshaw Lane
Pudsey
West Yorkshire
United Kingdom
LS28 7EL

Company Number: 05132767

From danilcha at gmail.com  Wed Dec 14 09:05:57 2011
From: danilcha at gmail.com (Danila Piatov)
Date: Wed, 14 Dec 2011 18:05:57 +0100
Subject: [antlr-interest] antlr-interest@antlr.org
Message-ID: <CADRONVvbm5017+RaMZ6ZkQVgdpkR=xuyUimVaP39qhPpFs3feg@mail.gmail.com>

Hello,

Could you answer me about error recovery?

I started using ANTLR with this article from ANTLR front page:
http://w3.msi.vxu.se/users/tgumsi/antlr/ANTLRtutorial.pdf

I downloaded the latest ANTLRWorks, downloaded article's example Expr.g and
opened it and tried to play with it in interpreter. I also tried to
generate parser, compile it and launch -- results were the same -- parser
stops at the first error.

For example I enter:

5+5+7
somesymbol with spaces
5+6

And it stops at the second line. I was unable to write any, even the
smallest error such that ANTLR could tolerate it and go on. The article
says I can play with it and make errors and see how parser recovers after
them.

Am I doing something wrong?

Dan

From ncarter at bentley.edu  Wed Dec 14 17:42:49 2011
From: ncarter at bentley.edu (Nathan Carter)
Date: Wed, 14 Dec 2011 17:42:49 -0800 (PST)
Subject: [antlr-interest] crash burn on C runtime
In-Reply-To: <74128944179adccdb51b9ac160976d1d@mail.gmail.com>
References: <20111013001728.GA6511@brie.com> <20111013163909.GB6511@brie.com>
	<74128944179adccdb51b9ac160976d1d@mail.gmail.com>
Message-ID: <1323913369322-7095841.post@n2.nabble.com>

I'm replying to a thread from awhile back, which I found on Nabble.  Hope
this is the right way to do it...just joined the list...pardon me if I have
the customs wrong here.

The error "antlr3config.h: No such file or directory" was the OP's problem,
and mine.  Jim Idle responded that the problem was that we just tried to
bring in the include/ and src/ folders from the source folders, and did not
actually install the runtime distribution.  He then pointed the OP to the
docs.

Unfortunately, doing it that way runs counter to my eventual goals.  I'm
trying to write code that will be incorporated into a larger project, and so
configuring and installing antlr on my particular machine does not solve my
problem.  Furthermore, my code is to be cross-platform, so I don't even want
to assume antlr installations/libraries exist in particular Unix-friendly
locations.

There must (?) be a way with a simple Makefile to get a C program that
includes antlr-generated sources to build and run.  (Perhaps I just need to
create a plain vanilla antlr3config.h by hand?)

Thank you for any help you can provide.

Nathan


--
View this message in context: http://antlr.1301665.n2.nabble.com/crash-burn-on-C-runtime-tp6887195p7095841.html
Sent from the ANTLR mailing list archive at Nabble.com.

From chwchw at gmx.de  Thu Dec 15 12:23:04 2011
From: chwchw at gmx.de (Christian)
Date: Thu, 15 Dec 2011 21:23:04 +0100
Subject: [antlr-interest] Unicode character classes
Message-ID: <4EEA5728.4040501@gmx.de>

Hi community,

I've read a cuple of threads but all questions whether ANTLR supports
Unicode character classes are not answered. Therefore, I now pose the
question:

Does ANTLR support unicode character classes? And if not, how can I
easily put them into a lexer grammar anyway?

Regards,
Christian

From bkiers at gmail.com  Thu Dec 15 12:32:36 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 15 Dec 2011 21:32:36 +0100
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <4EEA5728.4040501@gmx.de>
References: <4EEA5728.4040501@gmx.de>
Message-ID: <CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>

Hi Christian,

Sure.
For example, the following rule:

    LatinExtB_first4 : '\u0180'..'\u0184';

will match any of the first 4 Latin Extended-B* characters.

Regards,

Bart.


* http://en.wikipedia.org/wiki/List_of_Unicode_characters#Latin_Extended-B


On Thu, Dec 15, 2011 at 9:23 PM, Christian <chwchw at gmx.de> wrote:

> Hi community,
>
> I've read a cuple of threads but all questions whether ANTLR supports
> Unicode character classes are not answered. Therefore, I now pose the
> question:
>
> Does ANTLR support unicode character classes? And if not, how can I
> easily put them into a lexer grammar anyway?
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From chwchw at gmx.de  Thu Dec 15 13:14:19 2011
From: chwchw at gmx.de (Christian)
Date: Thu, 15 Dec 2011 22:14:19 +0100
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
References: <4EEA5728.4040501@gmx.de>
	<CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
Message-ID: <4EEA632B.2080609@gmx.de>

Thanks for your solution. However, there are unicode char classes that
cannot be easily expressed by the range operator. Some have "holes".
Furthermore, I have to explicitly define a rule for each class I want to
use. So, again, does ANTLR provide unicode char class support?

Regards,
Christian

Am 15.12.2011 21:32, schrieb Bart Kiers:
> Hi Christian,
>
> Sure. 
> For example, the following rule: 
>
>     LatinExtB_first4 : '\u0180'..'\u0184';
>
> will match any of the first 4 Latin Extended-B* characters.
>
> Regards,
>
> Bart.
>
>
> * http://en.wikipedia.org/wiki/List_of_Unicode_characters#Latin_Extended-B
>
>
> On Thu, Dec 15, 2011 at 9:23 PM, Christian <chwchw at gmx.de
> <mailto:chwchw at gmx.de>> wrote:
>
>     Hi community,
>
>     I've read a cuple of threads but all questions whether ANTLR supports
>     Unicode character classes are not answered. Therefore, I now pose the
>     question:
>
>     Does ANTLR support unicode character classes? And if not, how can I
>     easily put them into a lexer grammar anyway?
>
>     Regards,
>     Christian
>
>     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     Unsubscribe:
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From kirby.bohling at gmail.com  Thu Dec 15 13:27:36 2011
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Thu, 15 Dec 2011 15:27:36 -0600
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
References: <4EEA5728.4040501@gmx.de>
	<CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
Message-ID: <CA+bn5rxTz_HhKfQWyGdk1EXgJG=W0O_Ly6ST7dL7wX7vcRfnXQ@mail.gmail.com>

I believe that is a thread by the guy working on the grammar, and I
e-mailed him (Johannes Luber).
http://www.antlr.org/pipermail/antlr-interest/2007-March/019601.html

I've used the type of rules described in that grammar with success.  I
just e-mailed Johannes and he either e-mailed me his grammar or
pointed me to a copy online.

Not sure if that helps.  In the middle of that, Johannes does describe
a number of character classes.  It would be pretty straight forward to
create a fragment with a predicate for the character classes, but that
might be far more inefficient than just specifying them holes and all.
 If you want to lex them differently, yes, all of the classes will
have to be enumerated specifically, unless you want to spec them by
exclusion (which seems more difficult).

Kirby

On Thu, Dec 15, 2011 at 2:32 PM, Bart Kiers <bkiers at gmail.com> wrote:
> Hi Christian,
>
> Sure.
> For example, the following rule:
>
> ? ?LatinExtB_first4 : '\u0180'..'\u0184';
>
> will match any of the first 4 Latin Extended-B* characters.
>
> Regards,
>
> Bart.
>
>
> * http://en.wikipedia.org/wiki/List_of_Unicode_characters#Latin_Extended-B
>
>
> On Thu, Dec 15, 2011 at 9:23 PM, Christian <chwchw at gmx.de> wrote:
>
>> Hi community,
>>
>> I've read a cuple of threads but all questions whether ANTLR supports
>> Unicode character classes are not answered. Therefore, I now pose the
>> question:
>>
>> Does ANTLR support unicode character classes? And if not, how can I
>> easily put them into a lexer grammar anyway?
>>
>> Regards,
>> Christian
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From bkiers at gmail.com  Thu Dec 15 13:38:11 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 15 Dec 2011 22:38:11 +0100
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <4EEA632B.2080609@gmx.de>
References: <4EEA5728.4040501@gmx.de>
	<CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
	<4EEA632B.2080609@gmx.de>
Message-ID: <CAOrgODb92NArB=5ebZoEP9g56Bp4ENnTAtNnohzS-CfYpee1Yw@mail.gmail.com>

Ah, I thought you meant the regex type of "character class", but you meant
something like `\p{CLASS_NAME}`...

Bart.


On Thu, Dec 15, 2011 at 10:14 PM, Christian <chwchw at gmx.de> wrote:

> Thanks for your solution. However, there are unicode char classes that
> cannot be easily expressed by the range operator. Some have "holes".
> Furthermore, I have to explicitly define a rule for each class I want to
> use. So, again, does ANTLR provide unicode char class support?
>
> Regards,
> Christian
>
> Am 15.12.2011 21:32, schrieb Bart Kiers:
> > Hi Christian,
> >
> > Sure.
> > For example, the following rule:
> >
> >     LatinExtB_first4 : '\u0180'..'\u0184';
> >
> > will match any of the first 4 Latin Extended-B* characters.
> >
> > Regards,
> >
> > Bart.
> >
> >
> > *
> http://en.wikipedia.org/wiki/List_of_Unicode_characters#Latin_Extended-B
> >
> >
> > On Thu, Dec 15, 2011 at 9:23 PM, Christian <chwchw at gmx.de
> > <mailto:chwchw at gmx.de>> wrote:
> >
> >     Hi community,
> >
> >     I've read a cuple of threads but all questions whether ANTLR supports
> >     Unicode character classes are not answered. Therefore, I now pose the
> >     question:
> >
> >     Does ANTLR support unicode character classes? And if not, how can I
> >     easily put them into a lexer grammar anyway?
> >
> >     Regards,
> >     Christian
> >
> >     List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >     Unsubscribe:
> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From chwchw at gmx.de  Thu Dec 15 13:40:31 2011
From: chwchw at gmx.de (Christian)
Date: Thu, 15 Dec 2011 22:40:31 +0100
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <CAOrgODb92NArB=5ebZoEP9g56Bp4ENnTAtNnohzS-CfYpee1Yw@mail.gmail.com>
References: <4EEA5728.4040501@gmx.de>
	<CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
	<4EEA632B.2080609@gmx.de>
	<CAOrgODb92NArB=5ebZoEP9g56Bp4ENnTAtNnohzS-CfYpee1Yw@mail.gmail.com>
Message-ID: <4EEA694F.8020104@gmx.de>

Correct. But I don't think ANTLR supports \p{}, right?

Am 15.12.2011 22:38, schrieb Bart Kiers:
> Ah, I thought you meant the regex type of "character class", but you
> meant something like `\p{CLASS_NAME}`... 
>
> Bart.
>
>
> On Thu, Dec 15, 2011 at 10:14 PM, Christian <chwchw at gmx.de
> <mailto:chwchw at gmx.de>> wrote:
>
>     Thanks for your solution. However, there are unicode char classes that
>     cannot be easily expressed by the range operator. Some have "holes".
>     Furthermore, I have to explicitly define a rule for each class I
>     want to
>     use. So, again, does ANTLR provide unicode char class support?
>
>     Regards,
>     Christian
>
>     Am 15.12.2011 21:32, schrieb Bart Kiers:
>     > Hi Christian,
>     >
>     > Sure.
>     > For example, the following rule:
>     >
>     >     LatinExtB_first4 : '\u0180'..'\u0184';
>     >
>     > will match any of the first 4 Latin Extended-B* characters.
>     >
>     > Regards,
>     >
>     > Bart.
>     >
>     >
>     > *
>     http://en.wikipedia.org/wiki/List_of_Unicode_characters#Latin_Extended-B
>     >
>     >
>     > On Thu, Dec 15, 2011 at 9:23 PM, Christian <chwchw at gmx.de
>     <mailto:chwchw at gmx.de>
>     > <mailto:chwchw at gmx.de <mailto:chwchw at gmx.de>>> wrote:
>     >
>     >     Hi community,
>     >
>     >     I've read a cuple of threads but all questions whether ANTLR
>     supports
>     >     Unicode character classes are not answered. Therefore, I now
>     pose the
>     >     question:
>     >
>     >     Does ANTLR support unicode character classes? And if not,
>     how can I
>     >     easily put them into a lexer grammar anyway?
>     >
>     >     Regards,
>     >     Christian
>     >
>     >     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     >     Unsubscribe:
>     >    
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>     >
>     >
>
>
>     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     Unsubscribe:
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From bkiers at gmail.com  Thu Dec 15 13:41:27 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 15 Dec 2011 22:41:27 +0100
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <4EEA694F.8020104@gmx.de>
References: <4EEA5728.4040501@gmx.de>
	<CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
	<4EEA632B.2080609@gmx.de>
	<CAOrgODb92NArB=5ebZoEP9g56Bp4ENnTAtNnohzS-CfYpee1Yw@mail.gmail.com>
	<4EEA694F.8020104@gmx.de>
Message-ID: <CAOrgODaNGULmwyKmiWi4Y5hNv+c0G0qgpGcuiyWN_Fp=7cs=5g@mail.gmail.com>

Correct: ANTLR does not support that.

Bart.


On Thu, Dec 15, 2011 at 10:40 PM, Christian <chwchw at gmx.de> wrote:

> Correct. But I don't think ANTLR supports \p{}, right?
>
> Am 15.12.2011 22:38, schrieb Bart Kiers:
> > Ah, I thought you meant the regex type of "character class", but you
> > meant something like `\p{CLASS_NAME}`...
> >
> > Bart.
> >
> >
> > On Thu, Dec 15, 2011 at 10:14 PM, Christian <chwchw at gmx.de
> > <mailto:chwchw at gmx.de>> wrote:
> >
> >     Thanks for your solution. However, there are unicode char classes
> that
> >     cannot be easily expressed by the range operator. Some have "holes".
> >     Furthermore, I have to explicitly define a rule for each class I
> >     want to
> >     use. So, again, does ANTLR provide unicode char class support?
> >
> >     Regards,
> >     Christian
> >
> >     Am 15.12.2011 21:32, schrieb Bart Kiers:
> >     > Hi Christian,
> >     >
> >     > Sure.
> >     > For example, the following rule:
> >     >
> >     >     LatinExtB_first4 : '\u0180'..'\u0184';
> >     >
> >     > will match any of the first 4 Latin Extended-B* characters.
> >     >
> >     > Regards,
> >     >
> >     > Bart.
> >     >
> >     >
> >     > *
> >
> http://en.wikipedia.org/wiki/List_of_Unicode_characters#Latin_Extended-B
> >     >
> >     >
> >     > On Thu, Dec 15, 2011 at 9:23 PM, Christian <chwchw at gmx.de
> >     <mailto:chwchw at gmx.de>
> >     > <mailto:chwchw at gmx.de <mailto:chwchw at gmx.de>>> wrote:
> >     >
> >     >     Hi community,
> >     >
> >     >     I've read a cuple of threads but all questions whether ANTLR
> >     supports
> >     >     Unicode character classes are not answered. Therefore, I now
> >     pose the
> >     >     question:
> >     >
> >     >     Does ANTLR support unicode character classes? And if not,
> >     how can I
> >     >     easily put them into a lexer grammar anyway?
> >     >
> >     >     Regards,
> >     >     Christian
> >     >
> >     >     List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >     >     Unsubscribe:
> >     >
> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >     >
> >     >
> >
> >
> >     List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >     Unsubscribe:
> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From chwchw at gmx.de  Thu Dec 15 14:00:41 2011
From: chwchw at gmx.de (Christian)
Date: Thu, 15 Dec 2011 23:00:41 +0100
Subject: [antlr-interest] shorthand for sequence of same tokens, e.g.,
	A A A A A A
Message-ID: <4EEA6E09.5040807@gmx.de>

Hi again,

is there a way to abbreviate the definition of rule like the following?

Unicode_escape_sequence:
  | '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

It would be great to say something like that:

Unicode_escape_sequence:
  | '\\u' HEX_DIGIT{4};

Regards,
Christian

From bkiers at gmail.com  Thu Dec 15 14:02:50 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 15 Dec 2011 23:02:50 +0100
Subject: [antlr-interest] shorthand for sequence of same tokens, e.g.,
 A A A A A A
In-Reply-To: <4EEA6E09.5040807@gmx.de>
References: <4EEA6E09.5040807@gmx.de>
Message-ID: <CAOrgODbK9U9xU699dyDnWMv8Rbn6oFEHr0+Z4Omw_+PROKQWqA@mail.gmail.com>

No, that is not possible.

The closest you can come is create a fragment:

fragment HEX_DIGIT_BLOCK : HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;

and then do:

Unicode_escape_sequence:
 | '\\u' HEX_DIGIT_BLOCK
 ;

Bart.

On Thu, Dec 15, 2011 at 11:00 PM, Christian <chwchw at gmx.de> wrote:

> Hi again,
>
> is there a way to abbreviate the definition of rule like the following?
>
> Unicode_escape_sequence:
>  | '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
>
> It would be great to say something like that:
>
> Unicode_escape_sequence:
>  | '\\u' HEX_DIGIT{4};
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From NCARTER at bentley.edu  Thu Dec 15 14:44:02 2011
From: NCARTER at bentley.edu (Carter, Nathan)
Date: Thu, 15 Dec 2011 17:44:02 -0500
Subject: [antlr-interest] crash burn on C runtime
In-Reply-To: <1323913369322-7095841.post@n2.nabble.com>
References: <20111013001728.GA6511@brie.com> <20111013163909.GB6511@brie.com>
	<74128944179adccdb51b9ac160976d1d@mail.gmail.com>
	<1323913369322-7095841.post@n2.nabble.com>
Message-ID: <7F88781E-2091-4F59-B742-74122896EA3E@bentley.edu>


I'm making some progress on my own problem (quoted below).  I've created an antlr3config.h file by hand, as I found some docs suggesting that I should do so.  I'm now trying to build a project containing the antlr C sources, my generated parser from AntlrWorks, and the main.c example on this documentation page:

	http://www.antlr.org/api/C/buildrec.html

Actually, I have not taken that file exactly as it is on that page; I needed to make two changes:
1. In place of #include <treeparser.h>, I have followed the advice in the code's comments and instead included the generated files for my language, LMParser.h and LMLexer.h.
2. Throughout that file, it uses Lang as the language name, which I have replaced everywhere with LM, the name of my language as in the code generated from AntlrWorks.

However, my build still fails, and the errors indicate that there are some identifiers that are not declared.  So I grepped for them, but they appear nowhere in the antlr sources at all, only in that one example piece of documentation!  So is that documentation out-of-date?  Is there a correct piece of documentation I should be following?

Thanks!

Nathan


$ make
g++ -x c -c -Wall -I./include/ main.c -o main.o
main.c: In function ?main?:
main.c:73: error: ?LMParser_decl_return? undeclared (first use in this function)
main.c:73: error: (Each undeclared identifier is reported only once
main.c:73: error: for each function it appears in.)
main.c:73: error: expected ?;? before ?langAST?
main.c:87: error: ?pLMDumpDecl? undeclared (first use in this function)
main.c:87: error: expected ?;? before ?treePsr?
main.c:105: warning: implicit declaration of function ?antlr38BitFileStreamNew?
main.c:105: warning: assignment makes pointer from integer without a cast
main.c:141: error: ?struct ANTLR3_LEXER_struct? has no member named ?tokSource?
main.c:178: error: ?langAST? undeclared (first use in this function)
main.c:178: error: ?struct LMParser_Ctx_struct? has no member named ?decl?
main.c:184: error: ?struct ANTLR3_BASE_RECOGNIZER_struct? has no member named ?errorCount?
main.c:186: error: ?struct ANTLR3_BASE_RECOGNIZER_struct? has no member named ?errorCount?
main.c:195: error: ?treePsr? undeclared (first use in this function)
main.c:195: warning: implicit declaration of function ?LMDumpDeclNew?
make: *** [main.o] Error 1


On Dec 14, 2011, at 8:42 PM, Nathan Carter wrote:

> I'm replying to a thread from awhile back, which I found on Nabble.  Hope
> this is the right way to do it...just joined the list...pardon me if I have
> the customs wrong here.
> 
> The error "antlr3config.h: No such file or directory" was the OP's problem,
> and mine.  Jim Idle responded that the problem was that we just tried to
> bring in the include/ and src/ folders from the source folders, and did not
> actually install the runtime distribution.  He then pointed the OP to the
> docs.
> 
> Unfortunately, doing it that way runs counter to my eventual goals.  I'm
> trying to write code that will be incorporated into a larger project, and so
> configuring and installing antlr on my particular machine does not solve my
> problem.  Furthermore, my code is to be cross-platform, so I don't even want
> to assume antlr installations/libraries exist in particular Unix-friendly
> locations.
> 
> There must (?) be a way with a simple Makefile to get a C program that
> includes antlr-generated sources to build and run.  (Perhaps I just need to
> create a plain vanilla antlr3config.h by hand?)
> 
> Thank you for any help you can provide.
> 
> Nathan
> 
> 
> --
> View this message in context: http://antlr.1301665.n2.nabble.com/crash-burn-on-C-runtime-tp6887195p7095841.html
> Sent from the ANTLR mailing list archive at Nabble.com.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From NCARTER at bentley.edu  Thu Dec 15 14:50:28 2011
From: NCARTER at bentley.edu (Carter, Nathan)
Date: Thu, 15 Dec 2011 17:50:28 -0500
Subject: [antlr-interest] crash burn on C runtime
In-Reply-To: <7F88781E-2091-4F59-B742-74122896EA3E@bentley.edu>
References: <20111013001728.GA6511@brie.com> <20111013163909.GB6511@brie.com>
	<74128944179adccdb51b9ac160976d1d@mail.gmail.com>
	<1323913369322-7095841.post@n2.nabble.com>
	<7F88781E-2091-4F59-B742-74122896EA3E@bentley.edu>
Message-ID: <E8675226-DC94-4C77-ACBD-74B84D1E42C5@bentley.edu>


Aha!  I found what seems to be some more reliable documentation, here:

	http://www.antlr.org/wiki/display/ANTLR3/Five+minute+introduction+to+ANTLR+3

It contains a much simpler and less buggy main() for a C program.  Using that one (with my language in place of the one from that example) builds almost perfectly, only one error remaining, shown below.

But again, I'm a little boggled, because it's complaining about antlr3AsciiFileStreamNew, which is defined NOWHERE in any of the antlr sources, neither the runtime nor the library.  I guess I've found docs that are *more* up-to-date but not totally up-to-date???

Still searching...

Nathan


$ make
g++ -x c -c -Wall -I./include/ main.c -o main.o
main.c: In function ?main?:
main.c:11: warning: implicit declaration of function ?antlr3AsciiFileStreamNew?
main.c:11: warning: assignment makes pointer from integer without a cast
main.c:16: error: ?struct LMParser_Ctx_struct? has no member named ?expr?
make: *** [main.o] Error 1




On Dec 15, 2011, at 5:44 PM, Carter, Nathan wrote:

> 
> I'm making some progress on my own problem (quoted below).  I've created an antlr3config.h file by hand, as I found some docs suggesting that I should do so.  I'm now trying to build a project containing the antlr C sources, my generated parser from AntlrWorks, and the main.c example on this documentation page:
> 
> 	http://www.antlr.org/api/C/buildrec.html
> 
> Actually, I have not taken that file exactly as it is on that page; I needed to make two changes:
> 1. In place of #include <treeparser.h>, I have followed the advice in the code's comments and instead included the generated files for my language, LMParser.h and LMLexer.h.
> 2. Throughout that file, it uses Lang as the language name, which I have replaced everywhere with LM, the name of my language as in the code generated from AntlrWorks.
> 
> However, my build still fails, and the errors indicate that there are some identifiers that are not declared.  So I grepped for them, but they appear nowhere in the antlr sources at all, only in that one example piece of documentation!  So is that documentation out-of-date?  Is there a correct piece of documentation I should be following?
> 
> Thanks!
> 
> Nathan
> 
> 
> $ make
> g++ -x c -c -Wall -I./include/ main.c -o main.o
> main.c: In function ?main?:
> main.c:73: error: ?LMParser_decl_return? undeclared (first use in this function)
> main.c:73: error: (Each undeclared identifier is reported only once
> main.c:73: error: for each function it appears in.)
> main.c:73: error: expected ?;? before ?langAST?
> main.c:87: error: ?pLMDumpDecl? undeclared (first use in this function)
> main.c:87: error: expected ?;? before ?treePsr?
> main.c:105: warning: implicit declaration of function ?antlr38BitFileStreamNew?
> main.c:105: warning: assignment makes pointer from integer without a cast
> main.c:141: error: ?struct ANTLR3_LEXER_struct? has no member named ?tokSource?
> main.c:178: error: ?langAST? undeclared (first use in this function)
> main.c:178: error: ?struct LMParser_Ctx_struct? has no member named ?decl?
> main.c:184: error: ?struct ANTLR3_BASE_RECOGNIZER_struct? has no member named ?errorCount?
> main.c:186: error: ?struct ANTLR3_BASE_RECOGNIZER_struct? has no member named ?errorCount?
> main.c:195: error: ?treePsr? undeclared (first use in this function)
> main.c:195: warning: implicit declaration of function ?LMDumpDeclNew?
> make: *** [main.o] Error 1
> 
> 
> On Dec 14, 2011, at 8:42 PM, Nathan Carter wrote:
> 
>> I'm replying to a thread from awhile back, which I found on Nabble.  Hope
>> this is the right way to do it...just joined the list...pardon me if I have
>> the customs wrong here.
>> 
>> The error "antlr3config.h: No such file or directory" was the OP's problem,
>> and mine.  Jim Idle responded that the problem was that we just tried to
>> bring in the include/ and src/ folders from the source folders, and did not
>> actually install the runtime distribution.  He then pointed the OP to the
>> docs.
>> 
>> Unfortunately, doing it that way runs counter to my eventual goals.  I'm
>> trying to write code that will be incorporated into a larger project, and so
>> configuring and installing antlr on my particular machine does not solve my
>> problem.  Furthermore, my code is to be cross-platform, so I don't even want
>> to assume antlr installations/libraries exist in particular Unix-friendly
>> locations.
>> 
>> There must (?) be a way with a simple Makefile to get a C program that
>> includes antlr-generated sources to build and run.  (Perhaps I just need to
>> create a plain vanilla antlr3config.h by hand?)
>> 
>> Thank you for any help you can provide.
>> 
>> Nathan
>> 
>> 
>> --
>> View this message in context: http://antlr.1301665.n2.nabble.com/crash-burn-on-C-runtime-tp6887195p7095841.html
>> Sent from the ANTLR mailing list archive at Nabble.com.
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From douglasgodfrey at gmail.com  Thu Dec 15 16:11:09 2011
From: douglasgodfrey at gmail.com (Douglas Godfrey)
Date: Thu, 15 Dec 2011 19:11:09 -0500
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
Message-ID: <CB0FF685.8906%douglasgodfrey@gmail.com>


A set of rules for all UNICODE code pages can be found in the SQL2003
grammar on the Antlr downloads page.



From jimi at temporal-wave.com  Thu Dec 15 20:23:17 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Dec 2011 12:23:17 +0800
Subject: [antlr-interest] crash burn on C runtime
In-Reply-To: <1323913369322-7095841.post@n2.nabble.com>
References: <20111013001728.GA6511@brie.com> <20111013163909.GB6511@brie.com>
	<74128944179adccdb51b9ac160976d1d@mail.gmail.com>
	<1323913369322-7095841.post@n2.nabble.com>
Message-ID: <38cb5a44986c47e610df147d43186c30@mail.gmail.com>

Well, if you don't configure it, how are you going to build it?

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Nathan Carter
Sent: Thursday, December 15, 2011 9:43 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] crash burn on C runtime

I'm replying to a thread from awhile back, which I found on Nabble.  Hope
this is the right way to do it...just joined the list...pardon me if I
have the customs wrong here.

The error "antlr3config.h: No such file or directory" was the OP's
problem, and mine.  Jim Idle responded that the problem was that we just
tried to bring in the include/ and src/ folders from the source folders,
and did not actually install the runtime distribution.  He then pointed
the OP to the docs.

Unfortunately, doing it that way runs counter to my eventual goals.  I'm
trying to write code that will be incorporated into a larger project, and
so configuring and installing antlr on my particular machine does not
solve my problem.  Furthermore, my code is to be cross-platform, so I
don't even want to assume antlr installations/libraries exist in
particular Unix-friendly locations.

There must (?) be a way with a simple Makefile to get a C program that
includes antlr-generated sources to build and run.  (Perhaps I just need
to create a plain vanilla antlr3config.h by hand?)

Thank you for any help you can provide.

Nathan


--
View this message in context:
http://antlr.1301665.n2.nabble.com/crash-burn-on-C-runtime-tp6887195p70958
41.html
Sent from the ANTLR mailing list archive at Nabble.com.

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From NCARTER at bentley.edu  Thu Dec 15 21:19:30 2011
From: NCARTER at bentley.edu (Carter, Nathan)
Date: Fri, 16 Dec 2011 00:19:30 -0500
Subject: [antlr-interest] crash burn on C runtime
In-Reply-To: <E8675226-DC94-4C77-ACBD-74B84D1E42C5@bentley.edu>
References: <20111013001728.GA6511@brie.com> <20111013163909.GB6511@brie.com>
	<74128944179adccdb51b9ac160976d1d@mail.gmail.com>
	<1323913369322-7095841.post@n2.nabble.com>
	<7F88781E-2091-4F59-B742-74122896EA3E@bentley.edu>
	<E8675226-DC94-4C77-ACBD-74B84D1E42C5@bentley.edu>
Message-ID: <955F4D0B-3747-41AB-9815-B3D352D72745@bentley.edu>


Last try.  I've made a lot of progress, getting my program to compile and run and read from a file and say its found and parsed tokens, and so on.  My trouble now comes with trying to get it to give any real, useful output.  I began by trying to write C code to traverse the AST, but every time I called node->getText(node), I got a segmentation fault.

So I backed up to just trying to put simple printf() calls in the grammar, just to see if I know what's going on.  But even they segfault whenever I try to look up the text of a token.  My entire, simple, test grammar is below.  If I do not make the .text references (which translate to getText() calls) then all is well (e.g., printf("hello\n");).  But getText() always segfaults.  Any thoughts?

Nathan

------------------------------------------------
grammar LM;

options
{
    language=C;
    ASTLabelType=pANTLR3_BASE_TREE;
    output=AST;
}

test 	:	 a=ID^ b=ID { printf( "found \%s \%s\n", $a.text->chars, $b.text->chars ); }
		/* also fails if I do "found \%d \%d\n", $a.text->len, $b.text->len instead */
	;

ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;
-----------------------------------------------


On Dec 15, 2011, at 5:50 PM, Carter, Nathan wrote:

> 
> Aha!  I found what seems to be some more reliable documentation, here:
> 
> 	http://www.antlr.org/wiki/display/ANTLR3/Five+minute+introduction+to+ANTLR+3
> 
> It contains a much simpler and less buggy main() for a C program.  Using that one (with my language in place of the one from that example) builds almost perfectly, only one error remaining, shown below.
> 
> But again, I'm a little boggled, because it's complaining about antlr3AsciiFileStreamNew, which is defined NOWHERE in any of the antlr sources, neither the runtime nor the library.  I guess I've found docs that are *more* up-to-date but not totally up-to-date???
> 
> Still searching...
> 
> Nathan
> 
> 
> $ make
> g++ -x c -c -Wall -I./include/ main.c -o main.o
> main.c: In function ?main?:
> main.c:11: warning: implicit declaration of function ?antlr3AsciiFileStreamNew?
> main.c:11: warning: assignment makes pointer from integer without a cast
> main.c:16: error: ?struct LMParser_Ctx_struct? has no member named ?expr?
> make: *** [main.o] Error 1
> 
> 
> 
> 
> On Dec 15, 2011, at 5:44 PM, Carter, Nathan wrote:
> 
>> 
>> I'm making some progress on my own problem (quoted below).  I've created an antlr3config.h file by hand, as I found some docs suggesting that I should do so.  I'm now trying to build a project containing the antlr C sources, my generated parser from AntlrWorks, and the main.c example on this documentation page:
>> 
>> 	http://www.antlr.org/api/C/buildrec.html
>> 
>> Actually, I have not taken that file exactly as it is on that page; I needed to make two changes:
>> 1. In place of #include <treeparser.h>, I have followed the advice in the code's comments and instead included the generated files for my language, LMParser.h and LMLexer.h.
>> 2. Throughout that file, it uses Lang as the language name, which I have replaced everywhere with LM, the name of my language as in the code generated from AntlrWorks.
>> 
>> However, my build still fails, and the errors indicate that there are some identifiers that are not declared.  So I grepped for them, but they appear nowhere in the antlr sources at all, only in that one example piece of documentation!  So is that documentation out-of-date?  Is there a correct piece of documentation I should be following?
>> 
>> Thanks!
>> 
>> Nathan
>> 
>> 
>> $ make
>> g++ -x c -c -Wall -I./include/ main.c -o main.o
>> main.c: In function ?main?:
>> main.c:73: error: ?LMParser_decl_return? undeclared (first use in this function)
>> main.c:73: error: (Each undeclared identifier is reported only once
>> main.c:73: error: for each function it appears in.)
>> main.c:73: error: expected ?;? before ?langAST?
>> main.c:87: error: ?pLMDumpDecl? undeclared (first use in this function)
>> main.c:87: error: expected ?;? before ?treePsr?
>> main.c:105: warning: implicit declaration of function ?antlr38BitFileStreamNew?
>> main.c:105: warning: assignment makes pointer from integer without a cast
>> main.c:141: error: ?struct ANTLR3_LEXER_struct? has no member named ?tokSource?
>> main.c:178: error: ?langAST? undeclared (first use in this function)
>> main.c:178: error: ?struct LMParser_Ctx_struct? has no member named ?decl?
>> main.c:184: error: ?struct ANTLR3_BASE_RECOGNIZER_struct? has no member named ?errorCount?
>> main.c:186: error: ?struct ANTLR3_BASE_RECOGNIZER_struct? has no member named ?errorCount?
>> main.c:195: error: ?treePsr? undeclared (first use in this function)
>> main.c:195: warning: implicit declaration of function ?LMDumpDeclNew?
>> make: *** [main.o] Error 1
>> 
>> 
>> On Dec 14, 2011, at 8:42 PM, Nathan Carter wrote:
>> 
>>> I'm replying to a thread from awhile back, which I found on Nabble.  Hope
>>> this is the right way to do it...just joined the list...pardon me if I have
>>> the customs wrong here.
>>> 
>>> The error "antlr3config.h: No such file or directory" was the OP's problem,
>>> and mine.  Jim Idle responded that the problem was that we just tried to
>>> bring in the include/ and src/ folders from the source folders, and did not
>>> actually install the runtime distribution.  He then pointed the OP to the
>>> docs.
>>> 
>>> Unfortunately, doing it that way runs counter to my eventual goals.  I'm
>>> trying to write code that will be incorporated into a larger project, and so
>>> configuring and installing antlr on my particular machine does not solve my
>>> problem.  Furthermore, my code is to be cross-platform, so I don't even want
>>> to assume antlr installations/libraries exist in particular Unix-friendly
>>> locations.
>>> 
>>> There must (?) be a way with a simple Makefile to get a C program that
>>> includes antlr-generated sources to build and run.  (Perhaps I just need to
>>> create a plain vanilla antlr3config.h by hand?)
>>> 
>>> Thank you for any help you can provide.
>>> 
>>> Nathan
>>> 
>>> 
>>> --
>>> View this message in context: http://antlr.1301665.n2.nabble.com/crash-burn-on-C-runtime-tp6887195p7095841.html
>>> Sent from the ANTLR mailing list archive at Nabble.com.
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From chwchw at gmx.de  Thu Dec 15 23:12:11 2011
From: chwchw at gmx.de (Christian)
Date: Fri, 16 Dec 2011 08:12:11 +0100
Subject: [antlr-interest] Token as rule argument
In-Reply-To: <4EB85A1E.9070100@gmx.de>
References: <4EB85A1E.9070100@gmx.de>
Message-ID: <4EEAEF4B.4040704@gmx.de>

It should be possible to map a generic Token class (for passing as
parameter in ANTLR) to each language since the lexers and parsers of the
target languages have to know the basic type Token to work.

Would you implement this feature?

Am 07.11.2011 23:22, schrieb Christian:
> Hello,
>
> is it possible to give a rule a token as parameter and duplicate it in
> the rule's rewrite rule? To illustrate my purpose:
>
>     t=type     typed_class_member_decl[$t]
>
> where
>
>     typed_class_member_decl[Token t]
>       : variable_declarator (','   variable_declarator)* -> ($t
> variable_declarator)+
>       ;
>
> For me, it is important that the type Token is programming
> language-independent, i.e., ANTLR should be able to generate every
> target language code without errors and adaptions.
>
> Best Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From fancyerii at gmail.com  Fri Dec 16 01:06:16 2011
From: fancyerii at gmail.com (Li Li)
Date: Fri, 16 Dec 2011 17:06:16 +0800
Subject: [antlr-interest] antlr or javacc?
Message-ID: <CAFAd71U-JWZU8-DjP_d3hjY0U+99JbAd3w96dm6ggAzfU2=QtQ@mail.gmail.com>

hi all,
    I need to implement a search query rewriter. because I am dealing
Chinese other than English, I need to use my own scanner/tokenizer.
    Then I will define rules for rewriting like this:
     original query: hp laptop
     after scanner: [brand:hp] [category:laptop]
     after rewriter: brand:hp^10 category:laptop^1 which means we will
search "hp" in brand field and "laptop" in category field and their weights
are 10 and 1 respectively.
     our grammar should be simple, I guess it's LL(1).
     I am using Java so I now have 2 alternatives: JavaCC and ANTLR.
     From
http://stackoverflow.com/questions/382211/whats-better-antlr-or-javacc
     it seems ANTLR is full featured but heavy weighted. maybe JavaCC can
meet my demand well. but they say JavaCC's documents are poor.
     would you please give some advices? Thanks.

From simos.lists at googlemail.com  Fri Dec 16 01:49:14 2011
From: simos.lists at googlemail.com (Simos Xenitellis)
Date: Fri, 16 Dec 2011 11:49:14 +0200
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <CB0FF685.8906%douglasgodfrey@gmail.com>
References: <CAOrgODbMUBcBitKNUDJSL8p0T0wrDn_SVAs3SmY+m-iXrj4N_w@mail.gmail.com>
	<CB0FF685.8906%douglasgodfrey@gmail.com>
Message-ID: <CAPtVWc4vDfKnv4MNBox4UtqxwdikmAZQ8rV9QG3bJOoZoNfKyg@mail.gmail.com>

On Fri, Dec 16, 2011 at 2:11 AM, Douglas Godfrey
<douglasgodfrey at gmail.com>wrote:

>
> A set of rules for all UNICODE code pages can be found in the SQL2003
> grammar on the Antlr downloads page.
>
>
I think that ideally a proper Unicode library should deal with valid and
invalid characters, or other checks.
For example, glib has a validate function,
http://developer.gnome.org/glib/2.30/glib-Unicode-Manipulation.html#g-unichar-validate
Other programming environments have similar libraries.

Simos

From gonzague.reydet at gmail.com  Fri Dec 16 02:27:21 2011
From: gonzague.reydet at gmail.com (Gonzague Reydet)
Date: Fri, 16 Dec 2011 11:27:21 +0100
Subject: [antlr-interest] How to get information on the tokens that produced
	a tree node?
Message-ID: <CAHHXKCbzezSdceu4pbhJjATMV9+4OeZ=-OWARyZeYzNhrs8U4w@mail.gmail.com>

Hi all,

I am working on a lexer & parser grammar that produce an AST from an input
file. The AST is then passed to a tree grammar that calls my custom code. I
think it is a classic ANTLR pattern, isn't it?
When an error is detected during the tree parsing, I am looking for a way
to print error with information on the original input tokens, not on the
tree node which is not relevant for the end user.
How to get information on the origin input file from the display error
function of the tree grammar? Is there a link between the tree node stream
of the AST and the token stream produced by the lexer?

Note that my target language is C.

Regards,
Gonzague.

From Norman at dunbar-it.co.uk  Fri Dec 16 02:46:25 2011
From: Norman at dunbar-it.co.uk (Norman Dunbar)
Date: Fri, 16 Dec 2011 10:46:25 +0000
Subject: [antlr-interest] String literals - what am I missing?
Message-ID: <4EEB2181.7020206@dunbar-it.co.uk>

Morning.

I'm attempting to write my first grammar. I am using ANTLRWorks 1.4.3 
with ANTLR 3.4 built in.

I created a new grammar and had the system auto generate a double quote 
delimited STRING for me, as follows:

STRING
     :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
     ;

As I don't need or want escape sequences and backslashes are not special 
characters, I've amended it slightly to the following including a 
separate option for single quote delimited strings:

STRING
     :  '\'' ( ~('\'') )* '\''
     |  '"'  ( ~('"')  )* '"'
     ;

In theory, if I've got what I think is my reg-exp correct, a string 
starts and ends with a single or double quote, and has zero or more 
characters between except the single or double quote delimiter.

Unfortunately, the debugger allows "abc " def" or 'abc ' def' as valid 
strings.

The bit in the middle, which I think should be disallowing the delimiter 
within the string, is auto generated by ANTLRWorks - wel, the part of it 
that I'm using is.

Any help gratefully received. It's bound to be simple and staring me in 
the face, but I can't see it. :-(


Cheers,
Norm.

-- 
Norman Dunbar
Dunbar IT Consultants Ltd

Registered address:
Thorpe House
61 Richardshaw Lane
Pudsey
West Yorkshire
United Kingdom
LS28 7EL

Company Number: 05132767

From Norman at dunbar-it.co.uk  Fri Dec 16 06:48:41 2011
From: Norman at dunbar-it.co.uk (Norman Dunbar)
Date: Fri, 16 Dec 2011 14:48:41 +0000
Subject: [antlr-interest] Another simple case (of confusion)
Message-ID: <4EEB5A49.4030307@dunbar-it.co.uk>

Sorry, me again.

I have this in my grammar:

BIN_VALUE : SIGN? '%' BIN_DIGIT+ ;

HEX_VALUE : SIGN? '%' HEX_DIGIT+ ;

INT_VALUE : SIGN? DIGIT+


fragment
BIN_DIGIT : '0'..'1';

fragment
HEX_DIGIT : (DIGIT | 'a'..'f' | 'A'..'F') ;

fragment
DIGIT : '0'..'9' ;

fragment
SIGN : '+'|'-' ;


The interpreter allows "+%1.9" or other "bad" values for a BIN_VALUE. 
The diagram for the above is "grammar T -> BIN_VALUE -> <epsilon>". 
There's nothing in the console output.

If I do a similar invalid HEX_VALUE such as "+$5.f", I get a similar 
result, the value is accepted as a valid HEX_VALUE.

Similarly, a decimal point in my INT_VALUE is accepted as well, however, 
if the invalid character at at the start of the input, it does get 
rejected - 'a5000' for an INT_VALUE for example - giving "no viable alt 
exception".


I do have both ANTLR books, but I can find nothing that explains my 
problems. Feel free to point me at  the correct location in the manual 
if you know different. Thanks.


Cheers,
Norm.

-- 
Norman Dunbar
Dunbar IT Consultants Ltd

Registered address:
Thorpe House
61 Richardshaw Lane
Pudsey
West Yorkshire
United Kingdom
LS28 7EL

Company Number: 05132767

From jbb at acm.org  Fri Dec 16 07:11:45 2011
From: jbb at acm.org (John B. Brodie)
Date: Fri, 16 Dec 2011 10:11:45 -0500
Subject: [antlr-interest] Another simple case (of confusion)
In-Reply-To: <4EEB5A49.4030307@dunbar-it.co.uk>
References: <4EEB5A49.4030307@dunbar-it.co.uk>
Message-ID: <4EEB5FB1.1000900@acm.org>

Greetings!

On 12/16/2011 09:48 AM, Norman Dunbar wrote:
> Sorry, me again.
>
> I have this in my grammar:
>
> BIN_VALUE : SIGN? '%' BIN_DIGIT+ ;
>
> HEX_VALUE : SIGN? '%' HEX_DIGIT+ ;
>
> INT_VALUE : SIGN? DIGIT+
>
>
> fragment
> BIN_DIGIT : '0'..'1';
>
> fragment
> HEX_DIGIT : (DIGIT | 'a'..'f' | 'A'..'F') ;
>
> fragment
> DIGIT : '0'..'9' ;
>
> fragment
> SIGN : '+'|'-' ;
>
>
> The interpreter allows "+%1.9" or other "bad" values for a BIN_VALUE. 
> The diagram for the above is "grammar T -> BIN_VALUE -> <epsilon>". 
> There's nothing in the console output.
>
> If I do a similar invalid HEX_VALUE such as "+$5.f", I get a similar 
> result, the value is accepted as a valid HEX_VALUE.
>
> Similarly, a decimal point in my INT_VALUE is accepted as well, however, 
> if the invalid character at at the start of the input, it does get 
> rejected - 'a5000' for an INT_VALUE for example - giving "no viable alt 
> exception".
>
>


You did not show your parser rules so I can only guess, but does your
top-most parser rule consume all of the input by requiring an EOF as its
terminator?

ANTLR will happily just consume only a valid prefix of your input and
stop at the first invalid character, unless you tell it to consume
everything.

So I speculate that it really did not accept the decimal point but
rather just stopped.

I do not use ANTLRWorks, but I wonder if perhaps you can verify the
premature exit by inspecting what characters are contained within the
BIN_VALUE token mentioned in your above diagram?

Hope this helps...
   -jbb



From douglasgodfrey at gmail.com  Fri Dec 16 07:24:04 2011
From: douglasgodfrey at gmail.com (Douglas Godfrey)
Date: Fri, 16 Dec 2011 10:24:04 -0500
Subject: [antlr-interest] Unicode character classes
In-Reply-To: <CAPtVWc4vDfKnv4MNBox4UtqxwdikmAZQ8rV9QG3bJOoZoNfKyg@mail.gmail.com>
Message-ID: <CB10CC6A.895B%douglasgodfrey@gmail.com>

there all in the sql2003 grammar including all characters valid in  an
Latin-1 and/or Unicode Identifier


On Fri, Dec 16, 2011 at 2:11 AM, Douglas Godfrey <douglasgodfrey at gmail.com>
wrote:
> 
> A set of rules for all UNICODE code pages can be found in the SQL2003
> grammar on the Antlr downloads page.
> 

I think that ideally a proper Unicode library should deal with valid and
invalid characters, or other checks.
For example, glib has a validate function,
http://developer.gnome.org/glib/2.30/glib-Unicode-Manipulation.html#g-unicha
r-validate
Other programming environments have similar libraries.

Simos




From Norman at dunbar-it.co.uk  Fri Dec 16 08:02:38 2011
From: Norman at dunbar-it.co.uk (Norman Dunbar)
Date: Fri, 16 Dec 2011 16:02:38 +0000
Subject: [antlr-interest] Another simple case (of confusion)
In-Reply-To: <4EEB5FB1.1000900@acm.org>
References: <4EEB5A49.4030307@dunbar-it.co.uk> <4EEB5FB1.1000900@acm.org>
Message-ID: <4EEB6B9E.20204@dunbar-it.co.uk>

Hi John,

> You did not show your parser rules so I can only guess, but does your
> top-most parser rule consume all of the input by requiring an EOF as its
> terminator?
Face-palm time! I didn't have a parser rule, only lexer rules. Silly me. 
I made up a quick rule as follows:

bin_assign : FLOAT_ID '=' BIN_VALUE ;

And now when I run the interpreter, I get that as a valid statement if 
all is well, and I'm not sure what when there are dots and other 
non-binary digits in the input:

fred = %1010.9 results in a tree as follows in the diagram:

Grammar T
     |
  bin_assign
   |   |   |
fred  =  %1010


So, it seems, at the moment, to be Ignoring the invalid characters. 
Running in the debugger gives me Java conmpilation errors - a missing 
semi-colon somewhere in the lexer.

Not to worry, I'm on holiday in 30 mins until the New Year. I'll worry 
about it then.

Thanks for your help.


Happy Christmas everyone. (Insert appropriate festival of choice here of 
course!)


Cheers,
Norm.

-- 
Norman Dunbar
Dunbar IT Consultants Ltd

Registered address:
Thorpe House
61 Richardshaw Lane
Pudsey
West Yorkshire
United Kingdom
LS28 7EL

Company Number: 05132767

From Norman at dunbar-it.co.uk  Fri Dec 16 08:11:26 2011
From: Norman at dunbar-it.co.uk (Norman Dunbar)
Date: Fri, 16 Dec 2011 16:11:26 +0000
Subject: [antlr-interest] Another simple case (of confusion)
In-Reply-To: <4EEB6B9E.20204@dunbar-it.co.uk>
References: <4EEB5A49.4030307@dunbar-it.co.uk> <4EEB5FB1.1000900@acm.org>
	<4EEB6B9E.20204@dunbar-it.co.uk>
Message-ID: <4EEB6DAE.6030008@dunbar-it.co.uk>

On 16/12/11 16:02, Norman Dunbar wrote:
> So, it seems, at the moment, to be Ignoring the invalid characters.
> Running in the debugger gives me Java conmpilation errors - a missing
> semi-colon somewhere in the lexer.
Ok, I fixed that, I was doing something wrong in the lexer that I should 
have done in the parser.

I still get this assignment as being valid:

fred = +%1010.9

But, as I said, in the New Year!


Cheers,
Norm.

-- 
Norman Dunbar
Dunbar IT Consultants Ltd

Registered address:
Thorpe House
61 Richardshaw Lane
Pudsey
West Yorkshire
United Kingdom
LS28 7EL

Company Number: 05132767

From stefika at gmail.com  Fri Dec 16 14:06:32 2011
From: stefika at gmail.com (Andreas Stefik)
Date: Fri, 16 Dec 2011 16:06:32 -0600
Subject: [antlr-interest] antlr or javacc?
In-Reply-To: <CAFAd71U-JWZU8-DjP_d3hjY0U+99JbAd3w96dm6ggAzfU2=QtQ@mail.gmail.com>
References: <CAFAd71U-JWZU8-DjP_d3hjY0U+99JbAd3w96dm6ggAzfU2=QtQ@mail.gmail.com>
Message-ID: <CABiHOJno1BAxHRx30faU3f1u32Tq5ugk3Bd+ZrTtkK3RjXsPwA@mail.gmail.com>

Li Li,

I have both implemented compilers in JavaCC and ANTLR and also taught
classes in the same. Antlr wins, hands down, for at least the
following reasons:

1. Antlr is more flexible

2. Antlr has great documentation and a rich community. The JavaCC
documentation is truly awful.

3. Antlr has targets so you can use different platforms.

4. Antlr has rule rewriting and tree walkers. These features alone
make writing a compiler much more pleasant.

5. Antlr has LL *, whereas if I recall JavaCC has fixed lookahead,
which makes writing grammars a little less flexible.

6. Antlr has semantic predicates.

7. Antlr is actively developed. Last I checked, and it's been a while,
javaCC wasn't a very active project.

The list goes on and on. I have no vested interest in choosing either,
but in my view, antlr is a far superior technology.

Stefik

From researcher0x00 at gmail.com  Fri Dec 16 16:33:17 2011
From: researcher0x00 at gmail.com (Eric)
Date: Fri, 16 Dec 2011 19:33:17 -0500
Subject: [antlr-interest] Fwd:  antlr or javacc?
In-Reply-To: <CAN45N13HSa9zxK0TrcA7baridvzyLGgdmVuGjn88SoZsHfrKaA@mail.gmail.com>
References: <CAFAd71U-JWZU8-DjP_d3hjY0U+99JbAd3w96dm6ggAzfU2=QtQ@mail.gmail.com>
	<CABiHOJno1BAxHRx30faU3f1u32Tq5ugk3Bd+ZrTtkK3RjXsPwA@mail.gmail.com>
	<CAN45N13HSa9zxK0TrcA7baridvzyLGgdmVuGjn88SoZsHfrKaA@mail.gmail.com>
Message-ID: <CAN45N13iw_9oTadOg6PqqrEgEKguZHkszq5HwTTDTX_cDK_i7w@mail.gmail.com>

---------- Forwarded message ----------

On Fri, Dec 16, 2011 at 5:06 PM, Andreas Stefik <stefika at gmail.com> wrote:

> Li Li,
>
> I have both implemented compilers in JavaCC and ANTLR and also taught
> classes in the same. Antlr wins, hands down, for at least the
> following reasons:
>
> 1. Antlr is more flexible
>
> 2. Antlr has great documentation and a rich community. The JavaCC
> documentation is truly awful.
>
> 3. Antlr has targets so you can use different platforms.
>
While there are several targets listed at
http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targetsf for any
target other than Java, C, or C#3 I would double check to see if it is
still active regardless of what the status is on the page by checking for
messages from the author posted at http://antlr.markmail.org/


>
> 4. Antlr has rule rewriting and tree walkers. These features alone
> make writing a compiler much more pleasant.
>
> 5. Antlr has LL *, whereas if I recall JavaCC has fixed lookahead,
> which makes writing grammars a little less flexible.
>
> 6. Antlr has semantic predicates.
>
> 7. Antlr is actively developed. Last I checked, and it's been a while,
> javaCC wasn't a very active project.
>
ANTLR v4 is currently under development by Terrence with help from several
others. It is not even at an alpha version, but is fleshed out enough to to
basic test. ANTLRWorks v2  should come out at the same time and work with
ANTLR v4.

You can track the code updates at https://github.com/antlr/antlr4

The latest release 3.4 has gone into a maintenance mode. See
http://www.antlr.org/download


>
> The list goes on and on. I have no vested interest in choosing either,
> but in my view, antlr is a far superior technology.
>
> Stefik
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From gavin.king at gmail.com  Fri Dec 16 16:54:22 2011
From: gavin.king at gmail.com (Gavin King)
Date: Fri, 16 Dec 2011 18:54:22 -0600
Subject: [antlr-interest] How can a syntactic predicate not be satisfied if
	the input matches it?
Message-ID: <CAP7PoCemT7ZUYLmj_CrrKptAuYujUfR2eKFVMHEg0=sf1QZB1g@mail.gmail.com>

Hi folks,

I have a large grammar with a rule like this:

   z: (x)=>x | y

And I have some input that I know matches x. I know this for sure,
because when I change z to read:

   z: x

Then ANTLR parses that input successfully with no errors.

To my surprise, the input does not match z, and the errors generated
come from attempting to match y. So apparently the syntactic predicate
(x)=> failed to match the input, even though I'm quite certain that x
does match it. I even tried changing z to:

    z options { backtrack=true; } : x | y

which, unsurprisingly, failed to help.

What could possibly be the cause of this?

Thanks,
Gavin

-- 
Gavin King
gavin.king at gmail.com
http://in.relation.to/Bloggers/Gavin
http://ceylon-lang.org
http://hibernate.org
http://seamframework.org

From chwchw at gmx.de  Fri Dec 16 19:47:19 2011
From: chwchw at gmx.de (Christian)
Date: Sat, 17 Dec 2011 04:47:19 +0100
Subject: [antlr-interest] Read grammar, manipulate it, and save changes
Message-ID: <4EEC10C7.7090504@gmx.de>

Hi at all,

I read an antlr-based grammar and produce an AST out of it. After
manipulating the AST, I now want to save it to a file. But how could I
do it? Do I have to walk through the AST and manually add parantheses,
whitespaces and so on? Or does a formatter already exist that I can use?

I use ANTLR (with the ANTLR 1.6 grammar) to parse the antlr-based
grammar and to create the AST.

Regards,
Christian

From fancyerii at gmail.com  Fri Dec 16 20:47:16 2011
From: fancyerii at gmail.com (Li Li)
Date: Sat, 17 Dec 2011 12:47:16 +0800
Subject: [antlr-interest] antlr or javacc?
In-Reply-To: <CABiHOJno1BAxHRx30faU3f1u32Tq5ugk3Bd+ZrTtkK3RjXsPwA@mail.gmail.com>
References: <CAFAd71U-JWZU8-DjP_d3hjY0U+99JbAd3w96dm6ggAzfU2=QtQ@mail.gmail.com>
	<CABiHOJno1BAxHRx30faU3f1u32Tq5ugk3Bd+ZrTtkK3RjXsPwA@mail.gmail.com>
Message-ID: <CAFAd71W17_6mX+MQRh1tUK=P0-8qxpm7X20yOfpw=J-Cna1GWg@mail.gmail.com>

thanks.

On Sat, Dec 17, 2011 at 6:06 AM, Andreas Stefik <stefika at gmail.com> wrote:

> Li Li,
>
> I have both implemented compilers in JavaCC and ANTLR and also taught
> classes in the same. Antlr wins, hands down, for at least the
> following reasons:
>
> 1. Antlr is more flexible
>
> 2. Antlr has great documentation and a rich community. The JavaCC
> documentation is truly awful.
>
> 3. Antlr has targets so you can use different platforms.
>
> 4. Antlr has rule rewriting and tree walkers. These features alone
> make writing a compiler much more pleasant.
>
> 5. Antlr has LL *, whereas if I recall JavaCC has fixed lookahead,
> which makes writing grammars a little less flexible.
>
> 6. Antlr has semantic predicates.
>
> 7. Antlr is actively developed. Last I checked, and it's been a while,
> javaCC wasn't a very active project.
>
> The list goes on and on. I have no vested interest in choosing either,
> but in my view, antlr is a far superior technology.
>
> Stefik
>

From researcher0x00 at gmail.com  Sat Dec 17 05:33:32 2011
From: researcher0x00 at gmail.com (Eric)
Date: Sat, 17 Dec 2011 08:33:32 -0500
Subject: [antlr-interest] Read grammar, manipulate it, and save changes
In-Reply-To: <4EEC10C7.7090504@gmx.de>
References: <4EEC10C7.7090504@gmx.de>
Message-ID: <CAN45N10nsxpYmNGS22G1MqNgt7uyMGx_bhaqjJQXJFgKrjzYsg@mail.gmail.com>

Hi Christian,

Off the top of my head, try using toStringTree() which is a method in
BaseTree to convert the AST to text. This will add the ( and )  and spaces
but no line formatting.
You can use toStringTree() as a starting point to write your own method
that adds line formatting.

ANTLR does not have any methods I know of to construct an internal
representation of a tree from a text file.

Hope that helps, Eric

On Fri, Dec 16, 2011 at 10:47 PM, Christian <chwchw at gmx.de> wrote:

> Hi at all,
>
> I read an antlr-based grammar and produce an AST out of it. After
> manipulating the AST, I now want to save it to a file. But how could I
> do it? Do I have to walk through the AST and manually add parantheses,
> whitespaces and so on? Or does a formatter already exist that I can use?
>
> I use ANTLR (with the ANTLR 1.6 grammar) to parse the antlr-based
> grammar and to create the AST.
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From martijn.reuvers at gmail.com  Mon Dec 19 08:31:33 2011
From: martijn.reuvers at gmail.com (Martijn Reuvers)
Date: Mon, 19 Dec 2011 17:31:33 +0100
Subject: [antlr-interest] How can a syntactic predicate not be satisfied
 if the input matches it?
In-Reply-To: <CAP7PoCemT7ZUYLmj_CrrKptAuYujUfR2eKFVMHEg0=sf1QZB1g@mail.gmail.com>
References: <CAP7PoCemT7ZUYLmj_CrrKptAuYujUfR2eKFVMHEg0=sf1QZB1g@mail.gmail.com>
Message-ID: <CAON31m4EnJjrE0+VrVuvj0+ew7GuqrzXeSWAApGymwzFG7qE5A@mail.gmail.com>

Hello Gavin,

It may have something to do with a token that is the 'largest' token
which is consumed first and automatically 'enforces' the other rule
(making the predicate fail).

E.g. this very simple grammer:

grammar Test;

a: (r1)=>r1
   | r2;

r1 : Y Z;

r2: X;

X: 'ab';

Y: 'a';

Z: 'b';

If you provide this grammar with 'ab'. This will always end up in r2,
as the token X is always matched first (returned by the lexer). That's
how the antlrs lexer works by default.

Regards,
Martijn


On Sat, Dec 17, 2011 at 1:54 AM, Gavin King <gavin.king at gmail.com> wrote:
> Hi folks,
>
> I have a large grammar with a rule like this:
>
> ? z: (x)=>x | y
>
> And I have some input that I know matches x. I know this for sure,
> because when I change z to read:
>
> ? z: x
>
> Then ANTLR parses that input successfully with no errors.
>
> To my surprise, the input does not match z, and the errors generated
> come from attempting to match y. So apparently the syntactic predicate
> (x)=> failed to match the input, even though I'm quite certain that x
> does match it. I even tried changing z to:
>
> ? ?z options { backtrack=true; } : x | y
>
> which, unsurprisingly, failed to help.
>
> What could possibly be the cause of this?
>
> Thanks,
> Gavin
>
> --
> Gavin King
> gavin.king at gmail.com
> http://in.relation.to/Bloggers/Gavin
> http://ceylon-lang.org
> http://hibernate.org
> http://seamframework.org
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From cowang at comcast.net  Mon Dec 19 08:46:05 2011
From: cowang at comcast.net (George S. Cowan)
Date: Mon, 19 Dec 2011 11:46:05 -0500
Subject: [antlr-interest] De-emphasizing tree grammars?
Message-ID: <02bb01ccbe6d$b3d7d180$1b877480$@net>

Ter,
 
I am worried about my use extensive use of tree grammars in my project.
 
On the TODO List page
http://www.antlr.org/wiki/display/~admin/TODO+list?focusedCommentId=27656324
#comment-27656324
 
Ruben Laguna says:
> Can I ask why the "no ast output from tree grammar" bullet? Is there
something fundamentally wrong with generating ast from tree grammars?
 
then
 
Terence Parr says:
> Hi Ruben, turns out I'm de-emphasizing tree grammars and it's a rarely
used feature and hard to implement.
 
That "de-emphasizing tree grammars" is really scary. The TODO list still
contains some items about tree grammars, TreeFilter, and TreeRewriter so I'm
not clear. Also, in the Language Implementation Patterns book, the tree
grammar examples Reduce.g and Simplify.g use output=AST. You seemed very
excited about that capability not so long ago. 
 
Will I still be able to do extensive transformations of trees in ANTLR 4?
What approach should I plan on for multiple complicated outputs from a
single input?
 
George
 

From Stefan.Maetje at esd-electronics.com  Mon Dec 19 09:47:37 2011
From: Stefan.Maetje at esd-electronics.com (Stefan =?iso-8859-1?b?TeR0amU=?=)
Date: Mon, 19 Dec 2011 18:47:37 +0100
Subject: [antlr-interest] Bugreport: ANTLR 3.4 with problems of duplicating
 nodes and trees in my grammar
Message-ID: <1324316857.1616.0@pc-stefanm>

Hi,

I think I've found a bug in ANTLR 3.4 (from antlr-3.4-complete.jar) with  
respect
to the duplication of nodes and trees as described in the ANTLR book in
chapter 7, page 167 (P4.0 printing).

I try to build an AST from my input language and split the multi ID lines of a
structure definition from my input in multiple "FIELD_DCL" subtrees for later
evaluation. My input example looks like this:
-------------8<-------------8<-------------8<-------------8<-------------8<----
MODULE ( structsmpl );

PROBLEM;
     DCL toast   STRUCT [
         (zing, zang, zong)  FIXED,
         (ring, rang)  CLOCK
     ] GLOBAL;
MODEND;
-------------8<-------------8<-------------8<-------------8<-------------8<----


The simplified rule for a single structure component looks like this (modifier
list MOD_LIST commented out):
-------------8<-------------8<-------------8<-------------8<-------------8<----
structComponent
	:	( ID | '(' ID (',' ID )* ')' ) /*i='INV'?*/ simpleType
		-> ^(FIELD_DCL simpleType /* ^(MOD_LIST $i?)*/ ID)+
	;
-------------8<-------------8<-------------8<-------------8<-------------8<----


Here follows the somewhat pretty printed output of the AST's toString() method:
-------------8<-------------8<-------------8<-------------8<-------------8<----
(MODULE structsmpl
     (PROBLEM
         (VAR_DCL
             (STRUCT
                 (FIELD_DCL FIXED 15 zing)
                 (FIELD_DCL FIXED 15 zing zang)
                 (FIELD_DCL FIXED 15 zing zong)
                 (FIELD_DCL CLOCK ring)
                 (FIELD_DCL CLOCK rang)
             )
             (MOD_LIST GLOBAL)
             toast
         )
     )
)
-------------8<-------------8<-------------8<-------------8<-------------8<----

What you can see is that the "zing" component of the structure is repeated for
all three variables if the "simpleType" rule returns something like "FIXED 15".
Astonishingly it works correct if "simpleType" only returns a tree like  
"CLOCK".
See the output I would _expect_ to be generated by that rule below:
-------------8<-------------8<-------------8<-------------8<-------------8<----
(MODULE structsmpl
     (PROBLEM
         (VAR_DCL
             (STRUCT
                 (FIELD_DCL FIXED 15 zing)
                 (FIELD_DCL FIXED 15 zang)
                 (FIELD_DCL FIXED 15 zong)
                 (FIELD_DCL CLOCK ring)
                 (FIELD_DCL CLOCK rang)
             )
             (MOD_LIST GLOBAL)
             toast
         )
     )
)
-------------8<-------------8<-------------8<-------------8<-------------8<----

After some trial and error I found a version of the "structComponent" rule that
is working some part more like I expect:
-------------8<-------------8<-------------8<-------------8<-------------8<----
structComponent
	:	( ID | '(' ID (',' ID )* ')' ) /*i='INV'?*/ simpleType
		-> ^(FIELD_DCL ID simpleType /* ^(MOD_LIST $i?)*/)+
	;
-------------8<-------------8<-------------8<-------------8<-------------8<----

Moving the "ID" element from the end to directly after "FIELD_DCL" seems to fix
this behaviour. In the following output generated with the changed
"structComponent" rule every component shows up only once as expected.
-------------8<-------------8<-------------8<-------------8<-------------8<----
(MODULE structsmpl
     (PROBLEM
         (VAR_DCL
             (STRUCT
                 (FIELD_DCL zing FIXED 15)
                 (FIELD_DCL zang FIXED 15)
                 (FIELD_DCL zong FIXED 15)
                 (FIELD_DCL ring CLOCK)
                 (FIELD_DCL rang CLOCK)
             )
             (MOD_LIST GLOBAL)
             toast
         )
     )
)
-------------8<-------------8<-------------8<-------------8<-------------8<----

Please find a simplified grammar Pearl90.g and a test rig Pearl90Test.java
attached to this report in a zip file.

Any comments and bug fixes appreciated.

Greetings,
	Stefan M?tje
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Pearl90RewriteBug.zip
Type: application/zip
Size: 7848 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20111219/8a03ba8a/attachment.zip 

From plchmate at fit.cvut.cz  Tue Dec 20 03:28:55 2011
From: plchmate at fit.cvut.cz (=?ISO-8859-2?Q?Mat=ECj_Plch?=)
Date: Tue, 20 Dec 2011 12:28:55 +0100
Subject: [antlr-interest] html parser,
	common rules and any combination of rules
Message-ID: <4EF07177.1060708@fit.cvut.cz>

Hi, Im trying to write simple HTML parser (with antlr4ruby) and Im 
facing two problems:

1. If I have HTML element attributes I need to write rule to match any 
combination of them, but every can be only once there, like:
<body bgcolor="" background=""> <body background="" bgcolor="">

2. I match attributes values in this way:
attr_svalue: ASSIGN SVALUE;
align_value: ASSIGN AVALUE;

SVALUE: { @tagMode }?=>
         ( '"' (~'"')* '"'
         | '\'' (~'\'')* '\''
         )
     ;

AVALUE
          : { @tagMode }?=> '"' ('left'|'right'|'center') '"'
          ;

But SVALUE rule hides AVALUE. How can be this done to match both?

Thanks in advance.

Matej Plch


From Stefan.Maetje at esd-electronics.com  Tue Dec 20 07:47:05 2011
From: Stefan.Maetje at esd-electronics.com (Stefan =?iso-8859-1?b?TeR0amU=?=)
Date: Tue, 20 Dec 2011 16:47:05 +0100
Subject: [antlr-interest] How to duplicate nodes using a subrule when doing
	AST rewriting?
Message-ID: <1324396025.1791.0@pc-stefanm>

Hi,

I would like to duplicate AST nodes as it is described in chapter 7 of the  
ANTLR
reference book.

The following simplified rules are part of my grammar. The "oneIdOrList" rule
collects one or multiple identifiers into one list. At some points in my  
grammar
I want to generate/duplicate a subtree for each identifier found. But using the
"oneIdOrList" rule does not work (see NOT WORKING variant of "structComponent"
below).

To get the "structComponent" rule working I have to write the
"( ID | '(' ID (',' ID )* ')' )" directly into the "structComponent" rule.

Is there a way to use (and or change) the "oneIdOrList" rule in the
"structComponent" rule and still get the wanted node and tree duplication?

Or to I have to replace the "oneIdOrList" rule anywhere in my grammar with the
direct code to get the duplication working.

Anybody there to give me a hint to solve this problem?

Thanks,
	Stefan

-------------8<-------------8<-------------8<-------------8<-------------8<----
/** "OneIdentifierOrList"
*/
oneIdOrList:
	( ID | '(' ID (',' ID )* ')' )	-> ID+
	;

/** "TypeStructure"
	*/
typeStruct
	:	'STRUCT'^ LBRACK! structComponent ( ','! structComponent )*  
RBRACK!
	;

/** "StructureComponent"
	*/
// WORKING variant
structComponent
	:	( ID | '(' ID (',' ID )* ')' ) oneIdOrList simpleType	
		-> ^(FIELD_DCL ID simpleType)+
	;
// NOT WORKING variant
structComponent
	:	oneIdOrList simpleType	
		-> ^(FIELD_DCL oneIdOrList simpleType)+
	;
-------------8<-------------8<-------------8<-------------8<-------------8<----

Example input
-------------8<-------------8<-------------8<-------------8<-------------8<----
MODULE ( structsmpl );

PROBLEM;
     DCL toast   STRUCT [
         (zing, zang, zong)  FIXED,
         (ring, rang)  CLOCK
     ] GLOBAL;
MODEND;
-------------8<-------------8<-------------8<-------------8<-------------8<----

Pretty printed AST result of NOT WORKING variant using the "oneIdOrList" rule:
-------------8<-------------8<-------------8<-------------8<-------------8<----
(MODULE structsmpl
     (PROBLEM
         (VAR_DCL
             (STRUCT
                 (FIELD_DCL zing zang zong FIXED 15)
                 (FIELD_DCL ring rang CLOCK)
             )
             (MOD_LIST GLOBAL)
             toast
         )
     )
)
-------------8<-------------8<-------------8<-------------8<-------------8<----

Pretty printed AST result of the WORKING variant using "ID" directly in the
"structComponent" rule:
-------------8<-------------8<-------------8<-------------8<-------------8<----
(MODULE structsmpl
     (PROBLEM
         (VAR_DCL
             (STRUCT
                 (FIELD_DCL zing FIXED 15)
                 (FIELD_DCL zang FIXED 15)
                 (FIELD_DCL zong FIXED 15)
                 (FIELD_DCL ring CLOCK)
                 (FIELD_DCL rang CLOCK)
             )
             (MOD_LIST GLOBAL)
             toast
         )
     )
)
-------------8<-------------8<-------------8<-------------8<-------------8<----


From researcher0x00 at gmail.com  Tue Dec 20 08:19:53 2011
From: researcher0x00 at gmail.com (Eric)
Date: Tue, 20 Dec 2011 11:19:53 -0500
Subject: [antlr-interest] How to duplicate nodes using a subrule when
 doing AST rewriting?
In-Reply-To: <1324396025.1791.0@pc-stefanm>
References: <1324396025.1791.0@pc-stefanm>
Message-ID: <CAN45N12nPJLGx+3m7cVN+QTa+Qh-i6zLTUJBaJjDrsKgxS5hcQ@mail.gmail.com>

Hi Stefan,

My suggestion would be to avoid doing tree rewrites in the grammar files
and instead drop down to the API level and call CommonTree and
ITreeAdaptor methods directly.

For the last two days I have been doing major changes to an AST that can't
be done, or I can't figure out, with the the tree rewrite rules in a
grammar.

Most of the API methods for tree manipulation are in ITreeAdaptor, so you
will have create an adaptor to call the methods. i.e. ITreeAdaptor adaptor
= new CommonTreeAdaptor();

Since I am doing all of mine in C#, I can't give you working Java examples
here.

For your duplicate of a node problem I would look at the
ITreeAdaptor.DupTree method.

To replace nodes in a tree I would look at ITreeAdaptor.ReplaceChildren.

Also, I personally find it easier to set the book aside and just look at
the trees like any standard tree with parents and multiple children. Don't
try and think in rewrite rules and recreate the process using the methods,
it is just confusing. And I also find that cutting and pasting rewrite code
from the parser gets me into more problems than it's worth.

Hope this helps,  Eric



On Tue, Dec 20, 2011 at 10:47 AM, Stefan M?tje <
Stefan.Maetje at esd-electronics.com> wrote:

> Hi,
>
> I would like to duplicate AST nodes as it is described in chapter 7 of the
> ANTLR
> reference book.
>
> The following simplified rules are part of my grammar. The "oneIdOrList"
> rule
> collects one or multiple identifiers into one list. At some points in my
> grammar
> I want to generate/duplicate a subtree for each identifier found. But
> using the
> "oneIdOrList" rule does not work (see NOT WORKING variant of
> "structComponent"
> below).
>
> To get the "structComponent" rule working I have to write the
> "( ID | '(' ID (',' ID )* ')' )" directly into the "structComponent" rule.
>
> Is there a way to use (and or change) the "oneIdOrList" rule in the
> "structComponent" rule and still get the wanted node and tree duplication?
>
> Or to I have to replace the "oneIdOrList" rule anywhere in my grammar with
> the
> direct code to get the duplication working.
>
> Anybody there to give me a hint to solve this problem?
>
> Thanks,
>        Stefan
>
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
> /** "OneIdentifierOrList"
> */
> oneIdOrList:
>        ( ID | '(' ID (',' ID )* ')' )  -> ID+
>        ;
>
> /** "TypeStructure"
>        */
> typeStruct
>        :       'STRUCT'^ LBRACK! structComponent ( ','! structComponent )*
> RBRACK!
>        ;
>
> /** "StructureComponent"
>        */
> // WORKING variant
> structComponent
>        :       ( ID | '(' ID (',' ID )* ')' ) oneIdOrList simpleType
>                -> ^(FIELD_DCL ID simpleType)+
>        ;
> // NOT WORKING variant
> structComponent
>        :       oneIdOrList simpleType
>                -> ^(FIELD_DCL oneIdOrList simpleType)+
>        ;
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
>
> Example input
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
> MODULE ( structsmpl );
>
> PROBLEM;
>     DCL toast   STRUCT [
>         (zing, zang, zong)  FIXED,
>         (ring, rang)  CLOCK
>     ] GLOBAL;
> MODEND;
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
>
> Pretty printed AST result of NOT WORKING variant using the "oneIdOrList"
> rule:
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
> (MODULE structsmpl
>     (PROBLEM
>         (VAR_DCL
>             (STRUCT
>                 (FIELD_DCL zing zang zong FIXED 15)
>                 (FIELD_DCL ring rang CLOCK)
>             )
>             (MOD_LIST GLOBAL)
>             toast
>         )
>     )
> )
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
>
> Pretty printed AST result of the WORKING variant using "ID" directly in the
> "structComponent" rule:
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
> (MODULE structsmpl
>     (PROBLEM
>         (VAR_DCL
>             (STRUCT
>                 (FIELD_DCL zing FIXED 15)
>                 (FIELD_DCL zang FIXED 15)
>                 (FIELD_DCL zong FIXED 15)
>                 (FIELD_DCL ring CLOCK)
>                 (FIELD_DCL rang CLOCK)
>             )
>             (MOD_LIST GLOBAL)
>             toast
>         )
>     )
> )
>
> -------------8<-------------8<-------------8<-------------8<-------------8<----
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Tue Dec 20 13:25:40 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Dec 2011 13:25:40 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <02bb01ccbe6d$b3d7d180$1b877480$@net>
References: <02bb01ccbe6d$b3d7d180$1b877480$@net>
Message-ID: <B9E58505-FDB9-41A5-BE06-355A2016C9E8@cs.usfca.edu>

Hi George,

I'm providing AST construction and tree grammars for advanced users and for backward compatibility. I have done some tree rewriters for the book, yes, but I have found that they work well only for such things as peephole optimization.   The AST/ tree grammar mechanism also is something I've been pushing for 20 years without success.  I started out in the compilers world where you really do need an AST, to avoid all of the noise of rule names inside your tree. Recently I had the chance to reevaluate and try out a simple new mechanism based upon parse trees, which can be automatically generated. Now, I'm doing both a DOM and a SAX event type model, which is suitable for lots of different applications. For example, if you want to collect information about all Java declarations, you can simply pass in a listener to the Java parser. The parser doesn't have to be one that happens to have AST construction rules.

Anyway, this is just a taste of what I've been thinking about and it definitely seems to fit within the marketplace / common tasks better. While v4 will have lots of great new features, if you have something working with v3, I'm not sure there is a huge reason to convert. v4 is a lot easier to build grammars and simpler to use in terms of language application implementation, but if you already have a grammar that works, It's probably not worth the effort to try to upgrade. In the case of tree rewriting grammars, if they work, I would just leave them in v3. You will be able to mix the two (v3, v4) freely given the different package names.

Ter


On Dec 19, 2011, at 8:46 AM, George S. Cowan wrote:

> I am worried about my use extensive use of tree grammars in my project.

> On the TODO List page
> http://www.antlr.org/wiki/display/~admin/TODO+list?focusedCommentId=27656324
> #comment-27656324
> 
> Ruben Laguna says:
>> Can I ask why the "no ast output from tree grammar" bullet? Is there
> something fundamentally wrong with generating ast from tree grammars?
> 
> then
> 
> Terence Parr says:
>> Hi Ruben, turns out I'm de-emphasizing tree grammars and it's a rarely
> used feature and hard to implement.
> 
> That "de-emphasizing tree grammars" is really scary. The TODO list still
> contains some items about tree grammars, TreeFilter, and TreeRewriter so I'm
> not clear. Also, in the Language Implementation Patterns book, the tree
> grammar examples Reduce.g and Simplify.g use output=AST. You seemed very
> excited about that capability not so long ago. 
> 
> Will I still be able to do extensive transformations of trees in ANTLR 4?
> What approach should I plan on for multiple complicated outputs from a
> single input?
> 
> George
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jason at jasonosgood.com  Thu Dec 22 12:11:24 2011
From: jason at jasonosgood.com (Jason Osgood)
Date: Thu, 22 Dec 2011 12:11:24 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
Message-ID: <CAHcxkY-_hnb96wvU8oC09nCsVoK30eVfKphqYZjxr9cCD01xkw@mail.gmail.com>

Terence wrote:

> Recently I had the chance to reevaluate and try out a simple new mechanism based
> upon parse trees, which can be automatically generated. Now, I'm doing both a DOM
> and a SAX event type model, which is suitable for lots of different applications. For
> example, if you want to collect information about all Java declarations, you can
> simply pass in a listener to the Java parser.

That would explain why I didn't get an answer.

fado's & DebugEventListener
http://www.antlr.org/pipermail/antlr-interest/2011-November/043436.html

"Wait for ANTLR v4" would have sufficed.

---

I fully endorse the use of parse trees over ASTs. At least for my code
generation work.

Prior to LL(*), ASTs were kind of necessary, but difficult, because
the parse tree varied so much from the desired AST. Rather than
wrestle with tree construction, I settled on backing my grammars with
a Builder and inlining Java code. Not much better really.

But now with LL(*), parse trees are awesome. Flexible, expressive,
concise. I love working this way. I don't know enough about grammars
and parsing to know if LL(*) parse trees can feasibly replace ASTs,
but I wouldn't be surprised.

---

The reason LL(*)'s parse trees are awesome is because of the clear
boundary/interface between grammar and post-processing.

With both AST tree construction and my inlined Builder kludge, stages
of the processing pipeline bleed into each other, making the
end-to-end brittle and changes very expensive.

---

As I mentioned in my initial question, I created an XPath-lite API.
While I love XPath, I hate all the XML and XPath libraries with the
burning passion of a billion suns. Wrappers, handlers, contexts, ad
nauseum. (That hatred extends to all the mutant DOM implementations,
though less so against XOM. Which is why I created LOX, lightweight
objects for XML.)

Most of what you'll do is drill down a parse tree and iterate over the
results. So my XPath-lite looks kinda like these (sorry if formatting
gets lost):

  for( ParseNode child : parent.find( "/rule1/rule2" ))
  {
      System.out.println( child.getText() );
  }

  for( String literal : parent.findString( "/ruleA/ruleB/Literal" ))
  {
      System.out.println( literal );
  }

My XPath-lite "syntax" is globbing, plus recognition for literals,
minus all the XPath overkill for relative, nth offsets, functions
(it's better to do all that in Java). (Globbing, swiped from shell
script path handling, is stuff like "*/ruleName/*" and
"ruleName/**/ruleName".)

I'm told my path strategy is similar to Groovy's gpath stuff. (Which
would probably be great, were it not for the unfortunate association
with the Groovy language.)

I don't know if the "process/inspect parse tree with xpath-like
grammar" strategy has legs. I've done LOTS of ETL work, so it feels
very natural to me now. And it works really well for extracting the
interesting bits out of source code (e.g. SQL, Java, HTML). I also use
this strategy to replace the interesting bits.

But this strategy probably only works when you want to partially
process a parse tree. It probably doesn't work well (ie complexity
explosion) for 1:1 translation or compilers.


Cheers, Jason

From rgildea at gmail.com  Thu Dec 22 20:00:02 2011
From: rgildea at gmail.com (Richard Gildea)
Date: Thu, 22 Dec 2011 20:00:02 -0800
Subject: [antlr-interest] C target memory usage
Message-ID: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>

Hi,

We have been successfully using antlr in the form of the C target for some
time, however we have recently noticed that the memory consumption can be
quite large - up to 150 times the size of the input file. Is this factor of
~150 to be expected, or does it indicate that we may be doing something
wrong? For the vast majority of possible inputs this does not cause a
problem, however some input files can be as large as 0.5 Gb, giving a peak
memory usage of 75 Gb - not exactly feasible on most machines!

Does anyone have any examples of using a custom lexer that provides a token
buffer rather than storing all tokens in memory?

Cheers,

Richard

From gavin.king at gmail.com  Thu Dec 22 21:01:47 2011
From: gavin.king at gmail.com (Gavin King)
Date: Thu, 22 Dec 2011 23:01:47 -0600
Subject: [antlr-interest] Fwd:  De-emphasizing tree grammars?
In-Reply-To: <CAP7PoCfgUgczw66URRaGL1z-eKF1hBszwWrn7k+peLvNaHBy8A@mail.gmail.com>
References: <02bb01ccbe6d$b3d7d180$1b877480$@net>
	<B9E58505-FDB9-41A5-BE06-355A2016C9E8@cs.usfca.edu>
	<CAP7PoCfgUgczw66URRaGL1z-eKF1hBszwWrn7k+peLvNaHBy8A@mail.gmail.com>
Message-ID: <CAP7PoCf7FfA=cBZq+qKoLrJXYdofimb95krL2mdsm7VOQwnKFw@mail.gmail.com>

Ooops, I meant to send this to the list rather than to Terence
privately. Been happening to me a lot recently since gmail changed
their UI. Grrr.


---------- Forwarded message ----------
From: Gavin King <gavin.king at gmail.com>
Date: Tue, Dec 20, 2011 at 3:51 PM
Subject: Re: [antlr-interest] De-emphasizing tree grammars?
To: Terence Parr <parrt at cs.usfca.edu>


On Tue, Dec 20, 2011 at 3:25 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> The AST/ tree grammar mechanism also is something I've been pushing for 20 years
> without success. ?I started out in the compilers world where you really do need an AST,
> to avoid all of the noise of rule names inside your tree.

So here's a little bit of feedback on that. I've used ANTLR very
seriously on two projects now, first for the JPA-QL to SQL translation
of the Hibernate ORM library, and now on the compiler and IDE for the
Ceylon programming language.

For the query translator in Hibernate, we used a 3-stage translator
(parser/tree builder, followed by tree transformer, followed by
renderer) where the second two grammars were tree grammars. This
worked out somewhat well, though debugging was quite difficult and
managing less 1-to-1 type transformations was very hard. We were
successful, but I was left doubting that tree grammars had really made
our life easier.

For the Ceylon compiler, I did not even try to use a tree grammar,
because for building a real compiler you want a proper typesafe syntax
tree, not a bunch of untyped tuples. Java isn't lisp, and if you're
trying to write lisp in Java you're unlikely to have much success ;-)
I did initially try letting ANTLR build its untyped tree for
subsequent translation to a typed syntax tree, but this approach was a
failure for two reasons:

1. it's an additional unnecessary step in the pipeline, and, much more
importantly,
2. ANTLR has an awful habit of just throwing away whole branches of
its syntax tree when some rule fails to match far down the tree.

In a real compiler, you *never* want to throw away things the
programmer typed in. That's especially true if, as in our case, the
compiler is also going to be the typechecker of your IDE. IDEs can
simply never, ever throw away input, no matter how many syntax errors
it has. Indeed, the hardest "bit" of building an IDE is doing stuff
like auto-completion correctly while the user is typing, when you're
almost guaranteed that the text is not well-formed.

So basically my conclusion after all this is that ANTLRs tree stuff is
pretty much a misfeature. It's cute for simpler problems, but once you
get beyond hello world, you're better off just writing your own syntax
tree using Java. Which is what I've done in Ceylon.

Now, if ANTLR was able to produce a *typesafe* syntax tree, and not
keep throwing bits of it away all the time, then that would be
something really useful...


--
Gavin King
gavin.king at gmail.com
http://in.relation.to/Bloggers/Gavin
http://ceylon-lang.org
http://hibernate.org
http://seamframework.org


-- 
Gavin King
gavin.king at gmail.com
http://in.relation.to/Bloggers/Gavin
http://ceylon-lang.org
http://hibernate.org
http://seamframework.org

From fancyerii at gmail.com  Thu Dec 22 22:39:50 2011
From: fancyerii at gmail.com (Li Li)
Date: Fri, 23 Dec 2011 14:39:50 +0800
Subject: [antlr-interest] how to use my own lexer?
Message-ID: <CAFAd71W69O4BhS5OYAUBme1N9SXX0zogXLNnukR+-V_rkOCH-A@mail.gmail.com>

hi all
    I want to use antlr to write a query rewriter. I need use my own lexer.
what interface should I implemented?

From chwchw at gmx.de  Fri Dec 23 02:04:55 2011
From: chwchw at gmx.de (Christian)
Date: Fri, 23 Dec 2011 11:04:55 +0100
Subject: [antlr-interest] how to use my own lexer?
In-Reply-To: <CAFAd71W69O4BhS5OYAUBme1N9SXX0zogXLNnukR+-V_rkOCH-A@mail.gmail.com>
References: <CAFAd71W69O4BhS5OYAUBme1N9SXX0zogXLNnukR+-V_rkOCH-A@mail.gmail.com>
Message-ID: <4EF45247.20806@gmx.de>

Hello Li,

great to hear that you want to use ANTLR! However, for now, I do not
know whether it is the right choice because you do not say in detail
what you want to do. Furthermore, you will probably not get information
about how to define a specific interface. But if you have that
interface, the community would be happy to help you in *using* ANTLR to
*implement* your interface. You will admit that a forum about kitchen
utensils is the wrong place to discuss recipes, won't you?

Regards,
Christian

From fancyerii at gmail.com  Fri Dec 23 02:36:30 2011
From: fancyerii at gmail.com (Li Li)
Date: Fri, 23 Dec 2011 18:36:30 +0800
Subject: [antlr-interest] how to use my own lexer?
In-Reply-To: <4EF45247.20806@gmx.de>
References: <CAFAd71W69O4BhS5OYAUBme1N9SXX0zogXLNnukR+-V_rkOCH-A@mail.gmail.com>
	<4EF45247.20806@gmx.de>
Message-ID: <CAFAd71USZf+xNtdLfhnQj50uWY6XHmHxdWbuUwbzP1zxU-E-wg@mail.gmail.com>

Hello Christian,
    I am writing a search query rewriter.
    e.g. input: sony mp3 -> brand:sony product:mp3
    the user query is "sony mp3", then I will rewrite it to "brand:sony
product:mp3" which means I need search product mp3 and product's brand is
sony.
    The example is English, and I need parse Chinese.
    The tokenizer for Chinese is harder than English because there is no
seperator between words in Chinese. in Chinese, it looks like "sonymp3" and
I need use Chinese Segmentor to split it to "sony mp3".
     As far as I know, lexer/scanner will product tokens for parser.
I think lexer should only have one method to implement, that may be Token
next();


On Fri, Dec 23, 2011 at 6:04 PM, Christian <chwchw at gmx.de> wrote:

> Hello Li,
>
> great to hear that you want to use ANTLR! However, for now, I do not
> know whether it is the right choice because you do not say in detail
> what you want to do. Furthermore, you will probably not get information
> about how to define a specific interface. But if you have that
> interface, the community would be happy to help you in *using* ANTLR to
> *implement* your interface. You will admit that a forum about kitchen
> utensils is the wrong place to discuss recipes, won't you?
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From r.bitter.mailinglists at googlemail.com  Fri Dec 23 03:12:27 2011
From: r.bitter.mailinglists at googlemail.com (Raju Bitter)
Date: Fri, 23 Dec 2011 12:12:27 +0100
Subject: [antlr-interest] Fwd: De-emphasizing tree grammars?
In-Reply-To: <CAP7PoCf7FfA=cBZq+qKoLrJXYdofimb95krL2mdsm7VOQwnKFw@mail.gmail.com>
References: <02bb01ccbe6d$b3d7d180$1b877480$@net>
	<B9E58505-FDB9-41A5-BE06-355A2016C9E8@cs.usfca.edu>
	<CAP7PoCfgUgczw66URRaGL1z-eKF1hBszwWrn7k+peLvNaHBy8A@mail.gmail.com>
	<CAP7PoCf7FfA=cBZq+qKoLrJXYdofimb95krL2mdsm7VOQwnKFw@mail.gmail.com>
Message-ID: <CAE0rgyxxKar=2Q4nfC9YQqa72W6H6J+ebuvScqZgUTQKQa-Pww@mail.gmail.com>

Interesting, Galvin. Is there any document available describing the
approach, and the problems you ran into with the ANTLR syntax tree
approach?

And are you talking about these classes?
https://github.com/ceylon/ceylon-spec/tree/master/src/com/redhat/ceylon/compiler/typechecker/tree

Oh, and regarding Lisp and Java: Did you check Clojure?
http://clojure.org/ That's a Lisp written in Java. :-)

- Raju

On Fri, Dec 23, 2011 at 6:01 AM, Gavin King <gavin.king at gmail.com> wrote:
> Ooops, I meant to send this to the list rather than to Terence
> privately. Been happening to me a lot recently since gmail changed
> their UI. Grrr.
>
>
> ---------- Forwarded message ----------
> From: Gavin King <gavin.king at gmail.com>
> Date: Tue, Dec 20, 2011 at 3:51 PM
> Subject: Re: [antlr-interest] De-emphasizing tree grammars?
> To: Terence Parr <parrt at cs.usfca.edu>
>
>
> On Tue, Dec 20, 2011 at 3:25 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> The AST/ tree grammar mechanism also is something I've been pushing for 20 years
>> without success. ?I started out in the compilers world where you really do need an AST,
>> to avoid all of the noise of rule names inside your tree.
>
> So here's a little bit of feedback on that. I've used ANTLR very
> seriously on two projects now, first for the JPA-QL to SQL translation
> of the Hibernate ORM library, and now on the compiler and IDE for the
> Ceylon programming language.
>
> For the query translator in Hibernate, we used a 3-stage translator
> (parser/tree builder, followed by tree transformer, followed by
> renderer) where the second two grammars were tree grammars. This
> worked out somewhat well, though debugging was quite difficult and
> managing less 1-to-1 type transformations was very hard. We were
> successful, but I was left doubting that tree grammars had really made
> our life easier.
>
> For the Ceylon compiler, I did not even try to use a tree grammar,
> because for building a real compiler you want a proper typesafe syntax
> tree, not a bunch of untyped tuples. Java isn't lisp, and if you're
> trying to write lisp in Java you're unlikely to have much success ;-)
> I did initially try letting ANTLR build its untyped tree for
> subsequent translation to a typed syntax tree, but this approach was a
> failure for two reasons:
>
> 1. it's an additional unnecessary step in the pipeline, and, much more
> importantly,
> 2. ANTLR has an awful habit of just throwing away whole branches of
> its syntax tree when some rule fails to match far down the tree.
>
> In a real compiler, you *never* want to throw away things the
> programmer typed in. That's especially true if, as in our case, the
> compiler is also going to be the typechecker of your IDE. IDEs can
> simply never, ever throw away input, no matter how many syntax errors
> it has. Indeed, the hardest "bit" of building an IDE is doing stuff
> like auto-completion correctly while the user is typing, when you're
> almost guaranteed that the text is not well-formed.
>
> So basically my conclusion after all this is that ANTLRs tree stuff is
> pretty much a misfeature. It's cute for simpler problems, but once you
> get beyond hello world, you're better off just writing your own syntax
> tree using Java. Which is what I've done in Ceylon.
>
> Now, if ANTLR was able to produce a *typesafe* syntax tree, and not
> keep throwing bits of it away all the time, then that would be
> something really useful...
>
>
> --
> Gavin King
> gavin.king at gmail.com
> http://in.relation.to/Bloggers/Gavin
> http://ceylon-lang.org
> http://hibernate.org
> http://seamframework.org
>
>
> --
> Gavin King
> gavin.king at gmail.com
> http://in.relation.to/Bloggers/Gavin
> http://ceylon-lang.org
> http://hibernate.org
> http://seamframework.org
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jason at jasonosgood.com  Fri Dec 23 17:40:39 2011
From: jason at jasonosgood.com (Jason Osgood)
Date: Fri, 23 Dec 2011 17:40:39 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
Message-ID: <CAHcxkY8kavBs2jXBmuGMpga39Qir8MD9vyJZWOgkG8S1+bmdFg@mail.gmail.com>

Hi Gavin.


Read your Hibernate book. Respect.

re: Syntax trees.

What's a "typed syntax tree" is. From looking at your code, it's a
Java class hierarchy representing the parts of your language and you
build an object graph representing a program. Verse a parse tree, AST,
or DOM. Using your objects for "nodes" instead of untyped DOM or parse
nodes.

Right?

Just skimmed your Ceylon.g. I totally forgot about that strategy
(using ANTLR rules with parameters and return values).

I've done that. I didn't like it. Instead of stitching an object graph
together with inlined Java, I opted instead to use a Builder. Method
calls and an internal stack instead of "new" and assignment. Wasn't
much better.

I very much dislike hybrid languages. Stuff like inlining Java in
one's grammar, C#'s LINQ, template languages. I have a hard enough
time understanding one language at a time.

Any way.

Next time, for my ARON project, I'll subclass DebugEventListener and
move all that bookkeeping there. Builders are still complicated, true.
That's just the nature of Builders. But at least the Builder and
grammar are distinct.

One benefit I anticipate is reduced cost of change and testability. I
plan to use gunit (or something). Which (I think) would be more
difficult with inlined Java code gumming up the works.

I DON'T build a "typed syntax tree" in my fado project for a couple
reasons. My pathetic efforts to build a generic SQL object model were
easily defeated. What I really needed to do was find and replace the
interesting bits. By leaving the parse tree in place, I was able to
reemit the input stream with just the interesting bits changes,
preserving formatting, comments, etc.

The Ceylon and fado use cases are very different. But I think moving
inlined Java code out of our grammars is a positive step forward.

Which is why I posted my original question. Debug event listener hooks
are only generated with a command switch. Terence didn't anticipate
they'd be used like this.

Thinking about it, I should probably mention:

ANTLR's DebugEventListener is kinda like a SAX EventListener. But much
better. Partially because all things XML, especially SAX (and
namespaces, and angle brackets, and...), are a terrible bight on the
Earth and should be eradicated with prejudice. But mostly because it's
direct and concise. If some lost soul wants a SAX event source, let
them write an adapter.


Cheers, Jason

From asicaddress at gmail.com  Fri Dec 23 19:09:03 2011
From: asicaddress at gmail.com (A Z)
Date: Sat, 24 Dec 2011 09:09:03 +0600
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
Message-ID: <CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>

Hi Richard,

  I see about 140:1 for the ratio of memory use to input size on a 64-bit
system. This is after I hacked commontoken to remove most of the function
pointers, which halved the size of the tokens. I didn't investigate any
further as I recall an email thread about ANTLR 4 indicating it would use
8-byte tokens instead of the 200+ byte tokens 3.4 uses.


Looks like it may only be for C#.
http://markmail.org/message/eggfcjt3a6qdzkvc

Ad


On Fri, Dec 23, 2011 at 10:00 AM, Richard Gildea <rgildea at gmail.com> wrote:

> Hi,
>
> We have been successfully using antlr in the form of the C target for some
> time, however we have recently noticed that the memory consumption can be
> quite large - up to 150 times the size of the input file. Is this factor of
> ~150 to be expected, or does it indicate that we may be doing something
> wrong? For the vast majority of possible inputs this does not cause a
> problem, however some input files can be as large as 0.5 Gb, giving a peak
> memory usage of 75 Gb - not exactly feasible on most machines!
>
> Does anyone have any examples of using a custom lexer that provides a token
> buffer rather than storing all tokens in memory?
>
> Cheers,
>
> Richard
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Fri Dec 23 19:38:47 2011
From: kferrio at gmail.com (Kyle Ferrio)
Date: Fri, 23 Dec 2011 20:38:47 -0700
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <CAHcxkY8kavBs2jXBmuGMpga39Qir8MD9vyJZWOgkG8S1+bmdFg@mail.gmail.com>
References: <CAHcxkY8kavBs2jXBmuGMpga39Qir8MD9vyJZWOgkG8S1+bmdFg@mail.gmail.com>
Message-ID: <CAAfeETpnQfvQQE36ZfwkrcQG8qR0rQ_VtGGngOyJ3TJ_jyqu4A@mail.gmail.com>

Delurking...

I will probably sound like a crank, but everything good starts with an itch.

I've said this before, but you said it best:  "I very much dislike hybrid
languages."

I recognize that this message may not find much quarter in a world in which
inlining php or javascript in html is actually considered reasonable.
Inlining impairs readability and may increase the  complexity (cost) of
testing.  And an even greater cost of inlining is the loss of portability
of grammars to new targets.  Wouldn't it be nice to write and test a
grammar, say, for an SQL dialect exactly once and know that it can be
retargeted for multiple runtimes in constant time?  Yes, but avoiding
inlining turns out to be a lot harder than it sounds.  But it is
seductive...

A well defined Neutral Implementation Pattern Language, viz. a
pseudo-target could be a useful compromise with the following benefits: (1)
enabling target-agnostic validation; (2) accelerating simultaneous,
synchronous development of both antlr and targets (a major problem
currently imho) by providing a thin shim targeted by antlr and known in
advance by authors of target generators; and (3) promoting reusuability and
readability of grammars via abstraction of the implementation.

Note that adding a neutral pseudotarget is completely compatible with
existing inlined "native" targets.  Any of us could in principle create a
pseudotarget now, given time and insight...I'm seriously short of both
right now but am looking forward to maybe thinking about this once antlr v4
lands.
 On Dec 23, 2011 6:40 PM, "Jason Osgood" <jason at jasonosgood.com> wrote:

> Hi Gavin.
>
>
> Read your Hibernate book. Respect.
>
> re: Syntax trees.
>
> What's a "typed syntax tree" is. From looking at your code, it's a
> Java class hierarchy representing the parts of your language and you
> build an object graph representing a program. Verse a parse tree, AST,
> or DOM. Using your objects for "nodes" instead of untyped DOM or parse
> nodes.
>
> Right?
>
> Just skimmed your Ceylon.g. I totally forgot about that strategy
> (using ANTLR rules with parameters and return values).
>
> I've done that. I didn't like it. Instead of stitching an object graph
> together with inlined Java, I opted instead to use a Builder. Method
> calls and an internal stack instead of "new" and assignment. Wasn't
> much better.
>
> I very much dislike hybrid languages. Stuff like inlining Java in
> one's grammar, C#'s LINQ, template languages. I have a hard enough
> time understanding one language at a time.
>
> Any way.
>
> Next time, for my ARON project, I'll subclass DebugEventListener and
> move all that bookkeeping there. Builders are still complicated, true.
> That's just the nature of Builders. But at least the Builder and
> grammar are distinct.
>
> One benefit I anticipate is reduced cost of change and testability. I
> plan to use gunit (or something). Which (I think) would be more
> difficult with inlined Java code gumming up the works.
>
> I DON'T build a "typed syntax tree" in my fado project for a couple
> reasons. My pathetic efforts to build a generic SQL object model were
> easily defeated. What I really needed to do was find and replace the
> interesting bits. By leaving the parse tree in place, I was able to
> reemit the input stream with just the interesting bits changes,
> preserving formatting, comments, etc.
>
> The Ceylon and fado use cases are very different. But I think moving
> inlined Java code out of our grammars is a positive step forward.
>
> Which is why I posted my original question. Debug event listener hooks
> are only generated with a command switch. Terence didn't anticipate
> they'd be used like this.
>
> Thinking about it, I should probably mention:
>
> ANTLR's DebugEventListener is kinda like a SAX EventListener. But much
> better. Partially because all things XML, especially SAX (and
> namespaces, and angle brackets, and...), are a terrible bight on the
> Earth and should be eradicated with prejudice. But mostly because it's
> direct and concise. If some lost soul wants a SAX event source, let
> them write an adapter.
>
>
> Cheers, Jason
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From james_ladd at hotmail.com  Fri Dec 23 20:03:07 2011
From: james_ladd at hotmail.com (James Ladd)
Date: Sat, 24 Dec 2011 15:03:07 +1100
Subject: [antlr-interest] Want PAID Antlr work?
In-Reply-To: <BAY149-w29EC1E292D0DB3D4B1BAE3EDB80@phx.gbl>
References: <mailman.1.1301166001.26373.antlr-interest@antlr.org>,
	<BAY149-w29EC1E292D0DB3D4B1BAE3EDB80@phx.gbl>
Message-ID: <BAY149-W575B1B08676E0B58126641EDA80@phx.gbl>


I hope this isnt too trivial to post to the list but im wondering how to change
my rule to capture nested quotes?

STRING_LITERAL: '\'' .* '\'';

A string can be anything enclosed in single quotes. However I also need to cater for 
a nested double quote. Eg: 'this string has a '' in it.'

Rgs, James.
 		 	   		  

From gavin.king at gmail.com  Fri Dec 23 20:39:33 2011
From: gavin.king at gmail.com (Gavin King)
Date: Fri, 23 Dec 2011 22:39:33 -0600
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <CAHcxkY8kavBs2jXBmuGMpga39Qir8MD9vyJZWOgkG8S1+bmdFg@mail.gmail.com>
References: <CAHcxkY8kavBs2jXBmuGMpga39Qir8MD9vyJZWOgkG8S1+bmdFg@mail.gmail.com>
Message-ID: <CAP7PoCfB8aPwP0pkiSg1hc=8FwPy35GzqEO0a1Y_DH_052udfQ@mail.gmail.com>

On Fri, Dec 23, 2011 at 7:40 PM, Jason Osgood <jason at jasonosgood.com> wrote:

> What's a "typed syntax tree" is. From looking at your code, it's a
> Java class hierarchy representing the parts of your language and you
> build an object graph representing a program. Verse a parse tree, AST,
> or DOM. Using your objects for "nodes" instead of untyped DOM or parse
> nodes.
>
> Right?

Right, I mean where you have a Java class that represents each kind of
node in the tree (i.e. each kind of syntactic construct). So your
compiler is composed of visitors that work with a strongly-typed
representation of the syntax tree.

> Just skimmed your Ceylon.g. I totally forgot about that strategy
> (using ANTLR rules with parameters and return values).
>
> I've done that. I didn't like it. Instead of stitching an object graph
> together with inlined Java, I opted instead to use a Builder. Method
> calls and an internal stack instead of "new" and assignment. Wasn't
> much better.

A Builder might work out a little cleaner, I'm not sure. Truth is it
didn't ever occur to me.  To be honest I think it would probably wind
up about the same.

(I was just basically following the same model that ANTLR uses for its
non-typesafe AST building.)

I'm not trying to hold up my grammar as some kind of model of clean
code. The best I can say is that it works and that it works really
well for non-wellformed input, mainly as a result of me having
painstakingly coded in a whole lot of special cases to improve on
ANTLRs default error recovery, which is often not really good enough
for what you need in an IDE.

> I very much dislike hybrid languages. Stuff like inlining Java in
> one's grammar, C#'s LINQ, template languages. I have a hard enough
> time understanding one language at a time.

Trust me I hate them way more than you ;-) The point I was trying to
make is that I wish that ANTLR could write that tree-building code for
me, instead of me having to handcode a lot of tedious stuff in Java
code embedded in a text file where I don't have any kind of error
reporting or autocompletion or any of the other stuff I'm totally
dependent on for the last ten years...

> Any way.
>
> Next time, for my ARON project, I'll subclass DebugEventListener and
> move all that bookkeeping there. Builders are still complicated, true.
> That's just the nature of Builders.

Hah! It would not have occurred to me to use an interface called
DebugEventListener to implement my tree building logic! Is that
something people do? So it gives you more like a SAX-style callback
API to build your tree? That sounds like it could work out much nicer.

> But at least the Builder and grammar are distinct.

Right, that would be ideal.

I was more thinking along the lines of I wish ANTLR would be able to
build the tree for me, but out of typesafe node classes, and without
the throwing-away-bits-of-the-tree behaviour that caused me so many
problems. But perhaps a SAX-style API would just be a simpler, more
robust solution.


> I DON'T build a "typed syntax tree" in my fado project for a couple
> reasons. My pathetic efforts to build a generic SQL object model were
> easily defeated. What I really needed to do was find and replace the
> interesting bits. By leaving the parse tree in place, I was able to
> reemit the input stream with just the interesting bits changes,
> preserving formatting, comments, etc.

Yes, in my original mail I was sort of trying to distinguish between
something like JPAQL->SQL translation where you're essentially doing a
minimal sort of transformation and a "real" compiler where you're
doing a whole bunch of complex typechecking and then finally some
quite sophisticated transformation at the end, where the output
artifacts don't have a strict 1-1 correspondence to the input
artifacts. This is the kind of thing you want to do completely in Java
land with a typesafe syntax tree.

> The Ceylon and fado use cases are very different. But I think moving
> inlined Java code out of our grammars is a positive step forward.

Definitely.

> Which is why I posted my original question. Debug event listener hooks
> are only generated with a command switch. Terence didn't anticipate
> they'd be used like this.

Ah right. Figures ;-)

> Thinking about it, I should probably mention:
>
> ANTLR's DebugEventListener is kinda like a SAX EventListener.

Haha, I had not read to the end when I wrote the comments further up.

So I think you might be right, and that it might be *much* better for
ANTLR to provide a SAX-style callback API, where we can write Java
code using all the benefits of a Java IDE, than the embedded actions
that we have to use today. That definitely gels with all the
experience that I have had with ANTLR. It would definitely be an
easier API to get right than the thing I was suggesting.

If I would have had an API like this available to me when I was
working on the Ceylon grammar, I think it's definitely what I would
have used.


-- 
Gavin King
gavin.king at gmail.com
http://in.relation.to/Bloggers/Gavin
http://ceylon-lang.org
http://hibernate.org
http://seamframework.org

From jokeserver at gmail.com  Fri Dec 23 21:49:13 2011
From: jokeserver at gmail.com (Benjamin S Wolf)
Date: Fri, 23 Dec 2011 21:49:13 -0800
Subject: [antlr-interest] Composite Grammars
Message-ID: <CAN51Nt4UMEOxh9+OckqK3HV5nSPW-X4M+FsY0NtKhUcaOVAtbg@mail.gmail.com>

I've gotten some very strange errors while trying to make a composite
grammar, and I think I've figured out why and/or a way around it. I'm
posting this because the error messages were not that helpful on their
own, and I had to fool around for a while with a minimal test case
until I found a way out of the errors.

I have a composite grammar G, which imports two disjoint lexer
grammars A and B, and a parser grammar C (which only requires the
tokens from A). Using antlr3.4 on G with varying subsequent changes
gives one of the following sets of errors, regardless of output option
or language.

1. G has no rules.

2. parser rule ... not allowed in lexer, lexer rule ... not allowed in
parser, etc.

3. java.lang.ClassCastException: org.antlr.runtime.tree.CommonTree
cannot be cast to org.antlr.tool.GrammarAST.

The short answer (before I go into details below) is that a) G needs a
parser rule, not just lexer rules, and b) G should only import one
lexer grammar, and the others should be imported by that one.
Strangely, b) does not apply to parser grammars, as I added a second
parser grammar D (dependent on both A and B) to test, and G is fine*
either way.

The long story: When I encountered (1), I added a dummy lexer rule
"COMMA : ',' ;". This cured G's lack of rules but now antlr3.4 was
giving me (2), where it seemed that antlr3 thought I was putting all
of A's lexer rules in C and all of C's parser rules in A (and B,
etc.). Since I had no rules dependent on B, I removed it from being
imported. With G importing only A and C, I was now getting (3). I
added the rule "comma : COMMA ;" to G and now antlr3 completed
successfully (and still did when I folded these two rules together
into "comma : ',' ;"). So I added B back to the import list from G,
and it gave me (2) again. But removing B from G's import list and
making A import it made it work fine.

So antlr3 successfully produces a recognizer for G when G imports A,
C, and D, where A imports B, or when G imports B, C, and D, and B
imports A**.

I am not sure of the root reason behind the inability of the top level
of a composite grammar to import two lexer grammars (whether a design
decision or bug, eg.) as none of the documentation I could find on
composite grammars indicates either that this is the case or should be
otherwise. I would have liked a better error message in place of (2),
at least for the case where G had a lexer rule but not a parser rule,
because it would have saved a little bit of stumbling around.

*By "fine" I mean antlr3 finishes successfully. But if G doesn't
import B, then the generated lexer can't produce tokens defined in B
and so the rules in D can't be reached.

**Unless you're like me, and have an unfortunately large lexer grammar
B, which causes antlr3 to run out of stack space if G imports A
imports B but not if G imports B imports A.

From bkiers at gmail.com  Fri Dec 23 23:20:32 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 24 Dec 2011 08:20:32 +0100
Subject: [antlr-interest] Want PAID Antlr work?
In-Reply-To: <BAY149-W575B1B08676E0B58126641EDA80@phx.gbl>
References: <mailman.1.1301166001.26373.antlr-interest@antlr.org>
	<BAY149-w29EC1E292D0DB3D4B1BAE3EDB80@phx.gbl>
	<BAY149-W575B1B08676E0B58126641EDA80@phx.gbl>
Message-ID: <CAOrgODaDO7QgazvgjZz2jGYjN9Purg+-FYJWKwMUzWoeOpBZCQ@mail.gmail.com>

Hi James,

Try this:

STRING_LITERAL: '\'' (~'\'' | '\'\'')* '\'';

Note that the string above may contain line breaks. If you don't want that,
do:

STRING_LITERAL: '\'' (~('\'' | '\r' | '\n') | '\'\'')* '\'';

Regards,

Bart.


On Sat, Dec 24, 2011 at 5:03 AM, James Ladd <james_ladd at hotmail.com> wrote:

>
> I hope this isnt too trivial to post to the list but im wondering how to
> change
> my rule to capture nested quotes?
>
> STRING_LITERAL: '\'' .* '\'';
>
> A string can be anything enclosed in single quotes. However I also need to
> cater for
> a nested double quote. Eg: 'this string has a '' in it.'
>
> Rgs, James.
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Sat Dec 24 12:11:13 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 24 Dec 2011 12:11:13 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
Message-ID: <D977C814-4754-48F7-BEB1-88DD9798D137@cs.usfca.edu>

Hi gang! Thanks to George, Gavin, Kyle, Jason, et al for bringing up this topic. First, let me point out some blog entries that I have that describe the new parser listener stuff:

http://www.antlr.org/wiki/display/~admin/2011/09/08/Sample+v4+generated+visitor

http://www.antlr.org/wiki/display/~admin/2011/09/05/Auto+tree+construction+and+visitors

I recently had the opportunity to examine some software that made extensive use of visitors over a bytecode stream to not only collect information but to translate into another form. I decided to experiment with ANTLR v4's implementation. I was able to collapse all of my tree grammars into a single tree grammar that triggered listener events like SAX. (I did not alter the fact that my parser built an AST not parse tree.) What I ended up with is a tree grammar that sent high-level events like "found rule definition", "found token reference", and so on.   It became extremely easy to, say, make another pass over the tree to grab information.  As I looked at the event listener mechanism, I realized that: *a parse tree would give me the exact same thing without a tree grammar and the parse tree can be automatically generated.* My bias towards compiler style AST expression trees may have blinded me to a simple truth. um?for 20 years.

With a single decision, I had stripped away 2 large pieces of work: AST specification and tree grammar specification. The only question is, is it useful? Well, first, why do we build trees at all? The answer is we sometimes need to process information in a non-sequential   manner and sometimes we need to make multiple passes over the tree. For example, we might want to go find all symbol definitions and then process all symbol references.  Neither requirement says we have to have any particular kind of tree.

As Gavin points out, getting error nodes into the AST to represent error recovery token consumption is not well done in v3. In v4, it doesn't bother since it puts all of that error information in the parse tree.

I will also point out that it's really hard to get the original input sequence back from an AST, particularly if you have hidden tokens. Parse trees in contrast make this very easy. Parse trees are just much more natural for use with IDEs.

Gavin asks about a type safe syntax tree. I believe v4 will provide this because there is a node type for each rule in the grammar, or optionally each alternative in the grammar. The listener interface generates enter and exit rule events for each type. For example,

public interface TListener extends ParseTreeListener {
    void enterRule(TParser.ifstatContext ctx);
    void exitRule(TParser.ifstatContext ctx);
?
}

The context object coincidentally is also where I store all parameters, locals, return values, and labels etc. That means that listener methods have access to the complete context of the rule invocation. (In ifstatContext, you'll see the usual double dispatch methods that trigger appropriate event listener.)

If you don't want to use the listener interface, you have the entire parse tree so you can treat it like a DOM thingie if you want; e.g., you can build your own visitors.

You can turn this feature on without regenerating anything. just turn on a runtime flag and ANTLR will stitch the rule invocation contexts together to form a parse tree.

Nothing is lost. tokens consumed or missing during the parse, appear in the parse tree.  For example, here are 2 parse trees associated with extra tokens and missing tokens:




These were generated by calling inspect on the root of the parse tree--a GUI pops up; some sample code:

ParserRuleContext tree = parser.prog();
tree.save(parser, "/tmp/t.ps"); // Generate postscript:
tree.inspect(parser); // or view in dialog box

@Jason: yep, I am basically following the approach you have. You no longer have to put actions in the grammar, because the listener methods have access to all labels and other attributes of each rule invocation.   If you take a look at this new mechanism, I think you'll agree that it gives you the super simplicity of the SAX listener you want.

I like my listener event mechanism because the listener methods do not have to include the boilerplate code to visit the children. all you do is respond to the event.  Listener methods don't have a return value because any values needed by processing up the tree, can simply reference the rule return values which are also stored in the context object.

As Kyle points out, a big benefit of this automatic parse tree construction and listener event mechanism is that it renders grammars 100% reusable and retargetable to any target programming language. (Sam Harwell has convinced me to include things like skip in setting channels in the lexer with special syntax rather than actions? again we get retargeting).

Concerning the neutral imperative language, which we discussed before, I love the idea but I'm not sure how much this helps us. I think that the biggest problem in creating a target is not the code generation templates, which are much improved in v4, but rather the largish library. Of course, if we strip out all of the AST stuff in the tree grammar stuff, it's actually pretty simple ;)

Oh,  let me also mention that I have implemented a twist on Jim Idle's magic sync function to really improve error correction. In a nutshell, it tries extremely hard to stay within the current rule and recover in line instead of punting and consuming until it sees a token in the follow set.

Gavin says:

> I was more thinking along the lines of I wish ANTLR would be able to
> build the tree for me, but out of typesafe node classes, and without
> the throwing-away-bits-of-the-tree behaviour that caused me so many
> problems. But perhaps a SAX-style API would just be a simpler, more
> robust solution.

Ask and ye shall receive. What I have built is exactly what you asked for. Type safe, automatically constructed, DOM or SAX model.

sorry for the stream of consciousness? just core dumping so I can get back to work ;) I apologize for my extreme absence on the mailing lists? last semester kicked my ass and I'm now trying to catch up on research.

Ter


From jokeserver at gmail.com  Sat Dec 24 17:44:12 2011
From: jokeserver at gmail.com (Benjamin S Wolf)
Date: Sat, 24 Dec 2011 17:44:12 -0800
Subject: [antlr-interest] Composite Grammars
In-Reply-To: <CAN51Nt4UMEOxh9+OckqK3HV5nSPW-X4M+FsY0NtKhUcaOVAtbg@mail.gmail.com>
References: <CAN51Nt4UMEOxh9+OckqK3HV5nSPW-X4M+FsY0NtKhUcaOVAtbg@mail.gmail.com>
Message-ID: <CAN51Nt7zQTP9QCN6GptjWtO1QZp5fX8Ej2B3jExQCuN7=g9zFg@mail.gmail.com>

Actually, there are still issues here. Namely GLexer is trying to use
both A and B directly as delegates, but never initializes the A
delegate for G_B_A. G_B does, which leads me to believe that this can
be solved in the constructor by adding "gA = gB.gA" in the Java case,
"self.gA = self.gB.gA" for Python, "ctx->gA = ctx->gB->gA" for C, etc.
But then again G_B is delegating to G_B_A; why then does GLexer want
to delegate directly to G_B_A?

(Attached GLexer.java and the full grammar in G.zip.)

On Fri, Dec 23, 2011 at 9:49 PM, Benjamin S Wolf <jokeserver at gmail.com> wrote:
> I've gotten some very strange errors while trying to make a composite
> grammar, and I think I've figured out why and/or a way around it. I'm
> posting this because the error messages were not that helpful on their
> own, and I had to fool around for a while with a minimal test case
> until I found a way out of the errors.
>
> I have a composite grammar G, which imports two disjoint lexer
> grammars A and B, and a parser grammar C (which only requires the
> tokens from A). Using antlr3.4 on G with varying subsequent changes
> gives one of the following sets of errors, regardless of output option
> or language.
>
> 1. G has no rules.
>
> 2. parser rule ... not allowed in lexer, lexer rule ... not allowed in
> parser, etc.
>
> 3. java.lang.ClassCastException: org.antlr.runtime.tree.CommonTree
> cannot be cast to org.antlr.tool.GrammarAST.
>
> The short answer (before I go into details below) is that a) G needs a
> parser rule, not just lexer rules, and b) G should only import one
> lexer grammar, and the others should be imported by that one.
> Strangely, b) does not apply to parser grammars, as I added a second
> parser grammar D (dependent on both A and B) to test, and G is fine*
> either way.
>
> The long story: When I encountered (1), I added a dummy lexer rule
> "COMMA : ',' ;". This cured G's lack of rules but now antlr3.4 was
> giving me (2), where it seemed that antlr3 thought I was putting all
> of A's lexer rules in C and all of C's parser rules in A (and B,
> etc.). Since I had no rules dependent on B, I removed it from being
> imported. With G importing only A and C, I was now getting (3). I
> added the rule "comma : COMMA ;" to G and now antlr3 completed
> successfully (and still did when I folded these two rules together
> into "comma : ',' ;"). So I added B back to the import list from G,
> and it gave me (2) again. But removing B from G's import list and
> making A import it made it work fine.
>
> So antlr3 successfully produces a recognizer for G when G imports A,
> C, and D, where A imports B, or when G imports B, C, and D, and B
> imports A**.
>
> I am not sure of the root reason behind the inability of the top level
> of a composite grammar to import two lexer grammars (whether a design
> decision or bug, eg.) as none of the documentation I could find on
> composite grammars indicates either that this is the case or should be
> otherwise. I would have liked a better error message in place of (2),
> at least for the case where G had a lexer rule but not a parser rule,
> because it would have saved a little bit of stumbling around.
>
> *By "fine" I mean antlr3 finishes successfully. But if G doesn't
> import B, then the generated lexer can't produce tokens defined in B
> and so the rules in D can't be reached.
>
> **Unless you're like me, and have an unfortunately large lexer grammar
> B, which causes antlr3 to run out of stack space if G imports A
> imports B but not if G imports B imports A.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: GLexer.java
Type: application/octet-stream
Size: 3721 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20111224/3b83b18c/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: G.zip
Type: application/zip
Size: 916 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20111224/3b83b18c/attachment.zip 

From james_ladd at hotmail.com  Sun Dec 25 13:58:56 2011
From: james_ladd at hotmail.com (James Ladd)
Date: Mon, 26 Dec 2011 08:58:56 +1100
Subject: [antlr-interest] Grammar hints?
In-Reply-To: <mailman.1.1324843201.3842.antlr-interest@antlr.org>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>
Message-ID: <BAY149-W84A322E0445B8ED6F43E6EDA90@phx.gbl>

I googles antler grammar hints but I can't find the description of how to 
Hint to antler which path to take. How do I do this?

> From: antlr-interest-request at antlr.org
> Subject: antlr-interest Digest, Vol 85, Issue 20
> To: antlr-interest at antlr.org
> Date: Sun, 25 Dec 2011 12:00:01 -0800
> 
> Send antlr-interest mailing list submissions to
> 	antlr-interest at antlr.org
> 
> To subscribe or unsubscribe via the World Wide Web, visit
> 	http://www.antlr.org/mailman/listinfo/antlr-interest
> or, via email, send a message with subject or body 'help' to
> 	antlr-interest-request at antlr.org
> 
> You can reach the person managing the list at
> 	antlr-interest-owner at antlr.org
> 
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of antlr-interest digest..."
> 
> 
> Today's Topics:
> 
>    1. Re: De-emphasizing tree grammars? (Terence Parr)
>    2. Re: Composite Grammars (Benjamin S Wolf)
> 
> 
> ----------------------------------------------------------------------
> 
> Message: 1
> Date: Sat, 24 Dec 2011 12:11:13 -0800
> From: Terence Parr <parrt at cs.usfca.edu>
> Subject: Re: [antlr-interest] De-emphasizing tree grammars?
> To: antlr-interest Interest <antlr-interest at antlr.org>
> Cc: "George S. Cowan" <cowang at comcast.net>,	Jason Osgood
> 	<jason at jasonosgood.com>
> Message-ID: <D977C814-4754-48F7-BEB1-88DD9798D137 at cs.usfca.edu>
> Content-Type: text/plain;	charset=windows-1252
> 
> Hi gang! Thanks to George, Gavin, Kyle, Jason, et al for bringing up this topic. First, let me point out some blog entries that I have that describe the new parser listener stuff:
> 
> http://www.antlr.org/wiki/display/~admin/2011/09/08/Sample+v4+generated+visitor
> 
> http://www.antlr.org/wiki/display/~admin/2011/09/05/Auto+tree+construction+and+visitors
> 
> I recently had the opportunity to examine some software that made extensive use of visitors over a bytecode stream to not only collect information but to translate into another form. I decided to experiment with ANTLR v4's implementation. I was able to collapse all of my tree grammars into a single tree grammar that triggered listener events like SAX. (I did not alter the fact that my parser built an AST not parse tree.) What I ended up with is a tree grammar that sent high-level events like "found rule definition", "found token reference", and so on.   It became extremely easy to, say, make another pass over the tree to grab information.  As I looked at the event listener mechanism, I realized that: *a parse tree would give me the exact same thing without a tree grammar and the parse tree can be automatically generated.* My bias towards compiler style AST expression trees may have blinded me to a simple truth. um?for 20 years.
> 
> With a single decision, I had stripped away 2 large pieces of work: AST specification and tree grammar specification. The only question is, is it useful? Well, first, why do we build trees at all? The answer is we sometimes need to process information in a non-sequential   manner and sometimes we need to make multiple passes over the tree. For example, we might want to go find all symbol definitions and then process all symbol references.  Neither requirement says we have to have any particular kind of tree.
> 
> As Gavin points out, getting error nodes into the AST to represent error recovery token consumption is not well done in v3. In v4, it doesn't bother since it puts all of that error information in the parse tree.
> 
> I will also point out that it's really hard to get the original input sequence back from an AST, particularly if you have hidden tokens. Parse trees in contrast make this very easy. Parse trees are just much more natural for use with IDEs.
> 
> Gavin asks about a type safe syntax tree. I believe v4 will provide this because there is a node type for each rule in the grammar, or optionally each alternative in the grammar. The listener interface generates enter and exit rule events for each type. For example,
> 
> public interface TListener extends ParseTreeListener {
>     void enterRule(TParser.ifstatContext ctx);
>     void exitRule(TParser.ifstatContext ctx);
> ?
> }
> 
> The context object coincidentally is also where I store all parameters, locals, return values, and labels etc. That means that listener methods have access to the complete context of the rule invocation. (In ifstatContext, you'll see the usual double dispatch methods that trigger appropriate event listener.)
> 
> If you don't want to use the listener interface, you have the entire parse tree so you can treat it like a DOM thingie if you want; e.g., you can build your own visitors.
> 
> You can turn this feature on without regenerating anything. just turn on a runtime flag and ANTLR will stitch the rule invocation contexts together to form a parse tree.
> 
> Nothing is lost. tokens consumed or missing during the parse, appear in the parse tree.  For example, here are 2 parse trees associated with extra tokens and missing tokens:
> 
> 
> 
> 
> These were generated by calling inspect on the root of the parse tree--a GUI pops up; some sample code:
> 
> ParserRuleContext tree = parser.prog();
> tree.save(parser, "/tmp/t.ps"); // Generate postscript:
> tree.inspect(parser); // or view in dialog box
> 
> @Jason: yep, I am basically following the approach you have. You no longer have to put actions in the grammar, because the listener methods have access to all labels and other attributes of each rule invocation.   If you take a look at this new mechanism, I think you'll agree that it gives you the super simplicity of the SAX listener you want.
> 
> I like my listener event mechanism because the listener methods do not have to include the boilerplate code to visit the children. all you do is respond to the event.  Listener methods don't have a return value because any values needed by processing up the tree, can simply reference the rule return values which are also stored in the context object.
> 
> As Kyle points out, a big benefit of this automatic parse tree construction and listener event mechanism is that it renders grammars 100% reusable and retargetable to any target programming language. (Sam Harwell has convinced me to include things like skip in setting channels in the lexer with special syntax rather than actions? again we get retargeting).
> 
> Concerning the neutral imperative language, which we discussed before, I love the idea but I'm not sure how much this helps us. I think that the biggest problem in creating a target is not the code generation templates, which are much improved in v4, but rather the largish library. Of course, if we strip out all of the AST stuff in the tree grammar stuff, it's actually pretty simple ;)
> 
> Oh,  let me also mention that I have implemented a twist on Jim Idle's magic sync function to really improve error correction. In a nutshell, it tries extremely hard to stay within the current rule and recover in line instead of punting and consuming until it sees a token in the follow set.
> 
> Gavin says:
> 
> > I was more thinking along the lines of I wish ANTLR would be able to
> > build the tree for me, but out of typesafe node classes, and without
> > the throwing-away-bits-of-the-tree behaviour that caused me so many
> > problems. But perhaps a SAX-style API would just be a simpler, more
> > robust solution.
> 
> Ask and ye shall receive. What I have built is exactly what you asked for. Type safe, automatically constructed, DOM or SAX model.
> 
> sorry for the stream of consciousness? just core dumping so I can get back to work ;) I apologize for my extreme absence on the mailing lists? last semester kicked my ass and I'm now trying to catch up on research.
> 
> Ter
> 
> 
> 
> ------------------------------
> 
> Message: 2
> Date: Sat, 24 Dec 2011 17:44:12 -0800
> From: Benjamin S Wolf <jokeserver at gmail.com>
> Subject: Re: [antlr-interest] Composite Grammars
> To: antlr-interest at antlr.org
> Message-ID:
> 	<CAN51Nt7zQTP9QCN6GptjWtO1QZp5fX8Ej2B3jExQCuN7=g9zFg at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> Actually, there are still issues here. Namely GLexer is trying to use
> both A and B directly as delegates, but never initializes the A
> delegate for G_B_A. G_B does, which leads me to believe that this can
> be solved in the constructor by adding "gA = gB.gA" in the Java case,
> "self.gA = self.gB.gA" for Python, "ctx->gA = ctx->gB->gA" for C, etc.
> But then again G_B is delegating to G_B_A; why then does GLexer want
> to delegate directly to G_B_A?
> 
> (Attached GLexer.java and the full grammar in G.zip.)
> 
> On Fri, Dec 23, 2011 at 9:49 PM, Benjamin S Wolf <jokeserver at gmail.com> wrote:
> > I've gotten some very strange errors while trying to make a composite
> > grammar, and I think I've figured out why and/or a way around it. I'm
> > posting this because the error messages were not that helpful on their
> > own, and I had to fool around for a while with a minimal test case
> > until I found a way out of the errors.
> >
> > I have a composite grammar G, which imports two disjoint lexer
> > grammars A and B, and a parser grammar C (which only requires the
> > tokens from A). Using antlr3.4 on G with varying subsequent changes
> > gives one of the following sets of errors, regardless of output option
> > or language.
> >
> > 1. G has no rules.
> >
> > 2. parser rule ... not allowed in lexer, lexer rule ... not allowed in
> > parser, etc.
> >
> > 3. java.lang.ClassCastException: org.antlr.runtime.tree.CommonTree
> > cannot be cast to org.antlr.tool.GrammarAST.
> >
> > The short answer (before I go into details below) is that a) G needs a
> > parser rule, not just lexer rules, and b) G should only import one
> > lexer grammar, and the others should be imported by that one.
> > Strangely, b) does not apply to parser grammars, as I added a second
> > parser grammar D (dependent on both A and B) to test, and G is fine*
> > either way.
> >
> > The long story: When I encountered (1), I added a dummy lexer rule
> > "COMMA : ',' ;". This cured G's lack of rules but now antlr3.4 was
> > giving me (2), where it seemed that antlr3 thought I was putting all
> > of A's lexer rules in C and all of C's parser rules in A (and B,
> > etc.). Since I had no rules dependent on B, I removed it from being
> > imported. With G importing only A and C, I was now getting (3). I
> > added the rule "comma : COMMA ;" to G and now antlr3 completed
> > successfully (and still did when I folded these two rules together
> > into "comma : ',' ;"). So I added B back to the import list from G,
> > and it gave me (2) again. But removing B from G's import list and
> > making A import it made it work fine.
> >
> > So antlr3 successfully produces a recognizer for G when G imports A,
> > C, and D, where A imports B, or when G imports B, C, and D, and B
> > imports A**.
> >
> > I am not sure of the root reason behind the inability of the top level
> > of a composite grammar to import two lexer grammars (whether a design
> > decision or bug, eg.) as none of the documentation I could find on
> > composite grammars indicates either that this is the case or should be
> > otherwise. I would have liked a better error message in place of (2),
> > at least for the case where G had a lexer rule but not a parser rule,
> > because it would have saved a little bit of stumbling around.
> >
> > *By "fine" I mean antlr3 finishes successfully. But if G doesn't
> > import B, then the generated lexer can't produce tokens defined in B
> > and so the rules in D can't be reached.
> >
> > **Unless you're like me, and have an unfortunately large lexer grammar
> > B, which causes antlr3 to run out of stack space if G imports A
> > imports B but not if G imports B imports A.
> -------------- next part --------------
> A non-text attachment was scrubbed...
> Name: GLexer.java
> Type: application/octet-stream
> Size: 3721 bytes
> Desc: not available
> Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20111224/3b83b18c/attachment-0001.obj 
> -------------- next part --------------
> A non-text attachment was scrubbed...
> Name: G.zip
> Type: application/zip
> Size: 916 bytes
> Desc: not available
> Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20111224/3b83b18c/attachment-0001.zip 
> 
> ------------------------------
> 
> _______________________________________________
> antlr-interest mailing list
> antlr-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/antlr-interest
> 
> End of antlr-interest Digest, Vol 85, Issue 20
> **********************************************
 		 	   		  

From jokeserver at gmail.com  Sun Dec 25 17:11:30 2011
From: jokeserver at gmail.com (Benjamin S Wolf)
Date: Sun, 25 Dec 2011 17:11:30 -0800
Subject: [antlr-interest] Composite Grammars
In-Reply-To: <CAN51Nt7zQTP9QCN6GptjWtO1QZp5fX8Ej2B3jExQCuN7=g9zFg@mail.gmail.com>
References: <CAN51Nt4UMEOxh9+OckqK3HV5nSPW-X4M+FsY0NtKhUcaOVAtbg@mail.gmail.com>
	<CAN51Nt7zQTP9QCN6GptjWtO1QZp5fX8Ej2B3jExQCuN7=g9zFg@mail.gmail.com>
Message-ID: <CAN51Nt5qzQtFByNcv1FxCjqUHQ+R8Odcp2aiia6jm_3trP4q_A@mail.gmail.com>

Sorry about all the bug reports, but I keep finding more. :P

Setting output=AST causes some stuff about TreeAdaptors to get
inserted into the parser, but some parts have incorrect indentation,
which looks like it should break Python but not Java (I originally
wrote here that it was wrong indentation, but that's because it's
using a single tab character instead of two levels of 4 spaces in the
generated code and apparently I have vim show me hard tabs as 4 spaces
long). In Java there simply is no indentation for those lines yet they
are inside a class definition.

And in setting adaptors on delegates, the delegates aren't referred to
correctly, being referenced as gC and gD instead of self.gC and
self.gD, which again breaks Python but not Java. Java is also missing
a newline between the setTreeAdaptor calls but that's not a functional
problem.

This latter kind of error I make myself when programming in Python
sometimes, and pychecker/pylint are pretty good at catching all them
at once rather than one at a time. So I ran pychecker on the files
outputted for my minimal grammar and it found only the errors I
reported here and in my previous post for the top level lexer and
parser...

But for G_C and G_D it stumbled upon a circular dependency by way of
G_C trying to import tokenNames from GParser, where GParser tries to
import G_C from G_C. It works from GParser, of course, since
tokenNames is defined before it attempts to load G_C. But python
semantics won't let you load it the other way. (Going through GParser
works in pychecker, and pychecker only complains about an unused local
variable set1_tree in G_C and has no complaints for G_D.)

In any case, because pychecker found nothing else, once I work around
the second issue here and the one from my last post, I can probably
actually start parsing. :)

On Sat, Dec 24, 2011 at 5:44 PM, Benjamin S Wolf <jokeserver at gmail.com> wrote:
> Actually, there are still issues here. Namely GLexer is trying to use
> both A and B directly as delegates, but never initializes the A
> delegate for G_B_A. G_B does, which leads me to believe that this can
> be solved in the constructor by adding "gA = gB.gA" in the Java case,
> "self.gA = self.gB.gA" for Python, "ctx->gA = ctx->gB->gA" for C, etc.
> But then again G_B is delegating to G_B_A; why then does GLexer want
> to delegate directly to G_B_A?
>
> (Attached GLexer.java and the full grammar in G.zip.)
>
> On Fri, Dec 23, 2011 at 9:49 PM, Benjamin S Wolf <jokeserver at gmail.com> wrote:
>> I've gotten some very strange errors while trying to make a composite
>> grammar, and I think I've figured out why and/or a way around it. I'm
>> posting this because the error messages were not that helpful on their
>> own, and I had to fool around for a while with a minimal test case
>> until I found a way out of the errors.
>>
>> I have a composite grammar G, which imports two disjoint lexer
>> grammars A and B, and a parser grammar C (which only requires the
>> tokens from A). Using antlr3.4 on G with varying subsequent changes
>> gives one of the following sets of errors, regardless of output option
>> or language.
>>
>> 1. G has no rules.
>>
>> 2. parser rule ... not allowed in lexer, lexer rule ... not allowed in
>> parser, etc.
>>
>> 3. java.lang.ClassCastException: org.antlr.runtime.tree.CommonTree
>> cannot be cast to org.antlr.tool.GrammarAST.
>>
>> The short answer (before I go into details below) is that a) G needs a
>> parser rule, not just lexer rules, and b) G should only import one
>> lexer grammar, and the others should be imported by that one.
>> Strangely, b) does not apply to parser grammars, as I added a second
>> parser grammar D (dependent on both A and B) to test, and G is fine*
>> either way.
>>
>> The long story: When I encountered (1), I added a dummy lexer rule
>> "COMMA : ',' ;". This cured G's lack of rules but now antlr3.4 was
>> giving me (2), where it seemed that antlr3 thought I was putting all
>> of A's lexer rules in C and all of C's parser rules in A (and B,
>> etc.). Since I had no rules dependent on B, I removed it from being
>> imported. With G importing only A and C, I was now getting (3). I
>> added the rule "comma : COMMA ;" to G and now antlr3 completed
>> successfully (and still did when I folded these two rules together
>> into "comma : ',' ;"). So I added B back to the import list from G,
>> and it gave me (2) again. But removing B from G's import list and
>> making A import it made it work fine.
>>
>> So antlr3 successfully produces a recognizer for G when G imports A,
>> C, and D, where A imports B, or when G imports B, C, and D, and B
>> imports A**.
>>
>> I am not sure of the root reason behind the inability of the top level
>> of a composite grammar to import two lexer grammars (whether a design
>> decision or bug, eg.) as none of the documentation I could find on
>> composite grammars indicates either that this is the case or should be
>> otherwise. I would have liked a better error message in place of (2),
>> at least for the case where G had a lexer rule but not a parser rule,
>> because it would have saved a little bit of stumbling around.
>>
>> *By "fine" I mean antlr3 finishes successfully. But if G doesn't
>> import B, then the generated lexer can't produce tokens defined in B
>> and so the rules in D can't be reached.
>>
>> **Unless you're like me, and have an unfortunately large lexer grammar
>> B, which causes antlr3 to run out of stack space if G imports A
>> imports B but not if G imports B imports A.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: GParser.py
Type: application/octet-stream
Size: 3002 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20111225/ffa2bd76/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: GParser.java
Type: application/octet-stream
Size: 3231 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20111225/ffa2bd76/attachment-0001.obj 

From james_ladd at hotmail.com  Sun Dec 25 18:58:36 2011
From: james_ladd at hotmail.com (James Ladd)
Date: Mon, 26 Dec 2011 13:58:36 +1100
Subject: [antlr-interest] urgent help required ...
In-Reply-To: <mailman.1.1324843201.3842.antlr-interest@antlr.org>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>
Message-ID: <BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>


Hi All,

I need some help.

I have a grammar here https://github.com/redline-smalltalk/redline-smalltalk
and it have done my best but I now have a few edge cases that end with a "no viable alternative"
error.

I don't really know where to start to resolve the errors.

If you would be interested in helping, or if you can help but would require payment please
let me know a.s.a.p - and I'll send you the list of about 5 errors that I need fixed.

This is urgent to me and the community that is using this tool. I have some issues to fix so
as to not hold up further development.

If you are interested please reply here or email james underscore ladd at hotmail dot com.

Rgs, James.
 		 	   		  

From jimi at temporal-wave.com  Mon Dec 26 09:33:17 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 26 Dec 2011 09:33:17 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
Message-ID: <d2ad6f87e09d3bf7e7d7101475effb5d@mail.gmail.com>

Are you sure that this is not because you are using $text? Anyway, over
the next few days I am going to make some changes to the runtime for speed
and memory use, that will probably help everyone.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Richard Gildea
> Sent: Thursday, December 22, 2011 8:00 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] C target memory usage
>
> Hi,
>
> We have been successfully using antlr in the form of the C target for
> some time, however we have recently noticed that the memory consumption
> can be quite large - up to 150 times the size of the input file. Is
> this factor of
> ~150 to be expected, or does it indicate that we may be doing something
> wrong? For the vast majority of possible inputs this does not cause a
> problem, however some input files can be as large as 0.5 Gb, giving a
> peak memory usage of 75 Gb - not exactly feasible on most machines!
>
> Does anyone have any examples of using a custom lexer that provides a
> token buffer rather than storing all tokens in memory?
>
> Cheers,
>
> Richard
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From bkiers at gmail.com  Mon Dec 26 09:34:21 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 26 Dec 2011 18:34:21 +0100
Subject: [antlr-interest] urgent help required ...
In-Reply-To: <BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>
	<BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>
Message-ID: <CAOrgODb=BFR-avLyZW5xVRNpbtY-5u1OtQiUD52w0BiyWG-JAQ@mail.gmail.com>

Hi James,

Can't you explain it here on the list? What input produces "no viable
alternative", and what rules are involved?
And please drop the ASAP's and URGENT's from your questions: I can't speak
for others of course, but I'm pretty sure you won't get any faster
responses by doing so, and it sounds a bit demanding.

Regards,

Bart.


On Mon, Dec 26, 2011 at 3:58 AM, James Ladd <james_ladd at hotmail.com> wrote:

>
> Hi All,
>
> I need some help.
>
> I have a grammar here
> https://github.com/redline-smalltalk/redline-smalltalk
> and it have done my best but I now have a few edge cases that end with a
> "no viable alternative"
> error.
>
> I don't really know where to start to resolve the errors.
>
> If you would be interested in helping, or if you can help but would
> require payment please
> let me know a.s.a.p - and I'll send you the list of about 5 errors that I
> need fixed.
>
> This is urgent to me and the community that is using this tool. I have
> some issues to fix so
> as to not hold up further development.
>
> If you are interested please reply here or email james underscore ladd at
> hotmail dot com.
>
> Rgs, James.
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Mon Dec 26 09:39:21 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 26 Dec 2011 09:39:21 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
Message-ID: <76104ebe54b20ee6373090b3265a6cd6@mail.gmail.com>

There is only going to be a C++ target for v4 - I don't have time to write
it though and so I think that Sam will likely do that. The same things
will apply to C++ as C# and generally it should be a lot faster.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of A Z
> Sent: Friday, December 23, 2011 7:09 PM
> To: Richard Gildea
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] C target memory usage
>
> Hi Richard,
>
>   I see about 140:1 for the ratio of memory use to input size on a 64-
> bit system. This is after I hacked commontoken to remove most of the
> function pointers, which halved the size of the tokens. I didn't
> investigate any further as I recall an email thread about ANTLR 4
> indicating it would use 8-byte tokens instead of the 200+ byte tokens
> 3.4 uses.
>
>
> Looks like it may only be for C#.
> http://markmail.org/message/eggfcjt3a6qdzkvc
>
> Ad
>
>
> On Fri, Dec 23, 2011 at 10:00 AM, Richard Gildea <rgildea at gmail.com>
> wrote:
>
> > Hi,
> >
> > We have been successfully using antlr in the form of the C target for
> > some time, however we have recently noticed that the memory
> > consumption can be quite large - up to 150 times the size of the
> input
> > file. Is this factor of
> > ~150 to be expected, or does it indicate that we may be doing
> > something wrong? For the vast majority of possible inputs this does
> > not cause a problem, however some input files can be as large as 0.5
> > Gb, giving a peak memory usage of 75 Gb - not exactly feasible on
> most machines!
> >
> > Does anyone have any examples of using a custom lexer that provides a
> > token buffer rather than storing all tokens in memory?
> >
> > Cheers,
> >
> > Richard
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jason at jasonosgood.com  Mon Dec 26 12:01:33 2011
From: jason at jasonosgood.com (Jason Osgood)
Date: Mon, 26 Dec 2011 12:01:33 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
Message-ID: <CAHcxkY_PZ=F8--KDmJauo3WU-7CCt9ZKo7NaNEgsDx9=h6bU0Q@mail.gmail.com>

Hi Terence.


re: ParseTreeVisitor

Thanks for the direct links. Yup, that's exactly what I want.

One caveat. Please don't use the term "Visitor". That's an overloaded
term. ParseEventListener (or some such) is clear and concise and
familiar.


> With a single decision, I had stripped away 2 large pieces of work: AST
> specification and tree grammar specification.

Less is more. Good job.


> As Kyle points out, a big benefit of this automatic parse tree construction and listener
> event mechanism is that it renders grammars 100% reusable and retargetable to any
> target programming language.

Awesome. The power of modular interfaces. My use case is the opposite:
multiple grammars to a single target. I tried and tried to figure out
how to support multiple SQL grammars in a generic manner. As described
upthread, event listener with path expressions was the only tractable
solution I could find.


> Sam Harwell has convinced me to include things like skip in setting channels in
> the lexer with special syntax rather than actions? again we get retargeting.

Some day I hope to understand what you just said. :)


I'll sit tight with my current solution until v4. Thanks for your hard
work and creativity, Terence. I'm having a lot of fun. (With my gf
teasing me in the background "You're such a geek!").


Cheers, Jason

From jason at jasonosgood.com  Mon Dec 26 12:08:16 2011
From: jason at jasonosgood.com (Jason Osgood)
Date: Mon, 26 Dec 2011 12:08:16 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
Message-ID: <CAHcxkY9msgdvodpN5fMO5VdjC998_GRcSQF_QfjePVpsNqrK+A@mail.gmail.com>

Hi Kyle Ferrio.


> A well defined Neutral Implementation Pattern Language, viz. a
> pseudo-target could be a useful compromise with the following benefits: (1)
> enabling target-agnostic validation; (2) accelerating simultaneous,
> synchronous development of both antlr and targets (a major problem
> currently imho) by providing a thin shim targeted by antlr and known in
> advance by authors of target generators; and (3) promoting reusuability and
> readability of grammars via abstraction of the implementation.

I don't understand what a pseudo-target is. Do you have an example?

As for your stated benefits, I agree enthusiastically. Modularity
through interfaces is power.

The book "Design Rules", written by two economists, is the most
important software architecture book I've read to date.

http://www.google.com/search?q=design+rules+power+of+modularity

It sometimes seems that my entire career has been figuring out ways to
decouple stuff. :)


Cheers, Jason

From jason at jasonosgood.com  Mon Dec 26 12:28:01 2011
From: jason at jasonosgood.com (Jason Osgood)
Date: Mon, 26 Dec 2011 12:28:01 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <CAP7PoCcCZCNXaecQHkWJ3A9MTDBvOGmth=F9GBzRp2mN7XtrTw@mail.gmail.com>
References: <CAHcxkY8kavBs2jXBmuGMpga39Qir8MD9vyJZWOgkG8S1+bmdFg@mail.gmail.com>
	<CAP7PoCfB8aPwP0pkiSg1hc=8FwPy35GzqEO0a1Y_DH_052udfQ@mail.gmail.com>
	<CAHcxkY-NtWtn8d99VSAfRigEQ9BHOpZsLje7iqpmh7q9iPT_eA@mail.gmail.com>
	<CAP7PoCfoBSe5k3KnV9en+M6cOsWoZHQCLHkfCToE4sHT4twPjA@mail.gmail.com>
	<CAP7PoCcCZCNXaecQHkWJ3A9MTDBvOGmth=F9GBzRp2mN7XtrTw@mail.gmail.com>
Message-ID: <CAHcxkY-O6shY90=B==CMUyD8Kad9CJ9DvA82qH9X_OBSkBoLig@mail.gmail.com>

Hi Gavin.


> The issue I have with it is it's still nontypesafe. If I restructure my tree,
> no refactoring tool on Earth is going to be able to help me find all the
> broken path expressions.

Spot on. Refactoring would be sweet.

As I mentioned upthread, I've done A LOT of extract / transform / load (ETL).

The common solution for lack of type safety is some psychotic schema
specification like XSD.

Ever debug SOAP, WSDL, SAXON, XPath, XSL, etc? Indirection, lazy
loading, runtime proxies, contexts. It's terrible.

A lot of make-work just to cut a string out of a database and paste it
into another database or web page.

So I wrote my own DOM and XPath. My composite objects always render
themselves. So debugging within Eclipse is trivial. For example,
Node.toString() renders that node's subtree.

So, yes, my ANTLR specific path expressions get broken as my grammar
morphs. While it's not pretty, it is manageable. Until an awesome new
language adds paths as first class objects.


Cheers, Jason


PS- Sorry for repost. I'm receiving the digest, making replying a pain.

From parrt at cs.usfca.edu  Mon Dec 26 12:43:04 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 26 Dec 2011 12:43:04 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <CAHcxkY_PZ=F8--KDmJauo3WU-7CCt9ZKo7NaNEgsDx9=h6bU0Q@mail.gmail.com>
References: <CAHcxkY_PZ=F8--KDmJauo3WU-7CCt9ZKo7NaNEgsDx9=h6bU0Q@mail.gmail.com>
Message-ID: <B5706B4E-C39A-41DB-8BBC-A182826E344C@cs.usfca.edu>


On Dec 26, 2011, at 12:01 PM, Jason Osgood wrote:
>> Sam Harwell has convinced me to include things like skip in setting channels in
>> the lexer with special syntax rather than actions? again we get retargeting.
> 
> Some day I hope to understand what you just said. :)

Sorry.  just meant we can do

WS : (' '|'\n')+ => skip ;

not

WS : (' '|'\n')+ {skip();} ;

or

WS : (' '|'\n')+ => channel(HIDDEN) ;

might not use =>. might be ->. @ doesn't stand out or does it?

WS : (' '|'\n')+ @ channel(HIDDEN) ;

Ter
PS	yep, they are listeners not visitors.



From james_ladd at hotmail.com  Mon Dec 26 13:05:39 2011
From: james_ladd at hotmail.com (James Ladd)
Date: Tue, 27 Dec 2011 08:05:39 +1100
Subject: [antlr-interest] urgent help required ...
In-Reply-To: <CAOrgODb=BFR-avLyZW5xVRNpbtY-5u1OtQiUD52w0BiyWG-JAQ@mail.gmail.com>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>,
	<BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>,
	<CAOrgODb=BFR-avLyZW5xVRNpbtY-5u1OtQiUD52w0BiyWG-JAQ@mail.gmail.com>
Message-ID: <BAY149-W7ABD0E0017D9438278A82EDAE0@phx.gbl>


You are right Bart.

This list is always very quick to respond and very thorough with the responses.
I don't mean to be demanding.

Jim has helped me previously and has offered to help again, so I'll wait to see
how this turns out. Should I post again, Ill be sure to do as you suggest, and
include the rules and errors.

Thanks All.

Rgs, James.

Date: Mon, 26 Dec 2011 18:34:21 +0100
Subject: Re: [antlr-interest] urgent help required ...
From: bkiers at gmail.com
To: james_ladd at hotmail.com
CC: antlr-interest at antlr.org

Hi James,
Can't you explain it here on the list? What input produces "no viable alternative", and what rules are involved?And please drop the ASAP's and URGENT's from your questions: I can't speak for others of course, but I'm pretty sure you won't get any faster responses by doing so, and it sounds a bit demanding.

Regards,
Bart.

On Mon, Dec 26, 2011 at 3:58 AM, James Ladd <james_ladd at hotmail.com> wrote:



Hi All,



I need some help.



I have a grammar here https://github.com/redline-smalltalk/redline-smalltalk

and it have done my best but I now have a few edge cases that end with a "no viable alternative"

error.



I don't really know where to start to resolve the errors.



If you would be interested in helping, or if you can help but would require payment please

let me know a.s.a.p - and I'll send you the list of about 5 errors that I need fixed.



This is urgent to me and the community that is using this tool. I have some issues to fix so

as to not hold up further development.



If you are interested please reply here or email james underscore ladd at hotmail dot com.



Rgs, James.





List: http://www.antlr.org/mailman/listinfo/antlr-interest

Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


 		 	   		  

From jokeserver at gmail.com  Mon Dec 26 17:20:39 2011
From: jokeserver at gmail.com (Benjamin S Wolf)
Date: Mon, 26 Dec 2011 17:20:39 -0800
Subject: [antlr-interest] Antlr3.4 Python bugs, workarounds
In-Reply-To: <CAE33G67XoyDyGcdL2YmsptmU0S_NyPfTHrb1zanA3Y0t8miDjA@mail.gmail.com>
References: <CAN51Nt60R=9DF1+BWvsnMQShLE7GRpXmm5o30DnZ+KLZq8duUA@mail.gmail.com>
	<CAN51Nt4Dp7yMUSkNqYnrkMvthRB2p0UA4g4TB5DZhi-ywn0THA@mail.gmail.com>
	<CAE33G67XoyDyGcdL2YmsptmU0S_NyPfTHrb1zanA3Y0t8miDjA@mail.gmail.com>
Message-ID: <CAN51Nt5aQTu1jqeXuCUhHYHXCy0Xsq00vgCB-BEWhjSqT5z8Qw@mail.gmail.com>

On Fri, Oct 28, 2011 at 8:56 AM, Benjamin Niemann <pink at odahoda.de> wrote:
> On Fri, Oct 7, 2011 at 11:17 PM, Benjamin S Wolf <jokeserver at gmail.com> wrote:
>> I've discovered two bugs in working with the Python target to generate lexers.
>>
>> The first is in that when supplying k, the generated code for special
>> state transitions is invalid: the "elif" keyword is split across lines
>> as "el\nif", so the python interpreter crashes upon reading "el".
>
> That's been reported before, but I have problem reproducing it. Are
> you using antlr-3.4-complete.jar (I can only see this problem with
> that build) or did you build it yourself from antlr-3.4.tar.gz (or
> something else completely)?
>

Hi Benjamin,

I was meddling around with the stg templates for Python in trying to
fix some other bugs I reported in another thread, and after updating
the files in antlr-3.4-complete.jar this problem was alleviated.

I narrowed down the diff and discovered that the stg templates in the
original jar all had DOS line endings (that is, \r\n instead of just
\n), and that removing all the carriage returns in
org/antlr/codegen/templates/Python/Python.stg solved the issue of the
elif being split across a newline.

That certainly explains why it only showed in antlr-3.4-complete.jar,
since the templates included with antlr-3.4.tar.gz did not have the
carriage returns. :)

From andy.voelkel at plantronics.com  Mon Dec 26 17:45:25 2011
From: andy.voelkel at plantronics.com (Voelkel, Andy)
Date: Tue, 27 Dec 2011 01:45:25 +0000
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <B5706B4E-C39A-41DB-8BBC-A182826E344C@cs.usfca.edu>
References: <CAHcxkY_PZ=F8--KDmJauo3WU-7CCt9ZKo7NaNEgsDx9=h6bU0Q@mail.gmail.com>
	<B5706B4E-C39A-41DB-8BBC-A182826E344C@cs.usfca.edu>
Message-ID: <92E9AB4D42199B4793CE24E094BAEE070497A98F@USSCMB03.plt.plantronics.com>

This whole discussion is very welcome and rather exciting. As a relative newcomer to this technology, the direction that v4 seems to be taking nonetheless seems very right to me. I've done two very small projects with ANTLR so far. On the first one, I tried tree grammars since they seemed to be "promoted", on the second I decided to do my own tree walking. They both had advantages, but I ultimately did prefer doing my own tree walking because it allowed me to take greater advantage of the language environment I was using (C# in my case). I also find debugging the tree walking code easier because it isn't a mixed language environment.

It sounds like the new approach with a "callback-like" interface also give me even more flexibility in deciding what data structures to use for my trees, which is even better.

I applaud the open mindedness and flexibility that Terence is showing in changing his approach!

- Andy

________________________________

CONFIDENTIALITY NOTICE: This e-mail transmission, and any documents, files or previous e-mail messages attached to it, may contain information that is confidential and/or legally privileged. If you are not the intended recipient, or a person responsible for delivering it to the intended recipient, please DO NOT disclose the contents to another person, store or copy the information in any medium, or use any of the information contained in or attached to this transmission for any purpose. If you have received this transmission in error, please immediately notify the sender by reply email or at privacy at plantronics.com, and destroy the original transmission and its attachments without reading or saving in any manner.

For further information about Plantronics - the Company, its products, brands, partners, please visit our website www.plantronics.com.

From bkiers at gmail.com  Mon Dec 26 23:41:35 2011
From: bkiers at gmail.com (Bart Kiers)
Date: Tue, 27 Dec 2011 08:41:35 +0100
Subject: [antlr-interest] urgent help required ...
In-Reply-To: <BAY149-W7ABD0E0017D9438278A82EDAE0@phx.gbl>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>
	<BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>
	<CAOrgODb=BFR-avLyZW5xVRNpbtY-5u1OtQiUD52w0BiyWG-JAQ@mail.gmail.com>
	<BAY149-W7ABD0E0017D9438278A82EDAE0@phx.gbl>
Message-ID: <CAOrgODbc70qn5zvbHXgq0F77r70K5e8qpJxrsjPK3-X9aFObYQ@mail.gmail.com>

Hi James,

On Mon, Dec 26, 2011 at 10:05 PM, James Ladd <james_ladd at hotmail.com> wrote:

>  You are right Bart.
>
> This list is always very quick to respond and very thorough with the
> responses.
> I don't mean to be demanding.
>

No problem James.


Jim has helped me previously and has offered to help again, so I'll wait to
> see
> how this turns out. Should I post again, Ill be sure to do as you suggest,
> and
> include the rules and errors.
>

Yes, please do.


Thanks All.
>
> Rgs, James.
>

Regards,

Bart.

From james_ladd at hotmail.com  Tue Dec 27 00:03:17 2011
From: james_ladd at hotmail.com (James Ladd)
Date: Tue, 27 Dec 2011 19:03:17 +1100
Subject: [antlr-interest] urgent help required ...
In-Reply-To: <CAOrgODbc70qn5zvbHXgq0F77r70K5e8qpJxrsjPK3-X9aFObYQ@mail.gmail.com>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>,
	<BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>,
	<CAOrgODb=BFR-avLyZW5xVRNpbtY-5u1OtQiUD52w0BiyWG-JAQ@mail.gmail.com>,
	<BAY149-W7ABD0E0017D9438278A82EDAE0@phx.gbl>,
	<CAOrgODbc70qn5zvbHXgq0F77r70K5e8qpJxrsjPK3-X9aFObYQ@mail.gmail.com>
Message-ID: <BAY149-W42BCB252B60022FBA5E4A3EDAF0@phx.gbl>


Hi Bart and all ....

The main no viable alternative errors occur around line 25 of Smalltalk.g
in the rule:

method returns [Method n]
   
 :    o = NAME c= '_class_'? '>>'  messagePattern '[' primitive? 
temporaries? statements  ']' {$n = MethodFactory.create($o.text, 
$c.text, $messagePattern.n, $primitive.n, $temporaries.n, 
$statements.n);}
    ;

To get started with building and 
parsing you can either use Antrl works or the getting started here: 
http://www.redline.st/discover/getting-started.html
The project sources are here:  https://github.com/redline-smalltalk/redline-smalltalk

In  a nutshell there are a few binarySymbol methods that cause this rule to break with a "no viable" alternative.

If you goto the file Magnitude.st and change line 14 from 

- \> aMagnitude

to

- > aMagnitude

You will then start to get the error.

If you were to make the line

- , aMagnitude

That will cause the error as well and it should not.

The second error I get is on the same rule. Essentially I changed the file PreProcessor.g to spit out a
'_class_' rather than 'class' to overcome a no viable alternative error I was getting. Id like to make sure
the preprocessor did NOT put out _class_ and that the method pattern rule on line 25 of Smalltalk.g
was ok with 'o = NAME c= 'class'? '>>'  messagePattern'

Not it is ok for a method to look like the following:

- class
  ^ nil

You could modify Magnitude.st to have a method like this for testing.

Rgs, James.


Date: Tue, 27 Dec 2011 08:41:35 +0100
Subject: Re: [antlr-interest] urgent help required ...
From: bkiers at gmail.com
To: james_ladd at hotmail.com
CC: antlr-interest at antlr.org

Hi James,
On Mon, Dec 26, 2011 at 10:05 PM, James Ladd <james_ladd at hotmail.com> wrote:






You are right Bart.

This list is always very quick to respond and very thorough with the responses.
I don't mean to be demanding.

No problem James.


Jim has helped me previously and has offered to help again, so I'll wait to see


how this turns out. Should I post again, Ill be sure to do as you suggest, and
include the rules and errors.

Yes, please do. 

Thanks All.

Rgs, James.

Regards,
Bart. 		 	   		  

From parrt at cs.usfca.edu  Tue Dec 27 11:08:52 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 27 Dec 2011 11:08:52 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <CAP7PoCc6i9bhgwzEN0BQqhFT5wzi8XGRmOMA9aCgceEfxLTkBw@mail.gmail.com>
References: <D977C814-4754-48F7-BEB1-88DD9798D137@cs.usfca.edu>
	<CAP7PoCc6i9bhgwzEN0BQqhFT5wzi8XGRmOMA9aCgceEfxLTkBw@mail.gmail.com>
Message-ID: <DD919EEA-9174-4DB6-97A5-1506AF21954E@cs.usfca.edu>


On Dec 26, 2011, at 2:54 PM, Gavin King wrote:

> This all looks reasonable to me. The only doubt I have is how close
> the structure of the parse tree is to the AST in a complex grammar. I

Well, an AST does not have rule nodes so they will always be very different.

> imagine that in most cases it's very close, so probably not a major
> issue. Still, it might be nice to be able to mark a rule as not
> producing a node in the typesafe parse tree.

I thought about that, but since the rule invocation stack/tree of context objects does double duty for holding context and representing the final parse tree, it's hard to remove some of the nodes. For example, if there's an error in a rule that we told to drop from the parse tree, there's no way for me to provide that information to an IDE or whatever.

> There might even be some
> other stuff you could provide to allow a bit of additional control
> over the resulting tree. However, I can understand if that's a
> non-goal - it's still going to be much, much easier to transform the
> parse tree to an AST.

Yep, We should also set it up so that you can create new subtrees using concrete syntax. The following would start parsing at rule stat and return a tree given the string input.

parse("stat", "while (i>3) {...}");

Ter

From parrt at cs.usfca.edu  Tue Dec 27 11:12:37 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 27 Dec 2011 11:12:37 -0800
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <92E9AB4D42199B4793CE24E094BAEE070497A98F@USSCMB03.plt.plantronics.com>
References: <CAHcxkY_PZ=F8--KDmJauo3WU-7CCt9ZKo7NaNEgsDx9=h6bU0Q@mail.gmail.com>
	<B5706B4E-C39A-41DB-8BBC-A182826E344C@cs.usfca.edu>
	<92E9AB4D42199B4793CE24E094BAEE070497A98F@USSCMB03.plt.plantronics.com>
Message-ID: <5CD1E35E-4CE0-4BBE-AC4F-53347864EFDB@cs.usfca.edu>

On Dec 26, 2011, at 5:45 PM, Voelkel, Andy wrote:

Hi Andy,

> This whole discussion is very welcome and rather exciting. As a relative newcomer to this technology, the direction that v4 seems to be taking nonetheless seems very right to me. I've done two very small projects with ANTLR so far. On the first one, I tried tree grammars since they seemed to be "promoted", on the second I decided to do my own tree walking. They both had advantages, but I ultimately did prefer doing my own tree walking because it allowed me to take greater advantage of the language environment I was using (C# in my case). I also find debugging the tree walking code easier because it isn't a mixed language environment.

Yep. Debugging tree grammars is always been very difficult. Also, explaining how to construct ASTs with either the ^ and ! operators or the -> rewrite syntax has always been challenging, though it makes perfect sense to me ;) When even my graduate students were having trouble, I started questioning my approach.

I also noticed that a number of other parser generators build parse trees and they're very popular with their users.

> It sounds like the new approach with a "callback-like" interface also give me even more flexibility in deciding what data structures to use for my trees, which is even better.

My intuition is that this new approach is a very good one and, most importantly, satisfies my goal of dramatically reducing the steep learning curve associated with previous versions of ANTLR.

> I applaud the open mindedness and flexibility that Terence is showing in changing his approach!

thanks very much for the feedback and hopefully other people will chime in as vacation winds down.
Ter

From kferrio at gmail.com  Tue Dec 27 11:31:21 2011
From: kferrio at gmail.com (Kyle Ferrio)
Date: Tue, 27 Dec 2011 12:31:21 -0700
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <CAHcxkY9msgdvodpN5fMO5VdjC998_GRcSQF_QfjePVpsNqrK+A@mail.gmail.com>
References: <CAHcxkY9msgdvodpN5fMO5VdjC998_GRcSQF_QfjePVpsNqrK+A@mail.gmail.com>
Message-ID: <CAAfeETrUN2ddNK=25n54+4ADwAp73raWkfiwAYZw-0cSFTxdYA@mail.gmail.com>

Hi Jason,

Ter has convinced me that I have nothing to fear from v4 and that it
actually will make life easier for both target maintainers and people using
multiple targets.

By pseudo-target, I mean an intermediate representation for which no
compiler or VM exists but which is easily machine-translated into any
target language.  In the past, it seemed to me (and I may be wrong) that
keeping a target in sync with antlr development (i.e. the prodigious pace
of Ter) could be a full-time job and that this might explain why some
targets appeared to lag.  Of course there might be other reasons.  Having a
stable pseudo target would enable (among other things omitted here for
brevity) the  antlr core and targets to evolve in parallel rather than
sequentially.  It's just another decoupling.  Again, based on Ter's
remarks, I think v4 will improve the situation without the added complexity.

A software book written by economists?  I must see this, if only to learn
whether it is better than an economics book written by software engineers!

Kyle
 On Dec 26, 2011 1:08 PM, "Jason Osgood" <jason at jasonosgood.com> wrote:

> Hi Kyle Ferrio.
>
>
> > A well defined Neutral Implementation Pattern Language, viz. a
> > pseudo-target could be a useful compromise with the following benefits:
> (1)
> > enabling target-agnostic validation; (2) accelerating simultaneous,
> > synchronous development of both antlr and targets (a major problem
> > currently imho) by providing a thin shim targeted by antlr and known in
> > advance by authors of target generators; and (3) promoting reusuability
> and
> > readability of grammars via abstraction of the implementation.
>
> I don't understand what a pseudo-target is. Do you have an example?
>
> As for your stated benefits, I agree enthusiastically. Modularity
> through interfaces is power.
>
> The book "Design Rules", written by two economists, is the most
> important software architecture book I've read to date.
>
> http://www.google.com/search?q=design+rules+power+of+modularity
>
> It sometimes seems that my entire career has been figuring out ways to
> decouple stuff. :)
>
>
> Cheers, Jason
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From scott at javadude.com  Tue Dec 27 11:43:36 2011
From: scott at javadude.com (Scott Stanchfield)
Date: Tue, 27 Dec 2011 14:43:36 -0500
Subject: [antlr-interest] De-emphasizing tree grammars?
In-Reply-To: <CAAfeETrUN2ddNK=25n54+4ADwAp73raWkfiwAYZw-0cSFTxdYA@mail.gmail.com>
References: <CAHcxkY9msgdvodpN5fMO5VdjC998_GRcSQF_QfjePVpsNqrK+A@mail.gmail.com>
	<CAAfeETrUN2ddNK=25n54+4ADwAp73raWkfiwAYZw-0cSFTxdYA@mail.gmail.com>
Message-ID: <CAN_KjYkP4hUBnJO2iHWycdAoGJZXTzhejxgDOWoj-YU41__OaQ@mail.gmail.com>

I get suspicious of any book that has the word "rules" in its title that I
didn't write...
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com


On Tue, Dec 27, 2011 at 2:31 PM, Kyle Ferrio <kferrio at gmail.com> wrote:

> Hi Jason,
>
> Ter has convinced me that I have nothing to fear from v4 and that it
> actually will make life easier for both target maintainers and people using
> multiple targets.
>
> By pseudo-target, I mean an intermediate representation for which no
> compiler or VM exists but which is easily machine-translated into any
> target language.  In the past, it seemed to me (and I may be wrong) that
> keeping a target in sync with antlr development (i.e. the prodigious pace
> of Ter) could be a full-time job and that this might explain why some
> targets appeared to lag.  Of course there might be other reasons.  Having a
> stable pseudo target would enable (among other things omitted here for
> brevity) the  antlr core and targets to evolve in parallel rather than
> sequentially.  It's just another decoupling.  Again, based on Ter's
> remarks, I think v4 will improve the situation without the added
> complexity.
>
> A software book written by economists?  I must see this, if only to learn
> whether it is better than an economics book written by software engineers!
>
> Kyle
>  On Dec 26, 2011 1:08 PM, "Jason Osgood" <jason at jasonosgood.com> wrote:
>
> > Hi Kyle Ferrio.
> >
> >
> > > A well defined Neutral Implementation Pattern Language, viz. a
> > > pseudo-target could be a useful compromise with the following benefits:
> > (1)
> > > enabling target-agnostic validation; (2) accelerating simultaneous,
> > > synchronous development of both antlr and targets (a major problem
> > > currently imho) by providing a thin shim targeted by antlr and known in
> > > advance by authors of target generators; and (3) promoting reusuability
> > and
> > > readability of grammars via abstraction of the implementation.
> >
> > I don't understand what a pseudo-target is. Do you have an example?
> >
> > As for your stated benefits, I agree enthusiastically. Modularity
> > through interfaces is power.
> >
> > The book "Design Rules", written by two economists, is the most
> > important software architecture book I've read to date.
> >
> > http://www.google.com/search?q=design+rules+power+of+modularity
> >
> > It sometimes seems that my entire career has been figuring out ways to
> > decouple stuff. :)
> >
> >
> > Cheers, Jason
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From pink at odahoda.de  Tue Dec 27 17:08:38 2011
From: pink at odahoda.de (Benjamin Niemann)
Date: Wed, 28 Dec 2011 02:08:38 +0100
Subject: [antlr-interest] Antlr3.4 Python bugs, workarounds
In-Reply-To: <CAN51Nt5aQTu1jqeXuCUhHYHXCy0Xsq00vgCB-BEWhjSqT5z8Qw@mail.gmail.com>
References: <CAN51Nt60R=9DF1+BWvsnMQShLE7GRpXmm5o30DnZ+KLZq8duUA@mail.gmail.com>
	<CAN51Nt4Dp7yMUSkNqYnrkMvthRB2p0UA4g4TB5DZhi-ywn0THA@mail.gmail.com>
	<CAE33G67XoyDyGcdL2YmsptmU0S_NyPfTHrb1zanA3Y0t8miDjA@mail.gmail.com>
	<CAN51Nt5aQTu1jqeXuCUhHYHXCy0Xsq00vgCB-BEWhjSqT5z8Qw@mail.gmail.com>
Message-ID: <CAE33G642=9wHcY1ofj4UogteExF6a_91+eGxr7Nx70PUUs+q2g@mail.gmail.com>

Hi Benjamin,

On Tue, Dec 27, 2011 at 2:20 AM, Benjamin S Wolf <jokeserver at gmail.com> wrote:
> On Fri, Oct 28, 2011 at 8:56 AM, Benjamin Niemann <pink at odahoda.de> wrote:
>> On Fri, Oct 7, 2011 at 11:17 PM, Benjamin S Wolf <jokeserver at gmail.com> wrote:
>>> I've discovered two bugs in working with the Python target to generate lexers.
>>>
>>> The first is in that when supplying k, the generated code for special
>>> state transitions is invalid: the "elif" keyword is split across lines
>>> as "el\nif", so the python interpreter crashes upon reading "el".
>>
>> That's been reported before, but I have problem reproducing it. Are
>> you using antlr-3.4-complete.jar (I can only see this problem with
>> that build) or did you build it yourself from antlr-3.4.tar.gz (or
>> something else completely)?
>>
>
> Hi Benjamin,
>
> I was meddling around with the stg templates for Python in trying to
> fix some other bugs I reported in another thread, and after updating
> the files in antlr-3.4-complete.jar this problem was alleviated.
>
> I narrowed down the diff and discovered that the stg templates in the
> original jar all had DOS line endings (that is, \r\n instead of just
> \n), and that removing all the carriage returns in
> org/antlr/codegen/templates/Python/Python.stg solved the issue of the
> elif being split across a newline.
>
> That certainly explains why it only showed in antlr-3.4-complete.jar,
> since the templates included with antlr-3.4.tar.gz did not have the
> carriage returns. :)

Good catch, thanks a lot for figuring that out.
That seems like a bug in stringtemplate to me - I thought it was
smarter about dealing with line endings.

Ter:
Was the jar built on a windows box? I assume perforce adds the CRLFs
when checking out the files under windows - the files are stored as
"text", i.e. line endings are converted to the native system.
Unless ST can be taught to deal with that properly, we could store the
templates as binary in the repository - but that could be messy when
someone actually wants to edit them under windows and it's hard to
notice when CRs creep back in.
Or avoid building jars on windows ;)
This probably affects other targets as well, but those are probably
less picky about some extra whitespace here and there. Could lead to
some obscure bugs though.

-Ben

From nafur42 at gmail.com  Wed Dec 28 11:38:07 2011
From: nafur42 at gmail.com (none <)
Date: Wed, 28 Dec 2011 20:38:07 +0100
Subject: [antlr-interest] Making common prefixes work
Message-ID: <4efb7021.d37a0e0a.79db.5855@mx.google.com>

Hi,

My task is to build a parser for a language for minutes (using the
python backend).
This results in a nasty requirement: try to use as few characters for
special tokens as possible. An input I'd like to parse would look like this:

#Date;28.12.2011

#TOP Foo
Some text
{
	Some list item;
	Some other list item;
}


a main feature is the transformation into latex code. this code would
produce:

\section*{Foo}
Some text
\begin{itemize}
\item Some list item
\item some other list item
\end{itemize}

the main problem is the lexer, I tried the following:

HASH : '#';
SEMICOLON : ';';
TOPBEGIN : '#TOP ';
BLOCKBEGIN : '{';
BLOCKEND : '}';

LINE : ~( HASH | SEMICOLON | NEWLINE | BLOCKBEGIN |
BLOCKEND | TAGBEGIN | TAGEND | '\n' | '\r' )+
;

While this is working in general, it suddenly breaks if we have metadata
starting with a T:

#Temp;Some Foo

this will produce:
Lexer error: line 6:2 mismatched character u'e' expecting 'O'

Any idea how to fix this?

Thanks,
nafur

From paulne at primus.ca  Wed Dec 28 14:00:39 2011
From: paulne at primus.ca (Paul)
Date: Wed, 28 Dec 2011 17:00:39 -0500
Subject: [antlr-interest] Antlr emit vs  Qt emit
Message-ID: <4EFB9187.2090902@primus.ca>

After some confusion using antlr v3.4 with c++ and the Qt toolkit, Qt 
defines "emit" as a keyword.
This conflicts with the definition of emit in antlr v3:

static pANTLR3_COMMON_TOKEN
emit       (pANTLR3_LEXER lexer)
{
...

Unfortunately changing this requires changes in both the antlr generator 
and the C runtime. Without the
changes antlr v3 is unusable in C++ source files that also use Qt.

Changing the antler emit to emitT resolves the issue.
Would it be possible to propagate such a change through the antlr v3 source?

Thank you,

Paul Neelands

From jimi at temporal-wave.com  Wed Dec 28 14:08:55 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 28 Dec 2011 14:08:55 -0800
Subject: [antlr-interest] Antlr emit vs Qt emit
In-Reply-To: <4EFB9187.2090902@primus.ca>
References: <4EFB9187.2090902@primus.ca>
Message-ID: <d34abb180d7e7c92cd068a6dc72c30a8@mail.gmail.com>

Please see the archives. You should:

a) Probably not include both ANTLR and QT headers in the same space - you
should not be mixing code in with ANTLR code I think;
b) If you must do this, and I can't see why you must, as you should call
external helper methods from actions, then undef emit before including the
antlr headers.

But, the answer is to decouple your code really.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Paul
> Sent: Wednesday, December 28, 2011 2:01 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr emit vs Qt emit
>
> After some confusion using antlr v3.4 with c++ and the Qt toolkit, Qt
> defines "emit" as a keyword.
> This conflicts with the definition of emit in antlr v3:
>
> static pANTLR3_COMMON_TOKEN
> emit       (pANTLR3_LEXER lexer)
> {
> ...
>
> Unfortunately changing this requires changes in both the antlr
> generator and the C runtime. Without the changes antlr v3 is unusable
> in C++ source files that also use Qt.
>
> Changing the antler emit to emitT resolves the issue.
> Would it be possible to propagate such a change through the antlr v3
> source?
>
> Thank you,
>
> Paul Neelands
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jimi at temporal-wave.com  Wed Dec 28 14:14:36 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 28 Dec 2011 14:14:36 -0800
Subject: [antlr-interest] Making common prefixes work
In-Reply-To: <4efb7021.d37a0e0a.79db.5855@mx.google.com>
References: <4efb7021.d37a0e0a.79db.5855@mx.google.com>
Message-ID: <fb26b5a51b61c9ce268d7aecd77acd05@mail.gmail.com>

Instead of LINE, try:

CHAR: . ;

Then your parser deals with CHAR+

However, you might need something more complicated to go with it:

fragment TOPBEGIN :;
HASH : '#'

    (    ('TOP')=>'TOP' { $type = TOPBEGIN; }
       |
    )
   ;

Note that as you post it, your lexer will error out on \n or \r - catch
them and skip() them.


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of none <
> Sent: Wednesday, December 28, 2011 11:38 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Making common prefixes work
>
> Hi,
>
> My task is to build a parser for a language for minutes (using the
> python backend).
> This results in a nasty requirement: try to use as few characters for
> special tokens as possible. An input I'd like to parse would look like
> this:
>
> #Date;28.12.2011
>
> #TOP Foo
> Some text
> {
> 	Some list item;
> 	Some other list item;
> }
>
>
> a main feature is the transformation into latex code. this code would
> produce:
>
> \section*{Foo}
> Some text
> \begin{itemize}
> \item Some list item
> \item some other list item
> \end{itemize}
>
> the main problem is the lexer, I tried the following:
>
> HASH : '#';
> SEMICOLON : ';';
> TOPBEGIN : '#TOP ';
> BLOCKBEGIN : '{';
> BLOCKEND : '}';
>
> LINE : ~( HASH | SEMICOLON | NEWLINE | BLOCKBEGIN | BLOCKEND | TAGBEGIN
> | TAGEND | '\n' | '\r' )+ ;
>
> While this is working in general, it suddenly breaks if we have
> metadata starting with a T:
>
> #Temp;Some Foo
>
> this will produce:
> Lexer error: line 6:2 mismatched character u'e' expecting 'O'
>
> Any idea how to fix this?
>
> Thanks,
> nafur
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From antlr at mirality.co.nz  Wed Dec 28 14:21:05 2011
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 29 Dec 2011 11:21:05 +1300
Subject: [antlr-interest] Making common prefixes work
In-Reply-To: <4efb7021.d37a0e0a.79db.5855@mx.google.com>
References: <4efb7021.d37a0e0a.79db.5855@mx.google.com>
Message-ID: <20111228222117.1DCED3418407@www.antlr.org>

At 08:38 29/12/2011, none < wrote:
 >the main problem is the lexer, I tried the following:
 >
 >HASH : '#';
 >SEMICOLON : ';';
 >TOPBEGIN : '#TOP ';
 >BLOCKBEGIN : '{';
 >BLOCKEND : '}';
 >
 >LINE : ~( HASH | SEMICOLON | NEWLINE | BLOCKBEGIN |
 >BLOCKEND | TAGBEGIN | TAGEND | '\n' | '\r' )+
 >;
 >
 >While this is working in general, it suddenly breaks if we have
 >metadata starting with a T:

The problem is that (at present, anyway) ANTLR lexers are a little 
too optimistic -- they assume that they can get away with minimal 
lookahead and don't do backtracking.  In your case for example the 
"TOPBEGIN" rule gets matched when it looks ahead to see "#T" and 
then it has no way back to generate a HASH instead when it finds 
that the next character isn't an "O".

One solution for this is to set a fixed lookahead to the length of 
your longest possibly-ambiguous token, but the usual/better fix is 
to explicitly code the lookahead yourself via predicates and type 
changes.  For example:

fragment TOP: 'TOP';
HASH
   : '#'
   ( /* nothing -- just a HASH */
   | (TOP) => TOP { $type = TOP; }
   | (ANOTHER) => ANOTHER { $type = ANOTHER; } /* eg. */
   );

Note also that you have to have them in a single rule like this -- 
predicates don't (consistently) work between rules, only within a 
rule.


From antlr at mirality.co.nz  Wed Dec 28 14:28:50 2011
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 29 Dec 2011 11:28:50 +1300
Subject: [antlr-interest] Making common prefixes work
In-Reply-To: <20111228222117.1DCED3418407@www.antlr.org>
References: <4efb7021.d37a0e0a.79db.5855@mx.google.com>
	<20111228222117.1DCED3418407@www.antlr.org>
Message-ID: <20111228222901.ED4693418407@www.antlr.org>

Mere moments ago, I wrote:
 >fragment TOP: 'TOP';
 >HASH
 >   : '#'
 >   ( /* nothing -- just a HASH */
 >   | (TOP) => TOP { $type = TOP; }
 >   | (ANOTHER) => ANOTHER { $type = ANOTHER; } /* eg. */
 >   );

Actually thinking about that some more, you might need to put the 
empty alt at the end of the rule, or use ? outside the parens 
instead.  I don't remember how picky ANTLR is about the order; 
it's been a while since I've written a lexer grammar myself. :)


From gonzague.reydet at gmail.com  Wed Dec 28 14:47:02 2011
From: gonzague.reydet at gmail.com (Gonzague Reydet)
Date: Wed, 28 Dec 2011 23:47:02 +0100
Subject: [antlr-interest] How to get information on the tokens that
	produced a tree node?
In-Reply-To: <CAHHXKCbzezSdceu4pbhJjATMV9+4OeZ=-OWARyZeYzNhrs8U4w@mail.gmail.com>
References: <CAHHXKCbzezSdceu4pbhJjATMV9+4OeZ=-OWARyZeYzNhrs8U4w@mail.gmail.com>
Message-ID: <CAHHXKCZZSxUvZioNo7qdMCcuBAu41Rz5h7s=B7hoGmb5nJM6-A@mail.gmail.com>

Sory for the ping, but is their a way get information on the source input
(line number for example) from the tree grammar & AST side?

2011/12/16 Gonzague Reydet <gonzague.reydet at gmail.com>

> Hi all,
>
> I am working on a lexer & parser grammar that produce an AST from an input
> file. The AST is then passed to a tree grammar that calls my custom code. I
> think it is a classic ANTLR pattern, isn't it?
> When an error is detected during the tree parsing, I am looking for a way
> to print error with information on the original input tokens, not on the
> tree node which is not relevant for the end user.
> How to get information on the origin input file from the display error
> function of the tree grammar? Is there a link between the tree node stream
> of the AST and the token stream produced by the lexer?
>
> Note that my target language is C.
>
> Regards,
> Gonzague.
>

From parrt at cs.usfca.edu  Wed Dec 28 14:47:54 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 28 Dec 2011 14:47:54 -0800
Subject: [antlr-interest] Antlr3.4 Python bugs, workarounds
In-Reply-To: <CAE33G642=9wHcY1ofj4UogteExF6a_91+eGxr7Nx70PUUs+q2g@mail.gmail.com>
References: <CAN51Nt60R=9DF1+BWvsnMQShLE7GRpXmm5o30DnZ+KLZq8duUA@mail.gmail.com>
	<CAN51Nt4Dp7yMUSkNqYnrkMvthRB2p0UA4g4TB5DZhi-ywn0THA@mail.gmail.com>
	<CAE33G67XoyDyGcdL2YmsptmU0S_NyPfTHrb1zanA3Y0t8miDjA@mail.gmail.com>
	<CAN51Nt5aQTu1jqeXuCUhHYHXCy0Xsq00vgCB-BEWhjSqT5z8Qw@mail.gmail.com>
	<CAE33G642=9wHcY1ofj4UogteExF6a_91+eGxr7Nx70PUUs+q2g@mail.gmail.com>
Message-ID: <FE073D71-BB07-47D2-9473-DDADB3CCD3FB@cs.usfca.edu>


On Dec 27, 2011, at 5:08 PM, Benjamin Niemann wrote:
>> Hi Benjamin,
>> 
>> I was meddling around with the stg templates for Python in trying to
>> fix some other bugs I reported in another thread, and after updating
>> the files in antlr-3.4-complete.jar this problem was alleviated.
>> 
>> I narrowed down the diff and discovered that the stg templates in the
>> original jar all had DOS line endings (that is, \r\n instead of just
>> \n), and that removing all the carriage returns in
>> org/antlr/codegen/templates/Python/Python.stg solved the issue of the
>> elif being split across a newline.
>> 
>> That certainly explains why it only showed in antlr-3.4-complete.jar,
>> since the templates included with antlr-3.4.tar.gz did not have the
>> carriage returns. :)
> 
> Good catch, thanks a lot for figuring that out.
> That seems like a bug in stringtemplate to me - I thought it was
> smarter about dealing with line endings.
> 
> Ter:
> Was the jar built on a windows box?

nope. mac os x.

> I assume perforce adds the CRLFs
> when checking out the files under windows - the files are stored as
> "text", i.e. line endings are converted to the native system.

that's correct i think.

> Unless ST can be taught to deal with that properly, we could store the
> templates as binary in the repository - but that could be messy when
> someone actually wants to edit them under windows and it's hard to
> notice when CRs creep back in.
> Or avoid building jars on windows ;)
> This probably affects other targets as well, but those are probably
> less picky about some extra whitespace here and there. Could lead to
> some obscure bugs though.

ST emits proper newlines per platform and should read \r\n just like \n.  BUT?apparently not ;)  I'm adding to list to check ST v4 to see how it works.

Ter

From jimi at temporal-wave.com  Wed Dec 28 15:48:57 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 28 Dec 2011 15:48:57 -0800
Subject: [antlr-interest] How to get information on the tokens that
 produced a tree node?
In-Reply-To: <CAHHXKCZZSxUvZioNo7qdMCcuBAu41Rz5h7s=B7hoGmb5nJM6-A@mail.gmail.com>
References: <CAHHXKCbzezSdceu4pbhJjATMV9+4OeZ=-OWARyZeYzNhrs8U4w@mail.gmail.com>
	<CAHHXKCZZSxUvZioNo7qdMCcuBAu41Rz5h7s=B7hoGmb5nJM6-A@mail.gmail.com>
Message-ID: <4923e2861f2ba4c315e835f1415b406d@mail.gmail.com>

Did you check the archives? I am sure that I have answered this before.
But you get the start and end token from the node, then ask the start
token for its information and the end token for its information, and then
you have the complete span of a node. Beware of -> ^(NODE1 c u ^(NODE2 x))
as NODE2 won't get the span information when the rewrite is like that.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gonzague Reydet
> Sent: Wednesday, December 28, 2011 2:47 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] How to get information on the tokens that
> produced a tree node?
>
> Sory for the ping, but is their a way get information on the source
> input (line number for example) from the tree grammar & AST side?
>
> 2011/12/16 Gonzague Reydet <gonzague.reydet at gmail.com>
>
> > Hi all,
> >
> > I am working on a lexer & parser grammar that produce an AST from an
> > input file. The AST is then passed to a tree grammar that calls my
> > custom code. I think it is a classic ANTLR pattern, isn't it?
> > When an error is detected during the tree parsing, I am looking for a
> > way to print error with information on the original input tokens, not
> > on the tree node which is not relevant for the end user.
> > How to get information on the origin input file from the display
> error
> > function of the tree grammar? Is there a link between the tree node
> > stream of the AST and the token stream produced by the lexer?
> >
> > Note that my target language is C.
> >
> > Regards,
> > Gonzague.
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From mat at mad.id.au  Wed Dec 28 21:47:53 2011
From: mat at mad.id.au (mat dodgson)
Date: Thu, 29 Dec 2011 16:47:53 +1100
Subject: [antlr-interest] Antlr 4 grammar options
Message-ID: <CAGc+C8oqerJg-fiqOgNvt817ekA1W_khwMkeBTj3tboK_0OUbg@mail.gmail.com>

Hi folks!

First let me say that I've been using Antlr for a short time but it's
great! I'm particularly excited about the new Java listener mechanism - it
makes life much simpler in certain scenarios!

I downloaded the latest antlr4 and stringtemplate4 today from github and
compiled them. I'm having a problem with an options block for a multi line
comment. Has the syntax for options changed in antlr v4 grammars?

Here's the comment rule from my grammar:

COMMENT
    :   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

The COMMENT rule was auto generated by antlrworks. The error I'm getting is
related to the options block on the multiline comment. It just looks like
it's not expecting the options block at that point:

error(15): LTM_ParseTree.g:43:15: required (...)+ loop did not match
anything at input 'options {' while looking for lexer rule element
error(15): LTM_ParseTree.g:43:37: '}' came as a complete surprise to me

line 43 is the multiline comment.

If I remove the options block and the colon the grammar works however I
don't want a greedy comment block in my grammar.

I know antlr v4 hasn't been released yet: have options like this been
implemented yet? Can anyone suggest anything?

Thanks

Mat Dodgson

From parrt at cs.usfca.edu  Thu Dec 29 09:23:28 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 29 Dec 2011 09:23:28 -0800
Subject: [antlr-interest] Antlr 4 grammar options
In-Reply-To: <CAGc+C8oqerJg-fiqOgNvt817ekA1W_khwMkeBTj3tboK_0OUbg@mail.gmail.com>
References: <CAGc+C8oqerJg-fiqOgNvt817ekA1W_khwMkeBTj3tboK_0OUbg@mail.gmail.com>
Message-ID: <9221D0DF-C228-4B87-B070-0A9B4FDA1694@cs.usfca.edu>

Hi Mat. .* is nongreedy by default in v4.
Ter
On Dec 28, 2011, at 9:47 PM, mat dodgson wrote:

> Hi folks!
> 
> First let me say that I've been using Antlr for a short time but it's
> great! I'm particularly excited about the new Java listener mechanism - it
> makes life much simpler in certain scenarios!
> 
> I downloaded the latest antlr4 and stringtemplate4 today from github and
> compiled them. I'm having a problem with an options block for a multi line
> comment. Has the syntax for options changed in antlr v4 grammars?
> 
> Here's the comment rule from my grammar:
> 
> COMMENT
>    :   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
>    |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
>    ;
> 
> The COMMENT rule was auto generated by antlrworks. The error I'm getting is
> related to the options block on the multiline comment. It just looks like
> it's not expecting the options block at that point:
> 
> error(15): LTM_ParseTree.g:43:15: required (...)+ loop did not match
> anything at input 'options {' while looking for lexer rule element
> error(15): LTM_ParseTree.g:43:37: '}' came as a complete surprise to me
> 
> line 43 is the multiline comment.
> 
> If I remove the options block and the colon the grammar works however I
> don't want a greedy comment block in my grammar.
> 
> I know antlr v4 hasn't been released yet: have options like this been
> implemented yet? Can anyone suggest anything?
> 
> Thanks
> 
> Mat Dodgson
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu Dec 29 10:56:27 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 29 Dec 2011 10:56:27 -0800
Subject: [antlr-interest] Mailing list / antlr.org going down for a day or so
Message-ID: <895F85CC-072F-40E1-8EF2-228410B69230@cs.usfca.edu>

Hi, they're cutting power to the antlr.org megaplex tomorrow for the day California time. the machines will be back up on Saturday I guess.

sorry for any inconvenience?

Ter

From gonzague.reydet at gmail.com  Thu Dec 29 11:01:32 2011
From: gonzague.reydet at gmail.com (Gonzague Reydet)
Date: Thu, 29 Dec 2011 20:01:32 +0100
Subject: [antlr-interest] How to get information on the tokens that
 produced a tree node?
In-Reply-To: <4923e2861f2ba4c315e835f1415b406d@mail.gmail.com>
References: <CAHHXKCbzezSdceu4pbhJjATMV9+4OeZ=-OWARyZeYzNhrs8U4w@mail.gmail.com>
	<CAHHXKCZZSxUvZioNo7qdMCcuBAu41Rz5h7s=B7hoGmb5nJM6-A@mail.gmail.com>
	<4923e2861f2ba4c315e835f1415b406d@mail.gmail.com>
Message-ID: <CAHHXKCbb1uhNxcEcouzu6vUg2uAGm4vzYvt3HQysGyqF5ZGe1Q@mail.gmail.com>

Thank you for the reply Jim!
Actually I did not know what keyword to search for my question in
markmail...

I did not tried again since your reply but I remember from my initial
investigation that the tokens' information of the start & end base tree
only gave information of the node position on the AST, not the line and
character number in the input file.
Am I wrong?

Regards,
Gonzague

2011/12/29 Jim Idle <jimi at temporal-wave.com>

> Did you check the archives? I am sure that I have answered this before.
> But you get the start and end token from the node, then ask the start
> token for its information and the end token for its information, and then
> you have the complete span of a node. Beware of -> ^(NODE1 c u ^(NODE2 x))
> as NODE2 won't get the span information when the rewrite is like that.
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Gonzague Reydet
> > Sent: Wednesday, December 28, 2011 2:47 PM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] How to get information on the tokens that
> > produced a tree node?
> >
> > Sory for the ping, but is their a way get information on the source
> > input (line number for example) from the tree grammar & AST side?
> >
> > 2011/12/16 Gonzague Reydet <gonzague.reydet at gmail.com>
> >
> > > Hi all,
> > >
> > > I am working on a lexer & parser grammar that produce an AST from an
> > > input file. The AST is then passed to a tree grammar that calls my
> > > custom code. I think it is a classic ANTLR pattern, isn't it?
> > > When an error is detected during the tree parsing, I am looking for a
> > > way to print error with information on the original input tokens, not
> > > on the tree node which is not relevant for the end user.
> > > How to get information on the origin input file from the display
> > error
> > > function of the tree grammar? Is there a link between the tree node
> > > stream of the AST and the token stream produced by the lexer?
> > >
> > > Note that my target language is C.
> > >
> > > Regards,
> > > Gonzague.
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
T?l : +33 (0)6 21 02 90 48

From jimi at temporal-wave.com  Thu Dec 29 11:43:10 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 29 Dec 2011 11:43:10 -0800
Subject: [antlr-interest] How to get information on the tokens that
 produced a tree node?
In-Reply-To: <CAHHXKCbb1uhNxcEcouzu6vUg2uAGm4vzYvt3HQysGyqF5ZGe1Q@mail.gmail.com>
References: <CAHHXKCbzezSdceu4pbhJjATMV9+4OeZ=-OWARyZeYzNhrs8U4w@mail.gmail.com>
	<CAHHXKCZZSxUvZioNo7qdMCcuBAu41Rz5h7s=B7hoGmb5nJM6-A@mail.gmail.com>
	<4923e2861f2ba4c315e835f1415b406d@mail.gmail.com>
	<CAHHXKCbb1uhNxcEcouzu6vUg2uAGm4vzYvt3HQysGyqF5ZGe1Q@mail.gmail.com>
Message-ID: <7f87fb7d561f30053b5e3ff5d256d5c7@mail.gmail.com>

You get the token position I think, then you get the tokens, and ask for
the information from them.



Jim



*From:* Gonzague Reydet [mailto:gonzague.reydet at gmail.com]
*Sent:* Thursday, December 29, 2011 11:02 AM
*To:* Jim Idle
*Cc:* antlr-interest at antlr.org
*Subject:* Re: [antlr-interest] How to get information on the tokens that
produced a tree node?



Thank you for the reply Jim!

Actually I did not know what keyword to search for my question in
markmail...



I did not tried again since your reply but I remember from my initial
investigation that the tokens' information of the start & end base tree
only gave information of the node position on the AST, not the line and
character number in the input file.

Am I wrong?



Regards,

Gonzague

2011/12/29 Jim Idle <jimi at temporal-wave.com>

Did you check the archives? I am sure that I have answered this before.
But you get the start and end token from the node, then ask the start
token for its information and the end token for its information, and then
you have the complete span of a node. Beware of -> ^(NODE1 c u ^(NODE2 x))
as NODE2 won't get the span information when the rewrite is like that.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gonzague Reydet
> Sent: Wednesday, December 28, 2011 2:47 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] How to get information on the tokens that
> produced a tree node?
>
> Sory for the ping, but is their a way get information on the source
> input (line number for example) from the tree grammar & AST side?
>
> 2011/12/16 Gonzague Reydet <gonzague.reydet at gmail.com>
>
> > Hi all,
> >
> > I am working on a lexer & parser grammar that produce an AST from an
> > input file. The AST is then passed to a tree grammar that calls my
> > custom code. I think it is a classic ANTLR pattern, isn't it?
> > When an error is detected during the tree parsing, I am looking for a
> > way to print error with information on the original input tokens, not
> > on the tree node which is not relevant for the end user.
> > How to get information on the origin input file from the display
> error
> > function of the tree grammar? Is there a link between the tree node
> > stream of the AST and the token stream produced by the lexer?
> >
> > Note that my target language is C.
> >
> > Regards,
> > Gonzague.
> >
>

> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address





-- 
T?l : +33 (0)6 21 02 90 48

From parrt at cs.usfca.edu  Thu Dec 29 15:24:40 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 29 Dec 2011 15:24:40 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
Message-ID: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>

Hi, For those of you secretly playing with v4 using the repository, don't forget that you can use left recursive expression rules now. These are not only faster at runtime, they are easier to specify. ANTLR unravels it to nonrecursive rules they use semantic predicates to compare operator precedence. Here's a sample expression rule for the R language. Believe it or not, that crap works in a top-down parser generator. Oh, and there is no such thing is parser backtracking a more. The new adaptive LL(*) simply makes all the right choices without backtracking in the prediction or in the parser.

v4 code name: Honey Badger, after The Crazy Nastyass Honey Badger:

http://www.youtube.com/watch?v=4r7wHMg5Yjg

It's hilarious if you haven't seen it. "ANTLR v4 doesn't care. It's bad ass." ;)

Ter
------------
expr    :       '{' exprlist '}'
        |       '(' expr ')'
        |       expr '[[' sublist ']' ']'
        |       expr '[' sublist ']'
        |       expr ('::'|':::') expr
        |       expr ('$'|'@') expr
        |       expr '^'<assoc=right> expr
        |       ('-'|'+') expr
        |       expr ':' expr
        |       expr USER_OP expr
        |       expr ('*'|'/') expr
        |       expr ('+'|'-') expr
        |       expr ('>'|'>='|'<'|'<='|'=='|'!=') expr
        |       '!' expr
        |       expr ('&'|'&&') expr
        |       expr ('|'|'||') expr
        |       '~' expr
        |       expr '~' expr
        |       expr ('->'|'->>'|':=') expr
        |       expr ('<-'<assoc=right>|'<<-'<assoc=right>) expr

        |       'function' '(' formlist ')' expr
        |       expr '(' sublist ')'

        |       'if' '(' expr ')' expr
        |       'if' '(' expr ')' expr 'else' expr
        |       'for' '(' ID 'in' expr ')' expr
        |       'while' '(' expr ')' expr
        |       'repeat' expr

        |       '?' expr

        |       'next'
        |       'break'

        |       ID
        |       STRING
        |       HEX
        |       INT
        |       FLOAT
        |       COMPLEX
        |       'NULL'
        |       'NA'
        |       'Inf'
        |       'NaN'
        |       'TRUE'
        |       'FALSE'
        ;


From kferrio at gmail.com  Thu Dec 29 15:58:07 2011
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 29 Dec 2011 16:58:07 -0700
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
Message-ID: <CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>

Excellent.  I always thought that it should be possible to support
left-recursion with LL(*) but I did not presume that it would be efficient
or easy or wise.  Since I tend to think left-recursively a lot, I am a
happy honey badger, and I parse whatever I want!

Kyle
 On Dec 29, 2011 4:24 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

> Hi, For those of you secretly playing with v4 using the repository, don't
> forget that you can use left recursive expression rules now. These are not
> only faster at runtime, they are easier to specify. ANTLR unravels it to
> nonrecursive rules they use semantic predicates to compare operator
> precedence. Here's a sample expression rule for the R language. Believe it
> or not, that crap works in a top-down parser generator. Oh, and there is no
> such thing is parser backtracking a more. The new adaptive LL(*) simply
> makes all the right choices without backtracking in the prediction or in
> the parser.
>
> v4 code name: Honey Badger, after The Crazy Nastyass Honey Badger:
>
> http://www.youtube.com/watch?v=4r7wHMg5Yjg
>
> It's hilarious if you haven't seen it. "ANTLR v4 doesn't care. It's bad
> ass." ;)
>
> Ter
> ------------
> expr    :       '{' exprlist '}'
>        |       '(' expr ')'
>        |       expr '[[' sublist ']' ']'
>        |       expr '[' sublist ']'
>        |       expr ('::'|':::') expr
>        |       expr ('$'|'@') expr
>        |       expr '^'<assoc=right> expr
>        |       ('-'|'+') expr
>        |       expr ':' expr
>        |       expr USER_OP expr
>        |       expr ('*'|'/') expr
>        |       expr ('+'|'-') expr
>        |       expr ('>'|'>='|'<'|'<='|'=='|'!=') expr
>        |       '!' expr
>        |       expr ('&'|'&&') expr
>        |       expr ('|'|'||') expr
>        |       '~' expr
>        |       expr '~' expr
>        |       expr ('->'|'->>'|':=') expr
>        |       expr ('<-'<assoc=right>|'<<-'<assoc=right>) expr
>
>        |       'function' '(' formlist ')' expr
>        |       expr '(' sublist ')'
>
>        |       'if' '(' expr ')' expr
>        |       'if' '(' expr ')' expr 'else' expr
>        |       'for' '(' ID 'in' expr ')' expr
>        |       'while' '(' expr ')' expr
>        |       'repeat' expr
>
>        |       '?' expr
>
>        |       'next'
>        |       'break'
>
>        |       ID
>        |       STRING
>        |       HEX
>        |       INT
>        |       FLOAT
>        |       COMPLEX
>        |       'NULL'
>        |       'NA'
>        |       'Inf'
>        |       'NaN'
>        |       'TRUE'
>        |       'FALSE'
>        ;
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Thu Dec 29 16:08:39 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 29 Dec 2011 16:08:39 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
Message-ID: <9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>

Hi Kyle, I've also implemented the shorthand [] for lexers. :) woot!

// "The keywords node, edge, graph, digraph, subgraph, and strict are
// case-independent"
STRICT      :   [Ss][Tt][Rr][Ii][Cc][Tt] ;
GRAPH       :   [Gg][Rr][Aa][Pp][Hh] ;
DIGRAPH     :   [Dd][Ii][Gg][Rr][Aa][Pp][Hh] ;
NODE        :   [Nn][Oo][Dd][Ee] ;
EDGE        :   [Ee][Dd][Gg][Ee] ;
SUBGRAPH    :   [Ss][Uu][Bb][Gg][Rr][Aa][Pp][Hh] ;

Ter

On Dec 29, 2011, at 3:58 PM, Kyle Ferrio wrote:

> Excellent.  I always thought that it should be possible to support
> left-recursion with LL(*) but I did not presume that it would be efficient
> or easy or wise.  Since I tend to think left-recursively a lot, I am a
> happy honey badger, and I parse whatever I want!
> 
> Kyle


From jimi at temporal-wave.com  Thu Dec 29 16:16:25 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 29 Dec 2011 16:16:25 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
	<9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
Message-ID: <fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>

What about something like:

EDGE: `EDGE` ;  // Backtick is case insensitive

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Thursday, December 29, 2011 4:09 PM
> To: antlr-interest Interest
> Subject: Re: [antlr-interest] v4 "Honey Badger" teaser
>
> Hi Kyle, I've also implemented the shorthand [] for lexers. :) woot!
>
> // "The keywords node, edge, graph, digraph, subgraph, and strict are
> // case-independent"
> STRICT      :   [Ss][Tt][Rr][Ii][Cc][Tt] ;
> GRAPH       :   [Gg][Rr][Aa][Pp][Hh] ;
> DIGRAPH     :   [Dd][Ii][Gg][Rr][Aa][Pp][Hh] ;
> NODE        :   [Nn][Oo][Dd][Ee] ;
> EDGE        :   [Ee][Dd][Gg][Ee] ;
> SUBGRAPH    :   [Ss][Uu][Bb][Gg][Rr][Aa][Pp][Hh] ;
>
> Ter
>
> On Dec 29, 2011, at 3:58 PM, Kyle Ferrio wrote:
>
> > Excellent.  I always thought that it should be possible to support
> > left-recursion with LL(*) but I did not presume that it would be
> > efficient or easy or wise.  Since I tend to think left-recursively a
> > lot, I am a happy honey badger, and I parse whatever I want!
> >
> > Kyle
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From parrt at cs.usfca.edu  Thu Dec 29 16:47:05 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 29 Dec 2011 16:47:05 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
	<9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
	<fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
Message-ID: <7FD1BE8E-98A0-4D84-BA67-B0F3269BD85A@cs.usfca.edu>

Could be interesting? I was kind of hoping to save those `?` for future use. but yes making case insensitivity easier it would be nice.

honey badger is crazy

Ter
On Dec 29, 2011, at 4:16 PM, Jim Idle wrote:

> What about something like:
> 
> EDGE: `EDGE` ;  // Backtick is case insensitive
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Thursday, December 29, 2011 4:09 PM
>> To: antlr-interest Interest
>> Subject: Re: [antlr-interest] v4 "Honey Badger" teaser
>> 
>> Hi Kyle, I've also implemented the shorthand [] for lexers. :) woot!
>> 
>> // "The keywords node, edge, graph, digraph, subgraph, and strict are
>> // case-independent"
>> STRICT      :   [Ss][Tt][Rr][Ii][Cc][Tt] ;
>> GRAPH       :   [Gg][Rr][Aa][Pp][Hh] ;
>> DIGRAPH     :   [Dd][Ii][Gg][Rr][Aa][Pp][Hh] ;
>> NODE        :   [Nn][Oo][Dd][Ee] ;
>> EDGE        :   [Ee][Dd][Gg][Ee] ;
>> SUBGRAPH    :   [Ss][Uu][Bb][Gg][Rr][Aa][Pp][Hh] ;
>> 
>> Ter
>> 
>> On Dec 29, 2011, at 3:58 PM, Kyle Ferrio wrote:
>> 
>>> Excellent.  I always thought that it should be possible to support
>>> left-recursion with LL(*) but I did not presume that it would be
>>> efficient or easy or wise.  Since I tend to think left-recursively a
>>> lot, I am a happy honey badger, and I parse whatever I want!
>>> 
>>> Kyle
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From asicaddress at gmail.com  Thu Dec 29 17:59:44 2011
From: asicaddress at gmail.com (A Z)
Date: Fri, 30 Dec 2011 07:59:44 +0600
Subject: [antlr-interest] C target memory usage
In-Reply-To: <d2ad6f87e09d3bf7e7d7101475effb5d@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<d2ad6f87e09d3bf7e7d7101475effb5d@mail.gmail.com>
Message-ID: <CAP86aOciZA1AL6sBUZwcYuBhnktTVz+uJprnBFYCsx9shFefQA@mail.gmail.com>

I ran some more experiments using valgrind to profile the heap allocations
and I now see about 70:1 using only my modified lexer on a 64-bit system.
Enabling parsing with AST construction roughly doubles this.



On Mon, Dec 26, 2011 at 11:33 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> Are you sure that this is not because you are using $text? Anyway, over
> the next few days I am going to make some changes to the runtime for speed
> and memory use, that will probably help everyone.
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Richard Gildea
> > Sent: Thursday, December 22, 2011 8:00 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] C target memory usage
> >
> > Hi,
> >
> > We have been successfully using antlr in the form of the C target for
> > some time, however we have recently noticed that the memory consumption
> > can be quite large - up to 150 times the size of the input file. Is
> > this factor of
> > ~150 to be expected, or does it indicate that we may be doing something
> > wrong? For the vast majority of possible inputs this does not cause a
> > problem, however some input files can be as large as 0.5 Gb, giving a
> > peak memory usage of 75 Gb - not exactly feasible on most machines!
> >
> > Does anyone have any examples of using a custom lexer that provides a
> > token buffer rather than storing all tokens in memory?
> >
> > Cheers,
> >
> > Richard
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From s.barnett-cormack at lancaster.ac.uk  Thu Dec 29 18:07:01 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Fri, 30 Dec 2011 02:07:01 +0000
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <7FD1BE8E-98A0-4D84-BA67-B0F3269BD85A@cs.usfca.edu>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
	<9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
	<fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
	<7FD1BE8E-98A0-4D84-BA67-B0F3269BD85A@cs.usfca.edu>
Message-ID: <4EFD1CC5.9060403@lancaster.ac.uk>

Assuming unicode featureset, a proper semantic case insensitivity would 
be lovely - so the unicode properties were used to determine whether 
there was a case-insensitive match. Someone might have a use for other 
unicode matching, though, like base-glyph matching (ignoring diacritics).

No idea if either is practical...

On 30/12/2011 00:47, Terence Parr wrote:
> Could be interesting? I was kind of hoping to save those `?` for future use. but yes making case insensitivity easier it would be nice.
>
> honey badger is crazy
>
> Ter
> On Dec 29, 2011, at 4:16 PM, Jim Idle wrote:
>
>> What about something like:
>>
>> EDGE: `EDGE` ;  // Backtick is case insensitive
>>
>> Jim
>>
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> bounces at antlr.org] On Behalf Of Terence Parr
>>> Sent: Thursday, December 29, 2011 4:09 PM
>>> To: antlr-interest Interest
>>> Subject: Re: [antlr-interest] v4 "Honey Badger" teaser
>>>
>>> Hi Kyle, I've also implemented the shorthand [] for lexers. :) woot!
>>>
>>> // "The keywords node, edge, graph, digraph, subgraph, and strict are
>>> // case-independent"
>>> STRICT      :   [Ss][Tt][Rr][Ii][Cc][Tt] ;
>>> GRAPH       :   [Gg][Rr][Aa][Pp][Hh] ;
>>> DIGRAPH     :   [Dd][Ii][Gg][Rr][Aa][Pp][Hh] ;
>>> NODE        :   [Nn][Oo][Dd][Ee] ;
>>> EDGE        :   [Ee][Dd][Gg][Ee] ;
>>> SUBGRAPH    :   [Ss][Uu][Bb][Gg][Rr][Aa][Pp][Hh] ;
>>>
>>> Ter
>>>
>>> On Dec 29, 2011, at 3:58 PM, Kyle Ferrio wrote:
>>>
>>>> Excellent.  I always thought that it should be possible to support
>>>> left-recursion with LL(*) but I did not presume that it would be
>>>> efficient or easy or wise.  Since I tend to think left-recursively a
>>>> lot, I am a happy honey badger, and I parse whatever I want!
>>>>
>>>> Kyle
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>> email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From gwlist at grahamwideman.com  Thu Dec 29 18:27:10 2011
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 29 Dec 2011 18:27:10 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
Message-ID: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>

A way to deal with case-insensitivity that is less noisy to read would be a great benefit, but I too was thinking along the lines of Sam:

At 12/29/2011 06:07 PM, Sam Barnett-Cormack wrote:
>Assuming unicode featureset, a proper semantic case insensitivity would 
>be lovely - so the unicode properties were used to determine whether 
>there was a case-insensitive match. Someone might have a use for other 
>unicode matching, though, like base-glyph matching (ignoring diacritics).

... which led me to think that a more flexible way to say "apply case insensitivity to this string" is needed, that could invoke either:

a) one or another built-in transformation, such as standard ASCII case insensitivity:  CI("AB") --> [Aa][Bb], and possibly other built-in standards for a range of unicode character sets.

b) or invokes a user-supplied plug-in: CI("AB", MyTrans) --> whatever MyTrans returns.

c) or, with syntax similar to (b), and to avoid code-language-dependency, invokes something specified elsewhere in the grammar file using regex or whatever.

I'm not particularly advocating the above syntax, just the general idea of facilitating shorthands for generating the fully-spelled-out series of character sets, and also advocating trying to avoid special-casing one particular variety of case-insensitivity within ANTLR syntax. 

Hmmm, this is sliding perilously close to ANTLR preprocessor.  :-)

-- Graham


From gwlist at grahamwideman.com  Thu Dec 29 18:39:25 2011
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 29 Dec 2011 18:39:25 -0800
Subject: [antlr-interest] Complete ANTLR 4 grammar for ANTLR 4?
Message-ID: <20111230023915.NJMT3806.fed1rmfepo101.cox.net@fed1rmimpo109.cox.net>

Probably for Terence:

I have lost track of the current state-of-play/plans on this issue.

Is there, (or is there a plan for), an ANTLR 4 grammar that completely specifies how to  digest the ANTLR 4 language itself?  (E.g.: avoids hand-written lexer.)

Thanks,

-- Graham


From antlr at mirality.co.nz  Fri Dec 30 14:34:53 2011
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 31 Dec 2011 11:34:53 +1300
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <7FD1BE8E-98A0-4D84-BA67-B0F3269BD85A@cs.usfca.edu>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
	<9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
	<fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
	<7FD1BE8E-98A0-4D84-BA67-B0F3269BD85A@cs.usfca.edu>
Message-ID: <20111230223509.57CFC3418488@www.antlr.org>

At 13:47 30/12/2011, Terence Parr wrote:
 >Could be interesting
 I was kind of hoping to 
save those `
` for
 >future use. but yes making case insensitivity 
easier it would be
 >nice.

How about a rule-level option 
"case-insensitive=true" (which could also be 
applied globally)?  (Or maybe "caseless=true" or 
something, just to make it shorter.)

This might get a little messy between "real" 
lexer rules, fragments, and embedded literals in 
parser rules, though.


On a tangentially related note, it'd be good if 
v4 fixed up the lexer-predicate problem (where 
predicates get ignored because they only apply to 
alts, not rule selection; ignoring the fact that 
lexer rules are really just alts of the implicit 
TOKENS rule) -- then you could handle Graham's 
more-complicated-character-matching cases with 
something like this:

   SPECIAL: { isSpecialThreeCharKeyword() }? . . .;

Or even:

   SPECIAL: { isSpecialKeyword() }? { emitSpecialKeyword(); };


From antlr at mirality.co.nz  Fri Dec 30 14:38:07 2011
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 31 Dec 2011 11:38:07 +1300
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <20111230223509.57CFC3418488@www.antlr.org>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
	<9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
	<fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
	<7FD1BE8E-98A0-4D84-BA67-B0F3269BD85A@cs.usfca.edu>
	<20111230223509.57CFC3418488@www.antlr.org>
Message-ID: <20111230223818.8FA0B341848B@www.antlr.org>

Mere moments ago, quoth I:
 >How about a rule-level option
 >"case-insensitive=true" (which could also be
 >applied globally)?  (Or maybe "caseless=true" or
 >something, just to make it shorter.)

Or, to avoid the potential double-negative: "case-sensitive=false" 
or just "case=false".


From researcher0x00 at gmail.com  Fri Dec 30 05:40:17 2011
From: researcher0x00 at gmail.com (Eric)
Date: Fri, 30 Dec 2011 08:40:17 -0500
Subject: [antlr-interest] ANTLR v4, honey badger. Questions now or later.
Message-ID: <CAN45N11U3fThV9gCZzKLeqAbbnOzHMjkUU9uCtBZjQ0tVrAgiw@mail.gmail.com>

Ter,

Again let me thank those who are working on ANTLR v4, and ANTLRWorks v2. I
know some, if not all, of you are putting in serious time on this.

Let met also thank Jim and others who helped to keep this list moving
along during the past semester.

With regards to honey badger and ANTLRWorks v2, are you opening the gates
for questions to be asked here or should we hold off until an official
release?

Thanks, Eric

From kferrio at gmail.com  Thu Dec 29 20:33:39 2011
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 29 Dec 2011 21:33:39 -0700
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
	<9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
	<fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
Message-ID: <CAAfeETquOSuhH-QJnaXukEqa5V=m6Tfz0uNR7XYFo6b_mhE7iQ@mail.gmail.com>

I was thinking something similar, Jim.  But what if I want to force the
case of some letters?  I know, we should focus on the 90% use cases, but...
A nice thong about Ter's notation is that it allows substitution of
arbitrary characters, not just those related by case flips.
 On Dec 29, 2011 5:16 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:

> What about something like:
>
> EDGE: `EDGE` ;  // Backtick is case insensitive
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Terence Parr
> > Sent: Thursday, December 29, 2011 4:09 PM
> > To: antlr-interest Interest
> > Subject: Re: [antlr-interest] v4 "Honey Badger" teaser
> >
> > Hi Kyle, I've also implemented the shorthand [] for lexers. :) woot!
> >
> > // "The keywords node, edge, graph, digraph, subgraph, and strict are
> > // case-independent"
> > STRICT      :   [Ss][Tt][Rr][Ii][Cc][Tt] ;
> > GRAPH       :   [Gg][Rr][Aa][Pp][Hh] ;
> > DIGRAPH     :   [Dd][Ii][Gg][Rr][Aa][Pp][Hh] ;
> > NODE        :   [Nn][Oo][Dd][Ee] ;
> > EDGE        :   [Ee][Dd][Gg][Ee] ;
> > SUBGRAPH    :   [Ss][Uu][Bb][Gg][Rr][Aa][Pp][Hh] ;
> >
> > Ter
> >
> > On Dec 29, 2011, at 3:58 PM, Kyle Ferrio wrote:
> >
> > > Excellent.  I always thought that it should be possible to support
> > > left-recursion with LL(*) but I did not presume that it would be
> > > efficient or easy or wise.  Since I tend to think left-recursively a
> > > lot, I am a happy honey badger, and I parse whatever I want!
> > >
> > > Kyle
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Thu Dec 29 20:35:52 2011
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 29 Dec 2011 21:35:52 -0700
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
References: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
Message-ID: <CAAfeETqoe7BLv95c_5suado02SppZW9_ZR-OPVh1iA_pa8hd-g@mail.gmail.com>

Yes, this starts to look like an antlr-to-antlr grammar.  :)
On Dec 29, 2011 7:27 PM, "Graham Wideman" <gwlist at grahamwideman.com> wrote:

> A way to deal with case-insensitivity that is less noisy to read would be
> a great benefit, but I too was thinking along the lines of Sam:
>
> At 12/29/2011 06:07 PM, Sam Barnett-Cormack wrote:
> >Assuming unicode featureset, a proper semantic case insensitivity would
> >be lovely - so the unicode properties were used to determine whether
> >there was a case-insensitive match. Someone might have a use for other
> >unicode matching, though, like base-glyph matching (ignoring diacritics).
>
> ... which led me to think that a more flexible way to say "apply case
> insensitivity to this string" is needed, that could invoke either:
>
> a) one or another built-in transformation, such as standard ASCII case
> insensitivity:  CI("AB") --> [Aa][Bb], and possibly other built-in
> standards for a range of unicode character sets.
>
> b) or invokes a user-supplied plug-in: CI("AB", MyTrans) --> whatever
> MyTrans returns.
>
> c) or, with syntax similar to (b), and to avoid code-language-dependency,
> invokes something specified elsewhere in the grammar file using regex or
> whatever.
>
> I'm not particularly advocating the above syntax, just the general idea of
> facilitating shorthands for generating the fully-spelled-out series of
> character sets, and also advocating trying to avoid special-casing one
> particular variety of case-insensitivity within ANTLR syntax.
>
> Hmmm, this is sliding perilously close to ANTLR preprocessor.  :-)
>
> -- Graham
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Fri Dec 30 16:44:15 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Dec 2011 16:44:15 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
References: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
Message-ID: <AABA454A-1DBE-46D1-8576-6DA08E7AEE02@cs.usfca.edu>

Hi Graham and crew?Fortunately case insensitive keywords are less common these days. Not sure it's worth adding some complexity to deal with it when the [?] thing it is okay.
Ter
On Dec 29, 2011, at 6:27 PM, Graham Wideman wrote:

> A way to deal with case-insensitivity that is less noisy to read would be a great benefit, but I too was thinking along the lines of Sam:
> 
> At 12/29/2011 06:07 PM, Sam Barnett-Cormack wrote:
>> Assuming unicode featureset, a proper semantic case insensitivity would 
>> be lovely - so the unicode properties were used to determine whether 
>> there was a case-insensitive match. Someone might have a use for other 
>> unicode matching, though, like base-glyph matching (ignoring diacritics).
> 
> ... which led me to think that a more flexible way to say "apply case insensitivity to this string" is needed, that could invoke either:
> 
> a) one or another built-in transformation, such as standard ASCII case insensitivity:  CI("AB") --> [Aa][Bb], and possibly other built-in standards for a range of unicode character sets.
> 
> b) or invokes a user-supplied plug-in: CI("AB", MyTrans) --> whatever MyTrans returns.
> 
> c) or, with syntax similar to (b), and to avoid code-language-dependency, invokes something specified elsewhere in the grammar file using regex or whatever.
> 
> I'm not particularly advocating the above syntax, just the general idea of facilitating shorthands for generating the fully-spelled-out series of character sets, and also advocating trying to avoid special-casing one particular variety of case-insensitivity within ANTLR syntax. 
> 
> Hmmm, this is sliding perilously close to ANTLR preprocessor.  :-)
> 
> -- Graham
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Fri Dec 30 16:45:11 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Dec 2011 16:45:11 -0800
Subject: [antlr-interest] Complete ANTLR 4 grammar for ANTLR 4?
In-Reply-To: <20111230023915.NJMT3806.fed1rmfepo101.cox.net@fed1rmimpo109.cox.net>
References: <20111230023915.NJMT3806.fed1rmfepo101.cox.net@fed1rmimpo109.cox.net>
Message-ID: <3B502697-11E0-40D7-B070-E726A5522E31@cs.usfca.edu>

On Dec 29, 2011, at 6:39 PM, Graham Wideman wrote:

> Probably for Terence:
> 
> I have lost track of the current state-of-play/plans on this issue.
> 
> Is there, (or is there a plan for), an ANTLR 4 grammar that completely specifies how to  digest the ANTLR 4 language itself?  (E.g.: avoids hand-written lexer.)

Sure. I think only ST uses a handbuilt lexer. Everything else uses ANTLR.  Sam Harwell is using v4 for the grammars inside AW2.  v4 pretty much sucks down any v3 grammar that I've run across.

Ter

From parrt at cs.usfca.edu  Fri Dec 30 16:47:14 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Dec 2011 16:47:14 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <4efe3c9b.2aaaec0a.75d1.ffffda02SMTPIN_ADDED@mx.google.com>
References: <F2B5B534-2E07-457A-9457-CA01D3E38F01@cs.usfca.edu>
	<CAAfeETqt9mVGyjAv88_Dp8FrMchTZ3a4MtN0nSTADv0xKY-6WA@mail.gmail.com>
	<9CFE01BB-8686-490F-8B49-7E5DE6CEEADE@cs.usfca.edu>
	<fec987679a6db3aa87181aba23b7dfa1@mail.gmail.com>
	<7FD1BE8E-98A0-4D84-BA67-B0F3269BD85A@cs.usfca.edu>
	<4efe3c9b.2aaaec0a.75d1.ffffda02SMTPIN_ADDED@mx.google.com>
Message-ID: <9073FC2A-31B8-454D-AB3C-1735B2B0EA88@cs.usfca.edu>


On Dec 30, 2011, at 2:34 PM, Gavin Lambert wrote:
> On a tangentially related note, it'd be good if v4 fixed up the lexer-predicate problem (where predicates get ignored because they only apply to alts, not rule selection; ignoring the fact that lexer rules are really just alts of the implicit TOKENS rule) -- then you could handle Graham's more-complicated-character-matching cases with something like this:
> 
>  SPECIAL: { isSpecialThreeCharKeyword() }? . . .;
> 
> Or even:
> 
>  SPECIAL: { isSpecialKeyword() }? { emitSpecialKeyword(); };

ThisHas been fixed, though for efficiency it's best if you put those predicates at the end of the rule. I cannot create a DFA looking through predicates. So it's best to let me create a DFA and then test the predicate at the end. er? maybe I hang onto the predicate until the end anyway. Can't remember. Point is that the lexers or SOOoooo much better you will believe it.

The thing that I'm really liking about v4 is that you can just give it any grammar you want and it will do its best.  it's the honey badger, and it's bad ass ;)

Ter


From parrt at cs.usfca.edu  Fri Dec 30 16:48:17 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Dec 2011 16:48:17 -0800
Subject: [antlr-interest] ANTLR v4, honey badger. Questions now or later.
In-Reply-To: <CAN45N11U3fThV9gCZzKLeqAbbnOzHMjkUU9uCtBZjQ0tVrAgiw@mail.gmail.com>
References: <CAN45N11U3fThV9gCZzKLeqAbbnOzHMjkUU9uCtBZjQ0tVrAgiw@mail.gmail.com>
Message-ID: <4D635B12-8F9E-4FE3-B54D-B9CEA7F4B8CD@cs.usfca.edu>


On Dec 30, 2011, at 5:40 AM, Eric wrote:
> With regards to honey badger and ANTLRWorks v2, are you opening the gates
> for questions to be asked here or should we hold off until an official
> release?

Sure. Sam and I hope to put out an early access release next week.  I'm building examples with v4 as we speak.

Ter

From ibre5041 at ibrezina.net  Sat Dec 31 01:54:04 2011
From: ibre5041 at ibrezina.net (Ib)
Date: Sat, 31 Dec 2011 10:54:04 +0100
Subject: [antlr-interest] Complete ANTLR 4 grammar for ANTLR 4?
Message-ID: <2ujd4llnp31c6ubmpn4phcqk.1325325244945@email.android.com>



Terence Parr <parrt at cs.usfca.edu> wrote:

>On Dec 29, 2011, at 6:39 PM, Graham Wideman wrote:
>
>> Probably for Terence:
>> 
>> I have lost track of the current state-of-play/plans on this issue.
>> 
>> Is there, (or is there a plan for), an ANTLR 4 grammar that completely specifies how to  digest the ANTLR 4 language itself?  (E.g.: avoids hand-written lexer.)
>
>Sure. I think only ST uses a handbuilt lexer. Everything else uses ANTLR.  Sam Harwell is using v4 for the grammars inside AW2.  v4 pretty much sucks down any v3 grammar that I've run across.
>
>Ter
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rgildea at gmail.com  Sat Dec 31 05:53:29 2011
From: rgildea at gmail.com (Richard Gildea)
Date: Sat, 31 Dec 2011 05:53:29 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <d2ad6f87e09d3bf7e7d7101475effb5d@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<d2ad6f87e09d3bf7e7d7101475effb5d@mail.gmail.com>
Message-ID: <CACCG97GtxdB9V_thXJ5meiFCurhpTVQ1iy-vDZeH=6eH=s-VQQ@mail.gmail.com>

Hi,

Thanks for you reply. No, we are not using the $text since I had read that
it could lead to increased memory usage. Are the improvements that you
mention targeted at ANTLR 4 or ANTLR 3.x?

Cheers,

Richard

On 26 December 2011 09:33, Jim Idle <jimi at temporal-wave.com> wrote:

> Are you sure that this is not because you are using $text? Anyway, over
> the next few days I am going to make some changes to the runtime for speed
> and memory use, that will probably help everyone.
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Richard Gildea
> > Sent: Thursday, December 22, 2011 8:00 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] C target memory usage
> >
> > Hi,
> >
> > We have been successfully using antlr in the form of the C target for
> > some time, however we have recently noticed that the memory consumption
> > can be quite large - up to 150 times the size of the input file. Is
> > this factor of
> > ~150 to be expected, or does it indicate that we may be doing something
> > wrong? For the vast majority of possible inputs this does not cause a
> > problem, however some input files can be as large as 0.5 Gb, giving a
> > peak memory usage of 75 Gb - not exactly feasible on most machines!
> >
> > Does anyone have any examples of using a custom lexer that provides a
> > token buffer rather than storing all tokens in memory?
> >
> > Cheers,
> >
> > Richard
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rgildea at gmail.com  Sat Dec 31 06:17:56 2011
From: rgildea at gmail.com (Richard Gildea)
Date: Sat, 31 Dec 2011 06:17:56 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <76104ebe54b20ee6373090b3265a6cd6@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
	<76104ebe54b20ee6373090b3265a6cd6@mail.gmail.com>
Message-ID: <CACCG97HXz+gUTRcFRm-UqCY-PMYe2av63FztY2DWZ=Jjg8F6FA@mail.gmail.com>

Hi,

Is there an rough estimate for a v4 release date (specifically the C++
target)?

Cheers,

Richard

On 26 December 2011 09:39, Jim Idle <jimi at temporal-wave.com> wrote:

> There is only going to be a C++ target for v4 - I don't have time to write
> it though and so I think that Sam will likely do that. The same things
> will apply to C++ as C# and generally it should be a lot faster.
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of A Z
> > Sent: Friday, December 23, 2011 7:09 PM
> > To: Richard Gildea
> > Cc: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] C target memory usage
> >
> > Hi Richard,
> >
> >   I see about 140:1 for the ratio of memory use to input size on a 64-
> > bit system. This is after I hacked commontoken to remove most of the
> > function pointers, which halved the size of the tokens. I didn't
> > investigate any further as I recall an email thread about ANTLR 4
> > indicating it would use 8-byte tokens instead of the 200+ byte tokens
> > 3.4 uses.
> >
> >
> > Looks like it may only be for C#.
> > http://markmail.org/message/eggfcjt3a6qdzkvc
> >
> > Ad
> >
> >
> > On Fri, Dec 23, 2011 at 10:00 AM, Richard Gildea <rgildea at gmail.com>
> > wrote:
> >
> > > Hi,
> > >
> > > We have been successfully using antlr in the form of the C target for
> > > some time, however we have recently noticed that the memory
> > > consumption can be quite large - up to 150 times the size of the
> > input
> > > file. Is this factor of
> > > ~150 to be expected, or does it indicate that we may be doing
> > > something wrong? For the vast majority of possible inputs this does
> > > not cause a problem, however some input files can be as large as 0.5
> > > Gb, giving a peak memory usage of 75 Gb - not exactly feasible on
> > most machines!
> > >
> > > Does anyone have any examples of using a custom lexer that provides a
> > > token buffer rather than storing all tokens in memory?
> > >
> > > Cheers,
> > >
> > > Richard
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe:
> > > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> > address
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rgildea at gmail.com  Sat Dec 31 06:21:01 2011
From: rgildea at gmail.com (Richard Gildea)
Date: Sat, 31 Dec 2011 06:21:01 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CAP86aOciZA1AL6sBUZwcYuBhnktTVz+uJprnBFYCsx9shFefQA@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<d2ad6f87e09d3bf7e7d7101475effb5d@mail.gmail.com>
	<CAP86aOciZA1AL6sBUZwcYuBhnktTVz+uJprnBFYCsx9shFefQA@mail.gmail.com>
Message-ID: <CACCG97FETU1VD37D3MWB9M3ekRkC8hvYGc0=qSi05SWu=q3=nw@mail.gmail.com>

Thanks, that is interesting. I didn't realise that AST construction could
double the memory usage.

On 29 December 2011 17:59, A Z <asicaddress at gmail.com> wrote:

> I ran some more experiments using valgrind to profile the heap allocations
> and I now see about 70:1 using only my modified lexer on a 64-bit system.
> Enabling parsing with AST construction roughly doubles this.
>
>
>
> On Mon, Dec 26, 2011 at 11:33 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
> > Are you sure that this is not because you are using $text? Anyway, over
> > the next few days I am going to make some changes to the runtime for
> speed
> > and memory use, that will probably help everyone.
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of Richard Gildea
> > > Sent: Thursday, December 22, 2011 8:00 PM
> > > To: antlr-interest at antlr.org
> > > Subject: [antlr-interest] C target memory usage
> > >
> > > Hi,
> > >
> > > We have been successfully using antlr in the form of the C target for
> > > some time, however we have recently noticed that the memory consumption
> > > can be quite large - up to 150 times the size of the input file. Is
> > > this factor of
> > > ~150 to be expected, or does it indicate that we may be doing something
> > > wrong? For the vast majority of possible inputs this does not cause a
> > > problem, however some input files can be as large as 0.5 Gb, giving a
> > > peak memory usage of 75 Gb - not exactly feasible on most machines!
> > >
> > > Does anyone have any examples of using a custom lexer that provides a
> > > token buffer rather than storing all tokens in memory?
> > >
> > > Cheers,
> > >
> > > Richard
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > > email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From s.barnett-cormack at lancaster.ac.uk  Sat Dec 31 07:46:43 2011
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sat, 31 Dec 2011 15:46:43 +0000
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <AABA454A-1DBE-46D1-8576-6DA08E7AEE02@cs.usfca.edu>
References: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
	<AABA454A-1DBE-46D1-8576-6DA08E7AEE02@cs.usfca.edu>
Message-ID: <4EFF2E63.3020603@lancaster.ac.uk>

I'm not sure it need be complexity so much as what many language guides 
I've read refer to as "syntactic sugar". This is exactly the kind of 
situation that syntactic sugar makes a language much more usable.

However, I will agree it's not that common these days. I still think a 
basic bit of syntactic sugar would be worthwhile.

By syntactic sugar, I mean something that could be acheived with [..], 
but providing a shortcut for common cases - such as case insensitivity. 
It's worth noting that there are uses other than case insensitivity for 
[..] syntax, just look how it gets used in regex. As an aside, isn't it 
weird the modern regex are still called regex, when they really aren't 
regular in a grammatic sense any more?

Sam

On 31/12/2011 00:44, Terence Parr wrote:
> Hi Graham and crew?Fortunately case insensitive keywords are less common these days. Not sure it's worth adding some complexity to deal with it when the [?] thing it is okay.
> Ter
> On Dec 29, 2011, at 6:27 PM, Graham Wideman wrote:
>
>> A way to deal with case-insensitivity that is less noisy to read would be a great benefit, but I too was thinking along the lines of Sam:
>>
>> At 12/29/2011 06:07 PM, Sam Barnett-Cormack wrote:
>>> Assuming unicode featureset, a proper semantic case insensitivity would
>>> be lovely - so the unicode properties were used to determine whether
>>> there was a case-insensitive match. Someone might have a use for other
>>> unicode matching, though, like base-glyph matching (ignoring diacritics).
>>
>> ... which led me to think that a more flexible way to say "apply case insensitivity to this string" is needed, that could invoke either:
>>
>> a) one or another built-in transformation, such as standard ASCII case insensitivity:  CI("AB") -->  [Aa][Bb], and possibly other built-in standards for a range of unicode character sets.
>>
>> b) or invokes a user-supplied plug-in: CI("AB", MyTrans) -->  whatever MyTrans returns.
>>
>> c) or, with syntax similar to (b), and to avoid code-language-dependency, invokes something specified elsewhere in the grammar file using regex or whatever.
>>
>> I'm not particularly advocating the above syntax, just the general idea of facilitating shorthands for generating the fully-spelled-out series of character sets, and also advocating trying to avoid special-casing one particular variety of case-insensitivity within ANTLR syntax.
>>
>> Hmmm, this is sliding perilously close to ANTLR preprocessor.  :-)
>>
>> -- Graham
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Sat Dec 31 11:02:24 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 31 Dec 2011 11:02:24 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CACCG97HXz+gUTRcFRm-UqCY-PMYe2av63FztY2DWZ=Jjg8F6FA@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
	<76104ebe54b20ee6373090b3265a6cd6@mail.gmail.com>
	<CACCG97HXz+gUTRcFRm-UqCY-PMYe2av63FztY2DWZ=Jjg8F6FA@mail.gmail.com>
Message-ID: <BDAB5B2F-9F31-467D-846E-C72A878583E2@cs.usfca.edu>


On Dec 31, 2011, at 6:17 AM, Richard Gildea wrote:

> Hi,
> 
> Is there an rough estimate for a v4 release date (specifically the C++
> target)?

Not yet, but Sam Harwell plans to build it. These mostly waiting for me to stabilize the runtime libraries ;) He is on vacation until next week when he and I will sync up.

Ter

From parrt at cs.usfca.edu  Sat Dec 31 11:10:30 2011
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 31 Dec 2011 11:10:30 -0800
Subject: [antlr-interest] v4 "Honey Badger" teaser
In-Reply-To: <4EFF2E63.3020603@lancaster.ac.uk>
References: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
	<AABA454A-1DBE-46D1-8576-6DA08E7AEE02@cs.usfca.edu>
	<4EFF2E63.3020603@lancaster.ac.uk>
Message-ID: <94865C07-C4FB-4229-9BE8-30DEF8C3D4BC@cs.usfca.edu>

I'm happy to think about this after the first release when I have more time.
Ter
On Dec 31, 2011, at 7:46 AM, Sam Barnett-Cormack wrote:

> I'm not sure it need be complexity so much as what many language guides I've read refer to as "syntactic sugar". This is exactly the kind of situation that syntactic sugar makes a language much more usable.
> 
> However, I will agree it's not that common these days. I still think a basic bit of syntactic sugar would be worthwhile.
> 
> By syntactic sugar, I mean something that could be acheived with [..], but providing a shortcut for common cases - such as case insensitivity. It's worth noting that there are uses other than case insensitivity for [..] syntax, just look how it gets used in regex. As an aside, isn't it weird the modern regex are still called regex, when they really aren't regular in a grammatic sense any more?
> 
> Sam
> 
> On 31/12/2011 00:44, Terence Parr wrote:
>> Hi Graham and crew?Fortunately case insensitive keywords are less common these days. Not sure it's worth adding some complexity to deal with it when the [?] thing it is okay.
>> Ter
>> On Dec 29, 2011, at 6:27 PM, Graham Wideman wrote:
>> 
>>> A way to deal with case-insensitivity that is less noisy to read would be a great benefit, but I too was thinking along the lines of Sam:
>>> 
>>> At 12/29/2011 06:07 PM, Sam Barnett-Cormack wrote:
>>>> Assuming unicode featureset, a proper semantic case insensitivity would
>>>> be lovely - so the unicode properties were used to determine whether
>>>> there was a case-insensitive match. Someone might have a use for other
>>>> unicode matching, though, like base-glyph matching (ignoring diacritics).
>>> 
>>> ... which led me to think that a more flexible way to say "apply case insensitivity to this string" is needed, that could invoke either:
>>> 
>>> a) one or another built-in transformation, such as standard ASCII case insensitivity:  CI("AB") -->  [Aa][Bb], and possibly other built-in standards for a range of unicode character sets.
>>> 
>>> b) or invokes a user-supplied plug-in: CI("AB", MyTrans) -->  whatever MyTrans returns.
>>> 
>>> c) or, with syntax similar to (b), and to avoid code-language-dependency, invokes something specified elsewhere in the grammar file using regex or whatever.
>>> 
>>> I'm not particularly advocating the above syntax, just the general idea of facilitating shorthands for generating the fully-spelled-out series of character sets, and also advocating trying to avoid special-casing one particular variety of case-insensitivity within ANTLR syntax.
>>> 
>>> Hmmm, this is sliding perilously close to ANTLR preprocessor.  :-)
>>> 
>>> -- Graham
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Sat Dec 31 14:32:17 2011
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 31 Dec 2011 14:32:17 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CACCG97GtxdB9V_thXJ5meiFCurhpTVQ1iy-vDZeH=6eH=s-VQQ@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<d2ad6f87e09d3bf7e7d7101475effb5d@mail.gmail.com>
	<CACCG97GtxdB9V_thXJ5meiFCurhpTVQ1iy-vDZeH=6eH=s-VQQ@mail.gmail.com>
Message-ID: <689B9E20-9A21-44EC-A6FD-CCD080C8CFED@temporal-wave.com>

If I get the time, then to 3.4

Jim

On Dec 31, 2011, at 5:53, Richard Gildea <rgildea at gmail.com> wrote:

> Hi,
> 
> Thanks for you reply. No, we are not using the $text since I had read that it could lead to increased memory usage. Are the improvements that you mention targeted at ANTLR 4 or ANTLR 3.x?
> 
> Cheers,
> 
> Richard
> 
> On 26 December 2011 09:33, Jim Idle <jimi at temporal-wave.com> wrote:
> Are you sure that this is not because you are using $text? Anyway, over
> the next few days I am going to make some changes to the runtime for speed
> and memory use, that will probably help everyone.
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Richard Gildea
> > Sent: Thursday, December 22, 2011 8:00 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] C target memory usage
> >
> > Hi,
> >
> > We have been successfully using antlr in the form of the C target for
> > some time, however we have recently noticed that the memory consumption
> > can be quite large - up to 150 times the size of the input file. Is
> > this factor of
> > ~150 to be expected, or does it indicate that we may be doing something
> > wrong? For the vast majority of possible inputs this does not cause a
> > problem, however some input files can be as large as 0.5 Gb, giving a
> > peak memory usage of 75 Gb - not exactly feasible on most machines!
> >
> > Does anyone have any examples of using a custom lexer that provides a
> > token buffer rather than storing all tokens in memory?
> >
> > Cheers,
> >
> > Richard
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

