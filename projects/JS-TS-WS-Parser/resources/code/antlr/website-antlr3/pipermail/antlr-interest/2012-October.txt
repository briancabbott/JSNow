From Matthieu.Moy at grenoble-inp.fr  Mon Oct  1 07:26:32 2012
From: Matthieu.Moy at grenoble-inp.fr (Matthieu Moy)
Date: Mon, 01 Oct 2012 16:26:32 +0200
Subject: [antlr-interest] Keywords management in lexer with ANTLR v3
Message-ID: <vpqpq52feuf.fsf@grenoble-inp.fr>

Hi,

I'm wondering what is the recommended way to manage keywords in a lexer.

I read about testLiterals in ANTLRv2, which disapeared in ANTLRv3. Does
this mean that the "brute force", doing e.g.

FOR: 'for'
WHILE: 'while'
IF: 'if'
...

(my language also have identifiers)

became as efficient as a dictionary-based approach? Is there any other
way?

Thanks in advance,

-- 
Matthieu Moy
http://www-verimag.imag.fr/~moy/

From parrt at cs.usfca.edu  Mon Oct  1 09:41:30 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Oct 2012 09:41:30 -0700
Subject: [antlr-interest] ANTLR4b2 download not working
In-Reply-To: <20121001052003.FNVB29577.fed1rmfepo201.cox.net@fed1rmimpo305>
References: <20121001052003.FNVB29577.fed1rmfepo201.cox.net@fed1rmimpo305>
Message-ID: <82EEB04D-39D0-4877-912D-D38A760A52F3@cs.usfca.edu>

Sorry about that. The repository refers to a release that I have not actually made yet. Expect it today.
Ter
On Sep 30, 2012, at 10:19 PM, Graham Wideman wrote:

> Hi Ter and all,
> 
> On page  https://github.com/antlr/antlr4 there's a link to the 4.0b2 jar download: 
> <http://www.antlr.org/download/antlr-4.0b2-complete.jar>http://www.antlr.org/download/antlr-4.0b2-complete.jar.
> 
> Currently (10:15 pm Pacific, 2012-09-30), this returns a server error: "The requested resource (http://www.antlr.org/download/antlr-4.0b2-complete.jar) is not available."
> 
> I guess this might relate to recent bugfix, and I note that various branches of the source have been changed within recent hours.
> 
> But in case it's not just working its way through the system I thought I'd mention it.
> 
> -- Graham
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Mon Oct  1 16:29:04 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Oct 2012 16:29:04 -0700
Subject: [antlr-interest] ANTLR 4.0b2 now available
Message-ID: <5406AD65-DF6E-4C61-9914-B1BE21BA746E@cs.usfca.edu>

Another rev out. Please try out 4.0b2:

	http://www.antlr.org/download/antlr-4.0b2-complete.jar

Source:

	https://github.com/antlr/antlr4/

Upcoming-book-examples source code (new book beta will be out this week, with freshened examples source zip):

	http://pragprog.com/titles/tpantlr2/source_code

Readme:

	https://github.com/antlr/antlr4/blob/master/README.txt

Enjoy.

Ter

From linq936 at gmail.com  Tue Oct  2 10:24:58 2012
From: linq936 at gmail.com (lin q)
Date: Tue, 2 Oct 2012 10:24:58 -0700
Subject: [antlr-interest] (no subject)
Message-ID: <CAHJ65QkppA1=ryGGs6m3WtERyJjZTMsFcewQOJgt=xA3USL0NA@mail.gmail.com>

Hi,

I like to parse some simple name/value pair data file in the format of
"name=value" at each line, here is an example:

race=asia
age=10
name=uart
gender=m


I have the following grammar snippet:
/*-------------------------------------------------------------------------------------------
  parser rules
  -------------------------------------------------------------------------------------------*/
all_rec
        :       common_param
                EOF
        ;


common_param
        :      ( 'gender=' VAL )
                |
               ( 'race=' VAL )
                |
               ( 'name=' VAL )
                |
               ( 'age=' VAL )
               New_Line+
        ;


/*-------------------------------------------------------------------------------------------
  lexer rules
  -------------------------------------------------------------------------------------------*/
VAL :  ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '.' )+ ;

WS : ('\t' | ' ')+ ;

New_Line : ('\r' | '\n')+   ;


But when I run it, I get the following error:

test.in(1)  : error 1 : Unexpected token, at offset 8
    near [Index: 2 (Start: 309691209-Stop: 309691209) ='
', type<4> Line: 1 LinePos:8]
     : syntax error...


The content of test.in is

race=asia
age=10
name=uart
gender=m

Do you see what exactly is the problem?

From ronburk at gmail.com  Tue Oct  2 10:52:25 2012
From: ronburk at gmail.com (Ron Burk)
Date: Tue, 2 Oct 2012 10:52:25 -0700
Subject: [antlr-interest] (no subject)
In-Reply-To: <CAHJ65QkppA1=ryGGs6m3WtERyJjZTMsFcewQOJgt=xA3USL0NA@mail.gmail.com>
References: <CAHJ65QkppA1=ryGGs6m3WtERyJjZTMsFcewQOJgt=xA3USL0NA@mail.gmail.com>
Message-ID: <CAEVkYxc+bFNaZDG2e5G-3y3cU1Wabm+5FY7z3g5PAnvK4CujTg@mail.gmail.com>

Possibly the problem is easier to spot if you formatted like this:

 common_param
         :      ( 'gender=' VAL )
         |      ( 'race=' VAL )
         |      ( 'name=' VAL )
         |      ( 'age=' VAL )    New_Line+
         ;

so it's obvious then that common_param has 4 productions,
only one of which can end in a newline.

From researcher0x00 at gmail.com  Tue Oct  2 11:54:28 2012
From: researcher0x00 at gmail.com (Eric)
Date: Tue, 2 Oct 2012 14:54:28 -0400
Subject: [antlr-interest] (no subject)
In-Reply-To: <CAEVkYxc+bFNaZDG2e5G-3y3cU1Wabm+5FY7z3g5PAnvK4CujTg@mail.gmail.com>
References: <CAHJ65QkppA1=ryGGs6m3WtERyJjZTMsFcewQOJgt=xA3USL0NA@mail.gmail.com>
	<CAEVkYxc+bFNaZDG2e5G-3y3cU1Wabm+5FY7z3g5PAnvK4CujTg@mail.gmail.com>
Message-ID: <CAN45N114wjPR8-VPX2Kj=nC-V_Ra-FfWUfvxw39h=Rbzh3wOvw@mail.gmail.com>

Hi,

Just a 5 second look, but shouldn't it be

common_param*

with * for zero or more.




On Tue, Oct 2, 2012 at 1:52 PM, Ron Burk <ronburk at gmail.com> wrote:

> Possibly the problem is easier to spot if you formatted like this:
>
>  common_param
>          :      ( 'gender=' VAL )
>          |      ( 'race=' VAL )
>          |      ( 'name=' VAL )
>          |      ( 'age=' VAL )    New_Line+
>          ;
>
> so it's obvious then that common_param has 4 productions,
> only one of which can end in a newline.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From antlr at mirality.co.nz  Tue Oct  2 12:43:07 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 03 Oct 2012 08:43:07 +1300
Subject: [antlr-interest] (no subject)
In-Reply-To: <CAHJ65QkppA1=ryGGs6m3WtERyJjZTMsFcewQOJgt=xA3USL0NA@mail.g
	mail.com>
References: <CAHJ65QkppA1=ryGGs6m3WtERyJjZTMsFcewQOJgt=xA3USL0NA@mail.gmail.com>
Message-ID: <20121002194333.341293418139@www.antlr.org>

At 06:24 3/10/2012, lin q wrote:
 >I like to parse some simple name/value pair data file in the 
format
 >of "name=value" at each line, here is an example:
 >
 >race=asia
 >age=10
 >name=uart
 >gender=m

A full grammar really is overkill for this sort of thing.  Just 
use the facilities that should already be in your language of 
choice to read in each line and split on the first = sign.


From gwlist at grahamwideman.com  Wed Oct  3 17:02:12 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Wed, 03 Oct 2012 17:02:12 -0700
Subject: [antlr-interest] Java.g4 bug? Attrib refs in lexer action
In-Reply-To: <5406AD65-DF6E-4C61-9914-B1BE21BA746E@cs.usfca.edu>
References: <5406AD65-DF6E-4C61-9914-B1BE21BA746E@cs.usfca.edu>
Message-ID: <20121004000213.XBPO32719.fed1rmfepo102.cox.net@fed1rmimpo110>

Hi Ter and all:

I'm working through the examples in the ANTLR 4 book, and have hit a problem using the Java.g4 grammar in example 3.3 ExtractInterfaceTool.

Attempting to generate parser code...
$ antlr4 Java.g4

... results in ...
error(128): Java.g4:670:37: attribute references not allowed in lexer actions: $type
error(128): Java.g4:674:41: attribute references not allowed in lexer actions: $type

In Java.g4 there are rules:

ENUM:   'enum' {if (!enumIsKeyword) $type=Identifier;}
    ;

ASSERT
    :   'assert' {if (!assertIsKeyword) $type=Identifier;}

... which reference $type.

Is there some option that needs to be used for this to work? 

I note that only a few days ago there was discussion thread "Bug in antlr4" discussing the skip vs channel(HIDDEN) issue, but no mention that other users were hitting the problem I report here.

Windows 7
Java 1.7.0_04
ANTLR version: antlr-4.0b2-complete.jar
Java.g4 version dated 2012-09-18, downloaded with example code tpantlr2-code.zip 2012-10-01 16:53

Thanks,

-- Graham



From gwlist at grahamwideman.com  Thu Oct  4 00:47:55 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 04 Oct 2012 00:47:55 -0700
Subject: [antlr-interest] Solved: Java.g4 bug? Attrib refs in lexer action
Message-ID: <20121004074749.SKWQ32719.fed1rmfepo102.cox.net@fed1rmimpo109>

Hi Ter and all:

Regarding the bug I posted earlier, evidently ANTLR 4 requires different syntax for the attribute references in lexer actions. 

In Java.g4:

----------
Change:
----------
ENUM:   'enum' {if (!enumIsKeyword) $type=Identifier;}
    ;
ASSERT
    :   'assert' {if (!assertIsKeyword) $type=Identifier;}
    ;

----------
To:
----------
ENUM:   'enum' {if (!enumIsKeyword) setType(Identifier);}
    ;
ASSERT
    :   'assert' {if (!assertIsKeyword) setType(Identifier);}
    ;
----------

This might apply starting only with ANTLR4.0b2, since the earlier email thread "Bug in antlr4" discussing a different problem with Java.g4 didn't mention the problem described above.

-- Graham


From parrt at cs.usfca.edu  Thu Oct  4 13:49:04 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 4 Oct 2012 13:49:04 -0700
Subject: [antlr-interest] Java.g4 bug? Attrib refs in lexer action
In-Reply-To: <20121004000213.XBPO32719.fed1rmfepo102.cox.net@fed1rmimpo110>
References: <5406AD65-DF6E-4C61-9914-B1BE21BA746E@cs.usfca.edu>
	<20121004000213.XBPO32719.fed1rmfepo102.cox.net@fed1rmimpo110>
Message-ID: <3D672DFA-5509-4E0F-B793-F09C373A75CC@cs.usfca.edu>

I believe I updated the example to work with 4.0b2.  There is no $foo in the lexer actions anymore. setType(), setChannel etc?
Ter
On Oct 3, 2012, at 5:02 PM, Graham Wideman wrote:

> Hi Ter and all:
> 
> I'm working through the examples in the ANTLR 4 book, and have hit a problem using the Java.g4 grammar in example 3.3 ExtractInterfaceTool.
> 
> Attempting to generate parser code...
> $ antlr4 Java.g4
> 
> ... results in ...
> error(128): Java.g4:670:37: attribute references not allowed in lexer actions: $type
> error(128): Java.g4:674:41: attribute references not allowed in lexer actions: $type
> 
> In Java.g4 there are rules:
> 
> ENUM:   'enum' {if (!enumIsKeyword) $type=Identifier;}
>    ;
> 
> ASSERT
>    :   'assert' {if (!assertIsKeyword) $type=Identifier;}
> 
> ... which reference $type.
> 
> Is there some option that needs to be used for this to work? 
> 
> I note that only a few days ago there was discussion thread "Bug in antlr4" discussing the skip vs channel(HIDDEN) issue, but no mention that other users were hitting the problem I report here.
> 
> Windows 7
> Java 1.7.0_04
> ANTLR version: antlr-4.0b2-complete.jar
> Java.g4 version dated 2012-09-18, downloaded with example code tpantlr2-code.zip 2012-10-01 16:53
> 
> Thanks,
> 
> -- Graham
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gwlist at grahamwideman.com  Thu Oct  4 14:29:38 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Thu, 04 Oct 2012 14:29:38 -0700
Subject: [antlr-interest] Java.g4 bug? Attrib refs in lexer action
In-Reply-To: <3D672DFA-5509-4E0F-B793-F09C373A75CC@cs.usfca.edu>
References: <5406AD65-DF6E-4C61-9914-B1BE21BA746E@cs.usfca.edu>
	<20121004000213.XBPO32719.fed1rmfepo102.cox.net@fed1rmimpo110>
	<3D672DFA-5509-4E0F-B793-F09C373A75CC@cs.usfca.edu>
Message-ID: <20121004212930.PAAJ24333.fed1rmfepo203.cox.net@fed1rmimpo305>

> I believe I updated the example to work with 4.0b2.  
> There is no $foo in the lexer actions anymore. setType(), setChannel etc

> Ter

Ah -- Ok I just downloaded a new copy of tpantlr2-code.zip and indeed it has the changes.  Files dated 2012-10-02.

My existing copy of tpantlr2-code.zip downloaded 2012-10-01 had files dated 2012-09-18. So that explains the difference. I was just a little too quick on the download.  :-)

Thanks,

-- Graham


From fabien.hermenier at unice.fr  Sat Oct  6 02:44:06 2012
From: fabien.hermenier at unice.fr (Fabien Hermenier)
Date: Sat, 6 Oct 2012 11:44:06 +0200 (CEST)
Subject: [antlr-interest] line 0:-1 mismatched input '<EOF>' expecting ';'
In-Reply-To: <470175156.6600906.1349515872334.JavaMail.root@inria.fr>
Message-ID: <1572315052.6601407.1349516646841.JavaMail.root@inria.fr>

Hi

I am stuck with this problem since long.

When I have an error in the parser at the end of the input, the reported error position is always 0:-1.
When it is in the middle of the input, there is no problem.
The exception RecognitionException that is generated in my parser reported this inaccurate position.
In fact, the token related to that error indicates the line 0:-1.
So, why this particular situation at the end of the input ?


Here is a sample input:

"foo(a);
foo(b)
foo(c);"

-> Report an error in line 2:1 :expecting ';'

"foo(a);
foo(b)"

-> Report an error in line 0:-1 : expecting ';'


Regards
Fabien.

From fabien.hermenier at unice.fr  Sat Oct  6 06:13:58 2012
From: fabien.hermenier at unice.fr (Fabien Hermenier)
Date: Sat, 6 Oct 2012 15:13:58 +0200 (CEST)
Subject: [antlr-interest] line 0:-1 mismatched input '<EOF>' expecting '; '
In-Reply-To: <7303613875522691464@unknownmsgid>
Message-ID: <219635761.6620639.1349529238493.JavaMail.root@inria.fr>

I know about this wiki page. I already have my ErrorReporter and indeed, I can detect this situation and I will fix it by getting the last token before mine that as a positive line/column number.

But to me, this seems to be an error from either my grammar or a an issue in the way errors are reported. Why has the EOF token a line/column equals to 0:-1?

Regards
Fabien.

----- Mail original -----
> Override the error handier and detect it and change it :). Also look
> at the wiki article about error recovery.
> 
> Jim
> 
> On Oct 6, 2012, at 17:44, Fabien Hermenier
> <fabien.hermenier at unice.fr> wrote:
> 
> > Hi
> >
> > I am stuck with this problem since long.
> >
> > When I have an error in the parser at the end of the input, the
> > reported error position is always 0:-1.
> > When it is in the middle of the input, there is no problem.
> > The exception RecognitionException that is generated in my parser
> > reported this inaccurate position.
> > In fact, the token related to that error indicates the line 0:-1.
> > So, why this particular situation at the end of the input ?
> >
> >
> > Here is a sample input:
> >
> > "foo(a);
> > foo(b)
> > foo(c);"
> >
> > -> Report an error in line 2:1 :expecting ';'
> >
> > "foo(a);
> > foo(b)"
> >
> > -> Report an error in line 0:-1 : expecting ';'
> >
> >
> > Regards
> > Fabien.
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From list at toolazydogs.com  Sat Oct  6 08:11:30 2012
From: list at toolazydogs.com (Alan D. Cabrera)
Date: Sat, 6 Oct 2012 08:11:30 -0700
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>
	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>
Message-ID: <0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>


Ping.

On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:

> Great!  What's the ETA for publication of the artifacts?
> 
> On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
> 
>> We already have this set up.
>> 
>> Jim
>> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D. Cabrera
>> Sent: Tuesday, September 25, 2012 12:32 AM
>> To: Sam Harwell
>> Cc: Antlr-Interest Antlr.Org
>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>> 
>> Sonatype offers access to a Nexus server that Open Source projects can use
>> to publish their artifacts.  It's free.
>> 
>> 
>> Regards,
>> Alan
>> 
>> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
>> 
>>> Yes, but it's current in source-only form and not available through the
>> Maven distribution site (I don't know how that part of it works).
>> Hopefully we can get to that part of it soon. :)
>>> 
>>> Sam
>>> 
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D. Cabrera
>>> Sent: Saturday, September 22, 2012 9:29 PM
>>> To: Antlr-Interest Antlr.Org
>>> Subject: [antlr-interest] Maven plugin for antlr v4
>>> 
>>> Is there a maven plugin in the works for antler v4?
>>> 
>>> 
>>> Regards,
>>> Alan
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> 
>>> 
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From ahouse at eecg.toronto.edu  Sat Oct  6 12:26:27 2012
From: ahouse at eecg.toronto.edu (Andrew House)
Date: Sat, 06 Oct 2012 16:56:27 -0230
Subject: [antlr-interest] Tree grammar doesn't match what I want
Message-ID: <507085E3.30505@eecg.toronto.edu>


Hi all,

I am working on my own language application, and am following the 
Language Implementation Patterns and Definitive ANTLR Reference books as 
closely as I can.  I have run into an issue where my tree grammar seems 
unable to match my 'array' subtree (representing an array data type).

An example of what fails to match is as follows:
(array (SIZE (EXPR (to 1 (IDX N)))) (SCALAR (NAME (TYPEID Particle))))

Below, I have included relevant snippets of the grammar and tree 
grammar.  The tree grammar has no trouble recognizing the 'tuple' and 
'scalar' data type subtrees.

I know that the grammar allows for arrays of arrays (of arrays...) if I 
were so inclined, but I don't think that's the culprit.  As far as I can 
tell the grammar is unambiguous.  It just doesn't seem to match for arrays.

Any help would be greatly appreciated---I've been looking at this for 
several days now, and haven't managed to see the problem.

Sincerely,
-- Andrew House

Grammar ======================================================

varDeclaration
     :    'var' ID 'is' dataType ';'
         -> ^('var' ^(NAME ID) ^(VARTYPE dataType) )
     ;

dataType
     :    dataTypeID sizeDef?-> ^(SCALAR ^(NAME dataTypeID) sizeDef? )
     |    'array' arrayDims 'of' dataType -> ^('array' arrayDims dataType )
     |    'tuple' '(' argList ')' -> ^('tuple' argList)
     ;

argList
     :    argDeclaration (',' argDeclaration)* -> argDeclaration+
     ;

argDeclaration
     :    dataType ID -> ^(ARG ^(NAME ID) ^(VARTYPE dataType))
     ;

arrayDims
     :    sizeDef | regionDef
     ;

dataTypeID
     :    ID ('.' ID)* -> ^(TYPEID ID+)
     ;

dataTypeList
     :    dataType (',' dataType)* -> dataType+
     ;

sizeDef
     :    '[' expr ']' -> ^(SIZE expr)
     ;

regionDef
     :    '[' idList 'in' expr ']' -> ^(REGION expr idList)
     ;

Tree Grammar 
====================================================================

varDeclaration
     :    ^('var' ^(NAME ID) ^(VARTYPE dt=dataType) .*)
         {
             // Code to resolve data type
         }
     ;


dataType returns [ASymbol type, AIndexRange size] // updated for resolution
     :    (tsid=scalarDataType | taid=arrayDataType | ttid=tupleDataType )
         {
             // Code to determine whether it is tuple, scalar, or array 
type,
       // and pass up appropriate values.
         }
     ;

scalarDataType returns [ASymbol type, AIndexRange size]
     :    ^(SCALAR ^(NAME ^(TYPEID name+=ID+)) sz=sizeDef?)
         {
             // Resolve scalar data types
         }
     ;

arrayDataType returns [ASymbol type, AIndexRange size]
     :    ^(aid='array' dim=arrayDims dt=dataType)
         {
           // Resolve array dimensions and subtype
       // THIS NEVER SEEMS TO MATCH ANYTHING!!!!!!
            // A print statement in here never executes.
         }
     ;

tupleDataType returns [ASymbol type, AIndexRange size]
     :    ^(tid='tuple' .*)
         {
             // Returns appropriate tuple values
         }
     ;

arrayDims returns [AIndexRegion region]
     :    sz=sizeDef | rg=regionDef
         {
             // Figures out if it is a size or region
       // and returns a region.
         }
     ;

sizeDef returns [AIndexRange range]
     :    ^(SIZE ex=exprRoot)
     ;

regionDef returns [AIndexRegion region]
     :    ^(REGION ex=exprRoot ids+=ID+)
     ;

From apalala at gmail.com  Sat Oct  6 13:37:04 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 6 Oct 2012 16:07:04 -0430
Subject: [antlr-interest] Tree grammar doesn't match what I want
In-Reply-To: <507085E3.30505@eecg.toronto.edu>
References: <507085E3.30505@eecg.toronto.edu>
Message-ID: <CAN1YFWsKjQhPdoqJ2KRGx5+EYSuZAKreJhkgCAQ8pwyjDZcGrA@mail.gmail.com>

You can use the '-trace' option to see where exactly the parser is failing.
An "upper" rule will fail if one on which it depends fails.

-- Juancarlo

On Sat, Oct 6, 2012 at 2:56 PM, Andrew House <ahouse at eecg.toronto.edu>wrote:

>
> Hi all,
>
> I am working on my own language application, and am following the
> Language Implementation Patterns and Definitive ANTLR Reference books as
> closely as I can.  I have run into an issue where my tree grammar seems
> unable to match my 'array' subtree (representing an array data type).
>
> An example of what fails to match is as follows:
> (array (SIZE (EXPR (to 1 (IDX N)))) (SCALAR (NAME (TYPEID Particle))))
>
> Below, I have included relevant snippets of the grammar and tree
> grammar.  The tree grammar has no trouble recognizing the 'tuple' and
> 'scalar' data type subtrees.
>
> I know that the grammar allows for arrays of arrays (of arrays...) if I
> were so inclined, but I don't think that's the culprit.  As far as I can
> tell the grammar is unambiguous.  It just doesn't seem to match for arrays.
>
> Any help would be greatly appreciated---I've been looking at this for
> several days now, and haven't managed to see the problem.
>
> Sincerely,
> -- Andrew House
>
> Grammar ======================================================
>
> varDeclaration
>      :    'var' ID 'is' dataType ';'
>          -> ^('var' ^(NAME ID) ^(VARTYPE dataType) )
>      ;
>
> dataType
>      :    dataTypeID sizeDef?-> ^(SCALAR ^(NAME dataTypeID) sizeDef? )
>      |    'array' arrayDims 'of' dataType -> ^('array' arrayDims dataType )
>      |    'tuple' '(' argList ')' -> ^('tuple' argList)
>      ;
>
> argList
>      :    argDeclaration (',' argDeclaration)* -> argDeclaration+
>      ;
>
> argDeclaration
>      :    dataType ID -> ^(ARG ^(NAME ID) ^(VARTYPE dataType))
>      ;
>
> arrayDims
>      :    sizeDef | regionDef
>      ;
>
> dataTypeID
>      :    ID ('.' ID)* -> ^(TYPEID ID+)
>      ;
>
> dataTypeList
>      :    dataType (',' dataType)* -> dataType+
>      ;
>
> sizeDef
>      :    '[' expr ']' -> ^(SIZE expr)
>      ;
>
> regionDef
>      :    '[' idList 'in' expr ']' -> ^(REGION expr idList)
>      ;
>
> Tree Grammar
> ====================================================================
>
> varDeclaration
>      :    ^('var' ^(NAME ID) ^(VARTYPE dt=dataType) .*)
>          {
>              // Code to resolve data type
>          }
>      ;
>
>
> dataType returns [ASymbol type, AIndexRange size] // updated for resolution
>      :    (tsid=scalarDataType | taid=arrayDataType | ttid=tupleDataType )
>          {
>              // Code to determine whether it is tuple, scalar, or array
> type,
>        // and pass up appropriate values.
>          }
>      ;
>
> scalarDataType returns [ASymbol type, AIndexRange size]
>      :    ^(SCALAR ^(NAME ^(TYPEID name+=ID+)) sz=sizeDef?)
>          {
>              // Resolve scalar data types
>          }
>      ;
>
> arrayDataType returns [ASymbol type, AIndexRange size]
>      :    ^(aid='array' dim=arrayDims dt=dataType)
>          {
>            // Resolve array dimensions and subtype
>        // THIS NEVER SEEMS TO MATCH ANYTHING!!!!!!
>             // A print statement in here never executes.
>          }
>      ;
>
> tupleDataType returns [ASymbol type, AIndexRange size]
>      :    ^(tid='tuple' .*)
>          {
>              // Returns appropriate tuple values
>          }
>      ;
>
> arrayDims returns [AIndexRegion region]
>      :    sz=sizeDef | rg=regionDef
>          {
>              // Figures out if it is a size or region
>        // and returns a region.
>          }
>      ;
>
> sizeDef returns [AIndexRange range]
>      :    ^(SIZE ex=exprRoot)
>      ;
>
> regionDef returns [AIndexRegion region]
>      :    ^(REGION ex=exprRoot ids+=ID+)
>      ;
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From sashapolo239 at gmail.com  Tue Oct  9 02:39:53 2012
From: sashapolo239 at gmail.com (Alexander Polovtcev)
Date: Tue, 09 Oct 2012 13:39:53 +0400
Subject: [antlr-interest] Problems with Cpp target
Message-ID: <5073F0E9.6010606@gmail.com>

Hello.
     I'm making a parser, which uses antlr c++ target. But when I try to 
compile the project, I get the following error:
/Method 'get_tokSource' could not be resolved//
/I do everything the same as in the examples. Here is the code:/

main.cpp:

/#include <iostream>
#include "panlangGrammarLexer.hpp"
#include "panlangGrammarParser.hpp"

using namespace std;

int main(int argc, char *argv[]) {
     ANTLR_UINT8* fName;
     if (argc < 2 || argv[1] == NULL) {
         cout<<"Specify file to parse"<<endl;
         return 1;
     } else {
         fName    = (ANTLR_UINT8*)argv[1];
     }

     panlangGrammarLexerTraits::InputStreamType input(fName, 
ANTLR_ENC_8BIT);
     panlangGrammarLexer lexer(&input);
     panlangGrammarParserTraits::TokenStreamType 
tstream(ANTLR_SIZE_HINT, lexer.get_tokSource());
     panlangGrammarParser parser(&tstream);

     parser.program();

     return 0;
}

/beginning of the grammar:/

grammar panlangGrammar;

options {
   language = Cpp;
   k = 4;
}

@parser::includes
{
     #include "panlangGrammarLexer.hpp"
}

@lexer::traits
{
     class panlangGrammarLexer;
     class panlangGrammarParser;
     typedef antlr3::Traits<panlangGrammarLexer, panlangGrammarParser> 
panlangGrammarLexerTraits;
     typedef panlangGrammarLexerTraits panlangGrammarParserTraits;
}

From df at release14.org  Tue Oct  9 02:47:45 2012
From: df at release14.org (Damir Franusic)
Date: Tue, 09 Oct 2012 11:47:45 +0200
Subject: [antlr-interest] Problems with Cpp target
In-Reply-To: <5073F0E9.6010606@gmail.com>
References: <5073F0E9.6010606@gmail.com>
Message-ID: <5073F2C1.8070909@release14.org>

Hi

I don't know the current state of Cpp target but I was also having 
issues before so I just used C target instead and had no issues ever since.


*Damir Franusic*
Founder / Lead developer

r14 logo
*Release 14*
e: df at release14.org
p: +385-91-209-1311
p: +971-52-840-1063
w: http://www.release14.org/


On 10/09/2012 11:39 AM, Alexander Polovtcev wrote:
> Hello.
>       I'm making a parser, which uses antlr c++ target. But when I try to
> compile the project, I get the following error:
> /Method 'get_tokSource' could not be resolved//
> /I do everything the same as in the examples. Here is the code:/
>
> main.cpp:
>
> /#include<iostream>
> #include "panlangGrammarLexer.hpp"
> #include "panlangGrammarParser.hpp"
>
> using namespace std;
>
> int main(int argc, char *argv[]) {
>       ANTLR_UINT8* fName;
>       if (argc<  2 || argv[1] == NULL) {
>           cout<<"Specify file to parse"<<endl;
>           return 1;
>       } else {
>           fName    = (ANTLR_UINT8*)argv[1];
>       }
>
>       panlangGrammarLexerTraits::InputStreamType input(fName,
> ANTLR_ENC_8BIT);
>       panlangGrammarLexer lexer(&input);
>       panlangGrammarParserTraits::TokenStreamType
> tstream(ANTLR_SIZE_HINT, lexer.get_tokSource());
>       panlangGrammarParser parser(&tstream);
>
>       parser.program();
>
>       return 0;
> }
>
> /beginning of the grammar:/
>
> grammar panlangGrammar;
>
> options {
>     language = Cpp;
>     k = 4;
> }
>
> @parser::includes
> {
>       #include "panlangGrammarLexer.hpp"
> }
>
> @lexer::traits
> {
>       class panlangGrammarLexer;
>       class panlangGrammarParser;
>       typedef antlr3::Traits<panlangGrammarLexer, panlangGrammarParser>
> panlangGrammarLexerTraits;
>       typedef panlangGrammarLexerTraits panlangGrammarParserTraits;
> }
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From Kai.Burjack at hbt.de  Tue Oct  9 05:30:09 2012
From: Kai.Burjack at hbt.de (Kai Burjack (HBT))
Date: Tue, 9 Oct 2012 14:30:09 +0200
Subject: [antlr-interest] Reuse of same token in multiple lexer modes
Message-ID: <21A18B8C89289B4FB93CB02ED54D9D12021DEC10@msg01.corp.hbt.de>

Hello Terrence,

first of all, many thanks for ANTLR and ANTLRv4 in particular, with its (among other things) greatly improved error reporting!

I have a question about lexer modes. I want to write an "island grammar", as it is called in your ANTLR4 beta2 book, and have found that it does not seem to be possible to reference the same token rule in multiple lexer modes.

Simplified example grammar:

lexer grammar MyLexer;

OPEN_PAREN : '(' -> pushMode(PAR) ;

mode PAR ;

OPEN_PAREN : '(' -> pushMode(PAR) ;
CLOSE_PAREN : ')' -> popMode ;
...other tokens that are otherwise not allowed outside of parenthese...

What I am trying to do there is to "know" when I am in parenthesis in order to allow more tokens (such as '>' for freemarker template language style) that were otherwise not allowed outside of that mode.

The "Tool" runs through this grammar fine, but the generated Java code contains errors due to non-existing identifier "PAR".

Can you help me on this one, please?

Thanks.

Best Regards,
Kai

From parrt at cs.usfca.edu  Tue Oct  9 10:23:52 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 9 Oct 2012 10:23:52 -0700
Subject: [antlr-interest] Reuse of same token in multiple lexer modes
In-Reply-To: <21A18B8C89289B4FB93CB02ED54D9D12021DEC10@msg01.corp.hbt.de>
References: <21A18B8C89289B4FB93CB02ED54D9D12021DEC10@msg01.corp.hbt.de>
Message-ID: <9238B14A-7EA3-4840-A62E-82C42DC06B9C@cs.usfca.edu>

hi. Since the parser needs to have a unique token type, ANTLR does not allow you to redefine token roles. You can of course use a lexer command to change the token type of something after you match it with -> type(OPEN_PAREN).

 I should also note that it sounds like what you really want is a recursive lexer rule, given that you are doing a push in the lexer mode as well.
Ter
On Oct 9, 2012, at 5:30 AM, Kai Burjack (HBT) wrote:

> Hello Terrence,
> 
> first of all, many thanks for ANTLR and ANTLRv4 in particular, with its (among other things) greatly improved error reporting!
> 
> I have a question about lexer modes. I want to write an "island grammar", as it is called in your ANTLR4 beta2 book, and have found that it does not seem to be possible to reference the same token rule in multiple lexer modes.
> 
> Simplified example grammar:
> 
> lexer grammar MyLexer;
> 
> OPEN_PAREN : '(' -> pushMode(PAR) ;
> 
> mode PAR ;
> 
> OPEN_PAREN : '(' -> pushMode(PAR) ;
> CLOSE_PAREN : ')' -> popMode ;
> ...other tokens that are otherwise not allowed outside of parenthese...
> 
> What I am trying to do there is to "know" when I am in parenthesis in order to allow more tokens (such as '>' for freemarker template language style) that were otherwise not allowed outside of that mode.
> 
> The "Tool" runs through this grammar fine, but the generated Java code contains errors due to non-existing identifier "PAR".
> 
> Can you help me on this one, please?
> 
> Thanks.
> 
> Best Regards,
> Kai
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From Kai.Burjack at hbt.de  Wed Oct 10 05:32:58 2012
From: Kai.Burjack at hbt.de (Kai Burjack (HBT))
Date: Wed, 10 Oct 2012 14:32:58 +0200
Subject: [antlr-interest] Reuse of same token in multiple lexer modes
References: <21A18B8C89289B4FB93CB02ED54D9D12021DEC10@msg01.corp.hbt.de>
	<9238B14A-7EA3-4840-A62E-82C42DC06B9C@cs.usfca.edu>
Message-ID: <21A18B8C89289B4FB93CB02ED54D9D12021DEC14@msg01.corp.hbt.de>

Hey Terence,

thanks. I did not know of that 'type' command. But now, that clutters up my grammar heavily.

What would be totally awesome, I guess, would be the possibility to specify the tokens once with their definitions at the start of the lexer grammar and then enumerate the token names under all modes in which they should be active/recognized together with their respective commands, such as pushMode, popMode, skip, etc...

Just a suggestion, though for ANTLR v5 ;-)

-----Urspr?ngliche Nachricht-----
Von: Terence Parr [mailto:parrt at cs.usfca.edu]
Gesendet: Di 09.10.2012 19:23
An: Kai Burjack (HBT)
Cc: antlr-interest at antlr.org
Betreff: Re: [antlr-interest] Reuse of same token in multiple lexer modes
 
hi. Since the parser needs to have a unique token type, ANTLR does not allow you to redefine token roles. You can of course use a lexer command to change the token type of something after you match it with -> type(OPEN_PAREN).

 I should also note that it sounds like what you really want is a recursive lexer rule, given that you are doing a push in the lexer mode as well.
Ter
On Oct 9, 2012, at 5:30 AM, Kai Burjack (HBT) wrote:

> Hello Terrence,
> 
> first of all, many thanks for ANTLR and ANTLRv4 in particular, with its (among other things) greatly improved error reporting!
> 
> I have a question about lexer modes. I want to write an "island grammar", as it is called in your ANTLR4 beta2 book, and have found that it does not seem to be possible to reference the same token rule in multiple lexer modes.
> 
> Simplified example grammar:
> 
> lexer grammar MyLexer;
> 
> OPEN_PAREN : '(' -> pushMode(PAR) ;
> 
> mode PAR ;
> 
> OPEN_PAREN : '(' -> pushMode(PAR) ;
> CLOSE_PAREN : ')' -> popMode ;
> ...other tokens that are otherwise not allowed outside of parenthese...
> 
> What I am trying to do there is to "know" when I am in parenthesis in order to allow more tokens (such as '>' for freemarker template language style) that were otherwise not allowed outside of that mode.
> 
> The "Tool" runs through this grammar fine, but the generated Java code contains errors due to non-existing identifier "PAR".
> 
> Can you help me on this one, please?
> 
> Thanks.
> 
> Best Regards,
> Kai
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From rprememail at yahoo.com  Wed Oct 10 06:19:48 2012
From: rprememail at yahoo.com (Premkumar)
Date: Wed, 10 Oct 2012 06:19:48 -0700 (PDT)
Subject: [antlr-interest] (no subject)
Message-ID: <1349875188.29361.BPMail_high_noncarrier@web124701.mail.ne1.yahoo.com>


http://www.internetwilli.de/cnbc.pro.php?wwey%4b%65%6h%53zmdewl%0m=361

From sam at tunnelvisionlabs.com  Wed Oct 10 09:50:27 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 10 Oct 2012 11:50:27 -0500
Subject: [antlr-interest] referencing subrule result in embedded action
	(C# port)
Message-ID: <046001cda707$5ac03cd0$1040b670$@tunnelvisionlabs.com>

The second example should work, but I'm not sure why it currently isn't.

As an alternative, I believe this would work:

(tok=String | tok=Integer)

Thanks,
--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Scobie Smith (Insight Global) [mailto:v-scobis at microsoft.com] 
Sent: Sunday, July 01, 2012 12:39 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] referencing subrule result in embedded action (C#
port)

I have a question about referencing an element in an action embedded in a
rule. I am using the C# port of ANTLR 3.



In a word, can references to elements be references to subrule results, or
must references be only to tokens?



This rule works:



string

@init { StringBuilder sb = new StringBuilder(); }

: ( (tok=String) { sb.Append($tok.Text); } )+ -> { new CommonTree(new
CommonToken(STRING, sb.ToString())) }

;



String: OtherCharacter+ ;

fragment OtherCharacter: ~('~'|'\t'|'\r') ;



It collects the text of multiple String tokens into one new token.

** Note that $tok refers to a token (String). **



But this rule does not:



string

@init { StringBuilder sb = new StringBuilder(); }

: ( tok=(String | Integer) { sb.Append($tok.Text); } )+ -> { new
CommonTree(new CommonToken(STRING, sb.ToString())) }

;



Integer: Digit+ ;

String: OtherCharacter+ ;

fragment OtherCharacter: ~(SEP|'\t'|'\r'|EOL|Digit) ;

fragment Digit: ('0' .. '9' ) ;



It attempts to collect the text of multiple String OR Integer tokens into
one new token.

For instance, input "foo123bar" will tokenize as three tokens, "foo", "123",
"bar", and the rule will create one "foo123bar" token.

** Note that $tok refers to the result of a subrule (String | Integer). **

At run-time, the tok variable in the parser is always null. In fact, there
is no statement in the generated parser that assigns a value to $tok.



So, I am wondering if references to elements must be to tokens
only--referencing a subrule's result is incorrect. (But the grammar allows
it.)

[The example/description in TDAR p. 137 (action embedded in a rule, inside *
cardinality) references tokens, not subrules.]

Or generally I am wondering what I'm doing wrong in the second rule.



Thanks in advance for any tips or insight about this.



Scobie









List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From stephen at perceptisys.co.uk  Wed Oct 10 10:05:18 2012
From: stephen at perceptisys.co.uk (Stephen Gaito)
Date: Wed, 10 Oct 2012 18:05:18 +0100
Subject: [antlr-interest] ANTLR4 Pull request: adding a couple of omissions
	to -depend switch
Message-ID: <5075AACE.6080506@perceptisys.co.uk>

Ter,

Many thanks for so swiftly adding the dependency command line switch 
(-depend).

 From the comments in the code (tool/BuildDependencyGenerator.java), I 
see that you have taken the code required for this -depend switch from 
ANTLR3.

Alas, this code, as is, does not output the dependencies for either the 
-listener or -visitor patterns, nor does it, for a combined grammar, 
output the dependency of TLexer.tokens on T.g.

In good GitHub social coding style, I have made the smallest possible 
alterations to tool/BuildDependencyGenerator.java in my fork of 
antlr/antlr4.

I have tested my changes on Foo.g (the simplest grammar in the ANTLR4 book).

After signing the antlr4/contributors.txt file, as per ANTLR3 
development instructions, I have issued a pull request from 
stephengaito/antlr4 to antlr/antlr4, to pull these changes into the main 
development.

I am not sure whether or not you feel that the ANTLR4 code base is ready 
for outside contributions, if it is not yet ready, simply use my commit 
diffs as suggested changes.

As always, many thanks for a wonderful tool.

Regards,

Stephen Gaito

From parrt at cs.usfca.edu  Wed Oct 10 10:25:43 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 10 Oct 2012 10:25:43 -0700
Subject: [antlr-interest] ANTLR4 Pull request: adding a couple of
	omissions to -depend switch
In-Reply-To: <5075AACE.6080506@perceptisys.co.uk>
References: <5075AACE.6080506@perceptisys.co.uk>
Message-ID: <B48AC7AC-EA71-49E5-96A6-5A4DDCCBB56E@cs.usfca.edu>

 thanks very much, Stephen! I'll pull those changes in.  Can you make those couple of fixes that Sam mentioned first?
 thanks,
Terence
On Oct 10, 2012, at 10:05 AM, Stephen Gaito wrote:

> Ter,
> 
> Many thanks for so swiftly adding the dependency command line switch 
> (-depend).
> 
> From the comments in the code (tool/BuildDependencyGenerator.java), I 
> see that you have taken the code required for this -depend switch from 
> ANTLR3.
> 
> Alas, this code, as is, does not output the dependencies for either the 
> -listener or -visitor patterns, nor does it, for a combined grammar, 
> output the dependency of TLexer.tokens on T.g.
> 
> In good GitHub social coding style, I have made the smallest possible 
> alterations to tool/BuildDependencyGenerator.java in my fork of 
> antlr/antlr4.
> 
> I have tested my changes on Foo.g (the simplest grammar in the ANTLR4 book).
> 
> After signing the antlr4/contributors.txt file, as per ANTLR3 
> development instructions, I have issued a pull request from 
> stephengaito/antlr4 to antlr/antlr4, to pull these changes into the main 
> development.
> 
> I am not sure whether or not you feel that the ANTLR4 code base is ready 
> for outside contributions, if it is not yet ready, simply use my commit 
> diffs as suggested changes.
> 
> As always, many thanks for a wonderful tool.
> 
> Regards,
> 
> Stephen Gaito
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gerald at certiv.net  Wed Oct 10 18:26:53 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Wed, 10 Oct 2012 18:26:53 -0700
Subject: [antlr-interest] Reuse of same token in multiple lexer modes
In-Reply-To: <21A18B8C89289B4FB93CB02ED54D9D12021DEC14@msg01.corp.hbt.de>
References: <21A18B8C89289B4FB93CB02ED54D9D12021DEC10@msg01.corp.hbt.de>
	<9238B14A-7EA3-4840-A62E-82C42DC06B9C@cs.usfca.edu>
	<21A18B8C89289B4FB93CB02ED54D9D12021DEC14@msg01.corp.hbt.de>
Message-ID: <5076205D.8000201@certiv.net>

Do you really need to recursively pushMode(PAR) when you are already in 
PAR mode?  Or, do you just need to match parens to know when to exit PAR 
mode?

If the latter, you should be able to use a redundant string literal 
(TDAR4, pg 275):

// default mode
OPAR : '(' -> pushMode(PAR);
CPAR : ')' ;
mode PAR
OTHINGY : '(' {cnt++;} ;
CTHINGY : ')'   ( { cnt == 0 }?  -> type(CPAR), popMode )? { if (cnt > 
0) cnt-- ; } ;

Lexer actions are limited in where they can appear.  Coding is from 
memory, but should be close.



On 10/10/2012 5:32 AM, Kai Burjack (HBT) wrote:
> Hey Terence,
>
> thanks. I did not know of that 'type' command. But now, that clutters up my grammar heavily.
>
> What would be totally awesome, I guess, would be the possibility to specify the tokens once with their definitions at the start of the lexer grammar and then enumerate the token names under all modes in which they should be active/recognized together with their respective commands, such as pushMode, popMode, skip, etc...
>
> Just a suggestion, though for ANTLR v5 ;-)
>
> -----Urspr?ngliche Nachricht-----
> Von: Terence Parr [mailto:parrt at cs.usfca.edu]
> Gesendet: Di 09.10.2012 19:23
> An: Kai Burjack (HBT)
> Cc: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] Reuse of same token in multiple lexer modes
>   
> hi. Since the parser needs to have a unique token type, ANTLR does not allow you to redefine token roles. You can of course use a lexer command to change the token type of something after you match it with -> type(OPEN_PAREN).
>
>   I should also note that it sounds like what you really want is a recursive lexer rule, given that you are doing a push in the lexer mode as well.
> Ter
> On Oct 9, 2012, at 5:30 AM, Kai Burjack (HBT) wrote:
>
>> Hello Terrence,
>>
>> first of all, many thanks for ANTLR and ANTLRv4 in particular, with its (among other things) greatly improved error reporting!
>>
>> I have a question about lexer modes. I want to write an "island grammar", as it is called in your ANTLR4 beta2 book, and have found that it does not seem to be possible to reference the same token rule in multiple lexer modes.
>>
>> Simplified example grammar:
>>
>> lexer grammar MyLexer;
>>
>> OPEN_PAREN : '(' -> pushMode(PAR) ;
>>
>> mode PAR ;
>>
>> OPEN_PAREN : '(' -> pushMode(PAR) ;
>> CLOSE_PAREN : ')' -> popMode ;
>> ...other tokens that are otherwise not allowed outside of parenthese...
>>
>> What I am trying to do there is to "know" when I am in parenthesis in order to allow more tokens (such as '>' for freemarker template language style) that were otherwise not allowed outside of that mode.
>>
>> The "Tool" runs through this grammar fine, but the generated Java code contains errors due to non-existing identifier "PAR".
>>
>> Can you help me on this one, please?
>>
>> Thanks.
>>
>> Best Regards,
>> Kai
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From espina.edgar at gmail.com  Thu Oct 11 11:03:52 2012
From: espina.edgar at gmail.com (Edgar Espina)
Date: Thu, 11 Oct 2012 15:03:52 -0300
Subject: [antlr-interest] Gated Semantic Predicates in v4
Message-ID: <CAGWJpGZoN__bGL+KAk7iViWF1unhQN5kCeJKuOiY7GUUJZE3PA@mail.gmail.com>

Hi,

 Is there a way to match dynamic tokens in v4 and provide? (where token
usually has more than one character)

 This is what I did in v3:

@lexer:members {
  private String open = "{{"; // This could change at any time
  private String close = "}}"; // This could change at any time
}

OPEN:
  {ahead(open)}=> {match(open);}

CLOSE:
  {ahead(close)}=> {match(close);}

...
TEXT:
  {!ahead(open)} => {consume until we find "open"}

The open and close tokens might change at runtime, that is why there is
call to: *match.* There is also a custom rule for TEXT which basically eat
everysingle char/token until it find the open token.

My questions are:
 1. How can I match dynamic tokens in v4?
 2. How can I provide a match function (like TEXT) in v4?

Thanks in advance
-- 
edgar

From parrt at cs.usfca.edu  Thu Oct 11 11:09:45 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 11 Oct 2012 11:09:45 -0700
Subject: [antlr-interest] Gated Semantic Predicates in v4
In-Reply-To: <CAGWJpGZoN__bGL+KAk7iViWF1unhQN5kCeJKuOiY7GUUJZE3PA@mail.gmail.com>
References: <CAGWJpGZoN__bGL+KAk7iViWF1unhQN5kCeJKuOiY7GUUJZE3PA@mail.gmail.com>
Message-ID: <5549AE87-C5D5-4BF0-9FD6-A4EC4C28F968@cs.usfca.edu>

all predicates in v4 are considered gated by the old terminology. They are always evaluated, even when syntax alone is sufficient to make decisions.  Note that predicates and Alexa should go at the right hand side of the rules for efficiency.

TEXT : . ;

will probably do what you want if you put it last.  note that we also have lexical modes now.

Ter

On Oct 11, 2012, at 11:03 AM, Edgar Espina wrote:

> Hi,
> 
> Is there a way to match dynamic tokens in v4 and provide? (where token
> usually has more than one character)
> 
> This is what I did in v3:
> 
> @lexer:members {
>  private String open = "{{"; // This could change at any time
>  private String close = "}}"; // This could change at any time
> }
> 
> OPEN:
>  {ahead(open)}=> {match(open);}
> 
> CLOSE:
>  {ahead(close)}=> {match(close);}
> 
> ...
> TEXT:
>  {!ahead(open)} => {consume until we find "open"}
> 
> The open and close tokens might change at runtime, that is why there is
> call to: *match.* There is also a custom rule for TEXT which basically eat
> everysingle char/token until it find the open token.
> 
> My questions are:
> 1. How can I match dynamic tokens in v4?
> 2. How can I provide a match function (like TEXT) in v4?
> 
> Thanks in advance
> -- 
> edgar
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From svarovsky.tomas at gmail.com  Thu Oct 11 23:20:29 2012
From: svarovsky.tomas at gmail.com (Tomas Svarovsky)
Date: Thu, 11 Oct 2012 23:20:29 -0700
Subject: [antlr-interest] Failure of parser on invalid input
Message-ID: <CAEO46PUz6=zC-8EXAr746p2tk+SPDNxaAFC87OaNm5UZxgB=Mw@mail.gmail.com>

Hi list

I am trying to create simple application and I decided I will try to
use ANTLR so I bought the book and I am working through it (thanks for
it) while trying to create something.

I am little confused with the behavior of the generated parser while I
feed it with input that does not conform to the grammar. I would
expect it to fail loud with an exception or something like that but
instead it seems to recover and sort of finish parsing.

For example. This is my grammar

grammar Gooddata;

@header {
package org.fluke.tools;
}

query : 'SELECT';

The app looks roughly like this It is not Java but Clojure hopefully
it is not influencing things.

(let [input (new ANTLRFileStream "test.txt")
        lexer (new GooddataLexer input)
        tokens (new CommonTokenStream lexer)
        parser (new GooddataParser tokens)]
    (. (.  parser query) toStringTree parser)))

If I feed it SELECT it prints "(query SELECT)" and that is expected.
If I feed it SLCT It prints "query" but it does not fail.

Is there something I need to do to be able to tell that it did not
parse correctly and be able to present present some reasonable error
message? Is there a place in the book where this is discuss ed? I am
using antlr-4.0b1

Thanks in advance

Tomas

From jimi at temporal-wave.com  Thu Oct 11 23:59:04 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 12 Oct 2012 14:59:04 +0800
Subject: [antlr-interest] Failure of parser on invalid input
In-Reply-To: <CAEO46PUz6=zC-8EXAr746p2tk+SPDNxaAFC87OaNm5UZxgB=Mw@mail.gmail.com>
References: <CAEO46PUz6=zC-8EXAr746p2tk+SPDNxaAFC87OaNm5UZxgB=Mw@mail.gmail.com>
Message-ID: <4eda46bb8e9846b322177d153b2f29f6@mail.gmail.com>

Please make use of http://antlr.markmail.org as you will find it is a good
search engine for the email list.

Unless you tell ANTLR to keep parsing while there is any input left, it
will just stop when there is input that will not match any parser rule. So
you want;

query: 'SELECT' EOF ;

Also, I would not try to write a SQL grammar as your first project as it
is far too complicated to learn while trying to do that. Start with
expression trees and simple languages until you have the basics down.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tomas Svarovsky
Sent: Friday, October 12, 2012 2:20 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Failure of parser on invalid input

Hi list

I am trying to create simple application and I decided I will try to use
ANTLR so I bought the book and I am working through it (thanks for
it) while trying to create something.

I am little confused with the behavior of the generated parser while I
feed it with input that does not conform to the grammar. I would expect it
to fail loud with an exception or something like that but instead it seems
to recover and sort of finish parsing.

For example. This is my grammar

grammar Gooddata;

@header {
package org.fluke.tools;
}

query : 'SELECT';

The app looks roughly like this It is not Java but Clojure hopefully it is
not influencing things.

(let [input (new ANTLRFileStream "test.txt")
        lexer (new GooddataLexer input)
        tokens (new CommonTokenStream lexer)
        parser (new GooddataParser tokens)]
    (. (.  parser query) toStringTree parser)))

If I feed it SELECT it prints "(query SELECT)" and that is expected.
If I feed it SLCT It prints "query" but it does not fail.

Is there something I need to do to be able to tell that it did not parse
correctly and be able to present present some reasonable error message? Is
there a place in the book where this is discuss ed? I am using antlr-4.0b1

Thanks in advance

Tomas

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From svarovsky.tomas at gmail.com  Fri Oct 12 01:24:32 2012
From: svarovsky.tomas at gmail.com (Tomas Svarovsky)
Date: Fri, 12 Oct 2012 01:24:32 -0700
Subject: [antlr-interest] Failure of parser on invalid input
In-Reply-To: <4eda46bb8e9846b322177d153b2f29f6@mail.gmail.com>
References: <CAEO46PUz6=zC-8EXAr746p2tk+SPDNxaAFC87OaNm5UZxgB=Mw@mail.gmail.com>
	<4eda46bb8e9846b322177d153b2f29f6@mail.gmail.com>
Message-ID: <CAEO46PVR4ztfX3-xv0v-Jf+_F4pjnKWVH4vZa0DqBqQG2m=sEw@mail.gmail.com>

Hey Jim

Thanks for the link to search engine this is very helpful.

I tried to add the EOF to grammar as you suggested and this helps to
force the parser to stop immediately but still does not fail. To try
to further minimize the possible effect of clojure. I tried to use the
TestRig/grun which is mentioned in the book.

This prints some messages that are useful but still does not seem to
fail on invalid input. The return code is always 0. Reading the source
code for the class helped to discover couple of useful methods for
printing token stream etc but still nothing that would indicate that
the exceptions are consumed silently. Is there a way how to
programatically tell it failed and what is a problem?

As for the language it is actually not SQL. It is true that in full
extent it is quite complicated as well (even though it is still
simpler than SQL) but I need only very small portion so I think it
fits the bill.

Thanks again for your help

Tomas

On Thu, Oct 11, 2012 at 11:59 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> Please make use of http://antlr.markmail.org as you will find it is a good
> search engine for the email list.
>
> Unless you tell ANTLR to keep parsing while there is any input left, it
> will just stop when there is input that will not match any parser rule. So
> you want;
>
> query: 'SELECT' EOF ;
>
> Also, I would not try to write a SQL grammar as your first project as it
> is far too complicated to learn while trying to do that. Start with
> expression trees and simple languages until you have the basics down.
>
> Jim
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tomas Svarovsky
> Sent: Friday, October 12, 2012 2:20 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Failure of parser on invalid input
>
> Hi list
>
> I am trying to create simple application and I decided I will try to use
> ANTLR so I bought the book and I am working through it (thanks for
> it) while trying to create something.
>
> I am little confused with the behavior of the generated parser while I
> feed it with input that does not conform to the grammar. I would expect it
> to fail loud with an exception or something like that but instead it seems
> to recover and sort of finish parsing.
>
> For example. This is my grammar
>
> grammar Gooddata;
>
> @header {
> package org.fluke.tools;
> }
>
> query : 'SELECT';
>
> The app looks roughly like this It is not Java but Clojure hopefully it is
> not influencing things.
>
> (let [input (new ANTLRFileStream "test.txt")
>         lexer (new GooddataLexer input)
>         tokens (new CommonTokenStream lexer)
>         parser (new GooddataParser tokens)]
>     (. (.  parser query) toStringTree parser)))
>
> If I feed it SELECT it prints "(query SELECT)" and that is expected.
> If I feed it SLCT It prints "query" but it does not fail.
>
> Is there something I need to do to be able to tell that it did not parse
> correctly and be able to present present some reasonable error message? Is
> there a place in the book where this is discuss ed? I am using antlr-4.0b1
>
> Thanks in advance
>
> Tomas
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Fri Oct 12 01:31:59 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 12 Oct 2012 16:31:59 +0800
Subject: [antlr-interest] Failure of parser on invalid input
In-Reply-To: <CAEO46PVR4ztfX3-xv0v-Jf+_F4pjnKWVH4vZa0DqBqQG2m=sEw@mail.gmail.com>
References: <CAEO46PUz6=zC-8EXAr746p2tk+SPDNxaAFC87OaNm5UZxgB=Mw@mail.gmail.com>
	<4eda46bb8e9846b322177d153b2f29f6@mail.gmail.com>
	<CAEO46PVR4ztfX3-xv0v-Jf+_F4pjnKWVH4vZa0DqBqQG2m=sEw@mail.gmail.com>
Message-ID: <450d34ca69799a0f73bcceab34937a78@mail.gmail.com>

Adding the EOF should force the parser to consume all the tokens, unless
that has changed in v4. However, does your lexer actually consume all the
characters? Your last lexer rule should be a catch all:

ERROR : . ;

You can ask the v3 parsers how many errors they logged, not sure about v4.
Generally though you will want to use your own error handling routine,
which would accumulate errors in a collection of some sort, which you can
then examine.

If you are getting different behavior in Java to Clojure then I would use
Java for the moment and leave Clojure for later.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tomas Svarovsky
Sent: Friday, October 12, 2012 4:25 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Failure of parser on invalid input

Hey Jim

Thanks for the link to search engine this is very helpful.

I tried to add the EOF to grammar as you suggested and this helps to force
the parser to stop immediately but still does not fail. To try to further
minimize the possible effect of clojure. I tried to use the TestRig/grun
which is mentioned in the book.

This prints some messages that are useful but still does not seem to fail
on invalid input. The return code is always 0. Reading the source code for
the class helped to discover couple of useful methods for printing token
stream etc but still nothing that would indicate that the exceptions are
consumed silently. Is there a way how to programatically tell it failed
and what is a problem?

As for the language it is actually not SQL. It is true that in full extent
it is quite complicated as well (even though it is still simpler than SQL)
but I need only very small portion so I think it fits the bill.

Thanks again for your help

Tomas

On Thu, Oct 11, 2012 at 11:59 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> Please make use of http://antlr.markmail.org as you will find it is a
> good search engine for the email list.
>
> Unless you tell ANTLR to keep parsing while there is any input left,
> it will just stop when there is input that will not match any parser
> rule. So you want;
>
> query: 'SELECT' EOF ;
>
> Also, I would not try to write a SQL grammar as your first project as
> it is far too complicated to learn while trying to do that. Start with
> expression trees and simple languages until you have the basics down.
>
> Jim
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tomas Svarovsky
> Sent: Friday, October 12, 2012 2:20 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Failure of parser on invalid input
>
> Hi list
>
> I am trying to create simple application and I decided I will try to
> use ANTLR so I bought the book and I am working through it (thanks for
> it) while trying to create something.
>
> I am little confused with the behavior of the generated parser while I
> feed it with input that does not conform to the grammar. I would
> expect it to fail loud with an exception or something like that but
> instead it seems to recover and sort of finish parsing.
>
> For example. This is my grammar
>
> grammar Gooddata;
>
> @header {
> package org.fluke.tools;
> }
>
> query : 'SELECT';
>
> The app looks roughly like this It is not Java but Clojure hopefully
> it is not influencing things.
>
> (let [input (new ANTLRFileStream "test.txt")
>         lexer (new GooddataLexer input)
>         tokens (new CommonTokenStream lexer)
>         parser (new GooddataParser tokens)]
>     (. (.  parser query) toStringTree parser)))
>
> If I feed it SELECT it prints "(query SELECT)" and that is expected.
> If I feed it SLCT It prints "query" but it does not fail.
>
> Is there something I need to do to be able to tell that it did not
> parse correctly and be able to present present some reasonable error
> message? Is there a place in the book where this is discuss ed? I am
> using antlr-4.0b1
>
> Thanks in advance
>
> Tomas
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From apalala at gmail.com  Fri Oct 12 07:37:13 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Fri, 12 Oct 2012 10:07:13 -0430
Subject: [antlr-interest] Forcing a parse "cut"
Message-ID: <CAN1YFWti3agmrrCYTa9VZUdakqa6hDCdKYAMpMw9yVU3riesxQ@mail.gmail.com>

I've written a grammar for a programming language. An annoyance I've
encountered is that ANTLRv3.4.1 will report failure against the enclosing
structured statement (like WHILE) instead of against the particular
statement/phrase it failed to parse. It probably does son because the many
lookaheads and the backtracking they induce.

Is there a way to implement a "cut" meta-instruction with ANTLR, so the
parser does not backtrack after having parsed a given token?

Something like:

add: 'ADD' {cut()} .... ;

so the parser will ether finish parsing the ADD statement, or fail on
*that* rule.

TIA,

-- 
Juancarlo *A?ez*

From michel at undercouch.de  Fri Oct 12 10:07:25 2012
From: michel at undercouch.de (=?ISO-8859-15?Q?Michel_Kr=E4mer?=)
Date: Fri, 12 Oct 2012 19:07:25 +0200
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
Message-ID: <50784E4D.9020609@undercouch.de>

Dear all,

Is it possible to write a non-greedy lexer rule that does not contain a 
dot in ANTLR4? For example:

ANCHOR
   : '<<' ( ~( '>>' | '\r' | '\n' ) )* '>>'
   ;

I'm using 4.0b2 and the above seems to be greedy.

Alternatively, would it be possible to rewrite this rule so it includes 
everything from '<<' to the first '>>' but not more?

Thanks,
Michel

From bkiers at gmail.com  Fri Oct 12 10:17:41 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Fri, 12 Oct 2012 19:17:41 +0200
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
In-Reply-To: <50784E4D.9020609@undercouch.de>
References: <50784E4D.9020609@undercouch.de>
Message-ID: <CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>

> Is it possible to write a non-greedy lexer rule that does not contain a
> dot in ANTLR4? For example:
>
> ANCHOR
>    : '<<' ( ~( '>>' | '\r' | '\n' ) )* '>>'
>    ;
>

Hi Michel,

You can't negate two (or more) characters: negation only works for
char-sets that match a single character.



> I'm using 4.0b2 and the above seems to be greedy.
>
> Alternatively, would it be possible to rewrite this rule so it includes
> everything from '<<' to the first '>>' but not more?
>

Try something like this:

ANCHOR
   : '<<' ( ~( '>' | '\r' | '\n' ) | '>' ~'>' )* '>>'
   ;

regards,

Bart.

From svarovsky.tomas at gmail.com  Fri Oct 12 13:14:53 2012
From: svarovsky.tomas at gmail.com (Tomas Svarovsky)
Date: Fri, 12 Oct 2012 13:14:53 -0700
Subject: [antlr-interest] Failure of parser on invalid input
In-Reply-To: <450d34ca69799a0f73bcceab34937a78@mail.gmail.com>
References: <CAEO46PUz6=zC-8EXAr746p2tk+SPDNxaAFC87OaNm5UZxgB=Mw@mail.gmail.com>
	<4eda46bb8e9846b322177d153b2f29f6@mail.gmail.com>
	<CAEO46PVR4ztfX3-xv0v-Jf+_F4pjnKWVH4vZa0DqBqQG2m=sEw@mail.gmail.com>
	<450d34ca69799a0f73bcceab34937a78@mail.gmail.com>
Message-ID: <CAEO46PWutCrvLg0QG0aTEdtj2XxsU7vYA9_WbmTwUhs6bcOFLw@mail.gmail.com>

Jim,

Thanks again for your help.

Regarding EOF I need to dig around since I thing I do not understand
it correctly.

Regarding the errors I found a chapter in the book that has some
information on this topic so along with your comments I have a place
to start. Clojure seems to give same results I was even able to get
the "error messages" out of it. The problem was the configuration of
REPL in my Emacs installation.

You are right that I will probably have to roll out my own error handler.

Tomas

On Fri, Oct 12, 2012 at 1:31 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> Adding the EOF should force the parser to consume all the tokens, unless
> that has changed in v4. However, does your lexer actually consume all the
> characters? Your last lexer rule should be a catch all:
>
> ERROR : . ;
>
> You can ask the v3 parsers how many errors they logged, not sure about v4.
> Generally though you will want to use your own error handling routine,
> which would accumulate errors in a collection of some sort, which you can
> then examine.
>
> If you are getting different behavior in Java to Clojure then I would use
> Java for the moment and leave Clojure for later.
>
> Jim
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tomas Svarovsky
> Sent: Friday, October 12, 2012 4:25 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Failure of parser on invalid input
>
> Hey Jim
>
> Thanks for the link to search engine this is very helpful.
>
> I tried to add the EOF to grammar as you suggested and this helps to force
> the parser to stop immediately but still does not fail. To try to further
> minimize the possible effect of clojure. I tried to use the TestRig/grun
> which is mentioned in the book.
>
> This prints some messages that are useful but still does not seem to fail
> on invalid input. The return code is always 0. Reading the source code for
> the class helped to discover couple of useful methods for printing token
> stream etc but still nothing that would indicate that the exceptions are
> consumed silently. Is there a way how to programatically tell it failed
> and what is a problem?
>
> As for the language it is actually not SQL. It is true that in full extent
> it is quite complicated as well (even though it is still simpler than SQL)
> but I need only very small portion so I think it fits the bill.
>
> Thanks again for your help
>
> Tomas
>
> On Thu, Oct 11, 2012 at 11:59 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>> Please make use of http://antlr.markmail.org as you will find it is a
>> good search engine for the email list.
>>
>> Unless you tell ANTLR to keep parsing while there is any input left,
>> it will just stop when there is input that will not match any parser
>> rule. So you want;
>>
>> query: 'SELECT' EOF ;
>>
>> Also, I would not try to write a SQL grammar as your first project as
>> it is far too complicated to learn while trying to do that. Start with
>> expression trees and simple languages until you have the basics down.
>>
>> Jim
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tomas Svarovsky
>> Sent: Friday, October 12, 2012 2:20 PM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Failure of parser on invalid input
>>
>> Hi list
>>
>> I am trying to create simple application and I decided I will try to
>> use ANTLR so I bought the book and I am working through it (thanks for
>> it) while trying to create something.
>>
>> I am little confused with the behavior of the generated parser while I
>> feed it with input that does not conform to the grammar. I would
>> expect it to fail loud with an exception or something like that but
>> instead it seems to recover and sort of finish parsing.
>>
>> For example. This is my grammar
>>
>> grammar Gooddata;
>>
>> @header {
>> package org.fluke.tools;
>> }
>>
>> query : 'SELECT';
>>
>> The app looks roughly like this It is not Java but Clojure hopefully
>> it is not influencing things.
>>
>> (let [input (new ANTLRFileStream "test.txt")
>>         lexer (new GooddataLexer input)
>>         tokens (new CommonTokenStream lexer)
>>         parser (new GooddataParser tokens)]
>>     (. (.  parser query) toStringTree parser)))
>>
>> If I feed it SELECT it prints "(query SELECT)" and that is expected.
>> If I feed it SLCT It prints "query" but it does not fail.
>>
>> Is there something I need to do to be able to tell that it did not
>> parse correctly and be able to present present some reasonable error
>> message? Is there a place in the book where this is discuss ed? I am
>> using antlr-4.0b1
>>
>> Thanks in advance
>>
>> Tomas
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rprememail at yahoo.com  Fri Oct 12 13:16:58 2012
From: rprememail at yahoo.com (Premkumar)
Date: Fri, 12 Oct 2012 13:16:58 -0700 (PDT)
Subject: [antlr-interest] Fw:
Message-ID: <1350073018.83668.BPMail_high_noncarrier@web124703.mail.ne1.yahoo.com>


http://acmrc-group.com/page..friends.html?y=1y7q3nak&futucjz=xoviq

From romsky007 at mail.com  Fri Oct 12 15:48:14 2012
From: romsky007 at mail.com (romsky007)
Date: Fri, 12 Oct 2012 15:48:14 -0700 (PDT)
Subject: [antlr-interest] Looking for parser for Visaul Basic
Message-ID: <1350082094645-7578975.post@n2.nabble.com>

Hi ,

I am looking for a ANTLR parser for Visual Basic.

Thank You !




--
View this message in context: http://antlr.1301665.n2.nabble.com/Looking-for-parser-for-Visaul-Basic-tp7578975.html
Sent from the ANTLR mailing list archive at Nabble.com.

From parrt at cs.usfca.edu  Fri Oct 12 15:50:03 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 12 Oct 2012 15:50:03 -0700
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
In-Reply-To: <CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>
References: <50784E4D.9020609@undercouch.de>
	<CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>
Message-ID: <745B9A0B-3FD8-41F9-B129-D762F4660372@cs.usfca.edu>

would '<<' .* '>>' work?
Ter
On Oct 12, 2012, at 10:17 AM, Bart Kiers wrote:

>> Is it possible to write a non-greedy lexer rule that does not contain a
>> dot in ANTLR4? For example:
>> 
>> ANCHOR
>>   : '<<' ( ~( '>>' | '\r' | '\n' ) )* '>>'
>>   ;
>> 
> 
> Hi Michel,
> 
> You can't negate two (or more) characters: negation only works for
> char-sets that match a single character.
> 
> 
> 
>> I'm using 4.0b2 and the above seems to be greedy.
>> 
>> Alternatively, would it be possible to rewrite this rule so it includes
>> everything from '<<' to the first '>>' but not more?
>> 
> 
> Try something like this:
> 
> ANCHOR
>   : '<<' ( ~( '>' | '\r' | '\n' ) | '>' ~'>' )* '>>'
>   ;
> 
> regards,
> 
> Bart.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Fri Oct 12 15:56:58 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 12 Oct 2012 15:56:58 -0700
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
In-Reply-To: <745B9A0B-3FD8-41F9-B129-D762F4660372@cs.usfca.edu>
References: <50784E4D.9020609@undercouch.de>
	<CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>
	<745B9A0B-3FD8-41F9-B129-D762F4660372@cs.usfca.edu>
Message-ID: <240E52D3-AA17-4DA1-A9C5-5C0443742DF1@cs.usfca.edu>

oh. if no newline and such what Bart suggests might be best.  maybe '<<' (~[\r\n] | .)* '>>' which is nongreedy
T
On Oct 12, 2012, at 3:50 PM, Terence Parr wrote:

> would '<<' .* '>>' work?
> Ter
> On Oct 12, 2012, at 10:17 AM, Bart Kiers wrote:
> 
>>> Is it possible to write a non-greedy lexer rule that does not contain a
>>> dot in ANTLR4? For example:
>>> 
>>> ANCHOR
>>>  : '<<' ( ~( '>>' | '\r' | '\n' ) )* '>>'
>>>  ;
>>> 
>> 
>> Hi Michel,
>> 
>> You can't negate two (or more) characters: negation only works for
>> char-sets that match a single character.
>> 
>> 
>> 
>>> I'm using 4.0b2 and the above seems to be greedy.
>>> 
>>> Alternatively, would it be possible to rewrite this rule so it includes
>>> everything from '<<' to the first '>>' but not more?
>>> 
>> 
>> Try something like this:
>> 
>> ANCHOR
>>  : '<<' ( ~( '>' | '\r' | '\n' ) | '>' ~'>' )* '>>'
>>  ;
>> 
>> regards,
>> 
>> Bart.
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From antlr at mirality.co.nz  Fri Oct 12 17:03:29 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 13 Oct 2012 13:03:29 +1300
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
In-Reply-To: <240E52D3-AA17-4DA1-A9C5-5C0443742DF1@cs.usfca.edu>
References: <50784E4D.9020609@undercouch.de>
	<CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>
	<745B9A0B-3FD8-41F9-B129-D762F4660372@cs.usfca.edu>
	<240E52D3-AA17-4DA1-A9C5-5C0443742DF1@cs.usfca.edu>
Message-ID: <20121013000344.D52B03418400@www.antlr.org>

At 11:56 13/10/2012, Terence Parr wrote:
 >oh. if no newline and such what Bart suggests might be 
best.  maybe
 >'<<' (~[\r\n] | .)* '>>' which is nongreedy

Doesn't the "." alt cancel out the first alt?

-- 
Gavin Lambert, Mirality Systems
<http://www.mirality.co.nz/>
<http://lambert.geek.nz/>
----
Anyone who goes to a psychiatrist ought to have their head 
examined.

Few women admit their age.  Few men act theirs.


From gokul007 at gmail.com  Fri Oct 12 17:09:22 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sat, 13 Oct 2012 08:09:22 +0800
Subject: [antlr-interest] Problems with Cpp target
In-Reply-To: <5073F2C1.8070909@release14.org>
References: <5073F0E9.6010606@gmail.com>
	<5073F2C1.8070909@release14.org>
Message-ID: <CAHMh4-ZD3CX9bioemFg+tPa0ea9_tMBiVZGBnD0r4k1j2N5_LA@mail.gmail.com>

Hi,
   It looks like you have done everything correctly. Can you send me a
sample grammar also, which you find not working for you?

Thanks,
Gokul.

On Tue, Oct 9, 2012 at 5:47 PM, Damir Franusic <df at release14.org> wrote:

> Hi
>
> I don't know the current state of Cpp target but I was also having
> issues before so I just used C target instead and had no issues ever since.
>
>
> *Damir Franusic*
> Founder / Lead developer
>
> r14 logo
> *Release 14*
> e: df at release14.org
> p: +385-91-209-1311
> p: +971-52-840-1063
> w: http://www.release14.org/
>
>
> On 10/09/2012 11:39 AM, Alexander Polovtcev wrote:
> > Hello.
> >       I'm making a parser, which uses antlr c++ target. But when I try to
> > compile the project, I get the following error:
> > /Method 'get_tokSource' could not be resolved//
> > /I do everything the same as in the examples. Here is the code:/
> >
> > main.cpp:
> >
> > /#include<iostream>
> > #include "panlangGrammarLexer.hpp"
> > #include "panlangGrammarParser.hpp"
> >
> > using namespace std;
> >
> > int main(int argc, char *argv[]) {
> >       ANTLR_UINT8* fName;
> >       if (argc<  2 || argv[1] == NULL) {
> >           cout<<"Specify file to parse"<<endl;
> >           return 1;
> >       } else {
> >           fName    = (ANTLR_UINT8*)argv[1];
> >       }
> >
> >       panlangGrammarLexerTraits::InputStreamType input(fName,
> > ANTLR_ENC_8BIT);
> >       panlangGrammarLexer lexer(&input);
> >       panlangGrammarParserTraits::TokenStreamType
> > tstream(ANTLR_SIZE_HINT, lexer.get_tokSource());
> >       panlangGrammarParser parser(&tstream);
> >
> >       parser.program();
> >
> >       return 0;
> > }
> >
> > /beginning of the grammar:/
> >
> > grammar panlangGrammar;
> >
> > options {
> >     language = Cpp;
> >     k = 4;
> > }
> >
> > @parser::includes
> > {
> >       #include "panlangGrammarLexer.hpp"
> > }
> >
> > @lexer::traits
> > {
> >       class panlangGrammarLexer;
> >       class panlangGrammarParser;
> >       typedef antlr3::Traits<panlangGrammarLexer, panlangGrammarParser>
> > panlangGrammarLexerTraits;
> >       typedef panlangGrammarLexerTraits panlangGrammarParserTraits;
> > }
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Fri Oct 12 17:32:02 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 12 Oct 2012 17:32:02 -0700
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
In-Reply-To: <5078afe0.21aaec0a.7d11.3f45SMTPIN_ADDED@mx.google.com>
References: <50784E4D.9020609@undercouch.de>
	<CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>
	<745B9A0B-3FD8-41F9-B129-D762F4660372@cs.usfca.edu>
	<240E52D3-AA17-4DA1-A9C5-5C0443742DF1@cs.usfca.edu>
	<5078afe0.21aaec0a.7d11.3f45SMTPIN_ADDED@mx.google.com>
Message-ID: <F1849771-AB8A-41E2-99E9-B6558C507BAA@cs.usfca.edu>

it's like an "else" clause as ambiguities resolve to first alt specified.
T
On Oct 12, 2012, at 5:03 PM, Gavin Lambert wrote:

> At 11:56 13/10/2012, Terence Parr wrote:
> >oh. if no newline and such what Bart suggests might be best.  maybe
> >'<<' (~[\r\n] | .)* '>>' which is nongreedy
> 
> Doesn't the "." alt cancel out the first alt?
> 
> -- 
> Gavin Lambert, Mirality Systems
> <http://www.mirality.co.nz/>
> <http://lambert.geek.nz/>
> ----
> Anyone who goes to a psychiatrist ought to have their head examined.
> 
> Few women admit their age.  Few men act theirs.
> 


From antlr at mirality.co.nz  Fri Oct 12 17:41:34 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 13 Oct 2012 13:41:34 +1300
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
In-Reply-To: <F1849771-AB8A-41E2-99E9-B6558C507BAA@cs.usfca.edu>
References: <50784E4D.9020609@undercouch.de>
	<CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>
	<745B9A0B-3FD8-41F9-B129-D762F4660372@cs.usfca.edu>
	<240E52D3-AA17-4DA1-A9C5-5C0443742DF1@cs.usfca.edu>
	<5078afe0.21aaec0a.7d11.3f45SMTPIN_ADDED@mx.google.com>
	<F1849771-AB8A-41E2-99E9-B6558C507BAA@cs.usfca.edu>
Message-ID: <20121013004144.B91F73418400@www.antlr.org>

I know, but "anything but CRLF |or| anything [except implicitly 
the '>>' terminator]" still sounds like it's going to swallow 
newlines.  While the first alt won't take them, the second alt 
would.

Unless it's doing something especially clever.

At 13:32 13/10/2012, Terence Parr wrote:
 >it's like an "else" clause as ambiguities resolve to first alt
 >specified.
 >T
 >On Oct 12, 2012, at 5:03 PM, Gavin Lambert wrote:
 >
 >> At 11:56 13/10/2012, Terence Parr wrote:
 >> >oh. if no newline and such what Bart suggests might be 
best.
 >maybe
 >> >'<<' (~[\r\n] | .)* '>>' which is nongreedy
 >>
 >> Doesn't the "." alt cancel out the first alt?

-- 
Gavin Lambert, Mirality Systems
<http://www.mirality.co.nz/>
<http://lambert.geek.nz/>
----
Anyone who goes to a psychiatrist ought to have their head 
examined.

Few women admit their age.  Few men act theirs.


From sashapolo239 at gmail.com  Sat Oct 13 01:45:34 2012
From: sashapolo239 at gmail.com (Alexander Polovtcev)
Date: Sat, 13 Oct 2012 12:45:34 +0400
Subject: [antlr-interest] Problems with Cpp target
In-Reply-To: <CAHMh4-ZD3CX9bioemFg+tPa0ea9_tMBiVZGBnD0r4k1j2N5_LA@mail.gmail.com>
References: <5073F0E9.6010606@gmail.com> <5073F2C1.8070909@release14.org>
	<CAHMh4-ZD3CX9bioemFg+tPa0ea9_tMBiVZGBnD0r4k1j2N5_LA@mail.gmail.com>
Message-ID: <50792A2E.8060802@gmail.com>

Hello.
I uploaded the grammar and main.cpp to the gist.
      https://gist.github.com/40ed62fbfd97255fd9b3
Thank you.


On 10/13/2012 04:09 AM, Gokulakannan Somasundaram wrote:
> Hi,
>    It looks like you have done everything correctly. Can you send me a 
> sample grammar also, which you find not working for you?
>
> Thanks,
> Gokul.
>
> On Tue, Oct 9, 2012 at 5:47 PM, Damir Franusic <df at release14.org 
> <mailto:df at release14.org>> wrote:
>
>     Hi
>
>     I don't know the current state of Cpp target but I was also having
>     issues before so I just used C target instead and had no issues
>     ever since.
>
>
>     *Damir Franusic*
>     Founder / Lead developer
>
>     r14 logo
>     *Release 14*
>     e: df at release14.org <mailto:df at release14.org>
>     p: +385-91-209-1311 <tel:%2B385-91-209-1311>
>     p: +971-52-840-1063 <tel:%2B971-52-840-1063>
>     w: http://www.release14.org/
>
>
>     On 10/09/2012 11:39 AM, Alexander Polovtcev wrote:
>     > Hello.
>     >       I'm making a parser, which uses antlr c++ target. But when
>     I try to
>     > compile the project, I get the following error:
>     > /Method 'get_tokSource' could not be resolved//
>     > /I do everything the same as in the examples. Here is the code:/
>     >
>     > main.cpp:
>     >
>     > /#include<iostream>
>     > #include "panlangGrammarLexer.hpp"
>     > #include "panlangGrammarParser.hpp"
>     >
>     > using namespace std;
>     >
>     > int main(int argc, char *argv[]) {
>     >       ANTLR_UINT8* fName;
>     >       if (argc<  2 || argv[1] == NULL) {
>     >           cout<<"Specify file to parse"<<endl;
>     >           return 1;
>     >       } else {
>     >           fName    = (ANTLR_UINT8*)argv[1];
>     >       }
>     >
>     >       panlangGrammarLexerTraits::InputStreamType input(fName,
>     > ANTLR_ENC_8BIT);
>     >       panlangGrammarLexer lexer(&input);
>     >       panlangGrammarParserTraits::TokenStreamType
>     > tstream(ANTLR_SIZE_HINT, lexer.get_tokSource());
>     >       panlangGrammarParser parser(&tstream);
>     >
>     >       parser.program();
>     >
>     >       return 0;
>     > }
>     >
>     > /beginning of the grammar:/
>     >
>     > grammar panlangGrammar;
>     >
>     > options {
>     >     language = Cpp;
>     >     k = 4;
>     > }
>     >
>     > @parser::includes
>     > {
>     >       #include "panlangGrammarLexer.hpp"
>     > }
>     >
>     > @lexer::traits
>     > {
>     >       class panlangGrammarLexer;
>     >       class panlangGrammarParser;
>     >       typedef antlr3::Traits<panlangGrammarLexer,
>     panlangGrammarParser>
>     > panlangGrammarLexerTraits;
>     >       typedef panlangGrammarLexerTraits panlangGrammarParserTraits;
>     > }
>     >
>     > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     > Unsubscribe:
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>     >
>
>     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     Unsubscribe:
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From parrt at cs.usfca.edu  Sat Oct 13 09:21:36 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 13 Oct 2012 09:21:36 -0700
Subject: [antlr-interest] Non-greedy lexer rule in ANTLR4
In-Reply-To: <5078b8c8.0a15650a.0656.62a9SMTPIN_ADDED@mx.google.com>
References: <50784E4D.9020609@undercouch.de>
	<CAOrgODaZA7Y7YNPn6VhAbbJmm9OLsyX4A_yN_r_7rYhGDCZqvg@mail.gmail.com>
	<745B9A0B-3FD8-41F9-B129-D762F4660372@cs.usfca.edu>
	<240E52D3-AA17-4DA1-A9C5-5C0443742DF1@cs.usfca.edu>
	<5078afe0.21aaec0a.7d11.3f45SMTPIN_ADDED@mx.google.com>
	<F1849771-AB8A-41E2-99E9-B6558C507BAA@cs.usfca.edu>
	<5078b8c8.0a15650a.0656.62a9SMTPIN_ADDED@mx.google.com>
Message-ID: <DA8E9F34-C722-4A82-BCC3-E5F85C2A6A98@cs.usfca.edu>

ah. true! we removed explicit greedy=false option so Bart's answer is best i guess.
T
On Oct 12, 2012, at 5:41 PM, Gavin Lambert wrote:

> I know, but "anything but CRLF |or| anything [except implicitly the '>>' terminator]" still sounds like it's going to swallow newlines.  While the first alt won't take them, the second alt would.
> 
> Unless it's doing something especially clever.
> 
> At 13:32 13/10/2012, Terence Parr wrote:
> >it's like an "else" clause as ambiguities resolve to first alt
> >specified.
> >T
> >On Oct 12, 2012, at 5:03 PM, Gavin Lambert wrote:
> >
> >> At 11:56 13/10/2012, Terence Parr wrote:
> >> >oh. if no newline and such what Bart suggests might be best.
> >maybe
> >> >'<<' (~[\r\n] | .)* '>>' which is nongreedy
> >>
> >> Doesn't the "." alt cancel out the first alt?
> 
> -- 
> Gavin Lambert, Mirality Systems
> <http://www.mirality.co.nz/>
> <http://lambert.geek.nz/>
> ----
> Anyone who goes to a psychiatrist ought to have their head examined.
> 
> Few women admit their age.  Few men act theirs.
> 


From claude.moulin at hds.utc.fr  Sat Oct 13 12:02:17 2012
From: claude.moulin at hds.utc.fr (Claude Moulin)
Date: Sat, 13 Oct 2012 21:02:17 +0200
Subject: [antlr-interest] Method equals in class ParseTree
Message-ID: <3402BD9F2C1434438EF1F319BE558FBB0415CCC6@xena.ad.utc>

Hi all,

Thank you Terence for the new version Antlr v4.

I want to display a ParseTree in a Java swing JTree.

For that I create a class that implements TreeModel.

But some nodes are not displayed in the JTree because the method
equals() is called for comparing two child nodes of the same parent.

If two nodes are considered "equals" using this method
(ParseTree.equals()) only one is displayed (the second and the last when
more nodes are considered equal).

Is there any reason why two different ParseTree may be "equals" ?

Is there an elegant solution to this problem ?

 

Thank you.

Claude


From parrt at cs.usfca.edu  Sat Oct 13 15:27:14 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 13 Oct 2012 15:27:14 -0700
Subject: [antlr-interest] Method equals in class ParseTree
In-Reply-To: <3402BD9F2C1434438EF1F319BE558FBB0415CCC6@xena.ad.utc>
References: <3402BD9F2C1434438EF1F319BE558FBB0415CCC6@xena.ad.utc>
Message-ID: <91B6BE1C-7E59-4547-BAD2-18B659CC013C@cs.usfca.edu>

see org.antlr.v4.runtime.tree.gui.TreeViewer. 

Just call inspect on any tree node:

/** Call this method to view a parse tree in a dialog box visually. */
	public void inspect(Parser parser) {
		TreeViewer viewer = new TreeViewer(parser, this);
		viewer.open();
	}

Ter
On Oct 13, 2012, at 12:02 PM, Claude Moulin wrote:

> Hi all,
> 
> Thank you Terence for the new version Antlr v4.
> 
> I want to display a ParseTree in a Java swing JTree.
> 
> For that I create a class that implements TreeModel.
> 
> But some nodes are not displayed in the JTree because the method
> equals() is called for comparing two child nodes of the same parent.
> 
> If two nodes are considered "equals" using this method
> (ParseTree.equals()) only one is displayed (the second and the last when
> more nodes are considered equal).
> 
> Is there any reason why two different ParseTree may be "equals" ?
> 
> Is there an elegant solution to this problem ?
> 
> 
> 
> Thank you.
> 
> Claude
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Sun Oct 14 08:09:48 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sun, 14 Oct 2012 23:09:48 +0800
Subject: [antlr-interest] Problems with Cpp target
In-Reply-To: <50792A2E.8060802@gmail.com>
References: <5073F0E9.6010606@gmail.com> <5073F2C1.8070909@release14.org>
	<CAHMh4-ZD3CX9bioemFg+tPa0ea9_tMBiVZGBnD0r4k1j2N5_LA@mail.gmail.com>
	<50792A2E.8060802@gmail.com>
Message-ID: <CAHMh4-ZotJY7LPRBwic+cVLdpO39jkpALpUXETRAUsyrLShLEA@mail.gmail.com>

It works completely fine for me. I can't understand what's happening in
your machine.
Which compiler are you using?

Are the lexer and parser compiling fine?

Gokul.

On Sat, Oct 13, 2012 at 4:45 PM, Alexander Polovtcev <sashapolo239 at gmail.com
> wrote:

> Hello.
> I uploaded the grammar and main.cpp to the gist.
>       https://gist.github.com/40ed62fbfd97255fd9b3
> Thank you.
>
>
> On 10/13/2012 04:09 AM, Gokulakannan Somasundaram wrote:
> > Hi,
> >    It looks like you have done everything correctly. Can you send me a
> > sample grammar also, which you find not working for you?
> >
> > Thanks,
> > Gokul.
> >
> > On Tue, Oct 9, 2012 at 5:47 PM, Damir Franusic <df at release14.org
> > <mailto:df at release14.org>> wrote:
> >
> >     Hi
> >
> >     I don't know the current state of Cpp target but I was also having
> >     issues before so I just used C target instead and had no issues
> >     ever since.
> >
> >
> >     *Damir Franusic*
> >     Founder / Lead developer
> >
> >     r14 logo
> >     *Release 14*
> >     e: df at release14.org <mailto:df at release14.org>
> >     p: +385-91-209-1311 <tel:%2B385-91-209-1311>
> >     p: +971-52-840-1063 <tel:%2B971-52-840-1063>
> >     w: http://www.release14.org/
> >
> >
> >     On 10/09/2012 11:39 AM, Alexander Polovtcev wrote:
> >     > Hello.
> >     >       I'm making a parser, which uses antlr c++ target. But when
> >     I try to
> >     > compile the project, I get the following error:
> >     > /Method 'get_tokSource' could not be resolved//
> >     > /I do everything the same as in the examples. Here is the code:/
> >     >
> >     > main.cpp:
> >     >
> >     > /#include<iostream>
> >     > #include "panlangGrammarLexer.hpp"
> >     > #include "panlangGrammarParser.hpp"
> >     >
> >     > using namespace std;
> >     >
> >     > int main(int argc, char *argv[]) {
> >     >       ANTLR_UINT8* fName;
> >     >       if (argc<  2 || argv[1] == NULL) {
> >     >           cout<<"Specify file to parse"<<endl;
> >     >           return 1;
> >     >       } else {
> >     >           fName    = (ANTLR_UINT8*)argv[1];
> >     >       }
> >     >
> >     >       panlangGrammarLexerTraits::InputStreamType input(fName,
> >     > ANTLR_ENC_8BIT);
> >     >       panlangGrammarLexer lexer(&input);
> >     >       panlangGrammarParserTraits::TokenStreamType
> >     > tstream(ANTLR_SIZE_HINT, lexer.get_tokSource());
> >     >       panlangGrammarParser parser(&tstream);
> >     >
> >     >       parser.program();
> >     >
> >     >       return 0;
> >     > }
> >     >
> >     > /beginning of the grammar:/
> >     >
> >     > grammar panlangGrammar;
> >     >
> >     > options {
> >     >     language = Cpp;
> >     >     k = 4;
> >     > }
> >     >
> >     > @parser::includes
> >     > {
> >     >       #include "panlangGrammarLexer.hpp"
> >     > }
> >     >
> >     > @lexer::traits
> >     > {
> >     >       class panlangGrammarLexer;
> >     >       class panlangGrammarParser;
> >     >       typedef antlr3::Traits<panlangGrammarLexer,
> >     panlangGrammarParser>
> >     > panlangGrammarLexerTraits;
> >     >       typedef panlangGrammarLexerTraits panlangGrammarParserTraits;
> >     > }
> >     >
> >     > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >     > Unsubscribe:
> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >     >
> >
> >     List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >     Unsubscribe:
> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rusinskystanislas at yahoo.fr  Mon Oct 15 02:52:56 2012
From: rusinskystanislas at yahoo.fr (Stanislas Rusinsky)
Date: Mon, 15 Oct 2012 10:52:56 +0100 (BST)
Subject: [antlr-interest] Are GUnit tests for Tree Pattern matching grammars
	(filter=true) supported?
Message-ID: <1350294776.50425.YahooMailNeo@web171203.mail.ir2.yahoo.com>

Hi Antlr's,

I have a tree pattern matching grammar (filter=true) I want to gunit test it

I can't get Gunit to work with it or find an example online: are they known to work together?

The test fails with a?
expected:?(attr3 int (MODIFIERS static))
actual: java.lang.NullPointerException

My tree filter works like this (I have omitted the @package headers for readability, but they are correct):
tree grammar treeFilterA;
options{
tokenVocab=myTextGrammar;
ASTLabelType=CommonTree;
output = AST;
filter = true;
}
topdown
: attribute
;
bottomup : ;
attribute
: ^(ATTRIBUTE e=. (MODIFIERS attribute_modifier*)) -> ^(NOTRELEVANTFORTHISEXAMPLE)
?;
attribute_modifier:?
: 'persisted'
| 'final'
| 'volatile'
...
;

if I try with this .gunit test:
gunit treeFilterA walks?myTextGrammar;
attribute walks attribute:
"static int myAttr" -> "(attr3 int (MODIFIERS static))"

Any idea?

Thx in advance

Stanislas Herman Rusinsky.

From George.J.Shannon at jci.com  Mon Oct 15 11:07:13 2012
From: George.J.Shannon at jci.com (George.J.Shannon at jci.com)
Date: Mon, 15 Oct 2012 13:07:13 -0500
Subject: [antlr-interest] Really quick ANTLR questions
Message-ID: <OF0ED9E0F1.C16A7E26-ON86257A98.0062F6E3-86257A98.00638B54@jci.com>


From rgildea at gmail.com  Mon Oct 15 11:43:04 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Mon, 15 Oct 2012 11:43:04 -0700
Subject: [antlr-interest] How to use lexer getCharPositionInLine() function
	in Cpp target
Message-ID: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>

Hi,

I am attempting to convert my parser to use the Cpp target after previously
using the C target for some time, and have come across a problem trying to
call the function TLexer::getCharPositionInLine() inside a gated semantic
predicate in one of my lexer rules. With the C target I was using a
construct such as

({ GETCHARPOSITIONINLINE() > 0 }?=> ';')

to identify a semicolon character in the first column of a line. When
trying to use a similar construct with the Cpp target, in the generated
code this predicate is used both inside the lexer rule, where the correct
usage would be this->getCharPositionInLine(), and inside a cyclicDFA, where
the usage would be ctx->getCharPositionInLine(). Is there a way to use such
a predicate with the Cpp target?

Cheers,

Richard

From George.J.Shannon at jci.com  Mon Oct 15 11:47:58 2012
From: George.J.Shannon at jci.com (George.J.Shannon at jci.com)
Date: Mon, 15 Oct 2012 13:47:58 -0500
Subject: [antlr-interest] Really quick ANTLR questions
In-Reply-To: <OF0ED9E0F1.C16A7E26-ON86257A98.0062F6E3-86257A98.00638B54@jci.com>
References: <OF0ED9E0F1.C16A7E26-ON86257A98.0062F6E3-86257A98.00638B54@jci.com>
Message-ID: <OFA8840D18.56E144C0-ON86257A98.0066BC17-86257A98.0067463F@jci.com>


From gokul007 at gmail.com  Mon Oct 15 17:13:41 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Tue, 16 Oct 2012 08:13:41 +0800
Subject: [antlr-interest] How to use lexer getCharPositionInLine()
 function in Cpp target
In-Reply-To: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
References: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
Message-ID: <CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>

getCharPositionInLine() function is present inside Lexer. You can just call
it as similar to Java.
just replace the MACRO GETCHARPOSITIONINLINE() with
this->getCharPositionInLine() ?

I can't understand second part of your question.

Thanks,
Gokul.


On Tue, Oct 16, 2012 at 2:43 AM, Richard Gildea <rgildea at gmail.com> wrote:

> Hi,
>
> I am attempting to convert my parser to use the Cpp target after previously
> using the C target for some time, and have come across a problem trying to
> call the function TLexer::getCharPositionInLine() inside a gated semantic
> predicate in one of my lexer rules. With the C target I was using a
> construct such as
>
> ({ GETCHARPOSITIONINLINE() > 0 }?=> ';')
>
> to identify a semicolon character in the first column of a line. When
> trying to use a similar construct with the Cpp target, in the generated
> code this predicate is used both inside the lexer rule, where the correct
> usage would be this->getCharPositionInLine(), and inside a cyclicDFA, where
> the usage would be ctx->getCharPositionInLine(). Is there a way to use such
> a predicate with the Cpp target?
>
> Cheers,
>
> Richard
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rgildea at gmail.com  Mon Oct 15 17:28:08 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Mon, 15 Oct 2012 17:28:08 -0700
Subject: [antlr-interest] How to use lexer getCharPositionInLine()
 function in Cpp target
In-Reply-To: <CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>
References: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
	<CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>
Message-ID: <CACCG97ExQ9pz15eqbZ5Q8AKy2u--dyRDxRSfynnXYaUKsP5L7w@mail.gmail.com>

Hi Gokul,

The problem is that the predicate also appears in one of the generated
TLexerCyclicDFA functions, leading to the following compilation error:

error: no member named 'getCharPositionInLine' in 'cifLexerCyclicDFA33'
                            if ( (( this->getCharPositionInLine() > 0 )) )
                                    ~~~~  ^

Manually editing the generated code to read ctx->getCharPositionInLine()
fixes the compilation.

Cheers,

Richard


On 15 October 2012 17:13, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:

> getCharPositionInLine() function is present inside Lexer. You can just
> call it as similar to Java.
> just replace the MACRO GETCHARPOSITIONINLINE() with
> this->getCharPositionInLine() ?
>
> I can't understand second part of your question.
>
> Thanks,
> Gokul.
>
>
> On Tue, Oct 16, 2012 at 2:43 AM, Richard Gildea <rgildea at gmail.com> wrote:
>
>> Hi,
>>
>> I am attempting to convert my parser to use the Cpp target after
>> previously
>> using the C target for some time, and have come across a problem trying to
>> call the function TLexer::getCharPositionInLine() inside a gated semantic
>> predicate in one of my lexer rules. With the C target I was using a
>> construct such as
>>
>> ({ GETCHARPOSITIONINLINE() > 0 }?=> ';')
>>
>> to identify a semicolon character in the first column of a line. When
>> trying to use a similar construct with the Cpp target, in the generated
>> code this predicate is used both inside the lexer rule, where the correct
>> usage would be this->getCharPositionInLine(), and inside a cyclicDFA,
>> where
>> the usage would be ctx->getCharPositionInLine(). Is there a way to use
>> such
>> a predicate with the Cpp target?
>>
>> Cheers,
>>
>> Richard
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From gokul007 at gmail.com  Mon Oct 15 17:56:00 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Tue, 16 Oct 2012 08:56:00 +0800
Subject: [antlr-interest] How to use lexer getCharPositionInLine()
 function in Cpp target
In-Reply-To: <CACCG97ExQ9pz15eqbZ5Q8AKy2u--dyRDxRSfynnXYaUKsP5L7w@mail.gmail.com>
References: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
	<CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>
	<CACCG97ExQ9pz15eqbZ5Q8AKy2u--dyRDxRSfynnXYaUKsP5L7w@mail.gmail.com>
Message-ID: <CAHMh4-am28==Zvp7FGLbMDrF9irCLFzR52XQ8MbM9edp+Jv_5g@mail.gmail.com>

Yeah. That looks like a bug. I will need to change the stg file. For now,
you can directly write m_ctx->getCharPositionInLine() in place of
getCharPositionInLine()
and let me know, whether it works.

Thanks,
Gokul.

On Tue, Oct 16, 2012 at 8:28 AM, Richard Gildea <rgildea at gmail.com> wrote:

> Hi Gokul,
>
> The problem is that the predicate also appears in one of the generated
> TLexerCyclicDFA functions, leading to the following compilation error:
>
> error: no member named 'getCharPositionInLine' in 'cifLexerCyclicDFA33'
>                             if ( (( this->getCharPositionInLine() > 0 )) )
>                                     ~~~~  ^
>
> Manually editing the generated code to read ctx->getCharPositionInLine()
> fixes the compilation.
>
> Cheers,
>
> Richard
>
>
> On 15 October 2012 17:13, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:
>
>> getCharPositionInLine() function is present inside Lexer. You can just
>> call it as similar to Java.
>> just replace the MACRO GETCHARPOSITIONINLINE() with
>> this->getCharPositionInLine() ?
>>
>> I can't understand second part of your question.
>>
>> Thanks,
>> Gokul.
>>
>>
>> On Tue, Oct 16, 2012 at 2:43 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>
>>> Hi,
>>>
>>> I am attempting to convert my parser to use the Cpp target after
>>> previously
>>> using the C target for some time, and have come across a problem trying
>>> to
>>> call the function TLexer::getCharPositionInLine() inside a gated semantic
>>> predicate in one of my lexer rules. With the C target I was using a
>>> construct such as
>>>
>>> ({ GETCHARPOSITIONINLINE() > 0 }?=> ';')
>>>
>>> to identify a semicolon character in the first column of a line. When
>>> trying to use a similar construct with the Cpp target, in the generated
>>> code this predicate is used both inside the lexer rule, where the correct
>>> usage would be this->getCharPositionInLine(), and inside a cyclicDFA,
>>> where
>>> the usage would be ctx->getCharPositionInLine(). Is there a way to use
>>> such
>>> a predicate with the Cpp target?
>>>
>>> Cheers,
>>>
>>> Richard
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>

From gokul007 at gmail.com  Mon Oct 15 17:56:56 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Tue, 16 Oct 2012 08:56:56 +0800
Subject: [antlr-interest] How to use lexer getCharPositionInLine()
 function in Cpp target
In-Reply-To: <CAHMh4-am28==Zvp7FGLbMDrF9irCLFzR52XQ8MbM9edp+Jv_5g@mail.gmail.com>
References: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
	<CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>
	<CACCG97ExQ9pz15eqbZ5Q8AKy2u--dyRDxRSfynnXYaUKsP5L7w@mail.gmail.com>
	<CAHMh4-am28==Zvp7FGLbMDrF9irCLFzR52XQ8MbM9edp+Jv_5g@mail.gmail.com>
Message-ID: <CAHMh4-ZKX86Lx6AtZXKiWP-kEyr+arbim_FmUDk9tm=6oRi1cA@mail.gmail.com>

You don't need to write it inside the Cpp file. Just write it in the
grammar.

Gokul.

On Tue, Oct 16, 2012 at 8:56 AM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> Yeah. That looks like a bug. I will need to change the stg file. For now,
> you can directly write m_ctx->getCharPositionInLine() in place of getCharPositionInLine()
> and let me know, whether it works.
>
> Thanks,
> Gokul.
>
> On Tue, Oct 16, 2012 at 8:28 AM, Richard Gildea <rgildea at gmail.com> wrote:
>
>> Hi Gokul,
>>
>> The problem is that the predicate also appears in one of the generated
>> TLexerCyclicDFA functions, leading to the following compilation error:
>>
>> error: no member named 'getCharPositionInLine' in 'cifLexerCyclicDFA33'
>>                             if ( (( this->getCharPositionInLine() > 0 )) )
>>                                     ~~~~  ^
>>
>> Manually editing the generated code to read ctx->getCharPositionInLine()
>> fixes the compilation.
>>
>> Cheers,
>>
>> Richard
>>
>>
>> On 15 October 2012 17:13, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:
>>
>>> getCharPositionInLine() function is present inside Lexer. You can just
>>> call it as similar to Java.
>>> just replace the MACRO GETCHARPOSITIONINLINE() with
>>> this->getCharPositionInLine() ?
>>>
>>> I can't understand second part of your question.
>>>
>>> Thanks,
>>> Gokul.
>>>
>>>
>>> On Tue, Oct 16, 2012 at 2:43 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>>
>>>> Hi,
>>>>
>>>> I am attempting to convert my parser to use the Cpp target after
>>>> previously
>>>> using the C target for some time, and have come across a problem trying
>>>> to
>>>> call the function TLexer::getCharPositionInLine() inside a gated
>>>> semantic
>>>> predicate in one of my lexer rules. With the C target I was using a
>>>> construct such as
>>>>
>>>> ({ GETCHARPOSITIONINLINE() > 0 }?=> ';')
>>>>
>>>> to identify a semicolon character in the first column of a line. When
>>>> trying to use a similar construct with the Cpp target, in the generated
>>>> code this predicate is used both inside the lexer rule, where the
>>>> correct
>>>> usage would be this->getCharPositionInLine(), and inside a cyclicDFA,
>>>> where
>>>> the usage would be ctx->getCharPositionInLine(). Is there a way to use
>>>> such
>>>> a predicate with the Cpp target?
>>>>
>>>> Cheers,
>>>>
>>>> Richard
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>
>>>
>>
>

From apalala at gmail.com  Mon Oct 15 18:23:50 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Mon, 15 Oct 2012 20:53:50 -0430
Subject: [antlr-interest] Way to "cut" parsing?
Message-ID: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>

I've written a grammar for a programming language. An annoyance I've
encountered is that ANTLRv3.4.1 will report failure against the enclosing
structured statement (like WHILE) instead of against the particular
statement/phrase it failed to parse. It probably does so because the many
lookaheads and the backtracking they induce.

Is there a way to implement a "cut" meta-instruction with ANTLR, so the
parser does not backtrack after having parsed a given token?

Something like:

add: 'ADD' {cut()} .... ;

so the parser will ether finish parsing the ADD statement, or fail on
*that* rule.

TIA,

-- 
Juancarlo *A?ez*

From jimi at temporal-wave.com  Mon Oct 15 18:50:31 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 16 Oct 2012 09:50:31 +0800
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
Message-ID: <1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>

Please see the FAQ:

http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery

Also be aware of: http://antlr.markmail.org which will allow you to search
the archives of the list and will usually give you an answer quicker than
the list itself will :) Almost everything that could be asked about ANTLR
3.4 has been asked and answered by now ;)

Cheers,

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Juancarlo A?ez
Sent: Tuesday, October 16, 2012 9:24 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Way to "cut" parsing?

I've written a grammar for a programming language. An annoyance I've
encountered is that ANTLRv3.4.1 will report failure against the enclosing
structured statement (like WHILE) instead of against the particular
statement/phrase it failed to parse. It probably does so because the many
lookaheads and the backtracking they induce.

Is there a way to implement a "cut" meta-instruction with ANTLR, so the
parser does not backtrack after having parsed a given token?

Something like:

add: 'ADD' {cut()} .... ;

so the parser will ether finish parsing the ADD statement, or fail on
*that* rule.

TIA,

--
Juancarlo *A?ez*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From apalala at gmail.com  Mon Oct 15 19:33:04 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Mon, 15 Oct 2012 22:03:04 -0430
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
	<1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>
Message-ID: <CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>

Hello Jim,

Please see the FAQ:
>
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
>

I didn't find an answer there,


> Also be aware of: http://antlr.markmail.org which will allow you to search
> the archives of the list and will usually give you an answer quicker than
> the list itself will :) Almost everything that could be asked about ANTLR
> 3.4 has been asked and answered by now ;)
>

Or there.

This may be more like it:

http://www.antlr.org/wiki/display/ANTLR3/Error+reporting+and+recovery

but that just turns off recovery, it doesn't provide a "cut" as in Prolog
and other grammars.

It's not just a matter of reporting errors as close as possible to the
offending phrase. The parser can be much more efficient if it knows it's
committed to a given rule once a certain phrase is seen.

Thanks!

-- 
Juancarlo *A?ez*

From jimi at temporal-wave.com  Mon Oct 15 21:04:19 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 16 Oct 2012 12:04:19 +0800
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
	<1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>
	<CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>
Message-ID: <0e2402151340eb513f73b1e5d2282d42@mail.gmail.com>

If you are using the backtrack = true option, then that is how it works. It
cannot identify the error closer than the rule it starts backtracking on and
that's that. You should only use the backtrack=true option if there is no
other way to parse your input, otherwise you should do the work to factor
your rules and so on. Turn off the back tracking and memoizing options and
look to fix the ambiguities in your grammar. What language are you trying to
parse?

Jim


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Juancarlo A?ez
Sent: Tuesday, October 16, 2012 10:33 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Way to "cut" parsing?

Hello Jim,

Please see the FAQ:
>
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
>

I didn't find an answer there,


> Also be aware of: http://antlr.markmail.org which will allow you to
> search the archives of the list and will usually give you an answer
> quicker than the list itself will :) Almost everything that could be
> asked about ANTLR
> 3.4 has been asked and answered by now ;)
>

Or there.

This may be more like it:

http://www.antlr.org/wiki/display/ANTLR3/Error+reporting+and+recovery

but that just turns off recovery, it doesn't provide a "cut" as in Prolog
and other grammars.

It's not just a matter of reporting errors as close as possible to the
offending phrase. The parser can be much more efficient if it knows it's
committed to a given rule once a certain phrase is seen.

Thanks!

--
Juancarlo *A?ez*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From apalala at gmail.com  Mon Oct 15 21:34:02 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Tue, 16 Oct 2012 00:04:02 -0430
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <0e2402151340eb513f73b1e5d2282d42@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
	<1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>
	<CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>
	<0e2402151340eb513f73b1e5d2282d42@mail.gmail.com>
Message-ID: <CAN1YFWteiYjFNOtgeeTM4imyRkbG0vduF5B242SWWzS_2xf8xA@mail.gmail.com>

If you are using the backtrack = true option, then that is how it works.


I'm not using the bactrack option, but a lot of backtracking goes on when I
look at the trace output.

I'm using the Python target.

As I mentioned, the grammar makes heavy use of ()=> lookaheads to resolve
the many ambiguities in the language.

The language is AG Natural, in which there are no statement terminators
except for some statements that contain other statements, and in which 4
out of 5 keywords in a statement are optional.

The parser is complete as of the current test harness. I need to make it
behave more reasonably before new test cases arrive.

I wish to be able to tell the parser to stop looking for alternatives after
a given set of keywords have been scanned. If it wend down from the
"statement" rule, into the "upload" rule, it should fail if can't parse the
phrase after the "UPLOAD" keyword, and not backtrack to tell me that the
enclosing "IF" did not parse.

When I wrote grammars in Prolog, I could resource to the "!" (cut, or
"commit to this rule") expression to ease the parser's work. I'm looking
for something like that in ANTLR. I don't care about error recovery. Having
an error message exactly at the point on which the parser couldn't go on
would be perfect. I have a ~3000 LOC grammar, and test cases on the
500-1000LOC. I need the parser to be efficient and pragmatic.

... and, I can't port to ANTLRv4 until there's news about it's Python
target.

Thanks again,

-- 
Juancarlo *A?ez*

From jimi at temporal-wave.com  Mon Oct 15 22:48:49 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 16 Oct 2012 13:48:49 +0800
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <CAN1YFWteiYjFNOtgeeTM4imyRkbG0vduF5B242SWWzS_2xf8xA@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
	<1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>	<CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>
	<0e2402151340eb513f73b1e5d2282d42@mail.gmail.com>
	<CAN1YFWteiYjFNOtgeeTM4imyRkbG0vduF5B242SWWzS_2xf8xA@mail.gmail.com>
Message-ID: <821065331924c9e000066ef0eafd5b1f@mail.gmail.com>

Without backtracking, then the techniques I explain in the article I sent to
you will work for this. Give it a try. You may also be using to heavy handed
lookaheads. A lot of people will write:

(rule)=>rule when they in fact only need (X|Y|Z)=>rule

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Juancarlo A?ez
Sent: Tuesday, October 16, 2012 12:34 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Way to "cut" parsing?

If you are using the backtrack = true option, then that is how it works.


I'm not using the bactrack option, but a lot of backtracking goes on when I
look at the trace output.

I'm using the Python target.

As I mentioned, the grammar makes heavy use of ()=> lookaheads to resolve
the many ambiguities in the language.

The language is AG Natural, in which there are no statement terminators
except for some statements that contain other statements, and in which 4 out
of 5 keywords in a statement are optional.

The parser is complete as of the current test harness. I need to make it
behave more reasonably before new test cases arrive.

I wish to be able to tell the parser to stop looking for alternatives after
a given set of keywords have been scanned. If it wend down from the
"statement" rule, into the "upload" rule, it should fail if can't parse the
phrase after the "UPLOAD" keyword, and not backtrack to tell me that the
enclosing "IF" did not parse.

When I wrote grammars in Prolog, I could resource to the "!" (cut, or
"commit to this rule") expression to ease the parser's work. I'm looking for
something like that in ANTLR. I don't care about error recovery. Having an
error message exactly at the point on which the parser couldn't go on would
be perfect. I have a ~3000 LOC grammar, and test cases on the 500-1000LOC. I
need the parser to be efficient and pragmatic.

... and, I can't port to ANTLRv4 until there's news about it's Python
target.

Thanks again,

--
Juancarlo *A?ez*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From cjs at cynic.net  Tue Oct 16 02:44:45 2012
From: cjs at cynic.net (Curt Sampson)
Date: Tue, 16 Oct 2012 18:44:45 +0900
Subject: [antlr-interest] State of Ruby Support
Message-ID: <20121016094445.GA22269@pathetic.cynic.net>

I've downloaded and installed ANTLR 3.4, intending to use it to generate
some parsers for use in Ruby programs (and perhaps, later, C++). However,
I'm having some difficulties getting things set up, and I'm wondering what
the current state of Ruby support is.

(Note that below I'm using the Ruby support library that is found under
runtime/Ruby/lib/ in the ANTLR 3.4 distribution.)

Given the following grammar in Graphics.g:

    grammar Graphics;

    options { language = Java; }

    file:       command+ ;
    command:    'line' 'from' point 'to' point ;
    point:      INT ',' INT ;

    INT:        '0'..'9'+ ;
    WS:         (' ' | '\t' | '\r' | '\n') { skip(); } ;

Compiling it with "antlr Graphics.g" seems to work fine, producing the
files Graphics.tokens, GraphicsLexer.java and GraphicsParser.java, and
nothing on standard output. However, changing the language above to Ruby
produces the messages appended below, though it still produces the token
file and the .rb versions of the above Java files. Loading them up and
playing about in irb, I seem to be able to get the lexer to work, but
not the parser.

So: is Ruby supported? Working to some degree? What's the canonical way
to use the generated parser?

Here are the messages from antlr when compiling Graphics.g:

----------------------------------------------------------------------
Ruby.stg 204:241: '.' came as a complete surprise to me
Ruby.stg 255:151: '.' came as a complete surprise to me
Ruby.stg 498:23: anonymous template has 0 arg(s) but mapped across 1 value(s)
Ruby.stg 504:24: anonymous template has 0 arg(s) but mapped across 1 value(s)
Ruby.stg 1131:81: required parameters (filterMode) must appear before optional parameters
context [/outputFile] 6:32 no such template: /runtimeLibraryVersion
context [/outputFile] 19:51 no such template: /runtimeLibraryVersion
context [/outputFile] 49:32 no such template: /runtimeLibraryVersion
context [/outputFile] 59:0 no such template: /placeAction
context [/outputFile] 59:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 59:1 attribute scope isn't defined
context [/outputFile] 59:1 attribute name isn't defined
context [/outputFile] 60:0 no such template: /placeAction
context [/outputFile] 60:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 60:1 attribute scope isn't defined
context [/outputFile] 60:1 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile] 2:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile] 2:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile] 2:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile] 2:3 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:3 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:3 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /parser] 1:27 no such template: /autoloadDelegates
context [/outputFile /rootGrammarOutputFile /parser] 4:2 no such template: /parserBody
context [/outputFile /rootGrammarOutputFile /parser] 4:3 passed 3 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /parser] 4:3 attribute rewriteElementType isn't defined
context [/outputFile /rootGrammarOutputFile /parser] 4:3 attribute actionScope isn't defined
context [/outputFile /rootGrammarOutputFile /parser] 4:3 attribute inputStreamType isn't defined
context [/outputFile /rootGrammarOutputFile] 5:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile] 5:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile] 5:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile] 5:3 attribute name isn't defined
context [/outputFile] 68:0 no such template: /placeAction
context [/outputFile] 68:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 68:1 attribute scope isn't defined
context [/outputFile] 68:1 attribute name isn't defined
context [/outputFile] 69:0 no such template: /placeAction
context [/outputFile] 69:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 69:1 attribute scope isn't defined
context [/outputFile] 69:1 attribute name isn't defined
Ruby.stg 204:241: '.' came as a complete surprise to me
Ruby.stg 255:151: '.' came as a complete surprise to me
Ruby.stg 498:23: anonymous template has 0 arg(s) but mapped across 1 value(s)
Ruby.stg 504:24: anonymous template has 0 arg(s) but mapped across 1 value(s)
Ruby.stg 1131:81: required parameters (filterMode) must appear before optional parameters
context [/outputFile] 6:32 no such template: /runtimeLibraryVersion
context [/outputFile] 19:51 no such template: /runtimeLibraryVersion
context [/outputFile] 49:32 no such template: /runtimeLibraryVersion
context [/outputFile] 59:0 no such template: /placeAction
context [/outputFile] 59:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 59:1 attribute scope isn't defined
context [/outputFile] 59:1 attribute name isn't defined
context [/outputFile] 60:0 no such template: /placeAction
context [/outputFile] 60:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 60:1 attribute scope isn't defined
context [/outputFile] 60:1 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile] 2:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile] 2:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile] 2:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile] 2:3 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 25:3 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile /tokenDataModule] 26:3 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer] 1:27 no such template: /autoloadDelegates
context [/outputFile /rootGrammarOutputFile /lexer] 15:54 no such template: /runtimeLibraryVersion
context [/outputFile /rootGrammarOutputFile /lexer] 37:209 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile /lexer] 37:210 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer] 37:210 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile /lexer] 37:210 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer] 40:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile /lexer] 40:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer] 40:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile /lexer] 40:3 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:51 no such template: /action
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute code isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:51 no such template: /action
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute code isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:51 no such template: /action
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute code isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:51 no such template: /action
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute code isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:51 no such template: /action
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute code isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:51 no such template: /action
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute name isn't defined
context [/outputFile /rootGrammarOutputFile /lexer /_sub108 /lexerRule] 20:52 attribute code isn't defined
context [/outputFile /rootGrammarOutputFile] 5:2 no such template: /placeAction
context [/outputFile /rootGrammarOutputFile] 5:3 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile /rootGrammarOutputFile] 5:3 attribute scope isn't defined
context [/outputFile /rootGrammarOutputFile] 5:3 attribute name isn't defined
context [/outputFile] 68:0 no such template: /placeAction
context [/outputFile] 68:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 68:1 attribute scope isn't defined
context [/outputFile] 68:1 attribute name isn't defined
context [/outputFile] 69:0 no such template: /placeAction
context [/outputFile] 69:1 passed 2 arg(s) to template null with 0 declared arg(s)
context [/outputFile] 69:1 attribute scope isn't defined
context [/outputFile] 69:1 attribute name isn't defined
----------------------------------------------------------------------

cjs
-- 
Curt Sampson         <cjs at cynic.net>         +81 90 7737 2974

It is easier to write an incorrect program than understand a correct one.
    --Alan Perlis, Epigrams on Programming (#7)

From roger_alexander at selinc.com  Tue Oct 16 11:08:23 2012
From: roger_alexander at selinc.com (roger_alexander at selinc.com)
Date: Tue, 16 Oct 2012 11:08:23 -0700
Subject: [antlr-interest] ANTLR 4 grammar
In-Reply-To: <OF114CFB6D.3B64F0BC-ON88257A99.00616D09-88257A99.00619DD2@LocalDomain>
References: <OF114CFB6D.3B64F0BC-ON88257A99.00616D09-88257A99.00619DD2@LocalDomain>
Message-ID: <OF279F6476.18AF66C1-ON88257A99.00639F54-88257A99.0063A528@selinc.com>

Hi,

Is there an ANTLR 4 version the grammar for ANTLR 4 available? Just to 
clarify, I want to parse and ANTLR 4 grammar using ANTLR 4 itself.

Thanks,

Roger Alexander.

From parrt at cs.usfca.edu  Tue Oct 16 11:23:36 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Oct 2012 11:23:36 -0700
Subject: [antlr-interest] ANTLR 4 grammar
In-Reply-To: <OF279F6476.18AF66C1-ON88257A99.00639F54-88257A99.0063A528@selinc.com>
References: <OF114CFB6D.3B64F0BC-ON88257A99.00616D09-88257A99.00619DD2@LocalDomain>
	<OF279F6476.18AF66C1-ON88257A99.00639F54-88257A99.0063A528@selinc.com>
Message-ID: <5B150C2C-EC84-4032-87CF-8875B5F9A207@cs.usfca.edu>

in the v4 book code tarball under extras i think. it's meant for an ide not general parsing of antlr grammars.
T
On Oct 16, 2012, at 11:08 AM, roger_alexander at selinc.com wrote:

> Hi,
> 
> Is there an ANTLR 4 version the grammar for ANTLR 4 available? Just to 
> clarify, I want to parse and ANTLR 4 grammar using ANTLR 4 itself.
> 
> Thanks,
> 
> Roger Alexander.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From opensource at peoplemerge.com  Tue Oct 16 12:48:27 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Tue, 16 Oct 2012 12:48:27 -0700
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>
	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>
	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
Message-ID: <CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>

Ping.  I'd love to see antlr4 available as a maven artifact too.

On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera <list at toolazydogs.com>wrote:

>
> Ping.
>
> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>
> > Great!  What's the ETA for publication of the artifacts?
> >
> > On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
> >
> >> We already have this set up.
> >>
> >> Jim
> >>
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org
> >> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D. Cabrera
> >> Sent: Tuesday, September 25, 2012 12:32 AM
> >> To: Sam Harwell
> >> Cc: Antlr-Interest Antlr.Org
> >> Subject: Re: [antlr-interest] Maven plugin for antlr v4
> >>
> >> Sonatype offers access to a Nexus server that Open Source projects can
> use
> >> to publish their artifacts.  It's free.
> >>
> >>
> >> Regards,
> >> Alan
> >>
> >> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
> >>
> >>> Yes, but it's current in source-only form and not available through the
> >> Maven distribution site (I don't know how that part of it works).
> >> Hopefully we can get to that part of it soon. :)
> >>>
> >>> Sam
> >>>
> >>> -----Original Message-----
> >>> From: antlr-interest-bounces at antlr.org
> >> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D. Cabrera
> >>> Sent: Saturday, September 22, 2012 9:29 PM
> >>> To: Antlr-Interest Antlr.Org
> >>> Subject: [antlr-interest] Maven plugin for antlr v4
> >>>
> >>> Is there a maven plugin in the works for antler v4?
> >>>
> >>>
> >>> Regards,
> >>> Alan
> >>>
> >>>
> >>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>>
> >>>
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From ahouse at eecg.toronto.edu  Tue Oct 16 14:09:43 2012
From: ahouse at eecg.toronto.edu (Andrew House)
Date: Tue, 16 Oct 2012 18:39:43 -0230
Subject: [antlr-interest] Tree grammar doesn't match what I want
In-Reply-To: <CAN1YFWsKjQhPdoqJ2KRGx5+EYSuZAKreJhkgCAQ8pwyjDZcGrA@mail.gmail.com>
References: <507085E3.30505@eecg.toronto.edu>
	<CAN1YFWsKjQhPdoqJ2KRGx5+EYSuZAKreJhkgCAQ8pwyjDZcGrA@mail.gmail.com>
Message-ID: <507DCD17.8020400@eecg.toronto.edu>

Thanks for this tip.  Using the trace option showed me the problem was 
not with my array data type, but actually with my expression matching 
rule.  (I had made a stupid mistake in my expression tree matcher.)

-- Andrew House

On 06/10/2012 6:07 PM, Juancarlo A?ez wrote:
> You can use the '-trace' option to see where exactly the parser is 
> failing. An "upper" rule will fail if one on which it depends fails.
>
> -- Juancarlo
>
> On Sat, Oct 6, 2012 at 2:56 PM, Andrew House <ahouse at eecg.toronto.edu 
> <mailto:ahouse at eecg.toronto.edu>> wrote:
>
>
>     Hi all,
>
>     I am working on my own language application, and am following the
>     Language Implementation Patterns and Definitive ANTLR Reference
>     books as
>     closely as I can.  I have run into an issue where my tree grammar
>     seems
>     unable to match my 'array' subtree (representing an array data type).
>
>     An example of what fails to match is as follows:
>     (array (SIZE (EXPR (to 1 (IDX N)))) (SCALAR (NAME (TYPEID Particle))))
>
>     Below, I have included relevant snippets of the grammar and tree
>     grammar.  The tree grammar has no trouble recognizing the 'tuple' and
>     'scalar' data type subtrees.
>
>     I know that the grammar allows for arrays of arrays (of arrays...)
>     if I
>     were so inclined, but I don't think that's the culprit.  As far as
>     I can
>     tell the grammar is unambiguous.  It just doesn't seem to match
>     for arrays.
>
>     Any help would be greatly appreciated---I've been looking at this for
>     several days now, and haven't managed to see the problem.
>
>     Sincerely,
>     -- Andrew House
>
>     Grammar ======================================================
>
>     varDeclaration
>          :    'var' ID 'is' dataType ';'
>              -> ^('var' ^(NAME ID) ^(VARTYPE dataType) )
>          ;
>
>     dataType
>          :    dataTypeID sizeDef?-> ^(SCALAR ^(NAME dataTypeID) sizeDef? )
>          |    'array' arrayDims 'of' dataType -> ^('array' arrayDims
>     dataType )
>          |    'tuple' '(' argList ')' -> ^('tuple' argList)
>          ;
>
>     argList
>          :    argDeclaration (',' argDeclaration)* -> argDeclaration+
>          ;
>
>     argDeclaration
>          :    dataType ID -> ^(ARG ^(NAME ID) ^(VARTYPE dataType))
>          ;
>
>     arrayDims
>          :    sizeDef | regionDef
>          ;
>
>     dataTypeID
>          :    ID ('.' ID)* -> ^(TYPEID ID+)
>          ;
>
>     dataTypeList
>          :    dataType (',' dataType)* -> dataType+
>          ;
>
>     sizeDef
>          :    '[' expr ']' -> ^(SIZE expr)
>          ;
>
>     regionDef
>          :    '[' idList 'in' expr ']' -> ^(REGION expr idList)
>          ;
>
>     Tree Grammar
>     ====================================================================
>
>     varDeclaration
>          :    ^('var' ^(NAME ID) ^(VARTYPE dt=dataType) .*)
>              {
>                  // Code to resolve data type
>              }
>          ;
>
>
>     dataType returns [ASymbol type, AIndexRange size] // updated for
>     resolution
>          :    (tsid=scalarDataType | taid=arrayDataType |
>     ttid=tupleDataType )
>              {
>                  // Code to determine whether it is tuple, scalar, or
>     array
>     type,
>            // and pass up appropriate values.
>              }
>          ;
>
>     scalarDataType returns [ASymbol type, AIndexRange size]
>          :    ^(SCALAR ^(NAME ^(TYPEID name+=ID+)) sz=sizeDef?)
>              {
>                  // Resolve scalar data types
>              }
>          ;
>
>     arrayDataType returns [ASymbol type, AIndexRange size]
>          :    ^(aid='array' dim=arrayDims dt=dataType)
>              {
>                // Resolve array dimensions and subtype
>            // THIS NEVER SEEMS TO MATCH ANYTHING!!!!!!
>                 // A print statement in here never executes.
>              }
>          ;
>
>     tupleDataType returns [ASymbol type, AIndexRange size]
>          :    ^(tid='tuple' .*)
>              {
>                  // Returns appropriate tuple values
>              }
>          ;
>
>     arrayDims returns [AIndexRegion region]
>          :    sz=sizeDef | rg=regionDef
>              {
>                  // Figures out if it is a size or region
>            // and returns a region.
>              }
>          ;
>
>     sizeDef returns [AIndexRange range]
>          :    ^(SIZE ex=exprRoot)
>          ;
>
>     regionDef returns [AIndexRegion region]
>          :    ^(REGION ex=exprRoot ids+=ID+)
>          ;
>
>     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     Unsubscribe:
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> -- 
> Juancarlo *A?ez*


From rgildea at gmail.com  Tue Oct 16 14:56:30 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Tue, 16 Oct 2012 14:56:30 -0700
Subject: [antlr-interest] How to use lexer getCharPositionInLine()
 function in Cpp target
In-Reply-To: <CAHMh4-ZKX86Lx6AtZXKiWP-kEyr+arbim_FmUDk9tm=6oRi1cA@mail.gmail.com>
References: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
	<CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>
	<CACCG97ExQ9pz15eqbZ5Q8AKy2u--dyRDxRSfynnXYaUKsP5L7w@mail.gmail.com>
	<CAHMh4-am28==Zvp7FGLbMDrF9irCLFzR52XQ8MbM9edp+Jv_5g@mail.gmail.com>
	<CAHMh4-ZKX86Lx6AtZXKiWP-kEyr+arbim_FmUDk9tm=6oRi1cA@mail.gmail.com>
Message-ID: <CACCG97FahbFN3fvr6m_W=5Zqt1Od6pnBAJPBOHBj8REhpJMrfw@mail.gmail.com>

Hi Gokul,

This does not work either, as I now get the following compiler error in the
generated lexer rule functions:

error: use of undeclared identifier 'm_ctx'

Cheers,

Richard

On 15 October 2012 17:56, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:

> You don't need to write it inside the Cpp file. Just write it in the
> grammar.
>
> Gokul.
>
>
> On Tue, Oct 16, 2012 at 8:56 AM, Gokulakannan Somasundaram <
> gokul007 at gmail.com> wrote:
>
>> Yeah. That looks like a bug. I will need to change the stg file. For now,
>> you can directly write m_ctx->getCharPositionInLine() in place of getCharPositionInLine()
>> and let me know, whether it works.
>>
>> Thanks,
>> Gokul.
>>
>> On Tue, Oct 16, 2012 at 8:28 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>
>>> Hi Gokul,
>>>
>>> The problem is that the predicate also appears in one of the generated
>>> TLexerCyclicDFA functions, leading to the following compilation error:
>>>
>>> error: no member named 'getCharPositionInLine' in 'cifLexerCyclicDFA33'
>>>                             if ( (( this->getCharPositionInLine() > 0 ))
>>> )
>>>                                     ~~~~  ^
>>>
>>> Manually editing the generated code to read ctx->getCharPositionInLine()
>>> fixes the compilation.
>>>
>>> Cheers,
>>>
>>> Richard
>>>
>>>
>>> On 15 October 2012 17:13, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:
>>>
>>>> getCharPositionInLine() function is present inside Lexer. You can just
>>>> call it as similar to Java.
>>>> just replace the MACRO GETCHARPOSITIONINLINE() with
>>>> this->getCharPositionInLine() ?
>>>>
>>>> I can't understand second part of your question.
>>>>
>>>> Thanks,
>>>> Gokul.
>>>>
>>>>
>>>> On Tue, Oct 16, 2012 at 2:43 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>>>
>>>>> Hi,
>>>>>
>>>>> I am attempting to convert my parser to use the Cpp target after
>>>>> previously
>>>>> using the C target for some time, and have come across a problem
>>>>> trying to
>>>>> call the function TLexer::getCharPositionInLine() inside a gated
>>>>> semantic
>>>>> predicate in one of my lexer rules. With the C target I was using a
>>>>> construct such as
>>>>>
>>>>> ({ GETCHARPOSITIONINLINE() > 0 }?=> ';')
>>>>>
>>>>> to identify a semicolon character in the first column of a line. When
>>>>> trying to use a similar construct with the Cpp target, in the generated
>>>>> code this predicate is used both inside the lexer rule, where the
>>>>> correct
>>>>> usage would be this->getCharPositionInLine(), and inside a cyclicDFA,
>>>>> where
>>>>> the usage would be ctx->getCharPositionInLine(). Is there a way to use
>>>>> such
>>>>> a predicate with the Cpp target?
>>>>>
>>>>> Cheers,
>>>>>
>>>>> Richard
>>>>>
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe:
>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>
>>>>
>>>>
>>>
>>
>

From apalala at gmail.com  Tue Oct 16 14:58:24 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Tue, 16 Oct 2012 17:28:24 -0430
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <821065331924c9e000066ef0eafd5b1f@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
	<1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>
	<CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>
	<0e2402151340eb513f73b1e5d2282d42@mail.gmail.com>
	<CAN1YFWteiYjFNOtgeeTM4imyRkbG0vduF5B242SWWzS_2xf8xA@mail.gmail.com>
	<821065331924c9e000066ef0eafd5b1f@mail.gmail.com>
Message-ID: <CAN1YFWuLxTzs7w4SMHAbj_2o7Q7YBxecA5X+d--922nw0fGhug@mail.gmail.com>

Jim,

Without backtracking, then the techniques I explain in the article I sent to
> you will work for this. Give it a try.
>

Will do. Just to be sure, what I have to do is to add a *catch* clause to
the rules in which I want parsing to be cut, and customize recovery (or
remove recovery) there. Right?


> You may also be using to heavy handed
> lookaheads. A lot of people will write:
>

> (rule)=>rule when they in fact only need (X|Y|Z)=>rule
>

Guilty as charged! I will look into that too.

Thanks!

-- 
Juancarlo *A?ez*

From rgildea at gmail.com  Tue Oct 16 15:49:15 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Tue, 16 Oct 2012 15:49:15 -0700
Subject: [antlr-interest] How to use lexer getCharPositionInLine()
 function in Cpp target
In-Reply-To: <CACCG97FahbFN3fvr6m_W=5Zqt1Od6pnBAJPBOHBj8REhpJMrfw@mail.gmail.com>
References: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
	<CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>
	<CACCG97ExQ9pz15eqbZ5Q8AKy2u--dyRDxRSfynnXYaUKsP5L7w@mail.gmail.com>
	<CAHMh4-am28==Zvp7FGLbMDrF9irCLFzR52XQ8MbM9edp+Jv_5g@mail.gmail.com>
	<CAHMh4-ZKX86Lx6AtZXKiWP-kEyr+arbim_FmUDk9tm=6oRi1cA@mail.gmail.com>
	<CACCG97FahbFN3fvr6m_W=5Zqt1Od6pnBAJPBOHBj8REhpJMrfw@mail.gmail.com>
Message-ID: <CACCG97HNDe+woRCHL94=22dP5s_AC2w7XqvpSmG-+3qhsEES5g@mail.gmail.com>

Another problem I have found with the Cpp target compared to the C target
is when trying to use a construct such as $start=theStart (see e.g.
http://antlr.markmail.org/message/izyhuzbooerfw4tu), which gives the
following compiler error:

error: expression is not assignable
             this->get_state()->get_tokenStartCharIndex() = theStart;
this->emit();
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^

Cheers,

Richard


On 16 October 2012 14:56, Richard Gildea <rgildea at gmail.com> wrote:

> Hi Gokul,
>
> This does not work either, as I now get the following compiler error in
> the generated lexer rule functions:
>
> error: use of undeclared identifier 'm_ctx'
>
> Cheers,
>
> Richard
>
> On 15 October 2012 17:56, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:
>
>> You don't need to write it inside the Cpp file. Just write it in the
>> grammar.
>>
>> Gokul.
>>
>>
>> On Tue, Oct 16, 2012 at 8:56 AM, Gokulakannan Somasundaram <
>> gokul007 at gmail.com> wrote:
>>
>>> Yeah. That looks like a bug. I will need to change the stg file. For
>>> now, you can directly write m_ctx->getCharPositionInLine() in place of getCharPositionInLine()
>>> and let me know, whether it works.
>>>
>>> Thanks,
>>> Gokul.
>>>
>>> On Tue, Oct 16, 2012 at 8:28 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>>
>>>> Hi Gokul,
>>>>
>>>> The problem is that the predicate also appears in one of the generated
>>>> TLexerCyclicDFA functions, leading to the following compilation error:
>>>>
>>>> error: no member named 'getCharPositionInLine' in 'cifLexerCyclicDFA33'
>>>>                             if ( (( this->getCharPositionInLine() > 0
>>>> )) )
>>>>                                     ~~~~  ^
>>>>
>>>> Manually editing the generated code to read
>>>> ctx->getCharPositionInLine() fixes the compilation.
>>>>
>>>> Cheers,
>>>>
>>>> Richard
>>>>
>>>>
>>>> On 15 October 2012 17:13, Gokulakannan Somasundaram <gokul007 at gmail.com
>>>> > wrote:
>>>>
>>>>> getCharPositionInLine() function is present inside Lexer. You can just
>>>>> call it as similar to Java.
>>>>> just replace the MACRO GETCHARPOSITIONINLINE() with
>>>>> this->getCharPositionInLine() ?
>>>>>
>>>>> I can't understand second part of your question.
>>>>>
>>>>> Thanks,
>>>>> Gokul.
>>>>>
>>>>>
>>>>> On Tue, Oct 16, 2012 at 2:43 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>>>>
>>>>>> Hi,
>>>>>>
>>>>>> I am attempting to convert my parser to use the Cpp target after
>>>>>> previously
>>>>>> using the C target for some time, and have come across a problem
>>>>>> trying to
>>>>>> call the function TLexer::getCharPositionInLine() inside a gated
>>>>>> semantic
>>>>>> predicate in one of my lexer rules. With the C target I was using a
>>>>>> construct such as
>>>>>>
>>>>>> ({ GETCHARPOSITIONINLINE() > 0 }?=> ';')
>>>>>>
>>>>>> to identify a semicolon character in the first column of a line. When
>>>>>> trying to use a similar construct with the Cpp target, in the
>>>>>> generated
>>>>>> code this predicate is used both inside the lexer rule, where the
>>>>>> correct
>>>>>> usage would be this->getCharPositionInLine(), and inside a cyclicDFA,
>>>>>> where
>>>>>> the usage would be ctx->getCharPositionInLine(). Is there a way to
>>>>>> use such
>>>>>> a predicate with the Cpp target?
>>>>>>
>>>>>> Cheers,
>>>>>>
>>>>>> Richard
>>>>>>
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe:
>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>>
>>>>>
>>>>>
>>>>
>>>
>>
>

From jimi at temporal-wave.com  Tue Oct 16 19:39:51 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 17 Oct 2012 10:39:51 +0800
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <CAN1YFWuLxTzs7w4SMHAbj_2o7Q7YBxecA5X+d--922nw0fGhug@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
	<1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>	<CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>
	<0e2402151340eb513f73b1e5d2282d42@mail.gmail.com>	<CAN1YFWteiYjFNOtgeeTM4imyRkbG0vduF5B242SWWzS_2xf8xA@mail.gmail.com>
	<821065331924c9e000066ef0eafd5b1f@mail.gmail.com>
	<CAN1YFWuLxTzs7w4SMHAbj_2o7Q7YBxecA5X+d--922nw0fGhug@mail.gmail.com>
Message-ID: <2f8a78cf2f9a5f66adac078ac88d9aee@mail.gmail.com>

You may or may not need catch clauses - usually you do not. You will almost
certainly need to influence error recovery by adding the empty rule to do
some magic token eating though, as this is what keeps antlr within the inner
rules as long as possible.

jIM

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Juancarlo A?ez
Sent: Wednesday, October 17, 2012 5:58 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Way to "cut" parsing?

Jim,

Without backtracking, then the techniques I explain in the article I sent to
> you will work for this. Give it a try.
>

Will do. Just to be sure, what I have to do is to add a *catch* clause to
the rules in which I want parsing to be cut, and customize recovery (or
remove recovery) there. Right?


> You may also be using to heavy handed
> lookaheads. A lot of people will write:
>

> (rule)=>rule when they in fact only need (X|Y|Z)=>rule
>

Guilty as charged! I will look into that too.

Thanks!

--
Juancarlo *A?ez*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From cjs at cynic.net  Tue Oct 16 21:27:45 2012
From: cjs at cynic.net (Curt Sampson)
Date: Wed, 17 Oct 2012 13:27:45 +0900
Subject: [antlr-interest] State of Ruby Support
In-Reply-To: <20121016094445.GA22269@pathetic.cynic.net>
References: <20121016094445.GA22269@pathetic.cynic.net>
Message-ID: <20121017042744.GA2670@pathetic.cynic.net>

On 2012-10-16 18:44 +0900 (Tue), Curt Sampson wrote:

> However, I'm having some difficulties getting things set up, and I'm
> wondering what the current state of Ruby support is.

Well, it appears that the Ruby target in ANTLR 3.4 doesn't work, and
from the resounding silence to my queries, is pretty much entirely
unsupported. There was some discussion about a month ago on this list
about getting the Ruby target working again (either for 3.4 or 4.0--it
wasn't clear which), but that didn't seem to go anywhere beyond, "it's
not trivial" along with a few useful bits of advice from other target
authors.

That said, if anybody else out there is looking to use ANTLR with Ruby
you need not totally despair. Kyle Yetter's version on GitHub appears
to be complete (i.e., you don't need to download anything else) and
working, at least as far as compiling and running my sample parser from
my previous message. It's not entirely new (last updated 2011-10-16, and
using ANTLR 3.2.1-SNAPSHOT of 2010-07-31), but it's good enough for my
purposes at least.

If anybody happens to start working again on updating this target for
a newer version of ANTLR (either 3.4 or 4.0), feel free to drop me a
note if you feel I can help you in any way.

cjs
-- 
Curt Sampson         <cjs at cynic.net>         +81 90 7737 2974

It is easier to write an incorrect program than understand a correct one.
    --Alan Perlis, Epigrams on Programming (#7)

From jimi at temporal-wave.com  Tue Oct 16 21:50:23 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 17 Oct 2012 12:50:23 +0800
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
	<CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
Message-ID: <08c927c0408d6c1f6b74204962b24711@mail.gmail.com>

I am willing to do this when it is released, but I don't have time to do
it before then. Ter is still waiting for me to fix up the C target for the
last ever release of 3.x, which I must do shortly as it has been too long.

When I say "we have this set up" I mean we have all the Sonatype accounts
and so on so there is nothing to do to create the release infra-structure.


However, as I understand it, we have moved away from using Maven to build
v4, which will likely make the task of releasing it as a maven plugin
non-trivial; I am pretty sure I will have to write the v4 plugin pretty
much from scratch again and then I will have to wrestle with the awful git
monster.

That isn't the longest of tasks, until I remember that I have to do this
in my spare time in a tiny "apartment" in Taipei with my very slow netbook
and what feels at times like a 48Kbs modem connection ;) Ah well, it
reminds me of mainframe days I guess.

So, don't look for this before v4 is ready for release.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dave Thomas
Sent: Wednesday, October 17, 2012 3:48 AM
To: Antlr-Interest Antlr.Org
Subject: Re: [antlr-interest] Maven plugin for antlr v4

Ping.  I'd love to see antlr4 available as a maven artifact too.

On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera
<list at toolazydogs.com>wrote:

>
> Ping.
>
> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>
> > Great!  What's the ETA for publication of the artifacts?
> >
> > On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
> >
> >> We already have this set up.
> >>
> >> Jim
> >>
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org
> >> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
> >> Cabrera
> >> Sent: Tuesday, September 25, 2012 12:32 AM
> >> To: Sam Harwell
> >> Cc: Antlr-Interest Antlr.Org
> >> Subject: Re: [antlr-interest] Maven plugin for antlr v4
> >>
> >> Sonatype offers access to a Nexus server that Open Source projects
> >> can
> use
> >> to publish their artifacts.  It's free.
> >>
> >>
> >> Regards,
> >> Alan
> >>
> >> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
> >>
> >>> Yes, but it's current in source-only form and not available
> >>> through the
> >> Maven distribution site (I don't know how that part of it works).
> >> Hopefully we can get to that part of it soon. :)
> >>>
> >>> Sam
> >>>
> >>> -----Original Message-----
> >>> From: antlr-interest-bounces at antlr.org
> >> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
> >> Cabrera
> >>> Sent: Saturday, September 22, 2012 9:29 PM
> >>> To: Antlr-Interest Antlr.Org
> >>> Subject: [antlr-interest] Maven plugin for antlr v4
> >>>
> >>> Is there a maven plugin in the works for antler v4?
> >>>
> >>>
> >>> Regards,
> >>> Alan
> >>>
> >>>
> >>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
> >> ess
> >>>
> >>>
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
> >> ess
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From lgcraymer at yahoo.com  Tue Oct 16 21:50:45 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 16 Oct 2012 21:50:45 -0700 (PDT)
Subject: [antlr-interest] Way to "cut" parsing?
In-Reply-To: <2f8a78cf2f9a5f66adac078ac88d9aee@mail.gmail.com>
References: <CAN1YFWvLSf3WxfH92pp-r1qB4eUOGsxDcrbm2v-qgwZDx54wiQ@mail.gmail.com>
	<1fbd5bbb894b3a6ea029712bae99291c@mail.gmail.com>
	<CAN1YFWvhcWe3dWUd2ACmPtYcncJ2VRHchwjvzH=134pcTTa-8g@mail.gmail.com>
	<0e2402151340eb513f73b1e5d2282d42@mail.gmail.com>
	<CAN1YFWteiYjFNOtgeeTM4imyRkbG0vduF5B242SWWzS_2xf8xA@mail.gmail.com>
	<821065331924c9e000066ef0eafd5b1f@mail.gmail.com>
	<CAN1YFWuLxTzs7w4SMHAbj_2o7Q7YBxecA5X+d--922nw0fGhug@mail.gmail.com>
	<2f8a78cf2f9a5f66adac078ac88d9aee@mail.gmail.com>
Message-ID: <1350449445.27807.YahooMailNeo@web142306.mail.bf1.yahoo.com>

I'll add one comment on the issue of syntactic predicates. ?Inserting predicates during early development to get something running is not bad practice (in fact, judicious insertion at this time should be encouraged--it shortens the time to having a working grammar), but failure to refactor a grammar to remove as many of these as possible is. ?If you think that you might have been heavy handed with inserting predicates, you probably have not spent much effort at removing them. ?Spending time refactoring a grammar is almost always a win, not only for error reporting, but also for performance (synpreds are expensive) and extensibility.

--Loring




>________________________________
> From: Jim Idle <jimi at temporal-wave.com>
>To: antlr-interest at antlr.org 
>Sent: Tuesday, October 16, 2012 7:39 PM
>Subject: Re: [antlr-interest] Way to "cut" parsing?
> 
>You may or may not need catch clauses - usually you do not. You will almost
>certainly need to influence error recovery by adding the empty rule to do
>some magic token eating though, as this is what keeps antlr within the inner
>rules as long as possible.
>
>jIM
>
>-----Original Message-----
>From: antlr-interest-bounces at antlr.org
>[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Juancarlo A?ez
>Sent: Wednesday, October 17, 2012 5:58 AM
>To: antlr-interest at antlr.org
>Subject: Re: [antlr-interest] Way to "cut" parsing?
>
>Jim,
>
>Without backtracking, then the techniques I explain in the article I sent to
>> you will work for this. Give it a try.
>>
>
>Will do. Just to be sure, what I have to do is to add a *catch* clause to
>the rules in which I want parsing to be cut, and customize recovery (or
>remove recovery) there. Right?
>
>
>> You may also be using to heavy handed
>> lookaheads. A lot of people will write:
>>
>
>> (rule)=>rule when they in fact only need (X|Y|Z)=>rule
>>
>
>Guilty as charged! I will look into that too.
>
>Thanks!
>
>--
>Juancarlo *A?ez*
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe:
>http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From gokul007 at gmail.com  Wed Oct 17 05:50:26 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 17 Oct 2012 20:50:26 +0800
Subject: [antlr-interest] How to use lexer getCharPositionInLine()
 function in Cpp target
In-Reply-To: <CACCG97HNDe+woRCHL94=22dP5s_AC2w7XqvpSmG-+3qhsEES5g@mail.gmail.com>
References: <CACCG97Emq7Vehy4pENAXFpgvFf00-BCz=+Aysjn2zAC-0YjZcw@mail.gmail.com>
	<CAHMh4-bBRATr_OsU=NDmYmBPx_LcZhp2uFh7OOQuky8zv-B3cA@mail.gmail.com>
	<CACCG97ExQ9pz15eqbZ5Q8AKy2u--dyRDxRSfynnXYaUKsP5L7w@mail.gmail.com>
	<CAHMh4-am28==Zvp7FGLbMDrF9irCLFzR52XQ8MbM9edp+Jv_5g@mail.gmail.com>
	<CAHMh4-ZKX86Lx6AtZXKiWP-kEyr+arbim_FmUDk9tm=6oRi1cA@mail.gmail.com>
	<CACCG97FahbFN3fvr6m_W=5Zqt1Od6pnBAJPBOHBj8REhpJMrfw@mail.gmail.com>
	<CACCG97HNDe+woRCHL94=22dP5s_AC2w7XqvpSmG-+3qhsEES5g@mail.gmail.com>
Message-ID: <CAHMh4-YJo-NdJ6pR+8ZxxNYbwKfa+ijQJUCzNtY=huwox8dKYQ@mail.gmail.com>

Hmmm... This is a hack in C- grammar. So it should not be expected to be
supported in C++ grammar.
Either store the data what you want to extract out of token inside $text.

If you are worried about copying, then use
this->get_state()->set_tokenStartCharIndex( theStart );

Thanks.

On Wed, Oct 17, 2012 at 6:49 AM, Richard Gildea <rgildea at gmail.com> wrote:

> Another problem I have found with the Cpp target compared to the C target
> is when trying to use a construct such as $start=theStart (see e.g.
> http://antlr.markmail.org/message/izyhuzbooerfw4tu), which gives the
> following compiler error:
>
> error: expression is not assignable
>              this->get_state()->get_tokenStartCharIndex() = theStart;
> this->emit();
>              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
>
> Cheers,
>
> Richard
>
>
> On 16 October 2012 14:56, Richard Gildea <rgildea at gmail.com> wrote:
>
>> Hi Gokul,
>>
>> This does not work either, as I now get the following compiler error in
>> the generated lexer rule functions:
>>
>> error: use of undeclared identifier 'm_ctx'
>>
>> Cheers,
>>
>> Richard
>>
>> On 15 October 2012 17:56, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:
>>
>>> You don't need to write it inside the Cpp file. Just write it in the
>>> grammar.
>>>
>>> Gokul.
>>>
>>>
>>> On Tue, Oct 16, 2012 at 8:56 AM, Gokulakannan Somasundaram <
>>> gokul007 at gmail.com> wrote:
>>>
>>>> Yeah. That looks like a bug. I will need to change the stg file. For
>>>> now, you can directly write m_ctx->getCharPositionInLine() in place of getCharPositionInLine()
>>>> and let me know, whether it works.
>>>>
>>>> Thanks,
>>>> Gokul.
>>>>
>>>> On Tue, Oct 16, 2012 at 8:28 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>>>
>>>>> Hi Gokul,
>>>>>
>>>>> The problem is that the predicate also appears in one of the generated
>>>>> TLexerCyclicDFA functions, leading to the following compilation error:
>>>>>
>>>>> error: no member named 'getCharPositionInLine' in 'cifLexerCyclicDFA33'
>>>>>                             if ( (( this->getCharPositionInLine() > 0
>>>>> )) )
>>>>>                                     ~~~~  ^
>>>>>
>>>>> Manually editing the generated code to read
>>>>> ctx->getCharPositionInLine() fixes the compilation.
>>>>>
>>>>> Cheers,
>>>>>
>>>>> Richard
>>>>>
>>>>>
>>>>> On 15 October 2012 17:13, Gokulakannan Somasundaram <
>>>>> gokul007 at gmail.com> wrote:
>>>>>
>>>>>> getCharPositionInLine() function is present inside Lexer. You can
>>>>>> just call it as similar to Java.
>>>>>> just replace the MACRO GETCHARPOSITIONINLINE() with
>>>>>> this->getCharPositionInLine() ?
>>>>>>
>>>>>> I can't understand second part of your question.
>>>>>>
>>>>>> Thanks,
>>>>>> Gokul.
>>>>>>
>>>>>>
>>>>>> On Tue, Oct 16, 2012 at 2:43 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>>>>>
>>>>>>> Hi,
>>>>>>>
>>>>>>> I am attempting to convert my parser to use the Cpp target after
>>>>>>> previously
>>>>>>> using the C target for some time, and have come across a problem
>>>>>>> trying to
>>>>>>> call the function TLexer::getCharPositionInLine() inside a gated
>>>>>>> semantic
>>>>>>> predicate in one of my lexer rules. With the C target I was using a
>>>>>>> construct such as
>>>>>>>
>>>>>>> ({ GETCHARPOSITIONINLINE() > 0 }?=> ';')
>>>>>>>
>>>>>>> to identify a semicolon character in the first column of a line. When
>>>>>>> trying to use a similar construct with the Cpp target, in the
>>>>>>> generated
>>>>>>> code this predicate is used both inside the lexer rule, where the
>>>>>>> correct
>>>>>>> usage would be this->getCharPositionInLine(), and inside a
>>>>>>> cyclicDFA, where
>>>>>>> the usage would be ctx->getCharPositionInLine(). Is there a way to
>>>>>>> use such
>>>>>>> a predicate with the Cpp target?
>>>>>>>
>>>>>>> Cheers,
>>>>>>>
>>>>>>> Richard
>>>>>>>
>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>> Unsubscribe:
>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>>>
>>>>>>
>>>>>>
>>>>>
>>>>
>>>
>>
>

From sashapolo239 at gmail.com  Wed Oct 17 06:50:55 2012
From: sashapolo239 at gmail.com (Alexander)
Date: Wed, 17 Oct 2012 17:50:55 +0400
Subject: [antlr-interest] Problems with Cpp target
In-Reply-To: <CAHMh4-ZotJY7LPRBwic+cVLdpO39jkpALpUXETRAUsyrLShLEA@mail.gmail.com>
References: <5073F0E9.6010606@gmail.com> <5073F2C1.8070909@release14.org>
	<CAHMh4-ZD3CX9bioemFg+tPa0ea9_tMBiVZGBnD0r4k1j2N5_LA@mail.gmail.com>
	<50792A2E.8060802@gmail.com>
	<CAHMh4-ZotJY7LPRBwic+cVLdpO39jkpALpUXETRAUsyrLShLEA@mail.gmail.com>
Message-ID: <507EB7BF.7060401@gmail.com>

Seems that the problem is in Eclipse. Project compiles fine using the 
console.

On 10/14/12 19:09, Gokulakannan Somasundaram wrote:
> It works completely fine for me. I can't understand what's happening 
> in your machine.
> Which compiler are you using?
>
> Are the lexer and parser compiling fine?
>
> Gokul.
>
> On Sat, Oct 13, 2012 at 4:45 PM, Alexander Polovtcev 
> <sashapolo239 at gmail.com <mailto:sashapolo239 at gmail.com>> wrote:
>
>     Hello.
>     I uploaded the grammar and main.cpp to the gist.
>     https://gist.github.com/40ed62fbfd97255fd9b3
>     Thank you.
>
>
>     On 10/13/2012 04:09 AM, Gokulakannan Somasundaram wrote:
>     > Hi,
>     >    It looks like you have done everything correctly. Can you
>     send me a
>     > sample grammar also, which you find not working for you?
>     >
>     > Thanks,
>     > Gokul.
>     >
>     > On Tue, Oct 9, 2012 at 5:47 PM, Damir Franusic <df at release14.org
>     <mailto:df at release14.org>
>     > <mailto:df at release14.org <mailto:df at release14.org>>> wrote:
>     >
>     >     Hi
>     >
>     >     I don't know the current state of Cpp target but I was also
>     having
>     >     issues before so I just used C target instead and had no issues
>     >     ever since.
>     >
>     >
>     >     *Damir Franusic*
>     >     Founder / Lead developer
>     >
>     >     r14 logo
>     >     *Release 14*
>     >     e: df at release14.org <mailto:df at release14.org>
>     <mailto:df at release14.org <mailto:df at release14.org>>
>     >     p: +385-91-209-1311 <tel:%2B385-91-209-1311>
>     <tel:%2B385-91-209-1311>
>     >     p: +971-52-840-1063 <tel:%2B971-52-840-1063>
>     <tel:%2B971-52-840-1063>
>     >     w: http://www.release14.org/
>     >
>     >
>     >     On 10/09/2012 11:39 AM, Alexander Polovtcev wrote:
>     >     > Hello.
>     >     >       I'm making a parser, which uses antlr c++ target.
>     But when
>     >     I try to
>     >     > compile the project, I get the following error:
>     >     > /Method 'get_tokSource' could not be resolved//
>     >     > /I do everything the same as in the examples. Here is the
>     code:/
>     >     >
>     >     > main.cpp:
>     >     >
>     >     > /#include<iostream>
>     >     > #include "panlangGrammarLexer.hpp"
>     >     > #include "panlangGrammarParser.hpp"
>     >     >
>     >     > using namespace std;
>     >     >
>     >     > int main(int argc, char *argv[]) {
>     >     >       ANTLR_UINT8* fName;
>     >     >       if (argc<  2 || argv[1] == NULL) {
>     >     >           cout<<"Specify file to parse"<<endl;
>     >     >           return 1;
>     >     >       } else {
>     >     >           fName    = (ANTLR_UINT8*)argv[1];
>     >     >       }
>     >     >
>     >     > panlangGrammarLexerTraits::InputStreamType input(fName,
>     >     > ANTLR_ENC_8BIT);
>     >     >       panlangGrammarLexer lexer(&input);
>     >     > panlangGrammarParserTraits::TokenStreamType
>     >     > tstream(ANTLR_SIZE_HINT, lexer.get_tokSource());
>     >     >       panlangGrammarParser parser(&tstream);
>     >     >
>     >     >       parser.program();
>     >     >
>     >     >       return 0;
>     >     > }
>     >     >
>     >     > /beginning of the grammar:/
>     >     >
>     >     > grammar panlangGrammar;
>     >     >
>     >     > options {
>     >     >     language = Cpp;
>     >     >     k = 4;
>     >     > }
>     >     >
>     >     > @parser::includes
>     >     > {
>     >     >       #include "panlangGrammarLexer.hpp"
>     >     > }
>     >     >
>     >     > @lexer::traits
>     >     > {
>     >     >       class panlangGrammarLexer;
>     >     >       class panlangGrammarParser;
>     >     >       typedef antlr3::Traits<panlangGrammarLexer,
>     >     panlangGrammarParser>
>     >     > panlangGrammarLexerTraits;
>     >     >       typedef panlangGrammarLexerTraits
>     panlangGrammarParserTraits;
>     >     > }
>     >     >
>     >     > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     >     > Unsubscribe:
>     >
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>     >     >
>     >
>     >     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     >     Unsubscribe:
>     >
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>     >
>     >
>
>
>     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     Unsubscribe:
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From deepakpatil84 at gmail.com  Wed Oct 17 14:33:52 2012
From: deepakpatil84 at gmail.com (Deepak Patil)
Date: Thu, 18 Oct 2012 03:03:52 +0530
Subject: [antlr-interest] Regular Expression in ECMAScript Grammer
Message-ID: <CAB99bMvLXPwdCN+8S3CGVHA8KmXR0vrd-DE6XmxC92c=H9FeuQ@mail.gmail.com>

Hi,

I couldn't find support for Regular Expression in
*ECMAScript<http://www.antlr.org/grammar/1206736738015/JavaScript.g>
 ( **http://www.antlr.org/grammar/1206736738015/JavaScript.g ) .*
e.g.  quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/
please point me if anything is there.

Thanks and Regards,
Deepak Patil (http://www.openwaf.com)

From ahouse at eecg.toronto.edu  Wed Oct 17 17:23:08 2012
From: ahouse at eecg.toronto.edu (Andrew House)
Date: Wed, 17 Oct 2012 21:53:08 -0230
Subject: [antlr-interest] Optional rules when duplicating nodes in AST
	construction
Message-ID: <507F4BEC.2060006@eecg.toronto.edu>

In my language application, you can declare constants and variables in 
similar but distinct manners.

const name1 is int := 56;
var name2 is int;

Variables can be optionally initialized the same way as constants.

var name3 is int := 6;

As a convenience, I'd like to be able to declare and initialize multiple 
variables of the same type in a single line, as follows.

const N, NTEST is int := 100000, 22;
var test1, test2 is int := 13, 16;

Or even, where the implication is that test5 is uninitialized, with 
unequal-length identifier and value lists:

var test3, test4, test5 is int := 12, 34;

This seems to work as expected for constants, but for variables it 
replicates the first value in the expression list.

My grammar rules are as follows:

constantDeclaration
     :    'const' ID (',' ID)* 'is' dataType ':=' expr (',' expr)* ';'
       -> ^('const' ^(NAME ID) ^(VARTYPE dataType) ^(VALUE expr))+
     ;

varDeclaration
     :    'var' ID (',' ID)* 'is' dataType (':=' expr (',' expr)*)? ';'
         -> ^('var' ^(NAME ID) ^(VARTYPE dataType) ^(VALUE expr)?)+
     ;

For the constant declaration input "const N, NTEST is int := 100000, 
22;" we get the following in the AST, which is what I wanted:
(const (NAME N) (VARTYPE (SCALAR (NAME (TYPEID int)))) (VALUE (EXPR 
100000))) (const (NAME NTEST) (VARTYPE (SCALAR (NAME (TYPEID int)))) 
(VALUE (EXPR 22)))

For the variable declaration input "var test1, test2 is int := 13, 16;" 
we get the following AST, where the 13 is duplicated:
(var (NAME test1) (VARTYPE (SCALAR (NAME (TYPEID int)))) (VALUE (EXPR 
13))) (var (NAME test2) (VARTYPE (SCALAR (NAME (TYPEID int)))) (VALUE 
(EXPR 13)))

A similar result occurs for the case where one variable is left 
uninitialized:
(var (NAME test3) (VARTYPE (SCALAR (NAME (TYPEID int)))) (VALUE (EXPR 
12))) (var (NAME test4) (VARTYPE (SCALAR (NAME (TYPEID int)))) (VALUE 
(EXPR 12))) (var (NAME test5) (VARTYPE (SCALAR (NAME (TYPEID int)))) 
(VALUE (EXPR 12)))

Obviously, the difference between the two grammar rules is that the 
value expression for variables is optional.  Is this repetition 
behaviour an artifact of how ANTLR duplicates optional rules (eg. the 
modifier example on page 167 of the Definitive ANTLR Reference) or is 
there some way to do what I want that is non-obvious?

Thanks in advance for any help anyone can provide.

-- Andrew House

From bkiers at gmail.com  Wed Oct 17 23:15:57 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 18 Oct 2012 08:15:57 +0200
Subject: [antlr-interest] Regular Expression in ECMAScript Grammer
In-Reply-To: <CAB99bMvLXPwdCN+8S3CGVHA8KmXR0vrd-DE6XmxC92c=H9FeuQ@mail.gmail.com>
References: <CAB99bMvLXPwdCN+8S3CGVHA8KmXR0vrd-DE6XmxC92c=H9FeuQ@mail.gmail.com>
Message-ID: <CAOrgODYEtb-NsCF+TLzdM3CXZErgaEdqe6ZjT1TZdRKwrq3=kg@mail.gmail.com>

On the grammar list, there's also:
*
*
*A complete ECMAScript 3 grammar <http://research.xebic.com>*
* Xebic Research B.V. (Patrick Hulsmeijer) Wed Apr 9, 2008 05:08*
* Combined lexer/parser and treeparser grammars written from scratch with
the ES3 specification in hand. Includes support for auto semicolon
insertion and regular expression literals.*

Regards,

Bart.


On Wed, Oct 17, 2012 at 11:33 PM, Deepak Patil <deepakpatil84 at gmail.com>wrote:

> Hi,
>
> I couldn't find support for Regular Expression in
> *ECMAScript<http://www.antlr.org/grammar/1206736738015/JavaScript.g>
>  ( **http://www.antlr.org/grammar/1206736738015/JavaScript.g ) .*
> e.g.  quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/
> please point me if anything is there.
>
> Thanks and Regards,
> Deepak Patil (http://www.openwaf.com)
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From apalala at gmail.com  Thu Oct 18 10:07:45 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 18 Oct 2012 12:37:45 -0430
Subject: [antlr-interest] Preserve source code comments
Message-ID: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>

I know this question has been asked before, but the threads about it are
old and inconclusive.

I need to associate source code comments with the nearest parsed token.
Everything else I need to do I can do post-parsing.

Could I get away with using a custom token type that grabs the nearest
comment on its constructor?

All I need is a basic recipe.

TIA,

-- 
Juancarlo *A?ez*

From parrt at cs.usfca.edu  Thu Oct 18 10:28:07 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 18 Oct 2012 10:28:07 -0700
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
Message-ID: <0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>

 This is what hidden channels are for :) 

http://www.antlr.org/wiki/pages/viewpage.action?pageId=557063

T
On Oct 18, 2012, at 10:07 AM, Juancarlo A?ez wrote:

> I know this question has been asked before, but the threads about it are
> old and inconclusive.
> 
> I need to associate source code comments with the nearest parsed token.
> Everything else I need to do I can do post-parsing.
> 
> Could I get away with using a custom token type that grabs the nearest
> comment on its constructor?
> 
> All I need is a basic recipe.
> 
> TIA,
> 
> -- 
> Juancarlo *A?ez*
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From apalala at gmail.com  Thu Oct 18 19:52:33 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 18 Oct 2012 22:22:33 -0430
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
	<0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>
Message-ID: <CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>

Terrence,

 This is what hidden channels are for :)
>
> http://www.antlr.org/wiki/pages/viewpage.action?pageId=557063
>

That would work.

How do I recover the current token index? Mmm. this.input.index() ?

-- 
Juancarlo *A?ez*

From michael.bedward at gmail.com  Thu Oct 18 21:08:28 2012
From: michael.bedward at gmail.com (Michael Bedward)
Date: Fri, 19 Oct 2012 15:08:28 +1100
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
	<0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>
	<CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
Message-ID: <CACJVtdMiDC19N-s3bm6hB3nyAxuoGWfQLJPKHzhP72yYx8YkNg@mail.gmail.com>

Juancarlo,

Not sure if this is relevant to your problem, but I put together a
class some time ago to collect tokens on two or more channels:

http://jiffle.googlecode.com/git/language/src/main/java/org/jaitools/jiffle/parser/MultiChannelTokenStream.java

Michael


On 19 October 2012 13:52, Juancarlo A?ez <apalala at gmail.com> wrote:
> Terrence,
>
>  This is what hidden channels are for :)
>>
>> http://www.antlr.org/wiki/pages/viewpage.action?pageId=557063
>>
>
> That would work.
>
> How do I recover the current token index? Mmm. this.input.index() ?
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Thu Oct 18 21:08:48 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 19 Oct 2012 12:08:48 +0800
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
	<0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>
	<CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
Message-ID: <d460f5b0032d8ad9ef2c4569c7da128f@mail.gmail.com>

It's a thorny problem. Your assumptions (and you have to make some) about
which comment belongs to which piece of code will always get you in to
trouble in the end.

But, as most programmers don?t use comments, perhaps you can ignore the
issue ;)

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Juancarlo A?ez
Sent: Friday, October 19, 2012 10:53 AM
To: Terence Parr
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Preserve source code comments

Terrence,

 This is what hidden channels are for :)
>
> http://www.antlr.org/wiki/pages/viewpage.action?pageId=557063
>

That would work.

How do I recover the current token index? Mmm. this.input.index() ?

-- 
Juancarlo *A?ez*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rusinskystanislas at yahoo.fr  Fri Oct 19 03:36:11 2012
From: rusinskystanislas at yahoo.fr (Stanislas Rusinsky)
Date: Fri, 19 Oct 2012 11:36:11 +0100 (BST)
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <d460f5b0032d8ad9ef2c4569c7da128f@mail.gmail.com>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
	<0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>
	<CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
	<d460f5b0032d8ad9ef2c4569c7da128f@mail.gmail.com>
Message-ID: <1350642971.37773.YahooMailNeo@web171204.mail.ir2.yahoo.com>

A twisted issue indeed, one I also faced, as the comment handling had to be added after the fact.

We translate 2 million LoC, and the result has to have comment quite near the original position in the translated version.

We developed something in-house that looks backwards and forwards on key nodes, checks nearby comments with precedence rules (checking for newlines, commas, ...) attaches them to the most relevant node and marks comments as processed.

I recommend you to read this blogpost on an implementation:?http://meri-stuff.blogspot.be/2012/09/tackling-comments-in-antlr-compiler.html



________________________________
 De?: Jim Idle <jimi at temporal-wave.com>
??: 
Cc?: antlr-interest at antlr.org 
Envoy? le : Vendredi 19 octobre 2012 6h08
Objet?: Re: [antlr-interest] Preserve source code comments
 
It's a thorny problem. Your assumptions (and you have to make some) about
which comment belongs to which piece of code will always get you in to
trouble in the end.

But, as most programmers don?t use comments, perhaps you can ignore the
issue ;)

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Juancarlo A?ez
Sent: Friday, October 19, 2012 10:53 AM
To: Terence Parr
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Preserve source code comments

Terrence,

This is what hidden channels are for :)
>
> http://www.antlr.org/wiki/pages/viewpage.action?pageId=557063
>

That would work.

How do I recover the current token index? Mmm. this.input.index() ?

-- 
Juancarlo *A?ez*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rusinskystanislas at yahoo.fr  Fri Oct 19 04:33:42 2012
From: rusinskystanislas at yahoo.fr (Stanislas Rusinsky)
Date: Fri, 19 Oct 2012 12:33:42 +0100 (BST)
Subject: [antlr-interest] Having a tree walker that does no rewrite,
	just a tree pass
Message-ID: <1350646422.47682.YahooMailNeo@web171203.mail.ir2.yahoo.com>

Hi,

I currently have a parser generating a tree, and a tree walker with stringtemplate.

I'd like to implement a symbol table, and for different reasons not mentioned here I'd like to have a separate tree walker in-between the two.

This tree walker shouldn't do any rewrite of the AST, so I took the current walker and stripped it of from its actions and rewrites, but I can't get it to just parse the tree, and do no rewrite: I get an empty tree on output.

How should I proceed to have just a tree walker that "does nothing" but walk?

(Using antlr 3.4)

TIA

Stan

From apalala at gmail.com  Fri Oct 19 07:37:21 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Fri, 19 Oct 2012 10:07:21 -0430
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <1350642971.37773.YahooMailNeo@web171204.mail.ir2.yahoo.com>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
	<0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>
	<CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
	<d460f5b0032d8ad9ef2c4569c7da128f@mail.gmail.com>
	<1350642971.37773.YahooMailNeo@web171204.mail.ir2.yahoo.com>
Message-ID: <CAN1YFWscJkxLNg-rEhrZFKpDwOf+=rJfkg0g3U3aB4V9mCo3ag@mail.gmail.com>

On Fri, Oct 19, 2012 at 6:06 AM, Stanislas Rusinsky <
rusinskystanislas at yahoo.fr> wrote:

> I recommend you to read this blogpost on an implementation:
> http://meri-stuff.blogspot.be/2012/09/tackling-comments-in-antlr-compiler.html
>

That is a very nice set of recipes. Thank you!

-- 
Juancarlo *A?ez*

From apalala at gmail.com  Fri Oct 19 07:44:02 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Fri, 19 Oct 2012 10:14:02 -0430
Subject: [antlr-interest] Having a tree walker that does no rewrite,
 just a tree pass
In-Reply-To: <1350646422.47682.YahooMailNeo@web171203.mail.ir2.yahoo.com>
References: <1350646422.47682.YahooMailNeo@web171203.mail.ir2.yahoo.com>
Message-ID: <CAN1YFWtJF+hV=J=__RrpL5=bmYBBkGt_5w1Ei-78ctz5VD=6Ew@mail.gmail.com>

On Fri, Oct 19, 2012 at 7:03 AM, Stanislas Rusinsky <
rusinskystanislas at yahoo.fr> wrote:

> I'd like to implement a symbol table, and for different reasons not
> mentioned here I'd like to have a separate tree walker in-between the two.
>

This doesn't answer your question, but... If one of the walkers won't do
any rewriting, then you can use the walkers in sequence, instead of in a
pipe.

-- 
Juancarlo *A?ez*

From lgcraymer at yahoo.com  Fri Oct 19 08:18:57 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Fri, 19 Oct 2012 08:18:57 -0700 (PDT)
Subject: [antlr-interest] Having a tree walker that does no rewrite,
	just a tree pass
In-Reply-To: <1350646422.47682.YahooMailNeo@web171203.mail.ir2.yahoo.com>
References: <1350646422.47682.YahooMailNeo@web171203.mail.ir2.yahoo.com>
Message-ID: <1350659937.67503.YahooMailNeo@web142304.mail.bf1.yahoo.com>

You don't need an output tree; just reuse the tree produced by the parser.

--Loring




>________________________________
> From: Stanislas Rusinsky <rusinskystanislas at yahoo.fr>
>To: ANTLR ML <antlr-interest at antlr.org> 
>Sent: Friday, October 19, 2012 4:33 AM
>Subject: [antlr-interest] Having a tree walker that does no rewrite, just a tree pass
> 
>Hi,
>
>I currently have a parser generating a tree, and a tree walker with stringtemplate.
>
>I'd like to implement a symbol table, and for different reasons not mentioned here I'd like to have a separate tree walker in-between the two.
>
>This tree walker shouldn't do any rewrite of the AST, so I took the current walker and stripped it of from its actions and rewrites, but I can't get it to just parse the tree, and do no rewrite: I get an empty tree on output.
>
>How should I proceed to have just a tree walker that "does nothing" but walk?
>
>(Using antlr 3.4)
>
>TIA
>
>Stan
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From parrt at cs.usfca.edu  Fri Oct 19 10:45:21 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 19 Oct 2012 10:45:21 -0700
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
	<0D354853-92ED-4CB5-8F71-3F55E2D09C3E@cs.usfca.edu>
	<CAN1YFWuG-foxpA_S0LekyyCY-ZbqCcffHvtmUdrbzT-38MnACQ@mail.gmail.com>
Message-ID: <DB4FE9A9-B9FE-4B86-84AA-BF878FD255D5@cs.usfca.edu>

I Think that the individual tokens let you get the token index with getTokenIndex. First, you find the real token of interest such as the start or end of a statement. Then, you ask the token stream for the hidden tokens to the left or right. v4 makes this a bit easier; not sure which one you are using.

T
On Oct 18, 2012, at 7:52 PM, Juancarlo A?ez wrote:

> Terrence,
> 
> This is what hidden channels are for :)
>> 
>> http://www.antlr.org/wiki/pages/viewpage.action?pageId=557063
>> 
> 
> That would work.
> 
> How do I recover the current token index? Mmm. this.input.index() ?
> 
> -- 
> Juancarlo *A?ez*
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From nwyatt at salesforce.com  Fri Oct 19 12:55:08 2012
From: nwyatt at salesforce.com (Nat Wyatt)
Date: Fri, 19 Oct 2012 12:55:08 -0700
Subject: [antlr-interest] error(10): internal error:
 org.antlr.analysis.NFAToDFAConverter.getPredicatesPerNonDeterministicAlt(NFAToDFAConverter.java:1604):
 no AST/token for nonepsilon target w/o predicate
Message-ID: <5081B01C.5080507@salesforce.com>

We are intermittently getting the error in the subject line running 
ANTLR 3.1.1. It happens only in our build system, and not every time. 
Multithreaded NFA conversion is off (by default we do not specify 
--Xmultithreaded).

Since it is not easily reproducible, I was wondering if anyone had hints 
for what to look for.

As far as I can tell the problem has not been mentioned on the 
antlr-interest list and there's no issue for it on github.

Thanks,

nat

From lgcraymer at yahoo.com  Fri Oct 19 17:00:15 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Fri, 19 Oct 2012 17:00:15 -0700 (PDT)
Subject: [antlr-interest] error(10): internal error:
	org.antlr.analysis.NFAToDFAConverter.getPredicatesPerNonDeterministicAlt(NFAToDFAConverter.java:1604):
	no AST/token for nonepsilon target w/o predicate
In-Reply-To: <5081B01C.5080507@salesforce.com>
References: <5081B01C.5080507@salesforce.com>
Message-ID: <1350691215.52807.YahooMailNeo@web142303.mail.bf1.yahoo.com>

This type of thing commonly happens when you run out of heap space. ?See about passing arguments to the JVM during ANTLR launch--you can specify min and max sizes for the heap.

--Loring




>________________________________
> From: Nat Wyatt <nwyatt at salesforce.com>
>To: antlr-interest at antlr.org 
>Sent: Friday, October 19, 2012 12:55 PM
>Subject: [antlr-interest] error(10): internal error: org.antlr.analysis.NFAToDFAConverter.getPredicatesPerNonDeterministicAlt(NFAToDFAConverter.java:1604): no AST/token for nonepsilon target w/o predicate
> 
>We are intermittently getting the error in the subject line running 
>ANTLR 3.1.1. It happens only in our build system, and not every time. 
>Multithreaded NFA conversion is off (by default we do not specify 
>--Xmultithreaded).
>
>Since it is not easily reproducible, I was wondering if anyone had hints 
>for what to look for.
>
>As far as I can tell the problem has not been mentioned on the 
>antlr-interest list and there's no issue for it on github.
>
>Thanks,
>
>nat
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From jimi at temporal-wave.com  Fri Oct 19 23:02:17 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 20 Oct 2012 14:02:17 +0800
Subject: [antlr-interest] error(10): internal error:
 org.antlr.analysis.NFAToDFAConverter.getPredicatesPerNonDeterministicAlt(NFAToDFAConverter.java:1604):
 no AST/token for nonepsilon target w/o predicate
In-Reply-To: <5081B01C.5080507@salesforce.com>
References: <5081B01C.5080507@salesforce.com>
Message-ID: <-3466563450447439599@unknownmsgid>

Any reason you can't upgrade? Try increasing the conversion timeout
setting if not.

Jim

On Oct 20, 2012, at 3:55, Nat Wyatt <nwyatt at salesforce.com> wrote:

> We are intermittently getting the error in the subject line running
> ANTLR 3.1.1. It happens only in our build system, and not every time.
> Multithreaded NFA conversion is off (by default we do not specify
> --Xmultithreaded).
>
> Since it is not easily reproducible, I was wondering if anyone had hints
> for what to look for.
>
> As far as I can tell the problem has not been mentioned on the
> antlr-interest list and there's no issue for it on github.
>
> Thanks,
>
> nat
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From gerald at certiv.net  Sun Oct 21 14:23:08 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Sun, 21 Oct 2012 14:23:08 -0700
Subject: [antlr-interest] Lexer alt does not generate corresponding token?
Message-ID: <508467BC.4030006@certiv.net>

When generating a lexer containing the rule

COMMENT_LINE
     : SL_COMMENT (SL_COMMENT)+ -> channel(HIDDEN), type(COMMENT_BLOCK)
     | SL_COMMENT -> channel(HIDDEN)
     ;

no 'COMMENT_LINE' token is produced in the associated token vocab. 
Splitting the alts into separate rules produces the expected set of 
tokens.  Bug or am I missing something?

Using v4b2.  Test lexer attached.
-------------- next part --------------
lexer grammar TestLexer;

tokens {
	COMMENT_BLOCK
}

@lexer::header {
	package net.certiv.test;
}

// match anything between /* and */
COMMENT
    :   '/*' .* '*/'  -> channel(HIDDEN) 
    ;

COMMENT_LINE
	: SL_COMMENT (SL_COMMENT)+ -> channel(HIDDEN), type(COMMENT_BLOCK)
	| SL_COMMENT -> channel(HIDDEN)
	;

/*
COMMENT_BLOCK
	: SL_COMMENT (SL_COMMENT)+ -> channel(HIDDEN)
	;

COMMENT_LINE
	: SL_COMMENT -> channel(HIDDEN)
	;
*/

fragment 
SL_COMMENT
    : '//' ~[\r\n]* '\r'? '\n'
    ;

// white space
WS :  [ \t\r\n\u000C]+ -> channel(HIDDEN)
    ;

From parrt at cs.usfca.edu  Sun Oct 21 16:09:39 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 21 Oct 2012 16:09:39 -0700
Subject: [antlr-interest] Lexer alt does not generate corresponding
	token?
In-Reply-To: <508467BC.4030006@certiv.net>
References: <508467BC.4030006@certiv.net>
Message-ID: <EA151DB8-80AE-46C2-A3F8-DC9B1D924747@cs.usfca.edu>

yep, we did that on purpose. If you ever set a token type with a lexer command, is very risky to reference the surrounding lexer rule in a parser.  

@Sam: can remember exactly how this a bit us?

Ter
On Oct 21, 2012, at 2:23 PM, Gerald Rosenberg wrote:

> When generating a lexer containing the rule
> 
> COMMENT_LINE
>    : SL_COMMENT (SL_COMMENT)+ -> channel(HIDDEN), type(COMMENT_BLOCK)
>    | SL_COMMENT -> channel(HIDDEN)
>    ;
> 
> no 'COMMENT_LINE' token is produced in the associated token vocab. Splitting the alts into separate rules produces the expected set of tokens.  Bug or am I missing something?
> 
> Using v4b2.  Test lexer attached.
> <TestLexer.g4>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gerald at certiv.net  Sun Oct 21 16:50:03 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Sun, 21 Oct 2012 16:50:03 -0700
Subject: [antlr-interest] Lexer alt does not generate corresponding
	token?
In-Reply-To: <EA151DB8-80AE-46C2-A3F8-DC9B1D924747@cs.usfca.edu>
References: <508467BC.4030006@certiv.net>
	<EA151DB8-80AE-46C2-A3F8-DC9B1D924747@cs.usfca.edu>
Message-ID: <50848A2B.10505@certiv.net>

Interesting.  This appears to generate correctly with COMMENT_BLOCK and 
COMMENT_LINE declared as tokens.

COMMENT_LINE_XX
     : SL_COMMENT (SL_COMMENT)+ -> channel(HIDDEN), type(COMMENT_BLOCK)
     | SL_COMMENT -> channel(HIDDEN), type(COMMENT_LINE)
     ;

Curious to know if it runs afoul of the same issue.

On 10/21/2012 4:09 PM, Terence Parr wrote:
> yep, we did that on purpose. If you ever set a token type with a lexer command, is very risky to reference the surrounding lexer rule in a parser.
>
> @Sam: can remember exactly how this a bit us?
>
> Ter
> On Oct 21, 2012, at 2:23 PM, Gerald Rosenberg wrote:
>
>> When generating a lexer containing the rule
>>
>> COMMENT_LINE
>>     : SL_COMMENT (SL_COMMENT)+ -> channel(HIDDEN), type(COMMENT_BLOCK)
>>     | SL_COMMENT -> channel(HIDDEN)
>>     ;
>>
>> no 'COMMENT_LINE' token is produced in the associated token vocab. Splitting the alts into separate rules produces the expected set of tokens.  Bug or am I missing something?
>>
>> Using v4b2.  Test lexer attached.
>> <TestLexer.g4>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From mandy at think-a-lot.de  Mon Oct 22 04:00:35 2012
From: mandy at think-a-lot.de (mandy at think-a-lot.de)
Date: Mon, 22 Oct 2012 13:00:35 +0200
Subject: [antlr-interest] Lexing almost arbitrary input
Message-ID: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>

Dear list,

in a project we want to use ANTLR to parse lexicon/dictionary entries.  
I'm the one who has the honour of writing the grammar(s) for that.
I'm currently stuck with the lexer part.
Here's the problem:

Since we talk about dictionary entries, the structure is quite simple:  
You have a word in language1 (lemma), a translation in language2 and  
some grammatical attributes. The latter is somewhat fixed, having a  
limited set of values like 'm', 'f', 'pl' and so on.
The problem is the former. The lemma (and translation) could be a  
simple word like "dog", but it can also be several words with spaces  
(phrases) like in "come to be known"; furthermore it could contain  
non-letter characters like '-' ("push-up"), '(' ("Rheinl?nder(in)"),  
even numbers, slashes, percent signs etc. may be part of the lemma  
(e.g. "100% (bio-)degradable").

So there are just too many possibilities - I did not come too far with  
the 'a'..'z' approach (even more because we are talking about  
languages with umlaut and accents). And I really did not want to list  
all possible combinations, think it would be a pain...

I thought about something like "consume just everything until some  
special character (that will never be part of the lemma)". First rules  
I tried were

LEMMA: (options {greedy=false;}: .)+ ~COLON;
TRANSLATION: (options {greedy=false;}: .)+ ~(CARRIAGERETURN|LINEFEED);

but this didn't seem to work ("required (...)+ loop did not match  
anything at character ..." for each input character). So I used just

LEMMA: (~COLON)+;
TRANSLATION: (~(CARRIAGERETURN|LINEFEED))+;

but now I don't see any output - neither from my code actions nor the  
AST. So I'm not sure if it even works; plus I think this is not the  
very best way to handle the problem.

Any ideas?

Mandy

P.S.: The structure for the dictionary entry has to be as simple as this:

dictionary:
	dictEntry*  EOF
;

dictEntry
:
	LEMMA

	COLON

	TRANSLATION

	grammarAtts //which is '[' list_of_atrributes ']'

	NEWLINE //my instructor wants to let an entry end with newline, not  
sth like ';' ...
;


From jimi at temporal-wave.com  Mon Oct 22 05:04:41 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Oct 2012 20:04:41 +0800
Subject: [antlr-interest] Lexing almost arbitrary input
In-Reply-To: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
References: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
Message-ID: <8470240427787583826@unknownmsgid>

>From your description here, this language cannot be parsed. Is a
design of your own, in which case it can be changed, or something you
are stuck with. You have to have something to disambuguate such as

def : Phrase SEP Phrase Semi ;

Semi : ';' ;
Sep : '::' ;
Phrase : (~(':'|';'))+ ;

But then the problem is so simple that there is no point using a
grammar. I would just hand code this as a simple character consuming
loop.

Hope that helps :)

Jim

On Oct 22, 2012, at 19:00, "mandy at think-a-lot.de" <mandy at think-a-lot.de> wrote:

> Dear list,
>
> in a project we want to use ANTLR to parse lexicon/dictionary entries.
> I'm the one who has the honour of writing the grammar(s) for that.
> I'm currently stuck with the lexer part.
> Here's the problem:
>
> Since we talk about dictionary entries, the structure is quite simple:
> You have a word in language1 (lemma), a translation in language2 and
> some grammatical attributes. The latter is somewhat fixed, having a
> limited set of values like 'm', 'f', 'pl' and so on.
> The problem is the former. The lemma (and translation) could be a
> simple word like "dog", but it can also be several words with spaces
> (phrases) like in "come to be known"; furthermore it could contain
> non-letter characters like '-' ("push-up"), '(' ("Rheinl?nder(in)"),
> even numbers, slashes, percent signs etc. may be part of the lemma
> (e.g. "100% (bio-)degradable").
>
> So there are just too many possibilities - I did not come too far with
> the 'a'..'z' approach (even more because we are talking about
> languages with umlaut and accents). And I really did not want to list
> all possible combinations, think it would be a pain...
>
> I thought about something like "consume just everything until some
> special character (that will never be part of the lemma)". First rules
> I tried were
>
> LEMMA: (options {greedy=false;}: .)+ ~COLON;
> TRANSLATION: (options {greedy=false;}: .)+ ~(CARRIAGERETURN|LINEFEED);
>
> but this didn't seem to work ("required (...)+ loop did not match
> anything at character ..." for each input character). So I used just
>
> LEMMA: (~COLON)+;
> TRANSLATION: (~(CARRIAGERETURN|LINEFEED))+;
>
> but now I don't see any output - neither from my code actions nor the
> AST. So I'm not sure if it even works; plus I think this is not the
> very best way to handle the problem.
>
> Any ideas?
>
> Mandy
>
> P.S.: The structure for the dictionary entry has to be as simple as this:
>
> dictionary:
>    dictEntry*  EOF
> ;
>
> dictEntry
> :
>    LEMMA
>
>    COLON
>
>    TRANSLATION
>
>    grammarAtts //which is '[' list_of_atrributes ']'
>
>    NEWLINE //my instructor wants to let an entry end with newline, not
> sth like ';' ...
> ;
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From ch.saad.ahmed at gmail.com  Mon Oct 22 10:25:43 2012
From: ch.saad.ahmed at gmail.com (Saad Ahmed)
Date: Mon, 22 Oct 2012 22:25:43 +0500
Subject: [antlr-interest] Using antlr v3 in antlrworks
Message-ID: <CA+h7eND32SF0MxcUhOt+kXH5rxWHC0jWCCKi2HK58FpkrSv=Vg@mail.gmail.com>

Hi,
Its Saad Ahmed here. I hope that you are fine. I am a student of BS(CS) and
am currently working on project that converts PL/SQL script to a MySQL
script. I am using antlrworks 1.4.3 and I see that there is no way of
importing grammars which is feature of antlr v3. Please help me out on
this. And secondly if we want to generate the AST in antlr plugin for
eclipse, then which class would help us connect our parser.java with the
treeparser.java. I have not been able to generate a tree after several
attempts.  Any help would be highly appreciated.

Regards,
Saad Ahmed

From tillerman35 at yahoo.com  Mon Oct 22 17:13:34 2012
From: tillerman35 at yahoo.com (Michael Cooper)
Date: Mon, 22 Oct 2012 17:13:34 -0700 (PDT)
Subject: [antlr-interest] Easy method of preserving white space in string
	literals
Message-ID: <1350951214.44613.YahooMailNeo@web162803.mail.bf1.yahoo.com>

NOTE: This post covers the Java target.? Other targets- you're on your own
Just wanted to share something that LOOKS like it's working for me:

I have the typical need to ignore whitespace between all tokens EXCEPT string literals.

So 
??? A??? +B +??? C
Is a perfectly acceptable construct that parses to tokens A, +, B, +, C

But
??? "this is a big old string"
Needs to be one token (a string literal) with the spaces preserved.

Here's what I did:

Add the following to the lexer members section:
@lexer::members { 
? boolean in_stringliteral = false; 
}


Modify STRING_LITERAL token definition to set and un-set that value, like so:

STRING_LITERAL??? 
??? : '"' { in_stringliteral=true; } //Set a variable indicating the lexer has begun consuming a string literal 
??????? ( options{greedy=false;} 
????????? : ESC_SEQ 
????????? | STR_CHAR 
??????? )* 
????? '"' { in_stringliteral=false; } //Set a variable indicating the lexer has finished consuming a string literal
??? ;

(constructs for ESQ_SEC and STR_CHAR elided for brevity)

Finally, only set the channel to HIDDEN when not consuming a string literal.


WHITESPACE
??? :??? (' ' | '\t') { if(in_stringliteral==false) $channel=HIDDEN; }
;

I tried doing this with gated predicates, but it just didn't work for me.? The downside is that the interpreter in Eclipse fails when you feed it string literals with spaces in them.

YMMV, but this solved a major headache for me, and I never found a viable solution online.

From apalala at gmail.com  Mon Oct 22 17:32:15 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Mon, 22 Oct 2012 20:02:15 -0430
Subject: [antlr-interest] Easy method of preserving white space in
	string literals
In-Reply-To: <1350951214.44613.YahooMailNeo@web162803.mail.bf1.yahoo.com>
References: <1350951214.44613.YahooMailNeo@web162803.mail.bf1.yahoo.com>
Message-ID: <CAN1YFWs0N2rq=MyCVYzMcJtjrw68UE_YSbigTTeuUjeicjR-ow@mail.gmail.com>

Michael,

I think you just need to reorder your lexer rules to give them the expected
priority.


   1. Comments come first (embedded strings and whitespace get "eaten" by
   comments)
   2. Strings come second (embedded whitespace gets "eaten" by strings)
   3. Then whitespace (whitespace is meaningless, so it goes to hidden).
   4. Then everything else.

Cheers,

-- Juanca

On Mon, Oct 22, 2012 at 7:43 PM, Michael Cooper <tillerman35 at yahoo.com>wrote:

> NOTE: This post covers the Java target.  Other targets- you're on your own
> Just wanted to share something that LOOKS like it's working for me:
>
> I have the typical need to ignore whitespace between all tokens EXCEPT
> string literals.
>
> So
>     A    +B +    C
> Is a perfectly acceptable construct that parses to tokens A, +, B, +, C
>
> But
>     "this is a big old string"
> Needs to be one token (a string literal) with the spaces preserved.
>
> Here's what I did:
>
> Add the following to the lexer members section:
> @lexer::members {
>   boolean in_stringliteral = false;
> }
>
>
> Modify STRING_LITERAL token definition to set and un-set that value, like
> so:
>
> STRING_LITERAL
>     : '"' { in_stringliteral=true; } //Set a variable indicating the lexer
> has begun consuming a string literal
>         ( options{greedy=false;}
>           : ESC_SEQ
>           | STR_CHAR
>         )*
>       '"' { in_stringliteral=false; } //Set a variable indicating the
> lexer has finished consuming a string literal
>     ;
>
> (constructs for ESQ_SEC and STR_CHAR elided for brevity)
>
> Finally, only set the channel to HIDDEN when not consuming a string
> literal.
>
>
> WHITESPACE
>     :    (' ' | '\t') { if(in_stringliteral==false) $channel=HIDDEN; }
> ;
>
> I tried doing this with gated predicates, but it just didn't work for me.
> The downside is that the interpreter in Eclipse fails when you feed it
> string literals with spaces in them.
>
> YMMV, but this solved a major headache for me, and I never found a viable
> solution online.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From jbb at acm.org  Mon Oct 22 18:25:36 2012
From: jbb at acm.org (John B. Brodie)
Date: Mon, 22 Oct 2012 21:25:36 -0400
Subject: [antlr-interest] Easy method of preserving white space in
 string literals
In-Reply-To: <1350951214.44613.YahooMailNeo@web162803.mail.bf1.yahoo.com>
References: <1350951214.44613.YahooMailNeo@web162803.mail.bf1.yahoo.com>
Message-ID: <5085F210.2050207@acm.org>

Greetings!

No need for a flag (aka lexer state) i believe.

Once ANTLRv3 sees the opening " of the string and commits itself to 
recognizing the literal; then no other token, including your WHITESPACE 
token, will be considered for recognition.

Your definitions for ESC_SEQ and/or STR_CHAR (hopefully these are 
fragment's) need include *all* possible characters comprising a literal 
in your language including blanks and tabs.

If on the other hand that either ESC_SEQ or STR_CHAR refer to WHITESPACE 
in order to recognize the blanks and tabs, then don't do that ;-) Make a 
fragment that just recognizes the blanks and tabs (and whatever else you 
need as whitespace) and then refer to that fragment in WHITESPACE and 
STR_CHAR rules.... It should actually work as a non-fragment but you 
will suffer the overhead of creating a WHITESPACE token that is simply 
thrown away when its $TEXT is incorporated into the STRING_LITERAL token.

What happened that caused you to need to add the flag (lexer state)? Did 
you try it from the command line, outside of Eclipse? I have never used 
the Eclipse plug-in so am unsure of its capabilities.

Hope this helps....
    -jbb


On 10/22/2012 08:13 PM, Michael Cooper wrote:
> NOTE: This post covers the Java target.  Other targets- you're on your own
> Just wanted to share something that LOOKS like it's working for me:
>
> I have the typical need to ignore whitespace between all tokens EXCEPT string literals.
>
> So
>      A    +B +    C
> Is a perfectly acceptable construct that parses to tokens A, +, B, +, C
>
> But
>      "this is a big old string"
> Needs to be one token (a string literal) with the spaces preserved.
>
> Here's what I did:
>
> Add the following to the lexer members section:
> @lexer::members {
>    boolean in_stringliteral = false;
> }
>
>
> Modify STRING_LITERAL token definition to set and un-set that value, like so:
>
> STRING_LITERAL
>      : '"' { in_stringliteral=true; } //Set a variable indicating the lexer has begun consuming a string literal
>          ( options{greedy=false;}
>            : ESC_SEQ
>            | STR_CHAR
>          )*
>        '"' { in_stringliteral=false; } //Set a variable indicating the lexer has finished consuming a string literal
>      ;
>
> (constructs for ESQ_SEC and STR_CHAR elided for brevity)
>
> Finally, only set the channel to HIDDEN when not consuming a string literal.
>
>
> WHITESPACE
>      :    (' ' | '\t') { if(in_stringliteral==false) $channel=HIDDEN; }
> ;
>
> I tried doing this with gated predicates, but it just didn't work for me.  The downside is that the interpreter in Eclipse fails when you feed it string literals with spaces in them.
>
> YMMV, but this solved a major headache for me, and I never found a viable solution online.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Mon Oct 22 19:31:58 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 23 Oct 2012 10:31:58 +0800
Subject: [antlr-interest] Easy method of preserving white space in
	string literals
In-Reply-To: <1350951214.44613.YahooMailNeo@web162803.mail.bf1.yahoo.com>
References: <1350951214.44613.YahooMailNeo@web162803.mail.bf1.yahoo.com>
Message-ID: <a33fcedc6a4993ac73b6c5abf5d43254@mail.gmail.com>

I am not sure why you could not find an online example of this because as
far as I can tell this is just normal stuff:

STRING : '"' ~'"'* '"' ;
WS: (' '|'\t')+ { skip(); } ;

I recommend that you don't deal with escape sequences or anything else in
your lexer rule (other then \" if you need that), but just get the string
then analyze and convert each string later - you will get much better
error messages:

Illegal escape code in literal at line 7, offset 34.

Instead of a terse lexer error. You should try and get your lexer to
accept anything without a lexer error (not always easy) and either give an
indication to the parser that something is wrong or record a custom error
from actions.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Michael Cooper
Sent: Tuesday, October 23, 2012 8:14 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Easy method of preserving white space in string
literals

NOTE: This post covers the Java target.? Other targets- you're on your own
Just wanted to share something that LOOKS like it's working for me:

I have the typical need to ignore whitespace between all tokens EXCEPT
string literals.

So
??? A??? +B +??? C
Is a perfectly acceptable construct that parses to tokens A, +, B, +, C

But
??? "this is a big old string"
Needs to be one token (a string literal) with the spaces preserved.

Here's what I did:

Add the following to the lexer members section:
@lexer::members {
? boolean in_stringliteral = false;
}


Modify STRING_LITERAL token definition to set and un-set that value, like
so:

STRING_LITERAL
??? : '"' { in_stringliteral=true; } //Set a variable indicating the lexer
has begun consuming a string literal
??????? ( options{greedy=false;}
????????? : ESC_SEQ
????????? | STR_CHAR
??????? )*
????? '"' { in_stringliteral=false; } //Set a variable indicating the
lexer has finished consuming a string literal
??? ;

(constructs for ESQ_SEC and STR_CHAR elided for brevity)

Finally, only set the channel to HIDDEN when not consuming a string
literal.


WHITESPACE
??? :??? (' ' | '\t') { if(in_stringliteral==false) $channel=HIDDEN; } ;

I tried doing this with gated predicates, but it just didn't work for me.
The downside is that the interpreter in Eclipse fails when you feed it
string literals with spaces in them.

YMMV, but this solved a major headache for me, and I never found a viable
solution online.

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From peter.goetz at gutefrage.net  Tue Oct 23 04:10:34 2012
From: peter.goetz at gutefrage.net (=?iso-8859-1?Q?Peter_G=F6tz?=)
Date: Tue, 23 Oct 2012 13:10:34 +0200
Subject: [antlr-interest] Priority in interpreting input
Message-ID: <2CEC15782427EE4486A5E0E8836A41BB2501B3BA36@ZENTRALE.gutefrage.muc>

Hi there, 

I am using ANTLR to parse an arithmetic expression and create an abstract syntax tree from it with node objects for every node type. A typical expression looks like this: 

    2 * sqrt(a1 + b2)

As you can see, those expressions can contain literal number values, functions and variables. In the crucial part of my grammar I have the following: 

    factor: LITERAL | funct | METRIC;

And as the definition of LITERAL and METRIC this: 

    METRIC : (Letter|Digit|Separator)+;
    LITERAL : '0'..'9';

This is a very much simplified version of my real definitions just to make my point. If now I want to parse an expression it seems that ANTLR is not able to recognize the LITERAL, since this is matching as a METRIC, too. 

How do I tell ANTLR that a literal-recognition has precedence over a recognized metric? 

Thanks a lot for your help!

Best regards, 

Peter

From bkiers at gmail.com  Tue Oct 23 04:31:05 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Tue, 23 Oct 2012 13:31:05 +0200
Subject: [antlr-interest] Priority in interpreting input
In-Reply-To: <2CEC15782427EE4486A5E0E8836A41BB2501B3BA36@ZENTRALE.gutefrage.muc>
References: <2CEC15782427EE4486A5E0E8836A41BB2501B3BA36@ZENTRALE.gutefrage.muc>
Message-ID: <CAOrgODa59Om0MD_XthtvnTYim11oSTZ-ewu+qbZb8ZAXFcX_Lg@mail.gmail.com>

On Tue, Oct 23, 2012 at 1:10 PM, Peter G?tz <peter.goetz at gutefrage.net>wrote:

> ... How do I tell ANTLR that a literal-recognition has precedence over a
> recognized metric?
>
>
Define LITERAL _before_ METRIC:

    LITERAL : '0'..'9';
    METRIC : (Letter|Digit|Separator)+;

Regards,

Bart.

From jimi at temporal-wave.com  Tue Oct 23 04:58:53 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 23 Oct 2012 19:58:53 +0800
Subject: [antlr-interest] Priority in interpreting input
In-Reply-To: <CAOrgODa59Om0MD_XthtvnTYim11oSTZ-ewu+qbZb8ZAXFcX_Lg@mail.gmail.com>
References: <2CEC15782427EE4486A5E0E8836A41BB2501B3BA36@ZENTRALE.gutefrage.muc>
	<CAOrgODa59Om0MD_XthtvnTYim11oSTZ-ewu+qbZb8ZAXFcX_Lg@mail.gmail.com>
Message-ID: <7405044037738758563@unknownmsgid>

That's not going to work when the tokens are ambiguous.

Also, look up fragment rules and go through all the examples in the
tar before trying your own.

Jim

On Oct 23, 2012, at 19:31, Bart Kiers <bkiers at gmail.com> wrote:

> On Tue, Oct 23, 2012 at 1:10 PM, Peter G?tz <peter.goetz at gutefrage.net>wrote:
>
>> ... How do I tell ANTLR that a literal-recognition has precedence over a
>> recognized metric?
> Define LITERAL _before_ METRIC:
>
>    LITERAL : '0'..'9';
>    METRIC : (Letter|Digit|Separator)+;
>
> Regards,
>
> Bart.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From tillerman35 at yahoo.com  Tue Oct 23 12:46:32 2012
From: tillerman35 at yahoo.com (Michael Cooper)
Date: Tue, 23 Oct 2012 12:46:32 -0700 (PDT)
Subject: [antlr-interest] Implementing "break" statement in antlr-based
	interpreter
Message-ID: <1351021592.79711.YahooMailNeo@web162806.mail.bf1.yahoo.com>

Say you have your basic "for" or "while" loop, e.g.

for(i=0; i<10; i++) {
? print i
}


In the "pie" example, the author has a while loop that uses a "defer" parameter to indicate that the interpreter will do the job of evaluating the expr that determines if the loop proceeds.


?? |?? 'while' expr[true] slist[true]
??????? {if (!defer) interp.whileloop($expr.start, $slist.start);}

I would like to be able to break out of a "for" or "while" loop, as is done in many programming languages, e.g.

//Read rows from a cursor and print out the contents of field 1 until it says "break"
while cursor.hasrows() {
? cursor.getrow()
? if cursor.getfield[1] = "stop" then break? //<-- When field one says "break" we should exit the "while" loop.
? print cursor.getfield[1]
}

What I think I need to do is add a boolean to my interpreter that indicates that a break statement has been encountered, and then test for that condition = true in each rule action.

so in my "statement" rule, I would add an alternative:

| 'break' { if(!defer && !interp.breakfound) interp.break = true; }

and then add the "&& !interp.breakfound)" into every rule.? That way, the parser would not execute any interpreter functions until the breakfound condition was re-set.

I would also need to save the break condition prior to entering break-able constructs (loops and functions are the only ones I can think of) so that I could restore it after the end of the construct.? That way the break statement only exits the loop it executes in.

e.g. in class Interpreter:

public whileloop(Token expr_start, Token slist_start) {
? boolean saved_breakfound = this.breakfound;
??? ...Handle the loop stuff here...
? this.breakfound = saved_breakfound;
}

Does this make sense?? Is there a better way that I'm missing?? I imagine the same idea could be used to implement a "return(value)" statement in a function as well.? The only difference would be that a return statement would exit the function no matter how deep it was into loops.? For that, I'd need some kind of tri-state indicator, with values like 0 => continue, 1=> break out of loop, 2 => return from function.

Any thoughts?

Thanks!

From apalala at gmail.com  Tue Oct 23 12:51:33 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Tue, 23 Oct 2012 15:21:33 -0430
Subject: [antlr-interest] Implementing "break" statement in antlr-based
	interpreter
In-Reply-To: <1351021592.79711.YahooMailNeo@web162806.mail.bf1.yahoo.com>
References: <1351021592.79711.YahooMailNeo@web162806.mail.bf1.yahoo.com>
Message-ID: <CAN1YFWsjXoQxXARZbR2NwAQdc0Akvy0-yuJStdL7U5m=wQXy3Q@mail.gmail.com>

Michael,

Simplest, is best.

One option is to split the rules for statement sequences into two: those
allowed within loops, and everything else.

The other is to allow a "break" in any statement sequence, and deal with
it's validity later.

There's a lot of semantic nuances to a programming language that are very
difficult to solve at the syntactic level.

-- Juanca

On Tue, Oct 23, 2012 at 3:16 PM, Michael Cooper <tillerman35 at yahoo.com>wrote:

> Say you have your basic "for" or "while" loop, e.g.
>
> for(i=0; i<10; i++) {
>   print i
> }
>
>
> In the "pie" example, the author has a while loop that uses a "defer"
> parameter to indicate that the interpreter will do the job of evaluating
> the expr that determines if the loop proceeds.
>
>
>    |   'while' expr[true] slist[true]
>         {if (!defer) interp.whileloop($expr.start, $slist.start);}
>
> I would like to be able to break out of a "for" or "while" loop, as is
> done in many programming languages, e.g.
>
> //Read rows from a cursor and print out the contents of field 1 until it
> says "break"
> while cursor.hasrows() {
>   cursor.getrow()
>   if cursor.getfield[1] = "stop" then break  //<-- When field one says
> "break" we should exit the "while" loop.
>   print cursor.getfield[1]
> }
>
> What I think I need to do is add a boolean to my interpreter that
> indicates that a break statement has been encountered, and then test for
> that condition = true in each rule action.
>
> so in my "statement" rule, I would add an alternative:
>
> | 'break' { if(!defer && !interp.breakfound) interp.break = true; }
>
> and then add the "&& !interp.breakfound)" into every rule.  That way, the
> parser would not execute any interpreter functions until the breakfound
> condition was re-set.
>
> I would also need to save the break condition prior to entering break-able
> constructs (loops and functions are the only ones I can think of) so that I
> could restore it after the end of the construct.  That way the break
> statement only exits the loop it executes in.
>
> e.g. in class Interpreter:
>
> public whileloop(Token expr_start, Token slist_start) {
>   boolean saved_breakfound = this.breakfound;
>     ...Handle the loop stuff here...
>   this.breakfound = saved_breakfound;
> }
>
> Does this make sense?  Is there a better way that I'm missing?  I imagine
> the same idea could be used to implement a "return(value)" statement in a
> function as well.  The only difference would be that a return statement
> would exit the function no matter how deep it was into loops.  For that,
> I'd need some kind of tri-state indicator, with values like 0 => continue,
> 1=> break out of loop, 2 => return from function.
>
> Any thoughts?
>
> Thanks!
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From scott at javadude.com  Tue Oct 23 13:43:47 2012
From: scott at javadude.com (Scott Stanchfield)
Date: Tue, 23 Oct 2012 16:43:47 -0400
Subject: [antlr-interest] Implementing "break" statement in antlr-based
	interpreter
In-Reply-To: <CAN1YFWsjXoQxXARZbR2NwAQdc0Akvy0-yuJStdL7U5m=wQXy3Q@mail.gmail.com>
References: <1351021592.79711.YahooMailNeo@web162806.mail.bf1.yahoo.com>
	<CAN1YFWsjXoQxXARZbR2NwAQdc0Akvy0-yuJStdL7U5m=wQXy3Q@mail.gmail.com>
Message-ID: <CAN_KjYnB1YcByxXmxfr8_4uO5Qs8UsGnh+KFHuS+6e7=XVvLxQ@mail.gmail.com>

A much better/simpler approach when writing any interpreter with control
flow is to do it in two phases:

1. parse the file and construct an interpreter
2. run the interpreter

It looks like you're intermingling these; I think you're building a
statement list and passing it to the loop -- what if one of the statements
in that list is a nested loop?

You can implement the control-flow very easily using something like the GoF
Interpreter pattern. A break or continue can easily be handled by throwing
an exception that is caught by containing loops, or by having your
evaluate() methods return an object that has a flag marking break/continue.

Think about something like the following (not tested, but should
demonstrate the concept)

  // Context is some object that tracks current state, possibly scoped
variables,
  //   runtime stack, etc
  public interface Evaluator {
    Status evaluate(Context context);
  }
  public class Status {
    private Object value;
    private boolean isBreak;
    public Object getValue() {
      return value;
    }
    public boolean isBreak() {
      return isBreak;
    }
    public Status(Object value, boolean isBreak) {
      this.value = value;
      this.isBreak = isBreak;
    }
  }
  public class PrintStatement implements Evaluator {
    private Evaluator value;
    public PrintStatement(Evaluator value) {
      this.value = value;
    }
    @Override public Status evaluate(Context context) {
      Object v = value.evaluate(context).getValue();
      System.out.println(v);
      return new Status(v, false);
    }
  }
  public class BreakStatement implements Evaluator {
    @Override public Status evaluate(Context context) {
      return new Status(null, true);
    }
  }
  public class StatementList implements Evaluator {
    private List<Evaluator> evaluators = new ArrayList<Evaluator>();
    public void add(Evaluator statement) {
      evaluators.add(statement);
    }
    @Override public Status evaluate(Context context) {
      Status status = null;
      for (Evaluator evaluator : evaluators) {
        status = evaluator.evaluate(context);
        if (status.isBreak())
          return status;
      }
      if (status == null)
        status = new Status(null, false);
      else
        status = new Status(status.getValue(), false);
      return status;
    }
  }
  public class WhileStatement implements Evaluator {
    private Evaluator condition;
    private Evaluator body;
    public WhileStatement(Evaluator condition, Evaluator body) {
      this.condition = condition;
      this.body = body;
    }
    @Override public Status evaluate(Context context) {
      Status result = null;
      while(Boolean.TRUE.equals(condition.evaluate(context).getValue())) {
        result = body.evaluate(context);
        if (result.isBreak())
          break;
      }
      if (result == null)
        result = new Status(null, false);
      else
        result = new Status(result.getValue(), false);
      return result;
    }
  }

Using similar objects, all you need to do is have your parser create
instances of these evaluators, then call evaluate(context) on the top level.

This also makes it *very* easy to debug, as you can separate the "did I
parse it and create the structure correctly" and separately the "am I
running it correctly". It also lends itself much more cleanly to setting up
a debugger for your target language.

Hope this helps,
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com


On Tue, Oct 23, 2012 at 3:51 PM, Juancarlo A?ez <apalala at gmail.com> wrote:

> Michael,
>
> Simplest, is best.
>
> One option is to split the rules for statement sequences into two: those
> allowed within loops, and everything else.
>
> The other is to allow a "break" in any statement sequence, and deal with
> it's validity later.
>
> There's a lot of semantic nuances to a programming language that are very
> difficult to solve at the syntactic level.
>
> -- Juanca
>
> On Tue, Oct 23, 2012 at 3:16 PM, Michael Cooper <tillerman35 at yahoo.com
> >wrote:
>
> > Say you have your basic "for" or "while" loop, e.g.
> >
> > for(i=0; i<10; i++) {
> >   print i
> > }
> >
> >
> > In the "pie" example, the author has a while loop that uses a "defer"
> > parameter to indicate that the interpreter will do the job of evaluating
> > the expr that determines if the loop proceeds.
> >
> >
> >    |   'while' expr[true] slist[true]
> >         {if (!defer) interp.whileloop($expr.start, $slist.start);}
> >
> > I would like to be able to break out of a "for" or "while" loop, as is
> > done in many programming languages, e.g.
> >
> > //Read rows from a cursor and print out the contents of field 1 until it
> > says "break"
> > while cursor.hasrows() {
> >   cursor.getrow()
> >   if cursor.getfield[1] = "stop" then break  //<-- When field one says
> > "break" we should exit the "while" loop.
> >   print cursor.getfield[1]
> > }
> >
> > What I think I need to do is add a boolean to my interpreter that
> > indicates that a break statement has been encountered, and then test for
> > that condition = true in each rule action.
> >
> > so in my "statement" rule, I would add an alternative:
> >
> > | 'break' { if(!defer && !interp.breakfound) interp.break = true; }
> >
> > and then add the "&& !interp.breakfound)" into every rule.  That way, the
> > parser would not execute any interpreter functions until the breakfound
> > condition was re-set.
> >
> > I would also need to save the break condition prior to entering
> break-able
> > constructs (loops and functions are the only ones I can think of) so
> that I
> > could restore it after the end of the construct.  That way the break
> > statement only exits the loop it executes in.
> >
> > e.g. in class Interpreter:
> >
> > public whileloop(Token expr_start, Token slist_start) {
> >   boolean saved_breakfound = this.breakfound;
> >     ...Handle the loop stuff here...
> >   this.breakfound = saved_breakfound;
> > }
> >
> > Does this make sense?  Is there a better way that I'm missing?  I imagine
> > the same idea could be used to implement a "return(value)" statement in a
> > function as well.  The only difference would be that a return statement
> > would exit the function no matter how deep it was into loops.  For that,
> > I'd need some kind of tri-state indicator, with values like 0 =>
> continue,
> > 1=> break out of loop, 2 => return from function.
> >
> > Any thoughts?
> >
> > Thanks!
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
>
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From mandy at think-a-lot.de  Wed Oct 24 04:15:48 2012
From: mandy at think-a-lot.de (mandy at think-a-lot.de)
Date: Wed, 24 Oct 2012 13:15:48 +0200
Subject: [antlr-interest] Lexing almost arbitrary input
In-Reply-To: <8470240427787583826@unknownmsgid>
References: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
	<8470240427787583826@unknownmsgid>
Message-ID: <20121024131548.Horde.hB2fVdjz9kRQh83kftXXurA@webmail.df.eu>

Hi,

thanks Jim and George for your answers.

George, interesting ideas. Unfortunately they're not applicable in my  
situation. But very interesting. I'll keep it in mind for possible  
future projects.
Jim, the language is not really a design of my own. I will get the  
input from a SQL-dump of the database that is the backend of this  
online dictionary: http://www.pledarigrond.ch/simpel.php
The content of the database will be converted into the structure I'm  
describing with the grammar. The requirement for the grammar is to be  
as simple as possible. Later, speakers of the languages involved, who  
have no programming background, are supposed to submit new entries via  
an interactive editor. This is the reason that we don't want  
syntactical overhead with 'strange' symbols.
I also know that this sounds like a very strange task for ANTLR, but  
my colleagues and boss say we need the fancy error reporting and AST  
creation stuff...

Jim, your suggestion is simple and works. But I really need to include  
the grammatical attributes that belong to the second phrase, like in

phrase1 : phrase2 [attribute]

So I changed your suggestion to

dictEntry:
	lemma=PHRASE SEP translation=PHRASE grammarAtts NEWLINE;

grammarAtts:
   	'[' grammarAttList? ']' ;

PHRASE:	(~(':'|'['))+ ;
SEP: ':' ;

where grammarAttList finally contains fixed literals as 'f', 'm' etc.  
So an entry ends in ]\r\n. I now get the following error:

line 1:17 mismatched input 'm]\r\n' expecting ']'

Obviously, ']' is there, so where's the problem?

Thanks again in advance,
Mandy

Zitat von Jim Idle <jimi at temporal-wave.com>:

> From your description here, this language cannot be parsed. Is a
> design of your own, in which case it can be changed, or something you
> are stuck with. You have to have something to disambuguate such as
>
> def : Phrase SEP Phrase Semi ;
>
> Semi : ';' ;
> Sep : '::' ;
> Phrase : (~(':'|';'))+ ;
>
> But then the problem is so simple that there is no point using a
> grammar. I would just hand code this as a simple character consuming
> loop.
>
> Hope that helps :)
>
> Jim
>
> On Oct 22, 2012, at 19:00, "mandy at think-a-lot.de"  
> <mandy at think-a-lot.de> wrote:
>
>> Dear list,
>>
>> in a project we want to use ANTLR to parse lexicon/dictionary entries.
>> I'm the one who has the honour of writing the grammar(s) for that.
>> I'm currently stuck with the lexer part.
>> Here's the problem:
>>
>> Since we talk about dictionary entries, the structure is quite simple:
>> You have a word in language1 (lemma), a translation in language2 and
>> some grammatical attributes. The latter is somewhat fixed, having a
>> limited set of values like 'm', 'f', 'pl' and so on.
>> The problem is the former. The lemma (and translation) could be a
>> simple word like "dog", but it can also be several words with spaces
>> (phrases) like in "come to be known"; furthermore it could contain
>> non-letter characters like '-' ("push-up"), '(' ("Rheinl?nder(in)"),
>> even numbers, slashes, percent signs etc. may be part of the lemma
>> (e.g. "100% (bio-)degradable").
>>
>> So there are just too many possibilities - I did not come too far with
>> the 'a'..'z' approach (even more because we are talking about
>> languages with umlaut and accents). And I really did not want to list
>> all possible combinations, think it would be a pain...
>>
>> I thought about something like "consume just everything until some
>> special character (that will never be part of the lemma)". First rules
>> I tried were
>>
>> LEMMA: (options {greedy=false;}: .)+ ~COLON;
>> TRANSLATION: (options {greedy=false;}: .)+ ~(CARRIAGERETURN|LINEFEED);
>>
>> but this didn't seem to work ("required (...)+ loop did not match
>> anything at character ..." for each input character). So I used just
>>
>> LEMMA: (~COLON)+;
>> TRANSLATION: (~(CARRIAGERETURN|LINEFEED))+;
>>
>> but now I don't see any output - neither from my code actions nor the
>> AST. So I'm not sure if it even works; plus I think this is not the
>> very best way to handle the problem.
>>
>> Any ideas?
>>
>> Mandy
>>
>> P.S.: The structure for the dictionary entry has to be as simple as this:
>>
>> dictionary:
>>    dictEntry*  EOF
>> ;
>>
>> dictEntry
>> :
>>    LEMMA
>>
>>    COLON
>>
>>    TRANSLATION
>>
>>    grammarAtts //which is '[' list_of_atrributes ']'
>>
>>    NEWLINE //my instructor wants to let an entry end with newline, not
>> sth like ';' ...
>> ;
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:  
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:  
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From lgcraymer at yahoo.com  Wed Oct 24 07:59:29 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 24 Oct 2012 07:59:29 -0700 (PDT)
Subject: [antlr-interest] Lexing almost arbitrary input
In-Reply-To: <20121024131548.Horde.hB2fVdjz9kRQh83kftXXurA@webmail.df.eu>
References: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
	<8470240427787583826@unknownmsgid>
	<20121024131548.Horde.hB2fVdjz9kRQh83kftXXurA@webmail.df.eu>
Message-ID: <1351090769.84850.YahooMailNeo@web142301.mail.bf1.yahoo.com>

Arbitrary text is very hard, but structured text--HTML or RTF with title fields preceding text--is quite feasible, although the grammars get a bit messy (you have to have rules that parse the structure of interest, and have other very similar rules to parse "random" phrases that have similar structure but should be ignored). ?Getting users to enter text with a word processor with a specific format is easy, and any decent word processor allows you to define forms for data entry. ?I took this approach for parsing the documentation for the Cassini spacecraft command language a few years ago, and it worked well although the grammar necessarily was riddled with syntactic predicates.

From a user perspective, the data entry "grammar" can be made as simple as possible, but the actual grammar will not be.

--Loring




>________________________________
> From: "mandy at think-a-lot.de" <mandy at think-a-lot.de>
>To: antlr-interest <antlr-interest at antlr.org> 
>Sent: Wednesday, October 24, 2012 4:15 AM
>Subject: Re: [antlr-interest] Lexing almost arbitrary input
> 
>Hi,
>
>thanks Jim and George for your answers.
>
>George, interesting ideas. Unfortunately they're not applicable in my? 
>situation. But very interesting. I'll keep it in mind for possible? 
>future projects.
>Jim, the language is not really a design of my own. I will get the? 
>input from a SQL-dump of the database that is the backend of this? 
>online dictionary: http://www.pledarigrond.ch/simpel.php
>The content of the database will be converted into the structure I'm? 
>describing with the grammar. The requirement for the grammar is to be? 
>as simple as possible. Later, speakers of the languages involved, who? 
>have no programming background, are supposed to submit new entries via? 
>an interactive editor. This is the reason that we don't want? 
>syntactical overhead with 'strange' symbols.
>I also know that this sounds like a very strange task for ANTLR, but? 
>my colleagues and boss say we need the fancy error reporting and AST? 
>creation stuff...
>
>Jim, your suggestion is simple and works. But I really need to include? 
>the grammatical attributes that belong to the second phrase, like in
>
>phrase1 : phrase2 [attribute]
>
>So I changed your suggestion to
>
>dictEntry:
>??? lemma=PHRASE SEP translation=PHRASE grammarAtts NEWLINE;
>
>grammarAtts:
>?  ??? '[' grammarAttList? ']' ;
>
>PHRASE:??? (~(':'|'['))+ ;
>SEP: ':' ;
>
>where grammarAttList finally contains fixed literals as 'f', 'm' etc.? 
>So an entry ends in ]\r\n. I now get the following error:
>
>line 1:17 mismatched input 'm]\r\n' expecting ']'
>
>Obviously, ']' is there, so where's the problem?
>
>Thanks again in advance,
>Mandy
>
>Zitat von Jim Idle <jimi at temporal-wave.com>:
>
>> From your description here, this language cannot be parsed. Is a
>> design of your own, in which case it can be changed, or something you
>> are stuck with. You have to have something to disambuguate such as
>>
>> def : Phrase SEP Phrase Semi ;
>>
>> Semi : ';' ;
>> Sep : '::' ;
>> Phrase : (~(':'|';'))+ ;
>>
>> But then the problem is so simple that there is no point using a
>> grammar. I would just hand code this as a simple character consuming
>> loop.
>>
>> Hope that helps :)
>>
>> Jim
>>
>> On Oct 22, 2012, at 19:00, "mandy at think-a-lot.de"? 
>> <mandy at think-a-lot.de> wrote:
>>
>>> Dear list,
>>>
>>> in a project we want to use ANTLR to parse lexicon/dictionary entries.
>>> I'm the one who has the honour of writing the grammar(s) for that.
>>> I'm currently stuck with the lexer part.
>>> Here's the problem:
>>>
>>> Since we talk about dictionary entries, the structure is quite simple:
>>> You have a word in language1 (lemma), a translation in language2 and
>>> some grammatical attributes. The latter is somewhat fixed, having a
>>> limited set of values like 'm', 'f', 'pl' and so on.
>>> The problem is the former. The lemma (and translation) could be a
>>> simple word like "dog", but it can also be several words with spaces
>>> (phrases) like in "come to be known"; furthermore it could contain
>>> non-letter characters like '-' ("push-up"), '(' ("Rheinl?nder(in)"),
>>> even numbers, slashes, percent signs etc. may be part of the lemma
>>> (e.g. "100% (bio-)degradable").
>>>
>>> So there are just too many possibilities - I did not come too far with
>>> the 'a'..'z' approach (even more because we are talking about
>>> languages with umlaut and accents). And I really did not want to list
>>> all possible combinations, think it would be a pain...
>>>
>>> I thought about something like "consume just everything until some
>>> special character (that will never be part of the lemma)". First rules
>>> I tried were
>>>
>>> LEMMA: (options {greedy=false;}: .)+ ~COLON;
>>> TRANSLATION: (options {greedy=false;}: .)+ ~(CARRIAGERETURN|LINEFEED);
>>>
>>> but this didn't seem to work ("required (...)+ loop did not match
>>> anything at character ..." for each input character). So I used just
>>>
>>> LEMMA: (~COLON)+;
>>> TRANSLATION: (~(CARRIAGERETURN|LINEFEED))+;
>>>
>>> but now I don't see any output - neither from my code actions nor the
>>> AST. So I'm not sure if it even works; plus I think this is not the
>>> very best way to handle the problem.
>>>
>>> Any ideas?
>>>
>>> Mandy
>>>
>>> P.S.: The structure for the dictionary entry has to be as simple as this:
>>>
>>> dictionary:
>>>? ? dictEntry*? EOF
>>> ;
>>>
>>> dictEntry
>>> :
>>>? ? LEMMA
>>>
>>>? ? COLON
>>>
>>>? ? TRANSLATION
>>>
>>>? ? grammarAtts //which is '[' list_of_atrributes ']'
>>>
>>>? ? NEWLINE //my instructor wants to let an entry end with newline, not
>>> sth like ';' ...
>>> ;
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:? 
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:? 
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From apalala at gmail.com  Wed Oct 24 10:11:40 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Wed, 24 Oct 2012 12:41:40 -0430
Subject: [antlr-interest] Lexing almost arbitrary input
In-Reply-To: <20121024131548.Horde.hB2fVdjz9kRQh83kftXXurA@webmail.df.eu>
References: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
	<8470240427787583826@unknownmsgid>
	<20121024131548.Horde.hB2fVdjz9kRQh83kftXXurA@webmail.df.eu>
Message-ID: <CAN1YFWuB4t_VdOHsBiNFJqGACZ_9hTMgSXcgwOven7v4Ec9dmQ@mail.gmail.com>

Mandy,

I also know that this sounds like a very strange task for ANTLR, but
> my colleagues and boss say we need the fancy error reporting and AST
> creation stuff...
>

That is not what characterizes ANTLR, and is something easy to have with
other approaches.

Your source language is not even recursive, so the ASTs that ANTLR would
produce for it are dead simple, a list of tuples perhaps.

Despite the power of ANTLR, there exist languages that can be described in
plain English or in mathematical notation but that an ANTLR grammar cannot
parse. Ill defined, or very ambiguous languages are among them.

My suggestion is that you hand-write a top down parser for your small
language. It will not only work, but it will become a formal definition for
the language, which is something I think you're missing so far.

Cheers,

-- 
Juancarlo *A?ez*

From impulze at impulze.org  Thu Oct 25 03:27:16 2012
From: impulze at impulze.org (Daniel Mierswa)
Date: Thu, 25 Oct 2012 12:27:16 +0200
Subject: [antlr-interest] custom error reporting
Message-ID: <50891404.4010404@impulze.org>

Hi there,

I was searching my way through the custom error reporting facilities of ANTLR,
especially by overriding nextToken, recoverFromMismatchedToken and displayRecognitionError
but I cannot quite figure out how to achieve the following behaviour.

I have a lexer grammar that consists of the following IDENTIFIER token:

IDENTIFIER : ASCII_LETTER (ASCII_LETTER|'_'|DEC_DIGIT)*;
fragment DEC_DIGIT : '0'..'9';
fragment ASCII_LETTER : 'a'..'z'|'A'..'Z';

If the lexed stream now contains something like "identifi?r" the string representation
of the tokens are:

token: [Index: 0 (Start: 167592512-Stop: 167592519) ='identifi', type<13> Line: 1 LinePos:-1]
token: [Index: 1 (Start: 167592523-Stop: 167592523) ='r', type<13> Line: 1 LinePos:8]

Also the following error occurs during lexing:
[...] : lexer error 3 :
	1:1: Tokens : ( OCT_LITERAL | HEX_LITERAL | DEC_LITERAL | FLOAT_LITERAL | STRING_LITERAL | IDENTIFIER | COMMENT | NEWLINE | WHITESPACE ); at offset 8, near '?' :
	?r

I want to achieve a more detailed error message like "invalid identifier 'identifi?r' due to failure at lexing '?'" or
something like that. Is this even possible and if so, what would I have to look at?

Thanks a lot in advance.

-- 
Mierswa, Daniel

If you still don't like it, that's ok: that's why I'm boss. I simply know better than you do.
               --- Linus Torvalds, comp.os.linux.advocacy, 1996/07/22

From pascal_parrot at hotmail.com  Thu Oct 25 13:45:05 2012
From: pascal_parrot at hotmail.com (Pascal Parrot)
Date: Thu, 25 Oct 2012 20:45:05 +0000
Subject: [antlr-interest] constant string too long
Message-ID: <SNT123-W5450E2BFF9F81E5ADA55DD967F0@phx.gbl>



Hello,
I have a grammar with many keywords (see attached for a made 
up equivalent example). When compiling it, I get the following error:
"exampleLexer.java:16377: constant string too long", which points to the "_serializedATN" string.

There are a few messages describing the same(?) issue already: 
http://www.antlr.org/pipermail/antlr-interest/2012-August/045042.html
http://www.antlr.org/pipermail/antlr-interest/2012-January/043770.html
I am using "ANTLR Parser Generator  Version 4.0b2" and the issue still exists.

Is there a plan to address the issue in  a future version?

Thanks,
Pascal 		 	   		  
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.g4
Type: application/octet-stream
Size: 75015 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20121025/b12be5bc/attachment.obj 

From sam at tunnelvisionlabs.com  Thu Oct 25 15:24:24 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 25 Oct 2012 22:24:24 +0000
Subject: [antlr-interest] constant string too long
In-Reply-To: <SNT123-W5450E2BFF9F81E5ADA55DD967F0@phx.gbl>
References: <SNT123-W5450E2BFF9F81E5ADA55DD967F0@phx.gbl>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0592C45C@CH1PRD0811MB430.namprd08.prod.outlook.com>

My eyes are burning...

I entered a bug for this issue: https://github.com/antlr/antlr4/issues/76

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
Sent: Thursday, October 25, 2012 3:45 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] constant string too long



Hello,
I have a grammar with many keywords (see attached for a made up equivalent example). When compiling it, I get the following error:
"exampleLexer.java:16377: constant string too long", which points to the "_serializedATN" string.

There are a few messages describing the same(?) issue already: 
http://www.antlr.org/pipermail/antlr-interest/2012-August/045042.html
http://www.antlr.org/pipermail/antlr-interest/2012-January/043770.html
I am using "ANTLR Parser Generator  Version 4.0b2" and the issue still exists.

Is there a plan to address the issue in  a future version?

Thanks,
Pascal 		 	   		  


From huhlig at uhlisys.com  Thu Oct 25 20:52:03 2012
From: huhlig at uhlisys.com (Hans Uhlig)
Date: Thu, 25 Oct 2012 23:52:03 -0400
Subject: [antlr-interest] Tool inputDirectory
Message-ID: <CAD63Ac6tM1qAjqF_DUYKeqdVhsu_2cAi5wMipyXZsjZZTgXU-w@mail.gmail.com>

I've been working on updating the Maven Plugin to get it working with the
current snapshot and am noticing that the root working directory variable
(Tool t).inputDirectory seems to no longer exists with seemingly no
replacement. How do you set the working directory for relative paths?

From cd.barth at t-online.de  Fri Oct 26 03:50:02 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Fri, 26 Oct 2012 12:50:02 +0200
Subject: [antlr-interest] ANTLR4 options ignored in imported grammar
Message-ID: <001e01cdb367$a6fc2c00$f4f48400$@barth@t-online.de>

ANTLR4 (v 4.0b2) works fine when I'm using separated lexer and parser
grammars 

 

lexer grammar CommonLexerRules;;

options {   superClass=LexerExtension; } .

 

parser grammar PLiParser;

options {   superClass=ParserExtension; }.

 

and generates accurate the lines

.public class PLiLexer extends LexerExtension {.

.public class PLiParser extends ParserExtension {.

 

But when I'm using the new cool feature for importing grammars like

 

grammar CombindedPLiGrammar;

import PLiLexer;

.

 

I get the warning : options ignored in imported grammar

 

The generated java file contains

.public class PLiLexer extends Lexer {.      instead of : extends
LexerExtension

 

My questions: 

Is there any way to set an LexerExtension in an imported grammar?

Any idea to fix Java.stg ?

 

Claus-Dieter


From sam at tunnelvisionlabs.com  Fri Oct 26 06:03:40 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Fri, 26 Oct 2012 13:03:40 +0000
Subject: [antlr-interest] Tool inputDirectory
In-Reply-To: <CAD63Ac6tM1qAjqF_DUYKeqdVhsu_2cAi5wMipyXZsjZZTgXU-w@mail.gmail.com>
References: <CAD63Ac6tM1qAjqF_DUYKeqdVhsu_2cAi5wMipyXZsjZZTgXU-w@mail.gmail.com>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0592D501@CH1PRD0811MB430.namprd08.prod.outlook.com>

Are you working on ANTLR 3 or ANTLR 4?

ANTLR 4:
https://github.com/antlr/antlr4/blob/master/tool/src/org/antlr/v4/Tool.java#L114

ANTLR 3:
https://github.com/antlr/antlr3/blob/master/tool/src/main/java/org/antlr/Tool.java#L823

Also, Maven plugins already exist for both of these versions. I use the V3 Maven plugin extensively on a daily basis. Have you run into a problem with the current version?

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Hans Uhlig
Sent: Thursday, October 25, 2012 10:52 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Tool inputDirectory

I've been working on updating the Maven Plugin to get it working with the current snapshot and am noticing that the root working directory variable (Tool t).inputDirectory seems to no longer exists with seemingly no replacement. How do you set the working directory for relative paths?

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From parrt at cs.usfca.edu  Fri Oct 26 10:20:01 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 26 Oct 2012 10:20:01 -0700
Subject: [antlr-interest] ANTLR4 options ignored in imported grammar
In-Reply-To: <001e01cdb367$a6fc2c00$f4f48400$@barth@t-online.de>
References: <001e01cdb367$a6fc2c00$f4f48400$@barth@t-online.de>
Message-ID: <1145D147-5C28-490C-A3DD-B4D83E852B11@cs.usfca.edu>

hm? good question. options don't generally make sense to import. that one is more of an action.

i don't see a good solution here.  why import anyway if already separate?  are you combining multiple lexers?

Ter
On Oct 26, 2012, at 3:50 AM, <cd.barth at t-online.de> <cd.barth at t-online.de> wrote:

> ANTLR4 (v 4.0b2) works fine when I'm using separated lexer and parser
> grammars 
> 
> 
> 
> lexer grammar CommonLexerRules;;
> 
> options {   superClass=LexerExtension; } .
> 
> 
> 
> parser grammar PLiParser;
> 
> options {   superClass=ParserExtension; }.
> 
> 
> 
> and generates accurate the lines
> 
> .public class PLiLexer extends LexerExtension {.
> 
> .public class PLiParser extends ParserExtension {.
> 
> 
> 
> But when I'm using the new cool feature for importing grammars like
> 
> 
> 
> grammar CombindedPLiGrammar;
> 
> import PLiLexer;
> 
> .
> 
> 
> 
> I get the warning : options ignored in imported grammar
> 
> 
> 
> The generated java file contains
> 
> .public class PLiLexer extends Lexer {.      instead of : extends
> LexerExtension
> 
> 
> 
> My questions: 
> 
> Is there any way to set an LexerExtension in an imported grammar?
> 
> Any idea to fix Java.stg ?
> 
> 
> 
> Claus-Dieter
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From cd.barth at t-online.de  Fri Oct 26 15:57:25 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Sat, 27 Oct 2012 00:57:25 +0200
Subject: [antlr-interest] ANTLR4 options ignored in imported grammar
Message-ID: <000001cdb3cd$449cd990$cdd68cb0$@barth@t-online.de>

(this time with cc - sorry) 

Hi Ter
indeed i'm using some actions in my LexerExtension for different lexer
grammars (not combining multiple lexers at moment)
sample:
public boolean isCharInRange(final int _StartPos, final int _EndPos) {
		int _CharPos = getCharPositionInLine();
		if ((_CharPos >= _StartPos) && (_CharPos <= _EndPos)) {
return true; }
		return false;
	}
Therefore some synpred bulk is hidden and the grammar is easier to read.
I see that alternative @lexer::members is a good place for actions and I
also can call actions from imported utility classes there.
But the solution with LexerExtension looks more fashionable for me.  
  
I hoped that it would be possible to define options @lexer::options and
@parser::options in the matter of @members and @headers by fixing Java.stg.
  
Your next question: 
   why import anyway if already separate mmh.. yes this seems the better way
for me.

Claus-Dieter



-----Urspr?ngliche Nachricht-----
Von: Terence Parr [mailto:parrt at cs.usfca.edu]
Gesendet: Freitag, 26. Oktober 2012 19:20
An: <cd.barth at t-online.de>
Cc: antlr-interest at antlr.org
Betreff: Re: [antlr-interest] ANTLR4 options ignored in imported grammar

hm
 good question. options don't generally make sense to import. that one is
more of an action.

i don't see a good solution here.  why import anyway if already separate?
are you combining multiple lexers?

Ter
On Oct 26, 2012, at 3:50 AM, <cd.barth at t-online.de> <cd.barth at t-online.de>
wrote:

> ANTLR4 (v 4.0b2) works fine when I'm using separated lexer and parser 
> grammars
> 
> 
> 
> lexer grammar CommonLexerRules;;
> 
> options {   superClass=LexerExtension; } .
> 
> 
> 
> parser grammar PLiParser;
> 
> options {   superClass=ParserExtension; }.
> 
> 
> 
> and generates accurate the lines
> 
> .public class PLiLexer extends LexerExtension {.
> 
> .public class PLiParser extends ParserExtension {.
> 
> 
> 
> But when I'm using the new cool feature for importing grammars like
> 
> 
> 
> grammar CombindedPLiGrammar;
> 
> import PLiLexer;
> 
> .
> 
> 
> 
> I get the warning : options ignored in imported grammar
> 
> 
> 
> The generated java file contains
> 
> .public class PLiLexer extends Lexer {.      instead of : extends
> LexerExtension
> 
> 
> 
> My questions: 
> 
> Is there any way to set an LexerExtension in an imported grammar?
> 
> Any idea to fix Java.stg ?
> 
> 
> 
> Claus-Dieter
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From huhlig at uhlisys.com  Fri Oct 26 21:10:59 2012
From: huhlig at uhlisys.com (Hans W. Uhlig)
Date: Fri, 26 Oct 2012 21:10:59 -0700
Subject: [antlr-interest] Tool inputDirectory
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0592D501@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <CAD63Ac6tM1qAjqF_DUYKeqdVhsu_2cAi5wMipyXZsjZZTgXU-w@mail.gmail.com>
	<8802E2F086DC9648BD0585D82AC6377B0592D501@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <CAFVNWLOJL9Q-2pQPHGg=M=e434UTq9tBLTD6r7NgPFXfByQvtw@mail.gmail.com>

I had pulled the git repo for the version checked into antlr4 and noticed
it didnt compile cleanly. The recent post on this list suggested it wouldnt
be finished until after GA of v4. I figured I would see about getting it
working. I noticed that the Version of Tool in github had inputDirectory
but the binary class copy in the recent 4.0b2 does not seem to have this
field.

On Fri, Oct 26, 2012 at 6:03 AM, Sam Harwell <sam at tunnelvisionlabs.com>wrote:

> ANTLR

From apalala at gmail.com  Sat Oct 27 15:29:29 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 27 Oct 2012 17:59:29 -0430
Subject: [antlr-interest] Preserve source code comments
In-Reply-To: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
References: <CAN1YFWv5ftW9wXRyuwXOvsLdPosiH6mojGfZ9a9yE-EC6TsicA@mail.gmail.com>
Message-ID: <CAN1YFWtd=UCbMeDJJ8Mpd7xs26_gseWsy27YOfa8zPbgJmVsKA@mail.gmail.com>

This is what I did, in Python, because Python allowed me to:

def extract_comments(tokens): // these come from parser.input.tokens
    ''' Extract comments from a token list by looking at their channel.
    '''
    def _extract():
        for t in tokens:
            if t.getChannel() in (COMMENT_CHANNEL, EOL_COMMENT_CHANNEL):
                comment_text = t.getText()[2:].rstrip()
                if comment_text:
                    yield (t.getLine(), comment_text)
    return list(_extract())

def assign_comments(tree, comments):
    ''' Match comments to tree nodes. *tree* is an AST as returned by
        ANTLR, and *comments* is a list of tuples (line, comment).
    '''
    # Match tree nodes to all comments above it that
    # haven't yet been matched

    # flatten a tree, depth-first
    def flatten(t):
        result = [(t.getLine(), t)]
        if tree.children:
            for c in t.children:
                result += flatten(c)
        return result

    nodes = flatten(tree)
    # sort comments, just in case
    comments = list(sorted(comments))
    cindex = 0
    for lineno, node in nodes:
        node.comments = []
        while cindex < len(comments) and comments[cindex][0] <= lineno:
            node.comments.append(comments[cindex][1])
            cindex += 1


I only had to set the right channels in the lexer grammar. No new tree
adapters, token, or tree types (I guess it's one of the advantages of
working with a language with duck-typing).

I used this approach because the heuristics I saw and thought about did not
require that comments be associated with AST nodes during parsing, and
doing it during parsing seemed quite complicated.

In fact, some quite complex heuristics for associating comments to nodes
can be implemented more easily with this simple post-processing approach.
The heuristic above is that comments above or on a line with tokens belong
to the first token in the line. It could be improved to honor EOL comments,
but I'm using EOL comments for something else.

-- Juanca

On Thu, Oct 18, 2012 at 12:37 PM, Juancarlo A?ez <apalala at gmail.com> wrote:

> I know this question has been asked before, but the threads about it are
> old and inconclusive.
>
> I need to associate source code comments with the nearest parsed token.
> Everything else I need to do I can do post-parsing.
>
> Could I get away with using a custom token type that grabs the nearest
> comment on its constructor?
>
> All I need is a basic recipe.
>
> TIA,
>
> --
> Juancarlo *A?ez*
>



-- 
Juancarlo *A?ez*

From forumer at smartmobili.com  Sun Oct 28 01:26:52 2012
From: forumer at smartmobili.com (forumer at smartmobili.com)
Date: Sun, 28 Oct 2012 09:26:52 +0100
Subject: [antlr-interest] Disambiguate following rules
Message-ID: <f5dba0c2d0e31ccd400461bec2bfffd0@smartmobili.com>

Hi,

I have a grammar with the following rules and that is using backtrack 
option. Now when I remove backtrack
I have a problem with the var_decl rule :

Decision can match input such as "IDENTIFIER" using multiple 
alternatives: 1, 2


Any idea about how to fix this ?



variable_declaration
	: VAR variable_declaration_list
	|  empty_statement
	;

variable_declaration_list
	: var_decl ( ',' var_decl )*
	;


var_decl
	: identifier ( '=' expression )?
         | expression
	;

/***EXPR*************************/
expression
     : assignment_expression (',' assignment_expression )*
     ;

argument_expression_list
     : assignment_expression ( ',' assignment_expression )*
     ;

assignment_expression
     : conditional_expression ( assignment_operator 
assignment_expression )?
     ;

assignment_operator
     : '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | 
'^=' | '|=' | '>>>='
     ;

constant_expression
     : conditional_expression
     ;

conditional_expression
     //: logical_or_expression  ( '?' logical_or_expression ':' 
logical_or_expression )?
     : logical_or_expression  ( '?' expression ':' expression )?
     ;

logical_or_expression
     : logical_and_expression ('||' logical_and_expression )*
     ;

logical_and_expression
     : inclusive_or_expression ('&&' inclusive_or_expression )*
     ;

inclusive_or_expression
     : exclusive_or_expression ('|' exclusive_or_expression )*
     ;

exclusive_or_expression
     : and_expression ('^' and_expression)* ;

and_expression
     : equality_expression ('&' equality_expression)*
     ;

equality_expression
     /* === and !== for javascript */
     : relational_expression (('!=' | '==' | '===' | '!==' ) 
relational_expression)*
     ;

relational_expression
     /* instanceof and in are for javascript */
     : shift_expression ( RELATION_OPERATOR shift_expression)*
     ;

RELATION_OPERATOR
     :  '<' | '>' | '<=' | '>=' | 'in' | 'instanceof'    // Don't 
tokenize these!
     ;

shift_expression
     : additive_expression (('<<' | '>>') additive_expression)*
     ;

additive_expression
     : multiplicative_expression (('+' | '-') 
multiplicative_expression)*
     ;

multiplicative_expression
     : unary_expression ( ('*' | REGEX_OR_DIVIDE | '%') unary_expression 
)*    /* no cast expression for objj */
     ;

unary_expression
     : postfix_expression
     | '++' unary_expression
     | '--' unary_expression
     | unary_operator unary_expression   /* no cast expression for objj 
*/
     ;

unary_operator
//    : '&' | '*' | '+' | '-' | '~' | '!'
     : '+' | '-' | '~' | '!'
     ;

postfix_expression
     : primary_expression
         ( '[' ']'
         | '[' expression ']'
         | '(' ')'
         | '(' argument_expression_list ')'
         | '.' identifier
         | '++'
         | '--'
         )*
     ;

primary_expression
     : TRUE | FALSE
     | 'defined' '(' expression ')'  /*  for prepocessing */
     | TYPEOF identifier                 /* javascript */
     | TYPEOF '(' identifier ')'         /* javascript */
     | '[' expression? ']'     /* objj array? DIES */
     | '[' expression ',' expression ( ',' expression )* ']'   /* objj 
array? DIES */
	| message_expression        /*   '[' receiver message_selector ']'  */
	| selector_expression
	| protocol_expression
	| encode_expression
     | '{' STRING_LITERAL ':' primary_expression ( ','  STRING_LITERAL 
':' primary_expression )* '}'  /* js obj array? */
     | '{' '}'                                                 /* js 
empty obj array? */
	| constant
     | identifier
     | VAR identifier
	| '(' expression ')'
     ;


identifier
     : a=IDENTIFIER { /*System.out.println ($a.text);*/ }
     ;

IDENTIFIER
	: ('_'|'A'..'Z'|'a'..'z')('_'|'A'..'Z'|'a'..'z'|'0'..'9')*
	;

From Jost.Baron at gmx.de  Sun Oct 28 03:21:29 2012
From: Jost.Baron at gmx.de (Jost Baron)
Date: Sun, 28 Oct 2012 11:21:29 +0100
Subject: [antlr-interest] Disambiguate following rules
In-Reply-To: <f5dba0c2d0e31ccd400461bec2bfffd0@smartmobili.com>
References: <f5dba0c2d0e31ccd400461bec2bfffd0@smartmobili.com>
Message-ID: <508D0729.30504@gmx.de>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi!

The problem is that an expression might be an identifier, oder maybe
an assignment. So both possibilities may match the same input.

To resolve that, you would usually use left-factoring, but that seems
impractical here.

Another solution might be to remove the second alternative from the
var_decl rule. Why would you have an expression as variable name? I
don't know your language and reasons for that rule, of course.

Greetings,
Jost

On 10/28/2012 09:26 AM, forumer at smartmobili.com wrote:
> Hi,
> 
> I have a grammar with the following rules and that is using 
> backtrack option. Now when I remove backtrack I have a problem
> with the var_decl rule :
> 
> Decision can match input such as "IDENTIFIER" using multiple 
> alternatives: 1, 2
> 
> 
> Any idea about how to fix this ?
> 
> 
> 
> variable_declaration : VAR variable_declaration_list | 
> empty_statement ;
> 
> variable_declaration_list : var_decl ( ',' var_decl )* ;
> 
> 
> var_decl : identifier ( '=' expression )? | expression ;
> 
> /***EXPR*************************/ expression : 
> assignment_expression (',' assignment_expression )* ;
> 
> argument_expression_list : assignment_expression ( ',' 
> assignment_expression )* ;
> 
> assignment_expression : conditional_expression ( 
> assignment_operator assignment_expression )? ;
> 
> assignment_operator : '=' | '*=' | '/=' | '%=' | '+=' | '-=' | 
> '<<=' | '>>=' | '&=' | '^=' | '|=' | '>>>=' ;
> 
> constant_expression : conditional_expression ;
> 
> conditional_expression //: logical_or_expression  ( '?' 
> logical_or_expression ':' logical_or_expression )? : 
> logical_or_expression  ( '?' expression ':' expression )? ;
> 
> logical_or_expression : logical_and_expression ('||' 
> logical_and_expression )* ;
> 
> logical_and_expression : inclusive_or_expression ('&&' 
> inclusive_or_expression )* ;
> 
> inclusive_or_expression : exclusive_or_expression ('|' 
> exclusive_or_expression )* ;
> 
> exclusive_or_expression : and_expression ('^' and_expression)* ;
> 
> and_expression : equality_expression ('&' equality_expression)* ;
> 
> equality_expression /* === and !== for javascript */ : 
> relational_expression (('!=' | '==' | '===' | '!==' ) 
> relational_expression)* ;
> 
> relational_expression /* instanceof and in are for javascript */ : 
> shift_expression ( RELATION_OPERATOR shift_expression)* ;
> 
> RELATION_OPERATOR :  '<' | '>' | '<=' | '>=' | 'in' | 'instanceof' 
> // Don't tokenize these! ;
> 
> shift_expression : additive_expression (('<<' | '>>') 
> additive_expression)* ;
> 
> additive_expression : multiplicative_expression (('+' | '-') 
> multiplicative_expression)* ;
> 
> multiplicative_expression : unary_expression ( ('*' | 
> REGEX_OR_DIVIDE | '%') unary_expression )*    /* no cast
> expression for objj */ ;
> 
> unary_expression : postfix_expression | '++' unary_expression | 
> '--' unary_expression | unary_operator unary_expression   /* no 
> cast expression for objj */ ;
> 
> unary_operator //    : '&' | '*' | '+' | '-' | '~' | '!' : '+' | 
> '-' | '~' | '!' ;
> 
> postfix_expression : primary_expression ( '[' ']' | '[' expression 
> ']' | '(' ')' | '(' argument_expression_list ')' | '.' identifier
> | '++' | '--' )* ;
> 
> primary_expression : TRUE | FALSE | 'defined' '(' expression ')' /*
> for prepocessing */ | TYPEOF identifier                 /* 
> javascript */ | TYPEOF '(' identifier ')'         /* javascript */
>  | '[' expression? ']'     /* objj array? DIES */ | '[' expression 
> ',' expression ( ',' expression )* ']'   /* objj array? DIES */ | 
> message_expression        /*   '[' receiver message_selector ']' */
> | selector_expression | protocol_expression | encode_expression |
> '{' STRING_LITERAL ':' primary_expression ( ','  STRING_LITERAL ':'
> primary_expression )* '}'  /* js obj array? */ | '{' '}' /* js
> empty obj array? */ | constant | identifier | VAR identifier | '('
> expression ')' ;
> 
> 
> identifier : a=IDENTIFIER { /*System.out.println ($a.text);*/ } ;
> 
> IDENTIFIER : 
> ('_'|'A'..'Z'|'a'..'z')('_'|'A'..'Z'|'a'..'z'|'0'..'9')* ;
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest 
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://www.enigmail.net/

iQIcBAEBAgAGBQJQjQclAAoJEG6HPMAgWtVz8RoQAMxEGgo6CRYtzgF3ui1jMFLX
1N53lWwW+npzcRgUjgi11HhQOAnmCz6dTRGbHuOHGBFb9hOQZlQSkHlg3WhIjT4e
jAeVljmiyo41XRmNWdrsqyphog8uBygbtU+v+VX4MqXjaCkwOpHeUKv1EkDpW5xL
iZBsYhLKAkAY4et1zuJHByPgyWeORkS8FwSFmMjzh3jYDS+kHL9CM0qker1dlpUO
lb1kHQoQZ2Ze++3/UoMMrD3/ZW1sfQTkmy6msPnMhKOZyLFpV2zM3oU6ZibOTDP2
1kf5alKXbVWPkCGxlHqPGWGLe0oehRKDjDOVyVySRZZUpCg/4VJe3zgK8fxGyLyQ
kRkXxJ5nQi6vq5hiJcekgIbU/hHEF0LhoBkcGZjHlfMKWgpaUM8mWilYGmwAPA7x
0ichrk5wyIZQEsdAWnYuQUzs2dR/41N2Pg//5rW05DApI26SoZipP/FmIBmHLGGd
rn3w2da39kTt1kifqAUvhbMC+f3HFhuoh98VV3s7Z5uux24ba4+v9KUWJEu2wH98
jlbXkTUxgJU9VYKlw/M7DsoYLYvZKGKVvEflYzncgjS4O3C2H54GAn5wolaAAVIS
M5SIYjm12jt9ui5IiLiMm3JD6mqKT655qTNJYKSw+KTkud3FqXmbH8ovhXkSZEMM
aQOZIAfSyW1gGoQJf1Fe
=++LP
-----END PGP SIGNATURE-----

From mike at lischke-online.de  Sun Oct 28 05:04:34 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Sun, 28 Oct 2012 13:04:34 +0100
Subject: [antlr-interest] Disambiguate following rules
In-Reply-To: <f5dba0c2d0e31ccd400461bec2bfffd0@smartmobili.com>
References: <f5dba0c2d0e31ccd400461bec2bfffd0@smartmobili.com>
Message-ID: <7C4A9D4C-B325-487F-A694-1718CC353FF2@lischke-online.de>


Hi,

> var_decl
> 	: identifier ( '=' expression )?
>         | expression
> 	;

expression can also be an identifier, so you have two alternatives that match the same input. You might be able to solve this with a higher lookahead value, but I'd rather disambiguate this with a predicate like this:

var_decl
	: (identifier '=')? identifier '=' expression
	| expression
	;

You might also just enable backtracking in var_decl rule only (the predicate will use local backtracking anyway for the lookahead).

If you can use the lexer IDENTIFIER rule instead of the parser identifier rule you can even avoid backtracking entirely here using:

var_decl
	: {LA(1) == IDENTIFIER && LA(2) == '='}? identifier '=' expression
	| expression
	;

Yet another solution might be to move the assignment part to your primary expression, if that is valid input for the rest of your grammar (where expression is used):

primary_expression
    : TRUE | FALSE
    | 'defined' '(' expression ')'  /*  for prepocessing */
    | TYPEOF identifier                 /* javascript */
    | TYPEOF '(' identifier ')'         /* javascript */
    | '[' expression? ']'     /* objj array? DIES */
    | '[' expression ',' expression ( ',' expression )* ']'   /* objj array? DIES */
	| message_expression        /*   '[' receiver message_selector ']'  */
	| selector_expression
	| protocol_expression
	| encode_expression
    | '{' STRING_LITERAL ':' primary_expression ( ','  STRING_LITERAL ':' primary_expression )* '}'  /* js obj array? */
    | '{' '}'                                                 /* js empty obj array? */
	| constant
    | identifier ('=' expression)?
    | VAR identifier
	| '(' expression ')'
    ;

and simplify your var_decl to just expression.

Mike
-- 
www.soft-gems.net



From mandy at think-a-lot.de  Sun Oct 28 07:06:30 2012
From: mandy at think-a-lot.de (Mandy Neumann)
Date: Sun, 28 Oct 2012 15:06:30 +0100
Subject: [antlr-interest] Lexing almost arbitrary input
In-Reply-To: <CAN1YFWuB4t_VdOHsBiNFJqGACZ_9hTMgSXcgwOven7v4Ec9dmQ@mail.gmail.com>
References: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
	<8470240427787583826@unknownmsgid>
	<20121024131548.Horde.hB2fVdjz9kRQh83kftXXurA@webmail.df.eu>
	<CAN1YFWuB4t_VdOHsBiNFJqGACZ_9hTMgSXcgwOven7v4Ec9dmQ@mail.gmail.com>
Message-ID: <508D3BE6.7050009@think-a-lot.de>

Thank you all very much for your input and estimations.

Unfortunately, I'm just a student assistent at our institute, so if my 
professor and lecturers say "we wanna use antlr, go write us a grammar", 
I have like not much choice. So I eventually tried.

The question for me now is: Are there compelling arguments AGAINST using 
antlr in this case? Or is it just like "antlr is not made for this, but 
you can nevertheless use it"? I would really appreciate if someone can 
explain it to me, maybe from a language designer's view, in terms of the 
theory of parser construction or sth. I'm really not an expert in this 
field (just know the essence about lexing, parsing and formal grammars), 
but I'd like to understand it in more detail and maybe get some 
arguments to bring up against my colleagues.

Thanks again.

Am 24.10.2012 19:11, schrieb Juancarlo A?ez:
> Mandy,
>
>     I also know that this sounds like a very strange task for ANTLR, but
>     my colleagues and boss say we need the fancy error reporting and AST
>     creation stuff...
>
>
> That is not what characterizes ANTLR, and is something easy to have with
> other approaches.
>
> Your source language is not even recursive, so the ASTs that ANTLR would
> produce for it are dead simple, a list of tuples perhaps.
>
> Despite the power of ANTLR, there exist languages that can be described
> in plain English or in mathematical notation but that an ANTLR grammar
> cannot parse. Ill defined, or very ambiguous languages are among them.
>
> My suggestion is that you hand-write a top down parser for your small
> language. It will not only work, but it will become a formal definition
> for the language, which is something I think you're missing so far.
>
> Cheers,
>
> --
> Juancarlo *A?ez*

From apalala at gmail.com  Sun Oct 28 08:06:27 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sun, 28 Oct 2012 10:36:27 -0430
Subject: [antlr-interest] Lexing almost arbitrary input
In-Reply-To: <508D3BE6.7050009@think-a-lot.de>
References: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
	<8470240427787583826@unknownmsgid>
	<20121024131548.Horde.hB2fVdjz9kRQh83kftXXurA@webmail.df.eu>
	<CAN1YFWuB4t_VdOHsBiNFJqGACZ_9hTMgSXcgwOven7v4Ec9dmQ@mail.gmail.com>
	<508D3BE6.7050009@think-a-lot.de>
Message-ID: <CAN1YFWvpsW-cVs00RaxoZ0+X6yyNp2m0FNykNi429MghzGMncw@mail.gmail.com>

Mandy,

Unfortunately, I'm just a student assistent at our institute, so if my
> professor and lecturers say "we wanna use antlr, go write us a grammar",
> I have like not much choice. So I eventually tried.
>

What I tried to say was that a good part of the problem you're having with
ANTLR is that your language is not well defined.

You can keep banging your head against ANTLR nuances for weeks, or you can
spend a day or two hand-writing a top-down parser, and *then* come back to
ANTLR with the gained knowledge.

I've taught language theory at the university level, so I know what
students have to cope with. You need to start with a description of a
language that's unambiguous; then you can translate that to an ANTLR
grammar. If you can't parse your small language with a hand-written
program, then ANTLR won't be able to parse it either. ANTLR doesn't do
magic, it just builds an automaton based on a specification.

Cheers,

-- 
Juancarlo *A?ez*

From tillerman35 at yahoo.com  Sun Oct 28 12:17:07 2012
From: tillerman35 at yahoo.com (Michael Cooper)
Date: Sun, 28 Oct 2012 12:17:07 -0700 (PDT)
Subject: [antlr-interest] Interpreter built-in functions: code in grammar or
	use function table?
Message-ID: <1351451827.43383.YahooMailNeo@web162805.mail.bf1.yahoo.com>

I need the usual set of built-in functions for my (java-based) interpreter.? Stuff like string manipulation functions, math functions, date functions, etc.

I'm on a fence about how to implement them. 

On the one hand, I could do it with two simple grammar rules.? One for method invocations and another for function calls.? Then all I would have to 
do is maintain a function table with a list of built-in functions.? I already maintain a function table for functions in the input, so it wouldn't be much of 
a stretch to adapt that to built-in functions as well.

The other alternative is to define each built-in function in the grammar itself.? E.g. a rule for "println" and another for "substr" and another for "randbetween" etc. etc.
The advantage to that approach is that they appear in the railroad diagrams in Eclipse.? Those are pretty handy for documentation.? I suppose I could write a
little helper function to output function definitions to ANTLR-compatible grammar rules. 

Any thoughts?

From michael.bedward at gmail.com  Sun Oct 28 13:22:27 2012
From: michael.bedward at gmail.com (Michael Bedward)
Date: Mon, 29 Oct 2012 07:22:27 +1100
Subject: [antlr-interest] Interpreter built-in functions: code in
 grammar or use function table?
In-Reply-To: <1351451827.43383.YahooMailNeo@web162805.mail.bf1.yahoo.com>
References: <1351451827.43383.YahooMailNeo@web162805.mail.bf1.yahoo.com>
Message-ID: <CACJVtdPVTVFCi_caw8kFuC0ZdUtwDbf4LeEf7=T1Eb9Gm_7atg@mail.gmail.com>

There would have to be some really pressing reason to do anything
other than a simple table lookup. The other approach seems like the
road to bloated grammars.

Michael

On 29 October 2012 06:17, Michael Cooper <tillerman35 at yahoo.com> wrote:
> I need the usual set of built-in functions for my (java-based) interpreter.  Stuff like string manipulation functions, math functions, date functions, etc.
>
> I'm on a fence about how to implement them.
>
> On the one hand, I could do it with two simple grammar rules.  One for method invocations and another for function calls.  Then all I would have to
> do is maintain a function table with a list of built-in functions.  I already maintain a function table for functions in the input, so it wouldn't be much of
> a stretch to adapt that to built-in functions as well.
>
> The other alternative is to define each built-in function in the grammar itself.  E.g. a rule for "println" and another for "substr" and another for "randbetween" etc. etc.
> The advantage to that approach is that they appear in the railroad diagrams in Eclipse.  Those are pretty handy for documentation.  I suppose I could write a
> little helper function to output function definitions to ANTLR-compatible grammar rules.
>
> Any thoughts?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Mon Oct 29 01:05:33 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 29 Oct 2012 16:05:33 +0800
Subject: [antlr-interest] Lexing almost arbitrary input
In-Reply-To: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
References: <20121022130035.Horde.F0kzTaGZi1VQhSdTMcPT1FA@webmail.df.eu>
Message-ID: <8f077527175c9c5df75369d0041032ae@mail.gmail.com>

So, re-looking at your input, it seems that all your examples surround
your words in "", you are doing this naturally to show the delineation in
English. If you do the same with your language, this becomes a trivial
issue. Otherwise you will have to use code in the lexer anyway I think.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of
mandy at think-a-lot.de
Sent: Monday, October 22, 2012 7:01 PM
To: antlr-interest
Subject: [antlr-interest] Lexing almost arbitrary input

Dear list,

in a project we want to use ANTLR to parse lexicon/dictionary entries.
I'm the one who has the honour of writing the grammar(s) for that.
I'm currently stuck with the lexer part.
Here's the problem:

Since we talk about dictionary entries, the structure is quite simple:
You have a word in language1 (lemma), a translation in language2 and some
grammatical attributes. The latter is somewhat fixed, having a limited set
of values like 'm', 'f', 'pl' and so on.
The problem is the former. The lemma (and translation) could be a simple
word like "dog", but it can also be several words with spaces
(phrases) like in "come to be known"; furthermore it could contain
non-letter characters like '-' ("push-up"), '(' ("Rheinl?nder(in)"), even
numbers, slashes, percent signs etc. may be part of the lemma (e.g. "100%
(bio-)degradable").

So there are just too many possibilities - I did not come too far with the
'a'..'z' approach (even more because we are talking about languages with
umlaut and accents). And I really did not want to list all possible
combinations, think it would be a pain...

I thought about something like "consume just everything until some special
character (that will never be part of the lemma)". First rules I tried
were

LEMMA: (options {greedy=false;}: .)+ ~COLON;
TRANSLATION: (options {greedy=false;}: .)+ ~(CARRIAGERETURN|LINEFEED);

but this didn't seem to work ("required (...)+ loop did not match anything
at character ..." for each input character). So I used just

LEMMA: (~COLON)+;
TRANSLATION: (~(CARRIAGERETURN|LINEFEED))+;

but now I don't see any output - neither from my code actions nor the AST.
So I'm not sure if it even works; plus I think this is not the very best
way to handle the problem.

Any ideas?

Mandy

P.S.: The structure for the dictionary entry has to be as simple as this:

dictionary:
	dictEntry*  EOF
;

dictEntry
:
	LEMMA

	COLON

	TRANSLATION

	grammarAtts //which is '[' list_of_atrributes ']'

	NEWLINE //my instructor wants to let an entry end with newline,
not sth like ';' ...
;


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From tillerman35 at yahoo.com  Mon Oct 29 08:45:43 2012
From: tillerman35 at yahoo.com (Michael Cooper)
Date: Mon, 29 Oct 2012 08:45:43 -0700 (PDT)
Subject: [antlr-interest] Method Invocation Rule (expr.methodname()) causing
	mutually left-recursive grammar
Message-ID: <1351525543.74456.YahooMailNeo@web162801.mail.bf1.yahoo.com>

I'm getting the dreaded "mutually left-recursive" error.? It started when I tried to add method invocations to the mix.


What I would like is method invocations like "variable.method(arg1, arg2, arg3)" and to be able to "chain" them together like in java ("whateverwhatever".length().tostring().length().tostring().length()" returning 2

Here is the grammar snippet.? Any help is appreciated.


atom[boolean eval_now] returns [InterpValue value]
? : varname=IDENTIFIER //Return an ival with the type & value of a scalar variable
??? { if($eval_now && interp.getContinueStatus()==0) $value=interp.getScalarValueByName($varname.text); }
? | varname=IDENTIFIER '[' key_or_index=expr[eval_now] ']' //Return an ival containing the scalar type & value at the given index of an array variable, key of a map variable, or name or index of a record column
??? { if($eval_now && interp.getContinueStatus()==0) $value=interp.getScalarValueByKeyOrIndex($varname.text,$key_or_index.value); }
? | varname=IDENTIFIER '.' membername=IDENTIFIER //Return an ival containing the scalar type & value at the given index of an array variable or key of a map variable
??? { if($eval_now && interp.getContinueStatus()==0) $value=interp.getScalarValueByMemberName($varname.text,$membername.text); }
? | BOOLEAN_LITERAL //Convert literal to an ival of type boolean with given "true" or "false" value
??? { if($eval_now && interp.getContinueStatus()==0) $value = new InterpValue("boolean",$BOOLEAN_LITERAL.text); } 
? | INTEGER_LITERAL //Convert literal to an ival of type integer with given numeric value
??? { if($eval_now && interp.getContinueStatus()==0) $value = new InterpValue("integer",$INTEGER_LITERAL.text); }
? | DECIMAL_LITERAL //Convert literal to an ival of type decimal with given numeric value
??? { if($eval_now && interp.getContinueStatus()==0) $value = new InterpValue("numeric",$DECIMAL_LITERAL.text); }
? | STRING_LITERAL //Convert literal to an ival of type 
??? { if($eval_now && interp.getContinueStatus()==0) $value = new InterpValue("string",$STRING_LITERAL.text); }
? | '(' e=expr[eval_now] ')' 
??? { if($eval_now && interp.getContinueStatus()==0) $value = $e.value; }
? | hasrows=consume_record[eval_now]
??? { if($eval_now && interp.getContinueStatus()==0) $value = $hasrows.value; }
? | f=function_call[eval_now]
??? { if($eval_now && interp.getContinueStatus()==0) $value = $f.value; }
? | m=method_invocation[eval_now]
??? { if($eval_now && interp.getContinueStatus()==0) $value = $m.value; }
;

method_invocation[boolean eval_now]? returns [InterpValue value]
@init { ArrayList<Token> method_args = new ArrayList<Token>(); ArrayList<String> method_params = new ArrayList<String>(); }
? : lhs=expr[false] '.' 
??? funcname=IDENTIFIER '('
??? ( e1=expr[false] { method_args.add($e1.start); method_params.add($e1.text); }
????? ( ',' e2=expr[false] { method_args.add($e2.start); method_params.add($e2.text); } )*
??? )?
?? ')' { if($eval_now && interp.getContinueStatus()==0) $value=interp.methodInvocation($lhs.text,$funcname.text,method_args,method_params); }
;

From list at toolazydogs.com  Mon Oct 29 08:54:01 2012
From: list at toolazydogs.com (Alan Cabrera)
Date: Mon, 29 Oct 2012 08:54:01 -0700
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <08c927c0408d6c1f6b74204962b24711@mail.gmail.com>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
	<CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
	<08c927c0408d6c1f6b74204962b24711@mail.gmail.com>
Message-ID: <36BB9935-DE08-40CB-870B-34FEECCEF15A@toolazydogs.com>

I've written a few maven plugins in my lifetime.  I'm happy to help.  Where can I start?


Regards,
Alan

On Oct 16, 2012, at 9:50 PM, Jim Idle wrote:

> I am willing to do this when it is released, but I don't have time to do
> it before then. Ter is still waiting for me to fix up the C target for the
> last ever release of 3.x, which I must do shortly as it has been too long.
> 
> When I say "we have this set up" I mean we have all the Sonatype accounts
> and so on so there is nothing to do to create the release infra-structure.
> 
> 
> However, as I understand it, we have moved away from using Maven to build
> v4, which will likely make the task of releasing it as a maven plugin
> non-trivial; I am pretty sure I will have to write the v4 plugin pretty
> much from scratch again and then I will have to wrestle with the awful git
> monster.
> 
> That isn't the longest of tasks, until I remember that I have to do this
> in my spare time in a tiny "apartment" in Taipei with my very slow netbook
> and what feels at times like a 48Kbs modem connection ;) Ah well, it
> reminds me of mainframe days I guess.
> 
> So, don't look for this before v4 is ready for release.
> 
> Jim
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dave Thomas
> Sent: Wednesday, October 17, 2012 3:48 AM
> To: Antlr-Interest Antlr.Org
> Subject: Re: [antlr-interest] Maven plugin for antlr v4
> 
> Ping.  I'd love to see antlr4 available as a maven artifact too.
> 
> On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera
> <list at toolazydogs.com>wrote:
> 
>> 
>> Ping.
>> 
>> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>> 
>>> Great!  What's the ETA for publication of the artifacts?
>>> 
>>> On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
>>> 
>>>> We already have this set up.
>>>> 
>>>> Jim
>>>> 
>>>> -----Original Message-----
>>>> From: antlr-interest-bounces at antlr.org
>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>> Cabrera
>>>> Sent: Tuesday, September 25, 2012 12:32 AM
>>>> To: Sam Harwell
>>>> Cc: Antlr-Interest Antlr.Org
>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>> 
>>>> Sonatype offers access to a Nexus server that Open Source projects
>>>> can
>> use
>>>> to publish their artifacts.  It's free.
>>>> 
>>>> 
>>>> Regards,
>>>> Alan
>>>> 
>>>> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
>>>> 
>>>>> Yes, but it's current in source-only form and not available
>>>>> through the
>>>> Maven distribution site (I don't know how that part of it works).
>>>> Hopefully we can get to that part of it soon. :)
>>>>> 
>>>>> Sam
>>>>> 
>>>>> -----Original Message-----
>>>>> From: antlr-interest-bounces at antlr.org
>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>> Cabrera
>>>>> Sent: Saturday, September 22, 2012 9:29 PM
>>>>> To: Antlr-Interest Antlr.Org
>>>>> Subject: [antlr-interest] Maven plugin for antlr v4
>>>>> 
>>>>> Is there a maven plugin in the works for antler v4?
>>>>> 
>>>>> 
>>>>> Regards,
>>>>> Alan
>>>>> 
>>>>> 
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>> ess
>>>>> 
>>>>> 
>>>> 
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>> ess
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> 
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Mon Oct 29 11:30:43 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 29 Oct 2012 11:30:43 -0700
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <36BB9935-DE08-40CB-870B-34FEECCEF15A@toolazydogs.com>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
	<CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
	<08c927c0408d6c1f6b74204962b24711@mail.gmail.com>
	<36BB9935-DE08-40CB-870B-34FEECCEF15A@toolazydogs.com>
Message-ID: <AF8798F0-3FA6-43C9-85D7-0826E655B376@cs.usfca.edu>

 hi Alan, you can start by looking at the structure of the code base, which is not at all what maven expects:

https://github.com/parrt/antlr4

Sam has added in a plug-in start I think:
https://github.com/parrt/antlr4/tree/master/antlr4-maven-plugin/src

Ter
On Oct 29, 2012, at 8:54 AM, Alan Cabrera wrote:

> I've written a few maven plugins in my lifetime.  I'm happy to help.  Where can I start?
> 
> 
> Regards,
> Alan
> 
> On Oct 16, 2012, at 9:50 PM, Jim Idle wrote:
> 
>> I am willing to do this when it is released, but I don't have time to do
>> it before then. Ter is still waiting for me to fix up the C target for the
>> last ever release of 3.x, which I must do shortly as it has been too long.
>> 
>> When I say "we have this set up" I mean we have all the Sonatype accounts
>> and so on so there is nothing to do to create the release infra-structure.
>> 
>> 
>> However, as I understand it, we have moved away from using Maven to build
>> v4, which will likely make the task of releasing it as a maven plugin
>> non-trivial; I am pretty sure I will have to write the v4 plugin pretty
>> much from scratch again and then I will have to wrestle with the awful git
>> monster.
>> 
>> That isn't the longest of tasks, until I remember that I have to do this
>> in my spare time in a tiny "apartment" in Taipei with my very slow netbook
>> and what feels at times like a 48Kbs modem connection ;) Ah well, it
>> reminds me of mainframe days I guess.
>> 
>> So, don't look for this before v4 is ready for release.
>> 
>> Jim
>> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dave Thomas
>> Sent: Wednesday, October 17, 2012 3:48 AM
>> To: Antlr-Interest Antlr.Org
>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>> 
>> Ping.  I'd love to see antlr4 available as a maven artifact too.
>> 
>> On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera
>> <list at toolazydogs.com>wrote:
>> 
>>> 
>>> Ping.
>>> 
>>> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>>> 
>>>> Great!  What's the ETA for publication of the artifacts?
>>>> 
>>>> On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
>>>> 
>>>>> We already have this set up.
>>>>> 
>>>>> Jim
>>>>> 
>>>>> -----Original Message-----
>>>>> From: antlr-interest-bounces at antlr.org
>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>> Cabrera
>>>>> Sent: Tuesday, September 25, 2012 12:32 AM
>>>>> To: Sam Harwell
>>>>> Cc: Antlr-Interest Antlr.Org
>>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>>> 
>>>>> Sonatype offers access to a Nexus server that Open Source projects
>>>>> can
>>> use
>>>>> to publish their artifacts.  It's free.
>>>>> 
>>>>> 
>>>>> Regards,
>>>>> Alan
>>>>> 
>>>>> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
>>>>> 
>>>>>> Yes, but it's current in source-only form and not available
>>>>>> through the
>>>>> Maven distribution site (I don't know how that part of it works).
>>>>> Hopefully we can get to that part of it soon. :)
>>>>>> 
>>>>>> Sam
>>>>>> 
>>>>>> -----Original Message-----
>>>>>> From: antlr-interest-bounces at antlr.org
>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>> Cabrera
>>>>>> Sent: Saturday, September 22, 2012 9:29 PM
>>>>>> To: Antlr-Interest Antlr.Org
>>>>>> Subject: [antlr-interest] Maven plugin for antlr v4
>>>>>> 
>>>>>> Is there a maven plugin in the works for antler v4?
>>>>>> 
>>>>>> 
>>>>>> Regards,
>>>>>> Alan
>>>>>> 
>>>>>> 
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe:
>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>> ess
>>>>>> 
>>>>>> 
>>>>> 
>>>>> 
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe:
>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>> ess
>>>>> 
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>> 
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sinchronized.arun at gmail.com  Mon Oct 29 11:49:53 2012
From: sinchronized.arun at gmail.com (Arun Ramakrishnan)
Date: Mon, 29 Oct 2012 11:49:53 -0700
Subject: [antlr-interest] issues with ANTLRWorks
Message-ID: <CAKVWSxsaffmkkVg-GpJ=KHJ0ndK7Ob5-PuNGMqBAooCHj0Su-g@mail.gmail.com>

I was going through this
tutorial<http://bkiers.blogspot.com/2011/03/2-introduction-to-antlr.html>(
the csv lexer ) and I ran into some problems with the interpreter in
Works. It seems to be having issues with intputs that have quotes.

For Example.

************* Combined Grammar ***********
prog : ( csvline LineBreak)* csvline LineBreak? EOF;
csvline : value ( Comma value )* ;
value : SimpleValue | QuotedValue;
Comma : ',';
LineBreak : '\r'? '\n' | '\r';
SimpleValue : ~(',' | '\r' | '\n' | '"')+ ;
QuotedValue : '"' ( '""' | ~'"' )* '"';

***************************************************

********* Input ***********
"hi","there"
****************************

thanks
Arun
ps:
ANTLRWorks 1.4.3
ANTLR 3.4
OSX 10.8 ( mountain lion )

From bkiers at gmail.com  Mon Oct 29 12:12:57 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 29 Oct 2012 20:12:57 +0100
Subject: [antlr-interest] issues with ANTLRWorks
In-Reply-To: <CAKVWSxsaffmkkVg-GpJ=KHJ0ndK7Ob5-PuNGMqBAooCHj0Su-g@mail.gmail.com>
References: <CAKVWSxsaffmkkVg-GpJ=KHJ0ndK7Ob5-PuNGMqBAooCHj0Su-g@mail.gmail.com>
Message-ID: <CAOrgODb4gvP00Y7Fh02sj0so2EEqMbpeTt2uG2aaHT-YPQEC_Q@mail.gmail.com>

Hi Arun,

On Mon, Oct 29, 2012 at 7:49 PM, Arun Ramakrishnan <
sinchronized.arun at gmail.com> wrote:

> ...

and I ran into some problems with the interpreter in
> Works. It seems to be having issues with intputs that have quotes.
>
>
Try to avoid the interpreter: it has (quite) some quirks. If you use
ANTLRWorks' debugger, it will work just fine. Press CTRL+D for the debugger
to start.

Regards,

Bart.

From sinchronized.arun at gmail.com  Mon Oct 29 12:21:15 2012
From: sinchronized.arun at gmail.com (Arun Ramakrishnan)
Date: Mon, 29 Oct 2012 12:21:15 -0700
Subject: [antlr-interest] issues with ANTLRWorks
In-Reply-To: <CAOrgODb4gvP00Y7Fh02sj0so2EEqMbpeTt2uG2aaHT-YPQEC_Q@mail.gmail.com>
References: <CAKVWSxsaffmkkVg-GpJ=KHJ0ndK7Ob5-PuNGMqBAooCHj0Su-g@mail.gmail.com>
	<CAOrgODb4gvP00Y7Fh02sj0so2EEqMbpeTt2uG2aaHT-YPQEC_Q@mail.gmail.com>
Message-ID: <96B0266E-7831-48CA-8051-544072CA5A63@gmail.com>

Thanks 

Sent from my iPhone

On Oct 29, 2012, at 12:12 PM, Bart Kiers <bkiers at gmail.com> wrote:

> Hi Arun,
> 
> On Mon, Oct 29, 2012 at 7:49 PM, Arun Ramakrishnan <sinchronized.arun at gmail.com> wrote:
>> ... 
>> and I ran into some problems with the interpreter in
>> Works. It seems to be having issues with intputs that have quotes.
> 
> Try to avoid the interpreter: it has (quite) some quirks. If you use ANTLRWorks' debugger, it will work just fine. Press CTRL+D for the debugger to start.
> 
> Regards,
> 
> Bart.
> 

From nodcosta at in.ibm.com  Mon Oct 29 15:33:58 2012
From: nodcosta at in.ibm.com (Noel Dcosta)
Date: Tue, 30 Oct 2012 04:03:58 +0530
Subject: [antlr-interest] AUTO: Noel Dcosta is out of the office (returning
	11/05/2012)
Message-ID: <OF34E89633.79AE280B-ON65257AA6.007BF5A8-65257AA6.007BF5A8@in.ibm.com>


I am out of the office until 11/05/2012.

I am on vacation from Oct 30 to Nov 4


Note: This is an automated response to your message  "antlr-interest
Digest, Vol 95, Issue 27" sent on 30/10/2012 0:30:01.

This is the only notification you will receive while this person is away.


From svarovsky.tomas at gmail.com  Mon Oct 29 15:44:35 2012
From: svarovsky.tomas at gmail.com (Tomas Svarovsky)
Date: Mon, 29 Oct 2012 15:44:35 -0700
Subject: [antlr-interest] ANTL4 in maven
Message-ID: <CAEO46PUH0z6ojOU7KKn05Zao6i67BVrKwbJV+KPS_QmUtiCs8Q@mail.gmail.com>

Hi list,

Is there a plan to release this in a maven repository? Maybe it is
even released somewhere? The book, google and
http://mvnrepository.com/search.html?query=antlr did not help to
answer.

Besides that being new to maven and Java/clojure how do you solve when
developing on it? Or are you ussually happy with v3?

Thanks Tomas

From gerald at certiv.net  Tue Oct 30 00:58:35 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 30 Oct 2012 00:58:35 -0700
Subject: [antlr-interest] Ambiguous parse tree generated
Message-ID: <508F88AB.6000803@certiv.net>

I have a rule

style  :  ( Dot Identifier )* ( Hash Identifier )* ;

AntlrV4 generates a context with a list of Dot, a list of Hash, and a 
list of Identifier.  While both Identifier's are syntactically 
identical, they are semantically distinct.  In this particular case, the 
list of Dot can be used to partition the list of Identifier.

However, if I change the rule to the preferred form

style  :   ( Dot Identifier ( Hash Identifier )? )*  ;

I still get the same single lists of Dot, Hash, and Identifier. Only way 
to determine the Dot vs Hash associated Identifier's is by inspection of 
the token stream?  Adding labels did not change the generated code.

What am I missing?

From jimi at temporal-wave.com  Tue Oct 30 01:06:58 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 30 Oct 2012 16:06:58 +0800
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <508F88AB.6000803@certiv.net>
References: <508F88AB.6000803@certiv.net>
Message-ID: <bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>

At a guess:

style : di* hi*;

di: Dot Identifier ;
hi: Hash Identifier;

in other words did you try creating rules for the semantically distinct
pieces?

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
Sent: Tuesday, October 30, 2012 3:59 PM
To: antlr-interest
Subject: [antlr-interest] Ambiguous parse tree generated

I have a rule

style  :  ( Dot Identifier )* ( Hash Identifier )* ;

AntlrV4 generates a context with a list of Dot, a list of Hash, and a list
of Identifier.  While both Identifier's are syntactically identical, they
are semantically distinct.  In this particular case, the list of Dot can
be used to partition the list of Identifier.

However, if I change the rule to the preferred form

style  :   ( Dot Identifier ( Hash Identifier )? )*  ;

I still get the same single lists of Dot, Hash, and Identifier. Only way
to determine the Dot vs Hash associated Identifier's is by inspection of
the token stream?  Adding labels did not change the generated code.

What am I missing?

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From cd.barth at t-online.de  Tue Oct 30 01:13:43 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Tue, 30 Oct 2012 09:13:43 +0100
Subject: [antlr-interest] Interpreter built-in functions: code in
	grammar or	use function table?
In-Reply-To: <1351451827.43383.YahooMailNeo@web162805.mail.bf1.yahoo.com>
References: <1351451827.43383.YahooMailNeo@web162805.mail.bf1.yahoo.com>
Message-ID: <000001cdb676$7a816930$6f843b90$@barth@t-online.de>

I'm using a ParserExtension for helper functions like 
      /*  @return true if LT(1) is key  
          anycase keyword like then / Then / tHeN are all possible
      */
	public boolean isKey(final String key) {
		return
input.LT(1).getText().toUpperCase().equals(key.toUpperCase());
	}
      /* print for test only  */
	public void pr(final String string) {
		System.out.println(string);
            // or any formatted output here..
	}

And use them in parser grammar see sample:
if_statement_part
  :  { isKey("if") }? ID   e=expression 
     { isKey("then") }? ID  unit 
     {pr("if condition: "+$e.text);}  
  ;

Therefore many reusable code can pulled out from grammar to java classes.
Can this be a way for you? 

Claus-Dieter


-----Urspr?ngliche Nachricht-----
Von: Michael Cooper [mailto:tillerman35 at yahoo.com] 
Gesendet: Sonntag, 28. Oktober 2012 20:17
An: antlr-interest at antlr.org
Betreff: [antlr-interest] Interpreter built-in functions: code in grammar or
use function table?

I need the usual set of built-in functions for my (java-based) interpreter.?
Stuff like string manipulation functions, math functions, date functions,
etc.

I'm on a fence about how to implement them. 

On the one hand, I could do it with two simple grammar rules.? One for
method invocations and another for function calls.? Then all I would have to
do is maintain a function table with a list of built-in functions.? I
already maintain a function table for functions in the input, so it wouldn't
be much of a stretch to adapt that to built-in functions as well.

The other alternative is to define each built-in function in the grammar
itself.? E.g. a rule for "println" and another for "substr" and another for
"randbetween" etc. etc.
The advantage to that approach is that they appear in the railroad diagrams
in Eclipse.? Those are pretty handy for documentation.? I suppose I could
write a little helper function to output function definitions to
ANTLR-compatible grammar rules. 

Any thoughts?


From cd.barth at t-online.de  Tue Oct 30 02:16:20 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Tue, 30 Oct 2012 10:16:20 +0100
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ to greedy?
Message-ID: <000101cdb67f$39dbcb60$ad936220$@barth@t-online.de>

Using the following grammar

 

lexer grammar MyLexer;

WORD1                : ID1+;

WORD2                : ID2+;   

fragment ID1 : {getCharPositionInLine()<2}?   [a-zA-Z];

fragment ID2 : {getCharPositionInLine()>=2}? [a-zA-Z];


WS : [ \t\r\n]+ -> skip ;

 

and looking at lexer tokens with 

for (Token token : lexer.getAllTokens()) {

                int idx = token.getType();

                tokenName = lexer.getTokenNames()[idx];

                System.out.format(" %-12s", tokenName);

                System.out.println(token);

}

 

for this two input lines

a cde

abcde

 

has printed the results

WORD1       [@-1,0:0='a',<1>,1:0]

WORD2       [@-1,2:4='cde',<2>,1:2]

 

WORD1       [@-1,7:9='abc',<1>,2:0]

WORD2       [@-1,10:11='de',<2>,2:3]

 

And now my question:

Why is letter c from the first line "a cde" part of WORD2

and in the next line                      "abcde"  part of WORD1?


 

My sneaking suspicion is that in case of second line the ()+ construct from
ID1+ is to greedy and consumes one token

to much. 

 

Claus-Dieter

 

 

 


From apalala at gmail.com  Tue Oct 30 04:32:12 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Tue, 30 Oct 2012 07:02:12 -0430
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <508F88AB.6000803@certiv.net>
References: <508F88AB.6000803@certiv.net>
Message-ID: <CAN1YFWv=4VFM3L-fSHe-wTnFyY7t5Uj6kT=k8Ct-kqVhbhZO_w@mail.gmail.com>

On Tue, Oct 30, 2012 at 3:28 AM, Gerald Rosenberg <gerald at certiv.net> wrote:

> style  :   ( Dot Identifier ( Hash Identifier )? )*  ;
>
> I still get the same single lists of Dot, Hash, and Identifier. Only way
> to determine the Dot vs Hash associated Identifier's is by inspection of
> the token stream?  Adding labels did not change the generated code.
>


I'm not using v4, but in v3.4, the tree for a rule will be a flat list with
the tokens unless you add tree construction indicators. As Jim says, you
can get away by factoring in some more rules:

style : dot_id* -> ^(STYLE dot_id*);

dot_id: Dot Identifier hash_id?;

hash_id: Hash Identifier;

-- 
Juancarlo *A?ez*

From cd.barth at t-online.de  Tue Oct 30 05:18:09 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Tue, 30 Oct 2012 13:18:09 +0100
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ too greedy?
Message-ID: <000d01cdb698$9fcdc7c0$df695740$@barth@t-online.de>

Using the following grammar

 

lexer grammar MyLexer;

WORD1                : ID1+;

WORD2                : ID2+;   

fragment ID1 : {getCharPositionInLine()<2}?   [a-zA-Z];

fragment ID2 : {getCharPositionInLine()>=2}? [a-zA-Z];


WS : [ \t\r\n]+ -> skip ;

 

and looking at lexer tokens with 

for (Token token : lexer.getAllTokens()) {

                int idx = token.getType();

                tokenName = lexer.getTokenNames()[idx];

                System.out.format(" %-12s", tokenName);

                System.out.println(token);

}

 

for this two input lines

a cde

abcde

 

has printed the results

WORD1       [@-1,0:0='a',<1>,1:0]

WORD2       [@-1,2:4='cde',<2>,1:2]

 

WORD1       [@-1,7:9='abc',<1>,2:0]

WORD2       [@-1,10:11='de',<2>,2:3]

 

And now my question:

Why is letter c from the first line "a cde" part of WORD2

and in the next line                      "abcde"  part of WORD1?


 

My sneaking suspicion is that in case of second line the ()+ construct from
ID1+ is too greedy and consumes one token too much. 

 

Claus-Dieter

 

(to -> too corrected . )

 


From sam at tunnelvisionlabs.com  Tue Oct 30 06:22:17 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 30 Oct 2012 13:22:17 +0000
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ to
 greedy?
In-Reply-To: <000101cdb67f$39dbcb60$ad936220$@barth@t-online.de>
References: <000101cdb67f$39dbcb60$ad936220$@barth@t-online.de>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0593C750@CH1PRD0811MB430.namprd08.prod.outlook.com>

For left*most* edge predicates (evaluated before any character of the token is matched), the input index will be located where you expect it. For all other predicates in the lexer, the input index will be located one character to the left of where you are currently thinking because consume() is not called before evaluating the predicate.

This behavior may change in the future, but that certainly explains the behavior you're seeing.

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of cd.barth at t-online.de
Sent: Tuesday, October 30, 2012 4:16 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ to greedy?

Using the following grammar

 

lexer grammar MyLexer;

WORD1                : ID1+;

WORD2                : ID2+;   

fragment ID1 : {getCharPositionInLine()<2}?   [a-zA-Z];

fragment ID2 : {getCharPositionInLine()>=2}? [a-zA-Z];


WS : [ \t\r\n]+ -> skip ;

 

and looking at lexer tokens with 

for (Token token : lexer.getAllTokens()) {

                int idx = token.getType();

                tokenName = lexer.getTokenNames()[idx];

                System.out.format(" %-12s", tokenName);

                System.out.println(token);

}

 

for this two input lines

a cde

abcde

 

has printed the results

WORD1       [@-1,0:0='a',<1>,1:0]

WORD2       [@-1,2:4='cde',<2>,1:2]

 

WORD1       [@-1,7:9='abc',<1>,2:0]

WORD2       [@-1,10:11='de',<2>,2:3]

 

And now my question:

Why is letter c from the first line "a cde" part of WORD2

and in the next line                      "abcde"  part of WORD1?


 

My sneaking suspicion is that in case of second line the ()+ construct from
ID1+ is to greedy and consumes one token

to much. 

 

Claus-Dieter

 

 

 


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From sam at tunnelvisionlabs.com  Tue Oct 30 06:24:45 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 30 Oct 2012 13:24:45 +0000
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ to
 greedy?
References: <000101cdb67f$39dbcb60$ad936220$@barth@t-online.de> 
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0593C792@CH1PRD0811MB430.namprd08.prod.outlook.com>

For now, you can work around this by moving the predicates in ID1 and ID2 to the right side instead of the left side of the [a-zA-Z] set. The predicates' text can stay the same.

-----Original Message-----
From: Sam Harwell 
Sent: Tuesday, October 30, 2012 8:22 AM
To: 'cd.barth at t-online.de'; antlr-interest at antlr.org
Subject: RE: [antlr-interest] ANTLR4 synpred combination with (..)+ to greedy?

For left*most* edge predicates (evaluated before any character of the token is matched), the input index will be located where you expect it. For all other predicates in the lexer, the input index will be located one character to the left of where you are currently thinking because consume() is not called before evaluating the predicate.

This behavior may change in the future, but that certainly explains the behavior you're seeing.

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of cd.barth at t-online.de
Sent: Tuesday, October 30, 2012 4:16 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ to greedy?

Using the following grammar

 

lexer grammar MyLexer;

WORD1                : ID1+;

WORD2                : ID2+;   

fragment ID1 : {getCharPositionInLine()<2}?   [a-zA-Z];

fragment ID2 : {getCharPositionInLine()>=2}? [a-zA-Z];


WS : [ \t\r\n]+ -> skip ;

 

and looking at lexer tokens with 

for (Token token : lexer.getAllTokens()) {

                int idx = token.getType();

                tokenName = lexer.getTokenNames()[idx];

                System.out.format(" %-12s", tokenName);

                System.out.println(token);

}

 

for this two input lines

a cde

abcde

 

has printed the results

WORD1       [@-1,0:0='a',<1>,1:0]

WORD2       [@-1,2:4='cde',<2>,1:2]

 

WORD1       [@-1,7:9='abc',<1>,2:0]

WORD2       [@-1,10:11='de',<2>,2:3]

 

And now my question:

Why is letter c from the first line "a cde" part of WORD2

and in the next line                      "abcde"  part of WORD1?


 

My sneaking suspicion is that in case of second line the ()+ construct from
ID1+ is to greedy and consumes one token

to much. 

 

Claus-Dieter

 

 

 


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From cd.barth at t-online.de  Tue Oct 30 07:36:36 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Tue, 30 Oct 2012 15:36:36 +0100
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ too
	greedy?
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0593C792@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <000101cdb67f$39dbcb60$ad936220$@barth@t-online.de>
	<8802E2F086DC9648BD0585D82AC6377B0593C792@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <001b01cdb6ab$f72eba70$e58c2f50$@barth@t-online.de>

Thank you for the hint, Sam.

I moved the predicates 
from left 
   fragment ID1 : {getCharPositionInLine()<2}?   [a-zA-Z];
   fragment ID2 : {getCharPositionInLine()>=2}?  [a-zA-Z];
to right 
   fragment ID1 : [a-zA-Z] {getCharPositionInLine()<2}?  ;
   fragment ID2 : [a-zA-Z] {getCharPositionInLine()>=2}? ;

and my print results for input 'abcde' changed from
WORD1       [@-1,7:9='abc',<1>,2:0]
WORD2       [@-1,10:11='de',<2>,2:3]
 into -> 
WORD1       [@-1,7:8='ab',<1>,2:0]
WORD2       [@-1,9:11='cde',<2>,2:2]

Now the letter 'c' is part of WORD2 what I expected.

Claus-Dieter


-----Urspr?ngliche Nachricht-----
Von: Sam Harwell [mailto:sam at tunnelvisionlabs.com] 
Gesendet: Dienstag, 30. Oktober 2012 14:25
An: cd.barth at t-online.de; antlr-interest at antlr.org
Betreff: RE: [antlr-interest] ANTLR4 synpred combination with (..)+ to
greedy?

For now, you can work around this by moving the predicates in ID1 and ID2 to
the right side instead of the left side of the [a-zA-Z] set. The predicates'
text can stay the same.

-----Original Message-----
From: Sam Harwell 
Sent: Tuesday, October 30, 2012 8:22 AM
To: 'cd.barth at t-online.de'; antlr-interest at antlr.org
Subject: RE: [antlr-interest] ANTLR4 synpred combination with (..)+ to
greedy?

For left*most* edge predicates (evaluated before any character of the token
is matched), the input index will be located where you expect it. For all
other predicates in the lexer, the input index will be located one character
to the left of where you are currently thinking because consume() is not
called before evaluating the predicate.

This behavior may change in the future, but that certainly explains the
behavior you're seeing.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of cd.barth at t-online.de
Sent: Tuesday, October 30, 2012 4:16 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ too greedy?

Using the following grammar
 
lexer grammar MyLexer;
WORD1                : ID1+;
WORD2                : ID2+;   

fragment ID1 : {getCharPositionInLine()<2}?   [a-zA-Z];
fragment ID2 : {getCharPositionInLine()>=2}? [a-zA-Z];

WS : [ \t\r\n]+ -> skip ;
 
and looking at lexer tokens with 
for (Token token : lexer.getAllTokens()) {
                int idx = token.getType();
                tokenName = lexer.getTokenNames()[idx];
                System.out.format(" %-12s", tokenName);
                System.out.println(token);
}

for this two input lines
a cde
abcde

has printed the results
WORD1       [@-1,0:0='a',<1>,1:0]
WORD2       [@-1,2:4='cde',<2>,1:2]

WORD1       [@-1,7:9='abc',<1>,2:0]
WORD2       [@-1,10:11='de',<2>,2:3]
 
And now my question:
Why is letter c from the first line "a cde" part of WORD2
and in the next line               "abcde"  part of WORD1?

My sneaking suspicion is that in case of second line the ()+ construct from
ID1+ is to greedy and consumes one token too much. 

Claus-Dieter 



From parrt at cs.usfca.edu  Tue Oct 30 08:08:18 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 30 Oct 2012 08:08:18 -0700
Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ to
	greedy?
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0593C750@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <000101cdb67f$39dbcb60$ad936220$@barth@t-online.de>
	<8802E2F086DC9648BD0585D82AC6377B0593C750@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <A5AB7AB9-EA81-4E58-8BB5-7EA6FC3FD03A@cs.usfca.edu>

hi all. Hmm?we should make preds work like they do in parser but might be impossible given that lexers are weird.
Ter
On Oct 30, 2012, at 6:22 AM, Sam Harwell wrote:

> For left*most* edge predicates (evaluated before any character of the token is matched), the input index will be located where you expect it. For all other predicates in the lexer, the input index will be located one character to the left of where you are currently thinking because consume() is not called before evaluating the predicate.
> 
> This behavior may change in the future, but that certainly explains the behavior you're seeing.
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of cd.barth at t-online.de
> Sent: Tuesday, October 30, 2012 4:16 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR4 synpred combination with (..)+ to greedy?
> 
> Using the following grammar
> 
> 
> 
> lexer grammar MyLexer;
> 
> WORD1                : ID1+;
> 
> WORD2                : ID2+;   
> 
> fragment ID1 : {getCharPositionInLine()<2}?   [a-zA-Z];
> 
> fragment ID2 : {getCharPositionInLine()>=2}? [a-zA-Z];
> 
> 
> WS : [ \t\r\n]+ -> skip ;
> 
> 
> 
> and looking at lexer tokens with 
> 
> for (Token token : lexer.getAllTokens()) {
> 
>                int idx = token.getType();
> 
>                tokenName = lexer.getTokenNames()[idx];
> 
>                System.out.format(" %-12s", tokenName);
> 
>                System.out.println(token);
> 
> }
> 
> 
> 
> for this two input lines
> 
> a cde
> 
> abcde
> 
> 
> 
> has printed the results
> 
> WORD1       [@-1,0:0='a',<1>,1:0]
> 
> WORD2       [@-1,2:4='cde',<2>,1:2]
> 
> 
> 
> WORD1       [@-1,7:9='abc',<1>,2:0]
> 
> WORD2       [@-1,10:11='de',<2>,2:3]
> 
> 
> 
> And now my question:
> 
> Why is letter c from the first line "a cde" part of WORD2
> 
> and in the next line                      "abcde"  part of WORD1?
> 
> 
> 
> 
> My sneaking suspicion is that in case of second line the ()+ construct from
> ID1+ is to greedy and consumes one token
> 
> to much. 
> 
> 
> 
> Claus-Dieter
> 
> 
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gerald at certiv.net  Tue Oct 30 13:03:43 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 30 Oct 2012 13:03:43 -0700
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
Message-ID: <5090329F.5030009@certiv.net>

Yes, and that is the work around I am using now.  Sorry if I was not clear.

Resorting to rule decomposition unfortunately greatly increases the 
number of enter/exits and the depth of what was, in v3, AST rewrites.  
Was hoping I was missing some way to mark or label the rule elements to 
remove the ambiguity.

On 10/30/2012 1:06 AM, Jim Idle wrote:
> At a guess:
>
> style : di* hi*;
>
> di: Dot Identifier ;
> hi: Hash Identifier;
>
> in other words did you try creating rules for the semantically distinct
> pieces?
>
> Jim
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
> Sent: Tuesday, October 30, 2012 3:59 PM
> To: antlr-interest
> Subject: [antlr-interest] Ambiguous parse tree generated
>
> I have a rule
>
> style  :  ( Dot Identifier )* ( Hash Identifier )* ;
>
> AntlrV4 generates a context with a list of Dot, a list of Hash, and a list
> of Identifier.  While both Identifier's are syntactically identical, they
> are semantically distinct.  In this particular case, the list of Dot can
> be used to partition the list of Identifier.
>
> However, if I change the rule to the preferred form
>
> style  :   ( Dot Identifier ( Hash Identifier )? )*  ;
>
> I still get the same single lists of Dot, Hash, and Identifier. Only way
> to determine the Dot vs Hash associated Identifier's is by inspection of
> the token stream?  Adding labels did not change the generated code.
>
> What am I missing?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From sam at tunnelvisionlabs.com  Tue Oct 30 16:00:46 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 30 Oct 2012 23:00:46 +0000
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <508F88AB.6000803@certiv.net>
References: <508F88AB.6000803@certiv.net>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0593D0EA@CH1PRD0811MB430.namprd08.prod.outlook.com>

It's probably best to make sub-rules for this:

style : dot_style* hash_style*;
dot_style : Dot Identifier;
hash_style : Hash Identifier;

Works equally well for the other example you gave.

style : dot_style*;
dot_style : Dot Identifier hash_style?;
hash_style : Hash Identifier;

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
Sent: Tuesday, October 30, 2012 2:59 AM
To: antlr-interest
Subject: [antlr-interest] Ambiguous parse tree generated

I have a rule

style  :  ( Dot Identifier )* ( Hash Identifier )* ;

AntlrV4 generates a context with a list of Dot, a list of Hash, and a list of Identifier.  While both Identifier's are syntactically identical, they are semantically distinct.  In this particular case, the list of Dot can be used to partition the list of Identifier.

However, if I change the rule to the preferred form

style  :   ( Dot Identifier ( Hash Identifier )? )*  ;

I still get the same single lists of Dot, Hash, and Identifier. Only way to determine the Dot vs Hash associated Identifier's is by inspection of the token stream?  Adding labels did not change the generated code.

What am I missing?

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From sam at tunnelvisionlabs.com  Tue Oct 30 16:07:15 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 30 Oct 2012 23:07:15 +0000
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <5090329F.5030009@certiv.net>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0593D14B@CH1PRD0811MB430.namprd08.prod.outlook.com>

In V3, a rewrite with multiple root operators behaves like individual rules in v4's parse trees. While the nodes in an AST produced by a V3 rule can have a complicated shape, the node created for a V4 rule is always a single node for the rule with a flat list of children (rule contexts and terminals) in the order they were parsed. Rule decomposition is the way to give your trees the shape you want, and really shouldn't cause a performance problem in v4.

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
Sent: Tuesday, October 30, 2012 3:04 PM
To: jimi at temporal-wave.com
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Ambiguous parse tree generated

Yes, and that is the work around I am using now.  Sorry if I was not clear.

Resorting to rule decomposition unfortunately greatly increases the number of enter/exits and the depth of what was, in v3, AST rewrites.  
Was hoping I was missing some way to mark or label the rule elements to remove the ambiguity.



From gerald at certiv.net  Tue Oct 30 18:35:51 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 30 Oct 2012 18:35:51 -0700
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0593D14B@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0593D14B@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <50908077.4010201@certiv.net>

Yes, its that "in the order they were parsed" that is the issue. That 
would imply a list of lists per context to preserve ordering. Kinda what 
I was hoping for.

The problem with rule decomposition is that it non-trivially increases 
the complexity of processing the parse tree.  For example, the Java 
grammar is less than about 30 rules.  Yet the number of distinct 
contexts, factoring in decomposition and use of the # alt rule markers 
(including refactoring to ensure that the alts marked are all outer), is 
very nearly 200.  Not a desirable direction.

In the rules that I presented, the elements are all terminals, so 
examining the token stream is just a single look back.  Changing the 
lexer to produce Identifier : DotIdentifier | HashIdentifier ; tokens 
would also work.

A more general solution would require a token to keep a reference to its 
enclosing scope, including its prior peer element and its closure.  
Should be able to do that using custom tokens and actions to explicitly 
capture scope state in the initial parse.  Any reason this approach 
would not work/would not be desirable?

On 10/30/2012 4:07 PM, Sam Harwell wrote:
> In V3, a rewrite with multiple root operators behaves like individual rules in v4's parse trees. While the nodes in an AST produced by a V3 rule can have a complicated shape, the node created for a V4 rule is always a single node for the rule with a flat list of children (rule contexts and terminals) in the order they were parsed. Rule decomposition is the way to give your trees the shape you want, and really shouldn't cause a performance problem in v4.
>
> Sam
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
> Sent: Tuesday, October 30, 2012 3:04 PM
> To: jimi at temporal-wave.com
> Cc: ANTLR-Interest Interest
> Subject: Re: [antlr-interest] Ambiguous parse tree generated
>
> Yes, and that is the work around I am using now.  Sorry if I was not clear.
>
> Resorting to rule decomposition unfortunately greatly increases the number of enter/exits and the depth of what was, in v3, AST rewrites.
> Was hoping I was missing some way to mark or label the rule elements to remove the ambiguity.
>
>
>



From sam at tunnelvisionlabs.com  Tue Oct 30 19:31:59 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 31 Oct 2012 02:31:59 +0000
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <50908077.4010201@certiv.net>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0593D14B@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<50908077.4010201@certiv.net>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0593D2AD@CH1PRD0811MB430.namprd08.prod.outlook.com>

I regularly use TerminalNode instead of Token when working in the trees. This gives me access to the parent node of a token in the parse tree. A special binary search can be used to locate the TerminalNode within the children of its parent.

I strongly disagree with your statement about decomposition complexity. I use an annotation processor to statically validate code (classes, fields, methods) that depends on the shape of my parse tree (or any subset of it). The grammar used by GoWorks has 126 context classes, with 670 dependencies throughout the code base. If 2 smaller rules get combined, then instead of having separate dependencies for the two rules the affected code will all share a dependency, which doubles my work if I need to make a future change to just 1 of the two smaller rules.

Sam

-----Original Message-----
From: Gerald Rosenberg [mailto:gerald at certiv.net] 
Sent: Tuesday, October 30, 2012 8:36 PM
To: Sam Harwell
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Ambiguous parse tree generated

Yes, its that "in the order they were parsed" that is the issue. That would imply a list of lists per context to preserve ordering. Kinda what I was hoping for.

The problem with rule decomposition is that it non-trivially increases the complexity of processing the parse tree.  For example, the Java grammar is less than about 30 rules.  Yet the number of distinct contexts, factoring in decomposition and use of the # alt rule markers (including refactoring to ensure that the alts marked are all outer), is very nearly 200.  Not a desirable direction.

In the rules that I presented, the elements are all terminals, so examining the token stream is just a single look back.  Changing the lexer to produce Identifier : DotIdentifier | HashIdentifier ; tokens would also work.

A more general solution would require a token to keep a reference to its enclosing scope, including its prior peer element and its closure.  
Should be able to do that using custom tokens and actions to explicitly capture scope state in the initial parse.  Any reason this approach would not work/would not be desirable?

On 10/30/2012 4:07 PM, Sam Harwell wrote:
> In V3, a rewrite with multiple root operators behaves like individual rules in v4's parse trees. While the nodes in an AST produced by a V3 rule can have a complicated shape, the node created for a V4 rule is always a single node for the rule with a flat list of children (rule contexts and terminals) in the order they were parsed. Rule decomposition is the way to give your trees the shape you want, and really shouldn't cause a performance problem in v4.
>
> Sam
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald 
> Rosenberg
> Sent: Tuesday, October 30, 2012 3:04 PM
> To: jimi at temporal-wave.com
> Cc: ANTLR-Interest Interest
> Subject: Re: [antlr-interest] Ambiguous parse tree generated
>
> Yes, and that is the work around I am using now.  Sorry if I was not clear.
>
> Resorting to rule decomposition unfortunately greatly increases the number of enter/exits and the depth of what was, in v3, AST rewrites.
> Was hoping I was missing some way to mark or label the rule elements to remove the ambiguity.
>
>
>





From jimi at temporal-wave.com  Tue Oct 30 19:46:52 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 31 Oct 2012 10:46:52 +0800
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <5090329F.5030009@certiv.net>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
Message-ID: <c95d6dcb1bee18c13889f19002322bee@mail.gmail.com>

However AST rewrites in v3 were very slow, whereas rule decomposition
results in small 'methods'/collections of logic, which are inlined by
compilers and JITs. I think it is more of a matter of adjusting to v4 than
worrying about v3 comparisons to be honest :)

Jim

-----Original Message-----
From: Gerald Rosenberg [mailto:gerald at certiv.net]
Sent: Wednesday, October 31, 2012 4:04 AM
To: jimi at temporal-wave.com
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Ambiguous parse tree generated

Yes, and that is the work around I am using now.  Sorry if I was not
clear.

Resorting to rule decomposition unfortunately greatly increases the number
of enter/exits and the depth of what was, in v3, AST rewrites.
Was hoping I was missing some way to mark or label the rule elements to
remove the ambiguity.

On 10/30/2012 1:06 AM, Jim Idle wrote:
> At a guess:
>
> style : di* hi*;
>
> di: Dot Identifier ;
> hi: Hash Identifier;
>
> in other words did you try creating rules for the semantically
> distinct pieces?
>
> Jim
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald
> Rosenberg
> Sent: Tuesday, October 30, 2012 3:59 PM
> To: antlr-interest
> Subject: [antlr-interest] Ambiguous parse tree generated
>
> I have a rule
>
> style  :  ( Dot Identifier )* ( Hash Identifier )* ;
>
> AntlrV4 generates a context with a list of Dot, a list of Hash, and a
> list of Identifier.  While both Identifier's are syntactically
> identical, they are semantically distinct.  In this particular case,
> the list of Dot can be used to partition the list of Identifier.
>
> However, if I change the rule to the preferred form
>
> style  :   ( Dot Identifier ( Hash Identifier )? )*  ;
>
> I still get the same single lists of Dot, Hash, and Identifier. Only
> way to determine the Dot vs Hash associated Identifier's is by
> inspection of the token stream?  Adding labels did not change the
generated code.
>
> What am I missing?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From gerald at certiv.net  Tue Oct 30 20:04:09 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 30 Oct 2012 20:04:09 -0700
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0593D2AD@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0593D14B@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<50908077.4010201@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0593D2AD@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <50909529.9080209@certiv.net>

Not sure what dependencies you are referring to.

But, in any case, if the rule in question is being decomposed purely for 
syntactic distinction, you wind up with multiple additional objects with 
decision points for evaluation all for no semantic gain (at least with 
respect to an ideal parse tree that maintains order).  The work to split 
a rule for semantic distinction purposes I would accept as a requirement.

On 10/30/2012 7:31 PM, Sam Harwell wrote:
> I regularly use TerminalNode instead of Token when working in the trees. This gives me access to the parent node of a token in the parse tree. A special binary search can be used to locate the TerminalNode within the children of its parent.
>
> I strongly disagree with your statement about decomposition complexity. I use an annotation processor to statically validate code (classes, fields, methods) that depends on the shape of my parse tree (or any subset of it). The grammar used by GoWorks has 126 context classes, with 670 dependencies throughout the code base. If 2 smaller rules get combined, then instead of having separate dependencies for the two rules the affected code will all share a dependency, which doubles my work if I need to make a future change to just 1 of the two smaller rules.
>
> Sam
>
> -----Original Message-----
> From: Gerald Rosenberg [mailto:gerald at certiv.net]
> Sent: Tuesday, October 30, 2012 8:36 PM
> To: Sam Harwell
> Cc: ANTLR-Interest Interest
> Subject: Re: [antlr-interest] Ambiguous parse tree generated
>
> Yes, its that "in the order they were parsed" that is the issue. That would imply a list of lists per context to preserve ordering. Kinda what I was hoping for.
>
> The problem with rule decomposition is that it non-trivially increases the complexity of processing the parse tree.  For example, the Java grammar is less than about 30 rules.  Yet the number of distinct contexts, factoring in decomposition and use of the # alt rule markers (including refactoring to ensure that the alts marked are all outer), is very nearly 200.  Not a desirable direction.
>
> In the rules that I presented, the elements are all terminals, so examining the token stream is just a single look back.  Changing the lexer to produce Identifier : DotIdentifier | HashIdentifier ; tokens would also work.
>
> A more general solution would require a token to keep a reference to its enclosing scope, including its prior peer element and its closure.
> Should be able to do that using custom tokens and actions to explicitly capture scope state in the initial parse.  Any reason this approach would not work/would not be desirable?
>
> On 10/30/2012 4:07 PM, Sam Harwell wrote:
>> In V3, a rewrite with multiple root operators behaves like individual rules in v4's parse trees. While the nodes in an AST produced by a V3 rule can have a complicated shape, the node created for a V4 rule is always a single node for the rule with a flat list of children (rule contexts and terminals) in the order they were parsed. Rule decomposition is the way to give your trees the shape you want, and really shouldn't cause a performance problem in v4.
>>
>> Sam
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald
>> Rosenberg
>> Sent: Tuesday, October 30, 2012 3:04 PM
>> To: jimi at temporal-wave.com
>> Cc: ANTLR-Interest Interest
>> Subject: Re: [antlr-interest] Ambiguous parse tree generated
>>
>> Yes, and that is the work around I am using now.  Sorry if I was not clear.
>>
>> Resorting to rule decomposition unfortunately greatly increases the number of enter/exits and the depth of what was, in v3, AST rewrites.
>> Was hoping I was missing some way to mark or label the rule elements to remove the ambiguity.
>>
>>
>>
>
>
>
>



From gerald at certiv.net  Tue Oct 30 21:06:31 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 30 Oct 2012 21:06:31 -0700
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <c95d6dcb1bee18c13889f19002322bee@mail.gmail.com>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
	<c95d6dcb1bee18c13889f19002322bee@mail.gmail.com>
Message-ID: <5090A3C7.6060200@certiv.net>

Was not intending to compare v3 with v4 for any purpose other than to 
point out that the AST is unambiguous whereas the parse tree is 
ambiguous with respect to element ordering.  I guess time will tell 
whether for any rule of the form

A : ( B ( C )? )+ ;

getting a list of B and a list of C -- and loosing the mutual 
correlation information -- is ultimately that trivial. Decomposition 
gets you

A  : ( B C )+  # AltBC
     |  B+         # AltB
     ;

With more elements the decomposition -- both the rule and the collection 
of contexts -- becomes more complex.  The essential expressiveness of 
the natural/semantic representation of the rule is obscured.

I have trouble remembering what I had for breakfast, so maintaining code 
more than a week old requires every consistency and clarifying aid 
possible -- with time you will wind up having the same problem, too ;)

Sam raised the issue of performance.  I did not.

On 10/30/2012 7:46 PM, Jim Idle wrote:
> However AST rewrites in v3 were very slow, whereas rule decomposition
> results in small 'methods'/collections of logic, which are inlined by
> compilers and JITs. I think it is more of a matter of adjusting to v4 than
> worrying about v3 comparisons to be honest :)
>
> Jim
>
> -----Original Message-----
> From: Gerald Rosenberg [mailto:gerald at certiv.net]
> Sent: Wednesday, October 31, 2012 4:04 AM
> To: jimi at temporal-wave.com
> Cc: ANTLR-Interest Interest
> Subject: Re: [antlr-interest] Ambiguous parse tree generated
>
> Yes, and that is the work around I am using now.  Sorry if I was not
> clear.
>
> Resorting to rule decomposition unfortunately greatly increases the number
> of enter/exits and the depth of what was, in v3, AST rewrites.
> Was hoping I was missing some way to mark or label the rule elements to
> remove the ambiguity.
>
> On 10/30/2012 1:06 AM, Jim Idle wrote:
>> At a guess:
>>
>> style : di* hi*;
>>
>> di: Dot Identifier ;
>> hi: Hash Identifier;
>>
>> in other words did you try creating rules for the semantically
>> distinct pieces?
>>
>> Jim
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald
>> Rosenberg
>> Sent: Tuesday, October 30, 2012 3:59 PM
>> To: antlr-interest
>> Subject: [antlr-interest] Ambiguous parse tree generated
>>
>> I have a rule
>>
>> style  :  ( Dot Identifier )* ( Hash Identifier )* ;
>>
>> AntlrV4 generates a context with a list of Dot, a list of Hash, and a
>> list of Identifier.  While both Identifier's are syntactically
>> identical, they are semantically distinct.  In this particular case,
>> the list of Dot can be used to partition the list of Identifier.
>>
>> However, if I change the rule to the preferred form
>>
>> style  :   ( Dot Identifier ( Hash Identifier )? )*  ;
>>
>> I still get the same single lists of Dot, Hash, and Identifier. Only
>> way to determine the Dot vs Hash associated Identifier's is by
>> inspection of the token stream?  Adding labels did not change the
> generated code.
>> What am I missing?
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From jimi at temporal-wave.com  Tue Oct 30 21:08:32 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 31 Oct 2012 12:08:32 +0800
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <5090A3C7.6060200@certiv.net>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
	<c95d6dcb1bee18c13889f19002322bee@mail.gmail.com>
	<5090A3C7.6060200@certiv.net>
Message-ID: <d8ef0a300f1d1c659cc177601a7cf6c5@mail.gmail.com>

Breakfast is an illusion - complexity and maintainability doubly so ;)

Jim

-----Original Message-----
From: Gerald Rosenberg [mailto:gerald at certiv.net]
Sent: Wednesday, October 31, 2012 12:07 PM
To: jimi at temporal-wave.com
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Ambiguous parse tree generated

Was not intending to compare v3 with v4 for any purpose other than to
point out that the AST is unambiguous whereas the parse tree is ambiguous
with respect to element ordering.  I guess time will tell whether for any
rule of the form

A : ( B ( C )? )+ ;

getting a list of B and a list of C -- and loosing the mutual correlation
information -- is ultimately that trivial. Decomposition gets you

A  : ( B C )+  # AltBC
     |  B+         # AltB
     ;

With more elements the decomposition -- both the rule and the collection
of contexts -- becomes more complex.  The essential expressiveness of the
natural/semantic representation of the rule is obscured.

I have trouble remembering what I had for breakfast, so maintaining code
more than a week old requires every consistency and clarifying aid
possible -- with time you will wind up having the same problem, too ;)

Sam raised the issue of performance.  I did not.

On 10/30/2012 7:46 PM, Jim Idle wrote:
> However AST rewrites in v3 were very slow, whereas rule decomposition
> results in small 'methods'/collections of logic, which are inlined by
> compilers and JITs. I think it is more of a matter of adjusting to v4
> than worrying about v3 comparisons to be honest :)
>
> Jim
>
> -----Original Message-----
> From: Gerald Rosenberg [mailto:gerald at certiv.net]
> Sent: Wednesday, October 31, 2012 4:04 AM
> To: jimi at temporal-wave.com
> Cc: ANTLR-Interest Interest
> Subject: Re: [antlr-interest] Ambiguous parse tree generated
>
> Yes, and that is the work around I am using now.  Sorry if I was not
> clear.
>
> Resorting to rule decomposition unfortunately greatly increases the
> number of enter/exits and the depth of what was, in v3, AST rewrites.
> Was hoping I was missing some way to mark or label the rule elements
> to remove the ambiguity.
>
> On 10/30/2012 1:06 AM, Jim Idle wrote:
>> At a guess:
>>
>> style : di* hi*;
>>
>> di: Dot Identifier ;
>> hi: Hash Identifier;
>>
>> in other words did you try creating rules for the semantically
>> distinct pieces?
>>
>> Jim
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald
>> Rosenberg
>> Sent: Tuesday, October 30, 2012 3:59 PM
>> To: antlr-interest
>> Subject: [antlr-interest] Ambiguous parse tree generated
>>
>> I have a rule
>>
>> style  :  ( Dot Identifier )* ( Hash Identifier )* ;
>>
>> AntlrV4 generates a context with a list of Dot, a list of Hash, and a
>> list of Identifier.  While both Identifier's are syntactically
>> identical, they are semantically distinct.  In this particular case,
>> the list of Dot can be used to partition the list of Identifier.
>>
>> However, if I change the rule to the preferred form
>>
>> style  :   ( Dot Identifier ( Hash Identifier )? )*  ;
>>
>> I still get the same single lists of Dot, Hash, and Identifier. Only
>> way to determine the Dot vs Hash associated Identifier's is by
>> inspection of the token stream?  Adding labels did not change the
> generated code.
>> What am I missing?
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sam at tunnelvisionlabs.com  Tue Oct 30 21:43:00 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 31 Oct 2012 04:43:00 +0000
Subject: [antlr-interest] Ambiguous parse tree generated
In-Reply-To: <5090A3C7.6060200@certiv.net>
References: <508F88AB.6000803@certiv.net>
	<bfb4355c3bf7f724cdfe24003d8a733d@mail.gmail.com>
	<5090329F.5030009@certiv.net>
	<c95d6dcb1bee18c13889f19002322bee@mail.gmail.com>
	<5090A3C7.6060200@certiv.net>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0593FB44@CH1PRD0811MB430.namprd08.prod.outlook.com>

Rules are just transition networks (nodes and edges). The () you have added has absolutely no meaning when it comes to the imaginary item you've referred to as "AST".

In v4, the shape of the parse tree is derived only from which rules in the grammar get called, in what order. If you label an outer alternative (like you've done for rule A), it'll use an instance of AltBCContext or AltBContext which each extend AContext so the expected shape from the grammar rules is preserved.

This is truly a major difference between V3 and V4, but in the end this way is much easier to develop and maintain.

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
Sent: Tuesday, October 30, 2012 11:07 PM
To: jimi at temporal-wave.com
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Ambiguous parse tree generated

Was not intending to compare v3 with v4 for any purpose other than to point out that the AST is unambiguous whereas the parse tree is ambiguous with respect to element ordering.  I guess time will tell whether for any rule of the form

A : ( B ( C )? )+ ;

getting a list of B and a list of C -- and loosing the mutual correlation information -- is ultimately that trivial. Decomposition gets you

A  : ( B C )+  # AltBC
     |  B+         # AltB
     ;

With more elements the decomposition -- both the rule and the collection of contexts -- becomes more complex.  The essential expressiveness of the natural/semantic representation of the rule is obscured.

I have trouble remembering what I had for breakfast, so maintaining code more than a week old requires every consistency and clarifying aid possible -- with time you will wind up having the same problem, too ;)

Sam raised the issue of performance.  I did not.

On 10/30/2012 7:46 PM, Jim Idle wrote:
> However AST rewrites in v3 were very slow, whereas rule decomposition 
> results in small 'methods'/collections of logic, which are inlined by 
> compilers and JITs. I think it is more of a matter of adjusting to v4 
> than worrying about v3 comparisons to be honest :)
>
> Jim
>
> -----Original Message-----
> From: Gerald Rosenberg [mailto:gerald at certiv.net]
> Sent: Wednesday, October 31, 2012 4:04 AM
> To: jimi at temporal-wave.com
> Cc: ANTLR-Interest Interest
> Subject: Re: [antlr-interest] Ambiguous parse tree generated
>
> Yes, and that is the work around I am using now.  Sorry if I was not 
> clear.
>
> Resorting to rule decomposition unfortunately greatly increases the 
> number of enter/exits and the depth of what was, in v3, AST rewrites.
> Was hoping I was missing some way to mark or label the rule elements 
> to remove the ambiguity.
>
> On 10/30/2012 1:06 AM, Jim Idle wrote:
>> At a guess:
>>
>> style : di* hi*;
>>
>> di: Dot Identifier ;
>> hi: Hash Identifier;
>>
>> in other words did you try creating rules for the semantically 
>> distinct pieces?
>>
>> Jim
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org 
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald 
>> Rosenberg
>> Sent: Tuesday, October 30, 2012 3:59 PM
>> To: antlr-interest
>> Subject: [antlr-interest] Ambiguous parse tree generated
>>
>> I have a rule
>>
>> style  :  ( Dot Identifier )* ( Hash Identifier )* ;
>>
>> AntlrV4 generates a context with a list of Dot, a list of Hash, and a 
>> list of Identifier.  While both Identifier's are syntactically 
>> identical, they are semantically distinct.  In this particular case, 
>> the list of Dot can be used to partition the list of Identifier.
>>
>> However, if I change the rule to the preferred form
>>
>> style  :   ( Dot Identifier ( Hash Identifier )? )*  ;
>>
>> I still get the same single lists of Dot, Hash, and Identifier. Only 
>> way to determine the Dot vs Hash associated Identifier's is by 
>> inspection of the token stream?  Adding labels did not change the
> generated code.
>> What am I missing?
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From thomas at ruschival.de  Wed Oct 31 09:47:00 2012
From: thomas at ruschival.de (Thomas Ruschival)
Date: Wed, 31 Oct 2012 12:47:00 -0400
Subject: [antlr-interest] how to skip/read next n Characters (n is read form
	input)
Message-ID: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>

I am a humble EE with little grammar experience, please forgive my 
ignorance and give me a hint how professionals would do the trick.

I came up with a grammar for detecting commands "escape-sequences" in a 
input text (for a UnifiedPOS printer)
that reads numbers and boolean argumets for escape sequence commands 
from the input stream.
I can read numeric arguments and use them as function parameters, which 
function to be called is parsed correctly.
For instance "ESC|#rF" means "print feed revers # lines"

The question is how to treat "ESC|#E" which means "send the next # 
bytes untreated to the pinter" in other words:

How can I use a number N that I detected on the input stream to read 
and consume the next N characters
'un-lexed' and 'un-parsed' as string/byte array?

I was thinking using something like this in a parse action using the 
'input' member of the parser:

for (int i=0; i<N; i++){
	output.append(input.LA(1));
	input.consume();
}

But it doesn't seem very professional to me. Furthermore this gives me 
tokens and not plain bytes....
Can you give me a hint?

Thanks in advance
Thomas

From apalala at gmail.com  Wed Oct 31 18:19:55 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Wed, 31 Oct 2012 20:49:55 -0430
Subject: [antlr-interest] how to skip/read next n Characters (n is read
 form input)
In-Reply-To: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
Message-ID: <CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>

Thomas,

ANTLR may be overkill or inadequate for what you're doing.

I think you'd be better of with a program with a main loop that dispatches
to different functions based on the escape code. Each function can affect
the input position, or do anything else it pleases. It would be
a handcrafted state machine.

You can do this in Python or any of the friendly languages.

Cheers,

-- Juancarlo

On Wed, Oct 31, 2012 at 12:17 PM, Thomas Ruschival <thomas at ruschival.de>wrote:

> I am a humble EE with little grammar experience, please forgive my
> ignorance and give me a hint how professionals would do the trick.
>
> I came up with a grammar for detecting commands "escape-sequences" in a
> input text (for a UnifiedPOS printer)
> that reads numbers and boolean argumets for escape sequence commands
> from the input stream.
> I can read numeric arguments and use them as function parameters, which
> function to be called is parsed correctly.
> For instance "ESC|#rF" means "print feed revers # lines"
>
> The question is how to treat "ESC|#E" which means "send the next #
> bytes untreated to the pinter" in other words:
>
> How can I use a number N that I detected on the input stream to read
> and consume the next N characters
> 'un-lexed' and 'un-parsed' as string/byte array?
>
> I was thinking using something like this in a parse action using the
> 'input' member of the parser:
>
> for (int i=0; i<N; i++){
>         output.append(input.LA(1));
>         input.consume();
> }
>
> But it doesn't seem very professional to me. Furthermore this gives me
> tokens and not plain bytes....
> Can you give me a hint?
>
> Thanks in advance
> Thomas
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

