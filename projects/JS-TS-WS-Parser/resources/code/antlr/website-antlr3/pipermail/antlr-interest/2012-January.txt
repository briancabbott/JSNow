From gwlist at grahamwideman.com  Sun Jan  1 05:08:21 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Sun, 01 Jan 2012 05:08:21 -0800
Subject: [antlr-interest] "Honey Badger" case insensitivity
In-Reply-To: <4EFF2E63.3020603@lancaster.ac.uk>
References: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
	<AABA454A-1DBE-46D1-8576-6DA08E7AEE02@cs.usfca.edu>
	<4EFF2E63.3020603@lancaster.ac.uk>
Message-ID: <20120101130822.TEVT3801.fed1rmfepo103.cox.net@fed1rmimpo210.cox.net>

From the 'v4 "Honey Badger" teaser' thread...

In response to suggestions for more compact case-insensitivity syntax

Ter said:
> Hi Graham and crew
Fortunately case insensitive 
> keywords are less common these days. 

And Sam said:
> However, I will agree it's not that common these days.

I'm gonna rate this "[citation needed]" !

To assert "less common", you guys perhaps have some stats that show a dwindling square mileage of text in  HTML, SQL, PHP, Basic (including VBA), Delphi, Fortran, COBOL, spreadsheet formulas and others that are candidates for ANTLR-generated digesters?

Or info on trends in simple ASLs intended for non-programmer end-users, who generally regard strict case requirements as gratuitously frustrating?

Probably true that the steady parade of hip new programming languages leans heavily towards case-sensitive keywords and identifiers.  But I'm not convinced that represents the overall distribution of ANTLR opportunities.

By the way, nice one, Sam, suggesting Honey Badger could use more sugar :-)

Happy New Year all! 

-- Graham


From s.barnett-cormack at lancaster.ac.uk  Sun Jan  1 09:36:53 2012
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 01 Jan 2012 17:36:53 +0000
Subject: [antlr-interest] "Honey Badger" case insensitivity
In-Reply-To: <20120101130822.TEVT3801.fed1rmfepo103.cox.net@fed1rmimpo210.cox.net>
References: <20111230022704.MGUD3766.fed1rmfepo202.cox.net@fed1rmimpo110.cox.net>
	<AABA454A-1DBE-46D1-8576-6DA08E7AEE02@cs.usfca.edu>
	<4EFF2E63.3020603@lancaster.ac.uk>
	<20120101130822.TEVT3801.fed1rmfepo103.cox.net@fed1rmimpo210.cox.net>
Message-ID: <4F0099B5.7040803@lancaster.ac.uk>

Actually, this is a good point... if someone is designing a DSL, is it 
really helpful for potential users of the DSL if were' encouraging them 
to make it case-sensitive. If the DSL is going to be human-edited by 
non-nerds, that may be a good design reason to make keywords case 
insensitive.

Still, I have no disagreement with leaving it until after the initial 
release. Put it on a .1 roadmap or something.

Sam

PS: Just to avoid any confusion, the Sam mentioned in the email below is 
me, and not the Sam who is mentioned on this list more often (Harwell). 
He helps write ANTLR and ST - I just lurk and pipe in occasionally.

On 01/01/2012 13:08, Graham Wideman wrote:
>> From the 'v4 "Honey Badger" teaser' thread...
>
> In response to suggestions for more compact case-insensitivity syntax
>
> Ter said:
>> Hi Graham and crew.Fortunately case insensitive
>> keywords are less common these days.
>
> And Sam said:
>> However, I will agree it's not that common these days.
>
> I'm gonna rate this "[citation needed]" !
>
> To assert "less common", you guys perhaps have some stats that show a dwindling square mileage of text in  HTML, SQL, PHP, Basic (including VBA), Delphi, Fortran, COBOL, spreadsheet formulas and others that are candidates for ANTLR-generated digesters?
>
> Or info on trends in simple ASLs intended for non-programmer end-users, who generally regard strict case requirements as gratuitously frustrating?
>
> Probably true that the steady parade of hip new programming languages leans heavily towards case-sensitive keywords and identifiers.  But I'm not convinced that represents the overall distribution of ANTLR opportunities.
>
> By the way, nice one, Sam, suggesting Honey Badger could use more sugar :-)
>
> Happy New Year all!
>
> -- Graham
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Sun Jan  1 11:41:57 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 11:41:57 -0800
Subject: [antlr-interest] 4.0 daily builds
Message-ID: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>

http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST v4)
http://antlr.org/download/antlr-4.0ea-src.zip

not "official" yet just easier access, no build needed.

Ter

From pgquiles at elpauer.org  Sun Jan  1 12:31:01 2012
From: pgquiles at elpauer.org (Pau Garcia i Quiles)
Date: Sun, 1 Jan 2012 21:31:01 +0100
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
Message-ID: <CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>

Hi,

Great stuff.

It does not work for me with Java 1.6.0_27 or Java 1.7.0, though.
Windows 7 64-bit here.

Also, is there any documentation, what's new, etc anywhere? Do you
plan to update the book(s) for 4.0?


On Sun, Jan 1, 2012 at 8:41 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST v4)
> http://antlr.org/download/antlr-4.0ea-src.zip
>
> not "official" yet just easier access, no build needed.

-- 
Pau Garcia i Quiles
http://www.elpauer.org
(Due to my workload, I may need 10 days to answer)

From kferrio at gmail.com  Sun Jan  1 12:46:37 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Sun, 1 Jan 2012 13:46:37 -0700
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
Message-ID: <CAAfeEToLKmKjV68u_Kb4uMtWVkY8z9EpdiD6+yHCYDX8=vYJhw@mail.gmail.com>

FYI, the antlr-4.0ea-complete.jar which Ter put up today works for me
(64-bit Ubuntu with IcedTea OpenJDK 1.7).  (And it works the same as when I
build 4ea from source.)  You probably already did this, but be sure that
both the antlr 4ea and antlr 3.4 jars are on your CLASSPATH.

K


On Sun, Jan 1, 2012 at 1:31 PM, Pau Garcia i Quiles <pgquiles at elpauer.org>wrote:

> Hi,
>
> Great stuff.
>
> It does not work for me with Java 1.6.0_27 or Java 1.7.0, though.
> Windows 7 64-bit here.
>
> Also, is there any documentation, what's new, etc anywhere? Do you
> plan to update the book(s) for 4.0?
>
>
> On Sun, Jan 1, 2012 at 8:41 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> > http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST
> v4)
> > http://antlr.org/download/antlr-4.0ea-src.zip
> >
> > not "official" yet just easier access, no build needed.
>
> --
> Pau Garcia i Quiles
> http://www.elpauer.org
> (Due to my workload, I may need 10 days to answer)
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Sun Jan  1 12:47:00 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 12:47:00 -0800
Subject: [antlr-interest] some v4 examples
Message-ID: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>

http://www.antlr.org/wiki/display/ANTLR4/Examples

From parrt at cs.usfca.edu  Sun Jan  1 12:57:11 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 12:57:11 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
Message-ID: <4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>

Hi. antlr-4.0ea-complete.jar Should have everything you need. just add it to the class path.  When you say it doesn't work, what do you mean?

check out these examples I just posted

http://www.antlr.org/wiki/display/ANTLR4/Examples

I'm sort of keeping a list of stuff to fix and add here:

http://www.antlr.org/wiki/display/~admin/TODO+list

I don't really have a changes list at this point. I will do a global diff at some point.

Yep, we will definitely need updated documentation and so on. There will be a full formal release eventually and I'm even thinking about rebuilding the website. a book update will be necessary.

The most obvious differences with v4 are:

* (directly) left recursive grammars that works great for expressions
* modes in the lexer
* the lexer rules behave as you'd expect lexer rules to behave now
* it takes any grammar you give it that isn't indirectly left recursive; there are no static grammar analysis errors

"Honey badger doesn't care; its bad ass" :)

Ter

On Jan 1, 2012, at 12:31 PM, Pau Garcia i Quiles wrote:

> Hi,
> 
> Great stuff.
> 
> It does not work for me with Java 1.6.0_27 or Java 1.7.0, though.
> Windows 7 64-bit here.
> 
> Also, is there any documentation, what's new, etc anywhere? Do you
> plan to update the book(s) for 4.0?
> 
> 
> On Sun, Jan 1, 2012 at 8:41 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST v4)
>> http://antlr.org/download/antlr-4.0ea-src.zip
>> 
>> not "official" yet just easier access, no build needed.
> 
> -- 
> Pau Garcia i Quiles
> http://www.elpauer.org
> (Due to my workload, I may need 10 days to answer)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From researcher0x00 at gmail.com  Sun Jan  1 13:05:38 2012
From: researcher0x00 at gmail.com (Eric)
Date: Sun, 1 Jan 2012 16:05:38 -0500
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
Message-ID: <CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>

Ter,


> The most obvious differences with v4 are:
>
> * (directly) left recursive grammars that works great for expressions
> * modes in the lexer
>

What are modes and how do they work. I noticed them looking at the antlr
parser grammar, but could not find any *.g4 file that gave me any help.


> * the lexer rules behave as you'd expect lexer rules to behave now
> * it takes any grammar you give it that isn't indirectly left recursive;
> there are no static grammar analysis errors


There seems to be more steps performed using *.g4 grammars such a tree
validation and refactoring. Could you elaborate on them.


Thanks, Eric

From parrt at cs.usfca.edu  Sun Jan  1 13:18:58 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 13:18:58 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>
Message-ID: <26DD96E3-8DF6-471A-A0A0-E989071CD86F@cs.usfca.edu>


On Jan 1, 2012, at 1:05 PM, Eric wrote:

> Ter,
> 
> 
>> The most obvious differences with v4 are:
>> 
>> * (directly) left recursive grammars that works great for expressions
>> * modes in the lexer
>> 
> 
> What are modes and how do they work. I noticed them looking at the antlr
> parser grammar, but could not find any *.g4 file that gave me any help.

Hi Eric, I'm working on an XML grammar that will demonstrate things nicely. They work well when you have multiple languages within the same file such as inside and outside XML tags. One can also consider the stuff inside of strings to be a different language than the outside. so here is a simple example that treats the 2 differently

lexer grammar L;

STRING_START : '"' {pushMode(STRING_MODE); more();} ;
WS : ' '|'
' {skip();} ;

mode STRING_MODE;
STRING : '"' {popMode();} ;
ANY : . {more();} ;

We start out in default mode and when it sees a doublequote it switches to the string mode and asks the lexer to go get more input. Because we asked for more, lexer looks for more matches and matches a bunch of stuff to ANY and keeps looking.  It's only when we see the final double quote that we pop the modes and return an actual token.

This mode stuff is  ancient as far as I can tell. For example, I see another tool doing it 

http://quex.sourceforge.net/doc/html/basics/modes.html

> 
> 
>> * the lexer rules behave as you'd expect lexer rules to behave now
>> * it takes any grammar you give it that isn't indirectly left recursive;
>> there are no static grammar analysis errors
> 
> 
> There seems to be more steps performed using *.g4 grammars such a tree
> validation and refactoring. Could you elaborate on them.

v4 generates the listener interface and a blank listener for you automatically. To use it, you create a listener and override the method you want and then pass it to the parser. Or, create a visitor that triggers the events on the resulting parse tree. take a look at TestRig because it shows you how to print out the tree and display it after parsing.

Ter

From oliver.zeigermann at gmail.com  Sun Jan  1 13:25:59 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 1 Jan 2012 22:25:59 +0100
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
Message-ID: <CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>

antlr-4.0ea-complete.jar only contains ANTLR4, but not all the other
stuff you need. Stringtemplate and all the ANTLR 3 stuff is missing.
If you add it to class path it does work, though!

@Ter: Not sure if this is a mistake?



2012/1/1 Terence Parr <parrt at cs.usfca.edu>:
> Hi. antlr-4.0ea-complete.jar Should have everything you need. just add it to the class path. ?When you say it doesn't work, what do you mean?
>
> check out these examples I just posted
>
> http://www.antlr.org/wiki/display/ANTLR4/Examples
>
> I'm sort of keeping a list of stuff to fix and add here:
>
> http://www.antlr.org/wiki/display/~admin/TODO+list
>
> I don't really have a changes list at this point. I will do a global diff at some point.
>
> Yep, we will definitely need updated documentation and so on. There will be a full formal release eventually and I'm even thinking about rebuilding the website. a book update will be necessary.
>
> The most obvious differences with v4 are:
>
> * (directly) left recursive grammars that works great for expressions
> * modes in the lexer
> * the lexer rules behave as you'd expect lexer rules to behave now
> * it takes any grammar you give it that isn't indirectly left recursive; there are no static grammar analysis errors
>
> "Honey badger doesn't care; its bad ass" :)
>
> Ter
>
> On Jan 1, 2012, at 12:31 PM, Pau Garcia i Quiles wrote:
>
>> Hi,
>>
>> Great stuff.
>>
>> It does not work for me with Java 1.6.0_27 or Java 1.7.0, though.
>> Windows 7 64-bit here.
>>
>> Also, is there any documentation, what's new, etc anywhere? Do you
>> plan to update the book(s) for 4.0?
>>
>>
>> On Sun, Jan 1, 2012 at 8:41 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>> http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST v4)
>>> http://antlr.org/download/antlr-4.0ea-src.zip
>>>
>>> not "official" yet just easier access, no build needed.
>>
>> --
>> Pau Garcia i Quiles
>> http://www.elpauer.org
>> (Due to my workload, I may need 10 days to answer)
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Sun Jan  1 13:26:55 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 13:26:55 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>
Message-ID: <326504EF-585F-4EED-8A17-CE1C58C9553A@cs.usfca.edu>

damn ant. let me look again. could swear i looked at jar.
Ter
On Jan 1, 2012, at 1:25 PM, Oliver Zeigermann wrote:

> antlr-4.0ea-complete.jar only contains ANTLR4, but not all the other
> stuff you need. Stringtemplate and all the ANTLR 3 stuff is missing.
> If you add it to class path it does work, though!
> 
> @Ter: Not sure if this is a mistake?
> 
> 
> 
> 2012/1/1 Terence Parr <parrt at cs.usfca.edu>:
>> Hi. antlr-4.0ea-complete.jar Should have everything you need. just add it to the class path.  When you say it doesn't work, what do you mean?
>> 
>> check out these examples I just posted
>> 
>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>> 
>> I'm sort of keeping a list of stuff to fix and add here:
>> 
>> http://www.antlr.org/wiki/display/~admin/TODO+list
>> 
>> I don't really have a changes list at this point. I will do a global diff at some point.
>> 
>> Yep, we will definitely need updated documentation and so on. There will be a full formal release eventually and I'm even thinking about rebuilding the website. a book update will be necessary.
>> 
>> The most obvious differences with v4 are:
>> 
>> * (directly) left recursive grammars that works great for expressions
>> * modes in the lexer
>> * the lexer rules behave as you'd expect lexer rules to behave now
>> * it takes any grammar you give it that isn't indirectly left recursive; there are no static grammar analysis errors
>> 
>> "Honey badger doesn't care; its bad ass" :)
>> 
>> Ter
>> 
>> On Jan 1, 2012, at 12:31 PM, Pau Garcia i Quiles wrote:
>> 
>>> Hi,
>>> 
>>> Great stuff.
>>> 
>>> It does not work for me with Java 1.6.0_27 or Java 1.7.0, though.
>>> Windows 7 64-bit here.
>>> 
>>> Also, is there any documentation, what's new, etc anywhere? Do you
>>> plan to update the book(s) for 4.0?
>>> 
>>> 
>>> On Sun, Jan 1, 2012 at 8:41 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>> http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST v4)
>>>> http://antlr.org/download/antlr-4.0ea-src.zip
>>>> 
>>>> not "official" yet just easier access, no build needed.
>>> 
>>> --
>>> Pau Garcia i Quiles
>>> http://www.elpauer.org
>>> (Due to my workload, I may need 10 days to answer)
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Sun Jan  1 13:34:26 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 1 Jan 2012 13:34:26 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <326504EF-585F-4EED-8A17-CE1C58C9553A@cs.usfca.edu>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>
	<326504EF-585F-4EED-8A17-CE1C58C9553A@cs.usfca.edu>
Message-ID: <D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>

I told you not to abandon maven ;)

Jim

On Jan 1, 2012, at 13:26, Terence Parr <parrt at cs.usfca.edu> wrote:

> damn ant. let me look again. could swear i looked at jar.
> Ter
> On Jan 1, 2012, at 1:25 PM, Oliver Zeigermann wrote:
> 
>> antlr-4.0ea-complete.jar only contains ANTLR4, but not all the other
>> stuff you need. Stringtemplate and all the ANTLR 3 stuff is missing.
>> If you add it to class path it does work, though!
>> 
>> @Ter: Not sure if this is a mistake?
>> 
>> 
>> 
>> 2012/1/1 Terence Parr <parrt at cs.usfca.edu>:
>>> Hi. antlr-4.0ea-complete.jar Should have everything you need. just add it to the class path.  When you say it doesn't work, what do you mean?
>>> 
>>> check out these examples I just posted
>>> 
>>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>>> 
>>> I'm sort of keeping a list of stuff to fix and add here:
>>> 
>>> http://www.antlr.org/wiki/display/~admin/TODO+list
>>> 
>>> I don't really have a changes list at this point. I will do a global diff at some point.
>>> 
>>> Yep, we will definitely need updated documentation and so on. There will be a full formal release eventually and I'm even thinking about rebuilding the website. a book update will be necessary.
>>> 
>>> The most obvious differences with v4 are:
>>> 
>>> * (directly) left recursive grammars that works great for expressions
>>> * modes in the lexer
>>> * the lexer rules behave as you'd expect lexer rules to behave now
>>> * it takes any grammar you give it that isn't indirectly left recursive; there are no static grammar analysis errors
>>> 
>>> "Honey badger doesn't care; its bad ass" :)
>>> 
>>> Ter
>>> 
>>> On Jan 1, 2012, at 12:31 PM, Pau Garcia i Quiles wrote:
>>> 
>>>> Hi,
>>>> 
>>>> Great stuff.
>>>> 
>>>> It does not work for me with Java 1.6.0_27 or Java 1.7.0, though.
>>>> Windows 7 64-bit here.
>>>> 
>>>> Also, is there any documentation, what's new, etc anywhere? Do you
>>>> plan to update the book(s) for 4.0?
>>>> 
>>>> 
>>>> On Sun, Jan 1, 2012 at 8:41 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>>>> http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST v4)
>>>>> http://antlr.org/download/antlr-4.0ea-src.zip
>>>>> 
>>>>> not "official" yet just easier access, no build needed.
>>>> 
>>>> --
>>>> Pau Garcia i Quiles
>>>> http://www.elpauer.org
>>>> (Due to my workload, I may need 10 days to answer)
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From researcher0x00 at gmail.com  Sun Jan  1 13:51:13 2012
From: researcher0x00 at gmail.com (Eric)
Date: Sun, 1 Jan 2012 16:51:13 -0500
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>
	<326504EF-585F-4EED-8A17-CE1C58C9553A@cs.usfca.edu>
	<D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>
Message-ID: <CAN45N11DG0uAYz1RhkGpz8f9g9PUDyyo8AdDbw7m7w_-gNjDyQ@mail.gmail.com>

Ter,

A few weeks ago I built the antlr4 jar file using ant and noticed that the
jar was missing the line in the META-INF/MANIFEST.MF file.

i.e. Main-Class: org.antlr.v4.Tool

Don't know if that also needs fixing.

Thanks for the quick response. I guess the honey badger is off to a fast
start.

Eric

From s.barnett-cormack at lancaster.ac.uk  Sun Jan  1 13:53:57 2012
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 01 Jan 2012 21:53:57 +0000
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <26DD96E3-8DF6-471A-A0A0-E989071CD86F@cs.usfca.edu>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>
	<26DD96E3-8DF6-471A-A0A0-E989071CD86F@cs.usfca.edu>
Message-ID: <4F00D5F5.1080405@lancaster.ac.uk>

On 01/01/2012 21:18, Terence Parr wrote:
>
> On Jan 1, 2012, at 1:05 PM, Eric wrote:
>
>> Ter,
>>
>>
>>> The most obvious differences with v4 are:
>>>
>>> * (directly) left recursive grammars that works great for expressions
>>> * modes in the lexer
>>>
>>
>> What are modes and how do they work. I noticed them looking at the antlr
>> parser grammar, but could not find any *.g4 file that gave me any help.
>
> Hi Eric, I'm working on an XML grammar that will demonstrate things nicely. They work well when you have multiple languages within the same file such as inside and outside XML tags. One can also consider the stuff inside of strings to be a different language than the outside. so here is a simple example that treats the 2 differently
>
> lexer grammar L;
>
> STRING_START : '"' {pushMode(STRING_MODE); more();} ;
> WS : ' '|'
> ' {skip();} ;
>
> mode STRING_MODE;
> STRING : '"' {popMode();} ;
> ANY : . {more();} ;
>
> We start out in default mode and when it sees a doublequote it switches to the string mode and asks the lexer to go get more input. Because we asked for more, lexer looks for more matches and matches a bunch of stuff to ANY and keeps looking.  It's only when we see the final double quote that we pop the modes and return an actual token.
>
> This mode stuff is  ancient as far as I can tell. For example, I see another tool doing it

Thinking back to when I was trying to implement ASN.1, such a nicety 
would have been useful in the parser as well. I guess the complication 
there is that looking ahead is handled in a more complicated way (it's 
not considering every possibility on a regular basis), but I'm not sure 
if that would be a deal breaker.

Then again, it might be possible to do something like that with lexer 
modes and multiple parsers.

What I immediately wonder is, in the special rules for inside the mode, 
can you generate tokens within it, or does a mode always have to return 
a single token? Can the special rules modify the text they're matching 
in terms of the text the eventual token gets? That would be particularly 
useful in the string example, to actually process escape sequences right 
there in the lexer.

Sam


From s.barnett-cormack at lancaster.ac.uk  Sun Jan  1 13:55:31 2012
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Sun, 01 Jan 2012 21:55:31 +0000
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>
	<326504EF-585F-4EED-8A17-CE1C58C9553A@cs.usfca.edu>
	<D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>
Message-ID: <4F00D653.70404@lancaster.ac.uk>

Maven was abandoned? Darn it, I just got used to using that last time I 
was working on a project using ANTLR... every time I've looked at using 
ant it just pissed me off, far too much complexity for simple tasks.

Sam

On 01/01/2012 21:34, Jim Idle wrote:
> I told you not to abandon maven ;)
>
> Jim
>
> On Jan 1, 2012, at 13:26, Terence Parr<parrt at cs.usfca.edu>  wrote:
>
>> damn ant. let me look again. could swear i looked at jar.
>> Ter
>> On Jan 1, 2012, at 1:25 PM, Oliver Zeigermann wrote:
>>
>>> antlr-4.0ea-complete.jar only contains ANTLR4, but not all the other
>>> stuff you need. Stringtemplate and all the ANTLR 3 stuff is missing.
>>> If you add it to class path it does work, though!
>>>
>>> @Ter: Not sure if this is a mistake?
>>>
>>>
>>>
>>> 2012/1/1 Terence Parr<parrt at cs.usfca.edu>:
>>>> Hi. antlr-4.0ea-complete.jar Should have everything you need. just add it to the class path.  When you say it doesn't work, what do you mean?
>>>>
>>>> check out these examples I just posted
>>>>
>>>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>>>>
>>>> I'm sort of keeping a list of stuff to fix and add here:
>>>>
>>>> http://www.antlr.org/wiki/display/~admin/TODO+list
>>>>
>>>> I don't really have a changes list at this point. I will do a global diff at some point.
>>>>
>>>> Yep, we will definitely need updated documentation and so on. There will be a full formal release eventually and I'm even thinking about rebuilding the website. a book update will be necessary.
>>>>
>>>> The most obvious differences with v4 are:
>>>>
>>>> * (directly) left recursive grammars that works great for expressions
>>>> * modes in the lexer
>>>> * the lexer rules behave as you'd expect lexer rules to behave now
>>>> * it takes any grammar you give it that isn't indirectly left recursive; there are no static grammar analysis errors
>>>>
>>>> "Honey badger doesn't care; its bad ass" :)
>>>>
>>>> Ter
>>>>
>>>> On Jan 1, 2012, at 12:31 PM, Pau Garcia i Quiles wrote:
>>>>
>>>>> Hi,
>>>>>
>>>>> Great stuff.
>>>>>
>>>>> It does not work for me with Java 1.6.0_27 or Java 1.7.0, though.
>>>>> Windows 7 64-bit here.
>>>>>
>>>>> Also, is there any documentation, what's new, etc anywhere? Do you
>>>>> plan to update the book(s) for 4.0?
>>>>>
>>>>>
>>>>> On Sun, Jan 1, 2012 at 8:41 PM, Terence Parr<parrt at cs.usfca.edu>  wrote:
>>>>>> http://antlr.org/download/antlr-4.0ea-complete.jar (ANTLR v4, v3 and ST v4)
>>>>>> http://antlr.org/download/antlr-4.0ea-src.zip
>>>>>>
>>>>>> not "official" yet just easier access, no build needed.
>>>>>
>>>>> --
>>>>> Pau Garcia i Quiles
>>>>> http://www.elpauer.org
>>>>> (Due to my workload, I may need 10 days to answer)
>>>>>
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Sun Jan  1 14:38:00 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 14:38:00 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>
	<326504EF-585F-4EED-8A17-CE1C58C9553A@cs.usfca.edu>
	<D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>
Message-ID: <9D01A625-32E6-4F4A-8957-5DFC70ACFE32@cs.usfca.edu>


On Jan 1, 2012, at 1:34 PM, Jim Idle wrote:

> I told you not to abandon maven ;)

ha! ;)  At least i figured ant out on my own. maven is opaque to me.  You can create the mvn plugin though for v4 :)

Ter

From parrt at cs.usfca.edu  Sun Jan  1 14:41:59 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 14:41:59 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <CAN45N11DG0uAYz1RhkGpz8f9g9PUDyyo8AdDbw7m7w_-gNjDyQ@mail.gmail.com>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CABJr57AbFnynokzk5a-zb-HLR33P8sFPcWUhs2uEbFqLdVWaMA@mail.gmail.com>
	<326504EF-585F-4EED-8A17-CE1C58C9553A@cs.usfca.edu>
	<D8FD4F70-1461-4CF6-AF8B-68F5734DA298@temporal-wave.com>
	<CAN45N11DG0uAYz1RhkGpz8f9g9PUDyyo8AdDbw7m7w_-gNjDyQ@mail.gmail.com>
Message-ID: <24E37F37-1FC3-4A8B-8A2C-940F7351379E@cs.usfca.edu>

Thanks! fixed. pushed.
Ter
On Jan 1, 2012, at 1:51 PM, Eric wrote:

> Ter,
> 
> A few weeks ago I built the antlr4 jar file using ant and noticed that the
> jar was missing the line in the META-INF/MANIFEST.MF file.
> 
> i.e. Main-Class: org.antlr.v4.Tool
> 
> Don't know if that also needs fixing.
> 
> Thanks for the quick response. I guess the honey badger is off to a fast
> start.
> 
> Eric
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sun Jan  1 14:44:04 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 14:44:04 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <4F00D5F5.1080405@lancaster.ac.uk>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>
	<26DD96E3-8DF6-471A-A0A0-E989071CD86F@cs.usfca.edu>
	<4F00D5F5.1080405@lancaster.ac.uk>
Message-ID: <F3E707EA-88CB-4D13-9BD3-48EAE4F4F2D3@cs.usfca.edu>


On Jan 1, 2012, at 1:53 PM, Sam Barnett-Cormack wrote:
> Then again, it might be possible to do something like that with lexer 
> modes and multiple parsers.

Sure. You could send the different tokens on different channels and then use different parsers to handle each channel.

> What I immediately wonder is, in the special rules for inside the mode, 
> can you generate tokens within it, or does a mode always have to return 
> a single token?

Well, the lexer always returns a single token unless you explicitly tell it to emit more than one for every call to nextToken.  the modes do nothing but group the rules. I create a different state machine for each mode and so matching only finds tokens that are valid for that mode.

> Can the special rules modify the text they're matching 
> in terms of the text the eventual token gets?

sure by setting this.text.

> That would be particularly 
> useful in the string example, to actually process escape sequences right 
> there in the lexer.

Ter

From parrt at cs.usfca.edu  Sun Jan  1 15:04:08 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 1 Jan 2012 15:04:08 -0800
Subject: [antlr-interest] lexical modes and XML grammar
Message-ID: <FAA14270-0041-4B19-949F-775A43A0A7BC@cs.usfca.edu>

http://www.antlr.org/wiki/download/attachments/28049418/XMLParser.g4
http://www.antlr.org/wiki/download/attachments/28049418/XMLLexer.g4

handles unicode tags etc?

I run with

$ for f in XML-inputs/*.xml; do echo $f; j org.antlr.v4.runtime.misc.TestRig XML document -print $f; done

add -encoding euc-jp flag to read euc-jp encoded xml file, for example.

v4 makes short work of xml now.

Ter

From opensource at peoplemerge.com  Sun Jan  1 20:21:36 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Sun, 1 Jan 2012 23:21:36 -0500
Subject: [antlr-interest] Composite grammar support in antlr4.0ea
Message-ID: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>

With all this exciting Honey Badger activity (which is just crazy and
doesn't give a shit), I thought I'd bump this "Redefinition of header
action" thread and attach a minimal tarball with code for your convenience!

I get the same result with antlr-4.0ea (as I did with 3.4 nicely mavenized)
by running:
cd src/main/antlr3; java  -cp
/path/to/antlr-4.0ea-complete.jar:/path/to/ST-4.0.4.jar org.antlr.Tool
test/*.g -o ../../../target
error(144): JavaDecl.g:3:2: redefinition of header action


On Tue, Nov 22, 2011 at 9:07 PM, Dave Thomas <opensource at peoplemerge.com>wrote:

> Hi all,
>
> I'm using ANTLR for my masters thesis, which includes letting user extend
> the lex and parser grammars I supply with their own jargon in the form of a
> combined grammar.  I wouldn't have dreamed it possible before ANTLR, and
> I'm a big fan!
>
> The problem I'm having is:
> error(144): JavaDecl.g:3:2: redefinition of header action
>
> The reason this is making me scratch my head is that I see this issue has
> been reported, and AFAICT addressed:
> http://www.antlr.org/jira/browse/ANTLR-301
> http://www.antlr.org/jira/browse/ANTLR-370
>  http://www.antlr.org/jira/browse/ANTLR-375
> http://www.antlr.org/pipermail/antlr-interest/2011-January/040487.html
> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars (basis for
> the examples; sorry for the cross-post)
>
> Am I specifying the antlr release wrong in the maven plugin?
>
> Should I be concerned that my dependency hierarchy includes antlr 2.7.7?
>  Per http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3.4+Release+Notes the
> dependency on v2 should be removed, but I still see it when I do `mvn clean
> antlr3:antlr compile -X`:
>
> [DEBUG]    org.antlr:antlr:jar:3.4:compile
> [DEBUG]       org.antlr:antlr-runtime:jar:3.4:compile
> [DEBUG]          org.antlr:stringtemplate:jar:3.2.1:compile
> [DEBUG]          antlr:antlr:jar:2.7.7:compile
>
>
> src/main/antlr3/test/JLex.g
>
> lexer grammar JLex;
> @lexer::header { package test; }
>
> INT : 'int';
> SEMICOLON : ';';
> EQUALS : '=';
> ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
>
>
> src/main/antlr3/test/JavaDecl.g
>
> parser grammar JavaDecl;
> @header { package test; }
> type : INT ;
> decl : type ID SEMICOLON
>      | type ID init SEMICOLON
>      ;
> init : EQUALS INT ;
>
>
> src/main/antlr3/test/Java.g:
>
> grammar Java;
> import JavaDecl, JLex;
> @header { package test; }
> prog : decl ;
> type : 'int' | 'float' ;
>
> pom.xml:
>
> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
> http://www.w3.org/2001/XMLSchema-instance"
>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
> http://maven.apache.org/xsd/maven-4.0.0.xsd">
>  <modelVersion>4.0.0</modelVersion>
> <groupId>test</groupId>
>  <artifactId>test</artifactId>
> <packaging>jar</packaging>
>  <version>1.0-SNAPSHOT</version>
> <name>test</name>
>  <build>
> <plugins>
> <plugin>
>  <groupId>org.antlr</groupId>
> <artifactId>antlr3-maven-plugin</artifactId>
>  <version>3.4</version>
> <executions>
> <execution>
>  <configuration>
> <goals>
> <goal>antlr</goal>
>  </goals>
> </configuration>
> </execution>
>  </executions>
> </plugin>
> </plugins>
>  </build>
> </project>
>
>
>
>
>
>
>
>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: antlr-header.tar
Type: application/x-tar
Size: 20480 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20120101/45fa5b04/attachment.tar 

From kferrio at gmail.com  Sun Jan  1 20:32:17 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Sun, 1 Jan 2012 21:32:17 -0700
Subject: [antlr-interest] some v4 examples
In-Reply-To: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
References: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
Message-ID: <CAAfeETr-AfeJPBjRuoZOdfPVL32d2W5gJUtTCL3MQUGNF3aCcA@mail.gmail.com>

Wow.  After just a few minutes with the R example I am really enjoying the
(direct) left recursion.  I have not played with associativity yet, but I
will.  Honey Badger takes my favorite aspects of flex/bison and makes them
better with LL(*).  I think most of us have to embed algebraic parsers in
larger DSLs pretty often.  Being able to use left-recursion directly makes
it really easy to see what's going on.  Woot!

By the way, not that anyone else would be crazy ewnough to do this, but I
threw the R example from http://www.mayin.org/ajayshah/KB/R/html/b1.html at
TestRig -gui and it failed to render on my box.  Could be a memory issue
but -print and -tokens worked just fine.  It looks like the dotviz-esque
gui window was created and disappeared before I could see it.  No matter,
TestRig is a very handy tool and not meant to be an IDE.

Kyle


On Sun, Jan 1, 2012 at 1:47 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> http://www.antlr.org/wiki/display/ANTLR4/Examples
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From michael.bedward at gmail.com  Sun Jan  1 23:14:07 2012
From: michael.bedward at gmail.com (Michael Bedward)
Date: Mon, 2 Jan 2012 18:14:07 +1100
Subject: [antlr-interest] some v4 examples
In-Reply-To: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
References: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
Message-ID: <CACJVtdNqMFmiBKhOODwtKDKmxkw-2Hj-nuzRfrq+7rzuAn2SsA@mail.gmail.com>

I've written a lot of R scripts so was particularly keen to see the v4
R grammar. I must say that it seems so straightforward that it's
almost creepy after being used to thinking of left recursion as a
mortal sin. Getting used to this, together with what sounds like the
effective deprecation of ASTs (as far as I understand that from recent
discussions), I can see quite a bit of unlearning is going to be
required.

Not a complaint - just an observation.

Michael

On 2 January 2012 07:47, Terence Parr <parrt at cs.usfca.edu> wrote:
> http://www.antlr.org/wiki/display/ANTLR4/Examples
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From ruben.laguna at gmail.com  Mon Jan  2 03:52:16 2012
From: ruben.laguna at gmail.com (Ruben Laguna)
Date: Mon, 2 Jan 2012 12:52:16 +0100
Subject: [antlr-interest] antlr3-maven-plugin tries to generate the
 xxxLexer.java when using a combined lexer/parser grammar
In-Reply-To: <CAFOAOWJ5-t5PE+t2B_NN=T9xj+XNwn+49Eje4L+Q41OM=YeN-Q@mail.gmail.com>
References: <CAFOAOWJ5-t5PE+t2B_NN=T9xj+XNwn+49Eje4L+Q41OM=YeN-Q@mail.gmail.com>
Message-ID: <CAFOAOW+i1bgFxK8npoA+H6JztLo5qAW8LrWtGO80C4aS1ucf1Q@mail.gmail.com>

Hi,

I'm experiencing the following exception.

[INFO] ANTLR: Processing source directory
C:\Users\ecerulm\IdeaProjects\BodyMethodParser\src\main\antlr3
ANTLR Parser Generator ?Version 3.4
com\rubenlaguna\cppbody\CppBody.g
error(1): ?cannot write file : java.io.FileNotFoundException:
C:\Users\ecerulm\IdeaProjects\BodyMethodParser\target\generated-sources\antlr3\C:\Users\ecerulm\IdeaProjects\BodyMethodParser\src\main\antlr3\CppBodyLexer.java
(The filename, directory name, or volume label syntax is incorrect)
java.io.FileOutputStream.open(Native Method)
java.io.FileOutputStream.<init>(FileOutputStream.java:179)
java.io.FileOutputStream.<init>(FileOutputStream.java:131)
java.io.FileWriter.<init>(FileWriter.java:73)
org.antlr.Tool.getOutputFile(Tool.java:871)
org.antlr.codegen.CodeGenerator.write(CodeGenerator.java:1262)
org.antlr.codegen.Target.genRecognizerFile(Target.java:94)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:460)
org.antlr.Tool.generateRecognizer(Tool.java:655)
org.antlr.Tool.process(Tool.java:524)
org.antlr.mojo.antlr3.Antlr3Mojo.execute(Antlr3Mojo.java:378)


It seems like the filename for the implicitly generated lexer.java is
faulty, it appends the absolute path to the output dir so there are
two "c:\" in the filename. I look into the source code and the problem
(IMHO) seems to be in Tool.java although I'm surprised that nobody has
experienced the same problem yet. So I'm wondering if I'm doing
something wrong. Anyway, I just did a quick fix in
org.antlr.Tool.process() that I'm attaching a patch here. I don't
claim that it's the way to go but it gets the Lexer.java file in the
proper directory (at least when using maven) but I didn't test it in
standalon (not maven) and don't know if it will break anything else.
So

Does anybody has the same problem when using maven and combined
grammars? Should I try to report this bug in other way or the antlr
developers usually read this mailing list?

Best regards,

--
/Rub?n
-------------- next part --------------
A non-text attachment was scrubbed...
Name: bug_fix__lexer_file_is_generated_in_proper_directory1.patch
Type: application/octet-stream
Size: 1048 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20120102/fc760bc1/attachment.obj 

From ramadevi.java at gmail.com  Mon Jan  2 04:12:22 2012
From: ramadevi.java at gmail.com (Rama Devi)
Date: Mon, 2 Jan 2012 17:42:22 +0530
Subject: [antlr-interest] Need help in generating the line numbers
Message-ID: <CAJoZY+8K6Uv79z0peQ6h_cQhK8NffeaGqgiYJyFAgKvZhkfRKQ@mail.gmail.com>

Hi,

While getting errors the line number always shows 1 irrespective of the
line number where actually the error occurs.  Please help me in how to get
correct line number.


Regards
Rama.

From r.gruendler at gmail.com  Mon Jan  2 06:30:04 2012
From: r.gruendler at gmail.com (=?ISO-8859-1?Q?Robert_Gr=FCndler?=)
Date: Mon, 2 Jan 2012 15:30:04 +0100
Subject: [antlr-interest] Dynamic token matching
Message-ID: <CANkJESsiy8rx8QRXFPKiYc402z2xm6SuiT0Z+VFXeXezDAeJ=A@mail.gmail.com>

Hi,

the templating language i'm trying to create a parser for has the feature
to configure some delimiters, for example a print statements looks like
this by default:

{{  someVariable }}

and it's possible to configure the opening and closing delimiter.

Now when i look at the generated lexer, in my mT_OPEN_PRINT() rule the code
looks like this:

...

match("{{");

...

Is there a way to avoid the hardcoded "{{" in the call to match()?
something like:

..

match(this.LEFT_DELIM);

...

This way i could extend the lexer and make the delimters configurable.


regards

-robert

From peterpiper797 at hotmail.com  Mon Jan  2 06:31:59 2012
From: peterpiper797 at hotmail.com (Peter Piper)
Date: Mon, 2 Jan 2012 14:31:59 +0000
Subject: [antlr-interest] Stack overflow in Antlr extensions
Message-ID: <BAY155-W446B5EE1FD28C0FD1701B2FE910@phx.gbl>


Thank you, Sam, for the extensions, they are very useful! However, I think I may have come across a problem. It's probably because of the messy way that I write code but, consider a grammar like this:

   myRule : subRule anotherSub*
           ;

   subRule : SOMETHING
          ;

   anotherSub
          : SOMETHINGELSE
          ;

If I change the anotherSub to insert a new clause at the start (i.e. hit Enter and '|'):

   anotherSub
          :
          | SOMETHINGELSE

          ;


and then hit "Save", Visual Studio 2010 will crash, apparently with a Stack Overflow (sometimes it tells me that's the problem and other times it just freezes).

I checked today that I'm using version 1.0.6.318 of the extensions which I believe to be the latest. I get the impression that something doesn't like the infinite loop that this generates. Also, I assume it's the extensions because I'm not building the grammar, merely editing it; unless, of course, the extensions are invoking Antlr3 behind the scenes?

Yours,

Dan

 		 	   		  

From bkiers at gmail.com  Mon Jan  2 06:51:44 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 2 Jan 2012 15:51:44 +0100
Subject: [antlr-interest] Dynamic token matching
In-Reply-To: <CANkJESsiy8rx8QRXFPKiYc402z2xm6SuiT0Z+VFXeXezDAeJ=A@mail.gmail.com>
References: <CANkJESsiy8rx8QRXFPKiYc402z2xm6SuiT0Z+VFXeXezDAeJ=A@mail.gmail.com>
Message-ID: <CAOrgODbaxBb9eXkovfiGu2CV4oXUMdu2PtPTv0ALZ_W5g5AXfA@mail.gmail.com>

>
> Is there a way to avoid the hardcoded "{{" in the call to match()?
> something like:
>
> ..
>
> match(this.LEFT_DELIM);
>
>
>

Sure, try something like this:

---------------------------------------------------------------------
grammar Test;

@parser::members {
  public static void main(String[] args) throws Exception {
    TestLexer lexer = new TestLexer(new ANTLRStringStream("foo {{ bar ?>
42"));
    TestParser parser = new TestParser(new CommonTokenStream(lexer));
    parser.parse();
  }
}

@lexer::members {

  String TXT_OPEN = "{{";
  String TXT_CLOSE = "?>";

  boolean ahead(String str) {
    for(int i = 0; i < str.length(); i++) {
      if(input.LA(i + 1) != str.charAt(i)) {
        return false;
      }
    }
    return true;
  }
}

parse
 : (t=. {System.out.printf("\%-10s '\%s'\n", tokenNames[$t.type],
$t.text);})* EOF
 ;

OPEN
 : {ahead(TXT_OPEN)}?=> {match(TXT_OPEN);}
 ;

CLOSE
 : {ahead(TXT_CLOSE)}?=> {match(TXT_CLOSE);}
 ;

IDENT  : LETTER+;
NUMBER : DIGIT+;
SPACE  : (' ' | '\t' | '\r' | '\n') {$channel=HIDDEN;};

fragment LETTER : ('a'..'z' | 'A'..'Z');
fragment DIGIT  : '0'..'9';
---------------------------------------------------------------------

which  would print:

IDENT      'foo'
OPEN       '{{'
IDENT      'bar'
CLOSE      '?>'
NUMBER     '42'

Regards,

Bart.

From parrt at cs.usfca.edu  Mon Jan  2 09:30:31 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jan 2012 09:30:31 -0800
Subject: [antlr-interest] some v4 examples
In-Reply-To: <CAAfeETr-AfeJPBjRuoZOdfPVL32d2W5gJUtTCL3MQUGNF3aCcA@mail.gmail.com>
References: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
	<CAAfeETr-AfeJPBjRuoZOdfPVL32d2W5gJUtTCL3MQUGNF3aCcA@mail.gmail.com>
Message-ID: <502AB68A-0EDA-4B00-88D0-242920BDED59@cs.usfca.edu>


On Jan 1, 2012, at 8:32 PM, Kyle Ferrio wrote:

> Wow.  After just a few minutes with the R example I am really enjoying the
> (direct) left recursion.  I have not played with associativity yet, but I
> will.  Honey Badger takes my favorite aspects of flex/bison and makes them
> better with LL(*).  I think most of us have to embed algebraic parsers in
> larger DSLs pretty often.  Being able to use left-recursion directly makes
> it really easy to see what's going on.  Woot!

Honey badger will take whatever you give it, as long as it is not indirectly left recursive. It doesn't give a shit. :)

> By the way, not that anyone else would be crazy ewnough to do this, but I
> threw the R example from http://www.mayin.org/ajayshah/KB/R/html/b1.html at
> TestRig -gui and it failed to render on my box.  Could be a memory issue
> but -print and -tokens worked just fine.  It looks like the dotviz-esque
> gui window was created and disappeared before I could see it.  No matter,
> TestRig is a very handy tool and not meant to be an IDE.

The R grammar requires the special TestR.java test rig because I put a filter between the lexer in the parser so that it handles the context-sensitive newlines properly. In other words, it ignores newlines within an expression but still uses \n to terminate expressions. took me quite a long time to figure out the optimal solution.

Ter

From parrt at cs.usfca.edu  Mon Jan  2 09:31:28 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jan 2012 09:31:28 -0800
Subject: [antlr-interest] some v4 examples
In-Reply-To: <CACJVtdNqMFmiBKhOODwtKDKmxkw-2Hj-nuzRfrq+7rzuAn2SsA@mail.gmail.com>
References: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
	<CACJVtdNqMFmiBKhOODwtKDKmxkw-2Hj-nuzRfrq+7rzuAn2SsA@mail.gmail.com>
Message-ID: <7BA3B839-38C1-42D9-9783-388FF8874E2C@cs.usfca.edu>


On Jan 1, 2012, at 11:14 PM, Michael Bedward wrote:

> I've written a lot of R scripts so was particularly keen to see the v4
> R grammar. I must say that it seems so straightforward that it's
> almost creepy after being used to thinking of left recursion as a
> mortal sin.

i know.Isn't it weird?

> Getting used to this, together with what sounds like the
> effective deprecation of ASTs (as far as I understand that from recent
> discussions), I can see quite a bit of unlearning is going to be
> required.
> 
> Not a complaint - just an observation.

The good news is that you will unload a huge albatross around your neck and then not have to learn much at all to use the new listeners. It's just simple Java code, or whatever your target will be.

Ter

From parrt at cs.usfca.edu  Mon Jan  2 09:36:54 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jan 2012 09:36:54 -0800
Subject: [antlr-interest] Composite grammar support in antlr4.0ea
In-Reply-To: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>
References: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>
Message-ID: <AD665888-09AB-4C49-8705-FDADC1A9B655@cs.usfca.edu>

Hi Dave,Because the subordinate important grammars are not complete, they should not have a header that specifies the package. Very least, it's more flexible to not force subordinate grammars into certain packages. Is correct that you have duplicate header definition because you specify the package twice.

v4 didn't complain about this so I will have to add an error.
Thanks,
Ter
On Jan 1, 2012, at 8:21 PM, Dave Thomas wrote:

> With all this exciting Honey Badger activity (which is just crazy and
> doesn't give a shit), I thought I'd bump this "Redefinition of header
> action" thread and attach a minimal tarball with code for your convenience!
> 
> I get the same result with antlr-4.0ea (as I did with 3.4 nicely mavenized)
> by running:
> cd src/main/antlr3; java  -cp
> /path/to/antlr-4.0ea-complete.jar:/path/to/ST-4.0.4.jar org.antlr.Tool
> test/*.g -o ../../../target
> error(144): JavaDecl.g:3:2: redefinition of header action
> 
> 
> On Tue, Nov 22, 2011 at 9:07 PM, Dave Thomas <opensource at peoplemerge.com>wrote:
> 
>> Hi all,
>> 
>> I'm using ANTLR for my masters thesis, which includes letting user extend
>> the lex and parser grammars I supply with their own jargon in the form of a
>> combined grammar.  I wouldn't have dreamed it possible before ANTLR, and
>> I'm a big fan!
>> 
>> The problem I'm having is:
>> error(144): JavaDecl.g:3:2: redefinition of header action
>> 
>> The reason this is making me scratch my head is that I see this issue has
>> been reported, and AFAICT addressed:
>> http://www.antlr.org/jira/browse/ANTLR-301
>> http://www.antlr.org/jira/browse/ANTLR-370
>> http://www.antlr.org/jira/browse/ANTLR-375
>> http://www.antlr.org/pipermail/antlr-interest/2011-January/040487.html
>> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars (basis for
>> the examples; sorry for the cross-post)
>> 
>> Am I specifying the antlr release wrong in the maven plugin?
>> 
>> Should I be concerned that my dependency hierarchy includes antlr 2.7.7?
>> Per http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3.4+Release+Notes the
>> dependency on v2 should be removed, but I still see it when I do `mvn clean
>> antlr3:antlr compile -X`:
>> 
>> [DEBUG]    org.antlr:antlr:jar:3.4:compile
>> [DEBUG]       org.antlr:antlr-runtime:jar:3.4:compile
>> [DEBUG]          org.antlr:stringtemplate:jar:3.2.1:compile
>> [DEBUG]          antlr:antlr:jar:2.7.7:compile
>> 
>> 
>> src/main/antlr3/test/JLex.g
>> 
>> lexer grammar JLex;
>> @lexer::header { package test; }
>> 
>> INT : 'int';
>> SEMICOLON : ';';
>> EQUALS : '=';
>> ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
>> 
>> 
>> src/main/antlr3/test/JavaDecl.g
>> 
>> parser grammar JavaDecl;
>> @header { package test; }
>> type : INT ;
>> decl : type ID SEMICOLON
>>     | type ID init SEMICOLON
>>     ;
>> init : EQUALS INT ;
>> 
>> 
>> src/main/antlr3/test/Java.g:
>> 
>> grammar Java;
>> import JavaDecl, JLex;
>> @header { package test; }
>> prog : decl ;
>> type : 'int' | 'float' ;
>> 
>> pom.xml:
>> 
>> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
>> http://www.w3.org/2001/XMLSchema-instance"
>> xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
>> http://maven.apache.org/xsd/maven-4.0.0.xsd">
>> <modelVersion>4.0.0</modelVersion>
>> <groupId>test</groupId>
>> <artifactId>test</artifactId>
>> <packaging>jar</packaging>
>> <version>1.0-SNAPSHOT</version>
>> <name>test</name>
>> <build>
>> <plugins>
>> <plugin>
>> <groupId>org.antlr</groupId>
>> <artifactId>antlr3-maven-plugin</artifactId>
>> <version>3.4</version>
>> <executions>
>> <execution>
>> <configuration>
>> <goals>
>> <goal>antlr</goal>
>> </goals>
>> </configuration>
>> </execution>
>> </executions>
>> </plugin>
>> </plugins>
>> </build>
>> </project>
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
> <antlr-header.tar>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From goodwin at essence-property.com  Mon Jan  2 09:45:03 2012
From: goodwin at essence-property.com (goodwin)
Date: Mon, 02 Jan 2012 17:45:03 +0000
Subject: [antlr-interest] Pie and simple expression calculator
Message-ID: <WC20120102174503.520002@essence-property.com>


I am new to ANTLR, and want some capabilities similar to Pie and the 
expression calculator, as extended with functions. I work with floating 
point data, and want to extend the intrinsic functions (e.g. Sin, Cos etc.) 
and all calculations will actually be done on float arrays.


I want a simple grammar suitable for engineers - not too sure whether Python 
is the best starting point...I myself prefer a few brackets and endif etc.


However, the implementations of Pie and the simple expression calculator are 
very different.


Do you think it is best for me to start with Pie and adapt it for my needs, 
or look at both approaches and learn from them both?


My main purpose is to progress rapidly, not to become an expert in ANTLR.

From kferrio at gmail.com  Mon Jan  2 10:10:51 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Mon, 2 Jan 2012 11:10:51 -0700
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120102174503.520002@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
Message-ID: <CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>

Your language ounds a little like MATLAB. Someone posted an approximate
MATLAB grammar a few months ago for antlr 3.x.

If you are familiar with classic "calculator" examples for flex/bison, then
you might really like how Honey Badger (antlr 4) makes short work of
expression parsing.

If you want to get going quickly, you might want to avoid things like
pythonesque significant whitespace.  And strongly visual scope delimiters
may make it easier to get started.  Your resulting language would not be
the first to be accused of being "noisy."  :)

Kyle
 On Jan 2, 2012 10:45 AM, "goodwin" <goodwin at essence-property.com> wrote:

>
> I am new to ANTLR, and want some capabilities similar to Pie and the
> expression calculator, as extended with functions. I work with floating
> point data, and want to extend the intrinsic functions (e.g. Sin, Cos etc.)
> and all calculations will actually be done on float arrays.
>
>
> I want a simple grammar suitable for engineers - not too sure whether
> Python
> is the best starting point...I myself prefer a few brackets and endif etc.
>
>
> However, the implementations of Pie and the simple expression calculator
> are
> very different.
>
>
> Do you think it is best for me to start with Pie and adapt it for my needs,
> or look at both approaches and learn from them both?
>
>
> My main purpose is to progress rapidly, not to become an expert in ANTLR.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From serefarikan at kurumsalteknoloji.com  Mon Jan  2 11:32:55 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Mon, 2 Jan 2012 19:32:55 +0000
Subject: [antlr-interest] How to handle subset relations between grammar
	elements?
Message-ID: <CA+4Thdo+i5QzrqW_-F8JmK8-m__5Zb9t1sZVoZiDv1Qb+JRQ+A@mail.gmail.com>

Greetings,
I am in the process of porting a grammar to Antlr. The original tool for
the grammar is unknown, it may not even be a grammar that was meant to be
consumed by a tool at all, maybe a pseudo grammar.

In the process, I've come across this requirement, where I have grammar
elements which are subsets of some other element. I'm using the term
elements in a generic way here, since I'm not sure about how they should be
represented in Antlr (in lexer or in parser).
An example is NonZeroDigit which is supposed to be Digit (0..9) without 0.
There are other examples, such as the ones copied below:

{String Char} = {Printable} - ["] - {quote}
{NonZeroDigit} = {Digit} - [0]

{LetterMinusA} = {Letter} - [aA]
{LetterMinusT} = {Letter} - [tT]

I've been working on building this grammar in Antlr, and so far, the only
solution I could find is to use parser rules  (thanks to a nice response to
my question at stackoverflow:
http://stackoverflow.com/questions/8695693/how-to-handle-tokens-when-one-is-subset-of-another-in-antlr)
This is an example grammar that shows my solution at the moment:

------------------------------------------------------------------------------
grammar AQLJV;

tokens{

}

expr    :    numbers_wo_zero;

expr_wn    :    numbers;

numbers    :
        NUMBER;

numbers_wo_zero
    :    NUMBER { if($NUMBER.text.indexOf("0") > -1) {throw new
RuntimeException("numbers_wo_zero expected, input contains 0");} }
    ;

NUMBER     :    (INT)+ ;

fragment INT :    '0'..'9'+
    ;
------------------------------------------------------------------------------

As you can see, the rule numbers_wo_zero puts a constraint on the NUMBER
token, but returns the token if it complies with the constaint. This way, I
am not creating tokens such as NUMBER_WO_ZERO, and if I use numbers rule,
both 123 and 103 would work fine.

I am however, curious about the appropriateness of this solution. Is there
a better, rather recommended way of doing this? I've tried using lexer's
capabilities, but it did not end up well.

My problem in the lexer based solution is, if I create tokens for more
specific elements (such as nonzerodigit), the lexer rule ends up producing
the specific token everytime, since it does not know anything about parser.
This means that parser rules expecting generic element may get the specific
one sometimes. For example, numbers mean all numbers, with or without zero,
but if I modify token type in the lexer rule, a rule expecting to match
numbers won't always work, since it'll get numbers_without_zero for input
123

So, what would be the right way of handling this use case?

From s.barnett-cormack at lancaster.ac.uk  Mon Jan  2 12:14:09 2012
From: s.barnett-cormack at lancaster.ac.uk (Sam Barnett-Cormack)
Date: Mon, 02 Jan 2012 20:14:09 +0000
Subject: [antlr-interest] some v4 examples
In-Reply-To: <CACJVtdNqMFmiBKhOODwtKDKmxkw-2Hj-nuzRfrq+7rzuAn2SsA@mail.gmail.com>
References: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
	<CACJVtdNqMFmiBKhOODwtKDKmxkw-2Hj-nuzRfrq+7rzuAn2SsA@mail.gmail.com>
Message-ID: <4F021011.6090606@lancaster.ac.uk>

Working directly with parse trees would be more threatening to me, if it 
weren't for left-recursion being allowed/working now. That removes a lot 
of meaningless parse structure that I ended up with on my last big project.

Sam

On 02/01/2012 07:14, Michael Bedward wrote:
> I've written a lot of R scripts so was particularly keen to see the v4
> R grammar. I must say that it seems so straightforward that it's
> almost creepy after being used to thinking of left recursion as a
> mortal sin. Getting used to this, together with what sounds like the
> effective deprecation of ASTs (as far as I understand that from recent
> discussions), I can see quite a bit of unlearning is going to be
> required.
>
> Not a complaint - just an observation.
>
> Michael
>
> On 2 January 2012 07:47, Terence Parr<parrt at cs.usfca.edu>  wrote:
>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From goodwin at essence-property.com  Mon Jan  2 12:31:01 2012
From: goodwin at essence-property.com (goodwin)
Date: Mon, 02 Jan 2012 20:31:01 +0000
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
Message-ID: <WC20120102203101.60000B@essence-property.com>

Yes, I looked at MATLAB, i also looked at GDL (which is much too big and 
complex to start with, and is in C rather than Java). I have just looked at 
the Cminus example also.


My problem is that there are so many example starting points, i don't know 
where to start.


I thought maybe Pie was the best starting point, but maybe it is not, if it 
is more complex than necessary because of the problems with white space.


I am OK with starting with a simple language, and then waiting for v4 before 
doing the full language. I need a prototype which works reliably in the next 
few weeks, and then a longer term solution next year (2013).


An example of the language:


function myFunction() {

   a = 3.7

   b = get("myAttr")

   return a + b

end



x = 1.2

y = {0.0, 1.0, 2.3,......}

x[4] = 1.5


z = x ^ y + myFunction

z = z + data("myData")


if (x > 0.0 ) then

   z = sin(z) * 1.1

else

   z = 0

endif


h = integrate(z)

print (h)


Notes:


- all variables are float arrays (let's assume for the moment they are all 
the same length, 100).

- the integrate function integrates the array and returns a new array e.g. 
h[5] is z[0] + ... + z[5]

- the if block is done on an element by element basis (so there is an 
implied loop around it), similar to R concepts

- functions normally do not take any parameters, but could do so in future

- the 'get' function retrieves a special scalar value from a hashmap or 
database, which may be different on each invocation.

- data("myData") retrieves a preexisting scalar held in a Hashmap, which is 
used to initialise an array.

- the language operates on a preexisting Java database and Java memory - it 
is used to derive new data from pre-existing data.

- I would rather have something a little verbose and readable - error 
handling is also essential as the language is to be used by engineers, not 
software engineers. They often forget to put in ';' for example, so the 
above language does not need it.

- the whole concept is based on something which an old colleague did using 
Antlr v2 back in 2003 - all his work has since been lost.



-----Original Message-----
 From: Kyle Ferrio <kferrio at gmail.com>
 To: goodwin at essence-property.com
 Cc: antlr-interest at antlr.org
 Date: Mon, 2 Jan 2012 11:10:51 -0700
 Subject: Re: [antlr-interest] Pie and simple expression calculator


Your language ounds a little like MATLAB. Someone posted an approximate 
MATLAB grammar a few months ago for antlr 3.x.

If you are familiar with classic "calculator" examples for flex/bison, then 
you might really like how Honey Badger (antlr 4) makes short work of 
expression parsing.

If you want to get going quickly, you might want to avoid things like 
pythonesque significant whitespace.  And strongly visual scope delimiters 
may make it easier to get started.  Your resulting language would not be the 
first to be accused of being "noisy."  :)

Kyle

On Jan 2, 2012 10:45 AM, "goodwin" <goodwin at essence-property.com> wrote:


I am new to ANTLR, and want some capabilities similar to Pie and the
 expression calculator, as extended with functions. I work with floating
 point data, and want to extend the intrinsic functions (e.g. Sin, Cos etc.)
 and all calculations will actually be done on float arrays.


 I want a simple grammar suitable for engineers - not too sure whether Python
 is the best starting point...I myself prefer a few brackets and endif etc.


 However, the implementations of Pie and the simple expression calculator are
 very different.


 Do you think it is best for me to start with Pie and adapt it for my needs,
 or look at both approaches and learn from them both?


 My main purpose is to progress rapidly, not to become an expert in ANTLR.

 List: http://www.antlr.org/mailman/listinfo/antlr-interest
 Unsubscribe: 
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From goodwin at essence-property.com  Mon Jan  2 13:02:54 2012
From: goodwin at essence-property.com (goodwin)
Date: Mon, 02 Jan 2012 21:02:54 +0000
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120102203101.60000B@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
Message-ID: <WC20120102210254.07000C@essence-property.com>

Maybe my best starting point is the C-- example in the shared area.


Maybe I need to sit down and compare all these examples line by line.

From antlr at mirality.co.nz  Mon Jan  2 13:32:18 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 03 Jan 2012 10:32:18 +1300
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <F3E707EA-88CB-4D13-9BD3-48EAE4F4F2D3@cs.usfca.edu>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>
	<26DD96E3-8DF6-471A-A0A0-E989071CD86F@cs.usfca.edu>
	<4F00D5F5.1080405@lancaster.ac.uk>
	<F3E707EA-88CB-4D13-9BD3-48EAE4F4F2D3@cs.usfca.edu>
Message-ID: <20120102213226.0690E3418405@www.antlr.org>

At 11:44 2/01/2012, Terence Parr wrote:
 >> Can the special rules modify the text they're matching
 >> in terms of the text the eventual token gets?
 >
 >sure by setting this.text.

Does that work when more() is used to tell it to return a single 
token?  As I recall, while lexer fragment rules could set $text 
all they wanted, it didn't actually have any effect, since the 
final rule simply set its text based on the matched bounds, not 
the text of its subrules.


From opensource at peoplemerge.com  Mon Jan  2 13:51:26 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Mon, 2 Jan 2012 16:51:26 -0500
Subject: [antlr-interest] Composite grammar support in antlr4.0ea
In-Reply-To: <AD665888-09AB-4C49-8705-FDADC1A9B655@cs.usfca.edu>
References: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>
	<AD665888-09AB-4C49-8705-FDADC1A9B655@cs.usfca.edu>
Message-ID: <CANSf4X7DpQyY8eHrv9YNw5Jq-v8Rosq8Sh8YYBYTqpOuYD1z=g@mail.gmail.com>

Thanks, Ter!

It sounds like the subordinate grammar means the dependent grammar which in
my case is the root combined grammar Java.g (per
http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars).

It totally makes sense that an incomplete grammar cannot stand alone in its
own package.  I had originally envisioned different packages for major
components of my language but it's not a real necessity and their coupling
could complicate things.

I also agree grammars shouldn't be forced into the package of their
dependencies.

However it seems that I get a duplicate header definition error on all
parser grammars (including combined grammars) regardless of whether they
contain the same package.  I can't see how this is intended to work when
the header contains imports, which seems to me to be a fairly common case.
 An updated tarball with a concrete example is attached.  I put all
grammars in the same package for simplicity.

The simplest thing that could work would be to have a subordinate grammar
override the header of it's dependency (as illustrated in the attached
example).  This can work but I suspect requires the subordinate duplicate
the code of it's dependencies.  In fact I just discovered (at least with
v4) that although antlr spits our the error and nonzero return code, it
appears to be properly emitting this!

In an ideal world (ahem crazy, badass like the honey badger) we might come
up with a way of scoping to either share common headers (like
includes/imports) or allow disjoint ones (like specifying the package).

... or am I truly missing the obvious and trying to do it "the hard way" ?

Thanks and Happy New Year!
On Jan 2, 2012 12:36 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

> Hi Dave,Because the subordinate important grammars are not complete, they
> should not have a header that specifies the package. Very least, it's more
> flexible to not force subordinate grammars into certain packages. Is
> correct that you have duplicate header definition because you specify the
> package twice.
>
> v4 didn't complain about this so I will have to add an error.
> Thanks,
> Ter
> On Jan 1, 2012, at 8:21 PM, Dave Thomas wrote:
>
> > With all this exciting Honey Badger activity (which is just crazy and
> > doesn't give a shit), I thought I'd bump this "Redefinition of header
> > action" thread and attach a minimal tarball with code for your
> convenience!
> >
> > I get the same result with antlr-4.0ea (as I did with 3.4 nicely
> mavenized)
> > by running:
> > cd src/main/antlr3; java  -cp
> > /path/to/antlr-4.0ea-complete.jar:/path/to/ST-4.0.4.jar org.antlr.Tool
> > test/*.g -o ../../../target
> > error(144): JavaDecl.g:3:2: redefinition of header action
> >
> >
> > On Tue, Nov 22, 2011 at 9:07 PM, Dave Thomas <opensource at peoplemerge.com
> >wrote:
> >
> >> Hi all,
> >>
> >> I'm using ANTLR for my masters thesis, which includes letting user
> extend
> >> the lex and parser grammars I supply with their own jargon in the form
> of a
> >> combined grammar.  I wouldn't have dreamed it possible before ANTLR, and
> >> I'm a big fan!
> >>
> >> The problem I'm having is:
> >> error(144): JavaDecl.g:3:2: redefinition of header action
> >>
> >> The reason this is making me scratch my head is that I see this issue
> has
> >> been reported, and AFAICT addressed:
> >> http://www.antlr.org/jira/browse/ANTLR-301
> >> http://www.antlr.org/jira/browse/ANTLR-370
> >> http://www.antlr.org/jira/browse/ANTLR-375
> >> http://www.antlr.org/pipermail/antlr-interest/2011-January/040487.html
> >> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars (basis for
> >> the examples; sorry for the cross-post)
> >>
> >> Am I specifying the antlr release wrong in the maven plugin?
> >>
> >> Should I be concerned that my dependency hierarchy includes antlr 2.7.7?
> >> Per http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3.4+Release+Notesthe
> >> dependency on v2 should be removed, but I still see it when I do `mvn
> clean
> >> antlr3:antlr compile -X`:
> >>
> >> [DEBUG]    org.antlr:antlr:jar:3.4:compile
> >> [DEBUG]       org.antlr:antlr-runtime:jar:3.4:compile
> >> [DEBUG]          org.antlr:stringtemplate:jar:3.2.1:compile
> >> [DEBUG]          antlr:antlr:jar:2.7.7:compile
> >>
> >>
> >> src/main/antlr3/test/JLex.g
> >>
> >> lexer grammar JLex;
> >> @lexer::header { package test; }
> >>
> >> INT : 'int';
> >> SEMICOLON : ';';
> >> EQUALS : '=';
> >> ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
> >>
> >>
> >> src/main/antlr3/test/JavaDecl.g
> >>
> >> parser grammar JavaDecl;
> >> @header { package test; }
> >> type : INT ;
> >> decl : type ID SEMICOLON
> >>     | type ID init SEMICOLON
> >>     ;
> >> init : EQUALS INT ;
> >>
> >>
> >> src/main/antlr3/test/Java.g:
> >>
> >> grammar Java;
> >> import JavaDecl, JLex;
> >> @header { package test; }
> >> prog : decl ;
> >> type : 'int' | 'float' ;
> >>
> >> pom.xml:
> >>
> >> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
> >> http://www.w3.org/2001/XMLSchema-instance"
> >> xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
> >> http://maven.apache.org/xsd/maven-4.0.0.xsd">
> >> <modelVersion>4.0.0</modelVersion>
> >> <groupId>test</groupId>
> >> <artifactId>test</artifactId>
> >> <packaging>jar</packaging>
> >> <version>1.0-SNAPSHOT</version>
> >> <name>test</name>
> >> <build>
> >> <plugins>
> >> <plugin>
> >> <groupId>org.antlr</groupId>
> >> <artifactId>antlr3-maven-plugin</artifactId>
> >> <version>3.4</version>
> >> <executions>
> >> <execution>
> >> <configuration>
> >> <goals>
> >> <goal>antlr</goal>
> >> </goals>
> >> </configuration>
> >> </execution>
> >> </executions>
> >> </plugin>
> >> </plugins>
> >> </build>
> >> </project>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> > <antlr-header.tar>
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: antlr-header.tar
Type: application/x-tar
Size: 10240 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20120102/21d99907/attachment.tar 

From bkiers at gmail.com  Mon Jan  2 14:02:43 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 2 Jan 2012 23:02:43 +0100
Subject: [antlr-interest] urgent help required ...
In-Reply-To: <BAY149-W42BCB252B60022FBA5E4A3EDAF0@phx.gbl>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>
	<BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>
	<CAOrgODb=BFR-avLyZW5xVRNpbtY-5u1OtQiUD52w0BiyWG-JAQ@mail.gmail.com>
	<BAY149-W7ABD0E0017D9438278A82EDAE0@phx.gbl>
	<CAOrgODbc70qn5zvbHXgq0F77r70K5e8qpJxrsjPK3-X9aFObYQ@mail.gmail.com>
	<BAY149-W42BCB252B60022FBA5E4A3EDAF0@phx.gbl>
Message-ID: <CAOrgODZJkWqJnQB7bNXEg+gj1XRY8X8+oiz8ukLhXfVbjkysJA@mail.gmail.com>

Hi James,

On Tue, Dec 27, 2011 at 9:03 AM, James Ladd <james_ladd at hotmail.com> wrote:

>  Hi Bart and all ....
>
> The main no viable alternative errors occur around line 25 of Smalltalk.g
> in the rule:
>
> method returns [Method n]
>     :    o = NAME c= '_class_'? '>>'  messagePattern '[' primitive?
> temporaries? statements  ']' {$n = MethodFactory.create($o.text, $c.text,
> $messagePattern.n, $primitive.n, $temporaries.n, $statements.n);}
>     ;
>
> To get started with building and parsing you can either use Antrl works or
> the getting started here:
> http://www.redline.st/discover/getting-started.html
> The project sources are here:
> https://github.com/redline-smalltalk/redline-smalltalk
>
> In  a nutshell there are a few binarySymbol methods that cause this rule
> to break with a "no viable" alternative.
>
> If you goto the file Magnitude.st and change line 14 from
>
> - \> aMagnitude
>
> to
>
> - > aMagnitude
>
> You will then start to get the error.
>
> If you were to make the line
>
> - , aMagnitude
>
> That will cause the error as well and it should not.
>
> The second error I get is on the same rule. Essentially I changed the file
> PreProcessor.g to spit out a
> '_class_' rather than 'class' to overcome a no viable alternative error I
> was getting. Id like to make sure
> the preprocessor did NOT put out _class_ and that the method pattern rule
> on line 25 of Smalltalk.g
> was ok with 'o = NAME c= 'class'? '>>'  messagePattern'
>
> Not it is ok for a method to look like the following:
>
> - class
>   ^ nil
>
> You could modify Magnitude.st to have a method like this for testing.
>
> Rgs, James.
>
>
If I strip your `Smalltalk.g` file from all custom code, copy the
`Magnitude.st`, and generate a small main class to let the parser only
parse the `Magnitude.st`  file:

    import org.antlr.runtime.*;

    public class Main {
      public static void main(String[] args) throws Exception {
        SmalltalkLexer lexer = new SmalltalkLexer(new
ANTLRFileStream("Magnitude.st"));
        SmalltalkParser parser = new SmalltalkParser(new
CommonTokenStream(lexer));
        parser.program();
      }
    }

    java -cp antlr-3.3.jar org.antlr.Tool Smalltalk.g
    javac -cp antlr-3.3.jar *.java
    java -cp .:antlr-3.3.jar Main

I get the following error (without changing anything to the input file!):

    Magnitude.st line 5:2 no viable alternative at input '<'

I'm probably doing something wrong, but I don't feel much like cloning a
Gith-repo, building it all with maven etc.

If you could post a self-containable grammar file (including a main method
and without any custom code, or accompanying Main class as I posted) and
could clearly indicate what goes wrong, and how you think it should be
parsed, your chances in getting an answer would increase greatly, I think.

Regards,

Bart.

From kferrio at gmail.com  Mon Jan  2 14:17:50 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Mon, 2 Jan 2012 15:17:50 -0700
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120102203101.60000B@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
Message-ID: <CAAfeETpXuZCO_JS+PbzBMGC3-x5Gu-z5E1KAEAa3CShf+_xmVQ@mail.gmail.com>

Thanks for the details.  The comparison to R is apt.  I didn't mean to
discourage you from whitespace languages so much as just suggest that it
might be a distraction you can deal with later, perhaps more efficiently
once you've climbed the "core"  learning curve.

You're quite right to notice the wealth of examples available for antlr.
It can be daunting, but much better than no examples.  The important thing
for me was just to get started.  I found that the fastest start for me came
by actually planning on throwing out my first few grammars.

Just an observation...your notes go pretty deep into implementation
details.   I tend to do the same and find that forcing myself to write out
EBNF on paper and code up decent test coverage first helps me get my
grammar right first and thereby minimize "churn" when I do the
implementation.

Anyway, your mileage may and likely will vary.  You'll figure out what
works for you.  As usual, just starting is the biggest step.

Kyle
 On Jan 2, 2012 1:31 PM, "goodwin" <goodwin at essence-property.com> wrote:

>  Yes, I looked at MATLAB, i also looked at GDL (which is much too big and
> complex to start with, and is in C rather than Java). I have just looked at
> the Cminus example also.
>
>  My problem is that there are so many example starting points, i don't
> know where to start.
>
>  I thought maybe Pie was the best starting point, but maybe it is not, if
> it is more complex than necessary because of the problems with white space.
>
>  I am OK with starting with a simple language, and then waiting for v4
> before doing the full language. I need a prototype which works reliably in
> the next few weeks, and then a longer term solution next year (2013).
>
>  An example of the language:
>
>  function myFunction() {
>     a = 3.7
>     b = get("myAttr")
>     return a + b
>  end
>
>  x = 1.2
>  y = {0.0, 1.0, 2.3,......}
>  x[4] = 1.5
>
>  z = x ^ y + myFunction
>  z = z + data("myData")
>
>  if (x > 0.0 ) then
>     z = sin(z) * 1.1
>  else
>     z = 0
>  endif
>
>  h = integrate(z)
>  print (h)
>
>  Notes:
>
>  - all variables are float arrays (let's assume for the moment they are
> all the same length, 100).
>  - the integrate function integrates the array and returns a new array
> e.g. h[5] is z[0] + ... + z[5]
>  - the if block is done on an element by element basis (so there is an
> implied loop around it), similar to R concepts
>  - functions normally do not take any parameters, but could do so in future
>  - the 'get' function retrieves a special scalar value from a hashmap or
> database, which may be different on each invocation.
>  - data("myData") retrieves a preexisting scalar held in a Hashmap, which
> is used to initialise an array.
>  - the language operates on a preexisting Java database and Java memory -
> it is used to derive new data from pre-existing data.
>  - I would rather have something a little verbose and readable - error
> handling is also essential as the language is to be used by engineers, not
> software engineers. They often forget to put in ';' for example, so the
> above language does not need it.
>  - the whole concept is based on something which an old colleague did
> using Antlr v2 back in 2003 - all his work has since been lost.
>
>
>
> -----Original Message-----
> From: Kyle Ferrio <kferrio at gmail.com>
> To: goodwin at essence-property.com
> Cc: antlr-interest at antlr.org
> Date: Mon, 2 Jan 2012 11:10:51 -0700
> Subject: Re: [antlr-interest] Pie and simple expression calculator
>
>  Your language ounds a little like MATLAB. Someone posted an approximate
> MATLAB grammar a few months ago for antlr 3.x.
>  If you are familiar with classic "calculator" examples for flex/bison,
> then you might really like how Honey Badger (antlr 4) makes short work of
> expression parsing.
>  If you want to get going quickly, you might want to avoid things like
> pythonesque significant whitespace.  And strongly visual scope delimiters
> may make it easier to get started.  Your resulting language would not be
> the first to be accused of being "noisy."  :)
>  Kyle
>  On Jan 2, 2012 10:45 AM, "goodwin" <goodwin at essence-property.com > wrote:
>
>>
>> I am new to ANTLR, and want some capabilities similar to Pie and the
>> expression calculator, as extended with functions. I work with floating
>> point data, and want to extend the intrinsic functions (e.g. Sin, Cos
>> etc.)
>> and all calculations will actually be done on float arrays.
>>
>>
>> I want a simple grammar suitable for engineers - not too sure whether
>> Python
>> is the best starting point...I myself prefer a few brackets and endif etc.
>>
>>
>> However, the implementations of Pie and the simple expression calculator
>> are
>> very different.
>>
>>
>> Do you think it is best for me to start with Pie and adapt it for my
>> needs,
>> or look at both approaches and learn from them both?
>>
>>
>> My main purpose is to progress rapidly, not to become an expert in ANTLR.
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From kferrio at gmail.com  Mon Jan  2 14:27:30 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Mon, 2 Jan 2012 15:27:30 -0700
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120102210254.07000C@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
Message-ID: <CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>

C-- is a very informative example.  Also check out Scott Stanchfield's
videos on vimeo.com.

Scott uses the antlr3 plugin for eclipse.  If you're not an eclipse user
already, and you're in a hurry, you can still learn a lot just by watching
his videos.

Kyle
 On Jan 2, 2012 2:03 PM, "goodwin" <goodwin at essence-property.com> wrote:

> Maybe my best starting point is the C-- example in the shared area.
>
>
> Maybe I need to sit down and compare all these examples line by line.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From goodwin at essence-property.com  Mon Jan  2 16:13:12 2012
From: goodwin at essence-property.com (goodwin)
Date: Tue, 03 Jan 2012 00:13:12 +0000
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
	<CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
Message-ID: <WC20120103001312.450012@essence-property.com>

Thanks. I will probably start with the C-- example as a base, and compare it 
with the other examples.


I have been a heavy user of R in the past, so will keep a close eye on antlr4 
and R. R is nice and simple as a language, at least initially, until you 
start using the full power.


My interest in formal languages dates from the mid 80's or earlier (I was 
involved in late 70's with a Fortran program which took hundreds of 
thousands of lines to interpret a complex command language), but never 
actually got my hands dirty, so it has always been on my bucket list, and 
now I have good commercial reasons for doing so, not having any staff 
currently to delegate to!


My starting point is what is simple and easy to use for my end users, they 
are people who are happy enough to program Excel macros, but not much more 
than that.


Plus people nowadays expect the full language editors, pop up lists, good 
error diagnostics, suggestions, a fully interactive editor for the defined 
language, so they can comfortably write their own scripts. Anything which 
reduces support calls from the users.


-----Original Message-----
 From: Kyle Ferrio <kferrio at gmail.com>
 To: goodwin at essence-property.com
 Cc: antlr-interest at antlr.org
 Date: Mon, 2 Jan 2012 15:27:30 -0700
 Subject: Re: [antlr-interest] Pie and simple expression calculator


C-- is a very informative example.  Also check out Scott Stanchfield's videos 
on vimeo.com. 

Scott uses the antlr3 plugin for eclipse.  If you're not an eclipse user 
already, and you're in a hurry, you can still learn a lot just by watching 
his videos.

Kyle

On Jan 2, 2012 2:03 PM, "goodwin" <goodwin at essence-property.com> wrote:

Maybe my best starting point is the C-- example in the shared area.


 Maybe I need to sit down and compare all these examples line by line.

 List: http://www.antlr.org/mailman/listinfo/antlr-interest
 Unsubscribe: 
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From kferrio at gmail.com  Mon Jan  2 16:36:09 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Mon, 2 Jan 2012 17:36:09 -0700
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120103001312.450012@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
	<CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
	<WC20120103001312.450012@essence-property.com>
Message-ID: <CAAfeETrsXGg6RWojMtR88cbqF3i_rw507Bt1esFAbd8MCoHjDw@mail.gmail.com>

Hi again.

When you compare how math expressions are implented in the antlr3 grammar
for C-- and in the antlr4 grammar for R, you will get a pretty good sense
of how the addition of left recursion to LL(*) is going to make our jobs
easier.

Offtopic...I like R for quick analyses, but I prefer not to push it too
far.  I've collected enough quirky languages for a lifetime.  And your
description of your experience suggests that we have traveled parallel
rings in this inferno.  Lions, tigers and "parsers" written in FORTRAN
77.   Oh my!

Careful...if your language "just works" you may be cutting yourself off
from a lucrative support business!  :)

Kyle
 On Jan 2, 2012 5:13 PM, "goodwin" <goodwin at essence-property.com> wrote:

> Thanks. I will probably start with the C-- example as a base, and compare
> it
> with the other examples.
>
>
> I have been a heavy user of R in the past, so will keep a close eye on
> antlr4
> and R. R is nice and simple as a language, at least initially, until you
> start using the full power.
>
>
> My interest in formal languages dates from the mid 80's or earlier (I was
> involved in late 70's with a Fortran program which took hundreds of
> thousands of lines to interpret a complex command language), but never
> actually got my hands dirty, so it has always been on my bucket list, and
> now I have good commercial reasons for doing so, not having any staff
> currently to delegate to!
>
>
> My starting point is what is simple and easy to use for my end users, they
> are people who are happy enough to program Excel macros, but not much more
> than that.
>
>
> Plus people nowadays expect the full language editors, pop up lists, good
> error diagnostics, suggestions, a fully interactive editor for the defined
> language, so they can comfortably write their own scripts. Anything which
> reduces support calls from the users.
>
>
> -----Original Message-----
>  From: Kyle Ferrio <kferrio at gmail.com>
>  To: goodwin at essence-property.com
>  Cc: antlr-interest at antlr.org
>  Date: Mon, 2 Jan 2012 15:27:30 -0700
>  Subject: Re: [antlr-interest] Pie and simple expression calculator
>
>
> C-- is a very informative example.  Also check out Scott Stanchfield's
> videos
> on vimeo.com.
>
> Scott uses the antlr3 plugin for eclipse.  If you're not an eclipse user
> already, and you're in a hurry, you can still learn a lot just by watching
> his videos.
>
> Kyle
>
> On Jan 2, 2012 2:03 PM, "goodwin" <goodwin at essence-property.com> wrote:
>
> Maybe my best starting point is the C-- example in the shared area.
>
>
>  Maybe I need to sit down and compare all these examples line by line.
>
>  List: http://www.antlr.org/mailman/listinfo/antlr-interest
>  Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From james_ladd at hotmail.com  Mon Jan  2 16:56:21 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Tue, 3 Jan 2012 11:56:21 +1100
Subject: [antlr-interest] urgent help required ...
In-Reply-To: <CAOrgODZJkWqJnQB7bNXEg+gj1XRY8X8+oiz8ukLhXfVbjkysJA@mail.gmail.com>
References: <mailman.1.1324843201.3842.antlr-interest@antlr.org>,
	<BAY149-W11D1268DA6EED63B30799BEDAE0@phx.gbl>,
	<CAOrgODb=BFR-avLyZW5xVRNpbtY-5u1OtQiUD52w0BiyWG-JAQ@mail.gmail.com>,
	<BAY149-W7ABD0E0017D9438278A82EDAE0@phx.gbl>,
	<CAOrgODbc70qn5zvbHXgq0F77r70K5e8qpJxrsjPK3-X9aFObYQ@mail.gmail.com>,
	<BAY149-W42BCB252B60022FBA5E4A3EDAF0@phx.gbl>,
	<CAOrgODZJkWqJnQB7bNXEg+gj1XRY8X8+oiz8ukLhXfVbjkysJA@mail.gmail.com>
Message-ID: <BAY149-W428A658CC98FBCE6F5EB0EED960@phx.gbl>


Hi Bart,

That is good suggestion.
I have not done this yet because Jim Idle said he would help, and he has some familiarity with this project.
Still waiting for Jim though.

Rgs, James.

Date: Mon, 2 Jan 2012 23:02:43 +0100
Subject: Re: [antlr-interest] urgent help required ...
From: bkiers at gmail.com
To: james_ladd at hotmail.com
CC: antlr-interest at antlr.org

Hi James,

On Tue, Dec 27, 2011 at 9:03 AM, James Ladd <james_ladd at hotmail.com> wrote:





Hi Bart and all ....

The main no viable alternative errors occur around line 25 of Smalltalk.g
in the rule:

method returns [Method n]
   
 :    o = NAME c= '_class_'? '>>'  messagePattern '[' primitive? 
temporaries? statements  ']' {$n = MethodFactory.create($o.text, 
$c.text, $messagePattern.n, $primitive.n, $temporaries.n, 
$statements.n);}
    ;

To get started with building and 
parsing you can either use Antrl works or the getting started here: 
http://www.redline.st/discover/getting-started.html
The project sources are here:  https://github.com/redline-smalltalk/redline-smalltalk


In  a nutshell there are a few binarySymbol methods that cause this rule to break with a "no viable" alternative.

If you goto the file Magnitude.st and change line 14 from 

- \> aMagnitude


to

- > aMagnitude

You will then start to get the error.

If you were to make the line

- , aMagnitude

That will cause the error as well and it should not.

The second error I get is on the same rule. Essentially I changed the file PreProcessor.g to spit out a

'_class_' rather than 'class' to overcome a no viable alternative error I was getting. Id like to make sure
the preprocessor did NOT put out _class_ and that the method pattern rule on line 25 of Smalltalk.g

was ok with 'o = NAME c= 'class'? '>>'  messagePattern'

Not it is ok for a method to look like the following:

- class
  ^ nil

You could modify Magnitude.st to have a method like this for testing.


Rgs, James.


If I strip your `Smalltalk.g` file from all custom code, copy the `Magnitude.st`, and generate a small main class to let the parser only parse the `Magnitude.st`  file:

    import org.antlr.runtime.*;
    public class Main {      public static void main(String[] args) throws Exception {        SmalltalkLexer lexer = new SmalltalkLexer(new ANTLRFileStream("Magnitude.st"));
        SmalltalkParser parser = new SmalltalkParser(new CommonTokenStream(lexer));        parser.program();      }    }
    java -cp antlr-3.3.jar org.antlr.Tool Smalltalk.g 
    javac -cp antlr-3.3.jar *.java    java -cp .:antlr-3.3.jar Main
I get the following error (without changing anything to the input file!):
    Magnitude.st line 5:2 no viable alternative at input '<'

I'm probably doing something wrong, but I don't feel much like cloning a Gith-repo, building it all with maven etc. 
If you could post a self-containable grammar file (including a main method and without any custom code, or accompanying Main class as I posted) and could clearly indicate what goes wrong, and how you think it should be parsed, your chances in getting an answer would increase greatly, I think.

Regards,
Bart. 		 	   		  

From parrt at cs.usfca.edu  Mon Jan  2 18:24:51 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jan 2012 18:24:51 -0800
Subject: [antlr-interest] Reduction in code base after yanking AST stuff
Message-ID: <B6D75808-49BF-46E5-9B2A-E44DF8CFD03E@cs.usfca.edu>

So, after thinking about it for very long time, I have officially decided to not support ASTs and tree grammars in honey badger. I took the plunge today and yanked it all out. It dramatically simplified everything, of course. Removing code is one of my favorite things :)  Anyway, I've done the deed. Getting honey badger to support ASTs in a fully backward compatible manner was going to be difficult anyway. v3 works and is stable. moving AST code to v4 with simply make it less reliable.

These are the sizes of the various code areas in relation to their previous size (down from 100%). So, for example, the runtime is 26% smaller:

runtime: 74%
grammars: 85%
templates: 74%
tool code: 77%
tests: 69%

Ter

From parrt at cs.usfca.edu  Mon Jan  2 18:25:57 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jan 2012 18:25:57 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <20120102213226.0690E3418405@www.antlr.org>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>
	<26DD96E3-8DF6-471A-A0A0-E989071CD86F@cs.usfca.edu>
	<4F00D5F5.1080405@lancaster.ac.uk>
	<F3E707EA-88CB-4D13-9BD3-48EAE4F4F2D3@cs.usfca.edu>
	<20120102213226.0690E3418405@www.antlr.org>
Message-ID: <37F7ABC9-D90B-4E2F-813F-6AA80DAF1142@cs.usfca.edu>

WillCheck how this works and get back to you?
Ter
On Jan 2, 2012, at 1:32 PM, Gavin Lambert wrote:

> At 11:44 2/01/2012, Terence Parr wrote:
>>> Can the special rules modify the text they're matching
>>> in terms of the text the eventual token gets?
>> 
>> sure by setting this.text.
> 
> Does that work when more() is used to tell it to return a single 
> token?  As I recall, while lexer fragment rules could set $text 
> all they wanted, it didn't actually have any effect, since the 
> final rule simply set its text based on the matched bounds, not 
> the text of its subrules.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Mon Jan  2 18:26:52 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jan 2012 18:26:52 -0800
Subject: [antlr-interest] Composite grammar support in antlr4.0ea
In-Reply-To: <CANSf4X7DpQyY8eHrv9YNw5Jq-v8Rosq8Sh8YYBYTqpOuYD1z=g@mail.gmail.com>
References: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>
	<AD665888-09AB-4C49-8705-FDADC1A9B655@cs.usfca.edu>
	<CANSf4X7DpQyY8eHrv9YNw5Jq-v8Rosq8Sh8YYBYTqpOuYD1z=g@mail.gmail.com>
Message-ID: <F3CC13A6-175C-47D0-AB3F-B2881B100FD0@cs.usfca.edu>

Hi Dave,What do you want to put in the header? imports? Perhaps you are putting stuff in the header that should be in the members action?
Ter
On Jan 2, 2012, at 1:51 PM, Dave Thomas wrote:

> Thanks, Ter!
> 
> It sounds like the subordinate grammar means the dependent grammar which in
> my case is the root combined grammar Java.g (per
> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars).
> 
> It totally makes sense that an incomplete grammar cannot stand alone in its
> own package.  I had originally envisioned different packages for major
> components of my language but it's not a real necessity and their coupling
> could complicate things.
> 
> I also agree grammars shouldn't be forced into the package of their
> dependencies.
> 
> However it seems that I get a duplicate header definition error on all
> parser grammars (including combined grammars) regardless of whether they
> contain the same package.  I can't see how this is intended to work when
> the header contains imports, which seems to me to be a fairly common case.
> An updated tarball with a concrete example is attached.  I put all
> grammars in the same package for simplicity.
> 
> The simplest thing that could work would be to have a subordinate grammar
> override the header of it's dependency (as illustrated in the attached
> example).  This can work but I suspect requires the subordinate duplicate
> the code of it's dependencies.  In fact I just discovered (at least with
> v4) that although antlr spits our the error and nonzero return code, it
> appears to be properly emitting this!
> 
> In an ideal world (ahem crazy, badass like the honey badger) we might come
> up with a way of scoping to either share common headers (like
> includes/imports) or allow disjoint ones (like specifying the package).
> 
> ... or am I truly missing the obvious and trying to do it "the hard way" ?
> 
> Thanks and Happy New Year!
> On Jan 2, 2012 12:36 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
> 
>> Hi Dave,Because the subordinate important grammars are not complete, they
>> should not have a header that specifies the package. Very least, it's more
>> flexible to not force subordinate grammars into certain packages. Is
>> correct that you have duplicate header definition because you specify the
>> package twice.
>> 
>> v4 didn't complain about this so I will have to add an error.
>> Thanks,
>> Ter
>> On Jan 1, 2012, at 8:21 PM, Dave Thomas wrote:
>> 
>>> With all this exciting Honey Badger activity (which is just crazy and
>>> doesn't give a shit), I thought I'd bump this "Redefinition of header
>>> action" thread and attach a minimal tarball with code for your
>> convenience!
>>> 
>>> I get the same result with antlr-4.0ea (as I did with 3.4 nicely
>> mavenized)
>>> by running:
>>> cd src/main/antlr3; java  -cp
>>> /path/to/antlr-4.0ea-complete.jar:/path/to/ST-4.0.4.jar org.antlr.Tool
>>> test/*.g -o ../../../target
>>> error(144): JavaDecl.g:3:2: redefinition of header action
>>> 
>>> 
>>> On Tue, Nov 22, 2011 at 9:07 PM, Dave Thomas <opensource at peoplemerge.com
>>> wrote:
>>> 
>>>> Hi all,
>>>> 
>>>> I'm using ANTLR for my masters thesis, which includes letting user
>> extend
>>>> the lex and parser grammars I supply with their own jargon in the form
>> of a
>>>> combined grammar.  I wouldn't have dreamed it possible before ANTLR, and
>>>> I'm a big fan!
>>>> 
>>>> The problem I'm having is:
>>>> error(144): JavaDecl.g:3:2: redefinition of header action
>>>> 
>>>> The reason this is making me scratch my head is that I see this issue
>> has
>>>> been reported, and AFAICT addressed:
>>>> http://www.antlr.org/jira/browse/ANTLR-301
>>>> http://www.antlr.org/jira/browse/ANTLR-370
>>>> http://www.antlr.org/jira/browse/ANTLR-375
>>>> http://www.antlr.org/pipermail/antlr-interest/2011-January/040487.html
>>>> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars (basis for
>>>> the examples; sorry for the cross-post)
>>>> 
>>>> Am I specifying the antlr release wrong in the maven plugin?
>>>> 
>>>> Should I be concerned that my dependency hierarchy includes antlr 2.7.7?
>>>> Per http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3.4+Release+Notesthe
>>>> dependency on v2 should be removed, but I still see it when I do `mvn
>> clean
>>>> antlr3:antlr compile -X`:
>>>> 
>>>> [DEBUG]    org.antlr:antlr:jar:3.4:compile
>>>> [DEBUG]       org.antlr:antlr-runtime:jar:3.4:compile
>>>> [DEBUG]          org.antlr:stringtemplate:jar:3.2.1:compile
>>>> [DEBUG]          antlr:antlr:jar:2.7.7:compile
>>>> 
>>>> 
>>>> src/main/antlr3/test/JLex.g
>>>> 
>>>> lexer grammar JLex;
>>>> @lexer::header { package test; }
>>>> 
>>>> INT : 'int';
>>>> SEMICOLON : ';';
>>>> EQUALS : '=';
>>>> ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
>>>> 
>>>> 
>>>> src/main/antlr3/test/JavaDecl.g
>>>> 
>>>> parser grammar JavaDecl;
>>>> @header { package test; }
>>>> type : INT ;
>>>> decl : type ID SEMICOLON
>>>>    | type ID init SEMICOLON
>>>>    ;
>>>> init : EQUALS INT ;
>>>> 
>>>> 
>>>> src/main/antlr3/test/Java.g:
>>>> 
>>>> grammar Java;
>>>> import JavaDecl, JLex;
>>>> @header { package test; }
>>>> prog : decl ;
>>>> type : 'int' | 'float' ;
>>>> 
>>>> pom.xml:
>>>> 
>>>> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
>>>> http://www.w3.org/2001/XMLSchema-instance"
>>>> xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
>>>> http://maven.apache.org/xsd/maven-4.0.0.xsd">
>>>> <modelVersion>4.0.0</modelVersion>
>>>> <groupId>test</groupId>
>>>> <artifactId>test</artifactId>
>>>> <packaging>jar</packaging>
>>>> <version>1.0-SNAPSHOT</version>
>>>> <name>test</name>
>>>> <build>
>>>> <plugins>
>>>> <plugin>
>>>> <groupId>org.antlr</groupId>
>>>> <artifactId>antlr3-maven-plugin</artifactId>
>>>> <version>3.4</version>
>>>> <executions>
>>>> <execution>
>>>> <configuration>
>>>> <goals>
>>>> <goal>antlr</goal>
>>>> </goals>
>>>> </configuration>
>>>> </execution>
>>>> </executions>
>>>> </plugin>
>>>> </plugins>
>>>> </build>
>>>> </project>
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>> <antlr-header.tar>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
> <antlr-header.tar>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From andy.voelkel at plantronics.com  Mon Jan  2 18:36:10 2012
From: andy.voelkel at plantronics.com (Voelkel, Andy)
Date: Tue, 3 Jan 2012 02:36:10 +0000
Subject: [antlr-interest] ANTLR V4 C# target
Message-ID: <92E9AB4D42199B4793CE24E094BAEE070497E05B@USSCMB03.plt.plantronics.com>

Hi All,

It's very exciting to read about v4, but I can't responsibly play with it because the only job-related ANTLR work I will be doing will all be based on the C# target, at least for the time being. So naturally I'm eagerly anticipating a C# target. Is this something that is months away?


-          Andy

________________________________

CONFIDENTIALITY NOTICE: This e-mail transmission, and any documents, files or previous e-mail messages attached to it, may contain information that is confidential and/or legally privileged. If you are not the intended recipient, or a person responsible for delivering it to the intended recipient, please DO NOT disclose the contents to another person, store or copy the information in any medium, or use any of the information contained in or attached to this transmission for any purpose. If you have received this transmission in error, please immediately notify the sender by reply email or at privacy at plantronics.com, and destroy the original transmission and its attachments without reading or saving in any manner.

For further information about Plantronics - the Company, its products, brands, partners, please visit our website www.plantronics.com.

From parrt at cs.usfca.edu  Mon Jan  2 18:39:58 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 2 Jan 2012 18:39:58 -0800
Subject: [antlr-interest] ANTLR V4 C# target
In-Reply-To: <92E9AB4D42199B4793CE24E094BAEE070497E05B@USSCMB03.plt.plantronics.com>
References: <92E9AB4D42199B4793CE24E094BAEE070497E05B@USSCMB03.plt.plantronics.com>
Message-ID: <D19727A5-4340-43D4-B9ED-D757A007A171@cs.usfca.edu>

It'll be a while but we're quickly stablizing runtime?then to targets?
T
On Jan 2, 2012, at 6:36 PM, Voelkel, Andy wrote:

> Hi All,
> 
> It's very exciting to read about v4, but I can't responsibly play with it because the only job-related ANTLR work I will be doing will all be based on the C# target, at least for the time being. So naturally I'm eagerly anticipating a C# target. Is this something that is months away?
> 
> 
> -          Andy
> 
> ________________________________
> 
> CONFIDENTIALITY NOTICE: This e-mail transmission, and any documents, files or previous e-mail messages attached to it, may contain information that is confidential and/or legally privileged. If you are not the intended recipient, or a person responsible for delivering it to the intended recipient, please DO NOT disclose the contents to another person, store or copy the information in any medium, or use any of the information contained in or attached to this transmission for any purpose. If you have received this transmission in error, please immediately notify the sender by reply email or at privacy at plantronics.com, and destroy the original transmission and its attachments without reading or saving in any manner.
> 
> For further information about Plantronics - the Company, its products, brands, partners, please visit our website www.plantronics.com.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From opensource at peoplemerge.com  Mon Jan  2 19:23:21 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Mon, 2 Jan 2012 22:23:21 -0500
Subject: [antlr-interest] Composite grammar support in antlr4.0ea
In-Reply-To: <F3CC13A6-175C-47D0-AB3F-B2881B100FD0@cs.usfca.edu>
References: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>
	<AD665888-09AB-4C49-8705-FDADC1A9B655@cs.usfca.edu>
	<CANSf4X7DpQyY8eHrv9YNw5Jq-v8Rosq8Sh8YYBYTqpOuYD1z=g@mail.gmail.com>
	<F3CC13A6-175C-47D0-AB3F-B2881B100FD0@cs.usfca.edu>
Message-ID: <CANSf4X6pGSyyC2J=9CbJhMjFDZyX3torEKMjvPNf5CTr2QFejg@mail.gmail.com>

This may be my AHA moment.

When I put imports in members my parsers get:

class Java_JavaDecl extends Parser {

//delegates

//delegators

//constructors

*import com.test.Type;*

//everything

}

What java needs to compile is to put the import outside the class block:

*import com.test.Type;*

class Java_JavaDecl extends Parser {

//delegates

//delegators

//constructors

//everything

}
Is there a way to change this behavior?


On Mon, Jan 2, 2012 at 9:26 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Dave,What do you want to put in the header? imports? Perhaps you are
> putting stuff in the header that should be in the members action?
> Ter
> On Jan 2, 2012, at 1:51 PM, Dave Thomas wrote:
>
> > Thanks, Ter!
> >
> > It sounds like the subordinate grammar means the dependent grammar which
> in
> > my case is the root combined grammar Java.g (per
> > http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars).
> >
> > It totally makes sense that an incomplete grammar cannot stand alone in
> its
> > own package.  I had originally envisioned different packages for major
> > components of my language but it's not a real necessity and their
> coupling
> > could complicate things.
> >
> > I also agree grammars shouldn't be forced into the package of their
> > dependencies.
> >
> > However it seems that I get a duplicate header definition error on all
> > parser grammars (including combined grammars) regardless of whether they
> > contain the same package.  I can't see how this is intended to work when
> > the header contains imports, which seems to me to be a fairly common
> case.
> > An updated tarball with a concrete example is attached.  I put all
> > grammars in the same package for simplicity.
> >
> > The simplest thing that could work would be to have a subordinate grammar
> > override the header of it's dependency (as illustrated in the attached
> > example).  This can work but I suspect requires the subordinate duplicate
> > the code of it's dependencies.  In fact I just discovered (at least with
> > v4) that although antlr spits our the error and nonzero return code, it
> > appears to be properly emitting this!
> >
> > In an ideal world (ahem crazy, badass like the honey badger) we might
> come
> > up with a way of scoping to either share common headers (like
> > includes/imports) or allow disjoint ones (like specifying the package).
> >
> > ... or am I truly missing the obvious and trying to do it "the hard way"
> ?
> >
> > Thanks and Happy New Year!
> > On Jan 2, 2012 12:36 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
> >
> >> Hi Dave,Because the subordinate important grammars are not complete,
> they
> >> should not have a header that specifies the package. Very least, it's
> more
> >> flexible to not force subordinate grammars into certain packages. Is
> >> correct that you have duplicate header definition because you specify
> the
> >> package twice.
> >>
> >> v4 didn't complain about this so I will have to add an error.
> >> Thanks,
> >> Ter
> >> On Jan 1, 2012, at 8:21 PM, Dave Thomas wrote:
> >>
> >>> With all this exciting Honey Badger activity (which is just crazy and
> >>> doesn't give a shit), I thought I'd bump this "Redefinition of header
> >>> action" thread and attach a minimal tarball with code for your
> >> convenience!
> >>>
> >>> I get the same result with antlr-4.0ea (as I did with 3.4 nicely
> >> mavenized)
> >>> by running:
> >>> cd src/main/antlr3; java  -cp
> >>> /path/to/antlr-4.0ea-complete.jar:/path/to/ST-4.0.4.jar org.antlr.Tool
> >>> test/*.g -o ../../../target
> >>> error(144): JavaDecl.g:3:2: redefinition of header action
> >>>
> >>>
> >>> On Tue, Nov 22, 2011 at 9:07 PM, Dave Thomas <
> opensource at peoplemerge.com
> >>> wrote:
> >>>
> >>>> Hi all,
> >>>>
> >>>> I'm using ANTLR for my masters thesis, which includes letting user
> >> extend
> >>>> the lex and parser grammars I supply with their own jargon in the form
> >> of a
> >>>> combined grammar.  I wouldn't have dreamed it possible before ANTLR,
> and
> >>>> I'm a big fan!
> >>>>
> >>>> The problem I'm having is:
> >>>> error(144): JavaDecl.g:3:2: redefinition of header action
> >>>>
> >>>> The reason this is making me scratch my head is that I see this issue
> >> has
> >>>> been reported, and AFAICT addressed:
> >>>> http://www.antlr.org/jira/browse/ANTLR-301
> >>>> http://www.antlr.org/jira/browse/ANTLR-370
> >>>> http://www.antlr.org/jira/browse/ANTLR-375
> >>>>
> http://www.antlr.org/pipermail/antlr-interest/2011-January/040487.html
> >>>> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars (basis
> for
> >>>> the examples; sorry for the cross-post)
> >>>>
> >>>> Am I specifying the antlr release wrong in the maven plugin?
> >>>>
> >>>> Should I be concerned that my dependency hierarchy includes antlr
> 2.7.7?
> >>>> Per
> http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3.4+Release+Notesthe
> >>>> dependency on v2 should be removed, but I still see it when I do `mvn
> >> clean
> >>>> antlr3:antlr compile -X`:
> >>>>
> >>>> [DEBUG]    org.antlr:antlr:jar:3.4:compile
> >>>> [DEBUG]       org.antlr:antlr-runtime:jar:3.4:compile
> >>>> [DEBUG]          org.antlr:stringtemplate:jar:3.2.1:compile
> >>>> [DEBUG]          antlr:antlr:jar:2.7.7:compile
> >>>>
> >>>>
> >>>> src/main/antlr3/test/JLex.g
> >>>>
> >>>> lexer grammar JLex;
> >>>> @lexer::header { package test; }
> >>>>
> >>>> INT : 'int';
> >>>> SEMICOLON : ';';
> >>>> EQUALS : '=';
> >>>> ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
> >>>>
> >>>>
> >>>> src/main/antlr3/test/JavaDecl.g
> >>>>
> >>>> parser grammar JavaDecl;
> >>>> @header { package test; }
> >>>> type : INT ;
> >>>> decl : type ID SEMICOLON
> >>>>    | type ID init SEMICOLON
> >>>>    ;
> >>>> init : EQUALS INT ;
> >>>>
> >>>>
> >>>> src/main/antlr3/test/Java.g:
> >>>>
> >>>> grammar Java;
> >>>> import JavaDecl, JLex;
> >>>> @header { package test; }
> >>>> prog : decl ;
> >>>> type : 'int' | 'float' ;
> >>>>
> >>>> pom.xml:
> >>>>
> >>>> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
> >>>> http://www.w3.org/2001/XMLSchema-instance"
> >>>> xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
> >>>> http://maven.apache.org/xsd/maven-4.0.0.xsd">
> >>>> <modelVersion>4.0.0</modelVersion>
> >>>> <groupId>test</groupId>
> >>>> <artifactId>test</artifactId>
> >>>> <packaging>jar</packaging>
> >>>> <version>1.0-SNAPSHOT</version>
> >>>> <name>test</name>
> >>>> <build>
> >>>> <plugins>
> >>>> <plugin>
> >>>> <groupId>org.antlr</groupId>
> >>>> <artifactId>antlr3-maven-plugin</artifactId>
> >>>> <version>3.4</version>
> >>>> <executions>
> >>>> <execution>
> >>>> <configuration>
> >>>> <goals>
> >>>> <goal>antlr</goal>
> >>>> </goals>
> >>>> </configuration>
> >>>> </execution>
> >>>> </executions>
> >>>> </plugin>
> >>>> </plugins>
> >>>> </build>
> >>>> </project>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>> <antlr-header.tar>
> >>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >>
> > <antlr-header.tar>
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From goodwin at essence-property.com  Tue Jan  3 01:05:02 2012
From: goodwin at essence-property.com (goodwin)
Date: Tue, 03 Jan 2012 09:05:02 +0000
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120103001312.450012@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
	<CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
	<WC20120103001312.450012@essence-property.com>
Message-ID: <WC20120103090502.850021@essence-property.com>

Apologies if this is getting a bit long, but it may be of interest to others 
going down a similar road.


The C-- example in the file share area does not work with 3.4, it has 
uncompileable 


void =null


statements, and on searching the archives it seems that the approach is not 
recommended anyway.


So that probably leaves me with Pie as the best starting point, at least we 
know it should work with 3.4 and uses a recommended approach.


But it will still need a bit of work - extend to a full expression handler, 
and deal with unary operations like sin/cos/exp/log.


I looked at some other examples, but they didn't seem a good starting point, 
but maybe I can take something from them. I need to study


http://www.antlr.org/wiki/display/ANTLR3/Simple+tree-based+interpeter


a bit more.


-----Original Message-----
 From: "goodwin" <goodwin at essence-property.com>
 To: antlr-interest at antlr.org
 Date: Tue, 03 Jan 2012 00:13:12 +0000
 Subject: Re: [antlr-interest] Pie and simple expression calculator


Thanks. I will probably start with the C-- example as a base, and compare it 
with the other examples.


I have been a heavy user of R in the past, so will keep a close eye on antlr4 
and R. R is nice and simple as a language, at least initially, until you 
start using the full power.


My interest in formal languages dates from the mid 80's or earlier (I was 
involved in late 70's with a Fortran program which took hundreds of 
thousands of lines to interpret a complex command language), but never 
actually got my hands dirty, so it has always been on my bucket list, and 
now I have good commercial reasons for doing so, not having any staff 
currently to delegate to!


My starting point is what is simple and easy to use for my end users, they 
are people who are happy enough to program Excel macros, but not much more 
than that.


Plus people nowadays expect the full language editors, pop up lists, good 
error diagnostics, suggestions, a fully interactive editor for the defined 
language, so they can comfortably write their own scripts. Anything which 
reduces support calls from the users.


-----Original Message-----
 From: Kyle Ferrio <kferrio at gmail.com>
 To: goodwin at essence-property.com
 Cc: antlr-interest at antlr.org
 Date: Mon, 2 Jan 2012 15:27:30 -0700
 Subject: Re: [antlr-interest] Pie and simple expression calculator


C-- is a very informative example.  Also check out Scott Stanchfield's videos 
on vimeo.com . 

Scott uses the antlr3 plugin for eclipse.  If you're not an eclipse user 
already, and you're in a hurry, you can still learn a lot just by watching 
his videos.

Kyle

On Jan 2, 2012 2:03 PM, "goodwin" <goodwin at essence-property.com > wrote:

Maybe my best starting point is the C-- example in the shared area.


 Maybe I need to sit down and compare all these examples line by line.

 List: http://www.antlr.org/mailman/listinfo/antlr-interest
 Unsubscribe: 
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From r.gruendler at gmail.com  Tue Jan  3 01:37:39 2012
From: r.gruendler at gmail.com (=?ISO-8859-1?Q?Robert_Gr=FCndler?=)
Date: Tue, 3 Jan 2012 10:37:39 +0100
Subject: [antlr-interest] Escaping percentage character in lexer::header
Message-ID: <CANkJESvxY7qDosOSgrMbFrEqC6sXaTKpghPNu=S2nJQm0AWAMw@mail.gmail.com>

Hi,

i'm unable to add String literals to the lexer::header section of my
grammar, as it throws an
invalid StringTemplate % shorthand syntax: '%s'exception.

There's a thread in the list where Terence Parr replies:

lexer *actions* and lexer::header stuff with % were recently
discovered to require some kind of double escape ;)


I've tried all sorts of escaping strategies, but i can't find a way to do
it properly.

Can anyone clarify how to escape percentage characters in lexer::header
blocks of a grammar?

regards


-robert

From bkiers at gmail.com  Tue Jan  3 02:32:42 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Tue, 3 Jan 2012 11:32:42 +0100
Subject: [antlr-interest] Escaping percentage character in lexer::header
In-Reply-To: <CANkJESvxY7qDosOSgrMbFrEqC6sXaTKpghPNu=S2nJQm0AWAMw@mail.gmail.com>
References: <CANkJESvxY7qDosOSgrMbFrEqC6sXaTKpghPNu=S2nJQm0AWAMw@mail.gmail.com>
Message-ID: <CAOrgODa4qw2XebT+krcKN3pE2Qh9ErHhm7w=t1MLc816zrLC=Q@mail.gmail.com>

Although an error is printed to the stdout, doing:

@lexer::header {
  /* \% */
}

_does_ generate a lexer with `/* % */` placed at the start of the file.

I didn't get something working without an error though...

Regards,

Bart.


2012/1/3 Robert Gr?ndler <r.gruendler at gmail.com>

> Hi,
>
> i'm unable to add String literals to the lexer::header section of my
> grammar, as it throws an
> invalid StringTemplate % shorthand syntax: '%s'exception.
>
> There's a thread in the list where Terence Parr replies:
>
> lexer *actions* and lexer::header stuff with % were recently
> discovered to require some kind of double escape ;)
>
>
> I've tried all sorts of escaping strategies, but i can't find a way to do
> it properly.
>
> Can anyone clarify how to escape percentage characters in lexer::header
> blocks of a grammar?
>
> regards
>
>
> -robert
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From goodwin at essence-property.com  Tue Jan  3 03:23:13 2012
From: goodwin at essence-property.com (goodwin)
Date: Tue, 03 Jan 2012 11:23:13 +0000
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120103090502.850021@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
	<CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
	<WC20120103001312.450012@essence-property.com>
	<WC20120103090502.850021@essence-property.com>
Message-ID: <WC20120103112313.230064@essence-property.com>

MDSL seems to have the same concepts and is based on Pie, but has extended 
Pie, so that might be a good starting point, at least to compare with Pie. 
MDSL has unary operators.

-----Original Message-----
 From: "goodwin" <goodwin at essence-property.com>
 To: antlr-interest at antlr.org
 Date: Tue, 03 Jan 2012 09:05:02 +0000
 Subject: Re: [antlr-interest] Pie and simple expression calculator


Apologies if this is getting a bit long, but it may be of interest to others 
going down a similar road.


The C-- example in the file share area does not work with 3.4, it has 
uncompileable


void =null


statements, and on searching the archives it seems that the approach is not 
recommended anyway.


So that probably leaves me with Pie as the best starting point, at least we 
know it should work with 3.4 and uses a recommended approach.


But it will still need a bit of work - extend to a full expression handler, 
and deal with unary operations like sin/cos/exp/log.


I looked at some other examples, but they didn't seem a good starting point, 
but maybe I can take something from them. I need to study


 http://www.antlr.org/wiki/display/ANTLR3/Simple+tree-based+interpeter


a bit more.


-----Original Message-----
 From: "goodwin" <goodwin at essence-property.com>
 To: antlr-interest at antlr.org
 Date: Tue, 03 Jan 2012 00:13:12 +0000
 Subject: Re: [antlr-interest] Pie and simple expression calculator


Thanks. I will probably start with the C-- example as a base, and compare it 
with the other examples.


I have been a heavy user of R in the past, so will keep a close eye on antlr4 
and R. R is nice and simple as a language, at least initially, until you 
start using the full power.


My interest in formal languages dates from the mid 80's or earlier (I was 
involved in late 70's with a Fortran program which took hundreds of 
thousands of lines to interpret a complex command language), but never 
actually got my hands dirty, so it has always been on my bucket list, and 
now I have good commercial reasons for doing so, not having any staff 
currently to delegate to!


My starting point is what is simple and easy to use for my end users, they 
are people who are happy enough to program Excel macros, but not much more 
than that.


Plus people nowadays expect the full language editors, pop up lists, good 
error diagnostics, suggestions, a fully interactive editor for the defined 
language, so they can comfortably write their own scripts. Anything which 
reduces support calls from the users.


-----Original Message-----
 From: Kyle Ferrio <kferrio at gmail.com>
 To: goodwin at essence-property.com
 Cc: antlr-interest at antlr.org
 Date: Mon, 2 Jan 2012 15:27:30 -0700
 Subject: Re: [antlr-interest] Pie and simple expression calculator


C-- is a very informative example.  Also check out Scott Stanchfield's videos 
on vimeo.com . 

Scott uses the antlr3 plugin for eclipse.  If you're not an eclipse user 
already, and you're in a hurry, you can still learn a lot just by watching 
his videos.

Kyle

On Jan 2, 2012 2:03 PM, "goodwin" <goodwin at essence-property.com > wrote:

Maybe my best starting point is the C-- example in the shared area.


 Maybe I need to sit down and compare all these examples line by line.

 List: http://www.antlr.org/mailman/listinfo/antlr-interest
 Unsubscribe: 
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From oliver.zeigermann at gmail.com  Tue Jan  3 04:06:59 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Tue, 3 Jan 2012 13:06:59 +0100
Subject: [antlr-interest] Reduction in code base after yanking AST stuff
In-Reply-To: <B6D75808-49BF-46E5-9B2A-E44DF8CFD03E@cs.usfca.edu>
References: <B6D75808-49BF-46E5-9B2A-E44DF8CFD03E@cs.usfca.edu>
Message-ID: <CABJr57B_qMR4VcMamL8dq3WK0OmL01e-2vQTTu_rx_Tg2hSTog@mail.gmail.com>

+100

2012/1/3 Terence Parr <parrt at cs.usfca.edu>:
> So, after thinking about it for very long time, I have officially decided to not support ASTs and tree grammars in honey badger. I took the plunge today and yanked it all out. It dramatically simplified everything, of course. Removing code is one of my favorite things :) ?Anyway, I've done the deed. Getting honey badger to support ASTs in a fully backward compatible manner was going to be difficult anyway. v3 works and is stable. moving AST code to v4 with simply make it less reliable.
>
> These are the sizes of the various code areas in relation to their previous size (down from 100%). So, for example, the runtime is 26% smaller:
>
> runtime: 74%
> grammars: 85%
> templates: 74%
> tool code: 77%
> tests: 69%
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From researcher0x00 at gmail.com  Tue Jan  3 05:25:02 2012
From: researcher0x00 at gmail.com (Eric)
Date: Tue, 3 Jan 2012 08:25:02 -0500
Subject: [antlr-interest] Reduction in code base after yanking AST stuff
In-Reply-To: <CABJr57B_qMR4VcMamL8dq3WK0OmL01e-2vQTTu_rx_Tg2hSTog@mail.gmail.com>
References: <B6D75808-49BF-46E5-9B2A-E44DF8CFD03E@cs.usfca.edu>
	<CABJr57B_qMR4VcMamL8dq3WK0OmL01e-2vQTTu_rx_Tg2hSTog@mail.gmail.com>
Message-ID: <CAN45N13e=HWp9rtF3XJhgnKZN_oB+ePR+__O=PaMOZ4do1jLxg@mail.gmail.com>

Ter,

>From my personal perspective I commend the decision. While I know that AST
rewrites have been a personal work of yours for years, I am sure it took a
lot to make the move.

When looking at the pipeline as Lexer -> Parser -> Tree manipulation (v3,
AST rewrite vs v4 SAX, DOM, visitor) -> Output (String Template),
I have had the most trouble with AST rewrite, and routinely resorted to
doing tree manipulation via calls to the API.  I even notice mention in v4
of outputting the tree in LISP format using toStringTree(), though I
haven't tested it yet. While I have tinkered with converting the
s-expressions to LISP or PROLOG in v3 and then manipulating, that is a
route I plan to explore more with v4. Also of note here would be
http://strategoxt.org/

As a hint to Sam Harwell, I have considered creating an F# library for the
tree manipulation phase for the C# target for v4.

I hope that once users see how to make effective use of the new ways of
doing tree manipulations, more ideas will come out on how to effectively
apply the new mechanisms.

Thanks,  Eric

From kferrio at gmail.com  Tue Jan  3 06:33:32 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Tue, 3 Jan 2012 07:33:32 -0700
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <WC20120103090502.850021@essence-property.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
	<CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
	<WC20120103001312.450012@essence-property.com>
	<WC20120103090502.850021@essence-property.com>
Message-ID: <CAAfeEToJc1SabH5E2m1-8fdrN=4GEmiug=4NnO4+se48B8k+Uw@mail.gmail.com>

Apologies... I did not know that the C-- example did not work wirh 3.4.  I
learned a lot from C-- ages ago so it sticks in my mind more than it
should, apparently.  I'm glad to see you found a workable example.

Kyle
On Jan 3, 2012 2:05 AM, "goodwin" <goodwin at essence-property.com> wrote:

> Apologies if this is getting a bit long, but it may be of interest to
> others
> going down a similar road.
>
>
> The C-- example in the file share area does not work with 3.4, it has
> uncompileable
>
>
> void =null
>
>
> statements, and on searching the archives it seems that the approach is not
> recommended anyway.
>
>
> So that probably leaves me with Pie as the best starting point, at least we
> know it should work with 3.4 and uses a recommended approach.
>
>
> But it will still need a bit of work - extend to a full expression handler,
> and deal with unary operations like sin/cos/exp/log.
>
>
> I looked at some other examples, but they didn't seem a good starting
> point,
> but maybe I can take something from them. I need to study
>
>
> http://www.antlr.org/wiki/display/ANTLR3/Simple+tree-based+interpeter
>
>
> a bit more.
>
>
> -----Original Message-----
>  From: "goodwin" <goodwin at essence-property.com>
>  To: antlr-interest at antlr.org
>  Date: Tue, 03 Jan 2012 00:13:12 +0000
>  Subject: Re: [antlr-interest] Pie and simple expression calculator
>
>
> Thanks. I will probably start with the C-- example as a base, and compare
> it
> with the other examples.
>
>
> I have been a heavy user of R in the past, so will keep a close eye on
> antlr4
> and R. R is nice and simple as a language, at least initially, until you
> start using the full power.
>
>
> My interest in formal languages dates from the mid 80's or earlier (I was
> involved in late 70's with a Fortran program which took hundreds of
> thousands of lines to interpret a complex command language), but never
> actually got my hands dirty, so it has always been on my bucket list, and
> now I have good commercial reasons for doing so, not having any staff
> currently to delegate to!
>
>
> My starting point is what is simple and easy to use for my end users, they
> are people who are happy enough to program Excel macros, but not much more
> than that.
>
>
> Plus people nowadays expect the full language editors, pop up lists, good
> error diagnostics, suggestions, a fully interactive editor for the defined
> language, so they can comfortably write their own scripts. Anything which
> reduces support calls from the users.
>
>
> -----Original Message-----
>  From: Kyle Ferrio <kferrio at gmail.com>
>  To: goodwin at essence-property.com
>  Cc: antlr-interest at antlr.org
>  Date: Mon, 2 Jan 2012 15:27:30 -0700
>  Subject: Re: [antlr-interest] Pie and simple expression calculator
>
>
> C-- is a very informative example.  Also check out Scott Stanchfield's
> videos
> on vimeo.com .
>
> Scott uses the antlr3 plugin for eclipse.  If you're not an eclipse user
> already, and you're in a hurry, you can still learn a lot just by watching
> his videos.
>
> Kyle
>
> On Jan 2, 2012 2:03 PM, "goodwin" <goodwin at essence-property.com > wrote:
>
> Maybe my best starting point is the C-- example in the shared area.
>
>
>  Maybe I need to sit down and compare all these examples line by line.
>
>  List: http://www.antlr.org/mailman/listinfo/antlr-interest
>  Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Tue Jan  3 08:26:21 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 3 Jan 2012 08:26:21 -0800
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <CAAfeEToJc1SabH5E2m1-8fdrN=4GEmiug=4NnO4+se48B8k+Uw@mail.gmail.com>
References: <WC20120102174503.520002@essence-property.com>
	<CAAfeETp7Ku-xVJEPKAgnf9SY9+Jce7POrq2_etWTr0vpGdsn0g@mail.gmail.com>
	<WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
	<CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
	<WC20120103001312.450012@essence-property.com>
	<WC20120103090502.850021@essence-property.com>
	<CAAfeEToJc1SabH5E2m1-8fdrN=4GEmiug=4NnO4+se48B8k+Uw@mail.gmail.com>
Message-ID: <492FF826-18C1-4E64-A3A1-C99B69A5A0C0@cs.usfca.edu>

Seems like the super cheap ~25$ Lang Impl Patterns book is what you are looking for, right? or just grab the free code from pragprog's site.
Ter
On Jan 3, 2012, at 6:33 AM, Kyle Ferrio wrote:

> Apologies... I did not know that the C-- example did not work wirh 3.4.  I
> learned a lot from C-- ages ago so it sticks in my mind more than it
> should, apparently.  I'm glad to see you found a workable example.
> 
> Kyle
> On Jan 3, 2012 2:05 AM, "goodwin" <goodwin at essence-property.com> wrote:
> 
>> Apologies if this is getting a bit long, but it may be of interest to
>> others
>> going down a similar road.
>> 
>> 
>> The C-- example in the file share area does not work with 3.4, it has
>> uncompileable
>> 
>> 
>> void =null


From goodwin at essence-property.com  Tue Jan  3 09:18:47 2012
From: goodwin at essence-property.com (goodwin)
Date: Tue, 03 Jan 2012 17:18:47 +0000
Subject: [antlr-interest] Pie and simple expression calculator
In-Reply-To: <492FF826-18C1-4E64-A3A1-C99B69A5A0C0@cs.usfca.edu>
References: <WC20120102203101.60000B@essence-property.com>
	<WC20120102210254.07000C@essence-property.com>
	<CAAfeEToSRY-XeVYa6y4ctKAeGJ2LvwmYeVeTLmNFJWrDNxd1EQ@mail.gmail.com>
	<WC20120103001312.450012@essence-property.com>
	<WC20120103090502.850021@essence-property.com>
	<CAAfeEToJc1SabH5E2m1-8fdrN=4GEmiug=4NnO4+se48B8k+Uw@mail.gmail.com>
	<492FF826-18C1-4E64-A3A1-C99B69A5A0C0@cs.usfca.edu>
Message-ID: <WC20120103171847.040110@essence-property.com>

Don't worry, I've already bought both books, you can buy yourself a beer or 
two on the commission.


I am extending and debugging mdsl, which is itself is an extension of Pie. I 
have already added unary operators such as sin(), and I haven't even read 
the books yet!


I am happy with Pie, mainly because it is 'official' and well described in 
the book. I may tweak some aspects of the language itself, but mdsl already 
does most of the tweaks I want, such as putting back a few curly brackets.


Hope this thread trail helps some other novices.



-----Original Message-----
 From: Terence Parr <parrt at cs.usfca.edu>
 To: goodwin at essence-property.com
 Cc: "antlr-interest at antlr.org Interest" <antlr-interest at antlr.org>
 Date: Tue, 3 Jan 2012 08:26:21 -0800
 Subject: Re: [antlr-interest] Pie and simple expression calculator


Seems like the super cheap ~25$ Lang Impl Patterns book is what you are 
looking for, right? or just grab the free code from pragprog's site.
 Ter
 On Jan 3, 2012, at 6:33 AM, Kyle Ferrio wrote:

 > Apologies... I did not know that the C-- example did not work wirh 3.4.  
I
 > learned a lot from C-- ages ago so it sticks in my mind more than it
 > should, apparently.  I'm glad to see you found a workable example.
 >
 > Kyle
 > On Jan 3, 2012 2:05 AM, "goodwin" <goodwin at essence-property.com> wrote:
 >
 >> Apologies if this is getting a bit long, but it may be of interest to
 >> others
 >> going down a similar road.
 >>
 >>
 >> The C-- example in the file share area does not work with 3.4, it has
 >> uncompileable
 >>
 >>
 >> void =null

From opensource at peoplemerge.com  Tue Jan  3 09:28:15 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Tue, 3 Jan 2012 12:28:15 -0500
Subject: [antlr-interest] Reduction in code base after yanking AST stuff
In-Reply-To: <CAN45N13e=HWp9rtF3XJhgnKZN_oB+ePR+__O=PaMOZ4do1jLxg@mail.gmail.com>
References: <B6D75808-49BF-46E5-9B2A-E44DF8CFD03E@cs.usfca.edu>
	<CABJr57B_qMR4VcMamL8dq3WK0OmL01e-2vQTTu_rx_Tg2hSTog@mail.gmail.com>
	<CAN45N13e=HWp9rtF3XJhgnKZN_oB+ePR+__O=PaMOZ4do1jLxg@mail.gmail.com>
Message-ID: <CANSf4X6crv-70q4m0-2kFgJAJBLt=yERvpZVRMmFG-d_-UpRVg@mail.gmail.com>

>
> When looking at the pipeline as Lexer -> Parser -> Tree manipulation (v3,
> AST rewrite vs v4 SAX, DOM, visitor) -> Output (String Template),
>
> Agreed.  I use ANTLR just for the Lexer -> Parser to implement Inversion
of Control for DSLs (and soon, user-extensible DSLs).  And to ace job
interview questions when they ask you to do really brain-damaged stateful
string manipulation (which is really the same language problem).  ANTLR
makes short work of that.

From gonzague.reydet at gmail.com  Tue Jan  3 09:32:07 2012
From: gonzague.reydet at gmail.com (Gonzague Reydet)
Date: Tue, 3 Jan 2012 18:32:07 +0100
Subject: [antlr-interest] [C] Skip sub-tree nodes from AST?
Message-ID: <CAHHXKCZ9e-eMrDN1JbNLXi34E8Tp97NcN9HD2p7wGoL+XsQ2KA@mail.gmail.com>

Hi all!

It's been two days I am investigating on how to skip a subtree with the C
target of ANTLR v3.4. I found many discussions on this subject on markmail
(notably the following one: http://markmail.org/message/f5op6tdn4vfpw57v).
Exactly like this discussion, my original purpose is to implement an
if/then/else interpreter.
But I can't find a valid solution to parse only either the "then" or the
"else" statement skipping the other one and going to the end of the if
statement after having handled it.

The "if" rule of my parser grammar constructs the AST as following:* ^(IF
expression ^(THEN statement) ^(ELSE statement?) ENDIF);  *

I have tried two different ways:
- First using the method proposed in the discussion :
^(IF expression {
    pANTLR3_BASE_TREE n = $IF.getChild($IF, 3);
    SEEK(n->savedIndex);
    ...
} )
The problem here is the 'savedIndex' field is never set. Is their a way for
this field to be set before parsing the tree?

- Second using a "wildcard pattern" as following : ^(IF expression ^(THEN
.*) ^(ELSE .*) ENDIF)
The problem here is the generated tree parser does not handle DOWN tokens,
so it results in parsing errors when trying to match the "wildcarded"
subtree.


I have found the Pie example (http://www.antlr.org/wiki/display/ANTLR3/Pie)
that passes a "defer" parameter to disable execution in all subrules. Is
this really the only solution for this issue with the C target?
I would really prefer to use the approach proposed by Terrence for the Java
target (http://markmail.org/message/7thj4um2bzhuvqpy) but this will lead to
the same issue of my second solution.

Is there any other solution for this?

Regards,
Gonzague

From serefarikan at kurumsalteknoloji.com  Tue Jan  3 09:37:23 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Tue, 3 Jan 2012 17:37:23 +0000
Subject: [antlr-interest] How is the floating point literal example from
	wiki supposed to work?
Message-ID: <CA+4Thdqq87rXvHc4j1dS42hCUrPQGSgAKjLRvCayUc5xY68vuw@mail.gmail.com>

Greetings,
This example from the wiki seems to handle a use case that has cost me some
black hair (some pulled out, some turned grey...) :
http://www.antlr.org/wiki/display/ANTLR3/Lexer+grammar+for+floating+point,+dot,+range,+time+specs

The example uses various fragment rules in the lexer, then uses one rule to
work on the contents of input stream, and then it sets $type of the rule to
one of the fragment types.

This looks like a very generic use case, I have many lexer rules which are
supposed to be more constrained version of one big/generic rule. For
example, capital letters in English, as a subset of all printable
characters in ASCII. The approach in the example changes the token type and
sends it to parser.

But how on earth is this supposed to be used in the parser? The example
clearly implies that this is a method to handle this use case, but I could
not find a clean way of doing this in the parser. I've found a way of doing
it, which awfully feels like a hack. I'll insert my solution at the end.

I've found out that even though the fragment rules are not visible in the
parser, the actions in the parser can access their identifiers. If a token
arrives with a modified type that belongs to a fragment rule, then the
parser fails. So I'm correcting the token's type after I catch it with a
parser rule that is supposed to represent the fragment rule from the lexer.
Is this a sane solution? Am I missing something obvious here? This must be
a very common use case in building parsers, but I can't seem to get the
method to handle this.

Best regards
Seref

Ps: this is my horrible solution that does the token type trick. It is a
brutally simplified version of the wiki example:

grammar TstForNums;

expr    :    dot;

dot    :    {input.LT(1).getType() == TstForNumsParser.DOT}?
{input.LT(1).setType(TstForNumsParser.FLOATING_POINT_LITERAL);}
FLOATING_POINT_LITERAL
    ;

//these would be our types that will be assigned to actual rule
fragment    TIME_LITERAL        :   ;

fragment    DECIMAL_LITERAL     :   ;

fragment    OCTAL_LITERAL       :   ;

fragment    HEX_LITERAL         :   ;

fragment        DOTDOT                  :       ;

fragment        DOT                     :       ;

//this is the main rule that does the processing
//let's set the type to decimal_literal. This is a very simplified form of
the example from the wiki
//it only shows how a rule's type can be changed here.
FLOATING_POINT_LITERAL
    :    Digits {$type = DECIMAL_LITERAL;}
    ;


fragment
Digits
    :   ('0'..'9')+
    ;

From jimi at temporal-wave.com  Tue Jan  3 11:49:59 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 3 Jan 2012 11:49:59 -0800
Subject: [antlr-interest] How is the floating point literal example from
 wiki supposed to work?
In-Reply-To: <CA+4Thdqq87rXvHc4j1dS42hCUrPQGSgAKjLRvCayUc5xY68vuw@mail.gmail.com>
References: <CA+4Thdqq87rXvHc4j1dS42hCUrPQGSgAKjLRvCayUc5xY68vuw@mail.gmail.com>
Message-ID: <13113d1132bc1958350187d08322c4a0@mail.gmail.com>

The main rule in the example returns the token type as assigned by $type
=. So you just refer to those types directly in the parser rules. Fragment
rules are not returned directly by the lexer but the parser has access to
the token types.

So:

literals
  : TIME_LITERAL
  | DECIMAL_LITERAL

and so on.

However, if you are just trying to restrict things like upper case or non
zero digits, then you probably don't want to do that directly in the lexer
anyway as then you will just throw out an ambiguous error to your users,
such as "Invalid char" whereas if you encode the verification after you
have captured a fairly loose definition of it, then you can say "The
identifier '00033343' at line 4, col 55, cannot start with leading zeros"
and so on. Your users will like you a lot better for that.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Seref Arikan
> Sent: Tuesday, January 03, 2012 9:37 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] How is the floating point literal example
> from wiki supposed to work?
>
> Greetings,
> This example from the wiki seems to handle a use case that has cost me
> some black hair (some pulled out, some turned grey...) :
> http://www.antlr.org/wiki/display/ANTLR3/Lexer+grammar+for+floating+poi
> nt,+dot,+range,+time+specs
>
> The example uses various fragment rules in the lexer, then uses one
> rule to work on the contents of input stream, and then it sets $type of
> the rule to one of the fragment types.
>
> This looks like a very generic use case, I have many lexer rules which
> are supposed to be more constrained version of one big/generic rule.
> For example, capital letters in English, as a subset of all printable
> characters in ASCII. The approach in the example changes the token type
> and sends it to parser.
>
> But how on earth is this supposed to be used in the parser? The example
> clearly implies that this is a method to handle this use case, but I
> could not find a clean way of doing this in the parser. I've found a
> way of doing it, which awfully feels like a hack. I'll insert my
> solution at the end.
>
> I've found out that even though the fragment rules are not visible in
> the parser, the actions in the parser can access their identifiers. If
> a token arrives with a modified type that belongs to a fragment rule,
> then the parser fails. So I'm correcting the token's type after I catch
> it with a parser rule that is supposed to represent the fragment rule
> from the lexer.
> Is this a sane solution? Am I missing something obvious here? This must
> be a very common use case in building parsers, but I can't seem to get
> the method to handle this.
>
> Best regards
> Seref
>
> Ps: this is my horrible solution that does the token type trick. It is
> a brutally simplified version of the wiki example:
>
> grammar TstForNums;
>
> expr    :    dot;
>
> dot    :    {input.LT(1).getType() == TstForNumsParser.DOT}?
> {input.LT(1).setType(TstForNumsParser.FLOATING_POINT_LITERAL);}
> FLOATING_POINT_LITERAL
>     ;
>
> //these would be our types that will be assigned to actual rule
> fragment    TIME_LITERAL        :   ;
>
> fragment    DECIMAL_LITERAL     :   ;
>
> fragment    OCTAL_LITERAL       :   ;
>
> fragment    HEX_LITERAL         :   ;
>
> fragment        DOTDOT                  :       ;
>
> fragment        DOT                     :       ;
>
> //this is the main rule that does the processing //let's set the type
> to decimal_literal. This is a very simplified form of the example from
> the wiki //it only shows how a rule's type can be changed here.
> FLOATING_POINT_LITERAL
>     :    Digits {$type = DECIMAL_LITERAL;}
>     ;
>
>
> fragment
> Digits
>     :   ('0'..'9')+
>     ;
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From jimi at temporal-wave.com  Tue Jan  3 12:21:53 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 3 Jan 2012 12:21:53 -0800
Subject: [antlr-interest] [C] Skip sub-tree nodes from AST?
In-Reply-To: <CAHHXKCZ9e-eMrDN1JbNLXi34E8Tp97NcN9HD2p7wGoL+XsQ2KA@mail.gmail.com>
References: <CAHHXKCZ9e-eMrDN1JbNLXi34E8Tp97NcN9HD2p7wGoL+XsQ2KA@mail.gmail.com>
Message-ID: <a674549ba8e39bf077231d8805f408e6@mail.gmail.com>

Did you look at the MARK and RELEASE macros?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gonzague Reydet
> Sent: Tuesday, January 03, 2012 9:32 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] [C] Skip sub-tree nodes from AST?
>
> Hi all!
>
> It's been two days I am investigating on how to skip a subtree with the
> C target of ANTLR v3.4. I found many discussions on this subject on
> markmail (notably the following one:
> http://markmail.org/message/f5op6tdn4vfpw57v).
> Exactly like this discussion, my original purpose is to implement an
> if/then/else interpreter.
> But I can't find a valid solution to parse only either the "then" or
> the "else" statement skipping the other one and going to the end of the
> if statement after having handled it.
>
> The "if" rule of my parser grammar constructs the AST as following:*
> ^(IF expression ^(THEN statement) ^(ELSE statement?) ENDIF);  *
>
> I have tried two different ways:
> - First using the method proposed in the discussion :
> ^(IF expression {
>     pANTLR3_BASE_TREE n = $IF.getChild($IF, 3);
>     SEEK(n->savedIndex);
>     ...
> } )
> The problem here is the 'savedIndex' field is never set. Is their a way
> for this field to be set before parsing the tree?
>
> - Second using a "wildcard pattern" as following : ^(IF expression
> ^(THEN
> .*) ^(ELSE .*) ENDIF)
> The problem here is the generated tree parser does not handle DOWN
> tokens, so it results in parsing errors when trying to match the
> "wildcarded"
> subtree.
>
>
> I have found the Pie example
> (http://www.antlr.org/wiki/display/ANTLR3/Pie)
> that passes a "defer" parameter to disable execution in all subrules.
> Is this really the only solution for this issue with the C target?
> I would really prefer to use the approach proposed by Terrence for the
> Java target (http://markmail.org/message/7thj4um2bzhuvqpy) but this
> will lead to the same issue of my second solution.
>
> Is there any other solution for this?
>
> Regards,
> Gonzague
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From gonzague.reydet at gmail.com  Tue Jan  3 13:01:55 2012
From: gonzague.reydet at gmail.com (Gonzague Reydet)
Date: Tue, 3 Jan 2012 22:01:55 +0100
Subject: [antlr-interest] [C] Skip sub-tree nodes from AST?
In-Reply-To: <a674549ba8e39bf077231d8805f408e6@mail.gmail.com>
References: <CAHHXKCZ9e-eMrDN1JbNLXi34E8Tp97NcN9HD2p7wGoL+XsQ2KA@mail.gmail.com>
	<a674549ba8e39bf077231d8805f408e6@mail.gmail.com>
Message-ID: <CAHHXKCYy1yXLhZpvR3ZL5CCj64j+ZvBhq+AkZ2eJdCngsbHEsw@mail.gmail.com>

Hi Jim,

I suppose by "RELEASE" macro you mean "REWIND"?

Yes I tried to use these macros as following :
 ^(IF expression { thenIdx = MARK(); } ^(THEN .*) { elseIdx = MARK(); }
^(ELSE .*) ENDIF)

But the same problem occurs as described in my previous message, the
generated tree parser does not handle properly the UP and DOWN tokens for
the " .* " pattern.
I don't see how to use the MARK macro without the " .* " pattern.


2012/1/3 Jim Idle <jimi at temporal-wave.com>

> Did you look at the MARK and RELEASE macros?
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Gonzague Reydet
> > Sent: Tuesday, January 03, 2012 9:32 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] [C] Skip sub-tree nodes from AST?
> >
> > Hi all!
> >
> > It's been two days I am investigating on how to skip a subtree with the
> > C target of ANTLR v3.4. I found many discussions on this subject on
> > markmail (notably the following one:
> > http://markmail.org/message/f5op6tdn4vfpw57v).
> > Exactly like this discussion, my original purpose is to implement an
> > if/then/else interpreter.
> > But I can't find a valid solution to parse only either the "then" or
> > the "else" statement skipping the other one and going to the end of the
> > if statement after having handled it.
> >
> > The "if" rule of my parser grammar constructs the AST as following:*
> > ^(IF expression ^(THEN statement) ^(ELSE statement?) ENDIF);  *
> >
> > I have tried two different ways:
> > - First using the method proposed in the discussion :
> > ^(IF expression {
> >     pANTLR3_BASE_TREE n = $IF.getChild($IF, 3);
> >     SEEK(n->savedIndex);
> >     ...
> > } )
> > The problem here is the 'savedIndex' field is never set. Is their a way
> > for this field to be set before parsing the tree?
> >
> > - Second using a "wildcard pattern" as following : ^(IF expression
> > ^(THEN
> > .*) ^(ELSE .*) ENDIF)
> > The problem here is the generated tree parser does not handle DOWN
> > tokens, so it results in parsing errors when trying to match the
> > "wildcarded"
> > subtree.
> >
> >
> > I have found the Pie example
> > (http://www.antlr.org/wiki/display/ANTLR3/Pie)
> > that passes a "defer" parameter to disable execution in all subrules.
> > Is this really the only solution for this issue with the C target?
> > I would really prefer to use the approach proposed by Terrence for the
> > Java target (http://markmail.org/message/7thj4um2bzhuvqpy) but this
> > will lead to the same issue of my second solution.
> >
> > Is there any other solution for this?
> >
> > Regards,
> > Gonzague
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
T?l : +33 (0)6 21 02 90 48

From serefarikan at kurumsalteknoloji.com  Tue Jan  3 13:07:16 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Tue, 3 Jan 2012 21:07:16 +0000
Subject: [antlr-interest] How is the floating point literal example from
	wiki supposed to work?
In-Reply-To: <13113d1132bc1958350187d08322c4a0@mail.gmail.com>
References: <CA+4Thdqq87rXvHc4j1dS42hCUrPQGSgAKjLRvCayUc5xY68vuw@mail.gmail.com>
	<13113d1132bc1958350187d08322c4a0@mail.gmail.com>
Message-ID: <CA+4Thdqz9wYwzxe9qAHJHcV5nHQ+o4HskpHka4rsWD0zGnQs9w@mail.gmail.com>

Thanks Jim,
You have beaten me to it. I was going to reply to my own question after
finding out that I could write parser rules such as rul : Fragment_Rule;

Your feedback is helpful beyond my question though. Could you briefly
outline a parser focused solution please? Are you implying that I should
process token information from parser rules? It is really tricky to
distribute various tasks to lexer and parser.

Cheers
Seref

On Tuesday, January 3, 2012, Jim Idle <jimi at temporal-wave.com> wrote:
> The main rule in the example returns the token type as assigned by $type
> =. So you just refer to those types directly in the parser rules. Fragment
> rules are not returned directly by the lexer but the parser has access to
> the token types.
>
> So:
>
> literals
>  : TIME_LITERAL
>  | DECIMAL_LITERAL
>
> and so on.
>
> However, if you are just trying to restrict things like upper case or non
> zero digits, then you probably don't want to do that directly in the lexer
> anyway as then you will just throw out an ambiguous error to your users,
> such as "Invalid char" whereas if you encode the verification after you
> have captured a fairly loose definition of it, then you can say "The
> identifier '00033343' at line 4, col 55, cannot start with leading zeros"
> and so on. Your users will like you a lot better for that.
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Seref Arikan
>> Sent: Tuesday, January 03, 2012 9:37 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] How is the floating point literal example
>> from wiki supposed to work?
>>
>> Greetings,
>> This example from the wiki seems to handle a use case that has cost me
>> some black hair (some pulled out, some turned grey...) :
>> http://www.antlr.org/wiki/display/ANTLR3/Lexer+grammar+for+floating+poi
>> nt,+dot,+range,+time+specs
>>
>> The example uses various fragment rules in the lexer, then uses one
>> rule to work on the contents of input stream, and then it sets $type of
>> the rule to one of the fragment types.
>>
>> This looks like a very generic use case, I have many lexer rules which
>> are supposed to be more constrained version of one big/generic rule.
>> For example, capital letters in English, as a subset of all printable
>> characters in ASCII. The approach in the example changes the token type
>> and sends it to parser.
>>
>> But how on earth is this supposed to be used in the parser? The example
>> clearly implies that this is a method to handle this use case, but I
>> could not find a clean way of doing this in the parser. I've found a
>> way of doing it, which awfully feels like a hack. I'll insert my
>> solution at the end.
>>
>> I've found out that even though the fragment rules are not visible in
>> the parser, the actions in the parser can access their identifiers. If
>> a token arrives with a modified type that belongs to a fragment rule,
>> then the parser fails. So I'm correcting the token's type after I catch
>> it with a parser rule that is supposed to represent the fragment rule
>> from the lexer.
>> Is this a sane solution? Am I missing something obvious here? This must
>> be a very common use case in building parsers, but I can't seem to get
>> the method to handle this.
>>
>> Best regards
>> Seref
>>
>> Ps: this is my horrible solution that does the token type trick. It is
>> a brutally simplified version of the wiki example:
>>
>> grammar TstForNums;
>>
>> expr    :    dot;
>>
>> dot    :    {input.LT(1).getType() == TstForNumsParser.DOT}?
>> {input.LT(1).setType(TstForNumsParser.FLOATING_POINT_LITERAL);}
>> FLOATING_POINT_LITERAL
>>     ;
>>
>> //these would be our types that will be assigned to actual rule
>> fragment    TIME_LITERAL        :   ;
>>
>> fragment    DECIMAL_LITERAL     :   ;
>>
>> fragment    OCTAL_LITERAL       :   ;
>>
>> fragment    HEX_LITERAL         :   ;
>>
>> fragment        DOTDOT                  :       ;
>>
>> fragment        DOT                     :       ;
>>
>> //this is the main rule that does the processing //let's set the type
>> to decimal_literal. This is a very simplified form of the example from
>> the wiki //it only shows how a rule's type can be changed here.
>> FLOATING_POINT_LITERAL
>>     :    Digits {$type = DECIMAL_LITERAL;}
>>     ;
>>
>>
>> fragment
>> Digits
>>     :   ('0'..'9')+
>>     ;
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Tue Jan  3 16:31:39 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 3 Jan 2012 16:31:39 -0800
Subject: [antlr-interest] Composite grammar support in antlr4.0ea
In-Reply-To: <CANSf4X6pGSyyC2J=9CbJhMjFDZyX3torEKMjvPNf5CTr2QFejg@mail.gmail.com>
References: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>
	<AD665888-09AB-4C49-8705-FDADC1A9B655@cs.usfca.edu>
	<CANSf4X7DpQyY8eHrv9YNw5Jq-v8Rosq8Sh8YYBYTqpOuYD1z=g@mail.gmail.com>
	<F3CC13A6-175C-47D0-AB3F-B2881B100FD0@cs.usfca.edu>
	<CANSf4X6pGSyyC2J=9CbJhMjFDZyX3torEKMjvPNf5CTr2QFejg@mail.gmail.com>
Message-ID: <A479359A-C3FC-4E3A-ACC3-ADDA2C376C26@cs.usfca.edu>

You should have imports in the header and fields and constructors etc. in the members area, but only put those actions in the root grammar not in the subordinates.

Ter
On Jan 2, 2012, at 7:23 PM, Dave Thomas wrote:

> This may be my AHA moment.
> 
> When I put imports in members my parsers get:
> 
> class Java_JavaDecl extends Parser {
> 
> //delegates
> 
> //delegators
> 
> //constructors
> 
> *import com.test.Type;*
> 
> //everything
> 
> }
> 
> What java needs to compile is to put the import outside the class block:
> 
> *import com.test.Type;*
> 
> class Java_JavaDecl extends Parser {
> 
> //delegates
> 
> //delegators
> 
> //constructors
> 
> //everything
> 
> }
> Is there a way to change this behavior?
> 
> 
> On Mon, Jan 2, 2012 at 9:26 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> 
>> Hi Dave,What do you want to put in the header? imports? Perhaps you are
>> putting stuff in the header that should be in the members action?
>> Ter
>> On Jan 2, 2012, at 1:51 PM, Dave Thomas wrote:
>> 
>>> Thanks, Ter!
>>> 
>>> It sounds like the subordinate grammar means the dependent grammar which
>> in
>>> my case is the root combined grammar Java.g (per
>>> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars).
>>> 
>>> It totally makes sense that an incomplete grammar cannot stand alone in
>> its
>>> own package.  I had originally envisioned different packages for major
>>> components of my language but it's not a real necessity and their
>> coupling
>>> could complicate things.
>>> 
>>> I also agree grammars shouldn't be forced into the package of their
>>> dependencies.
>>> 
>>> However it seems that I get a duplicate header definition error on all
>>> parser grammars (including combined grammars) regardless of whether they
>>> contain the same package.  I can't see how this is intended to work when
>>> the header contains imports, which seems to me to be a fairly common
>> case.
>>> An updated tarball with a concrete example is attached.  I put all
>>> grammars in the same package for simplicity.
>>> 
>>> The simplest thing that could work would be to have a subordinate grammar
>>> override the header of it's dependency (as illustrated in the attached
>>> example).  This can work but I suspect requires the subordinate duplicate
>>> the code of it's dependencies.  In fact I just discovered (at least with
>>> v4) that although antlr spits our the error and nonzero return code, it
>>> appears to be properly emitting this!
>>> 
>>> In an ideal world (ahem crazy, badass like the honey badger) we might
>> come
>>> up with a way of scoping to either share common headers (like
>>> includes/imports) or allow disjoint ones (like specifying the package).
>>> 
>>> ... or am I truly missing the obvious and trying to do it "the hard way"
>> ?
>>> 
>>> Thanks and Happy New Year!
>>> On Jan 2, 2012 12:36 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
>>> 
>>>> Hi Dave,Because the subordinate important grammars are not complete,
>> they
>>>> should not have a header that specifies the package. Very least, it's
>> more
>>>> flexible to not force subordinate grammars into certain packages. Is
>>>> correct that you have duplicate header definition because you specify
>> the
>>>> package twice.
>>>> 
>>>> v4 didn't complain about this so I will have to add an error.
>>>> Thanks,
>>>> Ter
>>>> On Jan 1, 2012, at 8:21 PM, Dave Thomas wrote:
>>>> 
>>>>> With all this exciting Honey Badger activity (which is just crazy and
>>>>> doesn't give a shit), I thought I'd bump this "Redefinition of header
>>>>> action" thread and attach a minimal tarball with code for your
>>>> convenience!
>>>>> 
>>>>> I get the same result with antlr-4.0ea (as I did with 3.4 nicely
>>>> mavenized)
>>>>> by running:
>>>>> cd src/main/antlr3; java  -cp
>>>>> /path/to/antlr-4.0ea-complete.jar:/path/to/ST-4.0.4.jar org.antlr.Tool
>>>>> test/*.g -o ../../../target
>>>>> error(144): JavaDecl.g:3:2: redefinition of header action
>>>>> 
>>>>> 
>>>>> On Tue, Nov 22, 2011 at 9:07 PM, Dave Thomas <
>> opensource at peoplemerge.com
>>>>> wrote:
>>>>> 
>>>>>> Hi all,
>>>>>> 
>>>>>> I'm using ANTLR for my masters thesis, which includes letting user
>>>> extend
>>>>>> the lex and parser grammars I supply with their own jargon in the form
>>>> of a
>>>>>> combined grammar.  I wouldn't have dreamed it possible before ANTLR,
>> and
>>>>>> I'm a big fan!
>>>>>> 
>>>>>> The problem I'm having is:
>>>>>> error(144): JavaDecl.g:3:2: redefinition of header action
>>>>>> 
>>>>>> The reason this is making me scratch my head is that I see this issue
>>>> has
>>>>>> been reported, and AFAICT addressed:
>>>>>> http://www.antlr.org/jira/browse/ANTLR-301
>>>>>> http://www.antlr.org/jira/browse/ANTLR-370
>>>>>> http://www.antlr.org/jira/browse/ANTLR-375
>>>>>> 
>> http://www.antlr.org/pipermail/antlr-interest/2011-January/040487.html
>>>>>> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars (basis
>> for
>>>>>> the examples; sorry for the cross-post)
>>>>>> 
>>>>>> Am I specifying the antlr release wrong in the maven plugin?
>>>>>> 
>>>>>> Should I be concerned that my dependency hierarchy includes antlr
>> 2.7.7?
>>>>>> Per
>> http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3.4+Release+Notesthe
>>>>>> dependency on v2 should be removed, but I still see it when I do `mvn
>>>> clean
>>>>>> antlr3:antlr compile -X`:
>>>>>> 
>>>>>> [DEBUG]    org.antlr:antlr:jar:3.4:compile
>>>>>> [DEBUG]       org.antlr:antlr-runtime:jar:3.4:compile
>>>>>> [DEBUG]          org.antlr:stringtemplate:jar:3.2.1:compile
>>>>>> [DEBUG]          antlr:antlr:jar:2.7.7:compile
>>>>>> 
>>>>>> 
>>>>>> src/main/antlr3/test/JLex.g
>>>>>> 
>>>>>> lexer grammar JLex;
>>>>>> @lexer::header { package test; }
>>>>>> 
>>>>>> INT : 'int';
>>>>>> SEMICOLON : ';';
>>>>>> EQUALS : '=';
>>>>>> ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
>>>>>> 
>>>>>> 
>>>>>> src/main/antlr3/test/JavaDecl.g
>>>>>> 
>>>>>> parser grammar JavaDecl;
>>>>>> @header { package test; }
>>>>>> type : INT ;
>>>>>> decl : type ID SEMICOLON
>>>>>>   | type ID init SEMICOLON
>>>>>>   ;
>>>>>> init : EQUALS INT ;
>>>>>> 
>>>>>> 
>>>>>> src/main/antlr3/test/Java.g:
>>>>>> 
>>>>>> grammar Java;
>>>>>> import JavaDecl, JLex;
>>>>>> @header { package test; }
>>>>>> prog : decl ;
>>>>>> type : 'int' | 'float' ;
>>>>>> 
>>>>>> pom.xml:
>>>>>> 
>>>>>> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
>>>>>> http://www.w3.org/2001/XMLSchema-instance"
>>>>>> xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
>>>>>> http://maven.apache.org/xsd/maven-4.0.0.xsd">
>>>>>> <modelVersion>4.0.0</modelVersion>
>>>>>> <groupId>test</groupId>
>>>>>> <artifactId>test</artifactId>
>>>>>> <packaging>jar</packaging>
>>>>>> <version>1.0-SNAPSHOT</version>
>>>>>> <name>test</name>
>>>>>> <build>
>>>>>> <plugins>
>>>>>> <plugin>
>>>>>> <groupId>org.antlr</groupId>
>>>>>> <artifactId>antlr3-maven-plugin</artifactId>
>>>>>> <version>3.4</version>
>>>>>> <executions>
>>>>>> <execution>
>>>>>> <configuration>
>>>>>> <goals>
>>>>>> <goal>antlr</goal>
>>>>>> </goals>
>>>>>> </configuration>
>>>>>> </execution>
>>>>>> </executions>
>>>>>> </plugin>
>>>>>> </plugins>
>>>>>> </build>
>>>>>> </project>
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>> <antlr-header.tar>
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>> 
>>>> 
>>> <antlr-header.tar>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Tue Jan  3 16:35:41 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 3 Jan 2012 16:35:41 -0800
Subject: [antlr-interest] Reduction in code base after yanking AST stuff
In-Reply-To: <CAN45N13e=HWp9rtF3XJhgnKZN_oB+ePR+__O=PaMOZ4do1jLxg@mail.gmail.com>
References: <B6D75808-49BF-46E5-9B2A-E44DF8CFD03E@cs.usfca.edu>
	<CABJr57B_qMR4VcMamL8dq3WK0OmL01e-2vQTTu_rx_Tg2hSTog@mail.gmail.com>
	<CAN45N13e=HWp9rtF3XJhgnKZN_oB+ePR+__O=PaMOZ4do1jLxg@mail.gmail.com>
Message-ID: <E0BEE2F7-09CF-4108-BE5E-BF48BD0E7DEE@cs.usfca.edu>


On Jan 3, 2012, at 5:25 AM, Eric wrote:

> Ter,
> 
>> From my personal perspective I commend the decision. While I know that AST
> rewrites have been a personal work of yours for years, I am sure it took a
> lot to make the move.

It's important to admit when you've been going in the wrong direction, no matter how painful. I'm just embarrassed I didn't see this point earlier. most (but not all) of the applications I've built over the last decade or two would have been easier with listeners

> When looking at the pipeline as Lexer -> Parser -> Tree manipulation (v3,
> AST rewrite vs v4 SAX, DOM, visitor) -> Output (String Template),
> I have had the most trouble with AST rewrite, and routinely resorted to
> doing tree manipulation via calls to the API.  I even notice mention in v4
> of outputting the tree in LISP format using toStringTree(), though I
> haven't tested it yet. While I have tinkered with converting the
> s-expressions to LISP or PROLOG in v3 and then manipulating, that is a
> route I plan to explore more with v4. Also of note here would be
> http://strategoxt.org/

Yeah, those guys are very smart and it's a cool tool.

> As a hint to Sam Harwell, I have considered creating an F# library for the
> tree manipulation phase for the C# target for v4.
> 
> I hope that once users see how to make effective use of the new ways of
> doing tree manipulations, more ideas will come out on how to effectively
> apply the new mechanisms.

Yep, I'm interested to know what people think about rewriting parse trees. certainly that's what most of the European tools do.

Ter

From parrt at cs.usfca.edu  Tue Jan  3 17:48:59 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 3 Jan 2012 17:48:59 -0800
Subject: [antlr-interest] 4.0 daily builds
In-Reply-To: <20120102213226.0690E3418405@www.antlr.org>
References: <106E6A48-97E1-4EDF-B3C6-56CC0E09F67E@cs.usfca.edu>
	<CAKcBoku0LJ2e2W0-bjrvwb5GtOQqnh=rBXRTYXfoK93=QYJ85w@mail.gmail.com>
	<4F4F84D5-EEE6-4D71-9DC4-D3EBF18A83D0@cs.usfca.edu>
	<CAN45N12JaVWr6CVB_F2g5kWJhnVyUbMcnR91dN-AWcM+KSRReg@mail.gmail.com>
	<26DD96E3-8DF6-471A-A0A0-E989071CD86F@cs.usfca.edu>
	<4F00D5F5.1080405@lancaster.ac.uk>
	<F3E707EA-88CB-4D13-9BD3-48EAE4F4F2D3@cs.usfca.edu>
	<20120102213226.0690E3418405@www.antlr.org>
Message-ID: <F2B620D2-C09F-4401-8A71-FC883CF4B9A2@cs.usfca.edu>

Hi Gavin,

Sorry for the delay. I'm looking at the Lexer.nextToken method and it looks like it tracks the starting character position in the input buffer and then, at a valid match, it create a token from the start and stop character. If you set the this.text field at any time during a token match, the emit() method will use that text override instead of the start and stop character positions.

Upon skip, everything is thrown away and start again.

Upon more, it continues looking for a token without resetting the starting character position or field text. So, if you want to modify the text for the token such as \n (the 2 characters) going to the actual
neline character  (1 character), you will need to modify field text. But, remember that it contains anything matched before hand that called more. So, if you are matching escaped characters in a string, for example, and you want to replace \n with newline, that you should only change the last 2 characters of text. Do not reset text. Do:

text = text.substring(0,text.length()-2) + "\n"; 

or something like that. That is inefficient, so you can always manage  your own character buffer.

 I am open to suggestions about how to make your life easier in this case!

Ter

On Jan 2, 2012, at 1:32 PM, Gavin Lambert wrote:

> At 11:44 2/01/2012, Terence Parr wrote:
>>> Can the special rules modify the text they're matching
>>> in terms of the text the eventual token gets?
>> 
>> sure by setting this.text.
> 
> Does that work when more() is used to tell it to return a single 
> token?  As I recall, while lexer fragment rules could set $text 
> all they wanted, it didn't actually have any effect, since the 
> final rule simply set its text based on the matched bounds, not 
> the text of its subrules.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kferrio at gmail.com  Tue Jan  3 20:52:53 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Tue, 3 Jan 2012 21:52:53 -0700
Subject: [antlr-interest] some v4 examples
In-Reply-To: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
References: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
Message-ID: <CAAfeEToEE-yorinEjX12Zk9WMJsg-=tHazrU7Huy7HR+LDCM9w@mail.gmail.com>

I just did a side-by-side comparison of Cymbol.g4 to Cymbol.g.  (True, the
latter currently has features missing from the former, and the former does
not demonstrate associativity yet.)  Wow.  What an improvement in
readability.  Honey Badger ain't afraid of no left recursion!


On Sun, Jan 1, 2012 at 1:47 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> http://www.antlr.org/wiki/display/ANTLR4/Examples
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Tue Jan  3 21:17:59 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Tue, 3 Jan 2012 22:17:59 -0700
Subject: [antlr-interest] lexical modes and XML grammar
In-Reply-To: <FAA14270-0041-4B19-949F-775A43A0A7BC@cs.usfca.edu>
References: <FAA14270-0041-4B19-949F-775A43A0A7BC@cs.usfca.edu>
Message-ID: <CAAfeEToMp2LnR0C=aSPusdMVhXw3iYip8SyRd0er_yXvspn6hQ@mail.gmail.com>

I see why you're (rightly) pleased about this.  I threw down some truly
ugly XML, and Honey Badger just ate it up.

If you keep making things this easy, I might not need to dive into the
internals.  What am I going to do with all that free time???

Kyle


On Sun, Jan 1, 2012 at 4:04 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> http://www.antlr.org/wiki/download/attachments/28049418/XMLParser.g4
> http://www.antlr.org/wiki/download/attachments/28049418/XMLLexer.g4
>
> handles unicode tags etc?
>
> I run with
>
> $ for f in XML-inputs/*.xml; do echo $f; j
> org.antlr.v4.runtime.misc.TestRig XML document -print $f; done
>
> add -encoding euc-jp flag to read euc-jp encoded xml file, for example.
>
> v4 makes short work of xml now.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From opensource at peoplemerge.com  Tue Jan  3 22:42:25 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Wed, 4 Jan 2012 01:42:25 -0500
Subject: [antlr-interest] Composite grammar support in antlr4.0ea
In-Reply-To: <A479359A-C3FC-4E3A-ACC3-ADDA2C376C26@cs.usfca.edu>
References: <CANSf4X7_JLQo5eBTakKtdRGjvuW2K==FgbRcP=buvn3TyQY-Rg@mail.gmail.com>
	<AD665888-09AB-4C49-8705-FDADC1A9B655@cs.usfca.edu>
	<CANSf4X7DpQyY8eHrv9YNw5Jq-v8Rosq8Sh8YYBYTqpOuYD1z=g@mail.gmail.com>
	<F3CC13A6-175C-47D0-AB3F-B2881B100FD0@cs.usfca.edu>
	<CANSf4X6pGSyyC2J=9CbJhMjFDZyX3torEKMjvPNf5CTr2QFejg@mail.gmail.com>
	<A479359A-C3FC-4E3A-ACC3-ADDA2C376C26@cs.usfca.edu>
Message-ID: <CANSf4X5PZWTGjCgRVs-K77QXSsG62H5ps7PmGg2s6gcyfSzsAQ@mail.gmail.com>

Great, I'm in business.  The next AHA moment came when I read I just need
tu run antlr on the root grammar, and it imports subordinates.

On Tue, Jan 3, 2012 at 7:31 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> You should have imports in the header and fields and constructors etc. in
> the members area, but only put those actions in the root grammar not in the
> subordinates.
>
> Ter
> On Jan 2, 2012, at 7:23 PM, Dave Thomas wrote:
>
> > This may be my AHA moment.
> >
> > When I put imports in members my parsers get:
> >
> > class Java_JavaDecl extends Parser {
> >
> > //delegates
> >
> > //delegators
> >
> > //constructors
> >
> > *import com.test.Type;*
> >
> > //everything
> >
> > }
> >
> > What java needs to compile is to put the import outside the class block:
> >
> > *import com.test.Type;*
> >
> > class Java_JavaDecl extends Parser {
> >
> > //delegates
> >
> > //delegators
> >
> > //constructors
> >
> > //everything
> >
> > }
> > Is there a way to change this behavior?
> >
> >
> > On Mon, Jan 2, 2012 at 9:26 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> >
> >> Hi Dave,What do you want to put in the header? imports? Perhaps you are
> >> putting stuff in the header that should be in the members action?
> >> Ter
> >> On Jan 2, 2012, at 1:51 PM, Dave Thomas wrote:
> >>
> >>> Thanks, Ter!
> >>>
> >>> It sounds like the subordinate grammar means the dependent grammar
> which
> >> in
> >>> my case is the root combined grammar Java.g (per
> >>> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars).
> >>>
> >>> It totally makes sense that an incomplete grammar cannot stand alone in
> >> its
> >>> own package.  I had originally envisioned different packages for major
> >>> components of my language but it's not a real necessity and their
> >> coupling
> >>> could complicate things.
> >>>
> >>> I also agree grammars shouldn't be forced into the package of their
> >>> dependencies.
> >>>
> >>> However it seems that I get a duplicate header definition error on all
> >>> parser grammars (including combined grammars) regardless of whether
> they
> >>> contain the same package.  I can't see how this is intended to work
> when
> >>> the header contains imports, which seems to me to be a fairly common
> >> case.
> >>> An updated tarball with a concrete example is attached.  I put all
> >>> grammars in the same package for simplicity.
> >>>
> >>> The simplest thing that could work would be to have a subordinate
> grammar
> >>> override the header of it's dependency (as illustrated in the attached
> >>> example).  This can work but I suspect requires the subordinate
> duplicate
> >>> the code of it's dependencies.  In fact I just discovered (at least
> with
> >>> v4) that although antlr spits our the error and nonzero return code, it
> >>> appears to be properly emitting this!
> >>>
> >>> In an ideal world (ahem crazy, badass like the honey badger) we might
> >> come
> >>> up with a way of scoping to either share common headers (like
> >>> includes/imports) or allow disjoint ones (like specifying the package).
> >>>
> >>> ... or am I truly missing the obvious and trying to do it "the hard
> way"
> >> ?
> >>>
> >>> Thanks and Happy New Year!
> >>> On Jan 2, 2012 12:36 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
> >>>
> >>>> Hi Dave,Because the subordinate important grammars are not complete,
> >> they
> >>>> should not have a header that specifies the package. Very least, it's
> >> more
> >>>> flexible to not force subordinate grammars into certain packages. Is
> >>>> correct that you have duplicate header definition because you specify
> >> the
> >>>> package twice.
> >>>>
> >>>> v4 didn't complain about this so I will have to add an error.
> >>>> Thanks,
> >>>> Ter
> >>>> On Jan 1, 2012, at 8:21 PM, Dave Thomas wrote:
> >>>>
> >>>>> With all this exciting Honey Badger activity (which is just crazy and
> >>>>> doesn't give a shit), I thought I'd bump this "Redefinition of header
> >>>>> action" thread and attach a minimal tarball with code for your
> >>>> convenience!
> >>>>>
> >>>>> I get the same result with antlr-4.0ea (as I did with 3.4 nicely
> >>>> mavenized)
> >>>>> by running:
> >>>>> cd src/main/antlr3; java  -cp
> >>>>> /path/to/antlr-4.0ea-complete.jar:/path/to/ST-4.0.4.jar
> org.antlr.Tool
> >>>>> test/*.g -o ../../../target
> >>>>> error(144): JavaDecl.g:3:2: redefinition of header action
> >>>>>
> >>>>>
> >>>>> On Tue, Nov 22, 2011 at 9:07 PM, Dave Thomas <
> >> opensource at peoplemerge.com
> >>>>> wrote:
> >>>>>
> >>>>>> Hi all,
> >>>>>>
> >>>>>> I'm using ANTLR for my masters thesis, which includes letting user
> >>>> extend
> >>>>>> the lex and parser grammars I supply with their own jargon in the
> form
> >>>> of a
> >>>>>> combined grammar.  I wouldn't have dreamed it possible before ANTLR,
> >> and
> >>>>>> I'm a big fan!
> >>>>>>
> >>>>>> The problem I'm having is:
> >>>>>> error(144): JavaDecl.g:3:2: redefinition of header action
> >>>>>>
> >>>>>> The reason this is making me scratch my head is that I see this
> issue
> >>>> has
> >>>>>> been reported, and AFAICT addressed:
> >>>>>> http://www.antlr.org/jira/browse/ANTLR-301
> >>>>>> http://www.antlr.org/jira/browse/ANTLR-370
> >>>>>> http://www.antlr.org/jira/browse/ANTLR-375
> >>>>>>
> >> http://www.antlr.org/pipermail/antlr-interest/2011-January/040487.html
> >>>>>> http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars (basis
> >> for
> >>>>>> the examples; sorry for the cross-post)
> >>>>>>
> >>>>>> Am I specifying the antlr release wrong in the maven plugin?
> >>>>>>
> >>>>>> Should I be concerned that my dependency hierarchy includes antlr
> >> 2.7.7?
> >>>>>> Per
> >> http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3.4+Release+Notesthe
> >>>>>> dependency on v2 should be removed, but I still see it when I do
> `mvn
> >>>> clean
> >>>>>> antlr3:antlr compile -X`:
> >>>>>>
> >>>>>> [DEBUG]    org.antlr:antlr:jar:3.4:compile
> >>>>>> [DEBUG]       org.antlr:antlr-runtime:jar:3.4:compile
> >>>>>> [DEBUG]          org.antlr:stringtemplate:jar:3.2.1:compile
> >>>>>> [DEBUG]          antlr:antlr:jar:2.7.7:compile
> >>>>>>
> >>>>>>
> >>>>>> src/main/antlr3/test/JLex.g
> >>>>>>
> >>>>>> lexer grammar JLex;
> >>>>>> @lexer::header { package test; }
> >>>>>>
> >>>>>> INT : 'int';
> >>>>>> SEMICOLON : ';';
> >>>>>> EQUALS : '=';
> >>>>>> ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
> >>>>>>
> >>>>>>
> >>>>>> src/main/antlr3/test/JavaDecl.g
> >>>>>>
> >>>>>> parser grammar JavaDecl;
> >>>>>> @header { package test; }
> >>>>>> type : INT ;
> >>>>>> decl : type ID SEMICOLON
> >>>>>>   | type ID init SEMICOLON
> >>>>>>   ;
> >>>>>> init : EQUALS INT ;
> >>>>>>
> >>>>>>
> >>>>>> src/main/antlr3/test/Java.g:
> >>>>>>
> >>>>>> grammar Java;
> >>>>>> import JavaDecl, JLex;
> >>>>>> @header { package test; }
> >>>>>> prog : decl ;
> >>>>>> type : 'int' | 'float' ;
> >>>>>>
> >>>>>> pom.xml:
> >>>>>>
> >>>>>> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="
> >>>>>> http://www.w3.org/2001/XMLSchema-instance"
> >>>>>> xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
> >>>>>> http://maven.apache.org/xsd/maven-4.0.0.xsd">
> >>>>>> <modelVersion>4.0.0</modelVersion>
> >>>>>> <groupId>test</groupId>
> >>>>>> <artifactId>test</artifactId>
> >>>>>> <packaging>jar</packaging>
> >>>>>> <version>1.0-SNAPSHOT</version>
> >>>>>> <name>test</name>
> >>>>>> <build>
> >>>>>> <plugins>
> >>>>>> <plugin>
> >>>>>> <groupId>org.antlr</groupId>
> >>>>>> <artifactId>antlr3-maven-plugin</artifactId>
> >>>>>> <version>3.4</version>
> >>>>>> <executions>
> >>>>>> <execution>
> >>>>>> <configuration>
> >>>>>> <goals>
> >>>>>> <goal>antlr</goal>
> >>>>>> </goals>
> >>>>>> </configuration>
> >>>>>> </execution>
> >>>>>> </executions>
> >>>>>> </plugin>
> >>>>>> </plugins>
> >>>>>> </build>
> >>>>>> </project>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>> <antlr-header.tar>
> >>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>>>> Unsubscribe:
> >>>>
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>>>
> >>>>
> >>> <antlr-header.tar>
> >>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >>
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From anliu.sh.cn at gmail.com  Wed Jan  4 01:38:39 2012
From: anliu.sh.cn at gmail.com (An Liu)
Date: Wed, 4 Jan 2012 17:38:39 +0800
Subject: [antlr-interest] issues with setting flags in rule action and used
	in predicates
Message-ID: <CALqJAePKi0O=bMLoesy1ppn66GdWVaPnnOV-x7ZE+hQFN75HrA@mail.gmail.com>

The following is an example from my grammar:

r1 returns [bool flag1]
@init {}
    :
    subRule1 { $flag1 = true; }
    ;

r2
@init {}
    :
    r1
    { $r1.flag1 }?
    subRule2

The issue is { $flag1 = true; } is only executed when backtracking is 0. If
r2 and r1 are called in a predicate (where backtracking > 0), the action
{$flag1 = true;} won't be executed. Therefore the predicate { $r1.flag1 }?
in r2 will get a wrong value. Is there already a pattern to deal with this
situation?

Thanks in advance.
Liu An

From oliver.zeigermann at gmail.com  Wed Jan  4 01:54:05 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Wed, 4 Jan 2012 10:54:05 +0100
Subject: [antlr-interest] Reduction in code base after yanking AST stuff
In-Reply-To: <E0BEE2F7-09CF-4108-BE5E-BF48BD0E7DEE@cs.usfca.edu>
References: <B6D75808-49BF-46E5-9B2A-E44DF8CFD03E@cs.usfca.edu>
	<CABJr57B_qMR4VcMamL8dq3WK0OmL01e-2vQTTu_rx_Tg2hSTog@mail.gmail.com>
	<CAN45N13e=HWp9rtF3XJhgnKZN_oB+ePR+__O=PaMOZ4do1jLxg@mail.gmail.com>
	<E0BEE2F7-09CF-4108-BE5E-BF48BD0E7DEE@cs.usfca.edu>
Message-ID: <CABJr57BF7XQ4S5uRoyXSGrdiXS1B16HHOqoyCZBtp4cmsWMNcw@mail.gmail.com>

2012/1/4 Terence Parr <parrt at cs.usfca.edu>:
>
> On Jan 3, 2012, at 5:25 AM, Eric wrote:
...
>> I hope that once users see how to make effective use of the new ways of
>> doing tree manipulations, more ideas will come out on how to effectively
>> apply the new mechanisms.
>
> Yep, I'm interested to know what people think about rewriting parse trees. certainly that's what most of the European tools do.

I would probably postpone this decision until it is clear how people
use parse trees. If it becomes obvious that people want to rewrite
parse tress, you can still add them.

Just me 5 cents.

- Oliver

From gonzague.reydet at gmail.com  Wed Jan  4 03:24:39 2012
From: gonzague.reydet at gmail.com (Gonzague Reydet)
Date: Wed, 4 Jan 2012 12:24:39 +0100
Subject: [antlr-interest] [C] Skip sub-tree nodes from AST?
In-Reply-To: <CAHHXKCYy1yXLhZpvR3ZL5CCj64j+ZvBhq+AkZ2eJdCngsbHEsw@mail.gmail.com>
References: <CAHHXKCZ9e-eMrDN1JbNLXi34E8Tp97NcN9HD2p7wGoL+XsQ2KA@mail.gmail.com>
	<a674549ba8e39bf077231d8805f408e6@mail.gmail.com>
	<CAHHXKCYy1yXLhZpvR3ZL5CCj64j+ZvBhq+AkZ2eJdCngsbHEsw@mail.gmail.com>
Message-ID: <CAHHXKCYcRKVBnmd3sNWJBJc39Pd34=05ai4VsR13Bja24Cd=aQ@mail.gmail.com>

I worked around the wildcard issue by making my own function that walk the
subtree counting the UP & DOWN tokens and ignoring all other tokens.
I don't think it is a good practice to make it this way, but a least it
does the job...

I use the following tree grammar rule:

// ^(IF expression statement (ELSE statement)?)
if_
    @declarations { ANTLR3_MARKER thenIdx, elseIdx = 0; }
  : ^(IF expression
      {
        thenIdx = INDEX();
        ignoreSubTree(ctx);
        if (LA(1) == ELSE) {
            MATCHT(ELSE, NULL);
            elseIdx = INDEX();
            ignoreSubTree(ctx);
        }
      })
    { // My code that rewind to either then or else block }
  ;

and the ignoreSubTree() function is implemented as following:

static void ignoreSubTree(psshell_tree ctx)
    {
        ebd_sint32_t nestedS32 = 0;

        do {
            MATCHANYT();
            if  (HASEXCEPTION()) {
                return;
            }

            switch(LA(1)) {
                case DOWN:
                    nestedS32++;
                    break;
                case UP:
                    nestedS32--;
                    break;
                default:
                    break;
            }
        } while (nestedS32 > 0);
        MATCHANYT(); // Eat last UP token
    }



2012/1/3 Gonzague Reydet <gonzague.reydet at gmail.com>

> Hi Jim,
>
> I suppose by "RELEASE" macro you mean "REWIND"?
>
> Yes I tried to use these macros as following :
>  ^(IF expression { thenIdx = MARK(); } ^(THEN .*) { elseIdx = MARK(); }
> ^(ELSE .*) ENDIF)
>
> But the same problem occurs as described in my previous message, the
> generated tree parser does not handle properly the UP and DOWN tokens for
> the " .* " pattern.
> I don't see how to use the MARK macro without the " .* " pattern.
>
>
> 2012/1/3 Jim Idle <jimi at temporal-wave.com>
>
>> Did you look at the MARK and RELEASE macros?
>>
>> Jim
>>
>> > -----Original Message-----
>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > bounces at antlr.org] On Behalf Of Gonzague Reydet
>> > Sent: Tuesday, January 03, 2012 9:32 AM
>> > To: antlr-interest at antlr.org
>> > Subject: [antlr-interest] [C] Skip sub-tree nodes from AST?
>> >
>> > Hi all!
>> >
>> > It's been two days I am investigating on how to skip a subtree with the
>> > C target of ANTLR v3.4. I found many discussions on this subject on
>> > markmail (notably the following one:
>> > http://markmail.org/message/f5op6tdn4vfpw57v).
>> > Exactly like this discussion, my original purpose is to implement an
>> > if/then/else interpreter.
>> > But I can't find a valid solution to parse only either the "then" or
>> > the "else" statement skipping the other one and going to the end of the
>> > if statement after having handled it.
>> >
>> > The "if" rule of my parser grammar constructs the AST as following:*
>> > ^(IF expression ^(THEN statement) ^(ELSE statement?) ENDIF);  *
>> >
>> > I have tried two different ways:
>> > - First using the method proposed in the discussion :
>> > ^(IF expression {
>> >     pANTLR3_BASE_TREE n = $IF.getChild($IF, 3);
>> >     SEEK(n->savedIndex);
>> >     ...
>> > } )
>> > The problem here is the 'savedIndex' field is never set. Is their a way
>> > for this field to be set before parsing the tree?
>> >
>> > - Second using a "wildcard pattern" as following : ^(IF expression
>> > ^(THEN
>> > .*) ^(ELSE .*) ENDIF)
>> > The problem here is the generated tree parser does not handle DOWN
>> > tokens, so it results in parsing errors when trying to match the
>> > "wildcarded"
>> > subtree.
>> >
>> >
>> > I have found the Pie example
>> > (http://www.antlr.org/wiki/display/ANTLR3/Pie)
>> > that passes a "defer" parameter to disable execution in all subrules.
>> > Is this really the only solution for this issue with the C target?
>> > I would really prefer to use the approach proposed by Terrence for the
>> > Java target (http://markmail.org/message/7thj4um2bzhuvqpy) but this
>> > will lead to the same issue of my second solution.
>> >
>> > Is there any other solution for this?
>> >
>> > Regards,
>> > Gonzague
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> > email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
> --
> T?l : +33 (0)6 21 02 90 48
>



-- 
T?l : +33 (0)6 21 02 90 48

From serefarikan at kurumsalteknoloji.com  Wed Jan  4 09:34:31 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Wed, 4 Jan 2012 17:34:31 +0000
Subject: [antlr-interest] How to remove mutual left recursion from this
	grammar?
Message-ID: <CA+4ThdqUzFddvnvEjUo6y8QiwJQr-JNNJQnrh7S_jnNvzGQNMg@mail.gmail.com>

Greetings,
This simple grammar represents a setup  I could not fix. Obviously the
target is to create nested boolean statements, but I could not fix the
recursion. This pattern repeats in a larger grammar, so solving this will
help me fix more problems. Any clues that you can think of?

//--------------------------------------------------------------------------------
grammar testg;

rul    :  contains_expr    ;

contains_expr: 'CONTAINS' contains_expression
                  //'CONTAINS' contains_or
        ;

contains_expression : class_expression
                        | contains_expression_boolean
                        |'(' contains_expression_boolean ')'
        ;

contains_expression_boolean : contains_expression 'OR' contains_expression
                              | contains_expression 'AND'
contains_expression
                              | contains_expression 'XOR'
contains_expression
        ;




class_expression
    : ID
    ;



ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;



Best regards
Seref

From jimi at temporal-wave.com  Wed Jan  4 10:24:36 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 4 Jan 2012 10:24:36 -0800
Subject: [antlr-interest] How to remove mutual left recursion from this
	grammar?
In-Reply-To: <CA+4ThdqUzFddvnvEjUo6y8QiwJQr-JNNJQnrh7S_jnNvzGQNMg@mail.gmail.com>
References: <CA+4ThdqUzFddvnvEjUo6y8QiwJQr-JNNJQnrh7S_jnNvzGQNMg@mail.gmail.com>
Message-ID: <20cf46f236d7ff9509158f91c6bb3a6b@mail.gmail.com>

rul    :  contains_expr    ;

contains_expr: 'CONTAINS' contains_expression
                  //'CONTAINS' contains_or
        ;

contains_expression : primary (('OR'|'AND'|'XOR') primary)*
        ;

primary
  : '(' contains_expression ')'
  | class_expression
  ;


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Seref Arikan
> Sent: Wednesday, January 04, 2012 9:35 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] How to remove mutual left recursion from this
> grammar?
>
> Greetings,
> This simple grammar represents a setup  I could not fix. Obviously the
> target is to create nested boolean statements, but I could not fix the
> recursion. This pattern repeats in a larger grammar, so solving this
> will help me fix more problems. Any clues that you can think of?
>
> //---------------------------------------------------------------------
> -----------
> grammar testg;
>
> rul    :  contains_expr    ;
>
> contains_expr: 'CONTAINS' contains_expression
>                   //'CONTAINS' contains_or
>         ;
>
> contains_expression : class_expression
>                         | contains_expression_boolean
>                         |'(' contains_expression_boolean ')'
>         ;
>
> contains_expression_boolean : contains_expression 'OR'
> contains_expression
>                               | contains_expression 'AND'
> contains_expression
>                               | contains_expression 'XOR'
> contains_expression
>         ;
>
>
>
>
> class_expression
>     : ID
>     ;
>
>
>
> ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
>     ;
>
>
>
> Best regards
> Seref
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From kferrio at gmail.com  Wed Jan  4 13:05:46 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 4 Jan 2012 14:05:46 -0700
Subject: [antlr-interest] How to remove mutual left recursion from this
	grammar?
In-Reply-To: <CA+4ThdqUzFddvnvEjUo6y8QiwJQr-JNNJQnrh7S_jnNvzGQNMg@mail.gmail.com>
References: <CA+4ThdqUzFddvnvEjUo6y8QiwJQr-JNNJQnrh7S_jnNvzGQNMg@mail.gmail.com>
Message-ID: <CAAfeETpomX503ce3dWNk7wjKEVAL+c8DHJ97zHe=taxhsk6tuQ@mail.gmail.com>

Hi Seref.

I see Jim Idle has already provided a perfect answer to your question.  I'd
just like to make a shameless plug for Honey Badger (and save Ter from a
bit of embarrassing self-promotion) by pointing out that in antlr4 you will
be able to do this:

grammar Boolean;

rul
  : contains_expr
  ;

contains_expr
  : 'CONTAINS' contains_expression
  ;

contains_expression : class_expression
                    | contains_expression_boolean
                    |'(' contains_expression_boolean ')'
                    ;

contains_expression_boolean
  : contains_expression_boolean 'AND' contains_expression_boolean
  | contains_expression_boolean 'OR'  contains_expression_boolean
  | contains_expression_boolean 'XOR' contains_expression_boolean
  | class_expression
  ;

class_expression
   : ID
   ;

ID
  : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
  ;

and with that, turn this

CONTAINS a OR b AND c

into this [1]

(rul (contains_expr CONTAINS (contains_expression
(contains_expression_boolean (contains_expression_boolean_
(contains_expression_boolean_primary (class_expression a)) OR
(contains_expression_boolean_ (contains_expression_boolean_primary
(class_expression b)) AND (contains_expression_boolean_
(contains_expression_boolean_primary (class_expression c)))))))))

N.B. Looking closely, you will spy two very large clues as to how Honey
Badger deals with (direct) left-recursion.

Note the nesting (or just look at how AND binds more tightly than OR in the
attached PDF [2]) -- you get direct left-recursion and precedence control
for free!

What is really neat (to me at least) is how in some common situations (and
your grammar fits the pattern) being able to handle direct left-recursion
actually eliminates the mutual left recursion.  To be sure, it is not hard
to generate mutual left-recursion problems.  But it's nice when something
good goes our way.

"Honey Badger is bad ass."

Cheers!
Kyle

[1] generated with

$ java org.antlr.v4.runtime.misc.TestRig Boolean rul -print
BooleanTest01.txt

[2] generated with

$ java org.antlr.v4.runtime.misc.TestRig Boolean rul -gui -ps
out.psBooleanTest01.txt
$ ps2pdf out.ps out.ps





On Wed, Jan 4, 2012 at 10:34 AM, Seref Arikan <
serefarikan at kurumsalteknoloji.com> wrote:

> Greetings,
> This simple grammar represents a setup  I could not fix. Obviously the
> target is to create nested boolean statements, but I could not fix the
> recursion. This pattern repeats in a larger grammar, so solving this will
> help me fix more problems. Any clues that you can think of?
>
>
> //--------------------------------------------------------------------------------
> grammar testg;
>
> rul    :  contains_expr    ;
>
> contains_expr: 'CONTAINS' contains_expression
>                  //'CONTAINS' contains_or
>        ;
>
> contains_expression : class_expression
>                        | contains_expression_boolean
>                        |'(' contains_expression_boolean ')'
>        ;
>
> contains_expression_boolean : contains_expression 'OR' contains_expression
>                              | contains_expression 'AND'
> contains_expression
>                              | contains_expression 'XOR'
> contains_expression
>        ;
>
>
>
>
> class_expression
>    : ID
>    ;
>
>
>
> ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
>    ;
>
>
>
> Best regards
> Seref
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: out.pdf
Type: application/pdf
Size: 3016 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20120104/0654c43d/attachment.pdf 

From serefarikan at kurumsalteknoloji.com  Wed Jan  4 14:25:33 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Wed, 4 Jan 2012 22:25:33 +0000
Subject: [antlr-interest] How to remove mutual left recursion from this
	grammar?
In-Reply-To: <20cf46f236d7ff9509158f91c6bb3a6b@mail.gmail.com>
References: <CA+4ThdqUzFddvnvEjUo6y8QiwJQr-JNNJQnrh7S_jnNvzGQNMg@mail.gmail.com>
	<20cf46f236d7ff9509158f91c6bb3a6b@mail.gmail.com>
Message-ID: <CA+4Thdog2AjV_hVa5OEk6sJTxyp3tVzEW49266ZdNJkc=Vpo8w@mail.gmail.com>

Jim, thanks a lot. Learning Antlr is quite easy, but learning LL way of
thinking is proving to be real challenge!


On Wed, Jan 4, 2012 at 6:24 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> rul    :  contains_expr    ;
>
> contains_expr: 'CONTAINS' contains_expression
>                  //'CONTAINS' contains_or
>        ;
>
> contains_expression : primary (('OR'|'AND'|'XOR') primary)*
>        ;
>
> primary
>  : '(' contains_expression ')'
>  | class_expression
>  ;
>
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Seref Arikan
> > Sent: Wednesday, January 04, 2012 9:35 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] How to remove mutual left recursion from this
> > grammar?
> >
> > Greetings,
> > This simple grammar represents a setup  I could not fix. Obviously the
> > target is to create nested boolean statements, but I could not fix the
> > recursion. This pattern repeats in a larger grammar, so solving this
> > will help me fix more problems. Any clues that you can think of?
> >
> > //---------------------------------------------------------------------
> > -----------
> > grammar testg;
> >
> > rul    :  contains_expr    ;
> >
> > contains_expr: 'CONTAINS' contains_expression
> >                   //'CONTAINS' contains_or
> >         ;
> >
> > contains_expression : class_expression
> >                         | contains_expression_boolean
> >                         |'(' contains_expression_boolean ')'
> >         ;
> >
> > contains_expression_boolean : contains_expression 'OR'
> > contains_expression
> >                               | contains_expression 'AND'
> > contains_expression
> >                               | contains_expression 'XOR'
> > contains_expression
> >         ;
> >
> >
> >
> >
> > class_expression
> >     : ID
> >     ;
> >
> >
> >
> > ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
> >     ;
> >
> >
> >
> > Best regards
> > Seref
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Wed Jan  4 14:25:53 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 4 Jan 2012 14:25:53 -0800
Subject: [antlr-interest] some v4 examples
In-Reply-To: <CAAfeEToEE-yorinEjX12Zk9WMJsg-=tHazrU7Huy7HR+LDCM9w@mail.gmail.com>
References: <A4FBF1C5-D040-4386-A7D4-AA7BF2BF66A1@cs.usfca.edu>
	<CAAfeEToEE-yorinEjX12Zk9WMJsg-=tHazrU7Huy7HR+LDCM9w@mail.gmail.com>
Message-ID: <ED88301F-24C3-4655-94F6-B470019A91AE@cs.usfca.edu>


On Jan 3, 2012, at 8:52 PM, Kyle Ferrio wrote:

> 
> I just did a side-by-side comparison of Cymbol.g4 to Cymbol.g.  (True, the latter currently has features missing from the former, and the former does not demonstrate associativity yet.)  Wow.  What an improvement in readability.  Honey Badger ain't afraid of no left recursion!

It's sooo nice for expressions and things like C declarations. I'm in the middle of trying to get the parts listener events to look right for left recursive stuff even though I don't implemented that way.
Ter

From serefarikan at kurumsalteknoloji.com  Wed Jan  4 14:28:30 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Wed, 4 Jan 2012 22:28:30 +0000
Subject: [antlr-interest] How to remove mutual left recursion from this
	grammar?
In-Reply-To: <CAAfeETpomX503ce3dWNk7wjKEVAL+c8DHJ97zHe=taxhsk6tuQ@mail.gmail.com>
References: <CA+4ThdqUzFddvnvEjUo6y8QiwJQr-JNNJQnrh7S_jnNvzGQNMg@mail.gmail.com>
	<CAAfeETpomX503ce3dWNk7wjKEVAL+c8DHJ97zHe=taxhsk6tuQ@mail.gmail.com>
Message-ID: <CA+4ThdrfY4uMXvx2xgYyiNVA73LPA5SOW5tL4NrjHo2MEytRLg@mail.gmail.com>

Kyle,
Sounds very interesting. I'm still trying to get my head around handling LL
approach. I found out that the grammar I have at hand has been created with
a LR parser framework. I'll probably have to move forward with antlr3, and
I'm sure Honey Badger will become a good option exactly when I finish my
work with antlr3...

Will keep an eye on this.

Cheers
Seref


On Wed, Jan 4, 2012 at 9:05 PM, Kyle Ferrio <kferrio at gmail.com> wrote:

>
> Hi Seref.
>
> I see Jim Idle has already provided a perfect answer to your question.
>  I'd just like to make a shameless plug for Honey Badger (and save Ter from
> a bit of embarrassing self-promotion) by pointing out that in antlr4 you
> will be able to do this:
>
> grammar Boolean;
>
> rul
>   : contains_expr
>   ;
>
> contains_expr
>   : 'CONTAINS' contains_expression
>   ;
>
> contains_expression : class_expression
>                     | contains_expression_boolean
>                     |'(' contains_expression_boolean ')'
>                     ;
>
> contains_expression_boolean
>   : contains_expression_boolean 'AND' contains_expression_boolean
>   | contains_expression_boolean 'OR'  contains_expression_boolean
>   | contains_expression_boolean 'XOR' contains_expression_boolean
>   | class_expression
>   ;
>
> class_expression
>    : ID
>    ;
>
> ID
>   : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
>   ;
>
> and with that, turn this
>
> CONTAINS a OR b AND c
>
> into this [1]
>
> (rul (contains_expr CONTAINS (contains_expression
> (contains_expression_boolean (contains_expression_boolean_
> (contains_expression_boolean_primary (class_expression a)) OR
> (contains_expression_boolean_ (contains_expression_boolean_primary
> (class_expression b)) AND (contains_expression_boolean_
> (contains_expression_boolean_primary (class_expression c)))))))))
>
> N.B. Looking closely, you will spy two very large clues as to how Honey
> Badger deals with (direct) left-recursion.
>
> Note the nesting (or just look at how AND binds more tightly than OR in
> the attached PDF [2]) -- you get direct left-recursion and precedence
> control for free!
>
> What is really neat (to me at least) is how in some common situations (and
> your grammar fits the pattern) being able to handle direct left-recursion
> actually eliminates the mutual left recursion.  To be sure, it is not hard
> to generate mutual left-recursion problems.  But it's nice when something
> good goes our way.
>
> "Honey Badger is bad ass."
>
> Cheers!
> Kyle
>
> [1] generated with
>
> $ java org.antlr.v4.runtime.misc.TestRig Boolean rul -print
> BooleanTest01.txt
>
> [2] generated with
>
> $ java org.antlr.v4.runtime.misc.TestRig Boolean rul -gui -ps out.psBooleanTest01.txt
> $ ps2pdf out.ps out.ps
>
>
>
>
>
> On Wed, Jan 4, 2012 at 10:34 AM, Seref Arikan <
> serefarikan at kurumsalteknoloji.com> wrote:
>
>> Greetings,
>> This simple grammar represents a setup  I could not fix. Obviously the
>> target is to create nested boolean statements, but I could not fix the
>> recursion. This pattern repeats in a larger grammar, so solving this will
>> help me fix more problems. Any clues that you can think of?
>>
>>
>> //--------------------------------------------------------------------------------
>> grammar testg;
>>
>> rul    :  contains_expr    ;
>>
>> contains_expr: 'CONTAINS' contains_expression
>>                  //'CONTAINS' contains_or
>>        ;
>>
>> contains_expression : class_expression
>>                        | contains_expression_boolean
>>                        |'(' contains_expression_boolean ')'
>>        ;
>>
>> contains_expression_boolean : contains_expression 'OR' contains_expression
>>                              | contains_expression 'AND'
>> contains_expression
>>                              | contains_expression 'XOR'
>> contains_expression
>>        ;
>>
>>
>>
>>
>> class_expression
>>    : ID
>>    ;
>>
>>
>>
>> ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
>>    ;
>>
>>
>>
>> Best regards
>> Seref
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From kinhong.wong at gmail.com  Thu Jan  5 09:55:44 2012
From: kinhong.wong at gmail.com (Kin-Hong Wong)
Date: Thu, 5 Jan 2012 09:55:44 -0800
Subject: [antlr-interest] ANTLR version compatibility
Message-ID: <CABU6TG-tNDAfjg1Tk5+aUeuct2d8=4q6=+0+QEjtiUs=OKNQnQ@mail.gmail.com>

Hi all,

Our current Java product uses ANTLR v3.0 with generated lexer and parser.
Recently we have a requirement to integrate with a third-party library
which depends on ANTLR v3.1.3 runtime. We found that the our v3.0-generated
lexers and parsers were not compatible with ANTLR 3.1.3 runtime. We are
prepared to upgrade to newer version of ANTLR. Should we upgrade to v3.1.3
or v3.4 (the latest)? if we upgrade to v3.4, will the third-party library
be compatible to v3.4 runtime?

In general, are lexers/parsers generated by a previous version of ANTLR
compatible with newer version of ANTLR runtime? Is there information that
state such backward compatibility (I couldn't find any in ANTLR release
notes).

Thanks,
Kin-Hong

From yotommy at gmail.com  Thu Jan  5 10:13:25 2012
From: yotommy at gmail.com (Tom Smith)
Date: Thu, 5 Jan 2012 13:13:25 -0500
Subject: [antlr-interest] compilation error with tree filters under 3.4
Message-ID: <CACkP891cqAU7EinqZLEjxuuXsgyMY_fUeuSt4r46cOAn6qZ_Ug@mail.gmail.com>

I am trying to upgrade from 3.1.3 to 3.4, but I am now encountering a
compile error on the generated code.  The toy tree filter shown below
reproduces the problem.  The compilation error is:

[ERROR] Failed to execute goal
org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile
(default-compile) on project treeNotFound: Compilation failure
[ERROR] /Users/tsmith/devel/antlr/treeNotFound/target/generated-sources/antlr3/example/TFilter.java:[249,52]
cannot find symbol
[ERROR] symbol  : variable tree
[ERROR] location: class org.antlr.runtime.RuleReturnScope

The generated source line in question is:

  if ( _first_1==null ) _first_1 = vl.tree;

vl is declared as RuleReturnScope, which does not have a public field
named 'tree'.

Suggestions?

Thanks,
Tom Smith.
===
tree grammar TFilter;

options {
	tokenVocab=TParser;
	output=AST;
	ASTLabelType=CommonTree;
	filter = true;
}

@header {
package example;

import java.util.List;
}

topdown
  :  topRule
  ;

topRule
  :  assignListLhs { System.out.println($assignListLhs.variableList); }
  ;

assignListLhs returns[List<Tree> variableList]
  :  ^(LIST vl+=varName+) { $variableList = $vl; }
  ;
		
varName
  :  Identifier
  ;

From parrt at cs.usfca.edu  Thu Jan  5 12:28:42 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 5 Jan 2012 12:28:42 -0800
Subject: [antlr-interest] updated honey badger
Message-ID: <B7E66E8F-6709-418C-BF82-5152C194CA52@cs.usfca.edu>

http://antlr.org/depot/antlr4/main/CHANGES.txt


From yotommy at gmail.com  Thu Jan  5 13:41:30 2012
From: yotommy at gmail.com (Tom Smith)
Date: Thu, 5 Jan 2012 16:41:30 -0500
Subject: [antlr-interest] compilation error with tree filters under 3.4
In-Reply-To: <CACkP891cqAU7EinqZLEjxuuXsgyMY_fUeuSt4r46cOAn6qZ_Ug@mail.gmail.com>
References: <CACkP891cqAU7EinqZLEjxuuXsgyMY_fUeuSt4r46cOAn6qZ_Ug@mail.gmail.com>
Message-ID: <CACkP891AmTA9kAi+33Jx7Yt5qaFULWAd0j_PQuwM4omdL4vfFQ@mail.gmail.com>

Following up with different versions of antlr: the error does not
occur with 3.1.3, but does with 3.2+.

Thanks,
Tom.

On Thu, Jan 5, 2012 at 1:13 PM, Tom Smith <yotommy at gmail.com> wrote:
> I am trying to upgrade from 3.1.3 to 3.4, but I am now encountering a
> compile error on the generated code. ?The toy tree filter shown below
> reproduces the problem. ?The compilation error is:
>
> [ERROR] Failed to execute goal
> org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile
> (default-compile) on project treeNotFound: Compilation failure
> [ERROR] /Users/tsmith/devel/antlr/treeNotFound/target/generated-sources/antlr3/example/TFilter.java:[249,52]
> cannot find symbol
> [ERROR] symbol ?: variable tree
> [ERROR] location: class org.antlr.runtime.RuleReturnScope
>
> The generated source line in question is:
>
> ?if ( _first_1==null ) _first_1 = vl.tree;
>
> vl is declared as RuleReturnScope, which does not have a public field
> named 'tree'.
>
> Suggestions?
>
> Thanks,
> Tom Smith.
> ===
> tree grammar TFilter;
>
> options {
> ? ? ? ?tokenVocab=TParser;
> ? ? ? ?output=AST;
> ? ? ? ?ASTLabelType=CommonTree;
> ? ? ? ?filter = true;
> }
>
> @header {
> package example;
>
> import java.util.List;
> }
>
> topdown
> ?: ?topRule
> ?;
>
> topRule
> ?: ?assignListLhs { System.out.println($assignListLhs.variableList); }
> ?;
>
> assignListLhs returns[List<Tree> variableList]
> ?: ?^(LIST vl+=varName+) { $variableList = $vl; }
> ?;
>
> varName
> ?: ?Identifier
> ?;

From parrt at cs.usfca.edu  Thu Jan  5 18:47:08 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 5 Jan 2012 18:47:08 -0800
Subject: [antlr-interest] Improvements to left recursive grammars
Message-ID: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>

Howdy. Ok,These left recursive grammar rules are craaaazy. Now they behave just as you would expect regular rules. For example, you could have return values and actions (on the right edge). The cool thing is you can label the left recursive rule references (a=e) even though those disappear in the implementation. :)

    s : e {System.out.println($e.v);} ;
    e returns [int v]
      : a=e '*' b=e {$v = $a.v * $b.v;}
      | a=e '+' b=e {$v = $a.v + $b.v;}
      | INT         {$v = $INT.int;}
      | '(' x=e ')' {$v = $x.v;}
      ;

For example, I passed an input 1+2*3 and got the following parse tree

(s (e (e 1) + (e (e 2) * (e 3))))

just like you would get if this were a bottom-up tool. Moreover, it fires exit rule events as you would expect. you will see something like this, if you pass in a listener that prints out the ctx. see the example page.

exit 1: (e 1)
exit 1: (e 2)
exit 1: (e 3)
exit 1: (e (e 2) * (e 3))
exit 1: (e (e 1) + (e (e 2) * (e 3)))
7
exit 0: (s (e (e 1) + (e (e 2) * (e 3))))

just pushed to the website dist directory. also updated this page:

http://www.antlr.org/wiki/display/ANTLR4/Examples

see

http://antlr.org/depot/antlr4/main/CHANGES.txt

Ter


From kferrio at gmail.com  Thu Jan  5 21:55:54 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 5 Jan 2012 22:55:54 -0700
Subject: [antlr-interest] Improvements to left recursive grammars
In-Reply-To: <CAAfeETo8s4HGA78fcpf_U-6UgGOYgse89YTsH56wzLg5uhESGQ@mail.gmail.com>
References: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
	<CAAfeETo8s4HGA78fcpf_U-6UgGOYgse89YTsH56wzLg5uhESGQ@mail.gmail.com>
Message-ID: <CAAfeETpX_4tu7K9cg3HTOBS+sX9m3YqF06Z_0xbX5n5TJaWB0A@mail.gmail.com>

OMG.  Honey Badger isn't afraid of anything.  He just keeps going!

This does work just like I hope/expect.  I might have to remind myself that
it really is LL* under the hood.  Cool!

Kyle

On Jan 5, 2012 7:47 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
>
> Howdy. Ok,These left recursive grammar rules are craaaazy. Now they
behave just as you would expect regular rules. For example, you could have
return values and actions (on the right edge). The cool thing is you can
label the left recursive rule references (a=e) even though those disappear
in the implementation. :)
>
>    s : e {System.out.println($e.v);} ;
>    e returns [int v]
>      : a=e '*' b=e {$v = $a.v * $b.v;}
>      | a=e '+' b=e {$v = $a.v + $b.v;}
>      | INT         {$v = $INT.int;}
>      | '(' x=e ')' {$v = $x.v;}
>      ;
>
> For example, I passed an input 1+2*3 and got the following parse tree
>
> (s (e (e 1) + (e (e 2) * (e 3))))
>
> just like you would get if this were a bottom-up tool. Moreover, it fires
exit rule events as you would expect. you will see something like this, if
you pass in a listener that prints out the ctx. see the example page.
>
> exit 1: (e 1)
> exit 1: (e 2)
> exit 1: (e 3)
> exit 1: (e (e 2) * (e 3))
> exit 1: (e (e 1) + (e (e 2) * (e 3)))
> 7
> exit 0: (s (e (e 1) + (e (e 2) * (e 3))))
>
> just pushed to the website dist directory. also updated this page:
>
> http://www.antlr.org/wiki/display/ANTLR4/Examples
>
> see
>
> http://antlr.org/depot/antlr4/main/CHANGES.txt
>
> Ter
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From david.daeschler at gmail.com  Thu Jan  5 21:59:16 2012
From: david.daeschler at gmail.com (David Daeschler)
Date: Fri, 6 Jan 2012 00:59:16 -0500
Subject: [antlr-interest] Improvements to left recursive grammars
In-Reply-To: <CAAfeETpX_4tu7K9cg3HTOBS+sX9m3YqF06Z_0xbX5n5TJaWB0A@mail.gmail.com>
References: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
	<CAAfeETo8s4HGA78fcpf_U-6UgGOYgse89YTsH56wzLg5uhESGQ@mail.gmail.com>
	<CAAfeETpX_4tu7K9cg3HTOBS+sX9m3YqF06Z_0xbX5n5TJaWB0A@mail.gmail.com>
Message-ID: <CA+SkF=J4_Nq_nGyA+un7epnSZo6cRzB2Y374KrD4TYpDNdEV4Q@mail.gmail.com>

This really has been an incredible development to follow. Even though I
don't have the time I am so tempted to port over my current grammar!

Very nice work Mr. Parr  :)

- David



On Fri, Jan 6, 2012 at 12:55 AM, Kyle Ferrio <kferrio at gmail.com> wrote:

> OMG.  Honey Badger isn't afraid of anything.  He just keeps going!
>
> This does work just like I hope/expect.  I might have to remind myself that
> it really is LL* under the hood.  Cool!
>
> Kyle
>
> On Jan 5, 2012 7:47 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
> >
> > Howdy. Ok,These left recursive grammar rules are craaaazy. Now they
> behave just as you would expect regular rules. For example, you could have
> return values and actions (on the right edge). The cool thing is you can
> label the left recursive rule references (a=e) even though those disappear
> in the implementation. :)
> >
> >    s : e {System.out.println($e.v);} ;
> >    e returns [int v]
> >      : a=e '*' b=e {$v = $a.v * $b.v;}
> >      | a=e '+' b=e {$v = $a.v + $b.v;}
> >      | INT         {$v = $INT.int;}
> >      | '(' x=e ')' {$v = $x.v;}
> >      ;
> >
> > For example, I passed an input 1+2*3 and got the following parse tree
> >
> > (s (e (e 1) + (e (e 2) * (e 3))))
> >
> > just like you would get if this were a bottom-up tool. Moreover, it fires
> exit rule events as you would expect. you will see something like this, if
> you pass in a listener that prints out the ctx. see the example page.
> >
> > exit 1: (e 1)
> > exit 1: (e 2)
> > exit 1: (e 3)
> > exit 1: (e (e 2) * (e 3))
> > exit 1: (e (e 1) + (e (e 2) * (e 3)))
> > 7
> > exit 0: (s (e (e 1) + (e (e 2) * (e 3))))
> >
> > just pushed to the website dist directory. also updated this page:
> >
> > http://www.antlr.org/wiki/display/ANTLR4/Examples
> >
> > see
> >
> > http://antlr.org/depot/antlr4/main/CHANGES.txt
> >
> > Ter
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
David Daeschler

From parrt at cs.usfca.edu  Fri Jan  6 10:16:57 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 6 Jan 2012 10:16:57 -0800
Subject: [antlr-interest] Improvements to left recursive grammars
In-Reply-To: <CAAfeETpX_4tu7K9cg3HTOBS+sX9m3YqF06Z_0xbX5n5TJaWB0A@mail.gmail.com>
References: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
	<CAAfeETo8s4HGA78fcpf_U-6UgGOYgse89YTsH56wzLg5uhESGQ@mail.gmail.com>
	<CAAfeETpX_4tu7K9cg3HTOBS+sX9m3YqF06Z_0xbX5n5TJaWB0A@mail.gmail.com>
Message-ID: <F02AE31A-13F1-486E-A7D3-1A04C0EF4AC4@cs.usfca.edu>


On Jan 5, 2012, at 9:55 PM, Kyle Ferrio wrote:

> OMG.  Honey Badger isn't afraid of anything.  He just keeps going!
> 
> This does work just like I hope/expect.  I might have to remind myself that
> it really is LL* under the hood.  Cool!

hoping to get alt labels for specific listeners today before jumping on scairplane.

Ter

From serefarikan at kurumsalteknoloji.com  Fri Jan  6 11:10:57 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Fri, 6 Jan 2012 19:10:57 +0000
Subject: [antlr-interest] Improvements to left recursive grammars
In-Reply-To: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
References: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
Message-ID: <CA+4ThdotZ1fSccZKDxdKw3BSYsg1wmSPY0i6JC_kQwHXTaCF3w@mail.gmail.com>

Ok, this is seriously impressive. The critical question for someone who is
working on implementing not one, but a few grammars at the moment is:
should I start using honey badger (great name btw) or stick to v3?
I'm in no position to judge the maturity of a piece of technology such as
Antlr, so input from the veterans would be appreciated.

Regards
Seref


On Fri, Jan 6, 2012 at 2:47 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Howdy. Ok,These left recursive grammar rules are craaaazy. Now they behave
> just as you would expect regular rules. For example, you could have return
> values and actions (on the right edge). The cool thing is you can label the
> left recursive rule references (a=e) even though those disappear in the
> implementation. :)
>
>    s : e {System.out.println($e.v);} ;
>    e returns [int v]
>      : a=e '*' b=e {$v = $a.v * $b.v;}
>      | a=e '+' b=e {$v = $a.v + $b.v;}
>      | INT         {$v = $INT.int;}
>      | '(' x=e ')' {$v = $x.v;}
>      ;
>
> For example, I passed an input 1+2*3 and got the following parse tree
>
> (s (e (e 1) + (e (e 2) * (e 3))))
>
> just like you would get if this were a bottom-up tool. Moreover, it fires
> exit rule events as you would expect. you will see something like this, if
> you pass in a listener that prints out the ctx. see the example page.
>
> exit 1: (e 1)
> exit 1: (e 2)
> exit 1: (e 3)
> exit 1: (e (e 2) * (e 3))
> exit 1: (e (e 1) + (e (e 2) * (e 3)))
> 7
> exit 0: (s (e (e 1) + (e (e 2) * (e 3))))
>
> just pushed to the website dist directory. also updated this page:
>
> http://www.antlr.org/wiki/display/ANTLR4/Examples
>
> see
>
> http://antlr.org/depot/antlr4/main/CHANGES.txt
>
> Ter
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Fri Jan  6 12:22:57 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 6 Jan 2012 12:22:57 -0800
Subject: [antlr-interest] Improvements to left recursive grammars
In-Reply-To: <CA+4ThdotZ1fSccZKDxdKw3BSYsg1wmSPY0i6JC_kQwHXTaCF3w@mail.gmail.com>
References: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
	<CA+4ThdotZ1fSccZKDxdKw3BSYsg1wmSPY0i6JC_kQwHXTaCF3w@mail.gmail.com>
Message-ID: <3BFD3582-AB01-492A-AD7E-030A75B4C43D@cs.usfca.edu>

Wait til you see the next trick with these suckers.  next week I hope.

v4 won't be stable for a couple of months.

Ter
On Jan 6, 2012, at 11:10 AM, Seref Arikan wrote:

> Ok, this is seriously impressive. The critical question for someone who is working on implementing not one, but a few grammars at the moment is: should I start using honey badger (great name btw) or stick to v3? 
> I'm in no position to judge the maturity of a piece of technology such as Antlr, so input from the veterans would be appreciated. 
> 
> Regards
> Seref
> 
> 
> On Fri, Jan 6, 2012 at 2:47 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Howdy. Ok,These left recursive grammar rules are craaaazy. Now they behave just as you would expect regular rules. For example, you could have return values and actions (on the right edge). The cool thing is you can label the left recursive rule references (a=e) even though those disappear in the implementation. :)
> 
>    s : e {System.out.println($e.v);} ;
>    e returns [int v]
>      : a=e '*' b=e {$v = $a.v * $b.v;}
>      | a=e '+' b=e {$v = $a.v + $b.v;}
>      | INT         {$v = $INT.int;}
>      | '(' x=e ')' {$v = $x.v;}
>      ;
> 
> For example, I passed an input 1+2*3 and got the following parse tree
> 
> (s (e (e 1) + (e (e 2) * (e 3))))
> 
> just like you would get if this were a bottom-up tool. Moreover, it fires exit rule events as you would expect. you will see something like this, if you pass in a listener that prints out the ctx. see the example page.
> 
> exit 1: (e 1)
> exit 1: (e 2)
> exit 1: (e 3)
> exit 1: (e (e 2) * (e 3))
> exit 1: (e (e 1) + (e (e 2) * (e 3)))
> 7
> exit 0: (s (e (e 1) + (e (e 2) * (e 3))))
> 
> just pushed to the website dist directory. also updated this page:
> 
> http://www.antlr.org/wiki/display/ANTLR4/Examples
> 
> see
> 
> http://antlr.org/depot/antlr4/main/CHANGES.txt
> 
> Ter
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From serefarikan at kurumsalteknoloji.com  Fri Jan  6 13:01:50 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Fri, 6 Jan 2012 21:01:50 +0000
Subject: [antlr-interest] Improvements to left recursive grammars
In-Reply-To: <3BFD3582-AB01-492A-AD7E-030A75B4C43D@cs.usfca.edu>
References: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
	<CA+4ThdotZ1fSccZKDxdKw3BSYsg1wmSPY0i6JC_kQwHXTaCF3w@mail.gmail.com>
	<3BFD3582-AB01-492A-AD7E-030A75B4C43D@cs.usfca.edu>
Message-ID: <CA+4ThdrOFO1OpbGMT5UWSuZdG4S8y8MerCuzgEn84Ninn_w1pA@mail.gmail.com>

Thanks,
A couple of months sounds quite good. I'll be looking forward to new tricks
;)

Regards
Seref


On Fri, Jan 6, 2012 at 8:22 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Wait til you see the next trick with these suckers.  next week I hope.
>
> v4 won't be stable for a couple of months.
>
> Ter
>
> On Jan 6, 2012, at 11:10 AM, Seref Arikan wrote:
>
> Ok, this is seriously impressive. The critical question for someone who is
> working on implementing not one, but a few grammars at the moment is:
> should I start using honey badger (great name btw) or stick to v3?
> I'm in no position to judge the maturity of a piece of technology such as
> Antlr, so input from the veterans would be appreciated.
>
> Regards
> Seref
>
>
> On Fri, Jan 6, 2012 at 2:47 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> Howdy. Ok,These left recursive grammar rules are craaaazy. Now they
>> behave just as you would expect regular rules. For example, you could have
>> return values and actions (on the right edge). The cool thing is you can
>> label the left recursive rule references (a=e) even though those disappear
>> in the implementation. :)
>>
>>    s : e {System.out.println($e.v);} ;
>>    e returns [int v]
>>      : a=e '*' b=e {$v = $a.v * $b.v;}
>>      | a=e '+' b=e {$v = $a.v + $b.v;}
>>      | INT         {$v = $INT.int;}
>>      | '(' x=e ')' {$v = $x.v;}
>>      ;
>>
>> For example, I passed an input 1+2*3 and got the following parse tree
>>
>> (s (e (e 1) + (e (e 2) * (e 3))))
>>
>> just like you would get if this were a bottom-up tool. Moreover, it fires
>> exit rule events as you would expect. you will see something like this, if
>> you pass in a listener that prints out the ctx. see the example page.
>>
>> exit 1: (e 1)
>> exit 1: (e 2)
>> exit 1: (e 3)
>> exit 1: (e (e 2) * (e 3))
>> exit 1: (e (e 1) + (e (e 2) * (e 3)))
>> 7
>> exit 0: (s (e (e 1) + (e (e 2) * (e 3))))
>>
>> just pushed to the website dist directory. also updated this page:
>>
>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>>
>> see
>>
>> http://antlr.org/depot/antlr4/main/CHANGES.txt
>>
>> Ter
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>

From james_ladd at hotmail.com  Fri Jan  6 13:52:08 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Sat, 7 Jan 2012 08:52:08 +1100
Subject: [antlr-interest] Changing fragments to rules...
In-Reply-To: <mailman.1.1325880001.30561.antlr-interest@antlr.org>
References: <mailman.1.1325880001.30561.antlr-interest@antlr.org>
Message-ID: <BAY149-W63C65D7F9935E6A1AA0B10ED950@phx.gbl>


Hi All,

I have a grammar that interprets fine in antlrworks when it contains 'fragments'.
When I move these into rules because I want to do actions the parsing fails with 
a no viable alternative. I'm really lost as to why - The syntax diagrams looks fine
there are no error reported during code compilation.

The output in the interpreter shows nodes program->primary->array_constant->array->'('->NoViableAlternative.

This is my input:

#(12.3 Abc + at:put: 'str' $c)

*** Grammar before WITH FRAGMENTS: ***

grammar Temp;

options {
    language = Java;
}
@lexer::members {
  List<RecognitionException> exceptions = new ArrayList<RecognitionException>();
  public List<RecognitionException> getExceptions() { return exceptions; }
  public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
}

program
  : primary* WHITESPACE?
  ;    

primary returns [Primary primary]
  : WHITESPACE? 
    ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
    | NUMBER {primary = new Number($NUMBER.text, $NUMBER.line);} 
    | SYMBOL_CONSTANT {primary = new SymbolConstant($SYMBOL_CONSTANT.text.substring(1), $SYMBOL_CONSTANT.line);} 
    | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);} 
    | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
    | ARRAY_CONSTANT
    )  // BLOCK | EXPRESSION 
  ;
     
WHITESPACE:    (' '|'\t'|'\r'|'\n')+;
COMMENT:        '"' .* '"' {$channel = HIDDEN;};
BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
KEYWORD:        IDENTIFIER ':';
IDENTIFIER:        LETTER (LETTER | DIGIT)*;
NUMBER:        ((NUMBER_LEFT)? ('-')? DIGITS (NUMBER_RIGHT_P1)? (NUMBER_RIGHT_P2)?);
SYMBOL_CONSTANT:    '#' SYMBOL;
CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
STRING:        '\'' (~'\''|'\'\'')* '\'';
ARRAY_CONSTANT:    '#' ARRAY;

fragment ARRAY:        '(' (ARRAY_ELEMENT)* ')';
fragment ARRAY_ELEMENT:    WHITESPACE | NUMBER | SYMBOL | STRING | CHARACTER_CONSTANT | ARRAY;
fragment SYMBOL:        IDENTIFIER | BINARY_SELECTOR | (KEYWORD)+;
fragment NUMBER_LEFT:        DIGITS 'r';
fragment NUMBER_RIGHT_P1:    '.' DIGITS;
fragment NUMBER_RIGHT_P2:    'e' ('-')? DIGITS; 
fragment LETTER:        ('a'..'z' | 'A'..'Z');
fragment DIGIT:        '0'..'9';
fragment DIGITS:        DIGIT+;
fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';


*** Grammar after with some fragments turned into rules: ***

grammar Temp;

options {
    language = Java;
}
@lexer::members {
  List<RecognitionException> exceptions = new ArrayList<RecognitionException>();
  public List<RecognitionException> getExceptions() { return exceptions; }
  public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
}

program
  : primary* WHITESPACE?
  ;    

primary returns [Primary primary]
  : WHITESPACE? 
    ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
    | NUMBER {primary = new Number($NUMBER.text, $NUMBER.line);} 
    | SYMBOL_CONSTANT {primary = new SymbolConstant($SYMBOL_CONSTANT.text.substring(1), $SYMBOL_CONSTANT.line);} 
    | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);} 
    | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
    | array_constant
    )  // BLOCK | EXPRESSION 
  ;
     
 array_constant
  : '#' array
  ;

array
  :    '(' (ARRAY_ELEMENT)* ')'
  ;
      
WHITESPACE:    (' '|'\t'|'\r'|'\n')+;
COMMENT:        '"' .* '"' {$channel = HIDDEN;};
BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
KEYWORD:        IDENTIFIER ':';
IDENTIFIER:        LETTER (LETTER | DIGIT)*;
NUMBER:        ((NUMBER_LEFT)? ('-')? DIGITS (NUMBER_RIGHT_P1)? (NUMBER_RIGHT_P2)?);
SYMBOL_CONSTANT:    '#' SYMBOL;
CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
STRING:        '\'' (~'\''|'\'\'')* '\'';

fragment ARRAY_ELEMENT:        WHITESPACE | NUMBER | SYMBOL | STRING | CHARACTER_CONSTANT;
fragment SYMBOL:        IDENTIFIER | BINARY_SELECTOR | (KEYWORD)+;
fragment NUMBER_LEFT:        DIGITS 'r';
fragment NUMBER_RIGHT_P1:    '.' DIGITS;
fragment NUMBER_RIGHT_P2:    'e' ('-')? DIGITS; 
fragment LETTER:        ('a'..'z' | 'A'..'Z');
fragment DIGIT:        '0'..'9';
fragment DIGITS:        DIGIT+;
fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';



 		 	   		  

From WeikEngOff at aol.com  Fri Jan  6 13:59:51 2012
From: WeikEngOff at aol.com (Udo Weik)
Date: Fri, 06 Jan 2012 22:59:51 +0100
Subject: [antlr-interest] 4.0: Will the smart Tiger kiss bad ass Honey
	Badger? ANTLRWorks 2??
Message-ID: <4F076ED7.9020304@aol.com>

Hello again,

I wish you all a happy and successful New Year - the year of Honey Badger!
But will the smart Tiger kiss...? To answer that question the Tiger is asking
whether (or when) it is possible to get a very first (...alpha...) version
of ANTLRWorks 2??


Many thanks and greetings
Udo

From jbb at acm.org  Fri Jan  6 15:20:32 2012
From: jbb at acm.org (John B. Brodie)
Date: Fri, 06 Jan 2012 18:20:32 -0500
Subject: [antlr-interest] Changing fragments to rules...
In-Reply-To: <BAY149-W63C65D7F9935E6A1AA0B10ED950@phx.gbl>
References: <mailman.1.1325880001.30561.antlr-interest@antlr.org>
	<BAY149-W63C65D7F9935E6A1AA0B10ED950@phx.gbl>
Message-ID: <4F0781C0.9030106@acm.org>

On 01/06/2012 04:52 PM, James Ladd wrote:
> Hi All,
>
> I have a grammar that interprets fine in antlrworks when it contains 'fragments'.
> When I move these into rules because I want to do actions the parsing fails with
> a no viable alternative. I'm really lost as to why - The syntax diagrams looks fine
> there are no error reported during code compilation.
>
> The output in the interpreter shows nodes program->primary->array_constant->array->'('->NoViableAlternative.
>
> This is my input:
>
> #(12.3 Abc + at:put: 'str' $c)
>
> *** Grammar before WITH FRAGMENTS: ***
>
> grammar Temp;
>
> options {
>      language = Java;
> }
> @lexer::members {
>    List<RecognitionException>  exceptions = new ArrayList<RecognitionException>();
>    public List<RecognitionException>  getExceptions() { return exceptions; }
>    public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
> }
>
> program
>    : primary* WHITESPACE?
>    ;
>
> primary returns [Primary primary]
>    : WHITESPACE?
>      ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
>      | NUMBER {primary = new Number($NUMBER.text, $NUMBER.line);}
>      | SYMBOL_CONSTANT {primary = new SymbolConstant($SYMBOL_CONSTANT.text.substring(1), $SYMBOL_CONSTANT.line);}
>      | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);}
>      | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
>      | ARRAY_CONSTANT
>      )  // BLOCK | EXPRESSION
>    ;
>
> WHITESPACE:    (' '|'\t'|'\r'|'\n')+;
> COMMENT:        '"' .* '"' {$channel = HIDDEN;};
> BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
> KEYWORD:        IDENTIFIER ':';
> IDENTIFIER:        LETTER (LETTER | DIGIT)*;
> NUMBER:        ((NUMBER_LEFT)? ('-')? DIGITS (NUMBER_RIGHT_P1)? (NUMBER_RIGHT_P2)?);
> SYMBOL_CONSTANT:    '#' SYMBOL;
> CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
> STRING:        '\'' (~'\''|'\'\'')* '\'';
> ARRAY_CONSTANT:    '#' ARRAY;
>
> fragment ARRAY:        '(' (ARRAY_ELEMENT)* ')';
> fragment ARRAY_ELEMENT:    WHITESPACE | NUMBER | SYMBOL | STRING | CHARACTER_CONSTANT | ARRAY;
> fragment SYMBOL:        IDENTIFIER | BINARY_SELECTOR | (KEYWORD)+;
> fragment NUMBER_LEFT:        DIGITS 'r';
> fragment NUMBER_RIGHT_P1:    '.' DIGITS;
> fragment NUMBER_RIGHT_P2:    'e' ('-')? DIGITS;
> fragment LETTER:        ('a'..'z' | 'A'..'Z');
> fragment DIGIT:        '0'..'9';
> fragment DIGITS:        DIGIT+;
> fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
> fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';
>
>
> *** Grammar after with some fragments turned into rules: ***
>
> grammar Temp;
>
> options {
>      language = Java;
> }
> @lexer::members {
>    List<RecognitionException>  exceptions = new ArrayList<RecognitionException>();
>    public List<RecognitionException>  getExceptions() { return exceptions; }
>    public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
> }
>
> program
>    : primary* WHITESPACE?
>    ;
>
> primary returns [Primary primary]
>    : WHITESPACE?
>      ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
>      | NUMBER {primary = new Number($NUMBER.text, $NUMBER.line);}
>      | SYMBOL_CONSTANT {primary = new SymbolConstant($SYMBOL_CONSTANT.text.substring(1), $SYMBOL_CONSTANT.line);}
>      | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);}
>      | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
>      | array_constant
>      )  // BLOCK | EXPRESSION
>    ;
>
>   array_constant
>    : '#' array
>    ;
>
> array
>    :    '(' (ARRAY_ELEMENT)* ')'
>    ;
>        

ARRAY_ELEMENT is a fragment so the parser will never see it.

> WHITESPACE:    (' '|'\t'|'\r'|'\n')+;
> COMMENT:        '"' .* '"' {$channel = HIDDEN;};
> BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
> KEYWORD:        IDENTIFIER ':';
> IDENTIFIER:        LETTER (LETTER | DIGIT)*;
> NUMBER:        ((NUMBER_LEFT)? ('-')? DIGITS (NUMBER_RIGHT_P1)? (NUMBER_RIGHT_P2)?);
> SYMBOL_CONSTANT:    '#' SYMBOL;
> CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
> STRING:        '\'' (~'\''|'\'\'')* '\'';
>
> fragment ARRAY_ELEMENT:        WHITESPACE | NUMBER | SYMBOL | STRING | CHARACTER_CONSTANT;
> fragment SYMBOL:        IDENTIFIER | BINARY_SELECTOR | (KEYWORD)+;
> fragment NUMBER_LEFT:        DIGITS 'r';
> fragment NUMBER_RIGHT_P1:    '.' DIGITS;
> fragment NUMBER_RIGHT_P2:    'e' ('-')? DIGITS;
> fragment LETTER:        ('a'..'z' | 'A'..'Z');
> fragment DIGIT:        '0'..'9';
> fragment DIGITS:        DIGIT+;
> fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
> fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';
>
>
>
>   		 	   		
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From james_ladd at hotmail.com  Fri Jan  6 15:23:56 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Sat, 7 Jan 2012 10:23:56 +1100
Subject: [antlr-interest] Changing fragments to rules...
In-Reply-To: <4F0781C0.9030106@acm.org>
References: <mailman.1.1325880001.30561.antlr-interest@antlr.org>
	<BAY149-W63C65D7F9935E6A1AA0B10ED950@phx.gbl>,
	<4F0781C0.9030106@acm.org>
Message-ID: <BAY149-W330259F4D448E24125BE71ED950@phx.gbl>


I'll try moving ARRAY_ELEMENT to not be a fragment.


> >
> > array
> >    :    '(' (ARRAY_ELEMENT)* ')'
> >    ;
> >        
> 
> ARRAY_ELEMENT is a fragment so the parser will never see it.
> 

 		 	   		  

From oliver.zeigermann at gmail.com  Fri Jan  6 15:43:22 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 7 Jan 2012 00:43:22 +0100
Subject: [antlr-interest] Improvements to left recursive grammars
In-Reply-To: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
References: <F827863E-54DC-42D0-9251-AB9EC4331040@cs.usfca.edu>
Message-ID: <CABJr57Cg58jHFeLZ6CyDDSNf3q8kKCfHioRqDAmwG+_tOhY0kg@mail.gmail.com>

Really, really cool and to my big surprise it actually does work :P

Nervously awaiting context labels to be able to have different
callbacks/contexts for each alternative of e.g.

expr
: '(' e=expr ')' -> parenExpr
| left=expr (op='*'|op='/') right=expr -> opExpr
| left=expr (op='+'|op='-') right=expr -> opExpr
| atom -> atomExpr
;

FYI: Tried to figure out how to generate custom heterogeneous ASTs,
and do not think one should use parse trees/callbacks as a starting
point. One should rather create them directly in the grammar, like
e.g.

expr returns [Expression expr]
: '(' e=expr ')' { $expr = $e.expr; }
| left=expr (op='*'|op='/') right=expr
  { $expr = new Operation($op.text, $left.expr, $right.expr); }
| left=expr (op='+'|op='-') right=expr
  { $expr = new Operation($op.text, $left.expr, $right.expr); }
| atom { $expr = $atom.expr; }
;

Thoughts on this?

- Oliver

2012/1/6 Terence Parr <parrt at cs.usfca.edu>:
> Howdy. Ok,These left recursive grammar rules are craaaazy. Now they behave
> just as you would expect regular rules. For example, you could have return
> values and actions (on the right edge). The cool thing is you can label the
> left recursive rule references (a=e) even though those disappear in the
> implementation. :)
>
> ? ? s : e {System.out.println($e.v);} ;
> ? ? e returns [int v]
> ? ? ? : a=e '*' b=e {$v = $a.v * $b.v;}
> ? ? ? | a=e '+' b=e {$v = $a.v + $b.v;}
> ? ? ? | INT ? ? ? ? {$v = $INT.int;}
> ? ? ? | '(' x=e ')' {$v = $x.v;}
> ? ? ? ;
>
> For example, I passed an input 1+2*3 and got the following parse tree
>
> (s (e (e 1) + (e (e 2) * (e 3))))
>
> just like you would get if this were a bottom-up tool. Moreover, it fires
> exit rule events as you would expect. you will see something like this, if
> you pass in a listener that prints out the ctx. see the example page.
>
> exit 1: (e 1)
> exit 1: (e 2)
> exit 1: (e 3)
> exit 1: (e (e 2) * (e 3))
> exit 1: (e (e 1) + (e (e 2) * (e 3)))
> 7
> exit 0: (s (e (e 1) + (e (e 2) * (e 3))))
>
> just pushed to the website dist directory. also updated this page:
>
> http://www.antlr.org/wiki/display/ANTLR4/Examples
>
> see
>
> http://antlr.org/depot/antlr4/main/CHANGES.txt
>
> Ter
>

From james_ladd at hotmail.com  Sat Jan  7 00:30:01 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Sat, 7 Jan 2012 19:30:01 +1100
Subject: [antlr-interest] What multiple alternative?
Message-ID: <BAY149-W26983688405642A36FD602ED9A0@phx.gbl>




I have a grammar I'm working on (below) and the error I have when validating the
grammar is:

[19:22:12] warning(200): Temp.g:57:13: 
Decision can match input such as "KEYWORD" using multiple alternatives: 1, 2

When I look at line 57 I just can't see how the input is matched by anything 
other than the lex token KEYWORD.

How can I fix this, and how can I see the multiple matches so I can fix this myself
if it occurs again?

Rgs,James.

grammar Temp;

options {
  language = Java;
}
@lexer::members {
  List<RecognitionException> exceptions = new ArrayList<RecognitionException>();
  public List<RecognitionException> getExceptions() { return exceptions; }
  public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
}

program
  : primary* EOF
  ;    

primary returns [Primary primary]
  : WHITESPACE? 
    ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
    | NUMBER {primary = new Number($NUMBER.text, $NUMBER.line);} 
    | symbol_constant 
    | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);} 
    | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
    | array_constant
    )  // BLOCK | EXPRESSION 
  ;

array_constant
  : '#' array
  ;

array
  : '(' array_element* ')'
  ;

array_element
  : WHITESPACE
  | NUMBER
  | symbol 
  | STRING 
  | CHARACTER_CONSTANT 
  | array
  ;

symbol_constant
  : '#' symbol
  ;

symbol
  :  IDENTIFIER
  | BINARY_SELECTOR 
  | (KEYWORD)+
  ;

WHITESPACE:        (' '|'\t'|'\r'|'\n')+;
COMMENT:        '"' .* '"' {$channel = HIDDEN;};
BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
KEYWORD:        IDENTIFIER ':';
IDENTIFIER:        LETTER (LETTER | DIGIT)*;
NUMBER:        ((NUMBER_LEFT)? ('-')? DIGITS (NUMBER_RIGHT_P1)? (NUMBER_RIGHT_P2)?);
CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
STRING:        '\'' (~'\''|'\'\'')* '\'';

fragment NUMBER_LEFT:        DIGITS 'r';
fragment NUMBER_RIGHT_P1:    '.' DIGITS;
fragment NUMBER_RIGHT_P2:    'e' ('-')? DIGITS; 
fragment LETTER:        ('a'..'z' | 'A'..'Z');
fragment DIGIT:        '0'..'9';
fragment DIGITS:        DIGIT+;
fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';

 		 	   		  

From jbb at acm.org  Sat Jan  7 06:46:45 2012
From: jbb at acm.org (John B. Brodie)
Date: Sat, 07 Jan 2012 09:46:45 -0500
Subject: [antlr-interest] What multiple alternative?
In-Reply-To: <BAY149-W26983688405642A36FD602ED9A0@phx.gbl>
References: <BAY149-W26983688405642A36FD602ED9A0@phx.gbl>
Message-ID: <4F085AD5.8020304@acm.org>

Greetings!

On 01/07/2012 03:30 AM, James Ladd wrote:
> array_constant
>    : '#' array
>    ;
>
> array
>    : '(' array_element* ')'
>    ;
>
> array_element
>    : WHITESPACE
>    | NUMBER
>    | symbol
>    | STRING
>    | CHARACTER_CONSTANT
>    | array
>    ;
>
> symbol_constant
>    : '#' symbol
>    ;
>
> symbol
>    :  IDENTIFIER
>    | BINARY_SELECTOR
>    | (KEYWORD)+
>    ;
>
>

you have two nested repetitions but no way to know when the inner ends 
and the outer resumes.
e.g. zero or more array_elements each of which may contain 1 or more 
KEYWORDS (via symbol).

consider the input: #(a:b:c:d:)

now is this a single array_element containing a single symbol having 4 
KEYWORDs?
or is this 4 array_elements each containing a single symbol having 1 
KEYWORD?
or is this 2 array_elements each containing a single symbol having 2 
KEYWORDs?
or is this 2 array_elements each containing 2 symbols each having 1 KEYWORD?
or is this 3 array_elements...... you get the idea i hope


From serefarikan at kurumsalteknoloji.com  Sat Jan  7 07:21:23 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Sat, 7 Jan 2012 15:21:23 +0000
Subject: [antlr-interest] global backtrack vs rule level backtrack
Message-ID: <CA+4ThdrEq4vWPcg75JOSvx2dRs6TV+NZDOf7zRPWcnTcgqU3+Q@mail.gmail.com>

Greetings,
The grammar I'll paste below has a problem with matching an input through
multiple alternatives. I have other questions about it, but what struck me
is when I introduce a global backtrack=true setting, it does not have the
same effect with introducing backtrack=true to every single rule. What is
the difference between these two approaches?

And here is the grammar (which has been saved from the mutual recursion
thanks to Jim).

grammar testg;
options{backtrack=true;}

rul     :  contains_expr    ;

contains_expr : 'CONTAINS' contains_expression
                  //'CONTAINS' contains_or
        ;

contains_expression  :  primary  (('OR'|'AND'|'XOR') primary)*
       ;

primary
 : '(' contains_expression ')'
 | class_expression
 ;


class_expression :   simple_class_expr
           | '(' simple_class_expr contains_expr ')'
           |( simple_class_expr contains_expr) //TODO: REMOVED THIS DUE TO
AMBIGUITY IT INTRODUCES...
        ;

simple_class_expr : identifier                         // RM_TYPE_NAME
               | identifier identifier                  // RM_TYPE_NAME
variable
               | archetype_class_expr
         | versioned_class_expression
         | version_class_expression
         // | identified_obj_expression                           // need
to be used once VersionedClassExpr is removed
        ;

identifier
    :    ID
    ;

archetype_class_expr
    :    '.ace'
    ;

versioned_class_expression
    :    '.vce'
    ;

version_class_expression
    :    '.vnce'
    ;

temp     :
        ;








ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

From james_ladd at hotmail.com  Sat Jan  7 13:56:52 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Sun, 8 Jan 2012 08:56:52 +1100
Subject: [antlr-interest] What multiple alternative?
In-Reply-To: <4F085AD5.8020304@acm.org>
References: <BAY149-W26983688405642A36FD602ED9A0@phx.gbl>,
	<4F085AD5.8020304@acm.org>
Message-ID: <BAY149-W26FCA48B8BC6357ABA3EBBED9A0@phx.gbl>


hmmn, I removed the error by removing the () around keyword.
I think I know what is going on. I got the idea from looking at the 
syntax diagram.

symbol
  :  IDENTIFIER
  | BINARY_SELECTOR 
  | (KEYWORD)+
  ;

Becomes:

symbol
  :  IDENTIFIER
  | BINARY_SELECTOR 
  | KEYWORD+
  ;

> Date: Sat, 7 Jan 2012 09:46:45 -0500
> From: jbb at acm.org
> To: james_ladd at hotmail.com
> CC: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] What multiple alternative?
> 
> Greetings!
> 
> On 01/07/2012 03:30 AM, James Ladd wrote:
> > array_constant
> >    : '#' array
> >    ;
> >
> > array
> >    : '(' array_element* ')'
> >    ;
> >
> > array_element
> >    : WHITESPACE
> >    | NUMBER
> >    | symbol
> >    | STRING
> >    | CHARACTER_CONSTANT
> >    | array
> >    ;
> >
> > symbol_constant
> >    : '#' symbol
> >    ;
> >
> > symbol
> >    :  IDENTIFIER
> >    | BINARY_SELECTOR
> >    | (KEYWORD)+
> >    ;
> >
> >
> 
> you have two nested repetitions but no way to know when the inner ends 
> and the outer resumes.
> e.g. zero or more array_elements each of which may contain 1 or more 
> KEYWORDS (via symbol).
> 
> consider the input: #(a:b:c:d:)
> 
> now is this a single array_element containing a single symbol having 4 
> KEYWORDs?
> or is this 4 array_elements each containing a single symbol having 1 
> KEYWORD?
> or is this 2 array_elements each containing a single symbol having 2 
> KEYWORDs?
> or is this 2 array_elements each containing 2 symbols each having 1 KEYWORD?
> or is this 3 array_elements...... you get the idea i hope
> 
 		 	   		  

From james_ladd at hotmail.com  Sat Jan  7 15:16:51 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Sun, 8 Jan 2012 10:16:51 +1100
Subject: [antlr-interest] What multiple alternative?
In-Reply-To: <BAY149-W26FCA48B8BC6357ABA3EBBED9A0@phx.gbl>
References: <BAY149-W26983688405642A36FD602ED9A0@phx.gbl>,
	<4F085AD5.8020304@acm.org>,
	<BAY149-W26FCA48B8BC6357ABA3EBBED9A0@phx.gbl>
Message-ID: <BAY149-W2DBA1E9A315218BDEFCAAED9A0@phx.gbl>


oops spoke too soon. Must remember to clear all errors and validate the grammar
before thinking errors are gone in ANTLRWorks.

From: james_ladd at hotmail.com
To: jbb at acm.org
CC: antlr-interest at antlr.org
Subject: RE: [antlr-interest] What multiple alternative?
Date: Sun, 8 Jan 2012 08:56:52 +1100







hmmn, I removed the error by removing the () around keyword.
I think I know what is going on. I got the idea from looking at the 
syntax diagram.

symbol
  :  IDENTIFIER
  | BINARY_SELECTOR 
  | (KEYWORD)+
  ;

Becomes:

symbol
  :  IDENTIFIER
  | BINARY_SELECTOR 
  | KEYWORD+
  ;

> Date: Sat, 7 Jan 2012 09:46:45 -0500
> From: jbb at acm.org
> To: james_ladd at hotmail.com
> CC: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] What multiple alternative?
> 
> Greetings!
> 
> On 01/07/2012 03:30 AM, James Ladd wrote:
> > array_constant
> >    : '#' array
> >    ;
> >
> > array
> >    : '(' array_element* ')'
> >    ;
> >
> > array_element
> >    : WHITESPACE
> >    | NUMBER
> >    | symbol
> >    | STRING
> >    | CHARACTER_CONSTANT
> >    | array
> >    ;
> >
> > symbol_constant
> >    : '#' symbol
> >    ;
> >
> > symbol
> >    :  IDENTIFIER
> >    | BINARY_SELECTOR
> >    | (KEYWORD)+
> >    ;
> >
> >
> 
> you have two nested repetitions but no way to know when the inner ends 
> and the outer resumes.
> e.g. zero or more array_elements each of which may contain 1 or more 
> KEYWORDS (via symbol).
> 
> consider the input: #(a:b:c:d:)
> 
> now is this a single array_element containing a single symbol having 4 
> KEYWORDs?
> or is this 4 array_elements each containing a single symbol having 1 
> KEYWORD?
> or is this 2 array_elements each containing a single symbol having 2 
> KEYWORDs?
> or is this 2 array_elements each containing 2 symbols each having 1 KEYWORD?
> or is this 3 array_elements...... you get the idea i hope
> 
 		 	   		   		 	   		  

From oliver.zeigermann at gmail.com  Sun Jan  8 15:25:10 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Mon, 9 Jan 2012 00:25:10 +0100
Subject: [antlr-interest] [stringtemplate-interest] ANTLRWorks 2 preview
	2
In-Reply-To: <073c01ccce59$043846f0$0ca8d4d0$@tunnelvisionlabs.com>
References: <073c01ccce59$043846f0$0ca8d4d0$@tunnelvisionlabs.com>
Message-ID: <CABJr57AxYimSrnRt9KZY2gKxtc01qvsD6S73aGXH+jXeY9VYyQ@mail.gmail.com>

A non-text attachment was scrubbed...
Name: Screenshot.jpg
Type: image/jpeg
Size: 113895 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20120109/a3ac1c5d/attachment.jpg 

From parrt at cs.usfca.edu  Sun Jan  8 15:26:50 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 8 Jan 2012 16:26:50 -0700
Subject: [antlr-interest] [stringtemplate-interest] ANTLRWorks 2 preview
	2
In-Reply-To: <CABJr57AxYimSrnRt9KZY2gKxtc01qvsD6S73aGXH+jXeY9VYyQ@mail.gmail.com>
References: <073c01ccce59$043846f0$0ca8d4d0$@tunnelvisionlabs.com>
	<CABJr57AxYimSrnRt9KZY2gKxtc01qvsD6S73aGXH+jXeY9VYyQ@mail.gmail.com>
Message-ID: <FDC35BA2-3DAC-411A-856D-9C6D84B93BE2@cs.usfca.edu>

Just open a grammar or st file

Sent from my iPhone

On Jan 8, 2012, at 4:25 PM, Oliver Zeigermann <oliver.zeigermann at gmail.com> wrote:

> Hmmm, would like to try it, but I can't even create a new project. There seems to be no project type to choose from. Am I just stupid or is this a bug?
> 
> - Oliver
> 
> 2012/1/8 Sam Harwell <sam at tunnelvisionlabs.com>
> I just uploaded a new preview build of ANTLRWorks 2.
> 
>  
> 
> I posted the download link as well as some change notes on the ANTLR wiki:
> 
> http://www.antlr.org/wiki/display/ANTLR4/1.+Overview
> 
>  
> 
> I?m definitely interested in any feedback people may have regarding the new IDE if they are testing it out! :)
> 
>  
> 
> Thanks,
> 
> --
> 
> Sam Harwell
> 
> Owner, Lead Developer
> 
> <image001.png>
> 
> http://tunnelvisionlabs.com
> 
>  
> 
>  
> 
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 
> 
> <Screenshot.jpg>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From oliver.zeigermann at gmail.com  Sun Jan  8 15:36:01 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Mon, 9 Jan 2012 00:36:01 +0100
Subject: [antlr-interest] [stringtemplate-interest] ANTLRWorks 2 preview
	2
In-Reply-To: <FDC35BA2-3DAC-411A-856D-9C6D84B93BE2@cs.usfca.edu>
References: <073c01ccce59$043846f0$0ca8d4d0$@tunnelvisionlabs.com>
	<CABJr57AxYimSrnRt9KZY2gKxtc01qvsD6S73aGXH+jXeY9VYyQ@mail.gmail.com>
	<FDC35BA2-3DAC-411A-856D-9C6D84B93BE2@cs.usfca.edu>
Message-ID: <CABJr57A37fDSO0Z9Z-wnr5dHPQWzrzqOtUaGQsDhP6_587fsVg@mail.gmail.com>

Thanks, works now :)

I have never been a big netbeans fan, but this really looks cool already :)

- Oliver

2012/1/9 Terence Parr <parrt at cs.usfca.edu>:
> Just open a grammar or st file
>
> Sent from my iPhone
>
> On Jan 8, 2012, at 4:25 PM, Oliver Zeigermann <oliver.zeigermann at gmail.com>
> wrote:
>
> Hmmm, would like to try it, but I can't even create a new project. There
> seems to be no project type to choose from. Am I just stupid or is this a
> bug?
>
> - Oliver
>
> 2012/1/8 Sam Harwell <sam at tunnelvisionlabs.com>
>>
>> I just uploaded a new preview build of ANTLRWorks 2.
>>
>>
>>
>> I posted the download link as well as some change notes on the ANTLR wiki:
>>
>> http://www.antlr.org/wiki/display/ANTLR4/1.+Overview
>>
>>
>>
>> I?m definitely interested in any feedback people may have regarding the
>> new IDE if they are testing it out! :)
>>
>>
>>
>> Thanks,
>>
>> --
>>
>> Sam Harwell
>>
>> Owner, Lead Developer
>>
>> <image001.png>
>>
>> http://tunnelvisionlabs.com
>>
>>
>>
>>
>>
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>
> <Screenshot.jpg>
>
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Mon Jan  9 11:03:31 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 9 Jan 2012 11:03:31 -0800
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
Message-ID: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>

Contemplating switch to mercurial and hosting at bitbucket.org.  
Ter

From opensource at peoplemerge.com  Mon Jan  9 11:30:02 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Mon, 9 Jan 2012 14:30:02 -0500
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
Message-ID: <CANSf4X5PR=C8uBbcL5YautbTa2YK4rVRYtL6iHWsQGdOxBdANA@mail.gmail.com>

I haven't used bitbucket yet but mercurial was an easy switch from
subversion.  I found Mercurial's built-in documentation clearer than that
of git but git has lots of books out.  Mercurial has some nice standard
features (like queues, which I looked at for pushing changes to multiple
targets at my current contract) but git is know to have more flexibility;
this classic post explains but may be out of date:
http://importantshock.wordpress.com/2008/08/07/git-vs-mercurial/  .  Git
has much broader adoption - see
http://www.indeed.com/jobtrends?q=git%2C+mercurial&l=.  I would go with Git
for its user base alone.

On Mon, Jan 9, 2012 at 2:03 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Contemplating switch to mercurial and hosting at bitbucket.org.
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jmurray at aerotech.com  Mon Jan  9 11:38:46 2012
From: jmurray at aerotech.com (Justin Murray)
Date: Mon, 9 Jan 2012 14:38:46 -0500
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
Message-ID: <6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>

I've been using bitbucket with Git for a few of my projects. I spent a 
lot of time looking for somewhere that would host a Git repo, issue 
tracker, and a wiki, and bitbucket was the only viable answer that was 
also free. I don't have any complaints with it yet, it seems to be 
reasonably fast and reliable. I can't comment on mercurial at all though.

- Justin

On 1/9/2012 2:03 PM, Terence Parr wrote:
> Contemplating switch to mercurial and hosting at bitbucket.org.
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From opensource at peoplemerge.com  Mon Jan  9 11:56:25 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Mon, 9 Jan 2012 14:56:25 -0500
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>
Message-ID: <CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>

Question, Justin:

Was github not viable at the time, and if so why?  Did you need private
repos?

On Mon, Jan 9, 2012 at 2:38 PM, Justin Murray <jmurray at aerotech.com> wrote:

> I've been using bitbucket with Git for a few of my projects. I spent a
> lot of time looking for somewhere that would host a Git repo, issue
> tracker, and a wiki, and bitbucket was the only viable answer that was
> also free. I don't have any complaints with it yet, it seems to be
> reasonably fast and reliable. I can't comment on mercurial at all though.
>
> - Justin
>
> On 1/9/2012 2:03 PM, Terence Parr wrote:
> > Contemplating switch to mercurial and hosting at bitbucket.org.
> > Ter
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kirby.bohling at gmail.com  Mon Jan  9 12:00:42 2012
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Mon, 9 Jan 2012 14:00:42 -0600
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
Message-ID: <CA+bn5rxJ2tYjy86PHt2-XaDcsS4mPuBBzGMDgi+FHAK=+-Ptjw@mail.gmail.com>

On Mon, Jan 9, 2012 at 1:03 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Contemplating switch to mercurial and hosting at bitbucket.org.
> Ter
>

I have a personal bias towards git, but think it would great if ANTLR
was developed in a version control tool that was publicly visible and
I could create local branches and mods if necessary.  I haven't come
across any problems in ANTLR which required it, but there are plenty
of tools I maintain a local git repos with local modifications and
fixes applied to the last release branch while waiting a pending
release from upstream which includes said fixes.

Kirby

From diabeteman at gmail.com  Mon Jan  9 12:02:44 2012
From: diabeteman at gmail.com (Robin)
Date: Mon, 9 Jan 2012 21:02:44 +0100
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>
	<CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
Message-ID: <CA+_G_aqU9wifYSfDfGoCUORDEbYAnVyx-ezE4-uA1o81F6cUWQ@mail.gmail.com>

Hello guys,

>From my experience git seems a little faster than mercurial on very big
projects (i'm talking millions of lines of code). But is poorly ported on
windows (MSys Git sucks a little)

On the other hand, mercurial has much more tooling developped arround it
(flawless integration into windows with TortoiseHG, repo browsing through
apache with minimal configuration, etc)

Good choice then :)

Robin

On Mon, Jan 9, 2012 at 8:56 PM, Dave Thomas <opensource at peoplemerge.com>wrote:

> Question, Justin:
>
> Was github not viable at the time, and if so why?  Did you need private
> repos?
>
> On Mon, Jan 9, 2012 at 2:38 PM, Justin Murray <jmurray at aerotech.com>
> wrote:
>
> > I've been using bitbucket with Git for a few of my projects. I spent a
> > lot of time looking for somewhere that would host a Git repo, issue
> > tracker, and a wiki, and bitbucket was the only viable answer that was
> > also free. I don't have any complaints with it yet, it seems to be
> > reasonably fast and reliable. I can't comment on mercurial at all though.
> >
> > - Justin
> >
> > On 1/9/2012 2:03 PM, Terence Parr wrote:
> > > Contemplating switch to mercurial and hosting at bitbucket.org.
> > > Ter
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From diabeteman at gmail.com  Mon Jan  9 12:04:00 2012
From: diabeteman at gmail.com (Robin)
Date: Mon, 9 Jan 2012 21:04:00 +0100
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CA+bn5rxJ2tYjy86PHt2-XaDcsS4mPuBBzGMDgi+FHAK=+-Ptjw@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CA+bn5rxJ2tYjy86PHt2-XaDcsS4mPuBBzGMDgi+FHAK=+-Ptjw@mail.gmail.com>
Message-ID: <CA+_G_ar2z6o28HS4C0VLt_auWc2FaCWUEXK2g27Nm_8PpQT6_Q@mail.gmail.com>

I forgot to say that on all other aspects, mercurial and git are pretty
much the same.

On Mon, Jan 9, 2012 at 9:00 PM, Kirby Bohling <kirby.bohling at gmail.com>wrote:

> On Mon, Jan 9, 2012 at 1:03 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> > Contemplating switch to mercurial and hosting at bitbucket.org.
> > Ter
> >
>
> I have a personal bias towards git, but think it would great if ANTLR
> was developed in a version control tool that was publicly visible and
> I could create local branches and mods if necessary.  I haven't come
> across any problems in ANTLR which required it, but there are plenty
> of tools I maintain a local git repos with local modifications and
> fixes applied to the last release branch while waiting a pending
> release from upstream which includes said fixes.
>
> Kirby
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sam at tunnelvisionlabs.com  Mon Jan  9 12:27:59 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Mon, 9 Jan 2012 14:27:59 -0600
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CA+_G_aqU9wifYSfDfGoCUORDEbYAnVyx-ezE4-uA1o81F6cUWQ@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>	<CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
	<CA+_G_aqU9wifYSfDfGoCUORDEbYAnVyx-ezE4-uA1o81F6cUWQ@mail.gmail.com>
Message-ID: <07ad01cccf0d$2e63f910$8b2beb30$@tunnelvisionlabs.com>

This is why I've pushed for Mercurial.

I'd recommend Perforce or Subversion over Git any day of the week for any
project with a Windows port. However, if the choice is between Perforce,
Subversion, and Mercurial then there are a number of project-specific
aspects to consider before pushing for one over the rest. For the ANTLR
project(s), Mercurial appears to the best match given the size of the
project, number of contributors, and lack of a need for Perforce's advanced
access controls.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Robin [mailto:diabeteman at gmail.com] 
Sent: Monday, January 09, 2012 2:03 PM
To: Dave Thomas
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] anybody care to comment on bitbucket.org?

Hello guys,

>From my experience git seems a little faster than mercurial on very big
projects (i'm talking millions of lines of code). But is poorly ported on
windows (MSys Git sucks a little)

On the other hand, mercurial has much more tooling developped arround it
(flawless integration into windows with TortoiseHG, repo browsing through
apache with minimal configuration, etc)

Good choice then :)

Robin



From opensource at peoplemerge.com  Mon Jan  9 12:36:14 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Mon, 9 Jan 2012 15:36:14 -0500
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CA+_G_aqU9wifYSfDfGoCUORDEbYAnVyx-ezE4-uA1o81F6cUWQ@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>
	<CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
	<CA+_G_aqU9wifYSfDfGoCUORDEbYAnVyx-ezE4-uA1o81F6cUWQ@mail.gmail.com>
Message-ID: <CANSf4X4ndRHe4vBiS6EmSG9xwJN-cTgYqTQO4WNyA1ARLO9OzA@mail.gmail.com>

Anyone tried TortiseGit?  http://code.google.com/p/tortoisegit/

I generally agree that Mercurial has nice tooling.

On Mon, Jan 9, 2012 at 3:02 PM, Robin <diabeteman at gmail.com> wrote:

> Hello guys,
>
> From my experience git seems a little faster than mercurial on very big
> projects (i'm talking millions of lines of code). But is poorly ported on
> windows (MSys Git sucks a little)
>
> On the other hand, mercurial has much more tooling developped arround it
> (flawless integration into windows with TortoiseHG, repo browsing through
> apache with minimal configuration, etc)
>
> Good choice then :)
>
> Robin
>
>
> On Mon, Jan 9, 2012 at 8:56 PM, Dave Thomas <opensource at peoplemerge.com>wrote:
>
>> Question, Justin:
>>
>> Was github not viable at the time, and if so why?  Did you need private
>> repos?
>>
>> On Mon, Jan 9, 2012 at 2:38 PM, Justin Murray <jmurray at aerotech.com>
>> wrote:
>>
>> > I've been using bitbucket with Git for a few of my projects. I spent a
>> > lot of time looking for somewhere that would host a Git repo, issue
>> > tracker, and a wiki, and bitbucket was the only viable answer that was
>> > also free. I don't have any complaints with it yet, it seems to be
>> > reasonably fast and reliable. I can't comment on mercurial at all
>> though.
>> >
>> > - Justin
>> >
>> > On 1/9/2012 2:03 PM, Terence Parr wrote:
>> > > Contemplating switch to mercurial and hosting at bitbucket.org.
>> > > Ter
>> > >
>> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From jmurray at aerotech.com  Mon Jan  9 12:49:52 2012
From: jmurray at aerotech.com (Justin Murray)
Date: Mon, 9 Jan 2012 15:49:52 -0500
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>
	<CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
Message-ID: <6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEE@EXCH-VIRTUAL.aerotechad.com>

Yes, I should have also mentioned that one of my requirements was the ability to have private repos as well. I believe that bitbucket allows you to host unlimited repos, both public and private, for free. They do a really good job of allowing you to manage exactly what you want to make public vs private, and they make it easy to add users to a project with specific permissions.

I should also mention that I do about half of my development on Windows, and I've found that TortoiseGIT works really well on Windows.

- Justin

On 1/9/2012 2:56 PM, Dave Thomas wrote: 

	Question, Justin: 

	Was github not viable at the time, and if so why?  Did you need private repos?
	
	
	On Mon, Jan 9, 2012 at 2:38 PM, Justin Murray <jmurray at aerotech.com> wrote:
	

		I've been using bitbucket with Git for a few of my projects. I spent a
		lot of time looking for somewhere that would host a Git repo, issue
		tracker, and a wiki, and bitbucket was the only viable answer that was
		also free. I don't have any complaints with it yet, it seems to be
		reasonably fast and reliable. I can't comment on mercurial at all though.
		
		- Justin
		

		On 1/9/2012 2:03 PM, Terence Parr wrote:
		> Contemplating switch to mercurial and hosting at bitbucket.org.
		> Ter
		>
		> List: http://www.antlr.org/mailman/listinfo/antlr-interest
		> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
		
		List: http://www.antlr.org/mailman/listinfo/antlr-interest
		Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
		



From diabeteman at gmail.com  Mon Jan  9 13:10:56 2012
From: diabeteman at gmail.com (Robin)
Date: Mon, 9 Jan 2012 22:10:56 +0100
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEE@EXCH-VIRTUAL.aerotechad.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>
	<CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEE@EXCH-VIRTUAL.aerotechad.com>
Message-ID: <CA+_G_aoBGSWQZ4FcSzqE5jyrKZK_wQ8uB-HJO2JoRnWytVm3YA@mail.gmail.com>

TortoiseGit is ok but is no match for TortoiseHg. Especially for the
HgWorkbench which is one of the best VCS control panel I've seen so far
(including ClearCase and IBM RTC)

On Mon, Jan 9, 2012 at 9:49 PM, Justin Murray <jmurray at aerotech.com> wrote:

> Yes, I should have also mentioned that one of my requirements was the
> ability to have private repos as well. I believe that bitbucket allows you
> to host unlimited repos, both public and private, for free. They do a
> really good job of allowing you to manage exactly what you want to make
> public vs private, and they make it easy to add users to a project with
> specific permissions.
>
> I should also mention that I do about half of my development on Windows,
> and I've found that TortoiseGIT works really well on Windows.
>
> - Justin
>
> On 1/9/2012 2:56 PM, Dave Thomas wrote:
>
>        Question, Justin:
>
>        Was github not viable at the time, and if so why?  Did you need
> private repos?
>
>
>        On Mon, Jan 9, 2012 at 2:38 PM, Justin Murray <jmurray at aerotech.com>
> wrote:
>
>
>                I've been using bitbucket with Git for a few of my
> projects. I spent a
>                lot of time looking for somewhere that would host a Git
> repo, issue
>                tracker, and a wiki, and bitbucket was the only viable
> answer that was
>                also free. I don't have any complaints with it yet, it
> seems to be
>                reasonably fast and reliable. I can't comment on mercurial
> at all though.
>
>                - Justin
>
>
>                On 1/9/2012 2:03 PM, Terence Parr wrote:
>                > Contemplating switch to mercurial and hosting at
> bitbucket.org.
>                > Ter
>                >
>                > List:
> http://www.antlr.org/mailman/listinfo/antlr-interest
>                > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>                List: http://www.antlr.org/mailman/listinfo/antlr-interest
>                Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From opensource at peoplemerge.com  Mon Jan  9 13:50:11 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Mon, 9 Jan 2012 16:50:11 -0500
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CA+_G_aoBGSWQZ4FcSzqE5jyrKZK_wQ8uB-HJO2JoRnWytVm3YA@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEC@EXCH-VIRTUAL.aerotechad.com>
	<CANSf4X7uGRow0mfW2YUGwDCbvSy_dd_2RGw3Ro8ug5ffQMNd+w@mail.gmail.com>
	<6B458D23F5D4A24ABCDB3C78EA97393B02AFFEEE@EXCH-VIRTUAL.aerotechad.com>
	<CA+_G_aoBGSWQZ4FcSzqE5jyrKZK_wQ8uB-HJO2JoRnWytVm3YA@mail.gmail.com>
Message-ID: <CANSf4X53sF2bGCp5c9A=zO2mEa03z0BfkC2x9zoauUc+=2w66A@mail.gmail.com>

Agree that HgWorkbench is great once you learn the UI.  Not that it's
relevant for this project but I really love the convenience right click ->
tortiseHg -> serve to share your repo with others on your network.

On Mon, Jan 9, 2012 at 4:10 PM, Robin <diabeteman at gmail.com> wrote:

> TortoiseGit is ok but is no match for TortoiseHg. Especially for the
> HgWorkbench which is one of the best VCS control panel I've seen so far
> (including ClearCase and IBM RTC)
>
>
> On Mon, Jan 9, 2012 at 9:49 PM, Justin Murray <jmurray at aerotech.com>wrote:
>
>> Yes, I should have also mentioned that one of my requirements was the
>> ability to have private repos as well. I believe that bitbucket allows you
>> to host unlimited repos, both public and private, for free. They do a
>> really good job of allowing you to manage exactly what you want to make
>> public vs private, and they make it easy to add users to a project with
>> specific permissions.
>>
>> I should also mention that I do about half of my development on Windows,
>> and I've found that TortoiseGIT works really well on Windows.
>>
>> - Justin
>>
>> On 1/9/2012 2:56 PM, Dave Thomas wrote:
>>
>>        Question, Justin:
>>
>>        Was github not viable at the time, and if so why?  Did you need
>> private repos?
>>
>>
>>        On Mon, Jan 9, 2012 at 2:38 PM, Justin Murray <
>> jmurray at aerotech.com> wrote:
>>
>>
>>                I've been using bitbucket with Git for a few of my
>> projects. I spent a
>>                lot of time looking for somewhere that would host a Git
>> repo, issue
>>                tracker, and a wiki, and bitbucket was the only viable
>> answer that was
>>                also free. I don't have any complaints with it yet, it
>> seems to be
>>                reasonably fast and reliable. I can't comment on mercurial
>> at all though.
>>
>>                - Justin
>>
>>
>>                On 1/9/2012 2:03 PM, Terence Parr wrote:
>>                > Contemplating switch to mercurial and hosting at
>> bitbucket.org.
>>                > Ter
>>                >
>>                > List:
>> http://www.antlr.org/mailman/listinfo/antlr-interest
>>                > Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>                List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>                Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From hanasaki at gmail.com  Mon Jan  9 14:21:07 2012
From: hanasaki at gmail.com (hanasaki)
Date: Mon, 09 Jan 2012 16:21:07 -0600
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
Message-ID: <4F0B6853.10301@gmail.com>

In terms of "following" and "support" SVN and GIT seem to the
mainstream.  I have seen GIT displace SVN in a few groups.

GIT
	+ wide adoption and growing
	+ fast growing IDE integration
	- different paradigm to learn
	- does not work well over http(s) tunnel
	- thus issues if you are behind a firewall
	+ own TCP protocol that is quite efficient
	: GITHUB quite popular for hosting
SVN
	+ simple paradigm of branch/trunk/tag
	+ well established IDE integration
	+ works well over firewalls and http(s) tunnels
	+ has its own TCP binary protocol as well
	- more limited hosting than GIT
	+ easy to setup a host on linux + apache for http(s)

Git has alot to offer including some nice tools like
(http://code.google.com/p/gerrit/) for code review.

-------- Original Message --------
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
From: Terence Parr <parrt at cs.usfca.edu>
To: antlr-interest Interest <antlr-interest at antlr.org>,
stringtemplate-interest List <stringtemplate-interest at antlr.org>
Date: 01/09/2012 01:03 PM

> Contemplating switch to mercurial and hosting at bitbucket.org. Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest 
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Mon Jan  9 14:34:14 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 9 Jan 2012 14:34:14 -0800
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
Message-ID: <8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>


On Jan 9, 2012, at 2:11 PM, Barrie Treloar wrote:

> On Tue, Jan 10, 2012 at 5:33 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Contemplating switch to mercurial and hosting at bitbucket.org.
>> Ter
> 
> You've already got someone syncing to github.
> Why not use that instead?

I hate git? because I don't understand it ;) hg was easy and obvious.  mercurial works with intellij (well I hope) so it will be okay for me.

Ter

> I'm new to both mercurial (1 project) and git (2+ projects).
>> From the small amount of reading I've done they appear to be on par,
> with a slight leaning towards git.
> Eclipse is moving to git.
> Linux is git.
> I'm not familiar enough with other big players that are using
> mercurial. (Maybe the old sun sources...)
> 
> I've used bitbucket and github.
> Dont really have any opinions since my head space is still stuck in
> svn and need more time/practice to get it out.
> However I love the idea of
> * git stash
> * git bisect
> I dont know if mercurial has similar commands.


From james_ladd at hotmail.com  Mon Jan  9 14:46:07 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Tue, 10 Jan 2012 09:46:07 +1100
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <mailman.1.1326052801.11041.antlr-interest@antlr.org>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>
Message-ID: <BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>


I have a grammar I am working on (below) and when in ANTLRWorks I try
to interpret the following against the rule "statements" I get a NoViableAlternativeException.

^ 12.

I can see that NUMBER has a component of it that can be a '.' hence the grammar issue.
Is it the start of the decimal part of a number or the end of a statement.

Note: ^ 12.5. works as I would expect.

What I don't know is how to overcome this situation?
I would have thought that if there is no digit after the '.' that things would be ok.

Please can you suggest a fix / approach?

Rgs, James.

grammar Temp;

options {
  language = Java;
}
@header {
  package st.redline.compiler;
}
@lexer::header {
  package st.redline.compiler;
}
@lexer::members {
  List<RecognitionException> exceptions = new ArrayList<RecognitionException>();
  public List<RecognitionException> getExceptions() { return exceptions; }
  public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
}

program
  : primary* EOF
  ;    

primary returns [Primary primary]
  : WHITESPACE? 
    ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
    | NUMBER {primary = new Number($NUMBER.text, $NUMBER.line);} 
    | symbol_constant {primary = $symbol_constant.symbolConstant;}
    | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);} 
    | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
    | array_constant {primary = $array_constant.arrayConstant; }
    | block {primary = $block.block;}
    | '(' expression WHITESPACE? ')'
    ) 
  ;

statements returns [Statements statements]
  : non_empty_statements? { statements = $non_empty_statements.nonEmptyStatements; }
  ;

non_empty_statements returns [Statements statements]
  : WHITESPACE? a='^'  expression '.' {statements = new AnswerStatements($a.line, $expression.expression);}
  ;

expression returns [Expression expression]
  :  WHITESPACE? IDENTIFIER WHITESPACE? ':=' e=expression {expression = new AssignmentExpression($IDENTIFIER.text, $IDENTIFIER.line, $e.expression);}
  | simple_expression {expression = $simple_expression.simpleExpression;}
  ;

simple_expression returns [SimpleExpression simpleExpression]
  @init { simpleExpression = new SimpleExpression(); }
  : primary {simpleExpression.add($primary.primary);}
  ;

block returns [Block block]
  : o= '[' WHITESPACE? block_arguments? WHITESPACE? temporaries? ']' {block = new Block($o.line, $block_arguments.blockArguments, $temporaries.temporaries);}
  ;

temporaries returns [List<Identifier> temporaries]
  @init { temporaries = new ArrayList<Identifier>(); }
  : ('|' | '||' | '|' WHITESPACE? '|')  WHITESPACE? (IDENTIFIER WHITESPACE? {temporaries.add(new Identifier($IDENTIFIER.text, $IDENTIFIER.line));})+ '|' WHITESPACE?
  ;

block_arguments returns [List<BlockArgument> blockArguments]
  @init { blockArguments = new ArrayList<BlockArgument>(); }
  : (BLOCK_ARGUMENT WHITESPACE? {blockArguments.add(new BlockArgument($BLOCK_ARGUMENT.text.substring(1), $BLOCK_ARGUMENT.line));})+ '|'? WHITESPACE?
  ;
    
array_constant returns [ArrayConstant arrayConstant]
  : h='#' array {arrayConstant = new ArrayConstant($array.array, $h.line);}
  ;

array returns [Array array]
  @init { array = new Array(); }
  : '(' (array_element {array.add($array_element.arrayElement);})* ')'
  ;

array_element returns [ArrayElement arrayElement]
  : WHITESPACE
  | NUMBER{arrayElement = new Number($NUMBER.text, $NUMBER.line);}
  | symbol {arrayElement = $symbol.symbol;}
  | STRING {arrayElement = new StringConstant($STRING.text, $STRING.line);}
  | CHARACTER_CONSTANT {arrayElement = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);} 
  | array {arrayElement = $array.array;}
  ;

symbol_constant returns [SymbolConstant symbolConstant]
  : '#' symbol {symbolConstant = new SymbolConstant($symbol.symbol.value(), $symbol.symbol.line());}
  ;

symbol returns [Symbol symbol]
  @init { symbol = new Symbol(); }
  :  IDENTIFIER {symbol.valueAndLine($IDENTIFIER.text, $IDENTIFIER.line); }
  | BINARY_SELECTOR {symbol.valueAndLine($BINARY_SELECTOR.text, $BINARY_SELECTOR.line);}
  | (KEYWORD {symbol.addValueAndLine($KEYWORD.text, $KEYWORD.line);} )+    // Decision can match input such as "KEYWORD" using multiple alternatives: 1, 2
  ;

WHITESPACE:        (' '|'\t'|'\r'|'\n')+;
COMMENT:        '"' .* '"' {$channel = HIDDEN;};
BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
KEYWORD:        IDENTIFIER ':';
BLOCK_ARGUMENT:    ':' IDENTIFIER;
IDENTIFIER:        LETTER (LETTER | DIGIT)*;
NUMBER:        ((NUMBER_LEFT)? ('-')? DIGITS (NUMBER_RIGHT_P1)? (NUMBER_RIGHT_P2)?);
CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
STRING:        '\'' (~'\''|'\'\'')* '\'';

fragment NUMBER_LEFT:        DIGITS 'r';
fragment NUMBER_RIGHT_P1:    '.' DIGITS;
fragment NUMBER_RIGHT_P2:    'e' ('-')? DIGITS; 
fragment LETTER:        ('a'..'z' | 'A'..'Z');
fragment DIGIT:        '0'..'9';
fragment DIGITS:        DIGIT+;
fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';






 		 	   		  

From jdmitchell at gmail.com  Mon Jan  9 14:54:19 2012
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Mon, 9 Jan 2012 14:54:19 -0800
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
Message-ID: <C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>


On Jan 9, 2012, at 14:45 , Barrie Treloar wrote:
[...]
> Can you provide specifics?
> Since I'm new to both, they both were not obvious with a svn mentality.
> hg definitely didn't stand out as being easier than git.

I think you're the first person coming from svn that I've ever heard say that.

Hg has a command set and lingo that's an easier transition from svn/cvs. Git has a command set that is baroque at best and they use their own whacked definition for terms like "branch" that is wildly different from what branch means in pretty much every other scm.

Hg and Git are comparable on a feature basis.

However, Hg and Git are built with very different philosophies. Git is perfectly happy to allow mutation of history. Hg, on the other hand, is very much against rewriting history (but there are extensions that allow for it when you really do need it, if ever).

Github is definitely better than Bitbucket on many things. Now that Atlassian has bought bitbucket, there's hope that the gap will close.

Have fun,
John


From antlr at mirality.co.nz  Mon Jan  9 16:53:35 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 10 Jan 2012 13:53:35 +1300
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>
Message-ID: <20120110005341.C07DD3418400@www.antlr.org>

At 11:46 10/01/2012, James Ladd wrote:
 >^ 12.
 >
 >I can see that NUMBER has a component of it that can be a '.' 
hence
 >the grammar issue.
 >Is it the start of the decimal part of a number or the end of a
 >statement.

Yes, that's probably the problem.  While generating a NUMBER token 
it's consuming the dot (and then probably suffering a sync error).

 >NUMBER:        ((NUMBER_LEFT)? ('-')? DIGITS (NUMBER_RIGHT_P1)?
 >(NUMBER_RIGHT_P2)?);
[...]
 >fragment NUMBER_LEFT:        DIGITS 'r';
 >fragment NUMBER_RIGHT_P1:    '.' DIGITS;
 >fragment NUMBER_RIGHT_P2:    'e' ('-')? DIGITS;
 >fragment DIGIT:        '0'..'9';
 >fragment DIGITS:        DIGIT+;

Unfortunately v3 lexers are a little too optimistic when faced 
with subrules and */+ sequences -- they tend to only use one-char 
lookahead when they should be using more.  ie. in this case, the 
lexer is deciding between taking the NUMBER_RIGHT_P1 branch or not 
depending on whether the next character is a dot or a not-dot; it 
doesn't look one further ahead to ensure that there's a digit 
afterwards as well, it'll just throw an error while trying to 
match the DIGITS subrule.

You should be able to force the issue by making it explicit:

NUMBER: ((NUMBER_LEFT)? ('-')? DIGITS (('.' DIGIT) => 
NUMBER_RIGHT_P1)? (NUMBER_RIGHT_P2)?);


From james_ladd at hotmail.com  Mon Jan  9 17:05:38 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Tue, 10 Jan 2012 12:05:38 +1100
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>,
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>,
	<SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
Message-ID: <BAY149-W48A8476F45D157BCA50F22ED990@phx.gbl>



Hi Gavin,

Using a syntactic predicate didn't fix the issue for me.
It also has the added down side of not being able to use ANTLRWorks to explore.

A. Is it possible to increase the lookahead for just one lexical token?
B. Would it be better to move NUMBER into a parse rule and then use something like
     { if input.LT(1).getText().equals(??) } to manually consume the rest of NUMBER?

Rgs, James.
 		 	   		  

From parrt at cs.usfca.edu  Mon Jan  9 18:28:38 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 9 Jan 2012 18:28:38 -0800
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CAAfeETo71Vks36389NFeUhZR3tiY+ZQquzoGMiPjjqsszUk=HQ@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CAAfeETo71Vks36389NFeUhZR3tiY+ZQquzoGMiPjjqsszUk=HQ@mail.gmail.com>
Message-ID: <573878E1-C1E6-4BD5-895F-D45BA3F64745@cs.usfca.edu>

On Jan 9, 2012, at 3:39 PM, Kyle Ferrio wrote:
> 
> Hi Ter, et al.
> 
> After sending you (Sorry, Ter, I meant to sent to list, not just you.) my observations on several years' evaluation of features, load-testing and hosting for several of the leading FOSS DVCS tools, I saw Sam Harwell''s note and realized that my experience with Hg must be out of date and that I needed to remedy that.  While I did not make time to stress the current Hg today, I must say they have come a loooong way of late -- particularly on the documentation and support fronts.  Mas kudos to the Hg team.  I am still not a fan of Hg simply because it chooses by design not treat directories as first class objects [1].  

I'll have to investigate to see if that bugs me.

> That said, the right tool for the job depends on the job and who's doing it.  For most of us, it won't matter one bit which DVCS Ter  chooses.  The hosting solution does matter, just because it saves Ter from daily requests for tarballs.  And bitbucket works fine.

yeah and it means better access for you folks.

> [1] This is a serious issue for some shops.  If yours is one of them, you already know it.  See http://hgbook.red-bean.com/read/mercurial-in-daily-use.html -- read the rationalization there, and pay special attention to the comments in the section entitled "Mercurial tracks files, not directories."  

uh oh. is it hard to rename a dir? don't care about empty dirs.  hmm? this seems to work:

hg rename doc docs

Ter


From sam at tunnelvisionlabs.com  Mon Jan  9 20:14:40 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Mon, 9 Jan 2012 22:14:40 -0600
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <573878E1-C1E6-4BD5-895F-D45BA3F64745@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>	<CAAfeETo71Vks36389NFeUhZR3tiY+ZQquzoGMiPjjqsszUk=HQ@mail.gmail.com>
	<573878E1-C1E6-4BD5-895F-D45BA3F64745@cs.usfca.edu>
Message-ID: <07cf01cccf4e$60ae82f0$220b88d0$@tunnelvisionlabs.com>

ANTLR is currently in Perforce which also tracks files only, so it's
something he's already used to working with.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Monday, January 09, 2012 8:29 PM
To: antlr-interest Interest
Subject: Re: [antlr-interest] anybody care to comment on bitbucket.org?

On Jan 9, 2012, at 3:39 PM, Kyle Ferrio wrote:
> 
> Hi Ter, et al.
> 
> After sending you (Sorry, Ter, I meant to sent to list, not just you.) my
observations on several years' evaluation of features, load-testing and
hosting for several of the leading FOSS DVCS tools, I saw Sam Harwell''s
note and realized that my experience with Hg must be out of date and that I
needed to remedy that.  While I did not make time to stress the current Hg
today, I must say they have come a loooong way of late -- particularly on
the documentation and support fronts.  Mas kudos to the Hg team.  I am still
not a fan of Hg simply because it chooses by design not treat directories as
first class objects [1].  

I'll have to investigate to see if that bugs me.

> That said, the right tool for the job depends on the job and who's doing
it.  For most of us, it won't matter one bit which DVCS Ter  chooses.  The
hosting solution does matter, just because it saves Ter from daily requests
for tarballs.  And bitbucket works fine.

yeah and it means better access for you folks.

> [1] This is a serious issue for some shops.  If yours is one of them, you
already know it.  See
http://hgbook.red-bean.com/read/mercurial-in-daily-use.html -- read the
rationalization there, and pay special attention to the comments in the
section entitled "Mercurial tracks files, not directories."  

uh oh. is it hard to rename a dir? don't care about empty dirs.  hmm. this
seems to work:

hg rename doc docs

Ter


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From james_ladd at hotmail.com  Mon Jan  9 21:20:12 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Tue, 10 Jan 2012 16:20:12 +1100
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>,
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>,
	<SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
Message-ID: <BAY149-W285105F5FD8C6893C13CAFED990@phx.gbl>


I fixed this issue with NUMBER by making it a parser rule.  See grammar below.

number returns [Number number]
  : (d1=DIGITS r='r')? (m1='-')? d2=DIGITS ('.' d3=DIGITS)? (e='e' (m2='-')? d4=DIGITS)? {number = new Number($d1.text, $r.text, $m1.text, $d2.text, $d2.line,$d3.text, $e.text, $m2.text, $d4.text);}
  ;

Some numbers I can't parse are "4r1" "2r-3e4" "9e4", and I don't understand why.

There is also an issue parsing '#-' and again i'm not sure why since '#' occurs only in the symbol constant rule.

Any suggestions?  

Rgs, James.


grammar Temp;

options {
  language = Java;
}
@header {
  package st.redline.compiler;
}
@lexer::header {
  package st.redline.compiler;
}
@lexer::members {
  List<RecognitionException> exceptions = new ArrayList<RecognitionException>();
  public List<RecognitionException> getExceptions() { return exceptions; }
  public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
}

program
  : primary* EOF
  ;    

primary returns [Primary primary]
  : WHITESPACE? 
    ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
    | number {primary = $number.number;}
    | symbol_constant {primary = $symbol_constant.symbolConstant;}
    | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);} 
    | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
    | array_constant {primary = $array_constant.arrayConstant; }
    | block {primary = $block.block;}
    | '(' expression WHITESPACE? ')'
    ) 
  ;

statements returns [Statements statements]
  : non_empty_statements? { statements = $non_empty_statements.statements; }
  ;

non_empty_statements returns [Statements statements]
  : WHITESPACE? a='^'  expression '.' {statements = new AnswerStatement($a.line, $expression.expression);}
  ;

expression returns [Expression expression]
  :  WHITESPACE? IDENTIFIER WHITESPACE? ':=' e=expression {expression = new AssignmentExpression($IDENTIFIER.text, $IDENTIFIER.line, $e.expression);}
  | simple_expression {expression = $simple_expression.simpleExpression;}
  ;

simple_expression returns [SimpleExpression simpleExpression]
  @init { simpleExpression = new SimpleExpression(); }
  : primary {simpleExpression.add($primary.primary);}
  ;

block returns [Block block]
  : o= '[' WHITESPACE? block_arguments? WHITESPACE? temporaries? ']' {block = new Block($o.line, $block_arguments.blockArguments, $temporaries.temporaries);}
  ;

temporaries returns [List<Identifier> temporaries]
  @init { temporaries = new ArrayList<Identifier>(); }
  : ('|' | '||' | '|' WHITESPACE? '|')  WHITESPACE? (IDENTIFIER WHITESPACE? {temporaries.add(new Identifier($IDENTIFIER.text, $IDENTIFIER.line));})+ '|' WHITESPACE?
  ;

block_arguments returns [List<BlockArgument> blockArguments]
  @init { blockArguments = new ArrayList<BlockArgument>(); }
  : (BLOCK_ARGUMENT WHITESPACE? {blockArguments.add(new BlockArgument($BLOCK_ARGUMENT.text.substring(1), $BLOCK_ARGUMENT.line));})+ '|'? WHITESPACE?
  ;
    
array_constant returns [ArrayConstant arrayConstant]
  : h='#' array {arrayConstant = new ArrayConstant($array.array, $h.line);}
  ;

array returns [Array array]
  @init { array = new Array(); }
  : '(' (array_element {array.add($array_element.arrayElement);})* ')'
  ;

array_element returns [ArrayElement arrayElement]
  : WHITESPACE
  | number {arrayElement = $number.number;}
  | symbol {arrayElement = $symbol.symbol;}
  | STRING {arrayElement = new StringConstant($STRING.text, $STRING.line);}
  | CHARACTER_CONSTANT {arrayElement = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);} 
  | array {arrayElement = $array.array;}
  ;

symbol_constant returns [SymbolConstant symbolConstant]
  : '#' symbol {symbolConstant = new SymbolConstant($symbol.symbol.value(), $symbol.symbol.line());}
  ;

symbol returns [Symbol symbol]
  @init { symbol = new Symbol(); }
  :  BINARY_SELECTOR {symbol.valueAndLine($BINARY_SELECTOR.text, $BINARY_SELECTOR.line);}
  | IDENTIFIER {symbol.valueAndLine($IDENTIFIER.text, $IDENTIFIER.line); }
  | (KEYWORD {symbol.addValueAndLine($KEYWORD.text, $KEYWORD.line);} )+    // Decision can match input such as "KEYWORD" using multiple alternatives: 1, 2
  ;

number returns [Number number]
  : (d1=DIGITS r='r')? (m1='-')? d2=DIGITS ('.' d3=DIGITS)? (e='e' (m2='-')? d4=DIGITS)? {number = new Number($d1.text, $r.text, $m1.text, $d2.text, $d2.line,$d3.text, $e.text, $m2.text, $d4.text);}
  ;
    
WHITESPACE:        (' '|'\t'|'\r'|'\n')+;
COMMENT:        '"' .* '"' {$channel = HIDDEN;};
BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
KEYWORD:        IDENTIFIER ':';
BLOCK_ARGUMENT:    ':' IDENTIFIER;
IDENTIFIER:        LETTER (LETTER | DIGIT)*;
CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
STRING:        '\'' (~'\''|'\'\'')* '\'';
DIGITS:        DIGIT+;

fragment LETTER:        ('a'..'z' | 'A'..'Z');
fragment DIGIT:        '0'..'9';
fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';

*end*
 		 	   		  

From rgildea at gmail.com  Tue Jan 10 00:01:58 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Tue, 10 Jan 2012 00:01:58 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
Message-ID: <CACCG97EM5k0HaygLnG8o4TfvEGYHtFYTP9PQjVUCj3s4CNUK=Q@mail.gmail.com>

Hi,

Could you possibly give more details about the modifications you made? I
found it was possible to remove the user1, user2, user3 fields and the
custom function pointer with only minimal changes in other source files.
This gave approximately a 10 percent reduction in memory usage. Removing
function pointers looks to be a lot more involved to me.

Cheers,

Richard

On 23 December 2011 19:09, A Z <asicaddress at gmail.com> wrote:

> Hi Richard,
>
>   I see about 140:1 for the ratio of memory use to input size on a 64-bit
> system. This is after I hacked commontoken to remove most of the function
> pointers, which halved the size of the tokens. I didn't investigate any
> further as I recall an email thread about ANTLR 4 indicating it would use
> 8-byte tokens instead of the 200+ byte tokens 3.4 uses.
>
>
> Looks like it may only be for C#.
> http://markmail.org/message/eggfcjt3a6qdzkvc
>
> Ad
>
>
> On Fri, Dec 23, 2011 at 10:00 AM, Richard Gildea <rgildea at gmail.com>wrote:
>
>> Hi,
>>
>> We have been successfully using antlr in the form of the C target for some
>> time, however we have recently noticed that the memory consumption can be
>> quite large - up to 150 times the size of the input file. Is this factor
>> of
>> ~150 to be expected, or does it indicate that we may be doing something
>> wrong? For the vast majority of possible inputs this does not cause a
>> problem, however some input files can be as large as 0.5 Gb, giving a peak
>> memory usage of 75 Gb - not exactly feasible on most machines!
>>
>> Does anyone have any examples of using a custom lexer that provides a
>> token
>> buffer rather than storing all tokens in memory?
>>
>> Cheers,
>>
>> Richard
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From serefarikan at kurumsalteknoloji.com  Tue Jan 10 02:03:10 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Tue, 10 Jan 2012 10:03:10 +0000
Subject: [antlr-interest] Why does the unused rule effect parser behaviour?
Message-ID: <CA+4ThdqfD4fTRYuPqo3v8x4_jDL7FsJfx-=6Xrvj_J0JxeoTtA@mail.gmail.com>

Greetings,
The simple grammar below should be able to parse simple input: aa
When id_char_minus_t is commented out it can. When it is included in the
grammar, even if it is not used at all, it can't.

I really don't understand what is going on here. Even more weird thing is:
when id_char_minus_t is included, it can parse input: dd
I'm clearly lost here, so I would really appreciate the input. Why is Anltr
doing this?

grammar RecursionTests;


rul    :  alphanumeric* ;

//Identifier = {LetterMinusA}{IdCharMinusT}?{IdChar}* |
'a''t'?(({letter}|'_')*|{LetterMinusT}{Alphanumeric}*)
/*

identifier
    :    ( letter_minus_a (letter_minus_t)? (id_char)* )
    |     ( 'a' ('t')? ( ( (Letter_lowercase | Letter_uppercase |
Underscore)* ) | (letter_minus_t (alphanumeric)*) ))
    ;
*/

letter_minus_a
    :    {input.LT(1).getText().contains("a") == false &&
input.LT(1).getText().contains("A") == false}?(Letter_lowercase |
Letter_uppercase)
    ;


letter_minus_t
    :    {input.LT(1).getText().contains("t") == false &&
input.LT(1).getText().contains("T") == false}?(Letter_lowercase |
Letter_uppercase)
    ;


id_char_minus_t
    :    'a'..'s'| 'u'..'z' | 'A'..'S' | 'U'..'Z' | Digit | '_'
    ;


letter_or_underscore
    :    Letter_lowercase | Letter_uppercase | Underscore
    ;

id_char
    : Letter_lowercase | Letter_uppercase | Digit | Underscore
    ;


alphanumeric
    :    Letter_lowercase | Letter_uppercase | Digit
    ;


Digit
    :    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
    ;

Letter_uppercase
    :    'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' |
'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'
| 'Y' | 'Z'
    ;

Letter_lowercase
    :    'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' |
'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'
| 'y' | 'z'
    ;

Underscore
    :    '_'
    ;

From serefarikan at kurumsalteknoloji.com  Tue Jan 10 02:59:27 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Tue, 10 Jan 2012 10:59:27 +0000
Subject: [antlr-interest] Why does the unused rule effect parser
	behaviour?
In-Reply-To: <CA+4ThdqfD4fTRYuPqo3v8x4_jDL7FsJfx-=6Xrvj_J0JxeoTtA@mail.gmail.com>
References: <CA+4ThdqfD4fTRYuPqo3v8x4_jDL7FsJfx-=6Xrvj_J0JxeoTtA@mail.gmail.com>
Message-ID: <CA+4ThdpaWPgayJgMTUtoDvhfHKB69O8uDnC=zKY1WjNXS0avUw@mail.gmail.com>

Ok, for anyone else who encounters the same thing:
When I use characters directly in parser rules such as 'a', they end up as
tokens. Even though 'a' is a character that is normally covered by lower
case token, it exists on its own, and parser matches it, providing an
unexpected token type for the rule that is trying to use lower case token.
Lesson learned: do not use characters in parser rules, use tokens..

Regards
Seref


On Tue, Jan 10, 2012 at 10:03 AM, Seref Arikan <
serefarikan at kurumsalteknoloji.com> wrote:

> Greetings,
> The simple grammar below should be able to parse simple input: aa
> When id_char_minus_t is commented out it can. When it is included in the
> grammar, even if it is not used at all, it can't.
>
> I really don't understand what is going on here. Even more weird thing is:
> when id_char_minus_t is included, it can parse input: dd
> I'm clearly lost here, so I would really appreciate the input. Why is
> Anltr doing this?
>
> grammar RecursionTests;
>
>
> rul    :  alphanumeric* ;
>
> //Identifier = {LetterMinusA}{IdCharMinusT}?{IdChar}* |
> 'a''t'?(({letter}|'_')*|{LetterMinusT}{Alphanumeric}*)
> /*
>
> identifier
>     :    ( letter_minus_a (letter_minus_t)? (id_char)* )
>     |     ( 'a' ('t')? ( ( (Letter_lowercase | Letter_uppercase |
> Underscore)* ) | (letter_minus_t (alphanumeric)*) ))
>     ;
> */
>
> letter_minus_a
>     :    {input.LT(1).getText().contains("a") == false &&
> input.LT(1).getText().contains("A") == false}?(Letter_lowercase |
> Letter_uppercase)
>     ;
>
>
> letter_minus_t
>     :    {input.LT(1).getText().contains("t") == false &&
> input.LT(1).getText().contains("T") == false}?(Letter_lowercase |
> Letter_uppercase)
>     ;
>
>
> id_char_minus_t
>     :    'a'..'s'| 'u'..'z' | 'A'..'S' | 'U'..'Z' | Digit | '_'
>     ;
>
>
> letter_or_underscore
>     :    Letter_lowercase | Letter_uppercase | Underscore
>     ;
>
> id_char
>     : Letter_lowercase | Letter_uppercase | Digit | Underscore
>     ;
>
>
> alphanumeric
>     :    Letter_lowercase | Letter_uppercase | Digit
>     ;
>
>
> Digit
>     :    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
>     ;
>
> Letter_uppercase
>     :    'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' |
> 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'
> | 'Y' | 'Z'
>     ;
>
> Letter_lowercase
>     :    'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' |
> 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x'
> | 'y' | 'z'
>     ;
>
> Underscore
>     :    '_'
>     ;
>
>
>
>
>

From antlr at mirality.co.nz  Tue Jan 10 03:41:20 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 11 Jan 2012 00:41:20 +1300
Subject: [antlr-interest] Why does the unused rule effect parser
 behaviour?
In-Reply-To: <CA+4ThdpaWPgayJgMTUtoDvhfHKB69O8uDnC=zKY1WjNXS0avUw@mail.g
	mail.com>
References: <CA+4ThdqfD4fTRYuPqo3v8x4_jDL7FsJfx-=6Xrvj_J0JxeoTtA@mail.gmail.com>
	<CA+4ThdpaWPgayJgMTUtoDvhfHKB69O8uDnC=zKY1WjNXS0avUw@mail.gmail.com>
Message-ID: <20120110114122.98AA8341852D@www.antlr.org>

At 23:59 10/01/2012, Seref Arikan wrote:
 >Ok, for anyone else who encounters the same thing:
 >When I use characters directly in parser rules such as 'a', they 

 >end up as tokens. Even though 'a' is a character that is 
normally
 >covered by lower case token, it exists on its own, and parser
 >matches it, providing an unexpected token type for the rule that 

 >is trying to use lower case token.
 >Lesson learned: do not use characters in parser rules, use
 >tokens..

Yep.  And never use token ranges, either, since it will match on 
the numeric value of the tokens, which aren't guaranteed to be in 
any particular order or to remain in that order.


I actually consider the literal token thing in parser rules to be 
a misfeature -- it's a little tidier for toy grammars but for 
anything serious (eg. anything that wants decent error messages) 
it's more harmful than helpful, and it's far too easy to get 
things wrong, as you discovered.


From antlr at mirality.co.nz  Tue Jan 10 04:13:00 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 11 Jan 2012 01:13:00 +1300
Subject: [antlr-interest] Why does the unused rule effect parser
 behaviour?
In-Reply-To: <CA+4ThdrUpJAswJsfSZK3d5R2xJvC8o9_VrMuQCiOVvZp2-=7gQ@mail.g
	mail.com>
References: <CA+4ThdqfD4fTRYuPqo3v8x4_jDL7FsJfx-=6Xrvj_J0JxeoTtA@mail.gmail.com>
	<CA+4ThdpaWPgayJgMTUtoDvhfHKB69O8uDnC=zKY1WjNXS0avUw@mail.gmail.com>
	<4f0c23e2.619dec0a.2aa4.61abSMTPIN_ADDED@mx.google.com>
	<CA+4ThdrUpJAswJsfSZK3d5R2xJvC8o9_VrMuQCiOVvZp2-=7gQ@mail.gmail.com>
Message-ID: <20120110121300.3179F3418043@www.antlr.org>

At 00:45 11/01/2012, Seref Arikan wrote:
>Thanks, very useful advice regarding token ranges. Is that the 
>reason for the trouble others when through in their grammars 
>(such as SQL grammar) to list each and every char? (or is one of 
>the reasons?)

Possibly, although another common reason is for case 
insensitivity.

The general rule of thumb I use (since most grammars have a 
skip-whitespace rule) is that anything which cares about 
whitespace must be a lexer rule, while anything that doesn't care 
must be a parser rule (eg: "14 .05" should normally be parsed as 
two separate numbers -- the space is significant, thus the 
single-number rule must be a lexer rule).  Similarly, anything 
that deals with large ranges of characters should be a lexer 
rule.  There are a few exceptions to this, of course, but it 
covers the majority.


From jbb at acm.org  Tue Jan 10 08:01:39 2012
From: jbb at acm.org (John B. Brodie)
Date: Tue, 10 Jan 2012 11:01:39 -0500
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <BAY149-W285105F5FD8C6893C13CAFED990@phx.gbl>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>,
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>,
	<SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
	<BAY149-W285105F5FD8C6893C13CAFED990@phx.gbl>
Message-ID: <4F0C60E3.5090105@acm.org>

Greetings!

On 01/10/2012 12:20 AM, James Ladd wrote:
> I fixed this issue with NUMBER by making it a parser rule.  See grammar below.

are comments permitted to be embedded inside your numbers?
by making this a parser rule something like 123"comment"."another"456 
will be parsed as a number.

> number returns [Number number]
>    : (d1=DIGITS r='r')? (m1='-')? d2=DIGITS ('.' d3=DIGITS)? (e='e' (m2='-')? d4=DIGITS)? {number = new Number($d1.text, $r.text, $m1.text, $d2.text, $d2.line,$d3.text, $e.text, $m2.text, $d4.text);}
>    ;
>
> Some numbers I can't parse are "4r1" "2r-3e4" "9e4", and I don't understand why.

i think the r1 in the first example is being lexed as an IDENTIFIER and 
likewise for the e4's in the other two examples.

you might try to dump out the token stream between your lexing and 
parsing phases and see if the stream contains what you expect.

>
> There is also an issue parsing '#-' and again i'm not sure why since '#' occurs only in the symbol constant rule.
'#' is also in the array_constant rule, but i do not think that is 
relevant to this particular problem.

you have a '-' in your number parsing rule and '-' in your 
BINARY_SELECTOR lexing rule and of course these are not the same tokens.

again dumping the token stream will probably point out the issue...


>
> Any suggestions?

all of the above is just speculation since you did not supply a grammar 
that i could actually run in order to reproduce your problem. hope this 
helps anyway...

>
> Rgs, James.
>
>
> grammar Temp;
>
> options {
>    language = Java;
> }
> @header {
>    package st.redline.compiler;
> }
> @lexer::header {
>    package st.redline.compiler;
> }
> @lexer::members {
>    List<RecognitionException>  exceptions = new ArrayList<RecognitionException>();
>    public List<RecognitionException>  getExceptions() { return exceptions; }
>    public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
> }
>
> program
>    : primary* EOF
>    ;
>
> primary returns [Primary primary]
>    : WHITESPACE?
>      ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
>      | number {primary = $number.number;}
>      | symbol_constant {primary = $symbol_constant.symbolConstant;}
>      | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);}
>      | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
>      | array_constant {primary = $array_constant.arrayConstant; }
>      | block {primary = $block.block;}
>      | '(' expression WHITESPACE? ')'
>      )
>    ;
>
> statements returns [Statements statements]
>    : non_empty_statements? { statements = $non_empty_statements.statements; }
>    ;
>
> non_empty_statements returns [Statements statements]
>    : WHITESPACE? a='^'  expression '.' {statements = new AnswerStatement($a.line, $expression.expression);}
>    ;
>
> expression returns [Expression expression]
>    :  WHITESPACE? IDENTIFIER WHITESPACE? ':=' e=expression {expression = new AssignmentExpression($IDENTIFIER.text, $IDENTIFIER.line, $e.expression);}
>    | simple_expression {expression = $simple_expression.simpleExpression;}
>    ;
>
> simple_expression returns [SimpleExpression simpleExpression]
>    @init { simpleExpression = new SimpleExpression(); }
>    : primary {simpleExpression.add($primary.primary);}
>    ;
>
> block returns [Block block]
>    : o= '[' WHITESPACE? block_arguments? WHITESPACE? temporaries? ']' {block = new Block($o.line, $block_arguments.blockArguments, $temporaries.temporaries);}
>    ;
>
> temporaries returns [List<Identifier>  temporaries]
>    @init { temporaries = new ArrayList<Identifier>(); }
>    : ('|' | '||' | '|' WHITESPACE? '|')  WHITESPACE? (IDENTIFIER WHITESPACE? {temporaries.add(new Identifier($IDENTIFIER.text, $IDENTIFIER.line));})+ '|' WHITESPACE?
>    ;
>
> block_arguments returns [List<BlockArgument>  blockArguments]
>    @init { blockArguments = new ArrayList<BlockArgument>(); }
>    : (BLOCK_ARGUMENT WHITESPACE? {blockArguments.add(new BlockArgument($BLOCK_ARGUMENT.text.substring(1), $BLOCK_ARGUMENT.line));})+ '|'? WHITESPACE?
>    ;
>
> array_constant returns [ArrayConstant arrayConstant]
>    : h='#' array {arrayConstant = new ArrayConstant($array.array, $h.line);}
>    ;
>
> array returns [Array array]
>    @init { array = new Array(); }
>    : '(' (array_element {array.add($array_element.arrayElement);})* ')'
>    ;
>
> array_element returns [ArrayElement arrayElement]
>    : WHITESPACE
>    | number {arrayElement = $number.number;}
>    | symbol {arrayElement = $symbol.symbol;}
>    | STRING {arrayElement = new StringConstant($STRING.text, $STRING.line);}
>    | CHARACTER_CONSTANT {arrayElement = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);}
>    | array {arrayElement = $array.array;}
>    ;
>
> symbol_constant returns [SymbolConstant symbolConstant]
>    : '#' symbol {symbolConstant = new SymbolConstant($symbol.symbol.value(), $symbol.symbol.line());}
>    ;
>
> symbol returns [Symbol symbol]
>    @init { symbol = new Symbol(); }
>    :  BINARY_SELECTOR {symbol.valueAndLine($BINARY_SELECTOR.text, $BINARY_SELECTOR.line);}
>    | IDENTIFIER {symbol.valueAndLine($IDENTIFIER.text, $IDENTIFIER.line); }
>    | (KEYWORD {symbol.addValueAndLine($KEYWORD.text, $KEYWORD.line);} )+    // Decision can match input such as "KEYWORD" using multiple alternatives: 1, 2
>    ;
>
> number returns [Number number]
>    : (d1=DIGITS r='r')? (m1='-')? d2=DIGITS ('.' d3=DIGITS)? (e='e' (m2='-')? d4=DIGITS)? {number = new Number($d1.text, $r.text, $m1.text, $d2.text, $d2.line,$d3.text, $e.text, $m2.text, $d4.text);}
>    ;
>
> WHITESPACE:        (' '|'\t'|'\r'|'\n')+;
> COMMENT:        '"' .* '"' {$channel = HIDDEN;};
> BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
> KEYWORD:        IDENTIFIER ':';
> BLOCK_ARGUMENT:    ':' IDENTIFIER;
> IDENTIFIER:        LETTER (LETTER | DIGIT)*;
> CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
> STRING:        '\'' (~'\''|'\'\'')* '\'';
> DIGITS:        DIGIT+;
>
> fragment LETTER:        ('a'..'z' | 'A'..'Z');
> fragment DIGIT:        '0'..'9';
> fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
> fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';
>
> *end*
>   		 	   		
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From asicaddress at gmail.com  Tue Jan 10 08:07:46 2012
From: asicaddress at gmail.com (A Z)
Date: Tue, 10 Jan 2012 22:07:46 +0600
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CACCG97EM5k0HaygLnG8o4TfvEGYHtFYTP9PQjVUCj3s4CNUK=Q@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
	<CACCG97EM5k0HaygLnG8o4TfvEGYHtFYTP9PQjVUCj3s4CNUK=Q@mail.gmail.com>
Message-ID: <CAP86aOdSDDf5H1cScUxpZZtTB4CiDy0ykYJsdYLLLLDmuo+4Gg@mail.gmail.com>

Here are all the changes I made. IIRC, the setText/getText functions have
many dependencies so it wasn't as easy to do a search and replace to change
those. The startIndex/stopIndex functions are used by the generated code so
I left those alone.


On Tue, Jan 10, 2012 at 2:01 PM, Richard Gildea <rgildea at gmail.com> wrote:

> Hi,
>
> Could you possibly give more details about the modifications you made? I
> found it was possible to remove the user1, user2, user3 fields and the
> custom function pointer with only minimal changes in other source files.
> This gave approximately a 10 percent reduction in memory usage. Removing
> function pointers looks to be a lot more involved to me.
>
> Cheers,
>
> Richard
>
>
> On 23 December 2011 19:09, A Z <asicaddress at gmail.com> wrote:
>
>> Hi Richard,
>>
>>   I see about 140:1 for the ratio of memory use to input size on a 64-bit
>> system. This is after I hacked commontoken to remove most of the function
>> pointers, which halved the size of the tokens. I didn't investigate any
>> further as I recall an email thread about ANTLR 4 indicating it would use
>> 8-byte tokens instead of the 200+ byte tokens 3.4 uses.
>>
>>
>> Looks like it may only be for C#.
>> http://markmail.org/message/eggfcjt3a6qdzkvc
>>
>> Ad
>>
>>
>> On Fri, Dec 23, 2011 at 10:00 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>
>>> Hi,
>>>
>>> We have been successfully using antlr in the form of the C target for
>>> some
>>> time, however we have recently noticed that the memory consumption can be
>>> quite large - up to 150 times the size of the input file. Is this factor
>>> of
>>> ~150 to be expected, or does it indicate that we may be doing something
>>> wrong? For the vast majority of possible inputs this does not cause a
>>> problem, however some input files can be as large as 0.5 Gb, giving a
>>> peak
>>> memory usage of 75 Gb - not exactly feasible on most machines!
>>>
>>> Does anyone have any examples of using a custom lexer that provides a
>>> token
>>> buffer rather than storing all tokens in memory?
>>>
>>> Cheers,
>>>
>>> Richard
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smallToken.tar.gz
Type: application/x-gzip
Size: 53641 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20120110/4bdfccb5/attachment.gz 

From kferrio at gmail.com  Tue Jan 10 11:16:10 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Tue, 10 Jan 2012 12:16:10 -0700
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CAAfeETqN3TTcYhn_rxQMOT3R2O2xF=JUTagXqFm8dftOodO4+A@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CAAfeETo71Vks36389NFeUhZR3tiY+ZQquzoGMiPjjqsszUk=HQ@mail.gmail.com>
	<573878E1-C1E6-4BD5-895F-D45BA3F64745@cs.usfca.edu>
	<CAAfeETpVao9z4_Ve-G49P_4+89mkzmwidP-YFXtO3-x-5QxB+Q@mail.gmail.com>
	<F926C03B-DB98-4CAF-8FBA-EA8B56D35106@cs.usfca.edu>
	<CAAfeETqN3TTcYhn_rxQMOT3R2O2xF=JUTagXqFm8dftOodO4+A@mail.gmail.com>
Message-ID: <CAAfeETq9UmDCsf965jrCGqxLfU=tvuS6T+cuOXFGNdWPm+6c6Q@mail.gmail.com>

Just a thought...

One thing which is cool about gitnuh -- and maybe bitbucket has this or
will soon? -- is gists.  For those who don;t know, a gist at github is a
versioned snippet of code.  It's just a repo, but they've made it crazy
easy for cutting and pasting snippets to share -- like versioned pastebin
without all the ads.  Something like this might actually be a good way to
share single-file things like (most of) the contributed grammars currently
accessible on antlr.org.

Anyway, just a thought.

From james_ladd at hotmail.com  Tue Jan 10 13:39:52 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Wed, 11 Jan 2012 08:39:52 +1100
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <4F0C60E3.5090105@acm.org>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>,
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>,
	<SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
	<BAY149-W285105F5FD8C6893C13CAFED990@phx.gbl>,
	<4F0C60E3.5090105@acm.org>
Message-ID: <BAY149-W4178E7A7C5D1E273A1EDD8ED990@phx.gbl>


>> All of the above is just speculation since you did not supply a grammar 
> that i could actually run 

Huh - the grammar is a cut-n-paste from ANTLRWorks where I use the built in 
interpreter to run it. Is there another format that you want it in?

Also - I appreciate the detailed response on why the grammar has issues, however
I'm not sure how to fix them, please can you suggest?

Rgs, James.

> Date: Tue, 10 Jan 2012 11:01:39 -0500
> From: jbb at acm.org
> To: james_ladd at hotmail.com
> CC: antlr at mirality.co.nz; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Why does antlr not know alternative?
> 
> Greetings!
> 
> On 01/10/2012 12:20 AM, James Ladd wrote:
> > I fixed this issue with NUMBER by making it a parser rule.  See grammar below.
> 
> are comments permitted to be embedded inside your numbers?
> by making this a parser rule something like 123"comment"."another"456 
> will be parsed as a number.
> 
> > number returns [Number number]
> >    : (d1=DIGITS r='r')? (m1='-')? d2=DIGITS ('.' d3=DIGITS)? (e='e' (m2='-')? d4=DIGITS)? {number = new Number($d1.text, $r.text, $m1.text, $d2.text, $d2.line,$d3.text, $e.text, $m2.text, $d4.text);}
> >    ;
> >
> > Some numbers I can't parse are "4r1" "2r-3e4" "9e4", and I don't understand why.
> 
> i think the r1 in the first example is being lexed as an IDENTIFIER and 
> likewise for the e4's in the other two examples.
> 
> you might try to dump out the token stream between your lexing and 
> parsing phases and see if the stream contains what you expect.
> 
> >
> > There is also an issue parsing '#-' and again i'm not sure why since '#' occurs only in the symbol constant rule.
> '#' is also in the array_constant rule, but i do not think that is 
> relevant to this particular problem.
> 
> you have a '-' in your number parsing rule and '-' in your 
> BINARY_SELECTOR lexing rule and of course these are not the same tokens.
> 
> again dumping the token stream will probably point out the issue...
> 
> 
> >
> > Any suggestions?
> 
> all of the above is just speculation since you did not supply a grammar 
> that i could actually run in order to reproduce your problem. hope this 
> helps anyway...
> 
> >
> > Rgs, James.
> >
> >
> > grammar Temp;
> >
> > options {
> >    language = Java;
> > }
> > @header {
> >    package st.redline.compiler;
> > }
> > @lexer::header {
> >    package st.redline.compiler;
> > }
> > @lexer::members {
> >    List<RecognitionException>  exceptions = new ArrayList<RecognitionException>();
> >    public List<RecognitionException>  getExceptions() { return exceptions; }
> >    public void reportError(RecognitionException e) { super.reportError(e); exceptions.add(e); }
> > }
> >
> > program
> >    : primary* EOF
> >    ;
> >
> > primary returns [Primary primary]
> >    : WHITESPACE?
> >      ( IDENTIFIER {primary = new Identifier($IDENTIFIER.text, $IDENTIFIER.line);}
> >      | number {primary = $number.number;}
> >      | symbol_constant {primary = $symbol_constant.symbolConstant;}
> >      | CHARACTER_CONSTANT {primary = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);}
> >      | STRING {primary = new StringConstant($STRING.text, $STRING.line);}
> >      | array_constant {primary = $array_constant.arrayConstant; }
> >      | block {primary = $block.block;}
> >      | '(' expression WHITESPACE? ')'
> >      )
> >    ;
> >
> > statements returns [Statements statements]
> >    : non_empty_statements? { statements = $non_empty_statements.statements; }
> >    ;
> >
> > non_empty_statements returns [Statements statements]
> >    : WHITESPACE? a='^'  expression '.' {statements = new AnswerStatement($a.line, $expression.expression);}
> >    ;
> >
> > expression returns [Expression expression]
> >    :  WHITESPACE? IDENTIFIER WHITESPACE? ':=' e=expression {expression = new AssignmentExpression($IDENTIFIER.text, $IDENTIFIER.line, $e.expression);}
> >    | simple_expression {expression = $simple_expression.simpleExpression;}
> >    ;
> >
> > simple_expression returns [SimpleExpression simpleExpression]
> >    @init { simpleExpression = new SimpleExpression(); }
> >    : primary {simpleExpression.add($primary.primary);}
> >    ;
> >
> > block returns [Block block]
> >    : o= '[' WHITESPACE? block_arguments? WHITESPACE? temporaries? ']' {block = new Block($o.line, $block_arguments.blockArguments, $temporaries.temporaries);}
> >    ;
> >
> > temporaries returns [List<Identifier>  temporaries]
> >    @init { temporaries = new ArrayList<Identifier>(); }
> >    : ('|' | '||' | '|' WHITESPACE? '|')  WHITESPACE? (IDENTIFIER WHITESPACE? {temporaries.add(new Identifier($IDENTIFIER.text, $IDENTIFIER.line));})+ '|' WHITESPACE?
> >    ;
> >
> > block_arguments returns [List<BlockArgument>  blockArguments]
> >    @init { blockArguments = new ArrayList<BlockArgument>(); }
> >    : (BLOCK_ARGUMENT WHITESPACE? {blockArguments.add(new BlockArgument($BLOCK_ARGUMENT.text.substring(1), $BLOCK_ARGUMENT.line));})+ '|'? WHITESPACE?
> >    ;
> >
> > array_constant returns [ArrayConstant arrayConstant]
> >    : h='#' array {arrayConstant = new ArrayConstant($array.array, $h.line);}
> >    ;
> >
> > array returns [Array array]
> >    @init { array = new Array(); }
> >    : '(' (array_element {array.add($array_element.arrayElement);})* ')'
> >    ;
> >
> > array_element returns [ArrayElement arrayElement]
> >    : WHITESPACE
> >    | number {arrayElement = $number.number;}
> >    | symbol {arrayElement = $symbol.symbol;}
> >    | STRING {arrayElement = new StringConstant($STRING.text, $STRING.line);}
> >    | CHARACTER_CONSTANT {arrayElement = new CharacterConstant($CHARACTER_CONSTANT.text.substring(1), $CHARACTER_CONSTANT.line);}
> >    | array {arrayElement = $array.array;}
> >    ;
> >
> > symbol_constant returns [SymbolConstant symbolConstant]
> >    : '#' symbol {symbolConstant = new SymbolConstant($symbol.symbol.value(), $symbol.symbol.line());}
> >    ;
> >
> > symbol returns [Symbol symbol]
> >    @init { symbol = new Symbol(); }
> >    :  BINARY_SELECTOR {symbol.valueAndLine($BINARY_SELECTOR.text, $BINARY_SELECTOR.line);}
> >    | IDENTIFIER {symbol.valueAndLine($IDENTIFIER.text, $IDENTIFIER.line); }
> >    | (KEYWORD {symbol.addValueAndLine($KEYWORD.text, $KEYWORD.line);} )+    // Decision can match input such as "KEYWORD" using multiple alternatives: 1, 2
> >    ;
> >
> > number returns [Number number]
> >    : (d1=DIGITS r='r')? (m1='-')? d2=DIGITS ('.' d3=DIGITS)? (e='e' (m2='-')? d4=DIGITS)? {number = new Number($d1.text, $r.text, $m1.text, $d2.text, $d2.line,$d3.text, $e.text, $m2.text, $d4.text);}
> >    ;
> >
> > WHITESPACE:        (' '|'\t'|'\r'|'\n')+;
> > COMMENT:        '"' .* '"' {$channel = HIDDEN;};
> > BINARY_SELECTOR:    ('-' (SPECIAL_CHAR)?) | (SPECIAL_CHAR)+;
> > KEYWORD:        IDENTIFIER ':';
> > BLOCK_ARGUMENT:    ':' IDENTIFIER;
> > IDENTIFIER:        LETTER (LETTER | DIGIT)*;
> > CHARACTER_CONSTANT:    '$' ('\'' | '"' | SPECIAL_CHAR | NORMAL_CHAR | DIGIT | LETTER);
> > STRING:        '\'' (~'\''|'\'\'')* '\'';
> > DIGITS:        DIGIT+;
> >
> > fragment LETTER:        ('a'..'z' | 'A'..'Z');
> > fragment DIGIT:        '0'..'9';
> > fragment SPECIAL_CHAR:        '+'|'/'|'\\'|'*'|'~'|'<'|'>'|'='|'@'|'%'|'|'|'&'|'?'|'!'|',';
> > fragment NORMAL_CHAR:        '['|']'|'{'|'}'|'('|')'|'^'|'_'|';'|'$'|'#'|':'|'.'|'\'';
> >
> > *end*
> >   		 	   		
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
 		 	   		  

From james_ladd at hotmail.com  Tue Jan 10 13:52:27 2012
From: james_ladd at hotmail.com (James Ladd)
Date: Wed, 11 Jan 2012 08:52:27 +1100
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <4F0C60E3.5090105@acm.org>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>,
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>,
	<SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
	<BAY149-W285105F5FD8C6893C13CAFED990@phx.gbl>,
	<4F0C60E3.5090105@acm.org>
Message-ID: <BAY149-W54E8BA8227252BD577B13ED990@phx.gbl>


Would it help if I took BINARY_SELECTOR and IDENTIFIER out of the lexer
and made them parser rules? Ill give this a try.


 		 	   		  

From parrt at cs.usfca.edu  Tue Jan 10 13:53:43 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 10 Jan 2012 13:53:43 -0800
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CAAfeETq9UmDCsf965jrCGqxLfU=tvuS6T+cuOXFGNdWPm+6c6Q@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CAAfeETo71Vks36389NFeUhZR3tiY+ZQquzoGMiPjjqsszUk=HQ@mail.gmail.com>
	<573878E1-C1E6-4BD5-895F-D45BA3F64745@cs.usfca.edu>
	<CAAfeETpVao9z4_Ve-G49P_4+89mkzmwidP-YFXtO3-x-5QxB+Q@mail.gmail.com>
	<F926C03B-DB98-4CAF-8FBA-EA8B56D35106@cs.usfca.edu>
	<CAAfeETqN3TTcYhn_rxQMOT3R2O2xF=JUTagXqFm8dftOodO4+A@mail.gmail.com>
	<CAAfeETq9UmDCsf965jrCGqxLfU=tvuS6T+cuOXFGNdWPm+6c6Q@mail.gmail.com>
Message-ID: <2A82B1CA-017D-4D56-9DB6-5F48594B25F2@cs.usfca.edu>


On Jan 10, 2012, at 11:16 AM, Kyle Ferrio wrote:

> Just a thought...
> 
> One thing which is cool about gitnuh -- and maybe bitbucket has this or
> will soon? -- is gists.  For those who don;t know, a gist at github is a
> versioned snippet of code.  It's just a repo, but they've made it crazy
> easy for cutting and pasting snippets to share -- like versioned pastebin
> without all the ads.  Something like this might actually be a good way to
> share single-file things like (most of) the contributed grammars currently
> accessible on antlr.org.
> 
> Anyway, just a thought.

a good one. was thinking of using a repo for grammars.  Hoping AW will be able to pull them in too.
T

From jbb at acm.org  Tue Jan 10 14:16:43 2012
From: jbb at acm.org (John B. Brodie)
Date: Tue, 10 Jan 2012 17:16:43 -0500
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <BAY149-W4178E7A7C5D1E273A1EDD8ED990@phx.gbl>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>,
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>,
	<SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
	<BAY149-W285105F5FD8C6893C13CAFED990@phx.gbl>,
	<4F0C60E3.5090105@acm.org>
	<BAY149-W4178E7A7C5D1E273A1EDD8ED990@phx.gbl>
Message-ID: <4F0CB8CB.8070800@acm.org>

On 01/10/2012 04:39 PM, James Ladd wrote:
> >> All of the above is just speculation since you did not supply a 
> grammar
> > that i could actually run
>
> Huh - the grammar is a cut-n-paste from ANTLRWorks where I use the 
> built in
> interpreter to run it. Is there another format that you want it in?

I do not use ANTLRWorks. Last time I tried using its interpreter (and it 
was a *really* long time ago) the interpreter produced different results 
than the parser generated by the org.antlr.Tool

maybe this has been fixed...

all of your actions call methods that are not available to me and so I 
am unable to run the grammar through the org.antlr.Tool, compile it and 
then run it.

>
> Also - I appreciate the detailed response on why the grammar has 
> issues, however
> I'm not sure how to fix them, please can you suggest?
>
> Rgs, James.
>

it would be best to post the smallest - yet complete - grammar that 
illustrates your problem(s).


From jbb at acm.org  Tue Jan 10 14:18:02 2012
From: jbb at acm.org (John B. Brodie)
Date: Tue, 10 Jan 2012 17:18:02 -0500
Subject: [antlr-interest] Why does antlr not know alternative?
In-Reply-To: <BAY149-W54E8BA8227252BD577B13ED990@phx.gbl>
References: <mailman.1.1326052801.11041.antlr-interest@antlr.org>,
	<BAY149-W94358156316FDE7EF4E57ED980@phx.gbl>,
	<SNT0-MC1-F47ZxjbP3S00206758@SNT0-MC1-F47.Snt0.hotmail.com>
	<BAY149-W285105F5FD8C6893C13CAFED990@phx.gbl>,
	<4F0C60E3.5090105@acm.org> <BAY149-W54E8BA8227252BD577B13ED990@phx.gbl>
Message-ID: <4F0CB91A.8000201@acm.org>

On 01/10/2012 04:52 PM, James Ladd wrote:
> Would it help if I took BINARY_SELECTOR and IDENTIFIER out of the lexer
> and made them parser rules? Ill give this a try.
>
>

I think it would be better to put number back into the lexer and then 
work through its issues.



From rgildea at gmail.com  Tue Jan 10 15:05:56 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Tue, 10 Jan 2012 15:05:56 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CAP86aOdSDDf5H1cScUxpZZtTB4CiDy0ykYJsdYLLLLDmuo+4Gg@mail.gmail.com>
References: <CACCG97HEYGcEM8_adGzZNQw782g32wovzxd1yqLuM+ma5uD3bQ@mail.gmail.com>
	<CAP86aOcss96Ui1QmDSH-GYvfqcEeAEgF1hScch07BeZcUnmEog@mail.gmail.com>
	<CACCG97EM5k0HaygLnG8o4TfvEGYHtFYTP9PQjVUCj3s4CNUK=Q@mail.gmail.com>
	<CAP86aOdSDDf5H1cScUxpZZtTB4CiDy0ykYJsdYLLLLDmuo+4Gg@mail.gmail.com>
Message-ID: <CACCG97H5PGMrBmje6nopnoCge7GTuZjq4umhPZJ5mTnT7-vzVA@mail.gmail.com>

Hi,

Thanks, your changes were useful. I have managed to get another ~30%
reduction in the memory size, although it is still quite a bit larger than
we would like - approximately 50-60 times the input file size.

Cheers,

Richard

On 10 January 2012 08:07, A Z <asicaddress at gmail.com> wrote:

> Here are all the changes I made. IIRC, the setText/getText functions have
> many dependencies so it wasn't as easy to do a search and replace to change
> those. The startIndex/stopIndex functions are used by the generated code so
> I left those alone.
>
>
>
> On Tue, Jan 10, 2012 at 2:01 PM, Richard Gildea <rgildea at gmail.com> wrote:
>
>> Hi,
>>
>> Could you possibly give more details about the modifications you made? I
>> found it was possible to remove the user1, user2, user3 fields and the
>> custom function pointer with only minimal changes in other source files.
>> This gave approximately a 10 percent reduction in memory usage. Removing
>> function pointers looks to be a lot more involved to me.
>>
>> Cheers,
>>
>> Richard
>>
>>
>> On 23 December 2011 19:09, A Z <asicaddress at gmail.com> wrote:
>>
>>> Hi Richard,
>>>
>>>   I see about 140:1 for the ratio of memory use to input size on a
>>> 64-bit system. This is after I hacked commontoken to remove most of the
>>> function pointers, which halved the size of the tokens. I didn't
>>> investigate any further as I recall an email thread about ANTLR 4
>>> indicating it would use 8-byte tokens instead of the 200+ byte tokens 3.4
>>> uses.
>>>
>>>
>>> Looks like it may only be for C#.
>>> http://markmail.org/message/eggfcjt3a6qdzkvc
>>>
>>> Ad
>>>
>>>
>>> On Fri, Dec 23, 2011 at 10:00 AM, Richard Gildea <rgildea at gmail.com>wrote:
>>>
>>>> Hi,
>>>>
>>>> We have been successfully using antlr in the form of the C target for
>>>> some
>>>> time, however we have recently noticed that the memory consumption can
>>>> be
>>>> quite large - up to 150 times the size of the input file. Is this
>>>> factor of
>>>> ~150 to be expected, or does it indicate that we may be doing something
>>>> wrong? For the vast majority of possible inputs this does not cause a
>>>> problem, however some input files can be as large as 0.5 Gb, giving a
>>>> peak
>>>> memory usage of 75 Gb - not exactly feasible on most machines!
>>>>
>>>> Does anyone have any examples of using a custom lexer that provides a
>>>> token
>>>> buffer rather than storing all tokens in memory?
>>>>
>>>> Cheers,
>>>>
>>>> Richard
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>
>>>
>>
>

From rgildea at gmail.com  Tue Jan 10 15:18:38 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Tue, 10 Jan 2012 15:18:38 -0800
Subject: [antlr-interest] Antlr v4 - C++ target
Message-ID: <CACCG97H5kXPx=5eXvzsm7JZu=n+Tv+QQmOACqzTsZ1VYaD0OMQ@mail.gmail.com>

Hi,

These are mainly questions for Terrence/Sam Harwell (who I believe will be
writing the C++ target):

1) Is there even a vague estimate of when a likely C++ target is likely to
be available for v4 (even an alpha/beta version)? Is it likely to be on the
scale of e.g. 2-3 month, 4-6 months, 6 months-1 year, 1 year+?

2) Is the C++ target expected to have a much lower memory footprint than
the current v3.4 C target?

After recently realising that the v3.4 C target has a largish memory
footprint (see my recent emails to the list), there has been some pressure
among some of my co-developers to move to a handwritten parser over ANTLR
(especially from those who were suspicious of using ANTLR from the start)
in order to reduce the memory usage. Our parser is required to read files
as large as 0.5 Gb, hence the pressure to keep memory usage as low as
possible.

It sounds like v4 will likely be a big improvement over v3.4, and I think
knowing the answers to the above questions could influence whether or not
we move away from ANTLR with our parser.

Cheers,

Richard

From ruslan_zasukhin at valentina-db.com  Tue Jan 10 15:33:25 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Wed, 11 Jan 2012 01:33:25 +0200
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CACCG97H5PGMrBmje6nopnoCge7GTuZjq4umhPZJ5mTnT7-vzVA@mail.gmail.com>
Message-ID: <CB329765.F8564%ruslan_zasukhin@valentina-db.com>

On 1/11/12 1:05 AM, "Richard Gildea" <rgildea at gmail.com> wrote:

Hi Richard,

> Hi,
> 
> Thanks, your changes were useful. I have managed to get another ~30%
> reduction in the memory size, although it is still quite a bit larger than
> we would like - approximately 50-60 times the input file size.

I just wonder ... 

You want 50-60 times lager,

OR it is not 50-60 times lager?
    then how much you want ?

I have to read in next letter 1.5GB file to parse into RAM ...
Then even if computer have 8 GB RAM you need only x3 size



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From rgildea at gmail.com  Tue Jan 10 15:35:54 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Tue, 10 Jan 2012 15:35:54 -0800
Subject: [antlr-interest] C target memory usage
In-Reply-To: <CB329765.F8564%ruslan_zasukhin@valentina-db.com>
References: <CACCG97H5PGMrBmje6nopnoCge7GTuZjq4umhPZJ5mTnT7-vzVA@mail.gmail.com>
	<CB329765.F8564%ruslan_zasukhin@valentina-db.com>
Message-ID: <CACCG97G+bLKLAphmsp1xO=qgUQ-34KTbCaHsUf1zV7sA8CL-hw@mail.gmail.com>

Apologies, I realise that was not so clear. Our parser currently uses
~50-60 times the memory compared to the input file size. This is probably
an order of magnitude larger than we would like.

Cheers,

Richard

On 10 January 2012 15:33, Ruslan Zasukhin
<ruslan_zasukhin at valentina-db.com>wrote:

> On 1/11/12 1:05 AM, "Richard Gildea" <rgildea at gmail.com> wrote:
>
> Hi Richard,
>
> > Hi,
> >
> > Thanks, your changes were useful. I have managed to get another ~30%
> > reduction in the memory size, although it is still quite a bit larger
> than
> > we would like - approximately 50-60 times the input file size.
>
> I just wonder ...
>
> You want 50-60 times lager,
>
> OR it is not 50-60 times lager?
>    then how much you want ?
>
> I have to read in next letter 1.5GB file to parse into RAM ...
> Then even if computer have 8 GB RAM you need only x3 size
>
>
>
> --
> Best regards,
>
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
>
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
>
> [I feel the need: the need for speed]
>
>
>

From sam at tunnelvisionlabs.com  Tue Jan 10 16:22:46 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 10 Jan 2012 18:22:46 -0600
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CACCG97H5kXPx=5eXvzsm7JZu=n+Tv+QQmOACqzTsZ1VYaD0OMQ@mail.gmail.com>
References: <CACCG97H5kXPx=5eXvzsm7JZu=n+Tv+QQmOACqzTsZ1VYaD0OMQ@mail.gmail.com>
Message-ID: <081201cccff7$25b08960$71119c20$@tunnelvisionlabs.com>

Hi Richard,

I wouldn't expect a C++ version of ANTLR 4 within the next 12 months. The
Java target and ANTLRWorks 2 are both still pre-alpha. I'm not planning to
start the C# target until a release candidate of v4 is available, and the C#
target will involve ports of the runtime, the tool, and potentially
integration of some ANTLRWorks 2 features into Visual Studio. After that is
working I'll start the C++ port.

I'm confident that under standard usage the C++ port will reduce memory to
about 10-15% of what 3.4 currently requires. Using templates and a custom
token type, it should be possible to cut that down to <5% of what 3.4
requires.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Richard Gildea [mailto:rgildea at gmail.com] 
Sent: Tuesday, January 10, 2012 5:19 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Antlr v4 - C++ target

Hi,

These are mainly questions for Terrence/Sam Harwell (who I believe will be
writing the C++ target):

1) Is there even a vague estimate of when a likely C++ target is likely to
be available for v4 (even an alpha/beta version)? Is it likely to be on the
scale of e.g. 2-3 month, 4-6 months, 6 months-1 year, 1 year+?

2) Is the C++ target expected to have a much lower memory footprint than the
current v3.4 C target?

After recently realising that the v3.4 C target has a largish memory
footprint (see my recent emails to the list), there has been some pressure
among some of my co-developers to move to a handwritten parser over ANTLR
(especially from those who were suspicious of using ANTLR from the start) in
order to reduce the memory usage. Our parser is required to read files as
large as 0.5 Gb, hence the pressure to keep memory usage as low as possible.

It sounds like v4 will likely be a big improvement over v3.4, and I think
knowing the answers to the above questions could influence whether or not we
move away from ANTLR with our parser.

Cheers,

Richard

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kierans777 at gmail.com  Tue Jan 10 16:35:45 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Wed, 11 Jan 2012 11:35:45 +1100
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
 comment on bitbucket.org?
In-Reply-To: <8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
Message-ID: <4F0CD961.2070805@gmail.com>

On 23/07/64 5:59 AM, Terence Parr wrote:
>
> On Jan 9, 2012, at 2:11 PM, Barrie Treloar wrote:
>
>> On Tue, Jan 10, 2012 at 5:33 AM, Terence Parr<parrt at cs.usfca.edu>  wrote:
>>> Contemplating switch to mercurial and hosting at bitbucket.org.
>>> Ter
>>
>> You've already got someone syncing to github.
>> Why not use that instead?
>
> I hate git? because I don't understand it ;) hg was easy and obvious.  mercurial works with intellij (well I hope) so it will be okay for me.

I've used both Git and Hg for complicated projects and Hg is easier to 
understand, more intuitive (Git's syntax is really non-intuitive IMO), 
better documented, has better tooling.  It's also easier to fix mistakes 
in Hg than Git IMHO.  Once one can use MQ one has all the flexibility 
one needs.

Hg also doesn't allow you to blow your leg off like Git does.  Hg at 
least warns you first ;)

I also prefer Bitbucket over GitHub.

>> I'm new to both mercurial (1 project) and git (2+ projects).
>>>  From the small amount of reading I've done they appear to be on par,
>> with a slight leaning towards git.
>> Eclipse is moving to git.

The plugins for Eclipse/IntelliJ are quite good (I'm an Eclipse user, 
some of my colleagues are IntelliJ)

>> Linux is git.
>> I'm not familiar enough with other big players that are using
>> mercurial. (Maybe the old sun sources...)
>>
>> I've used bitbucket and github.
>> Dont really have any opinions since my head space is still stuck in
>> svn and need more time/practice to get it out.
>> However I love the idea of
>> * git stash
>> * git bisect

Hg does have a bisect command, and there is the HgShelve extension that 
is much like Git's stash feature.

From parrt at cs.usfca.edu  Tue Jan 10 16:46:01 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 10 Jan 2012 16:46:01 -0800
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <4F0CD961.2070805@gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<4F0CD961.2070805@gmail.com>
Message-ID: <6730BB47-72E2-4364-B9DD-6B3EC8C9ADCF@cs.usfca.edu>

Very useful information Kieran. thanks!

I will give hg a test drive and try to keep both in parallel for little while. Of course this has to wait until it bumps up in priority.

Ter
On Jan 10, 2012, at 4:35 PM, Kieran Simpson wrote:

> On 23/07/64 5:59 AM, Terence Parr wrote:
>> 
>> On Jan 9, 2012, at 2:11 PM, Barrie Treloar wrote:
>> 
>>> On Tue, Jan 10, 2012 at 5:33 AM, Terence Parr<parrt at cs.usfca.edu>  wrote:
>>>> Contemplating switch to mercurial and hosting at bitbucket.org.
>>>> Ter
>>> 
>>> You've already got someone syncing to github.
>>> Why not use that instead?
>> 
>> I hate git? because I don't understand it ;) hg was easy and obvious.  mercurial works with intellij (well I hope) so it will be okay for me.
> 
> I've used both Git and Hg for complicated projects and Hg is easier to 
> understand, more intuitive (Git's syntax is really non-intuitive IMO), 
> better documented, has better tooling.  It's also easier to fix mistakes 
> in Hg than Git IMHO.  Once one can use MQ one has all the flexibility 
> one needs.
> 
> Hg also doesn't allow you to blow your leg off like Git does.  Hg at 
> least warns you first ;)
> 
> I also prefer Bitbucket over GitHub.
> 
>>> I'm new to both mercurial (1 project) and git (2+ projects).
>>>> From the small amount of reading I've done they appear to be on par,
>>> with a slight leaning towards git.
>>> Eclipse is moving to git.
> 
> The plugins for Eclipse/IntelliJ are quite good (I'm an Eclipse user, 
> some of my colleagues are IntelliJ)
> 
>>> Linux is git.
>>> I'm not familiar enough with other big players that are using
>>> mercurial. (Maybe the old sun sources...)
>>> 
>>> I've used bitbucket and github.
>>> Dont really have any opinions since my head space is still stuck in
>>> svn and need more time/practice to get it out.
>>> However I love the idea of
>>> * git stash
>>> * git bisect
> 
> Hg does have a bisect command, and there is the HgShelve extension that 
> is much like Git's stash feature.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rgildea at gmail.com  Tue Jan 10 17:44:11 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Tue, 10 Jan 2012 17:44:11 -0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <081201cccff7$25b08960$71119c20$@tunnelvisionlabs.com>
References: <CACCG97H5kXPx=5eXvzsm7JZu=n+Tv+QQmOACqzTsZ1VYaD0OMQ@mail.gmail.com>
	<081201cccff7$25b08960$71119c20$@tunnelvisionlabs.com>
Message-ID: <CACCG97HpgQYdVYee5Z2qHVFcR9OOLBLQ6Yj3kRyJ6wxxTMLK1w@mail.gmail.com>

Hi Sam,

Thanks for the info!

Richard

On 10 January 2012 16:22, Sam Harwell <sam at tunnelvisionlabs.com> wrote:

> Hi Richard,
>
> I wouldn't expect a C++ version of ANTLR 4 within the next 12 months. The
> Java target and ANTLRWorks 2 are both still pre-alpha. I'm not planning to
> start the C# target until a release candidate of v4 is available, and the
> C#
> target will involve ports of the runtime, the tool, and potentially
> integration of some ANTLRWorks 2 features into Visual Studio. After that is
> working I'll start the C++ port.
>
> I'm confident that under standard usage the C++ port will reduce memory to
> about 10-15% of what 3.4 currently requires. Using templates and a custom
> token type, it should be possible to cut that down to <5% of what 3.4
> requires.
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Richard Gildea [mailto:rgildea at gmail.com]
> Sent: Tuesday, January 10, 2012 5:19 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr v4 - C++ target
>
> Hi,
>
> These are mainly questions for Terrence/Sam Harwell (who I believe will be
> writing the C++ target):
>
> 1) Is there even a vague estimate of when a likely C++ target is likely to
> be available for v4 (even an alpha/beta version)? Is it likely to be on the
> scale of e.g. 2-3 month, 4-6 months, 6 months-1 year, 1 year+?
>
> 2) Is the C++ target expected to have a much lower memory footprint than
> the
> current v3.4 C target?
>
> After recently realising that the v3.4 C target has a largish memory
> footprint (see my recent emails to the list), there has been some pressure
> among some of my co-developers to move to a handwritten parser over ANTLR
> (especially from those who were suspicious of using ANTLR from the start)
> in
> order to reduce the memory usage. Our parser is required to read files as
> large as 0.5 Gb, hence the pressure to keep memory usage as low as
> possible.
>
> It sounds like v4 will likely be a big improvement over v3.4, and I think
> knowing the answers to the above questions could influence whether or not
> we
> move away from ANTLR with our parser.
>
> Cheers,
>
> Richard
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From lgcraymer at yahoo.com  Tue Jan 10 19:36:40 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 10 Jan 2012 19:36:40 -0800 (PST)
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CACCG97HpgQYdVYee5Z2qHVFcR9OOLBLQ6Yj3kRyJ6wxxTMLK1w@mail.gmail.com>
References: <CACCG97H5kXPx=5eXvzsm7JZu=n+Tv+QQmOACqzTsZ1VYaD0OMQ@mail.gmail.com>
	<081201cccff7$25b08960$71119c20$@tunnelvisionlabs.com>
	<CACCG97HpgQYdVYee5Z2qHVFcR9OOLBLQ6Yj3kRyJ6wxxTMLK1w@mail.gmail.com>
Message-ID: <1326253000.35375.YahooMailNeo@web125504.mail.ne1.yahoo.com>

I think a bit of caution is in order. ?The average text length of a token is 5 characters/bytes or less; pointers are now 8 bytes. ?Tokens encapsulate state information as well as text--input source, character index, line number, token type, C++ vtable pointers, and so forth--and are necessarily much larger than the text they represent. ?Data items are aligned on word (8 byte) boundaries, which adds even more expansion. ?It is possible to compress data structures by removing alignment constraints, converting pointers to offsets (instead of an end of text pointer, keep a byte or short integer index), and some other tricks; these all cost in terms of performance. ?Further, there is the issue of minimum allocation size; allocated memory chunks contain hidden pointers and (depending on the compiler) are likely to be allocated in chunks that are multiples of 128 bytes or larger. ?Shrinking ANTLR data structures, which are already near-minimal in terms
 of preserved information, is not easy to do. ?That is especially true for C++; the reason that Jim Idle did a C target for ANTLR 3 in the first place was to reduce the footprint of the ANTLR 2 C++ target.

So--despite Sam's intentions, I would not expect the ANTLR 4 C++ memory footprint to be smaller than the ANTLR 3 C footprint. ?If Sam does manage to produce a small footprint target, feel free to applaud wildly. ?Just don't expect miracles until they are made real.

--Loring



>________________________________
> From: Richard Gildea <rgildea at gmail.com>
>To: Sam Harwell <sam at tunnelvisionlabs.com> 
>Cc: antlr-interest at antlr.org 
>Sent: Tuesday, January 10, 2012 5:44 PM
>Subject: Re: [antlr-interest] Antlr v4 - C++ target
> 
>Hi Sam,
>
>Thanks for the info!
>
>Richard
>
>On 10 January 2012 16:22, Sam Harwell <sam at tunnelvisionlabs.com> wrote:
>
>> Hi Richard,
>>
>> I wouldn't expect a C++ version of ANTLR 4 within the next 12 months. The
>> Java target and ANTLRWorks 2 are both still pre-alpha. I'm not planning to
>> start the C# target until a release candidate of v4 is available, and the
>> C#
>> target will involve ports of the runtime, the tool, and potentially
>> integration of some ANTLRWorks 2 features into Visual Studio. After that is
>> working I'll start the C++ port.
>>
>> I'm confident that under standard usage the C++ port will reduce memory to
>> about 10-15% of what 3.4 currently requires. Using templates and a custom
>> token type, it should be possible to cut that down to <5% of what 3.4
>> requires.
>>
>> --
>> Sam Harwell
>> Owner, Lead Developer
>> http://tunnelvisionlabs.com
>>
>>
>> -----Original Message-----
>> From: Richard Gildea [mailto:rgildea at gmail.com]
>> Sent: Tuesday, January 10, 2012 5:19 PM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Antlr v4 - C++ target
>>
>> Hi,
>>
>> These are mainly questions for Terrence/Sam Harwell (who I believe will be
>> writing the C++ target):
>>
>> 1) Is there even a vague estimate of when a likely C++ target is likely to
>> be available for v4 (even an alpha/beta version)? Is it likely to be on the
>> scale of e.g. 2-3 month, 4-6 months, 6 months-1 year, 1 year+?
>>
>> 2) Is the C++ target expected to have a much lower memory footprint than
>> the
>> current v3.4 C target?
>>
>> After recently realising that the v3.4 C target has a largish memory
>> footprint (see my recent emails to the list), there has been some pressure
>> among some of my co-developers to move to a handwritten parser over ANTLR
>> (especially from those who were suspicious of using ANTLR from the start)
>> in
>> order to reduce the memory usage. Our parser is required to read files as
>> large as 0.5 Gb, hence the pressure to keep memory usage as low as
>> possible.
>>
>> It sounds like v4 will likely be a big improvement over v3.4, and I think
>> knowing the answers to the above questions could influence whether or not
>> we
>> move away from ANTLR with our parser.
>>
>> Cheers,
>>
>> Richard
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From ruslan_zasukhin at valentina-db.com  Wed Jan 11 00:19:35 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Wed, 11 Jan 2012 10:19:35 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <081201cccff7$25b08960$71119c20$@tunnelvisionlabs.com>
Message-ID: <CB3312B7.F85AC%ruslan_zasukhin@valentina-db.com>

On 1/11/12 2:22 AM, "Sam Harwell" <sam at tunnelvisionlabs.com> wrote:

Hi All,

I wonder ... 

Not Jim will make C++  v4 ?



> Hi Richard,
> 
> I wouldn't expect a C++ version of ANTLR 4 within the next 12 months. The

> -----Original Message-----
> From: Richard Gildea [mailto:rgildea at gmail.com]
> Sent: Tuesday, January 10, 2012 5:19 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr v4 - C++ target
> 
> Hi,
> 
> These are mainly questions for Terrence/Sam Harwell (who I believe will be
> writing the C++ target):

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From ruslan_zasukhin at valentina-db.com  Wed Jan 11 00:27:37 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Wed, 11 Jan 2012 10:27:37 +0200
Subject: [antlr-interest] Antlr v4 - C++ target -- idea for Terrence ...
In-Reply-To: <081201cccff7$25b08960$71119c20$@tunnelvisionlabs.com>
Message-ID: <CB331499.F85B1%ruslan_zasukhin@valentina-db.com>

On 1/11/12 2:22 AM, "Sam Harwell" <sam at tunnelvisionlabs.com> wrote:

Hi Sam,

> I wouldn't expect a C++ version of ANTLR 4 within the next 12 months. The
> Java target and ANTLRWorks 2 are both still pre-alpha. I'm not planning to
> start the C# target until a release candidate of v4 is available, and the C#
> target will involve ports of the runtime, the tool, and potentially
> integration of some ANTLRWorks 2 features into Visual Studio. After that is
> working I'll start the C++ port.
> 
> I'm confident that under standard usage the C++ port will reduce memory to
> about 10-15% of what 3.4 currently requires. Using templates and a custom
> token type, it should be possible to cut that down to <5% of what 3.4
> requires.

Hmm,

As far as I have see, the 3.4 C implementation have weak-side because MANY
pointers to handlers present in the each object. In such was was imitated
virtual table of C++,   but instead of single pointer was inserted all funcs
of "class"

So this is main issue that will be removed with c++ version I think.

But I do not see how you going win with help of templates?
Can you show any small example?


======
To Terrence ...

I see you make big progress in challenge of left-recursions,
And before that in automates

I want to underline again, that C 3.4 was not faster actually of v2 C++

And ANTLR 3.4 still is slower for us than parser of SQLite - Lemon

I very recommend you make benches under profiles some your ANTLR grammar and
its analog of YACC and that Lemon.

I believe (relative) slowness of ANTLR comes from the fact of long chains of
function calls ... Yes this is strong side for debugging -- human style,,,
But weak side for RELEASE and speed.

My point is -- may be you can invent some way to produce two branches of
code 
A) for debugging  - funcs style
B) for release -- automate style

?



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From ruslan_zasukhin at valentina-db.com  Wed Jan 11 00:31:10 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Wed, 11 Jan 2012 10:31:10 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <1326253000.35375.YahooMailNeo@web125504.mail.ne1.yahoo.com>
Message-ID: <CB33156E.F85B5%ruslan_zasukhin@valentina-db.com>

On 1/11/12 5:36 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:

> I think a bit of caution is in order. ?The average text length of a token is 5
> characters/bytes or less; pointers are now 8 bytes. ?Tokens encapsulate state
> information as well as text--input source, character index, line number, token
> type, C++ vtable pointers, and so forth--and are necessarily much larger than
> the text they represent. ?Data items are aligned on word (8 byte) boundaries,
> which adds even more expansion. ?It is possible to compress data structures by
> removing alignment constraints, converting pointers to offsets (instead of an
> end of text pointer, keep a byte or short integer index), and some other
> tricks; these all cost in terms of performance. ?Further, there is the issue
> of minimum allocation size; allocated memory chunks contain hidden pointers
> and (depending on the compiler) are likely to be allocated in chunks that are
> multiples of 128 bytes or larger. ?Shrinking ANTLR data structures, which are
> already near-minimal in terms
>  of preserved information, is not easy to do. ?That is especially true for
> C++; the reason that Jim Idle did a C target for ANTLR 3 in the first place
> was to reduce the footprint of the ANTLR 2 C++ target.

But Lorin, 

Again, I think C target have not achieve that point because was NOT single
pointer to virtual table, but MANY pointers to all "class" methods.

Or I am wrong here?


> So--despite Sam's intentions, I would not expect the ANTLR 4 C++ memory
> footprint to be smaller than the ANTLR 3 C footprint. ?If Sam does manage to
> produce a small footprint target, feel free to applaud wildly. ?Just don't
> expect miracles until they are made real.



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From lgcraymer at yahoo.com  Wed Jan 11 01:12:02 2012
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 11 Jan 2012 01:12:02 -0800 (PST)
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CB33156E.F85B5%ruslan_zasukhin@valentina-db.com>
References: <1326253000.35375.YahooMailNeo@web125504.mail.ne1.yahoo.com>
	<CB33156E.F85B5%ruslan_zasukhin@valentina-db.com>
Message-ID: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>

If Jim did not implement the vtable indirection (that could be easily changed, if so), then there is a little more opportunity for optimization, but still the problem is that state information takes up much more memory than does the text in tokens.

--Loring



>________________________________
> From: Ruslan Zasukhin <ruslan_zasukhin at valentina-db.com>
>To: Loring Craymer <lgcraymer at yahoo.com>; Richard Gildea <rgildea at gmail.com>; Sam Harwell <sam at tunnelvisionlabs.com> 
>Cc: "antlr-interest at antlr.org" <antlr-interest at antlr.org> 
>Sent: Wednesday, January 11, 2012 12:31 AM
>Subject: Re: [antlr-interest] Antlr v4 - C++ target
> 
>On 1/11/12 5:36 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:
>
>> I think a bit of caution is in order. ?The average text length of a token is 5
>> characters/bytes or less; pointers are now 8 bytes. ?Tokens encapsulate state
>> information as well as text--input source, character index, line number, token
>> type, C++ vtable pointers, and so forth--and are necessarily much larger than
>> the text they represent. ?Data items are aligned on word (8 byte) boundaries,
>> which adds even more expansion. ?It is possible to compress data structures by
>> removing alignment constraints, converting pointers to offsets (instead of an
>> end of text pointer, keep a byte or short integer index), and some other
>> tricks; these all cost in terms of performance. ?Further, there is the issue
>> of minimum allocation size; allocated memory chunks contain hidden pointers
>> and (depending on the compiler) are likely to be allocated in chunks that are
>> multiples of 128 bytes or larger. ?Shrinking ANTLR data structures, which are
>> already near-minimal in terms
>>? of preserved information, is not easy to do. ?That is especially true for
>> C++; the reason that Jim Idle did a C target for ANTLR 3 in the first place
>> was to reduce the footprint of the ANTLR 2 C++ target.
>
>But Lorin, 
>
>Again, I think C target have not achieve that point because was NOT single
>pointer to virtual table, but MANY pointers to all "class" methods.
>
>Or I am wrong here?
>
>
>> So--despite Sam's intentions, I would not expect the ANTLR 4 C++ memory
>> footprint to be smaller than the ANTLR 3 C footprint. ?If Sam does manage to
>> produce a small footprint target, feel free to applaud wildly. ?Just don't
>> expect miracles until they are made real.
>
>
>
>-- 
>Best regards,
>
>Ruslan Zasukhin
>VP Engineering and New Technology
>Paradigma Software, Inc
>
>Valentina - Joining Worlds of Information
>http://www.paradigmasoft.com
>
>[I feel the need: the need for speed]
>
>
>
>
>

From ruslan_zasukhin at valentina-db.com  Wed Jan 11 03:09:48 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Wed, 11 Jan 2012 13:09:48 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
Message-ID: <CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>

On 1/11/12 11:12 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:

> If Jim did not implement the vtable indirection (that could be easily changed,
> if so), then there is a little more opportunity for optimization, but still
> the problem is that state information takes up much more memory than does the
> text in tokens.

Right,

Well, lets look on antrl3commontoken.h

API:
        19   pointers to func
                        32 bit os    19 * 4  = 76 bytes
                   
And about 
        11 * 4 bytes  of useful info


So there is chance that in c++ style
OR with single pointer on ala-VT  token will become

    from 118 bytes to 48 bytes



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]





From pedrogfrancisco at gmail.com  Wed Jan 11 07:54:07 2012
From: pedrogfrancisco at gmail.com (Pedro Francisco)
Date: Wed, 11 Jan 2012 15:54:07 +0000
Subject: [antlr-interest] Website error: "Oops - an error has occurred"
Message-ID: <CAJZjf_zuRkP+5aga2YHTx-0xZCHf5gTWz_MonbO8mWgmBRhu3g@mail.gmail.com>

Hi!
I'd just like to report that on page "Example tree rewriting with
patterns" < http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
>, I get an error page:

Title:  "Oops - an error has occurred"
> System Error
>
> A system error has occurred ? our apologies!
>
> For immediate troubleshooting, consult our knowledge base for a solution.
>
> If you would like to receive support from Atlassian's support team, ask your Confluence administrator to create a support issue on Atlassian's support system with the following information:
>
>     a description of your problem and what you were doing at the time it occurred
>     a copy of the error and system information found below
>     a copy of the application logs (if possible).
>
> Your Confluence administrator can use the support request form to create a support ticket which will include this information.
>
> We will respond as promptly as possible.
> Thank you!
>
> Return to site homepage?
> Cause
> ... (backtrace here) ...

From parrt at cs.usfca.edu  Wed Jan 11 08:26:42 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jan 2012 08:26:42 -0800
Subject: [antlr-interest] Antlr v4 - C++ target -- idea for Terrence ...
In-Reply-To: <CB331499.F85B1%ruslan_zasukhin@valentina-db.com>
References: <CB331499.F85B1%ruslan_zasukhin@valentina-db.com>
Message-ID: <348F7B0E-3B7E-4602-A522-8649BD5EF151@cs.usfca.edu>


On Jan 11, 2012, at 12:27 AM, Ruslan Zasukhin wrote:
> To Terrence ...
> 
> I see you make big progress in challenge of left-recursions,
> And before that in automates
> 
> I want to underline again, that C 3.4 was not faster actually of v2 C++
> 
> And ANTLR 3.4 still is slower for us than parser of SQLite - Lemon
> 
> I very recommend you make benches under profiles some your ANTLR grammar and
> its analog of YACC and that Lemon.
> 
> I believe (relative) slowness of ANTLR comes from the fact of long chains of
> function calls ... Yes this is strong side for debugging -- human style,,,
> But weak side for RELEASE and speed.
> 
> My point is -- may be you can invent some way to produce two branches of
> code 
> A) for debugging  - funcs style
> B) for release -- automate style

My focus for Honey Badger is not speed. It's ease of use.  Most people are fine with speed even if not optimal.  Most compiler writers don't use parser generators so I'm less worried about speed.

Ter

From parrt at cs.usfca.edu  Wed Jan 11 08:28:30 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jan 2012 08:28:30 -0800
Subject: [antlr-interest] Website error: "Oops - an error has occurred"
In-Reply-To: <CAJZjf_zuRkP+5aga2YHTx-0xZCHf5gTWz_MonbO8mWgmBRhu3g@mail.gmail.com>
References: <CAJZjf_zuRkP+5aga2YHTx-0xZCHf5gTWz_MonbO8mWgmBRhu3g@mail.gmail.com>
Message-ID: <B9FA10B2-C7B0-4499-88D8-DB1F94BF6660@cs.usfca.edu>

weird. sorry about that. it must use a template no longer available after last upgrade. don't know how to fix!
Ter
On Jan 11, 2012, at 7:54 AM, Pedro Francisco wrote:

> Hi!
> I'd just like to report that on page "Example tree rewriting with
> patterns" < http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
>> , I get an error page:
> 
> Title:  "Oops - an error has occurred"
>> System Error
>> 
>> A system error has occurred ? our apologies!
>> 
>> For immediate troubleshooting, consult our knowledge base for a solution.
>> 
>> If you would like to receive support from Atlassian's support team, ask your Confluence administrator to create a support issue on Atlassian's support system with the following information:
>> 
>>    a description of your problem and what you were doing at the time it occurred
>>    a copy of the error and system information found below
>>    a copy of the application logs (if possible).
>> 
>> Your Confluence administrator can use the support request form to create a support ticket which will include this information.
>> 
>> We will respond as promptly as possible.
>> Thank you!
>> 
>> Return to site homepage?
>> Cause
>> ... (backtrace here) ...
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Wed Jan 11 11:22:48 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jan 2012 11:22:48 -0800
Subject: [antlr-interest] Updated honey badger and examples
Message-ID: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>

Hi, I have made an update to Honey Badger to allow -> id labels on outer alternatives. You can check it out here on the updated example page:

http://www.antlr.org/wiki/display/ANTLR4/Examples
http://www.antlr.org/depot/antlr4/main/CHANGES.txt

Download here:

http://antlr.org/download/antlr-4.0ea-complete.jar

Enjoy,
Ter

From serefarikan at kurumsalteknoloji.com  Wed Jan 11 13:20:50 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Wed, 11 Jan 2012 21:20:50 +0000
Subject: [antlr-interest] Antlrworks1.4.3 can't debug/interpret/check grammar
Message-ID: <CA+4ThdoY=YsJOh4=yzsg7Cnf4YstmKKj84ymrN3tp+b27OpA6A@mail.gmail.com>

Greetings,
My system is using Win 7 64 bit, I start antlr with
java -Xmx4G -jar antlrworks-1.4.3.jar and antlr options under preferences
has -Xmx10G
The system has 16GB ram, and I'm trying to see how sql 2003 grammar
(available from the antlr grammars on the web site) handles various things.

Trying to invoke debug grammar, or interpret, or check grammar gives an
error on the command prompt, but it is so fast that I could not even see
the beginning of the message.
It keeps repeating
org.antlr.analysis.SemanticContext.and(SemanticContext.java:616 to the
console. I've seen this problem reported by one more thread without a
solution.

I've managed to produce the same situation yesterday with a much simpler
grammar.

Is there any way I can access an older version of antlrworks which may not
have this issue? It would take me a lot longer to figure things out without
antlrworks

Kind regards
Seref

From researcher0x00 at gmail.com  Wed Jan 11 13:42:26 2012
From: researcher0x00 at gmail.com (Eric)
Date: Wed, 11 Jan 2012 16:42:26 -0500
Subject: [antlr-interest] Antlrworks1.4.3 can't debug/interpret/check
	grammar
In-Reply-To: <CA+4ThdoY=YsJOh4=yzsg7Cnf4YstmKKj84ymrN3tp+b27OpA6A@mail.gmail.com>
References: <CA+4ThdoY=YsJOh4=yzsg7Cnf4YstmKKj84ymrN3tp+b27OpA6A@mail.gmail.com>
Message-ID: <CAN45N11hoTZb-UpQe05gjnzCpC3SYZRNYxhbPPco4k_KQKnvXA@mail.gmail.com>

On Wed, Jan 11, 2012 at 4:20 PM, Seref Arikan <
serefarikan at kurumsalteknoloji.com> wrote:

> Greetings,
> My system is using Win 7 64 bit, I start antlr with
> java -Xmx4G -jar antlrworks-1.4.3.jar and antlr options under preferences
> has -Xmx10G
> The system has 16GB ram, and I'm trying to see how sql 2003 grammar
> (available from the antlr grammars on the web site) handles various things.
>
> Trying to invoke debug grammar, or interpret, or check grammar gives an
> error on the command prompt, but it is so fast that I could not even see
> the beginning of the message.
> It keeps repeating
> org.antlr.analysis.SemanticContext.and(SemanticContext.java:616 to the
> console. I've seen this problem reported by one more thread without a
> solution.
>
> I've managed to produce the same situation yesterday with a much simpler
> grammar.
>
> Is there any way I can access an older version of antlrworks which may not
> have this issue? It would take me a lot longer to figure things out without
> antlrworks
>

See: http://www.antlr.org/download



>
> Kind regards
> Seref
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Wed Jan 11 13:49:43 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 11 Jan 2012 14:49:43 -0700
Subject: [antlr-interest] Updated honey badger and examples
In-Reply-To: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
Message-ID: <CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>

Excellent, congratulations and thank you.

I just spent about half an hour playing with variations on A.g4 (since it
worked right out of the box I had to keep going...)  and this is really
nice.  This is the first time I've looked at the new-in-antlr listener
paradigm.  I will need a while to fully appreciate the doors this opens.
Honey Badger makes things easy, so I want to stay on his (?) good side.

Q: how do you tell a boy Honey Badger from a girl Honey Badger?

A: you don't.  they're both bad-ass.

Kyle

P.S.  I really appreciate that Honey Badger likes IcedTea.   I run a mix of
OpenJDK 6 and 7, so far with no platform issues.
On Jan 11, 2012 12:23 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

> Hi, I have made an update to Honey Badger to allow -> id labels on outer
> alternatives. You can check it out here on the updated example page:
>
> http://www.antlr.org/wiki/display/ANTLR4/Examples
> http://www.antlr.org/depot/antlr4/main/CHANGES.txt
>
> Download here:
>
> http://antlr.org/download/antlr-4.0ea-complete.jar
>
> Enjoy,
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From serefarikan at kurumsalteknoloji.com  Wed Jan 11 13:56:51 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Wed, 11 Jan 2012 21:56:51 +0000
Subject: [antlr-interest] Antlrworks1.4.3 can't debug/interpret/check
	grammar
In-Reply-To: <CAN45N11hoTZb-UpQe05gjnzCpC3SYZRNYxhbPPco4k_KQKnvXA@mail.gmail.com>
References: <CA+4ThdoY=YsJOh4=yzsg7Cnf4YstmKKj84ymrN3tp+b27OpA6A@mail.gmail.com>
	<CAN45N11hoTZb-UpQe05gjnzCpC3SYZRNYxhbPPco4k_KQKnvXA@mail.gmail.com>
Message-ID: <CA+4ThdrdHPjt8Vr5jzWyePfd4ZJJLrBswFyigFLcfWU3gORcUA@mail.gmail.com>

Thanks Eric!
some grammars appear to be valid with older versions only, this will really
help.

Regards
Seref


On Wed, Jan 11, 2012 at 9:42 PM, Eric <researcher0x00 at gmail.com> wrote:

>
>
> On Wed, Jan 11, 2012 at 4:20 PM, Seref Arikan <
> serefarikan at kurumsalteknoloji.com> wrote:
>
>> Greetings,
>> My system is using Win 7 64 bit, I start antlr with
>> java -Xmx4G -jar antlrworks-1.4.3.jar and antlr options under preferences
>> has -Xmx10G
>> The system has 16GB ram, and I'm trying to see how sql 2003 grammar
>> (available from the antlr grammars on the web site) handles various
>> things.
>>
>> Trying to invoke debug grammar, or interpret, or check grammar gives an
>> error on the command prompt, but it is so fast that I could not even see
>> the beginning of the message.
>> It keeps repeating
>> org.antlr.analysis.SemanticContext.and(SemanticContext.java:616 to the
>> console. I've seen this problem reported by one more thread without a
>> solution.
>>
>> I've managed to produce the same situation yesterday with a much simpler
>> grammar.
>>
>> Is there any way I can access an older version of antlrworks which may not
>> have this issue? It would take me a lot longer to figure things out
>> without
>> antlrworks
>>
>
> See: http://www.antlr.org/download
>
>
>
>>
>> Kind regards
>> Seref
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From ramponjerome at yahoo.fr  Wed Jan 11 14:29:46 2012
From: ramponjerome at yahoo.fr (Rampon Jerome)
Date: Wed, 11 Jan 2012 22:29:46 +0000 (GMT)
Subject: [antlr-interest] antlr v3  C target  EOF  PUSHSTREAM
Message-ID: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>




Hi,


I already used PUSHSTREAM macro on C target to switch input streams with v3.

I did similar work on Java with personal stack of stream and nextToken redefinition
(someway close to some example found later in antlr wiki pages)

I need to manipulate(push/pop) some additional data structures all along the stack of input streams.
It is simple to add in my own stack of stream with extension and nextToken redefinition in Java.

I do not see how to do a similar job with C target as nextToken redefinition is not possible

Is there one way to redefine EOF token to add specific actions ? or anything that would permit expected 

actions ...

I just want to manage data structures in a parallel stack and pop on EOF in v3 in C !!!

Thanks for any idea 


Jerome

From antlr at mirality.co.nz  Wed Jan 11 14:56:47 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 12 Jan 2012 11:56:47 +1300
Subject: [antlr-interest] antlr v3  C target  EOF  PUSHSTREAM
In-Reply-To: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>
References: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>
Message-ID: <20120111225659.7577A3418043@www.antlr.org>

At 11:29 12/01/2012, Rampon Jerome wrote:
 >I do not see how to do a similar job with C target as nextToken
 >redefinition is not possible

It's been a while since I played with the C target, but IIRC most 
of the "methods" (probably including nextToken) are defined as 
function pointers within the structure data.  So you should be 
able to subclass the lexer and reassign the pointer to your 
override method -- you just have to handle the recasting and base 
pointer preservation yourself.


From jimi at temporal-wave.com  Wed Jan 11 15:00:04 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 11 Jan 2012 15:00:04 -0800
Subject: [antlr-interest] antlr v3 C target EOF PUSHSTREAM
In-Reply-To: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>
References: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>
Message-ID: <c09ee575dc0cc0dbf4c6fd8c08580da1@mail.gmail.com>

You can override nexttoken - I have explained how to do it on here before,
so you should find it antlr.markmail.org  basically you make a copy of the
functions you need and install your own pointers.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Rampon Jerome
> Sent: Wednesday, January 11, 2012 2:30 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] antlr v3 C target EOF PUSHSTREAM
>
>
>
>
> Hi,
>
>
> I already used PUSHSTREAM macro on C target to switch input streams
> with v3.
>
> I did similar work on Java with personal stack of stream and nextToken
> redefinition (someway close to some example found later in antlr wiki
> pages)
>
> I need to manipulate(push/pop) some additional data structures all
> along the stack of input streams.
> It is simple to add in my own stack of stream with extension and
> nextToken redefinition in Java.
>
> I do not see how to do a similar job with C target as nextToken
> redefinition is not possible
>
> Is there one way to redefine EOF token to add specific actions ? or
> anything that would permit expected
>
> actions ...
>
> I just want to manage data structures in a parallel stack and pop on
> EOF in v3 in C !!!
>
> Thanks for any idea
>
>
> Jerome
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From parrt at cs.usfca.edu  Wed Jan 11 16:39:37 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jan 2012 16:39:37 -0800
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
Message-ID: <E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>

hi Kyle,

I have 2 questions about the current listener mechanism:

1. How do we return values from listener methods so that we can do computations?
2. How do we alter a parse tree?

For 2, I think we return a new tree as a return value and the parse tree walker will incorporate that into the tree if it sees a different tree come back. In other words, it will do something like this in the walker:

newtree = listener.someEvent(oldtree);
if ( newtree!=oldtree ) replace-oldtree-with-newtree;

For 1, I don't have a great answer. To make this more concrete, imagine we have an expression rule and we want to use listener events to compute the value of an expression. So, instead of having actions in the grammar  like:

e returns [int v]
      : a=e '*' b=e {$v = $a.v * $b.v;}

we would simply match it

e : e '*' e -> mult ?

and then have listener events compute values. but where does of the listener object store the intermediate results of a subtree computation? Certainly we don't want to have to add "returns [int v]" to the grammar for every different paths we make over the parse tree. Without a return value from a listener event (which I want to use for tree rewriting), how do we get a value up the tree in a computation?  We can't really use temporary fields of the listener object because it's hard to tell which value gets associated with which listener method. we would need a temporary fields to hold result values from each listener. actually, I'm not even sure that would work. We need to associate result values with sub tree roots (i.e. contexts). In other words, we need a way to dynamically add fields to contexts for the specific purpose of a particular parse tree walk. One can imagine that I have a pass for computing the type of expression and another pass for computing the value. In both cases, I need result values for each subtree (type and then value).

Maybe that is just a hash table from ctx node to value; Map<ParserRuleContext, Object>. maybe. That presents a few issues for me because I use hashCode/equals in a weird way for use with grammar analysis, but that would be the idea.

class MyGListener extends BlankGListener {
	Map<ParserRuleContext, Integer> results = ?;

	public void exitRule(AParser.multContext ctx) { results.put(ctx, results.get(ctx.a) * results.get(ctx.b)); }
	public void exitRule(AParser.addContext ctx) { results.put(ctx, results.get(ctx.a) + results.get(ctx.b)); }
}

not very pretty in Java. Python would look better:

results[ctx] = results[ctx.a] * results[ctx.b];

This way we can associate any values we need to for any node, in effect, decorating the parse tree as needed.

What do people think about the solution? is there a way I can automate some of this? I think that Python and Ruby would make short work of that because they allow dynamically adding fields (normally a horrible thing to do) ;) Is there a better way to do decorations in Java?

Ter

On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:

> Excellent, congratulations and thank you.
> 
> I just spent about half an hour playing with variations on A.g4 (since it
> worked right out of the box I had to keep going...)  and this is really
> nice.  This is the first time I've looked at the new-in-antlr listener
> paradigm.  I will need a while to fully appreciate the doors this opens.
> Honey Badger makes things easy, so I want to stay on his (?) good side.
> 
> Q: how do you tell a boy Honey Badger from a girl Honey Badger?
> 
> A: you don't.  they're both bad-ass.

nice!

Ter

From chwchw at gmx.de  Wed Jan 11 17:22:20 2012
From: chwchw at gmx.de (Christian)
Date: Thu, 12 Jan 2012 02:22:20 +0100
Subject: [antlr-interest] Bug: String constant is too big in Parser
	generated by ANTLR v4
Message-ID: <4F0E35CC.4040003@gmx.de>

Hi everybody and especially Terence!

I get the following error message from Eclipse after ANTLR v4 has
generated the parser in Java:

    The type generates a string that requires more than 65535 bytes to
encode in Utf8 format in the constant pool.

I think this is due to your _serializedATN string. Could you dynamically
build it with a StringBuilder perhaps? If you fix it, apply the same
solution to the lexer please.

Regards,
Christian

From parrt at cs.usfca.edu  Wed Jan 11 17:31:59 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jan 2012 17:31:59 -0800
Subject: [antlr-interest] Bug: String constant is too big in Parser
	generated by ANTLR v4
In-Reply-To: <4F0E35CC.4040003@gmx.de>
References: <4F0E35CC.4040003@gmx.de>
Message-ID: <D2FD2B3C-BD52-4ABC-8AE6-FFB8C92AECE9@cs.usfca.edu>

thanks?wondering if this would come up.  Wow. big grammar?
Ter
On Jan 11, 2012, at 5:22 PM, Christian wrote:

> Hi everybody and especially Terence!
> 
> I get the following error message from Eclipse after ANTLR v4 has
> generated the parser in Java:
> 
>    The type generates a string that requires more than 65535 bytes to
> encode in Utf8 format in the constant pool.
> 
> I think this is due to your _serializedATN string. Could you dynamically
> build it with a StringBuilder perhaps? If you fix it, apply the same
> solution to the lexer please.
> 
> Regards,
> Christian
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From asicaddress at gmail.com  Wed Jan 11 17:38:26 2012
From: asicaddress at gmail.com (A Z)
Date: Thu, 12 Jan 2012 07:38:26 +0600
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
Message-ID: <CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>

The realistic minimum I see for commontoken in the existing 3.4 code is 32
bytes on a 64-bit architecture. This would involve modifications to the
code generator to no longer use the function pointers(for
setStart/setStopIndex/setType) and using a smaller data type for the
channel, factory and type members. There is still an additional 16B/token
used by the vector data structure holding the tokens.



On Wed, Jan 11, 2012 at 5:09 PM, Ruslan Zasukhin <
ruslan_zasukhin at valentina-db.com> wrote:

> On 1/11/12 11:12 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:
>
> > If Jim did not implement the vtable indirection (that could be easily
> changed,
> > if so), then there is a little more opportunity for optimization, but
> still
> > the problem is that state information takes up much more memory than
> does the
> > text in tokens.
>
> Right,
>
> Well, lets look on antrl3commontoken.h
>
> API:
>        19   pointers to func
>                        32 bit os    19 * 4  = 76 bytes
>
> And about
>        11 * 4 bytes  of useful info
>
>
> So there is chance that in c++ style
> OR with single pointer on ala-VT  token will become
>
>    from 118 bytes to 48 bytes
>
>
>
> --
> Best regards,
>
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
>
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
>
> [I feel the need: the need for speed]
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sam at tunnelvisionlabs.com  Wed Jan 11 18:39:51 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 11 Jan 2012 20:39:51 -0600
Subject: [antlr-interest] Bug: String constant is too big in
	Parser	generated by ANTLR v4
In-Reply-To: <4F0E35CC.4040003@gmx.de>
References: <4F0E35CC.4040003@gmx.de>
Message-ID: <089501ccd0d3$76df6310$649e2930$@tunnelvisionlabs.com>

I'm hoping for a command line option to the Tool that emits the serialized
ATN as a binary file instead of encoded as a string literal. The binary file
would then be loaded via the classpath (so including it in the jar with your
compiled parser would work).

By default it's emitted as a string literal, but you have the option to work
around Java limitations provided you have a build system that supports
generated embedded resources.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Christian [mailto:chwchw at gmx.de] 
Sent: Wednesday, January 11, 2012 7:22 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Bug: String constant is too big in Parser
generated by ANTLR v4

Hi everybody and especially Terence!

I get the following error message from Eclipse after ANTLR v4 has
generated the parser in Java:

    The type generates a string that requires more than 65535 bytes to
encode in Utf8 format in the constant pool.

I think this is due to your _serializedATN string. Could you dynamically
build it with a StringBuilder perhaps? If you fix it, apply the same
solution to the lexer please.

Regards,
Christian

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sam at tunnelvisionlabs.com  Wed Jan 11 18:54:40 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 11 Jan 2012 20:54:40 -0600
Subject: [antlr-interest] Extending contexts in code (was "Appropriate
	use of honey badger listeners")
Message-ID: <089601ccd0d5$88418af0$98c4a0d0$@tunnelvisionlabs.com>

To "dynamically add fields", add the following method for each rule foo:

protected fooContext newContext_foo() { return new fooContext(); }

If you keep the same implementation of labels, also add the following for a
label #mult inside rule foo:

protected multContext newContext_mult(fooContext originalContext) {
    multContext result = new multContext();
    result.copyFrom(originalContext);
    return result;
}

Now you can extend any context you want in code only. :)

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Wednesday, January 11, 2012 6:40 PM
To: ANTLR Interest Mailing List
Subject: [antlr-interest] Appropriate use of honey badger listeners

hi Kyle,

I have 2 questions about the current listener mechanism:

1. How do we return values from listener methods so that we can do
computations?
2. How do we alter a parse tree?

For 2, I think we return a new tree as a return value and the parse tree
walker will incorporate that into the tree if it sees a different tree come
back. In other words, it will do something like this in the walker:

newtree = listener.someEvent(oldtree);
if ( newtree!=oldtree ) replace-oldtree-with-newtree;

For 1, I don't have a great answer. To make this more concrete, imagine we
have an expression rule and we want to use listener events to compute the
value of an expression. So, instead of having actions in the grammar  like:

e returns [int v]
      : a=e '*' b=e {$v = $a.v * $b.v;}

we would simply match it

e : e '*' e -> mult .

and then have listener events compute values. but where does of the listener
object store the intermediate results of a subtree computation? Certainly we
don't want to have to add "returns [int v]" to the grammar for every
different paths we make over the parse tree. Without a return value from a
listener event (which I want to use for tree rewriting), how do we get a
value up the tree in a computation?  We can't really use temporary fields of
the listener object because it's hard to tell which value gets associated
with which listener method. we would need a temporary fields to hold result
values from each listener. actually, I'm not even sure that would work. We
need to associate result values with sub tree roots (i.e. contexts). In
other words, we need a way to dynamically add fields to contexts for the
specific purpose of a particular parse tree walk. One can imagine that I
have a pass for computing the type of expression and another pass for
computing the value. In both cases, I need result values for each subtree
(type and then value).

Maybe that is just a hash table from ctx node to value;
Map<ParserRuleContext, Object>. maybe. That presents a few issues for me
because I use hashCode/equals in a weird way for use with grammar analysis,
but that would be the idea.

class MyGListener extends BlankGListener {
	Map<ParserRuleContext, Integer> results = .;

	public void exitRule(AParser.multContext ctx) { results.put(ctx,
results.get(ctx.a) * results.get(ctx.b)); }
	public void exitRule(AParser.addContext ctx) { results.put(ctx,
results.get(ctx.a) + results.get(ctx.b)); } }

not very pretty in Java. Python would look better:

results[ctx] = results[ctx.a] * results[ctx.b];

This way we can associate any values we need to for any node, in effect,
decorating the parse tree as needed.

What do people think about the solution? is there a way I can automate some
of this? I think that Python and Ruby would make short work of that because
they allow dynamically adding fields (normally a horrible thing to do) ;) Is
there a better way to do decorations in Java?

Ter

On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:

> Excellent, congratulations and thank you.
> 
> I just spent about half an hour playing with variations on A.g4 (since 
> it worked right out of the box I had to keep going...)  and this is 
> really nice.  This is the first time I've looked at the new-in-antlr 
> listener paradigm.  I will need a while to fully appreciate the doors this
opens.
> Honey Badger makes things easy, so I want to stay on his (?) good side.
> 
> Q: how do you tell a boy Honey Badger from a girl Honey Badger?
> 
> A: you don't.  they're both bad-ass.

nice!

Ter

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Wed Jan 11 18:56:43 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jan 2012 18:56:43 -0800
Subject: [antlr-interest] Extending contexts in code (was "Appropriate
	use of honey badger listeners")
In-Reply-To: <089601ccd0d5$88418af0$98c4a0d0$@tunnelvisionlabs.com>
References: <089601ccd0d5$88418af0$98c4a0d0$@tunnelvisionlabs.com>
Message-ID: <3CB1BD3B-D3A1-4EDE-A595-73C8E512F8E2@cs.usfca.edu>


On Jan 11, 2012, at 6:54 PM, Sam Harwell wrote:

> To "dynamically add fields", add the following method for each rule foo:
> 
> protected fooContext newContext_foo() { return new fooContext(); }

so then these are "factories" and we subclass parser to alter?  What if we need multiple kinds of fooContext for different passes?

Ter
> 
> If you keep the same implementation of labels, also add the following for a
> label #mult inside rule foo:
> 
> protected multContext newContext_mult(fooContext originalContext) {
>    multContext result = new multContext();
>    result.copyFrom(originalContext);
>    return result;
> }
> 
> Now you can extend any context you want in code only. :)
> 
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
> 
> 
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu] 
> Sent: Wednesday, January 11, 2012 6:40 PM
> To: ANTLR Interest Mailing List
> Subject: [antlr-interest] Appropriate use of honey badger listeners
> 
> hi Kyle,
> 
> I have 2 questions about the current listener mechanism:
> 
> 1. How do we return values from listener methods so that we can do
> computations?
> 2. How do we alter a parse tree?
> 
> For 2, I think we return a new tree as a return value and the parse tree
> walker will incorporate that into the tree if it sees a different tree come
> back. In other words, it will do something like this in the walker:
> 
> newtree = listener.someEvent(oldtree);
> if ( newtree!=oldtree ) replace-oldtree-with-newtree;
> 
> For 1, I don't have a great answer. To make this more concrete, imagine we
> have an expression rule and we want to use listener events to compute the
> value of an expression. So, instead of having actions in the grammar  like:
> 
> e returns [int v]
>      : a=e '*' b=e {$v = $a.v * $b.v;}
> 
> we would simply match it
> 
> e : e '*' e -> mult .
> 
> and then have listener events compute values. but where does of the listener
> object store the intermediate results of a subtree computation? Certainly we
> don't want to have to add "returns [int v]" to the grammar for every
> different paths we make over the parse tree. Without a return value from a
> listener event (which I want to use for tree rewriting), how do we get a
> value up the tree in a computation?  We can't really use temporary fields of
> the listener object because it's hard to tell which value gets associated
> with which listener method. we would need a temporary fields to hold result
> values from each listener. actually, I'm not even sure that would work. We
> need to associate result values with sub tree roots (i.e. contexts). In
> other words, we need a way to dynamically add fields to contexts for the
> specific purpose of a particular parse tree walk. One can imagine that I
> have a pass for computing the type of expression and another pass for
> computing the value. In both cases, I need result values for each subtree
> (type and then value).
> 
> Maybe that is just a hash table from ctx node to value;
> Map<ParserRuleContext, Object>. maybe. That presents a few issues for me
> because I use hashCode/equals in a weird way for use with grammar analysis,
> but that would be the idea.
> 
> class MyGListener extends BlankGListener {
> 	Map<ParserRuleContext, Integer> results = .;
> 
> 	public void exitRule(AParser.multContext ctx) { results.put(ctx,
> results.get(ctx.a) * results.get(ctx.b)); }
> 	public void exitRule(AParser.addContext ctx) { results.put(ctx,
> results.get(ctx.a) + results.get(ctx.b)); } }
> 
> not very pretty in Java. Python would look better:
> 
> results[ctx] = results[ctx.a] * results[ctx.b];
> 
> This way we can associate any values we need to for any node, in effect,
> decorating the parse tree as needed.
> 
> What do people think about the solution? is there a way I can automate some
> of this? I think that Python and Ruby would make short work of that because
> they allow dynamically adding fields (normally a horrible thing to do) ;) Is
> there a better way to do decorations in Java?
> 
> Ter
> 
> On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:
> 
>> Excellent, congratulations and thank you.
>> 
>> I just spent about half an hour playing with variations on A.g4 (since 
>> it worked right out of the box I had to keep going...)  and this is 
>> really nice.  This is the first time I've looked at the new-in-antlr 
>> listener paradigm.  I will need a while to fully appreciate the doors this
> opens.
>> Honey Badger makes things easy, so I want to stay on his (?) good side.
>> 
>> Q: how do you tell a boy Honey Badger from a girl Honey Badger?
>> 
>> A: you don't.  they're both bad-ass.
> 
> nice!
> 
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Wed Jan 11 19:05:44 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 11 Jan 2012 19:05:44 -0800
Subject: [antlr-interest] Extending contexts in code (was "Appropriate
	use of honey badger listeners")
In-Reply-To: <3CB1BD3B-D3A1-4EDE-A595-73C8E512F8E2@cs.usfca.edu>
References: <089601ccd0d5$88418af0$98c4a0d0$@tunnelvisionlabs.com>
	<3CB1BD3B-D3A1-4EDE-A595-73C8E512F8E2@cs.usfca.edu>
Message-ID: <6A2364D5-00A8-4BBB-99C9-C5C662F2B0E5@cs.usfca.edu>

Actually, parse tree is already created when we walk it. can't change the objects at that point.
Ter
On Jan 11, 2012, at 6:56 PM, Terence Parr wrote:

> 
> On Jan 11, 2012, at 6:54 PM, Sam Harwell wrote:
> 
>> To "dynamically add fields", add the following method for each rule foo:
>> 
>> protected fooContext newContext_foo() { return new fooContext(); }
> 
> so then these are "factories" and we subclass parser to alter?  What if we need multiple kinds of fooContext for different passes?
> 
> Ter
>> 
>> If you keep the same implementation of labels, also add the following for a
>> label #mult inside rule foo:
>> 
>> protected multContext newContext_mult(fooContext originalContext) {
>>   multContext result = new multContext();
>>   result.copyFrom(originalContext);
>>   return result;
>> }
>> 
>> Now you can extend any context you want in code only. :)
>> 
>> --
>> Sam Harwell
>> Owner, Lead Developer
>> http://tunnelvisionlabs.com
>> 
>> 
>> -----Original Message-----
>> From: Terence Parr [mailto:parrt at cs.usfca.edu] 
>> Sent: Wednesday, January 11, 2012 6:40 PM
>> To: ANTLR Interest Mailing List
>> Subject: [antlr-interest] Appropriate use of honey badger listeners
>> 
>> hi Kyle,
>> 
>> I have 2 questions about the current listener mechanism:
>> 
>> 1. How do we return values from listener methods so that we can do
>> computations?
>> 2. How do we alter a parse tree?
>> 
>> For 2, I think we return a new tree as a return value and the parse tree
>> walker will incorporate that into the tree if it sees a different tree come
>> back. In other words, it will do something like this in the walker:
>> 
>> newtree = listener.someEvent(oldtree);
>> if ( newtree!=oldtree ) replace-oldtree-with-newtree;
>> 
>> For 1, I don't have a great answer. To make this more concrete, imagine we
>> have an expression rule and we want to use listener events to compute the
>> value of an expression. So, instead of having actions in the grammar  like:
>> 
>> e returns [int v]
>>     : a=e '*' b=e {$v = $a.v * $b.v;}
>> 
>> we would simply match it
>> 
>> e : e '*' e -> mult .
>> 
>> and then have listener events compute values. but where does of the listener
>> object store the intermediate results of a subtree computation? Certainly we
>> don't want to have to add "returns [int v]" to the grammar for every
>> different paths we make over the parse tree. Without a return value from a
>> listener event (which I want to use for tree rewriting), how do we get a
>> value up the tree in a computation?  We can't really use temporary fields of
>> the listener object because it's hard to tell which value gets associated
>> with which listener method. we would need a temporary fields to hold result
>> values from each listener. actually, I'm not even sure that would work. We
>> need to associate result values with sub tree roots (i.e. contexts). In
>> other words, we need a way to dynamically add fields to contexts for the
>> specific purpose of a particular parse tree walk. One can imagine that I
>> have a pass for computing the type of expression and another pass for
>> computing the value. In both cases, I need result values for each subtree
>> (type and then value).
>> 
>> Maybe that is just a hash table from ctx node to value;
>> Map<ParserRuleContext, Object>. maybe. That presents a few issues for me
>> because I use hashCode/equals in a weird way for use with grammar analysis,
>> but that would be the idea.
>> 
>> class MyGListener extends BlankGListener {
>> 	Map<ParserRuleContext, Integer> results = .;
>> 
>> 	public void exitRule(AParser.multContext ctx) { results.put(ctx,
>> results.get(ctx.a) * results.get(ctx.b)); }
>> 	public void exitRule(AParser.addContext ctx) { results.put(ctx,
>> results.get(ctx.a) + results.get(ctx.b)); } }
>> 
>> not very pretty in Java. Python would look better:
>> 
>> results[ctx] = results[ctx.a] * results[ctx.b];
>> 
>> This way we can associate any values we need to for any node, in effect,
>> decorating the parse tree as needed.
>> 
>> What do people think about the solution? is there a way I can automate some
>> of this? I think that Python and Ruby would make short work of that because
>> they allow dynamically adding fields (normally a horrible thing to do) ;) Is
>> there a better way to do decorations in Java?
>> 
>> Ter
>> 
>> On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:
>> 
>>> Excellent, congratulations and thank you.
>>> 
>>> I just spent about half an hour playing with variations on A.g4 (since 
>>> it worked right out of the box I had to keep going...)  and this is 
>>> really nice.  This is the first time I've looked at the new-in-antlr 
>>> listener paradigm.  I will need a while to fully appreciate the doors this
>> opens.
>>> Honey Badger makes things easy, so I want to stay on his (?) good side.
>>> 
>>> Q: how do you tell a boy Honey Badger from a girl Honey Badger?
>>> 
>>> A: you don't.  they're both bad-ass.
>> 
>> nice!
>> 
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kferrio at gmail.com  Wed Jan 11 20:20:50 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 11 Jan 2012 21:20:50 -0700
Subject: [antlr-interest] Extending contexts in code (was "Appropriate
 use of honey badger listeners")
In-Reply-To: <089601ccd0d5$88418af0$98c4a0d0$@tunnelvisionlabs.com>
References: <089601ccd0d5$88418af0$98c4a0d0$@tunnelvisionlabs.com>
Message-ID: <CAAfeETqMNOEJNZCVRPWUp-2RKnPJXHpZosThkRrG-rB-vmhW1g@mail.gmail.com>

Sam,

It's quite possible I missed part of your intent.  And with respect for
your clearly evident skill, I'm not sure I'd want to be creating factories
as an antlr user.  Factories are great for library writers but maybe less
so in the hands of mortals like me.  But perhaps you meant that this code
could be autogenerated by the antlr tool?  Oh wait, I just saw Ter's post
below.  Anyway, I'll hit "send" in case this leads someplace.

Kyle


On Wed, Jan 11, 2012 at 7:54 PM, Sam Harwell <sam at tunnelvisionlabs.com>wrote:

> To "dynamically add fields", add the following method for each rule foo:
>
> protected fooContext newContext_foo() { return new fooContext(); }
>
> If you keep the same implementation of labels, also add the following for a
> label #mult inside rule foo:
>
> protected multContext newContext_mult(fooContext originalContext) {
>    multContext result = new multContext();
>    result.copyFrom(originalContext);
>    return result;
> }
>
> Now you can extend any context you want in code only. :)
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Wednesday, January 11, 2012 6:40 PM
> To: ANTLR Interest Mailing List
> Subject: [antlr-interest] Appropriate use of honey badger listeners
>
> hi Kyle,
>
> I have 2 questions about the current listener mechanism:
>
> 1. How do we return values from listener methods so that we can do
> computations?
> 2. How do we alter a parse tree?
>
> For 2, I think we return a new tree as a return value and the parse tree
> walker will incorporate that into the tree if it sees a different tree come
> back. In other words, it will do something like this in the walker:
>
> newtree = listener.someEvent(oldtree);
> if ( newtree!=oldtree ) replace-oldtree-with-newtree;
>
> For 1, I don't have a great answer. To make this more concrete, imagine we
> have an expression rule and we want to use listener events to compute the
> value of an expression. So, instead of having actions in the grammar  like:
>
> e returns [int v]
>      : a=e '*' b=e {$v = $a.v * $b.v;}
>
> we would simply match it
>
> e : e '*' e -> mult .
>
> and then have listener events compute values. but where does of the
> listener
> object store the intermediate results of a subtree computation? Certainly
> we
> don't want to have to add "returns [int v]" to the grammar for every
> different paths we make over the parse tree. Without a return value from a
> listener event (which I want to use for tree rewriting), how do we get a
> value up the tree in a computation?  We can't really use temporary fields
> of
> the listener object because it's hard to tell which value gets associated
> with which listener method. we would need a temporary fields to hold result
> values from each listener. actually, I'm not even sure that would work. We
> need to associate result values with sub tree roots (i.e. contexts). In
> other words, we need a way to dynamically add fields to contexts for the
> specific purpose of a particular parse tree walk. One can imagine that I
> have a pass for computing the type of expression and another pass for
> computing the value. In both cases, I need result values for each subtree
> (type and then value).
>
> Maybe that is just a hash table from ctx node to value;
> Map<ParserRuleContext, Object>. maybe. That presents a few issues for me
> because I use hashCode/equals in a weird way for use with grammar analysis,
> but that would be the idea.
>
> class MyGListener extends BlankGListener {
>        Map<ParserRuleContext, Integer> results = .;
>
>        public void exitRule(AParser.multContext ctx) { results.put(ctx,
> results.get(ctx.a) * results.get(ctx.b)); }
>        public void exitRule(AParser.addContext ctx) { results.put(ctx,
> results.get(ctx.a) + results.get(ctx.b)); } }
>
> not very pretty in Java. Python would look better:
>
> results[ctx] = results[ctx.a] * results[ctx.b];
>
> This way we can associate any values we need to for any node, in effect,
> decorating the parse tree as needed.
>
> What do people think about the solution? is there a way I can automate some
> of this? I think that Python and Ruby would make short work of that because
> they allow dynamically adding fields (normally a horrible thing to do) ;)
> Is
> there a better way to do decorations in Java?
>
> Ter
>
> On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:
>
> > Excellent, congratulations and thank you.
> >
> > I just spent about half an hour playing with variations on A.g4 (since
> > it worked right out of the box I had to keep going...)  and this is
> > really nice.  This is the first time I've looked at the new-in-antlr
> > listener paradigm.  I will need a while to fully appreciate the doors
> this
> opens.
> > Honey Badger makes things easy, so I want to stay on his (?) good side.
> >
> > Q: how do you tell a boy Honey Badger from a girl Honey Badger?
> >
> > A: you don't.  they're both bad-ass.
>
> nice!
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Wed Jan 11 20:39:05 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 11 Jan 2012 21:39:05 -0700
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
Message-ID: <CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>

Hi Ter,

I don't have answers, but I have questions which might at least cut off
some dead ends...

I agree that point #2 seems pretty clear.  And I realize that this:

    newtree = listener.someEvent(oldtree);
    if ( newtree!=oldtree ) replace-oldtree-with-newtree;

is pseudo-code.  You probably have this all worked out, but it occurs to me
that comparing two trees may be more expensive than necessary.  Despite the
fact that walking a tree of n nodes is O(n), and so comparing two trees
(non-naively) is also O(n), there may be a lot of data in those nodes to
compare.  If all we care about is detecting changes, a significant speedup
is possible if the interface for a tree object (or for listeners acting on
trees?) includes a flag that gets flipped by any operation which has the
possibility of changing the tree.  (N.B. Possibility, not guarantee.  A
guarantee would require the eval we're trying to avoid.)  This tiny bit of
added API built into a Listener baseclass for processing tree changes
(which are all covered by a small, finite set of generic operations) would
turn the subsequent O(n) comparison into O(1).  I'm not sure how this fits
with your design.  Of course, all bets are off if someone messes with the
tree directly.  (N.B. Alternatively, a hash on trees would be almost as
cheap and require no extra API, but that only works if we're willing to
treat topologically equivalent trees with different memory layouts (e.g.
flipping a tree left-to right) as different.)

Ok, now point #1.  Not sure how to approach this, but...

Thought: If the root of a rule r which returns a value does not declare the
type of value expected, two questions arise. One, where/when does the antlr
tool perform type-checking for the rules which consume rule r?  Two,
where/when does the antlr tool perform type-checking of the retvals from
listeners for different alts of r?  Perhaps an explicit
decoration/declaration of a type T at the root of r is the easiest,
clearest and safest way to communicate to all of the listeners of all of
the alts of r that they must return type T.  My thinking here is probably
clouded by my preternaturally strong preference for static typing.

Thought: If we try to be clever about types, then there seems to be a
trade-off between elegance in a grammar and elegance in the implementation
of listeners.  I am not convinced that this is fundamental, but that's
where my thinking is this minute.

Thought: Java will almost always lose to Python in syntactic beauty
contests.  So don't compare them to each other.  (Compare them to
JavaScript, and they both look gorgeous!  Shucks, adding fields dynamically
is one thing js does do nicely.)  For my part, I think that

    public void exitRule(AParser.multContext ctx) { results.put(ctx,
results.get(ctx.a) * results.get(ctx.b)); }

does not look any worse than a lot of Java which I consider to be overly
verbose anyway.  The question for me is, is it clear?  And my answer is
yes.   But as I mentioned in another thread, I am just starting to absorb
the listener model for v4,

Well, I'm not sure if any of this helps.  But I'm reasonably confident that
it does not hurt.

Kyle





On Wed, Jan 11, 2012 at 5:39 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> hi Kyle,
>
> I have 2 questions about the current listener mechanism:
>
> 1. How do we return values from listener methods so that we can do
> computations?
> 2. How do we alter a parse tree?
>
> For 2, I think we return a new tree as a return value and the parse tree
> walker will incorporate that into the tree if it sees a different tree come
> back. In other words, it will do something like this in the walker:
>
> newtree = listener.someEvent(oldtree);
> if ( newtree!=oldtree ) replace-oldtree-with-newtree;
>
> For 1, I don't have a great answer. To make this more concrete, imagine we
> have an expression rule and we want to use listener events to compute the
> value of an expression. So, instead of having actions in the grammar  like:
>
> e returns [int v]
>      : a=e '*' b=e {$v = $a.v * $b.v;}
>
> we would simply match it
>
> e : e '*' e -> mult ?
>
> and then have listener events compute values. but where does of the
> listener object store the intermediate results of a subtree computation?
> Certainly we don't want to have to add "returns [int v]" to the grammar for
> every different paths we make over the parse tree. Without a return value
> from a listener event (which I want to use for tree rewriting), how do we
> get a value up the tree in a computation?  We can't really use temporary
> fields of the listener object because it's hard to tell which value gets
> associated with which listener method. we would need a temporary fields to
> hold result values from each listener. actually, I'm not even sure that
> would work. We need to associate result values with sub tree roots (i.e.
> contexts). In other words, we need a way to dynamically add fields to
> contexts for the specific purpose of a particular parse tree walk. One can
> imagine that I have a pass for computing the type of expression and another
> pass for computing the value. In both cases, I need result values for each
> subtree (type and then value).
>
> Maybe that is just a hash table from ctx node to value;
> Map<ParserRuleContext, Object>. maybe. That presents a few issues for me
> because I use hashCode/equals in a weird way for use with grammar analysis,
> but that would be the idea.
>
> class MyGListener extends BlankGListener {
>        Map<ParserRuleContext, Integer> results = ?;
>
>        public void exitRule(AParser.multContext ctx) { results.put(ctx,
> results.get(ctx.a) * results.get(ctx.b)); }
>        public void exitRule(AParser.addContext ctx) { results.put(ctx,
> results.get(ctx.a) + results.get(ctx.b)); }
> }
>
> not very pretty in Java. Python would look better:
>
> results[ctx] = results[ctx.a] * results[ctx.b];
>
> This way we can associate any values we need to for any node, in effect,
> decorating the parse tree as needed.
>
> What do people think about the solution? is there a way I can automate
> some of this? I think that Python and Ruby would make short work of that
> because they allow dynamically adding fields (normally a horrible thing to
> do) ;) Is there a better way to do decorations in Java?
>
> Ter
>
> On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:
>
> > Excellent, congratulations and thank you.
> >
> > I just spent about half an hour playing with variations on A.g4 (since it
> > worked right out of the box I had to keep going...)  and this is really
> > nice.  This is the first time I've looked at the new-in-antlr listener
> > paradigm.  I will need a while to fully appreciate the doors this opens.
> > Honey Badger makes things easy, so I want to stay on his (?) good side.
> >
> > Q: how do you tell a boy Honey Badger from a girl Honey Badger?
> >
> > A: you don't.  they're both bad-ass.
>
> nice!
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From antlr at mirality.co.nz  Wed Jan 11 21:30:46 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 12 Jan 2012 18:30:46 +1300
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.g
	mail.com>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
Message-ID: <20120112053056.80B643418043@www.antlr.org>

At 17:39 12/01/2012, Kyle Ferrio wrote:
 >If all we care about is detecting changes, a significant
 >speedup is possible if the interface for a tree object (or
 >for listeners acting on trees?) includes a flag that gets
 >flipped by any operation which has the possibility of
 >changing the tree.  (N.B. Possibility, not guarantee.  A
 >guarantee would require the eval we're trying to avoid.)

The usual solution for that is a version number, initialised to 
zero and incremented on any operation that alters the tree.  Much 
safer than a flag. :)

-- 
Gavin Lambert, Mirality Systems
<http://www.mirality.co.nz/>
<http://lambert.geek.nz/>
----
Anyone who goes to a psychiatrist ought to have their head 
examined.

Few women admit their age.  Few men act theirs.


From kferrio at gmail.com  Wed Jan 11 22:11:14 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 11 Jan 2012 23:11:14 -0700
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <4f0e700f.aab9ec0a.7286.3344SMTPIN_ADDED@mx.google.com>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
	<4f0e700f.aab9ec0a.7286.3344SMTPIN_ADDED@mx.google.com>
Message-ID: <CAAfeETqLSP7sOpnOWraHN0c1f97r2dYdq+gtzJSCj4d8h96qZw@mail.gmail.com>

Hi Gavin,

I may be missing something (I often do) but as best I can tell, we're
concerned with identity v. non-identity only, and not history, of trees.
So I don't understand how a version number is safer than a flag.  Sure, a
flag can be erroneously flipped back, but as version number can be
erroneously set to anything.  I'm not sure either is more likely than the
other.  But I completely agree that a version number works at least as well
as a flag.  Both reduce the comparison from O(n) to O(1).  And if a version
number is safer, great!

Meanwhile, I'm really having a hard time coming up with any elegant answer
to the challenge in Part 1 of Ter's original post.  I'm not yet resigned to
a "conservation of ugliness" principle (in the grammar v. in the listener)
but I admit I don't have anything better at the moment.  You guys who live
in the belly of antlr will know better than me.

Kyle

On Wed, Jan 11, 2012 at 10:30 PM, Gavin Lambert <antlr at mirality.co.nz>wrote:

> At 17:39 12/01/2012, Kyle Ferrio wrote:
> >If all we care about is detecting changes, a significant
> >speedup is possible if the interface for a tree object (or
> >for listeners acting on trees?) includes a flag that gets
> >flipped by any operation which has the possibility of
> >changing the tree.  (N.B. Possibility, not guarantee.  A
> >guarantee would require the eval we're trying to avoid.)
>
> The usual solution for that is a version number, initialised to zero and
> incremented on any operation that alters the tree.  Much safer than a flag.
> :)
>
> --
> Gavin Lambert, Mirality Systems
> <http://www.mirality.co.nz/>
> <http://lambert.geek.nz/>
> ----
> Anyone who goes to a psychiatrist ought to have their head examined.
>
> Few women admit their age.  Few men act theirs.
>
>

From martijn.reuvers at gmail.com  Wed Jan 11 23:22:30 2012
From: martijn.reuvers at gmail.com (Martijn Reuvers)
Date: Thu, 12 Jan 2012 08:22:30 +0100
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
Message-ID: <CAON31m7md3j+ZsMuGuoKrCGGmo7rN5D518-s9K8CVr7LToBKGQ@mail.gmail.com>

Hey guys,

For option 1:
I would suggest you add something on the parsercontext directly
instead of using a plain hashmap. It should be dynamic I think - and
be up to the user to set it. You could set a default implementation,
which 'underwater' could work with the suggested Map and is good
enough for most. But users are completely free to replace it.

E.g. use a marker interface for the 'storage' thing.

// Marker
interface Storage {

}

// Provide a default implementation, but which can be replaced by the
user if needed (e.g. when a parser starts).
class StorageImpl implements Storage {

   // Implementation is customer specific, whatever you please - you
can store in whatever way.
   // In most cases you do not need a map and just want to store
values directly (after all getStorage().setValue(..) /
getStorage().getValue() are always much faster than maps due to
hashing).

}

// Start of parse somewhere user can replace the default (by class,
MyStorage.class if you need it dynamically), or they just replace it
on the rules where needed while listening.
parserContext.replaceStorage(new MyCustomStorage())

Just some thoughts.

Cheers!
Martijn

On Thu, Jan 12, 2012 at 1:39 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> hi Kyle,
>
> I have 2 questions about the current listener mechanism:
>
> 1. How do we return values from listener methods so that we can do computations?
> 2. How do we alter a parse tree?
>
> For 2, I think we return a new tree as a return value and the parse tree walker will incorporate that into the tree if it sees a different tree come back. In other words, it will do something like this in the walker:
>
> newtree = listener.someEvent(oldtree);
> if ( newtree!=oldtree ) replace-oldtree-with-newtree;
>
> For 1, I don't have a great answer. To make this more concrete, imagine we have an expression rule and we want to use listener events to compute the value of an expression. So, instead of having actions in the grammar ?like:
>
> e returns [int v]
> ? ? ?: a=e '*' b=e {$v = $a.v * $b.v;}
>
> we would simply match it
>
> e : e '*' e -> mult ?
>
> and then have listener events compute values. but where does of the listener object store the intermediate results of a subtree computation? Certainly we don't want to have to add "returns [int v]" to the grammar for every different paths we make over the parse tree. Without a return value from a listener event (which I want to use for tree rewriting), how do we get a value up the tree in a computation? ?We can't really use temporary fields of the listener object because it's hard to tell which value gets associated with which listener method. we would need a temporary fields to hold result values from each listener. actually, I'm not even sure that would work. We need to associate result values with sub tree roots (i.e. contexts). In other words, we need a way to dynamically add fields to contexts for the specific purpose of a particular parse tree walk. One can imagine that I have a pass for computing the type of expression and another pass for computing the value. In both cases, I need result values for each subtree (type and then value).
>
> Maybe that is just a hash table from ctx node to value; Map<ParserRuleContext, Object>. maybe. That presents a few issues for me because I use hashCode/equals in a weird way for use with grammar analysis, but that would be the idea.
>
> class MyGListener extends BlankGListener {
> ? ? ? ?Map<ParserRuleContext, Integer> results = ?;
>
> ? ? ? ?public void exitRule(AParser.multContext ctx) { results.put(ctx, results.get(ctx.a) * results.get(ctx.b)); }
> ? ? ? ?public void exitRule(AParser.addContext ctx) { results.put(ctx, results.get(ctx.a) + results.get(ctx.b)); }
> }
>
> not very pretty in Java. Python would look better:
>
> results[ctx] = results[ctx.a] * results[ctx.b];
>
> This way we can associate any values we need to for any node, in effect, decorating the parse tree as needed.
>
> What do people think about the solution? is there a way I can automate some of this? I think that Python and Ruby would make short work of that because they allow dynamically adding fields (normally a horrible thing to do) ;) Is there a better way to do decorations in Java?
>
> Ter
>
> On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:
>
>> Excellent, congratulations and thank you.
>>
>> I just spent about half an hour playing with variations on A.g4 (since it
>> worked right out of the box I had to keep going...) ?and this is really
>> nice. ?This is the first time I've looked at the new-in-antlr listener
>> paradigm. ?I will need a while to fully appreciate the doors this opens.
>> Honey Badger makes things easy, so I want to stay on his (?) good side.
>>
>> Q: how do you tell a boy Honey Badger from a girl Honey Badger?
>>
>> A: you don't. ?they're both bad-ass.
>
> nice!
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From serefarikan at kurumsalteknoloji.com  Thu Jan 12 04:47:27 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Thu, 12 Jan 2012 12:47:27 +0000
Subject: [antlr-interest] Feedback request from veterans: thin vs thick
	lexer in grammars
Message-ID: <CA+4ThdrT=RJMK_41uY2mxqLUAVkusz6zeEqAH81OEMGJbgUOcQ@mail.gmail.com>

Greetings,
Having spent a few weeks on Anltr and still trying to establish the basics,
I've realized two things: I am a bit thick, and there is not an established
best practice in assigning key tasks to parser and lexer.
You can't help about the first one, but your input regarding the second
would be much appreciated. If there is a wiki page that discusses the
issue, I'd like to know about that.

I've looked at the C grammar (from Terence) for example, which uses a very
thin lexer section, with all keywords etc expressed as parser rules. Oracle
sql grammar does the same, most keywords are parser rules.
MySql Grammar and Sql 2003 grammar follow the other route; they both make
keywords tokens, and handle the obvious outcome of this choice: specific
tokens being recognized in the middle of other literals, as in 'select'
becoming a token in selected_vars.
I can see that Jim Idle has answered relevant questions in the past,
suggesting that lexer rules are used for tokens. He has also given the
solution to handling the 'select' in select_vars problem.

I do not mean to start a flame war (if that is possible at all), but with
different grammars following different methods, I'd like to hear from the
community regarding their experience. I am in the process of porting a
grammar that has originated from a LR parser framework, and I have a few
more grammars to develop for my PhD work. Making right choices now is
critical.

Kind regards
Seref

From chwchw at gmx.de  Thu Jan 12 05:34:28 2012
From: chwchw at gmx.de (Christian)
Date: Thu, 12 Jan 2012 14:34:28 +0100
Subject: [antlr-interest] Bug: String constant is too big in Parser
 generated by ANTLR v4
In-Reply-To: <D2FD2B3C-BD52-4ABC-8AE6-FFB8C92AECE9@cs.usfca.edu>
References: <4F0E35CC.4040003@gmx.de>
	<D2FD2B3C-BD52-4ABC-8AE6-FFB8C92AECE9@cs.usfca.edu>
Message-ID: <4F0EE164.3070309@gmx.de>

It's a combined grammar of the complete Spec C# v4. The parser's string
constant extends to 2000 LOC, the lexer's to 1000 LOC. Moreover, it
would be great if you could extract the constant into another class so
that loading and displaying the parser file with an editor (e.g.
Eclipse) does not take so long.

Am 12.01.2012 02:31, schrieb Terence Parr:
> thanks?wondering if this would come up.  Wow. big grammar?
> Ter
> On Jan 11, 2012, at 5:22 PM, Christian wrote:
>
>> Hi everybody and especially Terence!
>>
>> I get the following error message from Eclipse after ANTLR v4 has
>> generated the parser in Java:
>>
>>    The type generates a string that requires more than 65535 bytes to
>> encode in Utf8 format in the constant pool.
>>
>> I think this is due to your _serializedATN string. Could you dynamically
>> build it with a StringBuilder perhaps? If you fix it, apply the same
>> solution to the lexer please.
>>
>> Regards,
>> Christian
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From ibre5041 at ibrezina.net  Thu Jan 12 07:10:53 2012
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Thu, 12 Jan 2012 16:10:53 +0100
Subject: [antlr-interest] Feedback request from veterans: thin vs
	thick	lexer in grammars
In-Reply-To: <CA+4ThdrT=RJMK_41uY2mxqLUAVkusz6zeEqAH81OEMGJbgUOcQ@mail.gmail.com>
References: <CA+4ThdrT=RJMK_41uY2mxqLUAVkusz6zeEqAH81OEMGJbgUOcQ@mail.gmail.com>
Message-ID: <20120112161053.g7s3kea734coo440@webmail.kamm.cz>


Hi,
it's questionable what goals you have when you develop a grammar.
Of course first of all it must valid.
On the other hand you can have other criteria like:
The grammar compiles in reasonable time. Especially when you have tens  
of failed
test and you intend to fix them one by one.

Also you may require, that ANTLR has reasonable memory requirements,
and also you may encounter problems with static initializations of the Java
classes(64KB of bytecode limit).

So if you want to reduce the size of the parser you turn some lexer rules into
parsers ones and then switch to backtracking mode. (Especially when  
your grammar
allows keywords to be used as identifiers).

That's the reason why I used parser rules. I had to implement some "small"
bugfixes, whose handled some obscure language constructs. Each of  
these changes
doubled ANTLR memory requirements.
Ivan


Quoting Seref Arikan <serefarikan at kurumsalteknoloji.com>:

> Greetings,
> Having spent a few weeks on Anltr and still trying to establish the basics,
> I've realized two things: I am a bit thick, and there is not an established
> best practice in assigning key tasks to parser and lexer.
> You can't help about the first one, but your input regarding the second
> would be much appreciated. If there is a wiki page that discusses the
> issue, I'd like to know about that.
>
> I've looked at the C grammar (from Terence) for example, which uses a very
> thin lexer section, with all keywords etc expressed as parser rules. Oracle
> sql grammar does the same, most keywords are parser rules.
> MySql Grammar and Sql 2003 grammar follow the other route; they both make
> keywords tokens, and handle the obvious outcome of this choice: specific
> tokens being recognized in the middle of other literals, as in 'select'
> becoming a token in selected_vars.
> I can see that Jim Idle has answered relevant questions in the past,
> suggesting that lexer rules are used for tokens. He has also given the
> solution to handling the 'select' in select_vars problem.
>
> I do not mean to start a flame war (if that is possible at all), but with
> different grammars following different methods, I'd like to hear from the
> community regarding their experience. I am in the process of porting a
> grammar that has originated from a LR parser framework, and I have a few
> more grammars to develop for my PhD work. Making right choices now is
> critical.
>
> Kind regards
> Seref
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:   
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.


From bschonga at cisco.com  Thu Jan 12 09:17:51 2012
From: bschonga at cisco.com (Bill Schongar)
Date: Thu, 12 Jan 2012 12:17:51 -0500
Subject: [antlr-interest] Repository of common tokens?
Message-ID: <CB347FEF.2B9E8%bschonga@cisco.com>


I was getting ready to start writing some tokens for parsing email addresses
and such, and wondered if somehow I?ve overlooked a link somewhere to good
pre-existing grammars and/or tokens for reuse.

Is there something out there that I?m just blindly lurching past in my
searches?

Thanks,
-Bill
 

From jimi at temporal-wave.com  Thu Jan 12 10:07:26 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 12 Jan 2012 10:07:26 -0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
Message-ID: <2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>

I do plan on doing that in fact. However I would like to respond to the
criticisms here as follows:

1) I wrote the C runtime in under two weeks because I needed it for a
project and at that time ANTLR v3 was not released (beta). Hence by
waiting until v4 runtime is stable then we should get some cleaner
runtimes.
2) So, I did not really know how anyone else would want to use it and so I
made absolutely everything dynamic. Since that time there have been lots
of memory and performance tweaks, but I am sure there are more I can do.
3) I basically copied the Java model as is with the idea being that it
would be easier to follow changes that were made to the Java runtime in
the C runtime.
4) There are performance enhancements you can turn on such as adding
defines for ANTLR3_INLINE_INPUT_8BIT or ANTLR3_INLINE_INPUT_16BIT and
defining SKIP_FOLLOW_SETS to avoid stacking rule descriptors only used by
error reporting.
5) All my tests and most everyone else finds the C v3 runtime to be faster
than the C++ runtime, so I can only conclude that there is something
different about one or two grammar files.
6) I did implement reuse other than for trees and that helps most of the
use cases where the initial memory allocation takes time and so you don't
want to tear it down and re-allocate it.
7) It is a lot easier to start with someone else's code than it is to
start with vi and a blank screen. Where's the love?
8) ANTLR is naturally more heavyweight than some other tools, but it is
usually easier to use it.
9) Why not wait for v4 where some of these things are addressed as a
natural consequence of the design.


A minimum token needs the type and a pointer to the text, plus either a
pointer to the end of the text or the length. If you use a length then
with encodings like UTF8, you will start to need to traverse the text to
extract nnn characters. There are always tradeoffs. Pointers are 64 bits
not 32 bits on a 64 bit compiler. You can compile in 32 bit mode if you
don't need 64 bit stuff.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of A Z
> Sent: Wednesday, January 11, 2012 5:38 PM
> To: Ruslan Zasukhin
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr v4 - C++ target
>
> The realistic minimum I see for commontoken in the existing 3.4 code is
> 32 bytes on a 64-bit architecture. This would involve modifications to
> the code generator to no longer use the function pointers(for
> setStart/setStopIndex/setType) and using a smaller data type for the
> channel, factory and type members. There is still an additional
> 16B/token used by the vector data structure holding the tokens.
>
>
>
> On Wed, Jan 11, 2012 at 5:09 PM, Ruslan Zasukhin <
> ruslan_zasukhin at valentina-db.com> wrote:
>
> > On 1/11/12 11:12 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:
> >
> > > If Jim did not implement the vtable indirection (that could be
> > > easily
> > changed,
> > > if so), then there is a little more opportunity for optimization,
> > > but
> > still
> > > the problem is that state information takes up much more memory
> than
> > does the
> > > text in tokens.
> >
> > Right,
> >
> > Well, lets look on antrl3commontoken.h
> >
> > API:
> >        19   pointers to func
> >                        32 bit os    19 * 4  = 76 bytes
> >
> > And about
> >        11 * 4 bytes  of useful info
> >
> >
> > So there is chance that in c++ style
> > OR with single pointer on ala-VT  token will become
> >
> >    from 118 bytes to 48 bytes
> >
> >
> >
> > --
> > Best regards,
> >
> > Ruslan Zasukhin
> > VP Engineering and New Technology
> > Paradigma Software, Inc
> >
> > Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
> >
> > [I feel the need: the need for speed]
> >
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From parrt at cs.usfca.edu  Thu Jan 12 10:28:47 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 12 Jan 2012 10:28:47 -0800
Subject: [antlr-interest] Bug: String constant is too big in Parser
	generated by ANTLR v4
In-Reply-To: <4F0EE164.3070309@gmx.de>
References: <4F0E35CC.4040003@gmx.de>
	<D2FD2B3C-BD52-4ABC-8AE6-FFB8C92AECE9@cs.usfca.edu>
	<4F0EE164.3070309@gmx.de>
Message-ID: <90F64FDE-5C1F-4B1A-8142-5954672B1EA9@cs.usfca.edu>

 would have made a separate file,But it's just one more thing that can go wrong. Somebody could forget to include it, because it's not a .class file, and you might hook up the wrong file or the wrong version. Better to keep it all in the same file encapsulated. I guess I will simply have to break into multiple streams, which is easy enough. gzip'ing reduces it to about 25% of its original size, which can help your file size in the editor issue.
Ter
On Jan 12, 2012, at 5:34 AM, Christian wrote:

> It's a combined grammar of the complete Spec C# v4. The parser's string
> constant extends to 2000 LOC, the lexer's to 1000 LOC. Moreover, it
> would be great if you could extract the constant into another class so
> that loading and displaying the parser file with an editor (e.g.
> Eclipse) does not take so long.
> 
> Am 12.01.2012 02:31, schrieb Terence Parr:
>> thanks?wondering if this would come up.  Wow. big grammar?
>> Ter
>> On Jan 11, 2012, at 5:22 PM, Christian wrote:
>> 
>>> Hi everybody and especially Terence!
>>> 
>>> I get the following error message from Eclipse after ANTLR v4 has
>>> generated the parser in Java:
>>> 
>>>   The type generates a string that requires more than 65535 bytes to
>>> encode in Utf8 format in the constant pool.
>>> 
>>> I think this is due to your _serializedATN string. Could you dynamically
>>> build it with a StringBuilder perhaps? If you fix it, apply the same
>>> solution to the lexer please.
>>> 
>>> Regards,
>>> Christian
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From ruslan_zasukhin at valentina-db.com  Thu Jan 12 10:40:36 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Thu, 12 Jan 2012 20:40:36 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
Message-ID: <CB34F5C4.F872D%ruslan_zasukhin@valentina-db.com>

On 1/12/12 8:07 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:

Hi Jim,

> I do plan on doing that in fact. However I would like to respond to the
> criticisms here as follows:
> 
> 1) I wrote the C runtime in under two weeks because I needed it for a
> project and at that time ANTLR v3 was not released (beta).

Really great timing :)

But this also expose Jim, why  we did have so many pain porting
    v2 C++  to V3  C

Because there was no efforts to provide SMOTH switch.
Really who need this ?? :-)

> 5) All my tests and most everyone else finds the C v3 runtime to be faster
> than the C++ runtime, so I can only conclude that there is something
> different about one or two grammar files.

You mean you self did grammars for ANTLR v2 C++
And then compared grammar for v3 C?

Don't know, don't now ...

Speed is exactly the same ...
May be 5% only but this  not matters ...

We do not get x2 speed up


> 6) I did implement reuse other than for trees and that helps most of the
> use cases where the initial memory allocation takes time and so you don't
> want to tear it down and re-allocate it.

As I have told reuse() is NOT finished Jim.

It produce a lots of leaks.
I was able copied that idea of reuse to 2-3 other your classes.
And only after that  RAM is not eaten in our simple tests of SQL parser.

Unfortunately I have lost this changes "thanks to stupid XCODE mistake".
It have erase ANTLR folder ... And was no backup

So I need once again find day to recover that fix.
Only after that I will be able send you all this.


> 7) It is a lot easier to start with someone else's code than it is to
> start with vi and a blank screen. Where's the love?

I very love your code from point of view ... COOL CODE.
My personal opinion is that sources of PostgreSQL and your ANTLR3/C is may
be one of the best accurate code I have see in my life.


PROBLEM is that after huge our efforts from yet 2007 year,
When we have start step by step port v2 grammar,
Adopt code from C++ only  to  C++ called by C,
And so on ...

And this year from March 2011 to November 2011 was done also a lots of job
...

We have found leaks finally in working grammar,
And zero speed up and ....

Our product v5.0 next month still will use v2 ANTLR ..

Jim, it is not enough to create GREAT PIECE of software,
It really needs correct and complete docs to it ...

I don't know how other teams, but we have epic fail with
    ANTLR  v3  [C]    :-((((

At least one full developer-year spent, and ZERO bonus ... wow..

And yesterday Terrence expose point that ANTLR not try to be fast ... wow.


> 8) ANTLR is naturally more heavyweight than some other tools, but it is
> usually easier to use it.

ANTLR v2 C++ was easy, because it have VERY CLEAN defined API.

C was hard, because it is absolutely not clear what and when to call.
API was not well defined.


May be if we'd have docs, with 250 HOW TO questions, explained each by 10-20
lines of code life could be simpler  :*)


> 9) Why not wait for v4 where some of these things are addressed as a
> natural consequence of the design.

Well,  personally me, still will try fix back that leaks in v3.

Then I am going again spend time in profiler to see what can be improved yet
... But it seems to me in ANTLR code no way improve something ... Only may
be change our own code ... But then no matter v2 or v3


ALSO, wonder now is:
    what sense for EXISTED ANTLRv2 grammars to be ported to v3 or v4 ?

WHAT SENSE ??  What benefit?

I was in hope that v3/C will be x2 times faster:
    no STD strings,  memory pools, no exceptions ...

But speed same ...


Wait for v4? :-)
  We using v2 about 10 years ...
    We did wait 3 years for v3.4, while in July 2011 I have read about
implemented reuse() ...


Guys,  don't you think that it is strange that V3.0, 3.1, 3.2, 3.3,
did miss MAJOR feature of 2.x  ??   And 3.4 have leaks in this feature.

How this can be?

v4 again will drop 10-20% of major features of v3  ??

This not make porting as SMOOT as it must be ...

My 2 cents 


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From ruslan_zasukhin at valentina-db.com  Thu Jan 12 10:46:54 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Thu, 12 Jan 2012 20:46:54 +0200
Subject: [antlr-interest] Antlr v4 - C++ target -- idea for Terrence ...
In-Reply-To: <348F7B0E-3B7E-4602-A522-8649BD5EF151@cs.usfca.edu>
Message-ID: <CB34F73E.F8733%ruslan_zasukhin@valentina-db.com>

On 1/11/12 6:26 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

Hi Terrence,

> My focus for Honey Badger is not speed. It's ease of use.

Easy of use is important.

Easy of PORTING 
        v2 => v3,

As well as future  
        v2 => v4        (??)
        v3 => v4

Also is very important. Right?

I just have sent letter-answer to Jim, about pain-points we did have in
v2-v3 porting of our C++/C grammars.

At least will try not loose existed features as reuse()   :-)

> Most people are 
> fine with speed even if not optimal.  Most compiler writers don't use parser
> generators so I'm less worried about speed.

Well, we develop DBMS, so our SQL queries are small actually,
But we care about millions possible commands in hot loop

You really recommend us start develop hand-parser ?? :-)

I believe in your book I have read something as
    NEVER do hand-parser :)  to avoid many pain ...


==============
Well, may be somebody know what parser generator is the fastest on this
planet? :-)


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From asicaddress at gmail.com  Thu Jan 12 10:59:31 2012
From: asicaddress at gmail.com (A Z)
Date: Fri, 13 Jan 2012 00:59:31 +0600
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
Message-ID: <CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>

Hi Jim,

  I don't think there's anything wrong with the C target. My impression of
the code was that it was modified from the Java target and uses function
pointers to be easily modifiable. I don't have any performance issues other
than memory consumption and I think this is due to my atypical use case.
Overall, the tool works great and I appreciate all the work that went into
it.

  Sam's timeline of 1 year is too long to wait for the new C++ target so
I've already begun modifying the 3.4 lexer for my own purposes. I honestly
wasn't expecting any more changes to ANTLR3.



On Fri, Jan 13, 2012 at 12:07 AM, Jim Idle <jimi at temporal-wave.com> wrote:

> I do plan on doing that in fact. However I would like to respond to the
> criticisms here as follows:
>
> 1) I wrote the C runtime in under two weeks because I needed it for a
> project and at that time ANTLR v3 was not released (beta). Hence by
> waiting until v4 runtime is stable then we should get some cleaner
> runtimes.
> 2) So, I did not really know how anyone else would want to use it and so I
> made absolutely everything dynamic. Since that time there have been lots
> of memory and performance tweaks, but I am sure there are more I can do.
> 3) I basically copied the Java model as is with the idea being that it
> would be easier to follow changes that were made to the Java runtime in
> the C runtime.
> 4) There are performance enhancements you can turn on such as adding
> defines for ANTLR3_INLINE_INPUT_8BIT or ANTLR3_INLINE_INPUT_16BIT and
> defining SKIP_FOLLOW_SETS to avoid stacking rule descriptors only used by
> error reporting.
> 5) All my tests and most everyone else finds the C v3 runtime to be faster
> than the C++ runtime, so I can only conclude that there is something
> different about one or two grammar files.
> 6) I did implement reuse other than for trees and that helps most of the
> use cases where the initial memory allocation takes time and so you don't
> want to tear it down and re-allocate it.
> 7) It is a lot easier to start with someone else's code than it is to
> start with vi and a blank screen. Where's the love?
> 8) ANTLR is naturally more heavyweight than some other tools, but it is
> usually easier to use it.
> 9) Why not wait for v4 where some of these things are addressed as a
> natural consequence of the design.
>
>
> A minimum token needs the type and a pointer to the text, plus either a
> pointer to the end of the text or the length. If you use a length then
> with encodings like UTF8, you will start to need to traverse the text to
> extract nnn characters. There are always tradeoffs. Pointers are 64 bits
> not 32 bits on a 64 bit compiler. You can compile in 32 bit mode if you
> don't need 64 bit stuff.
>
> Jim
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of A Z
> > Sent: Wednesday, January 11, 2012 5:38 PM
> > To: Ruslan Zasukhin
> > Cc: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Antlr v4 - C++ target
> >
> > The realistic minimum I see for commontoken in the existing 3.4 code is
> > 32 bytes on a 64-bit architecture. This would involve modifications to
> > the code generator to no longer use the function pointers(for
> > setStart/setStopIndex/setType) and using a smaller data type for the
> > channel, factory and type members. There is still an additional
> > 16B/token used by the vector data structure holding the tokens.
> >
> >
> >
> > On Wed, Jan 11, 2012 at 5:09 PM, Ruslan Zasukhin <
> > ruslan_zasukhin at valentina-db.com> wrote:
> >
> > > On 1/11/12 11:12 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:
> > >
> > > > If Jim did not implement the vtable indirection (that could be
> > > > easily
> > > changed,
> > > > if so), then there is a little more opportunity for optimization,
> > > > but
> > > still
> > > > the problem is that state information takes up much more memory
> > than
> > > does the
> > > > text in tokens.
> > >
> > > Right,
> > >
> > > Well, lets look on antrl3commontoken.h
> > >
> > > API:
> > >        19   pointers to func
> > >                        32 bit os    19 * 4  = 76 bytes
> > >
> > > And about
> > >        11 * 4 bytes  of useful info
> > >
> > >
> > > So there is chance that in c++ style
> > > OR with single pointer on ala-VT  token will become
> > >
> > >    from 118 bytes to 48 bytes
> > >
> > >
> > >
> > > --
> > > Best regards,
> > >
> > > Ruslan Zasukhin
> > > VP Engineering and New Technology
> > > Paradigma Software, Inc
> > >
> > > Valentina - Joining Worlds of Information
> > http://www.paradigmasoft.com
> > >
> > > [I feel the need: the need for speed]
> > >
> > >
> > >
> > >
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe:
> > > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> > address
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sam at tunnelvisionlabs.com  Thu Jan 12 13:59:08 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 12 Jan 2012 15:59:08 -0600
Subject: [antlr-interest] Return values from listener methods (was
	"Appropriate use of honey badger listeners")
Message-ID: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>

I've used listeners for several tasks in ANTLRWorks 2 and haven't
encountered any problems in returning values which I wasn't able to work
around in a clean manner.

For the case of expressions like your example below, once you realize that
exitRule behaves as an RPN calculator you just use a simple stack to track
computed results. For other tasks I've used stacks, flags, counters, or
whatever else was relevant to the specific task.

For a simple calculator, you might have this:

public void exitRule(multContext context) {
    double right = stack.pop();
    double left = stack.pop();
    stack.push(left * right);
}

If you don't mind reversing the operand order of a commutative operator, you
could also write:

public void exitRule(multContext context) {
    stack.push(stack.pop() * stack.pop());
}

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Wednesday, January 11, 2012 6:40 PM
To: ANTLR Interest Mailing List
Subject: [antlr-interest] Appropriate use of honey badger listeners

hi Kyle,

I have 2 questions about the current listener mechanism:

1. How do we return values from listener methods so that we can do
computations?
2. How do we alter a parse tree?

For 2, I think we return a new tree as a return value and the parse tree
walker will incorporate that into the tree if it sees a different tree come
back. In other words, it will do something like this in the walker:

newtree = listener.someEvent(oldtree);
if ( newtree!=oldtree ) replace-oldtree-with-newtree;

For 1, I don't have a great answer. To make this more concrete, imagine we
have an expression rule and we want to use listener events to compute the
value of an expression. So, instead of having actions in the grammar  like:

e returns [int v]
      : a=e '*' b=e {$v = $a.v * $b.v;}

we would simply match it

e : e '*' e -> mult .

and then have listener events compute values. but where does of the listener
object store the intermediate results of a subtree computation? Certainly we
don't want to have to add "returns [int v]" to the grammar for every
different paths we make over the parse tree. Without a return value from a
listener event (which I want to use for tree rewriting), how do we get a
value up the tree in a computation?  We can't really use temporary fields of
the listener object because it's hard to tell which value gets associated
with which listener method. we would need a temporary fields to hold result
values from each listener. actually, I'm not even sure that would work. We
need to associate result values with sub tree roots (i.e. contexts). In
other words, we need a way to dynamically add fields to contexts for the
specific purpose of a particular parse tree walk. One can imagine that I
have a pass for computing the type of expression and another pass for
computing the value. In both cases, I need result values for each subtree
(type and then value).

Maybe that is just a hash table from ctx node to value;
Map<ParserRuleContext, Object>. maybe. That presents a few issues for me
because I use hashCode/equals in a weird way for use with grammar analysis,
but that would be the idea.

class MyGListener extends BlankGListener {
	Map<ParserRuleContext, Integer> results = .;

	public void exitRule(AParser.multContext ctx) { results.put(ctx,
results.get(ctx.a) * results.get(ctx.b)); }
	public void exitRule(AParser.addContext ctx) { results.put(ctx,
results.get(ctx.a) + results.get(ctx.b)); } }

not very pretty in Java. Python would look better:

results[ctx] = results[ctx.a] * results[ctx.b];

This way we can associate any values we need to for any node, in effect,
decorating the parse tree as needed.

What do people think about the solution? is there a way I can automate some
of this? I think that Python and Ruby would make short work of that because
they allow dynamically adding fields (normally a horrible thing to do) ;) Is
there a better way to do decorations in Java?

Ter

On Jan 11, 2012, at 1:49 PM, Kyle Ferrio wrote:

> Excellent, congratulations and thank you.
> 
> I just spent about half an hour playing with variations on A.g4 (since 
> it worked right out of the box I had to keep going...)  and this is 
> really nice.  This is the first time I've looked at the new-in-antlr 
> listener paradigm.  I will need a while to fully appreciate the doors this
opens.
> Honey Badger makes things easy, so I want to stay on his (?) good side.
> 
> Q: how do you tell a boy Honey Badger from a girl Honey Badger?
> 
> A: you don't.  they're both bad-ass.

nice!

Ter

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From ramponjerome at yahoo.fr  Thu Jan 12 14:55:17 2012
From: ramponjerome at yahoo.fr (Rampon Jerome)
Date: Thu, 12 Jan 2012 22:55:17 +0000 (GMT)
Subject: [antlr-interest] Re :  antlr v3 C target EOF PUSHSTREAM
In-Reply-To: <c09ee575dc0cc0dbf4c6fd8c08580da1@mail.gmail.com>
References: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>
	<c09ee575dc0cc0dbf4c6fd8c08580da1@mail.gmail.com>
Message-ID: <1326408917.90199.YahooMailNeo@web24709.mail.ird.yahoo.com>



Hi Jim, Gavin

Thanks for your quick answers.
I agree with your feedbacks to overload nextToken in C interface
but just two remarks:

-this obliges to redefine nextToken, nextTokenStr and emit 

from antlr3lexer.c as they are all static. Not so good in term of maintenance
for the grammar.


-In my case, I just need to pop some data structure when 

popstream is invoked in nextToken on EOF 

(DS were pushed just before calling PUSHSTREAM)
I originally had in mind some simpler redefinition if nextToken from antlr3lexer 

was not static as ... would avoid any maintenance work on nextToken, nextTokenStr and emit
redefinition ...


Init

lexer->rec->state->tokSource->nextToken = myNextToken

and
myNextToken (...tokSource) ...

? lxr = (pANTLR3_LEXER) tokSource->super;
? state = lxr ? lxr->rec->state : NULL;
? stackSizeInit = (state && (state->streams)) ? state->streams->size(state->streams) : 0;


? tok = nextToken ... /* original */

? stackSize = (state && (state->streams)) ? state->streams->size(state->streams) : 0;

? while (stackSizeInit-- > stackSize)
???? popMyDataStructure;

return tok;

Jerome



________________________________
 De?: Jim Idle <jimi at temporal-wave.com>
??: antlr-interest at antlr.org 
Envoy? le : Jeudi 12 Janvier 2012 0h00
Objet?: Re: [antlr-interest] antlr v3 C target EOF PUSHSTREAM
 
You can override nexttoken - I have explained how to do it on here before,
so you should find it antlr.markmail.org? basically you make a copy of the
functions you need and install your own pointers.

Jim


At 11:29 12/01/2012, Rampon Jerome wrote:
>I do not see how to do a similar job with C target as nextToken
>redefinition is not possible

It's
 been a while since I played with the C target, but IIRC most of the 
"methods" (probably including nextToken) are defined as function 
pointers within the structure data.? So you should be able to subclass 
the lexer and reassign the pointer to your override method -- you just 
have to handle the recasting and base pointer preservation yourself.


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Rampon Jerome
> Sent: Wednesday, January 11, 2012 2:30 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] antlr v3 C target EOF PUSHSTREAM
>
>
>
>
> Hi,
>
>
> I already used PUSHSTREAM macro on C target to switch input streams
> with v3.
>
> I did similar work on Java with personal stack of stream and nextToken
> redefinition (someway close to some example found later in antlr wiki
> pages)
>
> I need to manipulate(push/pop) some additional data structures all
> along the stack of input streams.
> It is simple to add in my own stack of stream with extension and
> nextToken redefinition in Java.
>
> I do not see how to do a similar job with C target as nextToken
> redefinition is not possible
>
> Is there one way to redefine EOF token to add specific actions ? or
> anything that would permit expected
>
> actions ...
>
> I just want to manage data structures in a parallel stack and pop on
> EOF in v3 in C !!!
>
> Thanks for any idea
>
>
> Jerome
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Thu Jan 12 15:02:39 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 12 Jan 2012 15:02:39 -0800
Subject: [antlr-interest] antlr v3 C target EOF PUSHSTREAM
In-Reply-To: <1326408917.90199.YahooMailNeo@web24709.mail.ird.yahoo.com>
References: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>
	<c09ee575dc0cc0dbf4c6fd8c08580da1@mail.gmail.com>
	<1326408917.90199.YahooMailNeo@web24709.mail.ird.yahoo.com>
Message-ID: <17056089c3bc073277617663b46e648f@mail.gmail.com>

They will never change now I would think.]



Jim



*From:* Rampon Jerome [mailto:ramponjerome at yahoo.fr]
*Sent:* Thursday, January 12, 2012 2:55 PM
*To:* Jim Idle; antlr-interest at antlr.org
*Cc:* Gavin Lambert
*Subject:* Re : [antlr-interest] antlr v3 C target EOF PUSHSTREAM





Hi Jim, Gavin



Thanks for your quick answers.

I agree with your feedbacks to overload nextToken in C interface

but just two remarks:



-this obliges to redefine nextToken, nextTokenStr and emit

from antlr3lexer.c as they are all static. Not so good in term of
maintenance

for the grammar.



-In my case, I just need to pop some data structure when

popstream is invoked in nextToken on EOF

(DS were pushed just before calling PUSHSTREAM)

I originally had in mind some simpler redefinition if nextToken from
antlr3lexer

was not static as ... would avoid any maintenance work on nextToken,
nextTokenStr and emit

redefinition ...



Init

lexer->rec->state->tokSource->nextToken = myNextToken



and

myNextToken (...tokSource) ...

  lxr = (pANTLR3_LEXER) tokSource->super;
  state = lxr ? lxr->rec->state : NULL;
  stackSizeInit = (state && (state->streams)) ?
state->streams->size(state->streams) : 0;

  tok = nextToken ... /* original */

  stackSize = (state && (state->streams)) ?
state->streams->size(state->streams) : 0;

  while (stackSizeInit-- > stackSize)

     popMyDataStructure;

return tok;



Jerome


------------------------------

*De :* Jim Idle <jimi at temporal-wave.com>
*? :* antlr-interest at antlr.org
*Envoy? le :* Jeudi 12 Janvier 2012 0h00
*Objet :* Re: [antlr-interest] antlr v3 C target EOF PUSHSTREAM


You can override nexttoken - I have explained how to do it on here before,
so you should find it antlr.markmail.org  basically you make a copy of the
functions you need and install your own pointers.

Jim


At 11:29 12/01/2012, Rampon Jerome wrote:
>I do not see how to do a similar job with C target as nextToken
>redefinition is not possible

It's been a while since I played with the C target, but IIRC most of the
"methods" (probably including nextToken) are defined as function pointers
within the structure data.  So you should be able to subclass the lexer and
reassign the pointer to your override method -- you just have to handle the
recasting and base pointer preservation yourself.


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Rampon Jerome
> Sent: Wednesday, January 11, 2012 2:30 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] antlr v3 C target EOF PUSHSTREAM
>
>
>
>
> Hi,
>
>
> I already used PUSHSTREAM macro on C target to switch input streams
> with v3.
>
> I did similar work on Java with personal stack of stream and nextToken
> redefinition (someway close to some example found later in antlr wiki
> pages)
>
> I need to manipulate(push/pop) some additional data structures all
> along the stack of input streams.
> It is simple to add in my own stack of stream with extension and
> nextToken redefinition in Java.
>
> I do not see how to do a similar job with C target as nextToken
> redefinition is not possible
>
> Is there one way to redefine EOF token to add specific actions ? or
> anything that would permit expected
>
> actions ...
>
> I just want to manage data structures in a parallel stack and pop on
> EOF in v3 in C !!!
>
> Thanks for any idea
>
>
> Jerome
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From serefarikan at kurumsalteknoloji.com  Thu Jan 12 15:05:04 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Thu, 12 Jan 2012 23:05:04 +0000
Subject: [antlr-interest] How can this identifier from a LR grammar be
	expressed in ANTLR
Message-ID: <CA+4Thdr9f929RpfKdiQb8axMemffWEo89-wEBkBk7k6G-_QXrg@mail.gmail.com>

Greetings,

The following line is from a grammar developed with a LR parser generator
tool:

Identifier = {LetterMinusA}{IdCharMinusT}?{IdChar}* |
'a''t'?(({letter}|'_')*|{LetterMinusT}{Alphanumeric}*)

The elements of the rule are pretty self explanatory, and this grammar is
valid, and is used in production. This bit is supposed to represent
identifiers in a query language. LetterMinusA is Latin Letters except a,
IdChar is simply Alphanumeric | '_' | '.'

I've been trying to get my head around it, but especially the second part
that starts with 'a''t'? looks horribly ambiguous to me. How can antlr know
where the 't' in an input such as 'at' belongs to?.
Again, {letter} | '_' and {LetterMinusT} alternatives would collide. I
won't even ask how the tool that generated this grammar handles it, but if
you have some clues about porting this to Antlr, I'd be more than happy to
hear about them.

Regards
Seref

From parrt at cs.usfca.edu  Thu Jan 12 15:12:44 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 12 Jan 2012 15:12:44 -0800
Subject: [antlr-interest] Return values from listener methods (was
	"Appropriate use of honey badger listeners")
In-Reply-To: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
References: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
Message-ID: <DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>


On Jan 12, 2012, at 1:59 PM, Sam Harwell wrote:

> I've used listeners for several tasks in ANTLRWorks 2 and haven't
> encountered any problems in returning values which I wasn't able to work
> around in a clean manner.
> 
> For the case of expressions like your example below, once you realize that
> exitRule behaves as an RPN calculator you just use a simple stack to track
> computed results. For other tasks I've used stacks, flags, counters, or
> whatever else was relevant to the specific task.
> 
> For a simple calculator, you might have this:
> 
> public void exitRule(multContext context) {
>    double right = stack.pop();
>    double left = stack.pop();
>    stack.push(left * right);
> }
> 
> If you don't mind reversing the operand order of a commutative operator, you
> could also write:
> 
> public void exitRule(multContext context) {
>    stack.push(stack.pop() * stack.pop());
> }

This seems like a good solution for expressions. I wonder if we can come up with a solution that users don't have to manage?

Ter

From parrt at cs.usfca.edu  Thu Jan 12 15:14:28 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 12 Jan 2012 15:14:28 -0800
Subject: [antlr-interest] Return values from listener methods (was
	"Appropriate use of honey badger listeners")
In-Reply-To: <DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
References: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
	<DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
Message-ID: <1C7B32A3-B020-4450-8643-2AA4C742ACE1@cs.usfca.edu>

Ah. I knew something was missing. Sometimes you really do need to annotate the tree. During static type computation, you not only need to compute the type of an expression, you want to annotate tree with it to save the answer. We need some way to associate a value to a node. As we do passes over the parse tree, we want to annotate it with information.

Ter
On Jan 12, 2012, at 3:12 PM, Terence Parr wrote:

> 
> On Jan 12, 2012, at 1:59 PM, Sam Harwell wrote:
> 
>> I've used listeners for several tasks in ANTLRWorks 2 and haven't
>> encountered any problems in returning values which I wasn't able to work
>> around in a clean manner.
>> 
>> For the case of expressions like your example below, once you realize that
>> exitRule behaves as an RPN calculator you just use a simple stack to track
>> computed results. For other tasks I've used stacks, flags, counters, or
>> whatever else was relevant to the specific task.
>> 
>> For a simple calculator, you might have this:
>> 
>> public void exitRule(multContext context) {
>>   double right = stack.pop();
>>   double left = stack.pop();
>>   stack.push(left * right);
>> }
>> 
>> If you don't mind reversing the operand order of a commutative operator, you
>> could also write:
>> 
>> public void exitRule(multContext context) {
>>   stack.push(stack.pop() * stack.pop());
>> }
> 
> This seems like a good solution for expressions. I wonder if we can come up with a solution that users don't have to manage?
> 
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu Jan 12 15:15:11 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 12 Jan 2012 15:15:11 -0800
Subject: [antlr-interest] Report of GUI's death greatly exaggerated
In-Reply-To: <CB34D155.9265%douglas.godfrey@whamtech.com>
References: <CB34D155.9265%douglas.godfrey@whamtech.com>
Message-ID: <25071475-CE7E-462D-8290-3F47EA968173@cs.usfca.edu>

Hi.  Well,That would be up to Sam Harwell since he is the maniac behind :)
Ter
On Jan 12, 2012, at 3:05 PM, Douglas Godfrey wrote:

> Could you please do an article on your experience implementing the AntlrWorks2 GUI using Netbeans as a GUI Framework?


From douglasgodfrey at gmail.com  Thu Jan 12 15:18:07 2012
From: douglasgodfrey at gmail.com (Douglas Godfrey)
Date: Thu, 12 Jan 2012 18:18:07 -0500
Subject: [antlr-interest] Report of GUI's death greatly exaggerated
In-Reply-To: <DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
Message-ID: <CB34D3FA.926F%douglasgodfrey@gmail.com>

Could you please do an article on your experience implementing the
AntlrWorks2 GUI using Netbeans as a GUI Framework?



From antlr at mirality.co.nz  Thu Jan 12 15:27:37 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 13 Jan 2012 12:27:37 +1300
Subject: [antlr-interest] Re :  antlr v3 C target EOF PUSHSTREAM
In-Reply-To: <1326408917.90199.YahooMailNeo@web24709.mail.ird.yahoo.com>
References: <1326320986.85923.YahooMailNeo@web24714.mail.ird.yahoo.com>
	<c09ee575dc0cc0dbf4c6fd8c08580da1@mail.gmail.com>
	<1326408917.90199.YahooMailNeo@web24709.mail.ird.yahoo.com>
Message-ID: <20120112232750.F3BD934184C1@www.antlr.org>

At 11:55 13/01/2012, Rampon Jerome wrote:
>-this obliges to redefine nextToken, nextTokenStr and emit
>from antlr3lexer.c as they are all static. Not so good in term of 
>maintenance
>for the grammar.

So override mTokens instead; that's definitely a virtual method 
pointer.  Just save the existing pointer before you overwrite 
it.  (This becomes your "base method" pointer, which you call 
inside your override.)


From parrt at cs.usfca.edu  Thu Jan 12 15:39:40 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 12 Jan 2012 15:39:40 -0800
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
Message-ID: <722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>


On Jan 11, 2012, at 8:39 PM, Kyle Ferrio wrote:

> Hi Ter,
> 
> I don't have answers, but I have questions which might at least cut off some dead ends...
> 
> I agree that point #2 seems pretty clear.  And I realize that this:
> 
>     newtree = listener.someEvent(oldtree);
>     if ( newtree!=oldtree ) replace-oldtree-with-newtree;
> 
> is pseudo-code.  You probably have this all worked out, but it occurs to me that comparing two trees may be more expensive than necessary.

I would be comparing pointers. if the pointers are different, I would slip in the new pointer. only the replace operation is pseudocode. In reality it would simply be "set the ith child pointer to the new pointer".

>   Despite the fact that walking a tree of n nodes is O(n), and so comparing two trees (non-naively) is also O(n), there may be a lot of data in those nodes to compare.  If all we care about is detecting changes, a significant speedup is possible if the interface for a tree object (or for listeners acting on trees?) includes a flag that gets flipped by any operation which has the possibility of changing the tree.  (N.B. Possibility, not guarantee.  A guarantee would require the eval we're trying to avoid.)  This tiny bit of added API built into a Listener baseclass for processing tree changes (which are all covered by a small, finite set of generic operations) would turn the subsequent O(n) comparison into O(1).  I'm not sure how this fits with your design.  Of course, all bets are off if someone messes with the tree directly.  (N.B. Alternatively, a hash on trees would be almost as cheap and require no extra API, but that only works if we're willing to treat topologically equivalent trees with different memory layouts (e.g. flipping a tree left-to right) as different.)

I don't think we need to do anything fancy. All we are doing is altering pointers in the tree. If you want to delete a subtree, return null. If you want to leaves the tree as it is, return the original pointer. If you want to alter a subtree, return a pointer to the new tree.

> Ok, now point #1.  Not sure how to approach this, but...
> 
> Thought: If the root of a rule r which returns a value does not declare the type of value expected, two questions arise. One, where/when does the antlr tool perform type-checking for the rules which consume rule r? 

ANTLR would not be involved in this case because all ANTLR does is create the parse trees. Our listener would be annotating those trees.

> Two, where/when does the antlr tool perform type-checking of the retvals from listeners for different alts of r? 

 Again, I don't think ANTLR is involved here. the only way it would get involved as if we defined return values or parameters that get shoved into the context objects. And the context objects are the parse tree nodes.

> Perhaps an explicit decoration/declaration of a type T at the root of r is the easiest, clearest and safest way to communicate to all of the listeners of all of the alts of r that they must return type T.  My thinking here is probably clouded by my preternaturally strong preference for static typing.  

I too am leaning toward some static typing, but I hesitate to put "returns [T v]" into the grammar because T it is application-specific. and, more importantly, it is pass specific. each pass might need a different type so we would need to do something like "returns [T v, U w]" but then the grammar is specifically tied to a particular application and literally the parser would not compile without having those types available. there would be no way to provide such a generic grammar to users on the ANTLR website.

We need a way to decorate or annotate a node in a type safe way.  To do that in Java, we have to use of classes or interfaces or something. Certainly, we can provide a factory that creates the various contexts to use our subclasses of ParserRuleContext like T and U. The only problem is that the tree node types can only be sent once: on construction.

What if we had some kind of adapter that fed the listeners proxies? So the original parse tree has generic nodes like ruleContext and we need T and U for 2 different phases. As the parse tree walker moved along, it could wrap the generic ruleContext objects with a proxy, of type T, that had the extra information we need. T with points at ruleContext instead of using inheritance.  If we didn't reuse the proxies, however, we would have to create a new object for every listener event. That's not the end of the world as I do that during parsing. But, we could think about reusing proxy objects, though I doubt we would know when the application was going to refer to multiple contexts. As long as the proxy object popped into existence for the listener event and popped out of existence afterwards, should not burden the garbage collector (which does not walk dead objects).

let's see what this would look like. Here is a chunk of the parse tree walker:

ParseTree.RuleNode r = (ParseTree.RuleNode)t;
enterRule(listener, r);
int n = r.getChildCount();
for (int i = 0; i<n; i++) {
    walk(listener, r.getChild(i));
}       
exitRule(listener, r);

And let's say we have an adapter that knows how to create wrappers for parse tree nodes:

adaptor.wrap(t); // returns type T or U or whatever you want

may be like this:

class T {
    ParserRuleContext delegate; // hide in a superclass somewhere
    int v; // my field
    public T(ParserRuleContext ctx) { delegate = ctx; }
}

class myAdaptor<T> implements ParseTreeWrapper {
    public T wrap(ParserRuleContext t) { return new T(t); }
}

Then, all we have to do is change the enter event to look like this:

enterRule(listener, adaptor.wrap(r));

The listener event would have to cast the ParserRuleContext to T or U etc?

public void exitRule(AParser.multContext ctx) {
    T t = (T)ctx;
    t.v = t.a.v * t.b.v;
}

MUCH cleaner and type safe.

OTOH, we could reverse it by adding a pointer to every parse tree node that points to an object with extra fields. Only those parse trees that need extra fields would have a pointer to an auxiliary object or object extension if you will. 

Or, As Sam said, we could provide a factory for creating the various parse tree nodes. If our application needed object extensions, we could pass in a factory that created special context objects that had our fields. Those objects would have to have a union of all the values needed by all phases, but that's not necessarily a bad thing. It's often the case that I want my type computation information to persist through multiple phases all the way through to code generation. On the other hand, if we have lots of temporary values we need just for computation, the tree node would have lots of extra fields, mucking up our class. I suppose nothing beats the simplicity of a factory creating the right objects. Then we can create a class like this

class T extends ParserRuleContext {
    int v; // temp value
    TypeInfo type; // persists across tree passes
}

The problem is that we would need a new class definition for every context, meaning every rule, in the grammar. yuck.  actually, maybe it is not too bad because we would only need to annotate some of the nodes such as eContext.  We would still need a typecast in the listeners like:  T t = (T)ctx;

It'd be simpler to add a field to ParserRuleContext and had a generic type because it means creating only a single object:

class ParserRuleContext<T> {
    T extension;
    ? existing stuff ...
}

All of the various context object types could point at the single type of extension object.  I guess it would mean adding code in the listeners like this:

public void exitRule(AParser.multContext<T> ctx) {
    if ( ctx.extension==null ) ctx.extension = new T();
    T t = ctx.extension;
    T a = ctx.a.extension; // ugh; kind of a mouthful
    T b = ctx.b.extension;
    t.v = a.v * b.v;
}

Hmm?

one thing I should note about the stack solution. I wonder if it might get confusing knowing what is on the stack and what is not, particularly if not every event has a listener implementation (that pushed a value). If the values are stored in the parse tree contexts, you know that that no does not have a value. With a stack, you would see a value computed way below that you don't necessarily want. You would not know that it is not the value you want because it is a disembodied value on the stack. That said, it's simplicity is appealing. If we need to annotate the tree anyway, however, maybe we do need a solution like I describe above.

> Well, I'm not sure if any of this helps.  But I'm reasonably confident that it does not hurt.

"no animals were hurt during the production of this e-mail" :)

Ter


From sam at tunnelvisionlabs.com  Thu Jan 12 15:41:00 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 12 Jan 2012 17:41:00 -0600
Subject: [antlr-interest] Report of GUI's death greatly exaggerated
In-Reply-To: <CB34D3FA.926F%douglasgodfrey@gmail.com>
References: <DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
	<CB34D3FA.926F%douglasgodfrey@gmail.com>
Message-ID: <001e01ccd183$a4651270$ed2f3750$@tunnelvisionlabs.com>

Hi Douglas,

Is there some aspect of it you're particularly interested in?

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Douglas Godfrey [mailto:douglasgodfrey at gmail.com] 
Sent: Thursday, January 12, 2012 5:18 PM
To: Antlr-Interest Antlr.Org
Subject: Re: [antlr-interest] Report of GUI's death greatly exaggerated

Could you please do an article on your experience implementing the
AntlrWorks2 GUI using Netbeans as a GUI Framework?



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sam at tunnelvisionlabs.com  Thu Jan 12 16:23:37 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 12 Jan 2012 18:23:37 -0600
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
	<722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
Message-ID: <001f01ccd189$990b4880$cb21d980$@tunnelvisionlabs.com>

You could use a generic ContextAnnotator type, which can be created as
necessary to associate an arbitrary type with parse tree nodes in a way that
can be easily shared among multiple listeners:

class ContextAnnotator<T> {
    private final Map<ParserRuleContext<?>, T> data = new
IdentityHashMap<ParserRuleContext<?>, T>();
    public T getData(ParserRuleContext<?> context) { return
data.get(context); }
    public void setData(ParserRuleContext<?> context, T value) {
data.put(context, value); }
}

class SomeListener extends BlankMyParserListener {
    private final ContextAnnotator<ExtraInfo> extraInfo;

    public SomeListener(ContextAnnotator<ExtraInfo> extraInfo) {
        this.extraInfoAnnotator = extraInfoAnnotator;
    }
}

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Thursday, January 12, 2012 5:40 PM
To: ANTLR Interest Mailing List
Subject: Re: [antlr-interest] Appropriate use of honey badger listeners


On Jan 11, 2012, at 8:39 PM, Kyle Ferrio wrote:

> Hi Ter,
> 
> I don't have answers, but I have questions which might at least cut off
some dead ends...
> 
> I agree that point #2 seems pretty clear.  And I realize that this:
> 
>     newtree = listener.someEvent(oldtree);
>     if ( newtree!=oldtree ) replace-oldtree-with-newtree;
> 
> is pseudo-code.  You probably have this all worked out, but it occurs to
me that comparing two trees may be more expensive than necessary.

I would be comparing pointers. if the pointers are different, I would slip
in the new pointer. only the replace operation is pseudocode. In reality it
would simply be "set the ith child pointer to the new pointer".

>   Despite the fact that walking a tree of n nodes is O(n), and so
comparing two trees (non-naively) is also O(n), there may be a lot of data
in those nodes to compare.  If all we care about is detecting changes, a
significant speedup is possible if the interface for a tree object (or for
listeners acting on trees?) includes a flag that gets flipped by any
operation which has the possibility of changing the tree.  (N.B.
Possibility, not guarantee.  A guarantee would require the eval we're trying
to avoid.)  This tiny bit of added API built into a Listener baseclass for
processing tree changes (which are all covered by a small, finite set of
generic operations) would turn the subsequent O(n) comparison into O(1).
I'm not sure how this fits with your design.  Of course, all bets are off if
someone messes with the tree directly.  (N.B. Alternatively, a hash on trees
would be almost as cheap and require no extra API, but that only works if
we're willing to treat topologically equivalent trees with different memory
layouts (e.g. flipping a tree left-to right) as different.)

I don't think we need to do anything fancy. All we are doing is altering
pointers in the tree. If you want to delete a subtree, return null. If you
want to leaves the tree as it is, return the original pointer. If you want
to alter a subtree, return a pointer to the new tree.

> Ok, now point #1.  Not sure how to approach this, but...
> 
> Thought: If the root of a rule r which returns a value does not declare
the type of value expected, two questions arise. One, where/when does the
antlr tool perform type-checking for the rules which consume rule r? 

ANTLR would not be involved in this case because all ANTLR does is create
the parse trees. Our listener would be annotating those trees.

> Two, where/when does the antlr tool perform type-checking of the retvals
from listeners for different alts of r? 

 Again, I don't think ANTLR is involved here. the only way it would get
involved as if we defined return values or parameters that get shoved into
the context objects. And the context objects are the parse tree nodes.

> Perhaps an explicit decoration/declaration of a type T at the root of r is
the easiest, clearest and safest way to communicate to all of the listeners
of all of the alts of r that they must return type T.  My thinking here is
probably clouded by my preternaturally strong preference for static typing.


I too am leaning toward some static typing, but I hesitate to put "returns
[T v]" into the grammar because T it is application-specific. and, more
importantly, it is pass specific. each pass might need a different type so
we would need to do something like "returns [T v, U w]" but then the grammar
is specifically tied to a particular application and literally the parser
would not compile without having those types available. there would be no
way to provide such a generic grammar to users on the ANTLR website.

We need a way to decorate or annotate a node in a type safe way.  To do that
in Java, we have to use of classes or interfaces or something. Certainly, we
can provide a factory that creates the various contexts to use our
subclasses of ParserRuleContext like T and U. The only problem is that the
tree node types can only be sent once: on construction.

What if we had some kind of adapter that fed the listeners proxies? So the
original parse tree has generic nodes like ruleContext and we need T and U
for 2 different phases. As the parse tree walker moved along, it could wrap
the generic ruleContext objects with a proxy, of type T, that had the extra
information we need. T with points at ruleContext instead of using
inheritance.  If we didn't reuse the proxies, however, we would have to
create a new object for every listener event. That's not the end of the
world as I do that during parsing. But, we could think about reusing proxy
objects, though I doubt we would know when the application was going to
refer to multiple contexts. As long as the proxy object popped into
existence for the listener event and popped out of existence afterwards,
should not burden the garbage collector (which does not walk dead objects).

let's see what this would look like. Here is a chunk of the parse tree
walker:

ParseTree.RuleNode r = (ParseTree.RuleNode)t;
enterRule(listener, r);
int n = r.getChildCount();
for (int i = 0; i<n; i++) {
    walk(listener, r.getChild(i));
}       
exitRule(listener, r);

And let's say we have an adapter that knows how to create wrappers for parse
tree nodes:

adaptor.wrap(t); // returns type T or U or whatever you want

may be like this:

class T {
    ParserRuleContext delegate; // hide in a superclass somewhere
    int v; // my field
    public T(ParserRuleContext ctx) { delegate = ctx; }
}

class myAdaptor<T> implements ParseTreeWrapper {
    public T wrap(ParserRuleContext t) { return new T(t); }
}

Then, all we have to do is change the enter event to look like this:

enterRule(listener, adaptor.wrap(r));

The listener event would have to cast the ParserRuleContext to T or U etc.

public void exitRule(AParser.multContext ctx) {
    T t = (T)ctx;
    t.v = t.a.v * t.b.v;
}

MUCH cleaner and type safe.

OTOH, we could reverse it by adding a pointer to every parse tree node that
points to an object with extra fields. Only those parse trees that need
extra fields would have a pointer to an auxiliary object or object extension
if you will. 

Or, As Sam said, we could provide a factory for creating the various parse
tree nodes. If our application needed object extensions, we could pass in a
factory that created special context objects that had our fields. Those
objects would have to have a union of all the values needed by all phases,
but that's not necessarily a bad thing. It's often the case that I want my
type computation information to persist through multiple phases all the way
through to code generation. On the other hand, if we have lots of temporary
values we need just for computation, the tree node would have lots of extra
fields, mucking up our class. I suppose nothing beats the simplicity of a
factory creating the right objects. Then we can create a class like this

class T extends ParserRuleContext {
    int v; // temp value
    TypeInfo type; // persists across tree passes
}

The problem is that we would need a new class definition for every context,
meaning every rule, in the grammar. yuck.  actually, maybe it is not too bad
because we would only need to annotate some of the nodes such as eContext.
We would still need a typecast in the listeners like:  T t = (T)ctx;

It'd be simpler to add a field to ParserRuleContext and had a generic type
because it means creating only a single object:

class ParserRuleContext<T> {
    T extension;
    . existing stuff ...
}

All of the various context object types could point at the single type of
extension object.  I guess it would mean adding code in the listeners like
this:

public void exitRule(AParser.multContext<T> ctx) {
    if ( ctx.extension==null ) ctx.extension = new T();
    T t = ctx.extension;
    T a = ctx.a.extension; // ugh; kind of a mouthful
    T b = ctx.b.extension;
    t.v = a.v * b.v;
}

Hmm.

one thing I should note about the stack solution. I wonder if it might get
confusing knowing what is on the stack and what is not, particularly if not
every event has a listener implementation (that pushed a value). If the
values are stored in the parse tree contexts, you know that that no does not
have a value. With a stack, you would see a value computed way below that
you don't necessarily want. You would not know that it is not the value you
want because it is a disembodied value on the stack. That said, it's
simplicity is appealing. If we need to annotate the tree anyway, however,
maybe we do need a solution like I describe above.

> Well, I'm not sure if any of this helps.  But I'm reasonably confident
that it does not hurt.

"no animals were hurt during the production of this e-mail" :)

Ter


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kferrio at gmail.com  Thu Jan 12 16:35:20 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 12 Jan 2012 17:35:20 -0700
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
	<722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
Message-ID: <CAAfeETo4PV6XU7Xdq9Mnn1X_4UOyT1jmf4uLe13QY5nz-HTfFQ@mail.gmail.com>

Hold on a sec... I get that if the only way to rewrite a tree is to make a
new tree, then comparing the pointers of the root nodes is the equality
test.  But I was assuming that the "new" tree might actually reuse most of
the old tree and in particular the root node.  I'm pretty sure I missed an
imprtanr assumption in your question.

Re the role of antlr building trees v. Listeners later...Ah...I get it
now.

I've read your email twice.  I will read it again.  Sounds complicated.
Would Sam's idea (stack machine) help simplify this?

I like animals.  So does Honey Badger, just not the same way.

Kyle
 On Jan 12, 2012 4:39 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

>
> On Jan 11, 2012, at 8:39 PM, Kyle Ferrio wrote:
>
> > Hi Ter,
> >
> > I don't have answers, but I have questions which might at least cut off
> some dead ends...
> >
> > I agree that point #2 seems pretty clear.  And I realize that this:
> >
> >     newtree = listener.someEvent(oldtree);
> >     if ( newtree!=oldtree ) replace-oldtree-with-newtree;
> >
> > is pseudo-code.  You probably have this all worked out, but it occurs to
> me that comparing two trees may be more expensive than necessary.
>
> I would be comparing pointers. if the pointers are different, I would slip
> in the new pointer. only the replace operation is pseudocode. In reality it
> would simply be "set the ith child pointer to the new pointer".
>
> >   Despite the fact that walking a tree of n nodes is O(n), and so
> comparing two trees (non-naively) is also O(n), there may be a lot of data
> in those nodes to compare.  If all we care about is detecting changes, a
> significant speedup is possible if the interface for a tree object (or for
> listeners acting on trees?) includes a flag that gets flipped by any
> operation which has the possibility of changing the tree.  (N.B.
> Possibility, not guarantee.  A guarantee would require the eval we're
> trying to avoid.)  This tiny bit of added API built into a Listener
> baseclass for processing tree changes (which are all covered by a small,
> finite set of generic operations) would turn the subsequent O(n) comparison
> into O(1).  I'm not sure how this fits with your design.  Of course, all
> bets are off if someone messes with the tree directly.  (N.B.
> Alternatively, a hash on trees would be almost as cheap and require no
> extra API, but that only works if we're willing to treat topologically
> equivalent trees with different memory layouts (e.g. flipping a tree
> left-to right) as different.)
>
> I don't think we need to do anything fancy. All we are doing is altering
> pointers in the tree. If you want to delete a subtree, return null. If you
> want to leaves the tree as it is, return the original pointer. If you want
> to alter a subtree, return a pointer to the new tree.
>
> > Ok, now point #1.  Not sure how to approach this, but...
> >
> > Thought: If the root of a rule r which returns a value does not declare
> the type of value expected, two questions arise. One, where/when does the
> antlr tool perform type-checking for the rules which consume rule r?
>
> ANTLR would not be involved in this case because all ANTLR does is create
> the parse trees. Our listener would be annotating those trees.
>
> > Two, where/when does the antlr tool perform type-checking of the retvals
> from listeners for different alts of r?
>
>  Again, I don't think ANTLR is involved here. the only way it would get
> involved as if we defined return values or parameters that get shoved into
> the context objects. And the context objects are the parse tree nodes.
>
> > Perhaps an explicit decoration/declaration of a type T at the root of r
> is the easiest, clearest and safest way to communicate to all of the
> listeners of all of the alts of r that they must return type T.  My
> thinking here is probably clouded by my preternaturally strong preference
> for static typing.
>
> I too am leaning toward some static typing, but I hesitate to put "returns
> [T v]" into the grammar because T it is application-specific. and, more
> importantly, it is pass specific. each pass might need a different type so
> we would need to do something like "returns [T v, U w]" but then the
> grammar is specifically tied to a particular application and literally the
> parser would not compile without having those types available. there would
> be no way to provide such a generic grammar to users on the ANTLR website.
>
> We need a way to decorate or annotate a node in a type safe way.  To do
> that in Java, we have to use of classes or interfaces or something.
> Certainly, we can provide a factory that creates the various contexts to
> use our subclasses of ParserRuleContext like T and U. The only problem is
> that the tree node types can only be sent once: on construction.
>
> What if we had some kind of adapter that fed the listeners proxies? So the
> original parse tree has generic nodes like ruleContext and we need T and U
> for 2 different phases. As the parse tree walker moved along, it could wrap
> the generic ruleContext objects with a proxy, of type T, that had the extra
> information we need. T with points at ruleContext instead of using
> inheritance.  If we didn't reuse the proxies, however, we would have to
> create a new object for every listener event. That's not the end of the
> world as I do that during parsing. But, we could think about reusing proxy
> objects, though I doubt we would know when the application was going to
> refer to multiple contexts. As long as the proxy object popped into
> existence for the listener event and popped out of existence afterwards,
> should not burden the garbage collector (which does not walk dead objects).
>
> let's see what this would look like. Here is a chunk of the parse tree
> walker:
>
> ParseTree.RuleNode r = (ParseTree.RuleNode)t;
> enterRule(listener, r);
> int n = r.getChildCount();
> for (int i = 0; i<n; i++) {
>    walk(listener, r.getChild(i));
> }
> exitRule(listener, r);
>
> And let's say we have an adapter that knows how to create wrappers for
> parse tree nodes:
>
> adaptor.wrap(t); // returns type T or U or whatever you want
>
> may be like this:
>
> class T {
>    ParserRuleContext delegate; // hide in a superclass somewhere
>    int v; // my field
>    public T(ParserRuleContext ctx) { delegate = ctx; }
> }
>
> class myAdaptor<T> implements ParseTreeWrapper {
>    public T wrap(ParserRuleContext t) { return new T(t); }
> }
>
> Then, all we have to do is change the enter event to look like this:
>
> enterRule(listener, adaptor.wrap(r));
>
> The listener event would have to cast the ParserRuleContext to T or U etc?
>
> public void exitRule(AParser.multContext ctx) {
>    T t = (T)ctx;
>    t.v = t.a.v * t.b.v;
> }
>
> MUCH cleaner and type safe.
>
> OTOH, we could reverse it by adding a pointer to every parse tree node
> that points to an object with extra fields. Only those parse trees that
> need extra fields would have a pointer to an auxiliary object or object
> extension if you will.
>
> Or, As Sam said, we could provide a factory for creating the various parse
> tree nodes. If our application needed object extensions, we could pass in a
> factory that created special context objects that had our fields. Those
> objects would have to have a union of all the values needed by all phases,
> but that's not necessarily a bad thing. It's often the case that I want my
> type computation information to persist through multiple phases all the way
> through to code generation. On the other hand, if we have lots of temporary
> values we need just for computation, the tree node would have lots of extra
> fields, mucking up our class. I suppose nothing beats the simplicity of a
> factory creating the right objects. Then we can create a class like this
>
> class T extends ParserRuleContext {
>    int v; // temp value
>    TypeInfo type; // persists across tree passes
> }
>
> The problem is that we would need a new class definition for every
> context, meaning every rule, in the grammar. yuck.  actually, maybe it is
> not too bad because we would only need to annotate some of the nodes such
> as eContext.  We would still need a typecast in the listeners like:  T t =
> (T)ctx;
>
> It'd be simpler to add a field to ParserRuleContext and had a generic type
> because it means creating only a single object:
>
> class ParserRuleContext<T> {
>    T extension;
>    ? existing stuff ...
> }
>
> All of the various context object types could point at the single type of
> extension object.  I guess it would mean adding code in the listeners like
> this:
>
> public void exitRule(AParser.multContext<T> ctx) {
>    if ( ctx.extension==null ) ctx.extension = new T();
>    T t = ctx.extension;
>    T a = ctx.a.extension; // ugh; kind of a mouthful
>    T b = ctx.b.extension;
>    t.v = a.v * b.v;
> }
>
> Hmm?
>
> one thing I should note about the stack solution. I wonder if it might get
> confusing knowing what is on the stack and what is not, particularly if not
> every event has a listener implementation (that pushed a value). If the
> values are stored in the parse tree contexts, you know that that no does
> not have a value. With a stack, you would see a value computed way below
> that you don't necessarily want. You would not know that it is not the
> value you want because it is a disembodied value on the stack. That said,
> it's simplicity is appealing. If we need to annotate the tree anyway,
> however, maybe we do need a solution like I describe above.
>
> > Well, I'm not sure if any of this helps.  But I'm reasonably confident
> that it does not hurt.
>
> "no animals were hurt during the production of this e-mail" :)
>
> Ter
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Thu Jan 12 17:28:11 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 12 Jan 2012 18:28:11 -0700
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <001f01ccd189$990b4880$cb21d980$@tunnelvisionlabs.com>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
	<722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
	<001f01ccd189$990b4880$cb21d980$@tunnelvisionlabs.com>
Message-ID: <CAAfeEToe9Q6GUR27LPzzZCsLBtPuUiRrnUMOjkNo0z2oqP95-g@mail.gmail.com>

Sam, I think I understand that well enough to use safely.  :)
On Jan 12, 2012 5:23 PM, "Sam Harwell" <sam at tunnelvisionlabs.com> wrote:

> You could use a generic ContextAnnotator type, which can be created as
> necessary to associate an arbitrary type with parse tree nodes in a way
> that
> can be easily shared among multiple listeners:
>
> class ContextAnnotator<T> {
>    private final Map<ParserRuleContext<?>, T> data = new
> IdentityHashMap<ParserRuleContext<?>, T>();
>    public T getData(ParserRuleContext<?> context) { return
> data.get(context); }
>    public void setData(ParserRuleContext<?> context, T value) {
> data.put(context, value); }
> }
>
> class SomeListener extends BlankMyParserListener {
>    private final ContextAnnotator<ExtraInfo> extraInfo;
>
>    public SomeListener(ContextAnnotator<ExtraInfo> extraInfo) {
>        this.extraInfoAnnotator = extraInfoAnnotator;
>    }
> }
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Thursday, January 12, 2012 5:40 PM
> To: ANTLR Interest Mailing List
> Subject: Re: [antlr-interest] Appropriate use of honey badger listeners
>
>
> On Jan 11, 2012, at 8:39 PM, Kyle Ferrio wrote:
>
> > Hi Ter,
> >
> > I don't have answers, but I have questions which might at least cut off
> some dead ends...
> >
> > I agree that point #2 seems pretty clear.  And I realize that this:
> >
> >     newtree = listener.someEvent(oldtree);
> >     if ( newtree!=oldtree ) replace-oldtree-with-newtree;
> >
> > is pseudo-code.  You probably have this all worked out, but it occurs to
> me that comparing two trees may be more expensive than necessary.
>
> I would be comparing pointers. if the pointers are different, I would slip
> in the new pointer. only the replace operation is pseudocode. In reality it
> would simply be "set the ith child pointer to the new pointer".
>
> >   Despite the fact that walking a tree of n nodes is O(n), and so
> comparing two trees (non-naively) is also O(n), there may be a lot of data
> in those nodes to compare.  If all we care about is detecting changes, a
> significant speedup is possible if the interface for a tree object (or for
> listeners acting on trees?) includes a flag that gets flipped by any
> operation which has the possibility of changing the tree.  (N.B.
> Possibility, not guarantee.  A guarantee would require the eval we're
> trying
> to avoid.)  This tiny bit of added API built into a Listener baseclass for
> processing tree changes (which are all covered by a small, finite set of
> generic operations) would turn the subsequent O(n) comparison into O(1).
> I'm not sure how this fits with your design.  Of course, all bets are off
> if
> someone messes with the tree directly.  (N.B. Alternatively, a hash on
> trees
> would be almost as cheap and require no extra API, but that only works if
> we're willing to treat topologically equivalent trees with different memory
> layouts (e.g. flipping a tree left-to right) as different.)
>
> I don't think we need to do anything fancy. All we are doing is altering
> pointers in the tree. If you want to delete a subtree, return null. If you
> want to leaves the tree as it is, return the original pointer. If you want
> to alter a subtree, return a pointer to the new tree.
>
> > Ok, now point #1.  Not sure how to approach this, but...
> >
> > Thought: If the root of a rule r which returns a value does not declare
> the type of value expected, two questions arise. One, where/when does the
> antlr tool perform type-checking for the rules which consume rule r?
>
> ANTLR would not be involved in this case because all ANTLR does is create
> the parse trees. Our listener would be annotating those trees.
>
> > Two, where/when does the antlr tool perform type-checking of the retvals
> from listeners for different alts of r?
>
>  Again, I don't think ANTLR is involved here. the only way it would get
> involved as if we defined return values or parameters that get shoved into
> the context objects. And the context objects are the parse tree nodes.
>
> > Perhaps an explicit decoration/declaration of a type T at the root of r
> is
> the easiest, clearest and safest way to communicate to all of the listeners
> of all of the alts of r that they must return type T.  My thinking here is
> probably clouded by my preternaturally strong preference for static typing.
>
>
> I too am leaning toward some static typing, but I hesitate to put "returns
> [T v]" into the grammar because T it is application-specific. and, more
> importantly, it is pass specific. each pass might need a different type so
> we would need to do something like "returns [T v, U w]" but then the
> grammar
> is specifically tied to a particular application and literally the parser
> would not compile without having those types available. there would be no
> way to provide such a generic grammar to users on the ANTLR website.
>
> We need a way to decorate or annotate a node in a type safe way.  To do
> that
> in Java, we have to use of classes or interfaces or something. Certainly,
> we
> can provide a factory that creates the various contexts to use our
> subclasses of ParserRuleContext like T and U. The only problem is that the
> tree node types can only be sent once: on construction.
>
> What if we had some kind of adapter that fed the listeners proxies? So the
> original parse tree has generic nodes like ruleContext and we need T and U
> for 2 different phases. As the parse tree walker moved along, it could wrap
> the generic ruleContext objects with a proxy, of type T, that had the extra
> information we need. T with points at ruleContext instead of using
> inheritance.  If we didn't reuse the proxies, however, we would have to
> create a new object for every listener event. That's not the end of the
> world as I do that during parsing. But, we could think about reusing proxy
> objects, though I doubt we would know when the application was going to
> refer to multiple contexts. As long as the proxy object popped into
> existence for the listener event and popped out of existence afterwards,
> should not burden the garbage collector (which does not walk dead objects).
>
> let's see what this would look like. Here is a chunk of the parse tree
> walker:
>
> ParseTree.RuleNode r = (ParseTree.RuleNode)t;
> enterRule(listener, r);
> int n = r.getChildCount();
> for (int i = 0; i<n; i++) {
>    walk(listener, r.getChild(i));
> }
> exitRule(listener, r);
>
> And let's say we have an adapter that knows how to create wrappers for
> parse
> tree nodes:
>
> adaptor.wrap(t); // returns type T or U or whatever you want
>
> may be like this:
>
> class T {
>    ParserRuleContext delegate; // hide in a superclass somewhere
>    int v; // my field
>    public T(ParserRuleContext ctx) { delegate = ctx; }
> }
>
> class myAdaptor<T> implements ParseTreeWrapper {
>    public T wrap(ParserRuleContext t) { return new T(t); }
> }
>
> Then, all we have to do is change the enter event to look like this:
>
> enterRule(listener, adaptor.wrap(r));
>
> The listener event would have to cast the ParserRuleContext to T or U etc.
>
> public void exitRule(AParser.multContext ctx) {
>    T t = (T)ctx;
>    t.v = t.a.v * t.b.v;
> }
>
> MUCH cleaner and type safe.
>
> OTOH, we could reverse it by adding a pointer to every parse tree node that
> points to an object with extra fields. Only those parse trees that need
> extra fields would have a pointer to an auxiliary object or object
> extension
> if you will.
>
> Or, As Sam said, we could provide a factory for creating the various parse
> tree nodes. If our application needed object extensions, we could pass in a
> factory that created special context objects that had our fields. Those
> objects would have to have a union of all the values needed by all phases,
> but that's not necessarily a bad thing. It's often the case that I want my
> type computation information to persist through multiple phases all the way
> through to code generation. On the other hand, if we have lots of temporary
> values we need just for computation, the tree node would have lots of extra
> fields, mucking up our class. I suppose nothing beats the simplicity of a
> factory creating the right objects. Then we can create a class like this
>
> class T extends ParserRuleContext {
>    int v; // temp value
>    TypeInfo type; // persists across tree passes
> }
>
> The problem is that we would need a new class definition for every context,
> meaning every rule, in the grammar. yuck.  actually, maybe it is not too
> bad
> because we would only need to annotate some of the nodes such as eContext.
> We would still need a typecast in the listeners like:  T t = (T)ctx;
>
> It'd be simpler to add a field to ParserRuleContext and had a generic type
> because it means creating only a single object:
>
> class ParserRuleContext<T> {
>    T extension;
>    . existing stuff ...
> }
>
> All of the various context object types could point at the single type of
> extension object.  I guess it would mean adding code in the listeners like
> this:
>
> public void exitRule(AParser.multContext<T> ctx) {
>    if ( ctx.extension==null ) ctx.extension = new T();
>    T t = ctx.extension;
>    T a = ctx.a.extension; // ugh; kind of a mouthful
>    T b = ctx.b.extension;
>    t.v = a.v * b.v;
> }
>
> Hmm.
>
> one thing I should note about the stack solution. I wonder if it might get
> confusing knowing what is on the stack and what is not, particularly if not
> every event has a listener implementation (that pushed a value). If the
> values are stored in the parse tree contexts, you know that that no does
> not
> have a value. With a stack, you would see a value computed way below that
> you don't necessarily want. You would not know that it is not the value you
> want because it is a disembodied value on the stack. That said, it's
> simplicity is appealing. If we need to annotate the tree anyway, however,
> maybe we do need a solution like I describe above.
>
> > Well, I'm not sure if any of this helps.  But I'm reasonably confident
> that it does not hurt.
>
> "no animals were hurt during the production of this e-mail" :)
>
> Ter
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Thu Jan 12 17:38:00 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Thu, 12 Jan 2012 18:38:00 -0700
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
	<722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
Message-ID: <CAAfeEToF2Ph6e-VyLGJWren4KDELEND0NHf7ZY=1VGsaJ7ODAw@mail.gmail.com>

FWIW, I am familiar (in a situation  unrelated to antlr) with the problem
of keeping track of things in  event-driven stack machines for which some
events do not (or may not) need to push anything onto the stack.  My
solution was pretty pedestrian...every event pushed a NOP/NIL by default
unless overridden by a specific event.  So tracking was a just matter of
indexing.  It's not clever, but it's as space-and-time efficient as
anything else I thought up.

Kyle
 On Jan 12, 2012 4:39 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

>
> On Jan 11, 2012, at 8:39 PM, Kyle Ferrio wrote:
>
> > Hi Ter,
> >
> > I don't have answers, but I have questions which might at least cut off
> some dead ends...
> >
> > I agree that point #2 seems pretty clear.  And I realize that this:
> >
> >     newtree = listener.someEvent(oldtree);
> >     if ( newtree!=oldtree ) replace-oldtree-with-newtree;
> >
> > is pseudo-code.  You probably have this all worked out, but it occurs to
> me that comparing two trees may be more expensive than necessary.
>
> I would be comparing pointers. if the pointers are different, I would slip
> in the new pointer. only the replace operation is pseudocode. In reality it
> would simply be "set the ith child pointer to the new pointer".
>
> >   Despite the fact that walking a tree of n nodes is O(n), and so
> comparing two trees (non-naively) is also O(n), there may be a lot of data
> in those nodes to compare.  If all we care about is detecting changes, a
> significant speedup is possible if the interface for a tree object (or for
> listeners acting on trees?) includes a flag that gets flipped by any
> operation which has the possibility of changing the tree.  (N.B.
> Possibility, not guarantee.  A guarantee would require the eval we're
> trying to avoid.)  This tiny bit of added API built into a Listener
> baseclass for processing tree changes (which are all covered by a small,
> finite set of generic operations) would turn the subsequent O(n) comparison
> into O(1).  I'm not sure how this fits with your design.  Of course, all
> bets are off if someone messes with the tree directly.  (N.B.
> Alternatively, a hash on trees would be almost as cheap and require no
> extra API, but that only works if we're willing to treat topologically
> equivalent trees with different memory layouts (e.g. flipping a tree
> left-to right) as different.)
>
> I don't think we need to do anything fancy. All we are doing is altering
> pointers in the tree. If you want to delete a subtree, return null. If you
> want to leaves the tree as it is, return the original pointer. If you want
> to alter a subtree, return a pointer to the new tree.
>
> > Ok, now point #1.  Not sure how to approach this, but...
> >
> > Thought: If the root of a rule r which returns a value does not declare
> the type of value expected, two questions arise. One, where/when does the
> antlr tool perform type-checking for the rules which consume rule r?
>
> ANTLR would not be involved in this case because all ANTLR does is create
> the parse trees. Our listener would be annotating those trees.
>
> > Two, where/when does the antlr tool perform type-checking of the retvals
> from listeners for different alts of r?
>
>  Again, I don't think ANTLR is involved here. the only way it would get
> involved as if we defined return values or parameters that get shoved into
> the context objects. And the context objects are the parse tree nodes.
>
> > Perhaps an explicit decoration/declaration of a type T at the root of r
> is the easiest, clearest and safest way to communicate to all of the
> listeners of all of the alts of r that they must return type T.  My
> thinking here is probably clouded by my preternaturally strong preference
> for static typing.
>
> I too am leaning toward some static typing, but I hesitate to put "returns
> [T v]" into the grammar because T it is application-specific. and, more
> importantly, it is pass specific. each pass might need a different type so
> we would need to do something like "returns [T v, U w]" but then the
> grammar is specifically tied to a particular application and literally the
> parser would not compile without having those types available. there would
> be no way to provide such a generic grammar to users on the ANTLR website.
>
> We need a way to decorate or annotate a node in a type safe way.  To do
> that in Java, we have to use of classes or interfaces or something.
> Certainly, we can provide a factory that creates the various contexts to
> use our subclasses of ParserRuleContext like T and U. The only problem is
> that the tree node types can only be sent once: on construction.
>
> What if we had some kind of adapter that fed the listeners proxies? So the
> original parse tree has generic nodes like ruleContext and we need T and U
> for 2 different phases. As the parse tree walker moved along, it could wrap
> the generic ruleContext objects with a proxy, of type T, that had the extra
> information we need. T with points at ruleContext instead of using
> inheritance.  If we didn't reuse the proxies, however, we would have to
> create a new object for every listener event. That's not the end of the
> world as I do that during parsing. But, we could think about reusing proxy
> objects, though I doubt we would know when the application was going to
> refer to multiple contexts. As long as the proxy object popped into
> existence for the listener event and popped out of existence afterwards,
> should not burden the garbage collector (which does not walk dead objects).
>
> let's see what this would look like. Here is a chunk of the parse tree
> walker:
>
> ParseTree.RuleNode r = (ParseTree.RuleNode)t;
> enterRule(listener, r);
> int n = r.getChildCount();
> for (int i = 0; i<n; i++) {
>    walk(listener, r.getChild(i));
> }
> exitRule(listener, r);
>
> And let's say we have an adapter that knows how to create wrappers for
> parse tree nodes:
>
> adaptor.wrap(t); // returns type T or U or whatever you want
>
> may be like this:
>
> class T {
>    ParserRuleContext delegate; // hide in a superclass somewhere
>    int v; // my field
>    public T(ParserRuleContext ctx) { delegate = ctx; }
> }
>
> class myAdaptor<T> implements ParseTreeWrapper {
>    public T wrap(ParserRuleContext t) { return new T(t); }
> }
>
> Then, all we have to do is change the enter event to look like this:
>
> enterRule(listener, adaptor.wrap(r));
>
> The listener event would have to cast the ParserRuleContext to T or U etc?
>
> public void exitRule(AParser.multContext ctx) {
>    T t = (T)ctx;
>    t.v = t.a.v * t.b.v;
> }
>
> MUCH cleaner and type safe.
>
> OTOH, we could reverse it by adding a pointer to every parse tree node
> that points to an object with extra fields. Only those parse trees that
> need extra fields would have a pointer to an auxiliary object or object
> extension if you will.
>
> Or, As Sam said, we could provide a factory for creating the various parse
> tree nodes. If our application needed object extensions, we could pass in a
> factory that created special context objects that had our fields. Those
> objects would have to have a union of all the values needed by all phases,
> but that's not necessarily a bad thing. It's often the case that I want my
> type computation information to persist through multiple phases all the way
> through to code generation. On the other hand, if we have lots of temporary
> values we need just for computation, the tree node would have lots of extra
> fields, mucking up our class. I suppose nothing beats the simplicity of a
> factory creating the right objects. Then we can create a class like this
>
> class T extends ParserRuleContext {
>    int v; // temp value
>    TypeInfo type; // persists across tree passes
> }
>
> The problem is that we would need a new class definition for every
> context, meaning every rule, in the grammar. yuck.  actually, maybe it is
> not too bad because we would only need to annotate some of the nodes such
> as eContext.  We would still need a typecast in the listeners like:  T t =
> (T)ctx;
>
> It'd be simpler to add a field to ParserRuleContext and had a generic type
> because it means creating only a single object:
>
> class ParserRuleContext<T> {
>    T extension;
>    ? existing stuff ...
> }
>
> All of the various context object types could point at the single type of
> extension object.  I guess it would mean adding code in the listeners like
> this:
>
> public void exitRule(AParser.multContext<T> ctx) {
>    if ( ctx.extension==null ) ctx.extension = new T();
>    T t = ctx.extension;
>    T a = ctx.a.extension; // ugh; kind of a mouthful
>    T b = ctx.b.extension;
>    t.v = a.v * b.v;
> }
>
> Hmm?
>
> one thing I should note about the stack solution. I wonder if it might get
> confusing knowing what is on the stack and what is not, particularly if not
> every event has a listener implementation (that pushed a value). If the
> values are stored in the parse tree contexts, you know that that no does
> not have a value. With a stack, you would see a value computed way below
> that you don't necessarily want. You would not know that it is not the
> value you want because it is a disembodied value on the stack. That said,
> it's simplicity is appealing. If we need to annotate the tree anyway,
> however, maybe we do need a solution like I describe above.
>
> > Well, I'm not sure if any of this helps.  But I'm reasonably confident
> that it does not hurt.
>
> "no animals were hurt during the production of this e-mail" :)
>
> Ter
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From chwchw at gmx.de  Thu Jan 12 18:21:51 2012
From: chwchw at gmx.de (Christian)
Date: Fri, 13 Jan 2012 03:21:51 +0100
Subject: [antlr-interest] Dynamically decide rule navigation
Message-ID: <4F0F953F.4000102@gmx.de>

Hi everybody,

I write a C# preprocessor parser that analyzes the token stream and
possibly deletes single tokens (the ones inside an if-directive with a
conditional expression evaluated to false). That is, the parser deletes
token according to the result of the expression. The actual parser
should do its job after the preprocessor parser. Thus, I want to process
the token stream multiple times.

Here is my rule for this use case:

conditional_section[boolean enter]
  : {$enter}? input_section // preserve
  | skipped_section -> // delete
  ;

It looks straightforward to me but ANTLR expects semantic predicates to
be free of side-effects---in my case: to be independent of the rule
parameter that holds the evaluated conditional expression.

Should I take a different approach or is there a way to change only a
little piece of my code in order to reach my goal?

Regards,
Christian

From jimi at temporal-wave.com  Thu Jan 12 18:37:59 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 12 Jan 2012 18:37:59 -0800
Subject: [antlr-interest] Dynamically decide rule navigation
In-Reply-To: <4F0F953F.4000102@gmx.de>
References: <4F0F953F.4000102@gmx.de>
Message-ID: <e719bcc650e2b62e177b740e02759dcc@mail.gmail.com>

You cannot create a C# pre-processor as a parser, it must be done directly
in the lexer, as per the language specification. Sorry to disappoint.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian
> Sent: Thursday, January 12, 2012 6:22 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Dynamically decide rule navigation
>
> Hi everybody,
>
> I write a C# preprocessor parser that analyzes the token stream and
> possibly deletes single tokens (the ones inside an if-directive with a
> conditional expression evaluated to false). That is, the parser deletes
> token according to the result of the expression. The actual parser
> should do its job after the preprocessor parser. Thus, I want to
> process the token stream multiple times.
>
> Here is my rule for this use case:
>
> conditional_section[boolean enter]
>   : {$enter}? input_section // preserve
>   | skipped_section -> // delete
>   ;
>
> It looks straightforward to me but ANTLR expects semantic predicates to
> be free of side-effects---in my case: to be independent of the rule
> parameter that holds the evaluated conditional expression.
>
> Should I take a different approach or is there a way to change only a
> little piece of my code in order to reach my goal?
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From gerald at certiv.net  Thu Jan 12 20:29:47 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Thu, 12 Jan 2012 20:29:47 -0800
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
	<722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
Message-ID: <4F0FB33B.2050606@certiv.net>


On 1/12/2012 3:39 PM, Terence Parr wrote:
> On Jan 11, 2012, at 8:39 PM, Kyle Ferrio wrote:
>
>> Hi Ter,
>>
>> I don't have answers, but I have questions which might at least cut off some dead ends...
>>
>> I agree that point #2 seems pretty clear.  And I realize that this:
>>
>>      newtree = listener.someEvent(oldtree);
>>      if ( newtree!=oldtree ) replace-oldtree-with-newtree;
>>
>> is pseudo-code.  You probably have this all worked out, but it occurs to me that comparing two trees may be more expensive than necessary.
> I would be comparing pointers. if the pointers are different, I would slip in the new pointer. only the replace operation is pseudocode. In reality it would simply be "set the ith child pointer to the new pointer".

Hi Ter,

If oldtree and newtree can be any parse tree nodes, then listeners will 
be registered  against specific nodes, right?  If any listener can toss 
a subtree, then other listeners and their monitors that have stashed 
data or are otherwise associated with subordinate nodes will be hosed.

So, how will listeners on the subtree get notified to potentially 
re-register to nodes of the subtree?  Even if only the root node of the 
subtree is changed, how will listeners on lower subtree nodes be 
informed of the change so they can determine whether to notify their 
monitors?

Tx,
Gerald

From blinku at gmail.com  Fri Jan 13 01:50:44 2012
From: blinku at gmail.com (JonB)
Date: Fri, 13 Jan 2012 13:50:44 +0400
Subject: [antlr-interest] v4 questions
Message-ID: <CAHK6shuYh9WH_QFd89aGQ=u1916dzkHbCajU_uyiAp--cTULsw@mail.gmail.com>

Hello Terence!
I'm looking for v4 for some days and have questions to you.
1. Is it possible(mb better?) to change type of _serializedATN from String
to int[] and do convertion String -> char[] -> int[] in Tool(parser
generator). It'll be better for other language runtimes that hasn't java
toCharArray() method or doesn't support octals in string literals.
Another reason is that you can see "constant string too long" java error on
real big grammar.
 2. Is it normal that v4 parser is slower than v34 parser for now(same
grammar is used)?
Jon B.

From chwchw at gmx.de  Fri Jan 13 03:38:54 2012
From: chwchw at gmx.de (Christian)
Date: Fri, 13 Jan 2012 12:38:54 +0100
Subject: [antlr-interest] Return values for fragment lexer rules
Message-ID: <4F1017CE.9040207@gmx.de>

Hello community,

is it right that even fragment lexer rules cannot return any value? The
CommonToken does not provide any access to such a value.

Regards,
Christian

From sam at tunnelvisionlabs.com  Fri Jan 13 06:15:24 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Fri, 13 Jan 2012 08:15:24 -0600
Subject: [antlr-interest] v4 questions
In-Reply-To: <CAHK6shuYh9WH_QFd89aGQ=u1916dzkHbCajU_uyiAp--cTULsw@mail.gmail.com>
References: <CAHK6shuYh9WH_QFd89aGQ=u1916dzkHbCajU_uyiAp--cTULsw@mail.gmail.com>
Message-ID: <006801ccd1fd$cc182fd0$64488f70$@tunnelvisionlabs.com>

Hi Jon,

I believe the static initializer for int[] is incorporated as bytecode,
which results in the static initializer for the class exceeding its maximum
size well before the string representation reaches its maximum.

V4 is currently slower than V3 when run on exactly the same grammar. The
current focus is on keeping the algorithms simple so they can be fully
documented and to help track down and fix errors. Most performance issues
will be addressed later. In the meantime:

1. If you're running a 32-bit version of the JVM, make sure you launch your
application with the "-server" and "-Xmx1024m" flags. V4 currently uses ***a
lot*** of memory and the "client" GC is poorly suited to it. The 64-bit JVM
only offers the server GC and handles large memory scenarios better. Java
1.7 should be faster than 1.6. By "a lot", I mean V4 should use a similar
amount of memory for storing CommonToken[] data, but the static overhead to
hold the DFA/ATN can easily be 10X the size of V3 (I've seen it reach 150+MB
while parsing Java). Small grammars are not nearly as impacted by this
issue.

2. In V4, the DFA for a parser is cached per-parser instance. Rather than
use "MyParser mySecondParser = new MyParser(secondInputStream)", you can use
"myFirstParser.setInputStream(secondInputStream)" to get a substantial
performance boost if you're parsing more than one input. Note that the parse
routine is not thread-safe, so if you are parsing on multiple threads you'll
need to use one parser instance per thread. This technique applies to both
lexers and parsers. Note that 2 parser instances at the same time will use
twice the memory for holding DFAs.

3. In V4 lexers are implemented radically different from V3, and should be
at least as fast as V3 (faster in the majority of cases) as long as you use
the technique from point #2.

4. If you convert your parser to use the new left recursive expression
syntax for V4, you can get a substantial performance boost.

Just so you know, I have an experimental build that I've been working on
locally that I plan to reference when we start looking at performance issues
in the future. For heads-up comparison (not using V4's LR syntax), this
build is faster than V3 and uses slightly less memory than V3. If you
compare a grammar with LR expression syntax, [this build of] V4 outperforms
V3 by about a 3:1 margin in half the memory.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: JonB [mailto:blinku at gmail.com] 
Sent: Friday, January 13, 2012 3:51 AM
To: antlr-interest
Subject: [antlr-interest] v4 questions

Hello Terence!
I'm looking for v4 for some days and have questions to you.
1. Is it possible(mb better?) to change type of _serializedATN from String
to int[] and do convertion String -> char[] -> int[] in Tool(parser
generator). It'll be better for other language runtimes that hasn't java
toCharArray() method or doesn't support octals in string literals.
Another reason is that you can see "constant string too long" java error on
real big grammar.
 2. Is it normal that v4 parser is slower than v34 parser for now(same
grammar is used)?
Jon B.

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From oliver.zeigermann at gmail.com  Sat Jan 14 04:31:03 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 14 Jan 2012 13:31:03 +0100
Subject: [antlr-interest] Return values from listener methods (was
 "Appropriate use of honey badger listeners")
In-Reply-To: <DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
References: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
	<DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
Message-ID: <CABJr57AQCC8qjkVw_4j6=VEJqaRtBP1eC9h9SLD-_52wrScUjg@mail.gmail.com>

I agree to what Sam says. Keeping it simple and using the means Java
provides anyway is the solution to me. I think ANTLR could introduce a
sensible general abstraction to this. Rahter provide best practices..

I have an expression parser that does not generate a result, but
rather a heterogeneous tree using exactly the same stack stuff as Sam
only that I put Expression objects on a stack.

Heterogeneous trees could also hold a reference to the parse tree they
were created from. In case you need them later.

My code that covers creating data structures from parses using
multiply approaches has grown a little bit too large to share on a
mailing list. If anyone is interested, I could set up a project
somewhere. For now, here is a fraction of my expression listener


	static class ExpressionASTConstructorListener extends BlankExprV4Listener {

		private final Stack<Expression> stack = new Stack<Expression>();

		@Override
		public void exitRule(atomContext ctx) {
			final Number number = new Number(ctx._tINT.getText());
			stack.push(number);
		}

		@Override
		public void exitRule(mulExprContext ctx) {
			final Expression expr;
			Expression leftExpr = stack.pop();
			String op = ctx.mdop.op.getText();
			Expression rightExpr = stack.pop();
			Operation operation = new Operation(op, leftExpr, rightExpr);
			expr = operation;
			stack.push(expr);
		}

		@Override
		public void exitRule(addExprContext ctx) {
			final Expression expr;
			Expression leftExpr = stack.pop();
			String op = ctx.pmop.op.getText();
			Expression rightExpr = stack.pop();
			Operation operation = new Operation(op, leftExpr, rightExpr);
			expr = operation;
			stack.push(expr);
		}
	}

for a grammar like this

expr
: '(' e=expr ')' -> parenExpr
| left=expr mdop=mdOp right=expr -> mulExpr
| left=expr pmop=pmOp right=expr -> addExpr
| atom -> atomExpr
;

- Oliver

2012/1/13 Terence Parr <parrt at cs.usfca.edu>:
>
> On Jan 12, 2012, at 1:59 PM, Sam Harwell wrote:
>
>> I've used listeners for several tasks in ANTLRWorks 2 and haven't
>> encountered any problems in returning values which I wasn't able to work
>> around in a clean manner.
>>
>> For the case of expressions like your example below, once you realize that
>> exitRule behaves as an RPN calculator you just use a simple stack to track
>> computed results. For other tasks I've used stacks, flags, counters, or
>> whatever else was relevant to the specific task.
>>
>> For a simple calculator, you might have this:
>>
>> public void exitRule(multContext context) {
>> ? ?double right = stack.pop();
>> ? ?double left = stack.pop();
>> ? ?stack.push(left * right);
>> }
>>
>> If you don't mind reversing the operand order of a commutative operator, you
>> could also write:
>>
>> public void exitRule(multContext context) {
>> ? ?stack.push(stack.pop() * stack.pop());
>> }
>
> This seems like a good solution for expressions. I wonder if we can come up with a solution that users don't have to manage?
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From oliver.zeigermann at gmail.com  Sat Jan 14 04:39:30 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 14 Jan 2012 13:39:30 +0100
Subject: [antlr-interest] Return values from listener methods (was
 "Appropriate use of honey badger listeners")
In-Reply-To: <1C7B32A3-B020-4450-8643-2AA4C742ACE1@cs.usfca.edu>
References: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
	<DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
	<1C7B32A3-B020-4450-8643-2AA4C742ACE1@cs.usfca.edu>
Message-ID: <CABJr57BuJCvWcOKe9ze2EkPBoqS5n6E0Ah1ZoFLQ9sHTaR6tyg@mail.gmail.com>

Obviously, we have different ideas how to use the parse tree. If I did
something like a static type computation this clearly would be beyond
the scope of a parse tree for me.  For a project like this I would use
a heterogeneous AST and a custom visitor that could easily contain
this type of information.

But this is a matter of definition I guess. If I wanted to do this
kind of thing, I agree, there should be a way of extending the
context. AFAIK right now the only way to define a context is via the
grammar. Could it be possible to extend theses contexts manually (by
subclassing) and tell ANTLR to create a custom context instead of the
generated ones? I lost track of the ongoing discussion a little bit,
so if this has been proposed already, please be lenient toward me :)

- Oliver

2012/1/13 Terence Parr <parrt at cs.usfca.edu>:
> Ah. I knew something was missing. Sometimes you really do need to annotate the tree. During static type computation, you not only need to compute the type of an expression, you want to annotate tree with it to save the answer. We need some way to associate a value to a node. As we do passes over the parse tree, we want to annotate it with information.
>
> Ter
> On Jan 12, 2012, at 3:12 PM, Terence Parr wrote:
>
>>
>> On Jan 12, 2012, at 1:59 PM, Sam Harwell wrote:
>>
>>> I've used listeners for several tasks in ANTLRWorks 2 and haven't
>>> encountered any problems in returning values which I wasn't able to work
>>> around in a clean manner.
>>>
>>> For the case of expressions like your example below, once you realize that
>>> exitRule behaves as an RPN calculator you just use a simple stack to track
>>> computed results. For other tasks I've used stacks, flags, counters, or
>>> whatever else was relevant to the specific task.
>>>
>>> For a simple calculator, you might have this:
>>>
>>> public void exitRule(multContext context) {
>>> ? double right = stack.pop();
>>> ? double left = stack.pop();
>>> ? stack.push(left * right);
>>> }
>>>
>>> If you don't mind reversing the operand order of a commutative operator, you
>>> could also write:
>>>
>>> public void exitRule(multContext context) {
>>> ? stack.push(stack.pop() * stack.pop());
>>> }
>>
>> This seems like a good solution for expressions. I wonder if we can come up with a solution that users don't have to manage?
>>
>> Ter
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From chwchw at gmx.de  Sat Jan 14 05:23:43 2012
From: chwchw at gmx.de (Christian)
Date: Sat, 14 Jan 2012 14:23:43 +0100
Subject: [antlr-interest] Return values for fragment lexer rules
In-Reply-To: <4F1017CE.9040207@gmx.de>
References: <4F1017CE.9040207@gmx.de>
Message-ID: <4F1181DF.7020705@gmx.de>

I now use an extended version of CommonToken that additionally contains
a member result. In this way, I can save the result of a Token. However,
I have to set it somehow. How can I access the current token within
action code? I would like to have something like the following:

fragment Pp_expression
  : WHITESPACE? expr=Pp_or_expression WHITESPACE?
    {$this.result = $expr.result;}
  ;

Regards,
Christian

Am 13.01.2012 12:38, schrieb Christian:
> Hello community,
>
> is it right that even fragment lexer rules cannot return any value? The
> CommonToken does not provide any access to such a value.
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From chwchw at gmx.de  Sat Jan 14 09:21:56 2012
From: chwchw at gmx.de (Christian)
Date: Sat, 14 Jan 2012 18:21:56 +0100
Subject: [antlr-interest] Return values for fragment lexer rules
In-Reply-To: <4F1181DF.7020705@gmx.de>
References: <4F1017CE.9040207@gmx.de> <4F1181DF.7020705@gmx.de>
Message-ID: <4F11B9B4.1020102@gmx.de>

Ok, I solved it by myself.
Although lexer rules cannot return values, they do can have parameters.
Thus, I create a wrapper object that holds the return value and pass it
to the lexer rule. This kind of parameter passing is used in Pascal
(var) or C++ (out), for example.

Regards,
Christian

Am 14.01.2012 14:23, schrieb Christian:
> I now use an extended version of CommonToken that additionally contains
> a member result. In this way, I can save the result of a Token. However,
> I have to set it somehow. How can I access the current token within
> action code? I would like to have something like the following:
>
> fragment Pp_expression
>   : WHITESPACE? expr=Pp_or_expression WHITESPACE?
>     {$this.result = $expr.result;}
>   ;
>
> Regards,
> Christian
>
> Am 13.01.2012 12:38, schrieb Christian:
>> Hello community,
>>
>> is it right that even fragment lexer rules cannot return any value? The
>> CommonToken does not provide any access to such a value.
>>
>> Regards,
>> Christian
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From parrt at cs.usfca.edu  Sat Jan 14 09:59:11 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 14 Jan 2012 09:59:11 -0800
Subject: [antlr-interest] Return values from listener methods (was
	"Appropriate use of honey badger listeners")
In-Reply-To: <CABJr57AQCC8qjkVw_4j6=VEJqaRtBP1eC9h9SLD-_52wrScUjg@mail.gmail.com>
References: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
	<DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
	<CABJr57AQCC8qjkVw_4j6=VEJqaRtBP1eC9h9SLD-_52wrScUjg@mail.gmail.com>
Message-ID: <AF77D0FC-5A1E-46EF-9342-1F58B6103723@cs.usfca.edu>

Yeah, simplicity usually wins! All of the solutions I've been looking at are very complicated and actually don't require ANTLR at all, except for perhaps a factory for the context objects.
Ter
On Jan 14, 2012, at 4:31 AM, Oliver Zeigermann wrote:

> I agree to what Sam says. Keeping it simple and using the means Java
> provides anyway is the solution to me. I think ANTLR could introduce a
> sensible general abstraction to this. Rahter provide best practices..
> 
> I have an expression parser that does not generate a result, but
> rather a heterogeneous tree using exactly the same stack stuff as Sam
> only that I put Expression objects on a stack.
> 
> Heterogeneous trees could also hold a reference to the parse tree they
> were created from. In case you need them later.
> 
> My code that covers creating data structures from parses using
> multiply approaches has grown a little bit too large to share on a
> mailing list. If anyone is interested, I could set up a project
> somewhere. For now, here is a fraction of my expression listener
> 
> 
> 	static class ExpressionASTConstructorListener extends BlankExprV4Listener {
> 
> 		private final Stack<Expression> stack = new Stack<Expression>();
> 
> 		@Override
> 		public void exitRule(atomContext ctx) {
> 			final Number number = new Number(ctx._tINT.getText());
> 			stack.push(number);
> 		}
> 
> 		@Override
> 		public void exitRule(mulExprContext ctx) {
> 			final Expression expr;
> 			Expression leftExpr = stack.pop();
> 			String op = ctx.mdop.op.getText();
> 			Expression rightExpr = stack.pop();
> 			Operation operation = new Operation(op, leftExpr, rightExpr);
> 			expr = operation;
> 			stack.push(expr);
> 		}
> 
> 		@Override
> 		public void exitRule(addExprContext ctx) {
> 			final Expression expr;
> 			Expression leftExpr = stack.pop();
> 			String op = ctx.pmop.op.getText();
> 			Expression rightExpr = stack.pop();
> 			Operation operation = new Operation(op, leftExpr, rightExpr);
> 			expr = operation;
> 			stack.push(expr);
> 		}
> 	}
> 
> for a grammar like this
> 
> expr
> : '(' e=expr ')' -> parenExpr
> | left=expr mdop=mdOp right=expr -> mulExpr
> | left=expr pmop=pmOp right=expr -> addExpr
> | atom -> atomExpr
> ;
> 
> - Oliver
> 
> 2012/1/13 Terence Parr <parrt at cs.usfca.edu>:
>> 
>> On Jan 12, 2012, at 1:59 PM, Sam Harwell wrote:
>> 
>>> I've used listeners for several tasks in ANTLRWorks 2 and haven't
>>> encountered any problems in returning values which I wasn't able to work
>>> around in a clean manner.
>>> 
>>> For the case of expressions like your example below, once you realize that
>>> exitRule behaves as an RPN calculator you just use a simple stack to track
>>> computed results. For other tasks I've used stacks, flags, counters, or
>>> whatever else was relevant to the specific task.
>>> 
>>> For a simple calculator, you might have this:
>>> 
>>> public void exitRule(multContext context) {
>>>    double right = stack.pop();
>>>    double left = stack.pop();
>>>    stack.push(left * right);
>>> }
>>> 
>>> If you don't mind reversing the operand order of a commutative operator, you
>>> could also write:
>>> 
>>> public void exitRule(multContext context) {
>>>    stack.push(stack.pop() * stack.pop());
>>> }
>> 
>> This seems like a good solution for expressions. I wonder if we can come up with a solution that users don't have to manage?
>> 
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Jan 14 10:03:23 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 14 Jan 2012 10:03:23 -0800
Subject: [antlr-interest] Return values from listener methods (was
	"Appropriate use of honey badger listeners")
In-Reply-To: <CABJr57BuJCvWcOKe9ze2EkPBoqS5n6E0Ah1ZoFLQ9sHTaR6tyg@mail.gmail.com>
References: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
	<DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
	<1C7B32A3-B020-4450-8643-2AA4C742ACE1@cs.usfca.edu>
	<CABJr57BuJCvWcOKe9ze2EkPBoqS5n6E0Ah1ZoFLQ9sHTaR6tyg@mail.gmail.com>
Message-ID: <BF62C5BC-21F7-43E4-813F-E4499339F237@cs.usfca.edu>


On Jan 14, 2012, at 4:39 AM, Oliver Zeigermann wrote:

> Obviously, we have different ideas how to use the parse tree. If I did
> something like a static type computation this clearly would be beyond
> the scope of a parse tree for me.  For a project like this I would use
> a heterogeneous AST and a custom visitor that could easily contain
> this type of information.

Given that expression trees are now so simple, just expr rule notes and tokens, I think I would just stick with the automatically generated tree. ASTs are gone from honey badger anyway.

I would definitely want to store the type associated with each Subtree. I think it would be natural to store it in the nodes themselves, but obviously some kind of a hash table to decorate a tree would work.

How happy are you with your custom AST construction from the listener events?

> But this is a matter of definition I guess. If I wanted to do this
> kind of thing, I agree, there should be a way of extending the
> context. AFAIK right now the only way to define a context is via the
> grammar.

 currently, yes.

> Could it be possible to extend theses contexts manually (by
> subclassing) and tell ANTLR to create a custom context instead of the
> generated ones? I lost track of the ongoing discussion a little bit,
> so if this has been proposed already, please be lenient toward me :)

The factory complicates things a little bit because now I have to generate a factory automatically. I guess the factory would map a rule index to the proper context object to create.

Ter

From parrt at cs.usfca.edu  Sat Jan 14 10:10:54 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 14 Jan 2012 10:10:54 -0800
Subject: [antlr-interest] Appropriate use of honey badger listeners
In-Reply-To: <CAAfeETo4PV6XU7Xdq9Mnn1X_4UOyT1jmf4uLe13QY5nz-HTfFQ@mail.gmail.com>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<E67EB3F3-353C-4CAE-BF78-7BCF0D27BCDF@cs.usfca.edu>
	<CAAfeETpfEwrqMDMR9+8=8Cebx1sbVkDhdwGRH3gH25OjOB=VQw@mail.gmail.com>
	<722D47FD-8256-4BF4-9587-27FF9E92FEFA@cs.usfca.edu>
	<CAAfeETo4PV6XU7Xdq9Mnn1X_4UOyT1jmf4uLe13QY5nz-HTfFQ@mail.gmail.com>
Message-ID: <E2F0C49C-9B40-43FD-845C-74ECCC48D208@cs.usfca.edu>


On Jan 12, 2012, at 4:35 PM, Kyle Ferrio wrote:

> Hold on a sec... I get that if the only way to rewrite a tree is to make a new tree, then comparing the pointers of the root nodes is the equality test.  But I was assuming that the "new" tree might actually reuse most of the old tree and in particular the root node.  I'm pretty sure I missed an imprtanr assumption in your question.
> 
> 
That's no problem. if you rewrite some children are way down below, it doesn't have to alter the parent connections at all.
> Re the role of antlr building trees v. Listeners later...Ah...I get it now. 
> 
> I've read your email twice.  I will read it again.  Sounds complicated.  Would Sam's idea (stack machine) help simplify this?
> 
> 
yep.
> I like animals.  So does Honey Badger, just not the same way.
> 
> 
heh heh heh

Ter


From oliver.zeigermann at gmail.com  Sat Jan 14 13:42:24 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sat, 14 Jan 2012 22:42:24 +0100
Subject: [antlr-interest] Return values from listener methods (was
 "Appropriate use of honey badger listeners")
In-Reply-To: <BF62C5BC-21F7-43E4-813F-E4499339F237@cs.usfca.edu>
References: <000c01ccd175$69e5d2f0$3db178d0$@tunnelvisionlabs.com>
	<DD01EB82-5549-4218-9AE1-9A21E6C60B9B@cs.usfca.edu>
	<1C7B32A3-B020-4450-8643-2AA4C742ACE1@cs.usfca.edu>
	<CABJr57BuJCvWcOKe9ze2EkPBoqS5n6E0Ah1ZoFLQ9sHTaR6tyg@mail.gmail.com>
	<BF62C5BC-21F7-43E4-813F-E4499339F237@cs.usfca.edu>
Message-ID: <CABJr57BsyfY-s3hAK3p550cYGi5AFr-ypcJ5V7e+wGa-Y=+SGw@mail.gmail.com>

2012/1/14 Terence Parr <parrt at cs.usfca.edu>:
>
> On Jan 14, 2012, at 4:39 AM, Oliver Zeigermann wrote:
>
>> Obviously, we have different ideas how to use the parse tree. If I did
>> something like a static type computation this clearly would be beyond
>> the scope of a parse tree for me. ?For a project like this I would use
>> a heterogeneous AST and a custom visitor that could easily contain
>> this type of information.
>
> Given that expression trees are now so simple, just expr rule notes and tokens, I think I would just stick with the automatically generated tree. ASTs are gone from honey badger anyway.

I agree to stick to parse trees if the task is rather small.
Concerning ASTs: even if there is no support for it in ANTLR4 they
still can be created from ANTLR4 and I guess some people - including
me - will do see (see below) ;)

> I would definitely want to store the type associated with each Subtree. I think it would be natural to store it in the nodes themselves, but obviously some kind of a hash table to decorate a tree would work.
>
> How happy are you with your custom AST construction from the listener events?

I am happy with it, but not sure if other people would.

Given this grammar

http://code.google.com/p/antlr4-ast-visitor-sandbox/source/browse/trunk/src/parser/v4/ExprV4.g4

my listener code to create a custom AST looks like this

http://code.google.com/p/antlr4-ast-visitor-sandbox/source/browse/trunk/src/parser/v4/V4ExpressionParserListenerStyle.java

Fairly simple and straight forward, but maybe only in my eyes.

>> But this is a matter of definition I guess. If I wanted to do this
>> kind of thing, I agree, there should be a way of extending the
>> context. AFAIK right now the only way to define a context is via the
>> grammar.
>
> ?currently, yes.
>
>> Could it be possible to extend theses contexts manually (by
>> subclassing) and tell ANTLR to create a custom context instead of the
>> generated ones? I lost track of the ongoing discussion a little bit,
>> so if this has been proposed already, please be lenient toward me :)
>
> The factory complicates things a little bit because now I have to generate a factory automatically. I guess the factory would map a rule index to the proper context object to create.

Right. But what would be the alternative?

- Oliver

From contact at maik-schmidt.de  Mon Jan 16 06:40:09 2012
From: contact at maik-schmidt.de (pragmaik)
Date: Mon, 16 Jan 2012 06:40:09 -0800 (PST)
Subject: [antlr-interest] Generating if/else/else-if statements from an AST
Message-ID: <1326724809858-7192682.post@n2.nabble.com>

Hi!

At the moment I am working on a DSL that supports if/else statements. They
are very similar to the if/else statements in C except that my statements
only allow blocks, that is

if (x == 1)
  print("Hello");

is not allowed and has to be

if (x == 1) {
  print("Hello");
}

I also want to support if/else/else-if statements such as

if (x == 1) {
  print("Hello");
} else if (x == 2) {
  print("world");
}

So, in the AST I store if statements as follows:

^('if' condition trueBlock elseBlock)

The elseBlock can be a regular block or an ELSIF block, that is an if
statetement that belongs to an else block.

I want to translate my DSL to C and I use the following tree grammar:

ifStatement
    :   ^(n='if' expression b1=block b2=(block|ifStatement)?)
	    -> if(
		       node={$n},
			   cond={$expression.st},
		  	   block1={$b1.st},
			   block2={$b2},
			   isElsif={($n.Parent.Text == "ELSIF") ? "true" : null}
			)
	|   ^(ELSIF i=ifStatement) -> { $i.st }
	;

The StringTemplate looks like this:

if(node, cond, block1, block2, isElsif) ::= <<
<if(isElsif)>else <endif>if (<cond>) <block1>
<if(block2)>else <block2><endif>
>>

Unfortunately, it does not work, that is the grammar emits only the
trueBlock elements and not a single else. No matter if it's a regular
else or and else-if.

Does anybody see what I am doing wrong?

Cheers,
Maik


--
View this message in context: http://antlr.1301665.n2.nabble.com/Generating-if-else-else-if-statements-from-an-AST-tp7192682p7192682.html
Sent from the ANTLR mailing list archive at Nabble.com.

From stuart.dootson at gmail.com  Mon Jan 16 07:08:48 2012
From: stuart.dootson at gmail.com (Stuart Dootson)
Date: Mon, 16 Jan 2012 15:08:48 +0000
Subject: [antlr-interest] Common left prefix for Antlr tokens...
Message-ID: <CA+L+JkuqzaYvUYbf8HjQrEhgoqNa_4u4ermuywG9muKBhTYs-w@mail.gmail.com>

Hello

One of my colleagues has been using Antlr 3 to create a lexer/parser
for the L5K language (used to program Allen-Bradley PLCs). This has
proceeded generally well, until coming across a little problem.

The problem is with the array literal start token ('[') and an
'extended property' indicator ('[[[___'). More specifically, nested
arrays with no whitespace between the outer and inner array start, for
example "[[1], 2]", are interpreted by Antlr as an extended property
introduction, causing a "mismatched character" exception.

I have come up with a workaround, by overriding the 'emit' and
'nextToken' methods of the lexer, to allow the strings "[[" and "[[["
to be converted to multiple "[" tokens through calling 'emit' in
actions, but was wondering if this use-case can be implemented without
requiring this extra code, through use of one or more options on the
grammar/rules?

A minimal Antlr grammar is appended...

Stuart Dootson

grammar arrays;

stat
	:	array
	|	EXTENDED_PROP
	;

array
	:	 LSQ value ( ',' value)* RSQ
	;

value
	:	INT
	|	array
	;
	
INT	:	('0' .. '9')+
	;


EXTENDED_PROP
	: '[[[___'
	;
	
LSQ	:	'['
	;

RSQ	:	']'
	;

WS	: (' '|'\n'|'\r')+ {$channel=HIDDEN;}
	;

From pedrogfrancisco at gmail.com  Mon Jan 16 07:17:47 2012
From: pedrogfrancisco at gmail.com (Pedro Francisco)
Date: Mon, 16 Jan 2012 15:17:47 +0000
Subject: [antlr-interest] Website error: "Oops - an error has occurred"
In-Reply-To: <B9FA10B2-C7B0-4499-88D8-DB1F94BF6660@cs.usfca.edu>
References: <CAJZjf_zuRkP+5aga2YHTx-0xZCHf5gTWz_MonbO8mWgmBRhu3g@mail.gmail.com>
	<B9FA10B2-C7B0-4499-88D8-DB1F94BF6660@cs.usfca.edu>
Message-ID: <CAJZjf_xH8pvb=ZbwYeaN2O6t0Wn1GmT_qS15yVcuc52HQevyOw@mail.gmail.com>

Is it possible accessing
http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
crashes something?

I was just now on http://www.antlr.org/wiki/display/~admin/2008/11/30
(working properly) , decided to check if
http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
was now working and both it and
http://www.antlr.org/wiki/display/~admin/2008/11/30 stopped working
again.

On Wed, Jan 11, 2012 at 4:28 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> weird. sorry about that. it must use a template no longer available after last upgrade. don't know how to fix!
> Ter
> On Jan 11, 2012, at 7:54 AM, Pedro Francisco wrote:
>
>> Hi!
>> I'd just like to report that on page "Example tree rewriting with
>> patterns" < http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
>>> , I get an error page:
>>
>> Title: ?"Oops - an error has occurred"
(...)

From parrt at cs.usfca.edu  Mon Jan 16 10:13:47 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 16 Jan 2012 10:13:47 -0800
Subject: [antlr-interest] Website error: "Oops - an error has occurred"
In-Reply-To: <CAJZjf_xH8pvb=ZbwYeaN2O6t0Wn1GmT_qS15yVcuc52HQevyOw@mail.gmail.com>
References: <CAJZjf_zuRkP+5aga2YHTx-0xZCHf5gTWz_MonbO8mWgmBRhu3g@mail.gmail.com>
	<B9FA10B2-C7B0-4499-88D8-DB1F94BF6660@cs.usfca.edu>
	<CAJZjf_xH8pvb=ZbwYeaN2O6t0Wn1GmT_qS15yVcuc52HQevyOw@mail.gmail.com>
Message-ID: <1CCF56EC-8CC2-4DAD-AB01-FB9C5EBCFE5B@cs.usfca.edu>

weird.All of those links are dead for me as well.  I wonder if a reboot will fix this or if there is really something wrong with the old templates or something.Okay, looking at the error more carefully, it looks like a previous version of the confluence wiki did not properly update previous pages. The error message says that it is trying to cast a page object to a blog post object.

I will try to update the wiki soon.

Ter
On Jan 16, 2012, at 7:17 AM, Pedro Francisco wrote:

> Is it possible accessing
> http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
> crashes something?
> 
> I was just now on http://www.antlr.org/wiki/display/~admin/2008/11/30
> (working properly) , decided to check if
> http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
> was now working and both it and
> http://www.antlr.org/wiki/display/~admin/2008/11/30 stopped working
> again.
> 
> On Wed, Jan 11, 2012 at 4:28 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> weird. sorry about that. it must use a template no longer available after last upgrade. don't know how to fix!
>> Ter
>> On Jan 11, 2012, at 7:54 AM, Pedro Francisco wrote:
>> 
>>> Hi!
>>> I'd just like to report that on page "Example tree rewriting with
>>> patterns" < http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
>>>> , I get an error page:
>>> 
>>> Title:  "Oops - an error has occurred"
> (...)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From serefarikan at kurumsalteknoloji.com  Mon Jan 16 10:52:58 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Mon, 16 Jan 2012 18:52:58 +0000
Subject: [antlr-interest] Common left prefix for Antlr tokens...
In-Reply-To: <CA+L+JkuqzaYvUYbf8HjQrEhgoqNa_4u4ermuywG9muKBhTYs-w@mail.gmail.com>
References: <CA+L+JkuqzaYvUYbf8HjQrEhgoqNa_4u4ermuywG9muKBhTYs-w@mail.gmail.com>
Message-ID: <CA+4Thdre7XuHmNn_GoSCuJReyEY5dYvvLKiMJtonBZVMKCSS2A@mail.gmail.com>

Hi Stuart,
I've come across a similar (almost same probably) problem just an hour
before I've seen your message.
In my case, I have a token called special chars, and it includes ']'
In a grammar rule the the text [blabla[at0003]] is supposed to be
open_bracket myexpr_rule close_bracket. The problem is, if there is no
white space, the ]] at the end is recognized as part of myexpr.

The reason it can be recognized is that the token definition has one or
more cardinality, that is: ('|' |'(' | ')' |'\\' | '^' | '{' |  '}' | '[' |
']')+
In my case, I've changed that to '|' |'(' | ')' |'\\' | '^' | '{' |  '}' |
'[' | ']' so that each of these characters end up as a token. I've handled
the cardinality of occurance of characters in the parser rule.

Based on my (very) limited experience I've found out that these type of
issues pop up if you have a token type which is meant to serve a particular
thing in the grammar, but then it keeps creeping into other rules. The more
tokens I have, the harder it becomes to handle things in parser rules. With
less token types and heavier use of parser rules, I seem to have few
issues.

I am not sure if this is the right approach, but for me, handling things in
the lexer is not working, because there are contexts that arise in the
parser, and by the time you reach that point, the lexer is already done.
So my humble suggestion is try to shift your solution a little bit more to
parser, that is working better for me at the moment.

Regards
Seref


On Mon, Jan 16, 2012 at 3:08 PM, Stuart Dootson <stuart.dootson at gmail.com>wrote:

> Hello
>
> One of my colleagues has been using Antlr 3 to create a lexer/parser
> for the L5K language (used to program Allen-Bradley PLCs). This has
> proceeded generally well, until coming across a little problem.
>
> The problem is with the array literal start token ('[') and an
> 'extended property' indicator ('[[[___'). More specifically, nested
> arrays with no whitespace between the outer and inner array start, for
> example "[[1], 2]", are interpreted by Antlr as an extended property
> introduction, causing a "mismatched character" exception.
>
> I have come up with a workaround, by overriding the 'emit' and
> 'nextToken' methods of the lexer, to allow the strings "[[" and "[[["
> to be converted to multiple "[" tokens through calling 'emit' in
> actions, but was wondering if this use-case can be implemented without
> requiring this extra code, through use of one or more options on the
> grammar/rules?
>
> A minimal Antlr grammar is appended...
>
> Stuart Dootson
>
> grammar arrays;
>
> stat
>        :       array
>        |       EXTENDED_PROP
>        ;
>
> array
>        :        LSQ value ( ',' value)* RSQ
>        ;
>
> value
>        :       INT
>        |       array
>        ;
>
> INT     :       ('0' .. '9')+
>        ;
>
>
> EXTENDED_PROP
>        : '[[[___'
>        ;
>
> LSQ     :       '['
>        ;
>
> RSQ     :       ']'
>        ;
>
> WS      : (' '|'\n'|'\r')+ {$channel=HIDDEN;}
>        ;
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Mon Jan 16 11:55:06 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 16 Jan 2012 11:55:06 -0800
Subject: [antlr-interest] Common left prefix for Antlr tokens...
In-Reply-To: <CA+L+JkuqzaYvUYbf8HjQrEhgoqNa_4u4ermuywG9muKBhTYs-w@mail.gmail.com>
References: <CA+L+JkuqzaYvUYbf8HjQrEhgoqNa_4u4ermuywG9muKBhTYs-w@mail.gmail.com>
Message-ID: <7ca2e893909188b2d91a08b278fdeb7d@mail.gmail.com>

fragment EXTENDED_PROP : ;
LSQ	:	'['
       (
          ('[[___')=> '[[___' { $type = EXTENDED_PROP; }
          |
       )
;

That should do it in this case I think.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Stuart Dootson
> Sent: Monday, January 16, 2012 7:09 AM
> To: antlr-interest
> Subject: [antlr-interest] Common left prefix for Antlr tokens...
>
> Hello
>
> One of my colleagues has been using Antlr 3 to create a lexer/parser
> for the L5K language (used to program Allen-Bradley PLCs). This has
> proceeded generally well, until coming across a little problem.
>
> The problem is with the array literal start token ('[') and an
> 'extended property' indicator ('[[[___'). More specifically, nested
> arrays with no whitespace between the outer and inner array start, for
> example "[[1], 2]", are interpreted by Antlr as an extended property
> introduction, causing a "mismatched character" exception.
>
> I have come up with a workaround, by overriding the 'emit' and
> 'nextToken' methods of the lexer, to allow the strings "[[" and "[[["
> to be converted to multiple "[" tokens through calling 'emit' in
> actions, but was wondering if this use-case can be implemented without
> requiring this extra code, through use of one or more options on the
> grammar/rules?
>
> A minimal Antlr grammar is appended...
>
> Stuart Dootson
>
> grammar arrays;
>
> stat
> 	:	array
> 	|	EXTENDED_PROP
> 	;
>
> array
> 	:	 LSQ value ( ',' value)* RSQ
> 	;
>
> value
> 	:	INT
> 	|	array
> 	;
>
> INT	:	('0' .. '9')+
> 	;
>
>
> EXTENDED_PROP
> 	: '[[[___'
> 	;
>
> LSQ	:	'['
> 	;
>
> RSQ	:	']'
> 	;
>
> WS	: (' '|'\n'|'\r')+ {$channel=HIDDEN;}
> 	;
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From stuart.dootson at gmail.com  Mon Jan 16 12:08:32 2012
From: stuart.dootson at gmail.com (Stuart Dootson)
Date: Mon, 16 Jan 2012 20:08:32 +0000
Subject: [antlr-interest] Common left prefix for Antlr tokens...
In-Reply-To: <7ca2e893909188b2d91a08b278fdeb7d@mail.gmail.com>
References: <CA+L+JkuqzaYvUYbf8HjQrEhgoqNa_4u4ermuywG9muKBhTYs-w@mail.gmail.com>
	<7ca2e893909188b2d91a08b278fdeb7d@mail.gmail.com>
Message-ID: <44346B0E-AEA2-4A20-9D35-45F28EBD1362@gmail.com>

Thanks - I'll give that a try...

Stuart

On 16 Jan 2012, at 07:55 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> fragment EXTENDED_PROP : ;
> LSQ    :    '['
>       (
>          ('[[___')=> '[[___' { $type = EXTENDED_PROP; }
>          |
>       )
> ;
> 
> That should do it in this case I think.
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Stuart Dootson
>> Sent: Monday, January 16, 2012 7:09 AM
>> To: antlr-interest
>> Subject: [antlr-interest] Common left prefix for Antlr tokens...
>> 
>> Hello
>> 
>> One of my colleagues has been using Antlr 3 to create a lexer/parser
>> for the L5K language (used to program Allen-Bradley PLCs). This has
>> proceeded generally well, until coming across a little problem.
>> 
>> The problem is with the array literal start token ('[') and an
>> 'extended property' indicator ('[[[___'). More specifically, nested
>> arrays with no whitespace between the outer and inner array start, for
>> example "[[1], 2]", are interpreted by Antlr as an extended property
>> introduction, causing a "mismatched character" exception.
>> 
>> I have come up with a workaround, by overriding the 'emit' and
>> 'nextToken' methods of the lexer, to allow the strings "[[" and "[[["
>> to be converted to multiple "[" tokens through calling 'emit' in
>> actions, but was wondering if this use-case can be implemented without
>> requiring this extra code, through use of one or more options on the
>> grammar/rules?
>> 
>> A minimal Antlr grammar is appended...
>> 
>> Stuart Dootson
>> 
>> grammar arrays;
>> 
>> stat
>>    :    array
>>    |    EXTENDED_PROP
>>    ;
>> 
>> array
>>    :     LSQ value ( ',' value)* RSQ
>>    ;
>> 
>> value
>>    :    INT
>>    |    array
>>    ;
>> 
>> INT    :    ('0' .. '9')+
>>    ;
>> 
>> 
>> EXTENDED_PROP
>>    : '[[[___'
>>    ;
>> 
>> LSQ    :    '['
>>    ;
>> 
>> RSQ    :    ']'
>>    ;
>> 
>> WS    : (' '|'\n'|'\r')+ {$channel=HIDDEN;}
>>    ;
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From ab8kf at aim.com  Mon Jan 16 14:12:44 2012
From: ab8kf at aim.com (Sean Walton)
Date: Mon, 16 Jan 2012 17:12:44 -0500 (EST)
Subject: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
Message-ID: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>


 When I put in this:

1 cccl_declaration[Object tree]
2     : cccl_name cccl_def_options '\n'
3         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
4     | n=cccl_name cccl_def_options '\n' cccl_declaration[n.getTree()]
5         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
6     | cccl_name cccl_command_params* ':' '\n' cccl_execution_block
7         -> ^(CCCL_IMPLEMENTATION { $tree } cccl_name cccl_command_params* cccl_execution_block)
8     ;

I get this:

1    public final void synpred3_cccl_fragment() throws RecognitionException {
2-->  void  =null;
3
4
5        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: (n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()] )
6        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()]
7        {
8        pushFollow(FOLLOW_cccl_name_in_synpred3_cccl402);
9-->    n=cccl_name();
10
11       state._fsp--;
12       if (state.failed) return ;
13
14       pushFollow(FOLLOW_cccl_def_options_in_synpred3_cccl404);
15       cccl_def_options();
16
17       state._fsp--;
18       if (state.failed) return ;
19
20       match(input,113,FOLLOW_113_in_synpred3_cccl406); if (state.failed) return ;
21
22       pushFollow(FOLLOW_cccl_declaration_in_synpred3_cccl408);
23       cccl_declaration(n.getTree());
24
26       state._fsp--;
27       if (state.failed) return ;
28
29       }

    }

Note the arrows. "void =null" is clearly wrong, and in "n=cccl_name()" the "n" is not defined (it is defined outside this synthetic predicate).

What I want to do:
I need to collect "cccl_name" from "cccl_declaration" and place them in the CCCL_IMPLEMENTATION (line #7) rewrite.

 

Sean Walton
ab8kf at aim.com


From chwchw at gmx.de  Tue Jan 17 00:15:14 2012
From: chwchw at gmx.de (Christian)
Date: Tue, 17 Jan 2012 09:15:14 +0100
Subject: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
In-Reply-To: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
References: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
Message-ID: <4F152E12.5060502@gmx.de>

Hi Sean,

wrongly generated code often results from a wrong grammar---what ever
the latter means. The error source is unfortunately not always clear.
I would first try to change your action code in the last rewrite rule: {
$tree }.
I think you want to add this as second entry, but you add it as direct
(Java/C# etc.) code. Remove the braces. However, I do not know whether
you can insert an arbitrary object within a rewrite rule. Usually, you
give the result of a parser rule (I do not know what general return
value it has).

Regards,
Christian

Am 16.01.2012 23:12, schrieb Sean Walton:
>  When I put in this:
>
> 1 cccl_declaration[Object tree]
> 2     : cccl_name cccl_def_options '\n'
> 3         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 4     | n=cccl_name cccl_def_options '\n' cccl_declaration[n.getTree()]
> 5         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 6     | cccl_name cccl_command_params* ':' '\n' cccl_execution_block
> 7         -> ^(CCCL_IMPLEMENTATION { $tree } cccl_name cccl_command_params* cccl_execution_block)
> 8     ;
>
> I get this:
>
> 1    public final void synpred3_cccl_fragment() throws RecognitionException {
> 2-->  void  =null;
> 3
> 4
> 5        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: (n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()] )
> 6        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()]
> 7        {
> 8        pushFollow(FOLLOW_cccl_name_in_synpred3_cccl402);
> 9-->    n=cccl_name();
> 10
> 11       state._fsp--;
> 12       if (state.failed) return ;
> 13
> 14       pushFollow(FOLLOW_cccl_def_options_in_synpred3_cccl404);
> 15       cccl_def_options();
> 16
> 17       state._fsp--;
> 18       if (state.failed) return ;
> 19
> 20       match(input,113,FOLLOW_113_in_synpred3_cccl406); if (state.failed) return ;
> 21
> 22       pushFollow(FOLLOW_cccl_declaration_in_synpred3_cccl408);
> 23       cccl_declaration(n.getTree());
> 24
> 26       state._fsp--;
> 27       if (state.failed) return ;
> 28
> 29       }
>
>     }
>
> Note the arrows. "void =null" is clearly wrong, and in "n=cccl_name()" the "n" is not defined (it is defined outside this synthetic predicate).
>
> What I want to do:
> I need to collect "cccl_name" from "cccl_declaration" and place them in the CCCL_IMPLEMENTATION (line #7) rewrite.
>
>  
>
> Sean Walton
> ab8kf at aim.com
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From serefarikan at kurumsalteknoloji.com  Tue Jan 17 03:10:40 2012
From: serefarikan at kurumsalteknoloji.com (Seref Arikan)
Date: Tue, 17 Jan 2012 11:10:40 +0000
Subject: [antlr-interest] Global backtrack breaks rule that works otherwise;
	why?
Message-ID: <CA+4Thdr-gaiDBHnTk_j4TLjqN6VwO3cjDvF9ETRhyyHFO_3m-w@mail.gmail.com>

Greetings,
The first alternative in the following grammar does not work when global
backtrack is on. I know that I can remove the predicate in the second
alternative, since it is the complement of the first one, but I don't
understand why backtrack leads to parser code that can never recognize the
first alternative.
It works if the rules are not complements of each other such as this
example, but I'm trying to understand the behaviour of Antlr better.

Best regards
Seref


grammar TestBTrack;
options{backtrack=true;}

alt_container
    :
{input.LT(1).getText().toUpperCase().startsWith("A")}?=>a_identifier
    |
{!(input.LT(1).getText().toUpperCase().startsWith("A"))}?=>non_a_identifier
    ;

a_identifier
    :    ID;
non_a_identifier
    :    ID;

ID  :    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;

From ab8kf at aim.com  Tue Jan 17 06:58:44 2012
From: ab8kf at aim.com (Sean Walton)
Date: Tue, 17 Jan 2012 09:58:44 -0500 (EST)
Subject: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
In-Reply-To: <4F152E12.5060502@gmx.de>
References: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
	<4F152E12.5060502@gmx.de>
Message-ID: <8CEA33FA42C5F70-1C0C-279F@webmail-m152.sysops.aol.com>

No go. I took out "{ $tree }" and still get the same problem.
The problem is at line #4 (not #7) in the grammar; I've tried all permutations of these parameters, but the problem persists. I believe that the process of creating synthetic predicate is causing the problem, because I can actually find with "n" is being defined elsewhere.
When I manually patch (commenting out "void =null" and defining the type appropriately of "n"), it compiles and works (caveat: I still don't get the tree).

Also, I struggle to believe that a botch job on my end would create "void =null;" when clearly Java does not allow void types.

 

Sean Walton
ab8kf at aim.com

 

 

-----Original Message-----
From: Christian <chwchw at gmx.de>
To: antlr-interest <antlr-interest at antlr.org>
Sent: Tue, Jan 17, 2012 1:15 am
Subject: Re: [antlr-interest] Need help with rule-parameters (ANTLR bug?)


Hi Sean,

wrongly generated code often results from a wrong grammar---what ever
the latter means. The error source is unfortunately not always clear.
I would first try to change your action code in the last rewrite rule: {
$tree }.
I think you want to add this as second entry, but you add it as direct
(Java/C# etc.) code. Remove the braces. However, I do not know whether
you can insert an arbitrary object within a rewrite rule. Usually, you
give the result of a parser rule (I do not know what general return
value it has).

Regards,
Christian

Am 16.01.2012 23:12, schrieb Sean Walton:
>  When I put in this:
>
> 1 cccl_declaration[Object tree]
> 2     : cccl_name cccl_def_options '\n'
> 3         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 4     | n=cccl_name cccl_def_options '\n' cccl_declaration[n.getTree()]
> 5         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 6     | cccl_name cccl_command_params* ':' '\n' cccl_execution_block
> 7         -> ^(CCCL_IMPLEMENTATION { $tree } cccl_name cccl_command_params* 
cccl_execution_block)
> 8     ;
>
> I get this:
>
> 1    public final void synpred3_cccl_fragment() throws RecognitionException {
> 2-->  void  =null;
> 3
> 4
> 5        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: (n= 
cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()] )
> 6        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: n= 
cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()]
> 7        {
> 8        pushFollow(FOLLOW_cccl_name_in_synpred3_cccl402);
> 9-->    n=cccl_name();
> 10
> 11       state._fsp--;
> 12       if (state.failed) return ;
> 13
> 14       pushFollow(FOLLOW_cccl_def_options_in_synpred3_cccl404);
> 15       cccl_def_options();
> 16
> 17       state._fsp--;
> 18       if (state.failed) return ;
> 19
> 20       match(input,113,FOLLOW_113_in_synpred3_cccl406); if (state.failed) 
return ;
> 21
> 22       pushFollow(FOLLOW_cccl_declaration_in_synpred3_cccl408);
> 23       cccl_declaration(n.getTree());
> 24
> 26       state._fsp--;
> 27       if (state.failed) return ;
> 28
> 29       }
>
>     }
>
> Note the arrows. "void =null" is clearly wrong, and in "n=cccl_name()" the "n" 
is not defined (it is defined outside this synthetic predicate).
>
> What I want to do:
> I need to collect "cccl_name" from "cccl_declaration" and place them in the 
CCCL_IMPLEMENTATION (line #7) rewrite.
>
>  
>
> Sean Walton
> ab8kf at aim.com
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

 

From chwchw at gmx.de  Tue Jan 17 07:05:11 2012
From: chwchw at gmx.de (Christian)
Date: Tue, 17 Jan 2012 16:05:11 +0100
Subject: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
In-Reply-To: <8CEA33FA42C5F70-1C0C-279F@webmail-m152.sysops.aol.com>
References: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
	<4F152E12.5060502@gmx.de>
	<8CEA33FA42C5F70-1C0C-279F@webmail-m152.sysops.aol.com>
Message-ID: <4F158E27.4080502@gmx.de>

Then I think you must post a minimal grammar with your problem so that
we can examine your problem locally on our machines.

Am 17.01.2012 15:58, schrieb Sean Walton:
> No go. I took out "{ $tree }" and still get the same problem.
> The problem is at line #4 (not #7) in the grammar; I've tried all
> permutations of these parameters, but the problem persists. I believe
> that the process of creating synthetic predicate is causing the
> problem, because I can actually find with "n" is being defined elsewhere.
> When I manually patch (commenting out "void =null" and defining the
> type appropriately of "n"), it compiles and works (caveat: I still
> don't get the tree).
> Also, I struggle to believe that a botch job on my end would create
> "void =null;" when clearly Java does not allow void types.
>
> Sean Walton
> ab8kf at aim.com
>
>
> -----Original Message-----
> From: Christian <chwchw at gmx.de>
> To: antlr-interest <antlr-interest at antlr.org>
> Sent: Tue, Jan 17, 2012 1:15 am
> Subject: Re: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
>
> Hi Sean,
>
> wrongly generated code often results from a wrong grammar---what ever
> the latter means. The error source is unfortunately not always clear.
> I would first try to change your action code in the last rewrite rule: {
> $tree }.
> I think you want to add this as second entry, but you add it as direct
> (Java/C# etc.) code. Remove the braces. However, I do not know whether
> you can insert an arbitrary object within a rewrite rule. Usually, you
> give the result of a parser rule (I do not know what general return
> value it has).
>
> Regards,
> Christian
>
> Am 16.01.2012 23:12, schrieb Sean Walton:
> >  When I put in this:
> >
> > 1 cccl_declaration[Object tree]
> > 2     : cccl_name cccl_def_options '\n'
> > 3         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> > 4     | n=cccl_name cccl_def_options '\n' cccl_declaration[n.getTree()]
> > 5         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> > 6     | cccl_name cccl_command_params* ':' '\n' cccl_execution_block
> > 7         -> ^(CCCL_IMPLEMENTATION { $tree } cccl_name cccl_command_params* 
> cccl_execution_block)
> > 8     ;
> >
> > I get this:
> >
> > 1    public final void synpred3_cccl_fragment() throws RecognitionException {
> > 2-->  void  =null;
> > 3
> > 4
> > 5        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: (n= 
> cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()] )
> > 6        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: n= 
> cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()]
> > 7        {
> > 8        pushFollow(FOLLOW_cccl_name_in_synpred3_cccl402);
> > 9-->    n=cccl_name();
> > 10
> > 11       state._fsp--;
> > 12       if (state.failed) return ;
> > 13
> > 14       pushFollow(FOLLOW_cccl_def_options_in_synpred3_cccl404);
> > 15       cccl_def_options();
> > 16
> > 17       state._fsp--;
> > 18       if (state.failed) return ;
> > 19
> > 20       match(input,113,FOLLOW_113_in_synpred3_cccl406); if (state.failed) 
> return ;
> > 21
> > 22       pushFollow(FOLLOW_cccl_declaration_in_synpred3_cccl408);
> > 23       cccl_declaration(n.getTree());
> > 24
> > 26       state._fsp--;
> > 27       if (state.failed) return ;
> > 28
> > 29       }
> >
> >     }
> >
> > Note the arrows. "void =null" is clearly wrong, and in "n=cccl_name()" the "n" 
> is not defined (it is defined outside this synthetic predicate).
> >
> > What I want to do:
> > I need to collect "cccl_name" from "cccl_declaration" and place them in the 
> CCCL_IMPLEMENTATION (line #7) rewrite.
> >
> >  
> >
> > Sean Walton
> > ab8kf at aim.com
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From researcher0x00 at gmail.com  Tue Jan 17 07:10:32 2012
From: researcher0x00 at gmail.com (Eric)
Date: Tue, 17 Jan 2012 10:10:32 -0500
Subject: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
In-Reply-To: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
References: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
Message-ID: <CAN45N13QKbuwnt3yB=6P2RhQVV4WbibdXEL5ffsO1xtpzkFjDA@mail.gmail.com>

Sean,

Have you seen? http://markmail.org/message/wr44syoliwmy6ors

Eric

On Mon, Jan 16, 2012 at 5:12 PM, Sean Walton <ab8kf at aim.com> wrote:

>
>  When I put in this:
>
> 1 cccl_declaration[Object tree]
> 2     : cccl_name cccl_def_options '\n'
> 3         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 4     | n=cccl_name cccl_def_options '\n' cccl_declaration[n.getTree()]
> 5         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 6     | cccl_name cccl_command_params* ':' '\n' cccl_execution_block
> 7         -> ^(CCCL_IMPLEMENTATION { $tree } cccl_name
> cccl_command_params* cccl_execution_block)
> 8     ;
>
> I get this:
>
> 1    public final void synpred3_cccl_fragment() throws
> RecognitionException {
> 2-->  void  =null;
> 3
> 4
> 5        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4:
> (n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()] )
> 6        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4:
> n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()]
> 7        {
> 8        pushFollow(FOLLOW_cccl_name_in_synpred3_cccl402);
> 9-->    n=cccl_name();
> 10
> 11       state._fsp--;
> 12       if (state.failed) return ;
> 13
> 14       pushFollow(FOLLOW_cccl_def_options_in_synpred3_cccl404);
> 15       cccl_def_options();
> 16
> 17       state._fsp--;
> 18       if (state.failed) return ;
> 19
> 20       match(input,113,FOLLOW_113_in_synpred3_cccl406); if
> (state.failed) return ;
> 21
> 22       pushFollow(FOLLOW_cccl_declaration_in_synpred3_cccl408);
> 23       cccl_declaration(n.getTree());
> 24
> 26       state._fsp--;
> 27       if (state.failed) return ;
> 28
> 29       }
>
>    }
>
> Note the arrows. "void =null" is clearly wrong, and in "n=cccl_name()" the
> "n" is not defined (it is defined outside this synthetic predicate).
>
> What I want to do:
> I need to collect "cccl_name" from "cccl_declaration" and place them in
> the CCCL_IMPLEMENTATION (line #7) rewrite.
>
>
>
> Sean Walton
> ab8kf at aim.com
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From ab8kf at aim.com  Tue Jan 17 07:22:41 2012
From: ab8kf at aim.com (Sean Walton)
Date: Tue, 17 Jan 2012 10:22:41 -0500 (EST)
Subject: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
In-Reply-To: <CAN45N13QKbuwnt3yB=6P2RhQVV4WbibdXEL5ffsO1xtpzkFjDA@mail.gmail.com>
References: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
	<CAN45N13QKbuwnt3yB=6P2RhQVV4WbibdXEL5ffsO1xtpzkFjDA@mail.gmail.com>
Message-ID: <8CEA342FD67FA4E-1C0C-2B5A@webmail-m152.sysops.aol.com>

Interesting. I think that this problem is very related, and it appears that the problem was not fixed.
 BTW, when are synth-preds created?

 

Sean Walton
ab8kf at aim.com

 

 

-----Original Message-----
From: Eric <researcher0x00 at gmail.com>
To: Sean Walton <ab8kf at aim.com>; ANTLR interest <antlr-interest at antlr.org>
Sent: Tue, Jan 17, 2012 8:10 am
Subject: Re: [antlr-interest] Need help with rule-parameters (ANTLR bug?)


Sean,
 
Have you seen? http://markmail.org/message/wr44syoliwmy6ors
 
Eric


On Mon, Jan 16, 2012 at 5:12 PM, Sean Walton <ab8kf at aim.com> wrote:


 When I put in this:

1 cccl_declaration[Object tree]
2     : cccl_name cccl_def_options '\n'
3         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
4     | n=cccl_name cccl_def_options '\n' cccl_declaration[n.getTree()]
5         -> ^(CCCL_DECLARATION cccl_name cccl_def_options)
6     | cccl_name cccl_command_params* ':' '\n' cccl_execution_block
7         -> ^(CCCL_IMPLEMENTATION { $tree } cccl_name cccl_command_params* cccl_execution_block)
8     ;

I get this:

1    public final void synpred3_cccl_fragment() throws RecognitionException {
2-->  void  =null;
3
4
5        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: (n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()] )
6        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()]
7        {
8        pushFollow(FOLLOW_cccl_name_in_synpred3_cccl402);
9-->    n=cccl_name();
10
11       state._fsp--;
12       if (state.failed) return ;
13
14       pushFollow(FOLLOW_cccl_def_options_in_synpred3_cccl404);
15       cccl_def_options();
16
17       state._fsp--;
18       if (state.failed) return ;
19
20       match(input,113,FOLLOW_113_in_synpred3_cccl406); if (state.failed) return ;
21
22       pushFollow(FOLLOW_cccl_declaration_in_synpred3_cccl408);
23       cccl_declaration(n.getTree());
24
26       state._fsp--;
27       if (state.failed) return ;
28
29       }

    }

Note the arrows. "void =null" is clearly wrong, and in "n=cccl_name()" the "n" is not defined (it is defined outside this synthetic predicate).

What I want to do:
I need to collect "cccl_name" from "cccl_declaration" and place them in the CCCL_IMPLEMENTATION (line #7) rewrite.



Sean Walton
ab8kf at aim.com


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



 

From parrt at cs.usfca.edu  Tue Jan 17 10:35:06 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 17 Jan 2012 10:35:06 -0800
Subject: [antlr-interest] upgrading confluence wiki
Message-ID: <ADBCB085-357A-4505-BA0D-C48923304424@cs.usfca.edu>

Hi, there will be a disruption today as I restart to use the new wiki. I hope it goes painlessly :)
Ter

From chwchw at gmx.de  Tue Jan 17 10:57:35 2012
From: chwchw at gmx.de (Christian)
Date: Tue, 17 Jan 2012 19:57:35 +0100
Subject: [antlr-interest] Memoize for syntactic predicates
Message-ID: <4F15C49F.6010107@gmx.de>

Hello everybody,

one simple question: Does the grammar option 'memoize' affects syntact
predicates?

operator_declarator
  : (unary_operator_declarator) => unary_operator_declarator
  | binary_operator_declarator
  ;

Both unary_operator_declarator and binary_operator_declarator start with
type 'operator'.

Regards,
Christian

From ibre5041 at ibrezina.net  Tue Jan 17 12:10:02 2012
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Tue, 17 Jan 2012 21:10:02 +0100
Subject: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
In-Reply-To: <8CEA342FD67FA4E-1C0C-2B5A@webmail-m152.sysops.aol.com>
References: <8CEA2B31B224AAE-4EC-C04BB@webmail-m152.sysops.aol.com>
	<CAN45N13QKbuwnt3yB=6P2RhQVV4WbibdXEL5ffsO1xtpzkFjDA@mail.gmail.com>
	<8CEA342FD67FA4E-1C0C-2B5A@webmail-m152.sysops.aol.com>
Message-ID: <4F15D59A.4050605@ibrezina.net>

Hi,
if you want to prove/disprove that you're the same bug you have to
compile the grammar using ANTLR ver 3.3.

I'm also waiting till this bug is fixed.

Ivan

On 01/17/2012 04:22 PM, Sean Walton wrote:
> Interesting. I think that this problem is very related, and it appears that the problem was not fixed.
>   BTW, when are synth-preds created?
>
>
>
> Sean Walton
> ab8kf at aim.com
>
>
>
>
>
> -----Original Message-----
> From: Eric<researcher0x00 at gmail.com>
> To: Sean Walton<ab8kf at aim.com>; ANTLR interest<antlr-interest at antlr.org>
> Sent: Tue, Jan 17, 2012 8:10 am
> Subject: Re: [antlr-interest] Need help with rule-parameters (ANTLR bug?)
>
>
> Sean,
>
> Have you seen? http://markmail.org/message/wr44syoliwmy6ors
>
> Eric
>
>
> On Mon, Jan 16, 2012 at 5:12 PM, Sean Walton<ab8kf at aim.com>  wrote:
>
>
>   When I put in this:
>
> 1 cccl_declaration[Object tree]
> 2     : cccl_name cccl_def_options '\n'
> 3         ->  ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 4     | n=cccl_name cccl_def_options '\n' cccl_declaration[n.getTree()]
> 5         ->  ^(CCCL_DECLARATION cccl_name cccl_def_options)
> 6     | cccl_name cccl_command_params* ':' '\n' cccl_execution_block
> 7         ->  ^(CCCL_IMPLEMENTATION { $tree } cccl_name cccl_command_params* cccl_execution_block)
> 8     ;
>
> I get this:
>
> 1    public final void synpred3_cccl_fragment() throws RecognitionException {
> 2-->   void  =null;
> 3
> 4
> 5        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: (n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()] )
> 6        // /home/swalton/Projects/Arthur/Tools/Testing/CCCL/cccl.g:153:4: n= cccl_name cccl_def_options '\\n' cccl_declaration[n.getTree()]
> 7        {
> 8        pushFollow(FOLLOW_cccl_name_in_synpred3_cccl402);
> 9-->     n=cccl_name();
> 10
> 11       state._fsp--;
> 12       if (state.failed) return ;
> 13
> 14       pushFollow(FOLLOW_cccl_def_options_in_synpred3_cccl404);
> 15       cccl_def_options();
> 16
> 17       state._fsp--;
> 18       if (state.failed) return ;
> 19
> 20       match(input,113,FOLLOW_113_in_synpred3_cccl406); if (state.failed) return ;
> 21
> 22       pushFollow(FOLLOW_cccl_declaration_in_synpred3_cccl408);
> 23       cccl_declaration(n.getTree());
> 24
> 26       state._fsp--;
> 27       if (state.failed) return ;
> 28
> 29       }
>
>      }
>
> Note the arrows. "void =null" is clearly wrong, and in "n=cccl_name()" the "n" is not defined (it is defined outside this synthetic predicate).
>
> What I want to do:
> I need to collect "cccl_name" from "cccl_declaration" and place them in the CCCL_IMPLEMENTATION (line #7) rewrite.
>
>
>
> Sean Walton
> ab8kf at aim.com
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Tue Jan 17 13:43:43 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 17 Jan 2012 13:43:43 -0800
Subject: [antlr-interest] upgrading confluence wiki
In-Reply-To: <ADBCB085-357A-4505-BA0D-C48923304424@cs.usfca.edu>
References: <ADBCB085-357A-4505-BA0D-C48923304424@cs.usfca.edu>
Message-ID: <94CCF0C7-3E55-4940-A5EC-061F89217BBC@cs.usfca.edu>

ok, updated to 3.5.13 confluence wiki. seems ok. was HUGE hassle.
ter
On Jan 17, 2012, at 10:35 AM, Terence Parr wrote:

> Hi, there will be a disruption today as I restart to use the new wiki. I hope it goes painlessly :)
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From researcher0x00 at gmail.com  Tue Jan 17 14:08:12 2012
From: researcher0x00 at gmail.com (Eric)
Date: Tue, 17 Jan 2012 17:08:12 -0500
Subject: [antlr-interest] upgrading confluence wiki
In-Reply-To: <94CCF0C7-3E55-4940-A5EC-061F89217BBC@cs.usfca.edu>
References: <ADBCB085-357A-4505-BA0D-C48923304424@cs.usfca.edu>
	<94CCF0C7-3E55-4940-A5EC-061F89217BBC@cs.usfca.edu>
Message-ID: <CAN45N11pmhW6c=0fS2OJgttOiiPnh5J=Mdy5Y=npHyDwPZPA-g@mail.gmail.com>

Ter,

As always, it the things you do for free and the support you give freely
that make ANTLR great.

Thanks, Eric

On Tue, Jan 17, 2012 at 4:43 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> ok, updated to 3.5.13 confluence wiki. seems ok. was HUGE hassle.
> ter
> On Jan 17, 2012, at 10:35 AM, Terence Parr wrote:
>
> > Hi, there will be a disruption today as I restart to use the new wiki. I
> hope it goes painlessly :)
> > Ter
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From gokul007 at gmail.com  Wed Jan 18 03:55:56 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 18 Jan 2012 19:55:56 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
Message-ID: <CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>

Is there any chance of a quicker C++ Target availability?
If the target activity, can be made into sub-tasks, i am ready to take up
some sub-tasks.

Thanks,
Gokul.

On Fri, Jan 13, 2012 at 2:59 AM, A Z <asicaddress at gmail.com> wrote:

> Hi Jim,
>
>  I don't think there's anything wrong with the C target. My impression of
> the code was that it was modified from the Java target and uses function
> pointers to be easily modifiable. I don't have any performance issues other
> than memory consumption and I think this is due to my atypical use case.
> Overall, the tool works great and I appreciate all the work that went into
> it.
>
>  Sam's timeline of 1 year is too long to wait for the new C++ target so
> I've already begun modifying the 3.4 lexer for my own purposes. I honestly
> wasn't expecting any more changes to ANTLR3.
>
>
>
> On Fri, Jan 13, 2012 at 12:07 AM, Jim Idle <jimi at temporal-wave.com> wrote:
>
> > I do plan on doing that in fact. However I would like to respond to the
> > criticisms here as follows:
> >
> > 1) I wrote the C runtime in under two weeks because I needed it for a
> > project and at that time ANTLR v3 was not released (beta). Hence by
> > waiting until v4 runtime is stable then we should get some cleaner
> > runtimes.
> > 2) So, I did not really know how anyone else would want to use it and so
> I
> > made absolutely everything dynamic. Since that time there have been lots
> > of memory and performance tweaks, but I am sure there are more I can do.
> > 3) I basically copied the Java model as is with the idea being that it
> > would be easier to follow changes that were made to the Java runtime in
> > the C runtime.
> > 4) There are performance enhancements you can turn on such as adding
> > defines for ANTLR3_INLINE_INPUT_8BIT or ANTLR3_INLINE_INPUT_16BIT and
> > defining SKIP_FOLLOW_SETS to avoid stacking rule descriptors only used by
> > error reporting.
> > 5) All my tests and most everyone else finds the C v3 runtime to be
> faster
> > than the C++ runtime, so I can only conclude that there is something
> > different about one or two grammar files.
> > 6) I did implement reuse other than for trees and that helps most of the
> > use cases where the initial memory allocation takes time and so you don't
> > want to tear it down and re-allocate it.
> > 7) It is a lot easier to start with someone else's code than it is to
> > start with vi and a blank screen. Where's the love?
> > 8) ANTLR is naturally more heavyweight than some other tools, but it is
> > usually easier to use it.
> > 9) Why not wait for v4 where some of these things are addressed as a
> > natural consequence of the design.
> >
> >
> > A minimum token needs the type and a pointer to the text, plus either a
> > pointer to the end of the text or the length. If you use a length then
> > with encodings like UTF8, you will start to need to traverse the text to
> > extract nnn characters. There are always tradeoffs. Pointers are 64 bits
> > not 32 bits on a 64 bit compiler. You can compile in 32 bit mode if you
> > don't need 64 bit stuff.
> >
> > Jim
> >
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of A Z
> > > Sent: Wednesday, January 11, 2012 5:38 PM
> > > To: Ruslan Zasukhin
> > > Cc: antlr-interest at antlr.org
> > > Subject: Re: [antlr-interest] Antlr v4 - C++ target
> > >
> > > The realistic minimum I see for commontoken in the existing 3.4 code is
> > > 32 bytes on a 64-bit architecture. This would involve modifications to
> > > the code generator to no longer use the function pointers(for
> > > setStart/setStopIndex/setType) and using a smaller data type for the
> > > channel, factory and type members. There is still an additional
> > > 16B/token used by the vector data structure holding the tokens.
> > >
> > >
> > >
> > > On Wed, Jan 11, 2012 at 5:09 PM, Ruslan Zasukhin <
> > > ruslan_zasukhin at valentina-db.com> wrote:
> > >
> > > > On 1/11/12 11:12 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:
> > > >
> > > > > If Jim did not implement the vtable indirection (that could be
> > > > > easily
> > > > changed,
> > > > > if so), then there is a little more opportunity for optimization,
> > > > > but
> > > > still
> > > > > the problem is that state information takes up much more memory
> > > than
> > > > does the
> > > > > text in tokens.
> > > >
> > > > Right,
> > > >
> > > > Well, lets look on antrl3commontoken.h
> > > >
> > > > API:
> > > >        19   pointers to func
> > > >                        32 bit os    19 * 4  = 76 bytes
> > > >
> > > > And about
> > > >        11 * 4 bytes  of useful info
> > > >
> > > >
> > > > So there is chance that in c++ style
> > > > OR with single pointer on ala-VT  token will become
> > > >
> > > >    from 118 bytes to 48 bytes
> > > >
> > > >
> > > >
> > > > --
> > > > Best regards,
> > > >
> > > > Ruslan Zasukhin
> > > > VP Engineering and New Technology
> > > > Paradigma Software, Inc
> > > >
> > > > Valentina - Joining Worlds of Information
> > > http://www.paradigmasoft.com
> > > >
> > > > [I feel the need: the need for speed]
> > > >
> > > >
> > > >
> > > >
> > > >
> > > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > > Unsubscribe:
> > > > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> > > address
> > > >
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > > email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From thomas at t-t.dk  Wed Jan 18 05:17:15 2012
From: thomas at t-t.dk (Thomas Thomsen)
Date: Wed, 18 Jan 2012 14:17:15 +0100
Subject: [antlr-interest] Optional spaces question
Message-ID: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>

I am pretty new to ANTLR, doing a DSL language. I like ANTLR a lot, but I
am struggling with a problem regarding optional whitespaces. My problem is
that I need to distinguish between "f(x)" and "f  (x)" -- note the space
between "f" and "(x)" in the latter (I am putting whitespace on the hidden
channel, and I want to continue to do that). The former is a function call,
the latter something different.

I found a post on this list from 2007 ("Handling optional spaces") which
addresses the exact same question. One suggestion was to have the lexer
absorb the left parenthesis if there is no space in between:

ID : ('a'..'z') + ;
FUNCTION_CALL: ID '(' ;

Then the lexer would return "f(" as a FUNCTION_CALL-token if there is not
space in between. This works, but it is not too pretty and complicates
things elsewhere in my code. The other suggestion was to check the hidden
channel for whitespace-tokens by means of Java code (actually C# in my
case). But since I am not yet too familiar with the inner workings of
ANTLR, this scares me a bit.

So I was thinking of a third strategy: Have a simple preprocessor look
through the input file, and if a letter is directly followed by a left
parenthesis, put some special character in between. So the preprocessor
transforms "f(x)" into "f&(x)", where "&" is a (glue) character not used
elsewhere in the grammar. And afterwards, it would be much easier to
distinguish between "f&(x)" and "f  (x)" in ANTLR.

Is this question or strategy completely stupid for some reason?

Best regards, and thanks for all the good work on ANTLR,

-Thomas Thomsen

From Norman at dunbar-it.co.uk  Wed Jan 18 05:29:35 2012
From: Norman at dunbar-it.co.uk (Norman Dunbar)
Date: Wed, 18 Jan 2012 13:29:35 +0000
Subject: [antlr-interest] Updated honey badger and examples
In-Reply-To: <CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
Message-ID: <4F16C93F.7030303@dunbar-it.co.uk>

On 11/01/12 21:49, Kyle Ferrio wrote:

> Q: how do you tell a boy Honey Badger from a girl Honey Badger?
> A: you don't.  they're both bad-ass.
Slightly off topic perhaps, but how bad ass is a honey badger exactly? 
Find out here http://www.liveleak.com/view?i=37d_1309267529. They are bad!

Cheers,
Norm

-- 
Norman Dunbar
Dunbar IT Consultants Ltd

Registered address:
Thorpe House
61 Richardshaw Lane
Pudsey
West Yorkshire
United Kingdom
LS28 7EL

Company Number: 05132767

From gokul007 at gmail.com  Wed Jan 18 05:53:32 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 18 Jan 2012 21:53:32 +0800
Subject: [antlr-interest] Optional spaces question
In-Reply-To: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
References: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
Message-ID: <CAHMh4-aaSn2WRRMpLrKvHh6ufY86gF7GieahRxmbpz-PM_58kQ@mail.gmail.com>

Hi,
   First of all, you cannot have a lexer rule inside another lexer rule on
the left. Either you need to make ID as a fragment lexer rule / make the
FUNCTION_CALL as a parser rule.
   Remember, even if there is a skip rule for spaces, it won't skip the
space that occurs in between fragment lexer rules inside a lexer rule. So
following the first suggestion, if ID is a fragment lexer rule, you can
write

FUNCTION_CALL : ID ( SPACE { /* do whatever you want here*/ } )*  '(';

Hope it helps.

Gokul.

On Wed, Jan 18, 2012 at 9:17 PM, Thomas Thomsen <thomas at t-t.dk> wrote:

> I am pretty new to ANTLR, doing a DSL language. I like ANTLR a lot, but I
> am struggling with a problem regarding optional whitespaces. My problem is
> that I need to distinguish between "f(x)" and "f  (x)" -- note the space
> between "f" and "(x)" in the latter (I am putting whitespace on the hidden
> channel, and I want to continue to do that). The former is a function call,
> the latter something different.
>
> I found a post on this list from 2007 ("Handling optional spaces") which
> addresses the exact same question. One suggestion was to have the lexer
> absorb the left parenthesis if there is no space in between:
>
> ID : ('a'..'z') + ;
> FUNCTION_CALL: ID '(' ;
>
> Then the lexer would return "f(" as a FUNCTION_CALL-token if there is not
> space in between. This works, but it is not too pretty and complicates
> things elsewhere in my code. The other suggestion was to check the hidden
> channel for whitespace-tokens by means of Java code (actually C# in my
> case). But since I am not yet too familiar with the inner workings of
> ANTLR, this scares me a bit.
>
> So I was thinking of a third strategy: Have a simple preprocessor look
> through the input file, and if a letter is directly followed by a left
> parenthesis, put some special character in between. So the preprocessor
> transforms "f(x)" into "f&(x)", where "&" is a (glue) character not used
> elsewhere in the grammar. And afterwards, it would be much easier to
> distinguish between "f&(x)" and "f  (x)" in ANTLR.
>
> Is this question or strategy completely stupid for some reason?
>
> Best regards, and thanks for all the good work on ANTLR,
>
> -Thomas Thomsen
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From researcher0x00 at gmail.com  Wed Jan 18 06:08:32 2012
From: researcher0x00 at gmail.com (Eric)
Date: Wed, 18 Jan 2012 09:08:32 -0500
Subject: [antlr-interest] Optional spaces question
In-Reply-To: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
References: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
Message-ID: <CAN45N101W-XTOY3t=M7ti0dP2xV7itpGr63SktgejH_x5C9PBg@mail.gmail.com>

On Wed, Jan 18, 2012 at 8:17 AM, Thomas Thomsen <thomas at t-t.dk> wrote:

> I am pretty new to ANTLR, doing a DSL language. I like ANTLR a lot, but I
> am struggling with a problem regarding optional whitespaces. My problem is
> that I need to distinguish between "f(x)" and "f  (x)" -- note the space
> between "f" and "(x)" in the latter (I am putting whitespace on the hidden
> channel, and I want to continue to do that). The former is a function call,
> the latter something different.
>
> I found a post on this list from 2007 ("Handling optional spaces") which
> addresses the exact same question. One suggestion was to have the lexer
> absorb the left parenthesis if there is no space in between:
>
> ID : ('a'..'z') + ;
> FUNCTION_CALL: ID '(' ;
>
> Then the lexer would return "f(" as a FUNCTION_CALL-token if there is not
> space in between. This works, but it is not too pretty and complicates
> things elsewhere in my code. The other suggestion was to check the hidden
> channel for whitespace-tokens by means of Java code (actually C# in my
> case). But since I am not yet too familiar with the inner workings of
> ANTLR, this scares me a bit.
>
> So I was thinking of a third strategy: Have a simple preprocessor look
> through the input file, and if a letter is directly followed by a left
> parenthesis, put some special character in between. So the preprocessor
> transforms "f(x)" into "f&(x)", where "&" is a (glue) character not used
> elsewhere in the grammar. And afterwards, it would be much easier to
> distinguish between "f&(x)" and "f  (x)" in ANTLR.
>
> Is this question or strategy completely stupid for some reason?
>

Personally, I think avoiding the inner workings of ANTLR because it is
scary is a bad trait to pick up.

When I started using ANTLR I spent lots of hours learning how it worked by
using the debugger. While I am not an expert at everything ANTLR, I don't
fear it.

One thing I have learned is that while the lexer and parser are probably
capable of determining if an input is acceptable, that doesn't mean that
the lexer and parser should do all of the work of accepting the input.

If you think of accepting an input as
1. Use the lexer to convert the input to tokens.
2. Use the parser to accept unambiguous input.
3. Use tree manipulation to validate and accept valid input.
then you can let the parser pass input that may not be valid but that is
unambiguous onto the next step and sort out the meaning and validity there.

For me, once the input is converted to a tree, it is easier to analyze and
manipulate because you can
1. search backward and forward
2. change the structure of the branches
3. change the info in the nodes
4. add and remove nodes and branches

Hope this sheds some light on the problem.

Eric







>
> Best regards, and thanks for all the good work on ANTLR,
>
> -Thomas Thomsen
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From kferrio at gmail.com  Wed Jan 18 06:30:27 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 18 Jan 2012 07:30:27 -0700
Subject: [antlr-interest] Updated honey badger and examples
In-Reply-To: <4F16C93F.7030303@dunbar-it.co.uk>
References: <7C050669-6475-4C47-AC24-F0C8AF5D7417@cs.usfca.edu>
	<CAAfeETq555Pbsa1dHBugShtzx-92PYWfQxNX9TgeneEDZnK8qQ@mail.gmail.com>
	<4F16C93F.7030303@dunbar-it.co.uk>
Message-ID: <CAAfeETphrfy0Z21fEPWSO5RS6ScTXUMmr7mTPd=rJ9hKX1ji8Q@mail.gmail.com>

No fear.  Heh heh.
On Jan 18, 2012 6:29 AM, "Norman Dunbar" <Norman at dunbar-it.co.uk> wrote:

> On 11/01/12 21:49, Kyle Ferrio wrote:
>
> > Q: how do you tell a boy Honey Badger from a girl Honey Badger?
> > A: you don't.  they're both bad-ass.
> Slightly off topic perhaps, but how bad ass is a honey badger exactly?
> Find out here http://www.liveleak.com/view?i=37d_1309267529. They are bad!
>
> Cheers,
> Norm
>
> --
> Norman Dunbar
> Dunbar IT Consultants Ltd
>
> Registered address:
> Thorpe House
> 61 Richardshaw Lane
> Pudsey
> West Yorkshire
> United Kingdom
> LS28 7EL
>
> Company Number: 05132767
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From researcher0x00 at gmail.com  Wed Jan 18 06:48:28 2012
From: researcher0x00 at gmail.com (Eric)
Date: Wed, 18 Jan 2012 09:48:28 -0500
Subject: [antlr-interest] Optional spaces question
In-Reply-To: <CAN45N101W-XTOY3t=M7ti0dP2xV7itpGr63SktgejH_x5C9PBg@mail.gmail.com>
References: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
	<CAN45N101W-XTOY3t=M7ti0dP2xV7itpGr63SktgejH_x5C9PBg@mail.gmail.com>
Message-ID: <CAN45N11PABrYw6E7r3HBT6=s9Nd3Xjy6B7C-Yii2kMiR1=FNoA@mail.gmail.com>

On Wed, Jan 18, 2012 at 9:08 AM, Eric <researcher0x00 at gmail.com> wrote:

>
>
> On Wed, Jan 18, 2012 at 8:17 AM, Thomas Thomsen <thomas at t-t.dk> wrote:
>
>> I am pretty new to ANTLR, doing a DSL language. I like ANTLR a lot, but I
>> am struggling with a problem regarding optional whitespaces. My problem is
>> that I need to distinguish between "f(x)" and "f  (x)" -- note the space
>> between "f" and "(x)" in the latter (I am putting whitespace on the hidden
>> channel, and I want to continue to do that). The former is a function
>> call,
>> the latter something different.
>>
>> I found a post on this list from 2007 ("Handling optional spaces") which
>> addresses the exact same question. One suggestion was to have the lexer
>> absorb the left parenthesis if there is no space in between:
>>
>> ID : ('a'..'z') + ;
>> FUNCTION_CALL: ID '(' ;
>>
>> Then the lexer would return "f(" as a FUNCTION_CALL-token if there is not
>> space in between. This works, but it is not too pretty and complicates
>> things elsewhere in my code. The other suggestion was to check the hidden
>> channel for whitespace-tokens by means of Java code (actually C# in my
>> case). But since I am not yet too familiar with the inner workings of
>> ANTLR, this scares me a bit.
>>
>> So I was thinking of a third strategy: Have a simple preprocessor look
>> through the input file, and if a letter is directly followed by a left
>> parenthesis, put some special character in between. So the preprocessor
>> transforms "f(x)" into "f&(x)", where "&" is a (glue) character not used
>> elsewhere in the grammar. And afterwards, it would be much easier to
>> distinguish between "f&(x)" and "f  (x)" in ANTLR.
>>
>> Is this question or strategy completely stupid for some reason?
>>
>
> Personally, I think avoiding the inner workings of ANTLR because it is
> scary is a bad trait to pick up.
>
> When I started using ANTLR I spent lots of hours learning how it worked by
> using the debugger. While I am not an expert at everything ANTLR, I don't
> fear it.
>
> One thing I have learned is that while the lexer and parser are probably
> capable of determining if an input is acceptable, that doesn't mean that
> the lexer and parser should do all of the work of accepting the input.
>
> If you think of accepting an input as
> 1. Use the lexer to convert the input to tokens.
> 2. Use the parser to accept unambiguous input.
> 3. Use tree manipulation to validate and accept valid input.
> then you can let the parser pass input that may not be valid but that is
> unambiguous onto the next step and sort out the meaning and validity there.
>
> For me, once the input is converted to a tree, it is easier to analyze and
> manipulate because you can
> 1. search backward and forward
> 2. change the structure of the branches
> 3. change the info in the nodes
> 4. add and remove nodes and branches
>
> Hope this sheds some light on the problem.
>
> Eric
>
>

Another option, though I don't use it, would be looking into using the
stream rewrite API, you should be able to pick up the tokens from the lexer
with the space not on the hidden channel, then when you see the pattern ID
SPACE RIGHT_PAREN, you could rewrite it to SOMETHING_DIFFERENT, before
passing onto the parser. If you don't want the parser to see a SPACE token,
you could also use the stream rewrite to remove them.

Additionally,

Once the tree is available after the parser, one can create tables, cross
references and other data structures to assist in the final goal, there is
no requirement limiting one to using only the tree.

One way to make a grammar easier to write is to make the rules less
stringent. If you think of a input value as a dog, but don't know how to
define a dog using grammar rules, try creating a rule for animals and then
sort out of if the animal is a dog once you have the tree.

Or in your case, I would avoid putting the space onto the hidden channel
and pass the space all the way back to the tree and then sort it out there.

A third option might be to try using Syntactic Predicates, but again I
suspect that you will have to pass the SPACE to the parser, which requires
parser rules deal with spaces everywhere.

Eric



>
>
>

>
>
>
>
>
>>
>> Best regards, and thanks for all the good work on ANTLR,
>>
>> -Thomas Thomsen
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From parrt at cs.usfca.edu  Wed Jan 18 07:55:20 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 18 Jan 2012 07:55:20 -0800
Subject: [antlr-interest] Website error: "Oops - an error has occurred"
In-Reply-To: <B9FA10B2-C7B0-4499-88D8-DB1F94BF6660@cs.usfca.edu>
References: <CAJZjf_zuRkP+5aga2YHTx-0xZCHf5gTWz_MonbO8mWgmBRhu3g@mail.gmail.com>
	<B9FA10B2-C7B0-4499-88D8-DB1F94BF6660@cs.usfca.edu>
Message-ID: <657E7413-C899-433E-9DE0-36CD6C047DCD@cs.usfca.edu>

hooray! an update to wiki makes this work again.
Ter
On Jan 11, 2012, at 8:28 AM, Terence Parr wrote:

> weird. sorry about that. it must use a template no longer available after last upgrade. don't know how to fix!
> Ter
> On Jan 11, 2012, at 7:54 AM, Pedro Francisco wrote:
> 
>> Hi!
>> I'd just like to report that on page "Example tree rewriting with
>> patterns" < http://www.antlr.org/wiki/display/~admin/2008/11/30/Example+tree+rewriting+with+patterns
>>> , I get an error page:
>> 
>> Title:  "Oops - an error has occurred"
>>> System Error
>>> 
>>> A system error has occurred ? our apologies!
>>> 
>>> For immediate troubleshooting, consult our knowledge base for a solution.
>>> 
>>> If you would like to receive support from Atlassian's support team, ask your Confluence administrator to create a support issue on Atlassian's support system with the following information:
>>> 
>>>   a description of your problem and what you were doing at the time it occurred
>>>   a copy of the error and system information found below
>>>   a copy of the application logs (if possible).
>>> 
>>> Your Confluence administrator can use the support request form to create a support ticket which will include this information.
>>> 
>>> We will respond as promptly as possible.
>>> Thank you!
>>> 
>>> Return to site homepage?
>>> Cause
>>> ... (backtrace here) ...
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Wed Jan 18 08:01:39 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 18 Jan 2012 08:01:39 -0800
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
Message-ID: <88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>

I'm leaning towards git but Sam Harwell, who is super important on this project, using windows and would need good git gui outside of dev tool. Can anybody comment on what is useful (non cmd-line)?

Ter
On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:

> On Tue, Jan 10, 2012 at 09:54, John D. Mitchell <jdmitchell at gmail.com> wrote:
> Hg and Git are comparable on a feature basis.
> 
> However, Hg and Git are built with very different philosophies. Git is perfectly happy to allow mutation of history.
> 
> By default, public repositories are not rebase-able. The fact that something _can_ be achieved should not be held against it.
> 
> And locally, if you don't want to rebase, don't. I find that on small, private-only "feature" branches or "experiment" branches, that rebasing is a useful tool. So is cherry picking. Knowing when to use a powerful tool is part of being a good technician/ programmer.
>  
> Git was a steep learning curve for me. "Pro Git" book I find excellent. Bought a paper copy.
> 
> I used bitkeeper, arch/tla, and cvs etc. in the past. I think others have said, but git stash is a godsend, as well as other bits and bobs.
> 
> _______________________________________________
> stringtemplate-interest mailing list
> stringtemplate-interest at antlr.org
> http://www.antlr.org/mailman/listinfo/stringtemplate-interest


From sujithspillai at gmail.com  Wed Jan 18 08:12:01 2012
From: sujithspillai at gmail.com (Sujith Pillai)
Date: Wed, 18 Jan 2012 11:12:01 -0500
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
 comment on bitbucket.org?
In-Reply-To: <88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
Message-ID: <CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>

1) TortoiseGit - very popular
2) msysgit - second
3) SmartGit - I have heard good things about this, but haven't met
someone who uses this (yet).



On Wed, Jan 18, 2012 at 11:01 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> I'm leaning towards git but Sam Harwell, who is super important on this project, using windows and would need good git gui outside of dev tool. Can anybody comment on what is useful (non cmd-line)?
>
> Ter
> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
>
>> On Tue, Jan 10, 2012 at 09:54, John D. Mitchell <jdmitchell at gmail.com> wrote:
>> Hg and Git are comparable on a feature basis.
>>
>> However, Hg and Git are built with very different philosophies. Git is perfectly happy to allow mutation of history.
>>
>> By default, public repositories are not rebase-able. The fact that something _can_ be achieved should not be held against it.
>>
>> And locally, if you don't want to rebase, don't. I find that on small, private-only "feature" branches or "experiment" branches, that rebasing is a useful tool. So is cherry picking. Knowing when to use a powerful tool is part of being a good technician/ programmer.
>>
>> Git was a steep learning curve for me. "Pro Git" book I find excellent. Bought a paper copy.
>>
>> I used bitkeeper, arch/tla, and cvs etc. in the past. I think others have said, but git stash is a godsend, as well as other bits and bobs.
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From pgquiles at elpauer.org  Wed Jan 18 08:14:58 2012
From: pgquiles at elpauer.org (Pau Garcia i Quiles)
Date: Wed, 18 Jan 2012 17:14:58 +0100
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
Message-ID: <CAKcBoks8GTzE-7J9mQKAJa6JYisJaj8JewPzetAKuFpDeB2Bnw@mail.gmail.com>

Hi,

At work we evaluated BitBucket and others and in the end purchased Assembla:

http://www.assembla.com

Lots of very tightly integrated tools: Mercurial, git and Subversion,
wiki, tickets, Scrum planning, etc. The Stream tool, as simple as it
may seem, provides invaluable value in big projects.



On Mon, Jan 9, 2012 at 8:03 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Contemplating switch to mercurial and hosting at bitbucket.org.
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



-- 
Pau Garcia i Quiles
http://www.elpauer.org
(Due to my workload, I may need 10 days to answer)

From kferrio at gmail.com  Wed Jan 18 08:19:18 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 18 Jan 2012 09:19:18 -0700
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
 comment on bitbucket.org?
In-Reply-To: <88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
Message-ID: <CAAfeETpmPtgdgjDYhuh=xBmy65U4HB8WRpbVAW_4t-qMFBqu3A@mail.gmail.com>

I have looked, as recently as last month.  I am aware of no desktop GUI
front end for git likely to meet the expectations of users not already
comfortable with git on the command line.  It's a pity.  You'd think some
enterprising person might write a desktop app with the look and feel of
GitHub which also talks to GitHub...

(Slightly off-topic...my gold standard for a desktop dvcs gui is Bazaar
Explorer for bzr.  Not only is is beautiful and functional, dealing with
local or remote repos is as transparent as a URL.  I'm not advocating for
bzr here.  I'm just providing a frame of reference for my critique of front
ends for git or any other dvcs.)

Kyle
 On Jan 18, 2012 9:01 AM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

> I'm leaning towards git but Sam Harwell, who is super important on this
> project, using windows and would need good git gui outside of dev tool. Can
> anybody comment on what is useful (non cmd-line)?
>
> Ter
> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
>
> > On Tue, Jan 10, 2012 at 09:54, John D. Mitchell <jdmitchell at gmail.com>
> wrote:
> > Hg and Git are comparable on a feature basis.
> >
> > However, Hg and Git are built with very different philosophies. Git is
> perfectly happy to allow mutation of history.
> >
> > By default, public repositories are not rebase-able. The fact that
> something _can_ be achieved should not be held against it.
> >
> > And locally, if you don't want to rebase, don't. I find that on small,
> private-only "feature" branches or "experiment" branches, that rebasing is
> a useful tool. So is cherry picking. Knowing when to use a powerful tool is
> part of being a good technician/ programmer.
> >
> > Git was a steep learning curve for me. "Pro Git" book I find excellent.
> Bought a paper copy.
> >
> > I used bitkeeper, arch/tla, and cvs etc. in the past. I think others
> have said, but git stash is a godsend, as well as other bits and bobs.
> >
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jon.forums at gmail.com  Wed Jan 18 08:21:48 2012
From: jon.forums at gmail.com (Jon)
Date: Wed, 18 Jan 2012 11:21:48 -0500
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
 comment on bitbucket.org?
In-Reply-To: <88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
Message-ID: <20120118112148.bd7603b95b09e21f4cf5be6a@gmail.com>

While I primarily use git via cmd line (msysgit) on Win7 I find the gui capabilities of both of the following helpful:

  http://code.google.com/p/gitextensions/
  http://code.google.com/p/tortoisegit/

Each has a different usage style so play a bit with each to see which style works best for you.

One note regarding rebasing. Although it's almost always a very bad idea to rebase public branches, there are cases (low-end emulation of mercurial's mq via "patch branches") in which it makes a lot of sense and can be managed with proper communication/expectation setting and knowledge of just a few git concepts like `git reset` and `git stash`.

  http://progit.org/2011/07/11/reset.html
  https://github.com/thecodeshop/ruby/wiki/FAQ#wiki-forced


Jon

---
Fail fast. Fail often. Fail publicly. Learn. Adapt. Repeat.
http://thecodeshop.github.com | http://jonforums.github.com/
twitter: @jonforums



On Wed, 18 Jan 2012 08:01:39 -0800
Terence Parr <parrt at cs.usfca.edu> wrote:

> I'm leaning towards git but Sam Harwell, who is super important on this project, using windows and would need good git gui outside of dev tool. Can anybody comment on what is useful (non cmd-line)?
> 
> Ter
> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
> 
> > On Tue, Jan 10, 2012 at 09:54, John D. Mitchell <jdmitchell at gmail.com> wrote:
> > Hg and Git are comparable on a feature basis.
> > 
> > However, Hg and Git are built with very different philosophies. Git is perfectly happy to allow mutation of history.
> > 
> > By default, public repositories are not rebase-able. The fact that something _can_ be achieved should not be held against it.
> > 
> > And locally, if you don't want to rebase, don't. I find that on small, private-only "feature" branches or "experiment" branches, that rebasing is a useful tool. So is cherry picking. Knowing when to use a powerful tool is part of being a good technician/ programmer.
> >  
> > Git was a steep learning curve for me. "Pro Git" book I find excellent. Bought a paper copy.
> > 
> > I used bitkeeper, arch/tla, and cvs etc. in the past. I think others have said, but git stash is a godsend, as well as other bits and bobs.
> > 
> > _______________________________________________
> > stringtemplate-interest mailing list
> > stringtemplate-interest at antlr.org
> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
> 

From kferrio at gmail.com  Wed Jan 18 08:50:11 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Wed, 18 Jan 2012 09:50:11 -0700
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
 comment on bitbucket.org?
In-Reply-To: <CAAfeETpmPtgdgjDYhuh=xBmy65U4HB8WRpbVAW_4t-qMFBqu3A@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
	<CAAfeETpmPtgdgjDYhuh=xBmy65U4HB8WRpbVAW_4t-qMFBqu3A@mail.gmail.com>
Message-ID: <CAAfeETrOdEcs9BaZ2Zydv1SY3-DqFcnGog2neiL9T9Pr4wdEng@mail.gmail.com>

I forgot to mention an important point... TortoiseGit is great except there
are downsides to having vcs so tightly integrated into the Windows shell.
For example...sometimes waiting for icon overlays to update on very
large/deep folders and having a context menu which is always a little
visually cluttered whether you need it or not.  So some of my projects bias
me against shell integration.   But for antlr I think it would probably be
fine.  That applies to any of the Tortoise family of tools.

Kyle
 On Jan 18, 2012 9:19 AM, "Kyle Ferrio" <kferrio at gmail.com> wrote:

> I have looked, as recently as last month.  I am aware of no desktop GUI
> front end for git likely to meet the expectations of users not already
> comfortable with git on the command line.  It's a pity.  You'd think some
> enterprising person might write a desktop app with the look and feel of
> GitHub which also talks to GitHub...
>
> (Slightly off-topic...my gold standard for a desktop dvcs gui is Bazaar
> Explorer for bzr.  Not only is is beautiful and functional, dealing with
> local or remote repos is as transparent as a URL.  I'm not advocating for
> bzr here.  I'm just providing a frame of reference for my critique of front
> ends for git or any other dvcs.)
>
> Kyle
>  On Jan 18, 2012 9:01 AM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
>
>> I'm leaning towards git but Sam Harwell, who is super important on this
>> project, using windows and would need good git gui outside of dev tool. Can
>> anybody comment on what is useful (non cmd-line)?
>>
>> Ter
>> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
>>
>> > On Tue, Jan 10, 2012 at 09:54, John D. Mitchell <jdmitchell at gmail.com>
>> wrote:
>> > Hg and Git are comparable on a feature basis.
>> >
>> > However, Hg and Git are built with very different philosophies. Git is
>> perfectly happy to allow mutation of history.
>> >
>> > By default, public repositories are not rebase-able. The fact that
>> something _can_ be achieved should not be held against it.
>> >
>> > And locally, if you don't want to rebase, don't. I find that on small,
>> private-only "feature" branches or "experiment" branches, that rebasing is
>> a useful tool. So is cherry picking. Knowing when to use a powerful tool is
>> part of being a good technician/ programmer.
>> >
>> > Git was a steep learning curve for me. "Pro Git" book I find excellent.
>> Bought a paper copy.
>> >
>> > I used bitkeeper, arch/tla, and cvs etc. in the past. I think others
>> have said, but git stash is a godsend, as well as other bits and bobs.
>> >
>> > _______________________________________________
>> > stringtemplate-interest mailing list
>> > stringtemplate-interest at antlr.org
>> > http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>

From opensource at peoplemerge.com  Wed Jan 18 08:55:49 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Wed, 18 Jan 2012 11:55:49 -0500
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CAKcBoks8GTzE-7J9mQKAJa6JYisJaj8JewPzetAKuFpDeB2Bnw@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CAKcBoks8GTzE-7J9mQKAJa6JYisJaj8JewPzetAKuFpDeB2Bnw@mail.gmail.com>
Message-ID: <CANSf4X5zz=an_x6-6pV9+fjuCiC0iUe9M8qHzAW+Agm6BLi+dw@mail.gmail.com>

On Wed, Jan 18, 2012 at 11:14 AM, Pau Garcia i Quiles
<pgquiles at elpauer.org>wrote:

> At work we evaluated BitBucket and others and in the end purchased
> Assembla:
>
> http://www.assembla.com
>
>
Assembla looks great, I've looked at using Redmine (and its ruby community
of plugins) for most of these features, though not sure if it's as good for
an open-source project as an internal one.

From pgquiles at elpauer.org  Wed Jan 18 09:02:35 2012
From: pgquiles at elpauer.org (Pau Garcia i Quiles)
Date: Wed, 18 Jan 2012 18:02:35 +0100
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <CANSf4X5zz=an_x6-6pV9+fjuCiC0iUe9M8qHzAW+Agm6BLi+dw@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CAKcBoks8GTzE-7J9mQKAJa6JYisJaj8JewPzetAKuFpDeB2Bnw@mail.gmail.com>
	<CANSf4X5zz=an_x6-6pV9+fjuCiC0iUe9M8qHzAW+Agm6BLi+dw@mail.gmail.com>
Message-ID: <CAKcBokt4wrcCGVagiyKNMrZVz-=XzUMuAsTjM-fa+Jrk26hRuQ@mail.gmail.com>

On Wed, Jan 18, 2012 at 5:55 PM, Dave Thomas <opensource at peoplemerge.com> wrote:

> Assembla looks great, I've looked at using Redmine (and its ruby community
> of plugins) for most of these features, though not sure if it's as good for
> an open-source project as an internal one.

I'm using Assembla for this open source project:

http://www.assembla.com/spaces/zsync-windows

It's good so far.

There are thing to improve, sure, but Assembla is the best tool we
found for developers and our management, verification, validation and
support teams also like it.

-- 
Pau Garcia i Quiles
http://www.elpauer.org
(Due to my workload, I may need 10 days to answer)

From sam at tunnelvisionlabs.com  Wed Jan 18 09:03:29 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 18 Jan 2012 11:03:29 -0600
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
	<CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
Message-ID: <024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>

As a bit more background, I do development on many projects in several
different languages and environments. My "primary" languages are C# and C++
with Visual Studio. For ANTLR and school I also work in Java using IntelliJ
and more recently NetBeans. I always use an external GUI for source control
before checking files in because it gives me extra control in preventing
mistakes when working on someone else's project - I diff every file to
ensure that my code formatting and even whitespace match the settings of
code around my changes. I find that when it specifically comes to checking
files in, IDE integrations can occasionally have "glitches" (unexpected
behavior, nuances, and/or bugs) so I avoid them.

For external tools, I find P4V (Perforce) feature rich but slow and
particularly cumbersome when it comes to experimenting with code checked out
from a read-only repository. Nevertheless, I frequently use it since
Perforce is the chosen SCC for all the commercial projects I've been
involved with. TortoiseHG Workbench has been exceptional (but not perfect),
and has stable, complete support across all of the development environments
I work with. TortoiseSVN is truly polished and performs very well, but
suffers from limitations imposed by SVN itself.

Git concerns me not only for falling behind these in toolchain/GUI support
on Windows, but I also don't see a big movement to close the gap. TortoiseHG
is a particular example of a very actively developed project with frequent
releases.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Sujith Pillai [mailto:sujithspillai at gmail.com] 
Sent: Wednesday, January 18, 2012 10:12 AM
To: Terence Parr
Cc: stringtemplate-interest List; antlr-interest Interest; Zenaan Harkness
Subject: Re: [antlr-interest] [stringtemplate-interest] anybody care to
comment on bitbucket.org?

1) TortoiseGit - very popular
2) msysgit - second
3) SmartGit - I have heard good things about this, but haven't met someone
who uses this (yet).



On Wed, Jan 18, 2012 at 11:01 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> I'm leaning towards git but Sam Harwell, who is super important on this
project, using windows and would need good git gui outside of dev tool. Can
anybody comment on what is useful (non cmd-line)?
>
> Ter
> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
>
>> On Tue, Jan 10, 2012 at 09:54, John D. Mitchell <jdmitchell at gmail.com>
wrote:
>> Hg and Git are comparable on a feature basis.
>>
>> However, Hg and Git are built with very different philosophies. Git is
perfectly happy to allow mutation of history.
>>
>> By default, public repositories are not rebase-able. The fact that
something _can_ be achieved should not be held against it.
>>
>> And locally, if you don't want to rebase, don't. I find that on small,
private-only "feature" branches or "experiment" branches, that rebasing is a
useful tool. So is cherry picking. Knowing when to use a powerful tool is
part of being a good technician/ programmer.
>>
>> Git was a steep learning curve for me. "Pro Git" book I find excellent.
Bought a paper copy.
>>
>> I used bitkeeper, arch/tla, and cvs etc. in the past. I think others have
said, but git stash is a godsend, as well as other bits and bobs.
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jdmitchell at gmail.com  Wed Jan 18 09:13:05 2012
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Wed, 18 Jan 2012 09:13:05 -0800
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
	<CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
	<024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
Message-ID: <5DA97719-244B-4B7E-B619-2DAD1062AA6E@gmail.com>

I can understand wanting to take advantage of GitHub to help the spread of Antlr, StringTemplate, etc.

If you still want to use Hg, you can use hg-git to deal with the interaction with the git(hub) repos. The thing that I've run into with using that is that git is sloppy w.r.t. files with the same name but in different cases (but no project should be doing anything so stupid :-) so you might need to use git directly to fix that.

TortoiseHg has support for hg-git but I've never tried it.

Have fun,
John

On Jan 18, 2012, at 09:03 , Sam Harwell wrote:
[...]
> As a bit more background, I do development on many projects in several
> different languages and environments. My "primary" languages are C# and C++
> with Visual Studio. For ANTLR and school I also work in Java using IntelliJ
> and more recently NetBeans. I always use an external GUI for source control
> before checking files in because it gives me extra control in preventing
> mistakes when working on someone else's project - I diff every file to
> ensure that my code formatting and even whitespace match the settings of
> code around my changes. I find that when it specifically comes to checking
> files in, IDE integrations can occasionally have "glitches" (unexpected
> behavior, nuances, and/or bugs) so I avoid them.
> 
> For external tools, I find P4V (Perforce) feature rich but slow and
> particularly cumbersome when it comes to experimenting with code checked out
> from a read-only repository. Nevertheless, I frequently use it since
> Perforce is the chosen SCC for all the commercial projects I've been
> involved with. TortoiseHG Workbench has been exceptional (but not perfect),
> and has stable, complete support across all of the development environments
> I work with. TortoiseSVN is truly polished and performs very well, but
> suffers from limitations imposed by SVN itself.
> 
> Git concerns me not only for falling behind these in toolchain/GUI support
> on Windows, but I also don't see a big movement to close the gap. TortoiseHG
> is a particular example of a very actively developed project with frequent
> releases.

From diabeteman at gmail.com  Wed Jan 18 10:09:59 2012
From: diabeteman at gmail.com (Robin)
Date: Wed, 18 Jan 2012 19:09:59 +0100
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
 comment on bitbucket.org?
In-Reply-To: <5DA97719-244B-4B7E-B619-2DAD1062AA6E@gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
	<CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
	<024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
	<5DA97719-244B-4B7E-B619-2DAD1062AA6E@gmail.com>
Message-ID: <CA+_G_arvE3x6Qi40TNN2WBw25C7r1n7tzaSyxF6Ny8h0mcQbLA@mail.gmail.com>

Hello there,

If the need is to improve visibility,  What about using bitbucket or Google
code to host the repositories ? You would not need to translate Hg to git.

Really, if you need to work on Windows, all GUI tools I have seen arround
git are just (bugged) toys compared to Hg workbench. Apparently, the whole
git community is allergic to Microsoft environments  :-)

Robin
PS: sorry to John, forgot to reply all ^^

On Wed, Jan 18, 2012 at 6:13 PM, John D. Mitchell <jdmitchell at gmail.com>wrote:

> I can understand wanting to take advantage of GitHub to help the spread of
> Antlr, StringTemplate, etc.
>
> If you still want to use Hg, you can use hg-git to deal with the
> interaction with the git(hub) repos. The thing that I've run into with
> using that is that git is sloppy w.r.t. files with the same name but in
> different cases (but no project should be doing anything so stupid :-) so
> you might need to use git directly to fix that.
>
> TortoiseHg has support for hg-git but I've never tried it.
>
> Have fun,
> John
>
> On Jan 18, 2012, at 09:03 , Sam Harwell wrote:
> [...]
> > As a bit more background, I do development on many projects in several
> > different languages and environments. My "primary" languages are C# and
> C++
> > with Visual Studio. For ANTLR and school I also work in Java using
> IntelliJ
> > and more recently NetBeans. I always use an external GUI for source
> control
> > before checking files in because it gives me extra control in preventing
> > mistakes when working on someone else's project - I diff every file to
> > ensure that my code formatting and even whitespace match the settings of
> > code around my changes. I find that when it specifically comes to
> checking
> > files in, IDE integrations can occasionally have "glitches" (unexpected
> > behavior, nuances, and/or bugs) so I avoid them.
> >
> > For external tools, I find P4V (Perforce) feature rich but slow and
> > particularly cumbersome when it comes to experimenting with code checked
> out
> > from a read-only repository. Nevertheless, I frequently use it since
> > Perforce is the chosen SCC for all the commercial projects I've been
> > involved with. TortoiseHG Workbench has been exceptional (but not
> perfect),
> > and has stable, complete support across all of the development
> environments
> > I work with. TortoiseSVN is truly polished and performs very well, but
> > suffers from limitations imposed by SVN itself.
> >
> > Git concerns me not only for falling behind these in toolchain/GUI
> support
> > on Windows, but I also don't see a big movement to close the gap.
> TortoiseHG
> > is a particular example of a very actively developed project with
> frequent
> > releases.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jmurray at aerotech.com  Wed Jan 18 10:35:49 2012
From: jmurray at aerotech.com (Justin Murray)
Date: Wed, 18 Jan 2012 13:35:49 -0500
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
Message-ID: <6B458D23F5D4A24ABCDB3C78EA97393B02AFFEF6@EXCH-VIRTUAL.aerotechad.com>

I use TortoiseGit on Windows, and it works really well for my projects. 
It just integrates into Windows Explorer, and provides context menu 
entries for everything. It may not be as feature full as TortoiseHg, but 
I really haven't found it to be lacking any functionality that I would 
actually need. I'd suggest giving it a try, I really like it.

- Justin

On 1/18/2012 11:01 AM, Terence Parr wrote:
> I'm leaning towards git but Sam Harwell, who is super important on this project, using windows and would need good git gui outside of dev tool. Can anybody comment on what is useful (non cmd-line)?
>
> Ter
> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
>
>> On Tue, Jan 10, 2012 at 09:54, John D. Mitchell<jdmitchell at gmail.com>  wrote:
>> Hg and Git are comparable on a feature basis.
>>
>> However, Hg and Git are built with very different philosophies. Git is perfectly happy to allow mutation of history.
>>
>> By default, public repositories are not rebase-able. The fact that something _can_ be achieved should not be held against it.
>>
>> And locally, if you don't want to rebase, don't. I find that on small, private-only "feature" branches or "experiment" branches, that rebasing is a useful tool. So is cherry picking. Knowing when to use a powerful tool is part of being a good technician/ programmer.
>>
>> Git was a steep learning curve for me. "Pro Git" book I find excellent. Bought a paper copy.
>>
>> I used bitkeeper, arch/tla, and cvs etc. in the past. I think others have said, but git stash is a godsend, as well as other bits and bobs.
>>
>> _______________________________________________
>> stringtemplate-interest mailing list
>> stringtemplate-interest at antlr.org
>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jdmitchell at gmail.com  Wed Jan 18 10:41:44 2012
From: jdmitchell at gmail.com (John D. Mitchell)
Date: Wed, 18 Jan 2012 10:41:44 -0800
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
	comment on bitbucket.org?
In-Reply-To: <CA+_G_arvE3x6Qi40TNN2WBw25C7r1n7tzaSyxF6Ny8h0mcQbLA@mail.gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
	<CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
	<024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
	<5DA97719-244B-4B7E-B619-2DAD1062AA6E@gmail.com>
	<CA+_G_arvE3x6Qi40TNN2WBw25C7r1n7tzaSyxF6Ny8h0mcQbLA@mail.gmail.com>
Message-ID: <FD51CE9D-8A9A-4D1D-A70D-F2165C5B2AF4@gmail.com>

On Jan 18, 2012, at 10:09 , Robin wrote:
[...]
> If the need is to improve visibility,  What about using bitbucket or Google code to host the repositories ? You would not need to translate Hg to git.

Yeah, that's where this conversation started. And, fwiw, I totally concur.

However, to be fair, there's an argument to be made that Github is the hosted repository with the most activity in terms of getting in more users (i.e., it's the most viral).

And yes, I use all three hosting (GC, BB, and GH).

Cheers,
John


From mchopra at cadence.com  Wed Jan 18 22:27:35 2012
From: mchopra at cadence.com (Manu Chopra)
Date: Thu, 19 Jan 2012 11:57:35 +0530
Subject: [antlr-interest] ANTLR Peak Memory Issue
Message-ID: <F7A8F4A85B0A084884A3448703D1F397F83E14BC@MAILIN2.global.cadence.com>

We are writing a parser using ANTLR, however find unusually high peak memory. Some key points:
*       We use ANTLR C target. Our application is C++.
*       There are no references to $text etc. We directly use token start and end pointers to form string ourselves, where required.
*       Grammar is LL(2).
*       We observe that the token structure itself is bulky 264 bytes or something on 64 bit platform.
*       Further, looks like that ANTLR is tokenizing entire source upfront. This with large token size leads to almost peak memory even before real parsing begins.
*       I went thru some of the earlier posts on the forum and see idea of partitioning the source file lexically and process in parts. Problem is that even sections of the source, which can be lexically identified, are large enough to give us memory problem.

Can you suggest options we can explore to reduce peak the memory? Is there a token stream implementation which keeps only some constant number of tokens in memory as oppose to all?

I also understand that active development work is going on with ANTLR 4.x:
*       Can you share some information on its likely availability of C/C++ target? Approximate time frame is good.
*       If token size going to be smaller in 4.x?
*       Will it still demand that all text be tokenized upfront?

Thank you,
-Manu.



From thomas at t-t.dk  Thu Jan 19 02:17:26 2012
From: thomas at t-t.dk (Thomas Thomsen)
Date: Thu, 19 Jan 2012 11:17:26 +0100
Subject: [antlr-interest] Optional spaces question
In-Reply-To: <CAHMh4-aaSn2WRRMpLrKvHh6ufY86gF7GieahRxmbpz-PM_58kQ@mail.gmail.com>
References: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
	<CAHMh4-aaSn2WRRMpLrKvHh6ufY86gF7GieahRxmbpz-PM_58kQ@mail.gmail.com>
Message-ID: <CAHQvCRdzbm7aYabQ4cs42XjP1sRwA=fs9KyD978koPe4J7APAA@mail.gmail.com>

You are right: I need to make the ID a fragment (I copied the two lines
from the older similar question without checking validity).

Your suggestion is interesting: putting action code inside the lexer (where
the whitespace has not yet been filtered out and therefore is less hidden).
I'll try that, thanks.

Best regards,

-Thomas


2012/1/18 Gokulakannan Somasundaram <gokul007 at gmail.com>

> Hi,
>    First of all, you cannot have a lexer rule inside another lexer rule on
> the left. Either you need to make ID as a fragment lexer rule / make the
> FUNCTION_CALL as a parser rule.
>    Remember, even if there is a skip rule for spaces, it won't skip the
> space that occurs in between fragment lexer rules inside a lexer rule. So
> following the first suggestion, if ID is a fragment lexer rule, you can
> write
>
> FUNCTION_CALL : ID ( SPACE { /* do whatever you want here*/ } )*  '(';
>
> Hope it helps.
>
> Gokul.
>
> On Wed, Jan 18, 2012 at 9:17 PM, Thomas Thomsen <thomas at t-t.dk> wrote:
>
>> I am pretty new to ANTLR, doing a DSL language. I like ANTLR a lot, but I
>> am struggling with a problem regarding optional whitespaces. My problem is
>> that I need to distinguish between "f(x)" and "f  (x)" -- note the space
>> between "f" and "(x)" in the latter (I am putting whitespace on the hidden
>> channel, and I want to continue to do that). The former is a function
>> call,
>> the latter something different.
>>
>> I found a post on this list from 2007 ("Handling optional spaces") which
>> addresses the exact same question. One suggestion was to have the lexer
>> absorb the left parenthesis if there is no space in between:
>>
>> ID : ('a'..'z') + ;
>> FUNCTION_CALL: ID '(' ;
>>
>> Then the lexer would return "f(" as a FUNCTION_CALL-token if there is not
>> space in between. This works, but it is not too pretty and complicates
>> things elsewhere in my code. The other suggestion was to check the hidden
>> channel for whitespace-tokens by means of Java code (actually C# in my
>> case). But since I am not yet too familiar with the inner workings of
>> ANTLR, this scares me a bit.
>>
>> So I was thinking of a third strategy: Have a simple preprocessor look
>> through the input file, and if a letter is directly followed by a left
>> parenthesis, put some special character in between. So the preprocessor
>> transforms "f(x)" into "f&(x)", where "&" is a (glue) character not used
>> elsewhere in the grammar. And afterwards, it would be much easier to
>> distinguish between "f&(x)" and "f  (x)" in ANTLR.
>>
>> Is this question or strategy completely stupid for some reason?
>>
>> Best regards, and thanks for all the good work on ANTLR,
>>
>> -Thomas Thomsen
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From thomas at t-t.dk  Thu Jan 19 02:22:02 2012
From: thomas at t-t.dk (Thomas Thomsen)
Date: Thu, 19 Jan 2012 11:22:02 +0100
Subject: [antlr-interest] Optional spaces question
In-Reply-To: <CAN45N11PABrYw6E7r3HBT6=s9Nd3Xjy6B7C-Yii2kMiR1=FNoA@mail.gmail.com>
References: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
	<CAN45N101W-XTOY3t=M7ti0dP2xV7itpGr63SktgejH_x5C9PBg@mail.gmail.com>
	<CAN45N11PABrYw6E7r3HBT6=s9Nd3Xjy6B7C-Yii2kMiR1=FNoA@mail.gmail.com>
Message-ID: <CAHQvCRev=Fqp0EWtiU7yCHfEk_-BezL=sJn4xFQiCX0S_1R0Xg@mail.gmail.com>

Thanks a lot Eric for your detailed answer. I have been looking through the
generated code in the debugger, but I easily get lost in the method calls
and iterations. The problem is that my grammar is already quite large and
complex by now. But I could of course isolate my current problem in a small
testing grammar. I think I'll do that: thanks for your advice.

I am already generating and using an AST tree, and I like your suggestion
about directing the whitespace tokens onto the AST tree. I would still
prefer to put the whitespace tokens on the hidden channel, so that they do
not clutter the parser grammar, but if they could somehow be "revived" in
the AST tree... This reminds me of the article "Preserving Whitespace
During Translation" (http://www.antlr.org/article/whitespace/index.html),
where the parser copies the hidden tokens into the tree nodes (actually
into special tree nodes of type CommonASTWithHiddenTokens). Since I would
also very much like to be able to translate between versions of my DSL
language (so that users can auto-translate if I change the syntax), this
might be the way to go?

Thanks also for our tips regarding stream rewriting and syntactic
predicates.

Best regards,

-Thomas



2012/1/18 Eric <researcher0x00 at gmail.com>

>
>
> On Wed, Jan 18, 2012 at 9:08 AM, Eric <researcher0x00 at gmail.com> wrote:
>
>>
>>
>> On Wed, Jan 18, 2012 at 8:17 AM, Thomas Thomsen <thomas at t-t.dk> wrote:
>>
>>> I am pretty new to ANTLR, doing a DSL language. I like ANTLR a lot, but I
>>> am struggling with a problem regarding optional whitespaces. My problem
>>> is
>>> that I need to distinguish between "f(x)" and "f  (x)" -- note the space
>>> between "f" and "(x)" in the latter (I am putting whitespace on the
>>> hidden
>>> channel, and I want to continue to do that). The former is a function
>>> call,
>>> the latter something different.
>>>
>>> I found a post on this list from 2007 ("Handling optional spaces") which
>>> addresses the exact same question. One suggestion was to have the lexer
>>> absorb the left parenthesis if there is no space in between:
>>>
>>> ID : ('a'..'z') + ;
>>> FUNCTION_CALL: ID '(' ;
>>>
>>> Then the lexer would return "f(" as a FUNCTION_CALL-token if there is not
>>> space in between. This works, but it is not too pretty and complicates
>>> things elsewhere in my code. The other suggestion was to check the hidden
>>> channel for whitespace-tokens by means of Java code (actually C# in my
>>> case). But since I am not yet too familiar with the inner workings of
>>> ANTLR, this scares me a bit.
>>>
>>> So I was thinking of a third strategy: Have a simple preprocessor look
>>> through the input file, and if a letter is directly followed by a left
>>> parenthesis, put some special character in between. So the preprocessor
>>> transforms "f(x)" into "f&(x)", where "&" is a (glue) character not used
>>> elsewhere in the grammar. And afterwards, it would be much easier to
>>> distinguish between "f&(x)" and "f  (x)" in ANTLR.
>>>
>>> Is this question or strategy completely stupid for some reason?
>>>
>>
>> Personally, I think avoiding the inner workings of ANTLR because it is
>> scary is a bad trait to pick up.
>>
>> When I started using ANTLR I spent lots of hours learning how it worked
>> by using the debugger. While I am not an expert at everything ANTLR, I
>> don't fear it.
>>
>> One thing I have learned is that while the lexer and parser are probably
>> capable of determining if an input is acceptable, that doesn't mean that
>> the lexer and parser should do all of the work of accepting the input.
>>
>> If you think of accepting an input as
>> 1. Use the lexer to convert the input to tokens.
>> 2. Use the parser to accept unambiguous input.
>> 3. Use tree manipulation to validate and accept valid input.
>> then you can let the parser pass input that may not be valid but that is
>> unambiguous onto the next step and sort out the meaning and validity there.
>>
>> For me, once the input is converted to a tree, it is easier to analyze
>> and manipulate because you can
>> 1. search backward and forward
>> 2. change the structure of the branches
>> 3. change the info in the nodes
>> 4. add and remove nodes and branches
>>
>> Hope this sheds some light on the problem.
>>
>> Eric
>>
>>
>
> Another option, though I don't use it, would be looking into using the
> stream rewrite API, you should be able to pick up the tokens from the lexer
> with the space not on the hidden channel, then when you see the pattern ID
> SPACE RIGHT_PAREN, you could rewrite it to SOMETHING_DIFFERENT, before
> passing onto the parser. If you don't want the parser to see a SPACE token,
> you could also use the stream rewrite to remove them.
>
> Additionally,
>
> Once the tree is available after the parser, one can create tables, cross
> references and other data structures to assist in the final goal, there is
> no requirement limiting one to using only the tree.
>
> One way to make a grammar easier to write is to make the rules less
> stringent. If you think of a input value as a dog, but don't know how to
> define a dog using grammar rules, try creating a rule for animals and then
> sort out of if the animal is a dog once you have the tree.
>
> Or in your case, I would avoid putting the space onto the hidden channel
> and pass the space all the way back to the tree and then sort it out there.
>
> A third option might be to try using Syntactic Predicates, but again I
> suspect that you will have to pass the SPACE to the parser, which requires
> parser rules deal with spaces everywhere.
>
> Eric
>
>
>
>>
>>
>>
>
>>
>>
>>
>>
>>
>>>
>>> Best regards, and thanks for all the good work on ANTLR,
>>>
>>> -Thomas Thomsen
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>

From kirby.bohling at gmail.com  Thu Jan 19 07:36:53 2012
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Thu, 19 Jan 2012 09:36:53 -0600
Subject: [antlr-interest] Optional spaces question
In-Reply-To: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
References: <CAHQvCRfPuPinVPKzOC7H2gwHmJsb2cvhVjC4BBxG142OhrWe-g@mail.gmail.com>
Message-ID: <CA+bn5rx+q3LiLraKV2EM9rhUvk_v02oi3=LcUVQ9eOa4eVRC+Q@mail.gmail.com>

On Wed, Jan 18, 2012 at 7:17 AM, Thomas Thomsen <thomas at t-t.dk> wrote:
> I am pretty new to ANTLR, doing a DSL language. I like ANTLR a lot, but I
> am struggling with a problem regarding optional whitespaces. My problem is
> that I need to distinguish between "f(x)" and "f ?(x)" -- note the space
> between "f" and "(x)" in the latter (I am putting whitespace on the hidden
> channel, and I want to continue to do that). The former is a function call,
> the latter something different.
>
> I found a post on this list from 2007 ("Handling optional spaces") which
> addresses the exact same question. One suggestion was to have the lexer
> absorb the left parenthesis if there is no space in between:

You might try looking at the C/C++ Pre-processor grammar, it uses
states and context to accomplish this.  In the C Pre-processor:
#define FOO (...)

defines a macro which contains parenthesis.

#define FOO(...)

defines a macro which takes parameters.

See here:
http://www.antlr.org/grammar/1166665121622/Cpp.tar






>
> ID : ('a'..'z') + ;
> FUNCTION_CALL: ID '(' ;
>
> Then the lexer would return "f(" as a FUNCTION_CALL-token if there is not
> space in between. This works, but it is not too pretty and complicates
> things elsewhere in my code. The other suggestion was to check the hidden
> channel for whitespace-tokens by means of Java code (actually C# in my
> case). But since I am not yet too familiar with the inner workings of
> ANTLR, this scares me a bit.
>
> So I was thinking of a third strategy: Have a simple preprocessor look
> through the input file, and if a letter is directly followed by a left
> parenthesis, put some special character in between. So the preprocessor
> transforms "f(x)" into "f&(x)", where "&" is a (glue) character not used
> elsewhere in the grammar. And afterwards, it would be much easier to
> distinguish between "f&(x)" and "f ?(x)" in ANTLR.
>
> Is this question or strategy completely stupid for some reason?
>
> Best regards, and thanks for all the good work on ANTLR,
>
> -Thomas Thomsen
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From boughtonp at gmail.com  Thu Jan 19 20:14:51 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Fri, 20 Jan 2012 04:14:51 +0000
Subject: [antlr-interest] No errors output by v4 daily build?
Message-ID: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>

I have downloaded the daily build ( antlr-4.0ea-complete.jar ) and
execute it on the command line, and it doesn't output anything.

If I give it a working grammar, it will generate the relevant files,
however if the grammar has any errors (or I use incorrect command line
args), it does nothing.

Running on Windows 7 Ultimate 64-bit and Java SE 1.6.0_21 64-bit

Any idea how I get it to tell me what is stopping it from generating the files?

From parrt at cs.usfca.edu  Thu Jan 19 21:47:29 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 19 Jan 2012 21:47:29 -0800
Subject: [antlr-interest] No errors output by v4 daily build?
In-Reply-To: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>
References: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>
Message-ID: <4DA71676-88D5-4A27-9B09-5628C6031CC5@cs.usfca.edu>

probably doesn't check cmd line args, but what does "grammar has any errors" mean exactly?
Ter
On Jan 19, 2012, at 8:14 PM, Peter Boughton wrote:

> I have downloaded the daily build ( antlr-4.0ea-complete.jar ) and
> execute it on the command line, and it doesn't output anything.
> 
> If I give it a working grammar, it will generate the relevant files,
> however if the grammar has any errors (or I use incorrect command line
> args), it does nothing.
> 
> Running on Windows 7 Ultimate 64-bit and Java SE 1.6.0_21 64-bit
> 
> Any idea how I get it to tell me what is stopping it from generating the files?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Fri Jan 20 03:08:07 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Fri, 20 Jan 2012 19:08:07 +0800
Subject: [antlr-interest] ANTLR Peak Memory Issue
In-Reply-To: <F7A8F4A85B0A084884A3448703D1F397F83E14BC@MAILIN2.global.cadence.com>
References: <F7A8F4A85B0A084884A3448703D1F397F83E14BC@MAILIN2.global.cadence.com>
Message-ID: <CAHMh4-bfyHZhAbRVnQ=-ZLxytpc3YFtVxxZyndOCiYnkLdKUzw@mail.gmail.com>

>From the discussions above, it looks like this is a known problem. Jim
Idle, who is the author of C Target, has made all the functions as function
pointers and placed it inside the struct. This seems to have been done for
code flexibility. Now this affects the memory usage of parsers, especially
in the 64 bit cases.

a) Removing $text is a must, which you have already completed.
b) Check whether the suggestion mentioned here will work out for you -
http://www.antlr.org/pipermail/antlr-interest/2010-March/037840.html
c) It has been already communicated in the list, that 4.0 C++ parser will
not be available atleast for the next 1 year.

Gokul.

On Thu, Jan 19, 2012 at 2:27 PM, Manu Chopra <mchopra at cadence.com> wrote:

> We are writing a parser using ANTLR, however find unusually high peak
> memory. Some key points:
> *       We use ANTLR C target. Our application is C++.
> *       There are no references to $text etc. We directly use token start
> and end pointers to form string ourselves, where required.
> *       Grammar is LL(2).
> *       We observe that the token structure itself is bulky 264 bytes or
> something on 64 bit platform.
> *       Further, looks like that ANTLR is tokenizing entire source
> upfront. This with large token size leads to almost peak memory even before
> real parsing begins.
> *       I went thru some of the earlier posts on the forum and see idea of
> partitioning the source file lexically and process in parts. Problem is
> that even sections of the source, which can be lexically identified, are
> large enough to give us memory problem.
>
> Can you suggest options we can explore to reduce peak the memory? Is there
> a token stream implementation which keeps only some constant number of
> tokens in memory as oppose to all?
>
> I also understand that active development work is going on with ANTLR 4.x:
> *       Can you share some information on its likely availability of C/C++
> target? Approximate time frame is good.
> *       If token size going to be smaller in 4.x?
> *       Will it still demand that all text be tokenized upfront?
>
> Thank you,
> -Manu.
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From chwchw at gmx.de  Fri Jan 20 03:39:09 2012
From: chwchw at gmx.de (Christian)
Date: Fri, 20 Jan 2012 12:39:09 +0100
Subject: [antlr-interest] duplicate int values in the token definition file
Message-ID: <4F19525D.5050109@gmx.de>

Hello community,

I have a combined C# grammar and get the following error, while
executing the parser on a C# source file:
    attrs: null
    mods: null
    resource/Console.cs line 138:6 no viable alternative at input 'get'

within the following rule:
    accessor_declarations
  : attrs=attributes? {System.err.println("attrs: "+$attrs.text);}
    mods=accessor_modifier? {System.err.println("mods: "+$mods.text);}
    ( 'get' {System.err.println("get");} accessor_body
set_accessor_declaration?
    | 'set' accessor_body get_accessor_declaration?
    )
  ;

If I define 'get' as explicit token using the tokens section, the same
error for another such a literal occurs. I have looked at the token
definition file. It contains among other things the following
    T__246=246
    'get'=246

I admit that I do not know for what the T__ are defined. Can somebody
explain and tell a reason for this behavior?

Regards,
Christian

From chwchw at gmx.de  Fri Jan 20 05:02:53 2012
From: chwchw at gmx.de (Christian)
Date: Fri, 20 Jan 2012 14:02:53 +0100
Subject: [antlr-interest] duplicate int values in the token definition
 file
In-Reply-To: <4F19525D.5050109@gmx.de>
References: <4F19525D.5050109@gmx.de>
Message-ID: <4F1965FD.6030403@gmx.de>

Ok, I inserted the following action code before the 'get'
    {System.err.println("next int: "+input.LA(1));}

and got:
    next int: 75

This type corresponds to the IDENTIFIER token. It is correct that all
non-keywords should be treated as IDENTIFIER by the lexer. However, I
thought that literals in a combined grammar are prioritized. Do I really
have to replace all literals in the parser rules with a corresponding
token and place it before the IDENTIFIER lexer rule? I hope not...

Regards,
Christian

Am 20.01.2012 12:39, schrieb Christian:
> Hello community,
>
> I have a combined C# grammar and get the following error, while
> executing the parser on a C# source file:
>     attrs: null
>     mods: null
>     resource/Console.cs line 138:6 no viable alternative at input 'get'
>
> within the following rule:
>     accessor_declarations
>   : attrs=attributes? {System.err.println("attrs: "+$attrs.text);}
>     mods=accessor_modifier? {System.err.println("mods: "+$mods.text);}
>     ( 'get' {System.err.println("get");} accessor_body
> set_accessor_declaration?
>     | 'set' accessor_body get_accessor_declaration?
>     )
>   ;
>
> If I define 'get' as explicit token using the tokens section, the same
> error for another such a literal occurs. I have looked at the token
> definition file. It contains among other things the following
>     T__246=246
>     'get'=246
>
> I admit that I do not know for what the T__ are defined. Can somebody
> explain and tell a reason for this behavior?
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From boughtonp at gmail.com  Fri Jan 20 08:54:21 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Fri, 20 Jan 2012 16:54:21 +0000
Subject: [antlr-interest] No errors output by v4 daily build?
In-Reply-To: <CABX-UnCQ5jvJRW8+pMbvc0g5yU1zUojpepgFiM36p7tdT++W2A@mail.gmail.com>
References: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>
	<4DA71676-88D5-4A27-9B09-5628C6031CC5@cs.usfca.edu>
	<CABX-UnCQ5jvJRW8+pMbvc0g5yU1zUojpepgFiM36p7tdT++W2A@mail.gmail.com>
Message-ID: <CABX-UnDi6HSd=UsWr7EJfPQAs9r3tVquUzrFY8gZ+VagcUzYhQ@mail.gmail.com>

Hi Terence,

> what does "grammar has any errors" mean exactly?

Well, simply that if there is anything wrong with the syntax/contents
of the grammar file.

For example, if I name the file "a.g" and the first line is "grammar
b", or if I delete a semi-colon from the end of a rule, so it's not
valid ANTLR syntax, or if I try to refer to a rule that doesn't exist
yet, or have an unescaped apostrophe, and so on.

The only way to tell if the grammar is ok is to check if the generated
files exist and if the modified date is up-to-date. If it doesn't
work, there's no easy way to know what the error is.

Making sense now?

Thanks,

Peter

From parrt at cs.usfca.edu  Fri Jan 20 09:14:16 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Jan 2012 09:14:16 -0800
Subject: [antlr-interest] No errors output by v4 daily build?
In-Reply-To: <CABX-UnDi6HSd=UsWr7EJfPQAs9r3tVquUzrFY8gZ+VagcUzYhQ@mail.gmail.com>
References: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>
	<4DA71676-88D5-4A27-9B09-5628C6031CC5@cs.usfca.edu>
	<CABX-UnCQ5jvJRW8+pMbvc0g5yU1zUojpepgFiM36p7tdT++W2A@mail.gmail.com>
	<CABX-UnDi6HSd=UsWr7EJfPQAs9r3tVquUzrFY8gZ+VagcUzYhQ@mail.gmail.com>
Message-ID: <4DC96E4C-9154-4A6F-9612-0CDB6B98306A@cs.usfca.edu>

boy,That is very weird because I specifically added syntax checks for the missing ';' and so on. let me try one.

ok, yeah, I don't have the check in there that the filename is the same as the grammar name. here is one check for the missing ';'

~/antlr/code/antlr4/main/tool/playground $ cat XX.g
grammar E;

a : A 
~/antlr/code/antlr4/main/tool/playground $ a4 XX.g
error(15): XX.g:4:0: mismatched input '<EOF>' expecting SEMI while matching a rule

 and another

~/antlr/code/antlr4/main/tool/playground $ cat XX.g
grammar E;

a : A 
b : B ;
~/antlr/code/antlr4/main/tool/playground $ a4 XX.g
error(15): XX.g:4:0: unterminated rule (missing ';') detected at 'b :' while looking for rule element

 perhaps you should send me an example.

Ter

On Jan 20, 2012, at 8:54 AM, Peter Boughton wrote:

> Hi Terence,
> 
>> what does "grammar has any errors" mean exactly?
> 
> Well, simply that if there is anything wrong with the syntax/contents
> of the grammar file.
> 
> For example, if I name the file "a.g" and the first line is "grammar
> b", or if I delete a semi-colon from the end of a rule, so it's not
> valid ANTLR syntax, or if I try to refer to a rule that doesn't exist
> yet, or have an unescaped apostrophe, and so on.
> 
> The only way to tell if the grammar is ok is to check if the generated
> files exist and if the modified date is up-to-date. If it doesn't
> work, there's no easy way to know what the error is.
> 
> Making sense now?
> 
> Thanks,
> 
> Peter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From boughtonp at gmail.com  Fri Jan 20 09:37:02 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Fri, 20 Jan 2012 17:37:02 +0000
Subject: [antlr-interest] No errors output by v4 daily build?
In-Reply-To: <4DC96E4C-9154-4A6F-9612-0CDB6B98306A@cs.usfca.edu>
References: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>
	<4DA71676-88D5-4A27-9B09-5628C6031CC5@cs.usfca.edu>
	<CABX-UnCQ5jvJRW8+pMbvc0g5yU1zUojpepgFiM36p7tdT++W2A@mail.gmail.com>
	<CABX-UnDi6HSd=UsWr7EJfPQAs9r3tVquUzrFY8gZ+VagcUzYhQ@mail.gmail.com>
	<4DC96E4C-9154-4A6F-9612-0CDB6B98306A@cs.usfca.edu>
Message-ID: <CABX-UnCDrgQaO9QaNGTE1Y-ukA2O+4MBwKSZb5eocN=m0BK66A@mail.gmail.com>

Ah, I've figured out the problem now - it's not an ANTLR one. Sorry
for the confusion.

I was doing:
  antlr-4.0ea-complete.jar XX.g

I switched to:
  java -jar antlr-4.0ea-complete.jar XX.g

And I'm now getting the expected error messages.


(Running the jar directly was configured to execute via javaw, rather
than java, which is why I was getting no output.)

From parrt at cs.usfca.edu  Fri Jan 20 09:44:27 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Jan 2012 09:44:27 -0800
Subject: [antlr-interest] No errors output by v4 daily build?
In-Reply-To: <CABX-UnCDrgQaO9QaNGTE1Y-ukA2O+4MBwKSZb5eocN=m0BK66A@mail.gmail.com>
References: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>
	<4DA71676-88D5-4A27-9B09-5628C6031CC5@cs.usfca.edu>
	<CABX-UnCQ5jvJRW8+pMbvc0g5yU1zUojpepgFiM36p7tdT++W2A@mail.gmail.com>
	<CABX-UnDi6HSd=UsWr7EJfPQAs9r3tVquUzrFY8gZ+VagcUzYhQ@mail.gmail.com>
	<4DC96E4C-9154-4A6F-9612-0CDB6B98306A@cs.usfca.edu>
	<CABX-UnCDrgQaO9QaNGTE1Y-ukA2O+4MBwKSZb5eocN=m0BK66A@mail.gmail.com>
Message-ID: <DB602180-0648-41AD-9975-A45784ADA2DB@cs.usfca.edu>

doesn't manifest say org.antlr.v4.Tool?
T
On Jan 20, 2012, at 9:37 AM, Peter Boughton wrote:

> Ah, I've figured out the problem now - it's not an ANTLR one. Sorry
> for the confusion.
> 
> I was doing:
>  antlr-4.0ea-complete.jar XX.g
> 
> I switched to:
>  java -jar antlr-4.0ea-complete.jar XX.g
> 
> And I'm now getting the expected error messages.
> 
> 
> (Running the jar directly was configured to execute via javaw, rather
> than java, which is why I was getting no output.)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From boughtonp at gmail.com  Fri Jan 20 09:55:32 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Fri, 20 Jan 2012 17:55:32 +0000
Subject: [antlr-interest] No errors output by v4 daily build?
In-Reply-To: <DB602180-0648-41AD-9975-A45784ADA2DB@cs.usfca.edu>
References: <CABX-UnC0uHgsxt0Q9hv-dC2-1OqMTZZX8b9xHd0id4XD9_+dsA@mail.gmail.com>
	<4DA71676-88D5-4A27-9B09-5628C6031CC5@cs.usfca.edu>
	<CABX-UnCQ5jvJRW8+pMbvc0g5yU1zUojpepgFiM36p7tdT++W2A@mail.gmail.com>
	<CABX-UnDi6HSd=UsWr7EJfPQAs9r3tVquUzrFY8gZ+VagcUzYhQ@mail.gmail.com>
	<4DC96E4C-9154-4A6F-9612-0CDB6B98306A@cs.usfca.edu>
	<CABX-UnCDrgQaO9QaNGTE1Y-ukA2O+4MBwKSZb5eocN=m0BK66A@mail.gmail.com>
	<DB602180-0648-41AD-9975-A45784ADA2DB@cs.usfca.edu>
Message-ID: <CABX-UnC=wEgsyxvYe3R+cCkm=Q-6kX-atJo9MfjOVzHn5cRPew@mail.gmail.com>

Yep:

Manifest-Version: 1.0
Ant-Version: Apache Ant 1.8.1
Created-By: 1.6.0_11-b03 (Sun Microsystems Inc.)
Version: 4.0ea
Main-Class: org.antlr.v4.Tool

I think it's purely that javaw suppresses console output, and since
ANTLR has no GUI it doesn't need javaw, and I should've been using
java anyway.

From jimi at temporal-wave.com  Fri Jan 20 10:41:35 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 20 Jan 2012 10:41:35 -0800
Subject: [antlr-interest] duplicate int values in the token definition
	file
In-Reply-To: <4F1965FD.6030403@gmx.de>
References: <4F19525D.5050109@gmx.de> <4F1965FD.6030403@gmx.de>
Message-ID: <27ed03505786de2431272df99ce5197a@mail.gmail.com>

Don't use literals in the parser grammar - this gets you in to a lot of
trouble when you are starting out. It is the work of maybe an hour or so
to move to 'real' tokens - bite the bullet now.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian
> Sent: Friday, January 20, 2012 5:03 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] duplicate int values in the token
> definition file
>
> Ok, I inserted the following action code before the 'get'
>     {System.err.println("next int: "+input.LA(1));}
>
> and got:
>     next int: 75
>
> This type corresponds to the IDENTIFIER token. It is correct that all
> non-keywords should be treated as IDENTIFIER by the lexer. However, I
> thought that literals in a combined grammar are prioritized. Do I
> really have to replace all literals in the parser rules with a
> corresponding token and place it before the IDENTIFIER lexer rule? I
> hope not...
>
> Regards,
> Christian
>
> Am 20.01.2012 12:39, schrieb Christian:
> > Hello community,
> >
> > I have a combined C# grammar and get the following error, while
> > executing the parser on a C# source file:
> >     attrs: null
> >     mods: null
> >     resource/Console.cs line 138:6 no viable alternative at input
> 'get'
> >
> > within the following rule:
> >     accessor_declarations
> >   : attrs=attributes? {System.err.println("attrs: "+$attrs.text);}
> >     mods=accessor_modifier? {System.err.println("mods:
> "+$mods.text);}
> >     ( 'get' {System.err.println("get");} accessor_body
> > set_accessor_declaration?
> >     | 'set' accessor_body get_accessor_declaration?
> >     )
> >   ;
> >
> > If I define 'get' as explicit token using the tokens section, the
> same
> > error for another such a literal occurs. I have looked at the token
> > definition file. It contains among other things the following
> >     T__246=246
> >     'get'=246
> >
> > I admit that I do not know for what the T__ are defined. Can somebody
> > explain and tell a reason for this behavior?
> >
> > Regards,
> > Christian
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From cgswtsu78 at gmail.com  Fri Jan 20 10:42:07 2012
From: cgswtsu78 at gmail.com (colin gray)
Date: Fri, 20 Jan 2012 10:42:07 -0800
Subject: [antlr-interest] ANTLR Parsing Negation
Message-ID: <CAMB7o1a9dL=CSO29Pcnb0pugGfjJTq_2x8EfZd1o_3dtvVSPVQ@mail.gmail.com>

Hello,

I'm using ANTLR 3.4 and I have the below rule in my .g file.  I want to
match text that has *select* or *SELECT* but excludes *select count(*)* and
*SELECT COUNT(*)*.  So if the text was select count(*) from tablename where
x=2 it would not create a new SelectQueryInfo.  I want to create a
different object if count(*) exists in the text.  Any ideas?

    selectQuery returns [Info q]
        : ('select' | 'SELECT') columns
          ('from' | 'FROM') table
          (('where' | 'WHERE') filter_clause)?
          { $q = new SelectQueryInfo($columns.a, $table.e,
$filter_clause.e); }


Thanks,

CG

From cgswtsu78 at gmail.com  Fri Jan 20 11:17:43 2012
From: cgswtsu78 at gmail.com (colin gray)
Date: Fri, 20 Jan 2012 11:17:43 -0800
Subject: [antlr-interest] ANTLR Parsing Negation
In-Reply-To: <CAMB7o1a9dL=CSO29Pcnb0pugGfjJTq_2x8EfZd1o_3dtvVSPVQ@mail.gmail.com>
References: <CAMB7o1a9dL=CSO29Pcnb0pugGfjJTq_2x8EfZd1o_3dtvVSPVQ@mail.gmail.com>
Message-ID: <CAMB7o1YeuAxng1O-2Wh-AUULO8n0ayVSzxhNoFYQLc9gXzK+Zg@mail.gmail.com>

Actually, the below is more representative of what I want to accomplish.

I'm using ANTLR 3.4 and I have the below rules in my .g file. I want to
create a different object other than SelectQueryInfo if $columns.a equals
`count(*)`, else create an instance of SelectQueryInfo. Any ideas?

    selectQuery returns [Info q]
        : ('select' | 'SELECT') columns
          ('from' | 'FROM') table
          (('where' | 'WHERE') filter_clause)?
          { $q = new SelectQueryInfo($columns.a, $table.e,
$filter_clause.e); }

     columns returns [ArrayList<String> a]
    : { $a = new ArrayList<String>(); }
      ('*' { $a.add("*"); }
      |
      ('count(*)' | 'COUNT(*)') { $a.add("count(*)"); }
      | c1 = COL { $a.add($c1.text); }
        (
        ',' c2 = COL { $a.add($c2.text); }
        )*
      )
    ;

On Fri, Jan 20, 2012 at 10:42 AM, colin gray <cgswtsu78 at gmail.com> wrote:

> Hello,
>
> I'm using ANTLR 3.4 and I have the below rule in my .g file.  I want to
> match text that has *select* or *SELECT* but excludes *select count(*)* and
> *SELECT COUNT(*)*.  So if the text was select count(*) from tablename where
> x=2 it would not create a new SelectQueryInfo.  I want to create a
> different object if count(*) exists in the text.  Any ideas?
>
>     selectQuery returns [Info q]
>         : ('select' | 'SELECT') columns
>           ('from' | 'FROM') table
>           (('where' | 'WHERE') filter_clause)?
>           { $q = new SelectQueryInfo($columns.a, $table.e,
> $filter_clause.e); }
>
>
> Thanks,
>
> CG
>



-- 
Colin Gray

From boughtonp at gmail.com  Fri Jan 20 12:32:54 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Fri, 20 Jan 2012 20:32:54 +0000
Subject: [antlr-interest] Difference between negative literal and negative
	fragment ?
Message-ID: <CABX-UnCepnqX20DxjCJ9Nk4xp0yovRAnHQY5PGyjHiufivTu3A@mail.gmail.com>

See this example lexer grammar:

	fragment START_TAG    : '<';
	fragment WORDCHAR     : 'a'..'z' | 'A'..'Z' | '0'..'9' | '_';
	
	TAG_START : START_TAG WORDCHAR+ { pushMode(IN_TAG); };
	
	ANY_GENERAL : ~START_TAG+;
	// ANY_GENERAL : ~'<'+;

Using the first ANY_GENERAL rule, it consumes everything.

Swapping for the second ANY_GENERAL rule, it works as intended.

I don't understand why they are not doing the same thing?

Are there any other situations where using a literal over a fragment
will have different behaviour?

From pururav at gmail.com  Fri Jan 20 13:43:12 2012
From: pururav at gmail.com (Pururav Thoutireddy)
Date: Fri, 20 Jan 2012 13:43:12 -0800
Subject: [antlr-interest] Difference between negative literal and
 negative fragment ?
In-Reply-To: <CABX-UnCepnqX20DxjCJ9Nk4xp0yovRAnHQY5PGyjHiufivTu3A@mail.gmail.com>
References: <CABX-UnCepnqX20DxjCJ9Nk4xp0yovRAnHQY5PGyjHiufivTu3A@mail.gmail.com>
Message-ID: <CAK=LAJr7nFdoOMgV6LZmPEs09rWWWia0N0jcFhn-vDcEWEA3ew@mail.gmail.com>

Hi,

Is there a way of generating c/c++ code corresponding to the formula
written in the given grammar I.e code generation from sat tree.

Thanks
Puru
On Jan 20, 2012 12:33 PM, "Peter Boughton" <boughtonp at gmail.com> wrote:

> See this example lexer grammar:
>
>        fragment START_TAG    : '<';
>        fragment WORDCHAR     : 'a'..'z' | 'A'..'Z' | '0'..'9' | '_';
>
>        TAG_START : START_TAG WORDCHAR+ { pushMode(IN_TAG); };
>
>        ANY_GENERAL : ~START_TAG+;
>        // ANY_GENERAL : ~'<'+;
>
> Using the first ANY_GENERAL rule, it consumes everything.
>
> Swapping for the second ANY_GENERAL rule, it works as intended.
>
> I don't understand why they are not doing the same thing?
>
> Are there any other situations where using a literal over a fragment
> will have different behaviour?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From boughtonp at gmail.com  Fri Jan 20 14:46:16 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Fri, 20 Jan 2012 22:46:16 +0000
Subject: [antlr-interest] Can't define rules with same name in different
	modes.
Message-ID: <CABX-UnDBr=T5_Ecg0DrF_KzvJOQ2G4VWCLVN6XNNx314ZeJURw@mail.gmail.com>

Using Antlr v4 to create a modal lexer, and been banging my head
against a wall wondering what was wrong for a while, before working
out the problem was due to two rules having the same name.

I'm still not sure if this is by design or a bug - if the former it
should probably be throwing an error when parsing the grammar.

See this grammar snippet:

	mode IN_ATTRIBUTES;
	TAG_CLOSE  : ENDCLOSE_TAG { popMode();  };
	TAG_END    : END_TAG  { popMode(); pushMode(IN_BODY); };
	...
	HASHEXPR : HASH   { pushMode(IN_HASHEXPR); };

	mode IN_BODY;
	BODY_END : CLOSE_TAG WORDCHAR+ END_TAG { popMode(); };
	HASHEXPR : HASH { pushMode(IN_HASHEXPR); };

The lexer kept throwing "token recognition error at: '#'" errors when
I was expecting it to match the second HASHEXPR rule.

After renaming the rules to ATTR_HASHEXPR and BODY_HASHEXPR
respectively it started behaving.

So if having two same named rules (in different modes) is not allowed,
I would expect an error to be thrown, (but if it is allowed then
there's a bug).


A follow-up question:
This HASHEXPR rule is going to crop up all over the place, in at least
half a dozen different modes, but it's not valid everywhere. Is there
a better way to define it, to be less repetitive and more readable?

From asicaddress at gmail.com  Fri Jan 20 18:22:26 2012
From: asicaddress at gmail.com (A Z)
Date: Sat, 21 Jan 2012 08:22:26 +0600
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
Message-ID: <CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>

With this (very quickly written) code I see about 7MB/sec for the lexer
using clang++ and using static linking. Memory use is about 30:1 but many
features have been removed, like getText and setText.


On Wed, Jan 18, 2012 at 5:55 PM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> Is there any chance of a quicker C++ Target availability?
> If the target activity, can be made into sub-tasks, i am ready to take up
> some sub-tasks.
>
> Thanks,
> Gokul.
>
> On Fri, Jan 13, 2012 at 2:59 AM, A Z <asicaddress at gmail.com> wrote:
>
> > Hi Jim,
> >
> >  I don't think there's anything wrong with the C target. My impression of
> > the code was that it was modified from the Java target and uses function
> > pointers to be easily modifiable. I don't have any performance issues
> other
> > than memory consumption and I think this is due to my atypical use case.
> > Overall, the tool works great and I appreciate all the work that went
> into
> > it.
> >
> >  Sam's timeline of 1 year is too long to wait for the new C++ target so
> > I've already begun modifying the 3.4 lexer for my own purposes. I
> honestly
> > wasn't expecting any more changes to ANTLR3.
> >
> >
> >
> > On Fri, Jan 13, 2012 at 12:07 AM, Jim Idle <jimi at temporal-wave.com>
> wrote:
> >
> > > I do plan on doing that in fact. However I would like to respond to the
> > > criticisms here as follows:
> > >
> > > 1) I wrote the C runtime in under two weeks because I needed it for a
> > > project and at that time ANTLR v3 was not released (beta). Hence by
> > > waiting until v4 runtime is stable then we should get some cleaner
> > > runtimes.
> > > 2) So, I did not really know how anyone else would want to use it and
> so
> > I
> > > made absolutely everything dynamic. Since that time there have been
> lots
> > > of memory and performance tweaks, but I am sure there are more I can
> do.
> > > 3) I basically copied the Java model as is with the idea being that it
> > > would be easier to follow changes that were made to the Java runtime in
> > > the C runtime.
> > > 4) There are performance enhancements you can turn on such as adding
> > > defines for ANTLR3_INLINE_INPUT_8BIT or ANTLR3_INLINE_INPUT_16BIT and
> > > defining SKIP_FOLLOW_SETS to avoid stacking rule descriptors only used
> by
> > > error reporting.
> > > 5) All my tests and most everyone else finds the C v3 runtime to be
> > faster
> > > than the C++ runtime, so I can only conclude that there is something
> > > different about one or two grammar files.
> > > 6) I did implement reuse other than for trees and that helps most of
> the
> > > use cases where the initial memory allocation takes time and so you
> don't
> > > want to tear it down and re-allocate it.
> > > 7) It is a lot easier to start with someone else's code than it is to
> > > start with vi and a blank screen. Where's the love?
> > > 8) ANTLR is naturally more heavyweight than some other tools, but it is
> > > usually easier to use it.
> > > 9) Why not wait for v4 where some of these things are addressed as a
> > > natural consequence of the design.
> > >
> > >
> > > A minimum token needs the type and a pointer to the text, plus either a
> > > pointer to the end of the text or the length. If you use a length then
> > > with encodings like UTF8, you will start to need to traverse the text
> to
> > > extract nnn characters. There are always tradeoffs. Pointers are 64
> bits
> > > not 32 bits on a 64 bit compiler. You can compile in 32 bit mode if you
> > > don't need 64 bit stuff.
> > >
> > > Jim
> > >
> > >
> > > > -----Original Message-----
> > > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > > bounces at antlr.org] On Behalf Of A Z
> > > > Sent: Wednesday, January 11, 2012 5:38 PM
> > > > To: Ruslan Zasukhin
> > > > Cc: antlr-interest at antlr.org
> > > > Subject: Re: [antlr-interest] Antlr v4 - C++ target
> > > >
> > > > The realistic minimum I see for commontoken in the existing 3.4 code
> is
> > > > 32 bytes on a 64-bit architecture. This would involve modifications
> to
> > > > the code generator to no longer use the function pointers(for
> > > > setStart/setStopIndex/setType) and using a smaller data type for the
> > > > channel, factory and type members. There is still an additional
> > > > 16B/token used by the vector data structure holding the tokens.
> > > >
> > > >
> > > >
> > > > On Wed, Jan 11, 2012 at 5:09 PM, Ruslan Zasukhin <
> > > > ruslan_zasukhin at valentina-db.com> wrote:
> > > >
> > > > > On 1/11/12 11:12 AM, "Loring Craymer" <lgcraymer at yahoo.com> wrote:
> > > > >
> > > > > > If Jim did not implement the vtable indirection (that could be
> > > > > > easily
> > > > > changed,
> > > > > > if so), then there is a little more opportunity for optimization,
> > > > > > but
> > > > > still
> > > > > > the problem is that state information takes up much more memory
> > > > than
> > > > > does the
> > > > > > text in tokens.
> > > > >
> > > > > Right,
> > > > >
> > > > > Well, lets look on antrl3commontoken.h
> > > > >
> > > > > API:
> > > > >        19   pointers to func
> > > > >                        32 bit os    19 * 4  = 76 bytes
> > > > >
> > > > > And about
> > > > >        11 * 4 bytes  of useful info
> > > > >
> > > > >
> > > > > So there is chance that in c++ style
> > > > > OR with single pointer on ala-VT  token will become
> > > > >
> > > > >    from 118 bytes to 48 bytes
> > > > >
> > > > >
> > > > >
> > > > > --
> > > > > Best regards,
> > > > >
> > > > > Ruslan Zasukhin
> > > > > VP Engineering and New Technology
> > > > > Paradigma Software, Inc
> > > > >
> > > > > Valentina - Joining Worlds of Information
> > > > http://www.paradigmasoft.com
> > > > >
> > > > > [I feel the need: the need for speed]
> > > > >
> > > > >
> > > > >
> > > > >
> > > > >
> > > > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > > > Unsubscribe:
> > > > > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> > > > address
> > > > >
> > > >
> > > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-
> > > > email-address
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe:
> > > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: antlrcpp.tar.gz
Type: application/x-gzip
Size: 168128 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20120121/a8638792/attachment-0001.gz 

From parrt at cs.usfca.edu  Fri Jan 20 18:34:47 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 20 Jan 2012 18:34:47 -0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
Message-ID: <D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>

the code says antlr3XXX. is it v4 or v3?
Ter
On Jan 20, 2012, at 6:22 PM, A Z wrote:

> With this (very quickly written) code I see about 7MB/sec for the lexer
> using clang++ and using static linking. Memory use is about 30:1 but many
> features have been removed, like getText and setText.
> 


From boughtonp at gmail.com  Fri Jan 20 19:02:44 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Sat, 21 Jan 2012 03:02:44 +0000
Subject: [antlr-interest] lexical filters in v4?
Message-ID: <CABX-UnCs0aNugPfqQEGsvrK-P8vFLaepckOM9qujFtGQGrZApA@mail.gmail.com>

It doesn't seem like v4 supports lexical filters?

Using the example here: http://www.antlr.org/wiki/display/ANTLR3/Lexical+filters

The generated code is:

	System.out.println("found var
"+(_localctx.name!=null?_localctx.name.getText():null));

Which caused the Java error:

	"name cannot be resolved or is not a field"


I need to be able to match a closing tag against an opening tag (which
may have assorted nested tags), which means I need some way to extract
a tagname during the opening rule, and check against it in the closing
rule.

Any recommendations for how to handle that?

From ronburk at gmail.com  Fri Jan 20 19:18:07 2012
From: ronburk at gmail.com (Ron Burk)
Date: Fri, 20 Jan 2012 19:18:07 -0800
Subject: [antlr-interest] [stringtemplate-interest] anybody care to
 comment on bitbucket.org?
In-Reply-To: <FD51CE9D-8A9A-4D1D-A70D-F2165C5B2AF4@gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>
	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>
	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>
	<CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
	<024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
	<5DA97719-244B-4B7E-B619-2DAD1062AA6E@gmail.com>
	<CA+_G_arvE3x6Qi40TNN2WBw25C7r1n7tzaSyxF6Ny8h0mcQbLA@mail.gmail.com>
	<FD51CE9D-8A9A-4D1D-A70D-F2165C5B2AF4@gmail.com>
Message-ID: <CAEVkYxckGzkmh2z_vW0n6iWHOFQ9YKQXkimPDoPVmCeBdbmSFw@mail.gmail.com>

+1 for Mercurial on Windows.

From gokul007 at gmail.com  Fri Jan 20 22:06:15 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sat, 21 Jan 2012 14:06:15 +0800
Subject: [antlr-interest] A Memory bug in C Grammar
Message-ID: <CAHMh4-aCOK+5nHaOt8DFNdooMd4Vwz4j8gnXP4kbzQdXnCvoMg@mail.gmail.com>

Hi,
   I was looking at the source code. In the file antlr3collections.c, on
line no. 1783

there is a statement like this
trie->root = (pANTLR3_INT_TRIE_NODE) ANTLR3_CALLOC(1,
sizeof(ANTLR3_INT_TRIE));

I think, it should be like this.
trie->root = (pANTLR3_INT_TRIE_NODE) ANTLR3_CALLOC(1, sizeof(
ANTLR3_INT_TRIE_NODE ));

I think, this would have very less savings.

Thanks,
Gokul.

From gokul007 at gmail.com  Sat Jan 21 00:35:15 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sat, 21 Jan 2012 16:35:15 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
Message-ID: <CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>

it is v3. Some of the function pointers have been converted to member
functions. It basically has removed the flexibility of overriding some of
the token related functions. But the performance gain is that the space
occupied by those function pointers are saved. So this patch can be
considered by those who use C++, don't want to override any of the token
specific functionality ( which will definitely be useful to many ).

Gokul.

On Sat, Jan 21, 2012 at 10:34 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> the code says antlr3XXX. is it v4 or v3?
> Ter
> On Jan 20, 2012, at 6:22 PM, A Z wrote:
>
> > With this (very quickly written) code I see about 7MB/sec for the lexer
> > using clang++ and using static linking. Memory use is about 30:1 but many
> > features have been removed, like getText and setText.
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From boughtonp at gmail.com  Sat Jan 21 09:43:55 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Sat, 21 Jan 2012 17:43:55 +0000
Subject: [antlr-interest] v4 feature request: array of mode names in lexer
	object
Message-ID: <CABX-UnB4g5UWj1nx_aBOhQVQvAOav=_4Qr9mwy4PLV2tFAcbUQ@mail.gmail.com>

When debugging, it would be useful to have actual mode names
displayed, rather than just numbers.

Similar to how you can do this with tokens:

	lexer.tokenNames[token.getType()]

I'd like to be able to do:

	lexer.modeNames[lexer.mode]


( At the moment I've got my own manually created array, but it'd be
much nicer to have something that didn't keep needing updates when
modes are added or re-ordered. )


Thanks. :)

From parrt at cs.usfca.edu  Sat Jan 21 09:58:44 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 09:58:44 -0800
Subject: [antlr-interest] v4 feature request: array of mode names in
	lexer object
In-Reply-To: <CABX-UnB4g5UWj1nx_aBOhQVQvAOav=_4Qr9mwy4PLV2tFAcbUQ@mail.gmail.com>
References: <CABX-UnB4g5UWj1nx_aBOhQVQvAOav=_4Qr9mwy4PLV2tFAcbUQ@mail.gmail.com>
Message-ID: <E3304FD7-AD7B-4B59-AA2E-A76B0A97CA62@cs.usfca.edu>

added to list
On Jan 21, 2012, at 9:43 AM, Peter Boughton wrote:

> When debugging, it would be useful to have actual mode names
> displayed, rather than just numbers.
> 
> Similar to how you can do this with tokens:
> 
> 	lexer.tokenNames[token.getType()]
> 
> I'd like to be able to do:
> 
> 	lexer.modeNames[lexer.mode]
> 
> 
> ( At the moment I've got my own manually created array, but it'd be
> much nicer to have something that didn't keep needing updates when
> modes are added or re-ordered. )
> 
> 
> Thanks. :)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Jan 21 09:59:18 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 09:59:18 -0800
Subject: [antlr-interest] lexical filters in v4?
In-Reply-To: <CABX-UnCs0aNugPfqQEGsvrK-P8vFLaepckOM9qujFtGQGrZApA@mail.gmail.com>
References: <CABX-UnCs0aNugPfqQEGsvrK-P8vFLaepckOM9qujFtGQGrZApA@mail.gmail.com>
Message-ID: <FF6B2348-D861-48EC-AF3F-0B984A7C7BCC@cs.usfca.edu>

nope. i think .* and modes are sufficient now.
Ter
On Jan 20, 2012, at 7:02 PM, Peter Boughton wrote:

> It doesn't seem like v4 supports lexical filters?
> 
> Using the example here: http://www.antlr.org/wiki/display/ANTLR3/Lexical+filters
> 
> The generated code is:
> 
> 	System.out.println("found var
> "+(_localctx.name!=null?_localctx.name.getText():null));
> 
> Which caused the Java error:
> 
> 	"name cannot be resolved or is not a field"
> 
> 
> I need to be able to match a closing tag against an opening tag (which
> may have assorted nested tags), which means I need some way to extract
> a tagname during the opening rule, and check against it in the closing
> rule.
> 
> Any recommendations for how to handle that?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Jan 21 09:59:59 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 09:59:59 -0800
Subject: [antlr-interest] Can't define rules with same name in different
	modes.
In-Reply-To: <CABX-UnDBr=T5_Ecg0DrF_KzvJOQ2G4VWCLVN6XNNx314ZeJURw@mail.gmail.com>
References: <CABX-UnDBr=T5_Ecg0DrF_KzvJOQ2G4VWCLVN6XNNx314ZeJURw@mail.gmail.com>
Message-ID: <60C9E240-9D7F-40BC-967F-A29B46850EBB@cs.usfca.edu>

adding to think more about.
T
On Jan 20, 2012, at 2:46 PM, Peter Boughton wrote:

> Using Antlr v4 to create a modal lexer, and been banging my head
> against a wall wondering what was wrong for a while, before working
> out the problem was due to two rules having the same name.
> 
> I'm still not sure if this is by design or a bug - if the former it
> should probably be throwing an error when parsing the grammar.
> 
> See this grammar snippet:
> 
> 	mode IN_ATTRIBUTES;
> 	TAG_CLOSE  : ENDCLOSE_TAG { popMode();  };
> 	TAG_END    : END_TAG  { popMode(); pushMode(IN_BODY); };
> 	...
> 	HASHEXPR : HASH   { pushMode(IN_HASHEXPR); };
> 
> 	mode IN_BODY;
> 	BODY_END : CLOSE_TAG WORDCHAR+ END_TAG { popMode(); };
> 	HASHEXPR : HASH { pushMode(IN_HASHEXPR); };
> 
> The lexer kept throwing "token recognition error at: '#'" errors when
> I was expecting it to match the second HASHEXPR rule.
> 
> After renaming the rules to ATTR_HASHEXPR and BODY_HASHEXPR
> respectively it started behaving.
> 
> So if having two same named rules (in different modes) is not allowed,
> I would expect an error to be thrown, (but if it is allowed then
> there's a bug).
> 
> 
> A follow-up question:
> This HASHEXPR rule is going to crop up all over the place, in at least
> half a dozen different modes, but it's not valid everywhere. Is there
> a better way to define it, to be less repetitive and more readable?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Sat Jan 21 10:03:45 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sun, 22 Jan 2012 02:03:45 +0800
Subject: [antlr-interest] Request for a feature (if possible in V4)
Message-ID: <CAHMh4-biJZq=sj2jhn25vYDmyJJkGufKY9m0k1Hzcen+ny9sGA@mail.gmail.com>

Hi All,
        I don't know, whether this is possible. But i just thought of
putting forward my thought. Is it possible to write a parser-mode, where in
it would generate code that is auto left factored. There are several
advantages.
a) When the parser becomes like in my case (around 1000 rules), then parser
generation takes more time, if i increase the value of k.
b) As i increase the value of k, the heap size requirement increases almost
exponentially
c) Runtime performance will definitely increase
d) Parser code size will definitely come down.
     If this is not possible, can someone explain me on the difficulties
encountered in creating such a parser utility?


Thanks,
Gokul.

From boughtonp at gmail.com  Sat Jan 21 11:26:50 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Sat, 21 Jan 2012 19:26:50 +0000
Subject: [antlr-interest] v4 bug: &x and &~x are including match in token
Message-ID: <CABX-UnBUChwjgKHzUZm-9zmG0DARZGOtShQFw_Znt9F_2=fFOQ@mail.gmail.com>

My understanding of the & operator is intended to act as a lookahead -
ensuring the following content matches, but not including it in the
token text.
( as descibed here:
http://www.antlr.org/wiki/display/~admin/ANTLR+v4+lexers#ANTLRv4lexers-Requirements
)

However, this is not the behaviour I'm seeing - I'm getting the
lookahead match text included as part of the token (which prevents it
from being included in the next token, and thus causes problems).

OUT_ATTR_ENABLE_OUTPUT
	: 'output' WS* EQUALS WS* ATTR_TRUE
	| 'output' WS+ &~'='
	| 'output' &'>'
	{ OutputEnabled = true; }
	;

Sample input:
	<cffunction output> #Special#  </cffunction>
	<cffunction output > #Special#  </cffunction>
	<cffunction output anotherattr > #Special#  </cffunction>

Captured token:
	OUT_ATTR_ENABLE_OUTPUT = [output>]
	OUT_ATTR_ENABLE_OUTPUT = [output >]
	OUT_ATTR_ENABLE_OUTPUT = [output a]


I have used &~x in other situations and it seemed to work, although
maybe they were just ones where it didn't matter when the lookahead
match was included.

From parrt at cs.usfca.edu  Sat Jan 21 11:27:37 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 11:27:37 -0800
Subject: [antlr-interest] v4 bug: &x and &~x are including match in token
In-Reply-To: <CABX-UnBUChwjgKHzUZm-9zmG0DARZGOtShQFw_Znt9F_2=fFOQ@mail.gmail.com>
References: <CABX-UnBUChwjgKHzUZm-9zmG0DARZGOtShQFw_Znt9F_2=fFOQ@mail.gmail.com>
Message-ID: <C8C294AC-9587-4A5A-9CC3-288CB32A42F6@cs.usfca.edu>

hi. not yet impl.
T
On Jan 21, 2012, at 11:26 AM, Peter Boughton wrote:

> My understanding of the & operator is intended to act as a lookahead -
> ensuring the following content matches, but not including it in the
> token text.
> ( as descibed here:
> http://www.antlr.org/wiki/display/~admin/ANTLR+v4+lexers#ANTLRv4lexers-Requirements
> )
> 
> However, this is not the behaviour I'm seeing - I'm getting the
> lookahead match text included as part of the token (which prevents it
> from being included in the next token, and thus causes problems).
> 
> OUT_ATTR_ENABLE_OUTPUT
> 	: 'output' WS* EQUALS WS* ATTR_TRUE
> 	| 'output' WS+ &~'='
> 	| 'output' &'>'
> 	{ OutputEnabled = true; }
> 	;
> 
> Sample input:
> 	<cffunction output> #Special#  </cffunction>
> 	<cffunction output > #Special#  </cffunction>
> 	<cffunction output anotherattr > #Special#  </cffunction>
> 
> Captured token:
> 	OUT_ATTR_ENABLE_OUTPUT = [output>]
> 	OUT_ATTR_ENABLE_OUTPUT = [output >]
> 	OUT_ATTR_ENABLE_OUTPUT = [output a]
> 
> 
> I have used &~x in other situations and it seemed to work, although
> maybe they were just ones where it didn't matter when the lookahead
> match was included.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From boughtonp at gmail.com  Sat Jan 21 14:35:19 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Sat, 21 Jan 2012 22:35:19 +0000
Subject: [antlr-interest] Unicode conversion in
 getCharValueFromGrammarCharLiteral is applying to all six-char-long
 literals.
Message-ID: <CABX-UnD7UpvVD4GWcvqPjw=tCcPxwN8=W+08-vejFSfjWjr1DA@mail.gmail.com>

Unicode conversion in getCharValueFromGrammarCharLiteral is applying
to all six-char-long literals (eight including the quotes), instead of
limiting itself to those that begin with \u

Which means it breaks when I have a rule containing:
	~'elseif'
or:
	( 'elseif' | 'switch' )
or:
	~( 'elseif' | 'switch' )

(It works for just 'elseif' on its own.)


Here's the error it produces:

 Exception in thread "main" java.lang.NumberFormatException: For input
string: "seif"
 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
 	at java.lang.Integer.parseInt(Integer.java:449)
 	at org.antlr.v4.misc.CharSupport.getCharValueFromGrammarCharLiteral(CharSupport.java:120)
 	at org.antlr.v4.automata.LexerATNFactory.set(LexerATNFactory.java:123)
 	at org.antlr.v4.parse.ATNBuilder.blockSet(ATNBuilder.java:1129)
 	at org.antlr.v4.parse.ATNBuilder.element(ATNBuilder.java:721)
 	at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:473)
 	at org.antlr.v4.parse.ATNBuilder.block(ATNBuilder.java:288)
 	at org.antlr.v4.parse.ATNBuilder.subrule(ATNBuilder.java:1025)
 	at org.antlr.v4.parse.ATNBuilder.element(ATNBuilder.java:657)
 	at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:473)
 	at org.antlr.v4.parse.ATNBuilder.block(ATNBuilder.java:288)
 	at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:123)
 	at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:71)
 	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:303)
 	at org.antlr.v4.Tool.process(Tool.java:284)
 	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:248)
 	at org.antlr.v4.Tool.main(Tool.java:146)
 Java Result: 1


I think I can work around this by using '\elseif' since \e just gets
treated as e, right?

From parrt at cs.usfca.edu  Sat Jan 21 15:42:59 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 15:42:59 -0800
Subject: [antlr-interest] Another update to Honey Badger
Message-ID: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>

Hi, I have made an update to Honey Badger to allow special lexer commands to do the usual things without resorting to actions in the target language. This renders lexers almost always language neutral. Without actions in the parser, because of the parse trees, we should be very language neutral for honey badger grammars.

In the lexer, you now have the choice of these commands:

  skip
  more
  popMode
  mode(x)
  pushMode(x)
  type(x)
  channel(x)

You can combine them with a comma and you can only have these commands at the end of an outer alternative:

WS : (' '|'\n')+ -> skip ;
WS : (' '|'\n')+ -> channel(HIDDEN) ;

CURLY : '{' -> more, pushMode(BLOCKS) ;

You can check it out here on the updated example page:

http://www.antlr.org/wiki/display/ANTLR4/Examples
http://www.antlr.org/depot/antlr4/main/CHANGES.txt

Download here:

http://antlr.org/download/antlr-4.0ea-complete.jar

I will update the examples soon.

Note that the old-style actions still work; these new commands simply translate to the raw actions. Obviously, if you need to do some logic before sending the token type, you will need to use an action in the target language.

Enjoy,
Ter

From parrt at cs.usfca.edu  Sat Jan 21 15:44:05 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 15:44:05 -0800
Subject: [antlr-interest] v4 feature request: array of mode names in
	lexer object
In-Reply-To: <CABX-UnB4g5UWj1nx_aBOhQVQvAOav=_4Qr9mwy4PLV2tFAcbUQ@mail.gmail.com>
References: <CABX-UnB4g5UWj1nx_aBOhQVQvAOav=_4Qr9mwy4PLV2tFAcbUQ@mail.gmail.com>
Message-ID: <BBE80B66-D845-4D78-BF39-563240AE5F67@cs.usfca.edu>

This is now in the latest early access honey badger.  pull it down.
Ter
On Jan 21, 2012, at 9:43 AM, Peter Boughton wrote:

> When debugging, it would be useful to have actual mode names
> displayed, rather than just numbers.
> 
> Similar to how you can do this with tokens:
> 
> 	lexer.tokenNames[token.getType()]
> 
> I'd like to be able to do:
> 
> 	lexer.modeNames[lexer.mode]
> 
> 
> ( At the moment I've got my own manually created array, but it'd be
> much nicer to have something that didn't keep needing updates when
> modes are added or re-ordered. )
> 
> 
> Thanks. :)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kferrio at gmail.com  Sat Jan 21 17:45:13 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Sat, 21 Jan 2012 18:45:13 -0700
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
Message-ID: <CAAfeETqF-f91ubkoo6wOkj_VJELsZBtwTndhEM8t147GKBVUaA@mail.gmail.com>

Ter,

Thank you!  This may seem like a small thing, but it really saves time when
reusing grammars.  By making common actions transparent, any special
actions will stand out.

Kyle
On Jan 21, 2012 4:43 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

> Hi, I have made an update to Honey Badger to allow special lexer commands
> to do the usual things without resorting to actions in the target language.
> This renders lexers almost always language neutral. Without actions in the
> parser, because of the parse trees, we should be very language neutral for
> honey badger grammars.
>
> In the lexer, you now have the choice of these commands:
>
>  skip
>  more
>  popMode
>  mode(x)
>  pushMode(x)
>  type(x)
>  channel(x)
>
> You can combine them with a comma and you can only have these commands at
> the end of an outer alternative:
>
> WS : (' '|'\n')+ -> skip ;
> WS : (' '|'\n')+ -> channel(HIDDEN) ;
>
> CURLY : '{' -> more, pushMode(BLOCKS) ;
>
> You can check it out here on the updated example page:
>
> http://www.antlr.org/wiki/display/ANTLR4/Examples
> http://www.antlr.org/depot/antlr4/main/CHANGES.txt
>
> Download here:
>
> http://antlr.org/download/antlr-4.0ea-complete.jar
>
> I will update the examples soon.
>
> Note that the old-style actions still work; these new commands simply
> translate to the raw actions. Obviously, if you need to do some logic
> before sending the token type, you will need to use an action in the target
> language.
>
> Enjoy,
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From boughtonp at gmail.com  Sat Jan 21 17:47:04 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Sun, 22 Jan 2012 01:47:04 +0000
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
Message-ID: <CABX-UnBtLbs6A9_b7Kb7j=UBOTxOfiiiBQ+Ks1dLctk=q6gwjQ@mail.gmail.com>

These native commands definitely help readability.

Unfortunately, it seems popMode isn't working - trying to use it
results in an NPE:

 Exception in thread "main" java.lang.NullPointerException
 	at org.antlr.v4.automata.LexerATNFactory.lexerCommand(LexerATNFactory.java:143)
 	at org.antlr.v4.parse.ATNBuilder.lexerCommand(ATNBuilder.java:762)
 	at org.antlr.v4.parse.ATNBuilder.lexerCommands(ATNBuilder.java:665)
 	at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:540)
 	at org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:292)
 	at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:127)
 	at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:83)
 	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:303)
 	at org.antlr.v4.Tool.process(Tool.java:284)
 	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:248)
 	at org.antlr.v4.Tool.main(Tool.java:146)
 Java Result: 1

The old style still works, and both pushMode(MODENAME) and skip are working.

The error above is the same you get with an invalid command, for
example by adding "->purple;" to a rule.

Possible cause in org/antlr/v4/tool/templates/codegen/Java/Java.stg -
line 441 has LexerPopMode instead of LexerPopModeCommand ?

From parrt at cs.usfca.edu  Sat Jan 21 21:22:01 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 21:22:01 -0800
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <CABX-UnBtLbs6A9_b7Kb7j=UBOTxOfiiiBQ+Ks1dLctk=q6gwjQ@mail.gmail.com>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
	<CABX-UnBtLbs6A9_b7Kb7j=UBOTxOfiiiBQ+Ks1dLctk=q6gwjQ@mail.gmail.com>
Message-ID: <102169C9-35D1-44B6-8B95-5C301CE73737@cs.usfca.edu>

oops. fixed. pull again.
Ter
On Jan 21, 2012, at 5:47 PM, Peter Boughton wrote:

> These native commands definitely help readability.
> 
> Unfortunately, it seems popMode isn't working - trying to use it
> results in an NPE:
> 
> Exception in thread "main" java.lang.NullPointerException
> 	at org.antlr.v4.automata.LexerATNFactory.lexerCommand(LexerATNFactory.java:143)
> 	at org.antlr.v4.parse.ATNBuilder.lexerCommand(ATNBuilder.java:762)
> 	at org.antlr.v4.parse.ATNBuilder.lexerCommands(ATNBuilder.java:665)
> 	at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:540)
> 	at org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:292)
> 	at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:127)
> 	at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:83)
> 	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:303)
> 	at org.antlr.v4.Tool.process(Tool.java:284)
> 	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:248)
> 	at org.antlr.v4.Tool.main(Tool.java:146)
> Java Result: 1
> 
> The old style still works, and both pushMode(MODENAME) and skip are working.
> 
> The error above is the same you get with an invalid command, for
> example by adding "->purple;" to a rule.
> 
> Possible cause in org/antlr/v4/tool/templates/codegen/Java/Java.stg -
> line 441 has LexerPopMode instead of LexerPopModeCommand ?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Jan 21 21:22:42 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 21 Jan 2012 21:22:42 -0800
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <CAAfeETqF-f91ubkoo6wOkj_VJELsZBtwTndhEM8t147GKBVUaA@mail.gmail.com>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
	<CAAfeETqF-f91ubkoo6wOkj_VJELsZBtwTndhEM8t147GKBVUaA@mail.gmail.com>
Message-ID: <E59616B3-3711-4946-94F9-8345553CFD1F@cs.usfca.edu>

Yeah, i think it's very reasonable to expect retargetable grammars now that we can rely less on actions in grammars and hopefully none in lexer.

Ter
On Jan 21, 2012, at 5:45 PM, Kyle Ferrio wrote:

> Ter,
> 
> Thank you!  This may seem like a small thing, but it really saves time when
> reusing grammars.  By making common actions transparent, any special
> actions will stand out.
> 
> Kyle
> On Jan 21, 2012 4:43 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
> 
>> Hi, I have made an update to Honey Badger to allow special lexer commands
>> to do the usual things without resorting to actions in the target language.
>> This renders lexers almost always language neutral. Without actions in the
>> parser, because of the parse trees, we should be very language neutral for
>> honey badger grammars.
>> 
>> In the lexer, you now have the choice of these commands:
>> 
>> skip
>> more
>> popMode
>> mode(x)
>> pushMode(x)
>> type(x)
>> channel(x)
>> 
>> You can combine them with a comma and you can only have these commands at
>> the end of an outer alternative:
>> 
>> WS : (' '|'\n')+ -> skip ;
>> WS : (' '|'\n')+ -> channel(HIDDEN) ;
>> 
>> CURLY : '{' -> more, pushMode(BLOCKS) ;
>> 
>> You can check it out here on the updated example page:
>> 
>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>> http://www.antlr.org/depot/antlr4/main/CHANGES.txt
>> 
>> Download here:
>> 
>> http://antlr.org/download/antlr-4.0ea-complete.jar
>> 
>> I will update the examples soon.
>> 
>> Note that the old-style actions still work; these new commands simply
>> translate to the raw actions. Obviously, if you need to do some logic
>> before sending the token type, you will need to use an action in the target
>> language.
>> 
>> Enjoy,
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From oliver.zeigermann at gmail.com  Sun Jan 22 01:44:41 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 22 Jan 2012 10:44:41 +0100
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
Message-ID: <CABJr57BA-VsVxpK0jkNfnMZDjTYuAc5y9kBxJovfQ=daagRVRg@mail.gmail.com>

Tried it and it works great. I never quite groked when to use
channel(HIDDEN) and when skip, though. Can anyone clarify for me?

Thanks in advance!

- Oliver

2012/1/22 Terence Parr <parrt at cs.usfca.edu>:
> Hi, I have made an update to Honey Badger to allow special lexer commands to do the usual things without resorting to actions in the target language. This renders lexers almost always language neutral. Without actions in the parser, because of the parse trees, we should be very language neutral for honey badger grammars.
>
> In the lexer, you now have the choice of these commands:
>
> ?skip
> ?more
> ?popMode
> ?mode(x)
> ?pushMode(x)
> ?type(x)
> ?channel(x)
>
> You can combine them with a comma and you can only have these commands at the end of an outer alternative:
>
> WS : (' '|'\n')+ -> skip ;
> WS : (' '|'\n')+ -> channel(HIDDEN) ;
>
> CURLY : '{' -> more, pushMode(BLOCKS) ;
>
> You can check it out here on the updated example page:
>
> http://www.antlr.org/wiki/display/ANTLR4/Examples
> http://www.antlr.org/depot/antlr4/main/CHANGES.txt
>
> Download here:
>
> http://antlr.org/download/antlr-4.0ea-complete.jar
>
> I will update the examples soon.
>
> Note that the old-style actions still work; these new commands simply translate to the raw actions. Obviously, if you need to do some logic before sending the token type, you will need to use an action in the target language.
>
> Enjoy,
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From chwchw at gmx.de  Sun Jan 22 01:55:41 2012
From: chwchw at gmx.de (Christian)
Date: Sun, 22 Jan 2012 10:55:41 +0100
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <CABJr57BA-VsVxpK0jkNfnMZDjTYuAc5y9kBxJovfQ=daagRVRg@mail.gmail.com>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
	<CABJr57BA-VsVxpK0jkNfnMZDjTYuAc5y9kBxJovfQ=daagRVRg@mail.gmail.com>
Message-ID: <4F1BDD1D.2000809@gmx.de>

skip() drops the token entirely from the token stream so that it cannot
be proccessed after that.
channel(HIDDEN) moves it from the token channel 0 (default channel) to
the channel 99 (HIDDEN is a constant for that channel number). It can be
proccessed afterwards by accessing the hidden channel.

Am 22.01.2012 10:44, schrieb Oliver Zeigermann:
> Tried it and it works great. I never quite groked when to use
> channel(HIDDEN) and when skip, though. Can anyone clarify for me?
>
> Thanks in advance!
>
> - Oliver
>
> 2012/1/22 Terence Parr <parrt at cs.usfca.edu>:
>> Hi, I have made an update to Honey Badger to allow special lexer commands to do the usual things without resorting to actions in the target language. This renders lexers almost always language neutral. Without actions in the parser, because of the parse trees, we should be very language neutral for honey badger grammars.
>>
>> In the lexer, you now have the choice of these commands:
>>
>>  skip
>>  more
>>  popMode
>>  mode(x)
>>  pushMode(x)
>>  type(x)
>>  channel(x)
>>
>> You can combine them with a comma and you can only have these commands at the end of an outer alternative:
>>
>> WS : (' '|'\n')+ -> skip ;
>> WS : (' '|'\n')+ -> channel(HIDDEN) ;
>>
>> CURLY : '{' -> more, pushMode(BLOCKS) ;
>>
>> You can check it out here on the updated example page:
>>
>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>> http://www.antlr.org/depot/antlr4/main/CHANGES.txt
>>
>> Download here:
>>
>> http://antlr.org/download/antlr-4.0ea-complete.jar
>>
>> I will update the examples soon.
>>
>> Note that the old-style actions still work; these new commands simply translate to the raw actions. Obviously, if you need to do some logic before sending the token type, you will need to use an action in the target language.
>>
>> Enjoy,
>> Ter
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From oliver.zeigermann at gmail.com  Sun Jan 22 02:01:00 2012
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Sun, 22 Jan 2012 11:01:00 +0100
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <4F1BDD1D.2000809@gmx.de>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
	<CABJr57BA-VsVxpK0jkNfnMZDjTYuAc5y9kBxJovfQ=daagRVRg@mail.gmail.com>
	<4F1BDD1D.2000809@gmx.de>
Message-ID: <CABJr57CkbmKGssoxHiXrJGfVQO-kLggCZAjT4qOH+wAi3teMPg@mail.gmail.com>

Ah, thanks for explaining. So when I might need that token later (e.g.
to spit it out again), I will use channel(HIDDEN), right? Still
wondering, when would I ever used skip rather than channel(HIDDEN) in
a grammar, as I may never know if someone reusing my grammar might
need that token later?

2012/1/22 Christian <chwchw at gmx.de>:
> skip() drops the token entirely from the token stream so that it cannot
> be proccessed after that.
> channel(HIDDEN) moves it from the token channel 0 (default channel) to
> the channel 99 (HIDDEN is a constant for that channel number). It can be
> proccessed afterwards by accessing the hidden channel.
>
> Am 22.01.2012 10:44, schrieb Oliver Zeigermann:
>> Tried it and it works great. I never quite groked when to use
>> channel(HIDDEN) and when skip, though. Can anyone clarify for me?
>>
>> Thanks in advance!
>>
>> - Oliver
>>
>> 2012/1/22 Terence Parr <parrt at cs.usfca.edu>:
>>> Hi, I have made an update to Honey Badger to allow special lexer commands to do the usual things without resorting to actions in the target language. This renders lexers almost always language neutral. Without actions in the parser, because of the parse trees, we should be very language neutral for honey badger grammars.
>>>
>>> In the lexer, you now have the choice of these commands:
>>>
>>> ?skip
>>> ?more
>>> ?popMode
>>> ?mode(x)
>>> ?pushMode(x)
>>> ?type(x)
>>> ?channel(x)
>>>
>>> You can combine them with a comma and you can only have these commands at the end of an outer alternative:
>>>
>>> WS : (' '|'\n')+ -> skip ;
>>> WS : (' '|'\n')+ -> channel(HIDDEN) ;
>>>
>>> CURLY : '{' -> more, pushMode(BLOCKS) ;
>>>
>>> You can check it out here on the updated example page:
>>>
>>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>>> http://www.antlr.org/depot/antlr4/main/CHANGES.txt
>>>
>>> Download here:
>>>
>>> http://antlr.org/download/antlr-4.0ea-complete.jar
>>>
>>> I will update the examples soon.
>>>
>>> Note that the old-style actions still work; these new commands simply translate to the raw actions. Obviously, if you need to do some logic before sending the token type, you will need to use an action in the target language.
>>>
>>> Enjoy,
>>> Ter
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From chwchw at gmx.de  Sun Jan 22 02:05:37 2012
From: chwchw at gmx.de (Christian)
Date: Sun, 22 Jan 2012 11:05:37 +0100
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <CABJr57CkbmKGssoxHiXrJGfVQO-kLggCZAjT4qOH+wAi3teMPg@mail.gmail.com>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
	<CABJr57BA-VsVxpK0jkNfnMZDjTYuAc5y9kBxJovfQ=daagRVRg@mail.gmail.com>
	<4F1BDD1D.2000809@gmx.de>
	<CABJr57CkbmKGssoxHiXrJGfVQO-kLggCZAjT4qOH+wAi3teMPg@mail.gmail.com>
Message-ID: <4F1BDF71.8050403@gmx.de>

Right. For this reason, it is recommended to use multiple channels
instead of skip(). I think skip() is however useful for memory
optimization cases.

Am 22.01.2012 11:01, schrieb Oliver Zeigermann:
> Ah, thanks for explaining. So when I might need that token later (e.g.
> to spit it out again), I will use channel(HIDDEN), right? Still
> wondering, when would I ever used skip rather than channel(HIDDEN) in
> a grammar, as I may never know if someone reusing my grammar might
> need that token later?
>
> 2012/1/22 Christian <chwchw at gmx.de>:
>> skip() drops the token entirely from the token stream so that it cannot
>> be proccessed after that.
>> channel(HIDDEN) moves it from the token channel 0 (default channel) to
>> the channel 99 (HIDDEN is a constant for that channel number). It can be
>> proccessed afterwards by accessing the hidden channel.
>>
>> Am 22.01.2012 10:44, schrieb Oliver Zeigermann:
>>> Tried it and it works great. I never quite groked when to use
>>> channel(HIDDEN) and when skip, though. Can anyone clarify for me?
>>>
>>> Thanks in advance!
>>>
>>> - Oliver
>>>
>>> 2012/1/22 Terence Parr <parrt at cs.usfca.edu>:
>>>> Hi, I have made an update to Honey Badger to allow special lexer commands to do the usual things without resorting to actions in the target language. This renders lexers almost always language neutral. Without actions in the parser, because of the parse trees, we should be very language neutral for honey badger grammars.
>>>>
>>>> In the lexer, you now have the choice of these commands:
>>>>
>>>>  skip
>>>>  more
>>>>  popMode
>>>>  mode(x)
>>>>  pushMode(x)
>>>>  type(x)
>>>>  channel(x)
>>>>
>>>> You can combine them with a comma and you can only have these commands at the end of an outer alternative:
>>>>
>>>> WS : (' '|'\n')+ -> skip ;
>>>> WS : (' '|'\n')+ -> channel(HIDDEN) ;
>>>>
>>>> CURLY : '{' -> more, pushMode(BLOCKS) ;
>>>>
>>>> You can check it out here on the updated example page:
>>>>
>>>> http://www.antlr.org/wiki/display/ANTLR4/Examples
>>>> http://www.antlr.org/depot/antlr4/main/CHANGES.txt
>>>>
>>>> Download here:
>>>>
>>>> http://antlr.org/download/antlr-4.0ea-complete.jar
>>>>
>>>> I will update the examples soon.
>>>>
>>>> Note that the old-style actions still work; these new commands simply translate to the raw actions. Obviously, if you need to do some logic before sending the token type, you will need to use an action in the target language.
>>>>
>>>> Enjoy,
>>>> Ter
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From chwchw at gmx.de  Sun Jan 22 02:08:36 2012
From: chwchw at gmx.de (Christian)
Date: Sun, 22 Jan 2012 11:08:36 +0100
Subject: [antlr-interest] zero or more vs. optional one or more
Message-ID: <4F1BE024.2080507@gmx.de>

Hello everybody,

I wonder why the following lexer rules do not show equivalent behavior:

fragment Verbatim_string_literal
  : '@' DOUBLE_QUOTE Verbatim_string_literal_characters? DOUBLE_QUOTE
  ;
fragment Verbatim_string_literal_characters
  : Verbatim_string_literal_character+
  ;

versus

fragment Verbatim_string_literal
  : '@' DOUBLE_QUOTE Verbatim_string_literal_character* DOUBLE_QUOTE
  ;

The first one does not parse @"Hello World!", the second however does.

Regards,
Christian

P.S.

fragment Verbatim_string_literal_character
  : c=Single_verbatim_string_literal_character
  | c=Quote_escape_sequence
  ;
fragment Single_verbatim_string_literal_character
  : ~DOUBLE_QUOTE //<any Character Except ">
  ;
fragment Quote_escape_sequence
  : DOUBLE_QUOTE DOUBLE_QUOTE
  ;


From finis at in.tum.de  Sun Jan 22 02:34:08 2012
From: finis at in.tum.de (Jan Finis)
Date: Sun, 22 Jan 2012 11:34:08 +0100
Subject: [antlr-interest] Honey Badger Theory
Message-ID: <4F1BE620.1020103@in.tum.de>

Hi Terence,

I am into parser generator theory, so I am wondering which concepts you 
use to let Honey Badger "eat everything" (even left recursion) and never 
backtrack. Could you tell me which concepts you use? I know I could just 
check the code but I think it will be 1000 times faster if you explain 
it to me and I think it will also be interesting for many others here.

And does never backtrack mean that the parser will always stay linear 
like a packrat parser?

Best regards,
Jan Finis

From parrt at cs.usfca.edu  Sun Jan 22 10:03:57 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 22 Jan 2012 10:03:57 -0800
Subject: [antlr-interest] Unicode conversion in
	getCharValueFromGrammarCharLiteral is applying to all
	six-char-long literals.
In-Reply-To: <CABX-UnD7UpvVD4GWcvqPjw=tCcPxwN8=W+08-vejFSfjWjr1DA@mail.gmail.com>
References: <CABX-UnD7UpvVD4GWcvqPjw=tCcPxwN8=W+08-vejFSfjWjr1DA@mail.gmail.com>
Message-ID: <3048919F-C85E-4697-BE8F-C940B5E944FC@cs.usfca.edu>

fixed. goes out with next push
Ter
On Jan 21, 2012, at 2:35 PM, Peter Boughton wrote:

> Unicode conversion in getCharValueFromGrammarCharLiteral is applying
> to all six-char-long literals (eight including the quotes), instead of
> limiting itself to those that begin with \u
> 
> Which means it breaks when I have a rule containing:
> 	~'elseif'
> or:
> 	( 'elseif' | 'switch' )
> or:
> 	~( 'elseif' | 'switch' )
> 
> (It works for just 'elseif' on its own.)
> 
> 
> Here's the error it produces:
> 
> Exception in thread "main" java.lang.NumberFormatException: For input
> string: "seif"
> 	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
> 	at java.lang.Integer.parseInt(Integer.java:449)
> 	at org.antlr.v4.misc.CharSupport.getCharValueFromGrammarCharLiteral(CharSupport.java:120)
> 	at org.antlr.v4.automata.LexerATNFactory.set(LexerATNFactory.java:123)
> 	at org.antlr.v4.parse.ATNBuilder.blockSet(ATNBuilder.java:1129)
> 	at org.antlr.v4.parse.ATNBuilder.element(ATNBuilder.java:721)
> 	at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:473)
> 	at org.antlr.v4.parse.ATNBuilder.block(ATNBuilder.java:288)
> 	at org.antlr.v4.parse.ATNBuilder.subrule(ATNBuilder.java:1025)
> 	at org.antlr.v4.parse.ATNBuilder.element(ATNBuilder.java:657)
> 	at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:473)
> 	at org.antlr.v4.parse.ATNBuilder.block(ATNBuilder.java:288)
> 	at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:123)
> 	at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:71)
> 	at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:303)
> 	at org.antlr.v4.Tool.process(Tool.java:284)
> 	at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:248)
> 	at org.antlr.v4.Tool.main(Tool.java:146)
> Java Result: 1
> 
> 
> I think I can work around this by using '\elseif' since \e just gets
> treated as e, right?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sun Jan 22 11:58:09 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 22 Jan 2012 11:58:09 -0800
Subject: [antlr-interest] Honey Badger Theory
In-Reply-To: <4F1BE620.1020103@in.tum.de>
References: <4F1BE620.1020103@in.tum.de>
Message-ID: <6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>

Hi Jan, honey badger's parsing strategy is and adaptive or incremental version of LL(*). The reason that v3 ANTLR needed to backtrack was that LL(*) grammar analysis is undecidable statically.  When it failed at static analysis, it failed over to backtracking at runtime. However, at runtime, I have an actual input stream that I can work with. This renders the algorithm deterministic and so I don't need to backtrack. In a nutshell, like GLR I pursue all possible paths from the decision point in a breadth first manner, almost as if I had forked multiple threads to pursue the possibilities. Because we pursue all possibilities at once, there is no backtracking. We move one token at a time seeing where it takes us in all possible alternatives. When only a single alternative is left, we know to predict that Alternative. We rewind the input and then take the appropriate path.

LL(*) is O(n) for a given decision because in the worst case it might look scan until the end of the input. If we must make a decision at every token, that is an O(n^2) parsing strategy for n tokens.  That actually hides another complexity that generally does not appear. We are doing what amounts to a more complicated NFA to DFA conversion, which we know is exponential in complexity (in theory but not in practice). That means that a particular decision could hit a landmine at some point. I have seen one example of this. I have some interesting ideas for altering the algorithm so this does not occur.  I'll get to it.

To learn more about the static analysis, you can go here:

http://www.antlr.org/papers/LL-star-PLDI11.pdf

I hope to do a paper on this adaptive LL(*) at some point.

"It's pretty bad ass. It just doesn't give a shit." --honey badger

Ter
On Jan 22, 2012, at 2:34 AM, Jan Finis wrote:

> Hi Terence,
> 
> I am into parser generator theory, so I am wondering which concepts you 
> use to let Honey Badger "eat everything" (even left recursion) and never 
> backtrack. Could you tell me which concepts you use? I know I could just 
> check the code but I think it will be 1000 times faster if you explain 
> it to me and I think it will also be interesting for many others here.
> 
> And does never backtrack mean that the parser will always stay linear 
> like a packrat parser?
> 
> Best regards,
> Jan Finis
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sun Jan 22 12:04:24 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 22 Jan 2012 12:04:24 -0800
Subject: [antlr-interest] Added ranges,
	escapes to [a-z] notation in lexer to honey badger
Message-ID: <2BBDEC8D-98FA-420D-BE7E-8B1B42C7AE82@cs.usfca.edu>

Hi. grab another update. augmented [?] in lexer:
a-z is the inclusive range
    escape characters with special meaning: trnbf\'" such as \t
    \uXXXX Unicode character with text digits
    \- is the - character
    \] is the ] character

    Missing final range value gives just first char.
    Inverted ranges give nothing
    Bad escape sequence gives nothing
http://www.antlr.org/wiki/display/ANTLR4/Examples
http://www.antlr.org/depot/antlr4/main/CHANGES.txt

Download here:

http://antlr.org/download/antlr-4.0ea-complete.jar

Ter

From gokul007 at gmail.com  Sun Jan 22 12:24:23 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 23 Jan 2012 04:24:23 +0800
Subject: [antlr-interest] Honey Badger Theory
In-Reply-To: <6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
References: <4F1BE620.1020103@in.tum.de>
	<6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
Message-ID: <CAHMh4-Zj0tNgWZcOZh1FLtNHN48sqsjepipSqSqBTFro-EvpRg@mail.gmail.com>

Hi Terrence,
               Thanks for the explanation. I could understand part of what
you said. So i will wait for the paper.
               My question is how does the parsing strategy in V3 and V4
compare against each other, if it has no backtracking in V3. More
specifically, do you expect a LL(k) parser do more work in V4 for the sake
of being adaptive?


Thanks,
Gokul.

On Mon, Jan 23, 2012 at 3:58 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Jan, honey badger's parsing strategy is and adaptive or incremental
> version of LL(*). The reason that v3 ANTLR needed to backtrack was that
> LL(*) grammar analysis is undecidable statically.  When it failed at static
> analysis, it failed over to backtracking at runtime. However, at runtime, I
> have an actual input stream that I can work with. This renders the
> algorithm deterministic and so I don't need to backtrack. In a nutshell,
> like GLR I pursue all possible paths from the decision point in a breadth
> first manner, almost as if I had forked multiple threads to pursue the
> possibilities. Because we pursue all possibilities at once, there is no
> backtracking. We move one token at a time seeing where it takes us in all
> possible alternatives. When only a single alternative is left, we know to
> predict that Alternative. We rewind the input and then take the appropriate
> path.
>
> LL(*) is O(n) for a given decision because in the worst case it might look
> scan until the end of the input. If we must make a decision at every token,
> that is an O(n^2) parsing strategy for n tokens.  That actually hides
> another complexity that generally does not appear. We are doing what
> amounts to a more complicated NFA to DFA conversion, which we know is
> exponential in complexity (in theory but not in practice). That means that
> a particular decision could hit a landmine at some point. I have seen one
> example of this. I have some interesting ideas for altering the algorithm
> so this does not occur.  I'll get to it.
>
> To learn more about the static analysis, you can go here:
>
> http://www.antlr.org/papers/LL-star-PLDI11.pdf
>
> I hope to do a paper on this adaptive LL(*) at some point.
>
> "It's pretty bad ass. It just doesn't give a shit." --honey badger
>
> Ter
> On Jan 22, 2012, at 2:34 AM, Jan Finis wrote:
>
> > Hi Terence,
> >
> > I am into parser generator theory, so I am wondering which concepts you
> > use to let Honey Badger "eat everything" (even left recursion) and never
> > backtrack. Could you tell me which concepts you use? I know I could just
> > check the code but I think it will be 1000 times faster if you explain
> > it to me and I think it will also be interesting for many others here.
> >
> > And does never backtrack mean that the parser will always stay linear
> > like a packrat parser?
> >
> > Best regards,
> > Jan Finis
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From antlr at mirality.co.nz  Sun Jan 22 12:38:50 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 23 Jan 2012 09:38:50 +1300
Subject: [antlr-interest] Added ranges,
 escapes to [a-z] notation  in lexer to honey badger
In-Reply-To: <2BBDEC8D-98FA-420D-BE7E-8B1B42C7AE82@cs.usfca.edu>
References: <2BBDEC8D-98FA-420D-BE7E-8B1B42C7AE82@cs.usfca.edu>
Message-ID: <20120122203900.6F37F3418469@www.antlr.org>

At 09:04 23/01/2012, Terence Parr wrote:
 >Hi. grab another update. augmented [
] in lexer:
 >a-z is the inclusive range
[...]
 >    Inverted ranges give nothing

Why's that?  I would have thought that this:
   ~[a-c]
ought to be the same as this:
   ~('a'|'b'|'c')
...?

Granted in most cases you can use . instead of 
inverted ranges, but it could be useful to be more specific.


From parrt at cs.usfca.edu  Sun Jan 22 14:51:32 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 22 Jan 2012 14:51:32 -0800
Subject: [antlr-interest] Added ranges,
	escapes to [a-z] notation  in lexer to honey badger
In-Reply-To: <20120122203900.6F37F3418469@www.antlr.org>
References: <2BBDEC8D-98FA-420D-BE7E-8B1B42C7AE82@cs.usfca.edu>
	<20120122203900.6F37F3418469@www.antlr.org>
Message-ID: <B1D41C2F-D938-429E-8B2C-1275C2127A52@cs.usfca.edu>


On Jan 22, 2012, at 12:38 PM, Gavin Lambert wrote:

> At 09:04 23/01/2012, Terence Parr wrote:
>> Hi. grab another update. augmented [?] in lexer:
>> a-z is the inclusive range
> [...]
>>   Inverted ranges give nothing
> 
> Why's that?  I would have thought that this:
>   ~[a-c]
> ought to be the same as this:
>   ~('a'|'b'|'c')
> ??

 whoops. Sorry. I meant that [z-a] gives nothing.

~[a-c] should give the right thing :)

Ter

From kierans777 at gmail.com  Sun Jan 22 14:52:26 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Mon, 23 Jan 2012 09:52:26 +1100
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>	<CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
	<024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
Message-ID: <4F1C932A.5080607@gmail.com>

You should just go with Hg then.  Don't try to bend the tooling to your 
whims, you'll only get headaches.  Hg will do everything you want and 
better IMO.  At work we've moved to Hg for (among others) these reasons.

On 23/07/64 5:59 AM, Sam Harwell wrote:
> As a bit more background, I do development on many projects in several
> different languages and environments. My "primary" languages are C# and C++
> with Visual Studio. For ANTLR and school I also work in Java using IntelliJ
> and more recently NetBeans. I always use an external GUI for source control
> before checking files in because it gives me extra control in preventing
> mistakes when working on someone else's project - I diff every file to
> ensure that my code formatting and even whitespace match the settings of
> code around my changes. I find that when it specifically comes to checking
> files in, IDE integrations can occasionally have "glitches" (unexpected
> behavior, nuances, and/or bugs) so I avoid them.
>
> For external tools, I find P4V (Perforce) feature rich but slow and
> particularly cumbersome when it comes to experimenting with code checked out
> from a read-only repository. Nevertheless, I frequently use it since
> Perforce is the chosen SCC for all the commercial projects I've been
> involved with. TortoiseHG Workbench has been exceptional (but not perfect),
> and has stable, complete support across all of the development environments
> I work with. TortoiseSVN is truly polished and performs very well, but
> suffers from limitations imposed by SVN itself.
>
> Git concerns me not only for falling behind these in toolchain/GUI support
> on Windows, but I also don't see a big movement to close the gap. TortoiseHG
> is a particular example of a very actively developed project with frequent
> releases.
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Sujith Pillai [mailto:sujithspillai at gmail.com]
> Sent: Wednesday, January 18, 2012 10:12 AM
> To: Terence Parr
> Cc: stringtemplate-interest List; antlr-interest Interest; Zenaan Harkness
> Subject: Re: [antlr-interest] [stringtemplate-interest] anybody care to
> comment on bitbucket.org?
>
> 1) TortoiseGit - very popular
> 2) msysgit - second
> 3) SmartGit - I have heard good things about this, but haven't met someone
> who uses this (yet).
>
>
>
> On Wed, Jan 18, 2012 at 11:01 AM, Terence Parr<parrt at cs.usfca.edu>  wrote:
>> I'm leaning towards git but Sam Harwell, who is super important on this
> project, using windows and would need good git gui outside of dev tool. Can
> anybody comment on what is useful (non cmd-line)?
>>
>> Ter
>> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
>>
>>> On Tue, Jan 10, 2012 at 09:54, John D. Mitchell<jdmitchell at gmail.com>
> wrote:
>>> Hg and Git are comparable on a feature basis.
>>>
>>> However, Hg and Git are built with very different philosophies. Git is
> perfectly happy to allow mutation of history.
>>>
>>> By default, public repositories are not rebase-able. The fact that
> something _can_ be achieved should not be held against it.
>>>
>>> And locally, if you don't want to rebase, don't. I find that on small,
> private-only "feature" branches or "experiment" branches, that rebasing is a
> useful tool. So is cherry picking. Knowing when to use a powerful tool is
> part of being a good technician/ programmer.
>>>
>>> Git was a steep learning curve for me. "Pro Git" book I find excellent.
> Bought a paper copy.
>>>
>>> I used bitkeeper, arch/tla, and cvs etc. in the past. I think others have
> said, but git stash is a godsend, as well as other bits and bobs.
>>>
>>> _______________________________________________
>>> stringtemplate-interest mailing list
>>> stringtemplate-interest at antlr.org
>>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest

From parrt at cs.usfca.edu  Sun Jan 22 14:54:08 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 22 Jan 2012 14:54:08 -0800
Subject: [antlr-interest] Honey Badger Theory
In-Reply-To: <CAHMh4-Zj0tNgWZcOZh1FLtNHN48sqsjepipSqSqBTFro-EvpRg@mail.gmail.com>
References: <4F1BE620.1020103@in.tum.de>
	<6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
	<CAHMh4-Zj0tNgWZcOZh1FLtNHN48sqsjepipSqSqBTFro-EvpRg@mail.gmail.com>
Message-ID: <0F5C4FF0-31EE-4434-8C58-2A9F05EB6A0C@cs.usfca.edu>


On Jan 22, 2012, at 12:24 PM, Gokulakannan Somasundaram wrote:

> Hi Terrence,
>               Thanks for the explanation. I could understand part of what
> you said. So i will wait for the paper.
>               My question is how does the parsing strategy in V3 and V4
> compare against each other, if it has no backtracking in V3. More
> specifically, do you expect a LL(k) parser do more work in V4 for the sake
> of being adaptive?

 Basically, both parsing strategies use a DFA to predict which alternative to pick based upon the current input and the current decision. How this DFA is created is what's different. Statically, some of the DFA cannot be created so I failover to backtracking at runtime for v3. In v4, I do all the analysis runtime and so I can take each input on an individual basis. I can always create a proper DFA to predict the alternatives of a decision if I do it at runtime. hence no backtracking with the parser.

Yes, LL(k) for k>1 does more work in v4 while it does the analysis step. Once it warms up, however, it will perform the same amount of work as v3. For example, if you are doing syntax highlighting with the parser inside an IDE, the first time you parse will be slower whereas the future passes will be just as efficient as v3 (in principal, though they are still a bit slower after warm-up at the moment).

ter

From finis at in.tum.de  Sun Jan 22 23:16:15 2012
From: finis at in.tum.de (Jan Finis)
Date: Mon, 23 Jan 2012 08:16:15 +0100
Subject: [antlr-interest] Honey Badger Theory
In-Reply-To: <6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
References: <4F1BE620.1020103@in.tum.de>
	<6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
Message-ID: <4F1D093F.80004@in.tum.de>

Thanks Terence,

that gave me a little clue. I have already read your papers but there is 
none about honey badger, yet. A paper would be really interesting.

Another thing I noticed concerning speed:
(Maybe there already is an option to bypass this. If so, just tell me 
and ignore my suggestion :)

You create a field in the rule context class for each token which is 
explicitly named using the a=b synax. For large rules, this might result 
in a very large context object. Since we can do left recursion now, 
there might be VERY large rules like the expr rule of the R grammar you 
posted. Now imagine I name each sub-expression in the rule differently:

expr    :       '{' l=exprlist '}'
         |       '(' subExpr=expr ')'
         |       e=expr '[[' params=sublist ']' ']'
         |       scope=expr ('::'|':::') member=expr
         |       lexpr=expr ('$'|'@') rexpr=expr
...

For the full expr rule, this would result in a context with around 50 
fields to hold the named tokens which would result in a very large 
memory footprint and unnecessary loss of performance due to increased 
allocation overhead. I see that it is partly my fault, because I named 
the exprs differently. However, people often want meaningful names and 
if rules contain tokens of different types, then you even NEED different 
fields for them.

Suggestion:
Add an option which makes the named tokens only local variables in the 
parsing function of the rule (each scoped locally in a block for the 
alternative). You can't use them in listeners then, but for people which 
write their code directly into the parser this would be a very welcomed 
improvement. People which use listeners just don't use the option. Btw 
there should be an option to disable listeners all together. Is there one?

I want to use ANTLR to parse really large inputs and the left recursive 
rules are really really awsome but I think the large context objects 
might ruin my performance.

Regards,
Jan




Am 22.01.2012 20:58, schrieb Terence Parr:
> Hi Jan, honey badger's parsing strategy is and adaptive or incremental version of LL(*). The reason that v3 ANTLR needed to backtrack was that LL(*) grammar analysis is undecidable statically.  When it failed at static analysis, it failed over to backtracking at runtime. However, at runtime, I have an actual input stream that I can work with. This renders the algorithm deterministic and so I don't need to backtrack. In a nutshell, like GLR I pursue all possible paths from the decision point in a breadth first manner, almost as if I had forked multiple threads to pursue the possibilities. Because we pursue all possibilities at once, there is no backtracking. We move one token at a time seeing where it takes us in all possible alternatives. When only a single alternative is left, we know to predict that Alternative. We rewind the input and then take the appropriate path.
>
> LL(*) is O(n) for a given decision because in the worst case it might look scan until the end of the input. If we must make a decision at every token, that is an O(n^2) parsing strategy for n tokens.  That actually hides another complexity that generally does not appear. We are doing what amounts to a more complicated NFA to DFA conversion, which we know is exponential in complexity (in theory but not in practice). That means that a particular decision could hit a landmine at some point. I have seen one example of this. I have some interesting ideas for altering the algorithm so this does not occur.  I'll get to it.
>
> To learn more about the static analysis, you can go here:
>
> http://www.antlr.org/papers/LL-star-PLDI11.pdf
>
> I hope to do a paper on this adaptive LL(*) at some point.
>
> "It's pretty bad ass. It just doesn't give a shit." --honey badger
>
> Ter
> On Jan 22, 2012, at 2:34 AM, Jan Finis wrote:
>
>> Hi Terence,
>>
>> I am into parser generator theory, so I am wondering which concepts you
>> use to let Honey Badger "eat everything" (even left recursion) and never
>> backtrack. Could you tell me which concepts you use? I know I could just
>> check the code but I think it will be 1000 times faster if you explain
>> it to me and I think it will also be interesting for many others here.
>>
>> And does never backtrack mean that the parser will always stay linear
>> like a packrat parser?
>>
>> Best regards,
>> Jan Finis
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Mon Jan 23 02:04:54 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 23 Jan 2012 18:04:54 +0800
Subject: [antlr-interest] Honey Badger Theory
In-Reply-To: <0F5C4FF0-31EE-4434-8C58-2A9F05EB6A0C@cs.usfca.edu>
References: <4F1BE620.1020103@in.tum.de>
	<6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
	<CAHMh4-Zj0tNgWZcOZh1FLtNHN48sqsjepipSqSqBTFro-EvpRg@mail.gmail.com>
	<0F5C4FF0-31EE-4434-8C58-2A9F05EB6A0C@cs.usfca.edu>
Message-ID: <CAHMh4-aVvAbLFjD2ZN2kfbFC6C6eA+48B4T_S-QbbpYTmhFaoQ@mail.gmail.com>

>
>  Basically, both parsing strategies use a DFA to predict which alternative
> to pick based upon the current input and the current decision. How this DFA
> is created is what's different. Statically, some of the DFA cannot be
> created so I failover to backtracking at runtime for v3. In v4, I do all
> the analysis runtime and so I can take each input on an individual basis. I
> can always create a proper DFA to predict the alternatives of a decision if
> I do it at runtime. hence no backtracking with the parser.
>
> Yes, LL(k) for k>1 does more work in v4 while it does the analysis step.
> Once it warms up, however, it will perform the same amount of work as v3.
> For example, if you are doing syntax highlighting with the parser inside an
> IDE, the first time you parse will be slower whereas the future passes will
> be just as efficient as v3 (in principal, though they are still a bit
> slower after warm-up at the moment).
>
>
Great explanation. Thanks a lot Terence.

Gokul.

From chwchw at gmx.de  Mon Jan 23 05:30:41 2012
From: chwchw at gmx.de (Christian)
Date: Mon, 23 Jan 2012 14:30:41 +0100
Subject: [antlr-interest] Lexer for 0.Equals(..)
Message-ID: <4F1D6101.9050908@gmx.de>

Hello,

my lexer does not recognize 0.Equals(..) and reports the error:
    required (...)+ loop did not match anything at character 'E'

I understand why but I do not know how to resolve it. Here are the
participating rules in order:

INTEGER_LITERAL
  : Decimal_integer_literal
  | Hexadecimal_integer_literal
  ;

REAL_LITERAL
  : Decimal_digits DOT Decimal_digits Exponent_part? Real_type_suffix?
  | DOT Decimal_digits Exponent_part? Real_type_suffix?
  | Decimal_digits Exponent_part Real_type_suffix?
  | Decimal_digits Real_type_suffix
  ;

DOT : '.';

The lexer tries to match the statement from above with the first branch
in the REAL_LITERAL rule but fails after the DOT. Of course. However,
why doesn't it try to match it with other rules after failing?
Furthermore, how can I resolve the problem?

If you need more information, please let me know.

Regards,
Christian

From sam at tunnelvisionlabs.com  Mon Jan 23 06:14:23 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Mon, 23 Jan 2012 08:14:23 -0600
Subject: [antlr-interest] Honey Badger Theory
In-Reply-To: <4F1D093F.80004@in.tum.de>
References: <4F1BE620.1020103@in.tum.de>	<6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
	<4F1D093F.80004@in.tum.de>
Message-ID: <03da01ccd9d9$4f6484a0$ee2d8de0$@tunnelvisionlabs.com>

Hi Jan,

Placing all locals in the context objects resolves problems endlessly
showing up with predicates during grammar development with v3. The goal with
v4 is getting closer to language-agnostic grammar files with the actual
action code written in listeners. In v4, inline actions are still supported
but they are generally unnecessary and not recommended anymore for most
purposes.

How large is a "large input" you are considering? After optimization of the
v4 runtime, my tests show it can handle 70MB of input with ease (less than
5sec on a single thread, where I could easily parallelize it across multiple
processors on a per-file basis). V4 will also support unbuffered token
streams for lexers, so even if you're outside the range of what ANTLR was
meant to handle it may work fine.

I'm working on some ideas to reduce the number of fields in a context object
when the rule uses labeled alts like the following (I'm not familiar with R
so I just made up names for the alts):

expr    :       '{' l=exprlist '}' -> blockExpr
         |       '(' subExpr=expr ')' -> parenExpr
         |       e=expr '[[' params=sublist ']' ']' -> indexExpr
         |       scope=expr ('::'|':::') member=expr -> selectorExpr
         |       lexpr=expr ('$'|'@') rexpr=expr -> concatExpr
...

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Jan Finis [mailto:finis at in.tum.de] 
Sent: Monday, January 23, 2012 1:16 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Honey Badger Theory

Thanks Terence,

that gave me a little clue. I have already read your papers but there is
none about honey badger, yet. A paper would be really interesting.

Another thing I noticed concerning speed:
(Maybe there already is an option to bypass this. If so, just tell me and
ignore my suggestion :)

You create a field in the rule context class for each token which is
explicitly named using the a=b synax. For large rules, this might result in
a very large context object. Since we can do left recursion now, there might
be VERY large rules like the expr rule of the R grammar you posted. Now
imagine I name each sub-expression in the rule differently:

expr    :       '{' l=exprlist '}'
         |       '(' subExpr=expr ')'
         |       e=expr '[[' params=sublist ']' ']'
         |       scope=expr ('::'|':::') member=expr
         |       lexpr=expr ('$'|'@') rexpr=expr
...

For the full expr rule, this would result in a context with around 50 fields
to hold the named tokens which would result in a very large memory footprint
and unnecessary loss of performance due to increased allocation overhead. I
see that it is partly my fault, because I named the exprs differently.
However, people often want meaningful names and if rules contain tokens of
different types, then you even NEED different fields for them.

Suggestion:
Add an option which makes the named tokens only local variables in the
parsing function of the rule (each scoped locally in a block for the
alternative). You can't use them in listeners then, but for people which
write their code directly into the parser this would be a very welcomed
improvement. People which use listeners just don't use the option. Btw there
should be an option to disable listeners all together. Is there one?

I want to use ANTLR to parse really large inputs and the left recursive
rules are really really awsome but I think the large context objects might
ruin my performance.

Regards,
Jan




Am 22.01.2012 20:58, schrieb Terence Parr:
> Hi Jan, honey badger's parsing strategy is and adaptive or incremental
version of LL(*). The reason that v3 ANTLR needed to backtrack was that
LL(*) grammar analysis is undecidable statically.  When it failed at static
analysis, it failed over to backtracking at runtime. However, at runtime, I
have an actual input stream that I can work with. This renders the algorithm
deterministic and so I don't need to backtrack. In a nutshell, like GLR I
pursue all possible paths from the decision point in a breadth first manner,
almost as if I had forked multiple threads to pursue the possibilities.
Because we pursue all possibilities at once, there is no backtracking. We
move one token at a time seeing where it takes us in all possible
alternatives. When only a single alternative is left, we know to predict
that Alternative. We rewind the input and then take the appropriate path.
>
> LL(*) is O(n) for a given decision because in the worst case it might look
scan until the end of the input. If we must make a decision at every token,
that is an O(n^2) parsing strategy for n tokens.  That actually hides
another complexity that generally does not appear. We are doing what amounts
to a more complicated NFA to DFA conversion, which we know is exponential in
complexity (in theory but not in practice). That means that a particular
decision could hit a landmine at some point. I have seen one example of
this. I have some interesting ideas for altering the algorithm so this does
not occur.  I'll get to it.
>
> To learn more about the static analysis, you can go here:
>
> http://www.antlr.org/papers/LL-star-PLDI11.pdf
>
> I hope to do a paper on this adaptive LL(*) at some point.
>
> "It's pretty bad ass. It just doesn't give a shit." --honey badger
>
> Ter
> On Jan 22, 2012, at 2:34 AM, Jan Finis wrote:
>
>> Hi Terence,
>>
>> I am into parser generator theory, so I am wondering which concepts 
>> you use to let Honey Badger "eat everything" (even left recursion) 
>> and never backtrack. Could you tell me which concepts you use? I know 
>> I could just check the code but I think it will be 1000 times faster 
>> if you explain it to me and I think it will also be interesting for many
others here.
>>
>> And does never backtrack mean that the parser will always stay linear 
>> like a packrat parser?
>>
>> Best regards,
>> Jan Finis
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: 
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sam at tunnelvisionlabs.com  Mon Jan 23 06:48:22 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Mon, 23 Jan 2012 08:48:22 -0600
Subject: [antlr-interest] Lexer for 0.Equals(..)
In-Reply-To: <4F1D6101.9050908@gmx.de>
References: <4F1D6101.9050908@gmx.de>
Message-ID: <03db01ccd9de$0f2ce7b0$2d86b710$@tunnelvisionlabs.com>

It looks like your lexer is matching "0.E" as a REAL_LITERAL. You need to
make sure that the exponent part includes non-optional digits after the E.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Christian [mailto:chwchw at gmx.de] 
Sent: Monday, January 23, 2012 7:31 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Lexer for 0.Equals(..)

Hello,

my lexer does not recognize 0.Equals(..) and reports the error:
    required (...)+ loop did not match anything at character 'E'

I understand why but I do not know how to resolve it. Here are the
participating rules in order:

INTEGER_LITERAL
  : Decimal_integer_literal
  | Hexadecimal_integer_literal
  ;

REAL_LITERAL
  : Decimal_digits DOT Decimal_digits Exponent_part? Real_type_suffix?
  | DOT Decimal_digits Exponent_part? Real_type_suffix?
  | Decimal_digits Exponent_part Real_type_suffix?
  | Decimal_digits Real_type_suffix
  ;

DOT : '.';

The lexer tries to match the statement from above with the first branch in
the REAL_LITERAL rule but fails after the DOT. Of course. However, why
doesn't it try to match it with other rules after failing?
Furthermore, how can I resolve the problem?

If you need more information, please let me know.

Regards,
Christian

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From chwchw at gmx.de  Mon Jan 23 06:50:52 2012
From: chwchw at gmx.de (Christian)
Date: Mon, 23 Jan 2012 15:50:52 +0100
Subject: [antlr-interest] Lexer for 0.Equals(..)
In-Reply-To: <03db01ccd9de$0f2ce7b0$2d86b710$@tunnelvisionlabs.com>
References: <4F1D6101.9050908@gmx.de>
	<03db01ccd9de$0f2ce7b0$2d86b710$@tunnelvisionlabs.com>
Message-ID: <4F1D73CC.5070001@gmx.de>

> It looks like your lexer is matching "0.E" as a REAL_LITERAL.
Yes, I know.

> You need to make sure that the exponent part includes non-optional digits after the E.
Thank you, but how can I realize it?

Regards,
Christian

Am 23.01.2012 15:48, schrieb Sam Harwell:
> It looks like your lexer is matching "0.E" as a REAL_LITERAL. You need to
> make sure that the exponent part includes non-optional digits after the E.
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Christian [mailto:chwchw at gmx.de] 
> Sent: Monday, January 23, 2012 7:31 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Lexer for 0.Equals(..)
>
> Hello,
>
> my lexer does not recognize 0.Equals(..) and reports the error:
>     required (...)+ loop did not match anything at character 'E'
>
> I understand why but I do not know how to resolve it. Here are the
> participating rules in order:
>
> INTEGER_LITERAL
>   : Decimal_integer_literal
>   | Hexadecimal_integer_literal
>   ;
>
> REAL_LITERAL
>   : Decimal_digits DOT Decimal_digits Exponent_part? Real_type_suffix?
>   | DOT Decimal_digits Exponent_part? Real_type_suffix?
>   | Decimal_digits Exponent_part Real_type_suffix?
>   | Decimal_digits Real_type_suffix
>   ;
>
> DOT : '.';
>
> The lexer tries to match the statement from above with the first branch in
> the REAL_LITERAL rule but fails after the DOT. Of course. However, why
> doesn't it try to match it with other rules after failing?
> Furthermore, how can I resolve the problem?
>
> If you need more information, please let me know.
>
> Regards,
> Christian
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From asicaddress at gmail.com  Mon Jan 23 10:31:57 2012
From: asicaddress at gmail.com (A Z)
Date: Tue, 24 Jan 2012 00:31:57 +0600
Subject: [antlr-interest] Semantic predicates in v4 lexer rules
Message-ID: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>

Can we still use sementic predicates in lexer rules using v4? The following
code works in 3.4 but 4.0ea complains with

error(15): TestLexer.g:484:29: '{keywords == true}?' came as a complete
surprise to me while looking for lexer rule element


K_IF                       : {keywords == true}? => 'if';
K_INT                      : {keywords == true}? => 'int';


The language I'm using allows changing the keyword set via preprocessor
directives so all the keywords need to test a variable at runtime. Is there
another way to do this in v4?

From parrt at cs.usfca.edu  Mon Jan 23 10:39:40 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 23 Jan 2012 10:39:40 -0800
Subject: [antlr-interest] Semantic predicates in v4 lexer rules
In-Reply-To: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>
References: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>
Message-ID: <680299B3-61E4-4A24-9D7A-86EB885055ED@cs.usfca.edu>

ooops. I removed actions from anywhere except the right-hand side but forgot to leave in predicates.

 adding to the list.
Ter
On Jan 23, 2012, at 10:31 AM, A Z wrote:

> Can we still use sementic predicates in lexer rules using v4? The following
> code works in 3.4 but 4.0ea complains with
> 
> error(15): TestLexer.g:484:29: '{keywords == true}?' came as a complete
> surprise to me while looking for lexer rule element
> 
> 
> K_IF                       : {keywords == true}? => 'if';
> K_INT                      : {keywords == true}? => 'int';
> 
> 
> The language I'm using allows changing the keyword set via preprocessor
> directives so all the keywords need to test a variable at runtime. Is there
> another way to do this in v4?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Mon Jan 23 11:00:15 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 23 Jan 2012 11:00:15 -0800
Subject: [antlr-interest] anybody care to comment on bitbucket.org?
In-Reply-To: <4F1C932A.5080607@gmail.com>
References: <F2EE08B8-BB4A-4F86-9967-49078E3072B6@cs.usfca.edu>
	<CADVp3v-RnTrWGXRrZAgLQ9Vr99Tm=N+Yh4o5xwTH+ojsoiwVqQ@mail.gmail.com>
	<8B903C93-D156-4470-AE94-9BE7BA5FD40F@cs.usfca.edu>	<CADVp3v-PxKMbPnQohOkyMbsBWvLLf2FRd69xDsninZFapGKrDg@mail.gmail.com>
	<C93F5DEF-FA90-4F48-A2FA-8761709A8AEB@gmail.com>	<CAOsGNSTsor_Y9EZDpPGWy4mHLwFg1o-SZC3wYMLFQ0s3xEV9XA@mail.gmail.com>
	<88DED395-91F6-46EC-86D5-49FD66127B45@cs.usfca.edu>	<CAFsJ-FeoW+VDNKopDTS-=gD3x-CY23Dxxq7iksCcB7pUAnM=Xg@mail.gmail.com>
	<024901ccd603$1b4eb250$51ec16f0$@tunnelvisionlabs.com>
	<4F1C932A.5080607@gmail.com>
Message-ID: <67f114807e322ff0e679d3e5a09c11d4@mail.gmail.com>

Don't use hg

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kieran Simpson
> Sent: Sunday, January 22, 2012 2:52 PM
> Cc: 'antlr-interest Interest'
> Subject: Re: [antlr-interest] anybody care to comment on bitbucket.org?
>
> You should just go with Hg then.  Don't try to bend the tooling to your
> whims, you'll only get headaches.  Hg will do everything you want and
> better IMO.  At work we've moved to Hg for (among others) these
> reasons.
>
> On 23/07/64 5:59 AM, Sam Harwell wrote:
> > As a bit more background, I do development on many projects in
> several
> > different languages and environments. My "primary" languages are C#
> > and C++ with Visual Studio. For ANTLR and school I also work in Java
> > using IntelliJ and more recently NetBeans. I always use an external
> > GUI for source control before checking files in because it gives me
> > extra control in preventing mistakes when working on someone else's
> > project - I diff every file to ensure that my code formatting and
> even
> > whitespace match the settings of code around my changes. I find that
> > when it specifically comes to checking files in, IDE integrations can
> > occasionally have "glitches" (unexpected behavior, nuances, and/or
> bugs) so I avoid them.
> >
> > For external tools, I find P4V (Perforce) feature rich but slow and
> > particularly cumbersome when it comes to experimenting with code
> > checked out from a read-only repository. Nevertheless, I frequently
> > use it since Perforce is the chosen SCC for all the commercial
> > projects I've been involved with. TortoiseHG Workbench has been
> > exceptional (but not perfect), and has stable, complete support
> across
> > all of the development environments I work with. TortoiseSVN is truly
> > polished and performs very well, but suffers from limitations imposed
> by SVN itself.
> >
> > Git concerns me not only for falling behind these in toolchain/GUI
> > support on Windows, but I also don't see a big movement to close the
> > gap. TortoiseHG is a particular example of a very actively developed
> > project with frequent releases.
> >
> > --
> > Sam Harwell
> > Owner, Lead Developer
> > http://tunnelvisionlabs.com
> >
> >
> > -----Original Message-----
> > From: Sujith Pillai [mailto:sujithspillai at gmail.com]
> > Sent: Wednesday, January 18, 2012 10:12 AM
> > To: Terence Parr
> > Cc: stringtemplate-interest List; antlr-interest Interest; Zenaan
> > Harkness
> > Subject: Re: [antlr-interest] [stringtemplate-interest] anybody care
> > to comment on bitbucket.org?
> >
> > 1) TortoiseGit - very popular
> > 2) msysgit - second
> > 3) SmartGit - I have heard good things about this, but haven't met
> > someone who uses this (yet).
> >
> >
> >
> > On Wed, Jan 18, 2012 at 11:01 AM, Terence Parr<parrt at cs.usfca.edu>
> wrote:
> >> I'm leaning towards git but Sam Harwell, who is super important on
> >> this
> > project, using windows and would need good git gui outside of dev
> > tool. Can anybody comment on what is useful (non cmd-line)?
> >>
> >> Ter
> >> On Jan 17, 2012, at 4:08 PM, Zenaan Harkness wrote:
> >>
> >>> On Tue, Jan 10, 2012 at 09:54, John D.
> >>> Mitchell<jdmitchell at gmail.com>
> > wrote:
> >>> Hg and Git are comparable on a feature basis.
> >>>
> >>> However, Hg and Git are built with very different philosophies. Git
> >>> is
> > perfectly happy to allow mutation of history.
> >>>
> >>> By default, public repositories are not rebase-able. The fact that
> > something _can_ be achieved should not be held against it.
> >>>
> >>> And locally, if you don't want to rebase, don't. I find that on
> >>> small,
> > private-only "feature" branches or "experiment" branches, that
> > rebasing is a useful tool. So is cherry picking. Knowing when to use
> a
> > powerful tool is part of being a good technician/ programmer.
> >>>
> >>> Git was a steep learning curve for me. "Pro Git" book I find
> excellent.
> > Bought a paper copy.
> >>>
> >>> I used bitkeeper, arch/tla, and cvs etc. in the past. I think
> others
> >>> have
> > said, but git stash is a godsend, as well as other bits and bobs.
> >>>
> >>> _______________________________________________
> >>> stringtemplate-interest mailing list
> >>> stringtemplate-interest at antlr.org
> >>> http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From sam at tunnelvisionlabs.com  Mon Jan 23 11:13:12 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Mon, 23 Jan 2012 13:13:12 -0600
Subject: [antlr-interest] Semantic predicates in v4 lexer rules
In-Reply-To: <680299B3-61E4-4A24-9D7A-86EB885055ED@cs.usfca.edu>
References: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>
	<680299B3-61E4-4A24-9D7A-86EB885055ED@cs.usfca.edu>
Message-ID: <040001ccda03$0e792840$2b6b78c0$@tunnelvisionlabs.com>

Even after this is resolved, semantic predicates are almost surely not the
correct way to handle this. Instead, you should use an action like the
following at the end of the rule to reset the keyword to an identifier if
keywords are disabled. Semantic predicates in a v4 lexer have a major
performance cost.

K_IF : 'if' {if (!keywords) $type=ID;};

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Monday, January 23, 2012 12:40 PM
To: A Z
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Semantic predicates in v4 lexer rules

ooops. I removed actions from anywhere except the right-hand side but forgot
to leave in predicates.

 adding to the list.
Ter
On Jan 23, 2012, at 10:31 AM, A Z wrote:

> Can we still use sementic predicates in lexer rules using v4? The 
> following code works in 3.4 but 4.0ea complains with
> 
> error(15): TestLexer.g:484:29: '{keywords == true}?' came as a 
> complete surprise to me while looking for lexer rule element
> 
> 
> K_IF                       : {keywords == true}? => 'if';
> K_INT                      : {keywords == true}? => 'int';
> 
> 
> The language I'm using allows changing the keyword set via 
> preprocessor directives so all the keywords need to test a variable at 
> runtime. Is there another way to do this in v4?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From asicaddress at gmail.com  Mon Jan 23 13:21:07 2012
From: asicaddress at gmail.com (A Z)
Date: Tue, 24 Jan 2012 03:21:07 +0600
Subject: [antlr-interest] Semantic predicates in v4 lexer rules
In-Reply-To: <040001ccda03$0e792840$2b6b78c0$@tunnelvisionlabs.com>
References: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>
	<680299B3-61E4-4A24-9D7A-86EB885055ED@cs.usfca.edu>
	<040001ccda03$0e792840$2b6b78c0$@tunnelvisionlabs.com>
Message-ID: <CAP86aOeyh0cjF6pZkK7HbA-LZbJ74iZxnWyicZU6gk161q3siw@mail.gmail.com>

Thanks for the response. It's also giving me errors for all syntactic
predicates so I assume it's for the same reason.


On Tue, Jan 24, 2012 at 1:13 AM, Sam Harwell <sam at tunnelvisionlabs.com>wrote:

> Even after this is resolved, semantic predicates are almost surely not the
> correct way to handle this. Instead, you should use an action like the
> following at the end of the rule to reset the keyword to an identifier if
> keywords are disabled. Semantic predicates in a v4 lexer have a major
> performance cost.
>
> K_IF : 'if' {if (!keywords) $type=ID;};
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Monday, January 23, 2012 12:40 PM
> To: A Z
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Semantic predicates in v4 lexer rules
>
> ooops. I removed actions from anywhere except the right-hand side but
> forgot
> to leave in predicates.
>
>  adding to the list.
> Ter
> On Jan 23, 2012, at 10:31 AM, A Z wrote:
>
> > Can we still use sementic predicates in lexer rules using v4? The
> > following code works in 3.4 but 4.0ea complains with
> >
> > error(15): TestLexer.g:484:29: '{keywords == true}?' came as a
> > complete surprise to me while looking for lexer rule element
> >
> >
> > K_IF                       : {keywords == true}? => 'if';
> > K_INT                      : {keywords == true}? => 'int';
> >
> >
> > The language I'm using allows changing the keyword set via
> > preprocessor directives so all the keywords need to test a variable at
> > runtime. Is there another way to do this in v4?
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From sam at tunnelvisionlabs.com  Mon Jan 23 13:33:53 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Mon, 23 Jan 2012 15:33:53 -0600
Subject: [antlr-interest] Semantic predicates in v4 lexer rules
In-Reply-To: <CAP86aOeyh0cjF6pZkK7HbA-LZbJ74iZxnWyicZU6gk161q3siw@mail.gmail.com>
References: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>	<680299B3-61E4-4A24-9D7A-86EB885055ED@cs.usfca.edu>	<040001ccda03$0e792840$2b6b78c0$@tunnelvisionlabs.com>
	<CAP86aOeyh0cjF6pZkK7HbA-LZbJ74iZxnWyicZU6gk161q3siw@mail.gmail.com>
Message-ID: <041701ccda16$b5774510$2065cf30$@tunnelvisionlabs.com>

I forgot to add, gated semantic predicates (ones followed by =>) no longer
exist in v4 because it will always look far enough ahead to make its
decision. Semantic predicates are now just {...}?", and syntactic predicates
are removed.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com


-----Original Message-----
From: A Z [mailto:asicaddress at gmail.com] 
Sent: Monday, January 23, 2012 3:21 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Semantic predicates in v4 lexer rules

Thanks for the response. It's also giving me errors for all syntactic
predicates so I assume it's for the same reason.


On Tue, Jan 24, 2012 at 1:13 AM, Sam Harwell
<sam at tunnelvisionlabs.com>wrote:

> Even after this is resolved, semantic predicates are almost surely not 
> the correct way to handle this. Instead, you should use an action like 
> the following at the end of the rule to reset the keyword to an 
> identifier if keywords are disabled. Semantic predicates in a v4 lexer 
> have a major performance cost.
>
> K_IF : 'if' {if (!keywords) $type=ID;};
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
>
> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Monday, January 23, 2012 12:40 PM
> To: A Z
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Semantic predicates in v4 lexer rules
>
> ooops. I removed actions from anywhere except the right-hand side but 
> forgot to leave in predicates.
>
>  adding to the list.
> Ter
> On Jan 23, 2012, at 10:31 AM, A Z wrote:
>
> > Can we still use sementic predicates in lexer rules using v4? The 
> > following code works in 3.4 but 4.0ea complains with
> >
> > error(15): TestLexer.g:484:29: '{keywords == true}?' came as a 
> > complete surprise to me while looking for lexer rule element
> >
> >
> > K_IF                       : {keywords == true}? => 'if';
> > K_INT                      : {keywords == true}? => 'int';
> >
> >
> > The language I'm using allows changing the keyword set via 
> > preprocessor directives so all the keywords need to test a variable 
> > at runtime. Is there another way to do this in v4?
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-addre
> > ss
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Mon Jan 23 13:43:16 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 23 Jan 2012 13:43:16 -0800
Subject: [antlr-interest] Semantic predicates in v4 lexer rules
In-Reply-To: <CAP86aOeyh0cjF6pZkK7HbA-LZbJ74iZxnWyicZU6gk161q3siw@mail.gmail.com>
References: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>
	<680299B3-61E4-4A24-9D7A-86EB885055ED@cs.usfca.edu>
	<040001ccda03$0e792840$2b6b78c0$@tunnelvisionlabs.com>
	<CAP86aOeyh0cjF6pZkK7HbA-LZbJ74iZxnWyicZU6gk161q3siw@mail.gmail.com>
Message-ID: <CF9A9D17-0BA2-4931-B9AC-11619BEFAF95@cs.usfca.edu>

 there is no need for syntactic predicates in either the parser or the lexer anymore. just specify the grammar you need, and honey badger will do its magic.
Ter
On Jan 23, 2012, at 1:21 PM, A Z wrote:

> Thanks for the response. It's also giving me errors for all syntactic
> predicates so I assume it's for the same reason.
> 
> 
> On Tue, Jan 24, 2012 at 1:13 AM, Sam Harwell <sam at tunnelvisionlabs.com>wrote:
> 
>> Even after this is resolved, semantic predicates are almost surely not the
>> correct way to handle this. Instead, you should use an action like the
>> following at the end of the rule to reset the keyword to an identifier if
>> keywords are disabled. Semantic predicates in a v4 lexer have a major
>> performance cost.
>> 
>> K_IF : 'if' {if (!keywords) $type=ID;};
>> 
>> --
>> Sam Harwell
>> Owner, Lead Developer
>> http://tunnelvisionlabs.com
>> 
>> 
>> -----Original Message-----
>> From: Terence Parr [mailto:parrt at cs.usfca.edu]
>> Sent: Monday, January 23, 2012 12:40 PM
>> To: A Z
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Semantic predicates in v4 lexer rules
>> 
>> ooops. I removed actions from anywhere except the right-hand side but
>> forgot
>> to leave in predicates.
>> 
>> adding to the list.
>> Ter
>> On Jan 23, 2012, at 10:31 AM, A Z wrote:
>> 
>>> Can we still use sementic predicates in lexer rules using v4? The
>>> following code works in 3.4 but 4.0ea complains with
>>> 
>>> error(15): TestLexer.g:484:29: '{keywords == true}?' came as a
>>> complete surprise to me while looking for lexer rule element
>>> 
>>> 
>>> K_IF                       : {keywords == true}? => 'if';
>>> K_INT                      : {keywords == true}? => 'int';
>>> 
>>> 
>>> The language I'm using allows changing the keyword set via
>>> preprocessor directives so all the keywords need to test a variable at
>>> runtime. Is there another way to do this in v4?
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kferrio at gmail.com  Mon Jan 23 14:40:53 2012
From: kferrio at gmail.com (Kyle Ferrio)
Date: Mon, 23 Jan 2012 15:40:53 -0700
Subject: [antlr-interest] Semantic predicates in v4 lexer rules
In-Reply-To: <CF9A9D17-0BA2-4931-B9AC-11619BEFAF95@cs.usfca.edu>
References: <CAP86aOe3bdUiZYewNCLim7xp9KEzLRaj2tRaiL4j5nVtTca06Q@mail.gmail.com>
	<680299B3-61E4-4A24-9D7A-86EB885055ED@cs.usfca.edu>
	<040001ccda03$0e792840$2b6b78c0$@tunnelvisionlabs.com>
	<CAP86aOeyh0cjF6pZkK7HbA-LZbJ74iZxnWyicZU6gk161q3siw@mail.gmail.com>
	<CF9A9D17-0BA2-4931-B9AC-11619BEFAF95@cs.usfca.edu>
Message-ID: <CAAfeEToyEUi4oJ12GUVVQviEJVDYNJTpc7OW64zZ31sjE406uQ@mail.gmail.com>

Thinking in syntactic predicates is one habit which will -not- be hard to
break.  :)

Kyle
 On Jan 23, 2012 2:43 PM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

>  there is no need for syntactic predicates in either the parser or the
> lexer anymore. just specify the grammar you need, and honey badger will do
> its magic.
> Ter
> On Jan 23, 2012, at 1:21 PM, A Z wrote:
>
> > Thanks for the response. It's also giving me errors for all syntactic
> > predicates so I assume it's for the same reason.
> >
> >
> > On Tue, Jan 24, 2012 at 1:13 AM, Sam Harwell <sam at tunnelvisionlabs.com
> >wrote:
> >
> >> Even after this is resolved, semantic predicates are almost surely not
> the
> >> correct way to handle this. Instead, you should use an action like the
> >> following at the end of the rule to reset the keyword to an identifier
> if
> >> keywords are disabled. Semantic predicates in a v4 lexer have a major
> >> performance cost.
> >>
> >> K_IF : 'if' {if (!keywords) $type=ID;};
> >>
> >> --
> >> Sam Harwell
> >> Owner, Lead Developer
> >> http://tunnelvisionlabs.com
> >>
> >>
> >> -----Original Message-----
> >> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> >> Sent: Monday, January 23, 2012 12:40 PM
> >> To: A Z
> >> Cc: antlr-interest at antlr.org
> >> Subject: Re: [antlr-interest] Semantic predicates in v4 lexer rules
> >>
> >> ooops. I removed actions from anywhere except the right-hand side but
> >> forgot
> >> to leave in predicates.
> >>
> >> adding to the list.
> >> Ter
> >> On Jan 23, 2012, at 10:31 AM, A Z wrote:
> >>
> >>> Can we still use sementic predicates in lexer rules using v4? The
> >>> following code works in 3.4 but 4.0ea complains with
> >>>
> >>> error(15): TestLexer.g:484:29: '{keywords == true}?' came as a
> >>> complete surprise to me while looking for lexer rule element
> >>>
> >>>
> >>> K_IF                       : {keywords == true}? => 'if';
> >>> K_INT                      : {keywords == true}? => 'int';
> >>>
> >>>
> >>> The language I'm using allows changing the keyword set via
> >>> preprocessor directives so all the keywords need to test a variable at
> >>> runtime. Is there another way to do this in v4?
> >>>
> >>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe:
> >>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >>
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From asicaddress at gmail.com  Mon Jan 23 16:13:40 2012
From: asicaddress at gmail.com (A Z)
Date: Tue, 24 Jan 2012 06:13:40 +0600
Subject: [antlr-interest] Bug: String constant is too big in Parser
 generated by ANTLR v4
In-Reply-To: <90F64FDE-5C1F-4B1A-8142-5954672B1EA9@cs.usfca.edu>
References: <4F0E35CC.4040003@gmx.de>
	<D2FD2B3C-BD52-4ABC-8AE6-FFB8C92AECE9@cs.usfca.edu>
	<4F0EE164.3070309@gmx.de>
	<90F64FDE-5C1F-4B1A-8142-5954672B1EA9@cs.usfca.edu>
Message-ID: <CAP86aOf_=Zr26Ep7RzPpKMpuAWk-07Ub7UtZ+d548t1nK+6mEg@mail.gmail.com>

I see this issue as well in the generated lexer code.

On Fri, Jan 13, 2012 at 12:28 AM, Terence Parr <parrt at cs.usfca.edu> wrote:

>  would have made a separate file,But it's just one more thing that can go
> wrong. Somebody could forget to include it, because it's not a .class file,
> and you might hook up the wrong file or the wrong version. Better to keep
> it all in the same file encapsulated. I guess I will simply have to break
> into multiple streams, which is easy enough. gzip'ing reduces it to about
> 25% of its original size, which can help your file size in the editor issue.
> Ter
> On Jan 12, 2012, at 5:34 AM, Christian wrote:
>
> > It's a combined grammar of the complete Spec C# v4. The parser's string
> > constant extends to 2000 LOC, the lexer's to 1000 LOC. Moreover, it
> > would be great if you could extract the constant into another class so
> > that loading and displaying the parser file with an editor (e.g.
> > Eclipse) does not take so long.
> >
> > Am 12.01.2012 02:31, schrieb Terence Parr:
> >> thanks?wondering if this would come up.  Wow. big grammar?
> >> Ter
> >> On Jan 11, 2012, at 5:22 PM, Christian wrote:
> >>
> >>> Hi everybody and especially Terence!
> >>>
> >>> I get the following error message from Eclipse after ANTLR v4 has
> >>> generated the parser in Java:
> >>>
> >>>   The type generates a string that requires more than 65535 bytes to
> >>> encode in Utf8 format in the constant pool.
> >>>
> >>> I think this is due to your _serializedATN string. Could you
> dynamically
> >>> build it with a StringBuilder perhaps? If you fix it, apply the same
> >>> solution to the lexer please.
> >>>
> >>> Regards,
> >>> Christian
> >>>
> >>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >>> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From gokul007 at gmail.com  Mon Jan 23 20:12:24 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Tue, 24 Jan 2012 12:12:24 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
Message-ID: <CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>

Hi All,
         I have decided to spend some time to come up with a C++ Target for
ANTLR 3.4, as i need it desperately for my project. I have started working
on it and i am going to come with a initial version within a week or two.
My ideas
a) The details of the parser related functionality will be stolen from C
Target
b) It is not going to have function pointers/virtual functions. Its going
to be all templates
c) It is going to be a header-only library.
d) Its going to have Exception handling
e) I am going to replace structures like string, vector, stack, hash map,
list etc with data structures in C++
f) I am trying to make it as much type-safe as possible

But Since i don't have much experience with building Trees, i am not going
to touch the .stg files of the Tree Parser. I need some-one to take it up,
once i put out the first version.

Any suggestions?

Thanks,
Gokul.

On Sat, Jan 21, 2012 at 4:35 PM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> it is v3. Some of the function pointers have been converted to member
> functions. It basically has removed the flexibility of overriding some of
> the token related functions. But the performance gain is that the space
> occupied by those function pointers are saved. So this patch can be
> considered by those who use C++, don't want to override any of the token
> specific functionality ( which will definitely be useful to many ).
>
> Gokul.
>
>
> On Sat, Jan 21, 2012 at 10:34 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>> the code says antlr3XXX. is it v4 or v3?
>> Ter
>> On Jan 20, 2012, at 6:22 PM, A Z wrote:
>>
>> > With this (very quickly written) code I see about 7MB/sec for the lexer
>> > using clang++ and using static linking. Memory use is about 30:1 but
>> many
>> > features have been removed, like getText and setText.
>> >
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From rgildea at gmail.com  Mon Jan 23 21:46:45 2012
From: rgildea at gmail.com (Richard Gildea)
Date: Mon, 23 Jan 2012 21:46:45 -0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
Message-ID: <CACCG97GFiJ9LEBU1hV0oq0HaZz12ggUdC+k57qQbp4UwsjRhgQ@mail.gmail.com>

Hi Gokul,

We would definitely be interested in trying your C++ target if the memory
footprint is significantly lower than the C target. We have to handle files
up to 0.5 Gb in size, so minimising the memory overhead is critical for our
software.

Cheers,

Richard

On 23 January 2012 20:12, Gokulakannan Somasundaram <gokul007 at gmail.com>wrote:

> Hi All,
>         I have decided to spend some time to come up with a C++ Target for
> ANTLR 3.4, as i need it desperately for my project. I have started working
> on it and i am going to come with a initial version within a week or two.
> My ideas
> a) The details of the parser related functionality will be stolen from C
> Target
> b) It is not going to have function pointers/virtual functions. Its going
> to be all templates
> c) It is going to be a header-only library.
> d) Its going to have Exception handling
> e) I am going to replace structures like string, vector, stack, hash map,
> list etc with data structures in C++
> f) I am trying to make it as much type-safe as possible
>
> But Since i don't have much experience with building Trees, i am not going
> to touch the .stg files of the Tree Parser. I need some-one to take it up,
> once i put out the first version.
>
> Any suggestions?
>
> Thanks,
> Gokul.
>
> On Sat, Jan 21, 2012 at 4:35 PM, Gokulakannan Somasundaram <
> gokul007 at gmail.com> wrote:
>
> > it is v3. Some of the function pointers have been converted to member
> > functions. It basically has removed the flexibility of overriding some of
> > the token related functions. But the performance gain is that the space
> > occupied by those function pointers are saved. So this patch can be
> > considered by those who use C++, don't want to override any of the token
> > specific functionality ( which will definitely be useful to many ).
> >
> > Gokul.
> >
> >
> > On Sat, Jan 21, 2012 at 10:34 AM, Terence Parr <parrt at cs.usfca.edu>
> wrote:
> >
> >> the code says antlr3XXX. is it v4 or v3?
> >> Ter
> >> On Jan 20, 2012, at 6:22 PM, A Z wrote:
> >>
> >> > With this (very quickly written) code I see about 7MB/sec for the
> lexer
> >> > using clang++ and using static linking. Memory use is about 30:1 but
> >> many
> >> > features have been removed, like getText and setText.
> >> >
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From wclodius at los-alamos.net  Mon Jan 23 22:22:23 2012
From: wclodius at los-alamos.net (William Clodius)
Date: Mon, 23 Jan 2012 23:22:23 -0700
Subject: [antlr-interest] Honey Badger Theory
In-Reply-To: <6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
References: <4F1BE620.1020103@in.tum.de>
	<6196CEDD-B9FE-4081-8AB7-84B7032A3E6B@cs.usfca.edu>
Message-ID: <10475F0C-4D4C-4D07-85CD-459EF652B593@los-alamos.net>

Terence:

One interleaved question.
On Jan 22, 2012, at 12:58 PM, Terence Parr wrote:

> Hi Jan, honey badger's parsing strategy is and adaptive or incremental version of LL(*). The reason that v3 ANTLR needed to backtrack was that LL(*) grammar analysis is undecidable statically.  When it failed at static analysis, it failed over to backtracking at runtime. However, at runtime, I have an actual input stream that I can work with. This renders the algorithm deterministic and so I don't need to backtrack. In a nutshell, like GLR I pursue all possible paths from the decision point in a breadth first manner, almost as if I had forked multiple threads to pursue the possibilities. Because we pursue all possibilities at once, there is no backtracking. We move one token at a time seeing where it takes us in all possible alternatives. When only a single alternative is left, we know to predict that Alternative. We rewind the input and then take the appropriate path.
> 
> LL(*) is O(n) for a given decision because in the worst case it might look scan until the end of the input. If we must make a decision at every token, that is an O(n^2) parsing strategy for n tokens.  That actually hides another complexity that generally does not appear. We are doing what amounts to a more complicated NFA to DFA conversion, which we know is exponential in complexity (in theory but not in practice). That means that a particular decision could hit a landmine at some point. I have seen one example of this. I have some interesting ideas for altering the algorithm so this does not occur.  I'll get to it.

I assume the coefficient for the n^2 behavior depends on the (average/worst case?) number of alternatives at each token Could that blow up in a way that kills performance? 

> 
> To learn more about the static analysis, you can go here:
> 
> http://www.antlr.org/papers/LL-star-PLDI11.pdf
> 
> I hope to do a paper on this adaptive LL(*) at some point.
> 
> "It's pretty bad ass. It just doesn't give a shit." --honey badger
> 
> Ter
> On Jan 22, 2012, at 2:34 AM, Jan Finis wrote:
> 
>> Hi Terence,
>> 
>> I am into parser generator theory, so I am wondering which concepts you 
>> use to let Honey Badger "eat everything" (even left recursion) and never 
>> backtrack. Could you tell me which concepts you use? I know I could just 
>> check the code but I think it will be 1000 times faster if you explain 
>> it to me and I think it will also be interesting for many others here.
>> 
>> And does never backtrack mean that the parser will always stay linear 
>> like a packrat parser?
>> 
>> Best regards,
>> Jan Finis
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Tue Jan 24 00:26:22 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 24 Jan 2012 00:26:22 -0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
Message-ID: <6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>

Don't use templates.

Sigh.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
> Sent: Monday, January 23, 2012 8:12 PM
> To: Terence Parr
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr v4 - C++ target
>
> Hi All,
>          I have decided to spend some time to come up with a C++ Target
> for ANTLR 3.4, as i need it desperately for my project. I have started
> working on it and i am going to come with a initial version within a
> week or two.
> My ideas
> a) The details of the parser related functionality will be stolen from
> C Target
> b) It is not going to have function pointers/virtual functions. Its
> going to be all templates
> c) It is going to be a header-only library.
> d) Its going to have Exception handling
> e) I am going to replace structures like string, vector, stack, hash
> map, list etc with data structures in C++
> f) I am trying to make it as much type-safe as possible
>
> But Since i don't have much experience with building Trees, i am not
> going to touch the .stg files of the Tree Parser. I need some-one to
> take it up, once i put out the first version.
>
> Any suggestions?
>
> Thanks,
> Gokul.
>
> On Sat, Jan 21, 2012 at 4:35 PM, Gokulakannan Somasundaram <
> gokul007 at gmail.com> wrote:
>
> > it is v3. Some of the function pointers have been converted to member
> > functions. It basically has removed the flexibility of overriding
> some
> > of the token related functions. But the performance gain is that the
> > space occupied by those function pointers are saved. So this patch
> can
> > be considered by those who use C++, don't want to override any of the
> > token specific functionality ( which will definitely be useful to
> many ).
> >
> > Gokul.
> >
> >
> > On Sat, Jan 21, 2012 at 10:34 AM, Terence Parr <parrt at cs.usfca.edu>
> wrote:
> >
> >> the code says antlr3XXX. is it v4 or v3?
> >> Ter
> >> On Jan 20, 2012, at 6:22 PM, A Z wrote:
> >>
> >> > With this (very quickly written) code I see about 7MB/sec for the
> >> > lexer using clang++ and using static linking. Memory use is about
> >> > 30:1 but
> >> many
> >> > features have been removed, like getText and setText.
> >> >
> >>
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-
> addres
> >> s
> >>
> >
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From WeikEngOff at aol.com  Tue Jan 24 00:28:27 2012
From: WeikEngOff at aol.com (Udo Weik)
Date: Tue, 24 Jan 2012 09:28:27 +0100
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
Message-ID: <4F1E6BAB.2010706@aol.com>

Hello Jim,

> Don't use templates.
>
> Sigh.

Why?


Greetings
Udo

>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
>> Sent: Monday, January 23, 2012 8:12 PM
>> To: Terence Parr
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Antlr v4 - C++ target
>>
>> Hi All,
>>           I have decided to spend some time to come up with a C++ Target
>> for ANTLR 3.4, as i need it desperately for my project. I have started
>> working on it and i am going to come with a initial version within a
>> week or two.
>> My ideas
>> a) The details of the parser related functionality will be stolen from
>> C Target
>> b) It is not going to have function pointers/virtual functions. Its
>> going to be all templates
>> c) It is going to be a header-only library.
>> d) Its going to have Exception handling
>> e) I am going to replace structures like string, vector, stack, hash
>> map, list etc with data structures in C++
>> f) I am trying to make it as much type-safe as possible
>>
>> But Since i don't have much experience with building Trees, i am not
>> going to touch the .stg files of the Tree Parser. I need some-one to
>> take it up, once i put out the first version.
>>
>> Any suggestions?
>>
>> Thanks,
>> Gokul.
>>
>> On Sat, Jan 21, 2012 at 4:35 PM, Gokulakannan Somasundaram<
>> gokul007 at gmail.com>  wrote:
>>
>>> it is v3. Some of the function pointers have been converted to member
>>> functions. It basically has removed the flexibility of overriding
>> some
>>> of the token related functions. But the performance gain is that the
>>> space occupied by those function pointers are saved. So this patch
>> can
>>> be considered by those who use C++, don't want to override any of the
>>> token specific functionality ( which will definitely be useful to
>> many ).
>>>
>>> Gokul.
>>>
>>>
>>> On Sat, Jan 21, 2012 at 10:34 AM, Terence Parr<parrt at cs.usfca.edu>
>> wrote:
>>>
>>>> the code says antlr3XXX. is it v4 or v3?
>>>> Ter
>>>> On Jan 20, 2012, at 6:22 PM, A Z wrote:
>>>>
>>>>> With this (very quickly written) code I see about 7MB/sec for the
>>>>> lexer using clang++ and using static linking. Memory use is about
>>>>> 30:1 but
>>>> many
>>>>> features have been removed, like getText and setText.
>>>>>
>>>>
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> addres
>>>> s
>>>>
>>>
>>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Tue Jan 24 02:34:12 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Tue, 24 Jan 2012 18:34:12 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
Message-ID: <CAHMh4-Yv-jij6SLXgwNuAWLyxBSKZ-szRUk9vpMYsgv_BfhQDg@mail.gmail.com>

>
> Don't use templates.
>
> Sigh.
>
> Jim
>
> Jim,
    Have you had a look at Boost spirit parser? They have done the entire
thing with templates. I am only doing the runtime with templates. If you
are concerned with the compile time performance, i am assuring you that i
will limit the use of template not to stress the compiler.
     If there is something very obvious that i am missing, please let me
know.

Thanks,
Gokul.

From ibre5041 at ibrezina.net  Tue Jan 24 03:46:34 2012
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Tue, 24 Jan 2012 12:46:34 +0100
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-Yv-jij6SLXgwNuAWLyxBSKZ-szRUk9vpMYsgv_BfhQDg@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
	<CAHMh4-Yv-jij6SLXgwNuAWLyxBSKZ-szRUk9vpMYsgv_BfhQDg@mail.gmail.com>
Message-ID: <20120124124634.7uk4zy2m8wo848kk@webmail.kamm.cz>

Quoting Gokulakannan Somasundaram <gokul007 at gmail.com>:

>>
>> Don't use templates.
>>
>> Sigh.
>>
>> Jim
>>
>> Jim,
>     Have you had a look at Boost spirit parser? They have done the entire
> thing with templates. I am only doing the runtime with templates. If you
> are concerned with the compile time performance, i am assuring you that i
> will limit the use of template not to stress the compiler.
>      If there is something very obvious that i am missing, please let me
> know.
>
> Thanks,
> Gokul.
>

Hi,
I've been using spirit for about a year. Both versions "1" and "2".
During that time I reported two bugs in gcc and then finally I moved
to ANTLR.

Templates are nice, but on the other hand they must not be overused.
Templates are "equal" or transformable onto recursively enumerable functions
so theoretically you can perform any kind computation at compile time and then
you can store the result in the "final" program. The efficiency of  
such a program
is usually very poor. Every compiler has it's own limitations.
For example when using MSVC you can have max. 2048 nested template  
specializations.
This implies max. depth for the recursive function.

When using spirit I ended up in a situation that my grammar could not  
be compiled at all
using MSVC. While gcc had exponential memory requirements per  
grammar's rule length.

The approach boots uses is not applicable for complex grammars. The  
rest of the boost
library like functors, binds ... etc are very useful.

Ivan



----------------------------------------------------------------
This message was sent using IMP, the Internet Messaging Program.


From gokul007 at gmail.com  Tue Jan 24 04:06:19 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Tue, 24 Jan 2012 20:06:19 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <20120124124634.7uk4zy2m8wo848kk@webmail.kamm.cz>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
	<CAHMh4-Yv-jij6SLXgwNuAWLyxBSKZ-szRUk9vpMYsgv_BfhQDg@mail.gmail.com>
	<20120124124634.7uk4zy2m8wo848kk@webmail.kamm.cz>
Message-ID: <CAHMh4-aGX0848fc8Xj5QnBAM8G9oWeP=V2zphrhn8EJRJDHAEw@mail.gmail.com>

>
> Hi,
> I've been using spirit for about a year. Both versions "1" and "2".
> During that time I reported two bugs in gcc and then finally I moved
> to ANTLR.
>
> Templates are nice, but on the other hand they must not be overused.
> Templates are "equal" or transformable onto recursively enumerable
> functions
> so theoretically you can perform any kind computation at compile time and
> then
> you can store the result in the "final" program. The efficiency of
> such a program
> is usually very poor. Every compiler has it's own limitations.
> For example when using MSVC you can have max. 2048 nested template
> specializations.
> This implies max. depth for the recursive function.
>
> When using spirit I ended up in a situation that my grammar could not
> be compiled at all
> using MSVC. While gcc had exponential memory requirements per
> grammar's rule length.
>
> The approach boots uses is not applicable for complex grammars. The
> rest of the boost
> library like functors, binds ... etc are very useful.
>
> Ivan
>
>
> Noted. Its the same reason, i moved to ANTLR. So as i have already said, i
will limit the usage of templates, so that the compile time doesn't suffer.
Moreover, we are using templates only with runtime not for the parser
generation. So we don't have the same challenge as Spirit author.

Gokul.

From sboisen at mail.dk  Tue Jan 24 06:49:50 2012
From: sboisen at mail.dk (=?UTF-8?Q?S=C3=B8ren_Boisen?=)
Date: Tue, 24 Jan 2012 15:49:50 +0100
Subject: [antlr-interest] Tree pattern matching and delegate grammars
	(imported grammars) incompatible?
Message-ID: <CAM1TniBM=ZF3rF5+EuGuUMNYbxPFgi=T=Nyd0zAbNsKUUVvxeA@mail.gmail.com>

Hi there,
I'm trying to build a tree pattern matcher that rewrites my AST. Right
now, I'm trying to define a shared grammar for some common rules and
use it in my tree pattern matchers by importing it.
My problem is that the input TreeNodeStream doesn't seem to be shared
between the root grammar and the delegate. I've been looking hard at
the code involved, and it seems to me that this excerpt from
TreeRewriter is the culprit:

??? public Object applyOnce(Object t, fptr whichRule) {
??????? if ( t==null ) return null;
??????? try {
??????????? // share TreeParser object but not parsing-related state
??????????? state = new RecognizerSharedState();
??????????? input = new CommonTreeNodeStream(originalAdaptor, t);
??????? ...
??? }

So my question becomes: is tree pattern matching (and rewriting)
simply incompatible with grammar inheritance/delegation? Is there a
workaround?
It would be nice if such limitations were documented on the wiki, I
couldn't find any info on it at all.

Best regards
S?ren

From ruslan_zasukhin at valentina-db.com  Tue Jan 24 08:32:37 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Tue, 24 Jan 2012 18:32:37 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
Message-ID: <CB44A9C5.F90E0%ruslan_zasukhin@valentina-db.com>

On 1/24/12 6:12 AM, "Gokulakannan Somasundaram" <gokul007 at gmail.com> wrote:

Hi Gokulakannan, 

> Hi All,
>          I have decided to spend some time to come up with a C++ Target for
> ANTLR 3.4, as i need it desperately for my project. I have started working
> on it and i am going to come with a initial version within a week or two.
> My ideas

> a) The details of the parser related functionality will be stolen from C
> Target

> b) It is not going to have function pointers/virtual functions. Its going
> to be all templates



> c) It is going to be a header-only library.

ok

> d) Its going to have Exception handling

Sense?

> e) I am going to replace structures like string, vector, stack, hash map,
> list etc with data structures in C++

Very against !!

Why ??

Just use C-target  things...

OR at least NOT use std::strings ...

C target uses really minimal techniques with strings ...
std::string will bring back copies ...


> f) I am trying to make it as much type-safe as possible
> 
> But Since i don't have much experience with building Trees, i am not going
> to touch the .stg files of the Tree Parser. I need some-one to take it up,
> once i put out the first version.
> 
> Any suggestions?

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From ruslan_zasukhin at valentina-db.com  Tue Jan 24 08:37:00 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Tue, 24 Jan 2012 18:37:00 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <20120124124634.7uk4zy2m8wo848kk@webmail.kamm.cz>
Message-ID: <CB44AACC.F90E5%ruslan_zasukhin@valentina-db.com>

On 1/24/12 1:46 PM, "Ivan Brezina" <ibre5041 at ibrezina.net> wrote:

>>> 
>>> Don't use templates.
>>> 
>>> Sigh.
>>> 
>>> Jim
>>> 
>>> Jim,
>>     Have you had a look at Boost spirit parser? They have done the entire
>> thing with templates. I am only doing the runtime with templates. If you
>> are concerned with the compile time performance, i am assuring you that i
>> will limit the use of template not to stress the compiler.
>>      If there is something very obvious that i am missing, please let me
>> know.
>> 
>> Thanks,
>> Gokul.
>> 
> 
> Hi,
> I've been using spirit for about a year. Both versions "1" and "2".
> During that time I reported two bugs in gcc and then finally I moved
> to ANTLR.
> 
> Templates are nice, but on the other hand they must not be overused.

I also  do not like templates too much.

Only when you have COPY of code you need to use them

Where you need absolute need in templates ?

Boost is not a good example.

As for me, we do not use STD and Boost in our big project,
But yes we have few places where templates was needed.

Boost is crazy on templates, but exists yet interfaces, classes, aggregation
and other OO techniques...


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From ruslan_zasukhin at valentina-db.com  Tue Jan 24 08:38:26 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Tue, 24 Jan 2012 18:38:26 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <20120124124634.7uk4zy2m8wo848kk@webmail.kamm.cz>
Message-ID: <CB44AB22.F90E6%ruslan_zasukhin@valentina-db.com>

On 1/24/12 1:46 PM, "Ivan Brezina" <ibre5041 at ibrezina.net> wrote:

> When using spirit I ended up in a situation that my grammar could not
> be compiled at all
> using MSVC. While gcc had exponential memory requirements per
> grammar's rule length.
> 
> The approach boots uses is not applicable for complex grammars. The
> rest of the boost
> library like functors, binds ... etc are very useful.

VERY EXACTLY.

Sign under each word.




-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From artur.miguel at gmail.com  Tue Jan 24 08:58:15 2012
From: artur.miguel at gmail.com (artur.miguel)
Date: Tue, 24 Jan 2012 16:58:15 +0000
Subject: [antlr-interest] Call antlr from console
Message-ID: <CAKo-FZ27FM8La0VqsCg+e_RczoFAa3wQfr_cx+JMURQxP4nHAQ@mail.gmail.com>

Hi,

I want to call antlr from my bash, passing as arguments the grammar and a
code. How can I do this?

thanks

From boughtonp at gmail.com  Tue Jan 24 09:14:30 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Tue, 24 Jan 2012 17:14:30 +0000
Subject: [antlr-interest] Added ranges,
 escapes to [a-z] notation in lexer to honey badger
In-Reply-To: <B1D41C2F-D938-429E-8B2C-1275C2127A52@cs.usfca.edu>
References: <2BBDEC8D-98FA-420D-BE7E-8B1B42C7AE82@cs.usfca.edu>
	<20120122203900.6F37F3418469@www.antlr.org>
	<B1D41C2F-D938-429E-8B2C-1275C2127A52@cs.usfca.edu>
Message-ID: <CABX-UnDtVwLWcrs0kaNo=7+V8-caWyPN4RhxS4tmmbgUrKtf=w@mail.gmail.com>

Is the character class syntax only for use in isolation, or should it
work within a group of alternatives?

i.e. I tried to convert a rule in the form:
	~('a'|'x'|'q'|'f'|'aaa'|'bbb'|'ccc')+

into:
	~([axqf]|'aaa'|'bbb'|'ccc')+

...but it gives a "complete surprise" error on whatever the contents
of the brackets are.


Actually, I also tested ~[abc] and ~[a-c] syntax on its own, and they also say:
	'~' came as a complete surprise to me while looking for lexer rule
elementlexer rule element".

Trying it as just [abc] and [a-c] both work as expected.

From gokul007 at gmail.com  Tue Jan 24 09:20:34 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 25 Jan 2012 01:20:34 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CB44A9C5.F90E0%ruslan_zasukhin@valentina-db.com>
References: <CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<CB44A9C5.F90E0%ruslan_zasukhin@valentina-db.com>
Message-ID: <CAHMh4-bHrJSNYDNU57M9cJFxMhAt4DZ8hT_SgtWEm1W1Lia82Q@mail.gmail.com>

Hi Ruslan,


> > d) Its going to have Exception handling
>
> Sense?
>
>    My humble opinion is that, if we choose to work with a language, then
we should not design stuffs that go against the very purpose the language
was created. I hope you understand, when you say no to Exception handling,
you are saying no to destructors & stack based allocations. To me, its like
asking for a Java target, with GC disabled.


> > e) I am going to replace structures like string, vector, stack, hash map,
> > list etc with data structures in C++
>
> Very against !!


> Why ??
>
> Just use C-target  things...
>
> OR at least NOT use std::strings ...
>
> Same argument here. But I am designing things with a level of flexibility.
So it is going to be std::string by default, but you can just change the
compile time trait and provide a alternate implementation, where in you can
put ANTLR3_STRING/alternate impl of course, if you wish.

I am designing things without being based on boost. But i cannot design
something not based on std. Instead i would try to provide compile time
traits to replace the data structures with the user preferred one. I need
templates to provide this flexibility without runtime performance hit. I
will definitely make sure to keep compile time performance in mind.

Thanks,
Gokul.

From ruslan_zasukhin at valentina-db.com  Tue Jan 24 09:27:34 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Tue, 24 Jan 2012 19:27:34 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-bHrJSNYDNU57M9cJFxMhAt4DZ8hT_SgtWEm1W1Lia82Q@mail.gmail.com>
Message-ID: <CB44B6A6.F90F8%ruslan_zasukhin@valentina-db.com>

On 1/24/12 7:20 PM, "Gokulakannan Somasundaram" <gokul007 at gmail.com> wrote:

> I am designing things without being based on boost. But i cannot design
> something not based on std. Instead i would try to provide compile time traits
> to replace the data structures with the user preferred one. I need templates
> to provide this flexibility without runtime performance hit. I will definitely
> make sure to keep compile time performance in mind.

Don't know why you even mention compile time ...

RUNTIME time -- the only thing to worry about   :-)


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From gokul007 at gmail.com  Tue Jan 24 09:38:24 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 25 Jan 2012 01:38:24 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CB44B6A6.F90F8%ruslan_zasukhin@valentina-db.com>
References: <CAHMh4-bHrJSNYDNU57M9cJFxMhAt4DZ8hT_SgtWEm1W1Lia82Q@mail.gmail.com>
	<CB44B6A6.F90F8%ruslan_zasukhin@valentina-db.com>
Message-ID: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>

>
>
> Don't know why you even mention compile time ...
>
> RUNTIME time -- the only thing to worry about   :-)
>
>
>  Hmm... then why do you object to templates? Template Meta programming
costs compile time, but will produce code that can be optimized by a
compiler. Virtual functions/ Function pointers provide a run time
indirection, which cannot be optimized by a C++ compiler, so something like
method inlining cannot be achieved there( as compiler doesn't have that
info)

Compile Time is important for large project, as a developer will get
frustrated with long compile times. I grew frustrated with Boost Spirit for
the same reason. But i have high regards for the rest of the Boost library.

Thanks,
Gokul.

From boughtonp at gmail.com  Tue Jan 24 10:03:45 2012
From: boughtonp at gmail.com (Peter Boughton)
Date: Tue, 24 Jan 2012 18:03:45 +0000
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
Message-ID: <CABX-UnD1dveogBNTRCj9AWtNqhNmfcqd+Mmpi3mqM6ZnbGivYg@mail.gmail.com>

Is there a definition of what the "more" action is for?

>From experimenting, it seems to merge the marked token with the next
token, but only if it is placed AFTER any "type" actions - placed
before it is just ignored. However, the merged token always takes the
type of the final token (without the more action), not the original
one.


What I personally would like "more" to do is to only merge tokens of
the same type (or perhaps to specify a whitelist of token types which
can be merged).

This would mean I can have a simplified catch-all rule that produces a
single token, like so:

EVERYTHING_ELSE : . -> more(EVERYTHING_ELSE);

At the moment, if I do a more on that rule I end up with tokens like
"abc  " because the more doesn't stop until it reaches a rule without
more - so I get (in this example) appended whitespace and the wrong
type.


However, I don't know if that is the intended use of "more" or if
there's a different way to achieve what I'm after?

From parrt at cs.usfca.edu  Tue Jan 24 13:00:07 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 24 Jan 2012 13:00:07 -0800
Subject: [antlr-interest] Another update to Honey Badger
In-Reply-To: <CABX-UnD1dveogBNTRCj9AWtNqhNmfcqd+Mmpi3mqM6ZnbGivYg@mail.gmail.com>
References: <BFCE1CB6-3519-4DB5-9758-A5D33FCBE286@cs.usfca.edu>
	<CABX-UnD1dveogBNTRCj9AWtNqhNmfcqd+Mmpi3mqM6ZnbGivYg@mail.gmail.com>
Message-ID: <FDB76856-9680-489D-A0DD-EE2B3C3BE989@cs.usfca.edu>

"more" is used when you want the lexer is merge the current token's text with the next token. It basically says to continue without throwing out the current text. Useful for mode stuff.
T
On Jan 24, 2012, at 10:03 AM, Peter Boughton wrote:

> Is there a definition of what the "more" action is for?
> 
>> From experimenting, it seems to merge the marked token with the next
> token, but only if it is placed AFTER any "type" actions - placed
> before it is just ignored. However, the merged token always takes the
> type of the final token (without the more action), not the original
> one.
> 
> 
> What I personally would like "more" to do is to only merge tokens of
> the same type (or perhaps to specify a whitelist of token types which
> can be merged).
> 
> This would mean I can have a simplified catch-all rule that produces a
> single token, like so:
> 
> EVERYTHING_ELSE : . -> more(EVERYTHING_ELSE);
> 
> At the moment, if I do a more on that rule I end up with tokens like
> "abc  " because the more doesn't stop until it reaches a rule without
> more - so I get (in this example) appended whitespace and the wrong
> type.
> 
> 
> However, I don't know if that is the intended use of "more" or if
> there's a different way to achieve what I'm after?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From kierans777 at gmail.com  Tue Jan 24 16:28:05 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Wed, 25 Jan 2012 11:28:05 +1100
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
Message-ID: <4F1F4C95.5090202@gmail.com>

On 23/07/64 5:59 AM, Jim Idle wrote:
> Don't use templates.
>
> Sigh.
>
> Jim

One has to admire the amount of emotion conveyed in Jim's terse statements.

>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
>> Sent: Monday, January 23, 2012 8:12 PM
>> To: Terence Parr
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Antlr v4 - C++ target
>>
>> Hi All,
>>           I have decided to spend some time to come up with a C++ Target
>> for ANTLR 3.4, as i need it desperately for my project. I have started
>> working on it and i am going to come with a initial version within a
>> week or two.
>> My ideas
>> a) The details of the parser related functionality will be stolen from
>> C Target
>> b) It is not going to have function pointers/virtual functions. Its
>> going to be all templates
>> c) It is going to be a header-only library.
>> d) Its going to have Exception handling
>> e) I am going to replace structures like string, vector, stack, hash
>> map, list etc with data structures in C++
>> f) I am trying to make it as much type-safe as possible
>>
>> But Since i don't have much experience with building Trees, i am not
>> going to touch the .stg files of the Tree Parser. I need some-one to
>> take it up, once i put out the first version.
>>
>> Any suggestions?
>>
>> Thanks,
>> Gokul.

I'd be interested in seeing the end result as I'm writing a C++ program 
that uses the C parser to process my DSL.  The wrapper code is 
manageable but annoying.

That is in no way meant to put down the C runtime, I think Jim's done a 
fantastic job on that one!!

Cheers

From gokul007 at gmail.com  Tue Jan 24 19:49:27 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 25 Jan 2012 11:49:27 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <4F1F4C95.5090202@gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
	<4F1F4C95.5090202@gmail.com>
Message-ID: <CAHMh4-YjmX+h+=Nw1OBt8+g19ho7BfmEoTXjD-MF-4G+=ATO1w@mail.gmail.com>

>
> I'd be interested in seeing the end result as I'm writing a C++ program
> that uses the C parser to process my DSL.  The wrapper code is
> manageable but annoying.
>
>
Can you throw me more light on the same? Please elaborate on the annoying
portions of the wrapper code.

Thanks,
Gokul.

From donn.denman at gmail.com  Tue Jan 24 20:15:58 2012
From: donn.denman at gmail.com (Donn Denman)
Date: Tue, 24 Jan 2012 20:15:58 -0800
Subject: [antlr-interest] JavaScript target working?
Message-ID: <E4EB2150-DEA1-4BCF-BF63-6A504DD09BFA@gmail.com>

I've been trying to generate a parser using the Calculator.g grammar for v3, but the generated JavaScript appears to be broken.  Does anyone know if the JavaScript target is working with v 3.4?  Should I be using v4 if I want to use JavaScript?  

The error I get is a syntax error on the generated JS line.  This doesn't look like a valid object literal to me:

org.antlr.lang.augmentObject(CalculatorLexer, {
  : ,
  : ,
  : ,
  : ,
  : ,
  : ,
  : ,
  : ,
  : ,
  : ,
  : 
});

Advice on how to generate a working JavaScript-based parser would be appreciated!

From ruslan_zasukhin at valentina-db.com  Wed Jan 25 02:30:29 2012
From: ruslan_zasukhin at valentina-db.com (Ruslan Zasukhin)
Date: Wed, 25 Jan 2012 12:30:29 +0200
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>
Message-ID: <CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>

On 1/24/12 7:38 PM, "Gokulakannan Somasundaram" <gokul007 at gmail.com> wrote:

> 
> Don't know why you even mention compile time ...
> 
> RUNTIME time -- the only thing to worry about ? :-)
> 
> 
> ?Hmm... then why do you object to templates? Template Meta programming costs
> compile time, but will produce code that can be optimized by a compiler.

One of the best reasons have give you Ivan:

* some C++ compilers still have bugs about templates

* really huge grammars can catch limit of recursion

And so on. 

Problem not in design itself. Templates can be beauty.
Problems can be later


> Virtual functions/ Function pointers provide a run time indirection, which
> cannot be optimized by a C++ compiler, so something like method inlining
> cannot be achieved there( as compiler doesn't have that info)

Yes, right.

I understand that you want even avoid virtual calls
using traits  ... 

 
> Compile Time is important for large project, as a developer will get
> frustrated with long compile times. I grew frustrated with Boost Spirit for
> the same reason. But i have high regards for the rest of the Boost library.

Well, may be I have not see that ...
May be templates can take much longer than we are used ...

As I told we avoid templates in our projects. We prefer to use COM-like
models based on interfaces.


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From gokul007 at gmail.com  Wed Jan 25 03:21:25 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 25 Jan 2012 19:21:25 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>
References: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>
	<CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>
Message-ID: <CAHMh4-axZZMM5+TUj3QO-t7WOYUCGWGvmKbDiioq4uZezsy7PA@mail.gmail.com>

>
>
> One of the best reasons have give you Ivan:
>
> * some C++ compilers still have bugs about templates
>
Snip..


>
> * really huge grammars can catch limit of recursion
>

As i have already pointed out, i am not writing grammars using templates. I
am only writing the run-time using templates. so we will not hit this issue.

Thanks,
Gokul.

From asicaddress at gmail.com  Wed Jan 25 13:49:20 2012
From: asicaddress at gmail.com (A Z)
Date: Thu, 26 Jan 2012 03:49:20 +0600
Subject: [antlr-interest] Compiling 3.4 with maven
Message-ID: <CAP86aOf7EowhVNGWGNxg9C4xZP2=Jw3TGmmGF33b004LXTpCOA@mail.gmail.com>

Hello all,

Has anyone successfully compiled a version 3.4 .jar using maven? For me the
"Uber jar" compile fails with the following:

[INFO]
------------------------------------------------------------------------
[INFO] Skipping ANTLR Master build control POM 3.4
[INFO] This project has been banned from the build due to previous failures.
[INFO]
------------------------------------------------------------------------
[INFO]
------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] ANTLR Master build control POM 3.4 ................ SUCCESS [0.709s]
[INFO] Antlr 3.4 Runtime ................................. FAILURE [5.103s]
[INFO] ANTLR Grammar Tool v 3.4 .......................... SKIPPED
[INFO] Maven plugin for ANTLR V3.4 ....................... SKIPPED
[INFO] ANTLR gUnit v3.4 .................................. SKIPPED
[INFO] Maven plugin for gUnit ANTLR V3.4 ................. SKIPPED
[INFO] ANTLR3 Maven Archetype 3.4 ........................ SKIPPED
[INFO]
------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO]
------------------------------------------------------------------------
[INFO] Total time: 7.172s
[INFO] Finished at: Wed Jan 25 14:03:18 GMT+06:00 2012
[INFO] Final Memory: 14M/154M
[INFO]
------------------------------------------------------------------------
[ERROR] Failed to execute goal
org.apache.maven.plugins:maven-javadoc-plugin:2.8:jar (attach-javadocs) on
project antlr-runtime: MavenReportException: Error while creating archive:
[ERROR] Exit code: 1 -
.../antlr-3.4/runtime/Java/src/main/java/org/antlr/runtime/._MissingTokenException.java:1:
warning: unmappable character for encoding UTF-8
[ERROR] Mac OS X <lots of binary chars>
[ERROR] ^

The file in question is definitely not ASCII.


I then tried compiling /tool and this completes successfully but it does
not create an executable jar:
Failed to load Main-Class manifest attribute from
.../.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar

My only goal here is to modify the code generation templates. Any ideas?

From jimi at temporal-wave.com  Wed Jan 25 14:01:55 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 25 Jan 2012 14:01:55 -0800
Subject: [antlr-interest] Compiling 3.4 with maven
In-Reply-To: <CAP86aOf7EowhVNGWGNxg9C4xZP2=Jw3TGmmGF33b004LXTpCOA@mail.gmail.com>
References: <CAP86aOf7EowhVNGWGNxg9C4xZP2=Jw3TGmmGF33b004LXTpCOA@mail.gmail.com>
Message-ID: <5e8acfb3d9102f39fd56eba05f23c585@mail.gmail.com>

Works fine here - there is likely something wrong with your setup. What
version of maven are you using? What OS? Did you try clearing the .m2
file. Did you follow the instructions in the BUILD.TXT file, or did you
just type 'mvn' and hoped it would work?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of A Z
> Sent: Wednesday, January 25, 2012 1:49 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Compiling 3.4 with maven
>
> Hello all,
>
> Has anyone successfully compiled a version 3.4 .jar using maven? For me
> the "Uber jar" compile fails with the following:
>
> [INFO]
> -----------------------------------------------------------------------
> -
> [INFO] Skipping ANTLR Master build control POM 3.4 [INFO] This project
> has been banned from the build due to previous failures.
> [INFO]
> -----------------------------------------------------------------------
> -
> [INFO]
> -----------------------------------------------------------------------
> -
> [INFO] Reactor Summary:
> [INFO]
> [INFO] ANTLR Master build control POM 3.4 ................ SUCCESS
> [0.709s] [INFO] Antlr 3.4 Runtime .................................
> FAILURE [5.103s] [INFO] ANTLR Grammar Tool v 3.4
> .......................... SKIPPED [INFO] Maven plugin for ANTLR V3.4
> ....................... SKIPPED [INFO] ANTLR gUnit v3.4
> .................................. SKIPPED [INFO] Maven plugin for
> gUnit ANTLR V3.4 ................. SKIPPED [INFO] ANTLR3 Maven
> Archetype 3.4 ........................ SKIPPED [INFO]
> -----------------------------------------------------------------------
> -
> [INFO] BUILD FAILURE
> [INFO]
> -----------------------------------------------------------------------
> -
> [INFO] Total time: 7.172s
> [INFO] Finished at: Wed Jan 25 14:03:18 GMT+06:00 2012 [INFO] Final
> Memory: 14M/154M [INFO]
> -----------------------------------------------------------------------
> -
> [ERROR] Failed to execute goal
> org.apache.maven.plugins:maven-javadoc-plugin:2.8:jar (attach-javadocs)
> on project antlr-runtime: MavenReportException: Error while creating
> archive:
> [ERROR] Exit code: 1 -
> .../antlr-
> 3.4/runtime/Java/src/main/java/org/antlr/runtime/._MissingTokenExceptio
> n.java:1:
> warning: unmappable character for encoding UTF-8 [ERROR] Mac OS X <lots
> of binary chars> [ERROR] ^
>
> The file in question is definitely not ASCII.
>
>
> I then tried compiling /tool and this completes successfully but it
> does not create an executable jar:
> Failed to load Main-Class manifest attribute from
> .../.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar
>
> My only goal here is to modify the code generation templates. Any
> ideas?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From asicaddress at gmail.com  Wed Jan 25 14:04:24 2012
From: asicaddress at gmail.com (A Z)
Date: Thu, 26 Jan 2012 04:04:24 +0600
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-axZZMM5+TUj3QO-t7WOYUCGWGvmKbDiioq4uZezsy7PA@mail.gmail.com>
References: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>
	<CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>
	<CAHMh4-axZZMM5+TUj3QO-t7WOYUCGWGvmKbDiioq4uZezsy7PA@mail.gmail.com>
Message-ID: <CAP86aOf4A73TvB+SVQyB2N4KWudG+5TAxdo3StR+Roq09WKCmw@mail.gmail.com>

Hi Gokulakannan,
  I'm curious what your specific goals are with this project as the
features you indicated seem to be mostly language usability oriented. I see
many speed/memory/feature tradeoffs in the lexer design.

From ronalbury at gmail.com  Wed Jan 25 14:31:26 2012
From: ronalbury at gmail.com (Ronald Albury)
Date: Wed, 25 Jan 2012 17:31:26 -0500
Subject: [antlr-interest] Code generation problem?
Message-ID: <CAGZ5p6J9UU+pckJtVre75HOFDhWXBGsLDVhjXPVZRkQEskp3UQ@mail.gmail.com>

Please help!

I believe the following section of grammar is valid:

stateSection returns [State result] :
    STATE ztate = stateAttrs
    {
        $result = ztate;
    }
    ( screen = screenSection
    {
        $result.setScreen(screen);
    })?
    ( menu = menuSection
    {
        $result.setMenu(menu);
    })?
   ( periodic = periodicSection
   {
       $result.setPeriodic(periodic);
   })?
   ENDSTATE
   ;

However, there is an issue with the generated code (I have removed some of
the blank lines).  It creates variables for result, ztate, and screen, but
does not correctly generate code for menu and periodic:

  public final State stateSection() throws RecognitionException {
        State result = null;
        State ztate =null;
        Screen screen =null;
        try {
            // C:\\csc\\P\\Pet\\Pet.g:121:37: ( STATE ztate= stateAttrs
(screen= screenSection )? (menu= menuSection )? (periodic= periodicSection
)? ENDSTATE )
            // C:\\csc\\P\\Pet\\Pet.g:122:2: STATE ztate= stateAttrs
(screen= screenSection )? (menu= menuSection )? (periodic= periodicSection
)? ENDSTATE
            {
            match(input,STATE,FOLLOW_STATE_in_stateSection935);
            pushFollow(FOLLOW_stateAttrs_in_stateSection941);
            ztate=stateAttrs();
            state._fsp--;
                 result = ztate;

            // C:\\csc\\P\\Pet\\Pet.g:126:2: (screen= screenSection )?
            int alt2=2;
            int LA2_0 = input.LA(1);
            if ( (LA2_0==SCREEN) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // C:\\csc\\P\\Pet\\Pet.g:126:4: screen= screenSection
                    {
                    pushFollow(FOLLOW_screenSection_in_stateSection953);
                    screen=screenSection();
                    state._fsp--;
                      result.setScreen(screen);
                    }
                    break;
            }

            // C:\\csc\\P\\Pet\\Pet.g:130:2: (menu= menuSection )?
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==MENU) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // C:\\csc\\P\\Pet\\Pet.g:130:4: menu= menuSection
                    {
                    pushFollow(FOLLOW_menuSection_in_stateSection968);
                    menuSection();
                    state._fsp--;
                      result.setMenu(menu);

                    }
                    break;
            }
            // C:\\csc\\P\\Pet\\Pet.g:134:2: (periodic= periodicSection )?
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==PERIODIC) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // C:\\csc\\P\\Pet\\Pet.g:134:4: periodic=
periodicSection
                    {
                    pushFollow(FOLLOW_periodicSection_in_stateSection983);
                    periodicSection();
                    state._fsp--;
                      result.setPeriodic(periodic);

                    }
                    break;
            }
            match(input,ENDSTATE,FOLLOW_ENDSTATE_in_stateSection992);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
         // do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "stateSection"

From jimi at temporal-wave.com  Wed Jan 25 14:33:43 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 25 Jan 2012 14:33:43 -0800
Subject: [antlr-interest] Code generation problem?
In-Reply-To: <CAGZ5p6J9UU+pckJtVre75HOFDhWXBGsLDVhjXPVZRkQEskp3UQ@mail.gmail.com>
References: <CAGZ5p6J9UU+pckJtVre75HOFDhWXBGsLDVhjXPVZRkQEskp3UQ@mail.gmail.com>
Message-ID: <3adcbe446f0cc2dbec4cc0cadd7d5e55@mail.gmail.com>

You need to refer to variables as $menu etc.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ronald Albury
> Sent: Wednesday, January 25, 2012 2:31 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Code generation problem?
>
> Please help!
>
> I believe the following section of grammar is valid:
>
> stateSection returns [State result] :
>     STATE ztate = stateAttrs
>     {
>         $result = ztate;
>     }
>     ( screen = screenSection
>     {
>         $result.setScreen(screen);
>     })?
>     ( menu = menuSection
>     {
>         $result.setMenu(menu);
>     })?
>    ( periodic = periodicSection
>    {
>        $result.setPeriodic(periodic);
>    })?
>    ENDSTATE
>    ;
>
> However, there is an issue with the generated code (I have removed some
> of the blank lines).  It creates variables for result, ztate, and
> screen, but does not correctly generate code for menu and periodic:
>
>   public final State stateSection() throws RecognitionException {
>         State result = null;
>         State ztate =null;
>         Screen screen =null;
>         try {
>             // C:\\csc\\P\\Pet\\Pet.g:121:37: ( STATE ztate= stateAttrs
> (screen= screenSection )? (menu= menuSection )? (periodic=
> periodicSection )? ENDSTATE )
>             // C:\\csc\\P\\Pet\\Pet.g:122:2: STATE ztate= stateAttrs
> (screen= screenSection )? (menu= menuSection )? (periodic=
> periodicSection )? ENDSTATE
>             {
>             match(input,STATE,FOLLOW_STATE_in_stateSection935);
>             pushFollow(FOLLOW_stateAttrs_in_stateSection941);
>             ztate=stateAttrs();
>             state._fsp--;
>                  result = ztate;
>
>             // C:\\csc\\P\\Pet\\Pet.g:126:2: (screen= screenSection )?
>             int alt2=2;
>             int LA2_0 = input.LA(1);
>             if ( (LA2_0==SCREEN) ) {
>                 alt2=1;
>             }
>             switch (alt2) {
>                 case 1 :
>                     // C:\\csc\\P\\Pet\\Pet.g:126:4: screen=
> screenSection
>                     {
>
> pushFollow(FOLLOW_screenSection_in_stateSection953);
>                     screen=screenSection();
>                     state._fsp--;
>                       result.setScreen(screen);
>                     }
>                     break;
>             }
>
>             // C:\\csc\\P\\Pet\\Pet.g:130:2: (menu= menuSection )?
>             int alt3=2;
>             int LA3_0 = input.LA(1);
>             if ( (LA3_0==MENU) ) {
>                 alt3=1;
>             }
>             switch (alt3) {
>                 case 1 :
>                     // C:\\csc\\P\\Pet\\Pet.g:130:4: menu= menuSection
>                     {
>                     pushFollow(FOLLOW_menuSection_in_stateSection968);
>                     menuSection();
>                     state._fsp--;
>                       result.setMenu(menu);
>
>                     }
>                     break;
>             }
>             // C:\\csc\\P\\Pet\\Pet.g:134:2: (periodic= periodicSection
> )?
>             int alt4=2;
>             int LA4_0 = input.LA(1);
>             if ( (LA4_0==PERIODIC) ) {
>                 alt4=1;
>             }
>             switch (alt4) {
>                 case 1 :
>                     // C:\\csc\\P\\Pet\\Pet.g:134:4: periodic=
> periodicSection
>                     {
>
> pushFollow(FOLLOW_periodicSection_in_stateSection983);
>                     periodicSection();
>                     state._fsp--;
>                       result.setPeriodic(periodic);
>
>                     }
>                     break;
>             }
>             match(input,ENDSTATE,FOLLOW_ENDSTATE_in_stateSection992);
>             }
>         }
>         catch (RecognitionException re) {
>             reportError(re);
>             recover(input,re);
>         }
>         finally {
>          // do for sure before leaving
>         }
>         return result;
>     }
>     // $ANTLR end "stateSection"
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From isabelle.perseil at enst.fr  Wed Jan 25 15:09:20 2012
From: isabelle.perseil at enst.fr (Isabelle Perseil)
Date: Thu, 26 Jan 2012 00:09:20 +0100
Subject: [antlr-interest]  CALL FOR PAPERS : UML&FM 2012
Message-ID: <43afb794226739ac4a2973a0262bd1c2.squirrel@webmail1.telecom-paristech.fr>

**********************************************************************
                  CALL FOR PAPERS :  UML&FM 2012
   5th INTERNATIONAL WORKSHOP ON UML&FORMAL METHODS
   http://www-public.int-evry.fr/~gibson/Workshops/UML-FM-2012.html

              Workshop held in conjunction with FM 2012
                  The 18th International Symposium on
                           Formal Methods
                        http://fm2012.cnam.fr/
                          August 27th, 2012
                           Paris, France
************************************************************************

                    Submission deadline: March 5th,  2012
                    -------------------------------------


Many interest groups from a research perspective are in favour of the
creation of this workshop.

For more than a decade now, the two communities of UML and formal methods
have been working together to produce a simultaneously practical (via UML)
and rigorous (via formal methods) approach to software engineering.

UML is the de facto standard for modelling various aspects of software
systems in both industry and academia, despite the inconvenience that its
current specification is complex and its syntax imprecise.

The fact that the UML semantics is too informal have led many researchers
to formalize it with all kinds of existing formal languages, like OCL, Z,
B, TLA+, CSP, VDM, Petri Nets, UPPAAL, HOL, Coq, PVS etc.

This fifth edition of the workshop will be open to various subjects as the
main objective is to encourage new initiatives of building bridges between
informal, semi-formal and formal notations.


Topics:
======

This workshop seeks contributions from researchers and practitioners
interested in all aspects of integrating UML and formal methods. To this
end, we solicit papers (no more than 8 pages long) related to, but not
limited to, the following principal topics:

* Consistent specifications, model transformations (QVT technologies,
  transformation repositories). Transformations to make models more
  analyzable so as to make them executable.

* Automation of traceability through transformations

* Refinement techniques: developing detailed design from a UML abstract
  specification

* Refinement of OCL specification as well

* Formal reasoning on models for code generation

* Technologies for compositional verification of models

* Specification of a formal semantics for the UML.
  Giving an abstract syntax to UML diagrams

* Formal validation and verification of software

* Co-modeling methods formal/informal mapping techniques

* End-to-end methodologies or software process engineering,correct-
  by-construction design providing and supporting tools for safety-
  critical  embedded systems design


Workshop Format
===============
This full-day workshop will consist of an introduction of the topic by the
workshop organizers, presentations of accepted papers, and in depth
discussion of previously identified subjects emerging from the
submissions. A summary of the discussions will be made available.


Submission and Publication
==========================
To contribute, please send a position paper or a technical paper at:
https://www.easychair.org/account/signin.cgi?conf=umlfm2012
Two versions of the papers will be requested.
Short versions are required for the workshop participation.

Only the best papers of extended versions will be published in a special
issue of the Formal Aspects of  Computing journal.

- 1/ Short versions will be published in the ACM Software Engineering
Notes (SEN), July 2012 (all the selected papers)

Papers should not exceed 8 pages. Submitted manuscripts should be in
English and formatted in the style of the SEN Format.
http://www.stidolph.com/SEN/index.html
Preferably, submissions should be in PDF format.

- 2/ Extended versions of the best papers will be published in the Formal
Aspects of  Computing journal, inside a  special issue
These extended papers should not exceed 20 pages, must be based on the
same results as the original paper but different.
Submitted manuscripts should be in English and formatted in the style of
the Formal Aspects of  Computing Springer Format. Preferably, submissions
should be in PDF format.


IMPORTANT DATES
===============
Submission deadline: March 5th, 2012
All Notification of acceptance: May 7th, 2012
Final copy: June 4th, 2012
Workshop date: August 27th, 2012


Organizers
==========

Organizational sponsors :
IEEE France Section
OMG      (http://www.omg.org/)
SEE

Organizers and Programme Steering committee:

Sebastien Gerard (CEA-LIST, France)
Paul Gibson (Telecom SudParis, France)
Dominique Mery (LORIA, France)
Isabelle Perseil (Inserm, France)
Jim Woodcock (University of York, United Kingdom)

Program Committee:

* Lukman Ab Rahim (Lancaster University, United Kingdom)
* Nazareno Aguirre (Universidad Nacional de Rio Cuarto, Argentina)
* Marc Aiguier (Ecole Centrale Paris, France)
* Yamine Ait Ameur (LISI / ENSMA, France)
* Pascal Andre (LINA, University of Nantes, France)
* Luciano Baresi (Politecnico di Milano, Italia)
* Kamel Barkaoui (CEDRIC-CNAM, France)
* David Clark (UCL, United Kingdom)
* Vincent Englebert (University of Namur, Belgium)
* Huascar Espinoza (Tecnalia, Spain)
* Sebastien Gerard (CEA-LIST, France)
* Frederic Gervais (Universite Paris-Est, LACL, France)
* Paul Gibson (Telecom SudParis, France)
* Martin Gogolla (University of Bremen, Germany)
* Jerome Hugues (ISAE, France)
* Paul Krause (University of Surrey, United Kingdom)
* Kevin Lano (Kings College London, United Kingdom)
* Manuel Mazzara (Newcastle University, United Kingdom)
* Stephen J.Mellor (Accelerated Technologies, Tucson AZ, USA)
* Sun Meng (Peking University, China)
* Dominique Mery (LORIA, France)
* Alexandre Mota (Universidade Federal de Pernambuco, Brazil)
* Elie Najm (Telecom Paristech, France)
* Isabelle Perseil (Inserm, France)
* Franck Pommereau (IBISC, University of Evry, France)
* Shengchao Qin (Teesside University, United Kingdom)
* Arend Rensink (University of Twente, Netherlands)
* Thomas Robert (Telecom ParisTech, France)
* Douglas Schmidt (Vanderbilt University, USA)
* Pierre-Yves Schobbens (University of Namur, Belgium)
* Bran Selic (Malina Software Corp, Canada)
* Francoise Simonot Lion (LORIA, France)
* Neeraj-Kumar Singh (University of York, United Kingdom)
* Volker Stolz (United Nations University, Norway)
* Jing Sun (University of Auckland, New Zealand)
* Bedir Tekinerdogan (Bilkent University, Turkey)
* Tatsuhiro Tsuchiya (Osaka University, Japan)
* Naoyasu Ubayashi (Kyushu Institute of Technology, Japan)
* Stefan Van Baelen (Catholic University of Leuven, Belgium)
* Tullio Vardanega (University of Padua, Italia)
* Francois Vernadat (CNRS-LAAS, France)
* Eugenio Villar (Universidad de Cantabria, Spain)
* Tim Weilkiens (OOSE Innovative Informatik, Germany)
* Sergio Yovine (Universidad de Buenos Aires, Argentina)



From gokul007 at gmail.com  Wed Jan 25 21:47:49 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Thu, 26 Jan 2012 13:47:49 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAP86aOf4A73TvB+SVQyB2N4KWudG+5TAxdo3StR+Roq09WKCmw@mail.gmail.com>
References: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>
	<CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>
	<CAHMh4-axZZMM5+TUj3QO-t7WOYUCGWGvmKbDiioq4uZezsy7PA@mail.gmail.com>
	<CAP86aOf4A73TvB+SVQyB2N4KWudG+5TAxdo3StR+Roq09WKCmw@mail.gmail.com>
Message-ID: <CAHMh4-aocHwBWPFQe8+PteiPxdto1NAEgOduBVM9LP=Rn+EAiw@mail.gmail.com>

The specific goal is to create a Parser infrastructure for ANTLR 3.4 in
C++. Nothing more specific than that. Of course replacing function pointers
was my other aim, as it saves both execution time and memory.

" I see many speed/memory/feature tradeoffs in the lexer design. "
     Can you be more specific? I am not going to do any new lexer design.
Just going to translate the one which is already present. Or do you mean
that by implementing the changes i suggested, i am compromising on
speed/memory/feature?

Thanks,
Gokul.

From kierans777 at gmail.com  Wed Jan 25 23:35:20 2012
From: kierans777 at gmail.com (Kieran Simpson)
Date: Thu, 26 Jan 2012 18:35:20 +1100
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-YjmX+h+=Nw1OBt8+g19ho7BfmEoTXjD-MF-4G+=ATO1w@mail.gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>	<4F1F4C95.5090202@gmail.com>
	<CAHMh4-YjmX+h+=Nw1OBt8+g19ho7BfmEoTXjD-MF-4G+=ATO1w@mail.gmail.com>
Message-ID: <4F210238.1020601@gmail.com>

On 23/07/64 5:59 AM, Gokulakannan Somasundaram wrote:
>>
>> I'd be interested in seeing the end result as I'm writing a C++ program
>> that uses the C parser to process my DSL.  The wrapper code is
>> manageable but annoying.
>>
>>
> Can you throw me more light on the same? Please elaborate on the annoying
> portions of the wrapper code.

Things like having a C compiled grammar call back into C++ code. 
Namespaces and other C++ constructs get in the way.  Wrapper code 
consists of a lot of typedefs and function definitions to customise the 
behaviour of the generated parser/lexer.  Being able to subclass is one 
bonus of a C++ runtime.

Cheers,

From gokul007 at gmail.com  Wed Jan 25 23:47:39 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Thu, 26 Jan 2012 15:47:39 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <4F210238.1020601@gmail.com>
References: <1326273122.56433.YahooMailNeo@web125501.mail.ne1.yahoo.com>
	<CB333A9C.F85C5%ruslan_zasukhin@valentina-db.com>
	<CAP86aOetpxfjy=_LX-RUx65_jYQwhuKeqqzf=aFc8DEJeUvwzw@mail.gmail.com>
	<2319e6f2a68bd3a47a5e31085af8f708@mail.gmail.com>
	<CAP86aOcFwgKgvXxo2mymrXJOPRp019uUkb3n3obZmJ04i87NAA@mail.gmail.com>
	<CAHMh4-auenn29+xpRBObg8_qVtoXMkm_uePV0V3PB4CEoaDyFg@mail.gmail.com>
	<CAP86aOfXwPSCVX9C_8G1=qv1xt1Hhcgs5xY6C4o=akMHjjaD+g@mail.gmail.com>
	<D0BB233D-1988-46F4-813F-2CB1C5F8DE0F@cs.usfca.edu>
	<CAHMh4-YbR9aDNCQC7R8CWkMR1+CVpK7FnXtoAZoaXaJimw6rrQ@mail.gmail.com>
	<CAHMh4-bBD78kNnvc1tyq_DhYZqTJxOEAOtxVPppB+gVvk2sEHg@mail.gmail.com>
	<6e97e315c111dc7295d220228fbfbd81@mail.gmail.com>
	<4F1F4C95.5090202@gmail.com>
	<CAHMh4-YjmX+h+=Nw1OBt8+g19ho7BfmEoTXjD-MF-4G+=ATO1w@mail.gmail.com>
	<4F210238.1020601@gmail.com>
Message-ID: <CAHMh4-YjFBEr5XvE2ZCFRqgP+shZqjSTMoNpu4MxvR8qpYerZg@mail.gmail.com>

>
> Things like having a C compiled grammar call back into C++ code.
> Namespaces and other C++ constructs get in the way.  Wrapper code
> consists of a lot of typedefs and function definitions to customise the
> behaviour of the generated parser/lexer.  Being able to subclass is one
> bonus of a C++ runtime.
>
>
Thanks for the explanation. I just wanted to make sure, the new grammar
doesn't provide the same issues.

Gokul.

From emilie.balland at inria.fr  Thu Jan 26 01:41:42 2012
From: emilie.balland at inria.fr (Emilie Balland)
Date: Thu, 26 Jan 2012 10:41:42 +0100
Subject: [antlr-interest] LDTA 2012: call for participation
Message-ID: <2333E2E7-54CB-4C18-B4EA-946E75BF8EF3@inria.fr>

***************************************************************************************
                                      LDTA 2012 Call for Participation

                                      12th International Workshop on
                       Language Descriptions, Tools, and Applications

                                                   http://ldta.info

                                                Tallinn, Estonia 
                                        March 31 & April 1, 2012
                                            an ETAPS workshop
***************************************************************************************


You are cordially invited to LDTA'12. LDTA is an application and tool-oriented
workshop focused on grammarware - software based on grammars in some form.
Grammarware applications are typically language processing applications and
traditional examples include parsers, program analyzers, optimizers and
translators. 

-- REGISTRATION--

To register for LDTA'12, please follow the instructions at:

http://www.etaps.org/2012/registration

The early registration deadline is January 29, 2012.

--HOTEL INFORMATION--

LDTA will be co-located with ETAPS. Please visit ETAPS's web site to get more
information for the accomodation (http://www.etaps.org/2012/accommodation).
Special rates and/or block bookings for ETAPS 2012 participants at a number of 
central hotels also expire Sunday, 29 January 2012.

--PROGRAM--

The workshop will include an invited talk by Janis Voigtl?nder (University of
Bonn, Germany) and the presentation of the following technical papers:

- Sebastian Erdweg, Paolo G. Giarrusso and Tillmann Rendel. Language Composition
 Untangled
- Johnni Winther. Improving Precision of Generated ASTs
- Tobi Vollebregt, Lennart C. L. Kats and Eelco Visser. Declarative
 Specification of Template-Based Textual Editors
- Marcos Viera, Doaitse Swierstra and Atze Dijkstra. Grammar Fragments Fly
 First-Class
- Marcos Viera, Doaitse Swierstra and Arie Middelkoop. UUAG Meets AspectAG: How
 to make Attribute Grammars First-Class
- Daniel Lincke and Sibylle Schupp. From HOT to COOL - Transforming Higher-Order
 Typed Languages to Concept-Constrained Object-Oriented Languages
- Maartje De Jonge and Eelco Visser. A Language Generic Solution for Name
 Binding Preservation in Refactorings
- Vadim Zaytsev. Notation-Parametric Grammar Recovery
- Jean-Christophe Bach, Pierre-Etienne Moreau, Marc Pantel and Xavier Cr?gut.
 Models Transformations with Tom

The workshop will also feature presentations devoted to a de-brief of the 2011
tool challenge, based on the paper currently being prepared by the challenge
participants.

From Philippe.Laval at asg.com  Thu Jan 26 02:58:46 2012
From: Philippe.Laval at asg.com (Philippe Laval)
Date: Thu, 26 Jan 2012 11:58:46 +0100
Subject: [antlr-interest] Problem writting my grammar
Message-ID: <D51ACDF0BA24DD4583BE23C5BBCB03C10E34ABFE69@frpar8mail.asg.com>

Hello,

I am beginner with Antl and have this problem to solve. I want to parse an output of a tool like:

========= text to parse =========

FRU Device Description : Builtin FRU Device (ID 0)
Board Mfg Date        : Mon Jan  1 00:00:00 1996

========= grammar =========

grammar Test2;

command :    fru (NEWLINE board)? NEWLINE? EOF
                               ;

fru          :              WS? 'FRU Device Description' WS ':' WS CHAINE WS? ;
board    :              WS? 'Board Mfg Date' WS ':' WS CHAINE WS?  ;

NEWLINE
    : '\r'? '\n'
    ;
WS
    : (' '|'\t'|'\n'|'\r')+
    ;

CHAINE                : (~('\r'|'\n'))+
;

==========

I tried this grammar in ANTLWorks 1.4.3 but get a "MismatchedTokenException (0!0) under the fru node (in the Parse Tree).
Can someone give me a hint ?

In the past, I have developed a library using regular expression to parse tool output and I hoped Antlr could solve this.
Now I doubt this is the best solution since I will have to write a rule for each line (even the one I don't need) and I will have the "Device not present (Timeout)" to handle.
Can Antlr handle this problem ?


FRU Device Description : Builtin FRU Device (ID 0)
Board Mfg Date        : Mon Jan  1 00:00:00 1996

FRU Device Description : Storage (ID 1)
Device not present (Timeout)

FRU Device Description : PS 1 (ID 2)
Board Mfg Date        : Thu May  5 22:26:00 2011



Thanks
Philippe



From finis at in.tum.de  Thu Jan 26 07:47:09 2012
From: finis at in.tum.de (Jan Finis)
Date: Thu, 26 Jan 2012 16:47:09 +0100
Subject: [antlr-interest] Shorthand notation for separated lists
Message-ID: <4F21757D.8020302@in.tum.de>

Hi,

is there a way to write an optional list of tokens separated by a 
separator token (like function parameters) more concise than this:

[ id ("," id)* ]

if not, I would suggest introducing such a notation, because such things 
are really frequently used. For example:

(id ** ",") is automatically expanded to [ id ("," id)* ] and
(id ++ ",") is automatically expaned to id ("," id)*

Regards,
Jan

From asicaddress at gmail.com  Thu Jan 26 10:49:03 2012
From: asicaddress at gmail.com (A Z)
Date: Fri, 27 Jan 2012 00:49:03 +0600
Subject: [antlr-interest] Compiling 3.4 with maven
In-Reply-To: <5e8acfb3d9102f39fd56eba05f23c585@mail.gmail.com>
References: <CAP86aOf7EowhVNGWGNxg9C4xZP2=Jw3TGmmGF33b004LXTpCOA@mail.gmail.com>
	<5e8acfb3d9102f39fd56eba05f23c585@mail.gmail.com>
Message-ID: <CAP86aOdJs3f+XCzo2dvQybhKorsOEzbT9bxChH3QNfgKnjP0+w@mail.gmail.com>

I'm using 3.0.3

$ mvn -v
/usr/lib/jvm/java
Apache Maven 3.0.3 (rNON-CANONICAL_2011-10-11_11-56_mockbuild; 2011-10-11
17:56:36+0600)
Maven home: /usr/share/maven
Java version: 1.6.0_22, vendor: Sun Microsystems Inc.
Java home: /usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.2.1-3.fc16.x86_64", arch: "amd64", family:
"unix"


I found the cause of this problem. antlr-3.4.tar.gz contains metadata files
created by OS X, all prefixed with '._' . Since I'm on Linux, maven tries
to compile them and fails. Deleting all those files allows all sub-modules
to compile, except for one.


[INFO]
------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] ANTLR Master build control POM 3.4 ................ FAILURE
[1:02.810s]
[INFO] Antlr 3.4 Runtime ................................. SUCCESS
[1:27.439s]
[INFO] ANTLR Grammar Tool v 3.4 .......................... SUCCESS [26.532s]
[INFO] Maven plugin for ANTLR V3.4 ....................... SUCCESS [28.607s]
[INFO] ANTLR gUnit v3.4 .................................. SUCCESS [11.916s]
[INFO] Maven plugin for gUnit ANTLR V3.4 ................. SUCCESS [1.777s]
[INFO] ANTLR3 Maven Archetype 3.4 ........................ SUCCESS [7.148s]
[INFO]
------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO]
------------------------------------------------------------------------
[INFO] Total time: 5:39.210s
[INFO] Finished at: Thu Jan 26 12:33:37 GMT+06:00 2012
[INFO] Final Memory: 24M/57M
[INFO]
------------------------------------------------------------------------
[ERROR] Failed to execute goal
org.apache.maven.plugins:maven-assembly-plugin:2.2-beta-5:assembly
(default-cli) on project antlr-master: Error reading assemblies: No
assembly descriptors found. -> [Help 1]


Any ideas getting around this?
Thanks.



On Thu, Jan 26, 2012 at 4:01 AM, Jim Idle <jimi at temporal-wave.com> wrote:

> Works fine here - there is likely something wrong with your setup. What
> version of maven are you using? What OS? Did you try clearing the .m2
> file. Did you follow the instructions in the BUILD.TXT file, or did you
> just type 'mvn' and hoped it would work?
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of A Z
> > Sent: Wednesday, January 25, 2012 1:49 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Compiling 3.4 with maven
> >
> > Hello all,
> >
> > Has anyone successfully compiled a version 3.4 .jar using maven? For me
> > the "Uber jar" compile fails with the following:
> >
> > [INFO]
> > -----------------------------------------------------------------------
> > -
> > [INFO] Skipping ANTLR Master build control POM 3.4 [INFO] This project
> > has been banned from the build due to previous failures.
> > [INFO]
> > -----------------------------------------------------------------------
> > -
> > [INFO]
> > -----------------------------------------------------------------------
> > -
> > [INFO] Reactor Summary:
> > [INFO]
> > [INFO] ANTLR Master build control POM 3.4 ................ SUCCESS
> > [0.709s] [INFO] Antlr 3.4 Runtime .................................
> > FAILURE [5.103s] [INFO] ANTLR Grammar Tool v 3.4
> > .......................... SKIPPED [INFO] Maven plugin for ANTLR V3.4
> > ....................... SKIPPED [INFO] ANTLR gUnit v3.4
> > .................................. SKIPPED [INFO] Maven plugin for
> > gUnit ANTLR V3.4 ................. SKIPPED [INFO] ANTLR3 Maven
> > Archetype 3.4 ........................ SKIPPED [INFO]
> > -----------------------------------------------------------------------
> > -
> > [INFO] BUILD FAILURE
> > [INFO]
> > -----------------------------------------------------------------------
> > -
> > [INFO] Total time: 7.172s
> > [INFO] Finished at: Wed Jan 25 14:03:18 GMT+06:00 2012 [INFO] Final
> > Memory: 14M/154M [INFO]
> > -----------------------------------------------------------------------
> > -
> > [ERROR] Failed to execute goal
> > org.apache.maven.plugins:maven-javadoc-plugin:2.8:jar (attach-javadocs)
> > on project antlr-runtime: MavenReportException: Error while creating
> > archive:
> > [ERROR] Exit code: 1 -
> > .../antlr-
> > 3.4/runtime/Java/src/main/java/org/antlr/runtime/._MissingTokenExceptio
> > n.java:1:
> > warning: unmappable character for encoding UTF-8 [ERROR] Mac OS X <lots
> > of binary chars> [ERROR] ^
> >
> > The file in question is definitely not ASCII.
> >
> >
> > I then tried compiling /tool and this completes successfully but it
> > does not create an executable jar:
> > Failed to load Main-Class manifest attribute from
> > .../.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar
> >
> > My only goal here is to modify the code generation templates. Any
> > ideas?
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From gokul007 at gmail.com  Thu Jan 26 12:32:40 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Fri, 27 Jan 2012 04:32:40 +0800
Subject: [antlr-interest] Compiling 3.4 with maven
In-Reply-To: <CAP86aOdJs3f+XCzo2dvQybhKorsOEzbT9bxChH3QNfgKnjP0+w@mail.gmail.com>
References: <CAP86aOf7EowhVNGWGNxg9C4xZP2=Jw3TGmmGF33b004LXTpCOA@mail.gmail.com>
	<5e8acfb3d9102f39fd56eba05f23c585@mail.gmail.com>
	<CAP86aOdJs3f+XCzo2dvQybhKorsOEzbT9bxChH3QNfgKnjP0+w@mail.gmail.com>
Message-ID: <CAHMh4-Y3D7OEsM66aCXQBj8Qpn0QHX2rFm9n5sQX_ODrBvYCsg@mail.gmail.com>

Sometime back i had the same issue. Try this.
  In Build.txt, the command mentioned for building Uber jar is mentioned
incorrectly and it is not working fine. But in the pom.xml, it is mentioned
correctly. Please do update the Build.txt also with the same.
"mvn -Duber -DskipTests package assembly:assembly"

Gokul.

On Fri, Jan 27, 2012 at 2:49 AM, A Z <asicaddress at gmail.com> wrote:

> I'm using 3.0.3
>
> $ mvn -v
> /usr/lib/jvm/java
> Apache Maven 3.0.3 (rNON-CANONICAL_2011-10-11_11-56_mockbuild; 2011-10-11
> 17:56:36+0600)
> Maven home: /usr/share/maven
> Java version: 1.6.0_22, vendor: Sun Microsystems Inc.
> Java home: /usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre
> Default locale: en_US, platform encoding: UTF-8
> OS name: "linux", version: "3.2.1-3.fc16.x86_64", arch: "amd64", family:
> "unix"
>
>
> I found the cause of this problem. antlr-3.4.tar.gz contains metadata files
> created by OS X, all prefixed with '._' . Since I'm on Linux, maven tries
> to compile them and fails. Deleting all those files allows all sub-modules
> to compile, except for one.
>
>
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Reactor Summary:
> [INFO]
> [INFO] ANTLR Master build control POM 3.4 ................ FAILURE
> [1:02.810s]
> [INFO] Antlr 3.4 Runtime ................................. SUCCESS
> [1:27.439s]
> [INFO] ANTLR Grammar Tool v 3.4 .......................... SUCCESS
> [26.532s]
> [INFO] Maven plugin for ANTLR V3.4 ....................... SUCCESS
> [28.607s]
> [INFO] ANTLR gUnit v3.4 .................................. SUCCESS
> [11.916s]
> [INFO] Maven plugin for gUnit ANTLR V3.4 ................. SUCCESS [1.777s]
> [INFO] ANTLR3 Maven Archetype 3.4 ........................ SUCCESS [7.148s]
> [INFO]
> ------------------------------------------------------------------------
> [INFO] BUILD FAILURE
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Total time: 5:39.210s
> [INFO] Finished at: Thu Jan 26 12:33:37 GMT+06:00 2012
> [INFO] Final Memory: 24M/57M
> [INFO]
> ------------------------------------------------------------------------
> [ERROR] Failed to execute goal
> org.apache.maven.plugins:maven-assembly-plugin:2.2-beta-5:assembly
> (default-cli) on project antlr-master: Error reading assemblies: No
> assembly descriptors found. -> [Help 1]
>
>
> Any ideas getting around this?
> Thanks.
>
>
>
> On Thu, Jan 26, 2012 at 4:01 AM, Jim Idle <jimi at temporal-wave.com> wrote:
>
> > Works fine here - there is likely something wrong with your setup. What
> > version of maven are you using? What OS? Did you try clearing the .m2
> > file. Did you follow the instructions in the BUILD.TXT file, or did you
> > just type 'mvn' and hoped it would work?
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of A Z
> > > Sent: Wednesday, January 25, 2012 1:49 PM
> > > To: antlr-interest at antlr.org
> > > Subject: [antlr-interest] Compiling 3.4 with maven
> > >
> > > Hello all,
> > >
> > > Has anyone successfully compiled a version 3.4 .jar using maven? For me
> > > the "Uber jar" compile fails with the following:
> > >
> > > [INFO]
> > > -----------------------------------------------------------------------
> > > -
> > > [INFO] Skipping ANTLR Master build control POM 3.4 [INFO] This project
> > > has been banned from the build due to previous failures.
> > > [INFO]
> > > -----------------------------------------------------------------------
> > > -
> > > [INFO]
> > > -----------------------------------------------------------------------
> > > -
> > > [INFO] Reactor Summary:
> > > [INFO]
> > > [INFO] ANTLR Master build control POM 3.4 ................ SUCCESS
> > > [0.709s] [INFO] Antlr 3.4 Runtime .................................
> > > FAILURE [5.103s] [INFO] ANTLR Grammar Tool v 3.4
> > > .......................... SKIPPED [INFO] Maven plugin for ANTLR V3.4
> > > ....................... SKIPPED [INFO] ANTLR gUnit v3.4
> > > .................................. SKIPPED [INFO] Maven plugin for
> > > gUnit ANTLR V3.4 ................. SKIPPED [INFO] ANTLR3 Maven
> > > Archetype 3.4 ........................ SKIPPED [INFO]
> > > -----------------------------------------------------------------------
> > > -
> > > [INFO] BUILD FAILURE
> > > [INFO]
> > > -----------------------------------------------------------------------
> > > -
> > > [INFO] Total time: 7.172s
> > > [INFO] Finished at: Wed Jan 25 14:03:18 GMT+06:00 2012 [INFO] Final
> > > Memory: 14M/154M [INFO]
> > > -----------------------------------------------------------------------
> > > -
> > > [ERROR] Failed to execute goal
> > > org.apache.maven.plugins:maven-javadoc-plugin:2.8:jar (attach-javadocs)
> > > on project antlr-runtime: MavenReportException: Error while creating
> > > archive:
> > > [ERROR] Exit code: 1 -
> > > .../antlr-
> > > 3.4/runtime/Java/src/main/java/org/antlr/runtime/._MissingTokenExceptio
> > > n.java:1:
> > > warning: unmappable character for encoding UTF-8 [ERROR] Mac OS X <lots
> > > of binary chars> [ERROR] ^
> > >
> > > The file in question is definitely not ASCII.
> > >
> > >
> > > I then tried compiling /tool and this completes successfully but it
> > > does not create an executable jar:
> > > Failed to load Main-Class manifest attribute from
> > > .../.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar
> > >
> > > My only goal here is to modify the code generation templates. Any
> > > ideas?
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > > email-address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From asicaddress at gmail.com  Thu Jan 26 12:40:40 2012
From: asicaddress at gmail.com (A Z)
Date: Fri, 27 Jan 2012 02:40:40 +0600
Subject: [antlr-interest] Compiling 3.4 with maven
In-Reply-To: <CAHMh4-Y3D7OEsM66aCXQBj8Qpn0QHX2rFm9n5sQX_ODrBvYCsg@mail.gmail.com>
References: <CAP86aOf7EowhVNGWGNxg9C4xZP2=Jw3TGmmGF33b004LXTpCOA@mail.gmail.com>
	<5e8acfb3d9102f39fd56eba05f23c585@mail.gmail.com>
	<CAP86aOdJs3f+XCzo2dvQybhKorsOEzbT9bxChH3QNfgKnjP0+w@mail.gmail.com>
	<CAHMh4-Y3D7OEsM66aCXQBj8Qpn0QHX2rFm9n5sQX_ODrBvYCsg@mail.gmail.com>
Message-ID: <CAP86aOfGXEkGPYv+UOkKOsj2aAJfOtzG=Uk2wm0TD3_ZvDHkXA@mail.gmail.com>

This worked.

Thank you.

On Fri, Jan 27, 2012 at 2:32 AM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> Sometime back i had the same issue. Try this.
>   In Build.txt, the command mentioned for building Uber jar is mentioned
> incorrectly and it is not working fine. But in the pom.xml, it is
> mentioned correctly. Please do update the Build.txt also with the same.
> "mvn -Duber -DskipTests package assembly:assembly"
>
> Gokul.
>
> On Fri, Jan 27, 2012 at 2:49 AM, A Z <asicaddress at gmail.com> wrote:
>
>> I'm using 3.0.3
>>
>> $ mvn -v
>> /usr/lib/jvm/java
>> Apache Maven 3.0.3 (rNON-CANONICAL_2011-10-11_11-56_mockbuild; 2011-10-11
>> 17:56:36+0600)
>> Maven home: /usr/share/maven
>> Java version: 1.6.0_22, vendor: Sun Microsystems Inc.
>> Java home: /usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre
>> Default locale: en_US, platform encoding: UTF-8
>> OS name: "linux", version: "3.2.1-3.fc16.x86_64", arch: "amd64", family:
>> "unix"
>>
>>
>> I found the cause of this problem. antlr-3.4.tar.gz contains metadata
>> files
>> created by OS X, all prefixed with '._' . Since I'm on Linux, maven tries
>> to compile them and fails. Deleting all those files allows all sub-modules
>> to compile, except for one.
>>
>>
>> [INFO]
>> ------------------------------------------------------------------------
>> [INFO] Reactor Summary:
>> [INFO]
>> [INFO] ANTLR Master build control POM 3.4 ................ FAILURE
>> [1:02.810s]
>> [INFO] Antlr 3.4 Runtime ................................. SUCCESS
>> [1:27.439s]
>> [INFO] ANTLR Grammar Tool v 3.4 .......................... SUCCESS
>> [26.532s]
>> [INFO] Maven plugin for ANTLR V3.4 ....................... SUCCESS
>> [28.607s]
>> [INFO] ANTLR gUnit v3.4 .................................. SUCCESS
>> [11.916s]
>> [INFO] Maven plugin for gUnit ANTLR V3.4 ................. SUCCESS
>> [1.777s]
>> [INFO] ANTLR3 Maven Archetype 3.4 ........................ SUCCESS
>> [7.148s]
>> [INFO]
>> ------------------------------------------------------------------------
>> [INFO] BUILD FAILURE
>> [INFO]
>> ------------------------------------------------------------------------
>> [INFO] Total time: 5:39.210s
>> [INFO] Finished at: Thu Jan 26 12:33:37 GMT+06:00 2012
>> [INFO] Final Memory: 24M/57M
>> [INFO]
>> ------------------------------------------------------------------------
>> [ERROR] Failed to execute goal
>> org.apache.maven.plugins:maven-assembly-plugin:2.2-beta-5:assembly
>> (default-cli) on project antlr-master: Error reading assemblies: No
>> assembly descriptors found. -> [Help 1]
>>
>>
>> Any ideas getting around this?
>> Thanks.
>>
>>
>>
>> On Thu, Jan 26, 2012 at 4:01 AM, Jim Idle <jimi at temporal-wave.com> wrote:
>>
>> > Works fine here - there is likely something wrong with your setup. What
>> > version of maven are you using? What OS? Did you try clearing the .m2
>> > file. Did you follow the instructions in the BUILD.TXT file, or did you
>> > just type 'mvn' and hoped it would work?
>> >
>> > Jim
>> >
>> > > -----Original Message-----
>> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > > bounces at antlr.org] On Behalf Of A Z
>> > > Sent: Wednesday, January 25, 2012 1:49 PM
>> > > To: antlr-interest at antlr.org
>> > > Subject: [antlr-interest] Compiling 3.4 with maven
>> > >
>> > > Hello all,
>> > >
>> > > Has anyone successfully compiled a version 3.4 .jar using maven? For
>> me
>> > > the "Uber jar" compile fails with the following:
>> > >
>> > > [INFO]
>> > >
>> -----------------------------------------------------------------------
>> > > -
>> > > [INFO] Skipping ANTLR Master build control POM 3.4 [INFO] This project
>> > > has been banned from the build due to previous failures.
>> > > [INFO]
>> > >
>> -----------------------------------------------------------------------
>> > > -
>> > > [INFO]
>> > >
>> -----------------------------------------------------------------------
>> > > -
>> > > [INFO] Reactor Summary:
>> > > [INFO]
>> > > [INFO] ANTLR Master build control POM 3.4 ................ SUCCESS
>> > > [0.709s] [INFO] Antlr 3.4 Runtime .................................
>> > > FAILURE [5.103s] [INFO] ANTLR Grammar Tool v 3.4
>> > > .......................... SKIPPED [INFO] Maven plugin for ANTLR V3.4
>> > > ....................... SKIPPED [INFO] ANTLR gUnit v3.4
>> > > .................................. SKIPPED [INFO] Maven plugin for
>> > > gUnit ANTLR V3.4 ................. SKIPPED [INFO] ANTLR3 Maven
>> > > Archetype 3.4 ........................ SKIPPED [INFO]
>> > >
>> -----------------------------------------------------------------------
>> > > -
>> > > [INFO] BUILD FAILURE
>> > > [INFO]
>> > >
>> -----------------------------------------------------------------------
>> > > -
>> > > [INFO] Total time: 7.172s
>> > > [INFO] Finished at: Wed Jan 25 14:03:18 GMT+06:00 2012 [INFO] Final
>> > > Memory: 14M/154M [INFO]
>> > >
>> -----------------------------------------------------------------------
>> > > -
>> > > [ERROR] Failed to execute goal
>> > > org.apache.maven.plugins:maven-javadoc-plugin:2.8:jar
>> (attach-javadocs)
>> > > on project antlr-runtime: MavenReportException: Error while creating
>> > > archive:
>> > > [ERROR] Exit code: 1 -
>> > > .../antlr-
>> > >
>> 3.4/runtime/Java/src/main/java/org/antlr/runtime/._MissingTokenExceptio
>> > > n.java:1:
>> > > warning: unmappable character for encoding UTF-8 [ERROR] Mac OS X
>> <lots
>> > > of binary chars> [ERROR] ^
>> > >
>> > > The file in question is definitely not ASCII.
>> > >
>> > >
>> > > I then tried compiling /tool and this completes successfully but it
>> > > does not create an executable jar:
>> > > Failed to load Main-Class manifest attribute from
>> > > .../.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar
>> > >
>> > > My only goal here is to modify the code generation templates. Any
>> > > ideas?
>> > >
>> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > > Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-
>> > > email-address
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From antlr at mirality.co.nz  Thu Jan 26 12:51:12 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 27 Jan 2012 09:51:12 +1300
Subject: [antlr-interest] Shorthand notation for separated lists
In-Reply-To: <4F21757D.8020302@in.tum.de>
References: <4F21757D.8020302@in.tum.de>
Message-ID: <20120126205123.3CDDB341840D@www.antlr.org>

At 04:47 27/01/2012, Jan Finis wrote:
 >(id ** ",") is automatically expanded to [ id ("," id)* ] and
 >(id ++ ",") is automatically expaned to id ("," id)*

Actually, it would make more sense if (id ** COMMA) expanded to 
(id (COMMA id)*) and (id ++ COMMA) expanded to (id (COMMA 
id)+).  You can already make the whole expression optional simply 
by putting a ? on the end.

(And I don't know why you were using square brackets.  They don't 
mean what you seem to think they do.)


From peterpiper797 at hotmail.com  Thu Jan 26 17:27:50 2012
From: peterpiper797 at hotmail.com (Peter Piper)
Date: Fri, 27 Jan 2012 01:27:50 +0000
Subject: [antlr-interest] Lexer fails
Message-ID: <BAY155-W3152697C6A334F8FC94D96FE8E0@phx.gbl>


I'm sorry that I can only talk about the old stuff (v3) but can anyone
anyone see how the following lexer token definition:

FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') ('-')? ('0'..'9')+ ;

can possibly match the input:

3.142

?

There is no 'e' or 'E' in the input, so why does the ANTLR lexer think
that this is a "better" token to output than the other one I want it
to go for, namely:

FIXED : ('0'..'9')+ '.' ('0'..'9')* ;

?

Also, the Lexer seems happy to discard all characters that match no tokens
without complaining, though I haven't set option{filter=true} anywhere.
Does that remind anyone of anything I ought to know? :)

(This is with VS2010 C#, Antlr.Runtime v3.4.1.9004, if that's relevant?)

Dan

 		 	   		  

From gerald.gutierrez at gmail.com  Thu Jan 26 17:48:48 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Thu, 26 Jan 2012 17:48:48 -0800
Subject: [antlr-interest] Parsing this ambiguous grammar
Message-ID: <CAPZrZPPhxH=sUxEVodfwLz=h66pWSCJ+xBw9nLB8_jeeHtyZZQ@mail.gmail.com>

Hello all,

I'm attempting to use ANTLR to parse some text and I've come across an
ambiguity problem.

Essentially,?I've got two tokens defined:

ID  :   ('a'..'z' | 'A'..'Z') ('0'..'9' | 'a'..'z' | 'A'..'Z' | ' ')*;

PITCH
    :   (('A'|'a') '#'?)
    |   (('B'|'b') '#'?)
    |   (('C'|'c') '#'?);

Obviously, the letter "A" would be an ambiguity.

I further define:

note    :   PITCH;
name    :   ID;
main    :   name ':' note '\n'?

One would think that, intuitively, since the main rule says that there
should be a "name" followed by a colon followed by a "note", that it
any name would match first. Also, after the colon, any "note" would
match.

If I enter "A:A" as input to the parser, I always get an error. Either
the parser expects PITCH or ID depending on whether ID or PITCH is
defined first.

What is the right way to resolve this situation and get the parser to
behave as desired? Trying to come to grips with predicates. Would
their use solve this problem?


Regards,
Gerald.

From antlr at mirality.co.nz  Thu Jan 26 23:25:29 2012
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 27 Jan 2012 20:25:29 +1300
Subject: [antlr-interest] Lexer fails
In-Reply-To: <BAY155-W3152697C6A334F8FC94D96FE8E0@phx.gbl>
References: <BAY155-W3152697C6A334F8FC94D96FE8E0@phx.gbl>
Message-ID: <20120127072545.AB588341840D@www.antlr.org>

At 14:27 27/01/2012, Peter Piper wrote:
 >I'm sorry that I can only talk about the old stuff (v3) but can
 >anyone see how the following lexer token definition:
 >
 >FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') ('-')?
 >('0'..'9')+ ;
[...]
 >
 >There is no 'e' or 'E' in the input, so why does the ANTLR lexer 

 >think that this is a "better" token to output than the other one 

 >I want it to go for, namely:
 >
 >FIXED : ('0'..'9')+ '.' ('0'..'9')* ;

v3 lexers mostly just use single-char lookahead when around 
looping constructs, which isn't sufficient to disambiguate these 
cases.  You need to help it out a bit by providing explicit 
lookahead hints.  (Reportedly v4 is infinitely better at this, but 
I haven't tried it myself yet.)

fragment FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') 
('-')? ('0'..'9')+;

FIXED : (FLOAT) => FLOAT { $type = FLOAT; }
       | ('0'..'9')+ '.' ('0'..'9')*
       ;

Or left-factor it for more efficiency (and throw an INTEGER in, 
since I assume you have one of those too):

fragment FLOAT : ;
fragment FIXED : ;

INTEGER : ('0'..'9')+
         ( ('.' ('0'..'9')) => '.' ('0'..'9')* { $type = FIXED; }
         ( ('E'|'e') '-'? ('0'..'9')+ { $type = FLOAT; } )? )?
         ;

Or just call all of these things NUMBERs and sort it out in the 
parser. :)


From finis at in.tum.de  Fri Jan 27 00:24:48 2012
From: finis at in.tum.de (Jan Finis)
Date: Fri, 27 Jan 2012 09:24:48 +0100
Subject: [antlr-interest] Shorthand notation for separated lists
In-Reply-To: <20120126205124.0F95525BD1@maildmz2.informatik.tu-muenchen.de>
References: <4F21757D.8020302@in.tum.de>
	<20120126205124.0F95525BD1@maildmz2.informatik.tu-muenchen.de>
Message-ID: <4F225F50.90705@in.tum.de>

Am 26.01.2012 21:51, schrieb Gavin Lambert:
> At 04:47 27/01/2012, Jan Finis wrote:
> >(id ** ",") is automatically expanded to [ id ("," id)* ] and
> >(id ++ ",") is automatically expaned to id ("," id)*
>
> Actually, it would make more sense if (id ** COMMA) expanded to (id 
> (COMMA id)*) and (id ++ COMMA) expanded to (id (COMMA id)+).  You can 
> already make the whole expression optional simply by putting a ? on 
> the end.
>
> (And I don't know why you were using square brackets.  They don't mean 
> what you seem to think they do.)
>
Hi,

sorry, got mixed up, of course I meant ()? instead of [ ]. It would just 
be a shorthand notation for parsing separated lists of tokens.

Regards,
Jan

From peterpiper797 at hotmail.com  Fri Jan 27 06:33:37 2012
From: peterpiper797 at hotmail.com (Peter Piper)
Date: Fri, 27 Jan 2012 14:33:37 +0000
Subject: [antlr-interest] Lexer fails
In-Reply-To: <COL0-MC3-F12DxkUQIa000423ff@COL0-MC3-F12.Col0.hotmail.com>
References: <BAY155-W3152697C6A334F8FC94D96FE8E0@phx.gbl>,
	<COL0-MC3-F12DxkUQIa000423ff@COL0-MC3-F12.Col0.hotmail.com>
Message-ID: <BAY155-W5210D95D1A102EA4C62C7FFE8E0@phx.gbl>


Thank you for the reply and the suggestions, especially your alternative pattern with
the $type lexer action - I hadn't thought of that!

Nonetheless, I'm a bit worried that the Lexer is just a bit too buggy. How confident
are you that this is caused by the lack of sufficient lookahead? I don't see that the
patterns can be ambiguous on that input, even with LA(1). There is no 'e', so it
cannot match the supplied definition of FLOAT.

At the very least, I would expect a "can't backtrack" error when it gets to the
character following the end of the number (';' in this case). However, the lexer
seems quite happy to declare a match where there isn't one!

Dan

> Date: Fri, 27 Jan 2012 20:25:29 +1300
> To: peterpiper797 at hotmail.com; antlr-interest at antlr.org
> From: antlr at mirality.co.nz
> Subject: Re: [antlr-interest] Lexer fails
> 
> At 14:27 27/01/2012, Peter Piper wrote:
>  >I'm sorry that I can only talk about the old stuff (v3) but can
>  >anyone see how the following lexer token definition:
>  >
>  >FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') ('-')?
>  >('0'..'9')+ ;
> [...]
>  >
>  >There is no 'e' or 'E' in the input, so why does the ANTLR lexer 
> 
>  >think that this is a "better" token to output than the other one 
> 
>  >I want it to go for, namely:
>  >
>  >FIXED : ('0'..'9')+ '.' ('0'..'9')* ;
> 
> v3 lexers mostly just use single-char lookahead when around 
> looping constructs, which isn't sufficient to disambiguate these 
> cases.  You need to help it out a bit by providing explicit 
> lookahead hints.  (Reportedly v4 is infinitely better at this, but 
> I haven't tried it myself yet.)
> 
> fragment FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') 
> ('-')? ('0'..'9')+;
> 
> FIXED : (FLOAT) => FLOAT { $type = FLOAT; }
>        | ('0'..'9')+ '.' ('0'..'9')*
>        ;
> 
> Or left-factor it for more efficiency (and throw an INTEGER in, 
> since I assume you have one of those too):
> 
> fragment FLOAT : ;
> fragment FIXED : ;
> 
> INTEGER : ('0'..'9')+
>          ( ('.' ('0'..'9')) => '.' ('0'..'9')* { $type = FIXED; }
>          ( ('E'|'e') '-'? ('0'..'9')+ { $type = FLOAT; } )? )?
>          ;
> 
> Or just call all of these things NUMBERs and sort it out in the 
> parser. :)
> 
 		 	   		  

From jimi at temporal-wave.com  Fri Jan 27 07:06:08 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 27 Jan 2012 07:06:08 -0800
Subject: [antlr-interest] Lexer fails
In-Reply-To: <BAY155-W5210D95D1A102EA4C62C7FFE8E0@phx.gbl>
References: <BAY155-W3152697C6A334F8FC94D96FE8E0@phx.gbl>,
	<COL0-MC3-F12DxkUQIa000423ff@COL0-MC3-F12.Col0.hotmail.com>
	<BAY155-W5210D95D1A102EA4C62C7FFE8E0@phx.gbl>
Message-ID: <3606a03138b79b1fc88178eccf6e7511@mail.gmail.com>

I bet that it is saying 'unexpected char - ignored' - are you using the
ANTLRWorks debugger?

Jm

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Peter Piper
> Sent: Friday, January 27, 2012 6:34 AM
> To: antlr at mirality.co.nz; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexer fails
>
>
> Thank you for the reply and the suggestions, especially your
> alternative pattern with the $type lexer action - I hadn't thought of
> that!
>
> Nonetheless, I'm a bit worried that the Lexer is just a bit too buggy.
> How confident are you that this is caused by the lack of sufficient
> lookahead? I don't see that the patterns can be ambiguous on that
> input, even with LA(1). There is no 'e', so it cannot match the
> supplied definition of FLOAT.
>
> At the very least, I would expect a "can't backtrack" error when it
> gets to the character following the end of the number (';' in this
> case). However, the lexer seems quite happy to declare a match where
> there isn't one!
>
> Dan
>
> > Date: Fri, 27 Jan 2012 20:25:29 +1300
> > To: peterpiper797 at hotmail.com; antlr-interest at antlr.org
> > From: antlr at mirality.co.nz
> > Subject: Re: [antlr-interest] Lexer fails
> >
> > At 14:27 27/01/2012, Peter Piper wrote:
> >  >I'm sorry that I can only talk about the old stuff (v3) but can
> > >anyone see how the following lexer token definition:
> >  >
> >  >FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') ('-')?
> >  >('0'..'9')+ ;
> > [...]
> >  >
> >  >There is no 'e' or 'E' in the input, so why does the ANTLR lexer
> >
> >  >think that this is a "better" token to output than the other one
> >
> >  >I want it to go for, namely:
> >  >
> >  >FIXED : ('0'..'9')+ '.' ('0'..'9')* ;
> >
> > v3 lexers mostly just use single-char lookahead when around looping
> > constructs, which isn't sufficient to disambiguate these cases.  You
> > need to help it out a bit by providing explicit lookahead hints.
> > (Reportedly v4 is infinitely better at this, but I haven't tried it
> > myself yet.)
> >
> > fragment FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') ('-')?
> > ('0'..'9')+;
> >
> > FIXED : (FLOAT) => FLOAT { $type = FLOAT; }
> >        | ('0'..'9')+ '.' ('0'..'9')*
> >        ;
> >
> > Or left-factor it for more efficiency (and throw an INTEGER in, since
> > I assume you have one of those too):
> >
> > fragment FLOAT : ;
> > fragment FIXED : ;
> >
> > INTEGER : ('0'..'9')+
> >          ( ('.' ('0'..'9')) => '.' ('0'..'9')* { $type = FIXED; }
> >          ( ('E'|'e') '-'? ('0'..'9')+ { $type = FLOAT; } )? )?
> >          ;
> >
> > Or just call all of these things NUMBERs and sort it out in the
> > parser. :)
> >
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From douglasgodfrey at gmail.com  Fri Jan 27 08:19:46 2012
From: douglasgodfrey at gmail.com (Douglas Godfrey)
Date: Fri, 27 Jan 2012 11:19:46 -0500
Subject: [antlr-interest] Lexer fails
In-Reply-To: <20120127072545.AB588341840D@www.antlr.org>
Message-ID: <CB483613.99C5%douglasgodfrey@gmail.com>

copy the Number rule from the SQL2003 grammar on he Antlr downloads page.

the Number rule handles fixed and float in 1 rule.

On 1/27/12 2:25 AM, "Gavin Lambert" <antlr at mirality.co.nz> wrote:

>At 14:27 27/01/2012, Peter Piper wrote:
> >I'm sorry that I can only talk about the old stuff (v3) but can
> >anyone see how the following lexer token definition:
> >
> >FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e') ('-')?
> >('0'..'9')+ ;
>[...]
> >
> >There is no 'e' or 'E' in the input, so why does the ANTLR lexer
>
> >think that this is a "better" token to output than the other one
>
> >I want it to go for, namely:
> >
> >FIXED : ('0'..'9')+ '.' ('0'..'9')* ;
>
>v3 lexers mostly just use single-char lookahead when around
>looping constructs, which isn't sufficient to disambiguate these
>cases.  You need to help it out a bit by providing explicit
>lookahead hints.  (Reportedly v4 is infinitely better at this, but
>I haven't tried it myself yet.)
>
>fragment FLOAT : ('0'..'9')+ ( '.' ('0'..'9')* )? ('E' | 'e')
>('-')? ('0'..'9')+;
>
>FIXED : (FLOAT) => FLOAT { $type = FLOAT; }
>       | ('0'..'9')+ '.' ('0'..'9')*
>       ;
>
>Or left-factor it for more efficiency (and throw an INTEGER in,
>since I assume you have one of those too):
>
>fragment FLOAT : ;
>fragment FIXED : ;
>
>INTEGER : ('0'..'9')+
>         ( ('.' ('0'..'9')) => '.' ('0'..'9')* { $type = FIXED; }
>         ( ('E'|'e') '-'? ('0'..'9')+ { $type = FLOAT; } )? )?
>         ;
>
>Or just call all of these things NUMBERs and sort it out in the
>parser. :)
>
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: 
>http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From parrt at cs.usfca.edu  Fri Jan 27 10:15:30 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 27 Jan 2012 10:15:30 -0800
Subject: [antlr-interest] Added ranges,
	escapes to [a-z] notation in lexer to honey badger
In-Reply-To: <CABX-UnDtVwLWcrs0kaNo=7+V8-caWyPN4RhxS4tmmbgUrKtf=w@mail.gmail.com>
References: <2BBDEC8D-98FA-420D-BE7E-8B1B42C7AE82@cs.usfca.edu>
	<20120122203900.6F37F3418469@www.antlr.org>
	<B1D41C2F-D938-429E-8B2C-1275C2127A52@cs.usfca.edu>
	<CABX-UnDtVwLWcrs0kaNo=7+V8-caWyPN4RhxS4tmmbgUrKtf=w@mail.gmail.com>
Message-ID: <9D7FD226-6C45-4E9A-A49C-92F39E889677@cs.usfca.edu>

Hi. I will make that syntax illegal or fix it.

BTW,  you cannot use ~ on more than a single character. what does ~'aaa' mean?
Ter
On Jan 24, 2012, at 9:14 AM, Peter Boughton wrote:

> Is the character class syntax only for use in isolation, or should it
> work within a group of alternatives?
> 
> i.e. I tried to convert a rule in the form:
> 	~('a'|'x'|'q'|'f'|'aaa'|'bbb'|'ccc')+
> 
> into:
> 	~([axqf]|'aaa'|'bbb'|'ccc')+
> 
> ...but it gives a "complete surprise" error on whatever the contents
> of the brackets are.
> 
> 
> Actually, I also tested ~[abc] and ~[a-c] syntax on its own, and they also say:
> 	'~' came as a complete surprise to me while looking for lexer rule
> elementlexer rule element".
> 
> Trying it as just [abc] and [a-c] both work as expected.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From bkiers at gmail.com  Fri Jan 27 10:48:39 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Fri, 27 Jan 2012 19:48:39 +0100
Subject: [antlr-interest] Parsing this ambiguous grammar
In-Reply-To: <CAPZrZPPhxH=sUxEVodfwLz=h66pWSCJ+xBw9nLB8_jeeHtyZZQ@mail.gmail.com>
References: <CAPZrZPPhxH=sUxEVodfwLz=h66pWSCJ+xBw9nLB8_jeeHtyZZQ@mail.gmail.com>
Message-ID: <CAOrgODZvy92p5K4YDHsq_037H8_S2p7k+jFJeDtaiz3pxxe7wQ@mail.gmail.com>

On Fri, Jan 27, 2012 at 2:48 AM, Gerald Gutierrez <
gerald.gutierrez at gmail.com> wrote:

> ...
> Essentially, I've got two tokens defined:
>
> ID  :   ('a'..'z' | 'A'..'Z') ('0'..'9' | 'a'..'z' | 'A'..'Z' | ' ')*;
>
> PITCH
>    :   (('A'|'a') '#'?)
>    |   (('B'|'b') '#'?)
>    |   (('C'|'c') '#'?);
>
> Obviously, the letter "A" would be an ambiguity.
>

No matter what the parser "asks" of the lexer, the lexer will simply return
the longest match. And in case of a tie, it returns the match (token) that
is defined first. So in your case, "A", "B" and "C" (regardless of case)
will always be tokenized as an ID (assuming ID is defined before PITCH as
you posted in your example). I wouldn't call it ambiguous.

Also see:
http://stackoverflow.com/questions/9023015/proper-way-to-resolve-antlr-lexer-rule-ambiguities

Bart.

From gokul007 at gmail.com  Fri Jan 27 12:21:29 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sat, 28 Jan 2012 04:21:29 +0800
Subject: [antlr-interest] Parsing this ambiguous grammar
In-Reply-To: <CAOrgODZvy92p5K4YDHsq_037H8_S2p7k+jFJeDtaiz3pxxe7wQ@mail.gmail.com>
References: <CAPZrZPPhxH=sUxEVodfwLz=h66pWSCJ+xBw9nLB8_jeeHtyZZQ@mail.gmail.com>
	<CAOrgODZvy92p5K4YDHsq_037H8_S2p7k+jFJeDtaiz3pxxe7wQ@mail.gmail.com>
Message-ID: <CAHMh4-YPJxoFXReAHVKp-P_Ob1Sj5wWweMmNuRzReT69tTDqPw@mail.gmail.com>

>
>
> No matter what the parser "asks" of the lexer, the lexer will simply return
> the longest match. And in case of a tie, it returns the match (token) that
> is defined first. So in your case, "A", "B" and "C" (regardless of case)
> will always be tokenized as an ID (assuming ID is defined before PITCH as
> you posted in your example). I wouldn't call it ambiguous.
>
>
> I think this is slightly different in ANTLR grammars with a fixed look
ahead. Wherein it will try to resolve ambiguities till the look ahead and
picks up the first match, if they still remain ambiguos.

From jimi at temporal-wave.com  Fri Jan 27 12:25:14 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 27 Jan 2012 12:25:14 -0800
Subject: [antlr-interest] Parsing this ambiguous grammar
In-Reply-To: <CAOrgODZvy92p5K4YDHsq_037H8_S2p7k+jFJeDtaiz3pxxe7wQ@mail.gmail.com>
References: <CAPZrZPPhxH=sUxEVodfwLz=h66pWSCJ+xBw9nLB8_jeeHtyZZQ@mail.gmail.com>
	<CAOrgODZvy92p5K4YDHsq_037H8_S2p7k+jFJeDtaiz3pxxe7wQ@mail.gmail.com>
Message-ID: <b2c4f10c6adbb64a5680b3ef85bbf894@mail.gmail.com>

Why stackoverflow? The answer is never indexed in markmail!

grammar jim;

test: (
		  pitch
		| id
	  )+
	  EOF
;

pitch : PITCH;
id: ID ;

fragment ID :;
PITCH : ('A'|'a'|'B'|'b'|'C'|'c')
        (
            (' '|'\t'|'#')=> '#'?
          | ('a'..'z' | 'A'..'Z') ('0'..'9' | 'a'..'z' | 'A'..'Z' )+ //
You can't have WS in ID
            { $type = ID; }
        )
      | ('d'..'z' | 'D'..'Z') ('0'..'9' | 'a'..'z' | 'A'..'Z' )*
            { $type = ID; }
;


WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {skip();}
    ;

However, I am taking your grammar at its word that A B or C must always be
PITCH. I also assume that you cannot have ' ' in your ID or you have no
way at all to disambiguate except for context. However, this may come from
a hand crafted context sensitive parser made by a musician not a
programmer and so you will have to jump through hoops in the parser to try
and make it work.

Jim




> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bart Kiers
> Sent: Friday, January 27, 2012 10:49 AM
> To: antlr-interest at antlr.org interest
> Subject: Re: [antlr-interest] Parsing this ambiguous grammar
>
> On Fri, Jan 27, 2012 at 2:48 AM, Gerald Gutierrez <
> gerald.gutierrez at gmail.com> wrote:
>
> > ...
> > Essentially, I've got two tokens defined:
> >
> > ID  :   ('a'..'z' | 'A'..'Z') ('0'..'9' | 'a'..'z' | 'A'..'Z' | '
> ')*;
> >
> > PITCH
> >    :   (('A'|'a') '#'?)
> >    |   (('B'|'b') '#'?)
> >    |   (('C'|'c') '#'?);
> >
> > Obviously, the letter "A" would be an ambiguity.
> >
>
> No matter what the parser "asks" of the lexer, the lexer will simply
> return the longest match. And in case of a tie, it returns the match
> (token) that is defined first. So in your case, "A", "B" and "C"
> (regardless of case) will always be tokenized as an ID (assuming ID is
> defined before PITCH as you posted in your example). I wouldn't call it
> ambiguous.
>
> Also see:
> http://stackoverflow.com/questions/9023015/proper-way-to-resolve-antlr-
> lexer-rule-ambiguities
>
> Bart.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From gerald.gutierrez at gmail.com  Fri Jan 27 14:22:32 2012
From: gerald.gutierrez at gmail.com (Gerald Gutierrez)
Date: Fri, 27 Jan 2012 14:22:32 -0800
Subject: [antlr-interest] Parsing this ambiguous grammar
In-Reply-To: <b2c4f10c6adbb64a5680b3ef85bbf894@mail.gmail.com>
References: <CAPZrZPPhxH=sUxEVodfwLz=h66pWSCJ+xBw9nLB8_jeeHtyZZQ@mail.gmail.com>
	<CAOrgODZvy92p5K4YDHsq_037H8_S2p7k+jFJeDtaiz3pxxe7wQ@mail.gmail.com>
	<b2c4f10c6adbb64a5680b3ef85bbf894@mail.gmail.com>
Message-ID: <CAPZrZPMhmVKQsD_8aNXHcykJ_eh=C-uAbStCUdyBvw9iDr2nMQ@mail.gmail.com>

On Fri, Jan 27, 2012 at 12:25, Jim Idle <jimi at temporal-wave.com> wrote:
> However, I am taking your grammar at its word that A B or C must always be
> PITCH. I also assume that you cannot have ' ' in your ID or you have no
> way at all to disambiguate except for context. However, this may come from
> a hand crafted context sensitive parser made by a musician not a
> programmer and so you will have to jump through hoops in the parser to try
> and make it work.

The real goal here is to parse an RTTTL file by embodying the entirety
of the RTTTL file format in ANTLR. The RTTTL spec was developed by
Nokia and is described here:

http://www.csoft.co.uk/ringtones/rtttl_rtx.htm

An example is:

Entertainer:d=4,o=5,b=200:8d,8d#,8e,c6,8e,c6

It starts with a name, which can have any displayable character. A, B,
C do not have to be the pitch. They can be the name as well.

Given what has been said, it is not possible to cleanly describe RTTTL
in ANTLR. We (me & my friend who originated this) haven't found a
solution and a clean solution doesn't seem forthcoming.

Which means to me that we're back to regular expressions. Best way to
go given the situation?


Gerald.

From jimi at temporal-wave.com  Fri Jan 27 14:30:08 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 27 Jan 2012 14:30:08 -0800
Subject: [antlr-interest] Parsing this ambiguous grammar
In-Reply-To: <CAPZrZPMhmVKQsD_8aNXHcykJ_eh=C-uAbStCUdyBvw9iDr2nMQ@mail.gmail.com>
References: <CAPZrZPPhxH=sUxEVodfwLz=h66pWSCJ+xBw9nLB8_jeeHtyZZQ@mail.gmail.com>
	<CAOrgODZvy92p5K4YDHsq_037H8_S2p7k+jFJeDtaiz3pxxe7wQ@mail.gmail.com>
	<b2c4f10c6adbb64a5680b3ef85bbf894@mail.gmail.com>
	<CAPZrZPMhmVKQsD_8aNXHcykJ_eh=C-uAbStCUdyBvw9iDr2nMQ@mail.gmail.com>
Message-ID: <ef66e989bbeca685dac7396788b632a9@mail.gmail.com>

You just need a small piece of hand written Java code. Don't even bother
with a lexer.

Jim

> -----Original Message-----
> From: Gerald Gutierrez [mailto:gerald.gutierrez at gmail.com]
> Sent: Friday, January 27, 2012 2:23 PM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing this ambiguous grammar
>
> On Fri, Jan 27, 2012 at 12:25, Jim Idle <jimi at temporal-wave.com> wrote:
> > However, I am taking your grammar at its word that A B or C must
> > always be PITCH. I also assume that you cannot have ' ' in your ID or
> > you have no way at all to disambiguate except for context. However,
> > this may come from a hand crafted context sensitive parser made by a
> > musician not a programmer and so you will have to jump through hoops
> > in the parser to try and make it work.
>
> The real goal here is to parse an RTTTL file by embodying the entirety
> of the RTTTL file format in ANTLR. The RTTTL spec was developed by
> Nokia and is described here:
>
> http://www.csoft.co.uk/ringtones/rtttl_rtx.htm
>
> An example is:
>
> Entertainer:d=4,o=5,b=200:8d,8d#,8e,c6,8e,c6
>
> It starts with a name, which can have any displayable character. A, B,
> C do not have to be the pitch. They can be the name as well.
>
> Given what has been said, it is not possible to cleanly describe RTTTL
> in ANTLR. We (me & my friend who originated this) haven't found a
> solution and a clean solution doesn't seem forthcoming.
>
> Which means to me that we're back to regular expressions. Best way to
> go given the situation?
>
>
> Gerald.

From cristian.tarsoaga at gmail.com  Sat Jan 28 10:56:11 2012
From: cristian.tarsoaga at gmail.com (=?ISO-8859-2?Q?Cristian_T=E2r=BAoag=E3?=)
Date: Sat, 28 Jan 2012 20:56:11 +0200
Subject: [antlr-interest] ambiguity
Message-ID: <CAA07yUhfM4VN=1W4mfsYXtUGTM0L2o3zOQvsXoCj95QdcpC=DQ@mail.gmail.com>

Hi everybody,

I have a very simple grammar I cannot parse


elem_array: elem*;

elem: (SPACE LETTER_A LETTER_A)? (SPACE LETTER_B LETTER_B)? (SPACE LETTER_C
LETTER_C)? (SPACE LETTER_D LETTER_D)?;



Thing is, all 4 components of an element start with a space, all are
optional, and such elements can be repeated.

1. I tried to use a big lookahead, it does not solve my problem.
Can somebody explain why a k=100 does not solve it?

2. What is the solution to something like this? Predicates? How?


Thanks a lot
Chris

From jimi at temporal-wave.com  Sat Jan 28 11:54:50 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 28 Jan 2012 11:54:50 -0800
Subject: [antlr-interest] ambiguity
In-Reply-To: <CAA07yUhfM4VN=1W4mfsYXtUGTM0L2o3zOQvsXoCj95QdcpC=DQ@mail.gmail.com>
References: <CAA07yUhfM4VN=1W4mfsYXtUGTM0L2o3zOQvsXoCj95QdcpC=DQ@mail.gmail.com>
Message-ID: <1ddee49b31db5e38b621262291848c78@mail.gmail.com>

elem_array: elem* EOF;

elem: SPACE // The final frontier
     (
       | LETTER_A LETTER_A
       | LETTER_B LETTER_B
       | LETTER_C LETTER_C
       | LETTER_D LETTER_D
     )
;

Should do it. You are basically trying to avoid ? in two rules, one higher
than the other, which leads to ANTLR not able to decide which path to take
when nothing is there.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Cristian T?rsoaga
> Sent: Saturday, January 28, 2012 10:56 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ambiguity
>
> Hi everybody,
>
> I have a very simple grammar I cannot parse
>
>
> elem_array: elem*;
>
> elem: (SPACE LETTER_A LETTER_A)? (SPACE LETTER_B LETTER_B)? (SPACE
> LETTER_C LETTER_C)? (SPACE LETTER_D LETTER_D)?;
>
>
>
> Thing is, all 4 components of an element start with a space, all are
> optional, and such elements can be repeated.
>
> 1. I tried to use a big lookahead, it does not solve my problem.
> Can somebody explain why a k=100 does not solve it?
>
> 2. What is the solution to something like this? Predicates? How?
>
>
> Thanks a lot
> Chris
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From parrt at cs.usfca.edu  Sun Jan 29 13:11:07 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 29 Jan 2012 13:11:07 -0800
Subject: [antlr-interest] "Hello Gitty"
Message-ID: <2DC0A8DA-0501-4188-9D20-58BD79F23A16@cs.usfca.edu>

howdy. Well, ANTLR is now moving over to github. The transition will take a little bit of time because there are a few contributors still working with p4. hopefully we will be turning off p4 this week. My thoughts on how we will work going forward:

http://www.antlr.org/wiki/display/~admin/2012/01/28/Hello+github

Ter

From rprememail at yahoo.com  Sun Jan 29 21:46:35 2012
From: rprememail at yahoo.com (Premkumar)
Date: Sun, 29 Jan 2012 21:46:35 -0800 (PST)
Subject: [antlr-interest] FWD: this has been your time to shine.
Message-ID: <1327902395.32283.androidMobile@web124712.mail.ne1.yahoo.com>

<p>Hi friend.<br>I was starting to crumble under pressure all my stress went right out the window nothing seemed to work...<br><a href="http://www.cedarcreekfarm.net/lastnews/62AnthonyCook/">http://www.cedarcreekfarm.net/lastnews/62AnthonyCook/</a> this proves that miracles do exist<br>youll get the hang of it!<br>talk to you soon.</p>

From parrt at cs.usfca.edu  Mon Jan 30 10:00:43 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 30 Jan 2012 10:00:43 -0800
Subject: [antlr-interest] antlr.org:666 p4 going down later today
Message-ID: <9AD173F8-D6B9-43AB-AAD8-11AF01AAFED2@cs.usfca.edu>

I see no pending change lists so I think we are okay to shut it down.

 actually I to check one thing to make sure that the antlr/antlr3 github repository is properly code/antlr/antlr3-main from p4 not code/antlr/main.

Ter

From huhlig at uhlisys.com  Mon Jan 30 15:56:15 2012
From: huhlig at uhlisys.com (Hans Uhlig)
Date: Mon, 30 Jan 2012 15:56:15 -0800
Subject: [antlr-interest] Lexer Compiles in 4.0 but not in 3.4
Message-ID: <CAD63Ac7MenTijmfdvaniNvAdV4ziWj0bUZZ_pk4QZdKm6KDi2w@mail.gmail.com>

Hi all, I am a bit confused. My Lexer Grammar seems to compile fine in
antlr 4.0 but seems to have trouble in 3.4 Perhaps I am being daft but I
cant for the life of me figure out why.

error(208): essex_lexer.g:23:1: The following token definitions can never
be matched because prior tokens match the same input:
BININT,OCTINT,DECINT,HEXINT

http://pastebin.com/FUWQjpvj

lexer grammar essex_lexer;

ID      :   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;

INT     :   BININT
        |   OCTINT
        |   DECINT
        |   HEXINT
        ;

BININT  :   '0b' BIN_DIGIT+
        ;

OCTINT  :   '0o' OCT_DIGIT+
        ;

DECINT  :   DIGIT+
        ;

HEXINT  :   '0x' HEX_DIGIT+
        ;

FLOAT   :   DIGIT+ '.' DIGIT+ EXPONENT?
        |   DIGIT+ EXPONENT
        |   DIGIT+ 'f'
        ;

fragment
BIN_DIGIT
        :   ('0' | '1')
        ;

fragment
OCT_DIGIT
        :   ('0'..'7')
        ;

fragment
DIGIT
        :   ('0'..'9')
        ;

fragment
HEX_DIGIT
        :   (DIGIT | 'a'..'f' | 'A'..'F')
        ;


fragment
EXPONENT:   ('e'|'E') ('+'|'-')? DIGIT+ ;

WS      :   ( ' ' | '\t' | '\r' | '\n' ) {$channel=HIDDEN;} ;

STRING  :   '"' ( ESC_SEQ | ~('\\'|'"') )* '"' ;

CHAR    :   '\''( ESC_SEQ | ~('\''|'\\')) '\'' ;

fragment
ESC_SEQ :   '\\' ('\\'|'\''|'\"'|'a'|'b'|'f'|'n'|'r'|'t'|'v') | OCT_ESC |
HEX_ESC | UNICODE_ESC ;

fragment
HEX_ESC :   '\\x' HEX_DIGIT HEX_DIGIT ;

fragment
OCT_ESC
        :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
        |   '\\' ('0'..'7') ('0'..'7')
        |   '\\' ('0'..'7')
        ;

fragment
UNICODE_ESC
        :   '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
        |   '\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
HEX_DIGIT HEX_DIGIT HEX_DIGIT
        ;

From parrt at cs.usfca.edu  Mon Jan 30 16:01:37 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 30 Jan 2012 16:01:37 -0800
Subject: [antlr-interest] Lexer Compiles in 4.0 but not in 3.4
In-Reply-To: <CAD63Ac7MenTijmfdvaniNvAdV4ziWj0bUZZ_pk4QZdKm6KDi2w@mail.gmail.com>
References: <CAD63Ac7MenTijmfdvaniNvAdV4ziWj0bUZZ_pk4QZdKm6KDi2w@mail.gmail.com>
Message-ID: <D06334A3-44E0-4F72-8FB3-BAC429555D69@cs.usfca.edu>

INT matches all these other tokens

INT     :   BININT
       |   OCTINT
       |   DECINT
       |   HEXINT
       ;

Ter

On Jan 30, 2012, at 3:56 PM, Hans Uhlig wrote:

> Hi all, I am a bit confused. My Lexer Grammar seems to compile fine in
> antlr 4.0 but seems to have trouble in 3.4 Perhaps I am being daft but I
> cant for the life of me figure out why.
> 
> error(208): essex_lexer.g:23:1: The following token definitions can never
> be matched because prior tokens match the same input:
> BININT,OCTINT,DECINT,HEXINT
> 
> http://pastebin.com/FUWQjpvj
> 
> lexer grammar essex_lexer;
> 
> ID      :   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;
> 
> INT     :   BININT
>        |   OCTINT
>        |   DECINT
>        |   HEXINT
>        ;
> 
> BININT  :   '0b' BIN_DIGIT+
>        ;
> 
> OCTINT  :   '0o' OCT_DIGIT+
>        ;
> 
> DECINT  :   DIGIT+
>        ;
> 
> HEXINT  :   '0x' HEX_DIGIT+
>        ;
> 
> FLOAT   :   DIGIT+ '.' DIGIT+ EXPONENT?
>        |   DIGIT+ EXPONENT
>        |   DIGIT+ 'f'
>        ;
> 
> fragment
> BIN_DIGIT
>        :   ('0' | '1')
>        ;
> 
> fragment
> OCT_DIGIT
>        :   ('0'..'7')
>        ;
> 
> fragment
> DIGIT
>        :   ('0'..'9')
>        ;
> 
> fragment
> HEX_DIGIT
>        :   (DIGIT | 'a'..'f' | 'A'..'F')
>        ;
> 
> 
> fragment
> EXPONENT:   ('e'|'E') ('+'|'-')? DIGIT+ ;
> 
> WS      :   ( ' ' | '\t' | '\r' | '\n' ) {$channel=HIDDEN;} ;
> 
> STRING  :   '"' ( ESC_SEQ | ~('\\'|'"') )* '"' ;
> 
> CHAR    :   '\''( ESC_SEQ | ~('\''|'\\')) '\'' ;
> 
> fragment
> ESC_SEQ :   '\\' ('\\'|'\''|'\"'|'a'|'b'|'f'|'n'|'r'|'t'|'v') | OCT_ESC |
> HEX_ESC | UNICODE_ESC ;
> 
> fragment
> HEX_ESC :   '\\x' HEX_DIGIT HEX_DIGIT ;
> 
> fragment
> OCT_ESC
>        :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
>        |   '\\' ('0'..'7') ('0'..'7')
>        |   '\\' ('0'..'7')
>        ;
> 
> fragment
> UNICODE_ESC
>        :   '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
>        |   '\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
> HEX_DIGIT HEX_DIGIT HEX_DIGIT
>        ;
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From chwchw at gmx.de  Mon Jan 30 16:02:40 2012
From: chwchw at gmx.de (Christian)
Date: Tue, 31 Jan 2012 01:02:40 +0100
Subject: [antlr-interest] Lexer Compiles in 4.0 but not in 3.4
In-Reply-To: <CAD63Ac7MenTijmfdvaniNvAdV4ziWj0bUZZ_pk4QZdKm6KDi2w@mail.gmail.com>
References: <CAD63Ac7MenTijmfdvaniNvAdV4ziWj0bUZZ_pk4QZdKm6KDi2w@mail.gmail.com>
Message-ID: <4F272FA0.8090402@gmx.de>

BININT,OCTINT,DECINT,HEXINT can never be matched because INT catches them all before. Declare these 4 rules as fragment and your grammar should work.

Regards,
Christian

Am 31.01.2012 00:56, schrieb Hans Uhlig:
> Hi all, I am a bit confused. My Lexer Grammar seems to compile fine in
> antlr 4.0 but seems to have trouble in 3.4 Perhaps I am being daft but I
> cant for the life of me figure out why.
>
> error(208): essex_lexer.g:23:1: The following token definitions can never
> be matched because prior tokens match the same input:
> BININT,OCTINT,DECINT,HEXINT
>
> http://pastebin.com/FUWQjpvj
>
> lexer grammar essex_lexer;
>
> ID      :   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;
>
> INT     :   BININT
>         |   OCTINT
>         |   DECINT
>         |   HEXINT
>         ;
>
> BININT  :   '0b' BIN_DIGIT+
>         ;
>
> OCTINT  :   '0o' OCT_DIGIT+
>         ;
>
> DECINT  :   DIGIT+
>         ;
>
> HEXINT  :   '0x' HEX_DIGIT+
>         ;
>
> FLOAT   :   DIGIT+ '.' DIGIT+ EXPONENT?
>         |   DIGIT+ EXPONENT
>         |   DIGIT+ 'f'
>         ;
>
> fragment
> BIN_DIGIT
>         :   ('0' | '1')
>         ;
>
> fragment
> OCT_DIGIT
>         :   ('0'..'7')
>         ;
>
> fragment
> DIGIT
>         :   ('0'..'9')
>         ;
>
> fragment
> HEX_DIGIT
>         :   (DIGIT | 'a'..'f' | 'A'..'F')
>         ;
>
>
> fragment
> EXPONENT:   ('e'|'E') ('+'|'-')? DIGIT+ ;
>
> WS      :   ( ' ' | '\t' | '\r' | '\n' ) {$channel=HIDDEN;} ;
>
> STRING  :   '"' ( ESC_SEQ | ~('\\'|'"') )* '"' ;
>
> CHAR    :   '\''( ESC_SEQ | ~('\''|'\\')) '\'' ;
>
> fragment
> ESC_SEQ :   '\\' ('\\'|'\''|'\"'|'a'|'b'|'f'|'n'|'r'|'t'|'v') | OCT_ESC |
> HEX_ESC | UNICODE_ESC ;
>
> fragment
> HEX_ESC :   '\\x' HEX_DIGIT HEX_DIGIT ;
>
> fragment
> OCT_ESC
>         :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
>         |   '\\' ('0'..'7') ('0'..'7')
>         |   '\\' ('0'..'7')
>         ;
>
> fragment
> UNICODE_ESC
>         :   '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
>         |   '\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
> HEX_DIGIT HEX_DIGIT HEX_DIGIT
>         ;
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>


From wijanarto.nagan at yahoo.com  Mon Jan 30 20:23:06 2012
From: wijanarto.nagan at yahoo.com (wijanarto wijanarto)
Date: Tue, 31 Jan 2012 12:23:06 +0800 (SGT)
Subject: [antlr-interest] create own editor for antlr grammar
Message-ID: <1327983786.20925.YahooMailNeo@web190303.mail.sg3.yahoo.com>

I am Newbie in antlr and ST, and i have already done with my parser and ST to create new little language.?
Next step, i want to build my own text editor to recognize that language, how do i did that?
i've try with RCP but still confuse to integrated with grammar, has anyone suggest me tools to create it????

From plasticfridge at googlemail.com  Tue Jan 31 07:40:28 2012
From: plasticfridge at googlemail.com (Jonathan Roberts)
Date: Tue, 31 Jan 2012 15:40:28 +0000
Subject: [antlr-interest] Composite grammars, multiple lexer imports
Message-ID: <CAC9gNVWvG9+UMC+fAZ7qTvO6iO1ibXw=qyfQZ576G_ObxBHREw@mail.gmail.com>

Hello all,

Hope you can help.

I am trying to build a combined Antlr grammar that has multiple lexer
imports. However, I am struggling to achieve the end goal. Below is a
trivial example but generates the same errors I am suffering.

3 files: par.g(The combined parser/lexer), lx1.g (a lexer only grammar) and
lx2.g (a lexer only grammar)

par.g

grammar par;

import lx1, lx2;

a : INT  ID ;

lx1.g

lexer grammar lx1;

INT : '0'..'9'+ ;
WS : (' '|'\n')+ {skip();} ;

lx2.g

lexer grammar lx2;

ID : 'a'..'z'+ ;

Whenever I try to generate code from these grammars I get the following
error

error(103): lx2.g:6:1: parser rule a not allowed in lexer

Hope someone can help.

p.s. the reason for me doing this is that my current grammar generates code
that javac refuses to couple as it is too large! I was hopping that
splitting into multiple grammars would reduce file sizes so I may compile
my code.

From jokeserver at gmail.com  Tue Jan 31 08:58:01 2012
From: jokeserver at gmail.com (Benjamin S Wolf)
Date: Tue, 31 Jan 2012 08:58:01 -0800
Subject: [antlr-interest] Composite grammars, multiple lexer imports
In-Reply-To: <CAC9gNVWvG9+UMC+fAZ7qTvO6iO1ibXw=qyfQZ576G_ObxBHREw@mail.gmail.com>
References: <CAC9gNVWvG9+UMC+fAZ7qTvO6iO1ibXw=qyfQZ576G_ObxBHREw@mail.gmail.com>
Message-ID: <CAN51Nt62+5yNRqMWwWJGQ=gZDibcPiXLrsTAwvxV5HCRN7HxKw@mail.gmail.com>

I had this same issue some time ago, and I resolved it by having my
combined grammar import only one lexer, which imports the other. Try
importing lx2 from lx1 or vice versa, and have par import the top one.

On Tue, Jan 31, 2012 at 7:40 AM, Jonathan Roberts
<plasticfridge at googlemail.com> wrote:
> Hello all,
>
> Hope you can help.
>
> I am trying to build a combined Antlr grammar that has multiple lexer
> imports. However, I am struggling to achieve the end goal. Below is a
> trivial example but generates the same errors I am suffering.
>
> 3 files: par.g(The combined parser/lexer), lx1.g (a lexer only grammar) and
> lx2.g (a lexer only grammar)
>
> par.g
>
> grammar par;
>
> import lx1, lx2;
>
> a : INT ?ID ;
>
> lx1.g
>
> lexer grammar lx1;
>
> INT : '0'..'9'+ ;
> WS : (' '|'\n')+ {skip();} ;
>
> lx2.g
>
> lexer grammar lx2;
>
> ID : 'a'..'z'+ ;
>
> Whenever I try to generate code from these grammars I get the following
> error
>
> error(103): lx2.g:6:1: parser rule a not allowed in lexer
>
> Hope someone can help.
>
> p.s. the reason for me doing this is that my current grammar generates code
> that javac refuses to couple as it is too large! I was hopping that
> splitting into multiple grammars would reduce file sizes so I may compile
> my code.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From asicaddress at gmail.com  Tue Jan 31 10:50:19 2012
From: asicaddress at gmail.com (A Z)
Date: Wed, 1 Feb 2012 00:50:19 +0600
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-aocHwBWPFQe8+PteiPxdto1NAEgOduBVM9LP=Rn+EAiw@mail.gmail.com>
References: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>
	<CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>
	<CAHMh4-axZZMM5+TUj3QO-t7WOYUCGWGvmKbDiioq4uZezsy7PA@mail.gmail.com>
	<CAP86aOf4A73TvB+SVQyB2N4KWudG+5TAxdo3StR+Roq09WKCmw@mail.gmail.com>
	<CAHMh4-aocHwBWPFQe8+PteiPxdto1NAEgOduBVM9LP=Rn+EAiw@mail.gmail.com>
Message-ID: <CAP86aOceE4tBFpBM=wwsSRJ4MHHdNouM1EGJLGFgW+wfqKvy1A@mail.gmail.com>

Hi Gokulakannan,

  I am also converting to C++ but my goal is primarily performance. I don't
intend to use templates.
  As far as tradeoffs, the commontoken struct has a field for everything so
lookup after lexing is fast but at the cost of memory use. I'm
investigating replacing some of these with member functions that only
calculate values when needed or redirect to a different data structure.


On Thu, Jan 26, 2012 at 11:47 AM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> The specific goal is to create a Parser infrastructure for ANTLR 3.4 in
> C++. Nothing more specific than that. Of course replacing function pointers
> was my other aim, as it saves both execution time and memory.
>
> " I see many speed/memory/feature tradeoffs in the lexer design. "
>      Can you be more specific? I am not going to do any new lexer design.
> Just going to translate the one which is already present. Or do you mean
> that by implementing the changes i suggested, i am compromising on
> speed/memory/feature?
>
> Thanks,
> Gokul.
>

From chwchw at gmx.de  Tue Jan 31 12:52:03 2012
From: chwchw at gmx.de (Christian)
Date: Tue, 31 Jan 2012 21:52:03 +0100
Subject: [antlr-interest] Copying return value of a rule
Message-ID: <4F285473.60402@gmx.de>

Hi @all,

as one might know from common programming languages, a field declaration
looks like the following (here C#)

    [attribute] public String name, text;

My corresponding rule looks as follows:

    variable_declarators
    : variable_declarator ( COMMA  variable_declarator )*
      -> ^(VARIABLE_DECLARATOR {$class_member_declaration::attrs}
{$class_member_declaration::members}
          {$typed_member_declaration::type} variable_declarator)+
    ;

The first problem: Attributes and modifiers are optional, so I get an
EmptyStackException if one of the following action is not declared in
the corresponding upper rule. Can I somehow check whether the attrs and
members are defined?
The second problem: I do not know a good alternative. Passing e.g. type
through 3 or more rule levels is not maintainable. Furthermore, copying
the return value of the type rule for each field (here: name and text)
does not work. Any solution for that?

Regards,
Christian

From opensource at peoplemerge.com  Tue Jan 31 13:35:27 2012
From: opensource at peoplemerge.com (Dave Thomas)
Date: Tue, 31 Jan 2012 16:35:27 -0500
Subject: [antlr-interest] Language Design
Message-ID: <CANSf4X7FLsnQPWC+NHX4jjq4oKDQNwV_6MEmH_SZ7aPcY-964w@mail.gmail.com>

Hi All,

I'm reading the Beautiful Architecture book by O'Reilly and came across
this: "a formal grammar consists of: a finite set N of nonterminal things;
a finite set T of terminal things; a finite set R of replacement rules; and
an initial thing S."

I know we're all involved in language implementation, but there hasn't been
much discussion on language design, an activity I need to do.  Can anyone
who has created a language from scratch point me to some practical
resources to get me started?  Yes, I've read the dragon book, I'm really
looking more for  a step-by-step from domain to DSL.  I'm prepared to study
linguistics if that's needed.

Thanks!
Dave

From parrt at cs.usfca.edu  Tue Jan 31 13:45:37 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 31 Jan 2012 13:45:37 -0800
Subject: [antlr-interest] Language Design
In-Reply-To: <CANSf4X7FLsnQPWC+NHX4jjq4oKDQNwV_6MEmH_SZ7aPcY-964w@mail.gmail.com>
References: <CANSf4X7FLsnQPWC+NHX4jjq4oKDQNwV_6MEmH_SZ7aPcY-964w@mail.gmail.com>
Message-ID: <8779F2F7-C71E-4FF5-8D22-7FF68EF13F4E@cs.usfca.edu>

 hi Dave. You might find something interesting in my presentation at code generation 2011 last year.

http://www.infoq.com/presentations/Automation-DSL

I had some advice on DSL language design and evolution.

Ter
On Jan 31, 2012, at 1:35 PM, Dave Thomas wrote:

> Hi All,
> 
> I'm reading the Beautiful Architecture book by O'Reilly and came across
> this: "a formal grammar consists of: a finite set N of nonterminal things;
> a finite set T of terminal things; a finite set R of replacement rules; and
> an initial thing S."
> 
> I know we're all involved in language implementation, but there hasn't been
> much discussion on language design, an activity I need to do.  Can anyone
> who has created a language from scratch point me to some practical
> resources to get me started?  Yes, I've read the dragon book, I'm really
> looking more for  a step-by-step from domain to DSL.  I'm prepared to study
> linguistics if that's needed.
> 
> Thanks!
> Dave
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Tue Jan 31 16:35:01 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 1 Feb 2012 08:35:01 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAP86aOceE4tBFpBM=wwsSRJ4MHHdNouM1EGJLGFgW+wfqKvy1A@mail.gmail.com>
References: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>
	<CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>
	<CAHMh4-axZZMM5+TUj3QO-t7WOYUCGWGvmKbDiioq4uZezsy7PA@mail.gmail.com>
	<CAP86aOf4A73TvB+SVQyB2N4KWudG+5TAxdo3StR+Roq09WKCmw@mail.gmail.com>
	<CAHMh4-aocHwBWPFQe8+PteiPxdto1NAEgOduBVM9LP=Rn+EAiw@mail.gmail.com>
	<CAP86aOceE4tBFpBM=wwsSRJ4MHHdNouM1EGJLGFgW+wfqKvy1A@mail.gmail.com>
Message-ID: <CAHMh4-Y04Dbqh8bYMw_-4Vo6BLSW_LHGor2SNHHZAkzbMxPrgg@mail.gmail.com>

>
> Hi Gokulakannan,
>
>   I am also converting to C++ but my goal is primarily performance. I
> don't intend to use templates.
>   As far as tradeoffs, the commontoken struct has a field for everything
> so lookup after lexing is fast but at the cost of memory use. I'm
> investigating replacing some of these with member functions that only
> calculate values when needed or redirect to a different data structure.
>
>
> Well my goal is also about performance primarily. Infact that was the
reason, i choose to work with templates.  Regarding the memory use, your
attempt will be definitely useful. I can incorporate it, if its proven
faster. But for the memory issue, i have a different plan altogether. I
will start it as a new thread, once i finish this development.

Thanks,
Gokul.

From gokul007 at gmail.com  Tue Jan 31 16:46:24 2012
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 1 Feb 2012 08:46:24 +0800
Subject: [antlr-interest] Antlr v4 - C++ target
In-Reply-To: <CAHMh4-Y04Dbqh8bYMw_-4Vo6BLSW_LHGor2SNHHZAkzbMxPrgg@mail.gmail.com>
References: <CAHMh4-Yor+129rbz5w4SiZsaRN-BZvDzWKAn64drPvDmqzD18g@mail.gmail.com>
	<CB45A665.F91D6%ruslan_zasukhin@valentina-db.com>
	<CAHMh4-axZZMM5+TUj3QO-t7WOYUCGWGvmKbDiioq4uZezsy7PA@mail.gmail.com>
	<CAP86aOf4A73TvB+SVQyB2N4KWudG+5TAxdo3StR+Roq09WKCmw@mail.gmail.com>
	<CAHMh4-aocHwBWPFQe8+PteiPxdto1NAEgOduBVM9LP=Rn+EAiw@mail.gmail.com>
	<CAP86aOceE4tBFpBM=wwsSRJ4MHHdNouM1EGJLGFgW+wfqKvy1A@mail.gmail.com>
	<CAHMh4-Y04Dbqh8bYMw_-4Vo6BLSW_LHGor2SNHHZAkzbMxPrgg@mail.gmail.com>
Message-ID: <CAHMh4-bPWYTahmp=dQXNp2896z8XLz3AO7G-ADxDPCJz9F8stA@mail.gmail.com>

I hope you understand that by providing templates against virtual
functions, i save 8 bytes for every object. But i saw your last
implementation, where in you converted the function pointers into normal
functions. Is that the approach you are taking( not providing the option to
override )?

Also please point out, why you feel mine will have any performance issues?

Thanks,
Gokul.

On Wed, Feb 1, 2012 at 8:35 AM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> Hi Gokulakannan,
>>
>>   I am also converting to C++ but my goal is primarily performance. I
>> don't intend to use templates.
>>   As far as tradeoffs, the commontoken struct has a field for everything
>> so lookup after lexing is fast but at the cost of memory use. I'm
>> investigating replacing some of these with member functions that only
>> calculate values when needed or redirect to a different data structure.
>>
>>
>> Well my goal is also about performance primarily. Infact that was the
> reason, i choose to work with templates.  Regarding the memory use, your
> attempt will be definitely useful. I can incorporate it, if its proven
> faster. But for the memory issue, i have a different plan altogether. I
> will start it as a new thread, once i finish this development.
>
> Thanks,
> Gokul.
>

