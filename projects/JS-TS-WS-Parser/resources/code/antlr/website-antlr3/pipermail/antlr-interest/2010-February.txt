From ranco.marcus at epirion.nl  Mon Feb  1 01:46:51 2010
From: ranco.marcus at epirion.nl (Ranco Marcus)
Date: Mon, 1 Feb 2010 09:46:51 +0000
Subject: [antlr-interest] How to specify target language from the command
	line?
Message-ID: <2B65C901391C804DBB9CF9E6FE30C6F91499651F@sun.epirion.local>

When no language is specified in the options section, ANTLR defaults to Java. Is it possible to specify the default language when calling org.antlr.tool?

Many of my grammars (lexer, parser, and tree) have no language specific code and specifying the language (CSharp2 in my case) unnecessarily constrains the use of these grammars. To generate recognizers, I have written a (basic) custom tool for Visual Studio that calls ANTLR when changes are made to a .g file. I would like to specify the target language in the command line arguments. This way, the grammar could remain language independent and there would be no need to remove the language option each time the grammar is being debugged in ANTLRWorks.

Btw, Terence, congratulations on the new Language Implementation Patterns book. I read (most of) it last week and really enjoyed it!

Best regards,

Ranco Marcus



From khamenya at gmail.com  Mon Feb  1 02:43:59 2010
From: khamenya at gmail.com (Valery Khamenya)
Date: Mon, 1 Feb 2010 11:43:59 +0100
Subject: [antlr-interest] "prog : .+ ;
	" ==> "no viable alternative at 	character" (antlr-3.1.2)
In-Reply-To: <3cac8fdf1001311544x1a3f9bceyb6891c7e30c66b16@mail.gmail.com>
References: <84fecab1001311440r7aa627e2t9318591653225c42@mail.gmail.com> 
	<84fecab1001311446l74172614v2c51a31b3c2284bb@mail.gmail.com> 
	<3cac8fdf1001311544x1a3f9bceyb6891c7e30c66b16@mail.gmail.com>
Message-ID: <84fecab1002010243h5778d58fv6327aa1c2cb76ed8@mail.gmail.com>

Hi Kirby and all,

> In this case, I'm pretty sure it's because you don't have a lexer rule...

OK, I see, thank you!

Let's try this (pure) lexer grammar:

***************************
lexer grammar ANTLRLexer;
options {
	language=Python;
	k=4;
}
INT: 'int';
ANY: .;
***************************

I expect a token stream in output consisting of single characters and 'int'.
For example: 'inint' ==> ['i', 'n', 'int']

When I feed lexer with 'int' it's OK.
When I feed lexer with 'inX' it's gives me:

  "line 1:2 mismatched character u'x' expecting 't' "

Why there is no rollback from INT rule to ANY by appearance of 'X'?

How to get the expected? (I thought it is solvable on pure lexer level)

Thanks in advance,
Valery

From khamenya at gmail.com  Mon Feb  1 02:52:56 2010
From: khamenya at gmail.com (Valery Khamenya)
Date: Mon, 1 Feb 2010 11:52:56 +0100
Subject: [antlr-interest] "prog : .+ ;
	" ==> "no viable alternative at 	character" (antlr-3.1.2)
In-Reply-To: <84fecab1002010243h5778d58fv6327aa1c2cb76ed8@mail.gmail.com>
References: <84fecab1001311440r7aa627e2t9318591653225c42@mail.gmail.com> 
	<84fecab1001311446l74172614v2c51a31b3c2284bb@mail.gmail.com> 
	<3cac8fdf1001311544x1a3f9bceyb6891c7e30c66b16@mail.gmail.com> 
	<84fecab1002010243h5778d58fv6327aa1c2cb76ed8@mail.gmail.com>
Message-ID: <84fecab1002010252u11d6faf3k9a7f2f394cb592ea@mail.gmail.com>

OK,

filter=true seems to do the magic.

best regards
--
Valery A.Khamenya



On Mon, Feb 1, 2010 at 11:43 AM, Valery Khamenya <khamenya at gmail.com> wrote:
> Hi Kirby and all,
>
>> In this case, I'm pretty sure it's because you don't have a lexer rule...
>
> OK, I see, thank you!
>
> Let's try this (pure) lexer grammar:
>
> ***************************
> lexer grammar ANTLRLexer;
> options {
> ? ? ? ?language=Python;
> ? ? ? ?k=4;
> }
> INT: 'int';
> ANY: .;
> ***************************
>
> I expect a token stream in output consisting of single characters and 'int'.
> For example: 'inint' ==> ['i', 'n', 'int']
>
> When I feed lexer with 'int' it's OK.
> When I feed lexer with 'inX' it's gives me:
>
> ?"line 1:2 mismatched character u'x' expecting 't' "
>
> Why there is no rollback from INT rule to ANY by appearance of 'X'?
>
> How to get the expected? (I thought it is solvable on pure lexer level)
>
> Thanks in advance,
> Valery
>

From stevenraemaekers at gmail.com  Mon Feb  1 04:37:34 2010
From: stevenraemaekers at gmail.com (Steven Raemaekers)
Date: Mon, 1 Feb 2010 13:37:34 +0100
Subject: [antlr-interest] Unknown method for CommonTreeNodeStream:
	getNodeIndex
Message-ID: <46450b021002010437s59e1087ap81f57139b74ca7e4@mail.gmail.com>

Hello,

I'm trying to make a tree walker for an if statement, in which the statement
part should of course only execute when the boolean expression part is true.
The problem is that in an example I found on the internet, I found that I
should use stream.push(...) and stream.pop() to insert tokens into
the stream that should be executed.

The problem is, getNodeIndex does not exist for CommonTreeNodeStream...but
how do I know the index which is needed for stream.push(index)?

ifstatement
@after {
 CommonTree expressionNode = (CommonTree)$ifstatement.start.getChild(0);
CommonTree instructionlistNode = (CommonTree)$ifstatement.start.getChild(1);
 if ($b.value == true)
{
 System.out.println("LogoTree.g, ifstatement evaluates to true");
CommonTreeNodeStream stream = (CommonTreeNodeStream)input;
 stream.push(stream.getNodeIndex(instructionlistNode));
                instructionlist();
                stream.pop();
}
}
: ^(IF b = booleanexpression .)
 ;

This does not work, since getNodeIndex does not exist for
CommonTreeNodeStream. Examples are rather scarce on the internet...something
this elemental should be more easy to implement, this has taken me days
now... Does anybody have any other ideas how to make an if statement? Any
help is greatly appreciated!


-- 
Regards,

Steven Raemaekers

From gokul007 at gmail.com  Mon Feb  1 06:32:44 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 1 Feb 2010 20:02:44 +0530
Subject: [antlr-interest] A bug in C Target Composite grammar
Message-ID: <9362e74e1002010632n54972c04q214eb092df5f88f7@mail.gmail.com>

Hi,
   I found and fixed a runtime bug for C Target w.r.t composite grammar.
Please do the necessary.

I am copy-pasting the C.stg file lines, that i changed.

<if(grammar.directDelegates)>
    // Initialize the parsers that we are going to delegate some
    // functions to.
    //
    <grammar.directDelegates:
      {g|ctx-><g:delegateName()> = <g.recognizerName>NewSSD(instream,
PSRSTATE<grammar.delegators:{g|, <g:delegateName()>}>, ctx);};
separator="\n">
<endif>
<if(grammar.delegators)>
    // Install the pointers back to parsers that will delegate us to perform
certain functions
    // for them.
    //
    <grammar.delegators:
         {g|ctx-><g:delegateName()>            = <g:delegateName()>;};
separator="\n">

 <if(grammar.directDelegates)>
    <grammar.directDelegates:
     {g1|
<grammar.delegators:{g2|ctx-><g2:delegateName()>-><g1:delegateName()>    =
ctx-><g1:delegateName()>;}; separator="\n"> };
     separator="\n">
 <endif>

<endif>

The first highlighted portion fixed a compile time bug and the second
portion fixed the runtime bug. I could see similar lines for lexer also. But
i didn't change them. Please take care of this.

Thanks,
Gokul.

From yotommy at gmail.com  Mon Feb  1 08:15:29 2010
From: yotommy at gmail.com (Tom Smith)
Date: Mon, 1 Feb 2010 11:15:29 -0500
Subject: [antlr-interest] avoiding infinite loop in tree rewriting
Message-ID: <82dc0d191002010815l15a3c243rdf277163ad69e88d@mail.gmail.com>

I could use some design help.

I have an AST that I walk with a few different tree grammars; the last
pass generates output using StringTemplate that matches the AST
structure quite well.

Now I have a new requirement: when a certain subtree is detected, I
need to generate output that largely duplicates an enclosing tree
(with one element of the output changed).

I can see two plausible approaches:

(1) Revise the AST by duplicating (and modifying) the enclosing subtree.

(2) Keep the AST the same, but have StringTemplate generate
nearly-duplicated output.

I tend to favor the first approach, because the revised AST can then
be semantically checked in subsequent passes, and the AST will
continue to match the output templates one-for-one.  However I am
encountering a problem with my current approach.  In a tree grammar
with filter=true, I have this rule:

transition
scope {
	Predicate predicate;
}
	:	^(TRANSITION s1=stateName s2=stateName ab=arcBody[$s1.text])
	-> { $transition::predicate instanceof SucceededPredicate }?
	   ^(TRANSITION $s1 $s2 $ab) ^(TRANSITION $s1 $s2 $ab)
	-> ^(TRANSITION $s1 $s2 $ab)

A subrule of arcBody sets the predicate variable that is scoped to
transition.  If the value is a certain subclass, then I need to
duplicate the enclosing subtree.  (For the moment, I am deferring the
task of modifying the duplicated subtree so that the arcBody is
slightly different.)

When I execute this tree grammar, then I get into an infinite loop,
because I keep inserting subtrees that match the transition rule, and
so on.

Any suggestions?

Thanks,
Tom Smith.

From jimi at temporal-wave.com  Mon Feb  1 08:24:39 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 01 Feb 2010 08:24:39 -0800
Subject: [antlr-interest] A bug in C Target Composite grammar
In-Reply-To: <9362e74e1002010632n54972c04q214eb092df5f88f7@mail.gmail.com>
Message-ID: <e892cd3cf3788440ac81344c7dab9c89@temporal-wave.com>

Can you give me an example of what you were fixing? I do not have any compilation or runtime bugs that I know of. That does not mean they are not there but I need something to test as there are no highlights in this email

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
> Sent: Monday, February 01, 2010 6:33 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] A bug in C Target Composite grammar
> 
> Hi,
>    I found and fixed a runtime bug for C Target w.r.t composite
> grammar.
> Please do the necessary.
> 
> I am copy-pasting the C.stg file lines, that i changed.
> 
> <if(grammar.directDelegates)>
>     // Initialize the parsers that we are going to delegate some
>     // functions to.
>     //
>     <grammar.directDelegates:
>       {g|ctx-><g:delegateName()> = <g.recognizerName>NewSSD(instream,
> PSRSTATE<grammar.delegators:{g|, <g:delegateName()>}>, ctx);};
> separator="\n">
> <endif>
> <if(grammar.delegators)>
>     // Install the pointers back to parsers that will delegate us to
> perform
> certain functions
>     // for them.
>     //
>     <grammar.delegators:
>          {g|ctx-><g:delegateName()>            = <g:delegateName()>;};
> separator="\n">
> 
>  <if(grammar.directDelegates)>
>     <grammar.directDelegates:
>      {g1|
> <grammar.delegators:{g2|ctx-><g2:delegateName()>-><g1:delegateName()>
> =
> ctx-><g1:delegateName()>;}; separator="\n"> };
>      separator="\n">
>  <endif>
> 
> <endif>
> 
> The first highlighted portion fixed a compile time bug and the second
> portion fixed the runtime bug. I could see similar lines for lexer
> also. But
> i didn't change them. Please take care of this.
> 
> Thanks,
> Gokul.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jeff.wilcox at mac.com  Mon Feb  1 09:17:52 2010
From: jeff.wilcox at mac.com (Jeff Wilcox)
Date: Mon, 01 Feb 2010 09:17:52 -0800
Subject: [antlr-interest] Disabling rules in the lexer
In-Reply-To: <29B7ADE0-F06D-4A60-822A-A16E906610E5@mac.com>
References: <29B7ADE0-F06D-4A60-822A-A16E906610E5@mac.com>
Message-ID: <95FC0589-942C-42E5-8E7A-84AE4A81F882@mac.com>

Still waiting for some info on this if anyone has any.  

Thanks
Jeff




On Jan 27, 2010, at 1:22 PM, Jeff Wilcox wrote:

> Yes, I agree with you, and in general this is how my parsers have worked.  But there are a couple cases where disabling lexer rules is useful and/or necessary.  Disable keywords that exist only in newer versions of the language which could be identifiers in older versions for example; there are other semi tedious ways around that with predicates but it should not be necessary. 
> 
> This case though involves a table section of characters, symbols and numbers.  So a N column row of N discrete symbols could otherwise be a single number, a single identifier, a number plus an identifier, etc.  So without special casing the lexer, the easiest thing was to accept possible candidates, suck it all into a string a re-parse in the semantic analyzer.  But that feels like the wrong solution.  
> 
> In general though, it seems like there is a bug in ANLTR's treatment of gated semantic predicates in the lexer.  It does not work unless there are other alternatives in the rule.
> 
> Is there any other way to completely turn off a rule in the lexer (without throwing a FPE)?
> 
> Thanks,
> Jeff
> 
> 
> On Jan 26, 2010, at 8:58 PM, William B. Clodius wrote:
>> Generally don't try to be too restrictive with your lexer and parser. This sort of context dependence is more naturally handled in the semantic analysis. In particular error reporting is much better if you accept things that are ultimately illegal in the lexer and parser and determine whether they are they are illegal in the semantic analysis. Instead of a minimal message such as "Illegal token" you can report "Illegal token for the table structure see constraint # in the language definition", or "Token is not one of the set of ..."
>> 
>> On Jan 26, 2010, at 7:52 AM, Jeff Wilcox wrote:
>> 
>>> Hi,
>>> 
>>> I have a special area in this language that has symbols within a table structure that are normally used in other tokens in other areas of the language (like a couple digits, a couple letters and a couple symbols).  So I am trying to setup the lexer to accept these table tokens only when in a table.  Based on what I have been able to dig up, I believe gated semantic predicates are a valid way to disable rules in the lexer.  However, I am seeing issues with this with ANTLR 3.2 and the java language target.  
>>> 
>>> So I expected a lexer rules like this to do the trick:  
>>> 
>>> Level0       : {inTable}?=> '0';
>>> 
>>> But that actually creates a very strange loop when inTable is false.  I basically throws a FailedPredicateException (which I would not have expected for a gated predicate) and then retries the same token with the same rule, obviously resulting in an infinite loop.
>>> 
>>> Can someone clarify whether this is allowed and if so whether there is some trick to using it?  I am stumped.  
>>> 
>>> Thanks
>>> Jeff
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Mon Feb  1 09:48:09 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 1 Feb 2010 23:18:09 +0530
Subject: [antlr-interest] A bug in C Target Composite grammar
In-Reply-To: <e892cd3cf3788440ac81344c7dab9c89@temporal-wave.com>
References: <9362e74e1002010632n54972c04q214eb092df5f88f7@mail.gmail.com>
	<e892cd3cf3788440ac81344c7dab9c89@temporal-wave.com>
Message-ID: <9362e74e1002010948nb708bdck8bd09bdb6b9a0cbb@mail.gmail.com>

OK, i will try to explain, as i am restricted not to share my source.

Assume the hierarchy is A->B->C->D->E

Now E holds a pointer to A, B, C and D. D holds  a pointer to A, B and C and
so on.

Now the creation of A happens inside B and creation of B happens inside C
and so on

Now when creation of B happens, only the pointer of B inside C gets updated.
But there are pointers to B from inside D and E also. They are not getting
updated. Now a function call happens through null pointer, the runtime
crashes. So my code just assigns the pointer to other structures which are
above the hierarchy of the structure, which created the sub-parser.

Please let me know, if i am unclear in my explanation.

Thanks,
Gokul.


On Mon, Feb 1, 2010 at 9:54 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> Can you give me an example of what you were fixing? I do not have any
> compilation or runtime bugs that I know of. That does not mean they are not
> there but I need something to test as there are no highlights in this email
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
> > Sent: Monday, February 01, 2010 6:33 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] A bug in C Target Composite grammar
> >
> > Hi,
> >    I found and fixed a runtime bug for C Target w.r.t composite
> > grammar.
> > Please do the necessary.
> >
> > I am copy-pasting the C.stg file lines, that i changed.
> >
> > <if(grammar.directDelegates)>
> >     // Initialize the parsers that we are going to delegate some
> >     // functions to.
> >     //
> >     <grammar.directDelegates:
> >       {g|ctx-><g:delegateName()> = <g.recognizerName>NewSSD(instream,
> > PSRSTATE<grammar.delegators:{g|, <g:delegateName()>}>, ctx);};
> > separator="\n">
> > <endif>
> > <if(grammar.delegators)>
> >     // Install the pointers back to parsers that will delegate us to
> > perform
> > certain functions
> >     // for them.
> >     //
> >     <grammar.delegators:
> >          {g|ctx-><g:delegateName()>            = <g:delegateName()>;};
> > separator="\n">
> >
> >  <if(grammar.directDelegates)>
> >     <grammar.directDelegates:
> >      {g1|
> > <grammar.delegators:{g2|ctx-><g2:delegateName()>-><g1:delegateName()>
> > =
> > ctx-><g1:delegateName()>;}; separator="\n"> };
> >      separator="\n">
> >  <endif>
> >
> > <endif>
> >
> > The first highlighted portion fixed a compile time bug and the second
> > portion fixed the runtime bug. I could see similar lines for lexer
> > also. But
> > i didn't change them. Please take care of this.
> >
> > Thanks,
> > Gokul.
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Mon Feb  1 10:17:44 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 01 Feb 2010 10:17:44 -0800
Subject: [antlr-interest] A bug in C Target Composite grammar
In-Reply-To: <9362e74e1002010948nb708bdck8bd09bdb6b9a0cbb@mail.gmail.com>
Message-ID: <146abe5b23432e4f8f042fc5cca492ed@temporal-wave.com>

OK - that's good enough - I can reproduce from there. I guess I wasn't thinking about people importing within imports ;-) I usually just have a master grammar that imports everything else.
 
Jim
 
From: Gokulakannan Somasundaram [mailto:gokul007 at gmail.com] 
Sent: Monday, February 01, 2010 9:48 AM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] A bug in C Target Composite grammar
 
OK, i will try to explain, as i am restricted not to share my source. 

Assume the hierarchy is A->B->C->D->E

Now E holds a pointer to A, B, C and D. D holds  a pointer to A, B and C and so on.

Now the creation of A happens inside B and creation of B happens inside C and so on

Now when creation of B happens, only the pointer of B inside C gets updated. But there are pointers to B from inside D and E also. They are not getting updated. Now a function call happens through null pointer, the runtime crashes. So my code just assigns the pointer to other structures which are above the hierarchy of the structure, which created the sub-parser.

Please let me know, if i am unclear in my explanation.

Thanks,
Gokul.


On Mon, Feb 1, 2010 at 9:54 PM, Jim Idle <jimi at temporal-wave.com> wrote:
Can you give me an example of what you were fixing? I do not have any compilation or runtime bugs that I know of. That does not mean they are not there but I need something to test as there are no highlights in this email

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
> Sent: Monday, February 01, 2010 6:33 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] A bug in C Target Composite grammar
>
> Hi,
>    I found and fixed a runtime bug for C Target w.r.t composite
> grammar.
> Please do the necessary.
>
> I am copy-pasting the C.stg file lines, that i changed.
>
> <if(grammar.directDelegates)>
>     // Initialize the parsers that we are going to delegate some
>     // functions to.
>     //
>     <grammar.directDelegates:
>       {g|ctx-><g:delegateName()> = <g.recognizerName>NewSSD(instream,
> PSRSTATE<grammar.delegators:{g|, <g:delegateName()>}>, ctx);};
> separator="\n">
> <endif>
> <if(grammar.delegators)>
>     // Install the pointers back to parsers that will delegate us to
> perform
> certain functions
>     // for them.
>     //
>     <grammar.delegators:
>          {g|ctx-><g:delegateName()>            = <g:delegateName()>;};
> separator="\n">
>
>  <if(grammar.directDelegates)>
>     <grammar.directDelegates:
>      {g1|
> <grammar.delegators:{g2|ctx-><g2:delegateName()>-><g1:delegateName()>
> =
> ctx-><g1:delegateName()>;}; separator="\n"> };
>      separator="\n">
>  <endif>
>
> <endif>
>
> The first highlighted portion fixed a compile time bug and the second
> portion fixed the runtime bug. I could see similar lines for lexer
> also. But
> i didn't change them. Please take care of this.
>
> Thanks,
> Gokul.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
 



From parrt at cs.usfca.edu  Mon Feb  1 10:34:43 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Feb 2010 10:34:43 -0800
Subject: [antlr-interest] Unknown method for CommonTreeNodeStream:
	getNodeIndex
In-Reply-To: <46450b021002010437s59e1087ap81f57139b74ca7e4@mail.gmail.com>
References: <46450b021002010437s59e1087ap81f57139b74ca7e4@mail.gmail.com>
Message-ID: <5596DEE3-6619-49A1-BDA5-3DBDC4A1D5B4@cs.usfca.edu>

Hi Steven, I'd recommend staying away from tree-based interpreters that need to jump around. The code samples for my book, which are free, gives you an example though. I've moved away from that node Index stuff.

Ter
On Feb 1, 2010, at 4:37 AM, Steven Raemaekers wrote:

> Hello,
> 
> I'm trying to make a tree walker for an if statement, in which the statement
> part should of course only execute when the boolean expression part is true.
> The problem is that in an example I found on the internet, I found that I
> should use stream.push(...) and stream.pop() to insert tokens into
> the stream that should be executed.
> 
> The problem is, getNodeIndex does not exist for CommonTreeNodeStream...but
> how do I know the index which is needed for stream.push(index)?
> 
> ifstatement
> @after {
> CommonTree expressionNode = (CommonTree)$ifstatement.start.getChild(0);
> CommonTree instructionlistNode = (CommonTree)$ifstatement.start.getChild(1);
> if ($b.value == true)
> {
> System.out.println("LogoTree.g, ifstatement evaluates to true");
> CommonTreeNodeStream stream = (CommonTreeNodeStream)input;
> stream.push(stream.getNodeIndex(instructionlistNode));
>                instructionlist();
>                stream.pop();
> }
> }
> : ^(IF b = booleanexpression .)
> ;
> 
> This does not work, since getNodeIndex does not exist for
> CommonTreeNodeStream. Examples are rather scarce on the internet...something
> this elemental should be more easy to implement, this has taken me days
> now... Does anybody have any other ideas how to make an if statement? Any
> help is greatly appreciated!
> 
> 
> -- 
> Regards,
> 
> Steven Raemaekers
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From y.bahador at gmail.com  Mon Feb  1 10:54:16 2010
From: y.bahador at gmail.com (Bahador Yeganeh)
Date: Mon, 1 Feb 2010 22:24:16 +0330
Subject: [antlr-interest] Export Parse Tree Graph
Message-ID: <7f7af9cb1002011054t3dbb8196v84b2c7beba2462ea@mail.gmail.com>

Hi,
I'm currently using ANTLR v3 with the language = Python option.
Is there a way to export the interpreted parse tree graph(as seen in the
interpreter section of ANTLRWorks) to a dot file or a bitmap image without
using ANTLRWorks?
With thanks.

From candide at palacehotel.org  Mon Feb  1 10:58:11 2010
From: candide at palacehotel.org (Candide Kemmler)
Date: Mon, 1 Feb 2010 19:58:11 +0100
Subject: [antlr-interest] lexer rules for urls
Message-ID: <EA046C5A-9E1B-4B6B-92B7-BC8CB118D800@palacehotel.org>

Hi,

Just a stupid question:  anyone knowing if there is a stock set of rules for parsing URLs in antlr somewhere?

Candide

From parrt at cs.usfca.edu  Mon Feb  1 11:40:36 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Feb 2010 11:40:36 -0800
Subject: [antlr-interest] ANTLRWorks editor slow down
Message-ID: <D983C8D3-96E4-4452-BA2E-F66951E9C9E3@cs.usfca.edu>

Hi,

Jean and I are re-factoring ANTLRWorks to be much simpler in anticipation of me taking over maintenance and adding features. The first thing I want to do is find out why AW sometimes slows to a crawl. I can't seem to reproduce it when I want to, although it was really really slow the other day before I decided to debug it! ;)  

So, I need your help to figure out when it occurs so that it will give me a clue about where to look in the source code.   My impression is that one of the triggers seems to be when there are lots of errors. But, when I added a whole bunch of grammar windows and then started randomly inserting errors all over the grammar, memory usage didn't really go up and it didn't slow down at all (lots other errors to the console, but that's it). I wonder though if it was getting more memory available to it in the debugger than when I run it from the jar file. Also, I note that sometimes undo is extremely slow, so that is also a potential area to look.

My current candidates for slowdown:

* running out of memory and thrashing
* undo mechanism is tracking too much or something
* error mechanism somehow  tracks too much or has too much work to do

Each keystroke triggers colorizing the editor window, but Jean tells me he's sure that the parser itself is okay. might be the error handling though.

Can anybody reproduce a case where you start ANTLRWorks and then do some stuff in the editor window with a grammar (of any size) and it starts to get really slow to type? Even if you can't send me your grammar, I can send you an instrumented version of AW that will turn out some information about what is going on.

Thanks! This is my highest priority for AW since I'm using it to build v4 ANTLR.

Thanks,
Ter

From boughtonp at gmail.com  Mon Feb  1 12:03:12 2010
From: boughtonp at gmail.com (Peter Boughton)
Date: Mon, 1 Feb 2010 20:03:12 +0000
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <D983C8D3-96E4-4452-BA2E-F66951E9C9E3@cs.usfca.edu>
References: <D983C8D3-96E4-4452-BA2E-F66951E9C9E3@cs.usfca.edu>
Message-ID: <5d97c171002011203h2458b0d6r900b8aee16b5f31e@mail.gmail.com>

Not sure if this helps, but I just view-sourced a gmail page and
dumped it into a fresh AW session, effectively producing an 800 line
nonsense grammar.

This caused AW to go incredibly sluggish, typing takiing ages, with
the process hogging a whole CPU core, until I killed it. No
significant memory increase though.

(This is on Win XP with Java 1.6)

From parrt at cs.usfca.edu  Mon Feb  1 12:05:42 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Feb 2010 12:05:42 -0800
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <5d97c171002011203h2458b0d6r900b8aee16b5f31e@mail.gmail.com>
References: <D983C8D3-96E4-4452-BA2E-F66951E9C9E3@cs.usfca.edu>
	<5d97c171002011203h2458b0d6r900b8aee16b5f31e@mail.gmail.com>
Message-ID: <8ECB2795-DEFD-4AED-8029-02D1F959E586@cs.usfca.edu>

wow! a hit! let me try.
Ter
On Feb 1, 2010, at 12:03 PM, Peter Boughton wrote:

> Not sure if this helps, but I just view-sourced a gmail page and
> dumped it into a fresh AW session, effectively producing an 800 line
> nonsense grammar.
> 
> This caused AW to go incredibly sluggish, typing takiing ages, with
> the process hogging a whole CPU core, until I killed it. No
> significant memory increase though.
> 
> (This is on Win XP with Java 1.6)


From parrt at cs.usfca.edu  Mon Feb  1 12:17:44 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 1 Feb 2010 12:17:44 -0800
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <5d97c171002011203h2458b0d6r900b8aee16b5f31e@mail.gmail.com>
References: <D983C8D3-96E4-4452-BA2E-F66951E9C9E3@cs.usfca.edu>
	<5d97c171002011203h2458b0d6r900b8aee16b5f31e@mail.gmail.com>
Message-ID: <E845B98B-2D98-4323-9195-379B4A1C837B@cs.usfca.edu>

that's it. got it! thanks. seems to be error handling.
Ter

From yurushkin at rambler.ru  Mon Feb  1 12:48:17 2010
From: yurushkin at rambler.ru (=?koi8-r?B?4NLV28vJziDtycjBycw=?=)
Date: Mon, 01 Feb 2010 23:48:17 +0300
Subject: [antlr-interest] adding child node in rewring rule
Message-ID: <op.u7guqrcit3jqlu@win-mupvrp0jyrf>

Hello,
Could you help me with following problem:

I try to parse do_stmts of fortran (incudining non-block)

there is a part of grammar

do_construct
   :  do_stmt
         ( ( {blablabla}?=>  (exec_construct | end_do) ) )+	
      -> ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)

as you can see, (..)+ cycle can be stopped by blablabla predicate.

What I need:
if the last stmt is exec_construct, I want to generate the following:
   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)

If the last stmt is end_do, I want to generate the following:
   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* end_do)

what can you suggest?
thanks a lot

-- 
Best regards,
Michael

From wclodius at los-alamos.net  Mon Feb  1 18:37:04 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Mon, 1 Feb 2010 19:37:04 -0700
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <D983C8D3-96E4-4452-BA2E-F66951E9C9E3@cs.usfca.edu>
References: <D983C8D3-96E4-4452-BA2E-F66951E9C9E3@cs.usfca.edu>
Message-ID: <57B38C1C-B49E-4D6C-8BFF-891980AFF6BE@los-alamos.net>

Terr:

What I have noticed with ANTLRWorks. The first version I started with didn't seem to have the performance and stability problems. My current version 1.3.1 does have them. I think I went through two semi-automatic upgrades (Two notifications that upgrades were available which I naturally accepted.) This version checks for ANTLR syntax errors with every keystroke, which I don't recall for my first version. So I would definitely check out recent changes.

The slowdown takes a while to appear. I think I have it more often when I am working with the string template generator files than with my large toy grammar, but I have definitely seen it with both. FWIW my suspicion is a memory leak, but there are other possibilities. I believe there was talk a few months ago of using Java's unbuffered IO as the default for ANTLR itself, which can have serious performance problems, but I suspect is not the cause here. Java's poor default hash function could also be a contributor, but that suspicion could just be because I am reading Valloud's text, and he has strong opinions on that topic.

On Feb 1, 2010, at 12:40 PM, Terence Parr wrote:

> Hi,
> 
> Jean and I are re-factoring ANTLRWorks to be much simpler in anticipation of me taking over maintenance and adding features. The first thing I want to do is find out why AW sometimes slows to a crawl. I can't seem to reproduce it when I want to, although it was really really slow the other day before I decided to debug it! ;)  
> 
> So, I need your help to figure out when it occurs so that it will give me a clue about where to look in the source code.   My impression is that one of the triggers seems to be when there are lots of errors. But, when I added a whole bunch of grammar windows and then started randomly inserting errors all over the grammar, memory usage didn't really go up and it didn't slow down at all (lots other errors to the console, but that's it). I wonder though if it was getting more memory available to it in the debugger than when I run it from the jar file. Also, I note that sometimes undo is extremely slow, so that is also a potential area to look.
> 
> My current candidates for slowdown:
> 
> * running out of memory and thrashing
> * undo mechanism is tracking too much or something
> * error mechanism somehow  tracks too much or has too much work to do
> 
> Each keystroke triggers colorizing the editor window, but Jean tells me he's sure that the parser itself is okay. might be the error handling though.
> 
> Can anybody reproduce a case where you start ANTLRWorks and then do some stuff in the editor window with a grammar (of any size) and it starts to get really slow to type? Even if you can't send me your grammar, I can send you an instrumented version of AW that will turn out some information about what is going on.
> 
> Thanks! This is my highest priority for AW since I'm using it to build v4 ANTLR.
> 
> Thanks,
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From ronburk at gmail.com  Mon Feb  1 23:26:02 2010
From: ronburk at gmail.com (Ron Burk)
Date: Mon, 1 Feb 2010 23:26:02 -0800
Subject: [antlr-interest] ANTLR treatment of non-LL-ness
Message-ID: <30dde8ce1002012326i7b569a7eq1f265e50df28e970@mail.gmail.com>

Pardon my newbie question, but some googling failed to turn up what I
was looking for:

The thread on parser generation taking hours, apparently because of
being handed a grammar that wasn't LL(1) had me scratching my head.
Does ANTLR not confirm that the input grammar is acceptable and
immediately point out the cause if the grammar is not acceptable?

From jimi at temporal-wave.com  Tue Feb  2 09:56:10 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 02 Feb 2010 09:56:10 -0800
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <57B38C1C-B49E-4D6C-8BFF-891980AFF6BE@los-alamos.net>
Message-ID: <a760a016590cdf46b818adcf3c907407@temporal-wave.com>

Ter,

That performance/reference leak checker that we were given licenses for as opensource dudes is really bloody good. Paste in a nice big grammar and keep generating code and editing. You should find the issues pretty quickly with that. It integrates really well with Netbeans so I assume it also integrates well with your IDE too.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of William B. Clodius
> Sent: Monday, February 01, 2010 6:37 PM
> To: antlr-interest interest
> Subject: Re: [antlr-interest] ANTLRWorks editor slow down
> 
> Terr:
> 
> What I have noticed with ANTLRWorks. The first version I started with
> didn't seem to have the performance and stability problems. My current
> version 1.3.1 does have them. I think I went through two semi-automatic
> upgrades (Two notifications that upgrades were available which I
> naturally accepted.) This version checks for ANTLR syntax errors with
> every keystroke, which I don't recall for my first version. So I would
> definitely check out recent changes.
> 
> The slowdown takes a while to appear. I think I have it more often when
> I am working with the string template generator files than with my
> large toy grammar, but I have definitely seen it with both. FWIW my
> suspicion is a memory leak, but there are other possibilities. I
> believe there was talk a few months ago of using Java's unbuffered IO
> as the default for ANTLR itself, which can have serious performance
> problems, but I suspect is not the cause here. Java's poor default hash
> function could also be a contributor, but that suspicion could just be
> because I am reading Valloud's text, and he has strong opinions on that
> topic.
> 
> On Feb 1, 2010, at 12:40 PM, Terence Parr wrote:
> 
> > Hi,
> >
> > Jean and I are re-factoring ANTLRWorks to be much simpler in
> anticipation of me taking over maintenance and adding features. The
> first thing I want to do is find out why AW sometimes slows to a crawl.
> I can't seem to reproduce it when I want to, although it was really
> really slow the other day before I decided to debug it! ;)
> >
> > So, I need your help to figure out when it occurs so that it will
> give me a clue about where to look in the source code.   My impression
> is that one of the triggers seems to be when there are lots of errors.
> But, when I added a whole bunch of grammar windows and then started
> randomly inserting errors all over the grammar, memory usage didn't
> really go up and it didn't slow down at all (lots other errors to the
> console, but that's it). I wonder though if it was getting more memory
> available to it in the debugger than when I run it from the jar file.
> Also, I note that sometimes undo is extremely slow, so that is also a
> potential area to look.
> >
> > My current candidates for slowdown:
> >
> > * running out of memory and thrashing
> > * undo mechanism is tracking too much or something
> > * error mechanism somehow  tracks too much or has too much work to do
> >
> > Each keystroke triggers colorizing the editor window, but Jean tells
> me he's sure that the parser itself is okay. might be the error
> handling though.
> >
> > Can anybody reproduce a case where you start ANTLRWorks and then do
> some stuff in the editor window with a grammar (of any size) and it
> starts to get really slow to type? Even if you can't send me your
> grammar, I can send you an instrumented version of AW that will turn
> out some information about what is going on.
> >
> > Thanks! This is my highest priority for AW since I'm using it to
> build v4 ANTLR.
> >
> > Thanks,
> > Ter
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> >
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From greneche.hugo at gmail.com  Tue Feb  2 10:03:52 2010
From: greneche.hugo at gmail.com (Hugo)
Date: Tue, 02 Feb 2010 19:03:52 +0100
Subject: [antlr-interest] ambiguous parsing
Message-ID: <4B686908.4090704@gmail.com>

hi, sorry for this basic question but i try to parse a specific language.

my problem is that my language could have :

a variable declaration like this:

var tmp = ABCDEF09   where ABCDEF09 is considered as hexadecimal string

and a function declaration like this

func ABCDEF09 where ABCDEF09 is considered as normal user defined 
function identifier

my question is how could i make the distinguish between this 2 case

thanks a lot



From jsrs701 at yahoo.com  Tue Feb  2 10:10:16 2010
From: jsrs701 at yahoo.com (J. Stephen Riley Silber)
Date: Tue, 2 Feb 2010 10:10:16 -0800 (PST)
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <a760a016590cdf46b818adcf3c907407@temporal-wave.com>
References: <a760a016590cdf46b818adcf3c907407@temporal-wave.com>
Message-ID: <710941.80329.qm@web33301.mail.mud.yahoo.com>

Jim, don't tease us!  What's the name of this product?  Sounds like a useful one.




________________________________
From: Jim Idle <jimi at temporal-wave.com>
To: antlr-interest interest <antlr-interest at antlr.org>
Sent: Tue, February 2, 2010 9:56:10 AM
Subject: Re: [antlr-interest] ANTLRWorks editor slow down

Ter,

That performance/reference leak checker that we were given licenses for as opensource dudes is really bloody good. Paste in a nice big grammar and keep generating code and editing. You should find the issues pretty quickly with that. It integrates really well with Netbeans so I assume it also integrates well with your IDE too.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of William B. Clodius
> Sent: Monday, February 01, 2010 6:37 PM
> To: antlr-interest interest
> Subject: Re: [antlr-interest] ANTLRWorks editor slow down
> 
> Terr:
> 
> What I have noticed with ANTLRWorks. The first version I started with
> didn't seem to have the performance and stability problems. My current
> version 1.3.1 does have them. I think I went through two semi-automatic
> upgrades (Two notifications that upgrades were available which I
> naturally accepted.) This version checks for ANTLR syntax errors with
> every keystroke, which I don't recall for my first version. So I would
> definitely check out recent changes.
> 
> The slowdown takes a while to appear. I think I have it more often when
> I am working with the string template generator files than with my
> large toy grammar, but I have definitely seen it with both. FWIW my
> suspicion is a memory leak, but there are other possibilities. I
> believe there was talk a few months ago of using Java's unbuffered IO
> as the default for ANTLR itself, which can have serious performance
> problems, but I suspect is not the cause here. Java's poor default hash
> function could also be a contributor, but that suspicion could just be
> because I am reading Valloud's text, and he has strong opinions on that
> topic.
> 
> On Feb 1, 2010, at 12:40 PM, Terence Parr wrote:
> 
> > Hi,
> >
> > Jean and I are re-factoring ANTLRWorks to be much simpler in
> anticipation of me taking over maintenance and adding features. The
> first thing I want to do is find out why AW sometimes slows to a crawl.
> I can't seem to reproduce it when I want to, although it was really
> really slow the other day before I decided to debug it! ;)
> >
> > So, I need your help to figure out when it occurs so that it will
> give me a clue about where to look in the source code.   My impression
> is that one of the triggers seems to be when there are lots of errors.
> But, when I added a whole bunch of grammar windows and then started
> randomly inserting errors all over the grammar, memory usage didn't
> really go up and it didn't slow down at all (lots other errors to the
> console, but that's it). I wonder though if it was getting more memory
> available to it in the debugger than when I run it from the jar file.
> Also, I note that sometimes undo is extremely slow, so that is also a
> potential area to look.
> >
> > My current candidates for slowdown:
> >
> > * running out of memory and thrashing
> > * undo mechanism is tracking too much or something
> > * error mechanism somehow  tracks too much or has too much work to do
> >
> > Each keystroke triggers colorizing the editor window, but Jean tells
> me he's sure that the parser itself is okay. might be the error
> handling though.
> >
> > Can anybody reproduce a case where you start ANTLRWorks and then do
> some stuff in the editor window with a grammar (of any size) and it
> starts to get really slow to type? Even if you can't send me your
> grammar, I can send you an instrumented version of AW that will turn
> out some information about what is going on.
> >
> > Thanks! This is my highest priority for AW since I'm using it to
> build v4 ANTLR.
> >
> > Thanks,
> > Ter
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> >
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Tue Feb  2 11:09:14 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 2 Feb 2010 11:09:14 -0800
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <710941.80329.qm@web33301.mail.mud.yahoo.com>
References: <a760a016590cdf46b818adcf3c907407@temporal-wave.com>
	<710941.80329.qm@web33301.mail.mud.yahoo.com>
Message-ID: <906576DD-C751-4ACD-B59D-8A56FADFC133@cs.usfca.edu>


On Feb 2, 2010, at 10:10 AM, J. Stephen Riley Silber wrote:

> Jim, don't tease us!  What's the name of this product?  Sounds like a useful one.
> 

Is that the yourkit profiler?

Ter

From jimi at temporal-wave.com  Tue Feb  2 11:13:04 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 02 Feb 2010 11:13:04 -0800
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <906576DD-C751-4ACD-B59D-8A56FADFC133@cs.usfca.edu>
Message-ID: <23f0db67a51bc04ea2ede632ad0e02e6@temporal-wave.com>

Yes

> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: Tuesday, February 02, 2010 11:09 AM
> To: J. Stephen Riley Silber
> Cc: Jim Idle; antlr-interest interest
> Subject: Re: [antlr-interest] ANTLRWorks editor slow down
> 
> 
> On Feb 2, 2010, at 10:10 AM, J. Stephen Riley Silber wrote:
> 
> > Jim, don't tease us!  What's the name of this product?  Sounds like a
> useful one.
> >
> 
> Is that the yourkit profiler?
> 
> Ter




From greneche.hugo at gmail.com  Tue Feb  2 11:16:27 2010
From: greneche.hugo at gmail.com (Hugo)
Date: Tue, 02 Feb 2010 20:16:27 +0100
Subject: [antlr-interest] architecture question
Message-ID: <4B687A0B.2030300@gmail.com>

hi,
i have a general question about performance,
i want to develop my own scripting language.

for performance i'll want to directly perform code operation when a rule 
is detected.
is it the best way or AST construction and tree parsing to execute the 
code is a better way ?

I case of directly executing the code how can i perform a 'if' cond 
block 'else' block 'end' rule ? the goal is to not perform parsing if 
the cond is not satisfied.

thanks in advance


From jimi at temporal-wave.com  Tue Feb  2 11:11:36 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 02 Feb 2010 11:11:36 -0800
Subject: [antlr-interest] ANTLRWorks editor slow down
In-Reply-To: <710941.80329.qm@web33301.mail.mud.yahoo.com>
Message-ID: <8ca83eab41e5264897979358e4427852@temporal-wave.com>

 
http://www.yourkit.com/
 
Jim
 
From: J. Stephen Riley Silber [mailto:jsrs701 at yahoo.com] 
Sent: Tuesday, February 02, 2010 10:10 AM
To: Jim Idle; antlr-interest interest
Subject: Re: [antlr-interest] ANTLRWorks editor slow down
 
Jim, don't tease us!  What's the name of this product?  Sounds like a useful one.
 
  _____  

From: Jim Idle <jimi at temporal-wave.com>
To: antlr-interest interest <antlr-interest at antlr.org>
Sent: Tue, February 2, 2010 9:56:10 AM
Subject: Re: [antlr-interest] ANTLRWorks editor slow down

Ter,

That performance/reference leak checker that we were given licenses for as opensource dudes is really bloody good. Paste in a nice big grammar and keep generating code and editing. You should find the issues pretty quickly with that. It integrates really well with Netbeans so I assume it also integrates well with your IDE too.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of William B. Clodius
> Sent: Monday, February 01, 2010 6:37 PM
> To: antlr-interest interest
> Subject: Re: [antlr-interest] ANTLRWorks editor slow down
> 
> Terr:
> 
> What I have noticed with ANTLRWorks. The first version I started with
> didn't seem to have the performance and stability problems. My current
> version 1.3.1 does have them. I think I went through two semi-automatic
> upgrades (Two notifications that upgrades were available which I
> naturally accepted.) This version checks for ANTLR syntax errors with
> every keystroke, which I don't recall for my first version. So I would
> definitely check out recent changes.
> 
> The slowdown takes a while to appear. I think I have it more often when
> I am working with the string template generator files than with my
> large toy grammar, but I have definitely seen it with both. FWIW my
> suspicion is a memory leak, but there are other possibilities. I
> believe there was talk a few months ago of using Java's unbuffered IO
> as the default for ANTLR itself, which can have serious performance
> problems, but I suspect is not the cause here. Java's poor default hash
> function could also be a contributor, but that suspicion could just be
> because I am reading Valloud's text, and he has strong opinions on that
> topic.
> 
> On Feb 1, 2010, at 12:40 PM, Terence Parr wrote:
> 
> > Hi,
> >
> > Jean and I are re-factoring ANTLRWorks to be much simpler in
> anticipation of me taking over maintenance and adding features. The
> first thing I want to do is find out why AW sometimes slows to a crawl.
> I can't seem to reproduce it when I want to, although it was really
> really slow the other day before I decided to debug it! ;)
> >
> > So, I need your help to figure out when it occurs so that it will
> give me a clue about where to look in the source code.  My impression
> is that one of the triggers seems to be when there are lots of errors.
> But, when I added a whole bunch of grammar windows and then started
> randomly inserting errors all over the grammar, memory usage didn't
> really go up and it didn't slow down at all (lots other errors to the
> console, but that's it). I wonder though if it was getting more memory
> available to it in the debugger than when I run it from the jar file.
> Also, I note that sometimes undo is extremely slow, so that is also a
> potential area to look.
> >
> > My current candidates for slowdown:
> >
> > * running out of memory and thrashing
> > * undo mechanism is tracking too much or something
> > * error mechanism somehow  tracks too much or has too much work to do
> >
> > Each keystroke triggers colorizing the editor window, but Jean tells
> me he's sure that the parser itself is okay. might be the error
> handling though.
> >
> > Can anybody reproduce a case where you start ANTLRWorks and then do
> some stuff in the editor window with a grammar (of any size) and it
> starts to get really slow to type? Even if you can't send me your
> grammar, I can send you an instrumented version of AW that will turn
> out some information about what is going on.
> >
> > Thanks! This is my highest priority for AW since I'm using it to
> build v4 ANTLR.
> >
> > Thanks,
> > Ter
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> >
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From code_dude at nym.hush.com  Tue Feb  2 13:35:47 2010
From: code_dude at nym.hush.com (code_dude at nym.hush.com)
Date: Tue, 02 Feb 2010 22:35:47 +0100
Subject: [antlr-interest] Antlr 3 C++ module
Message-ID: <20100202213547.7414420045@smtp.hushmail.com>

Hi Guys,
  Any one got a time-line on when the antlr3 code will support a 
C++ runtime ?


From kyledr at gmail.com  Tue Feb  2 14:37:39 2010
From: kyledr at gmail.com (Kyle Robson)
Date: Tue, 2 Feb 2010 16:37:39 -0600
Subject: [antlr-interest] BETA Grammar
Message-ID: <2c6275e61002021437v693fec49u38c8d954b7646011@mail.gmail.com>

Hi all, I have a grammar here that is giving me a null pointer
exception when I try to use the ANTLR tool on it. It's too large, and
there's so much going on, that I don't know where to begin debugging
it. I assume I may have some common problem that I need to fix
throughout.

The grammar is based off the book here:
http://www.daimi.au.dk/~beta/Books/index.html#betabook_download

My (very straightforward) implementation of it is here:
http://paste-it.net/public/qac33be/

Here's the full text in case that link dies:

grammar Beta;
options {
    output=AST;
    ASTLabelType=CommonTree; // type of $stat.tree ref etc...
}

//BetaForm:   ( stat {System.out.println($stat.tree.toStringTree());} )+ ;
Beta:   ( BetaForm {System.out.println($BetaForm.tree.toStringTree());} )+ ;
BetaForm:	DescriptorForm
	|	AttributesForm
	;
DescriptorForm
	:	ObjectDescriptor
	;
AttributesForm
	:	Attributes
	;
ObjectDescriptor
	:	SuperPatternOpt MainPart
	;
MainPart:	'(#' Attributes ActionPart '#)'
	;
Attributes
	:	(AttributeDeclOpt)+
	;
SuperPatternOpt
	:	(SuperPattern)?
	;
SuperPattern
	:	AttributeDenotation
	;
AttributeDeclOpt: 	(AttributeDecl)?
	;
AttributeDecl
	:	PatternDecl
	|	SimpleDecl
	|	RepetitionDecl
    ;

PatternDecl
	:	Names ':' ObjectDescriptor -> Names ':' ObjectDescriptor
	;

SimpleDecl
	:	Names ':' ReferenceSpecification -> Names ':' ReferenceSpecification
	;

RepetitionDecl
	:	Names ':' '[' Index ']' ReferenceSpecification
	;

ReferenceSpecification
	:	StaticItem
	|	DynamicItem
	|	StaticComponent
	|	DynamicComponent
	;
StaticItem
	:	'@' ObjectSpecification -> '@' ObjectSpecification
	;
DynamicItem
	:	'^' AttributeDenotation
	;
StaticComponent
	:	'@'
	|	ObjectSpecification
	;
DynamicComponent
	:	'^'
	|	AttributeDenotation
	;
ObjectSpecification
	:	ObjectDescriptor
	|	AttributeDenotation
	;
Index	:	SimpleIndex
	|	NamedIndex
	;
NamedIndex
	:	NameDcl ':' Evaluation
	;
ActionPart
	:	EnterPartOpt DoPartOpt ExitPartOpt
	;
EnterPartOpt
	:	(EnterPart)?
	;
EnterPart
	:	'enter' Evaluation
	;
DoPartOpt
	:	(DoPart)?
	;
DoPart	:	'do' Imperatives
	;
ExitPartOpt
	:	(ExitPart)?
	;
ExitPart:	'exit' Evaluation;
Imperatives
	:	(ImpOpt ';')+
	;
ImpOpt	:	(Imp)?
	;
Imp	:	LabelledImp
	|	LabelledCompoundImp
	|	ForImp
	|	IfImp
	|	LeaveImp
	|	RestartImp
	|	InnerImp
	|	SuspendImp
	|	Evaluation
	;
LabelledImp
	:	NameDcl ':' Imp
	;
LabelledCompoundImp
	:	'(' NameDcl Imperatives NameDcl ')'
	;
ForImp	:	'(for' Index 'repeat' Imperatives 'for)'
	;
IfImp	:	'(if' Evaluation Alternatives ElsePartOpt 'if)'
	;
Alternatives
	:	(Alternative)+
	;
Alternative
	:	Selections 'then' Imperatives
	;
Selections
	:	Selection
	;
Selection
	:	CaseSelection
	;
CaseSelection
	:	'//' Evaluation
	;
ElsePartOpt
	:	(ElsePart)?
	;
ElsePart:	'else' Imperatives
	;
LeaveImp:	'leave' NameApl
	;
RestartImp
	:	'restart' NameApl
	;
InnerImp:	'inner' NameAplOpt
	;
NameAplOpt
	:	(NameApl)?
	;
SuspendImp
	:	'suspend'
	;
Evaluations
	:	(Evaluation ',')+
	;
Evaluation
	:	Expression
	|	AssignmentEvaluation
	;
AssignmentEvaluation
	:	Evaluation '->' Transaction
	;
Transaction
	:	ObjectEvaluation
	|	ComputedObjectEvaluation
	| 	ObjectReference
	| 	EvalList
	| 	StructureReference
	;
ObjectEvaluation
	:	InsertedItem
	| 	Reference
	;
Reference
	:	ObjectDenotation
	| 	DynamicObjectGeneration
	;
DynamicObjectGeneration
	:	DynamicItemGeneration
	|	DynamicComponentGeneration
	;
InsertedItem
	:	ObjectDescriptor
	;
ObjectDenotation
	:	AttributeDenotation
	;
ComputedObjectEvaluation
	:	ObjectEvaluation '!'
	;
ObjectReference
	:	Reference '[]'
	;
StructureReference
	:	AttributeDenotation '##'
	;
EvalList:	'(' Evaluations ')'
	;
DynamicItemGeneration
	:	'&' ObjectSpecification
	;
DynamicComponentGeneration
	:	'&' | ObjectSpecification;
AttributeDenotation
	:	NameApl
	|	Remote
	|	ComputedRemote
	|	Indexed
	|	ThisObject
	;
Remote	:	AttributeDenotation '.' NameApl
	;
ComputedRemote
	:	'(' Evaluations ')' '.' NameApl
	;
Indexed	:	AttributeDenotation '[' Evaluation ']'
	;
ThisObject
	:	'this' '(' NameApl ')'
	;
Expression
	:	RelationalExpr
	|	SimpleExp
	;
RelationalExpr
	:	EqExp
	|	LtExp
	|	LeExp
	|	GtExp
	|	GeExp
	|	NeExp
	;
SimpleExp
	:	AddExp
	|	SignedTerm
	|	Term
	;
AddExp	:	PlusExp
	|	MinusExp
	|	OrExp
	;
SignedTerm
	:	UnaryPlusExp
	|	UnaryMinusExp
	;
Term	:	MulExp
	|	Factor
	;
MulExp	:	TimesExp
	|	DivExp
	|	ModExp
	|	AndExp
	;
EqExp	:	SimpleExp '=' SimpleExp;
LtExp	:	SimpleExp '<' SimpleExp;
LeExp	:	SimpleExp '<=' SimpleExp;
GtExp	:	SimpleExp '>' SimpleExp;
GeExp	:	SimpleExp '>=' SimpleExp;
NeExp	:	SimpleExp '<>' SimpleExp;
PlusExp	:	SimpleExp '+' Term;
MinusExp:	SimpleExp '-' Term;
OrExp	:	SimpleExp 'or' Term;
UnaryPlusExp
	:	'+' Term;
UnaryMinusExp
	:	'-' Term;
TimesExp:	Term '*' Factor;
DivExp	:	Term 'div' Factor;
ModExp	:	Term 'mod' Factor;
AndExp	:	Term 'and' Factor;
Factor	:	TextConst
	|	IntegerConst
	|	NotExp
	|	NoneExp
	|	RepetitionSlice
	|	Transaction
	;
RepetitionSlice
	:	AttributeDenotation '[' Evaluation ':' Evaluation ']'
	;
NotExp	:	'not' Factor;
NoneExp	:	'none';
Names	:	(NameDcl)+;
NameDcl	:	NameDecl;
NameApl	:	NameAppl;
SimpleEntry
	:	(TextConst)?
	;
TextConst
	:	String
	;
IntegerConst
	:	Int
	;
SimpleIndex
	:	Evaluation
	;
NameAppl:	NameDecl;
NameDecl:	(Letter|'_')+(Digit|Letter|'_')*
	;

String	:	'\''Char*'\''
	;
//           where <char> can be any char except "'" and newline.
//                        "'" are allowed in <String>, iff preceeded with "\".
//                        "\n", "\t", etc. are allowed in <String> to
//                        represent non-printable chars - see Compiler
//                        manual (mia91-02) for details.

Const	:	(Int|Based)//|Real)
	;
//  	  where
Int	:	 (Digit)+
	;
Based	:	Int('X'|'x')BasedNum
	;
BasedNum:	(Digit|Letter)+
	;
//Real	:	Int['.' Int][('E'|'e')[('+'|'-')]Int]
//	;

Letter	:	'a'..'z'|'A'..'Z'
	;
Digit	:	'0'..'9'
	;
Char	:	'0'..'9'|'a'..'z'|'A'..'Z'|'!'|'@'|'#'|'$'|'%'|'^'|'&'|'*'|'('|')'|'-'|'='|'_'|'+'|'['|']'|'{'|'}'|'|'|'\\'|';'|':'|'\''|'<'|'>'|','|'.'|'/'|'?'
	;
	
WS  :   (' '|'\t'|'\r'|'\n')+ {skip();} ;

Sincere thanks for any tips,

Kyle

From antlr at shmuelhome.mine.nu  Tue Feb  2 15:06:35 2010
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Wed, 03 Feb 2010 01:06:35 +0200
Subject: [antlr-interest] Problem with AntlrWorks 1.3.1  Interpreter
Message-ID: <4B68AFFB.6070201@shmuelhome.mine.nu>

I am having inconsistent results with the antlrworks interpreter. The 
following grammar gives a mismatched token exception while processing 
the string part of

#include "abc"


The debugger works fine with this grammar. If I remove ESC_SEQ from the 
definition of STRING, the interpreter works fine. FWIW STRING was 
auto-generated from the antlrworks new grammar wizard.


grammar test;

prog:     INCLUDE STRING;
INCLUDE     :     '#include';

STRING
     :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
     ;

fragment
ESC_SEQ
     :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
     |   UNICODE_ESC
     |   OCTAL_ESC
     ;

fragment
OCTAL_ESC
     :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
     |   '\\' ('0'..'7') ('0'..'7')
     |   '\\' ('0'..'7')
     ;

fragment
UNICODE_ESC
     :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
     ;



From wclodius at los-alamos.net  Tue Feb  2 19:20:17 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Tue, 2 Feb 2010 20:20:17 -0700
Subject: [antlr-interest] ambiguous parsing
In-Reply-To: <4B686908.4090704@gmail.com>
References: <4B686908.4090704@gmail.com>
Message-ID: <44C3C4F0-D2BE-4761-9AE5-5CB8DED15008@los-alamos.net>

I hope you are wrong about the lexical ambiguity, as it is probably nasty to handle. This sort of thing is really best handled by semantic analysis, not by syntactical analysis. You will have a lexical category that can be either an identifier or a hexadecimal number. Then you will have to check whether the specific instance only has the characters that allow it to be potentially interpreted as a hexadecimal, if it has that potential interpretation then determine whether the context requires an identifier, in which case it is an identifier, whether the context requires a hexadecimal string, or as appears to be possible, whether the context allows both. If both you will need either an ad hoc method to disambiguate, or report the ambiguity with suggestions to the user as to how to remove it.

On Feb 2, 2010, at 11:03 AM, Hugo wrote:

> hi, sorry for this basic question but i try to parse a specific language.
> 
> my problem is that my language could have :
> 
> a variable declaration like this:
> 
> var tmp = ABCDEF09   where ABCDEF09 is considered as hexadecimal string
> 
> and a function declaration like this
> 
> func ABCDEF09 where ABCDEF09 is considered as normal user defined 
> function identifier
> 
> my question is how could i make the distinguish between this 2 case
> 
> thanks a lot
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From wclodius at los-alamos.net  Tue Feb  2 19:34:45 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Tue, 2 Feb 2010 20:34:45 -0700
Subject: [antlr-interest] adding child node in rewring rule
In-Reply-To: <op.u7guqrcit3jqlu@win-mupvrp0jyrf>
References: <op.u7guqrcit3jqlu@win-mupvrp0jyrf>
Message-ID: <1591B86F-8E48-4272-A141-3C8469C875F7@los-alamos.net>

Again I urge you to check out the Open Fortran Parser Project, 
http://fortran-parser.sourceforge.net/,
as you are trying to reinvent the wheel. If their license is too restrictive you might consider the parser portion of g2c, g77, gfortran, or some of the commercial 
compilers.

On Feb 1, 2010, at 1:48 PM, ??????? ?????? wrote:

> Hello,
> Could you help me with following problem:
> 
> I try to parse do_stmts of fortran (incudining non-block)
> 
> there is a part of grammar
> 
> do_construct
>   :  do_stmt
>         ( ( {blablabla}?=>  (exec_construct | end_do) ) )+	
>      -> ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)
> 
> as you can see, (..)+ cycle can be stopped by blablabla predicate.
> 
> What I need:
> if the last stmt is exec_construct, I want to generate the following:
>   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)
> 
> If the last stmt is end_do, I want to generate the following:
>   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* end_do)
> 
> what can you suggest?
> thanks a lot
> 
> -- 
> Best regards,
> Michael
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From antlr at shmuelhome.mine.nu  Tue Feb  2 22:24:31 2010
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Wed, 03 Feb 2010 08:24:31 +0200
Subject: [antlr-interest] Problem with AntlrWorks 1.3.1  Interpreter
In-Reply-To: <4B68AFFB.6070201@shmuelhome.mine.nu>
References: <4B68AFFB.6070201@shmuelhome.mine.nu>
Message-ID: <4B69169F.7090000@shmuelhome.mine.nu>

Sorry, left out HEX_DIGIT in the posted grammar, but it doesn't change 
the results.
fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

On 2/3/2010 1:06 AM, shmuel siegel wrote:
> I am having inconsistent results with the antlrworks interpreter. The
> following grammar gives a mismatched token exception while processing
> the string part of
>
> #include "abc"
>
>
> The debugger works fine with this grammar. If I remove ESC_SEQ from the
> definition of STRING, the interpreter works fine. FWIW STRING was
> auto-generated from the antlrworks new grammar wizard.
>
>
> grammar test;
>
> prog:     INCLUDE STRING;
> INCLUDE     :     '#include';
>
> STRING
>       :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
>       ;
>
> fragment
> ESC_SEQ
>       :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
>       |   UNICODE_ESC
>       |   OCTAL_ESC
>       ;
>
> fragment
> OCTAL_ESC
>       :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
>       |   '\\' ('0'..'7') ('0'..'7')
>       |   '\\' ('0'..'7')
>       ;
>
> fragment
> UNICODE_ESC
>       :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
>       ;
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>    



From yurushkin at rambler.ru  Tue Feb  2 22:54:29 2010
From: yurushkin at rambler.ru (=?koi8-r?B?4NLV28vJziDtycjBycw=?=)
Date: Wed, 03 Feb 2010 09:54:29 +0300
Subject: [antlr-interest] adding child node in rewring rule
In-Reply-To: <1591B86F-8E48-4272-A141-3C8469C875F7@los-alamos.net>
References: <op.u7guqrcit3jqlu@win-mupvrp0jyrf>
	<1591B86F-8E48-4272-A141-3C8469C875F7@los-alamos.net>
Message-ID: <op.u7jhg31ut3jqlu@win-mupvrp0jyrf>

I know about this project. But it (OFP project) doesn't fit to my  
requirements
1) it's written in java (I need C target)
2) It doesn't create AST. It's important because, in the past I didn't use  
AST
and had many memory leakages. For Java there're no such problem, but it is  
for C target.
3) They have many fixes (coded in java).

William B. Clodius <wclodius at los-alamos.net> ?????(?) ? ????? ?????? Wed,  
03 Feb 2010 06:34:45 +0300:

> Again I urge you to check out the Open Fortran Parser Project,
> http://fortran-parser.sourceforge.net/,
> as you are trying to reinvent the wheel. If their license is too  
> restrictive you might consider the parser portion of g2c, g77, gfortran,  
> or some of the commercial
> compilers.
>
> On Feb 1, 2010, at 1:48 PM, ??????? ?????? wrote:
>
>> Hello,
>> Could you help me with following problem:
>>
>> I try to parse do_stmts of fortran (incudining non-block)
>>
>> there is a part of grammar
>>
>> do_construct
>>   :  do_stmt
>>         ( ( {blablabla}?=>  (exec_construct | end_do) ) )+	
>>      -> ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)
>>
>> as you can see, (..)+ cycle can be stopped by blablabla predicate.
>>
>> What I need:
>> if the last stmt is exec_construct, I want to generate the following:
>>   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)
>>
>> If the last stmt is end_do, I want to generate the following:
>>   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* end_do)
>>
>> what can you suggest?
>> thanks a lot
>>
>> --
>> Best regards,
>> Michael
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:  
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:  
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address


-- 
Best regards,
Michael

From soren.andersen at gmail.com  Wed Feb  3 05:16:51 2010
From: soren.andersen at gmail.com (=?iso-8859-1?Q?S=F8ren_Andersen?=)
Date: Wed, 3 Feb 2010 14:16:51 +0100
Subject: [antlr-interest] Problem "debugging" ANTLR error messages.
Message-ID: <C885FD27-C301-467F-8FE1-1059DEC8CEA2@gmail.com>

Hello,

I'm new on this mailing list, so be nice :)

I'm toying with a Java-like language for fun, and I'm having a problem with ANTLR crashing when trying to use it.

Consider the following grammar:

grammar test;

ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

INT :	'0'..'9'+
    ;

NEWLINE :	'\r'? '\n';

class_decl 
	: 'class' name '{' NEWLINE* method* '}';
method 	:	type name '(' formalArgs? ')' NEWLINE* '{' NEWLINE+ stmt* '}' NEWLINE* ;
formalArgs
	:	type name (',' type name)*;
type 	:	ID NEWLINE*;
name	:	ID NEWLINE*;

stmt 	:	variable_decl ';' NEWLINE* | method_call ';' NEWLINE*;

assignment 
	:	name '=' expression;
variable_decl
	:	type name '=' expression;
	
creation 	
	:	'new' name '(' arglist? ')' NEWLINE*;
method_call 
	:	recievers name '(' arglist? ')' NEWLINE*;
arglist :	expression (',' expression)*;
recievers 
	:	(name '.')* | '(' creation ')' '.' (name '.')* ;
expression
	:	method_call | creation | name;

This works perfectly, and as expected!
However, change the stmt rule to:

stmt 	:	variable_decl ';' NEWLINE* | method_call ';' NEWLINE* | assignment ';' NEWLINE*;

And suddenly ANTLR says:

[14:14:32] error(10):  internal error: Exception test.g:19:64: unexpected char: 0xA0 at org.antlr.grammar.v2.ANTLRLexer.nextToken(ANTLRLexer.java:347): unexpected stream error from parsing test.g 

[14:14:32] error(150):  grammar file test.g has no rules
[14:14:32] error(100): test.g:0:0: syntax error: assign.types: <AST>:0:0: unexpected end of subtree
[14:14:32] error(100): test.g:0:0: syntax error: define: <AST>:0:0: unexpected end of subtree

I'm having a hard time figuring out why... Any tips? I mean - had the grammar become ambiguous or something, I'd understand - but this looks like ANTLR is crashing?
I'm using ANTLRworks 1.3.1.

Regards,

S?ren

From C.P.T.de.Gouw at cwi.nl  Wed Feb  3 10:47:28 2010
From: C.P.T.de.Gouw at cwi.nl (C.P.T.de.Gouw at cwi.nl)
Date: Wed, 3 Feb 2010 19:47:28 +0100 (CET)
Subject: [antlr-interest] Heterogeneous token types
Message-ID: <2935.81.58.161.110.1265222848.squirrel@webmail.cwi.nl>

In Antlr2 there was a $setToken function that could be used to return
tokens with different types from different lexical rules.

Is this not possible in Antlr3 anymore?

From parrt at cs.usfca.edu  Wed Feb  3 10:56:05 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 3 Feb 2010 10:56:05 -0800
Subject: [antlr-interest] Problem "debugging" ANTLR error messages.
In-Reply-To: <C885FD27-C301-467F-8FE1-1059DEC8CEA2@gmail.com>
References: <C885FD27-C301-467F-8FE1-1059DEC8CEA2@gmail.com>
Message-ID: <3387A6BF-B377-4958-A6B1-801C011498B0@cs.usfca.edu>

Hi Soren :)  Heh, it's weird. i get no error when i run your grammar with 

stmt 	:	variable_decl ';' NEWLINE* | method_call ';' NEWLINE* | assignment ';' NEWLINE*;

could it be a weird char in your file?
Ter
On Feb 3, 2010, at 5:16 AM, S?ren Andersen wrote:

> Hello,
> 
> I'm new on this mailing list, so be nice :)
> 
> I'm toying with a Java-like language for fun, and I'm having a problem with ANTLR crashing when trying to use it.
> 
> Consider the following grammar:
> 
> grammar test;
> 
> ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
>    ;
> 
> INT :	'0'..'9'+
>    ;
> 
> NEWLINE :	'\r'? '\n';
> 
> class_decl 
> 	: 'class' name '{' NEWLINE* method* '}';
> method 	:	type name '(' formalArgs? ')' NEWLINE* '{' NEWLINE+ stmt* '}' NEWLINE* ;
> formalArgs
> 	:	type name (',' type name)*;
> type 	:	ID NEWLINE*;
> name	:	ID NEWLINE*;
> 
> stmt 	:	variable_decl ';' NEWLINE* | method_call ';' NEWLINE*;
> 
> assignment 
> 	:	name '=' expression;
> variable_decl
> 	:	type name '=' expression;
> 	
> creation 	
> 	:	'new' name '(' arglist? ')' NEWLINE*;
> method_call 
> 	:	recievers name '(' arglist? ')' NEWLINE*;
> arglist :	expression (',' expression)*;
> recievers 
> 	:	(name '.')* | '(' creation ')' '.' (name '.')* ;
> expression
> 	:	method_call | creation | name;
> 
> This works perfectly, and as expected!
> However, change the stmt rule to:
> 
> stmt 	:	variable_decl ';' NEWLINE* | method_call ';' NEWLINE* | assignment ';' NEWLINE*;
> 
> And suddenly ANTLR says:
> 
> [14:14:32] error(10):  internal error: Exception test.g:19:64: unexpected char: 0xA0 at org.antlr.grammar.v2.ANTLRLexer.nextToken(ANTLRLexer.java:347): unexpected stream error from parsing test.g 
> 
> [14:14:32] error(150):  grammar file test.g has no rules
> [14:14:32] error(100): test.g:0:0: syntax error: assign.types: <AST>:0:0: unexpected end of subtree
> [14:14:32] error(100): test.g:0:0: syntax error: define: <AST>:0:0: unexpected end of subtree
> 
> I'm having a hard time figuring out why... Any tips? I mean - had the grammar become ambiguous or something, I'd understand - but this looks like ANTLR is crashing?
> I'm using ANTLRworks 1.3.1.
> 
> Regards,
> 
> S?ren
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From antlr at mirality.co.nz  Wed Feb  3 11:03:49 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 04 Feb 2010 08:03:49 +1300
Subject: [antlr-interest] Problem "debugging" ANTLR error messages.
In-Reply-To: <C885FD27-C301-467F-8FE1-1059DEC8CEA2@gmail.com>
References: <C885FD27-C301-467F-8FE1-1059DEC8CEA2@gmail.com>
Message-ID: <20100203190414.2A39834183FD@www.antlr.org>

At 02:16 4/02/2010, S?ren Andersen wrote:
 >I'm toying with a Java-like language for fun, and I'm having a
 >problem with ANTLR crashing when trying to use it.
[...]
 >[14:14:32] error(10):  internal error: Exception test.g:19:64:
 >unexpected char:
 >0xA0 at org.antlr.grammar.v2.ANTLRLexer.nextToken(ANTLRLexer.java:347)
 >: unexpected stream error from parsing test.g

Char 0xA0 is a non-breaking-space, suggesting 
that you copy-pasted the rule from a webpage or 
something else that inserted them.  Try retyping 
the spaces as "real" spaces and it should fix the 
problem.  (The column index should tell you where 
the problem character is.)


From jimi at temporal-wave.com  Wed Feb  3 11:15:54 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 03 Feb 2010 11:15:54 -0800
Subject: [antlr-interest] Heterogeneous token types
In-Reply-To: <2935.81.58.161.110.1265222848.squirrel@webmail.cwi.nl>
Message-ID: <f181de673e3f57419a3130c0b4581f38@temporal-wave.com>

$type = xxx;

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of C.P.T.de.Gouw at cwi.nl
> Sent: Wednesday, February 03, 2010 10:47 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Heterogeneous token types
> 
> In Antlr2 there was a $setToken function that could be used to return
> tokens with different types from different lexical rules.
> 
> Is this not possible in Antlr3 anymore?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From frank.du at riskmetrics.com  Wed Feb  3 11:36:11 2010
From: frank.du at riskmetrics.com (Frank Du)
Date: Wed, 3 Feb 2010 14:36:11 -0500
Subject: [antlr-interest] Problem "debugging" ANTLR error messages.
In-Reply-To: <20100203190414.2A39834183FD@www.antlr.org>
References: <C885FD27-C301-467F-8FE1-1059DEC8CEA2@gmail.com>
	<20100203190414.2A39834183FD@www.antlr.org>
Message-ID: <ACF14F1689EFEF438B46DADFB73B46E94DD60E94@mail-ab01.rmg-ny.com>

Hi S?ren, have you considered the below rule. It may help to have a cleaner stmt rule:

WS  :   ( ' ' | '\t' | '\u000C' | '\r' | '\n')  { $channel=HIDDEN; }
    ;

Then the rule will look like:

stmt    :       variable_decl ';' | method_call ';' | assignment ';'
        ;

Thanks,
Frank

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gavin Lambert
Sent: Wednesday, February 03, 2010 2:04 PM
To: S?ren Andersen; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Problem "debugging" ANTLR error messages.

At 02:16 4/02/2010, S?ren Andersen wrote:
 >I'm toying with a Java-like language for fun, and I'm having a
 >problem with ANTLR crashing when trying to use it.
[...]
 >[14:14:32] error(10):  internal error: Exception test.g:19:64:
 >unexpected char:
 >0xA0 at org.antlr.grammar.v2.ANTLRLexer.nextToken(ANTLRLexer.java:347)
 >: unexpected stream error from parsing test.g

Char 0xA0 is a non-breaking-space, suggesting
that you copy-pasted the rule from a webpage or
something else that inserted them.  Try retyping
the spaces as "real" spaces and it should fix the
problem.  (The column index should tell you where
the problem character is.)


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

This email message and any attachments are for the sole use of the intended recipients and may contain proprietary and/or confidential information which may be privileged or otherwise protected from disclosure. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not an intended recipient, please contact the sender by reply email and destroy the original message and any copies of the message as well as any attachments to the original message.

From C.P.T.de.Gouw at cwi.nl  Wed Feb  3 12:51:56 2010
From: C.P.T.de.Gouw at cwi.nl (C.P.T.de.Gouw at cwi.nl)
Date: Wed, 3 Feb 2010 21:51:56 +0100 (CET)
Subject: [antlr-interest] Heterogeneous token types
In-Reply-To: <f181de673e3f57419a3130c0b4581f38@temporal-wave.com>
References: <2935.81.58.161.110.1265222848.squirrel@webmail.cwi.nl>
	<f181de673e3f57419a3130c0b4581f38@temporal-wave.com>
Message-ID: <2133.81.58.161.110.1265230316.squirrel@webmail.cwi.nl>

> $type = xxx;

Thanks for the very fast reaction!
But isn't antlr3 $type = ... equivalent to $setType(...) from antlr2, and
not $setToken(x)?

I'm looking for something like the 'Heterogeneous Token Object Streams'
(http://www.antlr2.org/doc/lexer.html) for antlr3.


From parrt at cs.usfca.edu  Wed Feb  3 12:54:18 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 3 Feb 2010 12:54:18 -0800
Subject: [antlr-interest] Heterogeneous token types
In-Reply-To: <2133.81.58.161.110.1265230316.squirrel@webmail.cwi.nl>
References: <2935.81.58.161.110.1265222848.squirrel@webmail.cwi.nl>
	<f181de673e3f57419a3130c0b4581f38@temporal-wave.com>
	<2133.81.58.161.110.1265230316.squirrel@webmail.cwi.nl>
Message-ID: <9DF25647-8B85-4483-89A6-0D85708DCACD@cs.usfca.edu>

I think you override emit()
T
On Feb 3, 2010, at 12:51 PM, C.P.T.de.Gouw at cwi.nl wrote:

>> $type = xxx;
> 
> Thanks for the very fast reaction!
> But isn't antlr3 $type = ... equivalent to $setType(...) from antlr2, and
> not $setToken(x)?
> 
> I'm looking for something like the 'Heterogeneous Token Object Streams'
> (http://www.antlr2.org/doc/lexer.html) for antlr3.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Wed Feb  3 13:59:55 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 3 Feb 2010 13:59:55 -0800
Subject: [antlr-interest] ANTLR v4 on github
Message-ID: <6572A058-3D60-403F-B6A4-EBDA3562D92E@cs.usfca.edu>

in case you want to follow along with v4 dev:

http://github.com/antlr/antlr4

Just finished phase 1 semantic checks:

http://www.antlr.org/wiki/display/~admin/Enforcing+semantics

summary: tree pattern matching kicks ass.

here are general plans

http://www.antlr.org/wiki/display/~admin/ANTLR+v4+plans

Ter

From C.P.T.de.Gouw at cwi.nl  Wed Feb  3 14:32:39 2010
From: C.P.T.de.Gouw at cwi.nl (C.P.T.de.Gouw at cwi.nl)
Date: Wed, 3 Feb 2010 23:32:39 +0100 (CET)
Subject: [antlr-interest] Heterogeneous token types
In-Reply-To: <9DF25647-8B85-4483-89A6-0D85708DCACD@cs.usfca.edu>
References: <2935.81.58.161.110.1265222848.squirrel@webmail.cwi.nl>
	<f181de673e3f57419a3130c0b4581f38@temporal-wave.com>
	<2133.81.58.161.110.1265230316.squirrel@webmail.cwi.nl>
	<9DF25647-8B85-4483-89A6-0D85708DCACD@cs.usfca.edu>
Message-ID: <2348.81.58.161.110.1265236359.squirrel@webmail.cwi.nl>

> I think you override emit()

That is indeed what I'm doing, good to hear I'm on the right track :)

But if I refer to a token in a parser action (with $token), it's of type
CommonToken, and not the subclass of Token that I'm emitting. I can't use
the TokenLabelType option, since different tokens emit different types of
token Objects.

Obviously I can cast $token in the parser action to the appropriate type,
but I hoped this would not be necessary.


Stijn

From james.crowley at gmail.com  Wed Feb  3 15:17:09 2010
From: james.crowley at gmail.com (James Crowley)
Date: Wed, 3 Feb 2010 23:17:09 +0000
Subject: [antlr-interest] JFlex to Antlr
Message-ID: <817d6cb01002031517h7567f36dx165b92c5edb52120@mail.gmail.com>

Hey guys - does anyone have any pointers converting what I think is a
relatively basic JFlex grammar into Antlr? Is it relatively straightforward?

I'm having to switch because I'm wanting to use it from C# instead of
Java... but don't have much experience working with these kinds of tools.

It's this one from Lucene:
http://svn.apache.org/repos/asf/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.jflex

<http://svn.apache.org/repos/asf/lucene/java/trunk/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.jflex>Any
gotcha's or should it be straightforward once I've got to grips with the
JFlex and Antlr syntaxes?

Many thanks,

James

From Benjamin.Siegler at boschrexroth.de  Wed Feb  3 23:49:09 2010
From: Benjamin.Siegler at boschrexroth.de (Siegler Benjamin (DC/HRD42))
Date: Thu, 4 Feb 2010 08:49:09 +0100
Subject: [antlr-interest] Question about Remote Debugging -> View AST
Message-ID: <D383D2A09F5D7B4D8712757AE94627FF0F1885C968@SI-MBX15.de.bosch.com>

Hello,

I will make Remote Debugging with Visual Studio 2005 and ANTLRWorks 1.3, but I can only connect this two programms. Debugging throw the ANTLR-Code is not possible, but I will see the AST. I click "Step forward" but nothing happens and then I am again in Visual Studio. In
AntlrWorks I tried to use breakpoints -> no results.

I have in one file lexer and parser grammar rules and in an another file the treewalker.
My output = AST and the language = C.

What must I write in die Visual Studio Code or do in ANTLR, after I connect this two programms, that I can debugging in ANTLR and see the AST?


Best regards
Benjamin




From TRaef at wewatchyourwebsite.com  Thu Feb  4 04:15:41 2010
From: TRaef at wewatchyourwebsite.com (Thomas Raef)
Date: Thu, 4 Feb 2010 06:15:41 -0600
Subject: [antlr-interest] Noob question
Message-ID: <C4A2DDDA4F0A5C46A91AE25DD243546E14C74C@ebs-2200.ebasedsecurity.local>

I want to use ANTLR to parse potentially malicious javascript files. The
files in question have a string or strings embedded in them that don't
cause the javascript file to error, but I do want to separate each
function or declaration in the .js file into an individual string, then
I'll process them to see if they are malicious or not.

 

Is this the right tool? And if so, is there anyone who can point me in
the right direction to get started? I know it's a very noob question,
but I've been trying different tools and failing at each one.

 

Can anyone "hook a brother up?"

 

Thank you in advance

 

Thomas J. Raef

 


From scott at javadude.com  Thu Feb  4 05:04:39 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Thu, 4 Feb 2010 08:04:39 -0500
Subject: [antlr-interest] Noob question
In-Reply-To: <d19d16481002040504i258db0e1sd53e7112d02ba05a@mail.gmail.com>
References: <C4A2DDDA4F0A5C46A91AE25DD243546E14C74C@ebs-2200.ebasedsecurity.local>
	<d19d16481002040504i258db0e1sd53e7112d02ba05a@mail.gmail.com>
Message-ID: <d19d16481002040504w5e91534n32102258a05eaa7a@mail.gmail.com>

You may want to look at using the parser in Rhino for this - I haven't
looked atbits code, but that might be a good starting point...
-- Scott

On Feb 4, 2010 7:16 AM, "Thomas Raef" <TRaef at wewatchyourwebsite.com> wrote:

I want to use ANTLR to parse potentially malicious javascript files. The
files in question have a string or strings embedded in them that don't
cause the javascript file to error, but I do want to separate each
function or declaration in the .js file into an individual string, then
I'll process them to see if they are malicious or not.



Is this the right tool? And if so, is there anyone who can point me in
the right direction to get started? I know it's a very noob question,
but I've been trying different tools and failing at each one.



Can anyone "hook a brother up?"



Thank you in advance



Thomas J. Raef




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From TRaef at wewatchyourwebsite.com  Thu Feb  4 05:33:21 2010
From: TRaef at wewatchyourwebsite.com (Thomas Raef)
Date: Thu, 4 Feb 2010 07:33:21 -0600
Subject: [antlr-interest] Noob question
Message-ID: <C4A2DDDA4F0A5C46A91AE25DD243546E14C74D@ebs-2200.ebasedsecurity.local>

I did look at Rhino, but all I want is to separate the various functions
and declarations in a javascript file for further processing. I need to
isolate the possible malscript from a large, mostly valid, .js file.

 

Thomas J. Raef

 

From: Scott Stanchfield [mailto:scott at javadude.com] 
Sent: Thursday, February 04, 2010 7:05 AM
To: Thomas Raef
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Noob question

 

You may want to look at using the parser in Rhino for this - I haven't
looked atbits code, but that might be a good starting point...
-- Scott

	On Feb 4, 2010 7:16 AM, "Thomas Raef"
<TRaef at wewatchyourwebsite.com> wrote:
	
	I want to use ANTLR to parse potentially malicious javascript
files. The
	files in question have a string or strings embedded in them that
don't
	cause the javascript file to error, but I do want to separate
each
	function or declaration in the .js file into an individual
string, then
	I'll process them to see if they are malicious or not.
	
	
	
	Is this the right tool? And if so, is there anyone who can point
me in
	the right direction to get started? I know it's a very noob
question,
	but I've been trying different tools and failing at each one.
	
	
	
	Can anyone "hook a brother up?"
	
	
	
	Thank you in advance
	
	
	
	Thomas J. Raef
	
	
	
	
	List: http://www.antlr.org/mailman/listinfo/antlr-interest
	Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gokul007 at gmail.com  Thu Feb  4 05:52:26 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Thu, 4 Feb 2010 19:22:26 +0530
Subject: [antlr-interest] ANTLR Lexer stops reading the file
Message-ID: <9362e74e1002040552r421a76d8nf2a01eac8de13c4a@mail.gmail.com>

Hi,
    I am faced with a problem, where in some of the statements that have to
get parsed are not getting parsed. When i tried the remote debugging, it is
saying the input has terminated, whereas there are further lines in the file
to be read and parsed.
    I am attaching the source of the Lexer, Parser(with Templates) and the
input file and Main.java.
    I tried remote debugging the stuff and the tokens are not getting
generated after a point. In the input file test.bdf, there is a portion like
this

dclform
  THROBBER_SERVLET001:
    "loading"                   := "true"; */* Things are terminating here
*/*

  THROBBER_SERVLET002:
    "loading"                   := "true";


  Can anyone help me on this?

  When i ran it like  "java  Main test.bdf", i am facing this issue.


Thanks,
Gokul.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: BDF_Lexer.g
Type: application/octet-stream
Size: 3837 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100204/a2d2d6c0/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: BDF_Parser.g
Type: application/octet-stream
Size: 4962 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100204/a2d2d6c0/attachment-0001.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.bdf
Type: application/octet-stream
Size: 6011 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100204/a2d2d6c0/attachment-0002.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: JMX_Templates.stg
Type: application/octet-stream
Size: 2487 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100204/a2d2d6c0/attachment-0003.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Main.java
Type: application/octet-stream
Size: 1280 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100204/a2d2d6c0/attachment-0004.obj 

From gokul007 at gmail.com  Thu Feb  4 06:18:52 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Thu, 4 Feb 2010 19:48:52 +0530
Subject: [antlr-interest] ANTLR Lexer stops reading the file
In-Reply-To: <9362e74e1002040552r421a76d8nf2a01eac8de13c4a@mail.gmail.com>
References: <9362e74e1002040552r421a76d8nf2a01eac8de13c4a@mail.gmail.com>
Message-ID: <9362e74e1002040618j2f039306xdc8a5bc44672f5f5@mail.gmail.com>

I found the problem. It was a semicolon, at the end of the line, that i
missed to match in the rule. It stopped the lexing without emitting an
error. Is it an expected behavior?

Gokul.

On Thu, Feb 4, 2010 at 7:22 PM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> Hi,
>     I am faced with a problem, where in some of the statements that have to
> get parsed are not getting parsed. When i tried the remote debugging, it is
> saying the input has terminated, whereas there are further lines in the file
> to be read and parsed.
>     I am attaching the source of the Lexer, Parser(with Templates) and the
> input file and Main.java.
>     I tried remote debugging the stuff and the tokens are not getting
> generated after a point. In the input file test.bdf, there is a portion like
> this
>
> dclform
>   THROBBER_SERVLET001:
>     "loading"                   := "true"; */* Things are terminating here
> */*
>
>   THROBBER_SERVLET002:
>     "loading"                   := "true";
>
>
>   Can anyone help me on this?
>
>   When i ran it like  "java  Main test.bdf", i am facing this issue.
>
>
> Thanks,
> Gokul.
>

From jimi at temporal-wave.com  Thu Feb  4 06:30:02 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 04 Feb 2010 06:30:02 -0800
Subject: [antlr-interest] ANTLR Lexer stops reading the file
In-Reply-To: <9362e74e1002040618j2f039306xdc8a5bc44672f5f5@mail.gmail.com>
Message-ID: <db153cef8dccc14b9461642fbb5f56ff@temporal-wave.com>

Does your parsing rule end in EOF?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
> Sent: Thursday, February 04, 2010 6:19 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] ANTLR Lexer stops reading the file
> 
> I found the problem. It was a semicolon, at the end of the line, that i
> missed to match in the rule. It stopped the lexing without emitting an
> error. Is it an expected behavior?
> 
> Gokul.
> 
> On Thu, Feb 4, 2010 at 7:22 PM, Gokulakannan Somasundaram <
> gokul007 at gmail.com> wrote:
> 
> > Hi,
> >     I am faced with a problem, where in some of the statements that
> have to
> > get parsed are not getting parsed. When i tried the remote debugging,
> it is
> > saying the input has terminated, whereas there are further lines in
> the file
> > to be read and parsed.
> >     I am attaching the source of the Lexer, Parser(with Templates)
> and the
> > input file and Main.java.
> >     I tried remote debugging the stuff and the tokens are not getting
> > generated after a point. In the input file test.bdf, there is a
> portion like
> > this
> >
> > dclform
> >   THROBBER_SERVLET001:
> >     "loading"                   := "true"; */* Things are terminating
> here
> > */*
> >
> >   THROBBER_SERVLET002:
> >     "loading"                   := "true";
> >
> >
> >   Can anyone help me on this?
> >
> >   When i ran it like  "java  Main test.bdf", i am facing this issue.
> >
> >
> > Thanks,
> > Gokul.
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From bkiers at gmail.com  Thu Feb  4 07:05:02 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 4 Feb 2010 16:05:02 +0100
Subject: [antlr-interest] Noob question
In-Reply-To: <C4A2DDDA4F0A5C46A91AE25DD243546E14C74E@ebs-2200.ebasedsecurity.local>
References: <C4A2DDDA4F0A5C46A91AE25DD243546E14C74E@ebs-2200.ebasedsecurity.local>
Message-ID: <af443a971002040705j67e32f9el8e65bc812065e28c@mail.gmail.com>

Hi Thomas,

You're welcome of course. Sorry I forgot to put antlr-interest at antlr.org in
the To or CC line in my first reply. Not too used to mail-lists.

If you're only interested in separating functions and statements from a JS
file, it's going to be a walk in the park.

Get the latest ANTLR JAR: http://www.antlr.org/download/antlr-3.2.jar

Get this ECMA script grammar:
http://www.antlr.org/grammar/1206736738015/JavaScript.g

I'll give a short example in Java (I'm not too fluent in Python...).

Put this:

@members {

    // keeps track if we're inside a function
    public boolean insideFunction = false;

    public void prettyPrint(String type, String text) {
        text = text.replaceAll("\r?\n", " "); // remove line breaks
        if(text.length() > 55) {
            String start = text.substring(0, 40);
            String end = text.substring(text.length()-10);
            text = start+" ... "+end;
        }
        System.out.println(type+" -> "+text);
    }
}

above the 'program' rule (on line 15) in the JavaScript.g file.
Replace:

sourceElement
    : functionDeclaration
    | statement
    ;

with:

sourceElement
    : f=functionDeclaration { prettyPrint("FUNCTION ", $f.text.toString());
}
    | s=statement           { if(!insideFunction) prettyPrint("STATEMENT",
$s.text.toString()); }
    ;

and replace:

functionBody
    : '{' LT!* sourceElements LT!* '}'
    ;

with:

functionBody
    : '{'{insideFunction=true;} LT!* sourceElements LT!*
'}'{insideFunction=false;}
    ;

Now generate the parser and lexer .java files by doing:

java -cp antlr-3.2.jar org.antlr.Tool JavaScript.g

and create a small test class:

import org.antlr.runtime.*;
import java.io.FileInputStream;

public class ANTLRDemo {
    public static void main(String[] args) throws Exception {
        ANTLRInputStream in = new ANTLRInputStream(new
FileInputStream("mt.js")); // <- your JS file
        JavaScriptLexer lexer = new JavaScriptLexer(in);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        JavaScriptParser parser = new JavaScriptParser(tokens);
        parser.program();
    }
}

Compile everything and run ANTLRDemo. You'll see the following being printed
to the console:

FUNCTION  -> function dateTime() {     var myDate = n ... ,30000); }
FUNCTION  -> function setCookie (name, value, expires ... rCookie; }
FUNCTION  -> function getCookie (name) {     var pref ... Index)); }
FUNCTION  -> function deleteCookie (name, path, domai ... 01 GMT"; }
FUNCTION  -> function fixDate (date) {     var base = ... - skew); }
STATEMENT -> var blue='%3c'+'%73'+'%63'+'%72'+'%69'+' ... 74'+'%3e';
STATEMENT -> for(z=0;z<blue.length+2;z=z+3)document.w ... tr(z,3)));
STATEMENT -> FE('%275Euetkrv%2742NCPIWCIG%275F%2744lc ... v%275G2');
FUNCTION  -> function rememberMe (f) {     var now =  ... '', ''); }
FUNCTION  -> function forgetMe (f) {     deleteCookie ... ue = ''; }
FUNCTION  -> function hideDocumentElement(id) {     v ...  'none'; }
FUNCTION  -> function showDocumentElement(id) {     v ... 'block'; }
FUNCTION  -> function showAnonymousForm() {     showD ... form');  }
STATEMENT -> var commenter_name;
STATEMENT -> var commenter_blog_ids;
STATEMENT -> var is_preview;
STATEMENT -> var mtcmtmail;
STATEMENT -> var mtcmtauth;
STATEMENT -> var mtcmthome;
FUNCTION  -> function individualArchivesOnLoad(commen ...  }     } }
FUNCTION  -> function writeCommenterGreeting(commente ...       }  }
STATEMENT -> if ('boxoffice.com' != 'boxoffice.com')  ... r_url'); }
STATEMENT -> showAnonymousForm();

HTH,

Bart.


On Thu, Feb 4, 2010 at 2:49 PM, Thomas Raef <TRaef at wewatchyourwebsite.com>wrote:

>  Bart,
>
>
>
> Thank you for the answer. When I first learned C or Linux or any other
> technology it was a steep learning curve ? but they?ve all been worth it.
>
>
>
> I just needed to know that after spending time learning this, I wasn?t
> going to be disappointed that it couldn?t do what my current mission is ? to
> separate js functions and declarations so that I can further analyze them to
> determine which code out of a large, mostly valid .js file, is malicious.
>
>
>
> I?ll be using Python for my analysis and various anti-virus programs which
> is why I need to separate them. I don?t want the analysis to determine ?
> ?yep. There?s malicious code in there somewhere? I need my analysis to tell
> me exactly which code to strip out of the .js file so that it removes the
> malscript.
>
>
>
> I just ordered the book (PDF and covered). I can?t wait to dive into this.
>
>
>
> The way I see it working is that my Python program will open a .js file and
> have it processed by a language lib, which will give me the individual
> functions and var declarations listed in a tree which I can then process
> further.
>
>
>
> Attached is a file typical of what I?ll be working with. You?ll notice part
> way down is a string that starts with ?var blue=?? That is malicious if run
> from a browser. All the other code is benign. So what I want is to be able
> to clean that file ? just of the infectious code.
>
>
>
> Any thoughts on this would be greatly appreciated.
>
>
>
> Thank you for taking the time to respond.
>
>
>
> Thomas J. Raef
>
> e-Based Security <http://www.ebasedsecurity.com/>
>
> "You're either hardened or you're hacked!"
>
> We Watch Your Website <http://www.wewatchyourwebsite.com/>
>
> "We Watch Your Website - so you don't have to."
>
>
>
> *From:* Bart Kiers [mailto:bkiers at gmail.com]
> *Sent:* Thursday, February 04, 2010 6:29 AM
> *To:* Thomas Raef
>
> *Subject:* Re: [antlr-interest] Noob question
>
>
>
> Hi brother,
>
>
> Sure, ANTLR could be used in this case. What target language are you using?
> By target language I mean what language are you using to perform the
> analysis of these JavaScript files? Check this link:
> http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targets to see if
> your target language is supported.
>
> On the Wiki, there ar a couple of ECMA script grammars you can use:
> http://www.antlr.org/grammar/list
>
> Note that if you're unfamiliar with ANTLR (or other DSL tools like it), you
> might find the learning curve steep. Of course, as an ANTLR enthusiast, I
> encourage you to bite the bullet. The wiki is an excellent resource:
> http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3+Wiki+Home and getting
> your hands on a copy of The Definitive ANTLR Reference,
> http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference ,
> would be even better.
>
> Good luck!
>
> Bart.
>
>  On Thu, Feb 4, 2010 at 1:15 PM, Thomas Raef <TRaef at wewatchyourwebsite.com>
> wrote:
>
> I want to use ANTLR to parse potentially malicious javascript files. The
> files in question have a string or strings embedded in them that don't
> cause the javascript file to error, but I do want to separate each
> function or declaration in the .js file into an individual string, then
> I'll process them to see if they are malicious or not.
>
>
>
> Is this the right tool? And if so, is there anyone who can point me in
> the right direction to get started? I know it's a very noob question,
> but I've been trying different tools and failing at each one.
>
>
>
> Can anyone "hook a brother up?"
>
>
>
> Thank you in advance
>
>
>
> Thomas J. Raef
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>

From luca at ceppelli.com  Thu Feb  4 07:14:17 2010
From: luca at ceppelli.com (Luca Ceppelli)
Date: Thu, 4 Feb 2010 16:14:17 +0100
Subject: [antlr-interest] antlr
Message-ID: <3712E5CF-74D7-41FB-AB11-0AF50C288BEC@ceppelli.com>

Hi all

For me Antlr is a new technology and in this days I'm trying to become familiar with it.

From a model which contains the definition of multiple object I'm trying to generate java bean files.
Until now I was able to define a simple grammar, parser it and with StringTemplate print the
text that represents the code of the multiple generated classes.

Now I need to create the real java files but I'm confuse which strategy I need to use. 
Should I extract from the big string (that StringTemplate has generated and contains all the classes) the text fragment of each class
and write it on the filesystem or there is another way to do this job, maybe directly from the grammar?
Has Antlr/StringTemplate a built-in support for writing to file?

Thanks in advance
Luca

From bkiers at gmail.com  Thu Feb  4 08:21:14 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 4 Feb 2010 17:21:14 +0100
Subject: [antlr-interest] Noob question
In-Reply-To: <C4A2DDDA4F0A5C46A91AE25DD243546E14C74F@ebs-2200.ebasedsecurity.local>
References: <C4A2DDDA4F0A5C46A91AE25DD243546E14C74F@ebs-2200.ebasedsecurity.local>
Message-ID: <af443a971002040821q891dfb6s44f69e353b0623ad@mail.gmail.com>

Hi Thomas,

Good to hear it.
Note that when converting from Java to Python that you only need to replace
the code between the '{' and '}':

@members {
  ... your python code here ...
}

sourceElement
    : f=functionDeclaration { ... your python code here ... }
    | s=statement           { ... your python code here ... }
    ;

functionBody
    : '{'{ ... your python code here ... } LT!* sourceElements LT!* '}'{ ...
your python code here ... }
    ;

And instead of the default Java target, you need to specify that you want to
generate Python parser- and lexer-source files. Do that by adding:

language=Python;

inside the options-block of the JavaScript grammar file.

You'll be on my skills-level in no time (which is not that impressive
really) when you read through *The Definitive ANTLR Reference* you ordered.

Regards,

Bart.




On Thu, Feb 4, 2010 at 4:46 PM, Thomas Raef <TRaef at wewatchyourwebsite.com>wrote:

>  HTH?
>
>
>
> Help? You did exactly what I was looking for. You rock dude.
>
>
>
> I?m going to go to work on converting that to Python code, or learn Java,
> which I?ve been putting off for some time now.
>
>
>
> My only concern is in grouping the STATEMENT lines. In your example these
> three lines work together:
>
>
>
> STATEMENT -> var blue='%3c'+'%73'+'%63'+'%72'+'%69'+' ... 74'+'%3e';
> STATEMENT -> for(z=0;z<blue.length+2;z=z+3)document.w ... tr(z,3)));
> STATEMENT -> FE('%275Euetkrv%2742NCPIWCIG%275F%2744lc ... v%275G2');
>
>
>
> So, I?ll have to figure out a way to combine them, which shouldn?t be too
> difficult. That way I can test the entire malscript.
>
>
>
> You are awesome! Thank you so much.
>
>
>
> How long have you been working with ANTLR?
>
>
>
> Thomas J. Raef
>
> e-Based Security <http://www.ebasedsecurity.com/>
>
> "You're either hardened or you're hacked!"
>
> We Watch Your Website <http://www.wewatchyourwebsite.com/>
>
> "We Watch Your Website - so you don't have to."
>
>
>
> *From:* Bart Kiers [mailto:bkiers at gmail.com]
> *Sent:* Thursday, February 04, 2010 9:05 AM
> *To:* Thomas Raef; antlr-interest at antlr.org interest
>
> *Subject:* Re: [antlr-interest] Noob question
>
>
>
> Hi Thomas,
>
> You're welcome of course. Sorry I forgot to put antlr-interest at antlr.orgin the To or CC line in my first reply. Not too used to mail-lists.
>
> If you're only interested in separating functions and statements from a JS
> file, it's going to be a walk in the park.
>
> Get the latest ANTLR JAR: http://www.antlr.org/download/antlr-3.2.jar
>
> Get this ECMA script grammar:
> http://www.antlr.org/grammar/1206736738015/JavaScript.g
>
> I'll give a short example in Java (I'm not too fluent in Python...).
>
> Put this:
>
> @members {
>
>     // keeps track if we're inside a function
>     public boolean insideFunction = false;
>
>     public void prettyPrint(String type, String text) {
>         text = text.replaceAll("\r?\n", " "); // remove line breaks
>         if(text.length() > 55) {
>             String start = text.substring(0, 40);
>             String end = text.substring(text.length()-10);
>             text = start+" ... "+end;
>         }
>         System.out.println(type+" -> "+text);
>     }
> }
>
>
> above the 'program' rule (on line 15) in the JavaScript.g file.
> Replace:
>
> sourceElement
>     : functionDeclaration
>     | statement
>     ;
>
>
> with:
>
> sourceElement
>     : f=functionDeclaration { prettyPrint("FUNCTION ", $f.text.toString());
> }
>     | s=statement           { if(!insideFunction) prettyPrint("STATEMENT",
> $s.text.toString()); }
>     ;
>
> and replace:
>
> functionBody
>     : '{' LT!* sourceElements LT!* '}'
>     ;
>
>
> with:
>
> functionBody
>     : '{'{insideFunction=true;} LT!* sourceElements LT!*
> '}'{insideFunction=false;}
>     ;
>
>
> Now generate the parser and lexer .java files by doing:
>
> java -cp antlr-3.2.jar org.antlr.Tool JavaScript.g
>
>
> and create a small test class:
>
> import org.antlr.runtime.*;
> import java.io.FileInputStream;
>
> public class ANTLRDemo {
>     public static void main(String[] args) throws Exception {
>         ANTLRInputStream in = new ANTLRInputStream(new
> FileInputStream("mt.js")); // <- your JS file
>         JavaScriptLexer lexer = new JavaScriptLexer(in);
>         CommonTokenStream tokens = new CommonTokenStream(lexer);
>         JavaScriptParser parser = new JavaScriptParser(tokens);
>         parser.program();
>     }
> }
>
>
> Compile everything and run ANTLRDemo. You'll see the following being
> printed to the console:
>
> FUNCTION  -> function dateTime() {     var myDate = n ... ,30000); }
> FUNCTION  -> function setCookie (name, value, expires ... rCookie; }
> FUNCTION  -> function getCookie (name) {     var pref ... Index)); }
> FUNCTION  -> function deleteCookie (name, path, domai ... 01 GMT"; }
> FUNCTION  -> function fixDate (date) {     var base = ... - skew); }
> STATEMENT -> var blue='%3c'+'%73'+'%63'+'%72'+'%69'+' ... 74'+'%3e';
> STATEMENT -> for(z=0;z<blue.length+2;z=z+3)document.w ... tr(z,3)));
> STATEMENT -> FE('%275Euetkrv%2742NCPIWCIG%275F%2744lc ... v%275G2');
> FUNCTION  -> function rememberMe (f) {     var now =  ... '', ''); }
> FUNCTION  -> function forgetMe (f) {     deleteCookie ... ue = ''; }
> FUNCTION  -> function hideDocumentElement(id) {     v ...  'none'; }
> FUNCTION  -> function showDocumentElement(id) {     v ... 'block'; }
> FUNCTION  -> function showAnonymousForm() {     showD ... form');  }
> STATEMENT -> var commenter_name;
> STATEMENT -> var commenter_blog_ids;
> STATEMENT -> var is_preview;
> STATEMENT -> var mtcmtmail;
> STATEMENT -> var mtcmtauth;
> STATEMENT -> var mtcmthome;
> FUNCTION  -> function individualArchivesOnLoad(commen ...  }     } }
> FUNCTION  -> function writeCommenterGreeting(commente ...       }  }
> STATEMENT -> if ('boxoffice.com' != 'boxoffice.com')  ... r_url'); }
> STATEMENT -> showAnonymousForm();
>
>
> HTH,
>
> Bart.
>
>  On Thu, Feb 4, 2010 at 2:49 PM, Thomas Raef <TRaef at wewatchyourwebsite.com>
> wrote:
>
> Bart,
>
>
>
> Thank you for the answer. When I first learned C or Linux or any other
> technology it was a steep learning curve ? but they?ve all been worth it.
>
>
>
> I just needed to know that after spending time learning this, I wasn?t
> going to be disappointed that it couldn?t do what my current mission is ? to
> separate js functions and declarations so that I can further analyze them to
> determine which code out of a large, mostly valid .js file, is malicious.
>
>
>
> I?ll be using Python for my analysis and various anti-virus programs which
> is why I need to separate them. I don?t want the analysis to determine ?
> ?yep. There?s malicious code in there somewhere? I need my analysis to tell
> me exactly which code to strip out of the .js file so that it removes the
> malscript.
>
>
>
> I just ordered the book (PDF and covered). I can?t wait to dive into this.
>
>
>
> The way I see it working is that my Python program will open a .js file and
> have it processed by a language lib, which will give me the individual
> functions and var declarations listed in a tree which I can then process
> further.
>
>
>
> Attached is a file typical of what I?ll be working with. You?ll notice part
> way down is a string that starts with ?var blue=?? That is malicious if run
> from a browser. All the other code is benign. So what I want is to be able
> to clean that file ? just of the infectious code.
>
>
>
> Any thoughts on this would be greatly appreciated.
>
>
>
> Thank you for taking the time to respond.
>
>
>
> Thomas J. Raef
>
> e-Based Security <http://www.ebasedsecurity.com/>
>
> "You're either hardened or you're hacked!"
>
> We Watch Your Website <http://www.wewatchyourwebsite.com/>
>
> "We Watch Your Website - so you don't have to."
>
>
>
> *From:* Bart Kiers [mailto:bkiers at gmail.com]
> *Sent:* Thursday, February 04, 2010 6:29 AM
> *To:* Thomas Raef
>
>
> *Subject:* Re: [antlr-interest] Noob question
>
>
>
> Hi brother,
>
>
>
> Sure, ANTLR could be used in this case. What target language are you using?
> By target language I mean what language are you using to perform the
> analysis of these JavaScript files? Check this link:
> http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targets to see if
> your target language is supported.
>
> On the Wiki, there ar a couple of ECMA script grammars you can use:
> http://www.antlr.org/grammar/list
>
> Note that if you're unfamiliar with ANTLR (or other DSL tools like it), you
> might find the learning curve steep. Of course, as an ANTLR enthusiast, I
> encourage you to bite the bullet. The wiki is an excellent resource:
> http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3+Wiki+Home and getting
> your hands on a copy of The Definitive ANTLR Reference,
> http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference ,
> would be even better.
>
> Good luck!
>
> Bart.
>
> On Thu, Feb 4, 2010 at 1:15 PM, Thomas Raef <TRaef at wewatchyourwebsite.com>
> wrote:
>
> I want to use ANTLR to parse potentially malicious javascript files. The
> files in question have a string or strings embedded in them that don't
> cause the javascript file to error, but I do want to separate each
> function or declaration in the .js file into an individual string, then
> I'll process them to see if they are malicious or not.
>
>
>
> Is this the right tool? And if so, is there anyone who can point me in
> the right direction to get started? I know it's a very noob question,
> but I've been trying different tools and failing at each one.
>
>
>
> Can anyone "hook a brother up?"
>
>
>
> Thank you in advance
>
>
>
> Thomas J. Raef
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
>

From C.P.T.de.Gouw at cwi.nl  Thu Feb  4 09:39:58 2010
From: C.P.T.de.Gouw at cwi.nl (C.P.T.de.Gouw at cwi.nl)
Date: Thu, 4 Feb 2010 18:39:58 +0100 (CET)
Subject: [antlr-interest] Heterogeneous token types
In-Reply-To: <2348.81.58.161.110.1265236359.squirrel@webmail.cwi.nl>
References: <2935.81.58.161.110.1265222848.squirrel@webmail.cwi.nl><f181de673e3f57419a3130c0b4581f38@temporal-wave.com><2133.81.58.161.110.1265230316.squirrel@webmail.cwi.nl><9DF25647-8B85-4483-89A6-0D85708DCACD@cs.usfca.edu>
	<2348.81.58.161.110.1265236359.squirrel@webmail.cwi.nl>
Message-ID: <1936.81.58.161.110.1265305198.squirrel@webmail.cwi.nl>

>> I think you override emit()
>
> That is indeed what I'm doing, good to hear I'm on the right track :)
>
> But if I refer to a token in a parser action (with $token), it's of type
> CommonToken, and not the subclass of Token that I'm emitting. I can't use
> the TokenLabelType option, since different tokens emit different types of
> token Objects.
>
> Obviously I can cast $token in the parser action to the appropriate type,
> but I hoped this would not be necessary.

To hopefully clarify it a bit further, in bison one can specify with
%union the list of possible types of the token objects, and with %token
<TYPE> x that token x is an object of type TYPE.

Is there some way to do this in antlr (specifying the type of the token
objects on a per-token basis, instead of one single type for all tokens
like TokenLabelType does)?


Stijn

From TRaef at wewatchyourwebsite.com  Thu Feb  4 12:21:51 2010
From: TRaef at wewatchyourwebsite.com (Thomas Raef)
Date: Thu, 4 Feb 2010 14:21:51 -0600
Subject: [antlr-interest] Please use the V3.2 runtime or higher
Message-ID: <C4A2DDDA4F0A5C46A91AE25DD243546E14C75C@ebs-2200.ebasedsecurity.local>

I'm running on Windows (sorry) and I downloaded the latest from the
website for Python, but it's only 3.1. The recognizer has been generated
by V3.2 but my runtime is V3.1. Where do I get the Python runtime V3.2?

 

Thomas J. Raef

 


From greneche.hugo at gmail.com  Thu Feb  4 12:39:35 2010
From: greneche.hugo at gmail.com (Hugo)
Date: Thu, 04 Feb 2010 21:39:35 +0100
Subject: [antlr-interest] tutorials ?
Message-ID: <4B6B3087.4010308@gmail.com>

hi,
i'm a little lost regarding all functionnalities of antlr..

please could you indicate me an tutorial or some example
of a grammar language which could parse and immediatly
execute some code.(at the same time of ast creation.)
specially focus of the management of

'if' cond stat+ 'else' stat+ 'end'. (where stat can be an other 
'if'..'else'..'end'.  etc...) .


thanks in advance for helping me



From scott at javadude.com  Thu Feb  4 12:44:04 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Thu, 4 Feb 2010 15:44:04 -0500
Subject: [antlr-interest] tutorials ?
In-Reply-To: <4B6B3087.4010308@gmail.com>
References: <4B6B3087.4010308@gmail.com>
Message-ID: <d19d16481002041244g42f1d21bt80a605b375310f2f@mail.gmail.com>

Check out my video tutorials at http://javadude.com/articles/antlr3xtut

Eventually it will be an entire compiler for a little imperative language.

Enjoy!
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Thu, Feb 4, 2010 at 3:39 PM, Hugo <greneche.hugo at gmail.com> wrote:
> hi,
> i'm a little lost regarding all functionnalities of antlr..
>
> please could you indicate me an tutorial or some example
> of a grammar language which could parse and immediatly
> execute some code.(at the same time of ast creation.)
> specially focus of the management of
>
> 'if' cond stat+ 'else' stat+ 'end'. (where stat can be an other
> 'if'..'else'..'end'. ?etc...) .
>
>
> thanks in advance for helping me
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From stefika at gmail.com  Thu Feb  4 13:15:09 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Thu, 4 Feb 2010 15:15:09 -0600
Subject: [antlr-interest] tutorials ?
In-Reply-To: <d19d16481002041244g42f1d21bt80a605b375310f2f@mail.gmail.com>
References: <4B6B3087.4010308@gmail.com>
	<d19d16481002041244g42f1d21bt80a605b375310f2f@mail.gmail.com>
Message-ID: <1332b72e1002041315i7e24f5f0m90256ccddf742e4@mail.gmail.com>

Also,

Terrence's books(ANTLR Reference, for example), are fantastic tutorials on
the topic. Most of the students I've worked with that use Antlr find them to
be very readable (and I do as well). They include lots and lots of examples
and are much easier to understand than your typical compilers book.

I'm not finished with the new one yet, so I can't comment on it.

Andreas Stefik, Ph.D.
Assistant Professor
Department of Computer Science
Southern Illinois University Edwardsville


On Thu, Feb 4, 2010 at 2:44 PM, Scott Stanchfield <scott at javadude.com>wrote:

> Check out my video tutorials at http://javadude.com/articles/antlr3xtut
>
> Eventually it will be an entire compiler for a little imperative language.
>
> Enjoy!
> -- Scott
>
> ----------------------------------------
> Scott Stanchfield
> http://javadude.com
>
>
>
> On Thu, Feb 4, 2010 at 3:39 PM, Hugo <greneche.hugo at gmail.com> wrote:
> > hi,
> > i'm a little lost regarding all functionnalities of antlr..
> >
> > please could you indicate me an tutorial or some example
> > of a grammar language which could parse and immediatly
> > execute some code.(at the same time of ast creation.)
> > specially focus of the management of
> >
> > 'if' cond stat+ 'else' stat+ 'end'. (where stat can be an other
> > 'if'..'else'..'end'.  etc...) .
> >
> >
> > thanks in advance for helping me
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From james.crowley at gmail.com  Thu Feb  4 15:11:13 2010
From: james.crowley at gmail.com (James Crowley)
Date: Thu, 4 Feb 2010 23:11:13 +0000
Subject: [antlr-interest] Real simple grammar - newbie help?!
Message-ID: <817d6cb01002041511u428788au2a56209db6d2e7d8@mail.gmail.com>

hey guys,

I've got a really simple grammar that I'm trying to get working, but failing
miserably at the moment. Would really appreciate some pointers on this...

root : (keyword|ignore)*;
keyword : KEYWORD;
ignore : IGNORE;

KEYWORD : ABBRV|WORD;
fragment WORD : ALPHA+;
fragment ALPHA : 'a'..'z'|'A'..'Z';
fragment ABBRV : WORD?('.'WORD);

IGNORE : .{ Skip(); };

With the following test input:

"some ASP.NET and .NET stuff. that work."

I'm wanting a tree that is just a list of keyword nodes,

"some", "ASP.NET", "and", ".NET", "stuff", "that", "work"

At the moment I get

"some", "ASP.NET", "and", ".NET", "stuff. that",

(for some reason "." appears within the last keyword, and it misses "work"

If I change the ABBRV clause to

fragment ABBRV : ('.'WORD);

then that works fine, but I get keyword (asp) and keyword (.net) -
seperately - but I need them as a single token. Any help you can give would
be much appreciated.

Many thanks

James

From TRaef at wewatchyourwebsite.com  Thu Feb  4 15:28:47 2010
From: TRaef at wewatchyourwebsite.com (Thomas Raef)
Date: Thu, 4 Feb 2010 17:28:47 -0600
Subject: [antlr-interest] Anyone have some good Python examples?
Message-ID: <C4A2DDDA4F0A5C46A91AE25DD243546E14C767@ebs-2200.ebasedsecurity.local>

I'm trying to get my simple program working and I keep running into
errors.

 

In my JavaScript.g file I've set the language=Python;

 

I have a @members section like:

 

@members

{

                insideFunction = False;

                

def prettyPrint(type, text):

                text = text.replace("\r", '') //to remove carriage
returns in my javascript file (mt.js)

                text = text.replace("\n", '') // to remove new lines

                if len(text) > 55:

                                start = text[:40]

                                end = text[-10:]

                                text = start+' ... '+end

                print type+' -> '+text

}

 

 

In a JavaScript.G file I have in the functionBody section:

 

functionBody

                :  '{' {insideFunction=True;) LT!* sourceElements LT!*
'}' {insideFunction=False;}

                ;

 

In sourceElement section I have:

sourceElement

                : f=functionDeclaration { prettyPrint("FUNCTION ",
$f.text.toString()); }

                | s=statement { prettyPrint("STATEMENT ",
$s.text.toString()); }

                ;

 

Then in python I'm doing:

import antlr3

from JavaScriptLexer import JavaScriptLexer

from JavaScriptParser import JavaScriptParser

 

char_stream = antlr3.ANTLRFileStream("mt.js")

lexer = JavaScriptLexer(char_stream)

tokens = antlr3.CommonTokenStream(lexer)

parser = JavaScriptParser(tokens)

parser.program()

 

it barfs:

 

prettyPrint("STATEMENT", ((s is not None) and
[self.input.toString(s.start, s.stop)] or [None])[0].toString());

NameError: global name 'prettyPrint' is not defined

 

I'm trying, but failing. Can anyone with python experience help me out?

 

Thank you in advance.

 

Thomas J. Raef

 


From wclodius at los-alamos.net  Thu Feb  4 18:37:00 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Thu, 4 Feb 2010 19:37:00 -0700
Subject: [antlr-interest] adding child node in rewring rule
In-Reply-To: <b9dc5a051002040857l36cd71ah15f9f6312eb29827@mail.gmail.com>
References: <op.u7guqrcit3jqlu@win-mupvrp0jyrf>
	<1591B86F-8E48-4272-A141-3C8469C875F7@los-alamos.net>
	<op.u7jhg31ut3jqlu@win-mupvrp0jyrf>
	<b9dc5a051002040857l36cd71ah15f9f6312eb29827@mail.gmail.com>
Message-ID: <C3F5273F-51CF-4FEB-A58F-0F5034796D1F@los-alamos.net>

What he need to do is if the do in the do statement is followed by an integer literal is walk the tree until he finds the label with that literal and make the end of the statement that begins with that label the end of the do loop. He also needs to read up on Sale's algorithm, although unfortunately the revised version has an error for do loops, or so Waite has told me.

On Feb 4, 2010, at 9:57 AM, Chris DiGiano wrote:

> I would try something like this...
> 
> do_construct
>  :  do_stmt
>        ( ( {blablabla}?=>  execs+=exec_construct ) )*
>        ( ( {blablabla}?=> final_exec_construct_or_end_do ) )
>     -> ^(T_DO_CONSTRUCT $execs* final_exec_construct_or_end_do)
> 
> final_exec_construct_or_end_do
>  : exec_construct -> exec_construct T_ENDDO
>  | end_do -> end_do
>  ;
> 
> Do you really need to repeatedly test blablablabla?
> 
> Chris
> 
> 2010/2/2 ??????? ?????? <yurushkin at rambler.ru>:
>> I know about this project. But it (OFP project) doesn't fit to my
>> requirements
>> 1) it's written in java (I need C target)
>> 2) It doesn't create AST. It's important because, in the past I didn't use
>> AST
>> and had many memory leakages. For Java there're no such problem, but it is
>> for C target.
>> 3) They have many fixes (coded in java).
>> 
>> William B. Clodius <wclodius at los-alamos.net> ?????(?) ? ????? ?????? Wed,
>> 03 Feb 2010 06:34:45 +0300:
>> 
>>> Again I urge you to check out the Open Fortran Parser Project,
>>> http://fortran-parser.sourceforge.net/,
>>> as you are trying to reinvent the wheel. If their license is too
>>> restrictive you might consider the parser portion of g2c, g77, gfortran,
>>> or some of the commercial
>>> compilers.
>>> 
>>> On Feb 1, 2010, at 1:48 PM, ??????? ?????? wrote:
>>> 
>>>> Hello,
>>>> Could you help me with following problem:
>>>> 
>>>> I try to parse do_stmts of fortran (incudining non-block)
>>>> 
>>>> there is a part of grammar
>>>> 
>>>> do_construct
>>>>   :  do_stmt
>>>>         ( ( {blablabla}?=>  (exec_construct | end_do) ) )+
>>>>      -> ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)
>>>> 
>>>> as you can see, (..)+ cycle can be stopped by blablabla predicate.
>>>> 
>>>> What I need:
>>>> if the last stmt is exec_construct, I want to generate the following:
>>>>   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* T_ENDDO)
>>>> 
>>>> If the last stmt is end_do, I want to generate the following:
>>>>   ^(T_DO_CONSTRUCT do_stmt execution_part_construct* end_do)
>>>> 
>>>> what can you suggest?
>>>> thanks a lot
>>>> 
>>>> --
>>>> Best regards,
>>>> Michael
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>> 
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> --
>> Best regards,
>> Michael
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> 


From gustaf.j at gmail.com  Fri Feb  5 02:31:31 2010
From: gustaf.j at gmail.com (Gustaf Johansson)
Date: Fri, 5 Feb 2010 11:31:31 +0100
Subject: [antlr-interest] Question regarding stringtemplate usage design
Message-ID: <5f59a7211002050231l20b797f6n7ad57982bd9cada3@mail.gmail.com>

Hi,

I have a antlr parser that is using stringtemplates to "translate" the input.
Im having problems when i want to reorder the output from the input,
when this spans multiple rules down.

Simplified example: (this is what i have, but its obviously not working)

prog: a b=ID -> progTempl(a={$a.st}, b={$b.text});
a: x=ID y=ID -> aTempl(x={$x.text}, y={$y.text});


I would like the output to be:

"a.y b a.x"

So the question is basically, how do i return multiple string from a
stringtemplate?
Since im using $a.st in the prog rule i get the entire text, but i
would want it in 2 chunks. So i can insert b "between" the 2 chunks.

Best Regards Gustaf

From parrt at cs.usfca.edu  Fri Feb  5 11:12:13 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 5 Feb 2010 11:12:13 -0800
Subject: [antlr-interest] Question regarding stringtemplate usage design
In-Reply-To: <5f59a7211002050231l20b797f6n7ad57982bd9cada3@mail.gmail.com>
References: <5f59a7211002050231l20b797f6n7ad57982bd9cada3@mail.gmail.com>
Message-ID: <EDD0A0F5-F8AE-4E73-ABE3-C32918997817@cs.usfca.edu>

hi, you'd have to return multiple ST manually with returns [...].
T
On Feb 5, 2010, at 2:31 AM, Gustaf Johansson wrote:

> Hi,
> 
> I have a antlr parser that is using stringtemplates to "translate" the input.
> Im having problems when i want to reorder the output from the input,
> when this spans multiple rules down.
> 
> Simplified example: (this is what i have, but its obviously not working)
> 
> prog: a b=ID -> progTempl(a={$a.st}, b={$b.text});
> a: x=ID y=ID -> aTempl(x={$x.text}, y={$y.text});
> 
> 
> I would like the output to be:
> 
> "a.y b a.x"
> 
> So the question is basically, how do i return multiple string from a
> stringtemplate?
> Since im using $a.st in the prog rule i get the entire text, but i
> would want it in 2 chunks. So i can insert b "between" the 2 chunks.
> 
> Best Regards Gustaf
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From digi+antlr-interest at google.com  Fri Feb  5 11:36:32 2010
From: digi+antlr-interest at google.com (Chris DiGiano)
Date: Fri, 5 Feb 2010 12:36:32 -0700
Subject: [antlr-interest] Why can't I use $stop in an @after action?
Message-ID: <b9dc5a051002051136v5cb88bc7n93fe9423212f266@mail.gmail.com>

I've read and reread the documentation on the $stop attributes of
rules, but I can't for the life of me figure out how to use it to get
the last matched node. Here's what I want to do:

impliedQualifiedName returns [Tree idNode]
@after {
  $idNode = $stop;  // I also tried $impliedQualifiedName.stop
}
  : Identifier
  | ^( BYFIELD qn=impliedQualifiedName Identifier )
  ;

But I get the error "attribute is not a token, parameter, or return
value: stop".

Instead I have to do:

impliedQualifiedName returns [Tree idNode]
  : Identifier { $idNode = $Identifier; }
  | ^( BYFIELD qn=impliedQualifiedName Identifier )
    { $idNode = $Identifier; }
  ;

What am I doing wrong?

Chris

From meyer.timm at googlemail.com  Fri Feb  5 11:50:32 2010
From: meyer.timm at googlemail.com (Timm Meyer)
Date: Fri, 05 Feb 2010 20:50:32 +0100
Subject: [antlr-interest] Simple Parser Problem?
Message-ID: <4B6C7688.4020107@googlemail.com>

Hi there,

I hope this is not a too simple problem, but I am searching for hours 
for a solution.

The grammar is:

headerword
    :    (HEADERWORDCHAR | WORDCHAR)
     (DIGIT | HEADERWORDCHAR | WORDCHAR)*;


DIGIT    : '0'..'9' ;
WORDCHAR    : ('a'..'z' | 'A'..'Z');   
HEADERWORDCHAR : ( '$' | '&' | '(' | ')' | ',' | '.' | '+' | '[' | ']' | 
'\'');

And everey time I try to match
(137394948)
or
(137394948)7

I get a NoViableAltException.

Could anyone explain to me what I am doing wrong here?

Cheers, Timm

From parrt at cs.usfca.edu  Fri Feb  5 11:55:03 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 5 Feb 2010 11:55:03 -0800
Subject: [antlr-interest] Why can't I use $stop in an @after action?
In-Reply-To: <b9dc5a051002051136v5cb88bc7n93fe9423212f266@mail.gmail.com>
References: <b9dc5a051002051136v5cb88bc7n93fe9423212f266@mail.gmail.com>
Message-ID: <060C951C-BD40-4B86-975D-528870CA9761@cs.usfca.edu>

weird.  wait. does $stop work for tree grammars? you might try input.LT(-1) or -2.
T
On Feb 5, 2010, at 11:36 AM, Chris DiGiano wrote:

> I've read and reread the documentation on the $stop attributes of
> rules, but I can't for the life of me figure out how to use it to get
> the last matched node. Here's what I want to do:
> 
> impliedQualifiedName returns [Tree idNode]
> @after {
>  $idNode = $stop;  // I also tried $impliedQualifiedName.stop
> }
>  : Identifier
>  | ^( BYFIELD qn=impliedQualifiedName Identifier )
>  ;
> 
> But I get the error "attribute is not a token, parameter, or return
> value: stop".
> 
> Instead I have to do:
> 
> impliedQualifiedName returns [Tree idNode]
>  : Identifier { $idNode = $Identifier; }
>  | ^( BYFIELD qn=impliedQualifiedName Identifier )
>    { $idNode = $Identifier; }
>  ;
> 
> What am I doing wrong?
> 
> Chris
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From fridi70 at gmx.de  Fri Feb  5 12:00:33 2010
From: fridi70 at gmx.de (fridi)
Date: Fri, 05 Feb 2010 21:00:33 +0100
Subject: [antlr-interest] Simple Parser Problem?
In-Reply-To: <4B6C7688.4020107@googlemail.com>
References: <4B6C7688.4020107@googlemail.com>
Message-ID: <4B6C78E1.4060002@gmx.de>

Hi Timm,

I tested your grammar in ANTLR IDE and ANTLR Works as well and it works 
as expected!

cheers, Fridi



Timm Meyer schrieb:
> Hi there,
>
> I hope this is not a too simple problem, but I am searching for hours 
> for a solution.
>
> The grammar is:
>
> headerword
>     :    (HEADERWORDCHAR | WORDCHAR)
>      (DIGIT | HEADERWORDCHAR | WORDCHAR)*;
>
>
> DIGIT    : '0'..'9' ;
> WORDCHAR    : ('a'..'z' | 'A'..'Z');   
> HEADERWORDCHAR : ( '$' | '&' | '(' | ')' | ',' | '.' | '+' | '[' | ']' | 
> '\'');
>
> And everey time I try to match
> (137394948)
> or
> (137394948)7
>
> I get a NoViableAltException.
>
> Could anyone explain to me what I am doing wrong here?
>
> Cheers, Timm
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Timm.jpg
Type: image/jpeg
Size: 8542 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100205/84d8e335/attachment.jpg 

From parrt at cs.usfca.edu  Fri Feb  5 12:07:13 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 5 Feb 2010 12:07:13 -0800
Subject: [antlr-interest] ANTLR v4 thoughts on tree pattern matchers
Message-ID: <9AFB940C-CB1A-416B-A736-8444FBCD0B81@cs.usfca.edu>

Hi, I have finished the first semantic error checking phase and have some nice things report about tree pattern matchers:

http://www.antlr.org/wiki/display/~admin/Enforcing+semantics

Ter

From jimi at temporal-wave.com  Fri Feb  5 12:09:59 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 05 Feb 2010 12:09:59 -0800
Subject: [antlr-interest] Simple Parser Problem?
In-Reply-To: <4B6C7688.4020107@googlemail.com>
Message-ID: <24df87b860aeff4cb51be11c8cb1f054@temporal-wave.com>

Your lexer does not cover all possibilities such as \n \r, space etc. Add as the last rule:


ANY : . { skip(); } ;

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Timm Meyer
> Sent: Friday, February 05, 2010 11:51 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Simple Parser Problem?
> 
> Hi there,
> 
> I hope this is not a too simple problem, but I am searching for hours
> for a solution.
> 
> The grammar is:
> 
> headerword
>     :    (HEADERWORDCHAR | WORDCHAR)
>      (DIGIT | HEADERWORDCHAR | WORDCHAR)*;
> 
> 
> DIGIT    : '0'..'9' ;
> WORDCHAR    : ('a'..'z' | 'A'..'Z');
> HEADERWORDCHAR : ( '$' | '&' | '(' | ')' | ',' | '.' | '+' | '[' | ']'
> |
> '\'');
> 
> And everey time I try to match
> (137394948)
> or
> (137394948)7
> 
> I get a NoViableAltException.
> 
> Could anyone explain to me what I am doing wrong here?
> 
> Cheers, Timm
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Fri Feb  5 12:20:10 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 05 Feb 2010 12:20:10 -0800
Subject: [antlr-interest] Simple Parser Problem?
In-Reply-To: <4B6C7CCE.7080900@googlemail.com>
Message-ID: <5eb39e4dfc0da648bfa845efbf6a2fbb@temporal-wave.com>

Well your problems are with the larger grammar then I am afraid as there is nothing wrong with the example you gave other than not covering some characters.

Jim

> -----Original Message-----
> From: Timm Meyer [mailto:meyer.timm at googlemail.com]
> Sent: Friday, February 05, 2010 12:17 PM
> To: Jim Idle
> Subject: Re: [antlr-interest] Simple Parser Problem?
> 
> This doesnt change anything.
> And also, the characters from the input are (theoretically) all
> matched.
> (Also this is just a part of the original grammar, but an isolated
> short
> example which generates an error).
> 
> Timm
> 
> Jim Idle schrieb:
> > Your lexer does not cover all possibilities such as \n \r, space etc.
> Add as the last rule:
> >
> >
> > ANY : . { skip(); } ;
> >
> > Jim
> >
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Timm Meyer
> >> Sent: Friday, February 05, 2010 11:51 AM
> >> To: antlr-interest at antlr.org
> >> Subject: [antlr-interest] Simple Parser Problem?
> >>
> >> Hi there,
> >>
> >> I hope this is not a too simple problem, but I am searching for
> hours
> >> for a solution.
> >>
> >> The grammar is:
> >>
> >> headerword
> >>     :    (HEADERWORDCHAR | WORDCHAR)
> >>      (DIGIT | HEADERWORDCHAR | WORDCHAR)*;
> >>
> >>
> >> DIGIT    : '0'..'9' ;
> >> WORDCHAR    : ('a'..'z' | 'A'..'Z');
> >> HEADERWORDCHAR : ( '$' | '&' | '(' | ')' | ',' | '.' | '+' | '[' |
> ']'
> >> |
> >> '\'');
> >>
> >> And everey time I try to match
> >> (137394948)
> >> or
> >> (137394948)7
> >>
> >> I get a NoViableAltException.
> >>
> >> Could anyone explain to me what I am doing wrong here?
> >>
> >> Cheers, Timm
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> >> email-address
> >>
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> >





From TRaef at wewatchyourwebsite.com  Fri Feb  5 13:23:10 2010
From: TRaef at wewatchyourwebsite.com (Thomas Raef)
Date: Fri, 5 Feb 2010 15:23:10 -0600
Subject: [antlr-interest] Anyone have some good Python examples?
Message-ID: <C4A2DDDA4F0A5C46A91AE25DD243546E14C76B@ebs-2200.ebasedsecurity.local>

Okay. I would like to thank you all for allowing me to figure out the
errors of my efforts. No sarcasm.

I found out that since Bart was nice enough to get me started, even
though it was a Java example, I didn't realize where my Python program
was starting and what was antlr code.

I discovered that my line: insideFunction = False; was causing the java
compilation to complain so I moved that inside my def. I also realized
that the code: $f.text.toString()); is java and is not part of antlr.
Since I was using language=Python, it had no idea what I was trying to
do.

Now when I run my program, all I get is: STATEMENT ->
(JavaScriptParser.statement_return object at 0x02168C90)

What I want to see is the line of javascript code from the .js file I'm
reading from prefaced with either STATEMENT or FUNCTION.

Can anyone help me with that?

I've watched the tutorials and read through the book, but I cannot for
the life of me figure out how to get the line of javascript to print.

Please help...

Thomas J. Raef



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Thomas Raef
> Sent: Thursday, February 04, 2010 5:29 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Anyone have some good Python examples?
> 
> I'm trying to get my simple program working and I keep running into
> errors.
> 
> 
> 
> In my JavaScript.g file I've set the language=Python;
> 
> 
> 
> I have a @members section like:
> 
> 
> 
> @members
> 
> {
> 
>                 insideFunction = False;
> 
> 
> 
> def prettyPrint(type, text):
> 
>                 text = text.replace("\r", '') //to remove carriage
> returns in my javascript file (mt.js)
> 
>                 text = text.replace("\n", '') // to remove new lines
> 
>                 if len(text) > 55:
> 
>                                 start = text[:40]
> 
>                                 end = text[-10:]
> 
>                                 text = start+' ... '+end
> 
>                 print type+' -> '+text
> 
> }
> 
> 
> 
> 
> 
> In a JavaScript.G file I have in the functionBody section:
> 
> 
> 
> functionBody
> 
>                 :  '{' {insideFunction=True;) LT!* sourceElements LT!*
> '}' {insideFunction=False;}
> 
>                 ;
> 
> 
> 
> In sourceElement section I have:
> 
> sourceElement
> 
>                 : f=functionDeclaration { prettyPrint("FUNCTION ",
> $f.text.toString()); }
> 
>                 | s=statement { prettyPrint("STATEMENT ",
> $s.text.toString()); }
> 
>                 ;
> 
> 
> 
> Then in python I'm doing:
> 
> import antlr3
> 
> from JavaScriptLexer import JavaScriptLexer
> 
> from JavaScriptParser import JavaScriptParser
> 
> 
> 
> char_stream = antlr3.ANTLRFileStream("mt.js")
> 
> lexer = JavaScriptLexer(char_stream)
> 
> tokens = antlr3.CommonTokenStream(lexer)
> 
> parser = JavaScriptParser(tokens)
> 
> parser.program()
> 
> 
> 
> it barfs:
> 
> 
> 
> prettyPrint("STATEMENT", ((s is not None) and
> [self.input.toString(s.start, s.stop)] or [None])[0].toString());
> 
> NameError: global name 'prettyPrint' is not defined
> 
> 
> 
> I'm trying, but failing. Can anyone with python experience help me
out?
> 
> 
> 
> Thank you in advance.
> 
> 
> 
> Thomas J. Raef
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From mike.matera at xilinx.com  Fri Feb  5 13:29:38 2010
From: mike.matera at xilinx.com (Michael Matera)
Date: Fri, 5 Feb 2010 13:29:38 -0800
Subject: [antlr-interest] Real simple grammar - newbie help?!
In-Reply-To: <817d6cb01002041511u428788au2a56209db6d2e7d8@mail.gmail.com>
References: <817d6cb01002041511u428788au2a56209db6d2e7d8@mail.gmail.com>
Message-ID: <490b13ad-2412-45f2-bf28-2289edcd9e67@VA3EHSMHS033.ehs.local>

Hi James,

I don't think this grammar is that simple.  This is not a context-free 
grammar:  The meaning of '.' depends on what follows it.  In other words 
when the Lexer looks at the dot in '.NET' you expect a KEYWORD 
production, but when it sees the dot in 'work.' you expect no token. 
This is a problem.  Can you redesign this language?

Cheers
./m

James Crowley wrote:
> hey guys,
> 
> I've got a really simple grammar that I'm trying to get working, but failing
> miserably at the moment. Would really appreciate some pointers on this...
> 
> root : (keyword|ignore)*;
> keyword : KEYWORD;
> ignore : IGNORE;
> 
> KEYWORD : ABBRV|WORD;
> fragment WORD : ALPHA+;
> fragment ALPHA : 'a'..'z'|'A'..'Z';
> fragment ABBRV : WORD?('.'WORD);
> 
> IGNORE : .{ Skip(); };
> 
> With the following test input:
> 
> "some ASP.NET and .NET stuff. that work."
> 
> I'm wanting a tree that is just a list of keyword nodes,
> 
> "some", "ASP.NET", "and", ".NET", "stuff", "that", "work"
> 
> At the moment I get
> 
> "some", "ASP.NET", "and", ".NET", "stuff. that",
> 
> (for some reason "." appears within the last keyword, and it misses "work"
> 
> If I change the ABBRV clause to
> 
> fragment ABBRV : ('.'WORD);
> 
> then that works fine, but I get keyword (asp) and keyword (.net) -
> seperately - but I need them as a single token. Any help you can give would
> be much appreciated.
> 
> Many thanks
> 
> James
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

This email and any attachments are intended for the sole use of the named recipient(s) and contain(s) confidential information that may be proprietary, privileged or copyrighted under applicable law. If you are not the intended recipient, do not read, copy, or forward this email message or any attachments. Delete this email message and any attachments immediately.



From bkiers at gmail.com  Fri Feb  5 13:59:47 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Fri, 5 Feb 2010 22:59:47 +0100
Subject: [antlr-interest] Anyone have some good Python examples?
In-Reply-To: <C4A2DDDA4F0A5C46A91AE25DD243546E14C76B@ebs-2200.ebasedsecurity.local>
References: <C4A2DDDA4F0A5C46A91AE25DD243546E14C76B@ebs-2200.ebasedsecurity.local>
Message-ID: <af443a971002051359y4ed3ac69n59ea7e555332382d@mail.gmail.com>

Thomas,

I highly recommend *carefully* reading the book.
Forgive me for saying, but I doubt that you actually read it. And if so, you
could only have skimmed through it (you have ordered it only yesterday!).

Regards,

Bart.


On Fri, Feb 5, 2010 at 10:23 PM, Thomas Raef
<TRaef at wewatchyourwebsite.com>wrote:

> Okay. I would like to thank you all for allowing me to figure out the
> errors of my efforts. No sarcasm.
>
> I found out that since Bart was nice enough to get me started, even
> though it was a Java example, I didn't realize where my Python program
> was starting and what was antlr code.
>
> I discovered that my line: insideFunction = False; was causing the java
> compilation to complain so I moved that inside my def. I also realized
> that the code: $f.text.toString()); is java and is not part of antlr.
> Since I was using language=Python, it had no idea what I was trying to
> do.
>
> Now when I run my program, all I get is: STATEMENT ->
> (JavaScriptParser.statement_return object at 0x02168C90)
>
> What I want to see is the line of javascript code from the .js file I'm
> reading from prefaced with either STATEMENT or FUNCTION.
>
> Can anyone help me with that?
>
> I've watched the tutorials and read through the book, but I cannot for
> the life of me figure out how to get the line of javascript to print.
>
> Please help...
>
> Thomas J. Raef
>
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Thomas Raef
> > Sent: Thursday, February 04, 2010 5:29 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Anyone have some good Python examples?
> >
> > I'm trying to get my simple program working and I keep running into
> > errors.
> >
> >
> >
> > In my JavaScript.g file I've set the language=Python;
> >
> >
> >
> > I have a @members section like:
> >
> >
> >
> > @members
> >
> > {
> >
> >                 insideFunction = False;
> >
> >
> >
> > def prettyPrint(type, text):
> >
> >                 text = text.replace("\r", '') //to remove carriage
> > returns in my javascript file (mt.js)
> >
> >                 text = text.replace("\n", '') // to remove new lines
> >
> >                 if len(text) > 55:
> >
> >                                 start = text[:40]
> >
> >                                 end = text[-10:]
> >
> >                                 text = start+' ... '+end
> >
> >                 print type+' -> '+text
> >
> > }
> >
> >
> >
> >
> >
> > In a JavaScript.G file I have in the functionBody section:
> >
> >
> >
> > functionBody
> >
> >                 :  '{' {insideFunction=True;) LT!* sourceElements LT!*
> > '}' {insideFunction=False;}
> >
> >                 ;
> >
> >
> >
> > In sourceElement section I have:
> >
> > sourceElement
> >
> >                 : f=functionDeclaration { prettyPrint("FUNCTION ",
> > $f.text.toString()); }
> >
> >                 | s=statement { prettyPrint("STATEMENT ",
> > $s.text.toString()); }
> >
> >                 ;
> >
> >
> >
> > Then in python I'm doing:
> >
> > import antlr3
> >
> > from JavaScriptLexer import JavaScriptLexer
> >
> > from JavaScriptParser import JavaScriptParser
> >
> >
> >
> > char_stream = antlr3.ANTLRFileStream("mt.js")
> >
> > lexer = JavaScriptLexer(char_stream)
> >
> > tokens = antlr3.CommonTokenStream(lexer)
> >
> > parser = JavaScriptParser(tokens)
> >
> > parser.program()
> >
> >
> >
> > it barfs:
> >
> >
> >
> > prettyPrint("STATEMENT", ((s is not None) and
> > [self.input.toString(s.start, s.stop)] or [None])[0].toString());
> >
> > NameError: global name 'prettyPrint' is not defined
> >
> >
> >
> > I'm trying, but failing. Can anyone with python experience help me
> out?
> >
> >
> >
> > Thank you in advance.
> >
> >
> >
> > Thomas J. Raef
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From james.crowley at gmail.com  Fri Feb  5 16:45:42 2010
From: james.crowley at gmail.com (James Crowley)
Date: Sat, 6 Feb 2010 00:45:42 +0000
Subject: [antlr-interest] Real simple grammar - newbie help?!
In-Reply-To: <490b13ad-2412-45f2-bf28-2289edcd9e67@VA3EHSMHS033.ehs.local>
References: <817d6cb01002041511u428788au2a56209db6d2e7d8@mail.gmail.com>
	<490b13ad-2412-45f2-bf28-2289edcd9e67@VA3EHSMHS033.ehs.local>
Message-ID: <817d6cb01002051645s3e261091m71c879ac73133a2b@mail.gmail.com>

Hi Michael,

Thanks for the response. Sadly not - the language is English ;-) But just
hoping to do some basic tokenization of paragraphs of text (essentially just
extracting keywords) - thought it would be faster/easier to use a tool like
ANTLR than using regex or attempting to roll my own. Am I being foolish for
even attempting this?

James

On 5 February 2010 21:29, Michael Matera <mike.matera at xilinx.com> wrote:

> Hi James,
>
> I don't think this grammar is that simple.  This is not a context-free
> grammar:  The meaning of '.' depends on what follows it.  In other words
> when the Lexer looks at the dot in '.NET' you expect a KEYWORD production,
> but when it sees the dot in 'work.' you expect no token. This is a problem.
>  Can you redesign this language?
>
> Cheers
> ./m
>
> James Crowley wrote:
>
>> hey guys,
>>
>> I've got a really simple grammar that I'm trying to get working, but
>> failing
>> miserably at the moment. Would really appreciate some pointers on this...
>>
>> root : (keyword|ignore)*;
>> keyword : KEYWORD;
>> ignore : IGNORE;
>>
>> KEYWORD : ABBRV|WORD;
>> fragment WORD : ALPHA+;
>> fragment ALPHA : 'a'..'z'|'A'..'Z';
>> fragment ABBRV : WORD?('.'WORD);
>>
>> IGNORE : .{ Skip(); };
>>
>> With the following test input:
>>
>> "some ASP.NET and .NET stuff. that work."
>>
>> I'm wanting a tree that is just a list of keyword nodes,
>>
>> "some", "ASP.NET", "and", ".NET", "stuff", "that", "work"
>>
>> At the moment I get
>>
>> "some", "ASP.NET", "and", ".NET", "stuff. that",
>>
>> (for some reason "." appears within the last keyword, and it misses "work"
>>
>> If I change the ABBRV clause to
>>
>> fragment ABBRV : ('.'WORD);
>>
>> then that works fine, but I get keyword (asp) and keyword (.net) -
>> seperately - but I need them as a single token. Any help you can give
>> would
>> be much appreciated.
>>
>> Many thanks
>>
>> James
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
> This email and any attachments are intended for the sole use of the named
> recipient(s) and contain(s) confidential information that may be
> proprietary, privileged or copyrighted under applicable law. If you are not
> the intended recipient, do not read, copy, or forward this email message or
> any attachments. Delete this email message and any attachments immediately.
>
>
>

From bkiers at gmail.com  Fri Feb  5 22:20:34 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 6 Feb 2010 07:20:34 +0100
Subject: [antlr-interest] Anyone have some good Python examples?
In-Reply-To: <af443a971002051359y4ed3ac69n59ea7e555332382d@mail.gmail.com>
References: <C4A2DDDA4F0A5C46A91AE25DD243546E14C76B@ebs-2200.ebasedsecurity.local>
	<af443a971002051359y4ed3ac69n59ea7e555332382d@mail.gmail.com>
Message-ID: <af443a971002052220g13b23868sbb3cda2ce6d0452c@mail.gmail.com>

Thomas,

Especially read the paragraph 'Element Labels' on page 95 carefully: that's
what you need to print the part(s) you're interested in.

Regards,

Bart.


On Fri, Feb 5, 2010 at 10:59 PM, Bart Kiers <bkiers at gmail.com> wrote:

> Thomas,
>
> I highly recommend *carefully* reading the book.
> Forgive me for saying, but I doubt that you actually read it. And if so,
> you could only have skimmed through it (you have ordered it only
> yesterday!).
>
> Regards,
>
> Bart.
>
>
>
> On Fri, Feb 5, 2010 at 10:23 PM, Thomas Raef <TRaef at wewatchyourwebsite.com
> > wrote:
>
>> Okay. I would like to thank you all for allowing me to figure out the
>> errors of my efforts. No sarcasm.
>>
>> I found out that since Bart was nice enough to get me started, even
>> though it was a Java example, I didn't realize where my Python program
>> was starting and what was antlr code.
>>
>> I discovered that my line: insideFunction = False; was causing the java
>> compilation to complain so I moved that inside my def. I also realized
>> that the code: $f.text.toString()); is java and is not part of antlr.
>> Since I was using language=Python, it had no idea what I was trying to
>> do.
>>
>> Now when I run my program, all I get is: STATEMENT ->
>> (JavaScriptParser.statement_return object at 0x02168C90)
>>
>> What I want to see is the line of javascript code from the .js file I'm
>> reading from prefaced with either STATEMENT or FUNCTION.
>>
>> Can anyone help me with that?
>>
>> I've watched the tutorials and read through the book, but I cannot for
>> the life of me figure out how to get the line of javascript to print.
>>
>> Please help...
>>
>> Thomas J. Raef
>>
>>
>>
>> > -----Original Message-----
>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > bounces at antlr.org] On Behalf Of Thomas Raef
>> > Sent: Thursday, February 04, 2010 5:29 PM
>> > To: antlr-interest at antlr.org
>> > Subject: [antlr-interest] Anyone have some good Python examples?
>> >
>> > I'm trying to get my simple program working and I keep running into
>> > errors.
>> >
>> >
>> >
>> > In my JavaScript.g file I've set the language=Python;
>> >
>> >
>> >
>> > I have a @members section like:
>> >
>> >
>> >
>> > @members
>> >
>> > {
>> >
>> >                 insideFunction = False;
>> >
>> >
>> >
>> > def prettyPrint(type, text):
>> >
>> >                 text = text.replace("\r", '') //to remove carriage
>> > returns in my javascript file (mt.js)
>> >
>> >                 text = text.replace("\n", '') // to remove new lines
>> >
>> >                 if len(text) > 55:
>> >
>> >                                 start = text[:40]
>> >
>> >                                 end = text[-10:]
>> >
>> >                                 text = start+' ... '+end
>> >
>> >                 print type+' -> '+text
>> >
>> > }
>> >
>> >
>> >
>> >
>> >
>> > In a JavaScript.G file I have in the functionBody section:
>> >
>> >
>> >
>> > functionBody
>> >
>> >                 :  '{' {insideFunction=True;) LT!* sourceElements LT!*
>> > '}' {insideFunction=False;}
>> >
>> >                 ;
>> >
>> >
>> >
>> > In sourceElement section I have:
>> >
>> > sourceElement
>> >
>> >                 : f=functionDeclaration { prettyPrint("FUNCTION ",
>> > $f.text.toString()); }
>> >
>> >                 | s=statement { prettyPrint("STATEMENT ",
>> > $s.text.toString()); }
>> >
>> >                 ;
>> >
>> >
>> >
>> > Then in python I'm doing:
>> >
>> > import antlr3
>> >
>> > from JavaScriptLexer import JavaScriptLexer
>> >
>> > from JavaScriptParser import JavaScriptParser
>> >
>> >
>> >
>> > char_stream = antlr3.ANTLRFileStream("mt.js")
>> >
>> > lexer = JavaScriptLexer(char_stream)
>> >
>> > tokens = antlr3.CommonTokenStream(lexer)
>> >
>> > parser = JavaScriptParser(tokens)
>> >
>> > parser.program()
>> >
>> >
>> >
>> > it barfs:
>> >
>> >
>> >
>> > prettyPrint("STATEMENT", ((s is not None) and
>> > [self.input.toString(s.start, s.stop)] or [None])[0].toString());
>> >
>> > NameError: global name 'prettyPrint' is not defined
>> >
>> >
>> >
>> > I'm trying, but failing. Can anyone with python experience help me
>> out?
>> >
>> >
>> >
>> > Thank you in advance.
>> >
>> >
>> >
>> > Thomas J. Raef
>> >
>> >
>> >
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> > email-address
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From gerald at certiv.net  Fri Feb  5 22:22:30 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Fri, 05 Feb 2010 22:22:30 -0800
Subject: [antlr-interest] Real simple grammar - newbie help?!
In-Reply-To: <817d6cb01002051645s3e261091m71c879ac73133a2b@mail.gmail.com>
References: <817d6cb01002041511u428788au2a56209db6d2e7d8@mail.gmail.com>	<490b13ad-2412-45f2-bf28-2289edcd9e67@VA3EHSMHS033.ehs.local>
	<817d6cb01002051645s3e261091m71c879ac73133a2b@mail.gmail.com>
Message-ID: <4B6D0AA6.5050607@certiv.net>

While it may be heresy in the world of context-free grammars, Antlr 
actually performs quite nicely for many NLP problems.

The illustrated approach works well for explicitly identifying a few key 
words in context.  Just have to watch for the lexer functionally being 
k=1 and remember that the lexer rules apply top-down.

There is a filter option if all you want to do is just find keywords.

On 2/5/2010 4:45 PM, James Crowley wrote:
> Hi Michael,
>
> Thanks for the response. Sadly not - the language is English ;-) But just
> hoping to do some basic tokenization of paragraphs of text (essentially just
> extracting keywords) - thought it would be faster/easier to use a tool like
> ANTLR than using regex or attempting to roll my own. Am I being foolish for
> even attempting this?
>
> James
>
> On 5 February 2010 21:29, Michael Matera<mike.matera at xilinx.com>  wrote:
>
>    

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: NaturalLanguage.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20100205/749d8794/attachment.pl 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: NaturalLanguage.txt
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20100205/749d8794/attachment.txt 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: NLP - Token Stream.png
Type: image/png
Size: 17122 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100205/749d8794/attachment.png 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: NLP - AST.png
Type: image/png
Size: 26068 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100205/749d8794/attachment-0001.png 

From gokul007 at gmail.com  Fri Feb  5 22:49:44 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sat, 6 Feb 2010 12:19:44 +0530
Subject: [antlr-interest] ANTLR Lexer stops reading the file
In-Reply-To: <9362e74e1002050346y27400b82j5345a034a66b12c4@mail.gmail.com>
References: <9362e74e1002040618j2f039306xdc8a5bc44672f5f5@mail.gmail.com>
	<db153cef8dccc14b9461642fbb5f56ff@temporal-wave.com>
	<9362e74e1002050346y27400b82j5345a034a66b12c4@mail.gmail.com>
Message-ID: <9362e74e1002052249p41609a2eq92a4c1e48a28c100@mail.gmail.com>

OK. I understood, even though i have been looking at the generated token EOF
in the source code, never thought of using it directly.

On Fri, Feb 5, 2010 at 5:16 PM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> Jim,
>       No i haven't used EOF anywhere explicitly. Is that the reason for the
> lexing to stop?
>
> Thanks,
> Gokul.
>
>
>
> On Thu, Feb 4, 2010 at 8:00 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
>> Does your parsing rule end in EOF?
>>
>> Jim
>>
>> > -----Original Message-----
>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
>> > Sent: Thursday, February 04, 2010 6:19 AM
>> > To: antlr-interest at antlr.org
>> > Subject: Re: [antlr-interest] ANTLR Lexer stops reading the file
>> >
>> > I found the problem. It was a semicolon, at the end of the line, that i
>> > missed to match in the rule. It stopped the lexing without emitting an
>> > error. Is it an expected behavior?
>> >
>> > Gokul.
>> >
>> > On Thu, Feb 4, 2010 at 7:22 PM, Gokulakannan Somasundaram <
>> > gokul007 at gmail.com> wrote:
>> >
>> > > Hi,
>> > >     I am faced with a problem, where in some of the statements that
>> > have to
>> > > get parsed are not getting parsed. When i tried the remote debugging,
>> > it is
>> > > saying the input has terminated, whereas there are further lines in
>> > the file
>> > > to be read and parsed.
>> > >     I am attaching the source of the Lexer, Parser(with Templates)
>> > and the
>> > > input file and Main.java.
>> > >     I tried remote debugging the stuff and the tokens are not getting
>> > > generated after a point. In the input file test.bdf, there is a
>> > portion like
>> > > this
>> > >
>> > > dclform
>> > >   THROBBER_SERVLET001:
>> > >     "loading"                   := "true"; */* Things are terminating
>> > here
>> > > */*
>> > >
>> > >   THROBBER_SERVLET002:
>> > >     "loading"                   := "true";
>> > >
>> > >
>> > >   Can anyone help me on this?
>> > >
>> > >   When i ran it like  "java  Main test.bdf", i am facing this issue.
>> > >
>> > >
>> > > Thanks,
>> > > Gokul.
>> > >
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> > email-address
>>
>>
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From bkiers at gmail.com  Fri Feb  5 22:58:14 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 6 Feb 2010 07:58:14 +0100
Subject: [antlr-interest] Anyone have some good Python examples?
In-Reply-To: <af443a971002052220g13b23868sbb3cda2ce6d0452c@mail.gmail.com>
References: <C4A2DDDA4F0A5C46A91AE25DD243546E14C76B@ebs-2200.ebasedsecurity.local>
	<af443a971002051359y4ed3ac69n59ea7e555332382d@mail.gmail.com>
	<af443a971002052220g13b23868sbb3cda2ce6d0452c@mail.gmail.com>
Message-ID: <af443a971002052258v55ed1d50k352128521b38983e@mail.gmail.com>

It just occurred to me that the PDF version has different page numbering...
My hard copy has 'Element Labels' on page 80.
Also see the entire chapter 6 "Attributes and Actions".

Good luck!

Bart.


On Sat, Feb 6, 2010 at 7:20 AM, Bart Kiers <bkiers at gmail.com> wrote:

> Thomas,
>
> Especially read the paragraph 'Element Labels' on page 95 carefully: that's
> what you need to print the part(s) you're interested in.
>
> Regards,
>
> Bart.
>
>
>
> On Fri, Feb 5, 2010 at 10:59 PM, Bart Kiers <bkiers at gmail.com> wrote:
>
>> Thomas,
>>
>> I highly recommend *carefully* reading the book.
>> Forgive me for saying, but I doubt that you actually read it. And if so,
>> you could only have skimmed through it (you have ordered it only
>> yesterday!).
>>
>> Regards,
>>
>> Bart.
>>
>>
>>
>> On Fri, Feb 5, 2010 at 10:23 PM, Thomas Raef <
>> TRaef at wewatchyourwebsite.com> wrote:
>>
>>> Okay. I would like to thank you all for allowing me to figure out the
>>> errors of my efforts. No sarcasm.
>>>
>>> I found out that since Bart was nice enough to get me started, even
>>> though it was a Java example, I didn't realize where my Python program
>>> was starting and what was antlr code.
>>>
>>> I discovered that my line: insideFunction = False; was causing the java
>>> compilation to complain so I moved that inside my def. I also realized
>>> that the code: $f.text.toString()); is java and is not part of antlr.
>>> Since I was using language=Python, it had no idea what I was trying to
>>> do.
>>>
>>> Now when I run my program, all I get is: STATEMENT ->
>>> (JavaScriptParser.statement_return object at 0x02168C90)
>>>
>>> What I want to see is the line of javascript code from the .js file I'm
>>> reading from prefaced with either STATEMENT or FUNCTION.
>>>
>>> Can anyone help me with that?
>>>
>>> I've watched the tutorials and read through the book, but I cannot for
>>> the life of me figure out how to get the line of javascript to print.
>>>
>>> Please help...
>>>
>>> Thomas J. Raef
>>>
>>>
>>>
>>> > -----Original Message-----
>>> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> > bounces at antlr.org] On Behalf Of Thomas Raef
>>> > Sent: Thursday, February 04, 2010 5:29 PM
>>> > To: antlr-interest at antlr.org
>>> > Subject: [antlr-interest] Anyone have some good Python examples?
>>> >
>>> > I'm trying to get my simple program working and I keep running into
>>> > errors.
>>> >
>>> >
>>> >
>>> > In my JavaScript.g file I've set the language=Python;
>>> >
>>> >
>>> >
>>> > I have a @members section like:
>>> >
>>> >
>>> >
>>> > @members
>>> >
>>> > {
>>> >
>>> >                 insideFunction = False;
>>> >
>>> >
>>> >
>>> > def prettyPrint(type, text):
>>> >
>>> >                 text = text.replace("\r", '') //to remove carriage
>>> > returns in my javascript file (mt.js)
>>> >
>>> >                 text = text.replace("\n", '') // to remove new lines
>>> >
>>> >                 if len(text) > 55:
>>> >
>>> >                                 start = text[:40]
>>> >
>>> >                                 end = text[-10:]
>>> >
>>> >                                 text = start+' ... '+end
>>> >
>>> >                 print type+' -> '+text
>>> >
>>> > }
>>> >
>>> >
>>> >
>>> >
>>> >
>>> > In a JavaScript.G file I have in the functionBody section:
>>> >
>>> >
>>> >
>>> > functionBody
>>> >
>>> >                 :  '{' {insideFunction=True;) LT!* sourceElements LT!*
>>> > '}' {insideFunction=False;}
>>> >
>>> >                 ;
>>> >
>>> >
>>> >
>>> > In sourceElement section I have:
>>> >
>>> > sourceElement
>>> >
>>> >                 : f=functionDeclaration { prettyPrint("FUNCTION ",
>>> > $f.text.toString()); }
>>> >
>>> >                 | s=statement { prettyPrint("STATEMENT ",
>>> > $s.text.toString()); }
>>> >
>>> >                 ;
>>> >
>>> >
>>> >
>>> > Then in python I'm doing:
>>> >
>>> > import antlr3
>>> >
>>> > from JavaScriptLexer import JavaScriptLexer
>>> >
>>> > from JavaScriptParser import JavaScriptParser
>>> >
>>> >
>>> >
>>> > char_stream = antlr3.ANTLRFileStream("mt.js")
>>> >
>>> > lexer = JavaScriptLexer(char_stream)
>>> >
>>> > tokens = antlr3.CommonTokenStream(lexer)
>>> >
>>> > parser = JavaScriptParser(tokens)
>>> >
>>> > parser.program()
>>> >
>>> >
>>> >
>>> > it barfs:
>>> >
>>> >
>>> >
>>> > prettyPrint("STATEMENT", ((s is not None) and
>>> > [self.input.toString(s.start, s.stop)] or [None])[0].toString());
>>> >
>>> > NameError: global name 'prettyPrint' is not defined
>>> >
>>> >
>>> >
>>> > I'm trying, but failing. Can anyone with python experience help me
>>> out?
>>> >
>>> >
>>> >
>>> > Thank you in advance.
>>> >
>>> >
>>> >
>>> > Thomas J. Raef
>>> >
>>> >
>>> >
>>> >
>>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>> > email-address
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>

From rus-reg at yandex.ru  Sat Feb  6 01:59:13 2010
From: rus-reg at yandex.ru (tahiti)
Date: Sat, 6 Feb 2010 01:59:13 -0800 (PST)
Subject: [antlr-interest] Creating AST with third party grammar
Message-ID: <1265450353027-4524691.post@n2.nabble.com>


Hello. I download the grammar for Sparql query language from there:

http://code.google.com/p/sparkle-g/downloads/list, 

archive sparkle-g-2.0.zip, file Sparql.g

I has generate the grammar and try use it. I has no problem with lexer
output, it work fine, but I don't know how access to AST tree. In ANTLR
examples there are some methods in generated Parser that return AST tree,
but in my generated parser methods for matching (e.g. query) has no return
result. I suppose that I must call this method and ast will be generated,
then I must use standart antlr methods to access it. I read documentation
but don't undestand what api to use for accessing builded AST.

-- 
View this message in context: http://n2.nabble.com/Creating-AST-with-third-party-grammar-tp4524691p4524691.html
Sent from the ANTLR mailing list archive at Nabble.com.

From boughtonp at gmail.com  Sat Feb  6 07:22:34 2010
From: boughtonp at gmail.com (Peter Boughton)
Date: Sat, 6 Feb 2010 15:22:34 +0000
Subject: [antlr-interest] php conversion tools?
Message-ID: <5d97c171002060722r59d5950eifd0158fe63c5515e@mail.gmail.com>

Hi all,

Does anyone here know of any pre-existing tools that will parse PHP
and convert it (at least superficially) to another language/syntax?

This seems an ideal task for ANTLR+StringTemplate, but I don't want to
start wasting effort reinventing something I'm sure must have already
been done

I've tried searching, but the results I've been getting are all
unhelpful, so I'm hoping somebody might know of something and be able
to point me in the right direction?


Thanks,

Peter

From gerald at certiv.net  Sun Feb  7 12:34:27 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Sun, 07 Feb 2010 12:34:27 -0800
Subject: [antlr-interest] Real simple grammar - newbie help?!
In-Reply-To: <817d6cb01002071200i778084aax579dd7199c7bcf0c@mail.gmail.com>
References: <817d6cb01002041511u428788au2a56209db6d2e7d8@mail.gmail.com>	
	<490b13ad-2412-45f2-bf28-2289edcd9e67@VA3EHSMHS033.ehs.local>	
	<817d6cb01002051645s3e261091m71c879ac73133a2b@mail.gmail.com>	
	<4B6D0AA6.5050607@certiv.net>
	<817d6cb01002071200i778084aax579dd7199c7bcf0c@mail.gmail.com>
Message-ID: <4B6F23D3.5060705@certiv.net>

The more general approach is to just broadly characterize key characters 
(DOT) and character strings (UPPER_WORD, LOWER_WORD, WORD) in the lexer 
and use the parser to create a well structured AST.  Don't do much if 
any analysis in the parser.  You then use multiple tree pattern matchers 
to identify key tokens and token sequences in context - each 
tree-pattern matcher implementing a discrete analysis rule or closely 
related set of rules.  Makes the system easily adaptable to changes in 
the keyword set and the recognition contexts.

On 2/7/2010 12:00 PM, James Crowley wrote:
> Hi Gerald,
>
> Thanks so much for that. What about the scenario where we don't know 
> what the keywords were specifically - just the format they appear in 
> (ie to group just that something upper case with a period in the 
> middle)... whilst still retaining other behaviours around periods if 
> they appear elsewhere? Is this then getting too difficult within the 
> constrains of what context-free grammars can do?
>
> Many thanks for your help
>
> James
>
> On 6 February 2010 06:22, Gerald Rosenberg <gerald at certiv.net 
> <mailto:gerald at certiv.net>> wrote:
>
>     While it may be heresy in the world of context-free grammars,
>     Antlr actually performs quite nicely for many NLP problems.
>
>     The illustrated approach works well for explicitly identifying a
>     few key words in context.  Just have to watch for the lexer
>     functionally being k=1 and remember that the lexer rules apply
>     top-down.
>
>     There is a filter option if all you want to do is just find keywords.
>
>
>     On 2/5/2010 4:45 PM, James Crowley wrote:
>
>         Hi Michael,
>
>         Thanks for the response. Sadly not - the language is English
>         ;-) But just
>         hoping to do some basic tokenization of paragraphs of text
>         (essentially just
>         extracting keywords) - thought it would be faster/easier to
>         use a tool like
>         ANTLR than using regex or attempting to roll my own. Am I
>         being foolish for
>         even attempting this?
>
>         James
>
>         On 5 February 2010 21:29, Michael
>         Matera<mike.matera at xilinx.com <mailto:mike.matera at xilinx.com>>
>          wrote:
>
>
>
>


From iwudh8u at hotmail.com  Sun Feb  7 16:34:52 2010
From: iwudh8u at hotmail.com (Iwud H8u)
Date: Sun, 7 Feb 2010 16:34:52 -0800 (PST)
Subject: [antlr-interest] Tree grammar bizarre behaviour?
Message-ID: <1265589292640-4531741.post@n2.nabble.com>


Hi,

I am hoping someone can enlighten me on how ANTLR generates the TreeParser
java code from tree grammar. I have a tree grammar file with exactly the
same code for two different tokens, both of which must return the same
object type. The generated Java code for one returns the object type
expected, whereas the other does not! My tree grammar looks like : 

token1 returns [ObjectA a]
    :  ^(C_ID (conId=classId {$a=evaluateAndReturnAsObjectA($conId.text); })
);

token2 returns [ObjectA m]
    :  ^(C_ID (id=classId {$m=evaluateAndReturnAsObjectA($id.text); }) );

The tokens token1, token2 and classId are part of my parser vocabulary.

Oddly, the Java methods generated for the methods have the following return
types :
 --- MyTree.token1_return token1() { ... }
 --- ObjectA token2() { .. }

I'm slightly at my wits end, understanding whats going on. What am I missing
here?

Many thanks in advance...
J
-- 
View this message in context: http://n2.nabble.com/Tree-grammar-bizarre-behaviour-tp4531741p4531741.html
Sent from the ANTLR mailing list archive at Nabble.com.

From antlr at mirality.co.nz  Mon Feb  8 00:02:32 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 08 Feb 2010 21:02:32 +1300
Subject: [antlr-interest] Tree grammar bizarre behaviour?
In-Reply-To: <1265589292640-4531741.post@n2.nabble.com>
References: <1265589292640-4531741.post@n2.nabble.com>
Message-ID: <20100208080332.6038334183F8@www.antlr.org>

At 13:34 8/02/2010, Iwud H8u wrote:
 >token1 returns [ObjectA a]
 >    :  ^(C_ID (conId=classId
 >{$a=evaluateAndReturnAsObjectA($conId.text); })
 >);
 >
 >token2 returns [ObjectA m]
 >    :  ^(C_ID (id=classId 
{$m=evaluateAndReturnAsObjectA($id.text);
 >}) );
[...]
 >Oddly, the Java methods generated for the methods have the
 >following return types :
 > --- MyTree.token1_return token1() { ... }
 > --- ObjectA token2() { .. }
 >
 >I'm slightly at my wits end, understanding whats going on. What 
am
 >I missing here?

Generally, a rule will return a value directly if it only has one 
return value, or a structure containing all the return values if 
it has more than one.  Evidently something about the token1 rule 
is making it want to return multiple values; perhaps it's the 
context in which it's used in another rule?  If you have a look at 
the contents of the structure it might give you an additional 
hint.

If it does return a *_return structure, then it will have a member 
matching the declared value.  (ie. token1_return will contain an 
ObjectA called "a".)


From adam.rpconnelly at googlemail.com  Mon Feb  8 04:56:58 2010
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Mon, 8 Feb 2010 12:56:58 +0000
Subject: [antlr-interest] Parse 1 - N repeats
Message-ID: <b9a39b061002080456g53ea2a11nfbff9dcb337a361a@mail.gmail.com>

Hi,

Sorry if this is answered elsewhere, but I'm not really sure what to search
for.

I'm trying to parse a language that includes repeating groups. The problem
is that they don't include terminators, so you can't tell the difference
between the last item in the group, and the next section. Here's an example:

FIELD1
REPEATING_GROUP   <fields=2> <min=0, max=20>
    FIELD2
    FIELD3
FIELD4
...

"fields" specifies the number of fields contained in the group. At the
moment I've got the following rules, but the problem is that it means that
the repeating group rule doesn't get its fields associated with it:

recordDefinition
    :    RECORD (IDENTIFIER | repeatingGroup)+
    ;

repeatingGroup
    :    IDENTIFIER
        '<' NUMBER_OF_FIELDS '=' fieldCount=NUMBER '>'
        '<' NUMBER_OF_REPEATS '=' min=NUMBER ',' max=NUMBER '>'
    ;

Ideally I could do something like:

repeatingGroup
    :    IDENTIFIER
        '<' NUMBER_OF_FIELDS '=' fieldCount=NUMBER '>'
        '<' NUMBER_OF_REPEATS '=' min=NUMBER ',' max=NUMBER '>'
        IDENTIFIER{1, $fieldCount}
    ;

But I know you can't do that. What would the best way be to go about parsing
this? Can I build an AST then modify it to put the identifiers for the
repeating group in the right place.

Cheers,
Adam

From bkiers at gmail.com  Mon Feb  8 06:06:25 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 8 Feb 2010 15:06:25 +0100
Subject: [antlr-interest] Parse 1 - N repeats
In-Reply-To: <b9a39b061002080456g53ea2a11nfbff9dcb337a361a@mail.gmail.com>
References: <b9a39b061002080456g53ea2a11nfbff9dcb337a361a@mail.gmail.com>
Message-ID: <af443a971002080606r14ccc6fdrb46db7ead9529ec7@mail.gmail.com>

Hi Adam,

You could handle it in (plain) programming logic inside your grammar.
Here's a little demo:

grammar Test;

@parser::members {
  public static void main(String[] args) throws Exception {
    String text =
        "FIELD1\n"+
        "REPEATING_GROUP <fields=2> <min=0, max=20>\n"+
        "FIELD2\n"+
        "FIELD3\n"+
        "FIELD4";
    ANTLRStringStream in = new ANTLRStringStream(text);
    TestLexer lexer = new TestLexer(in);
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    new TestParser(tokens).parse();
  }

  class Repeat {

    final List<String> fieldList;
    final int fields;
    final int min;
    final int max;

    Repeat(int fields, int min, int max) {
        this.fieldList = new ArrayList<String>(fields);
        this.fields = fields;
        this.min = min;
        this.max = max;
    }

    boolean done() {
        return fieldList.size() == fields;
    }

    public String toString() {
      return String.format("fields=\%s, min=\%d, max=\%d", fieldList, min,
max);
    }
  }
}

parse
  :  (  rp=repeat     {System.out.println("repeat :: "+$rp.r);}
     |  id=Identifier {System.out.println("field  :: "+$id.text);}
     )*
     EOF
  ;

repeat returns [Repeat r]
  :  Identifier '<' 'fields' '=' fields=Identifier '>' '<' 'min' '='
min=Identifier ',' 'max' '=' max=Identifier '>'
     {$r = new Repeat(Integer.valueOf($fields.text),
Integer.valueOf($min.text), Integer.valueOf($max.text));}
     (id=Identifier {$r.fieldList.add($id.text); if($r.done()) return $r;}
)*
  ;

Identifier
  :  ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' )+
  ;

WhiteSpace
  :  ( ' ' | '\t' | '\r' | '\n' ) {skip();}
  ;

As you see, whenever the size of the fieldList hits the total, $r is being
returned (and no more id=Identifier will be "eaten").
When you compile and execute the TestParser class, the following is being
printed:

field  :: FIELD1
repeat :: fields=[FIELD2, FIELD3], min=0, max=20
field  :: FIELD4

Regards,

Bart.


On Mon, Feb 8, 2010 at 1:56 PM, Adam Connelly <
adam.rpconnelly at googlemail.com> wrote:

> Hi,
>
> Sorry if this is answered elsewhere, but I'm not really sure what to search
> for.
>
> I'm trying to parse a language that includes repeating groups. The problem
> is that they don't include terminators, so you can't tell the difference
> between the last item in the group, and the next section. Here's an
> example:
>
> FIELD1
> REPEATING_GROUP   <fields=2> <min=0, max=20>
>    FIELD2
>    FIELD3
> FIELD4
> ...
>
> "fields" specifies the number of fields contained in the group. At the
> moment I've got the following rules, but the problem is that it means that
> the repeating group rule doesn't get its fields associated with it:
>
> recordDefinition
>    :    RECORD (IDENTIFIER | repeatingGroup)+
>    ;
>
> repeatingGroup
>    :    IDENTIFIER
>        '<' NUMBER_OF_FIELDS '=' fieldCount=NUMBER '>'
>        '<' NUMBER_OF_REPEATS '=' min=NUMBER ',' max=NUMBER '>'
>    ;
>
> Ideally I could do something like:
>
> repeatingGroup
>    :    IDENTIFIER
>        '<' NUMBER_OF_FIELDS '=' fieldCount=NUMBER '>'
>        '<' NUMBER_OF_REPEATS '=' min=NUMBER ',' max=NUMBER '>'
>        IDENTIFIER{1, $fieldCount}
>    ;
>
> But I know you can't do that. What would the best way be to go about
> parsing
> this? Can I build an AST then modify it to put the identifiers for the
> repeating group in the right place.
>
> Cheers,
> Adam
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jgre at acm.org  Mon Feb  8 09:22:55 2010
From: jgre at acm.org (Janico Greifenberg)
Date: Mon, 8 Feb 2010 18:22:55 +0100
Subject: [antlr-interest] Using $ as delimiter in StringTemplate from ANTRL
	rewriter grammars
Message-ID: <8508a30f1002080922j1eeaba6dk5b90ca790352080b@mail.gmail.com>

Hi,

I'm trying to write an ANTLR3 grammar that generates HTML output using
StringTemplate. To avoid having to escape all the HTML tags in the
template rules (e.g. \<p\><variable>\</p\>), I'd prefer to use dollar
as the delimiter for StringTemplate (e.g. <p>$variable$</p>).

While the latter seems to be the default when StringTemplate is used
on its own, the parser code generated by ANTRL always uses
AngleBracketTemplateLexer when initializing StringTemplate.

How can I get ANTLR to generate code using DefaultTemplateLexer (i.e.
the variant that uses dollar as the delimiter)?

Janico

From iwudh8u at hotmail.com  Mon Feb  8 11:47:58 2010
From: iwudh8u at hotmail.com (Iwud H8u)
Date: Mon, 8 Feb 2010 11:47:58 -0800 (PST)
Subject: [antlr-interest] Tree grammar bizarre behaviour?
In-Reply-To: <20100208080332.6038334183F8@www.antlr.org>
References: <1265589292640-4531741.post@n2.nabble.com>
	<20100208080332.6038334183F8@www.antlr.org>
Message-ID: <1265658478119-4536631.post@n2.nabble.com>


Many thanks for the hint.. I realised that my tree grammar was indeed trying
to accessing the token1() rule in more than one place in slightly different
contexts... I resolved the issue by ensuring that token1() rule was being
invoked consistently... :D
-- 
View this message in context: http://n2.nabble.com/Tree-grammar-bizarre-behaviour-tp4531741p4536631.html
Sent from the ANTLR mailing list archive at Nabble.com.

From parrt at cs.usfca.edu  Mon Feb  8 13:46:07 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 8 Feb 2010 13:46:07 -0800
Subject: [antlr-interest] Using $ as delimiter in StringTemplate from
	ANTRL rewriter grammars
In-Reply-To: <8508a30f1002080922j1eeaba6dk5b90ca790352080b@mail.gmail.com>
References: <8508a30f1002080922j1eeaba6dk5b90ca790352080b@mail.gmail.com>
Message-ID: <43724C66-1A63-4B27-B94D-13DF310D2C98@cs.usfca.edu>

Hi Janico, you are the one that creates the string template group and passes it to the parser. so, it will use whatever you give it. That way, your templates can use whichever  delimiter.
Ter
On Feb 8, 2010, at 9:22 AM, Janico Greifenberg wrote:

> Hi,
> 
> I'm trying to write an ANTLR3 grammar that generates HTML output using
> StringTemplate. To avoid having to escape all the HTML tags in the
> template rules (e.g. \<p\><variable>\</p\>), I'd prefer to use dollar
> as the delimiter for StringTemplate (e.g. <p>$variable$</p>).
> 
> While the latter seems to be the default when StringTemplate is used
> on its own, the parser code generated by ANTRL always uses
> AngleBracketTemplateLexer when initializing StringTemplate.
> 
> How can I get ANTLR to generate code using DefaultTemplateLexer (i.e.
> the variant that uses dollar as the delimiter)?
> 
> Janico
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rus-reg at yandex.ru  Mon Feb  8 14:58:49 2010
From: rus-reg at yandex.ru (tahiti)
Date: Mon, 8 Feb 2010 14:58:49 -0800 (PST)
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265450353027-4524691.post@n2.nabble.com>
References: <1265450353027-4524691.post@n2.nabble.com>
Message-ID: <1265669929354-4537748.post@n2.nabble.com>


Please, repply on the simple question: how access to generated ast? The
documantation for 3.0 a thery uggly and don't contains necessary
information. I know how to do it in the version 2.0 (there are method
getAST() in Parser class), but this method removed in version 3.0!
-- 
View this message in context: http://n2.nabble.com/Creating-AST-with-third-party-grammar-tp4524691p4537748.html
Sent from the ANTLR mailing list archive at Nabble.com.

From jbb at acm.org  Mon Feb  8 15:42:23 2010
From: jbb at acm.org (John B. Brodie)
Date: Mon, 08 Feb 2010 18:42:23 -0500
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265669929354-4537748.post@n2.nabble.com>
References: <1265450353027-4524691.post@n2.nabble.com>
	<1265669929354-4537748.post@n2.nabble.com>
Message-ID: <1265672543.19231.8.camel@gecko.home.org>

Greetings!

On Mon, 2010-02-08 at 14:58 -0800, tahiti wrote:
> Please, repply on the simple question: how access to generated ast? The
> documantation for 3.0 a thery uggly and don't contains necessary
> information. I know how to do it in the version 2.0 (there are method
> getAST() in Parser class), but this method removed in version 3.0!

If you look closely at the source code generated by the Tool for your
parser --- and it is one of the strengths of ANTLR that you can actually
read and debug the generated code --- you will see that each Parser in
your grammar has a corresponding method in the generated source code.
And that method has a return type of a structure one of whose fields is
`tree`, the AST generated by that rule.

Hope this helps...
   -jbb




From andre.rutti at gmail.com  Mon Feb  8 19:37:25 2010
From: andre.rutti at gmail.com (andre rutti)
Date: Tue, 9 Feb 2010 04:37:25 +0100
Subject: [antlr-interest] Using $ as delimiter in StringTemplate from
	ANTRL rewriter grammars
In-Reply-To: <43724C66-1A63-4B27-B94D-13DF310D2C98@cs.usfca.edu>
References: <8508a30f1002080922j1eeaba6dk5b90ca790352080b@mail.gmail.com>
	<43724C66-1A63-4B27-B94D-13DF310D2C98@cs.usfca.edu>
Message-ID: <2132cf931002081937u17895981i136ecf8384a3e24f@mail.gmail.com>

Hi Janico,

when you create the string template, you can specify which 'TemplateLexer'
to use; what I do for 'html' is as follow:

...

// LOAD TEMPLATES (via classpath)
ClassLoader _classLoader = 'your'.class.getClassLoader();
InputStream _inputStream =
_classLoader.getResourceAsStream(_templatesFilename);
Reader _streamReader = new InputStreamReader(_inputStream);

// StringTemplateGroup _templateGroup = new
StringTemplateGroup(_streamReader); // uses '<' '>' delimiters
StringTemplateGroup _templateGroup = new StringTemplateGroup(_streamReader,
DefaultTemplateLexer.class); // uses '$' '$' delimiters

_streamReader.close();

...

Regards,
Andre

On Mon, Feb 8, 2010 at 10:46 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Janico, you are the one that creates the string template group and
> passes it to the parser. so, it will use whatever you give it. That way,
> your templates can use whichever  delimiter.
> Ter
> On Feb 8, 2010, at 9:22 AM, Janico Greifenberg wrote:
>
> > Hi,
> >
> > I'm trying to write an ANTLR3 grammar that generates HTML output using
> > StringTemplate. To avoid having to escape all the HTML tags in the
> > template rules (e.g. \<p\><variable>\</p\>), I'd prefer to use dollar
> > as the delimiter for StringTemplate (e.g. <p>$variable$</p>).
> >
> > While the latter seems to be the default when StringTemplate is used
> > on its own, the parser code generated by ANTRL always uses
> > AngleBracketTemplateLexer when initializing StringTemplate.
> >
> > How can I get ANTLR to generate code using DefaultTemplateLexer (i.e.
> > the variant that uses dollar as the delimiter)?
> >
> > Janico
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From ranco.marcus at epirion.nl  Mon Feb  8 23:03:06 2010
From: ranco.marcus at epirion.nl (Ranco Marcus)
Date: Tue, 9 Feb 2010 07:03:06 +0000
Subject: [antlr-interest] How to specify target language from the
	command line?
In-Reply-To: <2B65C901391C804DBB9CF9E6FE30C6F91499651F@sun.epirion.local>
References: <2B65C901391C804DBB9CF9E6FE30C6F91499651F@sun.epirion.local>
Message-ID: <2B65C901391C804DBB9CF9E6FE30C6F914999D6D@sun.epirion.local>

Before my Visual Studio custom tool calls the ANTLR tool, it adds language=XXX just after options\s*{. Not the nicest way, but it gets the job done. Now I can use my language independent lexer, parser and tree grammars in ANTLRWorks for debugging and use the same file in the target environment.

Some options really concern the recognizer, such as tokenVocab, output, ASTLabelType, filter, etc. and I can't see a reason why you would like to change those independent of the contents of the file. Some options however, like language or superclass, could be independent of the target. Would it be an idea to be able to specify extra options from the command line?

Ciao, Ranco


From: Ranco Marcus
Sent: maandag 1 februari 2010 10:47
To: antlr-interest at antlr.org
Subject: How to specify target language from the command line?

When no language is specified in the options section, ANTLR defaults to Java. Is it possible to specify the default language when calling org.antlr.tool?

Many of my grammars (lexer, parser, and tree) have no language specific code and specifying the language (CSharp2 in my case) unnecessarily constrains the use of these grammars. To generate recognizers, I have written a (basic) custom tool for Visual Studio that calls ANTLR when changes are made to a .g file. I would like to specify the target language in the command line arguments. This way, the grammar could remain language independent and there would be no need to remove the language option each time the grammar is being debugged in ANTLRWorks.

Btw, Terence, congratulations on the new Language Implementation Patterns book. I read (most of) it last week and really enjoyed it!

Best regards,

Ranco Marcus



From fvwalter at web.de  Tue Feb  9 05:41:01 2010
From: fvwalter at web.de (Florian von Walter)
Date: Tue, 09 Feb 2010 14:41:01 +0100
Subject: [antlr-interest] Help needed with LL(*)-type grammar
Message-ID: <4B7165ED.2040408@web.de>

Hi,

I'm new to working with ANTLR and ANTLRWorks.
I really appreciate what ANTLR and ANTLRWorks offer and purchased "The
Definitive ANTLR Reference" and "Language Implementation Patterns" to
get a better understanding on how to use ANTLR.
I have some background with lexers and parsers and EBNF.

I'd like to write a lexer/parser which is able to recognize a
character-delimited format with nested field groups and transform this
data in XML-style data.

Here are some examples how the data looks like:

Example 1: Obj1^Verb1^field1^field2^
Example 2: Obj1^Verb1^field1^field2^1^Obj2^Verb2^field3^field4^
Example 3:
Obj1^Verb1^field1^field2^2^Obj2^Verb2^field3_1^field4_1^^Obj2^Verb2^field3_2^field4_2^
Example 4:
Obj1^Verb1^field1^field2^2^Obj2^Verb2^field3_1^field4_1^^Obj2^Verb2^field3_2^field4_2^1^Obj3^Verb3^field5^

The core grammar behind this looks like this:

object SEP verb SEP (fieldContents SEP)+ (recordCount SEP (object SEP
verb SEP (fieldContents SEP)+)+)*

where SEP is the delimiter ('^' in this case) and recordCount is an
integer which indicates how many (sub)records come after it.

>From my understanding this grammar is of type LL(*) because the
"recordCount" can occur after an arbitrary number of fields due this
part of the rule: (fieldContents SEP)+.

I managed to write a grammar which can parse example 1 but fails for all
other examples:

grammar DLM;
data        :    objectGroup subObjectGroup* ;
objectGroup    :    objectName SEP verbName SEP (fieldData SEP)+;
subObjectGroup    :    recordCount SEP objectGroup+;
objectName    :    'Obj1' | 'Obj2' | 'Obj3' ;
verbName    :    'Verb1' | 'Verb2' | 'Verb3' ;
fieldData    :    NONSEP* ; // field can be empty;
recordCount    :    INT ;
NONSEP        :    ~('^')+ ;
SEP        :    '^';
fragment INT    :    '0'..'9'+;

This grammar just stops when it reaches token "Obj2".

I rewrote rule "data" like this:

data : objectGroup subObjectGroup+ | objectGroup;

This time it failed at token "Obj2" with a NoViableAltException.

I tried to use options {backtrack=true; memoize=true;} for the whole
grammar and rule "data" only but this didn't help.

I also tried to use predicates like this:

subObjectGroup : (INT SEP objectName) => recordCount SEP objectGroup+;

but this didn't help either.

So I'd really appreciate some hints on how to make the other examples parse.

Thanks.

Best regards,
Florian

From rus-reg at yandex.ru  Tue Feb  9 10:17:40 2010
From: rus-reg at yandex.ru (tahiti)
Date: Tue, 9 Feb 2010 10:17:40 -0800 (PST)
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265672543.19231.8.camel@gecko.home.org>
References: <1265450353027-4524691.post@n2.nabble.com>
	<1265669929354-4537748.post@n2.nabble.com>
	<1265672543.19231.8.camel@gecko.home.org>
Message-ID: <1265739460480-4542892.post@n2.nabble.com>


No, I confused right for lack of return type of this methods. The method
query() that parse entire query has return type boid. It is only modify the
state of the parser class state._fsp located in base class of Parser:
RecognizerSharedState. I suppose that after calling this method I must to
use standart feature of ANTLR for generating AST tree from this state.

This is a code of query() method that mutch query:

public final void query() throws RecognitionException {
        try {
            // C:\\Documents and
Settings\\rushan\\data\\workspace\\devel\\ANTLR\\sparkle-g-2.0\\src\\com\\sparkleg\\Sparql.g:36:5:
( prologue ( selectQuery | constructQuery | describeQuery | askQuery ) EOF )
            // C:\\Documents and
Settings\\rushan\\data\\workspace\\devel\\ANTLR\\sparkle-g-2.0\\src\\com\\sparkleg\\Sparql.g:36:7:
prologue ( selectQuery | constructQuery | describeQuery | askQuery ) EOF
            {
            pushFollow(FOLLOW_prologue_in_query36);
            prologue();

            state._fsp--;

            // C:\\Documents and
Settings\\rushan\\data\\workspace\\devel\\ANTLR\\sparkle-g-2.0\\src\\com\\sparkleg\\Sparql.g:36:16:
( selectQuery | constructQuery | describeQuery | askQuery )
            int alt1=4;
            switch ( input.LA(1) ) {
            case SELECT:
                {
                alt1=1;
                }
                break;
            case CONSTRUCT:
                {
                alt1=2;
                }
                break;
            case DESCRIBE:
                {
                alt1=3;
                }
                break;
            case ASK:
                {
                alt1=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // C:\\Documents and
Settings\\rushan\\data\\workspace\\devel\\ANTLR\\sparkle-g-2.0\\src\\com\\sparkleg\\Sparql.g:36:18:
selectQuery
                    {
                    pushFollow(FOLLOW_selectQuery_in_query40);
                    selectQuery();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // C:\\Documents and
Settings\\rushan\\data\\workspace\\devel\\ANTLR\\sparkle-g-2.0\\src\\com\\sparkleg\\Sparql.g:36:32:
constructQuery
                    {
                    pushFollow(FOLLOW_constructQuery_in_query44);
                    constructQuery();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // C:\\Documents and
Settings\\rushan\\data\\workspace\\devel\\ANTLR\\sparkle-g-2.0\\src\\com\\sparkleg\\Sparql.g:36:49:
describeQuery
                    {
                    pushFollow(FOLLOW_describeQuery_in_query48);
                    describeQuery();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // C:\\Documents and
Settings\\rushan\\data\\workspace\\devel\\ANTLR\\sparkle-g-2.0\\src\\com\\sparkleg\\Sparql.g:36:65:
askQuery
                    {
                    pushFollow(FOLLOW_askQuery_in_query52);
                    askQuery();

                    state._fsp--;


                    }
                    break;

            }

            match(input,EOF,FOLLOW_EOF_in_query56); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
-- 
View this message in context: http://n2.nabble.com/Creating-AST-with-third-party-grammar-tp4524691p4542892.html
Sent from the ANTLR mailing list archive at Nabble.com.

From jbb at acm.org  Tue Feb  9 10:29:09 2010
From: jbb at acm.org (John B. Brodie)
Date: Tue, 09 Feb 2010 13:29:09 -0500
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265739460480-4542892.post@n2.nabble.com>
References: <1265450353027-4524691.post@n2.nabble.com>
	<1265669929354-4537748.post@n2.nabble.com>
	<1265672543.19231.8.camel@gecko.home.org>
	<1265739460480-4542892.post@n2.nabble.com>
Message-ID: <1265740149.24257.1.camel@gecko.home.org>

On Tue, 2010-02-09 at 10:17 -0800, tahiti wrote:
> No, I confused right for lack of return type of this methods. The method
> query() that parse entire query has return type boid. It is only modify the
> state of the parser class state._fsp located in base class of Parser:
> RecognizerSharedState. I suppose that after calling this method I must to
> use standart feature of ANTLR for generating AST tree from this state.
> 
> This is a code of query() method that mutch query:
....snipped....

does your .g file contain an options{ output=AST; } block?



From j.pool at ision.nl  Tue Feb  9 10:53:51 2010
From: j.pool at ision.nl (John Pool)
Date: Tue, 9 Feb 2010 19:53:51 +0100
Subject: [antlr-interest] NoViableAltException remains undetected
Message-ID: <!&!AAAAAAAAAAAYAAAAAAAAAJ6HnVdlvLVNnvOxG5JxQq7CgAAAEAAAALS+D0O9/kNMkCYxW7+XeL8BAAAAAA==@ision.nl>

I have a grammar for which the parse tree in the ANTLRWorks interpreter
correctly shows a NoViableAltException-box for certain input sentences. In
my C# test rig, however, this exception is not thrown. The parser simply
stops at the erroneous input (as if it were an <EOF>), which can be seen
from the generated AST, in which everything after the last correct symbol is
missing. 

I am quite certain that no parser exception occurs, as I (1) have overridden
both the lexer and the parser ReportError and (2) put breakpoints on every
try/catch I could find in the parser/lexer code. Are there, generally
spoken, any conceivable circumstances under which this can happen? 

Of course I have tried to step through the code using the C# debugger, but I
lost track of what was actually happening, te more so as I cannot see what
is going on in the Antlr.Runtime dll. 

Any help would be welcome. I am aware that without seeing the actual grammar
and code it might be hard to figure out what is going on, but I am just
wondering if there is some general approach that I can take before
submitting code. 

Kind regards, 

John Pool


From parrt at cs.usfca.edu  Tue Feb  9 11:18:29 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 9 Feb 2010 11:18:29 -0800
Subject: [antlr-interest] NoViableAltException remains undetected
In-Reply-To: <!&!AAAAAAAAAAAYAAAAAAAAAJ6HnVdlvLVNnvOxG5JxQq7CgAAAEAAAALS+D0O9/kNMkCYxW7+XeL8BAAAAAA==@ision.nl>
References: <!&!AAAAAAAAAAAYAAAAAAAAAJ6HnVdlvLVNnvOxG5JxQq7CgAAAEAAAALS+D0O9/kNMkCYxW7+XeL8BAAAAAA==@ision.nl>
Message-ID: <DC1C0E9A-E6D9-46EC-993D-BA18872679B0@cs.usfca.edu>

if it stops at bad input, you might have

startRule : stuff+ ;

instead of

startRule : stuff+ EOF ;

Ter
On Feb 9, 2010, at 10:53 AM, John Pool wrote:

> I have a grammar for which the parse tree in the ANTLRWorks interpreter
> correctly shows a NoViableAltException-box for certain input sentences. In
> my C# test rig, however, this exception is not thrown. The parser simply
> stops at the erroneous input (as if it were an <EOF>), which can be seen
> from the generated AST, in which everything after the last correct symbol is
> missing. 
> 
> I am quite certain that no parser exception occurs, as I (1) have overridden
> both the lexer and the parser ReportError and (2) put breakpoints on every
> try/catch I could find in the parser/lexer code. Are there, generally
> spoken, any conceivable circumstances under which this can happen? 
> 
> Of course I have tried to step through the code using the C# debugger, but I
> lost track of what was actually happening, te more so as I cannot see what
> is going on in the Antlr.Runtime dll. 
> 
> Any help would be welcome. I am aware that without seeing the actual grammar
> and code it might be hard to figure out what is going on, but I am just
> wondering if there is some general approach that I can take before
> submitting code. 
> 
> Kind regards, 
> 
> John Pool
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jgre at acm.org  Tue Feb  9 11:43:42 2010
From: jgre at acm.org (Janico Greifenberg)
Date: Tue, 9 Feb 2010 20:43:42 +0100
Subject: [antlr-interest] Using $ as delimiter in StringTemplate from
	ANTRL rewriter grammars
In-Reply-To: <2132cf931002081937u17895981i136ecf8384a3e24f@mail.gmail.com>
References: <8508a30f1002080922j1eeaba6dk5b90ca790352080b@mail.gmail.com>
	<43724C66-1A63-4B27-B94D-13DF310D2C98@cs.usfca.edu>
	<2132cf931002081937u17895981i136ecf8384a3e24f@mail.gmail.com>
Message-ID: <8508a30f1002091143h5a583777wae772a9d1a6899f5@mail.gmail.com>

Thanks Terence, Andre,

I had somehow failed to see the setTemplateLib method. Seems obvious
in hindsight...
Anyway, it works now.

Janico

On Tue, Feb 9, 2010 at 4:37 AM, andre rutti <andre.rutti at gmail.com> wrote:
> Hi Janico,
>
> when you create the string template, you can specify which 'TemplateLexer'
> to use; what I do for 'html' is as follow:
>
> ...
>
> // LOAD TEMPLATES (via classpath)
> ClassLoader _classLoader = 'your'.class.getClassLoader();
> InputStream _inputStream =
> _classLoader.getResourceAsStream(_templatesFilename);
> Reader _streamReader = new InputStreamReader(_inputStream);
>
> // StringTemplateGroup _templateGroup = new
> StringTemplateGroup(_streamReader); // uses '<' '>' delimiters
> StringTemplateGroup _templateGroup = new StringTemplateGroup(_streamReader,
> DefaultTemplateLexer.class); // uses '$' '$' delimiters
>
> _streamReader.close();
>
> ...
>
> Regards,
> Andre
>
> On Mon, Feb 8, 2010 at 10:46 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>
>> Hi Janico, you are the one that creates the string template group and
>> passes it to the parser. so, it will use whatever you give it. That way,
>> your templates can use whichever ?delimiter.
>> Ter
>> On Feb 8, 2010, at 9:22 AM, Janico Greifenberg wrote:
>>
>> > Hi,
>> >
>> > I'm trying to write an ANTLR3 grammar that generates HTML output using
>> > StringTemplate. To avoid having to escape all the HTML tags in the
>> > template rules (e.g. \<p\><variable>\</p\>), I'd prefer to use dollar
>> > as the delimiter for StringTemplate (e.g. <p>$variable$</p>).
>> >
>> > While the latter seems to be the default when StringTemplate is used
>> > on its own, the parser code generated by ANTRL always uses
>> > AngleBracketTemplateLexer when initializing StringTemplate.
>> >
>> > How can I get ANTLR to generate code using DefaultTemplateLexer (i.e.
>> > the variant that uses dollar as the delimiter)?
>> >
>> > Janico
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>



-- 
http://jgre.org

From fridi70 at gmx.de  Tue Feb  9 12:03:39 2010
From: fridi70 at gmx.de (fridi)
Date: Tue, 09 Feb 2010 21:03:39 +0100
Subject: [antlr-interest] Unknown method for
	CommonTreeNodeStream:	getNodeIndex
In-Reply-To: <5596DEE3-6619-49A1-BDA5-3DBDC4A1D5B4@cs.usfca.edu>
References: <46450b021002010437s59e1087ap81f57139b74ca7e4@mail.gmail.com>
	<5596DEE3-6619-49A1-BDA5-3DBDC4A1D5B4@cs.usfca.edu>
Message-ID: <4B71BF9B.40900@gmx.de>

Hi Terence,

could you please give me a hint which one of the examples fits best the 
if-then-else problem?
thanks in advance, fridi.

Terence Parr schrieb:
> Hi Steven, I'd recommend staying away from tree-based interpreters that need to jump around. The code samples for my book, which are free, gives you an example though. I've moved away from that node Index stuff.
>
> Ter
> On Feb 1, 2010, at 4:37 AM, Steven Raemaekers wrote:
>
>   
>> Hello,
>>
>> I'm trying to make a tree walker for an if statement, in which the statement
>> part should of course only execute when the boolean expression part is true.
>> The problem is that in an example I found on the internet, I found that I
>> should use stream.push(...) and stream.pop() to insert tokens into
>> the stream that should be executed.
>>
>> The problem is, getNodeIndex does not exist for CommonTreeNodeStream...but
>> how do I know the index which is needed for stream.push(index)?
>>
>> ifstatement
>> @after {
>> CommonTree expressionNode = (CommonTree)$ifstatement.start.getChild(0);
>> CommonTree instructionlistNode = (CommonTree)$ifstatement.start.getChild(1);
>> if ($b.value == true)
>> {
>> System.out.println("LogoTree.g, ifstatement evaluates to true");
>> CommonTreeNodeStream stream = (CommonTreeNodeStream)input;
>> stream.push(stream.getNodeIndex(instructionlistNode));
>>                instructionlist();
>>                stream.pop();
>> }
>> }
>> : ^(IF b = booleanexpression .)
>> ;
>>
>> This does not work, since getNodeIndex does not exist for
>> CommonTreeNodeStream. Examples are rather scarce on the internet...something
>> this elemental should be more easy to implement, this has taken me days
>> now... Does anybody have any other ideas how to make an if statement? Any
>> help is greatly appreciated!
>>
>>
>> -- 
>> Regards,
>>
>> Steven Raemaekers
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>     
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   


From christian at modeltwozero.com  Tue Feb  9 15:22:56 2010
From: christian at modeltwozero.com (Christian Nentwich)
Date: Tue, 9 Feb 2010 23:22:56 +0000
Subject: [antlr-interest] Grammar composition in v3, multiple packages,
	no joy
Message-ID: <d201c9a51002091522x24b9b96cw50f29f067328ff@mail.gmail.com>

Hi all,

I'm a long time user of ANTLR, and have recently gone through the painful
but definitely useful exercise of moving from v2 to v3.

I have now hit a point where I am stuck, with no workaround in sight, due to
the difference in grammar inheritance. This is the situation here - note, no
lexers involved, only parsers:

Language L1    -    lives in a Java project, with grammar L1.g; usable
standalone
Language L2    -    lives in another Java project, with grammar L2.g;
extends L1

With ANTLR 2, L2 extended L1; that created expanded.g in the background, and
everything worked fine. With ANTLR 3, I get no joy. Following attempts made:

a) Use import mechanism; L2 imports L1. Does not work, because of this bug
http://www.antlr.org/jira/browse/ANTLR-375. Because L2 is in another Java
project, different package, etc, both grammars need a header, and ANTLR
throws that out with an error. It would only work if the root grammar header
was an override for anything imported, which it doesn't seem to be.

b) Don't use import mechanism. Instead, duplicate L1 grammar into L2 by
hand, simulating ANTLR 2. Turns out, I can't even do that: the tokens are
not stable and get different numbers assigned. If you wonder why that's a
problem: the code in the first package has switch statements based on some
tokens; where such code is reused in package 2, the switch statements will
switch on the wrong numbers.

So - it seems I'm stuck with no feature to handle this, and no workaround.
Can anybody please tell me I'm doing something stupid? :) Is the composition
feature one that's not widely used, other than for simple lexer/parser
splits?

thanks,
Christian

p.s. to pay my debts I wanted to post on confluence how to get case
insensitive parsers using ANTLR3 with JFlex, but it seems editing/commenting
is locked down. Any reason why?

From jimi at temporal-wave.com  Tue Feb  9 16:13:55 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 09 Feb 2010 16:13:55 -0800
Subject: [antlr-interest] Grammar composition in v3, multiple packages,
	no joy
In-Reply-To: <d201c9a51002091522x24b9b96cw50f29f067328ff@mail.gmail.com>
Message-ID: <05bf2b80266c3b44b454ce53596c028e@temporal-wave.com>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian Nentwich
> Sent: Tuesday, February 09, 2010 3:23 PM

>... the difference in grammar inheritance. This is the situation here -
> note, no
> lexers involved, only parsers:
> 
> Language L1    -    lives in a Java project, with grammar L1.g; usable
> standalone
> Language L2    -    lives in another Java project, with grammar L2.g;
> extends L1

Have you tried making your actual rules just imports such that L1.g contains no rules, but defines the headers and package and so on then imports l1rules.g and L2.g also contains no rules but imports l1rules.g, l2rules.g

Obviously l1rules.g and l2rules.g cannot be used on their own and are specifically for imports with no @header statements and options etc.


> p.s. to pay my debts I wanted to post on confluence how to get case
> insensitive parsers using ANTLR3 with JFlex, but it seems
> editing/commenting
> is locked down. Any reason why?

You would want to add that as a child page of the case insensitive lexing article that is already there:

http://www.antlr.org/wiki/pages/viewpage.action?pageId=1782

I think that you just have to ask Ter for a login - you cannot edit as anonymous as the pages are filled with SPAM 10 seconds after we open up it up :-)

Jim




From parrt at cs.usfca.edu  Tue Feb  9 17:30:12 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 9 Feb 2010 17:30:12 -0800
Subject: [antlr-interest] anybody using dynamic scopes?
Message-ID: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>

Hi,

Is anybody using scopes?  E.g., here is the use C grammar:

scope Symbols {
        Set types; // only track types in order to get parser working
}

Every rule that declares its usage of Symbols pushes a new copy on the stack effectively creating a new symbol scope.

translation_unit
scope Symbols; // entire file is a scope
@init {
  $Symbols::types = new HashSet();
}
    : external_declaration+
    ;


Then rule declaration declares a rule scope that lets any invoked rule see isTypedef boolean.  It's much easier than passing that info down as parameters:

declaration
scope {
  boolean isTypedef;
}
@init {
  $declaration::isTypedef = false;
}
    : 'typedef' declaration_specifiers? {$declaration::isTypedef=true;}
      init_declarator_list ';' // special case, looking for typedef
    | declaration_specifiers init_declarator_list? ';'
    ;


Rule direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

direct_declarator
    :   (   IDENTIFIER
            {
            if ($declaration.size()>0&&$declaration::isTypedef) {
                $Symbols::types.add($IDENTIFIER.text);
                System.out.println("define type "+$IDENTIFIER.text);
            }
            }
        |   '(' declarator ')'
        )
        declarator_suffix*
    ;

Trying to decide if it's worth reimplementing for v4.

Ter

From kferrio at gmail.com  Tue Feb  9 18:31:51 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Wed, 10 Feb 2010 02:31:51 +0000
Subject: [antlr-interest] anybody using dynamic scopes?
In-Reply-To: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
References: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
Message-ID: <655437629-1265769113-cardhu_decombobulator_blackberry.rim.net-1458278335-@bda428.bisx.prod.on.blackberry>

Don't do it on my account, but I think I would use it because it looks much more transparent and maintainable.  As a new and occasional user, my biggest challenge is getting my head back in the game after some time away from the code.  This would help.

Kyle 

Sent from my Verizon Wireless BlackBerry

-----Original Message-----
From: Terence Parr <parrt at cs.usfca.edu>
Date: Tue, 9 Feb 2010 17:30:12 
To: antlr-interest interest<antlr-interest at antlr.org>
Subject: [antlr-interest] anybody using dynamic scopes?

Hi,

Is anybody using scopes?  E.g., here is the use C grammar:

scope Symbols {
        Set types; // only track types in order to get parser working
}

Every rule that declares its usage of Symbols pushes a new copy on the stack effectively creating a new symbol scope.

translation_unit
scope Symbols; // entire file is a scope
@init {
  $Symbols::types = new HashSet();
}
    : external_declaration+
    ;


Then rule declaration declares a rule scope that lets any invoked rule see isTypedef boolean.  It's much easier than passing that info down as parameters:

declaration
scope {
  boolean isTypedef;
}
@init {
  $declaration::isTypedef = false;
}
    : 'typedef' declaration_specifiers? {$declaration::isTypedef=true;}
      init_declarator_list ';' // special case, looking for typedef
    | declaration_specifiers init_declarator_list? ';'
    ;


Rule direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

direct_declarator
    :   (   IDENTIFIER
            {
            if ($declaration.size()>0&&$declaration::isTypedef) {
                $Symbols::types.add($IDENTIFIER.text);
                System.out.println("define type "+$IDENTIFIER.text);
            }
            }
        |   '(' declarator ')'
        )
        declarator_suffix*
    ;

Trying to decide if it's worth reimplementing for v4.

Ter

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From christian at modeltwozero.com  Wed Feb 10 00:49:12 2010
From: christian at modeltwozero.com (Christian Nentwich)
Date: Wed, 10 Feb 2010 08:49:12 +0000
Subject: [antlr-interest] Grammar composition in v3, multiple packages,
	no 	joy
In-Reply-To: <05bf2b80266c3b44b454ce53596c028e@temporal-wave.com>
References: <d201c9a51002091522x24b9b96cw50f29f067328ff@mail.gmail.com>
	<05bf2b80266c3b44b454ce53596c028e@temporal-wave.com>
Message-ID: <d201c9a51002100049v3db8a7e4y763fd3ffa1259119@mail.gmail.com>

> Language L1    -    lives in a Java project, with grammar L1.g; usable

> > standalone
> > Language L2    -    lives in another Java project, with grammar L2.g;
> > extends L1
> Have you tried making your actual rules just imports such that L1.g
> contains no rules, but defines the headers and package and so on then
> imports l1rules.g and L2.g also contains no rules but imports l1rules.g,
> l2rules.g
> Obviously l1rules.g and l2rules.g cannot be used on their own and are
> specifically for imports with no @header statements and options etc.
>

Very good idea, I will give that a try and see how it goes. If that works,
and Ter gives me a wiki login, I'll document that on there as well.


> > p.s. to pay my debts I wanted to post on confluence how to get case
> > insensitive parsers using ANTLR3 with JFlex, but it seems
> > editing/commenting
> > is locked down. Any reason why?
> You would want to add that as a child page of the case insensitive lexing
> article that is already there:
>

Sounds like an idea. The ideas currently on that page IMO do not scale to a
grammar of any size.

Christian


> http://www.antlr.org/wiki/pages/viewpage.action?pageId=1782
>
> I think that you just have to ask Ter for a login - you cannot edit as
> anonymous as the pages are filled with SPAM 10 seconds after we open up it
> up :-)
>
> Jim
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From soren.andersen at gmail.com  Wed Feb 10 04:03:58 2010
From: soren.andersen at gmail.com (=?iso-8859-1?Q?S=F8ren_Andersen?=)
Date: Wed, 10 Feb 2010 13:03:58 +0100
Subject: [antlr-interest] ANTLRworks and backtrack?
Message-ID: <4401B806-99DA-436D-B4EB-B93CD97B2A8D@gmail.com>

Hello,

I downloaded the Java 1.6 grammar from http://www.antlr.org/grammar/list but I'm having some trouble getting it to work.

Having simply opened it in ANTLRworks (1.3.1), it's already in trouble regarding the unicode definition of IDENTIFIERS at the bottom. This isn't much of an issue for me though, as I'm paring it down to
just "the basics" that I need. 

More serious, is the error I get once I've fixed that:
FailedPredicateException(compilationUnit,{can't deal with predicates yet}?).
This seems to be related to the grammar specifying global backtracking and memoization:

options {
    backtrack=true;
    memoize=true;
}

But if I remove that, the grammar becomes ambiguous and doesn't work... 

I could just parse outside ANTLRWorks, but... Well... I really like the easy access to the visual parse-trees ANTRLWorks gives me. :)

Any tips would be most welcome!

Regards,

S?ren

From rus-reg at yandex.ru  Wed Feb 10 06:23:37 2010
From: rus-reg at yandex.ru (tahiti)
Date: Wed, 10 Feb 2010 06:23:37 -0800 (PST)
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265740149.24257.1.camel@gecko.home.org>
References: <1265450353027-4524691.post@n2.nabble.com>
	<1265669929354-4537748.post@n2.nabble.com>
	<1265672543.19231.8.camel@gecko.home.org>
	<1265739460480-4542892.post@n2.nabble.com>
	<1265740149.24257.1.camel@gecko.home.org>
Message-ID: <1265811817919-4548142.post@n2.nabble.com>


>>does your .g file contain an options{ output=AST; } block?

No, there are no this block. I earlier tried to add this block, but there
are appear error during generation parser.

-- 
View this message in context: http://n2.nabble.com/Creating-AST-with-third-party-grammar-tp4524691p4548142.html
Sent from the ANTLR mailing list archive at Nabble.com.

From rus-reg at yandex.ru  Wed Feb 10 06:47:53 2010
From: rus-reg at yandex.ru (tahiti)
Date: Wed, 10 Feb 2010 06:47:53 -0800 (PST)
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265811817919-4548142.post@n2.nabble.com>
References: <1265450353027-4524691.post@n2.nabble.com>
	<1265669929354-4537748.post@n2.nabble.com>
	<1265672543.19231.8.camel@gecko.home.org>
	<1265739460480-4542892.post@n2.nabble.com>
	<1265740149.24257.1.camel@gecko.home.org>
	<1265811817919-4548142.post@n2.nabble.com>
Message-ID: <1265813273795-4548280.post@n2.nabble.com>


The error not during generation, during syntax checking of file. When I will
return to home I'll give more detail information about error.
-- 
View this message in context: http://n2.nabble.com/Creating-AST-with-third-party-grammar-tp4524691p4548280.html
Sent from the ANTLR mailing list archive at Nabble.com.

From fvwalter at web.de  Wed Feb 10 06:59:25 2010
From: fvwalter at web.de (Florian)
Date: Wed, 10 Feb 2010 15:59:25 +0100
Subject: [antlr-interest] Help needed with LL(*)-type grammar
In-Reply-To: <1265735356.27461.31.camel@gecko.home.org>
References: <4B7165ED.2040408@web.de>
	<1265735356.27461.31.camel@gecko.home.org>
Message-ID: <4B72C9CD.2000708@web.de>

Hi, John,

thanks for the hint with the "fragment"! That was the reason why it
didn't work.
I copied over the "fragment" from some example but forgot about it.


On 09.02.2010 18:09, John B. Brodie wrote:
> [...]
> Greetings!
>
> you have the meta-keyword `fragment` on your INT lexer rule.
> this means that the lexer will *NEVER* recognize an INT for the parser.
> so the parser never sees a recordCount and fails. see below.
>
>
> but now you might have a problem with fieldData. can fieldData be an
> INT? if so how are you supposed to distinguish an arbitrary occurance of
> a sequence of digits between either a recordCount or a fieldData. that
> is, is something like "Obj1^Verb1^1^2^Obj2^Verb1^field^" legal? hope
> not...
>
> hopefully you can find a more restrictive definition of fieldData that
> distinguishes it from a recordCount -- like maybe, hopefully, fieldData
> has to start with something other than a digit? 
>   

No, unfortunately there is no more strict definition of fieldData.
But it looks like it works since the parser can match along the
combination of objectName and verbName and therefore distinguish where
the difference between a fieldData and a recordCount is.

Thanks again!

Best regards,
Florian

From jimi at temporal-wave.com  Wed Feb 10 08:45:02 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 08:45:02 -0800
Subject: [antlr-interest] Grammar composition in v3, multiple packages,
	no 	joy
In-Reply-To: <d201c9a51002100049v3db8a7e4y763fd3ffa1259119@mail.gmail.com>
Message-ID: <eb21d10060ce8d4db03d008c75e86642@temporal-wave.com>

> > You would want to add that as a child page of the case insensitive
> lexing
> > article that is already there:
> >
> 
> Sounds like an idea. The ideas currently on that page IMO do not scale
> to a
> grammar of any size.

I am not sure what you mean by scale to be honest. Performing an upcase in LA isn't much of an overhead compared to everything else. I use this on my SQL grammars with no problems and there are hundreds of keywords to recognize. But if you prefer JFlex, then so be it :-)

Jim




From morshdy at gmail.com  Wed Feb 10 09:04:43 2010
From: morshdy at gmail.com (Eslam A. AlMorshdy)
Date: Wed, 10 Feb 2010 19:04:43 +0200
Subject: [antlr-interest] anybody using dynamic scopes?
In-Reply-To: <655437629-1265769113-cardhu_decombobulator_blackberry.rim.net-1458278335-@bda428.bisx.prod.on.blackberry>
References: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu> 
	<655437629-1265769113-cardhu_decombobulator_blackberry.rim.net-1458278335-@bda428.bisx.prod.on.blackberry>
Message-ID: <a0d8062b1002100904t280ce807w54c10826d1516876@mail.gmail.com>

wanna/am  using it.(2 yrs user)

On Wed, Feb 10, 2010 at 4:31 AM, <kferrio at gmail.com> wrote:

> Don't do it on my account, but I think I would use it because it looks much
> more transparent and maintainable.  As a new and occasional user, my biggest
> challenge is getting my head back in the game after some time away from the
> code.  This would help.
>
> Kyle
>
> Sent from my Verizon Wireless BlackBerry
>
> -----Original Message-----
> From: Terence Parr <parrt at cs.usfca.edu>
> Date: Tue, 9 Feb 2010 17:30:12
> To: antlr-interest interest<antlr-interest at antlr.org>
> Subject: [antlr-interest] anybody using dynamic scopes?
>
> Hi,
>
> Is anybody using scopes?  E.g., here is the use C grammar:
>
> scope Symbols {
>        Set types; // only track types in order to get parser working
> }
>
> Every rule that declares its usage of Symbols pushes a new copy on the
> stack effectively creating a new symbol scope.
>
> translation_unit
> scope Symbols; // entire file is a scope
> @init {
>  $Symbols::types = new HashSet();
> }
>    : external_declaration+
>    ;
>
>
> Then rule declaration declares a rule scope that lets any invoked rule see
> isTypedef boolean.  It's much easier than passing that info down as
> parameters:
>
> declaration
> scope {
>  boolean isTypedef;
> }
> @init {
>  $declaration::isTypedef = false;
> }
>    : 'typedef' declaration_specifiers? {$declaration::isTypedef=true;}
>      init_declarator_list ';' // special case, looking for typedef
>    | declaration_specifiers init_declarator_list? ';'
>    ;
>
>
> Rule direct_declarator can then easily determine whether the IDENTIFIER
> should be declared as a type name.
>
> direct_declarator
>    :   (   IDENTIFIER
>            {
>            if ($declaration.size()>0&&$declaration::isTypedef) {
>                $Symbols::types.add($IDENTIFIER.text);
>                System.out.println("define type "+$IDENTIFIER.text);
>            }
>            }
>        |   '(' declarator ')'
>        )
>        declarator_suffix*
>    ;
>
> Trying to decide if it's worth reimplementing for v4.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Best Regards,
Eslam A. AlMorshdy

From parrt at cs.usfca.edu  Wed Feb 10 09:55:54 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 10 Feb 2010 09:55:54 -0800
Subject: [antlr-interest] anybody using dynamic scopes?
In-Reply-To: <a0d8062b1002100904t280ce807w54c10826d1516876@mail.gmail.com>
References: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
	<655437629-1265769113-cardhu_decombobulator_blackberry.rim.net-1458278335-@bda428.bisx.prod.on.blackberry>
	<a0d8062b1002100904t280ce807w54c10826d1516876@mail.gmail.com>
Message-ID: <F9761BBC-AF30-4C31-9931-AA6E74E9C92E@cs.usfca.edu>

Cool. i'll keep them.
T
On Feb 10, 2010, at 9:04 AM, Eslam A. AlMorshdy wrote:

> wanna/am  using it.(2 yrs user)
> 
> On Wed, Feb 10, 2010 at 4:31 AM, <kferrio at gmail.com> wrote:
> Don't do it on my account, but I think I would use it because it looks much more transparent and maintainable.  As a new and occasional user, my biggest challenge is getting my head back in the game after some time away from the code.  This would help.
> 
> Kyle
> 
> Sent from my Verizon Wireless BlackBerry
> 
> -----Original Message-----
> From: Terence Parr <parrt at cs.usfca.edu>
> Date: Tue, 9 Feb 2010 17:30:12
> To: antlr-interest interest<antlr-interest at antlr.org>
> Subject: [antlr-interest] anybody using dynamic scopes?
> 
> Hi,
> 
> Is anybody using scopes?  E.g., here is the use C grammar:
> 
> scope Symbols {
>        Set types; // only track types in order to get parser working
> }
> 
> Every rule that declares its usage of Symbols pushes a new copy on the stack effectively creating a new symbol scope.
> 
> translation_unit
> scope Symbols; // entire file is a scope
> @init {
>  $Symbols::types = new HashSet();
> }
>    : external_declaration+
>    ;
> 
> 
> Then rule declaration declares a rule scope that lets any invoked rule see isTypedef boolean.  It's much easier than passing that info down as parameters:
> 
> declaration
> scope {
>  boolean isTypedef;
> }
> @init {
>  $declaration::isTypedef = false;
> }
>    : 'typedef' declaration_specifiers? {$declaration::isTypedef=true;}
>      init_declarator_list ';' // special case, looking for typedef
>    | declaration_specifiers init_declarator_list? ';'
>    ;
> 
> 
> Rule direct_declarator can then easily determine whether the IDENTIFIER
> should be declared as a type name.
> 
> direct_declarator
>    :   (   IDENTIFIER
>            {
>            if ($declaration.size()>0&&$declaration::isTypedef) {
>                $Symbols::types.add($IDENTIFIER.text);
>                System.out.println("define type "+$IDENTIFIER.text);
>            }
>            }
>        |   '(' declarator ')'
>        )
>        declarator_suffix*
>    ;
> 
> Trying to decide if it's worth reimplementing for v4.
> 
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> -- 
> Best Regards,
> Eslam A. AlMorshdy


From oliver.zeigermann at gmail.com  Wed Feb 10 10:03:46 2010
From: oliver.zeigermann at gmail.com (Oliver Zeigermann)
Date: Wed, 10 Feb 2010 19:03:46 +0100
Subject: [antlr-interest] anybody using dynamic scopes?
In-Reply-To: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
References: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
Message-ID: <9da4f4521002101003w2daf09ccwf022225291a96b48@mail.gmail.com>

I use them a lot and they are useful to me. Of course they are not
indispensable, but really convenient.

2010/2/10 Terence Parr <parrt at cs.usfca.edu>:
> Hi,
>
> Is anybody using scopes? ?E.g., here is the use C grammar:
>
> scope Symbols {
> ? ? ? ?Set types; // only track types in order to get parser working
> }
>
> Every rule that declares its usage of Symbols pushes a new copy on the stack effectively creating a new symbol scope.
>
> translation_unit
> scope Symbols; // entire file is a scope
> @init {
> ?$Symbols::types = new HashSet();
> }
> ? ?: external_declaration+
> ? ?;
>
>
> Then rule declaration declares a rule scope that lets any invoked rule see isTypedef boolean. ?It's much easier than passing that info down as parameters:
>
> declaration
> scope {
> ?boolean isTypedef;
> }
> @init {
> ?$declaration::isTypedef = false;
> }
> ? ?: 'typedef' declaration_specifiers? {$declaration::isTypedef=true;}
> ? ? ?init_declarator_list ';' // special case, looking for typedef
> ? ?| declaration_specifiers init_declarator_list? ';'
> ? ?;
>
>
> Rule direct_declarator can then easily determine whether the IDENTIFIER
> should be declared as a type name.
>
> direct_declarator
> ? ?: ? ( ? IDENTIFIER
> ? ? ? ? ? ?{
> ? ? ? ? ? ?if ($declaration.size()>0&&$declaration::isTypedef) {
> ? ? ? ? ? ? ? ?$Symbols::types.add($IDENTIFIER.text);
> ? ? ? ? ? ? ? ?System.out.println("define type "+$IDENTIFIER.text);
> ? ? ? ? ? ?}
> ? ? ? ? ? ?}
> ? ? ? ?| ? '(' declarator ')'
> ? ? ? ?)
> ? ? ? ?declarator_suffix*
> ? ?;
>
> Trying to decide if it's worth reimplementing for v4.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From iztok.kavkler at fmf.uni-lj.si  Wed Feb 10 10:07:49 2010
From: iztok.kavkler at fmf.uni-lj.si (Iztok Kavkler)
Date: Wed, 10 Feb 2010 19:07:49 +0100
Subject: [antlr-interest] anybody using dynamic scopes?
In-Reply-To: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
References: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
Message-ID: <4B72F5F5.30401@fmf.uni-lj.si>

I use it for error reporting from a compiler: during tree parsing phase 
I call several functions that may throw CompileError, which needs 
information about current node's line and column. Since I don't want to 
pass the current node as a parameter to all of these functions I have 
created a scope

scope InfoScope {
     CommonTree node;
}

There is some extra work involved, since I have to say

scope InfoScope;
$InfoScope::node = $rule.start;

at the beginning of every rule.

Then again, perhaps there is an easier way to do this?

Iztok


On 10.2.2010 2:30, Terence Parr wrote:
> Hi,
>
> Is anybody using scopes?  E.g., here is the use C grammar:
>
> scope Symbols {
>          Set types; // only track types in order to get parser working
> }
>
> Every rule that declares its usage of Symbols pushes a new copy on the stack effectively creating a new symbol scope.
>
> translation_unit
> scope Symbols; // entire file is a scope
> @init {
>    $Symbols::types = new HashSet();
> }
>      : external_declaration+
>      ;
>
>
> Then rule declaration declares a rule scope that lets any invoked rule see isTypedef boolean.  It's much easier than passing that info down as parameters:
>
> declaration
> scope {
>    boolean isTypedef;
> }
> @init {
>    $declaration::isTypedef = false;
> }
>      : 'typedef' declaration_specifiers? {$declaration::isTypedef=true;}
>        init_declarator_list ';' // special case, looking for typedef
>      | declaration_specifiers init_declarator_list? ';'
>      ;
>
>
> Rule direct_declarator can then easily determine whether the IDENTIFIER
> should be declared as a type name.
>
> direct_declarator
>      :   (   IDENTIFIER
>              {
>              if ($declaration.size()>0&&$declaration::isTypedef) {
>                  $Symbols::types.add($IDENTIFIER.text);
>                  System.out.println("define type "+$IDENTIFIER.text);
>              }
>              }
>          |   '(' declarator ')'
>          )
>          declarator_suffix*
>      ;
>
> Trying to decide if it's worth reimplementing for v4.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Wed Feb 10 10:16:53 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 10 Feb 2010 10:16:53 -0800
Subject: [antlr-interest] anybody using dynamic scopes?
In-Reply-To: <4B72F5F5.30401@fmf.uni-lj.si>
References: <2A906B0A-2ECE-4DC9-9ACE-73F9D4C1B5C7@cs.usfca.edu>
	<4B72F5F5.30401@fmf.uni-lj.si>
Message-ID: <4B582415-84F6-4F74-B4B7-83C1288E0119@cs.usfca.edu>

I plan on allowing initializers this time. :)
T
On Feb 10, 2010, at 10:07 AM, Iztok Kavkler wrote:

> I use it for error reporting from a compiler: during tree parsing phase 
> I call several functions that may throw CompileError, which needs 
> information about current node's line and column. Since I don't want to 
> pass the current node as a parameter to all of these functions I have 
> created a scope
> 
> scope InfoScope {
>     CommonTree node;
> }
> 
> There is some extra work involved, since I have to say
> 
> scope InfoScope;
> $InfoScope::node = $rule.start;
> 
> at the beginning of every rule.
> 
> Then again, perhaps there is an easier way to do this?
> 
> Iztok
> 
> 
> On 10.2.2010 2:30, Terence Parr wrote:
>> Hi,
>> 
>> Is anybody using scopes?  E.g., here is the use C grammar:
>> 
>> scope Symbols {
>>         Set types; // only track types in order to get parser working
>> }
>> 
>> Every rule that declares its usage of Symbols pushes a new copy on the stack effectively creating a new symbol scope.
>> 
>> translation_unit
>> scope Symbols; // entire file is a scope
>> @init {
>>   $Symbols::types = new HashSet();
>> }
>>     : external_declaration+
>>     ;
>> 
>> 
>> Then rule declaration declares a rule scope that lets any invoked rule see isTypedef boolean.  It's much easier than passing that info down as parameters:
>> 
>> declaration
>> scope {
>>   boolean isTypedef;
>> }
>> @init {
>>   $declaration::isTypedef = false;
>> }
>>     : 'typedef' declaration_specifiers? {$declaration::isTypedef=true;}
>>       init_declarator_list ';' // special case, looking for typedef
>>     | declaration_specifiers init_declarator_list? ';'
>>     ;
>> 
>> 
>> Rule direct_declarator can then easily determine whether the IDENTIFIER
>> should be declared as a type name.
>> 
>> direct_declarator
>>     :   (   IDENTIFIER
>>             {
>>             if ($declaration.size()>0&&$declaration::isTypedef) {
>>                 $Symbols::types.add($IDENTIFIER.text);
>>                 System.out.println("define type "+$IDENTIFIER.text);
>>             }
>>             }
>>         |   '(' declarator ')'
>>         )
>>         declarator_suffix*
>>     ;
>> 
>> Trying to decide if it's worth reimplementing for v4.
>> 
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From ron.hunter-duvar at oracle.com  Wed Feb 10 11:12:22 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Wed, 10 Feb 2010 12:12:22 -0700
Subject: [antlr-interest] ANTLR running out of memory during generation
In-Reply-To: <4B6512A3.9020304@oracle.com>
References: <7277098525d5fb4685c662b1fba4f4e2@temporal-wave.com>
	<4B6512A3.9020304@oracle.com>
Message-ID: <4B730516.5000906@oracle.com>

Just as a follow-up, you're right about backtracking, Jim. By allowing 
me to be lazy and not fix ambiguites, I eventually created such an 
exponentially growing set of possibilities to be considered that it just 
becomes impossible for Antlr to analyze it (I thought that backtracking 
would turn off much of the lookahead analysis and leave it to run-time, 
but apparently not). My temporary work-around didn't get me very far, 
and neither did those switch settings. I had to turn off backtracking 
and handle the ambiguities properly.

I had a few left factoring issues and some incorrectly written rules, 
but also some real ambiguities in the language that require syntactic 
(and occasionally semantic) predicates to resolve. I also split the 
keywords into reserved ones (80) and non-reserved (136 and counting) 
sets, which helped.

But the ambiguities from non-reserved keywords having nothing to do with 
left factoring. Basically everywhere that a token can be interpreted as 
either a keyword or an id, Antlr correctly warns about an ambiguity, 
because the keyword can be a keyword or it can be an id. And there are 
hundreds of such places in a complex grammar with non-reserved keywords. 
It turns out that neither of the approaches outlines in the wiki work as 
they are, but I came up with a hybrid approach that works and scales 
without introducing ambiguities everywhere. I'll write it up in a 
separate email when I get time.

Ron


Ron Hunter-Duvar wrote:
> Jim,
>
> Thanks for the response. Yeah, the target language is kind of obvious 
> isn't it? What else could have that many keywords?
>
> I might try turning off backtracking later on and see what all I have to 
> fix. Right now it's turning out to be a lot easier, and hasn't created 
> any performance problems. Also, I'm not concerned with rejecting invalid 
> code, only with successfully parsing all valid code, which simplifies 
> things.
>
> But the problem I'm having doesn't relate to any specific keyword. I 
> even try inserting garbage keywords, with the same result. To me, the 
> fact that it runs perfectly fine (and fast) with 631, and apparently 
> hits some endless loop/recursion at 632 that makes it run 10x longer and 
> run out of memory indicates a bug or implementation limitation. The fact 
> that 3.1 and 3.2 behave exactly the same way indicates it's code that 
> hasn't changed in the latest release. Unfortunately, I don't know enough 
> of ANTLR's internals to be able to track it down, and don't have the 
> time now to learn what I need to.
>
> I have run it with 2G heap space. I bumped it up from 512M to 1G then 
> 2G, and all it accomplished was to make it run a few seconds longer 
> before running out of memory. A clear symptom of endless loop/recursion. 
> There shouldn't be anything I can do in my grammar that would cause 
> ANTLR to act this way.
>
> I'll try those switches and see if they help. For the moment I've been 
> able to side step the problem by cutting it down to the set of keywords 
> for currently implemented parts of the language, bringing it down to 
> about 150 (I had started with the full keyword list that's available, 
> and then kept adding all the omissions from that list, of which there 
> are many). But ultimately I'll have to find a way to deal with it. I'm 
> hoping maybe Terry will have a bug fix for me before that 8^).
>
> Ron
>
>
> Jim Idle wrote:
>   
>> Ron,
>>
>> First you really need to switch off backtracking unless the objective of your parser is to analyze SQL (you gave it away when you mentioned 632 keywords that can be identifiers). There are not as many predicates required as you think so long as you left factor everything.
>>
>> Your tokens should be consecutive so long as you list them that way in the lexer. 
>>
>> The problem might well be that although SQL sort of allows all keywords to be identifiers, it does not allow all because some of them would be to ambiguous even for a syntax directed hand crafted parser. If you turn on backtracking then try to allow one of these reserved words to be an identifier, then you will probably mask the issue because all warnings and errors are turned off. 
>>
>> It is entirely feasible to create a full SQL parser without backtracking, very little look ahead and few predicates (all of the one or two token lookahead type). I have an online demo of T-SQL for instance on my web site at www.temporal-wave.com  (select 'online demos' link), and Oracle SQL/PLSQL will be up there before long too.
>>
>> So, I think you will need to do the following to have a chance of generating the code:
>>
>> 1) Use -Xconversiontimeout 10000
>> 2) Cause switches to be generated rather than ifs: -Xmaxswitchcaselabels 32000 -Xminswitchalts 1-xmaxinlineddfastates 65534
>> 3) Use -Xmx2G when invoking the java command (assuming your jvm allows that)
>>
>> But if you cannot get it going that way, then basically you are masking a bigger problem in your grammar that you are not seeing because of global backtracking. 
>>
>> Jim
>>
>>   
>>     
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
>>> Sent: Friday, January 29, 2010 8:52 PM
>>> To: antlr-interest at antlr.org
>>> Subject: [antlr-interest] ANTLR running out of memory during generation
>>>
>>> I'm having a strange problem with ANTLR. I'm building a grammar for a
>>> language with a huge number (hundreds) of non-reserved keywords. I'm
>>> using the approach of having the lexer return a different token type
>>> for
>>> each keyword, and then having a parser rule of the form:
>>>
>>>     id : ( ID | QUOTED_ID | KW_A | KW_B | ... | KW_ZZZ );
>>>
>>> This was working great until today. In fact, ANTLR 3.2 generates
>>> surprisingly clever code for this - all the keywords are assigned
>>> consecutive token numbers, and generated code just says:
>>>
>>>     if ( (input.LA(1)>=KW_A && input.LA(1)<=KW_ZZZ)||(input.LA(1)>=ID
>>> &&
>>> input.LA(1)<=QUOTED_ID) ) {
>>>         input.consume();
>>>         ...
>>>
>>> This works all the way up to 631 keywords. ANTLR runs in about 20
>>> seconds, and never uses more than 269MB of memory. When I add a 632nd
>>> keyword (doesn't matter what the keyword is), and change nothing else,
>>> ANTLR runs for 2 minutes and runs out of heap space. I kept bumping the
>>> max space up, but even going to 2GB doesn't make any difference.
>>>
>>> What's really interesting is that I was using ANTLR 3.1 until now. When
>>> I ran into this I upgraded to 3.2, but both of them fail at exactly the
>>> same spot, 632 keywords. Not surprisingly, the stack trace varies from
>>> one run to the next, depending on the exact point it runs out of
>>> memory,
>>> but it always has deeply nested calls to these and other methods:
>>>
>>>
>>> org.antlr.stringtemplate.language.ASTExpr.writeTemplate(ASTExpr.java:75
>>> 0)
>>>     org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:680)
>>>
>>> org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:6
>>> 60)
>>>
>>> org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluato
>>> r.java:86)
>>>     org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
>>>
>>> org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
>>>
>>> I don't know if it makes a difference, but I'm using backtracking
>>> (otherwise, this approach to non-reserved keywords doesn't work without
>>> a lot of synpreds), and outputting ASTs.
>>>
>>> Since this is size related, it's hard to narrow it down to a simple
>>> example. I could try to duplicate it with just the id rule and nothing
>>> else.
>>>
>>> Any ideas what might be happening here, and whether a fix might be
>>> possible?
>>>
>>> Thanks,
>>> Ron
>>>
>>> --
>>> Ron Hunter-Duvar | Software Developer V | 403-272-6580
>>> Oracle Service Engineering
>>> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>>>
>>> All opinions expressed here are mine, and do not necessarily represent
>>> those of my employer.
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>>> email-address
>>>     
>>>       
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>   
>>     
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From christian at modeltwozero.com  Wed Feb 10 11:16:36 2010
From: christian at modeltwozero.com (Christian Nentwich)
Date: Wed, 10 Feb 2010 19:16:36 +0000
Subject: [antlr-interest] Grammar composition in v3, multiple packages,
	no 	joy
In-Reply-To: <eb21d10060ce8d4db03d008c75e86642@temporal-wave.com>
References: <d201c9a51002100049v3db8a7e4y763fd3ffa1259119@mail.gmail.com>
	<eb21d10060ce8d4db03d008c75e86642@temporal-wave.com>
Message-ID: <d201c9a51002101116q529035e6g27d9bd0f5ee6e772@mail.gmail.com>

  > Sounds like an idea. The ideas currently on that page IMO do not scale

> > to a
> > grammar of any size.
>
> I am not sure what you mean by scale to be honest. Performing an upcase in
> LA isn't much of an overhead compared to everything else. I use this on my
> SQL grammars with no problems and there are hundreds of keywords to
> recognize. But if you prefer JFlex, then so be it :-)
>
> Jim
>

You saying that made me somewhat suspicious that I might have overlooked
something, and indeed it seems so; I made an assumption that the character
data of tokens was being converted to upper case by that solution, but on
second reading it seems that this is only done for matching purposes. I have
lots of stuff (quoted strings, etc) that must not be touched. Hm. I may
rethink :)

Christian

From ron.hunter-duvar at oracle.com  Wed Feb 10 11:24:39 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Wed, 10 Feb 2010 12:24:39 -0700
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
	triggers endless loop
Message-ID: <4B7307F7.1020203@oracle.com>

Hi,

I've run into something that is definitely a bug in Antlr's lexer code: 
if a semantic predicate fails within a lexer rule, it triggers an 
endless loop. The problem is in the Lexer.nextToken() method:

    public Token nextToken() {
        while (true) {
            state.token = null;
            state.channel = Token.DEFAULT_CHANNEL;
            state.tokenStartCharIndex = input.index();
            state.tokenStartCharPositionInLine = 
input.getCharPositionInLine();
            state.tokenStartLine = input.getLine();
            state.text = null;
            if ( input.LA(1)==CharStream.EOF ) {
                return Token.EOF_TOKEN;
            }
            try {
                mTokens();
                if ( state.token==null ) {
                    emit();
                }
                else if ( state.token==Token.SKIP_TOKEN ) {
                    continue;
                }
                return state.token;
            }
            catch (NoViableAltException nva) {
                reportError(nva);
                recover(nva); // throw out current char and try again
            }
            catch (RecognitionException re) {
                reportError(re);
                // match() routine has already called recover()
            }
        }
    }

If a NoViableAltException is thrown, the recover method is called, which 
consumes one character and continues. But when a semantic predicate 
fails, it throws a FailedPredicateException, which is a subclass  of 
RecognitionException. As you can see in the code above, the exception is 
caught and reported, but it then loops around and tries matching again 
at the same point in the input, resulting in the same exception. Here's 
a sample of Antlr's output messages:

line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
...

I was able to work around this easily because I already had a custom 
lexer superclass, so I just pasted in that nextToken() code and added a 
"recover(re);" call to the second catch.

Ron

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From jimi at temporal-wave.com  Wed Feb 10 11:27:44 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 11:27:44 -0800
Subject: [antlr-interest] ANTLR running out of memory during generation
In-Reply-To: <4B730516.5000906@oracle.com>
Message-ID: <288ae5d25cf2fd4397a44648b57eff32@temporal-wave.com>

Yes, the things you mention are necessary to parse SQL. However I don't have much in the way of predicates and definitely nothing complicated. Using the rule:
 
keywId: ID | k=keywords {$k.setType(ID);};
keywords : KEYW | KEYW |....etc ;
 
and no backtracking, as well as writing the grammars incrementally, then you find you occasionally need:
 
 ((keywId)=>keywId)?
 
Or similar for some optional clauses:
 
((KEYW)=>optKEYW)? keywId
 
But that should be about it really. SQL grammars are just bloody big is all and you cannot write them from the 'specs', which use pseudo BNF written around LALR parsers ;-)
 
You already discovered the trick of making sure that all your reserved words are listed together (they will be in sequence then) followed by listing all the non-reserved keywords in the same way (so they will be in sequence).
 
Jim
 
PS: There isn't any danger of you giving away these parser grammars is there? If there is, then there was not much point me writing commercial versions ;-(
 
From: Ron Hunter-Duvar [mailto:ron.hunter-duvar at oracle.com] 
Sent: Wednesday, February 10, 2010 11:12 AM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] ANTLR running out of memory during generation
 
Just as a follow-up, you're right about backtracking, Jim. By allowing me to be lazy and not fix ambiguites, I eventually created such an exponentially growing set of possibilities to be considered that it just becomes impossible for Antlr to analyze it (I thought that backtracking would turn off much of the lookahead analysis and leave it to run-time, but apparently not). My temporary work-around didn't get me very far, and neither did those switch settings. I had to turn off backtracking and handle the ambiguities properly. 

I had a few left factoring issues and some incorrectly written rules, but also some real ambiguities in the language that require syntactic (and occasionally semantic) predicates to resolve. I also split the keywords into reserved ones (80) and non-reserved (136 and counting) sets, which helped.

But the ambiguities from non-reserved keywords having nothing to do with left factoring. Basically everywhere that a token can be interpreted as either a keyword or an id, Antlr correctly warns about an ambiguity, because the keyword can be a keyword or it can be an id. And there are hundreds of such places in a complex grammar with non-reserved keywords. It turns out that neither of the approaches outlines in the wiki work as they are, but I came up with a hybrid approach that works and scales without introducing ambiguities everywhere. I'll write it up in a separate email when I get time.

Ron


Ron Hunter-Duvar wrote: 
Jim,
 
Thanks for the response. Yeah, the target language is kind of obvious 
isn't it? What else could have that many keywords?
 
I might try turning off backtracking later on and see what all I have to 
fix. Right now it's turning out to be a lot easier, and hasn't created 
any performance problems. Also, I'm not concerned with rejecting invalid 
code, only with successfully parsing all valid code, which simplifies 
things.
 
But the problem I'm having doesn't relate to any specific keyword. I 
even try inserting garbage keywords, with the same result. To me, the 
fact that it runs perfectly fine (and fast) with 631, and apparently 
hits some endless loop/recursion at 632 that makes it run 10x longer and 
run out of memory indicates a bug or implementation limitation. The fact 
that 3.1 and 3.2 behave exactly the same way indicates it's code that 
hasn't changed in the latest release. Unfortunately, I don't know enough 
of ANTLR's internals to be able to track it down, and don't have the 
time now to learn what I need to.
 
I have run it with 2G heap space. I bumped it up from 512M to 1G then 
2G, and all it accomplished was to make it run a few seconds longer 
before running out of memory. A clear symptom of endless loop/recursion. 
There shouldn't be anything I can do in my grammar that would cause 
ANTLR to act this way.
 
I'll try those switches and see if they help. For the moment I've been 
able to side step the problem by cutting it down to the set of keywords 
for currently implemented parts of the language, bringing it down to 
about 150 (I had started with the full keyword list that's available, 
and then kept adding all the omissions from that list, of which there 
are many). But ultimately I'll have to find a way to deal with it. I'm 
hoping maybe Terry will have a bug fix for me before that 8^).
 
Ron
 
 
Jim Idle wrote:
  
Ron,
 
First you really need to switch off backtracking unless the objective of your parser is to analyze SQL (you gave it away when you mentioned 632 keywords that can be identifiers). There are not as many predicates required as you think so long as you left factor everything.
 
Your tokens should be consecutive so long as you list them that way in the lexer. 
 
The problem might well be that although SQL sort of allows all keywords to be identifiers, it does not allow all because some of them would be to ambiguous even for a syntax directed hand crafted parser. If you turn on backtracking then try to allow one of these reserved words to be an identifier, then you will probably mask the issue because all warnings and errors are turned off. 
 
It is entirely feasible to create a full SQL parser without backtracking, very little look ahead and few predicates (all of the one or two token lookahead type). I have an online demo of T-SQL for instance on my web site at www.temporal-wave.com  (select 'online demos' link), and Oracle SQL/PLSQL will be up there before long too.
 
So, I think you will need to do the following to have a chance of generating the code:
 
1) Use -Xconversiontimeout 10000
2) Cause switches to be generated rather than ifs: -Xmaxswitchcaselabels 32000 -Xminswitchalts 1-xmaxinlineddfastates 65534
3) Use -Xmx2G when invoking the java command (assuming your jvm allows that)
 
But if you cannot get it going that way, then basically you are masking a bigger problem in your grammar that you are not seeing because of global backtracking. 
 
Jim
 
  
    
-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
Sent: Friday, January 29, 2010 8:52 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] ANTLR running out of memory during generation
 
I'm having a strange problem with ANTLR. I'm building a grammar for a
language with a huge number (hundreds) of non-reserved keywords. I'm
using the approach of having the lexer return a different token type
for
each keyword, and then having a parser rule of the form:
 
    id : ( ID | QUOTED_ID | KW_A | KW_B | ... | KW_ZZZ );
 
This was working great until today. In fact, ANTLR 3.2 generates
surprisingly clever code for this - all the keywords are assigned
consecutive token numbers, and generated code just says:
 
    if ( (input.LA(1)>=KW_A && input.LA(1)<=KW_ZZZ)||(input.LA(1)>=ID
&&
input.LA(1)<=QUOTED_ID) ) {
        input.consume();
        ...
 
This works all the way up to 631 keywords. ANTLR runs in about 20
seconds, and never uses more than 269MB of memory. When I add a 632nd
keyword (doesn't matter what the keyword is), and change nothing else,
ANTLR runs for 2 minutes and runs out of heap space. I kept bumping the
max space up, but even going to 2GB doesn't make any difference.
 
What's really interesting is that I was using ANTLR 3.1 until now. When
I ran into this I upgraded to 3.2, but both of them fail at exactly the
same spot, 632 keywords. Not surprisingly, the stack trace varies from
one run to the next, depending on the exact point it runs out of
memory,
but it always has deeply nested calls to these and other methods:
 
 
org.antlr.stringtemplate.language.ASTExpr.writeTemplate(ASTExpr.java:75
0)
    org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:680)
 
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:6
60)
 
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluato
r.java:86)
    org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:149)
 
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:705)
 
I don't know if it makes a difference, but I'm using backtracking
(otherwise, this approach to non-reserved keywords doesn't work without
a lot of synpreds), and outputting ASTs.
 
Since this is size related, it's hard to narrow it down to a simple
example. I could try to duplicate it with just the id rule and nothing
else.
 
Any ideas what might be happening here, and whether a fix might be
possible?
 
Thanks,
Ron
 
--
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
 
All opinions expressed here are mine, and do not necessarily represent
those of my employer.
 
 
List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
email-address
    
      
 
 
 
List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
 
  
    
 
  



-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
 
All opinions expressed here are mine, and do not necessarily represent
those of my employer.



From jimi at temporal-wave.com  Wed Feb 10 11:30:33 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 11:30:33 -0800
Subject: [antlr-interest] Grammar composition in v3, multiple packages,
	no 	joy
In-Reply-To: <d201c9a51002101116q529035e6g27d9bd0f5ee6e772@mail.gmail.com>
Message-ID: <4fbeb705327be542acaa8c49cc15faf5@temporal-wave.com>


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian Nentwich
> Sent: Wednesday, February 10, 2010 11:17 AM
> To: antlr-interest at antlr.org
> >
> > I am not sure what you mean by scale to be honest. Performing an
> upcase in
> > LA isn't much of an overhead compared to everything else. I use this
> on my
> > SQL grammars with no problems and there are hundreds of keywords to
> > recognize. But if you prefer JFlex, then so be it :-)
> >
> > Jim
> >
> 
> You saying that made me somewhat suspicious that I might have
> overlooked
> something, and indeed it seems so; I made an assumption that the
> character
> data of tokens was being converted to upper case by that solution, but
> on
> second reading it seems that this is only done for matching purposes. I
> have
> lots of stuff (quoted strings, etc) that must not be touched. Hm. I may
> rethink :)

Yes - the common case is that you don't want to change the input code, just test it in a case insensitive way. That's why the solution just matches and leaves the input alone.

Jim





From jimi at temporal-wave.com  Wed Feb 10 11:33:15 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 11:33:15 -0800
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
	triggers endless loop
In-Reply-To: <4B7307F7.1020203@oracle.com>
Message-ID: <687854885c0d494b8484cfcb98a72b98@temporal-wave.com>

This just means that you haven't covered the predicated cases correctly. In general it means that you needed a gated predicate , not a simple ? predicate. Post the code for further help.

Basically your lexer should not throw any exceptions or reach unrecognizable input.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
> Sent: Wednesday, February 10, 2010 11:25 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
> triggers endless loop
> 
> Hi,
> 
> I've run into something that is definitely a bug in Antlr's lexer code:
> if a semantic predicate fails within a lexer rule, it triggers an
> endless loop. The problem is in the Lexer.nextToken() method:
> 
>     public Token nextToken() {
>         while (true) {
>             state.token = null;
>             state.channel = Token.DEFAULT_CHANNEL;
>             state.tokenStartCharIndex = input.index();
>             state.tokenStartCharPositionInLine =
> input.getCharPositionInLine();
>             state.tokenStartLine = input.getLine();
>             state.text = null;
>             if ( input.LA(1)==CharStream.EOF ) {
>                 return Token.EOF_TOKEN;
>             }
>             try {
>                 mTokens();
>                 if ( state.token==null ) {
>                     emit();
>                 }
>                 else if ( state.token==Token.SKIP_TOKEN ) {
>                     continue;
>                 }
>                 return state.token;
>             }
>             catch (NoViableAltException nva) {
>                 reportError(nva);
>                 recover(nva); // throw out current char and try again
>             }
>             catch (RecognitionException re) {
>                 reportError(re);
>                 // match() routine has already called recover()
>             }
>         }
>     }
> 
> If a NoViableAltException is thrown, the recover method is called,
> which
> consumes one character and continues. But when a semantic predicate
> fails, it throws a FailedPredicateException, which is a subclass  of
> RecognitionException. As you can see in the code above, the exception
> is
> caught and reported, but it then loops around and tries matching again
> at the same point in the input, resulting in the same exception. Here's
> a sample of Antlr's output messages:
> 
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> ...
> 
> I was able to work around this easily because I already had a custom
> lexer superclass, so I just pasted in that nextToken() code and added a
> "recover(re);" call to the second catch.
> 
> Ron
> 
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
> 
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Wed Feb 10 11:35:01 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 11:35:01 -0800
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
	triggers endless loop
In-Reply-To: <4B7307F7.1020203@oracle.com>
Message-ID: <6747bdf60fb0654ba2d263394bc00693@temporal-wave.com>

By the way - there is an explanation of how to lex that situation correctly here:

http://www.antlr.org/wiki/display/ANTLR3/Lexer+grammar+for+floating+point%2C+dot%2C+range%2C+time+specs


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
> Sent: Wednesday, February 10, 2010 11:25 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
> triggers endless loop
> 
> Hi,
> 
> I've run into something that is definitely a bug in Antlr's lexer code:
> if a semantic predicate fails within a lexer rule, it triggers an
> endless loop. The problem is in the Lexer.nextToken() method:
> 
>     public Token nextToken() {
>         while (true) {
>             state.token = null;
>             state.channel = Token.DEFAULT_CHANNEL;
>             state.tokenStartCharIndex = input.index();
>             state.tokenStartCharPositionInLine =
> input.getCharPositionInLine();
>             state.tokenStartLine = input.getLine();
>             state.text = null;
>             if ( input.LA(1)==CharStream.EOF ) {
>                 return Token.EOF_TOKEN;
>             }
>             try {
>                 mTokens();
>                 if ( state.token==null ) {
>                     emit();
>                 }
>                 else if ( state.token==Token.SKIP_TOKEN ) {
>                     continue;
>                 }
>                 return state.token;
>             }
>             catch (NoViableAltException nva) {
>                 reportError(nva);
>                 recover(nva); // throw out current char and try again
>             }
>             catch (RecognitionException re) {
>                 reportError(re);
>                 // match() routine has already called recover()
>             }
>         }
>     }
> 
> If a NoViableAltException is thrown, the recover method is called,
> which
> consumes one character and continues. But when a semantic predicate
> fails, it throws a FailedPredicateException, which is a subclass  of
> RecognitionException. As you can see in the code above, the exception
> is
> caught and reported, but it then loops around and tries matching again
> at the same point in the input, resulting in the same exception. Here's
> a sample of Antlr's output messages:
> 
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> ...
> 
> I was able to work around this easily because I already had a custom
> lexer superclass, so I just pasted in that nextToken() code and added a
> "recover(re);" call to the second catch.
> 
> Ron
> 
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
> 
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From siff.michael at gmail.com  Wed Feb 10 11:35:16 2010
From: siff.michael at gmail.com (Michael Siff)
Date: Wed, 10 Feb 2010 14:35:16 -0500
Subject: [antlr-interest] Lexing nested comments
Message-ID: <4B730A74.9000906@gmail.com>

Hi, I am an ANTLR newbie, so I apologize if the answer to this question
ends up being trivial.

I am trying to write an ANTLR lexer for a language that ignores nested
C-style comments. So, something like:

  x = 3 /* /* this is ignored */ as is this */ ;

should just produce four non-hidden tokens: ID = NUMBER ;

I know there are several ways to approach this including using recursive
definitions for the comment tokens as in something like:

 NESTED : '/*' (NESTED | .)* '*/' { $channel = HIDDEN } ;

However, the language in question has the need to consider tokens like:

 /*:bool:*/

as a way of specifying explicit type information. Currently, what I have
gets the nested comments correctly, but then ignores the /*:bool:*/ as
if it is a comment even though I have a separate rule like:

  BOOL : '/*:bool:*/' ;

Is there an easy way around this problem?

Years ago I accomplished something very similar using lex/flex, and
then, later, in SableCC using explicit lexer states where I used a
separate token '/*' to mark the beginning of a comment and then to enter
the "comment" state (and as a side effect bumped up a nested-comment
counter). Since '/*' is shorter than '/*:bool:*/' it did not prevent the
BOOL token from being discovered; explicit states were used to indicate
that the BOOL token should only be scanned if in the "normal" (not the
"comment") state.

It seems to be that possibly ANTLR's semantic predicates could be used
to solve this problem, but whenever I try as in:

  BOOL : { n == 0 }? '/*:bool:*/' ;

if n > 0 it just throws an exception rather than ignoring that rule.

Any light that can be shed on this will be greatly appreciated.

Thanks in advance,

- Michael

From ron.hunter-duvar at oracle.com  Wed Feb 10 11:52:58 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Wed, 10 Feb 2010 12:52:58 -0700
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
 triggers endless loop
In-Reply-To: <687854885c0d494b8484cfcb98a72b98@temporal-wave.com>
References: <687854885c0d494b8484cfcb98a72b98@temporal-wave.com>
Message-ID: <4B730E9A.4080807@oracle.com>

Yes, you're right that I didn't have the predicate coded properly in the 
rule. I haven't seen this limitation mentioned, but it seems that gated 
semantic predicates within subrules don't work in lexers, only in 
parsers. That is, they don't just turn off that subrule and make 
everything else still match. When I moved the predicate to the start of 
the lexer rule and made it a gated semantic predicate, it did what I wanted.

But that's not an excuse for Antlr going into an endless loop (it's not 
my code that's looping, it's the Antlr run-time code itself that does 
the loop). Surely you're not going to tell me that this is correct 
run-time behaviour, that Antlr is supposed to go into an endless loop if 
I code a semantic predicate wrong?

Ron


Jim Idle wrote:
> This just means that you haven't covered the predicated cases correctly. In general it means that you needed a gated predicate , not a simple ? predicate. Post the code for further help.
>
> Basically your lexer should not throw any exceptions or reach unrecognizable input.
>
> Jim
>
>
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
>> Sent: Wednesday, February 10, 2010 11:25 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
>> triggers endless loop
>>
>> Hi,
>>
>> I've run into something that is definitely a bug in Antlr's lexer code:
>> if a semantic predicate fails within a lexer rule, it triggers an
>> endless loop. The problem is in the Lexer.nextToken() method:
>>
>>     public Token nextToken() {
>>         while (true) {
>>             state.token = null;
>>             state.channel = Token.DEFAULT_CHANNEL;
>>             state.tokenStartCharIndex = input.index();
>>             state.tokenStartCharPositionInLine =
>> input.getCharPositionInLine();
>>             state.tokenStartLine = input.getLine();
>>             state.text = null;
>>             if ( input.LA(1)==CharStream.EOF ) {
>>                 return Token.EOF_TOKEN;
>>             }
>>             try {
>>                 mTokens();
>>                 if ( state.token==null ) {
>>                     emit();
>>                 }
>>                 else if ( state.token==Token.SKIP_TOKEN ) {
>>                     continue;
>>                 }
>>                 return state.token;
>>             }
>>             catch (NoViableAltException nva) {
>>                 reportError(nva);
>>                 recover(nva); // throw out current char and try again
>>             }
>>             catch (RecognitionException re) {
>>                 reportError(re);
>>                 // match() routine has already called recover()
>>             }
>>         }
>>     }
>>
>> If a NoViableAltException is thrown, the recover method is called,
>> which
>> consumes one character and continues. But when a semantic predicate
>> fails, it throws a FailedPredicateException, which is a subclass  of
>> RecognitionException. As you can see in the code above, the exception
>> is
>> caught and reported, but it then loops around and tries matching again
>> at the same point in the input, resulting in the same exception. Here's
>> a sample of Antlr's output messages:
>>
>> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
>> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
>> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
>> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
>> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
>> ...
>>
>> I was able to work around this easily because I already had a custom
>> lexer superclass, so I just pasted in that nextToken() code and added a
>> "recover(re);" call to the second catch.
>>
>> Ron
>>
>> --
>> Ron Hunter-Duvar | Software Developer V | 403-272-6580
>> Oracle Service Engineering
>> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>>
>> All opinions expressed here are mine, and do not necessarily represent
>> those of my employer.
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>>     
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From jimi at temporal-wave.com  Wed Feb 10 11:58:54 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 11:58:54 -0800
Subject: [antlr-interest] Lexing nested comments
In-Reply-To: <4B730A74.9000906@gmail.com>
Message-ID: <7e93dd98d19f194aa1070d2179739aea@temporal-wave.com>

Have you listed you BOOL rule before your NESTED rule? That would probably work as is.

However I would do this:

fragment BOOL :;
NESTED : '/*'

		( options {greedy=false;} :
			  ('bool*/')=> 'bool' { $type = BOOL; }
			| ('/*')=>NESTED
			| .
		)*
         '*/'
       ;

I must say however that whoever thought that was a good idea really did not think it through. What language are you parsing that someone thought it was clever to do that?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Michael Siff
> Sent: Wednesday, February 10, 2010 11:35 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Lexing nested comments
> 
> Hi, I am an ANTLR newbie, so I apologize if the answer to this question
> ends up being trivial.
> 
> I am trying to write an ANTLR lexer for a language that ignores nested
> C-style comments. So, something like:
> 
>   x = 3 /* /* this is ignored */ as is this */ ;
> 
> should just produce four non-hidden tokens: ID = NUMBER ;
> 
> I know there are several ways to approach this including using
> recursive
> definitions for the comment tokens as in something like:
> 
>  NESTED : '/*' (NESTED | .)* '*/' { $channel = HIDDEN } ;
> 
> However, the language in question has the need to consider tokens like:
> 
>  /*:bool:*/
> 
> as a way of specifying explicit type information. Currently, what I
> have
> gets the nested comments correctly, but then ignores the /*:bool:*/ as
> if it is a comment even though I have a separate rule like:
> 
>   BOOL : '/*:bool:*/' ;
> 
> Is there an easy way around this problem?
> 
> Years ago I accomplished something very similar using lex/flex, and
> then, later, in SableCC using explicit lexer states where I used a
> separate token '/*' to mark the beginning of a comment and then to
> enter
> the "comment" state (and as a side effect bumped up a nested-comment
> counter). Since '/*' is shorter than '/*:bool:*/' it did not prevent
> the
> BOOL token from being discovered; explicit states were used to indicate
> that the BOOL token should only be scanned if in the "normal" (not the
> "comment") state.
> 
> It seems to be that possibly ANTLR's semantic predicates could be used
> to solve this problem, but whenever I try as in:
> 
>   BOOL : { n == 0 }? '/*:bool:*/' ;
> 
> if n > 0 it just throws an exception rather than ignoring that rule.
> 
> Any light that can be shed on this will be greatly appreciated.
> 
> Thanks in advance,
> 
> - Michael
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From siff.michael at gmail.com  Wed Feb 10 12:24:33 2010
From: siff.michael at gmail.com (Michael Siff)
Date: Wed, 10 Feb 2010 15:24:33 -0500
Subject: [antlr-interest] Lexing nested comments
In-Reply-To: <7e93dd98d19f194aa1070d2179739aea@temporal-wave.com>
References: <7e93dd98d19f194aa1070d2179739aea@temporal-wave.com>
Message-ID: <4B731601.5030302@gmail.com>

Jim, first of all, thank you very much for the prompt reply. What you
sent seems to do the trick quite nicely. I had tried listing BOOL first,
but, for whatever reason, NESTED still seems to take precedence.

You are right, the source language in question is not something I would
recommend programming in. What I sent was a simplification of a
pedagogical language I have designed call php-- that is essentially a
subset (and much less powerful subset at that) of PHP. The idea is to
add explicit types to an implicitly typed language and still let the
explicitly typed version sneak through the original language's parser
(so to have the new language remain essentially a subset). This way
students can try out simple php-- programs using command-line php. (The
same idea can be applied to most any language that has multiline
comments.) Of course, the nested comment ability is not strictly
necessary - but as a pedagogical language it demonstrates to
introductory compilers students some of the lexical-analysis challenges
that compiler writers have historically faced.

- Michael



On 2/10/10 2:58 PM, Jim Idle wrote:
> Have you listed you BOOL rule before your NESTED rule? That would probably work as is.
> 
> However I would do this:
> 
> fragment BOOL :;
> NESTED : '/*'
> 
> 		( options {greedy=false;} :
> 			  ('bool*/')=> 'bool' { $type = BOOL; }
> 			| ('/*')=>NESTED
> 			| .
> 		)*
>          '*/'
>        ;
> 
> I must say however that whoever thought that was a good idea really did not think it through. What language are you parsing that someone thought it was clever to do that?
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Michael Siff
>> Sent: Wednesday, February 10, 2010 11:35 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Lexing nested comments
>>
>> Hi, I am an ANTLR newbie, so I apologize if the answer to this question
>> ends up being trivial.
>>
>> I am trying to write an ANTLR lexer for a language that ignores nested
>> C-style comments. So, something like:
>>
>>   x = 3 /* /* this is ignored */ as is this */ ;
>>
>> should just produce four non-hidden tokens: ID = NUMBER ;
>>
>> I know there are several ways to approach this including using
>> recursive
>> definitions for the comment tokens as in something like:
>>
>>  NESTED : '/*' (NESTED | .)* '*/' { $channel = HIDDEN } ;
>>
>> However, the language in question has the need to consider tokens like:
>>
>>  /*:bool:*/
>>
>> as a way of specifying explicit type information. Currently, what I
>> have
>> gets the nested comments correctly, but then ignores the /*:bool:*/ as
>> if it is a comment even though I have a separate rule like:
>>
>>   BOOL : '/*:bool:*/' ;
>>
>> Is there an easy way around this problem?
>>
>> Years ago I accomplished something very similar using lex/flex, and
>> then, later, in SableCC using explicit lexer states where I used a
>> separate token '/*' to mark the beginning of a comment and then to
>> enter
>> the "comment" state (and as a side effect bumped up a nested-comment
>> counter). Since '/*' is shorter than '/*:bool:*/' it did not prevent
>> the
>> BOOL token from being discovered; explicit states were used to indicate
>> that the BOOL token should only be scanned if in the "normal" (not the
>> "comment") state.
>>
>> It seems to be that possibly ANTLR's semantic predicates could be used
>> to solve this problem, but whenever I try as in:
>>
>>   BOOL : { n == 0 }? '/*:bool:*/' ;
>>
>> if n > 0 it just throws an exception rather than ignoring that rule.
>>
>> Any light that can be shed on this will be greatly appreciated.
>>
>> Thanks in advance,
>>
>> - Michael
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Wed Feb 10 12:26:10 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 12:26:10 -0800
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
	triggers endless loop
In-Reply-To: <4B730E9A.4080807@oracle.com>
Message-ID: <56eef1980d91214fa8a8ec59e39c01a0@temporal-wave.com>

No it should not generate code like that if can avoid it, but it is difficult to detect that that is what will happen. How would you go about proving that the code will be an endless loop? http://en.wikipedia.org/wiki/Halting_problem 
 
Instead, the failed predicate exception at runtime shows that it must be your predicate that is going awry.
 
Jim
 
From: Ron Hunter-Duvar [mailto:ron.hunter-duvar at oracle.com] 
Sent: Wednesday, February 10, 2010 11:53 AM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer triggers endless loop
 
Yes, you're right that I didn't have the predicate coded properly in the rule. I haven't seen this limitation mentioned, but it seems that gated semantic predicates within subrules don't work in lexers, only in parsers. That is, they don't just turn off that subrule and make everything else still match. When I moved the predicate to the start of the lexer rule and made it a gated semantic predicate, it did what I wanted.

But that's not an excuse for Antlr going into an endless loop (it's not my code that's looping, it's the Antlr run-time code itself that does the loop). Surely you're not going to tell me that this is correct run-time behaviour, that Antlr is supposed to go into an endless loop if I code a semantic predicate wrong?

Ron


Jim Idle wrote: 
This just means that you haven't covered the predicated cases correctly. In general it means that you needed a gated predicate , not a simple ? predicate. Post the code for further help.
 
Basically your lexer should not throw any exceptions or reach unrecognizable input.
 
Jim
 
 
  
-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
Sent: Wednesday, February 10, 2010 11:25 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
triggers endless loop
 
Hi,
 
I've run into something that is definitely a bug in Antlr's lexer code:
if a semantic predicate fails within a lexer rule, it triggers an
endless loop. The problem is in the Lexer.nextToken() method:
 
    public Token nextToken() {
        while (true) {
            state.token = null;
            state.channel = Token.DEFAULT_CHANNEL;
            state.tokenStartCharIndex = input.index();
            state.tokenStartCharPositionInLine =
input.getCharPositionInLine();
            state.tokenStartLine = input.getLine();
            state.text = null;
            if ( input.LA(1)==CharStream.EOF ) {
                return Token.EOF_TOKEN;
            }
            try {
                mTokens();
                if ( state.token==null ) {
                    emit();
                }
                else if ( state.token==Token.SKIP_TOKEN ) {
                    continue;
                }
                return state.token;
            }
            catch (NoViableAltException nva) {
                reportError(nva);
                recover(nva); // throw out current char and try again
            }
            catch (RecognitionException re) {
                reportError(re);
                // match() routine has already called recover()
            }
        }
    }
 
If a NoViableAltException is thrown, the recover method is called,
which
consumes one character and continues. But when a semantic predicate
fails, it throws a FailedPredicateException, which is a subclass  of
RecognitionException. As you can see in the code above, the exception
is
caught and reported, but it then loops around and tries matching again
at the same point in the input, resulting in the same exception. Here's
a sample of Antlr's output messages:
 
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
...
 
I was able to work around this easily because I already had a custom
lexer superclass, so I just pasted in that nextToken() code and added a
"recover(re);" call to the second catch.
 
Ron
 
--
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
 
All opinions expressed here are mine, and do not necessarily represent
those of my employer.
 
 
List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
email-address
    
 
 
 
 
List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
 
  



-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
 
All opinions expressed here are mine, and do not necessarily represent
those of my employer.



From jimi at temporal-wave.com  Wed Feb 10 12:27:52 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 12:27:52 -0800
Subject: [antlr-interest] Lexing nested comments
In-Reply-To: <4B731601.5030302@gmail.com>
Message-ID: <6610f5305daf5c4d855a3fedad7f6a2e@temporal-wave.com>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Michael Siff
> Sent: Wednesday, February 10, 2010 12:25 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexing nested comments
> 
> Jim, first of all, thank you very much for the prompt reply. What you
> sent seems to do the trick quite nicely. I had tried listing BOOL
> first,
> but, for whatever reason, NESTED still seems to take precedence.
> 
> You are right, the source language in question is not something I would
> recommend programming in. What I sent was a simplification of a
> pedagogical language I have designed call php-- that is essentially a
> subset (and much less powerful subset at that) of PHP. The idea is to
> add explicit types to an implicitly typed language and still let the
> explicitly typed version sneak through the original language's parser
> (so to have the new language remain essentially a subset). This way
> students can try out simple php-- programs using command-line php. (The
> same idea can be applied to most any language that has multiline
> comments.) Of course, the nested comment ability is not strictly
> necessary - but as a pedagogical language it demonstrates to
> introductory compilers students some of the lexical-analysis challenges
> that compiler writers have historically faced.

Ah OK - I see the point of it now :-)

Jim




From simucal at gmail.com  Wed Feb 10 12:37:14 2010
From: simucal at gmail.com (Matthew McDole)
Date: Wed, 10 Feb 2010 14:37:14 -0600
Subject: [antlr-interest] How can I modify the text of certain tokens in a
	CommonTokenStream?
Message-ID: <ee9962811002101237i386b1e29g7161579549b1fbbf@mail.gmail.com>

Hello Everyone!

I'm new to ANTLR but I'm trying to learn some of the basics and use it
in a project for school.  I've downloaded the java.g grammar,
generated the lexer and now I'm using the lexer in program.

This is all working fine, however, I'm trying to figure out a way I
can modify the text of certain tokens in my CommonTokenStream.

For example, I tried:

import org.antlr.runtime.*;
import java.util.*;

public class LexerTest
{
    public static final int IDENTIFIER_TYPE = 4;

    public static void main(String[] args)
    {
    String input = "public static void main(String[] args) { int myVar = 0; }";
    CharStream cs = new ANTLRStringStream(input);


        JavaLexer lexer = new JavaLexer(cs);
        CommonTokenStream tokens = new CommonTokenStream();
        tokens.setTokenSource(lexer);

        int size = tokens.size();
        for(int i = 0; i < size; i++)
        {
            Token token = (Token) tokens.get(i);
            if(token.getType() == IDENTIFIER_TYPE)
            {
                token.setText("V");
            }
        }
        System.out.println(tokens.toString());
    }
}


My goal is to set the text of each token which is of type "4"
(Identifier), to the string literal "V".  However, my changes to the
token stream via setText() are not preserved.  When I call
tokens.toString(), the text remains what it previously was.  I assume
this is because I'm calling setText() on a copy of the tokens, and not
the tokens themselves.

One thing that is important to me, is I want the tokens start and end
character positions to be reflective of the original source text, not
what they would be after I modified them by changing all identifier
tokens text to "V".  This is why I thought doing it at run-time made
sense, rather than try and do it via the grammar.

What is the solution to doing something like this the proper way?

From antlr at mirality.co.nz  Wed Feb 10 12:20:14 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 11 Feb 2010 09:20:14 +1300
Subject: [antlr-interest] Lexing nested comments
In-Reply-To: <4B730A74.9000906@gmail.com>
References: <4B730A74.9000906@gmail.com>
Message-ID: <20100210204328.BAB0C34184FE@www.antlr.org>

At 08:35 11/02/2010, Michael Siff wrote:
 > NESTED : '/*' (NESTED | .)* '*/' { $channel = HIDDEN } ;
 >
 >However, the language in question has the need to consider 
tokens
 >like:
 >
 > /*:bool:*/
 >
 >as a way of specifying explicit type information. Currently, 
what I
 >have gets the nested comments correctly, but then ignores the
 >/*:bool:*/ as if it is a comment even though I have a separate
 >rule like:
 >
 >  BOOL : '/*:bool:*/' ;
 >
 >Is there an easy way around this problem?

First, ensure your BOOL rule is listed before your NESTED 
rule.  In case of doubt, ANTLR will give preference to the first 
listed rule, so this may be enough by itself to get the behaviour 
you want.

Failing that, usually the solution to this sort of thing is to be 
a bit more explicit about what you're expecting a comment to look 
like; for example, if you want to treat anything of the form 
/*:xxxx:*/ as a processing instruction rather than a comment, you 
can do this:

fragment PROC_INSTR: '/*:...:*/';
fragment NESTED: '/*' (NESTED | .)* '*/';
COMMENT: '/*' ( (':') => ':' .* ':*/' { $type = PROC_INSTR; }
               | (NESTED | .)* '*/'
               ;
(Some refinement may be needed to handle error cases such as 
/*:foo*/.)


From ron.hunter-duvar at oracle.com  Wed Feb 10 12:42:48 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Wed, 10 Feb 2010 13:42:48 -0700
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
 triggers endless loop
In-Reply-To: <56eef1980d91214fa8a8ec59e39c01a0@temporal-wave.com>
References: <56eef1980d91214fa8a8ec59e39c01a0@temporal-wave.com>
Message-ID: <4B731A48.2090702@oracle.com>

Jim,

I showed exactly which code causes the endless loop. It's not generated 
code, and there's nothing to prove. Look at line 99 of 
org.antlr.runtime.Lexer.java (in the 3.2 code), near the end of the 
nextToken() method, the second catch clause. It catches the 
RecognitionException, does nothing but report the error, then it loops 
around and tries the match at the same point in the input. Every 
RecognitionException in any Java lexer which is not caught and handled 
by custom code will trigger an endless loop. This is a bug in the Antlr 
Java run-time code.

I proved this is the problem by adding a "recover(re);" call at that 
point in the Lexer.nextToken() method, which stopped the endless 
looping, allowing the parse to continue and then report failure due to 
the errors encountered. I can provide a patch file for the fix if you 
would like. And perhaps there's a better channel for making Antlr bug 
reports than this mailing list, but if so, I'm not sure what it is.

(And I don't want to get into a flame war here, but I have an M.Sc.(CS), 
I know what the Halting Problem is, I know how to prove that it can't be 
solved, and I also know that it has nothing to do with this discussion. 
I also have more than 20 years programming experience, much of this with 
parsing and language analysis tools. I'm relatively new to Antlr 3, but 
please don't treat me like an idiot, I do know what I'm doing.)

Ron


Jim Idle wrote:
> No it should not generate code like that if can avoid it, but it is difficult to detect that that is what will happen. How would you go about proving that the code will be an endless loop? http://en.wikipedia.org/wiki/Halting_problem 
>  
> Instead, the failed predicate exception at runtime shows that it must be your predicate that is going awry.
>  
> Jim
>  
> From: Ron Hunter-Duvar [mailto:ron.hunter-duvar at oracle.com] 
> Sent: Wednesday, February 10, 2010 11:53 AM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer triggers endless loop
>  
> Yes, you're right that I didn't have the predicate coded properly in the rule. I haven't seen this limitation mentioned, but it seems that gated semantic predicates within subrules don't work in lexers, only in parsers. That is, they don't just turn off that subrule and make everything else still match. When I moved the predicate to the start of the lexer rule and made it a gated semantic predicate, it did what I wanted.
>
> But that's not an excuse for Antlr going into an endless loop (it's not my code that's looping, it's the Antlr run-time code itself that does the loop). Surely you're not going to tell me that this is correct run-time behaviour, that Antlr is supposed to go into an endless loop if I code a semantic predicate wrong?
>
> Ron
>
>
> Jim Idle wrote: 
> This just means that you haven't covered the predicated cases correctly. In general it means that you needed a gated predicate , not a simple ? predicate. Post the code for further help.
>  
> Basically your lexer should not throw any exceptions or reach unrecognizable input.
>  
> Jim
>  
>  
>   
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
> Sent: Wednesday, February 10, 2010 11:25 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
> triggers endless loop
>  
> Hi,
>  
> I've run into something that is definitely a bug in Antlr's lexer code:
> if a semantic predicate fails within a lexer rule, it triggers an
> endless loop. The problem is in the Lexer.nextToken() method:
>  
>     public Token nextToken() {
>         while (true) {
>             state.token = null;
>             state.channel = Token.DEFAULT_CHANNEL;
>             state.tokenStartCharIndex = input.index();
>             state.tokenStartCharPositionInLine =
> input.getCharPositionInLine();
>             state.tokenStartLine = input.getLine();
>             state.text = null;
>             if ( input.LA(1)==CharStream.EOF ) {
>                 return Token.EOF_TOKEN;
>             }
>             try {
>                 mTokens();
>                 if ( state.token==null ) {
>                     emit();
>                 }
>                 else if ( state.token==Token.SKIP_TOKEN ) {
>                     continue;
>                 }
>                 return state.token;
>             }
>             catch (NoViableAltException nva) {
>                 reportError(nva);
>                 recover(nva); // throw out current char and try again
>             }
>             catch (RecognitionException re) {
>                 reportError(re);
>                 // match() routine has already called recover()
>             }
>         }
>     }
>  
> If a NoViableAltException is thrown, the recover method is called,
> which
> consumes one character and continues. But when a semantic predicate
> fails, it throws a FailedPredicateException, which is a subclass  of
> RecognitionException. As you can see in the code above, the exception
> is
> caught and reported, but it then loops around and tries matching again
> at the same point in the input, resulting in the same exception. Here's
> a sample of Antlr's output messages:
>  
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> ...
>  
> I was able to work around this easily because I already had a custom
> lexer superclass, so I just pasted in that nextToken() code and added a
> "recover(re);" call to the second catch.
>  
> Ron
>  
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>  
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
>  
>  
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address
>     
>  
>  
>  
>  
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>  
>   
>
>
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From jimi at temporal-wave.com  Wed Feb 10 12:57:38 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Feb 2010 12:57:38 -0800
Subject: [antlr-interest] How can I modify the text of certain tokens in
	a CommonTokenStream?
In-Reply-To: <ee9962811002101237i386b1e29g7161579549b1fbbf@mail.gmail.com>
Message-ID: <22f4e9f0785be240bbe45c1784b0825d@temporal-wave.com>

Embed code in the lexer rules directly. However I think that what is happening here is that the toString is probably just a substring of the original input text and not the amalgamation of the token texts. Rather than toString() you might just sout() the token text as you go and if type 4 just sout("V") instead.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Matthew McDole
> Sent: Wednesday, February 10, 2010 12:37 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] How can I modify the text of certain tokens
> in a CommonTokenStream?
> 
> Hello Everyone!
> 
> I'm new to ANTLR but I'm trying to learn some of the basics and use it
> in a project for school.  I've downloaded the java.g grammar,
> generated the lexer and now I'm using the lexer in program.
> 
> This is all working fine, however, I'm trying to figure out a way I
> can modify the text of certain tokens in my CommonTokenStream.
> 
> For example, I tried:
> 
> import org.antlr.runtime.*;
> import java.util.*;
> 
> public class LexerTest
> {
>     public static final int IDENTIFIER_TYPE = 4;
> 
>     public static void main(String[] args)
>     {
>     String input = "public static void main(String[] args) { int myVar
> = 0; }";
>     CharStream cs = new ANTLRStringStream(input);
> 
> 
>         JavaLexer lexer = new JavaLexer(cs);
>         CommonTokenStream tokens = new CommonTokenStream();
>         tokens.setTokenSource(lexer);
> 
>         int size = tokens.size();
>         for(int i = 0; i < size; i++)
>         {
>             Token token = (Token) tokens.get(i);
>             if(token.getType() == IDENTIFIER_TYPE)
>             {
>                 token.setText("V");
>             }
>         }
>         System.out.println(tokens.toString());
>     }
> }
> 
> 
> My goal is to set the text of each token which is of type "4"
> (Identifier), to the string literal "V".  However, my changes to the
> token stream via setText() are not preserved.  When I call
> tokens.toString(), the text remains what it previously was.  I assume
> this is because I'm calling setText() on a copy of the tokens, and not
> the tokens themselves.
> 
> One thing that is important to me, is I want the tokens start and end
> character positions to be reflective of the original source text, not
> what they would be after I modified them by changing all identifier
> tokens text to "V".  This is why I thought doing it at run-time made
> sense, rather than try and do it via the grammar.
> 
> What is the solution to doing something like this the proper way?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From siff.michael at gmail.com  Wed Feb 10 13:16:21 2010
From: siff.michael at gmail.com (Michael Siff)
Date: Wed, 10 Feb 2010 16:16:21 -0500
Subject: [antlr-interest] Lexing nested comments
In-Reply-To: <6610f5305daf5c4d855a3fedad7f6a2e@temporal-wave.com>
References: <6610f5305daf5c4d855a3fedad7f6a2e@temporal-wave.com>
Message-ID: <4B732225.9000905@gmail.com>

Thanks again, Jim and Gavin for your very helpful responses.

Unfortunately, there's one more twist which I did not explain because I
had not realized it was part of the problem. To explain in more detail,
I do want nested multiline comments of the form /* ... */ as
mentioned. But the competing non-comment tokens are not really:

  /*:bool:*/

but instead,

  /*:bool

and then, later a TYPE_END token which is ':*/'

the reason for this is the language uses comment-like syntax to specify
explicit types which can actually be recursively constructed to allow
for arrays and even multidimensional arrays. So a syntactically valid
assignment might be:

  /*:bool[]:*/ $a = $c ;

which should produce tokens:
  BOOL [ ] TYPE_END ID = ID ;

the problem with the solutions that Jim and Gavin have just proposed is
that it now gives me just:

  BOOL ID = ID ;

because it matches the entire bool to the closing */ as part of the
multiline-comment rule. Here is what I am using (based on what Jim
sent):

  fragment BOOL :  ;
  TYPE_END : ':*/' ;
  MULTILINE_COMMENT : '/*'
    ( options {greedy=false;} :
       (':bool')=> ':bool' { $type = BOOL; }
    | ('/*')=> MULTILINE_COMMENT { $channel = HIDDEN; }
    | .
    )*
    '*/'
    ;

Any further suggestions for how to properly scan /*:bool[]:*/?

Thanks!

- Michael


On 2/10/10 3:27 PM, Jim Idle wrote:
> 
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Michael Siff
>> Sent: Wednesday, February 10, 2010 12:25 PM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Lexing nested comments
>>
>> Jim, first of all, thank you very much for the prompt reply. What you
>> sent seems to do the trick quite nicely. I had tried listing BOOL
>> first,
>> but, for whatever reason, NESTED still seems to take precedence.
>>
>> You are right, the source language in question is not something I would
>> recommend programming in. What I sent was a simplification of a
>> pedagogical language I have designed call php-- that is essentially a
>> subset (and much less powerful subset at that) of PHP. The idea is to
>> add explicit types to an implicitly typed language and still let the
>> explicitly typed version sneak through the original language's parser
>> (so to have the new language remain essentially a subset). This way
>> students can try out simple php-- programs using command-line php. (The
>> same idea can be applied to most any language that has multiline
>> comments.) Of course, the nested comment ability is not strictly
>> necessary - but as a pedagogical language it demonstrates to
>> introductory compilers students some of the lexical-analysis challenges
>> that compiler writers have historically faced.
> 
> Ah OK - I see the point of it now :-)
> 
> Jim
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From ron.hunter-duvar at oracle.com  Wed Feb 10 14:55:05 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Wed, 10 Feb 2010 15:55:05 -0700
Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
 triggers endless loop
In-Reply-To: <56eef1980d91214fa8a8ec59e39c01a0@temporal-wave.com>
References: <56eef1980d91214fa8a8ec59e39c01a0@temporal-wave.com>
Message-ID: <4B733949.2010709@oracle.com>

As further proof, here's a trivial lexer grammar that demonstrates the 
problem. Generate and run this with Antlr 3.2 and it will go into an 
endless loop.

Ron


Jim Idle wrote:
> No it should not generate code like that if can avoid it, but it is difficult to detect that that is what will happen. How would you go about proving that the code will be an endless loop? http://en.wikipedia.org/wiki/Halting_problem 
>  
> Instead, the failed predicate exception at runtime shows that it must be your predicate that is going awry.
>  
> Jim
>  
> From: Ron Hunter-Duvar [mailto:ron.hunter-duvar at oracle.com] 
> Sent: Wednesday, February 10, 2010 11:53 AM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer triggers endless loop
>  
> Yes, you're right that I didn't have the predicate coded properly in the rule. I haven't seen this limitation mentioned, but it seems that gated semantic predicates within subrules don't work in lexers, only in parsers. That is, they don't just turn off that subrule and make everything else still match. When I moved the predicate to the start of the lexer rule and made it a gated semantic predicate, it did what I wanted.
>
> But that's not an excuse for Antlr going into an endless loop (it's not my code that's looping, it's the Antlr run-time code itself that does the loop). Surely you're not going to tell me that this is correct run-time behaviour, that Antlr is supposed to go into an endless loop if I code a semantic predicate wrong?
>
> Ron
>
>
> Jim Idle wrote: 
> This just means that you haven't covered the predicated cases correctly. In general it means that you needed a gated predicate , not a simple ? predicate. Post the code for further help.
>  
> Basically your lexer should not throw any exceptions or reach unrecognizable input.
>  
> Jim
>  
>  
>   
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
> Sent: Wednesday, February 10, 2010 11:25 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Antlr Bug: Failed semantic predicate in lexer
> triggers endless loop
>  
> Hi,
>  
> I've run into something that is definitely a bug in Antlr's lexer code:
> if a semantic predicate fails within a lexer rule, it triggers an
> endless loop. The problem is in the Lexer.nextToken() method:
>  
>     public Token nextToken() {
>         while (true) {
>             state.token = null;
>             state.channel = Token.DEFAULT_CHANNEL;
>             state.tokenStartCharIndex = input.index();
>             state.tokenStartCharPositionInLine =
> input.getCharPositionInLine();
>             state.tokenStartLine = input.getLine();
>             state.text = null;
>             if ( input.LA(1)==CharStream.EOF ) {
>                 return Token.EOF_TOKEN;
>             }
>             try {
>                 mTokens();
>                 if ( state.token==null ) {
>                     emit();
>                 }
>                 else if ( state.token==Token.SKIP_TOKEN ) {
>                     continue;
>                 }
>                 return state.token;
>             }
>             catch (NoViableAltException nva) {
>                 reportError(nva);
>                 recover(nva); // throw out current char and try again
>             }
>             catch (RecognitionException re) {
>                 reportError(re);
>                 // match() routine has already called recover()
>             }
>         }
>     }
>  
> If a NoViableAltException is thrown, the recover method is called,
> which
> consumes one character and continues. But when a semantic predicate
> fails, it throws a FailedPredicateException, which is a subclass  of
> RecognitionException. As you can see in the code above, the exception
> is
> caught and reported, but it then loops around and tries matching again
> at the same point in the input, resulting in the same exception. Here's
> a sample of Antlr's output messages:
>  
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> line 1:21 rule FLOAT failed predicate: { notIntFollowedByRangeOp() }?
> ...
>  
> I was able to work around this easily because I already had a custom
> lexer superclass, so I just pasted in that nextToken() code and added a
> "recover(re);" call to the second catch.
>  
> Ron
>  
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>  
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
>  
>  
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address
>     
>  
>  
>  
>  
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>  
>   
>
>
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: Test2.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20100210/d84f1c78/attachment.pl 

From gokul007 at gmail.com  Wed Feb 10 15:07:49 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Thu, 11 Feb 2010 04:37:49 +0530
Subject: [antlr-interest] setting k Value Versus Predicates
Message-ID: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>

Hi,
     I observed the code generated for antlr parser and understood this.
a) If i have set k = n, ANTLR keeps trying to resolve the grammar by reading
further tokens(max n tokens), if there is an ambiguity
b) Once it has read n tokens, then it tries the syntactic or(and) semantic
predicates and chooses the first alternative that satisfies the predicate.
This is implemented with if- condition, whereas the resolving of n-tokens,
happen through switch-case.

Now if i have a grammar(say with k=2) and the only way i can convert it into
k=1 is by using predicates, i think i am better off staying with a higher
value of k. In any case converting my grammar would produce x ambiguity
warnings in y rules. We can be sure that (x >= y). So even in the best case
of x=y ( i.e. each rule produces one ambiguity while converting to lower k
and each one can be resolved by one if-condition), i am just replacing
switch..case by if..condition.

So i feel it is better off to stay with a higher value of k, than to resolve
by predicates. Can i safely make this assumption?

Thanks,
Gokul.

From cdellima at paragenic.org  Wed Feb 10 20:05:28 2010
From: cdellima at paragenic.org (cdellima at paragenic.org)
Date: Wed, 10 Feb 2010 23:05:28 -0500
Subject: [antlr-interest] Newbie, rapidly losing mind
Message-ID: <d42b9b8121fdff6b5661d87557d41f06.squirrel@www.paragenic.org>


Hi, I am relatively new to ANTLR but I have to make a custom-built grammar
file for the Java language. I am having trouble with a rule for which I
get a

rule arrayInstantiation has non-LL(*) decision due to recursive rule
invocations reachable from alts 1,2.  Resolve by left-factoring or using
syntactic predicates or using backtrack=true option.

To identify the cause of the trouble, I am taking the approach of removing
things from my grammar until the thing compiles again. Problem is, I've
got it to compile but I've removed a rule that wasn't actually invoked in
another rule. I do not understand this. Should I be surprised? If I
comment this rule out, my grammar builds. But if I leave the rule (that
isn't invoked anywhere and should be impossible to reach) uncommented then
my build fails.







From jbb at acm.org  Wed Feb 10 20:15:16 2010
From: jbb at acm.org (John B. Brodie)
Date: Wed, 10 Feb 2010 23:15:16 -0500
Subject: [antlr-interest] Newbie, rapidly losing mind
In-Reply-To: <d42b9b8121fdff6b5661d87557d41f06.squirrel@www.paragenic.org>
References: <d42b9b8121fdff6b5661d87557d41f06.squirrel@www.paragenic.org>
Message-ID: <1265861716.9201.1.camel@gecko.home.org>

Greetings!

On Wed, 2010-02-10 at 23:05 -0500, cdellima at paragenic.org wrote:
> Hi, I am relatively new to ANTLR but I have to make a custom-built grammar
> file for the Java language. I am having trouble with a rule for which I
> get a
> 
> rule arrayInstantiation has non-LL(*) decision due to recursive rule
> invocations reachable from alts 1,2.  Resolve by left-factoring or using
> syntactic predicates or using backtrack=true option.
> 
> To identify the cause of the trouble, I am taking the approach of removing
> things from my grammar until the thing compiles again. Problem is, I've
> got it to compile but I've removed a rule that wasn't actually invoked in
> another rule. I do not understand this. Should I be surprised? If I
> comment this rule out, my grammar builds. But if I leave the rule (that
> isn't invoked anywhere and should be impossible to reach) uncommented then
> my build fails.
> 

Seems very odd.

Please post the *SMALLEST* sample grammar that contains your problem so
that we can try to analyze the cause.



From simucal at gmail.com  Wed Feb 10 22:16:34 2010
From: simucal at gmail.com (Matthew McDole)
Date: Thu, 11 Feb 2010 00:16:34 -0600
Subject: [antlr-interest] How can I modify the text of certain tokens in
	a CommonTokenStream?
In-Reply-To: <ee9962811002101237i386b1e29g7161579549b1fbbf@mail.gmail.com>
References: <ee9962811002101237i386b1e29g7161579549b1fbbf@mail.gmail.com>
Message-ID: <ee9962811002102216p576fe4b8mbb6038d894f4cf71@mail.gmail.com>

So, I should attempt to set the tokens text in the IDENTIFIER
definition in java.g?

I tried something like this:

IDENTIFIER
    :   IdentifierStart IdentifierPart*
    {
        $setText("V");
    }
    ;

Which gave me: Java.g:1813:5: attribute is not a token, parameter, or
return value: setText

Is IDENTIFIER not a token?

What am I doing wrong in this case?

From lgcraymer at yahoo.com  Wed Feb 10 22:24:18 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 10 Feb 2010 22:24:18 -0800 (PST)
Subject: [antlr-interest] Newbie, rapidly losing mind
In-Reply-To: <d42b9b8121fdff6b5661d87557d41f06.squirrel@www.paragenic.org>
References: <d42b9b8121fdff6b5661d87557d41f06.squirrel@www.paragenic.org>
Message-ID: <900472.40749.qm@web55905.mail.re3.yahoo.com>

Well, it is possible that there is an analysis bug, but it is more likely that the rule you deleted invoked other rules in a fashion that caused the ambiguity.  There is no such thing as a "non reachable" rule:  any rule could be an entry rule (that is, one invoked from target language code, not necessarily by any other rules in the grammar).

--Loring




----- Original Message ----
> From: "cdellima at paragenic.org" <cdellima at paragenic.org>
> To: antlr-interest at antlr.org
> Sent: Wed, February 10, 2010 8:05:28 PM
> Subject: [antlr-interest] Newbie, rapidly losing mind
> 
> 
> Hi, I am relatively new to ANTLR but I have to make a custom-built grammar
> file for the Java language. I am having trouble with a rule for which I
> get a
> 
> rule arrayInstantiation has non-LL(*) decision due to recursive rule
> invocations reachable from alts 1,2.  Resolve by left-factoring or using
> syntactic predicates or using backtrack=true option.
> 
> To identify the cause of the trouble, I am taking the approach of removing
> things from my grammar until the thing compiles again. Problem is, I've
> got it to compile but I've removed a rule that wasn't actually invoked in
> another rule. I do not understand this. Should I be surprised? If I
> comment this rule out, my grammar builds. But if I leave the rule (that
> isn't invoked anywhere and should be impossible to reach) uncommented then
> my build fails.
> 
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address



      


From simucal at gmail.com  Wed Feb 10 22:29:49 2010
From: simucal at gmail.com (Matthew McDole)
Date: Thu, 11 Feb 2010 00:29:49 -0600
Subject: [antlr-interest] ANTLRworks and backtrack?
Message-ID: <ee9962811002102229n527304acye357f461343aaab3@mail.gmail.com>

It took me a little bit to get the java.g to behave properly as well.

It isn't an issue with the grammar, but instead your settings.

Here is a detailed tutorial:
http://openjdk.java.net/projects/compiler-grammar/antlrworks/index.html

In any case, what you need to do is:

1) Select File->Preferences and then in ANTLR Options, add
-Xconversiontimeout 100000
2) When launching ANTLR works, launch it with more than the default
heap space by: java -Xmx512m -jar antlrworks-1.3.1.jar

Be sure to save, and close and then re-open after these 2 steps.

Now, when you go to generate code, it should do it without complaint.

-Matt

From j.pool at ision.nl  Wed Feb 10 22:49:29 2010
From: j.pool at ision.nl (John Pool)
Date: Wed, 10 Feb 2010 22:49:29 -0800 (PST)
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265450353027-4524691.post@n2.nabble.com>
References: <1265450353027-4524691.post@n2.nabble.com>
Message-ID: <1265870969340-4553093.post@n2.nabble.com>


I strongly advise you to purchase 'The Definitive ANTLR Reference'. C#
example below.

Cheers -- John Pool

  MyLexer lexer = new MyLexer (new ANTLRStringStream ("my code to parse")); 
  // ... or ANTLRFileStream ("my file to parse")
  CommonTokenStream cts = new CommonTokenStream (lexer);
  MyParser parser = new MyParser (cts);
  MyParser.member_return returnValue = parser.member(); // or whatever
'root' rule you want to parse
  tree = (CommonTree)returnValue.Tree;
  string treeAsString = tree.ToStringTree ();

  AntlrExceptions.CheckForErrors (); // my own error handling class ...
  // ... contains overridden versions of ReportError() for the parser, lexer
and treeparser

  // depending on whether you need a treeparser (AST parser):
  CommonTreeNodeStream treeNodeStream = new CommonTreeNodeStream (tree);
  JclTreeParser treeParser = new JclTreeParser (treeNodeStream);
  treeNodeStream.TokenStream = cts;

  AntlrExceptions.CheckForErrors ();



-- 
View this message in context: http://n2.nabble.com/Creating-AST-with-third-party-grammar-tp4524691p4553093.html
Sent from the ANTLR mailing list archive at Nabble.com.

From antlr at mirality.co.nz  Thu Feb 11 01:38:01 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 11 Feb 2010 22:38:01 +1300
Subject: [antlr-interest] How can I modify the text of certain tokens in
 a CommonTokenStream?
In-Reply-To: <ee9962811002102216p576fe4b8mbb6038d894f4cf71@mail.gmail.co
 m>
References: <ee9962811002101237i386b1e29g7161579549b1fbbf@mail.gmail.com>
	<ee9962811002102216p576fe4b8mbb6038d894f4cf71@mail.gmail.com>
Message-ID: <20100211093829.266C03418435@www.antlr.org>

At 19:16 11/02/2010, Matthew McDole wrote:
 >So, I should attempt to set the tokens text in the IDENTIFIER
 >definition in java.g?
 >
 >I tried something like this:
 >
 >IDENTIFIER
 >    :   IdentifierStart IdentifierPart*
 >    {
 >        $setText("V");
 >    }
 >    ;
 >
 >Which gave me: Java.g:1813:5: attribute is not a token, 
parameter,
 >or return value: setText
 >Is IDENTIFIER not a token?

$setText is an ANTLR v2-ism.  If you're using v3, you want 
setText.  (No $.)


From fab.antoine at gmail.com  Thu Feb 11 04:36:20 2010
From: fab.antoine at gmail.com (Fabien Antoine)
Date: Thu, 11 Feb 2010 13:36:20 +0100
Subject: [antlr-interest]  Interpreter results misunderstanding...
Message-ID: <4B73F9C4.8060609@gmail.com>

Hi list,

I'm a new user of this great tool and I don't understand some things
with the interpreter...
I've the following grammar:

grammar Test;
options {
    backtrack    = true;
    memoize        = true;
}

testOK
    :    ID
    |    INT
    ;

testKO
    :    testID
    |    testINT
    ;    
testID
    :    ID
    ;    
testINT
    :    INT
    ;

ID  :    ('a'..'z'|'A'..'Z')+
    ;    
INT :    ('0'..'9')+
    ;


And then when I write the text "test" in the interpreter it works fine
with "testOK" and I get a FailedPredicateException exception with "testKO".
There are some explanations to this feature because for me it should be
the same thing?

Thanks for your answers!!

Fabien

From lepilache at hotmail.com  Thu Feb 11 05:48:48 2010
From: lepilache at hotmail.com (Damien Urruty)
Date: Thu, 11 Feb 2010 13:48:48 +0000
Subject: [antlr-interest] Multiple outputs ANTLR + ST
Message-ID: <BLU139-W359DBE4ABFB4F6BEC83E76BC4E0@phx.gbl>







Hi there,

First of all, thanks a lot for this brilliant tool ! I have a problem, and I don't know how to solve it.

I want to generate multiple output files, for example a .h and a .m for Objective-C. The point is that I can bind only one template to my parser, with :

parser.setTemplateLib(tmpl);

when I call parser.entryRule(), then the toString(), I can get only the generated code for this template tmpl.

Is it possible to bind multiple templates, and parse once my input, or do I have to parse it 2 times, assigning a different template each time ?

Hope I'm clear.

Thanks in advance !

Dam.
 		 	   		  
_________________________________________________________________
Discutez en direct avec vos amis sur Messenger !
http://www.windowslive.fr/messenger

From fridi70 at gmx.de  Thu Feb 11 10:53:22 2010
From: fridi70 at gmx.de (fridi)
Date: Thu, 11 Feb 2010 19:53:22 +0100
Subject: [antlr-interest] Predicate and problem with generated code
Message-ID: <4B745222.4090106@gmx.de>

Hi,

i have  a parser rule for an if-else

rule
  :
  IF^ expression 'then'! actionSequence ('else'! actionSequence)? 'endif'!
  ;

The treewalker rule is

ifElse
  :
  ^(
    IF b=expression
    (
      {b}?=> actionSequence .
      | . actionSequence
    )
   )
  ;

The problem now is that the generated code for DFA1 and there the method 
specialStateTransition() does not know about my variable b
Any ideas?

Thanks in advance,
 fridi

From rus-reg at yandex.ru  Thu Feb 11 11:12:46 2010
From: rus-reg at yandex.ru (tahiti)
Date: Thu, 11 Feb 2010 11:12:46 -0800 (PST)
Subject: [antlr-interest] Creating AST with third party grammar
In-Reply-To: <1265870969340-4553093.post@n2.nabble.com>
References: <1265450353027-4524691.post@n2.nabble.com>
	<1265870969340-4553093.post@n2.nabble.com>
Message-ID: <1265915566816-4556750.post@n2.nabble.com>


Ok, I'll try to undestand ANTLR more deeply. I thought that it is enouth to
get the ready grammar to implement the simple editor, but it is more
difficult and without learning NFW


-- 
View this message in context: http://n2.nabble.com/Creating-AST-with-third-party-grammar-tp4524691p4556750.html
Sent from the ANTLR mailing list archive at Nabble.com.

From fridi70 at gmx.de  Thu Feb 11 12:35:05 2010
From: fridi70 at gmx.de (fridi)
Date: Thu, 11 Feb 2010 21:35:05 +0100
Subject: [antlr-interest] Predicate and problem with generated code
In-Reply-To: <4B745222.4090106@gmx.de>
References: <4B745222.4090106@gmx.de>
Message-ID: <4B7469F9.2010001@gmx.de>

Ok, I fixed the problem, my "b" was out of scope in that class and I 
fixed it using a member.
But I still have a problem if the else-part is missing...


fridi schrieb:
> Hi,
>
> i have  a parser rule for an if-else
>
> rule
>   :
>   IF^ expression 'then'! actionSequence ('else'! actionSequence)? 'endif'!
>   ;
>
> The treewalker rule is
>
> ifElse
>   :
>   ^(
>     IF b=expression
>     (
>       {b}?=> actionSequence .
>       | . actionSequence
>     )
>    )
>   ;
>
> The problem now is that the generated code for DFA1 and there the method 
> specialStateTransition() does not know about my variable b
> Any ideas?
>
> Thanks in advance,
>  fridi
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   


From taha_hasan at hotmail.com  Thu Feb 11 16:23:35 2010
From: taha_hasan at hotmail.com (taha hasan)
Date: Fri, 12 Feb 2010 05:23:35 +0500
Subject: [antlr-interest] Help ! .Lexical analyzer
Message-ID: <BAY118-W48A051C0FB09A3C5432E42F94D0@phx.gbl>


Hello,I wanted to build the lexical analyzer for my compiler class.I
want the Compiler as a whole to translate the  source C# language to
C++ target language .But i wanted to do the lexical part first. I wanted
to print the tokens of C# first. I have set up the ANTLR plugin on java
Eclipse by following the video feed provided on some site by Scott
Stanchfield.Would ANTLR plugin on Eclipse help me in building what i
want to do ?! 

Hope you would reply.
Thanking you in anticipation !  		 	   		  
_________________________________________________________________
Your E-mail and More On-the-Go. Get Windows Live Hotmail Free.
https://signup.live.com/signup.aspx?id=60969

From mike at omnicorp.org  Thu Feb 11 21:13:13 2010
From: mike at omnicorp.org (Michael Moore)
Date: Fri, 12 Feb 2010 16:13:13 +1100
Subject: [antlr-interest] Complex rules?
Message-ID: <008f01caaba2$15cf9de0$416ed9a0$@org>

Hi guys,

 

This is probably a bit of a newbie question, but I'm trying to write a rule
that basically says "match any 'foo' that also does not match any 'bar'"
where 'foo' is a basic rule (matches all letters and numbers) and 'bar' is a
list of keywords. Is there a way to produce this kind of logic in ANTLR or
does the logic need to be approached from a different direction to solve
this one?

 

Thanks,

Mike


From fridi70 at gmx.de  Thu Feb 11 23:49:35 2010
From: fridi70 at gmx.de (fridi)
Date: Fri, 12 Feb 2010 08:49:35 +0100
Subject: [antlr-interest] Multiple outputs ANTLR + ST
In-Reply-To: <BLU139-W359DBE4ABFB4F6BEC83E76BC4E0@phx.gbl>
References: <BLU139-W359DBE4ABFB4F6BEC83E76BC4E0@phx.gbl>
Message-ID: <4B75080F.8060800@gmx.de>

Hi Dam,

one approach that I have used was to redirect the templates output by
my own java code that I added to the ruls as actions.
So if a rule returns a template, i.e. add that template to a list of
your choice.

@members {
ArrayList<StringTemplate> myTmpls = new ArrayList<StringTemplate>();
}
...


rule1
: f1=foo1 foo2 { myTmpls.add(f1.st); }
;

foo1
: i=IDENT -> foo1Tmpl({value=$i.text})
;

foo2
: ...

So I think you do not have to return the templates up to the
entryRule, you can do whatever you want with them.

Hope that helps,
fridi

Damien Urruty schrieb:
>
>
>
>
> Hi there,
>
> First of all, thanks a lot for this brilliant tool ! I have a problem, and I don't know how to solve it.
>
> I want to generate multiple output files, for example a .h and a .m for Objective-C. The point is that I can bind only one template to my parser, with :
>
> parser.setTemplateLib(tmpl);
>
> when I call parser.entryRule(), then the toString(), I can get only the generated code for this template tmpl.
>
> Is it possible to bind multiple templates, and parse once my input, or do I have to parse it 2 times, assigning a different template each time ?
>
> Hope I'm clear.
>
> Thanks in advance !
>
> Dam.
>  		 	   		  
> _________________________________________________________________
> Discutez en direct avec vos amis sur Messenger !
> http://www.windowslive.fr/messenger
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   


From joestelmach at gmail.com  Fri Feb 12 07:34:27 2010
From: joestelmach at gmail.com (joestelmach)
Date: Fri, 12 Feb 2010 07:34:27 -0800 (PST)
Subject: [antlr-interest] running gUnit tests with -debug generated parser
Message-ID: <1265988867942-4561697.post@n2.nabble.com>


If I generate my parser with the -debug option, gUnit tests will not run (the
process prints no information, and never returns.)  Running gUnit on the
same parser generated without the -debug option works just fine. 

Any ideas?
-- 
View this message in context: http://n2.nabble.com/running-gUnit-tests-with-debug-generated-parser-tp4561697p4561697.html
Sent from the ANTLR mailing list archive at Nabble.com.

From jimi at temporal-wave.com  Fri Feb 12 07:58:34 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 12 Feb 2010 07:58:34 -0800
Subject: [antlr-interest] running gUnit tests with -debug generated
	parser
In-Reply-To: <1265988867942-4561697.post@n2.nabble.com>
Message-ID: <7c357d024a1d1442a7826356635c3cf7@temporal-wave.com>

Read the docs on what the -debug option does.

It causes the generated code to listen on a TCP port until ANTLRWorks connects to it. Hence it hangs with gunit.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of joestelmach
> Sent: Friday, February 12, 2010 7:34 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] running gUnit tests with -debug generated
> parser
> 
> 
> If I generate my parser with the -debug option, gUnit tests will not
> run (the
> process prints no information, and never returns.)  Running gUnit on
> the
> same parser generated without the -debug option works just fine.
> 
> Any ideas?
> --
> View this message in context: http://n2.nabble.com/running-gUnit-tests-
> with-debug-generated-parser-tp4561697p4561697.html
> Sent from the ANTLR mailing list archive at Nabble.com.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From joestelmach at gmail.com  Fri Feb 12 08:14:47 2010
From: joestelmach at gmail.com (joestelmach)
Date: Fri, 12 Feb 2010 08:14:47 -0800 (PST)
Subject: [antlr-interest] running gUnit tests with -debug generated
	parser
In-Reply-To: <7c357d024a1d1442a7826356635c3cf7@temporal-wave.com>
References: <1265988867942-4561697.post@n2.nabble.com>
	<7c357d024a1d1442a7826356635c3cf7@temporal-wave.com>
Message-ID: <1265991287855-4561932.post@n2.nabble.com>


Jim - Thanks for the quick reply.  

The documentation that I found for the debug option (
http://www.antlr.org/wiki/display/ANTLR3/Command+line+options
http://www.antlr.org/wiki/display/ANTLR3/Command+line+options ) simply
states: "generate a parser that emits debugging events."

Using this option allowed me to write a custom DebugEventListener to gather
various information about the parse tree at key events during the parse.
This option also generates an additional parser constructor to accept such a
listener.  I'm able to execute this parser with my custom listener without
launching ANTLRworks.  Are we talking about two different options, or am I
just confused?

Where can I find the documentation you're referring to?
-- 
View this message in context: http://n2.nabble.com/running-gUnit-tests-with-debug-generated-parser-tp4561697p4561932.html
Sent from the ANTLR mailing list archive at Nabble.com.

From joestelmach at gmail.com  Fri Feb 12 10:02:40 2010
From: joestelmach at gmail.com (joestelmach)
Date: Fri, 12 Feb 2010 10:02:40 -0800 (PST)
Subject: [antlr-interest] running gUnit tests with -debug generated
	parser
In-Reply-To: <1265991287855-4561932.post@n2.nabble.com>
References: <1265988867942-4561697.post@n2.nabble.com>
	<7c357d024a1d1442a7826356635c3cf7@temporal-wave.com>
	<1265991287855-4561932.post@n2.nabble.com>
Message-ID: <1265997760341-4562600.post@n2.nabble.com>


Looking at the -debug generated parser, I'm able to see that when a parser is
constructed with just an input stream and no DebugEventListener, it exhibits
the behavior you described (by choosing the DebugEventListener explicitly as
a DebugEventSocketProxy.)

Am I out of luck if I want to use both the debug listener interface and
gUnit with the same generated parser?  Is there any way I can pass along an
instance of BlankDebugEventListener when gUnit creates the instance of my
parser (without modifying the gUnit code at all?)

Thanks again.
-- 
View this message in context: http://n2.nabble.com/running-gUnit-tests-with-debug-generated-parser-tp4561697p4562600.html
Sent from the ANTLR mailing list archive at Nabble.com.

From mike.matera at xilinx.com  Fri Feb 12 11:46:48 2010
From: mike.matera at xilinx.com (Michael Matera)
Date: Fri, 12 Feb 2010 11:46:48 -0800
Subject: [antlr-interest] Complex rules?
In-Reply-To: <008f01caaba2$15cf9de0$416ed9a0$@org>
References: <008f01caaba2$15cf9de0$416ed9a0$@org>
Message-ID: <e780a238-80b8-4860-913d-4be2738858c1@SG2EHSMHS005.ehs.local>

Hi Michael,

I have great news for you.  ANTLR does this for you.  Here's an example:

//
// Parser rules

statement: pos | neg ;

pos: ID 'is' ID ;

neg: 'not' ID ;

//
// Lexer rules

ID: ('A'..'Z' | 'a'..'z')+ ;

This example works because ANTLR tests tokens produced by ID against 
literal values used in the parser.  Try it out.

Cheers
./m

Michael Moore wrote:
> Hi guys,
> 
>  
> 
> This is probably a bit of a newbie question, but I'm trying to write a rule
> that basically says "match any 'foo' that also does not match any 'bar'"
> where 'foo' is a basic rule (matches all letters and numbers) and 'bar' is a
> list of keywords. Is there a way to produce this kind of logic in ANTLR or
> does the logic need to be approached from a different direction to solve
> this one?
> 
>  
> 
> Thanks,
> 
> Mike
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

This email and any attachments are intended for the sole use of the named recipient(s) and contain(s) confidential information that may be proprietary, privileged or copyrighted under applicable law. If you are not the intended recipient, do not read, copy, or forward this email message or any attachments. Delete this email message and any attachments immediately.



From lepilache at hotmail.com  Fri Feb 12 13:27:51 2010
From: lepilache at hotmail.com (Damien Urruty)
Date: Fri, 12 Feb 2010 21:27:51 +0000
Subject: [antlr-interest] Multiple outputs ANTLR + ST
In-Reply-To: <4B745E4A.2080107@gmx.de>
References: <BLU139-W359DBE4ABFB4F6BEC83E76BC4E0@phx.gbl>, <4B745E4A.2080107@gmx.de>
Message-ID: <BLU139-W18003CFF8F5D4A8A8F7532BC4D0@phx.gbl>


Hi Fridi, thanks for your answer,
With your solution, I don't see how i can differentiate the output : I want to save the function prototypes in a.h file, and the function bodies in a .m file. To do this, I parse my input, and I have a rule method for example : 
method : type name arguments body           ;
I have to call 2 different template functions, one that returns only the prototype, and the second one that returns the entire method. For example : 
methodHeaderFile(type, name, arguments, body) ::=<< <type> <name> <arguments; separator=" : "> >>methodMFile(type, name, arguments, body) ::=<< <type> <name> <arguments; separator=" : ">{   <body>}>>
And I don't see how to do it with your solution, because the same template is called (foo1Tmpl()), and will return always the same code. Anyway thanks for your answer !
Bye, Dam.

> Date: Thu, 11 Feb 2010 20:45:14 +0100
> From: fridi70 at gmx.de
> To: lepilache at hotmail.com
> Subject: Re: [antlr-interest] Multiple outputs ANTLR + ST
> 
> Hi Dam,
> 
> one approach that I have used was to redirect the templates output by
> my own java  code that I added to the ruls as actions.
> So if a rule returns a template, i.e. add that template to a list of
> your choice.
> 
> @members {
>     ArrayList<StringTemplate> myTmpls = new ArrayList<StringTemplate>();
> }
> ...
> 
> 
> rule1
>     : f1=foo1 foo2 { myTmpls.add(f1.st); }
>     ;
> 
> foo1
>     : i=IDENT -> foo1Tmpl({value=$i.text})
>     ;
> 
> foo2
>     : ...
> 
> So I think you do not have to return the templates up to the
> entryRule,  you can do whatever you  want with them.
> 
> Hope that helps,
>   fridi
> 
> 
> Damien Urruty schrieb:
> >
> >
> >
> > Hi there,
> >
> > First of all, thanks a lot for this brilliant tool ! I have a problem, and I don't know how to solve it.
> >
> > I want to generate multiple output files, for example a .h and a .m for Objective-C. The point is that I can bind only one template to my parser, with :
> >
> > parser.setTemplateLib(tmpl);
> >
> > when I call parser.entryRule(), then the toString(), I can get only the generated code for this template tmpl.
> >
> > Is it possible to bind multiple templates, and parse once my input, or do I have to parse it 2 times, assigning a different template each time ?
> >
> > Hope I'm clear.
> >
> > Thanks in advance !
> >
> > Dam.
> >  		 	   		  
> > _________________________________________________________________
> > Discutez en direct avec vos amis sur Messenger !
> > http://www.windowslive.fr/messenger
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> >   
> 
> 
 		 	   		  
_________________________________________________________________
D?couvrez Windows 7 en 7 secondes?!
http://clk.atdmt.com/FRM/go/181574577/direct/01/

From taha_hasan at hotmail.com  Fri Feb 12 15:26:04 2010
From: taha_hasan at hotmail.com (taha hasan)
Date: Sat, 13 Feb 2010 04:26:04 +0500
Subject: [antlr-interest] HELP !!!!
Message-ID: <BAY118-W9B48CF1B48384E0E12647F94D0@phx.gbl>


I can print out the tokens...like this...
        CharStream Stream =new ANTLRStringStream("once taha");
        SampleLexer lex=new SampleLexer(Stream);
         Token token;
          
            while ((token = (Token) lex.nextToken())!=Token.EOF_TOKEN)
            {
                
                if (token.getChannel()==0)
                {
                    System.out.println("Token: "+token.getText());
                    
                }
            }

Now i want to print the type of Tokens...
According to my grammer rules..
once taha are both part of identifier group of tokens named  "IDENT"...given by... IDENT :('a'..'z')*;

i WANT TO print like this :-

IDENT : once
IDENT : taha...

Plz help me on this one...

Thanking you in anticipation ! 
 		 	   		  
_________________________________________________________________
Hotmail: Powerful Free email with security by Microsoft.
https://signup.live.com/signup.aspx?id=60969

From victor.liu at gmail.com  Fri Feb 12 22:16:14 2010
From: victor.liu at gmail.com (Victor Liu)
Date: Fri, 12 Feb 2010 22:16:14 -0800
Subject: [antlr-interest] Inserting a literal token in an AST rewrite rule
Message-ID: <4B7643AE.7010108@gmail.com>

Hi,

I have an AST producing grammar with a desired rule like

expression_unary_minus
	:	'-' expression_power -> ^(TOK_TIMES '-1' expression_power)
	|	expression_power
	;

This doesn't work because apparently I can't just insert a literal token 
('-1') in the rewrite rule. How do I get the same effect? Also, is there 
a way to simplify the rule into a one-liner? Ideally I would not need 
the second line since I just need a rule like

expression_unary_minus
	:	'-'? expression_power
	;

but allowing a rewrite.

Thanks in advance,
Victor

From antlr at mirality.co.nz  Sat Feb 13 03:38:36 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sun, 14 Feb 2010 00:38:36 +1300
Subject: [antlr-interest] Inserting a literal token in an AST rewrite
 rule
In-Reply-To: <4B7643AE.7010108@gmail.com>
References: <4B7643AE.7010108@gmail.com>
Message-ID: <20100213113845.843D134183A5@www.antlr.org>

At 19:16 13/02/2010, Victor Liu wrote:
 >expression_unary_minus
 >	:	'-' expression_power -> ^(TOK_TIMES '-1' expression_power)
 >	|	expression_power
 >	;
 >
 >This doesn't work because apparently I can't just insert a 
literal
 >token ('-1') in the rewrite rule.

Actually you can -- but it has to be a *token*, not just a string. 
:)

  .... ^(TOK_TIMES INT["-1"] expression_power) ...

 >Also, is there a way to simplify the rule into a one-liner?

With the AST output you seem to want, I think you've already got 
it as simple as possible.


From antlr at mirality.co.nz  Sat Feb 13 03:40:13 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sun, 14 Feb 2010 00:40:13 +1300
Subject: [antlr-interest] HELP !!!!
In-Reply-To: <BAY118-W9B48CF1B48384E0E12647F94D0@phx.gbl>
References: <BAY118-W9B48CF1B48384E0E12647F94D0@phx.gbl>
Message-ID: <20100213114021.812CE34183A5@www.antlr.org>

At 12:26 13/02/2010, taha hasan wrote:
 >Now i want to print the type of Tokens...
[...]
 >IDENT : once
 >IDENT : taha...

Have a look in the generated code for something named similar to 
"TokenNames".


From rjack at elegancetech.com  Sat Feb 13 05:07:57 2010
From: rjack at elegancetech.com (Roger Jack)
Date: Sat, 13 Feb 2010 08:07:57 -0500
Subject: [antlr-interest] gUnit for CSharp
Message-ID: <4B76A42D.9060505@elegancetech.com>

Has anybody ported gUnit to C# so that it can be used with the CSharp 
target?

-- 
*Roger Jack*

<http://www.elegancetech.com>

From gokul007 at gmail.com  Sun Feb 14 01:59:23 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Sun, 14 Feb 2010 15:29:23 +0530
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
Message-ID: <9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>

Actually i intended to ask a question, whether there are any cases under
which i should prefer predicates than increasing the value of k. Is it a
very obvious one???

Gokul.

On Thu, Feb 11, 2010 at 4:37 AM, Gokulakannan Somasundaram <
gokul007 at gmail.com> wrote:

> Hi,
>      I observed the code generated for antlr parser and understood this.
> a) If i have set k = n, ANTLR keeps trying to resolve the grammar by
> reading further tokens(max n tokens), if there is an ambiguity
> b) Once it has read n tokens, then it tries the syntactic or(and) semantic
> predicates and chooses the first alternative that satisfies the predicate.
> This is implemented with if- condition, whereas the resolving of n-tokens,
> happen through switch-case.
>
> Now if i have a grammar(say with k=2) and the only way i can convert it
> into k=1 is by using predicates, i think i am better off staying with a
> higher value of k. In any case converting my grammar would produce x
> ambiguity warnings in y rules. We can be sure that (x >= y). So even in the
> best case of x=y ( i.e. each rule produces one ambiguity while converting to
> lower k and each one can be resolved by one if-condition), i am just
> replacing switch..case by if..condition.
>
> So i feel it is better off to stay with a higher value of k, than to
> resolve by predicates. Can i safely make this assumption?
>
> Thanks,
> Gokul.
>
>
>

From antlr at mirality.co.nz  Sun Feb 14 02:44:04 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sun, 14 Feb 2010 23:44:04 +1300
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.co
 m>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
Message-ID: <20100214104820.6F5DF34183F9@www.antlr.org>

At 22:59 14/02/2010, Gokulakannan Somasundaram wrote:
 >Actually i intended to ask a question, whether there are any
 >cases under which i should prefer predicates than increasing
 >the value of k. Is it a very obvious one???

Your analysis assumes that every rule must contain at least one 
ambiguity at k=1.  That is not the case.

If at k=2 you require no predicates, and at k=1 you only need a 
few, then k=1 is probably the better choice.  If at k=1 you 
require lots, then k=2 is probably the better choice.  It all 
depends on the language you are analysing and your specific rule 
layout (how well they are optimised).  Some languages are just 
inherently ambiguous and thus require larger values for k.

At the end of the day, though, it's all up to what the benchmarks 
say.


From lgcraymer at yahoo.com  Sun Feb 14 03:27:30 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 14 Feb 2010 03:27:30 -0800 (PST)
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <20100214104820.6F5DF34183F9@www.antlr.org>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
	<20100214104820.6F5DF34183F9@www.antlr.org>
Message-ID: <417838.1521.qm@web55905.mail.re3.yahoo.com>

Gavin--

Actually, ANTLR uses the minimum lookahead needed at each decision point so setting k=2 in your example is preferable to using predicates and setting k=1.

With ANTLR 3, the default is k='*' and it is best not to set k.  Syntactic predicates are still needed to disambiguate decisions with potentially infinite lookahead (usually due to recursion or looping).

--Loring



----- Original Message ----
> From: Gavin Lambert <antlr at mirality.co.nz>
> To: Gokulakannan Somasundaram <gokul007 at gmail.com>; antlr-interest at antlr.org
> Sent: Sun, February 14, 2010 2:44:04 AM
> Subject: Re: [antlr-interest] setting k Value Versus Predicates
> 
> At 22:59 14/02/2010, Gokulakannan Somasundaram wrote:
> >Actually i intended to ask a question, whether there are any
> >cases under which i should prefer predicates than increasing
> >the value of k. Is it a very obvious one???
> 
> Your analysis assumes that every rule must contain at least one 
> ambiguity at k=1.  That is not the case.
> 
> If at k=2 you require no predicates, and at k=1 you only need a 
> few, then k=1 is probably the better choice.  If at k=1 you 
> require lots, then k=2 is probably the better choice.  It all 
> depends on the language you are analysing and your specific rule 
> layout (how well they are optimised).  Some languages are just 
> inherently ambiguous and thus require larger values for k.
> 
> At the end of the day, though, it's all up to what the benchmarks 
> say.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address



      


From soren.andersen at gmail.com  Sun Feb 14 15:13:19 2010
From: soren.andersen at gmail.com (=?iso-8859-1?Q?S=F8ren_Andersen?=)
Date: Mon, 15 Feb 2010 00:13:19 +0100
Subject: [antlr-interest] Output graph of parse-tree - without ANTLRWorks?
Message-ID: <D95483EE-24FD-4A62-8242-6898A6A968F0@gmail.com>

Hi,

I've recently been playing with the java 1.6 grammar found on the ANTLR homepage, trying to modify it for my needs.
However, I've run into a problem with expressions of the type
foo.bar().baz
where my modified grammar cannot handle it, while the original can.

However, the complexity of the original makes it less than desirable to wade trough it, trying to figure out how to it parses the example above.

Normally, I'd just plug it into ANTLRWorks and see there, but it doesn't seem to work - ANTLRWorks produces a graph with "can't deal with predicates yet" in it, and I cannot remove the predicates as they make the grammar ambiguous.

Thus, the way I see it, my only option is to somehow output the parse-tree programatically.

I've already got a small script running that parses an external file, but it doesn't produce a parse tree, and I've been unable to find any code that does.

It's not necessary it be as nice as the ones in ANTLRWorks. Basically, if I can see which rules are invoked in a small example it'd be fine for my needs.

Thanks for you advice in advance!

Regards,

S?ren Andersen

From soren.andersen at gmail.com  Sun Feb 14 15:56:52 2010
From: soren.andersen at gmail.com (=?iso-8859-1?Q?S=F8ren_Andersen?=)
Date: Mon, 15 Feb 2010 00:56:52 +0100
Subject: [antlr-interest] The power of backtracking in ANTLR
Message-ID: <94060EB3-D493-40BE-BA85-261BAB36DCD2@gmail.com>

Does anyone have any detailed information on backtrack=true in ANTLR grammars?

I'm particularly interested in if it has some "magic" properties, other than merely allowing me to *not* refactor my grammar?
Asked another way - given a valid grammar using backtracking, can I *always* refactor it to no longer need backtracking, preserving the semantics and the fact that the grammar is LL(*)?
Or - can backtracking remove my grammar from LL(*)?

Hope my question is clear! (And not too stupid :)

Regards,

S?ren Andersen

From dan at fabulich.com  Sun Feb 14 16:02:34 2010
From: dan at fabulich.com (Dan Fabulich)
Date: Sun, 14 Feb 2010 16:02:34 -0800 (Pacific Standard Time)
Subject: [antlr-interest] Improving ANTLR DSL parse-error messages
Message-ID: <alpine.WNT.2.00.1002141601460.2788@danfabulich-e.rf.lan>


I'm working on a domain-specific language (DSL) for non-programmers. 
Non-programmers make a lot of grammar mistakes: they misspell keywords, they 
don't close parentheses, they don't terminate blocks, etc.

I'm handling RecognitionExceptions to try to improve error handling. But I'm 
finding it pretty hard to develop good error-handling code for my DSL.

At this point, I'm considering ways to simplify the language to make it easier 
for me to provide users with high-quality error messages, but I'm not really 
sure how to go about this. I think I want to reduce the ambiguity of errors 
somehow, but I'm not sure how to implement that idea in a grammar.

What techniques can I use to improve parse-error messages for my users?
(Alternately, can anyone point me to a good book or article on this topic?)

-Dan

From michael.bedward at gmail.com  Sun Feb 14 17:54:21 2010
From: michael.bedward at gmail.com (Michael Bedward)
Date: Mon, 15 Feb 2010 12:54:21 +1100
Subject: [antlr-interest] The power of backtracking in ANTLR
In-Reply-To: <94060EB3-D493-40BE-BA85-261BAB36DCD2@gmail.com>
References: <94060EB3-D493-40BE-BA85-261BAB36DCD2@gmail.com>
Message-ID: <e24c4c271002141754y6a5d45a5lf0f997c5e75c05e6@mail.gmail.com>

Hi S?ren,

The section on backtracking parsers in Ter's "Language Implementation
Patterns" book really helped me to understand this issue better:
http://www.pragprog.com/titles/tpdsl/language-implementation-patterns

Stealing a relevant example from the book involving C++ function
definitions and declarations...

void bar() {...} // a function definition
void bar();	// a function declaration (forward declaration)

"Because C++ function headers can be arbitrarily long, the
distinguishing token does not appear at a fixed lookahead position
from the left side of the statement. Consequently, Pattern 4, LL(k)
Recursive-Descent Parser, on page 59 is too weak to distinguish
function definitions from declarations using a natural grammar."

So, in this example you can't refactor the grammar to LL(k) but you
can have a simple, readable grammar for this part of the language if
you work with a back-tracking parser.

Hope this helps.

Michael

From michael.bedward at gmail.com  Sun Feb 14 18:09:18 2010
From: michael.bedward at gmail.com (Michael Bedward)
Date: Mon, 15 Feb 2010 13:09:18 +1100
Subject: [antlr-interest] Output graph of parse-tree - without
	ANTLRWorks?
In-Reply-To: <D95483EE-24FD-4A62-8242-6898A6A968F0@gmail.com>
References: <D95483EE-24FD-4A62-8242-6898A6A968F0@gmail.com>
Message-ID: <e24c4c271002141809s2352902aqebc0dbd6a74f0967@mail.gmail.com>

Hi S?ren,

Would this do it ?

MyParser parser = ...
MyParser.prog_return r = parser.prog();  // assuming start rule is 'prog'
System.out.println( r.toStringTree() );

Michael

From joestelmach at gmail.com  Sun Feb 14 18:58:23 2010
From: joestelmach at gmail.com (joestelmach)
Date: Sun, 14 Feb 2010 18:58:23 -0800 (PST)
Subject: [antlr-interest] Output graph of parse-tree - without
	ANTLRWorks?
In-Reply-To: <D95483EE-24FD-4A62-8242-6898A6A968F0@gmail.com>
References: <D95483EE-24FD-4A62-8242-6898A6A968F0@gmail.com>
Message-ID: <1266202703049-4572664.post@n2.nabble.com>


Hi S?ren,

I think this will help you:
http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760.  

If the default ParseTreeBuilder isn't exactly what you're looking for, then
you can just implement your own DebugEventListener:
http://www.antlr.org/api/Java/interfaceorg_1_1antlr_1_1runtime_1_1debug_1_1_debug_event_listener.html.

?- Joe
-- 
View this message in context: http://n2.nabble.com/Output-graph-of-parse-tree-without-ANTLRWorks-tp4572095p4572664.html
Sent from the ANTLR mailing list archive at Nabble.com.

From rcix2010 at gmail.com  Sun Feb 14 19:25:40 2010
From: rcix2010 at gmail.com (S E Hagar)
Date: Sun, 14 Feb 2010 20:25:40 -0700
Subject: [antlr-interest] ANTLR and Lua block comments
Message-ID: <5150cdae1002141925s25116641q9108a1f481f8827@mail.gmail.com>

Hello,

I am fairly new to ANTLR and ANTLRWorks, and i'm using it in conjunction
with some other tools to bring Lua (http://lua.org/) to the /NET Framework.
I have a grammar file working on all parts of the lua syntax (thanks mostly
to Nicolai Mainero, i am basing it off of the Lua grammar provided on this
site), except for two things: blockquotes and block comments. If you check
the end of the section at http://www.lua.org/manual/5.1/manual.html#2.1 , it
provides the rules for blockquotes and blockcomments. What i haven't figured
out is how to properly parse this, can anyone help me?

From gokul007 at gmail.com  Sun Feb 14 19:55:08 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 15 Feb 2010 09:25:08 +0530
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <417838.1521.qm@web55905.mail.re3.yahoo.com>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
	<20100214104820.6F5DF34183F9@www.antlr.org>
	<417838.1521.qm@web55905.mail.re3.yahoo.com>
Message-ID: <9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>

>
> With ANTLR 3, the default is k='*' and it is best not to set k.  Syntactic
> predicates are still needed to disambiguate decisions with potentially
> infinite lookahead (usually due to recursion or looping).
>
>
I can't understand the statement  "It is best not  to set k". Say there are
left factoring opportunities, which we won't come to know, unless it is
thrown as an error(after setting k)...

I think, you are assuming that the grammar cannot be left factored further.
Or are you saying there is no difference in performance between LL(*) and
LL(1)? Please clarify.

Thanks,
Gokul.

From lgcraymer at yahoo.com  Sun Feb 14 22:12:33 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 14 Feb 2010 22:12:33 -0800 (PST)
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
	<20100214104820.6F5DF34183F9@www.antlr.org>
	<417838.1521.qm@web55905.mail.re3.yahoo.com>
	<9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>
Message-ID: <936041.57065.qm@web55908.mail.re3.yahoo.com>

With token caching and optimal pattern matching, it should be possible to almost eliminate any performance differential.  Ter's current implementation does not do that--he generates DFAs that match tokens in order of appearance in the input stream--but the big wins from left factoring are to remove non-LL(*) decisions.  That said, refactoring to reduce the k values of decisions is good practice, so temporarily setting k for this purpose can be helpful--just don't expect much in the way of performance improvement.

--Loring


>
>From: Gokulakannan Somasundaram <gokul007 at gmail.com>
>To: Loring Craymer <lgcraymer at yahoo.com>
>Cc: Gavin Lambert <antlr at mirality.co.nz>; antlr-interest at antlr.org
>Sent: Sun, February 14, 2010 7:55:08 PM
>Subject: Re: [antlr-interest] setting k Value Versus Predicates
>
>
>
>
>>>>With ANTLR 3, the default is k='*' and it is best not to set k.  Syntactic predicates are still needed to disambiguate decisions with potentially infinite lookahead (usually due to recursion or looping).
>>
>>
>
>I can't understand the statement  "It is best not  to set k". Say there are left factoring opportunities, which we won't come to know, unless it is thrown as an error(after setting k)...
>
>I think, you are assuming that the grammar cannot be left factored further. Or are you saying there is no difference in performance between LL(*) and LL(1)? Please clarify.
>
>Thanks,
>Gokul.
>
>


      

From antlr at mirality.co.nz  Sun Feb 14 23:52:02 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 15 Feb 2010 20:52:02 +1300
Subject: [antlr-interest] The power of backtracking in ANTLR
In-Reply-To: <e24c4c271002141754y6a5d45a5lf0f997c5e75c05e6@mail.gmail.co
 m>
References: <94060EB3-D493-40BE-BA85-261BAB36DCD2@gmail.com>
	<e24c4c271002141754y6a5d45a5lf0f997c5e75c05e6@mail.gmail.com>
Message-ID: <20100215075216.7053F34183F9@www.antlr.org>

At 14:54 15/02/2010, Michael Bedward wrote:
 >So, in this example you can't refactor the grammar to LL(k) but
 >you can have a simple, readable grammar for this part of the
 >language if you work with a back-tracking parser.

Or you put in the appropriate look-ahead predicates yourself.

Basically all ANTLR's backtracking mode does is to insert 
lookahead predicates in every path and switch off ambiguity 
warnings.  Consequently, while it's often useful while 
experimenting, or with ridiculously ambiguous languages, it's 
usually better to keep backtracking off, refactor, and add 
predicates as needed.


From nazim_oztahtaci at hotmail.com  Mon Feb 15 00:22:47 2010
From: nazim_oztahtaci at hotmail.com (Nazim Oztahtaci)
Date: Mon, 15 Feb 2010 08:22:47 +0000
Subject: [antlr-interest] Number of children
Message-ID: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>


Hello,

I have written a grammar based on an example on the Net to parse an expression like (a OR B)AND(C OR D) to a tree like 
     AND 
OR       OR
A B       C D
It works fine but if expression has more then 2 children, like (A OR B OR C)AND(D OR E OR F)
Then it creates problem because it does something like
AND

D     OR
       E    F
I want it to be like

OR
D  E  F

In other words, a tree node might have capability to have more then 2 nodes as children. How can I set this? I work on C# but couldnt find any setter function in library.
Best regards,
Nazim
 		 	   		  
_________________________________________________________________
Yeni Windows 7: Size en uygun bilgisayar? bulun. Daha fazla bilgi edinin.
http://windows.microsoft.com/shop

From michael.bedward at gmail.com  Mon Feb 15 00:29:42 2010
From: michael.bedward at gmail.com (Michael Bedward)
Date: Mon, 15 Feb 2010 19:29:42 +1100
Subject: [antlr-interest] The power of backtracking in ANTLR
In-Reply-To: <423E3F95-E554-4EED-9DF8-75134489428D@gmail.com>
References: <94060EB3-D493-40BE-BA85-261BAB36DCD2@gmail.com>
	<e24c4c271002141754y6a5d45a5lf0f997c5e75c05e6@mail.gmail.com>
	<423E3F95-E554-4EED-9DF8-75134489428D@gmail.com>
Message-ID: <e24c4c271002150029y58094365u8dab384a227079d3@mail.gmail.com>

Hi S?ren,

> Though, perhaps it's the backtrack=true that makes it LL(*) rather than
> LL(k), which would make sense?

That's my understanding - yes.

Hi Gavin,

> Or you put in the appropriate look-ahead predicates yourself.

I deliberately didn't mention predicates :-)  Partly to just try to
answer the question that S?ren was asking, and partly, as a constant
beginner myself, I find that my grammars are much more readable and
maintainable without lots manually added predicates.

Michael

From nazim_oztahtaci at hotmail.com  Mon Feb 15 00:35:57 2010
From: nazim_oztahtaci at hotmail.com (Nazim Oztahtaci)
Date: Mon, 15 Feb 2010 08:35:57 +0000
Subject: [antlr-interest] Number of children
In-Reply-To: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>
References: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>
Message-ID: <SNT121-W44501F5C1F7D15BADF129B964A0@phx.gbl>


By the way, I have used the example in this one: 
http://www.andymcm.com/blog/2009/12/using-antlr-to-parse-boolean.html

I
 feel like I should set some rules regarding number of children nodes 
while Im creating the grammar.


> From: nazim_oztahtaci at hotmail.com
> To: antlr-interest at antlr.org
> Date: Mon, 15 Feb 2010 08:22:47 +0000
> Subject: [antlr-interest] Number of children
> 
> 
> Hello,
> 
> I have written a grammar based on an example on the Net to parse an expression like (a OR B)AND(C OR D) to a tree like 
>      AND 
> OR       OR
> A B       C D
> It works fine but if expression has more then 2 children, like (A OR B OR C)AND(D OR E OR F)
> Then it creates problem because it does something like
> AND
> 
> D     OR
>        E    F
> I want it to be like
> 
> OR
> D  E  F
> 
> In other words, a tree node might have capability to have more then 2 nodes as children. How can I set this? I work on C# but couldnt find any setter function in library.
> Best regards,
> Nazim
>  		 	   		  
> _________________________________________________________________
> Yeni Windows 7: Size en uygun bilgisayar? bulun. Daha fazla bilgi edinin.
> http://windows.microsoft.com/shop
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
 		 	   		  
_________________________________________________________________
Windows Live: Arkada?lar?n?z size e-posta g?nderdiklerinde Flickr, Twitter ve Digg'deki hareketlerinizi g?r?rler.
http://www.microsoft.com/windows/windowslive/see-it-in-action/social-network-basics.aspx?ocid=PID23461::T:WLMTAGL:ON:WL:tr-tr:SI_SB_3:092010

From bkiers at gmail.com  Mon Feb 15 00:53:18 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 15 Feb 2010 09:53:18 +0100
Subject: [antlr-interest] Number of children
In-Reply-To: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>
References: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>
Message-ID: <af443a971002150053n7d8d06f9nf233d908df9a9c60@mail.gmail.com>

Why would it pose a problem?

AFAIK,

  OR
 /| \
A B  C

would evaluate the same as:

    OR
   /  \
  OR   C
 /  \
A    B

No?

Regards,

Bart.


2010/2/15 Nazim Oztahtaci <nazim_oztahtaci at hotmail.com>

>
> Hello,
>
> I have written a grammar based on an example on the Net to parse an
> expression like (a OR B)AND(C OR D) to a tree like
>     AND
> OR       OR
> A B       C D
> It works fine but if expression has more then 2 children, like (A OR B OR
> C)AND(D OR E OR F)
> Then it creates problem because it does something like
> AND
>
> D     OR
>       E    F
> I want it to be like
>
> OR
> D  E  F
>
> In other words, a tree node might have capability to have more then 2 nodes
> as children. How can I set this? I work on C# but couldnt find any setter
> function in library.
> Best regards,
> Nazim
>
> _________________________________________________________________
> Yeni Windows 7: Size en uygun bilgisayar? bulun. Daha fazla bilgi edinin.
> http://windows.microsoft.com/shop
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From fridi70 at gmx.de  Mon Feb 15 01:01:39 2010
From: fridi70 at gmx.de (fridi)
Date: Mon, 15 Feb 2010 10:01:39 +0100
Subject: [antlr-interest] Multiple outputs ANTLR + ST
In-Reply-To: <BLU139-W18003CFF8F5D4A8A8F7532BC4D0@phx.gbl>
References: <BLU139-W359DBE4ABFB4F6BEC83E76BC4E0@phx.gbl>,
	<4B745E4A.2080107@gmx.de>
	<BLU139-W18003CFF8F5D4A8A8F7532BC4D0@phx.gbl>
Message-ID: <4B790D73.9070309@gmx.de>

Hi Damien,

the trick could be, that not ANTLR calls the tmpl method but you do it 
twice with some java code with the same values that return from type, 
name, arguments, body

Maybe try something like this:

method : t=type n=name a=arguments b=body
                {
                    useTemplates(t, n, a, b);
                }
           ;

"useTemplates" is a method you would code in the @members area of your 
grammar file


@members {
    private ArrayList mfile ....
    private ArrayList hfile ...


    // take the params from the antlr rules and do call the templates 
manually
    public void useTemplates(type_return type, name_return name, 
arguments_return args, body_return body) {

        StringTemplate stHeader = 
templateLib.getInstanceOf("methodHeaderFile",
              new STAttrMap().put("type", type).put("name",  
name).put("arguments", args).put("body", body));

       hfile.add(stHeader);

       StringTemplate stMFile = templateLib.getInstanceOf("methodMFile",
              new STAttrMap().put("type", type).put("name",  
name).put("arguments", args).put("body", body));

       mFile.add(stMFile);
    }

}

  
So at the end you will have two list of temples - one for the header and 
one for mfile - and only have to iterate through them, call toString for 
each item and collect the resulting strings and save them to 2 different 
files.
The code above is only an example, for the details how the templates get 
called, please take a look at the code that antlr generates when 
rewriting into a string template

I don't know if there is a more elegant way to do this directly from the 
grammar..

Hope this helps,
  Fridi


Damien Urruty schrieb:
> Hi Fridi, thanks for your answer,
>
> With your solution, I don't see how i can differentiate the output : I 
> want to save the function prototypes in a.h file, and the function 
> bodies in a .m file. To do this, I parse my input, and I have a rule 
> method for example : 
>
> method : type name arguments body
>            ;
>
> I have to call 2 different template functions, one that returns only 
> the prototype, and the second one that returns the entire method. For 
> example : 
>
> methodHeaderFile(type, name, arguments, body) ::=<< <type> <name> 
> <arguments; separator=" : "> >>
> methodMFile(type, name, arguments, body) ::=<< <type> <name> 
> <arguments; separator=" : ">{
>    <body>
> }
> >>
>
> And I don't see how to do it with your solution, because the same 
> template is called (foo1Tmpl()), and will return always the same code.
>  
> Anyway thanks for your answer !
>
> Bye, Dam.
>
> > Date: Thu, 11 Feb 2010 20:45:14 +0100
> > From: fridi70 at gmx.de
> > To: lepilache at hotmail.com
> > Subject: Re: [antlr-interest] Multiple outputs ANTLR + ST
> >
> > Hi Dam,
> >
> > one approach that I have used was to redirect the templates output by
> > my own java code that I added to the ruls as actions.
> > So if a rule returns a template, i.e. add that template to a list of
> > your choice.
> >
> > @members {
> > ArrayList<StringTemplate> myTmpls = new ArrayList<StringTemplate>();
> > }
> > ...
> >
> >
> > rule1
> > : f1=foo1 foo2 { myTmpls.add(f1.st); }
> > ;
> >
> > foo1
> > : i=IDENT -> foo1Tmpl({value=$i.text})
> > ;
> >
> > foo2
> > : ...
> >
> > So I think you do not have to return the templates up to the
> > entryRule, you can do whatever you want with them.
> >
> > Hope that helps,
> > fridi
> >
> >
> > Damien Urruty schrieb:
> > >
> > >
> > >
> > > Hi there,
> > >
> > > First of all, thanks a lot for this brilliant tool ! I have a 
> problem, and I don't know how to solve it.
> > >
> > > I want to generate multiple output files, for example a .h and a 
> .m for Objective-C. The point is that I can bind only one template to 
> my parser, with :
> > >
> > > parser.setTemplateLib(tmpl);
> > >
> > > when I call parser.entryRule(), then the toString(), I can get 
> only the generated code for this template tmpl.
> > >
> > > Is it possible to bind multiple templates, and parse once my 
> input, or do I have to parse it 2 times, assigning a different 
> template each time ?
> > >
> > > Hope I'm clear.
> > >
> > > Thanks in advance !
> > >
> > > Dam.
> > >
> > > _________________________________________________________________
> > > Discutez en direct avec vos amis sur Messenger !
> > > http://www.windowslive.fr/messenger
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> > >
> > >
> >
> >
>
> ------------------------------------------------------------------------
> Avec Internet Explorer, surfez en toute discr?tion sur internet 
> Cliquez ici ! <http://clk.atdmt.com/FRM/go/182932252/direct/01/>


From wabsie at gmail.com  Mon Feb 15 02:33:44 2010
From: wabsie at gmail.com (Mark Ruvald)
Date: Mon, 15 Feb 2010 11:33:44 +0100
Subject: [antlr-interest] Status of C++ target
Message-ID: <220288281002150233q7f33af3cja9ca5f0e5f0024fd@mail.gmail.com>

Hi all,

What is the status of C++ target @ ANTLR v3?

To quote the 'ANTLR3 Code Generation Targets' wiki site:
"C target as of release 3.1 is C++ compatible, compile .c files as C+. C+
classes will be provided as a separate library later in 2008."

Call me a pedant, but it's 2010 now ;) Will it be finished in any
foreseeable future?

I am new to ANTLR - which is preferable?:
a) C-target (integrated with other C++) and ANTLR v3?
or
b) Just use C++-target of ANTLR v2.something?

Any advice is greatly appreciated.

regards
-- Mark Ruvald.

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing on usenet and in e-mail?

From gokul007 at gmail.com  Mon Feb 15 02:58:44 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 15 Feb 2010 16:28:44 +0530
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <936041.57065.qm@web55908.mail.re3.yahoo.com>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
	<20100214104820.6F5DF34183F9@www.antlr.org>
	<417838.1521.qm@web55905.mail.re3.yahoo.com>
	<9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>
	<936041.57065.qm@web55908.mail.re3.yahoo.com>
Message-ID: <9362e74e1002150258w7b7ef8e9u657d5ac97b9ce7e5@mail.gmail.com>

Hi Loring,
      Thanks a lot for the nice explanation. I have always heard LL(1) is
the fastest parser. If LL(*) happens to be so close with LL(1), that would
reduce a lot of maintenance overhead involved in creation of LL(1). Atleast
i found the grammar check and compilation times improved for grammars with
lesser value of  k.
      But does that mean, a LL(*) parser in ANTLR will be faster than a
equivalent Flex/Bison parser, since LL(1) and LL(*) are comparable in
performance with ANTLR? Excuse me, if i am asking too dumb questions.

Gokul.

On Mon, Feb 15, 2010 at 11:42 AM, Loring Craymer <lgcraymer at yahoo.com>wrote:

> With token caching and optimal pattern matching, it should be possible to
> almost eliminate any performance differential.  Ter's current implementation
> does not do that--he generates DFAs that match tokens in order of appearance
> in the input stream--but the big wins from left factoring are to remove
> non-LL(*) decisions.  That said, refactoring to reduce the k values of
> decisions is good practice, so temporarily setting k for this purpose can be
> helpful--just don't expect much in the way of performance improvement.
>
> --Loring
>
>
> *From:* Gokulakannan Somasundaram <gokul007 at gmail.com>
> *To:* Loring Craymer <lgcraymer at yahoo.com>
> *Cc:* Gavin Lambert <antlr at mirality.co.nz>; antlr-interest at antlr.org
> *Sent:* Sun, February 14, 2010 7:55:08 PM
>
> *Subject:* Re: [antlr-interest] setting k Value Versus Predicates
>
>
>
>> With ANTLR 3, the default is k='*' and it is best not to set k.  Syntactic
>> predicates are still needed to disambiguate decisions with potentially
>> infinite lookahead (usually due to recursion or looping).
>>
>>
> I can't understand the statement  "It is best not  to set k". Say there are
> left factoring opportunities, which we won't come to know, unless it is
> thrown as an error(after setting k)...
>
> I think, you are assuming that the grammar cannot be left factored further.
> Or are you saying there is no difference in performance between LL(*) and
> LL(1)? Please clarify.
>
> Thanks,
> Gokul.
>
>
>

From nazim_oztahtaci at hotmail.com  Mon Feb 15 03:32:54 2010
From: nazim_oztahtaci at hotmail.com (Nazim Oztahtaci)
Date: Mon, 15 Feb 2010 11:32:54 +0000
Subject: [antlr-interest] Number of children
In-Reply-To: <af443a971002150053n7d8d06f9nf233d908df9a9c60@mail.gmail.com>
References: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>,
	<af443a971002150053n7d8d06f9nf233d908df9a9c60@mail.gmail.com>
Message-ID: <SNT121-W271F0AA6AE63809F7F98DE964A0@phx.gbl>


Yeah but my task is not evaluate the boolean query. Lets say I have 
something like ((a OR b) AND c) expression. My program should convert it
 to sum of products. so end product will be (a AND c) OR (b AND c) Thats
 why I thought parsing expression to a tree then apply distribution law 
of boolean.

However the example I found creates problem in this 
because lets say I have a NOT expression  inside an expression such as:

(a
 OR b OR c)' AND (d OR e). When I try to apply de-morgan on the tree, 
normally NOT should have been removed to two OR operation but because 
tree ios not ina  good format, it makes wrong conversions.
That is 
why I need that a node have more then tree children so when I apply 
demorgan to


 
 ORNOT /| \
A B  C
 
it
 will be like
  and /| \
A' B'  C'

Date: Mon, 15 Feb 2010 09:53:18 +0100
Subject: Re: [antlr-interest] Number of children
From: bkiers at gmail.com
To: nazim_oztahtaci at hotmail.com; antlr-interest at antlr.org

Why would it pose a problem?

AFAIK,

  OR /| \
A B  C

would evaluate the same as:

    OR
   /  \
  OR   C

 /  \
A    B

No?
Regards,

Bart.


2010/2/15 Nazim Oztahtaci <nazim_oztahtaci at hotmail.com>



Hello,



I have written a grammar based on an example on the Net to parse an expression like (a OR B)AND(C OR D) to a tree like

     AND

OR       OR

A B       C D

It works fine but if expression has more then 2 children, like (A OR B OR C)AND(D OR E OR F)

Then it creates problem because it does something like

AND



D     OR

       E    F

I want it to be like



OR

D  E  F



In other words, a tree node might have capability to have more then 2 nodes as children. How can I set this? I work on C# but couldnt find any setter function in library.

Best regards,

Nazim



_________________________________________________________________

Yeni Windows 7: Size en uygun bilgisayar? bulun. Daha fazla bilgi edinin.

http://windows.microsoft.com/shop



List: http://www.antlr.org/mailman/listinfo/antlr-interest

Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


 		 	   		  
_________________________________________________________________
Yeni Windows 7: G?ndelik i?lerinizi basitle?tirin. Size en uygun bilgisayar? bulun.
http://windows.microsoft.com/shop

From antlr at shmuelhome.mine.nu  Mon Feb 15 04:12:06 2010
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Mon, 15 Feb 2010 14:12:06 +0200
Subject: [antlr-interest] Number of children
In-Reply-To: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>
References: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>
Message-ID: <4B793A16.1020507@shmuelhome.mine.nu>

On 2/15/2010 10:22 AM, Nazim Oztahtaci wrote:
> Hello,
>
> I have written a grammar based on an example on the Net to parse an expression like (a OR B)AND(C OR D) to a tree like
>       AND
> OR       OR
> A B       C D
> It works fine but if expression has more then 2 children, like (A OR B OR C)AND(D OR E OR F)
> Then it creates problem because it does something like
> AND
>
> D     OR
>         E    F
> I want it to be like
>
> OR
> D  E  F
>
> In other words, a tree node might have capability to have more then 2 nodes as children. How can I set this? I work on C# but couldnt find any setter function in library.
> Best regards,
> Nazim
>   		 	   		
>    
I am not sure if this is too simple for your needs but this allows a 
more generic tree structure for your example.

grammar test;
options
{
   output = AST;
}
expr : andexpr EOF;
andexpr : orexpr (AND orexpr)+ -> ^(AND orexpr+);
orexpr : WORD (OR WORD)+ -> ^(OR WORD+)
     | LPAREN! orexpr RPAREN!;

LPAREN : '(' ;
RPAREN : ')' ;
AND : 'AND';
OR : 'OR';
WS :  ( ' ' | '\t' | '\r' | '\n') {$channel=HIDDEN;}  ;
WORD :  (~( ' ' | '\t' | '\r' | '\n' | '(' | ')' ))*;


From nazim_oztahtaci at hotmail.com  Mon Feb 15 04:42:10 2010
From: nazim_oztahtaci at hotmail.com (Nazim Oztahtaci)
Date: Mon, 15 Feb 2010 12:42:10 +0000
Subject: [antlr-interest] Number of children
In-Reply-To: <4B793A16.1020507@shmuelhome.mine.nu>
References: <SNT121-W435B7294B42FB98B81C4EC964A0@phx.gbl>,
	<4B793A16.1020507@shmuelhome.mine.nu>
Message-ID: <SNT121-W319087EA75BCEF84148CE9964A0@phx.gbl>


Thanks for your answer. I will test your grammar also. Can you write a test string for that? I added that to my C# project successfuly, however I got errors even I try with (a AND b). I guess I should put a character to show that it is end of string. Error I receive is loop did not match... As I said, I just started Antlr couple of days ago so I apologize this is a simple error to explain. 
Apart from this I would like to paste the grammar I use: grammar 

nazimg;

options
{
  language = CSharp2;
  output = AST;
} 
LPAREN : '(' ;
RPAREN : ')' ;
AND : 'AND';
ANDNOT : 'ANDNOT';
ORNOT : 'ORNOT';
NOT     : 'NOT';
OR : 'OR';
WS :  ( ' ' | '\t' | '\r' | '\n') {$channel=HIDDEN;}  ;  
WORD :  (~( ' ' | '\t' | '\r' | '\n' | '(' | ')' ))*;  


expr :andexpr;
andexpr : orexpr (AND^ orexpr)* | orexpr (ANDNOT^ orexpr)*;
orexpr : atom (OR^ atom)* | atom (ORNOT^ atom)*;
atom : WORD | LPAREN! expr RPAREN! | WORD NOT;

I have fixed the tree structure problem which I asked prevously. I just made a small tree conversion so problem is solved. However now I try to add NOT operator also. So I defined NOT, ANDNOT and ORNOT operators. I thought that with just simple | action. I can make copy of expression like this:

andexpr : orexpr (AND^ orexpr)* | orexpr (ANDNOT^ orexpr)*; but output is not produced. The reason of why I use NOT is as I said, my expression will be like (a AND b)' and I will apply de-morgan. When I come to ANDNOT node, I will turn it to OR and also add NOT value to all its children.

Best regards & Im sorry for interruption
Nazim


> Date: Mon, 15 Feb 2010 14:12:06 +0200
> From: antlr at shmuelhome.mine.nu
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Number of children
> 
> On 2/15/2010 10:22 AM, Nazim Oztahtaci wrote:
> > Hello,
> >
> > I have written a grammar based on an example on the Net to parse an expression like (a OR B)AND(C OR D) to a tree like
> >       AND
> > OR       OR
> > A B       C D
> > It works fine but if expression has more then 2 children, like (A OR B OR C)AND(D OR E OR F)
> > Then it creates problem because it does something like
> > AND
> >
> > D     OR
> >         E    F
> > I want it to be like
> >
> > OR
> > D  E  F
> >
> > In other words, a tree node might have capability to have more then 2 nodes as children. How can I set this? I work on C# but couldnt find any setter function in library.
> > Best regards,
> > Nazim
> >   		 	   		
> >    
> I am not sure if this is too simple for your needs but this allows a 
> more generic tree structure for your example.
> 
> grammar test;
> options
> {
>    output = AST;
> }
> expr : andexpr EOF;
> andexpr : orexpr (AND orexpr)+ -> ^(AND orexpr+);
> orexpr : WORD (OR WORD)+ -> ^(OR WORD+)
>      | LPAREN! orexpr RPAREN!;
> 
> LPAREN : '(' ;
> RPAREN : ')' ;
> AND : 'AND';
> OR : 'OR';
> WS :  ( ' ' | '\t' | '\r' | '\n') {$channel=HIDDEN;}  ;
> WORD :  (~( ' ' | '\t' | '\r' | '\n' | '(' | ')' ))*;
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
 		 	   		  
_________________________________________________________________
Windows Live Hotmail: Arkada?lar?n?z Facebook'taki g?ncellemelerinizi do?rudan Hotmail?'den al?r.
http://www.microsoft.com/windows/windowslive/see-it-in-action/social-network-basics.aspx?ocid=PID23461::T:WLMTAGL:ON:WL:tr-tr:SI_SB_4:092009

From fvwalter at web.de  Mon Feb 15 04:44:19 2010
From: fvwalter at web.de (Florian)
Date: Mon, 15 Feb 2010 13:44:19 +0100
Subject: [antlr-interest] Dynamic tokens
Message-ID: <4B7941A3.4060904@web.de>

Hi,

is it possible to have a lexer/parser which supports a dynamic list of
strings for a specific token?

I.e. something like this:

grammar Test;
rule : name+;
name: NAMETOKEN;
NAMETOKEN: 'Name1' | 'Name2' | 'Name3';

I'd like to replace the list of alternatives for NAMETOKEN with a list
of alternatives that is loaded at program start (or when the parser is
loaded) from an external configuration file.

Is this possible?

Thanks for any hints.

Regards, Florian

From fab.antoine at gmail.com  Mon Feb 15 05:40:08 2010
From: fab.antoine at gmail.com (Fabien Antoine)
Date: Mon, 15 Feb 2010 14:40:08 +0100
Subject: [antlr-interest] Interpreter results misunderstanding...
In-Reply-To: <4B73F9C4.8060609@gmail.com>
References: <4B73F9C4.8060609@gmail.com>
Message-ID: <4B794EB8.6060209@gmail.com>

Hum...my question seems to be forgotten.
I don't think that's a difficult thing but a simple explanation of this
could be great!

Fabien

On 11/02/2010 13:36, Fabien Antoine wrote:
> Hi list,
>
> I'm a new user of this great tool and I don't understand some things
> with the interpreter...
> I've the following grammar:
>
> grammar Test;
> options {
>     backtrack    = true;
>     memoize        = true;
> }
>
> testOK
>     :    ID
>     |    INT
>     ;
>
> testKO
>     :    testID
>     |    testINT
>     ;    
> testID
>     :    ID
>     ;    
> testINT
>     :    INT
>     ;
>
> ID  :    ('a'..'z'|'A'..'Z')+
>     ;    
> INT :    ('0'..'9')+
>     ;
>
>
> And then when I write the text "test" in the interpreter it works fine
> with "testOK" and I get a FailedPredicateException exception with "testKO".
> There are some explanations to this feature because for me it should be
> the same thing?
>
> Thanks for your answers!!
>
> Fabien
>   


From parrt at cs.usfca.edu  Mon Feb 15 10:38:57 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 15 Feb 2010 10:38:57 -0800
Subject: [antlr-interest] The power of backtracking in ANTLR
In-Reply-To: <20100215075216.7053F34183F9@www.antlr.org>
References: <94060EB3-D493-40BE-BA85-261BAB36DCD2@gmail.com>
	<e24c4c271002141754y6a5d45a5lf0f997c5e75c05e6@mail.gmail.com>
	<20100215075216.7053F34183F9@www.antlr.org>
Message-ID: <F0F7CC54-D60C-4F65-A222-75D7ED4AC273@cs.usfca.edu>


On Feb 14, 2010, at 11:52 PM, Gavin Lambert wrote:

> At 14:54 15/02/2010, Michael Bedward wrote:
>> So, in this example you can't refactor the grammar to LL(k) but
>> you can have a simple, readable grammar for this part of the
>> language if you work with a back-tracking parser.
> 
> Or you put in the appropriate look-ahead predicates yourself.
> 
> Basically all ANTLR's backtracking mode does is to insert 
> lookahead predicates in every path and switch off ambiguity 
> warnings.  Consequently, while it's often useful while 
> experimenting, or with ridiculously ambiguous languages, it's 
> usually better to keep backtracking off, refactor, and add 
> predicates as needed.

ANTLR puts them in, but only uses them when necessary :)

Ter

From parrt at cs.usfca.edu  Mon Feb 15 10:39:36 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 15 Feb 2010 10:39:36 -0800
Subject: [antlr-interest] Interpreter results misunderstanding...
In-Reply-To: <4B794EB8.6060209@gmail.com>
References: <4B73F9C4.8060609@gmail.com> <4B794EB8.6060209@gmail.com>
Message-ID: <5CA86FC8-D8CB-4E69-93F5-170A3438687F@cs.usfca.edu>

the interp has some flaws ;)
T
On Feb 15, 2010, at 5:40 AM, Fabien Antoine wrote:

> Hum...my question seems to be forgotten.
> I don't think that's a difficult thing but a simple explanation of this
> could be great!
> 
> Fabien
> 
> On 11/02/2010 13:36, Fabien Antoine wrote:
>> Hi list,
>> 
>> I'm a new user of this great tool and I don't understand some things
>> with the interpreter...
>> I've the following grammar:
>> 
>> grammar Test;
>> options {
>>    backtrack    = true;
>>    memoize        = true;
>> }
>> 
>> testOK
>>    :    ID
>>    |    INT
>>    ;
>> 
>> testKO
>>    :    testID
>>    |    testINT
>>    ;    
>> testID
>>    :    ID
>>    ;    
>> testINT
>>    :    INT
>>    ;
>> 
>> ID  :    ('a'..'z'|'A'..'Z')+
>>    ;    
>> INT :    ('0'..'9')+
>>    ;
>> 
>> 
>> And then when I write the text "test" in the interpreter it works fine
>> with "testOK" and I get a FailedPredicateException exception with "testKO".
>> There are some explanations to this feature because for me it should be
>> the same thing?
>> 
>> Thanks for your answers!!
>> 
>> Fabien
>> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From Ron.Crocker at motorola.com  Mon Feb 15 12:05:18 2010
From: Ron.Crocker at motorola.com (Crocker Ron-QA1007)
Date: Mon, 15 Feb 2010 15:05:18 -0500
Subject: [antlr-interest] Newbie problem with line-oriented parsing
Message-ID: <05108B1D7AEA1145B0A03759AA39FB220536B4F4@de01exm70.ds.mot.com>

Hi all -

I'm new here, so be nice to me. Further, let me start by apologizing for
such a verbose first message. 
I have started porting a DSL, one that I've been supporting for 15+
years, from lex/yacc based toolset (via a tool called MetaTool) to
ANTLR.
 
I've been looking through the various materials available on the net and
have a copy of The Definitive ANTLR Reference. As I started porting the
grammar (EBNF ish) I've run into something I don't know how to deal
with. Unfortunately I need to drag everyone through some background to
get to the question, however I can start with the grammar I'm struggling
with and the immediate problem.

<><><><> cut here - flowgen.g <><><><>
grammar flowgen;

options {
  language = Java;
}

/* *********** */
/* TRANSACTION */
/* *********** */
transaction:  ( ((KEY_START DEFINE_k) => xdefine*) tran_name message+ );

xdefine: KEY_START DEFINE_k ID_name NEW_LINE;

tran_name: ~(KEY_START|NP_START|NEWLINE_) .* NEW_LINE;

message:  num1? from_name num2? to_name ((~(NP_START|WHITE|NEWLINE_)) =>
msg_name?) NEW_LINE;

num1: FLOATnumber;
num2: FLOATnumber;

from_name: COLUMN_name;
to_name:   COLUMN_name;

msg_name: MSG_name;

// Tokens - keywords
DEFINE_k:       'DEFINE';

// Tokens - operators
fragment KEY_START: '$';
fragment NP_START:  '%';
NEW_LINE: NEWLINE_; 

// Tokens - names and numbers
fragment NUMBER:    '0'..'9';
fragment UPPERCASE: 'A'..'Z';
fragment VARBASE:   UPPERCASE (UPPERCASE|NUMBER|'_')*;
fragment VARNAME:   '$' VARBASE;
fragment WHITE:     ' '|'\t';
fragment NEWLINE_:  '\n'|'\r';

FLOATnumber: NUMBER+ ('.' NUMBER+)?;

ID_name:  VARBASE;
VAR_name: VARNAME;

COLUMN_name: ( (ALPHA|NUMBER) (ALPHA|NUMBER|'_'|'&'|'-')*
             | VARNAME
             );
//  name:   <([A-Za-z0-9][A-Za-z0-9_&-]*)?(\$[A-Z][A-Z0-9_]*)*>
             
WS:	(WHITE|NEWLINE_)+ {skip();};
NON_PRINTING_COMMENT: NP_START .* NEWLINE_ {skip();};

MSG_name:  .*;
<><><><> end <><><><>

When I run this through antlr I get the following error:
Grammar: src/flowgen.g
error(201): src/flowgen.g:57:12: The following alternatives can never be
matched: 1
 |---> MSG_name:  .*;

1 error

BUILD FAIL
(this is compliments of antlrv3ide plugin for eclipse; similar results
occur with ANTLRworks)

************ BEGIN BACKGROUND ************
This language, flowgen, is used to specify Message Sequence Charts. We
could be using ITU Z.120 for this, but since our local DSL predates
Z.120 we have some interest in maintaining this language. The flowgen
language is a simplified version of Z.120 in that the input language is
simple and direct, and using the flowgen tools one can create the
corresponding picture (and even the corresponding Z.120 input). [After
re-reading that, I'm not sure the background helps OTHER than to note
that it's an old DSL and there is a solid user base not interested in
moving to another DSL that is overly-complicated for the particular job
at hand.]
 
The format of a flowgen input file is simple: The first non-commented
line is the "title" of the flow, and all subsequent lines represent
messages in the flow. Newline's separate the constructs. 

Here is an example flowgen input file:

	 1. % Here is a comment
	 2. Simple flowgen flow
	 3. % Show a message going from A to B to C and back.
	 4. A	B	Message 1
	 5. # This is the first message in the sequence
	 6. B	C	Message 2
	 7. # This is the next message
	 8. C	B
	 9. % Note how the above message has no message name
	10. B	A	End

And this is the output of "classic" flowgen.

Simple flowgen flow    Page: 1

           A              B              C
           |              |              |
           | [1] Message 1|              |
           |o------------>|              |
           |              |              |
           | This is the first message in the sequence
           |              |              |
           |              | [2] Message 2|
           |              |o------------>| 
           |              |              |
           |              | This is the next message
           |              |              |
           |              | [3]          |
           |              |<------------o| 
           |              |              |
           | [4] End      |              |
           |<------------o|              |
           |              |              |

Some notes:
Lines 1 and 9 are "comment" lines and are ignored.

In this language, there are several constructs that map well to
grammar-based solutions.
* A title is the text associated with the first non-commented line
* A message is the pair (arrow,comment) where an arrow represents the
message moving from one place to another and a comment is optional text
used to describe something about the message. 
* An arrow is the triple (from,to,message_text) where from and to are
required and represent column names (equivalent to IDs in other
pedagogic grammars), while message_text is optional and represents the
"name" of the message. 
* A note is associated with an arrow and is a multi-line construct. Each
of these lines begins with any number of '#' characters, but it is only
the text after the '#'s that comprise the note.
* A comment starts with the % character and continues to the end of the
line [akin to the C++/Java '//' operator]
* Blank lines are ignored, independent of context.

************ END BACKGROUND ************

Given this understanding, I created the grammar above. I'm not sure a)
what to do about the error, but more importantly, b) I'm much more
concerned about HOW to convince an ANTLR grammar to do what I want it to
do. In comparison with the prior toolset, the LL vs. LR question doesn't
bother me. However, the way MetaTool handled restrictions on the lexical
space was to take advantage of lex's "start states". The flowgen grammar
has become so complicated [I've only given a snapshot; it is much more
substantial] that we've broken lex and are about to break flex. Similar
problem with yacc/bison, hence the desire to migrate to something more
robust.

Thanks for hearing me out and I look forward to your
recommendations/suggestions.

Ron Crocker
Fellow of the Technical Staff
Motorola

 

From jimi at temporal-wave.com  Mon Feb 15 12:13:38 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 15 Feb 2010 12:13:38 -0800
Subject: [antlr-interest] Newbie problem with line-oriented parsing
In-Reply-To: <05108B1D7AEA1145B0A03759AA39FB220536B4F4@de01exm70.ds.mot.com>
Message-ID: <d92ba116e3efa54d996aed0429531a72@temporal-wave.com>

You can't use .* in the lexer, only .  The . rule should be the last one in the lexer and is just used to catch any character tha you have not otherwise matched (usually indicates a spurious character).

Make sure that your lexer rules are not ambiguous - they must not overlap :-)

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Crocker Ron-QA1007
> Sent: Monday, February 15, 2010 12:05 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Newbie problem with line-oriented parsing
> 
> Hi all -
> 
> I'm new here, so be nice to me. Further, let me start by apologizing
> for
> such a verbose first message.
> I have started porting a DSL, one that I've been supporting for 15+
> years, from lex/yacc based toolset (via a tool called MetaTool) to
> ANTLR.
> 
> I've been looking through the various materials available on the net
> and
> have a copy of The Definitive ANTLR Reference. As I started porting the
> grammar (EBNF ish) I've run into something I don't know how to deal
> with. Unfortunately I need to drag everyone through some background to
> get to the question, however I can start with the grammar I'm
> struggling
> with and the immediate problem.
> 
> <><><><> cut here - flowgen.g <><><><>
> grammar flowgen;
> 
> options {
>   language = Java;
> }
> 
> /* *********** */
> /* TRANSACTION */
> /* *********** */
> transaction:  ( ((KEY_START DEFINE_k) => xdefine*) tran_name message+
> );
> 
> xdefine: KEY_START DEFINE_k ID_name NEW_LINE;
> 
> tran_name: ~(KEY_START|NP_START|NEWLINE_) .* NEW_LINE;
> 
> message:  num1? from_name num2? to_name ((~(NP_START|WHITE|NEWLINE_))
> =>
> msg_name?) NEW_LINE;
> 
> num1: FLOATnumber;
> num2: FLOATnumber;
> 
> from_name: COLUMN_name;
> to_name:   COLUMN_name;
> 
> msg_name: MSG_name;
> 
> // Tokens - keywords
> DEFINE_k:       'DEFINE';
> 
> // Tokens - operators
> fragment KEY_START: '$';
> fragment NP_START:  '%';
> NEW_LINE: NEWLINE_;
> 
> // Tokens - names and numbers
> fragment NUMBER:    '0'..'9';
> fragment UPPERCASE: 'A'..'Z';
> fragment VARBASE:   UPPERCASE (UPPERCASE|NUMBER|'_')*;
> fragment VARNAME:   '$' VARBASE;
> fragment WHITE:     ' '|'\t';
> fragment NEWLINE_:  '\n'|'\r';
> 
> FLOATnumber: NUMBER+ ('.' NUMBER+)?;
> 
> ID_name:  VARBASE;
> VAR_name: VARNAME;
> 
> COLUMN_name: ( (ALPHA|NUMBER) (ALPHA|NUMBER|'_'|'&'|'-')*
>              | VARNAME
>              );
> //  name:   <([A-Za-z0-9][A-Za-z0-9_&-]*)?(\$[A-Z][A-Z0-9_]*)*>
> 
> WS:	(WHITE|NEWLINE_)+ {skip();};
> NON_PRINTING_COMMENT: NP_START .* NEWLINE_ {skip();};
> 
> MSG_name:  .*;
> <><><><> end <><><><>
> 
> When I run this through antlr I get the following error:
> Grammar: src/flowgen.g
> error(201): src/flowgen.g:57:12: The following alternatives can never
> be
> matched: 1
>  |---> MSG_name:  .*;
> 
> 1 error
> 
> BUILD FAIL
> (this is compliments of antlrv3ide plugin for eclipse; similar results
> occur with ANTLRworks)
> 
> ************ BEGIN BACKGROUND ************
> This language, flowgen, is used to specify Message Sequence Charts. We
> could be using ITU Z.120 for this, but since our local DSL predates
> Z.120 we have some interest in maintaining this language. The flowgen
> language is a simplified version of Z.120 in that the input language is
> simple and direct, and using the flowgen tools one can create the
> corresponding picture (and even the corresponding Z.120 input). [After
> re-reading that, I'm not sure the background helps OTHER than to note
> that it's an old DSL and there is a solid user base not interested in
> moving to another DSL that is overly-complicated for the particular job
> at hand.]
> 
> The format of a flowgen input file is simple: The first non-commented
> line is the "title" of the flow, and all subsequent lines represent
> messages in the flow. Newline's separate the constructs.
> 
> Here is an example flowgen input file:
> 
> 	 1. % Here is a comment
> 	 2. Simple flowgen flow
> 	 3. % Show a message going from A to B to C and back.
> 	 4. A	B	Message 1
> 	 5. # This is the first message in the sequence
> 	 6. B	C	Message 2
> 	 7. # This is the next message
> 	 8. C	B
> 	 9. % Note how the above message has no message name
> 	10. B	A	End
> 
> And this is the output of "classic" flowgen.
> 
> Simple flowgen flow    Page: 1
> 
>            A              B              C
>            |              |              |
>            | [1] Message 1|              |
>            |o------------>|              |
>            |              |              |
>            | This is the first message in the sequence
>            |              |              |
>            |              | [2] Message 2|
>            |              |o------------>|
>            |              |              |
>            |              | This is the next message
>            |              |              |
>            |              | [3]          |
>            |              |<------------o|
>            |              |              |
>            | [4] End      |              |
>            |<------------o|              |
>            |              |              |
> 
> Some notes:
> Lines 1 and 9 are "comment" lines and are ignored.
> 
> In this language, there are several constructs that map well to
> grammar-based solutions.
> * A title is the text associated with the first non-commented line
> * A message is the pair (arrow,comment) where an arrow represents the
> message moving from one place to another and a comment is optional text
> used to describe something about the message.
> * An arrow is the triple (from,to,message_text) where from and to are
> required and represent column names (equivalent to IDs in other
> pedagogic grammars), while message_text is optional and represents the
> "name" of the message.
> * A note is associated with an arrow and is a multi-line construct.
> Each
> of these lines begins with any number of '#' characters, but it is only
> the text after the '#'s that comprise the note.
> * A comment starts with the % character and continues to the end of the
> line [akin to the C++/Java '//' operator]
> * Blank lines are ignored, independent of context.
> 
> ************ END BACKGROUND ************
> 
> Given this understanding, I created the grammar above. I'm not sure a)
> what to do about the error, but more importantly, b) I'm much more
> concerned about HOW to convince an ANTLR grammar to do what I want it
> to
> do. In comparison with the prior toolset, the LL vs. LR question
> doesn't
> bother me. However, the way MetaTool handled restrictions on the
> lexical
> space was to take advantage of lex's "start states". The flowgen
> grammar
> has become so complicated [I've only given a snapshot; it is much more
> substantial] that we've broken lex and are about to break flex. Similar
> problem with yacc/bison, hence the desire to migrate to something more
> robust.
> 
> Thanks for hearing me out and I look forward to your
> recommendations/suggestions.
> 
> Ron Crocker
> Fellow of the Technical Staff
> Motorola
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From stefika at gmail.com  Mon Feb 15 12:35:19 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Mon, 15 Feb 2010 14:35:19 -0600
Subject: [antlr-interest] ANTLR Error Messages and getErrorMessage --- not
	being routed
Message-ID: <1332b72e1002151235t38603449o8866bd572739193f@mail.gmail.com>

Hello all,

I have a grammar that I use for a custom virtual machine. In this machine,
we have our own custom syntax error reporting mechanism, which is tied
through the NetBeans platform using ANTLR. Recently, one of the members on
our development team noticed that "some" of the errors that ANTLR is dumping
to the command line are not properly being routed through our syntax error
reporting mechanism.


The thing is, though, we aren't doing anything special with our reporting.
As a test to see which errors are being routed and which are not, we
modified our mechanism to do the simplest possible thing:

@Override
    public String getErrorMessage(RecognitionException re, String[]
tokenNames) {
        return super.getErrorMessage(re, tokenNames);
    }

    public String getTokenErrorDisplay(Token t) {
        return t.toString();
    }

(this goes in @parser:members).

Next, we generate the grammar and set breakpoints at the appropriate points.
As expected, if we add in errors into our DSL, the breakpoints hit and the
errors are caught. However, if we add certain kinds of errors (e.g., an
extra semicolon at the end of a line when there shouldn't be one), ANTLR
seems to dump the error to the command line but not report it through
getErrorMessage (the breakpoint is not hit). For example, ANTLR might
output: line 15:24 no viable alternative at character ';' but not actually
route this through getErrorMessage, which means we don't detect it
programmatically.

So, what exactly is going on here? Are there certain classifications of
errors that ANTLR dumps to the command line but does not route through
getErrorMessage? For these classes of errors, how can we force ANTLR to send
us these as well, so that we can route them correctly through the rest of
our architecture?

I tried using @rulecatch and a few other methods in BaseRecognizer (e.g.,
emit, reportError), according to the docs, but I can't seem to get ANTLR to
route these particular errors through there either.

Any thoughts?

Stefik

From Ron.Crocker at motorola.com  Mon Feb 15 14:03:08 2010
From: Ron.Crocker at motorola.com (Crocker Ron-QA1007)
Date: Mon, 15 Feb 2010 17:03:08 -0500
Subject: [antlr-interest] Newbie problem with line-oriented parsing
In-Reply-To: <d92ba116e3efa54d996aed0429531a72@temporal-wave.com>
References: <05108B1D7AEA1145B0A03759AA39FB220536B4F4@de01exm70.ds.mot.com>
	<d92ba116e3efa54d996aed0429531a72@temporal-wave.com>
Message-ID: <05108B1D7AEA1145B0A03759AA39FB220536B5A0@de01exm70.ds.mot.com>

Jim -

Just to clarify that I get your comment, should I be using the fragment
keyword where they overlap, and pull out common sub-phrases?

Further, I recall seeing an example in the "Definitive" reference to
using .* catch this kind of stuff. Of course, since ANTLR is complaining
I must be doing something wrong. The reference is on p.100 - here's the
text:

<><> quote <><>
You'll use nongreedy subrules in rules that can match any character
until it sees some character sequence. For example, the following is a
rule that matches multiline comments. The subrule matches any char-
acter until it finds the final '*/':
	ML_COMMENT :	'/*' ( options {greedy=false;} : . )* '*/' ;

Because the subrule can also match '*/', ANTLR considers the sub- rule
nondeterministic. By telling ANTLR to be nongreedy, the subrule matches
characters until it sees the end of the comment.
<><> quote <><>

Thanks all.

Ron
-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Monday, February 15, 2010 2:14 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Newbie problem with line-oriented parsing

You can't use .* in the lexer, only .  The . rule should be the last one
in the lexer and is just used to catch any character tha you have not
otherwise matched (usually indicates a spurious character).

Make sure that your lexer rules are not ambiguous - they must not
overlap :-)

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Crocker Ron-QA1007
> Sent: Monday, February 15, 2010 12:05 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Newbie problem with line-oriented parsing
> 
> Hi all -
> 
> I'm new here, so be nice to me. Further, let me start by apologizing
> for
> such a verbose first message.
> I have started porting a DSL, one that I've been supporting for 15+
> years, from lex/yacc based toolset (via a tool called MetaTool) to
> ANTLR.
> 
> I've been looking through the various materials available on the net
> and
> have a copy of The Definitive ANTLR Reference. As I started porting
the
> grammar (EBNF ish) I've run into something I don't know how to deal
> with. Unfortunately I need to drag everyone through some background to
> get to the question, however I can start with the grammar I'm
> struggling
> with and the immediate problem.
> 
> <><><><> cut here - flowgen.g <><><><>
> grammar flowgen;
> 
> options {
>   language = Java;
> }
> 
> /* *********** */
> /* TRANSACTION */
> /* *********** */
> transaction:  ( ((KEY_START DEFINE_k) => xdefine*) tran_name message+
> );
> 
> xdefine: KEY_START DEFINE_k ID_name NEW_LINE;
> 
> tran_name: ~(KEY_START|NP_START|NEWLINE_) .* NEW_LINE;
> 
> message:  num1? from_name num2? to_name ((~(NP_START|WHITE|NEWLINE_))
> =>
> msg_name?) NEW_LINE;
> 
> num1: FLOATnumber;
> num2: FLOATnumber;
> 
> from_name: COLUMN_name;
> to_name:   COLUMN_name;
> 
> msg_name: MSG_name;
> 
> // Tokens - keywords
> DEFINE_k:       'DEFINE';
> 
> // Tokens - operators
> fragment KEY_START: '$';
> fragment NP_START:  '%';
> NEW_LINE: NEWLINE_;
> 
> // Tokens - names and numbers
> fragment NUMBER:    '0'..'9';
> fragment UPPERCASE: 'A'..'Z';
> fragment VARBASE:   UPPERCASE (UPPERCASE|NUMBER|'_')*;
> fragment VARNAME:   '$' VARBASE;
> fragment WHITE:     ' '|'\t';
> fragment NEWLINE_:  '\n'|'\r';
> 
> FLOATnumber: NUMBER+ ('.' NUMBER+)?;
> 
> ID_name:  VARBASE;
> VAR_name: VARNAME;
> 
> COLUMN_name: ( (ALPHA|NUMBER) (ALPHA|NUMBER|'_'|'&'|'-')*
>              | VARNAME
>              );
> //  name:   <([A-Za-z0-9][A-Za-z0-9_&-]*)?(\$[A-Z][A-Z0-9_]*)*>
> 
> WS:	(WHITE|NEWLINE_)+ {skip();};
> NON_PRINTING_COMMENT: NP_START .* NEWLINE_ {skip();};
> 
> MSG_name:  .*;
> <><><><> end <><><><>
> 
> When I run this through antlr I get the following error:
> Grammar: src/flowgen.g
> error(201): src/flowgen.g:57:12: The following alternatives can never
> be
> matched: 1
>  |---> MSG_name:  .*;
> 
> 1 error
> 
> BUILD FAIL
> (this is compliments of antlrv3ide plugin for eclipse; similar results
> occur with ANTLRworks)
> 
> ************ BEGIN BACKGROUND ************
> This language, flowgen, is used to specify Message Sequence Charts. We
> could be using ITU Z.120 for this, but since our local DSL predates
> Z.120 we have some interest in maintaining this language. The flowgen
> language is a simplified version of Z.120 in that the input language
is
> simple and direct, and using the flowgen tools one can create the
> corresponding picture (and even the corresponding Z.120 input). [After
> re-reading that, I'm not sure the background helps OTHER than to note
> that it's an old DSL and there is a solid user base not interested in
> moving to another DSL that is overly-complicated for the particular
job
> at hand.]
> 
> The format of a flowgen input file is simple: The first non-commented
> line is the "title" of the flow, and all subsequent lines represent
> messages in the flow. Newline's separate the constructs.
> 
> Here is an example flowgen input file:
> 
> 	 1. % Here is a comment
> 	 2. Simple flowgen flow
> 	 3. % Show a message going from A to B to C and back.
> 	 4. A	B	Message 1
> 	 5. # This is the first message in the sequence
> 	 6. B	C	Message 2
> 	 7. # This is the next message
> 	 8. C	B
> 	 9. % Note how the above message has no message name
> 	10. B	A	End
> 
> And this is the output of "classic" flowgen.
> 
> Simple flowgen flow    Page: 1
> 
>            A              B              C
>            |              |              |
>            | [1] Message 1|              |
>            |o------------>|              |
>            |              |              |
>            | This is the first message in the sequence
>            |              |              |
>            |              | [2] Message 2|
>            |              |o------------>|
>            |              |              |
>            |              | This is the next message
>            |              |              |
>            |              | [3]          |
>            |              |<------------o|
>            |              |              |
>            | [4] End      |              |
>            |<------------o|              |
>            |              |              |
> 
> Some notes:
> Lines 1 and 9 are "comment" lines and are ignored.
> 
> In this language, there are several constructs that map well to
> grammar-based solutions.
> * A title is the text associated with the first non-commented line
> * A message is the pair (arrow,comment) where an arrow represents the
> message moving from one place to another and a comment is optional
text
> used to describe something about the message.
> * An arrow is the triple (from,to,message_text) where from and to are
> required and represent column names (equivalent to IDs in other
> pedagogic grammars), while message_text is optional and represents the
> "name" of the message.
> * A note is associated with an arrow and is a multi-line construct.
> Each
> of these lines begins with any number of '#' characters, but it is
only
> the text after the '#'s that comprise the note.
> * A comment starts with the % character and continues to the end of
the
> line [akin to the C++/Java '//' operator]
> * Blank lines are ignored, independent of context.
> 
> ************ END BACKGROUND ************
> 
> Given this understanding, I created the grammar above. I'm not sure a)
> what to do about the error, but more importantly, b) I'm much more
> concerned about HOW to convince an ANTLR grammar to do what I want it
> to
> do. In comparison with the prior toolset, the LL vs. LR question
> doesn't
> bother me. However, the way MetaTool handled restrictions on the
> lexical
> space was to take advantage of lex's "start states". The flowgen
> grammar
> has become so complicated [I've only given a snapshot; it is much more
> substantial] that we've broken lex and are about to break flex.
Similar
> problem with yacc/bison, hence the desire to migrate to something more
> robust.
> 
> Thanks for hearing me out and I look forward to your
> recommendations/suggestions.
> 
> Ron Crocker
> Fellow of the Technical Staff
> Motorola
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From paul.bouche at apertio.com  Mon Feb 15 14:52:24 2010
From: paul.bouche at apertio.com (=?ISO-8859-1?Q?Paul_Bouch=E9?=)
Date: Mon, 15 Feb 2010 23:52:24 +0100
Subject: [antlr-interest] ANTLR Error Messages and getErrorMessage ---
 not	being routed
In-Reply-To: <1332b72e1002151235t38603449o8866bd572739193f@mail.gmail.com>
References: <1332b72e1002151235t38603449o8866bd572739193f@mail.gmail.com>
Message-ID: <4B79D028.60402@apertio.com>

Hi Andreas,

probably you are not catching the lexer errors. You also need to 
override one of the error reporting methods in the lexer, e.g.:

@lexer::members {
     	
         public void emitErrorMessage(String msg) {
// ...
         }

         public void recover(RecognitionException re) {
// ...           reportError(re);
         }

}

Some errors you will not see because the parser tries to recover from 
them and does not log them or you will only see it in certain methods, 
look at the call tree to find out which method is always called and hook 
in there. If I remember correctly emitErrorMessage() is not always 
called in the lexer / parser. You can switch of recovering all together 
if you throw an exception in the reover method. The lexer imo does 
something weird last time I looked into the source code: it eats up 
characters until it finds one for which it can continue properly 
(consumes, moves the read pointer forward), we did not need the behavior 
(only eat up till a certain char, e.g.' \n').

BR,
Paul

Am 15.02.2010 21:35, schrieb Andreas Stefik:
> Hello all,
>
> I have a grammar that I use for a custom virtual machine. In this machine,
> we have our own custom syntax error reporting mechanism, which is tied
> through the NetBeans platform using ANTLR. Recently, one of the members on
> our development team noticed that "some" of the errors that ANTLR is dumping
> to the command line are not properly being routed through our syntax error
> reporting mechanism.
>
>
> The thing is, though, we aren't doing anything special with our reporting.
> As a test to see which errors are being routed and which are not, we
> modified our mechanism to do the simplest possible thing:
>
> @Override
>      public String getErrorMessage(RecognitionException re, String[]
> tokenNames) {
>          return super.getErrorMessage(re, tokenNames);
>      }
>
>      public String getTokenErrorDisplay(Token t) {
>          return t.toString();
>      }
>
> (this goes in @parser:members).
>
> Next, we generate the grammar and set breakpoints at the appropriate points.
> As expected, if we add in errors into our DSL, the breakpoints hit and the
> errors are caught. However, if we add certain kinds of errors (e.g., an
> extra semicolon at the end of a line when there shouldn't be one), ANTLR
> seems to dump the error to the command line but not report it through
> getErrorMessage (the breakpoint is not hit). For example, ANTLR might
> output: line 15:24 no viable alternative at character ';' but not actually
> route this through getErrorMessage, which means we don't detect it
> programmatically.
>
> So, what exactly is going on here? Are there certain classifications of
> errors that ANTLR dumps to the command line but does not route through
> getErrorMessage? For these classes of errors, how can we force ANTLR to send
> us these as well, so that we can route them correctly through the rest of
> our architecture?
>
> I tried using @rulecatch and a few other methods in BaseRecognizer (e.g.,
> emit, reportError), according to the docs, but I can't seem to get ANTLR to
> route these particular errors through there either.
>
> Any thoughts?
>
> Stefik
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>    


From nazim_oztahtaci at hotmail.com  Mon Feb 15 14:57:37 2010
From: nazim_oztahtaci at hotmail.com (Nazim Oztahtaci)
Date: Mon, 15 Feb 2010 22:57:37 +0000
Subject: [antlr-interest] Logical Expression parser
In-Reply-To: <05108B1D7AEA1145B0A03759AA39FB220536B5A0@de01exm70.ds.mot.com>
References: <05108B1D7AEA1145B0A03759AA39FB220536B4F4@de01exm70.ds.mot.com>,
	<d92ba116e3efa54d996aed0429531a72@temporal-wave.com>,
	<05108B1D7AEA1145B0A03759AA39FB220536B5A0@de01exm70.ds.mot.com>
Message-ID: <SNT121-W330F8105240A7FBF593725964A0@phx.gbl>


Hi,
I want to write a parser using ANTLR grammar. I would like to translate the logical expression to Sum of Product form. I give you the example below.

Steps for expression: ((a AND b)
OR (c AND d))' ->de morgan: (a' OR b') AND (c' OR
d')->distribution: (a' AND c') OR (a' AND d'.....). So I will have
DNF form in the result. I plan to use Antlr. I will write the grammar
and then create the necessary files on the C#. First it would be great
if you confirm me about it. I will just have AND OR operators and NOT.
For instance (a OR NOT b) means actually (a or b)not. Also (a NOT OR b
NOT) means a' OR b'. Do you have any example grammar for this task? I
found one in codeproject but doesnt explain in bried detailly. Or at least someone can guide me little bit.

Best regards & Thanks for your time
Nazim 		 	   		  
_________________________________________________________________
Windows Live: Arkada?lar?n?z size e-posta g?nderdiklerinde Flickr, Twitter ve Digg'deki hareketlerinizi g?r?rler.
http://www.microsoft.com/windows/windowslive/see-it-in-action/social-network-basics.aspx?ocid=PID23461::T:WLMTAGL:ON:WL:tr-tr:SI_SB_3:092010

From stefika at gmail.com  Mon Feb 15 17:16:06 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Mon, 15 Feb 2010 19:16:06 -0600
Subject: [antlr-interest] ANTLR Error Messages and getErrorMessage ---
	not being routed
In-Reply-To: <4B79D028.60402@apertio.com>
References: <1332b72e1002151235t38603449o8866bd572739193f@mail.gmail.com>
	<4B79D028.60402@apertio.com>
Message-ID: <1332b72e1002151716y23a8739dq2dd12af4c2648514@mail.gmail.com>

Paul,

Oh, hey, thanks!

I guess I didn't even think that the lexer might be sending off messages, as
I sort of assumed it all got routed behind the scenes to the parser. Now
that you say it, though, that makes sense. I tossed in some test methods
into the lexer and, low and behold, everything fires up as expected.

So, yaa, problem solved. Should be pretty easy from here to wire it all in.

Thanks again,

Stefik

On Mon, Feb 15, 2010 at 4:52 PM, Paul Bouch? <paul.bouche at apertio.com>wrote:

> Hi Andreas,
>
> probably you are not catching the lexer errors. You also need to override
> one of the error reporting methods in the lexer, e.g.:
>
> @lexer::members {
>
>        public void emitErrorMessage(String msg) {
> // ...
>        }
>
>        public void recover(RecognitionException re) {
> // ...           reportError(re);
>        }
>
> }
>
> Some errors you will not see because the parser tries to recover from them
> and does not log them or you will only see it in certain methods, look at
> the call tree to find out which method is always called and hook in there.
> If I remember correctly emitErrorMessage() is not always called in the lexer
> / parser. You can switch of recovering all together if you throw an
> exception in the reover method. The lexer imo does something weird last time
> I looked into the source code: it eats up characters until it finds one for
> which it can continue properly (consumes, moves the read pointer forward),
> we did not need the behavior (only eat up till a certain char, e.g.' \n').
>
> BR,
> Paul
>
> Am 15.02.2010 21:35, schrieb Andreas Stefik:
>
>> Hello all,
>>
>> I have a grammar that I use for a custom virtual machine. In this machine,
>> we have our own custom syntax error reporting mechanism, which is tied
>> through the NetBeans platform using ANTLR. Recently, one of the members on
>> our development team noticed that "some" of the errors that ANTLR is
>> dumping
>> to the command line are not properly being routed through our syntax error
>> reporting mechanism.
>>
>>
>> The thing is, though, we aren't doing anything special with our reporting.
>> As a test to see which errors are being routed and which are not, we
>> modified our mechanism to do the simplest possible thing:
>>
>> @Override
>>     public String getErrorMessage(RecognitionException re, String[]
>> tokenNames) {
>>         return super.getErrorMessage(re, tokenNames);
>>     }
>>
>>     public String getTokenErrorDisplay(Token t) {
>>         return t.toString();
>>     }
>>
>> (this goes in @parser:members).
>>
>> Next, we generate the grammar and set breakpoints at the appropriate
>> points.
>> As expected, if we add in errors into our DSL, the breakpoints hit and the
>> errors are caught. However, if we add certain kinds of errors (e.g., an
>> extra semicolon at the end of a line when there shouldn't be one), ANTLR
>> seems to dump the error to the command line but not report it through
>> getErrorMessage (the breakpoint is not hit). For example, ANTLR might
>> output: line 15:24 no viable alternative at character ';' but not actually
>> route this through getErrorMessage, which means we don't detect it
>> programmatically.
>>
>> So, what exactly is going on here? Are there certain classifications of
>> errors that ANTLR dumps to the command line but does not route through
>> getErrorMessage? For these classes of errors, how can we force ANTLR to
>> send
>> us these as well, so that we can route them correctly through the rest of
>> our architecture?
>>
>> I tried using @rulecatch and a few other methods in BaseRecognizer (e.g.,
>> emit, reportError), according to the docs, but I can't seem to get ANTLR
>> to
>> route these particular errors through there either.
>>
>> Any thoughts?
>>
>> Stefik
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>
>

From jbb at acm.org  Mon Feb 15 18:56:46 2010
From: jbb at acm.org (John B. Brodie)
Date: Mon, 15 Feb 2010 21:56:46 -0500
Subject: [antlr-interest] Logical Expression parser
In-Reply-To: <SNT121-W330F8105240A7FBF593725964A0@phx.gbl>
References: <05108B1D7AEA1145B0A03759AA39FB220536B4F4@de01exm70.ds.mot.com>
	, <d92ba116e3efa54d996aed0429531a72@temporal-wave.com>
	, <05108B1D7AEA1145B0A03759AA39FB220536B5A0@de01exm70.ds.mot.com>
	<SNT121-W330F8105240A7FBF593725964A0@phx.gbl>
Message-ID: <1266289006.16254.17.camel@gecko.home.org>

Greetings!

On Mon, 2010-02-15 at 22:57 +0000, Nazim Oztahtaci wrote:
> Hi,
> I want to write a parser using ANTLR grammar. I would like to translate the logical expression to Sum of Product form. I give you the example below.
> 

I am not sure that the following will be of any help.

Having the negation as a post-fix modifier, is rather ... unusual to me.
I have never seen that. Is that common practice for you? Can you provide
a reference to any Common Practice using this Form?

So anyway, attached please find a .g file that attempts to construct an
AST for an input in the form that you specify:

> Steps for expression: ((a AND b)
> OR (c AND d))' ->de morgan: (a' OR b') AND (c' OR
> d')->distribution: (a' AND c') OR (a' AND d'.....). So I will have
> DNF form in the result. I plan to use Antlr. I will write the grammar
> and then create the necessary files on the C#. First it would be great
> if you confirm me about it. I will just have AND OR operators and NOT.
> For instance (a OR NOT b) means actually (a or b)not. Also (a NOT OR b
> NOT) means a' OR b'. Do you have any example grammar for this task? I
> found one in codeproject but doesnt explain in bried detailly. Or at least someone can guide me little bit.

As stated above, I have no experience with negation as a post-fix
modifier; which means I have no intuition for how an AST might be best
formulated under this system.

I tried.

I hope it helps.

See attached.

You will need to add tree manipulation pass(s) to this in order to
transform the input AST into your requisite DNF AST.

This is just the first step.

Hope this helps...
   -jbb

-------------- next part --------------
grammar Boolean;

options {
   output = AST;
   ASTLabelType = CommonTree;
}

@members {
   private static final String [] x = new String[]{
      "(a & b) | (c & d)",
      "a & b | c & d",
      "a~ & b | c & d",
      "a~|b~",
      "a |~ b",
      "a | b | c | d",
      "a | b |~ c |~ d",
      "a |~ b~ |~ c | d~ &~ e & f~ | g"
   };

   public static void main(String [] args) {
      for( int i = 0; i < x.length; ++i ) {
         try {
            System.out.println("about to parse:`"+x[i]+"`");
            BooleanLexer lexer = new BooleanLexer(new ANTLRStringStream(x[i]));
            CommonTokenStream tokens = new CommonTokenStream(lexer);

            BooleanParser parser = new BooleanParser(tokens);
            BooleanParser.start_return p_result = parser.start();

            CommonTree ast = p_result.tree;
            if( ast == null ) {
               System.out.println("resultant tree: is NULL");
            } else {
               System.out.println("resultant tree: " + ast.toStringTree());
            }
            System.out.println();
         } catch(Exception e) {
            e.printStackTrace();
         }
      }
   }
}

start : expression EOF!;

expression : ior ;

ior : (a=and -> $a)
      ( ( x='|' i=ior -> ^($x $a $i) )
      | ( x='|' y='~' i=ior -> ^($y ^($x $a $i)) )
      )? ;

and : (n=neg -> $n)
      ( ( x='&' a=and -> ^($x $n $a) )
      | ( x='&' y='~' a=and -> ^($y ^($x $n $a)) )
      )? ;

neg : primary '~'^? ;

primary : VAR | '(' expression ')' ; 

VAR : ('a'..'z'|'A'..'Z'|'0'..'9'|'_')+ ;

// Whitespace -- ignored
WS : ( ' ' | '\t' | '\f' | '\r' | '\n' )+ { $channel=HIDDEN; } ;

// single-line comments
SL_COMMENT :
      '//' ( options { greedy=false; } : . )* ( '\r' | '\r\n' | '\n' )
      { $channel=HIDDEN; }
   ;

// multiple-line comments
ML_COMMENT : NESTED_COMMENTARY { $channel=HIDDEN; } ;

fragment NESTED_COMMENTARY :
      '/*'
      ( options {greedy=false;} : . )*
      ( NESTED_COMMENTARY ( options {greedy=false;} : . )* )*
      '*/'
   ;


From lgcraymer at yahoo.com  Tue Feb 16 02:06:46 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 16 Feb 2010 02:06:46 -0800 (PST)
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <9362e74e1002152315k31feadc7k78e1bf4956da6980@mail.gmail.com>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
	<20100214104820.6F5DF34183F9@www.antlr.org>
	<417838.1521.qm@web55905.mail.re3.yahoo.com>
	<9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>
	<936041.57065.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002150258w7b7ef8e9u657d5ac97b9ce7e5@mail.gmail.com>
	<958376.19618.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002152315k31feadc7k78e1bf4956da6980@mail.gmail.com>
Message-ID: <697819.10851.qm@web55907.mail.re3.yahoo.com>

Gokul--

I don't actually know that ANTLR generates slower code than flex/bison; I expect that it does, but that is just an educated guess.

Ter's current implementation does follow the logic you state, although I would recast it as
a)  Match tokens in order of appearance until a decision point is reached.
b)  At each decision point, use a deterministic finite automaton that matches tokens in order of appearance until there is only one correct alternative.
c.) Rewind; select the correct alternative
d.) Exit if the alternative is EOF; otherwise, goto a.

For LL(1) decisions, b) is replaced by a simple if statement.

There is an algorithmic improvement that can be made:  replace the DFA in b with a pattern matcher that tests the minimum number of tokens needed to make the decision; these tokens would be tested out of order--instead of 1 2 3 4 5, for example, the order might be 1 5 2 for the longest comparison.  Since most decisions are LL(1), this would not have as much impact as you might think.

One of the big strengths of ANTLR (dating back to PCCTS) is that it generates human readable code that can be used for debugging (although walking the DFAs can be painful).  My impression is that most of the targets support the ANTLRWorks debugger, and that the variation is just a matter of whether a given target developer has kept his target in sync with ANTLRWorks or not at any given time.  Java does have "most favored language" status, but that is only because the target developers have to follow the Java changes.  I don't use ANTLRWorks, so I can't say much more than this.

--Loring


>
>From: Gokulakannan Somasundaram <gokul007 at gmail.com>
>To: Loring Craymer <lgcraymer at yahoo.com>
>Sent: Mon, February 15, 2010 11:15:44 PM
>Subject: Re: [antlr-interest] setting k Value Versus Predicates
>
>Thanks Loring, i understand what you are saying. I understand that
>LL(1) parser produced by ANTLR is slightly slower than LALR(1) produced
>by flex/bison. I am just curious to know, what needs to be done at the
>LL(1) parser level for ANTLR to catch up with flex/Bison. Because i see
>the logic in ANTLR parsing is more like
>>a) get a cache of next n tokens
>>b) Based on switch case/predicates, follow the grammar.
>
>>What else can be done further to improve the performance? I am asking
>this only for understanding purposes and i get your point on
>concentrating on the big picture.
>
>>As far as the productivity part goes, i feel ANTLR helps a lot for
>anyone who creates the lexer/parser completely in Java. For a person,
>who chooses to take a different target language, he has to spend some
>effort in creating the Java target also, solely for the purpose of
>grammar debugging. Correct me, if i am wrong here.
>
>>Once again, thanks for the explanation
>
>>Thanks,
>>Gokul.
>
>P.S. : I don't know, whether you mistakenly avoided the group in the reply. I just maintained that.
>
>
>On Tue, Feb 16, 2010 at 11:30 AM, Loring Craymer <lgcraymer at yahoo.com> wrote:
>
>Gokul--
>>
>>You are not asking dumb questions, but you are asking the wrong questions.  I would expect a flex/bison generated lexer/parser to run (slightly) faster than its ANTLR counterpart, but that is because flex and bison were written to be open source versions of lex and yacc and to recognize .l and .y files (at least to start with).  That left the developers a small degree of freedom to add features, but the real opportunity was in the speed of generated lexers and parsers and developers have maniacally focused on performance enhancement.
>>
>>ANTLR, on the other hand, evolved to be a tool developers tool and has broader design considerations.  Performance is a consideration, but not the only one.  Once you have a lex/yacc front end, you have exhausted their
>> capabilities, and you still have to insert action code and debug the grammars.  Those steps are much easier with ANTLR, and you still have automated tree construction, tree grammars, and StringTemplate to help with the remaining phases of tool construction.
>>
>>The urge to premature optimization is a disease that needs to be carefully controlled.  If you focus on optimizing each piece of a system in isolation while ignoring the system as a whole, invariably system performance suffers.  Look at the big picture first, then focus on what you see to be essential details.
>>
>>--Loring
>>
>>
>


      

From gokul007 at gmail.com  Tue Feb 16 03:15:06 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Tue, 16 Feb 2010 16:45:06 +0530
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <697819.10851.qm@web55907.mail.re3.yahoo.com>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
	<20100214104820.6F5DF34183F9@www.antlr.org>
	<417838.1521.qm@web55905.mail.re3.yahoo.com>
	<9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>
	<936041.57065.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002150258w7b7ef8e9u657d5ac97b9ce7e5@mail.gmail.com>
	<958376.19618.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002152315k31feadc7k78e1bf4956da6980@mail.gmail.com>
	<697819.10851.qm@web55907.mail.re3.yahoo.com>
Message-ID: <9362e74e1002160315w48b64553s20efbd3d29542344@mail.gmail.com>

>
> There is an algorithmic improvement that can be made:  replace the DFA in b
> with a pattern matcher that tests the minimum number of tokens needed to
> make the decision; these tokens would be tested out of order--instead of 1 2
> 3 4 5, for example, the order might be 1 5 2 for the longest comparison.
> Since most decisions are LL(1), this would not have as much impact as you
> might think.
>

Hmmm.... I am finding it difficult to comprehend. My head is spinning
slightly :). I will try to read it again after sometime.

 ANTLRWorks doesn't support anything other than java for debugging. I just
tested it. I use the ANTLR grammar supplied with the examples to convert my
C grammar into Java grammar, for my debugging purposes.

Well, i had a small observation with the ANTLR generated code (and of-course
from the performance perspective). Forgive me, if i am not speaking in
parsing terminology. Consider a grammar like this

grammar Simple;
A     :     'a' | 'A';
B    :     'b' | 'B';
C    :     'c' | 'C';
rule1    :    A
        ( B A
          | A C
         )
         ;
rule2    :    A C B
        | rule1
        ;

Here, if my starting rule is rule2, then i find two DFAs. one for rule2 and
one for rule1 in order to resolve one ambiguity (  the ambiguity that might
occur with the first token ). I understand the idea is that any rule can be
made as a first rule. (If we seperate the DFA from the actual matching, then
each rule will have two functions and rule2 can decide to invoke the
matching function directly with the alternate prediction ) Imagine if the
tokens are embedded deep inside rules, then there are multiple DFAs, that
get evaluated for the same ambiguity of the first token. I just feel that
this is an area, where some optimization can be made. If this multiple DFA
evaluation for one ambiguity problem is resolved, i feel that LL(k) would be
more efficient ( of course from the performance angle :) ).

Some kind of path prediction for one rule from a different rule, if
incorporated, would reduce the un-necessary DFA executions during runtime.
Please consider this as a suggestion from a person, who has very less
experince in parser world.

Thanks,
Gokul.

From marcin.rzeznicki at gmail.com  Tue Feb 16 10:29:44 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 16 Feb 2010 19:29:44 +0100
Subject: [antlr-interest] Request for Change regarding Lexer (?)
Message-ID: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>

Hi all,
Recently I came upon the following problem in ANTLR Lexer:

My initial grammar:
fragment
VerbatimString
  :
  (
    '[' LineSequence ']'
  )
  |
  (
    '{' LineSequence '}'
  )
  ;

fragment
LineSequence
   :
NewLine
    (
      ~(
        '\r'
        | '\n'
       )+
      NewLine
    )*

The intention was to match strings starting with some separator ('[' or '{')
followed by new line, extending to the closing separator preceded by new
line. Of course, it isn't exactly correct, as you probably spotted. Problem
here was that LineSequence would gladly consume closing separator after the
new line. So, it seemed logical to make loop in LineSequence non-greedy so
that it examines what follows and leaves as soon as closing operator appears
in lookahead. I tried:
fragment
LineSequence
   :
NewLine
    ( options {greedy=false;}:
      ~(
        '\r'
        | '\n'
       )+
      NewLine
    )*
;

and it occurred to me that ANTLR does not really inspect follow set, it
seems to inspect only what's left in the rule itself. Therefore, for this
scheme to work I had to write the following ugliness
:
fragment
VerbatimString
  :
  (
    '[' NewLine
    ( options {greedy=false;}:
      ~(
        '\r'
        | '\n'
       )+
      NewLine
    )*
    ']'
  )
  |
  (
    '{' NewLine
    ( options {greedy=false;}:
      ~(
        '\r'
        | '\n'
       )+
      NewLine
    )*
    '}'
  )
  ;

which seems to be more or less working as expected. Now, if anyone knows of
better way, please let me know. But, assuming that I did not screw up
anything here, I'd really like to see the way of giving some hints to ANTLR
without writing messy grammars. I thought of syntax:
fragment
VerbatimString
  :
  (
    '[' < LineSequence; ']' > ']'
  )
  |
  (
    '{' < LineSequence; '}' > '}'
  )
  ;
where one could specify what is expected to follow. Is that feasible? Thanks
in advance for your comments/thoughts

-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Tue Feb 16 10:32:19 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Feb 2010 10:32:19 -0800
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
Message-ID: <87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>

http://www.antlr.org/jira/browse/ANTLR-189
Ter
On Feb 16, 2010, at 10:29 AM, Marcin Rze?nicki wrote:

> Hi all,
> Recently I came upon the following problem in ANTLR Lexer:
> 
> My initial grammar:
> fragment
> VerbatimString
>  :
>  (
>    '[' LineSequence ']'
>  )
>  |
>  (
>    '{' LineSequence '}'
>  )
>  ;
> 
> fragment
> LineSequence
>   :
> NewLine
>    (
>      ~(
>        '\r'
>        | '\n'
>       )+
>      NewLine
>    )*
> 
> The intention was to match strings starting with some separator ('[' or '{')
> followed by new line, extending to the closing separator preceded by new
> line. Of course, it isn't exactly correct, as you probably spotted. Problem
> here was that LineSequence would gladly consume closing separator after the
> new line. So, it seemed logical to make loop in LineSequence non-greedy so
> that it examines what follows and leaves as soon as closing operator appears
> in lookahead. I tried:
> fragment
> LineSequence
>   :
> NewLine
>    ( options {greedy=false;}:
>      ~(
>        '\r'
>        | '\n'
>       )+
>      NewLine
>    )*
> ;
> 
> and it occurred to me that ANTLR does not really inspect follow set, it
> seems to inspect only what's left in the rule itself. Therefore, for this
> scheme to work I had to write the following ugliness
> :
> fragment
> VerbatimString
>  :
>  (
>    '[' NewLine
>    ( options {greedy=false;}:
>      ~(
>        '\r'
>        | '\n'
>       )+
>      NewLine
>    )*
>    ']'
>  )
>  |
>  (
>    '{' NewLine
>    ( options {greedy=false;}:
>      ~(
>        '\r'
>        | '\n'
>       )+
>      NewLine
>    )*
>    '}'
>  )
>  ;
> 
> which seems to be more or less working as expected. Now, if anyone knows of
> better way, please let me know. But, assuming that I did not screw up
> anything here, I'd really like to see the way of giving some hints to ANTLR
> without writing messy grammars. I thought of syntax:
> fragment
> VerbatimString
>  :
>  (
>    '[' < LineSequence; ']' > ']'
>  )
>  |
>  (
>    '{' < LineSequence; '}' > '}'
>  )
>  ;
> where one could specify what is expected to follow. Is that feasible? Thanks
> in advance for your comments/thoughts
> 
> -- 
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From marcin.rzeznicki at gmail.com  Tue Feb 16 10:39:51 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 16 Feb 2010 19:39:51 +0100
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
Message-ID: <14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>

Hi,
Thanks for quick reply.
Anyway, I am not sure whether I understand this RFI you wrote, but if I do
then what I am suggesting is way simpler to implement because the "next
token analysis" part is left to the user. I am not sure whether I see all
the issues clearly.

2010/2/16 Terence Parr <parrt at cs.usfca.edu>

> http://www.antlr.org/jira/browse/ANTLR-189
> Ter
> On Feb 16, 2010, at 10:29 AM, Marcin Rze?nicki wrote:
>
>
>


-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Tue Feb 16 10:44:03 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Feb 2010 10:44:03 -0800
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
	<14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
Message-ID: <F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>

The key to your question was:

"and it occurred to me that ANTLR does not really inspect follow set, it
seems to inspect only what's left in the rule itself."

That improvement/bug is what I intend to fix :)  Actually, ANTLR v4 lexers will just plain work better (i.e., more like what you expect) ;)

Ter
On Feb 16, 2010, at 10:39 AM, Marcin Rze?nicki wrote:

> Hi,
> Thanks for quick reply.
> Anyway, I am not sure whether I understand this RFI you wrote, but if I do then what I am suggesting is way simpler to implement because the "next token analysis" part is left to the user. I am not sure whether I see all the issues clearly.
> 
> 2010/2/16 Terence Parr <parrt at cs.usfca.edu>
> http://www.antlr.org/jira/browse/ANTLR-189
> Ter
> On Feb 16, 2010, at 10:29 AM, Marcin Rze?nicki wrote:
> 
> 
> 
> 
> 
> -- 
> Greetings
> Marcin Rze?nicki


From marcin.rzeznicki at gmail.com  Tue Feb 16 11:11:28 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 16 Feb 2010 20:11:28 +0100
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
	<14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
	<F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>
Message-ID: <14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com>

2010/2/16 Terence Parr <parrt at cs.usfca.edu>

> The key to your question was:
>
> "and it occurred to me that ANTLR does not really inspect follow set, it
> seems to inspect only what's left in the rule itself."
>
> That improvement/bug is what I intend to fix :)  Actually, ANTLR v4 lexers
> will just plain work better (i.e., more like what you expect) ;)
>
>
Well, yes, right, that would be really nice (by the way, when is this new
release coming?), but when I am thinking of this; it would not really save
the day in my case as follow set of LineSequence is actually {  '}' , ']'  }
and what I need is loop escaping dependent on previous match, so some
constrained context passing would be nice.



> Ter
> On Feb 16, 2010, at 10:39 AM, Marcin Rze?nicki wrote:
>
> > Hi,
> > Thanks for quick reply.
> > Anyway, I am not sure whether I understand this RFI you wrote, but if I
> do then what I am suggesting is way simpler to implement because the "next
> token analysis" part is left to the user. I am not sure whether I see all
> the issues clearly.
> >
> > 2010/2/16 Terence Parr <parrt at cs.usfca.edu>
> > http://www.antlr.org/jira/browse/ANTLR-189
> > Ter
> > On Feb 16, 2010, at 10:29 AM, Marcin Rze?nicki wrote:
> >
> >
> >
> >
> >
> > --
> > Greetings
> > Marcin Rze?nicki
>
>


-- 
Pozdrawiam
Marcin Rze?nicki

From parrt at cs.usfca.edu  Tue Feb 16 11:13:24 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Feb 2010 11:13:24 -0800
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
	<14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
	<F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>
	<14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com>
Message-ID: <E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu>


On Feb 16, 2010, at 11:11 AM, Marcin Rze?nicki wrote:

> 
> 
> 2010/2/16 Terence Parr <parrt at cs.usfca.edu>
> The key to your question was:
> 
> "and it occurred to me that ANTLR does not really inspect follow set, it
> seems to inspect only what's left in the rule itself."
> 
> That improvement/bug is what I intend to fix :)  Actually, ANTLR v4 lexers will just plain work better (i.e., more like what you expect) ;)
> 
> 
> Well, yes, right, that would be really nice (by the way, when is this new release coming?),

not sure. i'm focusing on error handlng first then will do the meat.  Almost done with error handling.

> but when I am thinking of this; it would not really save the day in my case as follow set of LineSequence is actually {  '}' , ']'  } and what I need is loop escaping dependent on previous match, so some constrained context passing would be nice. 

try predicates. :)
Ter

From marcin.rzeznicki at gmail.com  Tue Feb 16 11:16:45 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 16 Feb 2010 20:16:45 +0100
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
	<14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
	<F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>
	<14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com>
	<E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu>
Message-ID: <14799bf61002161116m20fdf93cj9a93ae2a47f32e68@mail.gmail.com>

2010/2/16 Terence Parr <parrt at cs.usfca.edu>

>
>
> > but when I am thinking of this; it would not really save the day in my
> case as follow set of LineSequence is actually {  '}' , ']'  } and what I
> need is loop escaping dependent on previous match, so some constrained
> context passing would be nice.
>
> try predicates. :)
>

OK, I will ,thank you for your advice. Good luck with ANTLR development :-)




-- 
Greetings
Marcin Rze?nicki

From antlr at mirality.co.nz  Tue Feb 16 12:04:29 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 17 Feb 2010 09:04:29 +1300
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <9362e74e1002160315w48b64553s20efbd3d29542344@mail.gmail.co
 m>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<9362e74e1002140159j6cb4fd21j891daa2c912acb5a@mail.gmail.com>
	<20100214104820.6F5DF34183F9@www.antlr.org>
	<417838.1521.qm@web55905.mail.re3.yahoo.com>
	<9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>
	<936041.57065.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002150258w7b7ef8e9u657d5ac97b9ce7e5@mail.gmail.com>
	<958376.19618.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002152315k31feadc7k78e1bf4956da6980@mail.gmail.com>
	<697819.10851.qm@web55907.mail.re3.yahoo.com>
	<9362e74e1002160315w48b64553s20efbd3d29542344@mail.gmail.com>
Message-ID: <20100216200444.C9E4B3418452@www.antlr.org>

At 00:15 17/02/2010, Gokulakannan Somasundaram wrote:
 >ANTLRWorks doesn't support anything other than java for 
debugging.
 >I just tested it.

That's what the Debug Remote option is for.  First, you generate 
and compile your grammar externally, using the -debug option to 
ANTLR to make it add debugging support.  Then, you run your parser 
outside of ANTLRWorks (it will pause and wait for a debugging 
connection), then you pick Debug Remote in ANTLRWorks to connect 
to it, and debug as normal.

It's a bit more of a hassle than debugging Java code, but that's 
because ANTLRWorks doesn't know how to compile any other 
languages, so it makes sense.


From gokul007 at gmail.com  Tue Feb 16 12:19:22 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Wed, 17 Feb 2010 01:49:22 +0530
Subject: [antlr-interest] setting k Value Versus Predicates
In-Reply-To: <4b7afa5c.1a08c00a.6b0c.ffffb019SMTPIN_ADDED@mx.google.com>
References: <9362e74e1002101507y144bd8cfwe48e167c13f63a4d@mail.gmail.com>
	<417838.1521.qm@web55905.mail.re3.yahoo.com>
	<9362e74e1002141955w4c9a1e68kbfcd731ce6e02ff9@mail.gmail.com>
	<936041.57065.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002150258w7b7ef8e9u657d5ac97b9ce7e5@mail.gmail.com>
	<958376.19618.qm@web55908.mail.re3.yahoo.com>
	<9362e74e1002152315k31feadc7k78e1bf4956da6980@mail.gmail.com>
	<697819.10851.qm@web55907.mail.re3.yahoo.com>
	<9362e74e1002160315w48b64553s20efbd3d29542344@mail.gmail.com>
	<4b7afa5c.1a08c00a.6b0c.ffffb019SMTPIN_ADDED@mx.google.com>
Message-ID: <9362e74e1002161219h32aee39w4b1aec4f3275ccf7@mail.gmail.com>

It didn't strike me. Actually i am already using remote debugging only.
Thanks for the clarification.

Gokul.

On Wed, Feb 17, 2010 at 1:34 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:

> At 00:15 17/02/2010, Gokulakannan Somasundaram wrote:
> >ANTLRWorks doesn't support anything other than java for debugging.
> >I just tested it.
>
> That's what the Debug Remote option is for.  First, you generate and
> compile your grammar externally, using the -debug option to ANTLR to make it
> add debugging support.  Then, you run your parser outside of ANTLRWorks (it
> will pause and wait for a debugging connection), then you pick Debug Remote
> in ANTLRWorks to connect to it, and debug as normal.
>
> It's a bit more of a hassle than debugging Java code, but that's because
> ANTLRWorks doesn't know how to compile any other languages, so it makes
> sense.
>
>

From antlr at mirality.co.nz  Tue Feb 16 12:27:11 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 17 Feb 2010 09:27:11 +1300
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
	<14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
	<F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>
	<14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com>
	<E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu>
Message-ID: <20100216202815.6C54D3418463@www.antlr.org>

At 08:13 17/02/2010, Terence Parr wrote:
 >} and what I need is loop escaping dependent on previous match, 
so
 >some constrained context passing would be nice.
 >
 >try predicates. :)

While it's usually possible to frame the contents of a looping 
construct in a positive sense (which is what ANTLR currently 
requires), it'd be nice if there were a language construct that 
would let you do specific negative matches too (maybe a feature 
request for v4?).

For (a completely made up) example, consider a case where you 
might want to match any identifier except one starting with 
"foo".  In current ANTLR, you'd have to do one of these:
   FOOLIST: 'foo[' NON_FOO_ID+ ']';
   FOOLIST: 'foo[' ({!next_id_starts_with_foo()}? => ID)+ ']';
   FOOLIST: 'foo[' ((~'f' | 'f' ~'o' | 'fo' ~'o') => ID)+ ']';

It'd be nice if there was some way to express a negative match via 
a syntactic predicate, eg:
   FOOLIST: 'foo[' (('foo') => ~ | ID)+ ']';
(where '~' in an alt basically means "break", ie. match nothing 
and terminate the innermost loop.)
Or, perhaps better:
   FOOLIST: 'foo[' (('foo') ~=> ID)+ ']';
(where '~=>' means "only take this path if the predicate *fails*")

Granted, this sort of requirement doesn't come up often, but when 
it does it'd be nice to have a tidier way of expressing it; and 
it'd be fairly simple to implement... :)


From parrt at cs.usfca.edu  Tue Feb 16 12:31:26 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Feb 2010 12:31:26 -0800
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <20100216202815.9FC1384868@mail.cs.usfca.edu>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
	<14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
	<F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>
	<14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com>
	<E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu>
	<20100216202815.9FC1384868@mail.cs.usfca.edu>
Message-ID: <61A238B9-CC6A-4A60-8DEA-0297E46D39EF@cs.usfca.edu>


On Feb 16, 2010, at 12:27 PM, Gavin Lambert wrote:

> At 08:13 17/02/2010, Terence Parr wrote:
> >} and what I need is loop escaping dependent on previous match, so
> >some constrained context passing would be nice.
> >
> >try predicates. :)
> 
> While it's usually possible to frame the contents of a looping construct in a positive sense (which is what ANTLR currently requires), it'd be nice if there were a language construct that would let you do specific negative matches too (maybe a feature request for v4?).

Been thinking about that.

> For (a completely made up) example, consider a case where you might want to match any identifier except one starting with "foo".  In current ANTLR, you'd have to do one of these:
>  FOOLIST: 'foo[' NON_FOO_ID+ ']';
>  FOOLIST: 'foo[' ({!next_id_starts_with_foo()}? => ID)+ ']';
>  FOOLIST: 'foo[' ((~'f' | 'f' ~'o' | 'fo' ~'o') => ID)+ ']';
> 
> It'd be nice if there was some way to express a negative match via a syntactic predicate, eg:
>  FOOLIST: 'foo[' (('foo') => ~ | ID)+ ']';
> (where '~' in an alt basically means "break", ie. match nothing and terminate the innermost loop.)
> Or, perhaps better:
>  FOOLIST: 'foo[' (('foo') ~=> ID)+ ']';
> (where '~=>' means "only take this path if the predicate *fails*")
> 
> Granted, this sort of requirement doesn't come up often, but when it does it'd be nice to have a tidier way of expressing it; and it'd be fairly simple to implement... :)

happens only in lexer as far as i can tell but would be nice to have.

updated

http://www.antlr.org/wiki/display/~admin/2010/01/19/ANTLR+v4+lexers

Ter


From ttmrichter at gmail.com  Tue Feb 16 20:34:53 2010
From: ttmrichter at gmail.com (Michael Richter)
Date: Wed, 17 Feb 2010 12:34:53 +0800
Subject: [antlr-interest] ANTLR building and Maven 2
Message-ID: <ee970b291002162034x4e0748f7ycb35246d41c510f1@mail.gmail.com>

I think I'm being as thick as a whale sandwich here, but I can't get ANTLR
to work nicely with Maven 2 at all.  The instructions for this in a variety
of places are ... inconsistent and in most cases also not terribly well
written.  Not having any way to generate a functioning skeleton (that I can
see) doesn't help much.

I had the brilliant idea of using the ANTLR build process itself to solve
the problem by looking at a known-good pom.xml file that does the trick.
That's when I got hit by this:

michael at isolde:~/Development/antlr-3.2$ mvn
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   ANTLR Master build control POM
[INFO]   Antlr 3 Runtime
[INFO]   ANTLR Grammar Tool
[INFO]   Maven plugin for ANTLR V3
[INFO]   ANTLR gUnit
[INFO]   Maven plugin for gUnit ANTLR V3
[INFO]
------------------------------------------------------------------------
[INFO] Building ANTLR Master build control POM
[INFO]    task-segment: [install]
[INFO]
------------------------------------------------------------------------
[INFO] [buildnumber:create {execution: default}]
[INFO] Storing buildNumber: Feb 17, 2010 12:28:04 at timestamp:
1266380884520
[INFO]
------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO]
------------------------------------------------------------------------
[INFO] The scm url cannot be null.
[INFO]
------------------------------------------------------------------------
[INFO] Trace
java.lang.NullPointerException: The scm url cannot be null.
    at
org.apache.maven.scm.manager.AbstractScmManager.makeScmRepository(AbstractScmManager.java:181)
    at
org.codehaus.mojo.build.CreateMojo.getScmRepository(CreateMojo.java:722)
    at org.codehaus.mojo.build.CreateMojo.getScmBranch(CreateMojo.java:593)
    at org.codehaus.mojo.build.CreateMojo.execute(CreateMojo.java:452)
    at
org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
    at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
    at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
    at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
    at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
    at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
    at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
    at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
    at
org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
    at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
    at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
    at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
[INFO]
------------------------------------------------------------------------
[INFO] Total time: 3 seconds
[INFO] Finished at: Wed Feb 17 12:28:04 CST 2010
[INFO] Final Memory: 15M/176M
[INFO]
------------------------------------------------------------------------

This bothers me a bit, not being able to build the package from the provided
source.  What bothers me even more is the reference to the "scm URL".  A
quick grep of the pom.xml files finds one of them (runtime/Java/pom.xml)
that has an <scm>...</scm> tag -- and it's not empty.

I'm now at a complete loss for how to progress.  I can't use Maven on the
project I'm working on because I don't know how to get it working and I
can't find out how to make it work by looking at ANTLR's source because the
build is broken for me.  What's the next step?

-- 
"Perhaps people don't believe this, but throughout all of the discussions of
entering China our focus has really been what's best for the Chinese people.
It's not been about our revenue or profit or whatnot."
--Sergey Brin, demonstrating the emptiness of the "don't be evil" mantra.

From eric at collectivegenius.net  Tue Feb 16 20:58:08 2010
From: eric at collectivegenius.net (Eric Webb)
Date: Tue, 16 Feb 2010 20:58:08 -0800
Subject: [antlr-interest] ANTLR building and Maven 2
In-Reply-To: <ee970b291002162034x4e0748f7ycb35246d41c510f1@mail.gmail.com>
References: <ee970b291002162034x4e0748f7ycb35246d41c510f1@mail.gmail.com>
Message-ID: <4B7B7760.9000101@collectivegenius.net>

I think there is a bug (or change in behavior) in the latest version of 
buildnumber-maven-plugin.  I was able to get things compiling if I 
manually downgraded the version by adding the below to the pom.xml files 
in the <plugins> tag.

    <plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>buildnumber-maven-plugin</artifactId>
    <version>1.0-beta-3</version>
    <configuration>
    <format>{0,number}</format>
    <items>
    <item>buildNumber0</item>
    </items>
    </configuration>
    <executions>
    <execution>
    <goals>
    <goal>create</goal>
    </goals>
    </execution>
    </executions>
    </plugin>

I personally added the above in pom.xml, runtime/Java/pom.xml, and 
tool/pom.xml.

I am not sure about the actual fix, but this got things to working 
enough for me.

cheers,
eric


On 02/16/2010 08:34 PM, Michael Richter wrote:
> I think I'm being as thick as a whale sandwich here, but I can't get ANTLR
> to work nicely with Maven 2 at all.  The instructions for this in a variety
> of places are ... inconsistent and in most cases also not terribly well
> written.  Not having any way to generate a functioning skeleton (that I can
> see) doesn't help much.
>
> I had the brilliant idea of using the ANTLR build process itself to solve
> the problem by looking at a known-good pom.xml file that does the trick.
> That's when I got hit by this:
>
> michael at isolde:~/Development/antlr-3.2$ mvn
> [INFO] Scanning for projects...
> [INFO] Reactor build order:
> [INFO]   ANTLR Master build control POM
> [INFO]   Antlr 3 Runtime
> [INFO]   ANTLR Grammar Tool
> [INFO]   Maven plugin for ANTLR V3
> [INFO]   ANTLR gUnit
> [INFO]   Maven plugin for gUnit ANTLR V3
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Building ANTLR Master build control POM
> [INFO]    task-segment: [install]
> [INFO]
> ------------------------------------------------------------------------
> [INFO] [buildnumber:create {execution: default}]
> [INFO] Storing buildNumber: Feb 17, 2010 12:28:04 at timestamp:
> 1266380884520
> [INFO]
> ------------------------------------------------------------------------
> [ERROR] FATAL ERROR
> [INFO]
> ------------------------------------------------------------------------
> [INFO] The scm url cannot be null.
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Trace
> java.lang.NullPointerException: The scm url cannot be null.
>      at
> org.apache.maven.scm.manager.AbstractScmManager.makeScmRepository(AbstractScmManager.java:181)
>      at
> org.codehaus.mojo.build.CreateMojo.getScmRepository(CreateMojo.java:722)
>      at org.codehaus.mojo.build.CreateMojo.getScmBranch(CreateMojo.java:593)
>      at org.codehaus.mojo.build.CreateMojo.execute(CreateMojo.java:452)
>      at
> org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
>      at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
>      at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
>      at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
>      at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
>      at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
>      at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
>      at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
>      at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
>      at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
>      at
> org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
>      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>      at
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
>      at
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
>      at java.lang.reflect.Method.invoke(Method.java:597)
>      at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
>      at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
>      at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
>      at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
> [INFO]
> ------------------------------------------------------------------------
> [INFO] Total time: 3 seconds
> [INFO] Finished at: Wed Feb 17 12:28:04 CST 2010
> [INFO] Final Memory: 15M/176M
> [INFO]
> ------------------------------------------------------------------------
>
> This bothers me a bit, not being able to build the package from the provided
> source.  What bothers me even more is the reference to the "scm URL".  A
> quick grep of the pom.xml files finds one of them (runtime/Java/pom.xml)
> that has an<scm>...</scm>  tag -- and it's not empty.
>
> I'm now at a complete loss for how to progress.  I can't use Maven on the
> project I'm working on because I don't know how to get it working and I
> can't find out how to make it work by looking at ANTLR's source because the
> build is broken for me.  What's the next step?
>
>    

From jimi at temporal-wave.com  Tue Feb 16 22:10:31 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 16 Feb 2010 22:10:31 -0800
Subject: [antlr-interest] ANTLR building and Maven 2
In-Reply-To: <ee970b291002162034x4e0748f7ycb35246d41c510f1@mail.gmail.com>
Message-ID: <49568fc689e3c64f9c417677b114b251@temporal-wave.com>

Did you look in: http://antlr.markmail.org/ where the problem you have with the build is answered a number of times? Next release will solve that problem.


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Michael Richter
> Sent: Tuesday, February 16, 2010 8:35 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR building and Maven 2
> 
> I think I'm being as thick as a whale sandwich here, but I can't get
> ANTLR
> to work nicely with Maven 2 at all.  The instructions for this in a
> variety
> of places are ... inconsistent

> and in most cases also not terribly well
> written. 

How to win friends and influence people - sigh. You did of course visit:

http://www.antlr.org/antlr3-maven-plugin/index.html

Which, if you managed to find the Maven plugin at all, would direct you to that page, which I happen to think is pretty well written, provides all the Maven required elements and is pretty much fool proof.


> Not having any way to generate a functioning skeleton (that I
> can
> see) doesn't help much.

You noticed that there is a generator that gives you a working project right? A 10 second google search will point you at:

http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+with+Maven

If you have any pointers to why this does not give you step by step instructions, please let me know and I will try and make it more foolproof.

Jim







From ttmrichter at gmail.com  Tue Feb 16 23:51:26 2010
From: ttmrichter at gmail.com (Michael Richter)
Date: Wed, 17 Feb 2010 15:51:26 +0800
Subject: [antlr-interest] ANTLR building and Maven 2
In-Reply-To: <49568fc689e3c64f9c417677b114b251@temporal-wave.com>
References: <ee970b291002162034x4e0748f7ycb35246d41c510f1@mail.gmail.com>
	<49568fc689e3c64f9c417677b114b251@temporal-wave.com>
Message-ID: <ee970b291002162351w224dacf8pd24cd8e96c6f7b39@mail.gmail.com>

I just now put in a search there with the string "maven".  I got back a
mostly-empty page.  What are the magic words I need to search for to find
these answers?

On 17 February 2010 14:10, Jim Idle <jimi at temporal-wave.com> wrote:

> Did you look in: http://antlr.markmail.org/ where the problem you have
> with the build is answered a number of times? Next release will solve that
> problem.
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Michael Richter
> > Sent: Tuesday, February 16, 2010 8:35 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] ANTLR building and Maven 2
> >
> > I think I'm being as thick as a whale sandwich here, but I can't get
> > ANTLR
> > to work nicely with Maven 2 at all.  The instructions for this in a
> > variety
> > of places are ... inconsistent
>
> > and in most cases also not terribly well
> > written.
>
> How to win friends and influence people - sigh. You did of course visit:
>
> http://www.antlr.org/antlr3-maven-plugin/index.html
>
> Which, if you managed to find the Maven plugin at all, would direct you to
> that page, which I happen to think is pretty well written, provides all the
> Maven required elements and is pretty much fool proof.
>
>
> > Not having any way to generate a functioning skeleton (that I
> > can
> > see) doesn't help much.
>
> You noticed that there is a generator that gives you a working project
> right? A 10 second google search will point you at:
>
> http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+with+Maven
>
> If you have any pointers to why this does not give you step by step
> instructions, please let me know and I will try and make it more foolproof.
>
> Jim
>
>
>
>
>
>
>


-- 
"Perhaps people don't believe this, but throughout all of the discussions of
entering China our focus has really been what's best for the Chinese people.
It's not been about our revenue or profit or whatnot."
--Sergey Brin, demonstrating the emptiness of the "don't be evil" mantra.

From ttmrichter at gmail.com  Tue Feb 16 23:58:41 2010
From: ttmrichter at gmail.com (Michael Richter)
Date: Wed, 17 Feb 2010 15:58:41 +0800
Subject: [antlr-interest] ANTLR building and Maven 2
In-Reply-To: <49568fc689e3c64f9c417677b114b251@temporal-wave.com>
References: <ee970b291002162034x4e0748f7ycb35246d41c510f1@mail.gmail.com>
	<49568fc689e3c64f9c417677b114b251@temporal-wave.com>
Message-ID: <ee970b291002162358q4631743ah5f50c5ed5ae88d9a@mail.gmail.com>

Missed this earlier.

On 17 February 2010 14:10, Jim Idle <jimi at temporal-wave.com> wrote:

> You noticed that there is a generator that gives you a working project
> right?


No, actually I didn't.


> A 10 second google search will point you at:
>
> http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+with+Maven
>
> If you have any pointers to why this does not give you step by step
> instructions, please let me know and I will try and make it more foolproof.
>

I guess the fact that this page didn't show up in my Google search when I
went looking for it might have been a contributing factor?  You know, kind
of like how your other link, when I searched on "maven" gave me a page that
was three-quarters blank?

-- 
"Perhaps people don't believe this, but throughout all of the discussions of
entering China our focus has really been what's best for the Chinese people.
It's not been about our revenue or profit or whatnot."
--Sergey Brin, demonstrating the emptiness of the "don't be evil" mantra.

From joestelmach at gmail.com  Wed Feb 17 07:59:24 2010
From: joestelmach at gmail.com (Joe stelmach)
Date: Wed, 17 Feb 2010 10:59:24 -0500
Subject: [antlr-interest] help with error recovery
Message-ID: <473f44321002170759v7f5d4a79y73f154a18e43019d@mail.gmail.com>

I'm looking for some help implementing a custom error recovery strategy.

Consider the following grammar which accepts strings of the form
"ab--ab--cd--"..., and generates flat AST's of the form: GROUP["ab"]
GROUP["ab"] GROUP["cd"]...

grammar Test;

options {
  output=AST;
}

tokens {
  GROUP;
}

foo
  : (bar '--')+ -> bar+
  ;

bar
  : (('a' 'b') | ('c' 'd')) -> GROUP[$bar.text]
  ;

Now suppose we feed the parser the input string "ab--ac--cd--".  I
would like the resulting AST to look like: GROUP["ab"] GROUP["cd"]
corresponding to the first "ab" and the last "cd" of the input string.
 In other words, when the parser starts to match a bar rule but fails
(as it will when it encounters the first 'c' token in our example
input,) I'd like to scan past all tokens until the next '--' token,
and then tell the parser to back up to the state it was in just after
encountering the first 'b' token.

I'm able to over-ride what I think to be the appropriate methods of
BaseRecognizer, and I understand how to scan past and consume the
tokens I don't care about, but I'm unsure of how to direct the parser
back to the previous state (or if it's even possible.)

Any help would be appreciated.

?- Joe

From jimi at temporal-wave.com  Wed Feb 17 08:23:11 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 17 Feb 2010 08:23:11 -0800
Subject: [antlr-interest] ANTLR building and Maven 2
In-Reply-To: <ee970b291002162358q4631743ah5f50c5ed5ae88d9a@mail.gmail.com>
Message-ID: <61407b8daf17f142965dd05b5989693d@temporal-wave.com>

So, I went to markmail.org and typed in Maven. This gave me 365 messages, 133 of which are from me. Being too MANY hits, I added the word problem. The first hit against that search gives:
 
http://markmail.org/message/z5e4dtwdml3g4q5u
 
Which gives you the answer. I guess it isn?t mostly blank after all.
 
You can also use markmail to find:
 
http://antlr.markmail.org/search/?q=maven+archetype
 
The Google search:
 
antlr maven archetype
 
Returns the ANTLR page about archetypes as the first hit and 279,000 other pages, at least some of which reference it. If I just type ?antlr maven? then I get some false leads, but I instantly notices that some of these leads are on antlr.org so I use: site:antrl.org and the top hit is a wiki page referring to the official documentation, which as far as I know contains everything you need except archetype details.
 
So I am guessing that you have your own versions of markmail.org and google. But, if you don?t like the docs then nobody is forcing you to use it.
 
Jim
 
 
 
 
 
 
From: Michael Richter [mailto:ttmrichter at gmail.com] 
Sent: Tuesday, February 16, 2010 11:59 PM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] ANTLR building and Maven 2
 
Missed this earlier.

On 17 February 2010 14:10, Jim Idle <jimi at temporal-wave.com> wrote:
You noticed that there is a generator that gives you a working project right? 

No, actually I didn't.
 
A 10 second google search will point you at:

http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+with+Maven

If you have any pointers to why this does not give you step by step instructions, please let me know and I will try and make it more foolproof.

I guess the fact that this page didn't show up in my Google search when I went looking for it might have been a contributing factor?  You know, kind of like how your other link, when I searched on "maven" gave me a page that was three-quarters blank?

-- 
"Perhaps people don't believe this, but throughout all of the discussions of entering China our focus has really been what's best for the Chinese people. It's not been about our revenue or profit or whatnot."
--Sergey Brin, demonstrating the emptiness of the "don't be evil" mantra.



From jimi at temporal-wave.com  Wed Feb 17 08:44:44 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 17 Feb 2010 08:44:44 -0800
Subject: [antlr-interest] help with error recovery
In-Reply-To: <473f44321002170759v7f5d4a79y73f154a18e43019d@mail.gmail.com>
Message-ID: <3e0d6c6c9a95b74b84078ba4b9994a98@temporal-wave.com>

Do this:

1) Move those to real lexer tokens (though I understand this may just be an example)
2) Use predicates for real things
3) Eat and discard the rest

So:

foo
  : ( (bar)=>bar | .)+ ->bar+
  ;

Here I show the whole rule bar as the predicate, which can be expensive if the rule is complicated, so construct a rule that has the minimum token set to correctly predict bar, rather than the complete rule, if you have a complicated rule.

If you find that you must do this via error recovery and resync the input to something manually, then you want:

http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Joe stelmach
> Sent: Wednesday, February 17, 2010 7:59 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] help with error recovery
> 
> I'm looking for some help implementing a custom error recovery
> strategy.
> 
> Consider the following grammar which accepts strings of the form
> "ab--ab--cd--"..., and generates flat AST's of the form: GROUP["ab"]
> GROUP["ab"] GROUP["cd"]...
> 
> grammar Test;
> 
> options {
>   output=AST;
> }
> 
> tokens {
>   GROUP;
> }
> 
> foo
>   : (bar '--')+ -> bar+
>   ;
> 
> bar
>   : (('a' 'b') | ('c' 'd')) -> GROUP[$bar.text]
>   ;
> 
> Now suppose we feed the parser the input string "ab--ac--cd--".  I
> would like the resulting AST to look like: GROUP["ab"] GROUP["cd"]
> corresponding to the first "ab" and the last "cd" of the input string.
>  In other words, when the parser starts to match a bar rule but fails
> (as it will when it encounters the first 'c' token in our example
> input,) I'd like to scan past all tokens until the next '--' token,
> and then tell the parser to back up to the state it was in just after
> encountering the first 'b' token.
> 
> I'm able to over-ride what I think to be the appropriate methods of
> BaseRecognizer, and I understand how to scan past and consume the
> tokens I don't care about, but I'm unsure of how to direct the parser
> back to the previous state (or if it's even possible.)
> 
> Any help would be appreciated.
> 
> ?- Joe
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From hvmedhaj at gmail.com  Wed Feb 17 11:07:58 2010
From: hvmedhaj at gmail.com (venkat medhaj)
Date: Wed, 17 Feb 2010 14:07:58 -0500
Subject: [antlr-interest] how to construct an AST ?
In-Reply-To: <f25256041001252047t265abe7ep13b242398d5c83b0@mail.gmail.com>
References: <f25256041001252047t265abe7ep13b242398d5c83b0@mail.gmail.com>
Message-ID: <f25256041002171107r4ad6c1f7y13de8ed9c695436f@mail.gmail.com>

Hi,
      I was trying to run see how the Java grammar works but unfortunately,
it was throwing some errors. I downloaded the .g file for the java 1.6 by
YANG JIANG and when I tried saving that on eclipse, I get the following
error. Can someone please tell me whats going on and how to fix that ?
Basically, I want to take a Java file and run that against the grammar and
see the AST. Thats my goal and firstly, I want to get the grammar running
correctly. Although I follwed the tutorial, I wasnt able to figure out what
was the issue with this partiucalr grammar. Also, if anyone could shed some
light as to what are the glitches that I may encounter while experimenting
on this, that would be great.  I would appreciate it if scott could shed
some light on this. Thanks a lot scott. Your videos have been truly helpful.


Multiple markers at this line

- (209): Multiple token rules can match input such as "'!'": BANG, BANGEQ

As a result, token(s) BANGEQ were disabled for that input

- (208): The following token definitions can never be matched because prior
tokens match the same input: INTLITERAL,DOUBLELITERAL,LINE_..........

-V




On Mon, Jan 25, 2010 at 11:47 PM, venkat medhaj <hvmedhaj at gmail.com> wrote:

> Hi, I am a newbie to ANTLR and I am learning to use Antlr lately. I want to
> generate an AST for the .g file i.e the grammar file available, the target
> language being Java 1.6.
> Can anyone please tell me how to proceed ? I find it a bit confusing.
>
> Thnks,
> -V
>

From joestelmach at gmail.com  Wed Feb 17 11:21:46 2010
From: joestelmach at gmail.com (joestelmach at gmail.com)
Date: Wed, 17 Feb 2010 19:21:46 +0000 (UTC)
Subject: [antlr-interest] help with error recovery
In-Reply-To: <3e0d6c6c9a95b74b84078ba4b9994a98@temporal-wave.com>
References: <3e0d6c6c9a95b74b84078ba4b9994a98@temporal-wave.com>
Message-ID: <19-9-9f0c63c2-d08c-4e4a-af00-a2aba3ae9709@zenbe.com>

Thank you Jim - I hadn't thought about the problem in that way.

- Joe


On Wed, Feb 17, 2010 at 11:44 AM "Jim Idle" <jimi at temporal-wave.com> wrote:
>Do this:
> 
> 1) Move those to real lexer tokens (though I understand this may just be an example)
> 2) Use predicates for real things
> 3) Eat and discard the rest
> 
> So:
> 
> foo
>   : ( (bar)=>bar | .)+ ->bar+
>   ;
> 
> Here I show the whole rule bar as the predicate, which can be expensive if the rule is complicated, so construct a rule that has the minimum token set to correctly predict bar, rather than the complete rule, if you have a complicated rule.
> 
> If you find that you must do this via error recovery and resync the input to something manually, then you want:
> 
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
> 
> Jim
> 
> 
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Joe stelmach
> > Sent: Wednesday, February 17, 2010 7:59 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] help with error recovery
> > 
> > I'm looking for some help implementing a custom error recovery
> > strategy.
> > 
> > Consider the following grammar which accepts strings of the form
> > "ab--ab--cd--"..., and generates flat AST's of the form: GROUP["ab"]
> > GROUP["ab"] GROUP["cd"]...
> > 
> > grammar Test;
> > 
> > options {
> >   output=AST;
> > }
> > 
> > tokens {
> >   GROUP;
> > }
> > 
> > foo
> >   : (bar '--')+ -> bar+
> >   ;
> > 
> > bar
> >   : (('a' 'b') | ('c' 'd')) -> GROUP[$bar.text]
> >   ;
> > 
> > Now suppose we feed the parser the input string "ab--ac--cd--".  I
> > would like the resulting AST to look like: GROUP["ab"] GROUP["cd"]
> > corresponding to the first "ab" and the last "cd" of the input string.
> >  In other words, when the parser starts to match a bar rule but fails
> > (as it will when it encounters the first 'c' token in our example
> > input,) I'd like to scan past all tokens until the next '--' token,
> > and then tell the parser to back up to the state it was in just after
> > encountering the first 'b' token.
> > 
> > I'm able to over-ride what I think to be the appropriate methods of
> > BaseRecognizer, and I understand how to scan past and consume the
> > tokens I don't care about, but I'm unsure of how to direct the parser
> > back to the previous state (or if it's even possible.)
> > 
> > Any help would be appreciated.
> > 
> > - Joe
> > 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Wed Feb 17 11:30:28 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 17 Feb 2010 11:30:28 -0800
Subject: [antlr-interest] how to construct an AST ?
In-Reply-To: <f25256041002171107r4ad6c1f7y13de8ed9c695436f@mail.gmail.com>
Message-ID: <22c8f3d0b4de624a936c5d152902c507@temporal-wave.com>

I think you need to increase the value of -Xconversiontimeout to 10000

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of venkat medhaj
> Sent: Wednesday, February 17, 2010 11:08 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] how to construct an AST ?
> 
> Hi,
>       I was trying to run see how the Java grammar works but
> unfortunately,
> it was throwing some errors. I downloaded the .g file for the java 1.6
> by
> YANG JIANG and when I tried saving that on eclipse, I get the following
> error. Can someone please tell me whats going on and how to fix that ?
> Basically, I want to take a Java file and run that against the grammar
> and
> see the AST. Thats my goal and firstly, I want to get the grammar
> running
> correctly. Although I follwed the tutorial, I wasnt able to figure out
> what
> was the issue with this partiucalr grammar. Also, if anyone could shed
> some
> light as to what are the glitches that I may encounter while
> experimenting
> on this, that would be great.  I would appreciate it if scott could
> shed
> some light on this. Thanks a lot scott. Your videos have been truly
> helpful.
> 
> 
> Multiple markers at this line
> 
> - (209): Multiple token rules can match input such as "'!'": BANG,
> BANGEQ
> 
> As a result, token(s) BANGEQ were disabled for that input
> 
> - (208): The following token definitions can never be matched because
> prior
> tokens match the same input: INTLITERAL,DOUBLELITERAL,LINE_..........
> 
> -V
> 
> 
> 
> 
> On Mon, Jan 25, 2010 at 11:47 PM, venkat medhaj <hvmedhaj at gmail.com>
> wrote:
> 
> > Hi, I am a newbie to ANTLR and I am learning to use Antlr lately. I
> want to
> > generate an AST for the .g file i.e the grammar file available, the
> target
> > language being Java 1.6.
> > Can anyone please tell me how to proceed ? I find it a bit confusing.
> >
> > Thnks,
> > -V
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From fridi70 at gmx.de  Wed Feb 17 12:42:14 2010
From: fridi70 at gmx.de (fridi)
Date: Wed, 17 Feb 2010 21:42:14 +0100
Subject: [antlr-interest] v3.2 C# runtime?
In-Reply-To: <20100120004634.274280@gmx.net>
References: <4B55E238.1080408@gmail.com> <20100120004634.274280@gmx.net>
Message-ID: <4B7C54A6.1020407@gmx.de>

Hi Johannes,

does that mean that I can use ANTLR3.2 to create the C#sources (like to 
work with ANTLR IDE) and use them with the 3.1.3 .net runtime?

Thanks in advance, fridi


Johannes Luber schrieb:
>> I'm looking for the ANTLR v3.2 C# runtime support assemblies. I must be
>> missing something because I'm having no luck finding it. The page here
>>
>>     http://www.antlr.org/download/CSharp
>>
>> does not include it. I thought, "Oh, okay... I'll download the source
>> code and compile it myself." However the file antlr-3.2.tar.gz pointed
>> at by the "ANTLR 3.2 source distribution" link on
>> http://www.antlr.org/download.html seems to only contain the source for
>> the Java runtime. I attempted a Google search but it only turned up the
>> C# runtime for v3.1.3.
>>
>> Peter
>>     
>
> I'm still working on the 3.2 version. Unless you need the tree pattern matching feature you can stick to the latest version. Otherwise you'd need the repository version, where at least one missing file and a bug have been reported already.
>
> Johannes
>   


From JALuber at gmx.de  Wed Feb 17 16:57:27 2010
From: JALuber at gmx.de (Johannes Luber)
Date: Thu, 18 Feb 2010 01:57:27 +0100
Subject: [antlr-interest] v3.2 C# runtime?
In-Reply-To: <4B7C54A6.1020407@gmx.de>
References: <4B55E238.1080408@gmail.com> <20100120004634.274280@gmx.net>
	<4B7C54A6.1020407@gmx.de>
Message-ID: <20100218005727.280220@gmx.net>

> Hi Johannes,
> 
> does that mean that I can use ANTLR3.2 to create the C#sources (like to 
> work with ANTLR IDE) and use them with the 3.1.3 .net runtime?
> 
> Thanks in advance, fridi

Yes, you can so far. Once I've finished the API changes, it won't work like this, but then the runtime will be updated, too.

Johannes
> 
> 
> Johannes Luber schrieb:
> >> I'm looking for the ANTLR v3.2 C# runtime support assemblies. I must be
> >> missing something because I'm having no luck finding it. The page here
> >>
> >>     http://www.antlr.org/download/CSharp
> >>
> >> does not include it. I thought, "Oh, okay... I'll download the source
> >> code and compile it myself." However the file antlr-3.2.tar.gz pointed
> >> at by the "ANTLR 3.2 source distribution" link on
> >> http://www.antlr.org/download.html seems to only contain the source for
> >> the Java runtime. I attempted a Google search but it only turned up the
> >> C# runtime for v3.1.3.
> >>
> >> Peter
> >>     
> >
> > I'm still working on the 3.2 version. Unless you need the tree pattern
> matching feature you can stick to the latest version. Otherwise you'd need
> the repository version, where at least one missing file and a bug have been
> reported already.
> >
> > Johannes
> >   

-- 
NEU: Mit GMX DSL ?ber 1000,- ? sparen!
http://portal.gmx.net/de/go/dsl01

From kferrio at gmail.com  Wed Feb 17 21:14:06 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Thu, 18 Feb 2010 05:14:06 +0000
Subject: [antlr-interest] v4 lexers
Message-ID: <247457018-1266470053-cardhu_decombobulator_blackberry.rim.net-616391928-@bda428.bisx.prod.on.blackberry>

Regarding the wiki page by the same subject... I'm clearly no expert in the implementation guts but moving software stack seems like it could have a couple more benefits in addition to the ones you wrote about.  The improved "separation of concerns" would make it easier (at least for me!) to follow and debug the resulting target code.  Also it might accelerate the development (and maintenance) of non-Java-like targets.  

Also I hope Gavin Lambert's suggestion for "negative context" via exclusionary predicates makes it into v4. 

True, the hybrid approach is the key architectural gem which will make v4 even more powerful for "edgy" grammars.    But the separate stack will potentially benefit *every* grammar.   And exclusionary predicates will afford simple expression to certain simple grammars which I suspect may actually be more common than listserv traffic would suggest.  

Anyway thanks for the glimpse into the future.   I look forward to learning v4 all over from the beginning!

Kyle 

Sent from my Verizon Wireless BlackBerry

From christian.pontesegger at web.de  Thu Feb 18 08:18:00 2010
From: christian.pontesegger at web.de (Christian Pontesegger)
Date: Thu, 18 Feb 2010 17:18:00 +0100
Subject: [antlr-interest] Tree Grammar for loops
Message-ID: <4B7D6838.9060804@web.de>

Hi there,

I hope this list is intendend to ask for support.

I am desperately trying to write a tree grammar for a do-while loop. I
got the following so far:

The source for the loop:
----------------------------

    int $loop = 0
    do {
        $loop = $loop + 1
        foo()
    } while ($loop < 3)


for such a loop my parser gives me:
---------------------------------------

    (= int ($ loop) 0) (do { (= ($ loop) (+ ($ loop) 1)) foo } (< ($
loop) 3))


TreeGrammar.g:
-----------------------

doWhileStatement
    :
        ^(                                           
        head='do' '{'                     {    int loopHead =
((CommonTree) head).getTokenStartIndex(); }
            statementList
        '}' e=expression              {    if (e.isTrue()) {
                                                           
input.seek(loopHead);
                                                           
doWhileStatement();
                                                        }
                                                    }
        )
    ;

the TreeGrammar is able to recognize the loop, but I am not able to run
the loop a second time. as calling doWhileStatement() runs into an
exception. How can I traverse parts of my tree again?

I was looking for tutorials and found:
http://www.antlr.org/wiki/display/CS652/Tree-based+interpreters

... but it seems a bit out of date.

any help is appreciated
regards
Christian


From jimi at temporal-wave.com  Thu Feb 18 08:37:38 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 18 Feb 2010 08:37:38 -0800
Subject: [antlr-interest] Tree Grammar for loops
In-Reply-To: <4B7D6838.9060804@web.de>
Message-ID: <9b079293ab9bb549ae8f45a8d527956f@temporal-wave.com>

Try input.mark() and input.release() instead?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian Pontesegger
> Sent: Thursday, February 18, 2010 8:18 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Tree Grammar for loops
> 
> Hi there,
> 
> I hope this list is intendend to ask for support.
> 
> I am desperately trying to write a tree grammar for a do-while loop. I
> got the following so far:
> 
> The source for the loop:
> ----------------------------
> 
>     int $loop = 0
>     do {
>         $loop = $loop + 1
>         foo()
>     } while ($loop < 3)
> 
> 
> for such a loop my parser gives me:
> ---------------------------------------
> 
>     (= int ($ loop) 0) (do { (= ($ loop) (+ ($ loop) 1)) foo } (< ($
> loop) 3))
> 
> 
> TreeGrammar.g:
> -----------------------
> 
> doWhileStatement
>     :
>         ^(
>         head='do' '{'                     {    int loopHead =
> ((CommonTree) head).getTokenStartIndex(); }
>             statementList
>         '}' e=expression              {    if (e.isTrue()) {
> 
> input.seek(loopHead);
> 
> doWhileStatement();
>                                                         }
>                                                     }
>         )
>     ;
> 
> the TreeGrammar is able to recognize the loop, but I am not able to run
> the loop a second time. as calling doWhileStatement() runs into an
> exception. How can I traverse parts of my tree again?
> 
> I was looking for tutorials and found:
> http://www.antlr.org/wiki/display/CS652/Tree-based+interpreters
> 
> ... but it seems a bit out of date.
> 
> any help is appreciated
> regards
> Christian
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From antlr at mirality.co.nz  Thu Feb 18 10:38:11 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 19 Feb 2010 07:38:11 +1300
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <20100216202815.6C54D3418463@www.antlr.org>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com>
	<87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu>
	<14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com>
	<F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu>
	<14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com>
	<E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu>
	<20100216202815.6C54D3418463@www.antlr.org>
Message-ID: <20100218183832.F3C2D3418384@www.antlr.org>

At 09:27 17/02/2010, I wrote:
 >It'd be nice if there was some way to express a negative match
 >via a syntactic predicate, eg:
 >   FOOLIST: 'foo[' (('foo') => ~ | ID)+ ']';
 >(where '~' in an alt basically means "break", ie. match nothing
 >and terminate the innermost loop.)
 >Or, perhaps better:
 >   FOOLIST: 'foo[' (('foo') ~=> ID)+ ']';
 >(where '~=>' means "only take this path if the predicate 
*fails*")

Another possible syntax might be to allow ~ to act on sequences as 
well as sets.  Then you could use either of these:
   FOOLIST: 'foo[' ((~'foo') => ID)+ ']';
   FOOLIST: 'foo[' ((~('f' 'o' 'o')) => ID)+ ']';

This approach might be even more useful than the first, although 
it's harder to define what the result should be if you try to make 
a sequence out of both negative and positive sequences (ie. what 
should "~'foo' 'bar'" mean?  Is it "any three characters except 
'foo', followed by 'bar'", or "any number of characters except 
'foo', followed by 'bar'"?  Or just meaningless?  What if it were 
"~('foo'|'quux') 'bar'"?  [Assuming this is all at lexer context, 
so these are sequences of characters rather than individual 
tokens.]).


From j.pool at ision.nl  Thu Feb 18 10:52:24 2010
From: j.pool at ision.nl (John Pool)
Date: Thu, 18 Feb 2010 19:52:24 +0100
Subject: [antlr-interest] C# example of "lexical filter mode" ??
Message-ID: <!&!AAAAAAAAAAAYAAAAAAAAAJ6HnVdlvLVNnvOxG5JxQq7CgAAAEAAAAOtQlMz4rthMmaKF9Qha2fIBAAAAAA==@ision.nl>

In The Definitive ANTLR Reference, at page 113 there is an example of a
lexer grammar, with at the end of the section the remark 'Lexical filter
mode is generally not used with a parser because the lexer yields an
incomplete stream of tokens.' 

 

I declared the fuzzy parser as follows: 

FuzzyParser lexer = new FuzzyParser (new ANTLRFileStream (sourceFileName));
// derives from Lexer class

Question: how do I 'execute' such a grammar lexer in C# without feeding it
into a parser? 

 

I tried downloading http://www.antlr.org/download/examples-v3.tar.gz, as
suggested in the book, but that URL won't open. 

Regards, John Pool 

 


From bkiers at gmail.com  Thu Feb 18 11:06:08 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 18 Feb 2010 20:06:08 +0100
Subject: [antlr-interest] C# example of "lexical filter mode" ??
In-Reply-To: <!&!AAAAAAAAAAAYAAAAAAAAAJ6HnVdlvLVNnvOxG5JxQq7CgAAAEAAAAOtQlMz4rthMmaKF9Qha2fIBAAAAAA==@ision.nl>
References: <!&!AAAAAAAAAAAYAAAAAAAAAJ6HnVdlvLVNnvOxG5JxQq7CgAAAEAAAAOtQlMz4rthMmaKF9Qha2fIBAAAAAA==@ision.nl>
Message-ID: <af443a971002181106u2f37211s3610567fac6d16e5@mail.gmail.com>

Hi John,


On Thu, Feb 18, 2010 at 7:52 PM, John Pool <j.pool at ision.nl> wrote:

> ...
>
> Question: how do I 'execute' such a grammar lexer in C# without feeding it
> into a parser?
>
>
You probably meant to instantiate a FuzzyLexer instead of a FuzzyParser
(unless your lexer grammar is called FuzzyParser, of course...).
Try this:

        ANTLRStringStream in = new ANTLRStringStream("...some source
as a String...");
        FuzzyLexer lexer = new FuzzyLexer(in);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        for(Object obj : tokens.getTokens()) {
            Token token = (Token)obj;
            System.out.println(token);
        }

Although the code above is Java, the C# variant can't be that much
different.

For a complete example how to use such a lexer, see the first answer from
this post on Stackoverflow:
http://stackoverflow.com/questions/2284571/how-to-match-a-comment-unless-its-in-a-quoted-string




>
> I tried downloading http://www.antlr.org/download/examples-v3.tar.gz, as
> suggested in the book, but that URL won't open.
>

No problem here: I can download that file just fine.

Regards,

Bart.

From hvmedhaj at gmail.com  Thu Feb 18 11:13:11 2010
From: hvmedhaj at gmail.com (venkat medhaj)
Date: Thu, 18 Feb 2010 14:13:11 -0500
Subject: [antlr-interest] Java Grammar that outputs AST
Message-ID: <f25256041002181113s2154ef30k8cce8821c207c7c@mail.gmail.com>

Hi,
     Is there any Java grammar file available that outputs the AST. Say for
example, I have a Java file and I want to output the AST for that file on
the eclipse console like the one thats done in the video tutorials. I am
trying to see how an AST looks like for a test Java file. All I could find
on the website was a java 1.6  .g file but it doesnt output the AST as
such.
That would be great if I could the required grammar file.

Thanks,
-V

From kferrio at gmail.com  Thu Feb 18 12:27:15 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Thu, 18 Feb 2010 20:27:15 +0000
Subject: [antlr-interest] Request for Change regarding Lexer (?)
In-Reply-To: <20100218183832.F3C2D3418384@www.antlr.org>
References: <14799bf61002161029p2ef0e4d1n2ad844504ed8c3e9@mail.gmail.com><87F25784-5237-45F0-9AEB-7ABC28BAEDEB@cs.usfca.edu><14799bf61002161039y1fd5a309ve70829c0c6ee9193@mail.gmail.com><F6E0306F-D73C-46C9-8549-CB1C6321070E@cs.usfca.edu><14799bf61002161111j2b8a49c6p979b44a261d0bc9c@mail.gmail.com><E167B848-4426-4247-A11D-0C36C432753A@cs.usfca.edu><20100216202815.6C54D3418463@www.antlr.org><20100218183832.F3C2D3418384@www.antlr.org>
Message-ID: <992659792-1266524835-cardhu_decombobulator_blackberry.rim.net-1161648890-@bda428.bisx.prod.on.blackberry>

Gavin,

Of your three ideas ...two equivalents in one post and a third more powerful one in this post ... I currently like the second equivalent from the first post...viz ~=> for two reasons.  First I think your third form is so powerful as to encourage abuse and expose a lot of strange edge-cases for Terence to anticipate and guard against.  Not sure, but seems possible.  Second I just like having one token (second equivalent) instead of two tokens (first equivalent) to express the idea cleanly.  Admittedly this is a style preference and I have been accused of questionable  taste more than once.  :)  Your idea is helpful I would use it regardless of how it is expressed in antlr.

Cheers,
Kyle 

Sent from my Verizon Wireless BlackBerry

-----Original Message-----
From: Gavin Lambert <antlr at mirality.co.nz>
Date: Fri, 19 Feb 2010 07:38:11 
To: Terence Parr<parrt at cs.usfca.edu>
Cc: <antlr-interest at antlr.org>
Subject: Re: [antlr-interest] Request for Change regarding Lexer (?)

At 09:27 17/02/2010, I wrote:
 >It'd be nice if there was some way to express a negative match
 >via a syntactic predicate, eg:
 >   FOOLIST: 'foo[' (('foo') => ~ | ID)+ ']';
 >(where '~' in an alt basically means "break", ie. match nothing
 >and terminate the innermost loop.)
 >Or, perhaps better:
 >   FOOLIST: 'foo[' (('foo') ~=> ID)+ ']';
 >(where '~=>' means "only take this path if the predicate 
*fails*")

Another possible syntax might be to allow ~ to act on sequences as 
well as sets.  Then you could use either of these:
   FOOLIST: 'foo[' ((~'foo') => ID)+ ']';
   FOOLIST: 'foo[' ((~('f' 'o' 'o')) => ID)+ ']';

This approach might be even more useful than the first, although 
it's harder to define what the result should be if you try to make 
a sequence out of both negative and positive sequences (ie. what 
should "~'foo' 'bar'" mean?  Is it "any three characters except 
'foo', followed by 'bar'", or "any number of characters except 
'foo', followed by 'bar'"?  Or just meaningless?  What if it were 
"~('foo'|'quux') 'bar'"?  [Assuming this is all at lexer context, 
so these are sequences of characters rather than individual 
tokens.]).


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From hvmedhaj at gmail.com  Thu Feb 18 18:46:57 2010
From: hvmedhaj at gmail.com (venkat medhaj)
Date: Thu, 18 Feb 2010 21:46:57 -0500
Subject: [antlr-interest] test-java program not working
Message-ID: <f25256041002181846g53c56a58vdccd71b401ee2011@mail.gmail.com>

I found a Java 1.5 grammar that has the capability of building ASTs in the
website. I tried test running it against a simple Java Hello world
program...and I get the following error......
line 2:0 mismatched input 'public' expecting LCURLY
<mismatched token: [@0,2:7='public',<87>,2:0],
resync=publicclassTest{publicstaticvoidmain(String[]args){System.out.println("Helloworld...");}}>

>From what I see, it says it cant find a left curly brace after the public
keyword...but as a matter of fact, I did place that ...Can you please tell
me what could be the issue ?

BTW, here is my test case for that ...

package
a.b.c;
import
java.io.IOException;
import
org.antlr.runtime.*;
import
a.b.c.JavaTestParser.arrayInitializer_return;

public
class Test4 {
public static void main(String[] args) throws RecognitionException,
IOException {
// press F4 after highlighting charstream thingy CharStream charStream =
new ANTLRFileStream("C:/Test.java");
JavaTestLexer lexer =
new JavaTestLexer(charStream);
TokenStream tokenStream =
new CommonTokenStream(lexer);
JavaTestParser parser=
new JavaTestParser(tokenStream);
arrayInitializer_return tree=parser.arrayInitializer();
System.
out.println(""+tree.tree.toString());
System.
out.println("");
}
}
P.S: I was trying to play with this based on the tutorial that you showed me
the other day and its really interesting. I cant wait long to see the AST be
O/Ped...
-V

From hvmedhaj at gmail.com  Fri Feb 19 04:18:27 2010
From: hvmedhaj at gmail.com (venkat medhaj)
Date: Fri, 19 Feb 2010 07:18:27 -0500
Subject: [antlr-interest] AST test program not working
Message-ID: <f25256041002190418gdf90f92r23ae148ddf13ac9e@mail.gmail.com>

Hi, I downloaded the Java 1.5 which O/Puts the AST being generated by ANTlr.
When I tried to run it against a simple Helloworld Java program, it says,
missing LCURLY and throws some error. I did place all the braces correctly.
Could someone help me out with this ?

-V

From hvmedhaj at gmail.com  Fri Feb 19 04:34:34 2010
From: hvmedhaj at gmail.com (venkat medhaj)
Date: Fri, 19 Feb 2010 07:34:34 -0500
Subject: [antlr-interest] java test case that I used
Message-ID: <f25256041002190434m6f511f0bq9f77dfe339655b27@mail.gmail.com>

 line 2:0 mismatched input 'public' expecting LCURLY <mismatched token:
[@0,2:7='public',<87>,2:0],
resync=publicclassTest{publicstaticvoidmain(String[]args){System.out.println("Helloworld...");}}>

I get the above mentioned error when I tried running it against the Java 1.5
grammar which generates ASTs. Would anyone, please, explain me what the
problem is ?
I did make sure that I have a left curly brace placed in the right spot.
Here's my small little Test case.

*

package* a.b.c;

*

import* java.io.IOException;

*

import* org.antlr.runtime.*;

*

import* a.b.c.JavaTestParser.arrayInitializer_return;

 *

public* *class* Test4 {

*public* *static* *void* main(String[] args) *throws* RecognitionException,
IOException {

// press F4 after highlighting *charstream* *thingy*

CharStream charStream = *new* ANTLRFileStream("C:/Test.java");

JavaTestLexer lexer = *new* JavaTestLexer(charStream);

TokenStream tokenStream = *new* CommonTokenStream(lexer);

JavaTestParser parser= *new* JavaTestParser(tokenStream);

arrayInitializer_return tree=parser.arrayInitializer();

System.*out*.println(""+tree.tree.toString());

System.*out*.println("");

}

}


-V

From ketancmaheshwari at gmail.com  Fri Feb 19 04:51:13 2010
From: ketancmaheshwari at gmail.com (Ketan Maheshwari)
Date: Fri, 19 Feb 2010 13:51:13 +0100
Subject: [antlr-interest] Mapping ANTLR grammar to XML
Message-ID: <8e487b941002190451p56532a5ck26b232739557e1a3@mail.gmail.com>

Hello Friends

I have an ANTLR grammar for my Domain language. While testing real programs
against this grammar I could see the GUI generates a tree and places the
language tokens at an appropriate leaf node of that tree.
Now my next task is to build an xml equivalent of each program: so to build
a translator that can translate this program into an xml. From the tree
structure it strikes very similar to xml and I believe the process is not
very tedious.

Could some one guide me to any tools or guidelines available on this
direction? Has anyone done some similar thing in the past?

Many Thanks in Advance.
-- 
Regards
Ketan

From marcin.rzeznicki at gmail.com  Fri Feb 19 05:03:08 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Fri, 19 Feb 2010 14:03:08 +0100
Subject: [antlr-interest] Mini language embedded in language. How to?
Message-ID: <14799bf61002190503h7ac75fa7xc46385e32e8432db@mail.gmail.com>

Hi all,
I am looking for a clean ANTLR way to parse a language which is embedded in
another language. Let's assume that we have parser for a language which
enables name aliasing. The syntax for such operation is:
ID ALIAS "alias"

Also, there are slightly different rules governing aliases, they can be more
than ordinary identifiers, for example:
distance alias "|-|" ( where |-| is not a valid identifier)

So, clearly, I have to write another parser/lexer for this "alias language",
which I did actually; to avoid breaking DRY rule I made it dependent on
"main" lexer and so on - and that is fine.

So, under conditions I described above, what is the best way to operate this
'slave' parser. I'd like to: start the other parser in appropriate rule
(probably an action) so that it parser next input. If 'slave' reports syntax
error, I'd like to have it propagated to the main parser client. If slave
thinks that alias syntax is ok, then let it emit the appropriate token and
pass the control back to the main parser which then resumes scanning where
'slave' has left. I appreciate hearing about your ideas. Thanks.




-- 
Greetings
Marcin Rze?nicki

From ketancmaheshwari at gmail.com  Fri Feb 19 08:13:43 2010
From: ketancmaheshwari at gmail.com (Ketan Maheshwari)
Date: Fri, 19 Feb 2010 17:13:43 +0100
Subject: [antlr-interest] Fwd:  Mapping ANTLR grammar to XML
In-Reply-To: <8e487b941002190644l4eb5ee1emf51f93adc15e4e4a@mail.gmail.com>
References: <8e487b941002190451p56532a5ck26b232739557e1a3@mail.gmail.com>
	<8b84a7c437ba93c491ca974c3de31be9.squirrel@webmail.concepts.nl>
	<8e487b941002190644l4eb5ee1emf51f93adc15e4e4a@mail.gmail.com>
Message-ID: <8e487b941002190813r1498cab3x525aff8234b230e8@mail.gmail.com>

forwarding my reply to the list that I forgot when replying earlier ...

---------- Forwarded message ----------
From: Ketan Maheshwari <ketancmaheshwari at gmail.com>
Date: Fri, Feb 19, 2010 at 3:44 PM
Subject: Re: [antlr-interest] Mapping ANTLR grammar to XML
To: johnpool at ision.nl


John

Thanks for your reply.

By target language if you mean the language I want to write the translator
in; it is java.

So, I want to read a program written in the Domain Language I wrote the
grammar of, and somehow walk the tree using the grammar and place tokens in
xml tags corresponding to the nodes it belongs to.

For instance the following assignment statement :

in = ["t1 hyde"%patient:"mr hyde", "t1 argan"%patient:"mr argan"]

is equivalent to the following xml:

<source name="in" type="String">
         <array>
             <item><tag name="patient" value="Mr Hyde" />T1 Hyde</item>
             <item><tag name="patient" value="Mr Argan" />T1 Argan</item>
         </array>
</source>

The tagnames and elementnames are not important as such but the fact that
they map as per the tree structure and the process is automated.


On Fri, Feb 19, 2010 at 2:43 PM, <johnpool at ision.nl> wrote:

> If I understand you correctly, you want to map your AST CommonTree
> structure onto an equivalent XML structure. You do not mention what you
> target language is: for C# you might do something like this:
>
>    XmlTextWriter xw = new XmlTextWriter ();
>
>    ...
>
>    private void CreateXmlTree (XmlTextWriter xw, CommonTree tree)
>    {
>      if (tree.ChildCount == 0)
>        xw.WriteString (tree.Text);
>      else
>      {
>        xw.WriteStartElement (tree.Text);
>
>        foreach (CommonTree c in tree.Children) CreateXmlTree (xw, c);
>
>        xw.WriteEndElement ();
>      }
>    }
>
>
> Regards,
>
> John Pool
>
> > Hello Friends
> >
> > I have an ANTLR grammar for my Domain language. While testing real
> > programs
> > against this grammar I could see the GUI generates a tree and places the
> > language tokens at an appropriate leaf node of that tree.
> > Now my next task is to build an xml equivalent of each program: so to
> > build
> > a translator that can translate this program into an xml. From the tree
> > structure it strikes very similar to xml and I believe the process is not
> > very tedious.
> >
> > Could some one guide me to any tools or guidelines available on this
> > direction? Has anyone done some similar thing in the past?
> >
> > Many Thanks in Advance.
> > --
> > Regards
> > Ketan
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
>
>


-- 
Regards
Ketan



-- 
Regards
Ketan

From bkiers at gmail.com  Fri Feb 19 11:14:21 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Fri, 19 Feb 2010 20:14:21 +0100
Subject: [antlr-interest] Fwd: Mapping ANTLR grammar to XML
In-Reply-To: <8e487b941002190813r1498cab3x525aff8234b230e8@mail.gmail.com>
References: <8e487b941002190451p56532a5ck26b232739557e1a3@mail.gmail.com>
	<8b84a7c437ba93c491ca974c3de31be9.squirrel@webmail.concepts.nl>
	<8e487b941002190644l4eb5ee1emf51f93adc15e4e4a@mail.gmail.com>
	<8e487b941002190813r1498cab3x525aff8234b230e8@mail.gmail.com>
Message-ID: <af443a971002191114t5addb4bbj979a7cd7931316fc@mail.gmail.com>

On Fri, Feb 19, 2010 at 5:13 PM, Ketan Maheshwari <
ketancmaheshwari at gmail.com> wrote:

> ...
>
> For instance the following assignment statement :
>
> in = ["t1 hyde"%patient:"mr hyde", "t1 argan"%patient:"mr argan"]
>
> is equivalent to the following xml:
>
> <source name="in" type="String">
>         <array>
>             <item><tag name="patient" value="Mr Hyde" />T1 Hyde</item>
>             <item><tag name="patient" value="Mr Argan" />T1 Argan</item>
>         </array>
> </source>
>
> The tagnames and elementnames are not important as such but the fact that
> they map as per the tree structure and the process is automated.
>

Have a look at "rewrite rules":
http://www.antlr.org/wiki/display/~admin/2008/04/11/Rewrite+rules

Regards,

Bart.

From parrt at cs.usfca.edu  Sat Feb 20 11:39:22 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 20 Feb 2010 11:39:22 -0800
Subject: [antlr-interest] v4 lexers
In-Reply-To: <247457018-1266470053-cardhu_decombobulator_blackberry.rim.net-616391928-@bda428.bisx.prod.on.blackberry>
References: <247457018-1266470053-cardhu_decombobulator_blackberry.rim.net-616391928-@bda428.bisx.prod.on.blackberry>
Message-ID: <6C579889-C9EB-4828-B4BA-3AD79B2955AD@cs.usfca.edu>

Hi Kyle, thanks for your thoughts!
On Feb 17, 2010, at 9:14 PM, kferrio at gmail.com wrote:

> Regarding the wiki page by the same subject... I'm clearly no expert in the implementation guts but moving software stack seems like it could have a couple more benefits in addition to the ones you wrote about.  The improved "separation of concerns" would make it easier (at least for me!) to follow and debug the resulting target code.  Also it might accelerate the development (and maintenance) of non-Java-like targets.  

Agreed. it really makes more sense for me to manage my own stack of attributes.

> Also I hope Gavin Lambert's suggestion for "negative context" via exclusionary predicates makes it into v4. 

It's definitely useful occasionally.  ~ doesn't really work for negation because it means match something not in that set. ! means don't include but match. We need another operator I guess; some kind of variant of the syntactic predicate could make sense.

> True, the hybrid approach is the key architectural gem which will make v4 even more powerful for "edgy" grammars.    But the separate stack will potentially benefit *every* grammar.   And exclusionary predicates will afford simple expression to certain simple grammars which I suspect may actually be more common than listserv traffic would suggest.  
> 
> Anyway thanks for the glimpse into the future.   I look forward to learning v4 all over from the beginning!

I'm hoping that users won't notice the difference, at least in the first version ;)
Ter

From parrt at cs.usfca.edu  Sat Feb 20 15:22:27 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 20 Feb 2010 15:22:27 -0800
Subject: [antlr-interest] good error handling
Message-ID: <7920BE28-B1F0-48E5-B51D-608529CA2308@cs.usfca.edu>

Hi,

As I rebuild ANTLR (v4) using v3, I'm trying to do a good job of their recovery.  adding my notes here:

http://www.antlr.org/wiki/display/~admin/Gracefully+handling+syntax+errors

Just added to that page some nice sample code that I'm using. For input:

grammar A;
a : b
   catch [Exception e] {...}
b : B ;

ANTLR v4 gives the tasty error message:

{code}
error(17): A.g:2:4: unterminated rule (missing ';') detected at 'b catch' while looking for rule element
{code}

Oh, and it correctly recovers from the disastrous rule 'a' to create the AST for rule 'b'.

(COMBINED_GRAMMAR A
 (RULES <mismatched token: [@17,46:46='b',<63>,4:0], resync=a : b catch Exception e {...}>
  (RULE b (BLOCK (ALT B)))
 )
)

Ter

From kferrio at gmail.com  Sat Feb 20 18:45:09 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Sun, 21 Feb 2010 02:45:09 +0000
Subject: [antlr-interest] good error handling
Message-ID: <116645355-1266720310-cardhu_decombobulator_blackberry.rim.net-230352674-@bda428.bisx.prod.on.blackberry>

Surprised to see none of the expected flood of appreciation for this development, I conclude that I'm not the only one who wasn't watching the wire today.  This is a *very* welcome development!  Though all my struggles with ANTLR ultimately point to my own limitations, this kind of error-reporting will help me find and understand my failures much faster.

Cheers!
Kyle 

------Original Message------
From: Terence Parr
Sender: antlr-interest-bounces at antlr.org
To: ANTLR
Subject: [antlr-interest] good error handling
Sent: Feb 20, 2010 4:22 PM

Hi,

As I rebuild ANTLR (v4) using v3, I'm trying to do a good job of their recovery.  adding my notes here:

http://www.antlr.org/wiki/display/~admin/Gracefully+handling+syntax+errors

Just added to that page some nice sample code that I'm using. For input:

grammar A;
a : b
   catch [Exception e] {...}
b : B ;

ANTLR v4 gives the tasty error message:

{code}
error(17): A.g:2:4: unterminated rule (missing ';') detected at 'b catch' while looking for rule element
{code}

Oh, and it correctly recovers from the disastrous rule 'a' to create the AST for rule 'b'.

(COMBINED_GRAMMAR A
 (RULES <mismatched token: [@17,46:46='b',<63>,4:0], resync=a : b catch Exception e {...}>
  (RULE b (BLOCK (ALT B)))
 )
)

Ter

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


Sent from my Verizon Wireless BlackBerry

From gokul007 at gmail.com  Sun Feb 21 11:18:06 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 22 Feb 2010 00:48:06 +0530
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
Message-ID: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>

Hi,
   I was looking at the wiki page
http://www.antlr.org/wiki/display/~admin/2008/03/23/Faster+expression+parsing+for+ANTLR
   The syntax suggested seems to have left recursion.  Can someone clarify
me on that?
   I am really getting curious with the techniques followed in parsing
thanks to ANTLR community.

Thanks,
Gokul.

From antlr at mirality.co.nz  Sun Feb 21 12:14:56 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 22 Feb 2010 09:14:56 +1300
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.co
 m>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
Message-ID: <20100221201506.9888B341847F@www.antlr.org>

At 08:18 22/02/2010, Gokulakannan Somasundaram wrote:
 >   I was looking at the wiki page
 ><http://www.antlr.org/wiki/display/~admin/2008/03/23/Faster+expression+parsing+for+ANTLR>
 >   The syntax suggested seems to have left recursion.  Can 
someone
 >clarify me on that?

It's a proposal, not an example of current implementation.

Have a look at 
<<http://www.antlr.org/wiki/display/ANTLR3/Expression+evaluator>http://www.antlr.org/wiki/display/ANTLR3/Expression+evaluator> 
or 
<<http://www.antlr.org/wiki/display/ANTLR3/Operator+precedence+parser>http://www.antlr.org/wiki/display/ANTLR3/Operator+precedence+parser> 
instead. 


From parrt at cs.usfca.edu  Sun Feb 21 16:41:45 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 21 Feb 2010 16:41:45 -0800
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
Message-ID: <8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>


On Feb 21, 2010, at 11:18 AM, Gokulakannan Somasundaram wrote:

> Hi,
>   I was looking at the wiki page
> http://www.antlr.org/wiki/display/~admin/2008/03/23/Faster+expression+parsing+for+ANTLR
>   The syntax suggested seems to have left recursion.  Can someone clarify
> me on that?
>   I am really getting curious with the techniques followed in parsing
> thanks to ANTLR community.

Gokul, glad to help :)  Grammar is left-recursive, butparsing technique rewrites grammar underneath so it's not. :)
Ter

From ronburk at gmail.com  Sun Feb 21 18:20:36 2010
From: ronburk at gmail.com (Ron Burk)
Date: Sun, 21 Feb 2010 18:20:36 -0800
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
	<8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
Message-ID: <30dde8ce1002211820y240f5f6ekb0db4afbe46201de@mail.gmail.com>

Of possible distant peripheral interest, I've been working on using
SLR(0) combined with operator precedence algorithms to handle
expressions in a (mostly) LL(1) parser generator in the smallest
possible space (both generated code and specification syntax).
The SLR(0) automaton ends up with innumerable shift/reduce
conflicts, all of which can be correctly (and cheaply) decided
by the operator precedence tables at runtime. Works great on
my whiteboard; time will tell how it works in practice.

http://code.google.com/p/blacc/wiki/DesignGuideIntro

Sample syntax in first code example on that page. Probably been
done somewhere before, as virtually everything to do with parsing
has. :-)

One pleasant result of using SLR(0) with op prec is it seems like it
keeps me within spitting distance of provable correctness. If the
SLR(0) automaton contains any reduce-reduce conflicts, then the
user has asked me to do something I'm unwilling to support. If
operator precedence should ever claim to have found a handle
when the SLR(0) automaton is not in an accepting state, there's
either a bug or a great lapse in understanding on my part of the
two algorithms.

One minor complication is the need to switch back to LL(1) parsing
from the midst of the bottom-up parser (e.g., to handle C's cast
operator), but this seems fairly confinable as, once again,
the SLR(0) automaton has the information needed (e.g.)
to know it's reached the point of expecting a nonterminal that exists
outside its own tiny, highly constrained portion of the grammar.
Thoroughly tested on my whiteboard, only the detail of implementation
remains. :-)

From Alan.Rooks at onsemi.com  Sun Feb 21 20:03:41 2010
From: Alan.Rooks at onsemi.com (Alan Rooks)
Date: Sun, 21 Feb 2010 23:03:41 -0500
Subject: [antlr-interest] Expression parsing ideas for ANTLR v4
Message-ID: <4B82021D.3020301@onsemi.com>

Hi Sam,

I've followed your posts about expression parsing with much interest - both 
this one to which I'm replying and your earlier ones in Aug 2008 - but only 
now have starting looking into speeding up a parser using these ideas.

The code you posted is really helpful.  I can easily see how it works and 
should have no problem implementing it, especially because my expressions 
only really have left-associative binary operators (I don't need to optimize 
the handling of the unary ops and there are no assignments or ternary 
conditional).

But there's one aspect of both your newer code and the code that you posted 
in 2008 that either I'm not getting, or is incorrect: it really looks to me 
like the trees you're building for left-associative binary operators are 
treating those ops as right-associative, and the ops marked 
right-associative are getting left-associative trees made for them.  Am I 
wrong, or what have I missed?

The code scans the operators from left to right, finding the first 
occurrence (for left-assoc operators) of the lowest-precedence operator, and 
then building a tree with that op as the root and the parts of the 
expression to the left and right of that operator as the left and right 
children of the root.  That's what it looks like it's doing to me, that is.

But that means that for "a - b + c" the "-" will be chosen as the root, 
resulting in this tree:

         '-'
        /   \
       a    '+'
           /   \
          b     c

That's treating those operators as *right-associative*, though, not 
left-associative; it's implicitly parenthesizing the expression as "a - (b + 
c)".  The left-associative interpretation of "a - b + c" is "(a - b) + c", 
of course, which usually evaluates to a different value, and would have this 
tree:

            '+'
           /   \
         '-'    c
        /   \
       a     b

It looks to me like the code should just scan in the opposite direction - it 
should scan from right to left for the lowest-precedence operator, for 
left-associative binary operators.  (Or equivalently, find the last 
lowest-precedence operator, instead of the first, in a left-to-right scan.) 
  And right-associative operators would do the opposite, of course.

But have I missed something?  I've looked at this quite a bit, and I can't 
see how I'm misunderstanding your code, if I am.

Thanks muchly in advance for any enlightenment,

Alan

--------------------------
Alan Rooks
ON Semiconductor
Medical Division
Waterloo, Ontario, Canada
http://www.onsemi.com/
--------------------------


On Jan 19 2010 Sam Harwell wrote:
> Several expression parsers are limited to handling the binary operator
> portion of the expression. In addition to the obvious limitations, it
> poses an additional problem for languages like C++ where the assignment
> operators are split (in precedence) from the rest of the binary
> operators by the ternary operator (?:). My most complicated production
> ANTLR grammar (parses the UnrealScript language) currently uses a
> completely new expression parser that offers a great deal more
> flexibility than the previous approaches I tried. I don't think it's the
> end-all solution for integrating expression parsing into ANTLR for v4,
> but I believe it's a worthwhile example to show what's possible. Here
> are some pros and cons of the implementation:
> 
> Pros:
> 
> * The source code declaring the operator precedence and
>   associativity is very clean (see reference to
>   UnrealScriptParserHelper.cs below)
> 
> * Very fast execution
> 
> * Supports a great deal more operations than simply binary
>   operators
> 
> * Supports operator precedence and associativity in groups
> 
> * Directly supports changing the token type during AST
>   generation - for example if the token '-' is named MINUS, you could
>   produce an AST with AST_SUBTRACT when it appears as a binary operator
>   and AST_NEGATE when it appears as a unary operator.
> 
> Cons:
> 
> * Not currently integrated into the ANTLR language (executes in code)
> 
> * No compile-time detection of ambiguous operator rules
> 
> * Not implemented as fully as is possible
> 
> General idea: Parse every component of an expression into a list - this
> includes all operators and "atoms". The list is then passed to a
> "precedence processor" to produce a tree for that expression.
>  
> Operator categories: This parser was built with the following categories
> in mind, but the grouping operators are not implemented at this point.
> With this as a starting place, it's clear how the list might be expanded
> in the future:
> 
> * Unary operator: either prefix or postfix
> 
> * Binary operator
> 
> * Ternary operator
> 
> * Grouping operator: for example, the ( and ) in (expression)
> 
> * Postfix grouping operator: for example, the ( and ) in
>   methodName(args) or the [ and ] in var[index].
> 
> * Prefix grouping operator: for example, the ( and ) in
>   (TargetType)objectToCast.
> 
> Attached is:
> 
> * UnrealScriptParserHelper.cs: The complete code for declaring a
>   working precedence parser for UnrealScript.
> 
> * Antlr.Runtime.Expressions.zip: The current implementation of
>   this feature.
> 
> I'm very interested in any feedback y'all may have on this.
> 
> Thank you,
> 
> Sam Harwell

From consiliens at gmail.com  Sun Feb 21 23:55:47 2010
From: consiliens at gmail.com (consiliens at gmail.com)
Date: Mon, 22 Feb 2010 00:55:47 -0700
Subject: [antlr-interest] Multiple Lines with Implicit Endings in ANTLR
Message-ID: <4B823883.2040000@gmail.com>

I'm attempting to enhance a simple grammar to support entries longer 
than one line.  The Eclipse project with all the code is
http://tinyurl.com/yj62hqe
Using ANTLR and Eclipse was easy thanks to the excellent JavaDude 
screencasts[0].

Quiz.java correctly identifies the question (q), correct answer (c), and 
incorrect answer (i) for single line entries.

q : 1. hi
c : *a. hi
i : b. bye
q : 1. bye
i : a. hi
c : *b. bye

The quiz language is similar to grammars found in jbehave[1] and 
Gherkin[2][3].  In these grammars there are no explicit end keywords.  I 
also looked at the wiki example from tpdsl[4], however that fails on the 
most basic wiki input such as
* 1
* 2

MQuiz.g contains my failed attempt at using ideas from the Gherkin 
Ragel[5] grammar to support multiple lines.  Does anyone know how to 
support multiline properly in this grammar with ANTLR?

Thanks.

[0] http://javadude.com/articles/antlr3xtut/
[1] http://jbehave.org/reference/latest/grammar.html
[2] 
http://github.com/aslakhellesoy/gherkin/blob/master/ragel/lexer.java.rl.erb
[3] 
http://github.com/aslakhellesoy/gherkin/blob/master/ragel/lexer_common.rl.erb 

[4] http://media.pragprog.com/titles/tpdsl/code/tpdsl-code.tgz
[5] http://www.complang.org/ragel/

From gokul007 at gmail.com  Mon Feb 22 03:10:42 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Mon, 22 Feb 2010 16:40:42 +0530
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
	<8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
Message-ID: <9362e74e1002220310o5bf37a84r2a933689d561b8f1@mail.gmail.com>

>
>
> Gokul, glad to help :)  Grammar is left-recursive, butparsing technique
> rewrites grammar underneath so it's not. :)
>
> Oh yeah. i missed that part.  Now when i see the explanation, i can
understand that. But does it mean that ANTLR would automatically rewrite
grammars with left recursion, so that LR to LL conversion will become very
easy?

Thanks,
Gokul.

From Anders.Sollander at mathworks.de  Mon Feb 22 07:30:42 2010
From: Anders.Sollander at mathworks.de (Anders Sollander)
Date: Mon, 22 Feb 2010 15:30:42 +0000
Subject: [antlr-interest] Trouble using keyword tokens
Message-ID: <4BD6EC0925726F4AA4E9BBC4580304E7CAAA3DC844@EXCHANGE-UK.ad.mathworks.com>

Hi,

I have an issue with a parser that is using certain keywords within the parser rules, and these keywords can also appear as random identifiers in other rules. When this happens, the parser reports an error, and I see no way to avoid this. The grammar and the test input can be found below.
When the parser reaches the second HELLO rule, it stumbles on the token MEASUREMENT (evidently because it's present as a word in the meas rule). Is there a workaround for this?

Thanks
Anders

Grammar (testkeyword.g):
----------------------------------------------------

grammar testkeyword;

prog 	: body+	;	
body	:  meas | words 	;
	
meas	:	
	BEGIN 'MEASUREMENT'
		INT
	END 'MEASUREMENT' ;
	
words	:	
	BEGIN id1=ID
		INT ID+
	END id2=ID ;

BEGIN 	:	'/begin';
END	:	'/end';

ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;
INT :	'0'..'9'+ ;
WS  :   ( ' ' | '\t' | '\r' | '\n' ) {$channel=HIDDEN;}  ;


Test input:
-----------------------------------------------------------
/begin HELLO
	13 I say hello
/end HELLO
/begin MEASUREMENT
	44
/end MEASUREMENT
/begin HELLO
	55 Use MEASUREMENT word
/end HELLO






From jimi at temporal-wave.com  Mon Feb 22 07:54:33 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Feb 2010 07:54:33 -0800
Subject: [antlr-interest] Trouble using keyword tokens
In-Reply-To: <4BD6EC0925726F4AA4E9BBC4580304E7CAAA3DC844@EXCHANGE-UK.ad.mathworks.com>
Message-ID: <f4663828d99d6d419817a683d686e954@temporal-wave.com>

Don't forget to use the search engine at antlr.markmail.org  

Do the following:

1) Do not use 'LITERALS', make tokens for the lexer, list all the keywords in order (or at least in one group);
2) Replace ID with a parser rule id;
3) Make the id rule:   id: ID | MEASUREMENT ;

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Anders Sollander
> Sent: Monday, February 22, 2010 7:31 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Trouble using keyword tokens
> 
> Hi,
> 
> I have an issue with a parser that is using certain keywords within the
> parser rules, and these keywords can also appear as random identifiers
> in other rules. When this happens, the parser reports an error, and I
> see no way to avoid this. The grammar and the test input can be found
> below.
> When the parser reaches the second HELLO rule, it stumbles on the token
> MEASUREMENT (evidently because it's present as a word in the meas
> rule). Is there a workaround for this?
> 
> Thanks
> Anders
> 
> Grammar (testkeyword.g):
> ----------------------------------------------------
> 
> grammar testkeyword;
> 
> prog 	: body+	;
> body	:  meas | words 	;
> 
> meas	:
> 	BEGIN 'MEASUREMENT'
> 		INT
> 	END 'MEASUREMENT' ;
> 
> words	:
> 	BEGIN id1=ID
> 		INT ID+
> 	END id2=ID ;
> 
> BEGIN 	:	'/begin';
> END	:	'/end';
> 
> ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')* ;
> INT :	'0'..'9'+ ;
> WS  :   ( ' ' | '\t' | '\r' | '\n' ) {$channel=HIDDEN;}  ;
> 
> 
> Test input:
> -----------------------------------------------------------
> /begin HELLO
> 	13 I say hello
> /end HELLO
> /begin MEASUREMENT
> 	44
> /end MEASUREMENT
> /begin HELLO
> 	55 Use MEASUREMENT word
> /end HELLO
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From marcin.rzeznicki at gmail.com  Mon Feb 22 08:56:10 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 22 Feb 2010 17:56:10 +0100
Subject: [antlr-interest] Actions in predicates
Message-ID: <14799bf61002220856g79708083m8c7fd5fdab720f19@mail.gmail.com>

Hi all
Yet another question from me ( if someone could reply to the old one, then
I'd be grateful:
http://www.antlr.org/pipermail/antlr-interest/2010-February/037693.html -
sorry for spamming):
Is there a way to fire an action during syntactic predicate and only then? I
am trying to parse language in which semicolons as delimiters are optional.
So my lexer puts them by default in different channel. But there are cases
when I need to resolve ambiguities using syntactic predicates and I'd really
need to switch to emitting semicolons during predicates because parser can
use this information to resolve an ambiguity. A short excerpt from the
grammar I am working on:

basic_expression
  :
  (
    (
      target
      | manifest_type
    )
    DOT
  )
    => call
  | target

During predicate used to disambiguate call subrule I'd need to fire action
which sets appropriate flag in my lexer ordering it to emit semicolons to
the main channel. Furthermore, I'd have to switch this mode off when exiting
a predicate. Following version of my grammar was produced as an attempt at
this:

basic_expression
  :
  ( { <<set_flag_here>> }
    (
      target
      | manifest_type


    DOT { <<unset_flag_here>> }
  )
    => call
  | target

Unfortunately it won't work because of two things. First of all, my actions
are within (state.backtracking == 0) which is obviously not true during
predicate evaluation, and, final action won't be executed if backtracking
fails. Any ideas?

 Thanks for your answers

-- 
Greetings
Marcin Rze?nicki

From antlr at shmuelhome.mine.nu  Mon Feb 22 09:05:20 2010
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Mon, 22 Feb 2010 19:05:20 +0200
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <14799bf61002220856g79708083m8c7fd5fdab720f19@mail.gmail.com>
References: <14799bf61002220856g79708083m8c7fd5fdab720f19@mail.gmail.com>
Message-ID: <4B82B950.8030804@shmuelhome.mine.nu>

On 2/22/2010 6:56 PM, Marcin Rze?nicki wrote:
> During predicate used to disambiguate call subrule I'd need to fire action
> which sets appropriate flag in my lexer ordering it to emit semicolons to
> the main channel.
>    
Have things changed so that the parser can affect the lexer? I thought 
that the lexer does all of its parsing before the parser sees any tokens.


From marcin.rzeznicki at gmail.com  Mon Feb 22 09:11:39 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 22 Feb 2010 18:11:39 +0100
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <4B82B950.8030804@shmuelhome.mine.nu>
References: <14799bf61002220856g79708083m8c7fd5fdab720f19@mail.gmail.com>
	<4B82B950.8030804@shmuelhome.mine.nu>
Message-ID: <14799bf61002220911k76b14e3fk4cfa8f00662812df@mail.gmail.com>

On Mon, Feb 22, 2010 at 6:05 PM, shmuel siegel <antlr at shmuelhome.mine.nu>wrote:

> On 2/22/2010 6:56 PM, Marcin Rze?nicki wrote:
> > During predicate used to disambiguate call subrule I'd need to fire
> action
> > which sets appropriate flag in my lexer ordering it to emit semicolons to
> > the main channel.
> >
> Have things changed so that the parser can affect the lexer? I thought
> that the lexer does all of its parsing before the parser sees any tokens.
>
>
>

You may be right, ooops. Then my solution is completely flawed. I'll better
check ANTLR's source code :-)



-- 
Greetings
Marcin Rze?nicki

From jimi at temporal-wave.com  Mon Feb 22 09:16:32 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Feb 2010 09:16:32 -0800
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <14799bf61002220856g79708083m8c7fd5fdab720f19@mail.gmail.com>
Message-ID: <bc2239412f662d429cd485c30ef032cd@temporal-wave.com>

You might deal with this the way I do for the JavaFX parser:

// -----------------------
// Process a SEMI colon that is always required, regardless of
// where the construct is in the script. There are not too many
// of these.
//
requiredSemi 
	: { input.LA(1) != SEMI}?=>
	
	  // If there was no semi colon here, then we need to issue an error
	  // though we don't worry about it syntactically.
	  //
	  {
		  log.error(semiPos(), MsgSym.MESSAGE_JAVAFX_SEMI_REQUIRED);
	  }
	
	| (SEMI)=>SEMI		// This is what we want	
	;

// -------------------------
// Decides whether a SEMI is required at this point in the parse (and issues
// an error if it is and is not present), or is optional (in which case it eats it) or
// we have just consumed one, which means we can not worry about it as the
// previous rule obviously decided that it wasn't optional and consumed it.
// This rule could result in doubly reporting the absent semi colon if there
// is a construct that consumes one, but does not find one, then a higher
// rule calls this rule, which also decides one is necessary as it did not see one.
// However, the grammar is carefully constructed such that this does not happen
//
possiblyOptSemi
	: 	
			{
				// Call super class function to decide whether to look for
				// the SEMI or not and whether to log an error if one is 
				// missing.
				//
				checkForSemi();
			}
	;

Then do not put your ';' in a different channel. The checkForSemi() method encapsulates the code for deciding if the semi colon is allowed to be missing or not - languages really should not make such things optional, it makes it very difficult to generate decent error messages - and issues an error message if it is required, otherwise just returns silently.

You can get the JavaFX compiler source code from Kenai: http://kenai.com/projects/openjfx-compiler 

Actions that are specified as:

{{ }}

Will be executed within predicate lookahead as well as normal mode and you can then check the backtracking flag to see if you are in predicate mode. However, I suggest that you will find that difficult to maintain.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> Sent: Monday, February 22, 2010 8:56 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Actions in predicates
> 
> Hi all
> Yet another question from me ( if someone could reply to the old one,
> then
> I'd be grateful:
> http://www.antlr.org/pipermail/antlr-interest/2010-February/037693.html
> -
> sorry for spamming):
> Is there a way to fire an action during syntactic predicate and only
> then? I
> am trying to parse language in which semicolons as delimiters are
> optional.
> So my lexer puts them by default in different channel. But there are
> cases
> when I need to resolve ambiguities using syntactic predicates and I'd
> really
> need to switch to emitting semicolons during predicates because parser
> can
> use this information to resolve an ambiguity. A short excerpt from the
> grammar I am working on:
> 
> basic_expression
>   :
>   (
>     (
>       target
>       | manifest_type
>     )
>     DOT
>   )
>     => call
>   | target
> 
> During predicate used to disambiguate call subrule I'd need to fire
> action
> which sets appropriate flag in my lexer ordering it to emit semicolons
> to
> the main channel. Furthermore, I'd have to switch this mode off when
> exiting
> a predicate. Following version of my grammar was produced as an attempt
> at
> this:
> 
> basic_expression
>   :
>   ( { <<set_flag_here>> }
>     (
>       target
>       | manifest_type
> 
> 
>     DOT { <<unset_flag_here>> }
>   )
>     => call
>   | target
> 
> Unfortunately it won't work because of two things. First of all, my
> actions
> are within (state.backtracking == 0) which is obviously not true during
> predicate evaluation, and, final action won't be executed if
> backtracking
> fails. Any ideas?
> 
>  Thanks for your answers
> 
> --
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Mon Feb 22 09:21:20 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Feb 2010 09:21:20 -0800
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <14799bf61002220911k76b14e3fk4cfa8f00662812df@mail.gmail.com>
Message-ID: <5b33068626a78d4d8142484114642a5c@temporal-wave.com>

It's not completely flawed. To do what you asked, you do not need to influence the lexer, just look ahead in the off-channel at certain points and change the channel of the SEMI back to the default if you wanted it to appear; but as I said, that is an awkward way to do it I think.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> Sent: Monday, February 22, 2010 9:12 AM
> To: shmuel siegel
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Actions in predicates
> 
> On Mon, Feb 22, 2010 at 6:05 PM, shmuel siegel
> <antlr at shmuelhome.mine.nu>wrote:
> 
> > On 2/22/2010 6:56 PM, Marcin Rze?nicki wrote:
> > > During predicate used to disambiguate call subrule I'd need to fire
> > action
> > > which sets appropriate flag in my lexer ordering it to emit
> semicolons to
> > > the main channel.
> > >
> > Have things changed so that the parser can affect the lexer? I
> thought
> > that the lexer does all of its parsing before the parser sees any
> tokens.
> >
> >
> >
> 
> You may be right, ooops. Then my solution is completely flawed. I'll
> better
> check ANTLR's source code :-)
> 
> 
> 
> --
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From marcin.rzeznicki at gmail.com  Mon Feb 22 09:57:22 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 22 Feb 2010 18:57:22 +0100
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <bc2239412f662d429cd485c30ef032cd@temporal-wave.com>
References: <14799bf61002220856g79708083m8c7fd5fdab720f19@mail.gmail.com>
	<bc2239412f662d429cd485c30ef032cd@temporal-wave.com>
Message-ID: <14799bf61002220957y7986dc57r8efe90fee81af36a@mail.gmail.com>

On Mon, Feb 22, 2010 at 6:16 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> You might deal with this the way I do for the JavaFX parser:
>
>
Thanks for the example. I cannot understand how you check whether semicolon
is required or not?


> Then do not put your ';' in a different channel. The checkForSemi() method
> encapsulates the code for deciding if the semi colon is allowed to be
> missing or not - languages really should not make such things optional, it
> makes it very difficult to generate decent error messages - and issues an
> error message if it is required, otherwise just returns silently.
>

Unfortunately it is optional, standard says so:
"In writing specimens of any construct defined by a Repetition production
specifying the semicolon
";" as separator, it is permitted, without any effect on the syntax
structure, validity and semantics
of the software, to omit any of the semicolons, or to add a semicolon after
the last element.".



>
> You can get the JavaFX compiler source code from Kenai:
> http://kenai.com/projects/openjfx-compiler
>
> Actions that are specified as:
>
> {{ }}
>
> Will be executed within predicate lookahead as well as normal mode and you
> can then check the backtracking flag to see if you are in predicate mode.
> However, I suggest that you will find that difficult to maintain.
>


Great, thanks, didn't know about this syntax.




-- 
Greetings
Marcin Rze?nicki

From marcin.rzeznicki at gmail.com  Mon Feb 22 10:09:22 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 22 Feb 2010 19:09:22 +0100
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <5b33068626a78d4d8142484114642a5c@temporal-wave.com>
References: <14799bf61002220911k76b14e3fk4cfa8f00662812df@mail.gmail.com>
	<5b33068626a78d4d8142484114642a5c@temporal-wave.com>
Message-ID: <14799bf61002221009p2d5e50eer67037b40ec6d8405@mail.gmail.com>

On Mon, Feb 22, 2010 at 6:21 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> It's not completely flawed. To do what you asked, you do not need to
> influence the lexer, just look ahead in the off-channel at certain points
> and change the channel of the SEMI back to the default if you wanted it to
> appear; but as I said, that is an awkward way to do it I think.
>
> Jim
>
>

My ideas was more or less that whenever I have ambigous syntax (with no
semicolons whatsoever in the parser)  I resolve problems using syntactic
predicates  taking "optional" parts of syntax (like semicolons) into
consideration. If syntactic predicate hit the optional part then it would
fail - meaning that separator divided potentially ambigous construct and it
is time to try the next alternative. It seemed clean to me, but you've made
me think about it again. I could use your suggestion to make semicolon
tokens reappear but how do I do this? CommonTokenStream does not seem to
provide any public method of inspecting non-default channels



-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Mon Feb 22 10:29:57 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 22 Feb 2010 10:29:57 -0800
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <30dde8ce1002211820y240f5f6ekb0db4afbe46201de@mail.gmail.com>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
	<8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
	<30dde8ce1002211820y240f5f6ekb0db4afbe46201de@mail.gmail.com>
Message-ID: <185427C2-8521-49E6-BB1E-F76142D0539E@cs.usfca.edu>

Hi Ron, cool stuff!  I like this:

> By generating byte-codes for an interpreter, supporting multiple parsing algorithms became a matter of slightly expanding the number of opcodes. This also appears to be an easier structure (for me) to understand and inspect.

That is interesting...can the interpreter fetch/exec loop fit in L1 cache?  maybe...

i was thinking SLR(0) also instead of the prec climbing thing for expressions. I'll think about this hard.

Ter
On Feb 21, 2010, at 6:20 PM, Ron Burk wrote:

> Of possible distant peripheral interest, I've been working on using
> SLR(0) combined with operator precedence algorithms to handle
> expressions in a (mostly) LL(1) parser generator in the smallest
> possible space (both generated code and specification syntax).
> The SLR(0) automaton ends up with innumerable shift/reduce
> conflicts, all of which can be correctly (and cheaply) decided
> by the operator precedence tables at runtime. Works great on
> my whiteboard; time will tell how it works in practice.
> 
> http://code.google.com/p/blacc/wiki/DesignGuideIntro
> 
> Sample syntax in first code example on that page. Probably been
> done somewhere before, as virtually everything to do with parsing
> has. :-)
> 
> One pleasant result of using SLR(0) with op prec is it seems like it
> keeps me within spitting distance of provable correctness. If the
> SLR(0) automaton contains any reduce-reduce conflicts, then the
> user has asked me to do something I'm unwilling to support. If
> operator precedence should ever claim to have found a handle
> when the SLR(0) automaton is not in an accepting state, there's
> either a bug or a great lapse in understanding on my part of the
> two algorithms.
> 
> One minor complication is the need to switch back to LL(1) parsing
> from the midst of the bottom-up parser (e.g., to handle C's cast
> operator), but this seems fairly confinable as, once again,
> the SLR(0) automaton has the information needed (e.g.)
> to know it's reached the point of expecting a nonterminal that exists
> outside its own tiny, highly constrained portion of the grammar.
> Thoroughly tested on my whiteboard, only the detail of implementation
> remains. :-)


From parrt at cs.usfca.edu  Mon Feb 22 10:31:20 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 22 Feb 2010 10:31:20 -0800
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <9362e74e1002220310o5bf37a84r2a933689d561b8f1@mail.gmail.com>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
	<8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
	<9362e74e1002220310o5bf37a84r2a933689d561b8f1@mail.gmail.com>
Message-ID: <35B59E40-4ABB-4FA5-B61F-87892C3828CA@cs.usfca.edu>


On Feb 22, 2010, at 3:10 AM, Gokulakannan Somasundaram wrote:

> 
> Gokul, glad to help :)  Grammar is left-recursive, butparsing technique rewrites grammar underneath so it's not. :)
> 
> Oh yeah. i missed that part.  Now when i see the explanation, i can understand that. But does it mean that ANTLR would automatically rewrite grammars with left recursion, so that LR to LL conversion will become very easy?

just for this special case.

Ter

From marcin.rzeznicki at gmail.com  Mon Feb 22 10:38:57 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 22 Feb 2010 19:38:57 +0100
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <14799bf61002221009p2d5e50eer67037b40ec6d8405@mail.gmail.com>
References: <14799bf61002220911k76b14e3fk4cfa8f00662812df@mail.gmail.com>
	<5b33068626a78d4d8142484114642a5c@temporal-wave.com>
	<14799bf61002221009p2d5e50eer67037b40ec6d8405@mail.gmail.com>
Message-ID: <14799bf61002221038n7373da5dqb4d1aa30acfc165f@mail.gmail.com>

2010/2/22 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>

>
>
> On Mon, Feb 22, 2010 at 6:21 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
>> It's not completely flawed. To do what you asked, you do not need to
>> influence the lexer, just look ahead in the off-channel at certain points
>> and change the channel of the SEMI back to the default if you wanted it to
>> appear; but as I said, that is an awkward way to do it I think.
>>
>> Jim
>>
>>
>
> My ideas was more or less that whenever I have ambigous syntax (with no
> semicolons whatsoever in the parser)  I resolve problems using syntactic
> predicates  taking "optional" parts of syntax (like semicolons) into
> consideration. If syntactic predicate hit the optional part then it would
> fail - meaning that separator divided potentially ambigous construct and it
> is time to try the next alternative. It seemed clean to me, but you've made
> me think about it again. I could use your suggestion to make semicolon
> tokens reappear but how do I do this? CommonTokenStream does not seem to
> provide any public method of inspecting non-default channels
>
>
>
I think that some clear example of this construction is needed. Let me
reiterate.
Consider following constructs (as parser sees them):

(1) super

(2) super [TYPE] method

(3) [TYPE] method

(1) calls direct super method, (2) calls method on some parent determined by
TYPE, (3) calls static method on arbitrary type
Upon seeing (2) parser cannot decide whether what it sees is really (2) or
rather (1) followed by (3). So I can use syntactic predicate binding [TYPE]
to the nearest 'super' construct, if present. Simply: ( super '[' ) =>
super_alternative. But user might have really typed :

super; [TYPE] method

, which parser did not see because of ';' optionality.
But this problem, in my opinion, is simply solved by saying somehow: see all
semicolons in this predicate - and that was my original question's subject.
If parser saw semicolons when executing predicates then it could not match (
super '[' ) so it would fail, and it in turn would lead to taking correct
path. I hope my reasoning is more or less clear to you. Thanks for any
input.




-- 
Greetings
Marcin Rze?nicki

From ronburk at gmail.com  Mon Feb 22 14:00:11 2010
From: ronburk at gmail.com (Ron Burk)
Date: Mon, 22 Feb 2010 14:00:11 -0800
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <185427C2-8521-49E6-BB1E-F76142D0539E@cs.usfca.edu>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
	<8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
	<30dde8ce1002211820y240f5f6ekb0db4afbe46201de@mail.gmail.com>
	<185427C2-8521-49E6-BB1E-F76142D0539E@cs.usfca.edu>
Message-ID: <30dde8ce1002221400s1f89c60as924a0b7e3f62efe6@mail.gmail.com>

> That is interesting...can the interpreter fetch/exec loop fit in L1 cache?  maybe...

Things always get more complicated by the time you have a working product,
but I had these wild-ass guesses in my notes:

    Back of envelope calculation: 2KB for basic parser framework,
    suppose average of 3 rules per non-terminal, average of 5
    non-terminal lookups per non-terminal (each with an associated
    2-byte "address" to "call"), average of 5 symbols
    per rule, summing to 3 * (10*2 + 5*2) = 90 bytes per non-terminal.
    Let's round that up to 100 bytes per non-terminal to allow for
    action/reduce opcodes, tail recursion optimization opcodes, etc.

    Say about 60 non-terminals for ANSI C parser. That would come
    to only 6KB+2KB=8KB! Leaves a fair amount of room for user actions,
    parser stack, value stack, etc. especially if you're just constructing
    a parse tree. Even double that to be more pessimistic and 16KB to
    parse ANSI C sounds pretty small, leaving 3/4 of L1 cache on many
    modern Intel processors (and of course, if the entire parser fits in
    16KB, something less than 100% of it will be "hot" enough to be
    regularly demanded in cache; e.g., "struct" tends to be needed
    during the first portion of a C source file, then later maybe not
    at all).

I do intend to make each opcode do as much as possible, and the fact
that I can boil a large expression grammar down to just a few rules helps
as well. For C code generation, for example, one opcode would scan
the list of eligible next terminals (simple list scans instead of sparse table
lookups or compressed table schemes). For Java code generation,
it appears likely just as well to replace the list-scanning opcode with
one switch statement per non-terminal, given the lack of static array
initialization and the fact that two of the highest-level Java VM opcodes
are devoted to switch statement support.

> i was thinking SLR(0) also instead of the prec climbing
> thing for expressions. I'll think about this hard.

So far, I have not found it objectionable to require no null rules
in the expression part of the grammar; you can always wrap
that sub-grammar with another nonterminal that is nullable.
I also have not found any popular language expression construct
whose ambiguous SLR(0) automaton can't correctly be
disambiguated by the classic operator precedence table algorithm,
at least on my whiteboard. I guess the comma operator in C
requires a little massaging because it's ambiguous with function
parameter separation, but that's true in an LALR grammar for
ANSI C as well.

From parrt at cs.usfca.edu  Mon Feb 22 14:13:01 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 22 Feb 2010 14:13:01 -0800
Subject: [antlr-interest] Reg LR-style expression parsing in wiki
In-Reply-To: <30dde8ce1002221400s1f89c60as924a0b7e3f62efe6@mail.gmail.com>
References: <9362e74e1002211118v33d60a6av31cbb32d2f678904@mail.gmail.com>
	<8ADC1FC6-32FA-4593-9A5D-A6F9411B87BA@cs.usfca.edu>
	<30dde8ce1002211820y240f5f6ekb0db4afbe46201de@mail.gmail.com>
	<185427C2-8521-49E6-BB1E-F76142D0539E@cs.usfca.edu>
	<30dde8ce1002221400s1f89c60as924a0b7e3f62efe6@mail.gmail.com>
Message-ID: <5D18FD89-FB32-4B20-AD22-396B4BE70307@cs.usfca.edu>

cool. good info. i had not considered bytecode approach; would make retargeting trivial.
Ter
On Feb 22, 2010, at 2:00 PM, Ron Burk wrote:

>> That is interesting...can the interpreter fetch/exec loop fit in L1 cache?  maybe...
> 
> Things always get more complicated by the time you have a working product,
> but I had these wild-ass guesses in my notes:
> 
>    Back of envelope calculation: 2KB for basic parser framework,
>    suppose average of 3 rules per non-terminal, average of 5
>    non-terminal lookups per non-terminal (each with an associated
>    2-byte "address" to "call"), average of 5 symbols
>    per rule, summing to 3 * (10*2 + 5*2) = 90 bytes per non-terminal.
>    Let's round that up to 100 bytes per non-terminal to allow for
>    action/reduce opcodes, tail recursion optimization opcodes, etc.
> 
>    Say about 60 non-terminals for ANSI C parser. That would come
>    to only 6KB+2KB=8KB! Leaves a fair amount of room for user actions,
>    parser stack, value stack, etc. especially if you're just constructing
>    a parse tree. Even double that to be more pessimistic and 16KB to
>    parse ANSI C sounds pretty small, leaving 3/4 of L1 cache on many
>    modern Intel processors (and of course, if the entire parser fits in
>    16KB, something less than 100% of it will be "hot" enough to be
>    regularly demanded in cache; e.g., "struct" tends to be needed
>    during the first portion of a C source file, then later maybe not
>    at all).
> 
> I do intend to make each opcode do as much as possible, and the fact
> that I can boil a large expression grammar down to just a few rules helps
> as well. For C code generation, for example, one opcode would scan
> the list of eligible next terminals (simple list scans instead of sparse table
> lookups or compressed table schemes). For Java code generation,
> it appears likely just as well to replace the list-scanning opcode with
> one switch statement per non-terminal, given the lack of static array
> initialization and the fact that two of the highest-level Java VM opcodes
> are devoted to switch statement support.
> 
>> i was thinking SLR(0) also instead of the prec climbing
>> thing for expressions. I'll think about this hard.
> 
> So far, I have not found it objectionable to require no null rules
> in the expression part of the grammar; you can always wrap
> that sub-grammar with another nonterminal that is nullable.
> I also have not found any popular language expression construct
> whose ambiguous SLR(0) automaton can't correctly be
> disambiguated by the classic operator precedence table algorithm,
> at least on my whiteboard. I guess the comma operator in C
> requires a little massaging because it's ambiguous with function
> parameter separation, but that's true in an LALR grammar for
> ANSI C as well.


From troy.daniels at baesystems.com  Mon Feb 22 14:16:29 2010
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Mon, 22 Feb 2010 17:16:29 -0500
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <14799bf61002221038n7373da5dqb4d1aa30acfc165f@mail.gmail.com>
Message-ID: <1555d0$4u74t9@dmzms99801.na.baesystems.com>

So

Super; [TYPE] method

Should resolve as (1) followed by 3, but

Super [TYPE] method

Should resolve as (2)?

I think you probably want to include the semicolons in your default token stream.  You would then have rules like

type_method : TYPE METHOD SEMI? ;

super : SUPER ( SEMI | type_method | /* nothing */ ) ;

You could even rewrite super in the standard style for this grammar:

super : SUPER type_method_base? SEMI? ; 

type_method : type_method_base SEMI? ;

type_method_base : TYPE METHOD ;


It seems that would also be a more straightforward representation of the grammar.  Even if you can get the channel switching to work, will you remember why you are doing it six months from now?  Will you still understand the corner cases?  Even if you do, what about the guy who works on this after you?  What I outlined fairly clearly says "semi colons are optional" and makes it clear that "super ; [TYPE] ..." is two statements.

Troy


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Marcin 
> Rzeznicki
> Sent: Monday, February 22, 2010 1:39 PM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Actions in predicates
> 
> 2010/2/22 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>
> 
> >
> >
> > On Mon, Feb 22, 2010 at 6:21 PM, Jim Idle 
> <jimi at temporal-wave.com> wrote:
> >
> >> It's not completely flawed. To do what you asked, you do 
> not need to 
> >> influence the lexer, just look ahead in the off-channel at certain 
> >> points and change the channel of the SEMI back to the 
> default if you 
> >> wanted it to appear; but as I said, that is an awkward way 
> to do it I think.
> >>
> >> Jim
> >>
> >>
> >
> > My ideas was more or less that whenever I have ambigous 
> syntax (with 
> > no semicolons whatsoever in the parser)  I resolve problems using 
> > syntactic predicates  taking "optional" parts of syntax (like 
> > semicolons) into consideration. If syntactic predicate hit the 
> > optional part then it would fail - meaning that separator divided 
> > potentially ambigous construct and it is time to try the next 
> > alternative. It seemed clean to me, but you've made me 
> think about it 
> > again. I could use your suggestion to make semicolon tokens 
> reappear 
> > but how do I do this? CommonTokenStream does not seem to 
> provide any 
> > public method of inspecting non-default channels
> >
> >
> >
> I think that some clear example of this construction is 
> needed. Let me reiterate.
> Consider following constructs (as parser sees them):
> 
> (1) super
> 
> (2) super [TYPE] method
> 
> (3) [TYPE] method
> 
> (1) calls direct super method, (2) calls method on some 
> parent determined by TYPE, (3) calls static method on 
> arbitrary type Upon seeing (2) parser cannot decide whether 
> what it sees is really (2) or rather (1) followed by (3). So 
> I can use syntactic predicate binding [TYPE] to the nearest 
> 'super' construct, if present. Simply: ( super '[' ) => 
> super_alternative. But user might have really typed :
> 
> super; [TYPE] method
> 
> , which parser did not see because of ';' optionality.
> But this problem, in my opinion, is simply solved by saying 
> somehow: see all semicolons in this predicate - and that was 
> my original question's subject.
> If parser saw semicolons when executing predicates then it 
> could not match ( super '[' ) so it would fail, and it in 
> turn would lead to taking correct path. I hope my reasoning 
> is more or less clear to you. Thanks for any input.
> 
> 
> 
> 
> --
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From marcin.rzeznicki at gmail.com  Mon Feb 22 14:53:27 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 22 Feb 2010 23:53:27 +0100
Subject: [antlr-interest] Actions in predicates
In-Reply-To: <1555d0$4u74t9@dmzms99801.na.baesystems.com>
References: <14799bf61002221038n7373da5dqb4d1aa30acfc165f@mail.gmail.com>
	<1555d0$4u74t9@dmzms99801.na.baesystems.com>
Message-ID: <14799bf61002221453r70945b5fr1d04535788547bea@mail.gmail.com>

2010/2/22 Daniels, Troy (US SSA) <troy.daniels at baesystems.com>

> So
>
> Super; [TYPE] method
>
> Should resolve as (1) followed by 3, but
>
> Super [TYPE] method
>
> Should resolve as (2)?
>

Exactly


>
> I think you probably want to include the semicolons in your default token
> stream.  You would then have rules like
>
> type_method : TYPE METHOD SEMI? ;
>
> super : SUPER ( SEMI | type_method | /* nothing */ ) ;
>
> You could even rewrite super in the standard style for this grammar:
>
> super : SUPER type_method_base? SEMI? ;
>
> type_method : type_method_base SEMI? ;
>
> type_method_base : TYPE METHOD ;
>
>
Well, yes, I am starting reconsidering my approach and probably I will
include these in my grammar. Only that this whole SEMI? clutter everywhere
makes me sick, but overall effect is probably better. I did not think of all
implications before, I am afraid, because now I see that ignoring semicolons
in the lexer, as I did, causes that they may appear in places where they are
not allowed, and my parser clearly had no chance to spot this error.



>
> It seems that would also be a more straightforward representation of the
> grammar.  Even if you can get the channel switching to work, will you
> remember why you are doing it six months from now?  Will you still
> understand the corner cases?  Even if you do, what about the guy who works
> on this after you?  What I outlined fairly clearly says "semi colons are
> optional" and makes it clear that "super ; [TYPE] ..." is two statements.
>
>

Yes, and it probably will make my syntactic predicates work as expected.
Probably that is the right way. Thanks




-- 
Greetings
Marcin Rze?nicki

From consiliens at gmail.com  Tue Feb 23 04:19:13 2010
From: consiliens at gmail.com (consiliens at gmail.com)
Date: Tue, 23 Feb 2010 05:19:13 -0700
Subject: [antlr-interest] Multiple Lines with Implicit Endings in ANTLR
In-Reply-To: <4B823883.2040000@gmail.com>
References: <4B823883.2040000@gmail.com>
Message-ID: <4B83C7C1.1050608@gmail.com>

If explicit endings are introduced then the problem is trivial to solve.

MC_QUESTION  :
   NL INT ('.'|')') NOT_END+ ']' { out.print("q : "); };

fragment NOT_END :
   ~(']');

The most similar grammar I've found that deals with implicit endings is 
the gherkin ragel lexer.  Ideas for solving this without requiring an 
end keyword are much appreciated.

On 10-02-22 12:55 AM, consiliens at gmail.com wrote:
> I'm attempting to enhance a simple grammar to support entries longer
> than one line. The Eclipse project with all the code is
> http://tinyurl.com/yj62hqe
> Using ANTLR and Eclipse was easy thanks to the excellent JavaDude
> screencasts[0].
>
> Quiz.java correctly identifies the question (q), correct answer (c), and
> incorrect answer (i) for single line entries.
>
> q : 1. hi
> c : *a. hi
> i : b. bye
> q : 1. bye
> i : a. hi
> c : *b. bye
>
> The quiz language is similar to grammars found in jbehave[1] and
> Gherkin[2][3]. In these grammars there are no explicit end keywords. I
> also looked at the wiki example from tpdsl[4], however that fails on the
> most basic wiki input such as
> * 1
> * 2
>
> MQuiz.g contains my failed attempt at using ideas from the Gherkin
> Ragel[5] grammar to support multiple lines. Does anyone know how to
> support multiline properly in this grammar with ANTLR?
>
> Thanks.
>
> [0] http://javadude.com/articles/antlr3xtut/
> [1] http://jbehave.org/reference/latest/grammar.html
> [2]
> http://github.com/aslakhellesoy/gherkin/blob/master/ragel/lexer.java.rl.erb
> [3]
> http://github.com/aslakhellesoy/gherkin/blob/master/ragel/lexer_common.rl.erb
>
> [4] http://media.pragprog.com/titles/tpdsl/code/tpdsl-code.tgz
> [5] http://www.complang.org/ragel/


From espina.edgar at gmail.com  Tue Feb 23 04:20:46 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Tue, 23 Feb 2010 09:20:46 -0300
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
Message-ID: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>

I'm proud to announce the release of ANTLR IDE 2.0.0.

New Features
- Railroad Diagrams
- Export an image of the matching tree

Bugs
- grammars with dependencies may not be build in correct order
- Quotes are auto-closed even with setting turned off

The railroad feature looks pretty cool, they can be optimized and exported
to HTML useful for grammar documentation.
Take a look at output of grammar
ANTLRv3.g<http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html>grammar.

For more information please visit the ANTLR IDE home page:
http://antlrv3ide.sourceforge.net/

Cheers
-- 
edgar

From marcin.rzeznicki at gmail.com  Tue Feb 23 07:54:03 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 23 Feb 2010 16:54:03 +0100
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
Message-ID: <14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>

On Tue, Feb 23, 2010 at 1:20 PM, Edgar Espina <espina.edgar at gmail.com>wrote:

> I'm proud to announce the release of ANTLR IDE 2.0.0.
>
> New Features
> - Railroad Diagrams
> - Export an image of the matching tree
>
> Bugs
> - grammars with dependencies may not be build in correct order
> - Quotes are auto-closed even with setting turned off
>
>

Yeah, cool, but it still has the nasty habit of deleting grammar's content
during formatting in the presence of syntax errors, as far as I can tell,
and still I cannot build depended grammars when build path contains
non-ASCII letter (? Actually I am not sure whether this is ANTLR IDE error).
Apart from this, ANLTR IDE is nice ;-)




-- 
Greetings
Marcin Rze?nicki

From espina.edgar at gmail.com  Tue Feb 23 07:57:41 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Tue, 23 Feb 2010 12:57:41 -0300
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>
Message-ID: <92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>

Hi Marcin,

I was thinking that already fixed the formatting issue. Could you open bugs
for those two issue? I'll take a look it.

Thanks for using ANTLR IDE, :D

2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>

>
>
> On Tue, Feb 23, 2010 at 1:20 PM, Edgar Espina <espina.edgar at gmail.com>wrote:
>
>> I'm proud to announce the release of ANTLR IDE 2.0.0.
>>
>> New Features
>> - Railroad Diagrams
>> - Export an image of the matching tree
>>
>> Bugs
>> - grammars with dependencies may not be build in correct order
>> - Quotes are auto-closed even with setting turned off
>>
>>
>
> Yeah, cool, but it still has the nasty habit of deleting grammar's content
> during formatting in the presence of syntax errors, as far as I can tell,
> and still I cannot build depended grammars when build path contains
> non-ASCII letter (? Actually I am not sure whether this is ANTLR IDE error).
> Apart from this, ANLTR IDE is nice ;-)
>
>
>
>
> --
> Greetings
> Marcin Rze?nicki
>



-- 
edgar

From marcin.rzeznicki at gmail.com  Tue Feb 23 08:07:59 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 23 Feb 2010 17:07:59 +0100
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>
	<92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>
Message-ID: <14799bf61002230807j3dc1bb8dlf9e6343e84bc3310@mail.gmail.com>

2010/2/23 Edgar Espina <espina.edgar at gmail.com>

> Hi Marcin,
>
> I was thinking that already fixed the formatting issue. Could you open bugs
> for those two issue? I'll take a look it.
>
> Thanks for using ANTLR IDE, :D
>

Sure
Having read your announcement I upgraded ANTLR IDE in my eclipse from
previous RC release, restarted Eclipse and checked whether it still fails
(or should I say, succeeds in deleting my grammars ;-) ) and I see that it
does.
As for the second issue - I am not sure whether this is ANTLR IDE's problem.
I keep my project files under "Rze?nicki" folder, it contains strange letter
"?". Eclipse works without problems actually, ANTLR IDE mostly too, except
when building depended grammars, it then says: error(10):  internal error:
Exception expecting '"', found
'?'@org.antlr.grammar.v2.ANTLRLexer.nextToken(ANTLRLexer.java:347). The '?'
letter reported there makes my suspicious that it somehow messes the path.
But, I must say, ANTLR Works cannot build properly in this case too, so I
think that it is ANTLR Tool error.


>
> 2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>
>
>
>>
>> On Tue, Feb 23, 2010 at 1:20 PM, Edgar Espina <espina.edgar at gmail.com>wrote:
>>
>>> I'm proud to announce the release of ANTLR IDE 2.0.0.
>>>
>>> New Features
>>> - Railroad Diagrams
>>> - Export an image of the matching tree
>>>
>>> Bugs
>>> - grammars with dependencies may not be build in correct order
>>> - Quotes are auto-closed even with setting turned off
>>>
>>>
>>
>> Yeah, cool, but it still has the nasty habit of deleting grammar's content
>> during formatting in the presence of syntax errors, as far as I can tell,
>> and still I cannot build depended grammars when build path contains
>> non-ASCII letter (? Actually I am not sure whether this is ANTLR IDE error).
>> Apart from this, ANLTR IDE is nice ;-)
>>
>>
>>
>>
>> --
>> Greetings
>> Marcin Rze?nicki
>>
>
>
>
> --
> edgar
>



-- 
Pozdrawiam
Marcin Rze?nicki

From marcin.rzeznicki at gmail.com  Tue Feb 23 08:11:10 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 23 Feb 2010 17:11:10 +0100
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <14799bf61002230807j3dc1bb8dlf9e6343e84bc3310@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>
	<92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>
	<14799bf61002230807j3dc1bb8dlf9e6343e84bc3310@mail.gmail.com>
Message-ID: <14799bf61002230811m659d6b4fnecc76517230e6eb6@mail.gmail.com>

2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>

>
>
> 2010/2/23 Edgar Espina <espina.edgar at gmail.com>
>
> Hi Marcin,
>>
>> I was thinking that already fixed the formatting issue. Could you open
>> bugs for those two issue? I'll take a look it.
>>
>> Thanks for using ANTLR IDE, :D
>>
>
> Sure
> Having read your announcement I upgraded ANTLR IDE in my eclipse from
> previous RC release, restarted Eclipse and checked whether it still fails
> (or should I say, succeeds in deleting my grammars ;-) ) and I see that it
> does.
> As for the second issue - I am not sure whether this is ANTLR IDE's
> problem. I keep my project files under "Rze?nicki" folder, it contains
> strange letter "?". Eclipse works without problems actually, ANTLR IDE
> mostly too, except when building depended grammars, it then says:
> error(10):  internal error: Exception expecting '"', found
> '?'@org.antlr.grammar.v2.ANTLRLexer.nextToken(ANTLRLexer.java:347). The '?'
> letter reported there makes my suspicious that it somehow messes the path.
> But, I must say, ANTLR Works cannot build properly in this case too, so I
> think that it is ANTLR Tool error.
>
>

One more thing, I'll open this as a bug if you wish, but you seem not to
support heterogeneous tree construction syntax, formatter deletes these
constructs:

(before)
assertion
  :
  ^( ASSERT expression )
    ->
      ^( ASSERT<AssertionNode>[$ASSERT.token] expression )
  | COMMENT
    ->
      ^( COMMENT<AssertionNode>[$COMMENT.token] )
  ;

(after)
assertion
  :
  ^( ASSERT expression )
    ->
      ^( expression )
  | COMMENT
    ->
      ^(  )
  ;


>
>> 2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>
>>
>>
>>>
>>> On Tue, Feb 23, 2010 at 1:20 PM, Edgar Espina <espina.edgar at gmail.com>wrote:
>>>
>>>> I'm proud to announce the release of ANTLR IDE 2.0.0.
>>>>
>>>> New Features
>>>> - Railroad Diagrams
>>>> - Export an image of the matching tree
>>>>
>>>> Bugs
>>>> - grammars with dependencies may not be build in correct order
>>>> - Quotes are auto-closed even with setting turned off
>>>>
>>>>
>>>
>>> Yeah, cool, but it still has the nasty habit of deleting grammar's
>>> content during formatting in the presence of syntax errors, as far as I can
>>> tell, and still I cannot build depended grammars when build path contains
>>> non-ASCII letter (? Actually I am not sure whether this is ANTLR IDE error).
>>> Apart from this, ANLTR IDE is nice ;-)
>>>
>>>
>>>
>>>
>>> --
>>> Greetings
>>> Marcin Rze?nicki
>>>
>>
>>
>>
>> --
>> edgar
>>
>
>
>
> --
> Pozdrawiam
> Marcin Rze?nicki
>



-- 
Pozdrawiam
Marcin Rze?nicki

From espina.edgar at gmail.com  Tue Feb 23 08:38:59 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Tue, 23 Feb 2010 13:38:59 -0300
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <14799bf61002230811m659d6b4fnecc76517230e6eb6@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>
	<92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>
	<14799bf61002230807j3dc1bb8dlf9e6343e84bc3310@mail.gmail.com>
	<14799bf61002230811m659d6b4fnecc76517230e6eb6@mail.gmail.com>
Message-ID: <92b42db61002230838h77103d11kf7d023019565074d@mail.gmail.com>

About the: "'?' letter" could you check your grammar file? Think that in
somewhere inside your grammar you might have this character (may be inside a
comment)

Thanks,

edgar

2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>

>
>
> 2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>
>
>>
>>
>> 2010/2/23 Edgar Espina <espina.edgar at gmail.com>
>>
>> Hi Marcin,
>>>
>>> I was thinking that already fixed the formatting issue. Could you open
>>> bugs for those two issue? I'll take a look it.
>>>
>>> Thanks for using ANTLR IDE, :D
>>>
>>
>> Sure
>> Having read your announcement I upgraded ANTLR IDE in my eclipse from
>> previous RC release, restarted Eclipse and checked whether it still fails
>> (or should I say, succeeds in deleting my grammars ;-) ) and I see that it
>> does.
>> As for the second issue - I am not sure whether this is ANTLR IDE's
>> problem. I keep my project files under "Rze?nicki" folder, it contains
>> strange letter "?". Eclipse works without problems actually, ANTLR IDE
>> mostly too, except when building depended grammars, it then says:
>> error(10):  internal error: Exception expecting '"', found
>> '?'@org.antlr.grammar.v2.ANTLRLexer.nextToken(ANTLRLexer.java:347). The '?'
>> letter reported there makes my suspicious that it somehow messes the path.
>> But, I must say, ANTLR Works cannot build properly in this case too, so I
>> think that it is ANTLR Tool error.
>>
>>
>
> One more thing, I'll open this as a bug if you wish, but you seem not to
> support heterogeneous tree construction syntax, formatter deletes these
> constructs:
>
> (before)
> assertion
>   :
>   ^( ASSERT expression )
>     ->
>       ^( ASSERT<AssertionNode>[$ASSERT.token] expression )
>   | COMMENT
>     ->
>       ^( COMMENT<AssertionNode>[$COMMENT.token] )
>   ;
>
> (after)
> assertion
>   :
>   ^( ASSERT expression )
>     ->
>       ^( expression )
>   | COMMENT
>     ->
>       ^(  )
>   ;
>
>
>>
>>> 2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>
>>>
>>>
>>>>
>>>> On Tue, Feb 23, 2010 at 1:20 PM, Edgar Espina <espina.edgar at gmail.com>wrote:
>>>>
>>>>> I'm proud to announce the release of ANTLR IDE 2.0.0.
>>>>>
>>>>> New Features
>>>>> - Railroad Diagrams
>>>>> - Export an image of the matching tree
>>>>>
>>>>> Bugs
>>>>> - grammars with dependencies may not be build in correct order
>>>>> - Quotes are auto-closed even with setting turned off
>>>>>
>>>>>
>>>>
>>>> Yeah, cool, but it still has the nasty habit of deleting grammar's
>>>> content during formatting in the presence of syntax errors, as far as I can
>>>> tell, and still I cannot build depended grammars when build path contains
>>>> non-ASCII letter (? Actually I am not sure whether this is ANTLR IDE error).
>>>> Apart from this, ANLTR IDE is nice ;-)
>>>>
>>>>
>>>>
>>>>
>>>> --
>>>> Greetings
>>>> Marcin Rze?nicki
>>>>
>>>
>>>
>>>
>>> --
>>> edgar
>>>
>>
>>
>>
>> --
>> Pozdrawiam
>> Marcin Rze?nicki
>>
>
>
>
> --
> Pozdrawiam
> Marcin Rze?nicki
>



-- 
edgar

From fridi70 at gmx.de  Tue Feb 23 08:48:11 2010
From: fridi70 at gmx.de (fridi)
Date: Tue, 23 Feb 2010 17:48:11 +0100
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
Message-ID: <4B8406CB.1020402@gmx.de>

Hi Edgar,

thanks for the update and the new features.
I recently updates my version and exported some interpreter tree images, 
works well!
But how can I create the railroad diagrams?
Is it correct, that the tabs for decision points is gone? (i won't need 
them)
I have some grammars using templates and happy to see, that they can be 
formatted now and the outline isn't broken any more ;-)

Great tool!

regards, Friedhelm


Edgar Espina schrieb:
> I'm proud to announce the release of ANTLR IDE 2.0.0.
>
> New Features
> - Railroad Diagrams
> - Export an image of the matching tree
>
> Bugs
> - grammars with dependencies may not be build in correct order
> - Quotes are auto-closed even with setting turned off
>
> The railroad feature looks pretty cool, they can be optimized and exported
> to HTML useful for grammar documentation.
> Take a look at output of grammar
> ANTLRv3.g<http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html>grammar.
>
> For more information please visit the ANTLR IDE home page:
> http://antlrv3ide.sourceforge.net/
>
> Cheers
>   


From marcin.rzeznicki at gmail.com  Tue Feb 23 08:59:20 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 23 Feb 2010 17:59:20 +0100
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002230838h77103d11kf7d023019565074d@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>
	<92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>
	<14799bf61002230807j3dc1bb8dlf9e6343e84bc3310@mail.gmail.com>
	<14799bf61002230811m659d6b4fnecc76517230e6eb6@mail.gmail.com>
	<92b42db61002230838h77103d11kf7d023019565074d@mail.gmail.com>
Message-ID: <14799bf61002230859w3d36b56en181ec11b62419b90@mail.gmail.com>

2010/2/23 Edgar Espina <espina.edgar at gmail.com>

> About the: "'?' letter" could you check your grammar file? Think that in
> somewhere inside your grammar you might have this character (may be inside a
> comment)
>
> Thanks,
>
> edgar
>
>
I checked that before - no sign of this character. I even checked in hex
editor whether some program had not written BOM or sth at the beginning of
file. Unfortunately no. When i copy the file to my linux box and use ANTLR
Works there it generates code without any problems.

-- 
Pozdrawiam
Marcin Rze?nicki

From espina.edgar at gmail.com  Tue Feb 23 09:01:16 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Tue, 23 Feb 2010 14:01:16 -0300
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <4B8406CB.1020402@gmx.de>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<4B8406CB.1020402@gmx.de>
Message-ID: <92b42db61002230901s1cd9daf0l23231091ce7878c8@mail.gmail.com>

Hi Friedhelm,

>> Is it correct, that the tabs for decision points is gone? (i won't need
them)
It's just hidden by default. Not sure how many people use it. To make it
visible go to: Window > Preferences > ANTLR > Visualization.

>> But how can I create the railroad diagrams?
There is a save button in the top-right corner of the "Railroad View" (same
place as in the Interpreter). There are three options: export to HTML, to
png, to jpeg.

>> I have some grammars using templates and happy to see, that they can be
formatted now and the outline isn't broken any more ;-)
Thank you.

Regards,

edgar

On Tue, Feb 23, 2010 at 1:48 PM, fridi <fridi70 at gmx.de> wrote:

> Hi Edgar,
>
> thanks for the update and the new features.
> I recently updates my version and exported some interpreter tree images,
> works well!
> But how can I create the railroad diagrams?
> Is it correct, that the tabs for decision points is gone? (i won't need
> them)
> I have some grammars using templates and happy to see, that they can be
> formatted now and the outline isn't broken any more ;-)
>
> Great tool!
>
> regards, Friedhelm
>
>
> Edgar Espina schrieb:
>
>> I'm proud to announce the release of ANTLR IDE 2.0.0.
>>
>> New Features
>> - Railroad Diagrams
>> - Export an image of the matching tree
>>
>> Bugs
>> - grammars with dependencies may not be build in correct order
>> - Quotes are auto-closed even with setting turned off
>>
>> The railroad feature looks pretty cool, they can be optimized and exported
>> to HTML useful for grammar documentation.
>> Take a look at output of grammar
>> ANTLRv3.g<
>> http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html>grammar.
>>
>>
>> For more information please visit the ANTLR IDE home page:
>> http://antlrv3ide.sourceforge.net/
>>
>> Cheers
>>
>>
>
>


-- 
edgar

From fridi70 at gmx.de  Tue Feb 23 10:22:24 2010
From: fridi70 at gmx.de (fridi)
Date: Tue, 23 Feb 2010 19:22:24 +0100
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002230901s1cd9daf0l23231091ce7878c8@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>	
	<4B8406CB.1020402@gmx.de>
	<92b42db61002230901s1cd9daf0l23231091ce7878c8@mail.gmail.com>
Message-ID: <4B841CE0.4020009@gmx.de>

Hi Edgar,

I'm sorry. I didnt have the latest updates of all jars and so I could 
not see the rail road view and the visualization options.
After updating all, everything is ok.

The rail road feture is so cool!

best regards, Friedhelm

Edgar Espina schrieb:
> Hi Friedhelm,
>
> >> Is it correct, that the tabs for decision points is gone? (i won't 
> need them)
> It's just hidden by default. Not sure how many people use it. To make 
> it visible go to: Window > Preferences > ANTLR > Visualization.
>
> >> But how can I create the railroad diagrams?
> There is a save button in the top-right corner of the "Railroad View" 
> (same place as in the Interpreter). There are three options: export to 
> HTML, to png, to jpeg.
>
> >> I have some grammars using templates and happy to see, that they 
> can be formatted now and the outline isn't broken any more ;-)
> Thank you.
>
> Regards,
>
> edgar
>
> On Tue, Feb 23, 2010 at 1:48 PM, fridi <fridi70 at gmx.de 
> <mailto:fridi70 at gmx.de>> wrote:
>
>     Hi Edgar,
>
>     thanks for the update and the new features.
>     I recently updates my version and exported some interpreter tree
>     images, works well!
>     But how can I create the railroad diagrams?
>     Is it correct, that the tabs for decision points is gone? (i won't
>     need them)
>     I have some grammars using templates and happy to see, that they
>     can be formatted now and the outline isn't broken any more ;-)
>
>     Great tool!
>
>     regards, Friedhelm
>
>
>     Edgar Espina schrieb:
>
>         I'm proud to announce the release of ANTLR IDE 2.0.0.
>
>         New Features
>         - Railroad Diagrams
>         - Export an image of the matching tree
>
>         Bugs
>         - grammars with dependencies may not be build in correct order
>         - Quotes are auto-closed even with setting turned off
>
>         The railroad feature looks pretty cool, they can be optimized
>         and exported
>         to HTML useful for grammar documentation.
>         Take a look at output of grammar
>         ANTLRv3.g<http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html>grammar.
>
>
>
>         For more information please visit the ANTLR IDE home page:
>         http://antlrv3ide.sourceforge.net/
>
>         Cheers
>          
>
>
>
>
>
> -- 
> edgar


From parrt at cs.usfca.edu  Tue Feb 23 10:44:21 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 10:44:21 -0800
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
Message-ID: <15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>


On Feb 23, 2010, at 4:20 AM, Edgar Espina wrote:
> The railroad feature looks pretty cool, they can be optimized and exported
> to HTML useful for grammar documentation.
> Take a look at output of grammar
> ANTLRv3.g<http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html>grammar.

WOW! those look really good. If those are open-source, I should integrate that into ANTLRWOrks.
 great job
Ter

From joestelmach at gmail.com  Tue Feb 23 11:40:27 2010
From: joestelmach at gmail.com (joestelmach at gmail.com)
Date: Tue, 23 Feb 2010 19:40:27 +0000 (UTC)
Subject: [antlr-interest] rewrite rule element cardinality
Message-ID: <19-9-0d87e9e3-05cf-4bdc-a48b-f15d5d20ba2d@zenbe.com>

I'm having some trouble understanding the behavior of AST rewrite rule element cardinality in certain cases. Consider the following grammar:

grammar Test;

options {
output=AST;
}

tokens {
GROUP;
FOO;
BAR;
BAZ;
}

search 
: c (SPACE option)+ -> ^(GROUP c option)+
;

c
: C -> FOO BAR
;

option 
: (A | B) -> BAZ
;

A : 'a';
B : 'b';
C : 'c';
SPACE : ' ';

If we feed the parser the input string: "c a b a", I'm expecting to see the following AST:

(GROUP FOO BAR BAZ) (GROUP FOO BAR BAZ) (GROUP FOO BAR BAZ)

but instead, I get the following:

(GROUP FOO BAR BAZ) (GROUP FOO BAR BAZ BAZ) (GROUP FOO BAR BAZ BAZ)

Notice the extra BAZ in each child after the first? Can someone explain why this is happening? I'm using ANTLR 3.2 with the java target.

Thanks

- Joe

From christian.pontesegger at web.de  Tue Feb 23 11:45:35 2010
From: christian.pontesegger at web.de (Christian Pontesegger)
Date: Tue, 23 Feb 2010 20:45:35 +0100
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <9b079293ab9bb549ae8f45a8d527956f@temporal-wave.com>
References: <9b079293ab9bb549ae8f45a8d527956f@temporal-wave.com>
Message-ID: <4B84305F.9030503@web.de>

Hi,

I am creating a treeparser in java which needs some methods. I do not
want to put them into the @members section as the code is quite large.
Is there a way to create an abstract class for the parser? Then I could
put the the abstract methods into the @members section and implement
them in a subclass.

Is there a way to do that?

thanks
Christian

From parrt at cs.usfca.edu  Tue Feb 23 12:09:27 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 12:09:27 -0800
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <4B84305F.9030503@web.de>
References: <9b079293ab9bb549ae8f45a8d527956f@temporal-wave.com>
	<4B84305F.9030503@web.de>
Message-ID: <E413921C-B2FB-4B20-9EB5-1C6C008C8C9B@cs.usfca.edu>

Hi. when I need to do this I use superClass option.
Ter
On Feb 23, 2010, at 11:45 AM, Christian Pontesegger wrote:

> Hi,
> 
> I am creating a treeparser in java which needs some methods. I do not
> want to put them into the @members section as the code is quite large.
> Is there a way to create an abstract class for the parser? Then I could
> put the the abstract methods into the @members section and implement
> them in a subclass.
> 
> Is there a way to do that?
> 
> thanks
> Christian
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gwlist at grahamwideman.com  Tue Feb 23 12:09:36 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Tue, 23 Feb 2010 12:09:36 -0800
Subject: [antlr-interest] ANTLR IDE 2.0.0: Syntax question on '.'
In-Reply-To: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.co
 m>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
Message-ID: <20100223200946.OYNW16123.fed1rmmtao104.cox.net@fed1rmimpo02.cox.net>

Hi Edgar,

Nice looking work on the grammar + railroad output page, as you showed here:

http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html#block

Now the challenge is to get the railroad diagrams to wrap :-).

Anyhow, I spotted something that had me puzzled.  In various rules the page referenced above seems to be using dot inside single quotes to mean "any character".  I wonder whether this is an error, or is my understanding messed up?

Example:

ML_COMMENT ::= '/*' '.'* '*/' 

Wouldn't the single-quoted dot just match literal dots only?  Or is dot special inside single-quote strings (ie: STRING_LITERAL)? But if that was the case, then shouldn't that special aspect of dot show up in the STRING_LITERAL grammar?

Anyhow, I tried the above rule for ML_COMMENT in AntlrWorks and it only wanted to match comments that contained only dots.

So my comment on all this is basically:

/*.....................*/

:-)

-- Graham


From parrt at cs.usfca.edu  Tue Feb 23 12:11:48 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 12:11:48 -0800
Subject: [antlr-interest] rewrite rule element cardinality
In-Reply-To: <19-9-0d87e9e3-05cf-4bdc-a48b-f15d5d20ba2d@zenbe.com>
References: <19-9-0d87e9e3-05cf-4bdc-a48b-f15d5d20ba2d@zenbe.com>
Message-ID: <F358DDF1-7237-4857-BD23-BACDA7D93E56@cs.usfca.edu>

Hi Joe, this looks like a bug to me!! yikes. You are correct that you should see only one copy of the tree returned by option for each iteration of the tree constructor in search. grr! ok, I will add a bug. Can you do me a favor and look at the generated code for -> ^(GROUP c option)+?? It might tell you something that will help me fix the bug and also a way for you to get around.
Thanks!
T
On Feb 23, 2010, at 11:40 AM, joestelmach at gmail.com wrote:

> I'm having some trouble understanding the behavior of AST rewrite rule element cardinality in certain cases. Consider the following grammar:
> 
> grammar Test;
> 
> options {
> output=AST;
> }
> 
> tokens {
> GROUP;
> FOO;
> BAR;
> BAZ;
> }
> 
> search 
> : c (SPACE option)+ -> ^(GROUP c option)+
> ;
> 
> c
> : C -> FOO BAR
> ;
> 
> option 
> : (A | B) -> BAZ
> ;
> 
> A : 'a';
> B : 'b';
> C : 'c';
> SPACE : ' ';
> 
> If we feed the parser the input string: "c a b a", I'm expecting to see the following AST:
> 
> (GROUP FOO BAR BAZ) (GROUP FOO BAR BAZ) (GROUP FOO BAR BAZ)
> 
> but instead, I get the following:
> 
> (GROUP FOO BAR BAZ) (GROUP FOO BAR BAZ BAZ) (GROUP FOO BAR BAZ BAZ)
> 
> Notice the extra BAZ in each child after the first? Can someone explain why this is happening? I'm using ANTLR 3.2 with the java target.
> 
> Thanks
> 
> - Joe
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From troy.daniels at baesystems.com  Tue Feb 23 12:04:06 2010
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Tue, 23 Feb 2010 15:04:06 -0500
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <4B84305F.9030503@web.de>
Message-ID: <f7b52c$3indmo@dmzms99901.na.baesystems.com>

 

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of 
> Christian Pontesegger
> Sent: Tuesday, February 23, 2010 2:46 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Abstract tree parser
> 
> Hi,
> 
> I am creating a treeparser in java which needs some methods. 
> I do not want to put them into the @members section as the 
> code is quite large.
> Is there a way to create an abstract class for the parser? 
> Then I could put the the abstract methods into the @members 
> section and implement them in a subclass.
> 
> Is there a way to do that?
> 

I don't think there's a way to do that.  However, you can write an abstract parser with your methods and then specify that as the parent class of the parser.  That should have the effect you desire.  Your class would need to extend a specific Antlr class.  Check the docs for more details.

Troy

> thanks
> Christian
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From parrt at cs.usfca.edu  Tue Feb 23 12:15:58 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 12:15:58 -0800
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <f7b52c$3indmo@dmzms99901.na.baesystems.com>
References: <f7b52c$3indmo@dmzms99901.na.baesystems.com>
Message-ID: <09B1E1B7-56AC-46FA-8A2F-7497B91DDD23@cs.usfca.edu>

You can either define abstract methods within @members and then subclass the parser or you can create a subclass of Parser with the abstract methods or concrete methods then use superClass. Also note you can create an interface for a delegate object.
Ter
On Feb 23, 2010, at 12:04 PM, Daniels, Troy (US SSA) wrote:

> 
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org 
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of 
>> Christian Pontesegger
>> Sent: Tuesday, February 23, 2010 2:46 PM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Abstract tree parser
>> 
>> Hi,
>> 
>> I am creating a treeparser in java which needs some methods. 
>> I do not want to put them into the @members section as the 
>> code is quite large.
>> Is there a way to create an abstract class for the parser? 
>> Then I could put the the abstract methods into the @members 
>> section and implement them in a subclass.
>> 
>> Is there a way to do that?
>> 
> 
> I don't think there's a way to do that.  However, you can write an abstract parser with your methods and then specify that as the parent class of the parser.  That should have the effect you desire.  Your class would need to extend a specific Antlr class.  Check the docs for more details.
> 
> Troy
> 
>> thanks
>> Christian
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: 
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From antlr at mirality.co.nz  Tue Feb 23 12:21:55 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 24 Feb 2010 09:21:55 +1300
Subject: [antlr-interest] rewrite rule element cardinality
In-Reply-To: <19-9-0d87e9e3-05cf-4bdc-a48b-f15d5d20ba2d@zenbe.com>
References: <19-9-0d87e9e3-05cf-4bdc-a48b-f15d5d20ba2d@zenbe.com>
Message-ID: <20100223202208.41D9634184E5@www.antlr.org>

At 08:40 24/02/2010, joestelmach at gmail.com wrote:
 >search
 >: c (SPACE option)+ -> ^(GROUP c option)+
 >;

Worth trying, just to see if it behaves differently:

search
   : c (SPACE o+=option)+ -> ^(GROUP c $o)+
   ;


Possible workaround:

search
   : a=c (coption[$a])+
   ;

coption[CommonTree c]
   : SPACE option -> ^(GROUP $c option)
   ;


From gwlist at grahamwideman.com  Tue Feb 23 12:30:08 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Tue, 23 Feb 2010 12:30:08 -0800
Subject: [antlr-interest] ANTLR IDE 2.0.0 railroad diagrams
In-Reply-To: <15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
Message-ID: <20100223203009.WDCF20722.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>

Edgar --

I'm really admiring the nice combination of Index, rules with railroad diagrams, and hyperlinks from diagram elements to their definitions elsewhere on the page.

http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html

That said, as an appreciator of diagrams :-) I wonder what your thoughts are on the way your diagrams reverse the flow for elements that happen to be in a chain that's optional.  I know that's a style sometimes used, but personally I find this rather reduces the ease of reading.

For example, compare LITERAL_CHAR with DOUBLE_QUOTE_LITERAL_CHAR. The latter is very similar to the former, but with double quotes around it, and optional.  Yet the visual appearance is reversed, making it hard to quickly compare similarity and difference. Of course in this simple case it's not fatal, but in more complicated cases it gets more difficult.

That said, I do like seeing list separators in the optional "reverse" path -- that makes more sense to me than the method used in other conventions which essentially mimics the grammar in repeating the list item just to show the separator on second and subsequent optional occurrences.

Anyhow, just minor suggestions, should you be open to such input.

-- Graham


From parrt at cs.usfca.edu  Tue Feb 23 12:35:10 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 12:35:10 -0800
Subject: [antlr-interest] use of TreeWizard
Message-ID: <2344494A-09C0-4603-836C-FEDFCE9C015E@cs.usfca.edu>

Hi, just a reminder in case you folks haven't used the TreeWizard that it's useful in some situations. For example, when creating the implicitly generated lexers pulled from combined grammars, I need to build lexer rules for keywords you reference in the grammar. Once I have a wizard

TreeWizard wiz = new TreeWizard(adaptor,ANTLRParser.tokenNames);

Then I can create trees without having to do all of the manual "add child" stuff:

GrammarAST litRule = (GrammarAST)
	wiz.create("(RULE ID["+rname+"] (BLOCK (ALT STRING_LITERAL["+lit+"])))");

If you have a tree and you want to pull out information from it, you can use a scanf like method:

Map nodes = new HashMap();
boolean isLitRule =
	wiz.parse(r, "(RULE %name:ID (BLOCK (ALT %lit:STRING_LITERAL)))", nodes);

then get the node pointers from the map you pass in:

GrammarAST litNode = (GrammarAST)nodes.get("lit");
GrammarAST nameNode = (GrammarAST)nodes.get("name");

It's really making my life much easier.

Ter

From marcin.rzeznicki at gmail.com  Tue Feb 23 13:50:54 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Tue, 23 Feb 2010 22:50:54 +0100
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<14799bf61002230754j461e97a9nca8d6307c4b8f0fd@mail.gmail.com>
	<92b42db61002230757x3114dd2al295d1769fa66a83f@mail.gmail.com>
Message-ID: <14799bf61002231350x77e4d29cp2097b7a02c78f68@mail.gmail.com>

2010/2/23 Edgar Espina <espina.edgar at gmail.com>

> Hi Marcin,
>
> I was thinking that already fixed the formatting issue. Could you open bugs
> for those two issue? I'll take a look it.
>
> Thanks for using ANTLR IDE, :D
>
> 2010/2/23 Marcin Rze?nicki <marcin.rzeznicki at gmail.com>
>
>
Hi Edgar,
Forgot to tell you. I opened two bugs:

2957285: Formatter deletes input on encountering syntax
error<http://sourceforge.net/tracker/?func=detail&aid=2957285&group_id=213306&atid=1025202>
2957281:  Formatter deletes heterogeneous tree nodes
constructs<http://sourceforge.net/tracker/?func=detail&aid=2957281&group_id=213306&atid=1025202>

In case you needed more details then you may contact me directly. Thanks

-- 
Greetings
Marcin Rze?nicki

From joestelmach at gmail.com  Tue Feb 23 13:50:57 2010
From: joestelmach at gmail.com (joestelmach at gmail.com)
Date: Tue, 23 Feb 2010 21:50:57 +0000 (UTC)
Subject: [antlr-interest] rewrite rule element cardinality
In-Reply-To: <4b8438ef.2808c00a.2d0d.ffffa68eSMTPIN_ADDED@mx.google.com>
References: <4b8438ef.2808c00a.2d0d.ffffa68eSMTPIN_ADDED@mx.google.com>
Message-ID: <19-9-979756b4-213e-4f92-b226-8d378e1b07b3@zenbe.com>

Thank you for the fast replies.

Terence - I'm not sure if this will help, but here's a portion of the generated parser for rewrite rule ^( GROUP c option )

while ( stream_option.hasNext()||stream_c.hasNext() ) {
  // Test.g:15:26: ^( GROUP c option )
  {
    Object root_1 = (Object)adaptor.nil();
    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GROUP, "GROUP"), root_1);

    adaptor.addChild(root_1, stream_c.nextTree());
    adaptor.addChild(root_1, stream_option.nextTree());
    adaptor.addChild(root_0, root_1);
  }
}

When debugging test input "c a b", this code is executed twice (as expected.)  On the first iteration, stream_c.nextTree().children = [FOO, BAR], and stream_option.nextTree().token = BAZ, but on the second iteration, stream_c.nextTree().children already has the BAZ token ([FOO, BAR, BAZ],) and stream_option.nextTree().token=BAZ.

Gavin - referencing the array of options from a label doesn't seem to change anything.  As for your possible workaround, is it valid to reference a parameter directly in a rewrite rule?  I was under the impression that you could only reference rule parameters within target code blocks.

- Joe

From espina.edgar at gmail.com  Tue Feb 23 13:57:21 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Tue, 23 Feb 2010 18:57:21 -0300
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
Message-ID: <92b42db61002231357g5aecf780iad05882904b9afc4@mail.gmail.com>

Of course they are open source!! ;). ANTLR IDE use Clapham (
https://sourceforge.net/projects/clapham/) to make the diagrams, it had have
some bugs I fix all the bugs that I found (right now I'm a Clapham developer
too). About the railroad exporter, it's a feature of ANTLR IDE only, we
could work together to make it independent of ANTLR IDE, in this way Clapham
or ANTLRWorks can use it.

BTW: Why we don't just join the effort to integrate ANTLR IDE and ANTLRWorks
as a single solution? We can base the solution in the Eclipse Platform and
distributed as an Eclipse Plug-in or as Standalone Eclipse Application.

Regards,

edgar

On Tue, Feb 23, 2010 at 3:44 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> On Feb 23, 2010, at 4:20 AM, Edgar Espina wrote:
> > The railroad feature looks pretty cool, they can be optimized and
> exported
> > to HTML useful for grammar documentation.
> > Take a look at output of grammar
> > ANTLRv3.g<
> http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html>grammar.
>
> WOW! those look really good. If those are open-source, I should integrate
> that into ANTLRWOrks.
>  great job
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
edgar

From parrt at cs.usfca.edu  Tue Feb 23 14:27:10 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 14:27:10 -0800
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <92b42db61002231357g5aecf780iad05882904b9afc4@mail.gmail.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
	<92b42db61002231357g5aecf780iad05882904b9afc4@mail.gmail.com>
Message-ID: <CAD62FCD-8A56-4F91-8F99-08096AA7A3A3@cs.usfca.edu>

hi. ack. the license is GPL for clapham. i can't let that taint antlr stuff.  i see your IDE is ECL, how does that compare to GPL for onerousness?

I'm open to possibility of joining efforts since I have to take over maintenance of ANTLRWorks; Jean maintained it and did a fantastic job but he shouldn't have to maintain anymore. I took it over.

Ter
On Feb 23, 2010, at 1:57 PM, Edgar Espina wrote:

> Of course they are open source!! ;). ANTLR IDE use Clapham (https://sourceforge.net/projects/clapham/) to make the diagrams, it had have some bugs I fix all the bugs that I found (right now I'm a Clapham developer too). About the railroad exporter, it's a feature of ANTLR IDE only, we could work together to make it independent of ANTLR IDE, in this way Clapham or ANTLRWorks can use it.
> 
> BTW: Why we don't just join the effort to integrate ANTLR IDE and ANTLRWorks as a single solution? We can base the solution in the Eclipse Platform and distributed as an Eclipse Plug-in or as Standalone Eclipse Application.
> 
> Regards,
> 
> edgar
> 
> On Tue, Feb 23, 2010 at 3:44 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> 
> On Feb 23, 2010, at 4:20 AM, Edgar Espina wrote:
> > The railroad feature looks pretty cool, they can be optimized and exported
> > to HTML useful for grammar documentation.
> > Take a look at output of grammar
> > ANTLRv3.g<http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html>grammar.
> 
> WOW! those look really good. If those are open-source, I should integrate that into ANTLRWOrks.
>  great job
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> 
> -- 
> edgar


From espina.edgar at gmail.com  Tue Feb 23 14:38:56 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Tue, 23 Feb 2010 19:38:56 -0300
Subject: [antlr-interest] ANTLR IDE 2.0.0 railroad diagrams
In-Reply-To: <20100223203009.WDCF20722.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
	<20100223203009.WDCF20722.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
Message-ID: <92b42db61002231438h100500aco603170c7da686912@mail.gmail.com>

Hi Graham,

>> Now the challenge is to get the railroad diagrams to wrap :-).

I've already working on that. The problem is were to wrap?

>>Wouldn't the single-quoted dot just match literal dots only?  Or is dot
special inside single-quote strings (ie:
>> STRING_LITERAL)? But if that was the case, then shouldn't that special
aspect of dot show up in the
>> STRING_LITERAL grammar?

Yes, dot(.), predicates({}?,()=>) and not(~) need more work. Any more
thoughts on those constructions are really welcome. (May be we could just
use a different "color" for those.)

>>For example, compare LITERAL_CHAR with DOUBLE_QUOTE_LITERAL_CHAR. The
latter is very similar to the
>> former, but with double quotes around it, and optional.  Yet the visual
appearance is reversed, making it hard to
>> quickly compare similarity and difference. Of course in this simple case
it's not fatal, but in more complicated >> cases it gets more difficult.
They seems ok to me, but I understand why you don't like them. I will try to
add a layout option for that.

>>That said, I do like seeing list separators in the optional "reverse" path
-- that makes more sense to me than the
>> method used in other conventions which essentially mimics the grammar in
repeating the list item just to show >> the separator on second and
subsequent optional occurrences.
I agree with you, if you unselect the optimize button you get the "other"
visualization option.


Thank you for all your suggestions.

edgar

On Tue, Feb 23, 2010 at 5:30 PM, Graham Wideman <gwlist at grahamwideman.com>wrote:

> Edgar --
>
> I'm really admiring the nice combination of Index, rules with railroad
> diagrams, and hyperlinks from diagram elements to their definitions
> elsewhere on the page.
>
> http://antlrv3ide.sourceforge.net/resources/ANTLRv3/ANTLRv3.html
>
> That said, as an appreciator of diagrams :-) I wonder what your thoughts
> are on the way your diagrams reverse the flow for elements that happen to be
> in a chain that's optional.  I know that's a style sometimes used, but
> personally I find this rather reduces the ease of reading.
>
> For example, compare LITERAL_CHAR with DOUBLE_QUOTE_LITERAL_CHAR. The
> latter is very similar to the former, but with double quotes around it, and
> optional.  Yet the visual appearance is reversed, making it hard to quickly
> compare similarity and difference. Of course in this simple case it's not
> fatal, but in more complicated cases it gets more difficult.
>
> That said, I do like seeing list separators in the optional "reverse" path
> -- that makes more sense to me than the method used in other conventions
> which essentially mimics the grammar in repeating the list item just to show
> the separator on second and subsequent optional occurrences.
>
> Anyhow, just minor suggestions, should you be open to such input.
>
> -- Graham
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
edgar

From jimi at temporal-wave.com  Tue Feb 23 15:37:52 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 23 Feb 2010 15:37:52 -0800
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <E413921C-B2FB-4B20-9EB5-1C6C008C8C9B@cs.usfca.edu>
Message-ID: <800a7724b482e84a93ddff193120a9f8@temporal-wave.com>

And you should pretty much always use the superClass option for any serious project.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Tuesday, February 23, 2010 12:09 PM
> To: Christian Pontesegger
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Abstract tree parser
> 
> Hi. when I need to do this I use superClass option.
> Ter
> On Feb 23, 2010, at 11:45 AM, Christian Pontesegger wrote:
> 
> > Hi,
> >
> > I am creating a treeparser in java which needs some methods. I do not
> > want to put them into the @members section as the code is quite
> large.
> > Is there a way to create an abstract class for the parser? Then I
> could
> > put the the abstract methods into the @members section and implement
> > them in a subclass.
> >
> > Is there a way to do that?
> >
> > thanks
> > Christian
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From kirby.bohling at gmail.com  Tue Feb 23 16:04:29 2010
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Tue, 23 Feb 2010 18:04:29 -0600
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <800a7724b482e84a93ddff193120a9f8@temporal-wave.com>
References: <E413921C-B2FB-4B20-9EB5-1C6C008C8C9B@cs.usfca.edu> 
	<800a7724b482e84a93ddff193120a9f8@temporal-wave.com>
Message-ID: <3cac8fdf1002231604t12b848ddy9805a4ed6e260f7d@mail.gmail.com>

I wish that superClass option was smart about handling debug vs.
non-debug, that's the one thing that annoys me any time I choose that
option is that I can't integrate with most of the cool debuggers
without extra work.  In the land of C++ where I can use templates,
it's easy to resolve that, in Java it's a lot more boiler plate.

Kirby


On Tue, Feb 23, 2010 at 5:37 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> And you should pretty much always use the superClass option for any serious project.
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Terence Parr
>> Sent: Tuesday, February 23, 2010 12:09 PM
>> To: Christian Pontesegger
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Abstract tree parser
>>
>> Hi. when I need to do this I use superClass option.
>> Ter
>> On Feb 23, 2010, at 11:45 AM, Christian Pontesegger wrote:
>>
>> > Hi,
>> >
>> > I am creating a treeparser in java which needs some methods. I do not
>> > want to put them into the @members section as the code is quite
>> large.
>> > Is there a way to create an abstract class for the parser? Then I
>> could
>> > put the the abstract methods into the @members section and implement
>> > them in a subclass.
>> >
>> > Is there a way to do that?
>> >
>> > thanks
>> > Christian
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
>> interest/your-email-address
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From joestelmach at gmail.com  Tue Feb 23 16:06:27 2010
From: joestelmach at gmail.com (joestelmach at gmail.com)
Date: Wed, 24 Feb 2010 00:06:27 +0000 (UTC)
Subject: [antlr-interest] rewrite rule element cardinality
In-Reply-To: <19-9-979756b4-213e-4f92-b226-8d378e1b07b3@zenbe.com>
References: <19-9-979756b4-213e-4f92-b226-8d378e1b07b3@zenbe.com>
Message-ID: <19-9-caaa9ebb-c00d-4315-8957-4f0e62268351@zenbe.com>

In my particular case,  a simple tree pattern rewrite is working as a temporary solution.

- Joe

From ronburk at gmail.com  Tue Feb 23 16:31:46 2010
From: ronburk at gmail.com (Ron Burk)
Date: Tue, 23 Feb 2010 16:31:46 -0800
Subject: [antlr-interest] Multiple Lines with Implicit Endings in ANTLR
In-Reply-To: <4B83C7C1.1050608@gmail.com>
References: <4B823883.2040000@gmail.com> <4B83C7C1.1050608@gmail.com>
Message-ID: <30dde8ce1002231631u4c5d7ac4j9e620b7b0879066@mail.gmail.com>

Grammars are great for handling complex syntax. But when
the definition of a token varies all over the place and there
isn't much surrounding structure, the benefit of a parser
generator fades, IMHO.

Not sure precisely what your grammar is, but I studied the JBehave
EBNF, and that's not something I would have ever thought to
use a parser generator on. Something that simple and relatively
unstructured, I would just handcode, personally.

Which completely fails to answer your question, I know...

From parrt at cs.usfca.edu  Tue Feb 23 16:43:42 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 16:43:42 -0800
Subject: [antlr-interest] rewrite rule element cardinality
In-Reply-To: <19-9-979756b4-213e-4f92-b226-8d378e1b07b3@zenbe.com>
References: <4b8438ef.2808c00a.2d0d.ffffa68eSMTPIN_ADDED@mx.google.com>
	<19-9-979756b4-213e-4f92-b226-8d378e1b07b3@zenbe.com>
Message-ID: <95C8CA66-841A-4E2A-8A32-9095909C9D09@cs.usfca.edu>


On Feb 23, 2010, at 1:50 PM, joestelmach at gmail.com wrote:

> Thank you for the fast replies.
> 
> Terence - I'm not sure if this will help, but here's a portion of the generated parser for rewrite rule ^( GROUP c option )
> 
> while ( stream_option.hasNext()||stream_c.hasNext() ) {
>  // Test.g:15:26: ^( GROUP c option )
>  {
>    Object root_1 = (Object)adaptor.nil();
>    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GROUP, "GROUP"), root_1);
> 
>    adaptor.addChild(root_1, stream_c.nextTree());
>    adaptor.addChild(root_1, stream_option.nextTree());
>    adaptor.addChild(root_0, root_1);
>  }
> }

that *looks* ok. to

> 
> When debugging test input "c a b", this code is executed twice (as expected.)  On the first iteration, stream_c.nextTree().children = [FOO, BAR], and stream_option.nextTree().token = BAZ, but on the second iteration, stream_c.nextTree().children already has the BAZ token ([FOO, BAR, BAZ],) and stream_option.nextTree().token=BAZ.

Ack! perhaps that I did not take into account flat trees...i'll bet that is it. To confirm this, can you change 'c' to just FOO? If that works, then I know exactly what the problem is.

> Gavin - referencing the array of options from a label doesn't seem to change anything.  As for your possible workaround, is it valid to reference a parameter directly in a rewrite rule?  I was under the impression that you could only reference rule parameters within target code blocks.

Correct but you can have action blocks within the tree rewrites.
Ter

From gerald at certiv.net  Tue Feb 23 16:44:30 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 23 Feb 2010 16:44:30 -0800
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <3cac8fdf1002231604t12b848ddy9805a4ed6e260f7d@mail.gmail.com>
References: <E413921C-B2FB-4B20-9EB5-1C6C008C8C9B@cs.usfca.edu>
	<800a7724b482e84a93ddff193120a9f8@temporal-wave.com>
	<3cac8fdf1002231604t12b848ddy9805a4ed6e260f7d@mail.gmail.com>
Message-ID: <4B84766E.8050109@certiv.net>

On 2/23/2010 4:04 PM, Kirby Bohling wrote:
> I wish that superClass option was smart about handling debug vs.
> non-debug, that's the one thing that annoys me any time I choose that
> option is that I can't integrate with most of the cool debuggers
> without extra work.
>    

Curious to know what problems you run into.  I use debug mode all the 
time in a variety of circumstances know of no issue of whether the super 
class option is used or not.

Gerald


From lgcraymer at yahoo.com  Tue Feb 23 16:51:24 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 23 Feb 2010 16:51:24 -0800 (PST)
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <CAD62FCD-8A56-4F91-8F99-08096AA7A3A3@cs.usfca.edu>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
	<92b42db61002231357g5aecf780iad05882904b9afc4@mail.gmail.com>
	<CAD62FCD-8A56-4F91-8F99-08096AA7A3A3@cs.usfca.edu>
Message-ID: <983496.12446.qm@web55906.mail.re3.yahoo.com>

ECL is commercially friendly, and shows lots of work by the IBM lawyers to build a license for a flagship open source project done for commercial reasons.  IBM's Websphere development platform is the commercial version of eclipse.

--Loring




----- Original Message ----
> From: Terence Parr <parrt at cs.usfca.edu>
> To: Edgar Espina <espina.edgar at gmail.com>
> Cc: Antlr List <antlr-interest at antlr.org>
> Sent: Tue, February 23, 2010 2:27:10 PM
> Subject: Re: [antlr-interest] ANTLR IDE 2.0.0 is out!!
> 
> hi. ack. the license is GPL for clapham. i can't let that taint antlr stuff.  i 
> see your IDE is ECL, how does that compare to GPL for onerousness?
> 
> I'm open to possibility of joining efforts since I have to take over maintenance 
> of ANTLRWorks; Jean maintained it and did a fantastic job but he shouldn't have 
> to maintain anymore. I took it over.
> 
> Ter
> On Feb 23, 2010, at 1:57 PM, Edgar Espina wrote:
> 
> > Of course they are open source!! ;). ANTLR IDE use Clapham 
> (https://sourceforge.net/projects/clapham/) to make the diagrams, it had have 
> some bugs I fix all the bugs that I found (right now I'm a Clapham developer 
> too). About the railroad exporter, it's a feature of ANTLR IDE only, we could 
> work together to make it independent of ANTLR IDE, in this way Clapham or 
> ANTLRWorks can use it.
> > 
> > BTW: Why we don't just join the effort to integrate ANTLR IDE and ANTLRWorks 
> as a single solution? We can base the solution in the Eclipse Platform and 
> distributed as an Eclipse Plug-in or as Standalone Eclipse Application.
> > 
> > Regards,
> > 
> > edgar
> > 
> > On Tue, Feb 23, 2010 at 3:44 PM, Terence Parr wrote:
> > 
> > On Feb 23, 2010, at 4:20 AM, Edgar Espina wrote:
> > > The railroad feature looks pretty cool, they can be optimized and exported
> > > to HTML useful for grammar documentation.
> > > Take a look at output of grammar
> > > 
> ANTLRv3.ggrammar.
> > 
> > WOW! those look really good. If those are open-source, I should integrate that 
> into ANTLRWOrks.
> >  great job
> > Ter
> > 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> > 
> > 
> > 
> > -- 
> > edgar
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address



      


From kirby.bohling at gmail.com  Tue Feb 23 17:00:48 2010
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Tue, 23 Feb 2010 19:00:48 -0600
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <4B84766E.8050109@certiv.net>
References: <E413921C-B2FB-4B20-9EB5-1C6C008C8C9B@cs.usfca.edu> 
	<800a7724b482e84a93ddff193120a9f8@temporal-wave.com>
	<3cac8fdf1002231604t12b848ddy9805a4ed6e260f7d@mail.gmail.com> 
	<4B84766E.8050109@certiv.net>
Message-ID: <3cac8fdf1002231700o18caa279pb9ec03b2f1d08d55@mail.gmail.com>

On Tue, Feb 23, 2010 at 6:44 PM, Gerald Rosenberg <gerald at certiv.net> wrote:
> On 2/23/2010 4:04 PM, Kirby Bohling wrote:
>> I wish that superClass option was smart about handling debug vs.
>> non-debug, that's the one thing that annoys me any time I choose that
>> option is that I can't integrate with most of the cool debuggers
>> without extra work.
>>
>
> Curious to know what problems you run into. ?I use debug mode all the
> time in a variety of circumstances know of no issue of whether the super
> class option is used or not.
>

So if I write a super class, I have to choose either to inherit from
"DebugParser", or from "Parser" (and I believe similarly for Lexer,
not sure about the tree).  When you try and debug it using AntlrWorks
certain functionality doesn't work if you don't have the methods from
DebugParser (or it just doesn't post the events as expected).  When
using AntlrWorks, when it generated the code, and then failed to
compile due to the missing methods if I recall correctly.  It's been a
while.  If I had all the methods inline, this wasn't a problem at all,
as they would be inserted as expected.  As I recall, I wrote an
interface that did all of my methods, and then generated one version
of my parser that inherited from Parser, and one that inherited from
DebugParser, and then delegated to my helper class.  I recall cursing
generics and wishing that Java had "real" templates so I wouldn't
spend a bunch of time writing/generating boilerplate delegation.

I suppose I could have just inherited from DebugParser until I was
done, but I was worried about side affects or other weird behavior, so
I tried to use it only when I was actually using ANTLRWorks.

Kirby




> Gerald
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From eric at collectivegenius.net  Tue Feb 23 17:06:34 2010
From: eric at collectivegenius.net (Eric Webb)
Date: Tue, 23 Feb 2010 17:06:34 -0800
Subject: [antlr-interest] ANTLR IDE 2.0.0 is out!!
In-Reply-To: <983496.12446.qm@web55906.mail.re3.yahoo.com>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>	<15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>	<92b42db61002231357g5aecf780iad05882904b9afc4@mail.gmail.com>	<CAD62FCD-8A56-4F91-8F99-08096AA7A3A3@cs.usfca.edu>
	<983496.12446.qm@web55906.mail.re3.yahoo.com>
Message-ID: <4B847B9A.6020504@collectivegenius.net>

I'd be interested in keeping IntelliJ plugin support in a combined 
ANTLRWorks / AntlrIDE solution (as it is my IDE of choice).  As far as I 
know, it can be difficult to get SWT and Swing to play together (though 
I don't know specifics).

Something to consider if it is important to others.  Obviously, certain 
architectures should be able to mitigate the mismatch...

cheers,
eric


On 02/23/2010 04:51 PM, Loring Craymer wrote:
> ECL is commercially friendly, and shows lots of work by the IBM lawyers to build a license for a flagship open source project done for commercial reasons.  IBM's Websphere development platform is the commercial version of eclipse.
>
> --Loring
>
>
>
>
> ----- Original Message ----
>    
>> From: Terence Parr<parrt at cs.usfca.edu>
>> To: Edgar Espina<espina.edgar at gmail.com>
>> Cc: Antlr List<antlr-interest at antlr.org>
>> Sent: Tue, February 23, 2010 2:27:10 PM
>> Subject: Re: [antlr-interest] ANTLR IDE 2.0.0 is out!!
>>
>> hi. ack. the license is GPL for clapham. i can't let that taint antlr stuff.  i
>> see your IDE is ECL, how does that compare to GPL for onerousness?
>>
>> I'm open to possibility of joining efforts since I have to take over maintenance
>> of ANTLRWorks; Jean maintained it and did a fantastic job but he shouldn't have
>> to maintain anymore. I took it over.
>>
>> Ter
>> On Feb 23, 2010, at 1:57 PM, Edgar Espina wrote:
>>
>>      
>>> Of course they are open source!! ;). ANTLR IDE use Clapham
>>>        
>> (https://sourceforge.net/projects/clapham/) to make the diagrams, it had have
>> some bugs I fix all the bugs that I found (right now I'm a Clapham developer
>> too). About the railroad exporter, it's a feature of ANTLR IDE only, we could
>> work together to make it independent of ANTLR IDE, in this way Clapham or
>> ANTLRWorks can use it.
>>      
>>> BTW: Why we don't just join the effort to integrate ANTLR IDE and ANTLRWorks
>>>        
>> as a single solution? We can base the solution in the Eclipse Platform and
>> distributed as an Eclipse Plug-in or as Standalone Eclipse Application.
>>      
>>> Regards,
>>>
>>> edgar
>>>
>>> On Tue, Feb 23, 2010 at 3:44 PM, Terence Parr wrote:
>>>
>>> On Feb 23, 2010, at 4:20 AM, Edgar Espina wrote:
>>>        
>>>> The railroad feature looks pretty cool, they can be optimized and exported
>>>> to HTML useful for grammar documentation.
>>>> Take a look at output of grammar
>>>>
>>>>          
>> ANTLRv3.ggrammar.
>>      
>>> WOW! those look really good. If those are open-source, I should integrate that
>>>        
>> into ANTLRWOrks.
>>      
>>>   great job
>>> Ter
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>>        
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>      
>>>
>>>
>>> -- 
>>> edgar
>>>        
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>      
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>    

From gwlist at grahamwideman.com  Tue Feb 23 17:07:58 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Tue, 23 Feb 2010 17:07:58 -0800
Subject: [antlr-interest] ANTLR IDE 2.0.0 railroad diagrams
In-Reply-To: <92b42db61002231438h100500aco603170c7da686912@mail.gmail.co
 m>
References: <92b42db61002230420t786fe901i5912987e37ff93f8@mail.gmail.com>
	<15C87B9F-FB7D-45A4-A72F-A1E8FEE45144@cs.usfca.edu>
	<20100223203009.WDCF20722.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<92b42db61002231438h100500aco603170c7da686912@mail.gmail.com>
Message-ID: <20100224010801.FWUI20722.fed1rmmtao107.cox.net@fed1rmimpo02.cox.net>


From joestelmach at gmail.com  Tue Feb 23 17:24:07 2010
From: joestelmach at gmail.com (joestelmach at gmail.com)
Date: Wed, 24 Feb 2010 01:24:07 +0000 (UTC)
Subject: [antlr-interest] rewrite rule element cardinality
In-Reply-To: <95C8CA66-841A-4E2A-8A32-9095909C9D09@cs.usfca.edu>
References: <95C8CA66-841A-4E2A-8A32-9095909C9D09@cs.usfca.edu>
Message-ID: <19-9-7ad56d65-adad-46c7-b2ac-a72647185852@zenbe.com>

>
> Ack! perhaps that I did not take into account flat trees...i'll bet that is it. To confirm this, can you change 'c' to just FOO? If that works, then I know exactly what the problem is.
>

Yes, changing the c rule to:

    c : C -> FOO;

results in the correct AST of:

    (GROUP FOO BAZ) (GROUP FOO BAZ) (GROUP FOO BAZ)

From consiliens at gmail.com  Tue Feb 23 17:24:38 2010
From: consiliens at gmail.com (consiliens at gmail.com)
Date: Tue, 23 Feb 2010 18:24:38 -0700
Subject: [antlr-interest] Multiple Lines with Implicit Endings in ANTLR
In-Reply-To: <30dde8ce1002231631u4c5d7ac4j9e620b7b0879066@mail.gmail.com>
References: <4B823883.2040000@gmail.com> <4B83C7C1.1050608@gmail.com>
	<30dde8ce1002231631u4c5d7ac4j9e620b7b0879066@mail.gmail.com>
Message-ID: <4B847FD6.2070301@gmail.com>

On 10-02-23 05:31 PM, Ron Burk wrote:
> Grammars are great for handling complex syntax. But when
> the definition of a token varies all over the place and there
> isn't much surrounding structure, the benefit of a parser
> generator fades, IMHO.
>
> Not sure precisely what your grammar is, but I studied the JBehave
> EBNF, and that's not something I would have ever thought to
> use a parser generator on. Something that simple and relatively
> unstructured, I would just handcode, personally.
>
> Which completely fails to answer your question, I know...
>

I currently have it hand coded in Ruby, however I'd really like to move 
to an ANTLR grammar.  I just need a way to tell ANTLR to capture all the 
text until the next keyword is found.  With an explicit end keyword the 
solution is obvious, without one I'm not sure what the proper ANTLR 
syntax is.  If Ragel can handle such a grammar, I don't see why ANTLR can't?

From kyledr at gmail.com  Tue Feb 23 17:30:59 2010
From: kyledr at gmail.com (Kyle Robson)
Date: Tue, 23 Feb 2010 19:30:59 -0600
Subject: [antlr-interest] Left-Recursion Removal Help
Message-ID: <2c6275e61002231730t23fe8911u3f445a8b34d75b94@mail.gmail.com>

Hi, I have been reading on the wiki, and I already fixed two of my
larger issues in my grammar (hopefully correctly). Now I've run into a
new set of rules that need fixing, and I would like to verify I'm
going about this correctly. I will take a guess, and can someone tell
me if it's correct?

The problem snippet:

timesExp: (timesExp | divExp | modExp | andExp | factor) '*' factor;
divExp : (timesExp | divExp | modExp | andExp | factor) 'div' factor;
modExp : (timesExp | divExp | modExp | andExp | factor) 'mod' factor;
andExp : (timesExp | divExp | modExp | andExp | factor) 'and' factor;
factor : '#'; // this rule is itself broken, but I will get to this
later, so I'm pretending it's something harmless

My guess is to change them like this, using timesExp as an example

timesExp: ((divExp | modExp | andExp | factor) '*' factor) ('*' factor)*

Is this correct?

Thanks in anticipation,

Kyle Robson

From parrt at cs.usfca.edu  Tue Feb 23 18:07:25 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Feb 2010 18:07:25 -0800
Subject: [antlr-interest] rewrite rule element cardinality
In-Reply-To: <19-9-7ad56d65-adad-46c7-b2ac-a72647185852@zenbe.com>
References: <95C8CA66-841A-4E2A-8A32-9095909C9D09@cs.usfca.edu>
	<19-9-7ad56d65-adad-46c7-b2ac-a72647185852@zenbe.com>
Message-ID: <B993971A-5C7F-463F-95A0-74B7E95BB515@cs.usfca.edu>

ah ha! ok, adding bug:

http://www.antlr.org/jira/browse/ANTLR-427

Ter
On Feb 23, 2010, at 5:24 PM, joestelmach at gmail.com wrote:

>> 
>> Ack! perhaps that I did not take into account flat trees...i'll bet that is it. To confirm this, can you change 'c' to just FOO? If that works, then I know exactly what the problem is.
>> 
> 
> Yes, changing the c rule to:
> 
>    c : C -> FOO;
> 
> results in the correct AST of:
> 
>    (GROUP FOO BAZ) (GROUP FOO BAZ) (GROUP FOO BAZ)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jbb at acm.org  Tue Feb 23 18:22:55 2010
From: jbb at acm.org (John B. Brodie)
Date: Tue, 23 Feb 2010 21:22:55 -0500
Subject: [antlr-interest] Left-Recursion Removal Help
In-Reply-To: <2c6275e61002231730t23fe8911u3f445a8b34d75b94@mail.gmail.com>
References: <2c6275e61002231730t23fe8911u3f445a8b34d75b94@mail.gmail.com>
Message-ID: <1266978175.23114.15.camel@gecko.home.org>

Greetings!

It is really hard to know for sure how to truly answer your question
without seeing a complete example of your problem (e.g. please always
try to post a *smallest* yet *complete* example of your issue when
asking a question).

With that mealy worded excuse for my incompetence, I will venture an
answer below...

On Tue, 2010-02-23 at 19:30 -0600, Kyle Robson wrote:
> Hi, I have been reading on the wiki, and I already fixed two of my
> larger issues in my grammar (hopefully correctly). Now I've run into a
> new set of rules that need fixing, and I would like to verify I'm
> going about this correctly. I will take a guess, and can someone tell
> me if it's correct?
> 
> The problem snippet:
> 
> timesExp: (timesExp | divExp | modExp | andExp | factor) '*' factor;
> divExp : (timesExp | divExp | modExp | andExp | factor) 'div' factor;
> modExp : (timesExp | divExp | modExp | andExp | factor) 'mod' factor;
> andExp : (timesExp | divExp | modExp | andExp | factor) 'and' factor;
> factor : '#'; // this rule is itself broken, but I will get to this
> later, so I'm pretending it's something harmless
> 
> My guess is to change them like this, using timesExp as an example
> 
> timesExp: ((divExp | modExp | andExp | factor) '*' factor) ('*' factor)*
> 
> Is this correct?

I doubt it.

maybe try something like the following (untested):

timesExp : multiplicativeExp ;
divExp : multiplicativeExp ;
modExp : multiplicativeExp ;
andExp : multiplicativeExp ;
factor : multiplicativeExp ;

multiplicativeExp : factor_x ( multiplicativeOperator factor_x )* ;

multiplicativeOperator : '*' | 'div' | 'mod' | 'and' ;

factor_x : .....whatever you have for `factor` now.... ;



and, of course, if the above helps, you will really want to do *alot* of
renaming of rules --- rather than having the factor_x, timesExp,
divExp, ... stuff above

hope this helps
   -jbb



From cconway at cs.nyu.edu  Wed Feb 24 07:50:59 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Wed, 24 Feb 2010 10:50:59 -0500
Subject: [antlr-interest] Using C++ types in an ANTLR-generated C parser
Message-ID: <4a051d931002240750q51de3878y4d0e637d9813263f@mail.gmail.com>

I'm trying to use an ANTLR v3.2-generated parser in a C++ project
using C as the output language, compiling the output as C++. I'm
having trouble dealing with C++ types inside parser actions. Here's a
C++ header file defining a few types I'd like to use in the parser:

    /* expr.h */
    enum Kind {
      PLUS,
      MINUS
    };

    class Expr { // stub
    };

    class ExprFactory {
    public:
      Expr mkExpr(Kind kind, Expr op1, Expr op2);
      Expr mkInt(std::string n);
    };

And here's a simple parser definition:

    /* Expr.g */
    grammar Expr;

    options {
      language = 'C';
    }

    @parser::includes {
      #include "expr.h"
    }

    @members {
      ExprFactory *exprFactory;
    }

    start returns [Expr expr]
      : e = expression EOF { $expr = e; }
      ;

    expression returns [Expr e]
      : TOK_LPAREN k=builtinOp op1=expression op2=expression TOK_RPAREN
        { e = exprFactory->mkExpr(k,op1,op2); }
      | INTEGER { e = exprFactory->mkInt((char*)$INTEGER.text->chars); }
      ;

    builtinOp returns [Kind kind]
      : TOK_PLUS { kind = PLUS; }
      | TOK_MINUS { kind = MINUS; }
      ;

    TOK_PLUS : '+';
    TOK_MINUS : '-';
    TOK_LPAREN : '(';
    TOK_RPAREN : ')';
    INTEGER : ('0'..'9')+;

The grammar runs through ANTLR just fine. When I try to compile
ExprParser.c, I get errors like

 1. `conversion from ?long int? to non-scalar type ?Expr? requested`
 2. `no match for ?operator=? in ?e = 0l?`
 3. `invalid conversion from ?long int? to ?Kind?`

In each case, the statement is an initialization of an `Expr` or
`Kind` value to `NULL`.

I can make the problem go away for the `Expr`'s by changing everything
to `Expr*`. This is workable, though hardly ideal. But passing around
pointers for a simple enum like `Kind` seems ridiculous. One ugly
workaround I've found is to create a second return value, which pushes
the `Kind` value into a struct and suppresses the initialization to
`NULL`. I.e, `builtinOp` becomes

    builtinOp returns [Kind kind, bool dummy]
      : TOK_PLUS { $kind = PLUS; }
      | TOK_MINUS { $kind = MINUS; }
      ;

and the first `expression` alternative becomes

    TOK_LPAREN k=builtinOp op1=expression op2=expression TOK_RPAREN
        { e = exprFactory->mkExpr(k.kind,*op1,*op2); }

There has to be a better way to do things? Am I missing a
configuration option to the C language backend? Is there another way
to arrange my grammar to avoid this awkwardness? Is there a pure C++
backend I can use?

Thanks,
Chris

From jimi at temporal-wave.com  Wed Feb 24 07:24:03 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 24 Feb 2010 07:24:03 -0800
Subject: [antlr-interest] Using C++ types in an ANTLR-generated C parser
In-Reply-To: <4a051d931002240750q51de3878y4d0e637d9813263f@mail.gmail.com>
Message-ID: <11b3750fdc09544aa78f48192f5d9329@temporal-wave.com>

Return types from rules are structs in C, unless your output is not an AST and there is only a single return value. For various reasons, the current version of the C target tries to auto-initialize the return values and when it does not understand the type (well, it never understands the type), it defaults to = NULL. 

You should note that I have made corrections/simplifications to the initializing stuff in the current development version of the C target, and this problem has gone away. For now though, you will need your work around unless you are willing to use the bleeding edge of development by getting the latest C.stg and using that instead of the production version.

Make sure you should always reference them via $paramname and not paramname.

Also, if you would use antlr.markmail.org you could have found your answer.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christopher L Conway
> Sent: Wednesday, February 24, 2010 7:51 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Using C++ types in an ANTLR-generated C
> parser
> 
> I'm trying to use an ANTLR v3.2-generated parser in a C++ project
> using C as the output language, compiling the output as C++. I'm
> having trouble dealing with C++ types inside parser actions. Here's a
> C++ header file defining a few types I'd like to use in the parser:
> 
>     /* expr.h */
>     enum Kind {
>       PLUS,
>       MINUS
>     };
> 
>     class Expr { // stub
>     };
> 
>     class ExprFactory {
>     public:
>       Expr mkExpr(Kind kind, Expr op1, Expr op2);
>       Expr mkInt(std::string n);
>     };
> 
> And here's a simple parser definition:
> 
>     /* Expr.g */
>     grammar Expr;
> 
>     options {
>       language = 'C';
>     }
> 
>     @parser::includes {
>       #include "expr.h"
>     }
> 
>     @members {
>       ExprFactory *exprFactory;
>     }
> 
>     start returns [Expr expr]
>       : e = expression EOF { $expr = e; }
>       ;
> 
>     expression returns [Expr e]
>       : TOK_LPAREN k=builtinOp op1=expression op2=expression TOK_RPAREN
>         { e = exprFactory->mkExpr(k,op1,op2); }
>       | INTEGER { e = exprFactory->mkInt((char*)$INTEGER.text->chars);
> }
>       ;
> 
>     builtinOp returns [Kind kind]
>       : TOK_PLUS { kind = PLUS; }
>       | TOK_MINUS { kind = MINUS; }
>       ;
> 
>     TOK_PLUS : '+';
>     TOK_MINUS : '-';
>     TOK_LPAREN : '(';
>     TOK_RPAREN : ')';
>     INTEGER : ('0'..'9')+;
> 
> The grammar runs through ANTLR just fine. When I try to compile
> ExprParser.c, I get errors like
> 
>  1. `conversion from 'long int' to non-scalar type 'Expr' requested`
>  2. `no match for 'operator=' in 'e = 0l'`
>  3. `invalid conversion from 'long int' to 'Kind'`
> 
> In each case, the statement is an initialization of an `Expr` or
> `Kind` value to `NULL`.
> 
> I can make the problem go away for the `Expr`'s by changing everything
> to `Expr*`. This is workable, though hardly ideal. But passing around
> pointers for a simple enum like `Kind` seems ridiculous. One ugly
> workaround I've found is to create a second return value, which pushes
> the `Kind` value into a struct and suppresses the initialization to
> `NULL`. I.e, `builtinOp` becomes
> 
>     builtinOp returns [Kind kind, bool dummy]
>       : TOK_PLUS { $kind = PLUS; }
>       | TOK_MINUS { $kind = MINUS; }
>       ;
> 
> and the first `expression` alternative becomes
> 
>     TOK_LPAREN k=builtinOp op1=expression op2=expression TOK_RPAREN
>         { e = exprFactory->mkExpr(k.kind,*op1,*op2); }
> 
> There has to be a better way to do things? Am I missing a
> configuration option to the C language backend? Is there another way
> to arrange my grammar to avoid this awkwardness? Is there a pure C++
> backend I can use?
> 
> Thanks,
> Chris
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From christian.pontesegger at web.de  Wed Feb 24 11:36:01 2010
From: christian.pontesegger at web.de (Christian Pontesegger)
Date: Wed, 24 Feb 2010 20:36:01 +0100
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <09B1E1B7-56AC-46FA-8A2F-7497B91DDD23@cs.usfca.edu>
References: <f7b52c$3indmo@dmzms99901.na.baesystems.com>
	<09B1E1B7-56AC-46FA-8A2F-7497B91DDD23@cs.usfca.edu>
Message-ID: <4B857FA1.9060607@web.de>

 Terence Parr wrote:
> You can either define abstract methods within @members and then subclass the parser or you can create a subclass of Parser with the abstract methods or concrete methods then use superClass.
>   
Thats what I intend to do, have

@members {

    protected abstract void foo();
    ...
}

but then the generated class will have an error due to the missing
"abstract" modifier in the class definition. Unfortunately the @headers
section is pasted right before some other imports. If it were the last
before the class definition I could put my "abstract" modifier there.

I want to derive from my abstract parser and have several implementing
parsers with different functionality. Right now I am declaring dummy
methods within @members and overwrite them in my subclasses. But thats
not the way java is meant to be, right?

So if it is not possible to do that now, maybe this is some input for a
future version of ANTLR.

Christian

From cconway at cs.nyu.edu  Wed Feb 24 11:36:39 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Wed, 24 Feb 2010 14:36:39 -0500
Subject: [antlr-interest] Using C++ types in an ANTLR-generated C parser
In-Reply-To: <11b3750fdc09544aa78f48192f5d9329@temporal-wave.com>
References: <4a051d931002240750q51de3878y4d0e637d9813263f@mail.gmail.com>
	<11b3750fdc09544aa78f48192f5d9329@temporal-wave.com>
Message-ID: <4a051d931002241136x3540cc6dp82d64f744075bbbc@mail.gmail.com>

Jim,

Thanks for your response...

On Wed, Feb 24, 2010 at 10:24 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> You should note that I have made corrections/simplifications to the initializing stuff in the current development version of the C target, and this problem has gone away. For now though, you will need your work around unless you are willing to use the bleeding edge of development by getting the latest C.stg and using that instead of the production version.

Do I understand you to mean that my grammar, more or less as given,
would work in the current development version? What's the ETA for the
next release?

I've found another solution to this problem that works with v3.2:
class types used as return values and attributes can provide a
constructor and an `operator=` compatible with `NULL`. E.g., for the
`Expr` stub class

    class Expr {
     public:
      Expr() { }
      Expr(long int n) {
      }
      Expr operator=(long int n) {
        return *this;
      }
    };

Now each of the following is perfectly legal:

    Expr e1;
    e1 = NULL;
    Expr e2 = NULL;

This is fairly hacky, but I think I prefer it to using pointers or
passing references as arguments, especially if the next version of
ANTLR will allow me to delete these declarations without changing the
grammar.

Regards,
Chris

P.S. Is there a reason libantlr3c hasn't been packaged for Debian? I'd
be willing to do it myself if you're OK with it.

>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Christopher L Conway
>> Sent: Wednesday, February 24, 2010 7:51 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Using C++ types in an ANTLR-generated C
>> parser
>>
>> I'm trying to use an ANTLR v3.2-generated parser in a C++ project
>> using C as the output language, compiling the output as C++. I'm
>> having trouble dealing with C++ types inside parser actions. Here's a
>> C++ header file defining a few types I'd like to use in the parser:
>>
>> ? ? /* expr.h */
>> ? ? enum Kind {
>> ? ? ? PLUS,
>> ? ? ? MINUS
>> ? ? };
>>
>> ? ? class Expr { // stub
>> ? ? };
>>
>> ? ? class ExprFactory {
>> ? ? public:
>> ? ? ? Expr mkExpr(Kind kind, Expr op1, Expr op2);
>> ? ? ? Expr mkInt(std::string n);
>> ? ? };
>>
>> And here's a simple parser definition:
>>
>> ? ? /* Expr.g */
>> ? ? grammar Expr;
>>
>> ? ? options {
>> ? ? ? language = 'C';
>> ? ? }
>>
>> ? ? @parser::includes {
>> ? ? ? #include "expr.h"
>> ? ? }
>>
>> ? ? @members {
>> ? ? ? ExprFactory *exprFactory;
>> ? ? }
>>
>> ? ? start returns [Expr expr]
>> ? ? ? : e = expression EOF { $expr = e; }
>> ? ? ? ;
>>
>> ? ? expression returns [Expr e]
>> ? ? ? : TOK_LPAREN k=builtinOp op1=expression op2=expression TOK_RPAREN
>> ? ? ? ? { e = exprFactory->mkExpr(k,op1,op2); }
>> ? ? ? | INTEGER { e = exprFactory->mkInt((char*)$INTEGER.text->chars);
>> }
>> ? ? ? ;
>>
>> ? ? builtinOp returns [Kind kind]
>> ? ? ? : TOK_PLUS { kind = PLUS; }
>> ? ? ? | TOK_MINUS { kind = MINUS; }
>> ? ? ? ;
>>
>> ? ? TOK_PLUS : '+';
>> ? ? TOK_MINUS : '-';
>> ? ? TOK_LPAREN : '(';
>> ? ? TOK_RPAREN : ')';
>> ? ? INTEGER : ('0'..'9')+;
>>
>> The grammar runs through ANTLR just fine. When I try to compile
>> ExprParser.c, I get errors like
>>
>> ?1. `conversion from 'long int' to non-scalar type 'Expr' requested`
>> ?2. `no match for 'operator=' in 'e = 0l'`
>> ?3. `invalid conversion from 'long int' to 'Kind'`
>>
>> In each case, the statement is an initialization of an `Expr` or
>> `Kind` value to `NULL`.
>>
>> I can make the problem go away for the `Expr`'s by changing everything
>> to `Expr*`. This is workable, though hardly ideal. But passing around
>> pointers for a simple enum like `Kind` seems ridiculous. One ugly
>> workaround I've found is to create a second return value, which pushes
>> the `Kind` value into a struct and suppresses the initialization to
>> `NULL`. I.e, `builtinOp` becomes
>>
>> ? ? builtinOp returns [Kind kind, bool dummy]
>> ? ? ? : TOK_PLUS { $kind = PLUS; }
>> ? ? ? | TOK_MINUS { $kind = MINUS; }
>> ? ? ? ;
>>
>> and the first `expression` alternative becomes
>>
>> ? ? TOK_LPAREN k=builtinOp op1=expression op2=expression TOK_RPAREN
>> ? ? ? ? { e = exprFactory->mkExpr(k.kind,*op1,*op2); }
>>
>> There has to be a better way to do things? Am I missing a
>> configuration option to the C language backend? Is there another way
>> to arrange my grammar to avoid this awkwardness? Is there a pure C++
>> backend I can use?
>>
>> Thanks,
>> Chris
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Wed Feb 24 11:38:16 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 24 Feb 2010 11:38:16 -0800
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <4B857FA1.9060607@web.de>
References: <f7b52c$3indmo@dmzms99901.na.baesystems.com>
	<09B1E1B7-56AC-46FA-8A2F-7497B91DDD23@cs.usfca.edu>
	<4B857FA1.9060607@web.de>
Message-ID: <394EAFD1-843C-4B97-86C6-EC41CF2001C8@cs.usfca.edu>

oh, i do:

protected abstract void foo() {}

Ter
On Feb 24, 2010, at 11:36 AM, Christian Pontesegger wrote:

> Terence Parr wrote:
>> You can either define abstract methods within @members and then subclass the parser or you can create a subclass of Parser with the abstract methods or concrete methods then use superClass.
>> 
> Thats what I intend to do, have
> 
> @members {
> 
>    protected abstract void foo();
>    ...
> }
> 
> but then the generated class will have an error due to the missing
> "abstract" modifier in the class definition. Unfortunately the @headers
> section is pasted right before some other imports. If it were the last
> before the class definition I could put my "abstract" modifier there.
> 
> I want to derive from my abstract parser and have several implementing
> parsers with different functionality. Right now I am declaring dummy
> methods within @members and overwrite them in my subclasses. But thats
> not the way java is meant to be, right?
> 
> So if it is not possible to do that now, maybe this is some input for a
> future version of ANTLR.
> 
> Christian
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From cconway at cs.nyu.edu  Wed Feb 24 21:09:09 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Thu, 25 Feb 2010 00:09:09 -0500
Subject: [antlr-interest] Bounding the token stream in the C backend
Message-ID: <4a051d931002242109l5550483cmec103ea435c3f254@mail.gmail.com>

I've got a large input file (~39MB) that I'm attempting to parse with
an ANTLR3-generated C parser. The parser is using a huge amount of
memory (~3.7GB) and seems to start thrashing without making much
progress towards termination. I found a thread from earlier this month
(http://markmail.org/message/jfngdd2ci6h7qrbo) suggesting the most
likely cause of such behavior is a parser bug, but I've stepped
through the code and it seems to be lexing just fine. Rather, it seems
the problem is that fillBuffer() is tokenizing the whole file in one
go; then, the parsing rules slow to a crawl because the token buffer
is sitting on all the memory.

I wonder if there is a way to change fillBuffer()'s behavior, so that
it will only lex some bounded number of tokens before allowing parsing
to proceed?

Thanks,
Chris

From kenneth.domino at domemtech.com  Thu Feb 25 02:22:26 2010
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Thu, 25 Feb 2010 05:22:26 -0500
Subject: [antlr-interest] Literals and subrules
Message-ID: <AC343DFC0B0A4B5392E67E2CED483C68@pc2008>

Hi All,

I'm not sure I understand why the following grammars, which I thought should recognize the same language, do not all work.  The differences are in the use of literals in the parser rules versus literals in the lexical analyzer rules, and in the use of parentheses for sub-rules.  The language is very simple: just a single letter followed by the end of file.  Can someone explain why some work and others do not?

1) This grammar places the literals in the parser rules.  Antlr generates a parser (exits with 0), but the parser does not compile.

  $ cat Doit1.g
  grammar Doit1;

  prog:
          id
          EOF
      ;

  id:
          'a' .. 'z'
          | 'A' .. 'Z'
      ;
  $ java org.antlr.Tool Doit1.g

  $ javac Doit1*.java
  Doit1Parser.java:71: illegal start of expression
              if (  ) {
                    ^
  1 error



2) The second grammar Doit2 places parentheses around the literal ranges because I eventually want to recognize something more than one character using the '+' sub-rule.  Using parentheses is supposed to be a "Subrule. Like a call to a rule with no name." according to the documentation (http://www.antlr.org/wiki/display/ANTLR3/Grammars), so it should be legal.  Unfortunately, this grammar causes Antlr to generate an error message regarding EOF.  I don't understand why a sub-rule used here does not work.

  $ cat Doit2.g
  grammar Doit2;

  prog:
          id
          EOF
      ;

  id:
          ( 'a' .. 'z' )
          | ( 'A' .. 'Z' )
      ;

  $ java org.antlr.Tool Doit2.g
  warning(200): Doit2.g:8:3: Decision can match input such as "EOF" using multiple
   alternatives: 1, 2
  As a result, alternative(s) 2 were disabled for that input
  error(201): Doit2.g:8:3: The following alternatives can never be matched: 2


3) This grammar, Doit3, places the literals in the lexer rules.  Antlr produces a parser and lexer that compile and the recognizer accepts the language.

  $ cat Doit3.g
  grammar Doit3;

  prog:
          ID
          EOF
      ;

  ID:
          'a' .. 'z'
          | 'A' .. 'Z'
      ;

  $ java org.antlr.Tool Doit3.g

  $ javac Doit3*.java

  $ java Doit3 < i

  $


4) This grammar, Doit4, is almost the same as Doit3, but uses parentheses for sub-rules.  This grammar works, but I'm not sure why because this seems inconsistent in light that grammar Doit2 does not.

  $ cat Doit4.g
  grammar Doit4;

  prog:
          ID
          EOF
      ;

  ID:
          ( 'a' .. 'z' )
          | ( 'A' .. 'Z' )
      ;

  $ java org.antlr.Tool Doit4.g

  $ javac Doit4*.java

  $ java Doit4 < i

  $
Usually, I would simply move all literals to the lexical analyzer (I.e., use literals only in lexer rules) because this is how traditionally parsers and lexers were done.  But, I often see grammars for Antlr that have literals sprinkled through out both parser and lexer rules, so I thought I would give it a try.

Ken

From ssmile03 at gmail.com  Thu Feb 25 06:37:51 2010
From: ssmile03 at gmail.com (Smiley 4321)
Date: Thu, 25 Feb 2010 17:37:51 +0300
Subject: [antlr-interest] help: using antlr
In-Reply-To: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
Message-ID: <a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>

Hello.

I am looking for small parallel program if antlr can understand -
-----
#include <stdio.h>
#include ,mpi.h>

int main(int argc, char *argv[] )
{
 int numprocs, namelength, rank;
 char processor_name[MPI_MAX_PROCESSOR_NAME];

MPI_Init(&argc, &argv);
MPI_Comm_size (MPI_COMMON_WORLD, &numprocs);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Get_processor_name(processor_name, &namelength);

printf("Process %d, on %s out of %d\n", rank, processor_name, numprocs):

MPI_Finalize();
}
----

I am very new to antlr and as an assignment, I hav to work with antlr for
above mpi code.

?Smiley

>

From nvlassopoulos at gmail.com  Thu Feb 25 07:30:42 2010
From: nvlassopoulos at gmail.com (Nick Vlassopoulos)
Date: Thu, 25 Feb 2010 16:30:42 +0100
Subject: [antlr-interest] Bounding the token stream in the C backend
In-Reply-To: <4a051d931002242109l5550483cmec103ea435c3f254@mail.gmail.com>
References: <4a051d931002242109l5550483cmec103ea435c3f254@mail.gmail.com>
Message-ID: <1419225d1002250730y3e3e4c0asaa12f40a983c5944@mail.gmail.com>

Hi Christopher,

I am not entirely sure, but you may have run into the same problem as I did
a
while ago. You may want to have a look at the discussion thread back then
for
some advices:
http://www.antlr.org/pipermail/antlr-interest/2009-April/034125.html
Although I used the simple solution Jim suggested, i.e. parsed the
headers and just used some custom code to parse the rest of the file,
some of the advices in that thread might be helpful.

Hope this helps,

Nikos


On Thu, Feb 25, 2010 at 6:09 AM, Christopher L Conway <cconway at cs.nyu.edu>wrote:

> I've got a large input file (~39MB) that I'm attempting to parse with
> an ANTLR3-generated C parser. The parser is using a huge amount of
> memory (~3.7GB) and seems to start thrashing without making much
> progress towards termination. I found a thread from earlier this month
> (http://markmail.org/message/jfngdd2ci6h7qrbo) suggesting the most
> likely cause of such behavior is a parser bug, but I've stepped
> through the code and it seems to be lexing just fine. Rather, it seems
> the problem is that fillBuffer() is tokenizing the whole file in one
> go; then, the parsing rules slow to a crawl because the token buffer
> is sitting on all the memory.
>
> I wonder if there is a way to change fillBuffer()'s behavior, so that
> it will only lex some bounded number of tokens before allowing parsing
> to proceed?
>
> Thanks,
> Chris
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Thu Feb 25 07:40:30 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 25 Feb 2010 07:40:30 -0800
Subject: [antlr-interest] Bounding the token stream in the C backend
In-Reply-To: <1419225d1002250730y3e3e4c0asaa12f40a983c5944@mail.gmail.com>
Message-ID: <33cb9626d78f404d95f7f941f0517558@temporal-wave.com>

The problem is your lexer (almost 100%). Look for a rule that has an empty alt. This rule will match forever and consume no input:

FRED : ;

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Nick Vlassopoulos
> Sent: Thursday, February 25, 2010 7:31 AM
> To: Christopher L Conway
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Bounding the token stream in the C
> backend
> 
> Hi Christopher,
> 
> I am not entirely sure, but you may have run into the same problem as I
> did
> a
> while ago. You may want to have a look at the discussion thread back
> then
> for
> some advices:
> http://www.antlr.org/pipermail/antlr-interest/2009-April/034125.html
> Although I used the simple solution Jim suggested, i.e. parsed the
> headers and just used some custom code to parse the rest of the file,
> some of the advices in that thread might be helpful.
> 
> Hope this helps,
> 
> Nikos
> 
> 
> On Thu, Feb 25, 2010 at 6:09 AM, Christopher L Conway
> <cconway at cs.nyu.edu>wrote:
> 
> > I've got a large input file (~39MB) that I'm attempting to parse with
> > an ANTLR3-generated C parser. The parser is using a huge amount of
> > memory (~3.7GB) and seems to start thrashing without making much
> > progress towards termination. I found a thread from earlier this
> month
> > (http://markmail.org/message/jfngdd2ci6h7qrbo) suggesting the most
> > likely cause of such behavior is a parser bug, but I've stepped
> > through the code and it seems to be lexing just fine. Rather, it
> seems
> > the problem is that fillBuffer() is tokenizing the whole file in one
> > go; then, the parsing rules slow to a crawl because the token buffer
> > is sitting on all the memory.
> >
> > I wonder if there is a way to change fillBuffer()'s behavior, so that
> > it will only lex some bounded number of tokens before allowing
> parsing
> > to proceed?
> >
> > Thanks,
> > Chris
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From wabsie at gmail.com  Thu Feb 25 08:55:06 2010
From: wabsie at gmail.com (Mark Ruvald)
Date: Thu, 25 Feb 2010 17:55:06 +0100
Subject: [antlr-interest] help: using antlr
In-Reply-To: <a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com> 
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
Message-ID: <220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>

Hi,

2010/2/25 Smiley 4321 <ssmile03 at gmail.com>

> Hello.
>
> I am looking for small parallel program if antlr can understand -
> -----
>
> I am very new to antlr and as an assignment, I hav to work with antlr for
> above mpi code.
>
>
http://catb.org/~esr/faqs/smart-questions.html


> ?Smiley
>
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
-- Mark Ruvald.

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing on usenet and in e-mail?

From ssmile03 at gmail.com  Thu Feb 25 09:28:42 2010
From: ssmile03 at gmail.com (Smiley 4321)
Date: Thu, 25 Feb 2010 20:28:42 +0300
Subject: [antlr-interest] help: using antlr
In-Reply-To: <220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
Message-ID: <a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>

didn't understood.

Does my question is out of reach. But, probably any tool should be strong
enough to parse any form of source code.


On Thu, Feb 25, 2010 at 7:55 PM, Mark Ruvald <wabsie at gmail.com> wrote:

> Hi,
>
> 2010/2/25 Smiley 4321 <ssmile03 at gmail.com>
>
>> Hello.
>>
>> I am looking for small parallel program if antlr can understand -
>> -----
>>
>> I am very new to antlr and as an assignment, I hav to work with antlr for
>> above mpi code.
>>
>>
> http://catb.org/~esr/faqs/smart-questions.html<http://catb.org/%7Eesr/faqs/smart-questions.html>
>
>
>> ?Smiley
>>
>> >
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
> --
> -- Mark Ruvald.
>
> A: Because it messes up the order in which people normally read text.
> Q: Why is top-posting such a bad thing?
> A: Top-posting.
> Q: What is the most annoying thing on usenet and in e-mail?
>

From cconway at cs.nyu.edu  Thu Feb 25 09:29:48 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Thu, 25 Feb 2010 12:29:48 -0500
Subject: [antlr-interest] Bounding the token stream in the C backend
In-Reply-To: <33cb9626d78f404d95f7f941f0517558@temporal-wave.com>
References: <1419225d1002250730y3e3e4c0asaa12f40a983c5944@mail.gmail.com>
	<33cb9626d78f404d95f7f941f0517558@temporal-wave.com>
Message-ID: <4a051d931002250929i1fa33f84kdd03aaf3950c0c41@mail.gmail.com>

Jim,

You didn't read my email. The input file is 39MB and legitimately has
more than 12M tokens. I've stepped through the code and the tokenizer
terminates. The problem is that it grabs >3GB of memory in the process
and the parser as a whole grinds to a halt due to memory pressure.
Presumably, I have to replace the tokenizer with one that does
buffering, but I'm not sure where I should start. If I did some work
on this, is it something you'd be interested in incorporating into the
trunk?

Regards,
Chris

On Thu, Feb 25, 2010 at 10:40 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> The problem is your lexer (almost 100%). Look for a rule that has an empty alt. This rule will match forever and consume no input:
>
> FRED : ;
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Nick Vlassopoulos
>> Sent: Thursday, February 25, 2010 7:31 AM
>> To: Christopher L Conway
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Bounding the token stream in the C
>> backend
>>
>> Hi Christopher,
>>
>> I am not entirely sure, but you may have run into the same problem as I
>> did
>> a
>> while ago. You may want to have a look at the discussion thread back
>> then
>> for
>> some advices:
>> http://www.antlr.org/pipermail/antlr-interest/2009-April/034125.html
>> Although I used the simple solution Jim suggested, i.e. parsed the
>> headers and just used some custom code to parse the rest of the file,
>> some of the advices in that thread might be helpful.
>>
>> Hope this helps,
>>
>> Nikos
>>
>>
>> On Thu, Feb 25, 2010 at 6:09 AM, Christopher L Conway
>> <cconway at cs.nyu.edu>wrote:
>>
>> > I've got a large input file (~39MB) that I'm attempting to parse with
>> > an ANTLR3-generated C parser. The parser is using a huge amount of
>> > memory (~3.7GB) and seems to start thrashing without making much
>> > progress towards termination. I found a thread from earlier this
>> month
>> > (http://markmail.org/message/jfngdd2ci6h7qrbo) suggesting the most
>> > likely cause of such behavior is a parser bug, but I've stepped
>> > through the code and it seems to be lexing just fine. Rather, it
>> seems
>> > the problem is that fillBuffer() is tokenizing the whole file in one
>> > go; then, the parsing rules slow to a crawl because the token buffer
>> > is sitting on all the memory.
>> >
>> > I wonder if there is a way to change fillBuffer()'s behavior, so that
>> > it will only lex some bounded number of tokens before allowing
>> parsing
>> > to proceed?
>> >
>> > Thanks,
>> > Chris
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
>> address
>> >
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From scott at javadude.com  Thu Feb 25 09:57:13 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Thu, 25 Feb 2010 12:57:13 -0500
Subject: [antlr-interest] help: using antlr
In-Reply-To: <a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>
Message-ID: <d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>

Guys... can we please try to be nice and helpful rather than start the
top/bottom posting debate (or other posting-style issues) on this list
yet again?

This is the kind of attitude that really turns folks off and can give
the list a bad reputation. We don't want to be equated with
comp.lang.object, do we?

I'd like to be involved with ANTLR again, but attitude like this on
this list in the past has made me quit for long bouts several times
over the years. I've enjoyed following and contributing a few thoughts
and help over the past couple months and would like to continue to do
so.

Thanks in advance,
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com


>> -- Mark Ruvald.
>>
>> A: Because it messes up the order in which people normally read text.
>> Q: Why is top-posting such a bad thing?
>> A: Top-posting.
>> Q: What is the most annoying thing on usenet and in e-mail?
>>

From boughtonp at gmail.com  Thu Feb 25 10:17:55 2010
From: boughtonp at gmail.com (Peter Boughton)
Date: Thu, 25 Feb 2010 18:17:55 +0000
Subject: [antlr-interest] help: using antlr
In-Reply-To: <d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com> 
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com> 
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com> 
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com> 
	<d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>
Message-ID: <5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>

I think the top-posting bit is just part of his sig, and - whilst it
is very annoying - it is a far lesser crime than unnecessarily quoting
a whole message (including signature & footer) then dumping a bare
link in the middle of it, which clearly causes confusion.

Anyway, with regards to the "Asking Smart Questions" link (
http://catb.org/~esr/faqs/smart-questions.html ), I think the key part
may be that Smiley has posted some code and said he has an assignment,
but may not have explained what he's tried so far, and which bit he's
stuck on.
(that's a guess - I don't fully understand the question so may be wrong).

Smiley - I don't understand the problem myself, but it might help
others who do if you state:
Is this is a program you have written, or someone else has supplied?
Have you searched Google for "ANTLR MPI" or similar?
Have you read any of the ANTLR FAQs/documentation?
etc

Hope this helps clarify things. :)

From christian.pontesegger at web.de  Thu Feb 25 12:18:59 2010
From: christian.pontesegger at web.de (Christian Pontesegger)
Date: Thu, 25 Feb 2010 21:18:59 +0100
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <394EAFD1-843C-4B97-86C6-EC41CF2001C8@cs.usfca.edu>
References: <f7b52c$3indmo@dmzms99901.na.baesystems.com>
	<09B1E1B7-56AC-46FA-8A2F-7497B91DDD23@cs.usfca.edu>
	<4B857FA1.9060607@web.de>
	<394EAFD1-843C-4B97-86C6-EC41CF2001C8@cs.usfca.edu>
Message-ID: <4B86DB33.2060604@web.de>

I still don't get it:

Here is my treegrammar:

tree grammar IScriptCompiler;

options {
  language = Java;
  tokenVocab = IScript;
  ASTLabelType = CommonTree;
}

@header {
    package com.something.test;
}

@members {

    protected abstract void foo();

}

program
    :    globalStatement*
    ;

... to be continued




Now what I get is a java class like this:


public class IScriptCompiler extends TreeParser {

    <snip>

        protected abstract void foo();

...

This is not valid java code!

I need something like this

abstract public class IScriptCompiler extends TreeParser {

    <snip>

        protected abstract void foo();


How do I get this little "abstract" modifier in front of the class name?


BTW:
What should

	protected abstract void foo() {}

do? A body for an abstract method???


Christian


On 24.02.2010 20:38,  Terence Parr wrote:
> oh, i do:
>
> protected abstract void foo() {}
>
> Ter
> On Feb 24, 2010, at 11:36 AM, Christian Pontesegger wrote:
>
>   
>> Terence Parr wrote:
>>     
>>> You can either define abstract methods within @members and then subclass the parser or you can create a subclass of Parser with the abstract methods or concrete methods then use superClass.
>>>
>>>       
>> Thats what I intend to do, have
>>
>> @members {
>>
>>    protected abstract void foo();
>>    ...
>> }
>>
>> but then the generated class will have an error due to the missing
>> "abstract" modifier in the class definition. Unfortunately the @headers
>> section is pasted right before some other imports. If it were the last
>> before the class definition I could put my "abstract" modifier there.
>>
>> I want to derive from my abstract parser and have several implementing
>> parsers with different functionality. Right now I am declaring dummy
>> methods within @members and overwrite them in my subclasses. But thats
>> not the way java is meant to be, right?
>>
>> So if it is not possible to do that now, maybe this is some input for a
>> future version of ANTLR.
>>
>> Christian
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>     
>   


From wabsie at gmail.com  Thu Feb 25 12:33:09 2010
From: wabsie at gmail.com (Mark Ruvald)
Date: Thu, 25 Feb 2010 21:33:09 +0100
Subject: [antlr-interest] help: using antlr
In-Reply-To: <5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com> 
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com> 
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com> 
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com> 
	<d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com> 
	<5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
Message-ID: <220288281002251233n79caac93p7ecac265b4077d3a@mail.gmail.com>

Hi again,

2010/2/25 Peter Boughton <boughtonp at gmail.com>

> I think the top-posting bit is just part of his sig,


Exactly. I think that should be pretty evident.
Also, I have never scolded anyone when they were top-posting.
But people should be aware of the the poor readability top-posting induces -
so I put it in my signature.

(btw, I really like your video tutorials, Scott ;)

and - whilst it
> is very annoying - it is a far lesser crime than unnecessarily quoting
> a whole message (including signature & footer) then dumping a bare
> link in the middle of it, which clearly causes confusion.
>

One URL, short and simple.
I don't like wasting my time on verbosity - like I'm doing now.

@Smiley: You wrote: "[...] if antlr can understand".
1) What are you trying to do? -We don't know yet.
2) There's an ANTLR C grammar at http://antlr.org/grammar/1153358328744/C.g

I hope this helps :)

kind regards
-- Mark Ruvald (still keeping his signature)

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing on usenet and in e-mail?

From jimi at temporal-wave.com  Thu Feb 25 12:47:21 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 25 Feb 2010 12:47:21 -0800
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <4B86DB33.2060604@web.de>
Message-ID: <a54bbe2678423143894f9eddcbba08b1@temporal-wave.com>

tree grammar IScriptTreeParser;
options {
   language = Java;
   tokenVocab = IScript;
   ASTLabelType = CommonTree;
   SuperClass = AbstractIScriptTreeParser;
}
 
@header {
     package com.something.test;
}
 
 
program
    :    g=globalStatement { blah($g); 

     ;


AbstractIScriptCompiler.java

public class AbstractIScriptCompiler extends TreeParser {

 ///// Implement constructors

 ////; Implement member methods

 protected void blah(CommonTree t) ...
}



Etc!

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian Pontesegger
> Sent: Thursday, February 25, 2010 12:19 PM
> To: Terence Parr
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Abstract tree parser
> 
> I still don't get it:
> 
> Here is my treegrammar:
> 
> tree grammar IScriptCompiler;
> 
> options {
>   language = Java;
>   tokenVocab = IScript;
>   ASTLabelType = CommonTree;
> }
> 
> @header {
>     package com.something.test;
> }
> 
> @members {
> 
>     protected abstract void foo();
> 
> }
> 
> program
>     :    globalStatement*
>     ;
> 
> ... to be continued
> 
> 
> 
> 
> Now what I get is a java class like this:
> 
> 
> public class IScriptCompiler extends TreeParser {
> 
>     <snip>
> 
>         protected abstract void foo();
> 
> ...
> 
> This is not valid java code!
> 
> I need something like this
> 
> abstract public class IScriptCompiler extends TreeParser {
> 
>     <snip>
> 
>         protected abstract void foo();
> 
> 
> How do I get this little "abstract" modifier in front of the class
> name?
> 
> 
> BTW:
> What should
> 
> 	protected abstract void foo() {}
> 
> do? A body for an abstract method???
> 
> 
> Christian
> 
> 
> On 24.02.2010 20:38,  Terence Parr wrote:
> > oh, i do:
> >
> > protected abstract void foo() {}
> >
> > Ter
> > On Feb 24, 2010, at 11:36 AM, Christian Pontesegger wrote:
> >
> >
> >> Terence Parr wrote:
> >>
> >>> You can either define abstract methods within @members and then
> subclass the parser or you can create a subclass of Parser with the
> abstract methods or concrete methods then use superClass.
> >>>
> >>>
> >> Thats what I intend to do, have
> >>
> >> @members {
> >>
> >>    protected abstract void foo();
> >>    ...
> >> }
> >>
> >> but then the generated class will have an error due to the missing
> >> "abstract" modifier in the class definition. Unfortunately the
> @headers
> >> section is pasted right before some other imports. If it were the
> last
> >> before the class definition I could put my "abstract" modifier
> there.
> >>
> >> I want to derive from my abstract parser and have several
> implementing
> >> parsers with different functionality. Right now I am declaring dummy
> >> methods within @members and overwrite them in my subclasses. But
> thats
> >> not the way java is meant to be, right?
> >>
> >> So if it is not possible to do that now, maybe this is some input
> for a
> >> future version of ANTLR.
> >>
> >> Christian
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-email-address
> >>
> >
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From scott at javadude.com  Thu Feb 25 14:27:54 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Thu, 25 Feb 2010 17:27:54 -0500
Subject: [antlr-interest] help: using antlr
In-Reply-To: <220288281002251233n79caac93p7ecac265b4077d3a@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>
	<d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>
	<5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
	<220288281002251233n79caac93p7ecac265b4077d3a@mail.gmail.com>
Message-ID: <d19d16481002251427w5963033bs42e7ae05b67fdd7f@mail.gmail.com>

Ahh... My apologies - I didn't notice that URL you put in the middle
and thought all you were doing was adding the "thou shalt not
top-post" at the bottom... Now if you had added it at the top... ;)

btw: Thanks for the "btw"; glad you like them! I'm planning more as
soon as I get time. I want to get my AST visualizer working enough
first to animate what's happening when the parser runs. Getting
close...

See http://javadude.com/misc/astvis.mp4 for the basic idea (the
stuttering is only due to the vid capture - the animation itself runs
smoothly). Edgar and I are thinking of integrating this into ANTLR IDE
once it's really cooked and has some nice breakpoint capability.
-- Scott

----------------------------------------
Scott Stanchfield
http://javadude.com



On Thu, Feb 25, 2010 at 3:33 PM, Mark Ruvald <wabsie at gmail.com> wrote:
> Hi again,
>
> 2010/2/25 Peter Boughton <boughtonp at gmail.com>
>>
>> I think the top-posting bit is just part of his sig,
>
> Exactly. I think that should be pretty evident.
> Also, I have never scolded anyone when they were top-posting.
> But people should be aware of the the poor?readability top-posting induces -
> so I put it in my signature.
> (btw, I really like your video tutorials, Scott ;)

From bkiers at gmail.com  Thu Feb 25 14:36:01 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 25 Feb 2010 23:36:01 +0100
Subject: [antlr-interest] help: using antlr
In-Reply-To: <d19d16481002251427w5963033bs42e7ae05b67fdd7f@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>
	<d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>
	<5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
	<220288281002251233n79caac93p7ecac265b4077d3a@mail.gmail.com>
	<d19d16481002251427w5963033bs42e7ae05b67fdd7f@mail.gmail.com>
Message-ID: <af443a971002251436p3aabc30bwf9bf67c5cb25d627@mail.gmail.com>

On Thu, Feb 25, 2010 at 11:27 PM, Scott Stanchfield <scott at javadude.com>wrote:

> ...
>
> See http://javadude.com/misc/astvis.mp4 for the basic idea (the
> stuttering is only due to the vid capture - the animation itself runs
> smoothly). Edgar and I are thinking of integrating this into ANTLR IDE
> once it's really cooked and has some nice breakpoint capability.
> -- Scott
>

NICE!
This might be the first time I regret switching to IntelliJ : )

Regards,

Bart.

@Smiley, sorry for the OT post!

From ron.hunter-duvar at oracle.com  Thu Feb 25 14:35:29 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Thu, 25 Feb 2010 15:35:29 -0700
Subject: [antlr-interest] Generated parser class too large to compile
Message-ID: <4B86FB31.6080904@oracle.com>

Hi,

I'm running into a problem with the Java parser class generated by Antlr 
3.2 being too large to compile. I don't think there's anything wrong 
with my grammar or with Antlr, it's simply the size and complexity of 
the grammar. It's already 2,500 lines of code, 208 rules, and Antlr 
generates 68,000 lines of output. This is just the parser grammar (the 
lexer grammar is separate and isn't a problem), and I'm not done yet. 
The problem is that Java is not an ideal language target for code 
generation, given it's 64KB of bytecode per class limit (and various 
other 64K limits), due to the JVM using 16 bit pointers 
(http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#88659). 


I've been able to work around the problem with a poor man's refactoring, 
a Perl script that breaks out the one generated class into interfaces 
for the constants (tokens, DFA initializations) and an abstract 
superclass for the DFA nested classes and methods and stubs for all the 
other methods. This is working, but as I continue I have to keep 
refining it to do more refactoring. It's really a kludge, and only works 
by relying on the specific structure and formatting of the Antlr output.

I'm thinking that a more general solution would be to modify the code 
generation to generate factored code. I've only looked briefly at it so 
far, but since it's all driven by StringTemplate templates and already 
accomodates multiple output languages, it shouldn't be too difficult to 
adapt it. I would probably create a new back-end "language" such as 
"FactoredJava", based on the Java templates. That would make switching 
between the standard one and mine a simple grammar option change. Does 
anyone see a problem with this plan? Any suggestions?

The only other alternative I see is to switch to a back-end language 
that doesn't have this limitation. But that creates quite a bit of 
rework (replacing semantic predicates and action code, and the 
subclasses of standard Antlr runtime classes that I've created to 
customize the behaviour), as well as integration issues with all the 
other Java code.

Is there anything I'm missing here? Any Antlr options that would 
significantly reduce the size of the generated code?

Thanks,
Ron

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From jimi at temporal-wave.com  Thu Feb 25 14:43:55 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 25 Feb 2010 14:43:55 -0800
Subject: [antlr-interest] Generated parser class too large to compile
In-Reply-To: <4B86FB31.6080904@oracle.com>
Message-ID: <1dbe1f749b821c4580e4247411360e12@temporal-wave.com>

Ron,

All you need do is create a top level grammar file that imports the other parts of your SQL grammar which will then generate in separate classes. From my TSQL grammar:

parser grammar tsql;

options
{
	// Produce a generic AST as output.
	//
	output		= AST;

	// Import the lexers token numbering scheme.
	//
	tokenVocab	= tsqllexer;
}

 
// Import the grammar for the million SQL statements
//
import tsqlcommon, tsqlselect, tsqlalter, tsqlcreate, tsqlpermissions, tsqlcursors, tsqlmisc, tsqlmisc2, tsqldrop

tokens { X; Y; }

@parser::header{  }

a : couple of base rules ;

couple : ;

// Rest are in the other grammars. This works for the tree walkers too.


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
> Sent: Thursday, February 25, 2010 2:35 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Generated parser class too large to compile
> 
> Hi,
> 
> I'm running into a problem with the Java parser class generated by
> Antlr
> 3.2 being too large to compile. I don't think there's anything wrong
> with my grammar or with Antlr, it's simply the size and complexity of
> the grammar. It's already 2,500 lines of code, 208 rules, and Antlr
> generates 68,000 lines of output. This is just the parser grammar (the
> lexer grammar is separate and isn't a problem), and I'm not done yet.
> The problem is that Java is not an ideal language target for code
> generation, given it's 64KB of bytecode per class limit (and various
> other 64K limits), due to the JVM using 16 bit pointers
> (http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.
> html#88659).
> 
> 
> I've been able to work around the problem with a poor man's
> refactoring,
> a Perl script that breaks out the one generated class into interfaces
> for the constants (tokens, DFA initializations) and an abstract
> superclass for the DFA nested classes and methods and stubs for all the
> other methods. This is working, but as I continue I have to keep
> refining it to do more refactoring. It's really a kludge, and only
> works
> by relying on the specific structure and formatting of the Antlr
> output.
> 
> I'm thinking that a more general solution would be to modify the code
> generation to generate factored code. I've only looked briefly at it so
> far, but since it's all driven by StringTemplate templates and already
> accomodates multiple output languages, it shouldn't be too difficult to
> adapt it. I would probably create a new back-end "language" such as
> "FactoredJava", based on the Java templates. That would make switching
> between the standard one and mine a simple grammar option change. Does
> anyone see a problem with this plan? Any suggestions?
> 
> The only other alternative I see is to switch to a back-end language
> that doesn't have this limitation. But that creates quite a bit of
> rework (replacing semantic predicates and action code, and the
> subclasses of standard Antlr runtime classes that I've created to
> customize the behaviour), as well as integration issues with all the
> other Java code.
> 
> Is there anything I'm missing here? Any Antlr options that would
> significantly reduce the size of the generated code?
> 
> Thanks,
> Ron
> 
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
> 
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From davy.landman at gmail.com  Thu Feb 25 16:00:19 2010
From: davy.landman at gmail.com (Davy Landman)
Date: Fri, 26 Feb 2010 01:00:19 +0100
Subject: [antlr-interest] Using ANTLR's ~ to do match literals causes "no
	viable alternative" messages in generated Java but not in ANTLRWorks
Message-ID: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com>

Hello,

I'm having some problems with my generated java parser/lexer, but I've
tried to reduce the problem to a small subset.

Let's assume the simple language which has identifiers and numbers.
And the only rules are, a number contains out of only numbers, and a
identifier can not contain `'?', ':', ' '` and can not begin with a
number.

I would create the following ANTLR specification of this language.

    grammar simple;

    prog:	expr* EOF;

    expr
    	:	ID | INT;


    ID  : ~('0'..'9'|SEPERATORS) ~(SEPERATORS)*;

    fragment
    SEPERATORS
    	:	' ' | ':' | '?';

    INT :	'0'..'9'+
        ;

And running this in ANTLRWorks debugging and parsing mode, no errors
are reported to the console.

But if I than generate the Parser and Lexer and try to consume it in a
java program as such:

    import org.antlr.runtime.ANTLRStringStream;
    import org.antlr.runtime.CommonTokenStream;
    import org.antlr.runtime.RecognitionException;


    public class runner {

    	public static void main(String args[])
    	{
    		simpleLexer lex = new simpleLexer(new ANTLRStringStream("a33 44"));
    		CommonTokenStream tokens= new CommonTokenStream(lex);
    		simpleParser parser = new simpleParser(tokens);
    		try {
    			parser.prog();
    		} catch (RecognitionException e) {
    			e.printStackTrace();
    		}
    	}
    }

The parser works, and the prog() continues succesfully. But in the
background the following error message is printed to the console.

    line 1:3 no viable alternative at character ' '

The same exact sequence causes no messages to the ANTLRWorks console,
so I was wondering, am I abusing the ~ ? Or is there a difference
between the ANTLRWorks debugger and default java runtime?

So if anybody can help me how to get rid of these messages? Because in
the original lexer and parser where this question is based, I get a
nice looking AST but only have messages printed to the eclipse
console.

Versions used:
ANTLRWorks 1.3.1
ANTLR-3.2
Linux x64

Kind regards,
Davy Landman

From ron.hunter-duvar at oracle.com  Thu Feb 25 16:35:19 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Thu, 25 Feb 2010 17:35:19 -0700
Subject: [antlr-interest] Generated parser class too large to compile
In-Reply-To: <1dbe1f749b821c4580e4247411360e12@temporal-wave.com>
References: <1dbe1f749b821c4580e4247411360e12@temporal-wave.com>
Message-ID: <4B871747.30507@oracle.com>

Wow, thanks! I was under the mistaken impression that imported grammars 
were essentially included (maybe a past version of Antlr did this?), so 
I didn't think this would help.

Ron


Jim Idle wrote:
> Ron,
>
> All you need do is create a top level grammar file that imports the other parts of your SQL grammar which will then generate in separate classes. From my TSQL grammar:
>
> parser grammar tsql;
>
> options
> {
> 	// Produce a generic AST as output.
> 	//
> 	output		= AST;
>
> 	// Import the lexers token numbering scheme.
> 	//
> 	tokenVocab	= tsqllexer;
> }
>
>  
> // Import the grammar for the million SQL statements
> //
> import tsqlcommon, tsqlselect, tsqlalter, tsqlcreate, tsqlpermissions, tsqlcursors, tsqlmisc, tsqlmisc2, tsqldrop
>
> tokens { X; Y; }
>
> @parser::header{  }
>
> a : couple of base rules ;
>
> couple : ;
>
> // Rest are in the other grammars. This works for the tree walkers too.
>
>
> Jim
>
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Ron Hunter-Duvar
>> Sent: Thursday, February 25, 2010 2:35 PM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Generated parser class too large to compile
>>
>> Hi,
>>
>> I'm running into a problem with the Java parser class generated by
>> Antlr
>> 3.2 being too large to compile. I don't think there's anything wrong
>> with my grammar or with Antlr, it's simply the size and complexity of
>> the grammar. It's already 2,500 lines of code, 208 rules, and Antlr
>> generates 68,000 lines of output. This is just the parser grammar (the
>> lexer grammar is separate and isn't a problem), and I'm not done yet.
>> The problem is that Java is not an ideal language target for code
>> generation, given it's 64KB of bytecode per class limit (and various
>> other 64K limits), due to the JVM using 16 bit pointers
>> (http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.
>> html#88659).
>>
>>
>> I've been able to work around the problem with a poor man's
>> refactoring,
>> a Perl script that breaks out the one generated class into interfaces
>> for the constants (tokens, DFA initializations) and an abstract
>> superclass for the DFA nested classes and methods and stubs for all the
>> other methods. This is working, but as I continue I have to keep
>> refining it to do more refactoring. It's really a kludge, and only
>> works
>> by relying on the specific structure and formatting of the Antlr
>> output.
>>
>> I'm thinking that a more general solution would be to modify the code
>> generation to generate factored code. I've only looked briefly at it so
>> far, but since it's all driven by StringTemplate templates and already
>> accomodates multiple output languages, it shouldn't be too difficult to
>> adapt it. I would probably create a new back-end "language" such as
>> "FactoredJava", based on the Java templates. That would make switching
>> between the standard one and mine a simple grammar option change. Does
>> anyone see a problem with this plan? Any suggestions?
>>
>> The only other alternative I see is to switch to a back-end language
>> that doesn't have this limitation. But that creates quite a bit of
>> rework (replacing semantic predicates and action code, and the
>> subclasses of standard Antlr runtime classes that I've created to
>> customize the behaviour), as well as integration issues with all the
>> other Java code.
>>
>> Is there anything I'm missing here? Any Antlr options that would
>> significantly reduce the size of the generated code?
>>
>> Thanks,
>> Ron
>>
>> --
>> Ron Hunter-Duvar | Software Developer V | 403-272-6580
>> Oracle Service Engineering
>> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>>
>> All opinions expressed here are mine, and do not necessarily represent
>> those of my employer.
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>>     
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From ron.hunter-duvar at oracle.com  Thu Feb 25 16:54:22 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Thu, 25 Feb 2010 17:54:22 -0700
Subject: [antlr-interest] Using ANTLR's ~ to do match literals causes
 "no	viable alternative" messages in generated Java but not in ANTLRWorks
In-Reply-To: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com>
References: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com>
Message-ID: <4B871BBE.9080002@oracle.com>

Hi Davy,

You don't have a rule for consuming whitespace. Add something like this:

WS :
  WS_CHAR+ {$channel=HIDDEN;}
  ;

fragment WS_CHAR :
  (' '|'\r'|'\t'|'\u000C'|'\n')
  ;

Ron


Davy Landman wrote:
> Hello,
>
> I'm having some problems with my generated java parser/lexer, but I've
> tried to reduce the problem to a small subset.
>
> Let's assume the simple language which has identifiers and numbers.
> And the only rules are, a number contains out of only numbers, and a
> identifier can not contain `'?', ':', ' '` and can not begin with a
> number.
>
> I would create the following ANTLR specification of this language.
>
>     grammar simple;
>
>     prog:	expr* EOF;
>
>     expr
>     	:	ID | INT;
>
>
>     ID  : ~('0'..'9'|SEPERATORS) ~(SEPERATORS)*;
>
>     fragment
>     SEPERATORS
>     	:	' ' | ':' | '?';
>
>     INT :	'0'..'9'+
>         ;
>
> And running this in ANTLRWorks debugging and parsing mode, no errors
> are reported to the console.
>
> But if I than generate the Parser and Lexer and try to consume it in a
> java program as such:
>
>     import org.antlr.runtime.ANTLRStringStream;
>     import org.antlr.runtime.CommonTokenStream;
>     import org.antlr.runtime.RecognitionException;
>
>
>     public class runner {
>
>     	public static void main(String args[])
>     	{
>     		simpleLexer lex = new simpleLexer(new ANTLRStringStream("a33 44"));
>     		CommonTokenStream tokens= new CommonTokenStream(lex);
>     		simpleParser parser = new simpleParser(tokens);
>     		try {
>     			parser.prog();
>     		} catch (RecognitionException e) {
>     			e.printStackTrace();
>     		}
>     	}
>     }
>
> The parser works, and the prog() continues succesfully. But in the
> background the following error message is printed to the console.
>
>     line 1:3 no viable alternative at character ' '
>
> The same exact sequence causes no messages to the ANTLRWorks console,
> so I was wondering, am I abusing the ~ ? Or is there a difference
> between the ANTLRWorks debugger and default java runtime?
>
> So if anybody can help me how to get rid of these messages? Because in
> the original lexer and parser where this question is based, I get a
> nice looking AST but only have messages printed to the eclipse
> console.
>
> Versions used:
> ANTLRWorks 1.3.1
> ANTLR-3.2
> Linux x64
>
> Kind regards,
> Davy Landman
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From michael.bedward at gmail.com  Thu Feb 25 19:41:13 2010
From: michael.bedward at gmail.com (Michael Bedward)
Date: Fri, 26 Feb 2010 14:41:13 +1100
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <a54bbe2678423143894f9eddcbba08b1@temporal-wave.com>
References: <4B86DB33.2060604@web.de>
	<a54bbe2678423143894f9eddcbba08b1@temporal-wave.com>
Message-ID: <e24c4c271002251941i2eecc6c5gf90a9ad2f8c32f5b@mail.gmail.com>

Neat !

I've been following this thread with interest. Thanks for starting it Christian.

Michael

On 26 February 2010 07:47, Jim Idle <jimi at temporal-wave.com> wrote:
> tree grammar IScriptTreeParser;
> options {
> ? language = Java;
> ? tokenVocab = IScript;
> ? ASTLabelType = CommonTree;
> ? SuperClass = AbstractIScriptTreeParser;
> }
>
> @header {
> ? ? package com.something.test;
> }
>
>
> program
> ? ?: ? ?g=globalStatement { blah($g);
>
> ? ? ;
>
>
> AbstractIScriptCompiler.java
>
> public class AbstractIScriptCompiler extends TreeParser {
>
> ?///// Implement constructors
>
> ?////; Implement member methods
>
> ?protected void blah(CommonTree t) ...
> }
>
>
>
> Etc!
>
> Jim
>

From kferrio at gmail.com  Thu Feb 25 20:38:23 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Fri, 26 Feb 2010 04:38:23 +0000
Subject: [antlr-interest] Bounding the token stream in the C backend
In-Reply-To: <33cb9626d78f404d95f7f941f0517558@temporal-wave.com>
References: <1419225d1002250730y3e3e4c0asaa12f40a983c5944@mail.gmail.com><33cb9626d78f404d95f7f941f0517558@temporal-wave.com>
Message-ID: <9117271-1267159104-cardhu_decombobulator_blackberry.rim.net-836591997-@bda428.bisx.prod.on.blackberry>

Even though empty alts are not the OPs problem...this seems like something which antlr could preempt with a stern warning at grammar generation time.   Or is there ever a legitimate reason to let it pass?  
Sent from my Verizon Wireless BlackBerry

-----Original Message-----
From: "Jim Idle" <jimi at temporal-wave.com>
Date: Thu, 25 Feb 2010 07:40:30 
Cc: antlr-interest at antlr.org<antlr-interest at antlr.org>
Subject: Re: [antlr-interest] Bounding the token stream in the C backend

The problem is your lexer (almost 100%). Look for a rule that has an empty alt. This rule will match forever and consume no input:

FRED : ;

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Nick Vlassopoulos
> Sent: Thursday, February 25, 2010 7:31 AM
> To: Christopher L Conway
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Bounding the token stream in the C
> backend
> 
> Hi Christopher,
> 
> I am not entirely sure, but you may have run into the same problem as I
> did
> a
> while ago. You may want to have a look at the discussion thread back
> then
> for
> some advices:
> http://www.antlr.org/pipermail/antlr-interest/2009-April/034125.html
> Although I used the simple solution Jim suggested, i.e. parsed the
> headers and just used some custom code to parse the rest of the file,
> some of the advices in that thread might be helpful.
> 
> Hope this helps,
> 
> Nikos
> 
> 
> On Thu, Feb 25, 2010 at 6:09 AM, Christopher L Conway
> <cconway at cs.nyu.edu>wrote:
> 
> > I've got a large input file (~39MB) that I'm attempting to parse with
> > an ANTLR3-generated C parser. The parser is using a huge amount of
> > memory (~3.7GB) and seems to start thrashing without making much
> > progress towards termination. I found a thread from earlier this
> month
> > (http://markmail.org/message/jfngdd2ci6h7qrbo) suggesting the most
> > likely cause of such behavior is a parser bug, but I've stepped
> > through the code and it seems to be lexing just fine. Rather, it
> seems
> > the problem is that fillBuffer() is tokenizing the whole file in one
> > go; then, the parsing rules slow to a crawl because the token buffer
> > is sitting on all the memory.
> >
> > I wonder if there is a way to change fillBuffer()'s behavior, so that
> > it will only lex some bounded number of tokens before allowing
> parsing
> > to proceed?
> >
> > Thanks,
> > Chris
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From davy.landman at gmail.com  Fri Feb 26 00:36:15 2010
From: davy.landman at gmail.com (Davy Landman)
Date: Fri, 26 Feb 2010 09:36:15 +0100
Subject: [antlr-interest] Using ANTLR's ~ to do match literals causes
	"no viable alternative" messages in generated Java but not in
	ANTLRWorks
In-Reply-To: <4B871BBE.9080002@oracle.com>
References: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com> 
	<4B871BBE.9080002@oracle.com>
Message-ID: <20f7a0521002260036i52565eafk3e171f048ec1794b@mail.gmail.com>

Hi Ron,

Thanks, I've been applying the channel=HIDDEN on the WS_CHAR fragment
level, and that messed up everything, but using this extra token works
perfectly.

Cheers,
Davy

On Fri, Feb 26, 2010 at 01:54, Ron Hunter-Duvar
<ron.hunter-duvar at oracle.com> wrote:
> Hi Davy,
>
> You don't have a rule for consuming whitespace. Add something like this:
>
> WS :
> ?WS_CHAR+ {$channel=HIDDEN;}
> ?;
>
> fragment WS_CHAR :
> ?(' '|'\r'|'\t'|'\u000C'|'\n')
> ?;
>
> Ron
>
>
> Davy Landman wrote:
>>
>> Hello,
>>
>> I'm having some problems with my generated java parser/lexer, but I've
>> tried to reduce the problem to a small subset.
>>
>> Let's assume the simple language which has identifiers and numbers.
>> And the only rules are, a number contains out of only numbers, and a
>> identifier can not contain `'?', ':', ' '` and can not begin with a
>> number.
>>
>> I would create the following ANTLR specification of this language.
>>
>> ? ?grammar simple;
>>
>> ? ?prog: ? ? ? expr* EOF;
>>
>> ? ?expr
>> ? ? ? ?: ? ? ? ID | INT;
>>
>>
>> ? ?ID ?: ~('0'..'9'|SEPERATORS) ~(SEPERATORS)*;
>>
>> ? ?fragment
>> ? ?SEPERATORS
>> ? ? ? ?: ? ? ? ' ' | ':' | '?';
>>
>> ? ?INT : ? ? ? '0'..'9'+
>> ? ? ? ?;
>>
>> And running this in ANTLRWorks debugging and parsing mode, no errors
>> are reported to the console.
>>
>> But if I than generate the Parser and Lexer and try to consume it in a
>> java program as such:
>>
>> ? ?import org.antlr.runtime.ANTLRStringStream;
>> ? ?import org.antlr.runtime.CommonTokenStream;
>> ? ?import org.antlr.runtime.RecognitionException;
>>
>>
>> ? ?public class runner {
>>
>> ? ? ? ?public static void main(String args[])
>> ? ? ? ?{
>> ? ? ? ? ? ? ? ?simpleLexer lex = new simpleLexer(new
>> ANTLRStringStream("a33 44"));
>> ? ? ? ? ? ? ? ?CommonTokenStream tokens= new CommonTokenStream(lex);
>> ? ? ? ? ? ? ? ?simpleParser parser = new simpleParser(tokens);
>> ? ? ? ? ? ? ? ?try {
>> ? ? ? ? ? ? ? ? ? ? ? ?parser.prog();
>> ? ? ? ? ? ? ? ?} catch (RecognitionException e) {
>> ? ? ? ? ? ? ? ? ? ? ? ?e.printStackTrace();
>> ? ? ? ? ? ? ? ?}
>> ? ? ? ?}
>> ? ?}
>>
>> The parser works, and the prog() continues succesfully. But in the
>> background the following error message is printed to the console.
>>
>> ? ?line 1:3 no viable alternative at character ' '
>>
>> The same exact sequence causes no messages to the ANTLRWorks console,
>> so I was wondering, am I abusing the ~ ? Or is there a difference
>> between the ANTLRWorks debugger and default java runtime?
>>
>> So if anybody can help me how to get rid of these messages? Because in
>> the original lexer and parser where this question is based, I get a
>> nice looking AST but only have messages printed to the eclipse
>> console.
>>
>> Versions used:
>> ANTLRWorks 1.3.1
>> ANTLR-3.2
>> Linux x64
>>
>> Kind regards,
>> Davy Landman
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
>
>

From ssmile03 at gmail.com  Fri Feb 26 01:51:28 2010
From: ssmile03 at gmail.com (Smiley 4321)
Date: Fri, 26 Feb 2010 12:51:28 +0300
Subject: [antlr-interest] help: using antlr
In-Reply-To: <5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>
	<d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>
	<5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
Message-ID: <a74947291002260151v143f79aauccbc685392484168@mail.gmail.com>

Peter,

I did check ANTLR documentation & it's FAQ, also performed googlian for
ANTLR MPI support.

The code as written, looking if it can be understood by ANTLR by performing
verification for the given code.

The task is, to understand and implement a techniques where few lines of MPI
C level parallel programming code can be understood by ANTLR.

I am looking to know the techniques and support for mpi programming extended
by antlr.

Hope it clear now to understand.

---regards.

On Thu, Feb 25, 2010 at 9:17 PM, Peter Boughton <boughtonp at gmail.com> wrote:

> I think the top-posting bit is just part of his sig, and - whilst it
> is very annoying - it is a far lesser crime than unnecessarily quoting
> a whole message (including signature & footer) then dumping a bare
> link in the middle of it, which clearly causes confusion.
>
> Anyway, with regards to the "Asking Smart Questions" link (
> http://catb.org/~esr/faqs/smart-questions.html<http://catb.org/%7Eesr/faqs/smart-questions.html>), I think the key part
> may be that Smiley has posted some code and said he has an assignment,
> but may not have explained what he's tried so far, and which bit he's
> stuck on.
> (that's a guess - I don't fully understand the question so may be wrong).
>
> Smiley - I don't understand the problem myself, but it might help
> others who do if you state:
> Is this is a program you have written, or someone else has supplied?
> Have you searched Google for "ANTLR MPI" or similar?
> Have you read any of the ANTLR FAQs/documentation?
> etc
>
> Hope this helps clarify things. :)
>

From nvlassopoulos at gmail.com  Fri Feb 26 02:18:38 2010
From: nvlassopoulos at gmail.com (Nick Vlassopoulos)
Date: Fri, 26 Feb 2010 11:18:38 +0100
Subject: [antlr-interest] help: using antlr
In-Reply-To: <a74947291002260151v143f79aauccbc685392484168@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>
	<d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>
	<5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
	<a74947291002260151v143f79aauccbc685392484168@mail.gmail.com>
Message-ID: <1419225d1002260218s2dd7f4efka26558fce92bd1b1@mail.gmail.com>

Hello Smiley,

On Fri, Feb 26, 2010 at 10:51 AM, Smiley 4321 <ssmile03 at gmail.com> wrote:

> Peter,
>
> I did check ANTLR documentation & it's FAQ, also performed googlian for
> ANTLR MPI support.
>
> The code as written, looking if it can be understood by ANTLR by performing
> verification for the given code.
>
> The task is, to understand and implement a techniques where few lines of
> MPI
> C level parallel programming code can be understood by ANTLR.
>
>
So, your task would be to parse c code and have a sort of (one or more)
predefined symbol table(s)
with MPI headers / functions, so that the parser figures out if a program
uses MPI or not (which is
slightly tricky if someone names a set of functions MPI_* on purpose)?

Maybe you can explain a little bit more what the "understood" means? I.e. is
it just to answer a "yes" or "no"
if the program contains MPI headers/library calls?


> I am looking to know the techniques and support for mpi programming
> extended
> by antlr.
>
> Hope it clear now to understand.
>
> ---regards.
>


Nikos

From christian.pontesegger at web.de  Fri Feb 26 03:07:11 2010
From: christian.pontesegger at web.de (Christian Pontesegger)
Date: Fri, 26 Feb 2010 12:07:11 +0100
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <a54bbe2678423143894f9eddcbba08b1@temporal-wave.com>
References: <a54bbe2678423143894f9eddcbba08b1@temporal-wave.com>
Message-ID: <4B87AB5F.4000004@web.de>

On 25.02.2010 21:47,  Jim Idle wrote:
> tree grammar IScriptTreeParser;
> options {
>    language = Java;
>    tokenVocab = IScript;
>    ASTLabelType = CommonTree;
>    SuperClass = AbstractIScriptTreeParser;
> } 
>   

Still not what I'd like to have. I think I'll give it one more try:

When finished I want to have following inheritance

TreeParser <-- IScriptTreeParser <-- ConcreteTreeParser
TreeParser <-- IScriptTreeParser <-- AnotherConcreteTreeParser

TreeParser
    *   is the ANTLR base class

IScriptTreeParser is:
    *    automatically generated from my treegrammar file
    *    abstract public class IScriptCompiler extends TreeParser {... }
        ----^^^
    *    has some abstract methods defined in @members

ConcreteTreeParser is:
    *    some class I am doing on my own
    *    implements abstract stuff from IScriptTreeParser

AnotherConcreteTreeParser is:
    *    some class I am doing on my own
    *    different implementation of abstract methods


so far I did not get a recommendation how to do that.

any ideas?
Christian
   


From bassglider at gmail.com  Fri Feb 26 03:09:53 2010
From: bassglider at gmail.com (Remy)
Date: Fri, 26 Feb 2010 01:09:53 -1000
Subject: [antlr-interest] Python How To Convert from Java
Message-ID: <ace643fd1002260309y200bc385i81ab675709a4eb24@mail.gmail.com>

I'm having trouble understanding how I would convert the following
java code to do the same thing in python so I can have somewhere to
start.  As you can see the bottom statement of the java file would
print out the TABLE name.  I am trying to do the same thing in python
with my AST.  I think I'm a line or two away from getting this.

==============
>>>> JAVA <<<<<
==============

import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;

public class TestSQL {
    public static void main(String[] args) throws Exception {
        CharStream input = null;
        if ( args.length>0 ) {
            input = new ANTLRFileStream(args[0]);
        }
        else {
            input = new ANTLRInputStream(System.in);
        }

        // BUILD AST
        sqltestLexer lex = new sqltestLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lex);
        sqltestParser parser = new sqltestParser(tokens);
        sqltestParser.createtablestmt_return r = parser.createtablestmt();


        System.out.println("tablename ="+((Tree)r.tree).getChild(2).toString());
        //System.out.println("tree="+((Tree)r.tree).toStringTree());
   }
}

===================
>>>>> PYTHON <<<<<<
===================

import antlr3
import antlr3.tree
from sqltestLexer import sqltestLexer
from sqltestParser import sqltestParser
#import sqltest ?                                    won't import
import sys
#from sqltest import sqltest
#sys.argv[1]
char_stream = antlr3.ANTLRStringStream("SELECT * FROM BOOKS;")
lexer = sqltestLexer(char_stream)
tokens = antlr3.CommonTokenStream(lexer)
parser = sqltestParser(tokens)

r = parser.createtablestmt_return()

# this is the root of the AST
root = r.tree

nodes = antlr3.tree.CommonTreeNodeStream(root)
nodes.setTokenStream(tokens)

#walker = sqltest(nodes)
#  STUCK!



=================
>>>>>> G <<<<<<<<<
=================

grammar sqltest;

options {output=AST;
	language=Python;}

// Lexer Rules

tokens {
COMMA 	=	',';
LPAR	=	'(';
RPAR  	=	')';
TERMINATOR    = ';';
}


@lexer::members {
def reportError(self, e):
   raise e
}

@members {
def mismatch(self, input, ttype, follow):
    raise MismatchedTokenException(ttype, input)

def recoverFromMismatchedSet(self, input, e, follow):
    raise e
}

@rulecatch {
except RecognitionException, e:
    raise
}


SQLCHAR :	'char' | 'CHAR';

SQLINT  :	'int' | 'INT' |'Int' | 'integer' | 'INTEGER' | 'Integer';

CREATE 	:	'create' | 'CREATE';

TABLE 	:	'table' | 'TABLE';


ID  :	(('a'..'z'|'A'..'Z' | '_') ((DIGIT)*))+;


INT :	'0'..'9'+
    ;

FLOAT
    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    |   '.' ('0'..'9')+ EXPONENT?
    |   ('0'..'9')+ EXPONENT
    ;

COMMENT
    :   '--' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    |   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;

STRING
    :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
    ;

CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
    ;

fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
ESC_SEQ
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UNICODE_ESC
    |   OCTAL_ESC
    ;

fragment
OCTAL_ESC
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UNICODE_ESC
    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    ;

fragment DIGIT :   '0'..'9' ;

// Parser rules
colconstraint
	:	'not' 'null' | 'primary' 'key';

coltype :	SQLINT | SQLCHAR LPAR INT RPAR;

colname	:	ID;

colspec :	colname coltype (colconstraint)*;

colspeclist
	:	colspec (COMMA colspec)*;

createtablestmt
	:	CREATE TABLE ID LPAR colspeclist RPAR;

From wabsie at gmail.com  Fri Feb 26 05:35:37 2010
From: wabsie at gmail.com (Mark Ruvald)
Date: Fri, 26 Feb 2010 14:35:37 +0100
Subject: [antlr-interest] Octal error in C.g grammar
Message-ID: <220288281002260535h65051204nba1b7894f9abb3c1@mail.gmail.com>

Hi,

I think I've found a little error in the C grammar available at
http://antlr.org/grammar/1153358328744/C.g .

The lexer rule in question is:
OCTAL_LITERAL : '0' ('0'..'7')+ IntegerTypeSuffix? ;

- Only 1 leading zero is allowed, but gcc allows 1 or more:
OCTAL_LITERAL : '0'+ ('0'..'7')+ IntegerTypeSuffix? ;

It's a minor thing, but still...

regards
-- Mark Ruvald.

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing on usenet and in e-mail?

From aph at redhat.com  Fri Feb 26 06:24:44 2010
From: aph at redhat.com (Andrew Haley)
Date: Fri, 26 Feb 2010 14:24:44 +0000
Subject: [antlr-interest] Octal error in C.g grammar
In-Reply-To: <220288281002260535h65051204nba1b7894f9abb3c1@mail.gmail.com>
References: <220288281002260535h65051204nba1b7894f9abb3c1@mail.gmail.com>
Message-ID: <4B87D9AC.4080908@redhat.com>

On 02/26/2010 01:35 PM, Mark Ruvald wrote:

> I think I've found a little error in the C grammar available at
> http://antlr.org/grammar/1153358328744/C.g .
> 
> The lexer rule in question is:
> OCTAL_LITERAL : '0' ('0'..'7')+ IntegerTypeSuffix? ;
> 
> - Only 1 leading zero is allowed, but gcc allows 1 or more:
> OCTAL_LITERAL : '0'+ ('0'..'7')+ IntegerTypeSuffix? ;
> 
> It's a minor thing, but still...

Err, how would you tell the difference?  :-)

Andrew.

From christian.pontesegger at web.de  Fri Feb 26 06:31:09 2010
From: christian.pontesegger at web.de (Christian Pontesegger)
Date: Fri, 26 Feb 2010 15:31:09 +0100
Subject: [antlr-interest] TreeWalker algorithm for a for loop (C style)
Message-ID: <4B87DB2D.7050009@web.de>

The next step for my grammar is to implement a tree walker for loops. I
guess the hardest one is the for loop. The syntax should be almost the
same as for C:

for (int $i = 0; $i < 4; $i++) {
    print($i)
}

my parser creates a nice tree like this:

(for (VARDECL int i 0) (CONDITION (< i 4)) (ITERATE (POSTFIX ++ i))
(BLOCK (FUNCALL print i)))



Treegrammar looks like this:

forStatement
    :    ^('for'
            variableDefinition?
            condition?
            iteration?
            block
        )
    ;

condition returns [boolean result]
    :    ^(CONDITION expression)        { $result =
$expression.value.getBoolean(); }
    ;
   
iteration
    :    ^(ITERATE expression)
    ;



I figured out how to move around within the tree with push() & pop() on
the CommonTreeNodeStream.
Initially I wanted to do it that way:


    :    ^(
            'for'
            variableDefinition?        {    markCondition = input.mark(); }
            cond=condition?            {    markIteration = input.mark(); }
            iter=iteration?            {    markBody = input.mark(); }
            .
        )
                {  loop logic: do some evaluation and re-run the body if
necessary }

Problem is, that iteration is executed before the first time the loop
body is executed. I need to postpone this until the body has been
executed the first time.
Secondly iter seems not to be set to something. How can I find out if a
condition is there?

I find tree walking rather complicated, especially if you need to jump
around between tree nodes. Is there some tutorial on this. The ANTLR
reference seems to have no topic on this.

Christian

From ron.hunter-duvar at oracle.com  Fri Feb 26 07:16:17 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Fri, 26 Feb 2010 08:16:17 -0700
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <4B87AB5F.4000004@web.de>
References: <a54bbe2678423143894f9eddcbba08b1@temporal-wave.com>
	<4B87AB5F.4000004@web.de>
Message-ID: <4B87E5C1.4020808@oracle.com>

If I understand what you're asking for, the simplest way is to give up 
on trying to declare the foo method abstract in IScriptTreeParser, and 
declare it as:

protected void foo() {}


Then you can override it in the subclasses you write. I know abstract is 
good because it forces you to redefine the method, but is it worth the 
extra pain?

If you really want to have the abstract, I think you'd either have to do 
it with some post-generation scripting, or modify Antlr to make it do 
this as an option (but that's probably overkill). On Linux, the 
following command should do the trick for you:

sed -ie 's/(public) (class IScriptTreeParser)/\1 abstract \2/' 
IScriptTreeParser.java

Ron


Christian Pontesegger wrote:
> On 25.02.2010 21:47,  Jim Idle wrote:
>   
>> tree grammar IScriptTreeParser;
>> options {
>>    language = Java;
>>    tokenVocab = IScript;
>>    ASTLabelType = CommonTree;
>>    SuperClass = AbstractIScriptTreeParser;
>> } 
>>   
>>     
>
> Still not what I'd like to have. I think I'll give it one more try:
>
> When finished I want to have following inheritance
>
> TreeParser <-- IScriptTreeParser <-- ConcreteTreeParser
> TreeParser <-- IScriptTreeParser <-- AnotherConcreteTreeParser
>
> TreeParser
>     *   is the ANTLR base class
>
> IScriptTreeParser is:
>     *    automatically generated from my treegrammar file
>     *    abstract public class IScriptCompiler extends TreeParser {... }
>         ----^^^
>     *    has some abstract methods defined in @members
>
> ConcreteTreeParser is:
>     *    some class I am doing on my own
>     *    implements abstract stuff from IScriptTreeParser
>
> AnotherConcreteTreeParser is:
>     *    some class I am doing on my own
>     *    different implementation of abstract methods
>
>
> so far I did not get a recommendation how to do that.
>
> any ideas?
> Christian
>    
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From stefika at gmail.com  Fri Feb 26 07:41:23 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Fri, 26 Feb 2010 09:41:23 -0600
Subject: [antlr-interest]  Pictures with ANTLR Works
Message-ID: <1332b72e1002260741x2c10da4bjb4cf25ef7de5bc41@mail.gmail.com>

Hi all,

AntlrWorks currently generates graphics for particular rules. For obvious
reasons, any sub-rules are shown with just the name of that rule, but not
the full expansion. I've been wanting to generate an eps file (which I know
is easy), of the _entire_ grammar file, with all rules fully expanded that I
can send to a large plotter.

Is there any easy way to generate this in antlrworks?

Stefik

From wabsie at gmail.com  Fri Feb 26 07:54:42 2010
From: wabsie at gmail.com (Mark Ruvald)
Date: Fri, 26 Feb 2010 16:54:42 +0100
Subject: [antlr-interest] Octal error in C.g grammar
In-Reply-To: <4B87D9AC.4080908@redhat.com>
References: <220288281002260535h65051204nba1b7894f9abb3c1@mail.gmail.com> 
	<4B87D9AC.4080908@redhat.com>
Message-ID: <220288281002260754y242b8621ra0c6de978c1942db@mail.gmail.com>

2010/2/26 Andrew Haley <aph at redhat.com>

> On 02/26/2010 01:35 PM, Mark Ruvald wrote:
>
> > I think I've found a little error in the C grammar available at
> > http://antlr.org/grammar/1153358328744/C.g .
> >
> > The lexer rule in question is:
> > OCTAL_LITERAL : '0' ('0'..'7')+ IntegerTypeSuffix? ;
> >
> > - Only 1 leading zero is allowed, but gcc allows 1 or more:
> > OCTAL_LITERAL : '0'+ ('0'..'7')+ IntegerTypeSuffix? ;
> >
> > It's a minor thing, but still...
>
> Err, how would you tell the difference?  :-)
>

My bad! ;-)
Seems like I managed to overlook the zero in ('0'..'7')+



>
> Andrew.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
-- Mark Ruvald.

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing on usenet and in e-mail?

From jimi at temporal-wave.com  Fri Feb 26 08:17:07 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 26 Feb 2010 08:17:07 -0800
Subject: [antlr-interest] Abstract tree parser
In-Reply-To: <4B87AB5F.4000004@web.de>
Message-ID: <b1d192db1e88ac489f5604d047d1db80@temporal-wave.com>

I missed out that the implementing class should be abstract. Then you get what you ask for below. You don't want the .g file to generate an abstract class, you implement your methods in the abstract class, derive that from TreeParser, then derive your generated class from the abstract class.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian Pontesegger
> Sent: Friday, February 26, 2010 3:07 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Abstract tree parser
> 
> On 25.02.2010 21:47,  Jim Idle wrote:
> > tree grammar IScriptTreeParser;
> > options {
> >    language = Java;
> >    tokenVocab = IScript;
> >    ASTLabelType = CommonTree;
> >    SuperClass = AbstractIScriptTreeParser;
> > }
> >
> 
> Still not what I'd like to have. I think I'll give it one more try:
> 
> When finished I want to have following inheritance
> 
> TreeParser <-- IScriptTreeParser <-- ConcreteTreeParser
> TreeParser <-- IScriptTreeParser <-- AnotherConcreteTreeParser
> 
> TreeParser
>     *   is the ANTLR base class
> 
> IScriptTreeParser is:
>     *    automatically generated from my treegrammar file
>     *    abstract public class IScriptCompiler extends TreeParser {...
> }
>         ----^^^
>     *    has some abstract methods defined in @members
> 
> ConcreteTreeParser is:
>     *    some class I am doing on my own
>     *    implements abstract stuff from IScriptTreeParser
> 
> AnotherConcreteTreeParser is:
>     *    some class I am doing on my own
>     *    different implementation of abstract methods
> 
> 
> so far I did not get a recommendation how to do that.
> 
> any ideas?
> Christian
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From davy.landman at gmail.com  Fri Feb 26 10:41:53 2010
From: davy.landman at gmail.com (Davy Landman)
Date: Fri, 26 Feb 2010 19:41:53 +0100
Subject: [antlr-interest] Using ANTLR's ~ to do match literals causes
	"no viable alternative" messages in generated Java but not in
	ANTLRWorks
In-Reply-To: <20f7a0521002260036i52565eafk3e171f048ec1794b@mail.gmail.com>
References: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com> 
	<4B871BBE.9080002@oracle.com>
	<20f7a0521002260036i52565eafk3e171f048ec1794b@mail.gmail.com>
Message-ID: <20f7a0521002261041p39ff9cabi569ad8ad979b242b@mail.gmail.com>

Hi ANTRL mailing list,

So Ron's solution worked very nice. And I should have thought of it
myself, but in my opinion the fact that these messages do not show in
the ANTLRWorks debugger+console is confusing. Is there a reason behind
it? Or is it perhaps a defect?

Davy

On Fri, Feb 26, 2010 at 09:36, Davy Landman <davy.landman at gmail.com> wrote:
> Hi Ron,
>
> Thanks, I've been applying the channel=HIDDEN on the WS_CHAR fragment
> level, and that messed up everything, but using this extra token works
> perfectly.
>
> Cheers,
> Davy
>
> On Fri, Feb 26, 2010 at 01:54, Ron Hunter-Duvar
> <ron.hunter-duvar at oracle.com> wrote:
>> Hi Davy,
>>
>> You don't have a rule for consuming whitespace. Add something like this:
>>
>> WS :
>> ?WS_CHAR+ {$channel=HIDDEN;}
>> ?;
>>
>> fragment WS_CHAR :
>> ?(' '|'\r'|'\t'|'\u000C'|'\n')
>> ?;
>>
>> Ron
>>
>>
>> Davy Landman wrote:
>>>
>>> Hello,
>>>
>>> I'm having some problems with my generated java parser/lexer, but I've
>>> tried to reduce the problem to a small subset.
>>>
>>> Let's assume the simple language which has identifiers and numbers.
>>> And the only rules are, a number contains out of only numbers, and a
>>> identifier can not contain `'?', ':', ' '` and can not begin with a
>>> number.
>>>
>>> I would create the following ANTLR specification of this language.
>>>
>>> ? ?grammar simple;
>>>
>>> ? ?prog: ? ? ? expr* EOF;
>>>
>>> ? ?expr
>>> ? ? ? ?: ? ? ? ID | INT;
>>>
>>>
>>> ? ?ID ?: ~('0'..'9'|SEPERATORS) ~(SEPERATORS)*;
>>>
>>> ? ?fragment
>>> ? ?SEPERATORS
>>> ? ? ? ?: ? ? ? ' ' | ':' | '?';
>>>
>>> ? ?INT : ? ? ? '0'..'9'+
>>> ? ? ? ?;
>>>
>>> And running this in ANTLRWorks debugging and parsing mode, no errors
>>> are reported to the console.
>>>
>>> But if I than generate the Parser and Lexer and try to consume it in a
>>> java program as such:
>>>
>>> ? ?import org.antlr.runtime.ANTLRStringStream;
>>> ? ?import org.antlr.runtime.CommonTokenStream;
>>> ? ?import org.antlr.runtime.RecognitionException;
>>>
>>>
>>> ? ?public class runner {
>>>
>>> ? ? ? ?public static void main(String args[])
>>> ? ? ? ?{
>>> ? ? ? ? ? ? ? ?simpleLexer lex = new simpleLexer(new
>>> ANTLRStringStream("a33 44"));
>>> ? ? ? ? ? ? ? ?CommonTokenStream tokens= new CommonTokenStream(lex);
>>> ? ? ? ? ? ? ? ?simpleParser parser = new simpleParser(tokens);
>>> ? ? ? ? ? ? ? ?try {
>>> ? ? ? ? ? ? ? ? ? ? ? ?parser.prog();
>>> ? ? ? ? ? ? ? ?} catch (RecognitionException e) {
>>> ? ? ? ? ? ? ? ? ? ? ? ?e.printStackTrace();
>>> ? ? ? ? ? ? ? ?}
>>> ? ? ? ?}
>>> ? ?}
>>>
>>> The parser works, and the prog() continues succesfully. But in the
>>> background the following error message is printed to the console.
>>>
>>> ? ?line 1:3 no viable alternative at character ' '
>>>
>>> The same exact sequence causes no messages to the ANTLRWorks console,
>>> so I was wondering, am I abusing the ~ ? Or is there a difference
>>> between the ANTLRWorks debugger and default java runtime?
>>>
>>> So if anybody can help me how to get rid of these messages? Because in
>>> the original lexer and parser where this question is based, I get a
>>> nice looking AST but only have messages printed to the eclipse
>>> console.
>>>
>>> Versions used:
>>> ANTLRWorks 1.3.1
>>> ANTLR-3.2
>>> Linux x64
>>>
>>> Kind regards,
>>> Davy Landman
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>>
>>
>> --
>> Ron Hunter-Duvar | Software Developer V | 403-272-6580
>> Oracle Service Engineering
>> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>>
>> All opinions expressed here are mine, and do not necessarily represent
>> those of my employer.
>>
>>
>

From ron.hunter-duvar at oracle.com  Fri Feb 26 10:53:03 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Fri, 26 Feb 2010 11:53:03 -0700
Subject: [antlr-interest] Using ANTLR's ~ to do match literals causes
 "no viable alternative" messages in generated Java but not in ANTLRWorks
In-Reply-To: <20f7a0521002261041p39ff9cabi569ad8ad979b242b@mail.gmail.com>
References: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com>
	<4B871BBE.9080002@oracle.com>
	<20f7a0521002260036i52565eafk3e171f048ec1794b@mail.gmail.com>
	<20f7a0521002261041p39ff9cabi569ad8ad979b242b@mail.gmail.com>
Message-ID: <4B88188F.4010205@oracle.com>

I would have expected that setting $channel=HIDDEN in a fragment rule 
would have given an error (either a compile or run time), since 
fragments don't generate tokens, so there should be no token to set the 
channel on. Perhaps not strictly an Antlr bug, but it would be good if 
there were an error warning message for this during generation.

Ron


Davy Landman wrote:
> Hi ANTRL mailing list,
>
> So Ron's solution worked very nice. And I should have thought of it
> myself, but in my opinion the fact that these messages do not show in
> the ANTLRWorks debugger+console is confusing. Is there a reason behind
> it? Or is it perhaps a defect?
>
> Davy
>
> On Fri, Feb 26, 2010 at 09:36, Davy Landman <davy.landman at gmail.com> wrote:
>   
>> Hi Ron,
>>
>> Thanks, I've been applying the channel=HIDDEN on the WS_CHAR fragment
>> level, and that messed up everything, but using this extra token works
>> perfectly.
>>
>> Cheers,
>> Davy
>>
>> On Fri, Feb 26, 2010 at 01:54, Ron Hunter-Duvar
>> <ron.hunter-duvar at oracle.com> wrote:
>>     
>>> Hi Davy,
>>>
>>> You don't have a rule for consuming whitespace. Add something like this:
>>>
>>> WS :
>>>  WS_CHAR+ {$channel=HIDDEN;}
>>>  ;
>>>
>>> fragment WS_CHAR :
>>>  (' '|'\r'|'\t'|'\u000C'|'\n')
>>>  ;
>>>
>>> Ron
>>>
>>>
>>> Davy Landman wrote:
>>>       
>>>> Hello,
>>>>
>>>> I'm having some problems with my generated java parser/lexer, but I've
>>>> tried to reduce the problem to a small subset.
>>>>
>>>> Let's assume the simple language which has identifiers and numbers.
>>>> And the only rules are, a number contains out of only numbers, and a
>>>> identifier can not contain `'?', ':', ' '` and can not begin with a
>>>> number.
>>>>
>>>> I would create the following ANTLR specification of this language.
>>>>
>>>>    grammar simple;
>>>>
>>>>    prog:       expr* EOF;
>>>>
>>>>    expr
>>>>        :       ID | INT;
>>>>
>>>>
>>>>    ID  : ~('0'..'9'|SEPERATORS) ~(SEPERATORS)*;
>>>>
>>>>    fragment
>>>>    SEPERATORS
>>>>        :       ' ' | ':' | '?';
>>>>
>>>>    INT :       '0'..'9'+
>>>>        ;
>>>>
>>>> And running this in ANTLRWorks debugging and parsing mode, no errors
>>>> are reported to the console.
>>>>
>>>> But if I than generate the Parser and Lexer and try to consume it in a
>>>> java program as such:
>>>>
>>>>    import org.antlr.runtime.ANTLRStringStream;
>>>>    import org.antlr.runtime.CommonTokenStream;
>>>>    import org.antlr.runtime.RecognitionException;
>>>>
>>>>
>>>>    public class runner {
>>>>
>>>>        public static void main(String args[])
>>>>        {
>>>>                simpleLexer lex = new simpleLexer(new
>>>> ANTLRStringStream("a33 44"));
>>>>                CommonTokenStream tokens= new CommonTokenStream(lex);
>>>>                simpleParser parser = new simpleParser(tokens);
>>>>                try {
>>>>                        parser.prog();
>>>>                } catch (RecognitionException e) {
>>>>                        e.printStackTrace();
>>>>                }
>>>>        }
>>>>    }
>>>>
>>>> The parser works, and the prog() continues succesfully. But in the
>>>> background the following error message is printed to the console.
>>>>
>>>>    line 1:3 no viable alternative at character ' '
>>>>
>>>> The same exact sequence causes no messages to the ANTLRWorks console,
>>>> so I was wondering, am I abusing the ~ ? Or is there a difference
>>>> between the ANTLRWorks debugger and default java runtime?
>>>>
>>>> So if anybody can help me how to get rid of these messages? Because in
>>>> the original lexer and parser where this question is based, I get a
>>>> nice looking AST but only have messages printed to the eclipse
>>>> console.
>>>>
>>>> Versions used:
>>>> ANTLRWorks 1.3.1
>>>> ANTLR-3.2
>>>> Linux x64
>>>>
>>>> Kind regards,
>>>> Davy Landman
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>>
>>>>         
>>> --
>>> Ron Hunter-Duvar | Software Developer V | 403-272-6580
>>> Oracle Service Engineering
>>> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>>>
>>> All opinions expressed here are mine, and do not necessarily represent
>>> those of my employer.
>>>
>>>
>>>       
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From kenneth.domino at domemtech.com  Fri Feb 26 11:18:00 2010
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Fri, 26 Feb 2010 14:18:00 -0500
Subject: [antlr-interest] Literals and subrules
In-Reply-To: <AC343DFC0B0A4B5392E67E2CED483C68@pc2008>
References: <AC343DFC0B0A4B5392E67E2CED483C68@pc2008>
Message-ID: <5470EC44E496434BB23344140169F5A0@pc2008>

OK, no response.  So, if anyone is interested, this is a bug my opinion.  A
tool that gives no error message for input then produce a parser
that does not compile is a bug.  If it isn't a valid grammar, which I 
figured
out it isn't, the tool should at least produce an error message.

grammar xxx;

stuff:
        'a' .. 'z' | 'A' .. 'Z'
        ;

The answer was buried deep in the book "The Definitive ANTLR Reference",
ISBN-10: 0-9787392-5-6, Version: 2010-2-4,
page 95 (section Element Sets).  It is only valid for lexers, but was used 
in
a parser context.  So, it's illegal input, but a bug with the tool as well.

As an aside, I wish the book would be more detailed, a specification of
the Antlr language, as detailed as I would see for a major programming 
language,
e.g., C# at
 http://download.microsoft.com/download/3/8/8/388e7205-bc10-4226-b2a8-75351c669b09/CSharp%20Language%20Specification.doc,or for Java at http://java.sun.com/docs/books/jls/download/langspec-3.0.pdf.In both these examples, each terminal and nonterminalin the language is described in gory detail, and a BNF provided in theappendix.There isn't any BNF in the Antlr book, and the descriptions are not detailedenough.  As a result, I have to learn Antlr by trying many small examplesand observing how it works.

From davy.landman at gmail.com  Fri Feb 26 11:34:14 2010
From: davy.landman at gmail.com (Davy Landman)
Date: Fri, 26 Feb 2010 20:34:14 +0100
Subject: [antlr-interest] Using ANTLR's ~ to do match literals causes
	"no viable alternative" messages in generated Java but not in
	ANTLRWorks
In-Reply-To: <4B88188F.4010205@oracle.com>
References: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com> 
	<4B871BBE.9080002@oracle.com>
	<20f7a0521002260036i52565eafk3e171f048ec1794b@mail.gmail.com> 
	<20f7a0521002261041p39ff9cabi569ad8ad979b242b@mail.gmail.com> 
	<4B88188F.4010205@oracle.com>
Message-ID: <20f7a0521002261134o683f43a7lc52759b900eacfd@mail.gmail.com>

Applying $channel=hidden on a fragment does indeed cause a compiler
error, but that was not the error I was refering to.

I was refering that the ANTLR code example I provided without the WS
hidden channel in ANTLRWorks does works correctly and outputs no
error's at all to the console.

When the same grammar file is used in java (via Generate Code)
directly using the same code as the debugger from ANTLRWorks used
(__Test__.java) the java version outputs error to the console.

So my idea is that the debugger in ANTLRWorks connects to the process
via a network stream, and the "line 1:3 no viable alternative at
character ' '   " is not reported back over the network stream, but
reported in the java console in which the __Test__ application runs.
If this is the case, the debugger can give a false sense of working
code. Everything works nicely, but in your actual application you get
(uncatchable?) error messages.

Davy

On Fri, Feb 26, 2010 at 19:53, Ron Hunter-Duvar
<ron.hunter-duvar at oracle.com> wrote:
> I would have expected that setting $channel=HIDDEN in a fragment rule would
> have given an error (either a compile or run time), since fragments don't
> generate tokens, so there should be no token to set the channel on. Perhaps
> not strictly an Antlr bug, but it would be good if there were an error
> warning message for this during generation.
>
> Ron
>
>
> Davy Landman wrote:
>
> Hi ANTRL mailing list,
>
> So Ron's solution worked very nice. And I should have thought of it
> myself, but in my opinion the fact that these messages do not show in
> the ANTLRWorks debugger+console is confusing. Is there a reason behind
> it? Or is it perhaps a defect?
>
> Davy
>
> On Fri, Feb 26, 2010 at 09:36, Davy Landman <davy.landman at gmail.com> wrote:
>
>
> Hi Ron,
>
> Thanks, I've been applying the channel=HIDDEN on the WS_CHAR fragment
> level, and that messed up everything, but using this extra token works
> perfectly.
>
> Cheers,
> Davy
>
> On Fri, Feb 26, 2010 at 01:54, Ron Hunter-Duvar
> <ron.hunter-duvar at oracle.com> wrote:
>
>
> Hi Davy,
>
> You don't have a rule for consuming whitespace. Add something like this:
>
> WS :
> ?WS_CHAR+ {$channel=HIDDEN;}
> ?;
>
> fragment WS_CHAR :
> ?(' '|'\r'|'\t'|'\u000C'|'\n')
> ?;
>
> Ron
>
>
> Davy Landman wrote:
>
>
> Hello,
>
> I'm having some problems with my generated java parser/lexer, but I've
> tried to reduce the problem to a small subset.
>
> Let's assume the simple language which has identifiers and numbers.
> And the only rules are, a number contains out of only numbers, and a
> identifier can not contain `'?', ':', ' '` and can not begin with a
> number.
>
> I would create the following ANTLR specification of this language.
>
> ? ?grammar simple;
>
> ? ?prog: ? ? ? expr* EOF;
>
> ? ?expr
> ? ? ? ?: ? ? ? ID | INT;
>
>
> ? ?ID ?: ~('0'..'9'|SEPERATORS) ~(SEPERATORS)*;
>
> ? ?fragment
> ? ?SEPERATORS
> ? ? ? ?: ? ? ? ' ' | ':' | '?';
>
> ? ?INT : ? ? ? '0'..'9'+
> ? ? ? ?;
>
> And running this in ANTLRWorks debugging and parsing mode, no errors
> are reported to the console.
>
> But if I than generate the Parser and Lexer and try to consume it in a
> java program as such:
>
> ? ?import org.antlr.runtime.ANTLRStringStream;
> ? ?import org.antlr.runtime.CommonTokenStream;
> ? ?import org.antlr.runtime.RecognitionException;
>
>
> ? ?public class runner {
>
> ? ? ? ?public static void main(String args[])
> ? ? ? ?{
> ? ? ? ? ? ? ? ?simpleLexer lex = new simpleLexer(new
> ANTLRStringStream("a33 44"));
> ? ? ? ? ? ? ? ?CommonTokenStream tokens= new CommonTokenStream(lex);
> ? ? ? ? ? ? ? ?simpleParser parser = new simpleParser(tokens);
> ? ? ? ? ? ? ? ?try {
> ? ? ? ? ? ? ? ? ? ? ? ?parser.prog();
> ? ? ? ? ? ? ? ?} catch (RecognitionException e) {
> ? ? ? ? ? ? ? ? ? ? ? ?e.printStackTrace();
> ? ? ? ? ? ? ? ?}
> ? ? ? ?}
> ? ?}
>
> The parser works, and the prog() continues succesfully. But in the
> background the following error message is printed to the console.
>
> ? ?line 1:3 no viable alternative at character ' '
>
> The same exact sequence causes no messages to the ANTLRWorks console,
> so I was wondering, am I abusing the ~ ? Or is there a difference
> between the ANTLRWorks debugger and default java runtime?
>
> So if anybody can help me how to get rid of these messages? Because in
> the original lexer and parser where this question is based, I get a
> nice looking AST but only have messages printed to the eclipse
> console.
>
> Versions used:
> ANTLRWorks 1.3.1
> ANTLR-3.2
> Linux x64
>
> Kind regards,
> Davy Landman
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
>
>
>
>
>
>
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
>

From rdadolf at gmail.com  Fri Feb 26 12:04:18 2010
From: rdadolf at gmail.com (Bob Adolf)
Date: Fri, 26 Feb 2010 12:04:18 -0800
Subject: [antlr-interest] Python How To Convert from Java
In-Reply-To: <ace643fd1002260309y200bc385i81ab675709a4eb24@mail.gmail.com>
References: <ace643fd1002260309y200bc385i81ab675709a4eb24@mail.gmail.com>
Message-ID: <4CBF225D-E792-47AD-A011-D34F20ACB04B@gmail.com>

Hi Remy,

I think you'll be surprised at how similar the python and java  
versions actually are. You made things a little more difficult for  
yourself than you needed. I've put some comments in-line with your  
original python code and finished off the end.

> import antlr3
> import antlr3.tree
> from sqltestLexer import sqltestLexer
> from sqltestParser import sqltestParser
> #import sqltest ?                                    won't import
The grammar sqltest.g actually doesn't produce an sqltest file or  
class, so you just need the first two.

> import sys
> #from sqltest import sqltest
> #sys.argv[1]
> char_stream = antlr3.ANTLRStringStream("SELECT * FROM BOOKS;")
Your grammar actually doesn't parse this phrase, but I assume you just  
forgot to replace the place-holder string with something else. I used  
this instead:
char_stream = antlr3.ANTLRStringStream("CREATE TABLE foo ( bar int ) ;")
which (not knowing SQL) seems to fit your grammar at least.

It seems like you tried using an input file first. I'm assuming that  
you want something like your original java file that selects between a  
file or a string. Well, it looks very much like the java version:
if( len(sys.argv)>1 ):
   char_stream = antlr3.ANTLRFileStream(sys.argv[1])
else:
   char_stream = antlr3.ANTLRStringStream(raw_input("SQL>"))

> lexer = sqltestLexer(char_stream)
> tokens = antlr3.CommonTokenStream(lexer)
> parser = sqltestParser(tokens)
>
> r = parser.createtablestmt_return()
You'll actually want to call the function itself. The types are  
handled automatically, so you can focus on the work that's actually  
being done. The function parser.createtablestmt (which you can look at  
directly in sqltestParser.py) is ANTLR's translation of your root- 
level grammar rule. You can walk through the logic in the python  
source as it tries to match against input tokens and recursively  
invokes the other rules.
r = parser.createtablestmt()

Interestingly enough, this is where your java version stops. You just  
print out the tree element.
# System.out.println("tablename ="+ 
((Tree)r.tree).getChild(2).toString());
# System.out.println("tree="+((Tree)r.tree).toStringTree());

You can do the same thing in python!
print "tablename = " + r.tree.children[2].toString()
print "tree = " + r.tree.toStringTree()


>
> # this is the root of the AST
> root = r.tree
>
> nodes = antlr3.tree.CommonTreeNodeStream(root)
> nodes.setTokenStream(tokens)
>
> #walker = sqltest(nodes)
> #  STUCK!

As for the rest of this, it looks like you started trying to implement  
a tree walker. If you're serious about munging the AST, you'll  
probably want to do this later, but for simple things like just  
dumping the tree, you don't need to. Likewise, if you're just doing a  
simple extraction of SQL snippets or some easy translation, you can do  
it directly by inserting actions into your parser at the appropriate  
place.

If you do decide that a tree walker is what you need, then you'll need  
to create a separate grammar for that (and this is why you got stuck,  
there was nothing you could invoke because you hadn't written a tree  
parser). You should probably run through the python examples (http://www.antlr.org/download/examples-v3.tar.gz 
) or the ANTLR book if you're going to do that.

Hope this helps.


   -Bob



For clarity, here's the whole file I used (driver.py):
import antlr3
from sqltestLexer import sqltestLexer
from sqltestParser import sqltestParser
import sys

if( len(sys.argv)>1 ):
   char_stream = antlr3.ANTLRFileStream(sys.argv[1])
else:
   char_stream = antlr3.ANTLRStringStream(raw_input("SQL>"))
lexer = sqltestLexer(char_stream)
tokens = antlr3.CommonTokenStream(lexer)
parser = sqltestParser(tokens)

r = parser.createtablestmt()

# System.out.println("tablename ="+ 
((Tree)r.tree).getChild(2).toString());
# System.out.println("tree="+((Tree)r.tree).toStringTree());
print "tablename = " + r.tree.children[2].toString()
print "tree = " + r.tree.toStringTree()

And the output:
tablename = foo
tree = CREATE TABLE foo ( bar int )


From antlr at mirality.co.nz  Fri Feb 26 13:42:01 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 27 Feb 2010 10:42:01 +1300
Subject: [antlr-interest] Literals and subrules
In-Reply-To: <5470EC44E496434BB23344140169F5A0@pc2008>
References: <AC343DFC0B0A4B5392E67E2CED483C68@pc2008>
	<5470EC44E496434BB23344140169F5A0@pc2008>
Message-ID: <20100226214216.824D43418463@www.antlr.org>

At 08:18 27/02/2010, Kenneth Domino wrote:
 >stuff:
 >        'a' .. 'z' | 'A' .. 'Z'
 >        ;
 >
 >The answer was buried deep in the book "The Definitive ANTLR
 >Reference", ISBN-10: 0-9787392-5-6, Version: 2010-2-4,
 >page 95 (section Element Sets).  It is only valid for lexers, 
but
 >was used in a parser context.  So, it's illegal input, but a bug 

 >with the tool as well.

ANTLR 3's error detection is a little thin on the ground, 
apparently partly because it was still using ANTLR 2 under the 
covers (to parse input grammars).  Hopefully the next version will 
be better in this regard.

However, one thing that you should be aware of is that even though 
('a'..'z') might be a valid construct at the parser level, it does 
not mean what you think it means.  If used in the lexer, this 
means "all characters between 'a' and 'z', inclusive".  If used at 
the parser level, though, it would mean "all *tokens* between 'a' 
and 'z', inclusive".  The results would be a bit 
unpredictable.  Assuming that you haven't referenced those tokens 
before, most likely it would only match those two tokens and no 
others; it's possible though that it could match a whole pile of 
completely unrelated tokens.  It therefore makes no sense to use 
this construct at the parser level, even if ANTLR did support it.

All of this is an offshoot of a fundamental confusion between 
quoted literals at lexer level (representing a sequence of 
characters) and at parser level (representing a single unnamed 
token).  Despite their apparent convenience, when starting out 
with ANTLR it is usually best to avoid using quoted literals in 
the parser at all; it's much easier to accidentally break 
something or miss possible ambiguity when using them, since they 
effectively create hidden lexer rules of their own.


From ron.hunter-duvar at oracle.com  Fri Feb 26 15:51:58 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Fri, 26 Feb 2010 16:51:58 -0700
Subject: [antlr-interest] Suggested enhancement for code generation with
	imported grammars
Message-ID: <4B885E9E.40609@oracle.com>

Hi,

Splitting my grammar into a main one and imported sub-grammars solved my 
Java class size problem, but it created another unexpected one. The 
driver logic for the parsers creates a single parser object for a 
language and reuses it for parsing multiple files. It's created 
initially with a null TokenStream, then for each input file a new 
TokenStream is created and set with a call to setTokenStream (as well as 
a call to reset). This worked fine when it was all in one grammar. But 
each imported grammar creates a separate parser class and the main 
parser object gets fields generated for it with delegate sub-parser 
objects assigned to them in the constructor. A call to setTokenStream 
only sets the token stream for the top level parser object, not for the 
delegates. That leaves the delegates still using the TokenStream passed 
into the constructor. In my case, that resulted in a null pointer 
exception as soon as a rule in a delegate was called, because input was 
null.

It would be nice if an overriding setTokenStream method was generated in 
the parser class that knew about the delegates and called setTokenStream 
on them as well. This is already being done for setTreeAdaptor. So it 
should be simple to do it for setTokenStream as well.

Of course, if I provided a valid TokenStream when I created the parser 
object and didn't try to reuse the parser, I wouldn't run into this. 
There probably isn't a good argument for reusing them, as the amount of 
extra garbage created by creating new ones each time would be trivial 
compared to all the Token and other objects created. But if parser 
objects are not intended to be reusable, the reset and setTokenStream 
methods in org.antlr.runtime.Parser should be protected rather than 
public, as public implies they are there for public use (but I know 
sometimes it becomes necessary for public to be used when neither 
package or protected will work). At least it would be good if it were 
stated somewhere that reuse of parser objects is not intended/supported.

In my case it would be non-trivial to eliminate all the reuse of parser 
objects, so I hacked around it with some ugly introspection code to find 
the delegates and call setTokenStream on them too.

Ron

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From parrt at cs.usfca.edu  Fri Feb 26 17:26:56 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 26 Feb 2010 17:26:56 -0800
Subject: [antlr-interest] Suggested enhancement for code generation with
	imported grammars
In-Reply-To: <4B885E9E.40609@oracle.com>
References: <4B885E9E.40609@oracle.com>
Message-ID: <53C2C5AB-1A05-4D51-B92F-8189882CC663@cs.usfca.edu>

oops. thanks for the tip. i'll add bug.
http://www.antlr.org/jira/browse/ANTLR-428
Ter


From davy.landman at gmail.com  Fri Feb 26 23:46:09 2010
From: davy.landman at gmail.com (Davy Landman)
Date: Sat, 27 Feb 2010 08:46:09 +0100
Subject: [antlr-interest] Using ANTLR's ~ to do match literals causes"no
	viable alternative" messages in generated Java but not inANTLRWorks
In-Reply-To: <1280415556-1267221132-cardhu_decombobulator_blackberry.rim.net-1450933085-@bda428.bisx.prod.on.blackberry>
References: <20f7a0521002251600r7c268541r9c7f92c13c71d740@mail.gmail.com> 
	<4B871BBE.9080002@oracle.com>
	<20f7a0521002260036i52565eafk3e171f048ec1794b@mail.gmail.com> 
	<20f7a0521002261041p39ff9cabi569ad8ad979b242b@mail.gmail.com> 
	<1280415556-1267221132-cardhu_decombobulator_blackberry.rim.net-1450933085-@bda428.bisx.prod.on.blackberry>
Message-ID: <20f7a0521002262346w4ad8a837n3c6c631249d2b421@mail.gmail.com>

Hi Kyle,

I've tried to make it clear in my emails I was not discussing the
interpreter part of ANTLRWorks, because messages warn you about the
differences, and as soon as you enable advanced stuff you'll notice
it.

I was talking about the Debugger tab in ANTLRWorks, which compiles the
grammar to a debug parser and lexer and creates a small java program
to run (__Test__.java) ANTLRWorks than offers stepping through the
lexing and parsing process. In this part of the program, you would
expect the same behavior compared to the release version of your
grammar file. So perhaps, it is a difference between this debug and
release version?

Davy

On Fri, Feb 26, 2010 at 22:52,  <kferrio at gmail.com> wrote:
> Terence has in the past acknowledged that the interpreter in antlrworks has some issues. ?Now that Terence has publicly accepted stewardship of antlrworks perhaps he would appreciate a concise summary as a bug report.
>
> FYI. This is one reason I use the eclipse plugin even though I am not a java programmer. ?The plugin is not perfect either but I think its better for some tasks.
>
> Kyle
> Sent from my Verizon Wireless BlackBerry
>
> -----Original Message-----
> From: Davy Landman <davy.landman at gmail.com>
> Date: Fri, 26 Feb 2010 19:41:53
> To: Ron Hunter-Duvar<ron.hunter-duvar at oracle.com>
> Cc: <antlr-interest at antlr.org>
> Subject: Re: [antlr-interest] Using ANTLR's ~ to do match literals causes
> ? ? ? ?"no viable alternative" messages in generated Java but not in
> ? ? ? ?ANTLRWorks
>
> Hi ANTRL mailing list,
>
> So Ron's solution worked very nice. And I should have thought of it
> myself, but in my opinion the fact that these messages do not show in
> the ANTLRWorks debugger+console is confusing. Is there a reason behind
> it? Or is it perhaps a defect?
>
> Davy
>
> On Fri, Feb 26, 2010 at 09:36, Davy Landman <davy.landman at gmail.com> wrote:
>> Hi Ron,
>>
>> Thanks, I've been applying the channel=HIDDEN on the WS_CHAR fragment
>> level, and that messed up everything, but using this extra token works
>> perfectly.
>>
>> Cheers,
>> Davy
>>
>> On Fri, Feb 26, 2010 at 01:54, Ron Hunter-Duvar
>> <ron.hunter-duvar at oracle.com> wrote:
>>> Hi Davy,
>>>
>>> You don't have a rule for consuming whitespace. Add something like this:
>>>
>>> WS :
>>> ?WS_CHAR+ {$channel=HIDDEN;}
>>> ?;
>>>
>>> fragment WS_CHAR :
>>> ?(' '|'\r'|'\t'|'\u000C'|'\n')
>>> ?;
>>>
>>> Ron
>>>
>>>
>>> Davy Landman wrote:
>>>>
>>>> Hello,
>>>>
>>>> I'm having some problems with my generated java parser/lexer, but I've
>>>> tried to reduce the problem to a small subset.
>>>>
>>>> Let's assume the simple language which has identifiers and numbers.
>>>> And the only rules are, a number contains out of only numbers, and a
>>>> identifier can not contain `'?', ':', ' '` and can not begin with a
>>>> number.
>>>>
>>>> I would create the following ANTLR specification of this language.
>>>>
>>>> ? ?grammar simple;
>>>>
>>>> ? ?prog: ? ? ? expr* EOF;
>>>>
>>>> ? ?expr
>>>> ? ? ? ?: ? ? ? ID | INT;
>>>>
>>>>
>>>> ? ?ID ?: ~('0'..'9'|SEPERATORS) ~(SEPERATORS)*;
>>>>
>>>> ? ?fragment
>>>> ? ?SEPERATORS
>>>> ? ? ? ?: ? ? ? ' ' | ':' | '?';
>>>>
>>>> ? ?INT : ? ? ? '0'..'9'+
>>>> ? ? ? ?;
>>>>
>>>> And running this in ANTLRWorks debugging and parsing mode, no errors
>>>> are reported to the console.
>>>>
>>>> But if I than generate the Parser and Lexer and try to consume it in a
>>>> java program as such:
>>>>
>>>> ? ?import org.antlr.runtime.ANTLRStringStream;
>>>> ? ?import org.antlr.runtime.CommonTokenStream;
>>>> ? ?import org.antlr.runtime.RecognitionException;
>>>>
>>>>
>>>> ? ?public class runner {
>>>>
>>>> ? ? ? ?public static void main(String args[])
>>>> ? ? ? ?{
>>>> ? ? ? ? ? ? ? ?simpleLexer lex = new simpleLexer(new
>>>> ANTLRStringStream("a33 44"));
>>>> ? ? ? ? ? ? ? ?CommonTokenStream tokens= new CommonTokenStream(lex);
>>>> ? ? ? ? ? ? ? ?simpleParser parser = new simpleParser(tokens);
>>>> ? ? ? ? ? ? ? ?try {
>>>> ? ? ? ? ? ? ? ? ? ? ? ?parser.prog();
>>>> ? ? ? ? ? ? ? ?} catch (RecognitionException e) {
>>>> ? ? ? ? ? ? ? ? ? ? ? ?e.printStackTrace();
>>>> ? ? ? ? ? ? ? ?}
>>>> ? ? ? ?}
>>>> ? ?}
>>>>
>>>> The parser works, and the prog() continues succesfully. But in the
>>>> background the following error message is printed to the console.
>>>>
>>>> ? ?line 1:3 no viable alternative at character ' '
>>>>
>>>> The same exact sequence causes no messages to the ANTLRWorks console,
>>>> so I was wondering, am I abusing the ~ ? Or is there a difference
>>>> between the ANTLRWorks debugger and default java runtime?
>>>>
>>>> So if anybody can help me how to get rid of these messages? Because in
>>>> the original lexer and parser where this question is based, I get a
>>>> nice looking AST but only have messages printed to the eclipse
>>>> console.
>>>>
>>>> Versions used:
>>>> ANTLRWorks 1.3.1
>>>> ANTLR-3.2
>>>> Linux x64
>>>>
>>>> Kind regards,
>>>> Davy Landman
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>>
>>>
>>> --
>>> Ron Hunter-Duvar | Software Developer V | 403-272-6580
>>> Oracle Service Engineering
>>> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>>>
>>> All opinions expressed here are mine, and do not necessarily represent
>>> those of my employer.
>>>
>>>
>>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From bassglider at gmail.com  Fri Feb 26 23:50:26 2010
From: bassglider at gmail.com (Remy)
Date: Fri, 26 Feb 2010 21:50:26 -1000
Subject: [antlr-interest] Python How To Convert from Java
In-Reply-To: <4CBF225D-E792-47AD-A011-D34F20ACB04B@gmail.com>
References: <ace643fd1002260309y200bc385i81ab675709a4eb24@mail.gmail.com>
	<4CBF225D-E792-47AD-A011-D34F20ACB04B@gmail.com>
Message-ID: <ace643fd1002262350l2c2f6em9f71ed977d0546c0@mail.gmail.com>

Bob,

Thank you very much, that was an excellent explanation in great detail.
I'm guessing the next step would be to move away from:
r.tree.children[2].toString()
to something more useful like:  tablename = r.getTableName();
Is this at all possible and where can I find an example of this?
I see a similar example here but I'm not having much luck getting it to work:
http://codemate.wordpress.com/2009/02/06/writing-a-sql-parser/

Remy.

On Fri, Feb 26, 2010 at 10:04 AM, Bob Adolf <rdadolf at gmail.com> wrote:
> Hi Remy,
>
> I think you'll be surprised at how similar the python and java versions
> actually are. You made things a little more difficult for yourself than you
> needed. I've put some comments in-line with your original python code and
> finished off the end.
>
>> import antlr3
>> import antlr3.tree
>> from sqltestLexer import sqltestLexer
>> from sqltestParser import sqltestParser
>> #import sqltest ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?won't import
>
> The grammar sqltest.g actually doesn't produce an sqltest file or class, so
> you just need the first two.
>
>> import sys
>> #from sqltest import sqltest
>> #sys.argv[1]
>> char_stream = antlr3.ANTLRStringStream("SELECT * FROM BOOKS;")
>
> Your grammar actually doesn't parse this phrase, but I assume you just
> forgot to replace the place-holder string with something else. I used this
> instead:
> char_stream = antlr3.ANTLRStringStream("CREATE TABLE foo ( bar int ) ;")
> which (not knowing SQL) seems to fit your grammar at least.
>
> It seems like you tried using an input file first. I'm assuming that you
> want something like your original java file that selects between a file or a
> string. Well, it looks very much like the java version:
> if( len(sys.argv)>1 ):
> ?char_stream = antlr3.ANTLRFileStream(sys.argv[1])
> else:
> ?char_stream = antlr3.ANTLRStringStream(raw_input("SQL>"))
>
>> lexer = sqltestLexer(char_stream)
>> tokens = antlr3.CommonTokenStream(lexer)
>> parser = sqltestParser(tokens)
>>
>> r = parser.createtablestmt_return()
>
> You'll actually want to call the function itself. The types are handled
> automatically, so you can focus on the work that's actually being done. The
> function parser.createtablestmt (which you can look at directly in
> sqltestParser.py) is ANTLR's translation of your root-level grammar rule.
> You can walk through the logic in the python source as it tries to match
> against input tokens and recursively invokes the other rules.
> r = parser.createtablestmt()
>
> Interestingly enough, this is where your java version stops. You just print
> out the tree element.
> # System.out.println("tablename ="+((Tree)r.tree).getChild(2).toString());
> # System.out.println("tree="+((Tree)r.tree).toStringTree());
>
> You can do the same thing in python!
> print "tablename = " + r.tree.children[2].toString()
> print "tree = " + r.tree.toStringTree()
>
>
>>
>> # this is the root of the AST
>> root = r.tree
>>
>> nodes = antlr3.tree.CommonTreeNodeStream(root)
>> nodes.setTokenStream(tokens)
>>
>> #walker = sqltest(nodes)
>> # ?STUCK!
>
> As for the rest of this, it looks like you started trying to implement a
> tree walker. If you're serious about munging the AST, you'll probably want
> to do this later, but for simple things like just dumping the tree, you
> don't need to. Likewise, if you're just doing a simple extraction of SQL
> snippets or some easy translation, you can do it directly by inserting
> actions into your parser at the appropriate place.
>
> If you do decide that a tree walker is what you need, then you'll need to
> create a separate grammar for that (and this is why you got stuck, there was
> nothing you could invoke because you hadn't written a tree parser). You
> should probably run through the python examples
> (http://www.antlr.org/download/examples-v3.tar.gz) or the ANTLR book if
> you're going to do that.
>
> Hope this helps.
>
>
> ?-Bob
>
>
>
> For clarity, here's the whole file I used (driver.py):
> import antlr3
> from sqltestLexer import sqltestLexer
> from sqltestParser import sqltestParser
> import sys
>
> if( len(sys.argv)>1 ):
> ?char_stream = antlr3.ANTLRFileStream(sys.argv[1])
> else:
> ?char_stream = antlr3.ANTLRStringStream(raw_input("SQL>"))
> lexer = sqltestLexer(char_stream)
> tokens = antlr3.CommonTokenStream(lexer)
> parser = sqltestParser(tokens)
>
> r = parser.createtablestmt()
>
> # System.out.println("tablename ="+((Tree)r.tree).getChild(2).toString());
> # System.out.println("tree="+((Tree)r.tree).toStringTree());
> print "tablename = " + r.tree.children[2].toString()
> print "tree = " + r.tree.toStringTree()
>
> And the output:
> tablename = foo
> tree = CREATE TABLE foo ( bar int )
>
>

From wabsie at gmail.com  Sat Feb 27 09:34:07 2010
From: wabsie at gmail.com (Mark Ruvald)
Date: Sat, 27 Feb 2010 18:34:07 +0100
Subject: [antlr-interest] Octal error in C.g grammar
In-Reply-To: <220288281002260754y242b8621ra0c6de978c1942db@mail.gmail.com>
References: <220288281002260535h65051204nba1b7894f9abb3c1@mail.gmail.com> 
	<4B87D9AC.4080908@redhat.com>
	<220288281002260754y242b8621ra0c6de978c1942db@mail.gmail.com>
Message-ID: <220288281002270934y6085e680i2a46483d02559240@mail.gmail.com>

Hi again,

With the danger of appearing stupid again; in the same C grammar as
mentioned above - two rules are equivalent:

argument_expression_list
: assignment_expression (',' assignment_expression)*
 ;

expression
: assignment_expression (',' assignment_expression)*
 ;

I guess it doesn't hurt, but surely only having 1 rule must be preferred?


regards
-- Mark Ruvald.

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing on usenet and in e-mail?

From ssmile03 at gmail.com  Sat Feb 27 11:38:45 2010
From: ssmile03 at gmail.com (Smiley 4321)
Date: Sun, 28 Feb 2010 01:08:45 +0530
Subject: [antlr-interest] help: using antlr
In-Reply-To: <1419225d1002260218s2dd7f4efka26558fce92bd1b1@mail.gmail.com>
References: <a74947291002250310r67612938s50ca849c6c8eaec1@mail.gmail.com>
	<a74947291002250637r6f3601e4nc67742f21d6ffb65@mail.gmail.com>
	<220288281002250855j8086a42o953ab1226dfe2988@mail.gmail.com>
	<a74947291002250928n209a3016rb4bc94ae7d2838e6@mail.gmail.com>
	<d19d16481002250957j3fcccf1am3c6959209f00d5e9@mail.gmail.com>
	<5d97c171002251017n5e335a93xbbb1ee69396d41b7@mail.gmail.com>
	<a74947291002260151v143f79aauccbc685392484168@mail.gmail.com>
	<1419225d1002260218s2dd7f4efka26558fce92bd1b1@mail.gmail.com>
Message-ID: <a74947291002271138w57a5b310je83be4af3e673588@mail.gmail.com>

Hello Nick,

Below is the mpi parallel program as an example -

-----
#include <stdio.h>
#include <mpi.h>

int main(int argc, char *argv[] )
{
 int numprocs, namelength, rank;
 char processor_name[MPI_MAX_PROCESSOR_NAME];

MPI_Init(&argc, &argv);
MPI_Comm_size (MPI_COMMON_WORLD, &numprocs);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Get_processor_name(processor_name, &namelength);

printf("Process %d, on %s out of %d\n", rank, processor_name, numprocs):

MPI_Finalize();
}
-----

By referring to below definition of MPI environment/API calls we can
understand the purpose of MPI header file call and each MPI API calls
needed for above code -

*mpi.h -* says about header file used for parallel programming
API/environment calls. MPI is the only message passing library which can be
considered a standard for processes/threads to communicate with other node
processes/threads and leads to distributed memory parallel programming
model. This mpi.h header file contains numerous C API calls e.g MPI_Init,
MPI_Comm_size, MPI_Get_processor, MPI_Finalize, etc and it is required for
programs/routines which make MPI library calls.

Above MPI environment/API used are described below.

 *MPI_Init *- Initializes the MPI execution environment. This function is
called in every MPI program, must be called before any other MPI functions
and must be called only once in an MPI program. For C programs, MPI_Init may
be used to pass the command line arguments to all processes -* * *MPI_Init
(&argc,&argv)  *

 *MPI_Comm_size* - Determines the number of processes in the group
associated with a communicator. Generally used within the communicator
MPI_COMM_WORLD to determine the number of processes being used by the
application. *MPI_Comm_size (*MPI_COMMON_WORLD, &numprocs*)   *

*MPI_Comm_rank*  - Determines the rank of the calling process within the
communicator. Initially, each process will be assigned a unique integer rank
between 0 and number of processors - 1. This rank is often referred to as a
task ID.
*MPI_Comm_rank (*MPI_COMM_WORLD, &rank*) *

 *MPI_Get_processor_name*  - Returns the processor name. Also returns the
length of the name.  *MPI_Get_processor_name (*processor_name, &namelength*)
*

 *MPI_Finalize* - Terminates the MPI execution environment. This function is
used as the last MPI routine called in every MPI program - *MPI_Finalize ()
*
 **  Hope it explains.   -- Regards. Smiley
-------------
On Fri, Feb 26, 2010 at 3:48 PM, Nick Vlassopoulos
<nvlassopoulos at gmail.com>wrote:

> Hello Smiley,
>
>  On Fri, Feb 26, 2010 at 10:51 AM, Smiley 4321 <ssmile03 at gmail.com> wrote:
>
>> Peter,
>>
>> I did check ANTLR documentation & it's FAQ, also performed googlian for
>> ANTLR MPI support.
>>
>> The code as written, looking if it can be understood by ANTLR by
>> performing
>> verification for the given code.
>>
>> The task is, to understand and implement a techniques where few lines of
>> MPI
>> C level parallel programming code can be understood by ANTLR.
>>
>>
> So, your task would be to parse c code and have a sort of (one or more)
> predefined symbol table(s)
> with MPI headers / functions, so that the parser figures out if a program
> uses MPI or not (which is
> slightly tricky if someone names a set of functions MPI_* on purpose)?
>
> Maybe you can explain a little bit more what the "understood" means? I.e.
> is it just to answer a "yes" or "no"
> if the program contains MPI headers/library calls?
>
>
>> I am looking to know the techniques and support for mpi programming
>> extended
>>
>> by antlr.
>>
>> Hope it clear now to understand.
>>
>> ---regards.
>>
>
>
> Nikos
>

From pskswathy at gmail.com  Sun Feb 28 10:47:33 2010
From: pskswathy at gmail.com (swathy murthy)
Date: Mon, 1 Mar 2010 00:17:33 +0530
Subject: [antlr-interest] integration of grammar and template using
	getTemplate()
Message-ID: <fa7ae3a11002281047k3bec7ea3l6d6ec8ce5f52ce88@mail.gmail.com>

Hi

I am trying to get a text output from the tree grammar. I am doing a
language translation. I have been referencing ANTLR Definitive
Reference. But, I could not get the example at page 205 to work. The
getTemplate() is not working. It is showing error. And, I searched in
the antlr and String Template wiki but did not get any reference. Can
anyone please tell me what should I use instead of getTemplate() to
integrate the grammar and the template.

P.S.K.Swathy
MS by Research
IIIT, Hyderabad

From kyledr at gmail.com  Sun Feb 28 11:31:38 2010
From: kyledr at gmail.com (Kyle Robson)
Date: Sun, 28 Feb 2010 13:31:38 -0600
Subject: [antlr-interest] Left-Recursion Removal Help
In-Reply-To: <1266978175.23114.15.camel@gecko.home.org>
References: <2c6275e61002231730t23fe8911u3f445a8b34d75b94@mail.gmail.com>
	<1266978175.23114.15.camel@gecko.home.org>
Message-ID: <2c6275e61002281131o466dda53y3fe98bbb7ffafecb@mail.gmail.com>

Apologies, I believe I had made an error in the grammar sample I
mailed out. I was doing what I thought was inlining--except I believe
I did it backwards, making it very incorrect. Here is the relevant
section of the original grammar as presented in the grammar of this
language (BETA), modified to ANTLR's syntax.

term	:	mulExp
	|	factor
	;
mulExp	:	timesExp
	|	divExp
	|	modExp
	|	andExp
	;
// irrelevant code removed
timesExp:	term '*' factor;
divExp	:	term 'div' factor;
modExp	:	term 'mod' factor;
andExp	:	term 'and' factor;
factor	:	textConst
	|	integerConst
	|	notExp
	|	noneExp
	|	repetitionSlice
	|	transaction
	;

I turned it into this:

term	:	factor (timesExp | divExp | modExp | andExp)*
	;
// irrelevant code removed
timesExp:	'*' factor;
divExp	:	'div' factor;
modExp	:	'mod' factor;
andExp	:	'and' factor;
factor	:	textConst
	|	integerConst
	|	notExp
	|	noneExp
	|	repetitionSlice
	|	transaction
	;

I have attached two copies of the entire grammar for anyone who is
curious. Beta.g is almost identical to the grammar as presented in the
book /Object-Oriented Programming in the BETA Programming Language/:
http://www.daimi.au.dk/~beta/Books/index.html#betabook_download

BetaNew.g is the grammar as I've adapted it to work with ANTLR.

Also, thanks for the help, John.

Sincerely,

Kyle

On Tue, Feb 23, 2010 at 8:22 PM, John B. Brodie <jbb at acm.org> wrote:
> Greetings!
>
> It is really hard to know for sure how to truly answer your question
> without seeing a complete example of your problem (e.g. please always
> try to post a *smallest* yet *complete* example of your issue when
> asking a question).
>
> With that mealy worded excuse for my incompetence, I will venture an
> answer below...
>
> On Tue, 2010-02-23 at 19:30 -0600, Kyle Robson wrote:
>> Hi, I have beenA reading on the wiki, and I already fixed two of my
>> larger issues in my grammar (hopefully correctly). Now I've run into a
>> new set of rules that need fixing, and I would like to verify I'm
>> going about this correctly. I will take a guess, and can someone tell
>> me if it's correct?
>>
>> The problem snippet:
>>
>> timesExp: (timesExp | divExp | modExp | andExp | factor) '*' factor;
>> divExp : (timesExp | divExp | modExp | andExp | factor) 'div' factor;
>> modExp : (timesExp | divExp | modExp | andExp | factor) 'mod' factor;
>> andExp : (timesExp | divExp | modExp | andExp | factor) 'and' factor;
>> factor : '#'; // this rule is itself broken, but I will get to this
>> later, so I'm pretending it's something harmless
>>
>> My guess is to change them like this, using timesExp as an example
>>
>> timesExp: ((divExp | modExp | andExp | factor) '*' factor) ('*' factor)*
>>
>> Is this correct?
>
> I doubt it.
>
> maybe try something like the following (untested):
>
> timesExp : multiplicativeExp ;
> divExp : multiplicativeExp ;
> modExp : multiplicativeExp ;
> andExp : multiplicativeExp ;
> factor : multiplicativeExp ;
>
> multiplicativeExp : factor_x ( multiplicativeOperator factor_x )* ;
>
> multiplicativeOperator : '*' | 'div' | 'mod' | 'and' ;
>
> factor_x : .....whatever you have for `factor` now.... ;
>
>
>
> and, of course, if the above helps, you will really want to do *alot* of
> renaming of rules --- rather than having the factor_x, timesExp,
> divExp, ... stuff above
>
> hope this helps
> ? -jbb
>
>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Beta.g
Type: application/octet-stream
Size: 5968 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100228/d59d1bf3/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: BetaNew.g
Type: application/octet-stream
Size: 5869 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100228/d59d1bf3/attachment-0001.obj 

From passionist_81 at yahoo.co.uk  Sun Feb 28 15:11:12 2010
From: passionist_81 at yahoo.co.uk (passionist_81 at yahoo.co.uk)
Date: Sun, 28 Feb 2010 15:11:12 -0800 (PST)
Subject: [antlr-interest] (no subject)
Message-ID: <732289.31036.qm@web24807.mail.ird.yahoo.com>

http://photonecessary.webs.com?Lo4qr93nzbo


      


From eric at collectivegenius.net  Sun Feb 28 16:44:19 2010
From: eric at collectivegenius.net (Eric Webb)
Date: Sun, 28 Feb 2010 16:44:19 -0800
Subject: [antlr-interest] Wiki Markup Like Grammar Example
Message-ID: <4B8B0DE3.2070802@collectivegenius.net>

I am working on a note taking language (think wiki markup, but somewhat 
more specialized), and I am trying to use Antlr 3.2 to parse and create 
an AST of the content/structure.

Does anyone have any sample wiki (or similar) grammar that works in 
Antlr 3.2?  I found this:

http://dirkriehle.com/publications/2008/wiki-creole/

which is for Creole 1.0 (with is meant to be a standard Wiki markup 
language).  Unfortunately, it doesn't work for me.

Thanks in advance.

cheers,
eric


** More Information for the Interested **


I have a working grammar that can parse document sections and 
paragraphs, for example:

    *section 1
    ---

    this is a paragraph in the section

    section 1.1
    ---

    nested sections!

    ---
    ---
    *


It works great (after a bit of trial and error and reading The 
Definitive ANTLR Reference and giving gUnit a spin).  Now, I am trying 
to start supporting other standard wiki type things in my grammar, like:

Lists:

  * this is a list item
  * this is another list item

Formatting:

this is **bold**!
this is //italic//.

The problem is, my grammar for the the sections/paragraphs above is 
"word" based (ie: I create WORD tokens with the lexer), while the Creole 
example tokenizes the stream into character tokens to be able to 
identify the list, formatting, and other delimiters.

I am hoping for a working example that shows some best practices for a 
language like wiki markup before I go about re-structuring my grammar to 
support these other things (which I think I need to do).

Or, if I am totally misguided, let me know that too.

cheers,
eric


