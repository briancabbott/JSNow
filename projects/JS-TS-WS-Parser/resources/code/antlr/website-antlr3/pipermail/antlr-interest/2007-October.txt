From Abhijit_Ghonge at infosys.com  Mon Oct  1 02:24:52 2007
From: Abhijit_Ghonge at infosys.com (Abhijit Nandkumar Ghonge)
Date: Mon, 1 Oct 2007 14:54:52 +0530
Subject: [antlr-interest] heterogeneous AST
Message-ID: <13CAB19CBE2BDD49BC741F05E9FA4B5A08500652C3@BLRKECMBX05.ad.infosys.com>


Hi all,
            Can we implement heterogeneous ASTs in antlr v3? I have downloaded the latest antlr-3.0.1.tar.gz from antlr site and tried out writing a sample code with heterogeneous AST specified as below:

Exitstatement:
            'exit'<AST=com.example.core.ExitNode> NEWLINE!
            ;

However I'm getting the following error:
error(100): Expr.g:114:17: syntax error: antlr: FinScr.g:114:17: unexpected token: <
error(100): Expr.g:114:52: syntax error: antlr: FinScr.g:114:52: unexpected token: ExitNode
error(106): Expr.g:114:22: reference to undefined rule: com
error(106): Expr.g:114:26: reference to undefined rule: example
error(106): FinScr.g:114:32: reference to undefined rule: core

Can anybody help please, since I have done this in antlr-2.7.6, but I'm not able implement likewise in antlr-3.0.1?


Thanks,
~Abhijit.




**************** CAUTION - Disclaimer *****************
This e-mail contains PRIVILEGED AND CONFIDENTIAL INFORMATION intended solely for the use of the addressee(s). If you are not the intended recipient, please notify the sender by e-mail and delete the original message. Further, you are not to copy, disclose, or distribute this e-mail or its contents to any other person and any such actions are unlawful. This e-mail may contain viruses. Infosys has taken every reasonable precaution to minimize this risk, but is not liable for any damage you may sustain as a result of any virus in this e-mail. You should carry out your own virus checks before opening the e-mail or attachment. Infosys reserves the right to monitor and review the content of all messages sent to or from this e-mail address. Messages sent to or from this e-mail address may be stored on the Infosys e-mail system.
***INFOSYS******** End of Disclaimer ********INFOSYS***
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071001/8a84eebe/attachment.html 

From dt05ca4 at student.lth.se  Mon Oct  1 03:53:29 2007
From: dt05ca4 at student.lth.se (Christian Andersson)
Date: Mon, 1 Oct 2007 12:53:29 +0200 (CEST)
Subject: [antlr-interest] How to split  int a,b;
Message-ID: <60535.194.237.142.6.1191236009.squirrel@webmail.student.lth.se>

---------------------------- Original Message ----------------------------
Subject: How to split  int a,b;
From:    "Christian Andersson" <dt05ca4 at student.lth.se>
Date:    Mon, October 1, 2007 11:38
To:      antlr-interest at antlr.org
--------------------------------------------------------------------------

Hi all,

I have this type declaration below:

int a,b;


My simple grammar looks like the following:

vardecl
:type declarator_list ';' ->^(DECL type declarator_list)
;

declarator_list
: ID (',' ID)* ->^(ID)+
;

My problem is that I want to split up int a,b; into two
separate declarations in my AST without moving the declarator_list rule
up to the vardecl rule.


I want this tree:

DECL      DECL
|   \     |   \
int  'a'  int 'b'

instead of:

DECL
|   \
int  List
     |  \
    'a' 'b'


Thanks for any help
BR Christian




From nkodidi at hotmail.com  Mon Oct  1 04:23:39 2007
From: nkodidi at hotmail.com (Nkonyereza Diane)
Date: Mon, 1 Oct 2007 11:23:39 +0000
Subject: [antlr-interest] using ANTLR with netbeans
Message-ID: <BAY142-W27D79F191926E5FB6911EEA5AD0@phx.gbl>


Hi, Thanks for your email. I've been trying to work on this for a full day now with no success :(. I have done everything like it says in Ali's email but still not working.
 
This has stopped me from making any progress and I don't know what else to do :(
 
Please help!!
 
Thanks
Diane


Subject: FW: [antlr-interest] using ANTLR with netbeansDate: Sat, 29 Sep 2007 14:29:59 -0400From: Waverly.Edwards at genesys.comTo: nkodidi at hotmail.com

Here is the other email Ali sent.
 
 
W.


From: ali azimi [mailto:aliaazimi at yahoo.com] Sent: Tuesday, September 04, 2007 6:14 PMTo: Edwards, WaverlyCc: antlr-interest at antlr.orgSubject: Re: [antlr-interest] using ANTLR with netbeans

Hi,
 
I hope by writing ?antlr works? in my previous email, I did not cause any confusion. By ?antlr works?, I meant all your java classes which are produced by antlr and you want to execute in netBeans environment. I try to explain it more clearly. I hope it works. I know how frustrating it can be.
 
As I explained previously, you need to place the two runtime files (antlr and org which I gave you not anything else) in the source package you keep your java files produced by antlr like lexer, parser and tree walker. In my machine, the runtime files (org and antlr) are placed at the address: C:\MyProjects\FinalFinal\src . So as all the other packages which include my parser, etc produced by antlr. I will send you a snapshot of the netBeans interface. In the snapshots you can see some packages which their names start with antlr and org. You need them. But not the ones for other languages like c and etc. but do not worry they do not cause any harms. You do not have to go and create packages for each of them. If you drag and drop the files I gave you to the source package of the project (like FinalFinal in the snapshot), the files will look like the ones in the snapshot. Along with them in the same ?source packages?, create your classes. (again just drag and drop the text files of lexer and parser and tree walker created by antlr and stored in an address similar to C:\tmp\antlrworks into the created package for your antlr java classes like finalPro at C:\MyProjects\FinalFinal\src\finalPro. See the snapshot). Make sure the java classes in your package like finalpro have the name of the right package ?finalPro? and have the import line ?import antlr.RecognitionException;?. As java classes produced by antlr do not have this import line and you have to add it yourself.
 
 
Best of luck,
 
Al'Edwards, Waverly' <Waverly.Edwards at genesys.com> wrote: 

I thank you very much for this.  Unfortunately I am still unable to put the pieces together.
 
 
W.


From: ali azimi [mailto:aliaazimi at yahoo.com] Sent: Tuesday, September 04, 2007 9:08 AMTo: Edwards, WaverlySubject: Re: [antlr-interest] using ANTLR with netbeans

Hi,
 
I have had all those problems before. I use NeatBean 5.5. I have enclosed the zip file of all the Runtime packages needed. I did this:
 
There are two files in the enclosed zip. org and antlr. I placed the two files in the source file of the package containing my antlr works. It has been working for me perfectly.
 
 
Best wishes,
 
Al'Edwards, Waverly' <Waverly.Edwards at genesys.com> wrote:

I am using netbeans 5.5.1 and I've been unable to figure out how to use the runtime jar as a library. I've placed the file in the classpath, added a new classpath, added the source directory and have not had success being able to use ANTLR with netbeans.
Is there a way to do this? 
W. 


Take the Internet to Go: Yahoo!Go puts the Internet in your pocket: mail, news, photos & more. 

Got a little couch potato? Check out fun summer activities for kids. 
_________________________________________________________________
Get free emoticon packs and customisation from Windows Live. 
http://www.pimpmylive.co.uk
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071001/f2454924/attachment.html 

From Pranita.Chaudhari at eads.com  Mon Oct  1 06:20:44 2007
From: Pranita.Chaudhari at eads.com (Chaudhari, Pranita, OPEE14)
Date: Mon, 1 Oct 2007 15:20:44 +0200
Subject: [antlr-interest] How to Print Rule Line number
References: <mailman.1.1191178801.17074.antlr-interest@antlr.org>
Message-ID: <4A4BFB693434EA43A40E8C85DFE4046FB85D56@deimsg30.de.net.world>

 
Hello,
 
How can use the "$*.line" attribute , if I want to print the error message along with line number of rule in grammar file, where error is occured or where the problem is.
 
-Pranita
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071001/df2d417d/attachment-0001.html 

From arto.viitanen at pp4.inet.fi  Mon Oct  1 06:42:53 2007
From: arto.viitanen at pp4.inet.fi (Arto Viitanen)
Date: Mon, 01 Oct 2007 16:42:53 +0300
Subject: [antlr-interest] How to split int a, b:
In-Reply-To: <mailman.6856.1191244850.2665.antlr-interest@antlr.org>
References: <mailman.6856.1191244850.2665.antlr-interest@antlr.org>
Message-ID: <4700F95D.8050005@pp4.inet.fi>

On antlr-interest-request at antlr.org  "Christian Andersson"
<dt05ca4 at student.lth.se> wrote:
> I have this type declaration below:
>
> int a,b;
>
>
> My simple grammar looks like the following:
>
> vardecl
> :type declarator_list ';' ->^(DECL type declarator_list)
> ;
>
> declarator_list
> : ID (',' ID)* ->^(ID)+
> ;
>
> My problem is that I want to split up int a,b; into two
> separate declarations in my AST without moving the declarator_list rule
> up to the vardecl rule.
>   
On a grammar for my language I have:

varDeclaration
    :
    'var'  ID  ( ',' ID )*  ISTYPE typeDenoter
    ( PREDEF expression -> ^(DECL 'var' ID typeDenoter expression)+
    |                   -> ^(DECL 'var' ID typeDenoter)+
    )
    ;

I use -> for ISTYPE and | for PREDEF, so I can use

var a, b -> integer | 3 ;

and

var a, b -> integer ;



So, move the declarator_list up to the vardecl rule and the + after the
tree.

--
Arto Viitanen

From antlr at jazillian.com  Mon Oct  1 13:07:26 2007
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 01 Oct 2007 16:07:26 -0400
Subject: [antlr-interest] How to split int a, b:
In-Reply-To: <4700F95D.8050005@pp4.inet.fi>
References: <mailman.6856.1191244850.2665.antlr-interest@antlr.org>
	<4700F95D.8050005@pp4.inet.fi>
Message-ID: <4701537E.3080502@jazillian.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071001/79a310b1/attachment.html 

From Austin_Hastings at Yahoo.com  Mon Oct  1 16:36:21 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 01 Oct 2007 19:36:21 -0400
Subject: [antlr-interest] Newbie Q: Duplicating nodes from parse into AST
Message-ID: <47018475.8050109@Yahoo.com>

I'm trying to parse a c-like language. Right now I'm stuck trying to 
generate duplicate DECL nodes for "int i,j" type declarations. Here is 
the relevant bits of the grammar:

declaration
    : decl_type_spec
      decl_prefix_expr (',' decl_prefix_expr)*
      ';'
        -> ^(DECL decl_type_spec decl_prefix_expr)+
    ;

decl_type_spec
    : decl_type_item+
    ;

decl_type_item
    : STORAGE_CLASS
    | TYPE_QUALIFIER
    | BUILTIN_TYPE
    ;
   
decl_prefix_expr
    : decl_pointer decl_prefix_expr    -> ^(decl_pointer decl_prefix_expr)
    | decl_postfix_expr
    ;

decl_postfix_expr
    : decl_primary_expr
    ;

decl_primary_expr
    : IDENTIFIER
    | '(' decl_prefix_expr ')'
    ;

-----

My input is "int x, *y;"

Using AntlrWorks, the parse tree shows (correctly, IMO) that the text is 
parsed as

declaration:
    decl_type_spec -> decl_type_item -> "int"
    decl_prefix_expr -> decl_postfix_expr -> decl_primary_expr -> "x"
    ","
    decl_prefix_expr -> decl_pointer -> "*"
    ................. -> decl_prefix_expr -> decl_postfix_expr -> 
decl_primary_expr -> "y"
    ";"

To me, this should indicate that the rewrite rule in declaration has a 
single "decl_type_spec" and a list of two "decl_prefix_expr"s and it 
should generate

^(DECL int x)
^(DECL int *y)

But the AST view in AntlrWorks shows:

nil:
    ^(DECL int x)
    ^(DECL ^(* y))   # AKA:  DECL -> * -> y

Can anyone shed some light on this? Why isn't my decl_type_spec ("int") 
being repeated for the second DECL tree?

=Austin


From Austin_Hastings at Yahoo.com  Mon Oct  1 21:20:24 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 02 Oct 2007 00:20:24 -0400
Subject: [antlr-interest] Another newbie Q: AntlrWorks wants to do remote
 debugging only on my Java-based grammar?
Message-ID: <4701C708.5050107@Yahoo.com>

Howdy,

I've been building up a grammar, and I don't know if I've crossed a 
magic threshold or if something else is going on. But suddenly, when I 
tell AntlrWorks to debug my grammar, it generates, compiles, and then 
goes into a "Connecting..." wait loop. After a bit, it times out and 
complains that it:

  Cannot launch the debugger.
  Time-out waiting to connect to the remote parser.

This is surprising because I haven't told it to do "Debug Remote..." or 
anything - I've got my .g file loaded, it uses Java as the underlying 
language, and I want a local debugging session.
 
If I type in a trivial grammar (target: 'a' | 'b';) then debugging works 
fine locally. For some reason my grammar is too complete, or uses some 
mysterious feature (I just added @members{...} to my parser - does that 
make a difference?) that causes it to want remote mode.
 
This would be acceptable if I had the first idea how to set up remote 
mode - I'm not a java coder by profession, so I'm figuring things out as 
I go.
 
Can anyone tell me:

1. How do I get back to local debugging for my grammar?; or

2. What features cause a java grammar to force remote debugging?; and

3. How to set up remote debugging on a Ubuntu linux system with Sun 
Java5-jdk installed?


aTdHvAvNnKcSe,

=Austin


From Austin_Hastings at Yahoo.com  Mon Oct  1 21:32:40 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 02 Oct 2007 00:32:40 -0400
Subject: [antlr-interest] Newbie Q: Duplicating nodes from parse into AST
In-Reply-To: <47018475.8050109@Yahoo.com>
References: <47018475.8050109@Yahoo.com>
Message-ID: <4701C9E8.10804@Yahoo.com>

FWIW,

I see on the archive that "Christian Andersson" had essentially the same 
problem as me, wrt splitting a declaration like:

int a,b;

into an AST like ^(int a) ^(int b).

FWIW, Christian and others, I worked around the problem by doing the 
trick detailed under "Creating Nodes with Arbitrary Actions" in the 
Definitive ANTLR Reference. Here's what my solution looks like, abbreviated:

declaration
    : type=decl_type_spec!
      declarator[$type.tree]
      (',' declarator[$type.tree])*
    ;

decl_type_spec : 'int' ; /* or whatever */

declarator[CommonTree type]
    : decl_prefix_expr   -> ^(DECL {$type} decl_prefix_expr)
    ;

decl_prefix_expr : /* Matches identifiers, pointers, blah blah blah. */

The key to this trick is the parameterized rule "declarator," which 
accepts the type information as an argument. The "declaration" rule 
matches the type name, qualifiers, storage class, yadda yadda yadda, 
groups it into a "type" subtree, and passes that subtree to "declarator" 
every time it matches one. The declarator node emits the AST including 
type data.
 
Yes, as I posted the other day, I think it should be possible to do this 
with a rewrite rule. Certainly there is an example in Parr's book that 
indicates this should be possible. But this works today.

Enjoy,

=Austin


From Austin_Hastings at Yahoo.com  Mon Oct  1 23:57:57 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 02 Oct 2007 02:57:57 -0400
Subject: [antlr-interest] BUG? ruleRefBangTrack.st not defined
Message-ID: <4701EBF5.7020808@Yahoo.com>

I made what seems like an error. I had a rule that contained a "!" 
(bang) to suppress generation of a node in my output tree.
 
I overlooked this, and added a -> rewrite rule, so that my rule looked like

    declaration: type_info! declarator (, declarator)* -> declarator* ;

The idea, of course, is that my AST was getting commas in it, and I 
wanted to get rid of them.
 
This caused ANTLR to throw an exception, which is likely caused by a 
missing file. Since the cause is the extraneous !, I can work around it. 
But I thought you'd like to know.

=Austin

Exception follows:

ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
error(10):  internal error: src/hlasm/Hlasm.g : 
java.lang.IllegalArgumentException: Can't find template ruleRefBangTrack.st
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:485)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:372)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:384)
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:464)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:372)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:384)
org.antlr.codegen.CodeGenTreeWalker.getRuleElementST(CodeGenTreeWalker.java:135)
org.antlr.codegen.CodeGenTreeWalker.atom(CodeGenTreeWalker.java:1901)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1641)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1490)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1517)
org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:486)
org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:333)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)


From Waverly.Edwards at genesys.com  Tue Oct  2 01:27:19 2007
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Tue, 2 Oct 2007 04:27:19 -0400
Subject: [antlr-interest] Another newbie Q: AntlrWorks wants to do
	remote debugging only on my Java-based grammar?
In-Reply-To: <4701C708.5050107@Yahoo.com>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1BD0ECB@navamane001.ad.internal.corp>


I experience this problem *many* times.  The problem for me was two
fold.  First there was some embedded java 
that Antlrworks didn't agree with.  No error was generated when I
checked the grammar.  Fortunately for me
I knew that the last things I did were direct changes in the grammar and
embedded some java.  After making
prototypes for each function I believe that I either had a syntax error
or a missing include file.  I do
not recall which.  Most often it was a syntax error.  The second problem
was the need to reboot the machine
or change the port in which the debugger worked.  I believed this
particular error tied up the port and it
no longer became usable.  I changed the port in one of the preferences
and it would work or I would reboot.
To save myself time, I would most often change port numbers.  I learned
to prototype all my functions and
before placing them in Antlrworks to alleviate that problem.


W.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Austin Hastings
Sent: Tuesday, October 02, 2007 12:20 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Another newbie Q: AntlrWorks wants to do
remote debugging only on my Java-based grammar?

Howdy,

I've been building up a grammar, and I don't know if I've crossed a
magic threshold or if something else is going on. But suddenly, when I
tell AntlrWorks to debug my grammar, it generates, compiles, and then
goes into a "Connecting..." wait loop. After a bit, it times out and
complains that it:

  Cannot launch the debugger.
  Time-out waiting to connect to the remote parser.

This is surprising because I haven't told it to do "Debug Remote..." or
anything - I've got my .g file loaded, it uses Java as the underlying
language, and I want a local debugging session.
 
If I type in a trivial grammar (target: 'a' | 'b';) then debugging works
fine locally. For some reason my grammar is too complete, or uses some
mysterious feature (I just added @members{...} to my parser - does that
make a difference?) that causes it to want remote mode.
 
This would be acceptable if I had the first idea how to set up remote
mode - I'm not a java coder by profession, so I'm figuring things out as
I go.
 
Can anyone tell me:

1. How do I get back to local debugging for my grammar?; or

2. What features cause a java grammar to force remote debugging?; and

3. How to set up remote debugging on a Ubuntu linux system with Sun
Java5-jdk installed?


aTdHvAvNnKcSe,

=Austin


From Waverly.Edwards at genesys.com  Tue Oct  2 01:44:38 2007
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Tue, 2 Oct 2007 04:44:38 -0400
Subject: [antlr-interest] Another newbie Q: AntlrWorks wants to doremote
	debugging only on my Java-based grammar?
In-Reply-To: <FF993752CB890B4EB591BE5450C37BF1BD0ECB@navamane001.ad.internal.corp>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1BD0ECC@navamane001.ad.internal.corp>


Sorry, by prototype I mean that I would write the same or equivalent
function in Netbeans IDE then place it Antlrworks. 


W.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Edwards, Waverly
Sent: Tuesday, October 02, 2007 4:27 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Another newbie Q: AntlrWorks wants to
doremote debugging only on my Java-based grammar?


I experience this problem *many* times.  The problem for me was two
fold.  First there was some embedded java that Antlrworks didn't agree
with.  No error was generated when I checked the grammar.  Fortunately
for me I knew that the last things I did were direct changes in the
grammar and embedded some java.  After making prototypes for each
function I believe that I either had a syntax error or a missing include
file.  I do not recall which.  Most often it was a syntax error.  The
second problem was the need to reboot the machine or change the port in
which the debugger worked.  I believed this particular error tied up the
port and it no longer became usable.  I changed the port in one of the
preferences and it would work or I would reboot.
To save myself time, I would most often change port numbers.  I learned
to prototype all my functions and before placing them in Antlrworks to
alleviate that problem.


W.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Austin Hastings
Sent: Tuesday, October 02, 2007 12:20 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Another newbie Q: AntlrWorks wants to do
remote debugging only on my Java-based grammar?

Howdy,

I've been building up a grammar, and I don't know if I've crossed a
magic threshold or if something else is going on. But suddenly, when I
tell AntlrWorks to debug my grammar, it generates, compiles, and then
goes into a "Connecting..." wait loop. After a bit, it times out and
complains that it:

  Cannot launch the debugger.
  Time-out waiting to connect to the remote parser.

This is surprising because I haven't told it to do "Debug Remote..." or
anything - I've got my .g file loaded, it uses Java as the underlying
language, and I want a local debugging session.
 
If I type in a trivial grammar (target: 'a' | 'b';) then debugging works
fine locally. For some reason my grammar is too complete, or uses some
mysterious feature (I just added @members{...} to my parser - does that
make a difference?) that causes it to want remote mode.
 
This would be acceptable if I had the first idea how to set up remote
mode - I'm not a java coder by profession, so I'm figuring things out as
I go.
 
Can anyone tell me:

1. How do I get back to local debugging for my grammar?; or

2. What features cause a java grammar to force remote debugging?; and

3. How to set up remote debugging on a Ubuntu linux system with Sun
Java5-jdk installed?


aTdHvAvNnKcSe,

=Austin


From jaluber at gmx.de  Tue Oct  2 03:08:38 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 02 Oct 2007 12:08:38 +0200
Subject: [antlr-interest] BUG? ruleRefBangTrack.st not defined
In-Reply-To: <4701EBF5.7020808@Yahoo.com>
References: <4701EBF5.7020808@Yahoo.com>
Message-ID: <470218A6.4090700@gmx.de>

Austin Hastings wrote:
> I made what seems like an error. I had a rule that contained a "!"
> (bang) to suppress generation of a node in my output tree.
> 
> I overlooked this, and added a -> rewrite rule, so that my rule looked like
> 
>    declaration: type_info! declarator (, declarator)* -> declarator* ;
> 
> The idea, of course, is that my AST was getting commas in it, and I
> wanted to get rid of them.
> 
> This caused ANTLR to throw an exception, which is likely caused by a
> missing file. Since the cause is the extraneous !, I can work around it.
> But I thought you'd like to know.
> 
> =Austin

This problem is due to mixing of inline tree operators and rewrite
rules. The error message in 3.0 is abysmal and no real help unless you
no what the meaning of this actually is. 3.1 should alleviate this
problem as then the grammar parser is written in ANTLR 3 and not in
ANTLR 2.7.7.

Best regards,
Johannes Luber

From pink at odahoda.de  Tue Oct  2 13:38:24 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Tue, 02 Oct 2007 22:38:24 +0200
Subject: [antlr-interest] How to split  int a,b;
References: <60535.194.237.142.6.1191236009.squirrel@webmail.student.lth.se>
Message-ID: <fdua7u$smq$2@sea.gmane.org>

Hi,

Christian Andersson wrote:
> I have this type declaration below:
> 
> int a,b;
> 
> 
> My simple grammar looks like the following:
> 
> vardecl
> :type declarator_list ';' ->^(DECL type declarator_list)
> ;
> 
> declarator_list
> : ID (',' ID)* ->^(ID)+
> ;
> 
> My problem is that I want to split up int a,b; into two
> separate declarations in my AST without moving the declarator_list rule
> up to the vardecl rule.
> 
> 
> I want this tree:
> 
> DECL      DECL
> |   \     |   \
> int  'a'  int 'b'
> 
> instead of:
> 
> DECL
> |   \
> int  List
>      |  \
>     'a' 'b'

Try:

vardecl
 : type ID (',' ID)* ';' -> ^(DECL type ID)+
 ;

DECL and type will be replicated for each ID.


HTH



From pink at odahoda.de  Tue Oct  2 13:34:48 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Tue, 02 Oct 2007 22:34:48 +0200
Subject: [antlr-interest] heterogeneous AST
References: <13CAB19CBE2BDD49BC741F05E9FA4B5A08500652C3@BLRKECMBX05.ad.infosys.com>
Message-ID: <fdua16$smq$1@sea.gmane.org>

Hi,

Abhijit Nandkumar Ghonge wrote:
>             Can we implement heterogeneous ASTs in antlr v3? I have
>             downloaded the latest antlr-3.0.1.tar.gz from antlr site and
>             tried out writing a sample code with heterogeneous AST
>             specified as below:
> 
> Exitstatement:
>             'exit'<AST=com.example.core.ExitNode> NEWLINE!
>             ;
> 
> However I'm getting the following error:
> error(100): Expr.g:114:17: syntax error: antlr: FinScr.g:114:17:
> unexpected token: < error(100): Expr.g:114:52: syntax error: antlr:
> FinScr.g:114:52: unexpected token: ExitNode error(106): Expr.g:114:22:
> reference to undefined rule: com error(106): Expr.g:114:26: reference to
> undefined rule: example error(106): FinScr.g:114:32: reference to
> undefined rule: core
> 
> Can anybody help please, since I have done this in antlr-2.7.6, but I'm
> not able implement likewise in antlr-3.0.1?

It'll be in V3.1, syntax is slightly different, just "TOKEN<class>". You can
download the latest snapshot from fisheye
<http://fisheye2.cenqua.com/browse/antlr> and compile it yourself, if you
are brave enough. Don't know what the ETA is for the 3.1 release....

HTH


From OJAY78 at gmx.de  Tue Oct  2 16:24:25 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Wed, 03 Oct 2007 01:24:25 +0200
Subject: [antlr-interest] define two tokens with the same allowed characters
Message-ID: <20071002232425.26240@gmx.net>

Hi to all,

I'm just starting to understand antlr but now I stuck on a problem.

I have an function inside my grammar that needs three parameters.
IsEqual(param1, ID, ID2);

My problem is that I do not know how can I have two tokens which could contains the same characters. I have a rule ID with all the allowed characters, this one will be used correctly but after that rule I define ID2 with the same characters and when I try to generate my grammar the compiler recognizes that the ID2 token will never be reached. 

So can anyone help me, how can I do that correctly.

Thanks for your help.
-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

From Austin_Hastings at Yahoo.com  Tue Oct  2 23:08:10 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 03 Oct 2007 02:08:10 -0400
Subject: [antlr-interest] BUG?: Difference between AntlrWorks and antlr
 grammars? - Was "how to emit separate ASTs for 'int a,b; '"
Message-ID: <470331CA.4000208@Yahoo.com>

I believe this is down to the differences between superclassing with 
Debug and using the debugger adaptors, but I'm far from an expert.
 
I feed the following line into my grammar:

    int a,b;

When I run the antlrworks debugger, and fast-forward to the end, I can 
view the AST and see a tree that (graphically) looks like:

^(nil
    ^(DECL int a)
    ^(DECL b)
)

More graphically:

       nil
     /    \
  DECL   DECL
 /   \     |
int   a    b

(That looks good in a fixed-width font. YMMV.)

Anyhow, the point is that the antlrworks product appears to generate an 
AST that is wrong. This is incredibly frustrating, to me and apparently 
to others. Hence the recent set of emails.

However, I was in the process of trying to see exactly what changes 
would cause the thing to break when I inadvertently ran a "make test" on 
my system, which compiled my grammar and linked it against a test jig 
that runs the grammar on an input file. I opted to try that approach, 
and got:

java org.antlr.Tool  src/hlasm/Hlasm.g
ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
javac -g -d classes -sourcepath src src/hlasm/Test.java
jar -cmf manifest.txt hlasm.jar -C classes .
java -jar hlasm.jar
Hello, world. Reading from input
Got lexer
Got Tokens
Got parser
Got tree
(DECL int a) (DECL int b)


Notice the interesting tree dump at the bottom? It seems that the same 
grammar produces the desired AST in plain-old-antlr, at least according 
to the tree-to-string code.
 
I don't actually know if this is a generated-tree problem, or a 
displaying-it-wrong problem. Maybe the graph drawing code is skipping 
nodes it has previously seen. Regardless, there appears to be a 
difference. This is either a bug in the Antlr debug library, or a bug in 
AntlrWorks.

The grammar is below.

=Austin

grammar Hlasm;
options { output = AST; }
tokens { DECL; INT = 'int';}
@header {
package hlasm;
import hlasm.*;
}
@lexer::header {
package hlasm;
}

compilation_unit :      decl* ;

decl:
        type=type_spec  declarator (',' declarator)* ';'
                -> ^(DECL $type declarator)+
        ;

type_spec :     INT;
declarator: ID;
ID: 'a'..'z';
WS: (' ' | '\n') { channel=HIDDEN; };



From vbar at comp.cz  Tue Oct  2 23:39:24 2007
From: vbar at comp.cz (Vaclav Barta)
Date: Wed, 3 Oct 2007 08:39:24 +0200
Subject: [antlr-interest] define two tokens with the same allowed
	characters
In-Reply-To: <20071002232425.26240@gmx.net>
References: <20071002232425.26240@gmx.net>
Message-ID: <200710030839.25366.vbar@comp.cz>

On Wednesday 03 October 2007 01:24:25 OJAY78 at gmx.de wrote:
> My problem is that I do not know how can I have two tokens which could
> contains the same characters. I have a rule ID with all the allowed
> characters, this one will be used correctly but after that rule I define
> ID2 with the same characters and when I try to generate my grammar the
> compiler recognizes that the ID2 token will never be reached.
>
> So can anyone help me, how can I do that correctly.
Have one rule for both tokens and assign the token type explicitly in its 
action, i.e. (from http://www.antlr.org/grammar/1152141644268/Java.g )

ENUM:	'enum' {if ( !enumIsKeyword ) $type=Identifier;}
	;

That's presuming you can distinguish between ID and ID2 somehow, of course - 
if you can't, you probably shouldn't have different tokens.

	Bye
		Vasek

From OJAY78 at gmx.de  Wed Oct  3 01:55:01 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Wed, 03 Oct 2007 10:55:01 +0200
Subject: [antlr-interest] define two tokens with the same allowed
 characters
Message-ID: <20071003085501.7200@gmx.net>

Hi,

thanks for the answer. I tried it your way so that I have only one ID token.

ID: ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'.'|'+'|'-'|'#'|'=')+

my funtion should distinguish between the different tokens, so my function looks like this ISEQUAL'('FIELDTYPE','ID','ID')' but then I get an error that ID is an non unique reference.

What I want is the the function know how to handle such calls: IsEqual(formattrib,test#enabled,=enabled)

I thougt that I can take the second ID token in my function and check if it starts with the '=' chararacter and if it is its is the second ID

any advise where is my failure?

Thanks
-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

From huan.yong.goh at intel.com  Wed Oct  3 02:13:58 2007
From: huan.yong.goh at intel.com (Goh, Huan Yong)
Date: Wed, 3 Oct 2007 17:13:58 +0800
Subject: [antlr-interest] Unable to omit comment generation in target file
Message-ID: <721D9EC104550F498E418BAC4525F1B9052D10BB@pgsmsx413.gar.corp.intel.com>

Hello!
 
I can't find a way to omit comment generation in targeted file (C#) for
ANTRL 3.0.X. I tried to set "genHashLines=false" in OPTION block but it
doesn't work. As far as I know this keyword is no longer supported in
ANTRL 3.0.X, so I wonder if there any alternative way for this.
 
The reason of doing this is I don't want my target file be modified due
to the timestamp changed, or file location changed. 
 
Appreciate if someone can help on this :>
 
Regards,
HY
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/27791a88/attachment.html 

From Austin_Hastings at Yahoo.com  Wed Oct  3 02:16:19 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 03 Oct 2007 05:16:19 -0400
Subject: [antlr-interest] define two tokens with the same allowed
	characters
In-Reply-To: <20071003085501.7200@gmx.net>
References: <20071003085501.7200@gmx.net>
Message-ID: <47035DE3.2040307@Yahoo.com>

It's not clear what you're doing, but you need to get your head around 
separate layers of analysis.

Your token for ID seems weird - do you really allow things like plus, 
minus, and equals (+-=) in your identifier names?
 
That's something for you to answer. Let's look at the bigger picture:

You want to recognize a function that takes three args. Presumably it's 
a language builtin. So make a special token for it, and move on:

KW_ISEQUAL: 'IsEqual';   /* You could do this in-line, but it's easier 
to read the parser code this way. */
ID: 'a'..'z'+ ;

So what does your language look like? Well, part of it looks like this:

fn_isequal
    : KW_ISEQUAL '(' arg1=ID ',' arg2=ID ',' arg3=ID ')'
      
       {System.out.println("You called IsEqual - I know because I'm 
inside the rule - with three args: " + $arg1.text + ", " + $arg2.text + 
", and " + $arg3.text);}

    ;


Notice how we changed from UPPERCASE to lowercase production names? 
That's because recognizing a function call is a Parser, not a Lexer, 
function. The Lexer does lexical analysis - it recognizes keywords, 
identifiers, and the like. The Parser does syntactic analysis. It 
recognizes combinations of tokens as being valid, or not.
 
In this case, the keyword "IsEqual" followed by a '(' and three 
identifiers separated by commas and a ')' is a valid phrase in the 
language. It's up to you to recognize other valid phrases, and you can 
create intermediate productions to do that, like:

call_builtin_func
    : fn_isequal
    | fn_notequal
    | fn_lessthan
    | fn_greaterthan
    ;

This presumes you've built those other function calls, as you did for 
isequal.
 
At some point, you need to figure out what your language looks like at 
the high level. It may well be that there is a grammar already available 
for the language. But the high-level view of what the language should be 
like will inform how you break it down into productions - just like your 
high level view of a program informs how you create functions or methods 
to write the program.

=Austin


OJAY78 at gmx.de wrote:
> Hi,
>
> thanks for the answer. I tried it your way so that I have only one ID token.
>
> ID: ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'.'|'+'|'-'|'#'|'=')+
>
> my funtion should distinguish between the different tokens, so my function looks like this ISEQUAL'('FIELDTYPE','ID','ID')' but then I get an error that ID is an non unique reference.
>
> What I want is the the function know how to handle such calls: IsEqual(formattrib,test#enabled,=enabled)
>
> I thougt that I can take the second ID token in my function and check if it starts with the '=' chararacter and if it is its is the second ID
>
> any advise where is my failure?
>
> Thanks
>   


From dt05ca4 at student.lth.se  Wed Oct  3 02:20:37 2007
From: dt05ca4 at student.lth.se (Christian Andersson)
Date: Wed, 3 Oct 2007 11:20:37 +0200 (CEST)
Subject: [antlr-interest] How to split  unsigned int a,b;
In-Reply-To: <60535.194.237.142.6.1191236009.squirrel@webmail.student.lth.se>
References: <60535.194.237.142.6.1191236009.squirrel@webmail.student.lth.se>
Message-ID: <24096.194.237.142.21.1191403237.squirrel@webmail.student.lth.se>

> ---------------------------- Original Message ----------------------------
> Subject: How to split  int a,b;
> From:    "Christian Andersson" <dt05ca4 at student.lth.se>
> Date:    Mon, October 1, 2007 11:38
> To:      antlr-interest at antlr.org
> --------------------------------------------------------------------------
>
> Hi all,
>
> I have this type declaration below:
>
> int a,b;
>
>
> My simple grammar looks like the following:
>
> vardecl
> :type declarator_list ';' ->^(DECL type declarator_list)
> ;
>
> declarator_list
> : ID (',' ID)* ->^(ID)+
> ;
>
> My problem is that I want to split up int a,b; into two
> separate declarations in my AST without moving the declarator_list rule
> up to the vardecl rule.
>
>
> I want this tree:
>
> DECL      DECL
> |   \     |   \
> int  'a'  int 'b'
>
> instead of:
>
> DECL
> |   \
> int  List
>      |  \
>     'a' 'b'
>
>
> Thanks for any help
> BR Christian
>
>


Thanks for your help.

I Guess the only way to solve this problem is to move the contents of the
declarator_list rule up to the vardecl rule.

Well this works fine when I use a single type like int a,b,c
however when I try many types for example:
unsigned long int a,b,c I get the following tree,


DECL
|          \     \     \
unsigned   long   int  'a'

DECL
|          \     \     \     \
unsigned   long   int  'a'   'b'

DECL
|          \     \     \     \
unsigned   long   int  'a'   'c'

This is obvioulsy not the tree I want!
my grammar now look like the following:

vardecl
 :types declarator (',' declarator)* ';' ->^(DECL types declarator)+
 ;

the types rule has no AST rewrite instruction.

BR Christian


From antlr-interest at schraverus.com  Wed Oct  3 02:22:29 2007
From: antlr-interest at schraverus.com (Corno Schraverus)
Date: Wed, 3 Oct 2007 11:22:29 +0200
Subject: [antlr-interest] 2 C-target questions
Message-ID: <000501c8059e$ec660620$c5321260$@com>

Hi all,

 

I have 2 C-target questions, could anybody help me with that.

 

1)

If I have labeled a token (like this: myToken=IDENT ), how can I then get
the text of that token? (similar like myToken->getText() for C++ in ANTLR2).

I did find something about the GETTEXT macro while googling but I couldn't
get it to work.

 

2)

The following construct used to work in antlr2, in antlr3 it doesn't. The
variable x is placed in a nested block in the generated code and is
therefore not accessible outside that block.

Is this an error on my side, a bug in antlr or a bug in the
c-stringtemplate?

 

----

grammar test;

 

options

{

      language=C;

}

 

test

:

      {

            char x;

      }

      (

            'a' { x = 'a'; }

      |

            'b' { x = 'b'; }

      )

;

---

 

This becomes:

 

----

{

    {

      char x;   <----- declaration

    }

    {

      ------snip------

      switch (alt1) 

      {

      case 1:

          {

            MATCHT(4, &FOLLOW_4_in_test35); 

 

            {

                 x = 'a'; <------ failing assignment

            }

 

          }

          break;

      ------snip-------

      }

    }

 

}

 

 

Greetings,

 

Corno

 

 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/e4544690/attachment.html 

From antlr at mirality.co.nz  Wed Oct  3 03:01:38 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 03 Oct 2007 23:01:38 +1300
Subject: [antlr-interest] 2 C-target questions
In-Reply-To: <000501c8059e$ec660620$c5321260$@com>
References: <000501c8059e$ec660620$c5321260$@com>
Message-ID: <20071003100157.D46EB11EAE0@www.antlr.org>

At 22:22 3/10/2007, Corno Schraverus wrote:
>If I have labeled a token (like this: myToken=IDENT ), how can I 
>then get the text of that token? (similar like myToken->getText() 
>for C++ in ANTLR2).

Just use $myToken.text.  The codegen should translate that into 
the appropriate bit of code no matter what target language you're 
using.

>The following construct used to work in antlr2, in antlr3 it 
>doesn't. The variable x is placed in a nested block in the 
>generated code and is therefore not accessible outside that block.
>Is this an error on my side, a bug in antlr or a bug in the 
>c-stringtemplate?
[...]
>test
>:
>       {
>             char x;
>       }
>       (
>             'a' { x = 'a'; }

It's more of a quirk :)  You need to use something like this (I 
forget the exact syntax, but it's similar):

test:
   @decl {
     char x;
   }
   ( ...

Using @decl tells ANTLR that you're declaring variables rather 
than trying to insert arbitrary blocks of code.  Similarly you can 
use @init to insert some code specifically before rule processing 
begins (but too late to declare variables).


From dmitry.lizorkin at gmail.com  Wed Oct  3 03:18:46 2007
From: dmitry.lizorkin at gmail.com (Dmitry Lizorkin)
Date: Wed, 3 Oct 2007 14:18:46 +0400
Subject: [antlr-interest] two requests
Message-ID: <f86f9f940710030318v74f4256cy7697b1de9e528274@mail.gmail.com>

Hello!

1. When both a rewriting rule and a ^ operator suffix in the matching part
are presented, e.g,

g_Field
 : G_IDENTIFIER ':'^ -> ^(AST_FIELD G_IDENTIFIER)
 ;


ANTLR reports a very non-obvious (at least for me) error message:

error(10):  internal error: test.g : java.lang.IllegalArgumentException:
Can't find template tokenRefRuleRootTrack.st

The meaning behind this error message is quite hard to locate, as niether
the initial reason for the problem nor the line number within the grammar
are reported. Could the error message for this case be improved in the
future versions of ANTLR ?

2. If the following rewriting rule is written

G_IDENTIFIER
 : ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*
   -> ^(AST_ID G_IDENTIFIER)
 ;

ANTLR crashes with a java.lang.NullPointerException. The rewriting rule
above may be syntactically/semantically incorrect, but I
definitely would not expect ANTLR to crash in the case. Could this be a kind
of a bug?

Dmitry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/942bd43d/attachment.html 

From lizorkin at ispras.ru  Wed Oct  3 04:21:43 2007
From: lizorkin at ispras.ru (Dmitry Lizorkin)
Date: Wed, 3 Oct 2007 15:21:43 +0400
Subject: [antlr-interest] two requests
Message-ID: <00f101c805af$941021c0$4cc69553@fiona>

Hello!

1. When both a rewriting rule and a ^ operator suffix in the matching part 
are presented, e.g,

g_Field
 : G_IDENTIFIER ':'^ -> ^(AST_FIELD G_IDENTIFIER)
 ;


ANTLR reports a very non-obvious (at least for me) error message:

error(10):  internal error: test.g : java.lang.IllegalArgumentException: 
Can't find template tokenRefRuleRootTrack.st

The meaning behind this error message is quite hard to locate, as niether 
the initial reason for the problem nor the line number within the grammar 
are reported. Could the error message for this case be improved in the 
future versions of ANTLR ?

2. If the following rewriting rule is written

G_IDENTIFIER
 : ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*
   -> ^(AST_ID G_IDENTIFIER)
 ;

ANTLR crashes with a java.lang.NullPointerException. The rewriting rule 
above may be syntactically/semantically incorrect, but I definitely would 
not expect ANTLR to crash in the case. Could this be a kind of a bug?

Dmitry


From fermin.reig at gmail.com  Wed Oct  3 04:38:41 2007
From: fermin.reig at gmail.com (F Reig)
Date: Wed, 3 Oct 2007 12:38:41 +0100
Subject: [antlr-interest] v3 error: ANTLR could not analyze this decision in
	rule
Message-ID: <4f1b77310710030438q49dc2228xe3dc2589ef201c64@mail.gmail.com>

Hi,

I have a rule in v 2.7.6 that results in the error mentioned in the
subject when translated to v3. I'd be grateful if someone can suggest
an alternative.

The rule parses a list (possibly empty) of items separated by commas.
They are the arguments of a function call, with the twist that
arguments might be missing. For instance, all these are valid:

(); (a); (a,b); (,b); (a,)

Here's the rule in v2

args
   :   ( (maybe_arg COMMA!) =>
         maybe_arg (COMMA! maybe_arg )+
       | arg
       )?
   ;

arg  :   exp   {## = #([ARG,"ARG"], #arg);}   ;

// Return ARG even if the expression is not present
maybe_arg   :   (exp)?  {## = #([ARG,"ARG"], #maybe_arg);}    ;

Note: that parses the list itself, not the parentheses.

Here's my attempt at translating the rule into v3

args :  same as in v2

arg :   e=exp -> ^(ARG[$e.start] exp)  ;

maybe_arg  :   e=exp? -> ^(ARG[$e.start] exp?)   ;

This results in the message:

warning(205): v3.g:496:9: ANTLR could not analyze this decision in
rule args; often this is because of recursive rule references visible
from the left edge of alternatives.  ANTLR will re-analyze the
decision with a fixed lookahead of k=1.  Consider using "options
{k=1;}" for that decision and possibly adding a syntactic predicate.

Thanks,
Fermin

From jaluber at gmx.de  Wed Oct  3 05:47:33 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 03 Oct 2007 14:47:33 +0200
Subject: [antlr-interest] 2 C-target questions
In-Reply-To: <20071003100157.D46EB11EAE0@www.antlr.org>
References: <000501c8059e$ec660620$c5321260$@com>
	<20071003100157.D46EB11EAE0@www.antlr.org>
Message-ID: <47038F65.7040702@gmx.de>

Gavin Lambert wrote:
> At 22:22 3/10/2007, Corno Schraverus wrote:
>> If I have labeled a token (like this: myToken=IDENT ), how can I then
>> get the text of that token? (similar like myToken->getText() for C++
>> in ANTLR2).
> 
> Just use $myToken.text.  The codegen should translate that into the
> appropriate bit of code no matter what target language you're using.
> 
That's not true for at least the C# target. I've wrote about it on the
appropriate wiki page.

Best regards,
Johannes Luber

From andreas.ravnestad at gmail.com  Wed Oct  3 07:40:16 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Wed, 03 Oct 2007 16:40:16 +0200
Subject: [antlr-interest] Using JFlex with Antlr
Message-ID: <4703A9D0.80102@gmail.com>

Hi,

Given Antlrs lack of support for unicode, I am investigating the 
possibility of using JFlex as a lexer. I found one short thread about 
this matter in the archives, however it was not of much help since I 
have just recently moved to Antlr (coming from Yacc/CUP) and as such I 
am not familiar with the inner workings of Antlr (yet).

I would like to know if there is any documentation on switching to 
external lexers, and I will also appreciate any kind of hints and tips. 
I have already studied the C++ flex example, which didn't make me much 
wiser.

-Andreas R

From ted.villalba at gmail.com  Wed Oct  3 08:21:29 2007
From: ted.villalba at gmail.com (Ted Villalba)
Date: Wed, 3 Oct 2007 08:21:29 -0700
Subject: [antlr-interest] Question about throwing subclassed exceptions in
	TreeParser
Message-ID: <69fb4b090710030821q76bb9bf7t4f1d7a037abe9e74@mail.gmail.com>

Hi,

I have a tree grammar that makes remote calls to validate info in my parsed
grammar.I would like to be able to customize the messages in the exceptions
that may result from these calls.
To do so I have subclassed RecogntitionException. Perhaps there is another
way to add custom messages to the RecognitionException, this would be the
easiest solution for me...I guess. I could not figure out how to do so, so I
subclassed the exception.
The problem I have now is when trying to throw the subclassed exception.
I am using the rulecatch action to percolate the RecognitionException up to
the calling code, but, copying the code from the book that throws
RecognitionExceptions, I don't know how to throw any other exceptions.
I have :
@rulecatch {
  catch (RecognitionException e) {
    throw e;
  }
}

I have declared the following exception:

import org.antlr.runtime.IntStream;
import antlr.RecognitionException;

public class ANTLRInvalidYear extends RecognitionException {

    protected String msg;

    public ANTLRInvalidYear(String msg, IntStream input) {
        super(input.toString());
        this.msg = msg;
    }

    public String getMsg() {
        return this.msg;
    }

I can catch this exception in my tree rules, but then am unable to throw it
because the throw from the rulecatch seems restricted to the
RecognitionException type.
I may be missing something obvious. Any assistance is much appreciated.

Thank you,
Ted
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/3ca9c465/attachment-0001.html 

From arjan.kok at gmail.com  Wed Oct  3 08:41:22 2007
From: arjan.kok at gmail.com (Arjan Kok)
Date: Wed, 3 Oct 2007 17:41:22 +0200
Subject: [antlr-interest] Generating an Eclipse editor from existing ANTLR
	grammar
Message-ID: <82da6d100710030841i6513a29fk14fccccb6a941ce2@mail.gmail.com>

Hi,

I'm looking for software/ideas to generate an Eclipse editor with
syntax highlighting and possibly more, from an existing simple ANTLR3
Grammar.
In the past, there were mailings on this list mentioning software that
does just like this, but at the moment I can't find anything.
I hope I'm not the only one looking in this direction. On the other
hand, this could be an opportunity to develop this as an enhancement
to ANTLR3.

Thanks, Arjan Kok.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/207c789c/attachment.html 

From jaluber at gmx.de  Wed Oct  3 08:58:07 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 03 Oct 2007 17:58:07 +0200
Subject: [antlr-interest] Using JFlex with Antlr
In-Reply-To: <4703A9D0.80102@gmail.com>
References: <4703A9D0.80102@gmail.com>
Message-ID: <4703BC0F.5090202@gmx.de>

Andreas Ravnestad wrote:
> Hi,
> 
> Given Antlrs lack of support for unicode, I am investigating the
> possibility of using JFlex as a lexer. I found one short thread about
> this matter in the archives, however it was not of much help since I
> have just recently moved to Antlr (coming from Yacc/CUP) and as such I
> am not familiar with the inner workings of Antlr (yet).
> 
> I would like to know if there is any documentation on switching to
> external lexers, and I will also appreciate any kind of hints and tips.
> I have already studied the C++ flex example, which didn't make me much
> wiser.
> 
> -Andreas R
> 

ANTLR does support unicode lexing. How do you figure that it doesn't?
Because it still reads only ASCII grammars in?

Best regards,
Johannes Luber

From cimbroken at gmail.com  Wed Oct  3 09:05:12 2007
From: cimbroken at gmail.com (cimbroken)
Date: Wed, 3 Oct 2007 18:05:12 +0200
Subject: [antlr-interest] parsing huge files
Message-ID: <3b19324d0710030905i390c990co564c46f31ec8a9f@mail.gmail.com>

Hi everybody!

I'm trying to use ANTLR for a task that I've done till now with perl regexp:
parse huge log files.
My primary goal is to program parsers in a more declarative fashion, of
course, instead of writing by hand tons of regexp, while<> cycles and
if-elsif statements for every different log type.

I think my problem is ANTLR's CommonTokenStream, because in method
fillBuffer() tries to buffer *all* tokens from the Lexer while my needs are
to parse one log record at a time, discard old tokens, read a bunch of new
tokens (log files are repetitive and made up of independent records) and go
on like this.
Instead, when the magnitude of input files is Gigabytes or more, such stream
fills up memory even before the Parser starts doing its work!

I'm not a parsing neither ANTLR expert, so I'm asking some advice about
changing this behaviour (or at least someone who says: "don't use antlr for
this!"). Is it possible to do the trick at grammar level, or must I subclass
CommonTokenStream or ANTLRInputStream, or... ?

thanks a lot!

MC
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/e190a314/attachment.html 

From ted.villalba at gmail.com  Wed Oct  3 09:11:15 2007
From: ted.villalba at gmail.com (Ted Villalba)
Date: Wed, 3 Oct 2007 09:11:15 -0700
Subject: [antlr-interest] Question about throwing subclassed exceptions
	in TreeParser
In-Reply-To: <69fb4b090710030821q76bb9bf7t4f1d7a037abe9e74@mail.gmail.com>
References: <69fb4b090710030821q76bb9bf7t4f1d7a037abe9e74@mail.gmail.com>
Message-ID: <69fb4b090710030911h499f4348w1519cbaa51536b99@mail.gmail.com>

Hi all, I was inadvertently importing and mixing up 2 versions of
RecognitionClasses ( 2.6 and 3.0), and my dominoes were crashing.
This should work , if you don't do what I did.

Thanks for the time, sorry for the spam.

Ted

On 10/3/07, Ted Villalba <ted.villalba at gmail.com> wrote:
>
> Hi,
>
> I have a tree grammar that makes remote calls to validate info in my
> parsed grammar.I would like to be able to customize the messages in the
> exceptions that may result from these calls.
> To do so I have subclassed RecogntitionException. Perhaps there is another
> way to add custom messages to the RecognitionException, this would be the
> easiest solution for me...I guess. I could not figure out how to do so, so I
> subclassed the exception.
> The problem I have now is when trying to throw the subclassed exception.
> I am using the rulecatch action to percolate the RecognitionException up
> to the calling code, but, copying the code from the book that throws
> RecognitionExceptions, I don't know how to throw any other exceptions.
> I have :
> @rulecatch {
>   catch (RecognitionException e) {
>     throw e;
>   }
> }
>
> I have declared the following exception:
>
> import org.antlr.runtime.IntStream;
> import antlr.RecognitionException ;
>
> public class ANTLRInvalidYear extends RecognitionException {
>
>     protected String msg;
>
>     public ANTLRInvalidYear(String msg, IntStream input) {
>         super(input.toString());
>         this.msg = msg;
>     }
>
>     public String getMsg() {
>         return this.msg;
>     }
>
> I can catch this exception in my tree rules, but then am unable to throw
> it because the throw from the rulecatch seems restricted to the
> RecognitionException type.
> I may be missing something obvious. Any assistance is much appreciated.
>
> Thank you,
> Ted
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/4ae31429/attachment.html 

From pink at odahoda.de  Wed Oct  3 10:32:22 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Wed, 03 Oct 2007 19:32:22 +0200
Subject: [antlr-interest] Unable to omit comment generation in target
	file
References: <721D9EC104550F498E418BAC4525F1B9052D10BB@pgsmsx413.gar.corp.intel.com>
Message-ID: <fe0jn6$k27$1@sea.gmane.org>

Hi,

Goh, Huan Yong wrote:
> I can't find a way to omit comment generation in targeted file (C#) for
> ANTRL 3.0.X. I tried to set "genHashLines=false" in OPTION block but it
> doesn't work. As far as I know this keyword is no longer supported in
> ANTRL 3.0.X, so I wonder if there any alternative way for this.
>  
> The reason of doing this is I don't want my target file be modified due
> to the timestamp changed, or file location changed.
>  
> Appreciate if someone can help on this :>

You could postprocess the generated files using a sed oneliner or whatever.
Or you could use your own version of the codegen template with

// $ANTLR <ANTLRVersion> <fileName> <generatedTimestamp>

changed

// $ANTLR <ANTLRVersion> <fileName>


But you will probably stumble upon another problem, because the output will
still not be deterministic. Some lists are probably generated from
hashtables or some other data structure without an explicit order of items,
so the items jump around without changing the semantics. At least this
happened once to me...

HTH



From pink at odahoda.de  Wed Oct  3 10:42:48 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Wed, 03 Oct 2007 19:42:48 +0200
Subject: [antlr-interest] parsing huge files
References: <3b19324d0710030905i390c990co564c46f31ec8a9f@mail.gmail.com>
Message-ID: <fe0kaq$k27$2@sea.gmane.org>

Hi,

cimbroken wrote:

> I'm trying to use ANTLR for a task that I've done till now with perl
> regexp: parse huge log files.
> My primary goal is to program parsers in a more declarative fashion, of
> course, instead of writing by hand tons of regexp, while<> cycles and
> if-elsif statements for every different log type.
> 
> I think my problem is ANTLR's CommonTokenStream, because in method
> fillBuffer() tries to buffer *all* tokens from the Lexer while my needs
> are to parse one log record at a time, discard old tokens, read a bunch of
> new tokens (log files are repetitive and made up of independent records)
> and go on like this.
> Instead, when the magnitude of input files is Gigabytes or more, such
> stream fills up memory even before the Parser starts doing its work!
> 
> I'm not a parsing neither ANTLR expert, so I'm asking some advice about
> changing this behaviour (or at least someone who says: "don't use antlr
> for this!"). Is it possible to do the trick at grammar level, or must I
> subclass CommonTokenStream or ANTLRInputStream, or... ?

You can write your own version of the various streams that consume
characters, tokens on demand in contrast to the current implementation. I
could offer you an implementation of a token stream in Python - this has
been raised before, you may find more pointers in the list archives or the
wiki.

The second point is about discarding old tokens. It should be possible to
call a method from the parser at the end of a 'record', which instructs the
token stream to flush all consumed tokens - that should be pretty save and
straight forward. You may even flush the tokens from the token stream's
buffer on consume(), but there may be circumtances when a negative
lookahead is needed - can't tell of the head...

Well, that's the generic approach and if you can come up with a solution,
feel free to post it to the wiki ;)

It could be much easier, if you can easily split the input into records
(e.g. if record == line) and then feed one record into the parser at a time
and reset it afterwards.


HTH


From antlr at mirality.co.nz  Wed Oct  3 11:42:25 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 04 Oct 2007 07:42:25 +1300
Subject: [antlr-interest] 2 C-target questions
In-Reply-To: <47038F65.7040702@gmx.de>
References: <000501c8059e$ec660620$c5321260$@com>
	<20071003100157.D46EB11EAE0@www.antlr.org>
	<47038F65.7040702@gmx.de>
Message-ID: <20071003184223.88F4411EAE8@www.antlr.org>

At 01:47 4/10/2007, Johannes Luber wrote:
 >Gavin Lambert wrote:
 >> Just use $myToken.text.  The codegen should translate that 
into
 >> the appropriate bit of code no matter what target language
 >> you're using.
 >>
 >That's not true for at least the C# target. I've wrote about it 
on
 >the appropriate wiki page.

Wouldn't that be a bug in the C# target codegen, then?  It ought 
to be able to translate $x.text into tokenVariable.Text 
automatically, thereby making it easier for people to switch 
target languages.


From jaluber at gmx.de  Wed Oct  3 14:33:47 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 03 Oct 2007 23:33:47 +0200
Subject: [antlr-interest] 2 C-target questions
In-Reply-To: <20071003184222.11585gmx1@mx085.gmx.net>
References: <000501c8059e$ec660620$c5321260$@com>
	<20071003100157.D46EB11EAE0@www.antlr.org>
	<47038F65.7040702@gmx.de> <20071003184222.11585gmx1@mx085.gmx.net>
Message-ID: <47040ABB.7080704@gmx.de>

Gavin Lambert wrote:
> At 01:47 4/10/2007, Johannes Luber wrote:
>>Gavin Lambert wrote:
>>> Just use $myToken.text.  The codegen should translate that into
>>> the appropriate bit of code no matter what target language
>>> you're using.
>>>
>>That's not true for at least the C# target. I've wrote about it on
>>the appropriate wiki page.
> 
> Wouldn't that be a bug in the C# target codegen, then?  It ought to be
> able to translate $x.text into tokenVariable.Text automatically, thereby
> making it easier for people to switch target languages.
> 
True, but I thought that was to mimic the C# syntax more closely. I
suppose Terence has the say in this matter.

Best regards,
Johannes Luber

From open.zone at virgin.net  Wed Oct  3 14:34:28 2007
From: open.zone at virgin.net (Micheal J)
Date: Wed, 3 Oct 2007 22:34:28 +0100
Subject: [antlr-interest] 2 C-target questions
In-Reply-To: <20071003184223.88F4411EAE8@www.antlr.org>
Message-ID: <001301c80605$2eb70a90$0400a8c0@hercules>

Hi,

>  >Gavin Lambert wrote:
>  >> Just use $myToken.text.  The codegen should translate that 
> into
>  >> the appropriate bit of code no matter what target 
> language  >> you're using.  >>  >That's not true for at least 
> the C# target. I've wrote about it 
> on
>  >the appropriate wiki page.
> 
> Wouldn't that be a bug in the C# target codegen, then?  It ought 
> to be able to translate $x.text into tokenVariable.Text 
> automatically, thereby making it easier for people to switch 
> target languages.

Perhaps. The 'island-grammar' and 'LL-star' examples in examples-v3
certainly use it (just grep'd the sources). I'm pretty certain that the tool
rather than a target is responsible for it (i.e. '$x.text').

Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited.


From mark at ociweb.com  Wed Oct  3 14:38:59 2007
From: mark at ociweb.com (Mark Volkmann)
Date: Wed, 3 Oct 2007 16:38:59 -0500
Subject: [antlr-interest] Java package in generated code
Message-ID: <B63F7DCF-92BB-4122-9920-BA54AA8418E1@ociweb.com>

When I generate Java code from a grammar that has "output = AST", the  
generated Lexer class isn't in a package.
Is there a way I can tell ANTLR to put it in a specific package?

---
Mark Volkmann


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/78c8f365/attachment.html 

From jaluber at gmx.de  Wed Oct  3 14:46:53 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 03 Oct 2007 23:46:53 +0200
Subject: [antlr-interest] Stream rewrite bug in the C# target?
Message-ID: <47040DCD.8040702@gmx.de>

Hi,

in the attached grammar I have the following rule:

rule
	:	DOC_COMMENT?
		f=(	PROTECTED
		|	PUBLIC
		|	PRIVATE
		|	FRAGMENT
		)?
		ruleName=id
		'!'?
		( arg=ARG_ACTION )?
		( 'returns' rt=ARG_ACTION  )?
		throwsSpec?
		optionsSpec?
		ruleScopeSpec?
		ruleAction*
		':'
		altList
		';'
		exceptionGroup?
	    -> ^( RULE $f? $ruleName altList EOR["<end-of-rule>"])
// I'm only interested in the name and the alternatives
	;

As you can see I want to know, if a particular ANTLR rule is a fragment
rule. The generated code consumes the FRAGMENT token, but fails to
include it into the rewrite stream. The code snippet

 // ANTLR3ToRelaxNG.g:191:17: ( $f)?
 if ( stream_f.HasNext() )
 {
     adaptor.AddChild(root_1, stream_f.Next());
 }

won't be executed as stream_f is empty. So before I dig down into the
sources, it would be nice to know if the error occurs for the Java
target, too.

Best regards,
Johannes Luber

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: ANTLR3ToRelaxNG.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071003/d2974d38/attachment.pl 

From jaluber at gmx.de  Wed Oct  3 15:41:34 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 04 Oct 2007 00:41:34 +0200
Subject: [antlr-interest] Using JFlex with Antlr
In-Reply-To: <47041884.1060307@gmail.com>
References: <4703A9D0.80102@gmail.com> <4703BC0F.5090202@gmx.de>
	<47041884.1060307@gmail.com>
Message-ID: <47041A9E.1030907@gmx.de>

Andreas Ravnestad wrote:
> Hi Johannes,
> 
> I ran into problems with \u10000 and above. Perhaps this has been solved
> now? I am sorry for my unfortunate phrasing, I rather meant that the
> support is lacking, in some ways :)
> 
> -Andreas
> 

That's a problem with the unicode handling with Java itself primarily,
and only secondly with ANTLR. Java uses internly UTF-16 and until 1.5 it
 couldn't even use the extended character set. AFAIK, Java still hasn't
an equivalent to the C# construct '\U00010000', so you have to create
the surrogate pair presentation yourself (that is described in the FAQ
on the Unicode webpage). I also regret that ANTLR doesn't let the users
circumvent this step for now - would be really useful.

Best regards,
Johannes Luber

From Austin_Hastings at Yahoo.com  Wed Oct  3 19:25:54 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 03 Oct 2007 22:25:54 -0400
Subject: [antlr-interest] Java package in generated code
In-Reply-To: <B63F7DCF-92BB-4122-9920-BA54AA8418E1@ociweb.com>
References: <B63F7DCF-92BB-4122-9920-BA54AA8418E1@ociweb.com>
Message-ID: <47044F32.8050705@Yahoo.com>

Use

@header { ... }

for parser header info (package) and use

@lexer::header { ... }

for lexer info.


See:  http://www.antlr.org/wiki/pages/viewpage.action?pageId=819257


=Austin


Mark Volkmann wrote:
> When I generate Java code from a grammar that has "output = AST", the 
> generated Lexer class isn't in a package.
> Is there a way I can tell ANTLR to put it in a specific package?
>


From antlr at mirality.co.nz  Thu Oct  4 01:07:50 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 04 Oct 2007 21:07:50 +1300
Subject: [antlr-interest] 2 C-target questions
In-Reply-To: <000301c80603$4e5e4a90$eb1adfb0$@com>
References: <000501c8059e$ec660620$c5321260$@com>
	<23AB3A51D57F4228BA5E15BF9607DEE7@ISDlan.local>
	<000301c80603$4e5e4a90$eb1adfb0$@com>
Message-ID: <20071004080753.0E32D11EB23@www.antlr.org>

At 10:21 4/10/2007, Corno Schraverus wrote:
 >I played a bit with @decl and I found out that it only works at 
the
 >root level of a rule. Is there a way to declare variables at a
 >deeper level?

I don't think so, but if you need to do that sort of thing you can 
usually just factor it out into a subrule.  (If you can't factor 
it out into a subrule, then your variable may not be as local as 
you thought, and you might as well just declare it at the 
top.  This is C, after all -- while it permits declarations at the 
start of any block it's most common to only declare variables at 
the function entrypoint.


From antlr at mirality.co.nz  Thu Oct  4 01:11:25 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 04 Oct 2007 21:11:25 +1300
Subject: [antlr-interest] Java package in generated code
In-Reply-To: <47044F32.8050705@Yahoo.com>
References: <B63F7DCF-92BB-4122-9920-BA54AA8418E1@ociweb.com>
	<47044F32.8050705@Yahoo.com>
Message-ID: <20071004081122.ABBC111EBAC@www.antlr.org>

At 15:25 4/10/2007, Austin Hastings wrote:
 >Use
 >
 >@header { ... }
 >
 >for parser header info (package) and use
 >
 >@lexer::header { ... }
 >
 >for lexer info.

Or for uniformity you can use @parser::header for the first one.

(It's always irritated me that the unscoped one is 
parser-only.  It really ought to apply to both unless specifically 
told otherwise, especially since there already is something that 
means 'parser-only'.)


From Iain.Young at microfocus.com  Thu Oct  4 02:01:47 2007
From: Iain.Young at microfocus.com (Iain Young)
Date: Thu, 4 Oct 2007 10:01:47 +0100
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
Message-ID: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>

Hi folks,

I've just been creating some parsers using Antlr3 and the c target. It
all worked fine with vs2005, but would not compile with vc6. After a bit
of investigation I found I had to make a small change to one of the
antlr header files. 

In the file antlr3defs.h, I had to change the line (110):

        #define	ANTLR3_UINT64_LIT(lit)	    lit##ULL

So that it instead looked like this...

        #if _MSC_VER >= 1400
        #define  ANTLR3_UINT64_LIT(lit)     lit##ULL
        #else
        #define  ANTLR3_UINT64_LIT(lit)     lit##ui64
        #endif // _MSC_VER >= 1400

Now that I've modified the antlr sources, I guess this change ought to
make it into the official source stream as a patch of some sort, but I
can't see any information on the antlr website on how to do this,
(although I might be missing it - it's early and I haven't had enough
coffee yet). Does anyone know what I need to do with this fix?

Thanks,
Iain

Micro Focus Limited is registered in England and Wales. Registered number: 01504593
Registered office: The Lawn, 22-30 Old Bath Road Newbury, Berkshire, RG14 1QN, UK

From andreas.ravnestad at gmail.com  Thu Oct  4 04:03:00 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Thu, 4 Oct 2007 13:03:00 +0200
Subject: [antlr-interest] Using JFlex with Antlr
In-Reply-To: <47041A9E.1030907@gmx.de>
References: <4703A9D0.80102@gmail.com> <4703BC0F.5090202@gmx.de>
	<47041884.1060307@gmail.com> <47041A9E.1030907@gmx.de>
Message-ID: <db3e39e10710040403n3101631dj58c39c2317fdf25c@mail.gmail.com>

On 10/4/07, Johannes Luber <jaluber at gmx.de> wrote:
> Andreas Ravnestad wrote:
> > Hi Johannes,
> >
> > I ran into problems with \u10000 and above. Perhaps this has been solved
> > now? I am sorry for my unfortunate phrasing, I rather meant that the
> > support is lacking, in some ways :)
> >
> > -Andreas
> >
>
> That's a problem with the unicode handling with Java itself primarily,
> and only secondly with ANTLR. Java uses internly UTF-16 and until 1.5 it
>  couldn't even use the extended character set. AFAIK, Java still hasn't
> an equivalent to the C# construct '\U00010000', so you have to create
> the surrogate pair presentation yourself (that is described in the FAQ
> on the Unicode webpage). I also regret that ANTLR doesn't let the users
> circumvent this step for now - would be really useful.
>
> Best regards,
> Johannes Luber
>


Hi again!

I'm glad that we have sorted this out then :)

Now, I am still interested in how to couple JFlex with ANTLR. Anyone
who can share information about this?

-Andreas

From mazzucco at iiasa.ac.at  Thu Oct  4 04:59:29 2007
From: mazzucco at iiasa.ac.at (Rupert Mazzucco)
Date: Thu, 4 Oct 2007 13:59:29 +0200
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
In-Reply-To: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>
References: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>
Message-ID: <20071004135929.3f842e7b.mazzucco@iiasa.ac.at>


> I've just been creating some parsers using Antlr3 and the c target. It
> all worked fine with vs2005, but would not compile with vc6. After a bit
> of investigation I found I had to make a small change to one of the
> antlr header files. 
> 
> In the file antlr3defs.h, I had to change the line (110):
> 
>         #define	ANTLR3_UINT64_LIT(lit)	    lit##ULL
> 
> So that it instead looked like this...
> 
>         #if _MSC_VER >= 1400
>         #define  ANTLR3_UINT64_LIT(lit)     lit##ULL
>         #else
>         #define  ANTLR3_UINT64_LIT(lit)     lit##ui64
>         #endif // _MSC_VER >= 1400
> 
> Now that I've modified the antlr sources, I guess this change ought to
> make it into the official source stream as a patch of some sort, but I

Your fix looks like it will break things for non VC compilers.  (Also I have to
wonder how many #ifdefs it is worth to support a nearly ten years old compiler.)
-- 
Rupert Mazzucco         <mazzucco at iiasa.ac.at>
Research Scholar, Evolution and Ecology Program
IIASA - Institute for Applied Systems Analysis
Schlossplatz 1, 2361 Laxenburg, Austria
Phone: +43 2236 807 522   Fax: +43 2236 713 13

From Iain.Young at microfocus.com  Thu Oct  4 05:07:26 2007
From: Iain.Young at microfocus.com (Iain Young)
Date: Thu, 4 Oct 2007 13:07:26 +0100
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
In-Reply-To: <20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
References: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>
	<20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
Message-ID: <5F229A749060AE41AF846EC07FE6666C093D4BF5@nwb-exchange.microfocus.com>

That's entirely possible, (I hadn't considered non-VC compilers).
Unfortunately, we have to keep supporting VC6 for now. I can include
this fix in our stuff and link with a slightly modified library etc, but
is there anything in the terms & conditions which says the fix has to go
into the source stream? I don't want to be breaking any license
agreements by doing this...


> I've just been creating some parsers using Antlr3 and the c target. It
> all worked fine with vs2005, but would not compile with vc6. After a
bit
> of investigation I found I had to make a small change to one of the
> antlr header files. 
> 
> In the file antlr3defs.h, I had to change the line (110):
> 
>         #define	ANTLR3_UINT64_LIT(lit)	    lit##ULL
> 
> So that it instead looked like this...
> 
>         #if _MSC_VER >= 1400
>         #define  ANTLR3_UINT64_LIT(lit)     lit##ULL
>         #else
>         #define  ANTLR3_UINT64_LIT(lit)     lit##ui64
>         #endif // _MSC_VER >= 1400
> 
> Now that I've modified the antlr sources, I guess this change ought to
> make it into the official source stream as a patch of some sort, but I

Your fix looks like it will break things for non VC compilers.  (Also I
have to
wonder how many #ifdefs it is worth to support a nearly ten years old
compiler.)
-- 
Rupert Mazzucco         <mazzucco at iiasa.ac.at>
Research Scholar, Evolution and Ecology Program
IIASA - Institute for Applied Systems Analysis
Schlossplatz 1, 2361 Laxenburg, Austria
Phone: +43 2236 807 522   Fax: +43 2236 713 13


This message has been scanned for viruses by MailController -
www.MailController.altohiway.com

From nroperia at gmail.com  Thu Oct  4 09:42:00 2007
From: nroperia at gmail.com (naveen roperia)
Date: Thu, 4 Oct 2007 09:42:00 -0700
Subject: [antlr-interest] email
Message-ID: <1f26641b0710040942w4bf596a3j7201415dfdb05ad0@mail.gmail.com>

nroperia at gamil.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071004/dd5e0097/attachment.html 

From mark at ociweb.com  Thu Oct  4 11:10:38 2007
From: mark at ociweb.com (Mark Volkmann)
Date: Thu, 4 Oct 2007 13:10:38 -0500
Subject: [antlr-interest] token file directory
Message-ID: <F8DA3205-1078-4BFC-8FB6-2B55D81326CA@ociweb.com>

I'm following along with the example in Chapter 3 of "The Definitive  
ANTLR Reference".
On page 64 it shows using tokenVocab to specify the name of the  
tokens file ("Expr") to be used by the tree grammar ("Eval.g").
When I generate that from my parser grammar ("Expr.g"), I use the "- 
o" option to put all the generated files in a subdirectory named "gen".
When I try to process the tree grammar, it tries to find the tokens  
file in the current directory.
How can I tell it to look in the "gen" directory?

---
Mark Volkmann


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071004/3c620a58/attachment.html 

From jimi at temporal-wave.com  Thu Oct  4 11:13:55 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 4 Oct 2007 11:13:55 -0700
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
In-Reply-To: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>
References: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>
Message-ID: <BAY118-DS14AEF1B6601DA56334F8586A80@phx.gbl>

I will add this to the source :-) Thanks for the feedback.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Iain Young
> Sent: Thursday, October 04, 2007 2:02 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
> 
> Hi folks,
> 
> I've just been creating some parsers using Antlr3 and the c target. It
> all worked fine with vs2005, but would not compile with vc6. After a
> bit
> of investigation I found I had to make a small change to one of the
> antlr header files.
> 
> In the file antlr3defs.h, I had to change the line (110):
> 
>         #define	ANTLR3_UINT64_LIT(lit)	    lit##ULL
> 
> So that it instead looked like this...
> 
>         #if _MSC_VER >= 1400
>         #define  ANTLR3_UINT64_LIT(lit)     lit##ULL
>         #else
>         #define  ANTLR3_UINT64_LIT(lit)     lit##ui64
>         #endif // _MSC_VER >= 1400
> 
> Now that I've modified the antlr sources, I guess this change ought to
> make it into the official source stream as a patch of some sort, but I
> can't see any information on the antlr website on how to do this,
> (although I might be missing it - it's early and I haven't had enough
> coffee yet). Does anyone know what I need to do with this fix?
> 
> Thanks,
> Iain
> 
> Micro Focus Limited is registered in England and Wales. Registered
> number: 01504593
> Registered office: The Lawn, 22-30 Old Bath Road Newbury, Berkshire,
> RG14 1QN, UK
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date:
> 10/3/2007 8:22 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date: 10/3/2007
8:22 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071004/5b5d5e81/attachment-0001.html 

From jimi at temporal-wave.com  Thu Oct  4 11:16:53 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 4 Oct 2007 11:16:53 -0700
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
In-Reply-To: <20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
References: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>
	<20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
Message-ID: <BAY118-DS28F79C54230F0C524D02286A80@phx.gbl>

I can protect this for the other compilers. I don?t really want to spend a
lot of effort on VC6 when VS2005 is what people "should" use, but I am
sensitive the issues that a lot of corporations don't move forward for all
sorts of reasons ranging from terrible code that only just compiles with
VC6, thru apathy, ineptitude and budgets. So if it is relatively easy to do,
then I will make small changes.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Rupert Mazzucco
> Sent: Thursday, October 04, 2007 4:59 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] ANTLR3 C target and Visual Studio 6
> 
> 
> > I've just been creating some parsers using Antlr3 and the c target.
> It
> > all worked fine with vs2005, but would not compile with vc6. After a
> bit
> > of investigation I found I had to make a small change to one of the
> > antlr header files.
> >
> > In the file antlr3defs.h, I had to change the line (110):
> >
> >         #define	ANTLR3_UINT64_LIT(lit)	    lit##ULL
> >
> > So that it instead looked like this...
> >
> >         #if _MSC_VER >= 1400
> >         #define  ANTLR3_UINT64_LIT(lit)     lit##ULL
> >         #else
> >         #define  ANTLR3_UINT64_LIT(lit)     lit##ui64
> >         #endif // _MSC_VER >= 1400
> >
> > Now that I've modified the antlr sources, I guess this change ought
> to
> > make it into the official source stream as a patch of some sort, but
> I
> 
> Your fix looks like it will break things for non VC compilers.  (Also I
> have to
> wonder how many #ifdefs it is worth to support a nearly ten years old
> compiler.)
> --
> Rupert Mazzucco         <mazzucco at iiasa.ac.at>
> Research Scholar, Evolution and Ecology Program
> IIASA - Institute for Applied Systems Analysis
> Schlossplatz 1, 2361 Laxenburg, Austria
> Phone: +43 2236 807 522   Fax: +43 2236 713 13
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date:
> 10/3/2007 8:22 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date: 10/3/2007
8:22 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071004/47e57f82/attachment.html 

From jimi at temporal-wave.com  Thu Oct  4 11:19:10 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 4 Oct 2007 11:19:10 -0700
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
In-Reply-To: <5F229A749060AE41AF846EC07FE6666C093D4BF5@nwb-exchange.microfocus.com>
References: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>	<20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
	<5F229A749060AE41AF846EC07FE6666C093D4BF5@nwb-exchange.microfocus.com>
Message-ID: <BAY118-DS2DE9E38316EB426B15A4B86A80@phx.gbl>

Iain,

You are free to do whatever you like including make derived versions. You
just need to retain the original credits really, but read the BSD license if
you are concerned about any modification. My personal view is that I put
this in the open source community to match Ter's 'engine' and you can do
with it what you will. Of course, if anyone wants to throw me a few bones in
the form of contracted paid for work, I am happy to oblige :-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Iain Young
> Sent: Thursday, October 04, 2007 5:07 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] ANTLR3 C target and Visual Studio 6
> 
> That's entirely possible, (I hadn't considered non-VC compilers).
> Unfortunately, we have to keep supporting VC6 for now. I can include
> this fix in our stuff and link with a slightly modified library etc,
> but
> is there anything in the terms & conditions which says the fix has to
> go
> into the source stream? I don't want to be breaking any license
> agreements by doing this...
> 
> 
> > I've just been creating some parsers using Antlr3 and the c target.
> It
> > all worked fine with vs2005, but would not compile with vc6. After a
> bit
> > of investigation I found I had to make a small change to one of the
> > antlr header files.
> >
> > In the file antlr3defs.h, I had to change the line (110):
> >
> >         #define	ANTLR3_UINT64_LIT(lit)	    lit##ULL
> >
> > So that it instead looked like this...
> >
> >         #if _MSC_VER >= 1400
> >         #define  ANTLR3_UINT64_LIT(lit)     lit##ULL
> >         #else
> >         #define  ANTLR3_UINT64_LIT(lit)     lit##ui64
> >         #endif // _MSC_VER >= 1400
> >
> > Now that I've modified the antlr sources, I guess this change ought
> to
> > make it into the official source stream as a patch of some sort, but
> I
> 
> Your fix looks like it will break things for non VC compilers.  (Also I
> have to
> wonder how many #ifdefs it is worth to support a nearly ten years old
> compiler.)
> --
> Rupert Mazzucco         <mazzucco at iiasa.ac.at>
> Research Scholar, Evolution and Ecology Program
> IIASA - Institute for Applied Systems Analysis
> Schlossplatz 1, 2361 Laxenburg, Austria
> Phone: +43 2236 807 522   Fax: +43 2236 713 13
> 
> 
> This message has been scanned for viruses by MailController -
> www.MailController.altohiway.com
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date:
> 10/3/2007 8:22 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date: 10/3/2007
8:22 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071004/8aeb415c/attachment.html 

From FranklinChen at cmu.edu  Thu Oct  4 11:41:28 2007
From: FranklinChen at cmu.edu (FranklinChen at cmu.edu)
Date: Thu, 4 Oct 2007 14:41:28 -0400
Subject: [antlr-interest] Using JFlex with Antlr
In-Reply-To: <mailman.7516.1191521691.2665.antlr-interest@antlr.org>
References: <mailman.7516.1191521691.2665.antlr-interest@antlr.org>
Message-ID: <18181.13272.16943.115863@swan.psy.cmu.edu>

> Now, I am still interested in how to couple JFlex with ANTLR. Anyone
> who can share information about this?
> 
> -Andreas

I am a happy user of JFlex with ANTLR 3.  What you need to do is to
make the interface of the JFlex-generated scanner compatible with what
ANTLR expects.  Here is how I do it in a file MyLexer.flex:

import org.antlr.runtime.*;

// To get ANTLR token types generated for parser.
import static mypackage.MyParser.*;

%%

%public
%class MyLexer
%implements TokenSource
%type Token
%unicode
%line
%column

%{
    public Token nextToken() {
        try {
            return yylex();
        }
        catch (java.io.IOException e) {
            System.err.println("shouldn't happen: " + e.getMessage());
            return Token.EOF_TOKEN;
        }
    }

    /** Turn 1-based to 0-based. */
    public void setLine(int line) {
        this.yyline = line-1;
    }

    public void setColumn(int column) {
        this.yycolumn = column;
    }

    public int getLine() {
        return this.yyline+1;
    }

    public int getColumn() {
        return this.yycolumn;
    }

    private Token newToken(int type, String text) {
        CommonToken token = new CommonToken(type, text);
        token.setLine(getLine());
        token.setCharPositionInLine(getColumn());
        return token;
    }

    private Token newToken(int type) {
        CommonToken token = new CommonToken(type, yytext());
        token.setLine(getLine());
        token.setCharPositionInLine(getColumn());
        return token;
    }
%}

%%

// ...actions... use newToken to return token

<<EOF>> { return newToken(EOF); }


Then in the driver in Java, just do the following:

MyLexer lexer = new MyLexer(reader);
CommonTokenStream tokenStream = new CommonTokenStream(lexer);
MyParser parser = new MyParser(tokenStream);

-- 
Franklin

From parrt at cs.usfca.edu  Thu Oct  4 13:50:59 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 4 Oct 2007 13:50:59 -0700
Subject: [antlr-interest] Using JFlex with Antlr
In-Reply-To: <18181.13272.16943.115863@swan.psy.cmu.edu>
References: <mailman.7516.1191521691.2665.antlr-interest@antlr.org>
	<18181.13272.16943.115863@swan.psy.cmu.edu>
Message-ID: <FC3F599C-25C2-42B6-8F30-470ECE60E35B@cs.usfca.edu>

Sounds like a good FAQ entry. Can you add to wiki?
Thanks,
Ter
On Oct 4, 2007, at 11:41 AM, FranklinChen at cmu.edu wrote:

>> Now, I am still interested in how to couple JFlex with ANTLR. Anyone
>> who can share information about this?
>>
>> -Andreas
>
> I am a happy user of JFlex with ANTLR 3.  What you need to do is to
> make the interface of the JFlex-generated scanner compatible with what
> ANTLR expects.  Here is how I do it in a file MyLexer.flex:
>
> import org.antlr.runtime.*;
>
> // To get ANTLR token types generated for parser.
> import static mypackage.MyParser.*;
>
> %%
>
> %public
> %class MyLexer
> %implements TokenSource
> %type Token
> %unicode
> %line
> %column
>
> %{
>     public Token nextToken() {
>         try {
>             return yylex();
>         }
>         catch (java.io.IOException e) {
>             System.err.println("shouldn't happen: " + e.getMessage());
>             return Token.EOF_TOKEN;
>         }
>     }
>
>     /** Turn 1-based to 0-based. */
>     public void setLine(int line) {
>         this.yyline = line-1;
>     }
>
>     public void setColumn(int column) {
>         this.yycolumn = column;
>     }
>
>     public int getLine() {
>         return this.yyline+1;
>     }
>
>     public int getColumn() {
>         return this.yycolumn;
>     }
>
>     private Token newToken(int type, String text) {
>         CommonToken token = new CommonToken(type, text);
>         token.setLine(getLine());
>         token.setCharPositionInLine(getColumn());
>         return token;
>     }
>
>     private Token newToken(int type) {
>         CommonToken token = new CommonToken(type, yytext());
>         token.setLine(getLine());
>         token.setCharPositionInLine(getColumn());
>         return token;
>     }
> %}
>
> %%
>
> // ...actions... use newToken to return token
>
> <<EOF>> { return newToken(EOF); }
>
>
> Then in the driver in Java, just do the following:
>
> MyLexer lexer = new MyLexer(reader);
> CommonTokenStream tokenStream = new CommonTokenStream(lexer);
> MyParser parser = new MyParser(tokenStream);
>
> -- 
> Franklin


From robfinneran at gmail.com  Thu Oct  4 14:41:45 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Thu, 4 Oct 2007 14:41:45 -0700
Subject: [antlr-interest] C style include lexer/parser problem
Message-ID: <a7e86e130710041441w1d5617dfje6d99417df64cd45@mail.gmail.com>

Hello fellow ANTLR  fans!

I have modified someone's code example to enhance the C-style include
file example to support reading all include files in a directory in a
similar fashion to C# "using" statements.
However, this enhancement probably has nothing to do with the problem.

The lexer USING rule seems to recursively walk through the files using
a stack mechanism.
The problem is that the parser only SEEMS to see the tokens from the
very first include (or using statement) file. It never SEEMS to fully
processes the remainder of the original file. The lexer rule however
does actually process all of the files. The real problem is that the
AST tree that the PARSER builds only builds the tree for the first
included file.

I tried using input.mark() to save the state info but that version did
not work either.

Could the problem be caused because I need to separate the parser from
the lexer? I'm just  using the default combined lexer/parser but the
code here calls super.nextToken().

Is there a way for me to see the token stream? I have also tried input
= ss.input;

Thanks!

@lexer::members {
	class SaveStruct {
		public CharStream input;
		public String fileName;
        public int tokenStartCharIndex, tokenStartLine,
tokenStartCharPositionInLine;
     }

	Stack<SaveStruct> includes = new Stack<SaveStruct>();
	String currentFile = "default";
	List usingNamespaces = new ArrayList();
	// We should override this method for handling EOF of included file
	public Token nextToken() {
		Token token = super.nextToken();

		if(token==Token.EOF_TOKEN && !includes.empty()) {
			// We've got EOF and have non empty stack.
			SaveStruct ss = includes.pop();
			System.err.println("pop: " + ss.fileName);
			currentFile = ss.fileName;
			setCharStream(ss.input);
			tokenStartCharIndex = ss.tokenStartCharIndex;
            tokenStartLine = ss.tokenStartLine;
            tokenStartCharPositionInLine = ss.tokenStartCharPositionInLine;
			token = super.nextToken();
		}

		// Skip first token after switching on another input.
		if(((CommonToken)token).getStartIndex() < 0) {
			token = super.nextToken();
		}
		return token;
	}
}

USING
	: 'using' WS f+=ID ('.' f+=ID)* {
		StringBuffer sb = new StringBuffer();
		sb.append(Test.projectBaseDir);
		java.util.Iterator i = $f.iterator();
		while (i.hasNext()) {
			Token t = (Token)i.next();
			sb.append("\\");
			sb.append(t.getText());	
		}
		String name = sb.toString();
		if (!usingNamespaces.contains(name)) {
		usingNamespaces.add(name);
		try {
			String fullName = null;
			System.err.println("namespace: " + name);
			java.io.File namespaceDir = new java.io.File(name);
			String[] files = namespaceDir.list();
				for (int j = 0; j < files.length; j++) {
					fullName = name + "\\" + files[j];
					// save current lexer's state
					SaveStruct ss = new SaveStruct();
					ss.input = input;
					ss.fileName = currentFile;
					ss.tokenStartCharIndex = tokenStartCharIndex;
					ss.tokenStartLine = tokenStartLine;
					ss.tokenStartCharPositionInLine = tokenStartCharPositionInLine; 					
					includes.push(ss);
					System.err.println("Push: " + ss.fileName);

					// switch on new input stream
					setCharStream(new ANTLRFileStream(fullName));
					currentFile = fullName;
					System.err.println("Current: " + currentFile);
					reset();
				}
       } catch(Exception fnf) { throw new Error("Cannot open file " + name); }
	   }
     }
     ;

From OJAY78 at gmx.de  Fri Oct  5 01:19:08 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Fri, 05 Oct 2007 10:19:08 +0200
Subject: [antlr-interest] problem with parsing valid input
Message-ID: <20071005081908.44610@gmx.net>

Hallo @ all,

I working on a small domain specific language with antlr but now I stuck and do not know how I can solve this problem. 
I defined the lexer tokens and my grammar without any action because I want to test first if any input is valid, there I stuck now.

First you have to know what I want to have.
My DSL should handle boolean expression which are combined with and, or , not and xor.
The funcions should have a given structure

 ' '* COMMAND_TYPE ' '* '(' ' '* PARAMETER_LIST ' '* ')'
 
for the beginning I have three command types which I want to implement but I think that 
the language is easy extendablewith this structure . The language should be able to
answer such a request 

not(IsSet(value,Ftddmmyy) and not IsSet(value,RaftInternal.2))

but there I get a EarlyException.

So I tried the following input 
IsSet(value,Ftddmmyy)
with the interpreter of ANTLRWorks. When I started the interpreter at the prog rule it returns a FailedPredicateException only when
I start the interpreter at the rule primaryexception or function it will show the correct tree.

On the rule term it returns the FailedPrediacteException(term,(synpred5)?)

Does anyone see where my problem is?
I am thankful for every advise

Here is my grammar:

grammar FEL;
options {
 backtrack=true;
 memooize=true;
 greedy=false;
}

@header {
import java.util.HashMap;
import de.srs.pen.dao.base.*;
import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;
import de.srs.pen.dao.DAOSessionFactory;
import org.apache.log4j.Logger;

}

@members {
HashMap memory = new HashMap();
private static Logger log = Logger.getLogger(FELParser.class);
private FormInstance formInstance;


public void setInstance(FormInstance instance) {
	formInstance = instance;
}
}
@rulecatch{
catch (RecognitionException er){
	throw er;
}
}

//lexer
COMMAND_TYPE 
	:	ISSET | ISEQUAL | ISSMALLER
	;

PARAMETER_LIST_SEP_CHAR
	:	' '
	;
	
PARAMETER_SEP_CHAR
	:	','
	;

ALPHA_NO_SPACE_NO_QUOT
	:	CHAR+
	;

ATTRIB_DESC_TYPE 
	:	'instattrib' | 'formattrib'
	;

INSTANCE_ATTRIBUTE
	:	'instanceId' |'instanceKey' | 'firstpenId' | 'lastpenId' | 'lastUpdate' | 'started'
	;

FORM_ATTRIBUTE
	:	'formId' |'formKey' | 'lastUpdate'
	;

META_ATTRIBUTE
	:	'date' | 'datetime'
	;

ISSET:		'IsSet';
ISEQUAL	:	'IsEqual';
ISSMALLER:	'IsSmaller';		

AND	:	('and');
OR	:	('or');
XOR	:	('xor');
NOT	:	('not');	

FLOAT
	:	('0'..'9')+ '.' ('0'..'9')+
	;
INTEGER
	:	('0'..'9')+ 
	;
CHAR	:	('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'.'|','|'+'|'-'|'#'|'@');

WS	:	(' '|'\t'|'\n'|'\r')+ {skip();}
	;

	
COMMAND
	:	' '* COMMAND_TYPE ' '* '(' ' '* PARAMETER_LIST ' '* ')'
	;

PARAMETER_LIST 
	:	PARAMETER (' '+ PARAMETER)* ' '*
	;
	
PARAMETER 
	:	PARAMETER_DESC | CONST_DESC
	;

PARAMETER_DESC 
	: 	VALUE_DESC | ATTRIB_DESC | INSTANCE_DESC | FORM_DESC | META_DESC 
	;
	
VALUE_DESC 
	:	VALUE_CMD PARAMETER_SEP_CHAR VALUE_NAME
	;

VALUE_CMD
	:	'value'
	;

VALUE_NAME
	:	ALPHA_NO_SPACE_NO_QUOT | STRING_CONST;


ATTRIB_DESC
	:	ATTRIB_DESC_TYPE PARAMETER_SEP_CHAR ATTRIB_DESC_PARAM
	;
	
ATTRIB_DESC_PARAM
	:	MODULE_ID'#'ATTRIB_NAME
	;

MODULE_ID
	:	MODULE_NAME_CHARS | STRING_CONST
	;

ATTRIB_NAME
	:	ATTRIB_NAME_CHARS | STRING_CONST
	;

MODULE_NAME_CHARS
	:	('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '-' )+
	;

ATTRIB_NAME_CHARS
	:	MODULE_NAME_CHARS
	;

INSTANCE_DESC 
	:	'instance' PARAMETER_SEP_CHAR INSTANCE_ATTRIBUTE
	;


FORM_DESC 
	:	'form' PARAMETER_SEP_CHAR FORM_ATTRIBUTE
	;


META_DESC 
	:	'meta' PARAMETER_SEP_CHAR META_ATTRIBUTE
	;

	
CONST_DESC 
	:	STRING_CONST | NUMERIC_CONST ;

STRING_CONST
	:	'"' ( CHAR | '\\'('"' | '\\'))* '"'
	;

NUMERIC_CONST
	:	INTEGER | FLOAT
	;

//TODO f?r jede Aktion die Java Actions definieren
prog 	
	: stat+
	;

stat
	: expr ( OR expr | XOR expr )*
	;
	
expr 	
	: term (AND term)*
	;

term 
	: primaryexpr
	 |NOT primaryexpr
	
	;
					
primaryexpr 
	:  '(' stat ')' |  function
	
	;

function 
	:	COMMAND
	;
-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kanns mit allen: http://www.gmx.net/de/go/multimessenger

From antlr at mirality.co.nz  Fri Oct  5 02:03:50 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 05 Oct 2007 22:03:50 +1300
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
In-Reply-To: <20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
References: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com>
	<20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
Message-ID: <20071005090356.739BB11E9F1@www.antlr.org>

At 00:59 5/10/2007, Rupert Mazzucco wrote:
 >Your fix looks like it will break things for non VC compilers.
 >(Also I have to wonder how many #ifdefs it is worth to support
 >a nearly ten years old compiler.)

Should be easy to fix.  This should work for everybody (at least 
provided the preprocessor short-circuits like it's supposed to):

#if !defined(_MSC_VER) || _MSC_VER >= 1400
#define  ANTLR3_UINT64_LIT(lit)     lit##ULL
#else
#define  ANTLR3_UINT64_LIT(lit)     lit##ui64
#endif // _MSC_VER >= 1400


From Iain.Young at microfocus.com  Fri Oct  5 02:16:27 2007
From: Iain.Young at microfocus.com (Iain Young)
Date: Fri, 5 Oct 2007 10:16:27 +0100
Subject: [antlr-interest] ANTLR3 C target and Visual Studio 6
In-Reply-To: <BAY118-DS28F79C54230F0C524D02286A80@phx.gbl>
References: <5F229A749060AE41AF846EC07FE6666C093D49D2@nwb-exchange.microfocus.com><20071004135929.3f842e7b.mazzucco@iiasa.ac.at>
	<BAY118-DS28F79C54230F0C524D02286A80@phx.gbl>
Message-ID: <5F229A749060AE41AF846EC07FE6666C093D51D7@nwb-exchange.microfocus.com>

Thanks Jim,

 

Yep that's the problem. We have legacy code which is slowly getting
migrated to the newer compilers, but until it's all done (a slow
process, especially when you consider the potential side effects of
changing compilers) we have to keep stuff backwardly compatible for now.

 

Thanks for looking at the fix. Being small, it shouldn't cause too many
headaches J

 

Iain

 

> -----Original Message----- 
I can protect this for the other compilers. I don't really want to spend
a lot of effort on VC6 when VS2005 is what people "should" use, but I am
sensitive the issues that a lot of corporations don't move forward for
all sorts of reasons ranging from terrible code that only just compiles
with VC6, thru apathy, ineptitude and budgets. So if it is relatively
easy to do, then I will make small changes.

Jim 

> -----Original Message----- 
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Rupert Mazzucco 
> Sent: Thursday, October 04, 2007 4:59 AM 
> To: antlr-interest at antlr.org 
> Subject: Re: [antlr-interest] ANTLR3 C target and Visual Studio 6 
> 
> 
> > I've just been creating some parsers using Antlr3 and the c target. 
> It 
> > all worked fine with vs2005, but would not compile with vc6. After a

> bit 
> > of investigation I found I had to make a small change to one of the 
> > antlr header files. 
> > 
> > In the file antlr3defs.h, I had to change the line (110): 
> > 
> >         #define     ANTLR3_UINT64_LIT(lit)      lit##ULL 
> > 
> > So that it instead looked like this... 
> > 
> >         #if _MSC_VER >= 1400 
> >         #define  ANTLR3_UINT64_LIT(lit)     lit##ULL 
> >         #else 
> >         #define  ANTLR3_UINT64_LIT(lit)     lit##ui64 
> >         #endif // _MSC_VER >= 1400 
> > 
> > Now that I've modified the antlr sources, I guess this change ought 
> to 
> > make it into the official source stream as a patch of some sort, but

> I 
> 
> Your fix looks like it will break things for non VC compilers.  (Also
I 
> have to 
> wonder how many #ifdefs it is worth to support a nearly ten years old 
> compiler.) 
> -- 
> Rupert Mazzucco         <mazzucco at iiasa.ac.at> 
> Research Scholar, Evolution and Ecology Program 
> IIASA - Institute for Applied Systems Analysis 
> Schlossplatz 1, 2361 Laxenburg, Austria 
> Phone: +43 2236 807 522   Fax: +43 2236 713 13 
> 
> No virus found in this incoming message. 
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date: 
> 10/3/2007 8:22 PM 
> 

No virus found in this outgoing message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.0/1048 - Release Date:
10/3/2007 8:22 PM
  

 

Click here
<https://www.mailcontroller.altohiway.com/sr/a5mML5OkxnEBYm3Ke!KPw!MfgY4
!US1XRpinP3AOyCcqo!zlzLXtC3ou1nAW5+orbJBQ4UbBlvJYUCzfyxu38qwgxmpMDUxld1U
Y9J7nDS9yMlpOzfXC5vuZRJd+5xA2a++WqXXe6Om9pCSRrFgSBQQo9XwrEnFJdp1UiVDp3Jz
RmXxyNZFgLa1s3cYpWzek1ViRyzdvJqRsqakOzyG88vDa8+GUGke!>  to report this
email as spam.

This message has been scanned for viruses by MailController
<http://www.MailController.altohiway.com/> .

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071005/c6376810/attachment-0001.html 

From Austin_Hastings at Yahoo.com  Fri Oct  5 02:35:49 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Fri, 05 Oct 2007 05:35:49 -0400
Subject: [antlr-interest] problem with parsing valid input
In-Reply-To: <20071005081908.44610@gmx.net>
References: <20071005081908.44610@gmx.net>
Message-ID: <47060575.4090603@Yahoo.com>

Hello, Ojay,

This isn't directly about your question, but I noticed that you have a 
lot of tokens in your lexer section like:

META_ATTRIBUTE
	:	'date' | 'datetime'
	;


and

PARAMETER 
	:	PARAMETER_DESC | CONST_DESC
	;


Please consider that Antlr actually encodes the convention of Lexer tokens starting with an upper-case letter, while Parser productions start in lower-case.
 
This means that you will have a lexer building regular expressions for "PARAMETER_DESC" and for "PARAMETER". Obviously, one regex will be a superset of the other - either one could recognize the input.

For example, consider a regex like "a+" - match one or more 'a' letters. Then consider a regex like "(a|b)+" - match one or more of either a or b. Now it's obvious that aaaa will match "a+", but it will also match (a|b)+. 

So which regex "wins" - that is, what does the lexer do? Simply, it goes with the one that is first (highest) in the file. 
 
The effect may surprise you, as you will be getting tokens that are too high-level: if a "CONST" could be a character literal ('a') or a hex number (0xf00)
how will you find out it's value? You'll have to take the token text, and RE-PARSE it to find out what it is.
 
You'll be better served if you convert most of your "complex" TOKENS into parser productions:

FORM_ATTRIBUTE
	:	'formId' |'formKey' | 'lastUpdate'
	;

In this case, let the 'formId' strings be the tokens -- the parser is smart enough to create automatic tokens like T01, T02, T03 for those three keywords. Then you would use a parser production like 'form_attribute' (or 'formAttribute' - it just has to start lower-case) to include the choice of any of the tree in your grammar, rather than your lexer.
 
form_attribute
	: 'formId' | 'formKey' | 'lastUpdate'
 	;

which is equivalent internally to:

T01: 'formId';
T02: 'formKey';
T03: 'lastUpdate';

form_attribute: T01 | T02 | T03 ;


The difference is in the parse/syntax trees you can generate. With the first approach, you will get:

term: FORM_ATTRIBUTE		# gives a parse like ^(term FORM_ATTRIBUTE{text="formKey"})

term: form_attribute		# gives a parse like ^(term 'formId')

The difference is that with the FORM_ATTRIBUTE approach you don't actually know in the grammar what attribute you got - you'll have to write some code that checks $FORM_ATTRIBUTE.text to see which of the three strings it has in it. Whereas with the form_attribute version you can make decisions in the grammar based on knowing which keyword was used.



A good indicator is this:

PARAMETER_LIST 
	:	PARAMETER (' '+ PARAMETER)* ' '*

The fact that you have ' '+ and ' '* in there means you are having to fight against white space. That means you are trying to group several tokens into one super-token. Convert those things to parser productions by making them lower case, and the need to fight with white space will go away.

Try this:

arg_list:
	arg (',' arg)*
	;

commandType: 'IsSet' | 'IsEqual' | 'IsSmaller' | 'If' ;

command
	: commandType '(' arg_list? ')'
	;

You won't have to fight whitespace in there.
 
Alternatively, you might want to try:

arity1: arg ;
arity2: arg ',' arg ;
arity3: arg ',' arg ',' arg ;

command
	: 'IsSet'	'(' arity1 ')'
	| 'IsEqual'	'(' arity2 ')'
	| 'If'		'(' arity2 ')'
	| 'If'		'(' arity3 ')' 	// If-then-else version
	;

This approach spells out the expected number of arguments for each function. That makes the built-in functions a part of the syntax of the language, instead of being left to a later checking phase. The choice of where to put the check will depend on the language, but the example you have given points toward a "basic-like" language where functions are not definable by the user. If that is the case, then checking args in the parser may be a win. In a language like C or Java, where the user can add their own functions, you couldn't do that kind of checking. Then you would have to go with the first example (using an arg_list) and check the function args in your own code.

Good luck,

=Austin




From OJAY78 at gmx.de  Fri Oct  5 05:06:28 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Fri, 05 Oct 2007 14:06:28 +0200
Subject: [antlr-interest]  problem with parsing valid input
Message-ID: <20071005120628.295610@gmx.net>

Hi Austin,

thanks for your answer but I have now a few open questions :-)

As you can see in my grammar, my understanding was that I have to break the input code into a lot of tokens and that I can then use those tokens inside my parser grammar. But obviously this is a misunderstanding from my side. In my case it is better to make those descisions inside the parser grammer? But where do I have to do that because I als want that my functions can be combined with "and,xor,not,or" operator also the should be "(" and ")" allowed. Therefor I defined my parser grammer as you could saw in my last posting. Is this correct and where in my parsergrammer do I have to add my functions?

Thanks for you help
-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From mark at ociweb.com  Fri Oct  5 09:06:26 2007
From: mark at ociweb.com (Mark Volkmann)
Date: Fri, 5 Oct 2007 11:06:26 -0500
Subject: [antlr-interest] token file directory
Message-ID: <6FC1BCF0-D627-4FFA-9DBB-600FFA1F65F9@ociweb.com>

On 10/4/07, Mark Volkmann <mark at ociweb.com> wrote:
 >  I'm following along with the example in Chapter 3 of "The  
Definitive ANTLR
 > Reference".
 > On page 64 it shows using tokenVocab to specify the name of the  
tokens file
 > ("Expr") to be used by the tree grammar ("Eval.g").
 > When I generate that from my parser grammar ("Expr.g"), I use the  
"-o"
 > option to put all the generated files in a subdirectory named "gen".
 > When I try to process the tree grammar, it tries to find the  
tokens file in
 > the current directory.
 > How can I tell it to look in the "gen" directory?

I found the answer. I needed to include the command-line option "-lib  
gen" when running org.antlr.Tool.

-- 
R. Mark Volkmann
Object Computing, Inc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071005/08e85fb5/attachment.html 

From antlr at jazillian.com  Fri Oct  5 12:09:32 2007
From: antlr at jazillian.com (Andy Tripp)
Date: Fri, 05 Oct 2007 15:09:32 -0400
Subject: [antlr-interest] parsing empty function parameters
Message-ID: <47068BEC.5070400@jazillian.com>

Using ANTLR v3.0.1,
I'm trying to parse function parameters which can be empty, like this:
f(a, , c, d);
g(,,,,)

I have:
argList
   : argSpec (COMMA argSpec)*   
   ;

But then whenever I try to allow "argSpec" to have an empty alternative, 
ANTLR itself
produces an OutOfMemoryError.

Here's the original "argSpec" rule, which doesn't allow empty:

argSpec
   : argPassingType? argSpec2
   ;

I tried making the whole thing optional:
argSpec
   : (argPassingType? argSpec2)?
   ;

I tried a syntactic predicate:
argSpec
   : (','|')') =>                // if next token is comma or rparen, 
nothing to consume.
   | argPassingType? argSpec2
   ;

I tried a semantic predicate:
argSpec
   : {input.LT(1).getText().equals(",") || 
input.LT(1).getText().equals(")")}?
   | argPassingType? argSpec2
   ;

As I said, all these cause ANTLR to produce OutOfMemoryError, presumably
in an infinite loop matching this rule, but consuming no token.
Any suggestions?

From Alan_Rooks at amis.com  Fri Oct  5 13:02:12 2007
From: Alan_Rooks at amis.com (Alan Rooks)
Date: Fri, 05 Oct 2007 16:02:12 -0400
Subject: [antlr-interest] RewriteEmptyStreamException upon mismatch
Message-ID: <47069844.7148CC24@amis.com>

I'm getting a RewriteEmptyStreamException from ANTLR (3.0.1) at runtime,
which appears to be due to a combination of using rewrite rules to build the
AST, and exception handling due to mismatched input.

I think this must be a bug; does anyone have any ideas for a workaround that
will still allow me to use rewrite rules and handle syntax errors?

Here's a very simple grammar that demonstrates the problem:

===============================
grammar Test;

options {
    output = AST;
}

WS: (' '|'\t'|'\r'|'\n')+ { skip(); } ;

X: 'x' ;
PLUS: '+' ;

c: X ;
b: c -> ^( X c ) ;
a: b ( PLUS^ b )? ;
===============================

This should accept "x" or "x + x".  If I run TestParser.a() and give it just
"x +", then I get:

   BR.recoverFromMismatchedToken
   line 0:-1 mismatched input '<EOF>' expecting X
   Exception in thread "main" \
           org.antlr.runtime.tree.RewriteEmptyStreamException: rule c
        at org.antlr.runtime.tree.RewriteRuleElementStream._next( \
                                    RewriteRuleElementStream.java:158)
        at org.antlr.runtime.tree.RewriteRuleElementStream.next( \
                                    RewriteRuleElementStream.java:145)
        at TestParser.b(TestParser.java:128)
        at TestParser.a(TestParser.java:204)
        at RunTest.main(RunTest.java:10)

If I change the rewrite rule to other forms, such as "b: c -> ^( c ) ;" or
"b: c -> c ;", I still get the same error.  However, if I remove the rewrite
rule and just leave "b: c ;" - which I think is supposed to actually have
the same effect as the simpler rewrite rules above - then I don't get the
exception... ANTLR just prints the first two lines above, about the
mismatched input.

Can anyone confirm that getting the RewriteEmptyStreamException indicates a
bug?  Or tell me what I'm doing wrong?  I really need the generality of the
rewrite rules in my actual grammar, so ideas for workarounds would be
greatly appreciated.

Thanks in advance,

Alan

-------------------------
Alan Rooks
AMI Semiconductor Canada
http://www.amis.com/
-------------------------
AMI Semiconductor - "Silicon Solutions for the Real World"
NOTICE: 
This electronic message contains information that may be confidential or privileged. The information is intended for the use of the individual or entity named above. If you are not the intended recipient, please be aware that any disclosure, copying, distribution or use of the contents of this information is prohibited. If you received this electronic message in error, please notify the sender and delete the copy you received.


From sohail at taggedtype.net  Fri Oct  5 13:04:37 2007
From: sohail at taggedtype.net (Sohail Somani)
Date: Fri, 5 Oct 2007 15:04:37 -0500 (CDT)
Subject: [antlr-interest] parsing empty function parameters
Message-ID: <1191614677.v2.fusewebmail-240634@f>

Isn't this just:

argList : arg (COMMA arg?)* ;

----- Original Message -----
Subject: [antlr-interest] parsing empty function parameters
Date: Fri, October 5, 2007 12:09
From: "Andy Tripp" <antlr at jazillian.com>

> Using ANTLR v3.0.1,
> I'm trying to parse function parameters which can be empty, like this:
> f(a, , c, d);
> g(,,,,)
>
> I have:
> argList
>    : argSpec (COMMA argSpec)*
>    ;
>
> But then whenever I try to allow "argSpec" to have an empty alternative,
> ANTLR itself
> produces an OutOfMemoryError.
>
> Here's the original "argSpec" rule, which doesn't allow empty:
>
> argSpec
>    : argPassingType? argSpec2
>    ;
>
> I tried making the whole thing optional:
> argSpec
>    : (argPassingType? argSpec2)?
>    ;
>
> I tried a syntactic predicate:
> argSpec
>    : (','|')') =>                // if next token is comma or rparen,
> nothing to consume.
>    | argPassingType? argSpec2
>    ;
>
> I tried a semantic predicate:
> argSpec
>    : {input.LT(1).getText().equals(",") ||
> input.LT(1).getText().equals(")")}?
>    | argPassingType? argSpec2
>    ;
>
> As I said, all these cause ANTLR to produce OutOfMemoryError, presumably
> in an infinite loop matching this rule, but consuming no token.
> Any suggestions?
>
>
>

From bpierson at theglobal.net  Fri Oct  5 13:09:45 2007
From: bpierson at theglobal.net (Bruce Pierson)
Date: Fri, 5 Oct 2007 14:09:45 -0600
Subject: [antlr-interest] RewriteEmptyStreamException upon mismatch
In-Reply-To: <47069844.7148CC24@amis.com>
References: <47069844.7148CC24@amis.com>
Message-ID: <005c01c8078b$acb3c410$0201a8c0@BRUCE>

Alan:

Just hazarding a guess, but try { channel=HIDDEN; } rather than { skip(); }
on your WS declaration.

I think that's the new way to do it in 3.0...

--Bruce

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan Rooks
Sent: Friday, October 05, 2007 2:02 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] RewriteEmptyStreamException upon mismatch

I'm getting a RewriteEmptyStreamException from ANTLR (3.0.1) at runtime,
which appears to be due to a combination of using rewrite rules to build the
AST, and exception handling due to mismatched input.

I think this must be a bug; does anyone have any ideas for a workaround that
will still allow me to use rewrite rules and handle syntax errors?

Here's a very simple grammar that demonstrates the problem:

===============================
grammar Test;

options {
    output = AST;
}

WS: (' '|'\t'|'\r'|'\n')+ { skip(); } ;

X: 'x' ;
PLUS: '+' ;

c: X ;
b: c -> ^( X c ) ;
a: b ( PLUS^ b )? ;
===============================

This should accept "x" or "x + x".  If I run TestParser.a() and give it just
"x +", then I get:

   BR.recoverFromMismatchedToken
   line 0:-1 mismatched input '<EOF>' expecting X
   Exception in thread "main" \
           org.antlr.runtime.tree.RewriteEmptyStreamException: rule c
        at org.antlr.runtime.tree.RewriteRuleElementStream._next( \
                                    RewriteRuleElementStream.java:158)
        at org.antlr.runtime.tree.RewriteRuleElementStream.next( \
                                    RewriteRuleElementStream.java:145)
        at TestParser.b(TestParser.java:128)
        at TestParser.a(TestParser.java:204)
        at RunTest.main(RunTest.java:10)

If I change the rewrite rule to other forms, such as "b: c -> ^( c ) ;" or
"b: c -> c ;", I still get the same error.  However, if I remove the rewrite
rule and just leave "b: c ;" - which I think is supposed to actually have
the same effect as the simpler rewrite rules above - then I don't get the
exception... ANTLR just prints the first two lines above, about the
mismatched input.

Can anyone confirm that getting the RewriteEmptyStreamException indicates a
bug?  Or tell me what I'm doing wrong?  I really need the generality of the
rewrite rules in my actual grammar, so ideas for workarounds would be
greatly appreciated.

Thanks in advance,

Alan

-------------------------
Alan Rooks
AMI Semiconductor Canada
http://www.amis.com/
-------------------------
AMI Semiconductor - "Silicon Solutions for the Real World"
NOTICE: 
This electronic message contains information that may be confidential or
privileged. The information is intended for the use of the individual or
entity named above. If you are not the intended recipient, please be aware
that any disclosure, copying, distribution or use of the contents of this
information is prohibited. If you received this electronic message in error,
please notify the sender and delete the copy you received.



From jimi at temporal-wave.com  Fri Oct  5 13:23:58 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 5 Oct 2007 13:23:58 -0700
Subject: [antlr-interest] RewriteEmptyStreamException upon mismatch
In-Reply-To: <47069844.7148CC24@amis.com>
References: <47069844.7148CC24@amis.com>
Message-ID: <BAY130-DS2BF7C803BDB61173D503F86A90@phx.gbl>

The error message is correct of course, but if you still want to try and
produce a tree then what you need to do is detect that the subrule failed.
The easiest way to do this is to use:

c: X ;
b: myc=c 
	-> {$myc==null}? ^( ERROR )   // Or something sensible etc
	-> ^( X c)
;

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Rooks
> Sent: Friday, October 05, 2007 1:02 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] RewriteEmptyStreamException upon mismatch
> 
> I'm getting a RewriteEmptyStreamException from ANTLR (3.0.1) at
> runtime,
> which appears to be due to a combination of using rewrite rules to
> build the
> AST, and exception handling due to mismatched input.
> 
> I think this must be a bug; does anyone have any ideas for a workaround
> that
> will still allow me to use rewrite rules and handle syntax errors?
> 
> Here's a very simple grammar that demonstrates the problem:
> 
> ===============================
> grammar Test;
> 
> options {
>     output = AST;
> }
> 
> WS: (' '|'\t'|'\r'|'\n')+ { skip(); } ;
> 
> X: 'x' ;
> PLUS: '+' ;
> 
> c: X ;
> b: c -> ^( X c ) ;
> a: b ( PLUS^ b )? ;
> ===============================
> 
> This should accept "x" or "x + x".  If I run TestParser.a() and give it
> just
> "x +", then I get:
> 
>    BR.recoverFromMismatchedToken
>    line 0:-1 mismatched input '<EOF>' expecting X
>    Exception in thread "main" \
>            org.antlr.runtime.tree.RewriteEmptyStreamException: rule c
>         at org.antlr.runtime.tree.RewriteRuleElementStream._next( \
>                                     RewriteRuleElementStream.java:158)
>         at org.antlr.runtime.tree.RewriteRuleElementStream.next( \
>                                     RewriteRuleElementStream.java:145)
>         at TestParser.b(TestParser.java:128)
>         at TestParser.a(TestParser.java:204)
>         at RunTest.main(RunTest.java:10)
> 
> If I change the rewrite rule to other forms, such as "b: c -> ^( c ) ;"
> or
> "b: c -> c ;", I still get the same error.  However, if I remove the
> rewrite
> rule and just leave "b: c ;" - which I think is supposed to actually
> have
> the same effect as the simpler rewrite rules above - then I don't get
> the
> exception... ANTLR just prints the first two lines above, about the
> mismatched input.
> 
> Can anyone confirm that getting the RewriteEmptyStreamException
> indicates a
> bug?  Or tell me what I'm doing wrong?  I really need the generality of
> the
> rewrite rules in my actual grammar, so ideas for workarounds would be
> greatly appreciated.
> 
> Thanks in advance,
> 
> Alan
> 
> -------------------------
> Alan Rooks
> AMI Semiconductor Canada
> http://www.amis.com/
> -------------------------
> AMI Semiconductor - "Silicon Solutions for the Real World"
> NOTICE:
> This electronic message contains information that may be confidential
> or privileged. The information is intended for the use of the
> individual or entity named above. If you are not the intended
> recipient, please be aware that any disclosure, copying, distribution
> or use of the contents of this information is prohibited. If you
> received this electronic message in error, please notify the sender and
> delete the copy you received.
> 
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.1/1050 - Release Date:
> 10/4/2007 5:03 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.1/1050 - Release Date: 10/4/2007
5:03 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071005/263f3b59/attachment.html 

From Alan_Rooks at amis.com  Fri Oct  5 13:36:26 2007
From: Alan_Rooks at amis.com (Alan Rooks)
Date: Fri, 05 Oct 2007 16:36:26 -0400
Subject: [antlr-interest] RewriteEmptyStreamException upon mismatch
References: <47069844.7148CC24@amis.com> <005c01c8078b$acb3c410$0201a8c0@BRUCE>
Message-ID: <4706A04A.AC6DA602@amis.com>

Thanks Bruce, but the WS handling isn't causing the problem... it occurs
even if I use $channel=HIDDEN or in fact no WS token at all.

I think that both skip() and $channel=HIDDEN are okay in ANTLR 3.  They're
both described in Ignoring Whitespace and Comments on page 94 of the book. 
The skip() approach throws out the token entirely.

Alan


Bruce Pierson <bpierson at theglobal.net> wrote:
> 
> Alan:
> 
> Just hazarding a guess, but try { channel=HIDDEN; } rather than
> { skip(); } on your WS declaration.
> 
> I think that's the new way to do it in 3.0...
> 
> --Bruce
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan Rooks
> Sent: Friday, October 05, 2007 2:02 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] RewriteEmptyStreamException upon mismatch
> 
> I'm getting a RewriteEmptyStreamException from ANTLR (3.0.1) at
> runtime, which appears to be due to a combination of using rewrite
> rules to build the AST, and exception handling due to mismatched
> input.
> 
> I think this must be a bug; does anyone have any ideas for a
> workaround that will still allow me to use rewrite rules and
> handle syntax errors?
> 
> Here's a very simple grammar that demonstrates the problem:
> 
> ===============================
> grammar Test;
> 
> options {
>     output = AST;
> }
> 
> WS: (' '|'\t'|'\r'|'\n')+ { skip(); } ;
> 
> X: 'x' ;
> PLUS: '+' ;
> 
> c: X ;
> b: c -> ^( X c ) ;
> a: b ( PLUS^ b )? ;
> ===============================
> 
> This should accept "x" or "x + x".  If I run TestParser.a() and
> give it just "x +", then I get:
> 
>    BR.recoverFromMismatchedToken
>    line 0:-1 mismatched input '<EOF>' expecting X
>    Exception in thread "main" \
>            org.antlr.runtime.tree.RewriteEmptyStreamException: rule c
>         at org.antlr.runtime.tree.RewriteRuleElementStream._next( \
>                                     RewriteRuleElementStream.java:158)
>         at org.antlr.runtime.tree.RewriteRuleElementStream.next( \
>                                     RewriteRuleElementStream.java:145)
>         at TestParser.b(TestParser.java:128)
>         at TestParser.a(TestParser.java:204)
>         at RunTest.main(RunTest.java:10)
> 
> If I change the rewrite rule to other forms, such as
> "b: c -> ^( c ) ;" or "b: c -> c ;", I still get the same error.
> However, if I remove the rewrite rule and just leave "b: c ;" -
> which I think is supposed to actually have the same effect as the
> simpler rewrite rules above - then I don't get the exception...
> ANTLR just prints the first two lines above, about the mismatched
> input.
> 
> Can anyone confirm that getting the RewriteEmptyStreamException
> indicates a bug?  Or tell me what I'm doing wrong?  I really
> need the generality of the rewrite rules in my actual grammar,
> so ideas for workarounds would be greatly appreciated.
> 
> Thanks in advance,
> 
> Alan
> 
> -------------------------
> Alan Rooks
> AMI Semiconductor Canada
> http://www.amis.com/
> -------------------------
AMI Semiconductor - "Silicon Solutions for the Real World"
NOTICE: 
This electronic message contains information that may be confidential or privileged. The information is intended for the use of the individual or entity named above. If you are not the intended recipient, please be aware that any disclosure, copying, distribution or use of the contents of this information is prohibited. If you received this electronic message in error, please notify the sender and delete the copy you received.


From antlr at jazillian.com  Fri Oct  5 13:39:48 2007
From: antlr at jazillian.com (Andy Tripp)
Date: Fri, 05 Oct 2007 16:39:48 -0400
Subject: [antlr-interest] parsing empty function parameters
In-Reply-To: <1191614677.v2.fusewebmail-240634@f>
References: <1191614677.v2.fusewebmail-240634@f>
Message-ID: <4706A114.8060407@jazillian.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071005/80ba6026/attachment.html 

From a at gaydenko.com  Fri Oct  5 15:59:20 2007
From: a at gaydenko.com (Andrew Gaydenko)
Date: Sat, 6 Oct 2007 02:59:20 +0400
Subject: [antlr-interest] antlr3, international symbols
Message-ID: <200710060259.20374@goldspace.net>

Hi!

I have such tokens defenitions (fragment):

------------------
fragment FOO
	:	'$' KEY ';' { doSomethingWith($KEY.text); }
	;
	
fragment KEY
	:	 ~( ' ' | '\t' | '\r' | '\n' | '\f' | '$' | ';' )+
	;
------------------


When KEY is "normal" word (say, '123.456' or 'a.b.c.d.'), all works fine.
But when KEY contains international symbols, $KEY.text returns "something
else" (abracadabra). A project works inside UTF8 enviroment (Linux/Eclipse).

On the contrary, such RAW token works fine with international symbols:

------------------
BAR
	:	(
			(BLA)=> BLA
		|	RAW  { doSomethingWith($RAW.text); }
		)*
	;

fragment RAW 
	:	.
	;
------------------

Have I missed something?


Andrew

From antlr at mirality.co.nz  Fri Oct  5 16:01:30 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 06 Oct 2007 12:01:30 +1300
Subject: [antlr-interest] parsing empty function parameters
In-Reply-To: <4706A114.8060407@jazillian.com>
References: <1191614677.v2.fusewebmail-240634@f>
	<4706A114.8060407@jazillian.com>
Message-ID: <20071005230127.36F7611EBBB@www.antlr.org>

At 09:39 6/10/2007, Andy Tripp wrote:
>It should be that simple, but (at least with my grammar) when arg
>can be empty, ANTLR bombs out.

How is arg/argSpec defined?  Does it refer back to argList?  Does 
it contain loops?

There are three things that tend to result in 
OutOfMemoryExceptions (which are actually all variations on one 
underlying problem):

1. infinite recursion (typically caused by left recursion); ANTLR 
is usually pretty good about detecting these, but sometimes it can 
miss particularly involuted cases.

2. empty loops.  If you've got a (...)* or (...)+ loop that can 
result in matching nothing (within the parentheses), this will 
create an infinite loop.  Be especially careful when putting 
optional terms or loops inside other loops.  ANTLR will not detect 
these cases for you at all -- you have to make sure it's correct 
all by yourself.

3. empty lexer rules.  (This doesn't sound like your problem, but 
I'm including it for completeness.)  If a top-level 
(non-'fragment') lexer rule can end up matching no characters, 
then ANTLR will internally construct an infinite loop generating 
that token repeatedly.  Again, ANTLR won't help you find these, 
you just need to be careful.

Incidentally, to get the behaviour you want, you probably want 
this (making sure that 'argSpec' always matches something and 
can't be empty, and doesn't have any of the above):

argList : argSpec? (COMMA argSpec?)*;

(Which you'll note can end up matching nothing at all, so make 
sure you don't use argList itself inside a list unless there's 
something non-optional there too!)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071006/7c610dc7/attachment.html 

From a at gaydenko.com  Fri Oct  5 16:07:08 2007
From: a at gaydenko.com (Andrew Gaydenko)
Date: Sat, 6 Oct 2007 03:07:08 +0400
Subject: [antlr-interest] antlr3, international symbols
In-Reply-To: <200710060259.20374@goldspace.net>
References: <200710060259.20374@goldspace.net>
Message-ID: <200710060307.08606@goldspace.net>

Sorry for noise! - please, ignore the question - have found own error.


Andrew

======= On Saturday 06 October 2007, Andrew Gaydenko wrote: =======
> Hi!
> 
> I have such tokens defenitions (fragment):
> 
> ------------------
> fragment FOO
> 	:	'$' KEY ';' { doSomethingWith($KEY.text); }
> 	;
> 	
> fragment KEY
> 	:	 ~( ' ' | '\t' | '\r' | '\n' | '\f' | '$' | ';' )+
> 	;
> ------------------
> 
> 
> When KEY is "normal" word (say, '123.456' or 'a.b.c.d.'), all works fine.
> But when KEY contains international symbols, $KEY.text returns "something
> else" (abracadabra). A project works inside UTF8 enviroment (Linux/Eclipse).
> 
> On the contrary, such RAW token works fine with international symbols:
> 
> ------------------
> BAR
> 	:	(
> 			(BLA)=> BLA
> 		|	RAW  { doSomethingWith($RAW.text); }
> 		)*
> 	;
> 
> fragment RAW 
> 	:	.
> 	;
> ------------------
> 
> Have I missed something?
> 
> 
> Andrew
> 



From jimi at temporal-wave.com  Fri Oct  5 16:54:08 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 5 Oct 2007 16:54:08 -0700
Subject: [antlr-interest] parsing empty function parameters
In-Reply-To: <4706A114.8060407@jazillian.com>
References: <1191614677.v2.fusewebmail-240634@f>
	<4706A114.8060407@jazillian.com>
Message-ID: <BAY130-DS2F32371BCF18B3059097686A90@phx.gbl>

This tends to indicate that you have made a production with an empty alt,
also optional, akin to:

 

x    : arg? (COMMA arg?)* 

;

 

arg

     : expr

     | // Don?t do this

     ;

 

This may not be your exact problem but my bet is that it is something that
simplifies down to that.

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Andy Tripp
Sent: Friday, October 05, 2007 1:40 PM
Cc: antlr-interest
Subject: Re: [antlr-interest] parsing empty function parameters

 

It should be that simple, but (at least with my grammar) when arg
can be empty, ANTLR bombs out.

Sohail Somani wrote: 

Isn't this just:
 
argList : arg (COMMA arg?)* ;
 
----- Original Message -----
Subject: [antlr-interest] parsing empty function parameters
Date: Fri, October 5, 2007 12:09
From: "Andy Tripp" HYPERLINK
"mailto:antlr at jazillian.com"<antlr at jazillian.com>
 
  

Using ANTLR v3.0.1,
I'm trying to parse function parameters which can be empty, like this:
f(a, , c, d);
g(,,,,)
 
I have:
argList
   : argSpec (COMMA argSpec)*
   ;
 
But then whenever I try to allow "argSpec" to have an empty alternative,
ANTLR itself
produces an OutOfMemoryError.
 
Here's the original "argSpec" rule, which doesn't allow empty:
 
argSpec
   : argPassingType? argSpec2
   ;
 
I tried making the whole thing optional:
argSpec
   : (argPassingType? argSpec2)?
   ;
 
I tried a syntactic predicate:
argSpec
   : (','|')') =>                // if next token is comma or rparen,
nothing to consume.
   | argPassingType? argSpec2
   ;
 
I tried a semantic predicate:
argSpec
   : {input.LT(1).getText().equals(",") ||
input.LT(1).getText().equals(")")}?
   | argPassingType? argSpec2
   ;
 
As I said, all these cause ANTLR to produce OutOfMemoryError, presumably
in an infinite loop matching this rule, but consuming no token.
Any suggestions?
 
 
 
    

 
  

 

 

No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.1/1050 - Release Date: 10/4/2007
5:03 PM


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.1/1050 - Release Date: 10/4/2007
5:03 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071005/74dd54ee/attachment.html 

From Austin_Hastings at Yahoo.com  Fri Oct  5 17:33:31 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Fri, 05 Oct 2007 20:33:31 -0400
Subject: [antlr-interest] parsing empty function parameters
In-Reply-To: <47068BEC.5070400@jazillian.com>
References: <47068BEC.5070400@jazillian.com>
Message-ID: <4706D7DB.7020708@Yahoo.com>

Andy,

What's the parse tree for

f()

going to look like?


Is that a call to a function with no args, or with one unspecified arg?

=Austin

Andy Tripp wrote:
> Using ANTLR v3.0.1,
> I'm trying to parse function parameters which can be empty, like this:
> f(a, , c, d);
> g(,,,,)
>
> I have:
> argList
>   : argSpec (COMMA argSpec)*     ;
>
> But then whenever I try to allow "argSpec" to have an empty 
> alternative, ANTLR itself
> produces an OutOfMemoryError.
>
> Here's the original "argSpec" rule, which doesn't allow empty:
>
> argSpec
>   : argPassingType? argSpec2
>   ;
>
> I tried making the whole thing optional:
> argSpec
>   : (argPassingType? argSpec2)?
>   ;
>
> I tried a syntactic predicate:
> argSpec
>   : (','|')') =>                // if next token is comma or rparen, 
> nothing to consume.
>   | argPassingType? argSpec2
>   ;
>
> I tried a semantic predicate:
> argSpec
>   : {input.LT(1).getText().equals(",") || 
> input.LT(1).getText().equals(")")}?
>   | argPassingType? argSpec2
>   ;
>
> As I said, all these cause ANTLR to produce OutOfMemoryError, presumably
> in an infinite loop matching this rule, but consuming no token.
> Any suggestions?
>
>


From parrt at cs.usfca.edu  Fri Oct  5 19:16:17 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 5 Oct 2007 19:16:17 -0700
Subject: [antlr-interest] Mantra programming language 1.0a1 released
Message-ID: <8D260535-FEC8-4947-AF4D-2F26AC648A00@cs.usfca.edu>

Hi,

If you're looking for a good example of how to build a real source-to- 
source translator with ANTLR+StringTemplate, Mantra is for you.  The  
language itself is not ready to use for building real projects, but  
it will be soon.  Best as a teaching tool at the moment.

http://www.linguamantra.org

Mantra (Hindi for "magical incantation") is a new dynamically-typed
programming language that is syntactically similar to Java but with
the flexibility and ease of programming of Ruby or Python. Mantra is
not an interpreted language. Source code is translated to Java and so
mantra programs integrate trivially with plain Java code.

Mantra is meant as a research platform and to teach language design
and implementation. Nonetheless, it should prove a nice little
language.

Mantra is implemented using ANTLR v3.1b1 and StringTemplate 3.1b1 (as
yet unreleased; to be safe, use the libraries provided with the
distribution).

This release is the first alpha release.  I do not have a good unit
testing facility yet and so I cannot guarantee that mantra will do
anything useful for you.  In fact, it might wipe out all life on this
planet. That said, it seems to be pretty useful at the moment has all
of the runtime is written in mantra itself except for the object and
MetaClass classes.

Enjoy.

Ter

From clifford.heath at gmail.com  Sat Oct  6 01:07:27 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sat, 06 Oct 2007 18:07:27 +1000
Subject: [antlr-interest] Lexer strangeness
Message-ID: <fe7fo2$ar1$1@sea.gmane.org>

New to Antlr, not to parser-generators. Hi all!
I'm using ANTLRWorks downloaded today on a MAC under OS/X.

I have the following snippet which works when I do it this way:

IDENTIFIER: ID;
fragment ID: LETTER ( ( LETTER|DIGIT )* LETTER)? DIGIT?;
// with:
fragment LETTER	:	('_'|'A'..'Z'|'a'..'z');
fragment DIGIT: '0'..'9';

but not when I do it this way:

IDENTIFIER: ID DIGIT?;
fragment ID: LETTER ( ( LETTER|DIGIT )* LETTER)?;

In the latter case it fails to match the IDENTIFIER 'f3', for example.

I have it structured this way because in the full grammar,
I have two similar things:
IDENTIFIER: ID;
VARIABLE: ID DIGIT?;

where IDENTIFIER may not end with a digit, but VARIABLE might.
Use of a VARIABLE always makes the lexer/parser fail. I thought
I might have an greedy/non-greedy problem here, but even without
the similar definitions, the above fails.

What's happening here? Can someone point me in the right direction please?

Clifford Heath.


From Austin_Hastings at Yahoo.com  Sat Oct  6 02:40:32 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sat, 06 Oct 2007 05:40:32 -0400
Subject: [antlr-interest] Lexer strangeness
In-Reply-To: <fe7fo2$ar1$1@sea.gmane.org>
References: <fe7fo2$ar1$1@sea.gmane.org>
Message-ID: <47075810.4000508@Yahoo.com>

Clifford,

Before you get too involved in this problem, consider your statement,

"IDENTIFIER may not end with a digit, but VARIABLE might."

That right there tells me you are going to have grammar problems later, 
because you will never completely trust the lexer to determine 
IDENTIFIERs from VARIABLES - after all, what is "foo"?

You should probably establish a firm rule - variables always end in a 
digit - to simplify things. Or handle disambiguation in the parser, 
rather than in the lexer. (My favorite.)

=Austin



Clifford Heath wrote:
> New to Antlr, not to parser-generators. Hi all!
> I'm using ANTLRWorks downloaded today on a MAC under OS/X.
>
> I have the following snippet which works when I do it this way:
>
> IDENTIFIER: ID;
> fragment ID: LETTER ( ( LETTER|DIGIT )* LETTER)? DIGIT?;
> // with:
> fragment LETTER    :    ('_'|'A'..'Z'|'a'..'z');
> fragment DIGIT: '0'..'9';
>
> but not when I do it this way:
>
> IDENTIFIER: ID DIGIT?;
> fragment ID: LETTER ( ( LETTER|DIGIT )* LETTER)?;
>
> In the latter case it fails to match the IDENTIFIER 'f3', for example.
>
> I have it structured this way because in the full grammar,
> I have two similar things:
> IDENTIFIER: ID;
> VARIABLE: ID DIGIT?;
>
> where IDENTIFIER may not end with a digit, but VARIABLE might.
> Use of a VARIABLE always makes the lexer/parser fail. I thought
> I might have an greedy/non-greedy problem here, but even without
> the similar definitions, the above fails.
>
> What's happening here? Can someone point me in the right direction 
> please?
>
> Clifford Heath.
>
>
>


From clifford.heath at gmail.com  Sat Oct  6 03:06:06 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sat, 06 Oct 2007 20:06:06 +1000
Subject: [antlr-interest] Lexer strangeness
In-Reply-To: <47075810.4000508@Yahoo.com>
References: <fe7fo2$ar1$1@sea.gmane.org> <47075810.4000508@Yahoo.com>
Message-ID: <fe7mme$r6c$1@sea.gmane.org>

Austin Hastings wrote:
> Before you get too involved in this problem, consider your statement,
> "IDENTIFIER may not end with a digit, but VARIABLE might."
> That right there tells me you are going to have grammar problems later, 
> because you will never completely trust the lexer to determine 
> IDENTIFIERs from VARIABLES - after all, what is "foo"?
> 
> You should probably establish a firm rule - variables always end in a 
> digit - to simplify things. Or handle disambiguation in the parser, 
> rather than in the lexer. (My favorite.)

You're quite right, of course, and that's exactly what I had just done :-).

Clifford Heath.


From clifford.heath at gmail.com  Sat Oct  6 03:21:26 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sat, 06 Oct 2007 20:21:26 +1000
Subject: [antlr-interest] ANTLRWorks *rocks*!
Message-ID: <fe7nja$ttd$1@sea.gmane.org>

Thanks, everyone responsible. This is *so* much easier than doing everything manually!

A few things I'd like:

* In the interpreter, I'd like to select just *part* of the entered text, and a rule,
  and parse just that text, rather than stripping the text down to the fragment and
  then having to restore it later,

* When an exception is thrown, highlight the source text last consumed , maybe the rule,
  and auto-scroll to that point in the parse tree,

* Some visual indication when not all the text in the input window has been consumed,

* Syntax highlighting of commented-out text is too dim - barely readable on my screen,

* Better alerting when ANTLR's processing marks a rule as unreachable or otherwise in error.
  I didn't notice the red color or tooltips at first.

Clifford Heath.


From Austin_Hastings at Yahoo.com  Sat Oct  6 07:38:03 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sat, 06 Oct 2007 10:38:03 -0400
Subject: [antlr-interest] Suggestion: Parameterized Productions
Message-ID: <47079DCB.5060105@Yahoo.com>

This is a feature request/suggestion:

In a language like C, there are type specifications and then anonymous 
type specifications:

extern int strcpy(char *, const char *);    /* Anonymous types used for 
parameter info */

int strcpy(char * to, const char * from)  /* Explicit declarations 
required for function definition. */
{
    char *ret = to;
    while (*to++ = *from++);
    return ret;
}

The problem that these cause is that the grammar will have a rather 
complex section for recognizing declarations, and then a second, 
parallel, section for recognizing anonymous declarations:

declarator
	: pointer? direct_declarator
	| pointer
	;

abstract_declarator
	: pointer direct_abstract_declarator?
	| direct_abstract_declarator
	;

direct_declarator
	: ( IDENTIFIER
	  | '(' declarator ')'
	  )
        declarator_suffix*
	;

direct_abstract_declarator
	:	( '(' abstract_declarator ')' | abstract_declarator_suffix ) abstract_declarator_suffix*
	;

 
(Excerpts from Terence's ANSI-C grammar.)

There are four related-but-slightly-different production trees in the C 
grammar for simple variables, structures, parameters, and sizeof.

I propose that there be a parameterized production mechanism added so 
that this can be eliminated. The antlr syntax would probably resemble 
the parameter mechanism for generated functions. The difference would be 
that these parameters would be handled internally by antlr, rather than 
passed into the generated code.

The point would be to attach production subtrees, including empty ones, 
within rules. This would allow re-use of the structures with a smaller 
set of customized rules needed to handle special cases.

Part of the customized rules would need to be a way to recognize 
"context." This compares to the existing pattern of using "if 
($declaration.size>0)" to determine when a parent rule is active. It 
seems there are two cases here: detection at generation-time of the path 
to a node, and detection at run-time of the path to a node.
 
Currently, the same ANSI-C grammar includes this snippet:

direct_declarator
	:   (	IDENTIFIER
			{
			if ($declaration.size()>0&&$declaration::isTypedef) {
				$Symbols::types.add($IDENTIFIER.text);
				System.out.println("define type "+$IDENTIFIER.text);
			}
			}
		|	'(' declarator ')'
		)
        declarator_suffix*
	;

The code that checks $declaration.size() is checking the generation-type 
path to the node, but doing it at run-time. The next condition, && 
$declaration::isTypedef, is checking a run-time indicator of which case 
inside the declaration production is being followed.

The difference is that the production for a function declaration makes 
reference to a declarator as part of its syntactic predicate- the only 
difference between a declaration and a function definition is the 
opening '{' versus the closing ';'.

Being able to ask in the grammar about the path to the node may or may 
not affect code generation - I'm not smart enough to say for sure. But 
it does offer the opportunity to separate compile-time (generation) from 
run-time decisions, in a hopefully target-language-independent fashion. 
And it simplifies the custom nodes that will be needed for parameterized 
productions.

In fact, being able to query the path to a node in the grammar may 
eliminate the need for the particular parameterization mentioned here. 
If the final node - "direct_declarator" - could choose from among the 
various paths, then the entire logic might be able to fit in that node. 
I'm not sure it would improve readability, though.

Thanks,

=Austin



From robfinneran at gmail.com  Sat Oct  6 10:46:31 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Sat, 6 Oct 2007 10:46:31 -0700
Subject: [antlr-interest] Problem using code from ANTLR 3 FAQ How do I
	implement include files?
Message-ID: <a7e86e130710061046q50506872x9b457254f1a88309@mail.gmail.com>

Hello fellow ANTLR  fans!

Please forgive my newbie-ness.

The code from the FAQ doesn't seem to work for me:

@lexer::members {
    class SaveStruct {
      SaveStruct(CharStream input){
        this.input = input;
        this.marker = input.mark();
      }
      public CharStream input;
      public int marker;
     }

     Stack<SaveStruct> includes = new Stack<SaveStruct>();

    // We should override this method for handling EOF of included file
     public Token nextToken(){
       Token token = super.nextToken();

       if(token==Token.EOF_TOKEN && !includes.empty()){
        // We've got EOF and have non empty stack.
         SaveStruct ss = includes.pop();
         setCharStream(ss.input);
         input.rewind(ss.marker);
         token = super.nextToken();
       }

      // Skip first token after switching on another input.
       if(((CommonToken)token).getStartIndex() < 0)
         token = super.nextToken();

       return token;
     }
 }

// and lexer rule
 INCLUDE
     : 'include' (WS)? f=STRING {
       String name = f.getText();
       name = name.substring(1,name.length()-1);
       try {
        // save current lexer's state
         SaveStruct ss = new SaveStruct(input);
         includes.push(ss);

        // switch on new input stream
         setCharStream(new ANTLRFileStream(name));
         reset();

       } catch(Exception fnf) { throw new Error("Cannot open file " + name); }
     }
     ;

The lexer code appears to process both the included file, and the main
file, but the parser only seems to build the included file as a tree,
and does not appear to build a tree for the main file.

------------

Below is an email I sent to antlr-interest two days ago with a
slightly more sophisticated mechanism to process entire directory as
indicated by the namespace However, I don't see how this enhancement
has anything to do with the problem. Please forgive if I overlooked
something.

I have modified someone's code example to enhance the C-style include
file example to support reading all include files in a directory in a
similar fashion to C# "using" statements.


The lexer USING rule seems to recursively walk through the files using
a stack mechanism.
The problem is that the parser only SEEMS to see the tokens from the
very first include (or using statement) file. It never SEEMS to fully
processes the remainder of the original file. The lexer rule however
does actually process all of the files. The real problem is that the
AST tree that the PARSER builds only builds the tree for the first
included file.

I tried using input.mark() to save the state info but that version did
not work either.

Could the problem be caused because I need to separate the parser from
the lexer? I'm just  using the default combined lexer/parser but the
code here calls super.nextToken().

Is there a way for me to see the token stream? I have also tried input
= ss.input;

Thanks!

@lexer::members {
       class SaveStruct {
               public CharStream input;
               public String fileName;
       public int tokenStartCharIndex, tokenStartLine,
tokenStartCharPositionInLine;
    }

       Stack<SaveStruct> includes = new Stack<SaveStruct>();
       String currentFile = "default";
       List usingNamespaces = new ArrayList();
       // We should override this method for handling EOF of included file
       public Token nextToken() {
               Token token = super.nextToken();

               if(token==Token.EOF_TOKEN && !includes.empty()) {
                       // We've got EOF and have non empty stack.
                       SaveStruct ss = includes.pop();
                       System.err.println("pop: " + ss.fileName);
                       currentFile = ss.fileName;
                       setCharStream(ss.input);
                       tokenStartCharIndex = ss.tokenStartCharIndex;
           tokenStartLine = ss.tokenStartLine;
           tokenStartCharPositionInLine = ss.tokenStartCharPositionInLine;
                       token = super.nextToken();
               }

               // Skip first token after switching on another input.
               if(((CommonToken)token).getStartIndex() < 0) {
                       token = super.nextToken();
               }
               return token;
       }
}

USING
       : 'using' WS f+=ID ('.' f+=ID)* {
               StringBuffer sb = new StringBuffer();
               sb.append(Test.projectBaseDir);
               java.util.Iterator i = $f.iterator();
               while (i.hasNext()) {
                       Token t = (Token)i.next();
                       sb.append("\\");
                       sb.append(t.getText());
               }
               String name = sb.toString();
               if (!usingNamespaces.contains(name)) {
               usingNamespaces.add(name);
               try {
                       String fullName = null;
                       System.err.println("namespace: " + name);
                       java.io.File namespaceDir = new java.io.File(name);
                       String[] files = namespaceDir.list();
                               for (int j = 0; j < files.length; j++) {
                                       fullName = name + "\\" + files[j];
                                       // save current lexer's state
                                       SaveStruct ss = new SaveStruct();
                                       ss.input = input;
                                       ss.fileName = currentFile;
                                       ss.tokenStartCharIndex =
tokenStartCharIndex;
                                       ss.tokenStartLine = tokenStartLine;
                                       ss.tokenStartCharPositionInLine
= tokenStartCharPositionInLine;
                                       includes.push(ss);
                                       System.err.println("Push: " +
ss.fileName);

                                       // switch on new input stream
                                       setCharStream(new
ANTLRFileStream(fullName));
                                       currentFile = fullName;
                                       System.err.println("Current: "
+ currentFile);
                                       reset();
                               }
      } catch(Exception fnf) { throw new Error("Cannot open file " + name); }
          }
    }
    ;

Thanks!

Rob

From antlr at mirality.co.nz  Sat Oct  6 13:18:15 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sun, 07 Oct 2007 09:18:15 +1300
Subject: [antlr-interest] Problem using code from ANTLR 3 FAQ How do I
 implement include files?
In-Reply-To: <a7e86e130710061046q50506872x9b457254f1a88309@mail.gmail.co
 m>
References: <a7e86e130710061046q50506872x9b457254f1a88309@mail.gmail.com>
Message-ID: <20071006201814.8440411EB97@www.antlr.org>

At 06:46 7/10/2007, Rob Finneran wrote:
 >I have modified someone's code example to enhance the C-style
 >include file example to support reading all include files in
 >a directory in a similar fashion to C# "using" statements.

You know that C# "using" statements are the equivalent of C++ 
"using namespace" statements, and don't actually involve including 
any extra code, right?  In fact it's perfectly valid to have a C# 
file that refers to symbols in other files/assemblies without a 
single "using" statement ever being used....


From robfinneran at gmail.com  Sat Oct  6 14:35:16 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Sat, 6 Oct 2007 14:35:16 -0700
Subject: [antlr-interest] Problem using code from ANTLR 3 FAQ How do I
	implement include files?
In-Reply-To: <4707ed87.17bb720a.385f.4fe9SMTPIN_ADDED@mx.google.com>
References: <a7e86e130710061046q50506872x9b457254f1a88309@mail.gmail.com>
	<4707ed87.17bb720a.385f.4fe9SMTPIN_ADDED@mx.google.com>
Message-ID: <a7e86e130710061435h3deb65a6l6a8c39dd7d350fbd@mail.gmail.com>

Hi Gavin,

Thanks for the reply. You are correct.

I'm not actually parsing C# files. I don't have a name for my language yet.

I want to build a translator that traverses my project directory
structure based on the "using DirName1.DirName2;" and includes these
files into a single character input or token stream.  This allows me
to physically separate my source code files and still process the
individual files as if they were a single file. Without this mechanism
I would have undefined types and symbols.

Additionally I would might want to exclude files from being processed:

using MyProject.Ecommerce exclude types Order, LineItem;

Not sure why I would want to do this because I would like the
translator to figure out what types are needed to be included
automatically.

I have not had time to look at the ANTLR code too closely. There must
be some class I can inherit from such as TokenStream or something.
Maybe I can have multiple lexer instances that create a single token
stream into a single parser. I'm not sure I like too much Java code in
my grammar file anyways. There must be a way to do this.

As a temporary solution I'm working on a preprocessor that combines
the files into a temporary file which will become the input for the
ANTLR lexer/parser. The preprocessor approach seems a little old
fashioned and probably slows my translator down.

I'm also thinking about having a manifest compiled from each source
file. The manifest would be used for things like reflection and an
easy to process list of symbol dependencies.  I could then load
manifest files into symbol tables before processing the AST tree.

Building your own language is fun. But there sure is a lot of work to do.

Thanks Again!

On 10/6/07, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 06:46 7/10/2007, Rob Finneran wrote:
>  >I have modified someone's code example to enhance the C-style
>  >include file example to support reading all include files in
>  >a directory in a similar fashion to C# "using" statements.
>
> You know that C# "using" statements are the equivalent of C++
> "using namespace" statements, and don't actually involve including
> any extra code, right?  In fact it's perfectly valid to have a C#
> file that refers to symbols in other files/assemblies without a
> single "using" statement ever being used....
>
>

From siemsen at UCAR.EDU  Sat Oct  6 21:51:56 2007
From: siemsen at UCAR.EDU (Pete Siemsen)
Date: Sat, 6 Oct 2007 22:51:56 -0600
Subject: [antlr-interest] what means "mismatched input 'xxx' expecting set
	null"
Message-ID: <E8EF663C-5B71-49A1-8F5C-F47EEC2B5958@UCAR.EDU>

I'm trying to implement include file processing with ANTLR 3.0.1.  I  
stole liberally from the
ANTLR Wiki page that describes it (http://www.antlr.org/wiki/pages/ 
viewpage.action?pageId=557057).
Now my grammar doesn't recognize my test input file, which contains just

#pragma include ("System\CIM_DiagnosticResult.mof")
#pragma include ("Event\CIM_Indication.mof")
#pragma include ("Core\CIM_ManagedElement.mof")

When I run it, I get

line 1:8 mismatched input 'include' expecting set null
line 2:8 mismatched input 'include' expecting set null
line 3:8 mismatched input 'include' expecting set null

Finally, here's the grammar.  I stripped it down to just the relevant  
stuff:

grammar cimmof2java;

tokens {
     BACKSLASH       = '\\'              ;
     DOUBLEQUOTE     = '"'               ;
     INCLUDE         = 'include'         ;
     LOCALE		= 'locale'          ;
     LPAREN          = '('               ;
     PRAGMA          = '#pragma'         ;
     RPAREN          = ')'               ;
     SINGLEQUOTE     = '\''              ;
}


mofSpecification
	: (mofProduction)+
	;

mofProduction
	: compilerDirective
     ;

compilerDirective
	: PRAGMA (PragmaInclude | PragmaLocale)
	;

PragmaInclude
	: INCLUDE LPAREN f=StringConstant RPAREN
	;

PragmaLocale
	: LOCALE LPAREN StringConstant RPAREN
	;

WhiteSpace
	: ( ' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;}
	;

fragment
StringCharacter
	: ' '..'!' | '#'..'[' | ']'..'~'
	;

The above grammar produces the error.  What's wrong?

Note that the PragmaInclude rule used to be a parser rule, with a  
lowercase "p".  Include processing works in the lexer, so I changed  
the "p" to a "P".  ANTLR accepts it and produces compileable Java,  
but when I run it I get the errors.

Perhaps it's relevant that if I change the "P" on "PragmaLocale" to  
"p", I get this error instead:

line 1:8 no viable alternative at input 'include'
line 2:8 no viable alternative at input 'include'
line 3:8 no viable alternative at input 'include'

-- Pete



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071006/b23524f0/attachment.html 

From antlr at mirality.co.nz  Sat Oct  6 22:57:13 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sun, 07 Oct 2007 18:57:13 +1300
Subject: [antlr-interest] what means "mismatched input 'xxx' expecting
 set null"
In-Reply-To: <E8EF663C-5B71-49A1-8F5C-F47EEC2B5958@UCAR.EDU>
References: <E8EF663C-5B71-49A1-8F5C-F47EEC2B5958@UCAR.EDU>
Message-ID: <20071007055730.A8FFA11EB4C@www.antlr.org>

At 17:51 7/10/2007, Pete Siemsen wrote:
>PragmaInclude
>: INCLUDE LPAREN f=StringConstant RPAREN
>;
[...]
>The above grammar produces the error.  What's wrong?

Since PragmaInclude is a lexer rule, it won't discard whitespace 
(or to be more specific, it won't generate whitespace tokens and 
then either skip them or push them onto a hidden channel).  So 
anywhere that whitespace may occur within a lexer rule you will 
need to explicitly specify it.

>Perhaps it's relevant that if I change the "P" on "PragmaLocale" 
>to "p", I get this error instead:
>
>line 1:8 no viable alternative at input 'include'
>line 2:8 no viable alternative at input 'include'
>line 3:8 no viable alternative at input 'include'

It's hard to say for this one -- you've specified "StringConstant" 
in your rule but haven't actually given a definition for it in the 
grammar you posted.  If that's actually what you've got (or if 
StringConstant is a fragment rule), then that's your 
problem.  Parser rules can only (usefully) refer to non-fragment 
lexer rules that the lexer will actually generate :)  (ANTLR won't 
complain about typos, irritatingly -- it assumes you are referring 
to another token it simply hasn't seen the definition for yet -- 
even if it never does.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/6c8eeb4f/attachment.html 

From manas_482002 at yahoo.co.in  Sun Oct  7 04:58:01 2007
From: manas_482002 at yahoo.co.in (Manas)
Date: Sun, 7 Oct 2007 12:58:01 +0100 (BST)
Subject: [antlr-interest] Indirect recursive grammar(A->B; B->C; C->A)
Message-ID: <792279.47101.qm@web8318.mail.in.yahoo.com>

hi.
  I am developing a parser for OCL expressions. While generating java code, ANTLRWorks gave an error for indirect recursive grammar. Same grammar is supported by YACC. Is there any method by which this can be resolved. Here is the grammar I have written.
  Manas
   
   
  grammar ocl;
   
  expressionInOclCS : oclExpressionCS;
   
  
  oclExpressionCS 
  : propertyCallExpCS
  | variableExpCS
  | literalExpCS
  | letExpCS
  | oclMessageExpCS
  | ifExpCS
  ;
  
   
  variableExpCS
  : simpleNameCS
  ; 
   
  simpleNameCS
  : VARSTRING
  ;
  
   
  pathNameCS
  : simpleNameCS('::' pathNameCS)?
  ;
   
  literalExpCS 
  : enumLiteralExpCS
  | collectionLiteralExpCS
  | tupleLiteralExpCS
  | primitiveLiteralExpCS
  ;
  
   
  enumLiteralExpCS
  : pathNameCS '::' simpleNameCS
  ;
  
   
  collectionLiteralExpCS
  : collectionTypeIdentifierCS '{' collectionLiteralPartsCS? '}'
  ; 
  
  
  
   
  collectionTypeIdentifierCS
  : 'Set'
  | 'Bag'
  | 'Sequence'
  | 'Collection'
  | 'OrderedSet'
  ;
  
   
  collectionLiteralPartsCS
  : collectionLiteralPartsCS (',' collectionLiteralPartsCS )?
  ;
  
   
  primitiveLiteralExpCS
  : integerLiteralExpCS
  | realLiteralExpCS
  | stringLiteralExpCS
  | booleanLiteralExpCS
  ;
  
   
  tupleLiteralExpCS
  : 'Tuple' '{' variableDeclarationListCS '}'
  ;
  
   
  integerLiteralExpCS
  : INTEGER
  ;
  
   
  realLiteralExpCS
  : REAL
  ;
  
   
  stringLiteralExpCS
  : STRING
  ;
   
  booleanLiteralExpCS
  : BOOLEAN
  ;
   
  variableDeclarationCS
  : simpleNameCS(':' typeCS)?('=' oclExpressionCS)?
  ;
  
  
   
  propertyCallExpCS
  : modelPropertyCallExpCS
  | loopExpCS
  ;
  
   
  loopExpCS
  : iteratorExpCS
  | iterateExpCS
  ;
  
   
  iteratorExpCS
  : oclExpressionCS '->' simpleNameCS '(' (variableDeclarationCS (',' variableDeclarationCS)? '|')?
  oclExpressionCS ')'
  | oclExpressionCS '.' simpleNameCS '(' argumentsCS? ')'
  | oclExpressionCS '.' simpleNameCS
  | oclExpressionCS '.' simpleNameCS ('[' argumentsCS ']')?
  ;
   
  
  iterateExpCS
  : oclExpressionCS '-> ' 'iterate' '('(variableDeclarationCS ';')?
  variableDeclarationCS'|'
  oclExpressionCS')'
  ;
   
  typeCS : pathNameCS
  | collectionTypeCS
  | tupleTypeCS;
  collectionTypeCS
  : collectionTypeIdentifierCS '(' typeCS ')'
  ;
  
   
  tupleTypeCS
  : 'Tuple' '(' variableDeclarationListCS? ')';
  
  variableDeclarationListCS //*********
  : variableDeclarationCS (',' variableDeclarationListCS)?
  ;
   
  modelPropertyCallExpCS
  : operationCallExpCS
  | attributeCallExpCS
  | navigationCallExpCS
  ;
  
   
  operationCallExpCS
  : oclExpressionCS simpleNameCS oclExpressionCS
  | oclExpressionCS '->' simpleNameCS '('argumentsCS? ')'
  | oclExpressionCS '.' simpleNameCS '(' argumentsCS? ')'
  | simpleNameCS '(' argumentsCS? ')'
  | oclExpressionCS '.' simpleNameCS isMarkedPreCS '(' argumentsCS? ')'
  | isMarkedPreCS '(' argumentsCS? ')'
  | pathNameCS '(' argumentsCS? ')'
  | simpleNameCS oclExpressionCS
  ;
   
  attributeCallExpCS
  : oclExpressionCS ',' simpleNameCS isMarkedPreCS?
  | simpleNameCS isMarkedPreCS?
  | pathNameCS
  ;
  
   
  navigationCallExpCS
  : associationEndCallExpCS
  | associationClassCallExpCS
  ;
   
  associationEndCallExpCS
  : oclExpressionCS '.' simpleNameCS('['argumentsCS']')? isMarkedPreCS?
  | simpleNameCS('['argumentsCS']')? isMarkedPreCS?
  ;
  
   
  associationClassCallExpCS
  : oclExpressionCS'.'simpleNameCS('[' argumentsCS']')? isMarkedPreCS?
  | simpleNameCS ('[' argumentsCS']')?isMarkedPreCS?
  ;
  
   
  isMarkedPreCS
  : '@' 'pre'
  ;
  
   
  argumentsCS
  : oclExpressionCS (',' argumentsCS)?//**********
  ;
  
   
  letExpCS: 'let' variableDeclarationCS letExpSubCS
  ; 
  
   
  letExpSubCS
  : ',' variableDeclarationCS letExpSubCS//***********
  | 'in' oclExpressionCS
  ;
  
   
  oclMessageExpCS
  : oclExpressionCS '^^' simpleNameCS '(' oclMessageArgumentsCS? ')'
  | oclExpressionCS '^' simpleNameCS '(' oclMessageArgumentsCS? ')'
  ; 
  
   
  oclMessageArgumentsCS
  : oclMessageArgCS (',' oclMessageArgumentsCS)? //********************
  ;
  
   
  oclMessageArgCS
  : '?'(':'typeCS)?
  | oclExpressionCS
  ;
   
  ifExpCS : 'if' oclExpression
  'then' oclExpression
  'else' oclExpression
  'endif'
  ;
  
   
  oclExpression
  : //To be defined yet
  ;
  
   
  VARSTRING : ('a'..'z'|'A'..'Z') ('0'..'9'|'a'..'z'|'A'..'Z')*
  ;
  INTEGER : ('0'..'9')+
  ;
  REAL : ('0'..'9')*'.'('0'..'9')+
  ;
  STRING : ('a'..'z'|'A'..'Z')+
  ;
  BOOLEAN : 'true'|'false'
  ;
  NEWLINE : '\r'?'\n'
  ;
  WS : (' '|'\t'|'\n'|'\r')+ {skip();}
  ;

       
---------------------------------
 5, 50, 500, 5000 - Store N number of mails in your inbox. Click here.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/d938c182/attachment-0001.html 

From rschulz at sonic.net  Sun Oct  7 07:07:11 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Sun, 7 Oct 2007 07:07:11 -0700
Subject: [antlr-interest] Indirect recursive grammar(A->B; B->C; C->A)
In-Reply-To: <792279.47101.qm@web8318.mail.in.yahoo.com>
References: <792279.47101.qm@web8318.mail.in.yahoo.com>
Message-ID: <200710070707.11555.rschulz@sonic.net>

On Sunday 07 October 2007 04:58, Manas wrote:
> hi.
>   I am developing a parser for OCL expressions. While generating java
> code, ANTLRWorks gave an error for indirect recursive grammar. Same
> grammar is supported by YACC. Is there any method by which this can
> be resolved. Here is the grammar I have written. Manas

YACC is an LALR parser generator. ANTLR is LL. Thus YACC tolerates left 
recursion among its productions but not right recursion while ANTLR 
tolerates right recursion and not left.

You will have to find and eliminate the left recursion that ANTLR is 
telling you is present among your grammar productions.

Randall Schulz

From Austin_Hastings at Yahoo.com  Sun Oct  7 07:47:50 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 07 Oct 2007 10:47:50 -0400
Subject: [antlr-interest] BUG? - Predicates subject to precedence error
Message-ID: <4708F196.5010809@Yahoo.com>

I'm currently in predicate hell, which I will happily detail once I get out.

In the mean time, though, I've stumbled on the unpleasant fact that if 
you specify a predicate like:

rule : { condition1 || condition2 }? stuff ;

the predicate will be inserted at the whim of ANTLR into various places, 
possibly including a condition that includes a synthetic predicate.

The resulting code looks like this:

if (
     (
       (
         synpred6()
         &&decl_specifiers_stack.size() <= 0
         || (
              (decl_specifiers_scope) decl_specifiers_stack.peek()
            ).allowStorageClass
        )
     )
    )
{

Particularly, the conjunction of the synthetic predicate with the rule 
is not guarded by placing parens around the rule. Since logical and (&&) 
has higher precedence than logical or (||) the sense of the rule is changed.

I don't know if this is a string-template bug or a tool bug. Sorry.

=Austin


From Austin_Hastings at Yahoo.com  Sun Oct  7 09:03:46 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 07 Oct 2007 12:03:46 -0400
Subject: [antlr-interest] BUG - Rewrite rules make ANTLR dumber in
	label=(a|b) rule
Message-ID: <47090362.8040708@Yahoo.com>

I have the following rule which checks for redundancy in a list of type 
specifiers and emits a diagnostic if a qualifier is found to be redundant.

decl_access_qualifier
    @init { boolean allowed = true; }
    : qual=(Kconst
    | Kvolatile)
    {
        if ($decl_specifiers::accessQuals.contains($qual.text))
        {
            say("Redundant access qualifier " + $qual.text);
            allowed = false;
        }
        else
        {
            say("Adding acc.qual. " + $qual.text);
            $decl_specifiers::accessQuals.add($qual.text);
        }
    }
    ;

I decided to make it drop the qualifier if it was found to be redundant, 
simplifying my eventual AST:

        -> {allowed}? $qual
        ->
    ;

Below is the code generated by the first and second cases. I can see how 
the presence of rewrite rules might change the way that individual 
values in the alternation are recognized and handled. But the fact is 
that without the rewrite rule, the $qual variable is being set 
correctly, whereas the presence of rewrite rules causes $qual to be 
completely unset.

If I distribute the assignment to qual, using

decl_access_qualifier
    @init { boolean allowed = true; }
    : (qual=Kconst
    | qual=Kvolatile)

then the value is stored correctly for the rewrite case. If I leave the 
assignment distributed and remove the rewrite code, the code is 
generated in the same "shape" as for the rewrite case.

I infer from this that the qual=(a|b) case is somehow receiving special 
treatment in the code genseration mechanism, but that this special 
treatment has not been extended to the case when rewriting is present. 
As a result, the rule begins as a valid rule, but adding rewrite rules 
to the end makes ANTLR dumber, causing the formerly-working code to 
suddenly break.

=Austin


    public final decl_access_qualifier_return decl_access_qualifier() 
throws RecognitionException {
        decl_access_qualifier_return retval = new 
decl_access_qualifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token qual=null;
        CommonTree qual_tree=null;
         boolean allowed = true;
        try {
            // src/org/parrotcode/hlasm/antlr/HlasmSyntax.g:206:2: 
(qual= ( Kconst | Kvolatile ) )
            // src/org/parrotcode/hlasm/antlr/HlasmSyntax.g:206:4: qual= 
( Kconst | Kvolatile )
            {
            root_0 = (CommonTree)adaptor.nil();
            qual=(Token)input.LT(1);
            if ( input.LA(1)==Kconst||input.LA(1)==Kvolatile ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, 
adaptor.create(qual));
                errorRecovery=false;failed=false;
            } else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse = new 
MismatchedSetException(null,input);
                
recoverFromMismatchedSet(input,mse,FOLLOW_set_in_decl_access_qualifier497);    
throw mse;
            }

            if ( backtracking==0 ) {
                        if 
(((decl_specifiers_scope)decl_specifiers_stack.peek()).accessQuals.contains(qual.getText()))
                        {
                                say("Redundant access qualifier " + 
qual.getText());
                                allowed = false;
                        } else {
                                say("Adding acc.qual. " + qual.getText());
                                
((decl_specifiers_scope)decl_specifiers_stack.peek()).accessQuals.add(qual.getText());
                        }              
            } }
            retval.stop = input.LT(-1);
            if ( backtracking==0 ) {
                retval.tree = 
(CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, 
retval.stop);
            }
        }







    public final decl_access_qualifier_return decl_access_qualifier() 
throws RecognitionException {
        decl_access_qualifier_return retval = new 
decl_access_qualifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token qual=null;
        Token Kconst18=null;
        Token Kvolatile19=null;
        CommonTree qual_tree=null;
        CommonTree Kconst18_tree=null;
        CommonTree Kvolatile19_tree=null;
        RewriteRuleTokenStream stream_Kconst=new 
RewriteRuleTokenStream(adaptor,"token Kconst");
        RewriteRuleTokenStream stream_Kvolatile=new 
RewriteRuleTokenStream(adaptor,"token Kvolatile");
         boolean allowed = true;
        try {
            // src/org/parrotcode/hlasm/antlr/HlasmSyntax.g:206:2: 
(qual= ( Kconst | Kvolatile ) -> {allowed}? $qual ->)
            // src/org/parrotcode/hlasm/antlr/HlasmSyntax.g:206:4: qual= 
( Kconst | Kvolatile )
            {
            // src/org/parrotcode/hlasm/antlr/HlasmSyntax.g:206:9: ( 
Kconst | Kvolatile )
            int alt9=2;
            int LA9_0 = input.LA(1);
            if ( (LA9_0==Kconst) ) { alt9=1; }
            else if ( (LA9_0==Kvolatile) ) { alt9=2; }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae = new 
NoViableAltException("206:9: ( Kconst | Kvolatile )", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 : // 
src/org/parrotcode/hlasm/antlr/HlasmSyntax.g:206:10: Kconst
                    {
                    Kconst18=(Token)input.LT(1);
                    
match(input,Kconst,FOLLOW_Kconst_in_decl_access_qualifier498); if 
(failed) return retval;
                    if ( backtracking==0 ) stream_Kconst.add(Kconst18);
                    }
                    break;
                case 2 : // 
src/org/parrotcode/hlasm/antlr/HlasmSyntax.g:207:4: Kvolatile
                    {
                    Kvolatile19=(Token)input.LT(1);
                    
match(input,Kvolatile,FOLLOW_Kvolatile_in_decl_access_qualifier503); if 
(failed) return retval;
                    if ( backtracking==0 ) 
stream_Kvolatile.add(Kvolatile19);
                    }
                    break;
            }
            if ( backtracking==0 ) {
                        if 
(((decl_specifiers_scope)decl_specifiers_stack.peek()).accessQuals.contains(qual.getText()))
                        {
                                say("Redundant access qualifier " + 
qual.getText());
                                allowed = false;
                        } else {
                                say("Adding acc.qual. " + qual.getText());
                                
((decl_specifiers_scope)decl_specifiers_stack.peek()).accessQuals.add(qual.getText());
                        }
            }
            // AST REWRITE
            // elements: qual
            // token labels: qual
            // rule labels: retval
            // token list labels:
            // rule list labels:
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_qual=new 
RewriteRuleTokenStream(adaptor,"token qual",qual);
            RewriteRuleSubtreeStream stream_retval=new 
RewriteRuleSubtreeStream(adaptor,"token 
retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            // 220:3: -> {allowed}? $qual
            if (allowed) { adaptor.addChild(root_0, stream_qual.next()); }
            else // 221:3: ->
            { root_0 = null; }
            } }

            retval.stop = input.LT(-1);
            if ( backtracking==0 ) {
                retval.tree = 
(CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, 
retval.stop);
            }
        }


From siemsen at UCAR.EDU  Sun Oct  7 09:04:05 2007
From: siemsen at UCAR.EDU (Pete Siemsen)
Date: Sun, 7 Oct 2007 10:04:05 -0600
Subject: [antlr-interest] what means "mismatched input 'xxx' expecting
	set null"
In-Reply-To: <20071007055730.A8FFA11EB4C@www.antlr.org>
References: <E8EF663C-5B71-49A1-8F5C-F47EEC2B5958@UCAR.EDU>
	<20071007055730.A8FFA11EB4C@www.antlr.org>
Message-ID: <D90B8D72-E042-4885-AB0D-3BD76D98BF46@UCAR.EDU>

Gavin,

That was the problem.  I specified whitespace, and now it works.

Thank you very much!

-- Pete



On Oct 6, 2007, at 11:57 PM, Gavin Lambert wrote:

> At 17:51 7/10/2007, Pete Siemsen wrote:
>> PragmaInclude
>> : INCLUDE LPAREN f=StringConstant RPAREN
>> ;
> [...]
>> The above grammar produces the error.  What's wrong?
>
> Since PragmaInclude is a lexer rule, it won't discard whitespace  
> (or to be more specific, it won't generate whitespace tokens and  
> then either skip them or push them onto a hidden channel).  So  
> anywhere that whitespace may occur within a lexer rule you will  
> need to explicitly specify it.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/71dfeec1/attachment.html 

From siemsen at UCAR.EDU  Sun Oct  7 09:11:16 2007
From: siemsen at UCAR.EDU (Pete Siemsen)
Date: Sun, 7 Oct 2007 10:11:16 -0600
Subject: [antlr-interest] what means "mismatched input 'xxx' expecting
	set	null"
In-Reply-To: <47087803.6050808@Yahoo.com>
References: <E8EF663C-5B71-49A1-8F5C-F47EEC2B5958@UCAR.EDU>
	<47087803.6050808@Yahoo.com>
Message-ID: <69BFF53F-2221-4A41-BD23-A3D579B20555@UCAR.EDU>

Austin,

> You don't provide a definition of StringConstant. Does it perchance  
> start with a SINGLEQUOTE instead of a DOUBLEQUOTE?

When I cut/pasted the grammar in the message that started this  
thread, I somehow missed two rules at the end.  Sorry about that.   
Appended is a newer example grammar that addresses that problem and  
the ones you mention below.

> Also, your examples include backslashes, but your StringCharacter  
> definition implicitly excludes them.

Perhaps the appended grammar is better about this.

> Finally, your StringCharacter definition is just dumb. If you want  
> to exclude certain characters, use the ~ (tilde) exclusion  
> character. Don't code around them. It took me a trip to an ascii  
> table to figure out what you were doing. Had you asked earlier this  
> afternoon, when my laptop wasn't in wifi range of the internet, I  
> wouldn't have had one available.

Quite right.  The appended grammar is better.

But it still exhibited the problem with "mismatched input 'include'  
expecting set null".  Another person answered this thread, explaining  
that I have to explicitly specify whitespace in lexer rules like the  
PragmaInclude rule.  I did so and fixed the problem.

Thank you very much!

-- Pete


grammar cimmof2java;

tokens {
     BACKSLASH       = '\\'              ;
     DOUBLEQUOTE     = '"'               ;
     INCLUDE         = 'include'         ;
     LOCALE          = 'locale'          ;
     LPAREN          = '('               ;
     PRAGMA          = '#pragma'         ;
     RPAREN          = ')'               ;
     SINGLEQUOTE     = '\''              ;
}


mofSpecification
	: (mofProduction)+
	;

mofProduction
	: compilerDirective
     ;

compilerDirective
	: PRAGMA (PragmaInclude | pragmaLocale)
	;

PragmaInclude
	: INCLUDE WhiteSpace LPAREN f=StringConstant RPAREN
	;

pragmaLocale
	: LOCALE WhiteSpace LPAREN StringConstant RPAREN
	;

WhiteSpace
	: ( ' ' | '\t' | '\n' | '\r')+ {$channel=HIDDEN;}
	;

StringConstant
     : DOUBLEQUOTE ( EscapeSequence | StupidEscapeSequence | ~( '\\'  
| '"' ) )* DOUBLEQUOTE
	;

fragment
EscapeSequence
	: BACKSLASH ( 'b' | 't' | 'n' | 'f' | 'r' | DOUBLEQUOTE |  
SINGLEQUOTE | BACKSLASH)
	| HexEscape
	;

fragment
StupidEscapeSequence
	: BACKSLASH ( 'C' | 'P' )
	;

fragment
HexEscape
	: BACKSLASH 'x' HexDigit
	| BACKSLASH 'x' HexDigit HexDigit
	| BACKSLASH 'x' HexDigit HexDigit HexDigit
	| BACKSLASH 'x' HexDigit HexDigit HexDigit HexDigit
	;
	
fragment
HexDigit
	: ('0'..'9'|'a'..'f'|'A'..'F') ;

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/4a2bcae8/attachment-0001.html 

From siemsen at UCAR.EDU  Sun Oct  7 11:37:20 2007
From: siemsen at UCAR.EDU (Pete Siemsen)
Date: Sun, 7 Oct 2007 12:37:20 -0600
Subject: [antlr-interest] how to report errors in include files
Message-ID: <E9A7A05E-0037-492B-A2EC-B89B9276BCC5@UCAR.EDU>

Can I make ANTLR show source file names in error messages?

I'm developing a grammar to translate a set of about 1300 source  
files.  The files have to be processed in a certain order, so there's  
a single file that has about 1300 "include" statements.  By pointing  
my ANTLR 3.0.1 translator at the single source file, the entire set  
is processed as if it were one giant file.  My translator now handles  
the include files fine, thanks to help from this list.  As I  
expected, I'm seeing various parser error messages because my grammar  
isn't quite correct yet. The trouble is that the error messages don't  
tell me which include file the error occurred in.

I tried putting debugging lines in the code that handles the include  
statements.  Now I see about 1300 messages that say "opening include  
file xyz".  The handling of include files happens in the lexer phase,  
so I see all 1300 of those messages first, followed by all the  
messages about parser errors.  The latter messages have line numbers,  
but not file names, so there's no way to relate the messages to the  
files.

I could approach this problem outside ANTLR by running the translator  
on each individual file, but I'm hoping for a better method.

-- Pete



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/dbbef065/attachment.html 

From robfinneran at gmail.com  Sun Oct  7 12:05:59 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Sun, 7 Oct 2007 12:05:59 -0700
Subject: [antlr-interest] how to report errors in include files
In-Reply-To: <E9A7A05E-0037-492B-A2EC-B89B9276BCC5@UCAR.EDU>
References: <E9A7A05E-0037-492B-A2EC-B89B9276BCC5@UCAR.EDU>
Message-ID: <a7e86e130710071205o5f6746b7n62e3c2cea727720b@mail.gmail.com>

Hi Pete,

One idea would be to not reset() the line counter. You would then need
to map the virtual line number (like line 127585) to the actual file
and actual line number (like line 123).

Just an idea!

On 10/7/07, Pete Siemsen <siemsen at ucar.edu> wrote:
>
> Can I make ANTLR show source file names in error messages?
>
> I'm developing a grammar to translate a set of about 1300 source files.  The
> files have to be processed in a certain order, so there's a single file that
> has about 1300 "include" statements.  By pointing my ANTLR 3.0.1 translator
> at the single source file, the entire set is processed as if it were one
> giant file.  My translator now handles the include files fine, thanks to
> help from this list.  As I expected, I'm seeing various parser error
> messages because my grammar isn't quite correct yet. The trouble is that the
> error messages don't tell me which include file the error occurred in.
>
> I tried putting debugging lines in the code that handles the include
> statements.  Now I see about 1300 messages that say "opening include file
> xyz".  The handling of include files happens in the lexer phase, so I see
> all 1300 of those messages first, followed by all the messages about parser
> errors.  The latter messages have line numbers, but not file names, so
> there's no way to relate the messages to the files.
>
> I could approach this problem outside ANTLR by running the translator on
> each individual file, but I'm hoping for a better method.
>
>
> -- Pete
>
>
>
>

From jstpierre-antlr at mecheye.net  Sun Oct  7 14:33:18 2007
From: jstpierre-antlr at mecheye.net (ANTLR Mailing List)
Date: Sun, 7 Oct 2007 17:33:18 -0400
Subject: [antlr-interest] ANTLR Target Language Templates (ActionScript3)
Message-ID: <4ff3ab470710071433u355ed745p61356761ec41bd73@mail.gmail.com>

Hello everyone, I am in the process of building the ANTLR runtime and
language templates for ActionScript 3..

  The templates and runtime are pretty much a direct Java port, because the
languages are extremely similar.

  There are a couple questions that stump me though:

  a) How are return types in ANTLR grammars formatted by the template.

      Syntax in ActionScript 3 for variable creation is the following:
      var variableName:variableType = variableAssignment;

      which differs from Java's syntax.

  b) How do you create new files via the templates. I don't think you can,
and I may need
             to modify the ANTLR Tool, but this is important because the
ActionScript 3 compiler
            (Flex) will not allow inline classes, it has a strict one class
per file definition (It does allow
            "private-scoped" classes outside the package declaration though,
this may be an answer.)

  I thank the ANTLR team so much, you have solved a lot of problems in my
project.

  I hope to hear from you,
     JP St. Pierre.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/4bc592f8/attachment.html 

From OJAY78 at gmx.de  Sun Oct  7 14:59:07 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Sun, 07 Oct 2007 23:59:07 +0200
Subject: [antlr-interest] Fwd: How can I check in a code section of which
	type a token is?
Message-ID: <20071007215907.156570@gmx.net>


Hi @all,

I have such an Rule alternative
'IsEqual''('a=function_type ',' b=identifier','c=(STRING_CONST|identifier)')'
	{

		if ($c.type==STRING_CONST)????
}

How can I detect inside my code Section if c is of the typ STRING_CONST or identifier. Thanks for your help!!
-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From Austin_Hastings at Yahoo.com  Sun Oct  7 16:56:39 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 07 Oct 2007 19:56:39 -0400
Subject: [antlr-interest] Fwd: How can I check in a code section of
 which type a token is?
In-Reply-To: <20071007215907.156570@gmx.net>
References: <20071007215907.156570@gmx.net>
Message-ID: <47097237.8010906@Yahoo.com>

OJ,

You could check if the first character of $c.text was a double-quote (").

Or you could put logic in the grammar to handle that in a subrule:

value_param returns [ value ]
    : STRING_CONST { $value = $STRING_CONST.text; }
    | identifier { $value = myFetchValueFunction($identifier.text); }
    ;

=Austin


OJAY78 at gmx.de wrote:
> Hi @all,
>
> I have such an Rule alternative
> 'IsEqual''('a=function_type ',' b=identifier','c=(STRING_CONST|identifier)')'
> 	{
>
> 		if ($c.type==STRING_CONST)????
> }
>
> How can I detect inside my code Section if c is of the typ STRING_CONST or identifier. Thanks for your help!!
>   


From Austin_Hastings at Yahoo.com  Sun Oct  7 18:32:08 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 07 Oct 2007 21:32:08 -0400
Subject: [antlr-interest] Question: What's the right way to do #line
	processing in v3?
Message-ID: <47098898.1000106@Yahoo.com>

The subject line says it all.

I'm trying to do C-like, and so I need #line processing. I'm sure this 
problem has been solved before, so can anyone shed some light on the 
right approach?

=Austin


From jcrites at gmail.com  Sun Oct  7 18:46:51 2007
From: jcrites at gmail.com (Justin Crites)
Date: Sun, 7 Oct 2007 18:46:51 -0700
Subject: [antlr-interest] Handling optional spaces
Message-ID: <1d3e8630710071846t4d9602eald7da764105b02a14@mail.gmail.com>

Hi there,

I am just getting started using ANTLR for a toy language I'm developing.  I
am trying to understand, why do these two grammars behave differently?

1)

expr     :    OptSpace ID OptSpace;

OptSpace :    ' '*;

2)

expr     :    ' '* ID ' '*;

In grammar #1, the string "x" does not match, and I get mismatched token
exceptions.  It looks like ANTLR is trying to match OptSpace and failing.
This confuses me because OptSpace's body is just ' '* which should be able
to match nothing, I thought.

Why do these two grammars behave differently?  Does OptSpace always have to
match something, even if its body is potentially empty?

More generally, how can I find out about and control ANTLR's handling of
whitespace?  I observed the behavior that strings with spaces in them can be
parsed even if space is not in the language definition anywhere.  For
example, if I have a rule like:

expr : ID+;

It will match input like "a b", even though technically " " should not be
matched by anything.  How can I make ANTLR _not_ accept strings like this?
Would I have to write all my rules like this?

expr : ID | (ID Space expr);

Thanks for your help.

-- 
Justin Crites
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/24ecb5dc/attachment.html 

From Austin_Hastings at Yahoo.com  Sun Oct  7 19:24:10 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 07 Oct 2007 22:24:10 -0400
Subject: [antlr-interest] Handling optional spaces
In-Reply-To: <1d3e8630710071846t4d9602eald7da764105b02a14@mail.gmail.com>
References: <1d3e8630710071846t4d9602eald7da764105b02a14@mail.gmail.com>
Message-ID: <470994CA.2030602@Yahoo.com>

You didn't include the full grammar, so it's hard to know what's going 
on. I'd bet it has something to do with how you defined ID, and whether 
you have a WHITESPACE or WS rule.

=Austin

Justin Crites wrote:
> Hi there,
>
> I am just getting started using ANTLR for a toy language I'm 
> developing.  I am trying to understand, why do these two grammars 
> behave differently?
>
> 1)
>
> expr     :    OptSpace ID OptSpace;
>
> OptSpace :    ' '*;
>
> 2)
>
> expr     :    ' '* ID ' '*;
>
> In grammar #1, the string "x" does not match, and I get mismatched 
> token exceptions.  It looks like ANTLR is trying to match OptSpace and 
> failing.  This confuses me because OptSpace's body is just ' '* which 
> should be able to match nothing, I thought.
>
> Why do these two grammars behave differently?  Does OptSpace always 
> have to match something, even if its body is potentially empty?
>
> More generally, how can I find out about and control ANTLR's handling 
> of whitespace?  I observed the behavior that strings with spaces in 
> them can be parsed even if space is not in the language definition 
> anywhere.  For example, if I have a rule like:
>
> expr : ID+;
>
> It will match input like "a b", even though technically " " should not 
> be matched by anything.  How can I make ANTLR _not_ accept strings 
> like this?  Would I have to write all my rules like this?
>
> expr : ID | (ID Space expr);
>
> Thanks for your help.
>
> -- 
> Justin Crites
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.4/1055 - Release Date: 10/7/2007 10:24 AM
>   


From jcrites at gmail.com  Sun Oct  7 20:08:22 2007
From: jcrites at gmail.com (Justin Crites)
Date: Sun, 7 Oct 2007 20:08:22 -0700
Subject: [antlr-interest] Handling optional spaces
Message-ID: <1d3e8630710072008h61d5586cl239cc9dbd7b75dc5@mail.gmail.com>

This is the full grammar that fails to parse "a" (MismatchedTokenException):

expr     :    OptSpace ID OptSpace;
ID  :   ('a'..'z'|'A'..'Z')+ ;
OptSpace :    ' '*;

This is the full grammar that succeeds:

expr     :    ' '* ID ' '*;
ID  :   ('a'..'z'|'A'..'Z')+ ;

 These grammars are identical except that in the latter I have replaced
OptSpace with its definition in the rule "expr".

In my mind these grammars should behave identically -- I would expect the
grammar specification to follow a "substitution rule" such that if I have a
rule A : X; then I can replace instances of "A" in other rules with simply
"X" and get identical behavior.  However, even though OptSpace : ' '*; the
rule

expr : OptSpace ID OptSpace

 behaves differently than:

expr : ' '* ID ' '*;  // substituting ' '* for OptSpace

Does this clarify my question?  Thank you.

-- 
Justin Crites
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/aba58093/attachment.html 

From Austin_Hastings at Yahoo.com  Sun Oct  7 21:27:05 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 08 Oct 2007 00:27:05 -0400
Subject: [antlr-interest] Handling optional spaces
In-Reply-To: <1d3e8630710072008h61d5586cl239cc9dbd7b75dc5@mail.gmail.com>
References: <1d3e8630710072008h61d5586cl239cc9dbd7b75dc5@mail.gmail.com>
Message-ID: <4709B199.8030102@Yahoo.com>

I had a look at the generated code. It's a bug, IMO. I'm surprised there 
wasn't a warning emitted.

CLIFFS:
1. It should have griped at you.
2. You need to change into the "antlr paradigm" to get around whitespace 
issues.


The "reason" for the difference is that you are doing a combined 
parser/lexer. So the first case generated a parser that expects to see 
Token#1, Token#2, Token#1 on its input (assuming that OptSpace = 
Token#1, and ID = Token#2).

The "inline" version generated code that handled the detection of 
optional spaces in place. As a result, it was expecting {do some work} 
Token #2 {do some work}.

The second form was what the lexer was giving it, because your OptSpace 
could match an empty string. Given an empty string, the lexer has the 
choice of doing nothing, or generating OptSpace. It chooses to "do 
nothing" and get on with processing the "a".

The approach "recommended" by Antlr seems to be to do a "positive 
recognition" of white space, and then throw it away or hide it. Hence 
you'll see definitions like

WS : (' ' | '\t' | '\r' | '\n')+ { skip(); }

This recognizes that WS is a token separate from other tokens (so the 
Lexer knows to stop working on those tokens and work on this one) but 
then once the token is recognized, the skip() chucks it in the trash.

=Austin



Justin Crites wrote:
> This is the full grammar that fails to parse "a" 
> (MismatchedTokenException):
>  
> expr     :    OptSpace ID OptSpace;
> ID  :   ('a'..'z'|'A'..'Z')+ ;
> OptSpace :    ' '*;
>
> This is the full grammar that succeeds:
>
> expr     :    ' '* ID ' '*;
> ID  :   ('a'..'z'|'A'..'Z')+ ;
>
> These grammars are identical except that in the latter I have replaced 
> OptSpace with its definition in the rule "expr".
>
> In my mind these grammars should behave identically -- I would expect 
> the grammar specification to follow a "substitution rule" such that if 
> I have a rule A : X; then I can replace instances of "A" in other 
> rules with simply "X" and get identical behavior.  However, even 
> though OptSpace : ' '*; the rule
>
> expr : OptSpace ID OptSpace
>
> behaves differently than:
>
> expr : ' '* ID ' '*;  // substituting ' '* for OptSpace
>
> Does this clarify my question?  Thank you.
>
> -- 
> Justin Crites
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.4/1055 - Release Date: 10/7/2007 10:24 AM
>   


From matthieu at offthelip.org  Sun Oct  7 22:34:42 2007
From: matthieu at offthelip.org (Matthieu Riou)
Date: Sun, 7 Oct 2007 22:34:42 -0700
Subject: [antlr-interest] XML island grammar
Message-ID: <fbdc6a970710072234r50103711ga5eb18d93dfc7fc6@mail.gmail.com>

Hi,

I have a main grammar that can embed some pieces of XML. A bit like E4X in
Javascript if you're familiar with the language. I'd like to handle this
with an island grammar but I'm not so clear on how to do detect the XML
block. I've had a look at the javadoc island grammar example which gives me
a pretty good idea of how to delegate parsing. However detecting XML in the
middle of some code is not as simple as with Javadoc (you can assume /** to
be a uniquely used token but not <).

Here is a code snippet of what I'm trying to parse:

process ExternalCounter {
  receive(my_pl, start_op) (msg_in) {
    resp = <message><counter>0</counter></message>
    while(resp.counter < 10) {
      invoke(partner_pl, partner_start_op) (msg_in)
      resp = receive(partner_pl, partner_reply_op)
    }
    reply resp
  }
}

Any help, idea or pointer would be great. Thanks!

Matthieu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071007/c1cf0734/attachment.html 

From antlr at mirality.co.nz  Mon Oct  8 00:38:17 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 08 Oct 2007 20:38:17 +1300
Subject: [antlr-interest] Handling optional spaces
In-Reply-To: <1d3e8630710071846t4d9602eald7da764105b02a14@mail.gmail.com
 >
References: <1d3e8630710071846t4d9602eald7da764105b02a14@mail.gmail.com>
Message-ID: <20071008073828.0A93311EB89@www.antlr.org>

At 14:46 8/10/2007, Justin Crites wrote:
>expr     :    OptSpace ID OptSpace;
>
>OptSpace :    ' '*;

Lexer rules must never have a path that can match nothing.  This 
leads to infinite loops.  And madness.  Change your OptSpace rule 
to use + (and probably rename it to Space, since it's no longer 
optional) and then use ? against it in the parser rule to indicate 
that it's optional.  Or (if whitespace is unimportant at the 
parser level), just skip it or put it on the hidden channel -- 
then you won't need to refer to it at all.


From dave at badgers-in-foil.co.uk  Mon Oct  8 00:57:08 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 8 Oct 2007 07:57:08 +0000
Subject: [antlr-interest] XML island grammar
In-Reply-To: <fbdc6a970710072234r50103711ga5eb18d93dfc7fc6@mail.gmail.com>
References: <fbdc6a970710072234r50103711ga5eb18d93dfc7fc6@mail.gmail.com>
Message-ID: <20071008075708.GA17750@badgers-in-foil.co.uk>

On Sun, Oct 07, 2007 at 10:34:42PM -0700, Matthieu Riou wrote:
> I have a main grammar that can embed some pieces of XML. A bit like E4X in
> Javascript if you're familiar with the language. I'd like to handle this
> with an island grammar but I'm not so clear on how to do detect the XML
> block. I've had a look at the javadoc island grammar example which gives me
> a pretty good idea of how to delegate parsing. However detecting XML in the
> middle of some code is not as simple as with Javadoc (you can assume /** to
> be a uniquely used token but not <).
> 
> Here is a code snippet of what I'm trying to parse:
> 
> process ExternalCounter {
>   receive(my_pl, start_op) (msg_in) {
>     resp = <message><counter>0</counter></message>
>     while(resp.counter < 10) {
>       invoke(partner_pl, partner_start_op) (msg_in)
>       resp = receive(partner_pl, partner_reply_op)
>     }
>     reply resp
>   }
> }

I've hacked together some stuff that tries to handle this kind of thing.
The overview is that I do a bit of extra admin in order to have the
parser 'direct' the lexical interpretation of the input, and
specifically avoid ANTLR's default behaviour of lexing all input at
startup.


See a slightly old description here,

  http://www.antlr.org/wiki/display/ANTLR3/Island+Grammars+Under+Parser+Control


I have a partial E4X grammar (actionscript4 is basically ECMAscript).
See,

  Main grammar:
  http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/antlr/org/asdt/core/internal/antlr/AS3.g3

  Helper glue code:
  http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/java/uk/co/badgersinfoil/metaas/impl/parser/E4XHelper.java

  E4X grammar (incomplete):
  http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/antlr/uk/co/badgersinfoil/metaas/impl/parser/e4x/E4X.g



hope that helps,
dave

-- 
http://david.holroyd.me.uk/

From Austin_Hastings at Yahoo.com  Mon Oct  8 01:12:32 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 08 Oct 2007 04:12:32 -0400
Subject: [antlr-interest] BUG? - Antlr hoists unhoistable predicates
Message-ID: <4709E670.40302@Yahoo.com>

I was trying to slim down my grammar a bit by combining some rules into 
a single parameterized rule.

decl_specifiers[Boolean permitStorageClass, Boolean permitFunctionSpec]
    : ( accs+=decl_access_qualifier
      | type+=decl_type_spec
      | stcl+=decl_storage_class
      | {$permitFunctionSpec}? func+=decl_function_spec
          )+
    /* blah blah blah */

This would have eliminated several nearly-identical variants.

Unfortunately, Antlr3 hoisted the predicate out of the rule. This 
doesn't work, obviously, because the $permitFunctionSpec is a parameter 
to the rule (which the predicate was hoisted out of...).

In cases like this, Antlr needs to catch the impossibility (detecting 
the use of a rule- or token- field seems a good start) and either not 
hoist, or construct a synthetic predicate with the correct values.

=Austin



From jaluber at gmx.de  Mon Oct  8 02:25:19 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 08 Oct 2007 11:25:19 +0200
Subject: [antlr-interest] BUG? - Antlr hoists unhoistable predicates
In-Reply-To: <4709E670.40302@Yahoo.com>
References: <4709E670.40302@Yahoo.com>
Message-ID: <4709F77F.7020403@gmx.de>

Austin Hastings wrote:
> I was trying to slim down my grammar a bit by combining some rules into
> a single parameterized rule.
> 
> decl_specifiers[Boolean permitStorageClass, Boolean permitFunctionSpec]
>    : ( accs+=decl_access_qualifier
>      | type+=decl_type_spec
>      | stcl+=decl_storage_class
>      | {$permitFunctionSpec}? func+=decl_function_spec
>          )+
>    /* blah blah blah */
> 
> This would have eliminated several nearly-identical variants.
> 
> Unfortunately, Antlr3 hoisted the predicate out of the rule. This
> doesn't work, obviously, because the $permitFunctionSpec is a parameter
> to the rule (which the predicate was hoisted out of...).
> 
> In cases like this, Antlr needs to catch the impossibility (detecting
> the use of a rule- or token- field seems a good start) and either not
> hoist, or construct a synthetic predicate with the correct values.
> 
> =Austin

This isn't a bug, but a design decision. Instead using a parameter use
either a field of the class or - recommended - use a dynamic scope instead.

Best regards,
Johannes Luber

From Austin_Hastings at Yahoo.com  Mon Oct  8 02:37:00 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 08 Oct 2007 05:37:00 -0400
Subject: [antlr-interest] BUG? - Antlr hoists unhoistable predicates
In-Reply-To: <4709F77F.7020403@gmx.de>
References: <4709E670.40302@Yahoo.com> <4709F77F.7020403@gmx.de>
Message-ID: <4709FA3C.60502@Yahoo.com>

I won't contest that various aspects of hoisting are design decisions. 
But the simple fact is that legitimate input syntax in the grammar file 
is compiled, with no warnings or error messages, into faulty output 
code. That's a bug.

If it's hard or impossible to internally suppress hoisting predicates 
when they reference local context, that's fine - emit a diagnostic 
message telling me that I'm making a mistake. I'll happily accept a 
message telling me "you can't do that" instead of chasing around the 
generated code in a java debugger trying to understand why my grammar 
stopped working.

=Austin


Johannes Luber wrote:
> Austin Hastings wrote:
>   
>> I was trying to slim down my grammar a bit by combining some rules into
>> a single parameterized rule.
>>
>> decl_specifiers[Boolean permitStorageClass, Boolean permitFunctionSpec]
>>    : ( accs+=decl_access_qualifier
>>      | type+=decl_type_spec
>>      | stcl+=decl_storage_class
>>      | {$permitFunctionSpec}? func+=decl_function_spec
>>          )+
>>    /* blah blah blah */
>>
>> This would have eliminated several nearly-identical variants.
>>
>> Unfortunately, Antlr3 hoisted the predicate out of the rule. This
>> doesn't work, obviously, because the $permitFunctionSpec is a parameter
>> to the rule (which the predicate was hoisted out of...).
>>
>> In cases like this, Antlr needs to catch the impossibility (detecting
>> the use of a rule- or token- field seems a good start) and either not
>> hoist, or construct a synthetic predicate with the correct values.
>>
>> =Austin
>>     
>
> This isn't a bug, but a design decision. Instead using a parameter use
> either a field of the class or - recommended - use a dynamic scope instead.
>
> Best regards,
> Johannes Luber
>
>
>   


From phyton82 at freenet.de  Mon Oct  8 06:40:20 2007
From: phyton82 at freenet.de (phyton82 at freenet.de)
Date: Mon, 08 Oct 2007 15:40:20 +0200
Subject: [antlr-interest] error(211) in tree grammar --> ???
Message-ID: <E1IesqK-0003Wp-M1@www15.emo.freenet-rz.de>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071008/5b39aa26/attachment-0001.html 
-------------- next part --------------
Hey guys,

I've stumbled upon the same error(211) but in the tree grammar. And my grammar is derived from the Java grammar. I fixed some errors but there are still two I don't know how to fix w/o changing the functunality. May anyone of you expirienced guys have a look?

That'd be awesome.

Ben






-------------- next part --------------
A non-text attachment was scrubbed...
Name: Java.zip
Type: application/x-zip-compressed
Size: 9603 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071008/5b39aa26/attachment-0001.bin 

From andreas.ravnestad at gmail.com  Mon Oct  8 07:51:18 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Mon, 8 Oct 2007 16:51:18 +0200
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
Message-ID: <db3e39e10710080751i45cd24bexbc01dd742871de68@mail.gmail.com>

The W3C uses an operator in their EBNFs designated by a dash (-), and
it is defined as follows (see [1]): A - B matches any string that
matches A but does not match B.

For now, I have simply replaced the dashes with tilde in the ANTLR
grammar, however this is not semantically correct. Is there a
semantically equivalent operator in ANTLR, or is it necessary to
rewrite grammar rules that uses the dash operator?

- Andreas Ravnestad

[1] http://www.w3.org/TR/REC-xml/#sec-notation

From jaluber at gmx.de  Mon Oct  8 07:56:40 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 08 Oct 2007 16:56:40 +0200
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
In-Reply-To: <db3e39e10710080751i45cd24bexbc01dd742871de68@mail.gmail.com>
References: <db3e39e10710080751i45cd24bexbc01dd742871de68@mail.gmail.com>
Message-ID: <470A4528.8030400@gmx.de>

Andreas Ravnestad wrote:
> The W3C uses an operator in their EBNFs designated by a dash (-), and
> it is defined as follows (see [1]): A - B matches any string that
> matches A but does not match B.
> 
> For now, I have simply replaced the dashes with tilde in the ANTLR
> grammar, however this is not semantically correct. Is there a
> semantically equivalent operator in ANTLR, or is it necessary to
> rewrite grammar rules that uses the dash operator?
> 
> - Andreas Ravnestad
> 
> [1] http://www.w3.org/TR/REC-xml/#sec-notation
> 

ANTLR doesn't support this dash notation. For now the only correct way
is create the subset manually.

Best regards,
Johannes Luber

From easjolly at ix.netcom.com  Mon Oct  8 08:59:43 2007
From: easjolly at ix.netcom.com (Susan Jolly)
Date: Mon, 8 Oct 2007 09:59:43 -0600
Subject: [antlr-interest] XML island grammar
Message-ID: <E1Iev0P-0000s1-5Z@elasmtp-junco.atl.sa.earthlink.net>

If you don't have a lot of different XML elements, you could let the lexer
look for "<xyz" rather than "<". Alternatively, could you have "<"
characters that aren't part of XML tags be escaped with &lt;?

Another possibility is to have your main lexer grab an entire XML section
plus tags and then actually lex that section with another lexer.  You'd use
something like the following to grab the section:
XML: '<' ( options {greedy=false;} : . )* '/>';

The key here is that with ANTLR v3 you can override the emit method in the
lexer.  See "Emitting More Than One Token per Lexer Rule" on p. 94 of
Section 4.3 in the ANTLR book. In other words, you don't have to let the
first lexer emit the whole enchilada as a single token.  

The emit method can do anything it wants, including invoking another lexer
to "re-tokenize".  This is actually simpler than the way v2 handled multiple
lexers using what it called a "shared input stream" and requiring that the
main lexer be able to detect just the start of the island as a token.

HTH 



From jaluber at gmx.de  Mon Oct  8 09:24:35 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 08 Oct 2007 18:24:35 +0200
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
In-Reply-To: <db3e39e10710080821q7c6640b8t1b83fe4205eb9b9e@mail.gmail.com>
References: <db3e39e10710080751i45cd24bexbc01dd742871de68@mail.gmail.com>	
	<470A4528.8030400@gmx.de>
	<db3e39e10710080821q7c6640b8t1b83fe4205eb9b9e@mail.gmail.com>
Message-ID: <470A59C3.2040200@gmx.de>

Andreas Ravnestad wrote:
> On 10/8/07, Johannes Luber <jaluber at gmx.de> wrote:
>> ANTLR doesn't support this dash notation. For now the only correct way
>> is create the subset manually.
>>
>> Best regards,
>> Johannes Luber
>>
> 
> 
> I see, how unfortunate :) Being new to ANTLR, I am not quite sure how
> to "create the subsets manually". Could you point me to an example?
> 
> -Andreas
> 
I don't know any example. I would simply create a rule which matches the
 subset without the referencing the "parent"

Best regards,
Johannes Luber


From matthieu at offthelip.org  Mon Oct  8 11:28:16 2007
From: matthieu at offthelip.org (Matthieu Riou)
Date: Mon, 8 Oct 2007 11:28:16 -0700
Subject: [antlr-interest] XML island grammar
In-Reply-To: <20071008075708.GA17750@badgers-in-foil.co.uk>
References: <fbdc6a970710072234r50103711ga5eb18d93dfc7fc6@mail.gmail.com>
	<20071008075708.GA17750@badgers-in-foil.co.uk>
Message-ID: <fbdc6a970710081128ub319fa0p244ce41214895f6c@mail.gmail.com>

Thanks a lot, that's really helpful! I roughly see how this can be pieced
together to get something working although I don't fully understand how the
lexer can recognize a bad match.

Say that you have something that looks like a regular expression but isn't
really one, the island grammar parser won't be able to match it, so you have
to "refuse" the match so that another rule in the main grammar can be
checked, right? How does that work, does an exception thrown in
parseRegexpLiteral or parseXMLLiteral forces the main grammar parser to go
look for another match?

Thanks again!
Matthieu

On 10/8/07, David Holroyd <dave at badgers-in-foil.co.uk> wrote:
>
> On Sun, Oct 07, 2007 at 10:34:42PM -0700, Matthieu Riou wrote:
> > I have a main grammar that can embed some pieces of XML. A bit like E4X
> in
> > Javascript if you're familiar with the language. I'd like to handle this
> > with an island grammar but I'm not so clear on how to do detect the XML
> > block. I've had a look at the javadoc island grammar example which gives
> me
> > a pretty good idea of how to delegate parsing. However detecting XML in
> the
> > middle of some code is not as simple as with Javadoc (you can assume /**
> to
> > be a uniquely used token but not <).
> >
> > Here is a code snippet of what I'm trying to parse:
> >
> > process ExternalCounter {
> >   receive(my_pl, start_op) (msg_in) {
> >     resp = <message><counter>0</counter></message>
> >     while(resp.counter < 10) {
> >       invoke(partner_pl, partner_start_op) (msg_in)
> >       resp = receive(partner_pl, partner_reply_op)
> >     }
> >     reply resp
> >   }
> > }
>
> I've hacked together some stuff that tries to handle this kind of thing.
> The overview is that I do a bit of extra admin in order to have the
> parser 'direct' the lexical interpretation of the input, and
> specifically avoid ANTLR's default behaviour of lexing all input at
> startup.
>
>
> See a slightly old description here,
>
>
> http://www.antlr.org/wiki/display/ANTLR3/Island+Grammars+Under+Parser+Control
>
>
> I have a partial E4X grammar (actionscript4 is basically ECMAscript).
> See,
>
>   Main grammar:
>
> http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/antlr/org/asdt/core/internal/antlr/AS3.g3
>
>   Helper glue code:
>
> http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/java/uk/co/badgersinfoil/metaas/impl/parser/E4XHelper.java
>
>   E4X grammar (incomplete):
>
> http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/antlr/uk/co/badgersinfoil/metaas/impl/parser/e4x/E4X.g
>
>
>
> hope that helps,
> dave
>
> --
> http://david.holroyd.me.uk/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071008/c8d093fd/attachment.html 

From matthieu at offthelip.org  Mon Oct  8 11:33:27 2007
From: matthieu at offthelip.org (Matthieu Riou)
Date: Mon, 8 Oct 2007 11:33:27 -0700
Subject: [antlr-interest] XML island grammar
In-Reply-To: <E1Iev0P-0000s1-5Z@elasmtp-junco.atl.sa.earthlink.net>
References: <E1Iev0P-0000s1-5Z@elasmtp-junco.atl.sa.earthlink.net>
Message-ID: <fbdc6a970710081133y31919a0bq2c764726a8800cc6@mail.gmail.com>

On 10/8/07, Susan Jolly <easjolly at ix.netcom.com> wrote:
>
> If you don't have a lot of different XML elements, you could let the lexer
> look for "<xyz" rather than "<". Alternatively, could you have "<"
> characters that aren't part of XML tags be escaped with &lt;?


Unfortunately the grammar must accept any XML snippet and I've had enough of
XML to hate the &lt; escaping :)

Another possibility is to have your main lexer grab an entire XML section
> plus tags and then actually lex that section with another lexer.  You'd
> use
> something like the following to grab the section:
> XML: '<' ( options {greedy=false;} : . )* '/>';


I can give that a try although if I have something like:

<foo> <bar> baz </bar> </foo>

wouldn't that match only up to the closing bar element (hence ignoring the
closing foo)?

Thanks!
Matthieu

The key here is that with ANTLR v3 you can override the emit method in the
> lexer.  See "Emitting More Than One Token per Lexer Rule" on p. 94 of
> Section 4.3 in the ANTLR book. In other words, you don't have to let the
> first lexer emit the whole enchilada as a single token.
>
> The emit method can do anything it wants, including invoking another lexer
> to "re-tokenize".  This is actually simpler than the way v2 handled
> multiple
> lexers using what it called a "shared input stream" and requiring that the
> main lexer be able to detect just the start of the island as a token.
>
> HTH
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071008/3cbe833a/attachment.html 

From pink at odahoda.de  Mon Oct  8 11:35:24 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Mon, 08 Oct 2007 20:35:24 +0200
Subject: [antlr-interest] BUG? - Antlr hoists unhoistable predicates
References: <4709E670.40302@Yahoo.com> <4709F77F.7020403@gmx.de>
	<4709FA3C.60502@Yahoo.com>
Message-ID: <fedt9c$shb$1@sea.gmane.org>

Good evening,

Austin Hastings wrote:
> Johannes Luber wrote:
>> Austin Hastings wrote:
>>   
>>> Unfortunately, Antlr3 hoisted the predicate out of the rule. This
>>> doesn't work, obviously, because the $permitFunctionSpec is a parameter
>>> to the rule (which the predicate was hoisted out of...).
>>>
>>> In cases like this, Antlr needs to catch the impossibility (detecting
>>> the use of a rule- or token- field seems a good start) and either not
>>> hoist, or construct a synthetic predicate with the correct values.
>>
>> This isn't a bug, but a design decision. Instead using a parameter use
>> either a field of the class or - recommended - use a dynamic scope
>> instead.
>>
> I won't contest that various aspects of hoisting are design decisions.
> But the simple fact is that legitimate input syntax in the grammar file
> is compiled, with no warnings or error messages, into faulty output
> code. That's a bug.
> 
> If it's hard or impossible to internally suppress hoisting predicates
> when they reference local context, that's fine - emit a diagnostic
> message telling me that I'm making a mistake. I'll happily accept a
> message telling me "you can't do that" instead of chasing around the
> generated code in a java debugger trying to understand why my grammar
> stopped working.

Unfortunately this bug is very hard to catch, because the contents of {..}?
is code in the target language (after replacing $thingies), which is an
opaque blob of character for the (target agnostic) tool.
ANTLR might complain about suspicious $... replacements in hoistable
predicates, but that covers only a part of the possible bugs.
IMHO the approach that code in actions should be debugged using target
specific tools is a good trade off to keep the complexity of ANTLR at a
reasonable level.



From lgcraymer at yahoo.com  Mon Oct  8 13:36:52 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Mon, 8 Oct 2007 13:36:52 -0700 (PDT)
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
In-Reply-To: <db3e39e10710080751i45cd24bexbc01dd742871de68@mail.gmail.com>
Message-ID: <304845.68432.qm@web55904.mail.re3.yahoo.com>

The W3C spec uses a bastardized extension of BNF that
supports pattern matching and comparison of matched
patterns (the '-' operator that you are concerned
with).  To process that requires re-lexing of input;
ANTLR does not support that, nor does any other sane
lexer generator.  What you need to do instead is to
match a string, then check in action code if it
satisfies the "A - B" constraint and type the
resulting token accordingly.

XML was not constructed to obey principles of formal
language theory and suffers as a result.  Some of us
vacillate between considering it a disease and
thinking that it has become sufficiently widespread to
be useful despite the ugliness of things built on top
of it.

--Loring

--- Andreas Ravnestad <andreas.ravnestad at gmail.com>
wrote:

> The W3C uses an operator in their EBNFs designated
> by a dash (-), and
> it is defined as follows (see [1]): A - B matches
> any string that
> matches A but does not match B.
> 
> For now, I have simply replaced the dashes with
> tilde in the ANTLR
> grammar, however this is not semantically correct.
> Is there a
> semantically equivalent operator in ANTLR, or is it
> necessary to
> rewrite grammar rules that uses the dash operator?
> 
> - Andreas Ravnestad
> 
> [1] http://www.w3.org/TR/REC-xml/#sec-notation
> 



      ____________________________________________________________________________________
Shape Yahoo! in your own image.  Join our Network Research Panel today!   http://surveylink.yahoo.com/gmrs/yahoo_panel_invite.asp?a=7 



From r.mark.volkmann at gmail.com  Mon Oct  8 14:05:00 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 8 Oct 2007 16:05:00 -0500
Subject: [antlr-interest] imaginary nodes
Message-ID: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>

In "The Definitive ANTLR Reference" chapter 7, page 166 of my printed
copy, in the discussion about adding imaginary nodes to an AST it says
"The imaginary token must be defined elsewhere in a grammar or in the
tokens section." I can't seem to find an example of where this is done
in the book though. Can someone give me an example of the syntax to
define an imaginary node in a grammar?

-- 
R. Mark Volkmann
Object Computing, Inc.

From win at wincent.com  Mon Oct  8 14:11:03 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Mon, 8 Oct 2007 23:11:03 +0200
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
In-Reply-To: <304845.68432.qm@web55904.mail.re3.yahoo.com>
References: <304845.68432.qm@web55904.mail.re3.yahoo.com>
Message-ID: <5C36EEE0-37E2-4501-9CAA-A27E2B3CC88C@wincent.com>

El 8/10/2007, a las 22:36, Loring Craymer escribi?:

> The W3C spec uses a bastardized extension of BNF that
> supports pattern matching and comparison of matched
> patterns (the '-' operator that you are concerned
> with).  To process that requires re-lexing of input;
> ANTLR does not support that, nor does any other sane
> lexer generator.

I may have misinterpreted you but I think you're wrong about that.  
The operation that Andreas talks about is implemented in Ragel, for  
example, as a "difference" operator. Ragel (<http://www.cs.queensu.ca/ 
~thurston/ragel/>) is a (very sane) finite state machine compiler  
which implements the operator as follows:

> The difference operation produces a machine that matches strings  
> that are in machine one but are not in machine two. To achieve  
> subtraction, a union is performed on the two machines. After the  
> result has been made deterministic, any final state that came from  
> machine two or is a combination of states involving a final state  
> from machine two has its final state status revoked. As with  
> intersection, the operation is completed by pruning any path that  
> does not lead to a final state. The following example demonstrates  
> the use of subtraction to exclude specific cases from a set.

So this is a straightforward combination of two finite state machines  
and no re-lexing is required in order to implement it. If you look at  
the Ragel user manual (<http://www.cs.queensu.ca/~thurston/ragel/ 
ragel-guide-5.24.pdf>) you can see some nice state machine diagrams  
that illustrate exactly what's being done.

Best wishes,
Wincent


From dave at badgers-in-foil.co.uk  Mon Oct  8 14:25:24 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 8 Oct 2007 21:25:24 +0000
Subject: [antlr-interest] XML island grammar
In-Reply-To: <fbdc6a970710081128ub319fa0p244ce41214895f6c@mail.gmail.com>
References: <fbdc6a970710072234r50103711ga5eb18d93dfc7fc6@mail.gmail.com>
	<20071008075708.GA17750@badgers-in-foil.co.uk>
	<fbdc6a970710081128ub319fa0p244ce41214895f6c@mail.gmail.com>
Message-ID: <20071008212523.GA26715@badgers-in-foil.co.uk>

On Mon, Oct 08, 2007 at 11:28:16AM -0700, Matthieu Riou wrote:
> Thanks a lot, that's really helpful! I roughly see how this can be pieced
> together to get something working although I don't fully understand how the
> lexer can recognize a bad match.
> 
> Say that you have something that looks like a regular expression but isn't
> really one, the island grammar parser won't be able to match it, so you have
> to "refuse" the match so that another rule in the main grammar can be
> checked, right? How does that work, does an exception thrown in
> parseRegexpLiteral or parseXMLLiteral forces the main grammar parser to go
> look for another match?

In both examples, the 'outer' parser recognises a boundary token known
to the outer lexer (i.e. '/' for a regexp or '<' for E4X) and at that
point, has to commit to interpreting the subsequent input with the
island lexer/parser (at least until recognising the next boundary token
that signals time to leave the island).  When the parser sees this token
in other contexts, it can give the normal interpretation (i.e. division
or less-than), but when the parser recognises the token in some special
contexts, it will invoke the lexer-switcheroo so that the island grammar
can take over.

So this approach is probably incompatible with backtracking (which works
by throwing exceptions as you describe, I think).


ta,
dave

-- 
http://david.holroyd.me.uk/

From lgcraymer at yahoo.com  Mon Oct  8 14:25:40 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Mon, 8 Oct 2007 14:25:40 -0700 (PDT)
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
In-Reply-To: <5C36EEE0-37E2-4501-9CAA-A27E2B3CC88C@wincent.com>
Message-ID: <457254.88153.qm@web55910.mail.re3.yahoo.com>

Wincent--

Thanks for the pointer.  Of course there are ways to
avoid re-lexing; I was giving the short answer. 
Andreas might be better off generating a Ragel lexer
and integrating that with ANTLR parsers than building
an ANTLR lexer.

--Loring

--- Wincent Colaiuta <win at wincent.com> wrote:

> El 8/10/2007, a las 22:36, Loring Craymer escribi?:
> 
> > The W3C spec uses a bastardized extension of BNF
> that
> > supports pattern matching and comparison of
> matched
> > patterns (the '-' operator that you are concerned
> > with).  To process that requires re-lexing of
> input;
> > ANTLR does not support that, nor does any other
> sane
> > lexer generator.
> 
> I may have misinterpreted you but I think you're
> wrong about that.  
> The operation that Andreas talks about is
> implemented in Ragel, for  
> example, as a "difference" operator. Ragel
> (<http://www.cs.queensu.ca/ 
> ~thurston/ragel/>) is a (very sane) finite state
> machine compiler  
> which implements the operator as follows:
> 
> > The difference operation produces a machine that
> matches strings  
> > that are in machine one but are not in machine
> two. To achieve  
> > subtraction, a union is performed on the two
> machines. After the  
> > result has been made deterministic, any final
> state that came from  
> > machine two or is a combination of states
> involving a final state  
> > from machine two has its final state status
> revoked. As with  
> > intersection, the operation is completed by
> pruning any path that  
> > does not lead to a final state. The following
> example demonstrates  
> > the use of subtraction to exclude specific cases
> from a set.
> 
> So this is a straightforward combination of two
> finite state machines  
> and no re-lexing is required in order to implement
> it. If you look at  
> the Ragel user manual
> (<http://www.cs.queensu.ca/~thurston/ragel/ 
> ragel-guide-5.24.pdf>) you can see some nice state
> machine diagrams  
> that illustrate exactly what's being done.
> 
> Best wishes,
> Wincent
> 
> 



      ____________________________________________________________________________________
Tonight's top picks. What will you watch tonight? Preview the hottest shows on Yahoo! TV.
http://tv.yahoo.com/ 


From thomas.jackson.iii at gmail.com  Mon Oct  8 14:41:22 2007
From: thomas.jackson.iii at gmail.com (Thomas Jackson)
Date: Mon, 8 Oct 2007 17:41:22 -0400
Subject: [antlr-interest] Fwd:  imaginary nodes
In-Reply-To: <2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>
References: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>
	<2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>
Message-ID: <2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>

Forgot to forward to group.....

---------- Forwarded message ----------
From: Thomas Jackson <thomas.jackson.iii at gmail.com>
Date: Oct 8, 2007 5:17 PM
Subject: Re: [antlr-interest] imaginary nodes
To: Mark Volkmann <r.mark.volkmann at gmail.com>

grammar T;

options { output=AST; language=Java; }

tokens {
  PARAGRAPH;
  SENTENCE;
  NOUN;
  VERB;
  ADJECTIVE;
  THIS="this";
  IS="is";
  A="a";
  BAD="bad";
  EXAMPLE="example";
}

parse : THIS IS A BAD EXAMPLE -> ^( PARAGRAPH ^(SENTENCE ^(NOUN EXAMPLE)
^(ADJECTIVE BAD) ^(VERB IS)))
         ;
Hope this helps...

Thanks
Thomas


On 10/8/07, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
>
> In "The Definitive ANTLR Reference" chapter 7, page 166 of my printed
> copy, in the discussion about adding imaginary nodes to an AST it says
> "The imaginary token must be defined elsewhere in a grammar or in the
> tokens section." I can't seem to find an example of where this is done
> in the book though. Can someone give me an example of the syntax to
> define an imaginary node in a grammar?
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
Thomas Jackson

-- 
Thomas Jackson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071008/e225461d/attachment.html 

From dave at badgers-in-foil.co.uk  Mon Oct  8 14:58:07 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 8 Oct 2007 21:58:07 +0000
Subject: [antlr-interest] XML island grammar
In-Reply-To: <fbdc6a970710081133y31919a0bq2c764726a8800cc6@mail.gmail.com>
References: <E1Iev0P-0000s1-5Z@elasmtp-junco.atl.sa.earthlink.net>
	<fbdc6a970710081133y31919a0bq2c764726a8800cc6@mail.gmail.com>
Message-ID: <20071008215805.GB26715@badgers-in-foil.co.uk>

On Mon, Oct 08, 2007 at 11:33:27AM -0700, Matthieu Riou wrote:
> On 10/8/07, Susan Jolly <easjolly at ix.netcom.com> wrote:
> > If you don't have a lot of different XML elements, you could let the lexer
> > look for "<xyz" rather than "<". Alternatively, could you have "<"
> > characters that aren't part of XML tags be escaped with &lt;?
> 
> 
> Unfortunately the grammar must accept any XML snippet and I've had enough of
> XML to hate the &lt; escaping :)
> 
> Another possibility is to have your main lexer grab an entire XML section
> > plus tags and then actually lex that section with another lexer.  You'd
> > use
> > something like the following to grab the section:
> > XML: '<' ( options {greedy=false;} : . )* '/>';
> 
> 
> I can give that a try although if I have something like:
> 
> <foo> <bar> baz </bar> </foo>
> 
> wouldn't that match only up to the closing bar element (hence ignoring the
> closing foo)?

Indeed.  So, the next step along this path is to basically push the
entire 'parser' into the lexer.

  XML: XML_START XML_BODY? XML_END | XML_EMPTY;
  ...

etc.  That was the approach used when I originally ported someone else's
AS3 grammar from ANTLRv2 to v3, and it didn't work for me (quite apart
from the fact that real E4X allows embedded expressions from the outer
language, would could contain string literals, which might contain
stuff that *looks* like XML, dragons, etc.).

At the time, I decided that this approach can't actually work, due to
the way ANTLR's lexers operate.  e.g. on the first character of the
input '<xyz', the lexer can see that either the XML or LESS_THAN tokens
might consume the input, but as soon as it sees the second letter, the
lexer decides that XML will create the longest token, so that rule wins
even though we actually did want the match to be (LESS_THAN, IDENT).

I might have got that wrong though :)


ta,
dave

-- 
http://david.holroyd.me.uk/

From jimi at temporal-wave.com  Mon Oct  8 15:15:19 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 8 Oct 2007 15:15:19 -0700
Subject: [antlr-interest] BUG? - Antlr hoists unhoistable predicates
In-Reply-To: <fedt9c$shb$1@sea.gmane.org>
References: <4709E670.40302@Yahoo.com>
	<4709F77F.7020403@gmx.de>	<4709FA3C.60502@Yahoo.com>
	<fedt9c$shb$1@sea.gmane.org>
Message-ID: <BAY130-DS2C5AFB5B860037E4B7C8186A40@phx.gbl>

I think that this is a very sensible and considered explanation of the
issue.

Perhaps the real issue is that we need the "cookbook" that Ter has ruminated
on in the past. It is this kind of thing that is generally better explained
by example and documentation, though it is good that people can ask things
here and get considered advice :-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Benjamin Niemann
> Sent: Monday, October 08, 2007 11:35 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] BUG? - Antlr hoists unhoistable
> predicates
> 
> Good evening,
> 
> Austin Hastings wrote:
> > Johannes Luber wrote:
> >> Austin Hastings wrote:
> > If it's hard or impossible to internally suppress hoisting predicates
> > when they reference local context, that's fine - emit a diagnostic
> > message telling me that I'm making a mistake. I'll happily accept a
> > message telling me "you can't do that" instead of chasing around the
> > generated code in a java debugger trying to understand why my grammar
> > stopped working.
> 
> Unfortunately this bug is very hard to catch, because the contents of
> {..}?
> is code in the target language (after replacing $thingies), which is an
> opaque blob of character for the (target agnostic) tool.
> ANTLR might complain about suspicious $... replacements in hoistable
> predicates, but that covers only a part of the possible bugs.
> IMHO the approach that code in actions should be debugged using target
> specific tools is a good trade off to keep the complexity of ANTLR at a
> reasonable level.
 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.4/1056 - Release Date: 10/7/2007
6:12 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071008/9a8d9e6b/attachment-0001.html 

From robfinneran at gmail.com  Mon Oct  8 16:19:50 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Mon, 8 Oct 2007 16:19:50 -0700
Subject: [antlr-interest] how to report errors in include files
In-Reply-To: <E4D2E71E-F1AD-46F7-9746-CBEA8156EE4C@ucar.edu>
References: <E9A7A05E-0037-492B-A2EC-B89B9276BCC5@UCAR.EDU>
	<a7e86e130710071204p4791cc02u24b685ea3782e85@mail.gmail.com>
	<E4D2E71E-F1AD-46F7-9746-CBEA8156EE4C@ucar.edu>
Message-ID: <a7e86e130710081619h5c4c7a2ah1c5c1d667344cba@mail.gmail.com>

Hi Pete,

I agree, ANTLR really needs to be improved to handle multiple file
parsing better.

The custom lexer rule manually calls "reset()" which resets the line
counter, so remove this line and add tracking for filenames and the
virtual line numbers they start on. Line counting would continue to be
automatic. Error message reporting would have to convert the virtual
line count to a file name and actual line number.

Of course this is all just theory for me, since I still can't get
include files to work. The lexer does its job, but the parser only
receives tokens from the first include file.  Maybe the build-AST-tree
mechanism, or the parser itself, thinks its job is done when the lexer
hits the first EOF of the first include file. The lexer moves on to
process the next file without any problems but the parser thinks its
job is finished. Eventually I will have to open up the hood and debug
the damned thing.

Cheers!

Rob

On 10/8/07, Pete Siemsen <siemsen at ucar.edu> wrote:
>
> I understand.  How do I "not reset the line counter"?  By editing the code
> generated
> by ANTLR?  It seems like counting lines and such is about as much effort as
> running
> the translator on each individual file.
>
> Seems like there ought to be a better solution :-)
>
>
> -- Pete
>
>
>
>
>
> On Oct 7, 2007, at 1:04 PM, Rob Finneran wrote:
>
> Hi Pete,
>
> One idea would be to not reset() the line counter. You would then need
> to map the virtual line number (like line 127585) to the actual file
> and actual line number (like line 123).
>
> Just an idea!
>
> On 10/7/07, Pete Siemsen <siemsen at ucar.edu> wrote:
>
> Can I make ANTLR show source file names in error messages?
>
> I'm developing a grammar to translate a set of about 1300 source files.  The
> files have to be processed in a certain order, so there's a single file that
> has about 1300 "include" statements.  By pointing my ANTLR 3.0.1 translator
> at the single source file, the entire set is processed as if it were one
> giant file.  My translator now handles the include files fine, thanks to
> help from this list.  As I expected, I'm seeing various parser error
> messages because my grammar isn't quite correct yet. The trouble is that the
> error messages don't tell me which include file the error occurred in.
>
> I tried putting debugging lines in the code that handles the include
> statements.  Now I see about 1300 messages that say "opening include file
> xyz".  The handling of include files happens in the lexer phase, so I see
> all 1300 of those messages first, followed by all the messages about parser
> errors.  The latter messages have line numbers, but not file names, so
> there's no way to relate the messages to the files.
>
> I could approach this problem outside ANTLR by running the translator on
> each individual file, but I'm hoping for a better method.
>
>
> -- Pete
>
>
>
>
>
>

From Austin_Hastings at Yahoo.com  Mon Oct  8 17:03:00 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 08 Oct 2007 20:03:00 -0400
Subject: [antlr-interest] Fwd:  imaginary nodes
In-Reply-To: <2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>
References: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>	<2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>
	<2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>
Message-ID: <470AC534.9050608@Yahoo.com>

Page 184 has the top few lines for the C- grammar. That includes a 
tokens section.

Although I am curious as to how an imaginary token can be defined that 
is NOT in the tokens section?

=Austin


Thomas Jackson wrote:
> Forgot to forward to group.....
>
> ---------- Forwarded message ----------
> From: *Thomas Jackson* <thomas.jackson.iii at gmail.com 
> <mailto:thomas.jackson.iii at gmail.com>>
> Date: Oct 8, 2007 5:17 PM
> Subject: Re: [antlr-interest] imaginary nodes
> To: Mark Volkmann <r.mark.volkmann at gmail.com 
> <mailto:r.mark.volkmann at gmail.com>>
>
> grammar T;
>
> options { output=AST; language=Java; }
>
> tokens {
>   PARAGRAPH;
>   SENTENCE;
>   NOUN;
>   VERB;
>   ADJECTIVE;
>   THIS="this";
>   IS="is";
>   A="a";
>   BAD="bad";
>   EXAMPLE="example";
> }
>
> parse : THIS IS A BAD EXAMPLE -> ^( PARAGRAPH ^(SENTENCE ^(NOUN 
> EXAMPLE) ^(ADJECTIVE BAD) ^(VERB IS)))
>          ;
> Hope this helps...
>
> Thanks
> Thomas
>
>
>
> On 10/8/07, *Mark Volkmann* <r.mark.volkmann at gmail.com 
> <mailto:r.mark.volkmann at gmail.com>> wrote:
>
>     In "The Definitive ANTLR Reference" chapter 7, page 166 of my printed
>     copy, in the discussion about adding imaginary nodes to an AST it says
>     "The imaginary token must be defined elsewhere in a grammar or in the
>     tokens section." I can't seem to find an example of where this is done
>     in the book though. Can someone give me an example of the syntax to
>     define an imaginary node in a grammar?
>
>     --
>     R. Mark Volkmann
>     Object Computing, Inc.
>
>
>
>
> -- 
> Thomas Jackson
>
> -- 
> Thomas Jackson
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.4/1057 - Release Date: 10/8/2007 9:04 AM
>   


From jcrites at gmail.com  Mon Oct  8 18:03:16 2007
From: jcrites at gmail.com (Justin Crites)
Date: Mon, 8 Oct 2007 18:03:16 -0700
Subject: [antlr-interest] Handling optional spaces
In-Reply-To: <4709B199.8030102@Yahoo.com>
References: <1d3e8630710072008h61d5586cl239cc9dbd7b75dc5@mail.gmail.com>
	<4709B199.8030102@Yahoo.com>
Message-ID: <1d3e8630710081803h59bbbdc7k7531367e8850aa5@mail.gmail.com>

Austin,

Thanks for taking the time to look at it and explain.  I am not sure how I
should fit whitespace into my grammar, though.  Hopefully your generosity
will continue long enough to allow me to explain :-)

I have a C-like grammar with standard expressions like "3 + (4 * 5) +
f(10)".  What I want to do is allow _optional_ whitespace in many places in
expressions, but not everywhere.

Specifically, in a function call "f(x,y,z)" I do not want to allow space
between the name of a function and the opening parenthesis.  For example,
"f(x)" is valid but "f (x)" is not. [1]  Most other constructs in the
language allow unlimited whitespace anywhere.  In fact, this is true for
_every_ other construct except that one place. [2]

This is different from other constructs in my language like implicit
function calls where any amount of space is valid ("3+1", "3 + 1", " 3
+     1", etc).

My initial approach was to include, explicitly, the OptionalWhitespace
production everywhere whitespace would be allowed.  This complicates things
for a variety of reasons. [3]

For example, my grammar might look like:

     expr : term OptSpace operator OptSpace expr
     term : ...
     call : id '(' OptSpace expr OptSpace ')'      // no OptSpace after id

Do you have any advice for me on how I could accomplish the handling of
whitespace properly?



[1] The reason I have made this language design choice is because I am
trying to support S-expression-style function calls.  For example, f(a b) ==
(f a b).  I believe I can fit C-style calls and S-expressions together with
some restrictions on whitespace.   (z f (g)) is different than (z f(g) )

[2] Yes, this does make me reconsider from a language design perspective.
But, I suspect there are many such cases in other successful languages, and
so would prefer not to disqualify this feature based on the clumsiness or
difficulty of the grammar alone.

[3] One complexity seems to be ensuring that the optional space is absorbed
by precisely the production following or preceding it, which otherwise leads
to ambiguity.

On 10/7/07, Austin Hastings <Austin_Hastings at yahoo.com> wrote:
>
> I had a look at the generated code. It's a bug, IMO. I'm surprised there
> wasn't a warning emitted.
>
> CLIFFS:
> 1. It should have griped at you.
> 2. You need to change into the "antlr paradigm" to get around whitespace
> issues.
>
>
> The "reason" for the difference is that you are doing a combined
> parser/lexer. So the first case generated a parser that expects to see
> Token#1, Token#2, Token#1 on its input (assuming that OptSpace =
> Token#1, and ID = Token#2).
>
> The "inline" version generated code that handled the detection of
> optional spaces in place. As a result, it was expecting {do some work}
> Token #2 {do some work}.
>
> The second form was what the lexer was giving it, because your OptSpace
> could match an empty string. Given an empty string, the lexer has the
> choice of doing nothing, or generating OptSpace. It chooses to "do
> nothing" and get on with processing the "a".
>
> The approach "recommended" by Antlr seems to be to do a "positive
> recognition" of white space, and then throw it away or hide it. Hence
> you'll see definitions like
>
> WS : (' ' | '\t' | '\r' | '\n')+ { skip(); }
>
> This recognizes that WS is a token separate from other tokens (so the
> Lexer knows to stop working on those tokens and work on this one) but
> then once the token is recognized, the skip() chucks it in the trash.
>
> =Austin
>
>
>
> Justin Crites wrote:
> > This is the full grammar that fails to parse "a"
> > (MismatchedTokenException):
> >
> > expr     :    OptSpace ID OptSpace;
> > ID  :   ('a'..'z'|'A'..'Z')+ ;
> > OptSpace :    ' '*;
> >
> > This is the full grammar that succeeds:
> >
> > expr     :    ' '* ID ' '*;
> > ID  :   ('a'..'z'|'A'..'Z')+ ;
> >
> > These grammars are identical except that in the latter I have replaced
> > OptSpace with its definition in the rule "expr".
> >
> > In my mind these grammars should behave identically -- I would expect
> > the grammar specification to follow a "substitution rule" such that if
> > I have a rule A : X; then I can replace instances of "A" in other
> > rules with simply "X" and get identical behavior.  However, even
> > though OptSpace : ' '*; the rule
> >
> > expr : OptSpace ID OptSpace
> >
> > behaves differently than:
> >
> > expr : ' '* ID ' '*;  // substituting ' '* for OptSpace
> >
> > Does this clarify my question?  Thank you.
> >
> > --
> > Justin Crites
> > ------------------------------------------------------------------------
> >
> > No virus found in this incoming message.
> > Checked by AVG Free Edition.
> > Version: 7.5.488 / Virus Database: 269.14.4/1055 - Release Date:
> 10/7/2007 10:24 AM
> >
>
>


-- 
Justin Crites

E-Mail: <mailto:jcrites at gmail.com>
IM: <aim:Xiphoris>
WWW: <http://xiphoris.com>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071008/c77fd9c9/attachment.html 

From Austin_Hastings at Yahoo.com  Mon Oct  8 19:57:52 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 08 Oct 2007 22:57:52 -0400
Subject: [antlr-interest] Handling optional spaces
In-Reply-To: <1d3e8630710081803h59bbbdc7k7531367e8850aa5@mail.gmail.com>
References: <1d3e8630710072008h61d5586cl239cc9dbd7b75dc5@mail.gmail.com>	
	<4709B199.8030102@Yahoo.com>
	<1d3e8630710081803h59bbbdc7k7531367e8850aa5@mail.gmail.com>
Message-ID: <470AEE30.7010007@Yahoo.com>

Justin,

What you are saying is that your language is 99% whitespace-independent. 
That immediately tells me that the default behavior should be to 
recognize whitespace separately and move it out of the way.

The requirement to know about whitespace separating an identifier and an 
opening parenthesis can be satisfied in two ways:

1- Put the whitespace on the hidden channel, then check that channel to 
see if whitespace came between two tokens:

s_expression
    : '(' ID s_args ')'
    ;

s_args
    : (s_expression
      | {input.LA(1) == ID && input.get(input.index + 1).getChannel() == 
HIDDEN}? => ID   // **** LOOK HERE *****
      | c_expression
      )*
    ;

2- Alternatively, you could treat the problem as being lexical. This 
makes it simpler to write (meaning your hands don't get dirty with the 
internals of Antlr) but gives a different result:

ID : ('a'..'z') + ;

FUNCTION_CALL: ID '(' ;

You would then have to compensate in your parser for the 'unmatched' 
parenthesis:

C_function_call: FUNCTION_CALL args ')' ;

=====

The second approach is "easier" to do, in that you won't wind up having 
to debug the generated java code when something goes awry. But if you've 
been around C for very long you'll remember the old "preprocessor 
tricks" that used to be used for things like token-pasting, etc.

How would you parse this code?

  (z f/*look, no spaces! */(g))

Option 1 treats the comment as a separator (space-type-token), while 
option 2 recognizes that there are three tokens (ID, COMMENT, LPAREN). 
If you want that to invoke the f(g) C function,
you could change option 1 to look for a space token, rather than just 
any off-channel token. The change to option 2 is obvious (insert 
optional COMMENT) and hideous.

=Austin

Justin Crites wrote:
> Austin,
>
> Thanks for taking the time to look at it and explain.  I am not sure 
> how I should fit whitespace into my grammar, though.  Hopefully your 
> generosity will continue long enough to allow me to explain :-)
>
> I have a C-like grammar with standard expressions like "3 + (4 * 5) + 
> f(10)".  What I want to do is allow _optional_ whitespace in many 
> places in expressions, but not everywhere.
>
> Specifically, in a function call "f(x,y,z)" I do not want to allow 
> space between the name of a function and the opening parenthesis.  For 
> example, "f(x)" is valid but "f (x)" is not. [1]  Most other 
> constructs in the language allow unlimited whitespace anywhere.  In 
> fact, this is true for _every_ other construct except that one place. [2]
>
> This is different from other constructs in my language like implicit 
> function calls where any amount of space is valid ("3+1", "3 + 1", " 
> 3    +     1", etc).
>
> My initial approach was to include, explicitly, the OptionalWhitespace 
> production everywhere whitespace would be allowed.  This complicates 
> things for a variety of reasons. [3]
>
> For example, my grammar might look like:
>
>      expr : term OptSpace operator OptSpace expr
>      term : ...
>      call : id '(' OptSpace expr OptSpace ')'      // no OptSpace after id
>
> Do you have any advice for me on how I could accomplish the handling 
> of whitespace properly?
>
>
>
> [1] The reason I have made this language design choice is because I am 
> trying to support S-expression-style function calls.  For example, f(a 
> b) == (f a b).  I believe I can fit C-style calls and S-expressions 
> together with some restrictions on whitespace.   (z f (g)) is 
> different than (z f(g) )
>
> [2] Yes, this does make me reconsider from a language design 
> perspective.  But, I suspect there are many such cases in other 
> successful languages, and so would prefer not to disqualify this 
> feature based on the clumsiness or difficulty of the grammar alone.
>
> [3] One complexity seems to be ensuring that the optional space is 
> absorbed by precisely the production following or preceding it, which 
> otherwise leads to ambiguity.
>
> On 10/7/07, *Austin Hastings* <Austin_Hastings at yahoo.com 
> <mailto:Austin_Hastings at yahoo.com>> wrote:
>
>     I had a look at the generated code. It's a bug, IMO. I'm surprised
>     there
>     wasn't a warning emitted.
>
>     CLIFFS:
>     1. It should have griped at you.
>     2. You need to change into the "antlr paradigm" to get around
>     whitespace
>     issues.
>
>
>     The "reason" for the difference is that you are doing a combined
>     parser/lexer. So the first case generated a parser that expects to see
>     Token#1, Token#2, Token#1 on its input (assuming that OptSpace =
>     Token#1, and ID = Token#2).
>
>     The "inline" version generated code that handled the detection of
>     optional spaces in place. As a result, it was expecting {do some work}
>     Token #2 {do some work}.
>
>     The second form was what the lexer was giving it, because your
>     OptSpace
>     could match an empty string. Given an empty string, the lexer has the
>     choice of doing nothing, or generating OptSpace. It chooses to "do
>     nothing" and get on with processing the "a".
>
>     The approach "recommended" by Antlr seems to be to do a "positive
>     recognition" of white space, and then throw it away or hide it. Hence
>     you'll see definitions like
>
>     WS : (' ' | '\t' | '\r' | '\n')+ { skip(); }
>
>     This recognizes that WS is a token separate from other tokens (so the
>     Lexer knows to stop working on those tokens and work on this one) but
>     then once the token is recognized, the skip() chucks it in the trash.
>
>     =Austin
>
>
>
>     Justin Crites wrote:
>     > This is the full grammar that fails to parse "a"
>     > (MismatchedTokenException):
>     >
>     > expr     :    OptSpace ID OptSpace;
>     > ID  :   ('a'..'z'|'A'..'Z')+ ;
>     > OptSpace :    ' '*;
>     >
>     > This is the full grammar that succeeds:
>     >
>     > expr     :    ' '* ID ' '*;
>     > ID  :   ('a'..'z'|'A'..'Z')+ ;
>     >
>     > These grammars are identical except that in the latter I have
>     replaced
>     > OptSpace with its definition in the rule "expr".
>     >
>     > In my mind these grammars should behave identically -- I would
>     expect
>     > the grammar specification to follow a "substitution rule" such
>     that if
>     > I have a rule A : X; then I can replace instances of "A" in other
>     > rules with simply "X" and get identical behavior.  However, even
>     > though OptSpace : ' '*; the rule
>     >
>     > expr : OptSpace ID OptSpace
>     >
>     > behaves differently than:
>     >
>     > expr : ' '* ID ' '*;  // substituting ' '* for OptSpace
>     >
>     > Does this clarify my question?  Thank you.
>     >
>     > --
>     > Justin Crites
>     >
>     ------------------------------------------------------------------------
>
>     >
>     > No virus found in this incoming message.
>     > Checked by AVG Free Edition.
>     > Version: 7.5.488 / Virus Database: 269.14.4/1055 - Release Date:
>     10/7/2007 10:24 AM
>     >
>
>
>
>
> -- 
> Justin Crites
>
> E-Mail: <mailto:jcrites at gmail.com <mailto:jcrites at gmail.com>>
> IM: <aim:Xiphoris>
> WWW: <http://xiphoris.com <http://xiphoris.com>>
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.4/1057 - Release Date: 10/8/2007 9:04 AM
>   


From Austin_Hastings at Yahoo.com  Mon Oct  8 20:03:41 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 08 Oct 2007 23:03:41 -0400
Subject: [antlr-interest] Handling optional spaces
In-Reply-To: <470AEE30.7010007@Yahoo.com>
References: <1d3e8630710072008h61d5586cl239cc9dbd7b75dc5@mail.gmail.com>		<4709B199.8030102@Yahoo.com>	<1d3e8630710081803h59bbbdc7k7531367e8850aa5@mail.gmail.com>
	<470AEE30.7010007@Yahoo.com>
Message-ID: <470AEF8D.6020503@Yahoo.com>

Option 1 is wrong. Sorry. You'll need to check for following paren, as well.

Maybe

(ID '(')? {input.get($ID.index + 1).getChannel() == HIDDEN}? ID

instead?

=Austin


Austin Hastings wrote:
> Justin,
>
> What you are saying is that your language is 99% 
> whitespace-independent. That immediately tells me that the default 
> behavior should be to recognize whitespace separately and move it out 
> of the way.
>
> The requirement to know about whitespace separating an identifier and 
> an opening parenthesis can be satisfied in two ways:
>
> 1- Put the whitespace on the hidden channel, then check that channel 
> to see if whitespace came between two tokens:
>
> s_expression
>    : '(' ID s_args ')'
>    ;
>
> s_args
>    : (s_expression
>      | {input.LA(1) == ID && input.get(input.index + 1).getChannel() 
> == HIDDEN}? => ID   // **** LOOK HERE *****
>      | c_expression
>      )*
>    ;
>
> 2- Alternatively, you could treat the problem as being lexical. This 
> makes it simpler to write (meaning your hands don't get dirty with the 
> internals of Antlr) but gives a different result:
>
> ID : ('a'..'z') + ;
>
> FUNCTION_CALL: ID '(' ;
>
> You would then have to compensate in your parser for the 'unmatched' 
> parenthesis:
>
> C_function_call: FUNCTION_CALL args ')' ;
>
> =====
>
> The second approach is "easier" to do, in that you won't wind up 
> having to debug the generated java code when something goes awry. But 
> if you've been around C for very long you'll remember the old 
> "preprocessor tricks" that used to be used for things like 
> token-pasting, etc.
>
> How would you parse this code?
>
>  (z f/*look, no spaces! */(g))
>
> Option 1 treats the comment as a separator (space-type-token), while 
> option 2 recognizes that there are three tokens (ID, COMMENT, LPAREN). 
> If you want that to invoke the f(g) C function,
> you could change option 1 to look for a space token, rather than just 
> any off-channel token. The change to option 2 is obvious (insert 
> optional COMMENT) and hideous.
>
> =Austin
>
> Justin Crites wrote:
>> Austin,
>>
>> Thanks for taking the time to look at it and explain.  I am not sure 
>> how I should fit whitespace into my grammar, though.  Hopefully your 
>> generosity will continue long enough to allow me to explain :-)
>>
>> I have a C-like grammar with standard expressions like "3 + (4 * 5) + 
>> f(10)".  What I want to do is allow _optional_ whitespace in many 
>> places in expressions, but not everywhere.
>>
>> Specifically, in a function call "f(x,y,z)" I do not want to allow 
>> space between the name of a function and the opening parenthesis.  
>> For example, "f(x)" is valid but "f (x)" is not. [1]  Most other 
>> constructs in the language allow unlimited whitespace anywhere.  In 
>> fact, this is true for _every_ other construct except that one place. 
>> [2]
>>
>> This is different from other constructs in my language like implicit 
>> function calls where any amount of space is valid ("3+1", "3 + 1", " 
>> 3    +     1", etc).
>>
>> My initial approach was to include, explicitly, the 
>> OptionalWhitespace production everywhere whitespace would be 
>> allowed.  This complicates things for a variety of reasons. [3]
>>
>> For example, my grammar might look like:
>>
>>      expr : term OptSpace operator OptSpace expr
>>      term : ...
>>      call : id '(' OptSpace expr OptSpace ')'      // no OptSpace 
>> after id
>>
>> Do you have any advice for me on how I could accomplish the handling 
>> of whitespace properly?
>>
>>
>>
>> [1] The reason I have made this language design choice is because I 
>> am trying to support S-expression-style function calls.  For example, 
>> f(a b) == (f a b).  I believe I can fit C-style calls and 
>> S-expressions together with some restrictions on whitespace.   (z f 
>> (g)) is different than (z f(g) )
>>
>> [2] Yes, this does make me reconsider from a language design 
>> perspective.  But, I suspect there are many such cases in other 
>> successful languages, and so would prefer not to disqualify this 
>> feature based on the clumsiness or difficulty of the grammar alone.
>>
>> [3] One complexity seems to be ensuring that the optional space is 
>> absorbed by precisely the production following or preceding it, which 
>> otherwise leads to ambiguity.
>>
>> On 10/7/07, *Austin Hastings* <Austin_Hastings at yahoo.com 
>> <mailto:Austin_Hastings at yahoo.com>> wrote:
>>
>>     I had a look at the generated code. It's a bug, IMO. I'm surprised
>>     there
>>     wasn't a warning emitted.
>>
>>     CLIFFS:
>>     1. It should have griped at you.
>>     2. You need to change into the "antlr paradigm" to get around
>>     whitespace
>>     issues.
>>
>>
>>     The "reason" for the difference is that you are doing a combined
>>     parser/lexer. So the first case generated a parser that expects 
>> to see
>>     Token#1, Token#2, Token#1 on its input (assuming that OptSpace =
>>     Token#1, and ID = Token#2).
>>
>>     The "inline" version generated code that handled the detection of
>>     optional spaces in place. As a result, it was expecting {do some 
>> work}
>>     Token #2 {do some work}.
>>
>>     The second form was what the lexer was giving it, because your
>>     OptSpace
>>     could match an empty string. Given an empty string, the lexer has 
>> the
>>     choice of doing nothing, or generating OptSpace. It chooses to "do
>>     nothing" and get on with processing the "a".
>>
>>     The approach "recommended" by Antlr seems to be to do a "positive
>>     recognition" of white space, and then throw it away or hide it. 
>> Hence
>>     you'll see definitions like
>>
>>     WS : (' ' | '\t' | '\r' | '\n')+ { skip(); }
>>
>>     This recognizes that WS is a token separate from other tokens (so 
>> the
>>     Lexer knows to stop working on those tokens and work on this one) 
>> but
>>     then once the token is recognized, the skip() chucks it in the 
>> trash.
>>
>>     =Austin
>>
>>
>>
>>     Justin Crites wrote:
>>     > This is the full grammar that fails to parse "a"
>>     > (MismatchedTokenException):
>>     >
>>     > expr     :    OptSpace ID OptSpace;
>>     > ID  :   ('a'..'z'|'A'..'Z')+ ;
>>     > OptSpace :    ' '*;
>>     >
>>     > This is the full grammar that succeeds:
>>     >
>>     > expr     :    ' '* ID ' '*;
>>     > ID  :   ('a'..'z'|'A'..'Z')+ ;
>>     >
>>     > These grammars are identical except that in the latter I have
>>     replaced
>>     > OptSpace with its definition in the rule "expr".
>>     >
>>     > In my mind these grammars should behave identically -- I would
>>     expect
>>     > the grammar specification to follow a "substitution rule" such
>>     that if
>>     > I have a rule A : X; then I can replace instances of "A" in other
>>     > rules with simply "X" and get identical behavior.  However, even
>>     > though OptSpace : ' '*; the rule
>>     >
>>     > expr : OptSpace ID OptSpace
>>     >
>>     > behaves differently than:
>>     >
>>     > expr : ' '* ID ' '*;  // substituting ' '* for OptSpace
>>     >
>>     > Does this clarify my question?  Thank you.
>>     >
>>     > --
>>     > Justin Crites
>>     >
>>     
>> ------------------------------------------------------------------------
>>
>>     >
>>     > No virus found in this incoming message.
>>     > Checked by AVG Free Edition.
>>     > Version: 7.5.488 / Virus Database: 269.14.4/1055 - Release Date:
>>     10/7/2007 10:24 AM
>>     >
>>
>>
>>
>>
>> -- 
>> Justin Crites
>>
>> E-Mail: <mailto:jcrites at gmail.com <mailto:jcrites at gmail.com>>
>> IM: <aim:Xiphoris>
>> WWW: <http://xiphoris.com <http://xiphoris.com>>
>> ------------------------------------------------------------------------
>>
>> No virus found in this incoming message.
>> Checked by AVG Free Edition. Version: 7.5.488 / Virus Database: 
>> 269.14.4/1057 - Release Date: 10/8/2007 9:04 AM
>>   
>
>
>


From tom at atlassian.com  Tue Oct  9 04:05:06 2007
From: tom at atlassian.com (Tom Davies)
Date: Tue, 9 Oct 2007 21:05:06 +1000
Subject: [antlr-interest] A rewrite rule including all children of a parser
	rule?
Message-ID: <CC12D38A-D713-4D6B-8194-34FEBE3852B1@atlassian.com>

Hi,

I'm converting a V2 grammar to V3 (by hand -- should I be using the  
automated tool?) and I have a question to do with rewrite rules.

The V2 rule uses the action:

{#module = #(#[MODULE_DEFN, "MODULE_DEFN"], module);}

to create the tree. The rule and my V3 tree rewrite rule is below.

Do I need to explicitly list all the child rules matched by the rule,  
or could I say ^(MODULE_DEFN $module) and get exactly the same result  
as ^(MODULE_DEFN optionalDocComment moduleNameDecl  
importDeclarationList friendDeclarationList outerDefnList) ?

If I had the grammar anywhere near working I'd just test this myself,  
but I'd like to know before I waste too much time :-)

Thanks,
   Tom

//a start rule for a module.
module
     : optionalDocComment moduleNameDecl[input.LT(1), "a valid module  
name"]
       importDeclarationList[input.LT(1), "a list of import  
declarations"]
       friendDeclarationList[input.LT(1), "a list of friend  
declarations"]
       outerDefnList[input.LT(1), "a list of top-level definitions"]
       EOF!
       -> ^(MODULE_DEFN optionalDocComment moduleNameDecl  
importDeclarationList friendDeclarationList outerDefnList)
     ;

From OJAY78 at gmx.de  Tue Oct  9 05:40:57 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Tue, 09 Oct 2007 14:40:57 +0200
Subject: [antlr-interest] assign optional rule values into a list
Message-ID: <20071009124057.13860@gmx.net>

Hi,

I have a rule in my grammar which can contain one parameter or more than one seperated by '|' sign. Now I have the problem that I want to add those parameters into a list.

I tried it with the += but this does not work, when I look into the generated code I can see that there will be generated a list, but it will be not filled

infiniteParameterList returns[List lst]
	:	ps += parameter ('|' parameter) *
{
}
	;
Then I tried this variant, but this will result in a grammar syntax failure
infiniteParameterList returns[List lst]
	:	ps += parameter ('|' ps+=parameter) *
{
}
	;

Does anyone can tell me how I can make this assignment?

Thanks
-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From thomas.jackson.iii at gmail.com  Tue Oct  9 06:06:01 2007
From: thomas.jackson.iii at gmail.com (Thomas Jackson)
Date: Tue, 9 Oct 2007 09:06:01 -0400
Subject: [antlr-interest] Fwd: imaginary nodes
In-Reply-To: <470AC534.9050608@Yahoo.com>
References: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>
	<2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>
	<2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>
	<470AC534.9050608@Yahoo.com>
Message-ID: <2b2bfd350710090606h5d71f56dya75322fd4686af86@mail.gmail.com>

Did my example contain that?  If so, it was a mistake.  I believe all
imaginary tokens MUST be declared in the tokens section.

On 10/8/07, Austin Hastings <Austin_Hastings at yahoo.com> wrote:
>
> Page 184 has the top few lines for the C- grammar. That includes a
> tokens section.
>
> Although I am curious as to how an imaginary token can be defined that
> is NOT in the tokens section?
>
> =Austin
>
>
> Thomas Jackson wrote:
> > Forgot to forward to group.....
> >
> > ---------- Forwarded message ----------
> > From: *Thomas Jackson* <thomas.jackson.iii at gmail.com
> > <mailto:thomas.jackson.iii at gmail.com>>
> > Date: Oct 8, 2007 5:17 PM
> > Subject: Re: [antlr-interest] imaginary nodes
> > To: Mark Volkmann <r.mark.volkmann at gmail.com
> > <mailto:r.mark.volkmann at gmail.com>>
> >
> > grammar T;
> >
> > options { output=AST; language=Java; }
> >
> > tokens {
> >   PARAGRAPH;
> >   SENTENCE;
> >   NOUN;
> >   VERB;
> >   ADJECTIVE;
> >   THIS="this";
> >   IS="is";
> >   A="a";
> >   BAD="bad";
> >   EXAMPLE="example";
> > }
> >
> > parse : THIS IS A BAD EXAMPLE -> ^( PARAGRAPH ^(SENTENCE ^(NOUN
> > EXAMPLE) ^(ADJECTIVE BAD) ^(VERB IS)))
> >          ;
> > Hope this helps...
> >
> > Thanks
> > Thomas
> >
> >
> >
> > On 10/8/07, *Mark Volkmann* <r.mark.volkmann at gmail.com
> > <mailto:r.mark.volkmann at gmail.com>> wrote:
> >
> >     In "The Definitive ANTLR Reference" chapter 7, page 166 of my
> printed
> >     copy, in the discussion about adding imaginary nodes to an AST it
> says
> >     "The imaginary token must be defined elsewhere in a grammar or in
> the
> >     tokens section." I can't seem to find an example of where this is
> done
> >     in the book though. Can someone give me an example of the syntax to
> >     define an imaginary node in a grammar?
> >
> >     --
> >     R. Mark Volkmann
> >     Object Computing, Inc.
> >
> >
> >
> >
> > --
> > Thomas Jackson
> >
> > --
> > Thomas Jackson
> > ------------------------------------------------------------------------
> >
> > No virus found in this incoming message.
> > Checked by AVG Free Edition.
> > Version: 7.5.488 / Virus Database: 269.14.4/1057 - Release Date:
> 10/8/2007 9:04 AM
> >
>
>


-- 
Thomas Jackson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/c294dd85/attachment.html 

From Austin_Hastings at Yahoo.com  Tue Oct  9 06:11:08 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 09 Oct 2007 09:11:08 -0400
Subject: [antlr-interest] Fwd: imaginary nodes
In-Reply-To: <2b2bfd350710090606h5d71f56dya75322fd4686af86@mail.gmail.com>
References: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>	<2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>	<2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>	<470AC534.9050608@Yahoo.com>
	<2b2bfd350710090606h5d71f56dya75322fd4686af86@mail.gmail.com>
Message-ID: <470B7DEC.9040304@Yahoo.com>

No, sir. I was referring to "The imaginary token must be defined 
elsewhere in a grammar or in the tokens section."

Thomas Jackson wrote:
> Did my example contain that?  If so, it was a mistake.  I believe all 
> imaginary tokens MUST be declared in the tokens section.
>
> On 10/8/07, *Austin Hastings* <Austin_Hastings at yahoo.com 
> <mailto:Austin_Hastings at yahoo.com>> wrote:
>
>     Page 184 has the top few lines for the C- grammar. That includes a
>     tokens section.
>
>     Although I am curious as to how an imaginary token can be defined that
>     is NOT in the tokens section?
>
>     =Austin
>
>
>     Thomas Jackson wrote:
>     > Forgot to forward to group.....
>     >
>     > ---------- Forwarded message ----------
>     > From: *Thomas Jackson* <thomas.jackson.iii at gmail.com
>     <mailto:thomas.jackson.iii at gmail.com>
>     > <mailto:thomas.jackson.iii at gmail.com
>     <mailto:thomas.jackson.iii at gmail.com>>>
>     > Date: Oct 8, 2007 5:17 PM
>     > Subject: Re: [antlr-interest] imaginary nodes
>     > To: Mark Volkmann < r.mark.volkmann at gmail.com
>     <mailto:r.mark.volkmann at gmail.com>
>     > <mailto:r.mark.volkmann at gmail.com
>     <mailto:r.mark.volkmann at gmail.com>>>
>     >
>     > grammar T;
>     >
>     > options { output=AST; language=Java; }
>     >
>     > tokens {
>     >   PARAGRAPH;
>     >   SENTENCE;
>     >   NOUN;
>     >   VERB;
>     >   ADJECTIVE;
>     >   THIS="this";
>     >   IS="is";
>     >   A="a";
>     >   BAD="bad";
>     >   EXAMPLE="example";
>     > }
>     >
>     > parse : THIS IS A BAD EXAMPLE -> ^( PARAGRAPH ^(SENTENCE ^(NOUN
>     > EXAMPLE) ^(ADJECTIVE BAD) ^(VERB IS)))
>     >          ;
>     > Hope this helps...
>     >
>     > Thanks
>     > Thomas
>     >
>     >
>     >
>     > On 10/8/07, *Mark Volkmann* <r.mark.volkmann at gmail.com
>     <mailto:r.mark.volkmann at gmail.com>
>     > <mailto: r.mark.volkmann at gmail.com
>     <mailto:r.mark.volkmann at gmail.com>>> wrote:
>     >
>     >     In "The Definitive ANTLR Reference" chapter 7, page 166 of
>     my printed
>     >     copy, in the discussion about adding imaginary nodes to an
>     AST it says
>     >     "The imaginary token must be defined elsewhere in a grammar
>     or in the
>     >     tokens section." I can't seem to find an example of where
>     this is done
>     >     in the book though. Can someone give me an example of the
>     syntax to
>     >     define an imaginary node in a grammar?
>     >
>     >     --
>     >     R. Mark Volkmann
>     >     Object Computing, Inc.
>     >
>     >
>     >
>     >
>     > --
>     > Thomas Jackson
>     >
>     > --
>     > Thomas Jackson
>     >
>     ------------------------------------------------------------------------
>     >
>     > No virus found in this incoming message.
>     > Checked by AVG Free Edition.
>     > Version: 7.5.488 / Virus Database: 269.14.4/1057 - Release Date:
>     10/8/2007 9:04 AM
>     >
>
>
>
>
> -- 
> Thomas Jackson
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.6/1059 - Release Date: 10/9/2007 8:44 AM
>   


From Austin_Hastings at Yahoo.com  Tue Oct  9 06:13:39 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 09 Oct 2007 09:13:39 -0400
Subject: [antlr-interest] assign optional rule values into a list
In-Reply-To: <20071009124057.13860@gmx.net>
References: <20071009124057.13860@gmx.net>
Message-ID: <470B7E83.8050808@Yahoo.com>

Maybe try it without spaces around the '+=' operator?

I've got something similar that seems to work in my own grammar:

expr_l00_sequence
    : seq+=expr_l01_assignment (Pc seq+=expr_l01_assignment)*
        -> ^(SEQUENCE $seq+)
    ;


=Austin

OJAY78 at gmx.de wrote:
> Hi,
>
> I have a rule in my grammar which can contain one parameter or more than one seperated by '|' sign. Now I have the problem that I want to add those parameters into a list.
>
> I tried it with the += but this does not work, when I look into the generated code I can see that there will be generated a list, but it will be not filled
>
> infiniteParameterList returns[List lst]
> 	:	ps += parameter ('|' parameter) *
> {
> }
> 	;
> Then I tried this variant, but this will result in a grammar syntax failure
> infiniteParameterList returns[List lst]
> 	:	ps += parameter ('|' ps+=parameter) *
> {
> }
> 	;
>
> Does anyone can tell me how I can make this assignment?
>
> Thanks
>   


From ssiegel at finjan.com  Tue Oct  9 06:13:47 2007
From: ssiegel at finjan.com (Shmuel Siegel)
Date: Tue, 9 Oct 2007 15:13:47 +0200
Subject: [antlr-interest] A rewrite rule including all children of a
	parserrule?
In-Reply-To: <CC12D38A-D713-4D6B-8194-34FEBE3852B1@atlassian.com>
References: <CC12D38A-D713-4D6B-8194-34FEBE3852B1@atlassian.com>
Message-ID: <E344C433F006AB45A306D422F9C3EB4C027E329F@exmail1.finjan.com>

At various stages of beta releases, using the rulename in the rewrite
rule didn't work so I got into the habit of always enumerating the
components. In your case, since you want to leave out a component, you
need to enumerate the components.

WARNING: don't mix rewrite styles. If you have the rewrite you can't say
"EOF!".

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tom Davies
Sent: Tuesday, October 09, 2007 1:05 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] A rewrite rule including all children of a
parserrule?

Hi,

I'm converting a V2 grammar to V3 (by hand -- should I be using the  
automated tool?) and I have a question to do with rewrite rules.

The V2 rule uses the action:

{#module = #(#[MODULE_DEFN, "MODULE_DEFN"], module);}

to create the tree. The rule and my V3 tree rewrite rule is below.

Do I need to explicitly list all the child rules matched by the rule,  
or could I say ^(MODULE_DEFN $module) and get exactly the same result  
as ^(MODULE_DEFN optionalDocComment moduleNameDecl  
importDeclarationList friendDeclarationList outerDefnList) ?

If I had the grammar anywhere near working I'd just test this myself,  
but I'd like to know before I waste too much time :-)

Thanks,
   Tom

//a start rule for a module.
module
     : optionalDocComment moduleNameDecl[input.LT(1), "a valid module  
name"]
       importDeclarationList[input.LT(1), "a list of import  
declarations"]
       friendDeclarationList[input.LT(1), "a list of friend  
declarations"]
       outerDefnList[input.LT(1), "a list of top-level definitions"]
       EOF!
       -> ^(MODULE_DEFN optionalDocComment moduleNameDecl  
importDeclarationList friendDeclarationList outerDefnList)
     ;


From jaluber at gmx.de  Tue Oct  9 06:29:41 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 09 Oct 2007 15:29:41 +0200
Subject: [antlr-interest] Fwd: imaginary nodes
In-Reply-To: <470B7DEC.9040304@Yahoo.com>
References: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>	<2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>	<2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>	<470AC534.9050608@Yahoo.com>	<2b2bfd350710090606h5d71f56dya75322fd4686af86@mail.gmail.com>
	<470B7DEC.9040304@Yahoo.com>
Message-ID: <470B8245.2000408@gmx.de>

Austin Hastings wrote:
> No, sir. I was referring to "The imaginary token must be defined
> elsewhere in a grammar or in the tokens section."

An example:

IMAGINARY:;

Empty rules, which aren't called elsewhere.

Best regards,
Johannes Luber

From Austin_Hastings at Yahoo.com  Tue Oct  9 06:31:29 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 09 Oct 2007 09:31:29 -0400
Subject: [antlr-interest] ENHANCEMENT - Have "lexer grammar" generate
 recognition for string literals in tokenVocab
Message-ID: <470B82B1.3060409@Yahoo.com>


When more than one parser is in use, they need to share a common 
(initial) vocabulary. This can come from the source lexer via the 
tokenVocab option.

But splitting parser and lexer means that *all* parser tokens must be 
emitted by the lexer, which rules out using string literals like 'while' 
or 'if' - the
parser will emit them as part of its vocabulary, but the lexer doesn't 
generate those token numbers.

I would like the "lexer grammar" mode of antlr to be extended to accept 
a tokenVocab (it currently does this) and further to generate the 
appropriate tokens for string literals it finds in the tokenVocab.

This way, if my parser.g file contains:

while: 'while' '(' expr ')' statement ;

the parser will generate a parser.tokens file like:

'while' = 1
'(' = 2
')' = 3
...

and the lexer, via tokenVocab=parser.tokens, could then generate

Temp01: 'while' ;
Temp02: '(';
Temp03: ')';


Thanks,

=Austin

From Austin_Hastings at Yahoo.com  Tue Oct  9 06:37:07 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 09 Oct 2007 09:37:07 -0400
Subject: [antlr-interest] Fwd: imaginary nodes
In-Reply-To: <470B8245.2000408@gmx.de>
References: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>	<2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>	<2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>	<470AC534.9050608@Yahoo.com>	<2b2bfd350710090606h5d71f56dya75322fd4686af86@mail.gmail.com>	<470B7DEC.9040304@Yahoo.com>
	<470B8245.2000408@gmx.de>
Message-ID: <470B8403.90203@Yahoo.com>

Johannes,

Are "orphaned" rules considered imaginary? Is this true if they are part 
of an orphaned tree, or only if they are unreferenced and empty?

Does this have any impact on the generated code? Will functions for 
those node still be emitted?

=Austin



Johannes Luber wrote:
> Austin Hastings wrote:
>   
>> No, sir. I was referring to "The imaginary token must be defined
>> elsewhere in a grammar or in the tokens section."
>>     
>
> An example:
>
> IMAGINARY:;
>
> Empty rules, which aren't called elsewhere.
>
> Best regards,
> Johannes Luber
>
>
>   


From rschulz at sonic.net  Tue Oct  9 07:02:25 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Tue, 9 Oct 2007 07:02:25 -0700
Subject: [antlr-interest] Tree Builder / Tree Parser Mismatch
Message-ID: <200710090702.25679.rschulz@sonic.net>

Hi,

I am seeing something I cannot explain and would like some other pairs
of eyes to help me spot what I'm doing wrong.


Here is a tree-building parser rule:

-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
looseImportList
  : ( name

    | ( '(' CLImports interpretableName ')' )
      {
        System.err.format("CP.lIL: interpretableName=\%s\%n",
                          $interpretableName.text);
      }
    ->  ^( CLImports interpretableName )
    ) *

    EOF
  ;
-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-


Here is the corresponding rule from the second-pass tree parser

-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
looseImportList[ String unitName ]
returns [ CLText ct ]
@init {
  $ct = new CLText();
}
  : ( name
      {
        System.err.format("CB.lIL: name=\%s\%n", $name.text);
        $ct.add(noteImport(new CLImport($name.text)));
      }

  |   ^( CLImports interpretableName )
      {
        System.err.format("CB.lIL: interpretableName=\%s\%n",
                          $interpretableName.text);
        $ct.add(noteImport(new CLImport($interpretableName.text)));
      }
    ) *

    EOF
    {
      ...
    }
  ;
-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-


When I supply input with four occurrences of second alternatives (the
parenthesized one) I see four of the "CP.lIL..." diagnostic messages.
But the second pass shows only one "CB.lIL..." diagnostic trace, the one
for the last of the four input forms.

What am I missing?

Thanks.

Randall Schulz

From jaluber at gmx.de  Tue Oct  9 07:28:33 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 09 Oct 2007 16:28:33 +0200
Subject: [antlr-interest] Fwd: imaginary nodes
In-Reply-To: <470B8403.90203@Yahoo.com>
References: <f0fcc6820710081405i25782cb6tdecfc8de48bf6f6b@mail.gmail.com>	<2b2bfd350710081417q29dceb4dv9fac796611b6259@mail.gmail.com>	<2b2bfd350710081441w2d26a9f9iae139d3758d3ca7a@mail.gmail.com>	<470AC534.9050608@Yahoo.com>	<2b2bfd350710090606h5d71f56dya75322fd4686af86@mail.gmail.com>	<470B7DEC.9040304@Yahoo.com>	<470B8245.2000408@gmx.de>
	<470B8403.90203@Yahoo.com>
Message-ID: <470B9011.1080801@gmx.de>

Austin Hastings wrote:
> Johannes,
> 
> Are "orphaned" rules considered imaginary? Is this true if they are part
> of an orphaned tree, or only if they are unreferenced and empty?
> 
Not sure if those tokens can't be generated, even if there are other
references, but then they aren't imaginary tokens. If you refer to the
situation that the lexer rule isn't empty then I don't know if that is
causing the use of imaginary token to fail. But in my understanding
imaginary tokens have no children of their own, unless they are used in
rewrite rules.

> Does this have any impact on the generated code? Will functions for
> those node still be emitted?

I suppose that there will be extraneous code emitted in the empty rule
case but that shouldn't have any negative impact per se.

Best regards,
Johannes Luber

From josephg at cse.unsw.edu.au  Tue Oct  9 07:31:33 2007
From: josephg at cse.unsw.edu.au (Joseph Gentle)
Date: Wed, 10 Oct 2007 00:31:33 +1000
Subject: [antlr-interest] Matching AST tokens by their text?
Message-ID: <564B3943-CCB7-4F63-B969-061EE1B40B8A@cse.unsw.edu.au>

I have a grammar which looks very LISP-y:

(define (domain gripper-strips)
  (:predicates
   (room ?r)
   (ball ?b)
   (gripper ...

I've written an extremely simple tokeniser and parser to convert it  
into a tree which looks just the same, but in tokens its:

^(NAME ^(NAME ARGUMENT)
   ^(MACRO_NAME
     ^(NAME ARGUMENT)
     ^(NAME ARGUMENT)
     ^(NAME ...

Now I want to parse it, using rules like:

domain_definition: ^('define' domain_bits)
domain_bits
   : ^(':predicates' ...)
   | ^(':actions' ...)
   | ... etc


Is this possible? What's the best way to do this?

-J

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071010/b0c52046/attachment.html 

From ssiegel at finjan.com  Tue Oct  9 08:06:34 2007
From: ssiegel at finjan.com (Shmuel Siegel)
Date: Tue, 9 Oct 2007 17:06:34 +0200
Subject: [antlr-interest] Tree Builder / Tree Parser Mismatch
In-Reply-To: <200710090702.25679.rschulz@sonic.net>
References: <200710090702.25679.rschulz@sonic.net>
Message-ID: <E344C433F006AB45A306D422F9C3EB4C027E3341@exmail1.finjan.com>

I believe that the rewrites are not cumulative but rather last one wins.
If you extracted the second alternative (with its rewrite) to a subrule,
you should get what you want.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Randall R Schulz
Sent: Tuesday, October 09, 2007 4:02 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Tree Builder / Tree Parser Mismatch

Hi,

I am seeing something I cannot explain and would like some other pairs
of eyes to help me spot what I'm doing wrong.


Here is a tree-building parser rule:

-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
looseImportList
  : ( name

    | ( '(' CLImports interpretableName ')' )
      {
        System.err.format("CP.lIL: interpretableName=\%s\%n",
                          $interpretableName.text);
      }
    ->  ^( CLImports interpretableName )
    ) *

    EOF
  ;
-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-


Here is the corresponding rule from the second-pass tree parser

-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
looseImportList[ String unitName ]
returns [ CLText ct ]
@init {
  $ct = new CLText();
}
  : ( name
      {
        System.err.format("CB.lIL: name=\%s\%n", $name.text);
        $ct.add(noteImport(new CLImport($name.text)));
      }

  |   ^( CLImports interpretableName )
      {
        System.err.format("CB.lIL: interpretableName=\%s\%n",
                          $interpretableName.text);
        $ct.add(noteImport(new CLImport($interpretableName.text)));
      }
    ) *

    EOF
    {
      ...
    }
  ;
-==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-


When I supply input with four occurrences of second alternatives (the
parenthesized one) I see four of the "CP.lIL..." diagnostic messages.
But the second pass shows only one "CB.lIL..." diagnostic trace, the one
for the last of the four input forms.

What am I missing?

Thanks.

Randall Schulz


From rschulz at sonic.net  Tue Oct  9 08:46:46 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Tue, 9 Oct 2007 08:46:46 -0700
Subject: [antlr-interest] Tree Builder / Tree Parser Mismatch
In-Reply-To: <E344C433F006AB45A306D422F9C3EB4C027E3341@exmail1.finjan.com>
References: <200710090702.25679.rschulz@sonic.net>
	<E344C433F006AB45A306D422F9C3EB4C027E3341@exmail1.finjan.com>
Message-ID: <200710090846.46184.rschulz@sonic.net>

On Tuesday 09 October 2007 08:06, Shmuel Siegel wrote:
> I believe that the rewrites are not cumulative but rather last one
> wins. If you extracted the second alternative (with its rewrite) to a
> subrule, you should get what you want.

Thank you. I knew it had to be something straightforward and I tried to 
find the answer in TDAR's sections on tree building and parsing, but I 
just couldn't tease it out.

The new rules, which work as I want, are these:

looseImportList
	:	looseImport *
		EOF
	;

looseImport
	:	name
	->	^( CLImports name )

	|	( Open CLImports interpretableName Close )
	->	^( CLImports interpretableName )
	;


Randall Schulz


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Randall R
> Schulz Sent: Tuesday, October 09, 2007 4:02 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Tree Builder / Tree Parser Mismatch
>
> Hi,
>
> I am seeing something I cannot explain and would like some other
> pairs of eyes to help me spot what I'm doing wrong.
>
>
> Here is a tree-building parser rule:
>
> -==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
> looseImportList
>
>   : ( name
>   :
>     | ( '(' CLImports interpretableName ')' )
>
>       {
>         System.err.format("CP.lIL: interpretableName=\%s\%n",
>                           $interpretableName.text);
>       }
>     ->  ^( CLImports interpretableName )
>     ) *
>
>     EOF
>   ;
> -==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
>
>
> Here is the corresponding rule from the second-pass tree parser
>
> -==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
> ...
> -==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-
>
>
> When I supply input with four occurrences of second alternatives (the
> parenthesized one) I see four of the "CP.lIL..." diagnostic messages.
> But the second pass shows only one "CB.lIL..." diagnostic trace, the
> one for the last of the four input forms.
>
> What am I missing?
>
> Thanks.

From r.mark.volkmann at gmail.com  Tue Oct  9 10:06:53 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 9 Oct 2007 12:06:53 -0500
Subject: [antlr-interest] simple rules not deterministic
Message-ID: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>

When I generate code from my grammar I get a warning I don't
understand that says "Decision can match input such as "NAME" using
multiple alternatives: 1, 2". This is on the line that defines
methodCall.

Here's a snippet of my grammar.

methodCall: t=target p=parameter* -> ^(CALL $t $p);
objectReference: 'me' | NAME;
parameter: variableDef;
target: objectReference | CLASS_NAME;
type:	'integer' | 'float' | 'text' | 'yesno';
variableDef: NAME (':' type)?;
CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;

I see that NAME matches both target and parameter, but target is
required and parameter is optional. I don't understand why this isn't
deterministic.

-- 
R. Mark Volkmann
Object Computing, Inc.

From jimi at temporal-wave.com  Tue Oct  9 10:24:52 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 9 Oct 2007 10:24:52 -0700
Subject: [antlr-interest] simple rules not deterministic
In-Reply-To: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
References: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
Message-ID: <BAY130-DS2F88187E299EFEDDD020386A50@phx.gbl>

I imagine the other rules in you grammar are allowing something akin to:

methodCall methodCall

In that case, the input:

name name

Can either be matched as 'target' and then an optional 'parameter', OR
'target' 'target'. Hence it is ambiguous. It isn?t clear if this is a
problem with the way you have constructed the grammar or a true ambiguity in
the language you are parsing, but hopefully this info will give you the clue
you need to decide :-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Mark Volkmann
> Sent: Tuesday, October 09, 2007 10:07 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] simple rules not deterministic
> 
> When I generate code from my grammar I get a warning I don't
> understand that says "Decision can match input such as "NAME" using
> multiple alternatives: 1, 2". This is on the line that defines
> methodCall.
> 
> Here's a snippet of my grammar.
> 
> methodCall: t=target p=parameter* -> ^(CALL $t $p);
> objectReference: 'me' | NAME;
> parameter: variableDef;
> target: objectReference | CLASS_NAME;
> type:	'integer' | 'float' | 'text' | 'yesno';
> variableDef: NAME (':' type)?;
> CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
> NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;
> 
> I see that NAME matches both target and parameter, but target is
> required and parameter is optional. I don't understand why this isn't
> deterministic.
> 
> --
> R. Mark Volkmann
> Object Computing, Inc.
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date:
> 10/8/2007 4:54 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/44ffdba3/attachment.html 

From anonftp at gmail.com  Tue Oct  9 10:26:30 2007
From: anonftp at gmail.com (Mihai Gheorghe)
Date: Tue, 9 Oct 2007 20:26:30 +0300
Subject: [antlr-interest] antlr v3 grammar inheritance
Message-ID: <e27291870710091026q627ae512ma12cdf7a39472fed@mail.gmail.com>

Using ANTLR v3.0.1,
I'm trying to inherit rules from one grammar to another, like this:

//========================Start file Base.g3=========================
grammar Base;

baseRule
    : F1
    | F2
    | F3
    | F4
    ;

F1
    : 'F1'
    ;
F2
    : 'F2'
    ;
F3
    : 'F3'
    ;
F4
    : 'F4'
    ;

f5
    : 'Something'
    ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;
//========================End file Base.g3=========================

//========================Start file Extended.g3=========================
grammar Extended;

options {
 superClass=BaseParser;
}


compilationUnit
    : func1N
    | ABC
    ;

func1N
    : g1
    ;

g1
    : F1
    | F2
    ;

g2
    : F3
    | F4
    ;

ABC
    : 'ABC'
    ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;
//========================End file Extended.g3=========================


but ANTLR doesn't recognize rules defined in Base when called from Extended

I've checked the documentation but found no examples. Instead I got:

http://www.antlr.org/wiki/display/ANTLR3/inheritance+or+some+other+grammar+sharing+mechanism
http://www.antlr.org/wiki/display/ANTLR3/add+superClass+to+lexer

Are these IMPLEMENTED in ANTLR v3.0.1?

Does anybody solved the problem of grammar inheritance in v3?

-- 
Best regards,
Mihai
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/a4506ba6/attachment.html 

From Austin_Hastings at Yahoo.com  Tue Oct  9 10:34:52 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 09 Oct 2007 13:34:52 -0400
Subject: [antlr-interest] antlr v3 grammar inheritance
In-Reply-To: <e27291870710091026q627ae512ma12cdf7a39472fed@mail.gmail.com>
References: <e27291870710091026q627ae512ma12cdf7a39472fed@mail.gmail.com>
Message-ID: <470BBBBC.9030506@Yahoo.com>

Are you using the "tokenVocab" option to force the two parsers to share 
a common token numbering scheme?


=Austin

Mihai Gheorghe wrote:
> Using ANTLR v3.0.1,
> I'm trying to inherit rules from one grammar to another, like this:
>
> //========================Start file Base.g3=========================
> grammar Base;
>
> baseRule
>     : F1
>     | F2
>     | F3
>     | F4
>     ;
>
> F1
>     : 'F1'
>     ;
> F2
>     : 'F2'
>     ;
> F3
>     : 'F3'
>     ;
> F4
>     : 'F4'
>     ;
>
> f5
>     : 'Something'
>     ;
>    
> WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
>     ;
> //========================End file Base.g3=========================
>
> //========================Start file Extended.g3=========================
> grammar Extended;
>
> options {
>  superClass=BaseParser;
> }
>  
>
> compilationUnit
>     : func1N
>     | ABC
>     ;
>
> func1N
>     : g1
>     ;
>
> g1
>     : F1
>     | F2
>     ;
>
> g2
>     : F3
>     | F4
>     ;
>
> ABC
>     : 'ABC'
>     ;
>
> WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
>     ;
> //========================End file Extended.g3=========================
>    
>
> but ANTLR doesn't recognize rules defined in Base when called from 
> Extended
>
> I've checked the documentation but found no examples. Instead I got:
>
> http://www.antlr.org/wiki/display/ANTLR3/inheritance+or+some+other+grammar+sharing+mechanism
> http://www.antlr.org/wiki/display/ANTLR3/add+superClass+to+lexer
>
> Are these IMPLEMENTED in ANTLR v3.0.1?
>
> Does anybody solved the problem of grammar inheritance in v3?
>
> -- 
> Best regards,
> Mihai
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.6/1059 - Release Date: 10/9/2007 8:44 AM
>   


From bpierson at theglobal.net  Tue Oct  9 10:35:40 2007
From: bpierson at theglobal.net (Bruce Pierson)
Date: Tue, 9 Oct 2007 11:35:40 -0600
Subject: [antlr-interest] simple rules not deterministic
In-Reply-To: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
References: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
Message-ID: <018101c80a9a$cfa50940$0201a8c0@BRUCE>

Your zero or more parameter should be written:

p+=parameter*

rather than

p=parameter*

Don't know if that will help, but it should avoid other problems down the
road...

--Bruce

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mark Volkmann
Sent: Tuesday, October 09, 2007 11:07 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] simple rules not deterministic

When I generate code from my grammar I get a warning I don't
understand that says "Decision can match input such as "NAME" using
multiple alternatives: 1, 2". This is on the line that defines
methodCall.

Here's a snippet of my grammar.

methodCall: t=target p=parameter* -> ^(CALL $t $p);
objectReference: 'me' | NAME;
parameter: variableDef;
target: objectReference | CLASS_NAME;
type:	'integer' | 'float' | 'text' | 'yesno';
variableDef: NAME (':' type)?;
CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;

I see that NAME matches both target and parameter, but target is
required and parameter is optional. I don't understand why this isn't
deterministic.

-- 
R. Mark Volkmann
Object Computing, Inc.


From parrt at cs.usfca.edu  Tue Oct  9 10:39:11 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 9 Oct 2007 10:39:11 -0700
Subject: [antlr-interest] antlr v3 grammar inheritance
In-Reply-To: <e27291870710091026q627ae512ma12cdf7a39472fed@mail.gmail.com>
References: <e27291870710091026q627ae512ma12cdf7a39472fed@mail.gmail.com>
Message-ID: <AEED0AB0-0D9A-4689-A7E6-658046F41ADE@cs.usfca.edu>

ANTLR 3.1 will have grammar imports :)

Ter

From bpierson at theglobal.net  Tue Oct  9 10:42:01 2007
From: bpierson at theglobal.net (Bruce Pierson)
Date: Tue, 9 Oct 2007 11:42:01 -0600
Subject: [antlr-interest] simple rules not deterministic
In-Reply-To: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
References: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
Message-ID: <018201c80a9b$b2ea3040$0201a8c0@BRUCE>

In addition to what I said before:

The whole thing should look like this:

methodCall: t=target p+=parameter* -> ^(CALL $t $p*);

Notice the '*' after the $p

--Bruce

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mark Volkmann
Sent: Tuesday, October 09, 2007 11:07 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] simple rules not deterministic

When I generate code from my grammar I get a warning I don't
understand that says "Decision can match input such as "NAME" using
multiple alternatives: 1, 2". This is on the line that defines
methodCall.

Here's a snippet of my grammar.

methodCall: t=target p=parameter* -> ^(CALL $t $p);
objectReference: 'me' | NAME;
parameter: variableDef;
target: objectReference | CLASS_NAME;
type:	'integer' | 'float' | 'text' | 'yesno';
variableDef: NAME (':' type)?;
CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;

I see that NAME matches both target and parameter, but target is
required and parameter is optional. I don't understand why this isn't
deterministic.

-- 
R. Mark Volkmann
Object Computing, Inc.


From jimi at temporal-wave.com  Tue Oct  9 11:30:39 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 9 Oct 2007 11:30:39 -0700
Subject: [antlr-interest] antlr v3 grammar inheritance
In-Reply-To: <e27291870710091026q627ae512ma12cdf7a39472fed@mail.gmail.com>
References: <e27291870710091026q627ae512ma12cdf7a39472fed@mail.gmail.com>
Message-ID: <BAY130-DS1353E39C8F0CDA80B7EE586A50@phx.gbl>

The grammar inheritance functionality is intended for release 3.1 I am
afraid.

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mihai Gheorghe
Sent: Tuesday, October 09, 2007 10:27 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] antlr v3 grammar inheritance

 

Using ANTLR v3.0.1,
I'm trying to inherit rules from one grammar to another, like this:

HYPERLINK
"http://www.antlr.org/wiki/display/ANTLR3/inheritance+or+some+other+grammar+
sharing+mechanism"http://www.antlr.org/wiki/display/ANTLR3/inheritance+or+so
me+other+grammar+sharing+mechanism
HYPERLINK
"http://www.antlr.org/wiki/display/ANTLR3/add+superClass+to+lexer"http://www
.antlr.org/wiki/display/ANTLR3/add+superClass+to+lexer

Are these IMPLEMENTED in ANTLR v3.0.1?

Does anybody solved the problem of grammar inheritance in v3?


 

 


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/78e8686d/attachment.html 

From r.mark.volkmann at gmail.com  Tue Oct  9 11:40:57 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 9 Oct 2007 13:40:57 -0500
Subject: [antlr-interest] simple rules not deterministic
In-Reply-To: <018201c80a9b$b2ea3040$0201a8c0@BRUCE>
References: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
	<018201c80a9b$b2ea3040$0201a8c0@BRUCE>
Message-ID: <f0fcc6820710091140o7643a537wb1cf1734ac75729b@mail.gmail.com>

On 10/9/07, Bruce Pierson <bpierson at theglobal.net> wrote:
> In addition to what I said before:
>
> The whole thing should look like this:
>
> methodCall: t=target p+=parameter* -> ^(CALL $t $p*);
>
> Notice the '*' after the $p

Thanks! Unfortunately even with that change I still get the warning on
that line.
Maybe it would help if I include the entire grammar. It's still pretty
short. This is the first grammar I've written for ANTLR so any
suggestions are welcomed! Here it is.

grammar LIM;

options {
  output = AST;
  ASTLabelType = CommonTree;
}

tokens {
  ASSIGN;
  ATTR;
  BLOCK;
  CALL;
  CLASS;
  METHOD;
  OBJECT = 'Object';
  PARAMS;
}

@lexer::header {
package org.lessismore.parser;
}

@parser::header {
package org.lessismore.parser;
}

access: 'private' | 'readonly' | 'rw'; // default is 'rw' (read/write)

attr
  : NAME -> ^(ATTR NAME OBJECT 'rw')
  | NAME ':' type -> ^(ATTR NAME type 'rw')
  | NAME ':' type ':' access -> ^(ATTR NAME type access);

assignment: variableDef '=' expression NEWLINE -> ^(ASSIGN variableDef
expression);

block: '[' parameterList? statement+ ']' -> ^(BLOCK parameterList? statement+);

classDef: attr* methodDef* -> ^(CLASS attr* methodDef*);

comment: commentBlock | commentLine;
commentBlock:	'##' TEXT '##';
commentLine: '#' TEXT NEWLINE;

constant: yesno | NUMBER | textLiteral;	

// When an expression is a single name, we'll first see if it's a method name.
// If not, we'll see if it's a variable name.
expression: constant | methodCall;	

methodDef: NAME '=' block -> ^(METHOD NAME block);

// TODO: Can't distinguish between a target and a parameter?
methodCall: t=target p+=parameter* -> ^(CALL $t $p*);

objectReference: 'me' | NAME;

parameterList: parameter+ '|' -> ^(PARAMS parameter+);

parameter: variableDef;
	
statement: assignment | comment | methodCall;

target: objectReference | CLASS_NAME;

textLiteral: '"' TEXT '"';

type:	'integer' | 'float' | 'text' | 'yesno';

variableDef: NAME (':' type)?;

yesno: 'yes' | 'no';

CHARACTER: ' '..'~'; // all ASCII characters except control characters
CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
DIGIT: ZERO | NONZERO_DIGIT;
FLOAT: INTEGER '.' UNSIGNED_INTEGER ('e' INTEGER)?;	
INTEGER: ZERO | SIGN? NONZERO_DIGIT DIGIT*;
LETTER:	LOWERCASE_LETTER | UPPERCASE_LETTER;
LOWERCASE_LETTER: 'a'..'z';
NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;
NEWLINE: '\r'? '\n';
NUMBER:	INTEGER | FLOAT;
NONZERO_DIGIT:	'1'..'9';
UNSIGNED_INTEGER:	ZERO | (NONZERO_DIGIT DIGIT*);
SIGN:	'+' | '-';

// All ASCII characters except letters, digits and control characters.
SYMBOL:	'!'..'/' | ':'..'@' | ']'..'`' | '{'..'~';

TEXT:	CHARACTER+;
UPPERCASE_LETTER:	'A'..'Z';
WS:	(' ' | '\n' | '\r' | '\t')+ { $channel = HIDDEN; };
ZERO:	'0';

> --Bruce
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mark Volkmann
> Sent: Tuesday, October 09, 2007 11:07 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] simple rules not deterministic
>
> When I generate code from my grammar I get a warning I don't
> understand that says "Decision can match input such as "NAME" using
> multiple alternatives: 1, 2". This is on the line that defines
> methodCall.
>
> Here's a snippet of my grammar.
>
> methodCall: t=target p=parameter* -> ^(CALL $t $p);
> objectReference: 'me' | NAME;
> parameter: variableDef;
> target: objectReference | CLASS_NAME;
> type:   'integer' | 'float' | 'text' | 'yesno';
> variableDef: NAME (':' type)?;
> CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
> NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;
>
> I see that NAME matches both target and parameter, but target is
> required and parameter is optional. I don't understand why this isn't
> deterministic.
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>
>


-- 
R. Mark Volkmann
Object Computing, Inc.

From jimi at temporal-wave.com  Tue Oct  9 11:48:43 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 9 Oct 2007 11:48:43 -0700
Subject: [antlr-interest] simple rules not deterministic
In-Reply-To: <f0fcc6820710091140o7643a537wb1cf1734ac75729b@mail.gmail.com>
References: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>	<018201c80a9b$b2ea3040$0201a8c0@BRUCE>
	<f0fcc6820710091140o7643a537wb1cf1734ac75729b@mail.gmail.com>
Message-ID: <BAY130-DS31984A0A43E7CDA22DEEC86A50@phx.gbl>

Mark,

With the full grammar, I can confirm that your issue is what I said. In that
the rule block has statement+ and this means that your methodCall can see
the same input in two different ways, being one call to it or two calls to
it.

You can try to rejig the grammar or use a predicate to get rid of the
warning, though I bet if you look at the code it is probably doing what you
'expect' anyway. Warnings are not good to leave hanging about of course.

Try:

methodCall: t=target ((parameter)=>p+=parameter)* -> ^(CALL $t $p*);

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Mark Volkmann
> Sent: Tuesday, October 09, 2007 11:41 AM
> To: Bruce Pierson
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] simple rules not deterministic
> 
> On 10/9/07, Bruce Pierson <bpierson at theglobal.net> wrote:
> > In addition to what I said before:
> >
> > The whole thing should look like this:
> >
> > methodCall: t=target p+=parameter* -> ^(CALL $t $p*);
> >
> > Notice the '*' after the $p
> 
> Thanks! Unfortunately even with that change I still get the warning on
> that line.
> Maybe it would help if I include the entire grammar. It's still pretty
> short. This is the first grammar I've written for ANTLR so any
> suggestions are welcomed! Here it is.
> 
> grammar LIM;
> 
> options {
>   output = AST;
>   ASTLabelType = CommonTree;
> }
> 
> tokens {
>   ASSIGN;
>   ATTR;
>   BLOCK;
>   CALL;
>   CLASS;
>   METHOD;
>   OBJECT = 'Object';
>   PARAMS;
> }
> 
> @lexer::header {
> package org.lessismore.parser;
> }
> 
> @parser::header {
> package org.lessismore.parser;
> }
> 
> access: 'private' | 'readonly' | 'rw'; // default is 'rw' (read/write)
> 
> attr
>   : NAME -> ^(ATTR NAME OBJECT 'rw')
>   | NAME ':' type -> ^(ATTR NAME type 'rw')
>   | NAME ':' type ':' access -> ^(ATTR NAME type access);
> 
> assignment: variableDef '=' expression NEWLINE -> ^(ASSIGN variableDef
> expression);
> 
> block: '[' parameterList? statement+ ']' -> ^(BLOCK parameterList?
> statement+);
> 
> classDef: attr* methodDef* -> ^(CLASS attr* methodDef*);
> 
> comment: commentBlock | commentLine;
> commentBlock:	'##' TEXT '##';
> commentLine: '#' TEXT NEWLINE;
> 
> constant: yesno | NUMBER | textLiteral;
> 
> // When an expression is a single name, we'll first see if it's a
> method name.
> // If not, we'll see if it's a variable name.
> expression: constant | methodCall;
> 
> methodDef: NAME '=' block -> ^(METHOD NAME block);
> 
> // TODO: Can't distinguish between a target and a parameter?
> methodCall: t=target p+=parameter* -> ^(CALL $t $p*);
> 
> objectReference: 'me' | NAME;
> 
> parameterList: parameter+ '|' -> ^(PARAMS parameter+);
> 
> parameter: variableDef;
> 
> statement: assignment | comment | methodCall;
> 
> target: objectReference | CLASS_NAME;
> 
> textLiteral: '"' TEXT '"';
> 
> type:	'integer' | 'float' | 'text' | 'yesno';
> 
> variableDef: NAME (':' type)?;
> 
> yesno: 'yes' | 'no';
> 
> CHARACTER: ' '..'~'; // all ASCII characters except control characters
> CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
> DIGIT: ZERO | NONZERO_DIGIT;
> FLOAT: INTEGER '.' UNSIGNED_INTEGER ('e' INTEGER)?;
> INTEGER: ZERO | SIGN? NONZERO_DIGIT DIGIT*;
> LETTER:	LOWERCASE_LETTER | UPPERCASE_LETTER;
> LOWERCASE_LETTER: 'a'..'z';
> NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;
> NEWLINE: '\r'? '\n';
> NUMBER:	INTEGER | FLOAT;
> NONZERO_DIGIT:	'1'..'9';
> UNSIGNED_INTEGER:	ZERO | (NONZERO_DIGIT DIGIT*);
> SIGN:	'+' | '-';
> 
> // All ASCII characters except letters, digits and control characters.
> SYMBOL:	'!'..'/' | ':'..'@' | ']'..'`' | '{'..'~';
> 
> TEXT:	CHARACTER+;
> UPPERCASE_LETTER:	'A'..'Z';
> WS:	(' ' | '\n' | '\r' | '\t')+ { $channel = HIDDEN; };
> ZERO:	'0';
> 
> > --Bruce
> >
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org
> > [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mark Volkmann
> > Sent: Tuesday, October 09, 2007 11:07 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] simple rules not deterministic
> >
> > When I generate code from my grammar I get a warning I don't
> > understand that says "Decision can match input such as "NAME" using
> > multiple alternatives: 1, 2". This is on the line that defines
> > methodCall.
> >
> > Here's a snippet of my grammar.
> >
> > methodCall: t=target p=parameter* -> ^(CALL $t $p);
> > objectReference: 'me' | NAME;
> > parameter: variableDef;
> > target: objectReference | CLASS_NAME;
> > type:   'integer' | 'float' | 'text' | 'yesno';
> > variableDef: NAME (':' type)?;
> > CLASS_NAME: UPPERCASE_LETTER (LETTER | DIGIT)*;
> > NAME: LOWERCASE_LETTER (LETTER | DIGIT)*;
> >
> > I see that NAME matches both target and parameter, but target is
> > required and parameter is optional. I don't understand why this isn't
> > deterministic.
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
> >
> >
> 
> 
> --
> R. Mark Volkmann
> Object Computing, Inc.
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date:
> 10/8/2007 4:54 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/8f2b5c1b/attachment-0001.html 

From r.mark.volkmann at gmail.com  Tue Oct  9 12:11:23 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 9 Oct 2007 14:11:23 -0500
Subject: [antlr-interest] simple rules not deterministic
In-Reply-To: <BAY130-DS31984A0A43E7CDA22DEEC86A50@phx.gbl>
References: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>
	<018201c80a9b$b2ea3040$0201a8c0@BRUCE>
	<f0fcc6820710091140o7643a537wb1cf1734ac75729b@mail.gmail.com>
	<BAY130-DS31984A0A43E7CDA22DEEC86A50@phx.gbl>
Message-ID: <f0fcc6820710091211t48232e62xed001ebe247efdf6@mail.gmail.com>

On 10/9/07, Jim Idle <jimi at temporal-wave.com> wrote:
>
> Mark,
>
> With the full grammar, I can confirm that your issue is what I said. In that
> the rule block has statement+ and this means that your methodCall can see
> the same input in two different ways, being one call to it or two calls to
> it.
>
> You can try to rejig the grammar or use a predicate to get rid of the
> warning, though I bet if you look at the code it is probably doing what you
> 'expect' anyway. Warnings are not good to leave hanging about of course.
>
> Try:
>
> methodCall: t=target ((parameter)=>p+=parameter)* -> ^(CALL $t $p*);

That fixed it! Thanks!

I can't say I understand it yet though. Can you explain what this part means?

((parameter)=>p+=parameter)*

How does that differ from the following?

p+=parameter*

-- 
R. Mark Volkmann
Object Computing, Inc.

From trunkel at gmail.com  Tue Oct  9 12:34:39 2007
From: trunkel at gmail.com (troy runkel)
Date: Tue, 9 Oct 2007 15:34:39 -0400
Subject: [antlr-interest] Possible bug in C-target runtime related to
	off-channel tokens
Message-ID: <620da58c0710091234k221c66e1wfc86fabc03e8718c@mail.gmail.com>

The grammar I'm working on is configured to write comments and
whitespace to the hidden token channel.  I found that if the text I'm
trying to parse begins with one of these hidden tokens the token is
sent to the parser instead of being skipped.

It looks like the problem is in the fillBuffer function in
antlr3tokenstream.cpp.  At the end of fillBuffer we call
skipOffTokenChannels and then initialize the
tokenStream->tstream->istream->cachedSize variable.  However,
skipOffTokenChannels refers to
tokenStream->tstream->istream->cachedSize.  In my test case the cached
size was 0 so skipOffTokenChannels failed to skip the hidden channel
tokens.

I fixed the problem by simply moving the call to skipOffTokenChannels
after setting the tokenStream->tstream->istream->cachedSize variable.

I believe you'll only see this problem if you also set
discardOffChannelToks to FALSE in the token stream (which is what I'm
doing).

Troy Runkel

From jimi at temporal-wave.com  Tue Oct  9 13:11:14 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 9 Oct 2007 13:11:14 -0700
Subject: [antlr-interest] Possible bug in C-target runtime related
	to	off-channel tokens
In-Reply-To: <620da58c0710091234k221c66e1wfc86fabc03e8718c@mail.gmail.com>
References: <620da58c0710091234k221c66e1wfc86fabc03e8718c@mail.gmail.com>
Message-ID: <BAY130-DS3CED26ED951BF187382DC86A50@phx.gbl>

Thanks for looking into it - I will add a fix for this and the two or three
other things that have come up recently. Probably at the weekend.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of troy runkel
> Sent: Tuesday, October 09, 2007 12:35 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Possible bug in C-target runtime related to
> off-channel tokens
> 
> The grammar I'm working on is configured to write comments and
> whitespace to the hidden token channel.  I found that if the text I'm
> trying to parse begins with one of these hidden tokens the token is
> sent to the parser instead of being skipped.
> 
> It looks like the problem is in the fillBuffer function in
> antlr3tokenstream.cpp.  At the end of fillBuffer we call
> skipOffTokenChannels and then initialize the
> tokenStream->tstream->istream->cachedSize variable.  However,
> skipOffTokenChannels refers to
> tokenStream->tstream->istream->cachedSize.  In my test case the cached
> size was 0 so skipOffTokenChannels failed to skip the hidden channel
> tokens.
> 
> I fixed the problem by simply moving the call to skipOffTokenChannels
> after setting the tokenStream->tstream->istream->cachedSize variable.
> 
> I believe you'll only see this problem if you also set
> discardOffChannelToks to FALSE in the token stream (which is what I'm
> doing).
> 
> Troy Runkel
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date:
> 10/8/2007 4:54 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/9e93ce3b/attachment.html 

From jimi at temporal-wave.com  Tue Oct  9 13:12:40 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 9 Oct 2007 13:12:40 -0700
Subject: [antlr-interest] simple rules not deterministic
In-Reply-To: <f0fcc6820710091211t48232e62xed001ebe247efdf6@mail.gmail.com>
References: <f0fcc6820710091006h3a31c41fjd0f480249d3a33cd@mail.gmail.com>	
	<018201c80a9b$b2ea3040$0201a8c0@BRUCE>	
	<f0fcc6820710091140o7643a537wb1cf1734ac75729b@mail.gmail.com>	
	<BAY130-DS31984A0A43E7CDA22DEEC86A50@phx.gbl>
	<f0fcc6820710091211t48232e62xed001ebe247efdf6@mail.gmail.com>
Message-ID: <BAY130-DS1492C4471DA24BECDE82F86A50@phx.gbl>

Take a look at the Wiki entry regarding predicates. This is really just
saying to look ahead in the tokens and if the rule parameter can be matched,
then definitely match it there. It was probably doing this by default, but
you don?t want the warning of course.

Jim

> -----Original Message-----
> From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> Sent: Tuesday, October 09, 2007 12:11 PM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] simple rules not deterministic
> 
> On 10/9/07, Jim Idle <jimi at temporal-wave.com> wrote:
> >
> > Mark,
> >
> > With the full grammar, I can confirm that your issue is what I said.
> In that
> > the rule block has statement+ and this means that your methodCall can
> see
> > the same input in two different ways, being one call to it or two
> calls to
> > it.
> >
> > You can try to rejig the grammar or use a predicate to get rid of the
> > warning, though I bet if you look at the code it is probably doing
> what you
> > 'expect' anyway. Warnings are not good to leave hanging about of
> course.
> >
> > Try:
> >
> > methodCall: t=target ((parameter)=>p+=parameter)* -> ^(CALL $t $p*);
> 
> That fixed it! Thanks!
> 
> I can't say I understand it yet though. Can you explain what this part
> means?
> 
> ((parameter)=>p+=parameter)*
> 
> How does that differ from the following?
> 
> p+=parameter*
> 
> --
> R. Mark Volkmann
> Object Computing, Inc.
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date:
> 10/8/2007 4:54 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/0ff170ee/attachment.html 

From antlr at mirality.co.nz  Tue Oct  9 13:24:04 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 10 Oct 2007 09:24:04 +1300
Subject: [antlr-interest] ENHANCEMENT - Have "lexer grammar" generate
 recognition for string literals in tokenVocab
In-Reply-To: <470B82B1.3060409@Yahoo.com>
References: <470B82B1.3060409@Yahoo.com>
Message-ID: <20071009202416.D26F011EA87@www.antlr.org>

At 02:31 10/10/2007, Austin Hastings wrote:
 >
 >When more than one parser is in use, they need to share a common 

 >(initial) vocabulary. This can come from the source lexer via 
the
 >tokenVocab option.
[...]
 >I would like the "lexer grammar" mode of antlr to be extended to 

 >accept a tokenVocab (it currently does this) and further to
 >generate the appropriate tokens for string literals it finds in
 >the tokenVocab.

I can't see how that could possibly work -- you've set up a cyclic 
dependency.  You can't build the parser until you've built the 
lexer (since the parser uses the lexer's tokens) and you can't 
build the lexer until you've built the parser (since the lexer 
uses the parser's extra tokens).  So you can't build anything 
unless you've already built it, which doesn't work.

(The problem is even worse when you have multiple parsers and a 
common lexer, which is what you appear to be describing -- the 
lexer has to support the union of string literals from all 
potential parsers, or they won't work.)

Just define your string literals in a "tokens" block at the top of 
the lexer.  That's what it's for.


From harsha.nagesh at credit-suisse.com  Tue Oct  9 14:20:54 2007
From: harsha.nagesh at credit-suisse.com (Nagesh, Harsha)
Date: Tue, 9 Oct 2007 17:20:54 -0400
Subject: [antlr-interest] simple question on V2 grammar
Message-ID: <2C28FF0D4B055343B1AEFFE32812310DE69569@enyc12p32001.corpny.csfb.com>

Hi - Can anybody please help me in this simple grammar ?
 
My language consists only of Letters (a..z) and a few tokens ("and", "or"). I am trying to match an expression "A and B" using the following
 
Parser
---------
myOp:
            atom (AND atom)*
       ;
 
atom: Letter
        ;
 
Lexer
-------
 
tokens { AND = "and";}
Letter: 'a'..'z'
 
 
When I feed the expression "A and B" to this, the parser fails. The second token, Instead of matching with AND, matches with Letter and thus fails....I am not sure how can I fix this ? I tried to use syntactic predicate 
 
myOp:
            (atom AND) => atom (AND atom)*
       ;
 
but antlr ignored it when generating the code saying that syntactic predicate not required when only one alternative exists...
 
Can anybody please help
 
Thanks
Harsha
 

==============================================================================
Please access the attached hyperlink for an important electronic communications disclaimer: 

http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
==============================================================================
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/305d4a25/attachment-0001.html 

From jimi at temporal-wave.com  Tue Oct  9 14:29:14 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 9 Oct 2007 14:29:14 -0700
Subject: [antlr-interest] simple question on V2 grammar
In-Reply-To: <2C28FF0D4B055343B1AEFFE32812310DE69569@enyc12p32001.corpny.csfb.com>
References: <2C28FF0D4B055343B1AEFFE32812310DE69569@enyc12p32001.corpny.csfb.com>
Message-ID: <BAY130-DS1B0D115F113C56803C8C786A50@phx.gbl>

You want:

 

AND : ?and?;

 

I believe. And your Letter rule matches lower case only, but the sample you
gave has upper case.

 

Hope this helps,

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Nagesh, Harsha
Sent: Tuesday, October 09, 2007 2:21 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] simple question on V2 grammar

 

Hi - Can anybody please help me in this simple grammar ?

 

My language consists only of Letters (a..z) and a few tokens ("and", "or").
I am trying to match an expression "A and B" using the following

 

Parser

---------

myOp:

            atom (AND atom)*

       ;

 

atom: Letter

        ;

 

Lexer

-------

 

tokens { AND = "and";}

Letter: 'a'..'z'

 

 

When I feed the expression "A and B" to this, the parser fails. The second
token, Instead of matching with AND, matches with Letter and thus fails....I
am not sure how can I fix this ? I tried to use syntactic predicate 

 

myOp:

            (atom AND) => atom (AND atom)*

       ;

 

but antlr ignored it when generating the code saying that syntactic
predicate not required when only one alternative exists...

 

Can anybody please help

 

Thanks

Harsha

 

============================================================================
==
Please access the attached hyperlink for an important electronic
communications disclaimer: 
 
http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
============================================================================
==

 

No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/7cf52537/attachment.html 

From harsha.nagesh at credit-suisse.com  Tue Oct  9 14:39:51 2007
From: harsha.nagesh at credit-suisse.com (Nagesh, Harsha)
Date: Tue, 9 Oct 2007 22:39:51 +0100
Subject: [antlr-interest] simple question on V2 grammar
Message-ID: <2C28FF0D4B055343B1AEFFE32812310DE6956A@enyc12p32001.corpny.csfb.com>

I have the option "caseSensitive = false;" set in my lexer.
 
where should I use
 
AND:'and' ?
 
 I tried it as lexer rule and also as a token, in all cases antlr gives a syntax error...can we really give 
singleQuote and singleQuote, anywhere ? 
 
  _____  

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Tuesday, October 09, 2007 5:29 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] simple question on V2 grammar



You want:

 

AND : 'and';

 

I believe. And your Letter rule matches lower case only, but the sample you gave has upper case.

 

Hope this helps,

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Nagesh, Harsha
Sent: Tuesday, October 09, 2007 2:21 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] simple question on V2 grammar

 

Hi - Can anybody please help me in this simple grammar ?

 

My language consists only of Letters (a..z) and a few tokens ("and", "or"). I am trying to match an expression "A and B" using the following

 

Parser

---------

myOp:

            atom (AND atom)*

       ;

 

atom: Letter

        ;

 

Lexer

-------

 

tokens { AND = "and";}

Letter: 'a'..'z'

 

 

When I feed the expression "A and B" to this, the parser fails. The second token, Instead of matching with AND, matches with Letter and thus fails....I am not sure how can I fix this ? I tried to use syntactic predicate 

 

myOp:

            (atom AND) => atom (AND atom)*

       ;

 

but antlr ignored it when generating the code saying that syntactic predicate not required when only one alternative exists...

 

Can anybody please help

 

Thanks

Harsha

 

==============================================================================
Please access the attached hyperlink for an important electronic communications disclaimer: 
 
http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
==============================================================================

 

No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007 4:54 PM


No virus found in this outgoing message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007 4:54 PM



==============================================================================
Please access the attached hyperlink for an important electronic communications disclaimer: 

http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
==============================================================================
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/36696120/attachment-0001.html 

From lgcraymer at yahoo.com  Tue Oct  9 14:56:37 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 9 Oct 2007 14:56:37 -0700 (PDT)
Subject: [antlr-interest] simple question on V2 grammar
In-Reply-To: <2C28FF0D4B055343B1AEFFE32812310DE6956A@enyc12p32001.corpny.csfb.com>
Message-ID: <301221.13244.qm@web55904.mail.re3.yahoo.com>

Jim gave you ANTLR 3 advice.  What you really want is
something like:

class Foo extends Lexer;
options {
   k = 3;
}

tokens {
    AND;
    OR;
}

Letter
    :
    'a' ( 'n' 'd' { _ttype = AND; } )?
    |
        'o' ('r' { _ttype = OR; } )?
    |
        'b'..'n'
    |
        'q'..'z'
    ;

protected
WS : /* insert the usual definition here */ ;

and you might get further.  Another option is to have
an IDENT rule instead of a Letter rule:
IDENT
    :  'a' .. 'z' ('a' .. 'z' )*
    ;
with the lexer (or IDENT rule) option "checkLiterals"
set to true and your string literals defined in the
tokens section.

--Loring


--- "Nagesh, Harsha" <harsha.nagesh at credit-suisse.com>
wrote:

> I have the option "caseSensitive = false;" set in my
> lexer.
>  
> where should I use
>  
> AND:'and' ?
>  
>  I tried it as lexer rule and also as a token, in
> all cases antlr gives a syntax error...can we really
> give 
> singleQuote and singleQuote, anywhere ? 
>  
>   _____  
> 
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf
> Of Jim Idle
> Sent: Tuesday, October 09, 2007 5:29 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] simple question on V2
> grammar
> 
> 
> 
> You want:
> 
>  
> 
> AND : 'and';
> 
>  
> 
> I believe. And your Letter rule matches lower case
> only, but the sample you gave has upper case.
> 
>  
> 
> Hope this helps,
> 
>  
> 
> Jim
> 
>  
> 
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf
> Of Nagesh, Harsha
> Sent: Tuesday, October 09, 2007 2:21 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] simple question on V2
> grammar
> 
>  
> 
> Hi - Can anybody please help me in this simple
> grammar ?
> 
>  
> 
> My language consists only of Letters (a..z) and a
> few tokens ("and", "or"). I am trying to match an
> expression "A and B" using the following
> 
>  
> 
> Parser
> 
> ---------
> 
> myOp:
> 
>             atom (AND atom)*
> 
>        ;
> 
>  
> 
> atom: Letter
> 
>         ;
> 
>  
> 
> Lexer
> 
> -------
> 
>  
> 
> tokens { AND = "and";}
> 
> Letter: 'a'..'z'
> 
>  
> 
>  
> 
> When I feed the expression "A and B" to this, the
> parser fails. The second token, Instead of matching
> with AND, matches with Letter and thus fails....I am
> not sure how can I fix this ? I tried to use
> syntactic predicate 
> 
>  
> 
> myOp:
> 
>             (atom AND) => atom (AND atom)*
> 
>        ;
> 
>  
> 
> but antlr ignored it when generating the code saying
> that syntactic predicate not required when only one
> alternative exists...
> 
>  
> 
> Can anybody please help
> 
>  
> 
> Thanks
> 
> Harsha
> 
>  
> 
>
==============================================================================
> Please access the attached hyperlink for an
> important electronic communications disclaimer: 
>  
>
http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
>
==============================================================================
> 
>  
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.5/1058 -
> Release Date: 10/8/2007 4:54 PM
> 
> 
> No virus found in this outgoing message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.5/1058 -
> Release Date: 10/8/2007 4:54 PM
> 
> 
> 
>
==============================================================================
> Please access the attached hyperlink for an
> important electronic communications disclaimer: 
> 
>
http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
>
==============================================================================
> 



       
____________________________________________________________________________________
Yahoo! oneSearch: Finally, mobile search 
that gives answers, not web links. 
http://mobile.yahoo.com/mobileweb/onesearch?refer=1ONXIC

From jimi at temporal-wave.com  Tue Oct  9 15:05:53 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 9 Oct 2007 15:05:53 -0700
Subject: [antlr-interest] simple question on V2 grammar
In-Reply-To: <301221.13244.qm@web55904.mail.re3.yahoo.com>
References: <2C28FF0D4B055343B1AEFFE32812310DE6956A@enyc12p32001.corpny.csfb.com>
	<301221.13244.qm@web55904.mail.re3.yahoo.com>
Message-ID: <BAY130-DS281DB276A095200243ABE86A50@phx.gbl>

Oh dear, so I did - my apologies for that!

Jim

> -----Original Message-----
> From: Loring Craymer [mailto:lgcraymer at yahoo.com]
> Sent: Tuesday, October 09, 2007 2:57 PM
> To: Nagesh, Harsha; 'Jim Idle'; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] simple question on V2 grammar
> 
> Jim gave you ANTLR 3 advice.  What you really want is
> something like:
> 


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.5/1058 - Release Date: 10/8/2007
4:54 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071009/e203de9b/attachment.html 

From parrt at cs.usfca.edu  Tue Oct  9 18:06:10 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 9 Oct 2007 18:06:10 -0700
Subject: [antlr-interest] Mantra 1.0a2 released
Message-ID: <C1A7E785-52CE-485B-AA04-CDD71935107A@cs.usfca.edu>

http://www.linguamantra.org/

http://www.linguamantra.org/CHANGES.txt

E.g., integrated StringTemplate:

	ST s = `public <name> = <init>;`;
	s["name"] = "Ter";
	s["init"] = "34";
	println(s.toString()); // emits "public Terence = 34;"

:)

Oh, and i rolled all dependant jars into a single jar for ease of use.

Ter

From Austin_Hastings at Yahoo.com  Tue Oct  9 19:18:44 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 09 Oct 2007 22:18:44 -0400
Subject: [antlr-interest] ENHANCEMENT - Have "lexer grammar" generate
 recognition for string literals in tokenVocab
In-Reply-To: <470B82B1.3060409@Yahoo.com> 
References: <470B82B1.3060409@Yahoo.com> 
Message-ID: <470C3684.8020102@Yahoo.com>

Below...

Gavin Lambert wrote:
> At 02:31 10/10/2007, Austin Hastings wrote:
> >
> >When more than one parser is in use, they need to share a common
> >(initial) vocabulary. This can come from the source lexer via the
> >tokenVocab option.
> [...]
> >I would like the "lexer grammar" mode of antlr to be extended to
> >accept a tokenVocab (it currently does this) and further to
> >generate the appropriate tokens for string literals it finds in
> >the tokenVocab.
>
> I can't see how that could possibly work -- you've set up a cyclic 
> dependency.  You can't build the parser until you've built the lexer 
> (since the parser uses the lexer's tokens) and you can't build the 
> lexer until you've built the parser (since the lexer uses the parser's 
> extra tokens).  So you can't build anything unless you've already 
> built it, which doesn't work.
>
> (The problem is even worse when you have multiple parsers and a common 
> lexer, which is what you appear to be describing -- the lexer has to 
> support the union of string literals from all potential parsers, or 
> they won't work.)
>
> Just define your string literals in a "tokens" block at the top of the 
> lexer.  That's what it's for.
>
>
>
Gavin,

There's no loop. My current system has the parser using the lexer's 
tokens. What I would like is for the lexer to use the parser's tokens. 
That would let the parser generate "anonymous" tokens like 'while'=91 
and then have the lexer go "oh, a literal string. I should generate an 
imaginary token for it with number = 91!"

The multiple parsers problem just doesn't happen - at least for me - 
because there's one syntax parser and the rest are tree parsers. The 
tree parsers depend on the output (AST) of the syntax parser, so 
basically everybody want's to use the tokenVocab from the syntax parser, 
instead of the lexer.

=Austin


From dt05ca4 at student.lth.se  Wed Oct 10 01:03:45 2007
From: dt05ca4 at student.lth.se (Christian Andersson)
Date: Wed, 10 Oct 2007 10:03:45 +0200 (CEST)
Subject: [antlr-interest] StringTemplate in tree grammar strategy
Message-ID: <49386.194.237.142.7.1192003425.squirrel@webmail.student.lth.se>


Hi all!

These questions is all about using StringTemplates in a tree grammar!

The background is that I have a 2 pass approach where I have a c dialect
grammar that builds the AST and a tree grammar that is suppose to gather
all the information there is about the structs in a file.

After reading the ANTLR reference, that when you choose output=template
you are forced to write template rewrite rules for every single rule in
the tree grammar? This is not an option since I only want the struct
syntax output. Please correct if wrong!

Then there are the other options output=template and rewrite=true.
Now this seems better now I only need to write template rewrite rules for
those rules that my struct syntax uses. However now I get all of my input
as output, though my struct syntax tokens can be changed using the
template rewriting the tokenbuffer. This is clearly not what I want
either, I still only want the structs type info as output.

So my question is, what is the best strategy to solve this using
stringtemplate?

Now I have a second question regarding only StringTemplates. A struct can
contain a infinite set of different types even new struct declarations
inside the given struct. What is a good strategy to write this template?
I was thinking maybee that the struct template could receive different
lists of the different types, however then the order of the types will be
changed based on its type and I dont want that. I really would like to
write the contents of the struct while walking the struct but then Im back
at the problems above.


I?m quite new to StringTemplate so all guidance and strategy solving these
problems will be appreciated!


BR Christian




From michael.peter at crossflare.de  Wed Oct 10 01:14:14 2007
From: michael.peter at crossflare.de (Michael Peter)
Date: Wed, 10 Oct 2007 10:14:14 +0200
Subject: [antlr-interest] Parsing a JSP-like language
Message-ID: <000801c80b15$8bd770b0$a3865210$@peter@crossflare.de>

Hi!

I need to parse a JSP-like language but I have problems finding the correct
lexer rules. My input basically is HTML with special tags ("<%" and "%>")
containing language statements. Here is a short example: 

<tr><td>Name</td><td><% Output( Name ) %></td><td>Image</td><td><% Image(
"bullet.gif" ) %></td></tr>

My problem is that I cannot find a lexer rule to properly match the text
outside of the <% ... %> statements. (Text outside of <% %> is written to
the output, so I need to match it)

My best guess so far was this (I'm using a gated semantic predicate to
distinguish between inside and outside of <% %> blocks):

TEXT : {!tagMode }?=> (options {greedy=false;}:.)* '<%';

But this rule obviously does not work there is some additional text after
the last %> and since there is no EOF in the lexer I cannot rewrite the '<%'
to ('<%'|EOF). I tried many other thing, but nothing seemed to work.

Maybe someone can help me?

Best regards,
Michael



From antlr at mirality.co.nz  Wed Oct 10 01:21:18 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 10 Oct 2007 21:21:18 +1300
Subject: [antlr-interest] ENHANCEMENT - Have "lexer grammar" generate
 recognition for string literals in tokenVocab
In-Reply-To: <470C3684.8020102@Yahoo.com>
References: <470B82B1.3060409@Yahoo.com>
 <470C3684.8020102@Yahoo.com>
Message-ID: <20071010082129.A8EA111EADA@www.antlr.org>

At 15:18 10/10/2007, Austin Hastings wrote:
 >There's no loop. My current system has the parser using the
 >lexer's tokens. What I would like is for the lexer to use the
 >parser's tokens.
 >That would let the parser generate "anonymous" tokens like
 >'while'=91 and then have the lexer go "oh, a literal string. I
 >should generate an imaginary token for it with number = 91!"

But that's my point -- you can't do that without having a cyclic 
dependency.

Ok, let's imagine that what you describe is available, and you've 
got two grammar files that use it (and no output files yet).

Now you run ANTLR to compile the lexer.  Whoops, can't do that, 
don't have the parser's tokens file yet.
So you run ANTLR to compile the parser.  Whoops, can't do that 
either, don't have the lexer's tokens file yet.
Now you're stuck.

What you'd need to be able to do to resolve this is to build an 
initial lexer ignoring the vocab, then build the parser and figure 
out its tokens, then go back and build the lexer again, inserting 
the new tokens, and finally build the parser yet again since the 


From antlr at mirality.co.nz  Wed Oct 10 01:26:05 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 10 Oct 2007 21:26:05 +1300
Subject: [antlr-interest] ENHANCEMENT - Have "lexer grammar" generate
 recognition for string literals in tokenVocab
In-Reply-To: <7.1.0.9.0.20071010211709.0379bec8@mirality.co.nz>
References: <470B82B1.3060409@Yahoo.com> <470C3684.8020102@Yahoo.com>
	<7.1.0.9.0.20071010211709.0379bec8@mirality.co.nz>
Message-ID: <20071010082615.53E3611E99A@www.antlr.org>

Mere moments ago, I wrote:
 >What you'd need to be able to do to resolve this is to build an
 >initial lexer ignoring the vocab, then build the parser and 
figure
 >out its tokens, then go back and build the lexer again, 
inserting
 >the new tokens, and finally build the parser yet again since the 


Gah, sorry, accidentally pressed the Send key sequence.  Anyway:

... finally build the parser yet again since the lexer may have 
changed its token ids around.

All of which is quite a mess, and is what combined grammars do for 
you anyway.

 >The multiple parsers problem just doesn't happen - at least for 
me
 >- because there's one syntax parser and the rest are tree 
parsers.
 >The tree parsers depend on the output (AST) of the syntax 
parser,
 >so basically everybody want's to use the tokenVocab from the
 >syntax parser, instead of the lexer.

But you can already do that.  And if you don't have multiple 
syntax parsers then I don't see why you're not using a combined 
grammar anyway, since that would do everything you seem to want to 
do.


From Austin_Hastings at Yahoo.com  Wed Oct 10 04:34:05 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 10 Oct 2007 07:34:05 -0400
Subject: [antlr-interest] ENHANCEMENT - Have "lexer grammar" generate
 recognition for string literals in tokenVocab
In-Reply-To: <7.1.0.9.0.20071010211709.0379bec8@mirality.co.nz> 
References: <470B82B1.3060409@Yahoo.com> <470C3684.8020102@Yahoo.com>
	<7.1.0.9.0.20071010211709.0379bec8@mirality.co.nz> 
Message-ID: <470CB8AD.7060909@Yahoo.com>

Gavin,

Let's try this again. I'm pretty sure there's no cycle.

Let's say my DESIRED lexer looks like this:

lexer grammar Lex;
options {tokenVocab = Parser;}
ID : ('a'..'z')+ ;
WS: (' '|'\t'|'\n')* {skip();}

Further, my DESIRED parser looks like this:

parser grammar Parser;
options {output=AST;}    // Note: no tokenVocab here - this is the 
source of tokens

file: (decl | call )*;

decl: 'int' ID ';' ;

call : ID '(' args? ')' ';'
     ;

args: ID ( ',' ID )* ;

My DESIRED AST parser looks like this:

tree grammar AST;
options {tokenVocab = Parser;}
tokens { CALL; DECLARE; ARGS; }

file: (decl|call)* ;
decl: 'int' ID ';'
    -> ^(DECLARE ID)
    ;
call: ID '(' args? ')' ';'
    -> ^(CALL ID args)
    ;
args: a+=ID (',' a+=ID)*
    -> ^(ARGS $a+)
    ;

Notice that the lexer takes tokens from the parser. The AST parser takes 
tokens from the parser, then adds a few of its own. The parser takes 
tokens from nobody. So the tsort is going to be Parser first, then 
lexer/ast in any order. What I'm proposing is that the parser would emit 
lines like

ID = 7;
'int' = 3;

in its tokens file (it already does). Currently, the lexer can read this 
with no problems, but then it doesn't do anything with the 'int'=3 
tokens - imaginary token ids auto-generated in the parser.

What I want is for the lexer to automatically do what it ALREADY does in 
combined mode - generate rules for recognizing the 'int'=3 tokens, and 
return them to the parser.

What is interesting is that this all happens smoothly in the combined 
mode. But if you hack at the separated parser/lexer, you can eventually 
get around the error messages and get both of them on the same page, 
token-list-wise, but the lexer mode stubbornly refuses to generate magic 
tokens if it isn't a combined grammar.

I *can* get it to generate with a sed script, by taking the parser 
tokens file and generating a bogus rule inside the lexer grammar 
[[not_used: 'int' '(' ';' ')' ',' ID ; ]] and then running the lexer 
grammar as a combined grammar. But I'm not confident that the generated 
output is going to be valid, and I don't know where to begin testing it. :(

=Austin



Gavin Lambert wrote:
> Mere moments ago, I wrote:
> >What you'd need to be able to do to resolve this is to build an
> >initial lexer ignoring the vocab, then build the parser and figure
> >out its tokens, then go back and build the lexer again, inserting
> >the new tokens, and finally build the parser yet again since the
>
> Gah, sorry, accidentally pressed the Send key sequence.  Anyway:
>
> ... finally build the parser yet again since the lexer may have 
> changed its token ids around.
>
> All of which is quite a mess, and is what combined grammars do for you 
> anyway.
>
> >The multiple parsers problem just doesn't happen - at least for me
> >- because there's one syntax parser and the rest are tree parsers.
> >The tree parsers depend on the output (AST) of the syntax parser,
> >so basically everybody want's to use the tokenVocab from the
> >syntax parser, instead of the lexer.
>
> But you can already do that.  And if you don't have multiple syntax 
> parsers then I don't see why you're not using a combined grammar 
> anyway, since that would do everything you seem to want to do.
>
>
>


From Austin_Hastings at Yahoo.com  Wed Oct 10 06:50:28 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 10 Oct 2007 09:50:28 -0400
Subject: [antlr-interest] BUG - ANT plugin for Antlr3 does not parse "parser
 grammar" at top of file (Workaround)
Message-ID: <470CD8A4.9090803@Yahoo.com>

The Ant task to support ANTLR3 calls a private routine called 
"getGeneratedFile" to parse the header of the source grammar file. This 
is done to determine the name of the output file, in order to compare 
the "output" file with the "input" file to determine if the input has 
been modified.

The pattern used is about line 446 of ANTLR3.java:
       
        Pattern p = 
Pattern.compile("^\\p{javaWhitespace}*(grammar|lexer\\p{javaWhitespace}+grammar|tree\\p{javaWhitespace}+grammar)\\p{javaWhitespace}+\\w+\\p{javaWhitespace}*;.*$", 
Pattern.CASE_INSENSITIVE|Pattern.CANON_EQ);

The pattern is not aware of the keyword 'parser' that can appear in 
parser-only grammar files. Essentially, it checks for lines like:
    grammar T;
    lexer grammar T;
    tree grammar T;
but doesn't check for:
    parser grammar T;

The solution is obvious - include 'parser' as a valid keyword in the 
pattern.

A workaround lies in the fact that the ant task is using line-oriented 
parsing. Change the header of your "parser grammar" from this:

    parser grammar T;
    options { blah blah blah }

to this:

    parser grammar T;
    /* Work around bug in Ant task: (word 'grammar' must be at start of 
line, modulo whitespace)
    grammar T; */
    options { blah blah blah }

Making sure that the grammar name (T) is correctly spelled in the comment.

=Austin







From jaluber at gmx.de  Wed Oct 10 08:52:54 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 10 Oct 2007 17:52:54 +0200
Subject: [antlr-interest] Bug in generation code
Message-ID: <470CF556.1000004@gmx.de>

Hi,

The attachment has an unmodified ANTLR grammar, which exposes a bug. The
"rule" rule goes as follows:

rule
scope {
	String name;
}
   :    DOC_COMMENT?
	( modifier=('protected'|'public'|'private'|'fragment') )?
	id {$rule::name = $id.text;}
	'!'?
	( arg=ARG_ACTION )?
	( 'returns' rt=ARG_ACTION  )?
	throwsSpec? optionsSpec? ruleScopeSpec? ruleAction*
	':'	altList	';'
	exceptionGroup?
	-> ^( RULE id {modifier!=null?adaptor.create(modifier):null}
              ^(ARG $arg)? ^(RET $rt)?
	      optionsSpec? ruleScopeSpec? ruleAction*
	      altList
	      exceptionGroup?
	      EOR["EOR"]
	      )
    ;

The problem is with this line:

( modifier=('protected'|'public'|'private'|'fragment') )?

While the strings are recognized correctly, they aren't set as value to
modifier. In other words, 'fragment' is simply swallowed. I suppose this
is a problem with Java.stg. Or is the source somewhere else?

Best regards,
Johannes Luber
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: ANTLRv3_1.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071010/cbcf4888/attachment.pl 

From jimi at temporal-wave.com  Wed Oct 10 12:39:23 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Oct 2007 12:39:23 -0700
Subject: [antlr-interest] Status of C#?
Message-ID: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>

Guys,

 

It seesm that the runtime binary that was working (for me at least) has
gone, so I built the C# runtime from the source code that was there. However
the generated code now seesm to complain that followingStackPointer_ does
not exist in the current context.

 

Before I revert to the previous version, does anyone know why this might
suddenly be the case or is it just that the C# .sln for VS2005 that is now
in the depot is no quite up to scratch, or something else altogether?

 

Jim 


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071010/9a1aeeaf/attachment.html 

From jimi at temporal-wave.com  Wed Oct 10 12:51:23 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Oct 2007 12:51:23 -0700
Subject: [antlr-interest] Status of C#?
In-Reply-To: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>
References: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>
Message-ID: <BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>

Actually, the previous version does work perfectly. It seems that there is
now something called ParserSharedState in which the fsp is kept, but it is
either not inherited or not public enough for the generated code to use it.
Is the current code supposed to be usable with the source code based
runtime, or is it in some quasi-state at the moment?

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Wednesday, October 10, 2007 12:39 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Status of C#?

 

Guys,

 

It seesm that the runtime binary that was working (for me at least) has
gone, so I built the C# runtime from the source code that was there. However
the generated code now seesm to complain that followingStackPointer_ does
not exist in the current context.

 

Before I revert to the previous version, does anyone know why this might
suddenly be the case or is it just that the C# .sln for VS2005 that is now
in the depot is no quite up to scratch, or something else altogether?

 

Jim 

 

No virus found in this outgoing message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM

 

No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071010/921f838d/attachment.html 

From jaluber at gmx.de  Wed Oct 10 13:02:08 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 10 Oct 2007 22:02:08 +0200
Subject: [antlr-interest] Status of C#?
In-Reply-To: <BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
References: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>
	<BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
Message-ID: <470D2FC0.1000009@gmx.de>

Jim Idle wrote:
> It seesm that the runtime binary that was working (for me at least)
> has gone,

Ter deleted them.

> so I built the C# runtime from the source code that was there.
> However the generated code now seesm to complain that
> followingStackPointer_ does not exist in the current context.
>
> Before I revert to the previous version, does anyone know why this
> might suddenly be the case or is it just that the C# .sln for VS2005
> that is now in the depot is no quite up to scratch, or something else
> altogether?

I've put new versions of some project files up, which finally use
relative paths and have the NET_2_0 symbol defined in case of the the VS
2005 files. I don't have VS 2003, so I didn't enter the symbol NET_1_1
into the build context of that solution. This isn't probably the cause
of your problem, as the treated classes aren't referenced by runtime
itself, but only by generated parsers. Anyway, the solution file is
still at revision one and hasn't changed in my local workspace. The
project works otherwise fine on my notebook.

> Actually, the previous version does work perfectly. It seems that
> there is now something called ParserSharedState in which the fsp is
> kept, but it is either not inherited or not public enough for the
> generated code to use it. Is the current code supposed to be usable
> with the source code based runtime, or is it in some quasi-state at
> the moment?

What is FSP? The source code itself should work as well the 3.0 version,
as far my tests tell me so far. ParserSharedState isn't mentioned in one
single file of the entire workspace and otherwise unknown to me. Can you
find out which file exactly doesn't work at the current revision for you?

Johannes

From r.mark.volkmann at gmail.com  Wed Oct 10 13:08:32 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 10 Oct 2007 15:08:32 -0500
Subject: [antlr-interest] grammar for single-line comments
Message-ID: <f0fcc6820710101308p12c7f987uaf21a2316e1c156f@mail.gmail.com>

I'm having trouble adding support for single-line comments to my grammar.
It's probably a simple mistake, but I don't see it.
Here's the part of my grammar that deals with comments.

COMMENT_LINE:
  '#'
  (options { greedy = false; } : .)*
  (NEWLINE | EOF)
  { $channel = HIDDEN; };

NEWLINE: '\r'? '\n' { $channel = HIDDEN; };

My sample input is just a single comment line with no NEWLINE at the end.

# This is a comment.

I get these error messages from the generated parser.

line 1:1 mismatched character ' ' expecting '<EOF>'
line 1:19 no viable alternative at character '.'

-- 
R. Mark Volkmann
Object Computing, Inc.

From jimi at temporal-wave.com  Wed Oct 10 13:29:46 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 10 Oct 2007 13:29:46 -0700
Subject: [antlr-interest] Status of C#?
In-Reply-To: <470D2FC0.1000009@gmx.de>
References: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>	<BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
	<470D2FC0.1000009@gmx.de>
Message-ID: <BAY130-DS3AD69918F72E6EC01B64386A60@phx.gbl>

That should have been RecognizerSharedState. IF you use the object browser
to look at the runtime assembly created by the VS2005 .sln file, you will
find that this is where the variable followingStackPointer (FSP) is not
kept. Hence the code generated by 3.0.1 cannot see it. I synced back to the
binary that was there before Ter deleted it, and it works correctly there
because followingStackPointer is held in the parser class.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Johannes Luber
> Sent: Wednesday, October 10, 2007 1:02 PM
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Status of C#?
> 
> Jim Idle wrote:
> > It seesm that the runtime binary that was working (for me at least)
> > has gone,
> 
> Ter deleted them.
> 
> > so I built the C# runtime from the source code that was there.
> > However the generated code now seesm to complain that
> > followingStackPointer_ does not exist in the current context.
> >
> > Before I revert to the previous version, does anyone know why this
> > might suddenly be the case or is it just that the C# .sln for VS2005
> > that is now in the depot is no quite up to scratch, or something else
> > altogether?
> 
> I've put new versions of some project files up, which finally use
> relative paths and have the NET_2_0 symbol defined in case of the the
> VS
> 2005 files. I don't have VS 2003, so I didn't enter the symbol NET_1_1
> into the build context of that solution. This isn't probably the cause
> of your problem, as the treated classes aren't referenced by runtime
> itself, but only by generated parsers. Anyway, the solution file is
> still at revision one and hasn't changed in my local workspace. The
> project works otherwise fine on my notebook.
> 
> > Actually, the previous version does work perfectly. It seems that
> > there is now something called ParserSharedState in which the fsp is
> > kept, but it is either not inherited or not public enough for the
> > generated code to use it. Is the current code supposed to be usable
> > with the source code based runtime, or is it in some quasi-state at
> > the moment?
> 
> What is FSP? The source code itself should work as well the 3.0
> version,
> as far my tests tell me so far. ParserSharedState isn't mentioned in
> one
> single file of the entire workspace and otherwise unknown to me. Can
> you
> find out which file exactly doesn't work at the current revision for
> you?
> 
> Johannes
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date:
> 10/9/2007 4:43 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071010/cdd9be0a/attachment.html 

From jaluber at gmx.de  Wed Oct 10 13:46:46 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 10 Oct 2007 22:46:46 +0200
Subject: [antlr-interest] Status of C#?
In-Reply-To: <BAY130-DS3AD69918F72E6EC01B64386A60@phx.gbl>
References: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>	<BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
	<470D2FC0.1000009@gmx.de>
	<BAY130-DS3AD69918F72E6EC01B64386A60@phx.gbl>
Message-ID: <470D3A36.9020403@gmx.de>

Jim Idle wrote:
> That should have been RecognizerSharedState. IF you use the object
> browser to look at the runtime assembly created by the VS2005 .sln file,
> you will find that this is where the variable followingStackPointer
> (FSP) is not kept. Hence the code generated by 3.0.1 cannot see it. I
> synced back to the binary that was there before Ter deleted it, and it
> works correctly there because followingStackPointer is held in the
> parser class.
> 
> Jim

There's the issue: The code in the repository requires also a fresh
CSharp.stg and is incompatible with code generated for earlier versions.
Luckily this requires only a regeneration with a newer antlr.jar to fix
that. Considering that Ter broke some time ago all targets while
developing for 3.1, a binary compatibility is impossible.

Johannes

From parrt at cs.usfca.edu  Wed Oct 10 13:52:55 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 10 Oct 2007 13:52:55 -0700
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <470CF556.1000004@gmx.de>
References: <470CF556.1000004@gmx.de>
Message-ID: <E8153C46-C52E-4AAF-82D0-B5D5536A1E86@cs.usfca.edu>


On Oct 10, 2007, at 8:52 AM, Johannes Luber wrote:

> The problem is with this line:
>
> ( modifier=('protected'|'public'|'private'|'fragment') )?
>
> While the strings are recognized correctly, they aren't set as  
> value to
> modifier. In other words, 'fragment' is simply swallowed. I suppose  
> this
> is a problem with Java.stg. Or is the source somewhere else?

Hi. this is on the to do list.  I've simply not gotten around to  
sending those attributes through.
Ter


From jaluber at gmx.de  Wed Oct 10 14:44:51 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 10 Oct 2007 23:44:51 +0200
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <E8153C46-C52E-4AAF-82D0-B5D5536A1E86@cs.usfca.edu>
References: <470CF556.1000004@gmx.de>
	<E8153C46-C52E-4AAF-82D0-B5D5536A1E86@cs.usfca.edu>
Message-ID: <470D47D3.9070403@gmx.de>

Terence Parr wrote:
> 
> On Oct 10, 2007, at 8:52 AM, Johannes Luber wrote:
> 
>> The problem is with this line:
>>
>> ( modifier=('protected'|'public'|'private'|'fragment') )?
>>
>> While the strings are recognized correctly, they aren't set as value to
>> modifier. In other words, 'fragment' is simply swallowed. I suppose this
>> is a problem with Java.stg. Or is the source somewhere else?
> 
> Hi. this is on the to do list.  I've simply not gotten around to sending
> those attributes through.

Will this be solved in 3.1?

Johannes

From parrt at cs.usfca.edu  Wed Oct 10 15:16:45 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 10 Oct 2007 15:16:45 -0700
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <470D47D3.9070403@gmx.de>
References: <470CF556.1000004@gmx.de>
	<E8153C46-C52E-4AAF-82D0-B5D5536A1E86@cs.usfca.edu>
	<470D47D3.9070403@gmx.de>
Message-ID: <72F30EBC-CB3D-4FD9-841C-2038B6072C9F@cs.usfca.edu>


On Oct 10, 2007, at 2:44 PM, Johannes Luber wrote:

> Terence Parr wrote:
>>
>> On Oct 10, 2007, at 8:52 AM, Johannes Luber wrote:
>>
>>> The problem is with this line:
>>>
>>> ( modifier=('protected'|'public'|'private'|'fragment') )?
>>>
>>> While the strings are recognized correctly, they aren't set as  
>>> value to
>>> modifier. In other words, 'fragment' is simply swallowed. I  
>>> suppose this
>>> is a problem with Java.stg. Or is the source somewhere else?
>>
>> Hi. this is on the to do list.  I've simply not gotten around to  
>> sending
>> those attributes through.
>
> Will this be solved in 3.1?

Not sure. Do you need it?
Ter


From open.zone at virgin.net  Wed Oct 10 19:38:29 2007
From: open.zone at virgin.net (Micheal J)
Date: Thu, 11 Oct 2007 03:38:29 +0100
Subject: [antlr-interest] Status of C#?
In-Reply-To: <BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
Message-ID: <013901c80baf$d0130970$c704a8c0@hercules>

Hi,
 
The code generated by the C# code gen in 3.1 (and all other 3.1-ready
targets too, I suspect) requires a 3.1 runtime. The runtime API has changed
(mostly to satisfy the grammar import feature). The RecognizerSharedState is
one such change.
 
The combination of the C# codegen and runtime for 3.1 in the depot (as of
when I checked it in) when used together were probably alpha-to-early_beta
quality. Once Johannes et al complete the update/testing of examples-v3 for
C#, it should be closer to release quality.
 
For now, use the 3.0 dlls with the 3.x C# codegen or, build and use the new
3.1 runtime from the depot contents along with the 3.1 templates in the
depot. The Nant build is currently broken after Johannes' recent check-ins
so, use VS.NET (or #Develop) to build the runtime.
 
Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited. 

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: 10 October 2007 20:51
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Status of C#?



Actually, the previous version does work perfectly. It seems that there is
now something called ParserSharedState in which the fsp is kept, but it is
either not inherited or not public enough for the generated code to use it.
Is the current code supposed to be usable with the source code based
runtime, or is it in some quasi-state at the moment?

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Wednesday, October 10, 2007 12:39 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Status of C#?

 

Guys,

 

It seesm that the runtime binary that was working (for me at least) has
gone, so I built the C# runtime from the source code that was there. However
the generated code now seesm to complain that followingStackPointer_ does
not exist in the current context.

 

Before I revert to the previous version, does anyone know why this might
suddenly be the case or is it just that the C# .sln for VS2005 that is now
in the depot is no quite up to scratch, or something else altogether?

 

Jim 

 

No virus found in this outgoing message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM

 

No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM


No virus found in this outgoing message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.6/1060 - Release Date: 10/9/2007
4:43 PM


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071011/783021d3/attachment.html 

From smouse.cas at gmail.com  Wed Oct 10 20:29:58 2007
From: smouse.cas at gmail.com (hao sun)
Date: Thu, 11 Oct 2007 12:29:58 +0900
Subject: [antlr-interest] question about using '+=' label
Message-ID: <d90266aa0710102029q121e2389t37b2ed373f9f8e2c@mail.gmail.com>

Hello guys. It's the first time I use ANTLR. It helps me making my parser
easily. But now I have a problem.

When I built my AST, I made my rewrite rule like:
expr: type ID ( ',' ID)* -> ^( type ID*)
Then, now, I want to write a tree grammar to collect all the IDs into a
list. If I write the tree grammar like:
expr: ^( type ids+=ID*) { ...use ids...}
a error message that I should add the output option will be emit. So is
there anyone has an idea about how to make "+=" label work in a tree
grammar? or any good idea about how to collect all the ID nodes? Please tell
me, thank you !!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071011/3001d4cb/attachment.html 

From Austin_Hastings at Yahoo.com  Wed Oct 10 20:58:51 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 10 Oct 2007 23:58:51 -0400
Subject: [antlr-interest] grammar for single-line comments
In-Reply-To: <f0fcc6820710101308p12c7f987uaf21a2316e1c156f@mail.gmail.com>
References: <f0fcc6820710101308p12c7f987uaf21a2316e1c156f@mail.gmail.com>
Message-ID: <470D9F7B.4010904@Yahoo.com>

Try ignoring the end-of-line/end-of-file issue:

COMMENT_LINE: '#' ~(NEWLINE)* ;

This says that the #, and any characters other than a newline that come 
after it, are the comment. The newline, if there is one (could be eof) 
is left to be treated as whitespace.

=Austin


Mark Volkmann wrote:
> I'm having trouble adding support for single-line comments to my grammar.
> It's probably a simple mistake, but I don't see it.
> Here's the part of my grammar that deals with comments.
>
> COMMENT_LINE:
>   '#'
>   (options { greedy = false; } : .)*
>   (NEWLINE | EOF)
>   { $channel = HIDDEN; };
>
> NEWLINE: '\r'? '\n' { $channel = HIDDEN; };
>
> My sample input is just a single comment line with no NEWLINE at the end.
>
> # This is a comment.
>
> I get these error messages from the generated parser.
>
> line 1:1 mismatched character ' ' expecting '<EOF>'
> line 1:19 no viable alternative at character '.'
>
>   


From vishalrsoni at gmail.com  Wed Oct 10 21:32:40 2007
From: vishalrsoni at gmail.com (Vishal Soni)
Date: Wed, 10 Oct 2007 21:32:40 -0700
Subject: [antlr-interest] Parsing numeric and alphanumeric
Message-ID: <c71658670710102132w6f233db4la46adfd6cf19a375@mail.gmail.com>

Hi,

I need to parse numeric and alphanumeric tokens in ANTLR. The tokens can be
Numbers or Alphanumeric that start with numbers


For e.g.

1111 ===> is a number
1AABC_ ===> is a Alphanumeric token
A_112===>is alphanumeric
_11111 => is alphanumeric


How would I define a grammar for something like this?

-- 
Thanks,
Vishal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071010/38a1a318/attachment.html 

From Austin_Hastings at Yahoo.com  Wed Oct 10 22:00:38 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Thu, 11 Oct 2007 01:00:38 -0400
Subject: [antlr-interest] Parsing numeric and alphanumeric
In-Reply-To: <c71658670710102132w6f233db4la46adfd6cf19a375@mail.gmail.com>
References: <c71658670710102132w6f233db4la46adfd6cf19a375@mail.gmail.com>
Message-ID: <470DADF6.2030608@Yahoo.com>

You have two tokens that can match some of the same elements.

Put the "smaller" one first in the file - in this case, that would be 
Number.

fragment Digit: '0'..'9' ;
fragment Alpha: '_' | 'A'..'Z';

Number: Digit+ ;
Alphanumeric: (Letter | Digit)+ ;


Note that I *could* have specified the difference more clearly - that 
Alphanumeric required at least one 'Letter' in it. That would look more 
complex:

Alphanumeric: (Letter|Digit)* Letter (Letter|Digit)* ;

But because ANTLR uses the order-of-appearance in the input grammar to 
decide which tokens to match, it isn't strictly necessary.

=Austin



Vishal Soni wrote:
> Hi,
>
> I need to parse numeric and alphanumeric tokens in ANTLR. The tokens 
> can be Numbers or Alphanumeric that start with numbers
>
>
> For e.g.
>
> 1111 ===> is a number
> 1AABC_ ===> is a Alphanumeric token
> A_112===>is alphanumeric
> _11111 => is alphanumeric
>
>
> How would I define a grammar for something like this?
>
> -- 
> Thanks,
> Vishal
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.6/1061 - Release Date: 10/10/2007 8:43 AM
>   


From the_madman at latinmail.com  Wed Oct 10 23:05:24 2007
From: the_madman at latinmail.com (Jorge Fuente-Alba)
Date: Thu, 11 Oct 2007 08:05:24 +0200 (CEST)
Subject: [antlr-interest] newbie: can't make c target in mingw/MSYS
Message-ID: <20071011060524.77998E60242@smtp.latinmail.com>

Hi.
Just discovered Antlr and then Antlrworks, tried defining some grammars and tested them and flipped out.
Decided to try the C target in my C   project, found out I needed the C static lib.

I downloaded the latest snapshot (libantlr3c-3.0.1.tar.gz) and tried to build the static lib. Configure script seemed to go fine, ending with "configure: exit 0".
Then, during compile, gcc aborts with a long list of errors, starting with:

In file included from include/antlr3baserecognizer.h:8,
                from src/antlr3baserecognizer.c:7:
include/antlr3defs.h:82: error: syntax error before "ANTLR3_INT8"
include/antlr3defs.h:82: warning: data definition has no type or storage class
include/antlr3defs.h:83: error: syntax error before "ANTLR3_INT16"
include/antlr3defs.h:83: warning: data definition has no type or storage class
include/antlr3defs.h:90: error: syntax error before "ANTLR3_UINT8"
include/antlr3defs.h:90: warning: data definition has no type or storage class
include/antlr3defs.h:91: error: syntax error before "ANTLR3_UINT16"
include/antlr3defs.h:91: warning: data definition has no type or storage class
In file included from include/antlr3baserecognizer.h:8,
                from src/antlr3baserecognizer.c:7:
include/antlr3defs.h:288: error: syntax error before "inc"
include/antlr3defs.h:292: error: syntax error before "fileName"
----------8<---snip-----8<--------

couldn't find any prebuilt binaries for antlr v3 under mingw either.
halp? seems people are using it happily so I must have done something wrong.

GCC 3.4.5, binutils 2.17.50, MSYS 1.0.10, libantlr3c-3.0.1 

Descubre el poder latino en el Mes de la Hispanidad http://www.starmedia.com/noticias/especiales/hispanos.html

From vbar at comp.cz  Wed Oct 10 23:59:03 2007
From: vbar at comp.cz (Vaclav Barta)
Date: Thu, 11 Oct 2007 08:59:03 +0200
Subject: [antlr-interest] Status of C#?
In-Reply-To: <470D2FC0.1000009@gmx.de>
References: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>	<BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
	<470D2FC0.1000009@gmx.de>
Message-ID: <470DC9B7.6070701@comp.cz>

Johannes Luber wrote:
> itself, but only by generated parsers. Anyway, the solution file is
> still at revision one and hasn't changed in my local workspace. The
> project works otherwise fine on my notebook.
There's an annoying difference from the binary version I'm using (which
has been discussed before but AFAIK without any conclusion):
$rule.text , which works in 3.0, generates uncompilable code when used
with the latest ANTLR. I can use $rule.Text , but for regression
testing it's certainly a pain... I'm not saying it's a bug (it's
the missing documentation which is a bug :-) ), but could $rule.text
be made to work?

	Bye
		Vasek




From vbar at comp.cz  Thu Oct 11 00:04:19 2007
From: vbar at comp.cz (Vaclav Barta)
Date: Thu, 11 Oct 2007 09:04:19 +0200
Subject: [antlr-interest] Status of C#?
In-Reply-To: <470D2FC0.1000009@gmx.de>
References: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>	<BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
	<470D2FC0.1000009@gmx.de>
Message-ID: <470DCAF3.2070303@comp.cz>

Johannes Luber wrote:
> 2005 files. I don't have VS 2003, so I didn't enter the symbol NET_1_1
> into the build context of that solution. This isn't probably the cause
Well, are we supporting .NET 1.1? I thought the consensus was to remove it?

	Bye
		Vasek


From amol_bhagavat at yahoo.co.uk  Thu Oct 11 00:54:34 2007
From: amol_bhagavat at yahoo.co.uk (amol Bhagavat)
Date: Thu, 11 Oct 2007 08:54:34 +0100 (BST)
Subject: [antlr-interest] Antlr parse cannot parse the file completly
Message-ID: <682492.27219.qm@web23205.mail.ird.yahoo.com>

Hi,
   
  Need your help.
   
  With the help of ANTLR i generated lexer & parser from the grammar . The grammer i developed for my requirement is to trace out indirect function calls like function pointers.
   
  My project directory contains 500+ files.I give one file at a time to the parser.
  But it seems it does not parse the file completely... i have put some information below about the lines it lefts out.
   
  FileName         Detects Upto Line       Last Line in the file        Difference
  file1                 20997                        21415                           418
  file2                 15047                        15672                           625
  file3                 8187                          8187                             0
  file4                 430                           450                               20
  file5                18870                        18920                            50
  file6                7957                          7988                             31
   
   
  I tried to use the java command like this
  java -Xmx1024m Main doutput.txt>goutput.txt
   
  (The doutput contains the file paths & goutput contains the parsed data.)
  But still it same.
  Pls let me know am i doing mistake anywhere or some limitation??
   
  Many Thanks..
   
   
  file1 

       
---------------------------------
 Yahoo! Answers - Get better answers from someone who knows. Tryit now.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071011/0d44908b/attachment.html 

From Waverly.Edwards at genesys.com  Thu Oct 11 04:20:38 2007
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Thu, 11 Oct 2007 07:20:38 -0400
Subject: [antlr-interest] end-of-line/end-of-file issue: *was* grammar for
	single-line comments
In-Reply-To: <470D9F7B.4010904@Yahoo.com>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1C2CCFB@navamane001.ad.internal.corp>


I haven't done this using ANTLR but in my hand written lexers I
eliminate the issue of having an EOF on the same line as any of my
source code by immediately introducing to the handle/stream upon opening
a file a carriage return/newline followed by an EOF or an EOF sentinel.
I speed up my code and simplify my logic because I know the EOF is going
to be the start of a new line ALWAYS.

I saw a somewhat complicated way of dealing with an EOF in the wiki and
didn't understand why it was an issue. The previous email awakened the
solution that I have used in the past.


W.


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Austin Hastings
Sent: Wednesday, October 10, 2007 11:59 PM
To: Mark Volkmann
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] grammar for single-line comments

Try ignoring the end-of-line/end-of-file issue:

COMMENT_LINE: '#' ~(NEWLINE)* ;

This says that the #, and any characters other than a newline that come
after it, are the comment. The newline, if there is one (could be eof)
is left to be treated as whitespace.

=Austin


Mark Volkmann wrote:
> I'm having trouble adding support for single-line comments to my
grammar.
> It's probably a simple mistake, but I don't see it.
> Here's the part of my grammar that deals with comments.
>
> COMMENT_LINE:
>   '#'
>   (options { greedy = false; } : .)*
>   (NEWLINE | EOF)
>   { $channel = HIDDEN; };
>
> NEWLINE: '\r'? '\n' { $channel = HIDDEN; };
>
> My sample input is just a single comment line with no NEWLINE at the
end.
>
> # This is a comment.
>
> I get these error messages from the generated parser.
>
> line 1:1 mismatched character ' ' expecting '<EOF>'
> line 1:19 no viable alternative at character '.'
>
>   


From kirby.bohling at gmail.com  Thu Oct 11 05:48:13 2007
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Thu, 11 Oct 2007 07:48:13 -0500
Subject: [antlr-interest] Parser testing
Message-ID: <3cac8fdf0710110548v7accb126u47ff9abc23dcb97e@mail.gmail.com>

All,

    I'm a relative newbie to parsing in general, and Antlr
specifically.  I'm a bit fan of test driven development, so I'd like
to write Unit tests.  I noticed that the front page has an article
about gUnit... While interesting, not exactly what I want for now.  I
haven't download it's source to see if and how they handled this.
Maybe that's what I should have done.

    My interest is in finding a way to have a grammar that has nice
error handling, but still be able to find an error.  I've done
something like the following to my grammer:

   private boolean recognitionFailed = false;

   public boolean getRecognitionFailed() {
        return recognitionFailed;
   }

   public void resetRecognitionFailed() {
        recognitionFailed = false;
   }

   protected void mismatch(IntStream input, int ttype, BitSet follow)
       throws RecognitionException
   {
      recognitionFailed = true;
      super.mismatch(input, ttype, follow);
   }


What I'm looking for is the easiest way to do something like this:

//  ... Setup a parser, and lexer to test input.
parser.declaration();
// Check to ensure that no error handling or recovery happened.  (It'd
also be nice to ensure that all of the input was consumed, but I think
that's doable).

For simple inputs that are attempting to parse C-like code with a
grammer like below:

program :
	declaration* ;


declaration
	: TYPE IDENTIFIER ';';
	
identifier : IDENTIFIER ;

TYPE
	: 'void'
	| 'int'
	| 'float'
	| 'double'
	| 'short'
	| 'long'
	| 'char'
	| 'signed'
	| 'unsigned'
	;

IDENTIFIER
	:  ('A'..'Z' | 'a'..'z' | '_')  ('A'..'Z' | 'a'..'z' | '_' | '0'..'9')* ;


WS
	: (
	  ' '
	| '\t'
	| '\n'
	| '\r' )+  {channel=99;};

If you pass in "0bar", the lexer finds the 0, prints an error, and
then proceeds to generate token for "bar", and then says that it is in
fact an "IDENTIFIER".  This will get fixed once I train th lexer to
understand numbers, but it also exhibits my problem fairly quickly.

Any help on dealing with this would be much appreciated.  I figured it
should be trivial to use the parser like  a regular expression, and
call the equivalent of Java "Regex.match()", but alas, that appears to
be more difficult then I think it should be.  I'm hoping I'm just
missing something blazingly obvious.

Thanks in advance,
      Kirby

From jimi at temporal-wave.com  Thu Oct 11 09:00:26 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 11 Oct 2007 09:00:26 -0700
Subject: [antlr-interest] newbie: can't make c target in mingw/MSYS
In-Reply-To: <20071011060524.77998E60242@smtp.latinmail.com>
References: <20071011060524.77998E60242@smtp.latinmail.com>
Message-ID: <BAY130-DS22C6799FA4D72E0AC099986A70@phx.gbl>

I have never tried building it with Mingw. Cygwin works fine. It would seem
that configure could not discover any types from your headers and so on.
Either that or something more subtle went wrong. Did you run the build just
as it says on the wiki?

To be honests, I have never had much success with mingw - is there any
particular reason that you need this, given that there is cygwin and also a
free MS compiler within the .Net framework?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jorge Fuente-Alba
> Sent: Wednesday, October 10, 2007 11:05 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] newbie: can't make c target in mingw/MSYS
> 
> Hi.
> Just discovered Antlr and then Antlrworks, tried defining some grammars
> and tested them and flipped out.
> Decided to try the C target in my C   project, found out I needed the C
> static lib.
> 
> I downloaded the latest snapshot (libantlr3c-3.0.1.tar.gz) and tried to
> build the static lib. Configure script seemed to go fine, ending with
> "configure: exit 0".
> Then, during compile, gcc aborts with a long list of errors, starting
> with:
> 
> In file included from include/antlr3baserecognizer.h:8,
>                 from src/antlr3baserecognizer.c:7:
> include/antlr3defs.h:82: error: syntax error before "ANTLR3_INT8"
> include/antlr3defs.h:82: warning: data definition has no type or
> storage class
> include/antlr3defs.h:83: error: syntax error before "ANTLR3_INT16"
> include/antlr3defs.h:83: warning: data definition has no type or
> storage class
> include/antlr3defs.h:90: error: syntax error before "ANTLR3_UINT8"
> include/antlr3defs.h:90: warning: data definition has no type or
> storage class
> include/antlr3defs.h:91: error: syntax error before "ANTLR3_UINT16"
> include/antlr3defs.h:91: warning: data definition has no type or
> storage class
> In file included from include/antlr3baserecognizer.h:8,
>                 from src/antlr3baserecognizer.c:7:
> include/antlr3defs.h:288: error: syntax error before "inc"
> include/antlr3defs.h:292: error: syntax error before "fileName"
> ----------8<---snip-----8<--------
> 
> couldn't find any prebuilt binaries for antlr v3 under mingw either.
> halp? seems people are using it happily so I must have done something
> wrong.
> 
> GCC 3.4.5, binutils 2.17.50, MSYS 1.0.10, libantlr3c-3.0.1
> 
> Descubre el poder latino en el Mes de la Hispanidad
> http://www.starmedia.com/noticias/especiales/hispanos.html
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date:
> 10/10/2007 5:11 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date: 10/10/2007
5:11 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071011/ba6ff8f8/attachment-0001.html 

From jimi at temporal-wave.com  Thu Oct 11 09:06:41 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 11 Oct 2007 09:06:41 -0700
Subject: [antlr-interest] Antlr parse cannot parse the file completly
In-Reply-To: <682492.27219.qm@web23205.mail.ird.yahoo.com>
References: <682492.27219.qm@web23205.mail.ird.yahoo.com>
Message-ID: <BAY130-DS3C98D3ED25B057078C76686A70@phx.gbl>

Either your parser is bombing out early or some construct is lacking within
it and it is just stopping at some point because of this. For a start, make
sure that you have a rule that looks for EOF as the last token, as this
might help you see why it is stopping early. After that, if cannot debug it
in ANTLRWorks, then you need to debug it in the target language (I am
presuming Java here as you don?t say, and Netbeans does a decent job if so).

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of amol Bhagavat
Sent: Thursday, October 11, 2007 12:55 AM
To: antlr
Subject: [antlr-interest] Antlr parse cannot parse the file completly

 

Hi,

 

Need your help.

 

With the help of ANTLR i generated lexer & parser from the grammar . The
grammer i developed for my requirement is to trace out indirect function
calls like function pointers.

 

My project directory contains 500+ files.I give one file at a time to the
parser.

But it seems it does not parse the file completely... i have put some
information below about the lines it lefts out.

 

FileName         Detects Upto Line       Last Line in the file
Difference

file1                 20997                        21415
418

file2                 15047                        15672
625

file3                 8187                          8187
0

file4                 430                           450
20

file5                18870                        18920
50

file6                7957                          7988
31

 

 

I tried to use the java command like this

java -Xmx1024m Main doutput.txt>goutput.txt

 

(The doutput contains the file paths & goutput contains the parsed data.)

But still it same.

Pls let me know am i doing mistake anywhere or some limitation??

 

Many Thanks..

 

 

file1 

  

   _____  

Yahoo! Answers - Get better answers from someone who knows. HYPERLINK
"http://uk.answers.yahoo.com/;_ylc=X3oDMTEydmViNG02BF9TAzIxMTQ3MTcxOTAEc2VjA
21haWwEc2xrA3RhZ2xpbmU"Try it now.

No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date: 10/10/2007
5:11 PM


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date: 10/10/2007
5:11 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071011/cd4ef22a/attachment.html 

From corellian.c at gmail.com  Thu Oct 11 09:28:19 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Thu, 11 Oct 2007 18:28:19 +0200
Subject: [antlr-interest] Two (or more?) comments in a row in the grammar
	file fails
Message-ID: <3edc2fbd0710110928x57cf18bxb41fcc026c4c9f81@mail.gmail.com>

Why when I put two or more multiline comments in a grammar file it fails to
generate the code?

Here my example:

tokens {
      LITINT        = 'int';
        PLUS        = '+';
    SEMI        = ';';
}

ID    :    ('a'..'z' | 'A'..'Z') ('a'..'z'| 'A'..'Z'|'0'..'9')* ;

/** comment 1 **/

/** comment 2 **/
add    :     (ID (PLUS! ID)+ SEMI!)+ ;

-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071011/5033f123/attachment.html 

From jaluber at gmx.de  Thu Oct 11 09:48:49 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 11 Oct 2007 18:48:49 +0200
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <72F30EBC-CB3D-4FD9-841C-2038B6072C9F@cs.usfca.edu>
References: <470CF556.1000004@gmx.de>
	<E8153C46-C52E-4AAF-82D0-B5D5536A1E86@cs.usfca.edu>
	<470D47D3.9070403@gmx.de>
	<72F30EBC-CB3D-4FD9-841C-2038B6072C9F@cs.usfca.edu>
Message-ID: <470E53F1.30703@gmx.de>

Terence Parr wrote:
> 
> On Oct 10, 2007, at 2:44 PM, Johannes Luber wrote:
>>
>> Will this be solved in 3.1?
> 
> Not sure. Do you need it?
> Ter
> 

I need it as one of my grammars is a derivative of the ANTLR 3 grammar.
Furthermore, how do you want to recognize fragment rules if you don't
fix it? I thought, 3.1 has finally a grammar parser implemented in 3.0?

Johannes

From jaluber at gmx.de  Thu Oct 11 09:56:46 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 11 Oct 2007 18:56:46 +0200
Subject: [antlr-interest] Two (or more?) comments in a row in the
 grammar file fails
In-Reply-To: <3edc2fbd0710110928x57cf18bxb41fcc026c4c9f81@mail.gmail.com>
References: <3edc2fbd0710110928x57cf18bxb41fcc026c4c9f81@mail.gmail.com>
Message-ID: <470E55CE.1090400@gmx.de>

Cristian Peraferrer wrote:
> Why when I put two or more multiline comments in a grammar file it fails
> to generate the code?
> 
> Here my example:
> 
> tokens {
>       LITINT        = 'int';
>         PLUS        = '+';
>     SEMI        = ';';
> }
> 
> ID    :    ('a'..'z' | 'A'..'Z') ('a'..'z'| 'A'..'Z'|'0'..'9')* ;
> 
> /** comment 1 **/
> 
> /** comment 2 **/
> add    :     (ID (PLUS! ID)+ SEMI!)+ ;
> 

/** starts a so-called DOC_COMMENT token, like the one used in Java. The
grammar accepts only one DOC_COMMENT per rule and you have two. The
solution is to merge the two DOC_COMMENTs onto one or use only /*.

Best regards,
Johannes Luber

From jaluber at gmx.de  Thu Oct 11 10:11:47 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 11 Oct 2007 19:11:47 +0200
Subject: [antlr-interest] Status of C#?
In-Reply-To: <470DCAF3.2070303@comp.cz>
References: <BAY130-DS299A575539A844AB1F3EA86A60@phx.gbl>	<BAY130-DS306436CFF6F453B5BA98E86A60@phx.gbl>
	<470D2FC0.1000009@gmx.de> <470DCAF3.2070303@comp.cz>
Message-ID: <470E5953.7050309@gmx.de>

Vaclav Barta wrote:
> Johannes Luber wrote:
>> 2005 files. I don't have VS 2003, so I didn't enter the symbol NET_1_1
>> into the build context of that solution. This isn't probably the cause
> Well, are we supporting .NET 1.1? I thought the consensus was to remove it?

The consensus was to support it as we figured out a minimal invasive way
to support .NET 1.1 - or to fork it, if necessary. After my recent
experience it may be probably easier to fork it, as one can better do
parallel refactorings.

Johannes

From antlr at mirality.co.nz  Thu Oct 11 12:16:45 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 12 Oct 2007 08:16:45 +1300
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <470CF556.1000004@gmx.de>
References: <470CF556.1000004@gmx.de>
Message-ID: <20071011191656.BF6CC11EA84@www.antlr.org>

At 04:52 11/10/2007, Johannes Luber wrote:
 >The problem is with this line:
 >
 >( modifier=('protected'|'public'|'private'|'fragment') )?
 >
 >While the strings are recognized correctly, they aren't set as
 >value to modifier. In other words, 'fragment' is simply 
swallowed.
 >I suppose this is a problem with Java.stg. Or is the source
 >somewhere else?

You can work around this by making it a subrule.

Also, you've defined a "tokens" entry for FRAGMENT, so you should 
probably be using that instead of repeating the string.


From parrt at cs.usfca.edu  Thu Oct 11 14:01:43 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 11 Oct 2007 14:01:43 -0700
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <470E53F1.30703@gmx.de>
References: <470CF556.1000004@gmx.de>
	<E8153C46-C52E-4AAF-82D0-B5D5536A1E86@cs.usfca.edu>
	<470D47D3.9070403@gmx.de>
	<72F30EBC-CB3D-4FD9-841C-2038B6072C9F@cs.usfca.edu>
	<470E53F1.30703@gmx.de>
Message-ID: <FD83E239-9FF0-4DCF-B2B2-339175490227@cs.usfca.edu>


On Oct 11, 2007, at 9:48 AM, Johannes Luber wrote:

> Terence Parr wrote:
>>
>> On Oct 10, 2007, at 2:44 PM, Johannes Luber wrote:
>>>
>>> Will this be solved in 3.1?
>>
>> Not sure. Do you need it?
>> Ter
>>
>
> I need it as one of my grammars is a derivative of the ANTLR 3  
> grammar.
> Furthermore, how do you want to recognize fragment rules if you don't
> fix it? I thought, 3.1 has finally a grammar parser implemented in  
> 3.0?

Not yet. it's a HUGE undertaking.  I got closer I think.

Ter


From jstpierre-antlr at mecheye.net  Thu Oct 11 14:26:58 2007
From: jstpierre-antlr at mecheye.net (ANTLR Mailing List)
Date: Thu, 11 Oct 2007 17:26:58 -0400
Subject: [antlr-interest] Simple tree-based interpreter not working....
Message-ID: <4ff3ab470710111426s9bd2723l9db9d9b932a9eb4c@mail.gmail.com>

Opening up ANTLRworks, I test out the "Simple tree-based interpreter"
grammar..

Unfortunately, it does work, throwing a null pointer exception...

Any hints?

http://www.antlr.org/wiki/display/ANTLR3/Simple+tree-based+interpeter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071011/9ecc147e/attachment.html 

From jaluber at gmx.de  Thu Oct 11 14:48:41 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 11 Oct 2007 23:48:41 +0200
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <20071011191657.27049gmx1@mx095.gmx.net>
References: <470CF556.1000004@gmx.de> <20071011191657.27049gmx1@mx095.gmx.net>
Message-ID: <470E9A39.40205@gmx.de>

Gavin Lambert wrote:
> At 04:52 11/10/2007, Johannes Luber wrote:
>>The problem is with this line:
>>
>>( modifier=('protected'|'public'|'private'|'fragment') )?
>>
>>While the strings are recognized correctly, they aren't set as
>>value to modifier. In other words, 'fragment' is simply swallowed.
>>I suppose this is a problem with Java.stg. Or is the source
>>somewhere else?
> 
> You can work around this by making it a subrule.

Thanks for the tip!
> 
> Also, you've defined a "tokens" entry for FRAGMENT, so you should
> probably be using that instead of repeating the string.
> 
That was actually an older grammar written by Ter - I replaced all
literals with tokens anyway. BTW, how is your ANTLR derivative named
again? I'd like to ask if you overlooked an email with some critiques
regarding your project, but I can't find that email again. :(

Johannes

From parrt at cs.usfca.edu  Thu Oct 11 14:51:03 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 11 Oct 2007 14:51:03 -0700
Subject: [antlr-interest] Simple tree-based interpreter not working....
In-Reply-To: <4ff3ab470710111426s9bd2723l9db9d9b932a9eb4c@mail.gmail.com>
References: <4ff3ab470710111426s9bd2723l9db9d9b932a9eb4c@mail.gmail.com>
Message-ID: <24A24FF0-494A-4641-8229-847BC15FA85B@cs.usfca.edu>

I think it comes from having an empty statement or {...} block.
Ter
On Oct 11, 2007, at 2:26 PM, ANTLR Mailing List wrote:

> Opening up ANTLRworks, I test out the "Simple tree-based  
> interpreter" grammar..
>
> Unfortunately, it does work, throwing a null pointer exception...
>
> Any hints?
>
> http://www.antlr.org/wiki/display/ANTLR3/Simple+tree-based+interpeter


From peizhao at itee.uq.edu.au  Thu Oct 11 23:17:40 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Fri, 12 Oct 2007 16:17:40 +1000
Subject: [antlr-interest] Converting grammar from v2.7.7 to v3.0.1
Message-ID: <470F1184.4040209@itee.uq.edu.au>

Hi all,

I would like to convert my old v2 grammar to the new v3 grammar with 
parser and tree grammar structure. To my understanding, the parser is 
for parsing a stream of input symbols, while the tree (AST) is for 
evaluating the inputs. However, I would like to know a few things in 
advance.

The file structure is the following:
1. a templates file (containing a number of TEMPLATE with a number #) in 
the format of

========================
//
//COPYRIGHT
//
TEMPLATE #
<..expr..>
ENDTEMPLATE

//Comment

TEMPLATE #
<..expr..>
ENDTEMPLATE

//Comment

TEMPLATE #
<..expr..>
ENDTEMPLATE

ValidateCode xxxxx

========================

2. a binary file encoded using appropriate Template #

What I want to do is to firstly parse the whole templates file, build 
AST trees for each template block, and invoke an action to verify it 
with the validation code (this is the indexing process).

And when a binary file is provided, it should decode the binary file 
according to template expressions specified in the template block of the 
templates file. The template # is specified in the beginning of the 
binary file.

So as the second stage, I would like to reuse only a block of the tree 
grammar (without re-parsing the template block) from the indexing 
process to parse the template expressions and invoke actions 
interactively with the binary file.


as a newbie to the ANTLR v3 (parser and tree grammar concept), I am not 
sure whether this is feasible.

Thanks in advance!

-- 
regards;

Peizhao

From antlr at mirality.co.nz  Thu Oct 11 23:53:47 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 12 Oct 2007 19:53:47 +1300
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <470E9A39.40205@gmx.de>
References: <470CF556.1000004@gmx.de> <20071011191657.27049gmx1@mx095.gmx.net>
	<470E9A39.40205@gmx.de>
Message-ID: <20071012065359.B430611E9F0@www.antlr.org>

At 10:48 12/10/2007, Johannes Luber wrote:
 >BTW, how is your ANTLR derivative named again? I'd like
 >to ask if you overlooked an email with some critiques
 >regarding your project, but I can't find that email again. :(

I don't have an ANTLR derivative, so you must be thinking of 
someone else :)


From amol_bhagavat at yahoo.co.uk  Fri Oct 12 04:16:04 2007
From: amol_bhagavat at yahoo.co.uk (amol Bhagavat)
Date: Fri, 12 Oct 2007 12:16:04 +0100 (BST)
Subject: [antlr-interest] Antlr parse cannot parse the file completly
In-Reply-To: <BAY130-DS3C98D3ED25B057078C76686A70@phx.gbl>
Message-ID: <378481.2316.qm@web23206.mail.ird.yahoo.com>

Hi , it seems due to some rule only & i able to find out which rule makes it to stop it.
  But to my surprise , its a part of rule if i remove it works smoothly & if i adds that it parses half.
   
  I generate the lexer & parser in java language & to parse c language code.
  I am pasting some part of my grammer here...
  The implementation is to find a specific variable in function definition parameters
  for ex. int function(MSGQ_TYPE  MessgQNew)
             {
                  int abc; 
                 --------
                  ---------
              }
   
   
   
   String MesgQSring = "MSGQ_TYPE";
 boolean isMesgQType(String name) {   
   if ( MesgQSring.equals(name) )
    {
      return true;
    }  
  return false;
 }
   
  translation_unit
scope Symbols; // entire file is a scope
@init {
  $Symbols::messageqnames = new HashSet();  
}
   
   
  parameterwithfptr
 : fptrDeclarationsub
 | (mesgqtypechk)? mesgobject
 | parameter_declaration
 ; 
   
  mesgqtypechk
 :{isMesgQType(input.LT(1).getText())}? IDENTIFIER
 ;
  mesgobject
 :IDENTIFIER
  {
   {$Symbols::messageqnames.add($IDENTIFIER.text);}
   }
   ;
   
  Now If i removes "(mesgqtypechk)? mesgobject" this part of the rule , it works.
  Not understanding why? IS there any way i can solve this problem?
  

Jim Idle <jimi at temporal-wave.com> wrote:
        v\:* {behavior:url(#default#VML);}  o\:* {behavior:url(#default#VML);}  w\:* {behavior:url(#default#VML);}  .shape {behavior:url(#default#VML);}                Either your parser is bombing out early or some construct is lacking within it and it is just stopping at some point because of this. For a start, make sure that you have a rule that looks for EOF as the last token, as this might help you see why it is stopping early. After that, if cannot debug it in ANTLRWorks, then you need to debug it in the target language (I am presuming Java here as you don?t say, and Netbeans does a decent job if so).
   
  Jim
   
        From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of amol Bhagavat
Sent: Thursday, October 11, 2007 12:55 AM
To: antlr
Subject: [antlr-interest] Antlr parse cannot parse the file completly


   
    Hi,

     

    Need your help.

     

    With the help of ANTLR i generated lexer & parser from the grammar . The grammer i developed for my requirement is to trace out indirect function calls like function pointers.

     

    My project directory contains 500+ files.I give one file at a time to the parser.

    But it seems it does not parse the file completely... i have put some information below about the lines it lefts out.

     

    FileName         Detects Upto Line       Last Line in the file        Difference

    file1                 20997                        21415                           418

    file2                 15047                        15672                           625

    file3                 8187                          8187                             0

    file4                 430                           450                               20

    file5                18870                        18920                            50

    file6                7957                          7988                             31

     

     

    I tried to use the java command like this

    java -Xmx1024m Main doutput.txt>goutput.txt

     

    (The doutput contains the file paths & goutput contains the parsed data.)

    But still it same.

    Pls let me know am i doing mistake anywhere or some limitation??

     

    Many Thanks..

     

     

    file1 

    
    
---------------------------------
  
  Yahoo! Answers - Get better answers from someone who knows. Try it now.
  No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date: 10/10/2007 5:11 PM



  No virus found in this outgoing message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date: 10/10/2007 5:11 PM



       
---------------------------------
 For ideas on reducing your carbon footprint visit Yahoo! For Good this month.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/88c51a1c/attachment-0001.html 

From OJAY78 at gmx.de  Fri Oct 12 06:05:05 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Fri, 12 Oct 2007 15:05:05 +0200
Subject: [antlr-interest] BR.recoverFromMismatchedToken what does that mean?
Message-ID: <20071012130505.161330@gmx.net>

Hi, 

I am confused...I had my little grammar working but made a few changes which results in a non working grammar :-(

I get the BR.recoverFromMismatchedToken Exception but I do not really know what its mean. Does anyone can please explain me this exception, maybe with an example.

Thanks
-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From jaluber at gmx.de  Fri Oct 12 06:55:31 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 12 Oct 2007 15:55:31 +0200
Subject: [antlr-interest] Bug in generation code
In-Reply-To: <20071012065400.31780gmx1@mx028.gmx.net>
References: <470CF556.1000004@gmx.de> <20071011191657.27049gmx1@mx095.gmx.net>
	<470E9A39.40205@gmx.de> <20071012065400.31780gmx1@mx028.gmx.net>
Message-ID: <470F7CD3.1020000@gmx.de>

Gavin Lambert wrote:
> At 10:48 12/10/2007, Johannes Luber wrote:
>>BTW, how is your ANTLR derivative named again? I'd like
>>to ask if you overlooked an email with some critiques
>>regarding your project, but I can't find that email again. :(
> 
> I don't have an ANTLR derivative, so you must be thinking of someone
> else :)
> 
I could have sworn, that the name of the email author was Loring Cramer
and not you. Well, maybe he reads this email here.

Johannes

From thomas.jackson.iii at gmail.com  Fri Oct 12 06:58:04 2007
From: thomas.jackson.iii at gmail.com (Thomas Jackson)
Date: Fri, 12 Oct 2007 09:58:04 -0400
Subject: [antlr-interest] Grammar Problem
Message-ID: <2b2bfd350710120658j5da34238j8b82e1b5b1ad06bd@mail.gmail.com>

[09:45:02] java.lang.NullPointerException
    at org.antlr.tool.ActionAnalysisLexer.mX_Y(ActionAnalysisLexer.java:139)
    at org.antlr.tool.ActionAnalysisLexer.mTokens(ActionAnalysisLexer.java
:323)
    at org.antlr.tool.ActionAnalysisLexer.nextToken(ActionAnalysisLexer.java
:69)
    at org.antlr.tool.ActionAnalysisLexer.analyze(ActionAnalysisLexer.java
:43)
    at org.antlr.tool.Grammar.examineAllExecutableActions(Grammar.java:1283)
    at org.antlr.tool.Grammar.setGrammarContent(Grammar.java:567)
    at org.antlr.tool.Grammar.setGrammarContent(Grammar.java:497)
    at org.antlr.works.grammar.EngineGrammar.createNewGrammar(Unknown
Source)
    at org.antlr.works.grammar.EngineGrammar.createParserGrammar(Unknown
Source)
    at org.antlr.works.grammar.EngineGrammar.createGrammars(Unknown Source)
    at org.antlr.works.grammar.EngineGrammar.analyze(Unknown Source)
    at org.antlr.works.grammar.CheckGrammar.run(Unknown Source)
    at java.lang.Thread.run(Thread.java:595)

In generating a tree grammar in ANTLRWorks I get a messagebox that pops up
with the following error.

Does anyone know of what things could cause this?

I can send out the grammar if it helps but wanted to make the note short to
begin with.

Thanks
Thomas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/fbf8d62f/attachment.html 

From jneeraj at us.ibm.com  Fri Oct 12 07:03:36 2007
From: jneeraj at us.ibm.com (Neeraj Joshi)
Date: Fri, 12 Oct 2007 08:03:36 -0600
Subject: [antlr-interest] Neeraj Joshi/Durham/IBM is out of the office.
Message-ID: <OF76CB3FCA.C3F07721-ON87257372.004D3BFC-87257372.004D3BFC@us.ibm.com>


I will be out of the office starting  10/12/2007 and will not return until
10/22/2007.

I am on vacation and  will have no access to email until wednesday 16th oct
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/bbe17e16/attachment.html 

From john.ridgway at trincoll.edu  Fri Oct 12 07:25:13 2007
From: john.ridgway at trincoll.edu (John Ridgway)
Date: Fri, 12 Oct 2007 10:25:13 -0400
Subject: [antlr-interest] Bug in libantlr3c configuration
Message-ID: <2B2166F5-DE85-40CD-8FEE-83DA633FD53A@trincoll.edu>

There seems to be a bug in the configure script for the Antlr v3 C  
target.  Specifically I receive the following message when I run  
configure after downloading libantlr3c.tar.gz and extracting it:

   ./configure: line 19360: #include: command not found

which seems to correspond to the following line in configure:

   $ac_includes_default

Is this a general problem - or unique to my environment?

Peace
- John


From thomas.jackson.iii at gmail.com  Fri Oct 12 07:32:25 2007
From: thomas.jackson.iii at gmail.com (Thomas Jackson)
Date: Fri, 12 Oct 2007 10:32:25 -0400
Subject: [antlr-interest] Fwd: Grammar Problem
In-Reply-To: <2b2bfd350710120658j5da34238j8b82e1b5b1ad06bd@mail.gmail.com>
References: <2b2bfd350710120658j5da34238j8b82e1b5b1ad06bd@mail.gmail.com>
Message-ID: <2b2bfd350710120732g232dd778re5ad8a00761a7ce5@mail.gmail.com>

Sorry if this is a duplicated message, my first one seemed not to go
through...


[09:45:02] java.lang.NullPointerException
    at org.antlr.tool.ActionAnalysisLexer.mX_Y(ActionAnalysisLexer.java:139)
    at org.antlr.tool.ActionAnalysisLexer.mTokens(ActionAnalysisLexer.java
:323)
    at org.antlr.tool.ActionAnalysisLexer.nextToken (
ActionAnalysisLexer.java:69)
    at org.antlr.tool.ActionAnalysisLexer.analyze(ActionAnalysisLexer.java
:43)
    at org.antlr.tool.Grammar.examineAllExecutableActions(Grammar.java:1283)
    at org.antlr.tool.Grammar.setGrammarContent (Grammar.java:567)
    at org.antlr.tool.Grammar.setGrammarContent(Grammar.java:497)
    at org.antlr.works.grammar.EngineGrammar.createNewGrammar(Unknown
Source)
    at org.antlr.works.grammar.EngineGrammar.createParserGrammar (Unknown
Source)
    at org.antlr.works.grammar.EngineGrammar.createGrammars(Unknown Source)
    at org.antlr.works.grammar.EngineGrammar.analyze(Unknown Source)
    at org.antlr.works.grammar.CheckGrammar.run(Unknown Source)
    at java.lang.Thread.run(Thread.java:595)

In generating a tree grammar in ANTLRWorks I get a messagebox that pops up
with the following error.

Does anyone know of what things could cause this?  Grammar is below....

Thanks
Thomas


tree grammar TSLtw;

options {
tokenVocab=TSL;
ASTLabelType=CommonTree;
output=template;
}

@header {
package com.microfocus.kenly.tsl;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;

import java.util.List;

}

@members {
  private File _fOutDir;

  public void setOutputDirectory(File fOutDir) throws
IllegalArgumentException
  {
      _fOutDir = fOutDir;
      if(!_fOutDir.exists())
          _fOutDir.mkdirs();
      if(!_fOutDir.isDirectory())
          throw new IllegalArgumentException();
  }
}
generate
    : type+
    ;

type
scope{
File dirPackage;
String baseType;
List<String> imports
}
@init
{
$type::dirPackage = null;
$type::baseType = null;
$type::imports = new ArrayList<String>();
}
    :  ^(TYPE ^(ID pr=packageRule) parent description (p+=property)*)
        {
            try
            {
                StringTemplate fileNameTemplate =
%filename(basename={$ID.text});
                StringTemplate packageNameTemplate =
%filename(basename={$ID.text});
                File fDir = $type::dirPackage != null ? $type::dirPackage :
_fOutDir;
                if(!fDir.exists())
                   fDir.mkdirs();
                File f = new File(fDir, fileNameTemplate.toString());
                PrintWriter wtr = new PrintWriter(new FileWriter(f));
                StringTemplate typeTemplate = %type(name={$ID.text},
basetype={$parent.st}, desc={$description.st}, props={$p});
                StringTemplate fileTemplate = %file();
                fileTemplate.setAttribute("class", typeTemplate.toString());
                fileTemplate.setAttribute("packagename", pr.toString());
                fileTemplate.setAttribute("imports", $type::imports);
                wtr.println(fileTemplate.toString());
                wtr.close();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
    ;

packageRule
    : ^(PACKAGE ids+=ID+)
      {
          StringTemplate packageDir = %dirname(vals={$ids});
          String absolutePath =
_fOutDir.getAbsolutePath()+"/"+packageDir.toString();
          $type::dirPackage = new File(absolutePath);
      }
    -> packagename(vals={$ids})
    ;

parent
    :  ^(PARENT ID) -> extend(name={$ID.text})
    |  PARENT     -> { %{"\\none"} }
    ;


property
scope{ String propertyName }
    : ^(PROP n=ID {$property::propertyName=$n.text; } t=propertytype) ->
property(prop={$t.st})
    ;

classtype
    : ^(n=ID ^(PACKAGE p+=ID+ ))
    {
          StringTemplate importSt = %import(package={$p}, classname={$n});
          $type::imports.add(importSt.toString());
    } -> {%{$n.text}}
    ;
propertytype
    : ^(CLASS classtype) -> class(name={$property::propertyName},
type={$classtype.st})
    | ^(LIST classtype) -> list(name={$property::propertyName},
type={$classtype.st})
    | ^(ENUM vals+=ID+) -> enum(name={$property::propertyName},
vals={$vals})
    ;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/cf62e440/attachment.html 

From Austin_Hastings at Yahoo.com  Fri Oct 12 07:37:58 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Fri, 12 Oct 2007 10:37:58 -0400
Subject: [antlr-interest] BUG - Antlr does not ignore whitespace in calls to
 parameterized rules (Java output)
Message-ID: <470F86C6.7000706@Yahoo.com>

This grammar has a parameterized rule, "param[]":

grammar bug;
file: ID param[ $ID.text ] ;
param[String s] : WS ;
ID: 'a';
WS: ' ';


Because of the spaces inside the [ $ID.text ] in the "file" rule, the 
output java looks like this:

        try {
            // bug.g:3:5: ( ID param[ $ID.text ] )
            // bug.g:4:2: ID param[ $ID.text ]
            {
            ID1=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_file10);
            pushFollow(FOLLOW_param_in_file12);
            param( , ID1.getText(),  );
            _fsp--;

Note the invalid commas in the call to param( , ID1.getText(), )

If I change the "file" rule to eliminate the spaces:      file: ID 
param[$ID.text] ;

I get this generated java:

        try {
            // bug.g:3:5: ( ID param[$ID.text] )
            // bug.g:4:2: ID param[$ID.text]
            {
            ID1=(Token)input.LT(1);
            match(input,ID,FOLLOW_ID_in_file10);
            pushFollow(FOLLOW_param_in_file12);
            param(ID1.getText());
            _fsp--;

And the call to param is syntactically valid. I don't know enough about 
the innards to know if this is a template problem or a core problem.

=Austin


From jaluber at gmx.de  Fri Oct 12 07:41:03 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 12 Oct 2007 16:41:03 +0200
Subject: [antlr-interest] RuleScope generation problem
Message-ID: <470F877F.3090009@gmx.de>

Hi,

if I use the following grammar snippet

scope RuleScope {
TypeInterpreter current;
string type; // Designates the type (e.g. 'fragment') as string
}

then I get

protected class RuleScope_scope
{
    protected internal TypeInterpreter current;
    protected internal string type;
    protected internal // Designates the type (e.g. 'fragment') as string;
}

As one can see, the comment causes to generate an extra code line, which
lacks some information. If I change the definition of the scope to

scope RuleScope {
string type; // Designates the type (e.g. 'fragment') as string
TypeInterpreter current;
}

then it works as expected.

Johannes

From rschulz at sonic.net  Fri Oct 12 08:13:31 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Fri, 12 Oct 2007 08:13:31 -0700
Subject: [antlr-interest] Fwd: Grammar Problem
In-Reply-To: <2b2bfd350710120732g232dd778re5ad8a00761a7ce5@mail.gmail.com>
References: <2b2bfd350710120658j5da34238j8b82e1b5b1ad06bd@mail.gmail.com>
	<2b2bfd350710120732g232dd778re5ad8a00761a7ce5@mail.gmail.com>
Message-ID: <200710120813.31158.rschulz@sonic.net>

On Friday 12 October 2007 07:32, Thomas Jackson wrote:
> Sorry if this is a duplicated message, my first one seemed not to go
> through...

The lag time on this mailing list reflector is often quite high.

Randall Schulz

From jimi at temporal-wave.com  Fri Oct 12 08:48:06 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 12 Oct 2007 08:48:06 -0700
Subject: [antlr-interest] Bug in libantlr3c configuration
In-Reply-To: <2B2166F5-DE85-40CD-8FEE-83DA633FD53A@trincoll.edu>
References: <2B2166F5-DE85-40CD-8FEE-83DA633FD53A@trincoll.edu>
Message-ID: <BAY130-DS3ECD8B1D40540691B4F1186A00@phx.gbl>

It seems to be a bug in configure. It is part of a test, that though it
prints that out, has no effect on the final Makefile, so while I would like
it to go away, I will just await updates in configure/automake.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of John Ridgway
> Sent: Friday, October 12, 2007 7:25 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Bug in libantlr3c configuration
> 
> There seems to be a bug in the configure script for the Antlr v3 C
> target.  Specifically I receive the following message when I run
> configure after downloading libantlr3c.tar.gz and extracting it:
> 
>    ./configure: line 19360: #include: command not found
> 
> which seems to correspond to the following line in configure:
> 
>    $ac_includes_default
> 
> Is this a general problem - or unique to my environment?
> 
> Peace
> - John
> 
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.8/1064 - Release Date:
> 10/11/2007 3:09 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.8/1064 - Release Date: 10/11/2007
3:09 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/2ddea74c/attachment.html 

From corellian.c at gmail.com  Fri Oct 12 09:32:04 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Fri, 12 Oct 2007 18:32:04 +0200
Subject: [antlr-interest] What's the motivation of using the "tokens
	section"?
Message-ID: <3edc2fbd0710120932k5040089y397f9bcd18fcd907@mail.gmail.com>

Hi,

I'm sure it's a newbie's typical question from who never read the manual,
but I'm not able to find the answer in the ANTLR's book.

Why I should use the "tokens" section? It's necessary in every grammar? why?

Thanks and apologies for the (stupid?) question.


Cristian

-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/cefd1775/attachment.html 

From Austin_Hastings at Yahoo.com  Fri Oct 12 09:35:57 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Fri, 12 Oct 2007 12:35:57 -0400
Subject: [antlr-interest] What's the motivation of using the
	"tokens	section"?
In-Reply-To: <3edc2fbd0710120932k5040089y397f9bcd18fcd907@mail.gmail.com>
References: <3edc2fbd0710120932k5040089y397f9bcd18fcd907@mail.gmail.com>
Message-ID: <470FA26D.4020804@Yahoo.com>

The tokens section is used to declare tokens that you have not specified 
elsewhere in your grammar. For example, if you want to emit an AST with 
nodes that precisely specify what is happening at a particular point in 
your code, you may opt to emit tokens like "FUNC_WITH_NO_ARGS" instead 
of emitting a function and then having to re-parse the argument info out 
of the tree nodes.

That would require putting

tokens { FUNC_WITH_NO_ARGS; }

in your grammar to let Antlr know that you intended to use that symbol 
later.

=Austin


Cristian Peraferrer wrote:
> Hi,
>
> I'm sure it's a newbie's typical question from who never read the 
> manual, but I'm not able to find the answer in the ANTLR's book.
>
> Why I should use the "tokens" section? It's necessary in every 
> grammar? why?
>
> Thanks and apologies for the (stupid?) question.
>
>
> Cristian
>
> -- 
> GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch 
> <mailto:corellian at swissjabber.ch>
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.14.8/1066 - Release Date: 10/12/2007 11:10 AM
>   


From jstpierre-antlr at mecheye.net  Fri Oct 12 12:14:07 2007
From: jstpierre-antlr at mecheye.net (ANTLR Mailing List)
Date: Fri, 12 Oct 2007 15:14:07 -0400
Subject: [antlr-interest] Fwd: Simple tree-based interpreter not working....
In-Reply-To: <4ff3ab470710111509kc28b7akbed0d43d36418c42@mail.gmail.com>
References: <4ff3ab470710111426s9bd2723l9db9d9b932a9eb4c@mail.gmail.com>
	<24A24FF0-494A-4641-8229-847BC15FA85B@cs.usfca.edu>
	<4ff3ab470710111509kc28b7akbed0d43d36418c42@mail.gmail.com>
Message-ID: <4ff3ab470710121214t2eb5059ei272ead7098377876@mail.gmail.com>

It seems that any input will trip the built-in interpreter.

Even the included example input..
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/2cb328f0/attachment.html 

From rmann at latencyzero.com  Fri Oct 12 12:32:00 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Fri, 12 Oct 2007 12:32:00 -0700
Subject: [antlr-interest] Example of a scripting language?
Message-ID: <FCB50053-159F-4D5E-80C0-6F11BFB34449@latencyzero.com>

I'm trying to build a very simple scripting language that has a C++/ 
Java-like syntax for defining simple and aggregate types. I have a  
GUI application that allows the user to type in commands in the  
language, but I'm not sure how to wire in the generated parser.

I figure I will call the parser multiple times as the user enters  
lines, but I have two types of state to keep track of.

One is the parser's actual state. It would be easiest for me to feed  
the parser a line at a time, as the user types it, but I'm not sure  
how to do this. One line may not represent a completely parseable  
(sp?) set of input (i.e., a statement may span multiple lines).

The other state is the result of multiple input statements. I think I  
understand how to maintain this state; it's simply up to the  
generated code to put it somewhere it can be kept.

Examples (">> " is my system's prompt):


 >> UInt32 foo = 123;		//  UInt32 is a pre-defined type reprsenting a  
32-bit unsigned integer

No output as a result of this parser input.

 >> send foo;

Sent 4 bytes			// System's output into interpreter window.
 >>

 >> struct FooT {

No output, the call to the parser has returned, and it needs more, so  
the prompt is displayed again:

 >> UInt32 field1;

No output, but more inptu is needed:

 >> };

No output, but now a new type is defined, "FooT".

 >> FooT myFoo;

No output, but FooT is instantiated as myFoo.

 >> myFoo.field1 = 123;

myFoo.field1 gets assigned a value.

Etc. This seems like it should be straightforward, but most of the  
examples show complete translations. Can someone point me in the  
right direction? Thanks!

-- 
Rick


From Austin_Hastings at Yahoo.com  Fri Oct 12 12:44:00 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Fri, 12 Oct 2007 15:44:00 -0400
Subject: [antlr-interest] BUG - Antlr is snooping in comments
Message-ID: <470FCE80.7020402@Yahoo.com>

/* There's a comment here, too. */
scope    Mumble {
    int        foo;    /* Comment at the end? (x = 1) */
}



After scratching my head for a while over a mysterious error message, I 
finally got the example case above.

 From what I can tell, ANTLR treats the curly braces as delimiting some 
mysterious other language -- this is decent, since it is trying to be 
language-agnostic. But the error message is a killer:

   [antlr3] error(148): 
/home/austin/parrot/languages/hlasm/lib/grammar/HlasmSyntax.g:60:14: 
rule parameters may not have init values: x

It took a while for me to understand what the problem was: apparently 
ANTLR is not *totally* ignoring what happens inside the curlies. It is 
trying to make sure that no initializers are provided -- possibly 
indicating that this was (or still is) a common problem. But it is going 
about it by looking for something like /\w+ =/ in the block, and 
generating an error if it is found.

For me this has translated into "you may not use equal sign in comments 
inside a scope block," which is amusing and annoying at the same time. I 
submit that when this kind of thing is found, it should be a warning 
rather than an error.

Or maybe antlr needs a tuneable warning / error system.

=Austin


From rschulz at sonic.net  Fri Oct 12 12:57:32 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Fri, 12 Oct 2007 12:57:32 -0700
Subject: [antlr-interest] BUG - Antlr is snooping in comments
In-Reply-To: <470FCE80.7020402@Yahoo.com>
References: <470FCE80.7020402@Yahoo.com>
Message-ID: <200710121257.32261.rschulz@sonic.net>

On Friday 12 October 2007 12:44, Austin Hastings wrote:
> /* There's a comment here, too. */
> scope    Mumble {
>     int        foo;    /* Comment at the end? (x = 1) */
> }
>
>
> After scratching my head for a while over a mysterious error message,
> I finally got the example case above.
>
>  From what I can tell, ANTLR treats the curly braces as delimiting
> some mysterious other language -- this is decent, since it is trying
> to be language-agnostic. But the error message is a killer:
>
> ...

There are other pitfalls of using target language comments within action 
blocks.

The one I've encountered is the inadvisability of using 
end-of-line-terminated comments. Many of the substitutions that the 
ANTLR code generator applies to the content of action blocks have 
embedded newlines. So if you try to comment out something with, say, 
a // comment (taking C / C++ or Java as the target language) you may 
end up with some baffling syntax errors when you compile the result.

I suppose under certain circumstances you could even get syntactically 
valid code that didn't do what you wanted (or did more, I guess you'd 
say).


> =Austin


You have been warned...


Randall Schulz

From cquezel at mechatools.com  Fri Oct 12 12:59:19 2007
From: cquezel at mechatools.com (=?ISO-8859-1?Q?Claude_Qu=E9zel?=)
Date: Fri, 12 Oct 2007 15:59:19 -0400
Subject: [antlr-interest] should lexical rules with identical content be
	treated equally?
Message-ID: <2e1554940710121259y1e2460b0v711f9c2031d88c57@mail.gmail.com>

I'm very new to antlr and this may be a trivial error of mine but here it
goes:

Given this grammar (cut down for this post):


paragraph : Non_variable;

protected Variable : '{' DVCONTENT '.' ID '}' ;  // **** this is the line
that puzzles me! ****

protected Non_variable : (ESCAPED_SEQUENCE | CHARACTERS)*;

fragment CHARACTERS : ~SPECIAL_CHARACTERS;

fragment ESCAPED_SEQUENCE : '\\' SPECIAL_CHARACTERS;

fragment SPECIAL_CHARACTERS : ('{' | '}' | '\\' );
fragment DVCONTEXT : ID;
fragment ID : IDLETTER (IDLETTER | DIGIT)*;
fragment IDLETTER : 'a'..'z'|'A'..'Z';
fragment DIGIT    : '0'..'9';


if I execute this with the following input: "a\nb", I get a "line 1:1
mismatched character '\n' expecting set null" warning.

if I change the "puzzling line" to:

protected Variable : '{' ID '.' ID '}' ;  // **** this is the line that
puzzles me! ****

then I do not get the warning. If I compare the generated lexer code, there
is one line that differs:


    public final void mCHARACTERS() throws RecognitionException {
        try {
            // D:test.g:25:21: (~ SPECIAL_CHARACTERS )
            // D:test.g:25:23: ~ SPECIAL_CHARACTERS
            {
/*differ*/            if ( (input.LA(1)>='\u0000' && input.LA(1)<='\t')||(
input.LA(1)>='\u000B' && input.LA(1)<='\uFFFE') ) { // first case (skips \n)
/*differ*/            if ( (input.LA(1)>='\u0000' && input.LA(1)<='\b')||(
input.LA(1)>='\n' && input.LA(1)<='\uFFFE') ) { // second case (skips \t)

                input.consume();

            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recover(mse);    throw mse;
            }


            }

        }
        finally {
        }
    }

Can anybody explain what my problem is?

Thank you

Claude
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/1719ca7b/attachment.html 

From simon.janes at gmail.com  Fri Oct 12 13:23:04 2007
From: simon.janes at gmail.com (Simon Janes)
Date: Fri, 12 Oct 2007 16:23:04 -0400
Subject: [antlr-interest] Interesting problem with ANTLR and CSS 2.1
Message-ID: <93508bbe0710121323v5d382232td5453bf07ba54ef8@mail.gmail.com>

Hello ANTLR hackers!

I've been wrestling with a parser derived from CSS 2.1(Seen here at:
http://www.w3.org/TR/CSS21/grammar.html ). With a little bit of work and a
little bit of fugding, it parses most CSS files nicely, but now I want to
build an AST from this grammar:

grammar CascadingStylesheet;

options {
  output=AST;
  ASTLabelType=CommonTree;
}

tokens {
    CDO = '<!--';
    CDC = '-->';
    COMMA = ',';
    LBRACE = '{';
    PLUS = '+';
    GREATER = '>';
    FUNCTION = 'function(';
    HASH = '#';
    INCLUDES = '~=';
    DASHMATCH = '|=';
}

parse    :    stylesheet -> ^(stylesheet); /* I think this sets the "root"
of the AST. */

/*
stylesheet
  : ( '@charset' STRING ';' )?
    S*
    ('/*' ( options { greedy=false; } : . )* '* /')*
    (S|CDO|CDC)* ( import_css (S|CDO|CDC)* )*
    ( ( ruleset | media | page ) (S|CDO|CDC)* )*
  ;
*/

/* Using this rule below because the "rule" above is harder to follow. */
stylesheet
    : (comment_stylesheet|ruleset|media|page)* ;

comment_stylesheet: COMMENT;
comment_ruleset:  COMMENT;
comment_declaration: COMMENT;

COMMENT    :      '/*' (options {greedy=false;} : .)* '*/';

import_css
  : '@import' S*
    (STRING|URI) S* ( medium ( COMMA S* medium)* )? ';' S*
  ;
media
  : '@media' S* medium ( COMMA S* medium )* LBRACE! S* ruleset* '}'! S*
  ;
medium
  : IDENT S*
  ;
page
  : '@page' S* pseudo_page? S*
    LBRACE! S* declaration ( ';'! S* declaration )* '}'! S*
  ;
pseudo_page
  : ':' IDENT
  ;
operator_css
  : '/' S* | COMMA S* | /* empty */
  ;
combinator
  : PLUS S*
  | GREATER S*
  | S*
  ;
unary_operator
  : '-' | PLUS
  ;
property_css
  : IDENT S*
  ;
ruleset
  : selector S* ( COMMA S* selector )* declarations -> selector ( COMMA
selector )* declarations;

declarations
    : LBRACE! S* comment_ruleset* S* declaration (  ';'! S* declaration
comment_declaration* )* '}'! S*;
selector
  : simple_selector ( combinator simple_selector )*
  ;
simple_selector
  : element_name ( HASH IDENT| class_css | attrib | pseudo )*
  | ( HASH IDENT| class_css | attrib | pseudo )+
  ;
class_css : '.' IDENT;
element_name
  : IDENT | '*'
  ;
attrib
  : '[' S* IDENT S* ( ( '=' | INCLUDES | DASHMATCH ) S*
    ( IDENT | STRING ) S* )? ']'
  ;
pseudo
  : ':' ( IDENT | FUNCTION S* IDENT? S* ')' )
  ;
declaration
  : property_css ':' S* expr_css prio?
  | /* empty */
  ;
prio
  : '!' S*
  ;
expr_css
  : term ( operator_css term )*
  ;
term
  : unary_operator?
    ( NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |
      TIME S* | FREQ S* )
  | STRING S* | IDENT S* | URI S* | hexcolor | function_css
  ;
function_css
  : FUNCTION S* expr_css ')' S*
  ;
/*
 * There is a constraint on the color that it must
 * have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])
 * after the "#"; e.g., "#000" is OK, but "#abcd" is not.
 */
hexcolor
  : HASH S*
  ;

NUMBER    :     '0'..'9'+
    |    '0'..'9'* '.' '0'..'9'+;
PERCENTAGE
    :    NUMBER '%';
LENGTH    :    NUMBER ('in'|'cm'|'mm'|'px'|'pt'|'pc');
EMS    :    NUMBER 'em';
EXS    :    NUMBER 'ex';
ANGLE    :    NUMBER ('deg'|'rad'|'grad');
TIME    :    NUMBER ('sec'|'msec');
FREQ    :    NUMBER ('Hz'|'kHz');

S    :    ' '|'\n'|'\t'|'\r'|'\f' {$channel=HIDDEN;};
IDENT    :    ('a'..'z'|'A'..'Z'|'-') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'_')*;
STRING    :    '\'' ( options {greedy=false;} : . )* '\''
    |    '"' ( options {greedy=false;} : . )* '"'
    ;
URI    :    'url(' ( options {greedy=false;} : . )* ')';


/* end of CascadingStylesheet.g */

What I'm running into is while the grammar validates, when it parses a
simple stylesheet like this:

DIV.example { color: green; }

I'll get a runtime error:

"more than one node as root"

What about CSS is confusing ANTLR?  Why can't I get a tree that looks like
the diagram in ANTLRworks by default?

Simon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/33e33711/attachment-0001.html 

From dave at badgers-in-foil.co.uk  Fri Oct 12 13:58:01 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Fri, 12 Oct 2007 20:58:01 +0000
Subject: [antlr-interest] Interesting problem with ANTLR and CSS 2.1
In-Reply-To: <93508bbe0710121323v5d382232td5453bf07ba54ef8@mail.gmail.com>
References: <93508bbe0710121323v5d382232td5453bf07ba54ef8@mail.gmail.com>
Message-ID: <20071012205801.GA28281@badgers-in-foil.co.uk>

On Fri, Oct 12, 2007 at 04:23:04PM -0400, Simon Janes wrote:
> parse    :    stylesheet -> ^(stylesheet); /* I think this sets the "root"
> of the AST. */

> stylesheet
>     : (comment_stylesheet|ruleset|media|page)* ;

> I'll get a runtime error:
> 
> "more than one node as root"

I've not seen that before, but I assume the problem is that..

  -> ^(stylesheet)

..attempts to make the AST referenced by 'stylesheet' be the root node of
the result AST, but in your case 'stylesheet' does not represent a
single node, but a list of nodes.

Probably you should just remove the '^'..

  parse    :    stylesheet -> stylesheet;

..but then you might as well just remove the rewrite, because it doesn't
add anything..

  parse    :    stylesheet;


Alternatively, you could add an 'imaginary' node to act as the root, if
you really want a single node result rather than a list..

  parse    :    stylesheet -> ^(STYLESHEET stylesheet);


Note that for the standard ANTLR tree implementation, a 'list' of nodes
is really just a special case node:

  http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1tree_1_1_common_tree.html#670edeb282b219bc714ed9490aa5a728


ta,
dave

-- 
http://david.holroyd.me.uk/

From cquezel at mechatools.com  Fri Oct 12 14:03:21 2007
From: cquezel at mechatools.com (=?ISO-8859-1?Q?Claude_Qu=E9zel?=)
Date: Fri, 12 Oct 2007 17:03:21 -0400
Subject: [antlr-interest] should lexical rules with identical content be
	treated equally?
In-Reply-To: <2e1554940710121259y1e2460b0v711f9c2031d88c57@mail.gmail.com>
References: <2e1554940710121259y1e2460b0v711f9c2031d88c57@mail.gmail.com>
Message-ID: <2e1554940710121403l4268b7av968361ce957c0a9c@mail.gmail.com>

There is a typo in the example a submited. The original code was:

   protected Variable : '{' ID '.' ID '}' ;  // **** this is the line that
puzzles me! ****

and when I posted I replaced ID by DVCONTENT intead of DVCONTEXT

The problem is still there. Thank You Austin for pointing this out.

Claude

2007/10/12, Claude Qu?zel <cquezel at mechatools.com>:
>
> I'm very new to antlr and this may be a trivial error of mine but here it
> goes:
>
> Given this grammar (cut down for this post):
>
>
> paragraph : Non_variable;
>
> protected Variable : '{' DVCONTENT '.' ID '}' ;  // **** this is the line
> that puzzles me! ****
>
> protected Non_variable : (ESCAPED_SEQUENCE | CHARACTERS)*;
>
> fragment CHARACTERS : ~SPECIAL_CHARACTERS;
>
> fragment ESCAPED_SEQUENCE : '\\' SPECIAL_CHARACTERS;
>
> fragment SPECIAL_CHARACTERS : ('{' | '}' | '\\' );
> fragment DVCONTEXT : ID;
> fragment ID : IDLETTER (IDLETTER | DIGIT)*;
> fragment IDLETTER : 'a'..'z'|'A'..'Z';
> fragment DIGIT    : '0'..'9';
>
>
> if I execute this with the following input: "a\nb", I get a "line 1:1
> mismatched character '\n' expecting set null" warning.
>
> if I change the "puzzling line" to:
>
> protected Variable : '{' ID '.' ID '}' ;  // **** this is the line that
> puzzles me! ****
>
> then I do not get the warning. If I compare the generated lexer code,
> there is one line that differs:
>
>
>     public final void mCHARACTERS() throws RecognitionException {
>         try {
>             // D:test.g:25:21: (~ SPECIAL_CHARACTERS )
>             // D:test.g:25:23: ~ SPECIAL_CHARACTERS
>             {
> /*differ*/            if ( (input.LA(1)>='\u0000' && input.LA(1)<='\t')||(
> input.LA(1)>='\u000B' && input.LA(1)<='\uFFFE') ) { // first case (skips
> \n)
> /*differ*/            if ( ( input.LA(1)>='\u0000' && input.LA
> (1)<='\b')||(input.LA(1)>='\n' && input.LA(1)<='\uFFFE') ) { // second
> case (skips \t)
>
>                 input.consume();
>
>             }
>             else {
>                 MismatchedSetException mse =
>                     new MismatchedSetException(null,input);
>                 recover(mse);    throw mse;
>             }
>
>
>             }
>
>         }
>         finally {
>         }
>     }
>
> Can anybody explain what my problem is?
>
> Thank you
>
> Claude
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/9a570bc2/attachment.html 

From simon.janes at gmail.com  Fri Oct 12 17:21:51 2007
From: simon.janes at gmail.com (Simon Janes)
Date: Fri, 12 Oct 2007 20:21:51 -0400
Subject: [antlr-interest] Interesting problem with ANTLR and CSS 2.1
	(tokens added to AST rewrites almost works)
Message-ID: <93508bbe0710121721o4d1fb33br4a27ba5a8f4e478d@mail.gmail.com>

Thanks dave!

That almost works-- now I no longer get the "more than one node as
root" error, but only receive one child in the list.  I got this by
changing the grammar rules here and introducing some "semantic"
tokens:

----
parse	:	stylesheet* -> ^(STYLESHEET stylesheet);

stylesheet
	: comment_stylesheet -> ^(COMMENT comment_stylesheet)
	| ruleset -> ^(RULESET ruleset)
	| media -> ^(MEDIA media)
	| page -> ^(PAGE page)
	;
----

The CSS for this run:

/* hello comment */
.hello { color: blue; font-face: Arial; }
.again { color: blue; }

The getStringTree() dump:

(STYLESHEET (COMMENT /* hello comment */))

Is there something I need to do tell it to append to a node?


> On Fri, Oct 12, 2007 at 04:23:04PM -0400, Simon Janes wrote:
> > parse    :    stylesheet -> ^(stylesheet); /* I think this sets the "root"
> > of the AST. */
>
> > stylesheet
> >     : (comment_stylesheet|ruleset|media|page)* ;
>
> > I'll get a runtime error:
> >
> > "more than one node as root"
>
> I've not seen that before, but I assume the problem is that..
>
>   -> ^(stylesheet)
>
> ..attempts to make the AST referenced by 'stylesheet' be the root node of
> the result AST, but in your case 'stylesheet' does not represent a
> single node, but a list of nodes.
>
> Probably you should just remove the '^'..
>
>   parse    :    stylesheet -> stylesheet;
>
> ..but then you might as well just remove the rewrite, because it doesn't
> add anything..
>
>   parse    :    stylesheet;
>
>
> Alternatively, you could add an 'imaginary' node to act as the root, if
> you really want a single node result rather than a list..
>
>   parse    :    stylesheet -> ^(STYLESHEET stylesheet);
>
>
> Note that for the standard ANTLR tree implementation, a 'list' of nodes
> is really just a special case node:
>
>   http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1tree_1_1_common_tree.html#670edeb282b219bc714ed9490aa5a728
>
>
> ta,
> dave
>

From rmann at latencyzero.com  Fri Oct 12 17:25:23 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Fri, 12 Oct 2007 17:25:23 -0700
Subject: [antlr-interest] Status of C++ backend?
Message-ID: <8475348F-4A05-4126-B1D9-0058FF5E15FF@latencyzero.com>

Just curious if there was any work on this, or if I should do my own.  
I didn't see anything in the current sources...

-- 
Rick


From parrt at cs.usfca.edu  Fri Oct 12 21:25:20 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 12 Oct 2007 21:25:20 -0700
Subject: [antlr-interest] update Mantra: 1.0a3
Message-ID: <13065A58-4A1B-463B-B931-31B12DEEE7CB@cs.usfca.edu>

Hi. Fixed bugs and added tree literals etc...

http://www.linguamantra.org/CHANGES.txt

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071012/cdfa8170/attachment.html 

From Austin_Hastings at Yahoo.com  Fri Oct 12 23:58:17 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sat, 13 Oct 2007 02:58:17 -0400
Subject: [antlr-interest] Interesting problem with ANTLR and CSS
 2.1	(tokens added to AST rewrites almost works)
In-Reply-To: <93508bbe0710121721o4d1fb33br4a27ba5a8f4e478d@mail.gmail.com>
References: <93508bbe0710121721o4d1fb33br4a27ba5a8f4e478d@mail.gmail.com>
Message-ID: <47106C89.10308@Yahoo.com>

Simon,

You're not asking for what you want. :)

When you say

parse : stylesheet* -> ^(STYLESHEET stylesheet) ;

you are asking for only one stylesheet. When you are faced with a rule 
element that has a cardinality different from "exactly one" you need to 
use a cardinality operator on the right hand side of the -> as well.

Try this:

parse:  stylesheet* -> ^(STYLESHEET stylesheet*) ;

Or for a weird time, try this:

parse: stylesheet* -> ^(STYLESHEET stylesheet)* ;

(Dump them both so you'll grok the difference.)

This trick works with + as well. Sometimes you can use ? too, but I've 
occasionally had to use * on the RHS when I used ? on the left - this is 
3.0.1 after all. :)

=Austin



Simon Janes wrote:
> Thanks dave!
>
> That almost works-- now I no longer get the "more than one node as
> root" error, but only receive one child in the list.  I got this by
> changing the grammar rules here and introducing some "semantic"
> tokens:
>
> ----
> parse	:	stylesheet* -> ^(STYLESHEET stylesheet);
>
> stylesheet
> 	: comment_stylesheet -> ^(COMMENT comment_stylesheet)
> 	| ruleset -> ^(RULESET ruleset)
> 	| media -> ^(MEDIA media)
> 	| page -> ^(PAGE page)
> 	;
> ----
>
> The CSS for this run:
>
> /* hello comment */
> .hello { color: blue; font-face: Arial; }
> .again { color: blue; }
>
> The getStringTree() dump:
>
> (STYLESHEET (COMMENT /* hello comment */))
>
> Is there something I need to do tell it to append to a node?
>
>
>   
>> On Fri, Oct 12, 2007 at 04:23:04PM -0400, Simon Janes wrote:
>>     
>>> parse    :    stylesheet -> ^(stylesheet); /* I think this sets the "root"
>>> of the AST. */
>>>       
>>> stylesheet
>>>     : (comment_stylesheet|ruleset|media|page)* ;
>>>       
>>> I'll get a runtime error:
>>>
>>> "more than one node as root"
>>>       
>> I've not seen that before, but I assume the problem is that..
>>
>>   -> ^(stylesheet)
>>
>> ..attempts to make the AST referenced by 'stylesheet' be the root node of
>> the result AST, but in your case 'stylesheet' does not represent a
>> single node, but a list of nodes.
>>
>> Probably you should just remove the '^'..
>>
>>   parse    :    stylesheet -> stylesheet;
>>
>> ..but then you might as well just remove the rewrite, because it doesn't
>> add anything..
>>
>>   parse    :    stylesheet;
>>
>>
>> Alternatively, you could add an 'imaginary' node to act as the root, if
>> you really want a single node result rather than a list..
>>
>>   parse    :    stylesheet -> ^(STYLESHEET stylesheet);
>>
>>
>> Note that for the standard ANTLR tree implementation, a 'list' of nodes
>> is really just a special case node:
>>
>>   http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1tree_1_1_common_tree.html#670edeb282b219bc714ed9490aa5a728
>>
>>
>> ta,
>> dave
>>
>>     
>
>
>   


From lgcraymer at yahoo.com  Sat Oct 13 00:50:01 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sat, 13 Oct 2007 00:50:01 -0700 (PDT)
Subject: [antlr-interest] Bug in generation code
Message-ID: <307984.32395.qm@web55912.mail.re3.yahoo.com>

Johannes--

Your original message raised the issue of why I was using an outdated version of the ANTLR 3 engine and asking why I had not incorporated the rewrite syntax (as I interpreted your writing) that Ter adopted for ANTLR 3.

I tracked the ANTLR 3 engine up to 3.0; I probably will not track 3.1 beyond bug fixes to avoid incorporating Ter's inheritance mechanism (a kludge).  3.0 fixes all of the problems that plagued earlier versions of the internals.

Ter adapted the rewrite syntax used in most attribute grammars based on LALR BNF parser generators--the main addition is his += operator.  I rejected that approach when I did ANTLR 2.8 (which was actually released about the same time as ANTLR 2.7.5 through an outfit that JPL was doing business with at the time and may still be).  My original analysis was that the implementation cost would be high, and the syntax becomes problematic for EBNF grammars that support iterative closures ( * and + ).  It also appeared unlikely to integrate well with the ^ annotation.  I am gratified that Ter's ANTLR 3 work confirmed that analysis:  if you look at the ANTLR 3 internals, it takes a lot of code to support the -> rewrites, the += is an interesting addition which does help with iterative closures but is not ideal, and you cannot mix ^ annotation with rewrites within a rule.

ANTLR 2.8 was one of the inspirations for ANTLR 3.  When Ter, Monty, and I got together to plan ANTLR 3, the key elements were a.)  templates for action code, b.) a first-class rewrite syntax, c.) attribute scoping (Monty's idea), and d.) automatic tree grammar generation (also from 2.8).  LL* came along later.  At that time, I was pushing for a decent attribute syntax, but had no clear idea of what one looked like:  my experience was that I had not gone far enough with ANTLR 2.8 and in particular could not capture retyping of tokens when doing grammar generation.

At any rate, the current status of ANTLR Yggdrasil is that I am in the midst of debugging the passes of a tree grammar generator that track translocation of tree fragments; the next step after that is to implement the algorithm I used in ANTLR 2.8 to rewrite iterative closures that contain ^'s.

I also have a half-done ANTLR 2 to Yggdrasil translator.  I had intended to finish that before I did the tree grammar generation, but ended up needing the tree grammar generation to do the translator.  I should point out that this is a full translator, including a Java-to-Yggdrasil translation of actions and attributes.  Any less than that and it would be difficult to convert the ANTLR 2 implementation of Yggdrasil to Yggdrasil in Yggdrasil; as Ter has pointed out, that is a significant task for ANTLR 3.

I have thought about of doing an ANTLR 3 to Yggdrasil translator at some later time, but do not really see much point.  The ANTLR 3 rewrite support is much weaker than that in Yggdrasil (ANTLR 3 does not support translocation of tree fragments across rule boundaries; in my experience, translocation is essential for most interesting translation problems), and working with a tree grammar generator makes a radical impact on how one works with ANTLR.

Once I finish the tree grammar generator, I will probably run out of excuses for not having posted Yggdrasil on sourceforge.  Or maybe not:  real world distractions take their toll.

--Loring

----- Original Message ----
From: Johannes Luber <jaluber at gmx.de>
Cc: antlr-interest <antlr-interest at antlr.org>
Sent: Friday, October 12, 2007 6:55:31 AM
Subject: Re: [antlr-interest] Bug in generation code


Gavin Lambert wrote:
> At 10:48 12/10/2007, Johannes Luber wrote:
>>BTW, how is your ANTLR derivative named again? I'd like
>>to ask if you overlooked an email with some critiques
>>regarding your project, but I can't find that email again. :(
> 
> I don't have an ANTLR derivative, so you must be thinking of someone
> else :)
> 
I could have sworn, that the name of the email author was Loring Cramer
and not you. Well, maybe he reads this email here.

Johannes





      ____________________________________________________________________________________
Catch up on fall's hot new shows on Yahoo! TV. Watch previews, get listings, and more!
http://tv.yahoo.com/collections/3658 

From Austin_Hastings at Yahoo.com  Sat Oct 13 04:20:13 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sat, 13 Oct 2007 07:20:13 -0400
Subject: [antlr-interest] Is the source to gUnit available?
Message-ID: <4710A9ED.5000006@Yahoo.com>

Howdy,

I'd like to be unit testing my grammar, and naturally gUnit springs to 
mind. Sadly, my lexer and parser aren't part of a combined unit. So 
instead of post-processing the code emitted by gunit to correct the 
details, I thought it would be nice to just fix gunit to DWIW - allow 
some kind of header keyword to specify the class names.

I can't find anything on the antlr source repository (fisheye) that 
looks like the gunit source, and email sent to leonsu at mac dot com, 
the gunit author, is going unanswered.

So does anyone on this list know the status of the gunit source? Is it 
open? Is it available? If so, where?

=Austin


From parrt at cs.usfca.edu  Sat Oct 13 08:28:51 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 13 Oct 2007 08:28:51 -0700
Subject: [antlr-interest] Is the source to gUnit available?
In-Reply-To: <4710A9ED.5000006@Yahoo.com>
References: <4710A9ED.5000006@Yahoo.com>
Message-ID: <2DB904A7-DBC7-4F42-AE2E-00308FD4CA23@cs.usfca.edu>

The jar includes source.  See the attachment at:

http://www.antlr.org/wiki/display/ANTLR3/gUnit+-+Grammar+Unit+Testing

Ter
On Oct 13, 2007, at 4:20 AM, Austin Hastings wrote:

> Howdy,
>
> I'd like to be unit testing my grammar, and naturally gUnit springs  
> to mind. Sadly, my lexer and parser aren't part of a combined unit.  
> So instead of post-processing the code emitted by gunit to correct  
> the details, I thought it would be nice to just fix gunit to DWIW -  
> allow some kind of header keyword to specify the class names.
>
> I can't find anything on the antlr source repository (fisheye) that  
> looks like the gunit source, and email sent to leonsu at mac dot  
> com, the gunit author, is going unanswered.
>
> So does anyone on this list know the status of the gunit source? Is  
> it open? Is it available? If so, where?
>
> =Austin
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071013/da0548b2/attachment.html 

From parrt at cs.usfca.edu  Sat Oct 13 08:51:46 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 13 Oct 2007 08:51:46 -0700
Subject: [antlr-interest] any comments on Mantra?
Message-ID: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>

Hi, anybody have luck examining source to Mantra translator for  
ideas / learning?
Ter

From michael.peter at crossflare.de  Sat Oct 13 09:54:20 2007
From: michael.peter at crossflare.de (Michael Peter)
Date: Sat, 13 Oct 2007 18:54:20 +0200
Subject: [antlr-interest] Parsing a JSP-like language
In-Reply-To: <91dd9a4f0710112211s381da2fdr65fd0660f752da14@mail.gmail.com>
References: <-7259868671608277919@unknownmsgid>
	<91dd9a4f0710112211s381da2fdr65fd0660f752da14@mail.gmail.com>
Message-ID: <002d01c80db9$b403d500$1c0b7f00$@peter@crossflare.de>

I wish I you could replace the <% %> tag with something else, but I'm bound
to these for legacy reasons. 

However I'm really puzzled that I cannot rewrite my rule this:

TEXT : {!tagMode }?=> ~('<%')*;
or
TEXT : {!tagMode }?=> (~'<%')*;

Why? Is this by design or a bug?

Best regards,
Michael

> -----Urspr?ngliche Nachricht-----
> Von: saintofqin at gmail.com [mailto:saintofqin at gmail.com] Im Auftrag von
> ???
> Gesendet: Freitag, 12. Oktober 2007 07:11
> An: Michael Peter
> Betreff: Re: [antlr-interest] Parsing a JSP-like language
> 
> Hi Peter,
>  IMHO, this style you wanted seems like dwaw a snake and then draw
> foot.:)
> Why not just a custom text node tag, f.e. <code></code>?


From robfinneran at gmail.com  Sat Oct 13 10:15:28 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Sat, 13 Oct 2007 10:15:28 -0700
Subject: [antlr-interest] any comments on Mantra?
In-Reply-To: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
References: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
Message-ID: <a7e86e130710131015t2ea30ad2i8381a8e75904de66@mail.gmail.com>

Hi ANTLR Animals,

Forgive me if this is a little off-topic:

Can Mantra make instances of Java classes, access their fields, call
their methods?
How about calling static methods on Java classes.

I know that MS PowerShell can use MS .NET types which gives the
language great power via access to the standard .NET libraries.

Does Mantra support RegEx expressions and easy file processing?

Cherios!

On 10/13/07, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi, anybody have luck examining source to Mantra translator for
> ideas / learning?
> Ter
>

From pink at odahoda.de  Sat Oct 13 10:45:23 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sat, 13 Oct 2007 19:45:23 +0200
Subject: [antlr-interest] Is the source to gUnit available?
References: <4710A9ED.5000006@Yahoo.com>
Message-ID: <fer07j$hio$1@ger.gmane.org>

Hit Austin,

Austin Hastings wrote:
> So does anyone on this list know the status of the gunit source? Is it
> open? Is it available? If so, where?

The jar file from the wiki contains .java files, license is BSD.


HTH

-- 
Benjamin Niemann
Email: pink at odahoda dot de
WWW: http://pink.odahoda.de/


From parrt at cs.usfca.edu  Sat Oct 13 10:56:34 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 13 Oct 2007 10:56:34 -0700
Subject: [antlr-interest] any comments on Mantra?
In-Reply-To: <a7e86e130710131015t2ea30ad2i8381a8e75904de66@mail.gmail.com>
References: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
	<a7e86e130710131015t2ea30ad2i8381a8e75904de66@mail.gmail.com>
Message-ID: <7430F43C-B296-4455-AA58-EF51F0215373@cs.usfca.edu>


On Oct 13, 2007, at 10:15 AM, Rob Finneran wrote:

> Hi ANTLR Animals,
>
> Forgive me if this is a little off-topic:
>
> Can Mantra make instances of Java classes, access their fields, call
> their methods?
> How about calling static methods on Java classes.

Sure.  use "java {...}" in classes, methods, or expressions.  Any  
time i need a construct missing in mantra, i drop into java to  
implement it.

class T {
	java {...}
	foo() {
		java {System.out.println("...");}
		int i  = {Integer.parseInt("34")};
	}
}

> Does Mantra support RegEx expressions and easy file processing?

Library is just beginning, but it's easy to access java underneath.   
It has some good file stuff .  Check out the examples like:

File("coffee") => Lines() => grep(".*parrt.*");

where => is pipe like unix pipe 'cept it passes objects.

Ter

From leon.antlr at mac.com  Sat Oct 13 12:20:31 2007
From: leon.antlr at mac.com (Leon Su)
Date: Sat, 13 Oct 2007 12:20:31 -0700
Subject: [antlr-interest] Is the source to gUnit available?
In-Reply-To: <4710A9ED.5000006@Yahoo.com>
References: <4710A9ED.5000006@Yahoo.com>
Message-ID: <E89F2218-1545-479B-B604-D75D2C94488F@mac.com>

Hi Austin,

It seems to be the first mail I've seen for asking about the gunit  
source.
I'm not sure that if I got your mail before. As Terence and Benjamin  
mentioned, the jar file on the wiki contains the source you need.
Please feel free to ask questions. You can mail to me and cc to the  
antlr mail list.

Leon

On Oct 13, 2007, at 4:20 AM, Austin Hastings wrote:

> Howdy,
>
> I'd like to be unit testing my grammar, and naturally gUnit springs  
> to mind. Sadly, my lexer and parser aren't part of a combined unit.  
> So instead of post-processing the code emitted by gunit to correct  
> the details, I thought it would be nice to just fix gunit to DWIW -  
> allow some kind of header keyword to specify the class names.
>
> I can't find anything on the antlr source repository (fisheye) that  
> looks like the gunit source, and email sent to leonsu at mac dot  
> com, the gunit author, is going unanswered.
>
> So does anyone on this list know the status of the gunit source? Is  
> it open? Is it available? If so, where?
>
> =Austin
>


From gbr at newtechlaw.com  Sat Oct 13 13:48:37 2007
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Sat, 13 Oct 2007 13:48:37 -0700
Subject: [antlr-interest] Is there an AST rewrite library available?
Message-ID: <200710132048.l9DKmdjN007885@tach.newtechlaw.com>

Looking for a generalized base library for doing Antlr AST rewrites - 
inserting, deleting, moving nodes, that sort of thing -- to support 
an interactive refactoring of the document represented by the AST?

Tried googling, but did not find anything obvious.

Thanks,
Gerald
----
Gerald B. Rosenberg, Esq.
NewTechLaw
285 Hamilton Avenue, Suite 520
Palo Alto, CA  94301-2576

650.325.2100  (office)  /  650.703.1724  (cell)
650.325.2107  (fax)

www.newtechlaw.com


From dave at badgers-in-foil.co.uk  Sat Oct 13 15:59:24 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sat, 13 Oct 2007 22:59:24 +0000
Subject: [antlr-interest] Is there an AST rewrite library available?
In-Reply-To: <200710132048.l9DKmdjN007885@tach.newtechlaw.com>
References: <200710132048.l9DKmdjN007885@tach.newtechlaw.com>
Message-ID: <20071013225923.GA12765@badgers-in-foil.co.uk>

Hi,

On Sat, Oct 13, 2007 at 01:48:37PM -0700, Gerald B. Rosenberg wrote:
> Looking for a generalized base library for doing Antlr AST rewrites - 
> inserting, deleting, moving nodes, that sort of thing -- to support 
> an interactive refactoring of the document represented by the AST?

I've done some very basic stuff to allow inserting and deleting (though
not specifically moving yet) of AST nodes, while attempting to make the
appropriate updates to the tokens so that the modified code can be
recovered without having to pretty-print the AST (i.e. I want AST
modifications to be format-preserving).

The code is part of metaas,
  http://www.badgers-in-foil.co.uk/projects/metaas/

The business-end of the codebase is here,
  http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/java/uk/co/badgersinfoil/metaas/impl/antlr/

It's not great, but it could split it off into a standalone library, if
useful to others.


ta,
dave

-- 
http://david.holroyd.me.uk/

From robfinneran at gmail.com  Sat Oct 13 20:32:45 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Sat, 13 Oct 2007 20:32:45 -0700
Subject: [antlr-interest] any comments on Mantra?
In-Reply-To: <7430F43C-B296-4455-AA58-EF51F0215373@cs.usfca.edu>
References: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
	<a7e86e130710131015t2ea30ad2i8381a8e75904de66@mail.gmail.com>
	<7430F43C-B296-4455-AA58-EF51F0215373@cs.usfca.edu>
Message-ID: <a7e86e130710132032t1915ace6p3499ae5431facb5@mail.gmail.com>

Ah, this works because it is a translator and not a compiler or interpreter.

On 10/13/07, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On Oct 13, 2007, at 10:15 AM, Rob Finneran wrote:
>
> > Hi ANTLR Animals,
> >
> > Forgive me if this is a little off-topic:
> >
> > Can Mantra make instances of Java classes, access their fields, call
> > their methods?
> > How about calling static methods on Java classes.
>
> Sure.  use "java {...}" in classes, methods, or expressions.  Any
> time i need a construct missing in mantra, i drop into java to
> implement it.
>
> class T {
>         java {...}
>         foo() {
>                 java {System.out.println("...");}
>                 int i  = {Integer.parseInt("34")};
>         }
> }
>
> > Does Mantra support RegEx expressions and easy file processing?
>
> Library is just beginning, but it's easy to access java underneath.
> It has some good file stuff .  Check out the examples like:
>
> File("coffee") => Lines() => grep(".*parrt.*");
>
> where => is pipe like unix pipe 'cept it passes objects.
>
> Ter
>

From robfinneran at gmail.com  Sat Oct 13 21:28:03 2007
From: robfinneran at gmail.com (Rob Finneran)
Date: Sat, 13 Oct 2007 21:28:03 -0700
Subject: [antlr-interest] any comments on Mantra?
In-Reply-To: <7430F43C-B296-4455-AA58-EF51F0215373@cs.usfca.edu>
References: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
	<a7e86e130710131015t2ea30ad2i8381a8e75904de66@mail.gmail.com>
	<7430F43C-B296-4455-AA58-EF51F0215373@cs.usfca.edu>
Message-ID: <a7e86e130710132128t63228ebn665dc7643452f3db@mail.gmail.com>

Hello Fellow Listees,

Can a programmer control how much gets piped as either a stream of
line objects, or collection of line objects?

For example, change

File("coffee") => Lines() => MyFilter(".*parrt.*");

to

(File("coffee") => Lines()) => MyFilter(".*parrt.*");

The additional parens would tell it to send a collection of lines to
MyFilter instead of calling MyFilter() in a for-each fashion with each
line. (I realize that my example is poor because File() or maybe
File()=>Lines() probably already generates a collection to begin with,
does it not?.)

The point I'm trying to make is that it should be able to accumulate a
collection of piped objects before passing to the next element in the
pipeline. Sometimes you do not want to start processing the next step
until you are completely sure that the first steps have already been
completed.

The canonical example might first read an entire file into memory as a
collection of lines.  The next element in the pipeline would then be
able to overwrite the original file, and without using a temp file,
since the file's read-handle would already be closed. A converse
example might pull items from a very long queue. In this case the
for-each processing of each single object along the pipeline would
likely be the desired approach.

Cheers!

On 10/13/07, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On Oct 13, 2007, at 10:15 AM, Rob Finneran wrote:
>
> > Hi ANTLR Animals,
> >
> > Forgive me if this is a little off-topic:
> >
> > Can Mantra make instances of Java classes, access their fields, call
> > their methods?
> > How about calling static methods on Java classes.
>
> Sure.  use "java {...}" in classes, methods, or expressions.  Any
> time i need a construct missing in mantra, i drop into java to
> implement it.
>
> class T {
>         java {...}
>         foo() {
>                 java {System.out.println("...");}
>                 int i  = {Integer.parseInt("34")};
>         }
> }
>
> > Does Mantra support RegEx expressions and easy file processing?
>
> Library is just beginning, but it's easy to access java underneath.
> It has some good file stuff .  Check out the examples like:
>
> File("coffee") => Lines() => grep(".*parrt.*");
>
> where => is pipe like unix pipe 'cept it passes objects.
>
> Ter
>

From peizhao at itee.uq.edu.au  Sun Oct 14 02:08:05 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Sun, 14 Oct 2007 19:08:05 +1000
Subject: [antlr-interest] AntlrWork out of memory when generating grammar
Message-ID: <4711DC75.9080502@itee.uq.edu.au>

Hi All,

anyone know how I can increase the heap space of AntlrWork?
I got this message when I click on the debug icon.

[19:05:27] java.lang.OutOfMemoryError: Java heap space

I know in command line I can use

java -xms 256m -xmx 700m

how can I set it with the GUI AntlrWork?


-- 
regards;

Peizhao

From pink at odahoda.de  Sun Oct 14 02:27:39 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sun, 14 Oct 2007 11:27:39 +0200
Subject: [antlr-interest] Is there an AST rewrite library available?
References: <200710132048.l9DKmdjN007885@tach.newtechlaw.com>
Message-ID: <fesnec$e7k$1@ger.gmane.org>

Hi Gerald,

Gerald B. Rosenberg wrote:

> Looking for a generalized base library for doing Antlr AST rewrites -
> inserting, deleting, moving nodes, that sort of thing -- to support
> an interactive refactoring of the document represented by the AST?

The upcoming 3.1 release features AST rewriting for tree grammars. As part
of this, the API of BaseTree has been extended to support delete, replace
and insert operations.

HTH

-- 
Benjamin Niemann
Email: pink at odahoda dot de
WWW: http://pink.odahoda.de/


From Austin_Hastings at Yahoo.com  Sun Oct 14 05:58:13 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 14 Oct 2007 08:58:13 -0400
Subject: [antlr-interest] Is there an AST rewrite library available?
In-Reply-To: <fesnec$e7k$1@ger.gmane.org>
References: <200710132048.l9DKmdjN007885@tach.newtechlaw.com>
	<fesnec$e7k$1@ger.gmane.org>
Message-ID: <47121265.3020809@Yahoo.com>

Benjamin Niemann wrote:
> The upcoming 3.1 release features AST rewriting for tree grammars. As part
> of this, the API of BaseTree has been extended to support delete, replace
> and insert operations.
>   

Benjamin,

What's the schedule for 3.1?

=Austin


From jaluber at gmx.de  Sun Oct 14 06:03:33 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 14 Oct 2007 15:03:33 +0200
Subject: [antlr-interest] AntlrWork out of memory when generating grammar
In-Reply-To: <4711DC75.9080502@itee.uq.edu.au>
References: <4711DC75.9080502@itee.uq.edu.au>
Message-ID: <471213A5.9080507@gmx.de>

Peizhao Hu wrote:
> Hi All,
> 
> anyone know how I can increase the heap space of AntlrWork?
> I got this message when I click on the debug icon.
> 
> [19:05:27] java.lang.OutOfMemoryError: Java heap space
> 
> I know in command line I can use
> 
> java -xms 256m -xmx 700m
> 
> how can I set it with the GUI AntlrWork?

If you use Windows, just edit the shortcut so it includes the additional
parameters.

Johannes

From peizhao at itee.uq.edu.au  Sun Oct 14 06:21:07 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Sun, 14 Oct 2007 23:21:07 +1000
Subject: [antlr-interest] AntlrWork out of memory when generating grammar
In-Reply-To: <471213A5.9080507@gmx.de>
References: <4711DC75.9080502@itee.uq.edu.au> <471213A5.9080507@gmx.de>
Message-ID: <471217C3.6090401@itee.uq.edu.au>

I use mac, and the executable is a binary, not sure how i can add 
parameters to it.
regards;

Peizhao


Johannes Luber wrote:
> Peizhao Hu wrote:
>> Hi All,
>>
>> anyone know how I can increase the heap space of AntlrWork?
>> I got this message when I click on the debug icon.
>>
>> [19:05:27] java.lang.OutOfMemoryError: Java heap space
>>
>> I know in command line I can use
>>
>> java -xms 256m -xmx 700m
>>
>> how can I set it with the GUI AntlrWork?
> 
> If you use Windows, just edit the shortcut so it includes the additional
> parameters.
> 
> Johannes

From r.mark.volkmann at gmail.com  Sun Oct 14 06:26:57 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 14 Oct 2007 08:26:57 -0500
Subject: [antlr-interest] any comments on Mantra?
In-Reply-To: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
References: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
Message-ID: <f0fcc6820710140626t1442877bi8efdeacb8efe564b@mail.gmail.com>

On 10/13/07, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi, anybody have luck examining source to Mantra translator for
> ideas / learning?

I downloaded and plan to do just that ... get ideas for how to
implement my own language. Thanks for making it available!

-- 
R. Mark Volkmann
Object Computing, Inc.

From tim.hilgenberg at hewitt.com  Sun Oct 14 09:48:52 2007
From: tim.hilgenberg at hewitt.com (Tim Hilgenberg)
Date: Sun, 14 Oct 2007 11:48:52 -0500
Subject: [antlr-interest] [newbie] Antlrworks debugger does not accept input
 fro Expr tutorial
Message-ID: <OF776E3F81.62029A36-ON86257374.005C37FF-86257374.005C5BD6@hewitt.com>

I'm trying to follow the Expr tutotial in Anltrworks and when I click on 
the debugger tab, it does not allow me to enter input. When I use the 
"Debugger" menu item, I get an Error message box with the following error: 


Compiler exception: 
java.io.IOException: CreateProcess: javac -classpath 
"\tmp\antlrworks\classes;C:\Java 
Parsers\ANTLR\antlrworks-1.1.3.jar;C:\Java 
Parsers\ANTLR\antlrworks-1.1.3.jar;." -d \tmp\antlrworks\classes 
\tmp\antlrworks\ExprLexer.java \tmp\antlrworks\Expr.java error=2 

When I hit "Show Console", the console shows: 
[10:28:11] Interpreting... 
[10:28:11] Interpreting... 

 
The information contained in this e-mail and any accompanying documents may contain information that is confidential or otherwise protected from disclosure. If you are not the intended recipient of this message, or if this message has been addressed to you in error, please immediately alert the sender by reply e-mail and then delete this message, including any attachments. Any dissemination, distribution or other use of the contents of this message by anyone other than the intended recipient is strictly prohibited. All messages sent to and from this e-mail address may be monitored as permitted by applicable law and regulations to ensure compliance with our internal policies and to protect our business. Emails are not secure and cannot be guaranteed to be error free as they can be intercepted, amended, lost or destroyed, or contain viruses. You are deemed to have accepted these risks if you communicate with us by email. 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071014/e16393e5/attachment-0001.html 

From parrt at cs.usfca.edu  Sun Oct 14 09:49:43 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 14 Oct 2007 09:49:43 -0700
Subject: [antlr-interest] any comments on Mantra?
In-Reply-To: <f0fcc6820710140626t1442877bi8efdeacb8efe564b@mail.gmail.com>
References: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
	<f0fcc6820710140626t1442877bi8efdeacb8efe564b@mail.gmail.com>
Message-ID: <25E5F4B4-4A84-42F0-80A9-62F0C37545C4@cs.usfca.edu>


On Oct 14, 2007, at 6:26 AM, Mark Volkmann wrote:

> On 10/13/07, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi, anybody have luck examining source to Mantra translator for
>> ideas / learning?
>
> I downloaded and plan to do just that ... get ideas for how to
> implement my own language. Thanks for making it available!

My pleasure.  It's pretty small, though pretty devious.  I need to  
build doc on it.

Ter

From parrt at cs.usfca.edu  Sun Oct 14 09:55:14 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 14 Oct 2007 09:55:14 -0700
Subject: [antlr-interest] any comments on Mantra?
In-Reply-To: <a7e86e130710132128t63228ebn665dc7643452f3db@mail.gmail.com>
References: <EE8DADC0-141E-4139-8921-CDDC7E3A4369@cs.usfca.edu>
	<a7e86e130710131015t2ea30ad2i8381a8e75904de66@mail.gmail.com>
	<7430F43C-B296-4455-AA58-EF51F0215373@cs.usfca.edu>
	<a7e86e130710132128t63228ebn665dc7643452f3db@mail.gmail.com>
Message-ID: <AB5E2E60-D971-4F13-8003-55DA467C894E@cs.usfca.edu>


On Oct 13, 2007, at 9:28 PM, Rob Finneran wrote:

> Hello Fellow Listees,
>
> Can a programmer control how much gets piped as either a stream of
> line objects, or collection of line objects?
>
> For example, change
>
> File("coffee") => Lines() => MyFilter(".*parrt.*");
>
> to
>
> (File("coffee") => Lines()) => MyFilter(".*parrt.*");

Well, the parens really only affect precedence and are a no-op in  
this case.  Do

list lines = [];
File("coffee") => Lines() => lines;
lines => MyFilter(".*parrt.*");

or

lines : aprocessingmethodorclosure;

> The additional parens would tell it to send a collection of lines to
> MyFilter instead of calling MyFilter() in a for-each fashion with each
> line. (I realize that my example is poor because File() or maybe
> File()=>Lines() probably already generates a collection to begin with,
> does it not?.)
>
> The point I'm trying to make is that it should be able to accumulate a
> collection of piped objects before passing to the next element in the
> pipeline.

This is an important enough distinction that you should manually say  
"redirect to list".  There are some examples onthis.  Check out  
word_freq2.om vs word_freq.om in the tests dir.

> Sometimes you do not want to start processing the next step
> until you are completely sure that the first steps have already been
> completed.

correct.

> The canonical example might first read an entire file into memory as a
> collection of lines.  The next element in the pipeline would then be
> able to overwrite the original file, and without using a temp file,
> since the file's read-handle would already be closed. A converse
> example might pull items from a very long queue. In this case the
> for-each processing of each single object along the pipeline would
> likely be the desired approach.

Yep.  Take a look at the addlicense.om test.  I used it to add  
licenses to the source.  It takes care of open/close stuff so no need  
for temp file.  In fact, i have yet to call open on any file or  
stream yet manually!

/* Add license.txt to head of all file arguments on cmd-line */
string license = File("license.txt").contents();
args:{
     string filename |
     string fs = File(filename).contents();
     [license,fs] => File(filename);
};

// alternative:
//args:{ string filename | license+File(filename) => File(filename); };
// next won't work as File is evaluated inside list too late
//args:{ string filename | [license,File(filename)] => File 
(filename); };

So for lines, you can do File("foo").lines(), which is a list or File 
("foo") => Lines() => ... which is a pipe.

Ter

From jimi at temporal-wave.com  Sun Oct 14 11:02:10 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 14 Oct 2007 11:02:10 -0700
Subject: [antlr-interest] AntlrWork out of memory when generating grammar
In-Reply-To: <471217C3.6090401@itee.uq.edu.au>
References: <4711DC75.9080502@itee.uq.edu.au> <471213A5.9080507@gmx.de>
	<471217C3.6090401@itee.uq.edu.au>
Message-ID: <BAY130-DS3657F2462A8530C0808DA86A20@phx.gbl>

Just down load the jar version and start it from a command shell with the
same parameters.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Peizhao Hu
> Sent: Sunday, October 14, 2007 6:21 AM
> To: Johannes Luber
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] AntlrWork out of memory when generating
> grammar
> 
> I use mac, and the executable is a binary, not sure how i can add
> parameters to it.
> regards;
> 
> Peizhao
> 
> 
> Johannes Luber wrote:
> > Peizhao Hu wrote:
> >> Hi All,
> >>
> >> anyone know how I can increase the heap space of AntlrWork?
> >> I got this message when I click on the debug icon.
> >>
> >> [19:05:27] java.lang.OutOfMemoryError: Java heap space
> >>
> >> I know in command line I can use
> >>
> >> java -xms 256m -xmx 700m
> >>
> >> how can I set it with the GUI AntlrWork?
> >
> > If you use Windows, just edit the shortcut so it includes the
> additional
> > parameters.
> >
> > Johannes
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.9/1069 - Release Date:
> 10/13/2007 7:26 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.9/1069 - Release Date: 10/13/2007
7:26 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071014/cc24f217/attachment.html 

From rmann at latencyzero.com  Sun Oct 14 11:15:44 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Sun, 14 Oct 2007 11:15:44 -0700
Subject: [antlr-interest] Parsing a little at a time?
Message-ID: <EC1EF484-7C6A-4CDF-B640-0CBDBD824A43@latencyzero.com>

I posted this question once already, but got no response. Let me try  
rewording it.

I'd like to parse input as I get it from the user, a line at a time.  
Is this possible? Can I pass a string to the parser, and then have it  
return without error, even if the input is incomplete? Then I'd pass  
another string to the same parser instance, etc. Eventually, I'd like  
the parser to return an indication that it completed some work  
(although, in my case, I don't really even need that).

I'm about to try the experiment, but I'd hoped to know ahead of time.  
Maybe the API docs say...

TIA,
Rick


From antlr at mirality.co.nz  Sun Oct 14 12:32:25 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 15 Oct 2007 08:32:25 +1300
Subject: [antlr-interest] should lexical rules with identical content be
 treated equally?
In-Reply-To: <2e1554940710121259y1e2460b0v711f9c2031d88c57@mail.gmail.co
 m>
References: <2e1554940710121259y1e2460b0v711f9c2031d88c57@mail.gmail.com>
Message-ID: <20071014193238.152DF11EB7D@www.antlr.org>

At 08:59 13/10/2007, Claude Qu?zel wrote:
>paragraph : Non_variable;
>
>protected Variable : '{' DVCONTENT '.' ID '}' 
>;  // **** this is the line that puzzles me! ****
>
>protected Non_variable : (ESCAPED_SEQUENCE | CHARACTERS)*;
>
>fragment CHARACTERS : ~SPECIAL_CHARACTERS;
>
>fragment ESCAPED_SEQUENCE : '\\' SPECIAL_CHARACTERS;

"protected" is V2.  "fragment" is V3.  Don't mix them.


From gbr at newtechlaw.com  Sun Oct 14 13:15:01 2007
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Sun, 14 Oct 2007 13:15:01 -0700
Subject: [antlr-interest] Is there an AST rewrite library available?
In-Reply-To: <20071013225923.GA12765@badgers-in-foil.co.uk>
References: <200710132048.l9DKmdjN007885@tach.newtechlaw.com>
	<20071013225923.GA12765@badgers-in-foil.co.uk>
Message-ID: <200710142019.l9EKJqPL016224@tach.newtechlaw.com>

Thanks, that helps.

At 03:59 PM 10/13/2007, David Holroyd wrote:
>Hi,
>
>I've done some very basic stuff to allow inserting and deleting (though
>not specifically moving yet) of AST nodes, while attempting to make the
>appropriate updates to the tokens so that the modified code can be
>recovered without having to pretty-print the AST (i.e. I want AST
>modifications to be format-preserving).
>
>The code is part of metaas,
>   http://www.badgers-in-foil.co.uk/projects/metaas/
>
>The business-end of the codebase is here,
> 
>http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/java/uk/co/badgersinfoil/metaas/impl/antlr/
>
>It's not great, but it could split it off into a standalone library, if
>useful to others.
>
>
>ta,
>dave
>
>--
>http://david.holroyd.me.uk/

----
Gerald B. Rosenberg
Certiv Analytics

www.certiv.net


From pink at odahoda.de  Sun Oct 14 13:39:06 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sun, 14 Oct 2007 22:39:06 +0200
Subject: [antlr-interest] Parsing a little at a time?
References: <EC1EF484-7C6A-4CDF-B640-0CBDBD824A43@latencyzero.com>
Message-ID: <fetupa$jq0$1@ger.gmane.org>

Hi Rick,

Rick Mann wrote:

> I posted this question once already, but got no response. Let me try
> rewording it.
> 
> I'd like to parse input as I get it from the user, a line at a time.
> Is this possible? Can I pass a string to the parser, and then have it
> return without error, even if the input is incomplete? Then I'd pass
> another string to the same parser instance, etc. Eventually, I'd like
> the parser to return an indication that it completed some work
> (although, in my case, I don't really even need that).
> 
> I'm about to try the experiment, but I'd hoped to know ahead of time.
> Maybe the API docs say...

ANTLR3 does not support this yet. There have been plans for this and it may
appear in a later release. Search the list for 'incremential parsing' for
past discussions.

HTH

-- 
Benjamin Niemann
Email: pink at odahoda dot de
WWW: http://pink.odahoda.de/


From rmann at latencyzero.com  Sun Oct 14 14:01:14 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Sun, 14 Oct 2007 14:01:14 -0700
Subject: [antlr-interest] Parsing a little at a time?
In-Reply-To: <4712733B.2010901@netscape.net>
References: <EC1EF484-7C6A-4CDF-B640-0CBDBD824A43@latencyzero.com>
	<4712733B.2010901@netscape.net>
Message-ID: <9239BD14-2CBC-4BFF-86CF-B805DE505423@latencyzero.com>


On Oct 14, 2007, at 12:51 PM, Stanimir Stamenkov wrote:

> Sun, 14 Oct 2007 11:15:44 -0700, /Rick Mann/:
>
>> I'd like to parse input as I get it from the user, a line at a time.
>
> Try searching this list archives [1] for "incremental" or  
> "incremental parsing":
>
> http://www.google.com/search?q=incremental+site%3Aantlr.org
> http://www.google.com/search?q=incremental+parsing+site%3Aantlr.org
>
> [1] http://www.antlr.org/pipermail/antlr-interest/


Thanks for the terminology. It seems, from ten minutes of reading the  
archives, that incremental parsing is not possible, or at least very  
difficult in LL(*) grammars.

I also read notes from Terrence saying he'd try to address this in  
ANTLR 3. Terrence?

I'm not sure I understand why the choice of grammar would influence  
this so much. I guess if the parser is recursive (is it? I don't  
know), then it would be really hard to save state and exit.

In my case, I'm never going to send end input on a partial token. I  
would like to send partial constructs, though, like this:

struct Foo {	// one line
   int field1;   //another line
   int field2;   //another line
};              //last line

Hmm. This makes me sad.

Thanks.

-- 
Rick


From gbr at newtechlaw.com  Sun Oct 14 14:15:26 2007
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Sun, 14 Oct 2007 14:15:26 -0700
Subject: [antlr-interest] Is there an AST rewrite library available?
In-Reply-To: <fesnec$e7k$1@ger.gmane.org>
References: <200710132048.l9DKmdjN007885@tach.newtechlaw.com>
	<fesnec$e7k$1@ger.gmane.org>
Message-ID: <200710142117.l9ELH2W9016450@tach.newtechlaw.com>

At 02:27 AM 10/14/2007, Benjamin Niemann wrote:
>Hi Gerald,
>
>The upcoming 3.1 release features AST rewriting for tree grammars. As part
>of this, the API of BaseTree has been extended to support delete, replace
>and insert operations.

I did look at the source pulled from 
http://fisheye2.cenqua.com/browse/antlr/runtime/Java/src, but did not 
see anything that could be used directly.

I know too little about how Antlr's planned AST -> AST rewrites will 
work to know whether it will work well for interactive refactorings 
-- FWIW, will need to be able to pick out and rewrite a single node 
at a time and fire an event that captures just the AST change, 
potentially on every keystroke.

Thanks,
Gerald
----
Gerald B. Rosenberg, Esq.
NewTechLaw
285 Hamilton Avenue, Suite 520
Palo Alto, CA  94301-2576

650.325.2100  (office)  /  650.703.1724  (cell)
650.325.2107  (fax)

www.newtechlaw.com


From rmann at latencyzero.com  Sun Oct 14 14:28:02 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Sun, 14 Oct 2007 14:28:02 -0700
Subject: [antlr-interest] Possible incremental parse approach?
Message-ID: <7A352A24-6A22-4775-BDDA-1F1A5217A271@latencyzero.com>

Maybe I could do this? Run my parser in a separate thread. The input  
character stream can block when it needs more data, at which point  
the main thread of my GUI app could put data into its queue...

Does this approach sound like it would work?

-- 
Rick


From Austin_Hastings at Yahoo.com  Sun Oct 14 14:34:58 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 14 Oct 2007 17:34:58 -0400
Subject: [antlr-interest] Possible incremental parse approach?
In-Reply-To: <7A352A24-6A22-4775-BDDA-1F1A5217A271@latencyzero.com>
References: <7A352A24-6A22-4775-BDDA-1F1A5217A271@latencyzero.com>
Message-ID: <47128B82.1080208@Yahoo.com>

Rick Mann wrote:
> Maybe I could do this? Run my parser in a separate thread. The input 
> character stream can block when it needs more data, at which point the 
> main thread of my GUI app could put data into its queue...
>
> Does this approach sound like it would work?
>
That sounds workable. But you should give some consideration to how the 
user is going to "escape" when she gets into a parse context and wants 
to reset back to just evaluating expressions.

Some of what you're doing is basically a line editor. But the need to be 
able to abort the parse (or suspend/resume it) and just do commands is 
going to make life really complex.

=Austin


From rschulz at sonic.net  Sun Oct 14 14:45:14 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Sun, 14 Oct 2007 14:45:14 -0700
Subject: [antlr-interest] Possible incremental parse approach?
In-Reply-To: <7A352A24-6A22-4775-BDDA-1F1A5217A271@latencyzero.com>
References: <7A352A24-6A22-4775-BDDA-1F1A5217A271@latencyzero.com>
Message-ID: <200710141445.14713.rschulz@sonic.net>

On Sunday 14 October 2007 14:28, Rick Mann wrote:
> Maybe I could do this? Run my parser in a separate thread. The input
> character stream can block when it needs more data, at which point
> the main thread of my GUI app could put data into its queue...

There's a problem with this. Ordinarily, ANTLR treats lexical analysis 
as a distinct phase of processing which must complete before parsing 
begins. If the lexical analyzer doesn't get and end-of-file, it will 
effectively just wait until it does.

If your parser does not generate an AST, then that's fine. The action 
code does everything (triggering whatever follow-on processing is 
required). But if you're building an AST for parsgin by a tree parser, 
then you have to figure out what to do about the fact that the tree is 
never complete _and_ the fact that it grows without bound throughout 
the execution of the system.


> Does this approach sound like it would work?

It sounds problematic to me.


Randall Schulz

From rmann at latencyzero.com  Sun Oct 14 14:45:32 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Sun, 14 Oct 2007 14:45:32 -0700
Subject: [antlr-interest] Possible incremental parse approach?
In-Reply-To: <47128B82.1080208@Yahoo.com>
References: <7A352A24-6A22-4775-BDDA-1F1A5217A271@latencyzero.com>
	<47128B82.1080208@Yahoo.com>
Message-ID: <3F216D4C-0123-4618-8505-49341AE5394D@latencyzero.com>


On Oct 14, 2007, at 2:34 PM, Austin Hastings wrote:

> That sounds workable. But you should give some consideration to how  
> the user is going to "escape" when she gets into a parse context  
> and wants to reset back to just evaluating expressions.
>
> Some of what you're doing is basically a line editor. But the need  
> to be able to abort the parse (or suspend/resume it) and just do  
> commands is going to make life really complex.

Yeah, I think you're right about that. I may have to settle for "user- 
directed incremental parsing." Basically, you enter a number of lines  
of text, then hit a different key (on this Mac, <enter>) to signal  
that a complete translation unit has been typed.

Boo.

-- 
Rick


From jstpierre-antlr at mecheye.net  Sun Oct 14 15:57:12 2007
From: jstpierre-antlr at mecheye.net (ANTLR Mailing List)
Date: Sun, 14 Oct 2007 18:57:12 -0400
Subject: [antlr-interest] Would somebody help me clarify the difference
	between AST, Tree Grammars, and Parse Trees?
Message-ID: <4ff3ab470710141557r60f4b917j4c7af52eeafd6184@mail.gmail.com>

I need a good example/explanation between the difference between tree
grammars, ASTs and Parse Trees.

I see that grammars don't have to be tree grammars to output ASTs.

This is very confusing to me...


For a simple grammar to test:

// Begin Grammar
grammar TestGrammar;


options {
    output = AST;
    k = 10;
}

tokens {
    STAT;
    SEMI = ';';
}

program    :    statement *;

statement
    :    expression SEMI;

expression
    :    INT;

INT    :    ( '0'..'9' ) +;
// End Grammar

When removing "output = AST", I see no difference in the output generated by
ANTLRWorks.

When putting "tree " in front of "grammar TestGrammar", it fails and
generates a NullPointerException.

Anybody have an explanation?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071014/c9f2e50a/attachment.html 

From rmann at latencyzero.com  Sun Oct 14 17:37:36 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Sun, 14 Oct 2007 17:37:36 -0700
Subject: [antlr-interest] Rule return type limitations?
Message-ID: <886E0F89-897A-4292-B6BE-AE7837ECA71F@latencyzero.com>

I would like to return an arbitrary object type from one of my rules  
(an object I've defined outside of the grammar):

...
sendCommand
	:	'send' bytes Semicolon {System.out.println("Sending " +  
$bytes.toString);}
	;

bytes returns [ByteBuf outBytes]
	:	e=StringLiteral {//some stuff here to create a ByteBuf from e and  
return it};

...

But when I try to generate the parser from this, I get

ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
error(116): ../CommScript.g3pl:34:27: unknown attribute for rule  
bytes: toString


Can I do this? What are the limitations on the return types?

TIA,

-- 
Rick

From parrt at cs.usfca.edu  Sun Oct 14 17:54:16 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 14 Oct 2007 17:54:16 -0700
Subject: [antlr-interest] Rule return type limitations?
In-Reply-To: <886E0F89-897A-4292-B6BE-AE7837ECA71F@latencyzero.com>
References: <886E0F89-897A-4292-B6BE-AE7837ECA71F@latencyzero.com>
Message-ID: <FC6A60BE-BD9A-426A-BCAA-158022793DD1@cs.usfca.edu>

Hi Rick. You need to say $bytes.outBytes to access return value.
ter
On Oct 14, 2007, at 5:37 PM, Rick Mann wrote:

> I would like to return an arbitrary object type from one of my  
> rules (an object I've defined outside of the grammar):
>
> ...
> sendCommand
> 	:	'send' bytes Semicolon {System.out.println("Sending " +  
> $bytes.toString);}
> 	;
>
> bytes returns [ByteBuf outBytes]
> 	:	e=StringLiteral {//some stuff here to create a ByteBuf from e  
> and return it};
>
> ...
>
> But when I try to generate the parser from this, I get
>
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
> error(116): ../CommScript.g3pl:34:27: unknown attribute for rule  
> bytes: toString
>
>
> Can I do this? What are the limitations on the return types?
>
> TIA,
>
> -- 
> Rick


From rschulz at sonic.net  Sun Oct 14 17:56:41 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Sun, 14 Oct 2007 17:56:41 -0700
Subject: [antlr-interest] Rule return type limitations?
In-Reply-To: <886E0F89-897A-4292-B6BE-AE7837ECA71F@latencyzero.com>
References: <886E0F89-897A-4292-B6BE-AE7837ECA71F@latencyzero.com>
Message-ID: <200710141756.41762.rschulz@sonic.net>

On Sunday 14 October 2007 17:37, Rick Mann wrote:
> I would like to return an arbitrary object type from one of my rules
> (an object I've defined outside of the grammar):
>
> ...
>
>
> Can I do this? What are the limitations on the return types?

Try this:

sendCommand
    :   'send' bytes Semicolon
        {
            System.out.println("Sending " + $bytes.outBytes.toString());
        }
    ;


Randall Schulz

From parrt at cs.usfca.edu  Sun Oct 14 17:56:08 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 14 Oct 2007 17:56:08 -0700
Subject: [antlr-interest] Would somebody help me clarify the difference
	between AST, Tree Grammars, and Parse Trees?
In-Reply-To: <4ff3ab470710141557r60f4b917j4c7af52eeafd6184@mail.gmail.com>
References: <4ff3ab470710141557r60f4b917j4c7af52eeafd6184@mail.gmail.com>
Message-ID: <D1772E6D-102B-4ED0-B031-3720B8DC3ADF@cs.usfca.edu>

Well, you can look at stuff like:

http://www.antlr.org/article/1100569809276/use.tree.grammars.tml

http://www.jguru.com/faq/view.jsp?EID=818959

but in essense. a grammar parses tokens (and generates trees).  a  
lexer parses char, a tree grammar parses trees. :)  Only diff is the  
input stream really.

Ter
On Oct 14, 2007, at 3:57 PM, ANTLR Mailing List wrote:

>
>
> I need a good example/explanation between the difference between  
> tree grammars, ASTs and Parse Trees.
>
> I see that grammars don't have to be tree grammars to output ASTs.
>
> This is very confusing to me...
>
>
> For a simple grammar to test:
>
> // Begin Grammar
> grammar TestGrammar;
>
>
> options {
>     output = AST;
>     k = 10;
> }
>
> tokens {
>     STAT;
>     SEMI = ';';
> }
>
> program    :    statement *;
>
> statement
>     :    expression SEMI;
>
> expression
>     :    INT;
>
> INT    :    ( '0'..'9' ) +;
> // End Grammar
>
> When removing "output = AST", I see no difference in the output  
> generated by ANTLRWorks.
>
> When putting "tree " in front of "grammar TestGrammar", it fails  
> and generates a NullPointerException.
>
> Anybody have an explanation?


From peizhao at itee.uq.edu.au  Sun Oct 14 20:31:58 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Mon, 15 Oct 2007 13:31:58 +1000
Subject: [antlr-interest] Strange MismatchedTokenException(0!=0)
Message-ID: <4712DF2E.8070001@itee.uq.edu.au>

Hi All,

I tried to use the following rule:


//============================
tokens{
	TEMPLATE='TEMPLATE';
}

template_statement
	:	TEMPLATE
		manufacturer_code comma
		id_number_of_bits comma
		template_id COMMA
		optional_description
	;

manufacturer_code
	:	INTEGER	;

INTEGER	:	(Sign)? Digit ;

protected Digit 	: ('0' | '1'..'9' ('0'..'9')*) ;

//============================

to match the following statements:

TEMPLATE 0,8,29,"Capacitive Microphone"

however, it throws out MismatchTokenException(0!=0) when it tried to 
match 0 after the token TEMPLATE.


any idea?

-- 
regards;

Peizhao

From rmann at latencyzero.com  Sun Oct 14 21:53:43 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Sun, 14 Oct 2007 21:53:43 -0700
Subject: [antlr-interest] Returning an array type
Message-ID: <3E79D85F-19B0-4571-B395-4AD9E594E64C@latencyzero.com>

I tried to do this:

foo returns [byte[] outBytes] : ... ;

But the generated code was

byte outBytes = 0;

Is it not possible to use an array type?

TIA,
Rick


From rmann at latencyzero.com  Sun Oct 14 22:13:54 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Sun, 14 Oct 2007 22:13:54 -0700
Subject: [antlr-interest] Easier way to do string literals?
Message-ID: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>

I was trying to do "-delimited string literals based on the C  
example, and I get rules like this:

StringLiteral returns [String s]
     :  '"' StringGuts '"' { $s = $StringGuts.text; }
     ;

fragment
StringGuts :	( EscapeSequence | ~('\\'|'"') )* ;

fragment
EscapeSequence
	:	'\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\');



But it's not really working quite like I'd expect. The resulting text  
includes the quotes, and the escapes don't seem to really turn into  
the actual characters (I realize I need something more there).

The action of a later rule takes the resulting text and converts it  
into something more useable, and in that I strip off the quotes, but  
I need to also run through the text and handle the escapes. This  
seems like the wrong approach, since it means I'm writing parse code  
in Java, which strikes me as underutilizing ANTLR.

What should I do instead?

TIA,
Rick


From peizhao at itee.uq.edu.au  Sun Oct 14 23:43:13 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Mon, 15 Oct 2007 16:43:13 +1000
Subject: [antlr-interest] How can I have case-insensitive for all tokens
Message-ID: <47130C01.1000306@itee.uq.edu.au>

HI All,

I am converting my case-insensitive v2 grammar to v3. however, v3 is 
case-sensitive to all tokens. how can I make them insensitive?

-- 
regards;

Peizhao

From antlr at mirality.co.nz  Sun Oct 14 23:43:42 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 15 Oct 2007 19:43:42 +1300
Subject: [antlr-interest] Returning an array type
In-Reply-To: <3E79D85F-19B0-4571-B395-4AD9E594E64C@latencyzero.com>
References: <3E79D85F-19B0-4571-B395-4AD9E594E64C@latencyzero.com>
Message-ID: <20071015064352.B1C7211EAEC@www.antlr.org>

At 17:53 15/10/2007, Rick Mann wrote:
 >I tried to do this:
 >
 >foo returns [byte[] outBytes] : ... ;
 >
 >But the generated code was
 >
 >byte outBytes = 0;
 >
 >Is it not possible to use an array type?

Not at the moment, no.  ANTLR currently swallows the brackets.

You could try using List<byte>, though it's possible that will 
have the same problem.  Failing that, you'll probably need to 
return a custom class/struct instead; or if you've got a simple 
case (non-nested), you could use a member variable.


From antlr at mirality.co.nz  Sun Oct 14 23:57:29 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 15 Oct 2007 19:57:29 +1300
Subject: [antlr-interest] Easier way to do string literals?
In-Reply-To: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>
References: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>
Message-ID: <20071015065742.E20A611EA98@www.antlr.org>

At 18:13 15/10/2007, Rick Mann wrote:
 >StringLiteral returns [String s]
 >     :  '"' StringGuts '"' { $s = $StringGuts.text; }
 >     ;
[...]
 >But it's not really working quite like I'd expect. The resulting 

 >text includes the quotes, and the escapes don't seem to really
 >turn into the actual characters (I realize I need something more 

 >there).

Lexer rules don't support return values (since they already have a 
return value: the token), so your "returns" block won't have any 
effect there.  That's why you're still getting the quotes.  (There 
should be a warning/error message about this, but apparently 
that's not possible until ANTLR3 becomes self-hosted.)

There's an example in the wiki showing how to get rid of the 
quotes by using setText, which is probably what you want 
instead.  (FYI: setText creates a copy of the token text, whereas 
emit will use the same text as the main token stream.  Which means 
emit is faster but a little more finicky -- and not really 
suitable in your case, since you also want to munge the internal 
text by parsing the escapes.)

 >I need to also run through the text and handle the escapes. 
This
 >seems like the wrong approach, since it means I'm writing parse
 >code in Java, which strikes me as underutilizing ANTLR.

Well, you're always going to have to write your own escape-parsing 
code, since ANTLR can't make any guesses about what you want \n to 
mean.  Maybe it's a newline; maybe it's a placeholder for "the 
contents of variable 'n'", maybe it's something even more 
esoteric.

StringLiteral
   : '"' StringGuts '"' { setText(ParseEscapes($StringGuts.text)); 
}
   ;

And yes, you have to use setText at this level.  setText has no 
effect in a fragment rule, so you can't handle it inside 
EscapeSequence itself.  Which would be nice, but it's just not 
possible without a lot of dancing around.


From antlr at mirality.co.nz  Sun Oct 14 23:58:13 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 15 Oct 2007 19:58:13 +1300
Subject: [antlr-interest] How can I have case-insensitive for all tokens
In-Reply-To: <47130C01.1000306@itee.uq.edu.au>
References: <47130C01.1000306@itee.uq.edu.au>
Message-ID: <20071015065825.758E811EB14@www.antlr.org>

At 19:43 15/10/2007, Peizhao Hu wrote:
 >I am converting my case-insensitive v2 grammar to v3. however, 
v3
 >is case-sensitive to all tokens. how can I make them 
insensitive?

<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1782>


From vbar at comp.cz  Mon Oct 15 00:18:32 2007
From: vbar at comp.cz (Vaclav Barta)
Date: Mon, 15 Oct 2007 09:18:32 +0200
Subject: [antlr-interest] Easier way to do string literals?
In-Reply-To: <20071015065742.E20A611EA98@www.antlr.org>
References: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>
	<20071015065742.E20A611EA98@www.antlr.org>
Message-ID: <47131448.5050604@comp.cz>

Gavin Lambert wrote:
>  >I need to also run through the text and handle the escapes. This
>  >seems like the wrong approach, since it means I'm writing parse
>  >code in Java, which strikes me as underutilizing ANTLR.
> Well, you're always going to have to write your own escape-parsing code, 
> since ANTLR can't make any guesses about what you want \n to mean.  
> Maybe it's a newline; maybe it's a placeholder for "the contents of 
> variable 'n'", maybe it's something even more esoteric.
Well, yes, _somebody_ has to write it...

> StringLiteral
>   : '"' StringGuts '"' { setText(ParseEscapes($StringGuts.text)); }
>   ;
...but as the OP says, they should use more ANTLR, i.e.

quotedString returns [ String value ]
@init {
	StringBuffer sb;
} : {
	sb = new StringBuffer();
}
	DQUOTE (
		EscapeSequence { sb.append($EscapeSequence.getText()); }
		| BareString { sb.append($BareString.getText()); }
	)* DQUOTE { $value = sb.toString(); }
	;

EscapeSequence
	: '\\' (
		( ~ ( 'n' | 'r' | 't' ) ) =>
			StringChar {
				setText($StringChar.getText());
			}
		| 'n' { setText("\n"); }
		| 'r' { setText("\r"); }
		| 't' { setText("\t"); }
	)
	;

From antlr at mirality.co.nz  Mon Oct 15 00:29:47 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 15 Oct 2007 20:29:47 +1300
Subject: [antlr-interest] Easier way to do string literals?
In-Reply-To: <47131448.5050604@comp.cz>
References: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>
	<20071015065742.E20A611EA98@www.antlr.org>
	<47131448.5050604@comp.cz>
Message-ID: <20071015072959.47D1311EBB5@www.antlr.org>

At 20:18 15/10/2007, Vaclav Barta wrote:
 >quotedString returns [ String value ]
 >@init {
 >	StringBuffer sb;
 >} : {
 >	sb = new StringBuffer();
 >}
 >	DQUOTE (
 >		EscapeSequence { sb.append($EscapeSequence.getText()); }
 >		| BareString { sb.append($BareString.getText()); }
 >	)* DQUOTE { $value = sb.toString(); }
 >	;

That sort of thing is fine if all you're parsing is string 
constants, but in a larger language it loses (apart from anything 
else, you've probably got an auto-whitespace-stripper, whereas 
whitespace needs to be preserved within strings).  And you're 
quite likely going to get random Identifier and Number etc tokens 
in there, not just EscapeSequences and BareStrings.  And unmatched 
comments, too -- block and line comment markers within the scope 
of a string have to be treated as part of the string, not as a 
comment.  So that's something else you'd have to hoist to parser 
level if you did things this way.  It's just messy.

Now what you *could* do is to treat it like the island grammar 
example and have a separate ANTLR grammar for parsing the 
internals of strings, but that seems excessive to me for what 
amounts to a simple string replace operation.


From vbar at comp.cz  Mon Oct 15 01:37:28 2007
From: vbar at comp.cz (Vaclav Barta)
Date: Mon, 15 Oct 2007 10:37:28 +0200
Subject: [antlr-interest] Easier way to do string literals?
In-Reply-To: <200710150729.l9F7Twcl018521@vega.inec.cz>
References: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>
	<20071015065742.E20A611EA98@www.antlr.org>
	<47131448.5050604@comp.cz>
	<200710150729.l9F7Twcl018521@vega.inec.cz>
Message-ID: <471326C8.5000801@comp.cz>

Gavin Lambert wrote:
> At 20:18 15/10/2007, Vaclav Barta wrote:
>  >quotedString returns [ String value ]
>  >@init {
>  >    StringBuffer sb;
>  >} : {
>  >    sb = new StringBuffer();
>  >}
>  >    DQUOTE (
>  >        EscapeSequence { sb.append($EscapeSequence.getText()); }
>  >        | BareString { sb.append($BareString.getText()); }
>  >    )* DQUOTE { $value = sb.toString(); }
>  >    ;
> 
> That sort of thing is fine if all you're parsing is string constants, 
> but in a larger language it loses (apart from anything else, you've 
> probably got an auto-whitespace-stripper, whereas whitespace needs to be 
Sorry, I've simplified too much - the original has

quotedString returns [ String value ]
@init {
	StringBuffer sb;
} : {
	sb = new StringBuffer();
}
	DQUOTE (
		EscapeSequence { sb.append($EscapeSequence.getText()); }
		| BareString { sb.append($BareString.getText()); }
		| COLON { sb.append(':'); }
		| EQ  { sb.append('='); }
		| SP { sb.append($SP.getText()); }
		| TAB  { sb.append('\t'); }
		| StringChar { sb.append($StringChar.getText()); }
		| v = varUse { sb.append($v.value); }
	)* DQUOTE { $value = sb.toString(); }
	;

and the whole grammar (I've put it at 
http://mangrove.cz/antmaker/Loader.g - it's just an experiment with 
Makefile-like syntax, converting build instructions to Ant XML) is 
indeed a bit untypical in that it handles whitespace explicitly...

> preserved within strings).  And you're quite likely going to get random 
> Identifier and Number etc tokens in there, not just EscapeSequences and 
> BareStrings.  And unmatched comments, too -- block and line comment 
...doesn't distinguish quoted from unquoted strings, identifiers and 
numbers are just strings and if it had comments, they would be line 
comments and their marker would have to have a branch inside 
quotedString - so the example probably isn't as widely applicable as 
I've implied, :-) but I'd still like to parse string literals (that are 
sufficiently complicated to be parsed) by ANTLR...

> Now what you *could* do is to treat it like the island grammar example 
> and have a separate ANTLR grammar for parsing the internals of strings, 
> but that seems excessive to me for what amounts to a simple string 
> replace operation.
Is there really no way to parse C-like string literals in one pass?

	Bye
		Vasek


From Austin_Hastings at Yahoo.com  Mon Oct 15 03:44:46 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 15 Oct 2007 06:44:46 -0400
Subject: [antlr-interest] Returning an array type
In-Reply-To: <20071015064352.B1C7211EAEC@www.antlr.org>
References: <3E79D85F-19B0-4571-B395-4AD9E594E64C@latencyzero.com>
	<20071015064352.B1C7211EAEC@www.antlr.org>
Message-ID: <4713449E.1020800@Yahoo.com>

Oliver had the same problem earlier this week. I think it's just a 
square-bracket problem, and if you use List<byte> or new Array() you can 
get around it.

=Austin


Gavin Lambert wrote:
> At 17:53 15/10/2007, Rick Mann wrote:
> >I tried to do this:
> >
> >foo returns [byte[] outBytes] : ... ;
> >
> >But the generated code was
> >
> >byte outBytes = 0;
> >
> >Is it not possible to use an array type?
>
> Not at the moment, no.  ANTLR currently swallows the brackets.
>
> You could try using List<byte>, though it's possible that will have 
> the same problem.  Failing that, you'll probably need to return a 
> custom class/struct instead; or if you've got a simple case 
> (non-nested), you could use a member variable.
>
>
>


From simone.tripodi at gmail.com  Mon Oct 15 04:11:45 2007
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Mon, 15 Oct 2007 13:11:45 +0200
Subject: [antlr-interest] SPARQL
Message-ID: <4173dc210710150411m229a0ac7mf033719f795bb1a7@mail.gmail.com>

Hi All,
I'm looking for an ANTLR3 Sparql grammar implementation.
Does anyone know a complete implementation?
Thank you very much,
Simone
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Sparql.g
Type: application/octet-stream
Size: 6965 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071015/6b446135/attachment.obj 

From simon.janes at gmail.com  Mon Oct 15 06:39:12 2007
From: simon.janes at gmail.com (Simon Janes)
Date: Mon, 15 Oct 2007 09:39:12 -0400
Subject: [antlr-interest] Building AST's for CSS2.1 with ANTLR
Message-ID: <93508bbe0710150639g4afe02ebp24746b7c28612cc5@mail.gmail.com>

(this was previously titled) Re: Interesting problem with ANTLR and
CSS 2.1 (tokens added to AST rewrites almost works)

You know, I tried that and for whatever reason, this still isn't
working for me and I suspect its the weirdness of CSS--has anyone
written a "best practice" for pulling AST's out of a parse tree with
ANTLR 3.0.1?   I've been reading the ANTRv3.g and Cpp.g grammars to
get some context.

* Do you always need to supply a token or literal token to be the
"root" or "parent" of a AST tree/subtree?

Simon

On 10/13/07, Austin Hastings <Austin_Hastings at yahoo.com> wrote:
> Simon,
>
> You're not asking for what you want. :)
>
> When you say
>
> parse : stylesheet* -> ^(STYLESHEET stylesheet) ;
>
> you are asking for only one stylesheet. When you are faced with a rule
> element that has a cardinality different from "exactly one" you need to
> use a cardinality operator on the right hand side of the -> as well.
>
> Try this:
>
> parse:  stylesheet* -> ^(STYLESHEET stylesheet*) ;
>
> Or for a weird time, try this:
>
> parse: stylesheet* -> ^(STYLESHEET stylesheet)* ;
>
> (Dump them both so you'll grok the difference.)
>
> This trick works with + as well. Sometimes you can use ? too, but I've
> occasionally had to use * on the RHS when I used ? on the left - this is
> 3.0.1 after all. :)
>
> =Austin
>
>
>
> Simon Janes wrote:
> > Thanks dave!
> >
> > That almost works-- now I no longer get the "more than one node as
> > root" error, but only receive one child in the list.  I got this by
> > changing the grammar rules here and introducing some "semantic"
> > tokens:
> >
> > ----
> > parse :       stylesheet* -> ^(STYLESHEET stylesheet);
> >
> > stylesheet
> >       : comment_stylesheet -> ^(COMMENT comment_stylesheet)
> >       | ruleset -> ^(RULESET ruleset)
> >       | media -> ^(MEDIA media)
> >       | page -> ^(PAGE page)
> >       ;
> > ----
> >
> > The CSS for this run:
> >
> > /* hello comment */
> > .hello { color: blue; font-face: Arial; }
> > .again { color: blue; }
> >
> > The getStringTree() dump:
> >
> > (STYLESHEET (COMMENT /* hello comment */))
> >
> > Is there something I need to do tell it to append to a node?
> >
> >
> >
> >> On Fri, Oct 12, 2007 at 04:23:04PM -0400, Simon Janes wrote:
> >>
> >>> parse    :    stylesheet -> ^(stylesheet); /* I think this sets the "root"
> >>> of the AST. */
> >>>
> >>> stylesheet
> >>>     : (comment_stylesheet|ruleset|media|page)* ;
> >>>
> >>> I'll get a runtime error:
> >>>
> >>> "more than one node as root"
> >>>
> >> I've not seen that before, but I assume the problem is that..
> >>
> >>   -> ^(stylesheet)
> >>
> >> ..attempts to make the AST referenced by 'stylesheet' be the root node of
> >> the result AST, but in your case 'stylesheet' does not represent a
> >> single node, but a list of nodes.
> >>
> >> Probably you should just remove the '^'..
> >>
> >>   parse    :    stylesheet -> stylesheet;
> >>
> >> ..but then you might as well just remove the rewrite, because it doesn't
> >> add anything..
> >>
> >>   parse    :    stylesheet;
> >>
> >>
> >> Alternatively, you could add an 'imaginary' node to act as the root, if
> >> you really want a single node result rather than a list..
> >>
> >>   parse    :    stylesheet -> ^(STYLESHEET stylesheet);
> >>
> >>
> >> Note that for the standard ANTLR tree implementation, a 'list' of nodes
> >> is really just a special case node:
> >>
> >>   http://www.antlr.org/api/Java/classorg_1_1antlr_1_1runtime_1_1tree_1_1_common_tree.html#670edeb282b219bc714ed9490aa5a728
> >>
> >>
> >> ta,
> >> dave
> >>
> >>
> >
> >
> >
>
>

From antlr at mirality.co.nz  Mon Oct 15 12:08:55 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 16 Oct 2007 08:08:55 +1300
Subject: [antlr-interest] Easier way to do string literals?
In-Reply-To: <471326C8.5000801@comp.cz>
References: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>
	<20071015065742.E20A611EA98@www.antlr.org>
	<47131448.5050604@comp.cz>
	<200710150729.l9F7Twcl018521@vega.inec.cz>
	<471326C8.5000801@comp.cz>
Message-ID: <20071015190911.7FCEB11EACB@www.antlr.org>

At 21:37 15/10/2007, Vaclav Barta wrote:
 >Is there really no way to parse C-like string literals in one
 >pass?

Not no way, it's just tricky :)

To do it in one pass you really have to do everything in the 
lexer.  This requires the final lexer rule to use setText, as I 
previously mentioned; but it's complicated by the fact that only 
the top-level lexer rule can successfully call setText (subrules 
can try but it won't accomplish anything useful), and that lexer 
rules don't support return values.

I haven't tried it, but I think fragment rules do still support 
parameters, so something like this might work:

STRING
@init {
   StringBuffer sb = new StringBuffer();
}
   : '"' (EscapeSequence[$sb] | StringChar[$sb])* '"' { 
setText($sb.toString()); }
   ;

fragment EscapeSequence[StringBuffer sb]
   : '\\'
     ( '\\' { $sb.append('\\'); }
     | 't' { $sb.append('\t'); }
     ...
     )
   ;

fragment StringChar[StringBuffer sb]
   : x=(~('\\' | '"')) { $sb.append($x.text); }
   ;

I seem to vaguely recall ANTLR not liking something similar to the 
syntax I've used in StringChar, so you might need to move the 
action code for that up into the STRING rule.
I also don't recall if you need to escape the backslashes in the 
append calls in EscapeSequence or not.  So you'll probably need to 
experiment a bit.


From antlr at mirality.co.nz  Mon Oct 15 12:10:16 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 16 Oct 2007 08:10:16 +1300
Subject: [antlr-interest] Returning an array type
In-Reply-To: <20071015064352.B1C7211EAEC@www.antlr.org>
References: <3E79D85F-19B0-4571-B395-4AD9E594E64C@latencyzero.com>
	<20071015064352.B1C7211EAEC@www.antlr.org>
Message-ID: <20071015191026.11F9E11EAF6@www.antlr.org>

At 19:43 15/10/2007, Gavin Lambert wrote:
 > >foo returns [byte[] outBytes] : ... ;
 >
 >Not at the moment, no.  ANTLR currently swallows the brackets.

I just came across something in the wiki that suggested the 
following, which might work for you:

   foo returns [byte\[\] outBytes] : ... ;


From rmann at latencyzero.com  Mon Oct 15 12:26:58 2007
From: rmann at latencyzero.com (Rick Mann)
Date: Mon, 15 Oct 2007 12:26:58 -0700
Subject: [antlr-interest] Returning an array type
In-Reply-To: <20071015064352.B1C7211EAEC@www.antlr.org>
References: <3E79D85F-19B0-4571-B395-4AD9E594E64C@latencyzero.com>
	<20071015064352.B1C7211EAEC@www.antlr.org>
Message-ID: <02097EE6-75E6-4647-A720-68FBB2096218@latencyzero.com>


On Oct 15, 2007, at 12:10 PM, Gavin Lambert wrote:

> I just came across something in the wiki that suggested the  
> following, which might work for you:
>
>   foo returns [byte\[\] outBytes] : ... ;

Thanks, I'll give that a shot.

-- 
Rick


From vbar at comp.cz  Mon Oct 15 12:32:19 2007
From: vbar at comp.cz (Vaclav Barta)
Date: Mon, 15 Oct 2007 21:32:19 +0200
Subject: [antlr-interest] Easier way to do string literals?
In-Reply-To: <200710151909.l9FJ9B7t022364@vega.inec.cz>
References: <97516A73-942D-4E5B-8E13-5D365CF170DA@latencyzero.com>
	<471326C8.5000801@comp.cz>
	<200710151909.l9FJ9B7t022364@vega.inec.cz>
Message-ID: <200710152132.20262.vbar@comp.cz>

On Monday 15 October 2007 21:08:55 Gavin Lambert wrote:
> At 21:37 15/10/2007, Vaclav Barta wrote:
>  >Is there really no way to parse C-like string literals in one
>  >pass?
> Not no way, it's just tricky :)
Indeed.

> I seem to vaguely recall ANTLR not liking something similar to the
> syntax I've used in StringChar, so you might need to move the
> action code for that up into the STRING rule.
> I also don't recall if you need to escape the backslashes in the
> append calls in EscapeSequence or not.  So you'll probably need to
> experiment a bit.
OK, thanks for the explanation. Next time I'm implementing C, I'll surely give 
it a try. :-)

	Bye
		Vasek

From dave at badgers-in-foil.co.uk  Mon Oct 15 13:27:39 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 15 Oct 2007 20:27:39 +0000
Subject: [antlr-interest] Building AST's for CSS2.1 with ANTLR
In-Reply-To: <93508bbe0710150639g4afe02ebp24746b7c28612cc5@mail.gmail.com>
References: <93508bbe0710150639g4afe02ebp24746b7c28612cc5@mail.gmail.com>
Message-ID: <20071015202739.GA11844@badgers-in-foil.co.uk>

On Mon, Oct 15, 2007 at 09:39:12AM -0400, Simon Janes wrote:
> You know, I tried that and for whatever reason, this still isn't
> working for me and I suspect its the weirdness of CSS--has anyone
> written a "best practice" for pulling AST's out of a parse tree with
> ANTLR 3.0.1?   I've been reading the ANTRv3.g and Cpp.g grammars to
> get some context.
> 
> * Do you always need to supply a token or literal token to be the
> "root" or "parent" of a AST tree/subtree?

No, you don't have to promote a node to the subtree root, but then
you're left with a flat list, which will probably look quite similar to
the original token stream from the lexer.  Creating the tree structure
is a way to keep a record of the syntactic structure that the parser has
discovered, making it easier to interrogate the AST from your application
code (or an ANTLR tree parser).

If you still have problems, post them to the list, and maybe someone can
help spot the problem (I hand-coded a CSS parser in Ruby a few years
back :)


ta,
dave

-- 
http://david.holroyd.me.uk/

From clifford.heath at gmail.com  Mon Oct 15 14:24:50 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 16 Oct 2007 07:24:50 +1000
Subject: [antlr-interest] Status of Ruby binding?
Message-ID: <ff0lr4$fki$1@ger.gmane.org>

I'm trying to use the Ruby binding, and it's apparent that the documentation is
out of date. However, just referring to the actual behavior of 3.0.1, I have a
few issues and don't know if it's the binding or the expected behavior of ANTLR.
Specifically:

rule : ( rule2 '=' )? rule3
	{ $rule2 may or may not exist here }

In Ruby, variables get created when they're assigned. If lookahead determines
that rule2 doesn't apply, $rule2 never gets assigned, so the reference to it
in the code causes an error at runtime. In other cases, variables get initialized
to nil at the start of the function, so if they're not assigned it doesn't matter.

What's the expected behavior here?

Clifford Heath.


From clifford.heath at gmail.com  Mon Oct 15 14:32:13 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 16 Oct 2007 07:32:13 +1000
Subject: [antlr-interest] Keywords not context-free
Message-ID: <ff0m8u$h64$1@ger.gmane.org>

In a grammar I'm working on, I have a significant subset of the
language that allows arbitrary-length strings of identifiers,
where words that are keywords elsewhere (like "is") may be used
as regular identifiers.

Is there a general way to handle this kind of context-sensitivity
in ANTLR (as in, backup and retry if the grammar reports an error),
or must I explore traditional methods of informing the lexer?

Also, can someone point me to a brief synopsis of the ANTLR method
of handling lexical contexts. I don't have the book yet, so I'd
like an online source.

Clifford Heath.


From jbb at acm.org  Mon Oct 15 14:59:54 2007
From: jbb at acm.org (John B. Brodie)
Date: Mon, 15 Oct 2007 17:59:54 -0400
Subject: [antlr-interest] Strange MismatchedTokenException(0!=0)
In-Reply-To: <4712DF2E.8070001@itee.uq.edu.au> (message from Peizhao Hu on
	Mon, 15 Oct 2007 13:31:58 +1000)
References: <4712DF2E.8070001@itee.uq.edu.au>
Message-ID: <E1IhXyc-0006Zm-Kb@gecko.home.org>

Peizhao Hu wrote:
>//============================
>tokens{
>	TEMPLATE='TEMPLATE';
>}
>
>template_statement
>	:	TEMPLATE
>		manufacturer_code comma
>		id_number_of_bits comma
>		template_id COMMA
>		optional_description
>	;
>
>manufacturer_code
>	:	INTEGER	;
>
>INTEGER	:	(Sign)? Digit ;
>
>protected Digit 	: ('0' | '1'..'9' ('0'..'9')*) ;
>
>//============================
>
>to match the following statements:
>
>TEMPLATE 0,8,29,"Capacitive Microphone"
>
>however, it throws out MismatchTokenException(0!=0) when it tried to 
>match 0 after the token TEMPLATE.
>

You forgot to specify how whitespace should be handled, so the blank
after TEMPLATE is an error. (untested)


From win at wincent.com  Mon Oct 15 16:27:40 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 16 Oct 2007 01:27:40 +0200
Subject: [antlr-interest] ANTLR 3.0.1 build failure
Message-ID: <1D5E5CE1-E2BB-44C4-8BE5-B987FB2A6940@wincent.com>

I've run into the exact same problem as Kenny did last month trying  
to build ANTLR 3.0.1:

<http://www.antlr.org/pipermail/antlr-interest/2007-September/ 
023639.html>

Nobody replied back then, and I'm at the limit of my ant  
troubleshooting skills. Anybody know how to fix this?

Pasting in the build transcript below; basically what we have here  
are a bunch of duplicate class errors. This only affects 3.0.1 -- 3.0  
built fine on this machine -- so I think it's somehow related to the  
extensive changes that were made to the build.xml file, but I don't  
know enough about ant to grok it.

$ echo $CLASSPATH
/usr/local/junit/junit.jar
$ ant -version
Apache Ant version 1.6.5 compiled on September 12 2006
$ ant build
Buildfile: build.xml

generator-prepare:

generator:

compile-rt:

compile:
   [myjavac] Compiling 126 source files to /Users/wincent/trabajo/ 
vendor/ANTLR/antlr-3.0.1/build/classes
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
ANTLRLexer.java:61: duplicate class: org.antlr.tool.ANTLRLexer
   [myjavac] public class ANTLRLexer extends antlr.CharScanner  
implements ANTLRTokenTypes, TokenStream
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
ANTLRParser.java:72: duplicate class: org.antlr.tool.ANTLRParser
   [myjavac] public class ANTLRParser extends antlr.LLkParser        
implements ANTLRTokenTypes
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
ANTLRTokenTypes.java:37: duplicate class: org.antlr.tool.ANTLRTokenTypes
   [myjavac] public interface ANTLRTokenTypes {
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
ANTLRTreePrinter.java:52: duplicate class:  
org.antlr.tool.ANTLRTreePrinter
   [myjavac] public class ANTLRTreePrinter extends  
antlr.TreeParser       implements ANTLRTreePrinterTokenTypes
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
ANTLRTreePrinterTokenTypes.java:33: duplicate class:  
org.antlr.tool.ANTLRTreePrinterTokenTypes
   [myjavac] public interface ANTLRTreePrinterTokenTypes {
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
AssignTokenTypesWalker.java:98: duplicate class:  
org.antlr.tool.AssignTokenTypesWalker
   [myjavac] public class AssignTokenTypesWalker extends  
antlr.TreeParser       implements AssignTokenTypesWalkerTokenTypes
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
AssignTokenTypesWalkerTokenTypes.java:36: duplicate class:  
org.antlr.tool.AssignTokenTypesWalkerTokenTypes
   [myjavac] public interface AssignTokenTypesWalkerTokenTypes {
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
CodeGenTreeWalker.java:59: duplicate class:  
org.antlr.codegen.CodeGenTreeWalker
   [myjavac] public class CodeGenTreeWalker extends  
antlr.TreeParser       implements CodeGenTreeWalkerTokenTypes
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
CodeGenTreeWalkerTokenTypes.java:39: duplicate class:  
org.antlr.codegen.CodeGenTreeWalkerTokenTypes
   [myjavac] public interface CodeGenTreeWalkerTokenTypes {
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
DefineGrammarItemsWalker.java:47: duplicate class:  
org.antlr.tool.DefineGrammarItemsWalker
   [myjavac] public class DefineGrammarItemsWalker extends  
antlr.TreeParser       implements DefineGrammarItemsWalkerTokenTypes
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
DefineGrammarItemsWalkerTokenTypes.java:34: duplicate class:  
org.antlr.tool.DefineGrammarItemsWalkerTokenTypes
   [myjavac] public interface DefineGrammarItemsWalkerTokenTypes {
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
TreeToNFAConverter.java:49: duplicate class:  
org.antlr.tool.TreeToNFAConverter
   [myjavac] public class TreeToNFAConverter extends  
antlr.TreeParser       implements TreeToNFAConverterTokenTypes
   [myjavac]        ^
   [myjavac] /Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/codegen/ 
TreeToNFAConverterTokenTypes.java:35: duplicate class:  
org.antlr.tool.TreeToNFAConverterTokenTypes
   [myjavac] public interface TreeToNFAConverterTokenTypes {
   [myjavac]        ^
   [myjavac] Note: Some input files use unchecked or unsafe operations.
   [myjavac] Note: Recompile with -Xlint:unchecked for details.
   [myjavac] 13 errors

BUILD FAILED
/Users/wincent/trabajo/vendor/ANTLR/antlr-3.0.1/build.xml:118:  
Compile failed; see the compiler error output for details.

Total time: 3 seconds

Cheers,
Wincent




From parrt at cs.usfca.edu  Mon Oct 15 17:32:39 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 15 Oct 2007 17:32:39 -0700
Subject: [antlr-interest] ANTLR 3.0.1 build failure
In-Reply-To: <1D5E5CE1-E2BB-44C4-8BE5-B987FB2A6940@wincent.com>
References: <1D5E5CE1-E2BB-44C4-8BE5-B987FB2A6940@wincent.com>
Message-ID: <F5405687-A561-4E90-9523-AEFBC6D5EE35@cs.usfca.edu>


On Oct 15, 2007, at 4:27 PM, Wincent Colaiuta wrote:

> I've run into the exact same problem as Kenny did last month trying  
> to build ANTLR 3.0.1:
>
> <http://www.antlr.org/pipermail/antlr-interest/2007-September/ 
> 023639.html>
>
> Nobody replied back then, and I'm at the limit of my ant  
> troubleshooting skills. Anybody know how to fix this?

Weird.  I guess you can try the old javac *.java in the dirs ;)
Ter


From win at wincent.com  Mon Oct 15 17:57:38 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 16 Oct 2007 02:57:38 +0200
Subject: [antlr-interest] ANTLR 3.0.1 build failure
In-Reply-To: <F5405687-A561-4E90-9523-AEFBC6D5EE35@cs.usfca.edu>
References: <1D5E5CE1-E2BB-44C4-8BE5-B987FB2A6940@wincent.com>
	<F5405687-A561-4E90-9523-AEFBC6D5EE35@cs.usfca.edu>
Message-ID: <89C0335D-2B53-4DDA-A023-337B0B7B744E@wincent.com>

El 16/10/2007, a las 2:32, Terence Parr escribi?:

> On Oct 15, 2007, at 4:27 PM, Wincent Colaiuta wrote:
>
>> I've run into the exact same problem as Kenny did last month  
>> trying to build ANTLR 3.0.1:
>>
>> <http://www.antlr.org/pipermail/antlr-interest/2007-September/ 
>> 023639.html>
>>
>> Nobody replied back then, and I'm at the limit of my ant  
>> troubleshooting skills. Anybody know how to fix this?
>
> Weird.  I guess you can try the old javac *.java in the dirs ;)
> Ter

I found out a bit more by passing the "-v" (verbose) switch to "ant  
build". If you look at the list of files it says it will compile  
(pasted below), you can see that the last 13 are duplicates. I know  
absolutely nothing about Ant and the XML build file, so I tried a  
cave-man troubleshooting technique: moving the duplicate files out of  
the way. Moving the files in the "codegen" subdirectory (the ones at  
the end of the list) didn't work and just yielded different errors,  
but moving the other duplicates out of the way (the ones in "src/org/ 
antlr/tool" and "src/org/antlr/codegen") made the build succeed.

So for now I've got a working build (no build errors, but of dubious  
status seeing as I don't know what other side-effects might have  
arisen due to my kludge), and hopefully someone who knows a bit about  
Ant can make whatever changes are necessary to fix the build.xml file.

   [myjavac] Files to be compiled:
   [myjavac]     /antlr-3.0.1/src/org/antlr/Tool.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/DFA.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/DFAOptimizer.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/DFAState.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/DecisionProbe.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/Label.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/LookaheadSet.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/NFA.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/ 
NFAConfiguration.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/NFAContext.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/ 
NFAConversionThread.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/NFAState.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/ 
NFAToDFAConverter.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/ 
RuleClosureTransition.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/ 
SemanticContext.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/State.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/StateCluster.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/analysis/Transition.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/ 
ACyclicDFACodeGenerator.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/ 
ActionTranslatorLexer.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/CPPTarget.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/CSharpTarget.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/CTarget.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/ 
CodeGenTreeWalker.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/ 
CodeGenTreeWalkerTokenTypes.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/CodeGenerator.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/JavaTarget.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/ObjCTarget.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/PythonTarget.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/RubyTarget.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/Target.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/Barrier.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/BitSet.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/IntArrayList.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/IntSet.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/Interval.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/IntervalSet.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/MutableInteger.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/OrderedHashSet.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/misc/Utils.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/BaseTest.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/DebugTestAutoAST.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
DebugTestRewriteAST.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ErrorQueue.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestASTConstruction.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestAttributes.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestAutoAST.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestCharDFAConversion.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestCommonTreeNodeStream.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestDFAConversion.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestDFAMatching.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestInterpretedLexing.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestInterpretedParsing.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestIntervalSet.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestJavaCodeGeneration.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestLexer.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestMessages.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestNFAConstruction.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestRewriteAST.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestRewriteTemplates.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestSemanticPredicateEvaluation.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestSemanticPredicates.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestSets.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestSymbolDefinitions.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestSyntacticPredicateEvaluation.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestTemplates.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestTokenRewriteStream.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestTreeNodeStream.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestTreeParsing.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/TestTreeWizard.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
TestUnBufferedTreeNodeStream.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ANTLRErrorListener.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ANTLRLexer.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ANTLRParser.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ANTLRTokenTypes.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ANTLRTreePrinter.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
ANTLRTreePrinterTokenTypes.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
ActionAnalysisLexer.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
AssignTokenTypesWalker.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
AssignTokenTypesWalkerTokenTypes.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/Attribute.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/AttributeScope.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
BuildDependencyGenerator.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/DOTGenerator.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
DefineGrammarItemsWalker.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
DefineGrammarItemsWalkerTokenTypes.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ErrorManager.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/FASerializer.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/Grammar.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/GrammarAST.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
GrammarAnalysisAbortedMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
GrammarDanglingStateMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
GrammarInsufficientPredicatesMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
GrammarNonDeterminismMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/GrammarReport.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/GrammarSanity.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
GrammarSemanticsMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
GrammarSyntaxMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
GrammarUnreachableAltsMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/Interp.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/Interpreter.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
LeftRecursionCyclesMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/Message.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/NFAFactory.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/NameSpaceChecker.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
NonRegularDecisionMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/RandomPhrase.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
RecursionOverflowMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/Rule.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/RuleLabelScope.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ToolMessage.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/TreeToNFAConverter.java
   [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
TreeToNFAConverterTokenTypes.java
   [myjavac]     /antlr-3.0.1/codegen/ANTLRLexer.java
   [myjavac]     /antlr-3.0.1/codegen/ANTLRParser.java
   [myjavac]     /antlr-3.0.1/codegen/ANTLRTokenTypes.java
   [myjavac]     /antlr-3.0.1/codegen/ANTLRTreePrinter.java
   [myjavac]     /antlr-3.0.1/codegen/ANTLRTreePrinterTokenTypes.java
   [myjavac]     /antlr-3.0.1/codegen/AssignTokenTypesWalker.java
   [myjavac]     /antlr-3.0.1/codegen/ 
AssignTokenTypesWalkerTokenTypes.java
   [myjavac]     /antlr-3.0.1/codegen/CodeGenTreeWalker.java
   [myjavac]     /antlr-3.0.1/codegen/CodeGenTreeWalkerTokenTypes.java
   [myjavac]     /antlr-3.0.1/codegen/DefineGrammarItemsWalker.java
   [myjavac]     /antlr-3.0.1/codegen/ 
DefineGrammarItemsWalkerTokenTypes.java
   [myjavac]     /antlr-3.0.1/codegen/TreeToNFAConverter.java
   [myjavac]     /antlr-3.0.1/codegen/TreeToNFAConverterTokenTypes.java

Wincent




From Austin_Hastings at Yahoo.com  Mon Oct 15 18:38:14 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 15 Oct 2007 21:38:14 -0400
Subject: [antlr-interest] ENHANCEMENT - Add option to output tokens as
	symbolic constants (enum)
Message-ID: <47141606.50407@Yahoo.com>

In looking over the gunit source code, I find several lines that look 
like the following:

    if ( ts.testSuites.get(input).getType()==27 ) {
       // ...
    }
    else if ( ts.testSuites.get(input).getType()==28 ) {
       // ...
    }

Guess what that does?

One answer, of course, is that it encodes the transient results of the 
token generation process in a way that is disconnected from the process, 
so that if tokens are regenerated (such as by me, trying to add some 
features) the old numbers become meaningless.

Another answer is that it sprinkles magic numbers through the code.

Both answers are considered less than "good" programming practice. I 
understand why it was done, and how to fix it. But I suspect this kind 
of greasy-elbows access of the innards is pretty common, especially 
since Antlr v3 is pretty lax about data hiding.

I propose that a mechanism be added (string template, most likely) to 
convert or extend the .tokens mechanism to a formal file, declaring some 
sort of symbolic constants. Since the tokens in question can be 
arbitrary strings, a java HashMap is probably the right model - with 
something similar in C++, and a bsearch-ed array of const-char-* in C.

The "named" tokens - those given explicit rules in the grammar - are 
available as constants in the lexer class. But it isn't quite enough. 
The ability to use string literals in the grammar generates too many 
automatic token names. The "symbolic name" given to the "27" value above 
appears in the gUnitLexer.java as:

    public static final int T27=27;

which certainly is a symbolic name, but also encodes the transient 
results of the token generation process in a way that is disconnected 
from the process. What is needed is something like

    t27 = gUnitLexer.getToken("'OK'"); // Note single quotes inside doubles

that can look up both immediate strings and rule names.

=Austin


From parrt at cs.usfca.edu  Mon Oct 15 19:21:24 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 15 Oct 2007 19:21:24 -0700
Subject: [antlr-interest] ENHANCEMENT - Add option to output tokens as
	symbolic constants (enum)
In-Reply-To: <47141606.50407@Yahoo.com>
References: <47141606.50407@Yahoo.com>
Message-ID: <1C1DA9CF-7742-4EA6-A4CF-787C7CF1671D@cs.usfca.edu>


On Oct 15, 2007, at 6:38 PM, Austin Hastings wrote:

> In looking over the gunit source code, I find several lines that  
> look like the following:
>
>    if ( ts.testSuites.get(input).getType()==27 ) {
>       // ...
>    }
>    else if ( ts.testSuites.get(input).getType()==28 ) {
>       // ...
>    }
>
> Guess what that does?
>
> One answer, of course, is that it encodes the transient results of  
> the token generation process in a way that is disconnected from the  
> process, so that if tokens are regenerated (such as by me, trying  
> to add some features) the old numbers become meaningless.
>
> Another answer is that it sprinkles magic numbers through the code.
>
> Both answers are considered less than "good" programming practice.  
> I understand why it was done, and how to fix it. But I suspect this  
> kind of greasy-elbows access of the innards is pretty common,  
> especially since Antlr v3 is pretty lax about data hiding.

It's generated code; everything is fair game ;)  That said, making it  
pretty is a good idea.

Ter


From peizhao at itee.uq.edu.au  Mon Oct 15 20:20:00 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Tue, 16 Oct 2007 13:20:00 +1000
Subject: [antlr-interest] AntlrWork problem
Message-ID: <47142DE0.20001@itee.uq.edu.au>

Hi all,

has anyone experience a out-of-memory problem with AntlrWork?

AntlrWork debug my file and generate AST tree smoothly in the first 
time. however, when you modify something and want to redebug it again, 
it will compliant that not enough memory. So I have to close (exit) the 
software and restart it again, everytime.

I am wondering whether there is a memory leakage bug in the software or 
something wrong with my grammar.

-- 
regards;

Peizhao

From amol_bhagavat at yahoo.co.uk  Mon Oct 15 22:08:30 2007
From: amol_bhagavat at yahoo.co.uk (amol Bhagavat)
Date: Tue, 16 Oct 2007 06:08:30 +0100 (BST)
Subject: [antlr-interest] Antlr parse cannot parse the file completly
In-Reply-To: <378481.2316.qm@web23206.mail.ird.yahoo.com>
Message-ID: <677204.47204.qm@web23210.mail.ird.yahoo.com>

Hi ,
   
  Hw to implement a rule in grammar which will check EOF of a file.
  My parser comes out of parsing if it could not parse some wrong syntax.
  I want it to parse the file to the end & leave the wrong syntax.
   
  Your help is very much necessary.........
   
  thanks.

amol Bhagavat <amol_bhagavat at yahoo.co.uk> wrote:
    Hi , it seems due to some rule only & i able to find out which rule makes it to stop it.
  But to my surprise , its a part of rule if i remove it works smoothly & if i adds that it parses half.
   
  I generate the lexer & parser in java language & to parse c language code.
  I am pasting some part of my grammer here...
  The implementation is to find a specific variable in function definition parameters
  for ex. int function(MSGQ_TYPE  MessgQNew)
             {
                  int abc; 
                 --------
                  ---------
              }
   
   
   
   String MesgQSring = "MSGQ_TYPE";
 boolean isMesgQType(String name) {   
   if ( MesgQSring.equals(name) )
    {
      return true;
    }  
  return false;
 }
   
  translation_unit
scope Symbols; // entire file is a scope
@init {
  $Symbols::messageqnames = new HashSet();  
}
   
   
  parameterwithfptr
 : fptrDeclarationsub
 | (mesgqtypechk)? mesgobject
 | parameter_declaration
 ; 
   
  mesgqtypechk
 :{isMesgQType(input.LT(1).getText())}? IDENTIFIER
 ;
  mesgobject
 :IDENTIFIER
  {
   {$Symbols::messageqnames.add($IDENTIFIER.text);}
   }
   ;
   
  Now If i removes "(mesgqtypechk)? mesgobject" this part of the rule , it works.
  Not understanding why? IS there any way i can solve this problem?
  

Jim Idle <jimi at temporal-wave.com> wrote:
        v\:* {behavior:url(#default#VML);}  o\:* {behavior:url(#default#VML);}  w\:* {behavior:url(#default#VML);}  .shape {behavior:url(#default#VML);}                Either your parser is bombing out early or some construct is lacking within it and it is just stopping at some point because of this. For a start, make sure that you have a rule that looks for EOF as the last token, as this might help you see why it is stopping early. After that, if cannot debug it in ANTLRWorks, then you need to debug it in the target language (I am presuming Java here as you don?t say, and Netbeans does a decent job if so).
   
  Jim
   
        From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of amol Bhagavat
Sent: Thursday, October 11, 2007 12:55 AM
To: antlr
Subject: [antlr-interest] Antlr parse cannot parse the file completly


   
    Hi,

     

    Need your help.

     

    With the help of ANTLR i generated lexer & parser from the grammar . The grammer i developed for my requirement is to trace out indirect function calls like function pointers.

     

    My project directory contains 500+ files.I give one file at a time to the parser.

    But it seems it does not parse the file completely... i have put some information below about the lines it lefts out.

     

    FileName         Detects Upto Line       Last Line in the file        Difference

    file1                 20997                        21415                           418

    file2                 15047                        15672                           625

    file3                 8187                          8187                             0

    file4                 430                           450                               20

    file5                18870                        18920                            50

    file6                7957                          7988                             31

     

     

    I tried to use the java command like this

    java -Xmx1024m Main doutput.txt>goutput.txt

     

    (The doutput contains the file paths & goutput contains the parsed data.)

    But still it same.

    Pls let me know am i doing mistake anywhere or some limitation??

     

    Many Thanks..

     

     

    file1 

    
    
---------------------------------
  
  Yahoo! Answers - Get better answers from someone who knows. Try it now.
  No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date: 10/10/2007 5:11 PM



  No virus found in this outgoing message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.14.7/1062 - Release Date: 10/10/2007 5:11 PM


    
---------------------------------
  For ideas on reducing your carbon footprint visit Yahoo! For Good this month. 

       
---------------------------------
 Yahoo! Answers - Get better answers from someone who knows. Tryit now.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071016/3181e4e2/attachment-0001.html 

From peizhao at itee.uq.edu.au  Mon Oct 15 23:50:52 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Tue, 16 Oct 2007 16:50:52 +1000
Subject: [antlr-interest] @lexer::header{} or @parser::header{} doesn't work
	in v3
Message-ID: <47145F4C.6080102@itee.uq.edu.au>

Hi All,

I tried the following statements in my grammar. when I compiled it, it 
throws out error saying "unexpected token: options {", which is the next 
statement of setting options


@parser::header{
package com.nicta.safe.ACoMS.sensor.teds;
}
@lexer::header{
package com.nicta.safe.ACoMS.sensor.teds;
}

options {
	output=AST; /* output AST */
	k=2;
}

I tried to replace package with import statement, but the same problem.


-- 
regards;

Peizhao

From guillaume.chavanon at systemsvip.com  Tue Oct 16 00:43:29 2007
From: guillaume.chavanon at systemsvip.com (Guillaume Chavanon)
Date: Tue, 16 Oct 2007 09:43:29 +0200
Subject: [antlr-interest] @lexer::header{} or @parser::header{} doesn't
 work	in v3
In-Reply-To: <47145F4C.6080102@itee.uq.edu.au>
References: <47145F4C.6080102@itee.uq.edu.au>
Message-ID: <47146BA1.80907@systemsvip.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071016/a4b097cf/attachment.html 

From peizhao at itee.uq.edu.au  Tue Oct 16 00:50:28 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Tue, 16 Oct 2007 17:50:28 +1000
Subject: [antlr-interest] @lexer::header{} or @parser::header{} doesn't
 work	in v3
In-Reply-To: <47146BA1.80907@systemsvip.com>
References: <47145F4C.6080102@itee.uq.edu.au> <47146BA1.80907@systemsvip.com>
Message-ID: <47146D44.5040300@itee.uq.edu.au>

I tried it as well, then it will complaint about tokens{}
:-(


regards;

Peizhao


Guillaume Chavanon wrote:
> Hi,
> 
> Try writing options{...} before lexer/parser::header{...}
> 
> Peizhao Hu wrote:
>> Hi All,
>>
>> I tried the following statements in my grammar. when I compiled it, it 
>> throws out error saying "unexpected token: options {", which is the 
>> next statement of setting options
>>
>>
>> @parser::header{
>> package com.nicta.safe.ACoMS.sensor.teds;
>> }
>> @lexer::header{
>> package com.nicta.safe.ACoMS.sensor.teds;
>> }
>>
>> options {
>>     output=AST; /* output AST */
>>     k=2;
>> }
>>
>> I tried to replace package with import statement, but the same problem.
> 
> -- 
> Systems'ViP
> (Boost your R&D efficiency, implement the functional Virtual Prototyping 
> with us) <http://www.systemsvip.com> 	
> 
> 	
> *Guillaume Chavanon*
> /
> / 	4 Rue Boussingault
> F - 67000 Strasbourg
> <http://www.systemsvip.com>
> guillaume.chavanon at systemsvip.com <mailto:guillaume.chavanon at systemsvip.com>
> www.systemsvip.com <http://www.systemsvip.com> 	
> tel:    +33 811 036 094
> fax:    +33 874 761 346
> 
> 	
> 
> This e-mail, including attachments, is intended for the person(s) or 
> company named and may contain confidential and/or legally privileged 
> information. Unauthorized disclosure, copying or use of this information 
> may be unlawful and is prohibited. If you are not the intended 
> recipient,please delete this message and notify the sender

From guillaume.chavanon at systemsvip.com  Tue Oct 16 02:08:14 2007
From: guillaume.chavanon at systemsvip.com (Guillaume Chavanon)
Date: Tue, 16 Oct 2007 11:08:14 +0200
Subject: [antlr-interest] @lexer::header{} or @parser::header{} doesn't
 work	in v3
In-Reply-To: <47146D44.5040300@itee.uq.edu.au>
References: <47145F4C.6080102@itee.uq.edu.au> <47146BA1.80907@systemsvip.com>
	<47146D44.5040300@itee.uq.edu.au>
Message-ID: <47147F7E.4070605@systemsvip.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071016/33778a25/attachment.html 

From Austin_Hastings at Yahoo.com  Tue Oct 16 02:24:55 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 16 Oct 2007 05:24:55 -0400
Subject: [antlr-interest] @lexer::header{} or @parser::header{} doesn't
 work	in v3
In-Reply-To: <47146D44.5040300@itee.uq.edu.au>
References: <47145F4C.6080102@itee.uq.edu.au> <47146BA1.80907@systemsvip.com>
	<47146D44.5040300@itee.uq.edu.au>
Message-ID: <47148367.2050401@Yahoo.com>

The structure of an ANTLR file:


/** This is a document comment */
grammarType grammar name;
?optionsSpec?
?tokensSpec?
?attributeScopes?
?actions?
/** doc comment */
rule1 : ... | ... | ... ;
rule2 : ... | ... | ... ;

The @header/@members blocks are considered "actions".

=Austin

Peizhao Hu wrote:
> I tried it as well, then it will complaint about tokens{}
> :-(
>
>
> regards;
>
> Peizhao
>
>
> Guillaume Chavanon wrote:
>> Hi,
>>
>> Try writing options{...} before lexer/parser::header{...}
>>
>> Peizhao Hu wrote:
>>> Hi All,
>>>
>>> I tried the following statements in my grammar. when I compiled it, 
>>> it throws out error saying "unexpected token: options {", which is 
>>> the next statement of setting options
>>>
>>>
>>> @parser::header{
>>> package com.nicta.safe.ACoMS.sensor.teds;
>>> }
>>> @lexer::header{
>>> package com.nicta.safe.ACoMS.sensor.teds;
>>> }
>>>
>>> options {
>>>     output=AST; /* output AST */
>>>     k=2;
>>> }
>>>
>>> I tried to replace package with import statement, but the same problem.
>>
>> -- 
>> Systems'ViP
>> (Boost your R&D efficiency, implement the functional Virtual 
>> Prototyping with us) <http://www.systemsvip.com>    
>>
>>     
>> *Guillaume Chavanon*
>> /
>> /     4 Rue Boussingault
>> F - 67000 Strasbourg
>> <http://www.systemsvip.com>
>> guillaume.chavanon at systemsvip.com 
>> <mailto:guillaume.chavanon at systemsvip.com>
>> www.systemsvip.com <http://www.systemsvip.com>    
>> tel:    +33 811 036 094
>> fax:    +33 874 761 346
>>
>>     
>>
>> This e-mail, including attachments, is intended for the person(s) or 
>> company named and may contain confidential and/or legally privileged 
>> information. Unauthorized disclosure, copying or use of this 
>> information may be unlawful and is prohibited. If you are not the 
>> intended recipient,please delete this message and notify the sender
>
>


From antlr at mirality.co.nz  Tue Oct 16 02:46:11 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 16 Oct 2007 22:46:11 +1300
Subject: [antlr-interest] Keywords not context-free
In-Reply-To: <ff0m8u$h64$1@ger.gmane.org>
References: <ff0m8u$h64$1@ger.gmane.org>
Message-ID: <20071016094623.BABED11E99A@www.antlr.org>

At 10:32 16/10/2007, Clifford Heath wrote:
 >In a grammar I'm working on, I have a significant subset of the
 >language that allows arbitrary-length strings of identifiers,
 >where words that are keywords elsewhere (like "is") may be used
 >as regular identifiers.
 >
 >Is there a general way to handle this kind of 
context-sensitivity
 >in ANTLR (as in, backup and retry if the grammar reports an
 >error), or must I explore traditional methods of informing the 
lexer?

The general solution is not to do it in the lexer at all, but 
rather to do it in the parser instead.

If you've got a particular string of characters, say "foo", that 
might be a "foo keyword" or a "foo identifier", then in the lexer 
simply recognise it as "some kind of foo" and don't assign any 
semantic meaning to it until you get the surrounding context in 
the parser.

The simplest way to do this is to make a catch-all identifier 
rule, similar to this:

identifier
   : IDENTIFIER | FOO | BAR | BAZ
   ;

Where FOO, BAR, and BAZ are tokens representing those specific 
"words", and IDENTIFIER accepts any other sequence of letters 
strung together.  Consequently the identifier rule will accept any 
of these in an identifier context, and you can also refer to the 
FOO, BAR, and BAZ tokens as keywords in some other context.


From win at wincent.com  Tue Oct 16 02:56:07 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 16 Oct 2007 11:56:07 +0200
Subject: [antlr-interest] 3.0.1 C target woes
Message-ID: <13FBAB91-7E8D-4D2D-B423-C0165DD5977C@wincent.com>

Had some problems trying to get my lexer that worked under the 3.0 C  
target runtime to work under the 3.0.1 runtime.

The problem is solved now, so I'm posting this here for others in  
case they run into similar issues.

Basically, the lexer was crashing after lines like this:

   start = (const char *)(stream->data + (token->start * 2));
   len   = (token->stop - token->start + 1) * 2;

Here I'm just trying to get a pointer to the start of the token text,  
and its length in bytes. (Note that this is with a UCS-2 stream; the  
multiply-by-two operations are because each UCS-2 character occupies  
2 bytes.)

Inspecting the values of the variables revealed that while under 3.0,  
token->start was a character index (the number of characters, not  
bytes, relative to the start of the stream), in 3.0.1 it is an  
absolute pointer.

Similarly, where token->stop was a character index in 3.0 (the number  
of characters, not bytes, relative to the start of the stream), in  
3.0.1 it is an absolute pointer as well. Strangely, it is not a  
pointer to the end of the token text, but to the byte immediately  
preceding it. In the case of UCS-2 that means that it's a pointer to  
the second half of a character and isn't valid. Although this is  
correct for ASCII streams, it seems like a bug for UCS-2 streams.

That is, whereas in 3.0 given a character "a" at address 0x0f00:

- let's say stream->data is 0x0f00
- token->start is 0
- token->stop is 1
- the token's address is 0x0f00 + 0
- and its length is 1 * 2 (2 bytes)

But in 3.0.1:

- let stream->data be 0x0f00
- token->start is now 0x0f00
- token->stop is 0x0f01
- the token's address is 0x0f00
- and its length is (stop + 1) - start

So I was able to get my recognizer running by changing:

   start = (const char *)(stream->data + (token->start * 2));
   len   = (token->stop - token->start + 1) * 2;

To:

   start = (const char *)token->start;
   len = (token->stop + 1 - token->start);

Jim, is there anywhere where this kind of API-level change is  
documented in the release notes? It would be nice if this kind of  
information were included with future releases (or if it is already  
included, it would be nice if the info were made more prominent).

Another thing is that although the behaviour of the API changed, the  
documentation in the header files did not. The start field in  
"antlr3commontoken.h" is still documented as being "The character  
offset in the input stream where the text for this token starts."

I spent several hours last night trying to find the changeset which  
introduced these changes and I had little success. In the spirit of  
constructive criticism, there are a couple of things you could do to  
make the development history easier to search:

- in many changesets the commit message describes what sounds like a  
limited fix but the actual diff includes very extensive whitespace  
fixes; this makes it much harder to see the actual substantive change  
underneath all the cosmetic changes. Keeping your whitespace changes  
in separate commits would be a huge help.

- the same goes for spelling errors in comments; sometimes the number  
of corrections drowns out the changes to the non-comment lines in the  
source files. It would be great if you could keep such corrections in  
separate changesets.

- often it seems that unrelated topics are bundled together in single  
changesets, making it harder to understand the nature of the changes  
because they're all mixed in together.

- the commit messages tend to be fairly brief and it can be quite  
hard to figure out the purpose of a given changeset.

Hope I haven't caused any offense with this feedback; I think I've  
been spoilt lately by observing the Git development history. Check  
out their changelog for a shining example of ultra-clean development  
history:

   <http://repo.or.cz/w/git.git?a=log>

Cheers,
Wincent




From clifford.heath at gmail.com  Tue Oct 16 04:56:33 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 16 Oct 2007 21:56:33 +1000
Subject: [antlr-interest] Keywords not context-free
In-Reply-To: <20071016094623.BABED11E99A@www.antlr.org>
References: <ff0m8u$h64$1@ger.gmane.org>
	<20071016094623.BABED11E99A@www.antlr.org>
Message-ID: <ff28th$n5q$1@ger.gmane.org>

Gavin Lambert wrote:
> The simplest way to do this is to make a catch-all identifier rule, 
> similar to this:
> identifier
>   : IDENTIFIER | FOO | BAR | BAZ
>   ;
> Where FOO, BAR, and BAZ are tokens representing those specific "words", 
> and IDENTIFIER accepts any other sequence of letters strung together.  
> Consequently the identifier rule will accept any of these in an 
> identifier context, and you can also refer to the FOO, BAR, and BAZ 
> tokens as keywords in some other context.

Yes, that will probably work. It's a pain though, because in this context,
all but three of the language's keywords need to be accepted as normal
identifiers, as part of an arbitrary length string of such identifiers. 
Ugly, because I need to list all the other keywords of the language, so
I wondered whether there was a better way :-).

I once saw an SQL grammar (which used a modified YACC engine), that
detected an error state, saw that the last token was a keyword, and
backed up one token to retry the parse with that token as an identifier.
That way you could have a table called "select", and other nasty things
like that. Given that ANTLR can do backtracking, I thought that approach
might be viable.

Clifford Heath.


From jaluber at gmx.de  Tue Oct 16 05:25:56 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 16 Oct 2007 14:25:56 +0200
Subject: [antlr-interest] Keywords not context-free
In-Reply-To: <ff28th$n5q$1@ger.gmane.org>
References: <ff0m8u$h64$1@ger.gmane.org>	<20071016094623.BABED11E99A@www.antlr.org>
	<ff28th$n5q$1@ger.gmane.org>
Message-ID: <4714ADD4.5020204@gmx.de>

Clifford Heath wrote:
> Yes, that will probably work. It's a pain though, because in this context,
> all but three of the language's keywords need to be accepted as normal
> identifiers, as part of an arbitrary length string of such identifiers.
> Ugly, because I need to list all the other keywords of the language, so
> I wondered whether there was a better way :-).

How about using always IDENTIFIER tokens except for the context-free
keywords and test at the appropriate places, if the IDENTIFIER contains
the correct string?

contextual_keyword[string identifier]
	:	 { input.LT(1).Text() == $identifier }? IDENTIFIER
	;

should work. Then use contextual_keyword["keyword"] instead KEYWORD.

Johannes

From clifford.heath at gmail.com  Tue Oct 16 05:42:29 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 16 Oct 2007 22:42:29 +1000
Subject: [antlr-interest] Status of Ruby binding?
In-Reply-To: <ff0lr4$fki$1@ger.gmane.org>
References: <ff0lr4$fki$1@ger.gmane.org>
Message-ID: <ff2bjp$uu$1@ger.gmane.org>

Clifford Heath wrote:
> rule : ( rule2 '=' )? rule3
>     { $rule2 may or may not exist here }

This is looking like a bug in ANTLR, not just in the Ruby bindings.
Looking inside org/antlr/codegen/templates/Ruby/Ruby.stg, I see this:

ruleLabelDefs() ::= <<
<ruleDescriptor.tokenLabels :{_<it.label.text> = nil}; separator="\n">
<[ruleDescriptor.tokenListLabels, ruleDescriptor.ruleListLabels]
    :{list_<it.label.text> = nil}; separator="\n"
>
>>

which is the Ruby version of the Java.stg's:

ruleLabelDefs() ::= <<
<[ruleDescriptor.tokenLabels,ruleDescriptor.tokenListLabels]
    :{<labelType> <it.label.text>=null;}; separator="\n"
>
<[ruleDescriptor.tokenListLabels,ruleDescriptor.ruleListLabels]
    :{List list_<it.label.text>=null;}; separator="\n"
>

Now with this grammar, the Java version emits the ruleDescriptor's
tokenLabels just fine, but for the same grammar in Ruby, this
collection is empty and nothing is emitted. I've edited various
things into the Ruby version and they get emitted, so I know that
ruleLabelDefs is being called, but when I add text into this block

:{_<it.label.text> = nil}

nothing gets emitted.

What's happening here? How can the same parser have the tokenLabels
defined for Java but not for Ruby?

--
Clifford Heath. A much simplified version of the grammar follows:

-------------------- Cut Here --------------------
grammar Bug;

options {
        language = Ruby;
}

main returns [ret]
:       ( term '=' )? head body ';'
                { $ret = [ $term.ret ] }
;

term returns [ret]:     ID { $ret = $ID.text };
head: ID;
body: ID;
ID:     'a'..'z';
WS:     (' '|'\t'|'\r'|'\n')+ {$channel = 99;};


From rschulz at sonic.net  Tue Oct 16 06:23:43 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Tue, 16 Oct 2007 06:23:43 -0700
Subject: [antlr-interest] Antlr parse cannot parse the file completly
In-Reply-To: <677204.47204.qm@web23210.mail.ird.yahoo.com>
References: <677204.47204.qm@web23210.mail.ird.yahoo.com>
Message-ID: <200710160623.43684.rschulz@sonic.net>

On Monday 15 October 2007 22:08, amol Bhagavat wrote:
> Hi ,
>
>   Hw to implement a rule in grammar which will check EOF of a file.
>   My parser comes out of parsing if it could not parse some wrong
> syntax. I want it to parse the file to the end & leave the wrong
> syntax.

Match against the built-in token EOF in a grammar rule.


Randall Schulz

From jimi at temporal-wave.com  Tue Oct 16 10:33:22 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 16 Oct 2007 10:33:22 -0700
Subject: [antlr-interest] 3.0.1 C target woes
In-Reply-To: <13FBAB91-7E8D-4D2D-B423-C0165DD5977C@wincent.com>
References: <13FBAB91-7E8D-4D2D-B423-C0165DD5977C@wincent.com>
Message-ID: <BAY130-DS2615D411F4C93D6157EDB869C0@phx.gbl>

Michelangelo was almost done with the Sistine chapel, and allowed Leonardo
to come in and have a look. After looking around a bit, Leonardo said:
"You've missed a bit!".

Basically, You should use the methods given to get the text of tokens, but
in general I don?t intend that you should need to know what the changelists
are to use it of course. For various reasons that I did not agree with, the
original source used 8 space tabs and now I want this to be 4 space tabs -
in general I commit these and spelling errors in comments as separate
checkins, but not always as I correct some of this as I go along.
Ironically, both the change to use absolute pointers (though it does sound
like that isn't quite right for UCS2) and the correction to spelling errors
in comments, were done for you!

I will take your suggestions under advisement, but let's not lose track of
the fact that it is free and unencumbered and a little more complicated than
Git ;-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Wincent Colaiuta
> Sent: Tuesday, October 16, 2007 2:56 AM
> To: Antlr Interest
> Subject: [antlr-interest] 3.0.1 C target woes
> 
> Had some problems trying to get my lexer that worked under the 3.0 C
> target runtime to work under the 3.0.1 runtime.
> 
> The problem is solved now, so I'm posting this here for others in
> case they run into similar issues.
> 
> Basically, the lexer was crashing after lines like this:
> 
>    start = (const char *)(stream->data + (token->start * 2));
>    len   = (token->stop - token->start + 1) * 2;
> 
> Here I'm just trying to get a pointer to the start of the token text,
> and its length in bytes. (Note that this is with a UCS-2 stream; the
> multiply-by-two operations are because each UCS-2 character occupies
> 2 bytes.)
> 
> Inspecting the values of the variables revealed that while under 3.0,
> token->start was a character index (the number of characters, not
> bytes, relative to the start of the stream), in 3.0.1 it is an
> absolute pointer.
> 
> Similarly, where token->stop was a character index in 3.0 (the number
> of characters, not bytes, relative to the start of the stream), in
> 3.0.1 it is an absolute pointer as well. Strangely, it is not a
> pointer to the end of the token text, but to the byte immediately
> preceding it. In the case of UCS-2 that means that it's a pointer to
> the second half of a character and isn't valid. Although this is
> correct for ASCII streams, it seems like a bug for UCS-2 streams.
> 
> That is, whereas in 3.0 given a character "a" at address 0x0f00:
> 
> - let's say stream->data is 0x0f00
> - token->start is 0
> - token->stop is 1
> - the token's address is 0x0f00 + 0
> - and its length is 1 * 2 (2 bytes)
> 
> But in 3.0.1:
> 
> - let stream->data be 0x0f00
> - token->start is now 0x0f00
> - token->stop is 0x0f01
> - the token's address is 0x0f00
> - and its length is (stop + 1) - start
> 
> So I was able to get my recognizer running by changing:
> 
>    start = (const char *)(stream->data + (token->start * 2));
>    len   = (token->stop - token->start + 1) * 2;
> 
> To:
> 
>    start = (const char *)token->start;
>    len = (token->stop + 1 - token->start);
> 
> Jim, is there anywhere where this kind of API-level change is
> documented in the release notes? It would be nice if this kind of
> information were included with future releases (or if it is already
> included, it would be nice if the info were made more prominent).
> 
> Another thing is that although the behaviour of the API changed, the
> documentation in the header files did not. The start field in
> "antlr3commontoken.h" is still documented as being "The character
> offset in the input stream where the text for this token starts."
> 
> I spent several hours last night trying to find the changeset which
> introduced these changes and I had little success. In the spirit of
> constructive criticism, there are a couple of things you could do to
> make the development history easier to search:
> 
> - in many changesets the commit message describes what sounds like a
> limited fix but the actual diff includes very extensive whitespace
> fixes; this makes it much harder to see the actual substantive change
> underneath all the cosmetic changes. Keeping your whitespace changes
> in separate commits would be a huge help.
> 
> - the same goes for spelling errors in comments; sometimes the number
> of corrections drowns out the changes to the non-comment lines in the
> source files. It would be great if you could keep such corrections in
> separate changesets.
> 
> - often it seems that unrelated topics are bundled together in single
> changesets, making it harder to understand the nature of the changes
> because they're all mixed in together.
> 
> - the commit messages tend to be fairly brief and it can be quite
> hard to figure out the purpose of a given changeset.
> 
> Hope I haven't caused any offense with this feedback; I think I've
> been spoilt lately by observing the Git development history. Check
> out their changelog for a shining example of ultra-clean development
> history:
> 
>    <http://repo.or.cz/w/git.git?a=log>
> 
> Cheers,
> Wincent
> 
> 
> 
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.14.12/1072 - Release Date:
> 10/15/2007 5:55 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.14.12/1072 - Release Date: 10/15/2007
5:55 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071016/293c1809/attachment-0001.html 

From win at wincent.com  Tue Oct 16 11:38:20 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 16 Oct 2007 20:38:20 +0200
Subject: [antlr-interest] 3.0.1 C target woes
In-Reply-To: <BAY130-DS2615D411F4C93D6157EDB869C0@phx.gbl>
References: <13FBAB91-7E8D-4D2D-B423-C0165DD5977C@wincent.com>
	<BAY130-DS2615D411F4C93D6157EDB869C0@phx.gbl>
Message-ID: <687D673D-5854-411A-9A04-A3C307049C83@wincent.com>

El 16/10/2007, a las 19:33, Jim Idle escribi?:

> Basically, You should use the methods given to get the text of  
> tokens, but
> in general I don?t intend that you should need to know what the  
> changelists
> are to use it of course.

I'll look at doing that in the future, but in this case I made the  
mistake of thinking that the "start" member was publicly accessible  
and had stable semantics because it was documented in the headers,  
which are the public API of the runtime.

Correct me if I'm wrong though, but in this particular case using the  
provided methods wouldn't have helped at all. Using getStartIndex()  
rather than just accessing token->start directly wouldn't have helped  
because getStartIndex() just returns token->start.

So the key problem I ran into was that the semantics of the property  
changed (from character index to absolute pointer), but there was no  
changelist that I could find which documented this API-level change,  
and the documentation for the property in the header file wasn't  
updated to inform of the new semantics. This is not a criticism, just  
a request for documentation of API changes in future versions.

> Ironically, both the change to use absolute pointers (though it  
> does sound
> like that isn't quite right for UCS2) and the correction to  
> spelling errors
> in comments, were done for you!
>
> I will take your suggestions under advisement, but let's not lose  
> track of
> the fact that it is free and unencumbered

Yes, I'm well aware that ANTLR is free and you work on it as a  
volunteer, and I appreciate your efforts. I was just trying to  
provide feedback to help you make it even better. If you're not  
interested in that kind of feedback let me know and I'll try to keep  
it to myself.

> and a little more complicated than
> Git ;-)

I haven't actually compared lines-of-code and what not, but I didn't  
bring up Git because of its relative complexity (or lack of); I  
brought it up because it's the best example of clean history I've  
ever seen in an open source project, right from the very first  
commit. I think we could all learn a lot by studying their processes.

Cheers,
Wincent




From win at wincent.com  Tue Oct 16 11:57:02 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 16 Oct 2007 20:57:02 +0200
Subject: [antlr-interest] ANTLR 3.0.1 build failure
In-Reply-To: <mailman.9920.1192511312.2665.antlr-interest@antlr.org>
References: <mailman.9920.1192511312.2665.antlr-interest@antlr.org>
Message-ID: <25E71251-6D1C-4899-A496-42AEBB41D1B1@wincent.com>

El 16/10/2007, a las 7:08, Wincent Colaiuta <win at wincent.com> escribi?:

> El 16/10/2007, a las 2:32, Terence Parr escribi?:
>
>> On Oct 15, 2007, at 4:27 PM, Wincent Colaiuta wrote:
>>
>>> I've run into the exact same problem as Kenny did last month
>>> trying to build ANTLR 3.0.1:
>>>
>>> <http://www.antlr.org/pipermail/antlr-interest/2007-September/
>>> 023639.html>
>>>
>>> Nobody replied back then, and I'm at the limit of my ant
>>> troubleshooting skills. Anybody know how to fix this?
>>
>> Weird.  I guess you can try the old javac *.java in the dirs ;)
>> Ter
>
> I found out a bit more by passing the "-v" (verbose) switch to "ant
> build". If you look at the list of files it says it will compile
> (pasted below), you can see that the last 13 are duplicates. I know
> absolutely nothing about Ant and the XML build file, so I tried a
> cave-man troubleshooting technique: moving the duplicate files out of
> the way. Moving the files in the "codegen" subdirectory (the ones at
> the end of the list) didn't work and just yielded different errors,
> but moving the other duplicates out of the way (the ones in "src/org/
> antlr/tool" and "src/org/antlr/codegen") made the build succeed.

I've done a little more research on the build problem and have  
observed the following:

- on issuing an "ant build" the first target to be built is the  
"generator-prepare" target; this copies some ".g" files into the top- 
level "codegen" dir

- the next target is "generator", which fails unless antlr-2.7.7.jar  
is in the CLASSPATH; this generates a bunch of java files in the  
"codegen" dir which are identical to those stored elsewhere in the  
source tree, apart from the embedded timestamps

- the next target is "compile-rt", which goes fine

- then comes "compile", which is where the duplicate class warnings  
are produced; it looks like this happens because the "src.path" in  
the build.xml file comprises both the "codegen.dir" (where the new  
java files just got created) and the "src.dir" (where the original  
copies reside)

So it appears that there are two possible fixes:

- either to edit the build.xml file to add some sort of (possibly  
complex) logic to exclude any java file in the "src.dir" which is  
also in the "codegen.dir"

- or change the source distribution to exclude the duplicate files,  
seeing as they're never used anyway

In any case, this is the build script I am using now to do a build:

#!/bin/sh
ANTLR_VERSION="antlr-3.0.1"
rm -rf "${ANTLR_VERSION}"
tar xzvf "${ANTLR_VERSION}.tar.gz"
OLD_CLASSPATH="$CLASSPATH"
export CLASSPATH="/usr/local/junit/junit.jar:./lib/antlr-2.7.7.jar"
cd "${ANTLR_VERSION}"
ant generator
cd codegen
FILES=`ls *.java`
cd ..
for FILE in $FILES
do
    find src/org/antlr -name $FILE -delete
done
ant build
export CLASSPATH="$OLD_CLASSPATH"

Cheers,
Wincent




From antlr at jazillian.com  Tue Oct 16 12:36:01 2007
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 16 Oct 2007 15:36:01 -0400
Subject: [antlr-interest] Generate token types file from .tokens file
In-Reply-To: <1C1DA9CF-7742-4EA6-A4CF-787C7CF1671D@cs.usfca.edu>
References: <47141606.50407@Yahoo.com>
	<1C1DA9CF-7742-4EA6-A4CF-787C7CF1671D@cs.usfca.edu>
Message-ID: <471512A1.1020908@jazillian.com>

Here's a Java class that reads a .tokens file and produces a 
MyGrammarTokenTypes.java file.
It produces code that follows the "Constant Interface antipattern", but 
could be easily changed to
generate an enum. Note that there's a table mapping symbols to names, 
for symbols that aren't allowed
in Java variable names (e.g. "." becomes "DOT").

Sorry, no clever StringTemplate for output generation or even ANTLR for 
parsing.
Just vanilla Java.

---------------------------------------------------
/*
 * GenerateTokenTypes.java
 * Copyright 2007 Andy Tripp
 *
 * This class reads an ANTLR-generated .tokens file and
 * generate a Java class from it. For example, running:
 *
 * $ java GenerateTokenTypes VB > VBTokenTypes.java
 *
 * will read VB.tokens and create VBTokenTypes.java
 * The class contains a bunch of constant ints, one for each token type.
 * This is useful for when you want to specify a particular type in your
 * java code, so you can say:
 * if (token.getType() == VBTokenTypes.StringLiteral)
 * ...rather than...
 * if (token.getType() == 123)
 *
 * Be sure to run this after each run of ANTLR, as each run of ANTLR will
 * re-generate your .tokens file.
 */

import java.io.*;
import java.util.*;

public class GenerateTokenTypes {
    private final static String INDENT = "    ";
    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Usage: GenerateTokenTypes <grammarName>");
            return;
        }
        String fileName = args[0] + ".tokens";
        File file = new File(fileName);
        if (!file.exists()) {
            System.err.println("file does not exist:" + fileName);
            return;
        }

        String contents = IOUtils.fileToString(fileName);
        String[] lines = contents.split("\n");
        String[] names = new String[lines.length+10];
        for (String line: lines) {
            int i=0;
            // when we have something like:
            // '='=66
            // be sure to skip over the single-quotes when looking for '='
            if (line.startsWith("\'")) {
                i = line.indexOf('\'', 1);
            }
            i = line.indexOf('=', i);
            if (i == -1) {
                System.err.println("Missing '=' on line:" + line);
                return;
            }
            String name = line.substring(0, i);
            String value = line.substring(i+1);
            if (name.startsWith("'")) {
                String literal = name.substring(1, name.length()-1);
                name = generateLiteralName(literal);
            }
            try {
                int val = Integer.parseInt(value);
                names[val] = name;
            } catch (NumberFormatException e) {
                System.err.println("invalid number on line:" + line);
                return;
            }
        }

        String className = Character.toUpperCase(args[0].charAt(0)) +
            args[0].substring(1) +
            "TokenTypes";
        printOutclass(className, names);
    }

    private static void printOutclass(String className, String[] names) {

        System.out.println("public class " + className + " {");
        for (int i=0; i<names.length; i++) {
            if (names[i] != null) {
                System.out.println( INDENT + "final static int "
                    + names[i] + '=' + i + ';');
            }
        }

        System.out.println('}');
    }

    // map literal chars like '#' to strings
    // that are valid in variables like "HASH"
    private final static Map<String,String> VALID_NAMES = new 
HashMap<String,String>();
    private final static String[][] MAPPING = {
        {"=", "ASSIGN"},
        {":=", "COLON_ASSIGN"},
        {"==", "COMPARE"},
        {"\\\\", "BACKSLASH"},
        {"\\r", "CR"},
        {"!", "BANG"},
        {"&", "AMPERSAND"},
        {":", "COLON"},
        {",", "COMMA"},
        {"$", "DOLLAR"},
        {".", "DOT"},
        {"_", "UNDERSCORE"},
        {";", "SEMI"},
        {"~", "TILDE"},
        {"\\n", "NEWLINE"},
        {"^", "BNOT"},
        {">", "GT"},
        {">=", "GE"},
        {"<", "LT"},
        {"<=", "LE"},
        {"<>", "NE"},
        {"?", "QUESTION"},
        {"{", "LCURLY"},
        {"}", "RCURLY"},
        {"[", "LBRACK"},
        {"]", "RBRACK"},
        {"(", "LPAREN"},
        {")", "RPAREN"},
        {"+", "PLUS"},
        {"-", "MINUS"},
        {"*", "STAR"},
        {"%", "MODULO"},
        {"/", "DIV"},
        {"#", "HASH"},
        {"@", "AT"},
    };
    static {
        for (int i=0; i<MAPPING.length; i++) {
            VALID_NAMES.put(MAPPING[i][0], MAPPING[i][1]);
        }
    }
    private static String generateLiteralName(String literal) {
        String value = VALID_NAMES.get(literal);
        if (value != null) {
            return "LITERAL_" + value;
        }

        literal = literal.replace(' ', '_'); // replace spaces with 
underscores
        literal = literal.replace('.', '_'); // replace dots with 
underscores
        literal = literal.replace("#", "HASH_"); // #IF becomes HASH_IF

        return "LITERAL_" + literal;
    }
}

From ted.villalba at gmail.com  Tue Oct 16 15:10:15 2007
From: ted.villalba at gmail.com (Ted Villalba)
Date: Tue, 16 Oct 2007 15:10:15 -0700
Subject: [antlr-interest] Parser stops,
	returns partial tree sometimes correctly so.
Message-ID: <69fb4b090710161510w199a8bb2j88a0bd470780bf32@mail.gmail.com>

Hi,

I have created a parser that stops parsing my input string and returns an
AST, when instead, I expected it to throw a recognition exception.
Testing in ANTLRWorks I get a NullPointerException, i think because of some
code that sets the token type.

boolTerm : b=BOOL_OP|WOK_OP { $b.setType(WCHAR); }  ;

Is there a way to force the parser to either parse an entire string or throw
an exception?
I have a similar( i think) issue where when I add an extra parenthesis to my
input, or intentionally remove a required parenthesis from the input,the
parser does not throw an exception, but determines instead the best course
of action to take.
Although generally correct in its assumptions, the requirement is that an
exception be thrown. Not sure if there is a switch that will force this
behavior?

Thank you,
Ted
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071016/64fa1aca/attachment.html 

From hwan at yahoo.com  Tue Oct 16 15:51:49 2007
From: hwan at yahoo.com (H. Wan)
Date: Tue, 16 Oct 2007 15:51:49 -0700 (PDT)
Subject: [antlr-interest] Help in using antlr
Message-ID: <40692.59118.qm@web52307.mail.re2.yahoo.com>

I am a newbie in antlr and I need some help on the
followings:

1. I put the following in a .g file

header {
  package xxx;
}

After I ran antlr with this file, the Parser file
generated does contain a "package xxx;" line at the
top of the file.  But the Lexer file does not have
that line.
How could I make antlr put that "package xxx;" in the
Lexer file?


2. In the same case as (1), apparently antlr generates
the source file in the same directory as the .g file.
However, the java source file should go to a
subdirectory xxx.  How can I tell antlr where to put
the generated files?


I am using antlr 3.0.1.

Thanks in advance for your response.

- Hans


      ____________________________________________________________________________________
Fussy? Opinionated? Impossible to please? Perfect.  Join Yahoo!'s user panel and lay it on us. http://surveylink.yahoo.com/gmrs/yahoo_panel_invite.asp?a=7 


From Austin_Hastings at Yahoo.com  Tue Oct 16 19:38:53 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 16 Oct 2007 22:38:53 -0400
Subject: [antlr-interest] Help in using antlr
In-Reply-To: <40692.59118.qm@web52307.mail.re2.yahoo.com>
References: <40692.59118.qm@web52307.mail.re2.yahoo.com>
Message-ID: <471575BD.40503@Yahoo.com>

@lexer::header {
package xxx;
}

H. Wan wrote:
> I am a newbie in antlr and I need some help on the
> followings:
>
> 1. I put the following in a .g file
>
> header {
>   package xxx;
> }
>
> After I ran antlr with this file, the Parser file
> generated does contain a "package xxx;" line at the
> top of the file.  But the Lexer file does not have
> that line.
> How could I make antlr put that "package xxx;" in the
> Lexer file?
>
>
> 2. In the same case as (1), apparently antlr generates
> the source file in the same directory as the .g file.
> However, the java source file should go to a
> subdirectory xxx.  How can I tell antlr where to put
> the generated files?
>
>
> I am using antlr 3.0.1.
>
> Thanks in advance for your response.
>
> - Hans
>
>
>       ____________________________________________________________________________________
> Fussy? Opinionated? Impossible to please? Perfect.  Join Yahoo!'s user panel and lay it on us. http://surveylink.yahoo.com/gmrs/yahoo_panel_invite.asp?a=7 
>
>
>
>   


From nkiesel at tbdnetworks.com  Tue Oct 16 21:09:26 2007
From: nkiesel at tbdnetworks.com (Norbert Kiesel)
Date: Tue, 16 Oct 2007 21:09:26 -0700
Subject: [antlr-interest] newbie problem with mismatched token in antr v3
Message-ID: <1192594166.15107.30.camel@defiant.tbdnetworks.com>

Hi,

I have problems with "keywords vs. identifiers" in my grammar, and even
the "grammar CommandLanguage;" from the "Quick  Starter on Parser
Grammars" does not work for me. The latter gives me a
"MismatchedTokenException" for "get data from xxx".

My smallest test grammar looks like this:

grammar itf;
@members { // main method that calls parser.itf() }
itf	  	: 'interface' itfname EOF ;
WS		: ( ' '+ ) { $channel = HIDDEN; } ;
itfname		:  ITFNAME ;
ITFNAME		: ( 'a'..'z' )+ ' WS ( '0' | '9' | '/' )+ ;

When I run that against "interface xx 9", I get

line 1:10 required (...)+ loop did not match anything at character 'x'
line 1:14 no viable alternative at character '\n'
BR.recoverFromMismatchedToken
line 1:11 mismatched input 'x 9' expecting 'interface'

Can someone please tell me what I'm doing wrong?

Best,
  Norbert


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: This is a digitally signed message part
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071016/fe950cf4/attachment.bin 

From parrt at cs.usfca.edu  Tue Oct 16 21:17:02 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 16 Oct 2007 21:17:02 -0700
Subject: [antlr-interest] newbie problem with mismatched token in antr v3
In-Reply-To: <1192594166.15107.30.camel@defiant.tbdnetworks.com>
References: <1192594166.15107.30.camel@defiant.tbdnetworks.com>
Message-ID: <31DF6A92-F102-4D6E-8AE1-B904532E5057@cs.usfca.edu>


On Oct 16, 2007, at 9:09 PM, Norbert Kiesel wrote:

> Hi,
>
> I have problems with "keywords vs. identifiers" in my grammar, and  
> even
> the "grammar CommandLanguage;" from the "Quick  Starter on Parser
> Grammars" does not work for me. The latter gives me a
> "MismatchedTokenException" for "get data from xxx".
>
> My smallest test grammar looks like this:
>
> grammar itf;
> @members { // main method that calls parser.itf() }
> itf	  	: 'interface' itfname EOF ;
> WS		: ( ' '+ ) { $channel = HIDDEN; } ;
> itfname		:  ITFNAME ;
> ITFNAME		: ( 'a'..'z' )+ ' WS ( '0' | '9' | '/' )+ ;
>
> When I run that against "interface xx 9", I get
>
> line 1:10 required (...)+ loop did not match anything at character 'x'
> line 1:14 no viable alternative at character '\n'
> BR.recoverFromMismatchedToken
> line 1:11 mismatched input 'x 9' expecting 'interface'
>
> Can someone please tell me what I'm doing wrong?

Hi Norbert.  Yes, this is a weird thing.  When you call WS, it sets  
the channel to HIDDEN for "current token", which then messes up ITFNAME.

Ter


From Austin_Hastings at Yahoo.com  Tue Oct 16 21:20:23 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 17 Oct 2007 00:20:23 -0400
Subject: [antlr-interest] newbie problem with mismatched token in antr v3
In-Reply-To: <1192594166.15107.30.camel@defiant.tbdnetworks.com>
References: <1192594166.15107.30.camel@defiant.tbdnetworks.com>
Message-ID: <47158D87.6090304@Yahoo.com>

Norbert,

There's a solitary apostrophe in your ITFNAME rule that probably doesn't 
belong.  Also, you're defining ITFNAME as something with spaces in the 
middle. Is that what you intended?

=Austin


Norbert Kiesel wrote:
> Hi,
>
> I have problems with "keywords vs. identifiers" in my grammar, and even
> the "grammar CommandLanguage;" from the "Quick  Starter on Parser
> Grammars" does not work for me. The latter gives me a
> "MismatchedTokenException" for "get data from xxx".
>
> My smallest test grammar looks like this:
>
> grammar itf;
> @members { // main method that calls parser.itf() }
> itf	  	: 'interface' itfname EOF ;
> WS		: ( ' '+ ) { $channel = HIDDEN; } ;
> itfname		:  ITFNAME ;
> ITFNAME		: ( 'a'..'z' )+ ' WS ( '0' | '9' | '/' )+ ;
>
> When I run that against "interface xx 9", I get
>
> line 1:10 required (...)+ loop did not match anything at character 'x'
> line 1:14 no viable alternative at character '\n'
> BR.recoverFromMismatchedToken
> line 1:11 mismatched input 'x 9' expecting 'interface'
>
> Can someone please tell me what I'm doing wrong?
>
> Best,
>   Norbert
>
>
>   


From peizhao at itee.uq.edu.au  Tue Oct 16 22:28:51 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Wed, 17 Oct 2007 15:28:51 +1000
Subject: [antlr-interest] AntlrWork problem
In-Reply-To: <4173dc210710160127s1c5c8yfb7aecd1ebdad2d0@mail.gmail.com>
References: <47142DE0.20001@itee.uq.edu.au>
	<4173dc210710160127s1c5c8yfb7aecd1ebdad2d0@mail.gmail.com>
Message-ID: <47159D93.2080007@itee.uq.edu.au>

Thanks for reply.

I agreed that you can run it in your command line, or even you directly 
double click on the Jar file will give you enough memory to run the 
antlrworks. however, it seems to me that the software didn't release 
memory back to the system after using the memory for 
compiling/generating codes.

it becomes terrible slow after you run a complete debugging process.

regards;

Peizhao


Simone Tripodi wrote:
> Hi Peizhao!
> I had the same problem that I resolved just downloading the
> AntlrWork's jar archive, so open a shell and lunch the application
> with the command
> 
> java -Xmx700m -jar antlrworks-1.1.3.jar
> 
> Well, 700m are too much, but you can increase the memory size as you like it :)
> 
> Have a nice day!
> Simone
> 
> 
> 2007/10/16, Peizhao Hu <peizhao at itee.uq.edu.au>:
>> Hi all,
>>
>> has anyone experience a out-of-memory problem with AntlrWork?
>>
>> AntlrWork debug my file and generate AST tree smoothly in the first
>> time. however, when you modify something and want to redebug it again,
>> it will compliant that not enough memory. So I have to close (exit) the
>> software and restart it again, everytime.
>>
>> I am wondering whether there is a memory leakage bug in the software or
>> something wrong with my grammar.
>>
>> --
>> regards;
>>
>> Peizhao
>>

From kirby.bohling at gmail.com  Tue Oct 16 22:45:26 2007
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Wed, 17 Oct 2007 00:45:26 -0500
Subject: [antlr-interest] Parser stops,
	returns partial tree sometimes correctly so.
In-Reply-To: <69fb4b090710161510w199a8bb2j88a0bd470780bf32@mail.gmail.com>
References: <69fb4b090710161510w199a8bb2j88a0bd470780bf32@mail.gmail.com>
Message-ID: <3cac8fdf0710162245n728b1d9emfa048f0e2fa3002c@mail.gmail.com>

Ted,

  I think I know what problem your having.  I am intentionally feeding
the parser bad inputs to validate that my grammar recognizes only what
I want, and not what I don't want.  To do this, I had to add the stuff
that at the bottom to my grammar file.  I think it's a sign of an
implementation oversight in Antlr that there's no stock way to verify
that no recovery logic was executed short of reading in
stdin/stderror.  It generates a grammar recognizer for goodness sake,
it'd be novel if the API had a "wasRecognizedCleanly" method, even I
had to reset it between parses (even if it auto-recovered).  If you go
look at the gUnit project that has been discussed recently on the
list, you'll find that they capture stderr and then look for "FAIL" or
some such to see if it accepted or rejected the parse.

   You might have better luck if you use the DebugParser, but
unfortunately, in 3.0, there is no DebugLexer, so you can't capture
the Lexer doing auto-recovery.  It looked to be on a TODO list, but
not sure if or when it's going to be implemented.  I believe that the
interface you can pass into DebugParser has changed between 3.0 and
3.0.1 according the to the release notes.  I can't get either to
build, and unless you can get it to build, you can't actually read the
source to the several core pieces of Antlr as they are generated
during the build.  (It'd be really nice if there was a version of the
source that included the generated source for debugging when I'm just
running the thing.  Maybe it's there, but  Eclipse can't find the
source when I attach the jar for the Parser source).

First, you have to check with both the lexer and the parser, and you
have to reset both of them if you want to parse more stuff.  For my
unit tests, have handy access to both the Parser and the Lexer.

Then do something like this:

	    CLangLexer lexer = new CLangLexer(input.stream);
	
	    CommonTokenStream tokens = new CommonTokenStream(lexer);
	    CLangParser parser = new CLangParser(tokens);

            // Parse some stuff...
            // I added a bogus eof : EOF ; rule, so I parse everything
I want, and then make sure
           // that EOF is the next thing to ensure that it matched all
of the input.

           boolean isMatch = !parser.getRecognitionFailed() &&
!lexer.getExceptionsCaught();

  Hope this helps,
       Kirby

@members {
   private boolean recognitionFailed = false;

   public boolean getRecognitionFailed() {
        return recognitionFailed;
   }

   public void resetRecognitionFailed() {
        recognitionFailed = false;
   }

   protected void mismatch(IntStream input, int ttype, BitSet follow)
       throws RecognitionException
   {
      recognitionFailed = true;
      super.mismatch(input, ttype, follow);
   }

   public void recoverFromMismatchedSet(IntStream input,
                                        RecognitionException e,
                                        BitSet follow)
                                        throws RecognitionException
   {
   	   recognitionFailed = true;
   	   super.recoverFromMismatchedSet(input, e, follow);
   }

}


@rulecatch {
catch (RecognitionException re) {
    reportError(re);
    recover(input, re);
    recognitionFailed = true;
}
}

@lexer::header{
package org.kbohling.codegrind.parser;
}

@lexer::members {

private boolean exceptionsCaught = false;

public boolean getExceptionsCaught() {
   return exceptionsCaught;
}

public void clearExceptionsCaught() {
	exceptionsCaught = false;
}

public void reportError(RecognitionException e) {
	exceptionsCaught = true;
    super.reportError(e);
}
}


On 10/16/07, Ted Villalba <ted.villalba at gmail.com> wrote:
> Hi,
>
> I have created a parser that stops parsing my input string and returns an
> AST, when instead, I expected it to throw a recognition exception.
> Testing in ANTLRWorks I get a NullPointerException, i think because of some
> code that sets the token type.
>
> boolTerm : b=BOOL_OP|WOK_OP { $b.setType(WCHAR); }  ;
>
> Is there a way to force the parser to either parse an entire string or throw
> an exception?
> I have a similar( i think) issue where when I add an extra parenthesis to my
> input, or intentionally remove a required parenthesis from the input,the
> parser does not throw an exception, but determines instead the best course
> of action to take.
> Although generally correct in its assumptions, the requirement is that an
> exception be thrown. Not sure if there is a switch that will force this
> behavior?
>
> Thank you,
> Ted
>
>
>
>

From nkiesel at tbdnetworks.com  Tue Oct 16 23:18:49 2007
From: nkiesel at tbdnetworks.com (Norbert Kiesel)
Date: Tue, 16 Oct 2007 23:18:49 -0700
Subject: [antlr-interest] newbie problem with mismatched token in antr	v3
In-Reply-To: <47158D87.6090304@Yahoo.com>
References: <1192594166.15107.30.camel@defiant.tbdnetworks.com>
	<47158D87.6090304@Yahoo.com>
Message-ID: <1192601929.22532.10.camel@titan.tbdnetworks.com>


On Wed, 2007-10-17 at 00:20 -0400, Austin Hastings wrote:
> Norbert,
> 
> There's a solitary apostrophe in your ITFNAME rule that probably doesn't 
> belong.  Also, you're defining ITFNAME as something with spaces in the 
> middle. Is that what you intended?

Yeah, that ' is bogus: I trimmed down the grammar a bit more to get a
shorter posting and forgot to make sure it still had the same result.
Sorry for that.  However, the problem prevails.  Regarding the 'space in
ITFNAME': don't blame me, blame Cisco. I'm trying to parse some IOS
config snipplets, and IOS accepts both "ip interface Ethernet 0/3" and
"ip interface Ethernet0/3" and treats it as identical.

I trimmed the grammar down even more (it's of course useless in that
form), and I still get the same error:

grammar itf;
itf	  	: 'interface' ' ' itfname EOF ;
itfname		:  ITFNAME ;
ITFNAME		: ( 'a'..'z' )+ ' ' ( '0' | '9' )+ ;

BTW: the problem goes away if I drop any of the characters that make up
'interface' from the 'a'..'z' in ITFNAME.

Best,
  Norbert


From nkiesel at tbdnetworks.com  Tue Oct 16 23:21:54 2007
From: nkiesel at tbdnetworks.com (Norbert Kiesel)
Date: Tue, 16 Oct 2007 23:21:54 -0700
Subject: [antlr-interest] newbie problem with mismatched token in antr	v3
In-Reply-To: <31DF6A92-F102-4D6E-8AE1-B904532E5057@cs.usfca.edu>
References: <1192594166.15107.30.camel@defiant.tbdnetworks.com>
	<31DF6A92-F102-4D6E-8AE1-B904532E5057@cs.usfca.edu>
Message-ID: <1192602114.22532.14.camel@titan.tbdnetworks.com>


On Tue, 2007-10-16 at 21:17 -0700, Terence Parr wrote:
> On Oct 16, 2007, at 9:09 PM, Norbert Kiesel wrote:
> 
> > Hi,
> >
> > I have problems with "keywords vs. identifiers" in my grammar, and  
> > even
> > the "grammar CommandLanguage;" from the "Quick  Starter on Parser
> > Grammars" does not work for me. The latter gives me a
> > "MismatchedTokenException" for "get data from xxx".
> >
> > My smallest test grammar looks like this:
> >
> > grammar itf;
> > @members { // main method that calls parser.itf() }
> > itf	  	: 'interface' itfname EOF ;
> > WS		: ( ' '+ ) { $channel = HIDDEN; } ;
> > itfname		:  ITFNAME ;
> > ITFNAME		: ( 'a'..'z' )+ ' WS ( '0' | '9' | '/' )+ ;
> >
> > When I run that against "interface xx 9", I get
> >
> > line 1:10 required (...)+ loop did not match anything at character 'x'
> > line 1:14 no viable alternative at character '\n'
> > BR.recoverFromMismatchedToken
> > line 1:11 mismatched input 'x 9' expecting 'interface'
> >
> > Can someone please tell me what I'm doing wrong?
> 
> Hi Norbert.  Yes, this is a weird thing.  When you call WS, it sets  
> the channel to HIDDEN for "current token", which then messes up ITFNAME.

I tried to drop that { $channel = HIDDEN; }, but still no luck.
Actually, I even get the same error with the following even further
reduced grammar:

itf	  	: 'interface' ' ' itfname EOF ;
itfname		:  ITFNAME ;
ITFNAME		: ( 'a'..'z' )+ ' ' ( '0' | '9' )+ ;

Best,
  Norbert





From antlr at mirality.co.nz  Tue Oct 16 23:41:58 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 17 Oct 2007 19:41:58 +1300
Subject: [antlr-interest] Parser stops,
 returns partial tree  sometimes correctly so.
In-Reply-To: <69fb4b090710161510w199a8bb2j88a0bd470780bf32@mail.gmail.co
 m>
References: <69fb4b090710161510w199a8bb2j88a0bd470780bf32@mail.gmail.com>
Message-ID: <20071017064210.4DF2111EA84@www.antlr.org>

At 11:10 17/10/2007, Ted Villalba wrote:
>I have created a parser that stops parsing my input string and 
>returns an AST, when instead, I expected it to throw a 
>recognition exception.

If your toplevel rule doesn't end by trying to match EOF, then 
ANTLR will assume it doesn't need to consume the entire input 
stream and will just return whatever it can match.  If you want it 
to consume the whole stream or produce an error, then put in an 
EOF.

>Testing in ANTLRWorks I get a NullPointerException, i think 
>because of some code that sets the token type.
>
>boolTerm : b=BOOL_OP|WOK_OP { $b.setType(WCHAR); }  ;

The problem here is that "|" has the lowest precedence.  This 
means that if you have a BOOL_OP the code will not be run at all, 
and if you have a WOK_OP then "b" is not assigned and you'll get a 
NullReferenceException.  Change it to the following and it should 
do what you want:

boolTerm : b=(BOOL_OP|WOK_OP) { $b.setType(WCHAR); } ;


From jonathan.thomas at ca.com  Tue Oct 16 23:58:29 2007
From: jonathan.thomas at ca.com (Jonathan Thomas)
Date: Wed, 17 Oct 2007 16:58:29 +1000
Subject: [antlr-interest] newbie problem with mismatched token in antr v3
In-Reply-To: <1192602114.22532.14.camel@titan.tbdnetworks.com>
References: <1192594166.15107.30.camel@defiant.tbdnetworks.com>	<31DF6A92-F102-4D6E-8AE1-B904532E5057@cs.usfca.edu>
	<1192602114.22532.14.camel@titan.tbdnetworks.com>
Message-ID: <4715B295.1030706@ca.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071017/99f6ef04/attachment.html 

From Austin_Hastings at Yahoo.com  Wed Oct 17 04:14:05 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 17 Oct 2007 07:14:05 -0400
Subject: [antlr-interest] newbie problem with mismatched token in antr v3
In-Reply-To: <1192602114.22532.14.camel@titan.tbdnetworks.com>
References: <1192594166.15107.30.camel@defiant.tbdnetworks.com>	<31DF6A92-F102-4D6E-8AE1-B904532E5057@cs.usfca.edu>
	<1192602114.22532.14.camel@titan.tbdnetworks.com>
Message-ID: <4715EE7D.4020000@Yahoo.com>

Norbert,

Antlrworks gives me the same behavior. You're right - it's strange. I 
had a look at the generated code, and it seemed straightforward until I 
got to the Token code.

If you haven't already done so, set up a test harness and run the java - 
don't rely on antlrworks. See if it produces the same behavior.

=Austin


Norbert Kiesel wrote:
> On Tue, 2007-10-16 at 21:17 -0700, Terence Parr wrote:
>   
>> On Oct 16, 2007, at 9:09 PM, Norbert Kiesel wrote:
>>
>>     
>>> Hi,
>>>
>>> I have problems with "keywords vs. identifiers" in my grammar, and  
>>> even
>>> the "grammar CommandLanguage;" from the "Quick  Starter on Parser
>>> Grammars" does not work for me. The latter gives me a
>>> "MismatchedTokenException" for "get data from xxx".
>>>
>>> My smallest test grammar looks like this:
>>>
>>> grammar itf;
>>> @members { // main method that calls parser.itf() }
>>> itf	  	: 'interface' itfname EOF ;
>>> WS		: ( ' '+ ) { $channel = HIDDEN; } ;
>>> itfname		:  ITFNAME ;
>>> ITFNAME		: ( 'a'..'z' )+ ' WS ( '0' | '9' | '/' )+ ;
>>>
>>> When I run that against "interface xx 9", I get
>>>
>>> line 1:10 required (...)+ loop did not match anything at character 'x'
>>> line 1:14 no viable alternative at character '\n'
>>> BR.recoverFromMismatchedToken
>>> line 1:11 mismatched input 'x 9' expecting 'interface'
>>>
>>> Can someone please tell me what I'm doing wrong?
>>>       
>> Hi Norbert.  Yes, this is a weird thing.  When you call WS, it sets  
>> the channel to HIDDEN for "current token", which then messes up ITFNAME.
>>     
>
> I tried to drop that { $channel = HIDDEN; }, but still no luck.
> Actually, I even get the same error with the following even further
> reduced grammar:
>
> itf	  	: 'interface' ' ' itfname EOF ;
> itfname		:  ITFNAME ;
> ITFNAME		: ( 'a'..'z' )+ ' ' ( '0' | '9' )+ ;
>
> Best,
>   Norbert
>
>
>
>
>
>
>   


From Austin_Hastings at Yahoo.com  Wed Oct 17 04:44:13 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 17 Oct 2007 07:44:13 -0400
Subject: [antlr-interest] API docs out of date
Message-ID: <4715F58D.5010404@Yahoo.com>

I'm trying to refactor some code in gunit, and I came across this issue:

Testcase: testEmptyString took 0.006 sec
        FAILED
expected:<1> but was:<0>
junit.framework.AssertionFailedError: expected:<1> but was:<0>
        at 
org.antlr.gunit.StringTestInput_Test.testEmptyString(StringTestInput_Test.java:37)



The test case is:

    @Test
    public    void        testEmptyString()
    {
        StringTestInput sti = new StringTestInput("");
        CharStream cs = sti.getStream();

        assertEquals(1, cs.size());    // This value includes a single EOF.

        int c = cs.LT(1);
        assertEquals(CharStream.EOF, c);
    }

The assertion about cs.size() == 1 is failing (that's line 37).

According to the CharStream API docs 
(http://www.antlr.org/api/Java/interfaceorg_1_1antlr_1_1runtime_1_1_int_stream.html#619c01eda0b090b1ce1877bd60378990),
the size() function returns the size, and "This value includes a single 
EOF."

I have interpreted that to mean that size() will return 1 for an empty 
stream, signifying that there is an EOF pending. Yet it returns 0. This 
is easy enough for me to fix, but I think it indicates that either the 
API is broke, or the docs are broke.

=Austin


From rschulz at sonic.net  Wed Oct 17 07:10:11 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Wed, 17 Oct 2007 07:10:11 -0700
Subject: [antlr-interest] Antlr parse cannot parse the file completly
In-Reply-To: <46611.29545.qm@web23202.mail.ird.yahoo.com>
References: <46611.29545.qm@web23202.mail.ird.yahoo.com>
Message-ID: <200710170710.12027.rschulz@sonic.net>

On Wednesday 17 October 2007 00:16, amol Bhagavat wrote:
> Hi,
>
>   I am just beginner in using ANTLR.
>   I use basic c grammar. In that grammar there is no built in EOF

By "built-in" I mean supplied by ANTLR itself. Just use the terminal EOF 
without defining or declaring it and it will match the end-of-file 
token generated by the lexical analyzer when it reaches the end of its 
input.


> ...


Randall Schulz

From jbb at acm.org  Wed Oct 17 08:06:42 2007
From: jbb at acm.org (John B. Brodie)
Date: Wed, 17 Oct 2007 11:06:42 -0400
Subject: [antlr-interest] newbie problem with mismatched token in antr	v3
In-Reply-To: <1192602114.22532.14.camel@titan.tbdnetworks.com> (message from
	Norbert Kiesel on Tue, 16 Oct 2007 23:21:54 -0700)
References: <1192594166.15107.30.camel@defiant.tbdnetworks.com>
	<31DF6A92-F102-4D6E-8AE1-B904532E5057@cs.usfca.edu>
	<1192602114.22532.14.camel@titan.tbdnetworks.com>
Message-ID: <E1IiATq-0008B8-OE@gecko.home.org>

Norbert Kiesel wrote:
>...snipped...
>Actually, I even get the same error with the following even further
>reduced grammar:
>
>itf	  	: 'interface' ' ' itfname EOF ;
>itfname	:  ITFNAME ;
>ITFNAME	: ( 'a'..'z' )+ ' ' ( '0' | '9' )+ ;

Please recall that Antlr lexers try to match the LONGEST possible
sequence of characters as a token - and do so in a greedy fashion.

So, for your test input of "interface xx 9", the lexer will first see the
'interface' keyword but it is followed by a blank, so the lexer
discards the possibility that "interface " is a keyword, rather the
lexer now commits to the notion that "interface " is a ITFNAME and
insists that there must be either a '0' or a '9' after it, throwing a
syntax error because it is not.

You might be able to play with the options{greedy=false;} stuff to
control the greedy nature of the lexer.  I tried a bit and had no
luck.

Or, as suggested by someone else, just ignore whitespace and have the
parser deal with ITFNAMEs as two tokens that must appear in proper
order.

Hope this helps...
   -jbb

From jaluber at gmx.de  Wed Oct 17 10:52:36 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 17 Oct 2007 19:52:36 +0200
Subject: [antlr-interest] Help in using antlr
In-Reply-To: <40692.59118.qm@web52307.mail.re2.yahoo.com>
References: <40692.59118.qm@web52307.mail.re2.yahoo.com>
Message-ID: <47164BE4.4090306@gmx.de>

H. Wan wrote:
> 2. In the same case as (1), apparently antlr generates
> the source file in the same directory as the .g file.
> However, the java source file should go to a
> subdirectory xxx.  How can I tell antlr where to put
> the generated files?

Depends on the way, how you call ANTLR. If you do it directly, use the
-o option, if you use ANTLRworks, then change the preferences.

Johannes

From john.ridgway at trincoll.edu  Wed Oct 17 11:36:12 2007
From: john.ridgway at trincoll.edu (John Ridgway)
Date: Wed, 17 Oct 2007 14:36:12 -0400
Subject: [antlr-interest] Bugs in ANTLR v3 tests?
Message-ID: <16355BA2-AD66-4E12-AFA2-B7D3426527C3@trincoll.edu>

Friends -
I am packaging ANTLR v3 for fink (for MacOS X), and I have run into  
one funny thing.  When I run ant with the test target two of the  
tests fail: TestRewriteAST and TestSemanticPredicates.  Is that  
normal? or do I need to investigate further?

Peace
- John


From parrt at cs.usfca.edu  Wed Oct 17 12:30:30 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 17 Oct 2007 12:30:30 -0700
Subject: [antlr-interest] Bugs in ANTLR v3 tests?
In-Reply-To: <16355BA2-AD66-4E12-AFA2-B7D3426527C3@trincoll.edu>
References: <16355BA2-AD66-4E12-AFA2-B7D3426527C3@trincoll.edu>
Message-ID: <690DDA60-34C6-4F15-8F65-89DBB24A33B6@cs.usfca.edu>

A number of tests fail at the moment, at least in 3.1b1; changed some  
formatting.
Ter
On Oct 17, 2007, at 11:36 AM, John Ridgway wrote:

> Friends -
> I am packaging ANTLR v3 for fink (for MacOS X), and I have run into  
> one funny thing.  When I run ant with the test target two of the  
> tests fail: TestRewriteAST and TestSemanticPredicates.  Is that  
> normal? or do I need to investigate further?
>
> Peace
> - John
>


From clifford.heath at gmail.com  Wed Oct 17 15:21:23 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Thu, 18 Oct 2007 08:21:23 +1000
Subject: [antlr-interest] Keywords not context-free
In-Reply-To: <4714ADD4.5020204@gmx.de>
References: <ff0m8u$h64$1@ger.gmane.org>	<20071016094623.BABED11E99A@www.antlr.org>	<ff28th$n5q$1@ger.gmane.org>
	<4714ADD4.5020204@gmx.de>
Message-ID: <ff61t5$s26$1@ger.gmane.org>

Johannes Luber wrote:
> How about using always IDENTIFIER tokens except for the context-free
> keywords and test at the appropriate places, if the IDENTIFIER contains
> the correct string?
> contextual_keyword[string identifier]
> 	:	 { input.LT(1).Text() == $identifier }? IDENTIFIER
> 	;
> should work. Then use contextual_keyword["keyword"] instead KEYWORD.

Cunning, and a good trick to know, thanks.

Part of my problem arises because I have key phrases, like "is known by",
where the problem is that "is" and "by" can occur elsewhere. A recent
thread in this list shows someone with whitespace in their tokens, and
if that can be made to work for them, maybe it would work in this case
also. It doesn't completely fix the problem, but it might alleviate it.

Clifford Heath.


From clifford.heath at gmail.com  Wed Oct 17 17:27:11 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Thu, 18 Oct 2007 10:27:11 +1000
Subject: [antlr-interest] Status of Ruby binding?
In-Reply-To: <ff2bjp$uu$1@ger.gmane.org>
References: <ff0lr4$fki$1@ger.gmane.org> <ff2bjp$uu$1@ger.gmane.org>
Message-ID: <ff6991$f3u$1@ger.gmane.org>

Clifford Heath wrote:
> Clifford Heath wrote:
>> rule : ( rule2 '=' )? rule3
>>     { $rule2 may or may not exist here }

I was wrong - confused myself with my mods to the svg file.
$role2 does exist, but may not have been assigned to (which
is fine, it'll be nil). Thanks to Martin Traverso for setting
be straight.

> This is looking like a bug in ANTLR, not just in the Ruby bindings.

This appears to still be true however. Terence, any ideas?
Do you need more information to be able to answer this?

Clifford Heath.

> Looking inside org/antlr/codegen/templates/Ruby/Ruby.stg, I see this:
> 
> ruleLabelDefs() ::= <<
> <ruleDescriptor.tokenLabels :{_<it.label.text> = nil}; separator="\n">
> <[ruleDescriptor.tokenListLabels, ruleDescriptor.ruleListLabels]
>    :{list_<it.label.text> = nil}; separator="\n"
>>
>>>
> 
> which is the Ruby version of the Java.stg's:
> 
> ruleLabelDefs() ::= <<
> <[ruleDescriptor.tokenLabels,ruleDescriptor.tokenListLabels]
>    :{<labelType> <it.label.text>=null;}; separator="\n"
>>
> <[ruleDescriptor.tokenListLabels,ruleDescriptor.ruleListLabels]
>    :{List list_<it.label.text>=null;}; separator="\n"
>>
> 
> Now with this grammar, the Java version emits the ruleDescriptor's
> tokenLabels just fine, but for the same grammar in Ruby, this
> collection is empty and nothing is emitted. I've edited various
> things into the Ruby version and they get emitted, so I know that
> ruleLabelDefs is being called, but when I add text into this block
> 
> :{_<it.label.text> = nil}
> 
> nothing gets emitted.
> 
> What's happening here? How can the same parser have the tokenLabels
> defined for Java but not for Ruby?
> 
> -- 
> Clifford Heath. A much simplified version of the grammar follows:
> 
> -------------------- Cut Here --------------------
> grammar Bug;
> 
> options {
>        language = Ruby;
> }
> 
> main returns [ret]
> :       ( term '=' )? head body ';'
>                { $ret = [ $term.ret ] }
> ;
> 
> term returns [ret]:     ID { $ret = $ID.text };
> head: ID;
> body: ID;
> ID:     'a'..'z';
> WS:     (' '|'\t'|'\r'|'\n')+ {$channel = 99;};
> 
> 


From parrt at cs.usfca.edu  Wed Oct 17 17:37:10 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 17 Oct 2007 17:37:10 -0700
Subject: [antlr-interest] API docs out of date
In-Reply-To: <4715F58D.5010404@Yahoo.com>
References: <4715F58D.5010404@Yahoo.com>
Message-ID: <5DD32D41-722F-401F-96C9-0AF8403029B0@cs.usfca.edu>

Weird. added bug report:

http://www.antlr.org:8888/browse/ANTLR-183

Thanks!
Ter
On Oct 17, 2007, at 4:44 AM, Austin Hastings wrote:

> I'm trying to refactor some code in gunit, and I came across this  
> issue:
>
> Testcase: testEmptyString took 0.006 sec
>        FAILED
> expected:<1> but was:<0>
> junit.framework.AssertionFailedError: expected:<1> but was:<0>
>        at org.antlr.gunit.StringTestInput_Test.testEmptyString 
> (StringTestInput_Test.java:37)
>
>
>
> The test case is:
>
>    @Test
>    public    void        testEmptyString()
>    {
>        StringTestInput sti = new StringTestInput("");
>        CharStream cs = sti.getStream();
>
>        assertEquals(1, cs.size());    // This value includes a  
> single EOF.
>
>        int c = cs.LT(1);
>        assertEquals(CharStream.EOF, c);
>    }
>
> The assertion about cs.size() == 1 is failing (that's line 37).
>
> According to the CharStream API docs (http://www.antlr.org/api/Java/ 
> interfaceorg_1_1antlr_1_1runtime_1_1_int_stream.html#619c01eda0b090b1c 
> e1877bd60378990),
> the size() function returns the size, and "This value includes a  
> single EOF."
>
> I have interpreted that to mean that size() will return 1 for an  
> empty stream, signifying that there is an EOF pending. Yet it  
> returns 0. This is easy enough for me to fix, but I think it  
> indicates that either the API is broke, or the docs are broke.
>
> =Austin
>


From parrt at cs.usfca.edu  Wed Oct 17 17:40:12 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 17 Oct 2007 17:40:12 -0700
Subject: [antlr-interest] Status of Ruby binding?
In-Reply-To: <ff2bjp$uu$1@ger.gmane.org>
References: <ff0lr4$fki$1@ger.gmane.org> <ff2bjp$uu$1@ger.gmane.org>
Message-ID: <757A1302-6FCD-44B2-9F8C-2B6AD3DE5065@cs.usfca.edu>

Thanks...added bug
Ter

http://www.antlr.org:8888/browse/ANTLR-184

From fwierzbicki at gmail.com  Wed Oct 17 19:23:53 2007
From: fwierzbicki at gmail.com (Frank Wierzbicki)
Date: Wed, 17 Oct 2007 22:23:53 -0400
Subject: [antlr-interest] small bug in Python.g examples
Message-ID: <4dab5f760710171923ue82a313n5729cea2b9d2bc0c@mail.gmail.com>

Hi all,

I haven't posted here before -- My name is Frank Wierzbicki and I am
the lead of the Jython project.  We are looking at replacing Javacc
with Antlr in a future release.  While examining the Python.g grammar
in the examples I found a small bug that causes at least one valid
python file in Python 2.3 to choke.

Sorry if this is not the proper place for this, I didn't see an area
for the examples in the bug tracker.  The bug is in both the Java and
csparp Python.g grammars.  The Hex part of INT optionally adds 'l' |
'L' when this is already taken care of by LONGINT.  Here is a diff of
the fix:

--- Python.g	2007-08-13 18:33:04.000000000 -0400
+++ PythonFix.g	2007-10-17 22:01:44.000000000 -0400
@@ -490,7 +490,6 @@

 INT :   // Hex
         '0' ('x' | 'X') ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
-        ('l' | 'L')?
     |   // Octal
         '0' DIGITS*
     |   '1'..'9' DIGITS*

I can re-send as an attachment or create a bug in the tracker if needed.

Thanks!

-Frank Wierzbicki

From john at curioussymbols.com  Wed Oct 17 20:42:49 2007
From: john at curioussymbols.com (John Pye)
Date: Thu, 18 Oct 2007 13:42:49 +1000
Subject: [antlr-interest] unquoted strings in small line-based language
Message-ID: <4716D639.2060403@curioussymbols.com>

Hi all,

I'm trying to write a parser for a small language used in 3D modelling
of frame structures. The language uses commands that start on a new line
with a four-letter keyword, then their are usually numbers and other
keywords following on each line. Some commands are multiple lines, but
most are not.

The problem comes with some lines that allow unquoted string labels to
follow the keyword, for example in the following 'named load case'
section of my input file:

CASE     2 Gravity plus 10kg dist load + 1 tonne point load
NDLD     1     -0.004      0.016     -0.037      0.000      0.000      0.000
NDLD     2      0.004      0.016     -0.037      0.000      0.000      0.000

In the above, the stuff following 'CASE    2' (where 2 could be any
integer) is a free-text label and should not be tokenised, but needs to
be captured as a string in my target code.

How can I make the lexer *not* peer into this free-text and attempt to
identify tokens in it? How would I then catch the resulting string in my
parser?

I would be happy to send my full grammar if it helps. I am wanting to
create C or C++ code on top of the grammar, to pull out data from this
file and process and store it in another form.

Any comments or suggestions would be much appreciated.

Cheers
JP


From antlr at mirality.co.nz  Wed Oct 17 23:46:20 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 18 Oct 2007 19:46:20 +1300
Subject: [antlr-interest] unquoted strings in small line-based language
In-Reply-To: <4716D639.2060403@curioussymbols.com>
References: <4716D639.2060403@curioussymbols.com>
Message-ID: <20071018064646.75EF811EAB0@www.antlr.org>

At 16:42 18/10/2007, John Pye wrote:
 >How can I make the lexer *not* peer into this free-text and 
attempt
 >to identify tokens in it? How would I then catch the resulting
 >string in my parser?

The only way to do this is to do all the work in the 
lexer.  Remember that lexing is a completely independent step that 
occurs before parsing, so the parser cannot "inform" the lexer 
about any context.

Something like this would probably do the trick:

CASE
   :  'CASE' WSChar+ INTEGER WSChar+ (~'\n')*
   ;

fragment WSChar : ' ' | '\t';

WS : WSChar { $channel = HIDDEN; };

This will match the whole CASE line as a single token, which isn't 
ideal.  You could probably improve this by using the technique 
discussed on the Wiki for making a lexer rule output more than one 
token.


From OJAY78 at gmx.de  Thu Oct 18 07:35:48 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Thu, 18 Oct 2007 16:35:48 +0200
Subject: [antlr-interest] how can a rule recognize more than one literal?
Message-ID: <20071018143548.252370@gmx.net>

Hi,


I try to create a rule which recognizes dateformat strings like this :yyyy-mm-dd or yymmdd....

My rule for this:

dateFormatLiterals
	:( 'y' | 'M' | 'd' | 'h' | 'H' | 'm' | 's' | 'S' | '-' | '.' | '/' )*
	;

I am using the interpreter of ANTLRWorks for that but it does not work for more than one literal. When I type y then the interpreter will build the tree as expected but when I try yyyymmdd I will receive a MismatchTokenExecption.

Why is that so? I do not want to make for that case special tokens because I just need them in that form for this rule


Thanks for your help
-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kanns mit allen: http://www.gmx.net/de/go/multimessenger

From jimi at temporal-wave.com  Thu Oct 18 09:21:55 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 18 Oct 2007 09:21:55 -0700
Subject: [antlr-interest] how can a rule recognize more than one literal?
In-Reply-To: <20071018143548.252370@gmx.net>
References: <20071018143548.252370@gmx.net>
Message-ID: <BAY130-DS39EFD623D062829F4A674869E0@phx.gbl>

Without knowing what else you are trying to parse/lex, I think that you want
to either do this more precisely in the lexer, or less precisely in the
lexer (said the walrus ;-)) . I think we should have a mode where you can't
put literals in the parser and auto produce lexer tokens as it is too
confusing for freshmen. I think it is dangerous for anyone really, but
that's just my opinion. So, first thing is that until you know what you are
doing, don't use text strings for keywords in the parser, make tokens in the
LEXER, as this will tell you about lexing clashes better than the parser
will and you will 'see' what you are doing more clearly (this goes for
everyone ;-).

What I mean here is that the lexer can only recognize 'y' as the same token,
regardless of the context in which you (the human) see it in the parser
rules. So, if you are sure that there is no other text string that would
clash with this dateformat, then you can code it in the lexer as:

DATEFORM: 'yy' 'yy'? '-'? 'mm' '-'? 'dd' ;

And then the parser rules (they start with lower case letters) can just be:

Datestuff: DATEFORM ;

The problem here though is that if someone mistypes a date format then it is
the lexer that will barf on it, and really you don't want the lexer to do
anything but recognize ALL strings as some kind of token and then let the
parser spot syntax errors.

So, what I think you have here, is a semantic check, and that your lexer
just needs to recognize say WORDS. When the parser verifies that
syntactically you have something that ought to be a valid date format string
(WORD), then you implement some code to verify that the string is in fact a
correct one.

In other words, you want to do the higher lever checks higher up and as you
get closer to the lexer, do simpler an simpler things. I hope this makes
sense, as you are obviously new to ANTLR. If you are trying to do anything
serious and can afford to, I would buy Terence's ANTLR 3 book (see elsewhere
on the web site).

Hope this helps,

Jim

PS: Another thing I am seeing a lot from people lately is the use of
backtracking. This is really a prototyping tool as while it seems to make
ambiguities go away, it does so at the expense of lots of overhead and
probably masks that you could structure you grammar much more
precisely/neatly. Personally, I would recommend NOT using this option, other
than at the rule level if you can't think of a structure or suitable
predicate for an ambiguity.

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of OJAY78 at gmx.de
> Sent: Thursday, October 18, 2007 7:36 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] how can a rule recognize more than one
> literal?
> 
> Hi,
> 
> 
> I try to create a rule which recognizes dateformat strings like this
> :yyyy-mm-dd or yymmdd....
> 
> My rule for this:
> 
> dateFormatLiterals
> 	:( 'y' | 'M' | 'd' | 'h' | 'H' | 'm' | 's' | 'S' | '-' | '.' |
> '/' )*
> 	;
> 
> I am using the interpreter of ANTLRWorks for that but it does not work
> for more than one literal. When I type y then the interpreter will
> build the tree as expected but when I try yyyymmdd I will receive a
> MismatchTokenExecption.
> 
> Why is that so? I do not want to make for that case special tokens
> because I just need them in that form for this rule
> 
> 
> Thanks for your help
> --
> Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
> Der kanns mit allen: http://www.gmx.net/de/go/multimessenger
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.0/1076 - Release Date:
> 10/17/2007 7:53 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.0/1076 - Release Date: 10/17/2007
7:53 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071018/cbf1864b/attachment-0001.html 

From antlr-list at arizona-software.ch  Thu Oct 18 19:25:43 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Thu, 18 Oct 2007 19:25:43 -0700
Subject: [antlr-interest] AntlrWork problem
In-Reply-To: <47159D93.2080007@itee.uq.edu.au>
References: <47142DE0.20001@itee.uq.edu.au>
	<4173dc210710160127s1c5c8yfb7aecd1ebdad2d0@mail.gmail.com>
	<47159D93.2080007@itee.uq.edu.au>
Message-ID: <F6E4E9D7-01AC-4F6C-9030-11ADA6FA6BBB@arizona-software.ch>

I will investigate that because I probably don't release some objects  
between two debugging session. I will keep you informed.

Regards,

Jean

On Oct 16, 2007, at 10:28 PM, Peizhao Hu wrote:

> Thanks for reply.
>
> I agreed that you can run it in your command line, or even you  
> directly double click on the Jar file will give you enough memory  
> to run the antlrworks. however, it seems to me that the software  
> didn't release memory back to the system after using the memory for  
> compiling/generating codes.
>
> it becomes terrible slow after you run a complete debugging process.
>
> regards;
>
> Peizhao
>
>
> Simone Tripodi wrote:
>> Hi Peizhao!
>> I had the same problem that I resolved just downloading the
>> AntlrWork's jar archive, so open a shell and lunch the application
>> with the command
>> java -Xmx700m -jar antlrworks-1.1.3.jar
>> Well, 700m are too much, but you can increase the memory size as  
>> you like it :)
>> Have a nice day!
>> Simone
>> 2007/10/16, Peizhao Hu <peizhao at itee.uq.edu.au>:
>>> Hi all,
>>>
>>> has anyone experience a out-of-memory problem with AntlrWork?
>>>
>>> AntlrWork debug my file and generate AST tree smoothly in the first
>>> time. however, when you modify something and want to redebug it  
>>> again,
>>> it will compliant that not enough memory. So I have to close  
>>> (exit) the
>>> software and restart it again, everytime.
>>>
>>> I am wondering whether there is a memory leakage bug in the  
>>> software or
>>> something wrong with my grammar.
>>>
>>> --
>>> regards;
>>>
>>> Peizhao
>>>


From peizhao at itee.uq.edu.au  Thu Oct 18 22:03:13 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Fri, 19 Oct 2007 15:03:13 +1000
Subject: [antlr-interest] Error in generating tree walk
Message-ID: <47183A91.3020505@itee.uq.edu.au>

Hi All,

Could anyone tell me what is the following error message about?
I checked the parser and tree grammar without any error or warning message.

Not sure about the ruleRefRuleRoot.st??


[15:00:24] error(10):  internal error: 
/Users/phu/programming/Autonomic_CMS_Repository/antlr-grammars/TEDStemplateWalker.g 
: java.lang.IllegalArgumentException: Can't find template ruleRefRuleRoot.st
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGroup.java:485)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:372)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup.java:384)
org.antlr.codegen.CodeGenTreeWalker.getRuleElementST(CodeGenTreeWalker.java:135)
org.antlr.codegen.CodeGenTreeWalker.atom(CodeGenTreeWalker.java:1901)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1641)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1478)
org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:486)
org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:321)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)
org.antlr.Tool.processGrammar(Tool.java:347)
org.antlr.Tool.process(Tool.java:268)
org.antlr.works.generate.CodeGenerate.generate(Unknown Source)
org.antlr.works.generate.CodeGenerate.run(Unknown Source)
java.lang.Thread.run(Thread.java:613)



-- 
regards;

Peizhao

From antlr at mirality.co.nz  Fri Oct 19 01:46:55 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 19 Oct 2007 21:46:55 +1300
Subject: [antlr-interest] Error in generating tree walk
In-Reply-To: <47183A91.3020505@itee.uq.edu.au>
References: <47183A91.3020505@itee.uq.edu.au>
Message-ID: <20071019084705.195E811E9DA@www.antlr.org>

At 18:03 19/10/2007, Peizhao Hu wrote:
 >Could anyone tell me what is the following error message about?
 >I checked the parser and tree grammar without any error or 
warning
 >message.
 >
 >Not sure about the ruleRefRuleRoot.st??
 >
 >
 >[15:00:24] error(10):  internal error:
 >/Users/phu/programming/Autonomic_CMS_Repository/antlr-grammars/TEDS
 >templateWalker.g
 >: java.lang.IllegalArgumentException: Can't find template
 >ruleRefRuleRoot.st

Usually these kinds of errors occur when you've got some kind of 
illegal syntax in your grammar.

I *think* this one is where you've mixed an AST rewrite with a 
^-flagged left half.  (Or possibly it's the one where a rewrite is 
mixed with a !, but I think that one mentioned a different 
template.)


From relationalalgebra at gmail.com  Fri Oct 19 02:23:54 2007
From: relationalalgebra at gmail.com (G R)
Date: Fri, 19 Oct 2007 11:23:54 +0200
Subject: [antlr-interest] Imaginary tokens warning
Message-ID: <2ea6ad20710190223s4d57e2b5n80660dce3ac749a3@mail.gmail.com>

Hi,
Creating my grammar, I'm using some imaginary tokens to create nodes for my
AST.
The problem is that i got some warning with my imaginary tokens.
Here's a part of my grammar :

grammar RAGrammar;
...
divide    :    r1=relation Divide r2=relation
        ->^(Divide $r1 $r2);

AttributeList:;
RenameList:;
RenameAttribute:;

Project       :    '\\u03c0';
Select        :    '\\u03c3';
...

And the warning messages :
warning(208): RAGrammar.g:126:1: The following token definitions are
unreachable: RenameList,RenameAttribute

line 126 is the line defining RenameAttribute.
Trying to have a warning free program, I'v try to define a token section
giving the next grammar :

grammar RAGrammar;
...
divide    :    r1=relation Divide r2=relation
        ->^(Divide $r1 $r2);

tokens {
        AttributeList;
        RenameList;
        RenameAttribute;
}

Project       :    '\\u03c0';
Select        :    '\\u03c3';
...

This time i got the following errors :
error(100): RAGrammar.g:123:1: syntax error: antlr: RAGrammar.g:123:1:
unexpected token: tokens {
error(100): RAGrammar.g:124:15: syntax error: antlr: RAGrammar.g:124:15:
unexpected token: ;
error(100): RAGrammar.g:125:12: syntax error: antlr: RAGrammar.g:125:12:
unexpected token: ;
error(100): RAGrammar.g:126:17: syntax error: antlr: RAGrammar.g:126:17:
unexpected token: ;
error(106): RAGrammar.g:42:4: reference to undefined rule: divide
error(10):  internal error: org.antlr.tool.Message.toString(Message.java:124):
Assertion failed! Message ID 100 created but is not present in errorMsgIDs
or warningMsgIDs.

I'm a bit lost on this one. Could anyone give a hand ?
Thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/831cdd79/attachment.html 

From relationalalgebra at gmail.com  Fri Oct 19 02:27:10 2007
From: relationalalgebra at gmail.com (G R)
Date: Fri, 19 Oct 2007 11:27:10 +0200
Subject: [antlr-interest] Imaginary tokens warning
In-Reply-To: <2ea6ad20710190223s4d57e2b5n80660dce3ac749a3@mail.gmail.com>
References: <2ea6ad20710190223s4d57e2b5n80660dce3ac749a3@mail.gmail.com>
Message-ID: <2ea6ad20710190227k4ac735a0r1d8f93924b7cf8c8@mail.gmail.com>

Damn it.
Ok, I appologies... Just put the tokens section just after the option
section helps a lot ^^

Have a nice day :-)

2007/10/19, G R <relationalalgebra at gmail.com>:
>
> Hi,
> Creating my grammar, I'm using some imaginary tokens to create nodes for
> my AST.
> The problem is that i got some warning with my imaginary tokens.
> Here's a part of my grammar :
>
> grammar RAGrammar;
> ...
> divide    :    r1=relation Divide r2=relation
>         ->^(Divide $r1 $r2);
>
> AttributeList:;
> RenameList:;
> RenameAttribute:;
>
> Project       :    '\\u03c0';
> Select        :    '\\u03c3';
> ...
>
> And the warning messages :
> warning(208): RAGrammar.g:126:1: The following token definitions are
> unreachable: RenameList,RenameAttribute
>
> line 126 is the line defining RenameAttribute.
> Trying to have a warning free program, I'v try to define a token section
> giving the next grammar :
>
> grammar RAGrammar;
> ...
> divide    :    r1=relation Divide r2=relation
>         ->^(Divide $r1 $r2);
>
> tokens {
>         AttributeList;
>         RenameList;
>         RenameAttribute;
> }
>
> Project       :    '\\u03c0';
> Select        :    '\\u03c3';
> ...
>
> This time i got the following errors :
> error(100): RAGrammar.g:123:1: syntax error: antlr: RAGrammar.g:123:1:
> unexpected token: tokens {
> error(100): RAGrammar.g:124:15: syntax error: antlr: RAGrammar.g:124:15:
> unexpected token: ;
> error(100): RAGrammar.g:125:12: syntax error: antlr: RAGrammar.g:125:12:
> unexpected token: ;
> error(100): RAGrammar.g:126:17: syntax error: antlr: RAGrammar.g:126:17:
> unexpected token: ;
> error(106): RAGrammar.g:42:4: reference to undefined rule: divide
> error(10):  internal error: org.antlr.tool.Message.toString(Message.java:124):
> Assertion failed! Message ID 100 created but is not present in errorMsgIDs
> or warningMsgIDs.
>
> I'm a bit lost on this one. Could anyone give a hand ?
> Thanks.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/3c7545fb/attachment.html 

From peizhao at itee.uq.edu.au  Fri Oct 19 04:25:48 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Fri, 19 Oct 2007 21:25:48 +1000
Subject: [antlr-interest] A little suggestion for better use of this mailing
	list
Message-ID: <4718943C.1040407@itee.uq.edu.au>

Dear antlr.org maintainers:

could you put a search field for the mailing list archives in the 
www.antlr.org website? rather than browsing the list page by page. so 
people can search in the mailing for similar problems & solutions before 
posting to the list.

for your convenience, the google search HTML is pasted:

<form name=gs method=GET action="http://www.google.com/search">
<table>
<tr>
<td align=middle>
<img src="/scoop/images/google_25wht.gif">
</td>
<td align=middle>
   <input type=hidden value="www.antlr.org" name=as_sitesearch>
   <input type=hidden name=hs value=kN1>
   <input type=hidden name=hl value="en">
   <input type=hidden name=lr value="">

   <input type=hidden name=rls value="org.mozilla:en-US:official">
   <input type=text name=q size=41 maxlength=2048 value="" title="Search">
   <input type=submit name="btnG" value="Search">
</td>
</tr>
</table>
</form>


-- 
regards;

Peizhao

From peizhao at itee.uq.edu.au  Fri Oct 19 04:26:29 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Fri, 19 Oct 2007 21:26:29 +1000
Subject: [antlr-interest] Error in generating tree walk [and one little
 suggestion for Prof. Terence]
In-Reply-To: <200710191005.l9JA5BpL006117@filter1.itee.uq.edu.au>
References: <47183A91.3020505@itee.uq.edu.au>
	<200710191005.l9JA5BpL006117@filter1.itee.uq.edu.au>
Message-ID: <47189465.9080908@itee.uq.edu.au>

Thanks a lot!

for future reference to anyone else have the same problem.
My problem is that I have a rule written as

assignment_rule: equal^ assignment ;

so I changed back to

assignment_rule : ^(equal assignment) ;

the problem fixed.





regards;

Peizhao


Gavin Lambert wrote:
> At 18:03 19/10/2007, Peizhao Hu wrote:
>  >Could anyone tell me what is the following error message about?
>  >I checked the parser and tree grammar without any error or warning
>  >message.
>  >
>  >Not sure about the ruleRefRuleRoot.st??
>  >
>  >
>  >[15:00:24] error(10):  internal error:
>  >/Users/phu/programming/Autonomic_CMS_Repository/antlr-grammars/TEDS
>  >templateWalker.g
>  >: java.lang.IllegalArgumentException: Can't find template
>  >ruleRefRuleRoot.st
> 
> Usually these kinds of errors occur when you've got some kind of illegal 
> syntax in your grammar.
> 
> I *think* this one is where you've mixed an AST rewrite with a ^-flagged 
> left half.  (Or possibly it's the one where a rewrite is mixed with a !, 
> but I think that one mentioned a different template.)
> 

From corellian.c at gmail.com  Fri Oct 19 08:11:03 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Fri, 19 Oct 2007 17:11:03 +0200
Subject: [antlr-interest]  Help parsing floating point and integer numbers
Message-ID: <3edc2fbd0710190811v3e2c90b3l516620fc708c8e7b@mail.gmail.com>

Hi, I can't see where is the error, for parsing floating point and integer
numbers:

DecimalLiteral : ('0' | '1'..'9' '0'..'9'*) IntegerTypeSuffix? ;

fragment
IntegerTypeSuffix : ('l'|'L') ;

FloatingPointLiteral
    :   ('0'..'9')+ '.' ('0'..'9')* Exponent? FloatTypeSuffix?
    |   '.' ('0'..'9')+ Exponent? FloatTypeSuffix?
    |   ('0'..'9')+ Exponent FloatTypeSuffix?
    |   ('0'..'9')+ Exponent? FloatTypeSuffix
    ;

fragment
Exponent : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
FloatTypeSuffix : ('f'|'F'|'d'|'D') ;



The multiple alternatives problem is in the FloatingPointLiteral rule.

Thanks,
Cristian.

-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/815d3338/attachment-0001.html 

From trunkel at gmail.com  Fri Oct 19 08:20:56 2007
From: trunkel at gmail.com (troy runkel)
Date: Fri, 19 Oct 2007 11:20:56 -0400
Subject: [antlr-interest] Possible bug in C-target runtime function
	antlr3BitsetClone
Message-ID: <620da58c0710190820q485effd1x2d98c95d40b80abc@mail.gmail.com>

I believe I found a bug in the antlr3BitsetClone function in the
antlr3bitset.c module of the C-target runtime.  The function currently
calls

    /* Allocate memory for the bitset structure itself
     */
    bitset  = antlr3BitsetNew(8 * inSet->length);

which passes the number of bytes to allocate to the antlr3BitsetNew
function.  However the antlr3BitsetNew function expects the number of
BITS to allocate, so the function call should look like

    /* Allocate memory for the bitset structure itself
     */
    bitset  = antlr3BitsetNew(ANTLR3_BITSET_BITS * inSet->length);

The antlr3BitsetNew function rounds all requests for less than 512
bits to 512, so the current code will work as long as you always need
less than 512 bits.

Troy Runkel

From mjl at nova.edu  Fri Oct 19 09:07:59 2007
From: mjl at nova.edu (Michael Laszlo)
Date: Fri, 19 Oct 2007 12:07:59 -0400
Subject: [antlr-interest] lazy reading
Message-ID: <00aa01c8126a$3c8f5980$ed373489@GSCIS.NOVA.EDU>

The ANTLRReaderStream class is not very helpful for interactive, command-line applications since its constructor eagerly consumes input up to end-of-file. I wonder whether there is a lazy version of this class? If not, can anyone suggest a clean workaround? One approach might be to iteratively read input up to a delimiter (such as newline) into a string, wrap it in an ANTLRStreamString object, and hand it off to the lexer.

Thanks,
Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/0e1cdb63/attachment.html 

From Austin_Hastings at Yahoo.com  Fri Oct 19 09:20:56 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Fri, 19 Oct 2007 12:20:56 -0400
Subject: [antlr-interest] Proposal: Change Java templates to eliminate
 redundant casts based on labelType
Message-ID: <4718D968.50000@Yahoo.com>

I'm not sure who is maintaining the Java codegen templates, so this goes 
to everybody.

I'd like to eliminate the redundant cast warnings in the java templates.

Currently there is a labelType parameter, declared: labelType = "Token" 
which I think specifies a default value.

The labelType gets used in two ways. It can be a type in its own right, 
or a type name in a cast:

<labelType> next_token = (<labelType>) input.LT(1);

I think the type cast can be replaced by a 'function' that returns a 
cast if the labelType is set:

<if(labelType)>(<labelType>)<endif>

Similarly, the declaration side could be handled by replacing the 
"default value" by a condition:

<if(labelType)><labelType><else>Token<endif>

I believe this would clean up the redundant casts of LT(1) to (Token) 
that appear in nearly every generated rule.

=Austin


From simone.tripodi at gmail.com  Fri Oct 19 09:32:02 2007
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Fri, 19 Oct 2007 18:32:02 +0200
Subject: [antlr-interest] Spaces as separators
Message-ID: <4173dc210710190932o53117858p1c41d24482d11751@mail.gmail.com>

Hi All,
I've been developing a SPARQL grammar in ANTRL3, and it's complete at 90%.
I have a problem: I'm not able separate the end of a variable from the
begin of a subsequent one that starts without special symbols; these
variables are separated by a space, that I skip with the typical rule

 WS
	: (' '
	| '\t'
	| '\n'
	| '\r')+ { $channel=HIDDEN; }

 For example, a sequence of variables like:

?titole   cd:author

in the parse tree is grouped as

|
+ titolocd
|
+ autore

and it's totally wrong.

I attach the grammar and the testcase is:

PREFIX cd: <http://example.org/cd/>
SELECT ?title ?author ?year
FROM  <http://cd.com/listacd.ttl>
WHERE {?title cd:author ?author.
	    ?title cd:year ?year .
}

Could someone help me please? Any help is very appreciated.
Cheers,
Simone
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Sparql.g
Type: application/octet-stream
Size: 8295 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/6552825e/attachment.obj 

From Mike at leblanc-engineering.com  Fri Oct 19 10:33:14 2007
From: Mike at leblanc-engineering.com (Michael LeBlanc)
Date: Fri, 19 Oct 2007 13:33:14 -0400
Subject: [antlr-interest] tree grammars that output templates
Message-ID: <E6F6708D-5E81-4BBB-9CE3-1CAA924AB48B@leblanc-engineering.com>

Hello, everyone.  I'm trying to get up to speed with ANTLR.  At this  
time my big interest is multi-pass rigs that (re)write trees and  
finally output templates.  I'm having some trouble with my own  
efforts and similar problems with the v3 examples.  This leads me to  
suspect that I don't have in place some crucial piece of the puzzle.

I'm following the book (A Definitive ANTLR Reference) from page 222,  
the section Generating Bytecode Templates with a Tree Grammar.  I  
downloaded the files and ...

> $ java -Xmx200M org.antlr.Tool *.g
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
> Expr.g
> Gen.g
>
> $ javac Test.java
> Test.java:43: incompatible types
> found   : java.lang.Object
> required: org.antlr.stringtemplate.StringTemplate
>         StringTemplate output = r2.getTemplate();
>                                               ^
> Note: Some input files use unchecked or unsafe operations.
> Note: Recompile with -Xlint:unchecked for details.
> 1 error

Why does this happen?  Anyhow, I changed the offending line to read

	StringTemplate output = (StringTemplate)r2.getTemplate();

> $ javac Test.java
> Note: Some input files use unchecked or unsafe operations.
> Note: Recompile with -Xlint:unchecked for details.
>
> $ java Test
> 3+4*5
> ^D
> BR.recoverFromMismatchedToken
> line 0:-1 mismatched input '<EOF>' expecting NEWLINE
> Gen.g: node from line 0:0 required (...)+ loop did not match  
> anything at input 'EOF'
> Exception in thread "main" java.lang.NullPointerException
>         at Test.main(Test.java:44)

I am running on MacOSX 10.4.10 with

> java -version
> java version "1.5.0_07"
> Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_07-164)
> Java HotSpot(TM) Client VM (build 1.5.0_07-87, mixed mode)

Any ideas?

Mike

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/726d0096/attachment.html 

From gudnabrsam at yahoo.com  Fri Oct 19 15:38:21 2007
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Fri, 19 Oct 2007 15:38:21 -0700 (PDT)
Subject: [antlr-interest] ANTLR 3.0.1 build failure
In-Reply-To: <89C0335D-2B53-4DDA-A023-337B0B7B744E@wincent.com>
Message-ID: <120045.88289.qm@web55106.mail.re4.yahoo.com>

Hey all--I've been extremely behind on my email
lately, so I've just seen this.  I'll be happy to
figure out what's the matter with it, but for some
reason my P4 "Client" is freaking out when I try to
update.  It doesn't seem to recognize my laptop
anymore even though my local hostname hasn't changed:

Client 'mbenson.sackjackerel.antlr3' can only be used
from host 'sackjackerel.local'.

Any advice from more seasoned P4/OS X users out there?

Perforce and I really just don't get along... :|

TIA,
Matt 


--- Wincent Colaiuta <win at wincent.com> wrote:

> El 16/10/2007, a las 2:32, Terence Parr escribi?:
> 
> > On Oct 15, 2007, at 4:27 PM, Wincent Colaiuta
> wrote:
> >
> >> I've run into the exact same problem as Kenny did
> last month  
> >> trying to build ANTLR 3.0.1:
> >>
> >>
>
<http://www.antlr.org/pipermail/antlr-interest/2007-September/
> 
> >> 023639.html>
> >>
> >> Nobody replied back then, and I'm at the limit of
> my ant  
> >> troubleshooting skills. Anybody know how to fix
> this?
> >
> > Weird.  I guess you can try the old javac *.java
> in the dirs ;)
> > Ter
> 
> I found out a bit more by passing the "-v" (verbose)
> switch to "ant  
> build". If you look at the list of files it says it
> will compile  
> (pasted below), you can see that the last 13 are
> duplicates. I know  
> absolutely nothing about Ant and the XML build file,
> so I tried a  
> cave-man troubleshooting technique: moving the
> duplicate files out of  
> the way. Moving the files in the "codegen"
> subdirectory (the ones at  
> the end of the list) didn't work and just yielded
> different errors,  
> but moving the other duplicates out of the way (the
> ones in "src/org/ 
> antlr/tool" and "src/org/antlr/codegen") made the
> build succeed.
> 
> So for now I've got a working build (no build
> errors, but of dubious  
> status seeing as I don't know what other
> side-effects might have  
> arisen due to my kludge), and hopefully someone who
> knows a bit about  
> Ant can make whatever changes are necessary to fix
> the build.xml file.
> 
>    [myjavac] Files to be compiled:
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/Tool.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/DFA.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/analysis/DFAOptimizer.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/DFAState.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/analysis/DecisionProbe.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/Label.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/analysis/LookaheadSet.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/NFA.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/ 
> NFAConfiguration.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/NFAContext.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/ 
> NFAConversionThread.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/NFAState.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/ 
> NFAToDFAConverter.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/ 
> RuleClosureTransition.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/ 
> SemanticContext.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/State.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/analysis/StateCluster.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/analysis/Transition.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> 
> ACyclicDFACodeGenerator.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> 
> ActionTranslatorLexer.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/CPPTarget.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/CSharpTarget.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/CTarget.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> 
> CodeGenTreeWalker.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> 
> CodeGenTreeWalkerTokenTypes.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/codegen/CodeGenerator.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/JavaTarget.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/ObjCTarget.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/PythonTarget.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/RubyTarget.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/codegen/Target.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/Barrier.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/BitSet.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/IntArrayList.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/IntSet.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/Interval.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/IntervalSet.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/MutableInteger.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/OrderedHashSet.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/misc/Utils.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/BaseTest.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/test/DebugTestAutoAST.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> DebugTestRewriteAST.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/ErrorQueue.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestASTConstruction.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestAttributes.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestAutoAST.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestCharDFAConversion.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestCommonTreeNodeStream.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/test/TestDFAConversion.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestDFAMatching.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestInterpretedLexing.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestInterpretedParsing.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestIntervalSet.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestJavaCodeGeneration.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestLexer.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestMessages.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestNFAConstruction.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestRewriteAST.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestRewriteTemplates.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestSemanticPredicateEvaluation.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestSemanticPredicates.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestSets.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestSymbolDefinitions.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestSyntacticPredicateEvaluation.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestTemplates.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestTokenRewriteStream.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/test/TestTreeNodeStream.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestTreeParsing.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/test/TestTreeWizard.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/test/ 
> TestUnBufferedTreeNodeStream.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/tool/ANTLRErrorListener.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/ANTLRLexer.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/ANTLRParser.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/ANTLRTokenTypes.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/tool/ANTLRTreePrinter.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> ANTLRTreePrinterTokenTypes.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> ActionAnalysisLexer.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> AssignTokenTypesWalker.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> AssignTokenTypesWalkerTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/Attribute.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/AttributeScope.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> BuildDependencyGenerator.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/DOTGenerator.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> DefineGrammarItemsWalker.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> DefineGrammarItemsWalkerTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/ErrorManager.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/FASerializer.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/Grammar.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/GrammarAST.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> GrammarAnalysisAbortedMessage.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> GrammarDanglingStateMessage.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> GrammarInsufficientPredicatesMessage.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> GrammarNonDeterminismMessage.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/GrammarReport.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/GrammarSanity.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> GrammarSemanticsMessage.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> GrammarSyntaxMessage.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> GrammarUnreachableAltsMessage.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/Interp.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/Interpreter.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> LeftRecursionCyclesMessage.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/Message.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/NFAFactory.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/tool/NameSpaceChecker.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> NonRegularDecisionMessage.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/RandomPhrase.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> RecursionOverflowMessage.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/Rule.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/RuleLabelScope.java
>    [myjavac]    
> /antlr-3.0.1/src/org/antlr/tool/ToolMessage.java
>    [myjavac]    
>
/antlr-3.0.1/src/org/antlr/tool/TreeToNFAConverter.java
>    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/ 
> TreeToNFAConverterTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/codegen/ANTLRLexer.java
>    [myjavac]    
> /antlr-3.0.1/codegen/ANTLRParser.java
>    [myjavac]    
> /antlr-3.0.1/codegen/ANTLRTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/codegen/ANTLRTreePrinter.java
>    [myjavac]    
> /antlr-3.0.1/codegen/ANTLRTreePrinterTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/codegen/AssignTokenTypesWalker.java
>    [myjavac]     /antlr-3.0.1/codegen/ 
> AssignTokenTypesWalkerTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/codegen/CodeGenTreeWalker.java
>    [myjavac]    
>
/antlr-3.0.1/codegen/CodeGenTreeWalkerTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/codegen/DefineGrammarItemsWalker.java
>    [myjavac]     /antlr-3.0.1/codegen/ 
> DefineGrammarItemsWalkerTokenTypes.java
>    [myjavac]    
> /antlr-3.0.1/codegen/TreeToNFAConverter.java
>    [myjavac]    
>
/antlr-3.0.1/codegen/TreeToNFAConverterTokenTypes.java
> 
> Wincent
> 
> 
> 
> 


__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 

From peizhao at itee.uq.edu.au  Fri Oct 19 16:08:31 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Sat, 20 Oct 2007 09:08:31 +1000
Subject: [antlr-interest] Help parsing floating point and integer numbers
In-Reply-To: <3edc2fbd0710190811v3e2c90b3l516620fc708c8e7b@mail.gmail.com>
References: <3edc2fbd0710190811v3e2c90b3l516620fc708c8e7b@mail.gmail.com>
Message-ID: <471938EF.7070604@itee.uq.edu.au>

try to combine the last two matches together

FloatingPointLiteral
   : (Sign)?  ('0'..'9')+ '.' ('0'..'9')* Exponent? FloatTypeSuffix?
   | (Sign)?  '.' ('0'..'9')+ Exponent? FloatTypeSuffix?
   | (Sign)?  ('0'..'9')+ Exponent? FloatTypeSuffix?
   ;

it works for my grammar, where Sign rule is just:

Sign : ('+'|'-') ;




regards;

Peizhao


Cristian Peraferrer wrote:
> Hi, I can't see where is the error, for parsing floating point and 
> integer numbers:
> 
> DecimalLiteral : ('0' | '1'..'9' '0'..'9'*) IntegerTypeSuffix? ;
> 
> fragment
> IntegerTypeSuffix : ('l'|'L') ;
> 
> FloatingPointLiteral
>     :   ('0'..'9')+ '.' ('0'..'9')* Exponent? FloatTypeSuffix?
>     |   '.' ('0'..'9')+ Exponent? FloatTypeSuffix?
>     |   ('0'..'9')+ Exponent FloatTypeSuffix?
>     |   ('0'..'9')+ Exponent? FloatTypeSuffix
>     ;
> 
> fragment
> Exponent : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
> 
> fragment
> FloatTypeSuffix : ('f'|'F'|'d'|'D') ;
> 
> 
> 
> The multiple alternatives problem is in the FloatingPointLiteral rule.
> 
> Thanks,
> Cristian.
> 
> -- 
> GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch 
> <mailto:corellian at swissjabber.ch>

From jimi at temporal-wave.com  Fri Oct 19 17:06:16 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 19 Oct 2007 17:06:16 -0700
Subject: [antlr-interest] ANTLR 3.0.1 build failure
In-Reply-To: <120045.88289.qm@web55106.mail.re4.yahoo.com>
References: <89C0335D-2B53-4DDA-A023-337B0B7B744E@wincent.com>
	<120045.88289.qm@web55106.mail.re4.yahoo.com>
Message-ID: <BAY130-DS339023CC16B270AEAA7CB86980@phx.gbl>

You could edit out your client and remove the host entry so that it does not
restrict the client usage. But, I suspect that you have change your uname
(uname -a) either by specifying a domain name now or directly. Whateever
uname says your machine is called, change the host in your p4 client to
match. Issue p4 client at the command line to edit this with vi (P4EDIT env
var changes the editor though).

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Matt Benson
> Sent: Friday, October 19, 2007 3:38 PM
> To: Antlr Interest; antlr-dev list
> Subject: Re: [antlr-interest] ANTLR 3.0.1 build failure
> 
> Hey all--I've been extremely behind on my email
> lately, so I've just seen this.  I'll be happy to
> figure out what's the matter with it, but for some
> reason my P4 "Client" is freaking out when I try to
> update.  It doesn't seem to recognize my laptop
> anymore even though my local hostname hasn't changed:
> 
> Client 'mbenson.sackjackerel.antlr3' can only be used
> from host 'sackjackerel.local'.
> 
> Any advice from more seasoned P4/OS X users out there?
> 
> Perforce and I really just don't get along... :|
> 
> TIA,
> Matt
> 
> 
> --- Wincent Colaiuta <win at wincent.com> wrote:
> 
> > El 16/10/2007, a las 2:32, Terence Parr escribi?:
> >
> > > On Oct 15, 2007, at 4:27 PM, Wincent Colaiuta
> > wrote:
> > >
> > >> I've run into the exact same problem as Kenny did
> > last month
> > >> trying to build ANTLR 3.0.1:
> > >>
> > >>
> >
> <http://www.antlr.org/pipermail/antlr-interest/2007-September/
> >
> > >> 023639.html>
> > >>
> > >> Nobody replied back then, and I'm at the limit of
> > my ant
> > >> troubleshooting skills. Anybody know how to fix
> > this?
> > >
> > > Weird.  I guess you can try the old javac *.java
> > in the dirs ;)
> > > Ter
> >
> > I found out a bit more by passing the "-v" (verbose)
> > switch to "ant
> > build". If you look at the list of files it says it
> > will compile
> > (pasted below), you can see that the last 13 are
> > duplicates. I know
> > absolutely nothing about Ant and the XML build file,
> > so I tried a
> > cave-man troubleshooting technique: moving the
> > duplicate files out of
> > the way. Moving the files in the "codegen"
> > subdirectory (the ones at
> > the end of the list) didn't work and just yielded
> > different errors,
> > but moving the other duplicates out of the way (the
> > ones in "src/org/
> > antlr/tool" and "src/org/antlr/codegen") made the
> > build succeed.
> >
> > So for now I've got a working build (no build
> > errors, but of dubious
> > status seeing as I don't know what other
> > side-effects might have
> > arisen due to my kludge), and hopefully someone who
> > knows a bit about
> > Ant can make whatever changes are necessary to fix
> > the build.xml file.
> >
> >    [myjavac] Files to be compiled:
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/Tool.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/DFA.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/analysis/DFAOptimizer.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/DFAState.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/analysis/DecisionProbe.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/Label.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/analysis/LookaheadSet.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/NFA.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/
> > NFAConfiguration.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/NFAContext.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/
> > NFAConversionThread.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/NFAState.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/
> > NFAToDFAConverter.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/
> > RuleClosureTransition.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/
> > SemanticContext.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/State.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/analysis/StateCluster.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/analysis/Transition.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> >
> > ACyclicDFACodeGenerator.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> >
> > ActionTranslatorLexer.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/CPPTarget.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/CSharpTarget.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/CTarget.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> >
> > CodeGenTreeWalker.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/codegen/
> >
> > CodeGenTreeWalkerTokenTypes.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/codegen/CodeGenerator.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/JavaTarget.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/ObjCTarget.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/PythonTarget.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/RubyTarget.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/codegen/Target.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/Barrier.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/BitSet.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/IntArrayList.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/IntSet.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/Interval.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/IntervalSet.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/MutableInteger.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/OrderedHashSet.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/misc/Utils.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/BaseTest.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/test/DebugTestAutoAST.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > DebugTestRewriteAST.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/ErrorQueue.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestASTConstruction.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestAttributes.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestAutoAST.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestCharDFAConversion.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestCommonTreeNodeStream.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/test/TestDFAConversion.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestDFAMatching.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestInterpretedLexing.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestInterpretedParsing.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestIntervalSet.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestJavaCodeGeneration.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestLexer.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestMessages.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestNFAConstruction.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestRewriteAST.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestRewriteTemplates.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestSemanticPredicateEvaluation.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestSemanticPredicates.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestSets.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestSymbolDefinitions.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestSyntacticPredicateEvaluation.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestTemplates.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestTokenRewriteStream.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/test/TestTreeNodeStream.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestTreeParsing.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/test/TestTreeWizard.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/test/
> > TestUnBufferedTreeNodeStream.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/tool/ANTLRErrorListener.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/ANTLRLexer.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/ANTLRParser.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/ANTLRTokenTypes.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/tool/ANTLRTreePrinter.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > ANTLRTreePrinterTokenTypes.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > ActionAnalysisLexer.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > AssignTokenTypesWalker.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > AssignTokenTypesWalkerTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/Attribute.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/AttributeScope.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > BuildDependencyGenerator.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/DOTGenerator.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > DefineGrammarItemsWalker.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > DefineGrammarItemsWalkerTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/ErrorManager.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/FASerializer.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/Grammar.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/GrammarAST.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > GrammarAnalysisAbortedMessage.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > GrammarDanglingStateMessage.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > GrammarInsufficientPredicatesMessage.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > GrammarNonDeterminismMessage.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/GrammarReport.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/GrammarSanity.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > GrammarSemanticsMessage.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > GrammarSyntaxMessage.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > GrammarUnreachableAltsMessage.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/Interp.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/Interpreter.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > LeftRecursionCyclesMessage.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/Message.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/NFAFactory.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/tool/NameSpaceChecker.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > NonRegularDecisionMessage.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/RandomPhrase.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > RecursionOverflowMessage.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/Rule.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/RuleLabelScope.java
> >    [myjavac]
> > /antlr-3.0.1/src/org/antlr/tool/ToolMessage.java
> >    [myjavac]
> >
> /antlr-3.0.1/src/org/antlr/tool/TreeToNFAConverter.java
> >    [myjavac]     /antlr-3.0.1/src/org/antlr/tool/
> > TreeToNFAConverterTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/ANTLRLexer.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/ANTLRParser.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/ANTLRTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/ANTLRTreePrinter.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/ANTLRTreePrinterTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/AssignTokenTypesWalker.java
> >    [myjavac]     /antlr-3.0.1/codegen/
> > AssignTokenTypesWalkerTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/CodeGenTreeWalker.java
> >    [myjavac]
> >
> /antlr-3.0.1/codegen/CodeGenTreeWalkerTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/DefineGrammarItemsWalker.java
> >    [myjavac]     /antlr-3.0.1/codegen/
> > DefineGrammarItemsWalkerTokenTypes.java
> >    [myjavac]
> > /antlr-3.0.1/codegen/TreeToNFAConverter.java
> >    [myjavac]
> >
> /antlr-3.0.1/codegen/TreeToNFAConverterTokenTypes.java
> >
> > Wincent
> >
> >
> >
> >
> 
> 
> __________________________________________________
> Do You Yahoo!?
> Tired of spam?  Yahoo! Mail has the best spam protection around
> http://mail.yahoo.com
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.1/1079 - Release Date:
> 10/19/2007 5:10 AM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.1/1079 - Release Date: 10/19/2007
5:10 AM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/b714c11a/attachment-0001.html 

From r.mark.volkmann at gmail.com  Fri Oct 19 17:44:27 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 19 Oct 2007 19:44:27 -0500
Subject: [antlr-interest] ANTLRWorks debugger
Message-ID: <f0fcc6820710191744t45c4390eya7e6cb4a47cbb47c@mail.gmail.com>

Can the ANTLRWorks debugger set a breaks at specific rules? I thought
perhaps "Break on Location" did that, but I can't figure out how to
specify the rule where I'd like to break.

-- 
R. Mark Volkmann
Object Computing, Inc.

From jimi at temporal-wave.com  Fri Oct 19 07:52:22 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 19 Oct 2007 07:52:22 -0700
Subject: [antlr-interest] A little suggestion for better use of this
	mailing	list
In-Reply-To: <4718943C.1040407@itee.uq.edu.au>
References: <4718943C.1040407@itee.uq.edu.au>
Message-ID: <BAY130-DS3F8E0A2FCA1DA03A40203869F0@phx.gbl>

Well, this is what the Search box on the front page does I believe! :-)


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Peizhao Hu
> Sent: Friday, October 19, 2007 4:26 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] A little suggestion for better use of this
> mailing list
> 
> Dear antlr.org maintainers:
> 
> could you put a search field for the mailing list archives in the
> www.antlr.org website? rather than browsing the list page by page. so
> people can search in the mailing for similar problems & solutions
> before
> posting to the list.
> 
> for your convenience, the google search HTML is pasted:
> 
> <form name=gs method=GET action="http://www.google.com/search">
> <table>
> <tr>
 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.1/1079 - Release Date: 10/19/2007
5:10 AM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/13ca2787/attachment.html 

From matthieu at offthelip.org  Fri Oct 19 22:39:19 2007
From: matthieu at offthelip.org (Matthieu Riou)
Date: Fri, 19 Oct 2007 22:39:19 -0700
Subject: [antlr-interest] IllegalArgumentException: Can't find template
	wildcardTrack.st
Message-ID: <fbdc6a970710192239w2418ed68pa9ecd8fd5b3f23b@mail.gmail.com>

Hi,

I have a rule in my grammar that must accept pretty much anything inside its
body. The idea is to get that block of code and delegate to some interpreter
external to the main language (allowing the inclusion of Javascript or Ruby
code for example).

The rule is the following (I know, this probably won't work just like this
especially if the function body has curly braces but it's just a start):

function:    'function' f=ID '(' ID? (',' ID)* ')' '{' (.*) '}' ->
^(FUNCTION $f);

Anytime I provide a rewrite rule (whatever it is) I get the following
exception:

error(10):  internal error:
/home/mriou/dev/projects/ode/simpel/src/main/antlr/org/apache/ode/simpel/antlr/SimPEL.g
: java.lang.IllegalArgumentException: Can't find template wildcardTrack.st
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(Unknown Source)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(Unknown Source)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(Unknown Source)
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(Unknown Source)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(Unknown Source)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(Unknown Source)
org.antlr.codegen.CodeGenTreeWalker.getTokenElementST(CodeGenTreeWalker.java
:160)
org.antlr.codegen.CodeGenTreeWalker.getWildcardST(CodeGenTreeWalker.java
:113)
org.antlr.codegen.CodeGenTreeWalker.atom(CodeGenTreeWalker.java:2034)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1641)
org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
org.antlr.codegen.CodeGenTreeWalker.ebnf(CodeGenTreeWalker.java:1804)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1637)
org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:486)
org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:333)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)
org.antlr.Tool.processGrammar(Tool.java:347)
org.antlr.Tool.process(Tool.java:268)

Any idea?

Thanks!
Matthieu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071019/2737d60b/attachment.html 

From mail at ghost23.de  Sat Oct 20 07:28:55 2007
From: mail at ghost23.de (Sven Busse)
Date: Sat, 20 Oct 2007 16:28:55 +0200
Subject: [antlr-interest] distinction between newline and ws
Message-ID: <000001c81325$8ba0ad60$9231fea9@Werkbank>

hello,

 

i am very new to antlr and language recognition. So i bought the book

from Terence Parr and now i am currently working through the first

example, the calculator. And unfortunately already, i don't understand

something. The grammar looks like this:

 

grammar Expr;

 

prog  :     stat+ ;

 

stat  :     expr NEWLINE

      |     ID '=' expr NEWLINE

      |     NEWLINE

      ;

 

expr  :     multExpr (('+'|'-') multExpr)* ;

 

multExpr:   atom ('*' atom)* ;

 

atom  :     INT

      |     ID

      |     '(' expr ')'

      ;

 

ID    :     ('a'..'z'|'A'..'Z')+;

INT   :     '0'..'9'+;

NEWLINE     :     '\r'? '\n';

WS    :     (' '|'\t'|'\n'|'\r')+ {skip();};

 

My Question now is, how does antrl know, that "\n" should match to a NEWLINE
instead

of WS (which would mean, it would skip it)? I would have thought, this
grammar is

ambiguous, but apparantly, it isn't. Why not?

 

Thank you

Sven

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071020/bdf67695/attachment.html 

From geoff_hendrey at yahoo.com  Sat Oct 20 16:45:07 2007
From: geoff_hendrey at yahoo.com (Geoff hendrey)
Date: Sat, 20 Oct 2007 16:45:07 -0700 (PDT)
Subject: [antlr-interest] seeking advice for a good approach
Message-ID: <724881.12900.qm@web31811.mail.mud.yahoo.com>


Hi,

I am building an AST using the "->" functionality in the grammar file.

The AST contains various types of operator nodes that operate against two operands (child operand nodes).

For example, a logical AND operation, which has a left-hand-side operand and a right-hand-side operand.

I want to examine each AST node, and insure that both the child nodes (the operands) are compatible with the operation being performed on them. 

Here is the approach I am going to take, but maybe some ANTLR genius knows a better way.

So my plan is to extend CommonTree, to say TypeCheckingTree. When  new TypeCheckingTree is constructed, I'll record the type of the operator, if the node is an operator. Then when addChild is called, I will throw an Exception if the child (operand) is incompatible. For example if the node is 'AND' and a child is the literal  '3.14159', an Exception will be thrown since floating point numbers are not acceptable operands to a boolean 'AND' function.

Right now, the only way I can think of to record the operator type, is to make some function like this, which would be called from the constructor of TypeCheckingTree. This will allow the node to know it's type, and to check the type of child nodes (operands) for compatibility :

public String getType(Token t){
    String astNodeName = t.toString();
    if(astNodeName.equals("AND")){
       return "BOOLEAN"
    }else if(astNodeName.equals("OR")){
       return "BOOLEAN"
    }else if(astNodeName.equals("FLOAT")){
       return "NUMERIC";
    }//etc,etc.
}

The above seems really flaky. Especially since "etc, etc" is a really long list, and has to be maintained. It would be better if somehow I could assign a  type  (or somehow attach meta data) to an AST node, from inside the grammar file. Relying on String comparisons against the node's name is pretty weak. 

I'm hoping I am an ignorant newbie and someone will slap me straight!!!

-g
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071020/713bb604/attachment.html 

From Austin_Hastings at Yahoo.com  Sat Oct 20 17:02:15 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sat, 20 Oct 2007 20:02:15 -0400
Subject: [antlr-interest] seeking advice for a good approach
In-Reply-To: <724881.12900.qm@web31811.mail.mud.yahoo.com>
References: <724881.12900.qm@web31811.mail.mud.yahoo.com>
Message-ID: <471A9707.7030907@Yahoo.com>

Geoff,

I think that's the purpose of the "tree grammar" stuff. In the first 
(syntax) grammar, you convert a parse tree into an AST. The point of the 
AST is to be free of parse-tree stuff, totally clear as to purpose, and 
easy to work with.

Consider the various things you had to do to implement operator 
precedence in your grammar: an expression is an and_expr, an and_expr is 
one or more or_expr, an or_expr is one or more plus_expr, a plus_expr is 
one or more mult_expr, etc. That goes away once you have your AST, 
because you build your AST so that the tree structure encodes the order 
of evaluation.

Your "semantic" parser (tree grammar) just has one rule for expr: an 
expr is a primary, or an expr + an operator + an expr. An operator is 
any of (+,-,/,*,%,^,=,etc.) Because the tree itself will specify order, 
your semantic parse can be really simple on this score. But what are you 
going to DO?

I think you'll be faced with several semantic passes, depending on your 
target: a compiler will have maybe more than an interpreter. A 
"compiling interpreter" might be the worst possible case. There's some 
disagreement whether you should use a tree grammar, or use a 
tree-walking code module (the Visitor pattern gets mentioned here, but 
it's not the only way).

You specifically mentioned type checking of operands. My solution to 
that is to build a map<node,info> for the expressions, and then use the 
sub-expressions to determine the type of operator to be called. Because 
the tree objects can serve as keys in a map, you don't have to extend 
the commontree class. You can attach the data via some other mechanism, 
such as your symbol table.

Please keep in mind that depending on the complexity of the language, 
you're going to want both "centralized" and "decentralized" data 
storage. You don't want to encode the info into every node, or every 
token, but the tokens or nodes might be the right source of location 
data -- an identifier 'foo' in one place isn't necessarily the same as 
'foo' in another place.

Another advantage of this approach is that you get away from throwing 
exceptions whenever your parser is unhappy. For error diagnosis and 
recovery, I'm taking the approach that my syntactic parser should accept 
as much as possible, and that I'll generate hopefully-helpful 
diagnostics from later stages. I think "There is a type incompatibility 
between the left- and right- sides of the '*' operator on line 262" is a 
better message than "Parse failed at line 262".

=Austin



Geoff hendrey wrote:
>
> Hi,
>
> I am building an AST using the "->" functionality in the grammar file.
>
> The AST contains various types of operator nodes that operate against 
> two operands (child operand nodes).
>
> For example, a logical AND operation, which has a left-hand-side 
> operand and a right-hand-side operand.
>
> I want to examine each AST node, and insure that both the child nodes 
> (the operands) are compatible with the operation being performed on them.
>
> Here is the approach I am going to take, but maybe some ANTLR genius 
> knows a better way.
>
> So my plan is to extend CommonTree, to say TypeCheckingTree. When  new 
> TypeCheckingTree is constructed, I'll record the type of the operator, 
> if the node is an operator. Then when addChild is called, I will throw 
> an Exception if the child (operand) is incompatible. For example if 
> the node is 'AND' and a child is the literal  '3.14159', an Exception 
> will be thrown since floating point numbers are not acceptable 
> operands to a boolean 'AND' function.
>
> Right now, the only way I can think of to record the operator type, is 
> to make some function like this, which would be called from the 
> constructor of TypeCheckingTree. This will allow the node to know it's 
> type, and to check the type of child nodes (operands) for compatibility :
>
> public String getType(Token t){
>     String astNodeName = t.toString();
>     if(astNodeName.equals("AND")){
>        return "BOOLEAN"
>     }else if(astNodeName.equals("OR")){
>        return "BOOLEAN"
>     }else if(astNodeName.equals("FLOAT")){
>        return "NUMERIC";
>     }//etc,etc.
> }
>
> The above seems really flaky. Especially since "etc, etc" is a really 
> long list, and has to be maintained. It would be better if somehow I 
> could assign a  type  (or somehow attach meta data) to an AST node, 
> from inside the grammar file. Relying on String comparisons against 
> the node's name is pretty weak.
>
> I'm hoping I am an ignorant newbie and someone will slap me straight!!!
>
> -g
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.15.3/1081 - Release Date: 10/19/2007 5:41 PM
>   


From antlr at smabber.com  Sat Oct 20 17:21:43 2007
From: antlr at smabber.com (S West)
Date: Sun, 21 Oct 2007 01:21:43 +0100
Subject: [antlr-interest] Problem using string literals
Message-ID: <471A9B97.9080300@smabber.com>

I'm using ANTLR 3.0.1, ANTLRWorks 1.1.3 and this is my first post here.  Hi all.

I've reduced to a minimal grammar that replicates my problem:


grammar Test;

test		:	(LETTER | '-')+
		;

unrelated_rule	:	'BONGO: ' LETTER;

LETTER		:	('A'..'Z');



When I choose the main rule to be test and give the input:
ONE-TWO-THREE

The whole input is consumed by test, as expected.

When I choose the main rule to be test and give the input:
ONE-BONGO-TWO-THREE

The output window says 'line:1:9 mismatched character '-' expecting ':'

Out of the input only
ONE-WO-THREE
is consumed.

I do not understand why this is happening, the literal 'BONGO: ' is in a totally separate and 
unreferred-to parser rule.

Please could someone let know me know why this occurs, and hopefully how I can rewrite to avoid it.

Thank you kindly,
Simon.

From clifford.heath at gmail.com  Sat Oct 20 17:45:09 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sun, 21 Oct 2007 10:45:09 +1000
Subject: [antlr-interest] distinction between newline and ws
In-Reply-To: <000001c81325$8ba0ad60$9231fea9@Werkbank>
References: <000001c81325$8ba0ad60$9231fea9@Werkbank>
Message-ID: <ffe7en$8tl$1@ger.gmane.org>

Sven Busse wrote:
> something. The grammar looks like this:
> grammar Expr;
...
> NEWLINE     :     '\r'? '\n';
> WS    :     (' '|'\t'|'\n'|'\r')+ {skip();};
> My Question now is, how does antrl know, that ?\n? should match to a 
> NEWLINE instead

I have some understanding of this, but I'm still struggling with
a similar case also.

Your grammar parses the string "a=3\n" just fine, but
the string "a=3 \n" (with space) doesn't parse... why?

If I redefine NEWLINE as (' '|'\t')* '\r'? '\n'
it doesn't parse either form... why?

> I would have thought, this grammar is ambiguous, but apparantly, it isn?t. Why not?

Lexical rules are often ambiguous, and all rules always apply
regardless of the grammar rule context (this is the answer to
Simon West's question). The Lexer is supposed to choose the
longest token that matches the current input... but I don't
see that principle applying here.

Clifford Heath.


From josephg at cse.unsw.edu.au  Sat Oct 20 17:58:27 2007
From: josephg at cse.unsw.edu.au (Joseph Gentle)
Date: Sun, 21 Oct 2007 10:58:27 +1000
Subject: [antlr-interest] distinction between newline and ws
In-Reply-To: <000001c81325$8ba0ad60$9231fea9@Werkbank>
References: <000001c81325$8ba0ad60$9231fea9@Werkbank>
Message-ID: <471AA433.7040605@cse.unsw.edu.au>

[forgot to reply all]

I can't find the documentation for it, but ANTLR does seem to have token 
matching precedence rules.

Have a play with it - write a tokeniser like this:

test : ( TEXT | NEWLINE | WS )*;
TEXT : 'x'+;

NEWLINE     :     '\r'? '\n';

WS    :     (' '|'\t'|'\n'|'\r')+;


and pass it some strings with newlines and whitespace and whatnot. Have 
a look at the token stream generated. I've got a feeling that antlr 
prefers to match earlier tokens to later tokens. Using your rules, I 
expect that a line of text followed immediately by a newline will become 
TEXT NEWLINE whereas a line of text followed by whitespace then a 
newline will be TEXT WS. This is because by default the + in the WS rule 
is greedy and will consume the newline as well, if it can.

Have a play!

-J


Sven Busse wrote:
>
> hello,
>
>  
>
> i am very new to antlr and language recognition. So i bought the book
>
> from Terence Parr and now i am currently working through the first
>
> example, the calculator. And unfortunately already, i don't understand
>
> something. The grammar looks like this:
>
>  
>
> grammar Expr;
>
>  
>
> prog  :     stat+ ;
>
>  
>
> stat  :     expr NEWLINE
>
>       |     ID '=' expr NEWLINE
>
>       |     NEWLINE
>
>       ;
>
>  
>
> expr  :     multExpr (('+'|'-') multExpr)* ;
>
>  
>
> multExpr:   atom ('*' atom)* ;
>
>  
>
> atom  :     INT
>
>       |     ID
>
>       |     '(' expr ')'
>
>       ;
>
>  
>
> ID    :     ('a'..'z'|'A'..'Z')+;
>
> INT   :     '0'..'9'+;
>
> NEWLINE     :     '\r'? '\n';
>
> WS    :     (' '|'\t'|'\n'|'\r')+ {skip();};
>
>  
>
> My Question now is, how does antrl know, that "\n" should match to a 
> NEWLINE instead
>
> of WS (which would mean, it would skip it)? I would have thought, this 
> grammar is
>
> ambiguous, but apparantly, it isn't. Why not?
>
>  
>
> Thank you
>
> Sven
>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071021/686b289d/attachment-0001.html 

From clifford.heath at gmail.com  Sat Oct 20 18:30:19 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sun, 21 Oct 2007 11:30:19 +1000
Subject: [antlr-interest] distinction between newline and ws
In-Reply-To: <ffe7en$8tl$1@ger.gmane.org>
References: <000001c81325$8ba0ad60$9231fea9@Werkbank>
	<ffe7en$8tl$1@ger.gmane.org>
Message-ID: <ffea3d$e6i$1@ger.gmane.org>

Clifford Heath wrote:
> If I redefine NEWLINE as (' '|'\t')* '\r'? '\n'
> it doesn't parse either form... why?

It seems this is incorrect, and AntlrWorks hadn't regenerated
correctly. I'm using the "Interpreter", and it seems I need to
press the "Guess" button more often.

Clifford Heath.


From parrt at cs.usfca.edu  Sat Oct 20 18:42:54 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 21 Oct 2007 09:42:54 +0800
Subject: [antlr-interest] IllegalArgumentException: Can't find template
	wildcardTrack.st
In-Reply-To: <fbdc6a970710192239w2418ed68pa9ecd8fd5b3f23b@mail.gmail.com>
References: <fbdc6a970710192239w2418ed68pa9ecd8fd5b3f23b@mail.gmail.com>
Message-ID: <DC4A28EB-BFE0-4FAF-BF3F-448B9AC3141A@cs.usfca.edu>

Hi. That's ANTLR's poor way of saying it can't handle the wildcard  
yet for tree building. I think i fixed this for 3.1.

Ter

From peizhao at itee.uq.edu.au  Sat Oct 20 18:48:19 2007
From: peizhao at itee.uq.edu.au (Peizhao Hu)
Date: Sun, 21 Oct 2007 11:48:19 +1000
Subject: [antlr-interest] distinction between newline and ws
In-Reply-To: <471AA433.7040605@cse.unsw.edu.au>
References: <000001c81325$8ba0ad60$9231fea9@Werkbank>
	<471AA433.7040605@cse.unsw.edu.au>
Message-ID: <471AAFE3.20206@itee.uq.edu.au>

not sure what you guys trying to do, but try the following:

grammar T;
options {
	k=3;
}

test 	: (TEXT | NEWLINE | WS)* ;
TEXT	: 'x'+ ;
NEWLINE : '\r'? '\n' ;
WS	: (' '|'\t')* {$channel=HIDDEN;} ;


regards;

Peizhao


Joseph Gentle wrote:
> [forgot to reply all]
> 
> I can't find the documentation for it, but ANTLR does seem to have token 
> matching precedence rules.
> 
> Have a play with it - write a tokeniser like this:
> 
> test : ( TEXT | NEWLINE | WS )*;
> TEXT : 'x'+;
> 
> NEWLINE     :     '\r'? '\n';
> 
> WS    :     (' '|'\t'|'\n'|'\r')+;
> 
> 
> and pass it some strings with newlines and whitespace and whatnot. Have 
> a look at the token stream generated. I've got a feeling that antlr 
> prefers to match earlier tokens to later tokens. Using your rules, I 
> expect that a line of text followed immediately by a newline will become 
> TEXT NEWLINE whereas a line of text followed by whitespace then a 
> newline will be TEXT WS. This is because by default the + in the WS rule 
> is greedy and will consume the newline as well, if it can.
> 
> Have a play!
> 
> -J
> 
> 
> Sven Busse wrote:
>>
>> hello,
>>
>>  
>>
>> i am very new to antlr and language recognition. So i bought the book
>>
>> from Terence Parr and now i am currently working through the first
>>
>> example, the calculator. And unfortunately already, i don?t understand
>>
>> something. The grammar looks like this:
>>
>>  
>>
>> grammar Expr;
>>
>>  
>>
>> prog  :     stat+ ;
>>
>>  
>>
>> stat  :     expr NEWLINE
>>
>>       |     ID '=' expr NEWLINE
>>
>>       |     NEWLINE
>>
>>       ;
>>
>>  
>>
>> expr  :     multExpr (('+'|'-') multExpr)* ;
>>
>>  
>>
>> multExpr:   atom ('*' atom)* ;
>>
>>  
>>
>> atom  :     INT
>>
>>       |     ID
>>
>>       |     '(' expr ')'
>>
>>       ;
>>
>>  
>>
>> ID    :     ('a'..'z'|'A'..'Z')+;
>>
>> INT   :     '0'..'9'+;
>>
>> NEWLINE     :     '\r'? '\n';
>>
>> WS    :     (' '|'\t'|'\n'|'\r')+ {skip();};
>>
>>  
>>
>> My Question now is, how does antrl know, that ?\n? should match to a 
>> NEWLINE instead
>>
>> of WS (which would mean, it would skip it)? I would have thought, this 
>> grammar is
>>
>> ambiguous, but apparantly, it isn?t. Why not?
>>
>>  
>>
>> Thank you
>>
>> Sven
>>
> 
> 

From jimi at temporal-wave.com  Sat Oct 20 20:57:49 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 20 Oct 2007 20:57:49 -0700
Subject: [antlr-interest] distinction between newline and ws
In-Reply-To: <ffe7en$8tl$1@ger.gmane.org>
References: <000001c81325$8ba0ad60$9231fea9@Werkbank>
	<ffe7en$8tl$1@ger.gmane.org>
Message-ID: <BAY130-DS3DF99753F090B9FCDFB9686990@phx.gbl>

Basically, you don?t do that :-)

Your WS rule is just:

WS : (' '|'\t')+ { $type = HIDDEN; };

And NEWLINE is then

NEWLINE : '\r'? '\n' ;

There is not context, so you choose which you want. Now, this is only true
if you want NEWLINE to be seen by the parser, but WS to be hidden from it.
IF you don't want either, then just delete the NEWLINE rule and leave \n and
\r in the WS rule so that they are all discarded.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Clifford Heath
> Sent: Saturday, October 20, 2007 5:45 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] distinction between newline and ws
> 
> Sven Busse wrote:
> > something. The grammar looks like this:
> > grammar Expr;
> ...
> > NEWLINE     :     '\r'? '\n';
> > WS    :     (' '|'\t'|'\n'|'\r')+ {skip();};
> > My Question now is, how does antrl know, that ?\n? should match to a
> > NEWLINE instead
> 
> I have some understanding of this, but I'm still struggling with
> a similar case also.
> 
> Your grammar parses the string "a=3\n" just fine, but
> the string "a=3 \n" (with space) doesn't parse... why?
> 
> If I redefine NEWLINE as (' '|'\t')* '\r'? '\n'
> it doesn't parse either form... why?
> 
> > I would have thought, this grammar is ambiguous, but apparantly, it
> isn?t. Why not?
> 
> Lexical rules are often ambiguous, and all rules always apply
> regardless of the grammar rule context (this is the answer to
> Simon West's question). The Lexer is supposed to choose the
> longest token that matches the current input... but I don't
> see that principle applying here.
> 
> Clifford Heath.
> 
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.3/1081 - Release Date:
> 10/19/2007 5:41 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.3/1081 - Release Date: 10/19/2007
5:41 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071020/83213880/attachment.html 

From clifford.heath at gmail.com  Sat Oct 20 21:58:23 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sun, 21 Oct 2007 14:58:23 +1000
Subject: [antlr-interest] distinction between newline and ws
In-Reply-To: <BAY130-DS3DF99753F090B9FCDFB9686990@phx.gbl>
References: <000001c81325$8ba0ad60$9231fea9@Werkbank>	<ffe7en$8tl$1@ger.gmane.org>
	<BAY130-DS3DF99753F090B9FCDFB9686990@phx.gbl>
Message-ID: <ffem9h$59g$1@ger.gmane.org>

Jim Idle wrote:
> Basically, you don?t do that :-)

Actually it works fine. I don't tend to use newline as
grammar in my languages, but was playing with the example
Sven posted because it was similar to one I was having
problems with... which turned out to be due to Antlrworks
having its knickers in a knot about which channels are
skipped.

Thanks for your help,

Clifford Heath.


From clifford.heath at gmail.com  Sat Oct 20 22:06:35 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sun, 21 Oct 2007 15:06:35 +1000
Subject: [antlr-interest] Problem using string literals
In-Reply-To: <471A9B97.9080300@smabber.com>
References: <471A9B97.9080300@smabber.com>
Message-ID: <ffemot$64d$1@ger.gmane.org>

S West wrote:
> grammar Test;
> test        :    (LETTER | '-')+;
> unrelated_rule    :    'BONGO: ' LETTER;
> LETTER        :    ('A'..'Z');

LETTER and 'BONGO: ' are both lexical rules.
When Antlr sees a 'B', it says "this could be BONGO",
and looks further until it finds out. If not, it returns
LETTER instead.

That process produces a token stream, which is fed to the
non-lexical rules (test). It sees a BONGO token and barfs
because it was unexpected.

> I do not understand why this is happening, the literal 'BONGO: ' is in a 
> totally separate and unreferred-to parser rule.

No, it's a lexer rule, which is called from an unrelated parser rule.
All lexer rules get applied before any parser rule sees the results.

Cifford.


From clifford.heath at gmail.com  Sun Oct 21 00:49:13 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sun, 21 Oct 2007 17:49:13 +1000
Subject: [antlr-interest] Lexer bug?
Message-ID: <fff09r$niq$1@ger.gmane.org>

The following will parse "10 .. 20" and "10 ..20", but not "10..20".
It looks to me very much like it should... what's up here? It gets
a "no viable alternate" exception.

Obviously if I changed FRACTION to use DIGIT* instead of DIGIT+, it's
not going to work in the third case above, but... without that change?

Clifford Heath.
----

grammar range;

range
:       NUMBER '..' NUMBER
;

NUMBER
:       SIGN? DIGIT+ FRACTION? EXPONENT?
|       SIGN? FRACTION EXPONENT?
;

fragment SIGN:          ('+' | '-');
fragment FRACTION:      '.' DIGIT+;
fragment EXPONENT:      ('e'|'E') SIGN? DIGIT+;
fragment DIGIT  :       '0'..'9';

WS:     (' '|'\t'|'\r'|'\n')+ {skip();};


From mail at ghost23.de  Sun Oct 21 03:10:52 2007
From: mail at ghost23.de (Sven Busse)
Date: Sun, 21 Oct 2007 12:10:52 +0200
Subject: [antlr-interest] distinction between newline and ws
In-Reply-To: <471AA433.7040605@cse.unsw.edu.au>
References: <000001c81325$8ba0ad60$9231fea9@Werkbank>
	<471AA433.7040605@cse.unsw.edu.au>
Message-ID: <001e01c813ca$a99efe70$9231fea9@Werkbank>

Hi,

thanks for the answers so far. I found something out, too. If i just swap
the lines for NEWLINE and WS, the grammar behaves differently, the NEWLINE
then is not matched. So i guess the order, in which those rules are set in
the grammar, makes a difference. Nevertheless, actually i would have
thought, the correct way to set the rules for NEWLINE and WS would be:

NEWLINE     :     '\r'? '\n';
WS    :     (' '|'\t')+ {skip();};

Means, i do not put \n and \r in WS.

Perhaps i should simply read on in the book ;o)

________________________________________
Von: Joseph Gentle [mailto:josephg at cse.unsw.edu.au] 
Gesendet: Sonntag, 21. Oktober 2007 02:58
An: antlr-interest at antlr.org
Betreff: Re: [antlr-interest] distinction between newline and ws

[forgot to reply all]

I can't find the documentation for it, but ANTLR does seem to have token
matching precedence rules.

Have a play with it - write a tokeniser like this:

test : ( TEXT | NEWLINE | WS )*;
TEXT : 'x'+;

NEWLINE???? :???? '\r'? '\n';
WS??? :???? (' '|'\t'|'\n'|'\r')+;

and pass it some strings with newlines and whitespace and whatnot. Have a
look at the token stream generated. I've got a feeling that antlr prefers to
match earlier tokens to later tokens. Using your rules, I expect that a line
of text followed immediately by a newline will become TEXT NEWLINE whereas a
line of text followed by whitespace then a newline will be TEXT WS. This is
because by default the + in the WS rule is greedy and will consume the
newline as well, if it can.

Have a play!

-J


Sven Busse wrote: 
hello,
?
i am very new to antlr and language recognition. So i bought the book
from Terence Parr and now i am currently working through the first
example, the calculator. And unfortunately already, i don?t understand
something. The grammar looks like this:
?
grammar Expr;
?
prog? :???? stat+ ;
?
stat? :???? expr NEWLINE
????? |???? ID '=' expr NEWLINE
????? |???? NEWLINE
????? ;
?
expr? :???? multExpr (('+'|'-') multExpr)* ;
?
multExpr:?? atom ('*' atom)* ;
?
atom? :???? INT
????? |???? ID
????? |???? '(' expr ')'
????? ;
?
ID??? :???? ('a'..'z'|'A'..'Z')+;
INT?? :???? '0'..'9'+;
NEWLINE???? :???? '\r'? '\n';
WS??? :???? (' '|'\t'|'\n'|'\r')+ {skip();};
?
My Question now is, how does antrl know, that ?\n? should match to a NEWLINE
instead
of WS (which would mean, it would skip it)? I would have thought, this
grammar is
ambiguous, but apparantly, it isn?t. Why not?
?
Thank you
Sven



From Austin_Hastings at Yahoo.com  Sun Oct 21 05:09:01 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 21 Oct 2007 08:09:01 -0400
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <fff09r$niq$1@ger.gmane.org>
References: <fff09r$niq$1@ger.gmane.org>
Message-ID: <471B415D.6070506@Yahoo.com>

I'm guessing it's because "10..20" is two completely valid tokens: 10. 
and .20. Both NUMBERs, of course.

Keep in mind that you have two different machines at work. Some recent 
posts have seems to ignore or forget that, but the lexer should be 
backtracking when needed in order to partition the input into valid 
lexemes. In this case, it turns out to be simple. The greedy rule says 
that 10. is the longest matching token. Then .20 is another valid token, 
and lexing is complete.

The parser will gag on this, but there is not backtracking between 
layers - the parser isn't telling the lexer to retry with a different 
interpretation. The parser just horks up an error about unexpected token 
or no alternative and that's that.

In theory, you should be able to describe integer literals, the range 
operator, and floats, in that order, and have it work. But I'd try it to 
be sure - I'm a little nervous about how the generated lexers handle 
nearly-ambiguous input. Something like:

INTEGER_LITERAL: DIGIT+ ;

RANGE_OP: '..' ;

FLOAT_LITERAL: /* as previously */ ;


=Austin

Clifford Heath wrote:
> The following will parse "10 .. 20" and "10 ..20", but not "10..20".
> It looks to me very much like it should... what's up here? It gets
> a "no viable alternate" exception.
>
> Obviously if I changed FRACTION to use DIGIT* instead of DIGIT+, it's
> not going to work in the third case above, but... without that change?
>
> Clifford Heath.
> ----
>
> grammar range;
>
> range
> :       NUMBER '..' NUMBER
> ;
>
> NUMBER
> :       SIGN? DIGIT+ FRACTION? EXPONENT?
> |       SIGN? FRACTION EXPONENT?
> ;
>
> fragment SIGN:          ('+' | '-');
> fragment FRACTION:      '.' DIGIT+;
> fragment EXPONENT:      ('e'|'E') SIGN? DIGIT+;
> fragment DIGIT  :       '0'..'9';
>
> WS:     (' '|'\t'|'\r'|'\n')+ {skip();};
>
>
>


From clifford.heath at gmail.com  Sun Oct 21 05:17:38 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Sun, 21 Oct 2007 22:17:38 +1000
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <471B415D.6070506@Yahoo.com>
References: <fff09r$niq$1@ger.gmane.org> <471B415D.6070506@Yahoo.com>
Message-ID: <fffg14$v05$1@ger.gmane.org>

Austin Hastings wrote:
> I'm guessing it's because "10..20" is two completely valid tokens: 10. 
> and .20. Both NUMBERs, of course.

10. is not a valid token unless followed by another digit. That's why
I mentioned using DIGIT+ instead of DIGIT* in FRACTION.

> Keep in mind that you have two different machines at work.

Yes - see my post explaining that to Simon West, for example.

> In theory, you should be able to describe integer literals, the range 
> operator, and floats, in that order, and have it work. But I'd try it...

Interesting thought... Not relevant here, but I'll try it sometime.

Clifford Heath.


From dacarey at gmail.com  Sun Oct 21 05:30:55 2007
From: dacarey at gmail.com (Dave Carey)
Date: Sun, 21 Oct 2007 13:30:55 +0100
Subject: [antlr-interest] missing attribute access on rule scope when
	testing token in action section
Message-ID: <a841955c0710210530y3c8953e7i422e5f368e41a28f@mail.gmail.com>

I have a question regarding "action section" and testing for the presence of
optional tokens inside them
According to the v3 Definitive Antlr Guide ( section 6.3) you can do
something like this:-

stat: 'if' expr 'then' stat(el='else' stat)?
{
   if($el!=null)
       System.out.println("found an else");}
|...
;

In fact when I try this same example ( Anrlr 3.0.1)   I always get

error(117): Test.g3:116:4: missing attribute access on rule scope: el

You can workaround by access the token contents supplying an attribute e.g.
$el.text:  but this doesn't feel right and the guide suggests that it should
work as prescribed.

Can anybody clarify?

Cheers
Dave
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071021/6699ec86/attachment.html 

From r.mark.volkmann at gmail.com  Sun Oct 21 05:44:02 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 21 Oct 2007 07:44:02 -0500
Subject: [antlr-interest] ANTLRWorks debugger
In-Reply-To: <FE9B88CA-6BBC-4064-856B-EF53251A7FF9@mac.com>
References: <f0fcc6820710191744t45c4390eya7e6cb4a47cbb47c@mail.gmail.com>
	<FE9B88CA-6BBC-4064-856B-EF53251A7FF9@mac.com>
Message-ID: <f0fcc6820710210544j439ea70eoe439cd3f28524018@mail.gmail.com>

On 10/19/07, Jean Bovet <jean_bovet at mac.com> wrote:
> You need to click in the gutter in the same line as the name of the
> rule.

What do I need to do after that? I have "Break on Location" selected.
Which debugger button should I press next? I tried pressing "Fast
forward" and "Go To End", but they both run all the way through my
grammar without stopping at the breakpoint I set.

>
> Regards,
>
> Jean
>
> On Oct 19, 2007, at 5:44 PM, Mark Volkmann wrote:
>
> > Can the ANTLRWorks debugger set a breaks at specific rules? I thought
> > perhaps "Break on Location" did that, but I can't figure out how to
> > specify the rule where I'd like to break.
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
>
>


-- 
R. Mark Volkmann
Object Computing, Inc.

From dacarey at gmail.com  Sun Oct 21 06:31:06 2007
From: dacarey at gmail.com (Dave Carey)
Date: Sun, 21 Oct 2007 14:31:06 +0100
Subject: [antlr-interest] missing attribute access on rule scope when
	testing token in action section
In-Reply-To: <a841955c0710210530y3c8953e7i422e5f368e41a28f@mail.gmail.com>
References: <a841955c0710210530y3c8953e7i422e5f368e41a28f@mail.gmail.com>
Message-ID: <a841955c0710210631i49714582v25fb096e00ad948f@mail.gmail.com>

I think I answered my own question here and it seems it is a typo in the
book.
If the if clause you don't prefix el with a '$'   so it is

  if(el!=null)


On 21/10/2007, Dave Carey <dacarey at gmail.com> wrote:
>
> I have a question regarding "action section" and testing for the presence
> of optional tokens inside them
> According to the v3 Definitive Antlr Guide ( section 6.3) you can do
> something like this:-
>
> stat: 'if' expr 'then' stat(el='else' stat)?
> {
>    if($el!=null)
>        System.out.println ("found an else");}
> |...
> ;
>
> In fact when I try this same example ( Anrlr 3.0.1)   I always get
>
> error(117): Test.g3:116:4: missing attribute access on rule scope: el
>
> You can workaround by access the token contents supplying an attribute e.g.
> $el.text:  but this doesn't feel right and the guide suggests that it
> should work as prescribed.
>
> Can anybody clarify?
>
> Cheers
> Dave
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071021/fb7e2a05/attachment.html 

From Austin_Hastings at Yahoo.com  Sun Oct 21 06:35:37 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 21 Oct 2007 09:35:37 -0400
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <fffg14$v05$1@ger.gmane.org>
References: <fff09r$niq$1@ger.gmane.org> <471B415D.6070506@Yahoo.com>
	<fffg14$v05$1@ger.gmane.org>
Message-ID: <471B55A9.5040307@Yahoo.com>

You're right. I looked at your definition of NUMBER and just assumed you 
were using the common one. It looks like a bug.

In fact, (some time later) I'm looking at the generated code now with 
new disrespect. The tokenizer is doing a minimal look-ahead and then 
committing to a token - when it sees '1' in your 10..20 example, it 
commits to a NUMBER. When it comes to '.' it commits to FRACTION. There 
doesn't appear to be any consideration that one path might fail and 
another be chosen.

I'm not sure I should thank you for it, but I'm glad you brought this 
up. :-(

=Austin


Clifford Heath wrote:
> Austin Hastings wrote:
>> I'm guessing it's because "10..20" is two completely valid tokens: 
>> 10. and .20. Both NUMBERs, of course.
>
> 10. is not a valid token unless followed by another digit. That's why
> I mentioned using DIGIT+ instead of DIGIT* in FRACTION.
>
>> Keep in mind that you have two different machines at work.
>
> Yes - see my post explaining that to Simon West, for example.
>
>> In theory, you should be able to describe integer literals, the range 
>> operator, and floats, in that order, and have it work. But I'd try it...
>
> Interesting thought... Not relevant here, but I'll try it sometime.
>
> Clifford Heath.
>
>
>


From antlr at shmuelhome.mine.nu  Sun Oct 21 06:52:18 2007
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Sun, 21 Oct 2007 15:52:18 +0200
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <fff09r$niq$1@ger.gmane.org>
References: <fff09r$niq$1@ger.gmane.org>
Message-ID: <471B5992.3030809@shmuelhome.mine.nu>

Clifford Heath wrote:
> The following will parse "10 .. 20" and "10 ..20", but not "10..20".
> It looks to me very much like it should... what's up here? It gets
> a "no viable alternate" exception.
>
> Obviously if I changed FRACTION to use DIGIT* instead of DIGIT+, it's
> not going to work in the third case above, but... without that change?
>
> Clifford Heath.
> ----
>
> grammar range;
>
> range
> :       NUMBER '..' NUMBER
> ;
>
> NUMBER
> :       SIGN? DIGIT+ FRACTION? EXPONENT?
> |       SIGN? FRACTION EXPONENT?
> ;
>
> fragment SIGN:          ('+' | '-');
> fragment FRACTION:      '.' DIGIT+;
> fragment EXPONENT:      ('e'|'E') SIGN? DIGIT+;
> fragment DIGIT  :       '0'..'9';
>
> WS:     (' '|'\t'|'\r'|'\n')+ {skip();};
>
In my experience, this is not a bug. Antlr is behaving exactly as its 
author intended (even though it is ignoring the question mark on 
FRACTION). There are two features of antlr that seem to be coming into play.

   1. Antlr  sees the first period and thinks that it can match FRACTION
      since that is the only valid alternative (antlr ignores the fact
      that match nothing is also a valid alternative).
   2. Antlr sees that it can match NUMBER by ignoring one of the
      periods, so it does. (Antlr3 advanced error recovery).

The problem with the first item is very similar to the Antlr2 problems 
with linear approximate look ahead (I think that is its name).  The 
second feature is new to Antlr3.

BTW, since you are using skip for WS and not a hidden channel, you gain 
nothing by tring to do it all in the lexer. If you change number to a 
parser rule and change the fragments to regular tokens, your grammar 
will work.




From r.mark.volkmann at gmail.com  Sun Oct 21 06:58:03 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 21 Oct 2007 08:58:03 -0500
Subject: [antlr-interest] ANTLRWorks parse tree green
Message-ID: <f0fcc6820710210658n4eb017cend37b61b4b195eb2a@mail.gmail.com>

What do the the green boxes in the parse tree drawn by ANTLRWorks
represent? I see duplicate subtrees, one in green and another in
black. Despite that it is generating the correct AST with no duplicate
subtrees.

-- 
R. Mark Volkmann
Object Computing, Inc.

From antlr-list at arizona-software.ch  Sun Oct 21 10:05:18 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sun, 21 Oct 2007 10:05:18 -0700
Subject: [antlr-interest] ANTLRWorks debugger
In-Reply-To: <f0fcc6820710210544j439ea70eoe439cd3f28524018@mail.gmail.com>
References: <f0fcc6820710191744t45c4390eya7e6cb4a47cbb47c@mail.gmail.com>
	<FE9B88CA-6BBC-4064-856B-EF53251A7FF9@mac.com>
	<f0fcc6820710210544j439ea70eoe439cd3f28524018@mail.gmail.com>
Message-ID: <4E21693B-AF5E-496D-9282-71C3477A16F7@arizona-software.ch>

>
> What do I need to do after that? I have "Break on Location" selected.
> Which debugger button should I press next? I tried pressing "Fast
> forward" and "Go To End", but they both run all the way through my
> grammar without stopping at the breakpoint I set.
>

You can use Fast Forward and it should break at the specified rules.  
You don't need to select a particular button for "Break on:". It  
might be a bug that is showing up with your grammar. Would it be  
possible to have your grammar (or a subset of it showing this  
problem) and the input text to reproduce this problem?

Jean


From r.mark.volkmann at gmail.com  Sun Oct 21 11:08:22 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 21 Oct 2007 13:08:22 -0500
Subject: [antlr-interest] ANTLRWorks debugger
In-Reply-To: <4E21693B-AF5E-496D-9282-71C3477A16F7@arizona-software.ch>
References: <f0fcc6820710191744t45c4390eya7e6cb4a47cbb47c@mail.gmail.com>
	<FE9B88CA-6BBC-4064-856B-EF53251A7FF9@mac.com>
	<f0fcc6820710210544j439ea70eoe439cd3f28524018@mail.gmail.com>
	<4E21693B-AF5E-496D-9282-71C3477A16F7@arizona-software.ch>
Message-ID: <f0fcc6820710211108v144c3cb3ob4c8a8c9df51127@mail.gmail.com>

On 10/21/07, Jean Bovet <antlr-list at arizona-software.ch> wrote:
> >
> > What do I need to do after that? I have "Break on Location" selected.
> > Which debugger button should I press next? I tried pressing "Fast
> > forward" and "Go To End", but they both run all the way through my
> > grammar without stopping at the breakpoint I set.
> >
>
> You can use Fast Forward and it should break at the specified rules.
> You don't need to select a particular button for "Break on:". It
> might be a bug that is showing up with your grammar. Would it be
> possible to have your grammar (or a subset of it showing this
> problem) and the input text to reproduce this problem?

My apologies! I tried using the Fast Forward button again and it is
working perfectly. I thought it wasn't working earlier. Must have been
my imagination.

Is there any documentation on the meaning of the "Break on" checkboxes
on the web?

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Sun Oct 21 13:48:15 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 21 Oct 2007 15:48:15 -0500
Subject: [antlr-interest] ANTLRWorks and Graphviz
Message-ID: <f0fcc6820710211348s70cf1178vb0ed08ea635da868@mail.gmail.com>

I want to view DFA diagrams in ANTLRWorks and that requires installing
Graphviz. I'm running on a Mac. I installed Graphviz. That created the
directory /usr/local/graphviz-2.12. Now I need to configure ANTLRWorks
to use it. In the preferences I set the "DOT Path" to
"/usr/local/graphviz-2.12/bin/graphviz-dispatcher", but that didn't
work. What do I need to set it to?

-- 
R. Mark Volkmann
Object Computing, Inc.

From paul at paulkeir.com  Sun Oct 21 15:00:58 2007
From: paul at paulkeir.com (Paul Keir)
Date: Sun, 21 Oct 2007 23:00:58 +0100
Subject: [antlr-interest] superClass
Message-ID: <471BCC1A.4090905@paulkeir.com>

Hello again,

I have a grammar embedded within the C example grammar, and now I'd like 
to separate the extension cleanly into a separate file. I was hoping the 
'superClass' option, described in the book, could help me here. I've 
tried a few ideas now, but not yet with any luck.

First, I tried compiling the original C grammar (C.g) as usual, then 
created a new grammar file containing only its name (newC), and a single 
superclass option of 'superClass=CParser;', but that results in a null 
pointer exception (in Grammar.setGrammarContent).

I then added a single rule,
myrule : struct_or_union;
and that failed too, with the statement that the 'struct_or_union' rule 
is undefined. I tried adding 'import CParser/Lexer' to the @header 
section, but that changed nothing.

Changing tack slightly I tried overriding an existing C method:
storage_class_specifier : 'extern' | 'static' | 'auto' | 'register' | 
'test' ;
and Antlr could compile that, but javac *.java now has a problem:
newCParser.java:26: storage_class_specifier() in newCParser cannot 
override storage_class_specifier() in CParser; overridden method is final

I'm clearly well off track, so any advice at all would be gratefully 
received.

Yours confused,
Paul


From clifford.heath at gmail.com  Sun Oct 21 17:11:30 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Mon, 22 Oct 2007 10:11:30 +1000
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <471B55A9.5040307@Yahoo.com>
References: <fff09r$niq$1@ger.gmane.org>
	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>
	<471B55A9.5040307@Yahoo.com>
Message-ID: <ffgpri$kcp$1@ger.gmane.org>

Austin Hastings wrote:
> You're right. I looked at your definition of NUMBER and just assumed you 
> were using the common one. It looks like a bug.
> 
> In fact, (some time later) I'm looking at the generated code now with 
> new disrespect. The tokenizer is doing a minimal look-ahead and then 
> committing to a token - when it sees '1' in your 10..20 example, it 
> commits to a NUMBER. When it comes to '.' it commits to FRACTION. There 
> doesn't appear to be any consideration that one path might fail and 
> another be chosen.

I feared this must be what was happening...
And yet the DIGIT+ path must fail, but no error is reported.
So there's *two* errors in the generated lexer, one where it
takes the wrong path, and one where it doesn't report the error
it sees.

This second error must be affecting other cases of invalid input as well...?

Clifford Heath.


From clifford.heath at gmail.com  Sun Oct 21 17:13:33 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Mon, 22 Oct 2007 10:13:33 +1000
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <471B5992.3030809@shmuelhome.mine.nu>
References: <fff09r$niq$1@ger.gmane.org> <471B5992.3030809@shmuelhome.mine.nu>
Message-ID: <ffgpvd$kcp$2@ger.gmane.org>

shmuel siegel wrote:
> BTW, since you are using skip for WS and not a hidden channel, you gain 
> nothing by tring to do it all in the lexer. If you change number to a 
> parser rule and change the fragments to regular tokens, your grammar 
> will work.

Interesting idea, but how do I then prevent the lexer from allowing
interjected whitespace, without dropping the WS rule and using
explicit WS skipping everywhere else in the grammar?

Clifford Heath.


From jimi at temporal-wave.com  Sun Oct 21 17:26:25 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 21 Oct 2007 17:26:25 -0700
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <ffgpri$kcp$1@ger.gmane.org>
References: <fff09r$niq$1@ger.gmane.org>	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>	<471B55A9.5040307@Yahoo.com>
	<ffgpri$kcp$1@ger.gmane.org>
Message-ID: <BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>

This isn't a bug.

You need to specify your lexer rule such that it is easy to take the correct
path, rather than look to the lexer to work some magic for you ;-). Lexer
rules cannot see other lexer rules - you want your generated lexer to be as
fast as it can be because that is where most of your recognition time will
(probably go). It is a lot easier than you think, and here is a small
example that should let you work it out:

SOMETHINGDOTTY
  : DIGIT+
      (
         '.'  // Here might be decimal or range
           (
               '.' DIGIT+  { $type = RANGE; } // It was a range
             | DIGIT+      { $type = DECIMAL; } // Decimal
             | // Flag ill formatted number/range error
           )
        |  { $type = INTEGER; }
      )
   | '.' DIGIT+            { $type = DECIMAL; {
   ;

The token types are either fragments or entries in tokens section (but
entries in token section will give you the erroneous warning that they are
not defined as types when used in the lexer to set token type).

Note that the rule above traps things that look like they are typos (unless
you allow 5.) so that you decide what to do with it, rather than having a
lexer that spits dummies.

Think of this more in terms of how you would program nested if statements.
It would be inefficient to say if *c == '.' && *c != '.' else if *C == '.'
... and so on. Just simplify it out to the simples non-ambiguous path for a
single lexer rule. Then you will get an efficient and easy to maintain lexer
:-)

Hope this helps,

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Clifford Heath
> Sent: Sunday, October 21, 2007 5:12 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexer bug?
> 
> Austin Hastings wrote:
> > You're right. I looked at your definition of NUMBER and just assumed
> you
> > were using the common one. It looks like a bug.
> >
> > In fact, (some time later) I'm looking at the generated code now with
> > new disrespect. The tokenizer is doing a minimal look-ahead and then
> > committing to a token - when it sees '1' in your 10..20 example, it
> > commits to a NUMBER. When it comes to '.' it commits to FRACTION.
> There
> > doesn't appear to be any consideration that one path might fail and
> > another be chosen.
> 
> I feared this must be what was happening...
> And yet the DIGIT+ path must fail, but no error is reported.
> So there's *two* errors in the generated lexer, one where it
> takes the wrong path, and one where it doesn't report the error
> it sees.
> 
> This second error must be affecting other cases of invalid input as
> well...?
> 
> Clifford Heath.
> 
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.3/1082 - Release Date:
> 10/20/2007 2:59 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.3/1082 - Release Date: 10/20/2007
2:59 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071021/0b015f3a/attachment.html 

From parrt at cs.usfca.edu  Sun Oct 21 17:34:08 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 22 Oct 2007 08:34:08 +0800
Subject: [antlr-interest] missing attribute access on rule scope when
	testing token in action section
In-Reply-To: <a841955c0710210631i49714582v25fb096e00ad948f@mail.gmail.com>
References: <a841955c0710210530y3c8953e7i422e5f368e41a28f@mail.gmail.com>
	<a841955c0710210631i49714582v25fb096e00ad948f@mail.gmail.com>
Message-ID: <78D1EEAF-1C02-4B21-85A0-3A1D489B0EEE@cs.usfca.edu>

hi. $el should work.  Are you sure el isn't a rule somewhere?  Is it  
literally as in the book?  I tried every example; maybe i messed this  
up in 3.0.1?

Ter
On Oct 21, 2007, at 9:31 PM, Dave Carey wrote:

> I think I answered my own question here and it seems it is a typo  
> in the book.
> If the if clause you don't prefix el with a '$'   so it is
>
>   if( el!=null)
>
>
> On 21/10/2007, Dave Carey <dacarey at gmail.com> wrote: I have a  
> question regarding "action section" and testing for the presence of  
> optional tokens inside them
> According to the v3 Definitive Antlr Guide ( section 6.3) you can  
> do something like this:-
>
> stat: 'if' expr 'then' stat(el='else' stat)?
> {
>    if($el!=null)
>        System.out.println ("found an else");}
> |...
> ;
>
> In fact when I try this same example ( Anrlr 3.0.1)   I always get
>
> error(117): Test.g3:116:4: missing attribute access on rule scope: el
>
> You can workaround by access the token contents supplying an  
> attribute e.g. $el.text:  but this doesn't feel right and the guide  
> suggests that it should work as prescribed.
>
> Can anybody clarify?
>
> Cheers
> Dave
>
>


From parrt at cs.usfca.edu  Sun Oct 21 17:35:10 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 22 Oct 2007 08:35:10 +0800
Subject: [antlr-interest] ANTLRWorks parse tree green
In-Reply-To: <f0fcc6820710210658n4eb017cend37b61b4b195eb2a@mail.gmail.com>
References: <f0fcc6820710210658n4eb017cend37b61b4b195eb2a@mail.gmail.com>
Message-ID: <B95A8999-FF3E-446A-98ED-F7A5E8BEA303@cs.usfca.edu>

green means backtracking that succeeded. Red means it failed.  Black  
means "with feeling" :)
Ter
On Oct 21, 2007, at 9:58 PM, Mark Volkmann wrote:

> What do the the green boxes in the parse tree drawn by ANTLRWorks
> represent? I see duplicate subtrees, one in green and another in
> black. Despite that it is generating the correct AST with no duplicate
> subtrees.
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From clifford.heath at gmail.com  Sun Oct 21 17:49:19 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Mon, 22 Oct 2007 10:49:19 +1000
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
References: <fff09r$niq$1@ger.gmane.org>	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>
	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
Message-ID: <471BF38F.3030804@gmail.com>

Jim Idle wrote:
> This isn't a bug.

Nonsense. Any lexer that consumes characters that aren't a legal token,
and announces a legal token without flagging an error, has a bug.

Lexer rules don't need to "see" any other lexer rule. They just need to
consume as many characters as make a legal token, then stop, Any other
rule that matches the same input but consumes more characters is then
declared the winner, or one that consumes the same number of characters
but is further up in precedence.

This rule consumes digits and one ".", then stops - and that's not a
legal token.

Your proposed technique is interesting and maybe useful, but doesn't
produce the desired behaviour, as it won't match a trailing real number.
I don't want my lexer to produce one token for three, and then have to
break it apart again later - especially since two of the three tokens
have a non-trivial structure. I could hack it into working, but for now,
I'm just requiring a space before the "..". 

My hand-coded lexers almost never used if/then/else, but character
classification tables and switch/case. This range problem is trivial
with flex, as well.

Clifford Heath.


From john.ridgway at trincoll.edu  Sun Oct 21 19:35:01 2007
From: john.ridgway at trincoll.edu (John Ridgway)
Date: Sun, 21 Oct 2007 22:35:01 -0400
Subject: [antlr-interest] Fink package for ANTLR v3
Message-ID: <21D0919E-5E28-421B-9909-E7923A67D425@trincoll.edu>

For those of you using MacOS X and Fink: there is now a Fink package  
for installing ANTLR v3.  It is called, appropriately enough,  
antlr3.  It coexists with, and requires, the antlr package (since v3  
still uses v2.7.7 internally.)  Since all of the jar files are  
automatically placed in your classpath by Fink, using the antlr tool  
(once you've installed the package) should be as easy as:
    java org.antlr.Tool Expr.g
with no need to play with your classpath.

You will have to run fink selfupdate to get the antlr3 (and updated  
antlr) package.  This package also requires the stringtemplate3 package.

Peace
- John

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071021/e09792d9/attachment.html 

From antlr-list at arizona-software.ch  Sun Oct 21 19:44:55 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sun, 21 Oct 2007 19:44:55 -0700
Subject: [antlr-interest] ANTLRWorks debugger
In-Reply-To: <f0fcc6820710211108v144c3cb3ob4c8a8c9df51127@mail.gmail.com>
References: <f0fcc6820710191744t45c4390eya7e6cb4a47cbb47c@mail.gmail.com>
	<FE9B88CA-6BBC-4064-856B-EF53251A7FF9@mac.com>
	<f0fcc6820710210544j439ea70eoe439cd3f28524018@mail.gmail.com>
	<4E21693B-AF5E-496D-9282-71C3477A16F7@arizona-software.ch>
	<f0fcc6820710211108v144c3cb3ob4c8a8c9df51127@mail.gmail.com>
Message-ID: <AACA6567-7D43-4B35-839E-5E1996CA296E@arizona-software.ch>

> My apologies! I tried using the Fast Forward button again and it is
> working perfectly. I thought it wasn't working earlier. Must have been
> my imagination.
>

Cool!

> Is there any documentation on the meaning of the "Break on" checkboxes
> on the web?
>

The only documentation is here:

http://www.antlr.org/works/help/contents/general/debugger.html

I will add more information to it.

Regards,

Jean



From antlr-list at arizona-software.ch  Sun Oct 21 19:47:46 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sun, 21 Oct 2007 19:47:46 -0700
Subject: [antlr-interest] ANTLRWorks and Graphviz
In-Reply-To: <f0fcc6820710211348s70cf1178vb0ed08ea635da868@mail.gmail.com>
References: <f0fcc6820710211348s70cf1178vb0ed08ea635da868@mail.gmail.com>
Message-ID: <77951E30-D5BE-475D-BA92-B77FF06EC137@arizona-software.ch>

On Mac OS X, I am using this path:

/Applications/Graphviz.app/Contents/MacOS/dot

I will update the section in the Help:

http://www.antlr.org/works/help/contents/dialog/prefs.html

Regards,

Jean


On Oct 21, 2007, at 1:48 PM, Mark Volkmann wrote:

> I want to view DFA diagrams in ANTLRWorks and that requires installing
> Graphviz. I'm running on a Mac. I installed Graphviz. That created the
> directory /usr/local/graphviz-2.12. Now I need to configure ANTLRWorks
> to use it. In the preferences I set the "DOT Path" to
> "/usr/local/graphviz-2.12/bin/graphviz-dispatcher", but that didn't
> work. What do I need to set it to?
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From antlr at mirality.co.nz  Sun Oct 21 20:02:24 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 22 Oct 2007 16:02:24 +1300
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <471BF38F.3030804@gmail.com>
References: <fff09r$niq$1@ger.gmane.org> <471B415D.6070506@Yahoo.com>
	<fffg14$v05$1@ger.gmane.org> <471B55A9.5040307@Yahoo.com>
	<ffgpri$kcp$1@ger.gmane.org>
	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
	<471BF38F.3030804@gmail.com>
Message-ID: <20071022030232.E985911EC35@www.antlr.org>

At 13:49 22/10/2007, Clifford Heath wrote:
 >This rule consumes digits and one ".", then stops - and that's 
not
 >a legal token.

I've been complaining off and on about similar cases since the 
early betas.  Some useful discussion came up a while back that the 
predefined "Tokens" rule was being generated on the basis of 
matching only one token, and all the lookahead is generated from 
that same perspective; whereas if it were generated to match a 
sequence of tokens instead it generated better lookahead.

Consider the source rules again for a moment:
DOTTY : '..';
NUMBER
:       SIGN? DIGIT+ FRACTION? EXPONENT?
|       SIGN? FRACTION EXPONENT?
;
fragment SIGN:          ('+' | '-');
fragment FRACTION:      '.' DIGIT+;
fragment EXPONENT:      ('e'|'E') SIGN? DIGIT+;
fragment DIGIT  :       '0'..'9';

To enter this rule, there must be one of these things:
   1. a SIGN followed by at least one DIGIT
   2. a SIGN followed by a FRACTION (which is a dot and at least 
one DIGIT)
   3. at least one DIGIT
   4. a FRACTION (which is a dot and at least one DIGIT)

As soon as you see any of those four cases, you can be reasonably 
sure that you've got yourself a NUMBER (unless you're also trying 
to produce longest-match-wins, in which case you have to entertain 
the possibility it's something else).

So, ok.  The input at this point is "10..20".  This starts with a 
sequence of digits, which matches option 3, so that's fine, it's a 
NUMBER.  So the lexer consumes all the digits and completes the 
first loop.  Everything is all good up to this point.

This is where things go wrong, though.  In reality, the things 
that ought to be permissible next are:
   1. end of token (everything following the DIGIT loop is 
optional, after all)
   2. a FRACTION (a dot and at least one DIGIT)
   3. an EXPONENT (starting with an e or E)
   4. a FRACTION followed by an EXPONENT

ANTLR currently looks ahead and sees a dot.  At this point, it 
immediately assumes that it's got path #2 and tries to match a 
FRACTION.  (Which it will eventually manage to do, but only by 
discarding some of the input stream, which is naughty.)

The "correct" answer should have been #1, to end the token at that 
point (because it is perfectly valid, after all).  After doing 
that, it would then see two dots and generate a DOTTY, then 
another sequence of DIGITs and generate another NUMBER.  Which is 
exactly what is desired here.

So the assumption it made when seeing the dot was faulty.  It was 
correct in that after seeing the dot the only thing that could 
legally follow it would be a DIGIT loop (within that same token), 
but it completely ignored the fact that it wasn't required to 
consume the dot at all, since it was part of an optional clause.

Whenever this comes up (and it does come up a lot), the answer 
from Ter and Jim always seems to be "it's supposed to do that", 
and "rewrite your lexer rules" (usually involving syntactic 
predicates in some way).  My point is that the current behaviour 
is completely counter-intuitive (and hence "wrong", from my 
viewpoint), and while rewriting the lexer rules can often work 
around it, we shouldn't have to.  (And it's a lot messier.)


From r.mark.volkmann at gmail.com  Sun Oct 21 20:22:29 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 21 Oct 2007 22:22:29 -0500
Subject: [antlr-interest] ANTLRWorks and Graphviz
In-Reply-To: <77951E30-D5BE-475D-BA92-B77FF06EC137@arizona-software.ch>
References: <f0fcc6820710211348s70cf1178vb0ed08ea635da868@mail.gmail.com>
	<77951E30-D5BE-475D-BA92-B77FF06EC137@arizona-software.ch>
Message-ID: <f0fcc6820710212022o5099f3e1mc97410f1dc5ece3e@mail.gmail.com>

On 10/21/07, Jean Bovet <antlr-list at arizona-software.ch> wrote:
> On Mac OS X, I am using this path:
>
> /Applications/Graphviz.app/Contents/MacOS/dot

The problem is that when I installed Graphviz, I didn't get a
Graphvix.app file. Instead I got a bunch of files under
/usr/local/graphviz-2.12. It contains a bin directory, so I was hoping
one of those files would do it. I got it from
http://www.ryandesign.com/graphviz/. Do you think I downloaded the
wrong installer?

> I will update the section in the Help:
>
> http://www.antlr.org/works/help/contents/dialog/prefs.html
>
> Regards,
>
>
> Jean
>
>
> On Oct 21, 2007, at 1:48 PM, Mark Volkmann wrote:
>
> > I want to view DFA diagrams in ANTLRWorks and that requires installing
> > Graphviz. I'm running on a Mac. I installed Graphviz. That created the
> > directory /usr/local/graphviz-2.12. Now I need to configure ANTLRWorks
> > to use it. In the preferences I set the "DOT Path" to
> > "/usr/local/graphviz-2.12/bin/graphviz-dispatcher", but that didn't
> > work. What do I need to set it to?
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
>
>


-- 
R. Mark Volkmann
Object Computing, Inc.

From lgcraymer at yahoo.com  Sun Oct 21 23:21:01 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 21 Oct 2007 23:21:01 -0700 (PDT)
Subject: [antlr-interest] Lexer bug?
Message-ID: <341705.96553.qm@web55902.mail.re3.yahoo.com>



----- Original Message ----
> From: Gavin Lambert <antlr at mirality.co.nz>
> To: antlr-interest at antlr.org
> Sent: Sunday, October 21, 2007 8:02:24 PM
> Subject: Re: [antlr-interest] Lexer bug?
> 
> At 13:49 22/10/2007, Clifford Heath wrote:
>  >This rule consumes digits and one ".", then stops - and that's 
> not
>  >a legal token.
> 
> I've been complaining off and on about similar cases since the 
> early betas.  Some useful discussion came up a while back that the 
> predefined "Tokens" rule was being generated on the basis of 
> matching only one token, and all the lookahead is generated from 
> that same perspective; whereas if it were generated to match a 
> sequence of tokens instead it generated better lookahead.

Um--I don't think that this is quite right.  ANTLR 3 has an inelegant tendency to make k=1 decisions when it should not.  Specifically:  any time there is an epsilon alternative--as in FRACTION?--ANTLR tends to make a k=1 decision, as in "I see a '.'; therefore, this is a FRACTION" in Austin's NUMBER rule.  From my perspective, this is probably a bug in the LL* implementation: a lookahead DFA should be generated for such cases (to replace the "if (LA(1) == '.') mFRACTION()") that does the right thing.

I should also point out that ANTLR does not match 10. as a legal token; it matches 10. as a partial token and finds no viable alternative for matching the second '.'.

If the FRACTION rule is inlined, ANTLR 3 will probably do the right thing (I have not tested this example, but have had to resort to inlining in other cases).  Again, this is indicative that Austin is correct in his assertion that this is a bug:  there should be no difference between rule invocations and the equivalent inlined token or character sequences.

--Loring




__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 

From fhellerhoff at yahoo.de  Mon Oct 22 02:38:19 2007
From: fhellerhoff at yahoo.de (Friedhelm Hellerhoff)
Date: Mon, 22 Oct 2007 11:38:19 +0200 (CEST)
Subject: [antlr-interest] Modify java source code with ANTLR
Message-ID: <891426.29551.qm@web27802.mail.ukl.yahoo.com>

What is the best way to modify some only specific
methods in a java source code file using ANTLR?

I have already downloaded and compiled the Java 1.5
grammar for v3. I can run the lexer and parser code
successfully.
I want to comment out a hand full of methods (with
specific names that I know) in different java files.

Thanks for any answer!
 


      Jetzt Mails schnell in einem Vorschaufenster ?berfliegen. Dies und viel mehr bietet das neue Yahoo! Mail - www.yahoo.de/mail

From Robert.Klaus at innovations.de  Mon Oct 22 06:14:57 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Mon, 22 Oct 2007 15:14:57 +0200
Subject: [antlr-interest] Preserving whitespaces when rewriting with
	StringTemplate
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F556@email.innoimm.local>

Hi all,

I'm rewriting a language using ANTLR 3.0.1.

One of the tasks is to rewrite certain operator symbols to keywords,
e.g. '&' becomes 'intersect'.


In the parser I've defined a rule such as

r:
	unary (AMPERSAND^ unary)?
;

Where AMPERSAND is defined in the tokens section as AMPERSAND = '&';

The rewriting itself is done in the treeparser, where I have a matching
rule:

r:
	^(AMPERSAND a=unary b=unary) ->
template(left={$a.text},right={$b.text}) "<left> intersect <right>"
;

So far everything works out quite nicely. When I'm using the
StringTemplate this way, I loose all whitespaces, which should be
preserved if possible.
For example: "a\n\n &         b" now becomes "a intersect b".

It would suffice for this case to replace the token or it's text in the
TokenRewriteStream. I couldn't figure out how to do this in an easy way.
Does ANTLR support this or is there a smarter way to preserve the
whitespaces?


Thanks in advance,

Robert

P.S.
Whitespaces are kept on a different channel than the normal tokens


-------------------------------------------------------------
Robert Klaus
Diplom Informatiker
Product Development
-------------------------------------------------------------
Innovations Softwaretechnologie GmbH
Ziegelei 7
88090 Immenstaad
Germany
Phone: +49(0)7545-202-339
robert.klaus at innovations.de
www.visual-rules.com
-------------------------------------------------------------
Executives: 
Achim Berger, Thomas Cotic, Walter Pitz
Register Court Ulm HRB 631622
-------------------------------------------------------------

From andreas.ravnestad at gmail.com  Mon Oct 22 06:32:32 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Mon, 22 Oct 2007 15:32:32 +0200
Subject: [antlr-interest] Explicit whitespace handling in W3C grammars
Message-ID: <db3e39e10710220632l11a8be3cnf522a29a96d2c4e7@mail.gmail.com>

In several of the grammars specified by the W3C, there are productions
that require "explicit whitespace handling" [1].

Consider this example:
A : B C;

With explicit whitespace handling, there can NOT be whitespace between
B and C in this production.

How can this be implemented with Antlr?

-Andreas Ravnestad


1. http://www.w3.org/TR/xquery/#ExplicitWhitespaceHandling

From venkataramana.m at tcs.com  Mon Oct 22 06:32:33 2007
From: venkataramana.m at tcs.com (venkataramana.m at tcs.com)
Date: Mon, 22 Oct 2007 19:02:33 +0530
Subject: [antlr-interest] Different AST Node Classes for each Non-Terminal
Message-ID: <OF24A7922D.72BBAB73-ON6525737C.004A6CEE-6525737C.004A908D@tcs.com>

Hi,

I would like to know if java-classes for each non-terminal can be 
generated with ANTLR v3.0 ? I could see some references (FAQ) that it was 
possible using ANTLR v2.0. Why has that been not included in v3.0 ?

Basically, we have made a decision to prefer ANTLR over JavaCC. But with 
JavaCC, building a heterogeneous tree was real simple. So just wanted to 
see the same here in ANTLR.

References:
http://www.antlr.org/wiki/pages/viewpage.action?pageId=1763
http://www.doc.ic.ac.uk/lab/secondyear/Antlr/trees.html
http://sds.sourceforge.net/src/antlr/doc/trees.html

Thanks,
Venkat

Venkataramana Madugundu
Tata Consultancy Services
Ph:- +912066086436
Mailto: venkataramana.m at tcs.com
Website: http://www.tcs.com
____________________________________________
Experience certainty.   IT Services
                        Business Solutions
                        Outsourcing
____________________________________________
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/f900c908/attachment-0001.html 

From josephg at cse.unsw.edu.au  Mon Oct 22 07:00:52 2007
From: josephg at cse.unsw.edu.au (Joseph Gentle)
Date: Tue, 23 Oct 2007 00:00:52 +1000
Subject: [antlr-interest] Bug in generated java - @before
Message-ID: <FD0F10AD-4D56-4146-8522-3BA9B7C56E43@cse.unsw.edu.au>

There seems to be a bug in the code generator for java.

Short version:  @before code is ignored and not placed in the  
generated code.

Long version:

I want to do this:

@options { backtrack=true; }
blah	:
{ int some_var; }
stuff* { op(some_var); };

This won't work because the generated code puts 'int some_var;' into  
an isolated if(backtrack==0) {} block.

This should work:

@options { backtrack=true; }
blah
@before { int some_var; }
: stuff* { op(some_var); };

.. but the 'int some_var;' code does not appear at all in the  
generated code.

Any ideas?

-Joseph

From kenny at kmdconsulting.ca  Mon Oct 22 07:55:58 2007
From: kenny at kmdconsulting.ca (Kenny MacDermid)
Date: Mon, 22 Oct 2007 10:55:58 -0400
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <20071022030232.E985911EC35@www.antlr.org>
References: <fff09r$niq$1@ger.gmane.org> <471B415D.6070506@Yahoo.com>
	<fffg14$v05$1@ger.gmane.org> <471B55A9.5040307@Yahoo.com>
	<ffgpri$kcp$1@ger.gmane.org>
	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
	<471BF38F.3030804@gmail.com>
	<20071022030232.E985911EC35@www.antlr.org>
Message-ID: <8367efd50710220755v71053500m524b16a91828357@mail.gmail.com>

On 10/21/07, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 13:49 22/10/2007, Clifford Heath wrote:
>  >This rule consumes digits and one ".", then stops - and that's not
>  >a legal token.
>
> I've been complaining off and on about similar cases since the
> early betas.  Some useful discussion came up a while back that the
> predefined "Tokens" rule was being generated on the basis of
> matching only one token, and all the lookahead is generated from
> that same perspective; whereas if it were generated to match a
> sequence of tokens instead it generated better lookahead.
>
> <snip>
>
> Whenever this comes up (and it does come up a lot), the answer
> from Ter and Jim always seems to be "it's supposed to do that",
> and "rewrite your lexer rules" (usually involving syntactic
> predicates in some way).  My point is that the current behaviour
> is completely counter-intuitive (and hence "wrong", from my
> viewpoint), and while rewriting the lexer rules can often work
> around it, we shouldn't have to.  (And it's a lot messier.)
>

I have to say I agree with Gavin in this case. I'm new to antlr 3, but
rules that I just expected to work often require a lot of tomfoolery
to match what I'm expecting. I haven't ever used antlr2, but I have
been using the same types of cases in ragel where this occurs
naturally for you (as they generate FSMs for the input, so you just
have to look at the last final state when the next char isn't
accepted).

Kenny

From jimi at temporal-wave.com  Mon Oct 22 08:01:34 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Oct 2007 08:01:34 -0700
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <471BF38F.3030804@gmail.com>
References: <fff09r$niq$1@ger.gmane.org>	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
	<471BF38F.3030804@gmail.com>
Message-ID: <BAY130-DS25682AE0EBF91899EE239869A0@phx.gbl>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Clifford Heath
> Sent: Sunday, October 21, 2007 5:49 PM
> To: antlr-interest at antlr.org
> Cc: public-antlr-interest-ErkRXerACLvYtjvyW6yDsg at ciao.gmane.org
> Subject: Re: [antlr-interest] Lexer bug?
> 
> Jim Idle wrote:
> > This isn't a bug.
> 
> Nonsense. Any lexer that consumes characters that aren't a legal token,
> and announces a legal token without flagging an error, has a bug.

OK then. Well, I guess you know best :-)

Jim
 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date: 10/21/2007
3:09 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/0d060eb2/attachment.html 

From jimi at temporal-wave.com  Mon Oct 22 08:49:12 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Oct 2007 08:49:12 -0700
Subject: [antlr-interest] Modify java source code with ANTLR
In-Reply-To: <891426.29551.qm@web27802.mail.ukl.yahoo.com>
References: <891426.29551.qm@web27802.mail.ukl.yahoo.com>
Message-ID: <BAY130-DS315E7A38C84776D4577C3869A0@phx.gbl>

Do wish to actually comment them out, or just override them with methods
that do nothing, or something else of your choosing? Depending on how deep
you want to go into it, you may be able to just inherit from the lexer or
parser classes and implement your own methods? Of course the source code is
yours to do as you will with it, including make derivates as say Loring has
done, so if inheriting and overriding is not practical for you, then you
could just comment the code out and recompile, as you suggest :-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Friedhelm Hellerhoff
> Sent: Monday, October 22, 2007 2:38 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Modify java source code with ANTLR
> 
> What is the best way to modify some only specific
> methods in a java source code file using ANTLR?
> 
> I have already downloaded and compiled the Java 1.5
> grammar for v3. I can run the lexer and parser code
> successfully.
> I want to comment out a hand full of methods (with
> specific names that I know) in different java files.
> 
> Thanks for any answer!
> 
> 
> 
>       Jetzt Mails schnell in einem Vorschaufenster ?berfliegen. Dies
> und viel mehr bietet das neue Yahoo! Mail - www.yahoo.de/mail
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date:
> 10/21/2007 3:09 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date: 10/21/2007
3:09 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/c0bc10dd/attachment.html 

From Austin_Hastings at Yahoo.com  Mon Oct 22 09:12:06 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 22 Oct 2007 12:12:06 -0400
Subject: [antlr-interest] Modify java source code with ANTLR
In-Reply-To: <BAY130-DS315E7A38C84776D4577C3869A0@phx.gbl>
References: <891426.29551.qm@web27802.mail.ukl.yahoo.com>
	<BAY130-DS315E7A38C84776D4577C3869A0@phx.gbl>
Message-ID: <471CCBD6.30606@Yahoo.com>

Jim,

I have the impression that the OP wants to use ANTLR to generate a 
Rewriter, that will comment out methods in other, non-antlr, source files.

Friedhelm,

You might try examining the start/stop tokens associated with the 
methods in question. The easiest solution of all might be to generate a 
sed script like

sed -e '22,44s,^,//~commented-out~,'

that you would run on the files, where 22,44 would be the starting and 
ending lines mentioned above. The rules have $start and $stop 
attributes, but I think that $stop can only be used inside an @after 
action on the rule. Something like

grammar java;
/* blah blah  blah */

method
    @after { System.out.println("Method " + $name.text + " starts at 
line: " + $start.line + " and ends at line: " + $stop.line); }
    : type name '{' statement* '}'
   ;

Except it's more complicated. :-(

=Austin

Jim Idle wrote:
>
> Do wish to actually comment them out, or just override them with 
> methods that do nothing, or something else of your choosing? Depending 
> on how deep you want to go into it, you may be able to just inherit 
> from the lexer or parser classes and implement your own methods? Of 
> course the source code is yours to do as you will with it, including 
> make derivates as say Loring has done, so if inheriting and overriding 
> is not practical for you, then you could just comment the code out and 
> recompile, as you suggest :-)
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Friedhelm Hellerhoff
> > Sent: Monday, October 22, 2007 2:38 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Modify java source code with ANTLR
> >
> > What is the best way to modify some only specific
> > methods in a java source code file using ANTLR?
> >
> > I have already downloaded and compiled the Java 1.5
> > grammar for v3. I can run the lexer and parser code
> > successfully.
> > I want to comment out a hand full of methods (with
> > specific names that I know) in different java files.
> >
> > Thanks for any answer!
> >
> >
> >
> >       Jetzt Mails schnell in einem Vorschaufenster ?berfliegen. Dies
> > und viel mehr bietet das neue Yahoo! Mail - www.yahoo.de/mail
> >
> > No virus found in this incoming message.
> > Checked by AVG Free Edition.
> > Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date:
> > 10/21/2007 3:09 PM
> >
>
> No virus found in this outgoing message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date: 
> 10/21/2007 3:09 PM
>  
>
> ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.15.5/1085 - Release Date: 10/22/2007 10:35 AM
>   


From jimi at temporal-wave.com  Mon Oct 22 09:29:44 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Oct 2007 09:29:44 -0700
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <471BF38F.3030804@gmail.com>
References: <fff09r$niq$1@ger.gmane.org>	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
	<471BF38F.3030804@gmail.com>
Message-ID: <BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Clifford Heath
> Sent: Sunday, October 21, 2007 5:49 PM
> To: antlr-interest at antlr.org
> Cc: public-antlr-interest-ErkRXerACLvYtjvyW6yDsg at ciao.gmane.org
> Subject: Re: [antlr-interest] Lexer bug?
> 
> Jim Idle wrote:
> > This isn't a bug.
> 
> Nonsense. Any lexer that consumes characters that aren't a legal token,
> and announces a legal token without flagging an error, has a bug.

I want to be clear what I am saying here, as it may be of benefit to others.


Basically, whether one's interpretation of the current behavior is that it
is incorrect or a bug (and I will let Ter comment as to whether these are
bugs are not ;-), the thing is that this is what currently happens if you
try and separate certain lexical decisions into separate tokens and then
expect the ANTLR analysis to work out what is required. I am of a practical
nature, and so generally work with what I have. Hence the way I write my
lexers is with the current behavior in mind. The current behavior being what
it is, I suggest a more pragmatic approach, being as detailed in previous
posts, and which is, where possible, to combine common roots into one rule
and split the lexing decisions at the obvious points; where the common
root(s) diverge. Somehow, to me at least, this seems intuitive and natural,
and it also allows the lexer to recognize certain malformed tokens, which
can result in clearer error messages.

Basically, I consider it more like a compiler, that may well one day be able
to perform more analysis of my source code and produce better target code,
but doesn't right now. The better input I give it, in terms of what it can
deal with, then the more efficient will be my code. This situation is of
course not quite analogous to the optimizing of a poor algorithm vs a good
algorithm, but at least in approach, it is how I look at it. Hence, it seems
to me that if I encode the recognition of one or more tokens, which have
common roots, as explicitly having these common roots, then I give the
analysis and code generation phases a better chance of producing better code
than they otherwise would (for the moment).

Now, Ter has acknowledged that there is plenty of scope for optimizing the
generated code, and that to date this has not been top priority other than
making sure that the code is not weak in this regard. Hence, when you look
at the generated code for some things, you can see that there is room for
improvement, but that generally I is sound. This is of course more to do
with how the analysis works (or doesn?t, if you believe this to be a bug
:-).

So, perhaps this is a good point to separate the points that Gavin and
Loring make, which seem reasonable points, from the "this is what works and
you won't regret this structure anyway", which is what I am getting at.

It seems to me, that whatever ANTLR did or do not do with constructs
embodied by the examples in this thread, that pooling the descriptions into
one rule results in a much more readable source grammar, where you can
easily visualize the paths the lexer must take to resolve the tokens. Hence,
even should Ter change the current analysis (and he may, I don't know what
the crazy bugger will do next ;-)), that I should probably instinctively
code the lexer rules like this. When I return to a grammar 12 months later,
it will still be obvious what the lexer is doing, whereas with disparate
rules, I will have to manually inspect the code until I remember. While
predicates and so on are not 'wrong', or they would not be available at all,
it seems that if I have an option not to use a predicate, by utilizing a
different structure, then I ought to take it.

I think (and correct me Loring if I am wrong), that Loring is saying that
the code produced by my example, should also be the structure produced when
the tokens are specified separately, as in fact the same thing is being
asked for; he may well have a point. However, in purely practical terms, it
seems better to acknowledge how things are at the moment and utilize a
practical solution that does not involve tricks or hacks, but just
specifying the grammar in a way that the tool is happy with. While the
theory is interesting and if there is a 'bug' in the LL(*) implementation,
then it needs to be explored, most of us are trying to use the tool to
produce a product of some sort.

It wasn't my intention to offend and elicit an emphatic "nonsense" response.
However I should point out that the accusation is of course erroneous. The
lexer produces code that is in line with the original design. If one wants
it to work a different way, then this is fine and one is free to make the
point and argue sensibly for a change of heart, as both Gavin and Loring do
for instance. But, we should maintain civility if possible.

So, in short, my post was there to help you get this particular lexer
working, and it will work if you use that approach. We can discuss how it
'should' work until the cows come home, but in the same way that DBMS xyz
'should' do 'abc', but doesn't, then we take the pragmatic approach and work
with what we have, rather than hoping people will read Codd properly and
implement that and so on. This will result in less frustration and more
success all around. I am sure that Ter did not produce this tool so that it
would frustrate the hell out of anyone - rather that opposite. It is however
a tricky problem and if it were not, then there would already be the perfect
analysis and code generator in place, and it would have been done long ago.
I find ANTLR to be the best tool around at the moment, it may not be so for
every individual and every situation!

Anyway, I hope that everyone is successful in their endeavors and that we
can maintain the helpful attitude that generally prevails here!

Jim

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date: 10/21/2007
3:09 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/a4b308b2/attachment-0001.html 

From jimi at temporal-wave.com  Mon Oct 22 09:59:43 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Oct 2007 09:59:43 -0700
Subject: [antlr-interest] Bug in generated java - @before
In-Reply-To: <FD0F10AD-4D56-4146-8522-3BA9B7C56E43@cse.unsw.edu.au>
References: <FD0F10AD-4D56-4146-8522-3BA9B7C56E43@cse.unsw.edu.au>
Message-ID: <BAY130-DS3D26EDDE943B3B08F68BB869A0@phx.gbl>

Try
@init


There is also an @declarations for the C target, where you cannot initialize
and declare a variable at the same time.

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Joseph Gentle
> Sent: Monday, October 22, 2007 7:01 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Bug in generated java - @before
> 
> There seems to be a bug in the code generator for java.
> 
> Short version:  @before code is ignored and not placed in the
> generated code.
> 
> Long version:
> 
> I want to do this:
> 
> @options { backtrack=true; }
> blah	:
> { int some_var; }
> stuff* { op(some_var); };
> 
> This won't work because the generated code puts 'int some_var;' into
> an isolated if(backtrack==0) {} block.
> 
> This should work:
> 
> @options { backtrack=true; }
> blah
> @before { int some_var; }
> : stuff* { op(some_var); };
> 
> .. but the 'int some_var;' code does not appear at all in the
> generated code.
> 
> Any ideas?
> 
> -Joseph
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date:
> 10/21/2007 3:09 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date: 10/21/2007
3:09 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/5b120b22/attachment.html 

From kverma at yahoo.com  Mon Oct 22 10:22:19 2007
From: kverma at yahoo.com (Kamal Verma)
Date: Mon, 22 Oct 2007 10:22:19 -0700 (PDT)
Subject: [antlr-interest] Modify java source code with ANTLR
Message-ID: <146240.1699.qm@web54602.mail.re2.yahoo.com>

You might want to check out Harmonia project as well.

http://harmonia.cs.berkeley.edu/harmonia/research/pmit/index.html
http://harmonia.cs.berkeley.edu/papers/maratb-icse03-extended-abstract.pdf

_K

----- Original Message ----
From: Austin Hastings <Austin_Hastings at Yahoo.com>
To: Jim Idle <jimi at temporal-wave.com>
Cc: antlr-interest at antlr.org
Sent: Monday, October 22, 2007 12:12:06 PM
Subject: Re: [antlr-interest] Modify java source code with ANTLR

Jim,

I have the impression that the OP wants to use ANTLR to generate a 
Rewriter, that will comment out methods in other, non-antlr, source
 files.

Friedhelm,

You might try examining the start/stop tokens associated with the 
methods in question. The easiest solution of all might be to generate a
 
sed script like

sed -e '22,44s,^,//~commented-out~,'

that you would run on the files, where 22,44 would be the starting and 
ending lines mentioned above. The rules have $start and $stop 
attributes, but I think that $stop can only be used inside an @after 
action on the rule. Something like

grammar java;
/* blah blah  blah */

method
    @after { System.out.println("Method " + $name.text + " starts at 
line: " + $start.line + " and ends at line: " + $stop.line); }
    : type name '{' statement* '}'
   ;

Except it's more complicated. :-(

=Austin

Jim Idle wrote:
>
> Do wish to actually comment them out, or just override them with 
> methods that do nothing, or something else of your choosing?
 Depending 
> on how deep you want to go into it, you may be able to just inherit 
> from the lexer or parser classes and implement your own methods? Of 
> course the source code is yours to do as you will with it, including 
> make derivates as say Loring has done, so if inheriting and
 overriding 
> is not practical for you, then you could just comment the code out
 and 
> recompile, as you suggest :-)
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Friedhelm Hellerhoff
> > Sent: Monday, October 22, 2007 2:38 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Modify java source code with ANTLR
> >
> > What is the best way to modify some only specific
> > methods in a java source code file using ANTLR?
> >
> > I have already downloaded and compiled the Java 1.5
> > grammar for v3. I can run the lexer and parser code
> > successfully.
> > I want to comment out a hand full of methods (with
> > specific names that I know) in different java files.
> >
> > Thanks for any answer!
> >
> >
> >
> >       Jetzt Mails schnell in einem Vorschaufenster ?berfliegen.
 Dies
> > und viel mehr bietet das neue Yahoo! Mail - www.yahoo.de/mail
> >
> > No virus found in this incoming message.
> > Checked by AVG Free Edition.
> > Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date:
> > 10/21/2007 3:09 PM
> >
>
> No virus found in this outgoing message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date: 
> 10/21/2007 3:09 PM
>  
>
>
 ------------------------------------------------------------------------
>
> No virus found in this incoming message.
> Checked by AVG Free Edition. 
> Version: 7.5.488 / Virus Database: 269.15.5/1085 - Release Date:
 10/22/2007 10:35 AM
>   






__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/6b5f9ba9/attachment.html 

From guillaume.chavanon at systemsvip.com  Mon Oct 22 11:04:54 2007
From: guillaume.chavanon at systemsvip.com (Guillaume Chavanon)
Date: Mon, 22 Oct 2007 20:04:54 +0200
Subject: [antlr-interest] Problem with scope in members functions
Message-ID: <471CE646.3030700@systemsvip.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/6a58f78c/attachment.html 

From antlr at smabber.com  Mon Oct 22 11:30:34 2007
From: antlr at smabber.com (S West)
Date: Mon, 22 Oct 2007 19:30:34 +0100
Subject: [antlr-interest] Problem using string literals
Message-ID: <471CEC4A.2060907@smabber.com>

>  Clifford Heath wrote:
> 
> S West wrote:
>> > grammar Test;
>> > test        :    (LETTER | '-')+;
>> > unrelated_rule    :    'BONGO: ' LETTER;
>> > LETTER        :    ('A'..'Z');
> 
> LETTER and 'BONGO: ' are both lexical rules.
> When Antlr sees a 'B', it says "this could be BONGO",
> and looks further until it finds out. If not, it returns
> LETTER instead.
> 
> That process produces a token stream, which is fed to the
> non-lexical rules (test). It sees a BONGO token and barfs
> because it was unexpected.
> 
>> > I do not understand why this is happening, the literal 'BONGO: ' is in a 
>> > totally separate and unreferred-to parser rule.
> 
> No, it's a lexer rule, which is called from an unrelated parser rule.
> All lexer rules get applied before any parser rule sees the results.
> 
> Cifford.

Thanks for your clarification and insight, Clifford.
I shall concentrate my efforts on getting the lexing right.

Cheers
Simon

From paul at paulkeir.com  Mon Oct 22 12:00:01 2007
From: paul at paulkeir.com (Paul Keir)
Date: Mon, 22 Oct 2007 20:00:01 +0100
Subject: [antlr-interest] Modify java source code with ANTLR
In-Reply-To: <471CCBD6.30606@Yahoo.com>
References: <471CCBD6.30606@Yahoo.com>
Message-ID: <471CF331.3080900@paulkeir.com>

Following on from Austin's comments, I'd suggest looking into 
'TokenRewriteStream'. Replacing CommonTokenStream with TokenRewrteStream 
in your rewriter's Main.java could be a good place to start.

Ciao,
Paul

From lgcraymer at yahoo.com  Mon Oct 22 12:08:43 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Mon, 22 Oct 2007 12:08:43 -0700 (PDT)
Subject: [antlr-interest] Lexer bug?
Message-ID: <159726.69065.qm@web55902.mail.re3.yahoo.com>

Jim--

I think that you represent the pragmatic "make it work now" view fairly well.  I also think that the exchange

> Jim Idle wrote:


> > This isn't a bug.


> 


> Nonsense. Any lexer that consumes characters that aren't a legal token,


> and announces a legal token without flagging an error, has a bug.


represents a real frustration with the defect recognition process.  It took Ter well over a year to fix the premature optimization of synpreds during which time the mantra was "This isn't a bug"; meanwhile, there were grammars which could not be implemented in ANTLR 3.  I suspect that Austin's, Gavin's and my reaction would be very different if the response had been "Hmm.  I do not see how to fix this right now and am not sure I want to, but I will add it to the bug list.  In the meantime ...".  The point of making bug reports is not "Help!  I need a workaround!" as a rule, although that may be part of it, but rather "If this were fixed, it would improve the utility and user-friendliness of ANTLR".  The LL* algorithm is very nice, but there are still some rough edges with the implementation that need to be recognized and fixed; these rough edges do not have to be smoothed right away (there are workarounds), but they do need to be recognized so that they
 can eventually be fixed.


--Loring



__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/a9e75959/attachment.html 

From paul at paulkeir.com  Mon Oct 22 12:12:26 2007
From: paul at paulkeir.com (Paul Keir)
Date: Mon, 22 Oct 2007 20:12:26 +0100
Subject: [antlr-interest] Bug in generated java - @before
In-Reply-To: <BAY130-DS3D26EDDE943B3B08F68BB869A0@phx.gbl>
References: <BAY130-DS3D26EDDE943B3B08F68BB869A0@phx.gbl>
Message-ID: <471CF61A.4080802@paulkeir.com>

This reminds me of some problems I had with @init ( 
http://tinyurl.com/2vn2my ). I find it best to steer well clear of it.
Paul

From vx_babiy at laurentian.ca  Mon Oct 22 13:44:37 2007
From: vx_babiy at laurentian.ca (Volodymyr Babiy)
Date: Mon, 22 Oct 2007 16:44:37 -0400
Subject: [antlr-interest] Modify content of the token
Message-ID: <471CD375020000F100004E30@lugwout.laurentian.ca>

Hi,

I have a token such as  ;; SOME TEXT ;;

This token appears in the tree as ;; SOME TEXT ;;

I would like to strip semicolons from that token, allowing only SOME TEXT to appear in the token. If some one can help me with this task, I would greatly appreciate the help.

Cheers,
Volodymyr Babiy 


From jaluber at gmx.de  Mon Oct 22 14:38:15 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 22 Oct 2007 23:38:15 +0200
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <159726.69065.qm@web55902.mail.re3.yahoo.com>
References: <159726.69065.qm@web55902.mail.re3.yahoo.com>
Message-ID: <471D1847.8050206@gmx.de>

Loring Craymer wrote:
...
> these rough edges do not have to be smoothed right away (there are
> workarounds), but they do need to be recognized so that they can
> eventually be fixed.

I concur - building compilers is complex enough that additional problems
through the used tools should be minimized as possible.

Johannes

From clifford.heath at gmail.com  Mon Oct 22 17:47:05 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 23 Oct 2007 10:47:05 +1000
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>
References: <fff09r$niq$1@ger.gmane.org>	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>	<471BF38F.3030804@gmail.com>
	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>
Message-ID: <ffjgad$sl9$1@ger.gmane.org>

Jim Idle wrote:
>  > Jim Idle wrote:
>  > > This isn't a bug.
>  > Nonsense. Any lexer that consumes characters that aren't a legal token,
>  > and announces a legal token without flagging an error, has a bug.
> It wasn't my intention to offend and elicit an emphatic "nonsense" 
> response. However I should point out that the accusation is of course 
> erroneous. The lexer produces code that is in line with the original 
> design.

First up, let me say that I'm sorry my post was thought uncivil. I do
appreciate the helpful discussion and workarounds offered, and I don't
mean to disparage anyone.

However, I still maintain that the job of a lexer is to divide the input
into tokens, without discarding any. If it's unable to do that, it must
report an error. If not, then the tokens must be correctly matched. There
is no middle path, and any design that allows one is faulty, even if the
code implements the design perfectly. Such principles are black-and-white,
and that's why I used the word "nonsense".

With that out of the way, it's perfectly valid to look for pragmatic ways
to rewrite the rules to avoid the (design) bug, and I thank you for offering
suggestions.

With regard to the suggestions offered, I'm not sure I understand all of
them, and if I do, I'm not sure I want to implement that way. For example,
it seemed that one suggestion would have it that I should recognize the
string "0.12 ..  3.5" as a single token... and I'm *sure* I don't want to
do that!

Loring's suggestion seems closest to the money. I've just rewritten the
rule as follows (with decimal, octal and hexadecimal literals rolled in),
and it works. It does seem bizarre that I can't separate integers from
reals in the lexer, but I'll live with that: 

NUMBER
:	'0'
|	'0' ('0'..'7')+		// An octal integer
|	'0' 'x' HEXDIGIT+	// A hexadecimal integer
|	SIGN? '1'..'9' DIGIT*	// A decimal integer
|	SIGN? DIGIT+ FRACTION	// a real number
|	SIGN? DIGIT+ EXPONENT
|	SIGN? DIGIT+ FRACTION EXPONENT
|	SIGN? FRACTION EXPONENT?
;

This even parses "0...1" correctly... though I'd cane anyone who wrote that!

It's very odd to me that this behaves so differently, but there you go -
it does! Thanks to all for the help.

Clifford Heath.


From kirby.bohling at gmail.com  Mon Oct 22 19:01:14 2007
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Mon, 22 Oct 2007 21:01:14 -0500
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <ffjgad$sl9$1@ger.gmane.org>
References: <fff09r$niq$1@ger.gmane.org> <471B415D.6070506@Yahoo.com>
	<fffg14$v05$1@ger.gmane.org> <471B55A9.5040307@Yahoo.com>
	<ffgpri$kcp$1@ger.gmane.org>
	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
	<471BF38F.3030804@gmail.com>
	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>
	<ffjgad$sl9$1@ger.gmane.org>
Message-ID: <3cac8fdf0710221901x95be776ud1f8704469018f4b@mail.gmail.com>

On 10/22/07, Clifford Heath <clifford.heath at gmail.com> wrote:
> Jim Idle wrote:
> >  > Jim Idle wrote:
> >  > > This isn't a bug.
> >  > Nonsense. Any lexer that consumes characters that aren't a legal token,
> >  > and announces a legal token without flagging an error, has a bug.
> > It wasn't my intention to offend and elicit an emphatic "nonsense"
> > response. However I should point out that the accusation is of course
> > erroneous. The lexer produces code that is in line with the original
> > design.
>
> First up, let me say that I'm sorry my post was thought uncivil. I do
> appreciate the helpful discussion and workarounds offered, and I don't
> mean to disparage anyone.
>
> However, I still maintain that the job of a lexer is to divide the input
> into tokens, without discarding any. If it's unable to do that, it must
> report an error. If not, then the tokens must be correctly matched. There
> is no middle path, and any design that allows one is faulty, even if the
> code implements the design perfectly. Such principles are black-and-white,
> and that's why I used the word "nonsense".
>

I could see how a person could perceive your statement of "black and
white" as being too strongly worded.  You can have strong opinions,
but that's stated as an absolute fact. I think the design of Antlr
worked fairly hard to not follow a principle you consider absolute.  I
happen to agree with you, but that's besides the point.

I think you just disagreed with a fundamental decision of Antlr3
(Antlr2 might also do it, but I don't know)... I mean Antlr3 works
fairly hard recover by skipping a single token and proceed on.

During interactive behavior, it seems like it'd be really nice, but
during a batch run (like compiling source), I really dislike it.  It'd
be nice if I had some opportunity to programatically control that.
I'd also say that fundamentally, I'd really like it if Antlr did some
of these:

1. Warned me at generation time that my grammar has an LL(1) case
where the error recovery might do something counter-intuitive.  So at
least, I'd know something was off prior to discovering during testing
my grammar.

2. Gave me programmatic ability to disable the LL(1) recovery at
generation and/or run time preferrable run time (or the ability to
generate two different parsers for the same grammer, one with error
recovery, the other out).

3. It never used LL(1) recovery until it had exhaustively searched for
other solutions.

If I could figure out how to get Antlr building, I'd try and help.
Alas the Ant scripts are failing me, and I haven't had time to fix it
(I think it's mostly that Antlr 2.7 isn't installed correctly on for
Ant to pick it up).

Fundamentally, the automatic recovery feels like it can cause some of
the same problems that HTML and Web Browsers did forever.  Given some
input that is really close to what I want, but is slightly wrong,
leads to very strange behavior because some tool is guessing what I
meant instead of saying "I'm sorry Dave, I'm afraid I can't do that.".
 I'd really like a way to put Antlr into a very, very strict mode.
Hacking around in the exception handling of both the parser and the
lexer is just inelegant.

Alas, I get nothing but silence so far.  Hopefully folks don't find my
e-mails too annoying.

Thanks,
    Kirby

From jimi at temporal-wave.com  Mon Oct 22 23:46:19 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 22 Oct 2007 23:46:19 -0700
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <3cac8fdf0710221901x95be776ud1f8704469018f4b@mail.gmail.com>
References: <fff09r$niq$1@ger.gmane.org>
	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>
	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>	<471BF38F.3030804@gmail.com>	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>	<ffjgad$sl9$1@ger.gmane.org>
	<3cac8fdf0710221901x95be776ud1f8704469018f4b@mail.gmail.com>
Message-ID: <BAY130-DS373C9D05E69E990D814C2869B0@phx.gbl>

All the comments are well met by me, and I delight in the fact that we have
re-established, if indeed it was ever lost, a level of civility that is
becoming of a difficult and absorbing topic. 

As Loring stated, the important thing is to distill from such discussion,
those serious issues that (though he did not state this explicitly) are
founded on sound theory, or developing theory, recognize where the current
system departs from this, and think about how to deal with it. It is my only
wish to divide this from what CAN be done now. Separate threads can then
deal with the sound (or even unsound) points about the analysis of
constructs as well as how close to LL(*) they are or might be. If one finds
a working path through discussion here, then this is a good thing indeed.

My own leaning, while I understand completely the theoretical basis of all
the points made thus far, is only that we should enable the realization of
lexers, parsers and tree walkers with what is the actuality of the moment,
while endeavoring to further the actualization of theories both long
established and being explored, while maintaining an attitude that promotes
both exploration and correction of paths new and old. (Apologies for all the
commas in that statement Mr. Wittgenstein).

I thank everyone for their courtesy and well made points - we will all
benefit from such discourse. I have felt for some time that a number of wiki
articles are needed that concern the practical course of writing grammars -
if you like, the cookbook that complements Ter's book. Perhaps this is the
moment to write such things and perhaps I will write some. It is a concern
that such an article may draw comments and critique outside the domain that
it is meant for, but what the hey! 

There are few of us that are writing full blown compilers these days [slight
paraphrase from something said by Terence], but many people would like to
know how to knock up a parser for something slightly more complicated than
x=y newline a=b etc. For such needs, a guide to just getting the thing done
efficiently is probably more useful than discussions of just what the
difference between LALR, LR, LL, LK, NBA and LXMAKEITUPHERE is. The interest
and validity in theory is obvious, but for many the question is "So what do
I do to make this work?" is probably more poignant :-)

Jim   



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kirby Bohling
> Sent: Monday, October 22, 2007 7:01 PM
> To: Clifford Heath
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexer bug?
> 
> On 10/22/07, Clifford Heath <clifford.heath at gmail.com> wrote:
> > Jim Idle wrote:
> > >  > Jim Idle wrote:
> > >  > > This isn't a bug.
> > >  > Nonsense. Any lexer that consumes characters that aren't a legal
> token,
> > >  > and announces a legal token without flagging an error, has a
> bug.
> > > It wasn't my intention to offend and elicit an emphatic "nonsense"
> > > response. However I should point out that the accusation is of
> course
> > > erroneous. The lexer produces code that is in line with the
> original
> > > design.
> >
> > First up, let me say that I'm sorry my post was thought uncivil. I do
> > appreciate the helpful discussion and workarounds offered, and I
> don't
> > mean to disparage anyone.
> >
> > However, I still maintain that the job of a lexer is to divide the
> input
> > into tokens, without discarding any. If it's unable to do that, it
> must
> > report an error. If not, then the tokens must be correctly matched.
> There
> > is no middle path, and any design that allows one is faulty, even if
> the
> > code implements the design perfectly. Such principles are black-and-
> white,
> > and that's why I used the word "nonsense".
> >
> 
> I could see how a person could perceive your statement of "black and
> white" as being too strongly worded.  You can have strong opinions,
> but that's stated as an absolute fact. I think the design of Antlr
> worked fairly hard to not follow a principle you consider absolute.  I
> happen to agree with you, but that's besides the point.
> 
> I think you just disagreed with a fundamental decision of Antlr3
> (Antlr2 might also do it, but I don't know)... I mean Antlr3 works
> fairly hard recover by skipping a single token and proceed on.
> 
> During interactive behavior, it seems like it'd be really nice, but
> during a batch run (like compiling source), I really dislike it.  It'd
> be nice if I had some opportunity to programatically control that.
> I'd also say that fundamentally, I'd really like it if Antlr did some
> of these:
> 
> 1. Warned me at generation time that my grammar has an LL(1) case
> where the error recovery might do something counter-intuitive.  So at
> least, I'd know something was off prior to discovering during testing
> my grammar.
> 
> 2. Gave me programmatic ability to disable the LL(1) recovery at
> generation and/or run time preferrable run time (or the ability to
> generate two different parsers for the same grammer, one with error
> recovery, the other out).
> 
> 3. It never used LL(1) recovery until it had exhaustively searched for
> other solutions.
> 
> If I could figure out how to get Antlr building, I'd try and help.
> Alas the Ant scripts are failing me, and I haven't had time to fix it
> (I think it's mostly that Antlr 2.7 isn't installed correctly on for
> Ant to pick it up).
> 
> Fundamentally, the automatic recovery feels like it can cause some of
> the same problems that HTML and Web Browsers did forever.  Given some
> input that is really close to what I want, but is slightly wrong,
> leads to very strange behavior because some tool is guessing what I
> meant instead of saying "I'm sorry Dave, I'm afraid I can't do that.".
>  I'd really like a way to put Antlr into a very, very strict mode.
> Hacking around in the exception handling of both the parser and the
> lexer is just inelegant.
> 
> Alas, I get nothing but silence so far.  Hopefully folks don't find my
> e-mails too annoying.
> 
> Thanks,
>     Kirby
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date:
> 10/21/2007 3:09 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.5/1084 - Release Date: 10/21/2007
3:09 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071022/124aab4f/attachment-0001.html 

From fhellerhoff at yahoo.de  Tue Oct 23 00:21:36 2007
From: fhellerhoff at yahoo.de (Friedhelm Hellerhoff)
Date: Tue, 23 Oct 2007 09:21:36 +0200
Subject: [antlr-interest] Modify java source code with ANTLR
In-Reply-To: <471CCBD6.30606@Yahoo.com>
References: <471CCBD6.30606@Yahoo.com>
Message-ID: <471DA100.7030109@yahoo.de>

Austin is right,

I have some own java classes where I want to comment out some of the 
methods.

- Friedhelm -

From parrt at cs.usfca.edu  Tue Oct 23 01:22:57 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Oct 2007 16:22:57 +0800
Subject: [antlr-interest] Problem with scope in members functions
In-Reply-To: <471CE646.3030700@systemsvip.com>
References: <471CE646.3030700@systemsvip.com>
Message-ID: <4BC63754-2E5A-4619-BB59-130E1C8555B1@cs.usfca.edu>


On Oct 23, 2007, at 2:04 AM, Guillaume Chavanon wrote:

> Hi All.
>
> Is somebody knows why, when I write "$MyScope::MyAttribute = ...."  
> in a function in the members section, Antlr raise the following  
> exception :
>
> error(10):  internal error: scope_in_members.g :  
> java.lang.NullPointerException
> org.antlr.codegen.ActionTranslatorLexer.translateAction 
> (ActionTranslatorLexer.java:135)
> org.antlr.codegen.ActionTranslatorLexer.mSET_DYNAMIC_SCOPE_ATTR 
> (ActionTranslatorLexer.java:1131)
> org.antlr.codegen.ActionTranslatorLexer.mTokens 
> (ActionTranslatorLexer.java:2897)
> org.antlr.codegen.ActionTranslatorLexer.nextToken 
> (ActionTranslatorLexer.java:218)
> org.antlr.codegen.ActionTranslatorLexer.translateToChunks 
> (ActionTranslatorLexer.java:117)
> org.antlr.codegen.CodeGenerator.translateAction(CodeGenerator.java: 
> 870)
> org.antlr.codegen.CodeGenerator.translateActionAttributeReferencesForS 
> ingleScope(CodeGenerator.java:512)
> org.antlr.codegen.CodeGenerator.translateActionAttributeReferences 
> (CodeGenerator.java:495)
> org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:315)
> org.antlr.Tool.processGrammar(Tool.java:347)
> org.antlr.Tool.process(Tool.java:268)
> org.antlr.Tool.main(Tool.java:70)
>
>
> This is my grammar :
>
> grammar scope_in_members;
>
> scope Parag {
>     int nbWord
> }
>
> @members{
>     void incrementNbWord() {
>         $Parag::nbWord = $Parag::nbWord + 1;
>     }
> }
>

hi. It means you are calling this method w/o having a rule declaring  
"scope Parag;".

Ter


From parrt at cs.usfca.edu  Tue Oct 23 01:27:12 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Oct 2007 16:27:12 +0800
Subject: [antlr-interest] Modify java source code with ANTLR
In-Reply-To: <471DA100.7030109@yahoo.de>
References: <471CCBD6.30606@Yahoo.com> <471DA100.7030109@yahoo.de>
Message-ID: <970F17E9-06E2-4774-A355-12701BE95815@cs.usfca.edu>


On Oct 23, 2007, at 3:21 PM, Friedhelm Hellerhoff wrote:

> Austin is right,
>
> I have some own java classes where I want to comment out some of  
> the methods.

Hi. This is pretty easy with a rewrite engine.  Just say engine.delete 
($methodDef.start, $methodDef.stop) when you are in the right method  
to delete. :)  toString the buffer and they will have disappeared.  
voila :)
Ter

From parrt at cs.usfca.edu  Tue Oct 23 01:27:45 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Oct 2007 16:27:45 +0800
Subject: [antlr-interest] Modify content of the token
In-Reply-To: <471CD375020000F100004E30@lugwout.laurentian.ca>
References: <471CD375020000F100004E30@lugwout.laurentian.ca>
Message-ID: <D2A66CC9-1C72-4058-A963-00D30DD07388@cs.usfca.edu>

see the FAQ for stripping quotes; same problem.
Ter
On Oct 23, 2007, at 4:44 AM, Volodymyr Babiy wrote:

> Hi,
>
> I have a token such as  ;; SOME TEXT ;;
>
> This token appears in the tree as ;; SOME TEXT ;;
>
> I would like to strip semicolons from that token, allowing only  
> SOME TEXT to appear in the token. If some one can help me with this  
> task, I would greatly appreciate the help.
>
> Cheers,
> Volodymyr Babiy
>


From guillaume.chavanon at systemsvip.com  Tue Oct 23 02:37:06 2007
From: guillaume.chavanon at systemsvip.com (Guillaume Chavanon)
Date: Tue, 23 Oct 2007 11:37:06 +0200
Subject: [antlr-interest] Problem with scope in members functions
In-Reply-To: <4BC63754-2E5A-4619-BB59-130E1C8555B1@cs.usfca.edu>
References: <471CE646.3030700@systemsvip.com>
	<4BC63754-2E5A-4619-BB59-130E1C8555B1@cs.usfca.edu>
Message-ID: <471DC0C2.9070406@systemsvip.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071023/12c2d77e/attachment.html 

From parrt at cs.usfca.edu  Tue Oct 23 02:51:06 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Oct 2007 17:51:06 +0800
Subject: [antlr-interest] Problem with scope in members functions
In-Reply-To: <471DC0C2.9070406@systemsvip.com>
References: <471CE646.3030700@systemsvip.com>
	<4BC63754-2E5A-4619-BB59-130E1C8555B1@cs.usfca.edu>
	<471DC0C2.9070406@systemsvip.com>
Message-ID: <9C9839A1-906E-4F3B-AE56-21F1FDFA0DE8@cs.usfca.edu>


On Oct 23, 2007, at 5:37 PM, Guillaume Chavanon wrote:

> Terence Parr wrote:Hi.
> The rule paragraph declares "scope Parag;".
> And the exception is raised when I try to generate the parser not  
> when I use it.

Oh!  Right. sorry...still suffering from jetlag here in beijing.   
anyway, i think maybe my simple algorithm is trying to look for  
assignments to scoped var and gets into a recursive weird thing here.

> More strange : it work fine if I replace
> $Parag::nbWord = $Parag::nbWord + 1;
> by
> $Parag::nbWord++;

which is why that works.  Sorry.  added bug:

http://www.antlr.org:8888/browse/ANTLR-185

Ter

>
> Regards,
> -- 
> Systems'ViP
> (Boost your R&D efficiency, implement the functional Virtual  
> Prototyping with us)
>
> Guillaume Chavanon
>
> 4 Rue Boussingault
> F - 67000 Strasbourg
> guillaume.chavanon at systemsvip.com
> www.systemsvip.com
> tel:    +33 811 036 094
> fax:    +33 874 761 346
>
> This e-mail, including attachments, is intended for the person(s)  
> or company named and may contain confidential and/or legally  
> privileged information. Unauthorized disclosure, copying or use of  
> this information may be unlawful and is prohibited. If you are not  
> the intended recipient,please delete this message and notify the  
> sender
>


From guillaume.chavanon at systemsvip.com  Tue Oct 23 03:12:39 2007
From: guillaume.chavanon at systemsvip.com (Guillaume Chavanon)
Date: Tue, 23 Oct 2007 12:12:39 +0200
Subject: [antlr-interest] list label without output
Message-ID: <471DC917.4080107@systemsvip.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071023/4adb38a9/attachment.html 

From parrt at cs.usfca.edu  Tue Oct 23 03:53:24 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 23 Oct 2007 18:53:24 +0800
Subject: [antlr-interest] list label without output
In-Reply-To: <471DC917.4080107@systemsvip.com>
References: <471DC917.4080107@systemsvip.com>
Message-ID: <B3403A4D-8430-4AAE-B496-9659D6CA4D70@cs.usfca.edu>


On Oct 23, 2007, at 6:12 PM, Guillaume Chavanon wrote:

> Hi All.
>
> Its seems impossible to use list labels in grammar without output.
> When I try generating my grammar Antlr complains with the following  
> error :
> error(134): ResolveSymbol.g:93:12: rule '+=' list labels are not  
> allowed w/o output option: ids
>
> Does somebody knows why?
>

Yes. :)  Basically, rules can have multiple return values.  Which  
should it pick?

Ter


From antlr at mirality.co.nz  Tue Oct 23 04:25:28 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 24 Oct 2007 00:25:28 +1300
Subject: [antlr-interest] Explicit whitespace handling in W3C  grammars
In-Reply-To: <db3e39e10710220632l11a8be3cnf522a29a96d2c4e7@mail.gmail.co
 m>
References: <db3e39e10710220632l11a8be3cnf522a29a96d2c4e7@mail.gmail.com>
Message-ID: <20071023112541.1B17411EBA4@www.antlr.org>

At 02:32 23/10/2007, Andreas Ravnestad wrote:
 >Consider this example:
 >A : B C;
 >
 >With explicit whitespace handling, there can NOT be whitespace
 >between B and C in this production.
 >
 >How can this be implemented with Antlr?

Write it as a lexer rule.  Since whitespace is typically converted 
into a hidden token (or discarded outright) as another (lower 
priority) lexer rule, all other lexer rules that support internal 
whitespace must explicitly state where it is allowed to occur.

(The same would be true of parser rules as well, if whitespace 
wasn't skipped or hidden during lexing.)


From antlr at mirality.co.nz  Tue Oct 23 04:47:10 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 24 Oct 2007 00:47:10 +1300
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <ffjgad$sl9$1@ger.gmane.org>
References: <fff09r$niq$1@ger.gmane.org> <471B415D.6070506@Yahoo.com>
	<fffg14$v05$1@ger.gmane.org> <471B55A9.5040307@Yahoo.com>
	<ffgpri$kcp$1@ger.gmane.org>
	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
	<471BF38F.3030804@gmail.com>
	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>
	<ffjgad$sl9$1@ger.gmane.org>
Message-ID: <20071023114720.667CA11EAE9@www.antlr.org>

At 13:47 23/10/2007, Clifford Heath wrote:
 >With regard to the suggestions offered, I'm not sure I
 >understand all of them, and if I do, I'm not sure I want
 >to implement that way. For example, it seemed that one
 >suggestion would have it that I should recognize
 >the string "0.12 ..  3.5" as a single token... and I'm
 >*sure* I don't want to do that!

True, although you could combine it with the method shown in the 
wiki regarding how to emit multiple tokens from a single lexer 
rule.  Which admittedly is a little messy too, but that's mostly 
glue code.  Once that's in place the actual procedure is pretty 
straightforward.


From clifford.heath at gmail.com  Tue Oct 23 05:00:56 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 23 Oct 2007 22:00:56 +1000
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <20071023114720.667CA11EAE9@www.antlr.org>
References: <fff09r$niq$1@ger.gmane.org>
	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>
	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>	<471BF38F.3030804@gmail.com>	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>	<ffjgad$sl9$1@ger.gmane.org>
	<20071023114720.667CA11EAE9@www.antlr.org>
Message-ID: <ffknpo$59p$1@ger.gmane.org>

Gavin Lambert wrote:
> At 13:47 23/10/2007, Clifford Heath wrote:
>  >...I should recognize
>  >the string "0.12 ..  3.5" as a single token... and I'm
>  >*sure* I don't want to do that!
> True, although you could combine it with the method shown in the wiki 
> regarding how to emit multiple tokens from a single lexer rule.  Which 
> admittedly is a little messy too, but that's mostly glue code.  Once 
> that's in place the actual procedure is pretty straightforward.

And then there's the fact that the string above has white-space embedded,
which means that it potentially interacts negatively with the whitespace
handling... or maybe not in this case. Still, I already dislike that I
have to re-lex a NUMBER to find whether it's octal, hex, integer or real.
I already paid a lexer to do that for me, so why am I doing it again?

Clifford Heath.


From antlr at mirality.co.nz  Tue Oct 23 05:16:36 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 24 Oct 2007 01:16:36 +1300
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <341705.96553.qm@web55902.mail.re3.yahoo.com>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
Message-ID: <20071023121700.EE45411EB87@www.antlr.org>

At 19:21 22/10/2007, Loring Craymer wrote:
 >Um--I don't think that this is quite right.  ANTLR 3 has an
 >inelegant tendency to make k=1 decisions when it should not.
 >Specifically:  any time there is an epsilon alternative--as in
 >FRACTION?--ANTLR tends to make a k=1 decision, as in "I see a 
'.';
 >therefore, this is a FRACTION" in Austin's NUMBER rule.  From my 

 >perspective, this is probably a bug in the LL* implementation: a 

 >lookahead DFA should be generated for such cases (to replace the 

 >"if (LA(1) == '.') mFRACTION()") that does the right thing.
[...]
 >If the FRACTION rule is inlined, ANTLR 3 will probably do the 
right
 >thing (I have not tested this example, but have had to resort to 

 >inlining in other cases).  Again, this is indicative that Austin 
is
 >correct in his assertion that this is a bug:  there should be no 

 >difference between rule invocations and the equivalent inlined
 >token or character sequences.

Just to follow up on this, I ran a few tests just now (against 
3.0.1) and inlining it doesn't help.  Here's a minimal 
reproduction grammar illustrating the problem:

lexer grammar test;
NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
OTHER: .;

Given the input sequence "10..30", the lexer *should* produce 
"NUMBER[10] OTHER[.] OTHER[.] NUMBER[30]", but it doesn't.  (I'm 
not quite sure what it does do, since there aren't really any 
facilities at the moment for debugging lexers short of writing 
some custom code, and I didn't have that much spare time.)

Looking at the generated code for this, right after matching the 
first set of digits it has this code:

             // test.g:4:16: ( '.' ( '0' .. '9' )+ )?
             int alt3=2;
             int LA3_0 = input.LA(1);

             if ( (LA3_0=='.') ) {
                 alt3=1;
             }
             switch (alt3) {
                 case 1 :
                     // 
D:\\Programming\\antlr\\tests\\test4.g:4:17: '.' ( '0' .. '9' )+
                     {
                     match('.');
                     // 
D:\\Programming\\antlr\\tests\\test4.g:4:21: ( '0' .. '9' )+
                     int cnt2=0;
                     loop2:
                     do {
                         int alt2=2;
                         int LA2_0 = input.LA(1);

                         if ( ((LA2_0>='0' && LA2_0<='9')) ) {
                             alt2=1;
                         }


                         switch (alt2) {
                     	case 1 :
                     	    // 
D:\\Programming\\antlr\\tests\\test4.g:4:22: '0' .. '9'
                     	    {
                     	    matchRange('0','9');

                     	    }
                     	    break;

                     	default :
                     	    if ( cnt2 >= 1 ) break loop2;
                                 EarlyExitException eee =
                                     new EarlyExitException(2, 
input);
                                 throw eee;
                         }
                         cnt2++;
                     } while (true);
                     }
                     break;
             }

(And yes, the indentation is a bit messed up.  This is how it 
appeared in ANTLRworks though.)

Anyway, looking at this it's clear to see that it examines only 
one character of lookahead and basically decides that if there's a 
dot then the entire optional clause must be present -- despite the 
"minimal satisfying input" for that clause being a dot followed by 
at least one digit.  So its lookahead is clearly insufficient for 
the task.  (It would have been right if that were a * or ? instead 
of a +, though.)

Interestingly, it sometimes seems to get it right.  For example, 
in this test grammar:

lexer grammar test2;
NUMBER: ('+' | '-')? ('0'..'9')+ ('.' ('0'..'9')+)?;
OTHER: .;

... the mTokens function does up to two characters of lookahead 
(if the first characters is a digit, then it's a NUMBER, otherwise 
if the first character is a plus or minus, *and* the second 
character is a digit, then it's a NUMBER, otherwise it's an 
OTHER), which is perfectly correct.  But then *this* grammar:

lexer grammar test3;
ONE	: 'one';
TWO : 'two';
OTHER: .;

... is wrong again.  Here, it also tests up to two characters of 
lookahead, which means that the input "onf" will be wrongly 
interpreted as a ONE and will produce an error rather than 
generating three OTHER tokens.


From Mike at LeBlanc-Engineering.com  Tue Oct 23 05:27:49 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Tue, 23 Oct 2007 08:27:49 -0400
Subject: [antlr-interest] Passing parameters to lexer grammars.
In-Reply-To: <20071023121700.EE45411EB87@www.antlr.org>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
Message-ID: <0A404498-B990-4C27-8C77-E8E5DAA3E86B@LeBlanc-Engineering.com>

I have something like the following in a combined parser/lexer  
grammar.  I want this to be visible to the lexer, but it isn't.

     @members {
         myClass mine = new myClass();
     }

How can I pass the myClass reference to the lexer grammar?

From antlr at mirality.co.nz  Tue Oct 23 05:31:01 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 24 Oct 2007 01:31:01 +1300
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <ffknpo$59p$1@ger.gmane.org>
References: <fff09r$niq$1@ger.gmane.org> <471B415D.6070506@Yahoo.com>
	<fffg14$v05$1@ger.gmane.org> <471B55A9.5040307@Yahoo.com>
	<ffgpri$kcp$1@ger.gmane.org>
	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>
	<471BF38F.3030804@gmail.com>
	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>
	<ffjgad$sl9$1@ger.gmane.org>
	<20071023114720.667CA11EAE9@www.antlr.org>
	<ffknpo$59p$1@ger.gmane.org>
Message-ID: <20071023123113.8F59D11EAEA@www.antlr.org>

At 01:00 24/10/2007, Clifford Heath wrote:
 >And then there's the fact that the string above has
 >white-space embedded, which means that it potentially
 >interacts negatively with the whitespace handling...
 >or maybe not in this case.

All lexer rules that permit embedded whitespace must explicitly 
specify it, since the whitespace hiding/skipping rule is at the 
same "level".  So that could potentially complicate your rule a 
bit if you wanted to handle it in there.  But if you're using 
Jim's rule (with multi-token emitting added), all you might need 
to do is to specify that whitespace is allowed after the second 
'.' of the '..' pair.

This is because if the input is "10 .. 30" you'll already get it 
as three separate tokens without doing any extra work.  If the 
input is "10..30" you'll need to handle it within the one rule 
(because of the dot recognition problem) -- but you can then emit 
the same three tokens as in the first case.  If the input is "10 
..30" the first number will be handled ok by itself, then you'll 
have to break apart the combined "..30" in a single rule and 
output two tokens (so again you end up with the same three tokens 
as in the first case).  If the input is "10.. 30" then you can 
either treat it like the second case (doing it all in one rule, by 
explicitly specifying the whitespace and outputting three tokens) 
or treat it like the third case (making a number with trailing .. 
output two tokens).

 >Still, I already dislike that I have to re-lex a NUMBER
 >to find whether it's octal, hex, integer or real.
 >I already paid a lexer to do that for me, so why am I
 >doing it again?

I don't know -- why are you?  There's certainly no need to -- just 
output different tokens in each case and then make a parser rule 
that accepts any of them when you're in a context that doesn't 
care what kind of numeric literal is provided.

(This is actually easier to do with a rule similar to what Jim 
proposed, since each path through the rule is more explicitly 
spelled out.)


From jaluber at gmx.de  Tue Oct 23 05:32:14 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 23 Oct 2007 14:32:14 +0200
Subject: [antlr-interest] Passing parameters to lexer grammars.
In-Reply-To: <0A404498-B990-4C27-8C77-E8E5DAA3E86B@LeBlanc-Engineering.com>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>	<20071023121700.EE45411EB87@www.antlr.org>
	<0A404498-B990-4C27-8C77-E8E5DAA3E86B@LeBlanc-Engineering.com>
Message-ID: <471DE9CE.6010005@gmx.de>

Michael LeBlanc wrote:
> I have something like the following in a combined parser/lexer grammar. 
> I want this to be visible to the lexer, but it isn't.
> 
>     @members {
>         myClass mine = new myClass();
>     }
> 
> How can I pass the myClass reference to the lexer grammar?
> 

Use

@lexer::members {
         myClass mine = new myClass();
     }

instead. BTW, please create a new email instead changing the subject of
a reply, as this messes the thread view up.

Johannes

From clifford.heath at gmail.com  Tue Oct 23 05:26:42 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 23 Oct 2007 22:26:42 +1000
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <BAY130-DS373C9D05E69E990D814C2869B0@phx.gbl>
References: <fff09r$niq$1@ger.gmane.org>	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>	<471BF38F.3030804@gmail.com>	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>	<ffjgad$sl9$1@ger.gmane.org>	<3cac8fdf0710221901x95be776ud1f8704469018f4b@mail.gmail.com>
	<BAY130-DS373C9D05E69E990D814C2869B0@phx.gbl>
Message-ID: <ffkpa4$bse$1@ger.gmane.org>

Jim Idle wrote:
> As Loring stated, the important thing is to distill from such 
> discussion, those serious issues that (though he did not state this 
> explicitly) are founded on sound theory, or developing theory

Well, on that note, the definition of correctness really doesn't need
much theory. At the current point in the input, all lexer rules are
active. When the next character is considered, most of them drop out
of the race. Lexing continues this way until all drop out, and then a
winner is declared - the longest match. Or some other rule, if that's
how it's defined. But the point is that it's a game of Go! - All rules
start, not all finish, then the one with the biggest score wins, and the
process starts over.

The mechanism of how to run all these independent machines efficiently
is where the theory comes in! And in knowing what kinds of patterns
they can match...

Correctness is determined by whether each rule is matched correctly,
and whether the winner is chosen correctly. That's all. Invalid input
should be thrown to a recovery method that is not silent by default.

If you want to know what "can" be done, just look at Flex. It works much
better than the Antlr lexer, judging by what I've seen. But if you meant
what can be done by the Antlr lexer...

> My own leaning, while I understand completely the theoretical basis of 
> all the points made thus far, is only that we should enable the 
> realization of lexers, parsers and tree walkers with what is the 
> actuality of the moment,

Antlr's engine is not the only one available. If it's not as good as
another alternative, people who need to will go there, and that'd be
a shame, because there are a lot of really nice things about Antlr
and the tools around it.

> There are few of us that are writing full blown compilers these days 
> [slight paraphrase from something said by Terence], but many people 
> would like to know how to knock up a parser for something slightly more 
> complicated than x=y newline a=b etc. For such needs, a guide to just 
> getting the thing done efficiently is probably more useful than 
> discussions of just what the difference between LALR, LR, LL, LK, NBA 
> and LXMAKEITUPHERE is. The interest and validity in theory is obvious, 
> but for many the question is "So what do I do to make this work?" is 
> probably more poignant :-)

I'd be keen to see some tips on how to extend the Ruby templates to build
a tree parser. I've fiddled with the templates a bit, but it's not always
clear for example what variables and enumerations are made available to
each template... a catalog would help a lot.

Clifford Heath.


From clifford.heath at gmail.com  Tue Oct 23 05:32:31 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Tue, 23 Oct 2007 22:32:31 +1000
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <20071023121700.EE45411EB87@www.antlr.org>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
Message-ID: <ffkpkv$bse$2@ger.gmane.org>

Gavin Lambert wrote:
> Just to follow up on this, I ran a few tests just now (against 3.0.1) 
> and inlining it doesn't help.

Gavin,

Did you see my message where I said that I got the following to work?
Admittedly I haven't run a comprehensive suite of test cases over it.

NUMBER
:    '0'
|    '0' ('0'..'7')+        // An octal integer
|    '0' 'x' HEXDIGIT+    // A hexadecimal integer
|    SIGN? '1'..'9' DIGIT*    // A decimal integer
|    SIGN? DIGIT+ FRACTION    // a real number
|    SIGN? DIGIT+ EXPONENT
|    SIGN? DIGIT+ FRACTION EXPONENT
|    SIGN? FRACTION EXPONENT?
;

... with the range grammar I shared earlier.

Clifford Heath.


From Mike at LeBlanc-Engineering.com  Tue Oct 23 05:44:07 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Tue, 23 Oct 2007 08:44:07 -0400
Subject: [antlr-interest] 2nd edition - Passing parameters to lexer grammars.
Message-ID: <E577B71D-6E5F-46E5-961A-41029D1EC604@LeBlanc-Engineering.com>

> Use
>
> @lexer::members {
>          myClass mine = new myClass();
>      }
>
> instead. BTW, please create a new email instead changing the  
> subject of
> a reply, as this messes the thread view up.

Now it's visible ONLY in the lexer grammar.  I need to create it in  
the parser grammar (or at some higher level) and use it in both  
parser and lexer grammars.

Sorry about the earlier message.  Is this better?

Mike

From fhellerhoff at yahoo.de  Tue Oct 23 05:49:52 2007
From: fhellerhoff at yahoo.de (Friedhelm Hellerhoff)
Date: Tue, 23 Oct 2007 14:49:52 +0200
Subject: [antlr-interest] Modify java source code with ANTLR
In-Reply-To: <970F17E9-06E2-4774-A355-12701BE95815@cs.usfca.edu>
References: <471CCBD6.30606@Yahoo.com> <471DA100.7030109@yahoo.de>
	<970F17E9-06E2-4774-A355-12701BE95815@cs.usfca.edu>
Message-ID: <471DEDF0.2030505@yahoo.de>

Hi, thanks for the answer.
So how do I have to use this engine, I guess it is the 
TokenStreamRewriteEngine? Sorry for my ignorance,
- Friedhelm -

Terence Parr schrieb:
> On Oct 23, 2007, at 3:21 PM, Friedhelm Hellerhoff wrote:
>
>> Austin is right,
>>
>> I have some own java classes where I want to comment out some of the 
>> methods.
>
> Hi. This is pretty easy with a rewrite engine.  Just say 
> engine.delete($methodDef.start, $methodDef.stop) when you are in the 
> right method to delete. :)  toString the buffer and they will have 
> disappeared. voila :)
> Ter
>


From jaluber at gmx.de  Tue Oct 23 05:57:35 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 23 Oct 2007 14:57:35 +0200
Subject: [antlr-interest] 2nd edition - Passing parameters to lexer
	grammars.
In-Reply-To: <E577B71D-6E5F-46E5-961A-41029D1EC604@LeBlanc-Engineering.com>
References: <E577B71D-6E5F-46E5-961A-41029D1EC604@LeBlanc-Engineering.com>
Message-ID: <471DEFBF.6040706@gmx.de>

Michael LeBlanc wrote:
>> Use
>>
>> @lexer::members {
>>          myClass mine = new myClass();
>>      }
>>
>> instead. BTW, please create a new email instead changing the subject of
>> a reply, as this messes the thread view up.
> 
> Now it's visible ONLY in the lexer grammar.  I need to create it in the
> parser grammar (or at some higher level) and use it in both parser and
> lexer grammars.

Oops, I thought, you wanted it only in the lexer. In your case you need both

@lexer::members {
          myClass mine = new myClass();

	public myClass getMyClass() {
		return mine;
	}
      }

and

@members {
          myClass mine;

	public void setMyClass(myClass mine) {
		this.mine = mine;
	}
      }

Use some glue code like

parser.setMyClass(lexer.getMyClass());

In any case, the parser doesn't influence the lexer, as the lexing phase
is completely separate from the parsing phase at this point.

> Sorry about the earlier message.  Is this better?

Actually, the new email should be created only at the start of a new
thread, but let's now use this email thread.

Johannes

From guillaume.chavanon at systemsvip.com  Tue Oct 23 06:53:56 2007
From: guillaume.chavanon at systemsvip.com (Guillaume Chavanon)
Date: Tue, 23 Oct 2007 15:53:56 +0200
Subject: [antlr-interest] Problem with scope in members functions
In-Reply-To: <9C9839A1-906E-4F3B-AE56-21F1FDFA0DE8@cs.usfca.edu>
References: <471CE646.3030700@systemsvip.com>
	<4BC63754-2E5A-4619-BB59-130E1C8555B1@cs.usfca.edu>
	<471DC0C2.9070406@systemsvip.com>
	<9C9839A1-906E-4F3B-AE56-21F1FDFA0DE8@cs.usfca.edu>
Message-ID: <471DFCF4.8070200@systemsvip.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071023/3f709e3d/attachment.html 

From corellian.c at gmail.com  Tue Oct 23 08:12:17 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Tue, 23 Oct 2007 17:12:17 +0200
Subject: [antlr-interest]  Why this grammar doesn't work?
Message-ID: <3edc2fbd0710230812v6dea9bd7x5f87699750cd2fbc@mail.gmail.com>

Hi, I've picked up a part of my grammar to ask you what I am doing wrong:

grammar Test1;

options {k = 2; backtrack = true; memoize=true; output = AST; ASTLabelType =
CommonTree;}

type    :    primitiveType ('[' ']')* ;
primitiveType
    :    'bool'
        |    'char'
        |    'short'
        |    'int'
        |    'long'
        |    'float'
        |    'double'
    ;

I test it in ANTLRWorks interpreter, and gives me a
"FailedPredicateException(type,{synpred1}?)"

Anyone can explain why it occurs? and how I can solve it?

Thanks in advance,

Cris

-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071023/995ea00b/attachment.html 

From jimi at temporal-wave.com  Tue Oct 23 09:53:10 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 23 Oct 2007 09:53:10 -0700
Subject: [antlr-interest] Why this grammar doesn't work?
In-Reply-To: <3edc2fbd0710230812v6dea9bd7x5f87699750cd2fbc@mail.gmail.com>
References: <3edc2fbd0710230812v6dea9bd7x5f87699750cd2fbc@mail.gmail.com>
Message-ID: <BAY130-DS3E5EF82C2B65BB0AA3753869B0@phx.gbl>

Cristian,

 

It is likely that the true error here is part of the larger grammar
structure. When you ?overuse? (if there is such a thing) the backtrack=true
option, you are masking ambiguities in your grammar that really, should be
teased out of it. This option is great for smaller grammars or where you
don?t really care that much about the performance, but in the end it can get
you into trouble if you just use it to get rid of warnings/errors you would
otherwise get.

 

At least as an exercise, I would try turning off backtracking/memoizing, and
see what ANTLR tells you about the grammar then. Though you may get more
warnings and errors than you care to fix at this point, you might be able to
see what is truly going on and at least fix that part. After that, you can
turn backtracking on again and ignore the other warnings of course if you
wish, though personally I would recommend that you try to construct your
grammar such that the global use of backtracking is no required.

 

I hope that this is of some help to you,

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cristian Peraferrer
Sent: Tuesday, October 23, 2007 8:12 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Why this grammar doesn't work?

 

Hi, I've picked up a part of my grammar to ask you what I am doing wrong:

grammar Test1;

options {k = 2; backtrack = true; memoize=true; output = AST; ASTLabelType =
CommonTree;}

type    :    primitiveType ('[' ']')* ; 
primitiveType
    :    'bool'
        |    'char'
        |    'short'
        |    'int'
        |    'long'
        |    'float'
        |    'double' 
    ;

I test it in ANTLRWorks interpreter, and gives me a
"FailedPredicateException(type,{synpred1}?)"

Anyone can explain why it occurs? and how I can solve it?

Thanks in advance, 

Cris

-- 
GPG Key-ID: 0x564903FA - JID: HYPERLINK
"mailto:corellian at swissjabber.ch"corellian at swissjabber.ch 

No virus found in this incoming message.
Checked by AVG Free Edition.
Version: 7.5.488 / Virus Database: 269.15.6/1086 - Release Date: 10/22/2007
7:57 PM


No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.6/1086 - Release Date: 10/22/2007
7:57 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071023/68554c61/attachment-0001.html 

From lenochodpetiprsty at seznam.cz  Tue Oct 23 10:15:24 2007
From: lenochodpetiprsty at seznam.cz (Bolek Vrany)
Date: Tue, 23 Oct 2007 19:15:24 +0200
Subject: [antlr-interest] Problems parsing numbers
Message-ID: <471E2C2C.3050505@seznam.cz>

Hello,

I'm using ANTLR for just a few days. I need to parse a language that has
numerical literals enclosed in $$ like $3.14$. It also allows
identifiers to start with a digit, so 017 is a valid identifier. I
started with creating the grammar

grammar Test;

rule	:	expr+;

expr	:	LITERAL
	| 	VALFEATID
	| 	PAD
	;

//condition	:	// A single condition
//			(VALFEATID | LONGFEATID) ('=' | '>' | '>=' | '<' | '<=' | '<>')
(VALFEATID | LONGFEATID | LITERAL | PAD);

fragment	// Any character allowed in identifiers
IDCHAR	:	('a'..'z'|'A'..'Z'|'_'|'0'..'9');

VALFEATID	:	// Value or short form feature id. It can be either a number
or an alphanumeric sequence
			IDCHAR+ ;
		
//LONGFEATID  :	// Long form of feature reference, type 01[A].C3G
//		IDCHAR IDCHAR '[' ('A' | 'P' | 'B' | 'E' | 'C' | 'I' | 'L' | 'S')
'].' VALFEATID ;

fragment		
DIGIT	: 	'0'..'9';

LITERAL	: 	// This is the numerical literal
		'$' DIGIT+ '$'
	|	'$' DIGIT+ '.' DIGIT+ '$'
	;
	
PAD	:	'{PAD}';	
	
// Newline and whitespace	
NEWLINE	:	'\r'? '\n' ;
WS  	:	(' '|'\t'|'\n'|'\r')+ {skip();} ;
	
but I got into problems. When I try to parse $c12345.67890" and try to
interpret it inside ANTLRWorks, I end up with a rule having two
expressions, the first being $c12345 and the other one .67890 I don't
know why.

I also tried to copy the first example in The definitive ANTLR reference
book and it behaved much like this but somehow miraculously stopped to
at once. Don't know if it is an installation issue.

I use ANTLR 3.0.1, ANTRLWorks 1.1.3, StringTemplate 3.1b1, XJLibrary 2.0
and Java 1.6.0_03.

Thanks for your help in advance


From jimi at temporal-wave.com  Tue Oct 23 10:19:38 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 23 Oct 2007 10:19:38 -0700
Subject: [antlr-interest] Lexer bug?
In-Reply-To: <20071023114720.667CA11EAE9@www.antlr.org>
References: <fff09r$niq$1@ger.gmane.org>
	<471B415D.6070506@Yahoo.com>	<fffg14$v05$1@ger.gmane.org>
	<471B55A9.5040307@Yahoo.com>	<ffgpri$kcp$1@ger.gmane.org>	<BAY130-DS3DC3060EC5D12B1DC7728869A0@phx.gbl>	<471BF38F.3030804@gmail.com>	<BAY130-DS242B0E5EB313156BB160A869A0@phx.gbl>	<ffjgad$sl9$1@ger.gmane.org>
	<20071023114720.667CA11EAE9@www.antlr.org>
Message-ID: <BAY130-DS33A3F406441D8631E73D3869B0@phx.gbl>

Here are two possibilities for the number vs range question, that should be
fairly self explanatory. Again, whether ANTLR should deal with the input as
specified in previous posts is of course a different subject to how get a
working lexer at the moment :-)

The first returns the range as a single token, which may or may not be
useful to people and means that you need to cater for misconstructed ranges
in the lexer (but you generally already have to do things like this for
unterminated strings and so on so that the error messages are closer to the
source of the problem). 

The second is arranged to return three tokens for the range, without
resorting to multiple tokens per lexer rule (though I think that we need to
make this happen more easily as it does make some things easier). Of course,
the predicate also protects against '99.' which is probably acceptable in
some languages, so watch for this if you need that to be a valid number - it
would be easiest to accept NUMBER DOT in the parser I think, but it could be
handled in the lexer.

// Single token range, explicitly inlined separation of NUMBER and RANGE
//
grammar fred;

tokens
{
	RANGE;
}

start
	:	(number | range)+
	;
	
number
	: NUMBER
	;

range
	: RANGE
	;
	
NUMBER
	: ('0'..'9')+
		(
			 '.'
			 	(
			 		 '.' ('0'..'9')+ { $type = RANGE; }
			 		| ('0'..'9')+
			 		| // ERROR
			 	)
			| // Just an integer
		)
	;
	
OTHER
	: . { $channel = HIDDEN; }
	;


// Return decimal numeric as one token but 888..888 as NUMBER RANGE NUMBER
// Also shows that '.' can still be recognized on its own, just for kicks.
// Try the input 999.88 . . 666..667
//
grammar harry;

start 
	:	(number_range)+
	;
	
number_range
	: NUMBER ( RANGE NUMBER)?
	| DOT
	;
	
NUMBER
	: ('0'..'9')+
		(
			 ('.' '0'..'9')=> ('.' ('0'..'9')+)
			|// Just an integer
		)
	;

RANGE
	:	 '..'
	;
	
DOT
	: '.'
	;
	
OTHER
	: . {$channel = HIDDEN; }
	;


I hope that these are helpful in some small way :-) I tested these in
ANTLRWorks 1.1.3.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gavin Lambert
> Sent: Tuesday, October 23, 2007 4:47 AM
> To: Clifford Heath; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexer bug?
> 
> At 13:47 23/10/2007, Clifford Heath wrote:
>  >With regard to the suggestions offered, I'm not sure I
>  >understand all of them, and if I do, I'm not sure I want
>  >to implement that way. For example, it seemed that one
>  >suggestion would have it that I should recognize
>  >the string "0.12 ..  3.5" as a single token... and I'm
>  >*sure* I don't want to do that!
> 
> True, although you could combine it with the method shown in the
> wiki regarding how to emit multiple tokens from a single lexer
> rule.  Which admittedly is a little messy too, but that's mostly
> glue code.  Once that's in place the actual procedure is pretty
> straightforward.
> 
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.488 / Virus Database: 269.15.6/1086 - Release Date:
> 10/22/2007 7:57 PM
> 

No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.488 / Virus Database: 269.15.6/1086 - Release Date: 10/22/2007
7:57 PM
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071023/8fd04de3/attachment.html 

From Austin_Hastings at Yahoo.com  Tue Oct 23 10:35:49 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 23 Oct 2007 13:35:49 -0400
Subject: [antlr-interest] Problems parsing numbers
In-Reply-To: <471E2C2C.3050505@seznam.cz>
References: <471E2C2C.3050505@seznam.cz>
Message-ID: <471E30F5.1070708@Yahoo.com>

You are saying $c...$, but the LITERAL is supposed to be DIGIT+ which 
doesn't include 'c'. What do you expect to happen for that input?

=Austin

Bolek Vrany wrote:
> Hello,
>
> I'm using ANTLR for just a few days. I need to parse a language that has
> numerical literals enclosed in $$ like $3.14$. It also allows
> identifiers to start with a digit, so 017 is a valid identifier. I
> started with creating the grammar
>
> grammar Test;
>
> rule    :    expr+;
>
> expr    :    LITERAL
>     |     VALFEATID
>     |     PAD
>     ;
>
> //condition    :    // A single condition
> //            (VALFEATID | LONGFEATID) ('=' | '>' | '>=' | '<' | '<=' 
> | '<>')
> (VALFEATID | LONGFEATID | LITERAL | PAD);
>
> fragment    // Any character allowed in identifiers
> IDCHAR    :    ('a'..'z'|'A'..'Z'|'_'|'0'..'9');
>
> VALFEATID    :    // Value or short form feature id. It can be either 
> a number
> or an alphanumeric sequence
>             IDCHAR+ ;
>        
> //LONGFEATID  :    // Long form of feature reference, type 01[A].C3G
> //        IDCHAR IDCHAR '[' ('A' | 'P' | 'B' | 'E' | 'C' | 'I' | 'L' | 
> 'S')
> '].' VALFEATID ;
>
> fragment       
> DIGIT    :     '0'..'9';
>
> LITERAL    :     // This is the numerical literal
>         '$' DIGIT+ '$'
>     |    '$' DIGIT+ '.' DIGIT+ '$'
>     ;
>     
> PAD    :    '{PAD}';   
>     
> // Newline and whitespace   
> NEWLINE    :    '\r'? '\n' ;
> WS      :    (' '|'\t'|'\n'|'\r')+ {skip();} ;
>     
> but I got into problems. When I try to parse $c12345.67890" and try to
> interpret it inside ANTLRWorks, I end up with a rule having two
> expressions, the first being $c12345 and the other one .67890 I don't
> know why.
>
> I also tried to copy the first example in The definitive ANTLR reference
> book and it behaved much like this but somehow miraculously stopped to
> at once. Don't know if it is an installation issue.
>
> I use ANTLR 3.0.1, ANTRLWorks 1.1.3, StringTemplate 3.1b1, XJLibrary 2.0
> and Java 1.6.0_03.
>
> Thanks for your help in advance
>
>
>


From corellian.c at gmail.com  Tue Oct 23 10:38:38 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Tue, 23 Oct 2007 19:38:38 +0200
Subject: [antlr-interest] Why this grammar doesn't work?
In-Reply-To: <BAY130-DS3E5EF82C2B65BB0AA3753869B0@phx.gbl>
References: <3edc2fbd0710230812v6dea9bd7x5f87699750cd2fbc@mail.gmail.com>
	<BAY130-DS3E5EF82C2B65BB0AA3753869B0@phx.gbl>
Message-ID: <3edc2fbd0710231038y2bdd1d54j71261e30f63d6ca@mail.gmail.com>

Ok, I'm trying to adapt some of the Java.g example from ANTLR web (wiki?),
but I see the example doesn't work too. In the example file the "backtrack &
memoize" are defined globally, but if I comment it, it find a couple of
ambiguities.

Let's see it in parts; in a Java-like statement rule, there are two
alternatives to match IF-THEN-ELSE constructions.

How we could fix it?

2007/10/23, Jim Idle <jimi at temporal-wave.com>:
>
>  Cristian,
>
>
>
> It is likely that the true error here is part of the larger grammar
> structure. When you 'overuse' (if there is such a thing) the backtrack=true
> option, you are masking ambiguities in your grammar that really, should be
> teased out of it. This option is great for smaller grammars or where you
> don't really care that much about the performance, but in the end it can get
> you into trouble if you just use it to get rid of warnings/errors you would
> otherwise get.
>
>
>
> At least as an exercise, I would try turning off backtracking/memoizing,
> and see what ANTLR tells you about the grammar then. Though you may get more
> warnings and errors than you care to fix at this point, you might be able to
> see what is truly going on and at least fix that part. After that, you can
> turn backtracking on again and ignore the other warnings of course if you
> wish, though personally I would recommend that you try to construct your
> grammar such that the global use of backtracking is no required.
>
>
>
> I hope that this is of some help to you,
>
>
>
> Jim
>

-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071023/86b46db1/attachment.html 

From vbar at comp.cz  Tue Oct 23 12:15:50 2007
From: vbar at comp.cz (Vaclav Barta)
Date: Tue, 23 Oct 2007 21:15:50 +0200
Subject: [antlr-interest] Problems parsing numbers
In-Reply-To: <471E2C2C.3050505@seznam.cz>
References: <471E2C2C.3050505@seznam.cz>
Message-ID: <200710232115.51659.vbar@comp.cz>

On Tuesday 23 October 2007 19:15:24 Bolek Vrany wrote:
> I'm using ANTLR for just a few days. I need to parse a language that has
...
> but I got into problems. When I try to parse $c12345.67890" and try to
Well, simplify your grammar until it starts working - I don't see how the one 
you've posted can parse $c12345.67890" (or anything, with those 
half-commented rules), but after removing condition and LONGFEATID, I got it 
to parse $12345.67890$ as one literal, without problems...

> interpret it inside ANTLRWorks, I end up with a rule having two
> expressions, the first being $c12345 and the other one .67890 I don't
> know why.
I'm not using ANTLRWorks, though, so there might be other gotchas in the 
GUI...

	Bye
		Vasek

From mb.fgel at ownit.nu  Tue Oct 23 15:13:08 2007
From: mb.fgel at ownit.nu (Mats Behre)
Date: Wed, 24 Oct 2007 00:13:08 +0200
Subject: [antlr-interest] Problem with rewrite rule referencing the previous
	value of the AST
Message-ID: <471E71F4.3090400@ownit.nu>

Hi,

I am in the process of converting a v2 grammar to v3, and have some rules that (I would like to) look basically like this:

	optionCmd: p=OptionKeyword (Dot!)? (
			t=StrictKeyword
			| t=MaxDurationKeyword intData
		) -> ^(GenericStatement $optionCmd);

The problem is that when I have the exclamation mark after the optional Dot token, I get a "Can't find template tokenRefBangTrack.st" exception.
The exception itself is obviously just a missing template, but it seems to indicate that when I want to reference the tree 'so far' in a rewrite rule, I am not allowed to exclude any of the matched parts.
Is this a correct assumption, or should my rule work?

I know that I can work around this by having several rewrite rules instead of just one, but that would make the grammar less readable, so I would prefer not to do it.
An equivalent construct worked fine in v2, but then the rule generation has changed dramatically, so I'm not really surprised that there are differences. Generally it appears that the grammar will be more readable in v3, except that I have to add many 'options {k = 1;}' followed by a syntactic predicate where earlier 'options {greedy = true;}' made the job.

Rgds,
Mats 


From jimi at temporal-wave.com  Tue Oct 23 16:31:04 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 23 Oct 2007 16:31:04 -0700
Subject: [antlr-interest] Problem with rewrite rule referencing the
	previous	value of the AST
In-Reply-To: <471E71F4.3090400@ownit.nu>
References: <471E71F4.3090400@ownit.nu>
Message-ID: <BAY130-DS32FC8D45EF39A2AEB0028869B0@phx.gbl>

Mats,

You are getting this because you are using the ! operator and the ->
rewrites at the same time, and you must chose one or the other. It is a bit
of an obscure message of course, but when ANTLR3 grammars are parsed using
ANTLR3, then these kinds of things will be reported a lot better.

You probably want a rewrite like this:

 	optionCmd: p=OptionKeyword (Dot!)? 
                 (
 			  t=StrictKeyword                    ->
^(GenericStatement $t)
 			| a=MaxDurationKeyword b=intData     ->
^(GenericStatement $a $b)
 		     )


Though perhaps you would want a different Node type for the two alts?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Mats Behre
> Sent: Tuesday, October 23, 2007 3:13 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Problem with rewrite rule referencing the
> previous value of the AST
> 
> Hi,
> 
> I am in the process of converting a v2 grammar to v3, and have some
> rules that (I would like to) look basically like this:
> 
> 	optionCmd: p=OptionKeyword (Dot!)? (
> 			t=StrictKeyword
> 			| t=MaxDurationKeyword intData
> 		) -> ^(GenericStatement $optionCmd);
> 
> The problem is that when I have the exclamation mark after the optional
> Dot token, I get a "Can't find template tokenRefBangTrack.st"
> exception.



From parrt at cs.usfca.edu  Tue Oct 23 16:38:31 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 24 Oct 2007 07:38:31 +0800
Subject: [antlr-interest] Modify java source code with ANTLR
In-Reply-To: <471DEDF0.2030505@yahoo.de>
References: <471CCBD6.30606@Yahoo.com> <471DA100.7030109@yahoo.de>
	<970F17E9-06E2-4774-A355-12701BE95815@cs.usfca.edu>
	<471DEDF0.2030505@yahoo.de>
Message-ID: <94994B52-C9C8-44FB-BDA1-07F89E9027CB@cs.usfca.edu>


On Oct 23, 2007, at 8:49 PM, Friedhelm Hellerhoff wrote:

> Hi, thanks for the answer.
> So how do I have to use this engine, I guess it is the  
> TokenStreamRewriteEngine? Sorry for my ignorance,

Hi. :)  Yep, try using that instead of CommonTokenStream.

Ter


From parrt at cs.usfca.edu  Tue Oct 23 18:15:22 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 24 Oct 2007 09:15:22 +0800
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <20071023121700.EE45411EB87@www.antlr.org>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
Message-ID: <51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>


On Oct 23, 2007, at 8:16 PM, Gavin Lambert wrote:
> Just to follow up on this, I ran a few tests just now (against  
> 3.0.1) and inlining it doesn't help.  Here's a minimal reproduction  
> grammar illustrating the problem:
>
> lexer grammar test;
> NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
> OTHER: .;
>
> Given the input sequence "10..30", the lexer *should* produce  
> "NUMBER[10] OTHER[.] OTHER[.] NUMBER[30]", but it doesn't.

Unfortunately for this situation, that is as I designed it; please  
see my faq entry on how to solve a similar issue with range  
operator.  ANTLR does not automatically backtrack in the lexer like  
lex and other automata based lexers do.  Backtracking a DFA is  
required to match what you want.  ANTLR simply predicts which rule  
will win and proceeds with an LL parse. '.' matches anything so is  
ambig with NUMBER.  In lexers, ANTLR assumes you have prioritized the  
rules in order so it hushes the warning and makes any digit predict  
number.  This is absolutely consistent with ANTLR parsers and tree  
parsers.  Done by same analyzer and code generator.  Please examine  
the following parser rule:

test	:	DIGIT+ ('.' DIGIT+)?
	|	.
	;

ANTLR cannot possibly decide which alt to choose upon 0..9, right?   
It matches both alts.  ANTLR will complain.

I just love the discussion I see previously about how ANTLR is broken  
and doesn't do the right thing etc...  Trust me folks, I've been  
doing lexers, state machines etc... for a long time with the obsessed  
focus of a lunatic. You may not want antlr to do what it's doing in  
some cases, but I designed ANTLR to do precisely what it is doing in  
this case.  Not to say there aren't any bugs in other situations ;)   
There *is* a nasty analysis bug I have to track down at some point.   
Can't narrow it down yet.

> Anyway, looking at this it's clear to see that it examines only one  
> character of lookahead and basically decides that if there's a dot  
> then the entire optional clause must be present

correct by how LL lexers (unlike lex lexers) work.

> -- despite the "minimal satisfying input" for that clause being a  
> dot followed by at least one digit.  So its lookahead is clearly  
> insufficient for the task.  (It would have been right if that were  
> a * or ? instead of a +, though.)

Correct.  ANTLR would normally warn you about this problem, but in  
lexers it chooses not to.

Remember folks: you can't just list a bunch of lexer rules that make  
sense to a human and expect ANTLR to "make it so".  Same is true for  
parsers, right?  The confusion arises since antlr doesn't warn you.

Ter

From lgcraymer at yahoo.com  Tue Oct 23 21:13:43 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 23 Oct 2007 21:13:43 -0700 (PDT)
Subject: [antlr-interest] Lexer bug? (with test cases!)
Message-ID: <199259.15835.qm@web55906.mail.re3.yahoo.com>



----- Original Message ----
> From: Terence Parr <parrt at cs.usfca.edu>
> To: Gavin Lambert <antlr at mirality.co.nz>
> Cc: antlr-interest at antlr.org
> Sent: Tuesday, October 23, 2007 6:15:22 PM
> Subject: Re: [antlr-interest] Lexer bug? (with test cases!)
> 
> 
> On Oct 23, 2007, at 8:16 PM, Gavin Lambert wrote:
> > Just to follow up on this, I ran a few tests just now (against  
> > 3.0.1) and inlining it doesn't help.  Here's a minimal reproduction  
> > grammar illustrating the problem:
> >
> > lexer grammar test;
> > NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
> > OTHER: .;
> >
> > Given the input sequence "10..30", the lexer *should* produce  
> > "NUMBER[10] OTHER[.] OTHER[.] NUMBER[30]", but it doesn't.
> 
> Unfortunately for this situation, that is as I designed it; please  
> see my faq entry on how to solve a similar issue with range  
> operator.  ANTLR does not automatically backtrack in the lexer like  
> lex and other automata based lexers do.  Backtracking a DFA is  
> required to match what you want.  ANTLR simply predicts which rule  
> will win and proceeds with an LL parse. '.' matches anything so is 

Ter--

Take another look.  The '.' in the posted grammar is the character '.', not a wildcard; there is no ambiguity, just an LL(2) decision.  Unfortunately, the generated code makes an LL(1) decision and generates runtime errors as a result.  This is not a backtracking problem; note the selected workaround--it avoids having an epsilon alternative, but depends on k>1.

--Loring

 > ambig with NUMBER.  In lexers, ANTLR assumes you have prioritized the  
> rules in order so it hushes the warning and makes any digit predict  
> number.  This is absolutely consistent with ANTLR parsers and tree  
> parsers.  Done by same analyzer and code generator.  Please examine  
> the following parser rule:
> 
> test    :    DIGIT+ ('.' DIGIT+)?
>     |    .
>     ;
> 
> ANTLR cannot possibly decide which alt to choose upon 0..9, right?   
> It matches both alts.  ANTLR will complain.
> 
> I just love the discussion I see previously about how ANTLR is broken  
> and doesn't do the right thing etc...  Trust me folks, I've been  
> doing lexers, state machines etc... for a long time with the obsessed  
> focus of a lunatic. You may not want antlr to do what it's doing in  
> some cases, but I designed ANTLR to do precisely what it is doing in  
> this case.  Not to say there aren't any bugs in other situations ;)   
> There *is* a nasty analysis bug I have to track down at some point.   
> Can't narrow it down yet.
> 
> > Anyway, looking at this it's clear to see that it examines only one  
> > character of lookahead and basically decides that if there's a dot  
> > then the entire optional clause must be present
> 
> correct by how LL lexers (unlike lex lexers) work.
> 
> > -- despite the "minimal satisfying input" for that clause being a  
> > dot followed by at least one digit.  So its lookahead is clearly  
> > insufficient for the task.  (It would have been right if that were  
> > a * or ? instead of a +, though.)
> 
> Correct.  ANTLR would normally warn you about this problem, but in  
> lexers it chooses not to.
> 
> Remember folks: you can't just list a bunch of lexer rules that make  
> sense to a human and expect ANTLR to "make it so".  Same is true for  
> parsers, right?  The confusion arises since antlr doesn't warn you.
> 
> Ter
> 



__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 

From parrt at cs.usfca.edu  Wed Oct 24 02:57:44 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 24 Oct 2007 17:57:44 +0800
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <199259.15835.qm@web55906.mail.re3.yahoo.com>
References: <199259.15835.qm@web55906.mail.re3.yahoo.com>
Message-ID: <2FA035D1-75B1-44A9-A84E-F06F6D7FC1ED@cs.usfca.edu>


On Oct 24, 2007, at 12:13 PM, Loring Craymer wrote:
>>> lexer grammar test;
>>> NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
>>> OTHER: .;
>
> Take another look.  The '.' in the posted grammar is the character  
> '.', not a wildcard; there is no ambiguity, just an LL(2)  
> decision.  Unfortunately, the generated code makes an LL(1)  
> decision and generates runtime errors as a result.  This is not a  
> backtracking problem; note the selected workaround--it avoids  
> having an epsilon alternative, but depends on k>1.


Oh, sorry. you're talking about the (...)? subrule decision?  Ah,  
well, it's the same really.  *Any* char can follow a token so the  
wildcard follows every decision.  I can choose dot or wildcard.   
That's ambig so I say LL(1).  Lex does some backtracking to make it  
work more naturally.  ANTLR builds LL(*) recognizers, which are not  
tuned specifically for building lexers as lex is.  Perhaps in the  
future there could be a way for ANTLR to do this within confines of LL 
(*).

Terence

From parrt at cs.usfca.edu  Wed Oct 24 03:05:51 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 24 Oct 2007 18:05:51 +0800
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>
	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
Message-ID: <9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>


On Oct 24, 2007, at 5:52 PM, Gavin Lambert wrote:

> At 14:15 24/10/2007, Terence Parr wrote:
> >ANTLR does not automatically backtrack in the lexer like
> >lex and other automata based lexers do.  Backtracking a DFA is
> >required to match what you want.  ANTLR simply predicts which
> >rule will win and proceeds with an LL parse.
>
> As Loring pointed out, no backtracking is required -- just a two- 
> character lookahead instead of a 1-character lookahead.

It appears it's not backtracking because only 1 extra char is enough,  
but it cannot be statically determined if we assume any char can  
follow.  I think you could make the subrule more complicated and it  
would require 2 extra then 3 then 4 etc...

> This is because the clause ('.' DIGIT+)? must either match a dot  
> followed by at least one digit (minimum two characters) or match  
> nothing at all.  Seeing the dot and then assuming the following  
> character is a DIGIT without actually checking it first just isn't  
> right.

Isn't right in that it won't do what is natural.  I couldnt' make  
antlr do the right thing easily in this case.

> Similarly, if the construct was ('0' 'x' DIGIT+)? then it must  
> check a minimum of three characters before matching the clause as a  
> whole.  For ('.' DIGIT*)?, the minimum is only one character.

Yep.  Now make that 'x'+ and you have arbitrary lookahead.  Now make  
it a rule+ ref and you have non-regular arbitrary lookahead etc...

> For ('.' DIGIT+ FOO)?, it must have unbounded lookahead

ha!  you're ahead of me. yep.

> -- it must verify that there really is a FOO after all the DIGITs  
> before it can accept the clause.  This is the tricky case, but it  
> is the case that was supposed to be dealt with automatically by  
> ANTLR with the switch to LL(*) [as I understood it].

The issue is that there is an implied (ANYTOKEN)* and really wildcard  
following any rule.  I can look at it again sometime, but i am unsure  
how to make antlr see farther into the fog of "there are infinite  
unspecified char next".

> >correct by how LL lexers (unlike lex lexers) work.
>
> But LL(*) is supposed to look ahead as many characters as it needs  
> to in order to determine that it really is a match, isn't it?   
> Otherwise this is a step backwards from v2, where you could at  
> least define an LL(k) lookahead limit greater than 1.

yep, but the fog after a lexer rule defeats it.

> >Remember folks: you can't just list a bunch of lexer rules that
> >make sense to a human and expect ANTLR to "make it so".
>
> Why not?  This case seems fairly straightforward.

Not to me and I spent 4 years making LL(*) work. ;)

> Any time there's an optional block (whether ? or *), ANTLR should  
> use sufficient lookahead (where "sufficient" might mean  
> "unbounded", as in the example above)

Can you tell me how to compute the static LL lookahead?  If not, then  
trust that I know it's not possible or at least too much for my  
brain. ;)  It's the fog that causes the problem for LL(*).  I could  
backtrack automatically upon error like lex but it would be VERY slow  
in a recursive descent lexer.

Have you built a lex like creature before?  I have back in 1988.  I  
believe I'm remembering how it operates correctly.

Ter

From simone.tripodi at gmail.com  Wed Oct 24 03:43:13 2007
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Wed, 24 Oct 2007 12:43:13 +0200
Subject: [antlr-interest] AST and Parse Tree
Message-ID: <4173dc210710240343m28e096d8jd89a4de417bf57a5@mail.gmail.com>

Hallo everybody,
does it is possible to have an AST that reflects the parse tree,
without rewriting any AST rule?
Thanks in advance,
Simo

From porcelli at uol.com.br  Wed Oct 24 04:09:25 2007
From: porcelli at uol.com.br (Alexandre Porcelli)
Date: Wed, 24 Oct 2007 08:09:25 -0300
Subject: [antlr-interest] Fwd:  AST and Parse Tree
In-Reply-To: <ee873c070710240408k215a106bu5669a680d6a11702@mail.gmail.com>
References: <4173dc210710240343m28e096d8jd89a4de417bf57a5@mail.gmail.com>
	<ee873c070710240408k215a106bu5669a680d6a11702@mail.gmail.com>
Message-ID: <ee873c070710240409u19735712y33db4788fbbc248b@mail.gmail.com>

When you declare the option AST, you have that.

options{
        output=AST;
}

Ps: using AST rewriting you can remove same unnecessary element from
AST (ex: commas, parenthesis, etc...) and enclose logical statements
in a real tree.

Regards,
Alexandre Porcelli

On 10/24/07, Simone Tripodi <simone.tripodi at gmail.com> wrote:
> Hallo everybody,
> does it is possible to have an AST that reflects the parse tree,
> without rewriting any AST rule?
> Thanks in advance,
> Simo
>

From antlr at mirality.co.nz  Wed Oct 24 04:09:46 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 25 Oct 2007 00:09:46 +1300
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>
	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
Message-ID: <20071024110956.2B8AF11EBF9@www.antlr.org>

At 23:05 24/10/2007, Terence Parr wrote:
 >The issue is that there is an implied (ANYTOKEN)* and really
 >wildcard following any rule.  I can look at it again sometime,
 >but i am unsure how to make antlr see farther into the fog of
 >"there are infinite unspecified char next".

But it doesn't need to care about that, surely?  Once it's entered 
a rule, it's happy that it will be able to produce a valid token 
(assuming the lookahead was sufficient to guarantee this), so the 
only bits it needs to worry about are embedded optional bits, 
which simply have a "match exactly or exit the rule" 
behaviour.  No need to look "past" the end of the token -- as soon 
as you see something that can't possibly match any of the 
alternatives currently "in play", then you exit the rule, having 
consumed only those characters of input that validly matched, 
leaving the stuff you couldn't match to try matching against a 
different rule later on.

 >Can you tell me how to compute the static LL lookahead?  If not, 

 >then trust that I know it's not possible or at least too much 
for my
 >brain. ;)  It's the fog that causes the problem for LL(*).

This is just off the cuff, so there are quite likely some holes in 
it, but:

First, expand and inline all subrule references.  Then classify 
the rule like so:
1. No optional components:
   'foo'
   Required lookahead = length of string, ie. 3
2. Optional components:
   'bar'?
   ('a' | 'b')*
   Required lookahead = 0 (this is illegal at the top level, but 
is valid as a subclause)
3. At-least-one loops (+ loop, required loop)
   ('a' | 'b')+
   Required lookahead = required lookahead of subclause, ie. 1
4. Alternates:
   'foo' | 'tu'
   Required lookahead = up to max(lookahead of each subclause)
   (This can be done incrementally; ie. in this example you first 
look at the first character and see if it's 'f', 't', or exit 
rule.  Once you know that, you can then match the rest of the 
string with 2 lookahead if it was an 'f' or 1 lookahead if it was 
a 't'.)
5. Basic sequentials:
   'foo' 'bar'
   Required lookahead = required lookahead of first + required 
lookahead of second
6. Any required element (nonzero lookahead) following a required 
loop:
   'a'+ 'b'
   Required lookahead = infinite

This process is recursive, with each subclause being similarly 
classifiable.

So for example, given the rule "DIGIT+ ('.' DIGIT+)?", this is 
broken down like so:
   - first expand to "('0'..'9')+ ('.' ('0'..'9')+)?"
   - top level: + loop, optional component
     - lookahead = (lookahead of subclause "'0'..'9'") + 0
   - subclause "'0'..'9'": single character range
     - lookahead = 1

Therefore the top level lookahead is 1 -- the Tokens rule only has 
to look at one character (to see if it's in '0'..'9') before it 
can unambiguously declare the input to be a NUMBER.

Next up, once inside NUMBER, we match as many digits as we 
can.  Once we encounter a non-digit, the + loop is complete and 
it's time to move on to the next subclause.  Since this is an 
optional clause, it is permitted to be entirely absent.
   - subclause "'.' ('0'..'9')+": single character, + loop
     - lookahead = 1 + (lookahead of subclause "'0'..'9'")
                 = 1 + 1
                 = 2

So we must look ahead two characters and verify that they are 
indeed a dot and a digit before we can unambiguously declare this 
subclause to be present.  (If they're not a dot and a digit, then 
the subclause is not present and we shouldn't consume anything 
more.)

And that's it -- we've figured out this whole rule now.  For a 
more problematic example:

   - rule "('0'..'9')+ '.' ('0'..'9')+"
     - minor variation on the last one, but it makes this a much 
more complicated case
     - + loop, single character, + loop
     - lookahead = infinite (by rule 6), then 1 + 1 = 2

Here there are no subclauses (other than "'0'..'9'", which is 
trivial) to break down, and we can't do any better than infinite 
lookahead.  Before we can decide that we've even got a NUMBER 
token we must be prepared to scan past a potentially infinite 
series of digits; as soon as we encounter any non-digit, though 
(terminating the + loop) the "infinite" portion of the lookahead 
is complete and we're left with a simple two-character lookahead 
decision again -- if it's a dot and another digit then it's a 
NUMBER, otherwise it isn't (and we need to avoid consuming any of 
those initial digits and try a different lexer rule instead).

 >Have you built a lex like creature before?  I have back in 1988.
 >I believe I'm remembering how it operates correctly.

No; I've written a few hand-rolled parsers/lexers before, but not 
a parser/lexer generator.  I bow to your experience there, but 
that doesn't mean I can't say when I think there might be a 
"better" way of doing something :)


From antlr at mirality.co.nz  Wed Oct 24 04:28:07 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 25 Oct 2007 00:28:07 +1300
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <20071024110956.2B8AF11EBF9@www.antlr.org>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>
	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
	<20071024110956.2B8AF11EBF9@www.antlr.org>
Message-ID: <20071024113212.3E91B11EC47@www.antlr.org>

Mere moments ago, I wrote:
 >Then classify the rule like so:
[...]

Couple of afterthoughts:

First, any (...)* loop is treated as if it were ((...)+)? for 
purposes of this classification algorithm (since that reduces the 
complexity of combinations a bit while still retaining correct 
behaviour).

Second, there's an extra rule:
7. Any required element (nonzero lookahead) following an optional 
subclause
   'foo'? 'bar'
   (('0'..'9')+)? 'bar'
   Required lookahead = up to (lookahead of optional clause) + 
(lookahead of trailing clause)

This is a bit of a special case because as soon as any part of the 
optional clause would fail to match then the clause as a whole is 
abandoned and the lookahead just becomes the trailing 
portion.  But if the optional clause is actually present in the 
input then it needs to be scanned completely through so the tail 
clause can be tested before the rule as a whole can be valid.


From Austin_Hastings at Yahoo.com  Wed Oct 24 04:43:55 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 24 Oct 2007 07:43:55 -0400
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>	<20071023121700.EE45411EB87@www.antlr.org>	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
Message-ID: <471F2FFB.5040103@Yahoo.com>

Terence Parr wrote:
>
> It appears it's not backtracking because only 1 extra char is enough, 
> but it cannot be statically determined if we assume any char can 
> follow.  I think you could make the subrule more complicated and it 
> would require 2 extra then 3 then 4 etc...

I think that inserting a catch{} block for optional subrules would go a 
long way toward eliminating this particular aspect of the problem. When 
you don't match correctly, throw an exception, catch it, and reset. The 
consumption of the input becomes temporary until the token completes, 
but that's straightforward.

>> This is because the clause ('.' DIGIT+)? must either match a dot 
>> followed by at least one digit (minimum two characters) or match 
>> nothing at all.  Seeing the dot and then assuming the following 
>> character is a DIGIT without actually checking it first just isn't 
>> right.
>
> Isn't right in that it won't do what is natural.  I couldnt' make 
> antlr do the right thing easily in this case.

Freudian slip? ;)

>> Similarly, if the construct was ('0' 'x' DIGIT+)? then it must check 
>> a minimum of three characters before matching the clause as a whole.  
>> For ('.' DIGIT*)?, the minimum is only one character.
>
> Yep.  Now make that 'x'+ and you have arbitrary lookahead.  Now make 
> it a rule+ ref and you have non-regular arbitrary lookahead etc...
>
>> For ('.' DIGIT+ FOO)?, it must have unbounded lookahead
>
> ha!  you're ahead of me. yep.

catch{}
>> >correct by how LL lexers (unlike lex lexers) work.
>>
>> But LL(*) is supposed to look ahead as many characters as it needs to 
>> in order to determine that it really is a match, isn't it?  Otherwise 
>> this is a step backwards from v2, where you could at least define an 
>> LL(k) lookahead limit greater than 1.
>
> yep, but the fog after a lexer rule defeats it.
>

Perhaps it is because I am a bear of very little brain, but I don't get 
this. My understanding of LL(*) is "Antlr will figure out the right 
value of k for this case." But k=1 is not always the right value of k.

>> >Remember folks: you can't just list a bunch of lexer rules that
>> >make sense to a human and expect ANTLR to "make it so".
>>
>> Why not?  This case seems fairly straightforward.
>
> Not to me and I spent 4 years making LL(*) work. ;)

The original question was regarding Number = DIGIT+ ('.' DIGIT+)? and 
how LL(*) was deciding that '.' implied the entire chain, when it 
didn't. Perhaps another year would help, but I don't see how this counts 
as working.

>> Any time there's an optional block (whether ? or *), ANTLR should use 
>> sufficient lookahead (where "sufficient" might mean "unbounded", as 
>> in the example above)
>
> Can you tell me how to compute the static LL lookahead?  If not, then 
> trust that I know it's not possible or at least too much for my brain. 
> ;)  It's the fog that causes the problem for LL(*).  I could backtrack 
> automatically upon error like lex but it would be VERY slow in a 
> recursive descent lexer.
Why would it be slow? And if it's slow, so what? Right now, you're 
making decisions which sometimes are right and sometimes are not right. 
If they are not right, you throw an exception and discard a bunch of the 
input and pick up again. If you were to throw an exception and NOT 
discard part of the input but terminate the token early, the only 
performance time difference seems like it would be the time spent 
recognizing the bits of the input you were going to throw away in the 
present-day case.

Besides, isn't that what backtrack=... is for? :-) Maybe there's a 
lexer::backtrack switch needed? Or maybe k needs to be * instead of 1.


> Have you built a lex like creature before?  I have back in 1988.  I 
> believe I'm remembering how it operates correctly.
>
I don't think it matters, does it? You're in the recursive-descent 
business, not the state-machine business. You sell chicken, they sell 
hamburgers.

=Austin


From lenochodpetiprsty at seznam.cz  Wed Oct 24 05:30:36 2007
From: lenochodpetiprsty at seznam.cz (Bolek Vrany)
Date: Wed, 24 Oct 2007 14:30:36 +0200
Subject: [antlr-interest] Problems parsing numbers
In-Reply-To: <471E30F5.1070708@Yahoo.com>
References: <471E2C2C.3050505@seznam.cz> <471E30F5.1070708@Yahoo.com>
Message-ID: <471F3AEC.20609@seznam.cz>

I simplified the grammer to

grammar SquareD;

rule	:	expr+;

expr	:	litExpr | valExpr | padExpr;

litExpr	:	LITERAL ;
valExpr	:	VALFEATID;
padExpr	:	PAD;

fragment	// Any character allowed in identifiers
IDCHAR	:	('a'..'z'|'A'..'Z'|'_'|'0'..'9');

VALFEATID	:	// Value or short form feature id. It can be either a number
or an alphanumeric sequence
			IDCHAR+;
		
fragment		
DIGIT	: 	'0'..'9';

LITERAL	: 	// This is the numerical literal
		'$' DIGIT+ '$'
	|	'$' DIGIT+ '.' DIGIT+ '$'
	;
	
PAD	:	'{PAD}';	
	
// Newline and whitespace	
NEWLINE	:	'\r'? '\n' ;
WS  	:	(' '|'\t'|'\n'|'\r')+ {skip();} ;

and tried to interpret in ANTLRWorks the following
$12345.567890$ - I get the correct tree here (a signle litExpr)
1c234 - I get the correct tree here (a single valExpr)
$1c2345.567890$ - I expect to get a single error but instead I got two
nodes, having valExpr $1c2345 and .567890. Neither of them is a valid
valExpr
1c2345.567890 - the same behaviour as for $1c2345.567890$ is expected
and the same problem is observed.

Austin Hastings wrote:
> You are saying $c...$, but the LITERAL is supposed to be DIGIT+ which 
> doesn't include 'c'. What do you expect to happen for that input?
> 
> =Austin
> 
> Bolek Vrany wrote:
>> Hello,
>>
>> I'm using ANTLR for just a few days. I need to parse a language that has
>> numerical literals enclosed in $$ like $3.14$. It also allows
>> identifiers to start with a digit, so 017 is a valid identifier. I
>> started with creating the grammar
>>
>> grammar Test;
>>
>> rule    :    expr+;
>>
>> expr    :    LITERAL
>>     |     VALFEATID
>>     |     PAD
>>     ;
>>
>> //condition    :    // A single condition
>> //            (VALFEATID | LONGFEATID) ('=' | '>' | '>=' | '<' | '<=' 
>> | '<>')
>> (VALFEATID | LONGFEATID | LITERAL | PAD);
>>
>> fragment    // Any character allowed in identifiers
>> IDCHAR    :    ('a'..'z'|'A'..'Z'|'_'|'0'..'9');
>>
>> VALFEATID    :    // Value or short form feature id. It can be either 
>> a number
>> or an alphanumeric sequence
>>             IDCHAR+ ;
>>        //LONGFEATID  :    // Long form of feature reference, type 
>> 01[A].C3G
>> //        IDCHAR IDCHAR '[' ('A' | 'P' | 'B' | 'E' | 'C' | 'I' | 'L' | 
>> 'S')
>> '].' VALFEATID ;
>>
>> fragment       DIGIT    :     '0'..'9';
>>
>> LITERAL    :     // This is the numerical literal
>>         '$' DIGIT+ '$'
>>     |    '$' DIGIT+ '.' DIGIT+ '$'
>>     ;
>>     PAD    :    '{PAD}';       // Newline and whitespace   NEWLINE    
>> :    '\r'? '\n' ;
>> WS      :    (' '|'\t'|'\n'|'\r')+ {skip();} ;
>>     but I got into problems. When I try to parse $c12345.67890" and 
>> try to
>> interpret it inside ANTLRWorks, I end up with a rule having two
>> expressions, the first being $c12345 and the other one .67890 I don't
>> know why.
>>
>> I also tried to copy the first example in The definitive ANTLR reference
>> book and it behaved much like this but somehow miraculously stopped to
>> at once. Don't know if it is an installation issue.
>>
>> I use ANTLR 3.0.1, ANTRLWorks 1.1.3, StringTemplate 3.1b1, XJLibrary 2.0
>> and Java 1.6.0_03.
>>
>> Thanks for your help in advance
>>
>>
>>
> 
> 
> 





From simone.tripodi at gmail.com  Wed Oct 24 05:39:18 2007
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Wed, 24 Oct 2007 14:39:18 +0200
Subject: [antlr-interest] AST and Parse Tree
In-Reply-To: <4173dc210710240538u62c8393chb0ceee70f86cfb6c@mail.gmail.com>
References: <4173dc210710240343m28e096d8jd89a4de417bf57a5@mail.gmail.com>
	<ee873c070710240408k215a106bu5669a680d6a11702@mail.gmail.com>
	<4173dc210710240538u62c8393chb0ceee70f86cfb6c@mail.gmail.com>
Message-ID: <4173dc210710240539q3324f723wde1a5a7a59bbde3b@mail.gmail.com>

Hi Alex,
thank you very much, I tried it but I obtained a flat tree where all
tokens are leaf of a 'nil' root.
Do you have thought about it?
Thanks in advance,
Simone

2007/10/24, Alexandre Porcelli <alexandre.porcelli at gmail.com>:
> When you declare the option AST, you have that.
>
> options{
>         output=AST;
> }
>
> Ps: using AST rewriting you can remove same unnecessary element from
> AST (ex: commas, parenthesis, etc...) and enclose logical statements
> in a real tree.
>
> Regards,
> Alexandre Porcelli
>
> On 10/24/07, Simone Tripodi <simone.tripodi at gmail.com> wrote:
> > Hallo everybody,
> > does it is possible to have an AST that reflects the parse tree,
> > without rewriting any AST rule?
> > Thanks in advance,
> > Simo
> >
>

From porcelli at uol.com.br  Wed Oct 24 05:42:43 2007
From: porcelli at uol.com.br (Alexandre Porcelli)
Date: Wed, 24 Oct 2007 09:42:43 -0300
Subject: [antlr-interest] AST and Parse Tree
In-Reply-To: <4173dc210710240539q3324f723wde1a5a7a59bbde3b@mail.gmail.com>
References: <4173dc210710240343m28e096d8jd89a4de417bf57a5@mail.gmail.com>
	<ee873c070710240408k215a106bu5669a680d6a11702@mail.gmail.com>
	<4173dc210710240538u62c8393chb0ceee70f86cfb6c@mail.gmail.com>
	<4173dc210710240539q3324f723wde1a5a7a59bbde3b@mail.gmail.com>
Message-ID: <ee873c070710240542k2939fce0pea91c6a4b5532095@mail.gmail.com>

It is the default behavior, if you want a real tree... you will need
to use, at least, the "^" operator.

On 10/24/07, Simone Tripodi <simone.tripodi at gmail.com> wrote:
> Hi Alex,
> thank you very much, I tried it but I obtained a flat tree where all
> tokens are leaf of a 'nil' root.
> Do you have thought about it?
> Thanks in advance,
> Simone
>
> 2007/10/24, Alexandre Porcelli <alexandre.porcelli at gmail.com>:
> > When you declare the option AST, you have that.
> >
> > options{
> >         output=AST;
> > }
> >
> > Ps: using AST rewriting you can remove same unnecessary element from
> > AST (ex: commas, parenthesis, etc...) and enclose logical statements
> > in a real tree.
> >
> > Regards,
> > Alexandre Porcelli
> >
> > On 10/24/07, Simone Tripodi <simone.tripodi at gmail.com> wrote:
> > > Hallo everybody,
> > > does it is possible to have an AST that reflects the parse tree,
> > > without rewriting any AST rule?
> > > Thanks in advance,
> > > Simo
> > >
> >
>

From dave at badgers-in-foil.co.uk  Wed Oct 24 06:11:08 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 24 Oct 2007 13:11:08 +0000
Subject: [antlr-interest] AST and Parse Tree
In-Reply-To: <4173dc210710240343m28e096d8jd89a4de417bf57a5@mail.gmail.com>
References: <4173dc210710240343m28e096d8jd89a4de417bf57a5@mail.gmail.com>
Message-ID: <20071024131107.GA5832@badgers-in-foil.co.uk>

On Wed, Oct 24, 2007 at 12:43:13PM +0200, Simone Tripodi wrote:
> does it is possible to have an AST that reflects the parse tree,
> without rewriting any AST rule?

Seen this,

  http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760

?

ta,
dave

-- 
http://david.holroyd.me.uk/

From simone.tripodi at gmail.com  Wed Oct 24 06:46:13 2007
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Wed, 24 Oct 2007 15:46:13 +0200
Subject: [antlr-interest] AST and Parse Tree
In-Reply-To: <20071024131107.GA5832@badgers-in-foil.co.uk>
References: <4173dc210710240343m28e096d8jd89a4de417bf57a5@mail.gmail.com>
	<20071024131107.GA5832@badgers-in-foil.co.uk>
Message-ID: <4173dc210710240646o2c01a207pae6a3a64cd67d91e@mail.gmail.com>

Hi David,
thank you very much, I've seen this page and now I'm adopting this
solution, even if using a debug mode isn't so nice.
I think I'll switch using rewrite rules soon.
Thank you for your help!
Simone

2007/10/24, David Holroyd <dave at badgers-in-foil.co.uk>:
> On Wed, Oct 24, 2007 at 12:43:13PM +0200, Simone Tripodi wrote:
> > does it is possible to have an AST that reflects the parse tree,
> > without rewriting any AST rule?
>
> Seen this,
>
>   http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760
>
> ?
>
> ta,
> dave
>
> --
> http://david.holroyd.me.uk/
>


-- 
My GoogleCode profile: http://code.google.com/u/simone.tripodi/
My Sourceforge: https://sourceforge.net/users/stripodi
My Picasa: http://picasaweb.google.com/simone.tripodi/
My Tube: http://www.youtube.com/user/stripodi

From Robert.Klaus at innovations.de  Wed Oct 24 08:13:12 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Wed, 24 Oct 2007 17:13:12 +0200
Subject: [antlr-interest] How to use arg* when rewriting with StringTemplate
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F685@email.innoimm.local>

Hi,

I would like to rewrite a language using a TreeGrammar. For this purpose
I have defined a matching rule and rewrite with a template like this:


^(ID args+=arg*) -> template(id={$ID.text}, arg={$args}) "<id> ( <arg;
separator=\", \"> )"

So what happens is that the rule "arg"'s return template is added to an
ArrayList which then is passed to the template. However "arg" does not
return a template as it does not need to rewrite something.

arg:
INTEGER
| FLOAT
| BOOLEAN
;

So what I need is the original text from each arg. When the arguments
are known, I can do it easily like this:

^(PLUS a=arg b=arg) -> template(a={$a.text}, a={$b.text}) "add (<a>,
<b>)"

How can I use this when I match arg*?

Thanks in advance,

Robert

-------------------------------------------------------------
Robert Klaus
Diplom Informatiker
Product Development
-------------------------------------------------------------
Innovations Softwaretechnologie GmbH
Ziegelei 7
88090 Immenstaad
Germany
Phone: +49(0)7545-202-339
robert.klaus at innovations.de
www.visual-rules.com
-------------------------------------------------------------
Executives: 
Achim Berger, Thomas Cotic, Walter Pitz
Register Court Ulm HRB 631622
-------------------------------------------------------------

From Austin_Hastings at Yahoo.com  Wed Oct 24 08:23:41 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 24 Oct 2007 11:23:41 -0400
Subject: [antlr-interest] ENHANCEMENT: Add ANTLRFileStream(File f)
	constructor
Message-ID: <471F637D.9060101@Yahoo.com>

The existing ANTLRFileStream constructors take a string and create a 
file. Taking a File seems like a sensible enhancement.

=Austin


From jimi at temporal-wave.com  Wed Oct 24 09:12:59 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 24 Oct 2007 09:12:59 -0700
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <471F2FFB.5040103@Yahoo.com>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>	<20071023121700.EE45411EB87@www.antlr.org>	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
	<471F2FFB.5040103@Yahoo.com>
Message-ID: <BAY130-DS3B58F9DC5138F78D06D9386940@phx.gbl>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Austin Hastings
> Sent: Wednesday, October 24, 2007 4:44 AM
> To: Terence Parr
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexer bug? (with test cases!)
> 
> Terence Parr wrote:
> >
> > It appears it's not backtracking because only 1 extra char is enough,
> > but it cannot be statically determined if we assume any char can
> > follow.  I think you could make the subrule more complicated and it
> > would require 2 extra then 3 then 4 etc...
> 
> I think that inserting a catch{} block for optional subrules would go a
> long way toward eliminating this particular aspect of the problem. When
> you don't match correctly, throw an exception, catch it, and reset. The
> consumption of the input becomes temporary until the token completes,
> but that's straightforward.

Remember that not all the target languages have exceptions and that
exceptions are tediously slow as they are meant to be used for actual
exception conditions, not ways of programming your way out of algorithmic
paths. It seems that not too many people are aware of this, and it is
perhaps because the term exception implies that you can make your own
algorithmic exceptions I guess. 

Apart from this, as the lexer will generally be the biggest consumer of your
CPU resources, other than what you potentially can do in your actions, it is
worth thinking it through and not just letting the tool spit out a morass of
code that will seemingly do the job for you but will be throwing exceptions
all over the place and running like a dog. Most people want/need efficient
recognizers :-)

> >> >Remember folks: you can't just list a bunch of lexer rules that
> >> >make sense to a human and expect ANTLR to "make it so".
> >>
> >> Why not?  This case seems fairly straightforward.
> >
> > Not to me and I spent 4 years making LL(*) work. ;)
> 
> The original question was regarding Number = DIGIT+ ('.' DIGIT+)? and
> how LL(*) was deciding that '.' implied the entire chain, when it
> didn't. Perhaps another year would help, but I don't see how this
> counts
> as working.

Ter is saying that it is behaving as he expects it to for this case. One's
definition of working may of course differ from his ;-), but it is not
broken, it works as he expects it to. Personally, as I can trivially express
such a case in an ANTLR lexer, and the resulting code is more maintainable
(because I do not have to imagine the implied interactions), I don't worry
about it. It seems trite. While some things might be more 'naturally'
expressed in say {f}lex, many other things are horrible. Even in this we
probably all differ, because what seems natural to one does not to another -
the idea of throwing together some lexer rules and having ANTLR just work it
out has appeal but doesn't seem natural to me!

However, there is nothing to stop anyone programming their lexer in {f}lex,
or any other system for that matter, and supplying the token stream that way
of course! There may well be cases where a lex like specification is easier
for your particular situation. You can find references on the Wiki that show
this to have been one of Ter's thoughts up front, though I imagine he was
thinking more of hand crafted lexers that had to do strange things to
tokenize, rather than a different lexer generator per se.

> 
> present-day case.
> 
> Besides, isn't that what backtrack=... is for? :-) Maybe there's a
> lexer::backtrack switch needed? Or maybe k needs to be * instead of 1.

The backtrack option is for the parser, and while I can see its usefulness
for prototyping, I personally believe many that are new to ANTLR are getting
themselves into a lot of trouble with this option ;-)

> 
> 
> > Have you built a lex like creature before?  I have back in 1988.  I
> > believe I'm remembering how it operates correctly.
> >
> I don't think it matters, does it? You're in the recursive-descent
> business, not the state-machine business. You sell chicken, they sell
> hamburgers.

Yeah except that some people keep saying things akin to "Lex does it like
this...", hence Ter is establishing that he understands how lex like systems
are put together, and the way that ANLTR produces lexers is not down to some
lack of knowledge on his part about other ways of constructing lexer
generators, which I think most people would have to agree with.

Jim 


From jimi at temporal-wave.com  Wed Oct 24 09:18:04 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 24 Oct 2007 09:18:04 -0700
Subject: [antlr-interest] Problems parsing numbers
In-Reply-To: <471F3AEC.20609@seznam.cz>
References: <471E2C2C.3050505@seznam.cz> <471E30F5.1070708@Yahoo.com>
	<471F3AEC.20609@seznam.cz>
Message-ID: <BAY130-DS3397ED26F7B4F230E4A5186940@phx.gbl>

The interpreter mode may be masking lexing errors that are thrown out. Try
the debug mode and check the output tab for any runtime errors. Lexer
recovery involves just consuming the character and seeing if the next one
makes any sense - there is not much else you can do really. If you don't
look for (and intercept if you are expecting the lexer to throw errors) the
errors, you may be just missing them :-). Debug mode is your friend here.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Bolek Vrany
> Sent: Wednesday, October 24, 2007 5:31 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Problems parsing numbers
> 
> I simplified the grammer to
> 
> grammar SquareD;
> 
> rule	:	expr+;
> 
> expr	:	litExpr | valExpr | padExpr;
> 
> litExpr	:	LITERAL ;
> valExpr	:	VALFEATID;
> padExpr	:	PAD;
> 
> fragment	// Any character allowed in identifiers
> IDCHAR	:	('a'..'z'|'A'..'Z'|'_'|'0'..'9');
> 
> VALFEATID	:	// Value or short form feature id. It can be either
a
> number
> or an alphanumeric sequence
> 			IDCHAR+;
> 
> fragment
> DIGIT	: 	'0'..'9';
> 
> LITERAL	: 	// This is the numerical literal
> 		'$' DIGIT+ '$'
> 	|	'$' DIGIT+ '.' DIGIT+ '$'
> 	;
> 
> PAD	:	'{PAD}';
> 
> // Newline and whitespace
> NEWLINE	:	'\r'? '\n' ;
> WS  	:	(' '|'\t'|'\n'|'\r')+ {skip();} ;
> 
> and tried to interpret in ANTLRWorks the following
> $12345.567890$ - I get the correct tree here (a signle litExpr)
> 1c234 - I get the correct tree here (a single valExpr)
> $1c2345.567890$ - I expect to get a single error but instead I got two
> nodes, having valExpr $1c2345 and .567890. Neither of them is a valid
> valExpr
> 1c2345.567890 - the same behaviour as for $1c2345.567890$ is expected
> and the same problem is observed.
> 
> Austin Hastings wrote:
> > You are saying $c...$, but the LITERAL is supposed to be DIGIT+ which
> > doesn't include 'c'. What do you expect to happen for that input?
> >
> > =Austin
> >
> > Bolek Vrany wrote:
> >> Hello,
> >>
> >> I'm using ANTLR for just a few days. I need to parse a language that
> has
> >> numerical literals enclosed in $$ like $3.14$. It also allows
> >> identifiers to start with a digit, so 017 is a valid identifier. I
> >> started with creating the grammar
> >>
> >> grammar Test;
> >>
> >> rule    :    expr+;
> >>
> >> expr    :    LITERAL
> >>     |     VALFEATID
> >>     |     PAD
> >>     ;
> >>
> >> //condition    :    // A single condition
> >> //            (VALFEATID | LONGFEATID) ('=' | '>' | '>=' | '<' |
> '<='
> >> | '<>')
> >> (VALFEATID | LONGFEATID | LITERAL | PAD);
> >>
> >> fragment    // Any character allowed in identifiers
> >> IDCHAR    :    ('a'..'z'|'A'..'Z'|'_'|'0'..'9');
> >>
> >> VALFEATID    :    // Value or short form feature id. It can be
> either
> >> a number
> >> or an alphanumeric sequence
> >>             IDCHAR+ ;
> >>        //LONGFEATID  :    // Long form of feature reference, type
> >> 01[A].C3G
> >> //        IDCHAR IDCHAR '[' ('A' | 'P' | 'B' | 'E' | 'C' | 'I' | 'L'
> |
> >> 'S')
> >> '].' VALFEATID ;
> >>
> >> fragment       DIGIT    :     '0'..'9';
> >>
> >> LITERAL    :     // This is the numerical literal
> >>         '$' DIGIT+ '$'
> >>     |    '$' DIGIT+ '.' DIGIT+ '$'
> >>     ;
> >>     PAD    :    '{PAD}';       // Newline and whitespace   NEWLINE
> >> :    '\r'? '\n' ;
> >> WS      :    (' '|'\t'|'\n'|'\r')+ {skip();} ;
> >>     but I got into problems. When I try to parse $c12345.67890" and
> >> try to
> >> interpret it inside ANTLRWorks, I end up with a rule having two
> >> expressions, the first being $c12345 and the other one .67890 I
> don't
> >> know why.
> >>
> >> I also tried to copy the first example in The definitive ANTLR
> reference
> >> book and it behaved much like this but somehow miraculously stopped
> to
> >> at once. Don't know if it is an installation issue.
> >>
> >> I use ANTLR 3.0.1, ANTRLWorks 1.1.3, StringTemplate 3.1b1, XJLibrary
> 2.0
> >> and Java 1.6.0_03.
> >>
> >> Thanks for your help in advance
> >>
> >>
> >>
> >
> >
> >
> 
> 
> 



From lgcraymer at yahoo.com  Wed Oct 24 09:51:56 2007
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 24 Oct 2007 09:51:56 -0700 (PDT)
Subject: [antlr-interest] Lexer bug? (with test cases!)
Message-ID: <977242.6975.qm@web55908.mail.re3.yahoo.com>



----- Original Message ----
> From: Terence Parr <parrt at cs.usfca.edu>
> To: antlr-interest Interest <antlr-interest at antlr.org>
> Sent: Wednesday, October 24, 2007 2:57:44 AM
> Subject: Re: [antlr-interest] Lexer bug? (with test cases!)
> 
> 
> On Oct 24, 2007, at 12:13 PM, Loring Craymer wrote:
> >>> lexer grammar test;
> >>> NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
> >>> OTHER: .;
> >
> > Take another look.  The '.' in the posted grammar is the character  
> > '.', not a wildcard; there is no ambiguity, just an LL(2)  
> > decision.  Unfortunately, the generated code makes an LL(1)  
> > decision and generates runtime errors as a result.  This is not a  
> > backtracking problem; note the selected workaround--it avoids  
> > having an epsilon alternative, but depends on k>1.
> 
> 
> Oh, sorry. you're talking about the (...)? subrule decision?  Ah,  
> well, it's the same really.  *Any* char can follow a token so the  
> wildcard follows every decision.  I can choose dot or wildcard.   
> That's ambig so I say LL(1).  Lex does some backtracking to make it  
> work more naturally.  ANTLR builds LL(*) recognizers, which are not  
> tuned specifically for building lexers as lex is.  Perhaps in the  
> future there could be a way for ANTLR to do this within confines of LL 
> (*).

I believe that you have a blindspot here.  An IDENT rule, for example, cannot be followed by an alphanumeric character.  There are character sequences that cannot follow a given rule, because they should be included in the rule matching.  ANTLR 3 lexers do not support FOLLOW sets (at least at token boundaries):  this is an implementation "feature", not an LL* behavior, and results from the assumption that "any char can follow a token" (that translates to "there is always an LL(1) decision to be made here").

--Loring

> 
> Terence
> 



__________________________________________________
Do You Yahoo!?
Tired of spam?  Yahoo! Mail has the best spam protection around 
http://mail.yahoo.com 

From Austin_Hastings at Yahoo.com  Wed Oct 24 10:57:45 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 24 Oct 2007 13:57:45 -0400
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <BAY130-DS3B58F9DC5138F78D06D9386940@phx.gbl>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>	<20071023121700.EE45411EB87@www.antlr.org>	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>	<471F2FFB.5040103@Yahoo.com>
	<BAY130-DS3B58F9DC5138F78D06D9386940@phx.gbl>
Message-ID: <471F8799.1040407@Yahoo.com>

Jim Idle wrote:
>> -----Original Message-----
>> From: Austin Hastings
>>
>> Terence Parr wrote:
>>     
>>> It appears it's not backtracking because only 1 extra char is enough,
>>> but it cannot be statically determined if we assume any char can
>>> follow.  I think you could make the subrule more complicated and it
>>> would require 2 extra then 3 then 4 etc...
>>>       
>> I think that inserting a catch{} block for optional subrules would go a
>> long way toward eliminating this particular aspect of the problem. When
>> you don't match correctly, throw an exception, catch it, and reset. The
>> consumption of the input becomes temporary until the token completes,
>> but that's straightforward.
>>     
>
> Remember that not all the target languages have exceptions and that
> exceptions are tediously slow as they are meant to be used for actual
> exception conditions, not ways of programming your way out of algorithmic
> paths. It seems that not too many people are aware of this, and it is
> perhaps because the term exception implies that you can make your own
> algorithmic exceptions I guess. 
>   
Actually, I was ignoring most of that for the simple reason that Antlr 
*currently* throws an exception (in Java) when a token fails to appear 
as it wants. My suggestion was that for possibly-zero-length 
sub-elements, a try/catch would be a simple patch to the existing 
template(s) that would address the issue. In other words, "I made a 
LL(1) guess about this, but I was wrong. Eat the exception. Nothing to 
see here, folks. Move along."

> Apart from this, as the lexer will generally be the biggest consumer of your
> CPU resources, other than what you potentially can do in your actions, it is
> worth thinking it through and not just letting the tool spit out a morass of
> code that will seemingly do the job for you but will be throwing exceptions
> all over the place and running like a dog. Most people want/need efficient
> recognizers :-)
>   
I question this statement, since there are so few ops/character being 
performed. But any discussion of lexer performance is a red herring 
anyway, since the generated code already uses exceptions to implement 
failure/recovery. The issue is improving the recovery.

>>>>> Remember folks: you can't just list a bunch of lexer rules that
>>>>> make sense to a human and expect ANTLR to "make it so".
>>>>>           
>>>> Why not?  This case seems fairly straightforward.
>>>>         
>>> Not to me and I spent 4 years making LL(*) work. ;)
>>>       
>> The original question was regarding Number = DIGIT+ ('.' DIGIT+)? and
>> how LL(*) was deciding that '.' implied the entire chain, when it
>> didn't. Perhaps another year would help, but I don't see how this
>> counts
>> as working.
>>     
>
> Ter is saying that it is behaving as he expects it to for this case. One's
> definition of working may of course differ from his ;-), but it is not
> broken, it works as he expects it to. Personally, as I can trivially express
> such a case in an ANTLR lexer, and the resulting code is more maintainable
> (because I do not have to imagine the implied interactions), I don't worry
> about it. It seems trite. While some things might be more 'naturally'
> expressed in say {f}lex, many other things are horrible. Even in this we
> probably all differ, because what seems natural to one does not to another -
> the idea of throwing together some lexer rules and having ANTLR just work it
> out has appeal but doesn't seem natural to me!
>   
I must have missed that email, then. I saw this one 
(http://www.antlr.org/pipermail/antlr-interest/2007-October/024345.html) 
but of the two NUMBERS:

NUMBER
	: ('0'..'9')+
		(
			 '.'
			 	(
			 		 '.' ('0'..'9')+ { $type = RANGE; }
			 		| ('0'..'9')+
			 		| // ERROR
			 	)
			| // Just an integer
		)
	;


NUMBER
	: ('0'..'9')+
		(
			 ('.' '0'..'9')=> ('.' ('0'..'9')+)
			|// Just an integer
		)
	;


Which one is it that is "trivial," the one with token type overriding, 
or the one with syntactic predicates?

One of the reasons I like Antlr3 is the relatively clean syntax. It's 
very approachable, and for the most part quite clear. It certainly seems 
to allow me to "write what I need," and that means writing regular 
expressions that describe what I'm trying to recognize. The original 
question involved what I thought was a "trivial" regex for a 
possibly-fractional number:

DIGIT+ ('.' DIGIT+)?

except it was wrapped up in fragments a little bit. Of course, that 
isn't quite as exact as:

Number	: '-'? Digit+ ( '.' Digit+)?; //(from: http://www.antlr.org/wiki/display/ANTLR3/JSON+Interpreter)


> However, there is nothing to stop anyone programming their lexer in {f}lex,
> or any other system for that matter, and supplying the token stream that way
> of course! There may well be cases where a lex like specification is easier
> for your particular situation. You can find references on the Wiki that show
> this to have been one of Ter's thoughts up front, though I imagine he was
> thinking more of hand crafted lexers that had to do strange things to
> tokenize, rather than a different lexer generator per se.
>   
"If you don't like it, then leave" is valid, but I think most of us here 
like it, at least enough to talk about how to make it better, and to 
maybe try and understand why it doesn't work like we think it should.

I notice that the Antlr book featured about 2 pages that talked about 
lexing, and none at all that were dedicated to lexer issues. This is 
despite the fact that the same(?) behavior was present in Antlr2 -- at 
least, I notice Antlr2 grammars like the f77 grammar that have the same 
kind of lexer-predicate stuff to disambiguate tokens that I cited from 
you above. That's probably because Mr. Parr, like just about everyone 
else, doesn't find lexing interesting or exciting. And rightfully so - 
lexing is boring compared to parsing. But that's only true if the lexer 
gets out of the way. Like a light switch, it's supposed to "just work." 
When it doesn't, it's bewildering.

>> present-day case.
>>
>> Besides, isn't that what backtrack=... is for? :-) Maybe there's a
>> lexer::backtrack switch needed? Or maybe k needs to be * instead of 1.
>>     
>
> The backtrack option is for the parser, and while I can see its usefulness
> for prototyping, I personally believe many that are new to ANTLR are getting
> themselves into a lot of trouble with this option ;-)
>   
You've said that a few times lately, and I, for one, wish that you would 
go ahead and write the "how to get out of backtracking" tutorial that 
seems called for. I've got backtracking turned on because I inherited 
(stole) my grammar. Because I fear and mistrust Antlr, I am afraid to 
turn it off because I don't have a good set of test cases built yet. 
(Too much time reading antlr-interest, probably. ;-)


>> I don't think it matters, does it? You're in the recursive-descent
>> business, not the state-machine business. You sell chicken, they sell
>> hamburgers.
>>     
>
> Yeah except that some people keep saying things akin to "Lex does it like
> this...", hence Ter is establishing that he understands how lex like systems
> are put together, and the way that ANLTR produces lexers is not down to some
> lack of knowledge on his part about other ways of constructing lexer
> generators, which I think most people would have to agree with.
>   

I prefer think of the situation above as an oversight rather than 
deliberate sabotage, so I'm not going there.

=Austin


From Mike at LeBlanc-Engineering.com  Wed Oct 24 11:04:36 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Wed, 24 Oct 2007 14:04:36 -0400
Subject: [antlr-interest] Guidance to lexer from parser
Message-ID: <66D3810D-7495-43A8-A7E7-292BB0F2B218@LeBlanc-Engineering.com>

I want to extend a language with a form to modify the token type of  
an identifier.  For example,

	DeclareSpecial(ABC);

will change ABC's type from IDENT to SPECIAL.  It just adds an entry  
to a HashTab with key "ABC".  The lexer rule for IDENT contains an  
action to consult the table to see if its result is SPECIAL instead  
of IDENT and invokes setType(SPECIAL).  It all works, except ...  
Suppose the next line is

	ABC

The lexer returns IDENT because it has already consumed that token  
into a buffer before the specialness was asserted.  Is there a way to  
rewind the token buffer and rescan?


From Austin_Hastings at Yahoo.com  Wed Oct 24 11:37:31 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 24 Oct 2007 14:37:31 -0400
Subject: [antlr-interest] ENHANCEMENT: Add invoke(...) method(s) on parser
Message-ID: <471F90EB.9030500@Yahoo.com>

While it's possible to do "different" things with the generated parsers, 
especially tree parsers, there aren't *that* many different things 
possible. I'd like to suggest generating an "invoke()" method that calls 
the top-level production.

There might be several signatures - invoke on File, on String, on 
Stream, but the basic paradigm of

CharStream input = ANTLRxyzStream(whatever);
CommonTokenStream tokens = new CommonTokenStream(new 
$grammarName$Lexer(input));
$grammarName$Parser parser = new $grammarName$Parser(tokens);
$methodName$_result result = parser.$methodName$();

is too much of a gimme not to be autogenerated. Of course, there's a 
potential option or antlr grammar change there, to indicate the "main" 
target. If not, then the first one in the file seems obvious.

=Austin


From antlr at mirality.co.nz  Wed Oct 24 12:22:33 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 25 Oct 2007 08:22:33 +1300
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <BAY130-DS3B58F9DC5138F78D06D9386940@phx.gbl>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>
	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
	<471F2FFB.5040103@Yahoo.com>
	<BAY130-DS3B58F9DC5138F78D06D9386940@phx.gbl>
Message-ID: <20071024192256.138F511EBA5@www.antlr.org>

At 05:12 25/10/2007, Jim Idle wrote:
 >Remember that not all the target languages have exceptions and
 >that exceptions are tediously slow as they are meant to be used
 >for actual exception conditions, not ways of programming your
 >way out of algorithmic paths. It seems that not too many people
 >are aware of this, and it is perhaps because the term exception
 >implies that you can make your own algorithmic exceptions I 
guess.

As Loring said, this is a red herring because exceptions are 
already used for this purpose in both ANTLR 2 and 3.  I wouldn't 
do this with exceptions, though, since they *are* slow -- it's 
easy enough to write the equivalent rollback code without needing 
to use exceptions.

 >Most people want/need efficient recognizers :-)

True, but it's counterproductive to program for efficiency by 
sacrificing correctness.

 >Personally, as I can trivially express such a case in an
 >ANTLR lexer, and the resulting code is more maintainable
 >(because I do not have to imagine the implied interactions), I
 >don't worry about it. It seems trite.

Ok, please show how you'd rewrite one of my other examples that 
doesn't work properly at the moment:

ONE: 'one';
TWO: 'two';
OTHER: .;

I don't see how you can get anything cleaner and more maintainable 
than that.

 >and the way that ANLTR produces lexers is not down to some
 >lack of knowledge on his part about other ways of constructing
 >lexer generators, which I think most people would have to agree
 >with.

I don't think anyone is saying that Ter has a lack of 
knowledge.  Just a blind spot in this particular case :)


From parrt at cs.usfca.edu  Wed Oct 24 16:02:41 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 25 Oct 2007 07:02:41 +0800
Subject: [antlr-interest] Lexer bug? (with test cases!)
In-Reply-To: <20071024110956.85B011005DC@nexus.cs.usfca.edu>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>
	<20071023121700.EE45411EB87@www.antlr.org>
	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>
	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
	<20071024110956.85B011005DC@nexus.cs.usfca.edu>
Message-ID: <4F664FCB-8064-45DD-A37B-7EA34F945F7A@cs.usfca.edu>


On Oct 24, 2007, at 7:09 PM, Gavin Lambert wrote:

thanks for the analysis.

> No; I've written a few hand-rolled parsers/lexers before, but not a  
> parser/lexer generator.  I bow to your experience there, but that  
> doesn't mean I can't say when I think there might be a "better" way  
> of doing something :)

Why not just do what lex does:

when you reach an accept state, record position in input.  Continue.   
If you get an error before next stop state, roll back  and return  
token.  Simple.  ANTLR can do same

( ('.' '0'..'9'+)=> '.' '0'..'9'+ | )

I just don't want to do that automatically.  Seriously guys. Go look  
at lex. It backtracks.  Man am i getting tired of providing a free  
education on this.

You are all correct. ANTLR doesn't automatically do what is natural.  
You can make it easily do so by mimicking lex, which backtracks.  Is  
there really anything else to say on this matter?

Ter


From parrt at cs.usfca.edu  Wed Oct 24 16:06:05 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 25 Oct 2007 07:06:05 +0800
Subject: [antlr-interest] Lexer bug? (with test cases!) [LAST MESSAGE]
In-Reply-To: <471F2FFB.5040103@Yahoo.com>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>	<20071023121700.EE45411EB87@www.antlr.org>	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>
	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>
	<471F2FFB.5040103@Yahoo.com>
Message-ID: <FAD60418-4286-4829-B267-A9461BCD7C71@cs.usfca.edu>


On Oct 24, 2007, at 7:43 PM, Austin Hastings wrote:

> Terence Parr wrote:
>>
>> It appears it's not backtracking because only 1 extra char is  
>> enough, but it cannot be statically determined if we assume any  
>> char can follow.  I think you could make the subrule more  
>> complicated and it would require 2 extra then 3 then 4 etc...
>
> I think that inserting a catch{} block for optional subrules would  
> go a long way toward eliminating this particular aspect of the  
> problem. When you don't match correctly, throw an exception, catch  
> it, and reset. The consumption of the input becomes temporary until  
> the token completes, but that's straightforward.

Lex backtracks just like that.  Can you people not see that as  
backtracking?  I'm dumbfounded at this point.

>>> This is because the clause ('.' DIGIT+)? must either match a dot  
>>> followed by at least one digit (minimum two characters) or match  
>>> nothing at all.  Seeing the dot and then assuming the following  
>>> character is a DIGIT without actually checking it first just  
>>> isn't right.
>>
>> Isn't right in that it won't do what is natural.  I couldnt' make  
>> antlr do the right thing easily in this case.
>
> Freudian slip? ;)

No, i meant every word.

> The original question was regarding Number = DIGIT+ ('.' DIGIT+)?  
> and how LL(*) was deciding that '.' implied the entire chain, when  
> it didn't. Perhaps another year would help, but I don't see how  
> this counts as working.

It works per my algorithm.  Don't like it? Use another tool.  I know  
i'm a prof, but i'm getting tired of schooling you boys.  ANY char  
can follow.  No analysis possible.


>
> Besides, isn't that what backtrack=... is for? :-) Maybe there's a  
> lexer::backtrack switch needed? Or maybe k needs to be * instead of 1.

See my prev email. mimicking lex is easy.  Or, i can finally add my  
option to emit lexer errors i normally hush.

>> Have you built a lex like creature before?  I have back in 1988.   
>> I believe I'm remembering how it operates correctly.
>>
> I don't think it matters, does it? You're in the recursive-descent  
> business, not the state-machine business. You sell chicken, they  
> sell hamburgers.

Yes, everyone i ssaying lex does it right though. sure. backtracking.  
so backtrack with antlr to do what you want.

Ok, i'm done now.
Ter


From parrt at cs.usfca.edu  Wed Oct 24 16:50:55 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 25 Oct 2007 07:50:55 +0800
Subject: [antlr-interest] How to use arg* when rewriting with
	StringTemplate
In-Reply-To: <6F7F118281893140B2E80FA4F9331BC626F685@email.innoimm.local>
References: <6F7F118281893140B2E80FA4F9331BC626F685@email.innoimm.local>
Message-ID: <B4DF3CEB-036F-4F0A-AED6-B380EB566BF8@cs.usfca.edu>


On Oct 24, 2007, at 11:13 PM, <Robert.Klaus at innovations.de>  
<Robert.Klaus at innovations.de> wrote:

> Hi,
>
> I would like to rewrite a language using a TreeGrammar. For this  
> purpose
> I have defined a matching rule and rewrite with a template like this:
>
>
> ^(ID args+=arg*) -> template(id={$ID.text}, arg={$args}) "<id> ( <arg;
> separator=\", \"> )"
>
> So what happens is that the rule "arg"'s return template is added  
> to an
> ArrayList which then is passed to the template. However "arg" does not
> return a template as it does not need to rewrite something.

Hi Robert.  Unfortunately, ANTLR (currently) doesn't automatically  
return anything in output=template mode. I wasn't sure of correct  
answer.

> arg:
> INTEGER
> | FLOAT
> | BOOLEAN
> ;
>
> So what I need is the original text from each arg.

Just add

arg
@after { $st = {%{$text}}; }  // return template created from text of  
rule.
	:	...
	;

Ter

From parrt at cs.usfca.edu  Wed Oct 24 16:53:50 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 25 Oct 2007 07:53:50 +0800
Subject: [antlr-interest] ENHANCEMENT: Add ANTLRFileStream(File f)
	constructor
In-Reply-To: <471F637D.9060101@Yahoo.com>
References: <471F637D.9060101@Yahoo.com>
Message-ID: <111D6F85-6FFE-4AB0-A9B1-3FD052ACA8F9@cs.usfca.edu>

good idea: added

http://www.antlr.org:8888/browse/ANTLR-186

i would have done so immediately but didn't want to change anything  
without time to really test; off to shanghai in a few hours.
Ter
On Oct 24, 2007, at 11:23 PM, Austin Hastings wrote:

> The existing ANTLRFileStream constructors take a string and create  
> a file. Taking a File seems like a sensible enhancement.
>
> =Austin
>


From parrt at cs.usfca.edu  Wed Oct 24 16:55:58 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 25 Oct 2007 07:55:58 +0800
Subject: [antlr-interest] ENHANCEMENT: Add invoke(...) method(s) on
	parser
In-Reply-To: <471F90EB.9030500@Yahoo.com>
References: <471F90EB.9030500@Yahoo.com>
Message-ID: <85103C97-D65C-4D66-97F5-76D344AB00F4@cs.usfca.edu>

Agreed. Adding to list.

It is pretty annoying have to retype that all the time.  Thanks for  
the template ;)

http://www.antlr.org:8888/browse/ANTLR-187

I should be back to ST and ANTLR mode upon my return from china.

Ter

On Oct 25, 2007, at 2:37 AM, Austin Hastings wrote:

> While it's possible to do "different" things with the generated  
> parsers, especially tree parsers, there aren't *that* many  
> different things possible. I'd like to suggest generating an "invoke 
> ()" method that calls the top-level production.
>
> There might be several signatures - invoke on File, on String, on  
> Stream, but the basic paradigm of
>
> CharStream input = ANTLRxyzStream(whatever);
> CommonTokenStream tokens = new CommonTokenStream(new $grammarName 
> $Lexer(input));
> $grammarName$Parser parser = new $grammarName$Parser(tokens);
> $methodName$_result result = parser.$methodName$();
>
> is too much of a gimme not to be autogenerated. Of course, there's  
> a potential option or antlr grammar change there, to indicate the  
> "main" target. If not, then the first one in the file seems obvious.
>
> =Austin
>


From clifford.heath at gmail.com  Wed Oct 24 17:15:29 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Thu, 25 Oct 2007 10:15:29 +1000
Subject: [antlr-interest] Lexer bug? (with test cases!) [LAST MESSAGE]
In-Reply-To: <FAD60418-4286-4829-B267-A9461BCD7C71@cs.usfca.edu>
References: <341705.96553.qm@web55902.mail.re3.yahoo.com>	<20071023121700.EE45411EB87@www.antlr.org>	<51DC7B80-E7CD-43BB-BFD2-78148FF00AD8@cs.usfca.edu>	<20071024095318.60ECA1008BD@nexus.cs.usfca.edu>	<9E44294C-F3F0-4FB1-A421-DD1141968E17@cs.usfca.edu>	<471F2FFB.5040103@Yahoo.com>
	<FAD60418-4286-4829-B267-A9461BCD7C71@cs.usfca.edu>
Message-ID: <ffon71$da6$1@ger.gmane.org>

Terence Parr wrote:
> Or, i can finally add my 
> option to emit lexer errors i normally hush.

You should add an option to silence lexer errors you normally issue.

Silent failure is *never* the right default.

Clifford Heath.


From parrt at cs.usfca.edu  Wed Oct 24 19:30:55 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 25 Oct 2007 10:30:55 +0800
Subject: [antlr-interest] solution to lexer issue
Message-ID: <B9FF6D0B-5C69-4C77-ABF0-105AA073CDDB@cs.usfca.edu>

We agree antlr is behaving unnaturally here (i.e., it's wrong).  It  
is, however, behaving as I designed it to do.  There is no way to  
make it work better using current static analysis and current  
assumptions.  I can turn the error message back on which would at  
least make ANTLR behave sanely, error msg if problem, but this would  
likely turn on errors between keywords / ID rules.

Solution is to change my assumption that any char can follow a token  
(some of you don't believe me that is the problem but it is).   
Anyhoo, if I assume valid input now instead, then all of a sudden I  
have a fighting chance.  If I let ANTLR's static analysis roam beyond  
a token to the start of any valid token, it will clearly see a  
problem in the following cases that need k>1:

NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
DOT : '.' ;

NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
OTHER: .;

ONE: 'one';
TWO: 'two';
OTHER: .;

Runtime errors might get messed up a bit by my new assumption. I'll  
have to investigate that.

I didn't say there was NO solution, just not using LL(*) and  
assumption any char can follow.

Note that all three examples are ambiguous. Same input, different  
rules can match.  I'll try to hush as many warnings as possible while  
leaving important ones and while forcing antlr to see beyond one  
token to any other.  I'm not sure this will work properly in all  
cases. Will have to look further.

I believe that solution will satisfy everyone.    Added improvement  
request:

http://www.antlr.org:8888/browse/ANTLR-189

Ter

From clifford.heath at gmail.com  Wed Oct 24 21:56:03 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Thu, 25 Oct 2007 14:56:03 +1000
Subject: [antlr-interest] solution to lexer issue
In-Reply-To: <B9FF6D0B-5C69-4C77-ABF0-105AA073CDDB@cs.usfca.edu>
References: <B9FF6D0B-5C69-4C77-ABF0-105AA073CDDB@cs.usfca.edu>
Message-ID: <ffp7l5$ioi$1@ger.gmane.org>

Terence Parr wrote:
> I believe that solution will satisfy everyone. 

Fantastic stuff... sorry for complaining so vociferously.
I really appreciate your overall accomplishment with Antlr!

I never got to use it on any commercial projects, so I'm
learning it for my current freeware project, a language
to replace SQL, but at a higher level - more conceptual,
more English-like, more difficult to parse :-). Lots of
interesting information modeling theory behind it, but
to an end user, easy to read & write, and it just works.
That's why I don't want them getting any surprises ;-).

Clifford Heath.


From Robert.Klaus at innovations.de  Thu Oct 25 01:02:04 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Thu, 25 Oct 2007 10:02:04 +0200
Subject: [antlr-interest] How to use arg* when rewriting with
	StringTemplate
In-Reply-To: <B4DF3CEB-036F-4F0A-AED6-B380EB566BF8@cs.usfca.edu>
References: <6F7F118281893140B2E80FA4F9331BC626F685@email.innoimm.local>
	<B4DF3CEB-036F-4F0A-AED6-B380EB566BF8@cs.usfca.edu>
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F6A2@email.innoimm.local>

Hi Terence,

Thanks for the suggestion! However I have a different solution, as I
only need to replace the text for ID. My approach is ... ehm... Hacky
but I think I'll post it anyway, as it might help someone with a similar
problem.

I definend a method in the @members section:

private void replace(CommonTree tree, String text)
    {
      ((TokenRewriteStream)input.getTokenStream()).replace(
         input.getTreeAdaptor().getTokenStartIndex(tree),
         input.getTreeAdaptor().getTokenStopIndex(tree),
         text);
    }

It directly alters the TokenRewriteStream.

And then I was able to do a replace within an Action.

^(id=ID args+=arg*)
{
	replace($id, translateToNewName($id.text));
}

Bye,

Robert


> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu] 
> Sent: Thursday, October 25, 2007 1:51 AM
> To: Klaus Robert
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] How to use arg* when rewriting 
> with StringTemplate
> 
> 
> On Oct 24, 2007, at 11:13 PM, <Robert.Klaus at innovations.de> 
> <Robert.Klaus at innovations.de> wrote:
> 
> > Hi,
> >
> > I would like to rewrite a language using a TreeGrammar. For this 
> > purpose I have defined a matching rule and rewrite with a template 
> > like this:
> >
> >
> > ^(ID args+=arg*) -> template(id={$ID.text}, arg={$args}) 
> "<id> ( <arg; 
> > separator=\", \"> )"
> >
> > So what happens is that the rule "arg"'s return template is 
> added to 
> > an ArrayList which then is passed to the template. However 
> "arg" does 
> > not return a template as it does not need to rewrite something.
> 
> Hi Robert.  Unfortunately, ANTLR (currently) doesn't 
> automatically return anything in output=template mode. I 
> wasn't sure of correct answer.
> 
> > arg:
> > INTEGER
> > | FLOAT
> > | BOOLEAN
> > ;
> >
> > So what I need is the original text from each arg.
> 
> Just add
> 
> arg
> @after { $st = {%{$text}}; }  // return template created from 
> text of rule.
> 	:	...
> 	;
> 
> Ter
> 

From Robert.Klaus at innovations.de  Thu Oct 25 01:02:50 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Thu, 25 Oct 2007 10:02:50 +0200
Subject: [antlr-interest] No source for ANTLR Runtime?
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F6A3@email.innoimm.local>

Hi,

Where is the source for the ANTLR Runtime?

I'm using Eclipse and would like to attach the source to the ANTLR jar
because this enables JavaDoc for Methods (JavaDoc is only available
online). The distribution does not include the source for the runtime
classes and I could not find it anywhere.

Thanks,

Robert


-------------------------------------------------------------
Robert Klaus
Diplom Informatiker
Product Development
-------------------------------------------------------------
Innovations Softwaretechnologie GmbH
Ziegelei 7
88090 Immenstaad
Germany
Phone: +49(0)7545-202-339
robert.klaus at innovations.de
www.visual-rules.com
-------------------------------------------------------------
Executives: 
Achim Berger, Thomas Cotic, Walter Pitz
Register Court Ulm HRB 631622
-------------------------------------------------------------

From antlr at shmuelhome.mine.nu  Thu Oct 25 01:42:49 2007
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Thu, 25 Oct 2007 10:42:49 +0200
Subject: [antlr-interest] No source for ANTLR Runtime?
In-Reply-To: <6F7F118281893140B2E80FA4F9331BC626F6A3@email.innoimm.local>
References: <6F7F118281893140B2E80FA4F9331BC626F6A3@email.innoimm.local>
Message-ID: <47205709.6020506@shmuelhome.mine.nu>

Robert.Klaus at innovations.de wrote:
> Hi,
>
> Where is the source for the ANTLR Runtime?
>
> I'm using Eclipse and would like to attach the source to the ANTLR jar
> because this enables JavaDoc for Methods (JavaDoc is only available
> online). The distribution does not include the source for the runtime
> classes and I could not find it anywhere.
>
> Thanks,
>
> Robert
>
>
>   
I have it in Runtime/Java/src


From antlr at mirality.co.nz  Thu Oct 25 03:40:13 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 25 Oct 2007 23:40:13 +1300
Subject: [antlr-interest] solution to lexer issue
In-Reply-To: <B9FF6D0B-5C69-4C77-ABF0-105AA073CDDB@cs.usfca.edu>
References: <B9FF6D0B-5C69-4C77-ABF0-105AA073CDDB@cs.usfca.edu>
Message-ID: <20071025104023.8E4D411EC7A@www.antlr.org>

At 15:30 25/10/2007, Terence Parr wrote:
 >Solution is to change my assumption that any char can follow a
 >token (some of you don't believe me that is the problem but it 
is).

I'm curious, isn't this "any char can follow a token" thing only 
true for (a) filter=true or (b) malformed input?  Neither of which 
ought to be the common case?

And I'm still not sure how assuming that any character at all 
could follow the "e" in "one" means that you don't need to test 
that the "e" is actually there at all.  But I'll take your word 
for it.

 >NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
 >DOT : '.' ;
 >
 >NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
 >OTHER: .;
 >
 >ONE: 'one';
 >TWO: 'two';
 >OTHER: .;
[...]
 >Note that all three examples are ambiguous. Same input,
 >different rules can match.

If all rules have equal precedence, then sure, they're 
ambiguous.  But I thought the lexer was supposed to have defined 
precedence (longest match and/or first listed token 
wins)..?  Certainly the generated mTokens rule appears to test 
them in order...

 >I believe that solution will satisfy everyone.    Added
 >improvement request:
 >
 >http://www.antlr.org:8888/browse/ANTLR-189

Cool! :)


From Robert.Klaus at innovations.de  Thu Oct 25 03:49:19 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Thu, 25 Oct 2007 12:49:19 +0200
Subject: [antlr-interest] Removing System.out and System.err calls
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F6C5@email.innoimm.local>

Hi,

In the BaseRecognizer.class there are several calls to System.err and
System.out. In ANTLR2 I could overwrite methods like "reportError" to
take care of the messages myself.
However this is not possible in ANTLR3, as some of these calls are in
methods I think are better not overwritten (e.g.
"recoverFromMismatchedToken").
Would it be possible to delegate all reporting to dedicated methods,
e.g. "public void reportError(String msg)"? This would allow users of
ANTLR3 to switch off System.out calls or use their own logging facility.


Bye,

Robert


P.S.

I'm using ANTLR 3.0.1

-------------------------------------------------------------
Robert Klaus
Diplom Informatiker
Product Development
-------------------------------------------------------------
Innovations Softwaretechnologie GmbH
Ziegelei 7
88090 Immenstaad
Germany
Phone: +49(0)7545-202-339
robert.klaus at innovations.de
www.visual-rules.com
-------------------------------------------------------------
Executives: 
Achim Berger, Thomas Cotic, Walter Pitz
Register Court Ulm HRB 631622
-------------------------------------------------------------

From win at wincent.com  Thu Oct 25 05:44:27 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Thu, 25 Oct 2007 14:44:27 +0200
Subject: [antlr-interest] solution to lexer issue
In-Reply-To: <mailman.1623.1193299336.2534.antlr-interest@antlr.org>
References: <mailman.1623.1193299336.2534.antlr-interest@antlr.org>
Message-ID: <533DEC56-58A8-4BBD-BF40-BB3702C040BE@wincent.com>

El 25/10/2007, a las 10:02, Terence Parr <parrt at cs.usfca.edu> escribi?:

> Solution is to change my assumption that any char can follow a token
> (some of you don't believe me that is the problem but it is).
> Anyhoo, if I assume valid input now instead

I think you've hit the nail on the head right there. And assuming  
valid input is coherent with how ANTLR already behaves (ie. it builds  
*predictive* recognizers that make those predictions based on the  
assumption that the input is valid).

> Note that all three examples are ambiguous. Same input, different
> rules can match.

I presume you're using the ordering of the rules as an external  
constraint to disambiguate them, right?

Cheers,
Wincent



From corellian.c at gmail.com  Thu Oct 25 07:17:06 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Thu, 25 Oct 2007 16:17:06 +0200
Subject: [antlr-interest]  Ambiguities in ANTLR's web Java grammar
Message-ID: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>

Hi,

I've found that the Java.g grammar file, doesn't work, as it has a couple of
ambiguities, starting from the basic "if-else" statements.

My question is, for example, how it can be the "if-else" ambiguity fixed?

Please I need some help on this, so anyways the Java grammar posted in the
web needs to be fixed somehow.


Regards,

Cris

-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071025/3bbaeed7/attachment.html 

From j.a.horsmeier at wanadoo.nl  Thu Oct 25 07:31:35 2007
From: j.a.horsmeier at wanadoo.nl (Jos A. Horsmeier)
Date: Thu, 25 Oct 2007 16:31:35 +0200
Subject: [antlr-interest] Ambiguities in ANTLR's web Java grammar
In-Reply-To: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>
Message-ID: <044b01c81713$bf304bd0$0a01a8c0@CALVIN>


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cristian Peraferrer
Sent: Thursday, October 25, 2007 4:17 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Ambiguities in ANTLR's web Java grammar

> I've found that the Java.g grammar file, doesn't work, as it has a 
> couple of ambiguities, starting from the basic "if-else" statements.

> My question is, for example, how it can be the "if-else" ambiguity 
> fixed? 

> Please I need some help on this, so anyways the Java grammar posted in 
> the web needs to be fixed somehow.

Those 'dangling' else constructs are ambiguous constructs in the grammar
but as long as the parser prefers a 'shift' over a 'reduce' everything is
fine and the 'else' will be associated with the innermost 'if-then'.

kind regards,

Jos



From porcelli at uol.com.br  Thu Oct 25 07:32:39 2007
From: porcelli at uol.com.br (Alexandre Porcelli)
Date: Thu, 25 Oct 2007 11:32:39 -0300
Subject: [antlr-interest] Ambiguities in ANTLR's web Java grammar
In-Reply-To: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>
References: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>
Message-ID: <ee873c070710250732pb006411v63a48e22bbba6cc0@mail.gmail.com>

The "if-else" structure always generates ambiguities warnings but the
default ANTLR behavior automatically "recover" this problem (for more
information check the ANTLR Terence Book).
Resume: Same ambiguities you can just discard (ie: "if-else").

On 10/25/07, Cristian Peraferrer <corellian.c at gmail.com> wrote:
> Hi,
>
> I've found that the Java.g grammar file, doesn't work, as it has a couple of
> ambiguities, starting from the basic "if-else" statements.
>
> My question is, for example, how it can be the "if-else" ambiguity fixed?
>
> Please I need some help on this, so anyways the Java grammar posted in the
> web needs to be fixed somehow.
>
>
> Regards,
>
> Cris
>
> --
> GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch

From corellian.c at gmail.com  Thu Oct 25 07:36:50 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Thu, 25 Oct 2007 16:36:50 +0200
Subject: [antlr-interest] Ambiguities in ANTLR's web Java grammar
In-Reply-To: <ee873c070710250732pb006411v63a48e22bbba6cc0@mail.gmail.com>
References: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>
	<ee873c070710250732pb006411v63a48e22bbba6cc0@mail.gmail.com>
Message-ID: <3edc2fbd0710250736o359387a9na8dbd7cbf8e65b3d@mail.gmail.com>

Ok, it is clear for me now. Thanks!

Another question: how I can fix the floating point numbers recognition? I
tried to isolate the floats lexer part, and it doesn't work.

2007/10/25, Alexandre Porcelli <porcelli at uol.com.br>:
>
> The "if-else" structure always generates ambiguities warnings but the
> default ANTLR behavior automatically "recover" this problem (for more
> information check the ANTLR Terence Book).
> Resume: Same ambiguities you can just discard (ie: "if-else").
>
> On 10/25/07, Cristian Peraferrer <corellian.c at gmail.com> wrote:
> > Hi,
> >
> > I've found that the Java.g grammar file, doesn't work, as it has a
> couple of
> > ambiguities, starting from the basic "if-else" statements.
> >
> > My question is, for example, how it can be the "if-else" ambiguity
> fixed?
> >
> > Please I need some help on this, so anyways the Java grammar posted in
> the
> > web needs to be fixed somehow.
> >
> >
> > Regards,
> >
> > Cris
> >
> > --
> > GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
>



-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071025/4bb5815a/attachment.html 

From oehrstroem at gmail.com  Thu Oct 25 08:21:26 2007
From: oehrstroem at gmail.com (Fredrik Ohrstrom)
Date: Thu, 25 Oct 2007 17:21:26 +0200
Subject: [antlr-interest] Question about example Ansi C grammar for antlr v3
Message-ID: <8d80b1570710250821i572dd5d1g512a31a87defea40@mail.gmail.com>

I use the grammar for C that I found here:
http://www.antlr.org/grammar/1153358328744/c.g

And I found that the following code does not parse because beta
is added as a type...

typedef void (*Alfa)(int beta);
int main ()
{
  int beta = x();
}

I also found that two identical typedefs in a row do not parse.
typedef int a;
typedef int a;

I have tried to fix these problems, but so far I have failed. Can
somebody help me?

Thank you very much in advance!

Fredrik Ohrstrom

From corellian.c at gmail.com  Thu Oct 25 08:31:34 2007
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Thu, 25 Oct 2007 17:31:34 +0200
Subject: [antlr-interest] Ambiguities in ANTLR's web Java grammar
In-Reply-To: <3edc2fbd0710250736o359387a9na8dbd7cbf8e65b3d@mail.gmail.com>
References: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>
	<ee873c070710250732pb006411v63a48e22bbba6cc0@mail.gmail.com>
	<3edc2fbd0710250736o359387a9na8dbd7cbf8e65b3d@mail.gmail.com>
Message-ID: <3edc2fbd0710250831o65fed418j1adc2ed469bd466d@mail.gmail.com>

I find that with backtrack & memoize deactivated, the "if-else" of the
grammar it doesn't work, why?

2007/10/25, Cristian Peraferrer <corellian.c at gmail.com>:
>
> Ok, it is clear for me now. Thanks!
>
> Another question: how I can fix the floating point numbers recognition? I
> tried to isolate the floats lexer part, and it doesn't work.
>
> 2007/10/25, Alexandre Porcelli < porcelli at uol.com.br>:
> >
> > The "if-else" structure always generates ambiguities warnings but the
> > default ANTLR behavior automatically "recover" this problem (for more
> > information check the ANTLR Terence Book).
> > Resume: Same ambiguities you can just discard (ie: "if-else").
> >
> > On 10/25/07, Cristian Peraferrer < corellian.c at gmail.com> wrote:
> > > Hi,
> > >
> > > I've found that the Java.g grammar file, doesn't work, as it has a
> > couple of
> > > ambiguities, starting from the basic "if-else" statements.
> > >
> > > My question is, for example, how it can be the "if-else" ambiguity
> > fixed?
> > >
> > > Please I need some help on this, so anyways the Java grammar posted in
> > the
> > > web needs to be fixed somehow.
> > >
> > >
> > > Regards,
> > >
> > > Cris
> > >
> > > --
> > > GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
> >
>
>
>
> --
> GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
>



-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071025/4caa1919/attachment-0001.html 

From travis at jerseyrogers.com  Thu Oct 25 08:48:26 2007
From: travis at jerseyrogers.com (Travis R Rogers)
Date: Thu, 25 Oct 2007 11:48:26 -0400
Subject: [antlr-interest] Another FNG question...
Message-ID: <94E74C3E30BBDA4AA8C1232453D616131F907C@ms02.mailstreet2003.net>

Yes I'm a newby to antlr and language lexing/parsing in general.  I apologize for the inexperienced nature of these questions and appreciate any guidance that can be provided.
 
I have a grammar (listed at the bottom of the e-mail) that acts odd to me.
 
When I run it through the debugger with the below I get the related (simplified) result:
**NOTE** <nl> = windows newline.
abc10def = string number string
abc10def<nl> = string number string
abc10.2..20.3def = string range string
abc10.2..20.3def<nl> = string range string
10abc = number string
10abc<nl> = number string
10.2..20.3 = range
10.2..20.3<nl> = range
abc = string
abc<nl> = string
10 = number
10<nl> = NoViableAltException
abc10 = string number
abc10<nl> = NoViableAltException
 
Question 1:  I do not understand why I am getting the NoViableAltExceptions in the above when so many other things seem to work.
 
Question 2:  I never get a WS printed out in any of these but the Windows newline should cause 2 of them.  Why not?
 
Next scenario:
abc<nl>def = 1 string of abc
This is true even if I put $channel=HIDDEN or skip() on WS.
 
Question 3:  Why am I only getting only 1 string returned?
 
That should be enough for now.
 
 
grammar mytester;
 
prog      :  stat+;
 
stat      :  range {System.out.println("range");}
          |  number {System.out.println("number");}
          |  string {System.out.println("string");}
          ;
 
string    :  ALPHASTR;
 
range     :  number DOTDOT number;
 
number    :  NUM DOT NUM
          |  NUM
          ;
 
ALPHASTR  :  ALPHA ALPHA*;
 
NUM       :  NUMERIC NUMERIC*;
 
DOTDOT    :  '..';
 
DOT       :  '.';
 
fragment
ALPHA     :  'a'..'z'
          |  'A'..'Z'
          ;
 
fragment
NUMERIC   :  '0'..'9';
 
EOL       :  ';';
WS        :  '\r'|'\n'|' ' {System.out.println("WS");};
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071025/96d7da09/attachment.html 

From jimi at temporal-wave.com  Thu Oct 25 08:48:47 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 25 Oct 2007 08:48:47 -0700
Subject: [antlr-interest] Ambiguities in ANTLR's web Java grammar
In-Reply-To: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>
References: <3edc2fbd0710250717g4d43534esf6309093a6a98f90@mail.gmail.com>
Message-ID: <BAY130-DS35741D59C66439EE6DA0586950@phx.gbl>

Chris,

 

If you look at the version of this grammar in the examples for the C target,
I have removed these warnings. They are innocuous in that ANTLR produces
'the right thing', but I like to get rid of them anyway.

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cristian Peraferrer
Sent: Thursday, October 25, 2007 7:17 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Ambiguities in ANTLR's web Java grammar

 

Hi,

I've found that the Java.g grammar file, doesn't work, as it has a couple of
ambiguities, starting from the basic "if-else" statements.

My question is, for example, how it can be the "if-else" ambiguity fixed? 

Please I need some help on this, so anyways the Java grammar posted in the
web needs to be fixed somehow.


Regards,

Cris

-- 
GPG Key-ID: 0x564903FA - JID: corellian at swissjabber.ch 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071025/552ba471/attachment.html 

From jimi at temporal-wave.com  Thu Oct 25 08:55:30 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 25 Oct 2007 08:55:30 -0700
Subject: [antlr-interest] Another FNG question...
In-Reply-To: <94E74C3E30BBDA4AA8C1232453D616131F907C@ms02.mailstreet2003.net>
References: <94E74C3E30BBDA4AA8C1232453D616131F907C@ms02.mailstreet2003.net>
Message-ID: <BAY130-DS302FBE56676077D951B0E86950@phx.gbl>

Looks like you are passing through any whitespace and newline characters for
a start, so you can hide them from the parser by adding $channel = HIDDEN;
to your action for the WS rule, then the parser won't see them.  You many
find that you want an EOF token on the end of your main parser rule, to make
sure that it tries to consume the entire input string.

 

 

Hope that helps!

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Travis R Rogers
Sent: Thursday, October 25, 2007 8:48 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Another FNG question...

 

Yes I'm a newby to antlr and language lexing/parsing in general.  I
apologize for the inexperienced nature of these questions and appreciate any
guidance that can be provided.

 

I have a grammar (listed at the bottom of the e-mail) that acts odd to me.

 

When I run it through the debugger with the below I get the related
(simplified) result:

**NOTE** <nl> = windows newline.

abc10def = string number string

abc10def<nl> = string number string

abc10.2..20.3def = string range string

abc10.2..20.3def<nl> = string range string

10abc = number string

10abc<nl> = number string

10.2..20.3 = range

10.2..20.3<nl> = range

abc = string

abc<nl> = string

10 = number

10<nl> = NoViableAltException

abc10 = string number

abc10<nl> = NoViableAltException

 

Question 1:  I do not understand why I am getting the NoViableAltExceptions
in the above when so many other things seem to work.

 

Question 2:  I never get a WS printed out in any of these but the Windows
newline should cause 2 of them.  Why not?

 

Next scenario:

abc<nl>def = 1 string of abc

This is true even if I put $channel=HIDDEN or skip() on WS.

 

Question 3:  Why am I only getting only 1 string returned?

 

That should be enough for now.

 

 

grammar mytester;

 

prog      :  stat+;

 

stat      :  range {System.out.println("range");}
          |  number {System.out.println("number");}
          |  string {System.out.println("string");}
          ;

 

string    :  ALPHASTR;

 

range     :  number DOTDOT number;

 

number    :  NUM DOT NUM
          |  NUM
          ;

 

ALPHASTR  :  ALPHA ALPHA*;

 

NUM       :  NUMERIC NUMERIC*;

 

DOTDOT    :  '..';

 

DOT       :  '.';

 

fragment
ALPHA     :  'a'..'z'
          |  'A'..'Z'

          ;

 

fragment
NUMERIC   :  '0'..'9';

 

EOL       :  ';';

WS        :  '\r'|'\n'|' ' {System.out.println("WS");};

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071025/1017e30a/attachment-0001.html 

From travis at jerseyrogers.com  Thu Oct 25 09:27:15 2007
From: travis at jerseyrogers.com (Travis R Rogers)
Date: Thu, 25 Oct 2007 12:27:15 -0400
Subject: [antlr-interest] Another FNG question...
References: <94E74C3E30BBDA4AA8C1232453D616131F907C@ms02.mailstreet2003.net>
	<BAY130-DS302FBE56676077D951B0E86950@phx.gbl>
Message-ID: <94E74C3E30BBDA4AA8C1232453D616131F907D@ms02.mailstreet2003.net>

I found it and it is definitely a rookie mistake.  I had tried both $channel = HIDDEN and skip() but I didn't put the WS rule in parens so it was only applying to spaces.  Once I changed from 
WS :  '\r'|'\n'|' ' {$channel=HIDDEN;}; 
to 
WS  :  ('\r'|'\n'|' ') {$channel=HIDDEN;};  
then it worked.
 
Sorry for the bother, thanks for the help.

________________________________

From: antlr-interest-bounces at antlr.org on behalf of Jim Idle
Sent: Thu 10/25/2007 11:55 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Another FNG question...



Looks like you are passing through any whitespace and newline characters for a start, so you can hide them from the parser by adding $channel = HIDDEN; to your action for the WS rule, then the parser won't see them.  You many find that you want an EOF token on the end of your main parser rule, to make sure that it tries to consume the entire input string.

 

 

Hope that helps!

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Travis R Rogers
Sent: Thursday, October 25, 2007 8:48 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Another FNG question...

 

Yes I'm a newby to antlr and language lexing/parsing in general.  I apologize for the inexperienced nature of these questions and appreciate any guidance that can be provided.

 

I have a grammar (listed at the bottom of the e-mail) that acts odd to me.

 

When I run it through the debugger with the below I get the related (simplified) result:

**NOTE** <nl> = windows newline.

abc10def = string number string

abc10def<nl> = string number string

abc10.2..20.3def = string range string

abc10.2..20.3def<nl> = string range string

10abc = number string

10abc<nl> = number string

10.2..20.3 = range

10.2..20.3<nl> = range

abc = string

abc<nl> = string

10 = number

10<nl> = NoViableAltException

abc10 = string number

abc10<nl> = NoViableAltException

 

Question 1:  I do not understand why I am getting the NoViableAltExceptions in the above when so many other things seem to work.

 

Question 2:  I never get a WS printed out in any of these but the Windows newline should cause 2 of them.  Why not?

 

Next scenario:

abc<nl>def = 1 string of abc

This is true even if I put $channel=HIDDEN or skip() on WS.

 

Question 3:  Why am I only getting only 1 string returned?

 

That should be enough for now.

 

 

grammar mytester;

 

prog      :  stat+;

 

stat      :  range {System.out.println("range");}
          |  number {System.out.println("number");}
          |  string {System.out.println("string");}
          ;

 

string    :  ALPHASTR;

 

range     :  number DOTDOT number;

 

number    :  NUM DOT NUM
          |  NUM
          ;

 

ALPHASTR  :  ALPHA ALPHA*;

 

NUM       :  NUMERIC NUMERIC*;

 

DOTDOT    :  '..';

 

DOT       :  '.';

 

fragment
ALPHA     :  'a'..'z'
          |  'A'..'Z'

          ;

 

fragment
NUMERIC   :  '0'..'9';

 

EOL       :  ';';

WS        :  '\r'|'\n'|' ' {System.out.println("WS");};

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071025/b665d422/attachment.html 

From dan.hazon at novafora.com  Thu Oct 25 15:58:59 2007
From: dan.hazon at novafora.com (Dan Hazon)
Date: Thu, 25 Oct 2007 15:58:59 -0700
Subject: [antlr-interest] FW: MACROs in ANTLR
Message-ID: <DBDE9C823117644B80450B5F6B767E35453710@nfsbs.ad.novafora.com>

I pretty new ANTLR user. I have read the definitive reference and using
the C target language.
I have a section of code that repeats itself many times in different
rules with slight modification on the name of one variable. Instead of
manually instantiating the code and blowing up the size of the .g file
I'm interested to declare a macro that will reference some ANTLR
variables and let the code generator instantiate this in the same manner
C compiler does.
I think I can do it in C by "learning" the generated C code and defining
a C macro that would instantiate the expected code. However this is
almost as wrong as modifying the machine generated code manually.
Does ANTLR provide a way to define such macros?

Here is a simple example to demonstrate my need:

Section of the grammar:
exampleCFG
   :  ('exmpl1' { $eiddef = NULL; $eidref = NULL; }
      (eiddef=IDENTIFIER)? ('=' eidref=IDENTIFIER)? '{'
         { MY_DESIRED_MACRO(globalStructPtr, exmpl1Cfg) }
      cagCFG '}')?

      ('exmpl2' {$eiddef = NULL; $eidref = NULL; }
      (eiddef=IDENTIFIER)? ('=' eidref=IDENTIFIER)? '{'
         { MY_DESIRED_MACRO(globalStructPtr, exmpl2Cfg) }

      ...
   ;


definition of MY_DESIRED_MACRO:

#define MY_DESIRED_MACRO(pParent, name)\
if ($eiddef != NULL) {\
   pParent->DefHash_##name = index;\
   hashTbl->put(hashTbl, $eiddef.text->chars, index++, NULL);\
}\
if ($eidref != NULL) {\
   pParent->RefHash_##name = hashTbl->get(hashTbl,
(void*)$eidref.text->chars);\
}



the macro replaces every ##name with the actual string given in the name
place.

I hope I make some sense.
Appreciate your help,
Dan


From jimi at temporal-wave.com  Thu Oct 25 16:58:22 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 25 Oct 2007 16:58:22 -0700
Subject: [antlr-interest] FW: MACROs in ANTLR
In-Reply-To: <DBDE9C823117644B80450B5F6B767E35453710@nfsbs.ad.novafora.com>
References: <DBDE9C823117644B80450B5F6B767E35453710@nfsbs.ad.novafora.com>
Message-ID: <BAY130-DS2FF0C6E1AB52258CE26C486950@phx.gbl>

Hi Dan,

While I generally don't condone the use of Macros for holding code, there
are always situations where such things are valid of course, and you should
make your own decision as to whether this is such a case ;-)

There are a number of sections available in the C target grammars, some of
which are the same as the Java target, but through necessity, some are C
target specific. In particular, you would want to either define this macro
in the generated .h file, or and I recommend this, just add an #include into
this .h file that includes your own project specific definitions. Here of
course you could also have prototypes for functions, which would then be
naturally available in your actions. Rather than MACROS, you can then make
function calls, which will result in smaller object code for not much
overhead really, but up to you.

The sections you are probably interested in are:

@lexer::includes
{
#include	<mydefs.h>	// Pre declare typedefs, add my MACRO
defs...
}

And @parser::includes

These two insert whatever you place in the {} BEFORE the ANTLR.h includes
etc.

@lexer::postinclude
{
#include	<myctl.h>	// Control structure etc
}

And @parser:postinclude.

These place their contents in the lexer/Parser AFTER the include of the
generated .h file, so you may override anything you don't like ;-)

@lexer::context
{
	pMVB_PARSE_SESSION		ps;				//
Compiler session context 
	ANTLR3_BOOLEAN			haveHeader;		// Set to
TRUE once we have seen a PROGRAM or SUBROUTINE
}

And @parser. The declarations palced here will be added to the thread
friendly context structure for the parser/lexer, so that you may add your
own instance based elements to them.

@lexer::apifuncs
{
   lexCtx->haveHeader = ANTLR3_FALSE;
}

(And @parser, which uses ctx->). This code is placed in the init() method
for your parser or lexer, so here you initialize anything in the context
section.

@lexer::members (and @parser).

Here is where you can add small functions that you only need in the grammar
(however, generally, place these in your own source .c files and include
their declarations in a matching .h file.



Hope this helps you!!!

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Dan Hazon
> Sent: Thursday, October 25, 2007 3:59 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] FW: MACROs in ANTLR
> 
> I pretty new ANTLR user. I have read the definitive reference and using
> the C target language.
> I have a section of code that repeats itself many times in different
> rules with slight modification on the name of one variable. Instead of
> manually instantiating the code and blowing up the size of the .g file
> I'm interested to declare a macro that will reference some ANTLR
> variables and let the code generator instantiate this in the same
> manner
> C compiler does.
> I think I can do it in C by "learning" the generated C code and
> defining
> a C macro that would instantiate the expected code. However this is
> almost as wrong as modifying the machine generated code manually.
> Does ANTLR provide a way to define such macros?
> 
> Here is a simple example to demonstrate my need:
> 
> Section of the grammar:
> exampleCFG
>    :  ('exmpl1' { $eiddef = NULL; $eidref = NULL; }
>       (eiddef=IDENTIFIER)? ('=' eidref=IDENTIFIER)? '{'
>          { MY_DESIRED_MACRO(globalStructPtr, exmpl1Cfg) }
>       cagCFG '}')?
> 
>       ('exmpl2' {$eiddef = NULL; $eidref = NULL; }
>       (eiddef=IDENTIFIER)? ('=' eidref=IDENTIFIER)? '{'
>          { MY_DESIRED_MACRO(globalStructPtr, exmpl2Cfg) }
> 
>       ...
>    ;
> 
> 
> definition of MY_DESIRED_MACRO:
> 
> #define MY_DESIRED_MACRO(pParent, name)\
> if ($eiddef != NULL) {\
>    pParent->DefHash_##name = index;\
>    hashTbl->put(hashTbl, $eiddef.text->chars, index++, NULL);\
> }\
> if ($eidref != NULL) {\
>    pParent->RefHash_##name = hashTbl->get(hashTbl,
> (void*)$eidref.text->chars);\
> }
> 
> 
> 
> the macro replaces every ##name with the actual string given in the
> name
> place.
> 
> I hope I make some sense.
> Appreciate your help,
> Dan



From rdejong at iesys.com.au  Thu Oct 25 22:48:56 2007
From: rdejong at iesys.com.au (de Jong, Ron)
Date: Fri, 26 Oct 2007 15:48:56 +1000
Subject: [antlr-interest] C# line endings
Message-ID: <F811E702E247DF47BFB8B8057E4234013E02C7@sydmail.iesys.com.au>

I'm using 3.0b5 with a C# target. The source code generation by Antlr
doesn't have CR/LF line endings

so whenever I try and view them I'm prompted to fix them up. Can setting
the line ending in the generated

code be made an option.

 

Cheers,

Ron


*******************************************************************************

This e-mail (which includes any attachments) is intended only for the use of the individual or entity named above and may contain information that is confidential and privileged and the copyright of Intelligent Energy Systems Pty Ltd or a third party. Any views expressed in this e-mail are those of the individual sender, except where the sender specifically states them to be the views of Intelligent Energy Systems Pty Ltd. There is no warranty that this e-mail is error or virus free. If you are not the intended recipient, you must not disclose or use the information contained in it. If you have received this e-mail in error, please notify the sender immediately by return e-mail and delete the original message.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071026/50c2adda/attachment.html 

From rdejong at iesys.com.au  Thu Oct 25 22:52:41 2007
From: rdejong at iesys.com.au (de Jong, Ron)
Date: Fri, 26 Oct 2007 15:52:41 +1000
Subject: [antlr-interest] C# @members
Message-ID: <F811E702E247DF47BFB8B8057E4234013E02C9@sydmail.iesys.com.au>

Hi List,

I have a combined lexer parser file that has the following lines:

grammar Sample3;

options {
    language=CSharp; 
    output=AST;
}

@members { // hello }


Basically nothing after this is correctly interpreted. I have tried
every variation but
the @members just doesn't seem to work.

Cheers,
Ron


*******************************************************************************

This e-mail (which includes any attachments) is intended only for the use of the individual or entity named above and may contain information that is confidential and privileged and the copyright of Intelligent Energy Systems Pty Ltd or a third party. Any views expressed in this e-mail are those of the individual sender, except where the sender specifically states them to be the views of Intelligent Energy Systems Pty Ltd. There is no warranty that this e-mail is error or virus free. If you are not the intended recipient, you must not disclose or use the information contained in it. If you have received this e-mail in error, please notify the sender immediately by return e-mail and delete the original message.




From sven at efftinge.de  Fri Oct 26 00:10:23 2007
From: sven at efftinge.de (Sven Efftinge)
Date: Fri, 26 Oct 2007 09:10:23 +0200
Subject: [antlr-interest] bootstrapping Antlr 3
Message-ID: <A15B93FE-A56E-46AB-8477-1EDA8D3D8CBD@efftinge.de>

Hi Terence,

have you yet planned to bootstrap V3? If yes, when are you going to  
do so?
We (at Eclipse) have approved the runtime but not the tooling  
(because it uses Antlr 2.x, which won't be approved).
But there are some projects within Eclipse (propably IMP and the  
upcoming TMF) which need to have the parser generators included as  
well, because these frameworks provide
some facilities to create DSLs and programming languages in general  
which may be based upon an Antlr grammars.

Thanks,
Sven

From antlr at mirality.co.nz  Fri Oct 26 00:46:06 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 26 Oct 2007 20:46:06 +1300
Subject: [antlr-interest] C# @members
In-Reply-To: <F811E702E247DF47BFB8B8057E4234013E02C9@sydmail.iesys.com.a
 u>
References: <F811E702E247DF47BFB8B8057E4234013E02C9@sydmail.iesys.com.au>
Message-ID: <20071026074617.4192011EC72@www.antlr.org>

At 18:52 26/10/2007, de Jong, Ron wrote:
 >@members { // hello }
 >
 >Basically nothing after this is correctly interpreted. I have
 >tried every variation but the @members just doesn't seem to 
work.

I would be surprised if it did.  That's a line comment you've got 
there, and you're putting everything all on the same line.  Don't 
do that.

@members {
   // hello
}

will work.


From parrt at cs.usfca.edu  Fri Oct 26 02:35:26 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 26 Oct 2007 17:35:26 +0800
Subject: [antlr-interest] bootstrapping Antlr 3
In-Reply-To: <A15B93FE-A56E-46AB-8477-1EDA8D3D8CBD@efftinge.de>
References: <A15B93FE-A56E-46AB-8477-1EDA8D3D8CBD@efftinge.de>
Message-ID: <D3E6B010-8AAD-4465-91FC-C7FA9C869B80@cs.usfca.edu>


On Oct 26, 2007, at 3:10 PM, Sven Efftinge wrote:

> Hi Terence,
>
> have you yet planned to bootstrap V3? If yes, when are you going to  
> do so?

I'm slowly getting there. I have a grammar for v3 now.  I'd have to  
change ST also before v3 is totally free of v2.

> We (at Eclipse) have approved the runtime but not the tooling  
> (because it uses Antlr 2.x, which won't be approved).
> But there are some projects within Eclipse (propably IMP and the  
> upcoming TMF) which need to have the parser generators included as  
> well, because these frameworks provide
> some facilities to create DSLs and programming languages in general  
> which may be based upon an Antlr grammars.

Sorry for the delay, it's definitely something I want to fix, but  
getting a 3.1 version out is probably most important.  My guess is  
sometime next year this will happen.

Ter

From Robert.Klaus at innovations.de  Fri Oct 26 02:25:05 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Fri, 26 Oct 2007 11:25:05 +0200
Subject: [antlr-interest] Mismatched Token with String and Newline
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F74E@email.innoimm.local>

Hi,

I have a problem with lexing Strings and I'm thinking I have done
something wrong. When entering the grammar below in ANTLRWorks and use
the interpreter with the input "\n" it works fine. When I enter a line
break after the "\n" I get a MismatchedTokenException.

In a unit test, I parsed this input:
String input = "\"\\n\"\r\n";

And ANTLR responded with:
line 1:1 no viable alternative at character '\'
line 2:0 mismatched character '<EOF>' expecting '"'

I compared this to the Java.g in the examples and it seem to be quite
similar, so I'm quite clueless now.

Can anybody help me find the mistake?

Thanks in advance,

Robert



grammar testMe;

options
{
	language = 'Java'
}

parse
:
foo EOF
;

foo	:
	STRING	
	;



STRING
:
'"' (CHARACTER | ~('\\'|'"'))* '"'
	;
	
fragment CHARACTER
	:
		
		('\\' ('n'|'t'|'r'|'\\'|'"'))		
		| ('\\u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR)
	;
	
fragment HEX_CHAR
	:
		DIGIT | 'A'..'F'
	;
	
fragment DIGIT 
	:	
		'0'..'9'
	;
	
NEWLINE :	'\r'? '\n' ;
WS 	:	(' ' | '\t' | '\f')+ ;

-------------------------------------------------------------
Robert Klaus
Diplom Informatiker
Product Development
-------------------------------------------------------------
Innovations Softwaretechnologie GmbH
Ziegelei 7
88090 Immenstaad
Germany
Phone: +49(0)7545-202-339
robert.klaus at innovations.de
www.visual-rules.com
-------------------------------------------------------------
Executives: 
Achim Berger, Thomas Cotic, Walter Pitz
Register Court Ulm HRB 631622
-------------------------------------------------------------

From parrt at cs.usfca.edu  Fri Oct 26 02:51:02 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 26 Oct 2007 17:51:02 +0800
Subject: [antlr-interest] Mismatched Token with String and Newline
In-Reply-To: <6F7F118281893140B2E80FA4F9331BC626F74E@email.innoimm.local>
References: <6F7F118281893140B2E80FA4F9331BC626F74E@email.innoimm.local>
Message-ID: <85DC20D2-59CB-4C62-AA22-9B7268FEF1FA@cs.usfca.edu>


On Oct 26, 2007, at 5:25 PM, <Robert.Klaus at innovations.de> wrote:
> In a unit test, I parsed this input:
> String input = "\"\\n\"\r\n";

hi. I don't think you have anything to match WS after the STRING.   
Add {skip();} for example to WS rule.
Ter


From antlr at mirality.co.nz  Fri Oct 26 02:53:50 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 26 Oct 2007 22:53:50 +1300
Subject: [antlr-interest] Mismatched Token with String and Newline
In-Reply-To: <6F7F118281893140B2E80FA4F9331BC626F74E@email.innoimm.local
 >
References: <6F7F118281893140B2E80FA4F9331BC626F74E@email.innoimm.local>
Message-ID: <20071026095357.EBBAE11EC88@www.antlr.org>

At 22:25 26/10/2007, Robert.Klaus at innovations.de wrote:
 >I have a problem with lexing Strings and I'm thinking I have 
done
 >something wrong. When entering the grammar below in ANTLRWorks 
and
 >use the interpreter with the input "\n" it works fine. When I
 >enter a line break after the "\n" I get a 
MismatchedTokenException.

First: ANTLRworks isn't really designed for debugging lexers, just 
parsers.  So when you're facing a lexer problem it's better to 
write a test harness outside of ANTLRworks and step through it 
with your debugger of choice.

 >fragment CHARACTER
 >	:
 >		
 >		('\\' ('n'|'t'|'r'|'\\'|'"'))		
 >		| ('\\u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR)
 >	;

"ESCAPE" would probably be a better name than "CHARACTER".

Also, given ANTLR's trouble dealing with common prefixes, you 
should probably rewrite this to:

fragment CHARACTER
   :  '\\'
      (  'n' | 't' | 'r' | '\\' | '"'
      |  'u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR
      )
   ;

 >NEWLINE :	'\r'? '\n' ;
 >WS 	:	(' ' | '\t' | '\f')+ ;

You're not skipping or hiding the NEWLINE, so it's going to get 
emitted.  This means that your given input string ought to get 
lexed to STRING NEWLINE EOF, and you're only accepting STRING 
EOF.  Hence the second of the two errors you reported.


From Robert.Klaus at innovations.de  Fri Oct 26 05:03:30 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Fri, 26 Oct 2007 14:03:30 +0200
Subject: [antlr-interest] Mismatched Token with String and Newline
In-Reply-To: <EMAILyLAPDVXLuSbh290000019a@email.innoimm.local>
References: <6F7F118281893140B2E80FA4F9331BC626F74E@email.innoimm.local>
	<EMAILyLAPDVXLuSbh290000019a@email.innoimm.local>
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F761@email.innoimm.local>

Ahh,

Thanks! Skipping tokens helps alot if you don't forget it ...

Bye

Robert

> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz] 
> Sent: Friday, October 26, 2007 11:54 AM
> To: Klaus Robert; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Mismatched Token with String and Newline
> 
> At 22:25 26/10/2007, Robert.Klaus at innovations.de wrote:
>  >I have a problem with lexing Strings and I'm thinking I 
> have done  >something wrong. When entering the grammar below 
> in ANTLRWorks and  >use the interpreter with the input "\n" 
> it works fine. When I  >enter a line break after the "\n" I 
> get a MismatchedTokenException.
> 
> First: ANTLRworks isn't really designed for debugging lexers, 
> just parsers.  So when you're facing a lexer problem it's 
> better to write a test harness outside of ANTLRworks and step 
> through it with your debugger of choice.
> 
>  >fragment CHARACTER
>  >	:
>  >		
>  >		('\\' ('n'|'t'|'r'|'\\'|'"'))		
>  >		| ('\\u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR)
>  >	;
> 
> "ESCAPE" would probably be a better name than "CHARACTER".
> 
> Also, given ANTLR's trouble dealing with common prefixes, you 
> should probably rewrite this to:
> 
> fragment CHARACTER
>    :  '\\'
>       (  'n' | 't' | 'r' | '\\' | '"'
>       |  'u' HEX_CHAR HEX_CHAR HEX_CHAR HEX_CHAR
>       )
>    ;
> 
>  >NEWLINE :	'\r'? '\n' ;
>  >WS 	:	(' ' | '\t' | '\f')+ ;
> 
> You're not skipping or hiding the NEWLINE, so it's going to 
> get emitted.  This means that your given input string ought 
> to get lexed to STRING NEWLINE EOF, and you're only accepting 
> STRING EOF.  Hence the second of the two errors you reported.
> 
> 

From sumanto at gmail.com  Fri Oct 26 10:26:39 2007
From: sumanto at gmail.com (Sumanto Biswas)
Date: Fri, 26 Oct 2007 10:26:39 -0700
Subject: [antlr-interest] Getting mismatched input error - 'find' expecting
	'find' !!
In-Reply-To: <1AA95300F8CC2D4583ACBC20FDD3B13D036DF6C2@hq-exch-01.castiron.corp>
References: <8C16479DD0F1F4469DE1F4E3ECA7D20B01063D19C1@hq-exch-01.castiron.corp>
	<1AA95300F8CC2D4583ACBC20FDD3B13D036DF6C2@hq-exch-01.castiron.corp>
Message-ID: <6c9aae640710261026j17ccebdfs871b18628d0b3983@mail.gmail.com>

Hi,


We were using Antlr 2.77, but are migrating to Antlr 3.0. We had three
sections for lexer, parser and tree-walker but have merged all that now. I
am getting the exception "line 1:0 mismatched input 'find' expecting 'find'"
when executing debugging via ANTLRWorks 1.1.3. The same grammar when run
with a test program just chokes up and doesn't finish.

My grammar file is attached. The input I used is : "find{$name}".

The exception I got in ANTLRWorks 1.1.3 is pasted below:
-------------------------------------------------------------------------
recoverFromMismatchedToken
BR.recoverFromMismatchedToken
line 1:0 mismatched input 'find' expecting 'find'
Exception in thread "main"
org.antlr.runtime.tree.RewriteEmptyStreamException: rule searchSpec
        at org.antlr.runtime.tree.RewriteRuleElementStream._next(
RewriteRuleElementStream.java:158)
        at org.antlr.runtime.tree.RewriteRuleElementStream.next(
RewriteRuleElementStream.java:145)
        at testParser.sosl(testParser.java:183)
        at __Test__.main(__Test__.java:14)
-------------------------------------------------------------------------

I am stumped where it says "mismatched input 'find' expecting 'find'". How
can it not match find with find?

Any help would be appreciated.

Regards,
Sumanto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071026/c568401d/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: test.g
Type: application/octet-stream
Size: 4960 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071026/c568401d/attachment.obj 

From mb.fgel at ownit.nu  Fri Oct 26 13:04:56 2007
From: mb.fgel at ownit.nu (Mats Behre)
Date: Fri, 26 Oct 2007 22:04:56 +0200
Subject: [antlr-interest] Problem with rewrite rule referencing the
 previous value of the AST
In-Reply-To: <mailman.1476.1193222595.2534.antlr-interest@antlr.org>
References: <mailman.1476.1193222595.2534.antlr-interest@antlr.org>
Message-ID: <47224868.8050703@ownit.nu>

> You are getting this because you are using the ! operator and the ->
> rewrites at the same time, and you must chose one or the other.

That's what I was afraid of. Apparently v3 does not build the default tree if there is a rewrite rule present, and given the power and possibibilities with the rewrite rules I can see that the behaviour would not necessarily be predictable otherwise.

> You probably want a rewrite like this:
> 
>  	optionCmd: p=OptionKeyword (Dot!)? 
>                  (
>  			  t=StrictKeyword                    ->
> ^(GenericStatement $t)
>  			| a=MaxDurationKeyword b=intData     ->
> ^(GenericStatement $a $b)
>  		     )

Your suggestion is actually a good example of why I don't like doing this; Apart from cluttering the grammar with rewrite rules (all more or less alike), and thus decrease the readability, it is also bug prone - in this case the $p keyword was omitted. As always, tradeoffs may of course be necessary.
However, I guess that it is possible to do what I wanted (add a root node to the default tree with some items omitted) with Java code in the @after section. The good news is that now that I look at the problem again even that may not be necessary - as I put the produced tree into a Java list anyway I can probably just make sure the tree isn't used in higher level rules.

> Though perhaps you would want a different Node type for the two alts?

Not at this stage, the keywords are kept mostly for debugging. The trees are used to check for the availability and correctness of variables and other references.

Thanks anyway,
Mats

From parrt at cs.usfca.edu  Fri Oct 26 18:15:09 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Oct 2007 09:15:09 +0800
Subject: [antlr-interest] solution to lexer issue
In-Reply-To: <20071025104023.8E4D411EC7A@www.antlr.org>
References: <B9FF6D0B-5C69-4C77-ABF0-105AA073CDDB@cs.usfca.edu>
	<20071025104023.8E4D411EC7A@www.antlr.org>
Message-ID: <36DA2735-454A-4E0E-9ACE-A1DCCD4FDFFC@cs.usfca.edu>


On Oct 25, 2007, at 6:40 PM, Gavin Lambert wrote:

> At 15:30 25/10/2007, Terence Parr wrote:
> >Solution is to change my assumption that any char can follow a
> >token (some of you don't believe me that is the problem but it is).
>
> I'm curious, isn't this "any char can follow a token" thing only  
> true for (a) filter=true or (b) malformed input?  Neither of which  
> ought to be the common case?

Well, there was an error in my thinking here.  That's why it's taken  
4 years to get "right".  Damn real world invalidates a number of my  
assumptions and I have to alter the algorithm to suit. ;)  Principle:  
You only predict on valid input; I think errors are left to "if ! 
valid prediction"; i.e., the opposite of "good" must be "bad". No  
need to look for "bad" explicitly.

> And I'm still not sure how assuming that any character at all could  
> follow the "e" in "one" means that you don't need to test that the  
> "e" is actually there at all.  But I'll take your word for it.

I think a proof would abstract the issue to:

r : x .* | .* ;

where x is any alternative in any grammar.  Static analysis involves  
using more and more lookahead until you can distinguish between  
alts.  x and .* look identical by definition so you look past x  
hoping to distinguish.  Ooops. .* follows.  At this point, you  
concede defeat.  Only solution is to predict with entire x; i.e., you  
must backtrack like lex does or using Idle Jim's syn pred solution ;)

Now, had I done this sketch of a proof earlier I would realize that  
assuming .* follows is overly general; well, actually, it's just  
wrong.  Using LL(*) rather than a DFA to do lexing is something ANTLR  
along with other folks (scannerless parsing people) is pushing the  
envelop on.  I *hope* the change doesn't mess up stuff like keyword  
vs ID.  Could involve a lot of thought / testing on my part to verify  
I haven't screwed up something else.

> >NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
> >DOT : '.' ;
> >
> >NUMBER: ('0'..'9')+ ('.' ('0'..'9')+)?;
> >OTHER: .;
> >
> >ONE: 'one';
> >TWO: 'two';
> >OTHER: .;
> [...]
> >Note that all three examples are ambiguous. Same input,
> >different rules can match.
>
> If all rules have equal precedence, then sure, they're ambiguous.   
> But I thought the lexer was supposed to have defined precedence  
> (longest match and/or first listed token wins)..?

Yep, hence you won't get an error between token rules ;)

Ter

From parrt at cs.usfca.edu  Fri Oct 26 18:18:57 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Oct 2007 09:18:57 +0800
Subject: [antlr-interest] Removing System.out and System.err calls
In-Reply-To: <6F7F118281893140B2E80FA4F9331BC626F6C5@email.innoimm.local>
References: <6F7F118281893140B2E80FA4F9331BC626F6C5@email.innoimm.local>
Message-ID: <0D68257B-5374-43E3-8A2D-58491388ACE7@cs.usfca.edu>


On Oct 25, 2007, at 6:49 PM, <Robert.Klaus at innovations.de>  
<Robert.Klaus at innovations.de> wrote:

> Hi,
>
> In the BaseRecognizer.class there are several calls to System.err and
> System.out. In ANTLR2 I could overwrite methods like "reportError" to
> take care of the messages myself.
> However this is not possible in ANTLR3, as some of these calls are in
> methods I think are better not overwritten (e.g.
> "recoverFromMismatchedToken").
> Would it be possible to delegate all reporting to dedicated methods,
> e.g. "public void reportError(String msg)"? This would allow users of
> ANTLR3 to switch off System.out calls or use their own logging  
> facility.

Howdy. All errors should actually go thru:

public void emitErrorMessage(String msg) {
                System.err.println(msg);
}

The

System.err.println("BR.recoverFromMismatchedToken");

you see is a debugging print. Ooops.   Actually, it's gone in my main  
line of code. so we're cool.

Are there others?  That's the only one I see.

Ter



From parrt at cs.usfca.edu  Fri Oct 26 18:22:42 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Oct 2007 09:22:42 +0800
Subject: [antlr-interest] Getting mismatched input error - 'find'
	expecting 'find' !!
In-Reply-To: <6c9aae640710261026j17ccebdfs871b18628d0b3983@mail.gmail.com>
References: <8C16479DD0F1F4469DE1F4E3ECA7D20B01063D19C1@hq-exch-01.castiron.corp>
	<1AA95300F8CC2D4583ACBC20FDD3B13D036DF6C2@hq-exch-01.castiron.corp>
	<6c9aae640710261026j17ccebdfs871b18628d0b3983@mail.gmail.com>
Message-ID: <276C079C-FE7F-4EDC-B73A-9E5EB8FCD350@cs.usfca.edu>

Hi. it sounds like a token type coherency problem. Token types in  
lexer grammar are different from parser.  make sure you importVocab
Ter
On Oct 27, 2007, at 1:26 AM, Sumanto Biswas wrote:

> Hi,
>
> We were using Antlr 2.77, but are migrating to Antlr 3.0. We had  
> three sections for lexer, parser and tree-walker but have merged  
> all that now. I am getting the exception "line 1:0 mismatched input  
> 'find' expecting 'find'" when executing debugging via ANTLRWorks  
> 1.1.3. The same grammar when run with a test program just chokes up  
> and doesn't finish.
>
> My grammar file is attached. The input I used is : "find{$name}".
>
> The exception I got in ANTLRWorks 1.1.3 is pasted below:
> ---------------------------------------------------------------------- 
> ---
> recoverFromMismatchedToken
> BR.recoverFromMismatchedToken
> line 1:0 mismatched input 'find' expecting 'find'
> Exception in thread "main"  
> org.antlr.runtime.tree.RewriteEmptyStreamException: rule searchSpec
>         at org.antlr.runtime.tree.RewriteRuleElementStream._next 
> (RewriteRuleElementStream.java:158)
>         at org.antlr.runtime.tree.RewriteRuleElementStream.next 
> (RewriteRuleElementStream.java:145)
>         at testParser.sosl(testParser.java:183)
>         at __Test__.main(__Test__.java:14)
> ---------------------------------------------------------------------- 
> ---
>
> I am stumped where it says "mismatched input 'find' expecting  
> 'find'". How can it not match find with find?
>
> Any help would be appreciated.
>
> Regards,
> Sumanto
>
>
>
> <test.g>


From siemsen at UCAR.EDU  Fri Oct 26 19:27:22 2007
From: siemsen at UCAR.EDU (Pete Siemsen)
Date: Fri, 26 Oct 2007 20:27:22 -0600
Subject: [antlr-interest] newbie stringtemplate NoClassDefFoundError problem
Message-ID: <97522898-5133-4845-8420-B5FE98DB6D98@UCAR.EDU>

My translator recognizes input, so now I'm trying to emit output.   
I'm using string templates for the first time.  The test rig looks  
like this:

import org.antlr.runtime.*;
import org.antlr.stringtemplate.*;
import java.io.*;

public class cimmof2java {
         public static void main(String[] args) throws Exception {

                 String inputFileName = args[0];
                 String stgFileName = args[1];
                 String outputDirectoryName = args[2];

                 StringTemplateGroup templates = null;
                 // Load contents of template group file into  
"templates"
                 try {
                         FileReader groupFileR = new FileReader 
(stgFileName);
                         templates = new StringTemplateGroup 
(groupFileR);
                         groupFileR.close();
                 } catch (IOException FileNotFoundException) {
                         System.out.println("couldn't open string  
template group file: " + stgFileName);
                         System.exit(1);
                 }

                 // Open an input file stream from the given file name
                 CharStream input = new ANTLRFileStream(inputFileName);
                 // Create a lexer that feeds from the input file stream
                 cimmof2javaLexer lexer = new cimmof2javaLexer(input);
                 // Create a stream of tokens fed by the lexer
                 CommonTokenStream tokens = new CommonTokenStream 
(lexer);
                 // Create a parser that feeds off the token stream
                 cimmof2javaParser parser = new cimmof2javaParser 
(tokens);
                 // Give the parser the string templates
                 parser.setTemplateLib(templates);
                 // Begin parsing at rule mofSpecification
                 cimmof2javaParser.mofSpecification_return retVal =
                     parser.mofSpecification(outputDirectoryName);
                 StringTemplate output = (StringTemplate) 
retVal.getTemplate();
                 // Emit the translation
                 System.out.println(output.toString());
         }
}

When I give it the name of an existing .stg file, it gives

    Exception in thread "main" java.lang.NoClassDefFoundError: antlr/ 
TokenStream
         at cimmof2java.main(cimmof2java.java:16)

If I give it a .stg file name name of a file that doesn't exist, it  
gives

    couldn't open string template group file: bogus.stg

So something happens in the creation of "templates".  I'm not real  
strong with Java class location problems.  What's the problem finding  
antlr/TokenStream?  Any help appreciated.

-- Pete



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071026/e4f32bbd/attachment.html 

From pink at odahoda.de  Fri Oct 26 19:40:52 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sat, 27 Oct 2007 04:40:52 +0200
Subject: [antlr-interest] C# @members
References: <F811E702E247DF47BFB8B8057E4234013E02C9@sydmail.iesys.com.au>
	<20071026074617.4192011EC72@www.antlr.org>
Message-ID: <ffu8fg$s54$1@ger.gmane.org>

Gavin Lambert wrote:

> At 18:52 26/10/2007, de Jong, Ron wrote:
>  >@members { // hello }
>  >
>  >Basically nothing after this is correctly interpreted. I have
>  >tried every variation but the @members just doesn't seem to
> work.
> 
> I would be surprised if it did.  That's a line comment you've got
> there, and you're putting everything all on the same line.  Don't
> do that.
> 
> @members {
>    // hello
> }
> 
> will work.

Suprising that this make a difference. ANTLR does not now that // in an
action section has any special meaning, so it should not influence the way
the rest of the grammar is interpreted.
Or did the OP refer to the generated code being broken, which may be the
case when the template adds some significant code directly after it without
an additional LF.



From antlr at mirality.co.nz  Fri Oct 26 19:52:46 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 27 Oct 2007 15:52:46 +1300
Subject: [antlr-interest] solution to lexer issue
In-Reply-To: <36DA2735-454A-4E0E-9ACE-A1DCCD4FDFFC@cs.usfca.edu>
References: <B9FF6D0B-5C69-4C77-ABF0-105AA073CDDB@cs.usfca.edu>
	<20071025104023.8E4D411EC7A@www.antlr.org>
	<36DA2735-454A-4E0E-9ACE-A1DCCD4FDFFC@cs.usfca.edu>
Message-ID: <20071027025435.A30CE11EC89@www.antlr.org>

At 14:15 27/10/2007, Terence Parr wrote:
 >You only predict on valid input; I think errors are left to
 >"if ! valid prediction"; i.e., the opposite of "good" must
 >be "bad". No need to look for "bad" explicitly.

Yep; only once you've been through the whole list of tokens and 
can't find anything to generate do you concede defeat, report an 
error, and then maybe try error-recovery mechanisms like skipping 
a character and trying again.

 >I think a proof would abstract the issue to:
 >
 >r : x .* | .* ;
 >
 >where x is any alternative in any grammar.  Static analysis
 >involves using more and more lookahead until you can
 >distinguish between alts.  x and .* look identical by
 >definition so you look past x hoping to distinguish.
 >Ooops. .* follows.  At this point, you concede defeat.
 >Only solution is to predict with entire x; i.e., you
 >must backtrack like lex does or using Idle Jim's syn pred
 >solution ;)

Ah, I see what you meant now.

 >Now, had I done this sketch of a proof earlier I would
 >realize that assuming .* follows is overly general; well,
 >actually, it's just wrong.

Given that alts *don't* have inherent precedence (or at least I 
don't think they do), would it behave better if you tweaked it to 
look more like this:

r : x .* | ~x .* ;

...?  Not saying that's right either (because you still don't want 
to consume erroneous input until you have no other choice), but it 
might be easier to get to from what you've got at the moment.

 >I *hope* the change doesn't mess up stuff like keyword
 >vs ID.  Could involve a lot of thought / testing on my
 >part to verify I haven't screwed up something else.

Simple solution for that: write lots of unit tests :)  (Especially 
lexer-only tests.  I've noticed a lot of the unit test snippets 
you've posted in the past have tended to be combined tests, even 
when using a trivial parser.  Possibly that was just coincidental.)


From pink at odahoda.de  Fri Oct 26 19:56:46 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sat, 27 Oct 2007 04:56:46 +0200
Subject: [antlr-interest] C# line endings
References: <F811E702E247DF47BFB8B8057E4234013E02C7@sydmail.iesys.com.au>
Message-ID: <ffu9da$s54$2@ger.gmane.org>

de Jong, Ron wrote:

> I'm using 3.0b5 with a C# target. The source code generation by Antlr
> doesn't have CR/LF line endings
> 
> so whenever I try and view them I'm prompted to fix them up. Can setting
> the line ending in the generated code be made an option.

Use an editor that does not complain about correct line endings ;)

ANTLR uses StringTemplate for code generation and I don't know of an option
to make ST do line ending conversion. Mmmm, it might be just a matter of
using fopen(..., 'r') instead of fopen(..., 'rb') - or whatever the Java
equivalent for this is.

Thinking about it, ANTLR should probably always write it's output using the
local conventions.
(Although I'd prefer, if everybody just uses plain LFs and we could simply
forget this issue...)



From antlr at mirality.co.nz  Fri Oct 26 20:00:55 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 27 Oct 2007 16:00:55 +1300
Subject: [antlr-interest] C# @members
In-Reply-To: <ffu8fg$s54$1@ger.gmane.org>
References: <F811E702E247DF47BFB8B8057E4234013E02C9@sydmail.iesys.com.au>
	<20071026074617.4192011EC72@www.antlr.org>
	<ffu8fg$s54$1@ger.gmane.org>
Message-ID: <20071027030103.DB0CF11EC89@www.antlr.org>

At 15:40 27/10/2007, Benjamin Niemann wrote:
 >Suprising that this make a difference. ANTLR does not now
 >that // in an action section has any special meaning, so
 >it should not influence the way the rest of the grammar
 >is interpreted.
 >Or did the OP refer to the generated code being broken, which
 >may be the case when the template adds some significant code
 >directly after it without an additional LF.

The latter was what I assumed from the description given in the 
post.  But there's several other things it could be, depending on 
what follows in the grammar.  (For example, if the OP tried to put 
a tokens section following the action section, that wouldn't 
work.)

I just made the best guess I could given the limited information 
available :)


From antlr at mirality.co.nz  Fri Oct 26 20:05:30 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 27 Oct 2007 16:05:30 +1300
Subject: [antlr-interest] Getting mismatched input error - 'find'
 expecting 'find' !!
In-Reply-To: <276C079C-FE7F-4EDC-B73A-9E5EB8FCD350@cs.usfca.edu>
References: <8C16479DD0F1F4469DE1F4E3ECA7D20B01063D19C1@hq-exch-01.castiron.corp>
	<1AA95300F8CC2D4583ACBC20FDD3B13D036DF6C2@hq-exch-01.castiron.corp>
	<6c9aae640710261026j17ccebdfs871b18628d0b3983@mail.gmail.com>
	<276C079C-FE7F-4EDC-B73A-9E5EB8FCD350@cs.usfca.edu>
Message-ID: <20071027030537.7EE4311ECCC@www.antlr.org>

At 14:22 27/10/2007, Terence Parr wrote:
 >Hi. it sounds like a token type coherency problem.
 >Token types in lexer grammar are different from parser.
 >make sure you importVocab

I don't think that an importVocab will solve it, since it was a 
combined grammar to begin with.

But there definitely could be some kind of mismatch between the 
lexer and parser tokens.  Possibly you didn't rebuild both lexer 
and parser classes after running ANTLR.

I know that some IDEs can build "stale" copies of files (or just 
think that they don't need to rebuild them) if you have a 
generated file open in the IDE when you build.  So make sure you 
close the generated lexer/parser files before you build and run 
your program.  (And hit Rebuild the next time you try as well, 
just in case.)


From travis at jerseyrogers.com  Fri Oct 26 20:09:18 2007
From: travis at jerseyrogers.com (Travis R Rogers)
Date: Fri, 26 Oct 2007 23:09:18 -0400
Subject: [antlr-interest] C# @members
In-Reply-To: <ffu8fg$s54$1@ger.gmane.org>
References: <F811E702E247DF47BFB8B8057E4234013E02C9@sydmail.iesys.com.au><20071026074617.4192011EC72@www.antlr.org>
	<ffu8fg$s54$1@ger.gmane.org>
Message-ID: <94E74C3E30BBDA4AA8C1232453D6161305088744@ms02.mailstreet2003.net>

I believe that ANTLR recognizes // as a line comment regardless of it's
location, therefore you are commenting out the closing } and everything
after that is a failure.  Fortunately in addition to treating it like a
comment in ANTLR it does copy it to the generated code.

At least that's what it appears like when editing a grammar using
ANTLRWorks.

This is the little test I used:
grammar tester;

@members
{
//bob
int i;
}

prog	:	NUMBER;

NUMBER 	:	'0'..'9';

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Benjamin Niemann
Sent: Friday, October 26, 2007 10:41 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] C# @members

Gavin Lambert wrote:

> At 18:52 26/10/2007, de Jong, Ron wrote:
>  >@members { // hello }
>  >
>  >Basically nothing after this is correctly interpreted. I have  
> >tried every variation but the @members just doesn't seem to work.
> 
> I would be surprised if it did.  That's a line comment you've got 
> there, and you're putting everything all on the same line.  Don't do 
> that.
> 
> @members {
>    // hello
> }
> 
> will work.

Suprising that this make a difference. ANTLR does not now that // in an
action section has any special meaning, so it should not influence the
way the rest of the grammar is interpreted.
Or did the OP refer to the generated code being broken, which may be the
case when the template adds some significant code directly after it
without an additional LF.



From davidinnz at gmail.com  Fri Oct 26 20:40:29 2007
From: davidinnz at gmail.com (David White)
Date: Sat, 27 Oct 2007 16:40:29 +1300
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
Message-ID: <bb781dd60710262040j7b38c1eeyd3b88968937d5723@mail.gmail.com>

>Andreas Ravnestad wrote:
>> On 10/8/07, Johannes Luber <jaluber at gmx.de> wrote:
>>> ANTLR doesn't support this dash notation. For now the only correct way
>>> is create the subset manually.
>>>
>>> Johannes Luber
>>
>> I see, how unfortunate :) Being new to ANTLR, I am not quite sure how
>> to "create the subsets manually". Could you point me to an example?
>>
>> -Andreas
>>
>I don't know any example. I would simply create a rule which matches the
> subset without the referencing the "parent"
>
>Johannes Luber

I wrote the following, related question to the forum
(http://www.jguru.com/forums/view.jsp?EID=1349571) but since
discovered that the real discussion is here. Like Andreas, I am new to
ANTLR and do not understand how to translate this spec into ANTLR
format...

In the XML 1.0 Spec there are the following rules: CDATA Sections
[18]  CDSect ::=  CDStart CData CDEnd
[19]  CDStart ::=  '<![CDATA['
[20]  CData ::=  (Char* - (Char* ']]>' Char*))
[21]  CDEnd ::=  ']]>'

[2]  Char ::=  #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] |
[#x10000-#x10FFFF]

where
A - B matches any string that matches A but does not match B.
I have the ANTLR3 e-book, but I still am unclear how to convert the
spec for CData above (rule [20]) into ANTLR grammar format.

Is there a simple explanation that I have missed?

regards,
david

From Austin_Hastings at Yahoo.com  Fri Oct 26 21:03:16 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sat, 27 Oct 2007 00:03:16 -0400
Subject: [antlr-interest] C# @members
In-Reply-To: <ffu8fg$s54$1@ger.gmane.org>
References: <F811E702E247DF47BFB8B8057E4234013E02C9@sydmail.iesys.com.au>	<20071026074617.4192011EC72@www.antlr.org>
	<ffu8fg$s54$1@ger.gmane.org>
Message-ID: <4722B884.3080005@Yahoo.com>

Benjamin Niemann wrote:
> Gavin Lambert wrote:
>
>   
>> At 18:52 26/10/2007, de Jong, Ron wrote:
>>  >@members { // hello }
>>  >
>>  >Basically nothing after this is correctly interpreted. I have
>>  >tried every variation but the @members just doesn't seem to
>> work.
>>
>> I would be surprised if it did.  That's a line comment you've got
>> there, and you're putting everything all on the same line.  Don't
>> do that.
>>
>> @members {
>>    // hello
>> }
>>
>> will work.
>>     
>
> Suprising that this make a difference. ANTLR does not now that // in an
> action section has any special meaning, so it should not influence the way
> the rest of the grammar is interpreted.
> Or did the OP refer to the generated code being broken, which may be the
> case when the template adds some significant code directly after it without
> an additional LF
Actually, the lexer has to parse the block, or you're left with the 
(regex-powered) lexer having to recognize a balanced set of 
opening/closing braces. I'm sure everyone on this list will all chime in 
to tell you that regexes (without perl ;) aren't powerful enough for 
that, and so ... blah blah CHOMSKY blah blah FINITE STATE AUTOMATON blah 
blah STACK blah blah ... either there's a custom lexer rule or the lexer 
tokenizes the @members declarations. Either way it's morally impure, and 
this way it's probably much easier to maintain. :)

=Austin


From Austin_Hastings at Yahoo.com  Fri Oct 26 21:13:26 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sat, 27 Oct 2007 00:13:26 -0400
Subject: [antlr-interest] The unary not (~) vs. W3C EBNF dash operator
In-Reply-To: <bb781dd60710262040j7b38c1eeyd3b88968937d5723@mail.gmail.com>
References: <bb781dd60710262040j7b38c1eeyd3b88968937d5723@mail.gmail.com>
Message-ID: <4722BAE6.7020104@Yahoo.com>

David,

By analogy with this rule, from 
http://antlr.org/grammar/1152141644268/Java.g

COMMENT
    :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;


Try this:

CDATA_SECTION
    : '<![CDATA[' 
      ( options { greedy = false; } : . )*
      ']]>'
    ;

You will probably want to set the token string value to be just the 
contents. If you want the CD-start CData CD-end sequence, you will need 
to put the .* and ]]> in a single rule and then emit two tokens. Both 
are covered in the e-book.

=Austin


David White wrote:
> I have the ANTLR3 e-book, but I still am unclear how to convert the
> spec for CData above (rule [20]) into ANTLR grammar format.
>
> Is there a simple explanation that I have missed?
>
> regards,
> david
>
>
>   


From parrt at cs.usfca.edu  Sat Oct 27 04:34:52 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 27 Oct 2007 19:34:52 +0800
Subject: [antlr-interest] C# line endings
In-Reply-To: <ffu9da$s54$2@ger.gmane.org>
References: <F811E702E247DF47BFB8B8057E4234013E02C7@sydmail.iesys.com.au>
	<ffu9da$s54$2@ger.gmane.org>
Message-ID: <59C8BFAD-EEC0-48B8-BC4B-0512037CE3C5@cs.usfca.edu>

ANTLR uses a template written on unix so when I hit return it gives  
me \n.  ANTLR dutifully spits out that verbatim.  ST does have a  
writer filter that can be tweaked or added etc...  For example, ST  
has the auto-indent bits in the default writer.

Ter
On Oct 27, 2007, at 10:56 AM, Benjamin Niemann wrote:

> de Jong, Ron wrote:
>
>> I'm using 3.0b5 with a C# target. The source code generation by Antlr
>> doesn't have CR/LF line endings
>>
>> so whenever I try and view them I'm prompted to fix them up. Can  
>> setting
>> the line ending in the generated code be made an option.
>
> Use an editor that does not complain about correct line endings ;)
>
> ANTLR uses StringTemplate for code generation and I don't know of  
> an option
> to make ST do line ending conversion. Mmmm, it might be just a  
> matter of
> using fopen(..., 'r') instead of fopen(..., 'rb') - or whatever the  
> Java
> equivalent for this is.
>
> Thinking about it, ANTLR should probably always write it's output  
> using the
> local conventions.
> (Although I'd prefer, if everybody just uses plain LFs and we could  
> simply
> forget this issue...)
>
>


From jaluber at gmx.de  Sat Oct 27 06:15:40 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 27 Oct 2007 15:15:40 +0200
Subject: [antlr-interest] newbie stringtemplate NoClassDefFoundError
	problem
In-Reply-To: <97522898-5133-4845-8420-B5FE98DB6D98@UCAR.EDU>
References: <97522898-5133-4845-8420-B5FE98DB6D98@UCAR.EDU>
Message-ID: <472339FC.5050205@gmx.de>

Pete Siemsen wrote:
> So something happens in the creation of "templates".  I'm not real
> strong with Java class location problems.  What's the problem finding
> antlr/TokenStream?  Any help appreciated.

Do you include the StringTemplate.jar in the classpath?

Johannes

From antlr-list at arizona-software.ch  Sat Oct 27 20:50:40 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sat, 27 Oct 2007 20:50:40 -0700
Subject: [antlr-interest] ANTLRWorks 1.1.4 released
Message-ID: <8437C39E-DDC7-4E7A-A8D7-E3B259E55CD5@arizona-software.ch>

Hi,

ANTLRWorks 1.1.4 is available and fixes the following:

Bug fix:
     [AW-111] - Cannot save file with name ending with 'g'
     [AW-113] - Memory leak when running the debugger multiple times
     [AW-114] - Issue matching comment between -> and template name
     [AW-115] - Shift-tab sometimes takes other lines into account
     [AW-116] - NPE when exporting EPS/Bitmap in interpreter and  
debugger
     [AW-117] - Paste still work when file is read-only
     [AW-118] - Duplicate messages displayed in the console
     [AW-119] - Errors/warnings are not consistently reported when  
checking the grammar

Improvement:
     [AW-110] - Ability to generate the grammar in the same directory  
as the grammar document
     [AW-112] - Ability to generate syntax diagram from a grammar  
file without using the GUI

Regards,

Jean

From geoff_hendrey at yahoo.com  Sat Oct 27 22:18:03 2007
From: geoff_hendrey at yahoo.com (Geoff hendrey)
Date: Sat, 27 Oct 2007 22:18:03 -0700 (PDT)
Subject: [antlr-interest] apostophe crashes Interpreter
Message-ID: <20334.80103.qm@web31805.mail.mud.yahoo.com>

I built a simple grammar, most of which consists of lines that must be terminated by a semicolon. Occasionally I make a typo, since apostrophe is next to semicolon on the keyboard, and I wind up typing an apostrophe to the right of the semi colon.

The presence of this apostrophe seems to result in either everything after the apostrophe being ignored, as if it is not there, or the parser itself crashing. 

Has anyone seen this before?

Here is the stack trace that is printed in AntlrWorks console:

[21:39:54] java.lang.NullPointerException
    at org.antlr.tool.Interpreter.parseEngine(Interpreter.java:268)
    at org.antlr.tool.Interpreter.parse(Interpreter.java:184)
    at org.antlr.tool.Interpreter.parse(Interpreter.java:199)
    at org.antlr.tool.Interpreter.parse(Interpreter.java:191)
    at org.antlr.works.interpreter.EditorInterpreter.process(Unknown Source)
    at org.antlr.works.interpreter.EditorInterpreter.run(Unknown Source)
    at java.lang.Thread.run(Thread.java:613)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071027/b977e38c/attachment.html 

From ivanisev at sezampro.com  Sun Oct 28 01:48:27 2007
From: ivanisev at sezampro.com (Bosko Ivanisevic)
Date: Sun, 28 Oct 2007 09:48:27 +0100
Subject: [antlr-interest] Enhancing error reporting.
Message-ID: <47244CDB.1070707@sezampro.com>

Hi everybody,

I have following rule in my grammar:
	
function
	:	FUNCTION return_type ID statement+ END -> ^(FNC_DEF ID ^(RETURN_TYPE
return_type) ^(BLOCK statement+))
	;

return_type
	:	NUMERIC_SIMPLE
	|	NUMERIC_SERIES
	|	BOOLEAN_SIMPLE
	|	BOOLEAN_SERIES
	|	STRING_SIMPLE
	|	STRING_SERIES
	;
FUNCTION
	:	'Function';


If I start parser on the input that doesn't have return_type:

Function foo
...
End

error I get from parser is:

ine 1:9 mismatched input 'foo' expecting set null

which is very cryptic for users. Obviously, it would be better if user
can see that return_type specifier is missing. I've also implemented
getErrorMessage function as is written in the book, but I couldn't get
better message.

On the other hand if I miss keyword 'Function' in the input:

Numeric foo
....
End

Error message is:

line 1:0 mismatched input 'Numeric' expecting FUNCTION

As can be seen it is made of token name, not real keyword which also
doesn't give useful information to the end user. Does anyone have
suggestion how can I improve error reporting?

Regards,
Bosko


From jaluber at gmx.de  Sun Oct 28 10:37:47 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 28 Oct 2007 18:37:47 +0100
Subject: [antlr-interest] How to remove the rules ambiguity here?
Message-ID: <4724C8EB.9090007@gmx.de>

Hi!

I've been trying to remove a certain ambiguity with the rule
compilation_unit in the attached grammar, which is a reduced variant of
my normal grammar. The problem stems from an interaction between the
following rules:

compilation_unit
    :   extern_alias_directive* using_directive*
        global_attribute_section* namespace_member_declaration* EOF
    ;

global_attribute_section
    :   OPEN_BRACKET global_attribute_target_specifier attribute_list
        COMMA? CLOSE_BRACKET
    ;

namespace_member_declaration
    :   namespace_declaration
    |   type_declaration
    ;

type_declaration
    :   class_declaration
    |   struct_declaration
    |   interface_declaration
    |   enum_declaration
    |   delegate_declaration
    ;

qualified_alias_member
    :   IDENTIFIER DOUBLE_COLON IDENTIFIER type_argument_list?
    ;

delegate_declaration
    :   attribute_section* delegate_modifier* DELEGATE return_type
        IDENTIFIER type_parameter_list? OPEN_PARENS
        formal_parameter_list? CLOSE_PARENS
        type_parameter_constraints_clause* SEMICOLON
    ;

attribute_section
    :   OPEN_BRACKET attribute_target_specifier? attribute_list
        COMMA? CLOSE_BRACKET
    ;

compilation_unit references both global_attribute_section and
namespace_member_declaration. The latter one calls finally
attribute_section, which is near-identical to global_attribute_section.
Even if the actual values always differ for each attribute rule, ANTLR
consider them identical due to the use of contextual_keyword["keyword"].
The use of syntactic predicates doesn't seem to have an influence here.

Can I remove them and trust on ANTLRs ability to to tell the options
apart? Or do I have to merge the global_attribute_section with
attribute_section and look later in a second phase, if those attributes
were allowed here? Or can I safely use a flag to tell the parser "Here
aren't global attributes allowed!"?

Johannes
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: CSharp3ParserTest.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071028/c8b2634a/attachment.pl 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: CSharp3Lexer.tokens
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071028/c8b2634a/attachment-0001.pl 

From antlr-list at arizona-software.ch  Sun Oct 28 11:10:37 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sun, 28 Oct 2007 11:10:37 -0700
Subject: [antlr-interest] ANTLRWorks 1.1.4 released
In-Reply-To: <8437C39E-DDC7-4E7A-A8D7-E3B259E55CD5@arizona-software.ch>
References: <8437C39E-DDC7-4E7A-A8D7-E3B259E55CD5@arizona-software.ch>
Message-ID: <8845CDFA-8C50-4D00-9147-59A11C806140@arizona-software.ch>

Hello,

I noticed that the emacs keybinding (on Mac OS X) and general key  
bindings (like HOME/END) are not working anymore. I fixed that and  
will be releasing a new version at the end of the day probably.

Concerning the memory leak fixes in 1.1.4, AW shouldn't need anymore  
the 700MB of RAM to run the Java grammar. Let me know if you are  
still experiencing out of memory error.

Regards,

Jean

On Oct 27, 2007, at 8:50 PM, Jean Bovet wrote:

> Hi,
>
> ANTLRWorks 1.1.4 is available and fixes the following:
>
> Bug fix:
>     [AW-111] - Cannot save file with name ending with 'g'
>     [AW-113] - Memory leak when running the debugger multiple times
>     [AW-114] - Issue matching comment between -> and template name
>     [AW-115] - Shift-tab sometimes takes other lines into account
>     [AW-116] - NPE when exporting EPS/Bitmap in interpreter and  
> debugger
>     [AW-117] - Paste still work when file is read-only
>     [AW-118] - Duplicate messages displayed in the console
>     [AW-119] - Errors/warnings are not consistently reported when  
> checking the grammar
>
> Improvement:
>     [AW-110] - Ability to generate the grammar in the same  
> directory as the grammar document
>     [AW-112] - Ability to generate syntax diagram from a grammar  
> file without using the GUI
>
> Regards,
>
> Jean


From pink at odahoda.de  Sun Oct 28 12:16:24 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sun, 28 Oct 2007 20:16:24 +0100
Subject: [antlr-interest] apostophe crashes Interpreter
References: <20334.80103.qm@web31805.mail.mud.yahoo.com>
Message-ID: <fg2n62$n1d$1@ger.gmane.org>

Geoff hendrey wrote:

> I built a simple grammar, most of which consists of lines that must be
> terminated by a semicolon. Occasionally I make a typo, since apostrophe is
> next to semicolon on the keyboard, and I wind up typing an apostrophe to
> the right of the semi colon.
> 
> The presence of this apostrophe seems to result in either everything after
> the apostrophe being ignored, as if it is not there, or the parser itself
> crashing.
> 
> Has anyone seen this before?

Not that specific one, but error handling/reporting of ANTLRs own parser is
known to be 'suboptimal'. Ter did not spend much time on it, because the
current implementation is just temporary (built on V2) and will be
rewritten anyway - he's currently working on it.



From parrt at cs.usfca.edu  Sun Oct 28 13:56:45 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 28 Oct 2007 13:56:45 -0700
Subject: [antlr-interest] ANTLRWorks 1.1.4 released
In-Reply-To: <8437C39E-DDC7-4E7A-A8D7-E3B259E55CD5@arizona-software.ch>
References: <8437C39E-DDC7-4E7A-A8D7-E3B259E55CD5@arizona-software.ch>
Message-ID: <8F5FA15F-C6FE-497B-92D1-4E14E220D2DC@cs.usfca.edu>

Congratulations, Jean!  Great work!
Ter
On Oct 27, 2007, at 8:50 PM, Jean Bovet wrote:

> Hi,
>
> ANTLRWorks 1.1.4 is available and fixes the following:
>
> Bug fix:
>     [AW-111] - Cannot save file with name ending with 'g'
>     [AW-113] - Memory leak when running the debugger multiple times
>     [AW-114] - Issue matching comment between -> and template name
>     [AW-115] - Shift-tab sometimes takes other lines into account
>     [AW-116] - NPE when exporting EPS/Bitmap in interpreter and  
> debugger
>     [AW-117] - Paste still work when file is read-only
>     [AW-118] - Duplicate messages displayed in the console
>     [AW-119] - Errors/warnings are not consistently reported when  
> checking the grammar
>
> Improvement:
>     [AW-110] - Ability to generate the grammar in the same  
> directory as the grammar document
>     [AW-112] - Ability to generate syntax diagram from a grammar  
> file without using the GUI
>
> Regards,
>
> Jean


From paul at paulkeir.com  Sun Oct 28 14:44:02 2007
From: paul at paulkeir.com (Paul Keir)
Date: Sun, 28 Oct 2007 21:44:02 +0000
Subject: [antlr-interest] superClass usage
Message-ID: <472502A2.2040104@paulkeir.com>

Hi all,

Does anyone have an example using the superClass option described in 
section 5.7 of the ANTLR ref. book? I'd like to extend an existing 
combined grammar.

Thanks in advance,
Paul


From Robert.Klaus at innovations.de  Sun Oct 28 23:36:25 2007
From: Robert.Klaus at innovations.de (Robert.Klaus at innovations.de)
Date: Mon, 29 Oct 2007 07:36:25 +0100
Subject: [antlr-interest] Removing System.out and System.err calls
In-Reply-To: <0D68257B-5374-43E3-8A2D-58491388ACE7@cs.usfca.edu>
References: <6F7F118281893140B2E80FA4F9331BC626F6C5@email.innoimm.local>
	<0D68257B-5374-43E3-8A2D-58491388ACE7@cs.usfca.edu>
Message-ID: <6F7F118281893140B2E80FA4F9331BC626F78D@email.innoimm.local>

Hi,

There are some in traceOut and traceIn which look like as if they are
used for debugging as well. As the debug output is gone on the main
development line, when is planned to release the next version?

Bye

Robert


> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu] 
> Sent: Saturday, October 27, 2007 3:19 AM
> To: Klaus Robert
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Removing System.out and System.err calls
> 
> 
> On Oct 25, 2007, at 6:49 PM, <Robert.Klaus at innovations.de> 
> <Robert.Klaus at innovations.de> wrote:
> 
> > Hi,
> >
> > In the BaseRecognizer.class there are several calls to 
> System.err and 
> > System.out. In ANTLR2 I could overwrite methods like 
> "reportError" to 
> > take care of the messages myself.
> > However this is not possible in ANTLR3, as some of these 
> calls are in 
> > methods I think are better not overwritten (e.g.
> > "recoverFromMismatchedToken").
> > Would it be possible to delegate all reporting to dedicated 
> methods, 
> > e.g. "public void reportError(String msg)"? This would 
> allow users of
> > ANTLR3 to switch off System.out calls or use their own logging 
> > facility.
> 
> Howdy. All errors should actually go thru:
> 
> public void emitErrorMessage(String msg) {
>                 System.err.println(msg); }
> 
> The
> 
> System.err.println("BR.recoverFromMismatchedToken");
> 
> you see is a debugging print. Ooops.   Actually, it's gone in 
> my main  
> line of code. so we're cool.
> 
> Are there others?  That's the only one I see.
> 
> Ter
> 
> 
> 

From mb.fgel at ownit.nu  Mon Oct 29 00:25:36 2007
From: mb.fgel at ownit.nu (Mats Behre)
Date: Mon, 29 Oct 2007 08:25:36 +0100
Subject: [antlr-interest] NullPointerException when referencing result of
	undefined rule
Message-ID: <47258AF0.3050404@ownit.nu>

Hi,

When I run this (totally useless) grammar:

grammar Test;

    dateAddCmd
        @after {
            $p.text;
        }: p=dateAddKeyword;

in ANTLR 3.0.1 it results in:

error(10):  internal error: /Scratch/temp/Test.g : java.lang.NullPointerException
org.antlr.tool.ActionAnalysisLexer.mX_Y(ActionAnalysisLexer.java:133)
org.antlr.tool.ActionAnalysisLexer.mTokens(ActionAnalysisLexer.java:323)
org.antlr.tool.ActionAnalysisLexer.nextToken(ActionAnalysisLexer.java:69)
org.antlr.tool.ActionAnalysisLexer.analyze(ActionAnalysisLexer.java:43)
org.antlr.tool.Grammar.examineAllExecutableActions(Grammar.java:1291)
org.antlr.tool.Grammar.setGrammarContent(Grammar.java:567)
org.antlr.tool.Grammar.<init>(Grammar.java:456)
org.antlr.Tool.getGrammar(Tool.java:331)
org.antlr.Tool.process(Tool.java:267)
org.antlr.Tool.main(Tool.java:70)

If I define the 'dateAddKeyword' rule I get the more expected error reports.
The critical point seems to be the reference of $p in the @after section.

Rgds,
Mats

From Mike at LeBlanc-Engineering.com  Mon Oct 29 03:12:59 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Mon, 29 Oct 2007 06:12:59 -0400
Subject: [antlr-interest] How to remove the rules ambiguity here?
In-Reply-To: <4724C8EB.9090007@gmx.de>
References: <4724C8EB.9090007@gmx.de>
Message-ID: <48FFE929-1283-4FD6-851C-6E38D07CAD23@LeBlanc-Engineering.com>

I don't know anything about C# but, if the target were Java, I would  
try the following change to compare strings, not references to them.

On Oct 28, 2007, at 1:37 PM, Johannes Luber wrote:

> // For contextual keywords like get, set and yield
> contextual_keyword[string identifier]
> 	:	 { input.LT(1).Text == $identifier }? IDENTIFIER
> 	;

becomes

> // For contextual keywords like get, set and yield
> contextual_keyword[string identifier]
> 	:	 { input.LT(1).Text.equals($identifier) }? IDENTIFIER
> 	;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071029/3e0e98a3/attachment.html 

From jaluber at gmx.de  Mon Oct 29 03:57:18 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 29 Oct 2007 11:57:18 +0100
Subject: [antlr-interest] How to remove the rules ambiguity here?
In-Reply-To: <48FFE929-1283-4FD6-851C-6E38D07CAD23@LeBlanc-Engineering.com>
References: <4724C8EB.9090007@gmx.de>
	<48FFE929-1283-4FD6-851C-6E38D07CAD23@LeBlanc-Engineering.com>
Message-ID: <4725BC8E.6000907@gmx.de>

Michael LeBlanc wrote:
> I don't know anything about C# but, if the target were Java, I would try
> the following change to compare strings, not references to them.
> 
> On Oct 28, 2007, at 1:37 PM, Johannes Luber wrote:
> 
>> // For contextual keywords like get, set and yield
>> contextual_keyword[string identifier]
>> : { input.LT(1).Text == $identifier }? IDENTIFIER
>> ;
> 
> becomes
> 
>> // For contextual keywords like get, set and yield
>> contextual_keyword[string identifier]
>> : { input.LT(1).Text*.equals*($identifier) }? IDENTIFIER
>> ;

In C#, the ==-operator is overloaded for the string class so it results
in the correct behaviour. It is more intuitive in that way.

Johannes

From Mike at LeBlanc-Engineering.com  Mon Oct 29 05:07:36 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Mon, 29 Oct 2007 08:07:36 -0400
Subject: [antlr-interest] How to remove the rules ambiguity here?
In-Reply-To: <4725BC8E.6000907@gmx.de>
References: <4724C8EB.9090007@gmx.de>
	<48FFE929-1283-4FD6-851C-6E38D07CAD23@LeBlanc-Engineering.com>
	<4725BC8E.6000907@gmx.de>
Message-ID: <4B98501B-21C0-41A2-858D-F9F26B4339CF@LeBlanc-Engineering.com>


On Oct 29, 2007, at 6:57 AM, Johannes Luber wrote:

> In C#, the ==-operator is overloaded for the string class so it  
> results
> in the correct behaviour. It is more intuitive in that way.

No kidding!  The Java behavior has bitten me several times.  That's  
why I'm sensitive to it.


From antlr at mirality.co.nz  Mon Oct 29 05:17:33 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 30 Oct 2007 01:17:33 +1300
Subject: [antlr-interest] How to remove the rules ambiguity here?
In-Reply-To: <4B98501B-21C0-41A2-858D-F9F26B4339CF@LeBlanc-Engineering.c
 om>
References: <4724C8EB.9090007@gmx.de>
	<48FFE929-1283-4FD6-851C-6E38D07CAD23@LeBlanc-Engineering.com>
	<4725BC8E.6000907@gmx.de>
	<4B98501B-21C0-41A2-858D-F9F26B4339CF@LeBlanc-Engineering.com>
Message-ID: <20071029121743.0369511E9D4@www.antlr.org>

At 01:07 30/10/2007, Michael LeBlanc wrote:
 >No kidding!  The Java behavior has bitten me several times.
 >That's why I'm sensitive to it.

It can still bite you in .NET for other value-like classes 
(especially if they were defined in a different .NET language), 
but for strings at least you're safe.  As long as you want an 
ordinal comparison, anyway.


From relationalalgebra at gmail.com  Mon Oct 29 05:58:14 2007
From: relationalalgebra at gmail.com (G R)
Date: Mon, 29 Oct 2007 13:58:14 +0100
Subject: [antlr-interest] Problems with StringTemplate within TreeGrammar
Message-ID: <2ea6ad20710290558s53a2e99el91a2fc647a3fa308@mail.gmail.com>

Hi,
I've got a problem trying to use ST with my tree grammar.
I'm trying to translate relational algebra into SQL. I got everything
working fine for most of all the RA operators, but I'm stuck with the
selection.

Here is the parser grammar for the selection :

// select = SELECT "[" condition "]" relation
// condition = logicalTerm {"OR" logicalTerm}
// logicalTerm = logicalFactor {"AND" logicalFactor}
// logicalFactor = ["NOT"] operand CompareOperator operand | "(" condition
")"
select    :    Select LeftBrack condition RightBrack relation
        ->^(Select condition relation);
condition
    :    logicalTerm (Or^ logicalTerm)*;
logicalTerm
    :    logicalFactor (And^ logicalFactor)*;
logicalFactor
    :    Not op1=operand CompareOperator op2=operand
        ->^(Not ^(CompareOperator $op1 $op2))
    |    op1=operand CompareOperator op2=operand
        ->^(CompareOperator $op1 $op2)
    |    LeftParent condition RightParent
        ->^(condition);
operand    :    AttributeName
    |    Numeric;

this gave me a beautiful AST with for each condition, the tokens "AND" or
"OR" as node, and logicalTerm or LogicalFactor as children.
So in my tree grammar, I've try this using StringTemplate as output option :


select    :    ^(Select condition relation)
                ->select(condition={$condition.st},
relation={$relation.st});
condition
    :    ^(Or? lt+=logicalTerm+)
                ->condition(logicalTerms={$lt});
logicalTerm
    :    ^(And? lf+=logicalFactor+)
                ->logicalTerm(logicalFactors={$lf});
logicalFactor
    :    ^(Not ^(CompareOperator leftOp=operand rightOp=operand))
                ->notLogicalFactor(leftOperand={$leftOp.text},
rightOperand={$rightOp.text}, operator={$CompareOperator.text})
    |    ^(CompareOperator operand operand)
                ->logicalFactor(leftOperand={$leftOp.text},
rightOperand={$rightOp.text}, operator={$CompareOperator.text})
    |    condition
                ->innerCondition(condition={$condition.st});
operand    :    AttributeName
    |    Numeric;

With the templates :

select(condition, relation) ::= "SELECT * FROM <relation> WHERE <condition>"
condition(logicalTerms) ::= <<"<logicalTerms; separator="\" OR \"">">>
logicalTerm(logicalFactors) ::= <<"<logicalFactors; separator="\" AND
\"">">>
notLogicalFactor(leftOperand, rightOperand, operator) ::= "<leftOperand> NOT
<operator> <rightOperand>"
logicalFactor(leftOperand, rightOperand, operator) ::= "<leftOperand>
<operator> <rightOperand>"
innerCondition(condition) ::= "(<condition>)"

Using theses grammars, when i try to translate the following RA query :
\u03c3 [att1>20 AND (att2 = foo OR att3=bar)] R1 (where \u03c3 representing
the Select token)

I've got the following error :
BR.recoverFromMismatchedToken
D:\Diplome\RATranslator\src\grammar\RATree.g: node from line 1:16 mismatched
tree node: AND expecting <DOWN>

I've check with ANTLRWorks, the parser grammar gave me the right AST as the
picture join to this mail.

Could anyone help me debugging this and find a solution ?
Thanks.

G.R
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071029/07ab014e/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: select.jpg
Type: image/jpeg
Size: 10492 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071029/07ab014e/attachment-0001.jpg 

From Mike at LeBlanc-Engineering.com  Mon Oct 29 06:08:43 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Mon, 29 Oct 2007 09:08:43 -0400
Subject: [antlr-interest] middle-end example
Message-ID: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>

I looked through the v3 examples but didn't spot what I'm looking  
for, which is:

Pass 1: Normal grammar that writes a tree.
Pass 2 thru N-1: Tree grammars that rewrite the tree.  Optimizers, if  
you like.
Pass N: Tree grammar that writes string-templates to produce final  
output.

Can anyone point me to such a thing?

From jaluber at gmx.de  Mon Oct 29 06:23:11 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 29 Oct 2007 14:23:11 +0100
Subject: [antlr-interest] middle-end example
In-Reply-To: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>
References: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>
Message-ID: <4725DEBF.9020104@gmx.de>

Michael LeBlanc wrote:
> I looked through the v3 examples but didn't spot what I'm looking for,
> which is:
> 
> Pass 1: Normal grammar that writes a tree.
> Pass 2 thru N-1: Tree grammars that rewrite the tree.  Optimizers, if
> you like.
> Pass N: Tree grammar that writes string-templates to produce final output.
> 
> Can anyone point me to such a thing?

I'm not sure that such an example actually exists as it is dependent on
tree rewriting which will be supported by 3.1. But if there is an
example then maybe Ter's programming language Mantra may provide
insight. If yes, then please tell me, because I'd would like to see an
example myself.

Johannes

From parrt at cs.usfca.edu  Mon Oct 29 08:58:11 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 29 Oct 2007 08:58:11 -0700
Subject: [antlr-interest] Removing System.out and System.err calls
In-Reply-To: <6F7F118281893140B2E80FA4F9331BC626F78D@email.innoimm.local>
References: <6F7F118281893140B2E80FA4F9331BC626F6C5@email.innoimm.local>
	<0D68257B-5374-43E3-8A2D-58491388ACE7@cs.usfca.edu>
	<6F7F118281893140B2E80FA4F9331BC626F78D@email.innoimm.local>
Message-ID: <F6A8830B-AE8D-46AF-A0AD-2841DD533A5D@cs.usfca.edu>


On Oct 28, 2007, at 11:36 PM, <Robert.Klaus at innovations.de> wrote:

> Hi,
>
> There are some in traceOut and traceIn which look like as if they are
> used for debugging as well. As the debug output is gone on the main
> development line, when is planned to release the next version?

Oh, that is deliberate default behavior. just override to reidrect.
Ter


From dt05ca4 at student.lth.se  Mon Oct 29 10:21:50 2007
From: dt05ca4 at student.lth.se (Christian Andersson)
Date: Mon, 29 Oct 2007 18:21:50 +0100 (CET)
Subject: [antlr-interest] Methods and dynamically scoped variables
Message-ID: <24829.194.237.142.7.1193678510.squirrel@webmail.student.lth.se>

Hi all!

I have a lot of java code in my grammar that uses a lot of dynamically
scoped attributes. Quite often the code look the same using the same
attributes and so on, this gives me a lot of problem maintaining the code,
having to change the same value in many places and the code also gets
unnecessary large.

I really would like to change these long code sequences with methods instead.
I tried to put @member between @init @after, though no error was reported
in ANTLRWorks no code was generated to java.

Can you only use @members on top of the file using no dynamically scoped
attributes?



Thanks for your help!
Br Christian



From parrt at cs.usfca.edu  Mon Oct 29 11:18:00 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 29 Oct 2007 11:18:00 -0700
Subject: [antlr-interest] Methods and dynamically scoped variables
In-Reply-To: <24829.194.237.142.7.1193678510.squirrel@webmail.student.lth.se>
References: <24829.194.237.142.7.1193678510.squirrel@webmail.student.lth.se>
Message-ID: <4C3137BD-49B7-4303-831F-D4235C676663@cs.usfca.edu>


On Oct 29, 2007, at 10:21 AM, Christian Andersson wrote:

> Hi all!
>
> I have a lot of java code in my grammar that uses a lot of dynamically
> scoped attributes. Quite often the code look the same using the same
> attributes and so on, this gives me a lot of problem maintaining  
> the code,
> having to change the same value in many places and the code also gets
> unnecessary large.
>
> I really would like to change these long code sequences with  
> methods instead.
> I tried to put @member between @init @after, though no error was  
> reported
> in ANTLRWorks no code was generated to java.

Hi. @name {action} works anywhere and is sent to the target to do  
what it wants (per target). No errors are currently generated.

> Can you only use @members on top of the file using no dynamically  
> scoped
> attributes?

Yes.

Ter


From parrt at cs.usfca.edu  Mon Oct 29 11:21:01 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 29 Oct 2007 11:21:01 -0700
Subject: [antlr-interest] Problems with StringTemplate within TreeGrammar
In-Reply-To: <2ea6ad20710290558s53a2e99el91a2fc647a3fa308@mail.gmail.com>
References: <2ea6ad20710290558s53a2e99el91a2fc647a3fa308@mail.gmail.com>
Message-ID: <F7550D08-3571-47C9-97AE-4AA58419FC65@cs.usfca.edu>


On Oct 29, 2007, at 5:58 AM, G R wrote:

Use ANTLRWorks to step thru your grammar.  You'll find that your  
grammar for tree doesn't match the tree.  Also note that you should  
probably not use Root? style trees in your grammar.

Ter
> select    :    ^(Select condition relation)
>                 ->select(condition={$condition.st}, relation= 
> {$relation.st});
> condition
>     :    ^(Or? lt+=logicalTerm+)
>                 ->condition(logicalTerms={$lt});
> logicalTerm
>     :    ^(And? lf+=logicalFactor+)
>                 ->logicalTerm(logicalFactors={$lf});
> logicalFactor
>     :    ^(Not ^(CompareOperator leftOp=operand rightOp=operand))
>                 ->notLogicalFactor(leftOperand={$leftOp.text},  
> rightOperand={$rightOp.text}, operator={$CompareOperator.text})
>     |    ^(CompareOperator operand operand)
>                 ->logicalFactor(leftOperand={$leftOp.text},  
> rightOperand={$rightOp.text}, operator={$CompareOperator.text})
>     |    condition
>                 ->innerCondition(condition={$condition.st});
> operand    :    AttributeName
>     |    Numeric;

From parrt at cs.usfca.edu  Mon Oct 29 11:23:08 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 29 Oct 2007 11:23:08 -0700
Subject: [antlr-interest] NullPointerException when referencing result
	of undefined rule
In-Reply-To: <47258AF0.3050404@ownit.nu>
References: <47258AF0.3050404@ownit.nu>
Message-ID: <ACA863F7-093E-43AD-8B92-899037F6FFBF@cs.usfca.edu>

Sorry about that...added

http://www.antlr.org:8888/browse/ANTLR-190

Make sure to define all rules you ref. :)

Ter

From antlr at mirality.co.nz  Mon Oct 29 11:44:49 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 30 Oct 2007 07:44:49 +1300
Subject: [antlr-interest] middle-end example
Message-ID: <20071029184519.ADBDC11E997@www.antlr.org>

At 02:08 30/10/2007, Michael LeBlanc wrote:
 >I looked through the v3 examples but didn't spot what I'm
 >looking for, which is:
 >
 >Pass 1: Normal grammar that writes a tree.
 >Pass 2 thru N-1: Tree grammars that rewrite the tree.
 >Optimizers, if you like.
 >Pass N: Tree grammar that writes string-templates to produce
 >final output.
 >
 >Can anyone point me to such a thing?

V3 does not yet support multiple tree passes (specifically, a tree 
parser cannot be told to output a tree).

It's on the todo list.


From antlr at mirality.co.nz  Mon Oct 29 11:55:35 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 30 Oct 2007 07:55:35 +1300
Subject: [antlr-interest] middle-end example
Message-ID: <20071029200918.5506C11E999@www.antlr.org>

At 02:08 30/10/2007, Michael LeBlanc wrote:
 >I looked through the v3 examples but didn't spot what I'm
 >looking for, which is:
 >
 >Pass 1: Normal grammar that writes a tree.
 >Pass 2 thru N-1: Tree grammars that rewrite the tree.
 >Optimizers, if you like.
 >Pass N: Tree grammar that writes string-templates to produce
 >final output.
 >
 >Can anyone point me to such a thing?

V3 does not yet support multiple tree passes (specifically, a tree 
parser cannot be told to output a tree).

It's on the todo list.


From parrt at cs.usfca.edu  Mon Oct 29 13:43:27 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 29 Oct 2007 13:43:27 -0700
Subject: [antlr-interest] middle-end example
In-Reply-To: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>
References: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>
Message-ID: <8CB9A826-B8F2-46EA-8565-0051A50B9C53@cs.usfca.edu>


On Oct 29, 2007, at 6:08 AM, Michael LeBlanc wrote:

> I looked through the v3 examples but didn't spot what I'm looking  
> for, which is:
>
> Pass 1: Normal grammar that writes a tree.
> Pass 2 thru N-1: Tree grammars that rewrite the tree.  Optimizers,  
> if you like.
> Pass N: Tree grammar that writes string-templates to produce final  
> output.
>
> Can anyone point me to such a thing?

Tree rewrites are possible in 3.1 but 3.1 is not out yet.  Want to  
play with 3.1b1?  Send me mail.

Ter

From parrt at cs.usfca.edu  Mon Oct 29 14:21:19 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 29 Oct 2007 14:21:19 -0700
Subject: [antlr-interest] an antlr 3.1 beta daily build
In-Reply-To: <200710292106.l9TL69Nw018206@tach.newtechlaw.com>
References: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>
	<8CB9A826-B8F2-46EA-8565-0051A50B9C53@cs.usfca.edu>
	<200710292106.l9TL69Nw018206@tach.newtechlaw.com>
Message-ID: <BAB1A389-00B8-4F9F-B616-20BE801A88BE@cs.usfca.edu>

I don't really have any doc yet though other than unit tests and a  
few blog entries like:

http://www.antlr.org/wiki/display/~admin/2007/07/19/

Grab:

http://www.antlr.org/download/build/antlr-2007-10-29.14.tar.gz

Oh, from CHANGES.txt:

* Added AST construction for tree parsers including -> rewrite rules.
   Rewrite mode (rewrite=true) alters the tree in place rather than
   constructing a whole new tree.  Implementation notes:
   ...

* got tree rewrites working in tree grammars.  It builds a completely  
new
   tree from old tree; i.e., you get two trees in memory.  W/o a rewrite
   rule, the input for that rule is duplicated and returned. -> w/o  
elements
   to the right means don't return anything; i.e., delete.  Ooops...way
   harder than I thought.  Real implementation notes above.

Ter


From win at wincent.com  Mon Oct 29 19:49:13 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 30 Oct 2007 03:49:13 +0100
Subject: [antlr-interest] Building the C runtime as a Universal Binary
Message-ID: <34698C47-A3BA-4834-85C4-8C6222AE260F@wincent.com>

Just out of curiosity, has anyone tried to build a Universal Binary  
version of the C target runtime on Mac OS X?

Cheers,
Wincent






From jimi at temporal-wave.com  Mon Oct 29 20:47:18 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 29 Oct 2007 20:47:18 -0700
Subject: [antlr-interest] Building the C runtime as a Universal Binary
In-Reply-To: <34698C47-A3BA-4834-85C4-8C6222AE260F@wincent.com>
References: <34698C47-A3BA-4834-85C4-8C6222AE260F@wincent.com>
Message-ID: <BAY130-DS24D96DD5398D9BED8C14586920@phx.gbl>

Yep - worked fine the last time I did it, but unless you have issues keeping
the two separate binaries, I would do that, otherwise it is a bigger file
than you really need (although only the bit you need actually loads of
course).

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Wincent Colaiuta
> Sent: Monday, October 29, 2007 7:49 PM
> To: Antlr Interest
> Subject: [antlr-interest] Building the C runtime as a Universal Binary
> 
> Just out of curiosity, has anyone tried to build a Universal Binary
> version of the C target runtime on Mac OS X?
> 
> Cheers,
> Wincent
> 
> 
> 
> 



From kroepke at classdump.org  Tue Oct 30 00:40:42 2007
From: kroepke at classdump.org (=?ISO-8859-1?Q?Kay_R=F6pke?=)
Date: Tue, 30 Oct 2007 08:40:42 +0100
Subject: [antlr-interest] Status of C++ backend?
In-Reply-To: <8475348F-4A05-4126-B1D9-0058FF5E15FF@latencyzero.com>
References: <8475348F-4A05-4126-B1D9-0058FF5E15FF@latencyzero.com>
Message-ID: <A13056D6-1000-49AD-83B9-715D8B50BC93@classdump.org>


On Oct 13, 2007, at 2:25 AM, Rick Mann wrote:

> Just curious if there was any work on this, or if I should do my  
> own. I didn't see anything in the current sources...

Hi Rick!

I don't think anyone has really taken over Ric's work/position yet.  
Jim said he had plans to do so, but I guess he's busy.
Eventually I need to do custom C++ runtimes for at least two projects  
I have in the queue, though both are rather low priority for me.
Also, I need to update the ObjC runtime, since I way behind at the  
moment :(

In case you want to get started, I'd be happy to help out a bit. Just  
give me a ring by mail or chat.

cheers,
-k

From dt05ca4 at student.lth.se  Tue Oct 30 02:55:06 2007
From: dt05ca4 at student.lth.se (Christian Andersson)
Date: Tue, 30 Oct 2007 10:55:06 +0100 (CET)
Subject: [antlr-interest] Methods and dynamically scoped variables
In-Reply-To: <4C3137BD-49B7-4303-831F-D4235C676663@cs.usfca.edu>
References: <24829.194.237.142.7.1193678510.squirrel@webmail.student.lth.se>
	<4C3137BD-49B7-4303-831F-D4235C676663@cs.usfca.edu>
Message-ID: <4669.194.237.142.6.1193738106.squirrel@webmail.student.lth.se>

>
> On Oct 29, 2007, at 10:21 AM, Christian Andersson wrote:
>
>> Hi all!
>>
>> I have a lot of java code in my grammar that uses a lot of dynamically
>> scoped attributes. Quite often the code look the same using the same
>> attributes and so on, this gives me a lot of problem maintaining
>> the code,
>> having to change the same value in many places and the code also gets
>> unnecessary large.
>>
>> I really would like to change these long code sequences with
>> methods instead.
>> I tried to put @member between @init @after, though no error was
>> reported
>> in ANTLRWorks no code was generated to java.
>
> Hi. @name {action} works anywhere and is sent to the target to do
> what it wants (per target). No errors are currently generated.
>
>> Can you only use @members on top of the file using no dynamically
>> scoped
>> attributes?
>
> Yes.
>
> Ter
>

Thanks for your answer!

I tried to put @name{action} in my tree grammar file but no code
is generated. The only place where I can put the "name" action without the
generator complaining is between
the rule name and the contents of that rule(where the @init and @after is).

How do you invoke the @name{actions} from the tree grammar rules?

Is it possible to split up the grammar and the java actions in the tree
grammar file into several files to improve overview (the file consists of
3000 lines of java and tree grammar rules mixed and is still growing, the
overview is really messy)?


Thanks for your help!
Br Christian




From antlr at mirality.co.nz  Tue Oct 30 03:35:01 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 30 Oct 2007 23:35:01 +1300
Subject: [antlr-interest] Methods and dynamically scoped variables
In-Reply-To: <4669.194.237.142.6.1193738106.squirrel@webmail.student.lth .se>
References: <24829.194.237.142.7.1193678510.squirrel@webmail.student.lth.se>
	<4C3137BD-49B7-4303-831F-D4235C676663@cs.usfca.edu>
	<4669.194.237.142.6.1193738106.squirrel@webmail.student.lth.se>
Message-ID: <20071030103515.C596711E994@www.antlr.org>

At 22:55 30/10/2007, Christian Andersson wrote:
 >I tried to put @name{action} in my tree grammar file but no code
 >is generated. The only place where I can put the "name" action
 >without the generator complaining is between the rule name and
 >the contents of that rule(where the @init and @after is).

"@name" was not literal -- Ter was referring to a general pattern 
of rules in the grammar file.  ie. anything starting with an @ and 
followed by a single identifier and subsequent target-language 
block is called an "action" and is passed to the 
target-language-specific template.  Whether or not that template 
does anything with it, and where it puts the code in that block, 
is left completely up to the template file.

Thus you can make up whatever you want and ANTLR will accept it 
(provided it's syntactically sound), but unless you use one of the 
names defined by the target language template then it's not going 
to achieve anything useful.


From Mike at LeBlanc-Engineering.com  Tue Oct 30 05:05:20 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Tue, 30 Oct 2007 08:05:20 -0400
Subject: [antlr-interest] an antlr 3.1 beta daily build
In-Reply-To: <BAB1A389-00B8-4F9F-B616-20BE801A88BE@cs.usfca.edu>
References: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>
	<8CB9A826-B8F2-46EA-8565-0051A50B9C53@cs.usfca.edu>
	<200710292106.l9TL69Nw018206@tach.newtechlaw.com>
	<BAB1A389-00B8-4F9F-B616-20BE801A88BE@cs.usfca.edu>
Message-ID: <B9FF6E8B-EEBC-4151-B94C-AE9B5CE8C7DD@LeBlanc-Engineering.com>

Are there instructions somewhere on how to build from source?

From win at wincent.com  Tue Oct 30 05:09:20 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 30 Oct 2007 13:09:20 +0100
Subject: [antlr-interest] Building the C runtime as a Universal Binary
In-Reply-To: <BAY130-DS24D96DD5398D9BED8C14586920@phx.gbl>
References: <34698C47-A3BA-4834-85C4-8C6222AE260F@wincent.com>
	<BAY130-DS24D96DD5398D9BED8C14586920@phx.gbl>
Message-ID: <1887A414-9D69-48A9-9AD0-313C1F626B7E@wincent.com>

El 30/10/2007, a las 4:47, Jim Idle escribi?:

> Yep - worked fine the last time I did it, but unless you have issues  
> keeping
> the two separate binaries, I would do that, otherwise it is a bigger  
> file
> than you really need (although only the bit you need actually loads of
> course).

Out of curiosity, how did you do it?

I'd like to cross-compile this (target PowerPC, build on Intel) but  
I'm finding that I can't even override the CFLAGS when running  
configure (the generated Makefile always sets them to "-O2",  
overriding whatever is in the environment).

I've tried various combinations similar to this:

./configure --disable-shared --host=powerpc-apple-darwin9 CFLAGS="- 
arch ppc" LDFLAGS="-arch ppc"

Cheers,
Wincent


From jaluber at gmx.de  Tue Oct 30 05:11:29 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 30 Oct 2007 13:11:29 +0100
Subject: [antlr-interest] an antlr 3.1 beta daily build
In-Reply-To: <B9FF6E8B-EEBC-4151-B94C-AE9B5CE8C7DD@LeBlanc-Engineering.com>
References: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>	<8CB9A826-B8F2-46EA-8565-0051A50B9C53@cs.usfca.edu>	<200710292106.l9TL69Nw018206@tach.newtechlaw.com>	<BAB1A389-00B8-4F9F-B616-20BE801A88BE@cs.usfca.edu>
	<B9FF6E8B-EEBC-4151-B94C-AE9B5CE8C7DD@LeBlanc-Engineering.com>
Message-ID: <47271F71.6070602@gmx.de>

Michael LeBlanc wrote:
> Are there instructions somewhere on how to build from source?
> 
There is an Ant buildfile included. You have install Ant first, for
which there are instructions on the Ant website. Afterwards you have
only to execute the buildfile.

Johannes

From thomas.jackson.iii at gmail.com  Tue Oct 30 06:06:15 2007
From: thomas.jackson.iii at gmail.com (Thomas Jackson)
Date: Tue, 30 Oct 2007 09:06:15 -0400
Subject: [antlr-interest] ANTLRWorks 1.1.4 released
In-Reply-To: <8845CDFA-8C50-4D00-9147-59A11C806140@arizona-software.ch>
References: <8437C39E-DDC7-4E7A-A8D7-E3B259E55CD5@arizona-software.ch>
	<8845CDFA-8C50-4D00-9147-59A11C806140@arizona-software.ch>
Message-ID: <47272C47.8020300@gmail.com>

Was the fix for the key bindings in 1.1.4 or is it in the next version?

Thanks
Thomas Jackson


> Hello,
> 
> I noticed that the emacs keybinding (on Mac OS X) and general key 
> bindings (like HOME/END) are not working anymore. I fixed that and will 
> be releasing a new version at the end of the day probably.
> 
> Concerning the memory leak fixes in 1.1.4, AW shouldn't need anymore the 
> 700MB of RAM to run the Java grammar. Let me know if you are still 
> experiencing out of memory error.
> 
> Regards,
> 
> Jean
> 
> On Oct 27, 2007, at 8:50 PM, Jean Bovet wrote:
> 
>> Hi,
>>
>> ANTLRWorks 1.1.4 is available and fixes the following:
>>
>> Bug fix:
>>     [AW-111] - Cannot save file with name ending with 'g'
>>     [AW-113] - Memory leak when running the debugger multiple times
>>     [AW-114] - Issue matching comment between -> and template name
>>     [AW-115] - Shift-tab sometimes takes other lines into account
>>     [AW-116] - NPE when exporting EPS/Bitmap in interpreter and debugger
>>     [AW-117] - Paste still work when file is read-only
>>     [AW-118] - Duplicate messages displayed in the console
>>     [AW-119] - Errors/warnings are not consistently reported when 
>> checking the grammar
>>
>> Improvement:
>>     [AW-110] - Ability to generate the grammar in the same directory 
>> as the grammar document
>>     [AW-112] - Ability to generate syntax diagram from a grammar file 
>> without using the GUI
>>
>> Regards,
>>
>> Jean
> 
> 

From Mike at LeBlanc-Engineering.com  Tue Oct 30 06:11:48 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Tue, 30 Oct 2007 09:11:48 -0400
Subject: [antlr-interest] an antlr 3.1 beta daily build
In-Reply-To: <47271F71.6070602@gmx.de>
References: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>	<8CB9A826-B8F2-46EA-8565-0051A50B9C53@cs.usfca.edu>	<200710292106.l9TL69Nw018206@tach.newtechlaw.com>	<BAB1A389-00B8-4F9F-B616-20BE801A88BE@cs.usfca.edu>
	<B9FF6E8B-EEBC-4151-B94C-AE9B5CE8C7DD@LeBlanc-Engineering.com>
	<47271F71.6070602@gmx.de>
Message-ID: <BB3D700A-F38F-462A-88ED-243EB24AFC18@LeBlanc-Engineering.com>


On Oct 30, 2007, at 8:11 AM, Johannes Luber wrote:

> Afterwards you have only to execute the buildfile.

I'm running ant 1.7.0 on MacOS 10.4.10 with the JAR from ANTLRworks  
1.1.4 ...

> $ ant -lib /Applications/ANTLRWorks.app/Contents/Resources/Java/ 
> antlrworks.jar
> ...
> compile:
> ...
>   [myjavac] Compiling 133 source files to /Users/mike/ 
> antlr-2007-10-29.14/build/classes
>   [myjavac] /Users/mike/antlr-2007-10-29.14/codegen/ANTLRLexer.java: 
> 61: duplicate class: org.antlr.tool.ANTLRLexer
>   [myjavac] public class ANTLRLexer extends antlr.CharScanner  
> implements ANTLRTokenTypes, TokenStream
>   [myjavac]        ^

followed by many similar errors.  Do I need an earlier JAR?  Or  
something else entirely?

From OJAY78 at gmx.de  Tue Oct 30 07:34:05 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Tue, 30 Oct 2007 15:34:05 +0100
Subject: [antlr-interest] Assign words to a variable inside a rule ????
Message-ID: <20071030143405.228760@gmx.net>

Hi,

I have a problem with assigning words to variables inside a rule. This is the function:

fillStrFunction returns[String value]
	:
	'fill' '(' source = parameter '|' ( mode='left' | mode ='right')  '|' replace = STRING_CONST '|' length = STRING_CONST ')' 
	{
		$value = FELHelper.fillStrFunction($source.value, $mode.text, $replace.text, $length.text);
	}
	;

and here is the call of my function:
fill( "678" | left | "0" | 8 ) -> "00000678"


It results in a NoViableAltException, but why? Can anyone explain me I can access such words inside a rule?

Thanks


-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

From Ramon.Verbruggen at quintiq.com  Tue Oct 30 07:46:23 2007
From: Ramon.Verbruggen at quintiq.com (Ramon Verbruggen)
Date: Tue, 30 Oct 2007 15:46:23 +0100
Subject: [antlr-interest] File comments aka. unclosed comments
Message-ID: <472751D0.BB97.0087.0@quintiq.com>

I have spent quite some time trying to figure this out, and searched the
internet extensively (including the antlr mailing list archives) but
could not find anything related, so as a last resort I am posting this
here.

I am trying to replace our current parser (ancient YACC++) with an
ANTLR generated parser and really want to maintain complete backwards
compatibility.

For reasons that are lost in time, our language (Quill) supports
unclosed comments (or comments until the end of file), so apart from the
normal (albeit nested) block comment '/* ... */', just inserting '/*' in
a code body effectively comments out the rest of the code in the file.

I currently have something like this:

Q_Comment_nested
	:	'/*' ( options {greedy=false;} : Q_Comment_nested | .)*
'*/' {$channel=HIDDEN;}
	;

Q_Unclosed_comment
	:	'/*' ( options {greedy=false;} : ~'*/')* EOF
{$channel=HIDDEN;}
	;

The above (obviously) reports an unreachable alternative and a
recursive overflow because the unclosed comment matches anything that
the nested comment matches as well.

I have tried many different solutions like:

Q_Comment_nested
	:	'/*' ( options {greedy=false;} : Q_Comment_nested | .)*
( '*/' | EOF) {$channel=HIDDEN;}
	;

or:

Q_Comment_nested
	:	'/*' ( options {greedy=false;} : (~'*/'))* '*/'?
{$channel=HIDDEN;}
	;

Whatever I tried, I just cannot seem to get it right!

I am open to suggestions ( I know, 'comments are ugly', 'use source
control or ifdef instead of comments' etc., but this should be possible,
right?!)

Ramon Verbruggen

Join Quintessence 07 - the annual global Quintiq conference on November
20th! www.quintiq.com/quintessence


This message contains information that may be privileged or confidential
and is the property of Quintiq. It is only intended for the person to
whom it is addressed. If you are not the intended recipient, you are not
authorized to read, print, retain, copy, disseminate, distribute or use
this message or any part thereof. If you have received this message in
error, please notify the sender immediately and delete all copies of
this message. Please note that e-mails are susceptible to change,
therefore they are not binding.

From relationalalgebra at gmail.com  Tue Oct 30 07:48:40 2007
From: relationalalgebra at gmail.com (G R)
Date: Tue, 30 Oct 2007 15:48:40 +0100
Subject: [antlr-interest] Problems with StringTemplate within TreeGrammar
In-Reply-To: <F7550D08-3571-47C9-97AE-4AA58419FC65@cs.usfca.edu>
References: <2ea6ad20710290558s53a2e99el91a2fc647a3fa308@mail.gmail.com>
	<F7550D08-3571-47C9-97AE-4AA58419FC65@cs.usfca.edu>
Message-ID: <2ea6ad20710300748v6dc6f8ffm162bf0f2ec64832d@mail.gmail.com>

I understand my problem, thanks for the help, but how could i avoid using
optional node?

I'm trying a lots of different way to generate my AST (using the rewriting
rules to copy it in my tree grammar), but i can't find any solution using
the rewriting mechanism.
I'm really stuck with this, if someone could help, i'll bought him a beer :)
More seriously, I'm on this problem for about 2 days, and I really
appreciate any help.

G. Rayot

2007/10/29, Terence Parr <parrt at cs.usfca.edu>:
>
>
> On Oct 29, 2007, at 5:58 AM, G R wrote:
>
> Use ANTLRWorks to step thru your grammar.  You'll find that your
> grammar for tree doesn't match the tree.  Also note that you should
> probably not use Root? style trees in your grammar.
>
> Ter
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071030/3da544c7/attachment.html 

From timo.dufour at thomson.com  Tue Oct 30 07:59:45 2007
From: timo.dufour at thomson.com (timo.dufour at thomson.com)
Date: Tue, 30 Oct 2007 15:59:45 +0100
Subject: [antlr-interest] parsing file with token '\u0096' in it
Message-ID: <3D28EBDA36A6E6469582A86D3B5B639C01F52478@tlrbeantmbx02.ERF.THOMSON.COM>

I'm currently writing a parser in ANTLR3 that has to be able to parse
files containing the character '\u0096'. I added this to a token-rule,
but the lexer doesn't match it. When I debugged the lexer, I noticed it
recognizes the token and represents it as '8211', which is the tokens
ascii-code notation. But it doesn't get matched with the rule where it
checks if it equals '\u0096'. Is there a better way to handle this
token, for instance, not using the Unicode notation, but some other
notation, so it matches '8211'?

 

SPECIAL_CHAR:

            '\u0096'

;

 

parts from generated lexer code:

            int LA_6 = input.LA(1);

            ...

            if (LA_6 == '\u0096'){

                        ...

            }

 

Timo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071030/93e7b9dd/attachment.html 

From relationalalgebra at gmail.com  Tue Oct 30 08:08:00 2007
From: relationalalgebra at gmail.com (G R)
Date: Tue, 30 Oct 2007 16:08:00 +0100
Subject: [antlr-interest] parsing file with token '\u0096' in it
In-Reply-To: <3D28EBDA36A6E6469582A86D3B5B639C01F52478@tlrbeantmbx02.ERF.THOMSON.COM>
References: <3D28EBDA36A6E6469582A86D3B5B639C01F52478@tlrbeantmbx02.ERF.THOMSON.COM>
Message-ID: <2ea6ad20710300808r1f6c2e7didee51e3a1f4a4d8@mail.gmail.com>

You should escape your unicode char like this :

SPECIAL_CHAR:

            '\\u0096'

;


then the code generate should looks like this :

            int _type = Select;
            {
            match("\\u03c3");
            }
...


2007/10/30, timo.dufour at thomson.com <timo.dufour at thomson.com>:
>
>  I'm currently writing a parser in ANTLR3 that has to be able to parse
> files containing the character '\u0096'. I added this to a token-rule, but
> the lexer doesn't match it. When I debugged the lexer, I noticed it
> recognizes the token and represents it as '8211', which is the tokens
> ascii-code notation. But it doesn't get matched with the rule where it
> checks if it equals '\u0096'. Is there a better way to handle this token,
> for instance, not using the Unicode notation, but some other notation, so it
> matches '8211'?
>
>
>
> SPECIAL_CHAR:
>
>             '\u0096'
>
> ;
>
>
>
> parts from generated lexer code:
>
>             int LA_6 = input.LA(1);
>
>             ?
>
>             if (LA_6 == '\u0096'){
>
>                         ?
>
>             }
>
>
>
> Timo
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071030/daa459a0/attachment.html 

From Mike at LeBlanc-Engineering.com  Tue Oct 30 08:30:41 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Tue, 30 Oct 2007 11:30:41 -0400
Subject: [antlr-interest] Assign words to a variable inside a rule ????
In-Reply-To: <20071030143405.228760@gmx.net>
References: <20071030143405.228760@gmx.net>
Message-ID: <8E32345B-2222-4DD8-8D82-A4CA82B85AFE@LeBlanc-Engineering.com>


On Oct 30, 2007, at 10:34 AM, OJAY78 at gmx.de wrote:

> 	'fill' '(' source = parameter '|' ( mode='left' | mode ='right')   
> '|' replace = STRING_CONST '|' length = STRING_CONST ')'

If you really have spaces before or after = in your element labels,  
remove them and try again.

From OJAY78 at gmx.de  Tue Oct 30 08:59:09 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Tue, 30 Oct 2007 16:59:09 +0100
Subject: [antlr-interest] Assign words to a variable inside a rule ????
Message-ID: <20071030155909.228780@gmx.net>

Hi,

I tried it without spaces with the same result.

How can I solve this problem, because I have a few rules which does not work because of this issue.

Thanks
-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger

From peames at nexagent.com  Tue Oct 30 09:02:42 2007
From: peames at nexagent.com (Paul Eames)
Date: Tue, 30 Oct 2007 16:02:42 -0000
Subject: [antlr-interest] Hoisting of a disambiguating semantic predicates
Message-ID: <B2B4D3618441D941B811329A672FD64E04EBF0B1@THHS2EXBE2X.hostedservice2.net>

Hi all,
 
I am using semantic predicates to disambiguate two syntactically
identical rules as follows:
 
foo : 
(
    {isFoo(input.LT(1))}?
    x+=THING
)+ ;
 
bar : 
(
    {isBar(input.LT(1))}?
    x+=THING
)+ ;
 
This is fine until I start using these rules in other rules like the
following:
 
a : foo bar | foo (bar foo)+;
 
The generated disabiguating check code in rule "a" hoists the semantic
predicate out of foo which is not sufficient to disambiguate and so this
rule will always take the first alternative.
 
Generated code snippet:
...
if ( (isFoo(input.LT(1)) ) {
    alt5=1;
}
else if ( (isFoo(input.LT(1)) ) {
    alt5=2;
}
else {
    NoViableAltException nvae =
        new NoViableAltException("203:1: a: ( ( foo bar ) | ( foo ( bar
foo ) )+ );", 5, 4, input);
    throw nvae;
}
...
 
Is there a cunning grammar design decision that I can take to avoid this
problem?
 
Many thanks,
Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071030/3d95fe56/attachment.html 

From Mike at LeBlanc-Engineering.com  Tue Oct 30 09:14:27 2007
From: Mike at LeBlanc-Engineering.com (Michael LeBlanc)
Date: Tue, 30 Oct 2007 12:14:27 -0400
Subject: [antlr-interest] Assign words to a variable inside a rule ????
In-Reply-To: <20071030155909.228780@gmx.net>
References: <20071030155909.228780@gmx.net>
Message-ID: <6428B780-1A9E-4072-AD32-84B01FE54ED2@LeBlanc-Engineering.com>

What is your lexer rule for STRING_CONST?  Will it accept the number  
8 as in your example?

From jbb at acm.org  Tue Oct 30 09:19:11 2007
From: jbb at acm.org (John B. Brodie)
Date: Tue, 30 Oct 2007 12:19:11 -0400
Subject: [antlr-interest] Assign words to a variable inside a rule ????
In-Reply-To: <20071030143405.228760@gmx.net> (OJAY78@gmx.de)
References: <20071030143405.228760@gmx.net>
Message-ID: <E1Imto6-0005qf-Un@gecko.home.org>

Greetings!

OJAY78 wrote:
>I have a problem with assigning words to variables inside a rule. This is the function:
>
>fillStrFunction returns[String value]
>	:
>	'fill' '(' source = parameter '|' ( mode='left' | mode ='right')  '|' replace = STRING_CONST '|' length = STRING_CONST ')' 
>	{
>		$value = FELHelper.fillStrFunction($source.value, $mode.text, $replace.text, $length.text);
>	}
>	;
>
>and here is the call of my function:
>fill( "678" | left | "0" | 8 ) -> "00000678"
...........................^^^---should this be in quotes.
>
>
>It results in a NoViableAltException, but why? Can anyone explain me
>I can access such words inside a rule?
>


I do not know what the rule for STRING_CONST looks like, but if it is
meant to be like its name e.g. to recognize a quoted sequence of
characters; then maybe the 4th item in your call has the wrong syntax?

As far as I know, NoViableAltException is raised when you actually try
to execute your generated parser.  While issues with rule labels
should arise when running the org.antlr.Tool.

When does the NoViableAltException happen?

Your fillStrFunction rule above looks okay to me; did not try running it
through the org.antlr.Tool though... (assuming the call to
FELHelper.fillStrFunction is proper, which ANTLR can't check)

   -jbb

From jimi at temporal-wave.com  Tue Oct 30 09:47:59 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 30 Oct 2007 09:47:59 -0700
Subject: [antlr-interest] Status of C++ backend?
In-Reply-To: <A13056D6-1000-49AD-83B9-715D8B50BC93@classdump.org>
References: <8475348F-4A05-4126-B1D9-0058FF5E15FF@latencyzero.com>
	<A13056D6-1000-49AD-83B9-715D8B50BC93@classdump.org>
Message-ID: <BAY130-DS24DA0019F3DBFD800625286920@phx.gbl>

I have made a tentative start now, but I have been busy working for a while
unfortunately. I hope to be back on it next week sometime. The C target has
worked fine for most people that initially wanted C++ back ends, though
eventually it will be better to have C++ based actions of course.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kay R?pke
> Sent: Tuesday, October 30, 2007 12:41 AM
> To: Rick Mann
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Status of C++ backend?
> 
> 
> On Oct 13, 2007, at 2:25 AM, Rick Mann wrote:
> 
> > Just curious if there was any work on this, or if I should do my
> > own. I didn't see anything in the current sources...
> 
> Hi Rick!
> 
> I don't think anyone has really taken over Ric's work/position yet.
> Jim said he had plans to do so, but I guess he's busy.
> Eventually I need to do custom C++ runtimes for at least two projects
> I have in the queue, though both are rather low priority for me.
> Also, I need to update the ObjC runtime, since I way behind at the
> moment :(
> 
> In case you want to get started, I'd be happy to help out a bit. Just
> give me a ring by mail or chat.
> 
> cheers,
> -k


From jimi at temporal-wave.com  Tue Oct 30 09:51:27 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 30 Oct 2007 09:51:27 -0700
Subject: [antlr-interest] Building the C runtime as a Universal Binary
In-Reply-To: <1887A414-9D69-48A9-9AD0-313C1F626B7E@wincent.com>
References: <34698C47-A3BA-4834-85C4-8C6222AE260F@wincent.com>
	<BAY130-DS24D96DD5398D9BED8C14586920@phx.gbl>
	<1887A414-9D69-48A9-9AD0-313C1F626B7E@wincent.com>
Message-ID: <BAY130-DS337D721B19CCACD6CCD0986920@phx.gbl>

I had configure initially build universal binaries, but then they did not
seem that useful. Configure is a bit of a nightmare in that it makes
assumptions about C related flags that are not always good. I believe that
my scripts may interfere with CFLAGS from the environment as they stand, but
you should be able to work out what to do by looking at the automake source
scripts I should think. However, generally I would say that it is better to
build for the target to be honest.

Jim

> -----Original Message-----
> From: Wincent Colaiuta [mailto:win at wincent.com]
> Sent: Tuesday, October 30, 2007 5:09 AM
> To: Jim Idle
> Cc: 'Antlr Interest'
> Subject: Re: [antlr-interest] Building the C runtime as a Universal
> Binary
> 
> El 30/10/2007, a las 4:47, Jim Idle escribi?:
> 
> > Yep - worked fine the last time I did it, but unless you have issues
> > keeping
> > the two separate binaries, I would do that, otherwise it is a bigger
> > file
> > than you really need (although only the bit you need actually loads
> of
> > course).
> 
> Out of curiosity, how did you do it?
> 
> I'd like to cross-compile this (target PowerPC, build on Intel) but
> I'm finding that I can't even override the CFLAGS when running
> configure (the generated Makefile always sets them to "-O2",
> overriding whatever is in the environment).
> 
> I've tried various combinations similar to this:
> 
> ./configure --disable-shared --host=powerpc-apple-darwin9 CFLAGS="-
> arch ppc" LDFLAGS="-arch ppc"
> 
> Cheers,
> Wincent



From jimi at temporal-wave.com  Tue Oct 30 10:03:04 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 30 Oct 2007 10:03:04 -0700
Subject: [antlr-interest] File comments aka. unclosed comments
In-Reply-To: <472751D0.BB97.0087.0@quintiq.com>
References: <472751D0.BB97.0087.0@quintiq.com>
Message-ID: <BAY130-DS2643189247708AA984E4186920@phx.gbl>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Ramon Verbruggen
> Sent: Tuesday, October 30, 2007 7:46 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] File comments aka. unclosed comments
> 
> I have spent quite some time trying to figure this out, and searched
> the
> internet extensively (including the antlr mailing list archives) but
> could not find anything related, so as a last resort I am posting this
> here.

I think I have posted this before, but I couldn't find I in serach either
;-).

Here is a lexer construct that deals with embedded /* comments (in this case
for T-SQL but the principle is exactly the same of course). Note that this
rule does not check for missing trailing '*/' explicitly, though it could be
made to do that. I will leave that as an exercise though :-)

// A multiline comment is akin to a C style comment and is bounded
// by /* and */. However the T-SQL lexer allows for, and checks
// embedded comments. See how here we use a fragment rule to define
// the lexical construct, as this does not try to create tokens and
// hence can be called recursively by itself. The actual token making
// rule here then, just calls that fragment rule.
//
ML_COMMENT
	:	ML_COMFRAG
		{
			$channel = HIDDEN;
		}
	;
	
///////////////////////////////////////////////////////////////////////
// This rule is a fragment so that it can call itself recursively
// and deal with multiple embedded comments.
//
fragment	ML_COMFRAG
		:
			'/*' ( options { greedy=false;}
			
					// The predicate looks for the start
of an embedded comment
					// and this triggers a recursive
call of this rule
					// and therefore automatically
matches /* and */ pairs.
					//
					: {(input.LA(1)== '/' && input.LA(2)
== '*')}? ML_COMFRAG 
					| .
				  )* 
					'*/'
		;


Jim


From jimi at temporal-wave.com  Tue Oct 30 10:17:32 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 30 Oct 2007 10:17:32 -0700
Subject: [antlr-interest] Hoisting of a disambiguating semantic
	predicates
In-Reply-To: <B2B4D3618441D941B811329A672FD64E04EBF0B1@THHS2EXBE2X.hostedservice2.net>
References: <B2B4D3618441D941B811329A672FD64E04EBF0B1@THHS2EXBE2X.hostedservice2.net>
Message-ID: <BAY130-DS33202AA030B2B30DD258E86920@phx.gbl>

It seems to me that you are possibly trying to encode a semantic decision in
the syntactical makeup of foo and bar and also expression the grammar
ambiguously whether you can distinguish foo from bar anyway (as in even if
you didn't need the predicates). It depends on what you are trying to
distinguish,  but would your case not simplify to:

 

foo bar ( foo ( bar foo)*)?

 

Then, knowing what sequence you actually found, you could rewrite the
appropriate unambiguous tree.

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Paul Eames
Sent: Tuesday, October 30, 2007 9:03 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Hoisting of a disambiguating semantic predicates

 

Hi all,

 

I am using semantic predicates to disambiguate two syntactically identical
rules as follows:

 

foo : 

(

    {isFoo(input.LT(1))}?

    x+=THING

)+ ;

 

bar : 

(

    {isBar(input.LT(1))}?

    x+=THING

)+ ;

 

This is fine until I start using these rules in other rules like the
following:

 

a : foo bar | foo (bar foo)+;

 

The generated disabiguating check code in rule "a" hoists the semantic
predicate out of foo which is not sufficient to disambiguate and so this
rule will always take the first alternative.

 

Generated code snippet:

...

if ( (isFoo(input.LT(1)) ) {
    alt5=1;
}
else if ( (isFoo(input.LT(1)) ) {
    alt5=2;

}
else {
    NoViableAltException nvae =
        new NoViableAltException("203:1: a: ( ( foo bar ) | ( foo ( bar foo
) )+ );", 5, 4, input);

    throw nvae;
}

...

 

Is there a cunning grammar design decision that I can take to avoid this
problem?

 

Many thanks,

Paul.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071030/4f43623f/attachment-0001.html 

From peames at nexagent.com  Tue Oct 30 10:19:31 2007
From: peames at nexagent.com (Paul Eames)
Date: Tue, 30 Oct 2007 17:19:31 -0000
Subject: [antlr-interest] Hoisting of a disambiguating semantic
	predicates
Message-ID: <B2B4D3618441D941B811329A672FD64E04EBF11B@THHS2EXBE2X.hostedservice2.net>

By the way, I know that in this simple example I could recast rule "a"
to not use alternatives and rather write it as:
 
a: foo bar (foo (bar foo)*)?
 
... but I have more complex rules where this approach becomes
increasingly unclear.
 
I wish I was working on something less ambiguous :-)

________________________________

From: Paul Eames 
Sent: 30 October 2007 16:03
To: 'antlr-interest at antlr.org'
Subject: Hoisting of a disambiguating semantic predicates


Hi all,
 
I am using semantic predicates to disambiguate two syntactically
identical rules as follows:
 
foo : 
(
    {isFoo(input.LT(1))}?
    x+=THING
)+ ;
 
bar : 
(
    {isBar(input.LT(1))}?
    x+=THING
)+ ;
 
This is fine until I start using these rules in other rules like the
following:
 
a : foo bar | foo (bar foo)+;
 
The generated disabiguating check code in rule "a" hoists the semantic
predicate out of foo which is not sufficient to disambiguate and so this
rule will always take the first alternative.
 
Generated code snippet:
...
if ( (isFoo(input.LT(1)) ) {
    alt5=1;
}
else if ( (isFoo(input.LT(1)) ) {
    alt5=2;
}
else {
    NoViableAltException nvae =
        new NoViableAltException("203:1: a: ( ( foo bar ) | ( foo ( bar
foo ) )+ );", 5, 4, input);
    throw nvae;
}
...
 
Is there a cunning grammar design decision that I can take to avoid this
problem?
 
Many thanks,
Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071030/922c2ff7/attachment.html 

From john.ridgway at trincoll.edu  Tue Oct 30 10:29:50 2007
From: john.ridgway at trincoll.edu (John Ridgway)
Date: Tue, 30 Oct 2007 13:29:50 -0400
Subject: [antlr-interest] an antlr 3.1 beta daily build
In-Reply-To: <BB3D700A-F38F-462A-88ED-243EB24AFC18@LeBlanc-Engineering.com>
References: <884A857B-A381-4EA2-AB5B-C6926AE49A8C@LeBlanc-Engineering.com>	<8CB9A826-B8F2-46EA-8565-0051A50B9C53@cs.usfca.edu>	<200710292106.l9TL69Nw018206@tach.newtechlaw.com>	<BAB1A389-00B8-4F9F-B616-20BE801A88BE@cs.usfca.edu>
	<B9FF6E8B-EEBC-4151-B94C-AE9B5CE8C7DD@LeBlanc-Engineering.com>
	<47271F71.6070602@gmx.de>
	<BB3D700A-F38F-462A-88ED-243EB24AFC18@LeBlanc-Engineering.com>
Message-ID: <4E45B28D-5291-4920-9687-4D4E7EB7902C@trincoll.edu>

Unfortunately, the last time I looked, the source was distributed  
with some extraneous files.  If you look in codegen you'll see a  
number of generated files.  They are duplicated in the src tree, and  
you need to remove them from the SRC TREE (not from codegen).  As of  
3.0.1 this meant:

   rm src/org/antlr/tool/ANTLRLexer.java
   rm src/org/antlr/tool/ANTLRParser.java
   rm src/org/antlr/tool/ANTLRTokenTypes.java
   rm src/org/antlr/tool/ANTLRTreePrinter.java
   rm src/org/antlr/tool/ANTLRTreePrinterTokenTypes.java
   rm src/org/antlr/tool/AssignTokenTypesWalker.java
   rm src/org/antlr/tool/AssignTokenTypesWalkerTokenTypes.java
   rm src/org/antlr/codegen/CodeGenTreeWalker.java
   rm src/org/antlr/codegen/CodeGenTreeWalkerTokenTypes.java
   rm src/org/antlr/tool/DefineGrammarItemsWalker.java
   rm src/org/antlr/tool/DefineGrammarItemsWalkerTokenTypes.java
   rm src/org/antlr/tool/TreeToNFAConverter.java
   rm src/org/antlr/tool/TreeToNFAConverterTokenTypes.java

I'd start with that and see where that gets you.

Peace
- John

P.S.  See the fink package info for antlr3...  You can probably  
modify it slightly to use the latest version.  (Of course, if you  
don't use fink this won't help much. :-))



On Oct 30, 2007, at 9:11 AM, Michael LeBlanc wrote:

>
> On Oct 30, 2007, at 8:11 AM, Johannes Luber wrote:
>
>> Afterwards you have only to execute the buildfile.
>
> I'm running ant 1.7.0 on MacOS 10.4.10 with the JAR from ANTLRworks  
> 1.1.4 ...
>
>> $ ant -lib /Applications/ANTLRWorks.app/Contents/Resources/Java/ 
>> antlrworks.jar
>> ...
>> compile:
>> ...
>>   [myjavac] Compiling 133 source files to /Users/mike/ 
>> antlr-2007-10-29.14/build/classes
>>   [myjavac] /Users/mike/antlr-2007-10-29.14/codegen/ 
>> ANTLRLexer.java:61: duplicate class: org.antlr.tool.ANTLRLexer
>>   [myjavac] public class ANTLRLexer extends antlr.CharScanner  
>> implements ANTLRTokenTypes, TokenStream
>>   [myjavac]        ^
>
> followed by many similar errors.  Do I need an earlier JAR?  Or  
> something else entirely?


From peames at nexagent.com  Tue Oct 30 10:32:25 2007
From: peames at nexagent.com (Paul Eames)
Date: Tue, 30 Oct 2007 17:32:25 -0000
Subject: [antlr-interest] Hoisting of a disambiguating semantic
	predicates
In-Reply-To: <mailman.2665.1193764651.2534.antlr-interest@antlr.org>
Message-ID: <B2B4D3618441D941B811329A672FD64E04EBF133@THHS2EXBE2X.hostedservice2.net>

Thanks for the response Jim.

I think this is the route I'm going to have to take - it's a little bit
of a shame though as I was hoping for my grammar file to read like a DSL
which I could use to communicate with the business guys. Oh well... 

Thanks again for the quick response!
Paul.

From easjolly at ix.netcom.com  Tue Oct 30 11:15:32 2007
From: easjolly at ix.netcom.com (Susan Jolly)
Date: Tue, 30 Oct 2007 11:15:32 -0700
Subject: [antlr-interest] Hoisting of a disambiguating semantic predicates
Message-ID: <E1Imvbm-0006Kh-85@elasmtp-mealy.atl.sa.earthlink.net>

I haven't tried this but would it help if your tests were {isFoo(...)}? and
{!isFoo(...)} so the ANTLR generator could see the disjunction?

-S



From win at wincent.com  Tue Oct 30 11:14:43 2007
From: win at wincent.com (Wincent Colaiuta)
Date: Tue, 30 Oct 2007 19:14:43 +0100
Subject: [antlr-interest] Building the C runtime as a Universal Binary
In-Reply-To: <BAY130-DS337D721B19CCACD6CCD0986920@phx.gbl>
References: <34698C47-A3BA-4834-85C4-8C6222AE260F@wincent.com>
	<BAY130-DS24D96DD5398D9BED8C14586920@phx.gbl>
	<1887A414-9D69-48A9-9AD0-313C1F626B7E@wincent.com>
	<BAY130-DS337D721B19CCACD6CCD0986920@phx.gbl>
Message-ID: <C9C63F76-F275-436F-B248-4B967895D3EA@wincent.com>

El 30/10/2007, a las 17:51, Jim Idle escribi?:

> I had configure initially build universal binaries, but then they  
> did not
> seem that useful.

Well, if you have to ship a product to customers running Mac OS X then  
they're incredibly useful, because they allow your product to run on  
either Intel or PowerPC hardware with no intervention required from  
the user. All shipping Apple machines nowadays have Intel processors,  
but there are still millions of users out there still on the PowerPC  
platform, and both groups are accustomed to being able to download a  
universal binary and run it on either architecture.

> Configure is a bit of a nightmare in that it makes
> assumptions about C related flags that are not always good. I  
> believe that
> my scripts may interfere with CFLAGS from the environment as they  
> stand, but
> you should be able to work out what to do by looking at the automake  
> source
> scripts I should think.

I'll take a look.

> However, generally I would say that it is better to
> build for the target to be honest.

In this case, luckily, I don't actually need to ship the built product  
to customers, so this isn't a deal breaker (this is a server-side  
build-from-source thing anyway).

The reason why I looked into this is that Leopard just shipped and  
some things which didn't use to be universal now are, and when you try  
to link to the ANTLR runtime this now fails unless you do some special  
architecture-specific setup beforehand. So I have a functioning  
workaround already, but I wanted to explore the universal binary angle  
as an alternative.

No big deal, though, because like I said I already have a workaround.  
Short of hacking the configure to allow cross-compilation it seems the  
only way to a proper universal binary build of the runtime is to build  
it twice on two different machines, then "lipo" the two products into  
a single file, and that's just not practical.

Cheers,
Wincent



From Austin_Hastings at Yahoo.com  Tue Oct 30 09:11:05 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 30 Oct 2007 12:11:05 -0400
Subject: [antlr-interest] Assign words to a variable inside a rule ????
In-Reply-To: <20071030143405.228760@gmx.net>
References: <20071030143405.228760@gmx.net>
Message-ID: <47275799.1020502@Yahoo.com>

The last argument, length, is supposed to be a STRING_CONST. Maybe you 
need to say ... | "0" | "8" ) -- note quotes around 8?

=Austin

OJAY78 at gmx.de wrote:
> Hi,
>
> I have a problem with assigning words to variables inside a rule. This is the function:
>
> fillStrFunction returns[String value]
> 	:
> 	'fill' '(' source = parameter '|' ( mode='left' | mode ='right')  '|' replace = STRING_CONST '|' length = STRING_CONST ')' 
> 	{
> 		$value = FELHelper.fillStrFunction($source.value, $mode.text, $replace.text, $length.text);
> 	}
> 	;
>
> and here is the call of my function:
> fill( "678" | left | "0" | 8 ) -> "00000678"
>
>
> It results in a NoViableAltException, but why? Can anyone explain me I can access such words inside a rule?
>
> Thanks
>
>
>   


From Thomas_Krebs at gmx.de  Tue Oct 30 12:47:46 2007
From: Thomas_Krebs at gmx.de (Thomas Krebs)
Date: Tue, 30 Oct 2007 20:47:46 +0100
Subject: [antlr-interest] Status of C++ backend?
In-Reply-To: <BAY130-DS24DA0019F3DBFD800625286920@phx.gbl>
References: <8475348F-4A05-4126-B1D9-0058FF5E15FF@latencyzero.com>	<A13056D6-1000-49AD-83B9-715D8B50BC93@classdump.org>
	<BAY130-DS24DA0019F3DBFD800625286920@phx.gbl>
Message-ID: <47278A62.7090803@gmx.de>

Jim Idle schrieb:
> I have made a tentative start now, but I have been busy working for a while
> unfortunately. I hope to be back on it next week sometime. The C target has
> worked fine for most people that initially wanted C++ back ends, though
> eventually it will be better to have C++ based actions of course.
> 

If there are alpha/beta testers or code reviewers needed, I would like
to volunteer.
I will have to convert my v2 parsers and might give some feedback...

Thomas


From Austin_Hastings at Yahoo.com  Tue Oct 30 09:28:45 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 30 Oct 2007 12:28:45 -0400
Subject: [antlr-interest] File comments aka. unclosed comments
In-Reply-To: <472751D0.BB97.0087.0@quintiq.com>
References: <472751D0.BB97.0087.0@quintiq.com>
Message-ID: <47275BBD.6030402@Yahoo.com>

Ramon,

If you check the recent discussions on this list, you'll find that once 
the lexer commits to a path
(closed or unclosed comment, in this case) it will not backtrack and try 
the other - instead, it will
throw an exception if it cannot match.

I think you'd do well to go with your standard "closed comment" and either:

1. Match EOF as a valid comment-end-delimiter, in addition to '*/'; or

2. Match only '*/' at the end, but modify the code (either manually, or 
using the catch mechanism built in to ANTLR to catch the exception 
thrown when EOF fails to match a closed comment.

=Austin


Ramon Verbruggen wrote:
> I have spent quite some time trying to figure this out, and searched the
> internet extensively (including the antlr mailing list archives) but
> could not find anything related, so as a last resort I am posting this
> here.
>
> I am trying to replace our current parser (ancient YACC++) with an
> ANTLR generated parser and really want to maintain complete backwards
> compatibility.
>
> For reasons that are lost in time, our language (Quill) supports
> unclosed comments (or comments until the end of file), so apart from the
> normal (albeit nested) block comment '/* ... */', just inserting '/*' in
> a code body effectively comments out the rest of the code in the file.
>
> I currently have something like this:
>
> Q_Comment_nested
> 	:	'/*' ( options {greedy=false;} : Q_Comment_nested | .)*
> '*/' {$channel=HIDDEN;}
> 	;
>
> Q_Unclosed_comment
> 	:	'/*' ( options {greedy=false;} : ~'*/')* EOF
> {$channel=HIDDEN;}
> 	;
>
> The above (obviously) reports an unreachable alternative and a
> recursive overflow because the unclosed comment matches anything that
> the nested comment matches as well.
>
> I have tried many different solutions like:
>
> Q_Comment_nested
> 	:	'/*' ( options {greedy=false;} : Q_Comment_nested | .)*
> ( '*/' | EOF) {$channel=HIDDEN;}
> 	;
>
> or:
>
> Q_Comment_nested
> 	:	'/*' ( options {greedy=false;} : (~'*/'))* '*/'?
> {$channel=HIDDEN;}
> 	;
>
> Whatever I tried, I just cannot seem to get it right!
>
> I am open to suggestions ( I know, 'comments are ugly', 'use source
> control or ifdef instead of comments' etc., but this should be possible,
> right?!)
>
> Ramon Verbruggen
>
> Join Quintessence 07 - the annual global Quintiq conference on November
> 20th! www.quintiq.com/quintessence
>
>
> This message contains information that may be privileged or confidential
> and is the property of Quintiq. It is only intended for the person to
> whom it is addressed. If you are not the intended recipient, you are not
> authorized to read, print, retain, copy, disseminate, distribute or use
> this message or any part thereof. If you have received this message in
> error, please notify the sender immediately and delete all copies of
> this message. Please note that e-mails are susceptible to change,
> therefore they are not binding.
>
>
>   


From mb.fgel at ownit.nu  Tue Oct 30 15:02:46 2007
From: mb.fgel at ownit.nu (Mats Behre)
Date: Tue, 30 Oct 2007 23:02:46 +0100
Subject: [antlr-interest] labels and return types - multiple elements
	sharing label name
Message-ID: <4727AA06.9060905@ownit.nu>

Hi,

More questions...

When I read 'Migrating from ANTLR 2 to ANTLR 3' I was soo happy to see that I can now have multiple elements sharing the same label name, so I removed all my temporary variables.
However, this seems to be true only when the label is set on a token, not when it is set on a parser rule, because all parser rules get their own return types. The reason for this is probably to support multiple return values.
In my case I know that all the return types are identical, so is there a way to specify which return type ANTLR should
generate for a rule? (Note: I'm talking of Java return types here, not return types within the grammar. This can be a bit confusing...)
If that's not possible, is there a way to set the type of the label to ParserRuleReturnScope (and thus be a legal variable for all the return types, as they all extend ParserRuleReturnScope), which would work just as well in my scenario?
Or, will I have to reintroduce all my temporary variables? :-( 
(When I started, the labeled elements were indeed tokens, but I had too many such tokens (keywords), so I had to move them to the parser, and in all other aspects I think that was a good move.)

(I found a similar question in the archive, but there was no reply, so I try again.)

Rgds,
Mats

From antlr-list at arizona-software.ch  Tue Oct 30 19:51:52 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Tue, 30 Oct 2007 19:51:52 -0700
Subject: [antlr-interest] ANTLRWorks 1.1.4 released
In-Reply-To: <47272C47.8020300@gmail.com>
References: <8437C39E-DDC7-4E7A-A8D7-E3B259E55CD5@arizona-software.ch>
	<8845CDFA-8C50-4D00-9147-59A11C806140@arizona-software.ch>
	<47272C47.8020300@gmail.com>
Message-ID: <AD74D1F8-8B2D-4100-942A-C2A3065D42BD@arizona-software.ch>

Actually, you can download the current 1.1.4 that has the fix in it  
(yes, I know, but I didn't have time to release a 1.1.5 just for that).

Regards,

Jean

On Oct 30, 2007, at 6:06 AM, Thomas Jackson wrote:

> Was the fix for the key bindings in 1.1.4 or is it in the next  
> version?
>
> Thanks
> Thomas Jackson
>
>
>> Hello,
>> I noticed that the emacs keybinding (on Mac OS X) and general key  
>> bindings (like HOME/END) are not working anymore. I fixed that and  
>> will be releasing a new version at the end of the day probably.
>> Concerning the memory leak fixes in 1.1.4, AW shouldn't need  
>> anymore the 700MB of RAM to run the Java grammar. Let me know if  
>> you are still experiencing out of memory error.
>> Regards,
>> Jean
>> On Oct 27, 2007, at 8:50 PM, Jean Bovet wrote:
>>> Hi,
>>>
>>> ANTLRWorks 1.1.4 is available and fixes the following:
>>>
>>> Bug fix:
>>>     [AW-111] - Cannot save file with name ending with 'g'
>>>     [AW-113] - Memory leak when running the debugger multiple times
>>>     [AW-114] - Issue matching comment between -> and template name
>>>     [AW-115] - Shift-tab sometimes takes other lines into account
>>>     [AW-116] - NPE when exporting EPS/Bitmap in interpreter and  
>>> debugger
>>>     [AW-117] - Paste still work when file is read-only
>>>     [AW-118] - Duplicate messages displayed in the console
>>>     [AW-119] - Errors/warnings are not consistently reported when  
>>> checking the grammar
>>>
>>> Improvement:
>>>     [AW-110] - Ability to generate the grammar in the same  
>>> directory as the grammar document
>>>     [AW-112] - Ability to generate syntax diagram from a grammar  
>>> file without using the GUI
>>>
>>> Regards,
>>>
>>> Jean


From clifford.heath at gmail.com  Wed Oct 31 00:00:42 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Wed, 31 Oct 2007 18:00:42 +1100
Subject: [antlr-interest] Puzzle, and solution.
Message-ID: <fg996s$uno$1@ger.gmane.org>

Something that's puzzled me when using ANTLRWorks to debug grammars
is that sometimes when running a rule in the interpreter, the parse
tree ends in "No viable alternative" when fed input that should match,
just because of the existence of rules that aren't activated.

As an example, I have an expression grammar that works just fine by
itself. When I include it in a larger grammar, which uses expressions
only in certain contexts, the same expression that parsed fine now
won't parse... until I add a token that *could* follow an expression.

The expression rule then matches, and of course doesn't consume the
extra token. It seems that the expression rule only matches the
current input if, when looking ahead, the next token (or EOF) is a
valid next token. The added token may be any token that is a valid
successor to an expression in any rule of the larger grammar, even
if that rule can't be called!

When you enter an expression to test the behaviour of an "expression"
rule in the interpreter, you need to either add a plausible next
token to the end, or add a rule like this:

junk: expression EOF;

and then any valid expression will parse without adding a token,
because there's an implicit EOF at the end of what you entered...
even though the rule "junk" never gets called anywhere in the wider
grammar.

Just a trap I thought I might be able to help someone else avoid.
I'm sure it's expected behaviour, but it's a bit non-intuitive at
first.

Clifford Heath.


From mb.fgel at ownit.nu  Wed Oct 31 01:29:56 2007
From: mb.fgel at ownit.nu (Mats Behre)
Date: Wed, 31 Oct 2007 09:29:56 +0100
Subject: [antlr-interest] Followup: labels and return types - multiple
 elements sharing label name
In-Reply-To: <4727AA06.9060905@ownit.nu>
References: <4727AA06.9060905@ownit.nu>
Message-ID: <47283D04.10907@ownit.nu>

After thinking a bit more about it, I think the ideal solution would be if all rules not adding any return values got the same return type.
To take it even further, all rules adding the same set of return values could also get one return type (preferably a subclass of the valueless one).
That would probably be more like how it would be hand coded.

Rgds,
Mats

From mikael.sandberg at addiva.se  Wed Oct 31 01:41:11 2007
From: mikael.sandberg at addiva.se (Mikael Sandberg)
Date: Wed, 31 Oct 2007 09:41:11 +0100
Subject: [antlr-interest] Question
Message-ID: <E9F5B651-E613-4C24-8FFA-3BB245C4869B@addiva.se>

Hi!

I am writing a parser and evaluator for a small expression language,  
it is not even Turing complete but still gives me problems, the  
language was created by person(s) not well adversed in the fine art of  
programming language construction, that is for sure.

The language is basically stripped from all spaces before passed to  
the parser. It becomes difficult to parse and differetiate between for  
instance an ID and a literal folowed by a int, like in this short  
example:

grammar Test;

start	:	'literal' INT
	;
	
INT	:	'0'..'9'+
	;
	
ID	:	'a'..'z' ('a'..'z' | '0'..'9')*
	;

The input "bit 1" works fine but without the space "bit1" the parser  
or rather the lexer creates a token for "bit1" that is not part of the  
language. Is there a fast fix for this problem? You write in the book  
that this was a common situation and that ANTLR takes care of it but  
it seems that in this case it is not so.

Thank you for your time.

Yours
Mikael Sandberg

From antlr at mirality.co.nz  Wed Oct 31 01:50:55 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 31 Oct 2007 21:50:55 +1300
Subject: [antlr-interest] Question
In-Reply-To: <E9F5B651-E613-4C24-8FFA-3BB245C4869B@addiva.se>
References: <E9F5B651-E613-4C24-8FFA-3BB245C4869B@addiva.se>
Message-ID: <20071031085103.029BC11E97E@www.antlr.org>

At 21:41 31/10/2007, Mikael Sandberg wrote:
 >The language is basically stripped from all spaces before
 >passed to the parser. It becomes difficult to parse and
 >differetiate between for instance an ID and a literal
 >folowed by a int, like in this short example:
[...]
 >The input "bit 1" works fine but without the space "bit1" the
 >parser or rather the lexer creates a token for "bit1" that is
 >not part of the language. Is there a fast fix for this problem?
 >You write in the book that this was a common situation and that
 >ANTLR takes care of it but it seems that in this case it is
 >not so.

The normal case is to have an additional lexer rule that 
recognises and skips (or assigns to the hidden channel) any 
whitespace.

Are you manually stripping the whitespace from the input yourself 
before passing it to the lexer?  If so, don't.

If the input is actually coming in like that, then your grammar is 
infeasible.  If an identifier is allowed to have trailing digits 
and there is no requirement for separation between such an 
identifier and a following number, then there is no way to 
disambiguate it.  For example, how could you tell whether "foo123" 
was supposed to be itself or "foo 123" or "foo1 23" or even "foo1 
2 3"?


From simone.tripodi at gmail.com  Wed Oct 31 03:55:46 2007
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Wed, 31 Oct 2007 11:55:46 +0100
Subject: [antlr-interest] First SPARQL ANTLR3 grammar released
Message-ID: <4173dc210710310355q18d989e6s77b79a138315acff@mail.gmail.com>

Hello everybody,
my collegue Michele Mostarda and I are glad to announce the first
release of W3C SPARQL Grammar, implemented in ANTLR v3.
It was submitted yesterday to the central ANTLR Grammar list; if
anyone woulds like submit suggestions, raise issues or get involved,
is welcome :)
Have a nice day,

Michele Mostarda
Simone Tripodi

From wypee at hotmail.com  Wed Oct 31 04:10:00 2007
From: wypee at hotmail.com (Yogesh Pandey)
Date: Wed, 31 Oct 2007 16:40:00 +0530
Subject: [antlr-interest] newbie question: How to parse perl-strings like
	syntax?
Message-ID: <BAY120-DS25F8E3AD1A456560D686FB1930@phx.gbl>

Hi,

How would one write lexer rules for parsing perl like strings which can
have embedded expressions? For example:


// input syntax
TEMPLATE  tagA, tagB;

"This template simply prints
 today's date as $date"

ENDTEMPLATE


The following is what I tried but the problem is that OTHER_TEXT token is a 
super-set
of IDENT and always gets matched even for the tags (unlike lex, the rule 
IDENT
doesn't get precedence because its defined first in the file). This is not 
what I
want. How can I ask antlr to not match OTHER_TEXT token till I am inside
the template_body?

=== antlr.g

template:  'TEMPLATE' taglist template_body 'ENDTEMPLATE'
        ;

taglist: IDENT (',' IDENT)* ';'
       ;

template_body:
       '"' (EXPR | OTHER_TEXT)* '"'
       ;

LETTER:
        'a..z' | 'A..Z'
       ;

IDENT:
        LETTER+
        ;

EXPR:
        '$' IDENT
        ;

WS:
         (' '|'\r'|'\n'|'\t') { $channel = HIDDEN; }

OTHER_TEXT:
        (~('$'))*
        ; 


From OJAY78 at gmx.de  Wed Oct 31 07:08:56 2007
From: OJAY78 at gmx.de (OJAY78 at gmx.de)
Date: Wed, 31 Oct 2007 15:08:56 +0100
Subject: [antlr-interest] NoViableAltException but do not know why
Message-ID: <20071031140856.321750@gmx.net>

Hi,

I have the following rule in my grammar.

justifyStrFunction returns[String value]
	:	'justify' '(' parameter '|' ('left' | 'center' | 'right')('|' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')* )? ')' 
	;


 Here I have a problem and do not know how to solve this.

If I try the command: justify("test"|left|4); in the ANTLRWorks Interpreter it works and I see the parser tree for that command. But if I try more than one digit like this command justify("test"|left|44); it resolves in a NoViableAltException. 

Can anyone explain me why this happens??
Thanks


-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From dave at badgers-in-foil.co.uk  Wed Oct 31 08:15:16 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 31 Oct 2007 15:15:16 +0000
Subject: [antlr-interest] NoViableAltException but do not know why
In-Reply-To: <20071031140856.321750@gmx.net>
References: <20071031140856.321750@gmx.net>
Message-ID: <20071031151502.GE26816@badgers-in-foil.co.uk>

On Wed, Oct 31, 2007 at 03:08:56PM +0100, OJAY78 at gmx.de wrote:
> Hi,
> 
> I have the following rule in my grammar.
> 
> justifyStrFunction returns[String value]
> 	:	'justify' '(' parameter '|' ('left' | 'center' | 'right')('|' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')* )? ')' 
> 	;
> 
> 
>  Here I have a problem and do not know how to solve this.
> 
> If I try the command: justify("test"|left|4); in the ANTLRWorks Interpreter it works and I see the parser tree for that command. But if I try more than one digit like this command justify("test"|left|44); it resolves in a NoViableAltException. 

Do you have a lexer definition for INT (or anything else matching
DIGIT+) in your grammar, by any chance?

-- 
http://david.holroyd.me.uk/

From arto.viitanen at pp4.inet.fi  Wed Oct 31 09:17:41 2007
From: arto.viitanen at pp4.inet.fi (Arto Viitanen)
Date: Wed, 31 Oct 2007 18:17:41 +0200
Subject: [antlr-interest] Tree rewriting
Message-ID: <4728AAA5.10802@pp4.inet.fi>

I have used an AST to generate symbol table from the source. It occurred
to me, that I could actually generate another
AST by cleaning up the code a little bit, like checking that  for
example ('+' e1=expression e2=expression) can be
rewritten as (e1), if e2 is 0. So my question really is

-   is there any reason to write another AST
-   or generate code from the current AST and try the optimization on
the same phase
-   and is there any sample on this simple optimization using ANTLR ?


--
Arto Viitanen


From jaluber at gmx.de  Wed Oct 31 11:17:21 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 31 Oct 2007 19:17:21 +0100
Subject: [antlr-interest] How to remove the rules ambiguity here?
In-Reply-To: <4724C8EB.9090007@gmx.de>
References: <4724C8EB.9090007@gmx.de>
Message-ID: <4728C6B1.3080806@gmx.de>

Johannes Luber wrote:
> Or can I safely use a flag to tell the parser "Here
> aren't global attributes allowed!"?

I've tried to use the following approach:

compilation_unit
@init{
    globalAttributesAllowed = true;
}
    :    extern_alias_directive* using_directive*
        ({globalAttributesAllowed}? global_attribute_section
          {if ((input.LT(1).Type != OPEN_BRACE) ||
           (input.LT(2).Type != IDENTIFIER) ||
           (input.LT(1).Type == OPEN_BRACE &&
              input.LT(2).Type == IDENTIFIER &&
                 (input.LT(2).Text != "assembly" ||
                  input.LT(2).Text != "module")))
                  { globalAttributesAllowed = false; }}
        )*
        namespace_member_declaration* EOF
	;

The following code is generated for the "({globalAttributesAllowed}?
global_attribute_section {if (yes) {globalAttributesAllowed = false;}
)*" snippet:

//
D:\\Studium\\Diplomarbeit_Experimental\\CSharpML\\CSharp3ParserTest.g:148:45:
({...}? global_attribute_section )*
do
{
    int alt7 = 2;
    alt7 = dfa7.Predict(input);
    switch (alt7)
    {
    case 1 :
         // CSharp3ParserTest.g:148:46: {...}? global_attribute_section
         {
             if ( !(globalAttributesAllowed) )
             {
                 if ( backtracking > 0 ) {failed = true; return retval;}
                 throw new FailedPredicateException(input,
                      "compilation_unit", "globalAttributesAllowed");
             }
     PushFollow(FOLLOW_global_attribute_section_in_compilation_unit197);
             global_attribute_section14 = global_attribute_section();
             followingStackPointer_--;
             if (failed) return retval;
             if ( backtracking==0 ) adaptor.AddChild(root_0,
                 global_attribute_section14.Tree);
             if ( backtracking == 0 )
             {
                 if ((input.LT(1).Type != OPEN_BRACE) ||
                    (input.LT(2).Type != IDENTIFIER) ||
                    (input.LT(1).Type == OPEN_BRACE &&
                        input.LT(2).Type == IDENTIFIER &&
                           (input.LT(2).Text != "assembly" ||
                           input.LT(2).Text != "module")))
                           { globalAttributesAllowed = false; }
             }
		
        }
        break;

    default:
        goto loop7;
    }
} while (true);

I'm a bit worried about

if ( !(globalAttributesAllowed) )
{
    if ( backtracking > 0 ) {failed = true; return retval;}
    throw new FailedPredicateException(input,
         "compilation_unit", "globalAttributesAllowed");
}

Will this correctly work?

Johannes



From goranko2000l at hotmail.com  Wed Oct 31 11:47:55 2007
From: goranko2000l at hotmail.com (=?iso-8859-1?Q?G=F8ran_K._Olsen?=)
Date: Wed, 31 Oct 2007 19:47:55 +0100
Subject: [antlr-interest] Minor issue with ANTLRWorks Debugger Show input
	Tokens
Message-ID: <BAY120-DAV14EB5B1FBA80A28353D8A6D0930@phx.gbl>

Hello,

I am just wondering if there are any known bugs to the functionality "Show input tokens" in ANTLRWorks or if it is my grammar that is suspect.
It seems that white-space at the end of an input text for a PCDATA messes things up a bit. After such input, the red marking around tokens becomes quite odd.

The parse tree seems to be correct, but to enable the blue colour on the correct token in the parse tree I have to miss the mark in the input consol (increases for each PCDATA containing white-space at the end).

White-space in front and in between works fine.

]  hello world[        -> ok
]  hello world  [      ->not ok   

PCDATA
  :{!bracketMode}?=>~('[')+
 ;

I also get an exception for every "consume step" after:

[19:16:28] javax.swing.text.BadLocationException: Position not represented by view
 at javax.swing.text.CompositeView.modelToView(Unknown Source)
 at javax.swing.text.BoxView.modelToView(Unknown Source)
 at javax.swing.plaf.basic.BasicTextUI$RootView.modelToView(Unknown Source)
 at javax.swing.plaf.basic.BasicTextUI.modelToView(Unknown Source)
 at javax.swing.plaf.basic.BasicTextUI.modelToView(Unknown Source)
 at javax.swing.text.JTextComponent.modelToView(Unknown Source)
 at org.antlr.works.debugger.input.DBInputProcessorToken$1.run(Unknown Source)
 at java.awt.event.InvocationEvent.dispatch(Unknown Source)
 at java.awt.EventQueue.dispatchEvent(Unknown Source)
 at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
 at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
 at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
 at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
 at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
 at java.awt.EventDispatchThread.run(Unknown Source)


Best Regards,
G?ran
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071031/de863aa7/attachment.html 

From clifford.heath at gmail.com  Wed Oct 31 14:50:06 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Thu, 01 Nov 2007 08:50:06 +1100
Subject: [antlr-interest] NoViableAltException but do not know why
In-Reply-To: <20071031140856.321750@gmx.net>
References: <20071031140856.321750@gmx.net>
Message-ID: <fgatag$jnb$1@ger.gmane.org>

OJAY78 at gmx.de wrote:
> I have the following rule in my grammar.
> justifyStrFunction returns[String value]
> 	:	'justify' '(' parameter '|' ('left' | 'center' | 'right')('|' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')* )? ')' 
> 	;
> If I try the command: justify("test"|left|4); in the ANTLRWorks Interpreter it works and I see the parser tree for that command. But if I try more than one digit like this command justify("test"|left|44); it resolves in a NoViableAltException. 
> Can anyone explain me why this happens??

I believe I just did in my message "Puzzle, and solution."
Try temporarily adding a rule:

junk: justifyStrFunction EOF;

to your grammar, and you'll find it might just work.

The function generated for your grammar rule won't 
match until it looks ahead past the input it matches
to see that the following token is one of the tokens
that could validly follow that rule in any part of
your grammar. It sees EOF in this case, and if there's
no way that can be valid in your grammar, it fails.
Adding the temporary rule opens the possibility that
EOF is a valid following token, so it passes.

It seems to me possible that it doesn't need to look
ahead in this case, since after seeing the ')' there's
nothing else that it can consume, but I suspect it's a
detail of how the LL(*) algorithm works that it always
needs to look anyhow. Perhaps Terrence can elaborate.

Clifford Heath.


From john.ridgway at trincoll.edu  Wed Oct 31 17:26:31 2007
From: john.ridgway at trincoll.edu (John Ridgway)
Date: Wed, 31 Oct 2007 20:26:31 -0400
Subject: [antlr-interest] Rules with multiple parameters
Message-ID: <50955F5A-12AE-4B3A-A346-6F945CCC8880@trincoll.edu>

Consider the following in a grammar with the output=AST option:

methodOrFieldDecl[Tree modifiers, Tree type]
     :	identifier! methodDeclaratorRest[modifiers, type  
$identifier.tree]
     ;

methodDeclaratorRest[Tree modifiers, Tree type, Tree name]

which is a fragment of a Java 1.5 grammar.  The methodDeclaratorRest  
rule takes three parameters, which seems entirely reasonable  
(actually it's totally unreasonable, but Java was not designed for  
parsing...).  In order to pass three arguments to it I have to play  
with the locations of commas in the "call/usage" in order that the  
generated Java is correct.  If I tried to use

   methodDeclaratorRest[modifiers, type, $identifier.tree]

(note the comma after type), I would end up with an extra comma in  
the generated Java.

This is clearly (to me) a bug.  It is likely to be fixed?

Note.  It gets even worse if we want to do something like:

x
     : a! b! c! d[$a $b $c]
     ;

This won't work even with no commas in the given code.  To make it  
work I have to introduce some names:

x
     :   a! bb=b! c! d[$a bb $c]
     ;

probably does work...

Peace
- John


