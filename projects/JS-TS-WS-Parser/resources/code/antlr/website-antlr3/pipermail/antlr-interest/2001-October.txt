From klaren at cs.utwente.nl  Mon Oct  1 14:08:49 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Coctail vs ANTLR
In-Reply-To: <B7DE5556.11105%sunshine@public.kherson.ua>; from sunshine@public.kherson.ua on Mon, Oct 01, 2001 at 07:43:11PM +0300
References: <20011001152614.G7646@cs.utwente.nl> <B7DE5556.11105%sunshine@public.kherson.ua>
Message-ID: <20011001230844.A16518@cs.utwente.nl>

On Mon, Oct 01, 2001 at 07:43:11PM +0300, Ruslan Zasukhin wrote:
> It looks for me that better keep grammar and parser as LL(1),
> and avoid using of it as LL(2).

Mwoch LL(2) isn't bad.. predicates are bad every ( ) => ( ) introduces
backtracking. And that is really expensive. With k=2 you can catch a lot.
If you do the factoring of your grammar religiously then you can circumvent
also a lot of backtracking at the expense of readability of your grammar
(in general).

> Am I right that we always can use left factoring to modify some rules from
> LL(2) to LL(1) grammar ?

Guess so.

> May be only thing to really improve in ATLR, as you have mention -- scanner.
> FLEX is better.

I don't have any hard figures but I suspect it is better. I even recall
some posts in the past that said that flex was faster.

> Ric, I wonder that you say that scanner is bad because is used the same
> codegenerator as in parser. I see in code generator that is used
>         
>         if(state == Lex)
>         if(state == parser)
>         if(state == treewalker)
> 
> So having this we still can not get good scanner ?

We can have better codegen, but probably at the expense of some flexibility.
Also the codegenerator becomes more and more draconian to look at. I'd
prefer some rewriting...

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From jsrs701 at yahoo.com  Mon Oct  1 14:21:49 2001
From: jsrs701 at yahoo.com (jsrs701@yahoo.com)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Re: VoiceXML
In-Reply-To: <9p1gv3+4u0l@eGroups.com>
Message-ID: <9pampd+pm9s@eGroups.com>

--- In antlr-interest@y..., joram665@y... wrote:
> Is there an ANTLR grammar/parser for VoiceXML?

It would seem to me that, given you're dealing with XML content, it 
would be pretty simple to just use one of the many decent XML parsers 
(available for just about every language) and parse your documents 
that way.

In other words, might ANTLR not be just a little over-kill?

JSRS


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From pray at eagleinvsys.com  Mon Oct  1 14:35:00 2001
From: pray at eagleinvsys.com (Praveen Ray)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Re: Newbie Question
In-Reply-To: <9p1idj+6em5@eGroups.com>
Message-ID: <9pani4+4t0v@eGroups.com>

Do u have a corresponding Lexer rule to identify the keywords?
Simply defining tokens in the Parser is not enough until there is
a Lexer rule to recognize the keywords in input stream. Also, the
corresponsing Lexer must have 'testLiteral' option set to true.

Try in Lexer (assuming your keywords begin with $ and Uppercase
Letter ):

KEYWORDS 
options
{
   testLiterals = true;
}
: '$' ('A'..'Z' | 'a'..'z')+ ;
and in Parser (wherever u need keywords accessed):
my_rule : "$Begin" (..other production elements etc)

Any literal in Parser is automatically a Lexer Keyword so you dont
need 'tokens' section.
Hope this helps.

--- In antlr-interest@y..., harshadpatel@t... wrote:
> Hi All !
> Im new to antlr and I am struggling to get my simple parser working
> my question is How do I write a grammer 
> to parse keywords beginning with the dollor character
> e.g
> $BeginA
> $BeginB
> $EndB
> $EndA
> 
> 
> I've tried to define tokens such as this -->
> tokens
> {
> BEGIN="$Begin";
> END="$End";
> }
> 
> But I get 
> exception: antlr.TokenStreamRecognitionException: unexpected char: $
> 
> When I run the Parser ???
> 
> Any suggestions anyone 
> Thanks in advance 
> Harshad


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lemoine at multimania.com  Mon Oct  1 23:47:33 2001
From: lemoine at multimania.com (lemoine@multimania.com)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] [Q] String rules
Message-ID: <9pbnu5+mrmf@eGroups.com>

Hi,
I just want to merge these two rules in one rule but I don't succeed 
to do it
Any help would be greatly appreciated. 

ALNUM	:	'a'..'z'|'A'..'Z'|'0'..'9'
	;


	(ALNUM|'"'!) (ALNUM)* ('"'!|)

	(ALNUM|'"'!) (~(' '|'\t'|'\r'|'\n'))* ('"'!|)
       
Thanks in advance


Herv?


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Tue Oct  2 06:48:13 2001
From: sander at aqris.com (=?Windows-1252?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
Message-ID: <00e201c14b48$e145a190$0400a8c0@dworkin>

Hi

I did some search and replace on my JavaRecognizer.java file (from java.g) to gain speed and memory - it seems to work in my tests.

Maybe someone can confirm that this optimization is indeed correct.

I defined a variable:
private static final ASTPair NULL_PAIR = new ASTPair();

And replaced all occurences of 'new ASTPair()' with '(inputState.guessing==0)?new ASTPair():NULL_PAIR;'

This makes garbage collector very happy and makes program a bit faster too.

br,
Sander M?gi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011002/d5b263bd/attachment.html
From sander at aqris.com  Tue Oct  2 06:55:48 2001
From: sander at aqris.com (=?Windows-1252?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid [more details]
References: <00e201c14b48$e145a190$0400a8c0@dworkin>
Message-ID: <010b01c14b49$f0752770$0400a8c0@dworkin>


Did the measurments and original version generated 30% more ASTPair objects.
  ----- Original Message ----- 
  From: Sander M?gi 
  To: ANTLR 
  Sent: Tuesday, October 02, 2001 3:48 PM
  Subject: [antlr-interest] Is this Recognizer optimization valid?


  Hi

  I did some search and replace on my JavaRecognizer.java file (from java.g) to gain speed and memory - it seems to work in my tests.

  Maybe someone can confirm that this optimization is indeed correct.

  I defined a variable:
  private static final ASTPair NULL_PAIR = new ASTPair();

  And replaced all occurences of 'new ASTPair()' with '(inputState.guessing==0)?new ASTPair():NULL_PAIR;'

  This makes garbage collector very happy and makes program a bit faster too.

  br,
  Sander M?gi

  Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011002/11855cac/attachment.html
From klaren at cs.utwente.nl  Tue Oct  2 07:33:20 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
In-Reply-To: <00e201c14b48$e145a190$0400a8c0@dworkin>; from sander@aqris.com on Tue, Oct 02, 2001 at 03:48:13PM +0200
References: <00e201c14b48$e145a190$0400a8c0@dworkin>
Message-ID: <20011002163320.K7646@cs.utwente.nl>

Hi,

On Tue, Oct 02, 2001 at 03:48:13PM +0200, Sander Mägi wrote:
> I did some search and replace on my JavaRecognizer.java file (from java.g)
> to gain speed and memory - it seems to work in my tests.
> 
> Maybe someone can confirm that this optimization is indeed correct.
> 
> I defined a variable:
> private static final ASTPair NULL_PAIR = new ASTPair();
> 
> And replaced all occurences of 'new ASTPair()' with
'(inputState.guessing==0)?new ASTPair():NULL_PAIR;'

During guessing no tree construction is done, so it's probably even safe to
say (inputState.guessing==0)?new ASTPair():null;

Very cheap optimization btw =) Nice work.

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
     Human beings, who are almost unique in having the ability to learn
   from the experience of others, are also remarkable for their apparent
         disinclination to do so. --- Douglas Adams, Last Chance to See

From klaren at cs.utwente.nl  Tue Oct  2 07:33:20 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
In-Reply-To: <00e201c14b48$e145a190$0400a8c0@dworkin>; from sander@aqris.com on Tue, Oct 02, 2001 at 03:48:13PM +0200
References: <00e201c14b48$e145a190$0400a8c0@dworkin>
Message-ID: <20011002163320.K7646@cs.utwente.nl>

Hi,

On Tue, Oct 02, 2001 at 03:48:13PM +0200, Sander Mägi wrote:
> I did some search and replace on my JavaRecognizer.java file (from java.g)
> to gain speed and memory - it seems to work in my tests.
> 
> Maybe someone can confirm that this optimization is indeed correct.
> 
> I defined a variable:
> private static final ASTPair NULL_PAIR = new ASTPair();
> 
> And replaced all occurences of 'new ASTPair()' with
'(inputState.guessing==0)?new ASTPair():NULL_PAIR;'

During guessing no tree construction is done, so it's probably even safe to
say (inputState.guessing==0)?new ASTPair():null;

Very cheap optimization btw =) Nice work.

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
     Human beings, who are almost unique in having the ability to learn
   from the experience of others, are also remarkable for their apparent
         disinclination to do so. --- Douglas Adams, Last Chance to See


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Tue Oct  2 07:40:34 2001
From: sander at aqris.com (=?iso-8859-1?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
References: <00e201c14b48$e145a190$0400a8c0@dworkin> <20011002163320.K7646@cs.utwente.nl>
Message-ID: <012601c14b50$31ef7c90$0400a8c0@dworkin>

null would give null pointer exception. The ASTpair's root and child
variables are still read for their content like returnAst = currentAst.root.

Sander

----- Original Message -----
From: "Ric Klaren" <klaren@cs.utwente.nl>
To: <antlr-interest@yahoogroups.com>
Cc: "Ryan Davis" <ryand@amazon.com>; "Terence Parr" <parrt@jguru.com>
Sent: Tuesday, October 02, 2001 4:33 PM
Subject: Re: [antlr-interest] Is this Recognizer optimization valid?


> Hi,
>
> On Tue, Oct 02, 2001 at 03:48:13PM +0200, Sander M?gi wrote:
> > I did some search and replace on my JavaRecognizer.java file (from
java.g)
> > to gain speed and memory - it seems to work in my tests.
> >
> > Maybe someone can confirm that this optimization is indeed correct.
> >
> > I defined a variable:
> > private static final ASTPair NULL_PAIR = new ASTPair();
> >
> > And replaced all occurences of 'new ASTPair()' with
> '(inputState.guessing==0)?new ASTPair():NULL_PAIR;'
>
> During guessing no tree construction is done, so it's probably even safe
to
> say (inputState.guessing==0)?new ASTPair():null;
>
> Very cheap optimization btw =) Nice work.
>
> Cheers,
>
> Ric
> --
> -----+++++*****************************************************+++++++++--
-----
>     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
> -----+++++*****************************************************+++++++++--
-----
>      Human beings, who are almost unique in having the ability to learn
>    from the experience of others, are also remarkable for their apparent
>          disinclination to do so. --- Douglas Adams, Last Chance to See
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at bco.com  Tue Oct  2 07:40:23 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid [more 
	details]
Message-ID: <170826586F3BD511910D0200C110AAA801C57F65@memail03.bco-home.com>

Looks good to me.

Monty

-----Original Message-----
From: Sander M?gi [mailto:sander@aqris.com]
Sent: Tuesday, October 02, 2001 6:56 AM
To: antlr-interest@yahoogroups.com
Subject: [antlr-interest] Is this Recognizer optimization valid [more
details]


 
Did the measurments and original version generated 30% more ASTPair objects.
----- Original Message ----- 
From: Sander M?gi 
To: ANTLR 
Sent: Tuesday, October 02, 2001 3:48 PM
Subject: [antlr-interest] Is this Recognizer optimization valid?


Hi
 
I did some search and replace on my JavaRecognizer.java file (from java.g)
to gain speed and memory - it seems to work in my tests.
 
Maybe someone can confirm that this optimization is indeed correct.
 
I defined a variable:
private static final ASTPair NULL_PAIR = new ASTPair();

And replaced all occurences of 'new ASTPair()' with
'(inputState.guessing==0)?new ASTPair():NULL_PAIR;'
 
This makes garbage collector very happy and makes program a bit faster too.
 
br,
Sander M?gi

Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011002/02697546/attachment.html
From klaren at cs.utwente.nl  Tue Oct  2 07:43:11 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
In-Reply-To: <012601c14b50$31ef7c90$0400a8c0@dworkin>; from sander@aqris.com on Tue, Oct 02, 2001 at 04:40:34PM +0200
References: <00e201c14b48$e145a190$0400a8c0@dworkin> <20011002163320.K7646@cs.utwente.nl> <012601c14b50$31ef7c90$0400a8c0@dworkin>
Message-ID: <20011002164311.L7646@cs.utwente.nl>

Hi,

On Tue, Oct 02, 2001 at 04:40:34PM +0200, Sander Mägi wrote:
> null would give null pointer exception. The ASTpair's root and child
> variables are still read for their content like returnAst = currentAst.root.

Ack you're right. But in the codegen these could be guarded by an
(guessing != 0) check.

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
     Human beings, who are almost unique in having the ability to learn
   from the experience of others, are also remarkable for their apparent
         disinclination to do so. --- Douglas Adams, Last Chance to See


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Tue Oct  2 07:58:04 2001
From: sander at aqris.com (=?iso-8859-1?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
References: <00e201c14b48$e145a190$0400a8c0@dworkin> <20011002163320.K7646@cs.utwente.nl> <012601c14b50$31ef7c90$0400a8c0@dworkin> <20011002164311.L7646@cs.utwente.nl>
Message-ID: <015701c14b52$a3c431b0$0400a8c0@dworkin>

Couldn't the codegen actually generate methods like 'statement' and
'statementGuessing' and skip the if(inputStateGuessing ==0) parts at all?

Probably C++ compilers do proper inlining and make it fast, but my
experience shows that in java many things that should be 'naturally
optimized' are not.

Sander

----- Original Message -----
From: "Ric Klaren" <klaren@cs.utwente.nl>
To: <antlr-interest@yahoogroups.com>
Sent: Tuesday, October 02, 2001 4:43 PM
Subject: Re: [antlr-interest] Is this Recognizer optimization valid?


> Hi,
>
> On Tue, Oct 02, 2001 at 04:40:34PM +0200, Sander M?gi wrote:
> > null would give null pointer exception. The ASTpair's root and child
> > variables are still read for their content like returnAst =
currentAst.root.
>
> Ack you're right. But in the codegen these could be guarded by an
> (guessing != 0) check.
>
> Ric
> --
> -----+++++*****************************************************+++++++++--
-----
>     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
> -----+++++*****************************************************+++++++++--
-----
>      Human beings, who are almost unique in having the ability to learn
>    from the experience of others, are also remarkable for their apparent
>          disinclination to do so. --- Douglas Adams, Last Chance to See
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at bco.com  Tue Oct  2 08:02:19 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
Message-ID: <170826586F3BD511910D0200C110AAA801C57F66@memail03.bco-home.com>

You could do that but you still have to have guessing guards around
individual productions, of course.  And you still have to increment and
decrement the guessing state just as happens now because syntactic
predicates can be nested arbitrarily.

Just how much guessing is your code doing?  Some people overuse syntactic
predicates because they don't understand proper factoring of rules or they
don't think about the shortest syntactic predicate that will work.  But with
a truly ambiguous language you will have no choice but to use syntactic
predicates.

Monty

> -----Original Message-----
> From: Sander M?gi [mailto:sander@aqris.com]
> Sent: Tuesday, October 02, 2001 7:58 AM
> To: antlr-interest@yahoogroups.com
> Subject: Re: [antlr-interest] Is this Recognizer optimization valid?
> 
> 
> Couldn't the codegen actually generate methods like 'statement' and
> 'statementGuessing' and skip the if(inputStateGuessing ==0) 
> parts at all?
> 
> Probably C++ compilers do proper inlining and make it fast, but my
> experience shows that in java many things that should be 'naturally
> optimized' are not.
> 
> Sander
> 
> ----- Original Message -----
> From: "Ric Klaren" <klaren@cs.utwente.nl>
> To: <antlr-interest@yahoogroups.com>
> Sent: Tuesday, October 02, 2001 4:43 PM
> Subject: Re: [antlr-interest] Is this Recognizer optimization valid?
> 
> 
> > Hi,
> >
> > On Tue, Oct 02, 2001 at 04:40:34PM +0200, Sander M?gi wrote:
> > > null would give null pointer exception. The ASTpair's 
> root and child
> > > variables are still read for their content like returnAst =
> currentAst.root.
> >
> > Ack you're right. But in the codegen these could be guarded by an
> > (guessing != 0) check.
> >
> > Ric
> > --
> > 
> -----+++++****************************************************
> *+++++++++--
> -----
> >     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 
> 4893722  ----
> > 
> -----+++++****************************************************
> *+++++++++--
> -----
> >      Human beings, who are almost unique in having the 
> ability to learn
> >    from the experience of others, are also remarkable for 
> their apparent
> >          disinclination to do so. --- Douglas Adams, Last 
> Chance to See
> >
> >
> >
> >
> > Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/
>
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011002/5d9b1d4b/attachment.html
From sunshine at public.kherson.ua  Tue Oct  2 10:48:45 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] small CharInputBuffer class
Message-ID: <B7DFD879.111F9%sunshine@public.kherson.ua>

Hi Ric,

I have look on CharBuffer class...

Yes it want to get istream as parameter, you suugest to use istringstream
class for RAM based string...

But istringstream want to get only std::string class.
But I have just char* or my own string class.

Conclusion: I do not want to use CharBuffer class  :-)

This is my implementation of InputBuffer subclass.
Please look if I correctly work with EOF. It must be -1, yes ?

It seems to me, my class will work also faster, than with istream.

--------------------------------------------------------------
class OBL_InputBuffer : : public InputBuffer
{
    
public://///////////////////////////////////////////////////////////////////

                 OBL_InputBuffer( char* inStr, ulong inLength ) :
                     mStrPtr(inStr),
                     mEndPtr(inStr + inLength)
                 {
                 }
     
virtual int     getChar( void )
                {
                    // EOF is -1.
                    return (mStrPtr < mEndPtr) ? *mStrPtr++ : -1;
                }  
    
protected://////////////////////////////////////////////////////////////////
    
        char*    mStrPtr;
        char*     mEndPtr;
};

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From johnl at jbase.com  Tue Oct  2 11:06:44 2001
From: johnl at jbase.com (John Lambert)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] small CharInputBuffer class
Message-ID: <11DA90DB57270946997CE1A2095E0164436BC4@fenchurch.pdx.jbase.com>

Ruslan,

Looks pretty much the same as what I use, except I suggest you use unsigned
chars to avoid signe extension problems.

Regards,

John Lambert



-----Original Message-----
From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
Sent: Tuesday, October 02, 2001 10:49 AM
To: antlr-interest@yahoogroups.com; Ric Klaren
Subject: [antlr-interest] small CharInputBuffer class


Hi Ric,

I have look on CharBuffer class...

Yes it want to get istream as parameter, you suugest to use istringstream
class for RAM based string...

But istringstream want to get only std::string class.
But I have just char* or my own string class.

Conclusion: I do not want to use CharBuffer class  :-)

This is my implementation of InputBuffer subclass.
Please look if I correctly work with EOF. It must be -1, yes ?

It seems to me, my class will work also faster, than with istream.

--------------------------------------------------------------
class OBL_InputBuffer : : public InputBuffer
{
    
public://///////////////////////////////////////////////////////////////////

                 OBL_InputBuffer( char* inStr, ulong inLength ) :
                     mStrPtr(inStr),
                     mEndPtr(inStr + inLength)
                 {
                 }
     
virtual int     getChar( void )
                {
                    // EOF is -1.
                    return (mStrPtr < mEndPtr) ? *mStrPtr++ : -1;
                }  
    
protected://////////////////////////////////////////////////////////////////
    
        char*    mStrPtr;
        char*     mEndPtr;
};

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From braden at endoframe.com  Tue Oct  2 12:05:36 2001
From: braden at endoframe.com (Braden McDaniel)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] small CharInputBuffer class
In-Reply-To: <B7DFD879.111F9%sunshine@public.kherson.ua>
References: <B7DFD879.111F9%sunshine@public.kherson.ua>
Message-ID: <1002049338.1182.24.camel@catalyst.endoframe.com>

On Tue, 2001-10-02 at 13:48, Ruslan Zasukhin wrote:
> Hi Ric,
> 
> I have look on CharBuffer class...
> 
> Yes it want to get istream as parameter, you suugest to use istringstream
> class for RAM based string...
> 
> But istringstream want to get only std::string class.
> But I have just char* or my own string class.

An alternative that stays within the IOStreams framework would be to use
istrstream.

> This is my implementation of InputBuffer subclass.
> Please look if I correctly work with EOF. It must be -1, yes ?

Though that's probably a pretty reliable assumption, I don't think it's
required to be. char_traits<char>::eof() should be reliable, though.

-- 
Braden McDaniel                           e-mail: <braden@endoframe.com>
<http://endoframe.com>                    Jabber: <braden@jabber.org>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Wed Oct  3 00:57:55 2001
From: sander at aqris.com (=?iso-8859-1?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
References: <170826586F3BD511910D0200C110AAA801C57F66@memail03.bco-home.com>
Message-ID: <000d01c14be1$1c155750$0400a8c0@dworkin>

RE: [antlr-interest] Is this Recognizer optimization valid?> You could do that but you still have to have guessing guards around individual productions, of course.  And you still have to increment and decrement the > guessing state just as happens now because syntactic predicates can be nested arbitrarily.

Are you sure?

I think we would not need the guessing guard nor increment/decrement.

When code sees a syntatic predicate then it would not to 'guessing++;statement();guessing--' but rather 'statementGuessing();' - statementGuessing would call only guessing rules. It does not matter if the predicates are nested or not because guessing mode ends only when this statementGuessing is completed.

This is same for current mode - only currently the inputstate.guessing becomes 2 when there is a nested predicate and 3 when yet another - it does not matter because the guessing variable is only tested for 0/nonzero anyway.

> Just how much guessing is your code doing? 

I am using java.g grammar from resources section - I really don't if it can be optimized- I can say that the hack I sent earlyer reduced ASTPair object generation by 30 percent (calculated this way that percentages look larger :).

Sander



  You could do that but you still have to have guessing guards around individual productions, of course.  And you still have to increment and decrement the guessing state just as happens now because syntactic predicates can be nested arbitrarily.

  Just how much guessing is your code doing?  Some people overuse syntactic predicates because they don't understand proper factoring of rules or they don't think about the shortest syntactic predicate that will work.  But with a truly ambiguous language you will have no choice but to use syntactic predicates.



  Monty 

  > -----Original Message----- 
  > From: Sander M?gi [mailto:sander@aqris.com] 
  > Sent: Tuesday, October 02, 2001 7:58 AM 
  > To: antlr-interest@yahoogroups.com 
  > Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
  > 
  > 
  > Couldn't the codegen actually generate methods like 'statement' and 
  > 'statementGuessing' and skip the if(inputStateGuessing ==0) 
  > parts at all? 
  > 
  > Probably C++ compilers do proper inlining and make it fast, but my 
  > experience shows that in java many things that should be 'naturally 
  > optimized' are not. 
  > 
  > Sander 
  > 
  > ----- Original Message ----- 
  > From: "Ric Klaren" <klaren@cs.utwente.nl> 
  > To: <antlr-interest@yahoogroups.com> 
  > Sent: Tuesday, October 02, 2001 4:43 PM 
  > Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
  > 
  > 
  > > Hi, 
  > > 
  > > On Tue, Oct 02, 2001 at 04:40:34PM +0200, Sander M?gi wrote: 
  > > > null would give null pointer exception. The ASTpair's 
  > root and child 
  > > > variables are still read for their content like returnAst = 
  > currentAst.root. 
  > > 
  > > Ack you're right. But in the codegen these could be guarded by an 
  > > (guessing != 0) check. 
  > > 
  > > Ric 
  > > -- 
  > > 
  > -----+++++**************************************************** 
  > *+++++++++-- 
  > ----- 
  > >     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 
  > 4893722  ---- 
  > > 
  > -----+++++**************************************************** 
  > *+++++++++-- 
  > ----- 
  > >      Human beings, who are almost unique in having the 
  > ability to learn 
  > >    from the experience of others, are also remarkable for 
  > their apparent 
  > >          disinclination to do so. --- Douglas Adams, Last 
  > Chance to See 
  > > 
  > > 
  > > 
  > > 
  > > Your use of Yahoo! Groups is subject to 
  http://docs.yahoo.com/info/terms/ 
  > 
  > 
  > 



   

  Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



  Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011003/bc18a25a/attachment.html
From klaren at cs.utwente.nl  Wed Oct  3 02:43:07 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
In-Reply-To: <000d01c14be1$1c155750$0400a8c0@dworkin>; from sander@aqris.com on Wed, Oct 03, 2001 at 09:57:55AM +0200
References: <170826586F3BD511910D0200C110AAA801C57F66@memail03.bco-home.com> <000d01c14be1$1c155750$0400a8c0@dworkin>
Message-ID: <20011003114306.P7646@cs.utwente.nl>

Hi,

On Wed, Oct 03, 2001 at 09:57:55AM +0200, Sander Mägi wrote:
> RE: [antlr-interest] Is this Recognizer optimization valid?> You could do
> that but you still have to have guessing guards around individual
> productions, of course.  And you still have to increment and decrement the
> > guessing state just as happens now because syntactic predicates can be
> nested arbitrarily.
> 
> Are you sure?
>
> I think we would not need the guessing guard nor increment/decrement.

We would not need the guessing guard anymore. I think this is embedded then
in the call stack of the rules.

Though duplicating a lot of code to do guessing does not strike me as
efficient (size/gain ratio pretty low is my estimate) If you really go for
the last clock cycle then maybe but it depends a lot on the compiler what
the gain is. I think that in the general case it's a waste. In C++ mode I
really wouldn't go for it since code size is already biggish. In Java mode
I don't care too much no idea about gains/losses either.

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
Wit is cultured insolence. - Aristotle


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Wed Oct  3 03:20:12 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] small CharInputBuffer class
In-Reply-To: <1002049338.1182.24.camel@catalyst.endoframe.com>; from braden@endoframe.com on Tue, Oct 02, 2001 at 03:05:36PM -0400
References: <B7DFD879.111F9%sunshine@public.kherson.ua> <1002049338.1182.24.camel@catalyst.endoframe.com>
Message-ID: <20011003122011.S7646@cs.utwente.nl>

Hi,

On Tue, Oct 02, 2001 at 03:05:36PM -0400, Braden McDaniel wrote:
> Though that's probably a pretty reliable assumption, I don't think it's
> required to be. char_traits<char>::eof() should be reliable, though.

How many compilers support it though. A while back not too many...

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 'And this 'rebooting' business? Give it a good kicking, do you?' 'Oh, no,
  of course, we ... that is ... well, yes, in fact,' said Ponder. 'Adrian
    goes round the back and ... er ... prods it with his foot. But in a
     technical way,' he added. --- From: Hogfather by Terry Pratchett.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Wed Oct  3 04:34:35 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Mailproblems - sorry
Message-ID: <20011003133434.U7646@cs.utwente.nl>

Hi,

It seems my faculty's mailserver has some hiccups that is replicating
mails. I hope these duplicates don't arrive on the list. If so my apologies
and I hope the sysadmins here fix it soon.

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
Wit is cultured insolence. - Aristotle


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at bco.com  Wed Oct  3 06:27:31 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
Message-ID: <170826586F3BD511910D0200C110AAA801C57F6A@memail03.bco-home.com>

Yes, you're right, you wouldn't necessarily need the guessing state as an
int, it could be boolean or implied by the code path.  Guess you would have
to try it to see how it works.

Do you know how much speed improvement you gained by your ASTPair hack?

Monty

-----Original Message-----
From: Sander M?gi [mailto:sander@aqris.com]
Sent: Wednesday, October 03, 2001 12:58 AM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] Is this Recognizer optimization valid?


> You could do that but you still have to have guessing guards around
individual productions, of course.  And you still have to increment and
decrement the > guessing state just as happens now because syntactic
predicates can be nested arbitrarily.
 
Are you sure?
 
I think we would not need the guessing guard nor increment/decrement.
 
When code sees a syntatic predicate then it would not to
'guessing++;statement();guessing--' but rather 'statementGuessing();' -
statementGuessing would call only guessing rules. It does not matter if the
predicates are nested or not because guessing mode ends only when this
statementGuessing is completed.
 
This is same for current mode - only currently the inputstate.guessing
becomes 2 when there is a nested predicate and 3 when yet another - it does
not matter because the guessing variable is only tested for 0/nonzero
anyway.
 
> Just how much guessing is your code doing? 
 
I am using java.g grammar from resources section - I really don't if it can
be optimized- I can say that the hack I sent earlyer reduced ASTPair object
generation by 30 percent (calculated this way that percentages look larger
:).
 
Sander
 


You could do that but you still have to have guessing guards around
individual productions, of course.  And you still have to increment and
decrement the guessing state just as happens now because syntactic
predicates can be nested arbitrarily.
Just how much guessing is your code doing?  Some people overuse syntactic
predicates because they don't understand proper factoring of rules or they
don't think about the shortest syntactic predicate that will work.  But with
a truly ambiguous language you will have no choice but to use syntactic
predicates.
 
Monty 
> -----Original Message----- 
> From: Sander M?gi [mailto:sander@aqris.com] 
> Sent: Tuesday, October 02, 2001 7:58 AM 
> To: antlr-interest@yahoogroups.com 
> Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
> 
> 
> Couldn't the codegen actually generate methods like 'statement' and 
> 'statementGuessing' and skip the if(inputStateGuessing ==0) 
> parts at all? 
> 
> Probably C++ compilers do proper inlining and make it fast, but my 
> experience shows that in java many things that should be 'naturally 
> optimized' are not. 
> 
> Sander 
> 
> ----- Original Message ----- 
> From: "Ric Klaren" <klaren@cs.utwente.nl> 
> To: <antlr-interest@yahoogroups.com> 
> Sent: Tuesday, October 02, 2001 4:43 PM 
> Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
> 
> 
> > Hi, 
> > 
> > On Tue, Oct 02, 2001 at 04:40:34PM +0200, Sander M?gi wrote: 
> > > null would give null pointer exception. The ASTpair's 
> root and child 
> > > variables are still read for their content like returnAst = 
> currentAst.root. 
> > 
> > Ack you're right. But in the codegen these could be guarded by an 
> > (guessing != 0) check. 
> > 
> > Ric 
> > -- 
> > 
> -----+++++**************************************************** 
> *+++++++++-- 
> ----- 
> >     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 
> 4893722  ---- 
> > 
> -----+++++**************************************************** 
> *+++++++++-- 
> ----- 
> >      Human beings, who are almost unique in having the 
> ability to learn 
> >    from the experience of others, are also remarkable for 
> their apparent 
> >          disinclination to do so. --- Douglas Adams, Last 
> Chance to See 
> > 
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/ 
> 
> 
> 


Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011003/ed792e17/attachment.html
From sunshine at public.kherson.ua  Wed Oct  3 06:30:41 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] C++ version, == nullAST
In-Reply-To: <B7DAC41F.10FB8%sunshine@public.kherson.ua>
Message-ID: <B7E0EDB0.112A3%sunshine@public.kherson.ua>

on 9/29/01 0:25, Ruslan Zasukhin at sunshine@public.kherson.ua wrote:

Hi Ric,

I still did not get answer on this.
Any comments ?

> I also note next issue.
> What sense to have in C++ version special global variable
> 
> RefCount nullASt
> 
> ???
> 
> Later there is many coe that use it for comparison
> 
> if( someAST == nullAST )
> 
> At first I did think this is again, "way of Java"...
> but in Java code I see
> 
> if( someAST == null )
> 
> So I think we must throw out from C++ version this nullAST.
> This make code more clean, more similar to Java version and little faster.
> Really
> 
> if( someAST == nullAST )
> ^^^^^^^^ here work operator that return AST*
> 
> if( someAST == 0 )
> ^^^^ zero overhead.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Wed Oct  3 07:24:12 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Re: C++ version, == nullAST
In-Reply-To: <B7E0EDB0.112A3%sunshine@public.kherson.ua>; from sunshine@public.kherson.ua on Wed, Oct 03, 2001 at 04:30:41PM +0300
References: <B7DAC41F.10FB8%sunshine@public.kherson.ua> <B7E0EDB0.112A3%sunshine@public.kherson.ua>
Message-ID: <20011003162412.W7646@cs.utwente.nl>

On Wed, Oct 03, 2001 at 04:30:41PM +0300, Ruslan Zasukhin wrote:
> I still did not get answer on this.

Sorry it got snowed under a little...

> > RefCount nullASt

I'm not sure why it is used... It looks like they used it to have one null
pointer refcounted object?

It's defined in BaseAST with a comment about it being nasty but making
codegen easier.. It's not something I particularly looked at.

Some quick browsing in the code indeed seems to indicate that it can go.
Although maybe there's something subtle with the reference counter,
although the worst that could happen is that multiple RefAST's exist of a
null pointer, which should not be that bad.

I may have a closer look/try it out later this week or next week, there are
not too much occurences of the beast so giving it a spin is not hard.

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Wed Oct  3 07:38:41 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Re: C++ version, == nullAST
In-Reply-To: <20011003162412.W7646@cs.utwente.nl>
Message-ID: <B7E0FD6A.112AF%sunshine@public.kherson.ua>

on 10/3/01 17:24, Ric Klaren at klaren@cs.utwente.nl wrote:

> Sorry it got snowed under a little...
> 
>>> RefCount nullASt
> 
> I'm not sure why it is used... It looks like they used it to have one null
> pointer refcounted object?
> 
> It's defined in BaseAST with a comment about it being nasty but making
> codegen easier.. It's not something I particularly looked at.
> 
> Some quick browsing in the code indeed seems to indicate that it can go.

> Although maybe there's something subtle with the reference counter,
> although the worst that could happen is that multiple RefAST's exist of a
> null pointer, which should not be that bad.

I don't think we will get any arrows in back, because I use in my project
just 

    SomeObjectCPtr  obj = NULL;

and 

    if( obj == NULL )

everywhere. No problems. At least with my implementation of ref counting via
Sharable class and pointer.

> I may have a closer look/try it out later this week or next week, there are
> not too much occurences of the beast so giving it a spin is not hard.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Wed Oct  3 08:07:43 2001
From: sander at aqris.com (=?iso-8859-1?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
References: <170826586F3BD511910D0200C110AAA801C57F6A@memail03.bco-home.com>
Message-ID: <00ef01c14c1d$27175e50$0400a8c0@dworkin>

RE: [antlr-interest] Is this Recognizer optimization valid?The ASTPair hack gave some 30% reduced garbage and 20% increased speed (on my anyway handoptimized lexer and recognizer)

As for the guessing state hack - I took the enormous effort (that turned out to be 20 minutes with the help of refactoring browser I am developing) to make a copy of recognizer and make duplicates of all methods for 'guessing mode' by hand. This only gave some 7-8% improvement. For vanilla antlr generated recognizer that would be 3% so it's not such a good thing.

Sander 
  ----- Original Message ----- 
  From: mzukowski@bco.com 
  To: antlr-interest@yahoogroups.com 
  Sent: Wednesday, October 03, 2001 3:27 PM
  Subject: RE: [antlr-interest] Is this Recognizer optimization valid?


  Yes, you're right, you wouldn't necessarily need the guessing state as an int, it could be boolean or implied by the code path.  Guess you would have to try it to see how it works.

  Do you know how much speed improvement you gained by your ASTPair hack? 

  Monty 

  -----Original Message----- 
  From: Sander M?gi [mailto:sander@aqris.com] 
  Sent: Wednesday, October 03, 2001 12:58 AM 
  To: antlr-interest@yahoogroups.com 
  Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 



  > You could do that but you still have to have guessing guards around individual productions, of course.  And you still have to increment and decrement the > guessing state just as happens now because syntactic predicates can be nested arbitrarily.

   
  Are you sure? 
    
  I think we would not need the guessing guard nor increment/decrement. 
    
  When code sees a syntatic predicate then it would not to 'guessing++;statement();guessing--' but rather 'statementGuessing();' - statementGuessing would call only guessing rules. It does not matter if the predicates are nested or not because guessing mode ends only when this statementGuessing is completed.

   
  This is same for current mode - only currently the inputstate.guessing becomes 2 when there is a nested predicate and 3 when yet another - it does not matter because the guessing variable is only tested for 0/nonzero anyway.

   
  > Just how much guessing is your code doing? 
    
  I am using java.g grammar from resources section - I really don't if it can be optimized- I can say that the hack I sent earlyer reduced ASTPair object generation by 30 percent (calculated this way that percentages look larger :).

   
  Sander 
    



  You could do that but you still have to have guessing guards around individual productions, of course.  And you still have to increment and decrement the guessing state just as happens now because syntactic predicates can be nested arbitrarily.

  Just how much guessing is your code doing?  Some people overuse syntactic predicates because they don't understand proper factoring of rules or they don't think about the shortest syntactic predicate that will work.  But with a truly ambiguous language you will have no choice but to use syntactic predicates.

   
  Monty 
  > -----Original Message----- 
  > From: Sander M?gi [mailto:sander@aqris.com] 
  > Sent: Tuesday, October 02, 2001 7:58 AM 
  > To: antlr-interest@yahoogroups.com 
  > Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
  > 
  > 
  > Couldn't the codegen actually generate methods like 'statement' and 
  > 'statementGuessing' and skip the if(inputStateGuessing ==0) 
  > parts at all? 
  > 
  > Probably C++ compilers do proper inlining and make it fast, but my 
  > experience shows that in java many things that should be 'naturally 
  > optimized' are not. 
  > 
  > Sander 
  > 
  > ----- Original Message ----- 
  > From: "Ric Klaren" <klaren@cs.utwente.nl> 
  > To: <antlr-interest@yahoogroups.com> 
  > Sent: Tuesday, October 02, 2001 4:43 PM 
  > Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
  > 
  > 
  > > Hi, 
  > > 
  > > On Tue, Oct 02, 2001 at 04:40:34PM +0200, Sander M?gi wrote: 
  > > > null would give null pointer exception. The ASTpair's 
  > root and child 
  > > > variables are still read for their content like returnAst = 
  > currentAst.root. 
  > > 
  > > Ack you're right. But in the codegen these could be guarded by an 
  > > (guessing != 0) check. 
  > > 
  > > Ric 
  > > -- 
  > > 
  > -----+++++**************************************************** 
  > *+++++++++-- 
  > ----- 
  > >     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 
  > 4893722  ---- 
  > > 
  > -----+++++**************************************************** 
  > *+++++++++-- 
  > ----- 
  > >      Human beings, who are almost unique in having the 
  > ability to learn 
  > >    from the experience of others, are also remarkable for 
  > their apparent 
  > >          disinclination to do so. --- Douglas Adams, Last 
  > Chance to See 
  > > 
  > > 
  > > 
  > > 
  > > Your use of Yahoo! Groups is subject to 
  http://docs.yahoo.com/info/terms/ 
  > 
  > 
  > 



  Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 



  Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 



  Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 


  Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011003/30855e7d/attachment.html
From klaren at cs.utwente.nl  Wed Oct  3 08:38:15 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
In-Reply-To: <00ef01c14c1d$27175e50$0400a8c0@dworkin>; from sander@aqris.com on Wed, Oct 03, 2001 at 05:07:43PM +0200
References: <170826586F3BD511910D0200C110AAA801C57F6A@memail03.bco-home.com> <00ef01c14c1d$27175e50$0400a8c0@dworkin>
Message-ID: <20011003173815.B7646@cs.utwente.nl>

On Wed, Oct 03, 2001 at 05:07:43PM +0200, Sander Mägi wrote:
> RE: [antlr-interest] Is this Recognizer optimization valid?The ASTPair hack
> gave some 30% reduced garbage and 20% increased speed (on my anyway
> handoptimized lexer and recognizer)

For testing I already implemented it in my development version.

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 'And this 'rebooting' business? Give it a good kicking, do you?' 'Oh, no,
  of course, we ... that is ... well, yes, in fact,' said Ponder. 'Adrian
    goes round the back and ... er ... prods it with his foot. But in a
     technical way,' he added. --- From: Hogfather by Terry Pratchett.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at bco.com  Wed Oct  3 08:50:20 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
Message-ID: <170826586F3BD511910D0200C110AAA801C57F6C@memail03.bco-home.com>

Thanks for trying it!

Monty

-----Original Message-----
From: Sander M?gi [mailto:sander@aqris.com]
Sent: Wednesday, October 03, 2001 8:08 AM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] Is this Recognizer optimization valid?


The ASTPair hack gave some 30% reduced garbage and 20% increased speed (on
my anyway handoptimized lexer and recognizer)
 
As for the guessing state hack - I took the enormous effort (that turned out
to be 20 minutes with the help of refactoring browser I am developing) to
make a copy of recognizer and make duplicates of all methods for 'guessing
mode' by hand. This only gave some 7-8% improvement. For vanilla antlr
generated recognizer that would be 3% so it's not such a good thing.
 
Sander 
----- Original Message ----- 
From: mzukowski@bco.com 
To: antlr-interest@yahoogroups.com 
Sent: Wednesday, October 03, 2001 3:27 PM
Subject: RE: [antlr-interest] Is this Recognizer optimization valid?


Yes, you're right, you wouldn't necessarily need the guessing state as an
int, it could be boolean or implied by the code path.  Guess you would have
to try it to see how it works.
Do you know how much speed improvement you gained by your ASTPair hack? 
Monty 
-----Original Message----- 
From: Sander M?gi [mailto:sander@aqris.com] 
Sent: Wednesday, October 03, 2001 12:58 AM 
To: antlr-interest@yahoogroups.com 
Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 


> You could do that but you still have to have guessing guards around
individual productions, of course.  And you still have to increment and
decrement the > guessing state just as happens now because syntactic
predicates can be nested arbitrarily.

Are you sure? 
  
I think we would not need the guessing guard nor increment/decrement. 
  
When code sees a syntatic predicate then it would not to
'guessing++;statement();guessing--' but rather 'statementGuessing();' -
statementGuessing would call only guessing rules. It does not matter if the
predicates are nested or not because guessing mode ends only when this
statementGuessing is completed.

This is same for current mode - only currently the inputstate.guessing
becomes 2 when there is a nested predicate and 3 when yet another - it does
not matter because the guessing variable is only tested for 0/nonzero
anyway.

> Just how much guessing is your code doing? 
  
I am using java.g grammar from resources section - I really don't if it can
be optimized- I can say that the hack I sent earlyer reduced ASTPair object
generation by 30 percent (calculated this way that percentages look larger
:).

Sander 
  


You could do that but you still have to have guessing guards around
individual productions, of course.  And you still have to increment and
decrement the guessing state just as happens now because syntactic
predicates can be nested arbitrarily.
Just how much guessing is your code doing?  Some people overuse syntactic
predicates because they don't understand proper factoring of rules or they
don't think about the shortest syntactic predicate that will work.  But with
a truly ambiguous language you will have no choice but to use syntactic
predicates.

Monty 
> -----Original Message----- 
> From: Sander M?gi [mailto:sander@aqris.com] 
> Sent: Tuesday, October 02, 2001 7:58 AM 
> To: antlr-interest@yahoogroups.com 
> Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
> 
> 
> Couldn't the codegen actually generate methods like 'statement' and 
> 'statementGuessing' and skip the if(inputStateGuessing ==0) 
> parts at all? 
> 
> Probably C++ compilers do proper inlining and make it fast, but my 
> experience shows that in java many things that should be 'naturally 
> optimized' are not. 
> 
> Sander 
> 
> ----- Original Message ----- 
> From: "Ric Klaren" <klaren@cs.utwente.nl> 
> To: <antlr-interest@yahoogroups.com> 
> Sent: Tuesday, October 02, 2001 4:43 PM 
> Subject: Re: [antlr-interest] Is this Recognizer optimization valid? 
> 
> 
> > Hi, 
> > 
> > On Tue, Oct 02, 2001 at 04:40:34PM +0200, Sander M?gi wrote: 
> > > null would give null pointer exception. The ASTpair's 
> root and child 
> > > variables are still read for their content like returnAst = 
> currentAst.root. 
> > 
> > Ack you're right. But in the codegen these could be guarded by an 
> > (guessing != 0) check. 
> > 
> > Ric 
> > -- 
> > 
> -----+++++**************************************************** 
> *+++++++++-- 
> ----- 
> >     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 
> 4893722  ---- 
> > 
> -----+++++**************************************************** 
> *+++++++++-- 
> ----- 
> >      Human beings, who are almost unique in having the 
> ability to learn 
> >    from the experience of others, are also remarkable for 
> their apparent 
> >          disinclination to do so. --- Douglas Adams, Last 
> Chance to See 
> > 
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to 
http://docs.yahoo.com/info/terms/ 
> 
> 
> 


Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 

Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011003/3c1a34e3/attachment.html
From sunshine at public.kherson.ua  Wed Oct  3 12:35:42 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] problem with literal match
Message-ID: <B7E14304.112E4%sunshine@public.kherson.ua>

Hi All,

I have in grammar rule as:

-------------------------------------------------
drop_table_statement
    :    "drop"! "table"! table_name drop_behavior
    ;


in generated parser I see that in table ANTLR put literals with ""
-------------------------------------------------
const char* OBL_SQL_Parser::tokenNames[] = {
    "<0>",
    "EOF",
    ........       
    "\"drop\"",
    "\"table\"",
    "\"cascade\"",
    "\"restrict\"",
    0
};


Now I try to pass to Parser test string "DROP TABLE errors"
I see in debugger that function

int CharScanner::testLiteralsTable(int ttype) const
{
    STD::map<STD::string,int,CharScannerLiteralsLess>::const_iterator i =
literals.find(text);
    if (i != literals.end())
        ttype = (*i).second;
    return ttype;
}

DO NOT FIND first word 'DROP' in my test string.

NOTES:
** CASE is not sensitive.
** I did try testLiterals as true so false.

WHERE IS PROBLEM ???

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From wiggjd at sbu.ac.uk  Wed Oct  3 13:09:02 2001
From: wiggjd at sbu.ac.uk (David Wigg)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] ANTLR Examples - StdCParser for C
Message-ID: <3BBB705E.6A63FF3D@sbu.ac.uk>

We are trying to convert the example StdCParser.g to produce C++ code
instead of Java code.

CToken.java is one of a number of java support modules specially written
for the StdCParser.g (for Java) which we need to convert to C++.

At the moment we cannot compile our new CToken.cpp because we are left
with one compiler error on the return statement from the toString()
method which states that it cannot add two addresses together [return
"CToken:" + "(" + etc.]. This would appear to be due to the compiler not
being able to access the definition of a suitable "operator+"(?).

However, we are baffled by the fact that, though our new CToken.cpp has
been written exactly following the model of both CommonToken.cpp and
Token.cpp in the "standard" cpp libraries in which both their toString()
methods concatenate strings in the return statement and compile
successfully but our CToken.cpp does not.

I have preprocessed both our new CToken.cpp and its superclass, the
supplied CommonToken.cpp, and I cannot find any definition of an
operator+ which is in the CommonToken.cpp .i file but not in the
CToken.cpp .i file.

We are grateful for a reply from Gary Schaps to our earlier call for
help when we knew less about what was going on, but now we know that
both Token.cpp and CommonToken.cpp compile successfully in the same
project we do not see why our CToken.cpp (and with a corresponding
CToken.hpp file) written on the same lines and in the same directories
shouldn't compile as well.

If anyone would like to see our code for CToken.cpp and CToken.hpp I
will of course be pleased to send them a copy, but we have checked it
line by line against CommonToken.cpp and CommonToken.hpp and cannot see
any significant difference.

I hope the symptoms will be sufficient to trigger someones memory to
supply a solution.

Many thanks.

David
South Bank University
London, England.

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Wed Oct  3 13:22:12 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <B7E14304.112E4%sunshine@public.kherson.ua>
Message-ID: <B7E14DF1.112F9%sunshine@public.kherson.ua>

on 10/3/01 22:35, Ruslan Zasukhin at sunshine@public.kherson.ua wrote:

I wonder that may be problem is hidden that the next function is EMPTY in
generated code? 

void OBL_SQL_Lexer::initLiterals()
{
}

But then I wonder why I must init table of Literals by hands ???
And how to do this ?
I don't see nothing helpful in examples and docs.


> Hi All,
> 
> I have in grammar rule as:
> 
> -------------------------------------------------
> drop_table_statement
> :    "drop"! "table"! table_name drop_behavior
> ;
> 
> 
> in generated parser I see that in table ANTLR put literals with ""
> -------------------------------------------------
> const char* OBL_SQL_Parser::tokenNames[] = {
> "<0>",
> "EOF",
> ........       
> "\"drop\"",
> "\"table\"",
> "\"cascade\"",
> "\"restrict\"",
> 0
> };
> 
> 
> Now I try to pass to Parser test string "DROP TABLE errors"
> I see in debugger that function
> 
> int CharScanner::testLiteralsTable(int ttype) const
> {
> STD::map<STD::string,int,CharScannerLiteralsLess>::const_iterator i =
> literals.find(text);
> if (i != literals.end())
> ttype = (*i).second;
> return ttype;
> }
> 
> DO NOT FIND first word 'DROP' in my test string.
> 
> NOTES:
> ** CASE is not sensitive.
> ** I did try testLiterals as true so false.
> 
> WHERE IS PROBLEM ???

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From johnl at jbase.com  Wed Oct  3 13:34:59 2001
From: johnl at jbase.com (John Lambert)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] problem with literal match
Message-ID: <11DA90DB57270946997CE1A2095E0164436BD8@fenchurch.pdx.jbase.com>

Ruslan,

What options do you have in the lexer header?

I have

options { 
	defaultErrorHandler=false;	
	testLiterals=true; 
	caseSensitive=false; 
	caseSensitiveLiterals=false;
	charVocabulary = '\3'..'\377'; 
}


and it generates

void SQLLexer::initLiterals()
{
	literals["option"] = 51;
	literals["index"] = 43;
	literals["public"] = 30;
	literals["selectany"] = 63;
	literals["link"] = 15;

... etc ....

John


-----Original Message-----
From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
Sent: Wednesday, October 03, 2001 1:22 PM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] problem with literal match


on 10/3/01 22:35, Ruslan Zasukhin at sunshine@public.kherson.ua wrote:

I wonder that may be problem is hidden that the next function is EMPTY in
generated code? 

void OBL_SQL_Lexer::initLiterals()
{
}

But then I wonder why I must init table of Literals by hands ???
And how to do this ?
I don't see nothing helpful in examples and docs.


> Hi All,
> 
> I have in grammar rule as:
> 
> -------------------------------------------------
> drop_table_statement
> :    "drop"! "table"! table_name drop_behavior
> ;
> 
> 
> in generated parser I see that in table ANTLR put literals with ""
> -------------------------------------------------
> const char* OBL_SQL_Parser::tokenNames[] = {
> "<0>",
> "EOF",
> ........       
> "\"drop\"",
> "\"table\"",
> "\"cascade\"",
> "\"restrict\"",
> 0
> };
> 
> 
> Now I try to pass to Parser test string "DROP TABLE errors"
> I see in debugger that function
> 
> int CharScanner::testLiteralsTable(int ttype) const
> {
> STD::map<STD::string,int,CharScannerLiteralsLess>::const_iterator i =
> literals.find(text);
> if (i != literals.end())
> ttype = (*i).second;
> return ttype;
> }
> 
> DO NOT FIND first word 'DROP' in my test string.
> 
> NOTES:
> ** CASE is not sensitive.
> ** I did try testLiterals as true so false.
> 
> WHERE IS PROBLEM ???

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at bco.com  Wed Oct  3 13:36:39 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] problem with literal match
Message-ID: <170826586F3BD511910D0200C110AAA801C57F73@memail03.bco-home.com>

I vaguely remember a bug with cases and case-insensitive literals.  Try
making your literals upper case instead of lower, see if that works.

Monty 

> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
> Sent: Wednesday, October 03, 2001 1:22 PM
> To: antlr-interest@yahoogroups.com
> Subject: Re: [antlr-interest] problem with literal match
> 
> 
> on 10/3/01 22:35, Ruslan Zasukhin at sunshine@public.kherson.ua wrote:
> 
> I wonder that may be problem is hidden that the next function 
> is EMPTY in
> generated code? 
> 
> void OBL_SQL_Lexer::initLiterals()
> {
> }
> 
> But then I wonder why I must init table of Literals by hands ???
> And how to do this ?
> I don't see nothing helpful in examples and docs.
> 
> 
> > Hi All,
> > 
> > I have in grammar rule as:
> > 
> > -------------------------------------------------
> > drop_table_statement
> > :    "drop"! "table"! table_name drop_behavior
> > ;
> > 
> > 
> > in generated parser I see that in table ANTLR put literals with ""
> > -------------------------------------------------
> > const char* OBL_SQL_Parser::tokenNames[] = {
> > "<0>",
> > "EOF",
> > ........       
> > "\"drop\"",
> > "\"table\"",
> > "\"cascade\"",
> > "\"restrict\"",
> > 0
> > };
> > 
> > 
> > Now I try to pass to Parser test string "DROP TABLE errors"
> > I see in debugger that function
> > 
> > int CharScanner::testLiteralsTable(int ttype) const
> > {
> > 
> STD::map<STD::string,int,CharScannerLiteralsLess>::const_iterator i =
> > literals.find(text);
> > if (i != literals.end())
> > ttype = (*i).second;
> > return ttype;
> > }
> > 
> > DO NOT FIND first word 'DROP' in my test string.
> > 
> > NOTES:
> > ** CASE is not sensitive.
> > ** I did try testLiterals as true so false.
> > 
> > WHERE IS PROBLEM ???
> 
> -- 
> Best regards,
> Ruslan Zasukhin
> 
> -------------------------
> Paradigma.
> 
> e-mail: ruslan@paradigmasoft.com
> web   : http://www.paradigmasoft.com
> 
> To subscribe to the Valentina mail list
> send a letter to valentina-on@lists.macserve.net
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/ 
> 
> 
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011003/bd747e17/attachment.html
From johnl at jbase.com  Wed Oct  3 13:38:34 2001
From: johnl at jbase.com (John Lambert)
Date: Mon Dec 20 16:14:11 2004
Subject: [antlr-interest] problem with literal match
Message-ID: <11DA90DB57270946997CE1A2095E0164436BD9@fenchurch.pdx.jbase.com>

Monty,
 
If you use case insensitive, you need all you literals in lower case.
 
John
 

-----Original Message-----
From: mzukowski@bco.com [mailto:mzukowski@bco.com]
Sent: Wednesday, October 03, 2001 1:37 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] problem with literal match



I vaguely remember a bug with cases and case-insensitive literals.  Try
making your literals upper case instead of lower, see if that works.

Monty 

> -----Original Message----- 
> From: Ruslan Zasukhin [ mailto:sunshine@public.kherson.ua
<mailto:sunshine@public.kherson.ua> ] 
> Sent: Wednesday, October 03, 2001 1:22 PM 
> To: antlr-interest@yahoogroups.com 
> Subject: Re: [antlr-interest] problem with literal match 
> 
> 
> on 10/3/01 22:35, Ruslan Zasukhin at sunshine@public.kherson.ua wrote: 
> 
> I wonder that may be problem is hidden that the next function 
> is EMPTY in 
> generated code? 
> 
> void OBL_SQL_Lexer::initLiterals() 
> { 
> } 
> 
> But then I wonder why I must init table of Literals by hands ??? 
> And how to do this ? 
> I don't see nothing helpful in examples and docs. 
> 
> 
> > Hi All, 
> > 
> > I have in grammar rule as: 
> > 
> > ------------------------------------------------- 
> > drop_table_statement 
> > :    "drop"! "table"! table_name drop_behavior 
> > ; 
> > 
> > 
> > in generated parser I see that in table ANTLR put literals with "" 
> > ------------------------------------------------- 
> > const char* OBL_SQL_Parser::tokenNames[] = { 
> > "<0>", 
> > "EOF", 
> > ........       
> > "\"drop\"", 
> > "\"table\"", 
> > "\"cascade\"", 
> > "\"restrict\"", 
> > 0 
> > }; 
> > 
> > 
> > Now I try to pass to Parser test string "DROP TABLE errors" 
> > I see in debugger that function 
> > 
> > int CharScanner::testLiteralsTable(int ttype) const 
> > { 
> > 
> STD::map<STD::string,int,CharScannerLiteralsLess>::const_iterator i = 
> > literals.find(text); 
> > if (i != literals.end()) 
> > ttype = (*i).second; 
> > return ttype; 
> > } 
> > 
> > DO NOT FIND first word 'DROP' in my test string. 
> > 
> > NOTES: 
> > ** CASE is not sensitive. 
> > ** I did try testLiterals as true so false. 
> > 
> > WHERE IS PROBLEM ??? 
> 
> -- 
> Best regards, 
> Ruslan Zasukhin 
> 
> ------------------------- 
> Paradigma. 
> 
> e-mail: ruslan@paradigmasoft.com 
> web   : http://www.paradigmasoft.com <http://www.paradigmasoft.com>  
> 
> To subscribe to the Valentina mail list 
> send a letter to valentina-on@lists.macserve.net 
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/ <http://docs.yahoo.com/info/terms/>  
> 
> 
> 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service
<http://docs.yahoo.com/info/terms/> . 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011003/e696cc89/attachment.html
From mzukowski at bco.com  Wed Oct  3 13:47:01 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
Message-ID: <170826586F3BD511910D0200C110AAA801C57F75@memail03.bco-home.com>

Here's a bug I sent directly to Ter:

> The lexer generator puts this line _after_ inserting everything into the
literals table:
>
> caseSensitiveLiterals = false;
>
> Of course it needs to be before since ANTLRHashString depends on it to
calculate the hashCode. Doh!
>
> At least it's an easy fix.

This was for the Java code generator, but I imagine the same problem might
be in the C++ one.


Monty
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011003/92b61951/attachment.html
From sunshine at public.kherson.ua  Wed Oct  3 14:07:57 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <11DA90DB57270946997CE1A2095E0164436BD8@fenchurch.pdx.jbase.com>
Message-ID: <B7E158A9.1130C%sunshine@public.kherson.ua>

on 10/3/01 23:34, John Lambert at johnl@jbase.com wrote:

> Ruslan,
> 
> What options do you have in the lexer header?
> 
> I have
> 
> options { 
> defaultErrorHandler=false;
> testLiterals=true;
> caseSensitive=false;
> caseSensitiveLiterals=false;
> charVocabulary = '\3'..'\377';
> }
> 
> 
> and it generates
> 
> void SQLLexer::initLiterals()
> {
> literals["option"] = 51;
> literals["index"] = 43;
> literals["public"] = 30;
> literals["selectany"] = 63;
> literals["link"] = 15;

Hmm, I have the same options as I see.
and I get empty function initLiterals()

I use Rics dev version...
But I did try with 2.7.1 and it seems it also generate empty function.

I will play more.


-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Wed Oct  3 14:41:52 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <11DA90DB57270946997CE1A2095E0164436BD8@fenchurch.pdx.jbase.com>
Message-ID: <B7E160A0.1130E%sunshine@public.kherson.ua>

on 10/3/01 23:34, John Lambert at johnl@jbase.com wrote:

Well, it seems I have found at least one way when it works.

I did have Lexer and Parser in separate files. In Lexer I did have
    exportVocab=OBL_SQL

in Parser I have   
    importVocab=OBL_SQL

In this configuration ANTLR produce EMPTY initLiterals()...

When I have put Lexer into the same file as Parser It start work.
I also remove export/import options after merge...

So may be bug in ANTLR...may be I have made something wrong, but what ?


> Ruslan,
> 
> What options do you have in the lexer header?
> 
> I have
> 
> options { 
> defaultErrorHandler=false;
> testLiterals=true;
> caseSensitive=false;
> caseSensitiveLiterals=false;
> charVocabulary = '\3'..'\377';
> }
> 
> 
> and it generates
> 
> void SQLLexer::initLiterals()
> {
> literals["option"] = 51;
> literals["index"] = 43;
> literals["public"] = 30;
> literals["selectany"] = 63;
> literals["link"] = 15;
> 
> ... etc ....

> John
> 
> 
> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
> Sent: Wednesday, October 03, 2001 1:22 PM
> To: antlr-interest@yahoogroups.com
> Subject: Re: [antlr-interest] problem with literal match
> 
> 
> on 10/3/01 22:35, Ruslan Zasukhin at sunshine@public.kherson.ua wrote:
> 
> I wonder that may be problem is hidden that the next function is EMPTY in
> generated code? 
> 
> void OBL_SQL_Lexer::initLiterals()
> {
> }
> 
> But then I wonder why I must init table of Literals by hands ???
> And how to do this ?
> I don't see nothing helpful in examples and docs.
> 
> 
>> Hi All,
>> 
>> I have in grammar rule as:
>> 
>> -------------------------------------------------
>> drop_table_statement
>> :    "drop"! "table"! table_name drop_behavior
>> ;
>> 
>> 
>> in generated parser I see that in table ANTLR put literals with ""
>> -------------------------------------------------
>> const char* OBL_SQL_Parser::tokenNames[] = {
>> "<0>",
>> "EOF",
>> ........       
>> "\"drop\"",
>> "\"table\"",
>> "\"cascade\"",
>> "\"restrict\"",
>> 0
>> };
>> 
>> 
>> Now I try to pass to Parser test string "DROP TABLE errors"
>> I see in debugger that function
>> 
>> int CharScanner::testLiteralsTable(int ttype) const
>> {
>> STD::map<STD::string,int,CharScannerLiteralsLess>::const_iterator i =
>> literals.find(text);
>> if (i != literals.end())
>> ttype = (*i).second;
>> return ttype;
>> }
>> 
>> DO NOT FIND first word 'DROP' in my test string.
>> 
>> NOTES:
>> ** CASE is not sensitive.
>> ** I did try testLiterals as true so false.
>> 
>> WHERE IS PROBLEM ???

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net

From sunshine at public.kherson.ua  Wed Oct  3 14:41:52 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <11DA90DB57270946997CE1A2095E0164436BD8@fenchurch.pdx.jbase.com>
Message-ID: <B7E160A0.1130E%sunshine@public.kherson.ua>

on 10/3/01 23:34, John Lambert at johnl@jbase.com wrote:

Well, it seems I have found at least one way when it works.

I did have Lexer and Parser in separate files. In Lexer I did have
    exportVocab=OBL_SQL

in Parser I have   
    importVocab=OBL_SQL

In this configuration ANTLR produce EMPTY initLiterals()...

When I have put Lexer into the same file as Parser It start work.
I also remove export/import options after merge...

So may be bug in ANTLR...may be I have made something wrong, but what ?


> Ruslan,
> 
> What options do you have in the lexer header?
> 
> I have
> 
> options { 
> defaultErrorHandler=false;
> testLiterals=true;
> caseSensitive=false;
> caseSensitiveLiterals=false;
> charVocabulary = '\3'..'\377';
> }
> 
> 
> and it generates
> 
> void SQLLexer::initLiterals()
> {
> literals["option"] = 51;
> literals["index"] = 43;
> literals["public"] = 30;
> literals["selectany"] = 63;
> literals["link"] = 15;
> 
> ... etc ....

> John
> 
> 
> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
> Sent: Wednesday, October 03, 2001 1:22 PM
> To: antlr-interest@yahoogroups.com
> Subject: Re: [antlr-interest] problem with literal match
> 
> 
> on 10/3/01 22:35, Ruslan Zasukhin at sunshine@public.kherson.ua wrote:
> 
> I wonder that may be problem is hidden that the next function is EMPTY in
> generated code? 
> 
> void OBL_SQL_Lexer::initLiterals()
> {
> }
> 
> But then I wonder why I must init table of Literals by hands ???
> And how to do this ?
> I don't see nothing helpful in examples and docs.
> 
> 
>> Hi All,
>> 
>> I have in grammar rule as:
>> 
>> -------------------------------------------------
>> drop_table_statement
>> :    "drop"! "table"! table_name drop_behavior
>> ;
>> 
>> 
>> in generated parser I see that in table ANTLR put literals with ""
>> -------------------------------------------------
>> const char* OBL_SQL_Parser::tokenNames[] = {
>> "<0>",
>> "EOF",
>> ........       
>> "\"drop\"",
>> "\"table\"",
>> "\"cascade\"",
>> "\"restrict\"",
>> 0
>> };
>> 
>> 
>> Now I try to pass to Parser test string "DROP TABLE errors"
>> I see in debugger that function
>> 
>> int CharScanner::testLiteralsTable(int ttype) const
>> {
>> STD::map<STD::string,int,CharScannerLiteralsLess>::const_iterator i =
>> literals.find(text);
>> if (i != literals.end())
>> ttype = (*i).second;
>> return ttype;
>> }
>> 
>> DO NOT FIND first word 'DROP' in my test string.
>> 
>> NOTES:
>> ** CASE is not sensitive.
>> ** I did try testLiterals as true so false.
>> 
>> WHERE IS PROBLEM ???

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From ken at synergex.com  Wed Oct  3 15:24:57 2001
From: ken at synergex.com (Ken Lidster)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] C++ version, == nullAST
Message-ID: <EE6AF33CD83078468311279BFE568AC502EC4A@darthvader.synergex.com>

Ruslan,

I haven't worked with this code for a couple of years, but I believe this
relates to the reference counting. First, I seem to recall that in this
particular smart pointer implementation the only way to 'release' an
associated address (actually, a private, encapsulating, reference counted,
pointer object) was by either assigning another smart pointer to it, or via
destruction when the smart pointer object goes out of scope. Thus, equating
the empty nullAST object was an explicit release of the associated pointer.

Second, I believe the default extractor for the base reference class
(template RefCount<T> I think) was the address of the encapsulated pointer
object, or zero if there was nothing. Since there wasn't an explicit
clearing method and, as you noted, all of the releases were accomplished via
an equate to nullAST, the 'someAST == nullAST' had to be used to determine
if someAST was "empty".

I remember thinking back then that I would have preferred (as I mentioned
above) something like an explicit clear() or empty() method. The operation
'someAST.clear()' seems more intuitive to me than 'someAST = nullAST'. This
would also have allowed 'someAST == 0', or even '!someAST' to be true when
the smart pointer was empty. But, what we had worked and there were
deadlines to be met. You know how that goes, I'm sure.

Ken

-----Original Message-----
From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
Sent: Friday, September 28, 2001 2:25 PM
To: Ric Klaren; antlr-interest@yahoogroups.com
Subject: [antlr-interest] C++ version, == nullAST


Hi Ric,

I also note next issue.
What sense to have in C++ version special global variable

    RefCount nullASt

???

Later there is many coe that use it for comparison

    if( someAST == nullAST )

At first I did think this is again, "way of Java"...
but in Java code I see

    if( someAST == null )

So I think we must throw out from C++ version this nullAST.
This make code more clean, more similar to Java version and little faster.
Really

    if( someAST == nullAST )
                 ^^^^^^^^ here work operator that return AST*

    if( someAST == 0 )
                   ^^^^ zero overhead.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Wed Oct  3 23:46:41 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] C++ version, == nullAST
In-Reply-To: <EE6AF33CD83078468311279BFE568AC502EC4A@darthvader.synergex.com>
Message-ID: <B7E1DB8B.11345%sunshine@public.kherson.ua>

on 10/4/01 1:24, Ken Lidster at ken@synergex.com wrote:

> Ruslan,
> 
> I haven't worked with this code for a couple of years, but I believe this
> relates to the reference counting. First, I seem to recall that in this
> particular smart pointer implementation the only way to 'release' an
> associated address (actually, a private, encapsulating, reference counted,
> pointer object) was by either assigning another smart pointer to it, or via
> destruction when the smart pointer object goes out of scope. Thus, equating
> the empty nullAST object was an explicit release of the associated pointer.
> 
> Second, I believe the default extractor for the base reference class
> (template RefCount<T> I think) was the address of the encapsulated pointer
> object, or zero if there was nothing. Since there wasn't an explicit
> clearing method and, as you noted, all of the releases were accomplished via
> an equate to nullAST, the 'someAST == nullAST' had to be used to determine
> if someAST was "empty".
> 
> I remember thinking back then that I would have preferred (as I mentioned
> above) something like an explicit clear() or empty() method. The operation
> 'someAST.clear()' seems more intuitive to me than 'someAST = nullAST'. This
> would also have allowed 'someAST == 0', or even '!someAST' to be true when
> the smart pointer was empty. But, what we had worked and there were
> deadlines to be met. You know how that goes, I'm sure.

Okay, Ken I see.

But again with my implementation of Ref count pointers via classes
Sharable and SharablePtr<T> there is no above problems at all.

I can assign and test usual NULL with no problems in my code.
So if Ric accept my class he will be able remove nullAST at all.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Thu Oct  4 01:05:44 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <170826586F3BD511910D0200C110AAA801C57F75@memail03.bco-home.com>; from mzukowski@bco.com on Wed, Oct 03, 2001 at 01:47:01PM -0700
References: <170826586F3BD511910D0200C110AAA801C57F75@memail03.bco-home.com>
Message-ID: <20011004100543.D7646@cs.utwente.nl>

Hi,

On Wed, Oct 03, 2001 at 01:47:01PM -0700, mzukowski@bco.com wrote:
> Here's a bug I sent directly to Ter:
> 
> > The lexer generator puts this line _after_ inserting everything into the
> literals table:
> >
> > caseSensitiveLiterals = false;
> >
> > Of course it needs to be before since ANTLRHashString depends on it to
> > calculate the hashCode. Doh!
> >
> > At least it's an easy fix.

It's fixed in my develversion right now. (Had the file open anyway since I
screwed something up =) )

> This was for the Java code generator, but I imagine the same problem might
> be in the C++ one.

C++ handles case sensitivity differently. But tokens should probably be
entered in lower case. Hmmm I wonder why it wasn't implemented like the
java version. I'll do some testing probably to be sure.

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
     Human beings, who are almost unique in having the ability to learn
   from the experience of others, are also remarkable for their apparent
         disinclination to do so. --- Douglas Adams, Last Chance to See

From klaren at cs.utwente.nl  Thu Oct  4 01:05:44 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <170826586F3BD511910D0200C110AAA801C57F75@memail03.bco-home.com>; from mzukowski@bco.com on Wed, Oct 03, 2001 at 01:47:01PM -0700
References: <170826586F3BD511910D0200C110AAA801C57F75@memail03.bco-home.com>
Message-ID: <20011004100543.D7646@cs.utwente.nl>

Hi,

On Wed, Oct 03, 2001 at 01:47:01PM -0700, mzukowski@bco.com wrote:
> Here's a bug I sent directly to Ter:
> 
> > The lexer generator puts this line _after_ inserting everything into the
> literals table:
> >
> > caseSensitiveLiterals = false;
> >
> > Of course it needs to be before since ANTLRHashString depends on it to
> > calculate the hashCode. Doh!
> >
> > At least it's an easy fix.

It's fixed in my develversion right now. (Had the file open anyway since I
screwed something up =) )

> This was for the Java code generator, but I imagine the same problem might
> be in the C++ one.

C++ handles case sensitivity differently. But tokens should probably be
entered in lower case. Hmmm I wonder why it wasn't implemented like the
java version. I'll do some testing probably to be sure.

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
     Human beings, who are almost unique in having the ability to learn
   from the experience of others, are also remarkable for their apparent
         disinclination to do so. --- Douglas Adams, Last Chance to See


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Thu Oct  4 01:50:24 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <B7E160A0.1130E%sunshine@public.kherson.ua>; from sunshine@public.kherson.ua on Thu, Oct 04, 2001 at 12:41:52AM +0300
References: <11DA90DB57270946997CE1A2095E0164436BD8@fenchurch.pdx.jbase.com> <B7E160A0.1130E%sunshine@public.kherson.ua>
Message-ID: <20011004105023.E7646@cs.utwente.nl>

Hi,

On Thu, Oct 04, 2001 at 12:41:52AM +0300, Ruslan Zasukhin wrote:
> Well, it seems I have found at least one way when it works.
> 
> I did have Lexer and Parser in separate files. In Lexer I did have
>     exportVocab=OBL_SQL
> 
> in Parser I have   
>     importVocab=OBL_SQL
> 
> In this configuration ANTLR produce EMPTY initLiterals()...

You're doing something wrong then ;) I use the same setup daily without
problem. Maybe manually add a bit of code to your lexer and see what's in
the map? Are you using caseSensitive or caseSensitiveLiterals or both? What
are the exact options you feed to antlr?

Or maybe did you define the DROP token in your parser and not in the lexer?
This would explain why it works with lexer and parser in one file. If you
use exportvocab make sure you define *all* tokens in the lexer. In the
parser you can safely add new imaginary AST tokens but *no* lexer tokens.
Since how would the lexer know about them? (ok this could be fixed but
antlr doesn't work that way now)

> When I have put Lexer into the same file as Parser It start work.
> I also remove export/import options after merge...
> 
> So may be bug in ANTLR...may be I have made something wrong, but what ?

The import/export vocab options and lexer and parser in one/separate
file(s) is a nice thing to get right. The docs are a bit cryptic on this
point look in the archives for a complete and exhaustive discussion of the
topic. Behaviour of antlr is quite different in both cases (something I'm
lobbying against).

Hmmm I see I was not 100% correct in my previous mail... Think I have some
cleaning up to do with respect to casesensitivity.

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 'And this 'rebooting' business? Give it a good kicking, do you?' 'Oh, no,
  of course, we ... that is ... well, yes, in fact,' said Ponder. 'Adrian
    goes round the back and ... er ... prods it with his foot. But in a
     technical way,' he added. --- From: Hogfather by Terry Pratchett.

From klaren at cs.utwente.nl  Thu Oct  4 01:50:24 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <B7E160A0.1130E%sunshine@public.kherson.ua>; from sunshine@public.kherson.ua on Thu, Oct 04, 2001 at 12:41:52AM +0300
References: <11DA90DB57270946997CE1A2095E0164436BD8@fenchurch.pdx.jbase.com> <B7E160A0.1130E%sunshine@public.kherson.ua>
Message-ID: <20011004105023.E7646@cs.utwente.nl>

Hi,

On Thu, Oct 04, 2001 at 12:41:52AM +0300, Ruslan Zasukhin wrote:
> Well, it seems I have found at least one way when it works.
> 
> I did have Lexer and Parser in separate files. In Lexer I did have
>     exportVocab=OBL_SQL
> 
> in Parser I have   
>     importVocab=OBL_SQL
> 
> In this configuration ANTLR produce EMPTY initLiterals()...

You're doing something wrong then ;) I use the same setup daily without
problem. Maybe manually add a bit of code to your lexer and see what's in
the map? Are you using caseSensitive or caseSensitiveLiterals or both? What
are the exact options you feed to antlr?

Or maybe did you define the DROP token in your parser and not in the lexer?
This would explain why it works with lexer and parser in one file. If you
use exportvocab make sure you define *all* tokens in the lexer. In the
parser you can safely add new imaginary AST tokens but *no* lexer tokens.
Since how would the lexer know about them? (ok this could be fixed but
antlr doesn't work that way now)

> When I have put Lexer into the same file as Parser It start work.
> I also remove export/import options after merge...
> 
> So may be bug in ANTLR...may be I have made something wrong, but what ?

The import/export vocab options and lexer and parser in one/separate
file(s) is a nice thing to get right. The docs are a bit cryptic on this
point look in the archives for a complete and exhaustive discussion of the
topic. Behaviour of antlr is quite different in both cases (something I'm
lobbying against).

Hmmm I see I was not 100% correct in my previous mail... Think I have some
cleaning up to do with respect to casesensitivity.

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 'And this 'rebooting' business? Give it a good kicking, do you?' 'Oh, no,
  of course, we ... that is ... well, yes, in fact,' said Ponder. 'Adrian
    goes round the back and ... er ... prods it with his foot. But in a
     technical way,' he added. --- From: Hogfather by Terry Pratchett.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Thu Oct  4 02:20:20 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] test - please ignore..
Message-ID: <20011004112020.H7646@cs.utwente.nl>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Thu Oct  4 02:56:22 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] ANTLR Examples - StdCParser for C]
Message-ID: <20011004115622.I7646@cs.utwente.nl>

Hi,

(It seems this didn't make it to the list in my first attempt)

On Wed, Oct 03, 2001 at 09:09:02PM +0100, David Wigg wrote:
> We are trying to convert the example StdCParser.g to produce C++ code
> instead of Java code.

Are you also thinking of releasing this to the community ? (as an aside
note?)

> At the moment we cannot compile our new CToken.cpp because we are left with
> one compiler error on the return statement from the toString() method which
> states that it cannot add two addresses together [return "CToken:" + "(" +
> etc.]. This would appear to be due to the compiler not being able to access
> the definition of a suitable "operator+"(?).

You probably need to operator+ for int's to std strings in antlr/String.hpp

public String toString() {
	return "CToken:" +"(" + hashCode() + ")" + "[" + getType() + "] "+ getText() + " line:" + getLine() + " source:" + source ;
}

Think this should work (untested) if you include String.hpp a little bit
depending on your choices for the return of hashCode.

std::string toString( void )
{
	std::string ret("CToken:")
	ret += "(" + hashCode() + ")" + "[" + getType() + "] "+ getText() + " line:" + getLine() + " source:" + source ;
}

Other solutions might use a ostringstream but probably a bit slower
although.. with this amount of operator+ calls it might be faster.

{
	std::ostringstream ret;
	ret << "Ctoken:(" << hashCode() 
		<<	")[" << getType() << "] " << getText() 
		<< " line:" << getLine() << " source:" << source ;
	return ret.str();		
}

It may even be that you need not implement this function since it's usually
a java-ism.

> If anyone would like to see our code for CToken.cpp and CToken.hpp I
> will of course be pleased to send them a copy, but we have checked it
> line by line against CommonToken.cpp and CommonToken.hpp and cannot see
> any significant difference.

If the problem persists send it along and I might have a look at it if I
have a few spare mins.

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Time what is time - I wish I knew how to tell You why - It hurts to know -
          Aren't we machines - Time what is time - Unlock the door
               - And see the truth - Then time is time again
                From: 'Time what is Time' by Blind Guardian


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Thu Oct  4 03:00:43 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Java, apps
In-Reply-To: <4.2.0.58.20010929232452.00a30100@postoffice.trump.net.au>; from rjc@trump.net.au on Sat, Sep 29, 2001 at 11:41:23PM +1000
References: <4.2.0.58.20010925201651.01747890@postoffice.trump.net.au> <4.2.0.58.20010924215137.017417a0@postoffice.trump.net.au> <B7D5335C.10BC8%sunshine@public.kherson.ua> <4.2.0.58.20010925201651.01747890@postoffice.trump.net.au> <20010926142848.C29650@cs.utwente.nl> <4.2.0.58.20010929232452.00a30100@postoffice.trump.net.au>
Message-ID: <20011004120042.J7646@cs.utwente.nl>

Hi,

I didn't say thanks yet did I? Shame on me =)

Thanks!!

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Thu Oct  4 03:36:08 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] problem with literal match
In-Reply-To: <20011004105023.E7646@cs.utwente.nl>
Message-ID: <B7E21648.1135D%sunshine@public.kherson.ua>

on 10/4/01 11:50, Ric Klaren at klaren@cs.utwente.nl wrote:

> Or maybe did you define the DROP token in your parser and not in the lexer?
> This would explain why it works with lexer and parser in one file. If you
> use exportvocab make sure you define *all* tokens in the lexer. In the
> parser you can safely add new imaginary AST tokens but *no* lexer tokens.
> Since how would the lexer know about them? (ok this could be fixed but
> antlr doesn't work that way now)

Aha, this is my case, I think.

I did not define in lexer tokens,
just use in Parser 

    rule : "drop" "table" ...

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From david.barron at synergex.com  Thu Oct  4 07:31:10 2001
From: david.barron at synergex.com (David Barron)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RE: C++ version, == nullAST
Message-ID: <EE6AF33CD83078468311279BFE568AC568C0CF@darthvader.synergex.com>

STL uses "empty" as a predicate to determine whether the container is empty.
This should be easy to add to template RefCount < T > :

// (pseudo code)

RefCount::empty(const T &x) const
{
	return (T.pointer == NULL);
}

Making this a method of RefCount should make things more efficient.
Checking a pointer against 0 should be faster than checking someAST ==
nullAST.

STL uses "clear" is used to clear a container (or part of it).  It may not
make the code more efficient, but it would make it closer to STL, which
should make it easier for C++ people to use.

David 

-----Original Message-----
From: Ken Lidster [mailto:ken@synergex.com]
Sent: Wednesday, October 03, 2001 3:25 PM
To: 'antlr-interest@yahoogroups.com'
Subject: RE: [antlr-interest] C++ version, == nullAST


Ruslan,

I haven't worked with this code for a couple of years, but I believe this
relates to the reference counting. First, I seem to recall that in this
particular smart pointer implementation the only way to 'release' an
associated address (actually, a private, encapsulating, reference counted,
pointer object) was by either assigning another smart pointer to it, or via
destruction when the smart pointer object goes out of scope. Thus, equating
the empty nullAST object was an explicit release of the associated pointer.

Second, I believe the default extractor for the base reference class
(template RefCount<T> I think) was the address of the encapsulated pointer
object, or zero if there was nothing. Since there wasn't an explicit
clearing method and, as you noted, all of the releases were accomplished via
an equate to nullAST, the 'someAST == nullAST' had to be used to determine
if someAST was "empty".

I remember thinking back then that I would have preferred (as I mentioned
above) something like an explicit clear() or empty() method. The operation
'someAST.clear()' seems more intuitive to me than 'someAST = nullAST'. This
would also have allowed 'someAST == 0', or even '!someAST' to be true when
the smart pointer was empty. But, what we had worked and there were
deadlines to be met. You know how that goes, I'm sure.

Ken

-----Original Message-----
From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
Sent: Friday, September 28, 2001 2:25 PM
To: Ric Klaren; antlr-interest@yahoogroups.com
Subject: [antlr-interest] C++ version, == nullAST


Hi Ric,

I also note next issue.
What sense to have in C++ version special global variable

    RefCount nullASt

???

Later there is many coe that use it for comparison

    if( someAST == nullAST )

At first I did think this is again, "way of Java"...
but in Java code I see

    if( someAST == null )

So I think we must throw out from C++ version this nullAST.
This make code more clean, more similar to Java version and little faster.
Really

    if( someAST == nullAST )
                 ^^^^^^^^ here work operator that return AST*

    if( someAST == 0 )
                   ^^^^ zero overhead.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From braden at endoframe.com  Thu Oct  4 13:32:13 2001
From: braden at endoframe.com (Braden McDaniel)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] small CharInputBuffer class
In-Reply-To: <20011003122011.S7646@cs.utwente.nl>
References: <B7DFD879.111F9%sunshine@public.kherson.ua>
	<1002049338.1182.24.camel@catalyst.endoframe.com> 
	<20011003122011.S7646@cs.utwente.nl>
Message-ID: <1002227536.15333.55.camel@catalyst.endoframe.com>

On Wed, 2001-10-03 at 06:20, Ric Klaren wrote:
> Hi,
> 
> On Tue, Oct 02, 2001 at 03:05:36PM -0400, Braden McDaniel wrote:
> > Though that's probably a pretty reliable assumption, I don't think it's
> > required to be. char_traits<char>::eof() should be reliable, though.
> 
> How many compilers support it though. A while back not too many...

I couldn't say with certainty. Since this is really a standard library
issue, my guess is that gcc < 3.0 is the straggler since it's standard
IOStreams implementation is basically nonexistent. As gcc 3 gains
maturity and distribution, the standard C++ IOStreams will be a more
reliable solution for many projects.

-- 
Braden McDaniel                           e-mail: <braden@endoframe.com>
<http://endoframe.com>                    Jabber: <braden@jabber.org>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From ken at synergex.com  Thu Oct  4 13:37:52 2001
From: ken at synergex.com (Ken Lidster)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] C++ version, == nullAST
Message-ID: <EE6AF33CD83078468311279BFE568AC502EC4B@darthvader.synergex.com>

Rusian,

I agree that there are better ways to do this. I was just answering your
original question on why that specific implementation required the nullAST
entry and its various references. It sounds like something along the lines
of your design would allow cleaner code.

Ken

-----Original Message-----
From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
Sent: Wednesday, October 03, 2001 11:47 PM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] C++ version, == nullAST


on 10/4/01 1:24, Ken Lidster at ken@synergex.com wrote:

> Ruslan,
> 
> I haven't worked with this code for a couple of years, but I believe this
> relates to the reference counting. First, I seem to recall that in this
> particular smart pointer implementation the only way to 'release' an
> associated address (actually, a private, encapsulating, reference counted,
> pointer object) was by either assigning another smart pointer to it, or
via
> destruction when the smart pointer object goes out of scope. Thus,
equating
> the empty nullAST object was an explicit release of the associated
pointer.
> 
> Second, I believe the default extractor for the base reference class
> (template RefCount<T> I think) was the address of the encapsulated pointer
> object, or zero if there was nothing. Since there wasn't an explicit
> clearing method and, as you noted, all of the releases were accomplished
via
> an equate to nullAST, the 'someAST == nullAST' had to be used to determine
> if someAST was "empty".
> 
> I remember thinking back then that I would have preferred (as I mentioned
> above) something like an explicit clear() or empty() method. The operation
> 'someAST.clear()' seems more intuitive to me than 'someAST = nullAST'.
This
> would also have allowed 'someAST == 0', or even '!someAST' to be true when
> the smart pointer was empty. But, what we had worked and there were
> deadlines to be met. You know how that goes, I'm sure.

Okay, Ken I see.

But again with my implementation of Ref count pointers via classes
Sharable and SharablePtr<T> there is no above problems at all.

I can assign and test usual NULL with no problems in my code.
So if Ric accept my class he will be able remove nullAST at all.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From greenj at ix.netcom.com  Thu Oct  4 18:03:41 2001
From: greenj at ix.netcom.com (John Green)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RE: C++ version, == nullAST
In-Reply-To: <EE6AF33CD83078468311279BFE568AC568C0CF@darthvader.synergex.com>
Message-ID: <NEBBJKNCALMJLNPAAMECOEKLEDAA.johnallengreen@yahoo.com>

I really like this line of thinking. As the C++ codegen for ANTLR evolves, I
for one would be very happy to see it doing things "the STL way".

I'd also be happy to see the Boost libraries taken advantage of. Has
boost::shared_ptr every been considered or discussed? (I haven't looked into
it...)

John


> -----Original Message-----
> From: David Barron [mailto:david.barron@synergex.com]
> Sent: Friday, October 05, 2001 12:31 AM
> To: 'antlr-interest@yahoogroups.com'
> Subject: [antlr-interest] RE: C++ version, == nullAST
>
>
> STL uses "empty" as a predicate to determine whether the
> container is empty.
> This should be easy to add to template RefCount < T > :
>
> // (pseudo code)
>
> RefCount::empty(const T &x) const
> {
> 	return (T.pointer == NULL);
> }
>
> Making this a method of RefCount should make things more efficient.
> Checking a pointer against 0 should be faster than checking someAST ==
> nullAST.
>
> STL uses "clear" is used to clear a container (or part of it).  It may not
> make the code more efficient, but it would make it closer to STL, which
> should make it easier for C++ people to use.
>
> David


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Fri Oct  5 05:10:59 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: RFC: slight change in ! semantics
Message-ID: <20011005141058.A16139@cs.utwente.nl>

Hi,

While porting over my more aggressive AST element declaration generation
scheme from C++ to java I stumbled on a showstopper...

Consider a rule like this (from the java 1.3 grammar):

classDefinition ! [AST modifiers]
	:	"class" IDENT
		// it _might_ have a superclass...
		sc:superClassClause
		// it might implement some interfaces...
		ic:implementsClause
		// now parse the body of the class
		cb:classBlock
		{#classDefinition = #(#[CLASS_DEF,"CLASS_DEF"],
							   modifiers,IDENT,sc,ic,cb);}
	;

The problem is the use of IDENT in the action code and the use of the !
operator. Because the ast generation is turned of no declaration for the
AST for IDENT is made, and I have no nice way of finding out that IDENT is
used in the action (prescanning the action will be ugly AFAIK). I always
used the ! as nothing gets generated and so I always label these tokens in
these cases upon reading the docs it turns out that ANTLR indeed supports
the above (another of these little inconsistencies).

So the options are:
1) No optimization and generate 'sloppy' code until a later release.
2) Label the IDENT and use the label in cases like this.
3) always generate declarations for things like IDENT (not for things like 
   "class" since you can't reference it in actions (can't?) )
4) Making it configurable.

4 is not really a option for me, this just makes a lot of ugly stuff more
ugly.

1 well though luck for me :) put some pieces of code in the fridge.
2 tough luck for the others ;) let them label stuff, it's imho a bit more
consistent to make explicit labeling the default, in stead of ''yah this
turns of all tree generation oh wait a sec no not for tokens.''
3 Sort of the golden middle. It keeps some people like Ruslan ;) slightly
  disgruntled, but nobody has to 'relabel' their grammars.

Well let me know what you think people..

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
Wit is cultured insolence. - Aristotle

From klaren at cs.utwente.nl  Fri Oct  5 05:10:59 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
Message-ID: <20011005141058.A16139@cs.utwente.nl>

Hi,

While porting over my more aggressive AST element declaration generation
scheme from C++ to java I stumbled on a showstopper...

Consider a rule like this (from the java 1.3 grammar):

classDefinition ! [AST modifiers]
	:	"class" IDENT
		// it _might_ have a superclass...
		sc:superClassClause
		// it might implement some interfaces...
		ic:implementsClause
		// now parse the body of the class
		cb:classBlock
		{#classDefinition = #(#[CLASS_DEF,"CLASS_DEF"],
							   modifiers,IDENT,sc,ic,cb);}
	;

The problem is the use of IDENT in the action code and the use of the !
operator. Because the ast generation is turned of no declaration for the
AST for IDENT is made, and I have no nice way of finding out that IDENT is
used in the action (prescanning the action will be ugly AFAIK). I always
used the ! as nothing gets generated and so I always label these tokens in
these cases upon reading the docs it turns out that ANTLR indeed supports
the above (another of these little inconsistencies).

So the options are:
1) No optimization and generate 'sloppy' code until a later release.
2) Label the IDENT and use the label in cases like this.
3) always generate declarations for things like IDENT (not for things like 
   "class" since you can't reference it in actions (can't?) )
4) Making it configurable.

4 is not really a option for me, this just makes a lot of ugly stuff more
ugly.

1 well though luck for me :) put some pieces of code in the fridge.
2 tough luck for the others ;) let them label stuff, it's imho a bit more
consistent to make explicit labeling the default, in stead of ''yah this
turns of all tree generation oh wait a sec no not for tokens.''
3 Sort of the golden middle. It keeps some people like Ruslan ;) slightly
  disgruntled, but nobody has to 'relabel' their grammars.

Well let me know what you think people..

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
Wit is cultured insolence. - Aristotle


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Matthew.Ford at forward.com.au  Fri Oct  5 05:50:36 2001
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
References: <20011005141058.A16139@cs.utwente.nl>
Message-ID: <001201c14d9c$57f6bef0$0300a8c0@matthewfnb>

I vote for 2)
> 2) Label the IDENT and use the label in cases like this.

The "Draft specification for Antlr Tree Generation" I posted a short while
back read
....
Example of a rule based use of ! to disable tree generation

addition!
    :   INT PLUS i:INT
;

In this case no tree generation code is generated for this rule.  If you
want to create a tree by hand for this rule you need to return it as shown
below
addition returns [AST return_tree]!
   :   INT PLUS i:INT  { .. code to generate return_tree }
;


So I suggest this be relaxed a little to say that
No tree generation code is output except that labels in the rule are
initialized with the appropriate minimal tree.
.....


----- Original Message -----
From: "Ric Klaren" <klaren@cs.utwente.nl>
To: "ANTLR mailinglist" <antlr-interest@yahoogroups.com>
Cc: "Terence Parr" <parrt@jguru.com>
Sent: Friday, October 05, 2001 10:10 PM
Subject: [antlr-interest] RFC: slight change in ! semantics


> Hi,
>
> While porting over my more aggressive AST element declaration generation
> scheme from C++ to java I stumbled on a showstopper...
>
> Consider a rule like this (from the java 1.3 grammar):
>
> classDefinition ! [AST modifiers]
> : "class" IDENT
> // it _might_ have a superclass...
> sc:superClassClause
> // it might implement some interfaces...
> ic:implementsClause
> // now parse the body of the class
> cb:classBlock
> {#classDefinition = #(#[CLASS_DEF,"CLASS_DEF"],
>    modifiers,IDENT,sc,ic,cb);}
> ;
>
> The problem is the use of IDENT in the action code and the use of the !
> operator. Because the ast generation is turned of no declaration for the
> AST for IDENT is made, and I have no nice way of finding out that IDENT is
> used in the action (prescanning the action will be ugly AFAIK). I always
> used the ! as nothing gets generated and so I always label these tokens in
> these cases upon reading the docs it turns out that ANTLR indeed supports
> the above (another of these little inconsistencies).
>
> So the options are:
> 1) No optimization and generate 'sloppy' code until a later release.
> 2) Label the IDENT and use the label in cases like this.
> 3) always generate declarations for things like IDENT (not for things like
>    "class" since you can't reference it in actions (can't?) )
> 4) Making it configurable.
>
> 4 is not really a option for me, this just makes a lot of ugly stuff more
> ugly.
>
> 1 well though luck for me :) put some pieces of code in the fridge.
> 2 tough luck for the others ;) let them label stuff, it's imho a bit more
> consistent to make explicit labeling the default, in stead of ''yah this
> turns of all tree generation oh wait a sec no not for tokens.''
> 3 Sort of the golden middle. It keeps some people like Ruslan ;) slightly
>   disgruntled, but nobody has to 'relabel' their grammars.
>
> Well let me know what you think people..
>
> Cheers,
>
> Ric
> --
> -----+++++*****************************************************+++++++++--
-----
>     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
> -----+++++*****************************************************+++++++++--
-----
> Wit is cultured insolence. - Aristotle
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Fri Oct  5 06:38:19 2001
From: sander at aqris.com (=?Windows-1252?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Somewhat tested optimizations to java.g - can anybody confirm correctness?
Message-ID: <000b01c14da2$ff1017d0$0400a8c0@dworkin>

Hi

I tried to reduce semantic predicates in sample java.g.

I am pretty new to ANTLR and grammars in general.

Maybe somebody more experienced could confirm this is correct - (I have
already tested it with hundreds of kilobytes of code, but still)

thanks in advance,
Sander M?gi


change 1:
WAS: (declaration)=> declaration SEMI!
CHANGE TO: (modifiers typeSpec[false] IDENT)=> declaration SEMI!
BENEFIT: it also did variable initializers, that sometimes were quite long
(especially when defining anonymous inners, or ANTLR bitsets :)

change 2:
WAS:
unaryExpressionNotPlusMinus
 : BNOT^ unaryExpression
 | LNOT^ unaryExpression

 | ( // subrule allows option to shut off warnings
   options {
    // "(int" ambig with postfixExpr due to lack of sequence
    // info in linear approximate LL(k).  It's ok.  Shut up.
    generateAmbigWarnings=false;
   }
  : // If typecast is built in type, must be numeric operand
   // Also, no reason to backtrack if type keyword like int, float...
   lpb:LPAREN^ {#lpb.setType(TYPECAST);} builtInTypeSpec[true] RPAREN!
   unaryExpression

   // Have to backtrack to see if operator follows.  If no operator
   // follows, it's a typecast.  No semantic checking needed to parse.
   // if it _looks_ like a cast, it _is_ a cast; else it's a "(expr)"
  | (LPAREN classTypeSpec[true] RPAREN unaryExpressionNotPlusMinus)=>
   lp:LPAREN^ {#lp.setType(TYPECAST);} classTypeSpec[true] RPAREN!
   unaryExpressionNotPlusMinus
  | postfixExpression
  )
 ;

CHANGED TO:
castLookahead
 :
   LPAREN^ (typeSpec[true] LBRACE^ RBRACE^) |
   ( classTypeSpec[true] RPAREN^ (BNOT^ | LNOT^ |LPAREN^ | IDENT^ | "this" |
"super" | "new" | NUM_INT^ | NUM_FLOAT^ | CHAR_LITERAL^ |STRING_LITERAL^ |
"true" | "false" | "null"))
 ;

unaryExpressionNotPlusMinus
 : BNOT^ unaryExpression
 | LNOT^ unaryExpression

 | ( // subrule allows option to shut off warnings
   options {
    // "(int" ambig with postfixExpr due to lack of sequence
    // info in linear approximate LL(k).  It's ok.  Shut up.
    generateAmbigWarnings=false;
   }
  : // If typecast is built in type, must be numeric operand
   // Also, no reason to backtrack if type keyword like int, float...
   lpb:LPAREN^ {#lpb.setType(TYPECAST);} builtInTypeSpec[true] RPAREN!
   unaryExpression

   // Have to backtrack to see if operator follows.  If no operator
   // follows, it's a typecast.  No semantic checking needed to parse.
   // if it _looks_ like a cast, it _is_ a cast; else it's a "(expr)"
  | (castLookahead)=>
   lp:LPAREN^ {#lp.setType(TYPECAST);} classTypeSpec[true] RPAREN!
   unaryExpressionNotPlusMinus

  | postfixExpression
  )
 ;


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Fri Oct  5 06:33:16 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <20011005141058.A16139@cs.utwente.nl>
Message-ID: <B7E39081.11424%sunshine@public.kherson.ua>

on 10/5/01 15:10, Ric Klaren at klaren@cs.utwente.nl wrote:

> So the options are:
> 1) No optimization and generate 'sloppy' code until a later release.
> 2) Label the IDENT and use the label in cases like this.
> 3) always generate declarations for things like IDENT (not for things like
> "class" since you can't reference it in actions (can't?) )
                     ^^^^^^^^^^^^^^^^^^ only after adding label I think.

> 4) Making it configurable.
> 
> 4 is not really a option for me, this just makes a lot of ugly stuff more
> ugly.
> 
> 1 well though luck for me :) put some pieces of code in the fridge.
> 2 tough luck for the others ;) let them label stuff, it's imho a bit more
> consistent to make explicit labeling the default, in stead of ''yah this
> turns of all tree generation oh wait a sec no not for tokens.''
> 3 Sort of the golden middle. It keeps some people like Ruslan ;) slightly
> disgruntled, but nobody has to 'relabel' their grammars.
> 
> Well let me know what you think people..

Hi Ric, 

OF COURSE you must provide backward compatibility. People must not relable
already existed grammars.

So in fact we have only 2 ways to make things better:
> 3) always generate declarations for things like IDENT (not for things like
> "class" since you can't reference it in actions (can't?) )
> 4) Making it configurable.
 
Yes, 3) is not yet optimal but make things better that right now. Agree.
So this is the minimal target you should do.

And if this is not huge amount of work, why not to make it configurable and
WRITE DOWN that ANTLR in future versions will go to this more optimal way.
On default optimization must be OFF, for existed grammars. Everybody who
develop new grammar will set it ON and will enjoy by better code.


-------------
BTW, I still wonder on internal generation code algorithm.
I have not yet look into code, but it very sounds to me that
ANTL read some token of grammar and immediately generate code.

Why ???

Why the GREAT tool that we all use to make compilers,
in most cases the multi-pass compilers:
-- parse and build AST for the whole file
-- optimize tree 
-- generate code

can not self do this in several passes ???

Why ANTLR can not parse the whole grammar and build in RAM AST tree,
later analyze and optimize tree, and only after this generate PERFECT code.

I believe this is possible.
And I believe that such cool man as Terr, can develop such solution.

I do not think that looking into semantic action to see WHAT tokens are used
in it is bad idea.

-----------
As for me, I going following Ian technique create custom AST tree and not
use default AST trees. Unfortunately this way cause that in each rule I must
add init section

rule returns [myNode* result]s
{                  
    myNodeT* t3;   
    int t4;
}
    : "drop" "table" t3 = table t4 = drop_behavior
        {
            result = new myNode( t3, t4 );
        }
    ;

table returns [myNodeT* result ] : .....;
drop_behavior returns [int result ] : ....;

But if ANTLR will be smart, and if it will be able look by AST tree,
and to see that type of t3 must be myNodeT,
and the type of t4 must be int
then ANTLR could generate correct code using the next grammar only:

rule returns [myNode* result]s
    : "drop" "table" t3 = table t4 = drop_behavior
        {
            result = new myNode( t3, t4 );
        }
    ;


I know this is possible in principle.
I WANT THIS TO SEE IN NEAREST ANTLR versions !!!  :-)

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net

From sunshine at public.kherson.ua  Fri Oct  5 06:33:16 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <20011005141058.A16139@cs.utwente.nl>
Message-ID: <B7E39081.11424%sunshine@public.kherson.ua>

on 10/5/01 15:10, Ric Klaren at klaren@cs.utwente.nl wrote:

> So the options are:
> 1) No optimization and generate 'sloppy' code until a later release.
> 2) Label the IDENT and use the label in cases like this.
> 3) always generate declarations for things like IDENT (not for things like
> "class" since you can't reference it in actions (can't?) )
                     ^^^^^^^^^^^^^^^^^^ only after adding label I think.

> 4) Making it configurable.
> 
> 4 is not really a option for me, this just makes a lot of ugly stuff more
> ugly.
> 
> 1 well though luck for me :) put some pieces of code in the fridge.
> 2 tough luck for the others ;) let them label stuff, it's imho a bit more
> consistent to make explicit labeling the default, in stead of ''yah this
> turns of all tree generation oh wait a sec no not for tokens.''
> 3 Sort of the golden middle. It keeps some people like Ruslan ;) slightly
> disgruntled, but nobody has to 'relabel' their grammars.
> 
> Well let me know what you think people..

Hi Ric, 

OF COURSE you must provide backward compatibility. People must not relable
already existed grammars.

So in fact we have only 2 ways to make things better:
> 3) always generate declarations for things like IDENT (not for things like
> "class" since you can't reference it in actions (can't?) )
> 4) Making it configurable.
 
Yes, 3) is not yet optimal but make things better that right now. Agree.
So this is the minimal target you should do.

And if this is not huge amount of work, why not to make it configurable and
WRITE DOWN that ANTLR in future versions will go to this more optimal way.
On default optimization must be OFF, for existed grammars. Everybody who
develop new grammar will set it ON and will enjoy by better code.


-------------
BTW, I still wonder on internal generation code algorithm.
I have not yet look into code, but it very sounds to me that
ANTL read some token of grammar and immediately generate code.

Why ???

Why the GREAT tool that we all use to make compilers,
in most cases the multi-pass compilers:
-- parse and build AST for the whole file
-- optimize tree 
-- generate code

can not self do this in several passes ???

Why ANTLR can not parse the whole grammar and build in RAM AST tree,
later analyze and optimize tree, and only after this generate PERFECT code.

I believe this is possible.
And I believe that such cool man as Terr, can develop such solution.

I do not think that looking into semantic action to see WHAT tokens are used
in it is bad idea.

-----------
As for me, I going following Ian technique create custom AST tree and not
use default AST trees. Unfortunately this way cause that in each rule I must
add init section

rule returns [myNode* result]s
{                  
    myNodeT* t3;   
    int t4;
}
    : "drop" "table" t3 = table t4 = drop_behavior
        {
            result = new myNode( t3, t4 );
        }
    ;

table returns [myNodeT* result ] : .....;
drop_behavior returns [int result ] : ....;

But if ANTLR will be smart, and if it will be able look by AST tree,
and to see that type of t3 must be myNodeT,
and the type of t4 must be int
then ANTLR could generate correct code using the next grammar only:

rule returns [myNode* result]s
    : "drop" "table" t3 = table t4 = drop_behavior
        {
            result = new myNode( t3, t4 );
        }
    ;


I know this is possible in principle.
I WANT THIS TO SEE IN NEAREST ANTLR versions !!!  :-)

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Fri Oct  5 06:52:01 2001
From: sander at aqris.com (=?Windows-1252?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Somewhat tested optimizations to java.g - can anybody confirm correctness?
References: <000b01c14da2$ff1017d0$0400a8c0@dworkin>
Message-ID: <001d01c14da4$e89293a0$0400a8c0@dworkin>

replyng again to my own message:

I made a mistake in testing - the castLookahead thing does not work :(

Sander

----- Original Message -----
From: "Sander M?gi" <sander@aqris.com>
To: "ANTLR" <antlr-interest@yahoogroups.com>
Sent: Friday, October 05, 2001 3:38 PM
Subject: [antlr-interest] Somewhat tested optimizations to java.g - can
anybody confirm correctness?


> Hi
>
> I tried to reduce semantic predicates in sample java.g.
>
> I am pretty new to ANTLR and grammars in general.
>
> Maybe somebody more experienced could confirm this is correct - (I have
> already tested it with hundreds of kilobytes of code, but still)
>
> thanks in advance,
> Sander M?gi
>
>
> change 1:
> WAS: (declaration)=> declaration SEMI!
> CHANGE TO: (modifiers typeSpec[false] IDENT)=> declaration SEMI!
> BENEFIT: it also did variable initializers, that sometimes were quite long
> (especially when defining anonymous inners, or ANTLR bitsets :)
>
> change 2:
> WAS:
> unaryExpressionNotPlusMinus
>  : BNOT^ unaryExpression
>  | LNOT^ unaryExpression
>
>  | ( // subrule allows option to shut off warnings
>    options {
>     // "(int" ambig with postfixExpr due to lack of sequence
>     // info in linear approximate LL(k).  It's ok.  Shut up.
>     generateAmbigWarnings=false;
>    }
>   : // If typecast is built in type, must be numeric operand
>    // Also, no reason to backtrack if type keyword like int, float...
>    lpb:LPAREN^ {#lpb.setType(TYPECAST);} builtInTypeSpec[true] RPAREN!
>    unaryExpression
>
>    // Have to backtrack to see if operator follows.  If no operator
>    // follows, it's a typecast.  No semantic checking needed to parse.
>    // if it _looks_ like a cast, it _is_ a cast; else it's a "(expr)"
>   | (LPAREN classTypeSpec[true] RPAREN unaryExpressionNotPlusMinus)=>
>    lp:LPAREN^ {#lp.setType(TYPECAST);} classTypeSpec[true] RPAREN!
>    unaryExpressionNotPlusMinus
>   | postfixExpression
>   )
>  ;
>
> CHANGED TO:
> castLookahead
>  :
>    LPAREN^ (typeSpec[true] LBRACE^ RBRACE^) |
>    ( classTypeSpec[true] RPAREN^ (BNOT^ | LNOT^ |LPAREN^ | IDENT^ | "this"
|
> "super" | "new" | NUM_INT^ | NUM_FLOAT^ | CHAR_LITERAL^ |STRING_LITERAL^ |
> "true" | "false" | "null"))
>  ;
>
> unaryExpressionNotPlusMinus
>  : BNOT^ unaryExpression
>  | LNOT^ unaryExpression
>
>  | ( // subrule allows option to shut off warnings
>    options {
>     // "(int" ambig with postfixExpr due to lack of sequence
>     // info in linear approximate LL(k).  It's ok.  Shut up.
>     generateAmbigWarnings=false;
>    }
>   : // If typecast is built in type, must be numeric operand
>    // Also, no reason to backtrack if type keyword like int, float...
>    lpb:LPAREN^ {#lpb.setType(TYPECAST);} builtInTypeSpec[true] RPAREN!
>    unaryExpression
>
>    // Have to backtrack to see if operator follows.  If no operator
>    // follows, it's a typecast.  No semantic checking needed to parse.
>    // if it _looks_ like a cast, it _is_ a cast; else it's a "(expr)"
>   | (castLookahead)=>
>    lp:LPAREN^ {#lp.setType(TYPECAST);} classTypeSpec[true] RPAREN!
>    unaryExpressionNotPlusMinus
>
>   | postfixExpression
>   )
>  ;
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Fri Oct  5 07:14:48 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <B7E39081.11424%sunshine@public.kherson.ua>; from sunshine@public.kherson.ua on Fri, Oct 05, 2001 at 04:33:16PM +0300
References: <20011005141058.A16139@cs.utwente.nl> <B7E39081.11424%sunshine@public.kherson.ua>
Message-ID: <20011005161448.B16139@cs.utwente.nl>

Hi,

On Fri, Oct 05, 2001 at 04:33:16PM +0300, Ruslan Zasukhin wrote:
> > "class" since you can't reference it in actions (can't?) )
>                      ^^^^^^^^^^^^^^^^^^ only after adding label I think.

Indeed doesn't work tested it just now.

> Yes, 3) is not yet optimal but make things better that right now. Agree.
> So this is the minimal target you should do.

Just finished figuring out how to do this and doing some tweaking. Unless
the general opinion goes another direction than 3.

> And if this is not huge amount of work, why not to make it configurable and
> WRITE DOWN that ANTLR in future versions will go to this more optimal way.
> On default optimization must be OFF, for existed grammars. Everybody who
> develop new grammar will set it ON and will enjoy by better code.

See my opinion on making it configurable I'm not doing it (nor accepting
patches for it).

> BTW, I still wonder on internal generation code algorithm.
> I have not yet look into code, but it very sounds to me that
> ANTL read some token of grammar and immediately generate code.

It's indeed an one-pass-ish implementation and yes it's unpractical. After
2.7.2 I'll start restructuring things for 3.0, after hacking around this
latest optimization I must say I'm sick and tired of it. Multipass parsing
will certainly be a feature in 3.0.

> Why ???

>
> Why the GREAT tool that we all use to make compilers,
> in most cases the multi-pass compilers:
> -- parse and build AST for the whole file
> -- optimize tree
> -- generate code
>
> can not self do this in several passes ???

Because we have to rewrite it (at least partly) to do this. And there's no
one paid to do this, so I guess no one get's annoyed enough with the
current implementation to do some rewriting, since we're all very busy ppl,
so we keep having a one pass thing. After the 2.7.2 release I for one am
going to do some restructuring, I don't want to kludge around these
limitations anymore.

> Why ANTLR can not parse the whole grammar and build in RAM AST tree,
> later analyze and optimize tree, and only after this generate PERFECT code.

Of course this is possible it only needs to be done see time remarks above.

> I do not think that looking into semantic action to see WHAT tokens are used
> in it is bad idea.

It isn't only in the current implementation it's a d*mn PITA. And basically
not worth doing, because around every corner you'll run into another
problem.

> I WANT THIS TO SEE IN NEAREST ANTLR versions !!!  :-)

Somewhere in 5 years a 2.7.2 release, seems like a nice schedule for a
perfect version ? >:-(

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Time what is time - I wish I knew how to tell You why - It hurts to know -
          Aren't we machines - Time what is time - Unlock the door
               - And see the truth - Then time is time again
                From: 'Time what is Time' by Blind Guardian

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Fri Oct  5 08:13:13 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <20011005161448.B16139@cs.utwente.nl>
Message-ID: <B7E3A839.1143E%sunshine@public.kherson.ua>

on 10/5/01 17:14, Ric Klaren at klaren@cs.utwente.nl wrote:

>> can not self do this in several passes ???
> 
> Because we have to rewrite it (at least partly) to do this. And there's no
> one paid to do this, so I guess no one get's annoyed enough with the
> current implementation to do some rewriting, since we're all very busy ppl,
> so we keep having a one pass thing. After the 2.7.2 release I for one am
> going to do some restructuring, I don't want to kludge around these
> limitations anymore.

Terr have mention that somebody now work on new algorithms, remember?

Do you know him ?

May be together you will make better code ? :-)

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Fri Oct  5 08:23:39 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <B7E3A839.1143E%sunshine@public.kherson.ua>; from sunshine@public.kherson.ua on Fri, Oct 05, 2001 at 06:13:13PM +0300
References: <20011005161448.B16139@cs.utwente.nl> <B7E3A839.1143E%sunshine@public.kherson.ua>
Message-ID: <20011005172339.E16139@cs.utwente.nl>

Hi,

On Fri, Oct 05, 2001 at 06:13:13PM +0300, Ruslan Zasukhin wrote:
> Terr have mention that somebody now work on new algorithms, remember?

Yeah, but probably on old code base.

> Do you know him ?

Nope. No contact with the guy. Before really starting with antlr 3 we
probably need to build a real wish list. Identify problems with the current
implementation and then do some serious rearchitecting. First problem is
getting hold of Terence though =), somebody got a black van we can borrow
so we can abduct him?

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Time what is time - I wish I knew how to tell You why - It hurts to know -
          Aren't we machines - Time what is time - Unlock the door
               - And see the truth - Then time is time again
                From: 'Time what is Time' by Blind Guardian


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mtiller at ford.com  Fri Oct  5 12:13:41 2001
From: mtiller at ford.com (Tiller, Michael (M.M.))
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Newbie Question
Message-ID: <200110051913.f95JDqm00424@dymwsm11.mailwatch.com>

I'm still trying to understand how to make the best use of ANTLR.  I'd like to describe a simple scenario (that I am currently faced with) and ask a few questions about it...
 
As a side project, I would like to build a tool that will check some source code against some style guidelines that we have internally.  Toward this end, I have developed a lexer and parser already that can parse the language that I am interested in.  So far, so good.
 
At this point, it seems to me that I have the pieces for turning the characters into tokens and then tokens into productions.  Now what I want to do is walk the tree that gets generated by the parser.
 
It seems ugly to actually add my style checking guidelines to the grammar because I might want to use the grammar at some point for some other applications.  My understanding is that I should probably write a tree walker that is specific to my current application and leave the grammar alone.  This protects for future applications.  Is my understanding correct in this regard?
 
So, I am currently (perhaps misguidedly) looking at building a tree walker.  But this brings up what seems like an important issue with the grammar.  What kinds of tree construction markup should I do to the grammar to get something that will be easy to walk?  In most of the markups of grammars, I see lines like:
 
declaration
  : type ^IDENT SEMI!
  ;
 
The tree node will now have an IDENT token as the root of the declaration.  This seems like it would make finding a declaration very difficult because your tree would be something like:
 
#(IDENT <type info>)
 
Is my understanding of this correct?
 
It seems like a much better way would be to provide tree node types for the productions so it would be more like:
 
#(DECLARATION type name)
 
Am I correct in assuming that ANTLR doesn't do something like this because the tree would get really cluttered with production names as well as tokens?  So, it would seem you might want to selectively choose the most important productions to use for nodes.  In this case, should protected tokens be introduced in the lexer for this purpose?  I'm guessing that this is why the 'GNU C' grammar in the resources section of the ANTLR web page has things like this:
 
declaration
        : ds:declSpecifiers (initDeclList[ds1])? ( SEMI )+
              { ## = #( #[NDeclaration], ##); }
        ;
 
Am I correct in assuming that this attempting to create a node with a root of 'NDeclaration' so that this is easier to identify later on?
 
For my application, it seems quite reasonable to identify certain key structural pieces and do things like the above.  If I start doing this, I would like to protect for the possibility of having both Java and C++ tree walkers.  Is it, in general, possible to build a parser grammar with markups and so on without having to write any target language specific actions?  I assume this would be the goal if somebody were trying to develop a language neutral grammar?
 
>>From a software engineering perspective, it seems somewhat strange that the treewalker mimics the structure of the grammar so heavily.  It seems like this is pretty redundant.  The tree walkers don't follow the exact same structure as the grammar, but I'm trying to understand the relationship between the two structures and what the implications are if the grammar structure is changed.  It seems like it would be pretty undesirable to have changes in the grammar creating lots of problems in a tree walker if the grammar change was only a minor syntactical modification.  How do you avoid these kinds of issues?
 
Finally, I haven't had enough experience playing around with the tree walkers, but I recall that there is some mention in the documentation about the matching rules being different for tree walkers.  I can go back and read the rules again, but I have a bigger question than how the rules work.  What I want to understand are the implications.  It seems as though the tree walking is designed so that you don't have to mimic the grammar structure but instead you can just pluck patterns you are interested in out of the tree generated by the parser.  Do these matching rules for tree parsers essentially mean that you can get away with this (i.e. only writing rules for particular patterns you are interested in)?  Does this, to some extent, mitigate the problems of grammar changes causing lots of tearup in the tree walker?
 
I guess my overall impression (although I haven't had enough time to actually try much of this out so far) is that it would be important to markup the grammar so that the resulting tree distills out much of the tiny syntax minutiae and instead try and capture (in the tree being built) the fundamental structure.  In other words, a declaration consists of a name, type information and possibly array size but you would avoid recording things like the braces or the semicolon in the tree.  If you assume that the fundamental structure (i.e. all declarations have a type and name) isn't likely to change then changes in the grammar wouldn't really propagate to the tree walker.
 
Is (any of) this correct? :-)
 
Thanks
 
--
Mike
 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011005/f3401f64/attachment.html
From wiggjd at sbu.ac.uk  Fri Oct  5 14:22:11 2001
From: wiggjd at sbu.ac.uk (David Wigg)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] ANTLR Examples - StdCParser for C++
Message-ID: <3BBE2483.F739A890@sbu.ac.uk>

We are trying to convert the example StdCParser.g to produce C++ code
instead of Java code.

CToken.java is one of a number of java support modules specially written
for the StdCParser.g (for Java) which we need to convert to C++.

At the moment we cannot compile our new CToken.cpp because we are left
with one compiler error on the return statement from the toString()
method which states that it cannot add two pointers together [return
"CToken:" + "(" + etc.]. This would appear to be due to the compiler not
being able to access the definition of a suitable "operator+"(?).

However, we are baffled by the fact that, though our new CToken.cpp has
been written exactly following the model of both CommonToken.cpp and
Token.cpp in the "standard" cpp libraries in which both their toString()
methods concatenate strings in the return statement and compile
successfully but our CToken.cpp does not.

I have preprocessed both our new CToken.cpp and its superclass, the
supplied CommonToken.cpp, and I cannot find any definition of an
operator+ which is in the CommonToken.cpp .i file but not in the
CToken.cpp .i file (Which might account for one working but not the
other).

We are grateful for a reply from Gary Schaps to our earlier call for
help when we knew less about what was going on, but now we know that
both Token.cpp and CommonToken.cpp compile successfully in the same
project we do not see why our CToken.cpp (and with a corresponding
CToken.hpp file) written on the same lines and in the same directories
shouldn't compile as well.

We are also grateful for a reply from Ric Klaren to our latest appeal.
(Yes, I would like to release this version to the community Ric.)
Unfortunately, we are already using antlr/String.cpp which successfully
concatenates a string and an integer to create a new string. What
doesnt work in CToken.cpp is a concatenation of two strings.

If anyone would like to see our code for CToken.cpp and CToken.hpp I
will of course be pleased to send them a copy, but we have checked it
line by line against CommonToken.cpp and CommonToken.hpp and cannot see
any significant difference.

I hope the symptoms will be sufficient to trigger someones memory to
supply a solution.

Many thanks.

David
South Bank University
London, England

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Matthew.Ford at forward.com.au  Fri Oct  5 15:02:16 2001
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
References: <20011005141058.A16139@cs.utwente.nl>
Message-ID: <003001c14de9$6833f9c0$0300a8c0@matthewfnb>

I still prefer version 2)
But I as I understand it  3) is just 2) with a lot of extra code for all the
non-labelled  IDENT's etc.
I would have thought that Ruslan Zasukhin would have been jumping up and
down about this extra code and be voting for 2).

matthew.
----- Original Message -----
From: "Ric Klaren" <klaren@cs.utwente.nl>
To: "ANTLR mailinglist" <antlr-interest@yahoogroups.com>
Cc: "Terence Parr" <parrt@jguru.com>
Sent: Friday, October 05, 2001 10:10 PM
Subject: [antlr-interest] RFC: slight change in ! semantics


> Hi,
>
> While porting over my more aggressive AST element declaration generation
> scheme from C++ to java I stumbled on a showstopper...
>
> Consider a rule like this (from the java 1.3 grammar):
>
> classDefinition ! [AST modifiers]
> : "class" IDENT
> // it _might_ have a superclass...
> sc:superClassClause
> // it might implement some interfaces...
> ic:implementsClause
> // now parse the body of the class
> cb:classBlock
> {#classDefinition = #(#[CLASS_DEF,"CLASS_DEF"],
>    modifiers,IDENT,sc,ic,cb);}
> ;
>
> The problem is the use of IDENT in the action code and the use of the !
> operator. Because the ast generation is turned of no declaration for the
> AST for IDENT is made, and I have no nice way of finding out that IDENT is
> used in the action (prescanning the action will be ugly AFAIK). I always
> used the ! as nothing gets generated and so I always label these tokens in
> these cases upon reading the docs it turns out that ANTLR indeed supports
> the above (another of these little inconsistencies).
>
> So the options are:
> 1) No optimization and generate 'sloppy' code until a later release.
> 2) Label the IDENT and use the label in cases like this.
> 3) always generate declarations for things like IDENT (not for things like
>    "class" since you can't reference it in actions (can't?) )
> 4) Making it configurable.
>
> 4 is not really a option for me, this just makes a lot of ugly stuff more
> ugly.
>
> 1 well though luck for me :) put some pieces of code in the fridge.
> 2 tough luck for the others ;) let them label stuff, it's imho a bit more
> consistent to make explicit labeling the default, in stead of ''yah this
> turns of all tree generation oh wait a sec no not for tokens.''
> 3 Sort of the golden middle. It keeps some people like Ruslan ;) slightly
>   disgruntled, but nobody has to 'relabel' their grammars.
>
> Well let me know what you think people..
>
> Cheers,
>
> Ric
> --
> -----+++++*****************************************************+++++++++--
-----
>     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
> -----+++++*****************************************************+++++++++--
-----
> Wit is cultured insolence. - Aristotle
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From greenj at ix.netcom.com  Fri Oct  5 18:45:33 2001
From: greenj at ix.netcom.com (John Green)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Newbie Question
In-Reply-To: <200110051913.f95JDqm00424@dymwsm11.mailwatch.com>
Message-ID: <NEBBJKNCALMJLNPAAMECAEMFEDAA.johnallengreen@yahoo.com>

Hi Michael,

I won't try to give any opinions or advice about tree walkers, because my
experience with them is limited to one tree walker that I built for
evaluating some expressions (basically a mini-interpreter).

> Am I correct in assuming that this attempting to create a node with a root
of 'NDeclaration' so that this is easier to identify later on?

Yup. I think those are called "synthetic nodes" in the Antlr docs (if memory
serves).

> For my application, it seems quite reasonable to identify certain key
structural pieces and do things like the above.  If I start doing this, I
would like to protect for the possibility of having both Java and C++ tree
walkers.  Is it, in general, possible to build a parser grammar with markups
and so on without having to write any target language specific actions?  I
assume this would be the goal if somebody were trying to develop a language
neutral grammar?

It depends. Adding synthetic nodes, and other syntactic type things, can be
done with Antlr features, and then you get to stay language neutral. For my
parser though, I needed a lot of semantic productions, so there's a lot of
C++ mixed into my grammar.

For whatever it's worth, here's what I've done:

The parser that I built has been used to build a configurable "lint" tool,
which people also use for checking that code follows their own style
guidelines. We don't use Antlr tree-walkers for that. I have built the
parser into a DLL, and provided an API into that. The programmers can now
use their native tongue (a 4GL) and the API to build their own tools for
walking through the tree and ensuring that their code follows their own
style guidelines.

I've provided an API to the "hidden tokens", so that they can enforce rules
like: every function declaration must be commented.

Well, anyway, that's one way of doing it. If I had been doing an in-house
project, rather than letting other programmers build tools based on the
parser, then I may well have used Antlr tree-walkers instead.

Regards,
John
www.joanju.com


  -----Original Message-----
  From: Tiller, Michael (M.M.) [mailto:mtiller@ford.com]
  Sent: Saturday, October 06, 2001 5:14 AM
  To: 'antlr-interest@yahoogroups.com'
  Subject: [antlr-interest] Newbie Question


  I'm still trying to understand how to make the best use of ANTLR.  I'd
like to describe a simple scenario (that I am currently faced with) and ask
a few questions about it...

  As a side project, I would like to build a tool that will check some
source code against some style guidelines that we have internally.  Toward
this end, I have developed a lexer and parser already that can parse the
language that I am interested in.  So far, so good.

  At this point, it seems to me that I have the pieces for turning the
characters into tokens and then tokens into productions.  Now what I want to
do is walk the tree that gets generated by the parser.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011006/5a0b931d/attachment.html
From sunshine at public.kherson.ua  Sat Oct  6 01:41:17 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <003001c14de9$6833f9c0$0300a8c0@matthewfnb>
Message-ID: <B7E49E09.114CF%sunshine@public.kherson.ua>

on 10/6/01 1:02, Matthew Ford at Matthew.Ford@forward.com.au wrote:

> I still prefer version 2)
> But I as I understand it  3) is just 2) with a lot of extra code for all the
> non-labelled  IDENT's etc.

> I would have thought that Ruslan Zasukhin would have been jumping up and
> down about this extra code and be voting for 2).

Good note, Mathew...

but...this extra code will be in ANTLR code generator,
    NOT in generated code of parser.

This make difference.

We run ANTLR parser only on our side, I think nobody care if generation of
code will take 2 or 3 seconds.

But our parser will be run by thousands of our users million of times.
So important is to get fast generated PARSER.

And again, on my point of view, ideal way now -- 4.
** One develop can set ON optimization and then he need label all tokens as
you want (way 2)
** Other developer can use OFF, and still work without changes (lazy way 1).

NOTE: way 4 in fact is combination of ways 1 and 2.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Sat Oct  6 04:44:34 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <B7E49E09.114CF%sunshine@public.kherson.ua>; from sunshine@public.kherson.ua on Sat, Oct 06, 2001 at 11:41:17AM +0300
References: <003001c14de9$6833f9c0$0300a8c0@matthewfnb> <B7E49E09.114CF%sunshine@public.kherson.ua>
Message-ID: <20011006134430.A23226@cs.utwente.nl>

On Sat, Oct 06, 2001 at 11:41:17AM +0300, Ruslan Zasukhin wrote:
> but...this extra code will be in ANTLR code generator,
>     NOT in generated code of parser.

Errr it will be *in* the generated code!

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Time what is time - I wish I knew how to tell You why - It hurts to know -
          Aren't we machines - Time what is time - Unlock the door
               - And see the truth - Then time is time again
                From: 'Time what is Time' by Blind Guardian


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Sat Oct  6 08:05:28 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <20011006134430.A23226@cs.utwente.nl>
Message-ID: <B7E4F74A.114F6%sunshine@public.kherson.ua>

on 10/6/01 14:44, Ric Klaren at klaren@cs.utwente.nl wrote:

>> but...this extra code will be in ANTLR code generator,
>> NOT in generated code of parser.
> 
> Errr it will be *in* the generated code!

probably you mean AST tree that will be generated for parts as INT,
yes ?

But Mathew did worry (IMHO) about code that will differ
    INT items from "declaration" items.

this code will be on side of ANTLR

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Oct  6 14:21:28 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Re: RFC: slight change in ! semantics
In-Reply-To: <20011005141058.A16139@cs.utwente.nl>
Message-ID: <1A9DCE53-BAA0-11D5-9D4F-0030653DE0D6@jguru.com>

On Friday, October 5, 2001, at 05:10 AM, Ric Klaren wrote
...
classDefinition ! [AST modifiers]
> 	:	"class" IDENT
> 		// it _might_ have a superclass...
> 		sc:superClassClause
> 		// it might implement some interfaces...
> 		ic:implementsClause
> 		// now parse the body of the class
> 		cb:classBlock
> 		{#classDefinition = #(#[CLASS_DEF,"CLASS_DEF"],
> 							   modifiers,IDENT,sc,ic,cb);}
> 	;
>
> The problem is the use of IDENT in the action code and the use of the !
> operator. Because the ast generation is turned of no declaration for the
> AST for IDENT is made, and I have no nice way of finding out that IDENT 
> is
> used in the action (prescanning the action will be ugly AFAIK). I always
> used the ! as nothing gets generated and so I always label these tokens 
> in
> these cases upon reading the docs it turns out that ANTLR indeed 
> supports
> the above (another of these little inconsistencies).

I'll add a few thoughts here.  I can remember wondering if the unlabeled 
reference to a token from an AST action was a good idea.  Can't remember 
if John Lilley or I came up with the "shortcut" of not requiring a 
label, but I definitely remember being nervous about the decision; 
naturally, the decisions in the early days of Java-based ANTLR were done 
in extreme haste given my time.

I turned off code generation on unlabeled token references since they 
couldn't be used in an action...well, that is until Ric reminds of the 
dreaded IDENT reference from AST code.  FYI, I *rarely* do this.  I 
always use a reference since it's explicit.  Probably why I didn't run 
into this.  OTOH, didn't I do the AST stuff for the Java grammar? ;) 
oops.

> So the options are:
> 1) No optimization and generate 'sloppy' code until a later release.
> 2) Label the IDENT and use the label in cases like this.
> 3) always generate declarations for things like IDENT (not for things 
> like
>    "class" since you can't reference it in actions (can't?) )

This is a shortcut that will work and a decent compiler will remove the 
code for creating the value if it can determine the ctor is side-effect 
free.  Yeah, right. ;)

Since the AST action is special, it's best to track which tokens are 
referenced and update the "generate AST node" boolean for that grammar 
item.  These actions have to be translated anyway, so a simple check 
inside the action recognizer should fix this.  Oh wait, actually, forget 
that.  You'd have to do 2 passes over the rule looking for backward 
references.  Ick.

Option 3 is good for now and optimization folks can simply rewrite to 
not use the rule level ! and use individual ! on the grammar elements.

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lgc at mail1.jpl.nasa.gov  Sat Oct  6 15:30:38 2001
From: lgc at mail1.jpl.nasa.gov (lgc@mail1.jpl.nasa.gov)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Re: RFC: slight change in ! semantics
In-Reply-To: <1A9DCE53-BAA0-11D5-9D4F-0030653DE0D6@jguru.com>
Message-ID: <9po0me+jsst@eGroups.com>

--- In antlr-interest@y..., Terence Parr <parrt@j...> wrote:
> On Friday, October 5, 2001, at 05:10 AM, Ric Klaren wrote
...
> > So the options are:
> > 1) No optimization and generate 'sloppy' code until a later 
release.
> > 2) Label the IDENT and use the label in cases like this.
> > 3) always generate declarations for things like IDENT (not for 
things 
> > like
> >    "class" since you can't reference it in actions (can't?) )
> 
> This is a shortcut that will work and a decent compiler will remove 
the 
> code for creating the value if it can determine the ctor is 
side-effect 
> free.  Yeah, right. ;)
> 
> Since the AST action is special, it's best to track which tokens are 
> referenced and update the "generate AST node" boolean for that 
grammar 
> item.  These actions have to be translated anyway, so a simple check 
> inside the action recognizer should fix this.  Oh wait, actually, 
forget 
> that.  You'd have to do 2 passes over the rule looking for backward 
> references.  Ick.
> 
> Option 3 is good for now and optimization folks can simply rewrite 
to 
> not use the rule level ! and use individual ! on the grammar 
elements.
> 
> Ter

I've been trying to keep away from the discussions here while trying 
to finish the tree grammar generation.  There is actually a fifth 
option.  Option 3 recognizes ! as having semantics "create, but do not 
automatically link this into the syntax tree", which is the semantics 
carried over from PCCTS and allows manual reconstruction of tree 
segments.  Changing the semantics to "do not create" would be a bit 
drastic.  However (option 5:), it would not be too difficult to add a 
new annotation, "!!", to the ANTLR grammar with the "do not create" 
semantics (in antlr.g, there are only three or four references to 
BANG; BANGBANG could be added as an alternative, and the 
modification to the code generator would be minimal).

With the explicit tree construction stuff that I have a working 
version of and Ter is currently looking at, it should be possible to 
never have to build a tree in actions (AST nodes, yes, but they would 
then be specified to be part of a tree) and better optimization is 
possible--in particular, it is possible to track which AST nodes are 
used without requiring ANTLR to understand the target language.

BTW, ANTLR code generation is not as good as in PCCTS (Ter had some 
time to polish that and had paying customers), and the AST code 
generation is a bit careless.  AST generation code is built when 
grammar.buildAST == false (in the Java version, at least).  That can 
be fixed fairly quickly, but I've had to fix a few other defects in 
AST generation code (! is only partially implemented in 2.7.1; ! on a 
subrule, for example, is supported in the grammar, but 
behavior.noASTsubrule() is not implemented).

--Loring


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From rjc at trump.net.au  Sat Oct  6 21:56:49 2001
From: rjc at trump.net.au (Robert Colquhoun)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Java, apps
In-Reply-To: <20011004120042.J7646@cs.utwente.nl>
References: <4.2.0.58.20010929232452.00a30100@postoffice.trump.net.au>
 <4.2.0.58.20010925201651.01747890@postoffice.trump.net.au>
 <4.2.0.58.20010924215137.017417a0@postoffice.trump.net.au>
 <B7D5335C.10BC8%sunshine@public.kherson.ua>
 <4.2.0.58.20010925201651.01747890@postoffice.trump.net.au>
 <20010926142848.C29650@cs.utwente.nl>
 <4.2.0.58.20010929232452.00a30100@postoffice.trump.net.au>
Message-ID: <4.2.0.58.20011007152547.018755f0@postoffice.trump.net.au>

At 12:00 PM 10/4/01 +0200, Ric Klaren wrote:
>Hi,
>
>I didn't say thanks yet did I? Shame on me =)
>
>Thanks!!

I was looking at the current classes used internally for bitsets in antlr - 
the java BitSet class i wrote is going to need some additional methods to 
replace the current implementation.

I am not sure what to do here - from the eratosthenes sieve benchmark 
included shows only a marginal difference in performance(less than 10%) 
between antlr's current BitSet class,  the BitSet i wrote and the standard 
java.util.BitSet.  It might be better long term for maintainability to just 
use the standard java.util.BitSet plus some utility routines to feed in the 
raw data(the long int arrays).  For C++ just write something(perhaps 
adapting my current code) to look like the equivalent java class.

On the other hand maybe i need a better test.  The way bitsets are used in 
the lexer you are usually only looking for a handful of characters in the 
whole unicode range.   The idea behind the bitset i did was to use an 
offset so that largely empty int arrays covering the whole unicode range 
were not constructed.

- Robert


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Matthew.Ford at forward.com.au  Sun Oct  7 04:38:33 2001
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
References: <B7E4F74A.114F6%sunshine@public.kherson.ua>
Message-ID: <004101c14f24$9b8b0200$0300a8c0@matthewfnb>

Actually I was concerned about the code generated.
> .. AST tree that will be generated for parts as INT,

so why not just insist on users using labels where they need them?

matthew
----- Original Message -----
From: "Ruslan Zasukhin" <sunshine@public.kherson.ua>
To: <antlr-interest@yahoogroups.com>
Sent: Sunday, October 07, 2001 1:05 AM
Subject: Re: [antlr-interest] RFC: slight change in ! semantics


> on 10/6/01 14:44, Ric Klaren at klaren@cs.utwente.nl wrote:
>
> >> but...this extra code will be in ANTLR code generator,
> >> NOT in generated code of parser.
> >
> > Errr it will be *in* the generated code!
>
> probably you mean AST tree that will be generated for parts as INT,
> yes ?
>
> But Mathew did worry (IMHO) about code that will differ
>     INT items from "declaration" items.
>
> this code will be on side of ANTLR
>
> --
> Best regards,
> Ruslan Zasukhin
>
> -------------------------
> Paradigma.
>
> e-mail: ruslan@paradigmasoft.com
> web   : http://www.paradigmasoft.com
>
> To subscribe to the Valentina mail list
> send a letter to valentina-on@lists.macserve.net
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Sun Oct  7 08:01:34 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] RFC: slight change in ! semantics
In-Reply-To: <004101c14f24$9b8b0200$0300a8c0@matthewfnb>
Message-ID: <B7E64380.11556%sunshine@public.kherson.ua>

on 10/7/01 14:38, Matthew Ford at Matthew.Ford@forward.com.au wrote:

> Actually I was concerned about the code generated.
>> .. AST tree that will be generated for parts as INT,
> 
> so why not just insist on users using labels where they need them?

I also vote for this.

Against this will vote only guys who already have some grammars.
But as Terr did mention, probably not labeled INT is used very rarely.

So may be really we can just generate AST for labeled items only.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sun Oct  7 10:59:10 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Java, apps
In-Reply-To: <4.2.0.58.20011007152547.018755f0@postoffice.trump.net.au>
Message-ID: <023904E8-BB4D-11D5-BBE8-0030653DE0D6@jguru.com>


On Saturday, October 6, 2001, at 09:56  PM, Robert Colquhoun wrote:

> At 12:00 PM 10/4/01 +0200, Ric Klaren wrote:
>> Hi,
>>
>> I didn't say thanks yet did I? Shame on me =)
>>
>> Thanks!!
>
> I was looking at the current classes used internally for bitsets in 
> antlr -
> the java BitSet class i wrote is going to need some additional methods 
> to
> replace the current implementation.
>
> I am not sure what to do here - from the eratosthenes sieve benchmark
> included shows only a marginal difference in performance(less than 10%)
> between antlr's current BitSet class,  the BitSet i wrote and the 
> standard
> java.util.BitSet.  It might be better long term for maintainability to 
> just
> use the standard java.util.BitSet plus some utility routines to feed in 
> the
> raw data(the long int arrays).  For C++ just write something(perhaps
> adapting my current code) to look like the equivalent java class.

Don't forget that ANTLR uses my bitset very heavily during grammar 
analysis.  I recall that the java.util.BitSet didn't do inline stuff or 
something which concerned/irritated me (memory/GC considerations).

> On the other hand maybe i need a better test.  The way bitsets are used 
> in
> the lexer you are usually only looking for a handful of characters in 
> the
> whole unicode range.   The idea behind the bitset i did was to use an
> offset so that largely empty int arrays covering the whole unicode range
> were not constructed.

ANTLR can do much more to remove bitsets than it does.  It needs 
subrange -> simple comparison convertion etc...  Now, it only works if 
the whole bitset is a range.  After that, a bitset tuned more for 
unicode would be useful, but we'd need to be careful that its degenerate 
case for ascii and my grammar analysis still move along fast enough.  
Simple hints like the offset you mention would be easy and work well.  
Fortunately, most of the time people reference ranges like "valid 
identifier character" that can be formally described a priori.  This 
prevents the lexer code generator from having to figure out an efficient 
bitset.  One might even have BitSet subclasses that efficiently 
implement a particular character set.

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sun Oct  7 15:45:14 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Is this Recognizer optimization valid?
In-Reply-To: <00ef01c14c1d$27175e50$0400a8c0@dworkin>
Message-ID: <F9474429-BB74-11D5-BBE8-0030653DE0D6@jguru.com>


On Wednesday, October 3, 2001, at 08:07  AM, Sander M?gi wrote:

> The ASTPair hack gave some 30% reduced garbage and 20% increased speed 
> (on my anyway handoptimized lexer and recognizer)

My $0.02 here.  The real way to optimize this is to do awy with the 
ASTPair in favor of two local variables.  No mem 
allocation/deallocation.  At the cost of some inline code (since I would 
remove the surrounding object ASTPair), currentAST could be converted to 
currentAST_root and currentAST_child.  The resulting inlined code would 
increase code size (but hopefully not that much).

Ter
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/enriched
Size: 664 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20011007/ebb4ab01/attachment.bin
From johnl at jbase.com  Mon Oct  8 09:06:02 2001
From: johnl at jbase.com (John Lambert)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] static casts in heterogeneous AST parser
Message-ID: <11DA90DB57270946997CE1A2095E0164436C10@fenchurch.pdx.jbase.com>


I have problems compiling a parser using heterogeneous ASTs on HPUX.

It is objecting to all  static_cast operations between ASTRefcount<AST>  and
ASTRefcount< derivedAST> 

HP support claim they are correct and that it should be a reinterpret_cast.
I disagree, this works fine on lots of other platforms
and  a quick test of reinterpret_cast on other platforms produces
compilation errors.

Has anyone else encountered this ?

Thanks,

John Lambert


Here's a sample:

				Error 746: "AcorrParser.cpp", line 41 #
Cannot use static_cast to convert class ASTRefCount<antlr::AST> to class
ASTRefCount<ConvAST>.
				            returnAST =
static_cast<RefConvAST>(ANTLR_USE_NAMESPACE(antlr)nullAST);
	
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  
				Error 746: "AcorrParser.cpp", line 43 #
Cannot use static_cast to convert class ASTRefCount<antlr::AST> to class
ASTRefCount<ConvAST>.
				            RefConvAST acorr_AST =
static_cast<RefConvAST>(ANTLR_USE_NAMESPACE(antlr)nullAST);




 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mtiller at ford.com  Mon Oct  8 10:25:56 2001
From: mtiller at ford.com (Tiller, Michael (M.M.))
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Another Newbie Question
Message-ID: <200110081726.f98HQjs28868@dymwsm15.mailwatch.com>

While I'm still hoping for additional responses to my previous e-mail titled "Newbie Question", I have another related question that I was hoping somebody might be able to answer.
 
I have a rule in my grammar that looks like this:
 
modelica_file
  : (within:within_clause)? (defs:stored_definition)* EOF!
  ;
 
This is my top-level production rule.  The strange thing for me is that when I write code like this:
 
     parser.modelica_file();
     t = (CommonAST)parser.getAST();
 
The variable "t" is returned with the tree for the within clause and not for the entire "modelica_file" rule.  Is this normal?  I notice that the generated code looks like this:
 
   modelica_file_AST = (AST)currentAST.root;
 
What I was hoping for was more like:
 
   modelica_file_AST = (AST)currentAST;
 
In order to make it so that the "stored_definition" trees didn't get cut off, I changed my top level rule to:
 
modelica_file
  : (within:within_clause)? (defs:stored_definition)* EOF!
    { ## = #(#[FILE, "<file>"], ##); }
  ;

I introduced this "FILE" token type in my lexer (as protected) and I thought this was an appropriate way to deal with this situation (I'm also trying to use it in other contexts to identify important structural entities).  Anyway, this works (although it took me a while to figure out exactly how to do it).  Now, the AST returned after the "modelica_file" method is called on the parser does include both the within_clause production and all stored_definitions as well.
 
I guess my first question is, have I done something stupid here?
 
OK, next question.  I tried to write a TreeParser for this with a toplevel rule that looked like this:
 
modelica_file
  : #(FILE (within_clause)? (stored_definition)*)
  ;
 
Isn't this the correct way to represent this "artificial" node type?
 
I ask because when I run the tree parser, it fails with an error saying:
 
expecting FILE, found '<file>'
 
First, I don't quite understand why it is even paying attention to the token text as opposed to the token type?!?  I obviously don't understand something about tree parsers.  But that isn't even the problem.  If I change the token text to be "FILE", then I get this message:
 
expecting FILE, found 'FILE'
 
Huh?!?
 
So, my second question is what am I doing wrong here?!?!?  I'm totally confused by this.
 
Thanks
 
--
Mike
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011008/d0307b18/attachment.html
From mzukowski at bco.com  Mon Oct  8 10:35:29 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Another Newbie Question
Message-ID: <170826586F3BD511910D0200C110AAA801C57F8C@memail03.bco-home.com>

> -----Original Message-----
> From: Tiller, Michael (M.M.) [mailto:mtiller@ford.com]
> Sent: Monday, October 08, 2001 10:26 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Another Newbie Question
> 
> 
> While I'm still hoping for additional responses to my 
> previous e-mail titled "Newbie Question", I have another 
> related question that I was hoping somebody might be able to answer.
>  
> I have a rule in my grammar that looks like this:
>  
> modelica_file
>   : (within:within_clause)? (defs:stored_definition)* EOF!
>   ;
>  
> This is my top-level production rule.  The strange thing for 
> me is that when I write code like this:
>  
>      parser.modelica_file();
>      t = (CommonAST)parser.getAST();
>  
> The variable "t" is returned with the tree for the within 
> clause and not for the entire "modelica_file" rule.  Is this 
> normal?  

Yes, you haven't specified a root, so the "defs" are added as siblings to
the root, not as children.  

> I notice that the generated code looks like this:
>  
>    modelica_file_AST = (AST)currentAST.root;
>  
> What I was hoping for was more like:
>  
>    modelica_file_AST = (AST)currentAST;
>  
> In order to make it so that the "stored_definition" trees 
> didn't get cut off, I changed my top level rule to:
>  
> modelica_file
>   : (within:within_clause)? (defs:stored_definition)* EOF!
>     { ## = #(#[FILE, "<file>"], ##); }
>   ;
> 
> I introduced this "FILE" token type in my lexer (as 
> protected) and I thought this was an appropriate way to deal 
> with this situation (I'm also trying to use it in other 
> contexts to identify important structural entities).  Anyway, 
> this works (although it took me a while to figure out exactly 
> how to do it).  Now, the AST returned after the 
> "modelica_file" method is called on the parser does include 
> both the within_clause production and all stored_definitions as well.
>  
> I guess my first question is, have I done something stupid here?
>  
> OK, next question.  I tried to write a TreeParser for this 
> with a toplevel rule that looked like this:
>  
> modelica_file
>   : #(FILE (within_clause)? (stored_definition)*)
>   ;
>  
> Isn't this the correct way to represent this "artificial" node type?
>  
> I ask because when I run the tree parser, it fails with an 
> error saying:
>  
> expecting FILE, found '<file>'


You probably have a mismatch in your token definitions.  Are you importing
your parser's vocabulary into your tree parser?  It's trying to match token
types, but they may not be defined as the same.  Look at the token types
files for your parser and tree parser and see if the entry for FILE is the
same.  It better be.


> First, I don't quite understand why it is even paying 
> attention to the token text as opposed to the token type?!?  
> I obviously don't understand something about tree parsers.  
> But that isn't even the problem.  If I change the token text 
> to be "FILE", then I get this message:
>  
> expecting FILE, found 'FILE'
>  
> Huh?!?
>  
> So, my second question is what am I doing wrong here?!?!?  
> I'm totally confused by this.
>  
> Thanks
>  
> --
> Mike
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011008/29bff1dd/attachment.html
From mtiller at ford.com  Mon Oct  8 10:54:02 2001
From: mtiller at ford.com (Tiller, Michael (M.M.))
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Another Newbie Question
Message-ID: <200110081757.f98Hvnp06236@dymwsm12.mailwatch.com>

-----Original Message-----
From: mzukowski@bco.com [mailto:mzukowski@bco.com]
Sent: Monday, October 08, 2001 1:35 PM
To: antlr-interest@yahoogroups.com
Subject: RE: [antlr-interest] Another Newbie Question 
 
> I have a rule in my grammar that looks like this: 
>  
> modelica_file 
>   : (within:within_clause)? (defs:stored_definition)* EOF! 
>   ; 
>  
> This is my top-level production rule.  The strange thing for 
> me is that when I write code like this: 
>  
>      parser.modelica_file(); 
>      t = (CommonAST)parser.getAST(); 
>  
> The variable "t" is returned with the tree for the within 
> clause and not for the entire "modelica_file" rule.  Is this 
> normal?  

Yes, you haven't specified a root, so the "defs" are added as siblings to the root, not as children. 

I don't quite understand what you mean by a root.  Do you mean I should have yet another top-level rule like:
 
modelica_source
  : modelica_file
  ;
 
I tried this and it doesn't seem to have an effect.  Perhaps something like this?...
 
modelica_classes
  : file:modelica_file { ##=#(#[FILE,"<file>"], #file); }
  ;
 
This works, but it just seems strange to me that the solution involves both an additional production rule and some hand tweaking of the tree construction.  I'm not sure which approach is better.

> I notice that the generated code looks like this: 
>  
>    modelica_file_AST = (AST)currentAST.root; 
>  
> What I was hoping for was more like: 
>  
>    modelica_file_AST = (AST)currentAST; 
>  
> In order to make it so that the "stored_definition" trees 
> didn't get cut off, I changed my top level rule to: 
>  
> modelica_file 
>   : (within:within_clause)? (defs:stored_definition)* EOF! 
>     { ## = #(#[FILE, "<file>"], ##); } 
>   ; 
> 
> I introduced this "FILE" token type in my lexer (as 
> protected) and I thought this was an appropriate way to deal 
> with this situation (I'm also trying to use it in other 
> contexts to identify important structural entities).  Anyway, 
> this works (although it took me a while to figure out exactly 
> how to do it).  Now, the AST returned after the 
> "modelica_file" method is called on the parser does include 
> both the within_clause production and all stored_definitions as well. 
>  
> I guess my first question is, have I done something stupid here? 
>  
> OK, next question.  I tried to write a TreeParser for this 
> with a toplevel rule that looked like this: 
>  
> modelica_file 
>   : #(FILE (within_clause)? (stored_definition)*) 
>   ; 
>  
> Isn't this the correct way to represent this "artificial" node type? 
>  
> I ask because when I run the tree parser, it fails with an 
> error saying: 
>  
> expecting FILE, found '<file>' 


You probably have a mismatch in your token definitions.  Are you importing your parser's vocabulary into your tree parser?  It's trying to match token types, but they may not be defined as the same.  Look at the token types files for your parser and tree parser and see if the entry for FILE is the same.  It better be. 

Excellent!  Very observant.  I had used the appropriate importVocab option in my original grammar, but for the tree parser I forgot it.  I guess I was just thrown completely off track by the fact that it would complain with statements like "expecting FILE, found 'FILE'".  Anyway, now I'm getting a new error, but its more along the lines of what I would have expected.
 
Thanks.

> First, I don't quite understand why it is even paying 
> attention to the token text as opposed to the token type?!?  
> I obviously don't understand something about tree parsers.  
> But that isn't even the problem.  If I change the token text 
> to be "FILE", then I get this message: 
>  
> expecting FILE, found 'FILE' 
>  
> Huh?!? 
>  
> So, my second question is what am I doing wrong here?!?!?  
> I'm totally confused by this. 
>  
> Thanks 
>  
> -- 
> Mike 


Your use of Yahoo! Groups is subject to the Yahoo! Terms of Service <http://docs.yahoo.com/info/terms/> . 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011008/c77f7d52/attachment.html
From klaren at cs.utwente.nl  Mon Oct  8 12:29:15 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] static casts in heterogeneous AST parser
In-Reply-To: <11DA90DB57270946997CE1A2095E0164436C10@fenchurch.pdx.jbase.com>; from johnl@jbase.com on Mon, Oct 08, 2001 at 09:06:02AM -0700
References: <11DA90DB57270946997CE1A2095E0164436C10@fenchurch.pdx.jbase.com>
Message-ID: <20011008212915.B11539@cs.utwente.nl>

On Mon, Oct 08, 2001 at 09:06:02AM -0700, John Lambert wrote:
> I have problems compiling a parser using heterogeneous ASTs on HPUX.
> 
> It is objecting to all  static_cast operations between ASTRefcount<AST>  and
> ASTRefcount< derivedAST> 

Is your ast type derived from CommonAST ?

> HP support claim they are correct and that it should be a reinterpret_cast.
> I disagree, this works fine on lots of other platforms and a quick test of
> reinterpret_cast on other platforms produces compilation errors.

If I read the spec correctly the Refcount structure is structurally the
same for both types and the cast should be valid. So far all compilers had
no trouble with this code so I'm surprised... 

I still have to test Ruslan's implementation, so there might be some
changes in the future that might affect this positively.

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
     Human beings, who are almost unique in having the ability to learn
   from the experience of others, are also remarkable for their apparent
         disinclination to do so. --- Douglas Adams, Last Chance to See


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From johnl at jbase.com  Mon Oct  8 12:35:27 2001
From: johnl at jbase.com (John Lambert)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] static casts in heterogeneous AST parser
Message-ID: <11DA90DB57270946997CE1A2095E0164436C1B@fenchurch.pdx.jbase.com>

Ric,

My AST is derived from BaseAST, do you think that should make any
difference?

JOhn


-----Original Message-----
From: Ric Klaren [mailto:klaren@cs.utwente.nl]
Sent: Monday, October 08, 2001 12:29 PM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] static casts in heterogeneous AST parser


On Mon, Oct 08, 2001 at 09:06:02AM -0700, John Lambert wrote:
> I have problems compiling a parser using heterogeneous ASTs on HPUX.
> 
> It is objecting to all  static_cast operations between ASTRefcount<AST>
and
> ASTRefcount< derivedAST> 

Is your ast type derived from CommonAST ?

> HP support claim they are correct and that it should be a
reinterpret_cast.
> I disagree, this works fine on lots of other platforms and a quick test of
> reinterpret_cast on other platforms produces compilation errors.

If I read the spec correctly the Refcount structure is structurally the
same for both types and the cast should be valid. So far all compilers had
no trouble with this code so I'm surprised... 

I still have to test Ruslan's implementation, so there might be some
changes in the future that might affect this positively.

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++----
---
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++----
---
     Human beings, who are almost unique in having the ability to learn
   from the experience of others, are also remarkable for their apparent
         disinclination to do so. --- Douglas Adams, Last Chance to See


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Mon Oct  8 12:48:25 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] static casts in heterogeneous AST parser
In-Reply-To: <11DA90DB57270946997CE1A2095E0164436C10@fenchurch.pdx.jbase.com>
Message-ID: <B7E7DCD9.1163A%sunshine@public.kherson.ua>

on 10/8/01 19:06, John Lambert at johnl@jbase.com wrote:

> I have problems compiling a parser using heterogeneous ASTs on HPUX.
> 
> It is objecting to all  static_cast operations between ASTRefcount<AST>  and
> ASTRefcount< derivedAST>
> 
> HP support claim they are correct and that it should be a reinterpret_cast. I
> disagree, this works fine on lots of other platforms and  a quick test of
> reinterpret_cast on other platforms produces compilation errors.
> 
> Has anyone else encountered this ?

If I am not mistake (and I think I am not) rule is next:
    
    if a class has at least one virtual function
    then e must use dynamic_cast<>, otherwise static_cast<>

This is annoying frankly saying...
Let I have class A with no virtual functions and use it in a lots of places.
Later if I will need virtual function in this class, all static_cast for it
must be replaced on dynamic_cast<>.

Compiler do not allow us to have only one type_cast<> for all cases. :-(

> Thanks,
> 
> John Lambert
> 
> 
> Here's a sample:
> 
> Error 746: "AcorrParser.cpp", line 41 #
> Cannot use static_cast to convert class ASTRefCount<antlr::AST> to class
> ASTRefCount<ConvAST>.
> returnAST =
> static_cast<RefConvAST>(ANTLR_USE_NAMESPACE(antlr)nullAST);

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From johnl at jbase.com  Mon Oct  8 13:11:57 2001
From: johnl at jbase.com (John Lambert)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] static casts in heterogeneous AST parser
Message-ID: <11DA90DB57270946997CE1A2095E0164436C1F@fenchurch.pdx.jbase.com>


The code is generated by the ANTLR compiler and works on all other
platforms..
If I try (on Windows) to use any other type of cast it objects.

Cheers,

John


-----Original Message-----
From: Ruslan Zasukhin [mailto:sunshine@public.kherson.ua]
Sent: Monday, October 08, 2001 12:48 PM
To: antlr-interest@yahoogroups.com
Subject: Re: [antlr-interest] static casts in heterogeneous AST parser


on 10/8/01 19:06, John Lambert at johnl@jbase.com wrote:

> I have problems compiling a parser using heterogeneous ASTs on HPUX.
> 
> It is objecting to all  static_cast operations between ASTRefcount<AST>
and
> ASTRefcount< derivedAST>
> 
> HP support claim they are correct and that it should be a
reinterpret_cast. I
> disagree, this works fine on lots of other platforms and  a quick test of
> reinterpret_cast on other platforms produces compilation errors.
> 
> Has anyone else encountered this ?

If I am not mistake (and I think I am not) rule is next:
    
    if a class has at least one virtual function
    then e must use dynamic_cast<>, otherwise static_cast<>

This is annoying frankly saying...
Let I have class A with no virtual functions and use it in a lots of places.
Later if I will need virtual function in this class, all static_cast for it
must be replaced on dynamic_cast<>.

Compiler do not allow us to have only one type_cast<> for all cases. :-(

> Thanks,
> 
> John Lambert
> 
> 
> Here's a sample:
> 
> Error 746: "AcorrParser.cpp", line 41 #
> Cannot use static_cast to convert class ASTRefCount<antlr::AST> to class
> ASTRefCount<ConvAST>.
> returnAST =
> static_cast<RefConvAST>(ANTLR_USE_NAMESPACE(antlr)nullAST);

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Tue Oct  9 01:00:31 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] static casts in heterogeneous AST parser
In-Reply-To: <11DA90DB57270946997CE1A2095E0164436C1B@fenchurch.pdx.jbase.com>; from johnl@jbase.com on Mon, Oct 08, 2001 at 12:35:27PM -0700
References: <11DA90DB57270946997CE1A2095E0164436C1B@fenchurch.pdx.jbase.com>
Message-ID: <20011009100031.A14001@cs.utwente.nl>

On Mon, Oct 08, 2001 at 12:35:27PM -0700, John Lambert wrote:
> My AST is derived from BaseAST, do you think that should make any
> difference?

I presume so it depends a little on what you define in your derived class.
A clean BaseAST will not work in antlr generated code, so I presume a
derived one will not either.

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Tue Oct  9 01:16:01 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: RFC: slight change in ! semantics
In-Reply-To: <1A9DCE53-BAA0-11D5-9D4F-0030653DE0D6@jguru.com>; from parrt@jguru.com on Sat, Oct 06, 2001 at 02:21:28PM -0700
References: <20011005141058.A16139@cs.utwente.nl> <1A9DCE53-BAA0-11D5-9D4F-0030653DE0D6@jguru.com>
Message-ID: <20011009101601.B14001@cs.utwente.nl>

On Sat, Oct 06, 2001 at 02:21:28PM -0700, Terence Parr wrote:
> Option 3 is good for now and optimization folks can simply rewrite to 
> not use the rule level ! and use individual ! on the grammar elements.

Hmmm could make things slightly more usefull by making '!' a toggle option.
So turn of for the rule with '!' than on the individual elements turn it on
again with '!'....

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet

From klaren at cs.utwente.nl  Tue Oct  9 01:16:01 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Re: RFC: slight change in ! semantics
In-Reply-To: <1A9DCE53-BAA0-11D5-9D4F-0030653DE0D6@jguru.com>; from parrt@jguru.com on Sat, Oct 06, 2001 at 02:21:28PM -0700
References: <20011005141058.A16139@cs.utwente.nl> <1A9DCE53-BAA0-11D5-9D4F-0030653DE0D6@jguru.com>
Message-ID: <20011009101601.B14001@cs.utwente.nl>

On Sat, Oct 06, 2001 at 02:21:28PM -0700, Terence Parr wrote:
> Option 3 is good for now and optimization folks can simply rewrite to 
> not use the rule level ! and use individual ! on the grammar elements.

Hmmm could make things slightly more usefull by making '!' a toggle option.
So turn of for the rule with '!' than on the individual elements turn it on
again with '!'....

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From braden at endoframe.com  Tue Oct  9 01:33:42 2001
From: braden at endoframe.com (Braden McDaniel)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] static casts in heterogeneous AST parser
In-Reply-To: <B7E7DCD9.1163A%sunshine@public.kherson.ua>
References: <B7E7DCD9.1163A%sunshine@public.kherson.ua>
Message-ID: <1002616425.21235.28.camel@catalyst.endoframe.com>

On Mon, 2001-10-08 at 15:48, Ruslan Zasukhin wrote:
> on 10/8/01 19:06, John Lambert at johnl@jbase.com wrote:
> 
> > I have problems compiling a parser using heterogeneous ASTs on HPUX.
> > 
> > It is objecting to all  static_cast operations between ASTRefcount<AST>  and
> > ASTRefcount< derivedAST>
> > 
> > HP support claim they are correct and that it should be a reinterpret_cast. I
> > disagree, this works fine on lots of other platforms and  a quick test of
> > reinterpret_cast on other platforms produces compilation errors.
> > 
> > Has anyone else encountered this ?
> 
> If I am not mistake (and I think I am not) rule is next:
>     
>     if a class has at least one virtual function
>     then e must use dynamic_cast<>, otherwise static_cast<>

No, the rule you're thinking of is that in order to be able to use
dynamic_cast, the class must have at least one virtual function.

A dynamic_cast is a run-time cast. It is useful when the complete type
of an object cannot be known at compile-time (or if certain properties
of the complete type cannot be resolved by the compiler). Of course, a
static_cast is a cast that is performed at compile time. Most common
casting needs are met by static_cast.

> This is annoying frankly saying...
> Let I have class A with no virtual functions and use it in a lots of places.
> Later if I will need virtual function in this class, all static_cast for it
> must be replaced on dynamic_cast<>.

This is not the case.

-- 
Braden McDaniel                           e-mail: <braden@endoframe.com>
<http://endoframe.com>                    Jabber: <braden@jabber.org>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Matthew.Ford at forward.com.au  Tue Oct  9 02:24:23 2001
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:14:12 2004
Subject: [antlr-interest] Re: RFC: slight change in ! semantics
References: <20011005141058.A16139@cs.utwente.nl> <1A9DCE53-BAA0-11D5-9D4F-0030653DE0D6@jguru.com> <20011009101601.B14001@cs.utwente.nl>
Message-ID: <000601c150a4$31d780f0$0300a8c0@matthewfnb>

Double negatives are not good
Just insist on the individual elements being labelled.

matthew
----- Original Message -----
From: "Ric Klaren" <klaren@cs.utwente.nl>
To: "ANTLR mailinglist" <antlr-interest@yahoogroups.com>
Cc: "Terence Parr" <parrt@jguru.com>
Sent: Tuesday, October 09, 2001 6:16 PM
Subject: [antlr-interest] Re: RFC: slight change in ! semantics


> On Sat, Oct 06, 2001 at 02:21:28PM -0700, Terence Parr wrote:
> > Option 3 is good for now and optimization folks can simply rewrite to
> > not use the rule level ! and use individual ! on the grammar elements.
>
> Hmmm could make things slightly more usefull by making '!' a toggle
option.
> So turn of for the rule with '!' than on the individual elements turn it
on
> again with '!'....
>
> Ric
> --
> -----+++++*****************************************************+++++++++--
-----
>     ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
> -----+++++*****************************************************+++++++++--
-----
>  Why don't we just invite them to dinner and massacre them all when
they're
>   drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
>            So it'd have to be something simple with pasta, then.
>                  From: Interesting Times by Terry Pratchet
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sander at aqris.com  Wed Oct 10 01:13:01 2001
From: sander at aqris.com (=?Windows-1252?Q?Sander_M=E4gi?=)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Latest development snapshot
Message-ID: <009d01c15163$61620330$0400a8c0@dworkin>

Hi

Is there a latest development snapshot or read only CVS of ANTLR somewhere?

Sander
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011010/8536ea0d/attachment.html
From klaren at cs.utwente.nl  Wed Oct 10 01:40:32 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Latest development snapshot
In-Reply-To: <009d01c15163$61620330$0400a8c0@dworkin>; from sander@aqris.com on Wed, Oct 10, 2001 at 10:13:01AM +0200
References: <009d01c15163$61620330$0400a8c0@dworkin>
Message-ID: <20011010104032.A1146@cs.utwente.nl>

Hi,

On Wed, Oct 10, 2001 at 10:13:01AM +0200, Sander Mägi wrote:
> Is there a latest development snapshot or read only CVS of ANTLR somewhere?

Read only cvs is not implemented AFAIK. There are snapshots of my
development version at http://wwwhome.cs.utwente.nl/~klaren/antlr/ . These
are currently not really up to date, the next release will probably be a
prerelease 2.7.2 (I hope)

Terence and I are starting to merge our branches this week (but I still
have some loose ends to finish, so don't hold your breath).

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at bco.com  Wed Oct 10 06:49:31 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Newbie Question
Message-ID: <170826586F3BD511910D0200C110AAA801C57FA6@memail03.bco-home.com>

> -----Original Message-----
> From: Tiller, Michael (M.M.) [mailto:mtiller@ford.com]
> Sent: Friday, October 05, 2001 12:14 PM
> To: 'antlr-interest@yahoogroups.com'
> Subject: [antlr-interest] Newbie Question
> 
> 
> I'm still trying to understand how to make the best use of 
> ANTLR.  I'd like to describe a simple scenario (that I am 
> currently faced with) and ask a few questions about it...
>  
> As a side project, I would like to build a tool that will 
> check some source code against some style guidelines that we 
> have internally.  Toward this end, I have developed a lexer 
> and parser already that can parse the language that I am 
> interested in.  So far, so good.

Does your style guide include whitespace, formatting and comment structure?
These are relatively hard problems.
  
> At this point, it seems to me that I have the pieces for 
> turning the characters into tokens and then tokens into 
> productions.  Now what I want to do is walk the tree that 
> gets generated by the parser.
>  
> It seems ugly to actually add my style checking guidelines to 
> the grammar because I might want to use the grammar at some 
> point for some other applications.  My understanding is that 
> I should probably write a tree walker that is specific to my 
> current application and leave the grammar alone.  This 
> protects for future applications.  Is my understanding 
> correct in this regard?

Yes.  
  
> So, I am currently (perhaps misguidedly) looking at building 
> a tree walker.  But this brings up what seems like an 
> important issue with the grammar.  What kinds of tree 
> construction markup should I do to the grammar to get 
> something that will be easy to walk?  In most of the markups 
> of grammars, I see lines like:
>  
> declaration
>   : type ^IDENT SEMI!
>   ;
> 
> The tree node will now have an IDENT token as the root of the 
> declaration.  This seems like it would make finding a 
> declaration very difficult because your tree would be something like:
>  
> #(IDENT <type info>)
>  
> Is my understanding of this correct?

Yes.

> It seems like a much better way would be to provide tree node 
> types for the productions so it would be more like:
>  
> #(DECLARATION type name)
>  
> Am I correct in assuming that ANTLR doesn't do something like 
> this because the tree would get really cluttered with 
> production names as well as tokens?  So, it would seem you 
> might want to selectively choose the most important 
> productions to use for nodes.  In this case, should protected 
> tokens be introduced in the lexer for this purpose?

Yes, preserving the structure of the parse would give you a parse tree that
is tedious to use, especially for expressions.

> I'm 
> guessing that this is why the 'GNU C' grammar in the 
> resources section of the ANTLR web page has things like this:
>  declaration
>         : ds:declSpecifiers (initDeclList[ds1])? ( SEMI )+
>               { ## = #( #[NDeclaration], ##); }
>         ;
>  
> Am I correct in assuming that this attempting to create a 
> node with a root of 'NDeclaration' so that this is easier to 
> identify later on?

Exactly!
  
> For my application, it seems quite reasonable to identify 
> certain key structural pieces and do things like the above.  
> If I start doing this, I would like to protect for the 
> possibility of having both Java and C++ tree walkers.  Is it, 
> in general, possible to build a parser grammar with markups 
> and so on without having to write any target language 
> specific actions?  I assume this would be the goal if 
> somebody were trying to develop a language neutral grammar?

When I wrote my translator from AREV R/BASIC to Visual BASIC I made a master
tree grammar that encompassed both languages so I could represent the
intermediate stages of translation.  You just have to make sure that the
tokens used by each parser don't overlap.
  
> From a software engineering perspective, it seems somewhat 
> strange that the treewalker mimics the structure of the 
> grammar so heavily.  It seems like this is pretty redundant.  
> The tree walkers don't follow the exact same structure as the 
> grammar, but I'm trying to understand the relationship 
> between the two structures and what the implications are if 
> the grammar structure is changed.  It seems like it would be 
> pretty undesirable to have changes in the grammar creating 
> lots of problems in a tree walker if the grammar change was 
> only a minor syntactical modification.  How do you avoid 
> these kinds of issues?

My GNU C grammar source is actually a noweb file which I've structured so
that similar rules from the parser and tree walkers are all close to each
other.  That way when I change a grammar rule it's right in my face to
change the tree grammars too.  In general the parser grammar (and hence the
tree grammar) usually comes to a fixed state once you've debugged it.  Then
the interesting work is in specializing the actions of your tree grammar,
for which antlr subclassing is useful.

> Finally, I haven't had enough experience playing around with 
> the tree walkers, but I recall that there is some mention in 
> the documentation about the matching rules being different 
> for tree walkers.  I can go back and read the rules again, 
> but I have a bigger question than how the rules work.  What I 
> want to understand are the implications.  It seems as though 
> the tree walking is designed so that you don't have to mimic 
> the grammar structure but instead you can just pluck patterns 
> you are interested in out of the tree generated by the 
> parser.  Do these matching rules for tree parsers essentially 
> mean that you can get away with this (i.e. only writing rules 
> for particular patterns you are interested in)?  Does this, 
> to some extent, mitigate the problems of grammar changes 
> causing lots of tearup in the tree walker?

Generally you structure your trees so they are easy to walk.  The degenerate
case would be a tree which is nothing but a flat sibling list of the tokens
as they were parsed.  Then your tree grammar is your parser and you haven't
gained anything by creating a tree.  Adding the parent/child relationships
gives structure to your tree.  Certain things can be encoded just in the
structure of the tree, so parens and semicolons can be left out.

I typically have a complete tree grammar empty of actions that I then
subclass and override just the actions I'm interested in to do some
transformations.

> I guess my overall impression (although I haven't had enough 
> time to actually try much of this out so far) is that it 
> would be important to markup the grammar so that the 
> resulting tree distills out much of the tiny syntax minutiae 
> and instead try and capture (in the tree being built) the 
> fundamental structure.  In other words, a declaration 
> consists of a name, type information and possibly array size 
> but you would avoid recording things like the braces or the 
> semicolon in the tree.  If you assume that the fundamental 
> structure (i.e. all declarations have a type and name) isn't 
> likely to change then changes in the grammar wouldn't really 
> propagate to the tree walker.
>  
> Is (any of) this correct? :-)

Yep, you've got the basic concepts right.

Monty 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011010/b423e011/attachment.html
From james at westongold.com  Wed Oct 10 07:34:12 2001
From: james at westongold.com (James Mansion)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Newbie re: memory management on parse fail (C++)
In-Reply-To: <170826586F3BD511910D0200C110AAA801C57FA6@memail03.bco-home.com>
Message-ID: <ODEEJFFGLIBKGLFBJHOIEEKMEIAA.james@westongold.com>

Some parser systems I've tinkered with have been
somewhat careless about recovering memory, particularly
in cases where there has been a parsing or scanning
error.

Is the C++ code generated pretty good about this sort of
thing?

I want to parse interective input (which will be bad, often)
in a long-running process.

Cheers,
James


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sinan.karasu at boeing.com  Wed Oct 10 14:09:29 2001
From: sinan.karasu at boeing.com (Sinan)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Any news about netbeans and antlr ?
Message-ID: <3BC4B909.3595F9B5@boeing.com>


 I am about to start developing an app using netbeans and antlr.

I've looked at antlr.netbeans.org , and subscribed to whatever I can.
However appears to be very quiet. So if anyone have integrated antlr
into netbeans, I'd like to hear about it. Otherwise, I'll try to start
with the files they have there and continue/contribute from there.

Sinan

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From gvaughn at delphis.com  Wed Oct 10 14:22:16 2001
From: gvaughn at delphis.com (Greg Vaughn)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Any news about netbeans and antlr ?
References: <3BC4B909.3595F9B5@boeing.com>
Message-ID: <3BC4BC08.7040405@delphis.com>

Sinan wrote:

>  I am about to start developing an app using netbeans and antlr.
> 
> I've looked at antlr.netbeans.org , and subscribed to whatever I can.
> However appears to be very quiet. So if anyone have integrated antlr
> into netbeans, I'd like to hear about it. Otherwise, I'll try to start
> with the files they have there and continue/contribute from there.


On the netbeans developer newsgroup this week I read that the person who 
was doing the antlr module didn't have time and was looking for someone 
else to finish the details.


-Greg


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From greenj at ix.netcom.com  Wed Oct 10 15:30:22 2001
From: greenj at ix.netcom.com (John Green)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Newbie re: memory management on parse fail (C++)
In-Reply-To: <ODEEJFFGLIBKGLFBJHOIEEKMEIAA.james@westongold.com>
Message-ID: <NEBBJKNCALMJLNPAAMECAEEHEEAA.johnallengreen@yahoo.com>

I find it to be good. Some of our regression tests parse thousands of small
programs, taking an hour or so to do all of the parsing. No memory troubles.
I do watch it carefully, and I have used a couple of leak detection tools
against it as well.

With regards to errors: I haven't specifically watched the memory when we've
parsed programs with errors, but for what it's worth, I haven't noticed any
memory leaks.

The only memory trouble I have had: the hidden tokens weren't being cleaned
up after a parse, so I had to write my own functions for doing that clean up
job. But, you probably won't be using the hidden tokens (preserving
whitespace) feature.

Cheers,
John


> -----Original Message-----
> From: James Mansion [mailto:james@westongold.com]
> Sent: Thursday, October 11, 2001 12:34 AM
> To: antlr-interest@yahoogroups.com
> Subject: [antlr-interest] Newbie re: memory management on parse fail
> (C++)
>
>
> Some parser systems I've tinkered with have been
> somewhat careless about recovering memory, particularly
> in cases where there has been a parsing or scanning
> error.
>
> Is the C++ code generated pretty good about this sort of
> thing?
>
> I want to parse interective input (which will be bad, often)
> in a long-running process.
>
> Cheers,
> James
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Matthew.Ford at forward.com.au  Wed Oct 10 16:00:21 2001
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Newbie re: memory management on parse fail (C++) and Java
References: <NEBBJKNCALMJLNPAAMECAEEHEEAA.johnallengreen@yahoo.com>
Message-ID: <000f01c151df$5edaf7d0$8964020a@matthewfnb>

Has anyone check for memory leaks in the Java version?

I know Java has automatic garbage collection but if the references to
objects are not handled correctly you end up with old unused objects trapped
in memory because of a  reference that has not been cleaned up.

matthew
----- Original Message -----
From: "John Green" <greenj@ix.netcom.com>
To: <antlr-interest@yahoogroups.com>
Sent: Thursday, October 11, 2001 8:30 AM
Subject: RE: [antlr-interest] Newbie re: memory management on parse fail
(C++)


> I find it to be good. Some of our regression tests parse thousands of
small
> programs, taking an hour or so to do all of the parsing. No memory
troubles.
> I do watch it carefully, and I have used a couple of leak detection tools
> against it as well.
>
> With regards to errors: I haven't specifically watched the memory when
we've
> parsed programs with errors, but for what it's worth, I haven't noticed
any
> memory leaks.
>
> The only memory trouble I have had: the hidden tokens weren't being
cleaned
> up after a parse, so I had to write my own functions for doing that clean
up
> job. But, you probably won't be using the hidden tokens (preserving
> whitespace) feature.
>
> Cheers,
> John
>
>
> > -----Original Message-----
> > From: James Mansion [mailto:james@westongold.com]
> > Sent: Thursday, October 11, 2001 12:34 AM
> > To: antlr-interest@yahoogroups.com
> > Subject: [antlr-interest] Newbie re: memory management on parse fail
> > (C++)
> >
> >
> > Some parser systems I've tinkered with have been
> > somewhat careless about recovering memory, particularly
> > in cases where there has been a parsing or scanning
> > error.
> >
> > Is the C++ code generated pretty good about this sort of
> > thing?
> >
> > I want to parse interective input (which will be bad, often)
> > in a long-running process.
> >
> > Cheers,
> > James
> >
> >
> >
> >
> > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/
> >
> >
>
>
> _________________________________________________________
> Do You Yahoo!?
> Get your free @yahoo.com address at http://mail.yahoo.com
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Wed Oct 10 20:30:42 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Newbie re: memory management on parse fail (C++) and Java
In-Reply-To: <000f01c151df$5edaf7d0$8964020a@matthewfnb>
Message-ID: <59813736-BDF8-11D5-BBE8-0030653DE0D6@jguru.com>


On Wednesday, October 10, 2001, at 04:00  PM, Matthew Ford wrote:

> Has anyone check for memory leaks in the Java version?
>
> I know Java has automatic garbage collection but if the references to
> objects are not handled correctly you end up with old unused objects 
> trapped
> in memory because of a  reference that has not been cleaned up.

I use a bunch of parsers in the jGuru.com portal (can't remember if I'm 
doing any tree stuff though).  It runs for a month at a time sometimes 
w/o a problem, but who's to say how much it would have to leak before 
I'd notice.  I would say that ANTLR's pretty clean about leaving 
structures around holding objects in memory.

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From antlr-interest at yahoogroups.com  Thu Oct 11 05:03:43 2001
From: antlr-interest at yahoogroups.com (antlr-interest@yahoogroups.com)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] New file uploaded to antlr-interest
Message-ID: <1002801823.68730.4364.w27@yahoogroups.com>


Hello,

This email message is a notification to let you know that
a file has been uploaded to the Files area of the antlr-interest 
group.

  File        : /JWhizTrial.zip 
  Uploaded by : whizlabs@yahoo.com 
  Description : J@Whiz Ver2.0 Released - A Java Certification Test Simulator.The Ver2.0 comprises of 11 Mock Tests(649 Questions), an Interactive Quiz(100 Questions),more Quick Revision Tips. It has much Tougher and even more Code Based Questions according to the current pattern of SCJP exam. The salient features include High Level of Customization, Detailed Explanation, Quick Revision Tips, Update with Many more questions on Threads and IO topic according to the current trend.For details www.whizlabs.com/jwhiz 

You can access this file at the URL

http://groups.yahoo.com/group/antlr-interest/files/JWhizTrial.zip 

To learn more about file sharing for your group, please visit

http://help.yahoo.com/help/us/groups/files

Regards,

whizlabs@yahoo.com
 





 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From tom at psy.unsw.edu.au  Thu Oct 11 17:01:32 2001
From: tom at psy.unsw.edu.au (tom@psy.unsw.edu.au)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] Re: Any news about netbeans and antlr ?
In-Reply-To: <3BC4BC08.7040405@delphis.com>
Message-ID: <9q5bss+584j@eGroups.com>

Yep, I have offered to donate some time, but not sure how much time 
I'll have. Also, Derrick Oswald is offering some help. Any help you 
can offer would be most appreciated I'm sure.

Not sure if the module will be appropriate for you though, its in a 
pretty basic state. In particular it currently won't handle at all 
either Parsers, Lexers etc, without default names (eg for 
MyLanguage.g, it will only recognize MyLanguageParser, 
MyLanguageLexer etc.), thus of course it can't handle multiple 
parsers\lexers in  one file.

Haven't got the latest version up and running (don't think it's even 
compilable at the moment), hope to spend some time over the weekend 
at least familiarising myself with it's current state.

Tom.

--- In antlr-interest@y..., Greg Vaughn <gvaughn@d...> wrote:
> Sinan wrote:
> 
> >  I am about to start developing an app using netbeans and antlr.
> > 
> > I've looked at antlr.netbeans.org , and subscribed to whatever I 
can.
> > However appears to be very quiet. So if anyone have integrated 
antlr
> > into netbeans, I'd like to hear about it. Otherwise, I'll try to 
start
> > with the files they have there and continue/contribute from there.
> 
> 
> On the netbeans developer newsgroup this week I read that the 
person who 
> was doing the antlr module didn't have time and was looking for 
someone 
> else to finish the details.
> 
> 
> -Greg


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From karunakar at objectsymphony.com  Fri Oct 12 03:39:49 2001
From: karunakar at objectsymphony.com (N.V.S. Karunakar)
Date: Mon Dec 20 16:14:13 2004
Subject: [antlr-interest] grammars without any rules
Message-ID: <NFBBKACKCMCJEIDAMFEKIEIJCFAA.karunakar@objectsymphony.com>

Hi,

   ANTLR doesn't allow a grammar definition without a rule. Consider this
case - We define a lexer for a language K. In the next version of K which is
NextK, all we do is to add a few keywords and add some syntactic constructs.
We will use grammar inheritance to add more rules to the parser. to add
extra key words we inherit from the K's lexer. we can add the new key words
to the tokens section of this new lexer. there is no need to add any new
lexer rules. but ANTLR insists on a rule. in this light can we allow
grammars without any rules ?

   greatly appreciate your views.

regards,
karunakar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Fri Oct 12 10:59:19 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] grammars without any rules
In-Reply-To: <NFBBKACKCMCJEIDAMFEKIEIJCFAA.karunakar@objectsymphony.com>
Message-ID: <DBBE6C4E-BF3A-11D5-BBE8-0030653DE0D6@jguru.com>


On Friday, October 12, 2001, at 03:39  AM, N.V.S. Karunakar wrote:

> Hi,
>
>    ANTLR doesn't allow a grammar definition without a rule. Consider 
> this
> case - We define a lexer for a language K. In the next version of K 
> which is
> NextK, all we do is to add a few keywords and add some syntactic 
> constructs.
> We will use grammar inheritance to add more rules to the parser. to add
> extra key words we inherit from the K's lexer. we can add the new key 
> words
> to the tokens section of this new lexer. there is no need to add any new
> lexer rules. but ANTLR insists on a rule. in this light can we allow
> grammars without any rules ?

Howdy.  Can you just add a dummy rule?

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From greenj at ix.netcom.com  Fri Oct 12 22:37:40 2001
From: greenj at ix.netcom.com (John Green)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Token classes
In-Reply-To: <DBBE6C4E-BF3A-11D5-BBE8-0030653DE0D6@jguru.com>
Message-ID: <NEBBJKNCALMJLNPAAMECKEJEEEAA.johnallengreen@yahoo.com>

The problem: a parser rule, which is nothing but a giant list of 100+
keywords (don't ask), generates a function so huge that C++ can't compile
it.

The current workaround: post-antlr-code-generation, re-write the function by
hand so that instead of 100+ chunks of generated code within the CASE
statement, there's 100+ options in the case statement but they all fall
through to the same, single chunk of code:

	<snip>
	case XCODE:
	case XREF:
	case Y:
	case YOF:
	case YEAR:
	case YES:
	case YESNO:
	case YESNOCANCEL:
	{
		antlr::RefAST tmp1522_AST = antlr::nullAST;
		if (inputState->guessing==0) {
			tmp1522_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp1522_AST);
		}
		matchNot(antlr::Token::EOF_TYPE);
		keyword_AST = currentAST.root;
		break;
	}
	<snip>

In the Antlr docs, there's mention of "Token Classes", but I'm pretty sure
those are not implemented.

I want a valid rule, in the Antlr grammar file, so that lookaheads work.

Any suggestions?

Thanks,
John


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From karunakar at objectsymphony.com  Fri Oct 12 23:20:20 2001
From: karunakar at objectsymphony.com (N.V.S. Karunakar)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] grammars without any rules
In-Reply-To: <DBBE6C4E-BF3A-11D5-BBE8-0030653DE0D6@jguru.com>
Message-ID: <NFBBKACKCMCJEIDAMFEKAEJDCFAA.karunakar@objectsymphony.com>

> >    ANTLR doesn't allow a grammar definition without a rule. Consider
> > this
> > case - We define a lexer for a language K. In the next version of K
> > which is
> > NextK, all we do is to add a few keywords and add some syntactic
> > constructs.
> > We will use grammar inheritance to add more rules to the parser. to add
> > extra key words we inherit from the K's lexer. we can add the new key
> > words
> > to the tokens section of this new lexer. there is no need to add any new
> > lexer rules. but ANTLR insists on a rule. in this light can we allow
> > grammars without any rules ?
>
> Howdy.  Can you just add a dummy rule?
>
> Ter

we sure can add a dummy rule. But i was wondering why ANTLR should insist on
having at least one rule.

thanks,
karunakar


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From kjell at oops.se  Sat Oct 13 02:50:22 2001
From: kjell at oops.se (Kjell Nilsson)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Dont know how to allow Unary MINUS
Message-ID: <B85CA613-BFBF-11D5-8358-0003930FD0FA@oops.se>

Hi

I a complete newbee to parsers and I have played around
with antlr for 2 days now. Im trying to create a simple java
calculator as a start. I have looked through all the examples
and made some progress. But now Im trying to implement
unary minus and Im completly lost. In the doc Terence mentioned
that this could be handled by a syntactic predicate and I
have tried this in my TreeParser but had no luck.

Can someone give me a clue?

Here is my grammar.

Love to hear from somebody.

--kjell

{
import java.io.*;
}

class CalcParser extends Parser;
options {
	codeGenMakeSwitchThreshold = 3;
	codeGenBitsetTestThreshold = 4;
	buildAST=true;
	ASTLabelType = "antlr.CommonAST"; // change default of "AST"
}

calculate: assignExpr SEMI! ;
assignExpr: addExpr ;

// Doing the arithmetic
addExpr: multExpr (
     pm: (PLUS^ | MINUS^)?
     me: multExpr
     exception catch [ RecognitionException ex ]
     {
                     System.out.println("Caught error in addExpr");
                     reportError(ex.toString());
     } )* ;

multExpr: postfixExpr ( ( MULT^ | DIV^ | MOD^) postfixExpr )* ;

postfixExpr: absFunc | acosFunc | asinFunc | atanFunc | cosFunc | expFunc
              | invFunc | logFunc | sinFunc | sqrtFunc | tanFunc | powFunc
              | sqrFunc | cubeFunc | atom;
absFunc: ABS^ LPAREN! assignExpr RPAREN! ;
acosFunc: ACOS^ LPAREN! assignExpr RPAREN! ;
asinFunc: ASIN^ LPAREN! assignExpr RPAREN! ;
atanFunc: ATAN^ LPAREN! assignExpr RPAREN! ;
cosFunc: COS^ LPAREN! assignExpr RPAREN! ;
expFunc: EXP^ LPAREN! assignExpr RPAREN! ;
invFunc: INV^ LPAREN! assignExpr RPAREN! ;
logFunc: LOG^ LPAREN! assignExpr RPAREN! ;
sinFunc: SIN^ LPAREN! assignExpr RPAREN! ;
sqrtFunc: SQRT^ LPAREN! assignExpr RPAREN! ;
tanFunc: TAN^ LPAREN! assignExpr RPAREN! ;
sqrFunc: SQR^ LPAREN! assignExpr RPAREN! ;
cubeFunc: CUBE^ LPAREN! assignExpr RPAREN! ;
powFunc: POW^ LPAREN! assignExpr COMMA! assignExpr RPAREN! ;
maxFunc: MAX^ LPAREN! assignExpr COMMA! assignExpr RPAREN! ;
minFunc: MIN^ LPAREN! assignExpr COMMA! assignExpr RPAREN! ;

atom: unsignedNumber | ID | EEE | PII | LPAREN! assignExpr RPAREN! ;

unsignedNumber: unsignedInteger | unsignedReal ;

unsignedInteger: NUM_INT ;

unsignedReal: NUM_REAL ;

dummy: DOT  ;

//////////////////////////////////////////////////////////////////////////
/

class CalcLexer extends Lexer;

options {
   k=4;
   caseSensitive = true;
   caseSensitiveLiterals = true;
}

tokens {
     ABS = "abs" ;
     ACOS = "acos" ;
     ASIN = "asin" ;
     ATAN = "atan" ;
     COS = "cos" ;
     EXP = "exp" ;
     INV = "inv" ;
     LOG = "log" ;
     SIN = "sin" ;
     SQRT = "sqrt" ;
     TAN = "tan" ;
     SQR = "sqr" ;
     CUBE = "cube" ;
     POW = "pow";
     MAX = "max";
     MIN = "min";
     EEE = "e" ;
     PII = "pi" ;
}

WS: (' ' |'\t' | '\n' | '\r') { _ttype = Token.SKIP; } ;

LPAREN:	'(' ;
RPAREN:	')' ;
MINUS: 	'-' ;
PLUS:	'+' ;
MULT: 	'*' ;
DIV:	'/' ;
MOD:	'%' ;
COMMA: 	',' ;
SEMI:	';' ;

ID	options { testLiterals = true; }
	: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;

NUM_INT
	{boolean isDecimal=false;}
	:	"." {_ttype = DOT;}

		(('0'..'9')+ (EXPONENT)? { _ttype = NUM_REAL; })?
	|	(	'0' {isDecimal = true;} // special case for just '0'
		|	('1'..'9') ('0'..'9')*  {isDecimal=true;}		// non-zero decimal
		)
		// only check to see if it's a float if looks like decimal so far
		(	{ LA(2)!='.' && LA(3)!='.' && isDecimal}?
			(	'.' ('0'..'9')* (EXPONENT)?
			|	EXPONENT
			)
			{ _ttype = NUM_REAL; }
		)?
	;


// a couple protected methods to assist in matching floating point 
numbers
protected
EXPONENT
	:	('e') ('+'|'-')? ('0'..'9')+
	;

//////////////////////////////////////////////////////////////////////////
/

class CalcTreeWalker extends TreeParser;

expr returns [double r]
{
	double a,b;
	r=0;
}
	: 	#(PLUS a=expr b=expr)	{r = a+b;}

// Here comes my try to implement unary minus
         	|	( #(MINUS a=expr b=expr) )=> #( MINUS a=expr b=expr ) {r = 
a-b;} | #( MINUS a=expr ) {r = -a;}
//	
	|	#(MULT a=expr b=expr)	{r = a*b;}
	|	#(DIV a=expr b=expr)	{r = a/b;}
	|	#(MOD a=expr b=expr)	{r = a%b;}
	|	#(ABS a=expr)		{r = Math.abs(a);}
	|	#(ACOS a=expr)		{r = Math.acos(a);}
	|	#(ASIN a=expr)		{r = Math.asin(a);}
	|	#(ATAN a=expr)		{r = Math.atan(a);}
	|	#(COS a=expr)		{r = Math.cos(a);}
	|	#(EXP a=expr)		{r = Math.exp(a);}
	|	#(INV a=expr)		{r = 1/a;}
	|	#(LOG a=expr)		{r = Math.log(a);}
	|	#(SIN a=expr)		{r = Math.sin(a);}
	|	#(SQRT a=expr)		{r = Math.sqrt(a);}
	|	#(TAN a=expr)		{r = Math.tan(a);}
	|	#(SQR a=expr)		{r = a*a;}
	|	#(CUBE a=expr)		{r = a*a*a;}
	|	#(POW a=expr b=expr)	{r = Math.pow(a,b);}
	|	#(MAX a=expr b=expr)	{r = Math.max(a,b);}
	|	#(MIN a=expr b=expr)	{r = Math.min(a,b);}
	|	EEE			{r = Math.E;}
	|	PII			{r = Math.PI;}
	|	ni: NUM_INT		{r = (double)Double.parseDouble(ni.getText());}
	|	nr: NUM_REAL		{r = (double)Double.parseDouble(nr.getText());}
	;

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From karunakar at objectsymphony.com  Mon Oct 15 00:13:23 2001
From: karunakar at objectsymphony.com (N.V.S. Karunakar)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Dont know how to allow Unary MINUS
In-Reply-To: <B85CA613-BFBF-11D5-8358-0003930FD0FA@oops.se>
Message-ID: <NFBBKACKCMCJEIDAMFEKCEJPCFAA.karunakar@objectsymphony.com>

Hi,

   syntactic predicate recognizes the unary minus if its sub-tree is
constructed by the parser. your parser is not constructing the unary minus
sub-tree. a good place to add unary minus to your parser is atom.

change

> atom: unsignedNumber | ID | EEE | PII | LPAREN! assignExpr RPAREN! ;

to

atom: (MINUS^)? (unsignedNumber | ID | EEE | PII | LPAREN! assignExpr
RPAREN!);


> // Here comes my try to implement unary minus
>          	|	( #(MINUS a=expr b=expr) )=> #( MINUS
> a=expr b=expr ) {r =
> a-b;} | #( MINUS a=expr ) {r = -a;}
> //

   now, the above syntactic predicate recognizes and processes unary minus.
one more comment on the following rule in your grammar. the subrule (PLUS^ |
MINUS^) is not optional really. you may remove the "?" from "(PLUS^ |
MINUS^)?". I attach the grammar file for your reference.

> // Doing the arithmetic
> addExpr: multExpr (
>      pm: (PLUS^ | MINUS^)?
>      me: multExpr
>      exception catch [ RecognitionException ex ]
>      {
>                      System.out.println("Caught error in addExpr");
>                      reportError(ex.toString());
>      } )* ;

hope this helps,
karunakar

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: calc.g
Type: application/octet-stream
Size: 4403 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20011015/8111bd82/calc.obj
From kjell at oops.se  Mon Oct 15 01:25:57 2001
From: kjell at oops.se (Kjell Nilsson)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Dont know how to allow Unary MINUS
In-Reply-To: <NFBBKACKCMCJEIDAMFEKCEJPCFAA.karunakar@objectsymphony.com>
Message-ID: <41CD8644-C146-11D5-9201-0003930FD0FA@oops.se>

Thank you very much.

I was thinking about adding a rule in the parser after I sent this
question to you. But now with your explanation I see it more
clear.  Also the ? (option subrule) was probably something I
left in there in my atempt to get the parser to accept an operator with
both one or two expressions.

Well I have tried your solution now and it works great. Thanks once
more.

Also I would like to thank everybody (Terrence + ?) who made this Antlr, 
it is
an outstanding piece of open software.

--kjell


On m?ndag, oktober 15, 2001, at 09:13  AM, N.V.S. Karunakar wrote:

> Hi,
>
>    syntactic predicate recognizes the unary minus if its sub-tree is
> constructed by the parser. your parser is not constructing the unary 
> minus
> sub-tree. a good place to add unary minus to your parser is atom.
>
> change
>
>> atom: unsignedNumber | ID | EEE | PII | LPAREN! assignExpr RPAREN! ;
>
> to
>
> atom: (MINUS^)? (unsignedNumber | ID | EEE | PII | LPAREN! assignExpr
> RPAREN!);
>
>
>> // Here comes my try to implement unary minus
>>          	|	( #(MINUS a=expr b=expr) )=> #( MINUS
>> a=expr b=expr ) {r =
>> a-b;} | #( MINUS a=expr ) {r = -a;}
>> //
>
>    now, the above syntactic predicate recognizes and processes unary 
> minus.
> one more comment on the following rule in your grammar. the subrule 
> (PLUS^ |
> MINUS^) is not optional really. you may remove the "?" from "(PLUS^ |
> MINUS^)?". I attach the grammar file for your reference.
>
>> // Doing the arithmetic
>> addExpr: multExpr (
>>      pm: (PLUS^ | MINUS^)?
>>      me: multExpr
>>      exception catch [ RecognitionException ex ]
>>      {
>>                      System.out.println("Caught error in addExpr");
>>                      reportError(ex.toString());
>>      } )* ;
>
> hope this helps,
> karunakar
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>
>

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Oct 15 10:26:07 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Token classes
In-Reply-To: <NEBBJKNCALMJLNPAAMECKEJEEEAA.johnallengreen@yahoo.com>
Message-ID: <B7E063F6-C191-11D5-BD27-0030653DE0D6@jguru.com>


On Friday, October 12, 2001, at 10:37  PM, John Green wrote:

> The problem: a parser rule, which is nothing but a giant list of 100+
> keywords (don't ask), generates a function so huge that C++ can't 
> compile
> it.

Yeah, I can't really remember implementing it for ANTLR.  Pretty useful 
stuff.  Sorry about that.  You can break up your rule in the meantime 
like a chain:

a : T1 | T2 | T3 | b ;

b : T4 | T5 | T6 | c ;

c : T7 ;

...

Will that help the compiler?

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From greenj at ix.netcom.com  Mon Oct 15 18:35:30 2001
From: greenj at ix.netcom.com (John Green)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Token classes
In-Reply-To: <B7E063F6-C191-11D5-BD27-0030653DE0D6@jguru.com>
Message-ID: <NEBBJKNCALMJLNPAAMECAENOEEAA.johnallengreen@yahoo.com>

Clever... I hadn't thought of that.

Yes, it will certainly take care of the compiler's problem.

Thanks!
John


> -----Original Message-----
> From: Terence Parr [mailto:parrt@jguru.com]
> Sent: Tuesday, October 16, 2001 3:26 AM
> To: antlr-interest@yahoogroups.com
> Subject: Re: [antlr-interest] Token classes
>
>
>
> On Friday, October 12, 2001, at 10:37  PM, John Green wrote:
>
> > The problem: a parser rule, which is nothing but a giant list of 100+
> > keywords (don't ask), generates a function so huge that C++ can't
> > compile
> > it.
>
> Yeah, I can't really remember implementing it for ANTLR.  Pretty useful
> stuff.  Sorry about that.  You can break up your rule in the meantime
> like a chain:
>
> a : T1 | T2 | T3 | b ;
>
> b : T4 | T5 | T6 | c ;
>
> c : T7 ;
>
> ...
>
> Will that help the compiler?
>
> Ter
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Oct 15 21:47:52 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Token classes
In-Reply-To: <NEBBJKNCALMJLNPAAMECAENOEEAA.johnallengreen@yahoo.com>
Message-ID: <F4FCA344-C1F0-11D5-BD27-0030653DE0D6@jguru.com>


On Monday, October 15, 2001, at 06:35  PM, John Green wrote:

> Clever... I hadn't thought of that.
>
> Yes, it will certainly take care of the compiler's problem.

I wonder if I've made this a FAQ entry yet?  i'll have to cut n paste I 
guess.

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From greenj at ix.netcom.com  Mon Oct 15 22:20:42 2001
From: greenj at ix.netcom.com (John Green)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Token classes
In-Reply-To: <F4FCA344-C1F0-11D5-BD27-0030653DE0D6@jguru.com>
Message-ID: <NEBBJKNCALMJLNPAAMECMEOEEEAA.johnallengreen@yahoo.com>

> From: Terence Parr [mailto:parrt@jguru.com]
>
> I wonder if I've made this a FAQ entry yet?  i'll have to cut n paste I
> guess.

LOL!  :-)

I'm afraid that you'll have to shut down the mailing list before you will
get holdouts like me to move to an online forum. ;-)

Cheers,
John


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Tue Oct 16 10:41:41 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Token classes
In-Reply-To: <NEBBJKNCALMJLNPAAMECMEOEEEAA.johnallengreen@yahoo.com>
Message-ID: <0F0FCD44-C25D-11D5-BD27-0030653DE0D6@jguru.com>


On Monday, October 15, 2001, at 10:20  PM, John Green wrote:

>> From: Terence Parr [mailto:parrt@jguru.com]
>>
>> I wonder if I've made this a FAQ entry yet?  i'll have to cut n paste I
>> guess.
>
> LOL!  :-)
>
> I'm afraid that you'll have to shut down the mailing list before you 
> will
> get holdouts like me to move to an online forum. ;-)

"Yooo wascally wabbit!"

<snicker>.  I'll go poke around ;)

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Tue Oct 16 11:50:12 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] grammars without any rules
In-Reply-To: <NFBBKACKCMCJEIDAMFEKAEJDCFAA.karunakar@objectsymphony.com>
Message-ID: <A1034AB6-C266-11D5-BD27-0030653DE0D6@jguru.com>


On Friday, October 12, 2001, at 11:20  PM, N.V.S. Karunakar wrote:

>>>    ANTLR doesn't allow a grammar definition without a rule. Consider
>>> this
>>> case - We define a lexer for a language K. In the next version of K
>>> which is
>>> NextK, all we do is to add a few keywords and add some syntactic
>>> constructs.
>>> We will use grammar inheritance to add more rules to the parser. to 
>>> add
>>> extra key words we inherit from the K's lexer. we can add the new key
>>> words
>>> to the tokens section of this new lexer. there is no need to add any 
>>> new
>>> lexer rules. but ANTLR insists on a rule. in this light can we allow
>>> grammars without any rules ?
>>
>> Howdy.  Can you just add a dummy rule?
>>
>> Ter
>
> we sure can add a dummy rule. But i was wondering why ANTLR should 
> insist on
> having at least one rule.

Purely a matter of almost nobody needing it so I didn't spend CPU time 
thinking about the problem ;)

Sorry.

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From shashidharagk at rediffmail.com  Tue Oct 16 19:25:20 2001
From: shashidharagk at rediffmail.com (Shashidhara)
Date: Mon Dec 20 16:14:32 2004
Subject: unsubscribe
Message-ID: <20011017022520.8240.qmail@mailweb14.rediffmail.com>


unsubscribe 

From lemoine at multimania.com  Wed Oct 17 05:46:56 2001
From: lemoine at multimania.com (lemoine@multimania.com)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] How to throw an exception from the lexer to the caller rule
Message-ID: <9qjuk0+a5k6@eGroups.com>

Hi,
I had specified the testLiterals option to true for the IDENT rule in 
the Lexer to test each token against the literals table.
But when the literal does not match with the lexer IDENT rule, it 
generates an Exception and exits of the lexer.
I want to catch the exception in the caller rule of the parser to 
specify my own error message.

Any help would be greatly apprecied.


Thanks

Herv?



$ cat infile2
GET /NAME=tot?"select name, type from sysdatabases where type='U'" 
HTTP/1.1
$

$ java Main < infile2
unexpected token: NAME
$

If the exception throws to the caller rule (key in the grammar), it 
should be : 

$ java Main < infile2
Unknown option NAME
$


The grammar file is :


class P extends Parser; 

options {
	defaultErrorHandler=false ;
}

{
	String _http_method = null, _http_version = null ;

	public String getToken(String msg) {
	  return msg.substring(18) ;
	}
}

start		: http_method SLASH uri http_version 
        	;

http_method	: g:HTTP_METHOD_GET 
		  { _http_method = g.getText() ; }
		| p:HTTP_METHOD_POST
		  { _http_method = p.getText() ; }
		;
		exception // for HTTP_METHOD
		catch [RecognitionException  e] {
		 String token = getToken(e.getMessage()) ;
		 throw new RecognitionException("HTTP 
method "+token+" not supported");
		}

uri		: commands 
		| queries
		;

http_version	: v1:HTTP_VERSION_10 
		   { _http_version = v1.getText() ; }
		| v2:HTTP_VERSION_11
		   { _http_version = v2.getText() ; }
		;
		exception // for HTTP_VERSION
		catch [RecognitionException e] {
		  String token = getToken(e.getMessage()) ;
		  throw new RecognitionException("Unknown HTTP 
protocol "+token);
		}

commands	: { String val = null ; } 
		  ( 
		    s:STATS
		    { val = s.getText() ; }
		|   d:DSINFOS
		    { val = d.getText() ; }
		|   p:PINFOS
		    { val = p.getText() ; }
		|   h:HELP
		    { val = h.getText() ; }
		  )
		  {
		    System.out.println("command is "+val) ;
		  }
		;
		exception
		catch [RecognitionException e] {
		 String token = getToken(e.getMessage()) ;
		 throw new RecognitionException("Unknown 
command "+token);
		}

queries		: query (SEMI query)*
		;

query		: (optionList QUESTION)? sqlList
		;

optionList	: keypair (COMMA keypair)*
		;

sqlList		: sql (COMMA sql)*
		;

keypair		: { String k = null, v = null ;}

		  k=key EQUALS v=value 
		  { 
		    System.out.println("key="+k) ;
		    System.out.println("value="+v) ; 
		  }
		;

sql		: s:STRING_LITERAL
		  { 
		    System.out.println("sql="+s.getText()) ;
		  }
		;

key returns[String val = null]		

		: pn:PNAME
		  { val = pn.getText() ; }
		| d:DSN
		  { val = d.getText() ; }
		| u:USER
		  { val = u.getText() ; }
		| pw:PWD
		  { val = pw.getText() ; }
		;
		exception
		catch [RecognitionException  e] {
		 String token = getToken(e.getMessage()) ;
		 throw new RecognitionException("Unknown 
option "+token);
		}

value returns[String val = null]

		: s:STRING_LITERAL
		  { val = s.getText() ; }
		| i:IDENT
		  { val = i.getText() ; }
		;


class L extends Lexer; 

options {
	k=2 ;
	charVocabulary = '\3'..'\377' ;
	testLiterals=false ;
}

tokens {
	// HTTP Syntax
	HTTP_METHOD_GET="GET"; HTTP_METHOD_POST="POST";

	// HTTP version
	HTTP_VERSION_10="HTTP/1.0"; HTTP_VERSION_11="HTTP/1.1";

	// Static options keys
	PNAME="PNAME"; DSN="DSN"; USER="USER"; PWD="PWD";

	// Keywords
	STATS="Statistics"; DSINFOS="DataSourcesInfos"; 
	PINFOS="ProfilesInfos"; HELP="Help";
}

//
// string literals
//
STRING_LITERAL	: DQUOTE_LITERAL | SQUOTE_LITERAL
		;
protected
DQUOTE_LITERAL	: '"'!
		  ( '"' '"'!
		  | ~('"'|'\n'|'\r')
		  )*
		  ( '"'!
		  | // nothing
		  )
		;
protected
SQUOTE_LITERAL	: '\''!
		  ( '\'' '\''!
		  | ~('\''|'\n'|'\r')
		  )*
		  ( '\''!
		  | // nothing
		  )
		;
//
// Operators
//
COMMA		: ',' ;
DOT		: '.' ;
QUESTION	: '?' ;
SEMI		: ';' ;
SLASH		: '/' ;
EQUALS		: '=' ;

//
// Whitespace
//
WS		: (' '
		|  '\t'
		|  '\f'
		|  ( "\r\n"
		   | '\r'
		   | '\n'
		   )
		  )
		  { $setType(Token.SKIP) ; }
		;
IDENT
options { testLiterals=true ;}
	
	: 'a'..'z'|'A'..'Z') 'a'..'z'|'A'..'Z'|'0'..'9'|'/'|'.')*
	;


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Oct 22 10:28:59 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] test
Message-ID: <47244295-C712-11D5-BD27-0030653DE0D6@jguru.com>

heh, no traffic for 5 days...testing.

Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lemoine at multimania.com  Mon Oct 22 23:29:10 2001
From: lemoine at multimania.com (lemoine@multimania.com)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Re: test
In-Reply-To: <47244295-C712-11D5-BD27-0030653DE0D6@jguru.com>
Message-ID: <9r32nm+k5c7@eGroups.com>

--- In antlr-interest@y..., Terence Parr <parrt@j...> wrote:
> heh, no traffic for 5 days...testing.
> 
> Ter
> --
> Chief Scientist & Co-founder, http://www.jguru.com
> Creator, ANTLR Parser Generator: http://www.antlr.org

If you want to test, you can reply to the last post.
I did not find how to do that.

Thanks 

Herv?


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From chris.kuip at paragon.nl  Mon Oct 22 23:48:25 2001
From: chris.kuip at paragon.nl (chris.kuip@paragon.nl)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Thank You Very Much and Re: test
In-Reply-To: <47244295-C712-11D5-BD27-0030653DE0D6@jguru.com>
Message-ID: <9r33rp+j50u@eGroups.com>

Dear Dr Parr,

I was wondering too what is happening to this group.
So here is some additional traffic.

I have downloaded ANTLR and I am using it right now.  
I think you have done a wonderfull job by creating it

I used to be a YACC addict (not LEX!) but by learning
ANTLR I am quickly drying out of that habit.

I am gratefull that you have made it publicly available.  
It is public (provided that an ANTLR user acknowledges
he/she has used the ANTLR software in his/her 
documentation), isn't it?

I have two additional questions:
- It has been a year since ANTLR 2.7.1, the currently 
  available version, has been published.  Is there a 
  new version coming up?
- From the ANTLR web site you have made two initial
  chapters of your new book available.  How is the work
  on that book going?

Best Regards,

Chris Kuip


--- In antlr-interest@y..., Terence Parr <parrt@j...> wrote:
> heh, no traffic for 5 days...testing.
> 
> Ter
> --
> Chief Scientist & Co-founder, http://www.jguru.com
> Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Tue Oct 23 03:21:56 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Thank You Very Much and Re: test
In-Reply-To: <9r33rp+j50u@eGroups.com>
Message-ID: <B7FB1F39.11F44%sunshine@public.kherson.ua>

on 10/23/01 9:48, chris.kuip@paragon.nl at chris.kuip@paragon.nl wrote:

> Dear Dr Parr,
> 
> I was wondering too what is happening to this group.

What is going on? :-)

We all keep crossing fingers waiting when Ric and Terr
prepare pre -final 2.7.2 version of ANTLR.

I want to see optimization that Ric will include...

> So here is some additional traffic.
> 
> I have downloaded ANTLR and I am using it right now.
> I think you have done a wonderfull job by creating it
> 
> I used to be a YACC addict (not LEX!) but by learning
> ANTLR I am quickly drying out of that habit.
> 
> I am gratefull that you have made it publicly available.
> It is public (provided that an ANTLR user acknowledges
> he/she has used the ANTLR software in his/her
> documentation), isn't it?
> 
> I have two additional questions:
> - It has been a year since ANTLR 2.7.1, the currently
> available version, has been published.  Is there a
> new version coming up?

yes, and we wait for it.

> - From the ANTLR web site you have made two initial
> chapters of your new book available.  How is the work
> on that book going?
> 
> Best Regards,

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From chris.kuip at paragon.nl  Tue Oct 23 04:52:37 2001
From: chris.kuip at paragon.nl (chris.kuip@paragon.nl)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Thank You Very Much and Re: test
In-Reply-To: <B7FB1F39.11F44%sunshine@public.kherson.ua>
Message-ID: <9r3lm5+kcsr@eGroups.com>

Dear Mr. Zasukhin

If I sounded pushing, I apologize.  I didn't intend to be.

Best Regards,
Chris Kuip.


--- In antlr-interest@y..., Ruslan Zasukhin <sunshine@p...> wrote:
> on 10/23/01 9:48, chris.kuip@p... at chris.kuip@p... wrote:
> 
> > Dear Dr Parr,
> > 
> > I was wondering too what is happening to this group.
> 
> What is going on? :-)
> 
> We all keep crossing fingers waiting when Ric and Terr
> prepare pre -final 2.7.2 version of ANTLR.
> 
> I want to see optimization that Ric will include...
> 
> > So here is some additional traffic.
> > 
> > I have downloaded ANTLR and I am using it right now.
> > I think you have done a wonderfull job by creating it
> > 
> > I used to be a YACC addict (not LEX!) but by learning
> > ANTLR I am quickly drying out of that habit.
> > 
> > I am gratefull that you have made it publicly available.
> > It is public (provided that an ANTLR user acknowledges
> > he/she has used the ANTLR software in his/her
> > documentation), isn't it?
> > 
> > I have two additional questions:
> > - It has been a year since ANTLR 2.7.1, the currently
> > available version, has been published.  Is there a
> > new version coming up?
> 
> yes, and we wait for it.
> 
> > - From the ANTLR web site you have made two initial
> > chapters of your new book available.  How is the work
> > on that book going?
> > 
> > Best Regards,
> 
> -- 
> Best regards,
> Ruslan Zasukhin
> 
> -------------------------
> Paradigma.
> 
> e-mail: ruslan@p...
> web   : http://www.paradigmasoft.com
> 
> To subscribe to the Valentina mail list
> send a letter to valentina-on@l...


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Tue Oct 23 05:33:50 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Thank You Very Much and Re: test
In-Reply-To: <9r3lm5+kcsr@eGroups.com>; from chris.kuip@paragon.nl on Tue, Oct 23, 2001 at 11:52:37AM -0000
References: <B7FB1F39.11F44%sunshine@public.kherson.ua> <9r3lm5+kcsr@eGroups.com>
Message-ID: <20011023143350.D11442@cs.utwente.nl>

Hi,

On Tue, Oct 23, 2001 at 11:52:37AM -0000, chris.kuip@paragon.nl wrote:
> If I sounded pushing, I apologize.  I didn't intend to be.

=) Ruslan is usually a lot pushier than you =) ;) ;) ;)

It seems I have some more breathing space now than in the past weeks. I
hope to finish up real soon now in my branch. After that merging with
Terence for a prerelease 2.7.2 shouldn't take that much time.

I'm quite positive we'll manage to push it out by the end of next year.....

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
Wit is cultured insolence. - Aristotle


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Tue Oct 23 06:42:13 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Thank You Very Much and Re: test
In-Reply-To: <20011023143350.D11442@cs.utwente.nl>
Message-ID: <B7FB4E12.11F52%sunshine@public.kherson.ua>

on 10/23/01 15:33, Ric Klaren at klaren@cs.utwente.nl wrote:

>> If I sounded pushing, I apologize.  I didn't intend to be.
> 
> =) Ruslan is usually a lot pushier than you =) ;) ;) ;)

Oh yes!!! 

I believe I will have some more optimizations for you later :-)

> It seems I have some more breathing space now than in the past weeks. I
> hope to finish up real soon now in my branch. After that merging with
> Terence for a prerelease 2.7.2 shouldn't take that much time.
> 
> I'm quite positive we'll manage to push it out by the end of next year.....

this will be great.

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Tue Oct 23 10:30:22 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] 2.7.2, Parsing Revival, Sleeper Agents, Hippies
In-Reply-To: <20011023143350.D11442@cs.utwente.nl>
Message-ID: <A2FF7162-C7DB-11D5-BD27-0030653DE0D6@jguru.com>


On Tuesday, October 23, 2001, at 05:33  AM, Ric Klaren wrote:

> Hi,
>
> On Tue, Oct 23, 2001 at 11:52:37AM -0000, chris.kuip@paragon.nl wrote:
>> If I sounded pushing, I apologize.  I didn't intend to be.
>
> =) Ruslan is usually a lot pushier than you =) ;) ;) ;)
>
> It seems I have some more breathing space now than in the past weeks. I
> hope to finish up real soon now in my branch. After that merging with
> Terence for a prerelease 2.7.2 shouldn't take that much time.
>
> I'm quite positive we'll manage to push it out by the end of next 
> year.....

Yep.  I'm madly running diff on Ric's branch with the main line code to 
see what has happened while I've been "asleep" ;)  My favorite line is 
"huh...did I write that?"

Teaser: i'm anticipating another "Dr. T's Traveling Parsing Revival and 
Beer Tasting Festival" workshop next April or so in San Francisco Bay 
Area.  I want to focus on tree construction, translation, and output 
generation.  Lots of stuff brewing from the mysterious 
ANTLR-sleeper-agent-extraordinaire at JPL, Loring Craymer.  I've got 
some splendiferous output/generation grammar stuff brewing also that I 
use to generate the jGuru.com website etc...  Heh maybe we can get Ric's 
university to fly him here or we can all chip in a few drachmas to 
attenuate the cost.  He can also sleep down on Haight street here in SF 
with the hippies to save money and I here Eucalyptus tree bark makes 
good soup (or was that the stuff that turns you into a hippy?). ;)

First priority is getting 2.7.2 out...

Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dewing at apple.com  Tue Oct 23 22:29:17 2001
From: dewing at apple.com (David Ewing)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Time for another question about Unicode support
Message-ID: <B7FBADCB.2A305%dewing@apple.com>

I've been using ANTLR for a while now, and I need to get it to handle
Unicode input. We use ANTLR to parse Java source code for indexing
information in Project Builder, Apple's IDE for Mac OS X.

It's not obvious to me how much work has gone on in this area for 2.7.2.
Scanning the list archives, it looks like some work has been done to support
it in Java parsers, but not for C++ parsers. Of course, we're generating a
C++ parser. (Yes, we use a C++ parser, called from Objective C, to parse
Java code!)

So, in my search for what to do along these lines, I ran into ICU
(International Components for Unicode), an open source library from IBM
<http://oss.software.ibm.com/icu>. Older versions of it are the basis of the
i18n classes in the JDK. There are both Java and C++ versions. It seems to
contain appropriate character set classes, which might solve that issue on
the C++ side. So, has using ICU been considered for ANTLR?

I may be able to help out in this effort, though for me that would mean
starting work on it soon. My guess is that my time pressures will mean
writing a custom lexer to deal with Unicode. Something that would return IDs
with UTF-8 strings. But I'd rather not do it that way. I'd rather help out
adding the support "the right way".

Anyhow, any info or recommendations would be greatly appreciated.

Dave
-- 
David Ewing, Mac OS X Development Apps, Apple Computer
--



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Wed Oct 24 02:24:23 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Time for another question about Unicode support
In-Reply-To: <B7FBADCB.2A305%dewing@apple.com>; from dewing@apple.com on Tue, Oct 23, 2001 at 11:29:17PM -0600
References: <B7FBADCB.2A305%dewing@apple.com>
Message-ID: <20011024112423.J11442@cs.utwente.nl>

Hi,

On Tue, Oct 23, 2001 at 11:29:17PM -0600, David Ewing wrote:
> the C++ side. So, has using ICU been considered for ANTLR?

I've looked at it and at a few others. (but ICU looked quite nice maybe
nicest), then again I don't know if I want a dependency on some external
library... (without support in antlr's (c++) codegen to switch between
support libraries etc.)

So far I've ditched any attempts at unicode for C++. (I have no personal
interest in it, no interest from the project I'm working on (so my boss
won't sponsor it) and the subject is way to hairy (and uninteresting) to
spent my free time on)

> I may be able to help out in this effort, though for me that would mean
> starting work on it soon. My guess is that my time pressures will mean
> writing a custom lexer to deal with Unicode. Something that would return IDs
> with UTF-8 strings. But I'd rather not do it that way. I'd rather help out
> adding the support "the right way".

If you are willing to really look into this than I can only cheer you on =)
and help

> Anyhow, any info or recommendations would be greatly appreciated.

See this post/thread for some thoughts I spewed out on this in the past:

http://groups.yahoo.com/group/antlr-interest/message/3973

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
Wit is cultured insolence. - Aristotle


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From dewing at apple.com  Wed Oct 24 07:53:34 2001
From: dewing at apple.com (David Ewing)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Time for another question about Unicode
	support
In-Reply-To: <20011024112423.J11442@cs.utwente.nl>
Message-ID: <B7FC320C.2A379%dewing@apple.com>

Ric,

That's pretty much where I thought things were. I had read your other
message already, but had overlooked your reference to ICU. I actually found
out about ICU by looking at the jikes sources - I also need to get it to
support different encodings on Mac OS X.

Personally, I'd say if you're going to depend on an external library for
Unicode, ICU is the way to go. Unfortunately, I don't know the internals of
the antlr library well enough to take this on alone. At least not
considering my time constraints. Writing a lexer that handles Unicode is
probably less than a week's worth of work, since my task of parsing Java is
so narrow in scope (compared to generic Unicode support in antlr). Adding
generic support is probably an order of magnitude more work. If there had
been enough work done to give me a head start, I might have been able to
take it on. But that isn't the case. Oh well.

Thanks,
Dave

on 10/24/01 3:24 AM, Ric Klaren at klaren@cs.utwente.nl wrote:
> On Tue, Oct 23, 2001 at 11:29:17PM -0600, David Ewing wrote:
>> the C++ side. So, has using ICU been considered for ANTLR?
> 
> I've looked at it and at a few others. (but ICU looked quite nice maybe
> nicest), then again I don't know if I want a dependency on some external
> library... (without support in antlr's (c++) codegen to switch between
> support libraries etc.)
> 
> So far I've ditched any attempts at unicode for C++. (I have no personal
> interest in it, no interest from the project I'm working on (so my boss
> won't sponsor it) and the subject is way to hairy (and uninteresting) to
> spent my free time on)
> 
>> I may be able to help out in this effort, though for me that would mean
>> starting work on it soon. My guess is that my time pressures will mean
>> writing a custom lexer to deal with Unicode. Something that would return IDs
>> with UTF-8 strings. But I'd rather not do it that way. I'd rather help out
>> adding the support "the right way".
> 
> If you are willing to really look into this than I can only cheer you on =)
> and help
> 
>> Anyhow, any info or recommendations would be greatly appreciated.
> 
> See this post/thread for some thoughts I spewed out on this in the past:
> 
> http://groups.yahoo.com/group/antlr-interest/message/3973


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From ppfaffman at BIGSANDY.COM  Wed Oct 24 12:14:37 2001
From: ppfaffman at BIGSANDY.COM (Phillip R. Pfaffman)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Newbie question about C++ parser generation
Message-ID: <3.0.3.32.20011024121437.03a640a8@bigsandy.com>

Hello,

I am looking for a C++ grammar to use with ANTLR 2.0 or above (I understand
ANTLR at this level or above is implemented in java), but can't seem to
find one. The ANTLR 2.7.1 distribution has action directories for several
languages, for example, a cpp directory that has a
../antlr/actions/cpp/action.g file that appears to describe a lexer.
There's one for java and one for sather as well. As near as I can figure
out, these various action directories each provide the basis for creating a
parser that is written in the respective language. Examples follow of
generators/parsers (like calc) which use these assets. 

What I want is to generate a C++ parser implemented in java. Or, as a
second choice, a C++ parser implemented in C++. I want to use the java
version of ANTLR (at or above 2.0) to do the generation. Could someone tell
me where to find the grammar(s) to do this? Or tell me where I've gotton
confused?

Regards,

Phillip



Phillip R. Pfaffman					ppfaffman@bigsandy.com
[Home/Office] +1-626-798-8649   [Fax] +1-626-791-8281 
[PGP fingerprint]   224A A856 B8EA 3073 221C  1550 3B44 9BDD 951B 9028
[PGP Key Site]   ldap://certserver.pgp.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Thu Oct 25 01:07:51 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Newbie question about C++ parser generation
In-Reply-To: <3.0.3.32.20011024121437.03a640a8@bigsandy.com>; from ppfaffman@BIGSANDY.COM on Wed, Oct 24, 2001 at 12:14:37PM -0700
References: <3.0.3.32.20011024121437.03a640a8@bigsandy.com>
Message-ID: <20011025100751.S11442@cs.utwente.nl>

Hi,

On Wed, Oct 24, 2001 at 12:14:37PM -0700, Phillip R. Pfaffman wrote:
> I am looking for a C++ grammar to use with ANTLR 2.0 or above (I understand
> ANTLR at this level or above is implemented in java), but can't seem to
> find one.

There's none AFAIK. For the predecessor of antlr, pccts, there's one
though. It might be portable (?) probably with some pain.

> The ANTLR 2.7.1 distribution has action directories for several languages,
> for example, a cpp directory that has a ../antlr/actions/cpp/action.g file
> that appears to describe a lexer. There's one for java and one for sather
> as well. As near as I can figure out, these various action directories each
> provide the basis for creating a parser that is written in the respective
> language. Examples follow of generators/parsers (like calc) which use these
> assets. 

These things are part of the guts of ANTLR. No serviceable parts inside =)

> What I want is to generate a C++ parser implemented in java. Or, as a
> second choice, a C++ parser implemented in C++. I want to use the java
> version of ANTLR (at or above 2.0) to do the generation.

That should all be possible.

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
Wit is cultured insolence. - Aristotle


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Thu Oct 25 08:41:08 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] ANNOUNCE new devel snapshot
Message-ID: <20011025174107.V11442@cs.utwente.nl>

Hi,

Just felt it was time for a snapshot. Get it at:

http://wwwhome/~klaren/antlr/

Changes:

- Automake got ditched (configure too for now)
  C++/java configuration in Config.make file, try running make a toplevel.
- Makefiles for examples
- Doc updates (see http://wwwhome.cs.utwente.nl/~klaren/antlr/support-docs/index.html)
  (and also the normal docs here and there)
- deprecated set/getASTNodeFactory methods in favour of set/getASTFactory
  (for consistency) (old ones still there no worries)
- Here and there rearranged stuff for inlining. (Still have to do a lot
  though)
- Fixed some mishap with CommonASTWithHiddenTokens seemed it triggered a gcc
  bug (2.95/3.0) where vtable didn't get instantiated.
- Updated some error messages from antlr
- The LA_k optimizations suggested by Ruslan (still one minor issue with 
  lexers)
- Removed down and right initializers from BaseAST copy constructor, they
  wreak havoc in relation to dupTree.
- CharScanner moved lot of small methods back to header, lessened
  circular dependency with MismatchedCharException.
- (JAVA) Added ASTPair construction optimization suggested by Sander Mägi.
- Added a warning for usage of labeled subrules. (these are unimplemented)
- Added missing initializer for factory in TreeParser constructor.
- Added the possiblity to escape # characters. Added more preprocessor stuff
  to be skipped. Changed error for ## into a warning.
- Some heterogeneous AST fixes. Heterogeneous ast example works once more
  (C++)
- Added warning for tokens defined outside the tokens section. Thanks to
  Michael Schmitt for the pointer. People will probably hate me for this =)
- Optimize number of AST declarations generated code should be much tighter now
- added patch to allow reset of lexer object
- use buffered IO...gets 2x performance boost reading grammars.
- Updated a lot of #include "antlr/xx" to #include <antlr/xx>. Also
  updated some copyrights.
- Small MSVC fixes updates. (thanks to Jean-Daniel Fekete)
- Fixed some oopses. 
- #if-0-ed the deprecated getErrorMessage method. 
- Also preprocess preheader actions and preambles for treegeneration code.
- Robustified action.g - if currentRule = 0 a fitting error message is
  printed.
- Print timestamp and build number in the copyright headers.

There's still a lot of patches and stuff on the shelves. Don't worry if
it's not inhere yet.

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 'And this 'rebooting' business? Give it a good kicking, do you?' 'Oh, no,
  of course, we ... that is ... well, yes, in fact,' said Ponder. 'Adrian
    goes round the back and ... er ... prods it with his foot. But in a
     technical way,' he added. --- From: Hogfather by Terry Pratchett.


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sunshine at public.kherson.ua  Thu Oct 25 09:50:40 2001
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] ANNOUNCE new devel snapshot
In-Reply-To: <20011025174107.V11442@cs.utwente.nl>
Message-ID: <B7FE1C97.12091%sunshine@public.kherson.ua>

on 10/25/01 18:41, Ric Klaren at klaren@cs.utwente.nl wrote:

> Hi,
> 
> Just felt it was time for a snapshot. Get it at:

Great Ric!

I am afraid during next week or so I will not be able test it,
but later ...

-- 
Best regards,
Ruslan Zasukhin

-------------------------
Paradigma.

e-mail: ruslan@paradigmasoft.com
web   : http://www.paradigmasoft.com

To subscribe to the Valentina mail list
send a letter to valentina-on@lists.macserve.net



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cela_vei at yahoo.com  Thu Oct 25 14:24:03 2001
From: cela_vei at yahoo.com (cela_vei@yahoo.com)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] How to put back a token read by lexer
In-Reply-To: <B7FE1C97.12091%sunshine@public.kherson.ua>
Message-ID: <9r9vtj+l6mb@eGroups.com>

I want to put back the most recently read token back into the 
input stream. I searched through the archive and found that people 
have asked this question multiple times but without an answer.

Please Help
Cela Vei


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sinan.karasu at boeing.com  Thu Oct 25 15:06:38 2001
From: sinan.karasu at boeing.com (Sinan)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] How to put back a token read by lexer
References: <9r9vtj+l6mb@eGroups.com>
Message-ID: <3BD88CEE.3796FDF1@boeing.com>

cela_vei@yahoo.com wrote:
> 
> I want to put back the most recently read token back into the
> input stream. I searched through the archive and found that people
> have asked this question multiple times but without an answer.
> 
> Please Help
> Cela Vei
> 
> 
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/



Do something like the following to implement your own push....

public class MyTokenStreamSelector extends TokenStreamSelector {


        public MyTokenStreamSelector() {
                super();
		...create some kind of stack.....

        }
        public void pushToken(Token token) {
                ....push it somewhere;
        }
        public Token nextToken() throws TokenStreamException {
 		if anything pushed, pop an return it 

                else 
                        try {
                		Token tok = super.nextToken();

   		                return tok;
                        }
                        catch (TokenStreamRetryException r) {
					// whatever.....
                        }
                }
        }
}

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From bob at werken.com  Thu Oct 25 16:11:03 2001
From: bob at werken.com (bob mcwhirter)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] How to put back a token read by lexer
In-Reply-To: <3BD88CEE.3796FDF1@boeing.com>
Message-ID: <Pine.LNX.3.96.1011025191008.21900B-100000@exeter.exeter.org>


Alternatively, couldn't you just use look-ahead to do whatever
it is you need to do, to avoid having to actually pop the token
in the first place?

Or are you inserting artificial tokens into the stream based
upon things you've seen up to that point?  

	-bob

On Thu, 25 Oct 2001, Sinan wrote:

> cela_vei@yahoo.com wrote:
> > 
> > I want to put back the most recently read token back into the
> > input stream. I searched through the archive and found that people
> > have asked this question multiple times but without an answer.
> > 
> > Please Help
> > Cela Vei
> > 
> > 
> > 
> > Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
> 
> 
> 
> Do something like the following to implement your own push....
> 
> public class MyTokenStreamSelector extends TokenStreamSelector {
> 
> 
>         public MyTokenStreamSelector() {
>                 super();
> 		...create some kind of stack.....
> 
>         }
>         public void pushToken(Token token) {
>                 ....push it somewhere;
>         }
>         public Token nextToken() throws TokenStreamException {
>  		if anything pushed, pop an return it 
> 
>                 else 
>                         try {
>                 		Token tok = super.nextToken();
> 
>    		                return tok;
>                         }
>                         catch (TokenStreamRetryException r) {
> 					// whatever.....
>                         }
>                 }
>         }
> }
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From Matthew.Ford at forward.com.au  Thu Oct 25 16:28:35 2001
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] How to put back a token read by lexer
References: <Pine.LNX.3.96.1011025191008.21900B-100000@exeter.exeter.org>
Message-ID: <000f01c15dac$c52f3d10$6664020a@matthewfnb>

You want to be careful about pushing back tokens because of Antlr's
lookahead.
Use the lookahead instead.
matthew
----- Original Message -----
From: "bob mcwhirter" <bob@werken.com>
To: <antlr-interest@yahoogroups.com>
Sent: Friday, October 26, 2001 9:11 AM
Subject: Re: [antlr-interest] How to put back a token read by lexer


>
> Alternatively, couldn't you just use look-ahead to do whatever
> it is you need to do, to avoid having to actually pop the token
> in the first place?
>
> Or are you inserting artificial tokens into the stream based
> upon things you've seen up to that point?
>
> -bob
>
> On Thu, 25 Oct 2001, Sinan wrote:
>
> > cela_vei@yahoo.com wrote:
> > >
> > > I want to put back the most recently read token back into the
> > > input stream. I searched through the archive and found that people
> > > have asked this question multiple times but without an answer.
> > >
> > > Please Help
> > > Cela Vei
> > >
> > >
> > >
> > > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/
> >
> >
> >
> > Do something like the following to implement your own push....
> >
> > public class MyTokenStreamSelector extends TokenStreamSelector {
> >
> >
> >         public MyTokenStreamSelector() {
> >                 super();
> > ...create some kind of stack.....
> >
> >         }
> >         public void pushToken(Token token) {
> >                 ....push it somewhere;
> >         }
> >         public Token nextToken() throws TokenStreamException {
> >  if anything pushed, pop an return it
> >
> >                 else
> >                         try {
> >                 Token tok = super.nextToken();
> >
> >                    return tok;
> >                         }
> >                         catch (TokenStreamRetryException r) {
> > // whatever.....
> >                         }
> >                 }
> >         }
> > }
> >
> >
> >
> > Your use of Yahoo! Groups is subject to
http://docs.yahoo.com/info/terms/
> >
> >
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sinan.karasu at boeing.com  Thu Oct 25 16:42:12 2001
From: sinan.karasu at boeing.com (Sinan)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] How to put back a token read by lexer
References: <Pine.LNX.3.96.1011025191008.21900B-100000@exeter.exeter.org> <000f01c15dac$c52f3d10$6664020a@matthewfnb>
Message-ID: <3BD8A354.62DD86E8@boeing.com>

Matthew Ford wrote:
> 
> You want to be careful about pushing back tokens because of Antlr's
> lookahead.
> Use the lookahead instead.
> matthew
> ----- Original Message -----
> From: "bob mcwhirter" <bob@werken.com>
> To: <antlr-interest@yahoogroups.com>
> Sent: Friday, October 26, 2001 9:11 AM
> Subject: Re: [antlr-interest] How to put back a token read by lexer
> 

This is correct. Most people when they want to do push tokens, are
actually still "lex/flex"'ing.

Got to change your way of thinking....

Sinan

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From david.silberberg at jhuapl.edu  Fri Oct 26 06:57:20 2001
From: david.silberberg at jhuapl.edu (david.silberberg@jhuapl.edu)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Newbie question - parsing decimal numbers
Message-ID: <9rbq40+ritn@eGroups.com>

I'm creating a parser that reads expressions like:

  a>3.5
  b < 4.57
  etc.

I'm using the example Java.g to read NUM_INTs. 
The token returned for the example (a>3.5) does indeed
return 3.5. However, the token returned for the second
example (b < 4.57) returns only 4 and ignores the '.57' .
It seems that the white space makes a difference to the
parser and I can't figure out why. Does any know how 
to fix this?

Thank you,
David Silberberg
david.silberberg@jhuapl.edu



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From cela_vei at yahoo.com  Fri Oct 26 07:14:04 2001
From: cela_vei at yahoo.com (cela_vei@yahoo.com)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Re: How to put back a token read by lexer
In-Reply-To: <3BD8A354.62DD86E8@boeing.com>
Message-ID: <9rbr3c+bhgj@eGroups.com>

Here is my problem

My input string is

Contact: tel:+1-212-345-8902, <sip:xyz@matt.com> \r\n
Contact: tel:456-235;phone-context=201 \r\n
Contact: <sip:abc@cold.com>

#lexclass START

#token CONTACT "Contact"
#token COLON ":"
#token COMMA ","
#token CRLF "\r\n"
#token TEL "tel" < mode(TELMODE); >

.... < more tokens  > ....

#lexcalss TELMODE
#token DIGIT "[0-9]"
#token DASH "\-"
#token PLUS "+"

..... < more tokens in TELMODE> .....

As soon as I see the "tel" I want to switch the lexer to the TELMODE
lexer. There is no terminator token to end the "tel: .....".
As soon as see a token that is not in the TELMODE I want to switch
back to START mode. One such token above is a COMMA (",") or a CRLF
(\r\n"). I am having trouble switching back to START mode because I
can switch only after the COMMA or CRLF is cosumed. As part of my 
parse rule I want to use the COMMA. Here is my parse grammer.

contact_header: CONTACT COLON contact_header_value 
                (COMMA contact_header_value)*

contact_header_value: (sip_url | tel_url)

sip_url: LEFTBRACE SIP COLON ...... RIGHTBRACE
tel_url: { PLUS } (DIGIT | DASH)+

When the tel_url rule is over the contact_header rule does not get the
COMMA token.

Is there any way to achieve this? BTW, I am still using the 1.33MR29
release of Antlr.

Thanks for the help
Cela.



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Fri Oct 26 07:13:58 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Newbie question - parsing decimal numbers
In-Reply-To: <9rbq40+ritn@eGroups.com>; from david.silberberg@jhuapl.edu on Fri, Oct 26, 2001 at 01:57:20PM -0000
References: <9rbq40+ritn@eGroups.com>
Message-ID: <20011026161357.B28429@cs.utwente.nl>

On Fri, Oct 26, 2001 at 01:57:20PM -0000, david.silberberg@jhuapl.edu wrote:
>   a>3.5
>   b < 4.57
>   etc.
> 
> I'm using the example Java.g to read NUM_INTs. 
> The token returned for the example (a>3.5) does indeed
> return 3.5. However, the token returned for the second
> example (b < 4.57) returns only 4 and ignores the '.57' .
> It seems that the white space makes a difference to the
> parser and I can't figure out why. Does any know how 
> to fix this?

Do parser and lexer have the same opinion about the values of tokens? You
can check in the generated xxxtokentype files. If not make sure to first
run the lexer through antlr then the parser. If that's not the case try
building the parser with antlr -traceParser <yourfile> then rerun the
example you now should have some trace output with token values (I hope :)
not so familiar with these things on the java side) and see from there.

Cheers,

Ric
--
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Why don't we just invite them to dinner and massacre them all when they're
  drunk? You heard the man. There's seven hundred thousand of them. Ah? ..
           So it'd have to be something simple with pasta, then.
                 From: Interesting Times by Terry Pratchet


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From tmoog at polhode.com  Fri Oct 26 10:56:58 2001
From: tmoog at polhode.com (Tom Moog)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Re: How to put back a token read by lexer
In-Reply-To: <9rbr3c+bhgj@eGroups.com>
Message-ID: <Pine.BSF.4.21.0110261249140.6183-100000@shell-1.enteract.com>



You can get one character of lookahead by using zzchar
(C mode) or (ch in C++ mode ? don't have my manuals with
me).  Thus you can put in your lex action routine:

	<< if (! telephoneChar(ch)) {mode(START); } >>

On Fri, 26 Oct 2001 cela_vei@yahoo.com wrote:

> Here is my problem
> 
> My input string is
> 
> Contact: tel:+1-212-345-8902, <sip:xyz@matt.com> \r\n
> Contact: tel:456-235;phone-context=201 \r\n
> Contact: <sip:abc@cold.com>
> 
> #lexclass START
> 
> #token CONTACT "Contact"
> #token COLON ":"
> #token COMMA ","
> #token CRLF "\r\n"
> #token TEL "tel" < mode(TELMODE); >
> 
> .... < more tokens  > ....
> 
> #lexcalss TELMODE
> #token DIGIT "[0-9]"
> #token DASH "\-"
> #token PLUS "+"
> 
> ..... < more tokens in TELMODE> .....
> 
> As soon as I see the "tel" I want to switch the lexer to the TELMODE
> lexer. There is no terminator token to end the "tel: .....".
> As soon as see a token that is not in the TELMODE I want to switch
> back to START mode. One such token above is a COMMA (",") or a CRLF
> (\r\n"). I am having trouble switching back to START mode because I
> can switch only after the COMMA or CRLF is cosumed. As part of my 
> parse rule I want to use the COMMA. Here is my parse grammer.
> 
> contact_header: CONTACT COLON contact_header_value 
>                 (COMMA contact_header_value)*
> 
> contact_header_value: (sip_url | tel_url)
> 
> sip_url: LEFTBRACE SIP COLON ...... RIGHTBRACE
> tel_url: { PLUS } (DIGIT | DASH)+
> 
> When the tel_url rule is over the contact_header rule does not get the
> COMMA token.
> 
> Is there any way to achieve this? BTW, I am still using the 1.33MR29
> release of Antlr.
> 
> Thanks for the help
> Cela.
> 
> 
> 
>  
> 
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
> 
> 
> 


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From ppfaffman at BIGSANDY.COM  Fri Oct 26 11:38:04 2001
From: ppfaffman at BIGSANDY.COM (ppfaffman@BIGSANDY.COM)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] Need Help in Finding or Constructing a Source Analysis Tool
Message-ID: <9rcaic+n5md@eGroups.com>

I had earlier asked about a C++ Parser, but am beginning to (maybe)
grasp the real nature of what I need - which is a tool for detecting
what entities are defined in a (freestanding) C++ source and what
entities it requires from external definitions. The antlr (PCCTS?)
parser may not work (continue parsing) without recourse to, say,
required extrenal template definitions. But detection of the *need*
for such definitions is precisely what I am trying to accomplish with
the aforesaid tool. 

Maybe the general question is this: is it possible to parse C++ (with
antlr) without applying semantic assists that precursor template
definitions would supply?  

Regards,

Phillip



 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From ericsmith at windsor.com  Sat Oct 27 06:43:48 2001
From: ericsmith at windsor.com (Smith, Eric V.)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] 2.7.2, Parsing Revival, Sleeper Agents, Hipp
	ies
Message-ID: <DA0E485EB978B943BA876CEED2FC7F3FCB34@eastnor.windsor.com>

> > I'm quite positive we'll manage to push it out by the end of next 
> > year.....

Does this really before the end of 2002?

Eric.

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Oct 27 12:02:42 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:32 2004
Subject: [antlr-interest] 2.7.2, Parsing Revival, Sleeper Agents, Hipp ies
In-Reply-To: <DA0E485EB978B943BA876CEED2FC7F3FCB34@eastnor.windsor.com>
Message-ID: <32EC5FE0-CB0D-11D5-BD27-0030653DE0D6@jguru.com>


On Saturday, October 27, 2001, at 06:43  AM, Smith, Eric V. wrote:

>>> I'm quite positive we'll manage to push it out by the end of next
>>> year.....
>
> Does this really before the end of 2002?

Can't parse that.  Do you mean "does this really mean before end of 
2002?"  Answer is: "nope...hopefully 2001." ;)

Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Oct 27 12:45:51 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] How to throw an exception from the lexer to the caller rule
In-Reply-To: <9qjuk0+a5k6@eGroups.com>
Message-ID: <3A1718D4-CB13-11D5-BD27-0030653DE0D6@jguru.com>


On Wednesday, October 17, 2001, at 05:46  AM, lemoine@multimania.com 
wrote:

> Hi,
> I had specified the testLiterals option to true for the IDENT rule in
> the Lexer to test each token against the literals table.
> But when the literal does not match with the lexer IDENT rule, it
> generates an Exception and exits of the lexer.
> I want to catch the exception in the caller rule of the parser to
> specify my own error message.

It should not be generating an exception if it's not a literal...it 
should simply return as IDENT.  Are you sure that is what is happening?

Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Sat Oct 27 12:51:10 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] New faq entries
In-Reply-To: <NEBBJKNCALMJLNPAAMECMEOEEEAA.johnallengreen@yahoo.com>
Message-ID: <F7EA9C08-CB13-11D5-BD27-0030653DE0D6@jguru.com>

Folks, added 3 new FAQ entries (should be the top 3 in the list). :)

http://www.jguru.com/faq/ANTLR

Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From lemoine at multimania.com  Mon Oct 29 01:35:56 2001
From: lemoine at multimania.com (lemoine@multimania.com)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] Re: How to throw an exception from the lexer to the caller rule
In-Reply-To: <3A1718D4-CB13-11D5-BD27-0030653DE0D6@jguru.com>
Message-ID: <9rj7ts+8v2n@eGroups.com>

You're wright.
The exception was not generated by the lexer rule.
It's generated by the parser in the uri grammar rule 
(NoViableAltException). 

Following is the code generated for the uri rule in the P.java file :

switch ( LA(1)) {
case STATS:
case DSINFOS:
case PINFOS:
case HELP:
{
        command();
        break;
}
case STRING_LITERAL:
case PNAME:
case DSN:
case USER:
case PWD:
{
        queries();
        break;
}
default:
{
        throw new NoViableAltException(LT(1), getFilename());
}
}

But that's not what I want to do. I want to handle my own exception 
for the command in the command rule and for queries in the 
queries rule.

The only way I found is to check for two tokens and to replace the 
rule

uri     : command
        | queries

by the rule

uri             :
                 {
                   // it's a query option
                   if(LT(2).getText().equals("=")) {
                        queries() ;
                   } else {
                   // it's a command
                        command() ;
                   }
                 }
                ;

command         : s:STATS
                  { _commandName = s.getText() ; }
                | d:DSINFOS
                  { _commandName = d.getText() ; }
                | p:PINFOS
                  { _commandName = p.getText() ; }
                | h:HELP
                  { _commandName = h.getText() ; }
                {
                    _requestIsQuery = false ;

                    System.out.println("command is "+_commandName) ;
                }
                ;
                exception // for command
                catch [RecognitionException  e] {
                 String token = getToken(e.getMessage()) ;
                 throw new RecognitionException("Unknown 
command"+" "+token);
                }

queries         : query (SEMI query)*
                ;
                exception // for queries
                catch [RecognitionException  e] {
                 String token = getToken(e.getMessage()) ;
                 throw new RecognitionException("Unknown 
option"+" "+token);
                }

I don't known if this solution is very clean ... but it works.
If you have a another way, it would be greatly apprecied.

Thanks

Herv?



--- In antlr-interest@y..., Terence Parr <parrt@j...> wrote:
> 
> On Wednesday, October 17, 2001, at 05:46  AM, lemoine@m... 
> wrote:
> 
> > Hi,
> > I had specified the testLiterals option to true for the IDENT 
rule in
> > the Lexer to test each token against the literals table.
> > But when the literal does not match with the lexer IDENT rule, it
> > generates an Exception and exits of the lexer.
> > I want to catch the exception in the caller rule of the parser to
> > specify my own error message.
> 
> It should not be generating an exception if it's not a literal...it 
> should simply return as IDENT.  Are you sure that is what is 
happening?
> 
> Ter
> --
> Chief Scientist & Co-founder, http://www.jguru.com
> Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From bogdan at nobugconsulting.ro  Mon Oct 29 09:57:54 2001
From: bogdan at nobugconsulting.ro (Bogdan Mitu)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] New faq entries - import/export
References: <F7EA9C08-CB13-11D5-BD27-0030653DE0D6@jguru.com>
Message-ID: <00b101c160a3$3e40e2a0$0a96a8c0@nobugconsulting.ro>

Hi Ter,

I have some comments about the 3rd entry: Why can't I get the
exportVocab/importVocab directives to work with string literals across
multiple files?

I will argue that:
1. The real problem with that grammar is not the import/export relation, but
a bug in ANTLR.
2. The approach suggested for import/export, while correct (when not problem
1.), is not the best.

1. String literals in parser are not always converted to lexer tokens. For
instance, an occurrence of the string "if" in the parser grammar is
translated to LITERAL_if, but string "if0" (with a digit at the end) is not
converted to anything (just a commented line in XxxTokenTypes.txt). The same
happens in the grammar that originated this thread, were the string was
".accept" (starting with dot), and was not converted properly. This a bug in
ANTLR.

2.  If the parser imports the lexer vocabulary, as suggested, the lexer will
not know about the (implicit) tokens referred as strings in the parser.
Those tokens will have to be written down in the lexer itself, a tedious and
error prone activity.

A better solution is to make the lexer import the parser vocabulary:

class TestingParser extends Parser;
options {
  exportVocab=TestingParser;
...

class TestingLexer extends Lexer;
options {
  importVocab=TestingParser;
...

If the parser and lexer are in different files, the parser file has to be
compiled first.


Regards,
Bogdan


----- Original Message -----
From: "Terence Parr" <parrt@jguru.com>
Subject: [antlr-interest] New faq entries


> Folks, added 3 new FAQ entries (should be the top 3 in the list). :)
>
> http://www.jguru.com/faq/ANTLR
>
> Ter

Christopher writes:
The literal ".accept" matches using this set of import/export rules:
class TestingParser extends Parser;
options {
  exportVocab=TestingParser;
}

command : ".accept"
          {cout << "matched accept" << endl; }
        ;

class TestingLexer extends Lexer;
options {
  charVocabulary='\3'..'\377';
  exportVocab=TestingParser;
  caseSensitive=false;
}

ID : ( 'a' .. 'z' | '0' .. '9' | '.' )+ ;
WS : ( ' ' | '\t' | '\n' { newline(); }
       | '\r' | '\b' )+ { $setType(Token::SKIP); } ;

but ".accept" does not match using this set of import/export rules
(regardless of whether or not the parser and lexer definitions are in the
same file):

class TestingParser extends Parser;
options {
  importVocab=TestingLexer;
  exportVocab=TestingParser;
}

...

class TestingLexer extends Lexer;
options {
  ...
  exportVocab=TestingLexer;
  ...
}

Ric answers:
As a rule of thumb use this scheme when using importvocab/exportvocab with
grammars in different files (the parser/lexer in one file scheme is subtly
different):
First in the lexer you export the current vocabulary (say L) e.g.
exportVocab = L.
Then in the parser you have to get the definitions from the lexer e.g.
importVocab = L, in the parser you can extend the vocabulary with for
example imaginary tokens. These you might need in a treeparser so you do in
the parser a exportVocab = P (don't use the same name as for L!!!).
Last but not least in the treeparser you do a importVocab = P. If you
transform the tree and add new nodetypes and want to use those in subsequent
treewalkers, then you need to extend the chain of imports/exports similar to
the way that is done with parser and lexer.
Also make sure you have your build dependencies set up right. It can be very
frustrating to debug something that comes from parser/lexer/walker differing
in opinions on tokensets because of a incomplete build... (e.g. build in the
order lexer, parser, treewalker)

You can check for errors in this stuff by looking at the xxxTokenTypes files
and looking for discrepancies.

To come back to your question: Your last scheme is the right one.. So my
guess is that you run your parser through antlr before you run the lexer
through it. Best guess is to remove all antlr generated stuff then build the
lexer and the parser in that order, then it should work.



From Matthew.Ford at forward.com.au  Mon Oct 29 12:41:11 2001
From: Matthew.Ford at forward.com.au (Matthew Ford)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] New faq entries - import/export
References: <F7EA9C08-CB13-11D5-BD27-0030653DE0D6@jguru.com> <00b101c160a3$3e40e2a0$0a96a8c0@nobugconsulting.ro>
Message-ID: <000001c160d4$37e062b0$6664020a@matthewfnb>

I do not agree with your point 2.
The lexer comes before the parser so the parser should import from the
lexer.
matthew
----- Original Message -----
From: "Bogdan Mitu" <bogdan@nobugconsulting.ro>
To: <antlr-interest@yahoogroups.com>
Cc: "Terence Parr" <parrt@jguru.com>; <klaren@cs.utwente.nl>
Sent: Tuesday, October 30, 2001 4:57 AM
Subject: Re: [antlr-interest] New faq entries - import/export


> Hi Ter,
>
> I have some comments about the 3rd entry: Why can't I get the
> exportVocab/importVocab directives to work with string literals across
> multiple files?
>
> I will argue that:
> 1. The real problem with that grammar is not the import/export relation,
but
> a bug in ANTLR.
> 2. The approach suggested for import/export, while correct (when not
problem
> 1.), is not the best.
>
> 1. String literals in parser are not always converted to lexer tokens. For
> instance, an occurrence of the string "if" in the parser grammar is
> translated to LITERAL_if, but string "if0" (with a digit at the end) is
not
> converted to anything (just a commented line in XxxTokenTypes.txt). The
same
> happens in the grammar that originated this thread, were the string was
> ".accept" (starting with dot), and was not converted properly. This a bug
in
> ANTLR.
>
> 2.  If the parser imports the lexer vocabulary, as suggested, the lexer
will
> not know about the (implicit) tokens referred as strings in the parser.
> Those tokens will have to be written down in the lexer itself, a tedious
and
> error prone activity.
>
> A better solution is to make the lexer import the parser vocabulary:
>
> class TestingParser extends Parser;
> options {
>   exportVocab=TestingParser;
> ...
>
> class TestingLexer extends Lexer;
> options {
>   importVocab=TestingParser;
> ...
>
> If the parser and lexer are in different files, the parser file has to be
> compiled first.
>
>
> Regards,
> Bogdan
>
>
> ----- Original Message -----
> From: "Terence Parr" <parrt@jguru.com>
> Subject: [antlr-interest] New faq entries
>
>
> > Folks, added 3 new FAQ entries (should be the top 3 in the list). :)
> >
> > http://www.jguru.com/faq/ANTLR
> >
> > Ter
>
> Christopher writes:
> The literal ".accept" matches using this set of import/export rules:
> class TestingParser extends Parser;
> options {
>   exportVocab=TestingParser;
> }
>
> command : ".accept"
>           {cout << "matched accept" << endl; }
>         ;
>
> class TestingLexer extends Lexer;
> options {
>   charVocabulary='\3'..'\377';
>   exportVocab=TestingParser;
>   caseSensitive=false;
> }
>
> ID : ( 'a' .. 'z' | '0' .. '9' | '.' )+ ;
> WS : ( ' ' | '\t' | '\n' { newline(); }
>        | '\r' | '\b' )+ { $setType(Token::SKIP); } ;
>
> but ".accept" does not match using this set of import/export rules
> (regardless of whether or not the parser and lexer definitions are in the
> same file):
>
> class TestingParser extends Parser;
> options {
>   importVocab=TestingLexer;
>   exportVocab=TestingParser;
> }
>
> ...
>
> class TestingLexer extends Lexer;
> options {
>   ...
>   exportVocab=TestingLexer;
>   ...
> }
>
> Ric answers:
> As a rule of thumb use this scheme when using importvocab/exportvocab with
> grammars in different files (the parser/lexer in one file scheme is subtly
> different):
> First in the lexer you export the current vocabulary (say L) e.g.
> exportVocab = L.
> Then in the parser you have to get the definitions from the lexer e.g.
> importVocab = L, in the parser you can extend the vocabulary with for
> example imaginary tokens. These you might need in a treeparser so you do
in
> the parser a exportVocab = P (don't use the same name as for L!!!).
> Last but not least in the treeparser you do a importVocab = P. If you
> transform the tree and add new nodetypes and want to use those in
subsequent
> treewalkers, then you need to extend the chain of imports/exports similar
to
> the way that is done with parser and lexer.
> Also make sure you have your build dependencies set up right. It can be
very
> frustrating to debug something that comes from parser/lexer/walker
differing
> in opinions on tokensets because of a incomplete build... (e.g. build in
the
> order lexer, parser, treewalker)
>
> You can check for errors in this stuff by looking at the xxxTokenTypes
files
> and looking for discrepancies.
>
> To come back to your question: Your last scheme is the right one.. So my
> guess is that you run your parser through antlr before you run the lexer
> through it. Best guess is to remove all antlr generated stuff then build
the
> lexer and the parser in that order, then it should work.
>
>
>
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Mon Oct 29 16:50:54 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] New faq entries - import/export
In-Reply-To: <00b101c160a3$3e40e2a0$0a96a8c0@nobugconsulting.ro>
Message-ID: <2C5D9FFA-CCD0-11D5-8430-0030653DE0D6@jguru.com>


On Monday, October 29, 2001, at 09:57  AM, Bogdan Mitu wrote:

> Hi Ter,
>
> I have some comments about the 3rd entry: Why can't I get the
> exportVocab/importVocab directives to work with string literals across
> multiple files?
>
> I will argue that:
> 1. The real problem with that grammar is not the import/export 
> relation, but
> a bug in ANTLR.
> 2. The approach suggested for import/export, while correct (when not 
> problem
> 1.), is not the best.
>
> 1. String literals in parser are not always converted to lexer tokens. 
> For
> instance, an occurrence of the string "if" in the parser grammar is
> translated to LITERAL_if, but string "if0" (with a digit at the end) is 
> not
> converted to anything (just a commented line in XxxTokenTypes.txt). The 
> same
> happens in the grammar that originated this thread, were the string was
> ".accept" (starting with dot), and was not converted properly. This a 
> bug in
> ANTLR.

I use string literals across multiple files all the time (for example, 
my tree grammars use literals all the time).

What exactly is the bug you refer to?  "if0" is specifically a literal 
that doesn't work or is the whole literals scheme broken from your 
perspective?

Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From bogdan at nobugconsulting.ro  Tue Oct 30 04:30:32 2001
From: bogdan at nobugconsulting.ro (Bogdan Mitu)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] digit-ended literals (was New faq entries - import/export)
References: <2C5D9FFA-CCD0-11D5-8430-0030653DE0D6@jguru.com>
Message-ID: <004601c1613e$ab3db860$0a96a8c0@nobugconsulting.ro>

----- Original Message -----
From: "Terence Parr" <parrt@jguru.com>

> What exactly is the bug you refer to?  "if0" is specifically a literal
> that doesn't work or is the whole literals scheme broken from your
> perspective?
>
> Ter

I looked more closely to what is generated, and it's not a bug, indeed, but
still is something weird. If I have a string "if" in the parser, it
generates an entry:
int LITERAL_if = 4
in the interface XxxParserTokenTypes.java

But if the string is "if0", the generated line is just a comment:
// "if0" = 4

I thought this is a bug, but it works, because a number is still reserved
for the token. There is still a problem, however: if I want to refer the
tokens from outside, I can only use the number (in this example 4), and this
number is likely to change whenever I change the grammar. I don't see any
reason why literals ended with digits are treated different.

Best regards,
Bogdan


> On Monday, October 29, 2001, at 09:57  AM, Bogdan Mitu wrote:
>
> > Hi Ter,
> >
> > I have some comments about the 3rd entry: Why can't I get the
> > exportVocab/importVocab directives to work with string literals across
> > multiple files?
> >
> > I will argue that:
> > 1. The real problem with that grammar is not the import/export
> > relation, but
> > a bug in ANTLR.
> > 2. The approach suggested for import/export, while correct (when not
> > problem
> > 1.), is not the best.
> >
> > 1. String literals in parser are not always converted to lexer tokens.
> > For
> > instance, an occurrence of the string "if" in the parser grammar is
> > translated to LITERAL_if, but string "if0" (with a digit at the end) is
> > not
> > converted to anything (just a commented line in XxxTokenTypes.txt). The
> > same
> > happens in the grammar that originated this thread, were the string was
> > ".accept" (starting with dot), and was not converted properly. This a
> > bug in
> > ANTLR.
>
> I use string literals across multiple files all the time (for example,
> my tree grammars use literals all the time).
>
> What exactly is the bug you refer to?  "if0" is specifically a literal
> that doesn't work or is the whole literals scheme broken from your
> perspective?
>
> Ter
> --
> Chief Scientist & Co-founder, http://www.jguru.com
> Creator, ANTLR Parser Generator: http://www.antlr.org
>
>
>
>
> Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/
>

From parrt at jguru.com  Tue Oct 30 09:57:47 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] digit-ended literals (was New faq entries - import/export)
In-Reply-To: <004601c1613e$ab3db860$0a96a8c0@nobugconsulting.ro>
Message-ID: <A05F5A78-CD5F-11D5-8430-0030653DE0D6@jguru.com>


On Tuesday, October 30, 2001, at 04:30  AM, Bogdan Mitu wrote:

> ----- Original Message -----
> From: "Terence Parr" <parrt@jguru.com>
>
>> What exactly is the bug you refer to?  "if0" is specifically a literal
>> that doesn't work or is the whole literals scheme broken from your
>> perspective?
>>
>> Ter
>
> I looked more closely to what is generated, and it's not a bug, indeed, 
> but
> still is something weird. If I have a string "if" in the parser, it
> generates an entry:
> int LITERAL_if = 4
> in the interface XxxParserTokenTypes.java
>
> But if the string is "if0", the generated line is just a comment:
> // "if0" = 4
>
> I thought this is a bug, but it works, because a number is still 
> reserved
> for the token. There is still a problem, however: if I want to refer the
> tokens from outside, I can only use the number (in this example 4), and 
> this
> number is likely to change whenever I change the grammar. I don't see 
> any
> reason why literals ended with digits are treated different.
>

Isn't the "if0" in the .txt (persistence) file?  That should be how it 
communicates.

Ter


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From parrt at jguru.com  Tue Oct 30 10:00:15 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] Re: How to throw an exception from the lexer to the caller rule
In-Reply-To: <9rj7ts+8v2n@eGroups.com>
Message-ID: <F8E847A3-CD5F-11D5-8430-0030653DE0D6@jguru.com>


On Monday, October 29, 2001, at 01:35  AM, lemoine@multimania.com wrote:

> You're wright.
> The exception was not generated by the lexer rule.
> It's generated by the parser in the uri grammar rule
> (NoViableAltException).
> ...
> But that's not what I want to do. I want to handle my own exception
> for the command in the command rule and for queries in the
> queries rule.

Just specify what to match in the error case (i.e., as regular rule 
stuff) and then have an action that throws the exception...

I see no need for the special uri rule below, by the way...

Terence

>
> The only way I found is to check for two tokens and to replace the
> rule
>
> uri     : command
>         | queries
>
> by the rule
>
> uri             :
>                  {
>                    // it's a query option
>                    if(LT(2).getText().equals("=")) {
>                         queries() ;
>                    } else {
>                    // it's a command
>                         command() ;
>                    }
>                  }
>                 ;
>
> command         : s:STATS
>                   { _commandName = s.getText() ; }
>                 | d:DSINFOS
>                   { _commandName = d.getText() ; }
>                 | p:PINFOS
>                   { _commandName = p.getText() ; }
>                 | h:HELP
>                   { _commandName = h.getText() ; }
>                 {
>                     _requestIsQuery = false ;
>
>                     System.out.println("command is "+_commandName) ;
>                 }
>                 ;
>                 exception // for command
>                 catch [RecognitionException  e] {
>                  String token = getToken(e.getMessage()) ;
>                  throw new RecognitionException("Unknown
> command"+" "+token);
>                 }
>
> queries         : query (SEMI query)*
>                 ;
>                 exception // for queries
>                 catch [RecognitionException  e] {
>                  String token = getToken(e.getMessage()) ;
>                  throw new RecognitionException("Unknown
> option"+" "+token);
>                 }
>
> I don't known if this solution is very clean ... but it works.
> If you have a another way, it would be greatly apprecied.
>
> Thanks
>
> Herv?
>
>
>
> --- In antlr-interest@y..., Terence Parr <parrt@j...> wrote:
>>
>> On Wednesday, October 17, 2001, at 05:46  AM, lemoine@m...
>> wrote:
>>
>>> Hi,
>>> I had specified the testLiterals option to true for the IDENT
> rule in
>>> the Lexer to test each token against the literals table.
>>> But when the literal does not match with the lexer IDENT rule, it
>>> generates an Exception and exits of the lexer.
>>> I want to catch the exception in the caller rule of the parser to
>>> specify my own error message.
>>
>> It should not be generating an exception if it's not a literal...it
>> should simply return as IDENT.  Are you sure that is what is
> happening?
>>
>> Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org
>
>
>
>
> Your use of Yahoo! Groups is subject to 
> http://docs.yahoo.com/info/terms/
>


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From bogdan at nobugconsulting.ro  Tue Oct 30 10:45:15 2001
From: bogdan at nobugconsulting.ro (Bogdan Mitu)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] digit-ended literals (was New faq entries - import/export)
References: <A05F5A78-CD5F-11D5-8430-0030653DE0D6@jguru.com>
Message-ID: <002601c16173$0448d5a0$0a96a8c0@nobugconsulting.ro>

> Isn't the "if0" in the .txt (persistence) file?  That should be how it
> communicates.
>
> Ter

Yes, "if0" is in the .txt file, as
"if0"=4

By contrast, "if" is written in .txt file as
LITERAL_if="if"=4
and can be referred from outside as XxxTokenTypes.LITERAL_if.

My question is why "if0" is treated different then "if". When I wrote a
syntax highlighter for Verilog, I wanted to associate keywords with colors
using a property file, and I went into some trouble because Verilog has
digit-ended keywords, and the only way to refer them was by some ever
changing numbers. Not that it would be a great deal, I am just wondering.

Regards,
Bogdan


----- Original Message -----
From: "Terence Parr" <parrt@jguru.com>
To: "Bogdan Mitu" <bogdan@nobugconsulting.ro>
Cc: <antlr-interest@yahoogroups.com>
Sent: Tuesday, October 30, 2001 7:57 PM
Subject: Re: [antlr-interest] digit-ended literals (was New faq entries -
import/export)


>
> On Tuesday, October 30, 2001, at 04:30  AM, Bogdan Mitu wrote:
>
> > ----- Original Message -----
> > From: "Terence Parr" <parrt@jguru.com>
> >
> >> What exactly is the bug you refer to?  "if0" is specifically a literal
> >> that doesn't work or is the whole literals scheme broken from your
> >> perspective?
> >>
> >> Ter
> >
> > I looked more closely to what is generated, and it's not a bug, indeed,
> > but
> > still is something weird. If I have a string "if" in the parser, it
> > generates an entry:
> > int LITERAL_if = 4
> > in the interface XxxParserTokenTypes.java
> >
> > But if the string is "if0", the generated line is just a comment:
> > // "if0" = 4
> >
> > I thought this is a bug, but it works, because a number is still
> > reserved
> > for the token. There is still a problem, however: if I want to refer the
> > tokens from outside, I can only use the number (in this example 4), and
> > this
> > number is likely to change whenever I change the grammar. I don't see
> > any
> > reason why literals ended with digits are treated different.
> >
>
> Isn't the "if0" in the .txt (persistence) file?  That should be how it
> communicates.
>
> Ter

From parrt at jguru.com  Tue Oct 30 11:45:15 2001
From: parrt at jguru.com (Terence Parr)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] digit-ended literals (was New faq entries - import/export)
In-Reply-To: <002601c16173$0448d5a0$0a96a8c0@nobugconsulting.ro>
Message-ID: <A39E2AC8-CD6E-11D5-8430-0030653DE0D6@jguru.com>


On Tuesday, October 30, 2001, at 10:45  AM, Bogdan Mitu wrote:

>> Isn't the "if0" in the .txt (persistence) file?  That should be how it
>> communicates.
>>
>> Ter
>
> Yes, "if0" is in the .txt file, as
> "if0"=4
>
> By contrast, "if" is written in .txt file as
> LITERAL_if="if"=4
> and can be referred from outside as XxxTokenTypes.LITERAL_if.
>
> My question is why "if0" is treated different then "if". When I wrote a
> syntax highlighter for Verilog, I wanted to associate keywords with 
> colors
> using a property file, and I went into some trouble because Verilog has
> digit-ended keywords, and the only way to refer them was by some ever
> changing numbers. Not that it would be a great deal, I am just 
> wondering.

The text file is what allows you to refer to "if0" in say the tree 
grammar.  Not the tokens java file.  I think we just ignored the problem 
of what to do with literals that weren't purely letters.

Ter
--
Chief Scientist & Co-founder, http://www.jguru.com
Creator, ANTLR Parser Generator: http://www.antlr.org


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From klaren at cs.utwente.nl  Wed Oct 31 03:16:46 2001
From: klaren at cs.utwente.nl (Ric Klaren)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] Need Help in Finding or Constructing a Source Analysis Tool
In-Reply-To: <9rcaic+n5md@eGroups.com>; from ppfaffman@BIGSANDY.COM on Fri, Oct 26, 2001 at 06:38:04PM -0000
References: <9rcaic+n5md@eGroups.com>
Message-ID: <20011031121645.M17239@cs.utwente.nl>

On Fri, Oct 26, 2001 at 06:38:04PM -0000, ppfaffman@BIGSANDY.COM wrote:
> Maybe the general question is this: is it possible to parse C++ (with
> antlr) without applying semantic assists that precursor template
> definitions would supply?

Hmmm on one hand antlr is pretty powerfull with it's LL(k) tricks and
semantic predicates. On the other hand C++ is quite an evil language to
parse... It might be possible, but you might end up bald in the process due
to a lot of hair pulling...

Cheers,

Ric
-- 
-----+++++*****************************************************+++++++++-------
    ---- Ric Klaren ----- klaren@cs.utwente.nl ----- +31 53 4893722  ----
-----+++++*****************************************************+++++++++-------
 Time what is time - I wish I knew how to tell You why - It hurts to know -
          Aren't we machines - Time what is time - Unlock the door
               - And see the truth - Then time is time again
                From: 'Time what is Time' by Blind Guardian


 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From sinan.karasu at boeing.com  Wed Oct 31 08:42:46 2001
From: sinan.karasu at boeing.com (Sinan)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] ParseView and/or another debugging tool.
References: <9rcaic+n5md@eGroups.com> <20011031121645.M17239@cs.utwente.nl>
Message-ID: <3BE02A06.8C14DD7A@boeing.com>

The following appeared in Netbeans antlr project mail list. I think we
should get more
involved with Netbeans as a tool to use antlr with. I'm dying to get
involved with this
project but am currently crippled by the learning curve.

Any comments?

BTW , see the end for more issues.

Sinan

-------------------------------------------------------------
http://openide.netbeans.org/issues/show_bug.cgi?id=17161

                  Summary: grammar debugger
                Component: antlr
                  Version: 3.3 dev
                 Platform: All
                      URL:
http://javadude.com/tools/parseview/index.html
               OS/Version: All
                   Status: NEW
        Status Whiteboard:
                 Keywords:
               Resolution:
               Issue type: TASK
                 Priority: P4
             Subcomponent: code
               AssignedTo: issues@antlr.netbeans.org
               ReportedBy: derrick@netbeans.org


Antlr provides hooks for debugging (using the -debug command line
switch) and
this should be integrated into the antlr module.
An debugger called ParseView, written by Scott Stanchfield
(mailto:scott@javadude.com), provides a baseline for functionality
needed.
Although this tool is out of date, I have modified (hacked) it so that
it will
run under JDK1.3 and Antlr 2.7.1.
The development can proceed in two directions. If Scott is willing to
contribute
his code to the netbeans open source repository, that could be used as a
starting point. Otherwise, a debugger can be written from scratch,
perhaps
referring to Scott's implementation as a 'HOWTO'.
The latter option may be best to take advantage of the netbeans debugger
infrastructure.


------------------------------------------------------------

Other issues:

http://openide.netbeans.org/issues/show_bug.cgi?id=17159
http://openide.netbeans.org/issues/show_bug.cgi?id=17160
http://openide.netbeans.org/issues/show_bug.cgi?id=17163
http://openide.netbeans.org/issues/show_bug.cgi?id=17162

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 

From mzukowski at bco.com  Wed Oct 31 09:04:12 2001
From: mzukowski at bco.com (mzukowski@bco.com)
Date: Mon Dec 20 16:14:33 2004
Subject: [antlr-interest] ParseView and/or another debugging tool.
Message-ID: <170826586F3BD511910D0200C110AAA801C5800E@memail03.bco-home.com>

> The following appeared in Netbeans antlr project mail list. I think we
> should get more
> involved with Netbeans as a tool to use antlr with. I'm dying to get
> involved with this
> project but am currently crippled by the learning curve.
> 
> Any comments?

I've hacked antlr.g into a makefile generator and tags file generator, so
most of the code for figuring out what a .g generates is there, as well as
some of the syntax info needed.  See
http://www.antlr.org/showcase/tags.tar.gz.  

I've just started using NetBeans myself but am being buried alive at work,
so I can't help much there.  It's a rather large development environment
framework, but a lot of things are suprisingly easy to use.    

Monty
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20011031/56bda68e/attachment.html
