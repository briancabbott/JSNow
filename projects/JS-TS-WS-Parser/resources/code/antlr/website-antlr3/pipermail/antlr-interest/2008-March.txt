From alexander at gaengel.de  Sat Mar  1 01:00:16 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Sat, 01 Mar 2008 10:00:16 +0100
Subject: [antlr-interest] Syntactic Predicate does not work but
 Backtracking does
In-Reply-To: <47C89643.5020909@gaengel.de>
References: <47C89643.5020909@gaengel.de>
Message-ID: <47C91B20.8030209@gaengel.de>

sorry I send a wrong copy of the first version it should be:

    expression_comma options
        :(
        (expression COMMA)=>expression COMMA expression_comma
    ->expression expression_comma
        |expression->expression
        )
        ;


Alexander G?ngel schrieb:
> I have a rule in my grammar like this:
>
>     expression_comma options
>         :(
>         (expression COMMA)=>expression (COMMA expression_comma)?
>     ->expression expression_comma?
>         |expression->expression
>         )
>         ;
>
>
> my some Input like expression, expression does not work even when both 
> parts left and rigth of the comma are expressions.
>
> if I use this rule with backtracking it works.
>
>     oclExpression_comma options {backtrack=true;}
>         :
>         oclExpression (COMMA oclExpression_comma)? ->oclExpression
>     oclExpression_comma?
>         ;
>
>
> Am I wrong or should both work all right?
> Alexander
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080301/8411807f/attachment.html 

From vbar at comp.cz  Sat Mar  1 06:42:54 2008
From: vbar at comp.cz (Vaclav Barta)
Date: Sat, 01 Mar 2008 15:42:54 +0100
Subject: [antlr-interest] Suppressing spurious warnings
In-Reply-To: <b8ceeef70802270531g44b39274vb7f7d12ad20ca542@mail.gmail.com>
References: <b8ceeef70802270531g44b39274vb7f7d12ad20ca542@mail.gmail.com>
Message-ID: <47C96B6E.9020207@comp.cz>

Steve Bennett wrote:
> In the current ANTLR 3, there are lots of warnings generated that are
> basically meaningless. Is there a way to suppress them?
> 
> For example:
> #1
> [00:15:28] warning(105): C:\antlr\mediawiki12.g:996:12: no lexer rule
> corresponding to token: PRE_OPEN
> 
> There is no lexer rule but I'm setting it explicitly:
> ...
>     | (PRE_OPEN_ACTUAL) => PRE_OPEN_ACTUAL { $type=PRE_OPEN;
> in_pre=true; in_noparse=true;}
> ...
In that case I think you can define PRE_OPEN as a fragment rule to get
rid of the warning.

	Bye
		Vasek
--
http://www.mangrove.cz/
Open Source integration


From peter.bulychev at gmail.com  Sat Mar  1 13:47:39 2008
From: peter.bulychev at gmail.com (Peter Bulychev)
Date: Sun, 2 Mar 2008 00:47:39 +0300
Subject: [antlr-interest] citation
Message-ID: <ef5132890803011347m192b7480k361a82800c30311d@mail.gmail.com>

Hello.

How should I cite ANTLR in my scientific paper?

-- 
Best regards,
   Peter Bulychev.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080302/0d01d520/attachment.html 

From parrt at cs.usfca.edu  Sun Mar  2 13:47:28 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 2 Mar 2008 13:47:28 -0800
Subject: [antlr-interest] Syntactic Predicate does not work but
	Backtracking does
In-Reply-To: <47C91B20.8030209@gaengel.de>
References: <47C89643.5020909@gaengel.de> <47C91B20.8030209@gaengel.de>
Message-ID: <C3186AE0-B0D6-4488-8D82-04503472C046@cs.usfca.edu>

  those rules are totally different.  One has an alternative and the  
other does not.
Ter
On Mar 1, 2008, at 1:00 AM, Alexander G?ngel wrote:

> sorry I send a wrong copy of the first version it should be:
>
> expression_comma options
>     :(
>     (expression COMMA)=>expression COMMA expression_comma - 
> >expression expression_comma
>     |expression->expression
>     )
>     ;
>
> Alexander G?ngel schrieb:
>>
>> I have a rule in my grammar like this:
>> expression_comma options
>>     :(
>>     (expression COMMA)=>expression (COMMA expression_comma)? - 
>> >expression expression_comma?
>>     |expression->expression
>>     )
>>     ;
>>
>> my some Input like expression, expression does not work even when  
>> both parts left and rigth of the comma are expressions.
>>
>> if I use this rule with backtracking it works.
>> oclExpression_comma options {backtrack=true;}
>>     :
>>     oclExpression (COMMA oclExpression_comma)? ->oclExpression  
>> oclExpression_comma?
>>     ;
>>
>> Am I wrong or should both work all right?
>> Alexander


From chris77550 at gmail.com  Mon Mar  3 01:04:51 2008
From: chris77550 at gmail.com (Christopher Brown)
Date: Mon, 3 Mar 2008 10:04:51 +0100
Subject: [antlr-interest] Getting foreach working with StringTemplate
	for C#
In-Reply-To: <001201c87b31$cb4e0100$c404a8c0@marion>
References: <85c0f52a0802290939i6cfc9647v7e15f3545a398644@mail.gmail.com>
	<001201c87b31$cb4e0100$c404a8c0@marion>
Message-ID: <85c0f52a0803030104j1bb45168uf3ad8247c87d2fa8@mail.gmail.com>

Hi Michael,

Thankyou for taking the time to explain this to me.  I did try the
wiki but got misled (deadlines, deadlines, ...) by the "foreach"
example.  If it had been clearer that it was a "don't do this" code
snippet, followed by "here's how it's done in string template"
example, or if I'd had as much time as I'd've liked to read the doc
and explore the API, I suppose I'd've got it right by myself :-(  It
was only when I looked once again at the "multi-valued attribute"
section of the documentation that I figured out that that was where
"looping over collections/arrays" was covered.

It's both interesting and confusing therefore that the two syntaxes
below produce the same result:

$my_collection:my_item_template()$
$my_item_template(my_collection)$

The first just seems strange, the second seems more like functional
programming.  Is there a "better" way (of the two) or some things one
syntax can do that the other can't ?

Anyway, thanks again for taking the time to help me.  It's sincerely
appreciated!

- Christopher

On 01/03/2008, Micheal J <open.zone at virgin.net> wrote:
> > Hi,
>  >
>  > I'm still struggling with StringTemplate for C#, having
>  > looked through the lists, searched the web, and looked at the
>  > source code.
>
>
> Did you try the wiki?
>  http://www.antlr.org/wiki/display/ST/StringTemplate+Wiki+Home
>
>
>  > I can't get the following working (much simplified version of
>  > what I'm trying to achieve):
>  >
>  >   string tpl = "$foreach f in foo$ $f$ $end$";
>  >   //string tpl = "$foo$";
>  >
>  >   StringTemplate st = new StringTemplate(tpl);
>  >   st.SetAttribute("foo", new string[] {"a", "b", "c"});
>  >   Console.Out.WriteLine(st.ToString());
>  >
>  > If I switch the comment onto the first line, I get the array
>  > collapsed into a string with no separators.
>  >
>  > In my "real" scenario, which works with simple values, I just
>  > can't merge in arrays, lists, or anything enumerable.  I hope
>  > I'm doing something wrong -- that someone can explain to me
>  > -- because it seems such a basic task, I have trouble
>  > believing that it isn't implemented...!
>  >
>  > In the "real" scenario, I've also tried with group files and
>  > varying "dollar" and "angle bracket syntaxes", with no luck.
>  >
>  > Can anyone help?
>
>
>
> Sure. The template text you are supplying is NOT valid ST syntax. See
>  [http://www.antlr.org/wiki/display/ST/Five+minute+Introduction] for a basic
>  ST introduction (the basic syntax cheat sheet is useful for beginners)
>
>  Rather than:
>
>
>         $foreach f in foo$ $f$ $end$
>
>
>
> Try (either of) these instead:
>
>         $foo:{f| $f$ }$
>
>         OR
>
>         <foo:{f| <f> }>
>
>
>
>  Micheal

From chris77550 at gmail.com  Mon Mar  3 01:31:01 2008
From: chris77550 at gmail.com (Christopher Brown)
Date: Mon, 3 Mar 2008 10:31:01 +0100
Subject: [antlr-interest] Fwd: ST#, attribute renderers, and format
In-Reply-To: <001301c87b31$cc627e40$c404a8c0@marion>
References: <85c0f52a0802220440m83cc5bav7de1cc8b0745e857@mail.gmail.com>
	<85c0f52a0802290932l71ab8974uc7f432b9739193a9@mail.gmail.com>
	<001301c87b31$cc627e40$c404a8c0@marion>
Message-ID: <85c0f52a0803030131he45cdcayf0ef4aa425516c81@mail.gmail.com>

Hi,

I downloaded the build you linked to, and built it with Visual Studio
2005 using the supplied project file.  It seems to build correctly,
however I failed to replace the dependency in the version of
StringTemplate (3.0.1) downloaded from the www.stringtemplate.org
homepage in my test project...  In my test project, Visual Studio
warns me that (amongst others) DefaultTemplateLexer expects
antlr.runtime 2.7.x not 3.1, and it's getting a bit messy for me,
especially as I aim to go live with the code quite soon..!

Is there anywhere I can my hands on a compatible (nightly or
otherwise) build of ST# 3.1?  I had a look in
http://www.antlr.org/download/build/ and
http://www.stringtemplate.org/download/build/ and whilst antlr seems
active, the last build of StringTemplate is almost 6 months old.

In any case, I've subscribed to the correct list, don't know how I
missed it the first time (must've read too fast again or followed the
wrong link...).

I've been having a hell of a time figuring out the details of a bunch
of open source APIs on .NET, coming from a Java background.
NHibernate's a bit of a challenge outside the simple examples, so I'd
like to share my experience of that and string template at some point,
as better options than messy ASP.NET!

Thanks again,
Christopher


On 01/03/2008, Micheal J <open.zone at virgin.net> wrote:
> Hi,
>
>
>  > I guess I'm going to have to conclude that this isn't
>  > implemented and that maybe StringTemplate isn't a safe bet
>  > for anything other than Java.  :-(
>
>
> Why?. You would be quite wrong in any case. [*].
>
>
>  Incidentally, StringTemplate has it's own list. Try posting there for
>  StringTemplate specific discussions.
>  http://www.antlr.org/mailman/listinfo/stringtemplate-interest
>
>
>  Regarding your 'format' query, download the latest drop of ANTLR v3.1 beta
>  [http://www.antlr.org/download/build/antlr-2008-02-27.17.tar.gz]. The
>  included StringTemplate.dll file is ST# v3.1 beta and should have 'format'
>  implemented. Don't forget the required antlr.runtime.dll file.
>
>  Once you get going, you might want to revisit those wiki pages and provide
>  working C# examples to complement the Java ones.
>
>  Micheal
>
>
>  [*] The release of PyStringTemplate v3.1 was announced on the ST list a
>  little while ago...
>
>
>  > ---------- Forwarded message ----------
>  > From: Christopher Brown <chris77550 at gmail.com>
>  > Date: 22 Feb 2008 13:40
>  > Subject: ST#, attribute renderers, and format
>  > To: antlr-interest at antlr.org
>  >
>  >
>  > Hi,
>  >
>  >  The StringTemplate format option doesn't seem to be
>  > supported in  StringTemplate 3.0.1 for C#.  This is described here:
>  >
>  >  http://www.antlr.org/wiki/display/ST/Object+rendering
>  >
>  >  ...on the second part of the page, under the "Format Options" header.
>  >  As a quick reminder, it should allow me to register a
>  > formatter that  lets me use a template variable as follows:
>  >
>  >  $name;format="html"$
>  >  $name;format="javascript"$
>  >
>  >  ...so that I can apply appropriate escaping in the template,
>  > instead  of forcing the underlying data to the output format.
>  >  In many cases,  I'm rendering business objects, and I can't
>  > for example replace the  business object's string properties
>  > with some custom wrapper class.
>  >
>  >  I *can* register a basic attribute renderer, for example:
>  >
>  >  public class FmtRenderer : IAttributeRenderer {
>  >   public string ToString(object o) {
>  >   return o.ToString();
>  >   }
>  >   public string ToString(object o, string formatName) {
>  >   return formatName;
>  >   }
>  >  }
>  >
>  >  ...but only the first ToString(object o) method is ever called.
>  >  Suspiciously enough, the Wiki example page I referred to
>  > above doesn't  provide a C# example.
>  >
>  >  I've tried searching on the web, looking through the source
>  > code, and  so on, with no success.  How can I get this working?
>  >
>  >  Thanks,
>  >
>  > Christopher
>
>

From alexander at gaengel.de  Mon Mar  3 06:24:06 2008
From: alexander at gaengel.de (=?ISO-8859-1?Q?Alexander_G=E4ngel?=)
Date: Mon, 03 Mar 2008 15:24:06 +0100
Subject: [antlr-interest] Syntactic Predicate does not work but
 Backtracking does
In-Reply-To: <C3186AE0-B0D6-4488-8D82-04503472C046@cs.usfca.edu>
References: <47C89643.5020909@gaengel.de> <47C91B20.8030209@gaengel.de>
	<C3186AE0-B0D6-4488-8D82-04503472C046@cs.usfca.edu>
Message-ID: <47CC0A06.8000607@gaengel.de>

Sorry then I don't understand how Syntactic Predicates are working.

What I want is the possibility to have an expression or expression comma 
followed by another expression, but the number of comma Expression is 
not defined.

Alexander

Terence Parr schrieb:
>  those rules are totally different.  One has an alternative and the 
> other does not.
> Ter
> On Mar 1, 2008, at 1:00 AM, Alexander G?ngel wrote:
>
>> sorry I send a wrong copy of the first version it should be:
>>
>> expression_comma options
>>     :(
>>     (expression COMMA)=>expression COMMA expression_comma 
>> ->expression expression_comma
>>     |expression->expression
>>     )
>>     ;
>>
>> Alexander G?ngel schrieb:
>>>
>>> I have a rule in my grammar like this:
>>> expression_comma options
>>>     :(
>>>     (expression COMMA)=>expression (COMMA expression_comma)? 
>>> ->expression expression_comma?
>>>     |expression->expression
>>>     )
>>>     ;
>>>
>>> my some Input like expression, expression does not work even when 
>>> both parts left and rigth of the comma are expressions.
>>>
>>> if I use this rule with backtracking it works.
>>> oclExpression_comma options {backtrack=true;}
>>>     :
>>>     oclExpression (COMMA oclExpression_comma)? ->oclExpression 
>>> oclExpression_comma?
>>>     ;
>>>
>>> Am I wrong or should both work all right?
>>> Alexander
>
>

From jaluber at gmx.de  Mon Mar  3 07:03:35 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 03 Mar 2008 16:03:35 +0100
Subject: [antlr-interest] Syntactic Predicate does not work but
 Backtracking does
In-Reply-To: <47CC0A06.8000607@gaengel.de>
References: <47C89643.5020909@gaengel.de>
	<47C91B20.8030209@gaengel.de>	<C3186AE0-B0D6-4488-8D82-04503472C046@cs.usfca.edu>
	<47CC0A06.8000607@gaengel.de>
Message-ID: <47CC1347.7050506@gmx.de>

Alexander G?ngel schrieb:
> Sorry then I don't understand how Syntactic Predicates are working.
> 
> What I want is the possibility to have an expression or expression comma 
> followed by another expression, but the number of comma Expression is 
> not defined.
> 
> Alexander

How about:

expression_list
	:	expression (COMMA expression)*
	;

Johannes


From alexander at gaengel.de  Mon Mar  3 07:44:36 2008
From: alexander at gaengel.de (=?ISO-8859-1?Q?Alexander_G=E4ngel?=)
Date: Mon, 03 Mar 2008 16:44:36 +0100
Subject: [antlr-interest] Syntactic Predicate does not work but
 Backtracking does
In-Reply-To: <47CC1347.7050506@gmx.de>
References: <47C89643.5020909@gaengel.de>
	<47C91B20.8030209@gaengel.de>	<C3186AE0-B0D6-4488-8D82-04503472C046@cs.usfca.edu>
	<47CC0A06.8000607@gaengel.de> <47CC1347.7050506@gmx.de>
Message-ID: <47CC1CE4.4010306@gaengel.de>

Ok this works, I thought I would have to use Syntactic Predicates there, 
maybe I should just go to sleep.

Alexander

Johannes Luber schrieb:
> Alexander G?ngel schrieb:
>> Sorry then I don't understand how Syntactic Predicates are working.
>>
>> What I want is the possibility to have an expression or expression 
>> comma followed by another expression, but the number of comma 
>> Expression is not defined.
>>
>> Alexander
>
> How about:
>
> expression_list
>     :    expression (COMMA expression)*
>     ;
>
> Johannes
>
>

From peter.brant at gmail.com  Mon Mar  3 08:50:10 2008
From: peter.brant at gmail.com (Peter Brant)
Date: Mon, 3 Mar 2008 17:50:10 +0100
Subject: [antlr-interest] ANTLR 3.1: memo array is null for JadeSQL.g
Message-ID: <f1f6e0e60803030850k54e6cab2k39d2b24bd719eb0b@mail.gmail.com>

Hi all,

When I set memoize=true on a rule, ANTLR (2008-01-23.10) dies with the
following messages and NPE:

!!!!!!!!! memo array is null for JadeSQL.g
!!!!!!!!! memo array is null for JadeSQL.g
!!!!!!!!! memo array is null for JadeSQL.g
java.lang.NullPointerException
        at org.antlr.runtime.BaseRecognizer.memoize(BaseRecognizer.java:801)
        at gov.wicourts.jade.sqlparser2.JadeSQLParser.expression_primary(JadeSQLParser.java:15269)
...

The rule looks like this:

expression_primary
options {
	k=3;
	backtrack=true;
	memoize=true;
	
}
	: subquery
...

It worked in 3.0.1.  Is this a known issue?  I couldn't find it in JIRA.

Thanks,

Pete

From antlr at jazillian.com  Mon Mar  3 08:48:28 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 03 Mar 2008 11:48:28 -0500
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <200803010308.m2138sDu016266@jazillian.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>
	<47C6FFF0.10701@jazillian.com>
	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>
	<47C71AA9.1090908@jazillian.com>
	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>
	<47C84E2F.9050105@jazillian.com>
	<200803010308.m2138sDu016266@jazillian.com>
Message-ID: <47CC2BDC.3050707@jazillian.com>

>
>> The "meaning" or "semantics" for a lexer is the sequence of output 
>> tokens.
>> The "meaning" or "semantics" for a parser is the output AST.
>> The "meaning" or "semantics" for a treewalker is whatever it outputs 
>> (some modified AST or whatever).
>
> No.  Those are the output syntax forms of each (what I referred to as 
> "sentences" above) -- they do *not* represent semantics or meaning.
>
> If you take an ANTLR grammar and remove all action code from it, then 
> it will still take in input syntax and generate output syntax, but no 
> inherent meaning is associated with it.  Thus left to itself ANTLR is 
> a pure syntax recogniser/generator.  In addition to this is also 
> permits semantic validation and constructs to be included, but this is 
> convenience and is not essential to operation (except possibly for 
> some syntactically ambiguous languages).

Hmmm. I disagree, but I'm not sure what to say.
A lexer takes letters 'c', 'a', and 't' as input and outputs the word "cat".
If the word "cat" isn't the "meaning" of those letters, then I'm 
completely lost.
If you're saying that the lexer's ability to accept those letters in 
that sequence is "meaning", well, I disagree.
>
>> We NEVER see an AST being referred to as a "syntax diagram" (or 
>> "syntax" anything) - we call it an AST.
>
> Yes, and what does AST actually stand for?  Abstract Syntax Tree.  Oh 
> look, it *is* referred to as "syntax".
Yea, good point. However, it's referred to as "Abstract Syntax",
which has quite a different meaning than just "syntax":
http://en.wikipedia.org/wiki/Abstract_syntax
>
>
> Perhaps another more concrete example is in order here.  The input is:
>
>   int x = doCalculation(5);
>
> This is a character stream which the lexer might convert into the 
> token stream:
>
>   KEYWORD[int] IDENTIFIER[x] ASSIGN[=] IDENTIFIER[doCalculation] 
> OPAREN[(] NUMBER[5] CPAREN[)] SEMI[;]
>
> The parser takes that token stream and converts it into the following AST:
>
>   ( DECLARATION KEYWORD[int] IDENTIFIER[x] )
>   ( ASSIGN[=]
>     IDENTIFIER[x]
>     ( FUNCTIONCALL IDENTIFIER[doCalculation] ( NUMBER[5] ) )
>   )
>
> Everything we have done up to this point is still all just syntax.  
> This is a perfectly valid AST and thus the input is valid syntactically.
It doesn't seem odd to you that you're refering to the shape of the AST 
as "valid syntactically"?
Would you say that "x int;" is "syntactically invalid"?
I would say it's "syntactially valid", but "semantically invalid". When 
I say that, it's implied that I'm
talking about a parser, not a lexer (for which it's syntactically and 
semantically valid) or a treewalker
(for which it's a mute point, because the parser will not accept it).
>
> But what happens when we start to verify the semantics?  What happens 
> if it turns out that "doCalculation" isn't actually a function, or 
> doesn't take a single numeric parameter, or doesn't return a type that 
> can be compatibly assigned to an integer variable?  What happens if 
> "x" had already been declared as a string variable?  Those are all 
> semantic tests and they are independent of the AST itself.  So what 
> was perfectly valid syntax may be semantically incorrect.
Yup.
>
> ANTLR lets you choose whether you want to do the semantic checks right 
> at the end (in your own driver code, or in a tree walker), or whether 
> you want to do them inline at the lexing or parsing stages (either to 
> fail quickly or to resolve syntactical ambiguities).  
> But being able to insert them inline doesn't mean that they're 
> directly linked the way you seem to have been saying.  They remain 
> separate and distinct things.
I'm not sure what you're saying here. What two things are distinct?
>
> I wonder if this is a similar confusion to that caused by having a 
> combined grammar with literals in the parser rules -- it's permitted 
> for convenience but it doesn't change the fact that they're treated 
> separately (by modifying the lexer).
Again, I'm not sure what you mean. Who is confused about what?


From darien.hager at etelos-inc.com  Mon Mar  3 10:34:07 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Mon, 3 Mar 2008 10:34:07 -0800
Subject: [antlr-interest] Fwd: A couple of questions for lexing strategy.
In-Reply-To: <4ff3ab470802291919s22d08193p78c8d5c0e9a57492@mail.gmail.com>
References: <4ff3ab470802291859i4b42c431s17718adccc82d31d@mail.gmail.com>
	<4ff3ab470802291919s22d08193p78c8d5c0e9a57492@mail.gmail.com>
Message-ID: <c8c997f40803031034k3c2687d0tdcd532e304ce9c82@mail.gmail.com>

I'll let the knowledgable folks deal with most of that (how gracious of me
:P ) but...

On 2/29/08, ANTLR Mailing List <jstpierre-antlr at mecheye.net> wrote:
>
>
>   Also, can ANTLR extract the token list in the lexer into it's own
>   class? When using the parser rule grammar shown above, the list is
>   generated twice, once in each class. It seems that putting the tokens
>   in its own file would be much cleaner.


At least when using ANTLRworks a file called grammarname.tokens is created
with each line containing a token-text to ID mapping. This file is AFAIK
only for your convenience, nothing relies on it.

Of course, the tokens attached to Parser/Lexer classes as constants
(public-static-final) can be accessed without instantiating the lexer
or parser.

  Also, I still have interest in developing the ActionScript port for
>   ANTLR, but I'm a student (read: I'm under 18). Would I still be able
>   to develop, because my signature is not legal.
>

As a non-lawyer, I don't think that's a major problem--you don't need to be
of legal age to begin making a runtime port or other software project... you
just have to be of a legal age or have help before you make any contractual
agreement stuff. (You know, like licensing your work or something.)

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080303/fa58082a/attachment-0001.html 

From john at jacelridge.com  Mon Mar  3 12:32:47 2008
From: john at jacelridge.com (John Ridgway)
Date: Mon, 3 Mar 2008 15:32:47 -0500
Subject: [antlr-interest] Simple error detection?
Message-ID: <7D9CE218-5BA5-4BAF-A862-3A811FD454E6@jacelridge.com>

Is there a really easy way to determine whether parsing (or tree- 
parsing) completed successfully, or generated error messages?  I'm  
sure I could do it with appropriate use of rulecatch, but I really  
just want to check an existing flag.  Am I being dumb?  Have I missed  
something?

Peace
- John


From gudnabrsam at yahoo.com  Mon Mar  3 12:53:54 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Mon, 3 Mar 2008 12:53:54 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <887869.75735.qm@web55113.mail.re4.yahoo.com>

I am working on a language with a fairly loose lexing
scheme.  I am running into all sorts of problems
specifying my lexer:  in particular I can't find any
evidence that backtracking works for lexer grammars. 
I tend to get NPEs building the NFAs when combining
synpreds, lexer grammars, and backtracking=true,
whether I use ANTLR 3.0.1 or a fairly recent 3.1
build.  I have had to use a strategy whereby any
possibly confusing tokens are generated from a single
lexer rule.  I'll include my current lexer grammar
that passes Tool generation; if anyone has the
time/inclination/interest to offer ideas how I could
have done things more cleanly I'd be glad to hear
about it.

Thanks (or not),
Matt

lexer grammar Loose;
options {k=1;}
tokens { Identifier; SEMI; SL_COMMENT; ML_COMMENT;}

EQUALS	:	'=';

StringLiteral
	:	'"' ( EscapeSequence | ~('\\'|'"') )* '"'
	;

fragment
EscapeSequence
	:	'\\'
		(	('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
		|	Unicode
		|	Octal
		)
    ;

fragment
Octal
options {k=3;}
    :   ('0'..'3') ('0'..'7') ('0'..'7')
    |	('0'..'7') ('0'..'7')?
    ;

fragment
Unicode
	:	'u' HexDigit HexDigit HexDigit HexDigit
	;

fragment
HexDigit
	:	('0'..'9'|'a'..'f'|'A'..'F')
	;

WS	:	(WsChar)+ {$channel=HIDDEN;}
	;

fragment
WsChar
	:	' '|'\r'|'\t'|'\u000C'|'\n'
	;

Token
	:	(';' WsChar)=>';' {$type=SEMI;}
	|	('//')=>LineComment {$type=SL_COMMENT;}
	|	('/*')=>Comment {$type=ML_COMMENT;}
	|	(TokenMark)=>TokenTail {$type=Token;}
	|	(	(Letter)=>Ident {$type=Identifier;}
		|	IDDigit (Letter|IDDigit)*
		)
		//the presence of a token tail overrides any
previously assigned token type:
		(TokenTail {$type=Token;})?
	;

fragment
LineComment
	:	'//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
	;

fragment
Comment
	:	'/*' ( options {greedy=false;} : . )* '*/'
{$channel=HIDDEN;}
	;

fragment
TokenTail
	:	TokenMark+ ((Letter|IDDigit)+ TokenTail?)?
	;

fragment
TokenMark
options {k=2;}
	:	EscapeSequence
	|	(';' ~(WsChar))=>';'//do not accept semicolon if
followed by WS
	|	~(Letter|IDDigit|WsChar|';'|'"'|EQUALS|'/')
	|	('/' ~('/'|'*'))=>'/'//do not accept '/' if LA
finds an upcoming SL/ML comment
	;

fragment
Ident
	:	Letter (Letter|IDDigit)*
	;

fragment
Letter
	:	'\u0024'
	|	'\u0041'..'\u005a'
	|	'\u005f'
	|	'\u0061'..'\u007a'
	|	'\u00c0'..'\u00d6'
	|	'\u00d8'..'\u00f6'
	|	'\u00f8'..'\u00ff'
	|	'\u0100'..'\u1fff'
	|	'\u3040'..'\u318f'
	|	'\u3300'..'\u337f'
	|	'\u3400'..'\u3d2d'
	|	'\u4e00'..'\u9fff'
	|	'\uf900'..'\ufaff'
	;

fragment
IDDigit
	:	'\u0030'..'\u0039'
	|	'\u0660'..'\u0669'
	|	'\u06f0'..'\u06f9'
	|	'\u0966'..'\u096f'
	|	'\u09e6'..'\u09ef'
	|	'\u0a66'..'\u0a6f'
	|	'\u0ae6'..'\u0aef'
	|	'\u0b66'..'\u0b6f'
	|	'\u0be7'..'\u0bef'
	|	'\u0c66'..'\u0c6f'
	|	'\u0ce6'..'\u0cef'
	|	'\u0d66'..'\u0d6f'
	|	'\u0e50'..'\u0e59'
	|	'\u0ed0'..'\u0ed9'
	|	'\u1040'..'\u1049'
	;




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From shro8822 at vandals.uidaho.edu  Mon Mar  3 13:43:23 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 03 Mar 2008 13:43:23 -0800
Subject: [antlr-interest] "context sensitivity" of tree parsing
Message-ID: <BAYC1-PASMTP07A3CCC11E74BC81F626EAF5170@CEZ.ICE>

I known context sensitive has another manging but it is the most 
descriptive term here:

I have a tree parser working over an AST and I have a particular rule 
that gets used in 2 places. In one place I want it to do something and 
in another I don't want it to do anything. Rather than copy the whole 
rule (and potentially a pile of referenced rules) and edit out the 
actions, my first though is to pass a bool in to test on (on true I'm in 
the one cases, on false I'm in the other) but this seems a bit clunky.

Is there a better way? If so, what is it called and where can I read up 
on it?

From lgcraymer at yahoo.com  Mon Mar  3 13:57:20 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Mon, 3 Mar 2008 13:57:20 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <220699.19096.qm@web55905.mail.re3.yahoo.com>

This one's easy--unfortunately.  Ter does not yet use FOLLOW sets in the lexer, and that tends to cause havoc with your nicely factored grammar.  Also, you have gone overboard on using fragment rules where they are not particularly appropriate (all of your conmments, for example).

Can comments really be turned into tokens if followed by odd characters?  This seems really strange.

Anyway, I would suggest factoring out a comment rule and either inline most of the fragments or wait until Ter adds in FOLLOW set usage.

--Loring

----- Original Message ----
> From: Matt Benson <gudnabrsam at yahoo.com>
> To: Antlr List <antlr-interest at antlr.org>
> Sent: Monday, March 3, 2008 12:53:54 PM
> Subject: [antlr-interest] lexer woes
> 
> I am working on a language with a fairly loose lexing
> scheme.  I am running into all sorts of problems
> specifying my lexer:  in particular I can't find any
> evidence that backtracking works for lexer grammars. 
> I tend to get NPEs building the NFAs when combining
> synpreds, lexer grammars, and backtracking=true,
> whether I use ANTLR 3.0.1 or a fairly recent 3.1
> build.  I have had to use a strategy whereby any
> possibly confusing tokens are generated from a single
> lexer rule.  I'll include my current lexer grammar
> that passes Tool generation; if anyone has the
> time/inclination/interest to offer ideas how I could
> have done things more cleanly I'd be glad to hear
> about it.
> 
> Thanks (or not),
> Matt
> 
> lexer grammar Loose;
> options {k=1;}
> tokens { Identifier; SEMI; SL_COMMENT; ML_COMMENT;}
> 
> EQUALS    :    '=';
> 
> StringLiteral
>     :    '"' ( EscapeSequence | ~('\\'|'"') )* '"'
>     ;
> 
> fragment
> EscapeSequence
>     :    '\\'
>         (    ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
>         |    Unicode
>         |    Octal
>         )
>     ;
> 
> fragment
> Octal
> options {k=3;}
>     :   ('0'..'3') ('0'..'7') ('0'..'7')
>     |    ('0'..'7') ('0'..'7')?
>     ;
> 
> fragment
> Unicode
>     :    'u' HexDigit HexDigit HexDigit HexDigit
>     ;
> 
> fragment
> HexDigit
>     :    ('0'..'9'|'a'..'f'|'A'..'F')
>     ;
> 
> WS    :    (WsChar)+ {$channel=HIDDEN;}
>     ;
> 
> fragment
> WsChar
>     :    ' '|'\r'|'\t'|'\u000C'|'\n'
>     ;
> 
> Token
>     :    (';' WsChar)=>';' {$type=SEMI;}
>     |    ('//')=>LineComment {$type=SL_COMMENT;}
>     |    ('/*')=>Comment {$type=ML_COMMENT;}
>     |    (TokenMark)=>TokenTail {$type=Token;}
>     |    (    (Letter)=>Ident {$type=Identifier;}
>         |    IDDigit (Letter|IDDigit)*
>         )
>         //the presence of a token tail overrides any
> previously assigned token type:
>         (TokenTail {$type=Token;})?
>     ;
> 
> fragment
> LineComment
>     :    '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
>     ;
> 
> fragment
> Comment
>     :    '/*' ( options {greedy=false;} : . )* '*/'
> {$channel=HIDDEN;}
>     ;
> 
> fragment
> TokenTail
>     :    TokenMark+ ((Letter|IDDigit)+ TokenTail?)?
>     ;
> 
> fragment
> TokenMark
> options {k=2;}
>     :    EscapeSequence
>     |    (';' ~(WsChar))=>';'//do not accept semicolon if
> followed by WS
>     |    ~(Letter|IDDigit|WsChar|';'|'"'|EQUALS|'/')
>     |    ('/' ~('/'|'*'))=>'/'//do not accept '/' if LA
> finds an upcoming SL/ML comment
>     ;
> 
> fragment
> Ident
>     :    Letter (Letter|IDDigit)*
>     ;
> 
> fragment
> Letter
>     :    '\u0024'
>     |    '\u0041'..'\u005a'
>     |    '\u005f'
>     |    '\u0061'..'\u007a'
>     |    '\u00c0'..'\u00d6'
>     |    '\u00d8'..'\u00f6'
>     |    '\u00f8'..'\u00ff'
>     |    '\u0100'..'\u1fff'
>     |    '\u3040'..'\u318f'
>     |    '\u3300'..'\u337f'
>     |    '\u3400'..'\u3d2d'
>     |    '\u4e00'..'\u9fff'
>     |    '\uf900'..'\ufaff'
>     ;
> 
> fragment
> IDDigit
>     :    '\u0030'..'\u0039'
>     |    '\u0660'..'\u0669'
>     |    '\u06f0'..'\u06f9'
>     |    '\u0966'..'\u096f'
>     |    '\u09e6'..'\u09ef'
>     |    '\u0a66'..'\u0a6f'
>     |    '\u0ae6'..'\u0aef'
>     |    '\u0b66'..'\u0b6f'
>     |    '\u0be7'..'\u0bef'
>     |    '\u0c66'..'\u0c6f'
>     |    '\u0ce6'..'\u0cef'
>     |    '\u0d66'..'\u0d6f'
>     |    '\u0e50'..'\u0e59'
>     |    '\u0ed0'..'\u0ed9'
>     |    '\u1040'..'\u1049'
>     ;
> 
> 
> 
> 
>       
> ____________________________________________________________________________________
> Looking for last minute shopping deals?  
> Find them fast with Yahoo! Search.  
> http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> 




      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 


From lgcraymer at yahoo.com  Mon Mar  3 14:11:21 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Mon, 3 Mar 2008 14:11:21 -0800 (PST)
Subject: [antlr-interest] "context sensitivity" of tree parsing
Message-ID: <387571.57346.qm@web55908.mail.re3.yahoo.com>

You have discovered the two possible options--replicate rules or use a state flag--for single pass processing.  There are also cases where it is possible to do something with StringTemplates, and you can  add in a tree walker pass that prunes the subtrees for which you do not want to execute actions.  If you are doing complicated analysis, the extra tree walker pass can be the best solution (and it may turn out not be an extra pass)--it never hurts to simplify.

--Loring

----- Original Message ----
> From: Benjamin Shropshire <shro8822 at vandals.uidaho.edu>
> To: Antlr Interest <antlr-interest at antlr.org>
> Sent: Monday, March 3, 2008 1:43:23 PM
> Subject: [antlr-interest] "context sensitivity" of tree parsing
> 
> I known context sensitive has another manging but it is the most 
> descriptive term here:
> 
> I have a tree parser working over an AST and I have a particular rule 
> that gets used in 2 places. In one place I want it to do something and 
> in another I don't want it to do anything. Rather than copy the whole 
> rule (and potentially a pile of referenced rules) and edit out the 
> actions, my first though is to pass a bool in to test on (on true I'm in 
> the one cases, on false I'm in the other) but this seems a bit clunky.
> 
> Is there a better way? If so, what is it called and where can I read up 
> on it?
> 




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From gudnabrsam at yahoo.com  Mon Mar  3 14:15:17 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Mon, 3 Mar 2008 14:15:17 -0800 (PST)
Subject: [antlr-interest] lexer woes
In-Reply-To: <220699.19096.qm@web55905.mail.re3.yahoo.com>
Message-ID: <602628.37987.qm@web55111.mail.re4.yahoo.com>


--- Loring Craymer <lgcraymer at yahoo.com> wrote:

> This one's easy--unfortunately.  Ter does not yet
> use FOLLOW sets in the lexer, and that tends to
> cause havoc with your nicely factored grammar. 
> Also, you have gone overboard on using fragment
> rules where they are not particularly appropriate
> (all of your conmments, for example).
> 
> Can comments really be turned into tokens if
> followed by odd characters?  This seems really
> strange.
> 

No, that wasn't my intention.  Ugh, I had my comment
rules factored out properly but kept getting told they
were unreachable, despite my awareness of
order-of-rules issues, etc.  However, I just changed
my default k back to 2, put SL_COMMENT and ML_COMMENT
before Token, and now it seems the Tool wants to
disable Token for // and /* as is proper.  Not sure
why I couldn't get it working before but that problem
appears to be solved.  That said I guess I should keep
playing around for awhile here...

> Anyway, I would suggest factoring out a comment rule
> and either inline most of the fragments or wait
> until Ter adds in FOLLOW set usage.
> 

Is that in the plan?  I don't pretend to understand
the whole follow set thing, but Google tells me it has
lots of stuff for me to read and I'm still working my
way through the Dragon book which I imagine probably
contains some relevant info as well.

Thanks, Loring.

> --Loring
> 
> ----- Original Message ----
> > From: Matt Benson <gudnabrsam at yahoo.com>
> > To: Antlr List <antlr-interest at antlr.org>
> > Sent: Monday, March 3, 2008 12:53:54 PM
> > Subject: [antlr-interest] lexer woes
> > 
> > I am working on a language with a fairly loose
> lexing
> > scheme.  I am running into all sorts of problems
> > specifying my lexer:  in particular I can't find
> any
> > evidence that backtracking works for lexer
> grammars. 
> > I tend to get NPEs building the NFAs when
> combining
> > synpreds, lexer grammars, and backtracking=true,
> > whether I use ANTLR 3.0.1 or a fairly recent 3.1
> > build.  I have had to use a strategy whereby any
> > possibly confusing tokens are generated from a
> single
> > lexer rule.  I'll include my current lexer grammar
> > that passes Tool generation; if anyone has the
> > time/inclination/interest to offer ideas how I
> could
> > have done things more cleanly I'd be glad to hear
> > about it.
> > 
> > Thanks (or not),
> > Matt
> > 
> > lexer grammar Loose;
> > options {k=1;}
> > tokens { Identifier; SEMI; SL_COMMENT;
> ML_COMMENT;}
> > 
> > EQUALS    :    '=';
> > 
> > StringLiteral
> >     :    '"' ( EscapeSequence | ~('\\'|'"') )* '"'
> >     ;
> > 
> > fragment
> > EscapeSequence
> >     :    '\\'
> >         (    ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
> >         |    Unicode
> >         |    Octal
> >         )
> >     ;
> > 
> > fragment
> > Octal
> > options {k=3;}
> >     :   ('0'..'3') ('0'..'7') ('0'..'7')
> >     |    ('0'..'7') ('0'..'7')?
> >     ;
> > 
> > fragment
> > Unicode
> >     :    'u' HexDigit HexDigit HexDigit HexDigit
> >     ;
> > 
> > fragment
> > HexDigit
> >     :    ('0'..'9'|'a'..'f'|'A'..'F')
> >     ;
> > 
> > WS    :    (WsChar)+ {$channel=HIDDEN;}
> >     ;
> > 
> > fragment
> > WsChar
> >     :    ' '|'\r'|'\t'|'\u000C'|'\n'
> >     ;
> > 
> > Token
> >     :    (';' WsChar)=>';' {$type=SEMI;}
> >     |    ('//')=>LineComment {$type=SL_COMMENT;}
> >     |    ('/*')=>Comment {$type=ML_COMMENT;}
> >     |    (TokenMark)=>TokenTail {$type=Token;}
> >     |    (    (Letter)=>Ident {$type=Identifier;}
> >         |    IDDigit (Letter|IDDigit)*
> >         )
> >         //the presence of a token tail overrides
> any
> > previously assigned token type:
> >         (TokenTail {$type=Token;})?
> >     ;
> > 
> > fragment
> > LineComment
> >     :    '//' ~('\n'|'\r')* '\r'? '\n'
> {$channel=HIDDEN;}
> >     ;
> > 
> > fragment
> > Comment
> >     :    '/*' ( options {greedy=false;} : . )*
> '*/'
> > {$channel=HIDDEN;}
> >     ;
> > 
> > fragment
> > TokenTail
> >     :    TokenMark+ ((Letter|IDDigit)+
> TokenTail?)?
> >     ;
> > 
> > fragment
> > TokenMark
> > options {k=2;}
> >     :    EscapeSequence
> >     |    (';' ~(WsChar))=>';'//do not accept
> semicolon if
> > followed by WS
> >     |   
> ~(Letter|IDDigit|WsChar|';'|'"'|EQUALS|'/')
> >     |    ('/' ~('/'|'*'))=>'/'//do not accept '/'
> if LA
> > finds an upcoming SL/ML comment
> >     ;
> > 
> > fragment
> > Ident
> >     :    Letter (Letter|IDDigit)*
> >     ;
> > 
> > fragment
> > Letter
> >     :    '\u0024'
> >     |    '\u0041'..'\u005a'
> >     |    '\u005f'
> >     |    '\u0061'..'\u007a'
> >     |    '\u00c0'..'\u00d6'
> >     |    '\u00d8'..'\u00f6'
> >     |    '\u00f8'..'\u00ff'
> >     |    '\u0100'..'\u1fff'
> >     |    '\u3040'..'\u318f'
> >     |    '\u3300'..'\u337f'
> >     |    '\u3400'..'\u3d2d'
> >     |    '\u4e00'..'\u9fff'
> >     |    '\uf900'..'\ufaff'
> >     ;
> > 
> > fragment
> > IDDigit
> >     :    '\u0030'..'\u0039'
> >     |    '\u0660'..'\u0669'
> >     |    '\u06f0'..'\u06f9'
> >     |    '\u0966'..'\u096f'
> >     |    '\u09e6'..'\u09ef'
> >     |    '\u0a66'..'\u0a6f'
> >     |    '\u0ae6'..'\u0aef'
> >     |    '\u0b66'..'\u0b6f'
> >     |    '\u0be7'..'\u0bef'
> >     |    '\u0c66'..'\u0c6f'
> >     |    '\u0ce6'..'\u0cef'
> >     |    '\u0d66'..'\u0d6f'
> >     |    '\u0e50'..'\u0e59'
> >     |    '\u0ed0'..'\u0ed9'
> >     |    '\u1040'..'\u1049'
> >     ;
> > 
> > 
> > 
> > 
> >       
> >
>
____________________________________________________________________________________
> > Looking for last minute shopping deals?  
> > Find them fast with Yahoo! Search.  
> >
>
http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> > 
> 
> 
> 
> 
>      
>
____________________________________________________________________________________
> Be a better friend, newshound, and 
> know-it-all with Yahoo! Mobile.  Try it now. 
>
http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ
> 
> 
> 



      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From shro8822 at vandals.uidaho.edu  Mon Mar  3 14:22:17 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 03 Mar 2008 14:22:17 -0800
Subject: [antlr-interest] "context sensitivity" of tree parsing
In-Reply-To: <387571.57346.qm@web55908.mail.re3.yahoo.com>
References: <387571.57346.qm@web55908.mail.re3.yahoo.com>
Message-ID: <BAYC1-PASMTP03E05DEB02EC19DE754E0AF5170@CEZ.ICE>

Loring Craymer wrote:
> You have discovered the two possible options--replicate rules or use a state flag--for single pass processing.  There are also cases where it is possible to do something with StringTemplates, and you can  add in a tree walker pass that prunes the subtrees for which you do not want to execute actions.  If you are doing complicated analysis, the extra tree walker pass can be the best solution (and it may turn out not be an extra pass)--it never hurts to simplify.
>
> --Loring
>   
Ironic, this /is/ in an extra pass (build symbol table on pass 1, uses 
symbol table on pass 2). The issue arises because symbols are syntactic 
rather than lexical constructs and the same rule's apply to both the 
syntax of the deceleration and to the syntax of the usage.

Anyway, thanks.

From guntiso at latnet.lv  Mon Mar  3 14:33:42 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Tue,  4 Mar 2008 00:33:42 +0200
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <47CC2BDC.3050707@jazillian.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>
	<47C6FFF0.10701@jazillian.com>
	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>
	<47C71AA9.1090908@jazillian.com>
	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>
	<47C84E2F.9050105@jazillian.com>
	<200803010308.m2138sDu016266@jazillian.com>
	<47CC2BDC.3050707@jazillian.com>
Message-ID: <1204583622.47cc7cc60644e@clients.latnet.lv>

> A lexer takes letters 'c', 'a', and 't' as input and outputs the word "cat".
> If the word "cat" isn't the "meaning" of those letters, then I'm
> completely lost.

Lost, of course...
Just letters, just words, just sentences, stream or tree or whatever...
These are not the "meaning" yet.

See http://en.wikipedia.org/wiki/Cat for a description of "cat"
to understand the meaning of "cat".


From shro8822 at vandals.uidaho.edu  Mon Mar  3 15:02:51 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 03 Mar 2008 15:02:51 -0800
Subject: [antlr-interest] Bug or badly written error case
Message-ID: <BAYC1-PASMTP057816D619ADAF987ED88AF5170@CEZ.ICE>

I have run into a case where some antler generated code goes into an 
error state but gives little or no helpful information. The error was 
cause by having these two rules in the same grammar:

WS        :    (' '|'\t')+ {Skip();} ;

import
    : 'import' (' ' | '\t')+ FText eol_     -> ^(IMPORT FText)
    ;

the error was removed by changeling this to

WS        :    (' '|'\t')+ {Skip();} ;

import
    : 'import' WS FText eol_     -> ^(IMPORT FText)
    ;

This error in my code seems to be exposing a bug (or what looks like 
one) in antlr because it causes some of the C# antlr runtime to throw a 
RewriteEmptyStreamException. This gives no useful information (with 
regards to finding my error) and seems like it exposes to much of the 
underlying runtime.

I hope this is useful.

--Benjamin Shropshire


From antlr at jazillian.com  Mon Mar  3 15:02:40 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 03 Mar 2008 18:02:40 -0500
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <1204583622.47cc7cc60644e@clients.latnet.lv>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>
	<47C6FFF0.10701@jazillian.com>
	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>
	<47C71AA9.1090908@jazillian.com>
	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>
	<47C84E2F.9050105@jazillian.com>
	<200803010308.m2138sDu016266@jazillian.com>
	<47CC2BDC.3050707@jazillian.com>
	<1204583622.47cc7cc60644e@clients.latnet.lv>
Message-ID: <47CC8390.2040501@jazillian.com>

Guntis Ozols wrote:
>> A lexer takes letters 'c', 'a', and 't' as input and outputs the word "cat".
>> If the word "cat" isn't the "meaning" of those letters, then I'm
>> completely lost.
>>     
>
> Lost, of course...
> Just letters, just words, just sentences, stream or tree or whatever...
> These are not the "meaning" yet.
>
> See http://en.wikipedia.org/wiki/Cat for a description of "cat"
> to understand the meaning of "cat".
>
>   
No, it's not a real cat that I'm talking about here, obviously.

I'm talking about a Token that's part of a lexer output, which happens 
to have a text string associated
with it of "cat".

Ask a person what is the meaning of the letters 'c', 'a', and 't' 
(presumably in that order and surrounded by
non-letters), and they'll tell you the meaning is the word "cat". A 
lexer does the same: produces
a meaningful output that represents the meaning of the input.

A lexer (or any recognizer) certainly knows and applies "meaning". 

I think people are equating "meaning" to semantics instead of seeing 
that semantics is just one type
of meaning. A pretty printer that lexes, parses, and treewalks, and 
prints out the input in some nice
format may do no semantic analysis. But it "knows the meaning" of a 
statement, or else it wouldn't
be able to do it's job (say, follow every statement with a ";").
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080303/822ede75/attachment.html 

From lgcraymer at yahoo.com  Mon Mar  3 15:48:15 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Mon, 3 Mar 2008 15:48:15 -0800 (PST)
Subject: [antlr-interest] Bug or badly written error case
Message-ID: <785879.87554.qm@web55905.mail.re3.yahoo.com>

This is another example of the combined grammar confusion.  Combined grammars generate separate two recognizers--a lexer and a parser; the lexer executes before the parser.  Your first "import" rule defines three lexer rules in addition to the parser rule:

IMPORT : 'import' ;
T_xxx2 : ' ' ;
T_xxx3: '\t' ;

(I assume that you have IMPORT = 'import'; in your tokens section, although maybe not given the exception raised.)

and even the "successful" case with import defined in terms of WS will not work as intended because the parser cannot encounter a WS token (the lexer moves these to the HIDDEN channel), so no input will match the import rule.

I do like the definition with WS as a possible syntax for dealing with hidden tokens, though, when they are required to be present.

--Loring

----- Original Message ----
> From: Benjamin Shropshire <shro8822 at vandals.uidaho.edu>
> To: Antlr Interest <antlr-interest at antlr.org>
> Sent: Monday, March 3, 2008 3:02:51 PM
> Subject: [antlr-interest] Bug or badly written error case
> 
> I have run into a case where some antler generated code goes into an 
> error state but gives little or no helpful information. The error was 
> cause by having these two rules in the same grammar:
> 
> WS        :    (' '|'\t')+ {Skip();} ;
> 
> import
>     : 'import' (' ' | '\t')+ FText eol_     -> ^(IMPORT FText)
>     ;
> 
> the error was removed by changeling this to
> 
> WS        :    (' '|'\t')+ {Skip();} ;
> 
> import
>     : 'import' WS FText eol_     -> ^(IMPORT FText)
>     ;
> 
> This error in my code seems to be exposing a bug (or what looks like 
> one) in antlr because it causes some of the C# antlr runtime to throw a 
> RewriteEmptyStreamException. This gives no useful information (with 
> regards to finding my error) and seems like it exposes to much of the 
> underlying runtime.
> 
> I hope this is useful.
> 
> --Benjamin Shropshire
> 
> 




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From gbr at newtechlaw.com  Mon Mar  3 15:47:47 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Mon, 03 Mar 2008 15:47:47 -0800
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <47CC8390.2040501@jazillian.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>
	<47C6FFF0.10701@jazillian.com>
	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>
	<47C71AA9.1090908@jazillian.com>
	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>
	<47C84E2F.9050105@jazillian.com>
	<200803010308.m2138sDu016266@jazillian.com>
	<47CC2BDC.3050707@jazillian.com>
	<1204583622.47cc7cc60644e@clients.latnet.lv>
	<47CC8390.2040501@jazillian.com>
Message-ID: <200803032349.m23NnoHs018299@tach.newtechlaw.com>

At 03:02 PM 3/3/2008, Andy Tripp wrote:
>Ask a person what is the meaning of the letters 'c', 'a', and 't' 
>(presumably in that order and surrounded by
>non-letters), and they'll tell you the meaning is the word "cat". A 
>lexer does the same: produces
>a meaningful output that represents the meaning of the input.

Wlihe hmuans drevie ipmpilcit udnretsnadnig lragely from the 
smenatcis of snentcee srtcutrues, mchaines, pratciuclarly smiple 
lxeers, are rsetirtced to rcegoniznig, but not udnretsnadnig, srtcutrue.

Yes, in a snese, it is all smenatcis.  But, in the snese of use in 
froaml cmoptuer sceicne dsicuorse, to euqtae 'c' 'a' 't' to "cat" is 
srtutcrue, to euqtae 'c' 'a' 't' to "feline" is smenatcis.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080303/40dbe006/attachment.html 

From shro8822 at vandals.uidaho.edu  Mon Mar  3 16:01:02 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 03 Mar 2008 16:01:02 -0800
Subject: [antlr-interest] Bug or badly written error case
In-Reply-To: <785879.87554.qm@web55905.mail.re3.yahoo.com>
References: <785879.87554.qm@web55905.mail.re3.yahoo.com>
Message-ID: <BAYC1-PASMTP02F6386E22A14640EF1B34F5100@CEZ.ICE>

Loring Craymer wrote:
> This is another example of the combined grammar confusion.  Combined grammars generate separate two recognizers--a lexer and a parser; the lexer executes before the parser.  Your first "import" rule defines three lexer rules in addition to the parser rule:
>
> IMPORT : 'import' ;
> T_xxx2 : ' ' ;
> T_xxx3: '\t' ;
>
> (I assume that you have IMPORT = 'import'; in your tokens section, although maybe not given the exception raised.)
>
> and even the "successful" case with import defined in terms of WS will not work as intended because the parser cannot encounter a WS token (the lexer moves these to the HIDDEN channel), so no input will match the import rule.
>
> I do like the definition with WS as a possible syntax for dealing with hidden tokens, though, when they are required to be present.
>
> --Loring
>   
I understand that there is an error in my code (and am not asking for 
help in fixing it as I already have), the issue I want to bring up is 
that the symptoms that my error caused are of no help what so ever in 
finding my error.  For the info that antlr gives to be useful, the user 
would need a understanding of the internals of antle. I think this is a 
problem and should be addressed.
>> This error in my code seems to be exposing a bug (or what looks like 
>> one) in antlr

From john at jacelridge.com  Mon Mar  3 16:06:39 2008
From: john at jacelridge.com (John Ridgway)
Date: Mon, 3 Mar 2008 19:06:39 -0500
Subject: [antlr-interest] Simple error detection?
In-Reply-To: <7D9CE218-5BA5-4BAF-A862-3A811FD454E6@jacelridge.com>
References: <7D9CE218-5BA5-4BAF-A862-3A811FD454E6@jacelridge.com>
Message-ID: <0204AFCD-F1FF-4CB2-A18D-C361243EA8BD@jacelridge.com>

Never mind.  I answered my own question.
   parser.getNumberOfSyntaxErrors()

Peace
- John

P.S.  Duh.




On Mar 3, 2008, at 3:32 PM, John Ridgway wrote:

> Is there a really easy way to determine whether parsing (or tree- 
> parsing) completed successfully, or generated error messages?  I'm  
> sure I could do it with appropriate use of rulecatch, but I really  
> just want to check an existing flag.  Am I being dumb?  Have I  
> missed something?
>
> Peace
> - John
>


From lgcraymer at yahoo.com  Mon Mar  3 16:10:06 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Mon, 3 Mar 2008 16:10:06 -0800 (PST)
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
Message-ID: <146576.16292.qm@web55904.mail.re3.yahoo.com>

As the noted logician Charles Lutwidge Dodgson wrote
March Hare: ?Then you should say what you mean. 
Alice: I do; at least - at least I mean what I say -- that's the same thing, you know.
Hatter: Not the same thing a bit! Why, you might just as well say that, 'I see what I eat' is the same as 'I eat what I see'!
March Hare: You might just as well say, that "I like what I get" is the same thing as "I get what I like"! 
The Dormouse: You might just as well say, that "I breathe when I sleep" is the same thing as "I sleep when I breathe"!

The same lexer that got you 'cat' will get you 'chat'.  What meaning would you give that?  Now suppose the sentence was "Viva la chat!".  Would your interpretation change?

Lexers understand the character syntax from which words are built, not the semantics of the words.

--Loring

----- Original Message ----
From: Andy Tripp <antlr at jazillian.com>
To: Guntis Ozols <guntiso at latnet.lv>
Cc: antlr-interest <antlr-interest at antlr.org>; Terence Parr <parrt at cs.usfca.edu>
Sent: Monday, March 3, 2008 3:02:40 PM
Subject: Re: [antlr-interest] "An Introduction to ANTLR" presentation slides

  Guntis Ozols wrote:      A lexer takes letters 'c', 'a', and 't' as input and outputs the word "cat".
If the word "cat" isn't the "meaning" of those letters, then I'm
completely lost.
        Lost, of course...
Just letters, just words, just sentences, stream or tree or whatever...
These are not the "meaning" yet.

See http://en.wikipedia.org/wiki/Cat for a description of "cat"
to understand the meaning of "cat".

  No, it's not a real cat that I'm talking about here, obviously.

I'm talking about a Token that's part of a lexer output, which happensto have a text string associated
with it of "cat". 

Ask a person what is the meaning of the letters 'c', 'a', and 't'(presumably in that order and surrounded by
non-letters), and they'll tell you the meaning is the word "cat". Alexer does the same: produces
a meaningful output that represents the meaning of the input. 

A lexer (or any recognizer) certainly knows and applies "meaning".  

I think people are equating "meaning" to semantics instead of seeingthat semantics is just one type
of meaning. A pretty printer that lexes, parses, and treewalks, andprints out the input in some nice
format may do no semantic analysis. But it "knows the meaning" of astatement, or else it wouldn't
be able to do it's job (say, follow every statement with a ";").






      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080303/6beb5a2c/attachment-0001.html 

From open.zone at virgin.net  Mon Mar  3 16:11:49 2008
From: open.zone at virgin.net (Micheal J)
Date: Tue, 4 Mar 2008 00:11:49 -0000
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <200803032349.m23NnoHs018299@tach.newtechlaw.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com><47C6FFF0.10701@jazillian.com><26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu><47C71AA9.1090908@jazillian.com><B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu><47C84E2F.9050105@jazillian.com><200803010308.m2138sDu016266@jazillian.com><47CC2BDC.3050707@jazillian.com><1204583622.47cc7cc60644e@clients.latnet.lv><47CC8390.2040501@jazillian.com>
	<200803032349.m23NnoHs018299@tach.newtechlaw.com>
Message-ID: <001301c87d8c$58ab1680$c404a8c0@marion>

ROFLMAO!!
 
This is the most effective explanation/demostration of the dangers of
confusing formal .vs. informal terminology in this thread...
 
Micheal


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald B. Rosenberg
Sent: 03 March 2008 23:48
To: antlr-interest
Subject: Re: [antlr-interest] "An Introduction to ANTLR" presentation slides


At 03:02 PM 3/3/2008, Andy Tripp wrote:


Ask a person what is the meaning of the letters 'c', 'a', and 't'
(presumably in that order and surrounded by
non-letters), and they'll tell you the meaning is the word "cat". A lexer
does the same: produces
a meaningful output that represents the meaning of the input. 


Wlihe hmuans drevie ipmpilcit udnretsnadnig lragely from the smenatcis of
snentcee srtcutrues, mchaines, pratciuclarly smiple lxeers, are rsetirtced
to rcegoniznig, but not udnretsnadnig, srtcutrue.

Yes, in a snese, it is all smenatcis.  But, in the snese of use in froaml
cmoptuer sceicne dsicuorse, to euqtae 'c' 'a' 't' to "cat" is srtutcrue, to
euqtae 'c' 'a' 't' to "feline" is smenatcis.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/b6686347/attachment.html 

From antlr at jazillian.com  Mon Mar  3 16:23:24 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 03 Mar 2008 19:23:24 -0500
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <200803032349.m23NnoHs018299@tach.newtechlaw.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>	<47C6FFF0.10701@jazillian.com>	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>	<47C71AA9.1090908@jazillian.com>	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>	<47C84E2F.9050105@jazillian.com>	<200803010308.m2138sDu016266@jazillian.com>	<47CC2BDC.3050707@jazillian.com>	<1204583622.47cc7cc60644e@clients.latnet.lv>	<47CC8390.2040501@jazillian.com>
	<200803032349.m23NnoHs018299@tach.newtechlaw.com>
Message-ID: <47CC967C.30806@jazillian.com>

Gerald B. Rosenberg wrote:
> At 03:02 PM 3/3/2008, Andy Tripp wrote:
>> Ask a person what is the meaning of the letters 'c', 'a', and 't' 
>> (presumably in that order and surrounded by
>> non-letters), and they'll tell you the meaning is the word "cat". A 
>> lexer does the same: produces
>> a meaningful output that represents the meaning of the input. 
>
> Wlihe hmuans drevie ipmpilcit udnretsnadnig lragely from the smenatcis 
> of snentcee srtcutrues, mchaines, pratciuclarly smiple lxeers, are 
> rsetirtced to rcegoniznig, but not udnretsnadnig, srtcutrue.
Whether a person "understands" that 'c' 'a' 't' "means" cat, but a lexer 
does not "understand", is a metaphysical question.
As someone once said "whether computers can think is no more interesting 
than whether submarines can swim".

>
> Yes, in a snese, it is all smenatcis.  But, in the snese of use in 
> froaml cmoptuer sceicne dsicuorse, to euqtae 'c' 'a' 't' to "cat" is 
> srtutcrue, to euqtae 'c' 'a' 't' to "feline" is smenatcis.
My point was that there's more to "meaning" than semantics...they're not 
synonymous.
You say 'c' 'a' 't' to "cat" is "structure" - please, don't introduce 
new terms in the middle of the conversation. You said before that
"cat" is "syntax". And my response is "yes, you could consider it to be 
the 'syntax' for the parser, but
it's also the output of the lexer." And I'd say the lexer is "assigning 
meaning" to it's input. So I still
think  "there is no meaning unless you have semantic analysis" is wrong.

As for "formal computer science discourse", that's not the context here. 
Clearly, most
people here are just programmer types. I love Noem Chomsky as much as 
the next guy, but right now let's
use Andrew Tanenbaum's terminology :)

From antlr at jazillian.com  Mon Mar  3 17:02:54 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 03 Mar 2008 20:02:54 -0500
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <146576.16292.qm@web55904.mail.re3.yahoo.com>
References: <146576.16292.qm@web55904.mail.re3.yahoo.com>
Message-ID: <47CC9FBE.6000804@jazillian.com>

Loring Craymer wrote:
> *As the noted logician Charles Lutwidge Dodgson wrote
> March Hare:* ?Then you should say what you mean.
> *Alice:* I do; at least - at least I mean what I say -- that's the 
> same thing, you know.
> *Hatter:* Not the same thing a bit! Why, you might just as well say 
> that, 'I see what I eat' is the same as 'I eat what I see'!
> *March Hare:* You might just as well say, that "I like what I get" is 
> the same thing as "I get what I like"!
> *The Dormouse:* You might just as well say, that "I breathe when I 
> sleep" is the same thing as "I sleep when I breathe"!
>
> The same lexer that got you 'cat' will get you 'chat'. 
And the same person that got you "A Cat is a Feline" will get you "A 
chat is a conversation".
To the lexer, "cat" is the meaning of some input.
> What meaning would you give that?
> Now suppose the sentence was "Viva la chat!".  Would your 
> interpretation change?
Not if I'm a lexer, no.
If I'm a parser, no.
If I'm a treealker, no.
In all three cases, "char" is still a word - some  output token passed 
from a lexer to a parser.

As a person, of course. We have an entirely different architecture.

This example is a good illustration of why I keep harping on each phase 
(lexer, parser, treewalker)
having it's own idea of what's valid input. And it doesn't make much 
sense to me to
refer to all these different types of input as all "syntax". Suppose we 
have two lexers (one for
ASCII only, one that handles unicode". And suppose we have two parsers, 
one for English
sentences and another for French. And we have a single treewalker that 
accepts
AST input from either parser. Most people, including compiler writers, 
would look
at a particular sentence and when asked "Is that correct syntax?", would 
give just one
answer, not five. That says to me that "syntax" means something specific 
to them, and
it doesn't mean "the form of any sort of input".
>
> Lexers understand the character syntax from which words are built, not 
> the semantics of the words.
Well, no program really "understands" syntax or semantics.
It's just software manipulating symbols.

So, I'd reword that to say lexers *accept* certain input.
Here, I think sometimes people do talk about a lexer accepting certain 
*syntax*, but more often,
they'll say it accepts a certain "set of characters" or something like that.

So, take the "understanding" parts out, and what do you have?
Any software just takes input and produces output.
I would call that process "assigning meaning". It certainly can be done 
either with or without
"semantic analysis".
>
> --Loring

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080303/d41f1939/attachment.html 

From open.zone at virgin.net  Mon Mar  3 17:58:04 2008
From: open.zone at virgin.net (Micheal J)
Date: Tue, 4 Mar 2008 01:58:04 -0000
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <47CC9FBE.6000804@jazillian.com>
References: <146576.16292.qm@web55904.mail.re3.yahoo.com>
	<47CC9FBE.6000804@jazillian.com>
Message-ID: <000701c87d9b$30936cb0$c404a8c0@marion>

I find this helpful:
    - Lexer - recognize word-level structure
    - Parser/TreeParser - recognize phrase-level structure (TreeParsers not
needed in phrase-level structure recognition for many (most?) programming
langauges)
 
All may also perform further [semantic] analysis so the whole system can
resolve context-dependent ambiguities (e.g. in the token stream
ID("start_process") LPAREN RPARENT SEMI that represents a function-call, is
"start_process" the name of a function and is the signature compatible).
 
Most such context-dependent analysis is done in the Parser/TreeParser where
there is much more context available. To recognize some languages (e.g.
C++), even the lexer is involved in resolving context-dependent ambiguities
(i.e. "is involved in semantic analysis").
 
Of course all three - lexer, parser, treeparser (particularly treeparsers) -
[can] do more than just recognize. They can also transform/translate what
they recognize...
 
Micheal
 



  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Andy Tripp
Sent: 04 March 2008 01:03
To: Loring Craymer
Cc: antlr-interest; Terence Parr
Subject: Re: [antlr-interest] "An Introduction to ANTLR" presentation slides


Loring Craymer wrote: 

As the noted logician Charles Lutwidge Dodgson wrote
March Hare: .Then you should say what you mean. 
Alice: I do; at least - at least I mean what I say -- that's the same thing,
you know.
Hatter: Not the same thing a bit! Why, you might just as well say that, 'I
see what I eat' is the same as 'I eat what I see'!
March Hare: You might just as well say, that "I like what I get" is the same
thing as "I get what I like"! 
The Dormouse: You might just as well say, that "I breathe when I sleep" is
the same thing as "I sleep when I breathe"!

The same lexer that got you 'cat' will get you 'chat'.  

And the same person that got you "A Cat is a Feline" will get you "A chat is
a conversation". 
To the lexer, "cat" is the meaning of some input.


What meaning would you give that? 


Now suppose the sentence was "Viva la chat!".  Would your interpretation
change?


Not if I'm a lexer, no.
If I'm a parser, no.
If I'm a treealker, no.
In all three cases, "char" is still a word - some  output token passed from
a lexer to a parser.

As a person, of course. We have an entirely different architecture.

This example is a good illustration of why I keep harping on each phase
(lexer, parser, treewalker)
having it's own idea of what's valid input. And it doesn't make much sense
to me to
refer to all these different types of input as all "syntax". Suppose we have
two lexers (one for
ASCII only, one that handles unicode". And suppose we have two parsers, one
for English
sentences and another for French. And we have a single treewalker that
accepts 
AST input from either parser. Most people, including compiler writers, would
look
at a particular sentence and when asked "Is that correct syntax?", would
give just one
answer, not five. That says to me that "syntax" means something specific to
them, and
it doesn't mean "the form of any sort of input".



Lexers understand the character syntax from which words are built, not the
semantics of the words.


Well, no program really "understands" syntax or semantics.
It's just software manipulating symbols.

So, I'd reword that to say lexers *accept* certain input.
Here, I think sometimes people do talk about a lexer accepting certain
*syntax*, but more often,
they'll say it accepts a certain "set of characters" or something like that.

So, take the "understanding" parts out, and what do you have? 
Any software just takes input and produces output. 
I would call that process "assigning meaning". It certainly can be done
either with or without
"semantic analysis".



--Loring



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/58b681a1/attachment-0001.html 

From gbr at newtechlaw.com  Mon Mar  3 18:37:02 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Mon, 03 Mar 2008 18:37:02 -0800
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <47CC967C.30806@jazillian.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>
	<47C6FFF0.10701@jazillian.com>
	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>
	<47C71AA9.1090908@jazillian.com>
	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>
	<47C84E2F.9050105@jazillian.com>
	<200803010308.m2138sDu016266@jazillian.com>
	<47CC2BDC.3050707@jazillian.com>
	<1204583622.47cc7cc60644e@clients.latnet.lv>
	<47CC8390.2040501@jazillian.com>
	<200803032349.m23NnoHs018299@tach.newtechlaw.com>
	<47CC967C.30806@jazillian.com>
Message-ID: <200803040245.m242j8Y9019077@tach.newtechlaw.com>

At 04:23 PM 3/3/2008, Andy Tripp wrote:
>>Yes, in a snese, it is all smenatcis.  But, in the snese of use in 
>>froaml cmoptuer sceicne dsicuorse, to euqtae 'c' 'a' 't' to "cat" 
>>is srtutcrue, to euqtae 'c' 'a' 't' to "feline" is smenatcis.
>My point was that there's more to "meaning" than semantics...they're 
>not synonymous.
>You say 'c' 'a' 't' to "cat" is "structure" - please, don't 
>introduce new terms in the middle of the conversation. You said before that
>"cat" is "syntax".

And, as I said before, syntax=structure.

>As for "formal computer science discourse", that's not the context 
>here. Clearly, most
>people here are just programmer types. I love Noem Chomsky as much 
>as the next guy, but right now let's
>use Andrew Tanenbaum's terminology :)

Rather ironic that you invoke Andy, an intellectually respected 
professor of computer science, architect of an OS most notable for 
its academic purity and intended precisely for the teaching of the 
formal computer sciences.

Anyway, without any touchstone, your system of terminology is just as 
valid and just as wrong as all others.  And, as Loring pointed out, 
just as useful as arguing down a rabbit hole.

Once we agree to use a touchstone, to establish a grounded system, we 
can begin to evaluate which terminology is more correct, where 
correctness is gauged on conceptual expressiveness.  History -- 
formal computer science discourse -- gives one, though I grant you 
that it inherently bears little weight in determining what should 
necessarily be considered correct going forward.  Still, the evolved 
and refined definitions from the language and computer sciences 
present a very broad, rational and substantive basis for conceptual 
expression.

A system of terminology arising from a casual, subjective 
interpretation of what words mean --where lexers produce meaning, 
meaning is in some way more that just semantics, and syntax is only 
the literal, concrete input elements -- would NEVER work.

Ok, it MIGHT work.

Actually, COULD work and nicely at that, too, since that is probably 
how the existing formal language/computer science definitions began 
some 50 or 100 or more years ago.  Should just take you a good solid 
decade or so to evolve and refine new definitions to a point where we 
can begin gauging relative conceptual expressiveness.

Compelling use cases where the existing, archaic definitions are 
objectively insufficient to express a particularly valued concept 
would be helpful.

Best,
Gerald



From antlr at mirality.co.nz  Tue Mar  4 01:55:14 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 04 Mar 2008 22:55:14 +1300
Subject: [antlr-interest] Fwd: A couple of questions for lexing strategy.
In-Reply-To: <c8c997f40803031034k3c2687d0tdcd532e304ce9c82@mail.gmail.co
 m>
References: <4ff3ab470802291859i4b42c431s17718adccc82d31d@mail.gmail.com>
	<4ff3ab470802291919s22d08193p78c8d5c0e9a57492@mail.gmail.com>
	<c8c997f40803031034k3c2687d0tdcd532e304ce9c82@mail.gmail.com>
Message-ID: <20080304095535.A789D11EC93@www.antlr.org>

At 07:34 4/03/2008, Darien Hager wrote:
>At least when using ANTLRworks a file called grammarname.tokens 
>is created with each line containing a token-text to ID mapping. 
>This file is AFAIK only for your convenience, nothing relies on 
>it.

It's ANTLR itself that produces it, and it's not quite true that 
nothing relies on it.  If you have a separated lexer and parser 
then the .tokens file is an output of the lexer and an input of 
the parser (via the tokenVocab option), since both lexer and 
parser need to agree on a common set of tokens.  (I think it's 
used internally in a similar fashion even when building a combined 
lexer/parser.)

I believe it can also be an output of the parser and input for a 
tree parser, since the parser can introduce new imaginary tokens 
for use in the AST.  But I've never actually used a tree parser 
myself, so I'm not completely sure about that :)

>As a non-lawyer, I don't think that's a major problem--you don't 
>need to be of legal age to begin making a runtime port or other 
>software project... you just have to be of a legal age or have 
>help before you make any contractual agreement stuff. (You know, 
>like licensing your work or something.)

Well, there *is* licensing involved in contributing to ANTLR; I'm 
simplifying but basically you have to agree that the code you've 
written can be freely distributed and modified by other people. 


From antlr at mirality.co.nz  Tue Mar  4 02:04:52 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 04 Mar 2008 23:04:52 +1300
Subject: [antlr-interest] Bug or badly written error case
In-Reply-To: <BAYC1-PASMTP02F6386E22A14640EF1B34F5100@CEZ.ICE>
References: <785879.87554.qm@web55905.mail.re3.yahoo.com>
	<BAYC1-PASMTP02F6386E22A14640EF1B34F5100@CEZ.ICE>
Message-ID: <20080304100514.AA6AA11EAFB@www.antlr.org>

At 13:01 4/03/2008, Benjamin Shropshire wrote:
 >I understand that there is an error in my code (and am not 
asking
 >for help in fixing it as I already have), the issue I want to
 >bring up is that the symptoms that my error caused are of no 
help
 >what so ever in finding my error.  For the info that antlr gives 

 >to be useful, the user would need a understanding of the 
internals
 >of antle. I think this is a problem and should be addressed.

It is a known issue that error reporting in ANTLR itself (ie. 
problems in the grammar, not in the generated code) is suboptimal, 
and even entirely useless at times.

This has been previously stated as being due to ANTLR still using 
v2 internally, so it's supposed to get better once it's been 
ported to v3.


From alexander at gaengel.de  Tue Mar  4 02:05:33 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Tue, 04 Mar 2008 11:05:33 +0100
Subject: [antlr-interest] AntlrWorks with Antlr 3.1 Intermediate builds
Message-ID: <47CD1EED.2050701@gaengel.de>

I try to get AntlrWorks with Antlr 3.1 Intermediate builds to work.

But even when I put in the Classpath in Preferences 
(D:\Diplomarbeit\libs\antlr-2008-02-15.10.jar;D:\Diplomarbeit\libs\antlr-2.7.7.jar;D:/Diplomarbeit/libs/stringtemplate-3.0.jar) 
Antlrworks still it uses Antlr 3.0.1 from Antlrworks 1.17 (I can Tell 
cause I geht an code too large Error with 3.0.1 but 3.1 works)

Thanks
Alexander



From antlr at mirality.co.nz  Tue Mar  4 02:14:38 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 04 Mar 2008 23:14:38 +1300
Subject: [antlr-interest] AntlrWorks with Antlr 3.1 Intermediate builds
In-Reply-To: <47CD1EED.2050701@gaengel.de>
References: <47CD1EED.2050701@gaengel.de>
Message-ID: <20080304101450.EA72E11ECF5@www.antlr.org>

At 23:05 4/03/2008, Alexander G?ngel wrote:
 >I try to get AntlrWorks with Antlr 3.1 Intermediate builds to
 >work.
 >
 >But even when I put in the Classpath in Preferences
 >(D:\Diplomarbeit\libs\antlr-2008-02-15.10.jar;D:\Diplomarbeit\libs\
 >antlr-2.7.7.jar;D:/Diplomarbeit/libs/stringtemplate-3.0.jar)
 >Antlrworks still it uses Antlr 3.0.1 from 
Antlrworks 1.17 (I can
 >Tell cause I geht an code too large Error with 
3.0.1 but 3.1 works)

AntlrWorks contains a copy of ANTLR and 
StringTemplate internally, so it doesn't need 
anything on the classpath at all.

If you want to change it to use a different 
version, then you'll need to unpack all the jars, 
replace the files with those from the newer 
version, then repack the AntlrWorks jar again.


From alexander at gaengel.de  Tue Mar  4 02:50:01 2008
From: alexander at gaengel.de (=?ISO-8859-1?Q?Alexander_G=E4ngel?=)
Date: Tue, 04 Mar 2008 11:50:01 +0100
Subject: [antlr-interest] AntlrWorks with Antlr 3.1 Intermediate builds
In-Reply-To: <Z01797k24A8Wnp.RZmta@mi-ob.rzone.de>
References: <47CD1EED.2050701@gaengel.de> <Z01797k24A8Wnp.RZmta@mi-ob.rzone.de>
Message-ID: <47CD2959.3000504@gaengel.de>

Ok I tried this but not I get the Error:

    Exception in thread "class
    org.antlr.works.visualization.VisualDrawing"
    java.lang.NoSuchMethodError: org.antlr.tool.Grammar.createNFAs()V
            at
    org.antlr.works.grammar.EngineGrammar.createParserGrammar(Unknown
    Source)
            at
    org.antlr.works.grammar.EngineGrammar.createCombinedGrammar(Unknown
    Source)
            at
    org.antlr.works.grammar.EngineGrammar.createGrammars(Unknown Source)
            at
    org.antlr.works.visualization.VisualDrawing.threadProcessText(Unknown
    Source)
            at
    org.antlr.works.visualization.VisualDrawing.threadRun(Unknown Source)
            at org.antlr.works.ate.syntax.misc.ATEThread.run(Unknown Source)
            at java.lang.Thread.run(Unknown Source)

Alexander
Gavin Lambert schrieb:
> At 23:05 4/03/2008, Alexander G?ngel wrote:
> >I try to get AntlrWorks with Antlr 3.1 Intermediate builds to
> >work.
> >
> >But even when I put in the Classpath in Preferences
> >(D:\Diplomarbeit\libs\antlr-2008-02-15.10.jar;D:\Diplomarbeit\libs\
> >antlr-2.7.7.jar;D:/Diplomarbeit/libs/stringtemplate-3.0.jar)
> >Antlrworks still it uses Antlr 3.0.1 from Antlrworks 1.17 (I can
> >Tell cause I geht an code too large Error with 3.0.1 but 3.1 works)
>
> AntlrWorks contains a copy of ANTLR and StringTemplate internally, so 
> it doesn't need anything on the classpath at all.
>
> If you want to change it to use a different version, then you'll need 
> to unpack all the jars, replace the files with those from the newer 
> version, then repack the AntlrWorks jar again.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/bdc1ca04/attachment.html 

From info at wolfram-bernhardt.de  Tue Mar  4 04:19:57 2008
From: info at wolfram-bernhardt.de (Wolfram Bernhardt)
Date: Tue, 04 Mar 2008 13:19:57 +0100
Subject: [antlr-interest] Antlr 3.0.1 code-generation and
	.NET-runtime-libraries
Message-ID: <47CD3E6D.1050003@wolfram-bernhardt.de>

Hi!

I really like antlr and I appreciate a lot what everyone is doing here. 
That work is amazing!!

But unfortunately I cant' get get a generated parser/lex to work with .NET.

I'm using antlrworks 1.1.7. and built the .NET-runtime-.dll myself, 
since I couldn't find them here http://www.antlr.org/download.html.
I used the source from fisheye (date 2007-10-02).

I tried to compile the generated parser and lexer of the 
SimpleCalc-example and a couple of errors occur.
In the lexer part there are no definitions for .type and channel.
In the parser part there are no definitions for ErrorRecovery and 
followingStackPointer.

Did I miss an update?



Greetings,
    Wolfram

-- 
Wolfram Bernhardt
 IT-Consulting

D?sseldorf
Tel.   : +49 177 - 7 98 58 12
Email  : info at wolfram-bernhardt.de
         www.wolfram-bernhardt.de
         www.ticklishtechs.net
         www.arisan.de
         

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/d6362266/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 250 bytes
Desc: OpenPGP digital signature
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/d6362266/attachment.bin 

From jaluber at gmx.de  Tue Mar  4 05:33:29 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 04 Mar 2008 14:33:29 +0100
Subject: [antlr-interest] Antlr 3.0.1 code-generation
	and	.NET-runtime-libraries
In-Reply-To: <47CD3E6D.1050003@wolfram-bernhardt.de>
References: <47CD3E6D.1050003@wolfram-bernhardt.de>
Message-ID: <47CD4FA9.60600@gmx.de>

Wolfram Bernhardt schrieb:
> Hi!
> 
> I really like antlr and I appreciate a lot what everyone is doing here. 
> That work is amazing!!
> 
> But unfortunately I cant' get get a generated parser/lex to work with .NET.
> 
> I'm using antlrworks 1.1.7. and built the .NET-runtime-.dll myself, 
> since I couldn't find them here http://www.antlr.org/download.html.
> I used the source from fisheye (date 2007-10-02).
> 
> I tried to compile the generated parser and lexer of the 
> SimpleCalc-example and a couple of errors occur.
> In the lexer part there are no definitions for .type and channel.
> In the parser part there are no definitions for ErrorRecovery and 
> followingStackPointer.
> 
> Did I miss an update?

The fisheye-sources are ANTLR-3.1 beta and incompatible to previous 
3.0.x versions. But the assembly-DLLs have to be included in the 
3.0.1-jar. Look into the runtime directory.

Johannes

From antlr at jazillian.com  Tue Mar  4 07:43:17 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 04 Mar 2008 10:43:17 -0500
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <200803040245.m242j8Y9019077@tach.newtechlaw.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>	<47C6FFF0.10701@jazillian.com>	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>	<47C71AA9.1090908@jazillian.com>	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>	<47C84E2F.9050105@jazillian.com>	<200803010308.m2138sDu016266@jazillian.com>	<47CC2BDC.3050707@jazillian.com>	<1204583622.47cc7cc60644e@clients.latnet.lv>	<47CC8390.2040501@jazillian.com>	<200803032349.m23NnoHs018299@tach.newtechlaw.com>	<47CC967C.30806@jazillian.com>
	<200803040245.m242j8Y9019077@tach.newtechlaw.com>
Message-ID: <47CD6E15.6090200@jazillian.com>

Gerald B. Rosenberg wrote:
> At 04:23 PM 3/3/2008, Andy Tripp wrote:
>>> Yes, in a snese, it is all smenatcis.  But, in the snese of use in 
>>> froaml cmoptuer sceicne dsicuorse, to euqtae 'c' 'a' 't' to "cat" is 
>>> srtutcrue, to euqtae 'c' 'a' 't' to "feline" is smenatcis.
>> My point was that there's more to "meaning" than semantics...they're 
>> not synonymous.
>> You say 'c' 'a' 't' to "cat" is "structure" - please, don't introduce 
>> new terms in the middle of the conversation. You said before that
>> "cat" is "syntax".
>
> And, as I said before, syntax=structure.
>
>> As for "formal computer science discourse", that's not the context 
>> here. Clearly, most
>> people here are just programmer types. I love Noem Chomsky as much as 
>> the next guy, but right now let's
>> use Andrew Tanenbaum's terminology :)
>
> Rather ironic that you invoke Andy, an intellectually respected 
> professor of computer science, architect of an OS most notable for its 
> academic purity and intended precisely for the teaching of the formal 
> computer sciences.
He may be the architect of an OS (minix) that's notable for purity, but 
more important is that he himself is most notable as an author of 
compiler books.
>
> Anyway, without any touchstone, your system of terminology is just as 
> valid and just as wrong as all others.  And, as Loring pointed out, 
> just as useful as arguing down a rabbit hole.
The point of terminology is to help convey ideas. It doesn't matter that 
no terminology is perfect. It does
matter that some terminologies are better at getting the point across. 
I'm not arguing about something
abstract and theoretical, I'm arguing that the "syntactic predicate" 
terminology could be better.
"Better" not meaning "more valid", of course, but meaning "better at 
conveying to ANTLR users
what it's used for".
>
> Once we agree to use a touchstone, to establish a grounded system, we 
> can begin to evaluate which terminology is more correct, where 
> correctness is gauged on conceptual expressiveness.  History -- formal 
> computer science discourse -- gives one, though I grant you that it 
> inherently bears little weight in determining what should necessarily 
> be considered correct going forward.  Still, the evolved and refined 
> definitions from the language and computer sciences present a very 
> broad, rational and substantive basis for conceptual expression.
>
> A system of terminology arising from a casual, subjective 
> interpretation of what words mean --where lexers produce meaning, 
> meaning is in some way more that just semantics, and syntax is only 
> the literal, concrete input elements -- would NEVER work.
>
> Ok, it MIGHT work.
It DOES work. That's how any compiler textbook works and how any normal 
conversation
among programmers works. You use some common terminology, stick with it, 
and hope to rarely get into
these long abstract discussions like this one.

I DO object to you saying "syntax==structure" and then starting to say 
"structure" instead of syntax.
Yes, that's perfectly valid in theory. In practice, though, it's 
obscuring things, as we're discussing the
term "syntax" itself.

I know that no terminology is perfect, so why do people keep going down 
this deep rabbit hole of what exactly "syntax" means?
In the end, it doesn't matter that it actually, deep down, means "the 
form of ANY input".
What matters is that people who use ANTLR typically use "syntax" to mean 
"form OF THE (initial) INPUT".
(At least the people who write software rather than participate in these 
abstract debates).
>
> Actually, COULD work and nicely at that, too, since that is probably 
> how the existing formal language/computer science definitions began 
> some 50 or 100 or more years ago.  Should just take you a good solid 
> decade or so to evolve and refine new definitions to a point where we 
> can begin gauging relative conceptual expressiveness.
That all sounds so...highminded.
Maybe you should be a lawyer ;)
>
> Compelling use cases where the existing, archaic definitions are 
> objectively insufficient to express a particularly valued concept 
> would be helpful.
Translation: "When does the theoretical meaning of 'syntax' fall short".
Answer: When you use it, in the context of people using a compiler tool, 
to mean more than "the form of the input language".
>
>
> Best,
> Gerald
>
>


From ralf_c at web.de  Tue Mar  4 08:10:27 2008
From: ralf_c at web.de (Ralf Cremerius)
Date: Tue, 04 Mar 2008 17:10:27 +0100
Subject: [antlr-interest] =?iso-8859-15?q?=5Bv3=2E1b1=3A=5D__Is_unparsing_?=
 =?iso-8859-15?q?to_textual_representation_of_rewritten_AST_possible=3F?=
Message-ID: <66467023@web.de>

Hello,

I'd like to ask, if it is possible to generate an AST, to modify that AST and to automatically unparse that modified AST to it's textual representation afterwards? I thought of something like this:

( textual input ) -> ANTLR lexer+parser grammar constructing AST -> ( AST ) -> ANTLR tree grammar rewriting AST (using v3.1b1 ...) -> ANTLR tree grammar with options output=template and rewrite=true -> (modifiet textual input [according to operations on the AST])

My question is only about the last step, if unparsing from an AST to modified input is possible. Or do I have to define a StringTemplate-template to get the modifications from the rewritten AST into textual output again?

Thanks in advance,
  Ralf
_____________________________________________________________________
Unbegrenzter Speicherplatz f?r Ihr E-Mail Postfach? Jetzt aktivieren!
http://freemail.web.de/club/landingpage.htm/?mc=025555


From antlr at jazillian.com  Tue Mar  4 08:39:10 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 04 Mar 2008 11:39:10 -0500
Subject: [antlr-interest] [v3.1b1:] Is unparsing to textual
 representation of rewritten AST possible?
In-Reply-To: <66467023@web.de>
References: <66467023@web.de>
Message-ID: <47CD7B2E.1000807@jazillian.com>

Ralf,
Sounds like you're just looking for a "prettyprinter" which prints the 
AST out, looking roughly
like the original input. Yes, you can use an ANTLR treewalker and ST to 
do that.
Or you can do it "by hand". See 
http://www.antlr2.org/article/1170602723163/treewalkers.html
for a comparison of the two approaches.

Andy

Ralf Cremerius wrote:
> Hello,
>
> I'd like to ask, if it is possible to generate an AST, to modify that AST and to automatically unparse that modified AST to it's textual representation afterwards? I thought of something like this:
>
> ( textual input ) -> ANTLR lexer+parser grammar constructing AST -> ( AST ) -> ANTLR tree grammar rewriting AST (using v3.1b1 ...) -> ANTLR tree grammar with options output=template and rewrite=true -> (modifiet textual input [according to operations on the AST])
>
> My question is only about the last step, if unparsing from an AST to modified input is possible. Or do I have to define a StringTemplate-template to get the modifications from the rewritten AST into textual output again?
>
> Thanks in advance,
>   Ralf
> _____________________________________________________________________
> Unbegrenzter Speicherplatz f?r Ihr E-Mail Postfach? Jetzt aktivieren!
> http://freemail.web.de/club/landingpage.htm/?mc=025555
>
>
>   


From darien.hager at etelos-inc.com  Tue Mar  4 09:53:46 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Tue, 4 Mar 2008 09:53:46 -0800
Subject: [antlr-interest] Fwd: A couple of questions for lexing strategy.
In-Reply-To: <47cd1c9e.0c07560a.6f06.7225SMTPIN_ADDED@mx.google.com>
References: <4ff3ab470802291859i4b42c431s17718adccc82d31d@mail.gmail.com>
	<4ff3ab470802291919s22d08193p78c8d5c0e9a57492@mail.gmail.com>
	<c8c997f40803031034k3c2687d0tdcd532e304ce9c82@mail.gmail.com>
	<47cd1c9e.0c07560a.6f06.7225SMTPIN_ADDED@mx.google.com>
Message-ID: <c8c997f40803040953x1a3299c0u6f26138e07364737@mail.gmail.com>

On 3/4/08, Gavin Lambert <antlr at mirality.co.nz> wrote:
>
>
>
> Well, there *is* licensing involved in contributing to ANTLR; I'm
> simplifying but basically you have to agree that the code you've
> written can be freely distributed and modified by other people.
>
> Surely he'll be 18 by the time the new runtime is that far along :P


-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/28d9952c/attachment.html 

From corellian.c at gmail.com  Tue Mar  4 10:02:14 2008
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Tue, 4 Mar 2008 19:02:14 +0100
Subject: [antlr-interest]  [ST] Difference between <foo> and $foo$
Message-ID: <4222E186-FC3A-461B-B8B9-A565F5A0B552@gmail.com>

Hi,

I've found that in some places is used <foo> and in some others $foo$  
is used, let's see an example:

xmlheader(v,e) ::= <<
\<?xml version="<v>" encoding="<e>" ?\>
 >>

and now the other way:

xmlheader(v,e) ::= <<
\<?xml version="$v$" encoding="$e$" ?\>
 >>

So what's the difference? for what it is used each form?

Regards,

Cris.

-- 
GPG Key-ID: 0x564903FA - Jabber ID: corellian at swissjabber.ch


From aheller at gmx.at  Tue Mar  4 10:22:27 2008
From: aheller at gmx.at (Arnulf Heller)
Date: Tue, 04 Mar 2008 19:22:27 +0100
Subject: [antlr-interest] [ST] Difference between <foo> and $foo$
In-Reply-To: <4222E186-FC3A-461B-B8B9-A565F5A0B552@gmail.com>
References: <4222E186-FC3A-461B-B8B9-A565F5A0B552@gmail.com>
Message-ID: <20080304182228.ZORX26776.viefep19-int.chello.at@schnuftikus.gmx.at>

the delimiter is your choice and depends on the needs of your target language

XML for instance makes heavy use of angle brackets; that's why angle 
brackets are no good idea to separate string template code from the 
target language.

see the difference between
http://www.stringtemplate.org/doc/api/org/antlr/stringtemplate/language/AngleBracketTemplateLexer.html
and
http://www.stringtemplate.org/doc/api/org/antlr/stringtemplate/language/DefaultTemplateLexer.html


At 19:02 04.03.2008, Cristian Peraferrer wrote:
>Hi,
>
>I've found that in some places is used <foo> and in some others $foo$
>is used, let's see an example:
>
>xmlheader(v,e) ::= <<
>\<?xml version="<v>" encoding="<e>" ?\>
> >>
>
>and now the other way:
>
>xmlheader(v,e) ::= <<
>\<?xml version="$v$" encoding="$e$" ?\>
> >>
>
>So what's the difference? for what it is used each form?
>
>Regards,
>
>Cris.
>
>--
>GPG Key-ID: 0x564903FA - Jabber ID: corellian at swissjabber.ch


From open.zone at virgin.net  Tue Mar  4 11:32:07 2008
From: open.zone at virgin.net (Micheal J)
Date: Tue, 4 Mar 2008 19:32:07 -0000
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <47CD6E15.6090200@jazillian.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>	<47C6FFF0.10701@jazillian.com>	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>	<47C71AA9.1090908@jazillian.com>	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>	<47C84E2F.9050105@jazillian.com>	<200803010308.m2138sDu016266@jazillian.com>	<47CC2BDC.3050707@jazillian.com>	<1204583622.47cc7cc60644e@clients.latnet.lv>	<47CC8390.2040501@jazillian.com>	<200803032349.m23NnoHs018299@tach.newtechlaw.com>	<47CC967C.30806@jazillian.com><200803040245.m242j8Y9019077@tach.newtechlaw.com>
	<47CD6E15.6090200@jazillian.com>
Message-ID: <002301c87e2e$7014b5e0$c404a8c0@marion>

Hi,
 
> The point of terminology is to help convey ideas. It doesn't 
> matter that no terminology is perfect. It does matter that 
> some terminologies are better at getting the point across. 
> I'm not arguing about something
> abstract and theoretical, I'm arguing that the "syntactic predicate" 
> terminology could be better.
> "Better" not meaning "more valid", of course, but meaning 
> "better at conveying to ANTLR users what it's used for".

Following on from my previous post:

Syntactic predicates: 
  - Used to check the syntax independent of context.
  OR
  - Used to check the "form of the input" independent of context.
  OR
  - Used to check the "word- and phrase-level structure of the input"
independent of context.
  OR
  - Used to check the "word-level and phrase-level structure of the input
(be it a character stream or a word/token stream)" independent of context.

Semantic predicates: Used to check/resolve context-depenendent ambiguities.

The precise mechanism used to implement either isn't particularly
interesting from the PoV of trying to understand what they are used for.

> I DO object to you saying "syntax==structure" and then 
> starting to say "structure" instead of syntax.
> Yes, that's perfectly valid in theory. In practice, though, 
> it's obscuring things, as we're discussing the term "syntax" itself.

In our domain, "syntax" is concerned with [rules that define] the structure
of valid strings (words and phrases) in a language over some alphabet. Using
syntax and structure interchangably isn't particularly odious.

> I know that no terminology is perfect, so why do people keep 
> going down this deep rabbit hole of what exactly "syntax" means?
> In the end, it doesn't matter that it actually, deep down, 
> means "the form of ANY input".
> What matters is that people who use ANTLR typically use 
> "syntax" to mean "form OF THE (initial) INPUT".
> (At least the people who write software rather than 
> participate in these abstract debates).

Agreed. Structure of the input. As defined by our language and it's
alphabet. As fed to our recognizers - lexers, parsers and treeparsers.

We don't typically (at least most here don't seem to) restrict our use of
the word "syntax" to describe just lexer (or parser) input. As mentioned
previously, the [expanded form of the] name for TreeParser input (AST) has
the word "syntax" in it. 


Micheal


From felix_do at web.de  Tue Mar  4 11:46:11 2008
From: felix_do at web.de (Felix Dorner)
Date: Tue, 04 Mar 2008 20:46:11 +0100
Subject: [antlr-interest] The audio lecture notes
Message-ID: <47CDA703.5060508@web.de>

Hey,

on the antlr.org website there is a link titled

"Programming language course lecture notes/audio" which links to a 
University Course. I wasn't able to find audio files there. Are there 
any? Would be great!

Felix

From gbr at newtechlaw.com  Tue Mar  4 11:54:57 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Tue, 04 Mar 2008 11:54:57 -0800
Subject: [antlr-interest] "An Introduction to ANTLR" presentation slides
In-Reply-To: <47CD6E15.6090200@jazillian.com>
References: <94421.74197.qm@web55114.mail.re4.yahoo.com>
	<47C6FFF0.10701@jazillian.com>
	<26FD02BA-4E91-4A56-B637-48053590E6ED@cs.usfca.edu>
	<47C71AA9.1090908@jazillian.com>
	<B5F361EF-D691-495B-8111-6063115EAC4B@cs.usfca.edu>
	<47C84E2F.9050105@jazillian.com>
	<200803010308.m2138sDu016266@jazillian.com>
	<47CC2BDC.3050707@jazillian.com>
	<1204583622.47cc7cc60644e@clients.latnet.lv>
	<47CC8390.2040501@jazillian.com>
	<200803032349.m23NnoHs018299@tach.newtechlaw.com>
	<47CC967C.30806@jazillian.com>
	<200803040245.m242j8Y9019077@tach.newtechlaw.com>
	<47CD6E15.6090200@jazillian.com>
Message-ID: <200803041956.m24JurHb025526@tach.newtechlaw.com>

At 07:43 AM 3/4/2008, Andy Tripp wrote:
>I know that no terminology is perfect, so why do people keep going 
>down this deep rabbit hole of what exactly "syntax" means?
>In the end, it doesn't matter that it actually, deep down, means 
>"the form of ANY input".
>What matters is that people who use ANTLR typically use "syntax" to 
>mean "form OF THE (initial) INPUT".

Very well summed: those last two statements are either absolutely 
right or absolutely wrong.  And, in every possible sense, from 
intellectual to gut, right is wrong.

>That all sounds so...highminded.
>Maybe you should be a lawyer ;)

JD, BSEE, and author of three custom software packages that rely on Antlr ;) 


From parrt at cs.usfca.edu  Tue Mar  4 12:22:27 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Mar 2008 12:22:27 -0800
Subject: [antlr-interest] The audio lecture notes
In-Reply-To: <47CDA703.5060508@web.de>
References: <47CDA703.5060508@web.de>
Message-ID: <E033182F-8300-40CC-955B-A8876F757282@cs.usfca.edu>

added to my todo list. they are for old old lectures though.
Ter
On Mar 4, 2008, at 11:46 AM, Felix Dorner wrote:

> Hey,
>
> on the antlr.org website there is a link titled
>
> "Programming language course lecture notes/audio" which links to a  
> University Course. I wasn't able to find audio files there. Are  
> there any? Would be great!
>
> Felix


From parrt at cs.usfca.edu  Tue Mar  4 12:42:26 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Mar 2008 12:42:26 -0800
Subject: [antlr-interest] ST C# 3.1beta released
Message-ID: <A71FBA4A-D860-41CF-BF54-AB6FC1D09063@cs.usfca.edu>

Enjoy :)

http://www.stringtemplate.org/download.html

Thanks to Kunle and Michael.

Ter

From r.mark.volkmann at gmail.com  Tue Mar  4 13:00:11 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 4 Mar 2008 15:00:11 -0600
Subject: [antlr-interest] intermediate builds web page
Message-ID: <f0fcc6820803041300o4c03dd00x295db4f7c87c2665@mail.gmail.com>

I've often wondered why the web page for downloading intermediate
builds list them in a seemingly random order. I'm referring to
http://www.antlr.org/download/build/. Why isn't the latest at the top
or bottom of the list?

-- 
R. Mark Volkmann
Object Computing, Inc.

From nelson.ana at gmail.com  Tue Mar  4 13:12:12 2008
From: nelson.ana at gmail.com (Ana Nelson)
Date: Tue, 4 Mar 2008 21:12:12 +0000
Subject: [antlr-interest] intermediate builds web page
In-Reply-To: <f0fcc6820803041300o4c03dd00x295db4f7c87c2665@mail.gmail.com>
References: <f0fcc6820803041300o4c03dd00x295db4f7c87c2665@mail.gmail.com>
Message-ID: <a7d6d2740803041312t13a73948vae588abf0be969ff@mail.gmail.com>

I don't know why but here's my workaround (I was bored):

latest=`curl http://www.antlr.org/download/build/ | egrep -o
'antlr-[0-9\.-]*.tar.gz' | sort | tail -n1`
echo "about to download $latest"
curl -O http://www.antlr.org/download/build/$latest

Maybe someone can get that down to 1 line with xargs or something. :-)



On 04/03/2008, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
>
> I've often wondered why the web page for downloading intermediate
> builds list them in a seemingly random order. I'm referring to
> http://www.antlr.org/download/build/. Why isn't the latest at the top
> or bottom of the list?
>
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/c264d4a8/attachment.html 

From gudnabrsam at yahoo.com  Tue Mar  4 14:05:01 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Tue, 4 Mar 2008 14:05:01 -0800 (PST)
Subject: [antlr-interest] lexer woes
In-Reply-To: <602628.37987.qm@web55111.mail.re4.yahoo.com>
Message-ID: <129733.16392.qm@web55109.mail.re4.yahoo.com>

Lest my other questions be lost in the noise, I am
still confused as to:

1) Whether backtracking mode is supported for lexers,
and
2) How to specify lexer options (particularly "global"
k) in a combined grammar.

-Matt

--- Matt Benson <gudnabrsam at yahoo.com> wrote:

> 
> --- Loring Craymer <lgcraymer at yahoo.com> wrote:
> 
> > This one's easy--unfortunately.  Ter does not yet
> > use FOLLOW sets in the lexer, and that tends to
> > cause havoc with your nicely factored grammar. 
> > Also, you have gone overboard on using fragment
> > rules where they are not particularly appropriate
> > (all of your conmments, for example).
> > 
> > Can comments really be turned into tokens if
> > followed by odd characters?  This seems really
> > strange.
> > 
> 
> No, that wasn't my intention.  Ugh, I had my comment
> rules factored out properly but kept getting told
> they
> were unreachable, despite my awareness of
> order-of-rules issues, etc.  However, I just changed
> my default k back to 2, put SL_COMMENT and
> ML_COMMENT
> before Token, and now it seems the Tool wants to
> disable Token for // and /* as is proper.  Not sure
> why I couldn't get it working before but that
> problem
> appears to be solved.  That said I guess I should
> keep
> playing around for awhile here...
> 
> > Anyway, I would suggest factoring out a comment
> rule
> > and either inline most of the fragments or wait
> > until Ter adds in FOLLOW set usage.
> > 
> 
> Is that in the plan?  I don't pretend to understand
> the whole follow set thing, but Google tells me it
> has
> lots of stuff for me to read and I'm still working
> my
> way through the Dragon book which I imagine probably
> contains some relevant info as well.
> 
> Thanks, Loring.
> 
> > --Loring
> > 
> > ----- Original Message ----
> > > From: Matt Benson <gudnabrsam at yahoo.com>
> > > To: Antlr List <antlr-interest at antlr.org>
> > > Sent: Monday, March 3, 2008 12:53:54 PM
> > > Subject: [antlr-interest] lexer woes
> > > 
> > > I am working on a language with a fairly loose
> > lexing
> > > scheme.  I am running into all sorts of problems
> > > specifying my lexer:  in particular I can't find
> > any
> > > evidence that backtracking works for lexer
> > grammars. 
> > > I tend to get NPEs building the NFAs when
> > combining
> > > synpreds, lexer grammars, and backtracking=true,
> > > whether I use ANTLR 3.0.1 or a fairly recent 3.1
> > > build.  I have had to use a strategy whereby any
> > > possibly confusing tokens are generated from a
> > single
> > > lexer rule.  I'll include my current lexer
> grammar
> > > that passes Tool generation; if anyone has the
> > > time/inclination/interest to offer ideas how I
> > could
> > > have done things more cleanly I'd be glad to
> hear
> > > about it.
> > > 
> > > Thanks (or not),
> > > Matt
> > > 
> > > lexer grammar Loose;
> > > options {k=1;}
> > > tokens { Identifier; SEMI; SL_COMMENT;
> > ML_COMMENT;}
> > > 
> > > EQUALS    :    '=';
> > > 
> > > StringLiteral
> > >     :    '"' ( EscapeSequence | ~('\\'|'"') )*
> '"'
> > >     ;
> > > 
> > > fragment
> > > EscapeSequence
> > >     :    '\\'
> > >         (   
> ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
> > >         |    Unicode
> > >         |    Octal
> > >         )
> > >     ;
> > > 
> > > fragment
> > > Octal
> > > options {k=3;}
> > >     :   ('0'..'3') ('0'..'7') ('0'..'7')
> > >     |    ('0'..'7') ('0'..'7')?
> > >     ;
> > > 
> > > fragment
> > > Unicode
> > >     :    'u' HexDigit HexDigit HexDigit HexDigit
> > >     ;
> > > 
> > > fragment
> > > HexDigit
> > >     :    ('0'..'9'|'a'..'f'|'A'..'F')
> > >     ;
> > > 
> > > WS    :    (WsChar)+ {$channel=HIDDEN;}
> > >     ;
> > > 
> > > fragment
> > > WsChar
> > >     :    ' '|'\r'|'\t'|'\u000C'|'\n'
> > >     ;
> > > 
> > > Token
> > >     :    (';' WsChar)=>';' {$type=SEMI;}
> > >     |    ('//')=>LineComment {$type=SL_COMMENT;}
> > >     |    ('/*')=>Comment {$type=ML_COMMENT;}
> > >     |    (TokenMark)=>TokenTail {$type=Token;}
> > >     |    (    (Letter)=>Ident
> {$type=Identifier;}
> > >         |    IDDigit (Letter|IDDigit)*
> > >         )
> > >         //the presence of a token tail overrides
> > any
> > > previously assigned token type:
> > >         (TokenTail {$type=Token;})?
> > >     ;
> > > 
> > > fragment
> > > LineComment
> > >     :    '//' ~('\n'|'\r')* '\r'? '\n'
> > {$channel=HIDDEN;}
> > >     ;
> > > 
> > > fragment
> > > Comment
> > >     :    '/*' ( options {greedy=false;} : . )*
> > '*/'
> > > {$channel=HIDDEN;}
> > >     ;
> > > 
> > > fragment
> > > TokenTail
> > >     :    TokenMark+ ((Letter|IDDigit)+
> > TokenTail?)?
> > >     ;
> > > 
> > > fragment
> > > TokenMark
> > > options {k=2;}
> > >     :    EscapeSequence
> > >     |    (';' ~(WsChar))=>';'//do not accept
> > semicolon if
> > > followed by WS
> > >     |   
> > ~(Letter|IDDigit|WsChar|';'|'"'|EQUALS|'/')
> > >     |    ('/' ~('/'|'*'))=>'/'//do not accept
> '/'
> > if LA
> > > finds an upcoming SL/ML comment
> > >     ;
> > > 
> > > fragment
> > > Ident
> > >     :    Letter (Letter|IDDigit)*
> > >     ;
> > > 
> > > fragment
> > > Letter
> > >     :    '\u0024'
> > >     |    '\u0041'..'\u005a'
> > >     |    '\u005f'
> > >     |    '\u0061'..'\u007a'
> > >     |    '\u00c0'..'\u00d6'
> > >     |    '\u00d8'..'\u00f6'
> > >     |    '\u00f8'..'\u00ff'
> > >     |    '\u0100'..'\u1fff'
> > >     |    '\u3040'..'\u318f'
> > >     |    '\u3300'..'\u337f'
> > >     |    '\u3400'..'\u3d2d'
> > >     |    '\u4e00'..'\u9fff'
> > >     |    '\uf900'..'\ufaff'
> > >     ;
> > > 
> > > fragment
> > > IDDigit
> > >     :    '\u0030'..'\u0039'
> > >     |    '\u0660'..'\u0669'
> > >     |    '\u06f0'..'\u06f9'
> > >     |    '\u0966'..'\u096f'
> > >     |    '\u09e6'..'\u09ef'
> > >     |    '\u0a66'..'\u0a6f'
> > >     |    '\u0ae6'..'\u0aef'
> > >     |    '\u0b66'..'\u0b6f'
> > >     |    '\u0be7'..'\u0bef'
> > >     |    '\u0c66'..'\u0c6f'
> > >     |    '\u0ce6'..'\u0cef'
> > >     |    '\u0d66'..'\u0d6f'
> > >     |    '\u0e50'..'\u0e59'
> > >     |    '\u0ed0'..'\u0ed9'
> > >     |    '\u1040'..'\u1049'
> > >     ;
> > > 
> > > 
> > > 
> > > 
> > >       
> > >
> >
>
____________________________________________________________________________________
> > > Looking for last minute shopping deals?  
> > > Find them fast with Yahoo! Search.  
> > >
> >
>
http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> > > 
> > 
> > 
> > 
> > 
> >      
> >
>
____________________________________________________________________________________
> > Be a better friend, newshound, and 
> > know-it-all with Yahoo! Mobile.  Try it now. 
> >
>
http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ
> > 
> > 
> > 
> 
> 
> 
>      
>
____________________________________________________________________________________
> Looking for last minute shopping deals?  
> Find them fast with Yahoo! Search. 
>
http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> 



      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs

From phreed at gmail.com  Tue Mar  4 14:19:32 2008
From: phreed at gmail.com (Fred)
Date: Tue, 4 Mar 2008 16:19:32 -0600
Subject: [antlr-interest] Composite Grammar
Message-ID: <cb0c557b0803041419y1b0fc922mc115e76b7204b4ee@mail.gmail.com>

I know this question is about a new feature but...
Is there an example of Composite Grammar using the new features of 3.1?
Even if it were in the class notes that would be fine.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/2bd2dd71/attachment.html 

From parrt at cs.usfca.edu  Tue Mar  4 14:28:06 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Mar 2008 14:28:06 -0800
Subject: [antlr-interest] Composite Grammar
In-Reply-To: <cb0c557b0803041419y1b0fc922mc115e76b7204b4ee@mail.gmail.com>
References: <cb0c557b0803041419y1b0fc922mc115e76b7204b4ee@mail.gmail.com>
Message-ID: <2BA7C52A-4EEF-4285-B2C8-110BF60BEE65@cs.usfca.edu>

yes, see

examples-v3.1b1.tar.gz

i have a java grammar broken into multiple pieces :)

/** Exact same grammar as examples-v3/java/Java.g but broken into
  *  multiple pieces to illustrate composing grammars via import  
statement.
  *  Results in multiple classes with Java referring to others via
  *  delegation pattern.  Run ANTLR only once on this root grammar:
  *
  *      java org.antlr.Tool Java.g
  */
grammar Java;
options {k=2; backtrack=true; memoize=true;}

import JavaDecl, JavaAnnotations, JavaExpr, JavaStat, JavaLexerRules;

compilationUnit
     :   annotations?
         packageDeclaration?
         importDeclaration*
         typeDeclaration*
     ;

Ter

On Mar 4, 2008, at 2:19 PM, Fred wrote:

> I know this question is about a new feature but...
> Is there an example of Composite Grammar using the new features of  
> 3.1?
> Even if it were in the class notes that would be fine.
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/df3383bf/attachment.html 

From lgcraymer at yahoo.com  Tue Mar  4 14:35:48 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 4 Mar 2008 14:35:48 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <15023.77474.qm@web55911.mail.re3.yahoo.com>

1.)  Yes--see calls to prefixWithSynPred() in antlr.g
2.)  ANTLR 3 defaults to k=*; the best approach is to leave k alone.  For ANTLR 2, k was to find a minimum value that removed ambiguities; for ANTLR 3, a fixed k is the maximum value investigated for any decision and so weakens the analysis relative to k=*.

--Loring

----- Original Message ----
> From: Matt Benson <gudnabrsam at yahoo.com>
> To: Antlr List <antlr-interest at antlr.org>
> Sent: Tuesday, March 4, 2008 2:05:01 PM
> Subject: Re: [antlr-interest] lexer woes
> 
> Lest my other questions be lost in the noise, I am
> still confused as to:
> 
> 1) Whether backtracking mode is supported for lexers,
> and
> 2) How to specify lexer options (particularly "global"
> k) in a combined grammar.
> 
> -Matt
> 
> --- Matt Benson  wrote:
> 
> > 
> > --- Loring Craymer  wrote:
> > 
> > > This one's easy--unfortunately.  Ter does not yet
> > > use FOLLOW sets in the lexer, and that tends to
> > > cause havoc with your nicely factored grammar. 
> > > Also, you have gone overboard on using fragment
> > > rules where they are not particularly appropriate
> > > (all of your conmments, for example).
> > > 
> > > Can comments really be turned into tokens if
> > > followed by odd characters?  This seems really
> > > strange.
> > > 
> > 
> > No, that wasn't my intention.  Ugh, I had my comment
> > rules factored out properly but kept getting told
> > they
> > were unreachable, despite my awareness of
> > order-of-rules issues, etc.  However, I just changed
> > my default k back to 2, put SL_COMMENT and
> > ML_COMMENT
> > before Token, and now it seems the Tool wants to
> > disable Token for // and /* as is proper.  Not sure
> > why I couldn't get it working before but that
> > problem
> > appears to be solved.  That said I guess I should
> > keep
> > playing around for awhile here...
> > 
> > > Anyway, I would suggest factoring out a comment
> > rule
> > > and either inline most of the fragments or wait
> > > until Ter adds in FOLLOW set usage.
> > > 
> > 
> > Is that in the plan?  I don't pretend to understand
> > the whole follow set thing, but Google tells me it
> > has
> > lots of stuff for me to read and I'm still working
> > my
> > way through the Dragon book which I imagine probably
> > contains some relevant info as well.
> > 
> > Thanks, Loring.
> > 
> > > --Loring
> > > 
> > > ----- Original Message ----
> > > > From: Matt Benson 
> > > > To: Antlr List 
> > > > Sent: Monday, March 3, 2008 12:53:54 PM
> > > > Subject: [antlr-interest] lexer woes
> > > > 
> > > > I am working on a language with a fairly loose
> > > lexing
> > > > scheme.  I am running into all sorts of problems
> > > > specifying my lexer:  in particular I can't find
> > > any
> > > > evidence that backtracking works for lexer
> > > grammars. 
> > > > I tend to get NPEs building the NFAs when
> > > combining
> > > > synpreds, lexer grammars, and backtracking=true,
> > > > whether I use ANTLR 3.0.1 or a fairly recent 3.1
> > > > build.  I have had to use a strategy whereby any
> > > > possibly confusing tokens are generated from a
> > > single
> > > > lexer rule.  I'll include my current lexer
> > grammar
> > > > that passes Tool generation; if anyone has the
> > > > time/inclination/interest to offer ideas how I
> > > could
> > > > have done things more cleanly I'd be glad to
> > hear
> > > > about it.
> > > > 
> > > > Thanks (or not),
> > > > Matt
> > > > 
> > > > lexer grammar Loose;
> > > > options {k=1;}
> > > > tokens { Identifier; SEMI; SL_COMMENT;
> > > ML_COMMENT;}
> > > > 
> > > > EQUALS    :    '=';
> > > > 
> > > > StringLiteral
> > > >     :    '"' ( EscapeSequence | ~('\\'|'"') )*
> > '"'
> > > >     ;
> > > > 
> > > > fragment
> > > > EscapeSequence
> > > >     :    '\\'
> > > >         (   
> > ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
> > > >         |    Unicode
> > > >         |    Octal
> > > >         )
> > > >     ;
> > > > 
> > > > fragment
> > > > Octal
> > > > options {k=3;}
> > > >     :   ('0'..'3') ('0'..'7') ('0'..'7')
> > > >     |    ('0'..'7') ('0'..'7')?
> > > >     ;
> > > > 
> > > > fragment
> > > > Unicode
> > > >     :    'u' HexDigit HexDigit HexDigit HexDigit
> > > >     ;
> > > > 
> > > > fragment
> > > > HexDigit
> > > >     :    ('0'..'9'|'a'..'f'|'A'..'F')
> > > >     ;
> > > > 
> > > > WS    :    (WsChar)+ {$channel=HIDDEN;}
> > > >     ;
> > > > 
> > > > fragment
> > > > WsChar
> > > >     :    ' '|'\r'|'\t'|'\u000C'|'\n'
> > > >     ;
> > > > 
> > > > Token
> > > >     :    (';' WsChar)=>';' {$type=SEMI;}
> > > >     |    ('//')=>LineComment {$type=SL_COMMENT;}
> > > >     |    ('/*')=>Comment {$type=ML_COMMENT;}
> > > >     |    (TokenMark)=>TokenTail {$type=Token;}
> > > >     |    (    (Letter)=>Ident
> > {$type=Identifier;}
> > > >         |    IDDigit (Letter|IDDigit)*
> > > >         )
> > > >         //the presence of a token tail overrides
> > > any
> > > > previously assigned token type:
> > > >         (TokenTail {$type=Token;})?
> > > >     ;
> > > > 
> > > > fragment
> > > > LineComment
> > > >     :    '//' ~('\n'|'\r')* '\r'? '\n'
> > > {$channel=HIDDEN;}
> > > >     ;
> > > > 
> > > > fragment
> > > > Comment
> > > >     :    '/*' ( options {greedy=false;} : . )*
> > > '*/'
> > > > {$channel=HIDDEN;}
> > > >     ;
> > > > 
> > > > fragment
> > > > TokenTail
> > > >     :    TokenMark+ ((Letter|IDDigit)+
> > > TokenTail?)?
> > > >     ;
> > > > 
> > > > fragment
> > > > TokenMark
> > > > options {k=2;}
> > > >     :    EscapeSequence
> > > >     |    (';' ~(WsChar))=>';'//do not accept
> > > semicolon if
> > > > followed by WS
> > > >     |   
> > > ~(Letter|IDDigit|WsChar|';'|'"'|EQUALS|'/')
> > > >     |    ('/' ~('/'|'*'))=>'/'//do not accept
> > '/'
> > > if LA
> > > > finds an upcoming SL/ML comment
> > > >     ;
> > > > 
> > > > fragment
> > > > Ident
> > > >     :    Letter (Letter|IDDigit)*
> > > >     ;
> > > > 
> > > > fragment
> > > > Letter
> > > >     :    '\u0024'
> > > >     |    '\u0041'..'\u005a'
> > > >     |    '\u005f'
> > > >     |    '\u0061'..'\u007a'
> > > >     |    '\u00c0'..'\u00d6'
> > > >     |    '\u00d8'..'\u00f6'
> > > >     |    '\u00f8'..'\u00ff'
> > > >     |    '\u0100'..'\u1fff'
> > > >     |    '\u3040'..'\u318f'
> > > >     |    '\u3300'..'\u337f'
> > > >     |    '\u3400'..'\u3d2d'
> > > >     |    '\u4e00'..'\u9fff'
> > > >     |    '\uf900'..'\ufaff'
> > > >     ;
> > > > 
> > > > fragment
> > > > IDDigit
> > > >     :    '\u0030'..'\u0039'
> > > >     |    '\u0660'..'\u0669'
> > > >     |    '\u06f0'..'\u06f9'
> > > >     |    '\u0966'..'\u096f'
> > > >     |    '\u09e6'..'\u09ef'
> > > >     |    '\u0a66'..'\u0a6f'
> > > >     |    '\u0ae6'..'\u0aef'
> > > >     |    '\u0b66'..'\u0b6f'
> > > >     |    '\u0be7'..'\u0bef'
> > > >     |    '\u0c66'..'\u0c6f'
> > > >     |    '\u0ce6'..'\u0cef'
> > > >     |    '\u0d66'..'\u0d6f'
> > > >     |    '\u0e50'..'\u0e59'
> > > >     |    '\u0ed0'..'\u0ed9'
> > > >     |    '\u1040'..'\u1049'
> > > >     ;
> > > > 
> > > > 
> > > > 
> > > > 
> > > >       
> > > >
> > >
> >
> ____________________________________________________________________________________
> > > > Looking for last minute shopping deals?  
> > > > Find them fast with Yahoo! Search.  
> > > >
> > >
> >
> http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> > > > 
> > > 
> > > 
> > > 
> > > 
> > >      
> > >
> >
> ____________________________________________________________________________________
> > > Be a better friend, newshound, and 
> > > know-it-all with Yahoo! Mobile.  Try it now. 
> > >
> >
> http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ
> > > 
> > > 
> > > 
> > 
> > 
> > 
> >      
> >
> ____________________________________________________________________________________
> > Looking for last minute shopping deals?  
> > Find them fast with Yahoo! Search. 
> >
> http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> > 
> 
> 
> 
>       
> ____________________________________________________________________________________
> Never miss a thing.  Make Yahoo your home page. 
> http://www.yahoo.com/r/hs
> 




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From ad_cooney at hotmail.com  Tue Mar  4 14:41:07 2008
From: ad_cooney at hotmail.com (Adam Cooney)
Date: Tue, 4 Mar 2008 22:41:07 +0000
Subject: [antlr-interest] Java AST Grammar
Message-ID: <BLU124-W179B921BAEC05CFFFAC07484100@phx.gbl>


John, thank you so much so far for letting me use your JavaAST grammar. It has been extremely useful and I have been able to generate AST's, split the AST into relative sub-trees and use these to compare the two files based on a formula.  I do however, have one very small problem. It seems I get the following error:Exception in thread 'main' java.lang.ClassCastException: JavaASTParser$block_return cannot be cast to org.antlr.runtime.tree.Tree        at org.antlr.runtime.tree.BaseTreeAdaptor.addChild(BaseTreeAdaptor.java:77)        at JavaASTParser.statement(JavaASTParser.java:12708)        at JavaASTParser.blockStatement(JavaASTParser.java:11750)        at JavaASTParser.block(JavaASTParser.java:11613)        at JavaASTParser.methodBody(JavaASTParser.java:8974)        at JavaASTParser.voidMethodDeclaratorRest(JavaASTParser.java:5581)        at JavaASTParser.memberDecl(JavaASTParser.java:4093)        at JavaASTParser.classBodyDeclaration(JavaASTParser.java:3977)        at JavaASTParser.classBody(JavaASTParser.java:3628)        at JavaASTParser.normalClassDeclaration(JavaASTParser.java:1809)        at JavaASTParser.classDeclaration(JavaASTParser.java:1644)        at JavaASTParser.classOrInterfaceDeclaration(JavaASTParser.java:1120)        at JavaASTParser.typeDeclaration(JavaASTParser.java:1006)        at JavaASTParser.compilationUnit(JavaASTParser.java:609)        at BuildAST.GetAST(BuildAST.java:36)        at BuildAST.main(BuildAST.java:18)This error (so far in my testing) only occurs when there is a try catch block. I have enclosed 2 test files:
Partition.java is written with a FNFE and IOE error as a Try/Catch block. Partition2.java is written with a FNFE and IOE thrown on the functions instead and runs without an error.
 
Is there anyway you could fix this (or that somehow i've managed to do this?). I'd be very grateful.
Thanks
Adam


CC: john at jacelridge.comFrom: john at jacelridge.comTo: ad_cooney at hotmail.comSubject: Re: [antlr-interest] Java AST GrammarDate: Fri, 22 Feb 2008 12:31:54 -0500No problem.  I'm glad to hear it's working.  Do let me know of any problems you run into. 

Peace
- John



On Feb 21, 2008, at 1:50 PM, Adam Cooney wrote:

Sigh, nevermind. I should have paid more attention to the 'ANTLRInputStream input = new ANTLRInputStream(System.in);'. I did it quickly before I left and didnt have time to notice. Sorry for wasting your time, works fine :) ty


From: ad_cooney at hotmail.comTo: antlr-interest at antlr.orgDate: Thu, 21 Feb 2008 18:28:08 +0000Subject: Re: [antlr-interest] Java AST GrammarThanks John. I'm having a slight problem running it on a Java file though (problem as in, it seems to take a LONG time compiling, and by along, the source file I've ran (frm the Java examples) hasn't finished compiling yet. heres my console:C:\antlr-3.0b7\lib\Java\eg\ast>java org.antlr.Tool JavaAST.gANTLR Parser Generator  Version 3.1b1 (??)  1989-2007C:\antlr-3.0b7\lib\Java\eg\ast>java org.antlr.Tool JavaPrinterTree.gANTLR Parser Generator  Version 3.1b1 (??)  1989-2007C:\antlr-3.0b7\lib\Java\eg\ast>javac *.javaNote: Some input files use unchecked or unsafe operations.Note: Recompile with -Xlint:unchecked for details.C:\antlr-3.0b7\lib\Java\eg\ast>java Test input (note: input is of type File). Could you please send me an example one (preferably that doesnt take long to compile:)) or correct me if im trying to do this wrong - i am basing it off how I have ran others via ANTLR. Sorry to be such a novice at this stuff.Thanks Adam 

CC: john at jacelridge.com; antlr-interest at antlr.orgFrom: john at jacelridge.comTo: ad_cooney at hotmail.comSubject: Re: [antlr-interest] Java AST GrammarDate: Tue, 19 Feb 2008 19:53:57 -0500Yes, you need 3.0b7 won't work, but, actually, neither will 3.0.1.  There is a bug in 3.0.1 (fixed in current beta releases of 3.1) that causes certain things not to work (they're marked with something like <---- trouble here in the grammar).  Get the latest release of 3.1beta and you'll be much happier.  (With 3.0.1 it will compile, it will just fail at runtime or give you a bad AST.) 


I have to say that I was very impressed; when I pointed the bug out to Terence he got a new version with the fix out in a few (maybe one) days.

Peace
- John



On Feb 19, 2008, at 5:12 PM, Adam Cooney wrote:

Hi John, I've been having some trouble running your grammar. I keep getting the following error: C:\antlr-3.0b7\lib\Java\eg\ast>java org.antlr.Tool JavaAST.gANTLR Parser Generator  Version 3.0b7 (April 12, 2007)  1989-2007error(100): JavaAST.g:709:53: syntax error: antlr: JavaAST.g:709:53: unexpectedtoken: ?error(100): JavaAST.g:710:61: syntax error: antlr: JavaAST.g:710:61: unexpectedtoken: ?error(100): JavaAST.g:711:51: syntax error: antlr: JavaAST.g:711:51: unexpectedtoken: ?error(100): JavaAST.g:712:58: syntax error: antlr: JavaAST.g:712:58: unexpectedtoken: ?error(100): JavaAST.g:0:0: syntax error: assign.types: <AST>:0:0: unexpected end of subtreeerror(10):  internal error: JavaAST.g : java.lang.ClassCastException: antlr.ASTNULLType cannot be cast to org.antlr.tool.GrammarASTorg.antlr.tool.AssignTokenTypesWalker.block(AssignTokenTypesWalker.java:1215)org.antlr.tool.AssignTokenTypesWalker.rule(AssignTokenTypesWalker.java:1030)org.antlr.tool.AssignTokenTypesWalker.rules(AssignTokenTypesWalker.java:610)org.antlr.tool.AssignTokenTypesWalker.grammarSpec(AssignTokenTypesWalker.java:492)org.antlr.tool.AssignTokenTypesWalker.grammar(AssignTokenTypesWalker.java:363)org.antlr.tool.Grammar.setGrammarContent(Grammar.java:539)org.antlr.tool.Grammar.<init>(Grammar.java:448)org.antlr.Tool.getGrammar(Tool.java:331)org.antlr.Tool.process(Tool.java:267)org.antlr.Tool.main(Tool.java:70) Any idea what could be causing it? I'm pretty new to ANTLR, but the stringtemplate and antlr JARs are in the classpath, and I ran the example treeparsers fine. Could it be due to using antlr-3.0b7 rather than antlr-3.0.1? I was using 3.0.1 but after installing it and resetting the classpaths for some reason i got a Java classloader error even after restarting the computer, and so I just reverted back to this one.


CC: john at jacelridge.com; antlr-interest at antlr.orgFrom: john at jacelridge.comTo: ad_cooney at hotmail.comSubject: Re: [antlr-interest] Java AST GrammarDate: Tue, 12 Feb 2008 17:41:05 -0500I have been working on a Java grammar that produces an AST; and a companion tree grammar that produces equivalent Java code from an AST.  This is still a work-in-progress, but you're welcome to what I have. 

Please let me know if you run into any problems with this, as I'm trying to make it work nicely.

Peace
- John




She said what? About who? Shameful celebrity quotes on Search Star!

She said what? About who? Shameful celebrity quotes on Search Star!

She said what? About who? Shameful celebrity quotes on Search Star!
_________________________________________________________________
Free games, great prizes - get gaming at Gamesbox. 
http://www.searchgamesbox.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/6f748f2b/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Partition2.java
Type: application/octet-stream
Size: 2256 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/6f748f2b/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Partition.java
Type: application/octet-stream
Size: 2182 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/6f748f2b/attachment-0001.obj 

From gudnabrsam at yahoo.com  Tue Mar  4 14:55:09 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Tue, 4 Mar 2008 14:55:09 -0800 (PST)
Subject: [antlr-interest] lexer woes
In-Reply-To: <15023.77474.qm@web55911.mail.re3.yahoo.com>
Message-ID: <806731.49506.qm@web55110.mail.re4.yahoo.com>


--- Loring Craymer <lgcraymer at yahoo.com> wrote:

> 1.)  Yes--see calls to prefixWithSynPred() in
> antlr.g

Hmm.  The reason I asked is that I continue to get
NPEs whenever I turn on backtracking in my lexer
grammar and run Tool against it.

> 2.)  ANTLR 3 defaults to k=*; the best approach is
> to leave k alone.  For ANTLR 2, k was to find a
> minimum value that removed ambiguities; for ANTLR 3,
> a fixed k is the maximum value investigated for any
> decision and so weakens the analysis relative to
> k=*.

Again, if I don't set k=2 for my lexer grammar, it
disables rules that I don't want disabled.  As this
grammar is intended for OSS anyway, I've posted it at:

http://people.apache.org/~mbenson/sharedfiles/BantamLexer.g3

if anyone feels like playing with it.

-Matt

> 
> --Loring
> 
> ----- Original Message ----
> > From: Matt Benson <gudnabrsam at yahoo.com>
> > To: Antlr List <antlr-interest at antlr.org>
> > Sent: Tuesday, March 4, 2008 2:05:01 PM
> > Subject: Re: [antlr-interest] lexer woes
> > 
> > Lest my other questions be lost in the noise, I am
> > still confused as to:
> > 
> > 1) Whether backtracking mode is supported for
> lexers,
> > and
> > 2) How to specify lexer options (particularly
> "global"
> > k) in a combined grammar.
> > 
> > -Matt
> > 
> > --- Matt Benson  wrote:
> > 
> > > 
> > > --- Loring Craymer  wrote:
> > > 
> > > > This one's easy--unfortunately.  Ter does not
> yet
> > > > use FOLLOW sets in the lexer, and that tends
> to
> > > > cause havoc with your nicely factored grammar.
> 
> > > > Also, you have gone overboard on using
> fragment
> > > > rules where they are not particularly
> appropriate
> > > > (all of your conmments, for example).
> > > > 
> > > > Can comments really be turned into tokens if
> > > > followed by odd characters?  This seems really
> > > > strange.
> > > > 
> > > 
> > > No, that wasn't my intention.  Ugh, I had my
> comment
> > > rules factored out properly but kept getting
> told
> > > they
> > > were unreachable, despite my awareness of
> > > order-of-rules issues, etc.  However, I just
> changed
> > > my default k back to 2, put SL_COMMENT and
> > > ML_COMMENT
> > > before Token, and now it seems the Tool wants to
> > > disable Token for // and /* as is proper.  Not
> sure
> > > why I couldn't get it working before but that
> > > problem
> > > appears to be solved.  That said I guess I
> should
> > > keep
> > > playing around for awhile here...
> > > 
> > > > Anyway, I would suggest factoring out a
> comment
> > > rule
> > > > and either inline most of the fragments or
> wait
> > > > until Ter adds in FOLLOW set usage.
> > > > 
> > > 
> > > Is that in the plan?  I don't pretend to
> understand
> > > the whole follow set thing, but Google tells me
> it
> > > has
> > > lots of stuff for me to read and I'm still
> working
> > > my
> > > way through the Dragon book which I imagine
> probably
> > > contains some relevant info as well.
> > > 
> > > Thanks, Loring.
> > > 
> > > > --Loring
> > > > 
> > > > ----- Original Message ----
> > > > > From: Matt Benson 
> > > > > To: Antlr List 
> > > > > Sent: Monday, March 3, 2008 12:53:54 PM
> > > > > Subject: [antlr-interest] lexer woes
> > > > > 
> > > > > I am working on a language with a fairly
> loose
> > > > lexing
> > > > > scheme.  I am running into all sorts of
> problems
> > > > > specifying my lexer:  in particular I can't
> find
> > > > any
> > > > > evidence that backtracking works for lexer
> > > > grammars. 
> > > > > I tend to get NPEs building the NFAs when
> > > > combining
> > > > > synpreds, lexer grammars, and
> backtracking=true,
> > > > > whether I use ANTLR 3.0.1 or a fairly recent
> 3.1
> > > > > build.  I have had to use a strategy whereby
> any
> > > > > possibly confusing tokens are generated from
> a
> > > > single
> > > > > lexer rule.  I'll include my current lexer
> > > grammar
> > > > > that passes Tool generation; if anyone has
> the
> > > > > time/inclination/interest to offer ideas how
> I
> > > > could
> > > > > have done things more cleanly I'd be glad to
> > > hear
> > > > > about it.
> > > > > 
> > > > > Thanks (or not),
> > > > > Matt
> > > > > 
> > > > > lexer grammar Loose;
> > > > > options {k=1;}
> > > > > tokens { Identifier; SEMI; SL_COMMENT;
> > > > ML_COMMENT;}
> > > > > 
> > > > > EQUALS    :    '=';
> > > > > 
> > > > > StringLiteral
> > > > >     :    '"' ( EscapeSequence | ~('\\'|'"')
> )*
> > > '"'
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > EscapeSequence
> > > > >     :    '\\'
> > > > >         (   
> > > ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
> > > > >         |    Unicode
> > > > >         |    Octal
> > > > >         )
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > Octal
> > > > > options {k=3;}
> > > > >     :   ('0'..'3') ('0'..'7') ('0'..'7')
> > > > >     |    ('0'..'7') ('0'..'7')?
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > Unicode
> > > > >     :    'u' HexDigit HexDigit HexDigit
> HexDigit
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > HexDigit
> > > > >     :    ('0'..'9'|'a'..'f'|'A'..'F')
> > > > >     ;
> > > > > 
> > > > > WS    :    (WsChar)+ {$channel=HIDDEN;}
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > WsChar
> > > > >     :    ' '|'\r'|'\t'|'\u000C'|'\n'
> > > > >     ;
> > > > > 
> > > > > Token
> > > > >     :    (';' WsChar)=>';' {$type=SEMI;}
> > > > >     |    ('//')=>LineComment
> {$type=SL_COMMENT;}
> > > > >     |    ('/*')=>Comment {$type=ML_COMMENT;}
> > > > >     |    (TokenMark)=>TokenTail
> {$type=Token;}
> > > > >     |    (    (Letter)=>Ident
> > > {$type=Identifier;}
> > > > >         |    IDDigit (Letter|IDDigit)*
> > > > >         )
> > > > >         //the presence of a token tail
> overrides
> > > > any
> > > > > previously assigned token type:
> > > > >         (TokenTail {$type=Token;})?
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > LineComment
> > > > >     :    '//' ~('\n'|'\r')* '\r'? '\n'
> > > > {$channel=HIDDEN;}
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > Comment
> > > > >     :    '/*' ( options {greedy=false;} : .
> )*
> > > > '*/'
> > > > > {$channel=HIDDEN;}
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > TokenTail
> > > > >     :    TokenMark+ ((Letter|IDDigit)+
> > > > TokenTail?)?
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > TokenMark
> > > > > options {k=2;}
> > > > >     :    EscapeSequence
> > > > >     |    (';' ~(WsChar))=>';'//do not accept
> > > > semicolon if
> > > > > followed by WS
> > > > >     |   
> > > > ~(Letter|IDDigit|WsChar|';'|'"'|EQUALS|'/')
> > > > >     |    ('/' ~('/'|'*'))=>'/'//do not
> accept
> > > '/'
> > > > if LA
> > > > > finds an upcoming SL/ML comment
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > Ident
> > > > >     :    Letter (Letter|IDDigit)*
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > Letter
> > > > >     :    '\u0024'
> > > > >     |    '\u0041'..'\u005a'
> > > > >     |    '\u005f'
> > > > >     |    '\u0061'..'\u007a'
> > > > >     |    '\u00c0'..'\u00d6'
> > > > >     |    '\u00d8'..'\u00f6'
> > > > >     |    '\u00f8'..'\u00ff'
> > > > >     |    '\u0100'..'\u1fff'
> > > > >     |    '\u3040'..'\u318f'
> > > > >     |    '\u3300'..'\u337f'
> > > > >     |    '\u3400'..'\u3d2d'
> > > > >     |    '\u4e00'..'\u9fff'
> > > > >     |    '\uf900'..'\ufaff'
> > > > >     ;
> > > > > 
> > > > > fragment
> > > > > IDDigit
> > > > >     :    '\u0030'..'\u0039'
> > > > >     |    '\u0660'..'\u0669'
> > > > >     |    '\u06f0'..'\u06f9'
> > > > >     |    '\u0966'..'\u096f'
> > > > >     |    '\u09e6'..'\u09ef'
> > > > >     |    '\u0a66'..'\u0a6f'
> > > > >     |    '\u0ae6'..'\u0aef'
> > > > >     |    '\u0b66'..'\u0b6f'
> > > > >     |    '\u0be7'..'\u0bef'
> > > > >     |    '\u0c66'..'\u0c6f'
> > > > >     |    '\u0ce6'..'\u0cef'
> > > > >     |    '\u0d66'..'\u0d6f'
> > > > >     |    '\u0e50'..'\u0e59'
> > > > >     |    '\u0ed0'..'\u0ed9'
> > > > >     |    '\u1040'..'\u1049'
> > > > >     ;
> > > > > 
> > > > > 
> > > > > 
> > > > > 
> > > > >       
> > > > >
> > > >
> > >
> >
>
____________________________________________________________________________________
> > > > > Looking for last minute shopping deals?  
> > > > > Find them fast with Yahoo! Search.  
> > > > >
> > > >
> > >
> >
>
http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> > > > > 
> > > > 
> > > > 
> > > > 
> > > > 
> > > >      
> > > >
> > >
> >
>
____________________________________________________________________________________
> > > > Be a better friend, newshound, and 
> > > > know-it-all with Yahoo! Mobile.  Try it now. 
> > > >
> > >
> >
>
http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ
> > > > 
> > > > 
> > > > 
> > > 
> > > 
> > > 
> > >      
> > >
> >
>
____________________________________________________________________________________
> > > Looking for last minute shopping deals?  
> > > Find them fast with Yahoo! Search. 
> > >
> >
>
http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> > > 
> > 
> > 
> > 
> >       
> >
>
____________________________________________________________________________________
> > Never miss a thing.  Make Yahoo your home page. 
> > http://www.yahoo.com/r/hs
> > 
> 
> 
> 
> 
>      
>
____________________________________________________________________________________
> Looking for last minute shopping deals?  
> Find them fast with Yahoo! Search. 
>
http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> 



      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 


From phreed at gmail.com  Tue Mar  4 15:15:07 2008
From: phreed at gmail.com (Fred)
Date: Tue, 4 Mar 2008 17:15:07 -0600
Subject: [antlr-interest] Composite Grammar
In-Reply-To: <2BA7C52A-4EEF-4285-B2C8-110BF60BEE65@cs.usfca.edu>
References: <cb0c557b0803041419y1b0fc922mc115e76b7204b4ee@mail.gmail.com>
	<2BA7C52A-4EEF-4285-B2C8-110BF60BEE65@cs.usfca.edu>
Message-ID: <cb0c557b0803041515i27d89f05ydddf479a1cf3fa59@mail.gmail.com>

I'm having some difficulty downloading the antlr.tgz snapshot from
http://fisheye2.cenqua.com/browse/antlr
...or should I be using
http://www.antlr.org/download/build/antlr-2008-02-27.17.tar.gz anyway?

On Tue, Mar 4, 2008 at 4:28 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> yes, see
> examples-v3.1b1.tar.gz<http://www.antlr.org/download/examples-v3.1b1.tar.gz>
>
> i have a java grammar broken into multiple pieces :)
>
> /** Exact same grammar as examples-v3/java/Java.g but broken into
>  *  multiple pieces to illustrate composing grammars via import statement.
>  *  Results in multiple classes with Java referring to others via
>  *  delegation pattern.  Run ANTLR only once on this root grammar:
>  *
>  *      java org.antlr.Tool Java.g
>  */
> grammar Java;
> options {k=2; backtrack=true; memoize=true;}
>
> import JavaDecl, JavaAnnotations, JavaExpr, JavaStat, JavaLexerRules;
>
> compilationUnit
>     :   annotations?
>         packageDeclaration?
>         importDeclaration*
>         typeDeclaration*
>     ;
>
> Ter
>
> On Mar 4, 2008, at 2:19 PM, Fred wrote:
>
> I know this question is about a new feature but...
> Is there an example of Composite Grammar using the new features of 3.1?
> Even if it were in the class notes that would be fine.
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/af4b83dd/attachment.html 

From lgcraymer at yahoo.com  Tue Mar  4 15:25:28 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 4 Mar 2008 15:25:28 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <564196.98172.qm@web55910.mail.re3.yahoo.com>



----- Original Message ----
> From: Matt Benson <gudnabrsam at yahoo.com>
> To: antlr Interest <antlr-interest at antlr.org>
> Sent: Tuesday, March 4, 2008 2:55:09 PM
> Subject: Re: [antlr-interest] lexer woes
> 
> 
> --- Loring Craymer  wrote:
> 
> > 2.)  ANTLR 3 defaults to k=*; the best approach is
> > to leave k alone.  For ANTLR 2, k was to find a
> > minimum value that removed ambiguities; for ANTLR 3,
> > a fixed k is the maximum value investigated for any
> > decision and so weakens the analysis relative to
> > k=*.
> 
> Again, if I don't set k=2 for my lexer grammar, it
> disables rules that I don't want disabled.  As this
> grammar is intended for OSS anyway, I've posted it at

Ter has done less work with restricted analysis than with k=*; consequently, the error checking is weaker and the error reporting should not be trusted overly much.   In this case, the "disabled" messages are useful if you want to fix the grammar; the lack of them with k=2 is a sign that the k=2 analysis is faulty!

--Loring





      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From parrt at cs.usfca.edu  Tue Mar  4 17:30:52 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Mar 2008 17:30:52 -0800
Subject: [antlr-interest] Composite Grammar
In-Reply-To: <cb0c557b0803041515i27d89f05ydddf479a1cf3fa59@mail.gmail.com>
References: <cb0c557b0803041419y1b0fc922mc115e76b7204b4ee@mail.gmail.com>
	<2BA7C52A-4EEF-4285-B2C8-110BF60BEE65@cs.usfca.edu>
	<cb0c557b0803041515i27d89f05ydddf479a1cf3fa59@mail.gmail.com>
Message-ID: <15383CEC-3F03-4CE8-B249-698C86A65FF9@cs.usfca.edu>


On Mar 4, 2008, at 3:15 PM, Fred wrote:

> I'm having some difficulty downloading the antlr.tgz snapshot from http://fisheye2.cenqua.com/browse/antlr
> ...or should I be using http://www.antlr.org/download/build/antlr-2008-02-27.17.tar.gz 
>  anyway?

yeah, the fisheye thing doesn't work for tarballs too well.   Grab  
latest build, yep.
Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080304/d8fa1157/attachment.html 

From kenneth.domino at domemtech.com  Tue Mar  4 21:19:34 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Wed, 5 Mar 2008 00:19:34 -0500
Subject: [antlr-interest] Questions regarding ANTLRv3.g
Message-ID: <A09FB133992541A7B85F918EB2D5FB0E@pc2008>

Hi,

I'm writing a pretty printer for ANTLR v3 grammars using the ANTLRv3.g grammar from the examples section of the website (http://www.antlr.org/grammar/ANTLR).  In doing so, I have several questions that I'm hoping someone could answer.

1) I couldn't help but notice that there are two files in the Fisheye revision control system (http://fisheye2.cenqua.com/) for ANTLRv3.g (http://fisheye2.cenqua.com/browse/antlr/src/org/antlr/tool/ANTLRv3.g?r=4556 and http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288).  They seem to be out of sync.

In the second file ("...4288")  token types include TREE_BEGIN, ROOT, BANG, RANGE, REWRITE; in the first file ("...4556"), these token types are not declared in the tokens section. What is the reason for the difference?

In the first file, ruleScopeSpec has one production, and it specifies that id's do not have comma separation; in the second file, ruleScopeSpec has three productions, and id's have comma separation.  Which is the correct syntax?

In the first file, the symbol SRC has modifier "protected"; in the second file, SRC has modifier "fragment".  I thought "protected" was changed to "fragment" with version 3 of ANTLR, and it would only accept that?

In the first file, ACTION_CHAR_LITERAL was defined as:

fragment
ACTION_CHAR_LITERAL
 : '\'' (ACTION_ESC|.) '\''
 ;

In the second file, its defined as:

fragment
ACTION_CHAR_LITERAL
 : '\'' (ACTION_ESC|~('\\'|'\'')) '\''
 ;

What is the purpose of the difference?  Which is the correct syntax?

In addition, it looks like the build for ANTLR (http://fisheye2.cenqua.com/browse/~raw,r=4540/antlr/build.xml) does not use ANTLRv3.g, but the file antlr.g.  That file is an ANTLR version 2 input grammar, along with several other ".g" files the comprise the build.

What is the situation with the ANTLRv3.g grammar?  Will they be kept in sync and will the new grammar be used in the build for ANTLR?

2) It looks like the example grammar http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288 seems to have a bug in the tree construction for the third production of elementNoOptionSpec, in which the ebnfSuffix is completely lost from the tree:

elementNoOptionSpec :
 atom
  ( ebnfSuffix -> ^(BLOCK["BLOCK"] ^(ALT["ALT"] atom EOA["EOA"]) EOB["EOB"])
  |    -> atom
  )

For example, if one runs ANTLRWorks using ANTLRv3.g (http://www.antlr.org/grammar/ANTLR/ANTLRv3.g) with the input:

grammar test;

a : 'A'
  | 'B' a?
  | 'C' a*
  | 'D' (a)?
  | 'F' (a)*
  ;

then the AST constructed does not seem to have any nodes for '*' nor '?' in the 2nd and 3rd productions.  I can only guess that the rule should have been:

elementNoOptionSpec :
 atom
  ( ebnfSuffix -> ^( ebnfSuffix ^(BLOCK["BLOCK"] ^(ALT["ALT"] atom EOA["EOA"]) EOB["EOB"]))
  |    -> atom
  )

Is this right?

3) Incidentally, when I debug the ANTLRv3.g grammar on ANTLRWorks v1.1.7, it seems to produce nice looking trees, but it also has one or more "javax.swing.text.BadLocationException" being raised.  Is there a more recent version of ANTLRWorks that I can build?  It doesn't look like the source is in Fisheye.  Where can I find it?

Thanks.

Ken Domino
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080305/4643e028/attachment.html 

From shro8822 at vandals.uidaho.edu  Tue Mar  4 23:33:49 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Tue, 04 Mar 2008 23:33:49 -0800
Subject: [antlr-interest] Composite Grammar
In-Reply-To: <15383CEC-3F03-4CE8-B249-698C86A65FF9@cs.usfca.edu>
References: <cb0c557b0803041419y1b0fc922mc115e76b7204b4ee@mail.gmail.com>	<2BA7C52A-4EEF-4285-B2C8-110BF60BEE65@cs.usfca.edu>	<cb0c557b0803041515i27d89f05ydddf479a1cf3fa59@mail.gmail.com>
	<15383CEC-3F03-4CE8-B249-698C86A65FF9@cs.usfca.edu>
Message-ID: <BAYC1-PASMTP1359C987AC5DFAED2A410EF5110@CEZ.ICE>

Terence Parr wrote:
>
> On Mar 4, 2008, at 3:15 PM, Fred wrote:
>
>> I'm having some difficulty downloading the antlr.tgz snapshot from 
>> http://fisheye2.cenqua.com/browse/antlr
>> ...or should I be using 
>> http://www.antlr.org/download/build/antlr-2008-02-27.17.tar.gz anyway?
>
> yeah, the fisheye thing doesn't work for tarballs too well.   Grab 
> latest build, yep.
> Ter
Um, how? Is the latest build the main download link or a pull from the 
source repo? I looked around a while ago and the tar-ball link was all I 
saw connected to the source repo. Mostly what I want is the c# runtime 
sources for debugging and comments. (BTW: I can do SVN, FTP and HTML and 
that about it. Am I out of luck?)

From antlr at mirality.co.nz  Wed Mar  5 00:09:41 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 05 Mar 2008 21:09:41 +1300
Subject: [antlr-interest] lexer woes
In-Reply-To: <15023.77474.qm@web55911.mail.re3.yahoo.com>
References: <15023.77474.qm@web55911.mail.re3.yahoo.com>
Message-ID: <20080305081006.9D9EA11EC83@www.antlr.org>

At 11:35 5/03/2008, Loring Craymer wrote:
 >> 1) Whether backtracking mode is supported for lexers,
 >1.)  Yes--see calls to prefixWithSynPred() in antlr.g

I think that answer is a little misleading :)

As far as I know, the "backtrack=true" option has no effect in the 
lexer.  However, backtracking in general is supported through 
adding your own syntactic predicates.

Note that syntactic predicates can only be used to disambiguate 
between alts in a single rule -- you can't use them to distinguish 
between tokens at the top level.  (If you need to do that, you'll 
have to merge the rules.)


From gudnabrsam at yahoo.com  Wed Mar  5 08:07:51 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Wed, 5 Mar 2008 08:07:51 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <540552.67260.qm@web55114.mail.re4.yahoo.com>


--- Gavin Lambert <antlr at mirality.co.nz> wrote:

> At 11:35 5/03/2008, Loring Craymer wrote:
>  >> 1) Whether backtracking mode is supported for
> lexers,
>  >1.)  Yes--see calls to prefixWithSynPred() in
> antlr.g
> 
> I think that answer is a little misleading :)
> 
> As far as I know, the "backtrack=true" option has no
> effect in the 
> lexer.  However, backtracking in general is
> supported through 
> adding your own syntactic predicates.
> 
> Note that syntactic predicates can only be used to
> disambiguate 
> between alts in a single rule -- you can't use them
> to distinguish 
> between tokens at the top level.  (If you need to do
> that, you'll 
> have to merge the rules.)
> 

I tell you, with all due respect to Ter, writing the
lexer by hand is looking more and more attractive for
this admittedly fairly weird example.  I am trying to
get into being able to support DWIM syntax in a couple
of project ideas, so (elegant) backtracking in the
lexer is going to be pretty important, I think.

Thanks,
Matt

> 



      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From parrt at cs.usfca.edu  Wed Mar  5 08:24:50 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 5 Mar 2008 08:24:50 -0800
Subject: [antlr-interest] Composite Grammar
In-Reply-To: <BAYC1-PASMTP1359C987AC5DFAED2A410EF5110@CEZ.ICE>
References: <cb0c557b0803041419y1b0fc922mc115e76b7204b4ee@mail.gmail.com>	<2BA7C52A-4EEF-4285-B2C8-110BF60BEE65@cs.usfca.edu>	<cb0c557b0803041515i27d89f05ydddf479a1cf3fa59@mail.gmail.com>
	<15383CEC-3F03-4CE8-B249-698C86A65FF9@cs.usfca.edu>
	<BAYC1-PASMTP1359C987AC5DFAED2A410EF5110@CEZ.ICE>
Message-ID: <93635089-39EE-4B12-B4F6-D76261BD5FD0@cs.usfca.edu>

www.antlr.org/download/build :)
Ter
On Mar 4, 2008, at 11:33 PM, Benjamin Shropshire wrote:

> Terence Parr wrote:
>>
>> On Mar 4, 2008, at 3:15 PM, Fred wrote:
>>
>>> I'm having some difficulty downloading the antlr.tgz snapshot  
>>> from http://fisheye2.cenqua.com/browse/antlr
>>> ...or should I be using http://www.antlr.org/download/build/ 
>>> antlr-2008-02-27.17.tar.gz anyway?
>>
>> yeah, the fisheye thing doesn't work for tarballs too well.   Grab  
>> latest build, yep.
>> Ter
> Um, how? Is the latest build the main download link or a pull from  
> the source repo? I looked around a while ago and the tar-ball link  
> was all I saw connected to the source repo. Mostly what I want is  
> the c# runtime sources for debugging and comments. (BTW: I can do  
> SVN, FTP and HTML and that about it. Am I out of luck?)


From lgcraymer at yahoo.com  Wed Mar  5 11:58:24 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 5 Mar 2008 11:58:24 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <294201.6110.qm@web55908.mail.re3.yahoo.com>

Setting backtracking in combined grammars only affects the parser (again, see the prefixWithSynPred code); from the code, though, setting backtracking=true in lexer grammars does introduce synpreds at all decision points.

--Loring

----- Original Message ----
> From: Gavin Lambert <antlr at mirality.co.nz>
> To: Loring Craymer <lgcraymer at yahoo.com>; Matt Benson <gudnabrsam at yahoo.com>; Antlr List <antlr-interest at antlr.org>
> Sent: Wednesday, March 5, 2008 12:09:41 AM
> Subject: Re: [antlr-interest] lexer woes
> 
> At 11:35 5/03/2008, Loring Craymer wrote:
>  >> 1) Whether backtracking mode is supported for lexers,
>  >1.)  Yes--see calls to prefixWithSynPred() in antlr.g
> 
> I think that answer is a little misleading :)
> 
> As far as I know, the "backtrack=true" option has no effect in the 
> lexer.  However, backtracking in general is supported through 
> adding your own syntactic predicates.
> 
> Note that syntactic predicates can only be used to disambiguate 
> between alts in a single rule -- you can't use them to distinguish 
> between tokens at the top level.  (If you need to do that, you'll 
> have to merge the rules.)
> 
> 




      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs

From tom at atlassian.com  Wed Mar  5 15:53:08 2008
From: tom at atlassian.com (Tom Davies)
Date: Thu, 6 Mar 2008 10:53:08 +1100
Subject: [antlr-interest] ANTLR lexers/parsers in Intellij IDEA language
	plugins?
Message-ID: <4550D4D1-5439-441D-B553-427427A85D21@atlassian.com>

Hi,

I wonder if anyone has done any work on this? I've tried to use an  
ANTLR lexer in an Intellij plugin, and while I got a usable result it  
was unstable and buggy, due to my failure to correctly implement the  
contract IDEA expects. If someone has written an adapter, or has ideas  
on approaches, I'd be interested.

Tom

--
ATLASSIAN - http://www.atlassian.com
Our products help over 8,500 customers in more than 95 countries to  
collaborate






From gudnabrsam at yahoo.com  Wed Mar  5 15:55:13 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Wed, 5 Mar 2008 15:55:13 -0800 (PST)
Subject: [antlr-interest] lexer woes
In-Reply-To: <294201.6110.qm@web55908.mail.re3.yahoo.com>
Message-ID: <588590.86236.qm@web55114.mail.re4.yahoo.com>


--- Loring Craymer <lgcraymer at yahoo.com> wrote:

> Setting backtracking in combined grammars only
> affects the parser (again, see the prefixWithSynPred
> code); from the code, though, setting
> backtracking=true in lexer grammars does introduce
> synpreds at all decision points.
> 

>From the code... but try to tool this:
----
lexer grammar EasyLexer;
options {
	backtrack=true;
	memoize=true;
}

Ident
	:	Letter (Letter|Digit)*
	;

fragment
Letter 
	:	'A'..'Z'|'a'..'z'|'_'
	;

fragment
Digit
	:	'0'..'9'
	;

---

Does it work, or have I had too much crack?

-Matt

> --Loring
> 
> ----- Original Message ----
> > From: Gavin Lambert <antlr at mirality.co.nz>
> > To: Loring Craymer <lgcraymer at yahoo.com>; Matt
> Benson <gudnabrsam at yahoo.com>; Antlr List
> <antlr-interest at antlr.org>
> > Sent: Wednesday, March 5, 2008 12:09:41 AM
> > Subject: Re: [antlr-interest] lexer woes
> > 
> > At 11:35 5/03/2008, Loring Craymer wrote:
> >  >> 1) Whether backtracking mode is supported for
> lexers,
> >  >1.)  Yes--see calls to prefixWithSynPred() in
> antlr.g
> > 
> > I think that answer is a little misleading :)
> > 
> > As far as I know, the "backtrack=true" option has
> no effect in the 
> > lexer.  However, backtracking in general is
> supported through 
> > adding your own syntactic predicates.
> > 
> > Note that syntactic predicates can only be used to
> disambiguate 
> > between alts in a single rule -- you can't use
> them to distinguish 
> > between tokens at the top level.  (If you need to
> do that, you'll 
> > have to merge the rules.)
> > 
> > 
> 
> 
> 
> 
>      
>
____________________________________________________________________________________
> Never miss a thing.  Make Yahoo your home page. 
> http://www.yahoo.com/r/hs
> 



      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs

From lgcraymer at yahoo.com  Wed Mar  5 16:16:48 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 5 Mar 2008 16:16:48 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <542079.42723.qm@web55915.mail.re3.yahoo.com>

There is also some significant analysis to remove BACKTRACK_SYNPREDs when they are not needed.  For this case, they would not be needed (LL* is sufficient), so they are removed and you are back to the FOLLOW set problem.

--Loring



----- Original Message ----
> From: Matt Benson <gudnabrsam at yahoo.com>
> To: Loring Craymer <lgcraymer at yahoo.com>; Gavin Lambert <antlr at mirality.co.nz>; Antlr List <antlr-interest at antlr.org>
> Sent: Wednesday, March 5, 2008 3:55:13 PM
> Subject: Re: [antlr-interest] lexer woes
> 
> 
> --- Loring Craymer  wrote:
> 
> > Setting backtracking in combined grammars only
> > affects the parser (again, see the prefixWithSynPred
> > code); from the code, though, setting
> > backtracking=true in lexer grammars does introduce
> > synpreds at all decision points.
> > 
> 
> From the code... but try to tool this:
> ----
> lexer grammar EasyLexer;
> options {
>     backtrack=true;
>     memoize=true;
> }
> 
> Ident
>     :    Letter (Letter|Digit)*
>     ;
> 
> fragment
> Letter 
>     :    'A'..'Z'|'a'..'z'|'_'
>     ;
> 
> fragment
> Digit
>     :    '0'..'9'
>     ;
> 
> ---
> 
> Does it work, or have I had too much crack?
> 
> -Matt
> 
> > --Loring
> > 
> > ----- Original Message ----
> > > From: Gavin Lambert 
> > > To: Loring Craymer ; Matt
> > Benson ; Antlr List
> > 
> > > Sent: Wednesday, March 5, 2008 12:09:41 AM
> > > Subject: Re: [antlr-interest] lexer woes
> > > 
> > > At 11:35 5/03/2008, Loring Craymer wrote:
> > >  >> 1) Whether backtracking mode is supported for
> > lexers,
> > >  >1.)  Yes--see calls to prefixWithSynPred() in
> > antlr.g
> > > 
> > > I think that answer is a little misleading :)
> > > 
> > > As far as I know, the "backtrack=true" option has
> > no effect in the 
> > > lexer.  However, backtracking in general is
> > supported through 
> > > adding your own syntactic predicates.
> > > 
> > > Note that syntactic predicates can only be used to
> > disambiguate 
> > > between alts in a single rule -- you can't use
> > them to distinguish 
> > > between tokens at the top level.  (If you need to
> > do that, you'll 
> > > have to merge the rules.)
> > > 
> > > 
> > 
> > 
> > 
> > 
> >      
> >
> ____________________________________________________________________________________
> > Never miss a thing.  Make Yahoo your home page. 
> > http://www.yahoo.com/r/hs
> > 
> 
> 
> 
>       
> ____________________________________________________________________________________
> Never miss a thing.  Make Yahoo your home page. 
> http://www.yahoo.com/r/hs
> 




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From listbrownie at gmail.com  Wed Mar  5 22:53:02 2008
From: listbrownie at gmail.com (alan brown)
Date: Wed, 5 Mar 2008 22:53:02 -0800
Subject: [antlr-interest] Why is Filter thwarting me?
Message-ID: <2b5f47650803052253y22e4ac4ala067bb083008e72@mail.gmail.com>

I'm using 'filter=true' because I'm just trying to pluck out parts of the
input stream.  However, setting filter to true seems to prevent my java code
from running.  Here's an example:


grammar wibble;

options {filter=false;}

@header {package parse.grammar;}
@lexer::header{package parse.grammar;}

action            : WORD DIRT* {System.out.println("wibble");} play NL;
play            : 'bets' DIRT* NUMBER;

NUMBER            : DIGIT+ (',' DIGIT DIGIT DIGIT)* ;
WORD            : LETTER (LETTER | DIGIT)* | WORD_CHAR ;
NL            : '\r' | '\n';

DIRT            : '\'' | '|' | ' ';



fragment DIGIT        : ('0'..'9')  ;
fragment LETTER     : ('a'..'z') | ('A'..'Z') ;
fragment WORD_CHAR    : '_' | '&' | ',';

In this example I've added a definition for DIRT that catches spaces.
However, in my real project strict parsing would be a pain, so I'm fuzzy
parsing with filter=true.  My problem is that the output only produces
'wibble' if filter=false.  I've read the docs but haven't seen anything that
would explain why that would be the case.

Simply put, my question is how can I run java code from within ANTLR if I
use the filter option?

Thanks for your help.

alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080305/3bf1f861/attachment.html 

From antlr at mirality.co.nz  Wed Mar  5 23:05:20 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 06 Mar 2008 20:05:20 +1300
Subject: [antlr-interest] Why is Filter thwarting me?
In-Reply-To: <2b5f47650803052253y22e4ac4ala067bb083008e72@mail.gmail.com
 >
References: <2b5f47650803052253y22e4ac4ala067bb083008e72@mail.gmail.com>
Message-ID: <20080306070539.3CAAF11EB62@www.antlr.org>

At 19:53 6/03/2008, alan brown wrote:
>I'm using 'filter=true' because I'm just trying to pluck out 
>parts of the input stream.  However, setting filter to true seems 
>to prevent my java code from running.  Here's an example:
>
>
>grammar wibble;
>
>options {filter=false;}

There's your problem right there :)  (Assuming you'd put 
filter=true instead.)

'filter=true' is a lexer option, and only works in lexer-only 
grammars.  It should actually produce a compiler error in other 
cases, but sadly at the moment it doesn't.

Change your "grammar" to "lexer grammar" and remove the parser 
rules, and it should work properly.  (You can then create a 
separate "parser grammar" to deal with the output, if you want.)


From listbrownie at gmail.com  Wed Mar  5 23:54:27 2008
From: listbrownie at gmail.com (alan brown)
Date: Wed, 5 Mar 2008 23:54:27 -0800
Subject: [antlr-interest] Why is Filter thwarting me?
In-Reply-To: <47cf97c1.1187460a.6eb5.554aSMTPIN_ADDED@mx.google.com>
References: <2b5f47650803052253y22e4ac4ala067bb083008e72@mail.gmail.com>
	<47cf97c1.1187460a.6eb5.554aSMTPIN_ADDED@mx.google.com>
Message-ID: <2b5f47650803052354g186616a2s556a00d0214f501c@mail.gmail.com>

Hmmmm.  I was unaware that grammars and lexers are frequently split into
different files.  It seems that putting the lexer in its own file is no
problem, but when I put the parser in its own file it complains (in red in
intellij) that it can't find any of the tokens my rule is referring to.

Is there some sort of #include that enables my parser to know where it's
looking for the tokens or should I consider the red squiggles under all my
token names as decoration?  :)

Also, I'm confused about your explanation (though it does seem to help).  If
filter=true is only a lexer rule then why should it be a problem defining it
in a hybrid (lexer/parser) grammar file?  Surely, as a lexer rule it should
only affect the lexer.

Currently, for lack of a better solution, I'm committing the cardinal sin of
having the lexer code in one file (with filter=true) and both the parser and
lexer in the other file, though it only generates the parser code of course.

I know I'm following worst practices here.  Can someone please illuminate
me?

alan

On Wed, Mar 5, 2008 at 11:05 PM, Gavin Lambert <antlr at mirality.co.nz> wrote:

> At 19:53 6/03/2008, alan brown wrote:
> >I'm using 'filter=true' because I'm just trying to pluck out
> >parts of the input stream.  However, setting filter to true seems
> >to prevent my java code from running.  Here's an example:
> >
> >
> >grammar wibble;
> >
> >options {filter=false;}
>
> There's your problem right there :)  (Assuming you'd put
> filter=true instead.)
>
> 'filter=true' is a lexer option, and only works in lexer-only
> grammars.  It should actually produce a compiler error in other
> cases, but sadly at the moment it doesn't.
>
> Change your "grammar" to "lexer grammar" and remove the parser
> rules, and it should work properly.  (You can then create a
> separate "parser grammar" to deal with the output, if you want.)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080305/2a6c80e2/attachment.html 

From antlr at mirality.co.nz  Thu Mar  6 00:05:09 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 06 Mar 2008 21:05:09 +1300
Subject: [antlr-interest] Why is Filter thwarting me?
In-Reply-To: <2b5f47650803052354g186616a2s556a00d0214f501c@mail.gmail.co
 m>
References: <2b5f47650803052253y22e4ac4ala067bb083008e72@mail.gmail.com>
	<47cf97c1.1187460a.6eb5.554aSMTPIN_ADDED@mx.google.com>
	<2b5f47650803052354g186616a2s556a00d0214f501c@mail.gmail.com>
Message-ID: <20080306080823.C502611EB60@www.antlr.org>

At 20:54 6/03/2008, alan brown wrote:
>Hmmmm.  I was unaware that grammars and lexers are frequently 
>split into different files.  It seems that putting the lexer in 
>its own file is no problem, but when I put the parser in its own 
>file it complains (in red in intellij) that it can't find any of 
>the tokens my rule is referring to.
>
>Is there some sort of #include that enables my parser to know 
>where it's looking for the tokens or should I consider the red 
>squiggles under all my token names as decoration?  :)

lexer grammar foo;
options { filter=true; }
...

parser grammar bar;
options { tokenVocab=foo; }
...

See: <http://www.antlr.org/wiki/display/ANTLR3/Grammar+options>

>Also, I'm confused about your explanation (though it does seem to 
>help).  If filter=true is only a lexer rule then why should it be 
>a problem defining it in a hybrid (lexer/parser) grammar 
>file?  Surely, as a lexer rule it should only affect the lexer.

Because the point of hybrid grammars is to let you introduce 
additional tokens in parser rules (which get autogenerated into 
lexer rules), and one of the points of filter mode is to have a 
specific author-defined ordering of lexer rules.  The two goals 
conflict.


From listbrownie at gmail.com  Thu Mar  6 00:18:19 2008
From: listbrownie at gmail.com (alan brown)
Date: Thu, 6 Mar 2008 00:18:19 -0800
Subject: [antlr-interest] Why is Filter thwarting me?
In-Reply-To: <47cfa677.0b87460a.2f53.6c95SMTPIN_ADDED@mx.google.com>
References: <2b5f47650803052253y22e4ac4ala067bb083008e72@mail.gmail.com>
	<47cf97c1.1187460a.6eb5.554aSMTPIN_ADDED@mx.google.com>
	<2b5f47650803052354g186616a2s556a00d0214f501c@mail.gmail.com>
	<47cfa677.0b87460a.2f53.6c95SMTPIN_ADDED@mx.google.com>
Message-ID: <2b5f47650803060018ga20b88eg7b5d746a2e079159@mail.gmail.com>

Thanks for the concise clarification.  You can't beat a good active
newsgroup where blocks get unblocked at midnight! (though I presume you're
probably not in my timezone).

Cheers,

alan

On Thu, Mar 6, 2008 at 12:05 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:

> At 20:54 6/03/2008, alan brown wrote:
> >Hmmmm.  I was unaware that grammars and lexers are frequently
> >split into different files.  It seems that putting the lexer in
> >its own file is no problem, but when I put the parser in its own
> >file it complains (in red in intellij) that it can't find any of
> >the tokens my rule is referring to.
> >
> >Is there some sort of #include that enables my parser to know
> >where it's looking for the tokens or should I consider the red
> >squiggles under all my token names as decoration?  :)
>
> lexer grammar foo;
> options { filter=true; }
> ...
>
> parser grammar bar;
> options { tokenVocab=foo; }
> ...
>
> See: <http://www.antlr.org/wiki/display/ANTLR3/Grammar+options>
>
> >Also, I'm confused about your explanation (though it does seem to
> >help).  If filter=true is only a lexer rule then why should it be
> >a problem defining it in a hybrid (lexer/parser) grammar
> >file?  Surely, as a lexer rule it should only affect the lexer.
>
> Because the point of hybrid grammars is to let you introduce
> additional tokens in parser rules (which get autogenerated into
> lexer rules), and one of the points of filter mode is to have a
> specific author-defined ordering of lexer rules.  The two goals
> conflict.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/37cc694f/attachment-0001.html 

From felix_do at web.de  Thu Mar  6 04:54:09 2008
From: felix_do at web.de (Felix Dorner)
Date: Thu, 06 Mar 2008 13:54:09 +0100
Subject: [antlr-interest] rewrite smth like "type: (primitive|complex)
	multiplicity?"
Message-ID: <47CFE971.90008@web.de>

Hey,

I have a grammar rule for specifying the type of a variable.

vardef : Identifier ':' type;
type : (PrimitiveType | complexType) ('['IntegerLiteral']')?;

PrimitiveType : 'int' | 'boolean';
complexType : Identifier ('*' Identifier)* -> Identifier+;

I'd like the trees for vardefs like this, i.e. introduce an additional 
type subtree.

(VAR i  (TYPE int 4))
(VAR j  (TYPE int))
(VAR k (TYPE abc def ghi 5))

To achieve this I try something like:

type : ... -> ^(TYPE (PrimitiveType | ComplexType) IntegerLiteral? // or
type: (e=...) ->^(TYPE $e.tree IntegerLiteral?

but this does not work. I can't find another solution but to respecify 
the type rule like this:

type : primitiveType ('['IntegerLiteral']'?) ->  ^(TYPE primitiveType  
IntegerLiteral?)
        | complexType ('[IntegerLiteral']' )?-> ^(TYPE complexType 
IntegerLiteral?)

I bet there are solutions with more style? Thanks,
Felix





From felix_do at web.de  Thu Mar  6 05:05:31 2008
From: felix_do at web.de (Felix Dorner)
Date: Thu, 06 Mar 2008 14:05:31 +0100
Subject: [antlr-interest] rewrite smth like "type: (primitive|complex)
 multiplicity?"
In-Reply-To: <47CFE971.90008@web.de>
References: <47CFE971.90008@web.de>
Message-ID: <47CFEC1B.4050905@web.de>

Felix Dorner wrote:
> Hey,
>
> I have a grammar rule for specifying the type of a variable.
>
> vardef : Identifier ':' type;
> type : (PrimitiveType | complexType) ('['IntegerLiteral']')?;
>
> PrimitiveType : 'int' | 'boolean';
> complexType : Identifier ('*' Identifier)* -> Identifier+;
>
Ok, I could rewrite the rules like that:

type : basetype ('['IntegerLiteral']')? -> ^(TYPE basetype IntegerLiteral?)
basetype : Primitivetype | complexType
...

Anyway, comments are welcome.
Felix



From gudnabrsam at yahoo.com  Thu Mar  6 08:03:30 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Thu, 6 Mar 2008 08:03:30 -0800 (PST)
Subject: [antlr-interest] lexer woes
In-Reply-To: <542079.42723.qm@web55915.mail.re3.yahoo.com>
Message-ID: <268424.84081.qm@web55109.mail.re4.yahoo.com>


--- Loring Craymer <lgcraymer at yahoo.com> wrote:

> There is also some significant analysis to remove
> BACKTRACK_SYNPREDs when they are not needed.  For
> this case, they would not be needed (LL* is
> sufficient), so they are removed and you are back to
> the FOLLOW set problem.

Okay... I definitely need to keep reading Dragon if I
want to actually understand the FOLLOW set problem;
however, going back to your first response, that's
just how it goes, fragments are of dubious utility for
the time being and as long as I bear that in mind I
just might be able to come up with a properly
functioning, if less-than-aesthetically-specified,
lexer?  Does that sum it up?  Thanks for all your
attention here, L.

-Matt

> 
> --Loring
> 
> 
> 
> ----- Original Message ----
> > From: Matt Benson <gudnabrsam at yahoo.com>
> > To: Loring Craymer <lgcraymer at yahoo.com>; Gavin
> Lambert <antlr at mirality.co.nz>; Antlr List
> <antlr-interest at antlr.org>
> > Sent: Wednesday, March 5, 2008 3:55:13 PM
> > Subject: Re: [antlr-interest] lexer woes
> > 
> > 
> > --- Loring Craymer  wrote:
> > 
> > > Setting backtracking in combined grammars only
> > > affects the parser (again, see the
> prefixWithSynPred
> > > code); from the code, though, setting
> > > backtracking=true in lexer grammars does
> introduce
> > > synpreds at all decision points.
> > > 
> > 
> > From the code... but try to tool this:
> > ----
> > lexer grammar EasyLexer;
> > options {
> >     backtrack=true;
> >     memoize=true;
> > }
> > 
> > Ident
> >     :    Letter (Letter|Digit)*
> >     ;
> > 
> > fragment
> > Letter 
> >     :    'A'..'Z'|'a'..'z'|'_'
> >     ;
> > 
> > fragment
> > Digit
> >     :    '0'..'9'
> >     ;
> > 
> > ---
> > 
> > Does it work, or have I had too much crack?
> > 
> > -Matt
> > 
> > > --Loring
> > > 
> > > ----- Original Message ----
> > > > From: Gavin Lambert 
> > > > To: Loring Craymer ; Matt
> > > Benson ; Antlr List
> > > 
> > > > Sent: Wednesday, March 5, 2008 12:09:41 AM
> > > > Subject: Re: [antlr-interest] lexer woes
> > > > 
> > > > At 11:35 5/03/2008, Loring Craymer wrote:
> > > >  >> 1) Whether backtracking mode is supported
> for
> > > lexers,
> > > >  >1.)  Yes--see calls to prefixWithSynPred()
> in
> > > antlr.g
> > > > 
> > > > I think that answer is a little misleading :)
> > > > 
> > > > As far as I know, the "backtrack=true" option
> has
> > > no effect in the 
> > > > lexer.  However, backtracking in general is
> > > supported through 
> > > > adding your own syntactic predicates.
> > > > 
> > > > Note that syntactic predicates can only be
> used to
> > > disambiguate 
> > > > between alts in a single rule -- you can't use
> > > them to distinguish 
> > > > between tokens at the top level.  (If you need
> to
> > > do that, you'll 
> > > > have to merge the rules.)
> > > > 
> > > > 
> > > 
> > > 
> > > 
> > > 
> > >      
> > >
> >
>
____________________________________________________________________________________
> > > Never miss a thing.  Make Yahoo your home page. 
> > > http://www.yahoo.com/r/hs
> > > 
> > 
> > 
> > 
> >       
> >
>
____________________________________________________________________________________
> > Never miss a thing.  Make Yahoo your home page. 
> > http://www.yahoo.com/r/hs
> > 
> 
> 
> 
> 
>      
>
____________________________________________________________________________________
> Looking for last minute shopping deals?  
> Find them fast with Yahoo! Search. 
>
http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> 



      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 


From andmej at gmail.com  Thu Mar  6 08:25:16 2008
From: andmej at gmail.com (=?ISO-8859-1?Q?Andr=E9s_Mej=EDa?=)
Date: Thu, 6 Mar 2008 11:25:16 -0500
Subject: [antlr-interest] How do I compile a generated lexer?
Message-ID: <45f830cc0803060825q4e89b3davac817fa64ec01158@mail.gmail.com>

Hello,
I'm totally new to AntLR.
I created a simple grammar for a lexer in ANTLRWorks and generated it via
the "Generate" menu. However, when I'm going to compile the generated Java
code I get an error.

I'm compiling it using "javac mygrammarLexer.java". I'm running Ubuntu
7.10and installed ANTLR via apt-get, the package manager of Ubuntu.

This is the error I get when I try to compile:

$ javac locoTokensLexer.java
> locoTokensLexer.java:3: package org.antlr.runtime does not exist
> import org.antlr.runtime.*;
> ^
> locoTokensLexer.java:8: cannot find symbol
> symbol: class Lexer
> public class locoTokensLexer extends Lexer {
>                                      ^
>

Then I get a lot of other errors.

I've tried compiling using "javac -classpath X mygrammarLexer.java" where X
has taken different values: The path to where antlrworks-1.1.7.jar is, the
path to where antlr.jar is (/usr/share/java on my system) and some other
things...

I'd appreciate your help, because online documentation of AntLR seems to be
disorganized and hard to navigate.

Thanks in advance!
-- 
Andr?s Mej?a
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/025ac12c/attachment.html 

From lilypondtool at organum.hu  Thu Mar  6 08:35:46 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Thu, 06 Mar 2008 17:35:46 +0100
Subject: [antlr-interest] How do I compile a generated lexer?
In-Reply-To: <45f830cc0803060825q4e89b3davac817fa64ec01158@mail.gmail.com>
References: <45f830cc0803060825q4e89b3davac817fa64ec01158@mail.gmail.com>
Message-ID: <47D01D62.1080405@organum.hu>

Note that to fully use Antlr you should have a solid knowledge of Java. 
The jar file itself must be in the classpath, not the path of the jar.

Bert


Andr?s Mej?a wrote:
> Hello,
> I'm totally new to AntLR.
> I created a simple grammar for a lexer in ANTLRWorks and generated it 
> via the "Generate" menu. However, when I'm going to compile the 
> generated Java code I get an error.
>
> I'm compiling it using "javac mygrammarLexer.java". I'm running Ubuntu 
> 7.10 and installed ANTLR via apt-get, the package manager of Ubuntu.
>
> This is the error I get when I try to compile:
>
>     $ javac locoTokensLexer.java
>     locoTokensLexer.java:3: package org.antlr.runtime does not exist
>     import org.antlr.runtime.*;
>     ^
>     locoTokensLexer.java:8: cannot find symbol
>     symbol: class Lexer
>     public class locoTokensLexer extends Lexer {
>                                          ^
>
>
> Then I get a lot of other errors.
>
> I've tried compiling using "javac -classpath X mygrammarLexer.java" 
> where X has taken different values: The path to where 
> antlrworks-1.1.7.jar is, the path to where antlr.jar is 
> (/usr/share/java on my system) and some other things...
>
> I'd appreciate your help, because online documentation of AntLR seems 
> to be disorganized and hard to navigate.
>
> Thanks in advance!
> -- 
> Andr?s Mej?a


-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/1b1d0b85/attachment.html 

From kenneth.domino at domemtech.com  Thu Mar  6 09:45:16 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Thu, 6 Mar 2008 12:45:16 -0500
Subject: [antlr-interest] A very simple grammar problem.
Message-ID: <18D658032E2F4F849517C0EA06FAF464@pc2008>

Hi,

I seem to be phasing out.  I thought that this grammar should work, but it doesn't:

grammar test_not_ok;

a : 'A' a
  | 'A'
  ;

$ java org.antlr.Tool test_not_ok.g
ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
warning(138): test_not_ok.g:0:0: grammar test_not_ok: no start rule (no rule can
 obviously be followed by EOF)
warning(201): test_not_ok.g:3:3: The following alternatives are unreachable: 2


But, this one works, which specifies the same language if I'm not wrong:

grammar test_ok;

a : b
  ;

b : 'A' b
  | 'A'
  ;

The only difference is the extra production at the top.
Do I have to manually augment all my grammars with an EOF rule (S->... to S' -> S EOF)
or something else? What am I doing wrong here?

Ken Domino
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/24261d1c/attachment.html 

From antlr at mirality.co.nz  Thu Mar  6 10:51:58 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 07 Mar 2008 07:51:58 +1300
Subject: [antlr-interest] A very simple grammar problem.
In-Reply-To: <18D658032E2F4F849517C0EA06FAF464@pc2008>
References: <18D658032E2F4F849517C0EA06FAF464@pc2008>
Message-ID: <20080306185219.24DED11EC79@www.antlr.org>

At 06:45 7/03/2008, Kenneth Domino wrote:
>warning(138): test_not_ok.g:0:0: grammar test_not_ok: no start 
>rule (no rule can
>  obviously be followed by EOF)

It's a good idea to have an explicit start rule that ends in 
EOF.  (Doesn't have to actually be called 'start', though.)  If 
you don't do this, then the parser may simply give up early 
instead of reporting an error towards the end of the input, since 
by leaving out the EOF you've basically told it that it doesn't 
have to consume all the input.

>warning(201): test_not_ok.g:3:3: The following alternatives are 
>unreachable: 2
[...]
>b : 'A' b
>   | 'A'
>   ;

It's not a good idea to have alts with common left prefixes; this 
can sometimes get the lookahead into trouble (which is probably 
why you got the warning above).  Instead try:

b : 'A' b?;

However this is a recursive rule, and wherever possible you should 
replace recursion with iteration (since recursion eats up stack 
space, but iteration doesn't):

b : 'A'+;

And so as a complete grammar this ought to work:

grammar test;

b : 'A'+ EOF;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080307/7377cf1b/attachment-0001.html 

From lgcraymer at yahoo.com  Thu Mar  6 12:17:12 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Thu, 6 Mar 2008 12:17:12 -0800 (PST)
Subject: [antlr-interest] lexer woes
Message-ID: <322666.57939.qm@web55904.mail.re3.yahoo.com>

Say rather that fragments should be called with care for the time being than that they are of dubious utility.  There is no problem in calling fragments as tail calls or when there is no ambiguity.  This is basically a "growing pains" problem--solutions which fix this one are likely to enable better lexer analysis and make it easy to provide lexer states (at least the mTokens part of the problem).

--Loring

----- Original Message ----
> From: Matt Benson <gudnabrsam at yahoo.com>
> To: Loring Craymer <lgcraymer at yahoo.com>; Gavin Lambert <antlr at mirality.co.nz>; Antlr List <antlr-interest at antlr.org>
> Sent: Thursday, March 6, 2008 8:03:30 AM
> Subject: Re: [antlr-interest] lexer woes
> 
> 
> --- Loring Craymer  wrote:
> 
> > There is also some significant analysis to remove
> > BACKTRACK_SYNPREDs when they are not needed.  For
> > this case, they would not be needed (LL* is
> > sufficient), so they are removed and you are back to
> > the FOLLOW set problem.
> 
> Okay... I definitely need to keep reading Dragon if I
> want to actually understand the FOLLOW set problem;
> however, going back to your first response, that's
> just how it goes, fragments are of dubious utility for
> the time being and as long as I bear that in mind I
> just might be able to come up with a properly
> functioning, if less-than-aesthetically-specified,
> lexer?  Does that sum it up?  Thanks for all your
> attention here, L.
> 
> -Matt
> 
> > 
> > --Loring
> > 
> > 
> > 
> > ----- Original Message ----
> > > From: Matt Benson 
> > > To: Loring Craymer ; Gavin
> > Lambert ; Antlr List
> > 
> > > Sent: Wednesday, March 5, 2008 3:55:13 PM
> > > Subject: Re: [antlr-interest] lexer woes
> > > 
> > > 
> > > --- Loring Craymer  wrote:
> > > 
> > > > Setting backtracking in combined grammars only
> > > > affects the parser (again, see the
> > prefixWithSynPred
> > > > code); from the code, though, setting
> > > > backtracking=true in lexer grammars does
> > introduce
> > > > synpreds at all decision points.
> > > > 
> > > 
> > > From the code... but try to tool this:
> > > ----
> > > lexer grammar EasyLexer;
> > > options {
> > >     backtrack=true;
> > >     memoize=true;
> > > }
> > > 
> > > Ident
> > >     :    Letter (Letter|Digit)*
> > >     ;
> > > 
> > > fragment
> > > Letter 
> > >     :    'A'..'Z'|'a'..'z'|'_'
> > >     ;
> > > 
> > > fragment
> > > Digit
> > >     :    '0'..'9'
> > >     ;
> > > 
> > > ---
> > > 
> > > Does it work, or have I had too much crack?
> > > 
> > > -Matt
> > > 
> > > > --Loring
> > > > 
> > > > ----- Original Message ----
> > > > > From: Gavin Lambert 
> > > > > To: Loring Craymer ; Matt
> > > > Benson ; Antlr List
> > > > 
> > > > > Sent: Wednesday, March 5, 2008 12:09:41 AM
> > > > > Subject: Re: [antlr-interest] lexer woes
> > > > > 
> > > > > At 11:35 5/03/2008, Loring Craymer wrote:
> > > > >  >> 1) Whether backtracking mode is supported
> > for
> > > > lexers,
> > > > >  >1.)  Yes--see calls to prefixWithSynPred()
> > in
> > > > antlr.g
> > > > > 
> > > > > I think that answer is a little misleading :)
> > > > > 
> > > > > As far as I know, the "backtrack=true" option
> > has
> > > > no effect in the 
> > > > > lexer.  However, backtracking in general is
> > > > supported through 
> > > > > adding your own syntactic predicates.
> > > > > 
> > > > > Note that syntactic predicates can only be
> > used to
> > > > disambiguate 
> > > > > between alts in a single rule -- you can't use
> > > > them to distinguish 
> > > > > between tokens at the top level.  (If you need
> > to
> > > > do that, you'll 
> > > > > have to merge the rules.)
> > > > > 
> > > > > 
> > > > 
> > > > 
> > > > 
> > > > 
> > > >      
> > > >
> > >
> >
> ____________________________________________________________________________________
> > > > Never miss a thing.  Make Yahoo your home page. 
> > > > http://www.yahoo.com/r/hs
> > > > 
> > > 
> > > 
> > > 
> > >       
> > >
> >
> ____________________________________________________________________________________
> > > Never miss a thing.  Make Yahoo your home page. 
> > > http://www.yahoo.com/r/hs
> > > 
> > 
> > 
> > 
> > 
> >      
> >
> ____________________________________________________________________________________
> > Looking for last minute shopping deals?  
> > Find them fast with Yahoo! Search. 
> >
> http://tools.search.yahoo.com/newsearch/category.php?category=shopping
> > 
> 
> 
> 
>       
> ____________________________________________________________________________________
> Be a better friend, newshound, and 
> know-it-all with Yahoo! Mobile.  Try it now.  
> http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 
> 
> 




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From scottp at sonic.net  Thu Mar  6 14:29:32 2008
From: scottp at sonic.net (Scott Petler)
Date: Thu, 06 Mar 2008 14:29:32 -0800
Subject: [antlr-interest] generating C - error message
Message-ID: <47D0704C.8040709@sonic.net>

I want to try and generate C rather than C++, but when I change the 
Language target I get an error message about a missing code generator.  
I installed antlr from debian dselect.  Is there a library I need to do 
this? where would it be installed?
Also, is the version on Debian (2.7.7), able to support C generation?

Thanks,
Scott

options {
    language="Cpp";
}

works ok...

When I change to:

options {
    language="C";
}

twin ~ $ runantlr verilog.g
Running java antlr.Tool $* with /usr/share/java/antlr.jar appended to 
the CLASSPATH variable
ANTLR Parser Generator   Version 2.7.7 (20080228)   1989-2005
panic: Cannot instantiate code-generator: antlr.CCodeGenerator


From karlgold at yahoo.com  Thu Mar  6 15:12:52 2008
From: karlgold at yahoo.com (Karl Goldstein)
Date: Thu, 6 Mar 2008 15:12:52 -0800 (PST)
Subject: [antlr-interest] How to abort lexer when invalid token encountered?
Message-ID: <397264.86800.qm@web50007.mail.re2.yahoo.com>

I'm writing a parser for a simple SQL-like query language.  If the lexer encounters an invalid token (say for an unbalanced quote), I want to abort parsing immediately (no recovery) and return the character position of the invalid token  to the client.
  Looking at the generated code for my parser and lexer, it appears that the default behavior when parsing a query is:
  1) parser calls LT(1) on the token stream.
2) token stream fills the buffer with tokens from the lexer by calling lexer.nextToken
3) Lexer.nextToken catches all RecognitionExceptions and recovers from them
  What is the best way to override this behavior, and just bubble up the RecognitionException to the caller of the parser?  I got something to work by overriding reportError and throwing a runtime version of RecognitionException, but I have to believe there's a cleaner way to do this.  My grammar is below.
  Any other comments on my grammar more than welcome, this is my first time using ANTLR.
  Thanks,
  Karl
  -----
  grammar Cql;
  options {
  language=Java;
  output=AST;
  ASTLabelType=CommonTree;
}
  tokens {
  ROOT;
}
  @header {
package com.-----.query;
}
  @lexer::header {
package com.-----.query;
}
  @members {
  protected void mismatch(IntStream input, int ttype, BitSet follow)
    throws RecognitionException {
    throw new MismatchedTokenException(ttype, input);
  }
  
  public void recoverFromMismatchedSet(IntStream input,
    RecognitionException e, BitSet follow)
    throws RecognitionException {
    throw e;
  }
}
  @rulecatch {
  catch (RecognitionException e) {
    throw e;
  }
}
  @lexer::members {
  public void reportError(RecognitionException e) {
    throw new RecognitionRuntimeException(e);
  }
}
  query: 
  'select' fieldlist 'from' TABLE ('where' criteria)? ->
  ^(ROOT ^('select' fieldlist) ^('from' TABLE) ^('where' criteria)?);
  fieldlist: FIELD (',' FIELD)* -> FIELD+;
  // placeholder for set of supported tables
TABLE: 'table' ;
 
BOOLEAN: ('and' | 'or');
 
criteria: criterion (BOOLEAN^ criterion)*;
  OPERATOR: ('=' | '>' | '<');
  criterion: 
  FIELD OPERATOR operand -> ^(OPERATOR FIELD operand) 
  |  '(' criteria ')' -> ^(ROOT criteria);
 
operand : (FIELD | STRING_LITERAL | NUMBER | DATE);
  FIELD: ('a'..'z' | 'A'..'Z')+;
  fragment
DIGIT: '0'..'9';
  DATE: DIGIT DIGIT? ('/' | '-') DIGIT DIGIT (DIGIT DIGIT)? ;
  NUMBER: DIGIT+ | DIGIT+ ('.' DIGIT*) | '.' DIGIT+;
  fragment
QUOTED_CHARACTER: 
  ( ~( '\'' | '\\' ) ) | '\\' ( ( '\'' | '\\' ) );
  STRING_LITERAL: 
  '\''! ( QUOTED_CHARACTER )* '\''!;
  WS: (' ')+ { skip(); } ;


       
---------------------------------
Never miss a thing.   Make Yahoo your homepage.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/bdffa791/attachment.html 

From lefevrol at yahoo.com  Thu Mar  6 16:26:32 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Fri, 07 Mar 2008 01:26:32 +0100
Subject: [antlr-interest] How to abort lexer when invalid token
	encountered?
In-Reply-To: <397264.86800.qm@web50007.mail.re2.yahoo.com>
References: <397264.86800.qm@web50007.mail.re2.yahoo.com>
Message-ID: <fqq241$t6s$1@ger.gmane.org>

Karl Goldstein wrote:
> I'm writing a parser for a simple SQL-like query language.  If the lexer 
> encounters an invalid token (say for an unbalanced quote), I want to 
> abort parsing immediately (no recovery) and return the character 
> position of the invalid token  to the client.

You could check within an action and throw an exception that is *not* a
subclass of RecognitionException: ANTLR is "blind" to those, so it will
bubble up all the way to the top of the stack and your program will die.
That way you can dispense with all those overrides in the header.

-- O.L.


From listbrownie at gmail.com  Thu Mar  6 17:27:05 2008
From: listbrownie at gmail.com (alan brown)
Date: Thu, 6 Mar 2008 17:27:05 -0800
Subject: [antlr-interest] Antlr used in Intellij
Message-ID: <2b5f47650803061727j6f6da358o262db68187583576@mail.gmail.com>

Does everyone else suffer from the inability to use Edit/Undo while editing
their .g files in Intellij or is this just a Mac issue or is this just a
gremlin specific to my personal world.  I accidentally hit the select-all
key stroke and then hit a key and lost all changes since the last save
because cmd-Z isn't supported in .g files for me.  Grrrr, etc...

alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/556f7f7a/attachment.html 

From listbrownie at gmail.com  Thu Mar  6 17:51:14 2008
From: listbrownie at gmail.com (alan brown)
Date: Thu, 6 Mar 2008 17:51:14 -0800
Subject: [antlr-interest] No lexer rules matched
Message-ID: <2b5f47650803061751l41ed228exf5bf9d7251b66074@mail.gmail.com>

I've split my lexer and parser up and am using tokenVocab to tell my parser
where to find the lexer rules.  As follows:

grammar FParser;

options {tokenVocab=FLexer; backtrack=true; k=15;}

@synpredgate { true }


@header {
package parse.grammar;

import parse.beans.*;
}

@members {
    F builder = new FBuilder();
}


f_hh_file        : ftp_hh+ ;

f_hh            : {System.out.println("WIBBLE");}
            introduction betting_rounds


However, when I run the parser I get the following odd output on the
console:

[17:43:53] warning(105): /src/parse/grammar/FParser.g:124:15: no lexer rule
corresponding to token: NUMBER
[17:43:53] warning(105): /src/parse/grammar/FParser.g:126:26: no lexer rule
corresponding to token: NL
[17:43:53] warning(105): /src/parse/grammar/FParser.g:101:38: no lexer rule
corresponding to token: NL
[17:43:53] warning(105): /src/parse/grammar/FParser.g:77:33: no lexer rule
corresponding to token: L_PAREN
[17:43:53] warning(105): /src/parse/grammar/FParser.g:122:54: no lexer rule
corresponding to token: R_PAREN

which clearly bodes ill.  Also, further bafflement ensues when I see that
the output is reading in every other character and skipping the ones in
between.

line 1:0 mismatched character 'F' expecting ','
line 1:2 mismatched character 'l' expecting ','
line 1:4 mismatched character ' ' expecting ','
line 1:6 mismatched character 'i' expecting ','
line 1:8 mismatched character 't' expecting ','
line 1:10 mismatched ch...

I'm not surprised it's not tokenized the characters into words because of
it's inability to find the lexer rules corresponding to the tokens but I'm
not sure why it only reads every second char.

Finding the lexer rules is the prime problem but I'm curious if someone
could explain the second too.

BTW - my tokenVocab attribute appears to be correct because when it's not
there the editor shows all my tokens as being unknown and underlined in
red.

Thanks for your help.  I really like this IDE but this whole field has quite
a learning curve </understatement>

Thanks,

alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/eeee1ad4/attachment.html 

From kenneth.domino at domemtech.com  Thu Mar  6 18:06:13 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Thu, 6 Mar 2008 21:06:13 -0500
Subject: [antlr-interest] citation
In-Reply-To: <ef5132890803011347m192b7480k361a82800c30311d@mail.gmail.com>
References: <ef5132890803011347m192b7480k361a82800c30311d@mail.gmail.com>
Message-ID: <F9A6BECACC1D43B1A512F5A397395049@pc2008>

Hi,

I was just looking for all papers on ANTLR and though about your
problem.  Search for the citation using Google Scholar
(http://scholar.google.com/scholar?q=antlr&hl=en&lr=).  I think the
one at the top, published in 1995 that was cited by 175 other papers
is the one you want.

If you're really into tech, you could import the citation into Endnote
and generate a reference in the format appropriate for your paper.  In
Google Scholar, set the "Bibliography Manager" to Endnote under
Scholar Preferences
http://scholar.google.com/scholar_preferences?q=antlr&hl=en&lr= then
save.  When you return back to the search, you can then select "Import
to Endnote" to download the citation.  When you write your paper,
you can select the citation style and have Endnote generate a reference
in Word or separately.  But, it probably only makes sense if you have
a lot of papers being cited.

Ken Domino



----- Original Message ----- 
From: Peter Bulychev 
To: antlr-interest at antlr.org 
Sent: Saturday, March 01, 2008 4:47 PM
Subject: [antlr-interest] citation


Hello.

How should I cite ANTLR in my scientific paper?

-- 
Best regards,
   Peter Bulychev. 

From ae.armstrong at gmail.com  Thu Mar  6 20:59:41 2008
From: ae.armstrong at gmail.com (Aaron Armstrong)
Date: Thu, 6 Mar 2008 20:59:41 -0800
Subject: [antlr-interest] Pruning the Parse Tree
Message-ID: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>

Using the Java grammar, I turned off memoization and was able to get a parse
tree.

However, given this grammar:

memberDecl
 : genericMethodOrConstructorDecl
 | methodDeclaration
 | fieldDeclaration
 | ...;

portions of code with a field declaration yield both a method declaration
and a field declaration,
as the parser tries to parse out a methodDeclaration for the input before it
decides that it is
a fieldDeclaration.  Both are found in the final parse tree, and I need to
get rid of the
superfluous nodes.  I don't know if this is default antlr behavior or if
this is a bug.

Anyway, if anybody has had problems with this and there is a solution, let
me know.

Thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080306/71a77b9c/attachment.html 

From antlr at mirality.co.nz  Fri Mar  7 00:17:06 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 07 Mar 2008 21:17:06 +1300
Subject: [antlr-interest] generating C - error message
In-Reply-To: <47D0704C.8040709@sonic.net>
References: <47D0704C.8040709@sonic.net>
Message-ID: <20080307081750.EC71211EB91@www.antlr.org>

At 11:29 7/03/2008, Scott Petler wrote:
 >I want to try and generate C rather than C++, but when I change
 >the Language target I get an error message about a missing code
 >generator.

That's because ANTLR v2 (which you appear to be using) doesn't 
have a C language target -- only a C++ one.  If you want C you'll 
need to use ANTLR v3 instead (where the reverse is true).


From antlr at mirality.co.nz  Fri Mar  7 00:19:53 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 07 Mar 2008 21:19:53 +1300
Subject: [antlr-interest] No lexer rules matched
In-Reply-To: <2b5f47650803061751l41ed228exf5bf9d7251b66074@mail.gmail.co
 m>
References: <2b5f47650803061751l41ed228exf5bf9d7251b66074@mail.gmail.com>
Message-ID: <20080307082012.404BD11EB91@www.antlr.org>

At 14:51 7/03/2008, alan brown wrote:
>I've split my lexer and parser up and am using tokenVocab to tell 
>my parser where to find the lexer rules.  As follows:
>
>grammar FParser;
>
>options {tokenVocab=FLexer; backtrack=true; k=15;}

That should be "parser grammar", not just "grammar".


From pat at tireme.fr  Fri Mar  7 04:16:50 2008
From: pat at tireme.fr (Pierre Attar)
Date: Fri, 07 Mar 2008 13:16:50 +0100
Subject: [antlr-interest] Error in number recognition
Message-ID: <47D13232.6060503@tireme.fr>

Hi,

I hav a problem with number recognition. I use the following reduced 
grammar for recognizing sentences such as tensor[1,char[x],char[y]].

My problem ? When the DiacriticalNumber  is commented, everything goes 
well ; when it is active, antlr complains (even if it is not formally 
used in this reduced debugging grammar).

It seems that I have a problem with the rule but I do not understand 
which one.

grammar mff;
m : e=expression ;
expression :  (r=atomOp  | r=tensorOp ) ;
atomOp  :    (r=charact);
charact : 'char[' String  ']';
tensorOp      : 'tensor[' Number    ',' expression     (',' expression 
)+ ']'    ;

//DiacriticalNumber     : ('0'..'9')+  ','  ('0'..'9')+  ','  
('0'..'9')+  ','  ('0'..'9')+  ','  ('0'..'9')+;

StringNumber
    : ('\n0022'|'"') Number ('\n0022'|'"'); 
Number : ('0'..'9')+;
Decimal : ('0'..'9')+ '.' ('0'..'9')+;
String :     Letter+;
CompleteString :     (Letter | '0'..'9')+;
fragment Letter :     'a'..'z'|'A'..'Z';


Thanks a lot for help, Pierre





From antlr at shmuelhome.mine.nu  Fri Mar  7 06:46:34 2008
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Fri, 07 Mar 2008 16:46:34 +0200
Subject: [antlr-interest] Error in number recognition
In-Reply-To: <47D13232.6060503@tireme.fr>
References: <47D13232.6060503@tireme.fr>
Message-ID: <47D1554A.7040705@shmuelhome.mine.nu>

A few comments first.
0) I am guessing that antlr is complaining about a rule ambiguity (you 
don't say what the problem is). I am not sure since I can't duplicate 
what I think your problem is.
1) From your comment in parenthesis, it seems that you think that Lexer 
rules (those that start with a capital letter) are called from the 
parser. They are not. The lexer runs by itself to change a character 
string to a token string. The parser then sees if it recognizes the 
token string. So a lexer rule is ambiguous if the lexer doesn't know 
what token to generate.
2) The versions of ANTLR that I use object to referring to different 
parser rules with the same variable. So the expression rule generates 
bad code with regard to "r".

More seriously for me, I don't know why ANTLR is not complaining that 
Number, String and CompleteString are ambiguous. They look ambiguous to me.

Shmuel

Pierre Attar wrote:
> Hi,
>
> I hav a problem with number recognition. I use the following reduced 
> grammar for recognizing sentences such as tensor[1,char[x],char[y]].
>
> My problem ? When the DiacriticalNumber  is commented, everything goes 
> well ; when it is active, antlr complains (even if it is not formally 
> used in this reduced debugging grammar).
>
> It seems that I have a problem with the rule but I do not understand 
> which one.
>
> grammar mff;
> m : e=expression ;
> expression :  (r=atomOp  | r=tensorOp ) ;
> atomOp  :    (r=charact);
> charact : 'char[' String  ']';
> tensorOp      : 'tensor[' Number    ',' expression     (',' expression 
> )+ ']'    ;
>
> //DiacriticalNumber     : ('0'..'9')+  ','  ('0'..'9')+  ','  
> ('0'..'9')+  ','  ('0'..'9')+  ','  ('0'..'9')+;
>
> StringNumber
>    : ('\n0022'|'"') Number ('\n0022'|'"'); Number : ('0'..'9')+;
> Decimal : ('0'..'9')+ '.' ('0'..'9')+;
> String :     Letter+;
> CompleteString :     (Letter | '0'..'9')+;
> fragment Letter :     'a'..'z'|'A'..'Z';
>
>
> Thanks a lot for help, Pierre
>
>
>
>



From cmcknight at pheonic.com  Fri Mar  7 10:42:33 2008
From: cmcknight at pheonic.com (Charles McKnight)
Date: Fri, 07 Mar 2008 10:42:33 -0800
Subject: [antlr-interest] Migrating a PCCTS grammar to ANTRL 3.0
Message-ID: <47D18C99.5090004@pheonic.com>

I've got an old grammar written for PCCTS and I'm attempting to migrate 
it to ANTLR 3.0 with as little additional rework as possible. Are there 
any tips/references/etc. about doing this?

Thanks in advance.

From kenneth.domino at domemtech.com  Fri Mar  7 10:45:51 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Fri, 7 Mar 2008 13:45:51 -0500
Subject: [antlr-interest] A very simple grammar problem.
Message-ID: <2ADA1544652C4F45BC33515C58A78EAE@pc2008>

Gavin,

Thanks for your reply.

Sorry about not left-factoring my grammar; I forgot that this is an
LL-parser generator.

Well, this little example is helping to explain some problems I have
been having.  First, I've noticed that the generated parser seems to
accept illegal input for some grammars.  For example, the empty
language specified in the grammar "grammar does_not_match_empty; e :
;" would accept anything! I now understand that it should have been
"grammar really_matches_empty; e: EOF;".

In fact, I should think that because one will need to define a grammar
with a production "S' -> S EOF" or some equivalent, ANTLR would do the
construction for me.  Maybe this is part of a feature that I am
unaware of.  But, it is so different from what I'm used to (e.g.,
Yacc) in the LR parser world that I feel that the documentation and
examples should explain this better.  There is no mention of this in
Terr's book "The Definitive ANTLR Reference".

As a consequence, programming by example using some of the grammars in
the ANTLR Grammar List (http://www.antlr.org/grammar/list) has led me
into trouble.  Three of the five highlighted grammars do not define an
EOF-augmented grammar, including Java.g
(http://www.antlr.org/grammar/1152141644268/Java.g).  Unfortunately,
these grammars can accept illegal input without raising errors!  For
example, with the Java.g grammar, this input is accepted but
obviously illegal Java:

/* beginning of file */
import org.antlr.runtime.*;

public class Test {
    public static void main(String[] args) throws Exception {
    ANTLRInputStream input = new ANTLRInputStream(System.in);
    JavaLexer lexer = new JavaLexer(input);
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    JavaParser parser = new JavaParser(tokens);
    parser.compilationUnit();
    }
}

Here is the beginning of some illegal stuff, but not flagged!
Have a nice day!
/* end of file */

The second problem I was having was the error "no rule can obviously
be followed by EOF".  Maybe it is because of the common prefix in two
alternatives as you suggested.  But, I think there is a problem in the
ANTLR tool that searches for start symbols and adds end states to the
NFA constructed for the grammar.  This check occurs in the following
ANTLR code:

(In TreeToNFAConverter.java)
    protected void finish() {
        List rules = new LinkedList();
        rules.addAll(grammar.getRules());
        int numEntryPoints = factory.build_EOFStates(rules);
        if ( numEntryPoints==0 ) {
            ErrorManager.grammarWarning(ErrorManager.MSG_NO_GRAMMAR_START_RULE,
                                       grammar,
                                       null,
                                       grammar.name);
        }
    }

(In NFAFactory.java)
   /** add an EOF transition to any rule end NFAState that points to nothing
     *  (i.e., for all those rules not invoked by another rule).  These
     *  are start symbols then.
     *
     *  Return the number of grammar entry points; i.e., how many rules are
     *  not invoked by another rule (they can only be invoked from outside).
     *  These are the start rules.
     */
    public int build_EOFStates(List rules) {
        int numberUnInvokedRules = 0;
        for (Iterator iterator = rules.iterator(); iterator.hasNext();) {
            Rule r = (Rule) iterator.next();
            String ruleName = r.name;
            NFAState endNFAState = nfa.grammar.getRuleStopState(ruleName);
            // Is this rule a start symbol?  (no follow links)
            if ( endNFAState.transition(0)==null ) {
                // if so, then don't let algorithm fall off the end of
                // the rule, make it hit EOF/EOT.
                /*
                if ( nfa.grammar.type==Grammar.LEXER ) {
                    return; // 11/28/2005: try having only Tokens with EOT 
transition
                }
                if ( nfa.grammar.type!=Grammar.LEXER ||
                     ruleName.equals(Grammar.ARTIFICIAL_TOKENS_RULENAME) )
                {
                    build_EOFState(endNFAState);
                }
                */
                build_EOFState(endNFAState);
                // track how many rules have been invoked by another rule
                numberUnInvokedRules++;
            }
        }
        return numberUnInvokedRules;
    }

(In NFAFactory.java)
    /** set up an NFA NFAState that will yield eof tokens or,
     *  in the case of a lexer grammar, an EOT token when the conversion
     *  hits the end of a rule.
     */
    private void build_EOFState(NFAState endNFAState) {
        NFAState end = newState();
        int label = Label.EOF;
        if ( nfa.grammar.type==Grammar.LEXER ) {
            label = Label.EOT;
            end.setEOTTargetState(true);
        }
        /*
        System.out.println("build "+nfa.grammar.getTokenDisplayName(label)+
                           " loop on end of state 
"+endNFAState.getDescription()+
                           " to state "+end.stateNumber);
        */
        Transition toEnd = new Transition(label, end);
        endNFAState.addTransition(toEnd);
    }

Unfortunately, with the grammar "grammar test; a : 'A' a | 'A' ;", the
NFA constructed contains cycles so endNFAState.transition(0) is never
null, numberUnInvokedRules is never incremented in build_EOFStates(),
and the error message is printed.  One could simply add the rule "xxx:
;" to almost any grammar to bypass the error!  Debugging ANTLR using
the "test" grammar, it seems to me that the check isn't quite correct
because the NFA constructed should have labeled the NFA state after
the 'A' transition from the 2nd alternative as an "end" state.  But,
then again, I'm not sure how end states are labeled in ANTLR.

Ken Domino


From darien.hager at etelos-inc.com  Fri Mar  7 10:51:48 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Fri, 7 Mar 2008 10:51:48 -0800
Subject: [antlr-interest] Migrating a PCCTS grammar to ANTRL 3.0
In-Reply-To: <47D18C99.5090004@pheonic.com>
References: <47D18C99.5090004@pheonic.com>
Message-ID: <c8c997f40803071051l797ee388p12933f359c26a75@mail.gmail.com>

Well, anything on PCCTS->Antlr 2 will probably be pretty old... Hrm.
Perhaps these two in combination may help, but I'm just relying on my
google-fu here rather than actual knowledge:


http://www.antlr.org/article/1055465962038/index.html
http://www.antlr.org/wiki/pages/viewpage.action?pageId=719


-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080307/0d16fa73/attachment.html 

From antlr at jazillian.com  Fri Mar  7 12:04:26 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Fri, 07 Mar 2008 15:04:26 -0500
Subject: [antlr-interest] Migrating a PCCTS grammar to ANTRL 3.0
In-Reply-To: <47D18C99.5090004@pheonic.com>
References: <47D18C99.5090004@pheonic.com>
Message-ID: <47D19FCA.1090400@jazillian.com>

Charles McKnight wrote:
> I've got an old grammar written for PCCTS and I'm attempting to 
> migrate it to ANTLR 3.0 with as little additional rework as possible. 
> Are there any tips/references/etc. about doing this?
>
> Thanks in advance.
>
I have a very basic tool I wrote in ANTLR3 that converts a JavaCC 
grammar to ANTLR3, if that helps.
If your grammar is big (at least several thousand lines), you might want 
to adapt this tool to convert PCCTS to
ANTLR3, to help you avoid a lot of gruntwork up front.

Even with this tool, there's still a lot that needs to be done manually.
If you're interested, please post to the antlr mailing list, as I'm 
filtering out any direct mail to this address.

Andy

From antlr at mirality.co.nz  Fri Mar  7 12:37:44 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 08 Mar 2008 09:37:44 +1300
Subject: [antlr-interest] A very simple grammar problem.
In-Reply-To: <2ADA1544652C4F45BC33515C58A78EAE@pc2008>
References: <2ADA1544652C4F45BC33515C58A78EAE@pc2008>
Message-ID: <20080307203807.A5FC811EC71@www.antlr.org>

At 07:45 8/03/2008, Kenneth Domino wrote:
 >In fact, I should think that because one will need to define a
 >grammar with a production "S' -> S EOF" or some equivalent,
 >ANTLR would do the construction for me.  Maybe this is part of
 >a feature that I am unaware of.

I think (and this would seem to be supported by the comments from 
the source you quoted later on) that ANTLR parsers permit you to 
have many separate entrypoints.  This means that you could write 
one parser that has two entirely separate rule trees (or even 
overlap at some point lower down), then use one of them to parse 
half the input stream and the other to parse the rest.  So it can 
be an advantage to be able to say "parse everything that you can 
recognise, but don't worry if you can't consume the whole input, 
that's for a different parser".

But for the most common case (single entrypoint for "normal" 
parsing, maybe one or two others for unit tests) the main 
entrypoint should usually have an EOF.  In fact normally I 
explicitly write a 'start' rule; not just for that reason but also 
because it reads a bit more naturally to execute 
'parser.start()'.  It normally looks like one of these:

   start: program EOF;
   start: definition* EOF;

 >The second problem I was having was the error "no rule can
 >obviously be followed by EOF".  Maybe it is because of the
 >common prefix in two alternatives as you suggested.  But, I
 >think there is a problem in the ANTLR tool that searches for
 >start symbols and adds end states to the NFA constructed for
 >the grammar.  This check occurs in the following ANTLR code:
[...]
 >   /** add an EOF transition to any rule end NFAState that 
points
 >to nothing
 >     *  (i.e., for all those rules not invoked by another 
rule).
 >These
 >     *  are start symbols then.
 >     *
 >     *  Return the number of grammar entry points; i.e., how 
many
 >rules are
 >     *  not invoked by another rule (they can only be invoked 
from
 >outside).
 >     *  These are the start rules.
 >     */
[...]
 >Unfortunately, with the grammar "grammar test; a : 'A' a | 'A' 
;",
 >the NFA constructed contains cycles so endNFAState.transition(0) 

 >is never null, numberUnInvokedRules is never incremented in
 >build_EOFStates(), and the error message is printed.

Well, first I must admit that I've never studied the internals of 
parsing, so I only have a vague idea of what an NFA is and how it 
relates.  But from the comment it sounds like the routines are 
actually operating as expected.  The rule "a" in your grammar *is* 
invoked by another rule (namely, itself), so by that definition it 
is not a candidate start symbol, and your grammar therefore indeed 
contains no start rules.

If you had added a rule "b: a;", then this would have been a start 
rule (since nothing within the grammar calls 'b') and the warning 
would go away.

Similarly, if you had removed the recursion (which as I explained 
earlier is generally a bad idea anyway) then the rule 'a' would no 
longer have called itself, and would have become a start symbol.

(Any kind of recursion involving the root rule can have this 
effect, not just direct recursion.  For example, if your root rule 
is 'expression' and you supported subexpressions in parentheses 
[which of course also invoke 'expression'] then you'll hit the 
same problem.  Using a separate root rule as I mentioned above 
will always resolve things neatly though.)


From guntiso at latnet.lv  Fri Mar  7 12:47:41 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Fri,  7 Mar 2008 22:47:41 +0200
Subject: [antlr-interest] Pruning the Parse Tree
In-Reply-To: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
Message-ID: <1204922861.47d1a9ed86afa@clients.latnet.lv>

> Both are found in the final parse tree, and I need to
> get rid of the superfluous nodes.  I don't know if this
> is default antlr behavior or if this is a bug.

Why do you need parse tree?
How about using syntax tree?


From cmcknight at pheonic.com  Fri Mar  7 13:44:02 2008
From: cmcknight at pheonic.com (Charles McKnight)
Date: Fri, 07 Mar 2008 13:44:02 -0800
Subject: [antlr-interest] Migrating a PCCTS grammar to ANTRL 3.0
In-Reply-To: <47D19FCA.1090400@jazillian.com>
References: <47D18C99.5090004@pheonic.com> <47D19FCA.1090400@jazillian.com>
Message-ID: <47D1B722.1010007@pheonic.com>

Hi Andy,

I'd certainly be interested in taking a look. I'm getting errors with 
the #lexclass directive which I believe was dropped at some point from 
ANTLR (although I haven't found any references to support why/etc.). I 
haven't worked with ANTLR 3.0 very much (yet), so it's like breaking new 
ground (and I'm looking for a Rosetta Stone). :-)

Regards,

Chuck

Andy Tripp wrote:
> Charles McKnight wrote:
>> I've got an old grammar written for PCCTS and I'm attempting to 
>> migrate it to ANTLR 3.0 with as little additional rework as possible. 
>> Are there any tips/references/etc. about doing this?
>>
>> Thanks in advance.
>>
> I have a very basic tool I wrote in ANTLR3 that converts a JavaCC 
> grammar to ANTLR3, if that helps.
> If your grammar is big (at least several thousand lines), you might 
> want to adapt this tool to convert PCCTS to
> ANTLR3, to help you avoid a lot of gruntwork up front.
>
> Even with this tool, there's still a lot that needs to be done manually.
> If you're interested, please post to the antlr mailing list, as I'm 
> filtering out any direct mail to this address.
>
> Andy

From parrt at cs.usfca.edu  Fri Mar  7 13:44:13 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 7 Mar 2008 13:44:13 -0800
Subject: [antlr-interest] speaking at ICPC 2008 in Amsterdam this June
Message-ID: <303AAED6-40BA-4800-8A72-824374141E71@cs.usfca.edu>

howdy,

I'll be giving a keynote lecture at this year's conference on program  
comprehension in Amsterdam if anybody's interested in going:

http://www.cs.vu.nl/icpc2008/keynote.php

I think I will also be giving a talk at CWI.  June 10-13.

Terence

From brtzsnr at gmail.com  Fri Mar  7 15:01:39 2008
From: brtzsnr at gmail.com (Alexandru Mosoi)
Date: Sat, 8 Mar 2008 01:01:39 +0200
Subject: [antlr-interest] antlr & pipe
Message-ID: <c59005ea0803071501t1b2474f0o69d02f41562b67aa@mail.gmail.com>

I'm trying to write a program that parses gdb output as it's displayed. The
gdb's output is sent to a pipe, from where it's read by my program. However
the parser, after reading gdb's output hangs wainting for another token or
EOF. But, gdb doesn't close the pipe (no EOF) and doesn't send any extra
token. I read somewhere that I should disable lookahead, but how do I do
that?

-- 
Alexandru Mo?oi
http://alexandru.mosoi.googlepages.com

Please avoid sending me Word or PowerPoint attachments.
See http://www.gnu.org/philosophy/no-word-attachments.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080308/84592732/attachment.html 

From antlr at zavalon.com  Fri Mar  7 18:08:14 2008
From: antlr at zavalon.com (Nev)
Date: Sat, 8 Mar 2008 13:08:14 +1100
Subject: [antlr-interest] antlr & pipe
In-Reply-To: <c59005ea0803071501t1b2474f0o69d02f41562b67aa@mail.gmail.com>
Message-ID: <6mhc7d$21kqbd@ipmail04.adl2.internode.on.net>

I *think* your problem is that antlr runs the lexer to completion and then
runs the parser. Without out some termination for the lexer the parser will
never start.

I don't think antlr is able to work on a stream as you require unless the
stream consist of multiple blocks that can be parsed independent of each
other, and you setup your main to invoke a new paser for each block.

Please note I am relatively new to antlr, so this info could be completely
wrong.

nev

 

 

  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alexandru Mosoi
Sent: Saturday, 8 March 2008 10:02 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] antlr & pipe

 

I'm trying to write a program that parses gdb output as it's displayed. The
gdb's output is sent to a pipe, from where it's read by my program. However
the parser, after reading gdb's output hangs wainting for another token or
EOF. But, gdb doesn't close the pipe (no EOF) and doesn't send any extra
token. I read somewhere that I should disable lookahead, but how do I do
that?

-- 
Alexandru Mo?oi
http://alexandru.mosoi.googlepages.com

Please avoid sending me Word or PowerPoint attachments.
See http://www.gnu.org/philosophy/no-word-attachments.html 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080308/e755bddf/attachment.html 

From rdclark at gmail.com  Fri Mar  7 21:35:58 2008
From: rdclark at gmail.com (Richard Clark)
Date: Fri, 7 Mar 2008 21:35:58 -0800
Subject: [antlr-interest] antlr & pipe
In-Reply-To: <c59005ea0803071501t1b2474f0o69d02f41562b67aa@mail.gmail.com>
References: <c59005ea0803071501t1b2474f0o69d02f41562b67aa@mail.gmail.com>
Message-ID: <d3992d900803072135q78339725y906c10937d9808b2@mail.gmail.com>

My trick is to create a new TokenSource wrapping the original source that
always returns EOF for any attempt to read past the end. That way, if the
parser runs out of input tokens (and more can't be had from the tokenizer),
the parser will get an EOF.
...Richard

2008/3/7 Alexandru Mosoi <brtzsnr at gmail.com>:

> I'm trying to write a program that parses gdb output as it's displayed.
> The gdb's output is sent to a pipe, from where it's read by my program.
> However the parser, after reading gdb's output hangs wainting for another
> token or EOF. But, gdb doesn't close the pipe (no EOF) and doesn't send any
> extra token. I read somewhere that I should disable lookahead, but how do I
> do that?
>
> --
> Alexandru Mo?oi
> http://alexandru.mosoi.googlepages.com
>
> Please avoid sending me Word or PowerPoint attachments.
> See http://www.gnu.org/philosophy/no-word-attachments.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080307/36b62f85/attachment-0001.html 

From lgcraymer at yahoo.com  Fri Mar  7 22:15:53 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Fri, 7 Mar 2008 22:15:53 -0800 (PST)
Subject: [antlr-interest] Migrating a PCCTS grammar to ANTRL 3.0
Message-ID: <341531.42766.qm@web55908.mail.re3.yahoo.com>

dlg lexers are very different from ANTLR 2 or ANTLR 3 lexers (IIRC, dlg does LR recognition).  Lexer states (lexclasses) are on the "TO DO" list for ANTLR 3, but I doubt that they will appear anytime soon.

Your best bet is to find some similar lexing problem that has been solved in ANTLR 3 and adapting that grammar for your specific problem (if that is possible).  This is one of those cases where direct translation is not likely to be as easy as developing a lexer from scratch.

--Loring

----- Original Message ----
> From: Charles McKnight <cmcknight at pheonic.com>
> To: antlr-interest at antlr.org
> Sent: Friday, March 7, 2008 1:44:02 PM
> Subject: Re: [antlr-interest] Migrating a PCCTS grammar to ANTRL 3.0
> 
> Hi Andy,
> 
> I'd certainly be interested in taking a look. I'm getting errors with 
> the #lexclass directive which I believe was dropped at some point from 
> ANTLR (although I haven't found any references to support why/etc.). I 
> haven't worked with ANTLR 3.0 very much (yet), so it's like breaking new 
> ground (and I'm looking for a Rosetta Stone). :-)
> 
> Regards,
> 
> Chuck
> 
> Andy Tripp wrote:
> > Charles McKnight wrote:
> >> I've got an old grammar written for PCCTS and I'm attempting to 
> >> migrate it to ANTLR 3.0 with as little additional rework as possible. 
> >> Are there any tips/references/etc. about doing this?
> >>
> >> Thanks in advance.
> >>
> > I have a very basic tool I wrote in ANTLR3 that converts a JavaCC 
> > grammar to ANTLR3, if that helps.
> > If your grammar is big (at least several thousand lines), you might 
> > want to adapt this tool to convert PCCTS to
> > ANTLR3, to help you avoid a lot of gruntwork up front.
> >
> > Even with this tool, there's still a lot that needs to be done manually.
> > If you're interested, please post to the antlr mailing list, as I'm 
> > filtering out any direct mail to this address.
> >
> > Andy
> 




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From nkodidi at hotmail.com  Sun Mar  9 08:28:35 2008
From: nkodidi at hotmail.com (Diane Nkonyereza)
Date: Sun, 9 Mar 2008 15:28:35 +0000
Subject: [antlr-interest] java.lang.OutOfMemoryError: Java heap space
Message-ID: <BAY142-W44D3DA48F69BC1E8903985A50D0@phx.gbl>


Hi,

When I run my grammar in ANTLRWorks I get the error below. It only happens when I run it for the 2nd or 3rd time. The 1st time there is no problem. For that reason I think it's nothing to do with my grammar. What's the cause of the error and how should I resolve it.

Thanks in advance,
D.


[15:22:15] error(10):  internal error: Can't get property javaCompressedTransition using method get/isJavaCompressedTransition from org.antlr.analysis.DFA instance : java.lang.OutOfMemoryError: Java heap space
java.util.ArrayList.<init>(Unknown Source)
org.antlr.analysis.DFA.getRunLengthEncoding(DFA.java:423)
org.antlr.analysis.DFA.getJavaCompressedTransition(DFA.java:399)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
java.lang.reflect.Method.invoke(Unknown Source)
org.antlr.stringtemplate.language.ASTExpr.invokeMethod(ASTExpr.java:563)
org.antlr.stringtemplate.language.ASTExpr.rawGetObjectProperty(ASTExpr.java:513)
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:420)
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.java:346)
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:131)
org.antlr.stringtemplate.language.ActionEvaluator.templateApplication(ActionEvaluator.java:211)
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:121)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:79)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:722)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:742)
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:659)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:81)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:722)
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:659)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:81)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.codegen.CodeGenerator.write(CodeGenerator.java:1132)
org.antlr.codegen.Target.genRecognizerFile(Target.java:94)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:439)
org.antlr.Tool.processGrammar(Tool.java:347)


_________________________________________________________________
Get Hotmail on your mobile, text MSN to 63463!
http://mobile.uk.msn.com/pc/mail.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080309/157361b0/attachment.html 

From luca.dallolio at gmail.com  Sun Mar  9 09:31:24 2008
From: luca.dallolio at gmail.com (Luca Dall'Olio)
Date: Sun, 09 Mar 2008 17:31:24 +0100
Subject: [antlr-interest] Java StackTrace ANTLR3 grammar released
Message-ID: <47D410DC.6040205@gmail.com>

Hello to everybody,
I just submitted an ANTLR grammar for Java StackTrace, as described in:

http://java.sun.com/javase/6/docs/api/java/lang/Throwable.html#printStackTrace()

The grammar is available for download at the official ANTLR grammars 
repository :

http://www.antlr.org/grammar/list

It was developed (and somehow checked) with antlrWorks 1.1.7 and was 
made at best of our knowledge in grammars, any suggestion for 
improvements is really welcome!

It could be useful for anyone willing to develop a question-answering 
system for java system, automatically extracting informations from java 
logs, in a similar way to the Eclipse Log Analyzer :

http://help.eclipse.org/help31/topic/org.eclipse.tptp.platform.doc.user/concepts/coverview.html

please let me know if you find this thing useful,
Luca

From smbogan at gmail.com  Sun Mar  9 11:24:08 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Sun, 9 Mar 2008 13:24:08 -0500
Subject: [antlr-interest] Rewrite Rules, inline to right side.
Message-ID: <31160efe0803091124g27a5792dgb67e6408c6c8b4cc@mail.gmail.com>

Could someone tell me how to rewrite the following on the right-hand side:
boolops (firstops^ boolops)*

For example, I would like to know it in the form:
boolops (firstops boolops)* -> ???

The reason I am wondering is because I would like to write out in the
AST that whenever two boolops was found with a firstops, the tree
should look like this:

firstops
|-OPERAND
| |-boolops
|-OPERAND
| |-boolops

(if there are numerous firstops in a row, it should just put the next
one above it.  (Like in the picture below)  It would be fine if the
next firstops was under an OPERAND.   However, it wouldn't have to be.
 (That's easy to figure out in the TreeWalker)

If there is no firstops, then it should not change the tree at all,
and should just go to the boolops rule.  (This is for parsing
expressions, btw)

If you look at the image here:
http://www.uwplatt.edu/~bogans/example.jpg

I would like that rewritten as (I only did the left side, to give an idea):
http://www.uwplatt.edu/~bogans/example2.jpg

You'll see the reason why this would be helpful for me.  My objects
(the items that are returned from a LOOKUP) can have calls or other
actions applied to them.  It is difficult to keep track of which is
applied to the left-hand operand and which are applied to the
right-hand operand.  So I would like the tree to break them apart.
Since the calls happen farther down the tree, simply rewriting above
the boolops should do this, however, I don't know how to rewrite the
above form.  Every time I try, I get a result that is different than
the shape of my tree using the inline style of rewrites.


Thanks for any help,
Shaun

From jaluber at gmx.de  Sun Mar  9 11:56:59 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 09 Mar 2008 19:56:59 +0100
Subject: [antlr-interest] Rewrite Rules, inline to right side.
In-Reply-To: <31160efe0803091124g27a5792dgb67e6408c6c8b4cc@mail.gmail.com>
References: <31160efe0803091124g27a5792dgb67e6408c6c8b4cc@mail.gmail.com>
Message-ID: <47D432FB.7080900@gmx.de>

Shaun Bogan schrieb:
> Could someone tell me how to rewrite the following on the right-hand side:
> boolops (firstops^ boolops)*
> 

rule
    :  b1=boolops -> $b1 (firstops b2=boolops -> ^(firstops $rule $b2) )*
    ;

should solve this.

Johannes

From smbogan at gmail.com  Sun Mar  9 13:17:57 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Sun, 9 Mar 2008 15:17:57 -0500
Subject: [antlr-interest] Rewrite Rules, inline to right side.
In-Reply-To: <47D432FB.7080900@gmx.de>
References: <31160efe0803091124g27a5792dgb67e6408c6c8b4cc@mail.gmail.com>
	<47D432FB.7080900@gmx.de>
Message-ID: <31160efe0803091317i19c7d1f3xdfad88d37473afb@mail.gmail.com>

Thanks for the help.
Unfortunately, Antlr returns an error when I use the rule you
provided.  It appears to not
like the second = sign.  Says unexpected token '='.  I pasted exactly
what you had and changed rule to the name of my rule (which is
assignops).

Shaun


On Sun, Mar 9, 2008 at 1:56 PM, Johannes Luber <jaluber at gmx.de> wrote:
> Shaun Bogan schrieb:
> > Could someone tell me how to rewrite the following on the right-hand side:
> > boolops (firstops^ boolops)*
> >
>
> rule
>    :  b1=boolops -> $b1 (firstops b2=boolops -> ^(firstops $rule $b2) )*
>    ;
>
> should solve this.
>
> Johannes
>

From john at jacelridge.com  Sun Mar  9 14:10:41 2008
From: john at jacelridge.com (John Ridgway)
Date: Sun, 9 Mar 2008 17:10:41 -0400
Subject: [antlr-interest] Rewrite Rules, inline to right side.
In-Reply-To: <31160efe0803091317i19c7d1f3xdfad88d37473afb@mail.gmail.com>
References: <31160efe0803091124g27a5792dgb67e6408c6c8b4cc@mail.gmail.com>
	<47D432FB.7080900@gmx.de>
	<31160efe0803091317i19c7d1f3xdfad88d37473afb@mail.gmail.com>
Message-ID: <A74301DB-53D2-4FC4-A6C6-22544C67967C@jacelridge.com>

Try it like this:

rule
   :  (b1=boolops -> $b1) (firstops b2=boolops -> ^(firstops $rule  
$b2) )*
   ;

i.e., with parentheses around the first two things.  I believe that  
otherwise it treats the entire rest of the line as being what it's  
going to output for the initial boolops.

I think you also ought to be able to simplify it to:

rule
     :   (boolops -> boolops) ( firstops b2=boolops -> ^(firstops  
$rule $b2) )
     ;


Peace
- John


On Mar 9, 2008, at 4:17 PM, Shaun Bogan wrote:

> Thanks for the help.
> Unfortunately, Antlr returns an error when I use the rule you
> provided.  It appears to not
> like the second = sign.  Says unexpected token '='.  I pasted exactly
> what you had and changed rule to the name of my rule (which is
> assignops).
>
> Shaun
>
>
> On Sun, Mar 9, 2008 at 1:56 PM, Johannes Luber <jaluber at gmx.de> wrote:
>> Shaun Bogan schrieb:
>>> Could someone tell me how to rewrite the following on the right- 
>>> hand side:
>>> boolops (firstops^ boolops)*
>>>
>>
>> rule
>>   :  b1=boolops -> $b1 (firstops b2=boolops -> ^(firstops $rule  
>> $b2) )*
>>   ;
>>
>> should solve this.
>>
>> Johannes
>>


From smbogan at gmail.com  Sun Mar  9 14:23:21 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Sun, 9 Mar 2008 16:23:21 -0500
Subject: [antlr-interest] Rewrite Rules, inline to right side.
In-Reply-To: <A74301DB-53D2-4FC4-A6C6-22544C67967C@jacelridge.com>
References: <31160efe0803091124g27a5792dgb67e6408c6c8b4cc@mail.gmail.com>
	<47D432FB.7080900@gmx.de>
	<31160efe0803091317i19c7d1f3xdfad88d37473afb@mail.gmail.com>
	<A74301DB-53D2-4FC4-A6C6-22544C67967C@jacelridge.com>
Message-ID: <31160efe0803091423w2ffe1dc9l427f8efd348b918b@mail.gmail.com>

Thanks, that's exactly what I need.
Adapting that to:

assignops
	:	(boolops->boolops)(firstops b2=boolops -> ^(firstops ^(OPERAND
$assignops) ^(OPERAND $b2)))*
	;

Is exactly what I needed.

Thanks

On Sun, Mar 9, 2008 at 4:10 PM, John Ridgway <john at jacelridge.com> wrote:
> Try it like this:
>
> rule
>   :  (b1=boolops -> $b1) (firstops b2=boolops -> ^(firstops $rule
> $b2) )*
>   ;
>
> i.e., with parentheses around the first two things.  I believe that
> otherwise it treats the entire rest of the line as being what it's
> going to output for the initial boolops.
>
> I think you also ought to be able to simplify it to:
>
> rule
>     :   (boolops -> boolops) ( firstops b2=boolops -> ^(firstops
> $rule $b2) )
>     ;
>
>
> Peace
> - John
>
>
>
> On Mar 9, 2008, at 4:17 PM, Shaun Bogan wrote:
>
> > Thanks for the help.
> > Unfortunately, Antlr returns an error when I use the rule you
> > provided.  It appears to not
> > like the second = sign.  Says unexpected token '='.  I pasted exactly
> > what you had and changed rule to the name of my rule (which is
> > assignops).
> >
> > Shaun
> >
> >
> > On Sun, Mar 9, 2008 at 1:56 PM, Johannes Luber <jaluber at gmx.de> wrote:
> >> Shaun Bogan schrieb:
> >>> Could someone tell me how to rewrite the following on the right-
> >>> hand side:
> >>> boolops (firstops^ boolops)*
> >>>
> >>
> >> rule
> >>   :  b1=boolops -> $b1 (firstops b2=boolops -> ^(firstops $rule
> >> $b2) )*
> >>   ;
> >>
> >> should solve this.
> >>
> >> Johannes
> >>
>
>

From jimi at temporal-wave.com  Sun Mar  9 18:20:19 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 09 Mar 2008 18:20:19 -0700
Subject: [antlr-interest] java.lang.OutOfMemoryError: Java heap space
In-Reply-To: <BAY142-W44D3DA48F69BC1E8903985A50D0@phx.gbl>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAX6EaNTVdp0y
	JbM1o5+thlgEAAAAA@10.0.1.201>

Start ANTLRWors with:

 

-Xmx 750M

 

Or something similar. However, if your grammar is error in some way you can sometimes run out of heap space anyway. The java defaults are not enough for larger grammar s though.

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Diane Nkonyereza
Sent: Sunday, March 09, 2008 8:29 AM
To: ANTLR
Subject: [antlr-interest] java.lang.OutOfMemoryError: Java heap space

 

Hi,

When I run my grammar in ANTLRWorks I get the error below. It only happens when I run it for the 2nd or 3rd time. The 1st time there is no problem. For that reason I think it's nothing to do with my grammar. What's the cause of the error and how should I resolve it.

Thanks in advance,
D.


[15:22:15] error(10):  internal error: Can't get property javaCompressedTransition using method get/isJavaCompressedTransition from org.antlr.analysis.DFA instance : java.lang.OutOfMemoryError: Java heap space
java.util.ArrayList.<init>(Unknown Source)
org.antlr.analysis.DFA.getRunLengthEncoding(DFA.java:423)
org.antlr.analysis.DFA.getJavaCompressedTransition(DFA.java:399)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
java.lang.reflect.Method.invoke(Unknown Source)
org.antlr.stringtemplate.language.ASTExpr.invokeMethod(ASTExpr.java:563)
org.antlr.stringtemplate.language.ASTExpr.rawGetObjectProperty(ASTExpr.java:513)
org.antlr.stringtemplate.language.ASTExpr.getObjectProperty(ASTExpr.java:420)
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.java:346)
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:131)
org.antlr.stringtemplate.language.ActionEvaluator.templateApplication(ActionEvaluator.java:211)
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:121)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:79)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:722)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:742)
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:659)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:81)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:722)
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:659)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:81)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.codegen.CodeGenerator.write(CodeGenerator.java:1132)
org.antlr.codegen.Target.genRecognizerFile(Target.java:94)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:439)
org.antlr.Tool.processGrammar(Tool.java:347)



  _____  

Think you know your TV, music and film? Try Search Charades! <https://www.searchcharades.com> 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080309/338a6fd8/attachment.html 

From sproctor at gmail.com  Sun Mar  9 18:23:50 2008
From: sproctor at gmail.com (Sean Proctor)
Date: Sun, 9 Mar 2008 21:23:50 -0400
Subject: [antlr-interest] intermittent problem with lexer
Message-ID: <ca2a7adf0803091823i66728165n2824309605d5e99e@mail.gmail.com>

Hello,

I've been using ANTLR in one of my projects for about 6 months. This problem
first started with some changes that I made 2 or 3 weeks ago. Removing the
old files and rerunning the build tool seemed to resolve it, but that
doesn't always.

Here is the error when I get it

    [java] ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)
1989-2007
     [java] warning(205): cc/warlock/core/stormfront/script/wsl/WSL.g3:1:8:
ANTLR could not analyze this decision in rule Tokens; often this is because
of recursive rule references visible from the left edge of alternatives.
ANTLR will re-analyze the decision with a fixed lookahead of k=1.  Consider
using "options {k=1;}" for that decision and possibly adding a syntactic
predicate.
     [java] warning(209): cc/warlock/core/stormfront/script/wsl/WSL.g3:15:1:
Multiple token rules can match input such as "'<'": T33, T35, T37, STRING
     [java] As a result, tokens(s) STRING,T37,T35 were disabled for that
input
     [java] warning(209): cc/warlock/core/stormfront/script/wsl/WSL.g3:16:1:
Multiple token rules can match input such as "'>'": T34, T36, STRING
     [java] As a result, tokens(s) STRING,T36 were disabled for that input
     [java] warning(208): cc/warlock/core/stormfront/script/wsl/WSL.g3:17:1:
The following token definitions are unreachable: T35,T36,T37

I tried using an intermediate build from 2-27. The first warning went away
and the last one turned into an error. With the newer build, it seems that
the error never goes away.

The file in question is located here
http://fisheye.warlock.cc/browse/Warlock/warlock2/trunk/stormfront/cc.warlock.core.stormfront.script/src/main/cc/warlock/core/stormfront/script/wsl/WSL.g3?r=1693

The language itself is poorly structured, but I didn't create it.

Any suggestions would be greatly appreciated.

Sean
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080309/35629533/attachment.html 

From darien.hager at etelos-inc.com  Mon Mar 10 10:44:11 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Mon, 10 Mar 2008 10:44:11 -0700
Subject: [antlr-interest] intermittent problem with lexer
In-Reply-To: <ca2a7adf0803091823i66728165n2824309605d5e99e@mail.gmail.com>
References: <ca2a7adf0803091823i66728165n2824309605d5e99e@mail.gmail.com>
Message-ID: <c8c997f40803101044h84e2937sc164de003a991ad0@mail.gmail.com>

I don't think I have strong enough Antlr-fu to reliably help you with your
main problem, but I'd like to point out one (probably optional) spot for
improving the grammar.

The T33, T35, T37 tokens, etc. are basically tokens that the parser rules
assume exist but aren't defined with a name (so they get auto-named.)

For example, the inequality operators under relationalOp on line 190. In
ANTLRworks, you can right-click on them and do "Replace literals with token
label" to refactor them out, giving them names which are much more
informative, e.g.

GT_OR_EQ : '>=' ;


-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/a8a39986/attachment-0001.html 

From tbrandonau at gmail.com  Mon Mar 10 11:25:53 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Tue, 11 Mar 2008 05:25:53 +1100
Subject: [antlr-interest] intermittent problem with lexer
In-Reply-To: <ca2a7adf0803091823i66728165n2824309605d5e99e@mail.gmail.com>
References: <ca2a7adf0803091823i66728165n2824309605d5e99e@mail.gmail.com>
Message-ID: <ebc876d70803101125i75c048b9m347a2ae51c691836@mail.gmail.com>

On Mon, Mar 10, 2008 at 12:23 PM, Sean Proctor <sproctor at gmail.com> wrote:
> Hello,
>
> I've been using ANTLR in one of my projects for about 6 months. This problem
> first started with some changes that I made 2 or 3 weeks ago. Removing the
> old files and rerunning the build tool seemed to resolve it, but that
> doesn't always.
>
> Here is the error when I get it
>
>     [java] ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)
> 1989-2007
>      [java] warning(205): cc/warlock/core/stormfront/script/wsl/WSL.g3:1:8:
> ANTLR could not analyze this decision in rule Tokens; often this is because
> of recursive rule references visible from the left edge of alternatives.
> ANTLR will re-analyze the decision with a fixed lookahead of k=1.  Consider
> using "options {k=1;}" for that decision and possibly adding a syntactic
> predicate.
>       [java] warning(209):
> cc/warlock/core/stormfront/script/wsl/WSL.g3:15:1: Multiple token rules can
> match input such as "'<'": T33, T35, T37, STRING
>      [java] As a result, tokens(s) STRING,T37,T35 were disabled for that
> input
>       [java] warning(209):
> cc/warlock/core/stormfront/script/wsl/WSL.g3:16:1: Multiple token rules can
> match input such as "'>'": T34, T36, STRING
>      [java] As a result, tokens(s) STRING,T36 were disabled for that input
>       [java] warning(208):
> cc/warlock/core/stormfront/script/wsl/WSL.g3:17:1: The following token
> definitions are unreachable: T35,T36,T37
>
> I tried using an intermediate build from 2-27. The first warning went away
> and the last one turned into an error. With the newer build, it seems that
> the error never goes away.
Sound like the first warning may have been due to a bug\limitation in
the older analysis code that has been fixed in the intermediate build.
The intermediate build has also elevated unreachable tokens to being
an error. You need to fix that. '<' and '>' (from the parser literals)
are clashing with your STRING rule. Which should it be? You do realise
that parser context does not affect the lexer and that parser literals
simply generate lexer rules right?
I think you might also want to reconsider your heavy use of states if
possible. Thats going to really complicate your lexer DFAs which may
be what's causing the first warning. You also might end up running
into code size problems and performance will be worse. Is it really
lexically ambiguous in a way you can't deal with with by generalising
the lexer tokenisation and using some setType calls in the parser? A
lot of the stuff seems to deal with things that are only keywords in
certain contexts, there are other ways to do this. See the keywords as
identifiers entry in the wiki.

Tom.
>
> The file in question is located here
> http://fisheye.warlock.cc/browse/Warlock/warlock2/trunk/stormfront/cc.warlock.core.stormfront.script/src/main/cc/warlock/core/stormfront/script/wsl/WSL.g3?r=1693
>
> The language itself is poorly structured, but I didn't create it.
>
> Any suggestions would be greatly appreciated.
>
> Sean
>

From shro8822 at vandals.uidaho.edu  Mon Mar 10 13:29:02 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 10 Mar 2008 13:29:02 -0700
Subject: [antlr-interest] A postmortem of my use of antler
Message-ID: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>

I don't want to be a troll so plese understand I'm trying to be helpful 
with these comments, not antagonistic.

The concept of ANTLR is a really good idea.

The execution is fairly good (It could be better in a few places but 
it's not worth complaining about.

The documentation is abysmal.

In my experience, ANTLR doesn't so much have a learning curve as a 
learning step function. The documentation seems to assume a degree of 
understanding of what antlr is that, IMHO, is unreasonable to assume of 
a new user. In attempting to learn antler I was playing with it, reading 
what docs I could find, looking for and reading example code and looking 
at the output code. In all that, it took me over 2 weeks to even notice 
that the expected mode of operation is to lex, AST, work with AST. I saw 
mentions of AST and assumed that this was antlr's turm for the type of 
output that yacc and bison typically are sued to generate. This is just 
one example of a cases where the antlr docs seemed to assume a 
understanding of things that I didn't have. And I'm not talking general 
ignorance. I'm referring to ignorance of the specifics of antlr. The 
best I can do to describe my frustration is this: "the antlr doc's are 
not good enough to let a new user figure out what questions to ask." I'm 
not so dumb that I can't figure antlr out (theres nothing complicated 
with any part of it that I've used) I just wasn't asking the right 
questions and had no way to find that out.

Now I will confess that I have yet to read the manual cover to cover, 
but I think I've hit all of the intro material in it and in the web 
pages. If that material doesn't give the user something to hold onto, I 
fear that many users a just going to give up on antlr after only a few 
minutes to an hour. In retrospect that is what I /should/ have done. My 
bosses opinion is that antlr is not giving us much enough value over 
writing the parser by hand. I'm a bit embarrassed to say, I think he's 
correct and I could have/should have made that call a lot sooner.

Now for some rhetorical questions:

--What is ANTLR? Is it an academic research project? A source of work 
for grad students? A FOSS utility intended for the general community? A toy?
--Who is the intended user base? It's own developers? Language/grammar 
theory people? Professional programming gurus? The programming world at 
large?

I don't need answers to those, I'd be interested but it's academic at 
this point. If ANTLR is supposed to be what I think it's supposed to be, 
I think that ANTLR would benefit by the consideration of those questions.

My suggestion is that someone go over the docs with an eye to how well 
they present material to a brand new users. Does it quickly present the 
user with the information needed to (correctly) grasp the big picture? 
What IS the big picture? Does it give the user the information they need 
to find the information thy /really/ need? This would be no trivial task 
and I understand that. What wold do the most good would be to have about 
1 or 2 dozen new users (a compilers class?) be thrown at antlr with 
nothing but the current docs to work from. let them play with it for 
about a day or two and then start asking them what they found 
interesting/useful/confusing. Then start answering there questions and 
/recording/ what they asked, what they wanted to known (when these are 
different that is valuable info). Also take notes on what kind of 
assumptions, correct and incorrect they made. This info would be of huge 
value to the ANTLR project.

OK I understand that that project has about zero chance of happening, 
but one can dream...

I hope this is of some use.

Benjamin Shropshire

p.s. I might get to use ANTLR on another project (only, oddly enough, 
because the default rendering of AST looks like lisp)
p.p.s. Another guy on that last project (with a much different 
personality than me) also took a look at antlr and more or less agreed 
with me on the deficiencies of the antlr docs.


From mark.mandel at gmail.com  Mon Mar 10 14:23:26 2008
From: mark.mandel at gmail.com (Mark Mandel)
Date: Tue, 11 Mar 2008 08:23:26 +1100
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
Message-ID: <4153ee230803101423x131d4646ta5c03918179a646a@mail.gmail.com>

Honestly,

With the amount of help that is available through this mailing list,
it pretty much cancels out any deficiencies that may or may not exist
in the documentation.

The documentation for ANTLR took me from woah, to go without a huge
hassle, and I had never worked on a Lexer or a Parser before, but I
did have to look outside ANTLR's documentation to do it, and I don't
think that is unreasonable.

I actually bought the book * after * I had used ANTLR for quite a
while, and all I can say is that it is an incredible resource.

Now, I have to assume as well, you're offering to help write all this
missing documentation? It is a Wiki after all, so I expect that after
this post you'll be quite active?

Mark

On Tue, Mar 11, 2008 at 7:29 AM, Benjamin Shropshire
<shro8822 at vandals.uidaho.edu> wrote:
> I don't want to be a troll so plese understand I'm trying to be helpful
>  with these comments, not antagonistic.
>
>  The concept of ANTLR is a really good idea.
>
>  The execution is fairly good (It could be better in a few places but
>  it's not worth complaining about.
>
>  The documentation is abysmal.
>
>  In my experience, ANTLR doesn't so much have a learning curve as a
>  learning step function. The documentation seems to assume a degree of
>  understanding of what antlr is that, IMHO, is unreasonable to assume of
>  a new user. In attempting to learn antler I was playing with it, reading
>  what docs I could find, looking for and reading example code and looking
>  at the output code. In all that, it took me over 2 weeks to even notice
>  that the expected mode of operation is to lex, AST, work with AST. I saw
>  mentions of AST and assumed that this was antlr's turm for the type of
>  output that yacc and bison typically are sued to generate. This is just
>  one example of a cases where the antlr docs seemed to assume a
>  understanding of things that I didn't have. And I'm not talking general
>  ignorance. I'm referring to ignorance of the specifics of antlr. The
>  best I can do to describe my frustration is this: "the antlr doc's are
>  not good enough to let a new user figure out what questions to ask." I'm
>  not so dumb that I can't figure antlr out (theres nothing complicated
>  with any part of it that I've used) I just wasn't asking the right
>  questions and had no way to find that out.
>
>  Now I will confess that I have yet to read the manual cover to cover,
>  but I think I've hit all of the intro material in it and in the web
>  pages. If that material doesn't give the user something to hold onto, I
>  fear that many users a just going to give up on antlr after only a few
>  minutes to an hour. In retrospect that is what I /should/ have done. My
>  bosses opinion is that antlr is not giving us much enough value over
>  writing the parser by hand. I'm a bit embarrassed to say, I think he's
>  correct and I could have/should have made that call a lot sooner.
>
>  Now for some rhetorical questions:
>
>  --What is ANTLR? Is it an academic research project? A source of work
>  for grad students? A FOSS utility intended for the general community? A toy?
>  --Who is the intended user base? It's own developers? Language/grammar
>  theory people? Professional programming gurus? The programming world at
>  large?
>
>  I don't need answers to those, I'd be interested but it's academic at
>  this point. If ANTLR is supposed to be what I think it's supposed to be,
>  I think that ANTLR would benefit by the consideration of those questions.
>
>  My suggestion is that someone go over the docs with an eye to how well
>  they present material to a brand new users. Does it quickly present the
>  user with the information needed to (correctly) grasp the big picture?
>  What IS the big picture? Does it give the user the information they need
>  to find the information thy /really/ need? This would be no trivial task
>  and I understand that. What wold do the most good would be to have about
>  1 or 2 dozen new users (a compilers class?) be thrown at antlr with
>  nothing but the current docs to work from. let them play with it for
>  about a day or two and then start asking them what they found
>  interesting/useful/confusing. Then start answering there questions and
>  /recording/ what they asked, what they wanted to known (when these are
>  different that is valuable info). Also take notes on what kind of
>  assumptions, correct and incorrect they made. This info would be of huge
>  value to the ANTLR project.
>
>  OK I understand that that project has about zero chance of happening,
>  but one can dream...
>
>  I hope this is of some use.
>
>  Benjamin Shropshire
>
>  p.s. I might get to use ANTLR on another project (only, oddly enough,
>  because the default rendering of AST looks like lisp)
>  p.p.s. Another guy on that last project (with a much different
>  personality than me) also took a look at antlr and more or less agreed
>  with me on the deficiencies of the antlr docs.
>
>



-- 
E: mark.mandel at gmail.com
W: www.compoundtheory.com

From kroepke at classdump.org  Mon Mar 10 14:41:50 2008
From: kroepke at classdump.org (=?ISO-8859-1?Q?Kay_R=F6pke?=)
Date: Mon, 10 Mar 2008 22:41:50 +0100
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
Message-ID: <F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>

Hi!

On Mar 10, 2008, at 9:29 PM, Benjamin Shropshire wrote:

> I don't want to be a troll so plese understand I'm trying to be  
> helpful with these comments, not antagonistic.

Thank you very much for taking the time to write this email, rather  
than just walking away! It _is_ helpful, indeed.

> The concept of ANTLR is a really good idea.
>
> The execution is fairly good (It could be better in a few places but  
> it's not worth complaining about.

Could you expand on the places you feel are sub-standard? It would be  
good to know so we can improve that, if possible.

> The documentation is abysmal.

I'm afraid you are right in some way. Not that I think it is really  
bad, because there is help available. The public documentation  
unfortunately is pretty sparse and is more or a reference.

> In my experience, ANTLR doesn't so much have a learning curve as a  
> learning step function. The documentation seems to assume a degree  
> of understanding of what antlr is that, IMHO, is unreasonable to  
> assume of a new user. In attempting to learn antler I was playing  
> with it, reading what docs I could find, looking for and reading  
> example code and looking at the output code.

Yes, the parsing has a rather ugly learning function, I agree. Though  
I think the approach you took is probably the best for any programmer:  
Start doing something and learn by making mistakes. Unfortunately,  
sometimes you can hit rather severe roadblocks when doing this with a  
grammar. It might simply choke on what you gave it and fixing that  
requires a fair amount of understanding of how it works internally.

> In all that, it took me over 2 weeks to even notice that the  
> expected mode of operation is to lex, AST, work with AST. I saw  
> mentions of AST and assumed that this was antlr's turm for the type  
> of output that yacc and bison typically are sued to generate. This  
> is just one example of a cases where the antlr docs seemed to assume  
> a understanding of things that I didn't have. And I'm not talking  
> general ignorance. I'm referring to ignorance of the specifics of  
> antlr. The best I can do to describe my frustration is this: "the  
> antlr doc's are not good enough to let a new user figure out what  
> questions to ask." I'm not so dumb that I can't figure antlr out  
> (theres nothing complicated with any part of it that I've used) I  
> just wasn't asking the right questions and had no way to find that  
> out.

What kinds questions are these? What cannot be figured out by reading/ 
searching the ANTLR wiki and/or posting to this mailing list? The  
archives generally turn up pretty good explanations, too, and are  
searchable via google.
But, with all due respect, the "expected mode" of a parser generator  
like ANTLR is to lex, parse, and do something with the resulting  
tree(s). Any kind of reading about the subject matter introduces the  
concept. Even for someone not having had the benefit of classes in  
university the wikipedia pages should provide enough information to  
figure that out. 2 weeks sounds excessive and exaggerated to me.

> Now I will confess that I have yet to read the manual cover to  
> cover, but I think I've hit all of the intro material in it and in  
> the web pages. If that material doesn't give the user something to  
> hold onto, I fear that many users a just going to give up on antlr  
> after only a few minutes to an hour. In retrospect that is what I / 
> should/ have done. My bosses opinion is that antlr is not giving us  
> much enough value over writing the parser by hand. I'm a bit  
> embarrassed to say, I think he's correct and I could have/should  
> have made that call a lot sooner.

I hereby question the boss' and colleague's opinions. For a very  
simple, one-time recognizers there might be truth in it, but if you  
expect to have to maintain the recognizers in the future, it's madness  
to not use some kind of generator. After all, writing correct  
recognizers is tricky, especially if the language isn't trivial.

> Now for some rhetorical questions:
>
> --What is ANTLR? Is it an academic research project? A source of  
> work for grad students? A FOSS utility intended for the general  
> community? A toy?

Warning: Rhetorical answers ahead!
It's
  a) A research project.
  b) Provides grad students with a tool they can use to learn about  
parsing.
  c) Provides grad students with a tool they can use to do more  
advanced work and not spend the entire class on implementing  
recognizers, so they can move on to implement languages/compilers/ 
whatever once they grokked parsing enough to understand the value of  
_not_ writing recognizers by hand.
  d) A FOSS utility intended for the general community, lowering the  
bar to write recognizers. Ever used and maintained a 15000 line yacc  
grammar?
  e) A high-quality tool widely used in the industry and open source  
community.

>
> --Who is the intended user base? It's own developers? Language/ 
> grammar theory people? Professional programming gurus? The  
> programming world at large?

Yes, yes, yes, yes ;)

> I don't need answers to those, I'd be interested but it's academic  
> at this point. If ANTLR is supposed to be what I think it's supposed  
> to be, I think that ANTLR would benefit by the consideration of  
> those questions.

I agree there's a need to lower the bar of entry even further, but I  
think no tool has lowered it to the level ANTLR has. At least not yet.

> My suggestion is that someone go over the docs with an eye to how  
> well they present material to a brand new users. Does it quickly  
> present the user with the information needed to (correctly) grasp  
> the big picture? What IS the big picture? Does it give the user the  
> information they need to find the information thy /really/ need?  
> This would be no trivial task and I understand that. What wold do  
> the most good would be to have about 1 or 2 dozen new users (a  
> compilers class?) be thrown at antlr with nothing but the current  
> docs to work from. let them play with it for about a day or two and  
> then start asking them what they found interesting/useful/confusing.  
> Then start answering there questions and /recording/ what they  
> asked, what they wanted to known (when these are different that is  
> valuable info). Also take notes on what kind of assumptions, correct  
> and incorrect they made. This info would be of huge value to the  
> ANTLR project.
>
> OK I understand that that project has about zero chance of  
> happening, but one can dream...

I don't think anything like that will happen, either. To use tools you  
need at least a basic understanding of the concepts. Don't need to be  
an expert, but understanding helps a lot. If someone does not  
understand the basics of parsing, it's kinda hard to write parsers,  
with tools or without.

> I hope this is of some use.

I hope so, too.

> p.s. I might get to use ANTLR on another project (only, oddly  
> enough, because the default rendering of AST looks like lisp)

Yeah, it's odd ;)

> p.p.s. Another guy on that last project (with a much different  
> personality than me) also took a look at antlr and more or less  
> agreed with me on the deficiencies of the antlr docs.

What is the background of those people? Is it just the docs? Is it the  
tool?

cheers,
-k
-- 
Kay R?pke
http://classdump.org/







From shro8822 at vandals.uidaho.edu  Mon Mar 10 14:42:51 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 10 Mar 2008 14:42:51 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <4153ee230803101423x131d4646ta5c03918179a646a@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<4153ee230803101423x131d4646ta5c03918179a646a@mail.gmail.com>
Message-ID: <BAYC1-PASMTP0416E11C031B305F2967DFF50E0@CEZ.ICE>

Mark Mandel wrote:
> Honestly,
>
> With the amount of help that is available through this mailing list,
> it pretty much cancels out any deficiencies that may or may not exist
> in the documentation.
>   

Some people will accept or reject a program on the docs. They will 
decide whether or not the product is suitable before there even try the 
help system. Some people will only ever use the docs. I have no 
evidence, but I suspect that most of the people who look at and then 
don't uses antlr do both steps an about 5-10 minutes and you never hear 
from them at all.

>  I had never worked on a Lexer or a Parser before,

That might actually be a benefit. From what I have seen, antlr doesn't 
work quite like a normal lexer/parser generator and the differences, 
while hugely important, aren't well highlighted.

>  but I
> did have to look outside ANTLR's documentation to do it, and I don't
> think that is unreasonable.
>   

I'm not talking only about the official docs. Even the other resources 
don't do much better IMHO.

> I actually bought the book * after * I had used ANTLR for quite a
> while, and all I can say is that it is an incredible resource.
>
> Now, I have to assume as well, you're offering to help write all this
> missing documentation? It is a Wiki after all, so I expect that after
> this post you'll be quite active?
>   

No, actually this is more a "why I don't expect to be using antlr any 
more" e-mail. I don't really expect anything to change. I'm passing on 
what made antler hard for me to use, what would have made it easier and 
hoping that future work on the docs will take it into account.

Truth be told, I really have no more reason to care. The only place I 
might be using antlr, it will only get used if it can be made to work 
with under about 25 LOC: grab antlr, grab a complete C grammar with AST 
output, write a main() that parses a file and prints 
ReturnedAST.toString(). All told, I might spend another hour tops 
working with antlr in the next few. years.

From shro8822 at vandals.uidaho.edu  Mon Mar 10 15:08:59 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 10 Mar 2008 15:08:59 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
Message-ID: <BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>

Kay R?pke wrote:
> Hi!
>
> On Mar 10, 2008, at 9:29 PM, Benjamin Shropshire wrote:
>> The concept of ANTLR is a really good idea.
>>
>> The execution is fairly good (It could be better in a few places but 
>> it's not worth complaining about.
>
> Could you expand on the places you feel are sub-standard? It would be 
> good to know so we can improve that, if possible.
once in a while a syntax error in the input will throw an exception, and 
some of the errors (parser, semantic and runtime) are nearly useless 
unless you known what's going on, but that's about it.

>> In all that, it took me over 2 weeks to even notice that the expected 
>> mode of operation is to lex, AST, work with AST. I saw mentions of 
>> AST and assumed that this was antlr's turm for the type of output 
>> that yacc and bison typically are sued to generate. This is just one 
>> example of a cases where the antlr docs seemed to assume a 
>> understanding of things that I didn't have. And I'm not talking 
>> general ignorance. I'm referring to ignorance of the specifics of 
>> antlr. The best I can do to describe my frustration is this: "the 
>> antlr doc's are not good enough to let a new user figure out what 
>> questions to ask." I'm not so dumb that I can't figure antlr out 
>> (theres nothing complicated with any part of it that I've used) I 
>> just wasn't asking the right questions and had no way to find that out.
>
> What kinds questions are these? What cannot be figured out by 
> reading/searching the ANTLR wiki and/or posting to this mailing list? 
> The archives generally turn up pretty good explanations, too, and are 
> searchable via google.

"how is antler /expected/ to be used?" is the big one. That once should 
be on page one. I have yet to find a direct answerer anywhere.

> But, with all due respect, the "expected mode" of a parser generator 
> like ANTLR is to lex, parse, and do something with the resulting 
> tree(s). Any kind of reading about the subject matter introduces the 
> concept. Even for someone not having had the benefit of classes in 
> university the wikipedia pages should provide enough information to 
> figure that out. 2 weeks sounds excessive and exaggerated to me.

The important destruction is that in antler you let antler build the AST 
the first time though. swapping the order of chapter 3 in the book would 
make this clearer (First, how to build an AST from the input, then how 
to process that, then how to avoid the AST all together) Also that info 
should be /explicitly stated/ near the top of section 1.1

>> Now I will confess that I have yet to read the manual cover to cover, 
>> but I think I've hit all of the intro material in it and in the web 
>> pages. If that material doesn't give the user something to hold onto, 
>> I fear that many users a just going to give up on antlr after only a 
>> few minutes to an hour. In retrospect that is what I /should/ have 
>> done. My bosses opinion is that antlr is not giving us much enough 
>> value over writing the parser by hand. I'm a bit embarrassed to say, 
>> I think he's correct and I could have/should have made that call a 
>> lot sooner.
>
> I hereby question the boss' and colleague's opinions. For a very 
> simple, one-time recognizers there might be truth in it, but if you 
> expect to have to maintain the recognizers in the future, it's madness 
> to not use some kind of generator. After all, writing correct 
> recognizers is tricky, especially if the language isn't trivial.

This is based on actually trying it, from a LOC standpoint, it's a toss 
up and the hand done code is a lot easier to debug. At this point if I 
do have to go with a generator I would plan on using flex/bison and 
linking that into the C# (as bad as that is)

>> Now for some rhetorical questions:
>>
>> --What is ANTLR? Is it an academic research project? A source of work 
>> for grad students? A FOSS utility intended for the general community? 
>> A toy?
>
> Warning: Rhetorical answers ahead!
> It's
>  a) A research project.
>  b) Provides grad students with a tool they can use to learn about 
> parsing.
>  c) Provides grad students with a tool they can use to do more 
> advanced work and not spend the entire class on implementing 
> recognizers, so they can move on to implement 
> languages/compilers/whatever once they grokked parsing enough to 
> understand the value of _not_ writing recognizers by hand.
>  d) A FOSS utility intended for the general community, lowering the 
> bar to write recognizers. Ever used and maintained a 15000 line yacc 
> grammar?
>  e) A high-quality tool widely used in the industry and open source 
> community.

In that order?

>>
>> --Who is the intended user base? It's own developers? 
>> Language/grammar theory people? Professional programming gurus? The 
>> programming world at large?
>
> Yes, yes, yes, yes ;)

In what order?

>> I don't need answers to those, I'd be interested but it's academic at 
>> this point. If ANTLR is supposed to be what I think it's supposed to 
>> be, I think that ANTLR would benefit by the consideration of those 
>> questions.
>
> I agree there's a need to lower the bar of entry even further, but I 
> think no tool has lowered it to the level ANTLR has. At least not yet.

I have a parser generator that I wrote that is easier to understand 
(manly because it is much simpler and consequently less expressive). The 
extraneous, as in not strictly needed to build parsers (but useful), 
parts are what gets in the way.

>
> I don't think anything like that will happen, either. To use tools you 
> need at least a basic understanding of the concepts. Don't need to be 
> an expert, but understanding helps a lot. If someone does not 
> understand the basics of parsing, it's kinda hard to write parsers, 
> with tools or without.

I understand parsing. I didn't understand what antlr expected me to do 
with the parser.

>> p.s. I might get to use ANTLR on another project (only, oddly enough, 
>> because the default rendering of AST looks like lisp)
>
> Yeah, it's odd ;)

We will need to use lisp to process C code. Thus...

>> p.p.s. Another guy on that last project (with a much different 
>> personality than me) also took a look at antlr and more or less 
>> agreed with me on the deficiencies of the antlr docs.
>
> What is the background of those people? Is it just the docs? Is it the 
> tool?

CS from the hardware side.
Mostly the docs. The tool works fine for the most part and the design is 
not bad to work with after you figure it out.


From guntiso at latnet.lv  Mon Mar 10 15:40:14 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Tue, 11 Mar 2008 00:40:14 +0200
Subject: [antlr-interest] Pruning the Parse Tree
In-Reply-To: <5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
	<1204922861.47d1a9ed86afa@clients.latnet.lv>
	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
Message-ID: <1205188814.47d5b8cee4e90@clients.latnet.lv>

> 3.  I'm more interested in the overall code orgainzation.  I don't need a
> letter-perfect grammar; I just need ANTLR to properly identify the parts of
> code.  There are only specific nodes I am interested in.

So move only nodes you are interested in up, leave everything else out
or as is (flat). It is very easy to convert nodes to parent nodes.
For example, to get function names, you change

functionCall:	functionName '(' ( argument (',' argument)* )? ')';

to

functionCall:	functionName '(' ( argument (',' argument)* )? ')'
		->	^(functionName argument*);

which gives you AST without parentheses and commas for function calls,
where arguments are children of function names.

> I was hoping there would be some kind of information in each node
> that would state what rules were actually used vs. what rules were
> looked at.

ANTLRWorks uses different colors for these, so there must be some way
to get this info.

> > > Both are found in the final parse tree, and I need to
> > > get rid of the superfluous nodes.  I don't know if this
> > > is default antlr behavior or if this is a bug.
> >
> > Why do you need parse tree?
> > How about using syntax tree?

P.S. Use 'Reply to all' in your mailer, you will get more answers, probably :)

Guntis


From parrt at cs.usfca.edu  Mon Mar 10 16:06:12 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 10 Mar 2008 16:06:12 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
Message-ID: <52F9E958-24CA-4824-BC77-3F57A031FF79@cs.usfca.edu>


On Mar 10, 2008, at 1:29 PM, Benjamin Shropshire wrote:

> I don't want to be a troll so plese understand I'm trying to be  
> helpful with these comments, not antagonistic.
>
> The concept of ANTLR is a really good idea.
>
> The execution is fairly good (It could be better in a few places but  
> it's not worth complaining about.
>
> The documentation is abysmal.

Because I wrote the book.  Software is free, but my best doc is $24 on  
amazon or can buy PDF at pragprog.

Ter

From rdclark at gmail.com  Mon Mar 10 16:31:11 2008
From: rdclark at gmail.com (Richard Clark)
Date: Mon, 10 Mar 2008 16:31:11 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
Message-ID: <d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>

Hi there,
You brought up a really good idea -- a "what can you use this for" document
that shows a handful of common uses. I also want to think about how to
improve the initial learning pieces on the Wiki.

A handful of thoughts from an old hand (who wrote or edited a bunch of intro
material on the Wiki):
1. We could probably get enough up on the Wiki to help someone make an
initial evaluation of ANTLR, but developing with it pretty much requires
buying the book from the Pragmatic Programmers. (Which it sounds like you've
done, thank you. I could make that requirement clearer on the Wiki.)
2. Really understanding what's going on sometimes requires a look at the
generated code and/or the runtime support classes. I understand you .Net
folks are dealing with a bit of a black box there.
3. Compiler construction and its cousins Lexing and Parsing are *hard*. If
you think the ANTLR documentation is challenging, try reading Aho, Sethi,
and Ullman. There's a balance between setting people's expectations and
scaring them away. On the other hand, I appreciate constructive
conversations about helping people get started. (I got my start teaching
software development courses and I'm still partial to the newcomers. :) )
4. ANTLR is a professional-grade power tool. The difference between making a
clean cut and taking your hand right off is pretty small. You don't need to
know a lot to write a straightforward "parse this and do that..." kind of
program (though more examples would help), but the next step up is a pretty
big one.

We could all use some brainstorming on a handful of transitional steps. We
could probably use some examples in C# and other languages. (The bulk of the
Wiki examples, including some very detailed tutorials, is in Java.)

Thanks for the feedback,

...Richard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/c7f2a88a/attachment.html 

From shro8822 at vandals.uidaho.edu  Mon Mar 10 16:52:22 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Mon, 10 Mar 2008 16:52:22 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
Message-ID: <BAYC1-PASMTP033773C92E6C9DA913AC59F50E0@CEZ.ICE>

Richard Clark wrote:
> Hi there,
>
> You brought up a really good idea -- a "what can you use this for" 
> document that shows a handful of common uses. I also want to think 
> about how to improve the initial learning pieces on the Wiki.
>
> A handful of thoughts from an old hand (who wrote or edited a bunch of 
> intro material on the Wiki): 
> 1. We could probably get enough up on the Wiki to help someone make an 
> initial evaluation of ANTLR, but developing with it pretty much 
> requires buying the book from the Pragmatic Programmers. (Which it 
> sounds like you've done, thank you. I could make that requirement 
> clearer on the Wiki.)
> 2. Really understanding what's going on sometimes requires a look at 
> the generated code and/or the runtime support classes. I understand 
> you .Net folks are dealing with a bit of a black box there.
If I had to do more, I'd look more into getting the debugger to walk 
into the runtime (I'd rebuild it if I have to) A VS.Net project we can 
drop in would be killer.

> 3. Compiler construction and its cousins Lexing and Parsing are 
> *hard*. If you think the ANTLR documentation is challenging, try 
> reading Aho, Sethi, and Ullman.

Some day I will. I'm one of the few people I know of who look forwards 
to the compilers class?

> There's a balance between setting people's expectations and scaring 
> them away. On the other hand, I appreciate constructive conversations 
> about helping people get started. (I got my start teaching software 
> development courses and I'm still partial to the newcomers. :) )

thanks for putting up with us.

> We could probably use some examples in C# and other languages. (The 
> bulk of the Wiki examples, including some very detailed tutorials, is 
> in Java.) 
>
that would help. Being able to run stuff is nice. But to a great extent 
my problem wasn't language specific.

> Thanks for the feedback,
>

your welcome.

> ...Richard
>
>
>


From ae.armstrong at gmail.com  Mon Mar 10 17:34:51 2008
From: ae.armstrong at gmail.com (Aaron Armstrong)
Date: Mon, 10 Mar 2008 17:34:51 -0700
Subject: [antlr-interest] Fwd:  Pruning the Parse Tree
In-Reply-To: <5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
	<1204922861.47d1a9ed86afa@clients.latnet.lv>
	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
Message-ID: <5a086d5a0803101734r61252009t62bb186ba98e1c20@mail.gmail.com>

---------- Forwarded message ----------
From: Aaron Armstrong <ae.armstrong at gmail.com>
Date: Mon, Mar 10, 2008 at 11:35 AM
Subject: Re: [antlr-interest] Pruning the Parse Tree
To: Guntis Ozols <guntiso at latnet.lv>


The simple reason for using a parse tree is that I don't have time to muck
around with writing an AST grammar.

Here is the full list of reasons:
1.  I'm trying to make my tool as language-agnostic as possible.  Any work I
put into an ANTLR grammar will be specific for one language.  If I can
decouple parts of the process, it can hopefully make for less work when I
port to other languages.
2. The default AST is flat.  Basically, I get no more information than
what the lexer would give me.  (I don't know why this is, but ANTLR is not
my design).
3.  I'm more interested in the overall code orgainzation.  I don't need a
letter-perfect grammar; I just need ANTLR to properly identify the parts of
code.  There are only specific nodes I am interested in.  My thinking is if
I identify those nodes for one language I can use some kind of mapping
mechanism to generalize for other languages.

This is why I'm using a parse tree.  It gets me the information I need
without having to pour a lot of work into a language-specific AST.  I was
hoping there would be some kind of information in each node that would state
what rules were actually used vs. what rules were looked at.
  On Fri, Mar 7, 2008 at 1:47 PM, Guntis Ozols <guntiso at latnet.lv> wrote:

> > Both are found in the final parse tree, and I need to
> > get rid of the superfluous nodes.  I don't know if this
> > is default antlr behavior or if this is a bug.
>
> Why do you need parse tree?
> How about using syntax tree?
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/91e4c917/attachment.html 

From gbr at newtechlaw.com  Mon Mar 10 18:52:06 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Mon, 10 Mar 2008 18:52:06 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
Message-ID: <200803110149.m2B1nocp000566@tach.newtechlaw.com>

At 03:08 PM 3/10/2008, Benjamin Shropshire wrote:

>"how is antlr /expected/ to be used?" is the big one. That one 
>should be on page one. I have yet to find a direct answer anywhere.

Very difficult to formulate a one page/one paragraph answer.  After 
all, Antlr is a DSL tailored for a large, variable problem 
space.  The Antlr language operators are rather basic in nature -- to 
the extent there are coding patterns, they are quite general at best.

The step function learning problem is largely (I believe) one of 
learning how to design a recognition specification subject to the 
available mechanics of the Antlr language operators.  And, design in 
Antlr is largely a function of the language to be recognized.  If you 
look at the archived grammars, what at first appears to be wildly 
varying styles is more a consequence of design choices tailored to 
the intended function of the grammars.

That said, there are a number of caveats* that could be shared with 
those new to Antlr**:

1) if you need better documentation, write it as you learn***, get 
TDAR, or both.
2) Antlr lexers implement an LL(1) conversion of input symbols, 
typically atomic characters, into tokens.
3) Antlr parsers implement an LL(*) conversion of tokens to subrules, 
and then to actions or an AST.
4) The parser calls the lexer, but the lexer, on first call, will run 
to EOF.  After that, the lexer is just an in-memory sequential token 
repository for the parser.
5) Fragments are essentially macro expansions, and are only visible 
in the lexer.
6) Don't expect Antlr to resolve ambiguities automagically -- code 
what you mean.
7) Even where Antlr offers some incidental recognition behavior, use 
cautiously -- over reliance will result in inexplicable robustness 
and maintenance problems.
8) Left factor: understand it and use it.
9) Use groups (parenthesis delimited subrules) to make clear what 
your code means.
10) Use predicates to make clear what your code means.
11) Unless performance is absolutely your top 6 design requirements, 
don't worry about using predicates.
12) Don't try to do too much in the lexer.  The parser is more powerful anyway.
13) Don't try to do too much in the parser.  Use tree-walkers to evolve an AST.
14) Don't try to dump complex blocks from a parser or AST.  Use 
StringTemplate to unparse.
15) Actions (brace delimited statements) can be inserted almost anywhere.

* these caveats have caveats
** top 15 that I wish I had had
*** the Antlr Wiki supports personal pages (FWIW, my notes are public) 


From rdclark at gmail.com  Mon Mar 10 19:22:35 2008
From: rdclark at gmail.com (Richard Clark)
Date: Mon, 10 Mar 2008 19:22:35 -0700
Subject: [antlr-interest] Pruning the Parse Tree
In-Reply-To: <1205188814.47d5b8cee4e90@clients.latnet.lv>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
	<1204922861.47d1a9ed86afa@clients.latnet.lv>
	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
	<1205188814.47d5b8cee4e90@clients.latnet.lv>
Message-ID: <d3992d900803101922l5f9bc532i39cb7dbf015b7cca@mail.gmail.com>

So Aaron, what are you trying to identify in the target language?
If you need to pick and choose, why not write a filter using ANTLR? Filters
use lexer rules to identify and extract parts of larger files.

Krugle uses ANTLR filters to extract method declarations from multiple
languages. I've used filters to extract database table definitions from a
giant mix of table defs and procedural code (over 10,000 lines) and then
used the lexer definitions as the base of a SQL dialect translator.

With as many struggles as you seem to be having, the right answer is usually
to back up and look at other ways to use the tool. (Years of working tech
support taught me this.)

...Richard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/ebe8c1f2/attachment-0001.html 

From kenneth.domino at domemtech.com  Mon Mar 10 19:46:23 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Mon, 10 Mar 2008 22:46:23 -0400
Subject: [antlr-interest] ANTLR tree construction problem
Message-ID: <A2C7DD4B3F904EDAB3D4020AB0E664D0@pc2008>

Hi,

I'm working with the example grammar ANTLRv3.g
(http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288)
and it looks like either the label handling in the generated parser is
not correct.  This seems to be exposed with modifiers (e.g.,
"fragment"), where the code uses the label "modifier" for a Token from
a set of string literals in the grammar.  The code in question is:

rule
scope {
 String name;
}
 : DOC_COMMENT?
  ( modifier=('protected'|'public'|'private'|'fragment') )?
  id {$rule::name = $id.text;}
  '!'?
  ( arg=ARG_ACTION )?
  ( 'returns' rt=ARG_ACTION  )?
  throwsSpec? optionsSpec? ruleScopeSpec? ruleAction*
  ':' altList ';'
  exceptionGroup?
     -> ^( RULE id {modifier!=null?adaptor.create(modifier):null} ^(ARG
$arg)? ^(RET $rt)?
        optionsSpec? ruleScopeSpec? ruleAction*
        altList
        exceptionGroup?
        EOR["EOR"]
      )
 ;

I think the rule is ok.  The problem seems to be in the code generated
for the expression:

"(modifier=('protected'|'public'|'private'|'fragment') )?"

There is no code emitted to set label "modifier", which is used later
on for tree construction.  As a result, modifier in the generated code
below is always null, and addChild() always receives null:

"adaptor.addChild(root_1, modifier!=null?adaptor.create(modifier):null);".

(That code was generated for
"{modifier!=null?adaptor.create(modifier):null}" in the grammar, and
seems fine.)

Other instances of labels (e.g., "g='grammar'...") seem to work fine.

You can use ANTLRWorks1.1.7 to verify the problem.  I'm not sure what
happens when addChild() tries to insert a null child, but ANTLRWorks
does not display anything for the modifier.  Nor does the example tree
parsing grammar recognize anything. I also checked this against the
2-27-2008 build, and it is still a problem.  Fortunately, I have a
work around that is trivial.

Ken Domino


From r.mark.volkmann at gmail.com  Mon Mar 10 20:50:32 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 10 Mar 2008 22:50:32 -0500
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <52F9E958-24CA-4824-BC77-3F57A031FF79@cs.usfca.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<52F9E958-24CA-4824-BC77-3F57A031FF79@cs.usfca.edu>
Message-ID: <f0fcc6820803102050r5800e78aq8e6609d613ba05d7@mail.gmail.com>

On Mon, Mar 10, 2008 at 6:06 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>  On Mar 10, 2008, at 1:29 PM, Benjamin Shropshire wrote:
>
> > I don't want to be a troll so plese understand I'm trying to be
>  > helpful with these comments, not antagonistic.
>  >
>  > The concept of ANTLR is a really good idea.
>  >
>  > The execution is fairly good (It could be better in a few places but
>  > it's not worth complaining about.
>  >
>  > The documentation is abysmal.
>
>  Because I wrote the book.  Software is free, but my best doc is $24 on
>  amazon or can buy PDF at pragprog.

I just gave a presentation on ANTLR last weekend. My slides and
example code is available at http://www.ociweb.com/mark. Click the
"ANTLR 3" link. My slides are no replacement for Ter's excellent book,
but I'd like to think they are pretty good and would really help
someone get the hang of using ANTLR quickly. Any feedback on them is
appreciated. I'll continue to update them as needed.

-- 
R. Mark Volkmann
Object Computing, Inc.

From brent.yates at gmail.com  Mon Mar 10 20:51:23 2008
From: brent.yates at gmail.com (Brent Yates)
Date: Mon, 10 Mar 2008 23:51:23 -0400
Subject: [antlr-interest] Lexer problem
Message-ID: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>

I need some help understanding syntactic predicates when used in the lexer.

Here is a simple grammar that will run in AntlrWorks:

grammar Simple;

options
    {
    language= Java;
    output=AST;
    }

start
    :   TEST
    ;

POUND   :   '#' ;
ID      :   'a'..'z'+ ;
fragment DECIMAL_DIGIT
    :   '0'..'9'
    ;

TEST
    :   POUND WS?
    (
        ('aaa') => 'aaa' WS DECIMAL_DIGIT
{$channel=HIDDEN;$type=DECIMAL_DIGIT;}
    |   ('bbb') => 'bbb' WS DECIMAL_DIGIT       {$channel=HIDDEN;$type=ID;}
    |   ID
    )
    ;

fragment SPACE_OR_TAB
    :  (' '|'\t')+
    ;

WS
    :   SPACE_OR_TAB+
        {$channel=HIDDEN;}
    ;

NEWLINE
    :   ('\r'? ('\u000C'|'\n') )
        {$channel=HIDDEN;}
    ;

When fed this input:

# aaa 4
# bbb
#hi

I would expect the following:

1) the '# aaa 4' matches alt1 in TEST and should be set to HIDDEN and type
DECIMAL_DIGIT.  And that does happen.
2) the '# bbb<nl>#hi' does not match alt2, however it does match the
predicate.  I would expect a lexer error.  What happens is that the token
type is set to HIDDEN and the rules actually matches the ID and returns a
type of TEST.  That I don't understand.

It looks like the actions of alt2 are being run even though only the
predicate matches.  Also, if the predicate matches, why does the lexer later
match alt3?

Thanks for your help,

Brent Yates
brent,yates at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/aa98ac00/attachment.html 

From tbrandonau at gmail.com  Mon Mar 10 22:02:12 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Tue, 11 Mar 2008 16:02:12 +1100
Subject: [antlr-interest] Lexer problem
In-Reply-To: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
References: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
Message-ID: <ebc876d70803102202n240b4e15pc89c9cb7caa71106@mail.gmail.com>

On Tue, Mar 11, 2008 at 2:51 PM, Brent Yates <brent.yates at gmail.com> wrote:

> I need some help understanding syntactic predicates when used in the lexer.
>
> Here is a simple grammar that will run in AntlrWorks:
>
> grammar Simple;
>
> options
>     {
>     language= Java;
>     output=AST;
>     }
>
> start
>     :   TEST
>     ;
>
> POUND   :   '#' ;
> ID      :   'a'..'z'+ ;
> fragment DECIMAL_DIGIT
>     :   '0'..'9'
>     ;
>
> TEST
>     :   POUND WS?
>     (
>         ('aaa') => 'aaa' WS DECIMAL_DIGIT       {$channel=HIDDEN;$type=DECIMAL_DIGIT;}
>     |   ('bbb') => 'bbb' WS DECIMAL_DIGIT       {$channel=HIDDEN;$type=ID;}
>     |   ID
>     )
>     ;
>
> fragment SPACE_OR_TAB
>     :  (' '|'\t')+
>     ;
>
> WS
>     :   SPACE_OR_TAB+
>         {$channel=HIDDEN;}
>     ;
>
> NEWLINE
>     :   ('\r'? ('\u000C'|'\n') )
>         {$channel=HIDDEN;}
>     ;
>
> When fed this input:
>
> # aaa 4
> # bbb
> #hi
>
> I would expect the following:
>
> 1) the '# aaa 4' matches alt1 in TEST and should be set to HIDDEN and type DECIMAL_DIGIT.  And that does happen.
> 2) the '# bbb<nl>#hi' does not match alt2, however it does match the predicate.  I would expect a lexer error.  What happens is that the token type is set to HIDDEN and the rules actually matches the ID and returns a type of TEST.  That I don't understand.
>
> It looks like the actions of alt2 are being run even though only the predicate matches.  Also, if the predicate matches, why does the lexer later match alt3?

I would suggest you examine he generated code to better understand
whats happening. I think your problem is syntactic predicates
disambiguate syntactically ambiguous alternatives they don't supplant
standard lookaheads. Simply meeting the predicate is not enough to
guarantee that alternative it has to also match the alternative. As
the second line doesn't fit alt2 it won't match that alternative,
regardless of the predicate. So it is taking alt3. Your predicates are
redundant. If you changed 'aaa' and 'bbb' to ID, leaving the
predicates the same, then the predicates should disambiguate the two
ambiguous alternatives.
The actions of alt2 are not being run, the WS rule is setting channel=hidden.

Tom.
>
> Thanks for your help,
>
> Brent Yates
> brent,yates at gmail.com
>
>
>

From ae.armstrong at gmail.com  Mon Mar 10 22:14:59 2008
From: ae.armstrong at gmail.com (Aaron Armstrong)
Date: Mon, 10 Mar 2008 22:14:59 -0700
Subject: [antlr-interest] Pruning the Parse Tree
In-Reply-To: <d3992d900803101922l5f9bc532i39cb7dbf015b7cca@mail.gmail.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
	<1204922861.47d1a9ed86afa@clients.latnet.lv>
	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
	<1205188814.47d5b8cee4e90@clients.latnet.lv>
	<d3992d900803101922l5f9bc532i39cb7dbf015b7cca@mail.gmail.com>
Message-ID: <5a086d5a0803102214n2937abb3rd0d2e5ae9cba0b1d@mail.gmail.com>

I'm not trying to pick and choose.  In fact, I would like to preserve all
the original code elements.  Parser grammars can give you a lot of baggage
(for example, separating method declarations and formal parameters out).
Right now, I have most of the base algorithm written and I just need the
parser to properly chop up the code.  I'm not interested in putting the
algorithm (which requires passing over nodes several times) into ANTLR
actions; that would be extremely messy.

When I took my compilers class, I remembered distinct parts of the
compiler.  First the lexer, then the parser, then the AST, then the symbol
table, semantics checking, and finally output.  With our parser generator
(JCup) it seemed like creating the AST was easy: each rule was a node, and
the node's children were the lexer or parser tokens that made up the rule.
I would be very happy with output like this.  When I learned that ANTLR
outputs a flat AST by default, and that I would need to write another
grammar to produce an AST of this nature, I was not happy.  I did take some
time to write AST output for importDecl; after successfully kludging
something together for this one rule (out of around 50), I decided this
would not work.

Then I did some more reading in TDAR and read about a Parse Tree.  Thinking
this would meet my simple needs, I followed the example given on the
website.  At first I got a NullPointerException following the example, but
I've worked with it more and I no longer get that.

I have been happy with the Parse Tree output.  It's just that it gives me
these extra nodes.  ANTLRWorks can recognize these extra nodes (and colors
them differently).  If someone knows how to recognize which nodes are extra,
I would be very grateful.

I understand that features like rewrite rules and StringTemplates allow for
more expressivity.  These are interesting and powerful concepts for writing
new languages.  In fact, ANTLR could probably represent all of my work so
far. However, tools this powerful require much time to master.  I just need
ANTLR to properly break up the code and give me the AST (or Parse Tree in
this case).  I can take care of the rest.

Thank you for reading my rant.

On Mon, Mar 10, 2008 at 7:22 PM, Richard Clark <rdclark at gmail.com> wrote:

> So Aaron, what are you trying to identify in the target language?
> If you need to pick and choose, why not write a filter using ANTLR?
> Filters use lexer rules to identify and extract parts of larger files.
>
> Krugle uses ANTLR filters to extract method declarations from multiple
> languages. I've used filters to extract database table definitions from a
> giant mix of table defs and procedural code (over 10,000 lines) and then
> used the lexer definitions as the base of a SQL dialect translator.
>
> With as many struggles as you seem to be having, the right answer is
> usually to back up and look at other ways to use the tool. (Years of working
> tech support taught me this.)
>
> ...Richard
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/15640f16/attachment.html 

From ae.armstrong at gmail.com  Mon Mar 10 22:15:31 2008
From: ae.armstrong at gmail.com (Aaron Armstrong)
Date: Mon, 10 Mar 2008 22:15:31 -0700
Subject: [antlr-interest] Fwd:  Pruning the Parse Tree
In-Reply-To: <5a086d5a0803102214n2937abb3rd0d2e5ae9cba0b1d@mail.gmail.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
	<1204922861.47d1a9ed86afa@clients.latnet.lv>
	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
	<1205188814.47d5b8cee4e90@clients.latnet.lv>
	<d3992d900803101922l5f9bc532i39cb7dbf015b7cca@mail.gmail.com>
	<5a086d5a0803102214n2937abb3rd0d2e5ae9cba0b1d@mail.gmail.com>
Message-ID: <5a086d5a0803102215n5b10990el2b4b601b37188ca@mail.gmail.com>

---------- Forwarded message ----------
From: Aaron Armstrong <ae.armstrong at gmail.com>
Date: Mon, Mar 10, 2008 at 10:14 PM
Subject: Re: [antlr-interest] Pruning the Parse Tree
To: Richard Clark <rdclark at gmail.com>
Cc: Guntis Ozols <guntiso at latnet.lv>, antlr-interest at antlr.org


I'm not trying to pick and choose.  In fact, I would like to preserve all
the original code elements.  Parser grammars can give you a lot of baggage
(for example, separating method declarations and formal parameters out).
Right now, I have most of the base algorithm written and I just need the
parser to properly chop up the code.  I'm not interested in putting the
algorithm (which requires passing over nodes several times) into ANTLR
actions; that would be extremely messy.

When I took my compilers class, I remembered distinct parts of the
compiler.  First the lexer, then the parser, then the AST, then the symbol
table, semantics checking, and finally output.  With our parser generator
(JCup) it seemed like creating the AST was easy: each rule was a node, and
the node's children were the lexer or parser tokens that made up the rule.
I would be very happy with output like this.  When I learned that ANTLR
outputs a flat AST by default, and that I would need to write another
grammar to produce an AST of this nature, I was not happy.  I did take some
time to write AST output for importDecl; after successfully kludging
something together for this one rule (out of around 50), I decided this
would not work.

Then I did some more reading in TDAR and read about a Parse Tree.  Thinking
this would meet my simple needs, I followed the example given on the
website.  At first I got a NullPointerException following the example, but
I've worked with it more and I no longer get that.

I have been happy with the Parse Tree output.  It's just that it gives me
these extra nodes.  ANTLRWorks can recognize these extra nodes (and colors
them differently).  If someone knows how to recognize which nodes are extra,
I would be very grateful.

I understand that features like rewrite rules and StringTemplates allow for
more expressivity.  These are interesting and powerful concepts for writing
new languages.  In fact, ANTLR could probably represent all of my work so
far. However, tools this powerful require much time to master.  I just need
ANTLR to properly break up the code and give me the AST (or Parse Tree in
this case).  I can take care of the rest.

Thank you for reading my rant.


On Mon, Mar 10, 2008 at 7:22 PM, Richard Clark <rdclark at gmail.com> wrote:

> So Aaron, what are you trying to identify in the target language?
> If you need to pick and choose, why not write a filter using ANTLR?
> Filters use lexer rules to identify and extract parts of larger files.
>
> Krugle uses ANTLR filters to extract method declarations from multiple
> languages. I've used filters to extract database table definitions from a
> giant mix of table defs and procedural code (over 10,000 lines) and then
> used the lexer definitions as the base of a SQL dialect translator.
>
> With as many struggles as you seem to be having, the right answer is
> usually to back up and look at other ways to use the tool. (Years of working
> tech support taught me this.)
>
> ...Richard
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/8670253a/attachment-0001.html 

From brent.yates at gmail.com  Mon Mar 10 22:15:46 2008
From: brent.yates at gmail.com (Brent Yates)
Date: Tue, 11 Mar 2008 01:15:46 -0400
Subject: [antlr-interest] Lexer problem
In-Reply-To: <ebc876d70803102202n240b4e15pc89c9cb7caa71106@mail.gmail.com>
References: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
	<ebc876d70803102202n240b4e15pc89c9cb7caa71106@mail.gmail.com>
Message-ID: <6edc6c380803102215r4814b443jee7ce6e33663ff07@mail.gmail.com>

Tom,
D'oh!  Good catch on the WS rule.  There is an obvious ambiguity in the
alternatives due to the fact that I want to do something special when the
ID='aaa' or 'bbb'.  I understand (now) what you are saying about the
predicate being redundant.  That being the case, how do I get alts1 and 2 to
match when the ID='aaa' or ID='bbb' and to not fall into alt3 if they don't
match completely?  Oh, I know this would be eaiser in the parser section,
but I need to do this in the lexer.  Alts1 and alts2 are special tokens
whose actions affect future lexing.  It is too late by the time the parser
runs.  Do I have to add target specific code to the actions of alt3 to check
to see if alts2 and alts3 "fell through"?

Thanks!

Brent Yates
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/dfd1a2ec/attachment.html 

From rdclark at gmail.com  Mon Mar 10 22:29:52 2008
From: rdclark at gmail.com (Richard Clark)
Date: Mon, 10 Mar 2008 22:29:52 -0700
Subject: [antlr-interest] Lexer problem
In-Reply-To: <6edc6c380803102215r4814b443jee7ce6e33663ff07@mail.gmail.com>
References: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
	<ebc876d70803102202n240b4e15pc89c9cb7caa71106@mail.gmail.com>
	<6edc6c380803102215r4814b443jee7ce6e33663ff07@mail.gmail.com>
Message-ID: <d3992d900803102229r7da58663wb46b0bf4bb63d23a@mail.gmail.com>

On Mon, Mar 10, 2008 at 10:15 PM, Brent Yates <brent.yates at gmail.com> wrote:

> That being the case, how do I get alts1 and 2 to match when the ID='aaa'
> or ID='bbb' and to not fall into alt3 if they don't match completely?


How about post-processing in the Lexer instead of predicates?

TEST
@init { $type = ID; }
    :   POUND WS?
        ID (WS DECIMAL_DIGIT { $channel=HIDDEN; if ($ID.text.equals("aaa"))
$type = DECIMAL_DIGIT; })?
    ;

I also noticed that 'aaa' and 'bbb' are valid IDs, so collapsed all the
branches to start with ID. I don't know if you can use this trick in your
production code.

Writing complex lexer rules gets tricky (e.g. when trying to write a filter)
because 1) the lexer doesn't backtrack, and 2) it matches non-fragment rules
in top-down order so you have to be careful with your ordering. I've had to
use a whole lot of trial and error.

Good luck :)

...Richard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080310/11189b09/attachment.html 

From open.zone at virgin.net  Mon Mar 10 23:49:10 2008
From: open.zone at virgin.net (Micheal J)
Date: Tue, 11 Mar 2008 06:49:10 -0000
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
Message-ID: <00d801c88344$06eba360$c404a8c0@marion>

> Richard Clark wrote:

> 2. Really understanding what's going on sometimes requires a look at the 
> generated code and/or the runtime support classes. I understand you .Net 
> folks are dealing with a bit of a black box there.

Hi Richard, 

Please clarify what you meant by "I understand you .Net folks are dealing
with a bit of a black box there."?

Is it only the .Net folks that are affected by this?


Micheal


From kroepke at classdump.org  Tue Mar 11 01:55:53 2008
From: kroepke at classdump.org (=?ISO-8859-1?Q?Kay_R=F6pke?=)
Date: Tue, 11 Mar 2008 09:55:53 +0100
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <00d801c88344$06eba360$c404a8c0@marion>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
	<00d801c88344$06eba360$c404a8c0@marion>
Message-ID: <75CDD4A4-6F6A-445B-B693-25B2F719F566@classdump.org>


On Mar 11, 2008, at 7:49 AM, Micheal J wrote:

> Please clarify what you meant by "I understand you .Net folks are  
> dealing
> with a bit of a black box there."?
>
> Is it only the .Net folks that are affected by this?


I think it referred to the (now thankfully obsolete) fact that for a  
long time the source wasn't available. But that restriction is  
overcome, and I have a colleague who has successfully used the C#  
backend in his first ANTLR parser. He seemed quite happy about it.

cheers,
-k
-- 
Kay R?pke
http://classdump.org/







From tbrandonau at gmail.com  Tue Mar 11 02:20:59 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Tue, 11 Mar 2008 20:20:59 +1100
Subject: [antlr-interest] Lexer problem
In-Reply-To: <d3992d900803102229r7da58663wb46b0bf4bb63d23a@mail.gmail.com>
References: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
	<ebc876d70803102202n240b4e15pc89c9cb7caa71106@mail.gmail.com>
	<6edc6c380803102215r4814b443jee7ce6e33663ff07@mail.gmail.com>
	<d3992d900803102229r7da58663wb46b0bf4bb63d23a@mail.gmail.com>
Message-ID: <ebc876d70803110220p42b4b4ck1c7f61581df39f1@mail.gmail.com>

On Tue, Mar 11, 2008 at 4:29 PM, Richard Clark <rdclark at gmail.com> wrote:
>
> On Mon, Mar 10, 2008 at 10:15 PM, Brent Yates <brent.yates at gmail.com> wrote:
> > That being the case, how do I get alts1 and 2 to match when the ID='aaa'
> or ID='bbb' and to not fall into alt3 if they don't match completely?
>
>
> How about post-processing in the Lexer instead of predicates?
>
>
> TEST
> @init { $type = ID; }
>     :   POUND WS?
>         ID (WS DECIMAL_DIGIT { $channel=HIDDEN; if ($ID.text.equals("aaa"))
> $type = DECIMAL_DIGIT; })?
>     ;
>
I think he wants '# aaa' to be an error rather than an ID, WS and
decimal digit must match. His code did the same as that code, the
predicates were redundant.
Maybe try:
TEST:
     POUND WS?
    (   (    'aaa' { aaa action }
        |    'bbb' { bbb action }
        )
        (    WS DECIMAL_DIGIT
        |    { // error action }
        )
    |   ID
    )
    ;
Either log the error or you could throw a recognition exception.
Or you could use gated semantic predicates like:
TEST:
     POUND WS?
    (   (    'aaa' { $type = AAA; }
        |    'bbb' { $type = BBB; }
        |    ID
        )
        (    ( $type == AAA || type == BBB )?=> WS DECIMAL_DIGIT
        |    // Epsilon
        )
    )
    ;
Or you might need the negation of the predicate as a semantic
predicate in the epsilon alternative. Not sure if the gated predicate
will force ANTLR to take the alternative when it matches. You could of
course replace the token type tests with a flag if you don't need to
change the type.

Tom.
>
> Writing complex lexer rules gets tricky (e.g. when trying to write a filter)
> because 1) the lexer doesn't backtrack, and 2) it matches non-fragment rules
> in top-down order so you have to be careful with your ordering. I've had to
> use a whole lot of trial and error.
>
> Good luck :)
>
> ...Richard
>
>

From peames at nexagent.com  Tue Mar 11 04:39:55 2008
From: peames at nexagent.com (Paul Eames)
Date: Tue, 11 Mar 2008 11:39:55 -0000
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <mailman.25773.1205212533.2502.antlr-interest@antlr.org>
Message-ID: <B2B4D3618441D941B811329A672FD64E05529774@THHS2EXBE2X.hostedservice2.net>

I found ANTLR a little hard to pick up (I hadn't done any work with
lexers or parsers since uni days) until I bought Terence's book. I have
now found that I've implemented a very clean and easy to understand v3
grammar that I can use to communicate with some of our more technical
business guys as it looks very much like a DSL for our problem domain. I
am able to quickly add additional rules and solid unit tests around them
and I very rarely have to look at the generated code. I'd agree that
there's a bit of a learning curve and also that the docs, aside from
Terence's book, are not great. Solution: buy the book :-)

From ad_cooney at hotmail.com  Tue Mar 11 05:53:04 2008
From: ad_cooney at hotmail.com (Adam Cooney)
Date: Tue, 11 Mar 2008 12:53:04 +0000
Subject: [antlr-interest] PHP AST Grammar
In-Reply-To: <20080307082012.404BD11EB91@www.antlr.org>
References: <2b5f47650803061751l41ed228exf5bf9d7251b66074@mail.gmail.com>
	<20080307082012.404BD11EB91@www.antlr.org>
Message-ID: <BLU124-W2609D3F06CC94CE6BB3C41840F0@phx.gbl>


Hey, 
I've been searching for a grammar for PHP that can build ASTs and so far have come up with nothing for ANTLR (in fact, nothing at all related to PHP). However, I did find a program called PHC which contains a php grammar I am thinking of attempting to convert to ANTLR, but was wondering if anyone has attempted to build a PHP AST grammar before or has a PHP grammar.
 
Thanks
Adam
_________________________________________________________________
Share what Santa brought you
https://www.mycooluncool.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/cd45b961/attachment.html 

From rdclark at gmail.com  Tue Mar 11 09:31:45 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 09:31:45 -0700
Subject: [antlr-interest] Lexer problem
In-Reply-To: <ebc876d70803110220p42b4b4ck1c7f61581df39f1@mail.gmail.com>
References: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
	<ebc876d70803102202n240b4e15pc89c9cb7caa71106@mail.gmail.com>
	<6edc6c380803102215r4814b443jee7ce6e33663ff07@mail.gmail.com>
	<d3992d900803102229r7da58663wb46b0bf4bb63d23a@mail.gmail.com>
	<ebc876d70803110220p42b4b4ck1c7f61581df39f1@mail.gmail.com>
Message-ID: <d3992d900803110931ucc6ff1fyaa6d513126aefe71@mail.gmail.com>

If you want to know when there's an error in the lexer (which it
usually recovers from automatically), you could override public void
reportError(RecognitionException e)

Another option, if you wanted to leave error recovery intact, could be
to specify the error and then use a validating predicate to catch it:

HASH WS? 'aaa' (WS DECIMAL_DIGIT)? {$DECIMAL_DIGIT != null}?

...Richard

From shro8822 at vandals.uidaho.edu  Tue Mar 11 09:34:58 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Tue, 11 Mar 2008 09:34:58 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <200803110149.m2B1nocp000566@tach.newtechlaw.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
Message-ID: <BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>

Gerald B. Rosenberg wrote:
> At 03:08 PM 3/10/2008, Benjamin Shropshire wrote:
>
>> "how is antlr /expected/ to be used?" is the big one. That one should 
>> be on page one. I have yet to find a direct answer anywhere.
>
> Very difficult to formulate a one page/one paragraph answer.  After 
> all, Antlr is a DSL tailored for a large, variable problem space.  The 
> Antlr language operators are rather basic in nature -- to the extent 
> there are coding patterns, they are quite general at best.

Your points #12 & #13 cover a lot of what I would have liked to see on 
the front page. (That and enough context for someone new to known what 
they are talking about.)

> The step function learning problem is largely (I believe) one of 
> learning how to design a recognition specification subject to the 
> available mechanics of the Antlr language operators.
>
Oddly I was having a blast building and debugging my grammar. It was 
when I started trying to put int actions that stuff got difficult.

> That said, there are a number of caveats* that could be shared with 
> those new to Antlr**:
>
> 10) Use predicates to make clear what your code means.
> 11) Unless performance is absolutely your top 6 design requirements, 
> don't worry about using predicates.
that would be "don't worry about what predicates /cost/"?
>
> 12) Don't try to do too much in the lexer.  The parser is more 
> powerful anyway.
> 13) Don't try to do too much in the parser.  Use tree-walkers to 
> evolve an AST.

> 14) Don't try to dump complex blocks from a parser or AST.  Use 
> StringTemplate to unparse.
Does this hold if the final output is not a text file (e.g. in memory 
structures or a binary data file)
> 15) Actions (brace delimited statements) can be inserted almost anywhere.
Yah, I wish I'd noticed that one sooner.

From rdclark at gmail.com  Tue Mar 11 09:38:18 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 09:38:18 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <75CDD4A4-6F6A-445B-B693-25B2F719F566@classdump.org>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
	<00d801c88344$06eba360$c404a8c0@marion>
	<75CDD4A4-6F6A-445B-B693-25B2F719F566@classdump.org>
Message-ID: <d3992d900803110938v8f1aa5bia94f1d742ffa60d4@mail.gmail.com>

On Tue, Mar 11, 2008 at 1:55 AM, Kay R?pke <kroepke at classdump.org> wrote:

>  I think it referred to the (now thankfully obsolete) fact that for a
>  long time the source wasn't available.

I was. It's great news that the source is now available, as I'm
probably going to have to pick up C# programming soon.

...R

From rdclark at gmail.com  Tue Mar 11 09:46:43 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 09:46:43 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <B2B4D3618441D941B811329A672FD64E05529774@THHS2EXBE2X.hostedservice2.net>
References: <mailman.25773.1205212533.2502.antlr-interest@antlr.org>
	<B2B4D3618441D941B811329A672FD64E05529774@THHS2EXBE2X.hostedservice2.net>
Message-ID: <d3992d900803110946m26404a7ehe7d9e873179525c6@mail.gmail.com>

On Tue, Mar 11, 2008 at 4:39 AM, Paul Eames <peames at nexagent.com> wrote:
>  I'd agree that there's a bit of a learning curve and also that
>  the docs, aside from Terence's book, are not great.
>  Solution: buy the book :-)

I'm thinking about what would be useful for people who are evaluating
ANTLR. Even the "Quick start on parser grammars" can be a bit of a
jump for someone new. I'm thinking about a brief conceptual piece to
go in front of the quick start, 5 minute intro, etc.

Sometimes you need to learn the local lingo before you can make sense
of any docmentation, FAQs, etc.

...Richard

From gudnabrsam at yahoo.com  Tue Mar 11 09:48:16 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Tue, 11 Mar 2008 09:48:16 -0700 (PDT)
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
Message-ID: <2117.66578.qm@web55110.mail.re4.yahoo.com>


--- Benjamin Shropshire <shro8822 at vandals.uidaho.edu>
wrote:

> I don't want to be a troll so plese understand I'm
> trying to be helpful 
> with these comments, not antagonistic.

These are my reactions to the entire thread:

Yes, documentation for v3 is a little--well,
quite--sparse and probably does assume a basic
familiarity with theory.  I initially picked up
(enough) theory from reading/following (enough of)
Ter's course notes.  Good, good start for compiler
theory, especially for working with ANTLR
specifically.  I'm cheap so I haven't bought Ter's
book yet.  I probably will very soon.  I'm reading
Aho/Sethi/Ullman (the Dragon book) now, an older
version that I found at a thrift store (like I said,
I'm cheap) and I'm finding it quite helpful for
filling in the numerous gaps in my knowledge.  One
point I noticed was made in "Dragon" was one that's
already been made here:  it's easier to make changes
to a grammar that's specified in a structured form. 
My first real ANTLR project was done in ANTLR2 and my
department swears by it.  I mention this because it's
in stark contrast to your boss's and colleague's
reactions.

$0.02,
Matt


      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs

From corellian.c at gmail.com  Tue Mar 11 09:57:32 2008
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Tue, 11 Mar 2008 17:57:32 +0100
Subject: [antlr-interest]  [ST] How subtemplates work?
Message-ID: <92B6B901-6539-4E33-9F59-F29FD2E7819F@gmail.com>

Hi!

I have looked for subtemplates working examples or how subtemplates  
work in the ST wiki but I haven't managed to find out.

My question is, with this StringTemplate GroupFile:


pnml(xmlns) ::= <<
<pnml xmlns="$xmlns$">
   $net$
</pnml>
 >>

net(id, type) ::= <<
<net id="$id$" type="$type$">
   foobar
</net>
 >>


How should I implement my .g file to make the pnml template make use  
of net template?
For example:


grammar Test1;

options {output = template;}

s	:	INT '&' ID '&' net ';' -> pnml(xmlns={$INT.text}) ;
net	:	ID -> net(id={$ID.text},type={$ID.text}) ;
ID	:	'a'..'z'+ ;
INT	:	'0'..'9'+ ('.' '0'..'9'+)+ ;
WS	:	(' '|'\t'|'\n'|'\r') {skip();} ;

Which is not correct...

Thanks in advance,
Cris.

-- 
GPG Key-ID: 0x564903FA - Jabber ID: corellian at swissjabber.ch


From parrt at cs.usfca.edu  Tue Mar 11 10:36:14 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 10:36:14 -0700
Subject: [antlr-interest] [ST] How subtemplates work?
In-Reply-To: <92B6B901-6539-4E33-9F59-F29FD2E7819F@gmail.com>
References: <92B6B901-6539-4E33-9F59-F29FD2E7819F@gmail.com>
Message-ID: <A523D5AA-C1AB-4023-85AA-68F81D004380@cs.usfca.edu>


On Mar 11, 2008, at 9:57 AM, Cristian Peraferrer wrote:

> Hi!
>
> I have looked for subtemplates working examples or how subtemplates  
> work in the ST wiki but I haven't managed to find out.
>
> My question is, with this StringTemplate GroupFile:
>
>
> pnml(xmlns) ::= <<
> <pnml xmlns="$xmlns$">
>  $net$
> </pnml>
> >>

hi. must pass net in as attribute if you ref it.

pnml(xmlns, net) ::= ...

> net(id, type) ::= <<
> <net id="$id$" type="$type$">
>  foobar
> </net>
> >>
>
>
> How should I implement my .g file to make the pnml template make use  
> of net template?
> For example:
>
>
> grammar Test1;
>
> options {output = template;}
>
> s	:	INT '&' ID '&' net ';' -> pnml(xmlns={$INT.text}) ;

then -> pnml(xmlns={$INT.text}, net={$net.st}) ;

and you're golden.
Ter
>
> net	:	ID -> net(id={$ID.text},type={$ID.text}) ;
> ID	:	'a'..'z'+ ;
> INT	:	'0'..'9'+ ('.' '0'..'9'+)+ ;
> WS	:	(' '|'\t'|'\n'|'\r') {skip();} ;
>
> Which is not correct...
>
> Thanks in advance,
> Cris.
>
> -- 
> GPG Key-ID: 0x564903FA - Jabber ID: corellian at swissjabber.ch
>


From parrt at cs.usfca.edu  Tue Mar 11 10:39:54 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 10:39:54 -0700
Subject: [antlr-interest] A very simple grammar problem.
In-Reply-To: <18D658032E2F4F849517C0EA06FAF464@pc2008>
References: <18D658032E2F4F849517C0EA06FAF464@pc2008>
Message-ID: <31157E92-C9E4-47DE-9C5E-1BDDF84D681A@cs.usfca.edu>

Technically not. in 2nd example 'a' can be followed by EOF not in  
first since it's recursive; the warning says it can't decide to  
include EOF.  fi you allowe EOF it's not ambig.
Ter
On Mar 6, 2008, at 9:45 AM, Kenneth Domino wrote:

> Hi,
>
> I seem to be phasing out.  I thought that this grammar should work,  
> but it doesn't:
>
> grammar test_not_ok;
>
> a : 'A' a
>   | 'A'
>   ;
>
> $ java org.antlr.Tool test_not_ok.g
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
> warning(138): test_not_ok.g:0:0: grammar test_not_ok: no start rule  
> (no rule can
>  obviously be followed by EOF)
> warning(201): test_not_ok.g:3:3: The following alternatives are  
> unreachable: 2
>
>
> But, this one works, which specifies the same language if I'm not  
> wrong:
>
> grammar test_ok;
>
> a : b
>   ;
>
> b : 'A' b
>   | 'A'
>   ;
> The only difference is the extra production at the top.
> Do I have to manually augment all my grammars with an EOF rule (S- 
> >... to S' -> S EOF)
> or something else? What am I doing wrong here?
>
> Ken Domino
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/52188be7/attachment.html 

From parrt at cs.usfca.edu  Tue Mar 11 10:40:29 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 10:40:29 -0700
Subject: [antlr-interest] Questions regarding ANTLRv3.g
In-Reply-To: <A09FB133992541A7B85F918EB2D5FB0E@pc2008>
References: <A09FB133992541A7B85F918EB2D5FB0E@pc2008>
Message-ID: <0E01AF62-7E5B-4131-8B5A-FD300B6B3DFB@cs.usfca.edu>

ANTLRv3.g is a work in progress; not used yet.
Ter
On Mar 4, 2008, at 9:19 PM, Kenneth Domino wrote:

> Hi,
>
> I'm writing a pretty printer for ANTLR v3 grammars using the  
> ANTLRv3.g grammar from the examples section of the website (http://www.antlr.org/grammar/ANTLR 
> ).  In doing so, I have several questions that I'm hoping someone  
> could answer.
>
> 1) I couldn't help but notice that there are two files in the  
> Fisheye revision control system (http://fisheye2.cenqua.com/) for  
> ANTLRv3.g (http://fisheye2.cenqua.com/browse/antlr/src/org/antlr/tool/ANTLRv3.g?r=4556 
>  and http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288) 
> .  They seem to be out of sync.
>
> In the second file ("...4288")  token types include TREE_BEGIN,  
> ROOT, BANG, RANGE, REWRITE; in the first file ("...4556"), these  
> token types are not declared in the tokens section. What is the  
> reason for the difference?
>
> In the first file, ruleScopeSpec has one production, and it  
> specifies that id's do not have comma separation; in the second  
> file, ruleScopeSpec has three productions, and id's have comma  
> separation.  Which is the correct syntax?
>
> In the first file, the symbol SRC has modifier "protected"; in the  
> second file, SRC has modifier "fragment".  I thought "protected" was  
> changed to "fragment" with version 3 of ANTLR, and it would only  
> accept that?
>
> In the first file, ACTION_CHAR_LITERAL was defined as:
>
> fragment
> ACTION_CHAR_LITERAL
>  : '\'' (ACTION_ESC|.) '\''
>  ;
> In the second file, its defined as:
>
> fragment
> ACTION_CHAR_LITERAL
>  : '\'' (ACTION_ESC|~('\\'|'\'')) '\''
>  ;
>
> What is the purpose of the difference?  Which is the correct syntax?
>
> In addition, it looks like the build for ANTLR (http://fisheye2.cenqua.com/browse/ 
> ~raw,r=4540/antlr/build.xml) does not use ANTLRv3.g, but the file  
> antlr.g.  That file is an ANTLR version 2 input grammar, along with  
> several other ".g" files the comprise the build.
>
> What is the situation with the ANTLRv3.g grammar?  Will they be kept  
> in sync and will the new grammar be used in the build for ANTLR?
>
> 2) It looks like the example grammar http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288 
>  seems to have a bug in the tree construction for the third  
> production of elementNoOptionSpec, in which the ebnfSuffix is  
> completely lost from the tree:
>
> elementNoOptionSpec :
>  atom
>   ( ebnfSuffix -> ^(BLOCK["BLOCK"] ^(ALT["ALT"] atom EOA["EOA"])  
> EOB["EOB"])
>   |    -> atom
>   )
> For example, if one runs ANTLRWorks using ANTLRv3.g (http://www.antlr.org/grammar/ANTLR/ANTLRv3.g 
> ) with the input:
>
> grammar test;
>
> a : 'A'
>   | 'B' a?
>   | 'C' a*
>   | 'D' (a)?
>   | 'F' (a)*
>   ;
>
> then the AST constructed does not seem to have any nodes for '*' nor  
> '?' in the 2nd and 3rd productions.  I can only guess that the rule  
> should have been:
>
> elementNoOptionSpec :
>  atom
>   ( ebnfSuffix -> ^( ebnfSuffix ^(BLOCK["BLOCK"] ^(ALT["ALT"] atom  
> EOA["EOA"]) EOB["EOB"]))
>   |    -> atom
>   )
> Is this right?
>
> 3) Incidentally, when I debug the ANTLRv3.g grammar on ANTLRWorks  
> v1.1.7, it seems to produce nice looking trees, but it also has one  
> or more "javax.swing.text.BadLocationException" being raised.  Is  
> there a more recent version of ANTLRWorks that I can build?  It  
> doesn't look like the source is in Fisheye.  Where can I find it?
>
> Thanks.
>
> Ken Domino
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/6ef21397/attachment-0001.html 

From antlr at jazillian.com  Tue Mar 11 10:42:51 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 13:42:51 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
Message-ID: <47D6C49B.10306@jazillian.com>

Richard Clark wrote:
> 3. Compiler construction and its cousins Lexing and Parsing are 
> *hard*. If you think the ANTLR documentation is challenging, try 
> reading Aho, Sethi, and Ullman. There's a balance between setting 
> people's expectations and scaring them away. On the other hand, I 
> appreciate constructive conversations about helping people get 
> started. (I got my start teaching software development courses and I'm 
> still partial to the newcomers. :) )
>
Lexing and parsing may be hard in general, but are very often easy for a 
specific task.
I agree with Benjamin that the documentation for doing the easy stuff 
could be better.

Compiling Java code to byte code is not an easy subject, but simply 
*using* a compiler like javac
is completely trivial. Writing your own lexer or parser is often 
somewhere in the middle, between
having to understand what LL(*) is and what a semantic predicate is, and 
simply writing 20 lines of
code to call an existing lexer and parser.

The mailing list is great, but the messages here should also be sending 
up a red flag. How many times
do we see people ask "why isn't this 10-line grammar working?" or "how 
do I print out an AST nicely?"
I don't think that getting a 10-line ANTLR grammar working should be 
much more difficult than getting
a 10-line Java/C/whatever program working. I realize that 
ease-of-use-for-newbies is not the direction
that ANTLR is heading, but ANTLR could certainly be made easier without 
"dumbing it down".
I like Benjamin's idea of having someone study people who are just 
learning parsers and ANTLR,
and making it easier for the newbie. Couldn't hurt.


From parrt at cs.usfca.edu  Tue Mar 11 10:42:55 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 10:42:55 -0700
Subject: [antlr-interest] Retaining comments
In-Reply-To: <1678.1204147172@speakeasy.net>
References: <1678.1204147172@speakeasy.net>
Message-ID: <8C7963DB-9363-4B07-99F3-C0EF11913DE0@cs.usfca.edu>

send comments to parser on different channel.  then lookin token  
buffer for them between "real" tokens.
Ter
On Feb 27, 2008, at 1:19 PM, <bmeike at speakeasy.net> <bmeike at speakeasy.net 
 > wrote:

>
>
>
>
> On Wed Feb 27 12:29 , Gavin Lambert sent:
> > This will keep the comment tokens in the token stream at the
> > appropriate points. To transfer them you'll have to add some code
> > that looks for comment tokens nearby recognised parser constructs
> > so you can emit them at the right place in the output.
>
> Sound great.  What do you mean by "looks for comment tokens".  As  
> far as I can tell, the parser only sees the DEFAULT channel.  Where  
> do I look, to find nearby tokens?
>
> Thanks!
>   Blake Meike
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/8d5f5cf6/attachment.html 

From antlr at jazillian.com  Tue Mar 11 10:50:26 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 13:50:26 -0400
Subject: [antlr-interest] Fwd:  Pruning the Parse Tree
In-Reply-To: <5a086d5a0803101734r61252009t62bb186ba98e1c20@mail.gmail.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>	<1204922861.47d1a9ed86afa@clients.latnet.lv>	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
	<5a086d5a0803101734r61252009t62bb186ba98e1c20@mail.gmail.com>
Message-ID: <47D6C662.8020005@jazillian.com>

Aaron Armstrong wrote:
>
> 2. The default AST is flat.  Basically, I get no more information than 
> what the lexer would give me.  (I don't know why this is, but ANTLR is 
> not my design).
>
I've always thought it was a bit odd that the default AST is flat. 
(Don't bother explaining the reasoning
to me, I've already heard the explanation, and I still think it's odd). 
At least an option to say
"make the AST match the parse tree" would be nice, as opposed to forcing 
me to sprinkle
"^" characters in my grammar.

From jaluber at gmx.de  Tue Mar 11 10:54:59 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 11 Mar 2008 18:54:59 +0100
Subject: [antlr-interest] ANTLR tree construction problem
In-Reply-To: <A2C7DD4B3F904EDAB3D4020AB0E664D0@pc2008>
References: <A2C7DD4B3F904EDAB3D4020AB0E664D0@pc2008>
Message-ID: <47D6C773.7030800@gmx.de>

Kenneth Domino schrieb:
> Hi,
> 
> I'm working with the example grammar ANTLRv3.g
> (http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288) 
> 
> and it looks like either the label handling in the generated parser is
> not correct.  This seems to be exposed with modifiers (e.g.,
> "fragment"), where the code uses the label "modifier" for a Token from
> a set of string literals in the grammar.  The code in question is:

This is a known problem. There is an easy workaround though - just 
extract the subrule, which you want to label.

Johannes

From gudnabrsam at yahoo.com  Tue Mar 11 10:59:31 2008
From: gudnabrsam at yahoo.com (Matt Benson)
Date: Tue, 11 Mar 2008 10:59:31 -0700 (PDT)
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP0855CB6911EB6316E0284EF50F0@CEZ.ICE>
Message-ID: <202441.80926.qm@web55102.mail.re4.yahoo.com>


--- Benjamin Shropshire <shro8822 at vandals.uidaho.edu>
wrote:

> Matt Benson wrote:
> > --- Benjamin Shropshire
> <shro8822 at vandals.uidaho.edu>
> > wrote:
> >
> >   
> >> I don't want to be a troll so plese understand
> I'm
> >> trying to be helpful 
> >> with these comments, not antagonistic.
> >>     
> >
> > These are my reactions to the entire thread:
> >
> > Yes, documentation for v3 is a little--well,
> > quite--sparse and probably does assume a basic
> > familiarity with theory.  I initially picked up
> > (enough) theory from reading/following (enough of)
> > Ter's course notes.  Good, good start for compiler
> > theory, especially for working with ANTLR
> > specifically.  I'm cheap so I haven't bought Ter's
> > book yet.  I probably will very soon.  I'm reading
> > Aho/Sethi/Ullman (the Dragon book) now, an older
> > version that I found at a thrift store (like I
> said,
> > I'm cheap) and I'm finding it quite helpful for
> > filling in the numerous gaps in my knowledge.
> I find it odd that people keep dragging language
> theory into the thread.
> 
> IMHO: Language theroy + ANTLR == Just dandy
> 
> I didn't have any problems with it.
> 
> 
> BTW just to get it out there: TDAR is a well written
> and valuable book 
> and it presents material clearly and /is/ much
> better than the web page. 
> My only real concern is that it doesn't present /up
> front/ what I see as 
> the most important pieces of information. Namely the
> architectural 
> structure that antlr is designed for you will use.
> (I don't expect that 
> to be changed, it's a book after all and that would
> be rather costly).

I think the reason parsing theory keeps coming up is
that "the architectural structure that antlr is
designed for you will use" ==
lexer->parser->treeparser == parsing theory, more or
less.  There's a problem _somewhere_.  I'll apologize
in advance for being blunt, but the sheer number of
misspellings and grammatical blunders (transcending
mere errors) in your posts give me doubts regarding
your facility with language concepts, in any context. 
I'll retract that statement, however, if you are not,
as I would infer from your name and location, a native
English speaker.

-Matt



      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From kenneth.domino at domemtech.com  Tue Mar 11 10:59:25 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Tue, 11 Mar 2008 13:59:25 -0400
Subject: [antlr-interest] ANTLRv3.g problem
Message-ID: <319BB238B18A4AD6AF1251CAF5A05B44@pc2008>

FYI, there seems to be a problem with the grammar ANTLRv3.g
(http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288)
on the following legal input (use ANTLRWorks to see the bogus
token created for the action):

grammar xx;
a : { bar("}"); } ;

I debugged the program and it appears that the problem
is related to nesting strings in actions. The relevant rules are:

fragment
NESTED_ACTION :
 '{'
 ( options {greedy=false; k=3;}
 : NESTED_ACTION
 | SL_COMMENT
 | ML_COMMENT
 | ACTION_STRING_LITERAL
 | ACTION_CHAR_LITERAL
 | .
 )*
 '}'
 {$channel = DEFAULT_TOKEN_CHANNEL;}
   ;

fragment
ACTION_STRING_LITERAL
 : '"' (ACTION_ESC|~('\\'|'"'))+ '"'
 ;

It seems that the lexer should jump into an
automaton to recognizing strings once finding a double
quote, but it doesn't.
Instead, after seeing the first double quote, it does a
LA for a "}", like it wants to match the DOT alternative.
Also, it seems that the ACTION_STRING_LITERAL
is not totally correct because of the closure ("+").
This would seem to preclude an empty string (e.g., "").

The rules are slightly different than
what is found in "antlr.g" in org/antlr/tool/, which is used
by the ANTLR tool, but not that different.  So, I'm wondering
if there is a problem with the DFA construction.

I found this problem while using the
ANTLRv3.g grammar for a pretty printer, which is now
starting to work pretty well!

Say, is there a switch in ANTLR to dump all the states and
transitions so I can figure this out?

Ken Domino
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/2e78357a/attachment.html 

From antlr at jazillian.com  Tue Mar 11 11:00:53 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 14:00:53 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <200803110149.m2B1nocp000566@tach.newtechlaw.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
Message-ID: <47D6C8D5.80106@jazillian.com>

Gerald B. Rosenberg wrote:
>  And, design in Antlr is largely a function of the language to be 
> recognized.  If you look at the archived grammars, what at first 
> appears to be wildly varying styles is more a consequence of design 
> choices tailored to the intended function of the grammars.
>
Here: 
http://www.antlr.org/pipermail/antlr-interest/2004-October/009742.html
I compare the two ASTs built by two people for the same language (Java 
1.5), and the
ASTs have some differences. There's no particular reason for the 
differences (it's not like one person
needed the AST to look one way, and the other another way).

Again, my point is that it would be nice to have ANTLR by default build 
a reasonable AST without
any explicit AST-building syntax ("^" and "!") in the grammar.



From rob at cmsnet.org.uk  Tue Mar 11 11:08:47 2008
From: rob at cmsnet.org.uk (Rob Shields)
Date: Tue, 11 Mar 2008 18:08:47 +0000
Subject: [antlr-interest] newbie question, escaped characters
Message-ID: <47D6CAAF.4040509@cmsnet.org.uk>

Hi,

I'm maintaining a project that uses antlr. Let's say I have some syntax 
that looks like this:


<snip>
protected SIMPLETERM: (TERM_CHAR)+;

protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR;

protected SIMPLE_TERM_CHAR:  ~( ' ' | '\t' | '!' | '(' | ')' | ':' |
'^' | '[' | ']' | '\\' | '\"' | '{' | '}' | '~' | '/' | '\r' | '\n' );

protected ESCAPED_TERM_CHAR:  '\\'! ( '\\' | '+'  | '-' | '!' | '(' |
')' | ':' | '^' |  '[' | ']' | '\"' | '{' | '}' | '~' | '*' | '?' |
'/');
<snip>


So the '\\'! swallows the backslash of the escaped characters. However, 
I want to preserve the backslash for the * and ? characters because they 
have special significance. I thought about something like this:


<snip>
protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR | 
WILDCARD_TERM_CHAR;

<snip>

protected WILDCARD_TERM_CHAR: '\\' ( '*' | '?' );
<snip>


Of course that doesn't work because of lexical nondeterminism between 
ESCAPED_TERM_CHAR and WILDCARD_TERM_CHAR.

Is it possible to do what I want? Any thoughts?

Thanks :)
Rob




From parrt at cs.usfca.edu  Tue Mar 11 11:09:47 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 11:09:47 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6C8D5.80106@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
Message-ID: <E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>


On Mar 11, 2008, at 11:00 AM, Andy Tripp wrote:

> Gerald B. Rosenberg wrote:
>> And, design in Antlr is largely a function of the language to be  
>> recognized.  If you look at the archived grammars, what at first  
>> appears to be wildly varying styles is more a consequence of design  
>> choices tailored to the intended function of the grammars.
>>
> Here: http://www.antlr.org/pipermail/antlr-interest/2004-October/009742.html
> I compare the two ASTs built by two people for the same language  
> (Java 1.5), and the
> ASTs have some differences. There's no particular reason for the  
> differences (it's not like one person
> needed the AST to look one way, and the other another way).
>
> Again, my point is that it would be nice to have ANTLR by default  
> build a reasonable AST without
> any explicit AST-building syntax ("^" and "!") in the grammar.

how could ANTLR *possibly* know the structure of the AST to build  
except for, perhaps, expressions? parse tree, yes. AST, no.

Ter


From parrt at cs.usfca.edu  Tue Mar 11 11:10:19 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 11:10:19 -0700
Subject: [antlr-interest] ANTLRv3.g problem
In-Reply-To: <319BB238B18A4AD6AF1251CAF5A05B44@pc2008>
References: <319BB238B18A4AD6AF1251CAF5A05B44@pc2008>
Message-ID: <B0F7A191-DEE8-4300-9A03-1109942C3D2F@cs.usfca.edu>

Hi Kenneth,

  please ignore that grammar... is just something I am playing with in  
preparation for removing the dependency on version 2.
Ter
On Mar 11, 2008, at 10:59 AM, Kenneth Domino wrote:

> FYI, there seems to be a problem with the grammar ANTLRv3.g
> (http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288 
> )
> on the following legal input (use ANTLRWorks to see the bogus
> token created for the action):
>
> grammar xx;
> a : { bar("}"); } ;
> I debugged the program and it appears that the problem
> is related to nesting strings in actions. The relevant rules are:
>
> fragment
> NESTED_ACTION :
>  '{'
>  ( options {greedy=false; k=3;}
>  : NESTED_ACTION
>  | SL_COMMENT
>  | ML_COMMENT
>  | ACTION_STRING_LITERAL
>  | ACTION_CHAR_LITERAL
>  | .
>  )*
>  '}'
>  {$channel = DEFAULT_TOKEN_CHANNEL;}
>    ;
>
> fragment
> ACTION_STRING_LITERAL
>  : '"' (ACTION_ESC|~('\\'|'"'))+ '"'
>  ;
>
> It seems that the lexer should jump into an
> automaton to recognizing strings once finding a double
> quote, but it doesn't.
> Instead, after seeing the first double quote, it does a
> LA for a "}", like it wants to match the DOT alternative.
> Also, it seems that the ACTION_STRING_LITERAL
> is not totally correct because of the closure ("+").
> This would seem to preclude an empty string (e.g., "").
>
> The rules are slightly different than
> what is found in "antlr.g" in org/antlr/tool/, which is used
> by the ANTLR tool, but not that different.  So, I'm wondering
> if there is a problem with the DFA construction.
>
> I found this problem while using the
> ANTLRv3.g grammar for a pretty printer, which is now
> starting to work pretty well!
>
> Say, is there a switch in ANTLR to dump all the states and
> transitions so I can figure this out?
>
> Ken Domino
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/830dc98c/attachment.html 

From brent.yates at gmail.com  Tue Mar 11 11:10:37 2008
From: brent.yates at gmail.com (Brent Yates)
Date: Tue, 11 Mar 2008 14:10:37 -0400
Subject: [antlr-interest] Lexer problem
In-Reply-To: <ebc876d70803110220p42b4b4ck1c7f61581df39f1@mail.gmail.com>
References: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
	<ebc876d70803102202n240b4e15pc89c9cb7caa71106@mail.gmail.com>
	<6edc6c380803102215r4814b443jee7ce6e33663ff07@mail.gmail.com>
	<d3992d900803102229r7da58663wb46b0bf4bb63d23a@mail.gmail.com>
	<ebc876d70803110220p42b4b4ck1c7f61581df39f1@mail.gmail.com>
Message-ID: <6edc6c380803111110m3ed62e91ifd91c90bab753b8b@mail.gmail.com>

Thanks for the comments guys.  It looks like I will have to add some target
specific code to catch the fall through cases.  I was hoping for a more
generic way.

Thanks,

Brent Yates
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/8e979d35/attachment.html 

From antlr at jazillian.com  Tue Mar 11 11:10:58 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 14:10:58 -0400
Subject: [antlr-interest] PHP AST Grammar
In-Reply-To: <BLU124-W2609D3F06CC94CE6BB3C41840F0@phx.gbl>
References: <2b5f47650803061751l41ed228exf5bf9d7251b66074@mail.gmail.com>	<20080307082012.404BD11EB91@www.antlr.org>
	<BLU124-W2609D3F06CC94CE6BB3C41840F0@phx.gbl>
Message-ID: <47D6CB32.4080400@jazillian.com>

Adam Cooney wrote:
> Hey,
> I've been searching for a grammar for PHP that can build ASTs and so 
> far have come up with nothing for ANTLR (in fact, nothing at all 
> related to PHP). However, I did find a program called PHC which 
> contains a php grammar I am thinking of attempting to convert to 
> ANTLR, but was wondering if anyone has attempted to build a PHP AST 
> grammar before or has a PHP grammar.
>  
I'd love to see a USF compiler course have a final project in which each 
student gets assigned one of the "top 20"
languages and must write an AST-producing ANTLR3 grammar for it. Here's 
my "top 20" list:

ANTLR v3 (get the current one working)
Java
C#
C
C++  (be sure this one goes to the smartest kid in the class :)
PHP
python
perl
ruby
javascript
html
COBOL (to the most annoying person in class, or anyone over 50)
FORTRAN
Scheme
bash/ksh/sh
SQL
VB
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/1604f42f/attachment.html 

From parrt at cs.usfca.edu  Tue Mar 11 11:11:30 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 11:11:30 -0700
Subject: [antlr-interest] Fwd:  Pruning the Parse Tree
In-Reply-To: <47D6C662.8020005@jazillian.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>	<1204922861.47d1a9ed86afa@clients.latnet.lv>	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
	<5a086d5a0803101734r61252009t62bb186ba98e1c20@mail.gmail.com>
	<47D6C662.8020005@jazillian.com>
Message-ID: <E1BC5267-B0B5-4F48-A9BE-CE148B3E147E@cs.usfca.edu>


On Mar 11, 2008, at 10:50 AM, Andy Tripp wrote:

> Aaron Armstrong wrote:
>>
>> 2. The default AST is flat.  Basically, I get no more information  
>> than what the lexer would give me.  (I don't know why this is, but  
>> ANTLR is not my design).
>>
> I've always thought it was a bit odd that the default AST is flat.  
> (Don't bother explaining the reasoning
> to me, I've already heard the explanation, and I still think it's  
> odd). At least an option to say
> "make the AST match the parse tree" would be nice, as opposed to  
> forcing me to sprinkle
> "^" characters in my grammar.

Uh, making the AST look like a parse tree is, um, a parse tree, which  
ANTLR can build for you automatically now no problem.

Ter

From Bernhard.Schmalhofer at gmx.de  Tue Mar 11 11:17:27 2008
From: Bernhard.Schmalhofer at gmx.de (Bernhard Schmalhofer)
Date: Tue, 11 Mar 2008 19:17:27 +0100
Subject: [antlr-interest] PHP AST Grammar
In-Reply-To: <BLU124-W2609D3F06CC94CE6BB3C41840F0@phx.gbl>
References: <2b5f47650803061751l41ed228exf5bf9d7251b66074@mail.gmail.com>	<20080307082012.404BD11EB91@www.antlr.org>
	<BLU124-W2609D3F06CC94CE6BB3C41840F0@phx.gbl>
Message-ID: <47D6CCB7.7090401@gmx.de>

Adam Cooney schrieb:
> Hey,
> I've been searching for a grammar for PHP that can build ASTs and so 
> far have come up with nothing for ANTLR (in fact, nothing at all 
> related to PHP). However, I did find a program called PHC which 
> contains a php grammar I am thinking of attempting to convert to 
> ANTLR, but was wondering if anyone has attempted to build a PHP AST 
> grammar before or has a PHP grammar.
Hi,

I have been toying with parsing and tree processing of PHP.

My Project is called Plumhead, name after ther *P*lum*h*eaded *P*arakeet,
http://www.perlfoundation.org/parrot/index.cgi?plumhead.
The compilation target is the Parrot Abstract Syntax Tree, which can be
compiled into bytecode for the Parrot virtual machine, 
http://parrotcode.org.

I have started implementation of three different frontends.
i. Convert XML output of PHC with XSLT
ii. ANTLR3 Lexer, Parser, and Tree Parser
iii. Perl 6 like grammar, executed with the Parrot Compiler Tools.

I am not very far yet, so any comments and suggestions are very appreciated.

The Plumhead-code is part of the Parrot SVN repository, 
https://svn.perl.org/parrot/trunk.
It can be found in the 'languages/plumhead' directory.

Best regards,
  Bernhard Schmalhofer




From antlr at jazillian.com  Tue Mar 11 11:18:12 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 14:18:12 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
Message-ID: <47D6CCE4.3070205@jazillian.com>

Benjamin Shropshire wrote:
> Oddly I was having a blast building and debugging my grammar. It was 
> when I started trying to put int actions that stuff got difficult.
>
That's not odd at all. When building a grammar, you're specifying what's 
valid input - fairly straightforward.
When you start putting in actions, you necessarily have to start 
understanding the structure of the
generated code, and you're mixing two types of processing: parsing of 
input and doing (something else
with actions).

I really don't like the book example of evaluating an expression with 
ANTLR. Better to build an AST
as one step, and then evaluate the expression by walking the AST as a 
distinct step. I realize the example
is probably "for illustrative purposes only", but there must be a better 
example than trying to do two things
(parse and evaulate) at once.

From rdclark at gmail.com  Tue Mar 11 11:25:35 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 11:25:35 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6C49B.10306@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>
	<47D6C49B.10306@jazillian.com>
Message-ID: <d3992d900803111125u7daf7480s80ae4d43e6d8d8cd@mail.gmail.com>

On Tue, Mar 11, 2008 at 10:42 AM, Andy Tripp <antlr at jazillian.com> wrote:

>  I don't think that getting a 10-line ANTLR grammar working should be
>  much more difficult than getting a 10-line Java/C/whatever program working.

To disagree with you (gently), someone who cut their teeth on LISP
will probably have a hard time with their first 10-line
Java/C/Ruby/etc. program (and vice versa). There's a whole different
way of thinking involved.

>  How many times do we see people ask "why isn't this 10-line grammar
>  working?" or "how do I print out an AST nicely?"

These kinds of questions are parts of the learning process, not
necessarily de facto evidence of a problem with ANTLR. Where we can
help is identifying common misperceptions about ANTLR and describing
those parts in the correct way (e.g. how to think about structuring
your lexer definitions) and defining key ideas in a way that people
can become more self-sufficient with the documentation.

I would not, as has been suggested, try to lay a simpler face on
ANTLR. The tool is designed very cleanly and simply; there's a clear
connection between when you write in the grammar and what you get from
ANTLR (assuming your mental model of the app is correct.) Putting a
"simplifying" layer on top can introduce assumptions that actually
make the result harder to understand and work with.

The hardest part of writing good conceptual documentation is to make
sure it's absolutely correct. I'm happy to draft it, if I can get
reviewers who really know ANTLR all the way through (Kay, Ter, etc.)

...Richard

From rdclark at gmail.com  Tue Mar 11 11:35:30 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 11:35:30 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6CCE4.3070205@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<47D6CCE4.3070205@jazillian.com>
Message-ID: <d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>

On Tue, Mar 11, 2008 at 11:18 AM, Andy Tripp <antlr at jazillian.com> wrote:

>  I really don't like the book example of evaluating an expression with
>  ANTLR. Better to build an AST as one step, and then evaluate the
>  expression by walking the AST as a distinct step.

Except that evaluate-and-do is a common (and powerful) design pattern
with ANTLR. Working via an AST is other powerful design pattern. They
both have their uses; knowing when to use which is a key skill for
mastering ANTLR.

Instructionally, evaluate-and-do is much better than evaluate->AST->do
(though the latter is preferred by the compiler cognoscenti.)

Folks who have taken a compiler class tend to prefer ASTs because they
fit what a compiler does (parse, transform, emit.) Emitting an AST is
also great for taking multiple variations on a phrase and reducing it
into a standard expression before emitting a value or performing an
action.

 ...Richard

From antlr at jazillian.com  Tue Mar 11 11:35:54 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 14:35:54 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
Message-ID: <47D6D10A.1050006@jazillian.com>

Terence Parr wrote:
> how could ANTLR *possibly* know the structure of the AST to build 
> except for, perhaps, expressions? parse tree, yes. AST, no.
How about have the AST just match the parse tree by default?

From shro8822 at vandals.uidaho.edu  Tue Mar 11 11:37:32 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Tue, 11 Mar 2008 11:37:32 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
Message-ID: <BAYC1-PASMTP1573E6E7121AB93B713CE6F50F0@CEZ.ICE>

Terence Parr wrote:
>
> On Mar 11, 2008, at 11:00 AM, Andy Tripp wrote:
>
>> Gerald B. Rosenberg wrote:
>>> And, design in Antlr is largely a function of the language to be 
>>> recognized.  If you look at the archived grammars, what at first 
>>> appears to be wildly varying styles is more a consequence of design 
>>> choices tailored to the intended function of the grammars.
>>>
>> Here: 
>> http://www.antlr.org/pipermail/antlr-interest/2004-October/009742.html 
>>
>> I compare the two ASTs built by two people for the same language 
>> (Java 1.5), and the
>> ASTs have some differences. There's no particular reason for the 
>> differences (it's not like one person
>> needed the AST to look one way, and the other another way).
>>
>> Again, my point is that it would be nice to have ANTLR by default 
>> build a reasonable AST without
>> any explicit AST-building syntax ("^" and "!") in the grammar.
>
> how could ANTLR *possibly* know the structure of the AST to build 
> except for, perhaps, expressions? parse tree, yes. AST, no.
>
> Ter
>
>
That /is/ to much to expect.

From darien.hager at etelos-inc.com  Tue Mar 11 11:38:35 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Tue, 11 Mar 2008 11:38:35 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6CCE4.3070205@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<47D6CCE4.3070205@jazillian.com>
Message-ID: <c8c997f40803111138s38fbbc51v866048b100d13552@mail.gmail.com>

Andy: I agree. Perhaps examples involving embedding application code into a
grammar should be introduced after all of the basics for creating an AST.
This de-emphasizes knowing the inner workings of the code generation, and is
less threatening to new users (e.g. those with no language-parsing
experience beyond simple regular expressions.)


The reason I say "less threatening" is because--perceptually--it provides
better encapsulation. While it doesn't show off all that ANTLR can do, it
provides a nice understandable set of boundaries to start learning with:
"Text goes in, tree structure comes out". Leading off with "Here is how
basically your entire calculator program is implemented in ANTLR" is a
comparatively creepy example. It triggers instinctual fear of lock-in and
needing weirdly re-implement existing code inside a grammar file.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/760370a0/attachment.html 

From rdclark at gmail.com  Tue Mar 11 11:39:58 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 11:39:58 -0700
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <47D6CAAF.4040509@cmsnet.org.uk>
References: <47D6CAAF.4040509@cmsnet.org.uk>
Message-ID: <d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>

When you added:

  protected WILDCARD_TERM_CHAR: '\\' ( '*' | '?' );

did you remove the * and ? from ESCAPED_TERM_CHAR?

...Richard

From darien.hager at etelos-inc.com  Tue Mar 11 11:40:52 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Tue, 11 Mar 2008 11:40:52 -0700
Subject: [antlr-interest] PHP AST Grammar
In-Reply-To: <BLU124-W2609D3F06CC94CE6BB3C41840F0@phx.gbl>
References: <2b5f47650803061751l41ed228exf5bf9d7251b66074@mail.gmail.com>
	<20080307082012.404BD11EB91@www.antlr.org>
	<BLU124-W2609D3F06CC94CE6BB3C41840F0@phx.gbl>
Message-ID: <c8c997f40803111140q7177ac7r8947e365bf72a1d8@mail.gmail.com>

On 3/11/08, Adam Cooney <ad_cooney at hotmail.com> wrote:
>
> Hey,
> I've been searching for a grammar for PHP that can build ASTs and so far
> have come up with nothing for ANTLR (in fact, nothing at all related to
> PHP). However, I did find a program called PHC which contains a php grammar
> I am thinking of attempting to convert to ANTLR, but was wondering if anyone
> has attempted to build a PHP AST grammar before or has a PHP grammar.
>

Depending on what you're trying to do with your ASTs, I'd like to recommend
you at least take a look at PHP's built-in lexer/tokenizer extension. I've
found it useful for things like disallowing dangerous code in eval()
statements (don't ask, yes, eval() is actually evil() )

http://us.php.net/manual/en/ref.tokenizer.php

Mind you, this is only a tokenizer, but it means you don't need to
reimplement all the possible quoting, comments, whitespace, and HEREDOC
rules. There are some wrinkles (you need to do lookahead for a parenthesis
to figure out if something is a function call or not.)

You can't directly integrate it with ANTLR--that'd have to be some custom
project for a particular rntime...Hmmm... A custom token
stream in Java which can deserialize those tokens (e.g. from JSON) for
use with an ANTLR parser...

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/e501bc47/attachment.html 

From rdclark at gmail.com  Tue Mar 11 11:44:11 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 11:44:11 -0700
Subject: [antlr-interest] Pruning the Parse Tree
In-Reply-To: <5a086d5a0803102214n2937abb3rd0d2e5ae9cba0b1d@mail.gmail.com>
References: <5a086d5a0803062059p480ec99cg56605ca26dcccc31@mail.gmail.com>
	<1204922861.47d1a9ed86afa@clients.latnet.lv>
	<5a086d5a0803101135k105abbd3g54302820ad70de8b@mail.gmail.com>
	<1205188814.47d5b8cee4e90@clients.latnet.lv>
	<d3992d900803101922l5f9bc532i39cb7dbf015b7cca@mail.gmail.com>
	<5a086d5a0803102214n2937abb3rd0d2e5ae9cba0b1d@mail.gmail.com>
Message-ID: <d3992d900803111144m11d9a5eheb9b5f06bbee9c03@mail.gmail.com>

If the "flatness" of the AST is a problem, you could always write your
own tree adaptor and generate the tree nodes with any relationship you
like. This is an old ANTLR 2 trick.

Otherwise, if you want to handle parse trees like ANTLRWorks does, I'd
suggest looking into its source code and the source for ANTLR's
debugging interface. I'm not fond of building production solutions
that depend on "debugging interfaces" and the like, as there's no
expectation that those undocumented bits will remain stable in the
future.

 ...Richard

From SWatt at infobal.com  Tue Mar 11 12:45:47 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Tue, 11 Mar 2008 14:45:47 -0500
Subject: [antlr-interest] Retaining comments
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DAE31@EXSVR1>

OK, I'm going to have to do this as well. However, my dream would be....
 
Can we use/generate an XML AST, with the text nodes corresponding exactly to
the input source received at the lexer, and the elements corresponding to
the AST tags. I know there are all sorts of complexities with this, but it
enables several outcomes:
 
1. Using fast and general tree processing via XML and DOM, maybe even using
XPath and XQuery
2. Easy filtering via the above
3. Clear mapping between AST and text, which is not currently easy
 
Although I have not completely looked into this yet (and I will) it seems
most of this could be done fine using an additional AST writer. I wrote one
which does the XML, but does not preserve the input text. In the end, I had
to do this, as the current AST notation (which I wanted to read for
processing) was unable to distinguish, say, between an imaginary token
"FUNCTION" and a language identifier written as uppercase "FUNCTION", unless
I tagged absolutely every single thing in the grammar, which was tedious.
There are all sorts of other nasty cases (e.g., does whitespace fall inside
or outside of particular elements). And in particular, this would require
some mapping between imaginary tokens and text positions which is not always
possible. 
 
I'm developing a system which will annotate code, both generating
human-readable output and a component index. The one pushes you to a text
output, the other to an AST - I've ended up needing both, largely because of
similar issues. It seems it may be fairly simple to develop this kind of
tree writer for cases like these. 
 
Any thoughts on this? Am I crazy/doing it all wrong?
 
--S

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu]
Sent: Tuesday, March 11, 2008 12:43 PM
To: bmeike at speakeasy.net
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining comments


send comments to parser on different channel.  then lookin token buffer for
them between "real" tokens. 
Ter

On Feb 27, 2008, at 1:19 PM, < bmeike at speakeasy.net
<mailto:bmeike at speakeasy.net> > < bmeike at speakeasy.net
<mailto:bmeike at speakeasy.net> > wrote:






On Wed Feb 27 12:29 , Gavin Lambert sent:


> This will keep the comment tokens in the token stream at the 
> appropriate points. To transfer them you'll have to add some code 
> that looks for comment tokens nearby recognised parser constructs 
> so you can emit them at the right place in the output.

Sound great.  What do you mean by "looks for comment tokens".  As far as I
can tell, the parser only sees the DEFAULT channel.  Where do I look, to
find nearby tokens?

Thanks!
  Blake Meike





-- 
This message was scanned by ESVA and is believed to be clean. 
Click
<http://antispam.infobal.com/cgi-bin/learn-msg.cgi?id=3F8A7299B6.2E2B3> here
to report this message as spam. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/1f650eca/attachment-0001.html 

From jimi at temporal-wave.com  Tue Mar 11 11:54:20 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 11 Mar 2008 11:54:20 -0700
Subject: [antlr-interest] Lexer problem
In-Reply-To: <6edc6c380803102051o2194f954s21778139514f4f56@mail.gmail.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAc9I+zd8pvUS
	PhPaaWgpL0gEAAAAA@10.0.1.201>

Actually I think that what is happening is that your call to the WS rule after POUND is setting the token HIDDEN. This is a side effect of a change meant to fix something else and is (probably ;-), a bug. We are talking about what to do about this at the moment - currently you cat' change the token type by calling a fragment either. For now, change your call to WS to explicitly use (' ' | '\t')*, then your token won't be hidden.

 

Also note that your predicate will send 'aaa' down the first alt of your sub rule even if there is no WS DECIMAL_POINT following it. Hence you will get a lexer mismatch error in some cases. You should try to cover all alternatives, even errors, so you can do something under your own control. Generally though it is best to leave ordered construction up to the parser if you can.

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Brent Yates
Sent: Monday, March 10, 2008 8:51 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Lexer problem

 

I need some help understanding syntactic predicates when used in the lexer.

Here is a simple grammar that will run in AntlrWorks:

grammar Simple;

options
    {
    language= Java;
    output=AST;
    }

start
    :   TEST
    ;

POUND   :   '#' ;
ID      :   'a'..'z'+ ;
fragment DECIMAL_DIGIT
    :   '0'..'9'
    ;

TEST
    :   POUND WS?
    (
        ('aaa') => 'aaa' WS DECIMAL_DIGIT       {$channel=HIDDEN;$type=DECIMAL_DIGIT;}
    |   ('bbb') => 'bbb' WS DECIMAL_DIGIT       {$channel=HIDDEN;$type=ID;}
    |   ID
    )
    ;

fragment SPACE_OR_TAB
    :  (' '|'\t')+
    ;

WS
    :   SPACE_OR_TAB+
        {$channel=HIDDEN;}
    ;

NEWLINE
    :   ('\r'? ('\u000C'|'\n') )
        {$channel=HIDDEN;}
    ;

When fed this input:

# aaa 4
# bbb
#hi

I would expect the following:

1) the '# aaa 4' matches alt1 in TEST and should be set to HIDDEN and type DECIMAL_DIGIT.  And that does happen.
2) the '# bbb<nl>#hi' does not match alt2, however it does match the predicate.  I would expect a lexer error.  What happens is that the token type is set to HIDDEN and the rules actually matches the ID and returns a type of TEST.  That I don't understand.

It looks like the actions of alt2 are being run even though only the predicate matches.  Also, if the predicate matches, why does the lexer later match alt3?

Thanks for your help,

Brent Yates
brent,yates at gmail.com





-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/3d8fc40c/attachment.html 

From antlr at mirality.co.nz  Tue Mar 11 11:54:17 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 12 Mar 2008 07:54:17 +1300
Subject: [antlr-interest] ANTLR tree construction problem
In-Reply-To: <A2C7DD4B3F904EDAB3D4020AB0E664D0@pc2008>
References: <A2C7DD4B3F904EDAB3D4020AB0E664D0@pc2008>
Message-ID: <20080311185442.4CFED11EE62@www.antlr.org>

At 15:46 11/03/2008, Kenneth Domino wrote:
 >I think the rule is ok.  The problem seems to be in the code
 >generated for the expression:
 >
 >"(modifier=('protected'|'public'|'private'|'fragment') )?"
 >
 >There is no code emitted to set label "modifier", which is used
 >later on for tree construction.  As a result, modifier in the
 >generated code below is always null, and addChild() always
 >receives null:

Yes, this is a known quirk (and ANTLR really ought to emit an 
error when you try it, or be changed so it actually 
works).  Basically you can't label a block, you can only label an 
entity (token or subrule).  If you change it to this then it will 
work:

   (modifier=ruleModifier)?
...
ruleModifier: 'protected' | 'public' | 'private' | 'fragment';


From antlr at jazillian.com  Tue Mar 11 11:55:06 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 14:55:06 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <d3992d900803111125u7daf7480s80ae4d43e6d8d8cd@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	
	<d3992d900803101631te776b95l9bd3727f9753b0c8@mail.gmail.com>	
	<47D6C49B.10306@jazillian.com>
	<d3992d900803111125u7daf7480s80ae4d43e6d8d8cd@mail.gmail.com>
Message-ID: <47D6D58A.5060002@jazillian.com>

Richard Clark wrote:
> On Tue, Mar 11, 2008 at 10:42 AM, Andy Tripp <antlr at jazillian.com> wrote:
>
>   
>>  I don't think that getting a 10-line ANTLR grammar working should be
>>  much more difficult than getting a 10-line Java/C/whatever program working.
>>     
>
> To disagree with you (gently), someone who cut their teeth on LISP
> will probably have a hard time with their first 10-line
> Java/C/Ruby/etc. program (and vice versa). There's a whole different
> way of thinking involved.
>   
Someone writing their first 10-line program in a language that's new to 
them will almost
surely not be relying on their knowledge of some other language that 
they know. Instead,
they'll probably be typing in a simple (Hello, world) program from a 
textbook or
from their notes in a class, or from some documentation.

When it comes to "getting it working", it's all about the quality of the 
error messages.
Javac's messages are great...probably something like "missing semicolon" 
with a little
arrow showing where the problem is.
>   
>>  How many times do we see people ask "why isn't this 10-line grammar
>>  working?" or "how do I print out an AST nicely?"
>>     
>
> These kinds of questions are parts of the learning process, not
> necessarily de facto evidence of a problem with ANTLR. Where we can
> help is identifying common misperceptions about ANTLR and describing
> those parts in the correct way (e.g. how to think about structuring
> your lexer definitions) and defining key ideas in a way that people
> can become more self-sufficient with the documentation.
>   
Look at, say, the development team for javac. You've got dozens of 
people working for
over a decade on it, with only part of the work being on the "hard 
stuff" - the parsing and
bytecode generation. There are also people working, full time for years, 
on making it
"user friendly". ANTLR doesn't have that. Obviously, Terence isn't 
superhuman and can't
do it all. But unless you've got someone doing that work, ANTLR will not 
be as user-friendly
as it could be.
> I would not, as has been suggested, try to lay a simpler face on
> ANTLR. The tool is designed very cleanly and simply; there's a clear
> connection between when you write in the grammar and what you get from
> ANTLR (assuming your mental model of the app is correct.) Putting a
> "simplifying" layer on top can introduce assumptions that actually
> make the result harder to understand and work with.
>   
Again comparing to, say, javac: There's a clear connection and mental 
model there, too:
you put in valid Java syntax and get out a working program. There is 
*no* bytecode in the
mental model. By contrast, with ANTLR, you start off expecting to 
provide a valid grammar
as input and a working lexer/parser as output - that's the mental model 
you want. What you
actually often get as output is generated code for a grammar which you 
must look at and understand
in order to get your working parser.

I realize having ANTLR generate readable code is better than not (see 
lex and yacc). My point is
that I think ANTLR could be made easier to use, to the point where you 
really don't need to
understand the generated code. Sounds impossible, I know, but it's 
possible to write Java
without understanding bytecode. I don't picture an additional 
"simplifying layer", just many years
of hard "usability" work with real users working on real problems.
> The hardest part of writing good conceptual documentation is to make
> sure it's absolutely correct. I'm happy to draft it, if I can get
> reviewers who really know ANTLR all the way through (Kay, Ter, etc.)
>   
I prefer documentation that's not conceptual, but rather concrete. I 
also prefer documentation
that's understandable over documentation that's absolutely correct. But 
hey, that's just me I guess.
> ...Richard
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/b46b664d/attachment.html 

From rob at cmsnet.org.uk  Tue Mar 11 11:57:16 2008
From: rob at cmsnet.org.uk (Rob Shields)
Date: Tue, 11 Mar 2008 18:57:16 +0000
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>
References: <47D6CAAF.4040509@cmsnet.org.uk>
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>
Message-ID: <47D6D60C.6060507@cmsnet.org.uk>

Richard Clark wrote:
> When you added:
> 
>   protected WILDCARD_TERM_CHAR: '\\' ( '*' | '?' );
> 
> did you remove the * and ? from ESCAPED_TERM_CHAR?
> 
> ...Richard

Yes I did. So the whole thing looks like this:

protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR | 
WILDCARD_TERM_CHAR;

protected SIMPLE_TERM_CHAR:  ~( ' ' | '\t' | '!' | '(' | ')' | ':' | '^' |
                          '[' | ']' | '\\' | '\"' | '{' | '}' | '~' | '/' |
                          '\r' | '\n' );

protected ESCAPED_TERM_CHAR:  '\\'! ( '\\' | '+'  | '-' | '!' | '(' | 
')' | ':' | '^' |
                               '[' | ']' | '\"' | '{' | '}' | '~' | '/');

protected WILDCARD_TERM_CHAR: '\\' ( '*' | '?' );

This gives a warning about lexical nondeterminism (ESCAPED_TERM_CHAR and 
WILDCARD_TERM_CHAR both start with \) and WILDCARD_TERM_CHAR doesn't 
work. If I swap around ESCAPED_TERM_CHAR and WILDCARD_TERM_CHAR, then 
ESCAPED_TERM_CHAR doesn't work.

Rob


From corellian.c at gmail.com  Tue Mar 11 11:59:58 2008
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Tue, 11 Mar 2008 19:59:58 +0100
Subject: [antlr-interest] [ST] How subtemplates work?
In-Reply-To: <A523D5AA-C1AB-4023-85AA-68F81D004380@cs.usfca.edu>
References: <92B6B901-6539-4E33-9F59-F29FD2E7819F@gmail.com>
	<A523D5AA-C1AB-4023-85AA-68F81D004380@cs.usfca.edu>
Message-ID: <10050D6C-DA83-4A73-9F02-01C9D82BCECA@gmail.com>


On 11/03/2008, at 18:36, Terence Parr wrote:

>
> On Mar 11, 2008, at 9:57 AM, Cristian Peraferrer wrote:
>
>> Hi!
>>
>> I have looked for subtemplates working examples or how subtemplates  
>> work in the ST wiki but I haven't managed to find out.
>>
>> My question is, with this StringTemplate GroupFile:
>>
>>
>> pnml(xmlns) ::= <<
>> <pnml xmlns="$xmlns$">
>> $net$
>> </pnml>
>> >>
>
> hi. must pass net in as attribute if you ref it.
>
> pnml(xmlns, net) ::= ...
>
>> net(id, type) ::= <<
>> <net id="$id$" type="$type$">
>> foobar
>> </net>
>> >>
>>
>>
>> How should I implement my .g file to make the pnml template make  
>> use of net template?
>> For example:
>>
>>
>> grammar Test1;
>>
>> options {output = template;}
>>
>> s	:	INT '&' ID '&' net ';' -> pnml(xmlns={$INT.text}) ;
>
> then -> pnml(xmlns={$INT.text}, net={$net.st}) ;
>
> and you're golden.
> Ter

Thanks!

How it would be written if we have various 'net' like that:

s	:	INT '&' ID '&' net+ ';'

>>
>> net	:	ID -> net(id={$ID.text},type={$ID.text}) ;
>> ID	:	'a'..'z'+ ;
>> INT	:	'0'..'9'+ ('.' '0'..'9'+)+ ;
>> WS	:	(' '|'\t'|'\n'|'\r') {skip();} ;
>>
>> Which is not correct...
>>
>> Thanks in advance,
>> Cris.
>>
>> -- 
>> GPG Key-ID: 0x564903FA - Jabber ID: corellian at swissjabber.ch
>>
>

-- 
GPG Key-ID: 0x564903FA - Jabber ID: corellian at swissjabber.ch


From gbr at newtechlaw.com  Tue Mar 11 11:55:38 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Tue, 11 Mar 2008 11:55:38 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
Message-ID: <200803111901.m2BJ1SUe004417@tach.newtechlaw.com>

At 09:34 AM 3/11/2008, Benjamin Shropshire wrote:
>Gerald B. Rosenberg wrote:
>>At 03:08 PM 3/10/2008, Benjamin Shropshire wrote:

>Your points #12 & #13 cover a lot of what I would have liked to see 
>on the front page. (That and enough context for someone new to known 
>what they are talking about.)

Yes, but there is no practical way to fit it into one page.  Chapter, 
maybe; more likely a book.

>>The step function learning problem is largely (I believe) one of 
>>learning how to design a recognition specification subject to the 
>>available mechanics of the Antlr language operators.
>
>Oddly I was having a blast building and debugging my grammar. It was 
>when I started trying to put in actions that stuff got difficult.

Unfortunately, that is the nature of the beast.  Grammars are highly 
custom and if you don't have a good grasp of the full set of 
requirements at the outset, trying to tack on things at the end can 
really bork the whole design -- most of the time you can, but 
sometimes the change requirement trickles down to requiring a change 
in token definitions -- and that is very frustrating.

And, if there is a #16, it would be:
16) Don't try to do too much in actions; just call a method.  Any 
standard programming language is far better at procedural logic.

>>11) Unless performance is absolutely your top 6 design 
>>requirements, don't worry about using predicates.
>that would be "don't worry about what predicates /cost/"?

Yes.

>>14) Don't try to dump complex blocks from a parser or AST.  Use 
>>StringTemplate to unparse.
>Does this hold if the final output is not a text file (e.g. in 
>memory structures or a binary data file)

No and maybe.  Would be an interesting application to have 
StringTemplate operate as a directed byte code generator.


----
Gerald B. Rosenberg, Esq.
NewTechLaw
260 Sheridan Ave., Suite 208
Palo Alto, CA  94306-2009

650.325.2100  (office)  /  650.703.1724  (cell)
650.325.2107  (facsimile)

www.newtechlaw.com


CONFIDENTIALITY NOTICE:  This email message (including any 
attachments) is being sent by an attorney, is for the sole use of the 
intended recipient, and may contain confidential and privileged 
information.  Any unauthorized review, use, disclosure or 
distribution is prohibited.  If you are not the intended recipient, 
please contact the sender immediately by reply email and delete all 
copies of this message and any attachments without retaining a copy.  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/774e43aa/attachment.html 

From antlr at jazillian.com  Tue Mar 11 12:02:02 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 15:02:02 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>	
	<47D6CCE4.3070205@jazillian.com>
	<d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>
Message-ID: <47D6D72A.1070606@jazillian.com>

Richard Clark wrote:
> On Tue, Mar 11, 2008 at 11:18 AM, Andy Tripp <antlr at jazillian.com> wrote:
>
>   
>>  I really don't like the book example of evaluating an expression with
>>  ANTLR. Better to build an AST as one step, and then evaluate the
>>  expression by walking the AST as a distinct step.
>>     
>
> Except that evaluate-and-do is a common (and powerful) design pattern
> with ANTLR. Working via an AST is other powerful design pattern. They
> both have their uses; knowing when to use which is a key skill for
> mastering ANTLR.
>   
IMO, "evaulate-and-do" has no reasonable uses. You may call it a "design 
pattern", but
that doesn't make it a good one.

The goal is never to "master ANTLR", but to use ANTLR to get some other 
job done.
> Instructionally, evaluate-and-do is much better than evaluate->AST->do
> (though the latter is preferred by the compiler cognoscenti.)
>   
"Instructionally"? What does that mean? It's better to teach it, so that 
the student learns something
that they didn't know before? That's not a good reason to teach something.
> Folks who have taken a compiler class tend to prefer ASTs because they
> fit what a compiler does (parse, transform, emit.) Emitting an AST is
> also great for taking multiple variations on a phrase and reducing it
> into a standard expression before emitting a value or performing an
> action.
>   
Yes, ASTs are great for lots of things. But what is 
"evaluate-as-you-parse" good for, other
than teaching you how to "evaluate-as-you-parse"?
>  ...Richard
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/cf58f02f/attachment.html 

From antlr at jazillian.com  Tue Mar 11 12:08:26 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 15:08:26 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <c8c997f40803111138s38fbbc51v866048b100d13552@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>	
	<47D6CCE4.3070205@jazillian.com>
	<c8c997f40803111138s38fbbc51v866048b100d13552@mail.gmail.com>
Message-ID: <47D6D8AA.8070709@jazillian.com>

Darien Hager wrote:
> Andy: I agree. Perhaps examples involving embedding application code 
> into a grammar should be introduced after all of the basics for 
> creating an AST. This de-emphasizes knowing the inner workings of the 
> code generation, and is less threatening to new 
> users (e.g. those with no language-parsing experience beyond simple regular expressions.) 
>
>
> The reason I say "less threatening" is because--perceptually--it 
> provides better encapsulation. While it doesn't show off all that 
> ANTLR can do, it provides a nice understandable set of boundaries to 
> start learning with: "Text goes in, tree structure comes out". Leading 
> off with "Here is how basically your entire calculator program is 
> implemented in ANTLR" is a comparatively creepy example. It triggers 
> instinctual fear of lock-in and needing weirdly re-implement existing 
> code inside a grammar file.
Right. The newbie doesn't understand "this example is just showing me 
the power of ANTLR so that later, if I get
stuck, I'll see how I can pass values around in the generated code to 
solve some other problem". He reads that
example and says "Oh, wow, ANTLR is for more than just parsing. I'm 
supposed to do my actual work right here
in ANTLR!"  A language guru would salivate at that point, feeling that 
this is an amazingly powerful new tool that
will be fun to learn. But the non-language newbie guru who wants to 
spend no more than a day learning ANTLR
and just needs to parse his simple DSL, is not drooling...he's breaking 
out in a cold sweat.

From shro8822 at vandals.uidaho.edu  Tue Mar 11 12:08:44 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Tue, 11 Mar 2008 12:08:44 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <200803111901.m2BJ1SUe004417@tach.newtechlaw.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<200803111901.m2BJ1SUe004417@tach.newtechlaw.com>
Message-ID: <BAYC1-PASMTP09CA0C3DB4C1051F264DB4F50F0@CEZ.ICE>

Gerald B. Rosenberg wrote:
> At 09:34 AM 3/11/2008, Benjamin Shropshire wrote:
>> Your points #12 & #13 cover a lot of what I would have liked to see 
>> on the front page. (That and enough context for someone new to known 
>> what they are talking about.)
>
> Yes, but there is no practical way to fit it into one page.  Chapter, 
> maybe; more likely a book.
>
I'd have to disagree. The parts I want would fit in about 4-5 sentences. 
(But the list of things that others might say that about might add up 
rather quick)

>>> 14) Don't try to dump complex blocks from a parser or AST.  Use 
>>> StringTemplate to unparse.
>> Does this hold if the final output is not a text file (e.g. in memory 
>> structures or a binary data file)
>
> No and maybe.  Would be an interesting application to have 
> StringTemplate operate as a directed byte code generator.
>
Ewww. Fun...

From antlr at mirality.co.nz  Tue Mar 11 12:15:10 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 12 Mar 2008 08:15:10 +1300
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <47D6D60C.6060507@cmsnet.org.uk>
References: <47D6CAAF.4040509@cmsnet.org.uk>
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>
	<47D6D60C.6060507@cmsnet.org.uk>
Message-ID: <20080311191534.96A9311EE46@www.antlr.org>

At 07:57 12/03/2008, Rob Shields wrote:
 >protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR |
 >WILDCARD_TERM_CHAR;
 >
 >protected SIMPLE_TERM_CHAR:  ~( ' ' | '\t' | '!' | '(' | ')' | 
':'
 >| '^' |
 >                          '[' | ']' | '\\' | '\"' | '{' | '}' | 
'~'
 >| '/' |
 >                          '\r' | '\n' );
 >
 >protected ESCAPED_TERM_CHAR:  '\\'! ( '\\' | '+'  | '-' | '!' | 
'('
 >|
 >')' | ':' | '^' |
 >                               '[' | ']' | '\"' | '{' | '}' | 
'~' |
 >'/');
 >
 >protected WILDCARD_TERM_CHAR: '\\' ( '*' | '?' );
 >
 >This gives a warning about lexical nondeterminism
 >(ESCAPED_TERM_CHAR and WILDCARD_TERM_CHAR both start with \)
 >and WILDCARD_TERM_CHAR doesn't work. If I swap around
 >ESCAPED_TERM_CHAR and WILDCARD_TERM_CHAR, then
 >ESCAPED_TERM_CHAR doesn't work.

What's the value of k?  Is it at least 2?


From rdclark at gmail.com  Tue Mar 11 12:19:59 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 12:19:59 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6D8AA.8070709@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<47D6CCE4.3070205@jazillian.com>
	<c8c997f40803111138s38fbbc51v866048b100d13552@mail.gmail.com>
	<47D6D8AA.8070709@jazillian.com>
Message-ID: <d3992d900803111219t19a1f4c1xa92b77623e54fbc7@mail.gmail.com>

For a point of reference, what is your background with ANTLR,
compilers, etc.? I agree with some of the things you say and see
others differently. Knowing where you're coming from will help make
sense of the latter.

...R

From parrt at cs.usfca.edu  Tue Mar 11 12:29:55 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 12:29:55 -0700
Subject: [antlr-interest] dynamic token stream
Message-ID: <1A03CD15-422F-4566-8335-C68EEEE3083F@cs.usfca.edu>

added a FAQ entry on reading tokens on demand:

http://www.antlr.org/wiki/pages/viewpage.action?pageId=7929859

Ter

From parrt at cs.usfca.edu  Tue Mar 11 12:32:20 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 12:32:20 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6D10A.1050006@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
	<47D6D10A.1050006@jazillian.com>
Message-ID: <1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>


On Mar 11, 2008, at 11:35 AM, Andy Tripp wrote:

> Terence Parr wrote:
>> how could ANTLR *possibly* know the structure of the AST to build  
>> except for, perhaps, expressions? parse tree, yes. AST, no.
> How about have the AST just match the parse tree by default?

Because then you add one ^ or -> rewrite and what should it do?  Give  
you a hybrid?  That just wouldn't be useful.  If you want a parse tree  
use it.

Ter

From antlr at jazillian.com  Tue Mar 11 12:33:07 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 15:33:07 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <d3992d900803111219t19a1f4c1xa92b77623e54fbc7@mail.gmail.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>	
	<47D6CCE4.3070205@jazillian.com>	
	<c8c997f40803111138s38fbbc51v866048b100d13552@mail.gmail.com>	
	<47D6D8AA.8070709@jazillian.com>
	<d3992d900803111219t19a1f4c1xa92b77623e54fbc7@mail.gmail.com>
Message-ID: <47D6DE73.4000002@jazillian.com>

Richard Clark wrote:
> For a point of reference, what is your background with ANTLR,
> compilers, etc.? I agree with some of the things you say and see
> others differently. Knowing where you're coming from will help make
> sense of the latter.
>
> ...R
>   
BSCS and MSCS degrees, been programming since 1980, 17 years at a large
telecom company, several years of lex/yacc and similar tools, about 7 
years of
using ANTLR, 5 years ago founded company (Jazillian) that translates 
between programming languages.
I would say above-average understanding of these kinds of tools, not an 
expert.
I tend to focus on usability and practice, rather than theory. Probably 
not as smart as
most people in this field (which helps me be a "perpetual newbie").
A contrarian, obviously.

From rdclark at gmail.com  Tue Mar 11 12:37:04 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 12:37:04 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6DE73.4000002@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<47D6CCE4.3070205@jazillian.com>
	<c8c997f40803111138s38fbbc51v866048b100d13552@mail.gmail.com>
	<47D6D8AA.8070709@jazillian.com>
	<d3992d900803111219t19a1f4c1xa92b77623e54fbc7@mail.gmail.com>
	<47D6DE73.4000002@jazillian.com>
Message-ID: <d3992d900803111237m4c8dc761kc980febd4e4bfa23@mail.gmail.com>

It sounds like you're typical of a large number of ANTLR users.

I'm starting to picture a two-track intro -- one track for folks who
have prior knowledge of compiler concepts and a track for the folks
who have a parsing problem and no background in compilers. Both would
benefit from a good overview of the territory, though in different
forms.

You're right that there's room for improvement in the error messages,
etc. The nice thing is that Ter listens. :)

...Richard

From darien.hager at etelos-inc.com  Tue Mar 11 12:39:41 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Tue, 11 Mar 2008 12:39:41 -0700
Subject: [antlr-interest] dynamic token stream
In-Reply-To: <1A03CD15-422F-4566-8335-C68EEEE3083F@cs.usfca.edu>
References: <1A03CD15-422F-4566-8335-C68EEEE3083F@cs.usfca.edu>
Message-ID: <c8c997f40803111239v59e4d99r7dab4d526719faf2@mail.gmail.com>

Thanks! I'm assuming this implementation will generally block on
tokenSource.nextToken()?

Misc suggestion: If
fillBuffer() throws UnsupportedOperationException it's a bit more descriptive.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/33f3edd1/attachment.html 

From gbr at newtechlaw.com  Tue Mar 11 12:35:07 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Tue, 11 Mar 2008 12:35:07 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <BAYC1-PASMTP09CA0C3DB4C1051F264DB4F50F0@CEZ.ICE>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<200803111901.m2BJ1SUe004417@tach.newtechlaw.com>
	<BAYC1-PASMTP09CA0C3DB4C1051F264DB4F50F0@CEZ.ICE>
Message-ID: <200803111941.m2BJfThn004608@tach.newtechlaw.com>

At 12:08 PM 3/11/2008, Benjamin Shropshire wrote:
>Gerald B. Rosenberg wrote:
>>At 09:34 AM 3/11/2008, Benjamin Shropshire wrote:
>>>Your points #12 & #13 cover a lot of what I would have liked to 
>>>see on the front page. (That and enough context for someone new to 
>>>known what they are talking about.)
>>
>>Yes, but there is no practical way to fit it into one 
>>page.  Chapter, maybe; more likely a book.
>I'd have to disagree. The parts I want would fit in about 4-5 sentences.

Take a shot at it.  It cannot be wrong; its just perspective.

>  (But the list of things that others might say that about might add 
> up rather quick)

So much the better. 


From parrt at cs.usfca.edu  Tue Mar 11 12:42:47 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 12:42:47 -0700
Subject: [antlr-interest] dynamic token stream
In-Reply-To: <c8c997f40803111239v59e4d99r7dab4d526719faf2@mail.gmail.com>
References: <1A03CD15-422F-4566-8335-C68EEEE3083F@cs.usfca.edu>
	<c8c997f40803111239v59e4d99r7dab4d526719faf2@mail.gmail.com>
Message-ID: <203DA1FD-0819-4176-AC5F-9FAF99683C08@cs.usfca.edu>


On Mar 11, 2008, at 12:39 PM, Darien Hager wrote:

> Thanks! I'm assuming this implementation will generally block on  
> tokenSource.nextToken()?

yep. please let me know if it works for you
>
>
> Misc suggestion: If fillBuffer() throws  
> UnsupportedOperationException it's a bit more descriptive.

ah!  yes, that is what I was trying to find. thanks, I will update.  
that is really there are just too catch any errors that I had.  Maybe  
I will just remove.  hmm...
Ter
>
>
> -- 
> Darien Hager
> Developer
> Etelos, Inc.
> darien at etelos.com
>
> http://www.etelos.com
> "Revolutionizing the way applications are developed, distributed and  
> consumed."
>
> This e-mail message, including attachments, may contain confidential  
> information for the sole use of the intended recipient(s). If you  
> are not the intended recipient, then this is notice that any use,  
> disclosure, dissemination, distribution or copying is strictly  
> prohibited. If you have received this message in error please  
> contact the sender by reply mail and destroy all copies of the  
> original message.
> This e-mail message, including attachments, may contain confidential  
> information
> for the sole use of the intended recipient(s). If you are not the  
> intended recipient,
> then this is notice that any use, disclosure, dissemination,  
> distribution or copying is
> strictly prohibited.  If you have received this message in error  
> please contact the
> sender by reply mail and destroy all copies of the original message.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/6158a779/attachment.html 

From SWatt at infobal.com  Tue Mar 11 13:53:47 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Tue, 11 Mar 2008 15:53:47 -0500
Subject: [antlr-interest] A postmortem of my use of antler
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DAE33@EXSVR1>

There is a pretty strong psychology of programming community in various
countries, and maybe this is the kind of thing some of them might be
interested in looking at. Some parts will already have been studied - a
colleague of mine did a lot of work on misconceptions of backtracking in
Prolog, basically looking at control flow in rule-based languages. He did a
lot of recording (protocol analysis and coding, errors, etc.) and rebuilt a
Prolog debugger which was significantly better (in both the technical
statistical sense and the commonsense one). 

This is not especially ANTLR-specific, as *exactly* the same point applies
to similar tools, e.g., bison/flex, Prolog DCGs and so on. So the methods
exist and can be used; however, doing it right can be extremely intensive
(in the case of Prolog, gathering the data alone took two months, ensuring
that the problems were well-specified, and so on, i.e., that you are not
investigating the task but the tool. Transcription, coding, and analysis
took considerably longer. 


This is a great suggestion, and an interesting possible project. I am sure
some funding agencies might love it, and it would be possible to put a good
case - part of which is the size of the community of ANTLR users. Actually
doing it requires people who can both understand development and have strong
research methods skills, and I have met relatively few of these, more's the
pity because they are immensely valuable. 

All the best
Stuart

-----Original Message-----
From: Benjamin Shropshire [mailto:shro8822 at vandals.uidaho.edu]
Sent: Monday, March 10, 2008 3:29 PM
To: Antlr Interest
Subject: [antlr-interest] A postmortem of my use of antler

...
What wold do the most good would be to have about 
1 or 2 dozen new users (a compilers class?) be thrown at antlr with 
nothing but the current docs to work from. let them play with it for 
about a day or two and then start asking them what they found 
interesting/useful/confusing. Then start answering there questions and 
/recording/ what they asked, what they wanted to known (when these are 
different that is valuable info). Also take notes on what kind of 
assumptions, correct and incorrect they made. This info would be of huge 
value to the ANTLR project.
...

From rob at cmsnet.org.uk  Tue Mar 11 13:15:33 2008
From: rob at cmsnet.org.uk (Rob Shields)
Date: Tue, 11 Mar 2008 20:15:33 +0000
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <47D6D60C.6060507@cmsnet.org.uk> 
References: <47D6CAAF.4040509@cmsnet.org.uk>
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>
	<47D6D60C.6060507@cmsnet.org.uk> 
Message-ID: <47D6E865.5070202@cmsnet.org.uk>

Gavin Lambert wrote:
> At 07:57 12/03/2008, Rob Shields wrote:
>  >protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR |
>  >WILDCARD_TERM_CHAR;
>  >
>  >protected SIMPLE_TERM_CHAR:  ~( ' ' | '\t' | '!' | '(' | ')' | ':'
>  >| '^' |
>  >                          '[' | ']' | '\\' | '\"' | '{' | '}' | '~'
>  >| '/' |
>  >                          '\r' | '\n' );
>  >
>  >protected ESCAPED_TERM_CHAR:  '\\'! ( '\\' | '+'  | '-' | '!' | '('
>  >|
>  >')' | ':' | '^' |
>  >                               '[' | ']' | '\"' | '{' | '}' | '~' |
>  >'/');
>  >
>  >protected WILDCARD_TERM_CHAR: '\\' ( '*' | '?' );
>  >
>  >This gives a warning about lexical nondeterminism
>  >(ESCAPED_TERM_CHAR and WILDCARD_TERM_CHAR both start with \)
>  >and WILDCARD_TERM_CHAR doesn't work. If I swap around
>  >ESCAPED_TERM_CHAR and WILDCARD_TERM_CHAR, then
>  >ESCAPED_TERM_CHAR doesn't work.
> 
> What's the value of k?  Is it at least 2?

Sorry, I'm not sure what k is.


From rdclark at gmail.com  Tue Mar 11 13:19:32 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 13:19:32 -0700
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <47D6E865.5070202@cmsnet.org.uk>
References: <47D6CAAF.4040509@cmsnet.org.uk>
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>
	<47D6D60C.6060507@cmsnet.org.uk> <47D6E865.5070202@cmsnet.org.uk>
Message-ID: <d3992d900803111319w37e93421m559092bfe00496a0@mail.gmail.com>

On Tue, Mar 11, 2008 at 1:15 PM, Rob Shields <rob at cmsnet.org.uk> wrote:

>  Sorry, I'm not sure what k is.

If you have an options { ... } section at the top of your grammar,
what does it say?

...Richard

From parrt at cs.usfca.edu  Tue Mar 11 13:50:01 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 13:50:01 -0700
Subject: [antlr-interest] dynamic token stream
In-Reply-To: <c8c997f40803111239v59e4d99r7dab4d526719faf2@mail.gmail.com>
References: <1A03CD15-422F-4566-8335-C68EEEE3083F@cs.usfca.edu>
	<c8c997f40803111239v59e4d99r7dab4d526719faf2@mail.gmail.com>
Message-ID: <93BDF860-86DE-4872-B4BD-75C356C916E9@cs.usfca.edu>

spoke too soon!  the damn char streams hoover up everything too...crap!
Ter
On Mar 11, 2008, at 12:39 PM, Darien Hager wrote:

> Thanks! I'm assuming this implementation will generally block on  
> tokenSource.nextToken()?
>
> Misc suggestion: If fillBuffer() throws  
> UnsupportedOperationException it's a bit more descriptive.
>
> -- 
> Darien Hager
> Developer
> Etelos, Inc.
> darien at etelos.com
>
> http://www.etelos.com
> "Revolutionizing the way applications are developed, distributed and  
> consumed."
>
> This e-mail message, including attachments, may contain confidential  
> information for the sole use of the intended recipient(s). If you  
> are not the intended recipient, then this is notice that any use,  
> disclosure, dissemination, distribution or copying is strictly  
> prohibited. If you have received this message in error please  
> contact the sender by reply mail and destroy all copies of the  
> original message.
> This e-mail message, including attachments, may contain confidential  
> information
> for the sole use of the intended recipient(s). If you are not the  
> intended recipient,
> then this is notice that any use, disclosure, dissemination,  
> distribution or copying is
> strictly prohibited.  If you have received this message in error  
> please contact the
> sender by reply mail and destroy all copies of the original message.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/2e2f1e5d/attachment.html 

From siemsen at ucar.edu  Tue Mar 11 14:10:56 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Tue, 11 Mar 2008 15:10:56 -0600
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6D72A.1070606@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>	
	<47D6CCE4.3070205@jazillian.com>
	<d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>
	<47D6D72A.1070606@jazillian.com>
Message-ID: <866EABE9-76D8-4D89-946F-C0A3808B9456@ucar.edu>

On Mar 11, 2008, at 1:02 PM, Andy Tripp wrote:

> Richard Clark wrote:
>>
>>  Andy Tripp <antlr at jazillian.com> wrote:
>>
>>>  I really don't like the book example of evaluating an expression  
>>> with
>>>  ANTLR. Better to build an AST as one step, and then evaluate the
>>>  expression by walking the AST as a distinct step.
>> Except that evaluate-and-do is a common (and powerful) design pattern
>> with ANTLR. Working via an AST is other powerful design pattern. They
>> both have their uses; knowing when to use which is a key skill for
>> mastering ANTLR.
> IMO, "evaulate-and-do" has no reasonable uses. You may call it a  
> "design pattern", but
> that doesn't make it a good one.
>> Folks who have taken a compiler class tend to prefer ASTs because  
>> they
>> fit what a compiler does (parse, transform, emit.) Emitting an AST is
>> also great for taking multiple variations on a phrase and reducing it
>> into a standard expression before emitting a value or performing an
>> action.
> Yes, ASTs are great for lots of things. But what is "evaluate-as- 
> you-parse" good for, other
> than teaching you how to "evaluate-as-you-parse"?

Wow, I think this question is backwards.  I learned ANTLR from the  
book as I wrote
a nontrivial translator.  I developed it using the time-honored  
tradition of adding only
what was needed.  An AST never was, so my translator never grew an  
AST.  Yet it
does the job very well.  To me, evaluate-as-you-parse is the normal  
case, and the
question is "what are ASTs good for, other than speeding things up if  
you need
multiple passes?".

There are many languages (most?) that can be translated without an  
AST phase.
If I don't need one, why bother?  Perhaps ASTs add some nice  
modularity, or
compartmentalize semantic errors or something?  I'm ready to be  
convinced, but I
want some value to compensate for the complexity they add to the  
translation process.

I took a compiler class at the university many years ago.  We used  
yacc/lex and the
famous Aho/Ullman dragon book.  I agree with a previous post, lexing/ 
parsing is
*hard* to do well.  Now I'm done with the theory, and I just want to  
get the job done.
IMHO, ANTLR is the next generation of yacc/lex, and is a great leap  
forward.  Many
thanks to Terence for encapsulating the concepts in code so well.   
Again, I'm done with
the theory, so if Terence were to proclaimed "ASTs are good, you  
should always use
them" I wouldn't argue, I'd just do it.

I disagree with the original posting - using ANTLR is far superior to  
hand-coding a
parser, which I've done.  I agree that the non-book documentation  
isn't great,  but the
simple solution is "get the book".  Even with the book, questions  
like "should I
use an AST or not" make learning hard on newbies.  Some of us still  
haven't figured
that one out :-)

-- Pete




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/4dd64c25/attachment.html 

From antlr at jazillian.com  Tue Mar 11 14:33:05 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 17:33:05 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
	<47D6D10A.1050006@jazillian.com>
	<1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>
Message-ID: <47D6FA91.40208@jazillian.com>

Terence Parr wrote:
>
> On Mar 11, 2008, at 11:35 AM, Andy Tripp wrote:
>
>> Terence Parr wrote:
>>> how could ANTLR *possibly* know the structure of the AST to build 
>>> except for, perhaps, expressions? parse tree, yes. AST, no.
>> How about have the AST just match the parse tree by default?
>
> Because then you add one ^ or -> rewrite and what should it do?  Give 
> you a hybrid?  
Give an error.
> That just wouldn't be useful.  
No, a hybrid wouldn't be very useful.
> If you want a parse tree use it.
Ummm...sorry for the newbie question. How do I get ANTLR to produce a 
parse tree?
I looked through all instances of "parse tree" in the book and couldn't 
find the answer. I
see that ANTLRWorks shows it, and obviously the code itself is a parse 
tree. But is there
some option that says "give me the parse tree as a data structure?"
>
>
> Ter
>


From antlr at jazillian.com  Tue Mar 11 15:06:17 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 11 Mar 2008 18:06:17 -0400
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <866EABE9-76D8-4D89-946F-C0A3808B9456@ucar.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>	
	<47D6CCE4.3070205@jazillian.com>
	<d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>
	<47D6D72A.1070606@jazillian.com>
	<866EABE9-76D8-4D89-946F-C0A3808B9456@ucar.edu>
Message-ID: <47D70259.80600@jazillian.com>

siemsen at ucar.edu wrote:
>
> Wow, I think this question is backwards.  I learned ANTLR from the 
> book as I wrote
> a nontrivial translator. 
Do you have a pointer to more info? We may just have different 
definitions for "non-trivial".
> I developed it using the time-honored tradition of adding only
> what was needed.  An AST never was, so my translator never grew an 
> AST.  Yet it
> does the job very well.  To me, evaluate-as-you-parse is the normal 
> case, and the
> question is "what are ASTs good for, other than speeding things up if 
> you need
> multiple passes?".
Actually, my translator also (for the most part) doesn't use ASTs, but 
instead has
a huge library of equivalent functionality that works on token streams.
And of course I use symbol tables.

 How do you look around at non-local parts of the input?
(for example, if you change the type of a variable, how do you then 
manipulate all
the references to it?)

How do you get around the need to know things about the tree? For example,
Java statements generally get a newline after them, but not the statement
"int i=0;" when it's inside a "for" construct:
for (int i=0;
>
> There are many languages (most?) that can be translated without an AST 
> phase.
Can you give an example? I can't imagine trying to translate as part of 
the parser to
convert among any modern high level languages (C, C++, Java, COBOL, fortran,
lisp, etc.)
> If I don't need one, why bother?  Perhaps ASTs add some nice 
> modularity, or
> compartmentalize semantic errors or something? 
No, they're essential. The parse is just a tiny phase
to get the input into a useful data structure. For a non-trivial 
translator, I'd say the
parser is a tiny, trivial part - less than 0.1% of the translator. I 
would imagine that
99.9% (the translator) embedded with that 0.1% (parser) code - sounds 
pretty ugly.
> I'm ready to be convinced, but I
> want some value to compensate for the complexity they add to the 
> translation process.
To convince me, convert:
char *s = "Hello, ";
printf("%s %s\n", s, "World");
...to...
System.out.println("Hello, World");
..and explain how you did it without an AST.

I think the answer would have to be:
"At the METHOD_CALL part of the grammar, see if the method is named
"printf", if so, call processPrintfCall() where all the work is done."

Some of the questions that arise:
* don't you now have hundreds of methods like this one, and isn't it 
ugly to have that
   all inside the parser?
* How do you pass values like "s" around?
* How do you know that "s" can be eliminated (i.e. control flow analysis)
* How do you know whether the printf() call was to the system library, 
as opposed to
   some application-specific method called "printf()" (i.e. symbol tables)

you get the idea. If the answer is just "that's just a library, I only 
deal with the core language",
then how do you deal with language features that are available in the 
one language but not
the other?
>
> I took a compiler class at the university many years ago.  We 
> used yacc/lex and the
> famous Aho/Ullman dragon book.  I agree with a previous post, 
> lexing/parsing is
> *hard* to do well.  Now I'm done with the theory, and I just want to 
> get the job done.
> IMHO, ANTLR is the next generation of yacc/lex, and is a great leap 
> forward.  Many
> thanks to Terence for encapsulating the concepts in code so well. 
>  Again, I'm done with
> the theory, so if Terence were to proclaimed "ASTs are 
> good, you should always use
> them" I wouldn't argue, I'd just do it.
I think one should take arguments on their merits and use your own 
experience.
Terence is probably the best in the world at what he does. But the best 
car designer or mechanic
in the world is not necessarily the best driver. Most rocket scientists 
would
not be the best astronauts.

In fact, I'd argue that being really, really smart actually *hurts* 
one's ability to empathize
with the average users.
>
> I disagree with the original posting - using ANTLR is far superior to 
> hand-coding a
> parser, which I've done.  I agree that the non-book documentation 
> isn't great,  but the
> simple solution is "get the book".  Even with the book, questions like 
> "should I
> use an AST or not" make learning hard on newbies.  Some of us still 
> haven't figured
> that one out :-)
Yea, I agree. I've been looking at the Javac code - all hand-written, 
and could be ANTLRized
fairly easily. The other thing, though, is that it may not matter much. 
If your translator
(or java compiler) really is non-trivial, the parsing part is relatively 
stable and trivial.
(easy for me to say, right? I just grabbed a working C parser).
>
> -- Pete
>
>
>
>


From darien.hager at etelos-inc.com  Tue Mar 11 15:07:09 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Tue, 11 Mar 2008 15:07:09 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <866EABE9-76D8-4D89-946F-C0A3808B9456@ucar.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<47D6CCE4.3070205@jazillian.com>
	<d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>
	<47D6D72A.1070606@jazillian.com>
	<866EABE9-76D8-4D89-946F-C0A3808B9456@ucar.edu>
Message-ID: <c8c997f40803111507y55da0288x833b2f71a373e427@mail.gmail.com>

On 3/11/08, siemsen at ucar.edu <siemsen at ucar.edu> wrote:


>
> Wow, I think this question is backwards.  I learned ANTLR from the book as
> I wrote
> a nontrivial translator.  I developed it using the time-honored tradition
> of adding only
> what was needed.  An AST never was, so my translator never grew an AST.
>  Yet it
> does the job very well.  To me, evaluate-as-you-parse is the normal case,
> and the
> question is "what are ASTs good for, other than speeding things up if you
> need
> multiple passes?".
>

My approach is different, since I want to use ANTLR to parse a
scripting/template DSL in web pages. There is no 1:1 translation possible,
since there's a lot of environment stuff involved.

ASTs can be cached, avoiding re-reading the file for each request. ASTs mean
that the language parsing engine is decoupled from the execution engine, so
I only need to rebuild the parser when the language itself changes rather
than for every bugfix. ASTs mean that I don't need to write a whole new
runtime for ANTLR in PHP.

Anyway, the biggest one is decoupling and separation-of-concerns. I just
don't think a grammar is a good place for executable code except where it is
specifically enables understanding (not execution) of the input.
-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/49271874/attachment-0001.html 

From parrt at cs.usfca.edu  Tue Mar 11 15:10:08 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Mar 2008 15:10:08 -0700
Subject: [antlr-interest] how to get parse trees WAS A postmortem of my
	use of antler
In-Reply-To: <47D6FA91.40208@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
	<47D6D10A.1050006@jazillian.com>
	<1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>
	<47D6FA91.40208@jazillian.com>
Message-ID: <33CB9A4B-957B-4E6B-88FE-7C973BDEAD9C@cs.usfca.edu>

Perhaps FAQ entry "How can I build parse trees not ASTs?" will help?

http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760

Ter

On Mar 11, 2008, at 2:33 PM, Andy Tripp wrote:

> Terence Parr wrote:
>>
>> On Mar 11, 2008, at 11:35 AM, Andy Tripp wrote:
>>
>>> Terence Parr wrote:
>>>> how could ANTLR *possibly* know the structure of the AST to build  
>>>> except for, perhaps, expressions? parse tree, yes. AST, no.
>>> How about have the AST just match the parse tree by default?
>>
>> Because then you add one ^ or -> rewrite and what should it do?   
>> Give you a hybrid?
> Give an error.
>> That just wouldn't be useful.
> No, a hybrid wouldn't be very useful.
>> If you want a parse tree use it.
> Ummm...sorry for the newbie question. How do I get ANTLR to produce  
> a parse tree?
> I looked through all instances of "parse tree" in the book and  
> couldn't find the answer. I
> see that ANTLRWorks shows it, and obviously the code itself is a  
> parse tree. But is there
> some option that says "give me the parse tree as a data structure?"
>>
>>
>> Ter
>>
>


From ohumbel at gmail.com  Tue Mar 11 15:10:34 2008
From: ohumbel at gmail.com (Oti)
Date: Tue, 11 Mar 2008 23:10:34 +0100
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D6FA91.40208@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
	<47D6D10A.1050006@jazillian.com>
	<1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>
	<47D6FA91.40208@jazillian.com>
Message-ID: <ba90a0a90803111510s7d1ad329o757b9b06cf8b4f58@mail.gmail.com>

The parse result has a method
  Object getTree()
optional: cast it down to CommonTree and call toStringTree() to see it's repr.

I did not know the answer, but it took me 30 secs to set a breakpoint
in my JUnit test (on the way to the AST) and to find it out from
there.
The other pragmatic way is to have a look on page 191, in TestCMinus.java

best wishes,
Oti.


On Tue, Mar 11, 2008 at 10:33 PM, Andy Tripp <antlr at jazillian.com> wrote:
>  Ummm...sorry for the newbie question. How do I get ANTLR to produce a
>  parse tree?
>  I looked through all instances of "parse tree" in the book and couldn't
>  find the answer. I
>  see that ANTLRWorks shows it, and obviously the code itself is a parse
>  tree. But is there
>  some option that says "give me the parse tree as a data structure?"

From guntiso at latnet.lv  Tue Mar 11 15:13:48 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Wed, 12 Mar 2008 00:13:48 +0200
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
	<47D6D10A.1050006@jazillian.com>
	<1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>
Message-ID: <1205273628.47d7041c4895c@clients.latnet.lv>

> >> how could ANTLR *possibly* know the structure of the AST to build
> >> except for, perhaps, expressions? parse tree, yes. AST, no.
> > How about have the AST just match the parse tree by default?
>
> Because then you add one ^ or -> rewrite and what should it do?  Give
> you a hybrid?  That just wouldn't be useful.  If you want a parse tree
> use it.
>
> Ter

How about enabling ^ on the left side?

^rule : stuff;

could be very nice shortcut for

tokens {
  RULE;
}

rule : stuff -> ^(RULE stuff);


From darien.hager at etelos-inc.com  Tue Mar 11 15:31:02 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Tue, 11 Mar 2008 15:31:02 -0700
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <1205273628.47d7041c4895c@clients.latnet.lv>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<47D6C8D5.80106@jazillian.com>
	<E1AE2FBD-0DB7-444E-A64C-73F40C391E18@cs.usfca.edu>
	<47D6D10A.1050006@jazillian.com>
	<1509DFB4-C03A-4E7D-AD64-44B07BB4242B@cs.usfca.edu>
	<1205273628.47d7041c4895c@clients.latnet.lv>
Message-ID: <c8c997f40803111531q5ee904d4h61b738a011439fc5@mail.gmail.com>

On 3/11/08, Guntis Ozols <guntiso at latnet.lv> wrote:
>
> > >> how could ANTLR *possibly* know the structure of the AST to build
> > >> except for, perhaps, expressions? parse tree, yes. AST, no.
> > > How about have the AST just match the parse tree by default?
>
> > Because then you add one ^ or -> rewrite and what should it do?  Give
> > you a hybrid?  That just wouldn't be useful.  If you want a parse tree
> > use it.
>
> How about enabling ^ on the left side?
> ^rule : stuff;
> could be very nice shortcut for
> tokens {
>   RULE;
> }
>

Is the shortcut worth it? Clarity is arguably more important than brevity
when it comes to grammars.

It might make more sense to deal with this on a "tools" level.  E.g. a
right-click option in ANTLRWorks to "generate rewrite rule for block" which
would default to an AST resembling the parse tree.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/d5bf8ad4/attachment.html 

From lgcraymer at yahoo.com  Tue Mar 11 15:35:29 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 11 Mar 2008 15:35:29 -0700 (PDT)
Subject: [antlr-interest] A postmortem of my use of antler
Message-ID: <907091.43921.qm@web55905.mail.re3.yahoo.com>



----- Original Message ----
From: "siemsen at ucar.edu" <siemsen at ucar.edu>

There are many languages (most?) that can be translated without an AST phase.
If I don't need one, why bother?  Perhaps ASTs add some nice modularity, or
compartmentalize semantic errors or something?  I'm ready to be convinced, but I
want some value to compensate for the complexity they add to the translation process.


Trivial translations--A source to B source for languages in which language B can straightforwardly express the paradigms of language A--can be done without intermediate analysis.  Even there, an AST is helpful and aids maintainability.  Cross-paradigm translations--including code optimization--often require extensive multi-pass analysis.  For these, ASTs (and other data structures) are indispensable.  Also, if you use a parser with multiple backends, an AST makes it possible to re-use the same parser for the different backends without having a parser grammar for each.

That said, most ANTLR users never get beyond simple intra-paradigm translation problems or do analysis in the most brutal form with actions in a single pass processor.

--Loring 






      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/a528e9eb/attachment.html 

From rob at cmsnet.org.uk  Tue Mar 11 16:04:55 2008
From: rob at cmsnet.org.uk (Rob Shields)
Date: Tue, 11 Mar 2008 23:04:55 +0000
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <d3992d900803111319w37e93421m559092bfe00496a0@mail.gmail.com>
References: <47D6CAAF.4040509@cmsnet.org.uk>	
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>	
	<47D6D60C.6060507@cmsnet.org.uk> <47D6E865.5070202@cmsnet.org.uk>
	<d3992d900803111319w37e93421m559092bfe00496a0@mail.gmail.com>
Message-ID: <47D71017.1080207@cmsnet.org.uk>

Richard Clark wrote:
> On Tue, Mar 11, 2008 at 1:15 PM, Rob Shields <rob at cmsnet.org.uk> wrote:
 >
> If you have an options { ... } section at the top of your grammar,
> what does it say?
> 
> ...Richard

options
{
   charVocabulary = '\u0000'..'\uFFFE';  // It doesn't work without this.
                                   // FFFE so that it can cope with EOF.
}

-Rob




From rdclark at gmail.com  Tue Mar 11 16:12:39 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 16:12:39 -0700
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <47D71017.1080207@cmsnet.org.uk>
References: <47D6CAAF.4040509@cmsnet.org.uk>
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>
	<47D6D60C.6060507@cmsnet.org.uk> <47D6E865.5070202@cmsnet.org.uk>
	<d3992d900803111319w37e93421m559092bfe00496a0@mail.gmail.com>
	<47D71017.1080207@cmsnet.org.uk>
Message-ID: <d3992d900803111612s7e8c037ay629ebc16b043183a@mail.gmail.com>

This looks like ANTLR 2 code ("protected" instead of "fragment".) I
apologise for not seeing it earlier.

The default for ANTLR 2 is to not look ahead unless you ask it to. If
you're using ANTLR 2, try adding "k=2;" (without the quotes) in your
options.

 ...Richard

From rdclark at gmail.com  Tue Mar 11 22:14:01 2008
From: rdclark at gmail.com (Richard Clark)
Date: Tue, 11 Mar 2008 22:14:01 -0700
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <d3992d900803111612s7e8c037ay629ebc16b043183a@mail.gmail.com>
References: <47D6CAAF.4040509@cmsnet.org.uk>
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>
	<47D6D60C.6060507@cmsnet.org.uk> <47D6E865.5070202@cmsnet.org.uk>
	<d3992d900803111319w37e93421m559092bfe00496a0@mail.gmail.com>
	<47D71017.1080207@cmsnet.org.uk>
	<d3992d900803111612s7e8c037ay629ebc16b043183a@mail.gmail.com>
Message-ID: <d3992d900803112214i61b6e717wc4498749699f5a2b@mail.gmail.com>

I have a better answer (courtesy of a long drive where I had time to think.)

I suggested "k=2;" because ANTLR 2 is a LL(k) parser -- it looks ahead
"k" tokens when resolving ambiguities and the default k is 1. In your
case, it's looking at that leading '\\' in more than one place and
resolves the ambiguity in favor of the first lexer rule using it. But
it makes the resulting code more complex and is a bit like swatting
flies with a sledgehammer.

Rather than alter the lookahead, it's simpler to collapse the
decisions into one rule and alter the text in the token for your
couple of special cases.  You should be able to write this:

protected SIMPLETERM: (TERM_CHAR)+;

protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR;

protected SIMPLE_TERM_CHAR:  ~( ' ' | '\t' | '!' | '(' | ')' | ':' |
'^' | '[' | ']' | '\\' | '\"' | '{' | '}' | '~' | '/' | '\r' | '\n' );

protected ESCAPED_TERM_CHAR:  '\\'! (
    '*' { $setText("\\*"); }
 |  '?' { $setText("\\?"); }
 | '\\' | '+'  | '-' | '!' | '(' | ')' | ':' | '^' |  '[' | ']' | '\"'
| '{' | '}' | '~' |  '/'
);



That should do it. (By the way, ANTLR 3 replaces $setText("foo"); with
$text = "foo"; )

 ...Richard

From lgcraymer at yahoo.com  Tue Mar 11 22:41:53 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 11 Mar 2008 22:41:53 -0700 (PDT)
Subject: [antlr-interest] Retaining comments
Message-ID: <873471.83451.qm@web55908.mail.re3.yahoo.com>

You can do XML and DOM--ANTLR 2 had an AST serializer built in--but there is not much point to doing so other than that you have some familiarity with the tools.  For any vertical translation problem (one language to translate), ANTLR will be faster (XML processing is _slow_ from a machine perspective), more powerful, and easier to use if you learn how to use ANTLR effectively.  There are horizontal problems--extracting information from a collection of trees generated by different source languages and different translators--for which XML is usable, but again this is not the way to go if you are comfortable with language processing technology.

The value of XML is that it is an agreed upon format for structured text that is portable and can be adapted for general information retrieval ("the semantic web")--or at least has that as a hoped for goal.  It is not a technology for language processing; indeed, the XML community seems to be almost allergic to language processing technology.  "Everything is a  tree" does not remove the need for grammars--the XML community calls them "schema" and writes applications in XSLT to convert from one schema to another without intermediate analysis.

You might also take a look at Ter's rant on XML, http://www.ibm.com/developerworks/xml/library/x-sbxml.html.

--Loring


----- Original Message ----
From: Stuart Watt <SWatt at infobal.com>
To: Terence Parr <parrt at cs.usfca.edu>; bmeike at speakeasy.net
Cc: antlr-interest at antlr.org
Sent: Tuesday, March 11, 2008 12:45:47 PM
Subject: Re: [antlr-interest] Retaining comments

 OK, 
I'm going to have to do this as well. However, my dream would 
be....
 
Can we 
use/generate an XML AST, with the text nodes corresponding exactly to the input 
source received at the lexer, and the elements corresponding to the AST tags. I 
know there are all sorts of complexities with this, but it enables several 
outcomes:
 
1. 
Using fast and general tree processing via XML and DOM, maybe even using XPath 
and XQuery
2. 
Easy filtering via the above
3. 
Clear mapping between AST and text, which is not currently 
easy
 
Although I have not completely looked into this yet (and I will) it seems 
most of this could be done fine using an additional AST writer. I wrote one 
which does the XML, but does not preserve the input text. In the end, I had to 
do this, as the current AST notation (which I wanted to read for processing) was 
unable to distinguish, say, between an imaginary token "FUNCTION" and a 
language identifier written as uppercase "FUNCTION", unless I tagged absolutely 
every single thing in the grammar, which was tedious. There are all sorts of 
other nasty cases (e.g., does whitespace fall inside or outside of particular 
elements). And in particular, this would require some mapping between imaginary 
tokens and text positions which is not always possible. 
 
I'm 
developing a system which will annotate code, both generating human-readable 
output and a component index. The one pushes you to a text output, the other to 
an AST - I've ended up needing both, largely because of similar issues. It seems 
it may be fairly simple to develop this kind of tree writer for cases like 
these. 
 
Any 
thoughts on this? Am I crazy/doing it all wrong?
 
--S
  -----Original Message-----
From: Terence Parr   [mailto:parrt at cs.usfca.edu]
Sent: Tuesday, March 11, 2008 12:43   PM
To: bmeike at speakeasy.net
Cc:   antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining   comments


send comments to parser on different channel.    then lookin token buffer for them between "real" tokens.  Ter
    On Feb 27, 2008, at 1:19 PM, <bmeike at speakeasy.net> <bmeike at speakeasy.net>   wrote:

  



On 
    Wed Feb 27 12:29 , Gavin Lambert 
    sent:
    >       This will keep the comment tokens in the token stream at the 
>       appropriate points. To transfer them you'll have to add some code 
>       that looks for comment tokens nearby recognised parser constructs 
>       so you can emit them at the right place in the output.

Sound       great.  What do you mean by "looks for comment tokens".  As far       as I can tell, the parser only sees the DEFAULT channel.  Where do I       look, to find nearby tokens?

Thanks!
  Blake     Meike





-- 
This message   was scanned by ESVA and is believed to be clean. 
Click 
  here to report this message as spam. 





      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080311/40438ac2/attachment-0001.html 

From SWatt at infobal.com  Wed Mar 12 07:46:27 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Wed, 12 Mar 2008 09:46:27 -0500
Subject: [antlr-interest] Retaining comments
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DAE37@EXSVR1>

Yep, I see this, and I'm certainly no fan of XML from a user's perspective.
I agree 110% with the rant. XML is not written for humans, nor should people
have to read/write it. I have ranted myself against the semantic web
community in much the same (they seem to imagine people can write not only
XML, but RDF!!) But as a way of annotating text flexibly, I can't see much
wrong with it. And I can't see why a parse tree of some kind (ideally with
lexing information) at the least cannot be overlaid on the text in this
manner. I suppose the question is: do you need to maintain association with
the underlying text? If not, an AST is fine. If so, why not use a flexible
text markup language. The comment issue seems (to me) to fit into the
category of maintaining association with the underlying text. And it is not
that hard - as far as I can tell, ANTLR could be made to do it just fine in
a couple of hundred lines of code, in the tree writer. 
 
Performance doesn't seem to match what I've been getting. I can slurp in
immense amounts of XML fast using libxml2 - this is certainly (subjectively)
quicker than parsing using ANTLR and the C runtime. However, I did choose
libxml2 carefully (I led a project on the INEX XML information retrieval
competition, and needed something capable of large-scale fast XML, as we
were indexing the whole of Wikipedia). I've not benchmarked it, but my C
parser feels about 5 times slower than reading the XML I generate from its
back end. 
 
It is the "horizontal problems" I'm actually working on, trying to integrate
information from multiple interlocking source languages, many of which are
(a) sloppily defined (C, C++, COBOL:, etc.) and (b) which embed each other
in all sorts of interesting ways. This includes not only obvious stuff
(<script> in HTML) but far less obvious ones - C strings that happen to be
SQL queries. It is as if everything can be delegated (the obvious solution)
- but this raises the interesting challenge of how to make sense of stuff
that comes from multiple source languages, even within a single processing
unit. However, if a group of people have written fast code for searching
trees for patterns (this is not walking the tree, but searching it) this is
useful technology to me. As an ex-IR person maybe my roots in the XML
community are making me see things differently. 
 
It may be that the task I am trying to solve involves a weak version of a
grammar. Quite simply, I do not need to parse everything. I do need to
tokenise everything, in some form, but rarely do I need a complete tree.
With some languages (C, C++, COBOL:, etc.) parsing is a big enough challenge
on its own that I'd rather not bother. For the processing I am doing, I do
not care about control structures, for example. The C parser I developed
(successfully in ANTLR) is skeletal to the point of not classifying most
statements, but tracks nesting of parentheses, braces, etc. 
 
XML does not equate to making huge files out of things. SAX is a perfectly
good way of producing output, and being stream/event oriented, is great for
filtering tasks. The design I've been playing with is a generic
event-stream-oriented approach to parsing. That way I can (and do) stuff
gigabytes of text into the parsing systems without actually writing them
into files. 
 
Consider the following scenario. Imagine I want to annotate C into HTML,
making function calls into hyperlinks, and maybe a few other things, such as
colorising comments. Two tasks: recognising function calls, and annotating
the original text. To do this, the original text needs to be preserved, and
the text parsed in some way. This feels like a non-trivial task, but surely
it is not that unusual. It feels to me that an XML parse tree annotation on
the original text would make this a trivial task, for what ought to be a
modest additional to ANTLR. Obviously, if you felt strongly you could do it
directly, but there are good (separation of concerns) reasons for not
tangling the styling details into the parser, and XML would allow this kind
of separation. 
 
All the best
Stuart

-----Original Message-----
From: Loring Craymer [mailto:lgcraymer at yahoo.com]
Sent: Wednesday, March 12, 2008 12:42 AM
To: Stuart Watt; Terence Parr; bmeike at speakeasy.net
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining comments


You can do XML and DOM--ANTLR 2 had an AST serializer built in--but there is
not much point to doing so other than that you have some familiarity with
the tools.  For any vertical translation problem (one language to
translate), ANTLR will be faster (XML processing is _slow_ from a machine
perspective), more powerful, and easier to use if you learn how to use ANTLR
effectively.  There are horizontal problems--extracting information from a
collection of trees generated by different source languages and different
translators--for which XML is usable, but again this is not the way to go if
you are comfortable with language processing technology.

The value of XML is that it is an agreed upon format for structured text
that is portable and can be adapted for general information retrieval ("the
semantic web")--or at least has that as a hoped for goal.  It is not a
technology for language processing; indeed, the XML community seems to be
almost allergic to language processing technology.  "Everything is a  tree"
does not remove the need for grammars--the XML community calls them "schema"
and writes applications in XSLT to convert from one schema to another
without intermediate analysis.

You might also take a look at Ter's rant on XML,
http://www.ibm.com/developerworks/xml/library/x-sbxml.html
<http://www.ibm.com/developerworks/xml/library/x-sbxml.html> .

--Loring



 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/558e8d3f/attachment.html 

From antlr-interest at antlr.org  Wed Mar 12 07:11:54 2008
From: antlr-interest at antlr.org (antlr-interest at antlr.org)
Date: Wed, 12 Mar 2008 07:11:54 -0700 (PDT)
Subject: [antlr-interest] MensHealth id 1955923
Message-ID: <20080312081150.6198.qmail@microsof-c33d77>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/c9844560/attachment.html 

From ralf_c at web.de  Wed Mar 12 08:03:04 2008
From: ralf_c at web.de (Ralf Cremerius)
Date: Wed, 12 Mar 2008 16:03:04 +0100
Subject: [antlr-interest] How do you document your grammars?
Message-ID: <77938826@web.de>

Hello,

I've got to build some documentation for my ANTLR project now and found the question, how to do this efficiently, to be very common?
In my case, nothing absolutely magical (like complex actions, etc.) happens inside the ANTLR grammar, so the EBNF-notation seems to be very suitable to document the recognized language.
Moreover it would be very practical to have a EBNF-grammar with clickable hyperlinks between rule occurences and their respective definitions.
I tried to do this with LaTeX, but it is a tedious and error prone task. Has anyone a better solution, how to do it (ideally generating some of the contents)?

Of course, ANTLRWorks would theoretically have the capabilities to accomplish this - but it isn't made to generate hyperlinked EBNFs.  ;-)

Best regards,
  Ralf
_______________________________________________________________
Schon geh?rt? Der neue WEB.DE MultiMessenger kann`s mit allen: 
http://www.produkte.web.de/messenger/?did=3015


From alexander at gaengel.de  Wed Mar 12 09:08:27 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Wed, 12 Mar 2008 17:08:27 +0100
Subject: [antlr-interest] Token Attributes in Arraylist
Message-ID: <47D7FFFB.4090107@gaengel.de>

Is use id+=Identifier+ in a rule in my treegrammar and was wondering if 
there is some "easy" way to get an arrayList of just the text of the 
token like $if.text

Ok it't not difficult to get  the stuff out of the CommonTree the 
CommonTree in the arrayList but I think it would be nice to get to the 
token Attributes in this way.

Alexander

From jimi at temporal-wave.com  Wed Mar 12 09:12:46 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 Mar 2008 09:12:46 -0700
Subject: [antlr-interest] Retaining comments
In-Reply-To: <96AD91D781CCD511A66000B0D0D15C49043DAE37@EXSVR1>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAAMeMAO5d+EC
	Uw+2YjLxqxAEAAAAA@10.0.1.201>

I would need to see your code to comment on why you feel that your XML generator is 5X slower than libxml, but do bear in mind the following:

 

1)      ANTLR is for recognition of the things you specify via grammar, and the xml library is hand crafted to go straight at internal structure, hence it is likely using things like memchr to locate the next spot in the input it is concerned with and so on. This isn't a defense of the C runtime by the way, it should be obvious that when you know exactly what the input looks like, you can hand craft something that will be faster than a generic program;

2)      You are generating the XML after reading in and lexing, parsing ;-) Hence it isn't quite a fair competition unless you are going to get libxml2 to do something equivalent J

3)      You might try the optimized scanning in the C runtime if you can pre-know the input encoding is 8 or 16 bits (I will provide a UTF32 version before too long). This skips calling a function to find the next input character and instead maintains a pointer into the input stream. See the Java parsing example in the downloads.

4)      If you are using the built in string stuff, then note that you don't have to do that. It is generic and so when you ask for the text, it creates some memory and so on. If you are in fact building up a long output string, then you could easily write a function that given a pCOMMON_TOKEN, memcpy's the input text directly where you want it to go. This is a big advantage in ANTLR 3 as you are not forced into incurring penalties you do not need. Otherwise you are probably asking for the $text of a token, which is going to copy it from the input stream then appending it some buffer. There is no need for the intermediate step.

5)      Make sure you are not using expensive predicates and backtracking of course.

6)      If you want me to take a look, feel free to send me the code off list.

 

So in short, I am sure that you can improve your performance quite a lot (perhaps using a profiler will help you here), but you probably can't compete with something that isn't really tokenizing anything if it is written well. Loring is correct in his assessment of XML processors in general though, according to my own experience, but that doesn't mean that there are not some good ones around ;-)

 

My other thought here is that to accurately gauge a 5X performance with just your own 'gut feel' you would have to be parsing an input stream that is pretty huge. My own parsers don't take long enough for me to measure anything with a single input stream, it is just 'done' almost as soon as it is called in terms of human time spans. Are you by any chance traversing an input directory, where you must read the file from the filesystem, but then calling libxml2 with an in memory string? You might try breaking out the time for each component. For instance, when testing the C runtime against the Java runtime, I was parsing the whole of JDK 1.6. In the end, the time taken to get the files off disk was more than the parsing and until I found a way to remove this as a bottle neck, the C parser was only looking about 50% faster as most of the time was reading from the file system for both Java and C. 

 

 I will point out that while associating comments with code seems to be an easy task, you soon find out that it is almost impossible to get all the associations correct unless you are starting out with some pre-canned rules for what you are going to see, such as how doxygen works. There is a lot of information on this stuff elsewhere of course.

 

Anyway, I am happy to hear you have been successful building your parser/toolset!

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Stuart Watt
Sent: Wednesday, March 12, 2008 7:46 AM
To: 'Loring Craymer'; Stuart Watt; Terence Parr; bmeike at speakeasy.net
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining comments

 

Yep, I see this, and I'm certainly no fan of XML from a user's perspective. I agree 110% with the rant. XML is not written for humans, nor should people have to read/write it. I have ranted myself against the semantic web community in much the same (they seem to imagine people can write not only XML, but RDF!!) But as a way of annotating text flexibly, I can't see much wrong with it. And I can't see why a parse tree of some kind (ideally with lexing information) at the least cannot be overlaid on the text in this manner. I suppose the question is: do you need to maintain association with the underlying text? If not, an AST is fine. If so, why not use a flexible text markup language. The comment issue seems (to me) to fit into the category of maintaining association with the underlying text. And it is not that hard - as far as I can tell, ANTLR could be made to do it just fine in a couple of hundred lines of code, in the tree writer. 

 

Performance doesn't seem to match what I've been getting. I can slurp in immense amounts of XML fast using libxml2 - this is certainly (subjectively) quicker than parsing using ANTLR and the C runtime. However, I did choose libxml2 carefully (I led a project on the INEX XML information retrieval competition, and needed something capable of large-scale fast XML, as we were indexing the whole of Wikipedia). I've not benchmarked it, but my C parser feels about 5 times slower than reading the XML I generate from its back end. 

 

It is the "horizontal problems" I'm actually working on, trying to integrate information from multiple interlocking source languages, many of which are (a) sloppily defined (C, C++, COBOL:, etc.) and (b) which embed each other in all sorts of interesting ways. This includes not only obvious stuff (<script> in HTML) but far less obvious ones - C strings that happen to be SQL queries. It is as if everything can be delegated (the obvious solution) - but this raises the interesting challenge of how to make sense of stuff that comes from multiple source languages, even within a single processing unit. However, if a group of people have written fast code for searching trees for patterns (this is not walking the tree, but searching it) this is useful technology to me. As an ex-IR person maybe my roots in the XML community are making me see things differently. 

 

It may be that the task I am trying to solve involves a weak version of a grammar. Quite simply, I do not need to parse everything. I do need to tokenise everything, in some form, but rarely do I need a complete tree. With some languages (C, C++, COBOL:, etc.) parsing is a big enough challenge on its own that I'd rather not bother. For the processing I am doing, I do not care about control structures, for example. The C parser I developed (successfully in ANTLR) is skeletal to the point of not classifying most statements, but tracks nesting of parentheses, braces, etc. 

 

XML does not equate to making huge files out of things. SAX is a perfectly good way of producing output, and being stream/event oriented, is great for filtering tasks. The design I've been playing with is a generic event-stream-oriented approach to parsing. That way I can (and do) stuff gigabytes of text into the parsing systems without actually writing them into files. 

 

Consider the following scenario. Imagine I want to annotate C into HTML, making function calls into hyperlinks, and maybe a few other things, such as colorising comments. Two tasks: recognising function calls, and annotating the original text. To do this, the original text needs to be preserved, and the text parsed in some way. This feels like a non-trivial task, but surely it is not that unusual. It feels to me that an XML parse tree annotation on the original text would make this a trivial task, for what ought to be a modest additional to ANTLR. Obviously, if you felt strongly you could do it directly, but there are good (separation of concerns) reasons for not tangling the styling details into the parser, and XML would allow this kind of separation. 

 

All the best

Stuart

-----Original Message-----
From: Loring Craymer [mailto:lgcraymer at yahoo.com]
Sent: Wednesday, March 12, 2008 12:42 AM
To: Stuart Watt; Terence Parr; bmeike at speakeasy.net
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining comments

You can do XML and DOM--ANTLR 2 had an AST serializer built in--but there is not much point to doing so other than that you have some familiarity with the tools.  For any vertical translation problem (one language to translate), ANTLR will be faster (XML processing is _slow_ from a machine perspective), more powerful, and easier to use if you learn how to use ANTLR effectively.  There are horizontal problems--extracting information from a collection of trees generated by different source languages and different translators--for which XML is usable, but again this is not the way to go if you are comfortable with language processing technology.

The value of XML is that it is an agreed upon format for structured text that is portable and can be adapted for general information retrieval ("the semantic web")--or at least has that as a hoped for goal.  It is not a technology for language processing; indeed, the XML community seems to be almost allergic to language processing technology.  "Everything is a  tree" does not remove the need for grammars--the XML community calls them "schema" and writes applications in XSLT to convert from one schema to another without intermediate analysis.

You might also take a look at Ter's rant on XML, http://www.ibm.com/developerworks/xml/library/x-sbxml.html.

--Loring

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/46fa48a0/attachment-0001.html 

From rdclark at gmail.com  Wed Mar 12 09:41:00 2008
From: rdclark at gmail.com (Richard Clark)
Date: Wed, 12 Mar 2008 09:41:00 -0700
Subject: [antlr-interest] Token Attributes in Arraylist
In-Reply-To: <47D7FFFB.4090107@gaengel.de>
References: <47D7FFFB.4090107@gaengel.de>
Message-ID: <d3992d900803120941w45a414ebk57e899b6e660f56@mail.gmail.com>

On Wed, Mar 12, 2008 at 9:08 AM, Alexander G?ngel <alexander at gaengel.de> wrote:
> Is use id+=Identifier+ in a rule in my treegrammar and was wondering if
>  there is some "easy" way to get an arrayList of just the text of the
>  token like $if.text

Usually you just embed an action to append to a list as you go.

myRule
@init { List values = new ArrayList(); }
     : (id+=Identifier { values.add($Identifier.text);})+
     // and do something with the list after
     ;

...Richard

From antlr at jazillian.com  Wed Mar 12 09:50:11 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Wed, 12 Mar 2008 12:50:11 -0400
Subject: [antlr-interest] postmortem
Message-ID: <47D809C3.60309@jazillian.com>

And so another ANTLR thread winds down.
Here's my cynical summary:

* Any ANTLR newbie who has just figured out how to get an ANTLR-produced AST
   will continue see something that doesn't look like a tree, and he'll 
have a "WTF?" moment.
   Why? Because we wouldn't want to show him a parse tree, as a parse 
tree is really not
   the same as as AST - just say that to him and I'm sure he'll understand.

* The more experienced guy who wants to know how to get a parse tree, 
found 30 references
   to "parse tree" in the book, none of which told him how to produce a 
parse tree. No
   suggestion that the book could be improved, because it's right there 
in the wiki FAQ - duh!

* The other guy who chimes in to explain how easy it is to get a parse 
tree actually is
   explaining how to get an AST, and no one even corrects him, let alone 
suggests that
   some documentation might be improved to avoid this confusion. There's 
no problem here,
   because the right answer is out there somewhere.

* The experts continue to see these issues in terms of grammars and 
trees and syntax and
   technically correct software. There is no one in sight who will look 
at the problem
   from the point of view of the guy who just called "showTree()" and 
got back something
   that doesn't look like a tree. No one will ask him "what did you 
expect to see?" or
   "what would you like to see?" None of that matters because, 
technically, he has
   explicitly asked for a "flat tree" (which really is a tree) by 
putting zero "^" characters
   in his grammar.

* The original poster, having invested a few minutes to vent the 
frustrations of himself
   and certainly at least a few others who didn't bother, goes on his 
merry way. No
   ANTLR documentation has changed. No warning message from ANTLR saying
   "you don't have any ^ characters in your grammar, so you'll get a 
flat AST, see the
   section on building ASTs in the book". Just another newbie who didn't 
know how
   to enhance his grammar to build a decent AST. It's his own fault and 
his own problem,
   because building parsers is hard, and he just wasn't up to it.

</sarcasm>
Andy

From SWatt at infobal.com  Wed Mar 12 09:53:50 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Wed, 12 Mar 2008 11:53:50 -0500
Subject: [antlr-interest] Retaining comments
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>

Good points, Jim - and you're right, I have done no work on identifying time
spent lexing/parsing/generating - I just notice some log steps take longer
than others. Most of this is happening in memory, as I'm trying to do all
this as a Perl XS module (not wanting to fork JVM from Perl, which is awful
in almost every sense). I should probably better performance measurement,
and try a better string output - although as I said, I'm trying out an
event-based model which might well render all that obsolete.
 
Actually, the really slow bit (which I didn't include) is fixing up the
parse to actually handle C and C++ oddities and context-sensitivities. The
grammar itself is k=1 (except in two rules with k=2) with no backtracking,
and I'm not using any kind of treewalker. I probably should be, and it would
be a better solution, but it would further complicate the fact that I really
want some connection to the input text to be preserved. However, speed is
not an issue for me, really: if it took 10 times as long I'd still be happy,
if it kept the underlying text association, as at present I have to do the
annotation by parsing the text all over again. (Also, I was doing everything
until today on a vintage 1.5 GHz Pentium 4 - so  my newly arrived 4 core
machine should take care of a lot of speed-up.)
 
I don't think any vague performance comparison of an XML parser and ANTLR is
fair, for all sorts of reasons. XML is essentially tiny and designed to be
easy to parse (even on tiny devices) where with ANTLR (and XML schemas) it
is possible to construct grammatical monsters. I was just indicating that
considering core XML to be slower than ANTLR surprises me. If XML is not
faster, given a comparison of equivalent size/complexity input, then it
really should be (validation, schemas, URL-based entities, and DOM memory
management aside). I admit the size/complexity of (most) Java XML parsing
generally does surprise me, but small parsers for mobile devices will do
most XML in about 10k of basic (CLDC) Java source code. It is validation,
schemas, URL-based entities, and DOM than make XML slow, big, and nasty -
and to be honest, none of these are especially important to its core
purpose: marking up text. 
 
The scenario I flagged is illustrative only of my particular task, where I
want the best of an AST and of the text. This is not quite associating
comments and structure, but of generating annotated/formatted text. I was
just commenting that XML technologies can be very helpful for certain tasks
(like these) and that combining ANTLR and XML for tasks like these ought to
be easier than having to muck around at the text layer manually. I still
hope this is possible, but if not, I'll maybe have to think how to manage
the architecture better. 
 
All the best
Stuart

-----Original Message-----
From: Jim Idle [mailto:jimi at temporal-wave.com]
Sent: Wednesday, March 12, 2008 11:13 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining comments



I would need to see your code to comment on why you feel that your XML
generator is 5X slower than libxml, but do bear in mind the following:

 

1)      ANTLR is for recognition of the things you specify via grammar, and
the xml library is hand crafted to go straight at internal structure, hence
it is likely using things like memchr to locate the next spot in the input
it is concerned with and so on. This isn't a defense of the C runtime by the
way, it should be obvious that when you know exactly what the input looks
like, you can hand craft something that will be faster than a generic
program;

2)      You are generating the XML after reading in and lexing, parsing ;-)
Hence it isn't quite a fair competition unless you are going to get libxml2
to do something equivalent J

3)      You might try the optimized scanning in the C runtime if you can
pre-know the input encoding is 8 or 16 bits (I will provide a UTF32 version
before too long). This skips calling a function to find the next input
character and instead maintains a pointer into the input stream. See the
Java parsing example in the downloads.

4)      If you are using the built in string stuff, then note that you don't
have to do that. It is generic and so when you ask for the text, it creates
some memory and so on. If you are in fact building up a long output string,
then you could easily write a function that given a pCOMMON_TOKEN, memcpy's
the input text directly where you want it to go. This is a big advantage in
ANTLR 3 as you are not forced into incurring penalties you do not need.
Otherwise you are probably asking for the $text of a token, which is going
to copy it from the input stream then appending it some buffer. There is no
need for the intermediate step.

5)      Make sure you are not using expensive predicates and backtracking of
course.

6)      If you want me to take a look, feel free to send me the code off
list.

 

So in short, I am sure that you can improve your performance quite a lot
(perhaps using a profiler will help you here), but you probably can't
compete with something that isn't really tokenizing anything if it is
written well. Loring is correct in his assessment of XML processors in
general though, according to my own experience, but that doesn't mean that
there are not some good ones around ;-)

 

My other thought here is that to accurately gauge a 5X performance with just
your own 'gut feel' you would have to be parsing an input stream that is
pretty huge. My own parsers don't take long enough for me to measure
anything with a single input stream, it is just 'done' almost as soon as it
is called in terms of human time spans. Are you by any chance traversing an
input directory, where you must read the file from the filesystem, but then
calling libxml2 with an in memory string? You might try breaking out the
time for each component. For instance, when testing the C runtime against
the Java runtime, I was parsing the whole of JDK 1.6. In the end, the time
taken to get the files off disk was more than the parsing and until I found
a way to remove this as a bottle neck, the C parser was only looking about
50% faster as most of the time was reading from the file system for both
Java and C. 

 

 I will point out that while associating comments with code seems to be an
easy task, you soon find out that it is almost impossible to get all the
associations correct unless you are starting out with some pre-canned rules
for what you are going to see, such as how doxygen works. There is a lot of
information on this stuff elsewhere of course.

 

Anyway, I am happy to hear you have been successful building your
parser/toolset!

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Stuart Watt
Sent: Wednesday, March 12, 2008 7:46 AM
To: 'Loring Craymer'; Stuart Watt; Terence Parr; bmeike at speakeasy.net
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining comments

 

Yep, I see this, and I'm certainly no fan of XML from a user's perspective.
I agree 110% with the rant. XML is not written for humans, nor should people
have to read/write it. I have ranted myself against the semantic web
community in much the same (they seem to imagine people can write not only
XML, but RDF!!) But as a way of annotating text flexibly, I can't see much
wrong with it. And I can't see why a parse tree of some kind (ideally with
lexing information) at the least cannot be overlaid on the text in this
manner. I suppose the question is: do you need to maintain association with
the underlying text? If not, an AST is fine. If so, why not use a flexible
text markup language. The comment issue seems (to me) to fit into the
category of maintaining association with the underlying text. And it is not
that hard - as far as I can tell, ANTLR could be made to do it just fine in
a couple of hundred lines of code, in the tree writer. 

 

Performance doesn't seem to match what I've been getting. I can slurp in
immense amounts of XML fast using libxml2 - this is certainly (subjectively)
quicker than parsing using ANTLR and the C runtime. However, I did choose
libxml2 carefully (I led a project on the INEX XML information retrieval
competition, and needed something capable of large-scale fast XML, as we
were indexing the whole of Wikipedia). I've not benchmarked it, but my C
parser feels about 5 times slower than reading the XML I generate from its
back end. 

 

It is the "horizontal problems" I'm actually working on, trying to integrate
information from multiple interlocking source languages, many of which are
(a) sloppily defined (C, C++, COBOL:, etc.) and (b) which embed each other
in all sorts of interesting ways. This includes not only obvious stuff
(<script> in HTML) but far less obvious ones - C strings that happen to be
SQL queries. It is as if everything can be delegated (the obvious solution)
- but this raises the interesting challenge of how to make sense of stuff
that comes from multiple source languages, even within a single processing
unit. However, if a group of people have written fast code for searching
trees for patterns (this is not walking the tree, but searching it) this is
useful technology to me. As an ex-IR person maybe my roots in the XML
community are making me see things differently. 

 

It may be that the task I am trying to solve involves a weak version of a
grammar. Quite simply, I do not need to parse everything. I do need to
tokenise everything, in some form, but rarely do I need a complete tree.
With some languages (C, C++, COBOL:, etc.) parsing is a big enough challenge
on its own that I'd rather not bother. For the processing I am doing, I do
not care about control structures, for example. The C parser I developed
(successfully in ANTLR) is skeletal to the point of not classifying most
statements, but tracks nesting of parentheses, braces, etc. 

 

XML does not equate to making huge files out of things. SAX is a perfectly
good way of producing output, and being stream/event oriented, is great for
filtering tasks. The design I've been playing with is a generic
event-stream-oriented approach to parsing. That way I can (and do) stuff
gigabytes of text into the parsing systems without actually writing them
into files. 

 

Consider the following scenario. Imagine I want to annotate C into HTML,
making function calls into hyperlinks, and maybe a few other things, such as
colorising comments. Two tasks: recognising function calls, and annotating
the original text. To do this, the original text needs to be preserved, and
the text parsed in some way. This feels like a non-trivial task, but surely
it is not that unusual. It feels to me that an XML parse tree annotation on
the original text would make this a trivial task, for what ought to be a
modest additional to ANTLR. Obviously, if you felt strongly you could do it
directly, but there are good (separation of concerns) reasons for not
tangling the styling details into the parser, and XML would allow this kind
of separation. 

 

All the best

Stuart

-----Original Message-----
From: Loring Craymer [mailto:lgcraymer at yahoo.com]
Sent: Wednesday, March 12, 2008 12:42 AM
To: Stuart Watt; Terence Parr; bmeike at speakeasy.net
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Retaining comments

You can do XML and DOM--ANTLR 2 had an AST serializer built in--but there is
not much point to doing so other than that you have some familiarity with
the tools.  For any vertical translation problem (one language to
translate), ANTLR will be faster (XML processing is _slow_ from a machine
perspective), more powerful, and easier to use if you learn how to use ANTLR
effectively.  There are horizontal problems--extracting information from a
collection of trees generated by different source languages and different
translators--for which XML is usable, but again this is not the way to go if
you are comfortable with language processing technology.

The value of XML is that it is an agreed upon format for structured text
that is portable and can be adapted for general information retrieval ("the
semantic web")--or at least has that as a hoped for goal.  It is not a
technology for language processing; indeed, the XML community seems to be
almost allergic to language processing technology.  "Everything is a  tree"
does not remove the need for grammars--the XML community calls them "schema"
and writes applications in XSLT to convert from one schema to another
without intermediate analysis.

You might also take a look at Ter's rant on XML,
http://www.ibm.com/developerworks/xml/library/x-sbxml.html
<http://www.ibm.com/developerworks/xml/library/x-sbxml.html> .

--Loring

 


-- 
This message was scanned by ESVA and is believed to be clean. 
Click
<http://antispam.infobal.com/cgi-bin/learn-msg.cgi?id=E583727EE1.467FE> here
to report this message as spam. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/94da97cc/attachment-0001.html 

From jimi at temporal-wave.com  Wed Mar 12 10:46:12 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 Mar 2008 10:46:12 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <47D809C3.60309@jazillian.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9JzKvsskmEa
	vNcnPpxCJVQEAAAAA@10.0.1.201>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andy Tripp
> Sent: Wednesday, March 12, 2008 9:50 AM
> To: antlr-interest
> 
> * The original poster, having invested a few minutes to vent the
> frustrations of himself
>    and certainly at least a few others who didn't bother, goes on his
> merry way. No
>    ANTLR documentation has changed. 

> No warning message from ANTLR
> saying
>    "you don't have any ^ characters in your grammar, so you'll get a
> flat AST, see the
>    section on building ASTs in the book". 

And just how is the tool supposed to know that that isn't what you want? Deus Ex Machina? :-) I see a lot of suggestions for warnings and errors and so on that surely seem reasonable to the requester, but in fact are specific to their particular situation. If you start spitting out warnings saying "You don't have any ^ characters", all you are going to do is annoy those who know about that, and confuse those that don't. Further, other than giving a link to a precise article on tree construction, there isn't much information you can give out in a line or two of warnings. Further still, at what point does this warning go away? When there are two ^ characters? 7? One on every production? Perhaps you were trying to illustrate a point, but the example isn't a good one.

> Just another newbie who
> didn't
> know how
>    to enhance his grammar to build a decent AST. It's his own fault and
> his own problem,
>    because building parsers is hard, and he just wasn't up to it.

Personally, I enjoy helping people get started and try to invest a little time in doing so. Perhaps this helps to curb my egotistical desire to take over the world Pinky. Most people are willing to take a bit of advice and a few pointers and invest their own time in learning. I think that there are plenty of people on this list that are willing to help anyone. Some people though insist that they know everything already, are well versed in the field but despite this require someone else to write up everything they don't in fact know, for free, and make it available on a "front page". There isn't much you can do about that.

I also personally object to rambling and slightly insulting posts that don't name the tool correctly, are chock full of spelling errors (which isn't really excusable these days), grammatical errors (well, we are not all good at grammar, but one is trying to use a language recognition tool), and are written with the expectation that everyone should drop what they are doing and instantly help. Typos are one thing, I am as guilty of producing those as much as anyone, as I type at 3 million characters a minute but 95% of them are BS :-). However, can one not take a little care over the quality of the post? Is offering a little respect dead in the world?

In all of this there seems to be a tacit assumption that people volunteering their time here did so to help people learn to write recognizers with language recognition tools. For the most part, this isn't true other than its use within a formal education curriculum. So attacking documentation and how-tos, or the fact that no one addressed issue xyz raised by abc doesn't really make any sense. The wiki is open to anyone to add documentation at any level they like and many people don't attack but wish someone would write up a few things, which is an eminently reasonable hope. Some people even write up a few things in their own time.

It also seems reasonable to me that if you want to do anything seriously with such a free and necessarily quite complicated tool, that you might invest a few bucks in a book that will save you a lot of trouble. Sure, it doesn't cover every aspect of everything that everybody needs, but it is a hell of a good starting point. When I first needed to write something with yacc, I had the choice of buying a book for 40 quid, or 93 pints of best bitter (it was a long time ago ;-). So, I had to sponge of friends for the beer.

Nobody is saying "It's his own fault, it is hard", just that it is hard, and that the tool and the site aren't really geared up to be a training ground for this kind of knowledge; it is a bit unfair to berate people for not handing out free training. Not that you personally are saying that particularly, but you have spent an awful lot of time here debating the meaning of words like "syntax", which is no doubt interesting to you, made a presentation about ANTLR (more power to you), but I don't see anything in the Wiki from you that says "All your question about trees belong to us." I don't expect you to have done so, but I don't see why anyone should EXPECT anyone to do so unless they are paying for it.

Jim




From tbrandonau at gmail.com  Wed Mar 12 11:02:03 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Thu, 13 Mar 2008 05:02:03 +1100
Subject: [antlr-interest] Retaining comments
In-Reply-To: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
Message-ID: <ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>

On Thu, Mar 13, 2008 at 3:53 AM, Stuart Watt <SWatt at infobal.com> wrote:
>
> The scenario I flagged is illustrative only of my particular task, where I
> want the best of an AST and of the text. This is not quite associating
> comments and structure, but of generating annotated/formatted text. I was
> just commenting that XML technologies can be very helpful for certain tasks
> (like these) and that combining ANTLR and XML for tasks like these ought to
> be easier than having to muck around at the text layer manually. I still
> hope this is possible, but if not, I'll maybe have to think how to manage
> the architecture better.

Why do you think managing annotated text in an AST is difficult? I
don't know I disagree but I don't know that I agree either.
Without any AST rewriting it's obviously a simple 1:1 mapping.
Ignoring nodes could be handled with channels that are ignored during
processing and used in outputting. Or you could remove the nodes from
the tree and output text between the stop index of one node and the
start index of the next as you go through the tree. That saves the
memory of the unneeded nodes assuming the input is still around.
More complex restructuring of nodes would seem to be the main issue.
Something like:
somerule: attributes SOMERULE^ contents;
is going to cause problems as the root is now out of order.
But you could not touch the concrete nodes and just add extra
imaginary nodes to add your structure. Setting them to a different
channel would allow them to be easily skipped when outputting.

This seems like a pretty direct mapping of your proposed XML to an
AST. The concrete nodes are the text content of the XML, the imaginary
nodes are the XML tags. Thus it seems to me that the problem of
mapping your AST to XML is basically the same as that of creating an
AST structure.

Depending on your XPath processor you might even be able to easily
write a DOM\SAX wrapper around your AST and use that to run XPath
against your AST without having to do any XML<->AST. Then you could
mix XPath and tree parser based passes.
Again depending on the processor you could also use that to run XSLT
against your AST. Though I see less use for this unless your already
tied to XSLT. A tree parser with string template output does the job
of a text\html outputting XSLT pretty well and rewriting tree parsers
handle XML outputting XSLT situations. And AST->AST (i.e. XML->XML
XSLT) transformations could be tricky to implement without rewriting
large parts of the XSLT processor. XSLT is probably better for complex
restructuring but it doesn't sound like you need that.

Just thinking out loud here but seems like it might work.

Tom.
>
> All the best
> Stuart
>

From rob at cmsnet.org.uk  Wed Mar 12 11:03:45 2008
From: rob at cmsnet.org.uk (Rob Shields)
Date: Wed, 12 Mar 2008 18:03:45 +0000
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <d3992d900803112214i61b6e717wc4498749699f5a2b@mail.gmail.com>
References: <47D6CAAF.4040509@cmsnet.org.uk>	
	<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>	
	<47D6D60C.6060507@cmsnet.org.uk> <47D6E865.5070202@cmsnet.org.uk>	
	<d3992d900803111319w37e93421m559092bfe00496a0@mail.gmail.com>	
	<47D71017.1080207@cmsnet.org.uk>	
	<d3992d900803111612s7e8c037ay629ebc16b043183a@mail.gmail.com>
	<d3992d900803112214i61b6e717wc4498749699f5a2b@mail.gmail.com>
Message-ID: <47D81B01.3000406@cmsnet.org.uk>

Richard Clark wrote:
> I have a better answer (courtesy of a long drive where I had time to think.)
> 
> I suggested "k=2;" because ANTLR 2 is a LL(k) parser -- it looks ahead
> "k" tokens when resolving ambiguities and the default k is 1. In your
> case, it's looking at that leading '\\' in more than one place and
> resolves the ambiguity in favor of the first lexer rule using it. But
> it makes the resulting code more complex and is a bit like swatting
> flies with a sledgehammer.

That's what I thought. I was a bit hesitant to change k in case it had 
side effects.

> Rather than alter the lookahead, it's simpler to collapse the
> decisions into one rule and alter the text in the token for your
> couple of special cases.  You should be able to write this:
> 
> protected SIMPLETERM: (TERM_CHAR)+;
> 
> protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR;
> 
> protected SIMPLE_TERM_CHAR:  ~( ' ' | '\t' | '!' | '(' | ')' | ':' |
> '^' | '[' | ']' | '\\' | '\"' | '{' | '}' | '~' | '/' | '\r' | '\n' );
> 
> protected ESCAPED_TERM_CHAR:  '\\'! (
>     '*' { $setText("\\*"); }
>  |  '?' { $setText("\\?"); }
>  | '\\' | '+'  | '-' | '!' | '(' | ')' | ':' | '^' |  '[' | ']' | '\"'
> | '{' | '}' | '~' |  '/'
> );

Excellent. I have tried that and can confirm that it works. I'm really 
pleased, thankyou :)

> That should do it. (By the way, ANTLR 3 replaces $setText("foo"); with
> $text = "foo"; )
> 
>  ...Richard

Well $setText("foo"); seems to work so I guess I must be using ANTLR 2. 
The jar file I have is from 2004 or thereabouts.

Rob


From antlr at shmuelhome.mine.nu  Wed Mar 12 11:27:06 2008
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Wed, 12 Mar 2008 20:27:06 +0200
Subject: [antlr-interest] newbie question, escaped characters
In-Reply-To: <47D81B01.3000406@cmsnet.org.uk>
References: <47D6CAAF.4040509@cmsnet.org.uk>		<d3992d900803111139w350df36bhec1bdde9179499b8@mail.gmail.com>		<47D6D60C.6060507@cmsnet.org.uk>
	<47D6E865.5070202@cmsnet.org.uk>		<d3992d900803111319w37e93421m559092bfe00496a0@mail.gmail.com>		<47D71017.1080207@cmsnet.org.uk>		<d3992d900803111612s7e8c037ay629ebc16b043183a@mail.gmail.com>	<d3992d900803112214i61b6e717wc4498749699f5a2b@mail.gmail.com>
	<47D81B01.3000406@cmsnet.org.uk>
Message-ID: <47D8207A.1050308@shmuelhome.mine.nu>

Rob Shields wrote:
> Richard Clark wrote:
>> I have a better answer (courtesy of a long drive where I had time to 
>> think.)
>>
>> I suggested "k=2;" because ANTLR 2 is a LL(k) parser -- it looks ahead
>> "k" tokens when resolving ambiguities and the default k is 1. In your
>> case, it's looking at that leading '\\' in more than one place and
>> resolves the ambiguity in favor of the first lexer rule using it. But
>> it makes the resulting code more complex and is a bit like swatting
>> flies with a sledgehammer.
>
> That's what I thought. I was a bit hesitant to change k in case it had 
> side effects.
>
>> Rather than alter the lookahead, it's simpler to collapse the
>> decisions into one rule and alter the text in the token for your
>> couple of special cases.  You should be able to write this:
>>
>> protected SIMPLETERM: (TERM_CHAR)+;
>>
>> protected TERM_CHAR: SIMPLE_TERM_CHAR | ESCAPED_TERM_CHAR;
>>
>> protected SIMPLE_TERM_CHAR:  ~( ' ' | '\t' | '!' | '(' | ')' | ':' |
>> '^' | '[' | ']' | '\\' | '\"' | '{' | '}' | '~' | '/' | '\r' | '\n' );
>>
>> protected ESCAPED_TERM_CHAR:  '\\'! (
>>     '*' { $setText("\\*"); }
>>  |  '?' { $setText("\\?"); }
>>  | '\\' | '+'  | '-' | '!' | '(' | ')' | ':' | '^' |  '[' | ']' | '\"'
>> | '{' | '}' | '~' |  '/'
>> );
>
> Excellent. I have tried that and can confirm that it works. I'm really 
> pleased, thankyou :)
>
>> That should do it. (By the way, ANTLR 3 replaces $setText("foo"); with
>> $text = "foo"; )
>>
>>  ...Richard
>
> Well $setText("foo"); seems to work so I guess I must be using ANTLR 
> 2. The jar file I have is from 2004 or thereabouts.
>
> Rob
>
Just an ANTLR3 warning. Setting text in fragment rules (the ANTLR3 
equivalent of protected) does not seem to have any effect on the 
generated token.


From jaluber at gmx.de  Wed Mar 12 11:36:22 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 12 Mar 2008 19:36:22 +0100
Subject: [antlr-interest] postmortem
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9JzKvsskmEa	vNcnPpxCJVQEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9JzKvsskmEa	vNcnPpxCJVQEAAAAA@10.0.1.201>
Message-ID: <47D822A6.8070503@gmx.de>

Jim Idle schrieb:
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Andy Tripp
>> Sent: Wednesday, March 12, 2008 9:50 AM
>> To: antlr-interest
>>
>> * The original poster, having invested a few minutes to vent the
>> frustrations of himself
>>    and certainly at least a few others who didn't bother, goes on his
>> merry way. No
>>    ANTLR documentation has changed. 
> 
>> No warning message from ANTLR
>> saying
>>    "you don't have any ^ characters in your grammar, so you'll get a
>> flat AST, see the
>>    section on building ASTs in the book". 
> 
> And just how is the tool supposed to know that that isn't what you want?
 > Deus Ex Machina? :-) I see a lot of suggestions for warnings and errors
 > and so on that surely seem reasonable to the requester, but in fact are
 > specific to their particular situation. If you start spitting out 
warnings
 > saying "You don't have any ^ characters", all you are going to do is
 > annoy those who know about that, and confuse those that don't. Further,
 > other than giving a link to a precise article on tree construction, there
 > isn't much information you can give out in a line or two of warnings.
 > Further still, at what point does this warning go away? When there 
are two
 > ^ characters? 7? One on every production? Perhaps you were trying to
 > illustrate a point, but the example isn't a good one.
> 
Theoretically one could introduce options to suppress certain warnings 
entirely. I suppose that one could categorize the warnings and say "I'm 
not trying to do A, so warnings for not doing A are senseless to me.". 
Noting down an explicit opt-out would be also self-documenting. On the 
other side, it would result in having to think a bit about the actual 
goals, but that's not a bad thing. But I don't know enough about ANTLR 
and languages to tell if my idea is actually feasible.

Johannes

From antlr at jazillian.com  Wed Mar 12 11:55:26 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Wed, 12 Mar 2008 14:55:26 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9JzKvsskmEa	vNcnPpxCJVQEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9JzKvsskmEa	vNcnPpxCJVQEAAAAA@10.0.1.201>
Message-ID: <47D8271E.8050404@jazillian.com>

Jim Idle wrote:
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Andy Tripp
>> Sent: Wednesday, March 12, 2008 9:50 AM
>> To: antlr-interest
>>
>> * The original poster, having invested a few minutes to vent the
>> frustrations of himself
>>    and certainly at least a few others who didn't bother, goes on his
>> merry way. No
>>    ANTLR documentation has changed. 
>>     
>
>   
>> No warning message from ANTLR
>> saying
>>    "you don't have any ^ characters in your grammar, so you'll get a
>> flat AST, see the
>>    section on building ASTs in the book". 
>>     
>
> And just how is the tool supposed to know that that isn't what you want? Deus Ex Machina? :-) 
I don't see why anyone would ever want a flat AST.
If there are some such cases, then someone should try to get a feel for 
how many people really want flat ASTs vs.
those who don't.
> I see a lot of suggestions for warnings and errors and so on that surely seem reasonable to the requester, but in fact are specific to their particular situation. If you start spitting out warnings saying "You don't have any ^ characters", all you are going to do is annoy those who know about that, 
Right. So it may be that a warning would help 99% of the time and annoy 
1% of the time,
or vice versa. My guess is that 99% of the time, the flat AST is not 
what the person wanted.
And, of course, the added ability to silence warnings would solve the 
"annoy" problem - something very common
in many tools.
> and confuse those that don't. 
How would that message be confusing?
And wouldn't the newbie be the authority on whether it's confusing or not?
> Further, other than giving a link to a precise article on tree construction, 
Note that I never suggested giving a link to a precise article, I was 
careful not to.
> there isn't much information you can give out in a line or two of warnings. 
Well, I've just suggested a specific error message, I'm sure it could be 
improved.
Maybe it's not "much" information...but I think it would be useful 
nonetheless.
> Further still, at what point does this warning go away? When there are two ^ characters? 7? One on every production? Perhaps you were trying to illustrate a point, but the example isn't a good one.
>   
I would suggest the warning only appear if there are exactly zero ^ 
characters. But of course, an
optimal solution would be to try that and see how it works with real users.
>   
>> Just another newbie who
>> didn't
>> know how
>>    to enhance his grammar to build a decent AST. It's his own fault and
>> his own problem,
>>    because building parsers is hard, and he just wasn't up to it.
>>     
>
> Personally, I enjoy helping people get started and try to invest a little time in doing so. Perhaps this helps to curb my egotistical desire to take over the world Pinky. Most people are willing to take a bit of advice and a few pointers and invest their own time in learning. 
It's not that simple. Some people, such as this original poster, will 
read the basic documentation and maybe the books and maybe the wiki
and maybe even the mailing list. But with any software tool, it's best 
to catch any problems early and help the newbie along.
The guy called showTree() and got back something that didn't look like a 
tree at all. The fact that his answer is available
in the book, from the mailing list, or in the wiki is nice, but things 
could be better. Better to have the tool give him a
tree if it can, or at least give him a decent warning.
> I think that there are plenty of people on this list that are willing to help anyone. Some people though insist that they know everything already, are well versed in the field but despite this require someone else to write up everything they don't in fact know, for free, and make it available on a "front page". There isn't much you can do about that.
>   
I'm not sure how that relates, but if it's just a person dig at me, 
that's fine.
I'm happy to admit that I didn't know how to get a parse tree, and that 
I'm only willing to spend about 2 minutes looking through just
the book to figure it out before posting to the list. Sure, I probably 
could have spent more time and found my answer, but if I did
that then I wouldn't be providing the benefit of (subtly) pointing out 
that maybe the book should have this info.

> I also personally object to rambling and slightly insulting posts that don't name the tool correctly, are chock full of spelling errors (which isn't really excusable these days), grammatical errors (well, we are not all good at grammar, but one is trying to use a language recognition tool), and are written with the expectation that everyone should drop what they are doing and instantly help. Typos are one thing, I am as guilty of producing those as much as anyone, as I type at 3 million characters a minute but 95% of them are BS :-). However, can one not take a little care over the quality of the post? Is offering a little respect dead in the world?
>   
OK, well, I'm more worried about making the tools better (if you count 
my lame criticism as "helping") than about
spelling and grammar. There's certainly no reason to be insulted by bad 
grammar, spelling or naming of the tool.
> In all of this there seems to be a tacit assumption that people volunteering their time here did so to help people learn to write recognizers with language recognition tools. 
No, no, no! Not at all. In fact, I think the opposite: the helpful 
people here (and you clearly get the award for most helpful on the list)
are a great service. But can't we lighten their load with a few 
improvements to the tool? Don't you get tired of answering
these questions and wish for a few improvements?
> For the most part, this isn't true other than its use within a formal education curriculum. So attacking documentation and how-tos, or the fact that no one addressed issue xyz raised by abc doesn't really make any sense. The wiki is open to anyone to add documentation at any level they like and many people don't attack but wish someone would write up a few things, which is an eminently reasonable hope. Some people even write up a few things in their own time.
>   
Yes, well, sounds  like ye olde Open Source theory: since anyone can 
contribute, everything will be fine.
Well, in this instance, I would try having ANTLR produce the parse tree 
as an AST rather than a flat one.
Yet I'm not technically able/willing do that. Even if I could, by 
producing a fork of ANTLR, no one would use my version.
My only recourse is to try to convince Terence. Same with adding a 
paragraph to the book to show how to get a parse tree.
> It also seems reasonable to me that if you want to do anything seriously with such a free and necessarily quite complicated tool, that you might invest a few bucks in a book that will save you a lot of trouble. Sure, it doesn't cover every aspect of everything that everybody needs, but it is a hell of a good starting point. When I first needed to write something with yacc, I had the choice of buying a book for 40 quid, or 93 pints of best bitter (it was a long time ago ;-). So, I had to sponge of friends for the beer.
>   
I agree, but in this case, I don't think the book is going to really 
help explain the flat AST, without a very thorough reading.
That's just reality, as you can tell from the original post. Blame it on 
the individual if you want, but it's not uncommon
for people to avoid reading the whole book. I learned yacc without a 
book, and it was painful. Even though I'm sure
there are zillions of mailing list answers about how to use yacc, I'm 
sure it's still painful, because the tool is just not
user-friendly. ANLTR, of course, is far away from yacc on the 
user-friendly spectrum, but I'd like to see it go further.
> Nobody is saying "It's his own fault, it is hard", just that it is hard, and that the tool and the site aren't really geared up to be a training ground for this kind of knowledge; it is a bit unfair to berate people for not handing out free training. Not that you personally are saying that particularly, but you have spent an awful lot of time here debating the meaning of words like "syntax", which is no doubt interesting to you, made a presentation about ANTLR (more power to you), but I don't see anything in the Wiki from you that says "All your question about trees belong to us." I don't expect you to have done so, but I don't see why anyone should EXPECT anyone to do so unless they are paying for it.
>   
I'm not EXPECTing anyone specific to do anything without me paying for it.
I'm SUGGESTING and HOPING, but I realize there's no way that Terence 
could or should focus
on usability and documentation for newbies. I certainly don't mean to 
"berate" anyone.

As for me contributing more, I'm just not an expert on building trees in 
ANTLR, or anything else in ANTLR really.
I spend time with these long posts because I enjoy it (and used to think 
it was helpful, but having doubts now),
but I don't enjoy explaining stuff that I think could be
better covered by a warning message in the tool or a paragraph in the book.

I admire and appreciate people like you who know stuff in depth and put 
time into answering questions.
I'm just suggesting that a small change to the tool or book can be worth 
1000 wiki entries.

Andy

> Jim
>
>
>
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/91f634da/attachment-0001.html 

From siemsen at ucar.edu  Wed Mar 12 12:06:28 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Wed, 12 Mar 2008 13:06:28 -0600
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <47D70259.80600@jazillian.com>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>	
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>	
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>	
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>	
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>	
	<47D6CCE4.3070205@jazillian.com>
	<d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>
	<47D6D72A.1070606@jazillian.com>
	<866EABE9-76D8-4D89-946F-C0A3808B9456@ucar.edu>
	<47D70259.80600@jazillian.com>
Message-ID: <5A8F1B3F-B70F-4BEA-B60D-19E8181ED734@ucar.edu>


On Mar 11, 2008, at 4:06 PM, Andy Tripp wrote:

> siemsen at ucar.edu wrote:
>>
>> Wow, I think this question is backwards.  I learned ANTLR from the  
>> book as I wrote
>> a nontrivial translator.
> Do you have a pointer to more info? We may just have different  
> definitions for "non-trivial".

I'm beginning to realize that just because my grammar is ~900 lines,  
it's still a trivial translator - as Loring wrote, "A source to B  
source for languages in which language B can straightforwardly  
express the paradigms of language A".  I've now spent some time  
reading more about ASTs, and I think I now understand why they are  
needed.  I could get by without one in my current project, but  
perhaps it will improve things to have more phases, each of which  
encapsulates different processing.

>> I took a compiler class at the university many years ago.  We used  
>> yacc/lex and the
>> famous Aho/Ullman dragon book.  I agree with a previous post,  
>> lexing/parsing is
>> *hard* to do well.  Now I'm done with the theory, and I just want  
>> to get the job done.
>> IMHO, ANTLR is the next generation of yacc/lex, and is a great  
>> leap forward.  Many
>> thanks to Terence for encapsulating the concepts in code so well.   
>> Again, I'm done with
>> the theory, so if Terence were to proclaimed "ASTs are good, you  
>> should always use
>> them" I wouldn't argue, I'd just do it.
> I think one should take arguments on their merits and use your own  
> experience.
> Terence is probably the best in the world at what he does. But the  
> best car designer or mechanic
> in the world is not necessarily the best driver. Most rocket  
> scientists would
> not be the best astronauts.
>
> In fact, I'd argue that being really, really smart actually *hurts*  
> one's ability to empathize
> with the average users.

I'm an average ANTLR user, and I don't want to become an expert.  I  
want to be told what I *should* do, not everything I *can* do.   
Having a choice to use an AST is only helpful if I understand the  
choice. It seems to be a somewhat subtle.  Loring wrote "an AST is  
helpful and aids maintainability".  I'm curious enough to try it and  
see.

ANTLR has a significant learning curve, and I'm lazy, so I hoped to  
dodge the AST piece of it.  I got away with it because my translator  
doesn't need one.  In the larger picture, it seems ASTs are a good  
thing.  I want a translator strategy that I can come back and use in  
a year or two, when I've forgotten some of what I've learned about  
ANTLR.  At that future time, I'll likely use my existing grammar as a  
model and start hacking.  I won't want to re-learn the big concepts  
well enough to choose whether to use an AST or not.  Also, I'm tired  
of reading the book and this mailing list with a mental filter that  
tries to dodge the AST parts.  So I'll add an AST to my current  
(first ever) ANTLR translator whether it needs it or not, and ASTs  
will become a standard part of my future translators.  Perhaps ASTs  
are meant to be a part of all ANTLR translators, and I just didn't  
follow the book as intended.

A little voice in my head is saying "Huh?  Another source file to  
maintain?  And it has to be kept in sync with the parser grammar?".   
Enough!  I'll try it!

Thanks very much for all who contributed to this thread.  I learned  
something.

-- Pete


From antlr at mirality.co.nz  Wed Mar 12 12:18:06 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 13 Mar 2008 08:18:06 +1300
Subject: [antlr-interest] A postmortem of my use of antler
In-Reply-To: <5A8F1B3F-B70F-4BEA-B60D-19E8181ED734@ucar.edu>
References: <BAYC1-PASMTP1278255D21107AE3AAF097F50E0@CEZ.ICE>
	<F84531BD-F22A-4716-A697-5EFEB81D66F5@classdump.org>
	<BAYC1-PASMTP0392D2B8244A3C1136F8EEF50E0@CEZ.ICE>
	<200803110149.m2B1nocp000566@tach.newtechlaw.com>
	<BAYC1-PASMTP14345028F9E4CF0140721FF50F0@CEZ.ICE>
	<47D6CCE4.3070205@jazillian.com>
	<d3992d900803111135m7b6ae3fdi7335c479f1038e1f@mail.gmail.com>
	<47D6D72A.1070606@jazillian.com>
	<866EABE9-76D8-4D89-946F-C0A3808B9456@ucar.edu>
	<47D70259.80600@jazillian.com>
	<5A8F1B3F-B70F-4BEA-B60D-19E8181ED734@ucar.edu>
Message-ID: <20080312191833.1BCAF11EC8A@www.antlr.org>

At 08:06 13/03/2008, siemsen at ucar.edu wrote:
 >A little voice in my head is saying "Huh?  Another source file 
to
 >maintain?  And it has to be kept in sync with the parser 
grammar?".

Actually, you can output an AST without adding a tree parser to 
your project, so you don't necessarily have to add a source 
file.  Just depends on whether you want to do the tree parsing 
directly in your driver code or in another grammar file.  (Each 
approach has its own advantages and disadvantages; just depends on 
what you're doing with it.)


From shro8822 at vandals.uidaho.edu  Wed Mar 12 12:21:07 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Wed, 12 Mar 2008 12:21:07 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9JzKvsskmEa	vNcnPpxCJVQEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9JzKvsskmEa	vNcnPpxCJVQEAAAAA@10.0.1.201>
Message-ID: <BAYC1-PASMTP12AF93437EBB4CD1384F20F5080@CEZ.ICE>

Jim Idle wrote:
> The wiki is open to anyone to add documentation at any level they like 

To address that exact point:

One (possible) problem with this: many people, by the time they have the 
experience to have confident in there understanding of any system have 
lost sight of the things that are hard for newbes. I known /I/ am guilty 
of this practically every time I open my mouth. I know this a hard 
problem, I'm currently helping develop a system that is so far off the 
beaten track that I struggle to describe it to people who haven't been 
working on it (and there are 3 people in that category). My number one 
fear is that /we/ will not be able to write documentation that is in the 
least bit tractable by new users because we have no idea what the major 
sticking points will be.

I would update the wiki with the info I would like to see in it, but I 
am still not sure my understanding is correct. I'm not suggesting a 
development effort but, has anyone seen a system for "tagging" info in a 
wiki with "confidence" ratings? ("this /seems/ to work" -> "I think this 
is correct but I'm not sure" -> "I wrote the blinking thing so this is 
RIGHT") Barring something like that, I'd be worried that I'm adding 
wrong information and undermining other users.


Not addressing Jim's point, but offering something (beside criticisms) 
to y'all:

If someone who knows, thinks this is correct, could you add it to the 
wiki in some suitably prominent place?

""

ANTLR is a tool for generating a number of different kinds of language 
recognizer/translator programs. It is typically used to process input in 
three stages. The first stage takes a characters stream as input, breaks 
it up into tokens (the smallest grouping a language cares about) and 
generates a tokens stream as output. The second stage takes this token 
stream and find?s it structure. In this stage, the sequence of tokens is 
converted into a condensed, normalized form, the Abstract Syntax Tree 
(AST), by extracting parts of the input pattern and applying rewrite 
rules. The third step (or steps in some cases) takes this AST and uses a 
tree parser to processes it to do whatever the user needs. This step 
often takes the form of multiple tree parsers that are run in sequence 
to generate the needed results. The first two steps are typically 
defined together in a combined grammar with an output type of ?AST?. 
Also they should generally have no more action code attached to them 
than is needed to properly parse the input. The bulk of the logic should 
be put in the third step(s).

""

This paragraph would have been really handy to have found while I was 
still deciding what tool to use. One point about the wording of this; I 
was careful to pepper it with terms that the newbe should known before 
going on, that way, if they don?t known them they at least have a text 
string to search for (feel free to sub in better terms). In my 
experience, that hardest thing about jumping into something totally new, 
is figuring out what questions I should be asking. Once I have that, I 
can usually make good headway on my own.

If it's off base, go ahead and correct it, I have no vanity with respect 
to that. (you need not even site me as the author <grin/>)


From jimi at temporal-wave.com  Wed Mar 12 12:37:45 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 Mar 2008 12:37:45 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <47D8271E.8050404@jazillian.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAFTxUgCaLHUO
	ZlokTxBOEkQEAAAAA@10.0.1.201>

I think you miss the point. We can't 'know' that they did or didn't want a flat tree. Who is this someone that you are designating tasks like this to?

 

I would think that saying only 1% of ANTLR users would already know about ASTs is a bit light, but  I think it would actually annoy 100% of the time. If you don't know about ASTs then you don't know what it means and get annoyed if you are told to go buy a book. If you do know then you know what it means but must have wanted a flat tree at that point in your development cycle. I don't think that there is any problem to solve here, there are many more other warnings that need to be added before worrying about this I think. For a start, you have to turn on output=AST and that will surely prompt most people to ask themselves if they know anything about what one of these is?

 

I thought you said,, "And wouldn't the newbie be the authority on whether it's confusing or not?", so why are you asking me? ;-) It is obviously confusing if it tells you something that you don't know about, but can't really tell you what to do about it. I am all for improving error messages and warnings, but now I think you are arguing for this because you said it and are trying to defend it. I think it is an arbitrary example with no real need. It might just help one person in many hundreds, I can't say that it won't, but I can't really see it doing much for people. Now, improving "Can't find tokenRefBang.st" is (and was) worth some effort J

 

Try that and see what real users do when they don't get a message about having 0 ^ operators? Come on, you are just being contrary now. There are plenty of other examples that users hit all the time, the need to use ^ to generate a tree structure is hardly flooding the group with emails from "Confused of Springfield".

 

The book isn't designed to explain why you get a flat tree or really what an AST is. It does tell you how to go about building trees using ANTLR. The book would have to be about 500 pages longer to cover everything you need to know to start from scratch.

 

"I learned yacc without a book, and it was painful." Whereas it took me about a week because I had a decent book with some good examples and had already read the dragon book -  I hope you enjoyed the beer though J

 

"if it's just a person dig at me", no not you, Benjamin did not seem to ever post without requesting another piece of information that should be "right on the front page", I don't have any truck with you.

 

"I'm just suggesting that a small change to the tool or book can be worth 1000 wiki entries." Agreed that sometimes this can be the case. There are plenty of examples where the warnings need to be improved (or even supplied ;-) and they are mostly known about and will eventually get done I am sure. I guess I just get a bit on my high horse when there are lots of clamoring for docs and articles and so on, but few people actually want to put in any time doing it and when they do, a lot of people don't use the search to find it anyway.

 

Jim

 

PS: Post as long as you want about anything you want if you ask me, it ain't my list J

 

 

 

 

From: Andy Tripp [mailto:antlr at jazillian.com] 
Sent: Wednesday, March 12, 2008 11:55 AM
To: Jim Idle
Cc: antlr-interest
Subject: Re: [antlr-interest] postmortem

 

Jim Idle wrote: 

 
  

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
bounces at antlr.org] On Behalf Of Andy Tripp
Sent: Wednesday, March 12, 2008 9:50 AM
To: antlr-interest
 
* The original poster, having invested a few minutes to vent the
frustrations of himself
   and certainly at least a few others who didn't bother, goes on his
merry way. No
   ANTLR documentation has changed. 
    

 
  

No warning message from ANTLR
saying
   "you don't have any ^ characters in your grammar, so you'll get a
flat AST, see the
   section on building ASTs in the book". 
    

 
And just how is the tool supposed to know that that isn't what you want? Deus Ex Machina? :-) 

I don't see why anyone would ever want a flat AST.
If there are some such cases, then someone should try to get a feel for how many people really want flat ASTs vs.
those who don't.



I see a lot of suggestions for warnings and errors and so on that surely seem reasonable to the requester, but in fact are specific to their particular situation. If you start spitting out warnings saying "You don't have any ^ characters", all you are going to do is annoy those who know about that, 

Right. So it may be that a warning would help 99% of the time and annoy 1% of the time,
or vice versa. My guess is that 99% of the time, the flat AST is not what the person wanted.
And, of course, the added ability to silence warnings would solve the "annoy" problem - something very common
in many tools.



and confuse those that don't. 

How would that message be confusing? 
And wouldn't the newbie be the authority on whether it's confusing or not?



Further, other than giving a link to a precise article on tree construction, 

Note that I never suggested giving a link to a precise article, I was careful not to.



there isn't much information you can give out in a line or two of warnings. 

Well, I've just suggested a specific error message, I'm sure it could be improved.
Maybe it's not "much" information...but I think it would be useful nonetheless.



Further still, at what point does this warning go away? When there are two ^ characters? 7? One on every production? Perhaps you were trying to illustrate a point, but the example isn't a good one.
  

I would suggest the warning only appear if there are exactly zero ^ characters. But of course, an
optimal solution would be to try that and see how it works with real users.



 
  

Just another newbie who
didn't
know how
   to enhance his grammar to build a decent AST. It's his own fault and
his own problem,
   because building parsers is hard, and he just wasn't up to it.
    

 
Personally, I enjoy helping people get started and try to invest a little time in doing so. Perhaps this helps to curb my egotistical desire to take over the world Pinky. Most people are willing to take a bit of advice and a few pointers and invest their own time in learning. 

It's not that simple. Some people, such as this original poster, will read the basic documentation and maybe the books and maybe the wiki
and maybe even the mailing list. But with any software tool, it's best to catch any problems early and help the newbie along.
The guy called showTree() and got back something that didn't look like a tree at all. The fact that his answer is available
in the book, from the mailing list, or in the wiki is nice, but things could be better. Better to have the tool give him a
tree if it can, or at least give him a decent warning.



I think that there are plenty of people on this list that are willing to help anyone. Some people though insist that they know everything already, are well versed in the field but despite this require someone else to write up everything they don't in fact know, for free, and make it available on a "front page". There isn't much you can do about that.
  

I'm not sure how that relates, but if it's just a person dig at me, that's fine.
I'm happy to admit that I didn't know how to get a parse tree, and that I'm only willing to spend about 2 minutes looking through just
the book to figure it out before posting to the list. Sure, I probably could have spent more time and found my answer, but if I did
that then I wouldn't be providing the benefit of (subtly) pointing out that maybe the book should have this info.




 
I also personally object to rambling and slightly insulting posts that don't name the tool correctly, are chock full of spelling errors (which isn't really excusable these days), grammatical errors (well, we are not all good at grammar, but one is trying to use a language recognition tool), and are written with the expectation that everyone should drop what they are doing and instantly help. Typos are one thing, I am as guilty of producing those as much as anyone, as I type at 3 million characters a minute but 95% of them are BS :-). However, can one not take a little care over the quality of the post? Is offering a little respect dead in the world?
  

OK, well, I'm more worried about making the tools better (if you count my lame criticism as "helping") than about
spelling and grammar. There's certainly no reason to be insulted by bad grammar, spelling or naming of the tool.



 
In all of this there seems to be a tacit assumption that people volunteering their time here did so to help people learn to write recognizers with language recognition tools. 

No, no, no! Not at all. In fact, I think the opposite: the helpful people here (and you clearly get the award for most helpful on the list)
are a great service. But can't we lighten their load with a few improvements to the tool? Don't you get tired of answering
these questions and wish for a few improvements?



For the most part, this isn't true other than its use within a formal education curriculum. So attacking documentation and how-tos, or the fact that no one addressed issue xyz raised by abc doesn't really make any sense. The wiki is open to anyone to add documentation at any level they like and many people don't attack but wish someone would write up a few things, which is an eminently reasonable hope. Some people even write up a few things in their own time.
  

Yes, well, sounds  like ye olde Open Source theory: since anyone can contribute, everything will be fine.
Well, in this instance, I would try having ANTLR produce the parse tree as an AST rather than a flat one.
Yet I'm not technically able/willing do that. Even if I could, by producing a fork of ANTLR, no one would use my version.
My only recourse is to try to convince Terence. Same with adding a paragraph to the book to show how to get a parse tree.



 
It also seems reasonable to me that if you want to do anything seriously with such a free and necessarily quite complicated tool, that you might invest a few bucks in a book that will save you a lot of trouble. Sure, it doesn't cover every aspect of everything that everybody needs, but it is a hell of a good starting point. When I first needed to write something with yacc, I had the choice of buying a book for 40 quid, or 93 pints of best bitter (it was a long time ago ;-). So, I had to sponge of friends for the beer.
  

I agree, but in this case, I don't think the book is going to really help explain the flat AST, without a very thorough reading.
That's just reality, as you can tell from the original post. Blame it on the individual if you want, but it's not uncommon
for people to avoid reading the whole book. I learned yacc without a book, and it was painful. Even though I'm sure
there are zillions of mailing list answers about how to use yacc, I'm sure it's still painful, because the tool is just not
user-friendly. ANLTR, of course, is far away from yacc on the user-friendly spectrum, but I'd like to see it go further.



 
Nobody is saying "It's his own fault, it is hard", just that it is hard, and that the tool and the site aren't really geared up to be a training ground for this kind of knowledge; it is a bit unfair to berate people for not handing out free training. Not that you personally are saying that particularly, but you have spent an awful lot of time here debating the meaning of words like "syntax", which is no doubt interesting to you, made a presentation about ANTLR (more power to you), but I don't see anything in the Wiki from you that says "All your question about trees belong to us." I don't expect you to have done so, but I don't see why anyone should EXPECT anyone to do so unless they are paying for it.
  

I'm not EXPECTing anyone specific to do anything without me paying for it.
I'm SUGGESTING and HOPING, but I realize there's no way that Terence could or should focus
on usability and documentation for newbies. I certainly don't mean to "berate" anyone.

As for me contributing more, I'm just not an expert on building trees in ANTLR, or anything else in ANTLR really.
I spend time with these long posts because I enjoy it (and used to think it was helpful, but having doubts now), 
but I don't enjoy explaining stuff that I think could be
better covered by a warning message in the tool or a paragraph in the book.

I admire and appreciate people like you who know stuff in depth and put time into answering questions.
I'm just suggesting that a small change to the tool or book can be worth 1000 wiki entries.

Andy




 
Jim
 
 
 
 
  

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/e9cfb70b/attachment-0001.html 

From snyder at t-vec.com  Wed Mar 12 12:47:03 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Wed, 12 Mar 2008 15:47:03 -0400
Subject: [antlr-interest] should I be able to use language=CPP in latest
	intermediate ANTLR build?
Message-ID: <005401c88479$d922b9a0$265d080a@Gizmo>

Should I be able to use language=CPP with the latest intermediate ANTLR
build antlr-2008-02-27.17.jar?

 

I'm seeing these errors when I try:

 

error(10):  internal error: no such group file CPP.stg

error(20):  cannot find code generation templates CPP.stg

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/fbb60bd0/attachment.html 

From darien.hager at etelos-inc.com  Wed Mar 12 12:53:22 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Wed, 12 Mar 2008 12:53:22 -0700
Subject: [antlr-interest] should I be able to use language=CPP in latest
	intermediate ANTLR build?
In-Reply-To: <005401c88479$d922b9a0$265d080a@Gizmo>
References: <005401c88479$d922b9a0$265d080a@Gizmo>
Message-ID: <c8c997f40803121253v60b479f9o9beec4ea2b61bb54@mail.gmail.com>

I suspect it's a case-sensitivity issue, since files are being looked up.
Perhaps try "Cpp"?



-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/ae294610/attachment.html 

From parrt at cs.usfca.edu  Wed Mar 12 13:01:35 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 12 Mar 2008 13:01:35 -0700
Subject: [antlr-interest] should I be able to use language=CPP in latest
	intermediate ANTLR build?
In-Reply-To: <005401c88479$d922b9a0$265d080a@Gizmo>
References: <005401c88479$d922b9a0$265d080a@Gizmo>
Message-ID: <71B5AC83-5AB4-43A6-A600-30E3C88196D5@cs.usfca.edu>

C++ isn't ready I'm afraid...Jim Idle has done a great job with C  
target though.
Ter
On Mar 12, 2008, at 12:47 PM, Chris Snyder wrote:

> Should I be able to use language=CPP with the latest intermediate  
> ANTLR build antlr-2008-02-27.17.jar?
>
> I?m seeing these errors when I try:
>
> error(10):  internal error: no such group file CPP.stg
> error(20):  cannot find code generation templates CPP.stg
>
> Thanks,
> Chris
>
>
> T-VEC Technologies, Inc.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/fdf48262/attachment.html 

From antlr at mirality.co.nz  Wed Mar 12 13:10:52 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 13 Mar 2008 09:10:52 +1300
Subject: [antlr-interest] should I be able to use language=CPP in latest
 intermediate ANTLR build?
In-Reply-To: <005401c88479$d922b9a0$265d080a@Gizmo>
References: <005401c88479$d922b9a0$265d080a@Gizmo>
Message-ID: <20080312201109.76DF611ED3E@www.antlr.org>

At 08:47 13/03/2008, Chris Snyder wrote:
>Should I be able to use language=CPP with the latest intermediate 
>ANTLR build antlr-2008-02-27.17.jar?

I could be wrong (I haven't looked at what's in there), but AFAIK 
there still isn't an actual C++ target for ANTLR3, it's just that 
the C target was modified so that it can generate C++-compatible 
code.  So you still need to use language = C, but you can then set 
your compiler to compile the files as C++ if you want, to let you 
include C++ code in actions.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/0cb30d5a/attachment.html 

From brent.yates at gmail.com  Wed Mar 12 13:11:50 2008
From: brent.yates at gmail.com (Brent Yates)
Date: Wed, 12 Mar 2008 16:11:50 -0400
Subject: [antlr-interest] should I be able to use language=CPP in latest
	intermediate ANTLR build?
In-Reply-To: <71B5AC83-5AB4-43A6-A600-30E3C88196D5@cs.usfca.edu>
References: <005401c88479$d922b9a0$265d080a@Gizmo>
	<71B5AC83-5AB4-43A6-A600-30E3C88196D5@cs.usfca.edu>
Message-ID: <6edc6c380803121311t5508b888s543fe6e2e824e3db@mail.gmail.com>

Jim has done more than a great job.  I have been using the latest C runtime
build in C++(static linking) and C# (via DLL) projects and it works great.
Performance is excellent and the layout is logical.  The interface with C++
is trivial.  My only real issues with it have to do with error generation
and reporting.  It works, it is just a little awkward.

Thanks Jim!

Brent Yates
brent.yates at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/8e972d44/attachment.html 

From jimi at temporal-wave.com  Wed Mar 12 13:49:15 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 Mar 2008 13:49:15 -0700
Subject: [antlr-interest] should I be able to use language=CPP in latest
	intermediate ANTLR build?
In-Reply-To: <005401c88479$d922b9a0$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAeHJnkxceQku
	0NQ0VGorumQEAAAAA@10.0.1.201>

No. Use language=C and then compile the resulting C code as C++ with the relevant option on your compiler. You can then embedded C++ directly in your action code. There may be a few quirks with this just yet as people have just started testing it, so by all means let me know if you find any errors with this.

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Wednesday, March 12, 2008 12:47 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] should I be able to use language=CPP in latest intermediate ANTLR build?

 

Should I be able to use language=CPP with the latest intermediate ANTLR build antlr-2008-02-27.17.jar?

 

I'm seeing these errors when I try:

 

error(10):  internal error: no such group file CPP.stg

error(20):  cannot find code generation templates CPP.stg

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/774dc59e/attachment-0001.html 

From jimi at temporal-wave.com  Wed Mar 12 13:54:18 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 Mar 2008 13:54:18 -0700
Subject: [antlr-interest] should I be able to use language=CPP in latest
	intermediate ANTLR build?
In-Reply-To: <6edc6c380803121311t5508b888s543fe6e2e824e3db@mail.gmail.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAPKPovAOkVkC
	bBXhf80w43wEAAAAA@10.0.1.201>

Yeah - error reporting is a little complicated because you have to be able trace back to the input source through all various structures. I tried to make it as easy as I could to read the example error reporting code in the runtime and then you can override it to do something more specific. However, it definitely takes a few reads to see what is going on.

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Brent Yates
Sent: Wednesday, March 12, 2008 1:12 PM
To: Terence Parr
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] should I be able to use language=CPP in latest intermediate ANTLR build?

 

Jim has done more than a great job.  I have been using the latest C runtime build in C++(static linking) and C# (via DLL) projects and it works great.  Performance is excellent and the layout is logical.  The interface with C++ is trivial.  My only real issues with it have to do with error generation and reporting.  It works, it is just a little awkward.

Thanks Jim!

Brent Yates
brent.yates at gmail.com





-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/e74b49ed/attachment.html 

From antlr at jazillian.com  Wed Mar 12 13:58:35 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Wed, 12 Mar 2008 16:58:35 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAFTxUgCaLHUO	ZlokTxBOEkQEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAFTxUgCaLHUO	ZlokTxBOEkQEAAAAA@10.0.1.201>
Message-ID: <47D843FB.7030403@jazillian.com>

Jim Idle wrote:
>
> I think you miss the point. We can't 'know' that they did or didn't 
> want a flat tree. Who is this someone that you are designating tasks 
> like this to?
>
Well, we can't "know' anything about what anyone wants, in general. The best
we can do is make a best guess. And I think the best guess is that most 
ANTLR users
want a non-flat AST.
>
>  
>
> I would think that saying only 1% of ANTLR users would already know 
> about ASTs is a bit light,
>
I wasn't saying that. I said:
            My guess is that 99% of the time, the flat AST is not what 
the person wanted.
So what are the situations where someone wants a flat AST?
>
> but  I think it would actually annoy 100% of the time.
>
How could it possibly annoy the original poster, who was confused 
because he got a flat AST,
to get message that says "warning: this tree is flat because..."
>
> If you don't know about ASTs then you don't know what it means and get 
> annoyed if you are told to go buy a book.
>
Isn't there a level of understanding about ASTs, where you know it's 
some sort of tree data structure that
represents the input, but you don't know all the ANTLR syntax like "^" 
yet (or at least haven't
gotten around to putting them in the grammar yet)? Isn't that where the 
original poster was?
>
> If you do know then you know what it means but must have wanted a flat 
> tree at that point in your development cycle.
>
No, not at all. This poster wanted a (non-flat) tree, and so do I, by 
default.
>
> I don't think that there is any problem to solve here, there are many 
> more other warnings that need to be added before worrying about this I 
> think. For a start, you have to turn on output=AST and that will 
> surely prompt most people to ask themselves if they know anything 
> about what one of these is?
>
Not really. If someone is just learning ANTLR and sets "output=AST" and 
makes a call to get a tree, they certainly might expect
it to work. By analogy, I'll try a "-verbose" option on just about any 
command-line tool if I want to see what it's
doing, without any idea of what sort of output it might produce.

I think it's very natural for someone to spend time building a 
(tree-structured) grammar,
and expecting to be able to see what kind of AST might get produced by 
default.
He might even think he won't need to do any more work, and if he at 
first got a parse tree,
he'd look at it and go "ewww, that's too much info", and then hopefully 
go figure out the
difference between a parse tree and an AST.

But giving him a flat thing, he's going to say "WTF?", not "Of course, I 
gave it zero instructions for
how to shape the tree so logically this is the tree I get".
>
>  
>
> I thought you said,, "And wouldn't the newbie be the authority on 
> whether it's confusing or not?", so why are you asking me? ;-)
>
I didn't ask you what you thought about this warning message, you 
volunteered it.
I don't even believe that it would be confusing to you...if you really 
wanted a flat AST, and you got a warning message telling
you it's a flat tree, where's the confusion? Redundant and annoying, 
maybe, but not confusing.

And you still haven't explained what the case is where anyone would want 
a flat AST.
I'm still missing that major point.
>
> It is obviously confusing if it tells you something that you don't 
> know about, but can't really tell you what to do about it. I am all 
> for improving error messages and warnings, but now I think you are 
> arguing for this because you said it and are trying to defend it. I 
> think it is an arbitrary example with no real need. It might just help 
> one person in many hundreds, I can't say that it won't, but I can't 
> really see it doing much for people. Now, improving "Can't find 
> tokenRefBang.st" is (and was) worth some effort J
>
Well, I think we agree that it would be helpful to those who don't want 
flat ASTs, right?
We just disagree on whether that's 1% of ANTLR users or 99% (or whatever).
I'm still waiting to be convinced that the number who want flat ASTs is 
not 0%.
I hope I wouldn't have to argue that most people want non-flat ASTs - 
what the heck are you
going to do with a flat AST?
>
>  
>
> Try that and see what real users do when they don't get a message 
> about having 0 ^ operators? Come on, you are just being contrary now. 
> There are plenty of other examples that users hit all the time, the 
> need to use ^ to generate a tree structure is hardly flooding the 
> group with emails from "Confused of Springfield".
>
I agree that there are probably more urgent things needing better error 
messages.
Naturally, we don't get a lot of complaints from newbies - posts to the 
mailing list are not representative
of actual users' problems.
>
>  
>
> The book isn't designed to explain why you get a flat tree or really 
> what an AST is. It does tell you how to go about building trees using 
> ANTLR. The book would have to be about 500 pages longer to cover 
> everything you need to know to start from scratch.
>
Another strawman. The only suggestion I made for the book in this thread 
is to add a paragraph about how to get the parse tree.
Even a sentence with a couple of lines of code would be sufficient. I'm 
not asking for "everything you need to know to
start from scratch".
>
>  
>
> "I learned yacc without a book, and it was painful." Whereas it took 
> me about a week because I had a decent book with some good examples 
> and had already read the dragon book -  I hope you enjoyed the beer 
> though J
>
>  
>
> "if it's just a person dig at me", no not you, Benjamin did not seem 
> to ever post without requesting another piece of information that 
> should be "right on the front page", I don't have any truck with you.
>
>  
>
> "I'm just suggesting that a small change to the tool or book can be 
> worth 1000 wiki entries." Agreed that sometimes this can be the case. 
> There are plenty of examples where the warnings need to be improved 
> (or even supplied ;-) and they are mostly known about and will 
> eventually get done I am sure. I guess I just get a bit on my high 
> horse when there are lots of clamoring for docs and articles and so 
> on, but few people actually want to put in any time doing it and when 
> they do, a lot of people don't use the search to find it anyway.
>
Hey, that's the way the world works, as opposed to the mythical 
open-source pseudo-world.
You (meaning Ter, really) can take my feedback as it's meant: 
constructive criticism, or
you can ignore it, or you can tell me to shut up. But you can't make me 
contribute where you want.
>
>  
>
> Jim
>
>  
>
> PS: Post as long as you want about anything you want if you ask me, it 
> ain't my list J
>
>  
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/4ea26890/attachment-0001.html 

From gbr at newtechlaw.com  Wed Mar 12 14:22:55 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Wed, 12 Mar 2008 14:22:55 -0700
Subject: [antlr-interest] Retaining comments
In-Reply-To: <ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.co
 m>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>
Message-ID: <200803122125.m2CLP2bo010275@tach.newtechlaw.com>

At 11:02 AM 3/12/2008, Thomas Brandon wrote:
>On Thu, Mar 13, 2008 at 3:53 AM, Stuart Watt <SWatt at infobal.com> wrote:
> >
> > The scenario I flagged is illustrative only of my particular task, where I
> > want the best of an AST and of the text. This is not quite associating
> > comments and structure, but of generating annotated/formatted text.
>
>Depending on your XPath processor you might even be able to easily
>write a DOM\SAX wrapper around your AST and use that to run XPath
>against your AST without having to do any XML<->AST. Then you could
>mix XPath and tree parser based passes.
>...
>Just thinking out loud here but seems like it might work.

In that vein ...

There are times where you just need to randomly muck around in the 
AST.  To use the AST interactively (to do user-driven refactorings in 
my case), or where the selection conditions are context dependent, as 
what sounds to be Stuart's case.  An AST wrapper is, I think, the 
right approach.  The down-side is that it would be directly dependent 
on the implementation/structure of the AST, requiring rewrite each 
time the AST changed.

So, how to generate the implementation of a reasonably generic AST 
random access/manipulation API?

One way, leveraging Antlr, would be to use a custom StringTemplate to 
write the API implementing class directly dependent on the target 
grammar: analogous to a "tree grammar", there would be an "access 
grammar".  Implementation could be based on a copy/modification of 
the existing Antlr tree-walker generator.

Initial tool implementation effort would be non-trivial, but would 
result in a big win for grammar writers/maintainers.

Still, bogus idea or not?
----
Gerald B. Rosenberg, Esq.
NewTechLaw
260 Sheridan Ave., Suite 208
Palo Alto, CA  94306-2009

650.325.2100  (office)  /  650.703.1724  (cell)
650.325.2107  (facsimile)

www.newtechlaw.com


CONFIDENTIALITY NOTICE:  This email message (including any 
attachments) is being sent by an attorney, is for the sole use of the 
intended recipient, and may contain confidential and privileged 
information.  Any unauthorized review, use, disclosure or 
distribution is prohibited.  If you are not the intended recipient, 
please contact the sender immediately by reply email and delete all 
copies of this message and any attachments without retaining a copy.  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/af0c6b31/attachment.html 

From dave at badgers-in-foil.co.uk  Wed Mar 12 14:55:19 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 12 Mar 2008 21:55:19 +0000
Subject: [antlr-interest] Retaining comments
In-Reply-To: <200803122125.m2CLP2bo010275@tach.newtechlaw.com>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>
	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>
Message-ID: <20080312215518.GA21383@badgers-in-foil.co.uk>

On Wed, Mar 12, 2008 at 02:22:55PM -0700, Gerald B. Rosenberg wrote:
> There are times where you just need to randomly muck around in the 
> AST.  To use the AST interactively (to do user-driven refactorings in 
> my case), or where the selection conditions are context dependent, as 
> what sounds to be Stuart's case.  An AST wrapper is, I think, the 
> right approach.  The down-side is that it would be directly dependent 
> on the implementation/structure of the AST, requiring rewrite each 
> time the AST changed.
> 
> So, how to generate the implementation of a reasonably generic AST 
> random access/manipulation API?

I believe LPG (ANTLR competitor!) has some capability in this area,

  http://kent.dl.sourceforge.net/sourceforge/lpg/LPG_Automatic_AST_Generation.htm

Not that this on its own says much about problems like code refactoring,
but getting a heterogeneous AST for 'free' sounds nice.

LPG is used in the Eclipse 'IDE Meta-tooling Platform', about which I
know little,

  http://eclipse-imp.sourceforge.net/


ta,
dave

-- 
http://david.holroyd.me.uk/

From parrt at cs.usfca.edu  Wed Mar 12 15:30:45 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 12 Mar 2008 15:30:45 -0700
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <20080312215518.GA21383@badgers-in-foil.co.uk>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>
	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>
	<20080312215518.GA21383@badgers-in-foil.co.uk>
Message-ID: <55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>


On Mar 12, 2008, at 2:55 PM, David Holroyd wrote:

> On Wed, Mar 12, 2008 at 02:22:55PM -0700, Gerald B. Rosenberg wrote:
>> There are times where you just need to randomly muck around in the
>> AST.  To use the AST interactively (to do user-driven refactorings in
>> my case), or where the selection conditions are context dependent, as
>> what sounds to be Stuart's case.  An AST wrapper is, I think, the
>> right approach.  The down-side is that it would be directly dependent
>> on the implementation/structure of the AST, requiring rewrite each
>> time the AST changed.
>>
>> So, how to generate the implementation of a reasonably generic AST
>> random access/manipulation API?
>
> I believe LPG (ANTLR competitor!) has some capability in this area,
>
>  http://kent.dl.sourceforge.net/sourceforge/lpg/LPG_Automatic_AST_Generation.htm
>
> Not that this on its own says much about problems like code  
> refactoring,
> but getting a heterogeneous AST for 'free' sounds nice.

Unfortunately, that is a parse tree not an AST... ;)

Ter

From antlr at jazillian.com  Wed Mar 12 15:54:59 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Wed, 12 Mar 2008 18:54:59 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk>
	<55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
Message-ID: <47D85F43.6030400@jazillian.com>

Hmmm...a tool that automatically produces an "AST" just from an input 
grammar.
What a novel concept!  ;)

But the authors call it an "AST" when in fact it's really just a parse 
tree, not an AST.
Strange that the authors themselves would make such a mistake - to think 
that a parse
tree might make a reasonable default AST...what a silly mistake.

Don't they realize that building an AST is hard, and no one should be 
able to
get an AST "for free"? Don't they realize that's not an AST at all, but 
a parse tree, and that
the *real* AST that this input grammar has asked for is a useful, 
simple, flat, data structure?

Clearly they just don't know what they're talking about  and so should 
be ignored.

Andy ;)

Terence Parr wrote:
>
> On Mar 12, 2008, at 2:55 PM, David Holroyd wrote:
>
>> On Wed, Mar 12, 2008 at 02:22:55PM -0700, Gerald B. Rosenberg wrote:
>>> There are times where you just need to randomly muck around in the
>>> AST.  To use the AST interactively (to do user-driven refactorings in
>>> my case), or where the selection conditions are context dependent, as
>>> what sounds to be Stuart's case.  An AST wrapper is, I think, the
>>> right approach.  The down-side is that it would be directly dependent
>>> on the implementation/structure of the AST, requiring rewrite each
>>> time the AST changed.
>>>
>>> So, how to generate the implementation of a reasonably generic AST
>>> random access/manipulation API?
>>
>> I believe LPG (ANTLR competitor!) has some capability in this area,
>>
>>  http://kent.dl.sourceforge.net/sourceforge/lpg/LPG_Automatic_AST_Generation.htm 
>>
>>
>> Not that this on its own says much about problems like code refactoring,
>> but getting a heterogeneous AST for 'free' sounds nice.
>
> Unfortunately, that is a parse tree not an AST... ;)
>
> Ter
>


From jimi at temporal-wave.com  Wed Mar 12 16:09:50 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 Mar 2008 16:09:50 -0700
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <47D85F43.6030400@jazillian.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAwP3hDZr2OEm
	CEDFh1CO0dwEAAAAA@10.0.1.201>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andy Tripp
> Sent: Wednesday, March 12, 2008 3:55 PM
> To: Terence Parr
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] LPG WAS Retaining comments
> 
> Hmmm...a tool that automatically produces an "AST" just from an input
> grammar.
> What a novel concept!  ;)
> 
> But the authors call it an "AST" when in fact it's really just a parse
> tree, not an AST.
> Strange that the authors themselves would make such a mistake - to
> think
> that a parse
> tree might make a reasonable default AST...what a silly mistake.
> 
> Don't they realize that building an AST is hard, and no one should be
> able to
> get an AST "for free"? Don't they realize that's not an AST at all, but
> a parse tree, and that
> the *real* AST that this input grammar has asked for is a useful,
> simple, flat, data structure?
> 
> Clearly they just don't know what they're talking about  and so should
> be ignored.
> 

...Good Grief!

Charlie Brown.





From dave at badgers-in-foil.co.uk  Wed Mar 12 16:19:24 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 12 Mar 2008 23:19:24 +0000
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>
	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>
	<20080312215518.GA21383@badgers-in-foil.co.uk>
	<55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
Message-ID: <20080312231923.GB21383@badgers-in-foil.co.uk>

On Wed, Mar 12, 2008 at 03:30:45PM -0700, Terence Parr wrote:
> On Mar 12, 2008, at 2:55 PM, David Holroyd wrote:
> >>So, how to generate the implementation of a reasonably generic AST
> >>random access/manipulation API?
> >
> >I believe LPG (ANTLR competitor!) has some capability in this area,
> >
> > http://kent.dl.sourceforge.net/sourceforge/lpg/LPG_Automatic_AST_Generation.htm
> >
> >Not that this on its own says much about problems like code  
> >refactoring,
> >but getting a heterogeneous AST for 'free' sounds nice.
> 
> Unfortunately, that is a parse tree not an AST... ;)

Well from the little I've seen, it's tree construction capabilities are
very limited compared to ANTLR's, but as someone who's written a fairly
large heterogeneous *AST* by hand[1] I see a fair bit of redundancy
between the hand crafted code, and the information already available in
the grammar.

Pesky redundancy!

(So how easy is it to create new output=XXX options for ANTLR?)


ta,
dave

[1] http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/java/uk/co/badgersinfoil/metaas/dom/

-- 
http://david.holroyd.me.uk/

From r.mark.volkmann at gmail.com  Wed Mar 12 17:36:35 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 12 Mar 2008 19:36:35 -0500
Subject: [antlr-interest] postmortem
In-Reply-To: <47D843FB.7030403@jazillian.com>
References: <47D843FB.7030403@jazillian.com>
Message-ID: <f0fcc6820803121736t4c9d4087o49975d576c274f55@mail.gmail.com>

Anybody who is just learning ANTLR and wants to see some simply
examples of creating and using ASTs can get that from my presentation
that is posted on the wiki. See
http://www.antlr.org/wiki/display/ANTLR3/Presentations and look for
"Mark Volkmann". I put a lot of work into creating this and would hate
to be the only one that benefits from it.

Questions and suggestions for improvement are welcomed!

From gbr at newtechlaw.com  Wed Mar 12 18:29:31 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Wed, 12 Mar 2008 18:29:31 -0700
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <20080312231923.GB21383@badgers-in-foil.co.uk>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>
	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>
	<20080312215518.GA21383@badgers-in-foil.co.uk>
	<55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
	<20080312231923.GB21383@badgers-in-foil.co.uk>
Message-ID: <200803130135.m2D1Z2P0011537@tach.newtechlaw.com>

At 04:19 PM 3/12/2008, David Holroyd wrote:
>On Wed, Mar 12, 2008 at 03:30:45PM -0700, Terence Parr wrote:
> > On Mar 12, 2008, at 2:55 PM, David Holroyd wrote:
> > >>So, how to generate the implementation of a reasonably generic AST
> > >>random access/manipulation API?
> > >
> > Unfortunately, that is a parse tree not an AST... ;)
>
>Well from the little I've seen, it's tree construction capabilities are
>very limited compared to ANTLR's, but as someone who's written a fairly
>large heterogeneous *AST* by hand[1] I see a fair bit of redundancy
>between the hand crafted code, and the information already available in
>the grammar.

Antlr can do heterogeneous ASTs:

http://www.antlr.org/wiki/display/~admin/2007/07/26/Heterogeneous+AST+node+types

Regardless of whether it is LPG or Antlr, it is still just the AST or 
parse tree in all of its gory detail.  Not at all the kind of 
convenience API that I was referring to/hoping for: at the level of 
find, copy, insert, and delete.  Would be neat to automagically 
generate an AST-specific implementation from nothing more than a tree 
grammar.  Oh well. 


From snyder at t-vec.com  Wed Mar 12 19:11:50 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Wed, 12 Mar 2008 22:11:50 -0400
Subject: [antlr-interest] antlr 3, language=C,
	getting pANTLR3_RECOGNIZER_SHARED_STATE unknown
Message-ID: <001e01c884af$9a547a70$265d080a@Gizmo>

I'm trying to compile my C lexer and I'm getting several errors but the
first is this:

 

error C2081: 'pANTLR3_RECOGNIZER_SHARED_STATE' : name in formal parameter
list illegal

 

which corresponds to these lines in the generated lexer:

 

// Function protoypes for the constructor functions that external
translation units

// such as delegators and delegates may wish to call.

//

.

ANTLR3_API pMScriptLexer MScriptLexerNewSSD      (pANTLR3_INPUT_STREAM
instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

 

I searched through the libantlr3c-3.0.1 files and didn't find that
definition anywhere. I do see that it appears to be coming from C.stf
template.

 

Any idea what I'm missing?

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/59fe642e/attachment-0001.html 

From rdclark at gmail.com  Wed Mar 12 19:26:55 2008
From: rdclark at gmail.com (Richard Clark)
Date: Wed, 12 Mar 2008 19:26:55 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <BAYC1-PASMTP12AF93437EBB4CD1384F20F5080@CEZ.ICE>
References: <BAYC1-PASMTP12AF93437EBB4CD1384F20F5080@CEZ.ICE>
Message-ID: <d3992d900803121926r1809f46ck62a09120f1b06055@mail.gmail.com>

On Wed, Mar 12, 2008 at 12:21 PM, Benjamin Shropshire
<shro8822 at vandals.uidaho.edu> wrote:

>  If someone who knows, thinks this is correct, could you add it to the
>  wiki in some suitably prominent place?
>
>  ANTLR is a tool for generating a number of different kinds of language
>  recognizer/translator programs. It is typically used to process input in
>  three stages. The first stage takes a characters stream as input, breaks
>  it up into tokens (the smallest grouping a language cares about) and
>  generates a tokens stream as output. The second stage takes this token
>  stream and find's it structure. In this stage, the sequence of tokens is
>  converted into a condensed, normalized form, the Abstract Syntax Tree
>  (AST), by extracting parts of the input pattern and applying rewrite
>  rules. The third step (or steps in some cases) takes this AST and uses a
>  tree parser to processes it to do whatever the user needs. This step
>  often takes the form of multiple tree parsers that are run in sequence
>  to generate the needed results. The first two steps are typically
>  defined together in a combined grammar with an output type of "AST".
>  Also they should generally have no more action code attached to them
>  than is needed to properly parse the input. The bulk of the logic should
>  be put in the third step(s).

I took what you wrote and used it for the basis of multiple changes to
http://www.antlr.org/wiki/display/ANTLR3/Five+minute+introduction+to+ANTLR+3

In particular, see "What exactly does ANTLR 3 do?" at the top of the
page and the last paragraph of "Your five minutes are up!" at the
bottom.

There's still room for improvement for the first-time somebody picks
up ANTLR, but I wanted to get something into place without making
drastic changes to the Wiki. A lot of people have put a lot of work
into the pages there and I wanted to respect that.

...Richard

From jimi at temporal-wave.com  Wed Mar 12 19:54:12 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 12 Mar 2008 19:54:12 -0700
Subject: [antlr-interest] antlr 3, language=C,
	getting pANTLR3_RECOGNIZER_SHARED_STATE unknown
In-Reply-To: <001e01c884af$9a547a70$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0m
	OZXgK3Rn13gEAAAAA@10.0.1.201>

You are using the 3.0.1 runtime library with the 3.1 snapshot. You will need to use the 3.1 C runtime snapshot if you want to run ANTLR 3.1, or drop your ANTLR tool jar version to 3.0.1.

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Wednesday, March 12, 2008 7:12 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] antlr 3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown

 

I'm trying to compile my C lexer and I'm getting several errors but the first is this:

 

error C2081: 'pANTLR3_RECOGNIZER_SHARED_STATE' : name in formal parameter list illegal

 

which corresponds to these lines in the generated lexer:

 

// Function protoypes for the constructor functions that external translation units

// such as delegators and delegates may wish to call.

//

...

ANTLR3_API pMScriptLexer MScriptLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

 

I searched through the libantlr3c-3.0.1 files and didn't find that definition anywhere. I do see that it appears to be coming from C.stf template.

 

Any idea what I'm missing?

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/71a8ffa3/attachment.html 

From snyder at t-vec.com  Wed Mar 12 20:25:17 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Wed, 12 Mar 2008 23:25:17 -0400
Subject: [antlr-interest] antlr 3, language=C,
	getting pANTLR3_RECOGNIZER_SHARED_STATE unknown
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0mOZXgK3Rn13gEAAAAA@10.0.1.201>
References: <001e01c884af$9a547a70$265d080a@Gizmo>
	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0mOZXgK3Rn13gEAAAAA@10.0.1.201>
Message-ID: <003001c884b9$dcb4c5f0$265d080a@Gizmo>

Thanks Jim, 

That would certainly be a problem. ;>)

 

Is the 3.1 c snapshot in a downloadable tar ball or do I need to figure out
how to get the files from the development tree?

I appreciate your guidance.

 

Chris

 

 

 

  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Wednesday, March 12, 2008 10:54 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] antlr 3, language=C,getting
pANTLR3_RECOGNIZER_SHARED_STATE unknown

 

You are using the 3.0.1 runtime library with the 3.1 snapshot. You will need
to use the 3.1 C runtime snapshot if you want to run ANTLR 3.1, or drop your
ANTLR tool jar version to 3.0.1.

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Wednesday, March 12, 2008 7:12 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] antlr 3, language=C, getting
pANTLR3_RECOGNIZER_SHARED_STATE unknown

 

I'm trying to compile my C lexer and I'm getting several errors but the
first is this:

 

error C2081: 'pANTLR3_RECOGNIZER_SHARED_STATE' : name in formal parameter
list illegal

 

which corresponds to these lines in the generated lexer:

 

// Function protoypes for the constructor functions that external
translation units

// such as delegators and delegates may wish to call.

//

.

ANTLR3_API pMScriptLexer MScriptLexerNewSSD      (pANTLR3_INPUT_STREAM
instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

 

I searched through the libantlr3c-3.0.1 files and didn't find that
definition anywhere. I do see that it appears to be coming from C.stf
template.

 

Any idea what I'm missing?

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080312/65ff5f18/attachment-0001.html 

From antlr at mirality.co.nz  Thu Mar 13 00:35:20 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 13 Mar 2008 20:35:20 +1300
Subject: [antlr-interest] postmortem
In-Reply-To: <47D843FB.7030403@jazillian.com>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAFTxUgCaLHUO	ZlokTxBOEkQEAAAAA@10.0.1.201>
	<47D843FB.7030403@jazillian.com>
Message-ID: <20080313073540.C949A11EBBB@www.antlr.org>

At 09:58 13/03/2008, Andy Tripp wrote:
>Isn't there a level of understanding about ASTs, where you know 
>it's some sort of tree data structure that represents the input, 
>but you don't know all the ANTLR syntax like "^" yet (or at least 
>haven't gotten around to putting them in the grammar yet)? Isn't 
>that where the original poster was?

I do have to say: that's exactly what happened to me when I was 
first starting out with ANTLRv3.

I had a fairly trivial DSL to parse and I wanted to throw it into 
a codegen routine afterwards.  I noticed that there was this "AST" 
option that said it would output a tree, which I thought would be 
useful.  So I switched it on, and was puzzled that I didn't get a 
tree out of it.  (I was basically expecting that by default every 
time I called a subrule it would drop a level down in the 
tree.)  Eventually I gave up on that and just built my own tree 
with action code.

I think I originally just assumed that this was something that 
wasn't implemented yet, since this was circa 3.0b6 or so.  And 
there was almost no documentation at that point beyond the readme 
file :)


However I can see the other side of this too.  If ANTLR did 
default to dropping a tree level for each subrule call, how would 
you go ahout telling it to not do that?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/215cdec1/attachment.html 

From tbrandonau at gmail.com  Thu Mar 13 01:20:35 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Thu, 13 Mar 2008 19:20:35 +1100
Subject: [antlr-interest] postmortem
In-Reply-To: <47D843FB.7030403@jazillian.com>
References: <47D843FB.7030403@jazillian.com>
Message-ID: <ebc876d70803130120g62ca685cyc9f03f7769db9f41@mail.gmail.com>

On Thu, Mar 13, 2008 at 7:58 AM, Andy Tripp <antlr at jazillian.com> wrote:
>
>  Jim Idle wrote:
> > I think you miss the point. We can't 'know' that they did or didn't want a
> > flat tree. Who is this someone that you are designating tasks like this to?
> Well, we can't "know' anything about what anyone wants, in general. The best
>  we can do is make a best guess. And I think the best guess is that most
> ANTLR users want a non-flat AST.
Yes, most ANTLR users want a non-flat tree. But most (if not all) of
these users do not want a parse tree. The parse trees generated by
ANTLR are not just like ASTs and cannot be used as such. Parse trees
consist of standard AST nodes for all the actual language nodes and
special parse tree nodes (of type ParseTree extending CommonTree) for
the rule references. These parse tree nodes have a token type of 0.
Thus you cannot use a tree parser against a parse tree and manually
walking the tree would be complicated. Parse trees (as generated by
ANTLR) are more of a debugging aid than a type of AST that
automatically adds structure.

Perhaps you could add an output=CST (Concrete Syntax Tree, aka parse
tree) option. But how would this work?
Given a rule like:
myop: modifier MYOP contents;
what should our proposed CST constructor generate? What token types
should rule references automatically generate? You could generate a
token type named after the rule but producing ^(MYOP attributes MYOP
contents) where the first MYOP is our auto-generated one mapping to no
part of the input and the second is an actual token seems bizarre and
likely to cause troubles. Maybe we could do ^(RULE_MYOP modifier MYOP
contents) but do any of the users who don't want flat ASTs want that?
And do they also want:
modifier: PUBLIC | PROTECTED;
to generate ^(RULE_MODIFIER PUBLIC)?
I'd imagine what they really want is not a CST but the AST ^(MYOP
modifier content). With modifier having no dummy parent and contents
having one.
OK, so we don't want output=CST we want to auto-generate ASTs. But
how? Given the above case we might think we could have a rule that if
there's one token reference and other rule references we make the
token the root. That's easy but what if we've got:
method: keywords ID args catch;
we probably don't want ^(ID keywords args catch) as that's very hard
for our tree walker to distinguish from:
field: keywords ID init;
which makes ^(ID keywords init).
And what do we do with:
method: keywords ID LPAREN args RPAREN CATCH catch;
Here I'd probably want the AST ^(METHOD_CALL ID keywords args catch)
but how can a tool know that.
OK, so we want to have some default rules and some syntax to disable
automatic generation. But how often is this auto generation actually
going to be used? I think you're very often going to want to disable
any such automatic generation. OK, so any use of AST rebuild operators
disables the automatic generation. But what about your "modifiers:
PUBLIC | PROTECTED;" rule? Adding "options { autoAST=false; }" to all
such rules is going to be pretty annoying and "modifiers!: PUBLIC |
PROTECTED;" isn't going to be very understandable for new users.

I think if you spend a bit of time actually thinking about how you'd
manage to implement what you want you'll see it really doesn't work.

Tom.

From dave at badgers-in-foil.co.uk  Thu Mar 13 02:06:22 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Thu, 13 Mar 2008 09:06:22 +0000
Subject: [antlr-interest] LPG (Was: Retaining comments)
In-Reply-To: <200803130135.m2D1Z2P0011537@tach.newtechlaw.com>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>
	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>
	<20080312215518.GA21383@badgers-in-foil.co.uk>
	<55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
	<20080312231923.GB21383@badgers-in-foil.co.uk>
	<200803130135.m2D1Z2P0011537@tach.newtechlaw.com>
Message-ID: <20080313090621.GC21383@badgers-in-foil.co.uk>

I may have mistakenly given the impression that I was,

 a) Trying to enter into an AST vs. Parse Tree debate
 b) Suggesting that Gerald actually use LPG

while neither was the case!  ;)


I was just pointing out that elsewhere, people have got useful results
by attempting to infer a type-structure directly from the grammar and
some embedded metadata.

It should almost be possible to do something similar based on ANTLR's
existing rewrite-rule syntax..?


ta,
dave

-- 
http://david.holroyd.me.uk/

From jaluber at gmx.de  Thu Mar 13 03:53:17 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 13 Mar 2008 11:53:17 +0100
Subject: [antlr-interest] antlr 3, language=C,
 getting pANTLR3_RECOGNIZER_SHARED_STATE unknown
In-Reply-To: <003001c884b9$dcb4c5f0$265d080a@Gizmo>
References: <001e01c884af$9a547a70$265d080a@Gizmo>	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0mOZXgK3Rn13gEAAAAA@10.0.1.201>
	<003001c884b9$dcb4c5f0$265d080a@Gizmo>
Message-ID: <47D9079D.8020501@gmx.de>

Chris Snyder schrieb:
> Thanks Jim,
> 
> That would certainly be a problem. ;>)
> 
> Is the 3.1 c snapshot in a downloadable tar ball or do I need to figure 
> out how to get the files from the development tree?
> 
> I appreciate your guidance.
> 
> Chris

Just look on the download page. There is a link to intermediate builds.

Johannes

From benzofurans-mail001 at yahoo.com  Thu Mar 13 04:48:23 2008
From: benzofurans-mail001 at yahoo.com (benzo)
Date: Thu, 13 Mar 2008 12:48:23 +0100
Subject: [antlr-interest] starting with language translation
Message-ID: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>

hi
this is my first post - thus "hello world!"

I'm interested in antlr since a long time and I finally like to make
an attempt with it.
What I'd like to achieve is to write a translator in form of "java to
actionscript".

>From what I understand there are basically 4 layers/modules/steps involved:
1. parse of the source language (java)
2. persist/serialize the structure
4. apply the translation rules
5. generate the  the target language (actionscript)

some questions to these points:

1. are there any existing java language parser (java grammar), maybe
even with some (basic) documentation (tutorials, etc.)
2. what do you suggest: writing the structure down to xml? persist in memory?
4. are there any good examples for doing that the right (clean) way?
5. what is your personal favorite way doing that? stringtemplate? are
there simpler methods?

thanks in advance for your answers.

//benzo

From snyder at t-vec.com  Thu Mar 13 06:15:47 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Thu, 13 Mar 2008 09:15:47 -0400
Subject: [antlr-interest] how to get intermediate C runtime files [was antlr
	3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]
In-Reply-To: <47D9079D.8020501@gmx.de>
References: <001e01c884af$9a547a70$265d080a@Gizmo>	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0mOZXgK3Rn13gEAAAAA@10.0.1.201>
	<003001c884b9$dcb4c5f0$265d080a@Gizmo> <47D9079D.8020501@gmx.de>
Message-ID: <001a01c8850c$5ab014d0$265d080a@Gizmo>

Thanks for the suggestion. That was the first place I looked but the latest
intermediate download which I have, antlr-2008-02-27.17.tar.gz, does not
contain any of the supporting c files needed.

The C files I have currently are the ones you can download from the main
download page, http://antlr.org/download.html, using the link to C runtime
distributions. There is only the 3.0.1 tar there.

Chris


-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: Thursday, March 13, 2008 6:53 AM
To: snyder at t-vec.com
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] antlr 3, language=C, getting
pANTLR3_RECOGNIZER_SHARED_STATE unknown

Chris Snyder schrieb:
> Thanks Jim,
> 
> That would certainly be a problem. ;>)
> 
> Is the 3.1 c snapshot in a downloadable tar ball or do I need to figure 
> out how to get the files from the development tree?
> 
> I appreciate your guidance.
> 
> Chris

Just look on the download page. There is a link to intermediate builds.

Johannes


From snyder at t-vec.com  Thu Mar 13 06:31:40 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Thu, 13 Mar 2008 09:31:40 -0400
Subject: [antlr-interest] how to get intermediate C runtime files [was
	antlr3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]
In-Reply-To: <001a01c8850c$5ab014d0$265d080a@Gizmo>
References: <001e01c884af$9a547a70$265d080a@Gizmo>	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0mOZXgK3Rn13gEAAAAA@10.0.1.201><003001c884b9$dcb4c5f0$265d080a@Gizmo>
	<47D9079D.8020501@gmx.de> <001a01c8850c$5ab014d0$265d080a@Gizmo>
Message-ID: <002201c8850e$92995da0$265d080a@Gizmo>

I think I found it here:

http://fisheye2.cenqua.com/browse/antlr/runtime/C/dist/libantlr3c-3.1.0.0b1.
tar.gz

C

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 9:16 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] how to get intermediate C runtime files [was
antlr3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]

Thanks for the suggestion. That was the first place I looked but the latest
intermediate download which I have, antlr-2008-02-27.17.tar.gz, does not
contain any of the supporting c files needed.

The C files I have currently are the ones you can download from the main
download page, http://antlr.org/download.html, using the link to C runtime
distributions. There is only the 3.0.1 tar there.

Chris


-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: Thursday, March 13, 2008 6:53 AM
To: snyder at t-vec.com
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] antlr 3, language=C, getting
pANTLR3_RECOGNIZER_SHARED_STATE unknown

Chris Snyder schrieb:
> Thanks Jim,
> 
> That would certainly be a problem. ;>)
> 
> Is the 3.1 c snapshot in a downloadable tar ball or do I need to figure 
> out how to get the files from the development tree?
> 
> I appreciate your guidance.
> 
> Chris

Just look on the download page. There is a link to intermediate builds.

Johannes


From snyder at t-vec.com  Thu Mar 13 06:41:38 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Thu, 13 Mar 2008 09:41:38 -0400
Subject: [antlr-interest] how to get intermediate C runtime files
In-Reply-To: <002201c8850e$92995da0$265d080a@Gizmo>
References: <001e01c884af$9a547a70$265d080a@Gizmo>	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0mOZXgK3Rn13gEAAAAA@10.0.1.201><003001c884b9$dcb4c5f0$265d080a@Gizmo><47D9079D.8020501@gmx.de>
	<001a01c8850c$5ab014d0$265d080a@Gizmo>
	<002201c8850e$92995da0$265d080a@Gizmo>
Message-ID: <002901c8850f$f7422510$265d080a@Gizmo>

I tried downloading and extracting libantlr3c-3.1.0.0b1.tar.gz 3 times but
WinZip keeps telling me:

Extracting libantlr3c-3.1.0.0b1.tar
Invalid Compressed Data -- unable to inflate

I haven't had any trouble with other antlr *.gz files. It appears this file
is corrupt.

C

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 9:32 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] how to get intermediate C runtime files
[wasantlr3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]

I think I found it here:

http://fisheye2.cenqua.com/browse/antlr/runtime/C/dist/libantlr3c-3.1.0.0b1.
tar.gz

C

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 9:16 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] how to get intermediate C runtime files [was
antlr3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]

Thanks for the suggestion. That was the first place I looked but the latest
intermediate download which I have, antlr-2008-02-27.17.tar.gz, does not
contain any of the supporting c files needed.

The C files I have currently are the ones you can download from the main
download page, http://antlr.org/download.html, using the link to C runtime
distributions. There is only the 3.0.1 tar there.

Chris


-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: Thursday, March 13, 2008 6:53 AM
To: snyder at t-vec.com
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] antlr 3, language=C, getting
pANTLR3_RECOGNIZER_SHARED_STATE unknown

Chris Snyder schrieb:
> Thanks Jim,
> 
> That would certainly be a problem. ;>)
> 
> Is the 3.1 c snapshot in a downloadable tar ball or do I need to figure 
> out how to get the files from the development tree?
> 
> I appreciate your guidance.
> 
> Chris

Just look on the download page. There is a link to intermediate builds.

Johannes


From jimi at temporal-wave.com  Thu Mar 13 07:02:31 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 07:02:31 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <auto-000000020762@temporal-wave.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA0raxpiu9vka
	IPN8V+dlD8wEAAAAA@10.0.1.201>

OK - then I give in ;-), perhaps it is a reasonable thing to warn about a flat tree, but giving out the parse tree still doesn't make a lot of sense :-0

 

Jim

 

From: Gavin Lambert [mailto:antlr at mirality.co.nz] 
Sent: Thursday, March 13, 2008 12:35 AM
To: Andy Tripp; Jim Idle
Cc: antlr-interest
Subject: Re: [antlr-interest] postmortem

 

At 09:58 13/03/2008, Andy Tripp wrote:



Isn't there a level of understanding about ASTs, where you know it's some sort of tree data structure that represents the input, but you don't know all the ANTLR syntax like "^" yet (or at least haven't gotten around to putting them in the grammar yet)? Isn't that where the original poster was?


I do have to say: that's exactly what happened to me when I was first starting out with ANTLRv3.

I had a fairly trivial DSL to parse and I wanted to throw it into a codegen routine afterwards.  I noticed that there was this "AST" option that said it would output a tree, which I thought would be useful.  So I switched it on, and was puzzled that I didn't get a tree out of it.  (I was basically expecting that by default every time I called a subrule it would drop a level down in the tree.)  Eventually I gave up on that and just built my own tree with action code.

I think I originally just assumed that this was something that wasn't implemented yet, since this was circa 3.0b6 or so.  And there was almost no documentation at that point beyond the readme file :)


However I can see the other side of this too.  If ANTLR did default to dropping a tree level for each subrule call, how would you go ahout telling it to not do that?



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/f9d5654d/attachment-0001.html 

From jimi at temporal-wave.com  Thu Mar 13 07:06:46 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 07:06:46 -0700
Subject: [antlr-interest] antlr 3, language=C,
	getting pANTLR3_RECOGNIZER_SHARED_STATE unknown
In-Reply-To: <003001c884b9$dcb4c5f0$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA7YRMONPFjU6
	/WekT/9m3TQEAAAAA@10.0.1.201>

Look at the intermediate builds page on the main download page. Pick out the tar on that page with the latest date on it J

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Wednesday, March 12, 2008 8:25 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] antlr 3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown

 

Thanks Jim, 

That would certainly be a problem. ;>)

 

Is the 3.1 c snapshot in a downloadable tar ball or do I need to figure out how to get the files from the development tree?

I appreciate your guidance.

 

Chris

 

 

 

  _____  

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Wednesday, March 12, 2008 10:54 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] antlr 3, language=C,getting pANTLR3_RECOGNIZER_SHARED_STATE unknown

 

You are using the 3.0.1 runtime library with the 3.1 snapshot. You will need to use the 3.1 C runtime snapshot if you want to run ANTLR 3.1, or drop your ANTLR tool jar version to 3.0.1.

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Wednesday, March 12, 2008 7:12 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] antlr 3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown

 

I'm trying to compile my C lexer and I'm getting several errors but the first is this:

 

error C2081: 'pANTLR3_RECOGNIZER_SHARED_STATE' : name in formal parameter list illegal

 

which corresponds to these lines in the generated lexer:

 

// Function protoypes for the constructor functions that external translation units

// such as delegators and delegates may wish to call.

//

...

ANTLR3_API pMScriptLexer MScriptLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

 

I searched through the libantlr3c-3.0.1 files and didn't find that definition anywhere. I do see that it appears to be coming from C.stf template.

 

Any idea what I'm missing?

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/6315761b/attachment.html 

From jimi at temporal-wave.com  Thu Mar 13 07:37:06 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 07:37:06 -0700
Subject: [antlr-interest] starting with language translation
In-Reply-To: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAYhAqyJOnLkS
	qa8FJ3axvvwEAAAAA@10.0.1.201>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of benzo
> Sent: Thursday, March 13, 2008 4:48 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] starting with language translation
> 
> hi
> this is my first post - thus "hello world!"
> 
> I'm interested in antlr since a long time and I finally like to make
> an attempt with it.
> What I'd like to achieve is to write a translator in form of "java to
> actionscript".
> 
> >From what I understand there are basically 4 layers/modules/steps
> involved:
> 1. parse of the source language (java)

Yes, but this splits into (in ANTLR terms):

a) Creating a character streams with ANTLRFileReader or String Reader;
b) Lexing that stream into tokens (all in one go)
c) Taking the token stream and parsing it ...

> 2. persist/serialize the structure

This is called producing an Abstract Syntax Tree. You place annotations in the parser (once you have it working) to say how you want the parser to produce the AST. This is a tree structure that encapsulates the 'program' you have just parsed and gets rid of/resolves ambiguities so that you have a nice easily walkable tree structure. 

> 4. apply the translation rules

For this, you can either manually walk through the tree or write a tree walking grammar. You walk through the nodes one or more times. It usually splits out into something like: a) A walk to verify the semantics of the input program (otherwise you will translate bad input to bad output). b) A walk to build a symbol table (you might do this in a) if the language allows. C) A walk to generate the target (your 5. Below). Some languages allow you to do all of this at once, some require more passes than this to resolve type information and so on.

> 5. generate the  the target language (actionscript)

Try to keep the code that actually generates code in separate code units and invoke it from your code generating tree walk(s).

> 
> some questions to these points:
> 
> 1. are there any existing java language parser (java grammar), maybe
> even with some (basic) documentation (tutorials, etc.)

Download the example grammars on the download page and have a read through them. At first, don; try and understand everything all at once, just take note of how things are plugged together and what the tree examples do to build the tree. The take one of the grammars (there is one for Java) and try to add something to it. Once you can do that, then you are on your way to a reasonable understanding. 

You are well advised to buy the ANTLR book: http://www.pragprog.com/news/new-in-print-and-shipping-the-definitive-antlr-reference-building-domain-specific-languages and to read up a little on how parsers and trees and related things work in general.

> 2. what do you suggest: writing the structure down to xml? persist in
> memory?

Use the AST building capabilities of ANTLR.

> 4. are there any good examples for doing that the right (clean) way?

The book and examples together, as well as using the search facility of the Wiki.

> 5. what is your personal favorite way doing that? stringtemplate? are
> there simpler methods?

Stringtemplate is fine for producing your final code, you can of course make a code generation interface, and invoke its methods from your AST walker.

File->charstream->lexer->tokenstream->parser->treenodestream->ASTparser (X n) ->code generator.

Just attack each one in stages and steal from the free examples :-)

Jim





From jimi at temporal-wave.com  Thu Mar 13 07:38:57 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 07:38:57 -0700
Subject: [antlr-interest] how to get intermediate C runtime files [was
	antlr 3, language=C,
	getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]
In-Reply-To: <001a01c8850c$5ab014d0$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAaL1h8cMerkC
	ZDsd0WttokgEAAAAA@10.0.1.201>

Pretty sure it does as I just downloaded it to check and they are there winking at me ;-). Make sure you find the C directory under the runtime directory.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Chris Snyder
> Sent: Thursday, March 13, 2008 6:16 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] how to get intermediate C runtime files [was
> antlr 3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]
> 
> Thanks for the suggestion. That was the first place I looked but the
> latest
> intermediate download which I have, antlr-2008-02-27.17.tar.gz, does
> not
> contain any of the supporting c files needed.






From snyder at t-vec.com  Thu Mar 13 07:38:50 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Thu, 13 Mar 2008 10:38:50 -0400
Subject: [antlr-interest] how to get intermediate C runtime files
In-Reply-To: <002901c8850f$f7422510$265d080a@Gizmo>
References: <001e01c884af$9a547a70$265d080a@Gizmo>	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAXDWNehVGb0mOZXgK3Rn13gEAAAAA@10.0.1.201><003001c884b9$dcb4c5f0$265d080a@Gizmo><47D9079D.8020501@gmx.de><001a01c8850c$5ab014d0$265d080a@Gizmo><002201c8850e$92995da0$265d080a@Gizmo>
	<002901c8850f$f7422510$265d080a@Gizmo>
Message-ID: <004801c88517$f4977dd0$265d080a@Gizmo>

I was able to download and build the latest C runtime files from fisheye and
things are looking much better now.

C

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 9:42 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] how to get intermediate C runtime files

I tried downloading and extracting libantlr3c-3.1.0.0b1.tar.gz 3 times but
WinZip keeps telling me:

Extracting libantlr3c-3.1.0.0b1.tar
Invalid Compressed Data -- unable to inflate

I haven't had any trouble with other antlr *.gz files. It appears this file
is corrupt.

C

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 9:32 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] how to get intermediate C runtime files
[wasantlr3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]

I think I found it here:

http://fisheye2.cenqua.com/browse/antlr/runtime/C/dist/libantlr3c-3.1.0.0b1.
tar.gz

C

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 9:16 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] how to get intermediate C runtime files [was
antlr3, language=C, getting pANTLR3_RECOGNIZER_SHARED_STATE unknown]

Thanks for the suggestion. That was the first place I looked but the latest
intermediate download which I have, antlr-2008-02-27.17.tar.gz, does not
contain any of the supporting c files needed.

The C files I have currently are the ones you can download from the main
download page, http://antlr.org/download.html, using the link to C runtime
distributions. There is only the 3.0.1 tar there.

Chris


-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: Thursday, March 13, 2008 6:53 AM
To: snyder at t-vec.com
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] antlr 3, language=C, getting
pANTLR3_RECOGNIZER_SHARED_STATE unknown

Chris Snyder schrieb:
> Thanks Jim,
> 
> That would certainly be a problem. ;>)
> 
> Is the 3.1 c snapshot in a downloadable tar ball or do I need to figure 
> out how to get the files from the development tree?
> 
> I appreciate your guidance.
> 
> Chris

Just look on the download page. There is a link to intermediate builds.

Johannes


From antlr at jazillian.com  Thu Mar 13 08:00:40 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 11:00:40 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <ebc876d70803130120g62ca685cyc9f03f7769db9f41@mail.gmail.com>
References: <47D843FB.7030403@jazillian.com>
	<ebc876d70803130120g62ca685cyc9f03f7769db9f41@mail.gmail.com>
Message-ID: <47D94198.6040107@jazillian.com>

Thomas Brandon wrote:
> On Thu, Mar 13, 2008 at 7:58 AM, Andy Tripp <antlr at jazillian.com> wrote:
>   
>>  Jim Idle wrote:
>>     
>>> I think you miss the point. We can't 'know' that they did or didn't want a
>>> flat tree. Who is this someone that you are designating tasks like this to?
>>>       
>> Well, we can't "know' anything about what anyone wants, in general. The best
>>  we can do is make a best guess. And I think the best guess is that most
>> ANTLR users want a non-flat AST.
>>     
> Yes, most ANTLR users want a non-flat tree. But most (if not all) of
> these users do not want a parse tree. 
Agreed. But keep in mind that for many applications, simply walking the 
AST by hand is enough.
> The parse trees generated by
> ANTLR are not just like ASTs and cannot be used as such. Parse trees
> consist of standard AST nodes for all the actual language nodes and
> special parse tree nodes (of type ParseTree extending CommonTree) for
> the rule references. These parse tree nodes have a token type of 0.
> Thus you cannot use a tree parser against a parse tree and manually
> walking the tree would be complicated. Parse trees (as generated by
> ANTLR) are more of a debugging aid than a type of AST that
> automatically adds structure.
>   
...I think that in many cases processing the parse tree would be very 
simple:

if (!(ast instanceof ParseTree)) {
   doSomethingWith(ast);
} else {
   // ignore ParseTree nodes
}

> Perhaps you could add an output=CST (Concrete Syntax Tree, aka parse
> tree) option. But how would this work?
> Given a rule like:
> myop: modifier MYOP contents;
> what should our proposed CST constructor generate? What token types
> should rule references automatically generate? You could generate a
> token type named after the rule but producing ^(MYOP attributes MYOP
> contents) where the first MYOP is our auto-generated one mapping to no
> part of the input and the second is an actual token seems bizarre and
> likely to cause troubles. Maybe we could do ^(RULE_MYOP modifier MYOP
> contents) but do any of the users who don't want flat ASTs want that?
>   
No. Instead, how about saying "if there is exactly one terminal (i.e. 
lexer token or literal) in the rule,
put a ^ after that:

(attributes MYOP^ contents)
> And do they also want:
> modifier: PUBLIC | PROTECTED;
> to generate ^(RULE_MODIFIER PUBLIC)?
>   
Given that definition of modifiers, I'd want:

modifier: PUBLIC^ | PROTECTED^;

More realistically, they'll also have:
modifiers: modifier*;

...where I'd additionally want:
modifiers: ^(RULE_MODIFIERS modifier*)


> I'd imagine what they really want is not a CST but the AST ^(MYOP
> modifier content). With modifier having no dummy parent and contents
> having one.
>   
Right. So maybe these heuristics work:
* put a ^ after every literal.
* if we see more than one literal in a sequence (e.g. MYOP WHATEVER 
attributes contents), only the first one gets a ^
* a rule gets wrapped with ^(RULE_XXX ...) iff any of its alternatives 
is a non-literal

In that way, we get what we want:
modifier: PUBLIC^ | PROTECTED^;
myop: modifier MYOP^ contents;


> OK, so we don't want output=CST we want to auto-generate ASTs. But
> how? Given the above case we might think we could have a rule that if
> there's one token reference and other rule references we make the
> token the root. That's easy but what if we've got:
> method: keywords ID args catch;
> we probably don't want ^(ID keywords args catch) as that's very hard
> for our tree walker to distinguish from:
> field: keywords ID init;
> which makes ^(ID keywords init).
>   
Right, that's a problem. I guess I'd suggest making an AST node for 
*every* rule:
modifier: ^(RULE_MODIFIER (PUBLIC^ | PROTECTED^));
myop: ^(RULE_MYOP (modifier MYOP^ contents));

...but I guess maybe that puts us where we started - generating a full 
parse tree.
But even without solving this problem - go ahead and leave the tree as 
being hard to walk -
we're still ahead. The goal here is not to generate a "good" AST, but 
rather just produce something
that's better than nothing (i.e. a flat tree). So the newbie gets this 
tree, sees that it's hard to
distinguish the various cases where he's got an ID node, and starts 
reading up on how to build
an AST. He's better off here than the alternative: a blank stare at a 
flat ast.
> And what do we do with:
> method: keywords ID LPAREN args RPAREN CATCH catch;
> Here I'd probably want the AST ^(METHOD_CALL ID keywords args catch)
> but how can a tool know that.
>   
Here again, I think the "every rule gets its own AST" rule covers it. 
Yes, I suppose that
makes it a parse tree.
> OK, so we want to have some default rules and some syntax to disable
> automatic generation. 
Just use what's already there: if there are zero ^ characters, return a 
parse tree.
> But how often is this auto generation actually
> going to be used? I think you're very often going to want to disable
> any such automatic generation. OK, so any use of AST rebuild operators
> disables the automatic generation. 
Right.
> But what about your "modifiers:
> PUBLIC | PROTECTED;" rule? Adding "options { autoAST=false; }" to all
> such rules is going to be pretty annoying
No. No need for per-rule options, or even any new global options.
>  and "modifiers!: PUBLIC |
> PROTECTED;" isn't going to be very understandable for new users.
>   
Right, no need for that either.
> I think if you spend a bit of time actually thinking about how you'd
> manage to implement what you want you'll see it really doesn't work.
>   
Thanks for writing this up. Let me know if you think the replies I gave 
would work.
As I said, if they work, but only make things somewhat better, but not a 
completely usable AST, that's
still a win IMO. If they don't work, then how about simply say "if there 
are no ^'s, I'll just use
the existing code to get a parse tree and return that"?

Andy
> Tom.
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/f8474cd9/attachment.html 

From dave at badgers-in-foil.co.uk  Thu Mar 13 08:12:10 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Thu, 13 Mar 2008 15:12:10 +0000
Subject: [antlr-interest] starting with language translation
In-Reply-To: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
Message-ID: <20080313151208.GB18405@badgers-in-foil.co.uk>

On Thu, Mar 13, 2008 at 12:48:23PM +0100, benzo wrote:
> 5. what is your personal favorite way doing that? stringtemplate? are
> there simpler methods?

For tasks outside of ANTLR-based ASTs, I actually created a specific
library for generating ActionScript 3 code,

  http://www.badgers-in-foil.co.uk/projects/metaas/

If you're committed to using ANTLR for the whole job (which with ANTLR's
new support for tree-to-tree transformations is not unrealistic) then
using StringTemplate is a pretty good choice too, due to better
integration with ANTLR at the grammar definition level.


ta,
dave

-- 
http://david.holroyd.me.uk/

From antlr at jazillian.com  Thu Mar 13 08:14:23 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 11:14:23 -0400
Subject: [antlr-interest] starting with language translation
In-Reply-To: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
Message-ID: <47D944CF.9040505@jazillian.com>

Benzo,

Yes, those 4 steps are fine. You'll use ANTLR to lex and parse your java 
input,
the data structure you'll use is called an AST (Abstract Syntax Tree).

I would start with the latest V2 version of antlr (2.7.7 I think it is) 
rather than V3.
Run antlr on the java.g file that comes with antlr.
Antlr will generate the lexer and parser as Java source files which you 
then compile.
Then call the method on your parser that returns the AST and print out 
the AST
and study its structure and figure out how that maps to actionscript.

If the actionscript is very similar, you may be able to simply take some 
code that
pretty-prints the AST (prints it as normal-looking Java code, as opposed 
to a tree
thing), and modify that. This would be easier than doing fancy 
transformations on the AST.
There are at least two ways to print the AST. See
http://www.antlr2.org/article/1170602723163/treewalkers.html for a 
comparison.
Or skip that whole document and just try either the treewalker approach:
http://jazillian.com/articles/java.tree.g
...or the "by hand" approach:
http://jazillian.com/articles/JavaEmitter.java

Someone else did something similar with translating Java to Python, and 
he ended up
being able to just alter the JavaEmitter to print out python instead of 
Java.

Oh, and one more thing...buy and read the ANTLR book!

Good Luck!
Andy



benzo wrote:
> hi
> this is my first post - thus "hello world!"
>
> I'm interested in antlr since a long time and I finally like to make
> an attempt with it.
> What I'd like to achieve is to write a translator in form of "java to
> actionscript".
>
> >From what I understand there are basically 4 layers/modules/steps involved:
> 1. parse of the source language (java)
> 2. persist/serialize the structure
> 4. apply the translation rules
> 5. generate the  the target language (actionscript)
>
> some questions to these points:
>
> 1. are there any existing java language parser (java grammar), maybe
> even with some (basic) documentation (tutorials, etc.)
> 2. what do you suggest: writing the structure down to xml? persist in memory?
> 4. are there any good examples for doing that the right (clean) way?
> 5. what is your personal favorite way doing that? stringtemplate? are
> there simpler methods?
>
> thanks in advance for your answers.
>
> //benzo
>
>   


From antlr at jazillian.com  Thu Mar 13 08:31:06 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 11:31:06 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAwP3hDZr2OEm	CEDFh1CO0dwEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAwP3hDZr2OEm	CEDFh1CO0dwEAAAAA@10.0.1.201>
Message-ID: <47D948BA.1020302@jazillian.com>

Jim Idle wrote:
> [snip snide remarks about parse trees and ASTs]
> ...Good Grief
Yea, I probably need to take an anger management class.

I'm pretty sure it was the lack of an answer to "what good is a flat 
AST?" that set me off.
So much so that I've lowered my estimate of its usefulness from 1% down 
to 0%.

The "Trust me, I translate from one non-trivial language to another 
without needing an AST,
but I wont give any details at all" thread from someone else is really 
bugging me, too.

*whooosh* *whooosh*...deep breaths...*whoosh*

Andy :)

From jimi at temporal-wave.com  Thu Mar 13 09:55:16 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 09:55:16 -0700
Subject: [antlr-interest] starting with language translation
In-Reply-To: <47D944CF.9040505@jazillian.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAlInzfTWJeU2
	SYZA8QJt7BAEAAAAA@10.0.1.201>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andy Tripp
> Sent: Thursday, March 13, 2008 8:14 AM
> To: benzo
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] starting with language translation
> 
> Benzo,
> 
> Yes, those 4 steps are fine. You'll use ANTLR to lex and parse your
> java
> input,
> the data structure you'll use is called an AST (Abstract Syntax Tree).
> 
> I would start with the latest V2 version of antlr (2.7.7 I think it is)
> rather than V3.

What? He is just starting out and is going to find it more difficult with 2.7.7 than 3.1 - I would not advise this myself.

> 
> Oh, and one more thing...buy and read the ANTLR book!
> 

But you just told him to use Version 2.7.7?




From jimi at temporal-wave.com  Thu Mar 13 10:06:24 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 10:06:24 -0700
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <47D948BA.1020302@jazillian.com>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAKQ3spSk42ka
	wb9vqBtMfFwEAAAAA@10.0.1.201>



> -----Original Message-----
> From: Andy Tripp [mailto:antlr at jazillian.com]
> Sent: Thursday, March 13, 2008 8:31 AM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] LPG WAS Retaining comments
> 
> Jim Idle wrote:
> > [snip snide remarks about parse trees and ASTs]
> > ...Good Grief
> Yea, I probably need to take an anger management class.
> 
> I'm pretty sure it was the lack of an answer to "what good is a flat
> AST?" that set me off.
> So much so that I've lowered my estimate of its usefulness from 1% down
> to 0%.

Nobody said that there was any such use. I could make one up, but that would be pretty pointless. Oh well, suppose that your parser just works with the lexer to get some intermediate token form, but the language is such that you can't really infer any structure at that point as you need multiple passes to work anything out at all. Then your parser might build symbols (or just leave it to an AST walk), then pass the unshaped tree along for actual shaping now that it knows something about

But, as I said a bunch of times, whether a flat tree is any good or not is utterly and completely not the point. It is just that any auto generated structure probably isn't any better. The point is that spending a lot of effort to try and produce a tree automagically makes no sense, as it will undoubtedly be worth very little to anyone. The parse tree is only useful if you really want to do something with parser tree, which more than likely is just display it, so there is no real point making that the default tree. Basically as soon as you want to actually do something with the tree beyond look at it in ANTLRWorks, which gives you the parser tree anyway, you will realize that you need to formulate you own structure. Hence, a default structure isn't really of any use to anyone, not even people new to the idea. Most people will know what 'tree' means, but then need to work out what parser tree vs AST means and will soon be on their way to using it effectively.

> 
> The "Trust me, I translate from one non-trivial language to another
> without needing an AST,
> but I wont give any details at all" thread from someone else is really
> bugging me, too.

Well, all the poster was saying (I think) is that he was able to write a translator by just using actions in the parser. I have done the same thing in the past. However, what Loring was trying to say (and most would agree I think), is that as soon as you get to a non-trivial case, while you can probably find a way to do without, you will find it better on many levels to construct an AST. I don't think that that is in any way a contentious statement.

Anyway, I have spent enough time on this and probably bored the pants off everyone, so I think I will fix the reported 3.1 C runtime bugs instead ;-)

Jim





From snyder at t-vec.com  Thu Mar 13 10:12:37 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Thu, 13 Mar 2008 13:12:37 -0400
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime
	files
Message-ID: <005301c8852d$70419d70$265d080a@Gizmo>

I'm trying to compile my C output in CPP and I get this error

 

libantlr3c-3.1.0b1\include\antlr3debugeventlistener.h(42) : error C2146:
syntax error : missing ';' before identifier 'socket'

 

which corresponds to this:

 

antlr3debugeventlistener.h

/// The socket structure we receive after a successful accept on the
serverSocket

///

SOCKET                        socket;

 

I looked for the SOCKET definition and didn't find one being used in my
configuration. I did find a UNIX definition in antlr3defs.h:

 

// SOCKET not defined on Unix

// 

typedef     int                     SOCKET;

 

but it is not even reached because preprocessor ANTLR3_WINDOWS is defined 

 

Should I be including a windows socket header?

 

I'm in windows XP using VS2005 and VC++ 2005.

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/a2d536bb/attachment.html 

From darien.hager at etelos-inc.com  Thu Mar 13 10:18:34 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Thu, 13 Mar 2008 10:18:34 -0700
Subject: [antlr-interest] dynamic token stream
In-Reply-To: <93BDF860-86DE-4872-B4BD-75C356C916E9@cs.usfca.edu>
References: <1A03CD15-422F-4566-8335-C68EEEE3083F@cs.usfca.edu>
	<c8c997f40803111239v59e4d99r7dab4d526719faf2@mail.gmail.com>
	<93BDF860-86DE-4872-B4BD-75C356C916E9@cs.usfca.edu>
Message-ID: <c8c997f40803131018k17e0ee0dse2207ba4574e3a3e@mail.gmail.com>

It might be interesting to see whether the ANTLR stream stuff can be made to
use Java's NIO classes, like ReadableByteChannel or CharBuffer.

Of course, I'm tossing this out as a purely selfish
probably-no-use-to-anyone-else
item. I had considered using ANTLR for a simple network protocol ("testable
with telnet"), but I built the server  for nonblocking IO.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/61c0e65b/attachment.html 

From kenneth.domino at domemtech.com  Thu Mar 13 10:20:14 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Thu, 13 Mar 2008 13:20:14 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <47D94198.6040107@jazillian.com>
References: <47D843FB.7030403@jazillian.com><ebc876d70803130120g62ca685cyc9f03f7769db9f41@mail.gmail.com>
	<47D94198.6040107@jazillian.com>
Message-ID: <108D751E3BA1446AA40B19EF125411BE@pc2008>

> No. Instead, how about saying "if there is exactly one terminal (i.e. 
> lexer token or literal) in the rule,
> put a ^ after that:
>
> (attributes MYOP^ contents)

Strictly speaking, this syntax creates an AST, not a parse tree.
A parse tree has internal nodes as corresponding
to the non-terminals in the grammar. Children of an internal
node are the RHS symbols of the production used in the parse
(see section 2.2 of Aho, Sethi, Ullman).

Really, sometimes generating a parse tree is useful.  In the past, for
a compiler construction course, I made students modify a
Yacc-generated parser to construct a parse tree for a subset
programming language (e.g., Pascal, Turing, ...), then generate code
from that parse tree. Yes, the parse tree. In a structured editor I
once wrote, I stored the parse tree as an internal data structure,
then performed a tree walk to recreate the text with reformatting.  If
you want to write an incremental parser, you probably have to have a
parse tree to know where to pick up the parse.  I remember seeing this
in some incremental parsing papers.

FYI, if you really want a parse tree from ANTLR, then try this hack,
and I really mean hack!  Write a script, in perl, or maybe even an
ANTLR grammar translator that inserts after the LHS
symbol of a parser nonterminal rule (i.e., in the parlance of ANTLR
a RULE_REF but not a TOKEN_REF), but before a ":" the
following code:

@init {
 CommonTree realroot = (CommonTree)adaptor.create(-999, "nonterminal");
}
@after {
 retval.tree = (CommonTree)adaptor.becomeRoot(realroot, retval.tree);
}

You'd want to substitute the name of the nonterminal at
the appropriate place in the above code.  You'd also want to
add an options block: "options { output=AST; ASTLabelType=CommonTree;}".
It seems to work fine using ANTLRWorks1.1.7, with the AST
almost identical to the parse tree except for one extra node at the root.

Maybe there is a better way to do this. And, probably it is fragile.
But in lieu of an "output=CST" option, or something else that I don't know
about (because I'm not that familiar with ANTLR), this seems to work.

Ken Domino


From antlr at jazillian.com  Thu Mar 13 10:29:03 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 13:29:03 -0400
Subject: [antlr-interest] starting with language translation
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAlInzfTWJeU2	SYZA8QJt7BAEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAlInzfTWJeU2	SYZA8QJt7BAEAAAAA@10.0.1.201>
Message-ID: <47D9645F.3090706@jazillian.com>

Jim Idle wrote:
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Andy Tripp
>> Sent: Thursday, March 13, 2008 8:14 AM
>> To: benzo
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] starting with language translation
>>
>> Benzo,
>>
>> Yes, those 4 steps are fine. You'll use ANTLR to lex and parse your
>> java
>> input,
>> the data structure you'll use is called an AST (Abstract Syntax Tree).
>>
>> I would start with the latest V2 version of antlr (2.7.7 I think it is)
>> rather than V3.
>>     
>
> What? He is just starting out and is going to find it more difficult with 2.7.7 than 3.1 - I would not advise this myself.
>   
Oops, nevermind - start with V3. I was a little worried that the 
AST-building part of V3 wasn't
working well yet or that the java.g that comes with it didn't build an 
AST. I'm sure that's
all fine now, so start with V3.

Sorry about that.
>   
>> Oh, and one more thing...buy and read the ANTLR book!
>>
>>     
>
> But you just told him to use Version 2.7.7?
>
>
>
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/7e3acdf3/attachment.html 

From jimi at temporal-wave.com  Thu Mar 13 10:44:41 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 10:44:41 -0700
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime
	files
In-Reply-To: <005301c8852d$70419d70$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAui0Eeg1Jp0C
	Fe6v/rFoUBgEAAAAA@10.0.1.201>

Hmm, how are you compiling it? I have no come across this and I just 10 seconds ago compiled generated code as C++ to fix a casting issue that someone else reported. If you have all the correct headers and include paths set up, then you should find in winsock.h:

 

typedef UINT_PTR        SOCKET;

 

Right clicking on the SOCKET declaration in antlr3debugeventlistener.h should take you straight to it (once you have compiled and have the browse info etc). So, if it doesn't then there is something amiss with your build environment, or you have perhaps #defined something before including the antlr3.h header, or in the project etc, which is causing the winsock includes to not include themselves.

 

Including antlr3.h should include everything for you regardless of the operating system/compiler, so it would be nice to get to the bottom of this so we can solve it for others in advance ;-) This error usually means that you are including the wrong headers. Did you load the .Net SDK or otherwise change the default header locations for VS 2005? This kind of error comes up when you install the wrong platform SDKs or out of date ones, but after VS2005 these types of problems seemed to go away because the header include order was fixed. 

 

Finally, you have installed VS2005 SP 1 right?

 

Jim

 

 

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 10:13 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime files

 

I'm trying to compile my C output in CPP and I get this error

 

libantlr3c-3.1.0b1\include\antlr3debugeventlistener.h(42) : error C2146: syntax error : missing ';' before identifier 'socket'

 

which corresponds to this:

 

antlr3debugeventlistener.h

/// The socket structure we receive after a successful accept on the serverSocket

///

SOCKET                        socket;

 

I looked for the SOCKET definition and didn't find one being used in my configuration. I did find a UNIX definition in antlr3defs.h:

 

// SOCKET not defined on Unix

// 

typedef     int                     SOCKET;

 

but it is not even reached because preprocessor ANTLR3_WINDOWS is defined 

 

Should I be including a windows socket header?

 

I'm in windows XP using VS2005 and VC++ 2005.

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/3019a264/attachment-0001.html 

From darien.hager at etelos-inc.com  Thu Mar 13 10:47:10 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Thu, 13 Mar 2008 10:47:10 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <20080313073540.C949A11EBBB@www.antlr.org>
References: <47D843FB.7030403@jazillian.com>
	<20080313073540.C949A11EBBB@www.antlr.org>
Message-ID: <c8c997f40803131047r711d57dal79daa4be1a1e5fb1@mail.gmail.com>

On 3/13/08, Gavin Lambert <antlr at mirality.co.nz> wrote:
>
> I had a fairly trivial DSL to parse and I wanted to throw it into a
> codegen routine afterwards.  I noticed that there was this "AST" option that
> said it would output a tree, which I thought would be useful.  So I switched
> it on, and was puzzled that I didn't get a tree out of it.  (I was basically
> expecting that by default every time I called a subrule it would drop a
> level down in the tree.)
>

I had the same experience. However, the architectual impliciations
behind action code creeped me out even more, so I kept looking :P


> However I can see the other side of this too.  If ANTLR did default to
> dropping a tree level for each subrule call, how would you go ahout telling
> it to not do that?
>

Could this be a tool-level solution? Parse the grammar
file, and automatically insert basic AST-rewrite rules to achieve the
same effect? The benefit of this is that it involves no additional
magic on ANTLR's part, and would be easier to customize if it turns
out that the grammar rules are best arranged in one way but the AST is best
arranged in another.


-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/eaee5fc3/attachment.html 

From jimi at temporal-wave.com  Thu Mar 13 10:50:46 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 10:50:46 -0700
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime
	files
In-Reply-To: <005301c8852d$70419d70$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAIlbgJeh2MUm
	G9LSee7/XFAEAAAAA@10.0.1.201>

Also,

 

Try #include "Winsock_2.h" as well, though you should not really need to include this I think. Perhaps there is some configuration you can end up with whereby you do need this. If that works for you, I will add it to the include files perhaps.

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 10:13 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime files

 

I'm trying to compile my C output in CPP and I get this error

 

libantlr3c-3.1.0b1\include\antlr3debugeventlistener.h(42) : error C2146: syntax error : missing ';' before identifier 'socket'

 

which corresponds to this:

 

antlr3debugeventlistener.h

/// The socket structure we receive after a successful accept on the serverSocket

///

SOCKET                        socket;

 

I looked for the SOCKET definition and didn't find one being used in my configuration. I did find a UNIX definition in antlr3defs.h:

 

// SOCKET not defined on Unix

// 

typedef     int                     SOCKET;

 

but it is not even reached because preprocessor ANTLR3_WINDOWS is defined 

 

Should I be including a windows socket header?

 

I'm in windows XP using VS2005 and VC++ 2005.

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/b8cee569/attachment.html 

From jimi at temporal-wave.com  Thu Mar 13 10:54:26 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 10:54:26 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <108D751E3BA1446AA40B19EF125411BE@pc2008>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA8dCgpUT2c0m
	vYUdwAoB03QEAAAAA@10.0.1.201>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kenneth Domino


> 
> FYI, if you really want a parse tree from ANTLR, then try this hack,
> and I really mean hack!  

Or see:

"How can I build a parser tree and not ASTs?" in the FAQs/Wiki:

http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760

:-)

Jim







From siemsen at ucar.edu  Thu Mar 13 10:54:38 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Thu, 13 Mar 2008 11:54:38 -0600
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAKQ3spSk42ka
	wb9vqBtMfFwEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAKQ3spSk42ka
	wb9vqBtMfFwEAAAAA@10.0.1.201>
Message-ID: <A4006033-859C-4610-8D28-15BC7912789E@ucar.edu>


On Mar 13, 2008, at 11:06 AM, Jim Idle wrote:

>> Andy Tripp wrote:
>> The "Trust me, I translate from one non-trivial language to  
>> another without needing an AST,
>> but I wont give any details at all" thread from someone else is  
>> really bugging me, too.
>
> Well, all the poster was saying (I think) is that he was able to  
> write a translator by just using actions in the parser. I have done  
> the same thing in the past. However, what Loring was trying to say  
> (and most would agree I think), is that as soon as you get to a non- 
> trivial case, while you can probably find a way to do without, you  
> will find it better on many levels to construct an AST. I don't  
> think that that is in any way a contentious statement.

That poster was me.  To give Andy some details, my translator reads  
~1250 files written in an abstract language called MOF and writes  
~1250 Java files.  MOF is Managed Object Format, a language used to  
define the Common Information Model, which is a object-oriented  
standard for representing computers and networks.  The Common  
Information Model is defined by the Distributed Management Task  
Force.  The MOF files are available at http://www.dmtf.org/standards/ 
cim/cim_schema_v2171/.  The DMTF wanted to define an object-oriented  
model while staying language-agnostic, so they use MOF.  MOF isn't  
wildly different than Java, hence my translator qualifies as  
"trivial" as Loring defined trivial:

"Trivial translations--A source to B source for languages in which  
language B can straightforwardly express the paradigms of language A-- 
can be done without intermediate analysis.  Even there, an AST is  
helpful and aids maintainability."

Perhaps the negative connotation of the word "trivial" has made this  
into more of an argument than it's worth.  At first I assumed that  
"trivial" meant "small" or "for teaching purposes" or something. My  
translator seems nontrivial to me.  The grammar has ~900 lines, yet  
no AST.  I built it by reading the ANTLR book, learning as I went,  
and didn't encounter a need for an AST.  Others might have a similar  
experience, so I posted to learn why ASTs should be used.  As a  
result of this thread, I now think an AST might improve my translator  
somewhat.  I plan to add one to get separation-of-concerns and to  
perhaps discover the "helpful and aids maintainability" benefits that  
Loring mentioned.

So Andy, I hope you aren't still bugged by this, but I remain  
unconvinced that every useful (nontrivial) translation needs an AST.

-- Pete







-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/aec09438/attachment-0001.html 

From antlr at jazillian.com  Thu Mar 13 11:22:48 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 14:22:48 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAKQ3spSk42ka	wb9vqBtMfFwEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAKQ3spSk42ka	wb9vqBtMfFwEAAAAA@10.0.1.201>
Message-ID: <47D970F8.6040300@jazillian.com>

Jim Idle wrote:
>   
>> -----Original Message-----
>> From: Andy Tripp [mailto:antlr at jazillian.com]
>> Sent: Thursday, March 13, 2008 8:31 AM
>> To: Jim Idle
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] LPG WAS Retaining comments
>>
>> Jim Idle wrote:
>>     
>>> [snip snide remarks about parse trees and ASTs]
>>> ...Good Grief
>>>       
>> Yea, I probably need to take an anger management class.
>>
>> I'm pretty sure it was the lack of an answer to "what good is a flat
>> AST?" that set me off.
>> So much so that I've lowered my estimate of its usefulness from 1% down
>> to 0%.
>>     
>
> Nobody said that there was any such use. 
You said: We can't 'know' that they did or didn't want a flat tree.
That, to me, implies that you're saying there's a case where someone 
might want a flat tree.

You said: but  I think it [a warning message about a flat tree] would 
actually annoy 100% of the time.
Again, that sounds to me like you think there is some case where a flat 
tree is what the person wanted.

You said: I think it [the case of a flat tree being produced] is an 
arbitrary example with no real need.
Given that this arose from someone who really did get a flat tree and 
was confused by it, and you saying
this case is "arbitrary" and there's no real need for a message, seems 
to imply (to me at least) that there's
some case in which a flat tree (and no warning) is reasonable.

You said: I see a lot of suggestions for warnings and errors and so on 
that surely seem reasonable
to the requester, but in fact are specific to their particular 
situation. If you start
spitting out warnings saying "You don't have any ^ characters", all you 
are going to do
is annoy those who know about that,

If you agree that there's no real reason to want a flat ast, why would a 
warning message by "specific to their particular situation"?
There is no "particular situation" where the flat AST is OK.
> I could make one up, but that would be pretty pointless. Oh well, suppose that your parser just works with the lexer to get some intermediate token form, but the language is such that you can't really infer any structure at that point as you need multiple passes to work anything out at all. Then your parser might build symbols (or just leave it to an AST walk), then pass the unshaped tree along for actual shaping now that it knows something about
>   
Yea, I know we can come up with contrived examples, and I agree that's 
irrelevent.
> But, as I said a bunch of times, whether a flat tree is any good or not is utterly and completely not the point. It is just that any auto generated structure probably isn't any better. The point is that spending a lot of effort 
Not necessarily a lot of effort. To keep a flag that indicates whether 
any ^ exists, and then call the existing
code that produces a parse tree in that case, should be easy. Though, I 
know no one should ever say that it would
be easy for someone else. If that's not trivial, just add a check just 
before returning an AST, and if it's flat,
return a parse tree instead. That could easily be done without any real 
changes to the depths of ANTLR.
> to try and produce a tree automagically makes no sense, as it will undoubtedly be worth very little to anyone. 
This original poster has just said he was confused because he didn't get 
a tree back. I know I would be, too,
and one other poster chimed in that he's been there. And we have this 
other paper here where the authors of the
paper and a whole tool actually built this whole tool without even 
acknowledging that it's just a parse tree!

> The parse tree is only useful if you really want to do something with parser tree, which more than likely is just display it, so there is no real point making that the default tree. 
That's coming from your point of view. But the newbie gets a lot out of 
it. He now *sees* that his
parser is working correctly, and sees, probably for the first time, the 
true structure of his grammar,
and the true structure of some parsed input.  That's huge to a newbie.

I've been quite surprised several times when I see that Terence build a 
parser that produced no tree.
"How does he even know it's doing anything reasonable?" I wonder. "How 
does he know that
there's not some bug, and the entire lexer is matching the whole input 
as a single word, and the parser
is completely wrong, but perfectly happy to parse that single token?". 
The answer  (besides that
he's good enough not to make such an error) might be that he glances at 
the parse tree or the generated
code or something. But for the person who has just built his first 
grammar (or for someone lazy like me),
it would be really nice to see something "tree-like" from the parser to 
see that it's working.

Yes, after this discussion, I'll just look at the parse tree, but I do 
think any newbie should be able to
see some sort of tree output from his parser to tell that it's working, 
before he's gotten into AST-building.
Those guys with this LPG paper are thinking the same way apparently.
> Basically as soon as you want to actually do something with the tree beyond look at it in ANTLRWorks, which gives you the parser tree anyway, 
Not everyone is going to use ANTLRworks. I found it to get in the way 
more than it helped.
> you will realize that you need to formulate you own structure. Hence, a default structure isn't really of any use to anyone, not even people new to the idea. 
I don't agree with your logic. If every house builder will eventually 
have to learn how to build a roof, does that
mean using a tarp in the meantime is of no use to him? The point of the 
tarp is to help him finish the thing he's
working on until he gets to the roof.  And a parse-tree can help a 
person to debug his parser first, before he gets
to the AST-building part.
> Most people will know what 'tree' means, but then need to work out what parser tree vs AST means and will soon be on their way to using it effectively.
>   
I agree. And I think in the end, they'll end up with "The parse tree is 
really an AST that's just got too much stuff in it".
Now you might say that's technically wrong. If so, fine, replace "AST" 
by just "tree" to make it right.
And so maybe they should start at the same place they end up: give them 
a tree with "far too much" rather than
"far too little".
>   
>> The "Trust me, I translate from one non-trivial language to another
>> without needing an AST,
>> but I wont give any details at all" thread from someone else is really
>> bugging me, too.
>>     
>
> Well, all the poster was saying (I think) is that he was able to write a translator by just using actions in the parser. I have done the same thing in the past. However, what Loring was trying to say (and most would agree I think), is that as soon as you get to a non-trivial case, while you can probably find a way to do without, you will find it better on many levels to construct an AST. I don't think that that is in any way a contentious statement.
>   
But it is contentious...I'm making it contentious by saying essentially 
"no, I don't think that what you're saying is possible - please give me
some details so we can all understand".

Just to do that again, consider keywords. If someone is saying they can 
translate language A to B, what if language
B has a keyword that's not in language A? You'll need to check for 
variables in language A who's name is a keyword in B
(say a variable named "null" when going from C to Java). And then you'll 
need to rename it, being sure not to use a
name that's already in use (requiring a symbol table). And to rename it, 
you'll need to know which references go with
which declarations (i.e. we may have more than one variable named 
"null"), and to do that, you'll need to know all the
scoping rules (i.e. this "null" variable declaration - how far does it 
go? Just this file? This namespace/package? Perhaps
a certain set of files as defined by some #include construct?).

I'm sure there must be languages where these issues don't come up, but I 
can't imagine how they could be non-trivial.

Naturally, if no one is even willing to name the two languages, that 
makes me really wonder what's going on.
> Anyway, I have spent enough time on this and probably bored the pants off everyone, so I think I will fix the reported 3.1 C runtime bugs instead ;-)
>   
Yea, sorry to bog you down from real work.
> Jim
>
>
>
>
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/ba4ae8c9/attachment.html 

From antlr at jazillian.com  Thu Mar 13 11:38:05 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 14:38:05 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <c8c997f40803131047r711d57dal79daa4be1a1e5fb1@mail.gmail.com>
References: <47D843FB.7030403@jazillian.com>	
	<20080313073540.C949A11EBBB@www.antlr.org>
	<c8c997f40803131047r711d57dal79daa4be1a1e5fb1@mail.gmail.com>
Message-ID: <47D9748D.7060901@jazillian.com>

Darien Hager wrote:
>
>
> On 3/13/08, *Gavin Lambert* <antlr at mirality.co.nz 
> <mailto:antlr at mirality.co.nz>> wrote:
>
>     I had a fairly trivial DSL to parse and I wanted to throw it into
>     a codegen routine afterwards.  I noticed that there was this "AST"
>     option that said it would output a tree, which I thought would be
>     useful.  So I switched it on, and was puzzled that I didn't get a
>     tree out of it.  (I was basically expecting that by default every
>     time I called a subrule it would drop a level down in the tree.) 
>
>
> I had the same experience. However, the architectual impliciations behind action code creeped me out even more, so I kept looking :P
I started with ANTLR by using an existing (C) grammar, not my own from 
scratch.
In my case, it wasn't until I started wanting changes in the AST that I 
went to figure out
how the AST was being built. My first reaction was probably "wait, there 
are two things going on here, one is
to parse the input and the other is to build a tree...shouldn't those be 
two distinct steps? And then the realization that
building the AST involved little more than throwing in ^ and ! into the 
grammar. And finally, the realization that
there's no other reasonable way to do it.
>  
>
>
>     However I can see the other side of this too.  If ANTLR did
>     default to dropping a tree level for each subrule call, how would
>     you go ahout telling it to not do that?
>
>
> Could this be a tool-level solution? Parse the grammar 
> file, and automatically insert basic AST-rewrite rules to achieve the same effect? The benefit of this is that it involves no additional magic on ANTLR's part, and would be easier to customize if it turns  
> out that the grammar rules are best arranged in one way but the AST is 
> best arranged in another.
That would be an interesting project.
My guess is that you could use various heuristics to try to figure out 
what a reasonable AST might be.
But that approach of using heuristics and producing less-than-perfect 
output doesn't go over well with the compiler crowd.
>
>
> -- 
> Darien Hager
> Developer
> Etelos, Inc.
> darien at etelos.com <mailto:darien at etelos.com>
>
> http://www.etelos.com
> "Revolutionizing the way applications are developed, distributed and 
> consumed."
>
> This e-mail message, including attachments, may contain confidential 
> information for the sole use of the intended recipient(s). If you are 
> not the intended recipient, then this is notice that any use, 
> disclosure, dissemination, distribution or copying is strictly 
> prohibited. If you have received this message in error please contact 
> the sender by reply mail and destroy all copies of the original message.
> This e-mail message, including attachments, may contain confidential information 
> for the sole use of the intended recipient(s). If you are not the intended recipient,
> then this is notice that any use, disclosure, dissemination, distribution or copying is 
> strictly prohibited.  If you have received this message in error please contact the 
> sender by reply mail and destroy all copies of the original message.
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/8e801583/attachment-0001.html 

From snyder at t-vec.com  Thu Mar 13 11:37:29 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Thu, 13 Mar 2008 14:37:29 -0400
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime
	files
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAIlbgJeh2MUmG9LSee7/XFAEAAAAA@10.0.1.201>
References: <005301c8852d$70419d70$265d080a@Gizmo>
	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAIlbgJeh2MUmG9LSee7/XFAEAAAAA@10.0.1.201>
Message-ID: <008201c88539$4df856d0$265d080a@Gizmo>

Hello Jim,

 

Winsock2.h also works.

 

Another minor thing. I get this warning:

 

libantlr3c-3.1.0b1\include\antlr3defs.h(75) : warning C4005:
'_CRT_SECURE_NO_DEPRECATE' : macro redefinition

 

could you wrap the #define in a #ifndef so there is no conflict with other
applications defining that macro.

 

Thanks,

Chris

 

  _____  

From: Jim Idle [mailto:jimi at temporal-wave.com] 
Sent: Thursday, March 13, 2008 1:51 PM
To: snyder at t-vec.com; antlr-interest at antlr.org
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime
files

 

Also,

 

Try #include "Winsock_2.h" as well, though you should not really need to
include this I think. Perhaps there is some configuration you can end up
with whereby you do need this. If that works for you, I will add it to the
include files perhaps.

 

Jim

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 10:13 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime
files

 

I'm trying to compile my C output in CPP and I get this error

 

libantlr3c-3.1.0b1\include\antlr3debugeventlistener.h(42) : error C2146:
syntax error : missing ';' before identifier 'socket'

 

which corresponds to this:

 

antlr3debugeventlistener.h

/// The socket structure we receive after a successful accept on the
serverSocket

///

SOCKET                        socket;

 

I looked for the SOCKET definition and didn't find one being used in my
configuration. I did find a UNIX definition in antlr3defs.h:

 

// SOCKET not defined on Unix

// 

typedef     int                     SOCKET;

 

but it is not even reached because preprocessor ANTLR3_WINDOWS is defined 

 

Should I be including a windows socket header?

 

I'm in windows XP using VS2005 and VC++ 2005.

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/a1ab11ab/attachment.html 

From tbrandonau at gmail.com  Thu Mar 13 11:40:45 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Fri, 14 Mar 2008 05:40:45 +1100
Subject: [antlr-interest] postmortem
In-Reply-To: <47D94198.6040107@jazillian.com>
References: <47D843FB.7030403@jazillian.com>
	<ebc876d70803130120g62ca685cyc9f03f7769db9f41@mail.gmail.com>
	<47D94198.6040107@jazillian.com>
Message-ID: <ebc876d70803131140s10f54308madeab78d8a65f02b@mail.gmail.com>

On Fri, Mar 14, 2008 at 2:00 AM, Andy Tripp <antlr at jazillian.com> wrote:
>
> > Thomas Brandon wrote:
>  On Thu, Mar 13, 2008 at 7:58 AM, Andy Tripp <antlr at jazillian.com> wrote:
> >  Yes, most ANTLR users want a non-flat tree. But most (if not all) of
> > these users do not want a parse tree.
>  Agreed. But keep in mind that for many applications, simply walking the AST
> by hand is enough.
I'm familiar with your views so I tried to though it's a rather alien
approach to me so forgive any oversights..
>
> >  The parse trees generated by
> > ANTLR are not just like ASTs and cannot be used as such. Parse trees
> > consist of standard AST nodes for all the actual language nodes and
> > special parse tree nodes (of type ParseTree extending CommonTree) for
> > the rule references. These parse tree nodes have a token type of 0.
> > Thus you cannot use a tree parser against a parse tree and manually
> > walking the tree would be complicated. Parse trees (as generated by
> > ANTLR) are more of a debugging aid than a type of AST that
> > automatically adds structure.
>
>  ...I think that in many cases processing the parse tree would be very
> simple:
>
>  if (!(ast instanceof ParseTree)) {
>     doSomethingWith(ast);
>  } else {
>     // ignore ParseTree nodes
>  }
>
Well, that's not going to process the children of parse trees which is
presumably not what you want. And if you're skipping them then what
use are they exactly?
But my point was that with no token type you can switch on token
types. So you'd have to switch on the string name, which gets rather
nasty to maintain, and means changing a rule name will break your tree
walker but give no compile time errors. Not especially easy or
desirable.

<SNIP>A fair bit of going round in circles with proposed heuristics</SNIP>

>  ...but I guess maybe that puts us where we started - generating a full
> parse tree.
>  But even without solving this problem - go ahead and leave the tree as
> being hard to walk -
>  we're still ahead. The goal here is not to generate a "good" AST, but
> rather just produce something
>  that's better than nothing (i.e. a flat tree). So the newbie gets this
> tree, sees that it's hard to
>  distinguish the various cases where he's got an ID node, and starts reading
> up on how to build
>  an AST. He's better off here than the alternative: a blank stare at a flat
> ast.
<SNIP>more circles</SNIP>
>  Thanks for writing this up. Let me know if you think the replies I gave
> would work.
>  As I said, if they work, but only make things somewhat better, but not a
> completely usable AST, that's
>  still a win IMO. If they don't work, then how about simply say "if there
> are no ^'s, I'll just use
>  the existing code to get a parse tree and return that"?
>
>  Andy
(Can you please stop HTML posting or at least use a client with decent
quoting in it's HTML. Gmail can't handle your quoting and I've found
it's generally pretty good at that.)
I could go through your various proposed rules and point out the case
where they produce a structure I can't see anyone wanting but I gather
you admit that point.

The detect ^ and switch off automatic rules doesn't work because the
user may want a flat AST.

And I don't accept your view that producing a bad AST is better than
producing a flat AST. Is anyone going to use a bad AST? I can't see
why they would and don't think they should. Is it easy to allow such
auto-generation to be mixed with explicit construction to generate a
good AST? I don't think so. At best you end up with a grammar that's
messier and harder to understand than if you'd just used manual
construction. So you've spent all the time developing a system that no
one is ever going to use for more than the first grammar run that's
only purpose is to avoid giving someone a flat AST. And if they don't
look at enough docs\examples first and, heaven forbid, get a flat AST
they either go to the docs and quickly recognise their flawed
expectations of what output=AST will do or send a message to the list
that requires all of two or three sentences to answer. How is this in
anyway a good use of time or a justifiable addition of code
complexity?

Tom.

From shro8822 at vandals.uidaho.edu  Thu Mar 13 11:48:29 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Thu, 13 Mar 2008 10:48:29 -0800
Subject: [antlr-interest] postmortem
In-Reply-To: <d3992d900803121926r1809f46ck62a09120f1b06055@mail.gmail.com>
References: <BAYC1-PASMTP12AF93437EBB4CD1384F20F5080@CEZ.ICE>
	<d3992d900803121926r1809f46ck62a09120f1b06055@mail.gmail.com>
Message-ID: <47D976FD.6080507@vandals.uidaho.edu>

Richard Clark wrote:

>
>I took what you wrote and used it for the basis of multiple changes to
>http://www.antlr.org/wiki/display/ANTLR3/Five+minute+introduction+to+ANTLR+3
>
>In particular, see "What exactly does ANTLR 3 do?" at the top of the
>page and the last paragraph of "Your five minutes are up!" at the
>bottom.
>
>There's still room for improvement for the first-time somebody picks
>up ANTLR, but I wanted to get something into place without making
>drastic changes to the Wiki. A lot of people have put a lot of work
>into the pages there and I wanted to respect that.
>
>...Richard
>
Thanks!!

I don't rightly recall what was there before but that is good (and more correct than what I wrote).

BTW the only link I'm finding to that page is the link in the "recent updates" section. I'm sure there is another, more permanent, one somewhere, but I'm not finding it. (?)


From tbrandonau at gmail.com  Thu Mar 13 11:46:53 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Fri, 14 Mar 2008 05:46:53 +1100
Subject: [antlr-interest] postmortem
In-Reply-To: <47D9748D.7060901@jazillian.com>
References: <47D843FB.7030403@jazillian.com>
	<20080313073540.C949A11EBBB@www.antlr.org>
	<c8c997f40803131047r711d57dal79daa4be1a1e5fb1@mail.gmail.com>
	<47D9748D.7060901@jazillian.com>
Message-ID: <ebc876d70803131146j6e689c3fp8ca36ec2415f9fd1@mail.gmail.com>

On Fri, Mar 14, 2008 at 5:38 AM, Andy Tripp <antlr at jazillian.com> wrote:
>  My guess is that you could use various heuristics to try to figure out what
> a reasonable AST might be.
>  But that approach of using heuristics and producing less-than-perfect
> output doesn't go over well with the compiler crowd.
>
Oh come on Andy. No one said that. A feature that produces imperfect
but usable output than can be tweaked to fit needs is fine. A tool
that produces output that is unusable and where the effort required
and end-product quality is worse than just doing it by hand to begin
with is just stupid whether you're a member of the compiler
intelligentsia or a practical layman.

Tom.

From brent.yates at gmail.com  Thu Mar 13 11:47:55 2008
From: brent.yates at gmail.com (Brent Yates)
Date: Thu, 13 Mar 2008 14:47:55 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <47D970F8.6040300@jazillian.com>
References: <47D970F8.6040300@jazillian.com>
Message-ID: <6edc6c380803131147s6625e181n782567a2375d7785@mail.gmail.com>

I will just add my two cents worth just so Andy doesn't feel he is alone.  I
am not a parsing expert, just a hobbyist.  I have played with parser
generators for the last several years (everything from VisualParser++, GOLD,
and Antlr2).  As a noob, "seeing" the tree generated from initial grammar
experiments is very helpful.  I tells you that you are going it the right
direction.  It gives immediate positive and negative feedback for a beginner
whose skills are not yet to the point where he can "see the matrix".  One of
the first test programs I wrote when playing with Antlr3 was to take the
generated AST and write out a DOT script to visualize the tree just like
AntlrWorks does.  Of course the default "tree" from Antrl is flat which is
not useful at all for visualization.  I knew that flat was the default from
my time with Antlr2 so I next started adding rewrite rules.  I don't
remember how long I fought with Antlr2 as that was years ago, but it was
tramatic enough that I clearly remember wondering what was going on.  If the
output was not flat my progression would have been quicker.  I would not
have gotten the final tree that I wanted, but I would have gotten positive
feedback that I was producing a tree.  The logical progression would be to
tweek the tree into a better form.

As a beginner when you see something that doesn't even look close to what
you expect, you can easily spend a lot of time checking in the wrong places
for a solution.  I believe that giving too much information (i.e., the parse
tree) will lead to a quicker understanding of why you need to carefully plan
an AST for post generation processing.  Giving too little (flat tree) tends
to make one confused about what to do next.

Regards,

Brent Yates
brent.yates at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/a8231556/attachment.html 

From antlr at jazillian.com  Thu Mar 13 11:50:06 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 14:50:06 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <A4006033-859C-4610-8D28-15BC7912789E@ucar.edu>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAKQ3spSk42ka	wb9vqBtMfFwEAAAAA@10.0.1.201>
	<A4006033-859C-4610-8D28-15BC7912789E@ucar.edu>
Message-ID: <47D9775E.6090205@jazillian.com>

Thanks, Pete.

Yes, I can certainly now see how your translator is "non-trivial" and 
doesn't need an AST.

Looks like maybe the situation is similar to IDL for CORBA, where the 
input language is
nicely defined as a subset of several other languages and then used to 
generate those
other languages.

So rather than "trivial" or not, the issue is whether or not the "from" 
language was really designed
so that it could be translated to the "to" language.

Thanks again for posting this...I wasn't picturing this sort of case at 
all. An AST might help,
but it might not.

Good luck with it, and I hope I didn't offend you or anything. Just 
picture me working
to replace C pointers with Java and C++ templates with Java generics all 
day and you
can imagine where my incredulous attitude comes from :)

Andy

siemsen at ucar.edu wrote:
>
> On Mar 13, 2008, at 11:06 AM, Jim Idle wrote:
>
>>> Andy Tripp wrote:
>>> The "Trust me, I translate from one non-trivial language to 
>>> another without needing an AST,
>>> but I wont give any details at all" thread from someone else is 
>>> really bugging me, too.
>>
>> Well, all the poster was saying (I think) is that he was able to 
>> write a translator by just using actions in the parser. I have done 
>> the same thing in the past. However, what Loring was trying to say 
>> (and most would agree I think), is that as soon as you get to a 
>> non-trivial case, while you can probably find a way to do without, 
>> you will find it better on many levels to construct an AST. I don't 
>> think that that is in any way a contentious statement.
>
> That poster was me.  To give Andy some details, my translator reads 
> ~1250 files written in an abstract language called MOF and writes 
> ~1250 Java files.  MOF is Managed Object Format, a language used to 
> define the Common Information Model, which is a object-oriented 
> standard for representing computers and networks.  The Common 
> Information Model is defined by the Distributed Management Task Force. 
>  The MOF files are available at 
> http://www.dmtf.org/standards/cim/cim_schema_v2171/.  The DMTF wanted 
> to define an object-oriented model while staying language-agnostic, so 
> they use MOF.  MOF isn't wildly different than Java, hence my 
> translator qualifies as "trivial" as Loring defined trivial: 
>
> "Trivial translations--A source to B source for languages in which 
> language B can straightforwardly express the paradigms of language 
> A--can be done without intermediate analysis.  Even there, an AST is 
> helpful and aids maintainability."
>
> Perhaps the negative connotation of the word "trivial" has made this 
> into more of an argument than it's worth.  At first I assumed that 
> "trivial" meant "small" or "for teaching purposes" or something. My 
> translator seems nontrivial to me.  The grammar has ~900 lines, yet no 
> AST.  I built it by reading the ANTLR book, learning as I went, and 
> didn't encounter a need for an AST.  Others might have a similar 
> experience, so I posted to learn why ASTs should be used.  As a result 
> of this thread, I now think an AST might improve my translator 
> somewhat.  I plan to add one to get separation-of-concerns and to 
> perhaps discover the "helpful and aids maintainability" benefits that 
> Loring mentioned.
>
> So Andy, I hope you aren't still bugged by this, but I remain 
> unconvinced that every useful (nontrivial) translation needs an AST.
>
> -- Pete
>
>
>
>
>
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/cb046931/attachment.html 

From snyder at t-vec.com  Thu Mar 13 11:55:06 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Thu, 13 Mar 2008 14:55:06 -0400
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C
	runtimefiles
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA69PsadYH+UaKnG8Zd3ro3wEAAAAA@10.0.1.201>
References: <006d01c88534$ce982450$265d080a@Gizmo>
	<!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA69PsadYH+UaKnG8Zd3ro3wEAAAAA@10.0.1.201>
Message-ID: <009a01c8853b$c2e9b540$265d080a@Gizmo>

Hi Jim,

 

It is because we define WIN32_LEAN_AND_MEAN to exclude most of the unused
stuff in our application. That macro prevents winsock.h from getting
included by windows.h.

 

I can include the header. It does not appear to hurt anything.

 

Thanks,

Chris

 

  _____  

From: Jim Idle [mailto:jimi at temporal-wave.com] 
Sent: Thursday, March 13, 2008 2:22 PM
To: snyder at t-vec.com
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C
runtimefiles

 

Yeah - but what I want to know is why does everyone else's environment
autoinclude it like mine does, but yours does not. I can include winsock_2.h
but I am not convinced that you are supposed to. Maybe you are though, it
probably does not harm.

 

Unless I start making the release version of the library #define out the
socket related stuff for the debugger, then I would have to create a
separate library and dynamically load it on each platform when the debugger
is invoked. I did think about doing that, but then I have to write platform
agnostic dll_open code, which isn't a huge problem but I didn't really have
time. Linking with the dll version of winsock shouldn't be a big deal as it
won't use up much space if you don't use the debugger (which I have not got
working yet anyway ;-). Maybe I will come back to that later.

 

Jim

 

From: Chris Snyder [mailto:snyder at t-vec.com] 
Sent: Thursday, March 13, 2008 11:05 AM
To: Jim Idle
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C
runtimefiles

 

VS2005 SP1 is installed.

 

If I include <winsock.h> before I include my lexer.h file it compiles fine.

 

It would be nice to remove this requirement if you are not going to be using
the debug facility. The application I'm working on does not use sockets.

 

It looks like you can check to see if _WINSOCKAPI_ is defined and if it is
not then include winsock.h.

 

Thanks,

Chris

 

  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Thursday, March 13, 2008 1:45 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C
runtimefiles

 

Hmm, how are you compiling it? I have no come across this and I just 10
seconds ago compiled generated code as C++ to fix a casting issue that
someone else reported. If you have all the correct headers and include paths
set up, then you should find in winsock.h:

 

typedef UINT_PTR        SOCKET;

 

Right clicking on the SOCKET declaration in antlr3debugeventlistener.h
should take you straight to it (once you have compiled and have the browse
info etc). So, if it doesn't then there is something amiss with your build
environment, or you have perhaps #defined something before including the
antlr3.h header, or in the project etc, which is causing the winsock
includes to not include themselves.

 

Including antlr3.h should include everything for you regardless of the
operating system/compiler, so it would be nice to get to the bottom of this
so we can solve it for others in advance ;-) This error usually means that
you are including the wrong headers. Did you load the .Net SDK or otherwise
change the default header locations for VS 2005? This kind of error comes up
when you install the wrong platform SDKs or out of date ones, but after
VS2005 these types of problems seemed to go away because the header include
order was fixed. 

 

Finally, you have installed VS2005 SP 1 right?

 

Jim

 

 

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 10:13 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime
files

 

I'm trying to compile my C output in CPP and I get this error

 

libantlr3c-3.1.0b1\include\antlr3debugeventlistener.h(42) : error C2146:
syntax error : missing ';' before identifier 'socket'

 

which corresponds to this:

 

antlr3debugeventlistener.h

/// The socket structure we receive after a successful accept on the
serverSocket

///

SOCKET                        socket;

 

I looked for the SOCKET definition and didn't find one being used in my
configuration. I did find a UNIX definition in antlr3defs.h:

 

// SOCKET not defined on Unix

// 

typedef     int                     SOCKET;

 

but it is not even reached because preprocessor ANTLR3_WINDOWS is defined 

 

Should I be including a windows socket header?

 

I'm in windows XP using VS2005 and VC++ 2005.

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/d753c756/attachment-0001.html 

From jimi at temporal-wave.com  Thu Mar 13 12:14:21 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 12:14:21 -0700
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C
	runtimefiles
In-Reply-To: <009a01c8853b$c2e9b540$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAOZ7KjpTYHEe
	5Iaif2KFWKQEAAAAA@10.0.1.201>

No, that isn't it. I define that myself in antlr3.h J But clearly it is something akin to that.

 

Anyway, I added it now and protected the windows #defines from redefinition.

 

Jim

 

From: Chris Snyder [mailto:snyder at t-vec.com] 
Sent: Thursday, March 13, 2008 11:55 AM
To: antlr-interest at antlr.org
Cc: Jim Idle
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

Hi Jim,

 

It is because we define WIN32_LEAN_AND_MEAN to exclude most of the unused stuff in our application. That macro prevents winsock.h from getting included by windows.h.

 

I can include the header. It does not appear to hurt anything.

 

Thanks,

Chris

 

  _____  

From: Jim Idle [mailto:jimi at temporal-wave.com] 
Sent: Thursday, March 13, 2008 2:22 PM
To: snyder at t-vec.com
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

Yeah - but what I want to know is why does everyone else's environment autoinclude it like mine does, but yours does not. I can include winsock_2.h but I am not convinced that you are supposed to. Maybe you are though, it probably does not harm.

 

Unless I start making the release version of the library #define out the socket related stuff for the debugger, then I would have to create a separate library and dynamically load it on each platform when the debugger is invoked. I did think about doing that, but then I have to write platform agnostic dll_open code, which isn't a huge problem but I didn't really have time. Linking with the dll version of winsock shouldn't be a big deal as it won't use up much space if you don't use the debugger (which I have not got working yet anyway ;-). Maybe I will come back to that later.

 

Jim

 

From: Chris Snyder [mailto:snyder at t-vec.com] 
Sent: Thursday, March 13, 2008 11:05 AM
To: Jim Idle
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

VS2005 SP1 is installed.

 

If I include <winsock.h> before I include my lexer.h file it compiles fine.

 

It would be nice to remove this requirement if you are not going to be using the debug facility. The application I'm working on does not use sockets.

 

It looks like you can check to see if _WINSOCKAPI_ is defined and if it is not then include winsock.h.

 

Thanks,

Chris

 

  _____  

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Thursday, March 13, 2008 1:45 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

Hmm, how are you compiling it? I have no come across this and I just 10 seconds ago compiled generated code as C++ to fix a casting issue that someone else reported. If you have all the correct headers and include paths set up, then you should find in winsock.h:

 

typedef UINT_PTR        SOCKET;

 

Right clicking on the SOCKET declaration in antlr3debugeventlistener.h should take you straight to it (once you have compiled and have the browse info etc). So, if it doesn't then there is something amiss with your build environment, or you have perhaps #defined something before including the antlr3.h header, or in the project etc, which is causing the winsock includes to not include themselves.

 

Including antlr3.h should include everything for you regardless of the operating system/compiler, so it would be nice to get to the bottom of this so we can solve it for others in advance ;-) This error usually means that you are including the wrong headers. Did you load the .Net SDK or otherwise change the default header locations for VS 2005? This kind of error comes up when you install the wrong platform SDKs or out of date ones, but after VS2005 these types of problems seemed to go away because the header include order was fixed. 

 

Finally, you have installed VS2005 SP 1 right?

 

Jim

 

 

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 10:13 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime files

 

I'm trying to compile my C output in CPP and I get this error

 

libantlr3c-3.1.0b1\include\antlr3debugeventlistener.h(42) : error C2146: syntax error : missing ';' before identifier 'socket'

 

which corresponds to this:

 

antlr3debugeventlistener.h

/// The socket structure we receive after a successful accept on the serverSocket

///

SOCKET                        socket;

 

I looked for the SOCKET definition and didn't find one being used in my configuration. I did find a UNIX definition in antlr3defs.h:

 

// SOCKET not defined on Unix

// 

typedef     int                     SOCKET;

 

but it is not even reached because preprocessor ANTLR3_WINDOWS is defined 

 

Should I be including a windows socket header?

 

I'm in windows XP using VS2005 and VC++ 2005.

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/cbea0a2a/attachment.html 

From jimi at temporal-wave.com  Thu Mar 13 12:17:03 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 12:17:03 -0700
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C
	runtimefiles
In-Reply-To: <009a01c8853b$c2e9b540$265d080a@Gizmo>
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAA9tXwjM3y3kC
	gVvAEp+xrHAEAAAAA@10.0.1.201>

Doh! It IS that! The header had:

 

WINDOWS_LEAN_AND_MEAN

 

Blimey. 

 

Jim

 

From: Chris Snyder [mailto:snyder at t-vec.com] 
Sent: Thursday, March 13, 2008 11:55 AM
To: antlr-interest at antlr.org
Cc: Jim Idle
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

Hi Jim,

 

It is because we define WIN32_LEAN_AND_MEAN to exclude most of the unused stuff in our application. That macro prevents winsock.h from getting included by windows.h.

 

I can include the header. It does not appear to hurt anything.

 

Thanks,

Chris

 

  _____  

From: Jim Idle [mailto:jimi at temporal-wave.com] 
Sent: Thursday, March 13, 2008 2:22 PM
To: snyder at t-vec.com
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

Yeah - but what I want to know is why does everyone else's environment autoinclude it like mine does, but yours does not. I can include winsock_2.h but I am not convinced that you are supposed to. Maybe you are though, it probably does not harm.

 

Unless I start making the release version of the library #define out the socket related stuff for the debugger, then I would have to create a separate library and dynamically load it on each platform when the debugger is invoked. I did think about doing that, but then I have to write platform agnostic dll_open code, which isn't a huge problem but I didn't really have time. Linking with the dll version of winsock shouldn't be a big deal as it won't use up much space if you don't use the debugger (which I have not got working yet anyway ;-). Maybe I will come back to that later.

 

Jim

 

From: Chris Snyder [mailto:snyder at t-vec.com] 
Sent: Thursday, March 13, 2008 11:05 AM
To: Jim Idle
Subject: RE: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

VS2005 SP1 is installed.

 

If I include <winsock.h> before I include my lexer.h file it compiles fine.

 

It would be nice to remove this requirement if you are not going to be using the debug facility. The application I'm working on does not use sockets.

 

It looks like you can check to see if _WINSOCKAPI_ is defined and if it is not then include winsock.h.

 

Thanks,

Chris

 

  _____  

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Thursday, March 13, 2008 1:45 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtimefiles

 

Hmm, how are you compiling it? I have no come across this and I just 10 seconds ago compiled generated code as C++ to fix a casting issue that someone else reported. If you have all the correct headers and include paths set up, then you should find in winsock.h:

 

typedef UINT_PTR        SOCKET;

 

Right clicking on the SOCKET declaration in antlr3debugeventlistener.h should take you straight to it (once you have compiled and have the browse info etc). So, if it doesn't then there is something amiss with your build environment, or you have perhaps #defined something before including the antlr3.h header, or in the project etc, which is causing the winsock includes to not include themselves.

 

Including antlr3.h should include everything for you regardless of the operating system/compiler, so it would be nice to get to the bottom of this so we can solve it for others in advance ;-) This error usually means that you are including the wrong headers. Did you load the .Net SDK or otherwise change the default header locations for VS 2005? This kind of error comes up when you install the wrong platform SDKs or out of date ones, but after VS2005 these types of problems seemed to go away because the header include order was fixed. 

 

Finally, you have installed VS2005 SP 1 right?

 

Jim

 

 

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Snyder
Sent: Thursday, March 13, 2008 10:13 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] C++ compile issue with ANTLR 3.1.0b1 C runtime files

 

I'm trying to compile my C output in CPP and I get this error

 

libantlr3c-3.1.0b1\include\antlr3debugeventlistener.h(42) : error C2146: syntax error : missing ';' before identifier 'socket'

 

which corresponds to this:

 

antlr3debugeventlistener.h

/// The socket structure we receive after a successful accept on the serverSocket

///

SOCKET                        socket;

 

I looked for the SOCKET definition and didn't find one being used in my configuration. I did find a UNIX definition in antlr3defs.h:

 

// SOCKET not defined on Unix

// 

typedef     int                     SOCKET;

 

but it is not even reached because preprocessor ANTLR3_WINDOWS is defined 

 

Should I be including a windows socket header?

 

I'm in windows XP using VS2005 and VC++ 2005.

 

Thanks,

Chris

 

 

T-VEC Technologies, Inc.

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/36467d2c/attachment-0001.html 

From jimi at temporal-wave.com  Thu Mar 13 12:20:18 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 13 Mar 2008 12:20:18 -0700
Subject: [antlr-interest] New snapshot of 3.1 beta, plus C runtime b2
Message-ID: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAcF9bkHFSmEK
	E8tNr8VKOuAEAAAAA@10.0.1.201>

Hi,

 

If you are currently using the 3.1 beta snapshot, and especially if you are using the C 3.1 beta runtime, please note that there is now a new snapshot available:

 

antlr-2008-03-13.12.tar.gz <http://www.antlr.org/download/build/antlr-2008-03-13.12.tar.gz> 

 

>From the intermediate builds link on the downloads page. Please pick this up and use it. Thanks to the people that reported bugs to me - I think that all reported bugs in the beta are now fixed.

 

Jim



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/78cc33e0/attachment.html 

From rdclark at gmail.com  Thu Mar 13 12:27:11 2008
From: rdclark at gmail.com (Richard Clark)
Date: Thu, 13 Mar 2008 12:27:11 -0700
Subject: [antlr-interest] starting with language translation
In-Reply-To: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
Message-ID: <d3992d900803131227y1156316ch4fb09989aab0caff@mail.gmail.com>

hi benzo,

To make some practical suggestions:
1. Do a couple of smaller "warm up" projects before tackling Java to
Actionscript. Define a subset of Java and define your own parser and
tree generator. Look at generated trees and write a little code to
modify them. Write a little StringTemplate test case, and so on...
2. Java and Actionscript have different semantics in many places (e.g.
Java's class-based inheritance vs. Actionscript's prototype-based
inheritance.) Think about how you're going to bridge those
differences. Many people wind up writing a runtime library for the
target language to simplify the translation process.
3. Apply unit tests throughout your development. There are just so
many ways a project of this size can introduce subtle bugs that you
want automated tests to keep an eye on things.

Oh, and welcome to the community. :)

...Richard

From rdclark at gmail.com  Thu Mar 13 12:30:43 2008
From: rdclark at gmail.com (Richard Clark)
Date: Thu, 13 Mar 2008 12:30:43 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <47D976FD.6080507@vandals.uidaho.edu>
References: <BAYC1-PASMTP12AF93437EBB4CD1384F20F5080@CEZ.ICE>
	<d3992d900803121926r1809f46ck62a09120f1b06055@mail.gmail.com>
	<47D976FD.6080507@vandals.uidaho.edu>
Message-ID: <d3992d900803131230y7e82e5cfy724c920cc23aa5c0@mail.gmail.com>

On Thu, Mar 13, 2008 at 11:48 AM, Benjamin Shropshire
<shro8822 at vandals.uidaho.edu> wrote:

>  BTW the only link I'm finding to that page is the link in the "recent updates" section.

It's also in the table of contents for the main page of the ANTLR3 wiki.

(http://antlr.org/wiki/display/ANTLR3/ANTLR+3+Wiki+Home and look under
"Tutorials".)

Glad you like it :)

...R



>

From rdclark at gmail.com  Thu Mar 13 12:37:32 2008
From: rdclark at gmail.com (Richard Clark)
Date: Thu, 13 Mar 2008 12:37:32 -0700
Subject: [antlr-interest] "flat" trees
Message-ID: <d3992d900803131237x607678b9m815acb0dbf53a723@mail.gmail.com>

There's been a whole lot of debate over "flat" trees in ANTLR. Could
you folks clarify what you mean and what you would use as an
alternative?

I recently wrote a translator that used ASTs pretty extensively,
including a custom map/reduce-style library to do transformations. It
seems to me that the AST trees were perfectly sufficient -- there are
nodes, nodes have multiple ordered children, you can do
search/insert/remove operations on nodes, etc.

...Richard

From shro8822 at vandals.uidaho.edu  Thu Mar 13 12:48:07 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Thu, 13 Mar 2008 11:48:07 -0800
Subject: [antlr-interest] postmortem
In-Reply-To: <d3992d900803131230y7e82e5cfy724c920cc23aa5c0@mail.gmail.com>
References: <BAYC1-PASMTP12AF93437EBB4CD1384F20F5080@CEZ.ICE>	
	<d3992d900803121926r1809f46ck62a09120f1b06055@mail.gmail.com>	
	<47D976FD.6080507@vandals.uidaho.edu>
	<d3992d900803131230y7e82e5cfy724c920cc23aa5c0@mail.gmail.com>
Message-ID: <47D984F7.9070901@vandals.uidaho.edu>

Richard Clark wrote:

>On Thu, Mar 13, 2008 at 11:48 AM, Benjamin Shropshire
><shro8822 at vandals.uidaho.edu> wrote:
>
>  
>
>> BTW the only link I'm finding to that page is the link in the "recent updates" section.
>>    
>>
>
>It's also in the table of contents for the main page of the ANTLR3 wiki.
>
>(http://antlr.org/wiki/display/ANTLR3/ANTLR+3+Wiki+Home and look under
>"Tutorials".)
>
>Glad you like it :)
>
>...R
>

Bazaar: if I bring up that link the contents bar is nice and visible. 
but If I cut the URL to back to the last "/", I get redirected back to 
the same page but I only see about 10 pixels of the contents bar down 
the RHS. (Garsh Darn my flaky web browsers)  :-b

From swatt at infobal.com  Thu Mar 13 12:47:51 2008
From: swatt at infobal.com (Stuart Watt)
Date: Thu, 13 Mar 2008 15:47:51 -0400
Subject: [antlr-interest] starting with language translation
In-Reply-To: <d3992d900803131227y1156316ch4fb09989aab0caff@mail.gmail.com>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
	<d3992d900803131227y1156316ch4fb09989aab0caff@mail.gmail.com>
Message-ID: <1205437671.19544.2.camel@localhost.localdomain>

It may also be worth looking at the open source Google Web Toolkit,
which translates some Java to JavaScript -- which is conceptually the
same as ActionScript apart from the (browser-related parts of the)
object model.

All the best
Stuart


On Thu, 2008-03-13 at 12:27 -0700, Richard Clark wrote:
> hi benzo,
> 
> To make some practical suggestions:
> 1. Do a couple of smaller "warm up" projects before tackling Java to
> Actionscript. Define a subset of Java and define your own parser and
> tree generator. Look at generated trees and write a little code to
> modify them. Write a little StringTemplate test case, and so on...
> 2. Java and Actionscript have different semantics in many places (e.g.
> Java's class-based inheritance vs. Actionscript's prototype-based
> inheritance.) Think about how you're going to bridge those
> differences. Many people wind up writing a runtime library for the
> target language to simplify the translation process.
> 3. Apply unit tests throughout your development. There are just so
> many ways a project of this size can introduce subtle bugs that you
> want automated tests to keep an eye on things.
> 
> Oh, and welcome to the community. :)
> 
> ...Richard
> 
> --
> This message was scanned by ESVA and is believed to be clean.
> Click here to report this message as spam. 
> http://antispam.infobal.com/cgi-bin/learn-msg.cgi?id=E003C27FE7.D8AFB
> 


From gbr at newtechlaw.com  Thu Mar 13 12:53:50 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Thu, 13 Mar 2008 12:53:50 -0700
Subject: [antlr-interest] "flat" trees
In-Reply-To: <d3992d900803131237x607678b9m815acb0dbf53a723@mail.gmail.co
 m>
References: <d3992d900803131237x607678b9m815acb0dbf53a723@mail.gmail.com>
Message-ID: <200803131953.m2DJrvVN015720@tach.newtechlaw.com>

At 12:37 PM 3/13/2008, Richard Clark wrote:

>I recently wrote a translator that used ASTs pretty extensively,
>including a custom map/reduce-style library to do transformations. It
>seems to me that the AST trees were perfectly sufficient -- there are
>nodes, nodes have multiple ordered children, you can do
>search/insert/remove operations on nodes, etc.

Did you build anything in the way of a generalized library to do the 
AST access?  How do you handle breaking AST structure changes?

In any case, would be very interested in seeing at least the 
interface API/method signatures that you settled on for your access operations.

Thanks,
Gerald 


From antlr at jazillian.com  Thu Mar 13 12:54:27 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 15:54:27 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <ebc876d70803131140s10f54308madeab78d8a65f02b@mail.gmail.com>
References: <47D843FB.7030403@jazillian.com>	
	<ebc876d70803130120g62ca685cyc9f03f7769db9f41@mail.gmail.com>	
	<47D94198.6040107@jazillian.com>
	<ebc876d70803131140s10f54308madeab78d8a65f02b@mail.gmail.com>
Message-ID: <47D98673.5010105@jazillian.com>

Thomas Brandon wrote:
> On Fri, Mar 14, 2008 at 2:00 AM, Andy Tripp <antlr at jazillian.com> wrote:
>   
>>> Thomas Brandon wrote:
>>>       
>>  On Thu, Mar 13, 2008 at 7:58 AM, Andy Tripp <antlr at jazillian.com> wrote:
>>     
>>>  Yes, most ANTLR users want a non-flat tree. But most (if not all) of
>>> these users do not want a parse tree.
>>>       
>>  Agreed. But keep in mind that for many applications, simply walking the AST
>> by hand is enough.
>>     
> I'm familiar with your views so I tried to though it's a rather alien
> approach to me so forgive any oversights..
>   
>>>  The parse trees generated by
>>> ANTLR are not just like ASTs and cannot be used as such. Parse trees
>>> consist of standard AST nodes for all the actual language nodes and
>>> special parse tree nodes (of type ParseTree extending CommonTree) for
>>> the rule references. These parse tree nodes have a token type of 0.
>>> Thus you cannot use a tree parser against a parse tree and manually
>>> walking the tree would be complicated. Parse trees (as generated by
>>> ANTLR) are more of a debugging aid than a type of AST that
>>> automatically adds structure.
>>>       
>>  ...I think that in many cases processing the parse tree would be very
>> simple:
>>
>>  if (!(ast instanceof ParseTree)) {
>>     doSomethingWith(ast);
>>  } else {
>>     // ignore ParseTree nodes
>>  }
>>
>>     
> Well, that's not going to process the children of parse trees which is
> presumably not what you want. And if you're skipping them then what
> use are they exactly?
>   
Sorry, I left out and assumed everyone would mentally fill in that the 
children might always get processed:
for (child: ast.getChildren()) {
    walk(child);   // recursive call to process children
}
> But my point was that with no token type you can switch on token
> types. So you'd have to switch on the string name, which gets rather
> nasty to maintain, and means changing a rule name will break your tree
> walker but give no compile time errors. Not especially easy or
> desirable.
>   
Uhhh...yea, OK. Sorry, I'm not familiar with ParseTree. Couldn't we use 
"instanceof" then...switch
on the class of the node?
> <SNIP>A fair bit of going round in circles with proposed heuristics</SNIP>
>
>   
>>  ...but I guess maybe that puts us where we started - generating a full
>> parse tree.
>>  But even without solving this problem - go ahead and leave the tree as
>> being hard to walk -
>>  we're still ahead. The goal here is not to generate a "good" AST, but
>> rather just produce something
>>  that's better than nothing (i.e. a flat tree). So the newbie gets this
>> tree, sees that it's hard to
>>  distinguish the various cases where he's got an ID node, and starts reading
>> up on how to build
>>  an AST. He's better off here than the alternative: a blank stare at a flat
>> ast.
>>     
> <SNIP>more circles</SNIP>
>   
>>  Thanks for writing this up. Let me know if you think the replies I gave
>> would work.
>>  As I said, if they work, but only make things somewhat better, but not a
>> completely usable AST, that's
>>  still a win IMO. If they don't work, then how about simply say "if there
>> are no ^'s, I'll just use
>>  the existing code to get a parse tree and return that"?
>>
>>  Andy
>>     
> (Can you please stop HTML posting or at least use a client with decent
> quoting in it's HTML. Gmail can't handle your quoting and I've found
> it's generally pretty good at that.)
>   
Yes, sorry about that.
> I could go through your various proposed rules and point out the case
> where they produce a structure I can't see anyone wanting but I gather
> you admit that point.
>   
Yes. Just trying to have an default AST who's usefulness is greater than 
0, not necessarily 100%
or close to it.
> The detect ^ and switch off automatic rules doesn't work because the
> user may want a flat AST.
>   
Uh Oh. See my exchange with Jim on that.
Please explain a (non-contrived) case where someone may want a flat AST.
> And I don't accept your view that producing a bad AST is better than
> producing a flat AST. Is anyone going to use a bad AST? 
I think so. If nothing else, just to verify that the parser is doing 
something reasonable.

When it came time for me to start using C++ ASTs for expressions, I 
looked into it and decided
I could just use a C parser and C ASTs, after all, expressions are the 
same in C and C++, right?
Just this week, over a year later, I finally hit a case where a 
particular C++ expression isn't valid in C.

The point is that I was (mostly) fine using a subset of a C grammar for C++.
Now that I find that the C grammar is "bad" for C++, what did  I do? I found
a way to easy get around the problem by eliminating the invalid syntax from
the input. That may seem like a hack (the purist would have used a real 
C++ grammar), but it
does work and was far easier than switching grammars. My job is to get 
my application working
well as quickly as possible, not to learn any more of ANTLR than I need to.
> I can't see
> why they would and don't think they should. Is it easy to allow such
> auto-generation to be mixed with explicit construction to generate a
> good AST? I don't think so. 
As I said in another post, I'd simply say "if there are no explicit 
AST-building constructs in
the grammar, return the parse tree". No mixing.
> At best you end up with a grammar that's
> messier and harder to understand than if you'd just used manual
> construction. 
No mixing. The grammar is whatever it is, no different in any way.
If it has no ^ or ! characters, you get a parse tree.
> So you've spent all the time developing a system 
"All the time" being about 20 lines of code: declare a flag, set the 
flag whenever you see
^ or !. In getTree(), if the flag is not set, return the parse tree instead.
> that no
> one is ever going to use for more than the first grammar run that's
> only purpose is to avoid giving someone a flat AST. 
Yes, avoiding giving a flat AST is one purpose. I've said why that's 
good, and a couple
of people agreed (including the original poster, who bothered enough to 
mention it).

I also think even a "bad AST" would be useful. For one, to verify that 
the parser is working
as intended. Also, I think some applications would actually be able to 
just use the "bad AST".
The guy who isn't even using an AST today might use it, if he gets it 
"for free". The guys
who wrote that tool to automatically generate it might use it. And, of 
course, a
parse tree really is useful (e.g. ANTLRWorks uses it), it's just a 
matter of whether
it's provided as "the default" when you've asked for an AST but provided 
no "^".
> And if they don't
> look at enough docs\examples first and, heaven forbid, get a flat AST
> they either go to the docs and quickly recognise their flawed
> expectations of what output=AST will do or send a message to the list
> that requires all of two or three sentences to answer. 
By that time, it's "too late". From the original post, you can see what 
happens.
After going through the long process of building a tree-like grammar, 
and having it successfully
parse some input, people realistically expect to be able to see some tree.

Suppose you say "i = 1;" without declaring i, in Java or any other 
statically typed language.
And suppose that that reference is in "dead code" that's never reached. 
The compiler could
silently ignore the problem, and the output bytecode (or executable or 
whatever) is perfectly
valid. But the user if left saying "I wonder why the output isn't what I 
expected?" and start
to dislike the tool.

The same is true here. This guy put "output=AST" and got out something 
unexpected.
Sure, he can search the book, the wiki, ask on the mailing list, and 
find the answer.
Just as the guy who forgot to define his variable could do all those 
things to find the answer.

Making sure that the answer is available is one thing, avoiding the 
confusion in the first place is
another. At a minimum, don't let me put "output=AST" and then forget to 
put any ^'s in
my grammar. There's no need to let me make that mistake. It's a 
usability issue.
> How is this in
> anyway a good use of time or a justifiable addition of code
> complexity?
>   
It would have helped the original poster, who seems so mad he won't be 
using ANTLR any more.
Obviously, it's not just this issue. In all these posts, I'm arguing for 
more usability work
overall, not just this specific AST thing.

I realize these "make it easier for the newbie"
suggestions make little sense to Terence and most others, and Terence 
has no time for stuff
like this. But usability does matter. I suspect for each frustrated guy 
like this who posted,
there are at least several more who didn't bother.

By analogy, all the C compilers have lots of documentation and mailing 
lists
and lots of users, and you could probably spend a lifetime with the gcc 
documentation alone.
And yet their error messages all suck compared to javac's messages. I 
don't know
exactly how Sun managed that, but I do know there's something 
fundamentally better
about javac.

Andy
> Tom.
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/ab7f0d7c/attachment-0001.html 

From antlr at jazillian.com  Thu Mar 13 13:03:28 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 16:03:28 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <ebc876d70803131146j6e689c3fp8ca36ec2415f9fd1@mail.gmail.com>
References: <47D843FB.7030403@jazillian.com>	
	<20080313073540.C949A11EBBB@www.antlr.org>	
	<c8c997f40803131047r711d57dal79daa4be1a1e5fb1@mail.gmail.com>	
	<47D9748D.7060901@jazillian.com>
	<ebc876d70803131146j6e689c3fp8ca36ec2415f9fd1@mail.gmail.com>
Message-ID: <47D98890.8060906@jazillian.com>

Thomas Brandon wrote:
> On Fri, Mar 14, 2008 at 5:38 AM, Andy Tripp <antlr at jazillian.com> wrote:
>>  My guess is that you could use various heuristics to try to figure out what
>> a reasonable AST might be.
>>  But that approach of using heuristics and producing less-than-perfect
>> output doesn't go over well with the compiler crowd.
>>
> Oh come on Andy. No one said that. A feature that produces imperfect
> but usable output than can be tweaked to fit needs is fine. 

There are plenty of examples in this thread and others in which the
response is essentially "that won't work in general, so it shouldn't be done".

> A tool
> that produces output that is unusable 

I think I've justified how a parse tree is not "unusable",
even when returned as an AST.


> and where the effort required
> and end-product quality is worse than just doing it by hand to begin
> with is just stupid whether you're a member of the compiler
> intelligentsia or a practical layman.

Right.
So we should have this discussion, figure out what effort is required,
and whether the end-product quality is better or worse. Not just
dismiss it with "a parse tree is not an AST" or "if you want a parse
tree, just ask for it" or "an flat tree is exactly what you've asked for".

I agree with that.

Andy
> 
> Tom.
> 


From lgcraymer at yahoo.com  Thu Mar 13 13:05:47 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Thu, 13 Mar 2008 13:05:47 -0700 (PDT)
Subject: [antlr-interest] postmortem
Message-ID: <638378.34558.qm@web55907.mail.re3.yahoo.com>

Actually, getting ANTLR to generate real parse trees with unique labels for the non-terminals (rule tokens) is fairly easy to do--I did that for ANTLR 2 with about 10 liines of code.  ANTLR 3 is structured a little bit differently than ANTLR 2--it might be doable in 5.  You need to create a token type for every rule name--I used a RULE_ prefix--and then just add the appropriate token as the root of the subtree produced by a rule.

I did not do this because I thought I needed parse trees for routine tasks, but rather to experiment with the idea of "reversible" translation--is there a way to translate language B into language A with minimal effort given a translator from A to B?  Parse trees seemed to provide a useful output form for that purpose since one can just output token text given a parse tree to regenerate the source.  One of these days, I will revisit that idea.

For practical translation, though, parse trees are not particularly helpful--they capture preconceptions about the input language and contribute little to the analysis phase(s) of a translator.  Failure to design a tree structure that helps in performing analysis seems invariably to lead to "action-packed" grammars that become less and less maintainable as they are asked to do more and more.  Eventually, you get to the point where the grammar itself is virtually unmaintainable because it is hidden by a vast amount of target language code.

--Loring


----- Original Message ----
> From: Thomas Brandon <tbrandonau at gmail.com>
> To: Andy Tripp <antlr at jazillian.com>
> Cc: antlr-interest <antlr-interest at antlr.org>
> Sent: Thursday, March 13, 2008 1:20:35 AM
> Subject: Re: [antlr-interest] postmortem
> 
> On Thu, Mar 13, 2008 at 7:58 AM, Andy Tripp  wrote:
> >
> >  Jim Idle wrote:
> > > I think you miss the point. We can't 'know' that they did or didn't want a
> > > flat tree. Who is this someone that you are designating tasks like this to?
> > Well, we can't "know' anything about what anyone wants, in general. The best
> >  we can do is make a best guess. And I think the best guess is that most
> > ANTLR users want a non-flat AST.
> Yes, most ANTLR users want a non-flat tree. But most (if not all) of
> these users do not want a parse tree. The parse trees generated by
> ANTLR are not just like ASTs and cannot be used as such. Parse trees
> consist of standard AST nodes for all the actual language nodes and
> special parse tree nodes (of type ParseTree extending CommonTree) for
> the rule references. These parse tree nodes have a token type of 0.
> Thus you cannot use a tree parser against a parse tree and manually
> walking the tree would be complicated. Parse trees (as generated by
> ANTLR) are more of a debugging aid than a type of AST that
> automatically adds structure.
> 
> Perhaps you could add an output=CST (Concrete Syntax Tree, aka parse
> tree) option. But how would this work?
> Given a rule like:
> myop: modifier MYOP contents;
> what should our proposed CST constructor generate? What token types
> should rule references automatically generate? You could generate a
> token type named after the rule but producing ^(MYOP attributes MYOP
> contents) where the first MYOP is our auto-generated one mapping to no
> part of the input and the second is an actual token seems bizarre and
> likely to cause troubles. Maybe we could do ^(RULE_MYOP modifier MYOP
> contents) but do any of the users who don't want flat ASTs want that?
> And do they also want:
> modifier: PUBLIC | PROTECTED;
> to generate ^(RULE_MODIFIER PUBLIC)?
> I'd imagine what they really want is not a CST but the AST ^(MYOP
> modifier content). With modifier having no dummy parent and contents
> having one.
> OK, so we don't want output=CST we want to auto-generate ASTs. But
> how? Given the above case we might think we could have a rule that if
> there's one token reference and other rule references we make the
> token the root. That's easy but what if we've got:
> method: keywords ID args catch;
> we probably don't want ^(ID keywords args catch) as that's very hard
> for our tree walker to distinguish from:
> field: keywords ID init;
> which makes ^(ID keywords init).
> And what do we do with:
> method: keywords ID LPAREN args RPAREN CATCH catch;
> Here I'd probably want the AST ^(METHOD_CALL ID keywords args catch)
> but how can a tool know that.
> OK, so we want to have some default rules and some syntax to disable
> automatic generation. But how often is this auto generation actually
> going to be used? I think you're very often going to want to disable
> any such automatic generation. OK, so any use of AST rebuild operators
> disables the automatic generation. But what about your "modifiers:
> PUBLIC | PROTECTED;" rule? Adding "options { autoAST=false; }" to all
> such rules is going to be pretty annoying and "modifiers!: PUBLIC |
> PROTECTED;" isn't going to be very understandable for new users.
> 
> I think if you spend a bit of time actually thinking about how you'd
> manage to implement what you want you'll see it really doesn't work.
> 
> Tom.
> 




      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/8e3405e0/attachment.html 

From darien.hager at etelos-inc.com  Thu Mar 13 13:13:11 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Thu, 13 Mar 2008 13:13:11 -0700
Subject: [antlr-interest] postmortem
In-Reply-To: <47D9748D.7060901@jazillian.com>
References: <47D843FB.7030403@jazillian.com>
	<20080313073540.C949A11EBBB@www.antlr.org>
	<c8c997f40803131047r711d57dal79daa4be1a1e5fb1@mail.gmail.com>
	<47D9748D.7060901@jazillian.com>
Message-ID: <c8c997f40803131313u36910e00t3381edca43afd337@mail.gmail.com>

On 3/13/08, Andy Tripp <antlr at jazillian.com> wrote:

> That would be an interesting project.
> My guess is that you could use various heuristics to try to figure out
> what a reasonable AST might be.
> But that approach of using heuristics and producing less-than-perfect
> output doesn't go over well with the compiler crowd.
>

I'm not talking about any sort of AI, I just mean generating rewrite
rules (or !/^ usage) that replicates the structure of the grammar to make a
new subtree when each rule is hit.

Basically, generating AST-related grammar bits (possibly with additional
imaginary tokens) which yield an approximation to the parse tree. If nothing
else it may be a useful starting point for someone making an AST which has
similarities to their parser rule breakdown.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/1ce9bc84/attachment.html 

From antlr at jazillian.com  Thu Mar 13 13:15:05 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 16:15:05 -0400
Subject: [antlr-interest] starting with language translation
In-Reply-To: <d3992d900803131227y1156316ch4fb09989aab0caff@mail.gmail.com>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
	<d3992d900803131227y1156316ch4fb09989aab0caff@mail.gmail.com>
Message-ID: <47D98B49.5090505@jazillian.com>

On the other hand, you could just spend
about half an hour downloading ANTLR, running it on
java.g, and using JavaEmitter.java to print the AST.

You could then start modifying JavaEmitter to produce
actionscript, and never have to learn any ANTLR or StringTemplate
at all, and know nothing about lexing and parsing. All the information
you'll ever need is there, in the AST that you're printing.

You'll have a lot of work just in really understanding what the
AST looks like and how to map Java code to actionscript. Having to
learn a lot about ANTLR at the same time makes it much more difficult.

IIRC, this is what the Java-to-Python guy did, and the approach
worked out fine.

Andy


Richard Clark wrote:
> hi benzo,
> 
> To make some practical suggestions:
> 1. Do a couple of smaller "warm up" projects before tackling Java to
> Actionscript. Define a subset of Java and define your own parser and
> tree generator. Look at generated trees and write a little code to
> modify them. Write a little StringTemplate test case, and so on...
> 2. Java and Actionscript have different semantics in many places (e.g.
> Java's class-based inheritance vs. Actionscript's prototype-based
> inheritance.) Think about how you're going to bridge those
> differences. Many people wind up writing a runtime library for the
> target language to simplify the translation process.
> 3. Apply unit tests throughout your development. There are just so
> many ways a project of this size can introduce subtle bugs that you
> want automated tests to keep an eye on things.
> 
> Oh, and welcome to the community. :)
> 
> ...Richard
> 


From antlr at jazillian.com  Thu Mar 13 13:29:30 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Thu, 13 Mar 2008 16:29:30 -0400
Subject: [antlr-interest] postmortem
In-Reply-To: <638378.34558.qm@web55907.mail.re3.yahoo.com>
References: <638378.34558.qm@web55907.mail.re3.yahoo.com>
Message-ID: <47D98EAA.2060902@jazillian.com>

Loring Craymer wrote:

> 
> For practical translation, though, parse trees are not particularly 
> helpful--they capture preconceptions about the input language and 
> contribute little to the analysis phase(s) of a translator.  Failure to 
> design a tree structure that helps in performing analysis seems 
> invariably to lead to "action-packed" grammars that become less and less 
> maintainable as they are asked to do more and more.  Eventually, you get 
> to the point where the grammar itself is virtually unmaintainable 
> because it is hidden by a vast amount of target language code.

Yea, I'm sure that would become a huge mess very quickly.

But suppose you design things so that the parser just parses (producing an AST) and does not
try to do any translation. And similarly, suppose you don't try to define
a treewalker to do translation, because that's going to have this
"huge amounts of code buried within a grammar" problem anyway.

Instead, you just have some ("by hand") code that walks the AST.
Wouldn't that code be straightforward, simply ignoring any nodes that it
doesn't need to process? For example, look at my thing that just
walks a Java AST "by hand" and pretty prints it:
http://www.jazillian.com/articles/JavaEmitter.java
Seems like this wouldn't be much more complicated to deal with a parse tree
than it is now dealing with an AST.

From ad_cooney at hotmail.com  Thu Mar 13 14:10:48 2008
From: ad_cooney at hotmail.com (Adam Cooney)
Date: Thu, 13 Mar 2008 21:10:48 +0000
Subject: [antlr-interest] Converting AST back to code
In-Reply-To: <47D98EAA.2060902@jazillian.com>
References: <638378.34558.qm@web55907.mail.re3.yahoo.com>
	<47D98EAA.2060902@jazillian.com>
Message-ID: <BLU124-W14249843319412BBD36AA184090@phx.gbl>


Hi,
  I was wondering if someone could tell me if its possible to use a JavaAST grammar to convert sub-trees (of a full tree) to their respective code segments. For instance:
TREE:
COMPILATION_UNIT, TYPE_IMPORT_ON_DEMAND_DECLARATION, SELECT, java, io, TYPE_IMPORT_ON_DEMAND_DECLARATION, SELECT, java, util, CLASS_DECLARATION, MODIFIERS, public, Input1b, CLASS_BODY,METHOD_DECLARATION, MODIFIERS, public, static, 132, main,FORMAL_PARAMETERS, FORMAL_PARAMETER, MODIFIERS, ARRAY_OF, String, args,BLOCK, EXPRESSION_STATEMENT, CALL, SELECT, SELECT, System, out, println,ARGUMENTS, "Test 2"
SUBTREES:
[COMPILATION_UNIT, TYPE_IMPORT_ON_DEMAND_DECLARATION, SELECT, java, io, TYPE_IMPORT_ON_DEMAND_DECLARATION, SELECT, java, util, CLASS_DECLARATION, MODIFIERS, public, Input1b, CLASS_BODY]
[METHOD_DECLARATION, MODIFIERS, public, static, 132, main]
[FORMAL_PARAMETERS, FORMAL_PARAMETER, MODIFIERS, ARRAY_OF, String, args]
[BLOCK, EXPRESSION_STATEMENT, CALL, SELECT, SELECT, System, out, println
[ARGUMENTS, "Test 2"]
 
I can covert the Tree into the original code no problem, im just wondering if there is a way of doing it with sub-trees? Or perhaps im just looking at this in the completely wrong way
 
_________________________________________________________________
Free games, great prizes - get gaming at Gamesbox. 
http://www.searchgamesbox.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/9ee687ee/attachment-0001.html 

From smbogan at gmail.com  Thu Mar 13 15:32:55 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Thu, 13 Mar 2008 17:32:55 -0500
Subject: [antlr-interest] Rewrite rules, again!
Message-ID: <31160efe0803131532v7517fd89u29bda02a833bd0ed@mail.gmail.com>

I got some great help creating the following for my grammar:

assignops :
(boolops->boolops)(firstops b2=boolops -> ^(OPERATOR ^(firstops
^(OPERAND $b2) ^(OPERAND $assignops))))*
;

To make the above clear, it is basically just:
assignops :
    boolops (firstops boolops)*
    ;
with rewrite rules.

The problem is this creates an AST that groups items in the reverse of
how I need them.  For example:
a = b = c;
will create a tree that my tree walker (doing depth first) would evaluate as:
(a = b) = c;

This is obviously wrong.  It should be a = (b = c);

Essentially, my parse tree looks fine, but I can't figure out how (if
there is a way) to get my rewrite rule to write my AST like above.

Any help is greatly appreciated,
Shaun M Bogan

From jaluber at gmx.de  Thu Mar 13 15:54:49 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 13 Mar 2008 23:54:49 +0100
Subject: [antlr-interest] Rewrite rules, again!
In-Reply-To: <31160efe0803131532v7517fd89u29bda02a833bd0ed@mail.gmail.com>
References: <31160efe0803131532v7517fd89u29bda02a833bd0ed@mail.gmail.com>
Message-ID: <47D9B0B9.9000200@gmx.de>

Shaun Bogan schrieb:
> I got some great help creating the following for my grammar:
> 
> assignops :
> (boolops->boolops)(firstops b2=boolops -> ^(OPERATOR ^(firstops
> ^(OPERAND $b2) ^(OPERAND $assignops))))*
> ;
> 
> To make the above clear, it is basically just:
> assignops :
>     boolops (firstops boolops)*
>     ;
> with rewrite rules.
> 
> The problem is this creates an AST that groups items in the reverse of
> how I need them.  For example:
> a = b = c;
> will create a tree that my tree walker (doing depth first) would evaluate as:
> (a = b) = c;
> 
> This is obviously wrong.  It should be a = (b = c);
> 
> Essentially, my parse tree looks fine, but I can't figure out how (if
> there is a way) to get my rewrite rule to write my AST like above.

How about?

assignops :
  (boolops->boolops)(firstops b2=boolops -> ^(OPERATOR ^(firstops
  ^(OPERAND $b2) ^(OPERAND $assignops))))?
  ;

Johannes

From smbogan at gmail.com  Thu Mar 13 15:59:10 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Thu, 13 Mar 2008 17:59:10 -0500
Subject: [antlr-interest] Rewrite rules, again!
In-Reply-To: <47D9B0B9.9000200@gmx.de>
References: <31160efe0803131532v7517fd89u29bda02a833bd0ed@mail.gmail.com>
	<47D9B0B9.9000200@gmx.de>
Message-ID: <31160efe0803131559r1ba4ace9jb8abd6befeab993d@mail.gmail.com>

Thanks for the help, unfortunately, that doesn't work, because it
quits parsing after the second = sign when it matches a = b = c;


On Thu, Mar 13, 2008 at 5:54 PM, Johannes Luber <jaluber at gmx.de> wrote:
> Shaun Bogan schrieb:
>
> > I got some great help creating the following for my grammar:
> >
> > assignops :
> > (boolops->boolops)(firstops b2=boolops -> ^(OPERATOR ^(firstops
> > ^(OPERAND $b2) ^(OPERAND $assignops))))*
> > ;
> >
> > To make the above clear, it is basically just:
> > assignops :
> >     boolops (firstops boolops)*
> >     ;
> > with rewrite rules.
> >
> > The problem is this creates an AST that groups items in the reverse of
> > how I need them.  For example:
> > a = b = c;
> > will create a tree that my tree walker (doing depth first) would evaluate as:
> > (a = b) = c;
> >
> > This is obviously wrong.  It should be a = (b = c);
> >
> > Essentially, my parse tree looks fine, but I can't figure out how (if
> > there is a way) to get my rewrite rule to write my AST like above.
>
> How about?
>
> assignops :
>  (boolops->boolops)(firstops b2=boolops -> ^(OPERATOR ^(firstops
>  ^(OPERAND $b2) ^(OPERAND $assignops))))?
>  ;
>
> Johannes
>

From parrt at cs.usfca.edu  Thu Mar 13 17:01:02 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 13 Mar 2008 17:01:02 -0700
Subject: [antlr-interest] Rewrite rules, again!
In-Reply-To: <31160efe0803131532v7517fd89u29bda02a833bd0ed@mail.gmail.com>
References: <31160efe0803131532v7517fd89u29bda02a833bd0ed@mail.gmail.com>
Message-ID: <42566769-C9FA-48CD-84B9-924A524731F3@cs.usfca.edu>

You need to alter the parse to associated things right to left.   
(...)* associates left to right.

Something like:

assign : expr '=' x ;

x : assign
    | expr
    ;

note that this is how grammars to ^ exponent operators...look for a  
rule that does that.
Ter

On Mar 13, 2008, at 3:32 PM, Shaun Bogan wrote:

> I got some great help creating the following for my grammar:
>
> assignops :
> (boolops->boolops)(firstops b2=boolops -> ^(OPERATOR ^(firstops
> ^(OPERAND $b2) ^(OPERAND $assignops))))*
> ;
>
> To make the above clear, it is basically just:
> assignops :
>    boolops (firstops boolops)*
>    ;
> with rewrite rules.
>
> The problem is this creates an AST that groups items in the reverse of
> how I need them.  For example:
> a = b = c;
> will create a tree that my tree walker (doing depth first) would  
> evaluate as:
> (a = b) = c;
>
> This is obviously wrong.  It should be a = (b = c);
>
> Essentially, my parse tree looks fine, but I can't figure out how (if
> there is a way) to get my rewrite rule to write my AST like above.
>
> Any help is greatly appreciated,
> Shaun M Bogan


From lgcraymer at yahoo.com  Thu Mar 13 20:31:43 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Thu, 13 Mar 2008 20:31:43 -0700 (PDT)
Subject: [antlr-interest] postmortem
Message-ID: <561507.55062.qm@web55915.mail.re3.yahoo.com>

Andy--

As others have pointed out, take a look at
http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760
and also:
http://www.antlr.org/article/parse.trees/index.tml

Visitors ("just have some ("by hand") code that walks the AST") have their place.  Not all language translation passes need heavy-duty language processing machinery.  Some do, though, and most benefit.  Pretty printing is one of those that benefits:  take a look at jalopy (http://jalopy.sourceforge.net/) to see what ANTLR can do with Java.

--Loring

----- Original Message ----
From: Andy Tripp <antlr at jazillian.com>
To: Loring Craymer <lgcraymer at yahoo.com>
Cc: Thomas Brandon <tbrandonau at gmail.com>; antlr-interest <antlr-interest at antlr.org>
Sent: Thursday, March 13, 2008 1:29:30 PM
Subject: Re: [antlr-interest] postmortem

Loring Craymer wrote:

> 
> For practical translation, though, parse trees are not particularly 
> helpful--they capture preconceptions about the input language and 
> contribute little to the analysis phase(s) of a translator.  Failure to 
> design a tree structure that helps in performing analysis seems 
> invariably to lead to "action-packed" grammars that become less and less 
> maintainable as they are asked to do more and more.  Eventually, you get 
> to the point where the grammar itself is virtually unmaintainable 
> because it is hidden by a vast amount of target language code.

Yea, I'm sure that would become a huge mess very quickly.

But suppose you design things so that the parser just parses (producing an AST) and does not
try to do any translation. And similarly, suppose you don't try to define
a treewalker to do translation, because that's going to have this
"huge amounts of code buried within a grammar" problem anyway.

Instead, you just have some ("by hand") code that walks the AST.
Wouldn't that code be straightforward, simply ignoring any nodes that it
doesn't need to process? For example, look at my thing that just
walks a Java AST "by hand" and pretty prints it:
http://www.jazillian.com/articles/JavaEmitter.java
Seems like this wouldn't be much more complicated to deal with a parse tree
than it is now dealing with an AST.






      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 


From belayda at gmail.com  Thu Mar 13 22:21:45 2008
From: belayda at gmail.com (Bernardo Elayda)
Date: Thu, 13 Mar 2008 22:21:45 -0700
Subject: [antlr-interest] Antlrworks boot problem on FC8
Message-ID: <3e5ed32f0803132221p3feb312cm260881a75ce69c9f@mail.gmail.com>

Hi!

I'm unable to run antlrworks-1.1.7 on Fedora Core 8 with java 1.6.

I'm running from the command line:

java -jar ./antlrworks-1.1.7.jar

I get the following response:

java: xcb_xlib_unlock: Assertion `c->xlib.lock` failed

I can run the above jar on WinXP just fine.  Suggestions?

thx in advance!
Bernardo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080313/062f7cbc/attachment.html 

From benzofurans-mail001 at yahoo.com  Fri Mar 14 03:05:49 2008
From: benzofurans-mail001 at yahoo.com (benzo)
Date: Fri, 14 Mar 2008 11:05:49 +0100
Subject: [antlr-interest] starting with language translation
In-Reply-To: <20080313151208.GB18405@badgers-in-foil.co.uk>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
	<20080313151208.GB18405@badgers-in-foil.co.uk>
Message-ID: <f341dae90803140305r4f11a52euf1739d9b57e04762@mail.gmail.com>

hi dave
funny you mention this. I once tried to grock
http://www.badgers-in-foil.co.uk/projects/as2api/

I think it also has some parser lexer functionality in it.
The problem is I couln't figure out how as2api works. As I'm new to
ruby I also didn't manage to debug it.

IYHO could as2api be something that is interesting to me?


On Thu, Mar 13, 2008 at 4:12 PM, David Holroyd
<dave at badgers-in-foil.co.uk> wrote:
> On Thu, Mar 13, 2008 at 12:48:23PM +0100, benzo wrote:
>  > 5. what is your personal favorite way doing that? stringtemplate? are
>  > there simpler methods?
>
>  For tasks outside of ANTLR-based ASTs, I actually created a specific
>  library for generating ActionScript 3 code,
>
>   http://www.badgers-in-foil.co.uk/projects/metaas/
>
>  If you're committed to using ANTLR for the whole job (which with ANTLR's
>  new support for tree-to-tree transformations is not unrealistic) then
>  using StringTemplate is a pretty good choice too, due to better
>  integration with ANTLR at the grammar definition level.
>
>
>  ta,
>  dave
>
>  --
>  http://david.holroyd.me.uk/
>

From alexander at gaengel.de  Fri Mar 14 04:06:13 2008
From: alexander at gaengel.de (=?ISO-8859-1?Q?Alexander_G=E4ngel?=)
Date: Fri, 14 Mar 2008 12:06:13 +0100
Subject: [antlr-interest] Token Attributes in Arraylist
In-Reply-To: <d3992d900803120941w45a414ebk57e899b6e660f56@mail.gmail.com>
References: <47D7FFFB.4090107@gaengel.de>
	<d3992d900803120941w45a414ebk57e899b6e660f56@mail.gmail.com>
Message-ID: <47DA5C25.9050903@gaengel.de>

Thank you this work very well,

I was just wondering if there is some way in Antlr already cause this 
way I don't use the id+= operator and Coding in Antlrworks is with out 
knowing all methods the CommenTree in the ArrayList from id+= is a bit 
difficult so I would think it would be handy to use the attributes Antlr 
gives on the Tokens also on the ArrayList.

Alexander

Richard Clark schrieb:
> On Wed, Mar 12, 2008 at 9:08 AM, Alexander G?ngel <alexander at gaengel.de> wrote:
>   
>> Is use id+=Identifier+ in a rule in my treegrammar and was wondering if
>>  there is some "easy" way to get an arrayList of just the text of the
>>  token like $if.text
>>     
>
> Usually you just embed an action to append to a list as you go.
>
> myRule
> @init { List values = new ArrayList(); }
>      : (id+=Identifier { values.add($Identifier.text);})+
>      // and do something with the list after
>      ;
>
> ...Richard
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080314/d8b427a0/attachment.html 

From dave at badgers-in-foil.co.uk  Fri Mar 14 05:35:19 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Fri, 14 Mar 2008 12:35:19 +0000
Subject: [antlr-interest] starting with language translation
In-Reply-To: <f341dae90803140305r4f11a52euf1739d9b57e04762@mail.gmail.com>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
	<20080313151208.GB18405@badgers-in-foil.co.uk>
	<f341dae90803140305r4f11a52euf1739d9b57e04762@mail.gmail.com>
Message-ID: <20080314123518.GA17209@badgers-in-foil.co.uk>

On Fri, Mar 14, 2008 at 11:05:49AM +0100, benzo wrote:
> funny you mention this. I once tried to grock
> http://www.badgers-in-foil.co.uk/projects/as2api/

Cool!  That project, being Ruby-based and targeting ActionScript 2
(rather than ActionScript 3), is completely unrelated to 'metaas'.


> I think it also has some parser lexer functionality in it.
> The problem is I couln't figure out how as2api works. As I'm new to
> ruby I also didn't manage to debug it.

Yes, it uses a hand-rolled lexer (based on regexps) and a hand coded
recursive descent parser.

  http://svn.badgers-in-foil.co.uk/as2api/trunk/as2api/lib/parse/


> IYHO could as2api be something that is interesting to me?

Well, if...

 1) your Java skills are stronger than your Ruby skills
 2) you want ActionScript 3, rather than ActionScript 2
 3) you want to generate, rather than parse AS3 code

...then you should be looking at metaas, rather than trying to pick bits
out of as2api.  You are certainly welcome to use as2api code if you
want, but I've not done anything with the project in a looooong time
now.



ta!
dave

-- 
http://david.holroyd.me.uk/

From swatt at infobal.com  Fri Mar 14 06:43:48 2008
From: swatt at infobal.com (Stuart Watt)
Date: Fri, 14 Mar 2008 09:43:48 -0400
Subject: [antlr-interest] Antlrworks boot problem on FC8
In-Reply-To: <3e5ed32f0803132221p3feb312cm260881a75ce69c9f@mail.gmail.com>
References: <3e5ed32f0803132221p3feb312cm260881a75ce69c9f@mail.gmail.com>
Message-ID: <1205502228.3140.3.camel@localhost.localdomain>

It's probably less than useful to you, but....

I just switched to FC8 yesterday, and Antlrworks is working fine for me
in the default Java, i.e., 

> [stuart at localhost ~]$ java -version
> java version "1.7.0"
> IcedTea Runtime Environment (build 1.7.0-b21)
> IcedTea 64-Bit Server VM (build 1.7.0-b21, mixed mode)
> [stuart at localhost ~]$ 

This seems like a common problem with some Java/Linux combinations, see:
https://bugs.launchpad.net/sun-java/+bug/86103

i.e., I don't think Antlrworks is the problem - and where this has been reported, it 
hits many Java GUI applications

All the best
Stuart


On Thu, 2008-03-13 at 22:21 -0700, Bernardo Elayda wrote:
> Hi!
>  
> I'm unable to run antlrworks-1.1.7 on Fedora Core 8 with java 1.6.
>  
> I'm running from the command line:
>  
> java -jar ./antlrworks-1.1.7.jar
>  
> I get the following response:
>  
> java: xcb_xlib_unlock: Assertion `c->xlib.lock` failed
>  
> I can run the above jar on WinXP just fine.  Suggestions?
>  
> thx in advance!
> Bernardo
>  
>  
>  
>  
> 
> -- 
> This message was scanned by ESVA and is believed to be clean. 
> Click here to report this message as spam.


From relationalalgebra at gmail.com  Fri Mar 14 06:53:01 2008
From: relationalalgebra at gmail.com (G R)
Date: Fri, 14 Mar 2008 14:53:01 +0100
Subject: [antlr-interest] ANother mismatched token 0!=0
Message-ID: <2ea6ad20803140653v5fdcafcbx91a65873b580d8ad@mail.gmail.com>

Hi,
I'm trying to parse a file divide in 3 sections, each section contains a
field '=' a value.
Here is an exemple that' i am trying to parse :

[config]
id = 420
revision= 1
severity.tag=@_TAG_SEVERITY
severity.high        = [1-2]
severity.medium        = [3]
severity.low        = [4-6]
severity.info        = (?:[7-9]|10|11|12|13)
[classification]
classification.severity = true
auth = ((?:109|113)\d*)
bridge = ((?:101|102|103|104|709)\d*)
[idmef]
additional_data(1).type = string
additional_data(1).meaning = blablabla
additional_data(1).data = $3
additional_data(0).type = string
additional_data(0).meaning = blublublu
additional_data(0).data = $2

I got the following grammar :

grammar GlobalConfig;
options {
    language=Java;
}
tokens {
    CONFIG_START = '[config]';
    CLASS_START = '[classification]';
    IDMEF_START = '[idmef]';
    ID = 'id';
    REV = 'revision';
    SEV_TAG = 'severity.tag';
    SEV_HI = 'severity.high';
    SEV_MED = 'severity.medium';
    SEV_LO = 'severity.low';
    SEV_IN = 'severity.info';
    CLAS_SEV = 'classification.severity';
    TRUE = 'true';
    FALSE = 'false';
}
@members{
...}
configFile
    :    CONFIG_START configPart CLASS_START classificationPart IDMEF_START
idmefPart EOF;

configPart
@init{
this.classes = new ArrayList<String>();
this.classesValues = new TreeMap<String, String>();
this.idmefPaths = new TreeMap<String, String>();
}
    :    id rev severity;
    id    :    ID '=' DIGITS NEWLINE
        {this.id = $DIGITS.text;};
    rev    :    REV '=' DIGITS NEWLINE
        {this.rev = $DIGITS.text;};
    severity
        :    severityTag severityHigh severityMed severityLow severityInfo;
        severityTag
            : SEV_TAG  '=' TAG NEWLINE
            {this.sev_tag=$TAG.text;};
        severityHigh
            : SEV_HI '=' VALUE NEWLINE
            {this.sev_high=$VALUE.text;};
        severityMed
            : SEV_MED '=' VALUE NEWLINE
            {this.sev_medium=$VALUE.text;};
        severityLow
            : SEV_LO '=' VALUE NEWLINE
            {this.sev_low=$VALUE.text;};
        severityInfo
            : SEV_IN '=' VALUE NEWLINE
            {this.sev_info=$VALUE.text;};

classificationPart
    :    CLAS_SEV '=' (on | off);
    on
    @init{this.classificationSeverity=true;}
        : TRUE NEWLINE classes;
        classes
            : (LITERAL NEWLINE)+
            {this.classes.add($LITERAL.text);};
    off
    @init{this.classificationSeverity=false;}
        : FALSE NEWLINE classesValues;
        classesValues
            : (LITERAL '=' VALUE NEWLINE)+
            {this.classesValues.put($LITERAL.text, $VALUE.text);};


idmefPart
    :    (IDMEFPATH '=' VALUE)+
    {this.idmefPaths.put($IDMEFPATH.text, $VALUE.text);};


IDMEFPATH
    :    LETTER (LETTER | SCORIES);
VALUE
    :    (SCORIES | DIGITS | LETTER)+;
DIGITS
    :    DIGIT+;

TAG
    :    '@_' LITERAL;
LITERAL
    :    LETTER (LETTER | '-' | '_')*;

fragment SCORIES
    :    '-' | '_' | ':' | '.' | '?' | '!' | '|' | '@' | '#' | '$' | '^' |
'~' | '(' | ')' | '[' | ']' | '\\' | '/' | '*';
fragment LETTER
    :    ('a'..'z' | 'A'..'Z');
fragment DIGIT
    :    '0'..'9';

NEWLINE
    :    '\r'? '\n';
WS
    : (' '|'\t'|'\n'|'\r')+ {skip();};

Each time i try to parse the config file i gave you before the grammar, I
get an error with the parser rule "id" saying :
BR.recoverFromMismatchedToken
line 2:5 mismatched input '420' expecting DIGITS
and in ma parsed tree I got :
ID = MismatchedTokenException 0!=0

I can't find a way to solved this, and i don't understand what is my error,
although I'm nearly sure this is a very stupid error.
Can anyone help ?

Thanks.
G.R
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080314/6c3f0e0b/attachment.html 

From jaluber at gmx.de  Fri Mar 14 07:15:45 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 14 Mar 2008 15:15:45 +0100
Subject: [antlr-interest] ANother mismatched token 0!=0
In-Reply-To: <2ea6ad20803140653v5fdcafcbx91a65873b580d8ad@mail.gmail.com>
References: <2ea6ad20803140653v5fdcafcbx91a65873b580d8ad@mail.gmail.com>
Message-ID: <47DA8891.9030803@gmx.de>

G R schrieb:
> Hi,
> I'm trying to parse a file divide in 3 sections, each section contains a 
> field '=' a value.
> Here is an exemple that' i am trying to parse :
> 
> [config]   
> id = 420
> revision= 1
> severity.tag=@_TAG_SEVERITY
> severity.high        = [1-2]
> severity.medium        = [3]
> severity.low        = [4-6]
> severity.info <http://severity.info>        = (?:[7-9]|10|11|12|13)
> [classification]       
> classification.severity = true
> auth = ((?:109|113)\d*)
> bridge = ((?:101|102|103|104|709)\d*)
> [idmef]
> additional_data(1).type = string
> additional_data(1).meaning = blablabla
> additional_data(1).data = $3
> additional_data(0).type = string
> additional_data(0).meaning = blublublu
> additional_data(0).data = $2
> 
> I got the following grammar :
> 
> grammar GlobalConfig;
> options {
>     language=Java;
> }
> tokens {
>     CONFIG_START = '[config]';
>     CLASS_START = '[classification]';
>     IDMEF_START = '[idmef]';
>     ID = 'id';
>     REV = 'revision';
>     SEV_TAG = 'severity.tag';
>     SEV_HI = 'severity.high';
>     SEV_MED = 'severity.medium';
>     SEV_LO = 'severity.low';
>     SEV_IN = 'severity.info <http://severity.info>';
>     CLAS_SEV = 'classification.severity';
>     TRUE = 'true';
>     FALSE = 'false';
> }
> @members{
> ...}
> configFile
>     :    CONFIG_START configPart CLASS_START classificationPart 
> IDMEF_START idmefPart EOF;
>    
> configPart
> @init{
> this.classes = new ArrayList<String>();
> this.classesValues = new TreeMap<String, String>();
> this.idmefPaths = new TreeMap<String, String>();
> }
>     :    id rev severity;
>     id    :    ID '=' DIGITS NEWLINE
>         {this.id <http://this.id> = $DIGITS.text;};
>     rev    :    REV '=' DIGITS NEWLINE
>         {this.rev = $DIGITS.text;};
>     severity
>         :    severityTag severityHigh severityMed severityLow severityInfo;
>         severityTag
>             : SEV_TAG  '=' TAG NEWLINE
>             {this.sev_tag=$TAG.text;};
>         severityHigh
>             : SEV_HI '=' VALUE NEWLINE
>             {this.sev_high=$VALUE.text;};
>         severityMed
>             : SEV_MED '=' VALUE NEWLINE
>             {this.sev_medium=$VALUE.text;};
>         severityLow
>             : SEV_LO '=' VALUE NEWLINE
>             {this.sev_low=$VALUE.text;};
>         severityInfo
>             : SEV_IN '=' VALUE NEWLINE
>             {this.sev_info=$VALUE.text;};
>    
> classificationPart
>     :    CLAS_SEV '=' (on | off);
>     on
>     @init{this.classificationSeverity=true;}
>         : TRUE NEWLINE classes;
>         classes
>             : (LITERAL NEWLINE)+
>             {this.classes.add($LITERAL.text);};
>     off
>     @init{this.classificationSeverity=false;}
>         : FALSE NEWLINE classesValues;
>         classesValues
>             : (LITERAL '=' VALUE NEWLINE)+
>             {this.classesValues.put($LITERAL.text, $VALUE.text);};
> 
>    
> idmefPart
>     :    (IDMEFPATH '=' VALUE)+
>     {this.idmefPaths.put($IDMEFPATH.text, $VALUE.text);};
> 
> 
> IDMEFPATH
>     :    LETTER (LETTER | SCORIES);
> VALUE
>     :    (SCORIES | DIGITS | LETTER)+;
> DIGITS
>     :    DIGIT+;
> 
> TAG
>     :    '@_' LITERAL;
> LITERAL
>     :    LETTER (LETTER | '-' | '_')*;
>    
> fragment SCORIES
>     :    '-' | '_' | ':' | '.' | '?' | '!' | '|' | '@' | '#' | '$' | '^' 
> | '~' | '(' | ')' | '[' | ']' | '\\' | '/' | '*';
> fragment LETTER
>     :    ('a'..'z' | 'A'..'Z');
> fragment DIGIT
>     :    '0'..'9';
>    
> NEWLINE
>     :    '\r'? '\n';
> WS
>     : (' '|'\t'|'\n'|'\r')+ {skip();};
> 
> Each time i try to parse the config file i gave you before the grammar, 
> I get an error with the parser rule "id" saying :
> BR.recoverFromMismatchedToken
> line 2:5 mismatched input '420' expecting DIGITS
> and in ma parsed tree I got :
> ID = MismatchedTokenException 0!=0
> 
> I can't find a way to solved this, and i don't understand what is my 
> error, although I'm nearly sure this is a very stupid error.
> Can anyone help ?
> 
> Thanks.
> G.R

I believe that you should change at least all literals which are called 
from several places into own fragment rules. Otherwise several tokens 
are trying to recognize the same input.

Johannes

From antlr at jazillian.com  Fri Mar 14 07:38:12 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Fri, 14 Mar 2008 10:38:12 -0400
Subject: [antlr-interest] Converting AST back to code
In-Reply-To: <BLU124-W14249843319412BBD36AA184090@phx.gbl>
References: <638378.34558.qm@web55907.mail.re3.yahoo.com>	<47D98EAA.2060902@jazillian.com>
	<BLU124-W14249843319412BBD36AA184090@phx.gbl>
Message-ID: <47DA8DD4.8030107@jazillian.com>

Adam,
You probably need to spell out the problem a bit more.
Whatever your approach is for printing a full tree...why wouldn't
it work for subtrees, too?

Andy

Adam Cooney wrote:
> Hi,
>   I was wondering if someone could tell me if its possible to use a 
> JavaAST grammar to convert sub-trees (of a full tree) to their 
> respective code segments. For instance:
> TREE:
> COMPILATION_UNIT, TYPE_IMPORT_ON_DEMAND_DECLARATION, SELECT, java, io, 
> TYPE_IMPORT_ON_DEMAND_DECLARATION, SELECT, java, util, 
> CLASS_DECLARATION, MODIFIERS, public, Input1b, CLASS_BODY,
> METHOD_DECLARATION, MODIFIERS, public, static, 132, main,
> FORMAL_PARAMETERS, FORMAL_PARAMETER, MODIFIERS, ARRAY_OF, String, args,
> BLOCK, EXPRESSION_STATEMENT, CALL, SELECT, SELECT, System, out, println,
> ARGUMENTS, "Test 2"
> 
> SUBTREES:
> [COMPILATION_UNIT, TYPE_IMPORT_ON_DEMAND_DECLARATION, SELECT, java, io, 
> TYPE_IM
> PORT_ON_DEMAND_DECLARATION, SELECT, java, util, CLASS_DECLARATION, 
> MODIFIERS, pu
> blic, Input1b, CLASS_BODY]
> [METHOD_DECLARATION, MODIFIERS, public, static, 132, main]
> [FORMAL_PARAMETERS, FORMAL_PARAMETER, MODIFIERS, ARRAY_OF, String, args]
> [BLOCK, EXPRESSION_STATEMENT, CALL, SELECT, SELECT, System, out, println
> [ARGUMENTS, "Test 2"]
>  
> I can covert the Tree into the original code no problem, im just 
> wondering if there is a way of doing it with sub-trees? Or perhaps im 
> just looking at this in the completely wrong way
>  
> 
> ------------------------------------------------------------------------
> She said what? About who? Shameful celebrity quotes on Search Star! 
> <http://www.msnsearchstar.com>


From benzofurans-mail001 at yahoo.com  Fri Mar 14 07:59:01 2008
From: benzofurans-mail001 at yahoo.com (benzo)
Date: Fri, 14 Mar 2008 15:59:01 +0100
Subject: [antlr-interest] starting with language translation
In-Reply-To: <20080314123518.GA17209@badgers-in-foil.co.uk>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
	<20080313151208.GB18405@badgers-in-foil.co.uk>
	<f341dae90803140305r4f11a52euf1739d9b57e04762@mail.gmail.com>
	<20080314123518.GA17209@badgers-in-foil.co.uk>
Message-ID: <f341dae90803140759u589d899fv19348c4f312f0439@mail.gmail.com>

hi dave
I sent you some questions about metaas in your mailinglist.

//benzo

On Fri, Mar 14, 2008 at 1:35 PM, David Holroyd
<dave at badgers-in-foil.co.uk> wrote:
> On Fri, Mar 14, 2008 at 11:05:49AM +0100, benzo wrote:
>  > funny you mention this. I once tried to grock
>  > http://www.badgers-in-foil.co.uk/projects/as2api/
>
>  Cool!  That project, being Ruby-based and targeting ActionScript 2
>  (rather than ActionScript 3), is completely unrelated to 'metaas'.
>
>
>
>  > I think it also has some parser lexer functionality in it.
>  > The problem is I couln't figure out how as2api works. As I'm new to
>  > ruby I also didn't manage to debug it.
>
>  Yes, it uses a hand-rolled lexer (based on regexps) and a hand coded
>  recursive descent parser.
>
>   http://svn.badgers-in-foil.co.uk/as2api/trunk/as2api/lib/parse/
>
>
>
>  > IYHO could as2api be something that is interesting to me?
>
>  Well, if...
>
>   1) your Java skills are stronger than your Ruby skills
>   2) you want ActionScript 3, rather than ActionScript 2
>   3) you want to generate, rather than parse AS3 code
>
>  ...then you should be looking at metaas, rather than trying to pick bits
>  out of as2api.  You are certainly welcome to use as2api code if you
>  want, but I've not done anything with the project in a looooong time
>  now.
>
>
>
>
>
>  ta!
>  dave
>
>  --
>  http://david.holroyd.me.uk/
>

From nelson.ana at gmail.com  Fri Mar 14 08:16:39 2008
From: nelson.ana at gmail.com (Ana Nelson)
Date: Fri, 14 Mar 2008 15:16:39 +0000
Subject: [antlr-interest] starting with language translation
In-Reply-To: <f341dae90803140759u589d899fv19348c4f312f0439@mail.gmail.com>
References: <f341dae90803130448hd858c4ds3fe30c74c25b5b95@mail.gmail.com>
	<20080313151208.GB18405@badgers-in-foil.co.uk>
	<f341dae90803140305r4f11a52euf1739d9b57e04762@mail.gmail.com>
	<20080314123518.GA17209@badgers-in-foil.co.uk>
	<f341dae90803140759u589d899fv19348c4f312f0439@mail.gmail.com>
Message-ID: <a7d6d2740803140816k57f0966fgdd666fbbc56f38b0@mail.gmail.com>

I have to say that this thread really clarified a lot of points for me. I'm
reasonably proficient with the basics of ANTLR but my applications have all
been simple line-based parsing so I haven't had a need for ASTs. This
discussion made their purpose a lot more clear to me. Thanks everyone. :-)



On 14/03/2008, benzo <benzofurans-mail001 at yahoo.com> wrote:
>
> hi dave
> I sent you some questions about metaas in your mailinglist.
>
>
> //benzo
>
>
> On Fri, Mar 14, 2008 at 1:35 PM, David Holroyd
> <dave at badgers-in-foil.co.uk> wrote:
> > On Fri, Mar 14, 2008 at 11:05:49AM +0100, benzo wrote:
> >  > funny you mention this. I once tried to grock
> >  > http://www.badgers-in-foil.co.uk/projects/as2api/
> >
> >  Cool!  That project, being Ruby-based and targeting ActionScript 2
> >  (rather than ActionScript 3), is completely unrelated to 'metaas'.
> >
> >
> >
> >  > I think it also has some parser lexer functionality in it.
> >  > The problem is I couln't figure out how as2api works. As I'm new to
> >  > ruby I also didn't manage to debug it.
> >
> >  Yes, it uses a hand-rolled lexer (based on regexps) and a hand coded
> >  recursive descent parser.
> >
> >   http://svn.badgers-in-foil.co.uk/as2api/trunk/as2api/lib/parse/
> >
> >
> >
> >  > IYHO could as2api be something that is interesting to me?
> >
> >  Well, if...
> >
> >   1) your Java skills are stronger than your Ruby skills
> >   2) you want ActionScript 3, rather than ActionScript 2
> >   3) you want to generate, rather than parse AS3 code
> >
> >  ...then you should be looking at metaas, rather than trying to pick
> bits
> >  out of as2api.  You are certainly welcome to use as2api code if you
> >  want, but I've not done anything with the project in a looooong time
> >  now.
> >
> >
> >
> >
> >
> >  ta!
> >  dave
> >
> >  --
> >  http://david.holroyd.me.uk/
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080314/7318addb/attachment-0001.html 

From nelson.ana at gmail.com  Fri Mar 14 08:45:34 2008
From: nelson.ana at gmail.com (Ana Nelson)
Date: Fri, 14 Mar 2008 15:45:34 +0000
Subject: [antlr-interest] How do you document your grammars?
In-Reply-To: <77938826@web.de>
References: <77938826@web.de>
Message-ID: <a7d6d2740803140845mc60b9c3u8900f8646c682caf@mail.gmail.com>

Hi, Ralf,

HTML might be simpler to generate than LaTeX, plus it's a more natural
choice if you want to hyperlink things. :-)

It seems like this should be a straightforward (and interesting) thing to
do, parsing your grammar file itself and then generating HTML. (Of course,
I'm saying that without having tried it.) Have you tried an approach like
this or did you do something else?

If you have unit tests for your grammar with descriptive names that can also
be a nice way to generate documentation.

Regards,
Ana


On 12/03/2008, Ralf Cremerius <ralf_c at web.de> wrote:
>
> Hello,
>
> I've got to build some documentation for my ANTLR project now and found
> the question, how to do this efficiently, to be very common?
> In my case, nothing absolutely magical (like complex actions, etc.)
> happens inside the ANTLR grammar, so the EBNF-notation seems to be very
> suitable to document the recognized language.
> Moreover it would be very practical to have a EBNF-grammar with clickable
> hyperlinks between rule occurences and their respective definitions.
> I tried to do this with LaTeX, but it is a tedious and error prone task.
> Has anyone a better solution, how to do it (ideally generating some of the
> contents)?
>
> Of course, ANTLRWorks would theoretically have the capabilities to
> accomplish this - but it isn't made to generate hyperlinked EBNFs.  ;-)
>
> Best regards,
>   Ralf
> _______________________________________________________________
> Schon geh?rt? Der neue WEB.DE MultiMessenger kann`s mit allen:
> http://www.produkte.web.de/messenger/?did=3015
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080314/7af5fabc/attachment.html 

From alexander at gaengel.de  Fri Mar 14 09:22:19 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Fri, 14 Mar 2008 17:22:19 +0100
Subject: [antlr-interest] =?iso-8859-15?q?=ABthrows-spec=BB_in_Rules?=
Message-ID: <47DAA63B.7040103@gaengel.de>

In the Antlr Book 4.3 Rules it says there can be an ?throws-spec? and an 
?exceptions-spec?

but I don't find an example how to use these.

I would like to throw my own exception inside my Tree grammar if some 
actions fail.

Thanks for your help.

Alexander

From qinyong.geo at yahoo.com  Fri Mar 14 09:31:47 2008
From: qinyong.geo at yahoo.com (QinYong)
Date: Fri, 14 Mar 2008 09:31:47 -0700 (PDT)
Subject: [antlr-interest] java.lang.NullPointerException
Message-ID: <610014.87495.qm@web30703.mail.mud.yahoo.com>

HI
if UP or DOWN keyword is in ANTLRv3 tokens grammar

tokens {
 UP='up';
}
or
tokens {
 DOWN='down';
}

I got following java.lang.NullPointerException , who can tell me why?

[antlr:antlr3] ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
[antlr:antlr3] error(10):  internal error: C:\eclipse3.1.1\workspace\CobolParser\grammar\Cobol.g : java.lang.NullPointerException
[antlr:antlr3] org.antlr.tool.AssignTokenTypesWalker.aliasTokenIDsAndLiterals(AssignTokenTypesWalker.java:257)
[antlr:antlr3] org.antlr.tool.AssignTokenTypesWalker.assignTypes(AssignTokenTypesWalker.java:211)
[antlr:antlr3] org.antlr.tool.AssignTokenTypesWalker.grammar(AssignTokenTypesWalker.java:375)
[antlr:antlr3] org.antlr.tool.Grammar.setGrammarContent(Grammar.java:547)
[antlr:antlr3] org.antlr.tool.Grammar.<init>(Grammar.java:456)
[antlr:antlr3] org.antlr.Tool.getGrammar(Tool.java:331)
[antlr:antlr3] org.antlr.Tool.process(Tool.java:267)
[antlr:antlr3] org.antlr.Tool.main(Tool.java:70)


      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs

From rdclark at gmail.com  Fri Mar 14 09:47:00 2008
From: rdclark at gmail.com (Richard Clark)
Date: Fri, 14 Mar 2008 09:47:00 -0700
Subject: [antlr-interest] java.lang.NullPointerException
In-Reply-To: <610014.87495.qm@web30703.mail.mud.yahoo.com>
References: <610014.87495.qm@web30703.mail.mud.yahoo.com>
Message-ID: <d3992d900803140947g248a53c9kabb86640a7aca4d@mail.gmail.com>

UP and DOWN are pre-defined token types for use with Abstract Syntax Trees.

 ...Richard

From pat at tireme.fr  Fri Mar 14 09:51:57 2008
From: pat at tireme.fr (Pierre Attar)
Date: Fri, 14 Mar 2008 17:51:57 +0100
Subject: [antlr-interest] greedy question
In-Reply-To: <47D7FFFB.4090107@gaengel.de>
References: <47D7FFFB.4090107@gaengel.de>
Message-ID: <47DAAD2D.1040400@tireme.fr>

Hi,

I have some problems understanding lexer recognition.  Here is my need.

Using the following string of characters, (string["using ""quotes"""]), 
I want to extract the content : (using ""quotes"").
I wrote the following rule;

string : 'string["' (options {greedy=false;} : . ) '"]' ;


This works for (string["essai"]) but does not works in my sample 
(string["using ""quotes"""]) and I have a MismachedSetException.

I try many different configurations but do not figure out how to solve 
the string containing quotes.
Is is possible to use the greedy feature in this case or should I 
explore an other antlr recognition feature ?

Any idea are welcome, Pierre

>


From darien.hager at etelos-inc.com  Fri Mar 14 10:10:38 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Fri, 14 Mar 2008 10:10:38 -0700
Subject: [antlr-interest] java.lang.NullPointerException
In-Reply-To: <d3992d900803140947g248a53c9kabb86640a7aca4d@mail.gmail.com>
References: <610014.87495.qm@web30703.mail.mud.yahoo.com>
	<d3992d900803140947g248a53c9kabb86640a7aca4d@mail.gmail.com>
Message-ID: <c8c997f40803141010s6a7b987epa4fa4c6615751559@mail.gmail.com>

On 3/14/08, Richard Clark <rdclark at gmail.com> wrote:
>
> UP and DOWN are pre-defined token types for use with Abstract Syntax
> Trees.
>
>
>   ...Richard
>

This seems like a ripe place for throwing a "that token is reserved" error.
(Ditto for EOF.)

There may be some other reserved names depending on the runtime you use. For
example, the Java runtime writes tokens as public static final properties,
so tokens can't be anything that conflicts with a reserved java keyword.
(Fortunately, the fact that they have to start with an uppercase letter
tends to help here.)

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080314/e0781fa0/attachment.html 

From chiptv at web.de  Fri Mar 14 12:47:07 2008
From: chiptv at web.de (Michael Ernst)
Date: Fri, 14 Mar 2008 20:47:07 +0100
Subject: [antlr-interest] Rewrite Problem; Rule terminates without exception.
Message-ID: <636587991@web.de>

Hi,

I want to rewrite  =, +=, -= *= and /= into a better parseable tree. The following rule terminates without any Exception, but I don?t know why. Any ideas?


expression
            : 
            //orExpression (assignmentOperator^ expression)? // works fine, but that?s not the desired result.
            a=orExpression
            (
              (ASSIGNMENT expression) -> ^(ASSIGNMENT $a expression)
            | (ADDITION_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(PLUS $a expression))
            | (MINUS_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(MINUS $a expression))
            | (MULTIPLY_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(MULTIPLY $a expression))
            | (DIVIDE_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(DIVIDE $a expression))
            | 
            ) // terminates without exception
            ;
            
assignmentOperator
            :           ASSIGNMENT // =
            |           ADDITION_ASSIGNMENT // +=
            |           MINUS_ASSIGNMENT // -=
            |           MULTIPLY_ASSIGNMENT // *=
            |           DIVIDE_ASSIGNMENT // /=
            ;

Thanks in advance!

Regards
Michael

______________________________________________________
Bis 50 MB Dateianh?nge? Kein Problem!
http://freemail.web.de/club/landingpage.htm/?mc=025556


From ymo.mail at gmail.com  Fri Mar 14 18:28:44 2008
From: ymo.mail at gmail.com (Ymo)
Date: Fri, 14 Mar 2008 21:28:44 -0400
Subject: [antlr-interest] weird errors in antlr3
Message-ID: <7196ed5b0803141828gb157cdbg9f65b00a5af76759@mail.gmail.com>

Anyone can explain why i keep getting this error ? I am a newby in grammar
land


input file :
<%for select="heh" /%for>

output error:
line 1:14 no viable alternative at character 't'
line 1:15 no viable alternative at character 'e'
line 1:17 mismatched character 't' expecting 'e'
BR.recoverFromMismatchedToken
line 0:-1 mismatched input '<EOF>' expecting '\"'
BR.recoverFromMismatchedToken
tree=nil



grammar :
grammar TTest;
options {
   k=2;
   backtrack=true;
   memoize=true;
   output=AST;
   ASTLabelType=CommonTree;
}

@lexer::members {
protected boolean enumIsKeyword = true;
}

@lexer::header {
package org.ttest.core;
}

@parser::header {
package org.ttest.core;

import java.util.Set;
import java.util.HashSet;

}

compilationUnit
    : templateForStatement
    ;

templateForStatement
    :    '<%for' templateXpathStatement '/%for>'
    ;

templateXpathStatement
    : 'select' '=' xpathExpression
    ;

xpathExpression
    : ( '\"' (~'\"')* '\"'
    | '\'' (~'\'')* '\''
    )
    ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;

COMMENT
    :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    ;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080314/a390db5e/attachment.html 

From carl.crowder at gmail.com  Sat Mar 15 09:26:20 2008
From: carl.crowder at gmail.com (Carl Crowder)
Date: Sat, 15 Mar 2008 16:26:20 +0000
Subject: [antlr-interest] Calling templates in actions
Message-ID: <47DBF8AC.2020104@gmail.com>

Hello,

I'm writing a grammar for a scripting language which gets translated 
into Java. Basically I want to add the Java gumph like imports, class 
definition at the top of the generated class.

At the minute I'm thinking I can do it in the @init action on the first 
rule in the tree parser like this:

script
@init { %start(); }
: constructor function_def* EOF;

However that simply instantiates a template. Doing $st = $start(); just 
sets retval.st to be that template. What I need is some way to chain 
templates together from within an action. Is that possible? Or is there 
another, better solution for this?

Thanks!
Carl


From parrt at cs.usfca.edu  Sat Mar 15 18:31:34 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 15 Mar 2008 18:31:34 -0700
Subject: [antlr-interest] Calling templates in actions
In-Reply-To: <47DBF8AC.2020104@gmail.com>
References: <47DBF8AC.2020104@gmail.com>
Message-ID: <AD3525F7-A2EA-4111-8BBD-A6E20B957EE8@cs.usfca.edu>

Insert templates into other templates using ST attributes and then  
"set attribute".

output(headers,cruft) ::= <<
<headers>
<cruft>
 >>

Then just create an output template and then set the headers template  
to another template instance.
Ter
On Mar 15, 2008, at 9:26 AM, Carl Crowder wrote:

> Hello,
>
> I'm writing a grammar for a scripting language which gets  
> translated into Java. Basically I want to add the Java gumph like  
> imports, class definition at the top of the generated class.
>
> At the minute I'm thinking I can do it in the @init action on the  
> first rule in the tree parser like this:
>
> script
> @init { %start(); }
> : constructor function_def* EOF;
>
> However that simply instantiates a template. Doing $st = $start();  
> just sets retval.st to be that template. What I need is some way to  
> chain templates together from within an action. Is that possible?  
> Or is there another, better solution for this?
>
> Thanks!
> Carl
>


From antlr at mirality.co.nz  Sat Mar 15 19:09:06 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sun, 16 Mar 2008 15:09:06 +1300
Subject: [antlr-interest] ANother mismatched token 0!=0
In-Reply-To: <2ea6ad20803140653v5fdcafcbx91a65873b580d8ad@mail.gmail.com
 >
References: <2ea6ad20803140653v5fdcafcbx91a65873b580d8ad@mail.gmail.com>
Message-ID: <20080316020922.13C7811EC9E@www.antlr.org>

At 02:53 15/03/2008, G R wrote:
>IDMEFPATH
>     :    LETTER (LETTER | SCORIES);
>VALUE
>     :    (SCORIES | DIGITS | LETTER)+;
>DIGITS
>     :    DIGIT+;
>
>TAG
>     :    '@_' LITERAL;
>LITERAL
>     :    LETTER (LETTER | '-' | '_')*;
>
>fragment SCORIES
>     :    '-' | '_' | ':' | '.' | '?' | '!' | '|' | '@' | '#' | 
> '$' | '^' | '~' | '(' | ')' | '[' | ']' | '\\' | '/' | '*';
>fragment LETTER
>     :    ('a'..'z' | 'A'..'Z');
>fragment DIGIT
>     :    '0'..'9';
>
>NEWLINE
>     :    '\r'? '\n';
>WS
>     : (' '|'\t'|'\n'|'\r')+ {skip();};

These rules are going to give you a lot of problems, since you 
have a lot of overlaps in the public rules.

Remember that lexing is done first and context-free; all public 
rules are viable output tokens.  Given the excerpt above, "423" 
will *always* be a VALUE and not a DIGITS, since they're of 
equivalent length and the VALUE rule is listed first.  By 
contrast, sometimes you won't get NEWLINE tokens emitted since 
they may be swallowed up within a WS token.


From chiptv at web.de  Sun Mar 16 05:57:46 2008
From: chiptv at web.de (Michael Ernst)
Date: Sun, 16 Mar 2008 13:57:46 +0100
Subject: [antlr-interest] Rewrite Problem;
	Rule terminates without exception.
In-Reply-To: <636587991@web.de>
Message-ID: <000001c88765$55077d60$6702a8c0@note>

Hi,

I could solve the problem by using syntactic prdicates, but there is still a
problem. When I rewrite the tree and referencing the label twice, I get no
tree duplicate attached to the tree. I thought I could duplicate nodes and
trees by referencing them more than one time in a rewrite rule (Chapter 7;
Duplicating Nodes and Trees (sample: dump : INT -> INT INT ;)).

Regards
Michael

-----Urspr?ngliche Nachricht-----
Von: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] Im Auftrag von Michael Ernst
Gesendet: Freitag, 14. M?rz 2008 20:47
An: antlr-interest at antlr.org
Betreff: [antlr-interest] Rewrite Problem; Rule terminates without
exception.

Hi,

I want to rewrite  =, +=, -= *= and /= into a better parseable tree. The
following rule terminates without any Exception, but I don?t know why. Any
ideas?


expression
            : 
            //orExpression (assignmentOperator^ expression)? // works fine,
but that?s not the desired result.
            a=orExpression
            (
              (ASSIGNMENT expression) -> ^(ASSIGNMENT $a expression)
            | (ADDITION_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(PLUS $a
expression))
            | (MINUS_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(MINUS $a
expression))
            | (MULTIPLY_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(MULTIPLY
$a expression))
            | (DIVIDE_ASSIGNMENT expression) -> ^(ASSIGNMENT $a ^(DIVIDE $a
expression))
            | 
            ) // terminates without exception
            ;
            
assignmentOperator
            :           ASSIGNMENT // =
            |           ADDITION_ASSIGNMENT // +=
            |           MINUS_ASSIGNMENT // -=
            |           MULTIPLY_ASSIGNMENT // *=
            |           DIVIDE_ASSIGNMENT // /=
            ;

Thanks in advance!

Regards
Michael

______________________________________________________
Bis 50 MB Dateianh?nge? Kein Problem!
http://freemail.web.de/club/landingpage.htm/?mc=025556


From antlr at mirality.co.nz  Sun Mar 16 06:15:32 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 17 Mar 2008 02:15:32 +1300
Subject: [antlr-interest] Rewrite Problem;
 Rule terminates without  exception.
In-Reply-To: <000001c88765$55077d60$6702a8c0@note>
References: <636587991@web.de>
 <000001c88765$55077d60$6702a8c0@note>
Message-ID: <20080316131553.903ED11ED10@www.antlr.org>

At 01:57 17/03/2008, Michael Ernst wrote:
 >When I rewrite the tree and referencing the label twice, I get
 >no tree duplicate attached to the tree. I thought I could
 >duplicate nodes and trees by referencing them more than one
 >time in a rewrite rule (Chapter 7; Duplicating Nodes and
 >Trees (sample: dump : INT -> INT INT ;)).

I think you have to give them explicit labels when duplicating, 
otherwise it assumes you're referring to separate instances.  So 
this should work:

   dump : a=INT -> $a $a;


From chiptv at web.de  Sun Mar 16 08:09:55 2008
From: chiptv at web.de (Michael Ernst)
Date: Sun, 16 Mar 2008 16:09:55 +0100
Subject: [antlr-interest] Rewrite Problem;
	Rule terminates without  exception.
In-Reply-To: <E1JasiP-0006zK-00@mx28.web.de>
Message-ID: <000101c88777$cac400c0$6702a8c0@note>

Hi,

I think that's exactly what I have done (previous sample).

expression
	: ...
	| (orExpression ADDITION_ASSIGNMENT) => a=orExpression
ADDITION_ASSIGNMENT expression -> ^(ASSIGNMENT $a ^(PLUS $a expression))
	...


Parsing "a += b;" results in following AST: (ASSIGNMENT a (PLUS b))

I get the following warning during debugging:
[org.antlr.works.debugger.tree.DBASTModel - event 1604] Warning: [addChild]
Child node 97 not found, ignoring.

Thanks for your help.


Regards
Michael

-----

At 01:57 17/03/2008, Michael Ernst wrote:
 >When I rewrite the tree and referencing the label twice, I get
 >no tree duplicate attached to the tree. I thought I could
 >duplicate nodes and trees by referencing them more than one
 >time in a rewrite rule (Chapter 7; Duplicating Nodes and
 >Trees (sample: dump : INT -> INT INT ;)).

I think you have to give them explicit labels when duplicating, 
otherwise it assumes you're referring to separate instances.  So 
this should work:

dump : a=INT -> $a $a;


From relationalalgebra at gmail.com  Sun Mar 16 08:12:58 2008
From: relationalalgebra at gmail.com (G R)
Date: Sun, 16 Mar 2008 16:12:58 +0100
Subject: [antlr-interest] ANother mismatched token 0!=0
In-Reply-To: <47dc8151.2687460a.72be.0512SMTPIN_ADDED@mx.google.com>
References: <2ea6ad20803140653v5fdcafcbx91a65873b580d8ad@mail.gmail.com>
	<47dc8151.2687460a.72be.0512SMTPIN_ADDED@mx.google.com>
Message-ID: <2ea6ad20803160812o193e9798j71f826eaad765395@mail.gmail.com>

Thanks Gavin.
I have rearange my rules for my literals, but i still got some errors with
my NEWLINE token.
You answer my question before i could write it down :)
Thanks again.

:beer:



2008/3/16, Gavin Lambert <antlr at mirality.co.nz>:
>
> At 02:53 15/03/2008, G R wrote:
> >IDMEFPATH
> >     :    LETTER (LETTER | SCORIES);
> >VALUE
> >     :    (SCORIES | DIGITS | LETTER)+;
> >DIGITS
> >     :    DIGIT+;
> >
> >TAG
> >     :    '@_' LITERAL;
> >LITERAL
> >     :    LETTER (LETTER | '-' | '_')*;
> >
> >fragment SCORIES
> >     :    '-' | '_' | ':' | '.' | '?' | '!' | '|' | '@' | '#' |
> > '$' | '^' | '~' | '(' | ')' | '[' | ']' | '\\' | '/' | '*';
> >fragment LETTER
> >     :    ('a'..'z' | 'A'..'Z');
> >fragment DIGIT
> >     :    '0'..'9';
> >
> >NEWLINE
> >     :    '\r'? '\n';
> >WS
> >     : (' '|'\t'|'\n'|'\r')+ {skip();};
>
>
> These rules are going to give you a lot of problems, since you
> have a lot of overlaps in the public rules.
>
> Remember that lexing is done first and context-free; all public
> rules are viable output tokens.  Given the excerpt above, "423"
> will *always* be a VALUE and not a DIGITS, since they're of
> equivalent length and the VALUE rule is listed first.  By
> contrast, sometimes you won't get NEWLINE tokens emitted since
> they may be swallowed up within a WS token.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080316/3168887f/attachment.html 

From parrt at cs.usfca.edu  Sun Mar 16 09:15:44 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 16 Mar 2008 10:15:44 -0600
Subject: [antlr-interest] Rewrite Problem;
	Rule terminates without exception.
In-Reply-To: <000001c88765$55077d60$6702a8c0@note>
References: <000001c88765$55077d60$6702a8c0@note>
Message-ID: <F2A4DF2D-7D90-4A8D-9457-D7F1DCED71F5@cs.usfca.edu>


On Mar 16, 2008, at 6:57 AM, Michael Ernst wrote:

> Hi,
>
> I could solve the problem by using syntactic prdicates, but there  
> is still a
> problem. When I rewrite the tree and referencing the label twice, I  
> get no
> tree duplicate attached to the tree. I thought I could duplicate  
> nodes and
> trees by referencing them more than one time in a rewrite rule  
> (Chapter 7;
> Duplicating Nodes and Trees (sample: dump : INT -> INT INT ;)).

Hi Michael,

That should work; either something else is going on or it's a bug;  
can you narrow it down to a simple rule like that that doesnt' work?
Ter

From chiptv at web.de  Sun Mar 16 10:54:10 2008
From: chiptv at web.de (Michael Ernst)
Date: Sun, 16 Mar 2008 18:54:10 +0100
Subject: [antlr-interest] Rewrite Problem;
	Rule terminates without exception.
In-Reply-To: <F2A4DF2D-7D90-4A8D-9457-D7F1DCED71F5@cs.usfca.edu>
Message-ID: <000501c8878e$bcf29760$6702a8c0@note>

Hi Terence,

A little subset of my grammar:

grammar Test;

options {	output=AST;
	}
	
expressionStatement 
	:	expression ';'!
	;
	
expression
	:	(orExpression ADDITION_ASSIGNMENT) => a=orExpression
ADDITION_ASSIGNMENT expression ->  ^(ASSIGNMENT $a ^(PLUS $a expression))
	|	orExpression
	;
	
orExpression 
	:	IDENTIFIER;
	
assignmentOperator
	:	ASSIGNMENT
	|	ADDITION_ASSIGNMENT
	;
	
ASSIGNMENT 		:	'=';
ADDITION_ASSIGNMENT 	:	'+=';
PLUS 			:	'+';
	

IDENTIFIER
	: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;
	
WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;


The resulting tree "a += b;": (ASSIGNMENT a (PLUS b))


Regards
Michael


On Mar 16, 2008, at 6:57 AM, Michael Ernst wrote:

> Hi,
>
> I could solve the problem by using syntactic prdicates, but there  
> is still a
> problem. When I rewrite the tree and referencing the label twice, I  
> get no
> tree duplicate attached to the tree. I thought I could duplicate  
> nodes and
> trees by referencing them more than one time in a rewrite rule  
> (Chapter 7;
> Duplicating Nodes and Trees (sample: dump : INT -> INT INT ;)).

Hi Michael,

That should work; either something else is going on or it's a bug;  
can you narrow it down to a simple rule like that that doesnt' work?
Ter


From antlr at mirality.co.nz  Sun Mar 16 11:44:40 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 17 Mar 2008 07:44:40 +1300
Subject: [antlr-interest] Rewrite Problem;
 Rule terminates without   exception.
In-Reply-To: <000101c88777$cac400c0$6702a8c0@note>
References: <E1JasiP-0006zK-00@mx28.web.de>
	<000101c88777$cac400c0$6702a8c0@note>
Message-ID: <20080316184528.D0C9511ED34@www.antlr.org>

At 04:09 17/03/2008, Michael Ernst wrote:
 >expression
 >	: ...
 >	| (orExpression ADDITION_ASSIGNMENT) => a=orExpression
 >ADDITION_ASSIGNMENT expression -> ^(ASSIGNMENT $a ^(PLUS $a
 >expression))
 >	...
 >
 >
 >Parsing "a += b;" results in following AST: (ASSIGNMENT a (PLUS
 >b))

Ok, best guess at what's happening here is that it's a runtime 
issue; $a is a tree node object and it's trying to insert the 
exact same object into the tree twice, which will end up adding it 
in one place and then moving it to the other (since the 
parent/child links will get altered).  (It could even corrupt the 
tree if it wasn't implemented carefully; I haven't checked.)

While I don't really know anything about the Java implementation, 
is it possible to insert an explicit duplication request in 
there?  Something like:

expression
@init { CommonTree b; }
   : ...
   | (orExpression ADDITION_ASSIGNMENT) => a=orExpression
     ADDITION_ASSIGNMENT expression { $b = $a.clone(); }
       -> ^(ASSIGNMENT $a ^(PLUS $b expression))
   ...
   ;


From chiptv at web.de  Sun Mar 16 13:09:45 2008
From: chiptv at web.de (Michael Ernst)
Date: Sun, 16 Mar 2008 21:09:45 +0100
Subject: [antlr-interest] Rewrite Problem;
	Rule terminates without   exception.
In-Reply-To: <E1JaxrM-0001Jy-00@mx28.web.de>
Message-ID: <000001c887a1$ae1698a0$6702a8c0@note>

Hi Gavin,

Nice roundtrip but it's unfortunately not possible, becouse you couldn't
reference to language dependent syntax constructs inside a rewrite rule. $b
is neither a token nor a rule or a return value.


Regards
Michael




At 04:09 17/03/2008, Michael Ernst wrote:
 >expression
 >	: ...
 >	| (orExpression ADDITION_ASSIGNMENT) => a=orExpression
 >ADDITION_ASSIGNMENT expression -> ^(ASSIGNMENT $a ^(PLUS $a
 >expression))
 >	...
 >
 >
 >Parsing "a += b;" results in following AST: (ASSIGNMENT a (PLUS
 >b))

Ok, best guess at what's happening here is that it's a runtime 
issue; $a is a tree node object and it's trying to insert the 
exact same object into the tree twice, which will end up adding it 
in one place and then moving it to the other (since the 
parent/child links will get altered).  (It could even corrupt the 
tree if it wasn't implemented carefully; I haven't checked.)

While I don't really know anything about the Java implementation, 
is it possible to insert an explicit duplication request in 
there?  Something like:

expression
@init { CommonTree b; }
   : ...
   | (orExpression ADDITION_ASSIGNMENT) => a=orExpression
     ADDITION_ASSIGNMENT expression { $b = $a.clone(); }
       -> ^(ASSIGNMENT $a ^(PLUS $b expression))
   ...
   ;


From lefevrol at yahoo.com  Sun Mar 16 13:27:00 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Sun, 16 Mar 2008 21:27:00 +0100
Subject: [antlr-interest] Rewrite Problem;
	Rule terminates without   exception.
In-Reply-To: <20080316184528.D0C9511ED34@www.antlr.org>
References: <E1JasiP-0006zK-00@mx28.web.de>	<000101c88777$cac400c0$6702a8c0@note>
	<20080316184528.D0C9511ED34@www.antlr.org>
Message-ID: <frjvql$p6v$1@ger.gmane.org>

> While I don't really know anything about the Java implementation, is it 
> possible to insert an explicit duplication request in there?

I don't see anything in org.antlr.runtime.tree.BaseTree that would prevent 
a node from being added multiple times in different places (unlike, say, in 
  javax.swing.tree.DefaultMutableTreeNode) [*] but if you do that you no 
longer have a tree, at least in general: you may have a DAG, with cycles. 
Since walkers (e.g., evaluators) assume a "real" tree, that would be bad. 
ANTLR should probably be stricter.

-- O.L.

[*] If I understand the code correctly, it has a check to prevent a node 
from adding itself to itself as a child but that's it.


From alexander at gaengel.de  Sun Mar 16 14:47:55 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Sun, 16 Mar 2008 22:47:55 +0100
Subject: [antlr-interest] Stop ASTWalker on own Exception
Message-ID: <47DD958B.2010705@gaengel.de>

I throw under some circumstances in an Action an exception.

Is it possible to stop the astwalker when the excetion occurs? In the 
book the example only works when an RecognitionException occurs.

The rule is like this:
rule: Identifier
    {
        ...owncode...
               if(error){
                    throw new OwnException();
                            }
        }
    ;
    catch [OwnException e]{
            System.err.println(e.toString());
    }


Thank you
Alexander

From pat at tireme.fr  Sun Mar 16 15:11:56 2008
From: pat at tireme.fr (Pierre Attar)
Date: Sun, 16 Mar 2008 23:11:56 +0100
Subject: [antlr-interest] greedy question
In-Reply-To: <47DAAD2D.1040400@tireme.fr>
References: <47D7FFFB.4090107@gaengel.de> <47DAAD2D.1040400@tireme.fr>
Message-ID: <47DD9B2C.2080506@tireme.fr>

Hi,

Finally, I solve this problem by adding a star to the content for 
repetition:
string : 'string["' (options {greedy=false;} : . )* '"]' ;

The remaining problem is that I always have the following message
1>..\resources\mff.g3pl(234,87) : warning 200 : Decision can match input 
such as "'"]'" using multiple alternatives: 1, 2 As a result, 
alternative(s) 1 were disabled for that input

How ca I say something like "any thing but not "]" for solving ambiguity ?

Thanks, Pierre



Pierre Attar a ?crit :
> Hi,
>
> I have some problems understanding lexer recognition.  Here is my need.
>
> Using the following string of characters, (string["using 
> ""quotes"""]), I want to extract the content : (using ""quotes"").
> I wrote the following rule;
>
> string : 'string["' (options {greedy=false;} : . ) '"]' ;
>
>
> This works for (string["essai"]) but does not works in my sample 
> (string["using ""quotes"""]) and I have a MismachedSetException.
>
> I try many different configurations but do not figure out how to solve 
> the string containing quotes.
> Is is possible to use the greedy feature in this case or should I 
> explore an other antlr recognition feature ?
>
> Any idea are welcome, Pierre
>
>>
>
>
>



From darien.hager at etelos-inc.com  Sun Mar 16 21:51:28 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Sun, 16 Mar 2008 21:51:28 -0700
Subject: [antlr-interest] ANother mismatched token 0!=0
In-Reply-To: <2ea6ad20803160812o193e9798j71f826eaad765395@mail.gmail.com>
References: <2ea6ad20803140653v5fdcafcbx91a65873b580d8ad@mail.gmail.com>
	<47dc8151.2687460a.72be.0512SMTPIN_ADDED@mx.google.com>
	<2ea6ad20803160812o193e9798j71f826eaad765395@mail.gmail.com>
Message-ID: <c8c997f40803162151n1b5598bbn462c27fb9dbcdb2d@mail.gmail.com>

On Sun, Mar 16, 2008 at 8:12 AM, G R <relationalalgebra at gmail.com> wrote:

> Thanks Gavin.
> I have rearange my rules for my literals, but i still got some errors with
> my NEWLINE token.
>

You may want to check out a previous thread titled: "[antlr-interest]
Understanding Lexer rules" which has some discussion about when the token
definition ordering matters and how the longest usable definition is
generally the one that gets used, etc.
-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080316/92a51abb/attachment.html 

From antlr at mirality.co.nz  Sun Mar 16 23:35:07 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 17 Mar 2008 19:35:07 +1300
Subject: [antlr-interest] greedy question
In-Reply-To: <47DD9B2C.2080506@tireme.fr>
References: <47D7FFFB.4090107@gaengel.de> <47DAAD2D.1040400@tireme.fr>
	<47DD9B2C.2080506@tireme.fr>
Message-ID: <20080317063521.8F28611ED10@www.antlr.org>

At 11:11 17/03/2008, Pierre Attar wrote:
 >Finally, I solve this problem by adding a star to the content 
for
 >repetition:
 >string : 'string["' (options {greedy=false;} : . )* '"]' ;
 >
 >The remaining problem is that I always have the following 
message
 >1>..\resources\mff.g3pl(234,87) : warning 200 : Decision can 
match
 >input such as "'"]'" using multiple alternatives: 1, 2 As a 
result,
 >alternative(s) 1 were disabled for that input
 >
 >How ca I say something like "any thing but not "]" for solving
 >ambiguity ?

Spell it out explicitly:

STRING : 'string["' (~('"') | '"' ~(']'))* '"]';

(Note the upper case as well.  This should almost certainly be a 
lexer rule, not a parser rule.)


From mail at martin-probst.com  Mon Mar 17 07:49:30 2008
From: mail at martin-probst.com (Martin Probst)
Date: Mon, 17 Mar 2008 15:49:30 +0100
Subject: [antlr-interest] Non-LL(*) with option backtrack=true
Message-ID: <62C5D64F-6A49-4E02-9263-92BB217AF1B8@martin-probst.com>

Hi all,

after a long hiatus I'm doing some ANTLR work again. This times it's  
more or less just for fun, but whatever.

My problem is once again the XQuery grammar. I've simply converted the  
official grammar into ANTLR format and I'm trying to resolve the  
remaining errors starting from this. See the attached file for the  
grammar.

I have two problems with the grammar, both in areas where the grammar  
is non-deterministic.

ANTLR says that the rule pathExpr is non-LL(*). The rule goes like this:
pathExpr	:	('/' relativePathExpr?)  | ('//' relativePathExpr)  |  
relativePathExpr;
The problem is that the following statement is valid XQuery but  
ambiguous:
/ * foo
Which could mean (/*) foo (as in RootNode->AllChildElements followed  
by foo) or, alternatively, (/) * foo, as in RootNode TIMES foo. The  
specification says to treat this as in the earlier case, i.e. /*   foo.

Now the question: how do I tell this to ANTLR? It should be as easy as  
saying: "in doubt, prefer this branch". But as ANTLR should be greedy,  
this should already be the case, if I'm not mistaken?

The same issue happens with the sequenceType rule somewhere later in  
the file. Any ideas? I tried options { backtrack = true; } but that  
didn't help.

Best regards,
Martin

-------------- next part --------------
A non-text attachment was scrubbed...
Name: XQuery.g
Type: application/octet-stream
Size: 10333 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080317/be69d36c/attachment-0001.obj 
-------------- next part --------------


From mail at martin-probst.com  Mon Mar 17 07:52:10 2008
From: mail at martin-probst.com (Martin Probst)
Date: Mon, 17 Mar 2008 15:52:10 +0100
Subject: [antlr-interest] "Actions, however,
	can ask for the hidden channel tokens."
Message-ID: <AAEB22AD-E686-4BFE-AC34-347A120FBFFB@martin-probst.com>

Hi,

the online documentation at:

http://www.antlr.org/wiki/display/ANTLR3/Grammars#Grammars-Lexerrules

Mentions: "Actions, however, can ask for the hidden channel tokens.".

But I cannot find any documentation on _how_ exactly rules can ask for  
the hidden tokens. Any pointers?

Thanks in advance,
Martin

From parrt at cs.usfca.edu  Mon Mar 17 09:15:20 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 17 Mar 2008 10:15:20 -0600
Subject: [antlr-interest] "Actions, however,
	can ask for the hidden channel tokens."
In-Reply-To: <AAEB22AD-E686-4BFE-AC34-347A120FBFFB@martin-probst.com>
References: <AAEB22AD-E686-4BFE-AC34-347A120FBFFB@martin-probst.com>
Message-ID: <99DDB6B3-3BE1-4A5D-8ADA-D49D8CE80C00@cs.usfca.edu>

the token stream has a buffer of all tokens on all channels.  if your  
token is t, then i=t.getTokenIndex() or whatever will give you an  
index. Then look at tokensStream.get(i-1) and -2 etc... to see if  
their t.getChannel() is hidden.
Ter
On Mar 17, 2008, at 8:52 AM, Martin Probst wrote:

> Hi,
>
> the online documentation at:
>
> http://www.antlr.org/wiki/display/ANTLR3/Grammars#Grammars-Lexerrules
>
> Mentions: "Actions, however, can ask for the hidden channel tokens.".
>
> But I cannot find any documentation on _how_ exactly rules can ask  
> for the hidden tokens. Any pointers?
>
> Thanks in advance,
> Martin


From guntiso at latnet.lv  Mon Mar 17 09:43:08 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Mon, 17 Mar 2008 18:43:08 +0200
Subject: [antlr-interest] Non-LL(*) with option backtrack=true
In-Reply-To: <62C5D64F-6A49-4E02-9263-92BB217AF1B8@martin-probst.com>
References: <62C5D64F-6A49-4E02-9263-92BB217AF1B8@martin-probst.com>
Message-ID: <1205772188.47de9f9cf00db@clients.latnet.lv>

> ANTLR says that the rule pathExpr is non-LL(*). The rule goes like this:
> pathExpr	:	('/' relativePathExpr?)  | ('//' relativePathExpr)  |
> relativePathExpr;
> The problem is that the following statement is valid XQuery but
> ambiguous:
> / * foo
> Which could mean (/*) foo (as in RootNode->AllChildElements followed
> by foo) or, alternatively, (/) * foo, as in RootNode TIMES foo. The
> specification says to treat this as in the earlier case, i.e. /*   foo.

Do some left factoring and maybe predicate.
I use something like this for xpath 1.0 (no option backtrack):

absoluteLocationPath
	:	('/' relativeLocationPath) => '/' relativeLocationPath
	|	 '/'
	|	 '//' relativeLocationPath;

Maybe predicate ('/' '*') can help with xpath 2.0? Please post your solution.

Guntis


From mail at martin-probst.com  Mon Mar 17 09:51:19 2008
From: mail at martin-probst.com (Martin Probst)
Date: Mon, 17 Mar 2008 17:51:19 +0100
Subject: [antlr-interest] "Actions, however,
	can ask for the hidden channel tokens."
In-Reply-To: <99DDB6B3-3BE1-4A5D-8ADA-D49D8CE80C00@cs.usfca.edu>
References: <AAEB22AD-E686-4BFE-AC34-347A120FBFFB@martin-probst.com>
	<99DDB6B3-3BE1-4A5D-8ADA-D49D8CE80C00@cs.usfca.edu>
Message-ID: <03557599-35EF-42A4-A538-36BBE80B0AF5@martin-probst.com>

Hi,

> the token stream has a buffer of all tokens on all channels.  if  
> your token is t, then i=t.getTokenIndex() or whatever will give you  
> an index. Then look at tokensStream.get(i-1) and -2 etc... to see if  
> their t.getChannel() is hidden.

Ok, that might work. Though that's not quite what I hoped for. Any  
chance of doing something like this:
someRule options {
   channels = [0, 1, HIDDEN];
}: FOO BAR WS BAZ;

? That'd be really cool, at least for my use case ;-)

Regards,
Martin

From parrt at cs.usfca.edu  Mon Mar 17 09:59:55 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 17 Mar 2008 10:59:55 -0600
Subject: [antlr-interest] "Actions, however,
	can ask for the hidden channel tokens."
In-Reply-To: <03557599-35EF-42A4-A538-36BBE80B0AF5@martin-probst.com>
References: <AAEB22AD-E686-4BFE-AC34-347A120FBFFB@martin-probst.com>
	<99DDB6B3-3BE1-4A5D-8ADA-D49D8CE80C00@cs.usfca.edu>
	<03557599-35EF-42A4-A538-36BBE80B0AF5@martin-probst.com>
Message-ID: <CE4E59E3-EE1D-4187-8533-11DF2A67226A@cs.usfca.edu>

I think it was Ric Klaren and I that were discussing something like  
this...can't remember who or when.  Decided that, for now, it's  
better to use an action to get off-channel tokens...might have helper  
functions in CommonTokenStream.

Ter
On Mar 17, 2008, at 10:51 AM, Martin Probst wrote:

> Hi,
>
>> the token stream has a buffer of all tokens on all channels.  if  
>> your token is t, then i=t.getTokenIndex() or whatever will give  
>> you an index. Then look at tokensStream.get(i-1) and -2 etc... to  
>> see if their t.getChannel() is hidden.
>
> Ok, that might work. Though that's not quite what I hoped for. Any  
> chance of doing something like this:
> someRule options {
>   channels = [0, 1, HIDDEN];
> }: FOO BAR WS BAZ;
>
> ? That'd be really cool, at least for my use case ;-)
>
> Regards,
> Martin


From parrt at cs.usfca.edu  Mon Mar 17 14:18:03 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 17 Mar 2008 15:18:03 -0600
Subject: [antlr-interest] faster expression parsing
Message-ID: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>

So, I should have been working on something else but got to thinking  
about how annoying it is specifying expressions in recursive descent  
parsers.  You have to have a new rule for each precedence level.   
This is also very slow. Just to match 34 it has to descend about 15  
method calls.  I built a prototype single-rule (plus primary and  
suffix) operator matching thingie today.  I should be able to  
generate this from some metameta syntax in antlr.  Try it out...it's  
amazing (v3.1 required due to tree bulding bug fix).

Ter
---------------
/** Test faster recursive-descent expression parsing.
  *  Goal: avoid recursing for *each* precedence level.
  *  Recurse for changes in precedence, avoiding repeated
  *  tests for each level.  The key is passing into expression
  *  the min precedence level to match, which is based upon
  *  previous operator.
  *
  *  Based upon "precedence climbling" by Theodore Norvell:
  *      http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm
  *
  *  NOTES:
  *      1. Holy crap!  This actually works!
  *      2. Should be able to autogenerate from list of operators,  
precedence
  *         etc...
  */
grammar T;

options { output=AST; ASTLabelType=CommonTree; }

tokens { PREINC; POSTINC; CALL; INDEX; }

@members {
public static final int LEFT = 1;
public static final int RIGHT = 2;
static int[] prec = new int[tokenNames.length];
static int[] uprec = new int[tokenNames.length];
static int[] postprec = new int[tokenNames.length];
static int[] assoc = new int[tokenNames.length];
static {
     for (int i=0; i<tokenNames.length; i++) { assoc[i]=LEFT; }
     prec[PLUS] = 1;
     prec[MINUS] = 1;
     prec[STAR] = 3;
     prec[CARET] = 4;
     prec[DOT] = 6;
     assoc[CARET] = RIGHT;

     uprec[MINUS] = 2;       // sits between +/- binary and * binary ops
     postprec[LPAREN] = 5;   // lower than DOT for p.f()
     postprec[LBRACK] = 5;
     postprec[INC] = 5;
}

int nextp(int p) {
     int prevOpType = input.LA(-1);
     if ( assoc[prevOpType]==LEFT ) return prec[prevOpType]+1;
     else return prec[prevOpType];
}
}

expr : e[0] {System.out.println($e.tree.toStringTree());} ;

/** This could be autogenerated if you give me primary and suffix and  
precedence levels */
e[int p]
     :   (primary->primary)
         (   {prec[input.LA(1)]>=p}?=>     bop r=e[nextp(p)] -> ^(bop  
$e $r)
         |   {postprec[input.LA(1)]>=p}?=> suffix[$e.tree]   ->  
{$suffix.tree}
         )*
     ;

primary
     :   INT
     |   ID
     |   uop^ {int q=uprec[input.LA(-1)];} e[q]
     |   '(' expr ')' -> expr
     ;

suffix[CommonTree lhs]
     :   t='[' expr ']'                -> ^(INDEX[$t] {$lhs} expr)
     |   t='(' (expr (',' expr)*)? ')' -> ^(CALL[$t] {$lhs} expr*)
     |   t='++'                        -> ^(POSTINC[$t] {$lhs})
     ;

bop :   '+' | '-' | '*' | '^' | '.' ;

uop :   '-' | t='++' -> PREINC[$t];

INC : '++';
LPAREN : '(' ;
LBRACK : '[' ;
PLUS: '+';
MINUS: '-';
STAR: '*';
DOT : '.';
CARET:'^';
INT : '0'..'9'+ ;
ID  : 'a'..'z'+ ;
WS  : (' '|'\n')+ ;


From victor.buciuc at gmail.com  Mon Mar 17 14:45:43 2008
From: victor.buciuc at gmail.com (Buciuc Victor)
Date: Mon, 17 Mar 2008 23:45:43 +0200
Subject: [antlr-interest] Tree Duplicate
Message-ID: <d208c13f0803171445g42848363w961bcfd23e2c939@mail.gmail.com>

Hello,

i have the following grammar for accepting pascal-type variable
declarations:

grammar PSC;

options {
    output=AST;
    ASTLabelType=CommonTree;
    }

tokens {
            ARRAY;
           }

var_decl
    : ID (',' ID)* ':' type -> ^(ID type)+
    ;

type
    :TYPE
    |array_type
    ;

array_type    :
    KW_ARRAY'['INTNO'..'INTNO']' KW_OF TYPE -> ^(ARRAY INTNO INTNO TYPE)
    ;

TYPE     :KW_INT | KW_CHAR | KW_REAL | KW_BOOL;


KW_INT         :    'integer' ;
KW_CHAR         :    'char';
KW_REAL        :    'real';
KW_BOOL        :    'boolean';
KW_ARRAY     :    'array';
KW_OF     :    'of';

INTNO
    :'0'|(('1'..'9') ('0'..'9')*)
    ;

ID
    :(('a'..'z')|('A'..'Z')) (('a'..'z')|('A'..'Z')|('0'..'9')|'_')*
    ;

It appears that antlr duplicates only leaves.
EX: for the input "x,y : array[1..10] of integer" i want to get: ^(NIL ^(x
(ARRAY 1 10 integer)) ^(y (ARRAY 1 10 integer))) but i get: ^(NIL ^(x (ARRAY
1 10 integer)) ^(y))

Any help will be appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080317/e903b3a3/attachment.html 

From Waverly.Edwards at genesys.com  Mon Mar 17 15:29:50 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Mon, 17 Mar 2008 18:29:50 -0400
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1FF4CF3@navamane001.ad.internal.corp>

 
Mr. Norvell algorithm reminds me of a paper I read by David R. Hanson
who co-wrote "A Retargetable C Compiler: Design and Implementation"
It was a short fascinating read.  There was another paper that he did
with his co-author Christopher W. Frasier which may have simplified it
even further.  I haven't found that paper online but I know it exists
because I used the algorithm in one of my own programs.


W.

http://drhanson.s3.amazonaws.com/storage/documents/compact.pdf

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Monday, March 17, 2008 5:18 PM
To: antlr-interest Interest
Subject: [antlr-interest] faster expression parsing

So, I should have been working on something else but got to thinking  
about how annoying it is specifying expressions in recursive descent  
parsers.  You have to have a new rule for each precedence level.   
This is also very slow. Just to match 34 it has to descend about 15  
method calls.  I built a prototype single-rule (plus primary and  
suffix) operator matching thingie today.  I should be able to  
generate this from some metameta syntax in antlr.  Try it out...it's  
amazing (v3.1 required due to tree bulding bug fix).

Ter
---------------
/** Test faster recursive-descent expression parsing.
  *  Goal: avoid recursing for *each* precedence level.
  *  Recurse for changes in precedence, avoiding repeated
  *  tests for each level.  The key is passing into expression
  *  the min precedence level to match, which is based upon
  *  previous operator.
  *
  *  Based upon "precedence climbling" by Theodore Norvell:
  *      http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm
  *
  *  NOTES:
  *      1. Holy crap!  This actually works!
  *      2. Should be able to autogenerate from list of operators,  
precedence
  *         etc...
  */
grammar T;

options { output=AST; ASTLabelType=CommonTree; }

tokens { PREINC; POSTINC; CALL; INDEX; }

@members {
public static final int LEFT = 1;
public static final int RIGHT = 2;
static int[] prec = new int[tokenNames.length];
static int[] uprec = new int[tokenNames.length];
static int[] postprec = new int[tokenNames.length];
static int[] assoc = new int[tokenNames.length];
static {
     for (int i=0; i<tokenNames.length; i++) { assoc[i]=LEFT; }
     prec[PLUS] = 1;
     prec[MINUS] = 1;
     prec[STAR] = 3;
     prec[CARET] = 4;
     prec[DOT] = 6;
     assoc[CARET] = RIGHT;

     uprec[MINUS] = 2;       // sits between +/- binary and * binary ops
     postprec[LPAREN] = 5;   // lower than DOT for p.f()
     postprec[LBRACK] = 5;
     postprec[INC] = 5;
}

int nextp(int p) {
     int prevOpType = input.LA(-1);
     if ( assoc[prevOpType]==LEFT ) return prec[prevOpType]+1;
     else return prec[prevOpType];
}
}

expr : e[0] {System.out.println($e.tree.toStringTree());} ;

/** This could be autogenerated if you give me primary and suffix and  
precedence levels */
e[int p]
     :   (primary->primary)
         (   {prec[input.LA(1)]>=p}?=>     bop r=e[nextp(p)] -> ^(bop  
$e $r)
         |   {postprec[input.LA(1)]>=p}?=> suffix[$e.tree]   ->  
{$suffix.tree}
         )*
     ;

primary
     :   INT
     |   ID
     |   uop^ {int q=uprec[input.LA(-1)];} e[q]
     |   '(' expr ')' -> expr
     ;

suffix[CommonTree lhs]
     :   t='[' expr ']'                -> ^(INDEX[$t] {$lhs} expr)
     |   t='(' (expr (',' expr)*)? ')' -> ^(CALL[$t] {$lhs} expr*)
     |   t='++'                        -> ^(POSTINC[$t] {$lhs})
     ;

bop :   '+' | '-' | '*' | '^' | '.' ;

uop :   '-' | t='++' -> PREINC[$t];

INC : '++';
LPAREN : '(' ;
LBRACK : '[' ;
PLUS: '+';
MINUS: '-';
STAR: '*';
DOT : '.';
CARET:'^';
INT : '0'..'9'+ ;
ID  : 'a'..'z'+ ;
WS  : (' '|'\n')+ ;


From parrt at cs.usfca.edu  Mon Mar 17 15:48:55 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 17 Mar 2008 16:48:55 -0600
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <FF993752CB890B4EB591BE5450C37BF1FF4CF3@navamane001.ad.internal.corp>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
	<FF993752CB890B4EB591BE5450C37BF1FF4CF3@navamane001.ad.internal.corp>
Message-ID: <488D5F28-E985-419A-9BD8-C262CBD16044@cs.usfca.edu>

ah. Cool link. thanks.  Yep, i did basically what Hanson did.
Ter
On Mar 17, 2008, at 4:29 PM, Edwards, Waverly wrote:

>
> Mr. Norvell algorithm reminds me of a paper I read by David R. Hanson
> who co-wrote "A Retargetable C Compiler: Design and Implementation"
> It was a short fascinating read.  There was another paper that he did
> with his co-author Christopher W. Frasier which may have simplified it
> even further.  I haven't found that paper online but I know it exists
> because I used the algorithm in one of my own programs.
>
>
> W.
>
> http://drhanson.s3.amazonaws.com/storage/documents/compact.pdf

From ymo.mail at gmail.com  Mon Mar 17 16:50:57 2008
From: ymo.mail at gmail.com (Ymo)
Date: Mon, 17 Mar 2008 19:50:57 -0400
Subject: [antlr-interest] template parser using antlr v3
Message-ID: <7196ed5b0803171650k4731c25fp6bd71189f055607d@mail.gmail.com>

Hi.

I am having trouble creating a template parser grammar file. I am wondering
if anyone can give a boot start help.

I am trying to implement a template parsing tool using antlr v3. Basically
the template parser reads a template file and generates a java file for each
template file.The format of the template file is like this :

templateline-1
templateline-2
templateline-3
...
templateline-n

<% javacode %>

   templateline-1
   templateline-2
   templateline-3
   ...
   templateline-n

<%
   javacode
%>

templateline-1
templateline-2
templateline-3
...
templateline-n


1) javacode is anything that is propper java 2 syntax
2) javacode syntax checking is not needed ( How do i get a hold of the
javacode )
3) each templateline is converted to a system.out.println expression ( how
do i get a hold of each line in the AST ?)
4) the template parser copies verbatim the <% (.)* %> to the target java
file
5) each generated java file must be a valid java file. So the java syntax
checking is done by the compiler.
No need to do it inside the template parser.

There are similar tools out there like velocity, jamon , eclipse jet and
even stringtemplate. However each one of these tools
seems limited in one way or another.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080317/7918e70f/attachment.html 

From ymo.mail at gmail.com  Mon Mar 17 17:11:08 2008
From: ymo.mail at gmail.com (Ymo)
Date: Mon, 17 Mar 2008 20:11:08 -0400
Subject: [antlr-interest] template parser using antlr v3
In-Reply-To: <7196ed5b0803171650k4731c25fp6bd71189f055607d@mail.gmail.com>
References: <7196ed5b0803171650k4731c25fp6bd71189f055607d@mail.gmail.com>
Message-ID: <7196ed5b0803171711m4f873517g116725c6231ff43e@mail.gmail.com>

In the future i would like to introduce more complicated stuff like :
1) <% package org.pkg.name; %>
2) <% import org.pkg.name; %>
3) nested blocks like :
<%for expression %>
   <%for expression %>
   <%/for>
<%/for>
I am reading the xml grammar for this.

3) one complicated feature for me would be how i can switch the separator
token from '<%' to something else like '<#'. A template parser must be
generic enough so that it can be used to generate any kind of text.

This is for a future open source project so i don't mind the grammar being
in the antlr tree.

BTW i noticed the grammar files have no explicitly stated license. Does the
license for example grammar files defaults to the antlr license ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080317/865f500d/attachment.html 

From ymo.mail at gmail.com  Mon Mar 17 17:26:54 2008
From: ymo.mail at gmail.com (Ymo)
Date: Mon, 17 Mar 2008 20:26:54 -0400
Subject: [antlr-interest] template parser using antlr v3
In-Reply-To: <7196ed5b0803171711m4f873517g116725c6231ff43e@mail.gmail.com>
References: <7196ed5b0803171650k4731c25fp6bd71189f055607d@mail.gmail.com>
	<7196ed5b0803171711m4f873517g116725c6231ff43e@mail.gmail.com>
Message-ID: <7196ed5b0803171726o5abbb035pde6c868aa6c505fa@mail.gmail.com>

>
>
> 3) one complicated feature for me would be how i can switch the separator
> token from '<%' to something else like '<#'. A template parser must be
> generic enough so that it can be used to generate any kind of text.
>

I mean switch the tokens in a dynamic fashion at runtime as opposed to
changing the template source file.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080317/fd047c77/attachment.html 

From brtzsnr at gmail.com  Mon Mar 17 17:30:50 2008
From: brtzsnr at gmail.com (Alexandru Mosoi)
Date: Tue, 18 Mar 2008 02:30:50 +0200
Subject: [antlr-interest] weird behavior
Message-ID: <c59005ea0803171730p5e014b3cvd82facac386a3539@mail.gmail.com>

This is a part of my grammar (a homework similar to pascal)



conditionalStatement
    : (KW_IF blah KW_THEN ID KW_ELSE ID) => (KW_IF^ blah KW_THEN! ID
KW_ELSE! ID)
    | (KW_IF blah KW_THEN ID) => (KW_IF^ blah KW_THEN! ID)
    ;


termExpression
    : binaryExpression *// ((STAR^ | SLASH^ | KW_DIV^ | KW_MOD^)
binaryExpression)**
    ;

binaryExpression
    : unaryExpression ((LT^ | GT^ | LE^ | GE^ | EQUAL^ | NOT_EQUAL^)
unaryExpression)?
    ;

unaryExpression
    : variable
    | constant
    | functionCallWithArgs
    | KW_NOT^ unaryExpression
    | MINUS^ unaryExpression
    | LPAREN baseType RPAREN unaryExpression -> ^(CAST baseType
unaryExpression)
    | LPAREN expression RPAREN -> expression
    ;


blah
    : *binary*Expression
    ;


If blah is binaryExpression, the input is parsed without problems. however
if I do blah termExpression I get:
"line 2:1 no viable alternative at input 'instructiunetrue'. (blah is only
used in conditionalStatemen an termExpression was commented out so that it's
identical to binaryExpression).

This is in input in both cases

if conditie then
        instructiunetrue
else
        instructiunefalse


Anybody, any idea why is this happening?

-- 
Alexandru Mo?oi
http://alexandru.mosoi.googlepages.com

Please avoid sending me Word or PowerPoint attachments.
See http://www.gnu.org/philosophy/no-word-attachments.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080318/20bb154e/attachment-0001.html 

From guntiso at latnet.lv  Mon Mar 17 18:23:10 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Tue, 18 Mar 2008 03:23:10 +0200
Subject: [antlr-interest] Non-LL(*) with option backtrack=true
In-Reply-To: <62C5D64F-6A49-4E02-9263-92BB217AF1B8@martin-probst.com>
References: <62C5D64F-6A49-4E02-9263-92BB217AF1B8@martin-probst.com>
Message-ID: <1205803390.47df197eedaaf@clients.latnet.lv>

> My problem is once again the XQuery grammar.

BTW, some XQuery stuff here:
http://www.antlr.org/pipermail/antlr-interest/2007-December/025306.html


From jqwoods at gmail.com  Mon Mar 17 20:02:09 2008
From: jqwoods at gmail.com (John Woods)
Date: Mon, 17 Mar 2008 20:02:09 -0700
Subject: [antlr-interest] How to have consistently named lexer/parser in a
	package?
Message-ID: <47DF30B1.1010301@gmail.com>

I would like to end up with the java classes:

     foo.bar.FoobarLexer
     foo.bar.FoobarParser

I start with a combined grammar file Foobar.g3 which includes a package 
statement:

     @header {
         package foo.bar;
     }

But the package statement only gets copied into FoobarParser.java and 
not FoobarLexer.java which then won't compile.

So it seems I need separate lexer and parser grammar files rather than a 
combined one. Obviously the files need to be named differently, and 
since antlr requires the filename to match the grammar name, it seems 
the best I can do is have java classes like so:

     foo.bar.FoobarXXXLexer
     foo.bar.FoobarParser

I guess that's kinda trivial to worry about, but out of curiousity, I 
was wondering if there's another way?

Thanks for any tips.


From jqwoods at gmail.com  Mon Mar 17 20:22:38 2008
From: jqwoods at gmail.com (John Woods)
Date: Mon, 17 Mar 2008 20:22:38 -0700
Subject: [antlr-interest] How to have consistently named lexer/parser in
	a package?
In-Reply-To: <47DF30B1.1010301@gmail.com>
References: <47DF30B1.1010301@gmail.com>
Message-ID: <47DF357E.8070107@gmail.com>

I just came across the answer, which is painfully obvious now that I see 
it... Simply differentiate the grammar files by extension:

     Foobar.lg3 // lexer grammar file
     Foobar.g3  // parser grammar file

Sorry for the noob post.


-----Original Message-----
From: John Woods
Sent: 03/17/2008 08:02 PM
> I would like to end up with the java classes:
> 
>     foo.bar.FoobarLexer
>     foo.bar.FoobarParser
> 
> I start with a combined grammar file Foobar.g3 which includes a package 
> statement:
> 
>     @header {
>         package foo.bar;
>     }
> 
> But the package statement only gets copied into FoobarParser.java and 
> not FoobarLexer.java which then won't compile.
> 
> So it seems I need separate lexer and parser grammar files rather than a 
> combined one. Obviously the files need to be named differently, and 
> since antlr requires the filename to match the grammar name, it seems 
> the best I can do is have java classes like so:
> 
>     foo.bar.FoobarXXXLexer
>     foo.bar.FoobarParser
> 
> I guess that's kinda trivial to worry about, but out of curiousity, I 
> was wondering if there's another way?
> 
> Thanks for any tips.
> 
> 


From listbrownie at gmail.com  Mon Mar 17 20:48:29 2008
From: listbrownie at gmail.com (alan brown)
Date: Mon, 17 Mar 2008 20:48:29 -0700
Subject: [antlr-interest] Parsing names
Message-ID: <2b5f47650803172048m7a366a63g76f03bbdab3f551e@mail.gmail.com>

I'm having a problem with my lexer/parser design.  I'm trying to parse a
poker hand history file and extract the relevant information.  I got a
working solution but it's quite brittle.  My problem is that my lexer is
creating tokens of the words and my parser is reading those words to work
out player names and bets and so on.  My issue is that the player names
(among other things) is causing me grief.  A player name can be "alan 10
folds" which as you might imagine, can cause some confusion.

What I'd like to do is to parse the file to create the tokens that the lexer
would look for so when my parser runs over the tokens all the names are
single tokens.

How do I dynamically define the tokens for the lexer to parse?

alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080317/5a17db39/attachment.html 

From Austin_Hastings at Yahoo.com  Mon Mar 17 20:54:29 2008
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 17 Mar 2008 23:54:29 -0400
Subject: [antlr-interest] Parsing names
In-Reply-To: <2b5f47650803172048m7a366a63g76f03bbdab3f551e@mail.gmail.com>
References: <2b5f47650803172048m7a366a63g76f03bbdab3f551e@mail.gmail.com>
Message-ID: <47DF3CF5.10808@Yahoo.com>

Alan,

1. How about giving us some example text?

2. Create a symbol table. This is a "higher level" solution, but 
probably right.

3. It may be that your text is more amenable to parsing with a "lower 
level" approach. Possibly more use of regular expressions is needed.

Before you make any permanent decisions, see #1.

=Austin

 alan brown wrote:
> I'm having a problem with my lexer/parser design.  I'm trying to parse 
> a poker hand history file and extract the relevant information.  I got 
> a working solution but it's quite brittle.  My problem is that my 
> lexer is creating tokens of the words and my parser is reading those 
> words to work out player names and bets and so on.  My issue is that 
> the player names (among other things) is causing me grief.  A player 
> name can be "alan 10 folds" which as you might imagine, can cause some 
> confusion.
>
> What I'd like to do is to parse the file to create the tokens that the 
> lexer would look for so when my parser runs over the tokens all the 
> names are single tokens.
>
> How do I dynamically define the tokens for the lexer to parse?
>
> alan


From listbrownie at gmail.com  Mon Mar 17 21:06:43 2008
From: listbrownie at gmail.com (alan brown)
Date: Mon, 17 Mar 2008 21:06:43 -0700
Subject: [antlr-interest] Parsing names
In-Reply-To: <47DF3CF5.10808@Yahoo.com>
References: <2b5f47650803172048m7a366a63g76f03bbdab3f551e@mail.gmail.com>
	<47DF3CF5.10808@Yahoo.com>
Message-ID: <2b5f47650803172106w4035de23w424d710b3a0c70a@mail.gmail.com>

(Austin.  Sorry for replying to personally.  Here's my reply done to the
group as intended!)


Happy to provide example text...

The following is a hand being played with "Pretty Pam 10".  My lexer creates
tokens that are mostly words and numbers and my parser is being forced to do
major look ahead to work out what each line is trying to convey (because
things like 'PeggySue has 15 seconds to act'  or 'johnvfardella is feeling
happy' (among others) can appear almost anywhere).

How would I implement a symbol table dynamically.  Can you point me to an
example or some documentation?  I don't see it in the book.  I haven't
created a symbol table before.

In the example below I'd like to make the 10 players names first class
citizens (ie single tokens).

alan

Game #5678328259: Table Play Chip 798 - 10/20 - Limit Hold'em - 22:09:21 ET
- 2008/03/17
Seat 1: miannie (949)
Seat 2: LATUK (320)
Seat 3: stigs2 (1,110)
Seat 4: PeggySue07 (1,080)
Seat 5: tishlidji (300)
Seat 6: brownalan (200)
Seat 7: Pretty Pam 10 (3,355)
Seat 8: larrydj (31,142)
Seat 9: johnvfardella (200)
stigs2 posts the small blind of 5
PeggySue07 posts the big blind of 10
brownalan posts 10
johnvfardella posts 10
larrydj posts a dead small blind of 5
larrydj posts 10
The button is in seat #2
*** HOLE CARDS ***
Dealt to brownalan [Qh Qd]
tishlidji calls 10
brownalan raises to 20
Pretty Pam 10 calls 20
larrydj calls 10
johnvfardella calls 10
miannie has 8 seconds left to act
johnvfardella is feeling happy
miannie calls 20
LATUK calls 20
stigs2 calls 15
PeggySue07 calls 10
tishlidji calls 10
*** FLOP *** [Kc 5d 2s]
stigs2 has 8 seconds left to act
stigs2 checks
PeggySue07 checks
tishlidji checks
brownalan checks
Pretty Pam 10 checks
larrydj checks
johnvfardella: Hi Pam
johnvfardella checks
miannie checks
LATUK checks
*** TURN *** [Kc 5d 2s] [2c]
stigs2 has 8 seconds left to act
stigs2 bets 20
PeggySue07 calls 20
tishlidji calls 20
johnvfardella: looking good
brownalan raises to 40
Pretty Pam 10 folds
larrydj calls 40
johnvfardella calls 40
miannie folds
LATUK folds
stigs2 raises to 60
PeggySue07 calls 40
tishlidji calls 40
brownalan calls 20
larrydj calls 20
johnvfardella calls 20
*** RIVER *** [Kc 5d 2s 2c] [7s]
Pretty Pam 10: hello
stigs2 has 8 seconds left to act
stigs2 bets 20
PeggySue07 calls 20
tishlidji raises to 40
brownalan has 8 seconds left to act
brownalan folds
larrydj folds
johnvfardella calls 40
stigs2 raises to 60
PeggySue07 folds
tishlidji raises to 80
johnvfardella folds
stigs2 calls 20
*** SHOW DOWN ***
tishlidji shows [7h 2h] a full house, Twos full of Sevens
stigs2 shows [Ks 2d] a full house, Twos full of Kings
stigs2 wins the pot (765) with a full house, Twos full of Kings
*** SUMMARY ***
Total pot 765 | Rake 0
Board: [Kc 5d 2s 2c 7s]
Seat 1: miannie folded on the Turn
Seat 2: LATUK (button) folded on the Turn
Seat 3: stigs2 (small blind) showed [Ks 2d] and won (765) with a full house,
Twos full of Kings
Seat 4: PeggySue07 (big blind) folded on the River
Seat 5: tishlidji showed [7h 2h] and lost with a full house, Twos full of
Sevens
Seat 6: brownalan folded on the River
Seat 7: Pretty Pam 10 folded on the Turn
Seat 8: larrydj folded on the River
Seat 9: johnvfardella folded on the River


On Mon, Mar 17, 2008 at 8:54 PM, Austin Hastings <Austin_Hastings at yahoo.com>
wrote:

> Alan,
>
> 1. How about giving us some example text?
>
> 2. Create a symbol table. This is a "higher level" solution, but
> probably right.
>
> 3. It may be that your text is more amenable to parsing with a "lower
> level" approach. Possibly more use of regular expressions is needed.
>
> Before you make any permanent decisions, see #1.
>
> =Austin
>
>  alan brown wrote:
> > I'm having a problem with my lexer/parser design.  I'm trying to parse
> > a poker hand history file and extract the relevant information.  I got
> > a working solution but it's quite brittle.  My problem is that my
> > lexer is creating tokens of the words and my parser is reading those
> > words to work out player names and bets and so on.  My issue is that
> > the player names (among other things) is causing me grief.  A player
> > name can be "alan 10 folds" which as you might imagine, can cause some
> > confusion.
> >
> > What I'd like to do is to parse the file to create the tokens that the
> > lexer would look for so when my parser runs over the tokens all the
> > names are single tokens.
> >
> > How do I dynamically define the tokens for the lexer to parse?
> >
> > alan
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080317/d53f2321/attachment.html 

From Austin_Hastings at Yahoo.com  Mon Mar 17 21:10:38 2008
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 18 Mar 2008 00:10:38 -0400
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
Message-ID: <47DF40BE.6020605@Yahoo.com>

Terence Parr wrote:
> So, I should have been working on something else but got to thinking 
> about how annoying it is specifying expressions in recursive descent 
> parsers.  You have to have a new rule for each precedence level.  This 
> is also very slow. Just to match 34 it has to descend about 15 method 
> calls.  

I totally agree. (See thread at: 
http://www.antlr.org/pipermail/antlr-interest/2007-December/025112.html)

> I built a prototype single-rule (plus primary and suffix) operator 
> matching thingie today.  I should be able to generate this from some 
> metameta syntax in antlr.  Try it out...it's amazing (v3.1 required 
> due to tree bulding bug fix).

Closer. I want the syntax built in to Antlr. Make expression 
sub-grammars some kind of callable thing.

string_expr:
    @expression_subgrammar { operators = '+', '.', 'x', 'trim'(), 
'ltrim'(), 'rtrim'()  ; }
    ;

=Austin


From Austin_Hastings at Yahoo.com  Mon Mar 17 21:42:41 2008
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 18 Mar 2008 00:42:41 -0400
Subject: [antlr-interest] Parsing names
In-Reply-To: <2b5f47650803172105j4f4583acl87e32f84f0cf8894@mail.gmail.com>
References: <2b5f47650803172048m7a366a63g76f03bbdab3f551e@mail.gmail.com>	
	<47DF3CF5.10808@Yahoo.com>
	<2b5f47650803172105j4f4583acl87e32f84f0cf8894@mail.gmail.com>
Message-ID: <47DF4841.3050902@Yahoo.com>

Alan,

Terence has some links on the antlr website, and I think some of the 
examples include building a rudimentary symbol table. But for purposes 
of this language, you don't need very much. You DO need to smarten up 
the lexer, because spaces are allowed in the names.

First, parse the "Seat 7: Pretty Pam 10 (3,355)" line.

That looks to me like a simple regular expression. Everything after ": " 
(colon, space) up to " (" (space, paren) is a name.

seat_spec: 'Seat' Num PlayerNameDef '(' CommaNum ')' ;

Writing the PlayerNameDef lexer target will be a little bit challenging 
because you have to look ahead for the terminator. An easier approach 
might be to make a single token, called "SEAT_INFO" or something, that 
gobbles up the entire line. Then you could parse the player name out by 
hand.

After all the Seat 1..n lines, all player names appear to start at the 
beginning of the line. Create a second lexer target "PlayerName" that 
matches. The trick is to compare with an array or tree of player names 
you captured in memory from the seat_spec lines.

Create an array of strings (or objects -- make this more complex when 
you're comfortable), player_names[] = { "miannie", "LATUK", "stigs2", 
"PeggySue07", ... "Pretty Pam 10", ... };

Then as you are lexing the PlayerName, defer adding a character until 
you are sure it matches one or more possible names in the list. 
Otherwise, either report an error or end the token. (A space ends the 
token, a non-space probably indicates an error.) You might do this at 
the parser level, too--grab a bunch of "player words" and append them. 
But you'll have to append them character-by-character, so that doesn't 
buy you much.

Slightly off topic, here's a hinky lexer rule I built that knows more 
than it should about the innards of how the lexer works. The 
"input.LA(1)" stuff is me looking ahead at the next character. The 
"matchAny" routine is a lexer built-in that does what it sounds like. 
The other mFoo() stuff are various patterns I was recursing into, 
specific to my grammar. You can see that I'm basically looping, gobbling 
one or more character at a time.

==========

fragment
NestedCodeBlock
    : '{'
    {
	loopNCB:
	do
	{
	    int next_char = input.LA(1);

	    switch (next_char)
	    {
	    case '}':
		break loopNCB;

	    case '"': mQlit_Double(); break;
	    case '\'': mQlit_Single(); break;
	    case '\u00AB': mQlit_Willies(); break;
	    case '<':
		if (input.LA(2) == '<')
		    mQlit_Angles();
		else
		    matchAny();
		break;

	    case '/':
		switch (input.LA(2))
		{
		case '/': mSingleLineComment(); break;
		case '*': mMultiLineComment(); break;
		default: matchAny(); break;
		}
		break;

	    case '{': mNestedCodeBlock(); break;
	    default: matchAny(); break;
	    }

	    if (failed) return;
	}
	while (true);
	match('}');
	if (!failed) return;
    }
    .* '}'
    ;

==========

Note that the last line but one, ".* '}'" is there to confuse ANTLR. If 
you don't confuse it, it knows too much and screws up my code. (Some of 
the "if failed return" stuff is there for the same reason. Freaking Java 
won't let you keep "dead code" in your methods.)

You can probably get away with a loop that looks like

top-of-loop:
get-next-char
append-next-char-to-buffer
for (all names in seat list)
do
    if (buffer equals name.substring(buffer.length))
        accept this character, continue loop
done

if (character is space)
    accept buffer, keep space as next input
else
    reject this name-plus-extra-letter as bogus ("Pretty Pam 10[ ]" is 
okay. "Pretty Pam 10[0]" is not okay.)

go to top of loop


=Austin




alan brown wrote:
> Happy to provide example text...
>
> The following is a hand being played with "Pretty Pam 10".  My lexer 
> creates tokens that are mostly words and numbers and my parser is 
> being forced to do major look ahead to work out what each line is 
> trying to convey (because things like 'PeggySue has 15 seconds to 
> act'  or 'johnvfardella is feeling happy' (among others) can appear 
> almost anywhere).
>
> How would I implement a symbol table dynamically.  Can you point me to 
> an example or some documentation?  I don't see it in the book.  I 
> haven't created a symbol table before.
>
> In the example below I'd like to make the 10 players names first class 
> citizens (ie single tokens).
>
> alan
>
> Game #5678328259: Table Play Chip 798 - 10/20 - Limit Hold'em - 
> 22:09:21 ET - 2008/03/17
> Seat 1: miannie (949)
> Seat 2: LATUK (320)
> Seat 3: stigs2 (1,110)
> Seat 4: PeggySue07 (1,080)
> Seat 5: tishlidji (300)
> Seat 6: brownalan (200)
> Seat 7: Pretty Pam 10 (3,355)
> Seat 8: larrydj (31,142)
> Seat 9: johnvfardella (200)
> stigs2 posts the small blind of 5
> PeggySue07 posts the big blind of 10
> brownalan posts 10
> johnvfardella posts 10
> larrydj posts a dead small blind of 5
> larrydj posts 10
> The button is in seat #2
> *** HOLE CARDS ***
> Dealt to brownalan [Qh Qd]
> tishlidji calls 10
> brownalan raises to 20
> Pretty Pam 10 calls 20
> larrydj calls 10
> johnvfardella calls 10
> miannie has 8 seconds left to act
> johnvfardella is feeling happy
> miannie calls 20
> LATUK calls 20
> stigs2 calls 15
> PeggySue07 calls 10
> tishlidji calls 10
> *** FLOP *** [Kc 5d 2s]
> stigs2 has 8 seconds left to act
> stigs2 checks
> PeggySue07 checks
> tishlidji checks
> brownalan checks
> Pretty Pam 10 checks
> larrydj checks
> johnvfardella: Hi Pam
> johnvfardella checks
> miannie checks
> LATUK checks
> *** TURN *** [Kc 5d 2s] [2c]
> stigs2 has 8 seconds left to act
> stigs2 bets 20
> PeggySue07 calls 20
> tishlidji calls 20
> johnvfardella: looking good
> brownalan raises to 40
> Pretty Pam 10 folds
> larrydj calls 40
> johnvfardella calls 40
> miannie folds
> LATUK folds
> stigs2 raises to 60
> PeggySue07 calls 40
> tishlidji calls 40
> brownalan calls 20
> larrydj calls 20
> johnvfardella calls 20
> *** RIVER *** [Kc 5d 2s 2c] [7s]
> Pretty Pam 10: hello
> stigs2 has 8 seconds left to act
> stigs2 bets 20
> PeggySue07 calls 20
> tishlidji raises to 40
> brownalan has 8 seconds left to act
> brownalan folds
> larrydj folds
> johnvfardella calls 40
> stigs2 raises to 60
> PeggySue07 folds
> tishlidji raises to 80
> johnvfardella folds
> stigs2 calls 20
> *** SHOW DOWN ***
> tishlidji shows [7h 2h] a full house, Twos full of Sevens
> stigs2 shows [Ks 2d] a full house, Twos full of Kings
> stigs2 wins the pot (765) with a full house, Twos full of Kings
> *** SUMMARY ***
> Total pot 765 | Rake 0
> Board: [Kc 5d 2s 2c 7s]
> Seat 1: miannie folded on the Turn
> Seat 2: LATUK (button) folded on the Turn
> Seat 3: stigs2 (small blind) showed [Ks 2d] and won (765) with a full 
> house, Twos full of Kings
> Seat 4: PeggySue07 (big blind) folded on the River
> Seat 5: tishlidji showed [7h 2h] and lost with a full house, Twos full 
> of Sevens
> Seat 6: brownalan folded on the River
> Seat 7: Pretty Pam 10 folded on the Turn
> Seat 8: larrydj folded on the River
> Seat 9: johnvfardella folded on the River
>
> On Mon, Mar 17, 2008 at 8:54 PM, Austin Hastings 
> <Austin_Hastings at yahoo.com <mailto:Austin_Hastings at yahoo.com>> wrote:
>
>     Alan,
>
>     1. How about giving us some example text?
>
>     2. Create a symbol table. This is a "higher level" solution, but
>     probably right.
>
>     3. It may be that your text is more amenable to parsing with a "lower
>     level" approach. Possibly more use of regular expressions is needed.
>
>     Before you make any permanent decisions, see #1.
>
>     =Austin
>
>      alan brown wrote:
>     > I'm having a problem with my lexer/parser design.  I'm trying to
>     parse
>     > a poker hand history file and extract the relevant information.
>      I got
>     > a working solution but it's quite brittle.  My problem is that my
>     > lexer is creating tokens of the words and my parser is reading those
>     > words to work out player names and bets and so on.  My issue is that
>     > the player names (among other things) is causing me grief.  A player
>     > name can be "alan 10 folds" which as you might imagine, can
>     cause some
>     > confusion.
>     >
>     > What I'd like to do is to parse the file to create the tokens
>     that the
>     > lexer would look for so when my parser runs over the tokens all the
>     > names are single tokens.
>     >
>     > How do I dynamically define the tokens for the lexer to parse?
>     >
>     > alan
>
>


From tbrandonau at gmail.com  Tue Mar 18 00:41:57 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Tue, 18 Mar 2008 18:41:57 +1100
Subject: [antlr-interest] How to have consistently named lexer/parser in
	a package?
In-Reply-To: <47DF30B1.1010301@gmail.com>
References: <47DF30B1.1010301@gmail.com>
Message-ID: <ebc876d70803180041y1a28946enc53eb7bb268a18bf@mail.gmail.com>

On Tue, Mar 18, 2008 at 2:02 PM, John Woods <jqwoods at gmail.com> wrote:
> I would like to end up with the java classes:
>
>      foo.bar.FoobarLexer
>      foo.bar.FoobarParser
>
>  I start with a combined grammar file Foobar.g3 which includes a package
>  statement:
>
>      @header {
>          package foo.bar;
>      }
>
>  But the package statement only gets copied into FoobarParser.java and
>  not FoobarLexer.java which then won't compile.
Such blocks are scoped. The default scope in combined grammars is the
parser Add:
@lexer::header { package foo.bar; }

Tom.

From tas at ultersys.ru  Tue Mar 18 03:50:50 2008
From: tas at ultersys.ru (Andrey Timoshenkov)
Date: Tue, 18 Mar 2008 13:50:50 +0300
Subject: [antlr-interest] C# run-time and strong name
Message-ID: <47DF9E8A.6050108@ultersys.ru>

Hello all.

I recently started using ANTLR 3.0.1 with C# target and got the problem 
with C# runtime: I cannot link it to my assembly due to the lack of the 
strong name in Antlr3.Runtime.dll. Could you please suggest a solution? 
(I use ANTLR binary tool on .NET if this makes any difference).

Thank you in advance,
Andrey Timoshenkov

From antlr at mirality.co.nz  Tue Mar 18 04:50:07 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 19 Mar 2008 00:50:07 +1300
Subject: [antlr-interest] C# run-time and strong name
In-Reply-To: <47DF9E8A.6050108@ultersys.ru>
References: <47DF9E8A.6050108@ultersys.ru>
Message-ID: <20080318115032.9D87411ECA4@www.antlr.org>

At 23:50 18/03/2008, Andrey Timoshenkov wrote:
 >I recently started using ANTLR 3.0.1 with C# target and got the
 >problem with C# runtime: I cannot link it to my assembly due to
 >the lack of the strong name in Antlr3.Runtime.dll. Could you
 >please suggest a solution?

You could always just give it a strong name yourself.  If source 
is available, then recompile it with a strong name.  If not, then 
first disassemble it with ildasm and then reassemble with ilasm 
while applying a strong name at the same time.  Either way it's 
pretty easy.


From jqwoods at gmail.com  Tue Mar 18 07:15:02 2008
From: jqwoods at gmail.com (John Woods)
Date: Tue, 18 Mar 2008 07:15:02 -0700
Subject: [antlr-interest] How to have consistently named lexer/parser in
 a package?
In-Reply-To: <ebc876d70803180041y1a28946enc53eb7bb268a18bf@mail.gmail.com>
References: <47DF30B1.1010301@gmail.com>
	<ebc876d70803180041y1a28946enc53eb7bb268a18bf@mail.gmail.com>
Message-ID: <47DFCE66.4060501@gmail.com>

Thanks!

-----Original Message-----
From: Thomas Brandon
Sent: 03/18/2008 12:41 AM
> On Tue, Mar 18, 2008 at 2:02 PM, John Woods <jqwoods at gmail.com> wrote:
>> I would like to end up with the java classes:
>>
>>      foo.bar.FoobarLexer
>>      foo.bar.FoobarParser
>>
>>  I start with a combined grammar file Foobar.g3 which includes a package
>>  statement:
>>
>>      @header {
>>          package foo.bar;
>>      }
>>
>>  But the package statement only gets copied into FoobarParser.java and
>>  not FoobarLexer.java which then won't compile.
> Such blocks are scoped. The default scope in combined grammars is the
> parser Add:
> @lexer::header { package foo.bar; }
> 
> Tom.
> 


From jaluber at gmx.de  Tue Mar 18 10:43:30 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 18 Mar 2008 18:43:30 +0100
Subject: [antlr-interest] C# run-time and strong name
In-Reply-To: <20080318115032.9D87411ECA4@www.antlr.org>
References: <47DF9E8A.6050108@ultersys.ru>
	<20080318115032.9D87411ECA4@www.antlr.org>
Message-ID: <47DFFF42.7090101@gmx.de>

Gavin Lambert schrieb:
> At 23:50 18/03/2008, Andrey Timoshenkov wrote:
>  >I recently started using ANTLR 3.0.1 with C# target and got the
>  >problem with C# runtime: I cannot link it to my assembly due to
>  >the lack of the strong name in Antlr3.Runtime.dll. Could you
>  >please suggest a solution?
> 
> You could always just give it a strong name yourself.  If source is 
> available, then recompile it with a strong name.  If not, then first 
> disassemble it with ildasm and then reassemble with ilasm while applying 
> a strong name at the same time.  Either way it's pretty easy.
> 

For the 3.1 C# target a strong name is already provided. Unfortunately, 
I don't have access to source of 3.0.1 and 3.1 is both incompatible to 
3.0.1 and broken at the moment. There is an email though, which provides 
a link to a disassembled version. Just search the archives.

Johannes

From troy.daniels at baesystems.com  Tue Mar 18 13:08:37 2008
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Tue, 18 Mar 2008 16:08:37 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
	<47D85F43.6030400@jazillian.com>
Message-ID: <40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>

 

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Andy Tripp
> Sent: Wednesday, March 12, 2008 6:55 PM
> To: Terence Parr
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] LPG WAS Retaining comments
> 
> Hmmm...a tool that automatically produces an "AST" just from 
> an input grammar.
> What a novel concept!  ;)
> 
> But the authors call it an "AST" when in fact it's really 
> just a parse tree, not an AST.

So what is the difference between a parse tree and an AST?  If there's a
wiki page that explains it, a link is a fine answer.

Troy

From Austin_Hastings at Yahoo.com  Tue Mar 18 13:23:14 2008
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Tue, 18 Mar 2008 16:23:14 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>	<47D85F43.6030400@jazillian.com>
	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>
Message-ID: <47E024B2.7070407@Yahoo.com>

There's an explanation in Terence's book, and probably in every book on 
parsing.

In short, a parse tree is what you get after you run a parser. Because 
your grammar will have a certain structure, the parse tree will have the 
same structure. For example, if you have some productions in your 
grammar that are there to map the syntax of your language onto the 
features of your parser generator, those productions will be reflected 
in your parse tree.

Consider a simple expression:  a + b * c

An ANTLR parser will probably have nested productions for logical-or 
expressions, logical-and expressions, additive, multiplicative, unary, 
and primary expressions (have a look at the C or Java grammars to see 
what I mean). As a result, the parse tree may look like:

expression(  l-or( l-and( additive( '+', multiplicative( unary( primary( 
'a' ) ) ), multiplicative( '*', unary( primary( 'b' ) ), unary( primary( 
'c' ) ) ) ) ) )

But the AST would look like:

expression( add( 'a', multiply('b', 'c') )


The parse tree contains parser artifacts. The AST is a transformation of 
the parse tree (or of an earlier generation of AST) into a more direct, 
more useful, form.

=Austin


Daniels, Troy (US SSA) wrote:
>  
>
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org 
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Andy Tripp
>> Sent: Wednesday, March 12, 2008 6:55 PM
>> To: Terence Parr
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] LPG WAS Retaining comments
>>
>> Hmmm...a tool that automatically produces an "AST" just from 
>> an input grammar.
>> What a novel concept!  ;)
>>
>> But the authors call it an "AST" when in fact it's really 
>> just a parse tree, not an AST.
>>     
>
> So what is the difference between a parse tree and an AST?  If there's a
> wiki page that explains it, a link is a fine answer.
>
> Troy
>
>   


From gbr at newtechlaw.com  Tue Mar 18 13:26:05 2008
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Tue, 18 Mar 2008 13:26:05 -0700
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphate
	ch.com>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>
	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>
	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>
	<20080312215518.GA21383@badgers-in-foil.co.uk>
	<55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>
	<47D85F43.6030400@jazillian.com>
	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>
Message-ID: <200803182030.m2IKUIoU030408@tach.newtechlaw.com>

At 01:08 PM 3/18/2008, Daniels, Troy \(US SSA\) wrote:

>So what is the difference between a parse tree and an AST?  If there's a
>wiki page that explains it, a link is a fine answer.

An AST differs from a parse tree (also known as a concrete syntax 
tree) by omitting nodes and edges for syntax rules that do not affect 
the semantics of the program. Only significant programming language 
constructs are included. The classic example of such an omission is 
grouping parentheses, since in an AST the grouping of operands is 
implicit in the tree structure.

http://en.wikipedia.org/wiki/Abstract_syntax_tree
http://en.wikipedia.org/wiki/Parse_tree 


From pat at tireme.fr  Tue Mar 18 14:14:56 2008
From: pat at tireme.fr (Pierre Attar)
Date: Tue, 18 Mar 2008 22:14:56 +0100
Subject: [antlr-interest] greedy question
In-Reply-To: <200803170610.m2H6AILx021396@ns30210.ovh.net>
References: <47D7FFFB.4090107@gaengel.de> <47DAAD2D.1040400@tireme.fr>
	<47DD9B2C.2080506@tireme.fr>
	<200803170610.m2H6AILx021396@ns30210.ovh.net>
Message-ID: <47E030D0.7050100@tireme.fr>

Gavin,

Thanks a lot, this solve my problem.
At the beginning, I've tried without using a lexer rule, keeping on to 
work at parser level, but this was not working.
So, I need to do some easy text trimming in action rules... not a problem.

Once more, thanks.

Pierre


Gavin Lambert a ?crit :
> At 11:11 17/03/2008, Pierre Attar wrote:
> >Finally, I solve this problem by adding a star to the content for
> >repetition:
> >string : 'string["' (options {greedy=false;} : . )* '"]' ;
> >
> >The remaining problem is that I always have the following message
> >1>..\resources\mff.g3pl(234,87) : warning 200 : Decision can match
> >input such as "'"]'" using multiple alternatives: 1, 2 As a result,
> >alternative(s) 1 were disabled for that input
> >
> >How ca I say something like "any thing but not "]" for solving
> >ambiguity ?
>
> Spell it out explicitly:
>
> STRING : 'string["' (~('"') | '"' ~(']'))* '"]';
>
> (Note the upper case as well.  This should almost certainly be a lexer 
> rule, not a parser rule.)
>
>
>



From lefevrol at yahoo.com  Tue Mar 18 14:47:20 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Tue, 18 Mar 2008 22:47:20 +0100
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>	<47D85F43.6030400@jazillian.com>
	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>
Message-ID: <frpd9c$g5b$1@ger.gmane.org>

Another possible answer is that a parse tree is what you get by default, an 
AST what you get if you take charge. The former (for a given tool and 
grammar) should be well-defined, the latter not so much since it depends on 
what _you_ are doing (in ANTLR, using tree operators and rewrite actions).

-- O.L.


From antlr at jazillian.com  Tue Mar 18 15:13:57 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 18 Mar 2008 18:13:57 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <frpd9c$g5b$1@ger.gmane.org>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>	<47D85F43.6030400@jazillian.com>	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>
	<frpd9c$g5b$1@ger.gmane.org>
Message-ID: <47E03EA5.7080906@jazillian.com>

Olivier Lefevre wrote:
> Another possible answer is that a parse tree is what you get by default, 

Not with ANTLR, you don't. There's one call to the parser to get the
AST, and a whole different approach to getting the parse tree.
That's what that other long "postmortem" thread was about: the suggestion that maybe
ANTLR could just return the parse tree when no instructions for building
an AST are provided.

Judging from the discussion, it looks like that's not going to happen.
So to see an ANTLR parse tree, follow these instructions:
http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760

Andy


From lefevrol at yahoo.com  Tue Mar 18 15:46:42 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Tue, 18 Mar 2008 23:46:42 +0100
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <47E03EA5.7080906@jazillian.com>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>	<47D85F43.6030400@jazillian.com>	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>	<frpd9c$g5b$1@ger.gmane.org>
	<47E03EA5.7080906@jazillian.com>
Message-ID: <frpgom$rsv$1@ger.gmane.org>

Andy Tripp wrote:
> Olivier Lefevre wrote:
>> Another possible answer is that a parse tree is what you get by default, 
> 
> Not with ANTLR, you don't. There's one call to the parser to get the
> AST, and a whole different approach to getting the parse tree.

OK but by "taking charge" I meant shaping the tree yourself: when using 
ParseTreeBuilder, you are not doing that since it's a built-in. I still 
think it useful to think of the parse tree as something the tool will build 
for you automatically (if you ask it to) whereas the AST is something _you_ 
must build, making _all_ the decisions.

-- O.L.



From lefevrol at yahoo.com  Tue Mar 18 16:02:19 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Wed, 19 Mar 2008 00:02:19 +0100
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <frpgom$rsv$1@ger.gmane.org>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>	<47D85F43.6030400@jazillian.com>	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>	<frpd9c$g5b$1@ger.gmane.org>	<47E03EA5.7080906@jazillian.com>
	<frpgom$rsv$1@ger.gmane.org>
Message-ID: <frphlv$v14$1@ger.gmane.org>

Olivier Lefevre wrote:
> I still think it useful to think of the parse tree as something the tool will 
> build for you automatically (if you ask it to) whereas the AST is 
> something _you_ must build, making _all_ the decisions.

To elaborate just a tiny bit, you might say this is a superficial 
difference but if you ask a tree from the tool it will of necessity return 
a parse tree because that's the only thing it can return (it can't possibly 
know what kind of AST you want) whereas if you build the tree you will, 
well, not "of necessity" but almost certainly build an AST of sorts, 
reflecting your post-processing needs and thus the semantics of the 
language. Thus in practice the parse tree vs. AST divide tends to overlap 
neatly with the by-default vs. explicitly built divide.

-- O.L.


From parrt at cs.usfca.edu  Tue Mar 18 18:57:59 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 18 Mar 2008 19:57:59 -0600
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <47DF40BE.6020605@Yahoo.com>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
	<47DF40BE.6020605@Yahoo.com>
Message-ID: <254336A1-444A-415F-A4C5-3D43405E9B6A@cs.usfca.edu>


On Mar 17, 2008, at 10:10 PM, Austin Hastings wrote:

> Terence Parr wrote:
>> So, I should have been working on something else but got to  
>> thinking about how annoying it is specifying expressions in  
>> recursive descent parsers.  You have to have a new rule for each  
>> precedence level.  This is also very slow. Just to match 34 it has  
>> to descend about 15 method calls.
>
> I totally agree. (See thread at: http://www.antlr.org/ 
> pipermail/antlr-interest/2007-December/025112.html)

Yep, i remember. also some macro requests.

>> I built a prototype single-rule (plus primary and suffix) operator  
>> matching thingie today.  I should be able to generate this from  
>> some metameta syntax in antlr.  Try it out...it's amazing (v3.1  
>> required due to tree bulding bug fix).
>
> Closer. I want the syntax built in to Antlr. Make expression sub- 
> grammars some kind of callable thing.
>
> string_expr:
>    @expression_subgrammar { operators = '+', '.', 'x', 'trim'(),  
> 'ltrim'(), 'rtrim'()  ; }
>    ;

Yep, my plan is to make it easy to specify.  I must admit though that  
I can't hide primary and suffix operator rules so I'd only be hiding  
this rule:

/** This could be autogenerated if you give me primary and suffix and  
precedence levels */
e[int p]
      :   (primary->primary)
          (   {prec[input.LA(1)]>=p}?=>     bop r=e[nextp(p)] -> ^ 
(bop $e $r)
          |   {postprec[input.LA(1)]>=p}?=> suffix[$e.tree]   ->  
{$suffix.tree}
          )*
      ;

We'd just need to say something like you request.  I also thought  
that just using an option would be ok...or, use the left-recursive rule.

e	:	e '*' e
	|	e '-' e
	|	e '+' e
	|	'-' e
	|	e '.' ID
	|	e '[' e ']'
	|	e '(' e (',' e)* ')'
	|	INT
	|	ID
	;

That's nice 'cause it's explicit like a yacc grammar would be.  I'd  
recognize this pattern and build what i sent before.  Only issue is  
precedence.  Order would work sort of but probably not  
perfectly...for example a+b.x should not match as (a+b).x.

Ter

From lgcraymer at yahoo.com  Tue Mar 18 19:22:51 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 18 Mar 2008 19:22:51 -0700 (PDT)
Subject: [antlr-interest] LPG WAS Retaining comments
Message-ID: <138535.40914.qm@web55905.mail.re3.yahoo.com>

Formally, a context-free grammar is the tuple (N, T, P, S) where N is a set of non-terminal symbols, T is a set of terminal symbols with N and T being disjoint, P is a set of productions defining the non-terminals in terms of other symbols (both terminal and non-terminal), and S is a unique start symbol (non-terminal).  A parse tree is constructed by adding nodes for each matched symbol from an input source, with non-terminals inserted as the parent nodes of matched productions.

The classic abstract syntax tree is the parse tree built from processing a grammar according to a BNF grammar.  Modern usage has morphed this to accept Ter's usage.

Since parse trees capture the input grammar's non-terminals and productions, they are less than ideal for any but the simplest of translations.  The ANTLR approach is to design an AST for output processing and to toss out irrelevant assumptions about the input (i. e., the choice of productions and non-terminals in the input grammar).

--Loring

----- Original Message ----
From: Olivier Lefevre <lefevrol at yahoo.com>
To: antlr-interest at antlr.org
Sent: Tuesday, March 18, 2008 3:46:42 PM
Subject: Re: [antlr-interest] LPG WAS Retaining comments

Andy Tripp wrote:
> Olivier Lefevre wrote:
>> Another possible answer is that a parse tree is what you get by default, 
> 
> Not with ANTLR, you don't. There's one call to the parser to get the
> AST, and a whole different approach to getting the parse tree.

OK but by "taking charge" I meant shaping the tree yourself: when using 
ParseTreeBuilder, you are not doing that since it's a built-in. I still 
think it useful to think of the parse tree as something the tool will build 
for you automatically (if you ask it to) whereas the AST is something _you_ 
must build, making _all_ the decisions.

-- O.L.








      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080318/553c7a13/attachment-0001.html 

From thkarcher at gmx.de  Wed Mar 19 02:58:58 2008
From: thkarcher at gmx.de (Thomas Karcher)
Date: Wed, 19 Mar 2008 10:58:58 +0100
Subject: [antlr-interest] Tree grammars with output=AST
Message-ID: <1205920738.6732.5.camel@localhost>

Hi,

is it possible to have something like

tree grammar TestTree;
options {
	language=CSharp;
	output=AST;
	ASTLabelType=CommonTree;
}

That means "AST rewriting by tree grammar with C# as target language".
I'm using ANTLR 3.0.1.

I'm asking because as soon as I switch to output=AST, my Visual Studio
is complaining about the non-existing stop symbol that ANTLR puts into
the generated code ...


Thanks,
Thomas


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Dies ist ein digital signierter Nachrichtenteil
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/c970698d/attachment.bin 

From antlr at mirality.co.nz  Wed Mar 19 03:28:00 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 19 Mar 2008 23:28:00 +1300
Subject: [antlr-interest] Tree grammars with output=AST
In-Reply-To: <1205920738.6732.5.camel@localhost>
References: <1205920738.6732.5.camel@localhost>
Message-ID: <20080319102905.61DF311ED0E@www.antlr.org>

At 22:58 19/03/2008, Thomas Karcher wrote:
 >is it possible to have something like
 >
 >tree grammar TestTree;
 >options {
 >	language=CSharp;
 >	output=AST;
 >	ASTLabelType=CommonTree;
 >}
 >
 >That means "AST rewriting by tree grammar with C# as target
 >language".
 >I'm using ANTLR 3.0.1.

IIRC, "tree grammar" with AST output requires ANTLR v3.1.


From phulsmeijer at xebic.com  Wed Mar 19 03:45:03 2008
From: phulsmeijer at xebic.com (Patrick Hulsmeijer)
Date: Wed, 19 Mar 2008 11:45:03 +0100
Subject: [antlr-interest] LL(k)
Message-ID: <C3525AF49F7D374D8E4D3C46ED4BC6211684BD@srvxdcex.xebic.com>

Hi,

 

Could anybody give me a clue what the consequences are of specifying a k
value in the options section of an ANTLR grammar, performance wise? And
what will it do to the recognition power of the generated parser?

I'm defining a grammar but I'm having an hard time with the prediction
DFAs in my parser when I'm using LL(*). These don't seem to consider
semantical predicates in their prediction. When I specify a k=2 value
all works fine.

 

Gr, patrick.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/66ea49ea/attachment.html 

From antlr at mirality.co.nz  Wed Mar 19 03:55:27 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 19 Mar 2008 23:55:27 +1300
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <254336A1-444A-415F-A4C5-3D43405E9B6A@cs.usfca.edu>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
	<47DF40BE.6020605@Yahoo.com>
	<254336A1-444A-415F-A4C5-3D43405E9B6A@cs.usfca.edu>
Message-ID: <20080319105546.EA5A511ED1E@www.antlr.org>

At 14:57 19/03/2008, Terence Parr wrote:
 >We'd just need to say something like you request.  I also
 >thought that just using an option would be ok...or, use
 >the left-recursive rule.
 >
 >e	:	e '*' e
 >	|	e '-' e
 >	|	e '+' e
 >	|	'-' e
 >	|	e '.' ID
 >	|	e '[' e ']'
 >	|	e '(' e (',' e)* ')'
 >	|	INT
 >	|	ID
 >	;
 >
 >That's nice 'cause it's explicit like a yacc grammar would be.
 >I'd recognize this pattern and build what i sent before.  Only
 >issue is precedence.  Order would work sort of but probably
 >not perfectly...for example a+b.x should not match as (a+b).x.

Well, for that case I think that's just because the alts are out 
of order :)

Though I don't think you can use alt order alone as an indicator 
of precedence, since there has to be some way to signal equal 
precedence (think "a * b / c".  If division is given higher 
precedence than multiplication then you'll get the wrong answer, 
using integer arithmetic).

Extending that a bit (and including subrule invocation), how about 
something like this:

e : ( ID | INT )
   | '(' e ')'
   | callArrayMember
   | unop
   | ( e '*' e | e '/' e )
   | ( e '+' e | e '-' e )
   | comparison
   | assignment
   ;

callArrayMember
   : e '(' e (',' e)* ')'
   | e '[' e ']'
   | e '.' ID
   ;

unop
options { associativity = right; }
   : '+' e
   | '-' e
   ;

comparison
   : e '==' e
   | e '!=' e
   | e '<' e
   | e '>' e
   | e '<=' e
   | e '>=' e
   ;

assignment
options { associativity = right; }
   : e '=' e
   | e '+=' e
   | e '-=' e
   | e '*=' e
   | e '/=' e
   ;

The idea is that in the "root" rule (which might need a special 
option to make it easily recognisable), each top-level alt 
represents an order of precedence, from highest to 
lowest.  Sub-alts (as in ID & INT, * & /) have equal 
precedence.  If a subrule is called, it's treated like a sub-alt; 
all alts within the subrule have equal precedence.  You can also 
use an option to specify the operator associativity.  (I think 
you're allowed to specify options at the alt level as well, but 
just to be safe [and because it seemed tidier that way] I put them 
in subrules.)

Of course, I'm not sure how hard all of this would be to produce; 
it's like a little mini-grammar in its own right.  And something 
like the callArrayMember subrule would probably be hard to 
generate a good AST automatically for.


From markwright at internode.on.net  Wed Mar 19 04:38:28 2008
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 19 Mar 2008 22:38:28 +1100
Subject: [antlr-interest] LL(k)
In-Reply-To: <C3525AF49F7D374D8E4D3C46ED4BC6211684BD@srvxdcex.xebic.com>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684BD@srvxdcex.xebic.com>
Message-ID: <20080319223828.000059e5@goanna>

> Hi,
> 
>  
> 
> Could anybody give me a clue what the consequences are of specifying
> a k value in the options section of an ANTLR grammar, performance
> wise?

Hello Patrick,

I think the answer depends on whether I read ahead to where you
you mention semantic predicates or not, and you didn't actually
say what type of semantic predicate, so from the context of
the question I am assuming you mean dis-ambiguating semantic
predicates:

- without dis-ambiguating semantic predicates:
A: Either k is * or high enough and the grammar simple enough
for ANTLR to figure out the grammar, in which case the performance
should be good.  Or otherwise, the performance is likely to be
worse as its then necessary to resort to other approaches to
parse the grammar.

- with dis-ambiguating semantic predicates:
A: By reducing k to force the dis-ambiguating semantic predicates to be
called, the performance is likely to be slower than a grammar that
does not use dis-ambiguating semantic predicates.  The
dis-ambiguating semantic predicates are likely to be called
repetitively, so you may wish to cache the results.  I posted a
little program to this list to demonstrate that earlier:

http://www.antlr.org/pipermail/antlr-interest/2008-February/026385.html

> And what will it do to the recognition power of the generated
> parser?

- without dis-ambiguating semantic predicates:
ANTLR is either going to be able to generate a parser, or not.

- with dis-ambiguating semantic predicates:
ANTLR can handle very complex grammars with dis-ambiguating semantic
predicates.

> I'm defining a grammar but I'm having an hard time with the prediction
> DFAs in my parser when I'm using LL(*). These don't seem to consider
> semantical predicates in their prediction. When I specify a k=2 value
> all works fine.
> 
>  
> 
> Gr, patrick.

You could add logging to the dis-ambiguating semantic predicates as
demonstrated in the above program so you could see whether they
are being called or not.

Regards, Mark

-- 

From thkarcher at gmx.de  Wed Mar 19 04:54:21 2008
From: thkarcher at gmx.de (Thomas Karcher)
Date: Wed, 19 Mar 2008 12:54:21 +0100
Subject: [antlr-interest] Tree grammars with output=AST
In-Reply-To: <20080319102906.22167gmx1@mx057.gmx.net>
References: <1205920738.6732.5.camel@localhost>
	<20080319102906.22167gmx1@mx057.gmx.net>
Message-ID: <1205927661.6732.34.camel@localhost>

Hi,

>  >That means "AST rewriting by tree grammar with C# as target
>  >language".
>  >I'm using ANTLR 3.0.1.
> IIRC, "tree grammar" with AST output requires ANTLR v3.1.

Thanks for this hint - with 3.1, all the messages disappeared. But one
is left: "The type or namespace name 'RecognizerSharedState' could not
be found"
I guess I also should have an updated Antlr3.runtime.dll - but
http://fisheye2.cenqua.com/changelog/antlr?cs=4154 says, it has been
deleted. Could you give me a hint where I can find the version for ANTLR
v3.1?


Thanks!
Thomas


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Dies ist ein digital signierter Nachrichtenteil
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/ca677870/attachment.bin 

From go2elango at gmail.com  Wed Mar 19 06:24:02 2008
From: go2elango at gmail.com (elango m)
Date: Wed, 19 Mar 2008 18:54:02 +0530
Subject: [antlr-interest] Need help regarding lexer
Message-ID: <154902370803190624l6fb0189aw5584d4a1237cde84@mail.gmail.com>

Hi,

I have defined a lexer like this.

STR_LITERAL : '\'' ('\'\'')* ~('\'')* '\'' ;

But lexer is not respecting  ('\'\'')*. It just takes the first '. For ex.
for input string 'a''bc', it resolves only 'a', but I want  resolve 'a''bc'
as a single token .Could any one please help me what I am missing.

Thanks in advance.
-EM-
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/479241d0/attachment.html 

From Waverly.Edwards at genesys.com  Wed Mar 19 06:30:21 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Wed, 19 Mar 2008 09:30:21 -0400
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <20080319105546.EA5A511ED1E@www.antlr.org>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu><47DF40BE.6020605@Yahoo.com><254336A1-444A-415F-A4C5-3D43405E9B6A@cs.usfca.edu>
	<20080319105546.EA5A511ED1E@www.antlr.org>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1FF4EB5@navamane001.ad.internal.corp>


If I understand correctly...
If you don't specify right associativity then its assumed to be left.
Order or precedence indicated by the depth of primary expressions
subrules.


That is an outstanding idea.


W.


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gavin Lambert
Sent: Wednesday, March 19, 2008 6:55 AM
To: Terence Parr
Cc: antlr-interest Interest
Subject: Re: [antlr-interest] faster expression parsing

At 14:57 19/03/2008, Terence Parr wrote:
 >We'd just need to say something like you request.  I also
 >thought that just using an option would be ok...or, use
 >the left-recursive rule.
 >
 >e	:	e '*' e
 >	|	e '-' e
 >	|	e '+' e
 >	|	'-' e
 >	|	e '.' ID
 >	|	e '[' e ']'
 >	|	e '(' e (',' e)* ')'
 >	|	INT
 >	|	ID
 >	;
 >
 >That's nice 'cause it's explicit like a yacc grammar would be.
 >I'd recognize this pattern and build what i sent before.  Only
 >issue is precedence.  Order would work sort of but probably
 >not perfectly...for example a+b.x should not match as (a+b).x.

Well, for that case I think that's just because the alts are out 
of order :)

Though I don't think you can use alt order alone as an indicator 
of precedence, since there has to be some way to signal equal 
precedence (think "a * b / c".  If division is given higher 
precedence than multiplication then you'll get the wrong answer, 
using integer arithmetic).

Extending that a bit (and including subrule invocation), how about 
something like this:

e : ( ID | INT )
   | '(' e ')'
   | callArrayMember
   | unop
   | ( e '*' e | e '/' e )
   | ( e '+' e | e '-' e )
   | comparison
   | assignment
   ;

callArrayMember
   : e '(' e (',' e)* ')'
   | e '[' e ']'
   | e '.' ID
   ;

unop
options { associativity = right; }
   : '+' e
   | '-' e
   ;

comparison
   : e '==' e
   | e '!=' e
   | e '<' e
   | e '>' e
   | e '<=' e
   | e '>=' e
   ;

assignment
options { associativity = right; }
   : e '=' e
   | e '+=' e
   | e '-=' e
   | e '*=' e
   | e '/=' e
   ;

The idea is that in the "root" rule (which might need a special 
option to make it easily recognisable), each top-level alt 
represents an order of precedence, from highest to 
lowest.  Sub-alts (as in ID & INT, * & /) have equal 
precedence.  If a subrule is called, it's treated like a sub-alt; 
all alts within the subrule have equal precedence.  You can also 
use an option to specify the operator associativity.  (I think 
you're allowed to specify options at the alt level as well, but 
just to be safe [and because it seemed tidier that way] I put them 
in subrules.)

Of course, I'm not sure how hard all of this would be to produce; 
it's like a little mini-grammar in its own right.  And something 
like the callArrayMember subrule would probably be hard to 
generate a good AST automatically for.


From stefan.bucur at gmail.com  Wed Mar 19 06:39:51 2008
From: stefan.bucur at gmail.com (Stefan Bucur)
Date: Wed, 19 Mar 2008 15:39:51 +0200
Subject: [antlr-interest] Generic AST tree parser
Message-ID: <8cdebd3f0803190639j7b86addbua9dbf05586ee8e0d@mail.gmail.com>

Hello!

I'm trying to build a tree grammar that would accept any AST generated
by an ANTLR grammar, and display it on the screen. However, my code
fails to show elements below the first level, and it shows only the
root elements in the AST. The tree grammar looks like:


start
	:	(syntaxTree[0])*
	;

syntaxTree [int level]
@init {
	int nextLevel = level + 1;
}
	:	^(node[$level] (syntaxTree[nextLevel])* ) // Accept a subtree...
	|	node[$level] // ...or a leaf node
	;
	
node [int level]
	:	token=. { System.out.println($level + " : " + $token.text); } //
Accept any token
	;
	catch [Exception e] { e.printStackTrace(); }



Do you have any idea what could be wrong? :-/

Thanks!

Stefan Bucur

From markwright at internode.on.net  Wed Mar 19 07:13:31 2008
From: markwright at internode.on.net (Mark Wright)
Date: Thu, 20 Mar 2008 01:13:31 +1100
Subject: [antlr-interest] LL(k)
In-Reply-To: <C3525AF49F7D374D8E4D3C46ED4BC6211684CD@srvxdcex.xebic.com>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684BD@srvxdcex.xebic.com>
	<20080319223828.000059e5@goanna>
	<C3525AF49F7D374D8E4D3C46ED4BC6211684CD@srvxdcex.xebic.com>
Message-ID: <20080320011331.00005842@goanna>

> On Wed, 19 Mar 2008 13:52:38 +0100
> "Patrick Hulsmeijer" <phulsmeijer at xebic.com> wrote:
>
> Thanks for your information!
> 
> I have trouble with the following (dis-ambiguating) predicates:
> 
> relationalExpression
> 	: shiftExpression ( ( LT^ | GT^ | LTE^ | GTE^ | INSTANCEOF^ |
> { !noIn }?=> IN^ ) shiftExpression )*
> 	;
> 
> The predicate in front of the IN alternative is there to be able to
> turn the IN alternative off because it can be ambiguous in the
> context of another rule. When it should be recognized and is not
> ambiguous the noIn is false, when it is ambiguous noIn is true. noIn
> is just a private field of my parser class. When I debug the code in
> my parser I see that the resulting DFA never predicts the IN
> alternative as viable when I use LL(*), even though noIn is false.

Hello Patrick,

I don't really know why, some ideas:

- I have never tried a semantic predicate in a sub-rule like
that, so I don't know if it works or not.  I guess if you were
curious you could try factoring it something like:

relationalExpression
 	: shiftExpression shiftExpressionRhs*
 	;

shiftExpressionRhs
        : ( LT^ | GT^ | LTE^ | GTE^ | INSTANCEOF^ | { !noIn }?=> IN^ ) shiftExpression
        ;

- maybe the DFA notices that the shiftExpression after the IN does not
match.
 
> statement
> 	: block
> 	| variableStatement
> 	| emptyStatement
> 	| expressionStatement
> 	| ifStatement
> 	| iterationStatement
> 	| continueStatement
> 	| breakStatement
> 	| returnStatement
> 	| withStatement
> 	| labelledStatement
> 	| switchStatement
> 	| throwStatement
> 	| tryStatement
> 	;
> 	
> block
> 	: LBRACE sourceElement* RBRACE
> 	;
> 
> expressionStatement
> 	: { !(input.LA(1) == LBRACE || input.LA(1) == FUNCTION) }?=>
> expression semic!
> 	;
> 
> The predicate in the expressionStatement is there because the
> expression and the statement rule both have alternatives that have a
> LBRACE and a FUNCTION on the left edge. But when I use LL(*) the DFA
> prediction in the statement rule never considers the block rule as an
> alternative anymore.

It seems confusing to write a semantic predicate which says it
can match an alternative if the input does not start with some tokens.

I think it would be better to instead have semantic predicates on
the other alternative which look for tokens that do match the
alternatives.  The dis-ambiguating semantic predicates can do things
like scan ahead over a function head looking for a token like
{ or ; that indicates whether it is a function declaration or maybe
a function call.

Regards, Mark

> Both situation work fine when I use LL(k) with a k of 2.
> 
> Regards, patrick.

-- 

From ph_reader at faes.net  Wed Mar 19 07:28:19 2008
From: ph_reader at faes.net (Philippe Faes)
Date: Wed, 19 Mar 2008 15:28:19 +0100
Subject: [antlr-interest] template generation for dumb rules
Message-ID: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>

Dear ANTLR-gang,

I'm writing an ANTLR stringtemplate generator, which translates a tree to a
string template. My grammar has many rules like this:
a : b | c;
The generation rule that I want for these rules looks something like:
a: b -> template(b={$b.st}) "<b>"
  | c -> template(c={$c.st}) "<c>";
In fact the stringtemplate just repeats whatever the underlying rule would
return as stringtemplate.
These rules have very little extra value, but they require a lot of typing,
and decrease the general readability of the grammar.
I was hoping to find a way of setting this "braindead" stringtemplate rule
as a default. Is there any way somebody can save me a lot of time typing
these rules?

kind regards
Philippe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/f1a1cc20/attachment.html 

From parrt at cs.usfca.edu  Wed Mar 19 07:28:14 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 19 Mar 2008 08:28:14 -0600
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <FF993752CB890B4EB591BE5450C37BF1FF4EB5@navamane001.ad.internal.corp>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu><47DF40BE.6020605@Yahoo.com><254336A1-444A-415F-A4C5-3D43405E9B6A@cs.usfca.edu>
	<20080319105546.EA5A511ED1E@www.antlr.org>
	<FF993752CB890B4EB591BE5450C37BF1FF4EB5@navamane001.ad.internal.corp>
Message-ID: <0DDC7339-F660-4D37-8CDE-8B824CEDBB95@cs.usfca.edu>


On Mar 19, 2008, at 7:30 AM, Edwards, Waverly wrote:

>
> If I understand correctly...
> If you don't specify right associativity then its assumed to be left.
> Order or precedence indicated by the depth of primary expressions
> subrules.
>
>
> That is an outstanding idea.

thanks...pretty clean...

>> e	:	e '*' e
>> 	|	e '-' e
>> 	|	e '+' e
>> 	|	'-' e
>> 	|	e '.' ID
>> 	|	e '[' e ']'
>> 	|	e '(' e (',' e)* ')'
>> 	|	INT
>> 	|	ID
>> 	;

I'll work on this...
Ter

From stefan.bucur at gmail.com  Wed Mar 19 07:30:34 2008
From: stefan.bucur at gmail.com (Stefan Bucur)
Date: Wed, 19 Mar 2008 16:30:34 +0200
Subject: [antlr-interest] Need help regarding lexer
In-Reply-To: <8cdebd3f0803190650h47ab9ca2xb87520bf9c185e5b@mail.gmail.com>
References: <154902370803190624l6fb0189aw5584d4a1237cde84@mail.gmail.com>
	<8cdebd3f0803190650h47ab9ca2xb87520bf9c185e5b@mail.gmail.com>
Message-ID: <8cdebd3f0803190730j7577c393tc71d654fbf48e9e1@mail.gmail.com>

On Wed, Mar 19, 2008 at 3:24 PM, elango m <go2elango at gmail.com> wrote:
 > Hi,
 >
 > I have defined a lexer like this.
 >
 > STR_LITERAL : '\'' ('\'\'')* ~('\'')* '\'' ;
 >
 > But lexer is not respecting  ('\'\'')*. It just takes the first '. For ex.
 > for input string 'a''bc', it resolves only 'a', but I want  resolve 'a''bc'
 > as a single token .Could any one please help me what I am missing.
 >
 > Thanks in advance.
 > -EM-
 >

 Hello!

 Perhaps you would like something like:

 STR_LITERAL: '\'' (~('\'') | '\'\'')* '\'';

 which means: match any number of elements between qoutes, and these
 elements are either not a qoute, or are a double qoute.

 Hope this helps!

 Stefan Bucur

From john at jacelridge.com  Wed Mar 19 07:35:14 2008
From: john at jacelridge.com (John Ridgway)
Date: Wed, 19 Mar 2008 10:35:14 -0400
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <0DDC7339-F660-4D37-8CDE-8B824CEDBB95@cs.usfca.edu>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu><47DF40BE.6020605@Yahoo.com><254336A1-444A-415F-A4C5-3D43405E9B6A@cs.usfca.edu>
	<20080319105546.EA5A511ED1E@www.antlr.org>
	<FF993752CB890B4EB591BE5450C37BF1FF4EB5@navamane001.ad.internal.corp>
	<0DDC7339-F660-4D37-8CDE-8B824CEDBB95@cs.usfca.edu>
Message-ID: <91CB9F86-12FC-47DA-9ABF-7FBB09FF90D4@jacelridge.com>

You could steal an idea from ML :-) :
e : {options infix 60} e '*' e
    | {options infix 50} e '-' e
    | {options infix 50} e '+' e
    | {options infixr 66} e '::' e
  ...
or whatever.

Peace
- John


On Mar 19, 2008, at 10:28 AM, Terence Parr wrote:

>
> On Mar 19, 2008, at 7:30 AM, Edwards, Waverly wrote:
>
>>
>> If I understand correctly...
>> If you don't specify right associativity then its assumed to be left.
>> Order or precedence indicated by the depth of primary expressions
>> subrules.
>>
>>
>> That is an outstanding idea.
>
> thanks...pretty clean...
>
>>> e	:	e '*' e
>>> 	|	e '-' e
>>> 	|	e '+' e
>>> 	|	'-' e
>>> 	|	e '.' ID
>>> 	|	e '[' e ']'
>>> 	|	e '(' e (',' e)* ')'
>>> 	|	INT
>>> 	|	ID
>>> 	;
>
> I'll work on this...
> Ter


From antlr at jazillian.com  Wed Mar 19 08:13:17 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Wed, 19 Mar 2008 11:13:17 -0400
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <frphlv$v14$1@ger.gmane.org>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>	<47D85F43.6030400@jazillian.com>	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>	<frpd9c$g5b$1@ger.gmane.org>	<47E03EA5.7080906@jazillian.com>	<frpgom$rsv$1@ger.gmane.org>
	<frphlv$v14$1@ger.gmane.org>
Message-ID: <47E12D8D.30309@jazillian.com>

Olivier Lefevre wrote:
> Olivier Lefevre wrote:
>> I still think it useful to think of the parse tree as something the 
>> tool will build for you automatically (if you ask it to) whereas the 
>> AST is something _you_ must build, making _all_ the decisions.

No, ANTLR will build you an AST when you specify "output=AST", even if
you don't give it any instructions for doing so (putting ^ chars in
your grammar). It's just that the "tree" will degenerate/flat.

That doesn't seem like a good thing to me, and that's what I was
arguing in that other thread.

> 
> To elaborate just a tiny bit, you might say this is a superficial 
> difference but if you ask a tree from the tool it will of necessity 
> return a parse tree because that's the only thing it can return 

That's what it *should* do, IMHO, but that's not what it does.

(it 
> can't possibly know what kind of AST you want) whereas if you build the 
> tree you will, well, not "of necessity" but almost certainly build an 
> AST of sorts, reflecting your post-processing needs and thus the 
> semantics of the language. Thus in practice the parse tree vs. AST 
> divide tends to overlap neatly with the by-default vs. explicitly built 
> divide.

I agree with you, but I think most here don't.
> 
> -- O.L.
> 


From go2elango at gmail.com  Wed Mar 19 09:08:32 2008
From: go2elango at gmail.com (elango m)
Date: Wed, 19 Mar 2008 21:38:32 +0530
Subject: [antlr-interest] Need help regarding lexer
In-Reply-To: <8cdebd3f0803190730j7577c393tc71d654fbf48e9e1@mail.gmail.com>
References: <154902370803190624l6fb0189aw5584d4a1237cde84@mail.gmail.com>
	<8cdebd3f0803190650h47ab9ca2xb87520bf9c185e5b@mail.gmail.com>
	<8cdebd3f0803190730j7577c393tc71d654fbf48e9e1@mail.gmail.com>
Message-ID: <154902370803190908i3d7f14ccxcbd50cd47ba3da2e@mail.gmail.com>

Hi Stefan and Victor,

Thanks a lot!!!. Following worked.

STR_LITERAL: '\'' (~('\'') | '\'\'')* '\'';

I am just curious why STR_LITERAL : '\'' ('\'\'')* ~('\'')* '\'' ; didn't
worked???

-EM-


On Wed, Mar 19, 2008 at 8:00 PM, Stefan Bucur <stefan.bucur at gmail.com>
wrote:

> On Wed, Mar 19, 2008 at 3:24 PM, elango m <go2elango at gmail.com> wrote:
>  > Hi,
>  >
>  > I have defined a lexer like this.
>  >
>  > STR_LITERAL : '\'' ('\'\'')* ~('\'')* '\'' ;
>  >
>  > But lexer is not respecting  ('\'\'')*. It just takes the first '. For
> ex.
>  > for input string 'a''bc', it resolves only 'a', but I want  resolve
> 'a''bc'
>  > as a single token .Could any one please help me what I am missing.
>  >
>  > Thanks in advance.
>  > -EM-
>  >
>
>  Hello!
>
>  Perhaps you would like something like:
>
>  STR_LITERAL: '\'' (~('\'') | '\'\'')* '\'';
>
>  which means: match any number of elements between qoutes, and these
>  elements are either not a qoute, or are a double qoute.
>
>  Hope this helps!
>
>  Stefan Bucur
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/c9c5cc1d/attachment.html 

From antlr at mirality.co.nz  Wed Mar 19 11:51:48 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 20 Mar 2008 07:51:48 +1300
Subject: [antlr-interest] Need help regarding lexer
In-Reply-To: <154902370803190908i3d7f14ccxcbd50cd47ba3da2e@mail.gmail.co
 m>
References: <154902370803190624l6fb0189aw5584d4a1237cde84@mail.gmail.com>
	<8cdebd3f0803190650h47ab9ca2xb87520bf9c185e5b@mail.gmail.com>
	<8cdebd3f0803190730j7577c393tc71d654fbf48e9e1@mail.gmail.com>
	<154902370803190908i3d7f14ccxcbd50cd47ba3da2e@mail.gmail.com>
Message-ID: <20080319185203.0107011ED85@www.antlr.org>

At 05:08 20/03/2008, elango m wrote:
>I am just curious why STR_LITERAL : '\'' ('\'\'')* ~('\'')* '\'' 
>; didn't worked???

Because order is significant.  If you expand out each element of 
that rule and see what it means:

   '\''     : match a single quote
   ('\'\')* : match zero or more sets of two single quotes
   ~('\'')* : this is actually illegal, but in theory it's "match 
zero or more characters that aren't single quotes".
   '\''     : match a single quote

Follow that through in order, and it's obvious why it can't 
possibly match input such as "'a''bc'".  It could, however, match 
something like "'''''''''abcd'.


From espina.edgar at gmail.com  Wed Mar 19 13:29:37 2008
From: espina.edgar at gmail.com (Edgar Espina)
Date: Wed, 19 Mar 2008 17:29:37 -0300
Subject: [antlr-interest] ANTLR 3.1
Message-ID: <92b42db60803191329s3efdb7d1l480f3e41ec00a1cd@mail.gmail.com>

Hi all,

Where can I read about the new features of ANTLR 3.1?

Thx,

Edgar
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/6d1a1787/attachment.html 

From jaluber at gmx.de  Wed Mar 19 15:16:45 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 19 Mar 2008 23:16:45 +0100
Subject: [antlr-interest] Tree grammars with output=AST
In-Reply-To: <1205927661.6732.34.camel@localhost>
References: <1205920738.6732.5.camel@localhost>	<20080319102906.22167gmx1@mx057.gmx.net>
	<1205927661.6732.34.camel@localhost>
Message-ID: <47E190CD.1010008@gmx.de>

Thomas Karcher schrieb:
> Hi,
> 
>>  >That means "AST rewriting by tree grammar with C# as target
>>  >language".
>>  >I'm using ANTLR 3.0.1.
>> IIRC, "tree grammar" with AST output requires ANTLR v3.1.
> 
> Thanks for this hint - with 3.1, all the messages disappeared. But one
> is left: "The type or namespace name 'RecognizerSharedState' could not
> be found"
> I guess I also should have an updated Antlr3.runtime.dll - but
> http://fisheye2.cenqua.com/changelog/antlr?cs=4154 says, it has been
> deleted. Could you give me a hint where I can find the version for ANTLR
> v3.1?

I would refer you to the immediate builds, which contain the source code 
for the C# target, but right now the target is broken. I'll attack this 
over the next few weeks, but I don't know when I'll finish this. The 
last working build was in January, though, if you still want to try it.

Johannes

From ae.armstrong at gmail.com  Wed Mar 19 15:41:17 2008
From: ae.armstrong at gmail.com (Aaron Armstrong)
Date: Wed, 19 Mar 2008 15:41:17 -0700
Subject: [antlr-interest] Parse Tree (lack of) functionality
Message-ID: <5a086d5a0803191541k14a8ad14g9f8b6cd5ec1f85bf@mail.gmail.com>

I am using org.antlr.runtime.tree.ParseTree.  It defines various functions;
the ones of interest are:
getTokenStartIndex()
getTokenStopIndex()
setTokenStartIndex()
setTokenStopIndex()

Looking at ParseTree.class (using Eclipse), I see:
// Method descriptor #20 ()I
// Stack: 1, Locals: 1
public int getTokenStartIndex();
 0 iconst_0
 1 ireturn
   Line numbers:
    [pc: 0, line: 56]

//Method descriptor #25 (I)V
//Stack: 0, Locals: 2
public void setTokenStartIndex(int arg0);
 0 return
  Line numbers:
   [pc 0, line: 60]

//Method descriptor #20 ()I
//Stack: 1, Locals: 1
public int getTokenStopIndex();
 0 iconst_0
 1 ireturn
   Line numbers:
     [pc: 0, line: 63]

//Method descriptor #25 (I)V
//Stack: 1, Locals: 1
public void setTokenStopIndex(int arg0);
 0 return
  Line numbers:
   [pc: 0, line: 67]

I wanted to show the bytecode just to see that it isn't outdated.  However,
judging by what I see, these functions do literally nothing.

Just wanted to bring this up.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080319/cba0bb74/attachment.html 

From parrt at cs.usfca.edu  Wed Mar 19 17:24:45 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 19 Mar 2008 18:24:45 -0600
Subject: [antlr-interest] Java 1.5 grammar updated
Message-ID: <E74F46A9-2616-40C6-B79A-A674F3DB2FB1@cs.usfca.edu>

Hi, thanks to John Ridgway, we have a major set of fixes to Java.g

http://www.antlr.org/grammar/1152141644268/Java.g

Parses JDK 1.5 source he says.

Terence

From phulsmeijer at xebic.com  Thu Mar 20 02:54:58 2008
From: phulsmeijer at xebic.com (Patrick Hulsmeijer)
Date: Thu, 20 Mar 2008 10:54:58 +0100
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
Message-ID: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>

Hi all,

 

Can somebody tell me whether remote debugging a C# targeted parser in
ANTLRWorks should work with ANTLR 3.01?

De code it generates with the -debug options doesn't compile.

 

Regards, patrick.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/bc103535/attachment.html 

From wiggjd at bcs.org.uk  Thu Mar 20 04:41:23 2008
From: wiggjd at bcs.org.uk (David Wigg)
Date: Thu, 20 Mar 2008 11:41:23 +0000
Subject: [antlr-interest] Conversion V2 to V3
Message-ID: <c34954d70803200441q54339760je0837dd2a73e2c5@mail.gmail.com>

In "Migrating from Antlr 2 to Antlr 3" it says under "Changing the type of
tokens in the lexer" that we need to change,

{$setType(TOKEN);} to {$type = TOKEN;}

 In V2 I was able to set a token name using e.g. "{_ttype =
HEXADECIMALINT;}"

but when I replace this with {$type = HEXADECIMALINT;) it doesn't work and I
get warning (105)

"No lexer rule corresponding to token: HEXADECIMALINT".

Relevant code shown below,

Please could someone let me know where I am going wrong or point out where I
can find the answer.

I searched (literally) the antlr site but couldn't find anything else.

tokens
 {
 OPERATOR = 'operator';
 OCTALINT;
 DECIMALINT;
 HEXADECIMALINT;
 FLOATONE;
 FLOATTWO;
 }

literal
 : OCTALINT
 | DECIMALINT
 | HEXADECIMALINT
 | CharLiteral
 | WCharLiteral
 | (StringLiteral|WStringLiteral)+
 | FLOATONE
 | FLOATTWO
 | 'true'
 | 'false'
 ;

 Number
 :
  ( (Digit)+ ('.' | 'e' | 'E') )=>
  (Digit)+
  ( '.' (Digit)* (Exponent)? {_ttype = FLOATONE;} //Zuo 3/12/01
  | Exponent                 {_ttype = FLOATTWO;} //Zuo 3/12/01
  )                          //{_ttype = DoubleDoubleConst;}
  (FloatSuffix               //{_ttype = FloatDoubleConst;}
  |LongSuffix                //{_ttype = LongDoubleConst;}
  )?
 |
  ('...')=> '...'            {_ttype = ELLIPSIS;}
 |
  '.'                        {_ttype = DOT;}
  ( (Digit)+ (Exponent)?   {_ttype = FLOATONE;} //Zuo 3/12/01
                                   //{_ttype = DoubleDoubleConst;}
   (FloatSuffix           //{_ttype = FloatDoubleConst;}
   |LongSuffix            //{_ttype = LongDoubleConst;}
   )?
  )?
 |
  '0' ('0'..'7')*            //{_ttype = IntOctalConst;}
  (LongSuffix                //{_ttype = LongOctalConst;}
  |UnsignedSuffix            //{_ttype = UnsignedOctalConst;}
  )*                         {_ttype = OCTALINT;}
 |
  '1'..'9' (Digit)*          //{_ttype = IntIntConst;}
  (LongSuffix                //{_ttype = LongIntConst;}
  |UnsignedSuffix            //{_ttype = UnsignedIntConst;}
  )*                         {_ttype = DECIMALINT;}
 |
  '0' ('x' | 'X') (HexadecimalDigit)+ //('a'..'f' | 'A'..'F' | Digit)+
                                   //{_ttype = IntHexConst;}
  (LongSuffix                //{_ttype = LongHexConst;}
  |UnsignedSuffix            //{_ttype = UnsignedHexConst;}
//  )*                         {_ttype = HEXADECIMALINT;}   JDW_080320
  )*       {$type = HEXADECIMALINT;}
 ;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/756bf7ad/attachment.html 

From thkarcher at gmx.de  Thu Mar 20 05:25:19 2008
From: thkarcher at gmx.de (Thomas Karcher)
Date: Thu, 20 Mar 2008 13:25:19 +0100
Subject: [antlr-interest] Tree grammars with output=AST and
	generating	problem
In-Reply-To: <47E190CD.1010008@gmx.de>
References: <1205920738.6732.5.camel@localhost>
	<20080319102906.22167gmx1@mx057.gmx.net>
	<1205927661.6732.34.camel@localhost>  <47E190CD.1010008@gmx.de>
Message-ID: <1206015919.4835.18.camel@localhost>

Hi,

> last working build was in January, though, if you still want to try it.

Thanks, Johannes, for that hint - with the January version, it seems to
work ...

But I got another problem that I'm not sure if it is my mistake or a
bug:

I have a lexer/parser grammar with CSharp AST output like

start:	rule1
rule:	rule2*
rule2:	TOKEN1 rule3 TOKEN2 -> rule3
...

which I generate with ANTLRWorks 1.2b1.

Unfortunately, the parser crashes with an
Antlr.Runtime.Tree.RewriteEmptyStreamException. I debugged the generated
parser code a bit and found something out: For the AST generation, a
variable named root_0 is initialized with null. During rule processing,
this future root node of the returned AST is not properly filled ... not
even with the nil node. If I fix this by hand, the parser works.
Is this an issue that you know about? I'd be glad to help you debugging
if necessary.


Thanks,
Thomas


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Dies ist ein digital signierter Nachrichtenteil
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/975dcb8e/attachment.bin 

From antlr at mirality.co.nz  Thu Mar 20 05:35:18 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 21 Mar 2008 01:35:18 +1300
Subject: [antlr-interest] Conversion V2 to V3
In-Reply-To: <c34954d70803200441q54339760je0837dd2a73e2c5@mail.gmail.com
 >
References: <c34954d70803200441q54339760je0837dd2a73e2c5@mail.gmail.com>
Message-ID: <20080320123536.9335011EBEA@www.antlr.org>

At 00:41 21/03/2008, David Wigg wrote:
>but when I replace this with {$type = HEXADECIMALINT;) it doesn't 
>work and I get warning (105)
>
>"No lexer rule corresponding to token: HEXADECIMALINT".

It should actually work despite giving that warning.

>tokens
>  {
>  OPERATOR = 'operator';
>  OCTALINT;
>  DECIMALINT;
>  HEXADECIMALINT;
>  FLOATONE;
>  FLOATTWO;
>  }

An odd quirk in recent versions of ANTLR makes it issue that 
warning when you've declared tokens like above and then tried to 
use them in the lexer.  (Supposedly the syntax above was designed 
only to introduce new virtual tokens for AST generation in the 
parser, but in earlier versions of ANTLR it did work in the lexer 
without problems.)

To get rid of the warning, just remove the tokens block 
declaration and add a fragment lexer rule instead:

fragment HEXADECIMALINT : ('0'..'9' | 'a'..'f' | 'A'..'F')+;

(Note that since this is a fragment rule and it's never referenced 
by any other lexer rule, the rule body itself is never actually 
invoked and so its contents don't actually matter.  They just 
can't be empty or the warning will come back again.)

It's a little clunky, admittedly, and I'm hoping the 
tokens-block-in-lexer syntax will come back (without the warning) 
in a future build.  But for the moment this is the way you need to 
go :)

Incidentally, you also might want to reorder the alts in your 
Number rule.  AFAIK the alts are tested in order, so you should 
have the less-specific prefixes (such as Digit) towards the end of 
the rule.


From go2elango at gmail.com  Thu Mar 20 06:34:25 2008
From: go2elango at gmail.com (elango m)
Date: Thu, 20 Mar 2008 19:04:25 +0530
Subject: [antlr-interest] Need help regarding lexer
In-Reply-To: <47e160d5.21054e0a.7d48.ffffb51aSMTPIN_ADDED@mx.google.com>
References: <154902370803190624l6fb0189aw5584d4a1237cde84@mail.gmail.com>
	<8cdebd3f0803190650h47ab9ca2xb87520bf9c185e5b@mail.gmail.com>
	<8cdebd3f0803190730j7577c393tc71d654fbf48e9e1@mail.gmail.com>
	<154902370803190908i3d7f14ccxcbd50cd47ba3da2e@mail.gmail.com>
	<47e160d5.21054e0a.7d48.ffffb51aSMTPIN_ADDED@mx.google.com>
Message-ID: <154902370803200634q1d7c6702l529ed539f2b18f3e@mail.gmail.com>

I got it. Thanks Gavin for explaining so well.

Regards,
-EM-

On Thu, Mar 20, 2008 at 12:21 AM, Gavin Lambert <antlr at mirality.co.nz>
wrote:

> At 05:08 20/03/2008, elango m wrote:
> >I am just curious why STR_LITERAL : '\'' ('\'\'')* ~('\'')* '\''
> >; didn't worked???
>
> Because order is significant.  If you expand out each element of
> that rule and see what it means:
>
>   '\''     : match a single quote
>   ('\'\')* : match zero or more sets of two single quotes
>   ~('\'')* : this is actually illegal, but in theory it's "match
> zero or more characters that aren't single quotes".
>   '\''     : match a single quote
>
> Follow that through in order, and it's obvious why it can't
> possibly match input such as "'a''bc'".  It could, however, match
> something like "'''''''''abcd'.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/e551dc0e/attachment.html 

From kenneth.domino at domemtech.com  Thu Mar 20 07:58:30 2008
From: kenneth.domino at domemtech.com (Kenneth Domino)
Date: Thu, 20 Mar 2008 10:58:30 -0400
Subject: [antlr-interest] public final void mFOO() in lexers?
Message-ID: <817252DD2CED4F218B40D797B45D7302@pc2008>

Hi,

I was looking at the code generated for lexers and I noticed that
token type rules are translated into public routines, not private.  I
understand why rules are public in parsers, and why mTokens() is
public.  But, I don't understand why this is the case for the rest of
the token rules in the lexer.  Is there a reason why, maybe to
influence the lexing by selecting some subset of rules?

Ken Domino

From jaluber at gmx.de  Thu Mar 20 09:52:39 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 20 Mar 2008 17:52:39 +0100
Subject: [antlr-interest] Tree grammars with output=AST and generating
 problem
In-Reply-To: <1206015919.4835.18.camel@localhost>
References: <1205920738.6732.5.camel@localhost>	
	<20080319102906.22167gmx1@mx057.gmx.net>	
	<1205927661.6732.34.camel@localhost> <47E190CD.1010008@gmx.de>
	<1206015919.4835.18.camel@localhost>
Message-ID: <47E29657.6050508@gmx.de>

Thomas Karcher schrieb:
> Hi,
> 
>> last working build was in January, though, if you still want to try it.
> 
> Thanks, Johannes, for that hint - with the January version, it seems to
> work ...
> 
> But I got another problem that I'm not sure if it is my mistake or a
> bug:
> 
> I have a lexer/parser grammar with CSharp AST output like
> 
> start:	rule1
> rule:	rule2*
> rule2:	TOKEN1 rule3 TOKEN2 -> rule3
> ...
> 
> which I generate with ANTLRWorks 1.2b1.
> 
> Unfortunately, the parser crashes with an
> Antlr.Runtime.Tree.RewriteEmptyStreamException. I debugged the generated
> parser code a bit and found something out: For the AST generation, a
> variable named root_0 is initialized with null. During rule processing,
> this future root node of the returned AST is not properly filled ... not
> even with the nil node. If I fix this by hand, the parser works.
> Is this an issue that you know about? I'd be glad to help you debugging
> if necessary.

I haven't seen this bug yet. Can you create a minimal grammar exhibiting 
the bug and what to do about?

Johannes

From cieslewski at hcs.ufl.edu  Thu Mar 20 12:24:02 2008
From: cieslewski at hcs.ufl.edu (Grzegorz Cieslewski)
Date: Thu, 20 Mar 2008 15:24:02 -0400
Subject: [antlr-interest] Java Code Generation Problem with Tree Grammar
	outputting AST
Message-ID: <7aa837f80803201224y75917c59ocf92f8629f56aee2@mail.gmail.com>

Hello,

I am currently using the antlr-2008-03-13.12 build and I have
encountered a following problem when building a tree rewriter.  It
might be related to the problem from other post but I am not sure of
that.  I constructed a grammar that demonstrates my problem

grammar T;
options {output=AST;}
tokens
{
	EXPR;
}
a	:	type ID INT -> ^(type ID INT)		
	;
		
type	:	'int'
	|	'char';
	
ID : 'a'..'z'+ ;
INT : '0'..'9'+;
WS : (' '|'\n') {$channel=HIDDEN;} ;

tree grammar TP;
options {
	output=AST;
	ASTLabelType=CommonTree;
	tokenVocab=T;
	}
	
	
a	: ^(type ID INT) -> ^(type ID INT)
	;

type	:	'int'
	|	'char'
	;

The tree grammar does not do anything except rewrite the tree in
exactly the same manner.
When I try to compile it I get the following errors:

TP.java:84: ']' expected
            stream_[TP.type,index=2,line=12].add(type1.getTree());
                           ^
TP.java:84: not a statement
            stream_[TP.type,index=2,line=12].add(type1.getTree());
                   ^
TP.java:84: ';' expected
            stream_[TP.type,index=2,line=12].add(type1.getTree());
                                   ^
TP.java:84: ';' expected
            stream_[TP.type,index=2,line=12].add(type1.getTree());

I traced it down to the following line:
stream_[TP.type,index=2,line=12].add(type1.getTree());

It seems that the "stream_[TP.type,index=2,line=12]" shuld be
"stream_type".  Upon performing that correction the grammar works
correctly.

It looks like a bug, could someone verify it.

Thanks,



-- 
=====================================================
Grzegorz Cieslewski
Research Assistant
High-performance Computing & Simulation (HCS) Research Laboratory
University of Florida, Dept. of Electrical and Computer Engineering
330 Benton Hall, Gainesville, FL, 32611-6200
Phone: (352) 392-9041
Email: cieslewski at hcs.ufl.edu
Web: www.hcs.ufl.edu
=====================================================

From lefevrol at yahoo.com  Thu Mar 20 12:26:10 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Thu, 20 Mar 2008 20:26:10 +0100
Subject: [antlr-interest] LPG WAS Retaining comments
In-Reply-To: <47E12D8D.30309@jazillian.com>
References: <96AD91D781CCD511A66000B0D0D15C49043DAE39@EXSVR1>	<ebc876d70803121102v2895f731m44768e3d4dcc6b97@mail.gmail.com>	<200803122125.m2CLP2bo010275@tach.newtechlaw.com>	<20080312215518.GA21383@badgers-in-foil.co.uk><55E180BD-54A3-485A-8F68-20FAC5E0C5EB@cs.usfca.edu>	<47D85F43.6030400@jazillian.com>	<40CBD611A793EA438464B91E749DD8B003D5E9C1@blums0017.alphatech.com>	<frpd9c$g5b$1@ger.gmane.org>	<47E03EA5.7080906@jazillian.com>	<frpgom$rsv$1@ger.gmane.org>	<frphlv$v14$1@ger.gmane.org>
	<47E12D8D.30309@jazillian.com>
Message-ID: <frudok$ndd$1@ger.gmane.org>

Andy Tripp wrote:
> No, ANTLR will build you an AST when you specify "output=AST", even if
> you don't give it any instructions for doing so (putting ^ chars in
> your grammar). It's just that the "tree" will degenerate/flat.

Oh, OK. It had never occurred to me to try that...

-- O.L.


From rschulz at sonic.net  Thu Mar 20 12:38:40 2008
From: rschulz at sonic.net (Randall R Schulz)
Date: Thu, 20 Mar 2008 12:38:40 -0700
Subject: [antlr-interest] Testing For Alternative Terminals In Actions
Message-ID: <200803201238.40280.rschulz@sonic.net>

Hi,

I have a few productions such as this one:

booleanSentence
    :   ( Open! ( If^ | Then^ | Iff^ | XOr^ ) sentence sentence Close! )
    ;


The grammar has extensions (in this case signified by the "Then" 
and "XOr" cases) which must elicit warnings or errors (or not) 
depending on the optional conformance level established when the parser 
is created.

I'd like to avoid a lot of extra productions to distinguish the extended 
from the base-level tokens. Is there a way for me to write action code 
that distinguish which terminal was used in this sort of production?

If so, how?


Thanks.


Randall Schulz

From antlr-interest at antlr.org  Thu Mar 20 12:48:03 2008
From: antlr-interest at antlr.org (antlr-interest at antlr.org)
Date: Thu, 20 Mar 2008 12:48:03 -0700 (PDT)
Subject: [antlr-interest] MedHelp 08674
Message-ID: <20080320134804.8664.qmail@f336dda81481478>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/00130132/attachment.html 

From rschulz at sonic.net  Thu Mar 20 13:01:56 2008
From: rschulz at sonic.net (Randall R Schulz)
Date: Thu, 20 Mar 2008 13:01:56 -0700
Subject: [antlr-interest] Testing For Alternative Terminals In Actions
In-Reply-To: <200803201238.40280.rschulz@sonic.net>
References: <200803201238.40280.rschulz@sonic.net>
Message-ID: <200803201301.56294.rschulz@sonic.net>

On Thursday 20 March 2008 12:38, Randall R Schulz wrote:
> Hi,

Sorry to jump to the list so quickly.


> I have a few productions such as this one:
>
> booleanSentence
>
>     :   ( Open! ( If^ | Then^ | Iff^ | XOr^ ) sentence sentence Close! )
>
>     ;

I tried this:

  {
    if ($Then != null)
      noteNonCLIF($Then.getLine(), $Then.getCharPositionInLine(), "Non-standard CLIF: \"then\" ");
    if ($XOr != null)
      noteNonCLIF($XOr.getLine(), $XOr.getCharPositionInLine(), "Non-standard CLIF: \"xor\" ");
  }

and got an NPE. I then sent the mail with the question. It turns out
that in my ever-dubious practice of copy-and-modify I left in $
references to a terminal that was prefixed by !. This apparently makes
the token null at the time the action code is executed.

So basically, I actually did have the right technique, just not quite
the right code.


> ...


Randall Schulz

From jaluber at gmx.de  Thu Mar 20 13:06:49 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 20 Mar 2008 21:06:49 +0100
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
Message-ID: <47E2C3D9.7060303@gmx.de>

Patrick Hulsmeijer schrieb:
> Hi all,
> 
>  
> 
> Can somebody tell me whether remote debugging a C# targeted parser in 
> ANTLRWorks should work with ANTLR 3.01?

Theoritically, yes. I didn't manage to use last time because I used the 
wrong class - BlankDebugListener - instead a derived one, but I haven't 
tested it again.

> De code it generates with the ?debug options doesn?t compile.

The templates contain a few errors. I have fixed them in the 3.1 beta, 
as far as I am aware, but 3.1 is incompatible with 3.0 and also doesn't 
work right now. You have to refix the source code yourself at this time.

Johannes

From thkarcher at gmx.de  Thu Mar 20 13:50:23 2008
From: thkarcher at gmx.de (Thomas Karcher)
Date: Thu, 20 Mar 2008 21:50:23 +0100
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <47E2C3D9.7060303@gmx.de>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
	<47E2C3D9.7060303@gmx.de>
Message-ID: <1206046223.4835.31.camel@localhost>

Hi,

> > Can somebody tell me whether remote debugging a C# targeted parser in 
> > ANTLRWorks should work with ANTLR 3.01?
> > De code it generates with the ?debug options doesn?t compile.
> The templates contain a few errors. I have fixed them in the 3.1 beta, 
> as far as I am aware, but 3.1 is incompatible with 3.0 and also doesn't 
> work right now. You have to refix the source code yourself at this time.

Actually, I got it working with ANTLRWorks 1.2b1, with the runtimes
compiled from source from January
(http://fisheye2.cenqua.com/browse/antlr/runtime/CSharp/Sources with
Constraint) ...
I didn't use it exhaustively yet, but the first shot looks good to me.


Thomas


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Dies ist ein digital signierter Nachrichtenteil
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/db85c8a9/attachment.bin 

From swatt at infobal.com  Thu Mar 20 13:59:01 2008
From: swatt at infobal.com (Stuart Watt)
Date: Thu, 20 Mar 2008 16:59:01 -0400
Subject: [antlr-interest] New snapshot of 3.1 beta, plus C runtime b2
In-Reply-To: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAcF9bkHFSmEK	E8tNr8VKOuAEAAAAA@10.0.1.201>
References: <!&!AAAAAAAAAAAgAAAAAAAAAHma4HwC4PlIg/9tuhqVPhQAAAAAYtTBAABQAgAQAAAAcF9bkHFSmEK	E8tNr8VKOuAEAAAAA@10.0.1.201>
Message-ID: <47E2D015.7060509@infobal.com>

Hi folks, and especially Jim

I'm probably being an idiot, but how do you build the C runtime these 
days? The previous version was easy, but now it requires ./configure, 
and I can't quite get that far!!

./configure fails with
config.status: error: cannot find input file: Makefile.in

This could be because automake is failing:

stuart at stuart-desktop:~/antlr-2008-03-13.12/runtime/C$ aclocal
stuart at stuart-desktop:~/antlr-2008-03-13.12/runtime/C$ automake
configure.ac:157: required file `antlr3config.h.in' not found
configure.ac:51: required file `./ltmain.sh' not found

This probably works fine with a better development environment than the 
one I'm trying to use. I'm using Ubuntu gutsy, and I'm not hugely 
experienced at autoconfing stuff. I really only need the antlr3config.h 
file so I can hack it to get the C runtime to compile under the Windows 
system, as I use MinGW rather than VS2005. None of these files seem to 
exist, but I can't be sure whether they are automagically created or 
not, or how to get this to happen.

The readme starts from ./configure, which isn't in the distribution, but 
any advice as to how to get this lot compile under a GNU/Linux type 
platform would be very helpful!

All the best
Stuart


Jim Idle wrote:
>
> Hi,
>
>  
>
> If you are currently using the 3.1 beta snapshot, and especially if 
> you are using the C 3.1 beta runtime, please note that there is now a 
> new snapshot available:
>
>  
>
> antlr-2008-03-13.12.tar.gz 
> <http://www.antlr.org/download/build/antlr-2008-03-13.12.tar.gz>
>
>  
>
> From the intermediate builds link on the downloads page. Please pick 
> this up and use it. Thanks to the people that reported bugs to me -- I 
> think that all reported bugs in the beta are now fixed.
>
>  
>
> Jim
>
>
> -- 
> This message was scanned by ESVA and is believed to be clean.
> Click here to report this message as spam. 
> <http://antispam.infobal.com/cgi-bin/learn-msg.cgi?id=9C67D27FE7.50736> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/219ca0e9/attachment.html 

From antlr at mirality.co.nz  Thu Mar 20 14:59:26 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 21 Mar 2008 10:59:26 +1300
Subject: [antlr-interest] public final void mFOO() in lexers?
In-Reply-To: <817252DD2CED4F218B40D797B45D7302@pc2008>
References: <817252DD2CED4F218B40D797B45D7302@pc2008>
Message-ID: <20080320215943.BE83711EB63@www.antlr.org>

At 03:58 21/03/2008, Kenneth Domino wrote:
 >I was looking at the code generated for lexers and I noticed 
that
 >token type rules are translated into public routines, not 
private.
 >I understand why rules are public in parsers, and why mTokens()
 >is public.  But, I don't understand why this is the case for the 

 >rest of the token rules in the lexer.  Is there a reason why,
 >maybe to influence the lexing by selecting some subset of rules?

I don't know if this is the real reason, but having them public is 
useful for unit tests.  You can then do testing both at the 
individual rule level ("assuming we already know this is the right 
token, can it match all the right input we want?") as well as the 
complete input level ("given this entire input stream, does it 
generate the right sequence of tokens?").

The ANTLR grammar does let you specify "private", "protected", or 
"public" on a rule.  I'm not sure if it actually uses that in the 
code generation or not, but if you really wanted private rules you 
could give it a try.


From brtzsnr at gmail.com  Thu Mar 20 15:01:08 2008
From: brtzsnr at gmail.com (Alexandru Mosoi)
Date: Fri, 21 Mar 2008 00:01:08 +0200
Subject: [antlr-interest] exceptions,
Message-ID: <c59005ea0803201501n225f07a6xbcf44a144c657a94@mail.gmail.com>

hello,

how do I raise exceptions in antlr 3? it seems that throw clause is ignored
when generating sources. an example would be best.

thank you,

-- 
Alexandru Mo?oi
http://alexandru.mosoi.googlepages.com

Please avoid sending me Word or PowerPoint attachments.
See http://www.gnu.org/philosophy/no-word-attachments.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080321/251bf232/attachment-0001.html 

From ytriffy at gmail.com  Fri Mar 21 01:16:12 2008
From: ytriffy at gmail.com (ytriffy)
Date: Fri, 21 Mar 2008 01:16:12 -0700
Subject: [antlr-interest] java15-grammar build problem
Message-ID: <47E36ECC.5030701@gmail.com>

Hello, good folks.
I'm trying to build java.g and java.tree.g by *Michael Stahl* which is 
java 1.5 by  grammar with ast tree.
It's downloaded from 
http://www.antlr.org/grammar/1093454600181/java15-grammar.zip
But I get errors. Need help in solving this problem.

tenebrae% java org.antlr.Tool java.g java.tree.g
ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
java.g
error(100): java.g:159:1: syntax error: antlr: java.g:159:1: unexpected 
token: class
error(100): java.g:159:22: syntax error: antlr: java.g:159:22: expecting 
SEMI, found 'extends'
error(10):  internal error: java.g : java.g:1509:8: expecting '"', found 'r'
org.antlr.tool.ANTLRLexer.nextToken(ANTLRLexer.java:321)
antlr.TokenStreamRewriteEngine.nextToken(TokenStreamRewriteEngine.java:161)
antlr.TokenBuffer.fill(TokenBuffer.java:69)
antlr.TokenBuffer.LA(TokenBuffer.java:80)
antlr.LLkParser.LA(LLkParser.java:52)
antlr.Parser.consumeUntil(Parser.java:149)
antlr.Parser.recover(Parser.java:312)
org.antlr.tool.ANTLRParser.grammar(ANTLRParser.java:406)
org.antlr.tool.Grammar.setGrammarContent(Grammar.java:521)
org.antlr.tool.Grammar.<init>(Grammar.java:456)
org.antlr.Tool.getGrammar(Tool.java:331)
org.antlr.Tool.process(Tool.java:267)
org.antlr.Tool.main(Tool.java:70)
java.tree.g
error(100): java.tree.g:7:1: syntax error: antlr: java.tree.g:7:1: 
unexpected token: class
error(100): java.tree.g:7:22: syntax error: antlr: java.tree.g:7:22: 
expecting SEMI, found 'extends'
error(10):  internal error: java.tree.g : java.tree.g:20:4: unexpected 
char: '#'
org.antlr.tool.ANTLRLexer.nextToken(ANTLRLexer.java:321)
antlr.TokenStreamRewriteEngine.nextToken(TokenStreamRewriteEngine.java:161)
antlr.TokenBuffer.fill(TokenBuffer.java:69)
antlr.TokenBuffer.LA(TokenBuffer.java:80)
antlr.LLkParser.LA(LLkParser.java:52)
antlr.Parser.consumeUntil(Parser.java:149)
antlr.Parser.recover(Parser.java:312)
org.antlr.tool.ANTLRParser.grammar(ANTLRParser.java:406)
org.antlr.tool.Grammar.setGrammarContent(Grammar.java:521)
org.antlr.tool.Grammar.<init>(Grammar.java:456)
org.antlr.Tool.getGrammar(Tool.java:331)
org.antlr.Tool.process(Tool.java:267)
org.antlr.Tool.main(Tool.java:70)


From phulsmeijer at xebic.com  Thu Mar 20 15:10:59 2008
From: phulsmeijer at xebic.com (Patrick Hulsmeijer)
Date: Thu, 20 Mar 2008 23:10:59 +0100
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <1206046223.4835.31.camel@localhost>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
	<47E2C3D9.7060303@gmx.de> <1206046223.4835.31.camel@localhost>
Message-ID: <C3525AF49F7D374D8E4D3C46ED4BC621168516@srvxdcex.xebic.com>

Would you be so kind to show me what code you've used for the driver class?

patrick.

-----Original Message-----
From: Thomas Karcher [mailto:thkarcher at gmx.de] 
Sent: donderdag 20 maart 2008 21:50
To: Johannes Luber
Cc: Patrick Hulsmeijer; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Remote debugging with C# in ANTLRWorks

Hi,

> > Can somebody tell me whether remote debugging a C# targeted parser 
> > in ANTLRWorks should work with ANTLR 3.01?
> > De code it generates with the ?debug options doesn?t compile.
> The templates contain a few errors. I have fixed them in the 3.1 beta, 
> as far as I am aware, but 3.1 is incompatible with 3.0 and also 
> doesn't work right now. You have to refix the source code yourself at this time.

Actually, I got it working with ANTLRWorks 1.2b1, with the runtimes compiled from source from January (http://fisheye2.cenqua.com/browse/antlr/runtime/CSharp/Sources with
Constraint) ...
I didn't use it exhaustively yet, but the first shot looks good to me.


Thomas



From lefevrol at yahoo.com  Thu Mar 20 15:46:23 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Thu, 20 Mar 2008 23:46:23 +0100
Subject: [antlr-interest] Invalid target code with rule call arguments
Message-ID: <frupg2$fc$1@ger.gmane.org>

Consider the attached grammar. The call to the r3 rule got rendered as:

    r3(n.getText(),  , p.list, .size());

which is horribly wrong. It should have been:

    r3(n.getText(), p.list.size());

What happened? I tried some variants but I can't find a workaround and
I am not sure whether I got the syntax wrong or whether this is a bug or 
limitation in ANTLR.

Thanks,

-- O.L.
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: Bug4.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20080320/98a9975c/attachment.pl 

From lefevrol at yahoo.com  Thu Mar 20 16:11:13 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Fri, 21 Mar 2008 00:11:13 +0100
Subject: [antlr-interest] Invalid target code with rule call arguments
In-Reply-To: <frupg2$fc$1@ger.gmane.org>
References: <frupg2$fc$1@ger.gmane.org>
Message-ID: <fruquk$4h5$1@ger.gmane.org>

Yep, it's an ANTLR bug: it works correctly with the 2008-03-13.12 build.

Is 3.1b1 ready for prime time, though, or is it likely to contain a fair
number of *new* bugs?

-- O.L.


From lucian.grijincu at gmail.com  Thu Mar 20 17:11:51 2008
From: lucian.grijincu at gmail.com (Lucian Adrian Grijincu)
Date: Fri, 21 Mar 2008 02:11:51 +0200
Subject: [antlr-interest] throws clause not working?
Message-ID: <acf3f2e60803201711j299d3a4eh75b113ef39509087@mail.gmail.com>

what's the status of  http://www.antlr.org:8888/browse/ANTLR-100 ?
ANTLR seems to not decorate with "throws MyException" the java
functions corresponding to rules with a throws clause for
"MyException".

If it's supported is there a document somewhere stating exactly what
needs to be done?
Also, if it's fully implemented you may consider closing the bug :)

-- 
Lucian

From lefevrol at yahoo.com  Thu Mar 20 17:55:44 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Fri, 21 Mar 2008 01:55:44 +0100
Subject: [antlr-interest] Syntax for token accumulation
Message-ID: <frv12j$ld8$1@ger.gmane.org>

Assume ID is a valid lexer token. (list+=ID)* works as you'd expect but 
(list+=(tok=ID))* does not, although it compiles: when the rule exits the 
list in question is null. I had a look at the Java code and the list is 
indeed not even initialized. Even merely parenthesizing ID as in: 
((list+=(ID))* gives the same null result. It would be useful for this 
syntax to be supported, though. Is it indeed an ANTLR limitation?

Thanks,

-- O.L.


From john at jacelridge.com  Thu Mar 20 19:14:20 2008
From: john at jacelridge.com (John Ridgway)
Date: Thu, 20 Mar 2008 22:14:20 -0400
Subject: [antlr-interest] java15-grammar build problem
In-Reply-To: <47E36ECC.5030701@gmail.com>
References: <47E36ECC.5030701@gmail.com>
Message-ID: <B7496785-D28C-4673-B4BE-0FF073A52AEE@jacelridge.com>

I think that you'll find that grammar is designed for ANTLR 2.7 rather  
than ANTLR 3.  I have created an AST-generating Java 1.5 grammar,  
based on Terence's, and a companion tree-grammar that reproduces the  
original Java code from the AST.  These will be available soon (within  
a few days) on the ANTLR site.

Peace
- John


On Mar 21, 2008, at 4:16 AM, ytriffy wrote:

> Hello, good folks.
> I'm trying to build java.g and java.tree.g by *Michael Stahl* which  
> is java 1.5 by  grammar with ast tree.
> It's downloaded from http://www.antlr.org/grammar/1093454600181/java15-grammar.zip
> But I get errors. Need help in solving this problem.
>
> tenebrae% java org.antlr.Tool java.g java.tree.g
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
> java.g
> error(100): java.g:159:1: syntax error: antlr: java.g:159:1:  
> unexpected token: class
> error(100): java.g:159:22: syntax error: antlr: java.g:159:22:  
> expecting SEMI, found 'extends'
> error(10):  internal error: java.g : java.g:1509:8: expecting '"',  
> found 'r'
> org.antlr.tool.ANTLRLexer.nextToken(ANTLRLexer.java:321)
> antlr 
> .TokenStreamRewriteEngine.nextToken(TokenStreamRewriteEngine.java:161)
> antlr.TokenBuffer.fill(TokenBuffer.java:69)
> antlr.TokenBuffer.LA(TokenBuffer.java:80)
> antlr.LLkParser.LA(LLkParser.java:52)
> antlr.Parser.consumeUntil(Parser.java:149)
> antlr.Parser.recover(Parser.java:312)
> org.antlr.tool.ANTLRParser.grammar(ANTLRParser.java:406)
> org.antlr.tool.Grammar.setGrammarContent(Grammar.java:521)
> org.antlr.tool.Grammar.<init>(Grammar.java:456)
> org.antlr.Tool.getGrammar(Tool.java:331)
> org.antlr.Tool.process(Tool.java:267)
> org.antlr.Tool.main(Tool.java:70)
> java.tree.g
> error(100): java.tree.g:7:1: syntax error: antlr: java.tree.g:7:1:  
> unexpected token: class
> error(100): java.tree.g:7:22: syntax error: antlr: java.tree.g:7:22:  
> expecting SEMI, found 'extends'
> error(10):  internal error: java.tree.g : java.tree.g:20:4:  
> unexpected char: '#'
> org.antlr.tool.ANTLRLexer.nextToken(ANTLRLexer.java:321)
> antlr 
> .TokenStreamRewriteEngine.nextToken(TokenStreamRewriteEngine.java:161)
> antlr.TokenBuffer.fill(TokenBuffer.java:69)
> antlr.TokenBuffer.LA(TokenBuffer.java:80)
> antlr.LLkParser.LA(LLkParser.java:52)
> antlr.Parser.consumeUntil(Parser.java:149)
> antlr.Parser.recover(Parser.java:312)
> org.antlr.tool.ANTLRParser.grammar(ANTLRParser.java:406)
> org.antlr.tool.Grammar.setGrammarContent(Grammar.java:521)
> org.antlr.tool.Grammar.<init>(Grammar.java:456)
> org.antlr.Tool.getGrammar(Tool.java:331)
> org.antlr.Tool.process(Tool.java:267)
> org.antlr.Tool.main(Tool.java:70)
>


From antlr at mirality.co.nz  Thu Mar 20 19:16:18 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 21 Mar 2008 15:16:18 +1300
Subject: [antlr-interest] Syntax for token accumulation
In-Reply-To: <frv12j$ld8$1@ger.gmane.org>
References: <frv12j$ld8$1@ger.gmane.org>
Message-ID: <20080321021634.2F18E11EABF@www.antlr.org>

At 13:55 21/03/2008, Olivier Lefevre wrote:
 >Assume ID is a valid lexer token. (list+=ID)* works as you'd 
expect
 >but (list+=(tok=ID))* does not, although it compiles: when the 
rule
 >exits the list in question is null. I had a look at the Java 
code
 >and the list is indeed not even initialized. Even merely
 >parenthesizing ID as in: ((list+=(ID))* gives the same null 
result.
 >It would be useful for this syntax to be supported, though. Is 
it
 >indeed an ANTLR limitation?

Yes (for the moment anyway).

But you can extract it to a subrule and then it will work:

a : (list+=b)* { ... };
b : tok=ID { ... };


From ytriffy at gmail.com  Fri Mar 21 10:29:35 2008
From: ytriffy at gmail.com (ytriffy)
Date: Fri, 21 Mar 2008 10:29:35 -0700
Subject: [antlr-interest] java15-grammar build problem
In-Reply-To: <1023C02B2A574B7B987B726CC6C61724@pc2008>
References: <47E36ECC.5030701@gmail.com>
	<1023C02B2A574B7B987B726CC6C61724@pc2008>
Message-ID: <47E3F07F.3010005@gmail.com>

Kenneth Domino wrote:
>> tenebrae% java org.antlr.Tool java.g java.tree.g
>> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
>
> Hi,
>
> It looks like it's an ANTLR version 2 grammar. Try "java antlr.Tool 
> java.g; java antlr.Tool java.tree.g" instead.
>
> Ken
>
>
Thanks antlr.Tool works fine.

From ytriffy at gmail.com  Fri Mar 21 12:15:01 2008
From: ytriffy at gmail.com (ytriffy)
Date: Fri, 21 Mar 2008 12:15:01 -0700
Subject: [antlr-interest] How to walk AST tree
Message-ID: <47E40935.4010408@gmail.com>

Hi, all.
I need to walk ast tree that was produced for java 5 source code.
And basicly I need to get method names and variable names from it(and 
maybe imports).
So what I/m trying to do is to get this structure:
0                                classname
1 variables array   methods array   imports array
I'm not very familiar with ast api. What is the most simple way to do this?

From alexander at gaengel.de  Fri Mar 21 02:46:44 2008
From: alexander at gaengel.de (=?windows-1251?Q?Alexander_Ga=22ngel?=)
Date: Fri, 21 Mar 2008 10:46:44 +0100
Subject: [antlr-interest] How to walk AST tree
In-Reply-To: <47E40935.4010408@gmail.com>
References: <47E40935.4010408@gmail.com>
Message-ID: <47E38404.3000505@gaengel.de>

you can use a Tree Grammar

En Example is in the Wiki 
http://www.antlr.org/wiki/display/ANTLR3/Expression+evaluator

or you interface the AST directly: 
http://www.antlr.org/wiki/display/ANTLR3/Interfacing+AST+with+Java

Alexander

ytriffy schrieb:
> Hi, all.
> I need to walk ast tree that was produced for java 5 source code.
> And basicly I need to get method names and variable names from it(and 
> maybe imports).
> So what I/m trying to do is to get this structure:
> 0                                classname
> 1 variables array   methods array   imports array
> I'm not very familiar with ast api. What is the most simple way to do 
> this?
>

From jaluber at gmx.de  Fri Mar 21 03:48:55 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 21 Mar 2008 11:48:55 +0100
Subject: [antlr-interest] public final void mFOO() in lexers?
In-Reply-To: <20080320215943.BE83711EB63@www.antlr.org>
References: <817252DD2CED4F218B40D797B45D7302@pc2008>
	<20080320215943.BE83711EB63@www.antlr.org>
Message-ID: <47E39297.1080507@gmx.de>

Gavin Lambert schrieb:
> The ANTLR grammar does let you specify "private", "protected", or 
> "public" on a rule.  I'm not sure if it actually uses that in the code 
> generation or not, but if you really wanted private rules you could give 
> it a try.

I don't know why the ANTLR grammar does allow this, but so far nothing 
happens when you do specify it.

Johannes

From jaluber at gmx.de  Fri Mar 21 03:50:05 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 21 Mar 2008 11:50:05 +0100
Subject: [antlr-interest] exceptions,
In-Reply-To: <c59005ea0803201501n225f07a6xbcf44a144c657a94@mail.gmail.com>
References: <c59005ea0803201501n225f07a6xbcf44a144c657a94@mail.gmail.com>
Message-ID: <47E392DD.30703@gmx.de>

Alexandru Mosoi schrieb:
> hello,
> 
> how do I raise exceptions in antlr 3? it seems that throw clause is 
> ignored when generating sources. an example would be best.

I believe that a catch clause is ignored at least in 3.0.x. Not sure if 
Ter fixed it for 3.1.

Johannes

From jaluber at gmx.de  Fri Mar 21 03:52:45 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 21 Mar 2008 11:52:45 +0100
Subject: [antlr-interest] Invalid target code with rule call arguments
In-Reply-To: <fruquk$4h5$1@ger.gmane.org>
References: <frupg2$fc$1@ger.gmane.org> <fruquk$4h5$1@ger.gmane.org>
Message-ID: <47E3937D.30703@gmx.de>

Olivier Lefevre schrieb:
> Yep, it's an ANTLR bug: it works correctly with the 2008-03-13.12 build.
> 
> Is 3.1b1 ready for prime time, though, or is it likely to contain a fair
> number of *new* bugs?

It contains many fixes for bugs in 3.0.x and so far only few new bugs 
have been introduced and probably been fixed already.

Johannes

From ytriffy at gmail.com  Fri Mar 21 14:35:56 2008
From: ytriffy at gmail.com (ytriffy)
Date: Fri, 21 Mar 2008 14:35:56 -0700
Subject: [antlr-interest] How to walk AST tree
In-Reply-To: <47E38404.3000505@gaengel.de>
References: <47E40935.4010408@gmail.com> <47E38404.3000505@gaengel.de>
Message-ID: <47E42A3C.9060907@gmail.com>

Alexander Ga"ngel <alexander at gaengel.de>" wrote:
> you can use a Tree Grammar
>
> En Example is in the Wiki 
> http://www.antlr.org/wiki/display/ANTLR3/Expression+evaluator
>
> or you interface the AST directly: 
> http://www.antlr.org/wiki/display/ANTLR3/Interfacing+AST+with+Java
>
> Alexander
>
> ytriffy schrieb:
>> Hi, all.
>> I need to walk ast tree that was produced for java 5 source code.
>> And basicly I need to get method names and variable names from it(and 
>> maybe imports).
>> So what I/m trying to do is to get this structure:
>> 0                                classname
>> 1 variables array   methods array   imports array
>> I'm not very familiar with ast api. What is the most simple way to do 
>> this?
>>
>
Thanks.

From brtzsnr at gmail.com  Fri Mar 21 05:56:46 2008
From: brtzsnr at gmail.com (Alexandru Mosoi)
Date: Fri, 21 Mar 2008 14:56:46 +0200
Subject: [antlr-interest] exceptions,
In-Reply-To: <47E392DD.30703@gmx.de>
References: <c59005ea0803201501n225f07a6xbcf44a144c657a94@mail.gmail.com>
	<47E392DD.30703@gmx.de>
Message-ID: <c59005ea0803210556g5927370eq22ad9ba116252896@mail.gmail.com>

and, how do I treat semantic errors? I need to output an error and stop if
there is any problem.

On Fri, Mar 21, 2008 at 12:50 PM, Johannes Luber <jaluber at gmx.de> wrote:

> Alexandru Mosoi schrieb:
> > hello,
> >
> > how do I raise exceptions in antlr 3? it seems that throw clause is
> > ignored when generating sources. an example would be best.
>
> I believe that a catch clause is ignored at least in 3.0.x. Not sure if
> Ter fixed it for 3.1.
>
> Johannes
>



-- 
Alexandru Mo?oi
http://alexandru.mosoi.googlepages.com

Please avoid sending me Word or PowerPoint attachments.
See http://www.gnu.org/philosophy/no-word-attachments.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080321/5dd1c0d1/attachment.html 

From ranalebar at hotmail.com  Fri Mar 21 09:09:03 2008
From: ranalebar at hotmail.com (Randall Barnhart)
Date: Fri, 21 Mar 2008 16:09:03 +0000
Subject: [antlr-interest] Inconsistent token line number and character
 position info in AST Walker?
Message-ID: <BAY119-W147819D2EEE7A2D6BEC4EFAB010@phx.gbl>

I was curious if anyone else has seen inconsistent results when trying to access the line number and character position in line of a token in the AST?  Do I always need to regenerate the grammar code every time I regenerate the tree walker code?
 
My setup is as follows: I am running with ANTLR 3.0.1.  We have a JFace text editor that contains the source code.  We grab the source code out as a java String object.  And the following is my initialization code:
 
public static ArrayList<PredicateError> compilePredicate(String text, IDocument srcDoc, ArrayList<Signatures> prjSignatures, DLPredicateConcept predConcept) {  clearAndResetCompiler();          // Create a lexer attached to that input stream  ANTLRStringStream txtStream = new ANTLRStringStream(text);        iorLPLexer lexer = new iorLPLexer(txtStream);        // Create a stream of tokens pulled from the lexer        CommonTokenStream tokens = new CommonTokenStream(lexer);
        // Create a parser attached to the token stream        iorLPParser parser = new iorLPParser(tokens);        iorLPParser.system_return r = null;        try        {         // Invoke the program rule in get return value         r = parser.system();        }
 
And here is a snippet of my AST walker code:
 
varAssign returns [CLPredTail varAssignConstr] : ^(VARASSIGN ID expr)   {    if(currPredRules.size() > 0)    {     String currRuleName = (String)currPredRules.peek();     PredRuleImpl ruleImpl = checker.getPredRuleImplByName(currRuleName);     if(ruleImpl != null)      ruleImpl.addVarValue($expr.start, $ID.text, $expr.text, $expr.exprType);     else      System.err.println("Did not find valid matching rule implementation in symbol table.");    }    else    {     // Var assign outside of predicate in stmt block    }        if($expr.exprValue != null)    {     if($expr.exprType.equals(IORLPCompilerHelper.NUMERIC_TYPE))     {      if($expr.exprConstraint != null)      {       if(CLPredNumConstant.class.isInstance($expr.exprConstraint))       {        CLPredNumConstAssign predConstr = new CLPredNumConstAssign((Double)$expr.exprValue, $ID.text);        int ruleVarAssignLN = $varAssign.start.getLine();        int ruleVarAssignCP = $varAssign.start.getCharPositionInLine();        int ruleVarAssignSI = $varAssign.start.getTokenStartIndex();        int varAssignLN = $VARASSIGN.getLine();        int varAssignCP = $VARASSIGN.getCharPositionInLine();        int varAssignSI = $VARASSIGN.getTokenStartIndex();        int idLN = $ID.getLine();        int idCP = $ID.getCharPositionInLine();        int idSI = $ID.getTokenStartIndex();        int exprLN = $expr.start.getLine();        int exprCP = $expr.start.getCharPositionInLine();        int exprSI = $expr.start.getTokenStartIndex();        int docLineNo = $varAssign.start.getLine();//calcLineNo($ID.getTokenStartIndex());        int docCharNo = $varAssign.start.getCharPositionInLine();//($ID.getTokenStartIndex(), docLineNo);        predConstr.setTraceInfo(predConcept.getSymbol(), predConcept.getPredicateInstances().size()+1, docLineNo, docCharNo, $varAssign.text);
 
I've gotten different results running this code by generating just the walker code versus generating the parser/lexer and walker.  Sometimes all the above getLine(), getCharPositionInLine() return "1".  Which is not correct because the source has multiple lines.  Is there a problem using java String?  Then when I generated code for both the grammar and the tree walker I got different results and it was actually returning the correct line number and character position information.
 
Has anyone else experienced this inconsistency?  Should I be trying to access the line/char info from the top rule, imaginary tokens, or real tokens or does it not matter?  Would it be wise to always regenerate both the grammar and the tree walker?
 
Thanks,
Randall Barnhart
_________________________________________________________________
In a rush?  Get real-time answers with Windows Live Messenger.
http://www.windowslive.com/messenger/overview.html?ocid=TXT_TAGLM_WL_Refresh_realtime_042008
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080321/2f973a34/attachment.html 

From shro8822 at vandals.uidaho.edu  Fri Mar 21 12:51:58 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Fri, 21 Mar 2008 12:51:58 -0700
Subject: [antlr-interest] rules for re-factoring grammars?
Message-ID: <BAYC1-PASMTP0612494FDB2E83CB60E230F5010@CEZ.ICE>

Does anyone known of a good wright up on the rules that can be used to 
re-factor productions? I'm thinking in particular of rules that can 
remove left recursion including with ambiguous grammars.

A :
    F |
    A B |
    D |
    A C |
    E;

D, E and/or F might map over an A.

I've Googled for it but haven't come up with much useful (I might be 
looking for the wrong terms or something) and I don't recall seeing 
anything near what I'm looking for in the antlr docs (but this is 
re-much more a language theory question than an Antlr question).

From antlr at mirality.co.nz  Fri Mar 21 13:27:26 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 22 Mar 2008 09:27:26 +1300
Subject: [antlr-interest] rules for re-factoring grammars?
In-Reply-To: <BAYC1-PASMTP0612494FDB2E83CB60E230F5010@CEZ.ICE>
References: <BAYC1-PASMTP0612494FDB2E83CB60E230F5010@CEZ.ICE>
Message-ID: <20080321202745.D04C511EC5F@www.antlr.org>

At 08:51 22/03/2008, Benjamin Shropshire wrote:
 >Does anyone known of a good wright up on the rules that can be 
used
 >to re-factor productions? I'm thinking in particular of rules 
that
 >can remove left recursion including with ambiguous grammars.
 >
 >A :
 >    F |
 >    A B |
 >    D |
 >    A C |
 >    E;

Well, the general replacement for the above that ANTLRworks can do 
automatically is:

A :
     F | D | E
     ( B | C )*
   ;

It's easy enough to see how it comes by this, especially if you 
look at the syntax diagram.  Each of the F, D, and E alts are 
terminals, since they don't reference another copy of 
A.  Therefore they can only occur once.

In the two remaining alts (A B and A C), the A is always on the 
left, so the terminals in the final rule must also always be on 
the left.  Now, since A is self-recursive, this means that "A B" 
could expand to "F B", or to "F B B", or even to "F C C B C B", 
and so on.  So clearly the non-A portions of these alts need to be 
added with a star, since they can occur any number of times and in 
any order.

As to whether there's a formal writeup on this sort of thing, I 
really have no idea :)


From lgcraymer at yahoo.com  Fri Mar 21 15:13:37 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Fri, 21 Mar 2008 15:13:37 -0700 (PDT)
Subject: [antlr-interest] rules for re-factoring grammars?
Message-ID: <600014.27545.qm@web55902.mail.re3.yahoo.com>

Benjamin--

Take a look at
http://www.antlr.org/pipermail/antlr-interest/2003-December/005897.html for a list of refactorings.  That might help a little bit.

--Loring


----- Original Message ----
From: Benjamin Shropshire <shro8822 at vandals.uidaho.edu>
To: Antlr Interest <antlr-interest at antlr.org>
Sent: Friday, March 21, 2008 12:51:58 PM
Subject: [antlr-interest] rules for re-factoring grammars?

Does anyone known of a good wright up on the rules that can be used to 
re-factor productions? I'm thinking in particular of rules that can 
remove left recursion including with ambiguous grammars.

A :
    F |
    A B |
    D |
    A C |
    E;

D, E and/or F might map over an A.

I've Googled for it but haven't come up with much useful (I might be 
looking for the wrong terms or something) and I don't recall seeing 
anything near what I'm looking for in the antlr docs (but this is 
re-much more a language theory question than an Antlr question).






      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080321/04315ce1/attachment.html 

From lefevrol at yahoo.com  Fri Mar 21 17:02:25 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Sat, 22 Mar 2008 01:02:25 +0100
Subject: [antlr-interest] exceptions,
In-Reply-To: <c59005ea0803210556g5927370eq22ad9ba116252896@mail.gmail.com>
References: <c59005ea0803201501n225f07a6xbcf44a144c657a94@mail.gmail.com>	<47E392DD.30703@gmx.de>
	<c59005ea0803210556g5927370eq22ad9ba116252896@mail.gmail.com>
Message-ID: <fs1iam$mnh$1@ger.gmane.org>

Alexandru Mosoi wrote:
> and, how do I treat semantic errors? I need to output an error and stop 
> if there is any problem.

If you want every error to be fatal, see ?10.4 in the book. Or you could 
throw your own exception (i.e., not a RecognitionException) in an action block.

-- O.L.


From lefevrol at yahoo.com  Fri Mar 21 17:05:59 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Sat, 22 Mar 2008 01:05:59 +0100
Subject: [antlr-interest] Syntax for token accumulation
In-Reply-To: <20080321021634.2F18E11EABF@www.antlr.org>
References: <frv12j$ld8$1@ger.gmane.org>
	<20080321021634.2F18E11EABF@www.antlr.org>
Message-ID: <fs1ihc$n8n$1@ger.gmane.org>

Gavin Lambert wrote:

> Yes (for the moment anyway).

I hope Ter will consider this enhancement.

> But you can extract it to a subrule and then it will work: 
> a : (list+=b)* { ... };
> b : tok=ID { ... };

OK but for the rule I had in mind tok won't do me any good if exiled in a 
subrule. I can still build the list in @init and action blocks, though.

-- O.L.


From shro8822 at vandals.uidaho.edu  Fri Mar 21 17:12:56 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Fri, 21 Mar 2008 17:12:56 -0700
Subject: [antlr-interest] rules for re-factoring grammars?
In-Reply-To: <BAY0-PAMC1-F6RGicsb0000b3ef@bay0-pamc1-f6.bay0.hotmail.com>
References: <BAYC1-PASMTP0612494FDB2E83CB60E230F5010@CEZ.ICE>
	<BAY0-PAMC1-F6RGicsb0000b3ef@bay0-pamc1-f6.bay0.hotmail.com>
Message-ID: <BAYC1-PASMTP0944C0136F706B6F3ECFDDF5020@CEZ.ICE>

Gavin Lambert wrote:
> At 08:51 22/03/2008, Benjamin Shropshire wrote:
> >Does anyone known of a good wright up on the rules that can be used
> >to re-factor productions? I'm thinking in particular of rules that
> >can remove left recursion including with ambiguous grammars.
> >
> >A :
> >    F |
> >    A B |
> >    D |
> >    A C |
> >    E;
>
> Well, the general replacement for the above that ANTLRworks can do 
> automatically is:
>
> A :
>     F | D | E
>     ( B | C )*
>   ;
>
> It's easy enough to see how it comes by this, especially if you look 
> at the syntax diagram.  Each of the F, D, and E alts are terminals, 
> since they don't reference another copy of A.  Therefore they can only 
> occur once.
>
> In the two remaining alts (A B and A C), the A is always on the left, 
> so the terminals in the final rule must also always be on the left.  
> Now, since A is self-recursive, this means that "A B" could expand to 
> "F B", or to "F B B", or even to "F C C B C B", and so on.  So clearly 
> the non-A portions of these alts need to be added with a star, since 
> they can occur any number of times and in any order.

Actually I'd already figure that one out along with a scheme for 
refactoring action rules to match. The issue I'm worried about is; will 
the second grammar ever get a different parser tree if, for instance, 
the grammar is ambiguities?

After some thinking I think I can answer my own question; yes it will

add in this:
------
H : A I* G;

I : B | C;
------

then parse an H out of "FBCG" (assuming the needed actions to rebuild 
the left recursive tree)

old:    FBCG -> h(a(F), i(B), i(C),G);
new:   FBCG -> h(a(a(a(F),B),C),G);

Am I missing something here?

(note: I'm not working specifically with antlr here.)

From antlr at mirality.co.nz  Fri Mar 21 18:22:02 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 22 Mar 2008 14:22:02 +1300
Subject: [antlr-interest] rules for re-factoring grammars?
In-Reply-To: <BAYC1-PASMTP0944C0136F706B6F3ECFDDF5020@CEZ.ICE>
References: <BAYC1-PASMTP0612494FDB2E83CB60E230F5010@CEZ.ICE>
	<BAY0-PAMC1-F6RGicsb0000b3ef@bay0-pamc1-f6.bay0.hotmail.com>
	<BAYC1-PASMTP0944C0136F706B6F3ECFDDF5020@CEZ.ICE>
Message-ID: <20080322012217.2146C11EACA@www.antlr.org>

At 13:12 22/03/2008, Benjamin Shropshire wrote:
 >then parse an H out of "FBCG" (assuming the needed actions to
 >rebuild the left recursive tree)
 >
 >old:    FBCG -> h(a(F), i(B), i(C),G);
 >new:   FBCG -> h(a(a(a(F),B),C),G);
 >
 >Am I missing something here?

Well, I'm not sure why you seem to think the "new" parse tree is a 
product of removing the left recursion.  The original recursive 
rule you specified will produce the "new" tree just as easily as 
the new rule (actually more easily, since that's not really the 
way the new rule works).  The only difference in fact that I can 
see between the two trees is whether they're matching greedily or 
not.  (The "old" tree is non-greedy while the "new" tree is 
greedy.  And ANTLR always matches greedily, so both rules should 
have netted you the "new" tree, assuming ANTLR didn't get stuck on 
the left recursion.)

But yes, generally speaking any change in the grammar can lead to 
a change in the parse tree, even if it's not changing the input 
language structure.  This is why a parse tree is usually not an 
especially useful output (except possibly for initial debugging), 
and why you should either use direct actions or output an AST 
instead.  This is because the parse tree directly reflects the 
grammar structure, which is not necessarily a good match to the 
language structure.

Ignoring those new rules for the moment:

old : FBCD -> a(a(a(F), B), C), a(D);
new : FBCD -> a(F, B, C), a(D);

That's the *real* difference in the parse tree between the two -- 
the first requires recursive invocation while the second does 
not.  They still match the same language though.

 >H : A I* G;
 >
 >I : B | C;

If you do add those new rules in, then you've introduced an 
ambiguity that can only be resolved by looking ahead far enough to 
see if there's a G or not.  That's got nothing to do with whether 
there's left recursion or not.

But I'm not really sure why you'd want to introduce I anyway, 
since "A I*" is exactly covered by "A" -- the matching input sets 
for the two rules are completely identical.  In other words, it's 
not just ambiguous, it's actually redundant.


From shro8822 at vandals.uidaho.edu  Sat Mar 22 08:27:28 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Sat, 22 Mar 2008 08:27:28 -0700
Subject: [antlr-interest] rules for re-factoring grammars?
In-Reply-To: <BAY0-PAMC1-F10ZsjMO0000857a@bay0-pamc1-f10.bay0.hotmail.com>
References: <BAYC1-PASMTP0612494FDB2E83CB60E230F5010@CEZ.ICE>
	<BAY0-PAMC1-F6RGicsb0000b3ef@bay0-pamc1-f6.bay0.hotmail.com>
	<BAYC1-PASMTP0944C0136F706B6F3ECFDDF5020@CEZ.ICE>
	<BAY0-PAMC1-F10ZsjMO0000857a@bay0-pamc1-f10.bay0.hotmail.com>
Message-ID: <BAYC1-PASMTP12891E46DCAB9E4F7BDA56F5020@CEZ.ICE>

I wrote the following last night and now I'm thinking it dissevers a bit 
more explanation.

I want to build a program that will take in an arbitrary grammar with 
attached actions and then re factor it to remove left recursion and also 
re factor the actions so that the end product finds the same parse tree 
and performs the same action as the original. (Clearly I need to find 
the parse tree in a different form than the first grammar does and then 
build the real tree from what I do find.) I want this program to operate 
on the widest possible range of inputs. This, I hope, will include 
ambiguous and redundant grammars. I also want to be able to handle 
different parsing strategies for handeling the ambiguities; greedy in 
each rule, recursive decent with first match wins, and such. That second 
one (first match) is paramount. One of my specifically targeted inputs 
uses it. The same thing also to some extent applies to the end product. 
I want to be able to generate grammars that can be fed into a number of 
different systems.

The replies I have gotten so far have convinced me that for the cases I 
have looked at so far, the transformation is valid in ANTLR 
(particularly if actions are not involved). I'm not convinced it's valid 
in all cases in my situation (I'll be playing with the constraints on 
that one with pen 'n paper later).

So taking the above in mind, this is what I wrote last night and am to 
lazy to totally re wright:


Gavin Lambert wrote:
> At 13:12 22/03/2008, Benjamin Shropshire wrote:
> >then parse an H out of "FBCG" (assuming the needed actions to
> >rebuild the left recursive tree)
> >
> >old:    FBCG -> h(a(F), i(B), i(C),G);
> >new:   FBCG -> h(a(a(a(F),B),C),G);
> >
> >Am I missing something here?
>
> Well, I'm not sure why you seem to think the "new" parse tree is a 
> product of removing the left recursion.

I'm assuming action code that takes the left most term and the list of 
right side terms and re creates the action that would otherwise be done.

>   The original recursive rule you specified will produce the "new" 
> tree just as easily as the new rule (actually more easily, since 
> that's not really the way the new rule works).  The only difference in 
> fact that I can see between the two trees is whether they're matching 
> greedily or not.  (The "old" tree is non-greedy while the "new" tree 
> is greedy.

that is a relevant difference in my case.

>   And ANTLR always matches greedily, so both rules should have netted 
> you the "new" tree, assuming ANTLR didn't get stuck on the left 
> recursion.)

I'll have to think about that but I might be able to come up with a case 
where it still parses differently (different parse tree).

>
> But yes, generally speaking any change in the grammar can lead to a 
> change in the parse tree, even if it's not changing the input language 
> structure.  This is why a parse tree is usually not an especially 
> useful output (except possibly for initial debugging), and why you 
> should either use direct actions or output an AST instead.  This is 
> because the parse tree directly reflects the grammar structure, which 
> is not necessarily a good match to the language structure.

In my case what I'm trying to do is factor out the left recursion of a 
grammar that has attached action. I want to build a grammar that has the 
same effect as the the original but can be used in an LL parser.

>
> Ignoring those new rules for the moment:
>
> old : FBCD -> a(a(a(F), B), C), a(D);
> new : FBCD -> a(F, B, C), a(D);
>
> That's the *real* difference in the parse tree between the two -- the 
> first requires recursive invocation while the second does not.  They 
> still match the same language though.
>
> >H : A I* G;
> >
> >I : B | C;
>
> If you do add those new rules in, then you've introduced an ambiguity 
> that can only be resolved by looking ahead far enough to see if 
> there's a G or not.  That's got nothing to do with whether there's 
> left recursion or not.

I'm not following why that's relevant. Please explain more (you might 
want to read the rest first though)

> But I'm not really sure why you'd want to introduce I anyway, since "A 
> I*" is exactly covered by "A" -- the matching input sets for the two 
> rules are completely identical.  In other words, it's not just 
> ambiguous, it's actually redundant.

I'm trying to come up with a case where the proposed transformation 
fails. Because I will have no control over the grammars I am fed I need 
to handle all grammars even "stupid" ones without to much analysis.

From darryl.aj.staflund at shaw.ca  Sat Mar 22 13:52:39 2008
From: darryl.aj.staflund at shaw.ca (Darryl A. J. Staflund)
Date: Sat, 22 Mar 2008 14:52:39 -0600
Subject: [antlr-interest] Unicode Category Question
Message-ID: <47E57197.5040206@shaw.ca>

Hi everyone,

I am a new ANTLR user and have started to write an EMCA-compliant lexer 
for C# using ANTLR 3.0.1.  I know that other C# lexers exist on the site 
but I want to try writing one for myself to get a feel for ANTLR and to 
learn how to use it to deal with pre-processing directives, etc.  Since 
I hope to compile the lexer using C# instead of Java, I have set my 
target language as 'CSharp' in the options of my grammar file.  I then 
generate the source code using the Java-based 'org.antlr.Tool' class.  I 
am using the Sun Java SDK 1.6.0_05.

I have run into two difficulties with this current approach:

1.   The ECMA 334 specification defines a C# 2.x Unicode escape sequence 
as follows:

        unicode-escape-sequence::
            \u hex-digit hex-digit hex-digit hex-digit
            \U hex-digit hex-digit hex-digit hex-digit hex-digit 
hex-digit hex-digit hex-digit

Although the current (?) Java specification handles the first option 
just fine, it handles the second option a bit differently as stated in 
http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.1:

    "The Unicode standard was originally designed as a fixed-width 
16-bit character encoding. It
    has since been changed to allow for characters whose representation 
requires more than 16 bits.
    The range of legal code points is now U+0000 to U+10FFFF, using the 
hexadecimal U+n notation.
    Characters whose code points are greater than U+FFFF are called 
supplementary characters. To
    represent the complete range of characters using only 16-bit units, 
the Unicode standard defines an
    encoding called UTF-16. In this encoding, supplementary characters 
are represented as pairs of
    16-bit code units, the first from the high-surrogates range, (U+D800 
to U+DBFF), the second from
    the low-surrogates range (U+DC00 to U+DFFF). For characters in the 
range U+0000 to U+FFFF,
    the values of code points and UTF-16 code units are the same."

Since Java represents supplementary characters as pairs of 16-byte code 
units instead of as single '\Uxxxxxxxx' string sequences, I don't know 
how to parse these latter values in my ANTLR grammar.  Does ANTLR's 
Java-based lexer handle Unicode supplementary characters passed to it in 
the '\Uxxxxxxxx' format?  How should I handle something like this?

2.  The ECMA 334 specifications defines identifiers in terms of Unicode 
character categories as follows:

    letter-character::
    A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl
    A unicode-escape-sequence representing a character of classes Lu, 
Ll, Lt, Lm, Lo, or Nl

    combining-character::
    A Unicode character of classes Mn or Mc
    A unicode-escape-sequence representing a character of classes Mn or Mc

    decimal-digit-character::
    A Unicode character of the class Nd
    A unicode-escape-sequence representing a character of the class Nd

    connecting-character::
    A Unicode character of the class Pc
    A unicode-escape-sequence representing a character of the class Pc

    formatting-character::
    A Unicode character of the class Cf
    A unicode-escape-sequence representing a character of the class Cf

I have read various posts in the ANTLR newsgroups on how to recognize 
these categories and see that a number of strategies have been discussed:

- Define the categories in terms of Unicode escape sequences, eg.  
"WHITESPACE:  ('\u0020' | ('\u2000'.'\u0200A') | ...etc...);".
- Define the categories in terms of semantic predicates, eg.  
"WHITESPACE:  { IsUnicodeCategoryZs (LA (1)) }? ;".

The difficulty with the first approach in regard to the C# specification 
is that some Unicode character categories (ex:  Nd) contain 
supplementary characters.  This means that in order to represent them in 
a Java-friendly manner, I need to convert them into pairs of Unicode 
characters.  Ugghh!  I don't mind the second option, although it sounds 
as though it will run slower.

Since the newer regular expression engines used by Perl, Java, C#, etc. 
have been built to match on Unicode, could ANTLR's EBNF be extended to 
match on the following:

- Unicode Character Properties (i.e.:  \p{Lu}, \p{Mn}, etc...)
- Unicode Scripts (i.e.  \p{Common}, \p{Arabic}, etc...)
- Unicode Blocks (i.e. \p{Currency_Symbol}, \p{InBasic_Latin}, ...)


If this were done, we could use them in the ANTLR parser as so:

    letter-character:
        :    \p{Lu}
        |    \p{Ll}
        |    \p{Lt}
        |    \p{Lm}
        |    \p{Lo}
        |    \p{Nl}
       

etc...

We could also use them to do the following:

- Define characters in terms of negations (ex:  "TOKEN:  \p{^Lu} | 
\p{^Letter};)
- Match letters including diacritics (ex:  LETTER_AND_DIACRITIC:  \p{L} 
\p{M}*)

That's it for me.  Thanks for reading this far.

Darryl

From mike at cargal.net  Sat Mar 22 17:27:51 2008
From: mike at cargal.net (Mike Cargal)
Date: Sat, 22 Mar 2008 20:27:51 -0400
Subject: [antlr-interest] ANTLR Ruby target
Message-ID: <F7BA8912-ADC9-48E5-BF20-97FEC0628F90@cargal.net>

Is anyone doing anything serious with ANTLR targeting Ruby?

I was hoping to generate to Ruby, but is seems that the Ruby templates  
are quite incomplete.

From jimi at temporal-wave.com  Sun Mar 23 05:26:22 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 23 Mar 2008 05:26:22 -0700
Subject: [antlr-interest]  New snapshot of 3.1 beta, plus C runtime b2
Message-ID: <web-30319@temporal-wave.com>

On 3/20/08 1:59 PM, "Stuart Watt" <swatt at infobal.com> wrote:

> Hi folks, and especially Jim

> I'm probably being an idiot, but how do you build the C runtime these days? 
> The previous version was easy, but now it requires ./configure, and I can't 
> quite get that far!!

>./configure fails with config.status: error: cannot find input file: 
>Makefile.in

> This could be because automake is failing:

You are trying to build it from the maintainers source directory and 
not by expanding the tar under dist and runing the configure that 
exists there.

You can build the maintainers version but you have to run autoreconf 
-i first. Just expand the tar and the configure shoudl just work.

Jim

From swatt at infobal.com  Sun Mar 23 08:56:28 2008
From: swatt at infobal.com (Stuart Watt)
Date: Sun, 23 Mar 2008 11:56:28 -0400
Subject: [antlr-interest] New snapshot of 3.1 beta, plus C runtime b2
In-Reply-To: <web-30319@temporal-wave.com>
References: <web-30319@temporal-wave.com>
Message-ID: <47E67DAC.2060608@infobal.com>

That did the trick!

Thanks
--S

Jim Idle wrote:
> On 3/20/08 1:59 PM, "Stuart Watt" <swatt at infobal.com> wrote:
>
>> Hi folks, and especially Jim
>
>> I'm probably being an idiot, but how do you build the C runtime these 
>> days? The previous version was easy, but now it requires ./configure, 
>> and I can't quite get that far!!
>
>> ./configure fails with config.status: error: cannot find input file: 
>> Makefile.in
>
>> This could be because automake is failing:
>
> You are trying to build it from the maintainers source directory and 
> not by expanding the tar under dist and runing the configure that 
> exists there.
>
> You can build the maintainers version but you have to run autoreconf 
> -i first. Just expand the tar and the configure shoudl just work.
>
> Jim
>
> -- 
> This message was scanned by ESVA and is believed to be clean.
> Click here to report this message as spam. 
> http://antispam.infobal.com/cgi-bin/learn-msg.cgi?id=E757B27FEA.89D2D
>

From parrt at cs.usfca.edu  Sun Mar 23 11:36:01 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 23 Mar 2008 11:36:01 -0700
Subject: [antlr-interest] faster expression parsing
In-Reply-To: <20080319105546.EA5A511ED1E@www.antlr.org>
References: <C8D7E273-82E3-4379-9884-1301859D88B0@cs.usfca.edu>
	<47DF40BE.6020605@Yahoo.com>
	<254336A1-444A-415F-A4C5-3D43405E9B6A@cs.usfca.edu>
	<20080319105546.EA5A511ED1E@www.antlr.org>
Message-ID: <2DF39FAA-D795-4E9D-AA82-67BAC2802F9C@cs.usfca.edu>

Hi Gavin,

Excellent suggestions, very much along the lines of what I was  
thinking.  I have summarize my thoughts here:

http://www.antlr.org/wiki/display/~admin/2008/03/23/Faster+expression 
+parsing+for+ANTLR

Ter
On Mar 19, 2008, at 3:55 AM, Gavin Lambert wrote:

> At 14:57 19/03/2008, Terence Parr wrote:
> >We'd just need to say something like you request.  I also
> >thought that just using an option would be ok...or, use
> >the left-recursive rule.
> >
> >e	:	e '*' e
> >	|	e '-' e
> >	|	e '+' e
> >	|	'-' e
> >	|	e '.' ID
> >	|	e '[' e ']'
> >	|	e '(' e (',' e)* ')'
> >	|	INT
> >	|	ID
> >	;
> >
> >That's nice 'cause it's explicit like a yacc grammar would be.
> >I'd recognize this pattern and build what i sent before.  Only
> >issue is precedence.  Order would work sort of but probably
> >not perfectly...for example a+b.x should not match as (a+b).x.
>
> Well, for that case I think that's just because the alts are out of  
> order :)
>
> Though I don't think you can use alt order alone as an indicator of  
> precedence, since there has to be some way to signal equal  
> precedence (think "a * b / c".  If division is given higher  
> precedence than multiplication then you'll get the wrong answer,  
> using integer arithmetic).
>
> Extending that a bit (and including subrule invocation), how about  
> something like this:
>
> e : ( ID | INT )
>  | '(' e ')'
>  | callArrayMember
>  | unop
>  | ( e '*' e | e '/' e )
>  | ( e '+' e | e '-' e )
>  | comparison
>  | assignment
>  ;
>
> callArrayMember
>  : e '(' e (',' e)* ')'
>  | e '[' e ']'
>  | e '.' ID
>  ;
>
> unop
> options { associativity = right; }
>  : '+' e
>  | '-' e
>  ;
>
> comparison
>  : e '==' e
>  | e '!=' e
>  | e '<' e
>  | e '>' e
>  | e '<=' e
>  | e '>=' e
>  ;
>
> assignment
> options { associativity = right; }
>  : e '=' e
>  | e '+=' e
>  | e '-=' e
>  | e '*=' e
>  | e '/=' e
>  ;
>
> The idea is that in the "root" rule (which might need a special  
> option to make it easily recognisable), each top-level alt  
> represents an order of precedence, from highest to lowest.  Sub-alts  
> (as in ID & INT, * & /) have equal precedence.  If a subrule is  
> called, it's treated like a sub-alt; all alts within the subrule  
> have equal precedence.  You can also use an option to specify the  
> operator associativity.  (I think you're allowed to specify options  
> at the alt level as well, but just to be safe [and because it seemed  
> tidier that way] I put them in subrules.)
>
> Of course, I'm not sure how hard all of this would be to produce;  
> it's like a little mini-grammar in its own right.  And something  
> like the callArrayMember subrule would probably be hard to generate  
> a good AST automatically for.
>


From belayda at gmail.com  Sun Mar 23 16:45:20 2008
From: belayda at gmail.com (Bernardo Elayda)
Date: Sun, 23 Mar 2008 16:45:20 -0700
Subject: [antlr-interest] Root note of tree doesn't have the index attribute?
Message-ID: <3e5ed32f0803231645g22b38f06g940eb4be6b32d7f9@mail.gmail.com>

Hi,

I'm having trouble with the following in a tree grammar:


myrule : ^(a='=' b=NODE c=NODE) -> mytemplate(mya={$a.index},
myb={$b.text},myc={$c.text}) ;


When I compile the above rule and compile the resulting java file, I get an
error that says it cannot find the method getTokenIndex for 'a'.  That
doesn't make sense to me.  Isn't the root node labeled as 'a' above just a
token?  If I change the above template to use $a.text, that works.

tia,
Bernardo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080323/406373e2/attachment.html 

From antlr at mirality.co.nz  Sun Mar 23 17:12:55 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 24 Mar 2008 13:12:55 +1300
Subject: [antlr-interest] Root note of tree doesn't have the index
 attribute?
In-Reply-To: <3e5ed32f0803231645g22b38f06g940eb4be6b32d7f9@mail.gmail.co
 m>
References: <3e5ed32f0803231645g22b38f06g940eb4be6b32d7f9@mail.gmail.com>
Message-ID: <20080324001315.1DBE911EBD5@www.antlr.org>

At 12:45 24/03/2008, Bernardo Elayda wrote:
>myrule : ^(a='=' b=NODE c=NODE) -> mytemplate(mya={$a.index}, 
>myb={$b.text},myc={$c.text}) ;
>
>When I compile the above rule and compile the resulting java 
>file, I get an error that says it cannot find the method 
>getTokenIndex for 'a'.  That doesn't make sense to me.  Isn't the 
>root node labeled as 'a' above just a token?  If I change the 
>above template to use $a.text, that works.

Each element within a tree parser is a tree node, which *contains* 
a token (and a collection of child nodes), but it's not a token 
itself.

There should be a way to get to the token itself, but I haven't 
really used tree grammars before myself so I can't tell you what 
it would be offhand.  If nobody else pipes up then your best bet 
would be to have a look at the generated code, particularly at the 
definition of the class it uses for the node.

(Although I do seem to recall also hearing that literal strings 
didn't work in tree grammars.  But that was a long long time ago 
so maybe that's been sorted out.)


From belayda at gmail.com  Sun Mar 23 18:12:58 2008
From: belayda at gmail.com (Bernardo Elayda)
Date: Sun, 23 Mar 2008 18:12:58 -0700
Subject: [antlr-interest] Root note of tree doesn't have the index
	attribute?
In-Reply-To: <47e6f21c.09ed300a.3edb.ffffb8a0SMTPIN_ADDED@mx.google.com>
References: <3e5ed32f0803231645g22b38f06g940eb4be6b32d7f9@mail.gmail.com>
	<47e6f21c.09ed300a.3edb.ffffb8a0SMTPIN_ADDED@mx.google.com>
Message-ID: <3e5ed32f0803231812u13997315s855c06954dc0aa6b@mail.gmail.com>

To answer my own question:

>myrule : ^(a='=' b=NODE c=NODE) -> mytemplate(mya={$a.index},
>myb={$b.text},myc={$c.text}) ;
>
>When I compile the above rule and compile the resulting java
>file, I get an error that says it cannot find the method
>getTokenIndex for 'a'.  That doesn't make sense to me.  Isn't the
>root node labeled as 'a' above just a token?

I need to do this instead:

myrule : ^(a='=' b=NODE c=NODE) ->
mytemplate(mya={$a.token.getTokenIndex()},myb={$b.text},myc={$c.text}) ;
I also tried : $a.token.index, but that didn't work.

-be




On Sun, Mar 23, 2008 at 5:12 PM, Gavin Lambert <antlr at mirality.co.nz> wrote:

> At 12:45 24/03/2008, Bernardo Elayda wrote:
> >myrule : ^(a='=' b=NODE c=NODE) -> mytemplate(mya={$a.index},
> >myb={$b.text},myc={$c.text}) ;
> >
> >When I compile the above rule and compile the resulting java
> >file, I get an error that says it cannot find the method
> >getTokenIndex for 'a'.  That doesn't make sense to me.  Isn't the
> >root node labeled as 'a' above just a token?  If I change the
> >above template to use $a.text, that works.
>
> Each element within a tree parser is a tree node, which *contains*
> a token (and a collection of child nodes), but it's not a token
> itself.
>
> There should be a way to get to the token itself, but I haven't
> really used tree grammars before myself so I can't tell you what
> it would be offhand.  If nobody else pipes up then your best bet
> would be to have a look at the generated code, particularly at the
> definition of the class it uses for the node.
>
> (Although I do seem to recall also hearing that literal strings
> didn't work in tree grammars.  But that was a long long time ago
> so maybe that's been sorted out.)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080323/af35e3d6/attachment.html 

From auberlin at hotmail.com  Sun Mar 23 23:42:31 2008
From: auberlin at hotmail.com (Auber Lin)
Date: Mon, 24 Mar 2008 06:42:31 +0000
Subject: [antlr-interest] How to discard comment text when catching source
	code part?
Message-ID: <BAY125-W3904CC4D4129BEF20E648BC5FD0@phx.gbl>


hi ANTLR users,
  i tried to get some part of c source code like the following syntax expression:
function_definitionscope {  ModifierText;  DeclText;  LBLine;  LBOffset;  DeclLine;  DeclOffset;}@init {  $function_definition::ModifierText = '';  $function_definition::DeclText = '';  $function_definition::LBLine = 0;  $function_definition::LBOffset = 0;  $function_definition::DeclLine = 0;  $function_definition::DeclOffset = 0;}@after{  self.StoreFunctionDefinition($function_definition.start.line, $function_definition.start.charPositionInLine, $function_definition.stop.line, $function_definition.stop.charPositionInLine, $function_definition::ModifierText, $function_definition::DeclText, $function_definition::LBLine, $function_definition::LBOffset, $function_definition::DeclLine, $function_definition::DeclOffset)} : d=declaration_specifiers? declarator  ( declaration+ a=compound_statement // K&R style  | b=compound_statement    // ANSI style  ) {       if d != None:        $function_definition::ModifierText = $declaration_specifiers.text      else:        $function_definition::ModifierText = ''      $function_definition::DeclText = $declarator.text      $function_definition::DeclLine = $declarator.start.line      $function_definition::DeclOffset = $declarator.start.charPositionInLine      if a != None:        $function_definition::LBLine = $a.start.line        $function_definition::LBOffset = $a.start.charPositionInLine      else:        $function_definition::LBLine = $b.start.line        $function_definition::LBOffset = $b.start.charPositionInLine    } ;
 
it works fine for most cases except for the comments exists in the function parameter list part, like this:
 
STATUS
SetParameters (  IN BASE_CODE_PROTOCOL       *This,  IN BOOLEAN                          *NewAutoArp, OPTIONAL  IN BOOLEAN                          *NewSendGUID, OPTIONAL  IN UINT8                            *NewTTL, OPTIONAL  IN UINT8                            *NewToS, OPTIONAL  IN BOOLEAN                          *NewMakeCallback  // Make callback indicator
)
 
the comment part after '//' is also picked out as a part of function.
 
i already have set hidden channel for comments, i don't know why they still appear in the text i picked out.
 
LINE_COMMENT    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}    ;
 
is there any option of ANTLR that could make me get the no-comment code context?
 
Cheers!
Auber
 
 
_________________________________________________________________
Test your Star IQ
http://club.live.com/red_carpet_reveal.aspx?icid=redcarpet_HMTAGMAR
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080324/7ad7b295/attachment.html 

From carter_cheng at yahoo.com  Mon Mar 24 01:11:04 2008
From: carter_cheng at yahoo.com (Carter Cheng)
Date: Mon, 24 Mar 2008 01:11:04 -0700 (PDT)
Subject: [antlr-interest] Problem with Self 4.1 grammar
Message-ID: <911931.76287.qm@web50109.mail.re2.yahoo.com>

Hello again,

I am currently building a self 4.1 grammar which so far seems to work reasonably well for certain specific files but I came across a problem in the grammar which I am not sure how to resolve. The problem is that Self like Smalltalk uses '.' as a statement separator and there appears to be some conflict in the case:

[ x == 1. ]    

Where it seems unable to determine that 1 is an int obviously adding white space 

[ x == 1 . ] 

works. I assume this is some sort of lexing problem but the only rule I have which may conflict is:

Real
	: Decimal ( ('.' Decimal) => '.' Decimal ) ( ('e'|'E') ('+'|'-') Decimal )?
	;

with Integer and Decimal defined as:

Integer
	: Decimal
	| Base GeneralDigit+
	;

Decimal
        : Digit+
        ;

Thanks in advance,

Carter.

Is there some way to peek into the token stream to see what the lexer is doing? It seems like the lexing problems given some of the operator ambiguities in Self are causing most of my problems. 


      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From jimi at temporal-wave.com  Mon Mar 24 01:23:41 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 24 Mar 2008 16:23:41 +0800
Subject: [antlr-interest] Problem with Self 4.1 grammar
In-Reply-To: <911931.76287.qm@web50109.mail.re2.yahoo.com>
References: <911931.76287.qm@web50109.mail.re2.yahoo.com>
Message-ID: <47E7650D.2020904@temporal-wave.com>

Carter Cheng wrote:

Your real needs to add the empty alt:

Real
    : Decimal
       (
           ('.' Decimal)=> '.' Decimal (('e'|'E') ('+'|'-') Decimal)?
           | // Just an integer { $type = Integer; }
       )
    ;

Dot  : '.' ;


> Hello again,
>
> I am currently building a self 4.1 grammar which so far seems to work reasonably well for certain specific files but I came across a problem in the grammar which I am not sure how to resolve. The problem is that Self like Smalltalk uses '.' as a statement separator and there appears to be some conflict in the case:
>
> [ x == 1. ]    
>
> Where it seems unable to determine that 1 is an int obviously adding white space 
>
> [ x == 1 . ] 
>
> works. I assume this is some sort of lexing problem but the only rule I have which may conflict is:
>
> Real
> 	: Decimal ( ('.' Decimal) => '.' Decimal ) ( ('e'|'E') ('+'|'-') Decimal )?
> 	;
>
> with Integer and Decimal defined as:
>
> Integer
> 	: Decimal
> 	| Base GeneralDigit+
> 	;
>
> Decimal
>         : Digit+
>         ;
>
> Thanks in advance,
>
> Carter.
>
> Is there some way to peek into the token stream to see what the lexer is doing? It seems like the lexing problems given some of the operator ambiguities in Self are causing most of my problems. 
>
>
>       ____________________________________________________________________________________
> Looking for last minute shopping deals?  
> Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping
>   


From jimi at temporal-wave.com  Mon Mar 24 01:25:53 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 24 Mar 2008 16:25:53 +0800
Subject: [antlr-interest] Problem with Self 4.1 grammar
In-Reply-To: <47E7650D.2020904@temporal-wave.com>
References: <911931.76287.qm@web50109.mail.re2.yahoo.com>
	<47E7650D.2020904@temporal-wave.com>
Message-ID: <47E76591.9070101@temporal-wave.com>


I should add that your predicate can aklso be just ('.' Digit)=> (I 
presume that Digit is a fragment rule, as it should be).

Jim
> Your real needs to add the empty alt:
>
> Real
>    : Decimal
>       (
>           ('.' Decimal)=> '.' Decimal (('e'|'E') ('+'|'-') Decimal)?
>           | // Just an integer { $type = Integer; }
>       )
>    ;
>
> Dot  : '.' ;
>
>
>> Hello again,
>>
>> I am currently building a self 4.1 grammar which so far seems to work 
>> reasonably well for certain specific files but I came across a 
>> problem in the grammar which I am not sure how to resolve. The 
>> problem is that Self like Smalltalk uses '.' as a statement separator 
>> and there appears to be some conflict in the case:
>>
>> [ x == 1. ]   
>> Where it seems unable to determine that 1 is an int obviously adding 
>> white space
>> [ x == 1 . ]
>> works. I assume this is some sort of lexing problem but the only rule 
>> I have which may conflict is:
>>
>> Real
>>     : Decimal ( ('.' Decimal) => '.' Decimal ) ( ('e'|'E') ('+'|'-') 
>> Decimal )?
>>     ;
>>
>> with Integer and Decimal defined as:
>>
>> Integer
>>     : Decimal
>>     | Base GeneralDigit+
>>     ;
>>
>> Decimal
>>         : Digit+
>>         ;
>>
>> Thanks in advance,
>>
>> Carter.
>>
>> Is there some way to peek into the token stream to see what the lexer 
>> is doing? It seems like the lexing problems given some of the 
>> operator ambiguities in Self are causing most of my problems.
>>
>>       
>> ____________________________________________________________________________________ 
>>
>> Looking for last minute shopping deals?  Find them fast with Yahoo! 
>> Search.  
>> http://tools.search.yahoo.com/newsearch/category.php?category=shopping
>>   
>


From antlr at mirality.co.nz  Mon Mar 24 02:43:19 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 24 Mar 2008 22:43:19 +1300
Subject: [antlr-interest] Problem with Self 4.1 grammar
In-Reply-To: <911931.76287.qm@web50109.mail.re2.yahoo.com>
References: <911931.76287.qm@web50109.mail.re2.yahoo.com>
Message-ID: <20080324094340.0A33111E9BB@www.antlr.org>

At 21:11 24/03/2008, Carter Cheng wrote:
 >Real
 >	: Decimal ( ('.' Decimal) => '.' Decimal ) ( ('e'|'E') 
('+'|'-')
 >Decimal )?
 >	;

If you want 'Real' to be your only numeric token (encompassing 
both integral and decimal values), then an alternative to Jim's 
suggestion is to simply put a '?' after your ". Decimal" block.

One of the problems you're having here is that the predicate will 
have no effect, since it doesn't have an alternative.  Either 
explicitly putting in an empty alt (possibly with a type-change) 
as Jim suggested or using ? to make ANTLR internally generate the 
empty alt will resolve this.

 >Integer
 >	: Decimal
 >	| Base GeneralDigit+
 >	;
 >
 >Decimal
 >        : Digit+
 >        ;

Both of these rules should be fragment rules, as should any other 
rules they end up calling.


From jimi at temporal-wave.com  Mon Mar 24 03:27:43 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 24 Mar 2008 18:27:43 +0800
Subject: [antlr-interest] Problem with Self 4.1 grammar
In-Reply-To: <20080324094340.0A33111E9BB@www.antlr.org>
References: <911931.76287.qm@web50109.mail.re2.yahoo.com>
	<20080324094340.0A33111E9BB@www.antlr.org>
Message-ID: <47E7821F.5050901@temporal-wave.com>

Gavin Lambert wrote:

Actually I don't think that will work because it will see the '.' and 
eat it with the First Decimal, which is probably not what is wanted, but 
it would work if it was what was wanted of course. Either Integer, Real 
or Eol ('.') is what I think is being looked for?

Jim
> At 21:11 24/03/2008, Carter Cheng wrote:
> >Real
> >    : Decimal ( ('.' Decimal) => '.' Decimal ) ( ('e'|'E') ('+'|'-')
> >Decimal )?
> >    ;
>
> If you want 'Real' to be your only numeric token (encompassing both 
> integral and decimal values), then an alternative to Jim's suggestion 
> is to simply put a '?' after your ". Decimal" block.
>
> One of the problems you're having here is that the predicate will have 
> no effect, since it doesn't have an alternative.  Either explicitly 
> putting in an empty alt (possibly with a type-change) as Jim suggested 
> or using ? to make ANTLR internally generate the empty alt will 
> resolve this.
>
> >Integer
> >    : Decimal
> >    | Base GeneralDigit+
> >    ;
> >
> >Decimal
> >        : Digit+
> >        ;
>
> Both of these rules should be fragment rules, as should any other 
> rules they end up calling.
>


From mail at ghost23.de  Mon Mar 24 03:55:51 2008
From: mail at ghost23.de (Sven Busse)
Date: Mon, 24 Mar 2008 11:55:51 +0100
Subject: [antlr-interest] Recognizing Indentation as blocks
Message-ID: <001001c88d9d$a0361560$9231fea9@Werkbank>

Hi,

i am currently reading Terrence's book. I am currently at the chapter
"Emitting more than one token per Lexer rule". He gives an example from
python:

if foo:
	print "foo is true"
	f()
g()

He then discusses an exemplary INDENT lexer rule, which i am trying to
understand.

His INDENT rule aims to match Whitespace and Tabs if they start at the
beginning of the line. If the indentation is bigger than in a previous line,
an imaginary INDENT token is emitted. If it is smaller than in the previous
line, one or multiple DEDENT token are emitted.

Now my question is, would this actually work with an example like the little
python script? Because the line with "g()" has actually no whitespace at
all, so i would assume there would be no match and thus the logic of
emitting DEDENT would not even be invoked.

Is this correct or am i missing something? I am referring to the book "The
defintive ANTRL Reference", page 95.

Thank you
Sven


From antlr at mirality.co.nz  Mon Mar 24 04:12:12 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 25 Mar 2008 00:12:12 +1300
Subject: [antlr-interest] Problem with Self 4.1 grammar
In-Reply-To: <47E7821F.5050901@temporal-wave.com>
References: <911931.76287.qm@web50109.mail.re2.yahoo.com>
	<20080324094340.0A33111E9BB@www.antlr.org>
	<47E7821F.5050901@temporal-wave.com>
Message-ID: <20080324111248.444E511ECC5@www.antlr.org>

At 23:27 24/03/2008, Jim Idle wrote:
 >Actually I don't think that will work because it will see the 
'.'
 >and eat it with the First Decimal, which is probably not what is 

 >wanted, but it would work if it was what was wanted of course.

Shouldn't do.  If the whole ". Decimal" block is made optional 
then the predicate should prevent it from consuming the dot if 
there aren't following digits, since having a predicate overrides 
the normally k=1 behaviour of the lexer.

Specifically:
   Real
     : Decimal
       ( ('.' Digit) => '.' Decimal )?
       ( ('e'|'E') ('+'|'-') Decimal )?
     ;

 >Either Integer, Real or Eol ('.') is what I think is being
 >looked for?

Probably, yes.  I was just offering an alternative solution (to 
always output Real, never Integer), in case the target language 
doesn't care about the distinction.  If the distinction *is* 
important then the explicit empty alt with type-reassignment that 
you proposed would be the better choice.  Maybe I didn't say that 
clearly enough :)


From carter_cheng at yahoo.com  Mon Mar 24 05:14:21 2008
From: carter_cheng at yahoo.com (Carter Cheng)
Date: Mon, 24 Mar 2008 05:14:21 -0700 (PDT)
Subject: [antlr-interest] Problem with Self 4.1 grammar
Message-ID: <752234.47368.qm@web50102.mail.re2.yahoo.com>

Thanks both for the advice I was actually looking for something closer to Jim's solution in this case and that's what I ended up implementing. It seems to solve the problem I was having and with a bit more work I seem to be cleanly parsing most of the files that make up Self 4.1 World in the Self4Linux package.

I have one question about backtracking though which hopefully can fix the last remaining problem which I have at the moment sort of hacked around by disabling an operator. The block-

[ | :i | fileDescriptor = (selectVec at: i) ifTrue: [^true]]

doesnt parse properly because in Self | is both a divider and potentially an operator. The closely related code however does parse- 

[ | | fileDescriptor = (selectVec at: i) ifTrue: [^true]]

If I remove | from the operator list the code parses properly. I am curious why ANTLR can't backtrack this. Is there a way to force the parser to prefer the non-operator interpretation?

The relevant parse rules are as follows-

block
	: '[' code? ']' -> ^(BLOCK code?) 
	| '[' '|' slotList? '|' code? ']' -> ^(BLOCK slotList? code?) 
	;

slotList
	: ( unannotatedSlotList | annotatedSlotList )*
	;

unannotatedSlotList
	: slot ('.' slot)* '.'? -> slot+
	;

code
	: '^'? expression ('.' '^'? expression )* '.'? 
	;

slot
	: argSlot 
	| dataSlot 
	| binarySlot
	| keywordSlot
	;

argSlot
	: ArgumentName -> ^(SLOT_ARG ArgumentName)
	;
binarySlot
	: operator Identifier? '=' regularObject -> ^(SLOT_BINARY operator Identifier? regularObject) 
	;



      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ

From antlr at mirality.co.nz  Mon Mar 24 05:40:29 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 25 Mar 2008 01:40:29 +1300
Subject: [antlr-interest] Problem with Self 4.1 grammar
In-Reply-To: <752234.47368.qm@web50102.mail.re2.yahoo.com>
References: <752234.47368.qm@web50102.mail.re2.yahoo.com>
Message-ID: <20080324124052.D127B11ECFC@www.antlr.org>

At 01:14 25/03/2008, Carter Cheng wrote:
 >I have one question about backtracking though which hopefully 
can
 >fix the last remaining problem which I have at the moment sort 
of
 >hacked around by disabling an operator.
[...]
 >If I remove | from the operator list the code parses properly. I 
am
 >curious why ANTLR can't backtrack this. Is there a way to force 
the
 >parser to prefer the non-operator interpretation?

By default ANTLR generates code for performance, and so won't 
backtrack unless you specifically add syntactic predicates.  If 
you want it to do backtracking, then you'll either need to 
manually add predicates wherever needed or set 'backtrack=true' in 
the options (which will implicitly add predicates to every alt).

 >The relevant parse rules are as follows-
 >
 >block
 >	: '[' code? ']' -> ^(BLOCK code?)
 >	| '[' '|' slotList? '|' code? ']' -> ^(BLOCK slotList? code?)
 >	;
 >
 >slotList
 >	: ( unannotatedSlotList | annotatedSlotList )*
 >	;

Note: you're specifying optionality twice here (slotList is 
optional and the rule itself is allowed to match nothing).  This 
is generally a bad idea; you should either remove the ? or change 
the * to a +.


From felix_do at web.de  Mon Mar 24 08:08:06 2008
From: felix_do at web.de (Felix Dorner)
Date: Mon, 24 Mar 2008 16:08:06 +0100
Subject: [antlr-interest] Specify java target package
Message-ID: <47E7C3D6.7010602@web.de>

Hey,

when I use

@header{
package "org.example.mypackage";
}

The Parser gets annotated well, however the Lexer still stays in the 
default package. Any way to specify a target package for the Lexer?


Thanks,
Felix


From lefevrol at yahoo.com  Mon Mar 24 08:50:11 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Mon, 24 Mar 2008 16:50:11 +0100
Subject: [antlr-interest] Specify java target package
In-Reply-To: <47E7C3D6.7010602@web.de>
References: <47E7C3D6.7010602@web.de>
Message-ID: <fs8ijs$vf3$1@ger.gmane.org>

Felix Dorner wrote:
> Hey,
> 
> when I use
> 
> @header{
> package "org.example.mypackage";
> }
> 
> The Parser gets annotated well, however the Lexer still stays in the 
> default package. Any way to specify a target package for the Lexer?

@lexer::header {
     package mypackage;
}


From lefevrol at yahoo.com  Mon Mar 24 09:06:03 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Mon, 24 Mar 2008 17:06:03 +0100
Subject: [antlr-interest] Specify java target package
In-Reply-To: <fs8ijs$vf3$1@ger.gmane.org>
References: <47E7C3D6.7010602@web.de> <fs8ijs$vf3$1@ger.gmane.org>
Message-ID: <fs8jhk$2t8$1@ger.gmane.org>

> @lexer::header {
>     package mypackage;
> }

PS: If you do that, then for consistency you should write @parser::header 
as well and not just @header, although parser is the default. Otherwise it 
looks weird (IMO).

-- O.L.


From parrt at cs.usfca.edu  Mon Mar 24 10:03:12 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 24 Mar 2008 10:03:12 -0700
Subject: [antlr-interest] compiler position at Adobe
Message-ID: <B9000138-E956-4E66-A5F2-ACF011D33BBE@cs.usfca.edu>

Howdy folks,

The groovy folks at Adobe have a compiler position available if anyone  
is interested:

http://cooljobs.adobe.com/viewjob.html?optlink-view=view-68047&ERFormID=newjoblist

Regards,
Ter

From antlr-interest at antlr.org  Mon Mar 24 10:48:52 2008
From: antlr-interest at antlr.org (antlr-interest at antlr.org)
Date: Mon, 24 Mar 2008 10:48:52 -0700 (PDT)
Subject: [antlr-interest] MensHealth id 2576845
Message-ID: <20080324074853.5312.qmail@rev-121-002.legionowo.forweb.pl>

Canadian Doctor Alfred  Best Price On Net 85% OFF! Hurry, 1 Day Left!
http://www.google.kz/pagead/iclk?sa=l&ai=uhntl&num=805334&adurl=http://www.systemcorn.com


From jaluber at gmx.de  Mon Mar 24 12:27:57 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 24 Mar 2008 20:27:57 +0100
Subject: [antlr-interest] Unicode Category Question
In-Reply-To: <47E57197.5040206@shaw.ca>
References: <47E57197.5040206@shaw.ca>
Message-ID: <47E800BD.4060803@gmx.de>

Darryl A. J. Staflund schrieb:
> Hi everyone,
> 
> I am a new ANTLR user and have started to write an EMCA-compliant lexer 
> for C# using ANTLR 3.0.1.  I know that other C# lexers exist on the site 
> but I want to try writing one for myself to get a feel for ANTLR and to 
> learn how to use it to deal with pre-processing directives, etc.  Since 
> I hope to compile the lexer using C# instead of Java, I have set my 
> target language as 'CSharp' in the options of my grammar file.  I then 
> generate the source code using the Java-based 'org.antlr.Tool' class.  I 
> am using the Sun Java SDK 1.6.0_05.
> 
> I have run into two difficulties with this current approach:
> 
> 1.   The ECMA 334 specification defines a C# 2.x Unicode escape sequence 
> as follows:
> 
>        unicode-escape-sequence::
>            \u hex-digit hex-digit hex-digit hex-digit
>            \U hex-digit hex-digit hex-digit hex-digit hex-digit 
> hex-digit hex-digit hex-digit
> 
> Although the current (?) Java specification handles the first option 
> just fine, it handles the second option a bit differently as stated in 
> http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.1:
> 
>    "The Unicode standard was originally designed as a fixed-width 16-bit 
> character encoding. It
>    has since been changed to allow for characters whose representation 
> requires more than 16 bits.
>    The range of legal code points is now U+0000 to U+10FFFF, using the 
> hexadecimal U+n notation.
>    Characters whose code points are greater than U+FFFF are called 
> supplementary characters. To
>    represent the complete range of characters using only 16-bit units, 
> the Unicode standard defines an
>    encoding called UTF-16. In this encoding, supplementary characters 
> are represented as pairs of
>    16-bit code units, the first from the high-surrogates range, (U+D800 
> to U+DBFF), the second from
>    the low-surrogates range (U+DC00 to U+DFFF). For characters in the 
> range U+0000 to U+FFFF,
>    the values of code points and UTF-16 code units are the same."
> 
> Since Java represents supplementary characters as pairs of 16-byte code 
> units instead of as single '\Uxxxxxxxx' string sequences, I don't know 
> how to parse these latter values in my ANTLR grammar.  Does ANTLR's 
> Java-based lexer handle Unicode supplementary characters passed to it in 
> the '\Uxxxxxxxx' format?  How should I handle something like this?

I refer for these questions to my dissertation, which I will will send 
to you (and anyone else) off-list.

> 2.  The ECMA 334 specifications defines identifiers in terms of Unicode 
> character categories as follows:
> 
>    letter-character::
>    A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl
>    A unicode-escape-sequence representing a character of classes Lu, Ll, 
> Lt, Lm, Lo, or Nl
> 
>    combining-character::
>    A Unicode character of classes Mn or Mc
>    A unicode-escape-sequence representing a character of classes Mn or Mc
> 
>    decimal-digit-character::
>    A Unicode character of the class Nd
>    A unicode-escape-sequence representing a character of the class Nd
> 
>    connecting-character::
>    A Unicode character of the class Pc
>    A unicode-escape-sequence representing a character of the class Pc
> 
>    formatting-character::
>    A Unicode character of the class Cf
>    A unicode-escape-sequence representing a character of the class Cf
> 
> I have read various posts in the ANTLR newsgroups on how to recognize 
> these categories and see that a number of strategies have been discussed:
> 
> - Define the categories in terms of Unicode escape sequences, eg.  
> "WHITESPACE:  ('\u0020' | ('\u2000'.'\u0200A') | ...etc...);".
> - Define the categories in terms of semantic predicates, eg.  
> "WHITESPACE:  { IsUnicodeCategoryZs (LA (1)) }? ;".
> 
> The difficulty with the first approach in regard to the C# specification 
> is that some Unicode character categories (ex:  Nd) contain 
> supplementary characters.  This means that in order to represent them in 
> a Java-friendly manner, I need to convert them into pairs of Unicode 
> characters.  Ugghh!  I don't mind the second option, although it sounds 
> as though it will run slower.
> 
> Since the newer regular expression engines used by Perl, Java, C#, etc. 
> have been built to match on Unicode, could ANTLR's EBNF be extended to 
> match on the following:
> 
> - Unicode Character Properties (i.e.:  \p{Lu}, \p{Mn}, etc...)
> - Unicode Scripts (i.e.  \p{Common}, \p{Arabic}, etc...)
> - Unicode Blocks (i.e. \p{Currency_Symbol}, \p{InBasic_Latin}, ...)
> 
> 
> If this were done, we could use them in the ANTLR parser as so:
> 
>    letter-character:
>        :    \p{Lu}
>        |    \p{Ll}
>        |    \p{Lt}
>        |    \p{Lm}
>        |    \p{Lo}
>        |    \p{Nl}
>      
> etc...
> 
> We could also use them to do the following:
> 
> - Define characters in terms of negations (ex:  "TOKEN:  \p{^Lu} | 
> \p{^Letter};)
> - Match letters including diacritics (ex:  LETTER_AND_DIACRITIC:  \p{L} 
> \p{M}*)

An interesting enhancement, but unnecessary for the problem, as 
described in my dissertation.

Johannes

From carter_cheng at yahoo.com  Mon Mar 24 22:37:45 2008
From: carter_cheng at yahoo.com (Carter Cheng)
Date: Mon, 24 Mar 2008 22:37:45 -0700 (PDT)
Subject: [antlr-interest] Problem with Self 4.1 grammar
Message-ID: <33748.65771.qm@web50108.mail.re2.yahoo.com>

Thanks for the input. The problem I am having is that it seems that ANTLR in this case with backtracking switched on still misses one of the alternatives and returns a no viable alt. error when the decision is nondeterministic. Whereas if I disable the '|' token as an operator it becomes deterministic and parses correctly. The decision branch in this case is obviously buried in different rules so the alternative is not manifest. I am curious if there is a simple way in this case to add the syntactic predicate back in without refactoring the rules.   

--- On Mon, 3/24/08, Gavin Lambert <antlr at mirality.co.nz> wrote:

> From: Gavin Lambert <antlr at mirality.co.nz>
> Subject: Re: [antlr-interest] Problem with Self 4.1 grammar
> To: carter_cheng at yahoo.com, antlr-interest at antlr.org
> Date: Monday, March 24, 2008, 5:40 AM
> At 01:14 25/03/2008, Carter Cheng wrote:
>  >I have one question about backtracking though which
> hopefully 
> can
>  >fix the last remaining problem which I have at the
> moment sort 
> of
>  >hacked around by disabling an operator.
> [...]
>  >If I remove | from the operator list the code parses
> properly. I 
> am
>  >curious why ANTLR can't backtrack this. Is there a
> way to force 
> the
>  >parser to prefer the non-operator interpretation?
> 
> By default ANTLR generates code for performance, and so
> won't 
> backtrack unless you specifically add syntactic predicates.
>  If 
> you want it to do backtracking, then you'll either need
> to 
> manually add predicates wherever needed or set
> 'backtrack=true' in 
> the options (which will implicitly add predicates to every
> alt).
> 
>  >The relevant parse rules are as follows-
>  >
>  >block
>  >	: '[' code? ']' -> ^(BLOCK code?)
>  >	| '[' '|' slotList? '|' code?
> ']' -> ^(BLOCK slotList? code?)
>  >	;
>  >
>  >slotList
>  >	: ( unannotatedSlotList | annotatedSlotList )*
>  >	;
> 
> Note: you're specifying optionality twice here
> (slotList is 
> optional and the rule itself is allowed to match nothing). 
> This 
> is generally a bad idea; you should either remove the ? or
> change 
> the * to a +.


      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs

From cieslewski at hcs.ufl.edu  Tue Mar 25 06:01:37 2008
From: cieslewski at hcs.ufl.edu (Grzegorz Cieslewski)
Date: Tue, 25 Mar 2008 09:01:37 -0400
Subject: [antlr-interest] template generation for dumb rules
In-Reply-To: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>
References: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>
Message-ID: <7aa837f80803250601g1d6105e5v9cb4f78d4e6dbe0c@mail.gmail.com>

I am in the similar situation.  In my grammar I have about 100 rules
like that.  I have saved some time by defining all templates in
separate file and creating template  simple(a)::="<a>" and then
invoking it multiple times whenever I have a "dumb" rule.  If any one
knows a better way of doing this I am all ears.

Greg

On Wed, Mar 19, 2008 at 10:28 AM, Philippe Faes <ph_reader at faes.net> wrote:
> Dear ANTLR-gang,
>
> I'm writing an ANTLR stringtemplate generator, which translates a tree to a
> string template. My grammar has many rules like this:
> a : b | c;
> The generation rule that I want for these rules looks something like:
>  a: b -> template(b={$b.st}) "<b>"
>   | c -> template(c={$c.st}) "<c>";
> In fact the stringtemplate just repeats whatever the underlying rule would
> return as stringtemplate.
> These rules have very little extra value, but they require a lot of typing,
> and decrease the general readability of the grammar.
>  I was hoping to find a way of setting this "braindead" stringtemplate rule
> as a default. Is there any way somebody can save me a lot of time typing
> these rules?
>
> kind regards
> Philippe
>
>



-- 
=====================================================
Grzegorz Cieslewski
Research Assistant
High-performance Computing & Simulation (HCS) Research Laboratory
University of Florida, Dept. of Electrical and Computer Engineering
330 Benton Hall, Gainesville, FL, 32611-6200
Phone: (352) 392-9041
Email: cieslewski at hcs.ufl.edu
Web: www.hcs.ufl.edu
=====================================================

From parrt at cs.usfca.edu  Tue Mar 25 07:59:00 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 07:59:00 -0700
Subject: [antlr-interest] template generation for dumb rules
In-Reply-To: <7aa837f80803250601g1d6105e5v9cb4f78d4e6dbe0c@mail.gmail.com>
References: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>
	<7aa837f80803250601g1d6105e5v9cb4f78d4e6dbe0c@mail.gmail.com>
Message-ID: <086A8CB1-289E-4C8B-90AF-3A70A2F75283@cs.usfca.edu>

try

a : b -> {$b.st} | c -> {$c.st} ;

I'm waiting to see more of these patterns before I alter the behavior  
or add a shorthand.  That case is obvious but what about:

a : b c ;

now what to return?  The "cat"?

Ter

On Mar 25, 2008, at 6:01 AM, Grzegorz Cieslewski wrote:

> I am in the similar situation.  In my grammar I have about 100 rules
> like that.  I have saved some time by defining all templates in
> separate file and creating template  simple(a)::="<a>" and then
> invoking it multiple times whenever I have a "dumb" rule.  If any one
> knows a better way of doing this I am all ears.
>
> Greg
>
> On Wed, Mar 19, 2008 at 10:28 AM, Philippe Faes  
> <ph_reader at faes.net> wrote:
>> Dear ANTLR-gang,
>>
>> I'm writing an ANTLR stringtemplate generator, which translates a  
>> tree to a
>> string template. My grammar has many rules like this:
>> a : b | c;
>> The generation rule that I want for these rules looks something like:
>>  a: b -> template(b={$b.st}) "<b>"
>>   | c -> template(c={$c.st}) "<c>";
>> In fact the stringtemplate just repeats whatever the underlying  
>> rule would
>> return as stringtemplate.
>> These rules have very little extra value, but they require a lot  
>> of typing,
>> and decrease the general readability of the grammar.
>>  I was hoping to find a way of setting this "braindead"  
>> stringtemplate rule
>> as a default. Is there any way somebody can save me a lot of time  
>> typing
>> these rules?
>>
>> kind regards
>> Philippe
>>
>>
>
>
>
> -- 
> =====================================================
> Grzegorz Cieslewski
> Research Assistant
> High-performance Computing & Simulation (HCS) Research Laboratory
> University of Florida, Dept. of Electrical and Computer Engineering
> 330 Benton Hall, Gainesville, FL, 32611-6200
> Phone: (352) 392-9041
> Email: cieslewski at hcs.ufl.edu
> Web: www.hcs.ufl.edu
> =====================================================


From cieslewski at hcs.ufl.edu  Tue Mar 25 10:14:18 2008
From: cieslewski at hcs.ufl.edu (Grzegorz Cieslewski)
Date: Tue, 25 Mar 2008 13:14:18 -0400
Subject: [antlr-interest] template generation for dumb rules
In-Reply-To: <086A8CB1-289E-4C8B-90AF-3A70A2F75283@cs.usfca.edu>
References: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>
	<7aa837f80803250601g1d6105e5v9cb4f78d4e6dbe0c@mail.gmail.com>
	<086A8CB1-289E-4C8B-90AF-3A70A2F75283@cs.usfca.edu>
Message-ID: <7aa837f80803251014i3a2c58f1qb091670461dee022@mail.gmail.com>

I think that the concatenating two templates would be an optimal
solution.  I have many rules that consist of 2 or more sub-rules.  If
the user does not like the default rule he can overwrite it with his
own,  which in my opinion is better than adding many simple templates
just to get a token to print that is nested 20 rules down.  Also, this
would make it similar in behavior to the AST rewriting approach where
you don't have to specify a rewrite rule to get a tree back.

Since that would change the default behavior of the ANTLR, I think
that adding another option like "use_default_template=true" or
something would make life easier.

Just my 2 cents,

Greg

On Tue, Mar 25, 2008 at 10:59 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> try
>
>  a : b -> {$b.st} | c -> {$c.st} ;
>
>  I'm waiting to see more of these patterns before I alter the behavior
>  or add a shorthand.  That case is obvious but what about:
>
>  a : b c ;
>
>  now what to return?  The "cat"?
>
>  Ter
>
>
>
>  On Mar 25, 2008, at 6:01 AM, Grzegorz Cieslewski wrote:
>
>  > I am in the similar situation.  In my grammar I have about 100 rules
>  > like that.  I have saved some time by defining all templates in
>  > separate file and creating template  simple(a)::="<a>" and then
>  > invoking it multiple times whenever I have a "dumb" rule.  If any one
>  > knows a better way of doing this I am all ears.
>  >
>  > Greg
>  >
>  > On Wed, Mar 19, 2008 at 10:28 AM, Philippe Faes
>  > <ph_reader at faes.net> wrote:
>  >> Dear ANTLR-gang,
>  >>
>  >> I'm writing an ANTLR stringtemplate generator, which translates a
>  >> tree to a
>  >> string template. My grammar has many rules like this:
>  >> a : b | c;
>  >> The generation rule that I want for these rules looks something like:
>  >>  a: b -> template(b={$b.st}) "<b>"
>  >>   | c -> template(c={$c.st}) "<c>";
>  >> In fact the stringtemplate just repeats whatever the underlying
>  >> rule would
>  >> return as stringtemplate.
>  >> These rules have very little extra value, but they require a lot
>  >> of typing,
>  >> and decrease the general readability of the grammar.
>  >>  I was hoping to find a way of setting this "braindead"
>  >> stringtemplate rule
>  >> as a default. Is there any way somebody can save me a lot of time
>  >> typing
>  >> these rules?
>  >>
>  >> kind regards
>  >> Philippe
>  >>
>  >>
>  >
>  >
>  >
>  > --
>  > =====================================================
>  > Grzegorz Cieslewski
>  > Research Assistant
>  > High-performance Computing & Simulation (HCS) Research Laboratory
>  > University of Florida, Dept. of Electrical and Computer Engineering
>  > 330 Benton Hall, Gainesville, FL, 32611-6200
>  > Phone: (352) 392-9041
>  > Email: cieslewski at hcs.ufl.edu
>  > Web: www.hcs.ufl.edu
>  > =====================================================
>
>



-- 
=====================================================
Grzegorz Cieslewski
Research Assistant
High-performance Computing & Simulation (HCS) Research Laboratory
University of Florida, Dept. of Electrical and Computer Engineering
330 Benton Hall, Gainesville, FL, 32611-6200
Phone: (352) 392-9041
Email: cieslewski at hcs.ufl.edu
Web: www.hcs.ufl.edu
=====================================================

From parrt at cs.usfca.edu  Tue Mar 25 12:07:48 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 12:07:48 -0700
Subject: [antlr-interest] template generation for dumb rules
In-Reply-To: <7aa837f80803251014i3a2c58f1qb091670461dee022@mail.gmail.com>
References: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>
	<7aa837f80803250601g1d6105e5v9cb4f78d4e6dbe0c@mail.gmail.com>
	<086A8CB1-289E-4C8B-90AF-3A70A2F75283@cs.usfca.edu>
	<7aa837f80803251014i3a2c58f1qb091670461dee022@mail.gmail.com>
Message-ID: <1D4B3CE8-55D1-4802-9FAC-8C3F7CAECC52@cs.usfca.edu>


On Mar 25, 2008, at 10:14 AM, Grzegorz Cieslewski wrote:
> I think that the concatenating two templates would be an optimal
> solution.  I have many rules that consist of 2 or more sub-rules.  If
> the user does not like the default rule he can overwrite it with his
> own,  which in my opinion is better than adding many simple templates
> just to get a token to print that is nested 20 rules down. Also, this
> would make it similar in behavior to the AST rewriting approach where
> you don't have to specify a rewrite rule to get a tree back.

Agreed...but what about

d : id (',' id) ';' ;

what should i produce here? In other words, when do I stop doing the  
default behavior and force you to say how it works?  Do i even put in  
the literals into the result template?  Maybe.

> Since that would change the default behavior of the ANTLR, I think
> that adding another option like "use_default_template=true" or
> something would make life easier.

Well, I'll probably just add the default behavior...now they would get  
nthing so adding it would be ok, i just don't really know what answer  
is yet.  I suppose cat'ing each element with <stuff> template would be  
ok.

Ter

From antlr at mirality.co.nz  Tue Mar 25 12:26:20 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 26 Mar 2008 08:26:20 +1300
Subject: [antlr-interest] template generation for dumb rules
In-Reply-To: <1D4B3CE8-55D1-4802-9FAC-8C3F7CAECC52@cs.usfca.edu>
References: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>
	<7aa837f80803250601g1d6105e5v9cb4f78d4e6dbe0c@mail.gmail.com>
	<086A8CB1-289E-4C8B-90AF-3A70A2F75283@cs.usfca.edu>
	<7aa837f80803251014i3a2c58f1qb091670461dee022@mail.gmail.com>
	<1D4B3CE8-55D1-4802-9FAC-8C3F7CAECC52@cs.usfca.edu>
Message-ID: <20080325192640.900FD2F4314@www.antlr.org>

At 08:07 26/03/2008, Terence Parr wrote:
 >Agreed...but what about
 >
 >d : id (',' id) ';' ;
 >
 >what should i produce here? In other words, when do I stop doing 

 >the default behavior and force you to say how it works?  Do i
 >even put in the literals into the result template?  Maybe.

By default, probably yes, that's the most sensible thing to 
do.  If they don't want the literals in the output, then they can 
specify the template they want instead.

In fact, by doing this you're basically saying that the default 
output of a template-output ANTLR parser will be the same as its 
input; and that will probably help the people who are trying to do 
fairly minimal rewrites (and those doing more extensive rewrites 
are probably outputting to AST anyway).

Then again, you should probably only take what I say with a grain 
of salt, since I've mostly only done "toy" projects with ANTLR at 
this point.


From parrt at cs.usfca.edu  Tue Mar 25 12:38:23 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 12:38:23 -0700
Subject: [antlr-interest] template generation for dumb rules
In-Reply-To: <20080325192640.900FD2F4314@www.antlr.org>
References: <b4f9f36e0803190728n5070cd0bj14bb39a60f2d2883@mail.gmail.com>
	<7aa837f80803250601g1d6105e5v9cb4f78d4e6dbe0c@mail.gmail.com>
	<086A8CB1-289E-4C8B-90AF-3A70A2F75283@cs.usfca.edu>
	<7aa837f80803251014i3a2c58f1qb091670461dee022@mail.gmail.com>
	<1D4B3CE8-55D1-4802-9FAC-8C3F7CAECC52@cs.usfca.edu>
	<20080325192640.900FD2F4314@www.antlr.org>
Message-ID: <383105DE-CBCF-4E75-AF36-D3225C5F0FDE@cs.usfca.edu>


On Mar 25, 2008, at 12:26 PM, Gavin Lambert wrote:
> At 08:07 26/03/2008, Terence Parr wrote:
> >Agreed...but what about
> >
> >d : id (',' id) ';' ;
> >
> >what should i produce here? In other words, when do I stop doing
> >the default behavior and force you to say how it works?  Do i
> >even put in the literals into the result template?  Maybe.
>
> By default, probably yes, that's the most sensible thing to do.  If  
> they don't want the literals in the output, then they can specify  
> the template they want instead.
>
> In fact, by doing this you're basically saying that the default  
> output of a template-output ANTLR parser will be the same as its  
> input; and that will probably help the people who are trying to do  
> fairly minimal rewrites (and those doing more extensive rewrites are  
> probably outputting to AST anyway).

yeah, was starting to wonder that as i wrote my last reply ;)   
symmetry is good ;)

> Then again, you should probably only take what I say with a grain of  
> salt, since I've mostly only done "toy" projects with ANTLR at this  
> point.

Well, i wanted to wait on this func. until i had some  
experience...nothing in my exp. so far indicates copying in->out would  
be an issue. Hmm...

Ter


From parrt at cs.usfca.edu  Tue Mar 25 12:56:45 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 12:56:45 -0700
Subject: [antlr-interest] ANTLR tree construction problem
In-Reply-To: <A2C7DD4B3F904EDAB3D4020AB0E664D0@pc2008>
References: <A2C7DD4B3F904EDAB3D4020AB0E664D0@pc2008>
Message-ID: <A4FEDF15-EEE7-4A3F-B67E-482565A05832@cs.usfca.edu>

Hi Ken...i just verified that this works in latest.

                     // Ken.g:3:8: modifier= ( 'protected' | 'public'  
| 'private' | 'fragment' )
                     {
                     modifier=(Token)input.LT(1); //  
#######################
                     if ( (input.LA(1)>=5 && input.LA(1)<=8) ) {
                         input.consume();
                         adaptor.addChild(root_0,  
(Object)adaptor.create(modifier

Ter

On Mar 10, 2008, at 7:46 PM, Kenneth Domino wrote:
> Hi,
>
> I'm working with the example grammar ANTLRv3.g
> (http://fisheye2.cenqua.com/browse/antlr-examples/java/ANTLR/ANTLRv3.g?r=4288 
> )
> and it looks like either the label handling in the generated parser is
> not correct.  This seems to be exposed with modifiers (e.g.,
> "fragment"), where the code uses the label "modifier" for a Token from
> a set of string literals in the grammar.  The code in question is:
>
> rule
> scope {
> String name;
> }
> : DOC_COMMENT?
> ( modifier=('protected'|'public'|'private'|'fragment') )?
> id {$rule::name = $id.text;}
> '!'?
> ( arg=ARG_ACTION )?
> ( 'returns' rt=ARG_ACTION  )?
> throwsSpec? optionsSpec? ruleScopeSpec? ruleAction*
> ':' altList ';'
> exceptionGroup?
>    -> ^( RULE id {modifier!=null?adaptor.create(modifier):null} ^(ARG
> $arg)? ^(RET $rt)?
>       optionsSpec? ruleScopeSpec? ruleAction*
>       altList
>       exceptionGroup?
>       EOR["EOR"]
>     )
> ;
>
> I think the rule is ok.  The problem seems to be in the code generated
> for the expression:
>
> "(modifier=('protected'|'public'|'private'|'fragment') )?"
>
> There is no code emitted to set label "modifier", which is used later
> on for tree construction.  As a result, modifier in the generated code
> below is always null, and addChild() always receives null:
>
> "adaptor.addChild(root_1, modifier!=null? 
> adaptor.create(modifier):null);".
>
> (That code was generated for
> "{modifier!=null?adaptor.create(modifier):null}" in the grammar, and
> seems fine.)
>
> Other instances of labels (e.g., "g='grammar'...") seem to work fine.
>
> You can use ANTLRWorks1.1.7 to verify the problem.  I'm not sure what
> happens when addChild() tries to insert a null child, but ANTLRWorks
> does not display anything for the modifier.  Nor does the example tree
> parsing grammar recognize anything. I also checked this against the
> 2-27-2008 build, and it is still a problem.  Fortunately, I have a
> work around that is trivial.
>
> Ken Domino
>


From cieslewski at hcs.ufl.edu  Tue Mar 25 12:59:37 2008
From: cieslewski at hcs.ufl.edu (Grzegorz Cieslewski)
Date: Tue, 25 Mar 2008 15:59:37 -0400
Subject: [antlr-interest] Duplicating CommonTree objects
Message-ID: <7aa837f80803251259j6cd268f9q2643137763c2d601@mail.gmail.com>

All,

How do I make a copy of the Tree (Common Tree) in ANTLR, that will
create duplicate including the underlying tokens?

Greg

P.S. I am sorry if this is a silly question but I do not code in Java often.

-- 
=====================================================
Grzegorz Cieslewski
Research Assistant
High-performance Computing & Simulation (HCS) Research Laboratory
University of Florida, Dept. of Electrical and Computer Engineering
330 Benton Hall, Gainesville, FL, 32611-6200
Phone: (352) 392-9041
Email: cieslewski at hcs.ufl.edu
Web: www.hcs.ufl.edu
=====================================================

From parrt at cs.usfca.edu  Tue Mar 25 13:32:16 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 13:32:16 -0700
Subject: [antlr-interest] Duplicating CommonTree objects
In-Reply-To: <7aa837f80803251259j6cd268f9q2643137763c2d601@mail.gmail.com>
References: <7aa837f80803251259j6cd268f9q2643137763c2d601@mail.gmail.com>
Message-ID: <F1FF6C2D-6B3E-4AE9-AD7D-CE1F53C04D5E@cs.usfca.edu>


On Mar 25, 2008, at 12:59 PM, Grzegorz Cieslewski wrote:
> All,
>
> How do I make a copy of the Tree (Common Tree) in ANTLR, that will
> create duplicate including the underlying tokens?

There is a dupTree method but it won't copy the Token objects, just  
pointers... you can override though.
Ter

From jqwoods at gmail.com  Tue Mar 25 13:29:42 2008
From: jqwoods at gmail.com (John Woods)
Date: Tue, 25 Mar 2008 13:29:42 -0700
Subject: [antlr-interest] Ruby target question
Message-ID: <47E960B6.6070704@gmail.com>

I'm having trouble structuring my ANTLR generated ruby code into a 
sub-directory of my project. I'm not sure if this is a problem with my 
grammar file, or with the way I'm invoking the ANTLR tool, or with the 
way I'm invoking the Ruby interpreter. Any pointers would be appreciated.

I would like to locate my grammar file under a subdir named "parser":

   $ cat ./parser/MyGrammar.rb

   grammar MyGrammar;
   options {
       language = Ruby;
   }
   my_rule: MY_TOKEN+ ;
   MY_TOKEN: ('a'..'z'|'A'..'Z')+ ;
   WHITESPACE: (' '|'\t'|'\r'|'\n') { skip(); };

Running ANTLR generates the expected files just fine:

   $ ls ./parser/*

   ./parser/MyGrammar__.g
   ./parser/MyGrammar.g
   ./parser/MyGrammarLexer.rb
   ./parser/MyGrammarParser.rb
   ./parser/MyGrammar.tokens

In my ./Main.rb file I want to require both the parser and lexer code:

   $ cat ./Main.rb

   #!/usr/bin/ruby -w
   require 'parser/MyGrammarLexer'
   require 'parser/MyGrammarParser'

The problem is that ./parser/MyGrammarParser.rb contains the following line:

   require 'MyGrammarLexer'

Ruby fails to find MyGrammarLexer.rb when executing from another 
directory. It works fine if I edit ./parser/MyGrammarParser.rb, changing 
the above line to:

   require 'parser/MyGrammarLexer'

But obviously editing generated code is a no-no.

Any suggestions?

From lgcraymer at yahoo.com  Tue Mar 25 13:39:45 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Tue, 25 Mar 2008 13:39:45 -0700 (PDT)
Subject: [antlr-interest] template generation for dumb rules
Message-ID: <82593.41449.qm@web55904.mail.re3.yahoo.com>

How about just returning an argument list?  The typical use of  "don't know" items is to pass them as a list argument to a higher level template where they might be invoked in a template as <args; separator = " "> to process them en masse.  Textual concatenation here is often premature.

--Loring

----- Original Message ----
From: Terence Parr <parrt at cs.usfca.edu>
To: Grzegorz Cieslewski <cieslewski at hcs.ufl.edu>
Cc: antlr-interest at antlr.org
Sent: Tuesday, March 25, 2008 12:07:48 PM
Subject: Re: [antlr-interest] template generation for dumb rules


On Mar 25, 2008, at 10:14 AM, Grzegorz Cieslewski wrote:
> I think that the concatenating two templates would be an optimal
> solution.  I have many rules that consist of 2 or more sub-rules.  If
> the user does not like the default rule he can overwrite it with his
> own,  which in my opinion is better than adding many simple templates
> just to get a token to print that is nested 20 rules down. Also, this
> would make it similar in behavior to the AST rewriting approach where
> you don't have to specify a rewrite rule to get a tree back.

Agreed...but what about

d : id (',' id) ';' ;

what should i produce here? In other words, when do I stop doing the  
default behavior and force you to say how it works?  Do i even put in  
the literals into the result template?  Maybe.

> Since that would change the default behavior of the ANTLR, I think
> that adding another option like "use_default_template=true" or
> something would make life easier.

Well, I'll probably just add the default behavior...now they would get  
nthing so adding it would be ok, i just don't really know what answer  
is yet.  I suppose cat'ing each element with <stuff> template would be  
ok.

Ter






      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080325/17438420/attachment.html 

From jqwoods at gmail.com  Tue Mar 25 13:44:00 2008
From: jqwoods at gmail.com (John Woods)
Date: Tue, 25 Mar 2008 13:44:00 -0700
Subject: [antlr-interest] Ruby target question
In-Reply-To: <47E960B6.6070704@gmail.com>
References: <47E960B6.6070704@gmail.com>
Message-ID: <47E96410.8040405@gmail.com>


One solution that I found is to add the parser sub-dir to the load path 
before calling require

   $ cat ./Main.rb

   #!/usr/bin/ruby -w
   $: << './parser'
   require 'parser/MyGrammarLexer'
   require 'parser/MyGrammarParser'

That seems to work fine. But I'm still wondering if there's some fix to 
the grammar file that will generate the desired require statement in the 
ANTLR output.


-----Original Message-----
From: John Woods
Sent: 03/25/2008 01:29 PM
> I'm having trouble structuring my ANTLR generated ruby code into a 
> sub-directory of my project. I'm not sure if this is a problem with my 
> grammar file, or with the way I'm invoking the ANTLR tool, or with the 
> way I'm invoking the Ruby interpreter. Any pointers would be appreciated.
> 
> I would like to locate my grammar file under a subdir named "parser":
> 
>   $ cat ./parser/MyGrammar.rb
> 
>   grammar MyGrammar;
>   options {
>       language = Ruby;
>   }
>   my_rule: MY_TOKEN+ ;
>   MY_TOKEN: ('a'..'z'|'A'..'Z')+ ;
>   WHITESPACE: (' '|'\t'|'\r'|'\n') { skip(); };
> 
> Running ANTLR generates the expected files just fine:
> 
>   $ ls ./parser/*
> 
>   ./parser/MyGrammar__.g
>   ./parser/MyGrammar.g
>   ./parser/MyGrammarLexer.rb
>   ./parser/MyGrammarParser.rb
>   ./parser/MyGrammar.tokens
> 
> In my ./Main.rb file I want to require both the parser and lexer code:
> 
>   $ cat ./Main.rb
> 
>   #!/usr/bin/ruby -w
>   require 'parser/MyGrammarLexer'
>   require 'parser/MyGrammarParser'
> 
> The problem is that ./parser/MyGrammarParser.rb contains the following 
> line:
> 
>   require 'MyGrammarLexer'
> 
> Ruby fails to find MyGrammarLexer.rb when executing from another 
> directory. It works fine if I edit ./parser/MyGrammarParser.rb, changing 
> the above line to:
> 
>   require 'parser/MyGrammarLexer'
> 
> But obviously editing generated code is a no-no.
> 
> Any suggestions?
> 


From parrt at cs.usfca.edu  Tue Mar 25 14:13:38 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Mar 2008 14:13:38 -0700
Subject: [antlr-interest] template generation for dumb rules
In-Reply-To: <82593.41449.qm@web55904.mail.re3.yahoo.com>
References: <82593.41449.qm@web55904.mail.re3.yahoo.com>
Message-ID: <2371B081-98E3-4C81-8E40-BDE05E3A5D1A@cs.usfca.edu>


On Mar 25, 2008, at 1:39 PM, Loring Craymer wrote:

> How about just returning an argument list?  The typical use of   
> "don't know" items is to pass them as a list argument to a higher  
> level template where they might be invoked in a template as <args;  
> separator = " "> to process them en masse.  Textual concatenation  
> here is often premature.

very much so.  <stuff> would not evaluate elements of stuff.  all lazy  
eval. :)
Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080325/996006e3/attachment.html 

From m_mayur at hotmail.com  Tue Mar 25 22:49:43 2008
From: m_mayur at hotmail.com (Mayur M)
Date: Wed, 26 Mar 2008 11:19:43 +0530
Subject: [antlr-interest] Grammer for MIF file format.
Message-ID: <BLU117-W4101FAFD170165853D9708FFF0@phx.gbl>

Hi,  Has anyone tried writing Grammar for Adobe MIF file format. The file format looks to be to complex. Can anyone share, if they have some existing sample Grammar for MIF file format. Thanks in advance,  Mayur M
_________________________________________________________________
Education: Are exams worrying you all the day long? Write to MSN education experts for help.
http://education.in.msn.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080326/29a5eb1b/attachment.html 

From alexander at gaengel.de  Wed Mar 26 01:29:19 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Wed, 26 Mar 2008 09:29:19 +0100
Subject: [antlr-interest] Stop Astwalker
Message-ID: <47EA095F.1050601@gaengel.de>

I use a TreeGrammar and would like to stop on some Special occasion to 
further walk the tree.

is there some easy way to stop the parsing?

Alexander



From nelson.ana at gmail.com  Wed Mar 26 02:32:34 2008
From: nelson.ana at gmail.com (Ana Nelson)
Date: Wed, 26 Mar 2008 09:32:34 +0000
Subject: [antlr-interest] Ruby target question
In-Reply-To: <47E96410.8040405@gmail.com>
References: <47E960B6.6070704@gmail.com> <47E96410.8040405@gmail.com>
Message-ID: <a7d6d2740803260232k6b960ccdo9ae3c928e4b187c6@mail.gmail.com>

Hi, John,

I looked at the source, which is in
src/org/antlr/codegen/templates/Ruby/Ruby.stg, and the require statement is
generated by:

require '<grammar.name>Lexer'

so it's hard-coded.

Modifying the load path seems like the better approach to me, but if you
wanted to store ALL your parsers in a parser/ directory then you could edit
the template.

-Ana



On 25/03/2008, John Woods <jqwoods at gmail.com> wrote:
>
>
> One solution that I found is to add the parser sub-dir to the load path
> before calling require
>
>
>    $ cat ./Main.rb
>
>    #!/usr/bin/ruby -w
>
>    $: << './parser'
>
>    require 'parser/MyGrammarLexer'
>    require 'parser/MyGrammarParser'
>
>
> That seems to work fine. But I'm still wondering if there's some fix to
> the grammar file that will generate the desired require statement in the
> ANTLR output.
>
>
>
> -----Original Message-----
> From: John Woods
> Sent: 03/25/2008 01:29 PM
> > I'm having trouble structuring my ANTLR generated ruby code into a
> > sub-directory of my project. I'm not sure if this is a problem with my
> > grammar file, or with the way I'm invoking the ANTLR tool, or with the
> > way I'm invoking the Ruby interpreter. Any pointers would be
> appreciated.
> >
> > I would like to locate my grammar file under a subdir named "parser":
> >
> >   $ cat ./parser/MyGrammar.rb
> >
> >   grammar MyGrammar;
> >   options {
> >       language = Ruby;
> >   }
> >   my_rule: MY_TOKEN+ ;
> >   MY_TOKEN: ('a'..'z'|'A'..'Z')+ ;
> >   WHITESPACE: (' '|'\t'|'\r'|'\n') { skip(); };
> >
> > Running ANTLR generates the expected files just fine:
> >
> >   $ ls ./parser/*
> >
> >   ./parser/MyGrammar__.g
> >   ./parser/MyGrammar.g
> >   ./parser/MyGrammarLexer.rb
> >   ./parser/MyGrammarParser.rb
> >   ./parser/MyGrammar.tokens
> >
> > In my ./Main.rb file I want to require both the parser and lexer code:
> >
> >   $ cat ./Main.rb
> >
> >   #!/usr/bin/ruby -w
> >   require 'parser/MyGrammarLexer'
> >   require 'parser/MyGrammarParser'
> >
> > The problem is that ./parser/MyGrammarParser.rb contains the following
> > line:
> >
> >   require 'MyGrammarLexer'
> >
> > Ruby fails to find MyGrammarLexer.rb when executing from another
> > directory. It works fine if I edit ./parser/MyGrammarParser.rb, changing
> > the above line to:
> >
> >   require 'parser/MyGrammarLexer'
> >
> > But obviously editing generated code is a no-no.
> >
> > Any suggestions?
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080326/3814db52/attachment.html 

From parrt at cs.usfca.edu  Wed Mar 26 12:11:13 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 26 Mar 2008 12:11:13 -0700
Subject: [antlr-interest] Stop Astwalker
In-Reply-To: <47EA095F.1050601@gaengel.de>
References: <47EA095F.1050601@gaengel.de>
Message-ID: <65E6A854-4556-445B-80D6-34002C3282A4@cs.usfca.edu>

throw an exception not under RecognitionException in class hier.
Terence
On Mar 26, 2008, at 1:29 AM, Alexander G?ngel wrote:
> I use a TreeGrammar and would like to stop on some Special occasion  
> to further walk the tree.
>
> is there some easy way to stop the parsing?
>
> Alexander
>
>


From mail at ghost23.de  Wed Mar 26 12:56:35 2008
From: mail at ghost23.de (Sven Busse)
Date: Wed, 26 Mar 2008 20:56:35 +0100
Subject: [antlr-interest] Recognizing Indentation as blocks
In-Reply-To: <001001c88d9d$a0361560$9231fea9@Werkbank>
References: <001001c88d9d$a0361560$9231fea9@Werkbank>
Message-ID: <001f01c88f7b$7f72abb0$9231fea9@Werkbank>

uhm, has anybody an idea?

thanks
Sven

----------

Von: Sven Busse [mailto:mail at ghost23.de] 
Gesendet: Montag, 24. M?rz 2008 11:56
An: antlr-interest at antlr.org
Betreff: [antlr-interest] Recognizing Indentation as blocks

Hi,

i am currently reading Terrence's book. I am currently at the chapter
"Emitting more than one token per Lexer rule". He gives an example from
python:

if foo:
	print "foo is true"
	f()
g()

He then discusses an exemplary INDENT lexer rule, which i am trying to
understand.

His INDENT rule aims to match Whitespace and Tabs if they start at the
beginning of the line. If the indentation is bigger than in a previous line,
an imaginary INDENT token is emitted. If it is smaller than in the previous
line, one or multiple DEDENT token are emitted.

Now my question is, would this actually work with an example like the little
python script? Because the line with "g()" has actually no whitespace at
all, so i would assume there would be no match and thus the logic of
emitting DEDENT would not even be invoked.

Is this correct or am i missing something? I am referring to the book "The
defintive ANTRL Reference", page 95.

Thank you
Sven




From ahmedh at horizonssoftware.com  Wed Mar 26 12:25:45 2008
From: ahmedh at horizonssoftware.com (Ahmed Hamouda)
Date: Wed, 26 Mar 2008 21:25:45 +0200
Subject: [antlr-interest] How to use arabic letters in my tokens ?
Message-ID: <2E91F09A8F13BE4BACAA46759CA49915500881@hs-srv-01.horizonssoftware.com>

Hi all,

I want to define a tokens as all possible letters that user can use

These letters contain Arabic letters.

I tried to add them by hand as the following ??? | ??? | ????. and so, on but I received an error in the generation

I also tried to use these alternatives

 

| '\u00c2' | '\u00c3' | '\u00c4' | '\u00c5' | '\u00c6' | '\u00c7' | '\u00c8' | '\u00c9'

                                | '\u00c0' | '\u00ca' | '\u00cb' | '\u00cc' | '\u00cd' | '\u00ce' | '\u00cf'

                                | '\u00d0' | '\u00d1' | '\u00d2' | '\u00d3' | '\u00d4' | '\u00d5' | '\u00d6' | '\u00d7'

                                | '\u00d8' | '\u00d9' | '\u00da' | '\u00db' | '\u00dc' | '\u00dd' | '\u00de' | '\u00df'

                                

                                | '\u0080' | '\u0081' | '\u0082' | '\u0083' | '\u0084' | '\u0085' | '\u0086' | '\u0087'

                                | '\u0088' | '\u0089' | '\u008a' | '\u008b' | '\u008c' | '\u008d' | '\u008e' | '\u008f'

                                | '\u0090' | '\u0091' | '\u0092' | '\u0093' | '\u0094' | '\u0095' | '\u0096' | '\u0097'

                                | '\u0098' | '\u0099' | '\u009a' | '\u009b' | '\u009c' | '\u009d' | '\u009e' | '\u009f'

                                | '\u00a0' | '\u00a1' | '\u00a2' | '\u00a3' | '\u00a4' | '\u00a5' | '\u00a6' | '\u00a7'

                                | '\u00a8' | '\u00a9' | '\u00aa' | '\u00ab' | '\u00ac' | '\u00ad' | '\u00ae' | '\u00af'

                                | '\u00b0' | '\u00b1' | '\u00b2' | '\u00b3' | '\u00b4' | '\u00b5' | '\u00b6' | '\u00b7'

                                | '\u00b8' | '\u00b9' | '\u00ba' | '\u00bb' | '\u00bc' | '\u00bd' | '\u00be' | '\u00bf'

But still not accept Arabic characters

 

If any1 has an idea, he will appreciated

Thank you

 

Best Regards

 

Ahmed Hamouda (MCTS)

Software Engineer

Horizons Software

Address: 93 Haroun Al Rasheed Street, Heliopolis, Cairo, Egypt. 11351. 

Tel:         +202-2644-3709

Mobile:    +2010-33-55-879

Fax:        +202-2632-0661

Website:   www.horizonssoftware.com <http://www.horizonssoftware.com/> 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080326/b471e81e/attachment.html 

From troy.daniels at baesystems.com  Wed Mar 26 13:21:02 2008
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Wed, 26 Mar 2008 16:21:02 -0400
Subject: [antlr-interest] Recognizing Indentation as blocks
References: <001001c88d9d$a0361560$9231fea9@Werkbank>
	<001f01c88f7b$7f72abb0$9231fea9@Werkbank>
Message-ID: <40CBD611A793EA438464B91E749DD8B003E7E2EE@blums0017.alphatech.com>

Not having the book, I can't look at the grammar.  But I'd guess you'd want something like:

CHANGE_INDENTATION:  EOL ws+=WHITE_SPACE*
  {
     if (sizeOf(ws) > previousWhiteSpace)
       emit(INDENT); 
     else if (sizeOf(ws) < previousWhiteSpace) 
       emit(DEDENT);
     previousWhiteSpace = sizeOf(ws);
  }
     
Basically, when you find the end of line character, you want to look at the whitespace after it, and emit the appropriate token if it's changed.  Since WHITE_SPACE has a * after it, this matches even when there is no white space.  Since it starts with an EOL, you don't need to worry about false triggers in the middle of a line like just WHITE_SPACE* would.

I'm not familiar with the API for emitting tokens, so the details of the above code are almost certainly wrong, but the general concept should be right.

Troy

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Sven Busse
> Sent: Wednesday, March 26, 2008 3:57 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Recognizing Indentation as blocks
> 
> uhm, has anybody an idea?
> 
> thanks
> Sven
> 
> ----------
> 
> Von: Sven Busse [mailto:mail at ghost23.de]
> Gesendet: Montag, 24. M?rz 2008 11:56
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Recognizing Indentation as blocks
> 
> Hi,
> 
> i am currently reading Terrence's book. I am currently at the 
> chapter "Emitting more than one token per Lexer rule". He 
> gives an example from
> python:
> 
> if foo:
> 	print "foo is true"
> 	f()
> g()
> 
> He then discusses an exemplary INDENT lexer rule, which i am 
> trying to understand.
> 
> His INDENT rule aims to match Whitespace and Tabs if they 
> start at the beginning of the line. If the indentation is 
> bigger than in a previous line, an imaginary INDENT token is 
> emitted. If it is smaller than in the previous line, one or 
> multiple DEDENT token are emitted.
> 
> Now my question is, would this actually work with an example 
> like the little python script? Because the line with "g()" 
> has actually no whitespace at all, so i would assume there 
> would be no match and thus the logic of emitting DEDENT would 
> not even be invoked.
> 
> Is this correct or am i missing something? I am referring to 
> the book "The defintive ANTRL Reference", page 95.
> 
> Thank you
> Sven
> 
> 
> 
> 

From antlr at mirality.co.nz  Wed Mar 26 13:38:16 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 27 Mar 2008 09:38:16 +1300
Subject: [antlr-interest] How to use arabic letters in my tokens ?
In-Reply-To: <2E91F09A8F13BE4BACAA46759CA49915500881@hs-srv-01.horizonss
	oftware.com>
References: <2E91F09A8F13BE4BACAA46759CA49915500881@hs-srv-01.horizonssoftware.com>
Message-ID: <20080326203829.74D1B11ECA1@www.antlr.org>

At 08:25 27/03/2008, Ahmed Hamouda wrote:
>I want to define a tokens as all possible 
>letters that user can use
>These letters contain Arabic letters.
>I tried to add them by hand as the following ??? 
>| ??? | ???
. and so, on but I received an error in the generation

Firstly, those don't appear Arabic to me; just 
regular wider latin characters.  Secondly, you 
can't write Unicode characters directly in either 
ANTLRv2 or ANTLRv3 since ANTLRv2 doesn't support 
Unicode at all and ANTLRv3 still uses ANTLRv2 to 
parse the grammars themselves.  (ANTLRv3 grammars 
can recognise Unicode characters though.)

>I also tried to use these alternatives
>
>| '\u00c2' | '\u00c3' | '\u00c4' | '\u00c5' | 
>'\u00c6' | '\u00c7' | '\u00c8' | '\u00c9'
>                                 | '\u00c0' | 
> '\u00ca' | '\u00cb' | '\u00cc' | '\u00cd' |
[...]

First, when there's a contiguous range you can specify it like so:
   '\u00c0'..'\u00c7'

And again, those don't appear to be Arabic 
characters.  Run "charmap" and make sure you 
switch it to Unicode mode.  You're probably 
putting in the ANSI encodings from your Arabic codepage instead.


From ahmedh at horizonssoftware.com  Wed Mar 26 13:54:59 2008
From: ahmedh at horizonssoftware.com (Ahmed Hamouda)
Date: Wed, 26 Mar 2008 22:54:59 +0200
Subject: [antlr-interest] How to use arabic letters in my tokens ?
References: <2E91F09A8F13BE4BACAA46759CA49915500881@hs-srv-01.horizonssoftware.com>
	<HS-SRV-01LgE6fYsjQQ0000010b@hs-srv-01.horizonssoftware.com>
Message-ID: <2E91F09A8F13BE4BACAA46759CA49915500882@hs-srv-01.horizonssoftware.com>

Thank you for reply

>when there's a contiguous range you can specify it like so:
   '\u00c0'..'\u00c7'

When I use the range, I receive a compiler error in the generated code that states no definition for the method of "MatchRange"

>And again, those don't appear to be Arabic 
>characters.  Run "charmap" and make sure you 
>switch it to Unicode mode.  You're probably 
>putting in the ANSI encodings from your Arabic codepage instead.

Sorry, I don't know what is "charmap", please make me know how to get the table about the Unicode of chars ?
Thank you

Best Regards

Ahmed Hamouda (MCTS)
Software Engineer
Horizons Software
Address:?93 Haroun Al Rasheed Street, Heliopolis, Cairo, Egypt. 11351. 
Tel: ??????? +202-2644-3709
Mobile:?? ?+2010-33-55-879
Fax:????????+202-2632-0661
Website:?? www.horizonssoftware.com


-----Original Message-----
From: Gavin Lambert [mailto:antlr at mirality.co.nz] 
Sent: Wednesday, March 26, 2008 10:38 PM
To: Ahmed Hamouda; antlr-interest at antlr.org
Subject: Re: [antlr-interest] How to use arabic letters in my tokens ?

At 08:25 27/03/2008, Ahmed Hamouda wrote:
>I want to define a tokens as all possible 
>letters that user can use
>These letters contain Arabic letters.
>I tried to add them by hand as the following '?' 
>| '?' | '?'.... and so, on but I received an error in the generation

Firstly, those don't appear Arabic to me; just 
regular wider latin characters.  Secondly, you 
can't write Unicode characters directly in either 
ANTLRv2 or ANTLRv3 since ANTLRv2 doesn't support 
Unicode at all and ANTLRv3 still uses ANTLRv2 to 
parse the grammars themselves.  (ANTLRv3 grammars 
can recognise Unicode characters though.)

>I also tried to use these alternatives
>
>| '\u00c2' | '\u00c3' | '\u00c4' | '\u00c5' | 
>'\u00c6' | '\u00c7' | '\u00c8' | '\u00c9'
>                                 | '\u00c0' | 
> '\u00ca' | '\u00cb' | '\u00cc' | '\u00cd' |
[...]

First, when there's a contiguous range you can specify it like so:
   '\u00c0'..'\u00c7'

And again, those don't appear to be Arabic 
characters.  Run "charmap" and make sure you 
switch it to Unicode mode.  You're probably 
putting in the ANSI encodings from your Arabic codepage instead.


From ahmedh at horizonssoftware.com  Wed Mar 26 13:58:55 2008
From: ahmedh at horizonssoftware.com (Ahmed Hamouda)
Date: Wed, 26 Mar 2008 22:58:55 +0200
Subject: [antlr-interest] How to use arabic letters in my tokens ?
References: <2E91F09A8F13BE4BACAA46759CA49915500881@hs-srv-01.horizonssoftware.com>
	<HS-SRV-01LgE6fYsjQQ0000010b@hs-srv-01.horizonssoftware.com> 
Message-ID: <2E91F09A8F13BE4BACAA46759CA49915500883@hs-srv-01.horizonssoftware.com>

Sorry, I mean let me know how to get the table about the Ansi encodings of chars
FYI: I use Antlr3
Thank you again

Best Regards

Ahmed Hamouda (MCTS)
Software Engineer
Horizons Software
Address:?93 Haroun Al Rasheed Street, Heliopolis, Cairo, Egypt. 11351. 
Tel: ??????? +202-2644-3709
Mobile:?? ?+2010-33-55-879
Fax:????????+202-2632-0661
Website:?? www.horizonssoftware.com


-----Original Message-----
From: Ahmed Hamouda 
Sent: Wednesday, March 26, 2008 10:55 PM
To: 'Gavin Lambert'; antlr-interest at antlr.org
Subject: RE: [antlr-interest] How to use arabic letters in my tokens ?

Thank you for reply

>when there's a contiguous range you can specify it like so:
   '\u00c0'..'\u00c7'

When I use the range, I receive a compiler error in the generated code that states no definition for the method of "MatchRange"

>And again, those don't appear to be Arabic 
>characters.  Run "charmap" and make sure you 
>switch it to Unicode mode.  You're probably 
>putting in the ANSI encodings from your Arabic codepage instead.

Sorry, I don't know what is "charmap", please make me know how to get the table about the Unicode of chars ?
Thank you

Best Regards

Ahmed Hamouda (MCTS)
Software Engineer
Horizons Software
Address:?93 Haroun Al Rasheed Street, Heliopolis, Cairo, Egypt. 11351. 
Tel: ??????? +202-2644-3709
Mobile:?? ?+2010-33-55-879
Fax:????????+202-2632-0661
Website:?? www.horizonssoftware.com


-----Original Message-----
From: Gavin Lambert [mailto:antlr at mirality.co.nz] 
Sent: Wednesday, March 26, 2008 10:38 PM
To: Ahmed Hamouda; antlr-interest at antlr.org
Subject: Re: [antlr-interest] How to use arabic letters in my tokens ?

At 08:25 27/03/2008, Ahmed Hamouda wrote:
>I want to define a tokens as all possible 
>letters that user can use
>These letters contain Arabic letters.
>I tried to add them by hand as the following '?' 
>| '?' | '?'.... and so, on but I received an error in the generation

Firstly, those don't appear Arabic to me; just 
regular wider latin characters.  Secondly, you 
can't write Unicode characters directly in either 
ANTLRv2 or ANTLRv3 since ANTLRv2 doesn't support 
Unicode at all and ANTLRv3 still uses ANTLRv2 to 
parse the grammars themselves.  (ANTLRv3 grammars 
can recognise Unicode characters though.)

>I also tried to use these alternatives
>
>| '\u00c2' | '\u00c3' | '\u00c4' | '\u00c5' | 
>'\u00c6' | '\u00c7' | '\u00c8' | '\u00c9'
>                                 | '\u00c0' | 
> '\u00ca' | '\u00cb' | '\u00cc' | '\u00cd' |
[...]

First, when there's a contiguous range you can specify it like so:
   '\u00c0'..'\u00c7'

And again, those don't appear to be Arabic 
characters.  Run "charmap" and make sure you 
switch it to Unicode mode.  You're probably 
putting in the ANSI encodings from your Arabic codepage instead.


From antlr at shmuelhome.mine.nu  Wed Mar 26 14:09:36 2008
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Wed, 26 Mar 2008 23:09:36 +0200
Subject: [antlr-interest] How to use arabic letters in my tokens ?
In-Reply-To: <20080326203829.74D1B11ECA1@www.antlr.org>
References: <2E91F09A8F13BE4BACAA46759CA49915500881@hs-srv-01.horizonssoftware.com>
	<20080326203829.74D1B11ECA1@www.antlr.org>
Message-ID: <47EABB90.4080608@shmuelhome.mine.nu>

Gavin Lambert wrote:
> At 08:25 27/03/2008, Ahmed Hamouda wrote:
>> I want to define a tokens as all possible letters that user can use
>> These letters contain Arabic letters.
>> I tried to add them by hand as the following ??? | ??? | ????. and 
>> so, on but I received an error in the generation
>
> Firstly, those don't appear Arabic to me; just regular wider latin 
> characters. Secondly, you can't write Unicode characters directly in 
> either ANTLRv2 or ANTLRv3 since ANTLRv2 doesn't support Unicode at all 
> and ANTLRv3 still uses ANTLRv2 to parse the grammars themselves. 
> (ANTLRv3 grammars can recognise Unicode characters though.)
>
Interesting, the original appeared as Arabic on my computer (which is 
not a localized Arabic machine) so there is an encoding problem somewhere.

>> I also tried to use these alternatives
>>
>> | '\u00c2' | '\u00c3' | '\u00c4' | '\u00c5' | '\u00c6' | '\u00c7' | 
>> '\u00c8' | '\u00c9'
>> | '\u00c0' | '\u00ca' | '\u00cb' | '\u00cc' | '\u00cd' |
> [...]
>
> First, when there's a contiguous range you can specify it like so:
> '\u00c0'..'\u00c7'
>
> And again, those don't appear to be Arabic characters. Run "charmap" 
> and make sure you switch it to Unicode mode. You're probably putting 
> in the ANSI encodings from your Arabic codepage instead.
>

If you are using Antlr3 and Java you will need to use the Unicode Arabic 
code block which starts somewhere around '\u0600'.
The full table can be found here. http://unicode.org/charts/PDF/U0600.pdf


From lefevrol at yahoo.com  Wed Mar 26 14:38:39 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Wed, 26 Mar 2008 22:38:39 +0100
Subject: [antlr-interest] % in target code
Message-ID: <fsefp0$qpm$1@ger.gmane.org>

I was using % (residue operator in Java) in an action block and got:

    error(146): invalid StringTemplate % shorthand syntax: '%'

What gives?? Why does ANTLR even try to parse the code within an action 
block? It has no business to: target is target code.

-- O.L.


From jaluber at gmx.de  Wed Mar 26 14:58:30 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 26 Mar 2008 22:58:30 +0100
Subject: [antlr-interest] % in target code
In-Reply-To: <fsefp0$qpm$1@ger.gmane.org>
References: <fsefp0$qpm$1@ger.gmane.org>
Message-ID: <47EAC706.1040305@gmx.de>

Olivier Lefevre schrieb:
> I was using % (residue operator in Java) in an action block and got:
> 
>    error(146): invalid StringTemplate % shorthand syntax: '%'
> 
> What gives?? Why does ANTLR even try to parse the code within an action 
> block? It has no business to: target is target code.
> 
> -- O.L.
> 

Not true. ANTLR has to check at least for things like $a to be able to 
replace them with the correct value. '%' and '//' are probably 
considered as comments. I believe that this behaviour should be somehow 
customizable, because it is confusing to people from other languages.

Johannes

From parrt at cs.usfca.edu  Wed Mar 26 15:25:34 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 26 Mar 2008 15:25:34 -0700
Subject: [antlr-interest] % in target code
In-Reply-To: <fsefp0$qpm$1@ger.gmane.org>
References: <fsefp0$qpm$1@ger.gmane.org>
Message-ID: <02D53ECD-2371-4C97-AFE8-54676F49C85E@cs.usfca.edu>

Use \% as it's the ST operator.
Ter
On Mar 26, 2008, at 2:38 PM, Olivier Lefevre wrote:
> I was using % (residue operator in Java) in an action block and got:
>
>   error(146): invalid StringTemplate % shorthand syntax: '%'
>
> What gives?? Why does ANTLR even try to parse the code within an  
> action block? It has no business to: target is target code.
>
> -- O.L.
>


From lgcraymer at yahoo.com  Wed Mar 26 15:29:13 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 26 Mar 2008 15:29:13 -0700 (PDT)
Subject: [antlr-interest] % in target code
Message-ID: <205011.54206.qm@web55902.mail.re3.yahoo.com>

ANTLR 3 attributes are not first class (ANTLR) language elements, and attributes are effectively referenced only within actions ($ syntax) so that ANTLR effectively deals with a superset of the target language, not the target language itself.  Further, string templates may be instantiated in actions (% syntax).

This problem does not occur in ANTLR Yggdrasil, largely as a consequence of having first class attributes that are strongly typed.  I should have a release out within a month or two; I am currently in the middle of developing the tree grammar generator.

--Loring

----- Original Message ----
From: Olivier Lefevre <lefevrol at yahoo.com>
To: antlr-interest at antlr.org
Sent: Wednesday, March 26, 2008 2:38:39 PM
Subject: [antlr-interest] % in target code

I was using % (residue operator in Java) in an action block and got:

    error(146): invalid StringTemplate % shorthand syntax: '%'

What gives?? Why does ANTLR even try to parse the code within an action 
block? It has no business to: target is target code.

-- O.L.







      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080326/aae9b95b/attachment.html 

From lefevrol at yahoo.com  Wed Mar 26 16:04:20 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Thu, 27 Mar 2008 00:04:20 +0100
Subject: [antlr-interest] % in target code
In-Reply-To: <47EAC706.1040305@gmx.de>
References: <fsefp0$qpm$1@ger.gmane.org> <47EAC706.1040305@gmx.de>
Message-ID: <fsekpl$cvv$1@ger.gmane.org>

Yes, I spoke too fast; I hadn't thought of ST. \% works.

Thanks,

-- O.L.


From lefevrol at yahoo.com  Wed Mar 26 16:30:13 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Thu, 27 Mar 2008 00:30:13 +0100
Subject: [antlr-interest] % in target code
In-Reply-To: <fsefp0$qpm$1@ger.gmane.org>
References: <fsefp0$qpm$1@ger.gmane.org>
Message-ID: <fsema6$h88$1@ger.gmane.org>

It gets weirder, though. If I use % within an @lexer::members block instead 
of within an action block I get

     invalid StringTemplate % shorthand syntax: '%'

and I try to use \% instead then I get

     invalid StringTemplate % shorthand syntax: '%'
     invalid StringTemplate % shorthand syntax: '%'

Any idea?

-- O.L.


From parrt at cs.usfca.edu  Wed Mar 26 16:37:36 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 26 Mar 2008 16:37:36 -0700
Subject: [antlr-interest] % in target code
In-Reply-To: <fsema6$h88$1@ger.gmane.org>
References: <fsefp0$qpm$1@ger.gmane.org> <fsema6$h88$1@ger.gmane.org>
Message-ID: <F2ADB29C-22FA-4632-AEA7-422C73DDA637@cs.usfca.edu>


On Mar 26, 2008, at 4:30 PM, Olivier Lefevre wrote:
> It gets weirder, though. If I use % within an @lexer::members block  
> instead of within an action block I get
>
>    invalid StringTemplate % shorthand syntax: '%'
>
> and I try to use \% instead then I get
>
>    invalid StringTemplate % shorthand syntax: '%'
>    invalid StringTemplate % shorthand syntax: '%'
>
> Any idea?

freaky.  Hmm...i remember some of that stuff using a template and some  
using a string within a template in the output.  OH!  It's copying the  
action to the lexer and then running antlr again!  crap. try \\% please.
Thanks,
Ter

From lefevrol at yahoo.com  Wed Mar 26 17:11:31 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Thu, 27 Mar 2008 01:11:31 +0100
Subject: [antlr-interest] % in target code
In-Reply-To: <F2ADB29C-22FA-4632-AEA7-422C73DDA637@cs.usfca.edu>
References: <fsefp0$qpm$1@ger.gmane.org> <fsema6$h88$1@ger.gmane.org>
	<F2ADB29C-22FA-4632-AEA7-422C73DDA637@cs.usfca.edu>
Message-ID: <fseonk$p3t$1@ger.gmane.org>

Sorry, typo in my earlier message: it is % that gives the double error 
message, \% gives the single version.

\\% works the same as %. In fact one can generalize: an even number of \ 
(including 0) before the % generates two errors, an odd number one error.

-- O.L.


From lgcraymer at yahoo.com  Wed Mar 26 18:16:48 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 26 Mar 2008 18:16:48 -0700 (PDT)
Subject: [antlr-interest] % in target code
Message-ID: <17787.19975.qm@web55915.mail.re3.yahoo.com>

That seems odd--I would think that \\\% should work (escape the \, escape the %).  The two errors should be from the processing of the combined grammar (exposed %) and of the lexer grammar.

--Loring

----- Original Message ----
From: Olivier Lefevre <lefevrol at yahoo.com>
To: antlr-interest at antlr.org
Sent: Wednesday, March 26, 2008 5:11:31 PM
Subject: Re: [antlr-interest] % in target code

Sorry, typo in my earlier message: it is % that gives the double error 
message, \% gives the single version.

\\% works the same as %. In fact one can generalize: an even number of \ 
(including 0) before the % generates two errors, an odd number one error.

-- O.L.







      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080326/f21ca8bf/attachment-0001.html 

From open.zone at virgin.net  Wed Mar 26 18:19:08 2008
From: open.zone at virgin.net (Micheal J)
Date: Thu, 27 Mar 2008 01:19:08 -0000
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
Message-ID: <004a01c88fa8$8fc24390$c404a8c0@marion>

Patrick,
 
Yes. It should and it does (well it did work at the time IIRC).
 
You will need the corresponding version of ANTLRWorks (later versions of
ANTLRWorks use v3.1.x). You will also need the latest v3.0.x templates (i.e.
as at changeset 3862 in depot) if the v3.0.x distribution in ANTLRWorks does
not already contain them. 
 
http://fisheye2.cenqua.com/browse/antlr/src/org/antlr/codegen/templates/CSha
rp
 
If required replace the templates in the ANTLR included with your ANTLRWorks
distro (or use the classpath mechanism to redirect the search to the new
templates somewhere in your file system). Search the list for how this might
be done.
 
 
Micheal
 
-----------------------
The best way to contact me is via the list/forum. My time is very limited. 


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Patrick Hulsmeijer
Sent: 20 March 2008 09:55
To: antlr-interest at antlr.org
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks



Hi all,

 

Can somebody tell me whether remote debugging a C# targeted parser in
ANTLRWorks should work with ANTLR 3.01?

De code it generates with the -debug options doesn't compile.

 

Regards, patrick.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/fea0fe80/attachment.html 

From nilesh.kapile at tcs.com  Wed Mar 26 22:14:57 2008
From: nilesh.kapile at tcs.com (nilesh.kapile at tcs.com)
Date: Thu, 27 Mar 2008 10:44:57 +0530
Subject: [antlr-interest] Query: customizing error messages
Message-ID: <OF8AB33732.9CF9C69D-ON65257419.001D3EF1-65257419.001D4936@tcs.com>

Hello,

We are developing a translator for Business-aware language.

My query is related to Paraphrase for customizing error messages.

We can use  paraphrases in Rules to make error messages user-friendly, 
however, I could not  find a way to replace token names with user-friendly 
names.
e.g.:
 mismatched input ';' expecting ID. In this message, I want to replace ID 
with "an identifier".

ID :('a'..'z'|'A'..'Z'|'_')+('0'..'9')* ;

( options{ paraphrases = "an identifier"; } does not work. )

Any help will be highly appreciated. Thanks.

Regards,
Nilesh Sudhakar Kapile
Tata Consultancy Services
Mailto: nilesh.kapile at tcs.com
Website: http://www.tcs.com
____________________________________________
Experience certainty.   IT Services
                        Business Solutions
                        Outsourcing
____________________________________________
ForwardSourceID:NT0000EFAE 
ForwardSourceID:NT0000F00E 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/aaefc8f4/attachment.html 

From lgcraymer at yahoo.com  Wed Mar 26 23:02:42 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Wed, 26 Mar 2008 23:02:42 -0700 (PDT)
Subject: [antlr-interest] Query: customizing error messages
Message-ID: <598764.74946.qm@web55901.mail.re3.yahoo.com>

Override getTokenErrorDisplay(Token t)  (see BaseRecognizer) to index into an array of strings (or template names, if you are interested in localization); in this case, array[ID] would be the string "an identifier".

BTW, Ter--BaseRecognizer.getErrorMessage() should use templates instead of only generating English language messages ...

--Loring


----- Original Message ----
From: "nilesh.kapile at tcs.com" <nilesh.kapile at tcs.com>
To: antlr-interest at antlr.org
Sent: Wednesday, March 26, 2008 10:14:57 PM
Subject: [antlr-interest] Query: customizing error messages


Hello,

We are developing a translator for Business-aware
language.

My query is related to Paraphrase
for customizing error messages.

We can use  paraphrases in Rules
to make error messages user-friendly, however, I could not  find a
way to replace token names with user-friendly names.
e.g.:
 mismatchedinput ';' expecting ID. In this message, I want to replace ID with "an
identifier".

ID :('a'..'z'|'A'..'Z'|'_')+('0'..'9')*
;

( options{ paraphrases = "an identifier"; } does not work. )

Any help will be highly appreciated.
Thanks.

Regards,
Nilesh Sudhakar Kapile
Tata Consultancy Services
Mailto: nilesh.kapile at tcs.com
Website: http://www.tcs.com
____________________________________________
Experience certainty.        IT Services
                       Business Solutions
                       Outsourcing
____________________________________________
ForwardSourceID:NT0000EFAE
   
ForwardSourceID:NT0000F00E
   =====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you








      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080326/1ef0bf41/attachment.html 

From alexander at gaengel.de  Thu Mar 27 01:30:47 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Thu, 27 Mar 2008 09:30:47 +0100
Subject: [antlr-interest] Stop ASTWalker on own Exception
In-Reply-To: <47DD958B.2010705@gaengel.de>
References: <47DD958B.2010705@gaengel.de>
Message-ID: <47EB5B37.1010605@gaengel.de>

just for the record (if any one searches in the Archive) just inherit 
the exception form RuntimeException then it works

Alexander

Alexander G?ngel schrieb:
> I throw under some circumstances in an Action an exception.
>
> Is it possible to stop the astwalker when the excetion occurs? In the 
> book the example only works when an RecognitionException occurs.
>
> The rule is like this:
> rule: Identifier
>    {
>        ...owncode...
>               if(error){
>                    throw new OwnException();
>                            }
>        }
>    ;
>    catch [OwnException e]{
>            System.err.println(e.toString());
>    }
>
>
> Thank you
> Alexander
>

From alexander at gaengel.de  Thu Mar 27 01:33:11 2008
From: alexander at gaengel.de (=?ISO-8859-1?Q?Alexander_G=E4ngel?=)
Date: Thu, 27 Mar 2008 09:33:11 +0100
Subject: [antlr-interest] Stop Astwalker
In-Reply-To: <65E6A854-4556-445B-80D6-34002C3282A4@cs.usfca.edu>
References: <47EA095F.1050601@gaengel.de>
	<65E6A854-4556-445B-80D6-34002C3282A4@cs.usfca.edu>
Message-ID: <47EB5BC7.2090709@gaengel.de>

Thanks Terence,

I had tried it before but the Exception had inherited from Exception now 
I inherit from RuntimeException an everything works the way I want.

Alexander

Terence Parr schrieb:
> throw an exception not under RecognitionException in class hier.
> Terence
> On Mar 26, 2008, at 1:29 AM, Alexander G?ngel wrote:
>> I use a TreeGrammar and would like to stop on some Special occasion 
>> to further walk the tree.
>>
>> is there some easy way to stop the parsing?
>>
>> Alexander
>>
>>
>
>

From felix_do at web.de  Thu Mar 27 02:07:21 2008
From: felix_do at web.de (Felix Dorner)
Date: Thu, 27 Mar 2008 10:07:21 +0100
Subject: [antlr-interest] ast for pre/postfix expressions
Message-ID: <47EB63C9.7040904@web.de>

Hey,

I am currently creating AST's for pre and postfix expressions, like in Java:

a++
++a

my current grammar looks like that:

prefixExpression
    :    prefixOp^?  postfixExpression;

postfixExpression
    :    primaryExpression (('++'|'--')^)?;

The problem is that this creates identical trees for the two examples 
above. Since this is the first time I really work with AST construction 
I am not sure how to solve this problem. Should I just introduce two 
imaginary tokens PRE and POST, and change the grammar to this:

prefixExpression
    :    prefixOp postfixExpression -> ^(PRE prefixOp postfixExpression)
    |    postfixExpression
    ;

postfixExpression
    :    primaryExpression ('++') -> ^(POST primaryExpression '++')
    |    ...
    |    primaryExpression


  A secondary question is: Is it possible to singularize alternatives 
using '?'  for each of the above rules? How would the rewrites look?

Thanks for your suggestions,

Felix










From antlr at mirality.co.nz  Thu Mar 27 02:21:45 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 27 Mar 2008 22:21:45 +1300
Subject: [antlr-interest] ast for pre/postfix expressions
In-Reply-To: <47EB63C9.7040904@web.de>
References: <47EB63C9.7040904@web.de>
Message-ID: <20080327092156.A338611ECB6@www.antlr.org>

At 22:07 27/03/2008, Felix Dorner wrote:
 >prefixExpression
 >    :    prefixOp postfixExpression -> ^(PRE prefixOp
 >postfixExpression)
 >    |    postfixExpression
 >    ;
 >
 >postfixExpression
 >    :    primaryExpression ('++') -> ^(POST primaryExpression
 >'++')
 >    |    ...
 >    |    primaryExpression

That's the way I'd do it.

 >A secondary question is: Is it possible to singularize
 >alternatives using '?'  for each of the above rules? How
 >would the rewrites look?

Changing prefixExpression that way is possible, but it would make 
it an unreadable mess (in my opinion) so you'd be better off not 
doing it.

postfixExpression, on the other hand:

postfixExpression
   :  primaryExpression -> primaryExpression
      ( postfixOp -> ^(POST postfixExpression postfixOp) )?
   ;
postfixOp: '++' | '--';

(I'm actually not 100% sure of the syntax.  You might need to 
sprinkle in some $s at strategic points.  But the above should be 
close.)


From nkodidi at hotmail.com  Thu Mar 27 05:02:47 2008
From: nkodidi at hotmail.com (Diane Nkonyereza)
Date: Thu, 27 Mar 2008 12:02:47 +0000
Subject: [antlr-interest] java.lang.ArrayIndexOutOfBoundsException: 0
Message-ID: <BAY142-W38DFD111F1E9F0EAA3A5EAA5FE0@phx.gbl>


I got this while testing my grammar. The grammar is an alteration of the java grammar.
Could anyone please help me to understand what's happening.



Exception in thread 'main' java.lang.ArrayIndexOutOfBoundsException: 0
        at org.antlr.runtime.DFA.predict(DFA.java:59)
        at JackXMLLexer.mTokens(JackXMLLexer.java:3911)
        at org.antlr.runtime.Lexer.nextToken(Lexer.java:109)
        at org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java
:95)
        at org.antlr.runtime.CommonTokenStream.LT(CommonTokenStream.java:238)
        at org.antlr.runtime.debug.DebugTokenStream.<init>(DebugTokenStream.java
:45)
        at org.antlr.runtime.debug.DebugParser.<init>(DebugParser.java:56)
        at classes.classesRules.JackXMLParser.<init>(JackXMLParser.java:103)
        at classes.classesRules.JackXMLParser.<init>(JackXMLParser.java:115)
        at TestJackXML.main(TestJackXML.java:9)

The  lines in the parser (103 - 105) are:

 switch (alt2) {
                case 1 :
                    // JackXML.g:0:0: importDeclaration
                    {
                    pushFollow(FOLLOW_importDeclaration_in_compilationUnit74);
                    importDeclaration();
                    _fsp--;
                    if (failed) return ;

                    }
                    break;

                default :
                    break loop2;
                }

If it helps to understand the error by looking at the whole grammar, please let me know.

Cheers,
D.

_________________________________________________________________
Win 100?s of Virgin Experience days with BigSnapSearch.com
http://www.bigsnapsearch.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/b4d9b586/attachment.html 

From open.zone at virgin.net  Thu Mar 27 05:04:59 2008
From: open.zone at virgin.net (Micheal J)
Date: Thu, 27 Mar 2008 12:04:59 -0000
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <004a01c88fa8$8fc24390$c404a8c0@marion>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
	<004a01c88fa8$8fc24390$c404a8c0@marion>
Message-ID: <001a01c89002$c9b6bdb0$c404a8c0@marion>

An update.
 
 
You need just ANTLRWorks v1.1.7. It was released in January and *should*
contain the latest (at the time of release) v3.0.x codegen and templates for
all the supported targets.
 
 
Micheal
 
-----------------------
The best way to contact me is via the list/forum. My time is very limited. 


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Micheal J
Sent: 27 March 2008 01:19
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Remote debugging with C# in ANTLRWorks


Patrick,
 
Yes. It should and it does (well it did work at the time IIRC).
 
You will need the corresponding version of ANTLRWorks (later versions of
ANTLRWorks use v3.1.x). You will also need the latest v3.0.x templates (i.e.
as at changeset 3862 in depot) if the v3.0.x distribution in ANTLRWorks does
not already contain them. 
 
http://fisheye2.cenqua.com/browse/antlr/src/org/antlr/codegen/templates/CSha
rp
 
If required replace the templates in the ANTLR included with your ANTLRWorks
distro (or use the classpath mechanism to redirect the search to the new
templates somewhere in your file system). Search the list for how this might
be done.
 
 
Micheal
 
-----------------------
The best way to contact me is via the list/forum. My time is very limited. 


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Patrick Hulsmeijer
Sent: 20 March 2008 09:55
To: antlr-interest at antlr.org
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks



Hi all,

 

Can somebody tell me whether remote debugging a C# targeted parser in
ANTLRWorks should work with ANTLR 3.01?

De code it generates with the ?debug options doesn?t compile.

 

Regards, patrick.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/b99ff2be/attachment.html 

From dave at badgers-in-foil.co.uk  Thu Mar 27 06:07:42 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Thu, 27 Mar 2008 13:07:42 +0000
Subject: [antlr-interest] ast for pre/postfix expressions
In-Reply-To: <47EB63C9.7040904@web.de>
References: <47EB63C9.7040904@web.de>
Message-ID: <20080327130742.GA10774@badgers-in-foil.co.uk>

On Thu, Mar 27, 2008 at 10:07:21AM +0100, Felix Dorner wrote:
> I am currently creating AST's for pre and postfix expressions, like in Java:
> 
> a++
> ++a
> 
> my current grammar looks like that:
> 
> prefixExpression
>    :    prefixOp^?  postfixExpression;
> 
> postfixExpression
>    :    primaryExpression (('++'|'--')^)?;
> 
> The problem is that this creates identical trees for the two examples 
> above. Since this is the first time I really work with AST construction 
> I am not sure how to solve this problem. Should I just introduce two 
> imaginary tokens PRE and POST, and change the grammar to this:
> 
> prefixExpression
>    :    prefixOp postfixExpression -> ^(PRE prefixOp postfixExpression)
>    |    postfixExpression
>    ;
> 
> postfixExpression
>    :    primaryExpression ('++') -> ^(POST primaryExpression '++')
>    |    ...
>    |    primaryExpression
> 
> 
>  A secondary question is: Is it possible to singularize alternatives 
> using '?'  for each of the above rules? How would the rewrites look?

If it helps, I have a grammar where I've structured it a bit like this,

  unaryExpression
	:	in=INC unaryExpression -> ^(PRE_INC[$in] unaryExpression)
	|	de=DEC unaryExpression -> ^(PRE_DEC[$de] unaryExpression)
	|	...
	|	postfixExpression
	;

  postfixExpression
	:	(primaryExpression -> primaryExpression)
		( ... )*
		( 	in=INC -> ^(POST_INC[$in] $postfixExpression)
	 	|	de=DEC -> ^(POST_DEC[$de] $postfixExpression)
		)?


PRE_INC, PRE_DEC, POST_INC and POST_DEC are imaginary token types.


ta,
dave

-- 
http://david.holroyd.me.uk/

From tas at ultersys.ru  Thu Mar 27 08:02:18 2008
From: tas at ultersys.ru (Andrey Timoshenkov)
Date: Thu, 27 Mar 2008 18:02:18 +0300
Subject: [antlr-interest] Discarding characters in lexer
Message-ID: <47EBB6FA.5030204@ultersys.ru>

Hello everybody.

I have a possibly quick question about the lexical analyzer. In version 
2 there was a '!' operator that allowed to discard characters from token 
text like this:

STRING: '"'! ('"' '"'! | ~('"') )* '"'! ;


It seems that it has gone in version 3. Is it possible to achieve the 
same result in version 3?

Thank you,
Andrey Timoshenkov


From cieslewski at hcs.ufl.edu  Thu Mar 27 08:59:55 2008
From: cieslewski at hcs.ufl.edu (Grzegorz Cieslewski)
Date: Thu, 27 Mar 2008 11:59:55 -0400
Subject: [antlr-interest] How to keep the embedded Java code to minimum.
Message-ID: <7aa837f80803270859o2c869585m93a651ba201efddc@mail.gmail.com>

All,

I have a general question for  ANTLR folks.  How do you keep the
embedded java (or other) code in your grammar to a minimum to preserve
readability of the grammar?

Greg

-- 
=====================================================
Grzegorz Cieslewski
Research Assistant
High-performance Computing & Simulation (HCS) Research Laboratory
University of Florida, Dept. of Electrical and Computer Engineering
330 Benton Hall, Gainesville, FL, 32611-6200
Phone: (352) 392-9041
Email: cieslewski at hcs.ufl.edu
Web: www.hcs.ufl.edu
=====================================================

From parrt at cs.usfca.edu  Thu Mar 27 09:09:33 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Mar 2008 09:09:33 -0700
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <001a01c89002$c9b6bdb0$c404a8c0@marion>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
	<004a01c88fa8$8fc24390$c404a8c0@marion>
	<001a01c89002$c9b6bdb0$c404a8c0@marion>
Message-ID: <97214765-2974-4A6D-A6D5-AB210E2A9278@cs.usfca.edu>


On Mar 27, 2008, at 5:04 AM, Micheal J wrote:

> An update.
>
>
> You need just ANTLRWorks v1.1.7. It was released in January and  
> *should* contain the latest (at the time of release) v3.0.x codegen  
> and templates for all the supported targets.

Note that, to support grammar imports, we've tweaked the protocol  
slightly for v3.1.  ANTLRWorks 1.2 will require tweaks to  
runtime...well, it actually still works, but results are bit funny ;)

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/7d177645/attachment.html 

From open.zone at virgin.net  Thu Mar 27 09:43:00 2008
From: open.zone at virgin.net (Micheal J)
Date: Thu, 27 Mar 2008 16:43:00 -0000
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <97214765-2974-4A6D-A6D5-AB210E2A9278@cs.usfca.edu>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
	<004a01c88fa8$8fc24390$c404a8c0@marion>
	<001a01c89002$c9b6bdb0$c404a8c0@marion>
	<97214765-2974-4A6D-A6D5-AB210E2A9278@cs.usfca.edu>
Message-ID: <001601c89029$9ff45d30$c404a8c0@marion>

  _____  

From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: 27 March 2008 16:10
To: Micheal J
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Remote debugging with C# in ANTLRWorks



On Mar 27, 2008, at 5:04 AM, Micheal J wrote:



An update.


You need just ANTLRWorks v1.1.7. It was released in January and *should*
contain the latest (at the time of release) v3.0.x codegen and templates for
all the supported targets.


Note that, to support grammar imports, we've tweaked the protocol slightly
for v3.1. ANTLRWorks 1.2 will require tweaks to runtime...well, it actually
still works, but results are bit funny ;)

Ter 
 
 
Hi,
 

This doesn't affect the original poster anyhow as he specifically mentioned
using ANTLR v3.0.x. Someone in the thread - Thomas Karcher - managed to get
remote debugging to work with ANTRWorks v1.2b1 using the v3.1 beta C#
runtime sources(??). Not sure what to make of that since Johannes also
stated that C# is now broken for v3.1.
 
The v3.1 beta C# stuff we checked-in last year already had the v3.1 debug
protocol changes reflected in the templates/runtime but, a quick scan of the
commit logs reveals that you guys carried on messing with the debug bits up
until about a month ago. Johannes et al will sync those changes in due
course I guess...
 
Micheal
 
-----------------------
The best way to contact me is via the list/forum. My time is very limited. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/dc1f4b34/attachment.html 

From gerald at certiv.net  Thu Mar 27 09:52:36 2008
From: gerald at certiv.net (Gerald Rosenberg)
Date: Thu, 27 Mar 2008 09:52:36 -0700
Subject: [antlr-interest] How to keep the embedded Java code to minimum.
In-Reply-To: <7aa837f80803270859o2c869585m93a651ba201efddc@mail.gmail.co
 m>
References: <7aa837f80803270859o2c869585m93a651ba201efddc@mail.gmail.com>
Message-ID: <200803271652.m2RGqs9R010736@tach.newtechlaw.com>

One way I find convenient is to create a helper object and set it to 
the parser.  Most actions are then just calls to helper methods.

...
ParserHelper helper = new ParserHelper();
XXXParser parser = new new XXXParser(tokens);
parser.setHelper(helper);
...

At 08:59 AM 3/27/2008, you wrote:
>All,
>
>I have a general question for  ANTLR folks.  How do you keep the
>embedded java (or other) code in your grammar to a minimum to preserve
>readability of the grammar?
>
>Greg


From mail at ghost23.de  Thu Mar 27 11:05:21 2008
From: mail at ghost23.de (Sven Busse)
Date: Thu, 27 Mar 2008 19:05:21 +0100
Subject: [antlr-interest] Recognizing Indentation as blocks
In-Reply-To: <40CBD611A793EA438464B91E749DD8B003E7E2EE@blums0017.alphatech.com>
References: <001001c88d9d$a0361560$9231fea9@Werkbank>
	<001f01c88f7b$7f72abb0$9231fea9@Werkbank>
	<40CBD611A793EA438464B91E749DD8B003E7E2EE@blums0017.alphatech.com>
Message-ID: <001e01c89035$20087230$9231fea9@Werkbank>

Hi,

ok, thanks, that helps. So EOL is actually a Newline character, right?

Cheers
Sven

-----Urspr?ngliche Nachricht-----
Von: Daniels, Troy (US SSA) [mailto:troy.daniels at baesystems.com] 
Gesendet: Mittwoch, 26. M?rz 2008 21:21
An: Sven Busse; antlr-interest at antlr.org
Betreff: RE: [antlr-interest] Recognizing Indentation as blocks

Not having the book, I can't look at the grammar.  But I'd guess you'd want
something like:

CHANGE_INDENTATION:  EOL ws+=WHITE_SPACE*
  {
     if (sizeOf(ws) > previousWhiteSpace)
       emit(INDENT); 
     else if (sizeOf(ws) < previousWhiteSpace) 
       emit(DEDENT);
     previousWhiteSpace = sizeOf(ws);
  }
     
Basically, when you find the end of line character, you want to look at the
whitespace after it, and emit the appropriate token if it's changed.  Since
WHITE_SPACE has a * after it, this matches even when there is no white
space.  Since it starts with an EOL, you don't need to worry about false
triggers in the middle of a line like just WHITE_SPACE* would.

I'm not familiar with the API for emitting tokens, so the details of the
above code are almost certainly wrong, but the general concept should be
right.

Troy

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Sven Busse
> Sent: Wednesday, March 26, 2008 3:57 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Recognizing Indentation as blocks
> 
> uhm, has anybody an idea?
> 
> thanks
> Sven
> 
> ----------
> 
> Von: Sven Busse [mailto:mail at ghost23.de]
> Gesendet: Montag, 24. M?rz 2008 11:56
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Recognizing Indentation as blocks
> 
> Hi,
> 
> i am currently reading Terrence's book. I am currently at the 
> chapter "Emitting more than one token per Lexer rule". He 
> gives an example from
> python:
> 
> if foo:
> 	print "foo is true"
> 	f()
> g()
> 
> He then discusses an exemplary INDENT lexer rule, which i am 
> trying to understand.
> 
> His INDENT rule aims to match Whitespace and Tabs if they 
> start at the beginning of the line. If the indentation is 
> bigger than in a previous line, an imaginary INDENT token is 
> emitted. If it is smaller than in the previous line, one or 
> multiple DEDENT token are emitted.
> 
> Now my question is, would this actually work with an example 
> like the little python script? Because the line with "g()" 
> has actually no whitespace at all, so i would assume there 
> would be no match and thus the logic of emitting DEDENT would 
> not even be invoked.
> 
> Is this correct or am i missing something? I am referring to 
> the book "The defintive ANTRL Reference", page 95.
> 
> Thank you
> Sven
> 
> 
> 
> 


From open.zone at virgin.net  Thu Mar 27 11:20:13 2008
From: open.zone at virgin.net (Micheal J)
Date: Thu, 27 Mar 2008 18:20:13 -0000
Subject: [antlr-interest] Is ANTLR Yggdrasil supported by ANTLRWorks?
	(WAS: % in target code)
In-Reply-To: <205011.54206.qm@web55902.mail.re3.yahoo.com>
References: <205011.54206.qm@web55902.mail.re3.yahoo.com>
Message-ID: <002101c89037$34760550$c404a8c0@marion>

> From: antlr-interest-bounces at antlr.org On Behalf Of Loring Craymer
> Sent: 26 March 2008 22:29
> To: Olivier Lefevre; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] % in target code
> 	
> 
> ANTLR 3 attributes are not first class (ANTLR) language elements, and 
> attributes are effectively referenced only within actions ($ syntax) 
> so that ANTLR effectively deals with a superset of the target language,
> not the target language itself.  Further, string templates may be 
> instantiated in actions (% syntax).
> 
> This problem does not occur in ANTLR Yggdrasil, largely as a consequence 
> of having first class attributes that are strongly typed.  I should have 
> a release out within a month or two; I am currently in the middle of 
> developing the tree grammar generator.

Loring,

Is ANTLR Yggdrasil supported by ANTLRWorks (or rather will it be when
released)?

I'd like to better understand the differences with stock ANTLR again though
my focus is on lexer and parser generation. A couple more questions:

- Is the codegen largely v3.0.x-like? (that would simplify adding C#
support)

- Will ANTLR Yggdrasil support v3.1 features e.g. grammar imports in the
coming release? Ever?

Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited. 


From parrt at cs.usfca.edu  Thu Mar 27 11:24:59 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Mar 2008 11:24:59 -0700
Subject: [antlr-interest] Remote debugging with C# in ANTLRWorks
In-Reply-To: <001601c89029$9ff45d30$c404a8c0@marion>
References: <C3525AF49F7D374D8E4D3C46ED4BC6211684FA@srvxdcex.xebic.com>
	<004a01c88fa8$8fc24390$c404a8c0@marion>
	<001a01c89002$c9b6bdb0$c404a8c0@marion>
	<97214765-2974-4A6D-A6D5-AB210E2A9278@cs.usfca.edu>
	<001601c89029$9ff45d30$c404a8c0@marion>
Message-ID: <910A37BE-B436-4821-B473-0C3DE979410F@cs.usfca.edu>

Cool. Thanks for the additional info Michael. sorry for any confusion.
I have high hopes that C# will be ready end of April. I need to get a  
release out before I start the next book!
Ter
On Mar 27, 2008, at 9:43 AM, Micheal J wrote:

> From: Terence Parr [mailto:parrt at cs.usfca.edu]
> Sent: 27 March 2008 16:10
> To: Micheal J
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Remote debugging with C# in ANTLRWorks
>
>
> On Mar 27, 2008, at 5:04 AM, Micheal J wrote:
>> An update.
>> You need just ANTLRWorks v1.1.7. It was released in January and  
>> *should* contain the latest (at the time of release) v3.0.x codegen  
>> and templates for all the supported targets.
>
> Note that, to support grammar imports, we've tweaked the protocol  
> slightly for v3.1. ANTLRWorks 1.2 will require tweaks to  
> runtime...well, it actually still works, but results are bit funny ;)
>
> Ter
>
>
> Hi,
>
> This doesn't affect the original poster anyhow as he specifically  
> mentioned using ANTLR v3.0.x. Someone in the thread - Thomas Karcher  
> - managed to get remote debugging to work with ANTRWorks v1.2b1  
> using the v3.1 beta C# runtime sources(??). Not sure what to make of  
> that since Johannes also stated that C# is now broken for v3.1.
>
> The v3.1 beta C# stuff we checked-in last year already had the v3.1  
> debug protocol changes reflected in the templates/runtime but, a  
> quick scan of the commit logs reveals that you guys carried on  
> messing with the debug bits up until about a month ago. Johannes et  
> al will sync those changes in due course I guess...
>
> Micheal
>
> -----------------------
> The best way to contact me is via the list/forum. My time is very  
> limited.
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/7c1c4a7d/attachment-0001.html 

From thkarcher at gmx.de  Thu Mar 27 11:26:18 2008
From: thkarcher at gmx.de (Thomas Karcher)
Date: Thu, 27 Mar 2008 19:26:18 +0100
Subject: [antlr-interest] How to keep the embedded Java code to minimum.
In-Reply-To: <200803271652.m2RGqs9R010736@tach.newtechlaw.com>
References: <7aa837f80803270859o2c869585m93a651ba201efddc@mail.gmail.com>
	<200803271652.m2RGqs9R010736@tach.newtechlaw.com>
Message-ID: <1206642378.4591.16.camel@localhost>

Hi,

> >I have a general question for  ANTLR folks.  How do you keep the
> >embedded java (or other) code in your grammar to a minimum to preserve
> >readability of the grammar?

Another possibility is to call functions of an inherited grammar class
(by reference):

options { superClass=GrammarParentClass; }

rule:	a=A { inheritedFunction($a); }


Thomas


-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Dies ist ein digital signierter Nachrichtenteil
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/23a3e5cb/attachment.bin 

From parrt at cs.usfca.edu  Thu Mar 27 11:30:56 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Mar 2008 11:30:56 -0700
Subject: [antlr-interest] How to keep the embedded Java code to minimum.
In-Reply-To: <1206642378.4591.16.camel@localhost>
References: <7aa837f80803270859o2c869585m93a651ba201efddc@mail.gmail.com>
	<200803271652.m2RGqs9R010736@tach.newtechlaw.com>
	<1206642378.4591.16.camel@localhost>
Message-ID: <C01BFE0B-4084-4EF9-A5E0-B737F3DF077F@cs.usfca.edu>

or, subclass the grammar  To override abstract member methods.
Ter
On Mar 27, 2008, at 11:26 AM, Thomas Karcher wrote:
> Hi,
>
>>> I have a general question for  ANTLR folks.  How do you keep the
>>> embedded java (or other) code in your grammar to a minimum to  
>>> preserve
>>> readability of the grammar?
>
> Another possibility is to call functions of an inherited grammar class
> (by reference):
>
> options { superClass=GrammarParentClass; }
>
> rule:	a=A { inheritedFunction($a); }
>
>
> Thomas
>
>


From dmitry.gusev at gmail.com  Thu Mar 27 11:57:31 2008
From: dmitry.gusev at gmail.com (Dmitry Gusev)
Date: Thu, 27 Mar 2008 21:57:31 +0300
Subject: [antlr-interest] Discarding characters in lexer
In-Reply-To: <47EBB6FA.5030204@ultersys.ru>
References: <47EBB6FA.5030204@ultersys.ru>
Message-ID: <37a147f40803271157o55b0f790mb198eb6b60a90b06@mail.gmail.com>

Privet Andrey,

You can use '!' operator with rules, but not tokens.


On Thu, Mar 27, 2008 at 6:02 PM, Andrey Timoshenkov <tas at ultersys.ru> wrote:

> Hello everybody.
>
> I have a possibly quick question about the lexical analyzer. In version
> 2 there was a '!' operator that allowed to discard characters from token
> text like this:
>
> STRING: '"'! ('"' '"'! | ~('"') )* '"'! ;
>
>
> It seems that it has gone in version 3. Is it possible to achieve the
> same result in version 3?
>
> Thank you,
> Andrey Timoshenkov
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/69275d81/attachment.html 

From lgcraymer at yahoo.com  Thu Mar 27 12:21:08 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Thu, 27 Mar 2008 12:21:08 -0700 (PDT)
Subject: [antlr-interest] Is ANTLR Yggdrasil supported by ANTLRWorks?
	(WAS: % in target code)
Message-ID: <201716.59505.qm@web55908.mail.re3.yahoo.com>

Micheal--

I do not expect the initial release to support ANTLRWorks--I have not had the time to dig into ANTLRWorks internals to see what is needed to integrate attribute support intelligently.

The codegen is ANTLR 3 "like"--heavy use of templates and the library code has significant overlap.  The big differences are in tree structure and the attribute support code.  I also have junit tests (not complete, but good enough to test the critical methods) for new classes, and that should help with a port.

I do not intend to support grammar imports in the form that Ter has implemented for ANTLR 3; I do expect to support separate files for DFAs and the like and will support imports of attribute type specifications (these get repeated from one grammar to the next in a multi-pass translator).  There are two reasons for not adding grammar composition, one philosophical, and one as an optimization strategy.  Philosophically, I think that grammar composition should be done at the source level in an IDE (like ANTLRWorks, preferably under eclipse or IntelliJ).  From an optimization standpoint, ANTLR 3 generates too much code; my impression is that the non-linear growth is mostly due to DFA class definitions.  That needs to be investigated more carefully; I think that it is possible to bring generated code size down to something like in ANTLR 2 (excluding the DFA classes).  Tree restructuring and heterogeneous trees have been supported in Yggdrasil from the
 beginning.

--Loring

----- Original Message ----
From: Micheal J <open.zone at virgin.net>
To: antlr-interest at antlr.org
Sent: Thursday, March 27, 2008 11:20:13 AM
Subject: Re: [antlr-interest] Is ANTLR Yggdrasil supported by ANTLRWorks? (WAS: % in target code)

> From: antlr-interest-bounces at antlr.org On Behalf Of Loring Craymer
> Sent: 26 March 2008 22:29
> To: Olivier Lefevre; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] % in target code
>     
> 
> ANTLR 3 attributes are not first class (ANTLR) language elements, and 
> attributes are effectively referenced only within actions ($ syntax) 
> so that ANTLR effectively deals with a superset of the target language,
> not the target language itself.  Further, string templates may be 
> instantiated in actions (% syntax).
> 
> This problem does not occur in ANTLR Yggdrasil, largely as a consequence 
> of having first class attributes that are strongly typed.  I should have 
> a release out within a month or two; I am currently in the middle of 
> developing the tree grammar generator.

Loring,

Is ANTLR Yggdrasil supported by ANTLRWorks (or rather will it be when
released)?

I'd like to better understand the differences with stock ANTLR again though
my focus is on lexer and parser generation. A couple more questions:

- Is the codegen largely v3.0.x-like? (that would simplify adding C#
support)

- Will ANTLR Yggdrasil support v3.1 features e.g. grammar imports in the
coming release? Ever?

Micheal

-----------------------
The best way to contact me is via the list/forum. My time is very limited. 







      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/c62751ef/attachment.html 

From darien.hager at etelos-inc.com  Thu Mar 27 12:24:14 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Thu, 27 Mar 2008 12:24:14 -0700
Subject: [antlr-interest] Discarding characters in lexer
In-Reply-To: <37a147f40803271157o55b0f790mb198eb6b60a90b06@mail.gmail.com>
References: <47EBB6FA.5030204@ultersys.ru>
	<37a147f40803271157o55b0f790mb198eb6b60a90b06@mail.gmail.com>
Message-ID: <c8c997f40803271224j76290b93hc107e1c8c352b10@mail.gmail.com>

I wonder... Can you use the $channel=HIDDEN feature with fragment lexer
rules to achieve this effect?




-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.

This e-mail message, including attachments, may contain confidential information 
for the sole use of the intended recipient(s). If you are not the intended recipient,
then this is notice that any use, disclosure, dissemination, distribution or copying is 
strictly prohibited.  If you have received this message in error please contact the 
sender by reply mail and destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/c4c5fc7e/attachment.html 

From rschulz at sonic.net  Thu Mar 27 12:28:37 2008
From: rschulz at sonic.net (Randall R Schulz)
Date: Thu, 27 Mar 2008 12:28:37 -0700
Subject: [antlr-interest] How to keep the embedded Java code to minimum.
In-Reply-To: <7aa837f80803270859o2c869585m93a651ba201efddc@mail.gmail.com>
References: <7aa837f80803270859o2c869585m93a651ba201efddc@mail.gmail.com>
Message-ID: <200803271228.38056.rschulz@sonic.net>

On Thursday 27 March 2008 08:59, Grzegorz Cieslewski wrote:
> All,
>
> I have a general question for  ANTLR folks.  How do you keep the
> embedded java (or other) code in your grammar to a minimum to
> preserve readability of the grammar?

I create an interface that defines all the semantic actions. Then I 
require an instance of (an implementation of) that interface in the 
constructor for the parser (the second-pass AST parser). This makes it 
easy to implement a variety of processing for the language in question.

I've used this technique with JavaCC and ANTLR grammars. It's pretty 
generic.


> Greg


Randall Schulz

From antlr at mirality.co.nz  Thu Mar 27 12:39:43 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 28 Mar 2008 08:39:43 +1300
Subject: [antlr-interest] Discarding characters in lexer
In-Reply-To: <c8c997f40803271224j76290b93hc107e1c8c352b10@mail.gmail.com
 >
References: <47EBB6FA.5030204@ultersys.ru>
	<37a147f40803271157o55b0f790mb198eb6b60a90b06@mail.gmail.com>
	<c8c997f40803271224j76290b93hc107e1c8c352b10@mail.gmail.com>
Message-ID: <20080327194000.EBE812F4312@www.antlr.org>

At 08:24 28/03/2008, Darien Hager wrote:
>I wonder... Can you use the $channel=HIDDEN feature with fragment 
>lexer rules to achieve this effect?

No, you can't.  $channel only affects tokens generated by that 
rule, and fragment rules never generate a token.

You can't use $setText from a fragment rule either, for the same 
reason.


From antlr at mirality.co.nz  Thu Mar 27 12:33:12 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 28 Mar 2008 08:33:12 +1300
Subject: [antlr-interest] Discarding characters in lexer
In-Reply-To: <47EBB6FA.5030204@ultersys.ru>
References: <47EBB6FA.5030204@ultersys.ru>
Message-ID: <20080327210254.9568711EACD@www.antlr.org>

At 04:02 28/03/2008, Andrey Timoshenkov wrote:
 >I have a possibly quick question about the lexical analyzer. In
 >version 2 there was a '!' operator that allowed to discard
 >characters from token text like this:
 >
 >STRING: '"'! ('"' '"'! | ~('"') )* '"'! ;
 >
 >It seems that it has gone in version 3. Is it possible to 
achieve
 >the same result in version 3?

In v3, the ! operator only works in the parser (and affects AST 
generation).  You can't use it in the lexer any more.

To achieve the result you want now, you'll need to call $setText 
at the end of the rule (which means you'll have to rescan the 
string outside of ANTLR to convert escape sequences and the 
like).  Bit of a hassle, I agree, but that's the only option for 
now.


From troy.daniels at baesystems.com  Thu Mar 27 14:29:30 2008
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Thu, 27 Mar 2008 17:29:30 -0400
Subject: [antlr-interest] Recognizing Indentation as blocks
References: <001001c88d9d$a0361560$9231fea9@Werkbank>
	<001f01c88f7b$7f72abb0$9231fea9@Werkbank>
	<40CBD611A793EA438464B91E749DD8B003E7E2EE@blums0017.alphatech.com>
	<001e01c89035$20087230$9231fea9@Werkbank>
Message-ID: <40CBD611A793EA438464B91E749DD8B003E7E78A@blums0017.alphatech.com>

 

> -----Original Message-----
> From: Sven Busse [mailto:mail at ghost23.de] 
> Sent: Thursday, March 27, 2008 2:05 PM
> To: Daniels, Troy (US SSA); antlr-interest at antlr.org
> Subject: AW: [antlr-interest] Recognizing Indentation as blocks
> 
> Hi,
> 
> ok, thanks, that helps. So EOL is actually a Newline character, right?

EOL is whatever is the appropriate End Of Line expression for your language/operating system.  It may also include carriage returns.

Troy

> 
> Cheers
> Sven
> 
> -----Urspr?ngliche Nachricht-----
> Von: Daniels, Troy (US SSA) [mailto:troy.daniels at baesystems.com]
> Gesendet: Mittwoch, 26. M?rz 2008 21:21
> An: Sven Busse; antlr-interest at antlr.org
> Betreff: RE: [antlr-interest] Recognizing Indentation as blocks
> 
> Not having the book, I can't look at the grammar.  But I'd 
> guess you'd want something like:
> 
> CHANGE_INDENTATION:  EOL ws+=WHITE_SPACE*
>   {
>      if (sizeOf(ws) > previousWhiteSpace)
>        emit(INDENT); 
>      else if (sizeOf(ws) < previousWhiteSpace) 
>        emit(DEDENT);
>      previousWhiteSpace = sizeOf(ws);
>   }
>      
> Basically, when you find the end of line character, you want 
> to look at the whitespace after it, and emit the appropriate 
> token if it's changed.  Since WHITE_SPACE has a * after it, 
> this matches even when there is no white space.  Since it 
> starts with an EOL, you don't need to worry about false 
> triggers in the middle of a line like just WHITE_SPACE* would.
> 
> I'm not familiar with the API for emitting tokens, so the 
> details of the above code are almost certainly wrong, but the 
> general concept should be right.
> 
> Troy
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org 
> > [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Sven Busse
> > Sent: Wednesday, March 26, 2008 3:57 PM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Recognizing Indentation as blocks
> > 
> > uhm, has anybody an idea?
> > 
> > thanks
> > Sven
> > 
> > ----------
> > 
> > Von: Sven Busse [mailto:mail at ghost23.de]
> > Gesendet: Montag, 24. M?rz 2008 11:56
> > An: antlr-interest at antlr.org
> > Betreff: [antlr-interest] Recognizing Indentation as blocks
> > 
> > Hi,
> > 
> > i am currently reading Terrence's book. I am currently at 
> the chapter 
> > "Emitting more than one token per Lexer rule". He gives an example 
> > from
> > python:
> > 
> > if foo:
> > 	print "foo is true"
> > 	f()
> > g()
> > 
> > He then discusses an exemplary INDENT lexer rule, which i 
> am trying to 
> > understand.
> > 
> > His INDENT rule aims to match Whitespace and Tabs if they 
> start at the 
> > beginning of the line. If the indentation is bigger than in 
> a previous 
> > line, an imaginary INDENT token is emitted. If it is 
> smaller than in 
> > the previous line, one or multiple DEDENT token are emitted.
> > 
> > Now my question is, would this actually work with an 
> example like the 
> > little python script? Because the line with "g()"
> > has actually no whitespace at all, so i would assume there 
> would be no 
> > match and thus the logic of emitting DEDENT would not even 
> be invoked.
> > 
> > Is this correct or am i missing something? I am referring 
> to the book 
> > "The defintive ANTRL Reference", page 95.
> > 
> > Thank you
> > Sven
> > 
> > 
> > 
> > 
> 
> 

From sohara at pivotal-solutions.co.uk  Thu Mar 27 16:27:33 2008
From: sohara at pivotal-solutions.co.uk (Steve O'Hara)
Date: Thu, 27 Mar 2008 23:27:33 -0000
Subject: [antlr-interest] Matching the * character
Message-ID: <E51BD230BBA3A64B9C01EF1A20EF5AE61C4D68@pspub1.pivotal-solutions.co.uk>

I'm new to Antlr so forgive me if this is a stupid question...
I'm trying to match a database search criteria that looks like the
following;

 

'some text'*, *'more criteria' & 'more criteria'*


My grammar is;

 

expression

    : subExpression (WS? (COMMA | AMPERSAND) WS? subExpression)*

    ;

 

subExpression

    : WS? (Identifier | subExpressionText) WS?

    ;

 

subExpressionText

    :  (STAR | QUESTION*)? QuotedString  (STAR | QUESTION*)? WS?

    ;

 

Letter : 'a'..'z' | 'A'..'Z' | '_' | '\u0080'..'\ufffe' ;

Digit : '0'..'9' ;

Identifier : Letter (Letter | Digit)* ;

QuotedString :'\'' (~'\'')* '\'' ;

WS : (' ' | '\t' | '\n' | '\r')+ ;

 

COMMA : ',' ;

AMPERSAND : '&' ;

QUESTION : '?' ;

STAR : '*' ;


The parser finds the first quoted string (some text) but fails after
that with a NoViableAltException. If I change the * to ? it works fine.
I'm waiting for delivery of the reference manual so maybe I'm breaking
some sort of golden rule here, but any help would be greatly
appreciated.

Steve

 

Steve O'Hara
Pivotal Solutions  

( +44 (0)7802 484227
    +44 (0)208 660 7288 (Fax)
*  sohara at pivotal-solutions.co.uk <mailto:> 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/b1fd0f4d/attachment-0001.html 

From jaluber at gmx.de  Thu Mar 27 16:59:05 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 28 Mar 2008 00:59:05 +0100
Subject: [antlr-interest] Matching the * character
In-Reply-To: <E51BD230BBA3A64B9C01EF1A20EF5AE61C4D68@pspub1.pivotal-solutions.co.uk>
References: <E51BD230BBA3A64B9C01EF1A20EF5AE61C4D68@pspub1.pivotal-solutions.co.uk>
Message-ID: <47EC34C9.8070004@gmx.de>

Steve O'Hara schrieb:
> I'm new to Antlr so forgive me if this is a stupid question...
> I'm trying to match a database search criteria that looks like the 
> following;
> 
> * *
> 
> *'some text'*, *'more criteria' & 'more criteria'**
> 
> 
> My grammar is;
> 
> * *
> 
> expression
> 
>     : subExpression (WS? (COMMA | AMPERSAND) WS? subExpression)*
> 
>     ;
> 
>  
> 
> subExpression
> 
>     : WS? (Identifier | subExpressionText) WS?
> 
>     ;
> 
>  
> 
> subExpressionText
> 
>     :  (STAR | QUESTION*)? QuotedString  (STAR | QUESTION*)? WS?
> 
>     ;
> 
>  
> 
> Letter : 'a'..'z' | 'A'..'Z' | '_' | '\u0080'..'\ufffe' ;
> 
> Digit : '0'..'9' ;
> 
> Identifier : Letter (Letter | Digit)* ;
> 
> QuotedString :'\'' (~'\'')* '\'' ;
> 
> WS : (' ' | '\t' | '\n' | '\r')+ ;
> 
>  
> 
> COMMA : ',' ;
> 
> AMPERSAND : '&' ;
> 
> QUESTION : '?' ;
> 
> STAR : '*' ;
> 
> 
> The parser finds the first quoted string (some text) but fails after 
> that with a NoViableAltException. If I change the * to ? it works fine. 
> I'm waiting for delivery of the reference manual so maybe I'm breaking 
> some sort of golden rule here, but any help would be greatly appreciated.
> 
> Steve

For rules like Letter use the following:

fragment LETTER : 'a'..'z' | 'A'..'Z' | '_' | '\u0080'..'\ufffe' ;

Otherwise I don't see another mistake by scanning alone.

Johannes

From lgcraymer at yahoo.com  Thu Mar 27 16:59:05 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Thu, 27 Mar 2008 16:59:05 -0700 (PDT)
Subject: [antlr-interest] Matching the * character
Message-ID: <586291.86937.qm@web55908.mail.re3.yahoo.com>

This looks ok, except for the (STAR | QUESTION*)? idiom (equivalent to (STAR | QUESTION+ | | ).  Try either changing QUESTION* to QUESTION+ or remove the terminal ?.  I would have thought that ANTLR would issue a warning about the two empty alts; maybe it did and you missed it.

--Loring

----- Original Message ----
From: Steve O'Hara <sohara at pivotal-solutions.co.uk>
To: antlr-interest at antlr.org
Sent: Thursday, March 27, 2008 4:27:33 PM
Subject: [antlr-interest] Matching the * character

  
<!--
 _filtered {font-family:Wingdings;panose-1:5 0 0 0 0 0 0 0 0 0;}
 _filtered {font-family:"Cambria Math";panose-1:2 4 5 3 5 4 6 3 2 4;}
 _filtered {font-family:Calibri;panose-1:2 15 5 2 2 2 4 3 2 4;}
 _filtered {font-family:Tahoma;panose-1:2 11 6 4 3 5 4 4 2 4;}
 _filtered {font-family:Verdana;panose-1:2 11 6 4 3 5 4 4 2 4;}
/* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;margin-bottom:.0001pt;font-size:11.0pt;font-family:"Calibri", "sans-serif";}
a:link, span.MsoHyperlink
	{color:blue;text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;text-decoration:underline;}
pre
	{margin:0cm;margin-bottom:.0001pt;font-size:10.0pt;font-family:"Courier New";}
span.EmailStyle17
	{font-family:"Calibri", "sans-serif";color:windowtext;}
span.HTMLPreformattedChar
	{font-family:"Courier New";}
.MsoChpDefault
	{}
 _filtered {margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.Section1
	{}
-->
I'mnew to Antlr so forgive me if this is a stupid question...
I'm trying to match a database search criteria that looks like the following;
   
 'some
text'*, *'more criteria' & 'more criteria'*
 
My grammar is;
   
 expression
    
: subExpression (WS? (COMMA | AMPERSAND) WS? subExpression)*
    
;
   
 subExpression
    
: WS? (Identifier | subExpressionText) WS?
    
;
   
 subExpressionText
    
:  (STAR | QUESTION*)? QuotedString  (STAR | QUESTION*)? WS?
    
;
   
 Letter
: 'a'..'z' | 'A'..'Z' | '_' | '\u0080'..'\ufffe' ;
 Digit
: '0'..'9' ;
 Identifier
: Letter (Letter | Digit)* ;
 QuotedString
:'\'' (~'\'')* '\'' ;
 WS
: (' ' | '\t' | '\n' | '\r')+ ;
   
 COMMA
: ',' ;
 AMPERSAND
: '&' ;
 QUESTION
: '?' ;
 STAR
: '*' ;
 
The parser finds the first quoted string (some text) but fails after that witha NoViableAltException. If I change the * to ? it works fine. I'm waiting fordelivery of the reference manual so maybe I'm breaking some sort of golden rulehere, but any help would be greatly appreciated.

Steve
   
 SteveO'Hara
Pivotal Solutions 

 ( +44 (0)7802 484227
    +44 (0)208 660 7288 (Fax)
*  sohara at pivotal-solutions.co.uk
 



 
 






      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/c572f028/attachment.html 

From sohara at pivotal-solutions.co.uk  Thu Mar 27 17:58:09 2008
From: sohara at pivotal-solutions.co.uk (Steve O'Hara)
Date: Fri, 28 Mar 2008 00:58:09 -0000
Subject: [antlr-interest] Matching the * character
In-Reply-To: <586291.86937.qm@web55908.mail.re3.yahoo.com>
References: <586291.86937.qm@web55908.mail.re3.yahoo.com>
Message-ID: <E51BD230BBA3A64B9C01EF1A20EF5AE61C4D6A@pspub1.pivotal-solutions.co.uk>

Thanks for your help Loring - unfortunately, it hasn't helped.

I've condensed the example down to something really simple;

 

subExpressionText :  QuotedString STAR? WS?;

QuotedString :'\'' (~'\'')* '\'' ( '\'' (~'\'')* '\'' )* ;

WS : (' ' | '\t' | '\n' | '\r')+ ;

STAR : '*' ;

 

The test string "'test'*" works fine but "'test'*    " doesn't.

It seems bizarre to me because if I substitute STAR for some other
character, it works fine.

 

e.g. STAR : '$' ; 

"'test'$    " works fine

 

Thanks,

Steve

 

From: Loring Craymer [mailto:lgcraymer at yahoo.com] 
Sent: 27 March 2008 23:59
To: Steve O'Hara; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Matching the * character

 

This looks ok, except for the (STAR | QUESTION*)? idiom (equivalent to
(STAR | QUESTION+ | | ).  Try either changing QUESTION* to QUESTION+ or
remove the terminal ?.  I would have thought that ANTLR would issue a
warning about the two empty alts; maybe it did and you missed it.

--Loring

----- Original Message ----
From: Steve O'Hara <sohara at pivotal-solutions.co.uk>
To: antlr-interest at antlr.org
Sent: Thursday, March 27, 2008 4:27:33 PM
Subject: [antlr-interest] Matching the * character

I'm new to Antlr so forgive me if this is a stupid question...
I'm trying to match a database search criteria that looks like the
following;

 

'some text'*, *'more criteria' & 'more criteria'*


My grammar is;

 

expression

    : subExpression (WS? (COMMA | AMPERSAND) WS? subExpression)*

    ;

 

subExpression

    : WS? (Identifier | subExpressionText) WS?

    ;

 

subExpressionText

    :  (STAR | QUESTION*)? QuotedString  (STAR | QUESTION*)? WS?

    ;

 

Letter : 'a'..'z' | 'A'..'Z' | '_' | '\u0080'..'\ufffe' ;

Digit : '0'..'9' ;

Identifier : Letter (Letter | Digit)* ;

QuotedString :'\'' (~'\'')* '\'' ;

WS : (' ' | '\t' | '\n' | '\r')+ ;

 

COMMA : ',' ;

AMPERSAND : '&' ;

QUESTION : '?' ;

STAR : '*' ;


The parser finds the first quoted string (some text) but fails after
that with a NoViableAltException. If I change the * to ? it works fine.
I'm waiting for delivery of the reference manual so maybe I'm breaking
some sort of golden rule here, but any help would be greatly
appreciated.

Steve

 

Steve O'Hara
Pivotal Solutions  

( +44 (0)7802 484227
    +44 (0)208 660 7288 (Fax)
*  sohara at pivotal-solutions.co.uk <mailto:> 

 

 

 

________________________________

Be a better friend, newshound, and know-it-all with Yahoo! Mobile. Try
it now.
<http://us.rd.yahoo.com/evt=51733/*http:/mobile.yahoo.com/;_ylt=Ahu06i62
sR8HDtDypao8Wcj9tAcJ%20> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/5fdeec49/attachment-0001.html 

From parrt at cs.usfca.edu  Thu Mar 27 18:15:05 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Mar 2008 18:15:05 -0700
Subject: [antlr-interest] Matching the * character
In-Reply-To: <E51BD230BBA3A64B9C01EF1A20EF5AE61C4D6A@pspub1.pivotal-solutions.co.uk>
References: <586291.86937.qm@web55908.mail.re3.yahoo.com>
	<E51BD230BBA3A64B9C01EF1A20EF5AE61C4D6A@pspub1.pivotal-solutions.co.uk>
Message-ID: <2A8881C1-50E1-47BB-A3A2-13271A29A36B@cs.usfca.edu>

how are you getting the input?  If from command-line arg, it might be  
expanding '*'.
Ter
On Mar 27, 2008, at 5:58 PM, Steve O'Hara wrote:

> Thanks for your help Loring ? unfortunately, it hasn?t helped.
> I?ve condensed the example down to something really simple;
>
> subExpressionText :  QuotedString STAR? WS?;
> QuotedString :'\'' (~'\'')* '\'' ( '\'' (~'\'')* '\'' )* ;
> WS : (' ' | '\t' | '\n' | '\r')+ ;
> STAR : '*' ;
>
> The test string ??test?*? works fine but ??test?*    ? doesn?t.
> It seems bizarre to me because if I substitute STAR for some other  
> character, it works fine.
>
> e.g. STAR : '$' ;
> ??test?$    ? works fine
>
> Thanks,
> Steve
>
> From: Loring Craymer [mailto:lgcraymer at yahoo.com]
> Sent: 27 March 2008 23:59
> To: Steve O'Hara; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Matching the * character
>
> This looks ok, except for the (STAR | QUESTION*)? idiom (equivalent  
> to (STAR | QUESTION+ | | ).  Try either changing QUESTION* to  
> QUESTION+ or remove the terminal ?.  I would have thought that ANTLR  
> would issue a warning about the two empty alts; maybe it did and you  
> missed it.
>
> --Loring
> ----- Original Message ----
> From: Steve O'Hara <sohara at pivotal-solutions.co.uk>
> To: antlr-interest at antlr.org
> Sent: Thursday, March 27, 2008 4:27:33 PM
> Subject: [antlr-interest] Matching the * character
> I'm new to Antlr so forgive me if this is a stupid question...
> I'm trying to match a database search criteria that looks like the  
> following;
>
> 'some text'*, *'more criteria' & 'more criteria'*
>
> My grammar is;
>
> expression
>     : subExpression (WS? (COMMA | AMPERSAND) WS? subExpression)*
>     ;
>
> subExpression
>     : WS? (Identifier | subExpressionText) WS?
>     ;
>
> subExpressionText
>     :  (STAR | QUESTION*)? QuotedString  (STAR | QUESTION*)? WS?
>     ;
>
> Letter : 'a'..'z' | 'A'..'Z' | '_' | '\u0080'..'\ufffe' ;
> Digit : '0'..'9' ;
> Identifier : Letter (Letter | Digit)* ;
> QuotedString :'\'' (~'\'')* '\'' ;
> WS : (' ' | '\t' | '\n' | '\r')+ ;
>
> COMMA : ',' ;
> AMPERSAND : '&' ;
> QUESTION : '?' ;
> STAR : '*' ;
>
> The parser finds the first quoted string (some text) but fails after  
> that with a NoViableAltException. If I change the * to ? it works  
> fine. I'm waiting for delivery of the reference manual so maybe I'm  
> breaking some sort of golden rule here, but any help would be  
> greatly appreciated.
>
> Steve
>
> Steve O'Hara
> Pivotal Solutions
> ( +44 (0)7802 484227
>     +44 (0)208 660 7288 (Fax)
> *  sohara at pivotal-solutions.co.uk
>
>
>
> Be a better friend, newshound, and know-it-all with Yahoo! Mobile.  
> Try it now.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080327/8a45bff8/attachment.html 

From antlr at mirality.co.nz  Fri Mar 28 00:49:57 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 28 Mar 2008 20:49:57 +1300
Subject: [antlr-interest] Matching the * character
In-Reply-To: <E51BD230BBA3A64B9C01EF1A20EF5AE61C4D6A@pspub1.pivotal-solu
	tions.co.uk>
References: <586291.86937.qm@web55908.mail.re3.yahoo.com>
	<E51BD230BBA3A64B9C01EF1A20EF5AE61C4D6A@pspub1.pivotal-solutions.co.uk>
Message-ID: <20080328075018.519A011ECC5@www.antlr.org>

At 13:58 28/03/2008, Steve O'Hara wrote:
>Thanks for your help Loring ? unfortunately, it hasn?t helped.
>I?ve condensed the example down to something really simple;
>
>subExpressionText :  QuotedString STAR? WS?;
>QuotedString :'\'' (~'\'')* '\'' ( '\'' (~'\'')* '\'' )* ;
>WS : (' ' | '\t' | '\n' | '\r')+ ;
>STAR : '*' ;

That QuotedString rule seems like a very weird 
construction to me.  I guess it will work anyway, 
but I'd write it more like this (seems more 
explicit, and leaves room to add additional 
escapes later if you want to):

   QuotedString : '\'' (~'\'' | '\'\'')* '\'';

Not really relevant to your problem, but I'm not 
sure why you're getting the behaviour you're 
describing unless it's something like what Ter 
suggested and something else is messing with the 
input before it gets to the parser.  Or unless 
you've got additional rules you haven't shown us 
that are interfering.


From tas at ultersys.ru  Fri Mar 28 01:12:49 2008
From: tas at ultersys.ru (Andrey Timoshenkov)
Date: Fri, 28 Mar 2008 11:12:49 +0300
Subject: [antlr-interest] Discarding characters in lexer
In-Reply-To: <200803271935.m2RJZAdR097555@omega.ultersys.ru>
References: <47EBB6FA.5030204@ultersys.ru>
	<200803271935.m2RJZAdR097555@omega.ultersys.ru>
Message-ID: <47ECA881.5040801@ultersys.ru>

Thank you for the reply, now it is clear what I have to do.

Gavin Lambert wrote:
> At 04:02 28/03/2008, Andrey Timoshenkov wrote:
> >I have a possibly quick question about the lexical analyzer. In
> >version 2 there was a '!' operator that allowed to discard
> >characters from token text like this:
> >
> >STRING: '"'! ('"' '"'! | ~('"') )* '"'! ;
> >
> >It seems that it has gone in version 3. Is it possible to achieve
> >the same result in version 3?
>
> In v3, the ! operator only works in the parser (and affects AST 
> generation).  You can't use it in the lexer any more.
>
> To achieve the result you want now, you'll need to call $setText at 
> the end of the rule (which means you'll have to rescan the string 
> outside of ANTLR to convert escape sequences and the like).  Bit of a 
> hassle, I agree, but that's the only option for now.
>
>

From potrto at centrum.cz  Fri Mar 28 02:28:18 2008
From: potrto at centrum.cz (Tomas Potrusil)
Date: Fri, 28 Mar 2008 10:28:18 +0100
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
Message-ID: <000001c890b6$0f17e150$2d47a3f0$@cz>

Hallo,

 

I'm new to the list. I'm trying to use ANTLR for generating a SQL parser
because our current parser doesn't support Unicode input - it was generated
by Lex/Yacc. We use C++ and we have our own complex AST that is used by a
SQL engine already... So my idea is to write a tree adapter that would
create our existing AST nodes (they would just inherit ANTLR tree
interface).

 

And here comes a problem that ANTLR 3.x doesn't contain support for "pure"
C++ implementation. I've just found Jim Idle's "promise":

 

> Later I may well produce a complete C++ implementation from scratch,

> however, at this point I am not sure that it buys you anything. Please

> let me know if there are things you cannot do with the system as it

> stands (other than access the tokens and so on using C++ objects, which

> will be done later). 

 

I know that the problem could be solved with the current system somehow, but
it would be probably very ugly. So yes, complete C++ implementation will buy
us something! Or we can use ANTLR 2.x.

 

Right now we will probably try to build the AST by hand:

 

atom returns [OurNode* result]

@init { $result = NULL; }

:              NUMBER

                {

                               std::string str((char*)$NUMBER.text->chars,
$NUMBER.text->len);

                               $result = new OurNumberNode(str);

                };

 

Or do you have some other ideas?

 

Thanks

 

Tom

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/aa5043fd/attachment.html 

From sohara at pivotal-solutions.co.uk  Fri Mar 28 02:41:38 2008
From: sohara at pivotal-solutions.co.uk (Steve O'Hara)
Date: Fri, 28 Mar 2008 09:41:38 -0000
Subject: [antlr-interest] Matching the * character
In-Reply-To: <f08032807501749DA@local>
References: <586291.86937.qm@web55908.mail.re3.yahoo.com>
	<E51BD230BBA3A64B9C01EF1A20EF5AE61C4D6A@pspub1.pivotal-solutions.co.uk>
	<f08032807501749DA@local>
Message-ID: <E51BD230BBA3A64B9C01EF1A20EF5AE61C4D6D@pspub1.pivotal-solutions.co.uk>

Thanks Gavin for the tip.

Steve

-----Original Message-----
From: info at mirality.co.nz [mailto:info at mirality.co.nz] On Behalf Of
Gavin Lambert
Sent: 28 March 2008 07:50
To: Steve O'Hara; Loring Craymer; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Matching the * character

At 13:58 28/03/2008, Steve O'Hara wrote:
>Thanks for your help Loring - unfortunately, it hasn't helped.
>I've condensed the example down to something really simple;
>
>subExpressionText :  QuotedString STAR? WS?;
>QuotedString :'\'' (~'\'')* '\'' ( '\'' (~'\'')* '\'' )* ;
>WS : (' ' | '\t' | '\n' | '\r')+ ;
>STAR : '*' ;

That QuotedString rule seems like a very weird 
construction to me.  I guess it will work anyway, 
but I'd write it more like this (seems more 
explicit, and leaves room to add additional 
escapes later if you want to):

   QuotedString : '\'' (~'\'' | '\'\'')* '\'';

Not really relevant to your problem, but I'm not 
sure why you're getting the behaviour you're 
describing unless it's something like what Ter 
suggested and something else is messing with the 
input before it gets to the parser.  Or unless 
you've got additional rules you haven't shown us 
that are interfering.




From jimi at temporal-wave.com  Fri Mar 28 02:45:11 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 28 Mar 2008 17:45:11 +0800
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
In-Reply-To: <000001c890b6$0f17e150$2d47a3f0$@cz>
References: <000001c890b6$0f17e150$2d47a3f0$@cz>
Message-ID: <47ECBE27.2010507@temporal-wave.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/f7325068/attachment.html 

From jimi at temporal-wave.com  Fri Mar 28 02:52:26 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 28 Mar 2008 17:52:26 +0800
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
In-Reply-To: <000001c890b6$0f17e150$2d47a3f0$@cz>
References: <000001c890b6$0f17e150$2d47a3f0$@cz>
Message-ID: <47ECBFDA.2090603@temporal-wave.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/a3761157/attachment.html 

From felix_do at web.de  Fri Mar 28 02:52:58 2008
From: felix_do at web.de (Felix Dorner)
Date: Fri, 28 Mar 2008 10:52:58 +0100
Subject: [antlr-interest] ast for pre/postfix expressions
In-Reply-To: <20080327130742.GA10774@badgers-in-foil.co.uk>
References: <47EB63C9.7040904@web.de>
	<20080327130742.GA10774@badgers-in-foil.co.uk>
Message-ID: <47ECBFFA.3030008@web.de>

David Holroyd wrote:
>   postfixExpression
> 	:	(primaryExpression -> primaryExpression)
> 		( ... )*
> 		( 	in=INC -> ^(POST_INC[$in] $postfixExpression)
> 	 	|	de=DEC -> ^(POST_DEC[$de] $postfixExpression)
> 		)?
>
>   
Thanks. This is actually similar to what Gavin suggested, just that he 
missed a ')' after the first rewrite, so I got syntax errors..


Felix





From felix_do at web.de  Fri Mar 28 04:09:55 2008
From: felix_do at web.de (Felix Dorner)
Date: Fri, 28 Mar 2008 12:09:55 +0100
Subject: [antlr-interest] gunit with custom AST nodes throws
	InvocationTargetException
Message-ID: <47ECD203.4030303@web.de>

Hey,

Until yesterday my gUnit tests ran fine in "Interpreter" mode. I now 
switched to a custom AST implementation (see below). Now, running the 
gUnit test simply exits without any output. Generating the JUnit test, 
and running that throws an InvocationTargetException when it tries to 
run a parser rule by reflection. The Exception is caused by a 
ClassCastException. Somewhere there's a cast from CommonTreeNode to my 
AST type is executed (which obviously fails..)

Has anyone had the same problem?
Felix


package allure.parser.ast;

import org.antlr.runtime.Token;
import org.antlr.runtime.tree.CommonTree;

import allure.parser.symbols.Scope;
import allure.parser.symbols.Symbol;

public class AST extends CommonTree {

    // The symbol that this node refers to
    public Symbol symbol;
   
    // The scope associated with this subtree
    public Scope scope;
   
    public AST(Token t){
        super(t);
    }
   
}

import org.antlr.runtime.Token;
import org.antlr.runtime.tree.CommonTreeAdaptor;

public class ASTAdaptor extends CommonTreeAdaptor {
   
    public Object create(Token payload) {
        return new AST(payload);
    }

}




From sunshine at public.kherson.ua  Fri Mar 28 04:19:35 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Fri, 28 Mar 2008 13:19:35 +0200
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
In-Reply-To: <47ECBFDA.2090603@temporal-wave.com>
Message-ID: <C412A0E7.93F7D%sunshine@public.kherson.ua>

On 3/28/08 11:52 AM, "Jim Idle" <jimi at temporal-wave.com> wrote:

Hi Jim,

> Tomas Potrusil wrote:
> 
> I should add that if you really need to build C++ strings from the token, then
> you should  probably not use the .text attribute of the token. That is really
> just a convenience method. Write yourself a class with a constructor that
> accepts a token as input and constructs the C++ string directly. That is all
> that the C runtime does internally and there is no need to incur the overhead
> of getting the C runtime to produce the token text, when you can take it
> directly from the input stream.

Why not add such C++ class into ANTLR 3.1 = 3.1for C target ?

So each C++ user will not reinvent a bike.

 
> If you have your own tree constructor then you could just implement an
> interface to it by implementing your own tree adapter and tree nodes that
> encapsulate your own tree.
 
>> From what you say here, a pure C++ runtime would give you no advantage at all
>> over what you have. The first thing to do is to back away from putting much
>> of ANY action code in to the grammar.
> 
> Just use helper classes to build the tree and pass in $NUMBER directly. Then
> you can use the properties in the structure you get to build your string in an
> external method. The parser should then have MyHelperClass in @members.

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From felix_do at web.de  Fri Mar 28 04:30:02 2008
From: felix_do at web.de (Felix Dorner)
Date: Fri, 28 Mar 2008 12:30:02 +0100
Subject: [antlr-interest] gunit with custom AST nodes
	throws	InvocationTargetException
In-Reply-To: <47ECD203.4030303@web.de>
References: <47ECD203.4030303@web.de>
Message-ID: <47ECD6BA.1040308@web.de>

Uhm, I guess I don't have a complete Tree/TreeAdaptor implementation.

I should probably override "dupNode()" in my AST definition. Currently 
this is inherited, I guess there is where CommonTree Objects get into 
the tree, which later leads to the ClassCastException..



From potrto at centrum.cz  Fri Mar 28 05:43:12 2008
From: potrto at centrum.cz (Tomas Potrusil)
Date: Fri, 28 Mar 2008 13:43:12 +0100
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
In-Reply-To: <47ECBE27.2010507@temporal-wave.com>
References: <000001c890b6$0f17e150$2d47a3f0$@cz>
	<47ECBE27.2010507@temporal-wave.com>
Message-ID: <000d01c890d1$49009a40$db01cec0$@cz>

Oh yes, I know. I've already made a prototype implementation of a part of
the grammar based on the idea I presented bellow (atom returns [OurNode*
result] etc.). It is working but it is a little bit clumsy and I cannot use
the resulting AST for a tree parsing - of course, I'm creating my own AST.

 

I've been thinking about the new tree adapter (I was talking about bellow)
and probably you are true,  few C++ wrappers could do the work. But there is
one inconvenience - there is not an "abstract" tree yet. The most abstract
tree is ANTLR3_BASE_TREE_struct which contains children vector and other
attributes. The ANTLR3_TREE_struct with only pointers to functions
(something like a Java interface) would suit my needs better. Our existing
AST nodes solve the storage already. Could you do it, please?

 

Another problem is safety. When somebody call
ANTLR3_BASE_TREE_struct::addChild(pANTLR3_BASE_TREE tree) for example, I
must trust him that the tree argument is really the tree he is calling. I
cannot write dynamic_cast<MyTreeWrapper>(tree->super). This cannot be solved
in the current C-based system.

 

Tom

 

From: Jim Idle

 

ANTLR 3.1 C target can now incorporate C++ code directly into the grammar
and so can easily call your existing C++ code. All you do is compile the C
output file as C++ (or rename it to .cpp perhaps). 

Can you try using that and let me know if you think that there is anything
that you could do if the runtime was C++ that you can't do right now? I
don't really think that there will be.

You need to get the latest 3.1 snapshot from the downloads page and use the
ANTLR Tool hjar in there. Then build the ANTLR 3.1 C runtime from the tar.gz
in the dist director under the runtime/C directory in the snapshot. 3 or 4
people have successfully integrated their C++ code with the C target now and
I think you will have similar success :-)

Jim

 

-----



Hallo,

 

I'm new to the list. I'm trying to use ANTLR for generating a SQL parser
because our current parser doesn't support Unicode input - it was generated
by Lex/Yacc. We use C++ and we have our own complex AST that is used by a
SQL engine already... So my idea is to write a tree adapter that would
create our existing AST nodes (they would just inherit ANTLR tree
interface).

 

And here comes a problem that ANTLR 3.x doesn't contain support for "pure"
C++ implementation. I've just found Jim Idle's "promise":

 

> Later I may well produce a complete C++ implementation from scratch,

> however, at this point I am not sure that it buys you anything. Please

> let me know if there are things you cannot do with the system as it

> stands (other than access the tokens and so on using C++ objects, which

> will be done later). 

 

I know that the problem could be solved with the current system somehow, but
it would be probably very ugly. So yes, complete C++ implementation will buy
us something! Or we can use ANTLR 2.x.

 

Right now we will probably try to build the AST by hand:

 

atom returns [OurNode* result]

@init { $result = NULL; }

:              NUMBER

                {

                               std::string str((char*)$NUMBER.text->chars,
$NUMBER.text->len);

                               $result = new OurNumberNode(str);

                };

 

Or do you have some other ideas?

 

Thanks

 

Tom

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/a8b60415/attachment.html 

From felix_do at web.de  Fri Mar 28 06:03:08 2008
From: felix_do at web.de (Felix Dorner)
Date: Fri, 28 Mar 2008 14:03:08 +0100
Subject: [antlr-interest] gunit with custom AST nodes
	throws	InvocationTargetException
In-Reply-To: <47ECD203.4030303@web.de>
References: <47ECD203.4030303@web.de>
Message-ID: <47ECEC8C.6040100@web.de>

Ok,

lot of things to learn. The gUnit creates a Parser instance and 
obviously does not set its TreeAdaptor to my ASTAdaptor, therefore the 
Parser creates CommonTree nodes. Then, some questions arise:

As I learned from the Book, I set the parser's TreeAdaptor from 
_outside_ the parser. I don't see a simple way to implicitly set the 
Adaptor from _within_ the parser, when using the default constructor 
(which gUnit does). Is there a reason why there's nothing like, e.g. a 
parser option "Adapter" or so?

So either gUnit would provide an option to set the desired Adaptor, or I 
find a way to implicitly set the Adaptor from within the grammar.

Thanks for your comments,
Felix


From vincedupuis at hotmail.com  Fri Mar 28 08:52:40 2008
From: vincedupuis at hotmail.com (Vincent Dupuis)
Date: Fri, 28 Mar 2008 11:52:40 -0400
Subject: [antlr-interest] (no subject)
Message-ID: <BAY132-W515CE8342802F90A8C6A18B6F90@phx.gbl>


Hello,
 
I don't know if this is the right post for these kind (level) of question. (If not, tell me where to do it)
 
I'm a new user of antlr 3 and StringTemplate.
 
Question:
Is it possible, in a template, to obtain the "parent" values.
 
Example:
 
file(name, methods) ::= <</* * Generated <name>
 */
 
<methods; separator="\n\n">>>
 
method(retType, name, params) ::= <<<retType> <file.name>::<name>(<params>){}>>
 
Of course the <file.name> doesn't work but it's what I want.
Do I need to pass the file.name for every method as a parameter?
 
Thanks,
 
Vincent
 
 
_________________________________________________________________
Envoie un sourire, fair rire, amuse-toi! Employez-le maintenant!
http://g.msn.ca/ca55/209
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/a872a438/attachment-0001.html 

From felix_do at web.de  Fri Mar 28 11:30:53 2008
From: felix_do at web.de (Felix Dorner)
Date: Fri, 28 Mar 2008 19:30:53 +0100
Subject: [antlr-interest] catching custom exceptions thrown from actions
Message-ID: <47ED395D.9090601@web.de>

Hey,

when one of the methods called in an Action throws an Exception, I catch 
this with
..
;
catch [MyCustomException]{...}

but then the usually inserted

catch (RecognitionException e)
..
}

gets lost. So every time I catch a custom Exception do I also need to 
insert a catch for the RecognitionException, if I want to preserve the 
default behavior:

catch[MyCustomException e] { ... }
catch[RecognitionException e] { //manually insert what antlr would 
otherwise do himself???; }


I'm lost..
Felix



From leon.antlr at mac.com  Fri Mar 28 12:00:50 2008
From: leon.antlr at mac.com (Leon Su)
Date: Fri, 28 Mar 2008 12:00:50 -0700
Subject: [antlr-interest] gunit with custom AST nodes	throws
	InvocationTargetException
In-Reply-To: <47ECEC8C.6040100@web.de>
References: <47ECD203.4030303@web.de> <47ECEC8C.6040100@web.de>
Message-ID: <82F6F9FE-E7B8-4530-86E4-BCBD500D8ADA@mac.com>

Hi Felix,

Thanks for addressing this issue. The current version of junit  
translator doesn't support custom adaptor.
For adding a custom adaptor to it, you could manually add the 2  
statements to the method "execParser" right
after creating a parser:
	XXXParser parser = new XXXParser(tokens)    // gunit gererates this  
for you
	XXXAdaptor adaptor = new XXXAdaptor();
	parser.setTreeAdaptor(adaptor);    // use custom adaptor

I'm going to release a newer version of gunit with some bugs fixed  
nowadays, and I may fix this either in this
release or the next. I am also thinking to add an option in gunit for  
using a custom adaptor.

Leon

On Mar 28, 2008, at 6:03 AM, Felix Dorner wrote:

> Ok,
>
> lot of things to learn. The gUnit creates a Parser instance and  
> obviously does not set its TreeAdaptor to my ASTAdaptor, therefore  
> the Parser creates CommonTree nodes. Then, some questions arise:
>
> As I learned from the Book, I set the parser's TreeAdaptor from  
> _outside_ the parser. I don't see a simple way to implicitly set  
> the Adaptor from _within_ the parser, when using the default  
> constructor (which gUnit does). Is there a reason why there's  
> nothing like, e.g. a parser option "Adapter" or so?
>
> So either gUnit would provide an option to set the desired Adaptor,  
> or I find a way to implicitly set the Adaptor from within the grammar.
>
> Thanks for your comments,
> Felix
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/cef50f74/attachment.html 

From chris at lambrou.net  Fri Mar 28 13:13:32 2008
From: chris at lambrou.net (Chris Lambrou)
Date: Fri, 28 Mar 2008 20:13:32 +0000
Subject: [antlr-interest] JavaScript grammar
Message-ID: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>

Hi all,

I couldn't get the ECMAScript by Greg Clemenson on the Grammar List page to
work. It's supposed to run in v3.0 without any issues, but I ran into a
whole host of problems. Since I'm fairly new to ANTLR, I thought I'd work my
way through Terence's book and have a stab at writing a JavaScript grammar
from scratch as a learning exercise. Well, I've reached a point where the
script may be useful to others, so I've attached it - it compiles cleanly,
without any warnings. I could also do with some advice, though.*
*

   1. Unlike other whitespace characters, line separators (represented by
   my LT token type) are important in JavaScript, as you're allowed to use them
   to terminate statements instead of the usual terminating semicolon
   character. As a result, I cannot 'hide' line separators like other
   whitespace characters, and my grammar is peppered with LT!* sequences. Is
   there a way to place the LT tokens on the hidden channel, and then
   optionally reveal them only in the few rules that require it?
   2. The grammar doesn't include any ^ or ! modifiers to impose any kind
   of useful structure to the generated AST. I can see how I ought to do this
   in the simple cases (e.g. 'return'^ expression), but I'm not sure how
   far I ought to go with this before relying on a subsequent tree grammar to
   finish the job.

I haven't performed much in the way of formal testing, except that it seems
to work with everything I've thrown at it using the ANTLRWorks debugger. I
guess I ought to look into writing some gunit tests...

Regards,

Chris
**
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/99d7c400/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ECMAScript.g
Type: application/octet-stream
Size: 34931 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/99d7c400/attachment-0001.obj 

From parrt at cs.usfca.edu  Fri Mar 28 13:42:47 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Mar 2008 13:42:47 -0700
Subject: [antlr-interest] accessing parent attributes
In-Reply-To: <BAY132-W515CE8342802F90A8C6A18B6F90@phx.gbl>
References: <BAY132-W515CE8342802F90A8C6A18B6F90@phx.gbl>
Message-ID: <E162C2A9-C426-4662-AB94-94433E34AF4C@cs.usfca.edu>

Hi. You can't access the attr from surrounding template because you've  
hidden it with redef of parameter. Just use fname and mname or  
something.

Ter
On Mar 28, 2008, at 8:52 AM, Vincent Dupuis wrote:

> Hello,
>
> I don't know if this is the right post for these kind (level) of  
> question. (If not, tell me where to do it)
>
> I'm a new user of antlr 3 and StringTemplate.
>
> Question:
> Is it possible, in a template, to obtain the "parent" values.
>
> Example:
>
> file(name, methods) ::= <<
> /*
>  * Generated <name>
>  */
>
> <methods; separator="\n\n">
> >>
>
> method(retType, name, params) ::= <<
> <retType> <file.name>::<name>(<params>)
> {
> }
> >>
>
> Of course the <file.name> doesn't work but it's what I want.
> Do I need to pass the file.name for every method as a parameter?
>
> Thanks,
>
> Vincent
>
>
>
> Envoie un sourire, fair rire, amuse-toi! Employez-le maintenant!

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080328/7ac8c64d/attachment.html 

From antlr at shmuelhome.mine.nu  Sat Mar 29 13:04:49 2008
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Sat, 29 Mar 2008 23:04:49 +0300
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
Message-ID: <47EEA0E1.1070700@shmuelhome.mine.nu>

Chris Lambrou wrote:
> Hi all,
>
> I couldn't get the ECMAScript by Greg Clemenson on the Grammar List 
> page to work. It's supposed to run in v3.0 without any issues, but I 
> ran into a whole host of problems. Since I'm fairly new to ANTLR, I 
> thought I'd work my way through Terence's book and have a stab at 
> writing a JavaScript grammar from scratch as a learning exercise. 
> Well, I've reached a point where the script may be useful to others, 
> so I've attached it - it compiles cleanly, without any warnings. I 
> could also do with some advice, though.*
> *
>
>    1. Unlike other whitespace characters, line separators (represented
>       by my LT token type) are important in JavaScript, as you're
>       allowed to use them to terminate statements instead of the usual
>       terminating semicolon character. As a result, I cannot 'hide'
>       line separators like other whitespace characters, and my grammar
>       is peppered with LT!* sequences. Is there a way to place the LT
>       tokens on the hidden channel, and then optionally reveal them
>       only in the few rules that require it?
>    2. The grammar doesn't include any ^ or ! modifiers to impose any
>       kind of useful structure to the generated AST. I can see how I
>       ought to do this in the simple cases (e.g. 'return'^
>       expression), but I'm not sure how far I ought to go with this
>       before relying on a subsequent tree grammar to finish the job.
>
> I haven't performed much in the way of formal testing, except that it 
> seems to work with everything I've thrown at it using the ANTLRWorks 
> debugger. I guess I ought to look into writing some gunit tests...
>
> Regards,
>
> Chris
> **
Virtual semicolons is a hard concept. In a different environment (not 
antlr) I had a concept of token pairs. If a line feed occurred between 
certain token pairs, for instance two identifiers, then I replaced the 
line feed by a virtual semicolon. This means that you have to track the 
last two tokens.
There are two types of cases that need special treatment.
    1) Control statements, like break, return etc, if not followed by an 
expression on the same line, alway have the linefeed turned into a 
virtual semicolon.
    2) Right paren followed by any token that could start an expression 
will generate a virtual semicolon so the parser will need to accept 
virtual semicolons as whitespace for "for", "while", and "if" statements.

I can discuss details with you off -line if you need further guidance.


From chris at lambrou.net  Sat Mar 29 14:44:32 2008
From: chris at lambrou.net (Chris Lambrou)
Date: Sat, 29 Mar 2008 21:44:32 +0000
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <47EEA0E1.1070700@shmuelhome.mine.nu>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
	<47EEA0E1.1070700@shmuelhome.mine.nu>
Message-ID: <70bbae280803291444h74f31e66m80165e74d8f5b518@mail.gmail.com>

All,

Oh dear. I'm afraid I mucked up - sorry! I had Greg's original grammar,
ECMAScript.g, open alongside the script I wrote, JavaScript.g. In my
original message I attached the wrong one.

Anyhow, here's the right one. Terence, an incorrect entry has appeared on
your grammar list page. Can it please be updated.

Chris


On 29/03/2008, shmuel siegel <antlr at shmuelhome.mine.nu> wrote:
>
> Chris Lambrou wrote:
> > Hi all,
> >
> > I couldn't get the ECMAScript by Greg Clemenson on the Grammar List
> > page to work. It's supposed to run in v3.0 without any issues, but I
> > ran into a whole host of problems. Since I'm fairly new to ANTLR, I
> > thought I'd work my way through Terence's book and have a stab at
> > writing a JavaScript grammar from scratch as a learning exercise.
> > Well, I've reached a point where the script may be useful to others,
> > so I've attached it - it compiles cleanly, without any warnings. I
>
> [snip snip]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080329/08f6ebb4/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: JavaScript.g
Type: application/octet-stream
Size: 17738 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080329/08f6ebb4/attachment-0001.obj 

From parrt at cs.usfca.edu  Sat Mar 29 15:00:50 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 29 Mar 2008 15:00:50 -0700
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <70bbae280803291444h74f31e66m80165e74d8f5b518@mail.gmail.com>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
	<47EEA0E1.1070700@shmuelhome.mine.nu>
	<70bbae280803291444h74f31e66m80165e74d8f5b518@mail.gmail.com>
Message-ID: <0335095E-F43C-42F2-B824-C3F2479A658E@cs.usfca.edu>

updated site.

http://www.antlr.org/grammar/1206736738015/JavaScript.g

Ter
On Mar 29, 2008, at 2:44 PM, Chris Lambrou wrote:

> All,
>
> Oh dear. I'm afraid I mucked up - sorry! I had Greg's original  
> grammar, ECMAScript.g, open alongside the script I wrote,  
> JavaScript.g. In my original message I attached the wrong one.
>
> Anyhow, here's the right one. Terence, an incorrect entry has  
> appeared on your grammar list page. Can it please be updated.
>
> Chris
>
>
> On 29/03/2008, shmuel siegel <antlr at shmuelhome.mine.nu> wrote:
> Chris Lambrou wrote:
> > Hi all,
> >
> > I couldn't get the ECMAScript by Greg Clemenson on the Grammar List
> > page to work. It's supposed to run in v3.0 without any issues, but I
> > ran into a whole host of problems. Since I'm fairly new to ANTLR, I
> > thought I'd work my way through Terence's book and have a stab at
> > writing a JavaScript grammar from scratch as a learning exercise.
> > Well, I've reached a point where the script may be useful to others,
> > so I've attached it - it compiles cleanly, without any warnings. I
>
> [snip snip]
> <JavaScript.g>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080329/ee702fd0/attachment.html 

From dave at badgers-in-foil.co.uk  Sat Mar 29 15:57:57 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sat, 29 Mar 2008 22:57:57 +0000
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
Message-ID: <20080329225756.GB12784@badgers-in-foil.co.uk>

On Fri, Mar 28, 2008 at 08:13:32PM +0000, Chris Lambrou wrote:
>    1. Unlike other whitespace characters, line separators (represented by
>    my LT token type) are important in JavaScript, as you're allowed to use them
>    to terminate statements instead of the usual terminating semicolon
>    character. As a result, I cannot 'hide' line separators like other
>    whitespace characters, and my grammar is peppered with LT!* sequences. Is
>    there a way to place the LT tokens on the hidden channel, and then
>    optionally reveal them only in the few rules that require it?

I attempted[1] to approach this by having a rule like,

  semi
	:	SEMI!
	|	{ virtualSemi() }?  /* then empty alt is allowed */
	;

then defining the virtualSemi() function to return true if there's a
newline in the whitespace preceding the current location in the token
stream (i.e. hunt back through any hidden-channel tokens).

However I must admit that due to ambiguities that ANTLR started
reporting, I commented out the second alt for the moment :(


ta,
dave

[1] http://svn.badgers-in-foil.co.uk/metaas/trunk/src/main/antlr/org/asdt/core/internal/antlr/AS3.g3

-- 
http://david.holroyd.me.uk/

From shro8822 at vandals.uidaho.edu  Sat Mar 29 21:15:35 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Sat, 29 Mar 2008 21:15:35 -0700
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
Message-ID: <BAYC1-PASMTP04A88DA32D362FF409C90DF5FB0@CEZ.ICE>

Chris Lambrou wrote:
> Hi all,
>
> I couldn't get the ECMAScript by Greg Clemenson on the Grammar List 
> page to work. It's supposed to run in v3.0 without any issues, but I 
> ran into a whole host of problems. Since I'm fairly new to ANTLR, I 
> thought I'd work my way through Terence's book and have a stab at 
> writing a JavaScript grammar from scratch as a learning exercise. 
> Well, I've reached a point where the script may be useful to others, 
> so I've attached it - it compiles cleanly, without any warnings. I 
> could also do with some advice, though.*
> *
>
>    1. Unlike other whitespace characters, line separators (represented
>       by my LT token type) are important in JavaScript, as you're
>       allowed to use them to terminate statements instead of the usual
>       terminating semicolon character. As a result, I cannot 'hide'
>       line separators like other whitespace characters, and my grammar
>       is peppered with LT!* sequences. Is there a way to place the LT
>       tokens on the hidden channel, and then optionally reveal them
>       only in the few rules that require it?
>    2. The grammar doesn't include any ^ or ! modifiers to impose any
>       kind of useful structure to the generated AST. I can see how I
>       ought to do this in the simple cases (e.g. 'return'^
>       expression), but I'm not sure how far I ought to go with this
>       before relying on a subsequent tree grammar to finish the job.
>
> I haven't performed much in the way of formal testing, except that it 
> seems to work with everything I've thrown at it using the ANTLRWorks 
> debugger. I guess I ought to look into writing some gunit tests...
>
> Regards,
>
> Chris

It is most likely not kosher, but if you can look at an LT in a sequence 
of tokens test if it is a virtual semicolon (without knowing anything 
but the adjoining tokens) then some sort of preprocessor (I'm thinking: 
lex, filter tokens into new lex stream, parse) might be able to convert 
what is needed. You might call the filter a TokenSedStream or something 
like that. I did something like that (but with the text) to deal with 
indentation sensitivity in my only attempt with ANTLR. As I said, not 
kosher, but if all else fails "You gotta go with what works." (Law #37)

From chris at lambrou.net  Sat Mar 29 22:43:00 2008
From: chris at lambrou.net (Chris Lambrou)
Date: Sun, 30 Mar 2008 06:43:00 +0100
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <BAYC1-PASMTP04A88DA32D362FF409C90DF5FB0@CEZ.ICE>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com>
	<BAYC1-PASMTP04A88DA32D362FF409C90DF5FB0@CEZ.ICE>
Message-ID: <70bbae280803292243k2d575d3et4b67945a013e03dc@mail.gmail.com>

The approach I took was to keep LT tokens on the default channel, for the
benefit of the few rules where line terminators are important. For example,
the ECMAScript spec defines a return statement as follows:

'return' [no LineTerminator here] Expression[optional] ';'

In the ANTLR grammar, this becomes:

returnStatement : 'return' expression (LT | ';')! ;

You can see that the statement may end either with a semicolon or with a
line terminator, which the ECMAScript spec permits. This appears to work
just fine. The only part I find annoying is that because the LT tokens are
not on the hidden channel, all of the other rules need to deal with them
too. For example, the ifStatement rule looks like this:

ifStatement : 'if' LT!* '(' LT!* expression LT!* ')' LT!* statement (LT!*
'else' LT!* statement)? ;

when it would be much clearer if it looked like this:

ifStatement : 'if' '(' expression ')' statement ('else' statement)? ;

This affects all of the parser rules, which makes the grammar less readable.
I did think about performing some filtering of the token stream between the
lexing and parsing phases, but the rules for automatic semicolon insertion
defined by the ECMAScript are a bit nasty. It's just too difficult to
actually determine where the virtual semicolons should be, without the
grammatical context that only the parsing stage can provide. In any case, I
think the grammar would be less useful if it required any special runtime
tweaks to make it work.

I think what would really solve the problem would be to have the LT tokens
on the hidden channel by default, and then dynamically switch them to the
default channel only for those rules that require it. I'm afraid I'm not yet
familiar enough with channels and token streams to know if this is even
possible. My guess is that it probably isn't, but it can't hurt to ask.

Chris

P.S. I've just remembered that although the grammar compiles just fine, I
couldn't get it to work with the ANTLRWorks debugger. It seems like it's the
huge Identifier lexer rule that causes the problem - I had to temporarily
replace it with something simpler in order to persuade the debugger to work.
I presume this is a bug in ANTLRWorks - if anyone is interested in this, I
can provide more information, perhaps off-line.


On 30/03/2008, Benjamin Shropshire <shro8822 at vandals.uidaho.edu> wrote:
>
> Chris Lambrou wrote:


[snip]

>    1. Unlike other whitespace characters, line separators (represented
>
> >       by my LT token type) are important in JavaScript, as you're
> >       allowed to use them to terminate statements instead of the usual
> >       terminating semicolon character. As a result, I cannot 'hide'
> >       line separators like other whitespace characters, and my grammar
> >       is peppered with LT!* sequences. Is there a way to place the LT
> >       tokens on the hidden channel, and then optionally reveal them
> >       only in the few rules that require it?


[snip]

It is most likely not kosher, but if you can look at an LT in a sequence
> of tokens test if it is a virtual semicolon (without knowing anything
> but the adjoining tokens) then some sort of preprocessor (I'm thinking:
> lex, filter tokens into new lex stream, parse) might be able to convert
> what is needed. You might call the filter a TokenSedStream or something
> like that. I did something like that (but with the text) to deal with
> indentation sensitivity in my only attempt with ANTLR. As I said, not
> kosher, but if all else fails "You gotta go with what works." (Law #37)
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/f58662d2/attachment.html 

From elekis at gmail.com  Sun Mar 30 01:19:55 2008
From: elekis at gmail.com (jabon)
Date: Sun, 30 Mar 2008 10:19:55 +0200
Subject: [antlr-interest] eclipse plugin unexpected token, grammar.
Message-ID: <47EF4D2B.3040501@gmail.com>

hi all

I try to use the antlr plugin but I have a error.

I ve create a file named yaflplug.g and inside I have a simple grammar 
(see below).

In command line, no problem but in the antlr ?ditor. I have the 
following error.
unexpected error : grammar.

do you have any idea?? thanks

a++

grammar yaflplug;
tokens {
    PLUS     = '+' ;
    MINUS    = '-' ;
    MULT    = '*' ;
    DIV    = '/' ;
}
/*------------------------------------------------------------------
 * PARSER RULES
 *------------------------------------------------------------------*/

expr    : term ( ( PLUS | MINUS )  term )* ;

term    : factor ( ( MULT | DIV ) factor )* ;

factor    : NUMBER ;


/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/

NUMBER    : (DIGIT)+ ;

WHITESPACE : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+     { $channel = 
HIDDEN; } ;

fragment DIGIT    : '0'..'9' ;


From pat at tireme.fr  Sun Mar 30 02:50:44 2008
From: pat at tireme.fr (Pierre Attar)
Date: Sun, 30 Mar 2008 11:50:44 +0200
Subject: [antlr-interest] C target recognition problem
In-Reply-To: <000001c890b6$0f17e150$2d47a3f0$@cz>
References: <000001c890b6$0f17e150$2d47a3f0$@cz>
Message-ID: <47EF6274.7050708@tireme.fr>

Hi,

I'm running the following rule in ANTLRWorks with an input such as 
f"blabla"f :

FString : '\u0022'  ~('\u0022')+ '\u0022';
 and "blabla" is recognized as a string .... it works perfectly.


But in fact, I'm using the C generator in a C++ environment so all code 
is included as extern "C".
Also, in my reality, the string to analyze is created in memory by an 
other ANTLR recognition wich creates XMLString (wchar).

So my lexer recognizer is defined as
        input = antlr3NewUCS2StringInPlaceStream ((pANTLR3_UINT16) 
str,(ANTLR3_UINT64) XMLString::stringLen(str), NULL);

Doing that, it seems that the lexer is able to recognize the str but 
when I try to get the text from the recognized string
FString2->getText(FString2)->chars

 I have a nothing ("") sting.

Any ideas on where may be the problem ? I'm quite sure it is a character 
coding problem but I'm not able to find where are the contradictions ...

Thaks al lot for help,

Pierre




From elekis at gmail.com  Sun Mar 30 07:31:18 2008
From: elekis at gmail.com (jabon)
Date: Sun, 30 Mar 2008 16:31:18 +0200
Subject: [antlr-interest] problem with option, and double kot
Message-ID: <47EFA436.6030501@gmail.com>

hi all,

I begun to use antlr (the main goal is to make a plugin eclipse with a 
new language).
but I have trouble with options.

exemple if I have a token like this

LPAREN:
options {paraphrase="'('";}
'(';
or even

tokens {
    PLUS     = "+";
}
I have lots of error
.
yaflplug.g:47:7: unexpected token: :
error(100): yaflplug__.g:47:7: syntax error: antlr: yaflplug__.g:47:7: 
unexpecte
d token: :

it's the same thing for begun options like

options {
k=2;
charVocabulary = '\3'..'\377';
}

C:\Program Files\eclipse>java -classpath "C:\Documents and 
Settings\elekis\works
pace\grammarTest\src"\antlrworks-1.1.7.jar org.antlr.Tool "C:\Documents 
and Sett
ings\elekis\workspace\grammarTest\src"\yaflplug.g
ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007

error(100): C:\Documents and 
Settings\elekis\workspace\grammarTest\src\yaflplug.
g:5:22: syntax error: antlr: C:\Documents and 
Settings\elekis\workspace\grammarT
est\src\yaflplug.g:5:22: expecting SEMI, found '..'
error(133): C:\Documents and 
Settings\elekis\workspace\grammarTest\src\yaflplug.
g:3:1: illegal option charVocabulary
error(100): C:\Documents and 
Settings\elekis\workspace\grammarTest\src\yaflplug.
g:47:7: syntax error: antlr: C:\Documents and 
Settings\elekis\workspace\grammarT
est\src\yaflplug.g:47:7: unexpected token: :
error(100): yaflplug__.g:47:7: syntax error: antlr: yaflplug__.g:47:7: 
unexpecte
d token: :
warning(208): C:\Documents and 
Settings\elekis\workspace\grammarTest\src\yaflplu
g.g:55:1: The following token definitions are unreachable: STAR



any idea???

thanks

a++


From dave at badgers-in-foil.co.uk  Sun Mar 30 07:44:43 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 30 Mar 2008 14:44:43 +0000
Subject: [antlr-interest] problem with option, and double kot
In-Reply-To: <47EFA436.6030501@gmail.com>
References: <47EFA436.6030501@gmail.com>
Message-ID: <20080330144442.GA26368@badgers-in-foil.co.uk>

On Sun, Mar 30, 2008 at 04:31:18PM +0200, jabon wrote:
> I begun to use antlr (the main goal is to make a plugin eclipse with a 
> new language).
> but I have trouble with options.

Looks like you're trying to copy examples of ANTLR2 syntax, but you're
processing the grammar with ANTLR3...

> exemple if I have a token like this
> 
> LPAREN:
> options {paraphrase="'('";}
> '(';

'paraphrase' is not available in ANTLR3.

> or even
> tokens {
>    PLUS     = "+";
> }

in ANTLR3, you have to use single ('), not double quotes (").


Try to find ANTLR3-specific examples to learn from, or if you've got a
specific grammar you're trying to adapt, this may help,

  http://www.antlr.org/wiki/display/ANTLR3/Migrating+from+ANTLR+2+to+ANTLR+3



ta,
dave

-- 
http://david.holroyd.me.uk/

From elekis at gmail.com  Sun Mar 30 08:22:54 2008
From: elekis at gmail.com (jabon)
Date: Sun, 30 Mar 2008 17:22:54 +0200
Subject: [antlr-interest] problem with option, and double kot
In-Reply-To: <20080330144442.GA26368@badgers-in-foil.co.uk>
References: <47EFA436.6030501@gmail.com>
	<20080330144442.GA26368@badgers-in-foil.co.uk>
Message-ID: <47EFB04E.6070708@gmail.com>

This is exacly that.

thanks

a+++

David Holroyd a ?crit :
> On Sun, Mar 30, 2008 at 04:31:18PM +0200, jabon wrote:
>   
>> I begun to use antlr (the main goal is to make a plugin eclipse with a 
>> new language).
>> but I have trouble with options.
>>     
>
> Looks like you're trying to copy examples of ANTLR2 syntax, but you're
> processing the grammar with ANTLR3...
>
>   
>> exemple if I have a token like this
>>
>> LPAREN:
>> options {paraphrase="'('";}
>> '(';
>>     
>
> 'paraphrase' is not available in ANTLR3.
>
>   
>> or even
>> tokens {
>>    PLUS     = "+";
>> }
>>     
>
> in ANTLR3, you have to use single ('), not double quotes (").
>
>
> Try to find ANTLR3-specific examples to learn from, or if you've got a
> specific grammar you're trying to adapt, this may help,
>
>   http://www.antlr.org/wiki/display/ANTLR3/Migrating+from+ANTLR+2+to+ANTLR+3
>
>
>
> ta,
> dave
>
>   


From ymo.mail at gmail.com  Sun Mar 30 09:12:58 2008
From: ymo.mail at gmail.com (Ymo)
Date: Sun, 30 Mar 2008 12:12:58 -0400
Subject: [antlr-interest] Input parsing ending before end of file
Message-ID: <7196ed5b0803300912t6128cba2jb4df5c84eebdb7f2@mail.gmail.com>

Hi i am trying to parse an input file and the generated parser seems to just
quit without apparent errors :

input file :
package org.test;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTreeNodeStream;
import org.antlr.runtime.tree.Tree;

{ // As soon as it sees the braces it just exits  !

// if i put the braces inside the define block everything is fine.
// how do i even stop any kind of text entered between the import & the
define block ?

? define main for Object ?

/*
*/

{

//debug test1

fgsadfgsdf

fgsadfgsdf {

fgsadfgsdf    .; x000 x


? enddefine ?

grammar:
templateFile
   :  packageDeclaration?
      importDeclaration*
      templateDeclaration*
   ;

packageDeclaration
   :  'package' qualifiedName ';'
   ;

importDeclaration
   :  'import' 'static'? Identifier ('.' Identifier)* ('.' '*')? ';'
   ;

templateDeclaration
   : LG
      textBlock*
     ( defineDeclaration textBlock )*
   ;

defineDeclaration
   :  'define' Identifier 'for' type=qualifiedName
      textBlock
      'enddefine'
   ;

//textDeclaration
//   :  t1=textBlock { System.out.println("t1:"+t1.getTree());}
//      ( t2=textBlock { System.out.println("t2:"+t2.getTree());})*
//   ;

textBlock : RG (~LG)* LG?;

typeDeclaration
   : collectionType | simpleType
   ;

simpleType
   : type=qualifiedName
   ;

collectionType
   : col=( 'Collection' | 'List' | 'Set' )
     ('[' simpleType ']' )?
   ;

qualifiedName
   :  Identifier ('.' Identifier)*
   ;

// LEXER

HexLiteral : '0' ('x'|'X') HexDigit+ IntegerTypeSuffix? ;

DecimalLiteral : ('0' | '1'..'9' '0'..'9'*) IntegerTypeSuffix? ;

OctalLiteral : '0' ('0'..'7')+ IntegerTypeSuffix? ;

fragment
HexDigit : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
IntegerTypeSuffix : ('l'|'L') ;

fragment
Exponent : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
FloatTypeSuffix : ('f'|'F'|'d'|'D') ;

CharacterLiteral
    :   '\'' ( EscapeSequence | ~('\''|'\\') ) '\''
    ;

StringLiteral
    :  '"' ( EscapeSequence | ~('\\'|'"') )* '"'
    ;

fragment
EscapeSequence
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UnicodeEscape
    |   OctalEscape
    ;

fragment
OctalEscape
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UnicodeEscape
    :   '\\' 'u' HexDigit HexDigit HexDigit HexDigit
    ;

Identifier
    :   Letter (Letter|JavaIDDigit)*
    ;

/**I found this char range in JavaCC's grammar, but Letter and Digit
overlap.
   Still works, but...
 */
fragment
Letter
    :  '\u0024' |
       '\u0041'..'\u005a' |
       '\u005f' |
       '\u0061'..'\u007a' |
       '\u00c0'..'\u00d6' |
       '\u00d8'..'\u00f6' |
       '\u00f8'..'\u00ff' |
       '\u0100'..'\u1fff' |
       '\u3040'..'\u318f' |
       '\u3300'..'\u337f' |
       '\u3400'..'\u3d2d' |
       '\u4e00'..'\u9fff' |
       '\uf900'..'\ufaff'
    ;

fragment
JavaIDDigit
    :  '\u0030'..'\u0039' |
       '\u0660'..'\u0669' |
       '\u06f0'..'\u06f9' |
       '\u0966'..'\u096f' |
       '\u09e6'..'\u09ef' |
       '\u0a66'..'\u0a6f' |
       '\u0ae6'..'\u0aef' |
       '\u0b66'..'\u0b6f' |
       '\u0be7'..'\u0bef' |
       '\u0c66'..'\u0c6f' |
       '\u0ce6'..'\u0cef' |
       '\u0d66'..'\u0d6f' |
       '\u0e50'..'\u0e59' |
       '\u0ed0'..'\u0ed9' |
       '\u1040'..'\u1049'
   ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;

ML_COMMENT
    :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

fragment
LINE_DEBUG : '//debug ' ~('\n'|'\r')* '\r'? '\n' { System.out.println("line
debug");};

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    ;

// a dummy rule to force vocabulary to be all characters (except special
// ones that ANTLR uses internally (0 to 2) and the guillemot characters
//fragment
TextBlockVocab : ('\3'..'\u00aa'|'\u00ac'..'\u00ba'|'\u00bc'..'\ufffe') ;

----------------------------

As you can see if i put braces { before the guillemot characters the parser
just exits whithout a single error. I even tried antlrworks and its the same
behavior. Ultimately what i want to do is not allow any text entered before
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/73a4b4bf/attachment.html 

From dave at badgers-in-foil.co.uk  Sun Mar 30 09:44:11 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 30 Mar 2008 16:44:11 +0000
Subject: [antlr-interest] Input parsing ending before end of file
In-Reply-To: <7196ed5b0803300912t6128cba2jb4df5c84eebdb7f2@mail.gmail.com>
References: <7196ed5b0803300912t6128cba2jb4df5c84eebdb7f2@mail.gmail.com>
Message-ID: <20080330164410.GB26368@badgers-in-foil.co.uk>

On Sun, Mar 30, 2008 at 12:12:58PM -0400, Ymo wrote:
> Hi i am trying to parse an input file and the generated parser seems to just
> quit without apparent errors :
> 
> input file :
> package org.test;
> 
> import org.antlr.runtime.ANTLRFileStream;
> import org.antlr.runtime.CharStream;
> import org.antlr.runtime.CommonTokenStream;
> import org.antlr.runtime.RecognitionException;
> import org.antlr.runtime.tree.CommonTreeNodeStream;
> import org.antlr.runtime.tree.Tree;
> 
> { // As soon as it sees the braces it just exits  !

[...]

> grammar:
> templateFile
>    :  packageDeclaration?
>       importDeclaration*
>       templateDeclaration*
>    ;

How about,

 templateFile
    :  packageDeclaration?
       importDeclaration*
       templateDeclaration*
       EOF
    ;


ta,
dave

-- 
http://david.holroyd.me.uk/

From ymo.mail at gmail.com  Sun Mar 30 10:03:17 2008
From: ymo.mail at gmail.com (Ymo)
Date: Sun, 30 Mar 2008 13:03:17 -0400
Subject: [antlr-interest] Input parsing ending before end of file
In-Reply-To: <20080330164410.GB26368@badgers-in-foil.co.uk>
References: <7196ed5b0803300912t6128cba2jb4df5c84eebdb7f2@mail.gmail.com>
	<20080330164410.GB26368@badgers-in-foil.co.uk>
Message-ID: <7196ed5b0803301003m3d8ab090sbce59581bf37f1a9@mail.gmail.com>

This saves the day ... chapeau !
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/fd52e211/attachment.html 

From ymo.mail at gmail.com  Sun Mar 30 10:03:17 2008
From: ymo.mail at gmail.com (Ymo)
Date: Sun, 30 Mar 2008 13:03:17 -0400
Subject: [antlr-interest] Input parsing ending before end of file
In-Reply-To: <20080330164410.GB26368@badgers-in-foil.co.uk>
References: <7196ed5b0803300912t6128cba2jb4df5c84eebdb7f2@mail.gmail.com>
	<20080330164410.GB26368@badgers-in-foil.co.uk>
Message-ID: <7196ed5b0803301003m3d8ab090sbce59581bf37f1a9@mail.gmail.com>

This saves the day ... chapeau !
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/fd52e211/attachment-0001.html 

From andrei.majidian at bt.com  Sun Mar 30 14:02:47 2008
From: andrei.majidian at bt.com (andrei.majidian at bt.com)
Date: Sun, 30 Mar 2008 22:02:47 +0100
Subject: [antlr-interest] Unreachable production
Message-ID: <66C55C26FA491C42A9C9BB62A376DAFF02266596@E03MVB1-UKBR.domain1.systemhost.net>

Hi

I am trying the Interpreter for the following grammar Name.g

_____________________________________________
grammar Name;

start: wordList ;

wordList: '[' Name (',' Name)* ']';

Name:	ID | QW;

ID:    ('a'..'z'|'A'..'Z')+ ;
QW:    '"' ('a'..'z'|'A'..'Z') (' '|'a'..'z'|'A'..'Z')*
('a'..'z'|'A'..'Z') '"';
WS:    (' '|'\t' |'\r'|'\n')+ {skip();} ;
____________________________________________________

With the following input:

["wild  animal", "friendly", timid]

It gave me the following Warning in the console

"[21:52:57] warning(208): Name.g:10:1: The following token definitions
are unreachable: ID,QW
[21:52:57] Interpreting..."

What does this mean?  The parse-tree is correctly produced. I don't
understand the warning.

Thanks

Andrei
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/aa48b933/attachment.html 

From darach at gmail.com  Sun Mar 30 14:19:24 2008
From: darach at gmail.com (Darach Ennis)
Date: Sun, 30 Mar 2008 21:19:24 +0000
Subject: [antlr-interest] Unreachable production
In-Reply-To: <66C55C26FA491C42A9C9BB62A376DAFF02266596@E03MVB1-UKBR.domain1.systemhost.net>
References: <66C55C26FA491C42A9C9BB62A376DAFF02266596@E03MVB1-UKBR.domain1.systemhost.net>
Message-ID: <4d596d820803301419h52489539x5dfdb1e42feefe73@mail.gmail.com>

Hi Andrei,
You can make ID and QW 'fragment' rules as follows to get rid of the
warning:

grammar Name;
start: wordList ;
wordList: '[' Name (',' Name)* ']';
Name:   ID | QW;
fragment ID:    ('a'..'z'|'A'..'Z')+ ;
fragment QW:    '"' ('a'..'z'|'A'..'Z') (' '|'a'..'z'|'A'..'Z')*
('a'..'z'|'A'..'Z') '"';
WS:    (' '|'\t' |'\r'|'\n')+ {skip();} ;

Regards,

Darach.

On Sun, Mar 30, 2008 at 9:02 PM, <andrei.majidian at bt.com> wrote:

>  Hi
>
> I am trying the Interpreter for the following grammar Name.g
>
> _____________________________________________
> grammar Name;
>
> start: wordList ;
>
> wordList: '[' Name (',' Name)* ']';
>
> Name:   ID | QW;
>
> ID:    ('a'..'z'|'A'..'Z')+ ;
> QW:    '"' ('a'..'z'|'A'..'Z') (' '|'a'..'z'|'A'..'Z')*
> ('a'..'z'|'A'..'Z') '"';
> WS:    (' '|'\t' |'\r'|'\n')+ {skip();} ;
> ____________________________________________________
>
> With the following input:
>
> ["wild  animal", "friendly", timid]
>
> It gave me the following Warning in the console
>
> "[21:52:57] warning(208): Name.g:10:1: The following token definitions are
> unreachable: ID,QW
> [21:52:57] Interpreting?"
>
> What does this mean?  The parse-tree is correctly produced. I don't
> understand the warning.
>
> Thanks
>
> Andrei
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/42a02834/attachment.html 

From Austin_Hastings at Yahoo.com  Sun Mar 30 14:43:12 2008
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Sun, 30 Mar 2008 17:43:12 -0400
Subject: [antlr-interest] Unreachable production
In-Reply-To: <66C55C26FA491C42A9C9BB62A376DAFF02266596@E03MVB1-UKBR.domain1.systemhost.net>
References: <66C55C26FA491C42A9C9BB62A376DAFF02266596@E03MVB1-UKBR.domain1.systemhost.net>
Message-ID: <47F00970.70701@Yahoo.com>

Because your "Name" entry starts with an upper-case letter, it is 
considered a GRAMMAR token instead of a PARSER rule.

Grammar tokens cannot purely include other grammar tokens, the way yours 
does, without getting warned -- the Name token will match every possible 
ID token, so you will never see any ID tokens in your parser.

If you meant for that to be true, then call ID and QW "fragments" of the 
overall Name token using the 'fragment' keyword:

fragment ID : ('a'..'z'|'A'..'Z')+ ;

If you meant for "name" to be a parser rule instead of a grammar token, 
and for ID and QW to be tokens, then you have to start it with a 
lower-case letter:

name : ID | QW ;

=Austin


andrei.majidian at bt.com wrote:
>
> Hi
>
> I am trying the Interpreter for the following grammar Name.g
>
> _____________________________________________
> grammar Name;
>
> start: wordList ;
>
> wordList: '[' Name (',' Name)* ']';
>
> Name: ID | QW;
>
> ID: ('a'..'z'|'A'..'Z')+ ;
> QW: '"' ('a'..'z'|'A'..'Z') (' '|'a'..'z'|'A'..'Z')* 
> ('a'..'z'|'A'..'Z') '"';
> WS: (' '|'\t' |'\r'|'\n')+ {skip();} ;
> ____________________________________________________
>
> With the following input:
>
> ["wild animal", "friendly", timid]
>
> It gave me the following Warning in the console
>
> "[21:52:57] warning(208): Name.g:10:1: The following token definitions 
> are unreachable: ID,QW
> [21:52:57] Interpreting?"
>
> What does this mean? The parse-tree is correctly produced. I don't 
> understand the warning.
>
> Thanks
>
> Andrei
>


From jimi at temporal-wave.com  Sun Mar 30 16:29:11 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 30 Mar 2008 16:29:11 -0700
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
In-Reply-To: <C412A0E7.93F7D%sunshine@public.kherson.ua>
Message-ID: <89d413628bd6524b9180b8b7f7c8f213@temporal-wave.com>



> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine at public.kherson.ua]
> Sent: Friday, March 28, 2008 4:20 AM
> To: Jim Idle; Tomas Potrusil
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] advocacy of C++ support in ANTLR 3.x
> 
> On 3/28/08 11:52 AM, "Jim Idle" <jimi at temporal-wave.com> wrote:
> 
> Hi Jim,
> 
> > Tomas Potrusil wrote:
> >
> > I should add that if you really need to build C++ strings from the
> token, then
> > you should  probably not use the .text attribute of the token. That
> is really
> > just a convenience method. Write yourself a class with a constructor
> that
> > accepts a token as input and constructs the C++ string directly. That
> is all
> > that the C runtime does internally and there is no need to incur the
> overhead
> > of getting the C runtime to produce the token text, when you can take
> it
> > directly from the input stream.
> 
> Why not add such C++ class into ANTLR 3.1 = 3.1for C target ?
> 
> So each C++ user will not reinvent a bike.

I did say that I would do this, but there are still a few other things to do yet ;-)

Jim
 





From jimi at temporal-wave.com  Sun Mar 30 16:38:34 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 30 Mar 2008 16:38:34 -0700
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
In-Reply-To: <000d01c890d1$49009a40$db01cec0$@cz>
Message-ID: <4e15f6f299a2864eab87c5e66052d427@temporal-wave.com>

You will probably find it best to override pANTLR3_COMMON_TREE by encapsulating this within your own structure, as per the docs. This, as all the structures are, is a set of pointers to functions and you need only override the ones that you have to, just as in Java. Runtime type checking 'can' be an overhead, so i am not sure you would want to do that anyway, but I will contemplate your suggestion of course as it has some merit.

 

Jim

 

From: Tomas Potrusil [mailto:potrto at centrum.cz] 
Sent: Friday, March 28, 2008 5:43 AM
To: Jim Idle
Cc: ANTLR
Subject: RE: [antlr-interest] advocacy of C++ support in ANTLR 3.x

 

Oh yes, I know. I've already made a prototype implementation of a part of the grammar based on the idea I presented bellow (atom returns [OurNode* result] etc.). It is working but it is a little bit clumsy and I cannot use the resulting AST for a tree parsing - of course, I'm creating my own AST.

 

I've been thinking about the new tree adapter (I was talking about bellow) and probably you are true,  few C++ wrappers could do the work. But there is one inconvenience - there is not an "abstract" tree yet. The most abstract tree is ANTLR3_BASE_TREE_struct which contains children vector and other attributes. The ANTLR3_TREE_struct with only pointers to functions (something like a Java interface) would suit my needs better. Our existing AST nodes solve the storage already... Could you do it, please?

 

Another problem is safety. When somebody call ANTLR3_BASE_TREE_struct::addChild(pANTLR3_BASE_TREE tree) for example, I must trust him that the tree argument is really the tree he is calling. I cannot write dynamic_cast<MyTreeWrapper>(tree->super). This cannot be solved in the current C-based system.

 

Tom

 

From: Jim Idle

 

ANTLR 3.1 C target can now incorporate C++ code directly into the grammar and so can easily call your existing C++ code. All you do is compile the C output file as C++ (or rename it to .cpp perhaps). 

Can you try using that and let me know if you think that there is anything that you could do if the runtime was C++ that you can't do right now? I don't really think that there will be.

You need to get the latest 3.1 snapshot from the downloads page and use the ANTLR Tool hjar in there. Then build the ANTLR 3.1 C runtime from the tar.gz in the dist director under the runtime/C directory in the snapshot. 3 or 4 people have successfully integrated their C++ code with the C target now and I think you will have similar success :-)

Jim

 

-----

Hallo,

 

I'm new to the list. I'm trying to use ANTLR for generating a SQL parser because our current parser doesn't support Unicode input - it was generated by Lex/Yacc. We use C++ and we have our own complex AST that is used by a SQL engine already... So my idea is to write a tree adapter that would create our existing AST nodes (they would just inherit ANTLR tree interface).

 

And here comes a problem that ANTLR 3.x doesn't contain support for "pure" C++ implementation. I've just found Jim Idle's "promise":

 

> Later I may well produce a complete C++ implementation from scratch,

> however, at this point I am not sure that it buys you anything. Please

> let me know if there are things you cannot do with the system as it

> stands (other than access the tokens and so on using C++ objects, which

> will be done later). 

 

I know that the problem could be solved with the current system somehow, but it would be probably very ugly. So yes, complete C++ implementation will buy us something! Or we can use ANTLR 2.x...

 

Right now we will probably try to build the AST by hand:

 

atom returns [OurNode* result]

@init { $result = NULL; }

:              NUMBER

                {

                               std::string str((char*)$NUMBER.text->chars, $NUMBER.text->len);

                               $result = new OurNumberNode(str);

                };

 

Or do you have some other ideas?

 

Thanks

 

Tom

 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/0aeb1292/attachment-0001.html 

From jimi at temporal-wave.com  Sun Mar 30 17:02:35 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 30 Mar 2008 17:02:35 -0700
Subject: [antlr-interest] C target recognition problem
In-Reply-To: <47EF6274.7050708@tireme.fr>
Message-ID: <8e584ffccd947946ac5647d32cd12343@temporal-wave.com>

This is fixed in ANTLR 3.1 and the C++ integration is done correctly in this version too. You don't need extern "C" any more, you just compile the generated code as C++. Remember to keep as little code as possible in your grammar rules and use helper classes though.

Also, when using operating specific implementations of wide characters, remember that the representation can change between 16 and 32 bits (for instance wchar_t), which can completely break certain codes. If you use the ANTLR typedefs, they will ensure that the characters are always 16 bits. ANTLR 3.1 also has conversion routines (from the Unicode.org standard issue) to convert between encoding types if that helps.

Jim

PS: The fix is to with substring() in the UCS2 input stream, which has a small buglette. You can probably fix it by looking at the 3.1 code if you must stay with 3.0.1 for now. This week I hope to fix any outstanding 3.1 bugs, test remote debugging and then 3.1 can be released as soon as Ter thinks that the time is right.


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Pierre Attar
> Sent: Sunday, March 30, 2008 2:51 AM
> To: ANTLR
> Subject: [antlr-interest] C target recognition problem
> 
> Hi,
> 
> I'm running the following rule in ANTLRWorks with an input such as
> f"blabla"f :
> 
> FString : '\u0022'  ~('\u0022')+ '\u0022';
>  and "blabla" is recognized as a string .... it works perfectly.
> 
> 
> But in fact, I'm using the C generator in a C++ environment so all code
> is included as extern "C".
> Also, in my reality, the string to analyze is created in memory by an
> other ANTLR recognition wich creates XMLString (wchar).
> 
> So my lexer recognizer is defined as
>         input = antlr3NewUCS2StringInPlaceStream ((pANTLR3_UINT16)
> str,(ANTLR3_UINT64) XMLString::stringLen(str), NULL);
> 
> Doing that, it seems that the lexer is able to recognize the str but
> when I try to get the text from the recognized string
> FString2->getText(FString2)->chars
> 
>  I have a nothing ("") sting.
> 
> Any ideas on where may be the problem ? I'm quite sure it is a
> character
> coding problem but I'm not able to find where are the contradictions
> ...
> 
> Thaks al lot for help,
> 
> Pierre
> 
> 





From ame01 at gmx.net  Sun Mar 30 17:03:30 2008
From: ame01 at gmx.net (Aurelian Melinte)
Date: Sun, 30 Mar 2008 20:03:30 -0400
Subject: [antlr-interest] warnWhenFollowAmbig with ANTLR3?
Message-ID: <1.1.1.20080330200037.00bea570@127.0.0.1>

Hello,


A question that might have been answered, but I could not find the answer: version 2 used to support this option:

     options {warnWhenFollowAmbig = false;}

Has this been replaced by something similar or is it just deprecated in version 3?

Best regards,
a.



From lefevrol at yahoo.com  Sun Mar 30 18:41:32 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Mon, 31 Mar 2008 03:41:32 +0200
Subject: [antlr-interest] Discarding characters in lexer
In-Reply-To: <20080327210254.9568711EACD@www.antlr.org>
References: <47EBB6FA.5030204@ultersys.ru>
	<20080327210254.9568711EACD@www.antlr.org>
Message-ID: <fspfgk$sb3$1@ger.gmane.org>

> In v3, the ! operator only works in the parser (and affects AST 
> generation).  You can't use it in the lexer any more.

Any idea why this was done? That was a useful feature.

-- O.L.


From lgcraymer at yahoo.com  Sun Mar 30 20:49:49 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 30 Mar 2008 20:49:49 -0700 (PDT)
Subject: [antlr-interest] Discarding characters in lexer
Message-ID: <224497.47942.qm@web55908.mail.re3.yahoo.com>

Oliver--

v2 lexers had very poor performance because they copied characters.  ANTLR 3 does not do this, and lexer performance is much improved.  It is possible to efficiently implement ! in v3--I've done a preliminary implementation for Yggdrasil--but Ter has not yet gotten that far.  I would expect this feature to return after ANTLR 3 is implemented in ANTLR 3; there has not yet been enough attention paid to lexer features and there are some important features (use of follow sets to do true LL*, lexer states) that are on the "to do" list.

--Loring

----- Original Message ----
From: Olivier Lefevre <lefevrol at yahoo.com>
To: antlr-interest at antlr.org
Sent: Sunday, March 30, 2008 6:41:32 PM
Subject: Re: [antlr-interest] Discarding characters in lexer

> In v3, the ! operator only works in the parser (and affects AST 
> generation).  You can't use it in the lexer any more.

Any idea why this was done? That was a useful feature.

-- O.L.







      ____________________________________________________________________________________
No Cost - Get a month of Blockbuster Total Access now. Sweet deal for Yahoo! users and friends. 
http://tc.deals.yahoo.com/tc/blockbuster/text1.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080330/2e8aee16/attachment.html 

From antlr at mirality.co.nz  Mon Mar 31 00:13:24 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 31 Mar 2008 20:13:24 +1300
Subject: [antlr-interest] advocacy of C++ support in ANTLR 3.x
In-Reply-To: <4e15f6f299a2864eab87c5e66052d427@temporal-wave.com>
References: <000d01c890d1$49009a40$db01cec0$@cz>
	<4e15f6f299a2864eab87c5e66052d427@temporal-wave.com>
Message-ID: <20080331071341.683DF11E94C@www.antlr.org>

At 12:38 31/03/2008, Jim Idle wrote:
>You will probably find it best to override pANTLR3_COMMON_TREE by 
>encapsulating this within your own structure, as per the docs. 
>This, as all the structures are, is a set of pointers to 
>functions and you need only override the ones that you have to, 
>just as in Java. Runtime type checking 'can' be an overhead, so i 
>am not sure you would want to do that anyway, but I will 
>contemplate your suggestion of course as it has some merit.

It would probably be helpful to those people who want to do 
heterogeneous trees.  (I'm not one of them, but I've heard they 
exist somewhere.)


From phulsmeijer at xebic.com  Mon Mar 31 00:18:35 2008
From: phulsmeijer at xebic.com (Patrick Hulsmeijer)
Date: Mon, 31 Mar 2008 09:18:35 +0200
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <70bbae280803292243k2d575d3et4b67945a013e03dc@mail.gmail.com>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com><BAYC1-PASMTP04A88DA32D362FF409C90DF5FB0@CEZ.ICE>
	<70bbae280803292243k2d575d3et4b67945a013e03dc@mail.gmail.com>
Message-ID: <C3525AF49F7D374D8E4D3C46ED4BC6211685DD@srvxdcex.xebic.com>

Chris,

 

I've written an complete ECMAScript compiant grammar recently.

I've struggled with the following issues:

-          Unicode identifiers

-          Regular expression literals

-          Semicolon insertion

 

For the semicolon insertion issue I've taken the following approach.
The line terminators are left on the hidden channel. In the parser the
semicolon (e.g. in statements) is defined as a rule. In this rule I scan
the token stream for line terminators and promote the first encountered
to the default channel. Line terminator are also an alternative in this
rule. Something like this:

 

semic:

@init

{

                int marker = input.mark();

                promoteEOL();

}

                : SEMIC

                | EOL

                | RBRACE { input.rewind(marker); }

                | EOF

                ;

 

The grammar also scans for line terminators in places where the
specification states there are none allowed (e.g. between "return" and
the following optional expression in the return statement).

 

Hope this helps.

 

Regards,

patrick.

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Lambrou
Sent: zondag 30 maart 2008 7:43
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] JavaScript grammar

 


The approach I took was to keep LT tokens on the default channel, for
the benefit of the few rules where line terminators are important. For
example, the ECMAScript spec defines a return statement as follows:

'return' [no LineTerminator here] Expression[optional] ';'

In the ANTLR grammar, this becomes:

returnStatement : 'return' expression (LT | ';')! ;

You can see that the statement may end either with a semicolon or with a
line terminator, which the ECMAScript spec permits. This appears to work
just fine. The only part I find annoying is that because the LT tokens
are not on the hidden channel, all of the other rules need to deal with
them too. For example, the ifStatement rule looks like this:

ifStatement : 'if' LT!* '(' LT!* expression LT!* ')' LT!* statement
(LT!* 'else' LT!* statement)? ;

when it would be much clearer if it looked like this:

ifStatement : 'if' '(' expression ')' statement ('else' statement)? ;

This affects all of the parser rules, which makes the grammar less
readable. I did think about performing some filtering of the token
stream between the lexing and parsing phases, but the rules for
automatic semicolon insertion defined by the ECMAScript are a bit nasty.
It's just too difficult to actually determine where the virtual
semicolons should be, without the grammatical context that only the
parsing stage can provide. In any case, I think the grammar would be
less useful if it required any special runtime tweaks to make it work.

I think what would really solve the problem would be to have the LT
tokens on the hidden channel by default, and then dynamically switch
them to the default channel only for those rules that require it. I'm
afraid I'm not yet familiar enough with channels and token streams to
know if this is even possible. My guess is that it probably isn't, but
it can't hurt to ask.

Chris

P.S. I've just remembered that although the grammar compiles just fine,
I couldn't get it to work with the ANTLRWorks debugger. It seems like
it's the huge Identifier lexer rule that causes the problem - I had to
temporarily replace it with something simpler in order to persuade the
debugger to work. I presume this is a bug in ANTLRWorks - if anyone is
interested in this, I can provide more information, perhaps off-line.



On 30/03/2008, Benjamin Shropshire <shro8822 at vandals.uidaho.edu> wrote:

Chris Lambrou wrote:


[snip] 

	 

	>    1. Unlike other whitespace characters, line separators
(represented
	
	>       by my LT token type) are important in JavaScript, as
you're
	>       allowed to use them to terminate statements instead of
the usual
	>       terminating semicolon character. As a result, I cannot
'hide'
	>       line separators like other whitespace characters, and my
grammar
	>       is peppered with LT!* sequences. Is there a way to place
the LT
	>       tokens on the hidden channel, and then optionally reveal
them
	>       only in the few rules that require it?


[snip] 

	 

	It is most likely not kosher, but if you can look at an LT in a
sequence
	of tokens test if it is a virtual semicolon (without knowing
anything
	but the adjoining tokens) then some sort of preprocessor (I'm
thinking:
	lex, filter tokens into new lex stream, parse) might be able to
convert
	what is needed. You might call the filter a TokenSedStream or
something
	like that. I did something like that (but with the text) to deal
with
	indentation sensitivity in my only attempt with ANTLR. As I
said, not
	kosher, but if all else fails "You gotta go with what works."
(Law #37)

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/3247acef/attachment-0001.html 

From pat at tireme.fr  Mon Mar 31 01:44:10 2008
From: pat at tireme.fr (Pierre Attar)
Date: Mon, 31 Mar 2008 10:44:10 +0200
Subject: [antlr-interest] C target recognition problem
In-Reply-To: <8e584ffccd947946ac5647d32cd12343@temporal-wave.com>
References: <8e584ffccd947946ac5647d32cd12343@temporal-wave.com>
Message-ID: <47F0A45A.1020204@tireme.fr>

Jim,

Thanks a lot for your answer. I'm a little bit new to the design 
architecture of antlr and really don't know where to find, both in the 
3.0.1 or 3.1 source the "bugletted" substring().

Any idea on a workaround ? Something like a code converting wchar_t to 
one antlr type def ?

Pierre

Jim Idle a ?crit :
> This is fixed in ANTLR 3.1 and the C++ integration is done correctly in this version too. You don't need extern "C" any more, you just compile the generated code as C++. Remember to keep as little code as possible in your grammar rules and use helper classes though.
>
> Also, when using operating specific implementations of wide characters, remember that the representation can change between 16 and 32 bits (for instance wchar_t), which can completely break certain codes. If you use the ANTLR typedefs, they will ensure that the characters are always 16 bits. ANTLR 3.1 also has conversion routines (from the Unicode.org standard issue) to convert between encoding types if that helps.
>
> Jim
>
> PS: The fix is to with substring() in the UCS2 input stream, which has a small buglette. You can probably fix it by looking at the 3.1 code if you must stay with 3.0.1 for now. This week I hope to fix any outstanding 3.1 bugs, test remote debugging and then 3.1 can be released as soon as Ter thinks that the time is right.
>
>
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Pierre Attar
>> Sent: Sunday, March 30, 2008 2:51 AM
>> To: ANTLR
>> Subject: [antlr-interest] C target recognition problem
>>
>> Hi,
>>
>> I'm running the following rule in ANTLRWorks with an input such as
>> f"blabla"f :
>>
>> FString : '\u0022'  ~('\u0022')+ '\u0022';
>>  and "blabla" is recognized as a string .... it works perfectly.
>>
>>
>> But in fact, I'm using the C generator in a C++ environment so all code
>> is included as extern "C".
>> Also, in my reality, the string to analyze is created in memory by an
>> other ANTLR recognition wich creates XMLString (wchar).
>>
>> So my lexer recognizer is defined as
>>         input = antlr3NewUCS2StringInPlaceStream ((pANTLR3_UINT16)
>> str,(ANTLR3_UINT64) XMLString::stringLen(str), NULL);
>>
>> Doing that, it seems that the lexer is able to recognize the str but
>> when I try to get the text from the recognized string
>> FString2->getText(FString2)->chars
>>
>>  I have a nothing ("") sting.
>>
>> Any ideas on where may be the problem ? I'm quite sure it is a
>> character
>> coding problem but I'm not able to find where are the contradictions
>> ...
>>
>> Thaks al lot for help,
>>
>> Pierre
>>
>>
>>     
>
>
>
>
>
>
>
>   


From lsakaray at us.ibm.com  Mon Mar 31 03:05:00 2008
From: lsakaray at us.ibm.com (Lakshman Sakaray)
Date: Mon, 31 Mar 2008 04:05:00 -0600
Subject: [antlr-interest] Lakshman Sakaray/Lenexa/IBM is out of the office.
Message-ID: <OFB0A7D2DD.3998C444-ON8725741D.003763F5-8725741D.003763F5@us.ibm.com>


I will be out of the office starting  03/31/2008 and will not return until
04/07/2008.

I will respond to your message when I return.
If need any immediate response please contact to my manager Bill Theus
"wtheus at us.ibm.com" and for technical issues Rekha Nair "nrekha at us.ibm.com"
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/1332e0dc/attachment.html 

From jaluber at gmx.de  Mon Mar 31 06:08:11 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 31 Mar 2008 15:08:11 +0200
Subject: [antlr-interest] warnWhenFollowAmbig with ANTLR3?
In-Reply-To: <1.1.1.20080330200037.00bea570@127.0.0.1>
References: <1.1.1.20080330200037.00bea570@127.0.0.1>
Message-ID: <47F0E23B.1050104@gmx.de>

Aurelian Melinte schrieb:
> Hello,
> 
> 
> A question that might have been answered, but I could not find the answer: version 2 used to support this option:
> 
>      options {warnWhenFollowAmbig = false;}
> 
> Has this been replaced by something similar or is it just deprecated in version 3?

My guess is that you have to resolve ambiguities yourself via 
backtracking, syntactic predicates and left-factoring. There is a 
tutorial explaining the use of these techniques on the wiki. Ignoring 
the ambiguity warning means that the first option is always chosen.

Johannes

From m_mayur at hotmail.com  Mon Mar 31 06:10:02 2008
From: m_mayur at hotmail.com (Mayur M)
Date: Mon, 31 Mar 2008 18:40:02 +0530
Subject: [antlr-interest] Debugging grammar throught VS C#.NET
Message-ID: <BLU117-W230A9723A2169F9CD508DB8FFA0@phx.gbl>

Hi, 
 
 
Can ANTLR be used as a plugin and be debugged from VS C#.NET? Any help on procedure for debugging the Grammar?
 
Thanks in advance,
Mayur M
_________________________________________________________________
Technology : Catch up on updates on the latest Gadgets, Reviews, Gaming and Tips to use technology etc.
http://computing.in.msn.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/9624c66e/attachment.html 

From jaluber at gmx.de  Mon Mar 31 06:12:29 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 31 Mar 2008 15:12:29 +0200
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <C3525AF49F7D374D8E4D3C46ED4BC6211685DD@srvxdcex.xebic.com>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com><BAYC1-PASMTP04A88DA32D362FF409C90DF5FB0@CEZ.ICE>	<70bbae280803292243k2d575d3et4b67945a013e03dc@mail.gmail.com>
	<C3525AF49F7D374D8E4D3C46ED4BC6211685DD@srvxdcex.xebic.com>
Message-ID: <47F0E33D.7060504@gmx.de>

Patrick Hulsmeijer schrieb:
> Chris,
> 
> For the semicolon insertion issue I?ve taken the following approach. 
>  The line terminators are left on the hidden channel. In the parser the 
> semicolon (e.g. in statements) is defined as a rule. In this rule I scan 
> the token stream for line terminators and promote the first encountered 
> to the default channel. Line terminator are also an alternative in this 
> rule. Something like this:
> 
> semic:
> @init
> {
>                 int marker = input.mark();
>                 promoteEOL();
> }
>                 : SEMIC
>                 | EOL
>                 | RBRACE { input.rewind(marker); }
>                 | EOF
>                 ;
>  

Can you elaborate more on the function promoteEOL()?

Johannes

From jaluber at gmx.de  Mon Mar 31 06:30:59 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 31 Mar 2008 15:30:59 +0200
Subject: [antlr-interest] Debugging grammar throught VS C#.NET
In-Reply-To: <BLU117-W230A9723A2169F9CD508DB8FFA0@phx.gbl>
References: <BLU117-W230A9723A2169F9CD508DB8FFA0@phx.gbl>
Message-ID: <47F0E793.8040609@gmx.de>

Mayur M schrieb:
> Hi,
>  
>  
> Can ANTLR be used as a plugin and be debugged from VS C#.NET?

I know that there is at least one Eclipse plugin for ANTLR - or was it 
for ANTLRworks? Never used it myself. At least I believe an VS plugin is 
possible.

> Any help on procedure for debugging the Grammar?

What do you mean with that exactly? Do you want to use ANTLRworks 
facilities? Or simply stepping through the generated code files? Or do 
you want to control the generated code like ANTLRworks does via remote 
debugging? In the last case you should look at the C# or Java source for 
debugging help, as there is the other half you have to interface with. 
Although looking the ANTLRworks source code could be helpful, too. BTW, 
the C# target is currently broken, although I am in the process of 
fixing it. You may want to wait a few weeks as 3.1 introduces a slightly 
changed debugging protocol.

Johannes

From phulsmeijer at xebic.com  Mon Mar 31 07:17:58 2008
From: phulsmeijer at xebic.com (Patrick Hulsmeijer)
Date: Mon, 31 Mar 2008 16:17:58 +0200
Subject: [antlr-interest] JavaScript grammar
In-Reply-To: <47F0E33D.7060504@gmx.de>
References: <70bbae280803281313i70fb25d1hbd758ac5e1049ad2@mail.gmail.com><BAYC1-PASMTP04A88DA32D362FF409C90DF5FB0@CEZ.ICE>	<70bbae280803292243k2d575d3et4b67945a013e03dc@mail.gmail.com>
	<C3525AF49F7D374D8E4D3C46ED4BC6211685DD@srvxdcex.xebic.com>
	<47F0E33D.7060504@gmx.de>
Message-ID: <C3525AF49F7D374D8E4D3C46ED4BC6211685E9@srvxdcex.xebic.com>

The function promoteEOL checks the current token and when it is not
SEMIC, EOF, RBRACE or already EOL it scans backwards evaluating the
off-channel tokens up to the previous (on-channel) token. When it
encounters an EOL token that is off-channel it sets its channel to
DEFAULT_CHANNEL and repositions the input stream on it.
The current token can already be EOL (on-channel) when the promoteEOL
function is called previously from e.g. the return statement:

returnStatement
	: RETURN^ { promoteEOL(null); } expression? semic!
	;

This will result in a AST that is compliant to the ECMAScript 3
specification without actually inserting a semicolon token in the token
stream.

Regards,
patrick.

-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: maandag 31 maart 2008 15:12
To: Patrick Hulsmeijer
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] JavaScript grammar

Patrick Hulsmeijer schrieb:
> Chris,
> 
> For the semicolon insertion issue I've taken the following approach. 
>  The line terminators are left on the hidden channel. In the parser
the 
> semicolon (e.g. in statements) is defined as a rule. In this rule I
scan 
> the token stream for line terminators and promote the first
encountered 
> to the default channel. Line terminator are also an alternative in
this 
> rule. Something like this:
> 
> semic:
> @init
> {
>                 int marker = input.mark();
>                 promoteEOL();
> }
>                 : SEMIC
>                 | EOL
>                 | RBRACE { input.rewind(marker); }
>                 | EOF
>                 ;
>  

Can you elaborate more on the function promoteEOL()?

Johannes

From felix_do at web.de  Mon Mar 31 08:12:49 2008
From: felix_do at web.de (Felix Dorner)
Date: Mon, 31 Mar 2008 17:12:49 +0200
Subject: [antlr-interest] Antlr Ant task question
Message-ID: <47F0FF71.8040903@web.de>


Hey,

I use the Antlr Ant task to generate grammars. First, thanks for this 
great contribution. I have however a small improvement suggestion. As 
far as I can see, there is one output dir option for all generated files 
("outputdirectory"). This means that all .java and .token files go to 
this directory. I'd suggest it would be more flexible, if one could 
specify two output directories, one for the .java and another one for 
the .tokens files. This arises from the following use case:

I use AntlrWorks to develop my grammars, that are in a directory 
"grammars". AntlrWorks expects shared token files in the same directory 
as the currently edited grammar. I also specify a package for my grammar 
files. Within the Ant task I use the outputdir="src/my/package" option 
to make the generated parsers _and_  the .tokens files go to the 
corresponding package directory. Without moving back the .tokens file to 
the "grammar" dir, AntlrWorks complains about unreferenced tokens. See 
below for my ant task setup.

Felix.

<target name="AllureParser" depends="init">
        <antlr3 grammar.name="Allure.g" />
        <!-- move the generated .tokens file back to the grammar directory
             antlr3 ant task should have support to specify different
             directories for .token and .java artifacts...  -->
        <move todir="${src-gen}/${parserpackage}">
            <fileset dir="${grammar}">
                <include name="**/*.tokens"/>
            </fileset>
        </move>
    </target>
   
    <target name="AllureWalker" depends="AllureParser">
        <antlr3 grammar.name="AllureWalker.g" />
    </target>


<macrodef name="antlr3">
           <attribute name="grammar.name"/>
           <attribute name="package" default="${parserpackage}"/>
           <sequential>
                  <echo message="antlr ${grammar}/@{grammar.name}" />
                  <antlr:antlr3 
xmlns:antlr="antlib:org/apache/tools/ant/antlr"
                      target="${grammar}/@{grammar.name}"
                      outputdirectory="${src-gen}/${parserpackage}"
                      libdirectory="${grammar}"/>
            </sequential>
</macrodef>




From felix_do at web.de  Mon Mar 31 08:30:05 2008
From: felix_do at web.de (Felix Dorner)
Date: Mon, 31 Mar 2008 17:30:05 +0200
Subject: [antlr-interest] Antlr Ant task question
In-Reply-To: <47F0FF71.8040903@web.de>
References: <47F0FF71.8040903@web.de>
Message-ID: <47F1037D.8060501@web.de>

Felix Dorner wrote:
>
>        <move todir="${src-gen}/${parserpackage}">
>            <fileset dir="${grammar}">
>                <include name="**/*.tokens"/>
>            </fileset>
>        </move>
>  
This should be:

<move todir="${grammar}">
           <fileset dir="${src-gen}/${parserpackage}">
               <include name="**/*.tokens"/>
           </fileset>
 </move>

From elekis at gmail.com  Mon Mar 31 09:03:28 2008
From: elekis at gmail.com (jabon)
Date: Mon, 31 Mar 2008 18:03:28 +0200
Subject: [antlr-interest] eclipse plugin unexpected token, grammar.
In-Reply-To: <92b42db60803310859xb150473lacf96a3c57ee6da@mail.gmail.com>
References: <47EF4D2B.3040501@gmail.com>
	<92b42db60803310859xb150473lacf96a3c57ee6da@mail.gmail.com>
Message-ID: <47F10B50.2040401@gmail.com>

heu... I use the update manager

http://antlreclipse.sourceforge.net/
http://antlreclipse.sourceforge.net/updates/

a++

Edgar Espina a ?crit :
> What plugin are you using?
>
> On Sun, Mar 30, 2008 at 5:19 AM, jabon <elekis at gmail.com 
> <mailto:elekis at gmail.com>> wrote:
>
>     hi all
>
>     I try to use the antlr plugin but I have a error.
>
>     I ve create a file named yaflplug.g and inside I have a simple grammar
>     (see below).
>
>     In command line, no problem but in the antlr ?ditor. I have the
>     following error.
>     unexpected error : grammar.
>
>     do you have any idea?? thanks
>
>     a++
>
>     grammar yaflplug;
>     tokens {
>        PLUS     = '+' ;
>        MINUS    = '-' ;
>        MULT    = '*' ;
>        DIV    = '/' ;
>     }
>     /*------------------------------------------------------------------
>      * PARSER RULES
>      *------------------------------------------------------------------*/
>
>     expr    : term ( ( PLUS | MINUS )  term )* ;
>
>     term    : factor ( ( MULT | DIV ) factor )* ;
>
>     factor    : NUMBER ;
>
>
>     /*------------------------------------------------------------------
>      * LEXER RULES
>      *------------------------------------------------------------------*/
>
>     NUMBER    : (DIGIT)+ ;
>
>     WHITESPACE : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+     { $channel =
>     HIDDEN; } ;
>
>     fragment DIGIT    : '0'..'9' ;
>


From parrt at cs.usfca.edu  Mon Mar 31 09:32:47 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Mar 2008 09:32:47 -0700
Subject: [antlr-interest] Antlr Ant task question
In-Reply-To: <47F0FF71.8040903@web.de>
References: <47F0FF71.8040903@web.de>
Message-ID: <645BD251-6155-4CC9-832F-BF19179E5D28@cs.usfca.edu>

latest build or 3.0.1?
Ter

From m_mayur at hotmail.com  Mon Mar 31 09:37:47 2008
From: m_mayur at hotmail.com (Mayur M)
Date: Mon, 31 Mar 2008 22:07:47 +0530
Subject: [antlr-interest] Debugging grammar throught VS C#.NET
In-Reply-To: <47F0E793.8040609@gmx.de>
References: <BLU117-W230A9723A2169F9CD508DB8FFA0@phx.gbl>
	<47F0E793.8040609@gmx.de>
Message-ID: <BLU117-W389C46A79EDE7AF349CA158FFA0@phx.gbl>

 
Hi, 
Thanks for the reply,
I would like to know about the VS plugin and Is there certain steps or procedures that need to be followed to link the plugin ?
 
I'm looking for the Debug option facilities available in ANTLRworks as well as control the generated code like ANTLRworks does via remote debugging?
I tried with both the options without any success.
Regards,
Mayur M



> Date: Mon, 31 Mar 2008 15:30:59 +0200> From: jaluber at gmx.de> To: m_mayur at hotmail.com> CC: antlr-interest at antlr.org> Subject: Re: [antlr-interest] Debugging grammar throught VS C#.NET> > Mayur M schrieb:> > Hi,> > > > > > Can ANTLR be used as a plugin and be debugged from VS C#.NET?> > I know that there is at least one Eclipse plugin for ANTLR - or was it > for ANTLRworks? Never used it myself. At least I believe an VS plugin is > possible.> > > Any help on procedure for debugging the Grammar?> > What do you mean with that exactly? Do you want to use ANTLRworks > facilities? Or simply stepping through the generated code files? Or do > you want to control the generated code like ANTLRworks does via remote > debugging? In the last case you should look at the C# or Java source for > debugging help, as there is the other half you have to interface with. > Although looking the ANTLRworks source code could be helpful, too. BTW, > the C# target is currently broken, although I am in the process of > fixing it. You may want to wait a few weeks as 3.1 introduces a slightly > changed debugging protocol.> > Johannes
_________________________________________________________________
Technology : Catch up on updates on the latest Gadgets, Reviews, Gaming and Tips to use technology etc.
http://computing.in.msn.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/3d72fa13/attachment.html 

From jimi at temporal-wave.com  Mon Mar 31 10:08:33 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 Mar 2008 10:08:33 -0700
Subject: [antlr-interest] C target recognition problem
In-Reply-To: <47F0A45A.1020204@tireme.fr>
Message-ID: <dc77296be87be34896cf0c9e094d8af2@temporal-wave.com>

If you are using Windows, then wchar_t will be 16 bits, but is likely to be 32bits on Unix. If you are receiving 32 bit characters as inputs then you can either implement a 32 bit input stream (though I will do that before too long), or convert the 32 bit chars to 16 bit chars (of course, if this is UTF32 and not just UCS2 in 32 bits then you will need to be careful).

Just grep/search for the string 'Substr' in *.c and you will find antlr3UCS2Substr in antr3ucs2inputstream.c

Jim


> -----Original Message-----
> From: Pierre Attar [mailto:pat at tireme.fr]
> Sent: Monday, March 31, 2008 1:44 AM
> To: Jim Idle
> Cc: ANTLR
> Subject: Re: [antlr-interest] C target recognition problem
> 
> Jim,
> 
> Thanks a lot for your answer. I'm a little bit new to the design
> architecture of antlr and really don't know where to find, both in the
> 3.0.1 or 3.1 source the "bugletted" substring().
> 
> Any idea on a workaround ? Something like a code converting wchar_t to
> one antlr type def ?
> 
> Pierre
> 
> Jim Idle a ?crit :
> > This is fixed in ANTLR 3.1 and the C++ integration is done correctly
> in this version too. You don't need extern "C" any more, you just
> compile the generated code as C++. Remember to keep as little code as
> possible in your grammar rules and use helper classes though.
> >
> > Also, when using operating specific implementations of wide
> characters, remember that the representation can change between 16 and
> 32 bits (for instance wchar_t), which can completely break certain
> codes. If you use the ANTLR typedefs, they will ensure that the
> characters are always 16 bits. ANTLR 3.1 also has conversion routines
> (from the Unicode.org standard issue) to convert between encoding types
> if that helps.
> >
> > Jim
> >
> > PS: The fix is to with substring() in the UCS2 input stream, which
> has a small buglette. You can probably fix it by looking at the 3.1
> code if you must stay with 3.0.1 for now. This week I hope to fix any
> outstanding 3.1 bugs, test remote debugging and then 3.1 can be
> released as soon as Ter thinks that the time is right.
> >
> >
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Pierre Attar
> >> Sent: Sunday, March 30, 2008 2:51 AM
> >> To: ANTLR
> >> Subject: [antlr-interest] C target recognition problem
> >>
> >> Hi,
> >>
> >> I'm running the following rule in ANTLRWorks with an input such as
> >> f"blabla"f :
> >>
> >> FString : '\u0022'  ~('\u0022')+ '\u0022';
> >>  and "blabla" is recognized as a string .... it works perfectly.
> >>
> >>
> >> But in fact, I'm using the C generator in a C++ environment so all
> code
> >> is included as extern "C".
> >> Also, in my reality, the string to analyze is created in memory by
> an
> >> other ANTLR recognition wich creates XMLString (wchar).
> >>
> >> So my lexer recognizer is defined as
> >>         input = antlr3NewUCS2StringInPlaceStream ((pANTLR3_UINT16)
> >> str,(ANTLR3_UINT64) XMLString::stringLen(str), NULL);
> >>
> >> Doing that, it seems that the lexer is able to recognize the str but
> >> when I try to get the text from the recognized string
> >> FString2->getText(FString2)->chars
> >>
> >>  I have a nothing ("") sting.
> >>
> >> Any ideas on where may be the problem ? I'm quite sure it is a
> >> character
> >> coding problem but I'm not able to find where are the contradictions
> >> ...
> >>
> >> Thaks al lot for help,
> >>
> >> Pierre
> >>
> >>
> >>
> >
> >
> >
> >
> >
> >
> >
> >





From jimi at temporal-wave.com  Mon Mar 31 10:23:13 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 Mar 2008 10:23:13 -0700
Subject: [antlr-interest] warnWhenFollowAmbig with ANTLR3?
In-Reply-To: <47F0E23B.1050104@gmx.de>
Message-ID: <6af67fe116f7af46ae7660f57013f903@temporal-wave.com>

No, there are cases when you want to turn off warnings without putting in a predicate or something to make the warning go away. At some point, I feel sure that this ability will come back into 3.x.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Johannes Luber
> Sent: Monday, March 31, 2008 6:08 AM
> To: Aurelian Melinte
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] warnWhenFollowAmbig with ANTLR3?
> 
> Aurelian Melinte schrieb:
> > Hello,
> >
> >
> > A question that might have been answered, but I could not find the
> answer: version 2 used to support this option:
> >
> >      options {warnWhenFollowAmbig = false;}
> >
> > Has this been replaced by something similar or is it just deprecated
> in version 3?
> 
> My guess is that you have to resolve ambiguities yourself via
> backtracking, syntactic predicates and left-factoring. There is a
> tutorial explaining the use of these techniques on the wiki. Ignoring
> the ambiguity warning means that the first option is always chosen.
> 
> Johannes




From jimi at temporal-wave.com  Mon Mar 31 11:14:13 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 Mar 2008 11:14:13 -0700
Subject: [antlr-interest] Debugging grammar throught VS C#.NET
In-Reply-To: <BLU117-W389C46A79EDE7AF349CA158FFA0@phx.gbl>
Message-ID: <5a7f481f9ad99a499ad8f27782b00dd2@temporal-wave.com>

I have a ruleset for VS2005 for the C target, but C# projects do not use these. 


For info on C# project config (and other IDEs/configurations such as .rules files for C/C++ projects) see:

 

http://www.antlr.org/wiki/display/ANTLR3/Integration+with+development+environments 

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mayur M
Sent: Monday, March 31, 2008 9:38 AM
To: Johannes Luber
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Debugging grammar throught VS C#.NET

 

 
Hi, 

Thanks for the reply,

I would like to know about the VS plugin and Is there certain steps or procedures that need to be followed to link the plugin ?
 
I'm looking for the Debug option facilities available in ANTLRworks as well as control the generated code like ANTLRworks does via remote debugging?
I tried with both the options without any success.

Regards,
Mayur M

  _____  


> Date: Mon, 31 Mar 2008 15:30:59 +0200
> From: jaluber at gmx.de
> To: m_mayur at hotmail.com
> CC: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Debugging grammar throught VS C#.NET
> 
> Mayur M schrieb:
> > Hi,
> > 
> > 
> > Can ANTLR be used as a plugin and be debugged from VS C#.NET?
> 
> I know that there is at least one Eclipse plugin for ANTLR - or was it 
> for ANTLRworks? Never used it myself. At least I believe an VS plugin is 
> possible.
> 
> > Any help on procedure for debugging the Grammar?
> 
> What do you mean with that exactly? Do you want to use ANTLRworks 
> facilities? Or simply stepping through the generated code files? Or do 
> you want to control the generated code like ANTLRworks does via remote 
> debugging? In the last case you should look at the C# or Java source for 
> debugging help, as there is the other half you have to interface with. 
> Although looking the ANTLRworks source code could be helpful, too. BTW, 
> the C# target is currently broken, although I am in the process of 
> fixing it. You may want to wait a few weeks as 3.1 introduces a slightly 
> changed debugging protocol.
> 
> Johannes



  _____  

Exclusive Marriage Proposals! Find UR life partner at Shaadi.com Try it! <http://ss1.richmedia.in/recurl.asp?pid=430> 



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/aea3e54d/attachment-0001.html 

From chris at sidwells.com  Mon Mar 31 13:36:49 2008
From: chris at sidwells.com (Chris Dew)
Date: Mon, 31 Mar 2008 21:36:49 +0100
Subject: [antlr-interest] Tokens match more characters than they should.
Message-ID: <e6a690760803311336y2f1e646fn729922810ac36111@mail.gmail.com>

I'm sure that this is an error in my understanding, as I'm new to antlr.
Hopefully someone can point out my mistake.  I'm using ANTLRWorks 1.1.7,
(which says that it is for antlr v3 grammars).

I believe the grammar, attached at the end of the email, should only match
"foo bar wibble".  The *interpreter* (built into ANTLRWorks) matches many
more characters than I expect.  For example: "fooabarb cwibble" seems to be
valid.  It forms 'foo' 'a bar' 'b cwibble'.  Does anyone know why?

Thanks,

Chris.

P.S. The grammar is just a toy grammer, which illustrates a problem I have
with a much more complicated grammar.



grammar test;

command    :    FOO BAR WIBBLE    ;

FOO    :    'foo'        ;
BAR    :    'bar'        ;
WIBBLE    :    'wibble'    ;

WS    :    (' '|'\r'|'\n')+ {$channel = HIDDEN;} ;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/809570ca/attachment.html 

From chris at sidwells.com  Mon Mar 31 13:48:11 2008
From: chris at sidwells.com (Chris Dew)
Date: Mon, 31 Mar 2008 21:48:11 +0100
Subject: [antlr-interest] Tokens match more characters than they should.
In-Reply-To: <e6a690760803311336y2f1e646fn729922810ac36111@mail.gmail.com>
References: <e6a690760803311336y2f1e646fn729922810ac36111@mail.gmail.com>
Message-ID: <e6a690760803311348g15058027i3777d35b885afd65@mail.gmail.com>

Correction: "fooabarb cwibble" forms 'foo' 'abar' 'b cwibble' - I had
inadvertently added a space.

On 31/03/2008, Chris Dew <chris at sidwells.com> wrote:
>
> I'm sure that this is an error in my understanding, as I'm new to antlr.
> Hopefully someone can point out my mistake.  I'm using ANTLRWorks 1.1.7,
> (which says that it is for antlr v3 grammars).
>
> I believe the grammar, attached at the end of the email, should only match
> "foo bar wibble".  The *interpreter* (built into ANTLRWorks) matches many
> more characters than I expect.  For example: "fooabarb cwibble" seems to be
> valid.  It forms 'foo' 'a bar' 'b cwibble'.  Does anyone know why?
>
> Thanks,
>
> Chris.
>
> P.S. The grammar is just a toy grammer, which illustrates a problem I have
> with a much more complicated grammar.
>
>
>
> grammar test;
>
> command    :    FOO BAR WIBBLE    ;
>
> FOO    :    'foo'        ;
> BAR    :    'bar'        ;
> WIBBLE    :    'wibble'    ;
>
> WS    :    (' '|'\r'|'\n')+ {$channel = HIDDEN;} ;
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/10aab620/attachment.html 

From jimi at temporal-wave.com  Mon Mar 31 14:08:54 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 31 Mar 2008 14:08:54 -0700
Subject: [antlr-interest] Tokens match more characters than they should.
In-Reply-To: <e6a690760803311336y2f1e646fn729922810ac36111@mail.gmail.com>
Message-ID: <704c011b39c8f44489c5e73932f35590@temporal-wave.com>

Well, your lexer doesn't cover the incorrect input, so it is just throwing an error, which the interpreter isn't telling you about. use the debugger instead and you will see the lexer is saying something like "Mismatched character 'a'". The interpreter just shows that the it was consumed by the error recovery. In general a lexer should be able to consume anything and make a token of it, which can then be rejected later or handled better. Something like this as the last lexer rule:

 

 

ERRCHAR: .

   {

      // Call your error routines to say "Unexpected character at xxx" or something sensible

      ...

      $channel = HIDDEN;  // Hide this from the parser

   }

 

Jim

 

From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Chris Dew
Sent: Monday, March 31, 2008 1:37 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Tokens match more characters than they should.

 

I'm sure that this is an error in my understanding, as I'm new to antlr.  Hopefully someone can point out my mistake.  I'm using ANTLRWorks 1.1.7, (which says that it is for antlr v3 grammars).

I believe the grammar, attached at the end of the email, should only match "foo bar wibble".  The *interpreter* (built into ANTLRWorks) matches many more characters than I expect.  For example: "fooabarb cwibble" seems to be valid.  It forms 'foo' 'a bar' 'b cwibble'.  Does anyone know why?

Thanks,

Chris.

P.S. The grammar is just a toy grammer, which illustrates a problem I have with a much more complicated grammar.



grammar test;

command    :    FOO BAR WIBBLE    ;

FOO    :    'foo'        ;
BAR    :    'bar'        ;
WIBBLE    :    'wibble'    ;

WS    :    (' '|'\r'|'\n')+ {$channel = HIDDEN;} ;        






-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/39ce97ef/attachment.html 

From parrt at cs.usfca.edu  Mon Mar 31 17:31:25 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Mar 2008 17:31:25 -0700
Subject: [antlr-interest] "The Reuse of Grammars with Embedded Semantic
	Actions"
Message-ID: <570F9F71-668B-4C77-AC28-934BBF4442CA@cs.usfca.edu>

My keynote paper for ICPC2008:

http://www.cs.vu.nl/icpc2008/docs/Parr.pdf

http://www.cs.vu.nl/icpc2008/

Ter

From ymo.mail at gmail.com  Mon Mar 31 18:13:22 2008
From: ymo.mail at gmail.com (Ymo)
Date: Mon, 31 Mar 2008 21:13:22 -0400
Subject: [antlr-interest] Antlr 3 lexer issue
Message-ID: <7196ed5b0803311813j584feb3ay17320cc2fd7cb817@mail.gmail.com>

Hi i am trying to add a rule in the lexer as such :

VOCAB :
   ('\3'..'\u00aa'|'\u00ac'..'\u00ba'|'\u00bc'..'\ufffe')
;


this is getting translated to :

   (LA13_0>=':' && LA13_0<='@')||
   (LA13_0>='[' && LA13_0<=']')||
   LA13_0=='`'||
   (LA13_0>='{' && LA13_0<='\u00AA')||
   (LA13_0>='\u00AC' && LA13_0<='\u00BA')||
   (LA13_0>='\u00BC' && LA13_0<='\u00BF')||
   LA13_0=='\u00D7'||
   LA13_0=='\u00F7'||
   (LA13_0>='\u2000' && LA13_0<='\u303F')||
   (LA13_0>='\u3190' && LA13_0<='\u32FF')||
   (LA13_0>='\u3380' && LA13_0<='\u33FF')||
   (LA13_0>='\u3D2E' && LA13_0<='\u4DFF')||
   (LA13_0>='\uA000' && LA13_0<='\uF8FF')||
   (LA13_0>='\uFB00' && LA13_0<='\uFFFE'))


so my question is where did antlr got all those extra checks from ? Also
this does not match an input that has '.' in it.Acording to my rule it
should match.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080331/c8cebd8a/attachment.html 

From m_mayur at hotmail.com  Mon Mar 31 22:17:52 2008
From: m_mayur at hotmail.com (Mayur M)
Date: Tue, 1 Apr 2008 10:47:52 +0530
Subject: [antlr-interest] Debugging grammar throught VS C#.NET
In-Reply-To: <5a7f481f9ad99a499ad8f27782b00dd2@temporal-wave.com>
References: <BLU117-W389C46A79EDE7AF349CA158FFA0@phx.gbl>
	<5a7f481f9ad99a499ad8f27782b00dd2@temporal-wave.com>
Message-ID: <BLU117-W18DEBFD092AF1D3A189EB08FF50@phx.gbl>

Hi, 
 
The steps in 
 
http://www.antlr.org/wiki/display/ANTLR3/Integration+with+development+environments 
 
seems to be a bit not clear. When i try to include 
 
<ItemGroup>
<Antlr3 Include="MIF_LP.g"> ....... in the *.csproj there is a warning.
 
"The element 'ItemGroup' in namespace 'http://schemas.microsoft.com/developer/msbuild/2003' has invalid child element 'Antlr3' in namespace 'http://schemas.microsoft.com/developer/msbuild/2003'."Can any one let me know the process of debugging a grammar in the ANTLRworks or debugging thro' VS 2005.


Date: Mon, 31 Mar 2008 11:14:13 -0700From: jimi at temporal-wave.comTo: antlr-interest at antlr.orgSubject: Re: [antlr-interest] Debugging grammar throught VS C#.NET






I have a ruleset for VS2005 for the C target, but C# projects do not use these. 
For info on C# project config (and other IDEs/configurations such as .rules files for C/C++ projects) see:
 
http://www.antlr.org/wiki/display/ANTLR3/Integration+with+development+environments 
 
Jim
 



From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mayur MSent: Monday, March 31, 2008 9:38 AMTo: Johannes LuberCc: antlr-interest at antlr.orgSubject: Re: [antlr-interest] Debugging grammar throught VS C#.NET
 
 Hi, Thanks for the reply,I would like to know about the VS plugin and Is there certain steps or procedures that need to be followed to link the plugin ? I'm looking for the Debug option facilities available in ANTLRworks as well as control the generated code like ANTLRworks does via remote debugging?I tried with both the options without any success.Regards,Mayur M



> Date: Mon, 31 Mar 2008 15:30:59 +0200> From: jaluber at gmx.de> To: m_mayur at hotmail.com> CC: antlr-interest at antlr.org> Subject: Re: [antlr-interest] Debugging grammar throught VS C#.NET> > Mayur M schrieb:> > Hi,> > > > > > Can ANTLR be used as a plugin and be debugged from VS C#.NET?> > I know that there is at least one Eclipse plugin for ANTLR - or was it > for ANTLRworks? Never used it myself. At least I believe an VS plugin is > possible.> > > Any help on procedure for debugging the Grammar?> > What do you mean with that exactly? Do you want to use ANTLRworks > facilities? Or simply stepping through the generated code files? Or do > you want to control the generated code like ANTLRworks does via remote > debugging? In the last case you should look at the C# or Java source for > debugging help, as there is the other half you have to interface with. > Although looking the ANTLRworks source code could be helpful, too. BTW, > the C# target is currently broken, although I am in the process of > fixing it. You may want to wait a few weeks as 3.1 introduces a slightly > changed debugging protocol.> > Johannes



Exclusive Marriage Proposals! Find UR life partner at Shaadi.com Try it!
_________________________________________________________________
Technology : Catch up on updates on the latest Gadgets, Reviews, Gaming and Tips to use technology etc.
http://computing.in.msn.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080401/fa402984/attachment-0001.html 

From antlr at mirality.co.nz  Mon Mar 31 23:31:33 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 01 Apr 2008 19:31:33 +1300
Subject: [antlr-interest] Antlr 3 lexer issue
In-Reply-To: <7196ed5b0803311813j584feb3ay17320cc2fd7cb817@mail.gmail.co
 m>
References: <7196ed5b0803311813j584feb3ay17320cc2fd7cb817@mail.gmail.com>
Message-ID: <20080401063148.B5B9C11E9F1@www.antlr.org>

At 14:13 1/04/2008, Ymo wrote:
>Hi i am trying to add a rule in the lexer as such :
>
>VOCAB :
>    ('\3'..'\u00aa'|'\u00ac'..'\u00ba'|'\u00bc'..'\ufffe')
>;
[...]
>so my question is where did antlr got all those extra checks from 
>? Also this does not match an input that has '.' in it.Acording 
>to my rule it should match.

Most likely, you have other lexer rules further up that match the 
other characters, so they take precedence.


From antlr at mirality.co.nz  Mon Mar 31 23:34:38 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 01 Apr 2008 19:34:38 +1300
Subject: [antlr-interest] Debugging grammar throught VS C#.NET
In-Reply-To: <BLU117-W18DEBFD092AF1D3A189EB08FF50@phx.gbl>
References: <BLU117-W389C46A79EDE7AF349CA158FFA0@phx.gbl>
	<5a7f481f9ad99a499ad8f27782b00dd2@temporal-wave.com>
	<BLU117-W18DEBFD092AF1D3A189EB08FF50@phx.gbl>
Message-ID: <20080401063503.1AE2811EB66@www.antlr.org>

At 18:17 1/04/2008, Mayur M wrote:
><ItemGroup>
><Antlr3 Include="MIF_LP.g"> ....... in the *.csproj there is a 
>warning.
>
>"The element 'ItemGroup' in namespace 
>'http://schemas.microsoft.com/developer/msbuild/2003' has invalid 
>child element 'Antlr3' in namespace 
>'http://schemas.microsoft.com/developer/msbuild/2003'."

That warning can be ignored.  It should only appear while the 
.csproj file is open in the editor, and it's caused by the schema 
validation the XML editor performs being overly sensitive (the 
"real" XML is extensible in ways the schema doesn't indicate).

Do you have any problems actually compiling or using it?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080401/74631625/attachment.html 

