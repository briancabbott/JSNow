From linq936 at gmail.com  Fri Nov  2 05:30:01 2012
From: linq936 at gmail.com (lin q)
Date: Fri, 2 Nov 2012 05:30:01 -0700
Subject: [antlr-interest] ANTLR3C - includes section causes syntax error
Message-ID: <CAHJ65Qmi+WF2=ZrgQW4=xrnKs8jxTDxr7HLGr3BnoTHicaJm2A@mail.gmail.com>

Hi,

I am using the C target and like to use C++ standard library, so I add the
includes section:

grammar tryit;

options
{
     language = 'C';
}

@parser::includes
{
   #include <vector>
}


But this causes antlr compile error:
error(100): busif.g:13:1: syntax error: antlr:
org.antlr.runtime.EarlyExitException
error(150):  grammar file tryit.g has no rules
error(100): busif.g:0:1: syntax error: assign.types:
org.antlr.runtime.EarlyExitException
org\antlr\grammar\v3\DefineGrammarItemsWalker.g: node from line 96:28
required (...)+ loop did not match anything at input ';'

If I remove the includes section, the compile is good.

Do you see what is wrong about this includes section?

Another question - my target application is in C++, as far as I can see, I
can just use the C target,  write C++ program and use g++ to compile the
generated files. I do not plan to use C++ features like exception in
parsing side. Is my assumption good?

Any pointer of example C++ usage of antlr3c is greatly appreciated!

From mike at lischke-online.de  Fri Nov  2 05:32:07 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Fri, 2 Nov 2012 13:32:07 +0100
Subject: [antlr-interest] ANTLR3C - includes section causes syntax error
In-Reply-To: <CAHJ65Qmi+WF2=ZrgQW4=xrnKs8jxTDxr7HLGr3BnoTHicaJm2A@mail.gmail.com>
References: <CAHJ65Qmi+WF2=ZrgQW4=xrnKs8jxTDxr7HLGr3BnoTHicaJm2A@mail.gmail.com>
Message-ID: <88EC1B6A-25F9-4A0F-90C6-A36277FCA76B@lischke-online.de>

Hi,

> grammar tryit;
> 
> options
> {
>     language = 'C';
> }


Must be: language = C;

Mike
-- 
www.soft-gems.net



From jimi at temporal-wave.com  Fri Nov  2 06:22:13 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 2 Nov 2012 21:22:13 +0800
Subject: [antlr-interest] ANTLR3C - includes section causes syntax error
In-Reply-To: <CAHJ65Qmi+WF2=ZrgQW4=xrnKs8jxTDxr7HLGr3BnoTHicaJm2A@mail.gmail.com>
References: <CAHJ65Qmi+WF2=ZrgQW4=xrnKs8jxTDxr7HLGr3BnoTHicaJm2A@mail.gmail.com>
Message-ID: <797477111244828900@unknownmsgid>

Read the docs about the other @ sections so you can include in the
correct place. But better to export your c++ fun a as c linkage and
just call functions from the actions.

Jim

On Nov 2, 2012, at 20:30, lin q <linq936 at gmail.com> wrote:

> Hi,
>
> I am using the C target and like to use C++ standard library, so I add the
> includes section:
>
> grammar tryit;
>
> options
> {
>     language = 'C';
> }
>
> @parser::includes
> {
>   #include <vector>
> }
>
>
> But this causes antlr compile error:
> error(100): busif.g:13:1: syntax error: antlr:
> org.antlr.runtime.EarlyExitException
> error(150):  grammar file tryit.g has no rules
> error(100): busif.g:0:1: syntax error: assign.types:
> org.antlr.runtime.EarlyExitException
> org\antlr\grammar\v3\DefineGrammarItemsWalker.g: node from line 96:28
> required (...)+ loop did not match anything at input ';'
>
> If I remove the includes section, the compile is good.
>
> Do you see what is wrong about this includes section?
>
> Another question - my target application is in C++, as far as I can see, I
> can just use the C target,  write C++ program and use g++ to compile the
> generated files. I do not plan to use C++ features like exception in
> parsing side. Is my assumption good?
>
> Any pointer of example C++ usage of antlr3c is greatly appreciated!
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From thomas at ruschival.de  Fri Nov  2 06:48:26 2012
From: thomas at ruschival.de (Thomas Ruschival)
Date: Fri, 02 Nov 2012 09:48:26 -0400
Subject: [antlr-interest] how to skip/read next n Characters (n is read
 form input)
In-Reply-To: <CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
Message-ID: <5093CF2A.2040303@ruschival.de>

Thanks alot Juancarlo,
I knew I could do it in one of my favourite languages, but thought
'Maybe this is the point where I should start using grammars'....


Best Regards
Thomas

From linq936 at gmail.com  Fri Nov  2 07:31:05 2012
From: linq936 at gmail.com (lin q)
Date: Fri, 2 Nov 2012 07:31:05 -0700
Subject: [antlr-interest] ANTLR3C - includes section causes syntax error
In-Reply-To: <797477111244828900@unknownmsgid>
References: <CAHJ65Qmi+WF2=ZrgQW4=xrnKs8jxTDxr7HLGr3BnoTHicaJm2A@mail.gmail.com>
	<797477111244828900@unknownmsgid>
Message-ID: <CAHJ65QmUq5TYjR=g22-r1ySj1ijAS2_pjSvFsqrxn2YgN28y1A@mail.gmail.com>

I figured out the problem is I need to move the includes section after a
scope declaration:

options
{
     language = C;
}


scope Common_Param_Vec {
   pANTLR3_HASH_TABLE common_params;
}

@parser::includes
{
#include <map>
}

Previously the includes section was before the scope, I cannot see any
mentioning of this requirement at http://www.antlr.org/api/C/atsections.html
.


Could you elaborate the following point - "better to export your c++ fun a
as c linkage and just call functions from the actions." ?

My interpretation is I write my C++ code in another file and it expects
being called by the actions in C of the antlr grammar file; the other point
is I need to use extern "C" to guard my C++ code or at least the part
interfacing with C action code.

If there is no misunderstanding, I wonder what is the advantage here of
using extern C, not I oppose it, just I am not familiar with it. Is there
any antlr3c known issue on C++? Since C++ is superset of C, why not just
treat the whole as C++, action and post-parsing.

Thanks.



On Fri, Nov 2, 2012 at 6:22 AM, Jim Idle <jimi at temporal-wave.com> wrote:

> Read the docs about the other @ sections so you can include in the
> correct place. But better to export your c++ fun a as c linkage and
> just call functions from the actions.
>
> Jim
>
> On Nov 2, 2012, at 20:30, lin q <linq936 at gmail.com> wrote:
>
> > Hi,
> >
> > I am using the C target and like to use C++ standard library, so I add
> the
> > includes section:
> >
> > grammar tryit;
> >
> > options
> > {
> >     language = 'C';
> > }
> >
> > @parser::includes
> > {
> >   #include <vector>
> > }
> >
> >
> > But this causes antlr compile error:
> > error(100): busif.g:13:1: syntax error: antlr:
> > org.antlr.runtime.EarlyExitException
> > error(150):  grammar file tryit.g has no rules
> > error(100): busif.g:0:1: syntax error: assign.types:
> > org.antlr.runtime.EarlyExitException
> > org\antlr\grammar\v3\DefineGrammarItemsWalker.g: node from line 96:28
> > required (...)+ loop did not match anything at input ';'
> >
> > If I remove the includes section, the compile is good.
> >
> > Do you see what is wrong about this includes section?
> >
> > Another question - my target application is in C++, as far as I can see,
> I
> > can just use the C target,  write C++ program and use g++ to compile the
> > generated files. I do not plan to use C++ features like exception in
> > parsing side. Is my assumption good?
> >
> > Any pointer of example C++ usage of antlr3c is greatly appreciated!
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cd.barth at t-online.de  Fri Nov  2 10:51:32 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Fri, 2 Nov 2012 18:51:32 +0100
Subject: [antlr-interest] how to skip/read next n Characters (n is
	read	form input)
In-Reply-To: <CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
Message-ID: <000001cdb922$b2060ce0$161226a0$@barth@t-online.de>

Thomas, I would use validating semantic predicate 

readNchars
: NUM 
  (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
;

The idea is from Ter's book The Definitive ANTLR Reference (ANTLR v3)

Gru? Claus-Dieter


-----Urspr?ngliche Nachricht-----
Von: Juancarlo A?ez [mailto:apalala at gmail.com] 
Gesendet: Donnerstag, 1. November 2012 02:20
An: Thomas Ruschival
Cc: antlr-interest at antlr.org
Betreff: Re: [antlr-interest] how to skip/read next n Characters (n is read form input)

Thomas,

ANTLR may be overkill or inadequate for what you're doing.

I think you'd be better of with a program with a main loop that dispatches to different functions based on the escape code. Each function can affect the input position, or do anything else it pleases. It would be a handcrafted state machine.

You can do this in Python or any of the friendly languages.

Cheers,

-- Juancarlo

On Wed, Oct 31, 2012 at 12:17 PM, Thomas Ruschival <thomas at ruschival.de>wrote:

> I am a humble EE with little grammar experience, please forgive my 
> ignorance and give me a hint how professionals would do the trick.
>
> I came up with a grammar for detecting commands "escape-sequences" in 
> a input text (for a UnifiedPOS printer) that reads numbers and boolean 
> argumets for escape sequence commands from the input stream.
> I can read numeric arguments and use them as function parameters, 
> which function to be called is parsed correctly.
> For instance "ESC|#rF" means "print feed revers # lines"
>
> The question is how to treat "ESC|#E" which means "send the next # 
> bytes untreated to the pinter" in other words:
>
> How can I use a number N that I detected on the input stream to read 
> and consume the next N characters 'un-lexed' and 'un-parsed' as 
> string/byte array?
>
> I was thinking using something like this in a parse action using the 
> 'input' member of the parser:
>
> for (int i=0; i<N; i++){
>         output.append(input.LA(1));
>         input.consume();
> }
>
> But it doesn't seem very professional to me. Furthermore this gives me 
> tokens and not plain bytes....
> Can you give me a hint?
>
> Thanks in advance
> Thomas
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



--
Juancarlo *A?ez*



From forumer at smartmobili.com  Fri Nov  2 11:37:18 2012
From: forumer at smartmobili.com (forumer at smartmobili.com)
Date: Fri, 02 Nov 2012 19:37:18 +0100
Subject: [antlr-interest] objj grammar
Message-ID: <2d57a03816354cb7f671e8e72c5db540@smartmobili.com>

Hi,

Please find a grammar for Objective-J language that unfortunately uses 
backtracking.

Regards

From yezonghui at gmail.com  Sat Nov  3 08:26:37 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Sat, 3 Nov 2012 23:26:37 +0800
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
Message-ID: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>

Hi,

I have a lexer grammar that that has to recognize INTEGER like 1234 and
COMMA_INTEGER like 1,234,567
The later integer token has comma in it, and of cause the language has
other places that use comma, e.g. F(1, x) is valid, which contains "1,"
that should be recognized as a INTEGER 1 followd by a comma.

This is similar to the "lexer rule for floating point, integer and range
operator" example given in ANTLR wiki. There the conflict is around period,
here it is comma.

However, I tried the ways suggested by the example, but cannot get it
right. The following is one version of my lexer rules, using semantic
predicate:
    COMMA_INTEGER:(('0'..'9')+ {input.LA(1)==',' && input.LA(2)>='0' &&
input.LA(2)<='9'}?=>(',' ('0'..'9')+)+);
    INTEGER:('0'..'9')+;
This version results in error
    "rule COMMA_INTEGER failed predicate: {input.LA(1)==',' &&
input.LA(2)>='0' && input.LA(2)<='9'}? " for input "1, " as in F(1, x)

The following version uses syntatic predicate
    COMMA_INTEGER:(('0'..'9')+ (',' ('0'..'9')+)=>(','
('0'..'9')+)+);//TODO-COMMA_integer different from RES
    INTEGER:('0'..'9')+;
and results in error
    "required (...)+ loop did not match anything at character ' ' "
 (charactor SPACE)

Swapping the order of INTEGER and COMMA_INTEGER does not changed the
errors.

So it looks like the lexer is predicting next token without running the
predicates, i.e. it goes directly to match COMMA_INTEGER upon seeing a
comma after some digits.

Any suggestion? Thanks!

-- 
Regards,

Yang, Zhaohui

From apalala at gmail.com  Sat Nov  3 09:30:05 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 3 Nov 2012 12:00:05 -0430
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
Message-ID: <CAN1YFWtBZVC8NPx0tvhdn16PJa-D2iBeUZ1Qri=C7v8vQvtN5g@mail.gmail.com>

INTEGER: t=DIGITS ({t.getSize() <= 3}?=> MIL*)?;

fragment
MIL : ',' DIGIT DIGIT DIGIT ;

fragment
DIGITS : DIGIT+;

fragment
DIGIT : '0'..'9';


On Sat, Nov 3, 2012 at 10:56 AM, Zhaohui Yang <yezonghui at gmail.com> wrote:

> Hi,
>
> I have a lexer grammar that that has to recognize INTEGER like 1234 and
> COMMA_INTEGER like 1,234,567
> The later integer token has comma in it, and of cause the language has
> other places that use comma, e.g. F(1, x) is valid, which contains "1,"
> that should be recognized as a INTEGER 1 followd by a comma.
>
> This is similar to the "lexer rule for floating point, integer and range
> operator" example given in ANTLR wiki. There the conflict is around period,
> here it is comma.
>
> However, I tried the ways suggested by the example, but cannot get it
> right. The following is one version of my lexer rules, using semantic
> predicate:
>     COMMA_INTEGER:(('0'..'9')+ {input.LA(1)==',' && input.LA(2)>='0' &&
> input.LA(2)<='9'}?=>(',' ('0'..'9')+)+);
>     INTEGER:('0'..'9')+;
> This version results in error
>     "rule COMMA_INTEGER failed predicate: {input.LA(1)==',' &&
> input.LA(2)>='0' && input.LA(2)<='9'}? " for input "1, " as in F(1, x)
>
> The following version uses syntatic predicate
>     COMMA_INTEGER:(('0'..'9')+ (',' ('0'..'9')+)=>(','
> ('0'..'9')+)+);//TODO-COMMA_integer different from RES
>     INTEGER:('0'..'9')+;
> and results in error
>     "required (...)+ loop did not match anything at character ' ' "
>  (charactor SPACE)
>
> Swapping the order of INTEGER and COMMA_INTEGER does not changed the
> errors.
>
> So it looks like the lexer is predicting next token without running the
> predicates, i.e. it goes directly to match COMMA_INTEGER upon seeing a
> comma after some digits.
>
> Any suggestion? Thanks!
>
> --
> Regards,
>
> Yang, Zhaohui
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From me at psmay.com  Sat Nov  3 12:41:39 2012
From: me at psmay.com (Peter S. May)
Date: Sat, 3 Nov 2012 15:41:39 -0400
Subject: [antlr-interest] Register for wiki
Message-ID: <20121103154139.625b4cb1@philo>

Hiya, folks.

Is registration for the wiki (http://www.antlr.org/wiki/) open to the
public? I may be dense right now, but I can't find it. A little help?

(I have a nuance to add as a comment to
http://www.antlr.org/wiki/pages/viewpage.action?pageId=3604497 for
anyone wondering.)

Thanks

From bkiers at gmail.com  Sat Nov  3 12:52:28 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 3 Nov 2012 20:52:28 +0100
Subject: [antlr-interest] Register for wiki
In-Reply-To: <20121103154139.625b4cb1@philo>
References: <20121103154139.625b4cb1@philo>
Message-ID: <CAOrgODaUzygoUehH3d9Jx-Ok0TptSVWuhFJYf0byZzNjRxeVKg@mail.gmail.com>

Terence turned off public registration because it was being abused by
spammers. E-mail him (Terence) for access.
See:
http://antlr.markmail.org/message/htjbizijagolv7k5?q=only+evil+spammers+are+signing+up%2E

Regards,

Bart.


On Sat, Nov 3, 2012 at 8:41 PM, Peter S. May <me at psmay.com> wrote:

> Hiya, folks.
>
> Is registration for the wiki (http://www.antlr.org/wiki/) open to the
> public? I may be dense right now, but I can't find it. A little help?
>
> (I have a nuance to add as a comment to
> http://www.antlr.org/wiki/pages/viewpage.action?pageId=3604497 for
> anyone wondering.)
>
> Thanks
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Sat Nov  3 20:13:22 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 4 Nov 2012 11:13:22 +0800
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
Message-ID: <6d077b901d3eaaee9de4a384cf06b6e5@mail.gmail.com>

You will need to use gated semantic predicates I think. Unless you are in
charge to the language, then you can stop it being so dumb ;)

The predicates require that you cover the positive and negative alts
basically, or you will get the failed predicate message.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Zhaohui Yang
Sent: Saturday, November 03, 2012 11:27 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER

Hi,

I have a lexer grammar that that has to recognize INTEGER like 1234 and
COMMA_INTEGER like 1,234,567 The later integer token has comma in it, and
of cause the language has other places that use comma, e.g. F(1, x) is
valid, which contains "1,"
that should be recognized as a INTEGER 1 followd by a comma.

This is similar to the "lexer rule for floating point, integer and range
operator" example given in ANTLR wiki. There the conflict is around
period, here it is comma.

However, I tried the ways suggested by the example, but cannot get it
right. The following is one version of my lexer rules, using semantic
predicate:
    COMMA_INTEGER:(('0'..'9')+ {input.LA(1)==',' && input.LA(2)>='0' &&
input.LA(2)<='9'}?=>(',' ('0'..'9')+)+);
    INTEGER:('0'..'9')+;
This version results in error
    "rule COMMA_INTEGER failed predicate: {input.LA(1)==',' &&
input.LA(2)>='0' && input.LA(2)<='9'}? " for input "1, " as in F(1, x)

The following version uses syntatic predicate
    COMMA_INTEGER:(('0'..'9')+ (',' ('0'..'9')+)=>(','
('0'..'9')+)+);//TODO-COMMA_integer different from RES
    INTEGER:('0'..'9')+;
and results in error
    "required (...)+ loop did not match anything at character ' ' "
 (charactor SPACE)

Swapping the order of INTEGER and COMMA_INTEGER does not changed the
errors.

So it looks like the lexer is predicting next token without running the
predicates, i.e. it goes directly to match COMMA_INTEGER upon seeing a
comma after some digits.

Any suggestion? Thanks!

--
Regards,

Yang, Zhaohui

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From yezonghui at gmail.com  Sat Nov  3 23:41:56 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Sun, 4 Nov 2012 14:41:56 +0800
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <6d077b901d3eaaee9de4a384cf06b6e5@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
	<6d077b901d3eaaee9de4a384cf06b6e5@mail.gmail.com>
Message-ID: <CAO51=GQ=J0HbQRo9oOrHLzmXQD+4y+3KqQA+z83kU+gKD5O4WA@mail.gmail.com>

Thanks a lot Jim. You suggestions are right to the point. This is the
working version I have for now:

fragment
COMMA_INTEGER:;
INTEGER:('0'..'9')+
  ( ({input.LA(1)==',' && input.LA(2)>='0' && input.LA(2)<='9'}?=> ','
('0'..'9')+)+ {$type = COMMA_INTEGER;}
    | {$type=INTEGER;}
  );

For those who might have confusion about Jim's answer, my explenation is
there are 2 things to keep in mind:
1. You have to use gated semantic predicates ( {...}?=> ) for lexer rules.
Syntatic predicate ( (...)=> ) has no effect (in lexer rules). E.g., in the
above, replace
    {input.LA(1)==',' && input.LA(2)>='0' && input.LA(2)<='9'}?=>
  with
    (',' ('0'..'9'))=>
  will still result in error "required (...)+ loop does not match
anything", as if the sytantic predicate is not there at all.

2. ALTLR generate 'gated predicate code' only for alternatives other than
the last one. So you have to have alternatives to make gated predicates a
real gate. That's why in the above INTEGER rule, there is an explicit empty
alternative. Without this alternative, the predicate will not prevent the
lexer from entering the COMMA_INTEGER alternative when seeing a comma
without a following digit, and trggers an error only after the wrong route
has been taken.
   Well, that's my explenation to Jim's answer "The predicates require that
you cover the positive and negative alts
basically".


2012/11/4 Jim Idle <jimi at temporal-wave.com>

> You will need to use gated semantic predicates I think. Unless you are in
> charge to the language, then you can stop it being so dumb ;)
>
> The predicates require that you cover the positive and negative alts
> basically, or you will get the failed predicate message.
>
> Jim
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Zhaohui Yang
> Sent: Saturday, November 03, 2012 11:27 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
>
> Hi,
>
> I have a lexer grammar that that has to recognize INTEGER like 1234 and
> COMMA_INTEGER like 1,234,567 The later integer token has comma in it, and
> of cause the language has other places that use comma, e.g. F(1, x) is
> valid, which contains "1,"
> that should be recognized as a INTEGER 1 followd by a comma.
>
> This is similar to the "lexer rule for floating point, integer and range
> operator" example given in ANTLR wiki. There the conflict is around
> period, here it is comma.
>
> However, I tried the ways suggested by the example, but cannot get it
> right. The following is one version of my lexer rules, using semantic
> predicate:
>     COMMA_INTEGER:(('0'..'9')+ {input.LA(1)==',' && input.LA(2)>='0' &&
> input.LA(2)<='9'}?=>(',' ('0'..'9')+)+);
>     INTEGER:('0'..'9')+;
> This version results in error
>     "rule COMMA_INTEGER failed predicate: {input.LA(1)==',' &&
> input.LA(2)>='0' && input.LA(2)<='9'}? " for input "1, " as in F(1, x)
>
> The following version uses syntatic predicate
>     COMMA_INTEGER:(('0'..'9')+ (',' ('0'..'9')+)=>(','
> ('0'..'9')+)+);//TODO-COMMA_integer different from RES
>     INTEGER:('0'..'9')+;
> and results in error
>     "required (...)+ loop did not match anything at character ' ' "
>  (charactor SPACE)
>
> Swapping the order of INTEGER and COMMA_INTEGER does not changed the
> errors.
>
> So it looks like the lexer is predicting next token without running the
> predicates, i.e. it goes directly to match COMMA_INTEGER upon seeing a
> comma after some digits.
>
> Any suggestion? Thanks!
>
> --
> Regards,
>
> Yang, Zhaohui
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Regards,

Yang, Zhaohui

From me at psmay.com  Sun Nov  4 18:47:03 2012
From: me at psmay.com (Peter S. May)
Date: Sun, 4 Nov 2012 21:47:03 -0500
Subject: [antlr-interest] Revisited: Ending line/column of a token
Message-ID: <20121104214703.5a2b40e4@philo>

Hiya, folks?

About a year ago a question was brought up regarding recovering the
final (as well as the initial) line and column of a token to make it
available e.g. to an AST or an action, and that it's undesirable to
have to resort to counting characters and newlines:

http://www.antlr.org/pipermail/antlr-interest/2011-October/043116.html

It appears as if nobody ever answered.

The workaround I'm currently pursuing is promising but still somewhat
heinous: For any lexer rule that might contain newlines (multi-line
strings/comments/et c.), instead of completing normally, a token is
emitted containing the text proper followed by an artificial,
zero-width "EndFinder" token.

The basic mechanism is based on the multi-emit lexer described at
http://www.antlr.org/wiki/pages/viewpage.action?pageId=3604497. A
zero-width fragment rule is forced into existence as an actual type in
a manner similar to this:

	fragment EndFinder : ; // zero-width
	
	fragment SomeMultiLineThingText :
		'<<'
		( options {greedy=false;} : . )*
		'>>'
		;
	
	SomeMultiLineThing : t=SomeMultiLineThingText z=EndFinder
		{
			// The setType()s are necessary for
			// fragment-originated tokens, so
			// I gather
			$t.setType(SomeMultiLineThing);
			emit($t);
			$z.setType(EndFinder);
			emit($z);
		}
		;

And it actually seems to work, which surprised me. The unfortunate side
effect is that each parser rule using one of these has to match two
tokens where it would be more obvious to match just one:

	someMultiLineThing : t=SomeMultiLineThing z=EndFinder
		{
			// ...
			// $t.line and $t.pos are at the start
			// $z.line and $z.pos are at the end
			// ...
		}
		;

So my question now is this: Is there a "right", or at least less
brain-damaged, way to accomplish the same thing?

Thanks, and enjoy
PSM

From linq936 at gmail.com  Sun Nov  4 19:15:54 2012
From: linq936 at gmail.com (lin q)
Date: Sun, 4 Nov 2012 19:15:54 -0800
Subject: [antlr-interest] grammar of EBNF
Message-ID: <CAHJ65QkEShWGP12qk0Mv=4kBmebEH2HEV_27Q0-0Y9xAbFRCXA@mail.gmail.com>

Hi,

I need to work out a parser which parses a text file describing some domain
specific command in EBNF format. To be clear, my input is an EBNF grammar
file, it is a command script following EBNF syntax.

I need to program in C++. ANTLR is implemented in Java, but I think I can
reference its implementation how to parse an EBNF grammar file. Here are my
questions:

1. Does ANTLR uses a grammar to describe EBNF, so this is a EBNF of EBNF
grammar. Seems a logical method to implement ANTLR. If so, could you point
me where I can find this grammar file?

2. If ANTLR does not use this "bootstrap" grammar file, which source file
has the parsing code to parse lexer/parser grammars?

Thanks!

From sam at tunnelvisionlabs.com  Sun Nov  4 19:32:40 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Mon, 5 Nov 2012 03:32:40 +0000
Subject: [antlr-interest] Revisited: Ending line/column of a token
In-Reply-To: <20121104214703.5a2b40e4@philo>
References: <20121104214703.5a2b40e4@philo>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0595C7CA@CH1PRD0811MB430.namprd08.prod.outlook.com>

I keep an array (int[]) of line start offsets - offsets[i] is the index in the input stream of the first character on line i. A binary search allows the lookup of line/column information for any index in O(log n) time. If you also remove the line/column numbers stored in the Token implementation, every token shrinks in size too.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Peter S. May
Sent: Sunday, November 04, 2012 8:47 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Revisited: Ending line/column of a token

Hiya, folks?

About a year ago a question was brought up regarding recovering the final (as well as the initial) line and column of a token to make it available e.g. to an AST or an action, and that it's undesirable to have to resort to counting characters and newlines:

http://www.antlr.org/pipermail/antlr-interest/2011-October/043116.html

It appears as if nobody ever answered.

The workaround I'm currently pursuing is promising but still somewhat
heinous: For any lexer rule that might contain newlines (multi-line strings/comments/et c.), instead of completing normally, a token is emitted containing the text proper followed by an artificial, zero-width "EndFinder" token.

The basic mechanism is based on the multi-emit lexer described at http://www.antlr.org/wiki/pages/viewpage.action?pageId=3604497. A zero-width fragment rule is forced into existence as an actual type in a manner similar to this:

	fragment EndFinder : ; // zero-width
	
	fragment SomeMultiLineThingText :
		'<<'
		( options {greedy=false;} : . )*
		'>>'
		;
	
	SomeMultiLineThing : t=SomeMultiLineThingText z=EndFinder
		{
			// The setType()s are necessary for
			// fragment-originated tokens, so
			// I gather
			$t.setType(SomeMultiLineThing);
			emit($t);
			$z.setType(EndFinder);
			emit($z);
		}
		;

And it actually seems to work, which surprised me. The unfortunate side effect is that each parser rule using one of these has to match two tokens where it would be more obvious to match just one:

	someMultiLineThing : t=SomeMultiLineThing z=EndFinder
		{
			// ...
			// $t.line and $t.pos are at the start
			// $z.line and $z.pos are at the end
			// ...
		}
		;

So my question now is this: Is there a "right", or at least less brain-damaged, way to accomplish the same thing?

Thanks, and enjoy
PSM

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From me at psmay.com  Mon Nov  5 04:46:43 2012
From: me at psmay.com (Peter S. May)
Date: Mon, 5 Nov 2012 07:46:43 -0500
Subject: [antlr-interest] Revisited: Ending line/column of a token
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0595C7CA@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <20121104214703.5a2b40e4@philo>
	<8802E2F086DC9648BD0585D82AC6377B0595C7CA@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <20121105074643.4b1ba6f3@philo>

The offsets table is an interesting idea. Where (in what method) do you
record the offsets?

(In the case of my project, the token shrinking would be premature
optimization. But the table part is intriguing.)

On Mon, 5 Nov 2012 03:32:40 +0000
Sam Harwell <sam at tunnelvisionlabs.com> wrote:

> I keep an array (int[]) of line start offsets - offsets[i] is the
> index in the input stream of the first character on line i. A binary
> search allows the lookup of line/column information for any index in
> O(log n) time. If you also remove the line/column numbers stored in
> the Token implementation, every token shrinks in size too.
> 
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Peter S. May
> Sent: Sunday, November 04, 2012 8:47 PM To: antlr-interest at antlr.org
> Subject: [antlr-interest] Revisited: Ending line/column of a token
> 
> Hiya, folks?
> 
> About a year ago a question was brought up regarding recovering the
> final (as well as the initial) line and column of a token to make it
> available e.g. to an AST or an action, and that it's undesirable to
> have to resort to counting characters and newlines:
> 
> http://www.antlr.org/pipermail/antlr-interest/2011-October/043116.html
> 
> It appears as if nobody ever answered.
> 
> The workaround I'm currently pursuing is promising but still somewhat
> heinous: For any lexer rule that might contain newlines (multi-line
> strings/comments/et c.), instead of completing normally, a token is
> emitted containing the text proper followed by an artificial,
> zero-width "EndFinder" token.
> 
> The basic mechanism is based on the multi-emit lexer described at
> http://www.antlr.org/wiki/pages/viewpage.action?pageId=3604497. A
> zero-width fragment rule is forced into existence as an actual type
> in a manner similar to this:
> 
> 	fragment EndFinder : ; // zero-width
> 	
> 	fragment SomeMultiLineThingText :
> 		'<<'
> 		( options {greedy=false;} : . )*
> 		'>>'
> 		;
> 	
> 	SomeMultiLineThing : t=SomeMultiLineThingText z=EndFinder
> 		{
> 			// The setType()s are necessary for
> 			// fragment-originated tokens, so
> 			// I gather
> 			$t.setType(SomeMultiLineThing);
> 			emit($t);
> 			$z.setType(EndFinder);
> 			emit($z);
> 		}
> 		;
> 
> And it actually seems to work, which surprised me. The unfortunate
> side effect is that each parser rule using one of these has to match
> two tokens where it would be more obvious to match just one:
> 
> 	someMultiLineThing : t=SomeMultiLineThing z=EndFinder
> 		{
> 			// ...
> 			// $t.line and $t.pos are at the start
> 			// $z.line and $z.pos are at the end
> 			// ...
> 		}
> 		;
> 
> So my question now is this: Is there a "right", or at least less
> brain-damaged, way to accomplish the same thing?
> 
> Thanks, and enjoy
> PSM
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From Thomas at ruschival.de  Mon Nov  5 05:05:32 2012
From: Thomas at ruschival.de (Thomas at ruschival.de)
Date: Mon, 05 Nov 2012 09:05:32 -0400
Subject: [antlr-interest]
 =?utf-8?q?how_to_skip/read_next_n_Characters_=28?=
 =?utf-8?q?n_is_read=09form_input=29?=
In-Reply-To: <000001cdb922$b2060ce0$161226a0$@barth@t-online.de>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
	<000001cdb922$b2060ce0$161226a0$@barth@t-online.de>
Message-ID: <dfe0bf30db572a06b1a1f5f1c893652e@ruschival.de>

Thanks Claus-Dieter,
it seems to work at least in the small test grammar I played around 
with. So far I didn't use semantic predicates, mainly because I don't 
fully understand them and many people warn about side-effects. Anyways I 
will try to integrate it and have our purchaseing department get a copy 
of Terence's book.

Thanks again
Thomas



Am 2012-11-02 13:51, schrieb cd.barth at t-online.de:
> Thomas, I would use validating semantic predicate
>
> readNchars
> : NUM
>   (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
> ;
>
> The idea is from Ter's book The Definitive ANTLR Reference (ANTLR v3)
>
> Gru? Claus-Dieter
>
>



From rjack at elegancetech.com  Mon Nov  5 05:39:01 2012
From: rjack at elegancetech.com (Roger Jack)
Date: Mon, 05 Nov 2012 08:39:01 -0500
Subject: [antlr-interest] Rewrite rule problem
Message-ID: <5097C175.4060507@elegancetech.com>

Below are 3 rules from a grammar that I'm working on:

Snippet qualified_open_type_name: 
'Global' (PERIOD identifier_or_keyword type_arity_list?)+ 
-> 'Global' ^(PERIOD identifier_or_keyword type_arity_list?)+;

type_arity_list: OPEN_PARENTHESIS 'Of' comma_list? CLOSE_PARENTHESIS 
-> ^('Of' comma_list?);

comma_list: COMMA+;

When I call the qualified_open_type_name rule, I get the following results:

input: Global.AnId1.AnId2
tree: Global (. (ID AnId1)) (. (ID AnId2)) <- This is correct.

input: Global.AnId1 (Of ,,,).AnId2
tree: Global (. (ID AnId1) (Of , , ,)) (. (ID AnId2) (Of , , ,)) <- 
Incorrect. The last (Of , , ,) should not be there.

Is my grammar incorrect? Is this a known bug? If it matters I'm using C# 
as the output language.

Thanks!

-- 
Roger Jack


From rafa.durelli at gmail.com  Mon Nov  5 08:12:24 2012
From: rafa.durelli at gmail.com (Rafael Durelli)
Date: Mon, 5 Nov 2012 14:12:24 -0200
Subject: [antlr-interest] Grammar for AspectJ
Message-ID: <CAOYHSj4CREBqcGq4EBCf6jKguGjhrQXaMsZezOTbhWmvo_8eRQ@mail.gmail.com>

Hello everyone,

I'd like to know if someone knows a grammar for AspectJ. I have been
searched for this on the internet but I haven't found out any grammar
AspectJ.g. Actually, I have found out a grammar which was devised by using
ANTLR 2.x, however, I'd like to know if someone has devised a Aspectj.g and
could share it.

Thanks everyone.

-- 
--Rafael Serapilha Durelli

PhD Candidate in Computer Science
Software Engineering Laboratory - LabES
University of S?o Paulo - ICMC/USP

From apalala at gmail.com  Mon Nov  5 09:01:09 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Mon, 5 Nov 2012 12:31:09 -0430
Subject: [antlr-interest] Relase 3.4.1/3.4
Message-ID: <CAN1YFWuFKFym1AWdhQMbdbBV9m0oYcWJe-dGAo9qdkrYJL0Huw@mail.gmail.com>

The website still says that 3.4 is current, but the tip in the repository
has many corrections and improvements.

Wasn't a 3.4.1 or 3.5 release due?

Cheers,

-- 
Juancarlo *A?ez*

 *A?ez*
tel:+58(414)901-2021
skype:juancarloanez

From apalala at gmail.com  Mon Nov  5 09:07:18 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Mon, 5 Nov 2012 12:37:18 -0430
Subject: [antlr-interest] v4 Python target
Message-ID: <CAN1YFWu_LGykk40YJHdr5VizG7c++6NzatELoHG_SeDZbZUkmQ@mail.gmail.com>

Is anyone working on the Python target for v4. Is there anything I can help
with?

Cheers,

-- 
Juancarlo *A?ez*

From parrt at cs.usfca.edu  Mon Nov  5 10:45:00 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 5 Nov 2012 10:45:00 -0800
Subject: [antlr-interest] Relase 3.4.1/3.4
In-Reply-To: <CAN1YFWuFKFym1AWdhQMbdbBV9m0oYcWJe-dGAo9qdkrYJL0Huw@mail.gmail.com>
References: <CAN1YFWuFKFym1AWdhQMbdbBV9m0oYcWJe-dGAo9qdkrYJL0Huw@mail.gmail.com>
Message-ID: <116DE35B-1B65-480C-BA90-DAB43419EC61@cs.usfca.edu>

yep, I literally just finished the book last night and sent it to the publisher and so now I have time. It will be 3.5.
T
On Nov 5, 2012, at 9:01 AM, Juancarlo A?ez wrote:

> The website still says that 3.4 is current, but the tip in the repository
> has many corrections and improvements.
> 
> Wasn't a 3.4.1 or 3.5 release due?
> 
> Cheers,
> 
> -- 
> Juancarlo *A?ez*
> 
> *A?ez*
> tel:+58(414)901-2021
> skype:juancarloanez
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Mon Nov  5 10:45:09 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 5 Nov 2012 10:45:09 -0800
Subject: [antlr-interest] v4 Python target
In-Reply-To: <CAN1YFWu_LGykk40YJHdr5VizG7c++6NzatELoHG_SeDZbZUkmQ@mail.gmail.com>
References: <CAN1YFWu_LGykk40YJHdr5VizG7c++6NzatELoHG_SeDZbZUkmQ@mail.gmail.com>
Message-ID: <A1068719-C722-4B20-9C44-1B4049F999AF@cs.usfca.edu>

 no one has started yet :)
T
On Nov 5, 2012, at 9:07 AM, Juancarlo A?ez wrote:

> Is anyone working on the Python target for v4. Is there anything I can help
> with?
> 
> Cheers,
> 
> -- 
> Juancarlo *A?ez*
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From bkiers at gmail.com  Mon Nov  5 11:14:50 2012
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 5 Nov 2012 20:14:50 +0100
Subject: [antlr-interest] Rewrite rule problem
In-Reply-To: <5097C175.4060507@elegancetech.com>
References: <5097C175.4060507@elegancetech.com>
Message-ID: <CAOrgODYK-wXF98-9fD+Nb3DY6OQi98n-AeAokHnaEG1Hg-K-1A@mail.gmail.com>

What happens if you try:

qualified_open_type_name
  :  'Global' (PERIOD identifier_or_keyword type_arity_list?)+
     -> ^('Global' (^(PERIOD identifier_or_keyword type_arity_list?))+)
  ;

?

Regards,

Bart.



On Mon, Nov 5, 2012 at 2:39 PM, Roger Jack <rjack at elegancetech.com> wrote:

> Below are 3 rules from a grammar that I'm working on:
>
> Snippet qualified_open_type_name:
> 'Global' (PERIOD identifier_or_keyword type_arity_list?)+
> -> 'Global' ^(PERIOD identifier_or_keyword type_arity_list?)+;
>
> type_arity_list: OPEN_PARENTHESIS 'Of' comma_list? CLOSE_PARENTHESIS
> -> ^('Of' comma_list?);
>
> comma_list: COMMA+;
>
> When I call the qualified_open_type_name rule, I get the following results:
>
> input: Global.AnId1.AnId2
> tree: Global (. (ID AnId1)) (. (ID AnId2)) <- This is correct.
>
> input: Global.AnId1 (Of ,,,).AnId2
> tree: Global (. (ID AnId1) (Of , , ,)) (. (ID AnId2) (Of , , ,)) <-
> Incorrect. The last (Of , , ,) should not be there.
>
> Is my grammar incorrect? Is this a known bug? If it matters I'm using C#
> as the output language.
>
> Thanks!
>
> --
> Roger Jack
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rjack at elegancetech.com  Mon Nov  5 12:07:20 2012
From: rjack at elegancetech.com (Roger Jack)
Date: Mon, 05 Nov 2012 15:07:20 -0500
Subject: [antlr-interest] Rewrite rule problem
In-Reply-To: <CAOrgODYK-wXF98-9fD+Nb3DY6OQi98n-AeAokHnaEG1Hg-K-1A@mail.gmail.com>
References: <5097C175.4060507@elegancetech.com>
	<CAOrgODYK-wXF98-9fD+Nb3DY6OQi98n-AeAokHnaEG1Hg-K-1A@mail.gmail.com>
Message-ID: <50981C78.3000301@elegancetech.com>

Bart,

Thanks for the reply! I tried both

      -> ^('Global' (^(PERIOD identifier_or_keyword type_arity_list?))+)

and

      -> 'Global' (^(PERIOD identifier_or_keyword type_arity_list?))+

and still had the same problem with type_arity_list.

Any other suggestions?
*
Roger Jack*
On 11/5/2012 2:14 PM, Bart Kiers wrote:
> What happens if you try:
>
> qualified_open_type_name
> : 'Global' (PERIOD identifier_or_keyword type_arity_list?)+
>      -> ^('Global' (^(PERIOD identifier_or_keyword type_arity_list?))+)
>   ;
>
> ?
>
> Regards,
>
> Bart.
>
>
>
> On Mon, Nov 5, 2012 at 2:39 PM, Roger Jack <rjack at elegancetech.com 
> <mailto:rjack at elegancetech.com>> wrote:
>
>     Below are 3 rules from a grammar that I'm working on:
>
>     Snippet qualified_open_type_name:
>     'Global' (PERIOD identifier_or_keyword type_arity_list?)+
>     -> 'Global' ^(PERIOD identifier_or_keyword type_arity_list?)+;
>
>     type_arity_list: OPEN_PARENTHESIS 'Of' comma_list? CLOSE_PARENTHESIS
>     -> ^('Of' comma_list?);
>
>     comma_list: COMMA+;
>
>     When I call the qualified_open_type_name rule, I get the following
>     results:
>
>     input: Global.AnId1.AnId2
>     tree: Global (. (ID AnId1)) (. (ID AnId2)) <- This is correct.
>
>     input: Global.AnId1 (Of ,,,).AnId2
>     tree: Global (. (ID AnId1) (Of , , ,)) (. (ID AnId2) (Of , , ,)) <-
>     Incorrect. The last (Of , , ,) should not be there.
>
>     Is my grammar incorrect? Is this a known bug? If it matters I'm
>     using C#
>     as the output language.
>
>     Thanks!
>
>     --
>     Roger Jack
>
>
>     List: http://www.antlr.org/mailman/listinfo/antlr-interest
>     Unsubscribe:
>     http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From apalala at gmail.com  Mon Nov  5 12:30:08 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Mon, 5 Nov 2012 16:00:08 -0430
Subject: [antlr-interest] v4 Python target
In-Reply-To: <A1068719-C722-4B20-9C44-1B4049F999AF@cs.usfca.edu>
References: <CAN1YFWu_LGykk40YJHdr5VizG7c++6NzatELoHG_SeDZbZUkmQ@mail.gmail.com>
	<A1068719-C722-4B20-9C44-1B4049F999AF@cs.usfca.edu>
Message-ID: <CAN1YFWs_By3t12ksNCw3_rP6Tek6t2ACH65EeEnmN6WOXfVENA@mail.gmail.com>

Terr,

On Mon, Nov 5, 2012 at 2:15 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>  no one has started yet :)
>

Who did the work for the previous version?

Have things changed much regarding targets? Would be necessary to start
from scratch?

-- 
Juancarlo *A?ez*

From DJBall05 at hotmail.co.uk  Tue Nov  6 07:33:22 2012
From: DJBall05 at hotmail.co.uk (DJB MASTER)
Date: Tue, 6 Nov 2012 07:33:22 -0800 (PST)
Subject: [antlr-interest] Tree Rewrite Rule Problem
Message-ID: <1352216001621-7579128.post@n2.nabble.com>

I'm trying to convert this tree...

<http://antlr.1301665.n2.nabble.com/file/n7579128/listTree.jpg> 

...into this tree...

<http://antlr.1301665.n2.nabble.com/file/n7579128/semanticTree.jpg> 

I'm using a Tree Grammar with pattern matching and this is the rule I've
tried...

*findInfix : ^(MROW (lefts=.*) left=.  MO right=. (rights=.*)) -> ^(MROW
$lefts* ^(MO $left $right) $rights*);*

In the tree *+* is represented by the *MO* token.

On running the tree grammar rewriter I get the following rewrite...

*(mrow (mi a) + (mi b) + (mi c)) -> (mrow + (+ (mi b) (mi c)))*

I don't know which part of my rule is wrong, because it is leaving out the
'lefts' part of the tree in the rewrite.

Here is a Eclipse project showing the erroneous rewrite...

https://dl.dropbox.com/u/46743877/MathML.zip
<https://dl.dropbox.com/u/46743877/MathML.zip>  

Thanks for any help.



--
View this message in context: http://antlr.1301665.n2.nabble.com/Tree-Rewrite-Rule-Problem-tp7579128.html
Sent from the ANTLR mailing list archive at Nabble.com.

From parrt at cs.usfca.edu  Tue Nov  6 09:19:04 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 6 Nov 2012 09:19:04 -0800
Subject: [antlr-interest] v4 Python target
In-Reply-To: <CAN1YFWs_By3t12ksNCw3_rP6Tek6t2ACH65EeEnmN6WOXfVENA@mail.gmail.com>
References: <CAN1YFWu_LGykk40YJHdr5VizG7c++6NzatELoHG_SeDZbZUkmQ@mail.gmail.com>
	<A1068719-C722-4B20-9C44-1B4049F999AF@cs.usfca.edu>
	<CAN1YFWs_By3t12ksNCw3_rP6Tek6t2ACH65EeEnmN6WOXfVENA@mail.gmail.com>
Message-ID: <12081713-5693-466C-A4A0-63CC09390830@cs.usfca.edu>

v4 is a complete rewrite, though it shares a lot of the simpler parts of the runtime like the token objects and some of the stream stuff.

The hard part in this version will be translating the very complicated ATN (augmented transition network) grammar analysis / simulation stuff. It does adaptive analysis on-the-fly. The algorithm easily explodes into exponential whirlpools of death unless all of the tricks used in the Java version are implemented.

When implemented, I wonder how the Python target will do in terms of speed. This version requires an insane amount of data structure walking and manipulation. Garbage collection speed is crucial.

Ter

On Nov 5, 2012, at 12:30 PM, Juancarlo A?ez wrote:

> Terr,
> 
> On Mon, Nov 5, 2012 at 2:15 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> 
>> no one has started yet :)
>> 
> 
> Who did the work for the previous version?
> 
> Have things changed much regarding targets? Would be necessary to start
> from scratch?
> 
> -- 
> Juancarlo *A?ez*
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jbb at acm.org  Tue Nov  6 14:55:50 2012
From: jbb at acm.org (John B. Brodie)
Date: Tue, 06 Nov 2012 17:55:50 -0500
Subject: [antlr-interest] Rewrite rule problem
In-Reply-To: <50981C78.3000301@elegancetech.com>
References: <5097C175.4060507@elegancetech.com>
	<CAOrgODYK-wXF98-9fD+Nb3DY6OQi98n-AeAokHnaEG1Hg-K-1A@mail.gmail.com>
	<50981C78.3000301@elegancetech.com>
Message-ID: <50999576.2020809@acm.org>

Greetings!

use a sub-rule. apparently ANTLRv3 is unable to maintain the tuple 
relationship inside the loop.

qualified_open_type_name: 'Global' helper+ ;

helper : PERIOD identifier_or_keyword type_arity_list?
       -> ^(PERIOD identifier_or_keyword type_arity_list?) ;

Hope this helps....
    -jbb

On 11/05/2012 03:07 PM, Roger Jack wrote:
> Bart,
>
> Thanks for the reply! I tried both
>
>        -> ^('Global' (^(PERIOD identifier_or_keyword type_arity_list?))+)
>
> and
>
>        -> 'Global' (^(PERIOD identifier_or_keyword type_arity_list?))+
>
> and still had the same problem with type_arity_list.
>
> Any other suggestions?
> *
> Roger Jack*
> On 11/5/2012 2:14 PM, Bart Kiers wrote:
>> What happens if you try:
>>
>> qualified_open_type_name
>> : 'Global' (PERIOD identifier_or_keyword type_arity_list?)+
>>       -> ^('Global' (^(PERIOD identifier_or_keyword type_arity_list?))+)
>>    ;
>>
>> ?
>>
>> Regards,
>>
>> Bart.
>>
>>
>>
>> On Mon, Nov 5, 2012 at 2:39 PM, Roger Jack <rjack at elegancetech.com
>> <mailto:rjack at elegancetech.com>> wrote:
>>
>>      Below are 3 rules from a grammar that I'm working on:
>>
>>      Snippet qualified_open_type_name:
>>      'Global' (PERIOD identifier_or_keyword type_arity_list?)+
>>      -> 'Global' ^(PERIOD identifier_or_keyword type_arity_list?)+;
>>
>>      type_arity_list: OPEN_PARENTHESIS 'Of' comma_list? CLOSE_PARENTHESIS
>>      -> ^('Of' comma_list?);
>>
>>      comma_list: COMMA+;
>>
>>      When I call the qualified_open_type_name rule, I get the following
>>      results:
>>
>>      input: Global.AnId1.AnId2
>>      tree: Global (. (ID AnId1)) (. (ID AnId2)) <- This is correct.
>>
>>      input: Global.AnId1 (Of ,,,).AnId2
>>      tree: Global (. (ID AnId1) (Of , , ,)) (. (ID AnId2) (Of , , ,)) <-
>>      Incorrect. The last (Of , , ,) should not be there.
>>
>>      Is my grammar incorrect? Is this a known bug? If it matters I'm
>>      using C#
>>      as the output language.
>>
>>      Thanks!
>>
>>      --
>>      Roger Jack
>>
>>
>>      List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>      Unsubscribe:
>>      http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From bkaiflin.ruby at gmail.com  Tue Nov  6 15:17:55 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Wed, 7 Nov 2012 00:17:55 +0100
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
Message-ID: <CAF9KzRPrXn3Uo2VAFd+Bp+OqoJe4p=2-9X2UarDDVpD0apVP=g@mail.gmail.com>

A solution for v3.4.

I had a hard time with decisions using multiple alternatives, multiplying
the subrules and syntactic predicates. Once you have tasted ANTLR4, you no
longer want to bother with all these ambiguity and backtracking problems.
Give it a try !

========== grammar

grammar Q3;

/* Recognize edited numbers like 1,234,567 as a whole but
   F(1, 2 ,3, 44,55,66) as 4 parameters, white space skipped,
   but `, ` and ` ,` are separators.
   for ANTLR v3.4 */

@parser::members {
    ArrayList<String> parms;
    void storeAtom(String text) {parms.add(text);}
}

sample
@init {System.out.println("---- last update 1908");}
    : piece* EOF ;

piece
@after {System.out.println("===== processed one piece of input : <" +
$piece.text + ">");}
    :   comma_integer | function
    ;

comma_integer
    :   INT COMMA INT ( COMMA INT )* {System.out.println("CI found a
comma_integer : " + $comma_integer.text);}
    ;

function
@init {parms = new ArrayList<String>();}
@after {int n = parms.size();
        System.out.println(">>>>> Function " + $function.text + " has " + n
+ " parameters");
        for(int i = 0; i < n; i++) System.out.println("p" + (i + 1) + "=`"
+ parms.get(i) + "`");
       }

    :   ID '(' list ')'
    ;

list
    :   a=atom_comma            {System.out.println("1a rule list chose
atom_comma <" + $a.text + ">"); storeAtom($a.text);}
        ( e1=element            {System.out.println("1b rule list chose
element <" + $e1.text + ">");
                                 /* p+=element doesn't works well} */
storeAtom($e1.text);}
        )
        ( seperator e2=element  {System.out.println("1c rule list chose
element <" + $e2.text + ">"); storeAtom($e2.text);}
        )*
    |   (INT COMMA INT)=>c=comma_integer
                                {System.out.println("2a rule list chose ci
<" + $c.text + ">"); storeAtom($c.text);}
        ( seperator d=element   {System.out.println("2b rule list chose
COMMA element <," + $d.text + ">");

/* storeAtom(","); */ storeAtom($d.text);}
        )*
    |   atom                    {System.out.println("3a rule list chose
atom <" + $atom.text + ">"); storeAtom($atom.text);}
        ( COMMA f=element       {System.out.println("3b rule list chose
COMMA element <," + $f.text + ">");

            storeAtom(","); storeAtom($f.text);}
        )*
    ;

element
    :   (INT COMMA INT)=> comma_integer {System.out.println("rule element
found a CI : <"    + $element.text + ">");}
    |   (atom_comma   )=> atom_comma    {System.out.println("rule element
found an AC : <"   + $element.text + ">");}
    |   atom                            {System.out.println("rule element
found an atom : <" + $element.text + ">");}
    ;

atom_comma
    :   atom COMMA_SPACE
    |   atom SPACE_COMMA
    ;

seperator
    :   COMMA
    |   COMMA_SPACE
    |   SPACE_COMMA
    ;

atom
    :   ID
    |   INT
    ;

COMMA_SPACE : ', '
{System.out.println("rule COMMA_SPACE `" + $text + "`");} ;
SPACE_COMMA : ' ,'
{System.out.println("rule SPACE_COMMA `" + $text + "`");} ;
COMMA : ',' ;
ID  : ( 'a'..'z' | 'A'..'Z' | '_')+
 {System.out.println("rule ID   `" + $text + "`");} ;
INT : DIGIT+
{System.out.println("rule INT  `" + $text + "`");} ;
WS  : ( ' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;}
 {System.out.println("rule WS");} ;

fragment DIGIT : '0'..'9' ;


========== standard Test file

import org.antlr.runtime.*;

public class Test {
    public static void main(String[] args) throws Exception {
        ANTLRInputStream input = new ANTLRInputStream(System.in);
        Q3Lexer lexer = new Q3Lexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        Q3Parser parser = new Q3Parser(tokens);
        parser.sample();
    }
}

========== input

$ cat t2.comma
1,234,567 F(1, x)  G(11,   12  , 13,444)  H(99,88,77,  66,6)  P(9,
8,77,666)  X(1 , 2, 3 ,4 , 5,6     ,   7,888,999)

========== execution

$ java Test < t2.comma
...
===== processed one piece of input : <1,234,567>
...
>>>>> Function F(1, x) has 2 parameters
p1=`1, `
p2=`x`
...
>>>>> Function H(99,88,77,  66,6) has 2 parameters
p1=`99,88,77`
p2=`66,6`
...
>>>>> Function X(1 , 2, 3 ,4 , 5,6     ,   7,888,999) has 6 parameters
p1=`1 ,`
p2=`2`
p3=`3`
p4=`4`
p5=`5,6`
p6=`7,888,999`


2012/11/3 Zhaohui Yang <yezonghui at gmail.com>

> Hi,
>
> I have a lexer grammar that that has to recognize INTEGER like 1234 and
> COMMA_INTEGER like 1,234,567
> The later integer token has comma in it, and of cause the language has
> other places that use comma, e.g. F(1, x) is valid, which contains "1,"
> that should be recognized as a INTEGER 1 followd by a comma.
> .........
> Yes. If there are white space before or after the comma, they are seperate
> parameters; if no white spaces around, it is one COMMA_integer.
> --
> Regards,
>
> Yang, Zhaohui
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From bkaiflin.ruby at gmail.com  Tue Nov  6 15:23:38 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Wed, 7 Nov 2012 00:23:38 +0100
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
Message-ID: <CAF9KzRPUx5qNJpz+8PsJ-3vg1ooqQSvaiz8AJf=r5nAwgC=p+Q@mail.gmail.com>

A solution for v4.

Roughly 2 hours using v4, 2 days using v3.4. As you can see by comparing
with the v3.4 solution, ANTLR4 is much more powerful, writing a grammar is
simpler, the trace is more user-friendly

enter   comma_integer, LT(1)=1
consume [@59,80:80='1',<7>,1:80] rule comma_integer alt=1
exit    comma_integer, LT(1)= ,

A big quantum leap, a five stars tool, if not All*.

========== grammar

grammar Q4;

/* Recognize edited numbers like 1,234,567 as a whole but
   F(1, 2 ,3, 44,55,66) as 4 parameters, white space skipped,
   but `, ` and ` ,` are separators.
   for ANTLR v4 */

@parser::members {
    ArrayList<String> parms;
    void storeAtom(String text) {
        parms.add(text);
//        System.out.println("atom <" + text + "> has been added");
    }
}

line
@init {System.out.println("--- last update 1426");}
    : piece* EOF ;

piece
    :   comma_integer  {System.out.println("===== found a COMMA_INTEGER :
<" + $comma_integer.text + ">");}
    |   function
    ;

comma_integer
    :   INT ( COMMA INT )*
    ;

function
@init {parms = new ArrayList<String>();}
@after {System.out.println(">>>>> Function " + $function.text + " has " +
parms.size() + " parameters");
        for(int i = 0; i < parms.size(); i++) System.out.println("p" + (i +
1) + "=`" + parms.get(i) + "`");
       }

    :   ID '(' list ')'
    ;

list
    :   a=atom
 {storeAtom($a.text);}
        ( seperator b=atom  {/* storeAtom($seperator.text); */
storeAtom($b.text);}
        )*
    ;

seperator
    :   COMMA
    |   COMMA_SPACE
    |   SPACE_COMMA
    ;

atom
    :   ID
    |   comma_integer
    |   INT
    ;

COMMA_SPACE : ', ' ;
SPACE_COMMA : ' ,' ;
COMMA : ',' ;
ID  : [a-zA-Z_]+ ;
INT : DIGIT+ ;
WS  : [ \t\r\n] -> channel(HIDDEN) ;

fragment DIGIT : [0-9];


========== input

$ cat t2.comma
1,234,567 F(1, x)  G(11,   12  , 13,444)  H(99,88,77,  66,6)  P(9,
8,77,666)  X(1 , 2, 3 ,4 , 5,6     ,   7,888,999)

========== execution

$ alias
alias antlr4='java -jar /usr/local/lib/antlr-4.0b2-complete.jar'
$ antlr4 Q4.g4
$ javac Q4*.java
$ grun Q4 line -tokens t2.comma
[@0,0:0='1',<7>,1:0]
[@1,1:1=',',<5>,1:1]
[@2,2:4='234',<7>,1:2]
...
--- last update 1426
===== found a COMMA_INTEGER : <1,234,567>
>>>>> Function F(1, x) has 2 parameters
p1=`1`
p2=`x`
>>>>> Function G(11,   12  , 13,444) has 3 parameters
p1=`11`
p2=`12`
p3=`13,444`
>>>>> Function H(99,88,77,  66,6) has 2 parameters
p1=`99,88,77`
p2=`66,6`
>>>>> Function P(9, 8,77,666) has 2 parameters
p1=`9`
p2=`8,77,666`
>>>>> Function X(1 , 2, 3 ,4 , 5,6     ,   7,888,999) has 6 parameters
p1=`1`
p2=`2`
p3=`3`
p4=`4`
p5=`5,6`
p6=`7,888,999`


2012/11/3 Zhaohui Yang <yezonghui at gmail.com>

> Hi,
>
> I have a lexer grammar that that has to recognize INTEGER like 1234 and
> COMMA_INTEGER like 1,234,567
> The later integer token has comma in it, and of cause the language has
> other places that use comma, e.g. F(1, x) is valid, which contains "1,"
> that should be recognized as a INTEGER 1 followd by a comma.
> ...........
>
Yes. If there are white space before or after the comma, they are seperate
parameters; if no white spaces around, it is one COMMA_integer.

> --
> Regards,
>
> Yang, Zhaohui
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rjack at elegancetech.com  Tue Nov  6 16:04:01 2012
From: rjack at elegancetech.com (Roger Jack)
Date: Tue, 06 Nov 2012 19:04:01 -0500
Subject: [antlr-interest] Rewrite rule problem
In-Reply-To: <50999576.2020809@acm.org>
References: <5097C175.4060507@elegancetech.com>
	<CAOrgODYK-wXF98-9fD+Nb3DY6OQi98n-AeAokHnaEG1Hg-K-1A@mail.gmail.com>
	<50981C78.3000301@elegancetech.com> <50999576.2020809@acm.org>
Message-ID: <5099A571.1020702@elegancetech.com>

John,

That worked...thanks!

*Roger Jack*
On 11/6/2012 5:55 PM, John B. Brodie wrote:
> Greetings!
>
> use a sub-rule. apparently ANTLRv3 is unable to maintain the tuple 
> relationship inside the loop.
>
> qualified_open_type_name: 'Global' helper+ ;
>
> helper : PERIOD identifier_or_keyword type_arity_list?
>       -> ^(PERIOD identifier_or_keyword type_arity_list?) ;
>
> Hope this helps....
>    -jbb
>
> On 11/05/2012 03:07 PM, Roger Jack wrote:
>> Bart,
>>
>> Thanks for the reply! I tried both
>>
>>        -> ^('Global' (^(PERIOD identifier_or_keyword 
>> type_arity_list?))+)
>>
>> and
>>
>>        -> 'Global' (^(PERIOD identifier_or_keyword type_arity_list?))+
>>
>> and still had the same problem with type_arity_list.
>>
>> Any other suggestions?
>> *
>> Roger Jack*
>> On 11/5/2012 2:14 PM, Bart Kiers wrote:
>>> What happens if you try:
>>>
>>> qualified_open_type_name
>>> : 'Global' (PERIOD identifier_or_keyword type_arity_list?)+
>>>       -> ^('Global' (^(PERIOD identifier_or_keyword 
>>> type_arity_list?))+)
>>>    ;
>>>
>>> ?
>>>
>>> Regards,
>>>
>>> Bart.
>>>
>>>
>>>
>>> On Mon, Nov 5, 2012 at 2:39 PM, Roger Jack <rjack at elegancetech.com
>>> <mailto:rjack at elegancetech.com>> wrote:
>>>
>>>      Below are 3 rules from a grammar that I'm working on:
>>>
>>>      Snippet qualified_open_type_name:
>>>      'Global' (PERIOD identifier_or_keyword type_arity_list?)+
>>>      -> 'Global' ^(PERIOD identifier_or_keyword type_arity_list?)+;
>>>
>>>      type_arity_list: OPEN_PARENTHESIS 'Of' comma_list? 
>>> CLOSE_PARENTHESIS
>>>      -> ^('Of' comma_list?);
>>>
>>>      comma_list: COMMA+;
>>>
>>>      When I call the qualified_open_type_name rule, I get the following
>>>      results:
>>>
>>>      input: Global.AnId1.AnId2
>>>      tree: Global (. (ID AnId1)) (. (ID AnId2)) <- This is correct.
>>>
>>>      input: Global.AnId1 (Of ,,,).AnId2
>>>      tree: Global (. (ID AnId1) (Of , , ,)) (. (ID AnId2) (Of , , 
>>> ,)) <-
>>>      Incorrect. The last (Of , , ,) should not be there.
>>>
>>>      Is my grammar incorrect? Is this a known bug? If it matters I'm
>>>      using C#
>>>      as the output language.
>>>
>>>      Thanks!
>>>
>>>      --
>>>      Roger Jack
>>>
>>>
>>>      List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>      Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: 
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>


From apalala at gmail.com  Wed Nov  7 13:04:44 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Wed, 7 Nov 2012 16:34:44 -0430
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
Message-ID: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>

In the Natural programming language it is possible to have "based" array
indexing. With a declaration like this:

2 ARR(1:5)

Array indexes must be of the form:

   ARR(1.2:4)

Alas, 1.2 is a floating point number everywhere else!

Other possibilities are ARR(1.#I:#J), ARR(#I.2:4), in which .2 is a valid
floating point number, but 1. isn't.

Is it possible to affect the lexer with variables in the rules that parse
the indexing? Or does the lexer tokenize all the input before the parser
starts?

TIA!

-- 
Juancarlo *A?ez*

From fivemiletom at gmail.com  Wed Nov  7 20:15:23 2012
From: fivemiletom at gmail.com (Tom)
Date: Wed, 7 Nov 2012 20:15:23 -0800
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
Message-ID: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>

Hello,

I am new to ANTLR, using version 3.4.

Does anybody have an idea what could be causing the following discrepancy:

When I use the GUI interpreter on an input I get some console errors below.

Now I use the debugger on exactly the same input (copy/paste), the whole
thing works:  whole ASTree is built as I want it.

I have seen some posts about line ending characters and having to reset the
token stream, but this all doesn't seem to apply here, does it?


Thanks
Tom



console errors:
==
[20:01:04] Interpreting...
[20:01:04] problem matching token at 1:3 MismatchedTokenException(97!=34)
[20:01:04] problem matching token at 1:4 NoViableAltException('a'@[1:1:
Tokens : ( AND | COMMA | OR | T__26 | T__27 | T__28 | T__29 | T__30 | T__31
| T__32 | T__33 | T__34 | T__35 | WS | Number | Exponent | String );])

From jimi at temporal-wave.com  Wed Nov  7 20:45:09 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 8 Nov 2012 12:45:09 +0800
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
In-Reply-To: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
References: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
Message-ID: <dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>

The interpreter is just a quick test of basic rules - it cannot do
anything complicated so it will get confused a lot. Just ignore the
interpreter and use the debug option, which will run the real thing. Also,
if you are building trees, then I would use real tokens in the lexer and
not 'literals' in the parser.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tom
Sent: Thursday, November 08, 2012 12:15 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] antlrworks "NoViableAlt" exception

Hello,

I am new to ANTLR, using version 3.4.

Does anybody have an idea what could be causing the following discrepancy:

When I use the GUI interpreter on an input I get some console errors
below.

Now I use the debugger on exactly the same input (copy/paste), the whole
thing works:  whole ASTree is built as I want it.

I have seen some posts about line ending characters and having to reset
the token stream, but this all doesn't seem to apply here, does it?


Thanks
Tom



console errors:
==
[20:01:04] Interpreting...
[20:01:04] problem matching token at 1:3 MismatchedTokenException(97!=34)
[20:01:04] problem matching token at 1:4 NoViableAltException('a'@[1:1:
Tokens : ( AND | COMMA | OR | T__26 | T__27 | T__28 | T__29 | T__30 |
T__31
| T__32 | T__33 | T__34 | T__35 | WS | Number | Exponent | String );])

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From apalala at gmail.com  Thu Nov  8 03:29:20 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 8 Nov 2012 06:59:20 -0430
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
In-Reply-To: <dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>
References: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
	<dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>
Message-ID: <CAN1YFWtO3k5d-GaRU63punp_4sDp-+RCgRKv2tiq=TNTFK5q+A@mail.gmail.com>

Jim,

On Thu, Nov 8, 2012 at 12:15 AM, Jim Idle <jimi at temporal-wave.com> wrote:

> if you are building trees, then I would use real tokens in the lexer and
> not 'literals' in the parser.
>

Why?

-- 
Juancarlo *A?ez*

From apalala at gmail.com  Thu Nov  8 04:01:58 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 8 Nov 2012 07:31:58 -0430
Subject: [antlr-interest] Bug in 3.4.1 Python target
Message-ID: <CAN1YFWt8Adf5-Wq_nmST0k9MXFTr=bYrSLa+yPhi_b1QgBiYTA@mail.gmail.com>

In CommonTokenSource.fillBuffer it reads:

                if overrideChannel == self.channel:
                    t.channel = overrideChannel
                else:
                    discard = True

Which discards every token for which the channel has been overridden.

-- 
Juancarlo *A?ez*

From mike at lischke-online.de  Thu Nov  8 04:14:45 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Thu, 8 Nov 2012 13:14:45 +0100
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
In-Reply-To: <CAN1YFWtO3k5d-GaRU63punp_4sDp-+RCgRKv2tiq=TNTFK5q+A@mail.gmail.com>
References: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
	<dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>
	<CAN1YFWtO3k5d-GaRU63punp_4sDp-+RCgRKv2tiq=TNTFK5q+A@mail.gmail.com>
Message-ID: <81E7AB74-15EF-4B6C-9E8D-959B08FD240C@lischke-online.de>

> 
>> if you are building trees, then I would use real tokens in the lexer and
>> not 'literals' in the parser.
>> 


Because literals in the parser (i.e. string constants used in parser rules) get a random lexer token id, which are hard to recognize when you walk your tree. By using lexer rules to name your tokens you know the ids.

Mike
-- 
www.soft-gems.net



From apalala at gmail.com  Thu Nov  8 04:57:49 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 8 Nov 2012 08:27:49 -0430
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
In-Reply-To: <81E7AB74-15EF-4B6C-9E8D-959B08FD240C@lischke-online.de>
References: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
	<dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>
	<CAN1YFWtO3k5d-GaRU63punp_4sDp-+RCgRKv2tiq=TNTFK5q+A@mail.gmail.com>
	<81E7AB74-15EF-4B6C-9E8D-959B08FD240C@lischke-online.de>
Message-ID: <CAN1YFWtxEb2QQF7Yz6meXJa38j0bJxV1O+SvBD9HCV9QJe3KyA@mail.gmail.com>

On Thu, Nov 8, 2012 at 7:44 AM, Mike Lischke <mike at lischke-online.de> wrote:

> Because literals in the parser (i.e. string constants used in parser
> rules) get a random lexer token id, which are hard to recognize when you
> walk your tree.


Why hard to recognize? ANTLR declares tokens for those literals in the
generated source. A 'WHILE' becomes WHILE=nnn.

-- 
Juancarlo *A?ez*

From jimi at temporal-wave.com  Thu Nov  8 05:03:27 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 8 Nov 2012 21:03:27 +0800
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
In-Reply-To: <CAN1YFWtxEb2QQF7Yz6meXJa38j0bJxV1O+SvBD9HCV9QJe3KyA@mail.gmail.com>
References: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
	<dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>
	<CAN1YFWtO3k5d-GaRU63punp_4sDp-+RCgRKv2tiq=TNTFK5q+A@mail.gmail.com>
	<81E7AB74-15EF-4B6C-9E8D-959B08FD240C@lischke-online.de>
	<CAN1YFWtxEb2QQF7Yz6meXJa38j0bJxV1O+SvBD9HCV9QJe3KyA@mail.gmail.com>
Message-ID: <5709545555670605748@unknownmsgid>

If the python target is doing that, it is incorrect. I doubt that
though. You should see T31, T32 etc and it won't always be the same.

Consider:

r1 : 'WHILE' ;
WHILE : 'while' ;

Please use ANTLR.markmail.org to find his discussed ad nauseum ;)

Jim

On Nov 8, 2012, at 20:58, "Juancarlo A?ez" <apalala at gmail.com> wrote:

> On Thu, Nov 8, 2012 at 7:44 AM, Mike Lischke <mike at lischke-online.de> wrote:
>
>> Because literals in the parser (i.e. string constants used in parser
>> rules) get a random lexer token id, which are hard to recognize when you
>> walk your tree.
>
>
> Why hard to recognize? ANTLR declares tokens for those literals in the
> generated source. A 'WHILE' becomes WHILE=nnn.
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From mike at lischke-online.de  Thu Nov  8 05:16:09 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Thu, 8 Nov 2012 14:16:09 +0100
Subject: [antlr-interest] Code generated for gated semantic predicates
Message-ID: <3C11016D-9213-47C5-8865-9B84B9B5E7FA@lischke-online.de>

Hi,

I have trouble with a simple rule that uses a gated semantic predicate, because of the generated code (antlr v3.4). Given these 3 simple rules:

string_literal:
	NCHAR_TEXT
	| UNDERSCORE_CHARSET? (single_quoted_string | {!SQL_MODE_ACTIVE(SQL_MODE_ANSI_QUOTES)}? => double_quoted_string)
;

single_quoted_string:
	( options { greedy = true; }: SINGLE_QUOTED_TEXT)+
;

double_quoted_string:
	( options { greedy = true; }: DOUBLE_QUOTED_TEXT)+
;

the code generated for double_quoted_string contains a check which makes no sense to me:

            // MySQL.g:2537:2: ( DOUBLE_QUOTED_TEXT )+
            {
                int cnt823=0;

                for (;;)
                {
                    int alt823=2;
            	switch ( LA(1) )
            	{
            	case DOUBLE_QUOTED_TEXT:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA823_67 = LA(2);
            			    if ( (!( ((((SQL_MODE_ACTIVE(SQL_MODE_ANSI_QUOTES)))||((!SQL_MODE_ACTIVE(SQL_MODE_ANSI_QUOTES))))) )))
            			    {
            			        alt823=1;
            			    }

            			}
            		}
            	    break;

            	}

alt823 is never set because of the if () always evaluates to false and I have no idea how get rid of this check. It simply doesn't belong there since the parent rule (string_literal) already ran the predicate).

Any hint to solve this is welcome!

Mike
-- 
www.soft-gems.net


From fivemiletom at gmail.com  Thu Nov  8 15:54:36 2012
From: fivemiletom at gmail.com (Tom)
Date: Thu, 8 Nov 2012 15:54:36 -0800
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
In-Reply-To: <dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>
References: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
	<dc3d08b6f157355386b09a30cf57c588@mail.gmail.com>
Message-ID: <CABGu7Ys3hvdfG99=tDuuXyCtzuaoJSQgeDt67HcJz+HnPt7o+g@mail.gmail.com>

On Wed, Nov 7, 2012 at 8:45 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> The interpreter is just a quick test of basic rules - it cannot do
> anything complicated so it will get confused a lot. Just ignore the
> interpreter and use the debug option, which will run the real thing.


I see. Thank you, Jim.


> Also,
> if you are building trees, then I would use real tokens in the lexer and
> not 'literals' in the parser.
>

OK, done that as well.
(I think that implies I have a statement like: tokenVocab=myGrammar. I am
not sure how the gui actually finds and uses the file myGrammar.g; but all
good as long as it works).



>
> Jim
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tom
> Sent: Thursday, November 08, 2012 12:15 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] antlrworks "NoViableAlt" exception
>
> Hello,
>
> I am new to ANTLR, using version 3.4.
>
> Does anybody have an idea what could be causing the following discrepancy:
>
> When I use the GUI interpreter on an input I get some console errors
> below.
>
> Now I use the debugger on exactly the same input (copy/paste), the whole
> thing works:  whole ASTree is built as I want it.
>
> I have seen some posts about line ending characters and having to reset
> the token stream, but this all doesn't seem to apply here, does it?
>
>
> Thanks
> Tom
>
>
>
> console errors:
> ==
> [20:01:04] Interpreting...
> [20:01:04] problem matching token at 1:3 MismatchedTokenException(97!=34)
> [20:01:04] problem matching token at 1:4 NoViableAltException('a'@[1:1:
> Tokens : ( AND | COMMA | OR | T__26 | T__27 | T__28 | T__29 | T__30 |
> T__31
> | T__32 | T__33 | T__34 | T__35 | WS | Number | Exponent | String );])
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From a.moderacja at gmail.com  Fri Nov  9 01:15:25 2012
From: a.moderacja at gmail.com (Borneq)
Date: Fri, 9 Nov 2012 10:15:25 +0100
Subject: [antlr-interest] Delphi and actionGate.st
Message-ID: <CANyn1kHDm=-N=wiWVPD7kVJvzEMnzOFKUifoyXe_6a7jX5GiAw@mail.gmail.com>

I try use Antrl with Delphi, I download runtime from
http://www.antlr.org/depot/antlr3/release-3.1.3/runtime/Delphi/
and stg from
http://www.antlr.org/depot/antlr3/release-3.2/tool/src/main/resources/org/antlr/codegen/templates/Delphi/
But is problem:
error(10):  internal error: XML.g :
java.lang.IllegalArgumentException: Can't find template actionGate.st;
group hierarchy is [Delphi]
I know that Delphi target is experimental, but I want experiment and
compile sample.

From mike at lischke-online.de  Fri Nov  9 02:18:09 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Fri, 9 Nov 2012 11:18:09 +0100
Subject: [antlr-interest] Code generated for gated semantic predicates
In-Reply-To: <3C11016D-9213-47C5-8865-9B84B9B5E7FA@lischke-online.de>
References: <3C11016D-9213-47C5-8865-9B84B9B5E7FA@lischke-online.de>
Message-ID: <2334226A-336E-4E71-9C80-0C4808B46C73@lischke-online.de>


? answering myself

> string_literal:
> 	NCHAR_TEXT
> 	| UNDERSCORE_CHARSET? (single_quoted_string | {!SQL_MODE_ACTIVE(SQL_MODE_ANSI_QUOTES)}? => double_quoted_string)
> ;
> 
> single_quoted_string:
> 	( options { greedy = true; }: SINGLE_QUOTED_TEXT)+
> ;
> 
> double_quoted_string:
> 	( options { greedy = true; }: DOUBLE_QUOTED_TEXT)+
> ;

by changing this rule to:

double_quoted_string:
	( options { greedy = true; }: DOUBLE_QUOTED_TEXT)+
	{ /**/ }
;

the generated code becomes:

            // MySQL.g:2538:2: ( options {greedy=true; } : DOUBLE_QUOTED_TEXT )+
            {
                int cnt823=0;

                for (;;)
                {
                    int alt823=2;
            	switch ( LA(1) )
            	{
            	case DOUBLE_QUOTED_TEXT:
            		{
            			alt823=1;
            		}
            	    break;

            	}

just like it should. Go figure?

> 
> the code generated for double_quoted_string contains a check which makes no sense to me:
> 
>             // MySQL.g:2537:2: ( DOUBLE_QUOTED_TEXT )+
>             {
>                 int cnt823=0;
> 
>                 for (;;)
>                 {
>                     int alt823=2;
>             	switch ( LA(1) )
>             	{
>             	case DOUBLE_QUOTED_TEXT:
>             		{
>             			{
>             			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
>             			    */
>             			    int LA823_67 = LA(2);
>             			    if ( (!( ((((SQL_MODE_ACTIVE(SQL_MODE_ANSI_QUOTES)))||((!SQL_MODE_ACTIVE(SQL_MODE_ANSI_QUOTES))))) )))
>             			    {
>             			        alt823=1;
>             			    }
> 
>             			}
>             		}
>             	    break;
> 
>             	}

Mike
-- 
www.soft-gems.net


From sinchronized.arun at gmail.com  Fri Nov  9 09:51:07 2012
From: sinchronized.arun at gmail.com (Arun Ramakrishnan)
Date: Fri, 9 Nov 2012 09:51:07 -0800
Subject: [antlr-interest] ambiguities in antlr3 grammar
Message-ID: <CAKVWSxsHW2qZjdZhdKKaCtLOaxeTSaOZ17g2UJ-awpwqb=h86A@mail.gmail.com>

  Take this grammar snippet ( antlr 3.4 )

*********************************
lhs : (phrase | value)+;
phrase : WORD+;
value : '{}';

WORD  :   ('a'..'z')+ ;
**********************************

I get the following warning in antlrworks.
***********************************
Decision can match input such as "WORD" using multiple alternatives: 1, 2

As a result, alternative(s) 2 were disabled for that input
***********************************

I understand that rules phrase and lhs might match the same piece of
string. But, then I know I am always going to try to parse the text by
calling the specific top level rule when invoke it right. So, is there a
way to make the warnings go away.

thanks
Arun

From a.moderacja at gmail.com  Fri Nov  9 10:39:07 2012
From: a.moderacja at gmail.com (Borneq)
Date: Fri, 9 Nov 2012 19:39:07 +0100
Subject: [antlr-interest] Huge tables in C lexers
Message-ID: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>

I compile sample lexer from http://www.antlr.org/wiki/display/ANTLR3/Parsing+XML
Java target lexer has 33.8 K, C#: 35.9 K, but if I write in XMLLexer.g :
options {
	language=C;
}
XMLLexer.c has 1219 K (!)
main size are tables in file.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: XMLLexer.g
Type: application/octet-stream
Size: 829 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20121109/43e2ade6/attachment.obj 

From jokeserver at gmail.com  Fri Nov  9 11:14:14 2012
From: jokeserver at gmail.com (Benjamin S Wolf)
Date: Fri, 9 Nov 2012 14:14:14 -0500
Subject: [antlr-interest] ambiguities in antlr3 grammar
In-Reply-To: <CAKVWSxsHW2qZjdZhdKKaCtLOaxeTSaOZ17g2UJ-awpwqb=h86A@mail.gmail.com>
References: <CAKVWSxsHW2qZjdZhdKKaCtLOaxeTSaOZ17g2UJ-awpwqb=h86A@mail.gmail.com>
Message-ID: <CAN51Nt6KF77ZCaqcXXTwx8rKKYcJQ=TtkOm0gr1ak8ofcDgU0g@mail.gmail.com>

It looks like your ambiguity is between lhs and phrase but not quite as you
say. The problem is that lhs can be multiple phrases and phrase can be
multiple words, thus WORD WORD can either be parsed as one phrase of two
words or two phrases of one word (the error is pointing at the second WORD
there).

You can get rid of the error by forcing one or the other options: change
lhs to prevent two phrases from neighboring each other, or change phrase to
only take one word at a time. That is,

lhs : phrase | ( value | phrase value )+ phrase? ;

or

phrase : WORD;


On Fri, Nov 9, 2012 at 12:51 PM, Arun Ramakrishnan <
sinchronized.arun at gmail.com> wrote:

>   Take this grammar snippet ( antlr 3.4 )
>
> *********************************
> lhs : (phrase | value)+;
> phrase : WORD+;
> value : '{}';
>
> WORD  :   ('a'..'z')+ ;
> **********************************
>
> I get the following warning in antlrworks.
> ***********************************
> Decision can match input such as "WORD" using multiple alternatives: 1, 2
>
> As a result, alternative(s) 2 were disabled for that input
> ***********************************
>
> I understand that rules phrase and lhs might match the same piece of
> string. But, then I know I am always going to try to parse the text by
> calling the specific top level rule when invoke it right. So, is there a
> way to make the warnings go away.
>
> thanks
> Arun
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From nodcosta at in.ibm.com  Fri Nov  9 14:42:01 2012
From: nodcosta at in.ibm.com (Noel Dcosta)
Date: Sat, 10 Nov 2012 04:12:01 +0530
Subject: [antlr-interest] AUTO: Noel Dcosta is out of the office (returning
	11/15/2012)
Message-ID: <OFB5F4B43C.14648117-ON65257AB1.007CB263-65257AB1.007CB263@in.ibm.com>


I am out of the office until 11/15/2012.

I am on vacation from Nov 10 to Nov 14


Note: This is an automated response to your message  "antlr-interest
Digest, Vol 96, Issue 9" sent on 10/11/2012 1:30:01.

This is the only notification you will receive while this person is away.


From bkaiflin.ruby at gmail.com  Fri Nov  9 15:53:51 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sat, 10 Nov 2012 00:53:51 +0100
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
Message-ID: <CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>

Hi,
Which grammar are you following ?

I have fond this one :
http://documentation.softwareag.com/natural/nat627unx/pg/pg_defi_array.htm#prelim_info

which doesn't talk about "based" array indexing.

Is it possible to affect the lexer with variables in the rules that parse
> the indexing?

  There are the semantic predicates : RULE : ... {boolean expression}?

> Or does the lexer tokenize all the input before the parser starts?


 No, the lexer answers to nextToken() requests from the parser. Starting at
the character position behind the last token consumed, it chooses the rule
that matches the most input characters. If the input can match two rules, ANTLR
resolves this lexical ambiguity by matching the input string to the rule
specified first in the grammar.

The fact that the lexer follows only the lexer RULES can give the feeling
that it does not "obey" to your parser rules as you might imagine :)

HTH
Bernard


2012/11/7 Juancarlo A?ez <apalala at gmail.com>

> In the Natural programming language it is possible to have "based" array
> indexing. With a declaration like this:
>
> 2 ARR(1:5)
>
> Array indexes must be of the form:
>
>    ARR(1.2:4)
>
> Alas, 1.2 is a floating point number everywhere else!
>
> Other possibilities are ARR(1.#I:#J), ARR(#I.2:4), in which .2 is a valid
> floating point number, but 1. isn't.
>
> Is it possible to affect the lexer with variables in the rules that parse
> the indexing? Or does the lexer tokenize all the input before the parser
> starts?
>
> TIA!
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From alex.kostikov at gmail.com  Fri Nov  9 18:26:18 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Fri, 9 Nov 2012 18:26:18 -0800
Subject: [antlr-interest] ANTLR C# - Visual Studio doesn't show ANTLR
	project templates
Message-ID: <CAGAhT3k=-s_hOnqukJjR7fbA_3m9-sGQwVwUqz3g+hK2nwFq9g@mail.gmail.com>

Hi,

I've installed ANTLR C# port from
http://www.antlr.org/wiki/display/ANTLR3/Antlr3CSharpReleases and now
I'm following man on
http://www.tunnelvisionlabs.com/downloads/antlr/ANTLRCSharpDocumentation-9004.xps.

The manual says that once visual studio extensions are installed there
would be several new ANTLR project templates available (like ANTLR
Combined Parser). But I can't find any. Search in Installed Templates
by 'antlr' yields 'no items found'.
The installed extensions versions are:
- ANTLR Language Support 1.0.11
- StringTemplate 4 Language Support 1.0.11.0

Do I need to install visual studio project template from somewhere else?

--
Alexander Kostikov

From yezonghui at gmail.com  Fri Nov  9 20:39:09 2012
From: yezonghui at gmail.com (Zhaohui Yang)
Date: Sat, 10 Nov 2012 12:39:09 +0800
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <CAF9KzRPUx5qNJpz+8PsJ-3vg1ooqQSvaiz8AJf=r5nAwgC=p+Q@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
	<CAF9KzRPUx5qNJpz+8PsJ-3vg1ooqQSvaiz8AJf=r5nAwgC=p+Q@mail.gmail.com>
Message-ID: <CAO51=GSSgnY9JhHxTTobqt=X_kHA7sHT3Qj0TQRtVugGOJ9Qmw@mail.gmail.com>

The main ambiguity here is that a sequence like "1  ,2" can either by
recognized as a comma_integer (INT WS COMMA INT) or a list
(comma_integer=INT, seperator=SPACE_COMMA, comma_integer=INT).

I guess the simplicity of the V4 version come from some default priority /
greedy policy that favous comma_integer (than seperator in list). Or ANTLR
V4 has unified ambiguity analysis that considers all lexer and parser rules
together?

Maybe I should buy a V4 book and find out :)


2012/11/7 Bernard Kaiflin <bkaiflin.ruby at gmail.com>

> A solution for v4.
>
> Roughly 2 hours using v4, 2 days using v3.4. As you can see by comparing
> with the v3.4 solution, ANTLR4 is much more powerful, writing a grammar is
> simpler, the trace is more user-friendly
>
> enter   comma_integer, LT(1)=1
> consume [@59,80:80='1',<7>,1:80] rule comma_integer alt=1
> exit    comma_integer, LT(1)= ,
>
> A big quantum leap, a five stars tool, if not All*.
>
> ========== grammar
>
> grammar Q4;
>
> /* Recognize edited numbers like 1,234,567 as a whole but
>    F(1, 2 ,3, 44,55,66) as 4 parameters, white space skipped,
>    but `, ` and ` ,` are separators.
>    for ANTLR v4 */
>
> @parser::members {
>     ArrayList<String> parms;
>     void storeAtom(String text) {
>         parms.add(text);
> //        System.out.println("atom <" + text + "> has been added");
>     }
> }
>
> line
> @init {System.out.println("--- last update 1426");}
>     : piece* EOF ;
>
> piece
>     :   comma_integer  {System.out.println("===== found a COMMA_INTEGER :
> <" + $comma_integer.text + ">");}
>     |   function
>     ;
>
> comma_integer
>     :   INT ( COMMA INT )*
>     ;
>
> function
> @init {parms = new ArrayList<String>();}
> @after {System.out.println(">>>>> Function " + $function.text + " has " +
> parms.size() + " parameters");
>         for(int i = 0; i < parms.size(); i++) System.out.println("p" + (i
> + 1) + "=`" + parms.get(i) + "`");
>        }
>
>     :   ID '(' list ')'
>     ;
>
> list
>     :   a=atom
>  {storeAtom($a.text);}
>         ( seperator b=atom  {/* storeAtom($seperator.text); */
> storeAtom($b.text);}
>         )*
>     ;
>
> seperator
>     :   COMMA
>     |   COMMA_SPACE
>     |   SPACE_COMMA
>     ;
>
> atom
>     :   ID
>     |   comma_integer
>     |   INT
>     ;
>
> COMMA_SPACE : ', ' ;
> SPACE_COMMA : ' ,' ;
> COMMA : ',' ;
> ID  : [a-zA-Z_]+ ;
> INT : DIGIT+ ;
> WS  : [ \t\r\n] -> channel(HIDDEN) ;
>
> fragment DIGIT : [0-9];
>
>
> ========== input
>
> $ cat t2.comma
> 1,234,567 F(1, x)  G(11,   12  , 13,444)  H(99,88,77,  66,6)  P(9,
> 8,77,666)  X(1 , 2, 3 ,4 , 5,6     ,   7,888,999)
>
> ========== execution
>
> $ alias
> alias antlr4='java -jar /usr/local/lib/antlr-4.0b2-complete.jar'
> $ antlr4 Q4.g4
> $ javac Q4*.java
> $ grun Q4 line -tokens t2.comma
> [@0,0:0='1',<7>,1:0]
> [@1,1:1=',',<5>,1:1]
> [@2,2:4='234',<7>,1:2]
> ...
> --- last update 1426
> ===== found a COMMA_INTEGER : <1,234,567>
> >>>>> Function F(1, x) has 2 parameters
> p1=`1`
> p2=`x`
> >>>>> Function G(11,   12  , 13,444) has 3 parameters
> p1=`11`
> p2=`12`
> p3=`13,444`
> >>>>> Function H(99,88,77,  66,6) has 2 parameters
> p1=`99,88,77`
> p2=`66,6`
> >>>>> Function P(9, 8,77,666) has 2 parameters
> p1=`9`
> p2=`8,77,666`
> >>>>> Function X(1 , 2, 3 ,4 , 5,6     ,   7,888,999) has 6 parameters
> p1=`1`
> p2=`2`
> p3=`3`
> p4=`4`
> p5=`5,6`
> p6=`7,888,999`
>
>
> 2012/11/3 Zhaohui Yang <yezonghui at gmail.com>
>
>> Hi,
>>
>> I have a lexer grammar that that has to recognize INTEGER like 1234 and
>> COMMA_INTEGER like 1,234,567
>> The later integer token has comma in it, and of cause the language has
>> other places that use comma, e.g. F(1, x) is valid, which contains "1,"
>> that should be recognized as a INTEGER 1 followd by a comma.
>> ...........
>>
> Yes. If there are white space before or after the comma, they are seperate
> parameters; if no white spaces around, it is one COMMA_integer.
>
>> --
>> Regards,
>>
>> Yang, Zhaohui
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>


-- 
Regards,

Yang, Zhaohui

From jimi at temporal-wave.com  Fri Nov  9 22:40:35 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 10 Nov 2012 14:40:35 +0800
Subject: [antlr-interest] Huge tables in C lexers
In-Reply-To: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>
References: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>
Message-ID: <-2797254231912988500@unknownmsgid>

Please see ANTLR.markmail.org. The issue is with your grammar. The
Ctarget lays out static tables that the compiler can then use directly
in memory structures loaded from the executable target. So you see the
full data set. Java creates compressed strings which must first be
created at start up time and then decompressed to generate the same
tables as C.

Review your grammar by looking at which of the tables are so big and
correlating these with your rules. You should be able to see the
issue.

Jim
(At the 200th time of answering this one ;)

On Nov 10, 2012, at 2:39, Borneq <a.moderacja at gmail.com> wrote:

> I compile sample lexer from http://www.antlr.org/wiki/display/ANTLR3/Parsing+XML
> Java target lexer has 33.8 K, C#: 35.9 K, but if I write in XMLLexer.g :
> options {
>    language=C;
> }
> XMLLexer.c has 1219 K (!)
> main size are tables in file.
> <XMLLexer.g>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From bkaiflin.ruby at gmail.com  Fri Nov  9 23:18:35 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sat, 10 Nov 2012 08:18:35 +0100
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <CAO51=GSSgnY9JhHxTTobqt=X_kHA7sHT3Qj0TQRtVugGOJ9Qmw@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
	<CAF9KzRPUx5qNJpz+8PsJ-3vg1ooqQSvaiz8AJf=r5nAwgC=p+Q@mail.gmail.com>
	<CAO51=GSSgnY9JhHxTTobqt=X_kHA7sHT3Qj0TQRtVugGOJ9Qmw@mail.gmail.com>
Message-ID: <CAF9KzRMUs-4kgdENod9iFxsMpqGA9fQWFYkasQLNCErQwuH3+A@mail.gmail.com>

There is no ambiguity since SPACE_COMMA is defined before WS and will
consume the space and the comma before the 2 in a single token. I had
suppressed the full trace to shorten my reply. But if you cut and paste the
grammar and the example input and run it on your machine, with the v3.4
solution as is, you will see how the lexer interprets the input, here for
<3 ,4>. Unless unknown incompatibility problem, you should see this :

rule INT  `3`
rule element found an atom : <2>
1b rule list chose element <2>
rule SPACE_COMMA ` ,`
rule INT  `4`
rule element found an atom : <3>
1c rule list chose element <3>
rule SPACE_COMMA ` ,`
rule WS
rule INT  `5`
rule element found an atom : <4>
1c rule list chose element <4>


2012/11/10 Zhaohui Yang <yezonghui at gmail.com>

> The main ambiguity here is that a sequence like "1  ,2" can either by
> recognized as a comma_integer (INT WS COMMA INT) or a list
> (comma_integer=INT, seperator=SPACE_COMMA, comma_integer=INT).
>
>

From bkaiflin.ruby at gmail.com  Sat Nov 10 01:30:06 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sat, 10 Nov 2012 10:30:06 +0100
Subject: [antlr-interest] antlrworks "NoViableAlt" exception
In-Reply-To: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
References: <CABGu7YtVh_XpW6e5556KmYg9FY4+gfoj4q0DeYuNZ=MJdXvP8Q@mail.gmail.com>
Message-ID: <CAF9KzRN-RYNx-gU1fgkUbWUd9_5petw4FYC6MmRJcz7ZzYdeew@mail.gmail.com>

Hi,
If you are new to ANTLR, I would recommend that you start with the v4. Much
more powerful, simpler and user-friendly.

You can start here : http://forums.pragprog.com/forums/206/topics/11231

HTH
Bernard


2012/11/8 Tom <fivemiletom at gmail.com>

> Hello,
>
> I am new to ANTLR, using version 3.4.
>
>

From mike at lischke-online.de  Sat Nov 10 04:23:14 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Sat, 10 Nov 2012 13:23:14 +0100
Subject: [antlr-interest] Huge tables in C lexers
In-Reply-To: <-2797254231912988500@unknownmsgid>
References: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>
	<-2797254231912988500@unknownmsgid>
Message-ID: <DF310CE8-E366-4153-93FE-F34E2DD37701@lischke-online.de>


Hey Jim,

> Please see ANTLR.markmail.org. The issue is with your grammar. The
> Ctarget lays out static tables that the compiler can then use directly
> in memory structures loaded from the executable target. So you see the
> full data set. Java creates compressed strings which must first be
> created at start up time and then decompressed to generate the same
> tables as C.
> 
> Review your grammar by looking at which of the tables are so big and
> correlating these with your rules. You should be able to see the
> issue.
> 
> Jim
> (At the 200th time of answering this one ;)

.. which shows how important this issue is. My lexer is 32MB in size, just because of these tables. This stems from the fact that I have to allow almost the entire Unicode BMP for my identifiers. Without that the lexer shrinks to 7MB. Maybe it would be worth implementing a similar compression feature in the C target too? Do you know if this same problem will also be existent in ANTLR v4?

Mike
-- 
www.soft-gems.net



From bkaiflin.ruby at gmail.com  Sat Nov 10 06:00:33 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sat, 10 Nov 2012 15:00:33 +0100
Subject: [antlr-interest] Lexer rule for INTEGER and COMMA_INTEGER
In-Reply-To: <CAO51=GSSgnY9JhHxTTobqt=X_kHA7sHT3Qj0TQRtVugGOJ9Qmw@mail.gmail.com>
References: <CAO51=GRyUdLpEpw28y_dO+enH_vE4sZ6n67-QrF4Pjy0iTmWyw@mail.gmail.com>
	<CAF9KzRPUx5qNJpz+8PsJ-3vg1ooqQSvaiz8AJf=r5nAwgC=p+Q@mail.gmail.com>
	<CAO51=GSSgnY9JhHxTTobqt=X_kHA7sHT3Qj0TQRtVugGOJ9Qmw@mail.gmail.com>
Message-ID: <CAF9KzRMboC6OSf2dAXk5EmbnaG5jVApS4pYA0A-VsnkspKJW8Q@mail.gmail.com>

Oh, I see what you mean. You may have been fooled because comma_integer is
inside atom.

Yes, a sequence like "1  ,2" INSIDE a function will be recognized as a list
(comma_integer=INT, separator=SPACE_COMMA, comma_integer=INT). This is not
a single comma_integer but three tokens.

No, a sequence like "1  ,2" OUTSIDE a function cannot be recognized as a
comma_integer (INT WS COMMA INT), it will fail. As we are outside a
function, the rule piece will call comma_integer which will consume `1` as
an INT. Then the parser will try the loop  ( COMMA INT )*. It sends a
getToken() request to the lexer. The pointer in the input stream is under
the space after 1. The space is ambiguous because the lexer has the choice
between SPACE_COMMA and WS. So the lexer peeks the next character to see if
it is a comma. No, so there is no more ambiguity, the lexer creates a WS
token on the hidden channel and starts the process again. The pointer in
the input stream is now under the second space after 1, before the comma.
The space is ambiguous because the lexer has the choice between SPACE_COMMA
and WS. So the lexer peeks the next character to see if it is a comma. Yes,
so there is no more ambiguity, the lexer emits a SPACE_COMMA token and
returns. As the parser is waiting for a COMMA, it fails to match and sends
a message like no viable alternative at input ' ,'.

Hope it's now clear.
Bernard


2012/11/10 Zhaohui Yang <yezonghui at gmail.com>

> The main ambiguity here is that a sequence like "1  ,2" can either by
> recognized as a comma_integer (INT WS COMMA INT) or a list
> (comma_integer=INT, seperator=SPACE_COMMA, comma_integer=INT).
>
> I guess the simplicity of the V4 version come from some default priority /
> greedy policy that favous comma_integer (than seperator in list). Or ANTLR
> V4 has unified ambiguity analysis that considers all lexer and parser rules
> together?
>
> --
> Regards,
>
> Yang, Zhaohui
>
>

From apalala at gmail.com  Sat Nov 10 06:06:11 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 10 Nov 2012 09:36:11 -0430
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
Message-ID: <CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>

Hello, Bernard,

On Fri, Nov 9, 2012 at 7:23 PM, Bernard Kaiflin <bkaiflin.ruby at gmail.com>wrote:

> No, the lexer answers to nextToken() requests from the parser. Starting at
> the character position behind the last token consumed, it chooses the rule
> that matches the most input characters. If the input can match two rules, ANTLR
> resolves this lexical ambiguity by matching the input string to the rule
> specified first in the grammar.
>

The Python implementation of CommonTokenStream lexes all the input in one
pass storing the tokens in a list that it later indexes to deliver tokens
to the parser.

To do what I suggested, I would have to write my own token stream, and
probably resource to the "mark" family of methods to allow the parser to
backtrack.

-- 
Juancarlo *A?ez*

From bkaiflin.ruby at gmail.com  Sat Nov 10 07:18:43 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sat, 10 Nov 2012 16:18:43 +0100
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
Message-ID: <CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>

Ola Juancarlo,

Astonishing that we can tokenize all the input. In Ruby it's impossible
because, seeing a regular expression like /(\.\'\d+)?/, the lexer would
emit a DIV, an LPAR, a MEMBER and, seeing the apostrophe, would match an
APOST_STRING and eat the rest of the file until it encounters another
apostrophe.

I still don't see the relationship between 2 ARR(1:5) ARR(1.2:4) ARR(1.#I:#J)
and a Python CommonTokenStream. Is it a special version of Natural ? Do you
have the specifications for this language ?

2012/11/10 Juancarlo A?ez <apalala at gmail.com>

> Hello, Bernard,
>
> On Fri, Nov 9, 2012 at 7:23 PM, Bernard Kaiflin <bkaiflin.ruby at gmail.com
> >wrote:
>
> > No, the lexer answers to nextToken() requests from the parser. Starting
> at
> > the character position behind the last token consumed, it chooses the
> rule
> > that matches the most input characters. If the input can match two
> rules, ANTLR
> > resolves this lexical ambiguity by matching the input string to the rule
> > specified first in the grammar.
> >
>
> The Python implementation of CommonTokenStream lexes all the input in one
> pass storing the tokens in a list that it later indexes to deliver tokens
> to the parser.
>
> To do what I suggested, I would have to write my own token stream, and
> probably resource to the "mark" family of methods to allow the parser to
> backtrack.
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From apalala at gmail.com  Sat Nov 10 08:11:33 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 10 Nov 2012 11:41:33 -0430
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
	<CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
Message-ID: <CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>

Bernard,

On Sat, Nov 10, 2012 at 10:48 AM, Bernard Kaiflin
<bkaiflin.ruby at gmail.com>wrote:

> I still don't see the relationship between 2 ARR(1:5) ARR(1.2:4) ARR(1.#I:#J)
> and a Python CommonTokenStream. Is it a special version of Natural ? Do
> you have the specifications for this language ?
>

With the existing CommonTokenStream, the 1.2 in ARR(1.2:4) has been lexed
as a float before the parser started, which is way before the parser gets
to the expression. The Python CommonTokenStream bootstraps itself by
tokenizing all input on the first call to any of the methods that return a
token.

I built the grammar for Natural from the reference material, which includes
sort-of grammar descriptions.

I think that a language like Ruby requires a parser-guided lexer. I've
built some of those by hand before, and they are very efficient. But
Natural's grammar was too big (~3000 lines) to try to approach it by hand.

Cheers,

-- 
Juancarlo *A?ez*

From bkaiflin.ruby at gmail.com  Sat Nov 10 08:49:54 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sat, 10 Nov 2012 17:49:54 +0100
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
	<CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
	<CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>
Message-ID: <CAF9KzRPo3ihCPi0h9R6=9G68fs6OD8v5h9yAUuHzGo6KAfBJ2A@mail.gmail.com>

Yes, only the Ruby parser (the one I wrote by hand) knows if it is in the
middle of an expression and if the / is a division. If it is expecting an
atom, it knows that the / starts a regexp and can ask the lexer to rewind
and recreate a token with the whole regexp.

If I well understand, you have a grammar

array     : 'ARR' '(' index '.' dimension ')' ;
dimension : start ':' stop ;

(index, start and stop are probably replaced by INT, by I give them names
for clarity). As the file is tokenized in advance, the lexer has created

ARR or ID
LPAR
FLOAT
COLON
INT
RPAR

instead of

ARR or ID
LPAR
INT
DOT
INT
COLON
INT
RPAR

And now the token stream mismatches the grammar. Before going further,
please tell me if it's correct.


2012/11/10 Juancarlo A?ez <apalala at gmail.com>

> Bernard,
>
> On Sat, Nov 10, 2012 at 10:48 AM, Bernard Kaiflin
> <bkaiflin.ruby at gmail.com>wrote:
>
> > I still don't see the relationship between 2 ARR(1:5) ARR(1.2:4)
> ARR(1.#I:#J)
> > and a Python CommonTokenStream. Is it a special version of Natural ? Do
> > you have the specifications for this language ?
> >
>
> With the existing CommonTokenStream, the 1.2 in ARR(1.2:4) has been lexed
> as a float before the parser started, which is way before the parser gets
> to the expression. The Python CommonTokenStream bootstraps itself by
> tokenizing all input on the first call to any of the methods that return a
> token.
>
> I built the grammar for Natural from the reference material, which includes
> sort-of grammar descriptions.
>
> I think that a language like Ruby requires a parser-guided lexer. I've
> built some of those by hand before, and they are very efficient. But
> Natural's grammar was too big (~3000 lines) to try to approach it by hand.
>
> Cheers,
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Sat Nov 10 10:56:59 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 10 Nov 2012 10:56:59 -0800
Subject: [antlr-interest] antlr v4.0b3 released
Message-ID: <1D7843B7-5BF8-4756-8BEA-6AC50BB77B85@cs.usfca.edu>

Howdy. Getting closer to 4.0 :) Here is another beta release with lots of fixes.

http://www.antlr.org/download/antlr-4.0b3-complete.jar

You can grab the source using the tag at github:

https://github.com/antlr/antlr4/tags

This is the version that corresponds to the upcoming beta 3 of the book (Monday).You can get the beta here:

http://pragprog.com/book/tpantlr2/the-definitive-antlr-4-reference

I think this'll be the last beta before production.

Ter

From df at release14.org  Sat Nov 10 11:48:16 2012
From: df at release14.org (Damir Franusic)
Date: Sat, 10 Nov 2012 20:48:16 +0100
Subject: [antlr-interest]  errorCount not reset when reusing input stream
In-Reply-To: <1D7843B7-5BF8-4756-8BEA-6AC50BB77B85@cs.usfca.edu>
References: <1D7843B7-5BF8-4756-8BEA-6AC50BB77B85@cs.usfca.edu>
Message-ID: <509EAF80.4080408@release14.org>

Hi

I am not sure if this is really a bug but when you're reusing 
input/parser/lexer, getNumberOfSyntaxErrors returns incremental value 
between sessions, state->errorCount is not reset. I am manualy setting 
state->errorCount to zero before calling reuse on input stream.

P.S.
I am using latest antlr v3.4 dowloaded from GitHub(master branch) couple 
of days ago.


*Damir Franusic*
Founder / Lead developer

r14 logo
*Release 14*
e: df at release14.org
w: http://www.release14.org/


From apalala at gmail.com  Sat Nov 10 12:48:57 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 10 Nov 2012 16:18:57 -0430
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAF9KzRPo3ihCPi0h9R6=9G68fs6OD8v5h9yAUuHzGo6KAfBJ2A@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
	<CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
	<CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>
	<CAF9KzRPo3ihCPi0h9R6=9G68fs6OD8v5h9yAUuHzGo6KAfBJ2A@mail.gmail.com>
Message-ID: <CAN1YFWuM_298aEK+B6vs9zFOmMe6G1SZ7DLZE=d9=5OWHv4gRA@mail.gmail.com>

Bernard,

That is correct.

I know that the solution is what you describe for Ruby. I wanted to know if
someone had done the likes with ANTLR.

-- Juancarlo


On Sat, Nov 10, 2012 at 12:19 PM, Bernard Kaiflin
<bkaiflin.ruby at gmail.com>wrote:

> Yes, only the Ruby parser (the one I wrote by hand) knows if it is in the
> middle of an expression and if the / is a division. If it is expecting an
> atom, it knows that the / starts a regexp and can ask the lexer to rewind
> and recreate a token with the whole regexp.
>
> If I well understand, you have a grammar
>
> array     : 'ARR' '(' index '.' dimension ')' ;
> dimension : start ':' stop ;
>
> (index, start and stop are probably replaced by INT, by I give them names
> for clarity). As the file is tokenized in advance, the lexer has created
>
> ARR or ID
> LPAR
> FLOAT
> COLON
> INT
> RPAR
>
> instead of
>
> ARR or ID
> LPAR
> INT
> DOT
> INT
> COLON
> INT
> RPAR
>
> And now the token stream mismatches the grammar. Before going further,
> please tell me if it's correct.
>
>
> 2012/11/10 Juancarlo A?ez <apalala at gmail.com>
>
>> Bernard,
>>
>> On Sat, Nov 10, 2012 at 10:48 AM, Bernard Kaiflin
>> <bkaiflin.ruby at gmail.com>wrote:
>>
>> > I still don't see the relationship between 2 ARR(1:5) ARR(1.2:4)
>> ARR(1.#I:#J)
>> > and a Python CommonTokenStream. Is it a special version of Natural ? Do
>> > you have the specifications for this language ?
>> >
>>
>> With the existing CommonTokenStream, the 1.2 in ARR(1.2:4) has been lexed
>> as a float before the parser started, which is way before the parser gets
>> to the expression. The Python CommonTokenStream bootstraps itself by
>> tokenizing all input on the first call to any of the methods that return a
>> token.
>>
>> I built the grammar for Natural from the reference material, which
>> includes
>> sort-of grammar descriptions.
>>
>> I think that a language like Ruby requires a parser-guided lexer. I've
>> built some of those by hand before, and they are very efficient. But
>> Natural's grammar was too big (~3000 lines) to try to approach it by hand.
>>
>> Cheers,
>>
>> --
>>
>> Juancarlo *A?ez*
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>


-- 
Juancarlo *A?ez*

From bkaiflin.ruby at gmail.com  Sat Nov 10 13:05:41 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sat, 10 Nov 2012 22:05:41 +0100
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAN1YFWuM_298aEK+B6vs9zFOmMe6G1SZ7DLZE=d9=5OWHv4gRA@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
	<CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
	<CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>
	<CAF9KzRPo3ihCPi0h9R6=9G68fs6OD8v5h9yAUuHzGo6KAfBJ2A@mail.gmail.com>
	<CAN1YFWuM_298aEK+B6vs9zFOmMe6G1SZ7DLZE=d9=5OWHv4gRA@mail.gmail.com>
Message-ID: <CAF9KzRNcaDdmtJLwGvxjT0qGdqUecrmdhiPMjmHtqEB4MsGSHg@mail.gmail.com>

Juancarlo,

let's go further. If the lexer produces a token FLOAT, that is because you
have written a rule

FLOAT : INT '.' INT  ... maybe with exponent

If you remove that rule, the lexer, when seeing an input 1.2 will only be
able to produce INT DOT INT, which corresponds to your needs as far as
ARRAY is concerned. For the real float numbers, you can programmatically
group them in a parser rule

float : INT '.' INT etc

On the other hand, you could change the rule

 array : 'ARR' '(' index '.' dimension ')' ;

to

 array : 'ARR' '(' FLOAT COLON INT ')' ;

to match the pre-generated token stream and programmatically split
$FLOAT.text into two parts : index and start (dimension).

I don't like to give advices without testing them before, but in this case
I don't have the infrastructure. Could you checkk this ?

Bernard


2012/11/10 Juancarlo A?ez <apalala at gmail.com>

> Bernard,
>
> That is correct.
>
> I know that the solution is what you describe for Ruby. I wanted to know if
> someone had done the likes with ANTLR.
>
> -- Juancarlo
>
>
> On Sat, Nov 10, 2012 at 12:19 PM, Bernard Kaiflin
> <bkaiflin.ruby at gmail.com>wrote:
>
> > Yes, only the Ruby parser (the one I wrote by hand) knows if it is in the
> > middle of an expression and if the / is a division. If it is expecting an
> > atom, it knows that the / starts a regexp and can ask the lexer to rewind
> > and recreate a token with the whole regexp.
> >
> > If I well understand, you have a grammar
> >
> > array     : 'ARR' '(' index '.' dimension ')' ;
> > dimension : start ':' stop ;
> >
> > (index, start and stop are probably replaced by INT, by I give them names
> > for clarity). As the file is tokenized in advance, the lexer has created
> >
> > ARR or ID
> > LPAR
> > FLOAT
> > COLON
> > INT
> > RPAR
> >
> > instead of
> >
> > ARR or ID
> > LPAR
> > INT
> > DOT
> > INT
> > COLON
> > INT
> > RPAR
> >
> > And now the token stream mismatches the grammar. Before going further,
> > please tell me if it's correct.
> >
> >
> > 2012/11/10 Juancarlo A?ez <apalala at gmail.com>
> >
> >> Bernard,
> >>
> >> On Sat, Nov 10, 2012 at 10:48 AM, Bernard Kaiflin
> >> <bkaiflin.ruby at gmail.com>wrote:
> >>
> >> > I still don't see the relationship between 2 ARR(1:5) ARR(1.2:4)
> >> ARR(1.#I:#J)
> >> > and a Python CommonTokenStream. Is it a special version of Natural ?
> Do
> >> > you have the specifications for this language ?
> >> >
> >>
> >> With the existing CommonTokenStream, the 1.2 in ARR(1.2:4) has been
> lexed
> >> as a float before the parser started, which is way before the parser
> gets
> >> to the expression. The Python CommonTokenStream bootstraps itself by
> >> tokenizing all input on the first call to any of the methods that
> return a
> >> token.
> >>
> >> I built the grammar for Natural from the reference material, which
> >> includes
> >> sort-of grammar descriptions.
> >>
> >> I think that a language like Ruby requires a parser-guided lexer. I've
> >> built some of those by hand before, and they are very efficient. But
> >> Natural's grammar was too big (~3000 lines) to try to approach it by
> hand.
> >>
> >> Cheers,
> >>
> >> --
> >>
> >> Juancarlo *A?ez*
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >
> >
>
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From apalala at gmail.com  Sat Nov 10 14:52:25 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 10 Nov 2012 18:22:25 -0430
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAF9KzRNcaDdmtJLwGvxjT0qGdqUecrmdhiPMjmHtqEB4MsGSHg@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
	<CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
	<CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>
	<CAF9KzRPo3ihCPi0h9R6=9G68fs6OD8v5h9yAUuHzGo6KAfBJ2A@mail.gmail.com>
	<CAN1YFWuM_298aEK+B6vs9zFOmMe6G1SZ7DLZE=d9=5OWHv4gRA@mail.gmail.com>
	<CAF9KzRNcaDdmtJLwGvxjT0qGdqUecrmdhiPMjmHtqEB4MsGSHg@mail.gmail.com>
Message-ID: <CAN1YFWuaZMTjwd0M+cdSUQ=A=_VJpA5qDVg-89tav8rhfwKD7Q@mail.gmail.com>

Bernard,

On Sat, Nov 10, 2012 at 4:35 PM, Bernard Kaiflin <bkaiflin.ruby at gmail.com>wrote:

> to match the pre-generated token stream and programmatically split
> $FLOAT.text into two parts : index and start (dimension).


That patch is also an option I had thought of before, but it's an ugly
patch.

I also have to deal with #I.2 and 1.#X, and #X.#Z, which are currently
dealt with by making ID consume both sides of the dot, just for parsing's
sake.

-- Juanca



-- 
Juancarlo *A?ez*

From sam at tunnelvisionlabs.com  Sat Nov 10 15:11:24 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Sat, 10 Nov 2012 23:11:24 +0000
Subject: [antlr-interest] Huge tables in C lexers
In-Reply-To: <DF310CE8-E366-4153-93FE-F34E2DD37701@lischke-online.de>
References: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>
	<-2797254231912988500@unknownmsgid>
	<DF310CE8-E366-4153-93FE-F34E2DD37701@lischke-online.de>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B05979906@CH1PRD0811MB430.namprd08.prod.outlook.com>

The Java version keeps *both* the compressed and decompressed arrays in memory. The files generated by the C target are much larger, but the actual runtime overhead is lower since it only has to keep the uncompressed tables in memory.

ANTLR 4 uses a completely different representation for the tables. The memory overhead is especially improved for grammars with Unicode support, but speed takes a tiny hit for each Unicode character that actually appears in the input (shouldn't ever be a problem).

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mike Lischke
Sent: Saturday, November 10, 2012 6:23 AM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Huge tables in C lexers


Hey Jim,

> Please see ANTLR.markmail.org. The issue is with your grammar. The 
> Ctarget lays out static tables that the compiler can then use directly 
> in memory structures loaded from the executable target. So you see the 
> full data set. Java creates compressed strings which must first be 
> created at start up time and then decompressed to generate the same 
> tables as C.
> 
> Review your grammar by looking at which of the tables are so big and 
> correlating these with your rules. You should be able to see the 
> issue.
> 
> Jim
> (At the 200th time of answering this one ;)

.. which shows how important this issue is. My lexer is 32MB in size, just because of these tables. This stems from the fact that I have to allow almost the entire Unicode BMP for my identifiers. Without that the lexer shrinks to 7MB. Maybe it would be worth implementing a similar compression feature in the C target too? Do you know if this same problem will also be existent in ANTLR v4?

Mike
--
www.soft-gems.net



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From jimi at temporal-wave.com  Sat Nov 10 20:12:11 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 11 Nov 2012 12:12:11 +0800
Subject: [antlr-interest] Huge tables in C lexers
In-Reply-To: <DF310CE8-E366-4153-93FE-F34E2DD37701@lischke-online.de>
References: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>
	<-2797254231912988500@unknownmsgid>
	<DF310CE8-E366-4153-93FE-F34E2DD37701@lischke-online.de>
Message-ID: <0240a9d13fd4ae604f409a41dbc711b4@mail.gmail.com>

You mis-understand Mike. The situation is pretty much the exact opposite
of what you suggest. Java has to do what it does because there is no way
to declare character arrays with pre-initialized data. C/C++ is streets
ahead in this regard.

The tables in Java are expanded at runtime in to the SAME tables that the
C target generates directly. When an executable starts (from the C
target), the tables are immediately available in the dseg and there is no
overhead. The Java target needs to load the compressed version of the
strings at startup, then it decompresses in to memory and uses the
decompressed tables. So, the Java version uses extra memory to create the
compressed strings, then a bunch of CPU cycles to decompress the strings,
then garbage collection the compressed strings, then it can finally use
them. It is not the C target that is inefficient in this regard.

While these days, the tables are not a big deal, you should still limit
them by making your lexer leaner. You are probably telling the lexer to
pick out certain classes of characters (from a spec?). It is better to
relax lexer rules and get them to recognize the roughly correct pattern,
then check the character set and issue a semantic error. If you get a
lexer error, all you can do is say "invalid character" and it pretty much
ends the sequence. Move your errors as far in to the tool chain as you
can, because you will give your users much better context in the errors.

Jim

-----Original Message-----
From: Mike Lischke [mailto:mike at lischke-online.de]
Sent: Saturday, November 10, 2012 8:23 PM
To: Jim Idle
Cc: Borneq; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Huge tables in C lexers


Hey Jim,

> Please see ANTLR.markmail.org. The issue is with your grammar. The
> Ctarget lays out static tables that the compiler can then use directly
> in memory structures loaded from the executable target. So you see the
> full data set. Java creates compressed strings which must first be
> created at start up time and then decompressed to generate the same
> tables as C.
>
> Review your grammar by looking at which of the tables are so big and
> correlating these with your rules. You should be able to see the
> issue.
>
> Jim
> (At the 200th time of answering this one ;)

.. which shows how important this issue is. My lexer is 32MB in size, just
because of these tables. This stems from the fact that I have to allow
almost the entire Unicode BMP for my identifiers. Without that the lexer
shrinks to 7MB. Maybe it would be worth implementing a similar compression
feature in the C target too? Do you know if this same problem will also be
existent in ANTLR v4?

Mike
--
www.soft-gems.net

From me at psmay.com  Sat Nov 10 21:52:33 2012
From: me at psmay.com (Peter S. May)
Date: Sun, 11 Nov 2012 00:52:33 -0500
Subject: [antlr-interest] Pushdown lexer
Message-ID: <20121111005233.04f0b635@philo>

Hello again.

I've been in the process of writing a lexer that could rightly be described as a pushdown automaton with some utilization of lookahead; it variously pushes and pops states on a stack depending on the input and uses the top as a start conditions. This essentially makes it so that every single rule begins with a semantic predicate, since ANTLR doesn't do start conditions on its own. Naturally, "The code of method specialStateTransition(int, IntStream) is exceeding the 65535 bytes limit". Is there any general advice on refactoring a lexer to get around this? (Or, dare I ask, should I be researching a tool that handles this sort of language more efficiently?)

Thanks
PSM

From jimi at temporal-wave.com  Sat Nov 10 22:43:25 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 11 Nov 2012 14:43:25 +0800
Subject: [antlr-interest] Pushdown lexer
In-Reply-To: <20121111005233.04f0b635@philo>
References: <20121111005233.04f0b635@philo>
Message-ID: <8636250459264212700@unknownmsgid>

It's difficult to say without seeing your lexer grammar Peter. But do
remover that you don't have to use an ANTLR lexer, you could hand
craft a lexer that provides the same interface.

I have usually found that the limits are only exceeded by lexers if
they are trying to do "too much". Such as trying to be too specific
about the character ranges for tokens.

If you can post your grammar, then there might

Jim

On Nov 11, 2012, at 13:52, "Peter S. May" <me at psmay.com> wrote:

> Hello again.
>
> I've been in the process of writing a lexer that could rightly be described as a pushdown automaton with some utilization of lookahead; it variously pushes and pops states on a stack depending on the input and uses the top as a start conditions. This essentially makes it so that every single rule begins with a semantic predicate, since ANTLR doesn't do start conditions on its own. Naturally, "The code of method specialStateTransition(int, IntStream) is exceeding the 65535 bytes limit". Is there any general advice on refactoring a lexer to get around this? (Or, dare I ask, should I be researching a tool that handles this sort of language more efficiently?)
>
> Thanks
> PSM
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From mike at lischke-online.de  Sun Nov 11 01:53:37 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Sun, 11 Nov 2012 10:53:37 +0100
Subject: [antlr-interest] Huge tables in C lexers
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B05979906@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>
	<-2797254231912988500@unknownmsgid>
	<DF310CE8-E366-4153-93FE-F34E2DD37701@lischke-online.de>
	<8802E2F086DC9648BD0585D82AC6377B05979906@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <FEA187AD-662C-4851-86BB-3747F9485AB5@lischke-online.de>


Hey Sam,

> ANTLR 4 uses a completely different representation for the tables. The memory overhead is especially improved for grammars with Unicode support, but speed takes a tiny hit for each Unicode character that actually appears in the input (shouldn't ever be a problem).


Interesting, one point more I want to use it :-)

Mike
-- 
www.soft-gems.net



From mike at lischke-online.de  Sun Nov 11 02:17:03 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Sun, 11 Nov 2012 11:17:03 +0100
Subject: [antlr-interest] Huge tables in C lexers
In-Reply-To: <0240a9d13fd4ae604f409a41dbc711b4@mail.gmail.com>
References: <CANyn1kHymFvpxXjVcyCrwEsw4X6r4XVzsvsSOgf3ufDfdDGK1Q@mail.gmail.com>
	<-2797254231912988500@unknownmsgid>
	<DF310CE8-E366-4153-93FE-F34E2DD37701@lischke-online.de>
	<0240a9d13fd4ae604f409a41dbc711b4@mail.gmail.com>
Message-ID: <07B9B91B-0BB9-4BF8-8AD8-0CAEC3E86887@lischke-online.de>

Hey Jim,

> You mis-understand Mike. The situation is pretty much the exact opposite
> of what you suggest. Java has to do what it does because there is no way
> to declare character arrays with pre-initialized data. C/C++ is streets
> ahead in this regard.

I guess you mis-understood me. It's not that I judge one handling over the other wrt execution. My concern is rather the big source file, which takes a lot of time to load into a debugger. This is even worse with an IDE like XCode, which has a hard time to cope with so large files. Also other tools like SCMs get to their limit when you try to view a diff of such huge files, do some pre-commit processing and what not. Runtime behavior is not the only aspect ...

> While these days, the tables are not a big deal, you should still limit
> them by making your lexer leaner. You are probably telling the lexer to
> pick out certain classes of characters (from a spec?).

Only this:

// As defined in http://dev.mysql.com/doc/refman/5.6/en/identifiers.html.
fragment LETTER_WHEN_UNQUOTED:
	'0'..'9'
	| 'A'..'Z' // Only upper case, as we use a case insensitive parser (insensitive only for ASCII).
	| '$'
	| '_'
	| '\u0080'..'\uffff'
;

When I comment out the last alt I get a much smaller lexer source file.

> It is better to
> relax lexer rules and get them to recognize the roughly correct pattern,
> then check the character set and issue a semantic error. If you get a
> lexer error, all you can do is say "invalid character" and it pretty much
> ends the sequence. Move your errors as far in to the tool chain as you
> can, because you will give your users much better context in the errors.


You have said this already many times and I try to follow your advice as much as I can (because it makes a lot of sense) but in such a case it's totally ok to immediately stop processing and say: "nonsense char found, fix it". Why doing a whole chain of processing if it is just a wrong char that the user entered?

To test the outcome I changed the rule above to just:

fragment LETTER_WHEN_UNQUOTED:
	.
;

which not only brought me a warning about 3 other rules which cannot be matched anymore (even though this rule is essentially the last one in my grammar, only followed by 2 virtual tokens), but it also increased the lexer source size to 55MB (from 38MB)! So, relaxing the lexer seems not to be a solution for this problem. The only way to get the size down is to exclude certain input.

Mike
-- 
www.soft-gems.net



From me at psmay.com  Sun Nov 11 06:51:29 2012
From: me at psmay.com (Peter S. May)
Date: Sun, 11 Nov 2012 09:51:29 -0500
Subject: [antlr-interest] Pushdown lexer
In-Reply-To: <8636250459264212700@unknownmsgid>
References: <20121111005233.04f0b635@philo> <8636250459264212700@unknownmsgid>
Message-ID: <20121111095129.2b0a4e57@philo>

Apologies; I really do know better than to not include the grammar for
a problem like this. Anyway, I'm going to try to code this one up by
hand and then perhaps try to port it to ANTLR later if it seems
necessary.

Thanks
PSM

On Sun, 11 Nov 2012 14:43:25 +0800
Jim Idle <jimi at temporal-wave.com> wrote:

> It's difficult to say without seeing your lexer grammar Peter. But do
> remover that you don't have to use an ANTLR lexer, you could hand
> craft a lexer that provides the same interface.
> 
> I have usually found that the limits are only exceeded by lexers if
> they are trying to do "too much". Such as trying to be too specific
> about the character ranges for tokens.
> 
> If you can post your grammar, then there might
> 
> Jim
> 
> On Nov 11, 2012, at 13:52, "Peter S. May" <me at psmay.com> wrote:
> 
> > Hello again.
> >
> > I've been in the process of writing a lexer that could rightly be
> > described as a pushdown automaton with some utilization of
> > lookahead; it variously pushes and pops states on a stack depending
> > on the input and uses the top as a start conditions. This
> > essentially makes it so that every single rule begins with a
> > semantic predicate, since ANTLR doesn't do start conditions on its
> > own. Naturally, "The code of method specialStateTransition(int,
> > IntStream) is exceeding the 65535 bytes limit". Is there any
> > general advice on refactoring a lexer to get around this? (Or, dare
> > I ask, should I be researching a tool that handles this sort of
> > language more efficiently?)
> >
> > Thanks
> > PSM
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gwlist at grahamwideman.com  Sun Nov 11 21:03:39 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Sun, 11 Nov 2012 21:03:39 -0800
Subject: [antlr-interest] TestRig: use with package-ized lexer/parser?
Message-ID: <20121112050402.VKTG7477.fed1rmfepo202.cox.net@fed1rmimpo209>

Hi Terr and all,

I've been attempting to use the TestRig (part of the ANTLR 4 tools), and have fallen down a hole that I'm hoping someone just knows the answer to.

The short version is this:

How does one use TestRig with a grammar that specifies a package for the lexer/parser?

Longer version:

In the command line for TestRig we supply the name of the grammar, from which the TestRig class figures out the name of lexer and parser classes to dynamically load (using a ClassLoader).  But TestRig fails to find the lexer/grammar classes if the grammar specifies a package.

Issue 1: How to load package-ized lexer?
-----------------------------------------
TestRig fails if the grammar specifies a package name. Or at least, I've not figured out how to get TestRig to find the lexer and parser classes when a package is specified. Any clues?

Issue 2: Why does TestRig find lexer class in current dir?
-----------------------------------------------------------
I attempted to create my own version of TestRig (with new name TestRig2, and using different package from the original) and though I can get it to compile and run, I can't get it to load even a non-packaged lexer... that is I can't even get my seemingly minimally modified TestRig2 to load a lexer class that the original TestRig is fine with.

Now it seems that in the original TestRig, the ClassLoader (from Thread.currentThread)getContextClassLoader) is able to find the (unpackaged) lexer class in the "current directory"... but I don't understand why it can do this -- how is it that it treats current dir as on the classpath?

Any clues on this?

Issue 3: TestRig exception improvement suggestion
--------------------------------------------------
A note for Terr: The exception handling around the class loading is a bit hosed up -- the second attempt at loading (without Lexer suffix) is in the catch block, but this may fail, in which case execution bails with an unhandled exception, instead of proceeding with lexerClass == null to the intended "Can't handle" message.

Thanks!

-- Graham 


From bkaiflin.ruby at gmail.com  Sun Nov 11 22:48:36 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Mon, 12 Nov 2012 07:48:36 +0100
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAN1YFWuaZMTjwd0M+cdSUQ=A=_VJpA5qDVg-89tav8rhfwKD7Q@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
	<CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
	<CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>
	<CAF9KzRPo3ihCPi0h9R6=9G68fs6OD8v5h9yAUuHzGo6KAfBJ2A@mail.gmail.com>
	<CAN1YFWuM_298aEK+B6vs9zFOmMe6G1SZ7DLZE=d9=5OWHv4gRA@mail.gmail.com>
	<CAF9KzRNcaDdmtJLwGvxjT0qGdqUecrmdhiPMjmHtqEB4MsGSHg@mail.gmail.com>
	<CAN1YFWuaZMTjwd0M+cdSUQ=A=_VJpA5qDVg-89tav8rhfwKD7Q@mail.gmail.com>
Message-ID: <CAF9KzROt38Wfz=JbAT5huSgOwpHiHURGmmxynFLLA_HL2TRSwQ@mail.gmail.com>

Ola,

It seems you are in charge of the grammar. So I suppose that there is no
FLOAT rule and you have INT DOT INT each time there is `1.2`in the input.
Taken at the beginning of the thread, your requirements are

ARR(1:5)
ARR(1.2:4)
ARR(1.#I:#J)
ARR(#I.2:4), in which .2 is a valid floating point number, but 1. isn't.

I don't understand .2 as float as start position. Without a description of
the specifications and the purpose of the notation, it's hard to help you.
If I call index the digit/variable before the dot, a full description of
array could be :

array : 'ARR' '(' index? dimension ')' ;
index : d_v '.' ;
d_v   : DIGIT | variable ;
variable : '#' ID ;
dimension : d_v ':' d_v ;

HTH
Bernard


2012/11/10 Juancarlo A?ez <apalala at gmail.com>

> Bernard,
>
> On Sat, Nov 10, 2012 at 4:35 PM, Bernard Kaiflin <bkaiflin.ruby at gmail.com
> >wrote:
>
> > to match the pre-generated token stream and programmatically split
> > $FLOAT.text into two parts : index and start (dimension).
>
>
> That patch is also an option I had thought of before, but it's an ugly
> patch.
>
> I also have to deal with #I.2 and 1.#X, and #X.#Z, which are currently
> dealt with by making ID consume both sides of the dot, just for parsing's
> sake.
>
> -- Juanca
>
>
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From gwlist at grahamwideman.com  Mon Nov 12 03:43:46 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Mon, 12 Nov 2012 03:43:46 -0800
Subject: [antlr-interest] TestRig: use with package-ized lexer/parser?
Message-ID: <20121112114355.LJZL7477.fed1rmfepo202.cox.net@fed1rmimpo110>

Hi Terr and all,

Update:

I've solved half of the puzzle of TestRig's dynamic class loading, but I'm still interested in whether there's already an intended way to use TestRig with a grammar that specifies a package.

The part I solved is how TestRig manages to find default-package lexer and parser class files under normal conditions. The short version is that TestRig relies on there being a "dot" (current dir) in the CLASSPATH environment variable. But there are a number of correlated details/pitfalls.

The keys are:

1) The user must invoke TestRig (runs grun shell/batch file) from the directory containing the lexer and parser class files, in such a way that TestRig (or my version TestRig2) sees that dir as the working dir. The subtle issue here is...

2) TestRig's own jar file must be in the CLASSPATH, so that it can be invoked with a reference to the class to run:
   java org.antlr.v4.runtime.misc.TestRig %*
and NOT with the -jar option like this (with runnable class in the manifest):
   java -jar "path-to-jarfile\TestRig2.jar"   %*
... as this latter apparently changes the working directory.

3) The current working dir (".") must be included in the CLASSPATH (environment variable) that TestRig sees. (Note: the class loader for files does not treat the current working directory as an assumed place to look for classes. It only looks in cwd if there's a dot in CLASSPATH).

The appropriate CLASSPATH (including TestRig and dot can be set up in grun shell/batch file). However...

4) When debugging in NetBeans, I didn't find a way to set the debug/run CLASSPATH to include the current working dir (though there is a setting for current working dir itself).  One work-around is to add the desired directory (the one containing the lexer and parser class) as a "Library" in Netbeans.  Unfortunately there doesn't seem to be a way to set "." as a Library.

5) It's perhaps obvious, but the package name for a custom version of TestRig is not salient to finding the lexer/parser classes (though of course invocation of custom TestRig does have to refer to the custom package name).

(And by way of leaving clues: I wanted to look at the ClassLoader search algorithm, but the JRE 7 source from Oracle manages to omit crucial sun.misc.URLClassPath. However, more-comprehensive source is available here: http://jdk7src.sourceforge.net/)

------

OK, so now I can build and debug my own version of TestRig, and unless someone has an alternative bright idea, I hope to explore adding a command-line option to specify a package name for the grammar.

-- Graham 


From parrt at cs.usfca.edu  Mon Nov 12 10:40:59 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Nov 2012 10:40:59 -0800
Subject: [antlr-interest] ANTLR 4 documentation
Message-ID: <4D858563-FA74-494C-A74C-8D5BCB3ACB99@cs.usfca.edu>

Got rights to copy reference chapter from book to wiki for doc:

http://www.antlr.org/wiki/display/ANTLR4/ANTLR+4+Documentation

Ter

From parrt at cs.usfca.edu  Mon Nov 12 10:53:13 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Nov 2012 10:53:13 -0800
Subject: [antlr-interest] TestRig: use with package-ized lexer/parser?
In-Reply-To: <20121112050402.VKTG7477.fed1rmfepo202.cox.net@fed1rmimpo209>
References: <20121112050402.VKTG7477.fed1rmfepo202.cox.net@fed1rmimpo209>
Message-ID: <CD2B7D19-6128-411F-9DC4-151417E7F13F@cs.usfca.edu>

I assume you have tried TestRig pack.Grammar?   I don't remember if I thought of this so it might not work but I can't see why not. Should be a trivial string concatenation fix. I will look at the other things as well.
T
On Nov 11, 2012, at 9:03 PM, Graham Wideman wrote:

> Hi Terr and all,
> 
> I've been attempting to use the TestRig (part of the ANTLR 4 tools), and have fallen down a hole that I'm hoping someone just knows the answer to.
> 
> The short version is this:
> 
> How does one use TestRig with a grammar that specifies a package for the lexer/parser?
> 
> Longer version:
> 
> In the command line for TestRig we supply the name of the grammar, from which the TestRig class figures out the name of lexer and parser classes to dynamically load (using a ClassLoader).  But TestRig fails to find the lexer/grammar classes if the grammar specifies a package.
> 
> Issue 1: How to load package-ized lexer?
> -----------------------------------------
> TestRig fails if the grammar specifies a package name. Or at least, I've not figured out how to get TestRig to find the lexer and parser classes when a package is specified. Any clues?
> 
> Issue 2: Why does TestRig find lexer class in current dir?
> -----------------------------------------------------------
> I attempted to create my own version of TestRig (with new name TestRig2, and using different package from the original) and though I can get it to compile and run, I can't get it to load even a non-packaged lexer... that is I can't even get my seemingly minimally modified TestRig2 to load a lexer class that the original TestRig is fine with.
> 
> Now it seems that in the original TestRig, the ClassLoader (from Thread.currentThread)getContextClassLoader) is able to find the (unpackaged) lexer class in the "current directory"... but I don't understand why it can do this -- how is it that it treats current dir as on the classpath?
> 
> Any clues on this?
> 
> Issue 3: TestRig exception improvement suggestion
> --------------------------------------------------
> A note for Terr: The exception handling around the class loading is a bit hosed up -- the second attempt at loading (without Lexer suffix) is in the catch block, but this may fail, in which case execution bails with an unhandled exception, instead of proceeding with lexerClass == null to the intended "Can't handle" message.
> 
> Thanks!
> 
> -- Graham 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From alex.kostikov at gmail.com  Mon Nov 12 13:32:23 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Mon, 12 Nov 2012 13:32:23 -0800
Subject: [antlr-interest] ANTLR C# - Visual Studio doesn't show ANTLR
	project templates
In-Reply-To: <CAGAhT3k=-s_hOnqukJjR7fbA_3m9-sGQwVwUqz3g+hK2nwFq9g@mail.gmail.com>
References: <CAGAhT3k=-s_hOnqukJjR7fbA_3m9-sGQwVwUqz3g+hK2nwFq9g@mail.gmail.com>
Message-ID: <CAGAhT3=jYbRsKYSSW6qA_=So6SjunYac0FygDJ0YPjNZPOkC2Q@mail.gmail.com>

I was looking in the project templates but these are file templates =)
The issue is resolved, sorry for the trouble.

On Fri, Nov 9, 2012 at 6:26 PM, Alexander Kostikov
<alex.kostikov at gmail.com> wrote:
> Hi,
>
> I've installed ANTLR C# port from
> http://www.antlr.org/wiki/display/ANTLR3/Antlr3CSharpReleases and now
> I'm following man on
> http://www.tunnelvisionlabs.com/downloads/antlr/ANTLRCSharpDocumentation-9004.xps.
>
> The manual says that once visual studio extensions are installed there
> would be several new ANTLR project templates available (like ANTLR
> Combined Parser). But I can't find any. Search in Installed Templates
> by 'antlr' yields 'no items found'.
> The installed extensions versions are:
> - ANTLR Language Support 1.0.11
> - StringTemplate 4 Language Support 1.0.11.0
>
> Do I need to install visual studio project template from somewhere else?
>
> --
> Alexander Kostikov



-- 
Alexander Kostikov

From gerald at certiv.net  Mon Nov 12 15:29:02 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Mon, 12 Nov 2012 15:29:02 -0800
Subject: [antlr-interest] Lookahead predicates in the Lexer?
Message-ID: <50A1863E.6040709@certiv.net>

In Antlr4, is there a way to do a fixed lookahead in the lexer predicate 
without capturing the lookahead token(s)?  In v3, predicates could be 
used for this purpose.

csvRule : A ( Comma B )* ;

A : P Q R -> pushMode(Alphabet)

mode Alphabet;
B : X Y Z { ~Comma }? -> popMode
    : X Y Z ;

In v4 , the "~Comma" is presumed to be native code.

Basically, looking for a clean, workable way to not require the use of a 
semicolon to explicitly terminate input that matches the csvRule, yet 
have a representation in the lexer that can be used as the popMode trigger.

I do realize that I can write a predicate method to do a stream scan, 
but would prefer a non-native code solution if possible.  Also realize 
that, in the simplest case, csvRule could be pushed down into the 
Lexer.  Where A and B  are not just single terminals in the parser, 
other rules would have to be pushed down also, making for a bit of a mess.

Thanks,
Gerald

From parrt at cs.usfca.edu  Mon Nov 12 17:05:12 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 12 Nov 2012 17:05:12 -0800
Subject: [antlr-interest] Lookahead predicates in the Lexer?
In-Reply-To: <50A1863E.6040709@certiv.net>
References: <50A1863E.6040709@certiv.net>
Message-ID: <4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>

That predicate should work.  If that predicate fails, then that rule will fail and the input will not be consumed for B.
Ter
On Nov 12, 2012, at 3:29 PM, Gerald Rosenberg wrote:

> In Antlr4, is there a way to do a fixed lookahead in the lexer predicate 
> without capturing the lookahead token(s)?  In v3, predicates could be 
> used for this purpose.
> 
> csvRule : A ( Comma B )* ;
> 
> A : P Q R -> pushMode(Alphabet)
> 
> mode Alphabet;
> B : X Y Z { ~Comma }? -> popMode
>    : X Y Z ;
> 
> In v4 , the "~Comma" is presumed to be native code.
> 
> Basically, looking for a clean, workable way to not require the use of a 
> semicolon to explicitly terminate input that matches the csvRule, yet 
> have a representation in the lexer that can be used as the popMode trigger.
> 
> I do realize that I can write a predicate method to do a stream scan, 
> but would prefer a non-native code solution if possible.  Also realize 
> that, in the simplest case, csvRule could be pushed down into the 
> Lexer.  Where A and B  are not just single terminals in the parser, 
> other rules would have to be pushed down also, making for a bit of a mess.
> 
> Thanks,
> Gerald
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gwlist at grahamwideman.com  Mon Nov 12 17:34:40 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Mon, 12 Nov 2012 17:34:40 -0800
Subject: [antlr-interest] TestRig: use with package-ized  lexer/parser?
Message-ID: <20121113013437.PKHD7477.fed1rmfepo202.cox.net@fed1rmimpo110>

At 11/12/2012 10:53 AM, Terence Parr wrote:
>I assume you have tried TestRig pack.Grammar?   I don't remember if I thought of this so it might not work but I can't see why not. Should be a trivial string concatenation fix. I will look at the other things as well.

Well, yes, I did go down that path (so to speak) unsuccessfully, but as I now learn, I missed a trick.  

So, here are the details on how to exercise package-ized ANTLR grammars with TestRig as currently designed.

1. Class directory structure must correspond to package
--------------------------------------------------------
If the grammar (mygrammar) specifies a package (let's say com.abc.myparser), then you must arrange that the compiled class files (mygrammarLexer.class and friends) wind up in a directory tree that corresponds to the package. So something like (in NetBeans):

  [MyProject]/build/classes/com/abc/myparser/mygrammarLexer.class etc

[see note A]

2. cd to _root_ of classes
--------------------------
Before running TestRig (or grun) on this from the command line, you must first cd to the _root_ of that class tree:
  [MyProject]/build/classes

... so that java runtime classloader can find the class in question from dot (cwd) using the classname com.abc.myparser.mygrammarLexer .

3. Specify grammar name qualified by package
--------------------------------------------
In the TestRig (or grun) command line, you have to specify the grammar name qualified by the package name, for example:

  grun com.abc.myparser.mygrammar startelement -gui otherargs

[See note B]

Other notes:
------------
A) This probably requires that, upstream, you have ANTLR generate the java source files in a similarly appropriate source directory structure -- ANTLR itself doesn't create or require package-coordinated directories when generating the lexer/parser code.  While ANTLR and javac can be used with simple commands assuming default package, once non-default packages become involved one probably needs a build system or IDE to automate the coordination of packages and directories.

B) Of course, since you have to set the cwd to the classes root for TestRig's benefit, you probably have to adjust the argument that specifies the location of input files.

C) An IDE issue:  When working on a custom version of TestRig in NetBeans, and attempting to run or debug it from the IDE, I still haven't found a good way to add "current dir" to the runtime classpath.  You can add an explicit dir to the Libraries list, but that's a poor substitute, so not a final answer, IMO.  (This is only an issue if you're trying to work on TestRig with its dynamic class loading, not a general problem with ANTLR and packages.)

Hope that helps others.

-- Graham






From jimi at temporal-wave.com  Mon Nov 12 17:42:23 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 13 Nov 2012 09:42:23 +0800
Subject: [antlr-interest] TestRig: use with package-ized lexer/parser?
In-Reply-To: <20121113013437.PKHD7477.fed1rmfepo202.cox.net@fed1rmimpo110>
References: <20121113013437.PKHD7477.fed1rmfepo202.cox.net@fed1rmimpo110>
Message-ID: <f151cdfc3e18b88caceea0ad9c6965c3@mail.gmail.com>

I think that some of these issues will be alleviated once one of us can
make time to write the Maven plugins, as these can ensure that the correct
directory structures are created and so on.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Graham Wideman
Sent: Tuesday, November 13, 2012 9:35 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] TestRig: use with package-ized lexer/parser?

At 11/12/2012 10:53 AM, Terence Parr wrote:
>I assume you have tried TestRig pack.Grammar?   I don't remember if I
thought of this so it might not work but I can't see why not. Should be a
trivial string concatenation fix. I will look at the other things as well.

Well, yes, I did go down that path (so to speak) unsuccessfully, but as I
now learn, I missed a trick.

So, here are the details on how to exercise package-ized ANTLR grammars
with TestRig as currently designed.

1. Class directory structure must correspond to package
--------------------------------------------------------
If the grammar (mygrammar) specifies a package (let's say
com.abc.myparser), then you must arrange that the compiled class files
(mygrammarLexer.class and friends) wind up in a directory tree that
corresponds to the package. So something like (in NetBeans):

  [MyProject]/build/classes/com/abc/myparser/mygrammarLexer.class etc

[see note A]

2. cd to _root_ of classes
--------------------------
Before running TestRig (or grun) on this from the command line, you must
first cd to the _root_ of that class tree:
  [MyProject]/build/classes

... so that java runtime classloader can find the class in question from
dot (cwd) using the classname com.abc.myparser.mygrammarLexer .

3. Specify grammar name qualified by package
--------------------------------------------
In the TestRig (or grun) command line, you have to specify the grammar
name qualified by the package name, for example:

  grun com.abc.myparser.mygrammar startelement -gui otherargs

[See note B]

Other notes:
------------
A) This probably requires that, upstream, you have ANTLR generate the java
source files in a similarly appropriate source directory structure --
ANTLR itself doesn't create or require package-coordinated directories
when generating the lexer/parser code.  While ANTLR and javac can be used
with simple commands assuming default package, once non-default packages
become involved one probably needs a build system or IDE to automate the
coordination of packages and directories.

B) Of course, since you have to set the cwd to the classes root for
TestRig's benefit, you probably have to adjust the argument that specifies
the location of input files.

C) An IDE issue:  When working on a custom version of TestRig in NetBeans,
and attempting to run or debug it from the IDE, I still haven't found a
good way to add "current dir" to the runtime classpath.  You can add an
explicit dir to the Libraries list, but that's a poor substitute, so not a
final answer, IMO.  (This is only an issue if you're trying to work on
TestRig with its dynamic class loading, not a general problem with ANTLR
and packages.)

Hope that helps others.

-- Graham






List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From gwlist at grahamwideman.com  Mon Nov 12 21:11:59 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Mon, 12 Nov 2012 21:11:59 -0800
Subject: [antlr-interest] TestRig: use with package-ized  lexer/parser?
Message-ID: <20121113051207.BYJG9100.fed1rmfepo103.cox.net@fed1rmimpo109>

... and a solution to the outstanding NetBeans (possibly other IDEs) problem: How to supply an application launched from NetBeans IDE with a particular current working directory, _and_ classpath that includes that cwd.  

This is needed to run/debug TestRig (or custom version thereof), which relies on cwd to find the lexer/grammar classes and dynamically load them. 

Basically, this requires

a) the IDE setting for the runtime working directory is set to the directory containing the grammar classes (or the root of their class directory tree, if using packages), and...

b) include "current working directory" in the IDE-constructed runtime classpath.

But how to accomplish (b)?

The trick is to include the Ant/NB variable work.dir in the list of runtime libraries.  There doesn't seem to be a way to set this up from the NetBeans UI, but it can be accomplished by hand editing project.properties run.classpath item, similar to the following:

run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}:\
    ${work.dir}

Presumably also applies to run.test.classpath.

The result of this is that when NB/Ant invokes java to run the program, NB/Ant assembles a classpath that includes the current working directory setting. 

And FWIW, this can be examined by setting NetBeans Tools > Options > Java > Ant tab > Verbosity Level to Verbose (which displays the runtime java command line in the Output window).

-- Graham


From gerald at certiv.net  Tue Nov 13 00:09:24 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 13 Nov 2012 00:09:24 -0800
Subject: [antlr-interest] Lookahead predicates in the Lexer?
In-Reply-To: <4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>
References: <50A1863E.6040709@certiv.net>
	<4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>
Message-ID: <50A20034.4060407@certiv.net>

Well that was what I was hoping for.  Using the v4.0b3 jar, the Lexer rule

fragment COMMA        : ','    ;
Identifier
     : LETTER ( LETTER | DIGIT | UNDERSCORE )* { ~COMMA }? -> popMode
     | LETTER ( LETTER | DIGIT | UNDERSCORE )*
     ;

generates, in relevant part,

     public void Identifier_action(RuleContext _localctx, int actionIndex) {
         switch (actionIndex) {
         case 0: popMode();  break;
         }
     }
     public boolean Identifier_sempred(RuleContext _localctx, int 
predIndex) {
         switch (predIndex) {
         case 5: return  ~COMMA ;
         }
         return true;
     }

Switching from the fragment rule to a token rule

Comma : COMMA ;
. . . . { ~Comma }? . . . .

generates
. . . .
         case 5: return  ~Comma ;

As if Antlr is only considering the content of the predicate to be a 
native code boolean expression.


On 11/12/2012 5:05 PM, Terence Parr wrote:
> That predicate should work.  If that predicate fails, then that rule will fail and the input will not be consumed for B.
> Ter
> On Nov 12, 2012, at 3:29 PM, Gerald Rosenberg wrote:
>
>> In Antlr4, is there a way to do a fixed lookahead in the lexer predicate
>> without capturing the lookahead token(s)?  In v3, predicates could be
>> used for this purpose.
>>
>> csvRule : A ( Comma B )* ;
>>
>> A : P Q R -> pushMode(Alphabet)
>>
>> mode Alphabet;
>> B : X Y Z { ~Comma }? -> popMode
>>     : X Y Z ;
>>
>> In v4 , the "~Comma" is presumed to be native code.
>>
>> Basically, looking for a clean, workable way to not require the use of a
>> semicolon to explicitly terminate input that matches the csvRule, yet
>> have a representation in the lexer that can be used as the popMode trigger.
>>
>> I do realize that I can write a predicate method to do a stream scan,
>> but would prefer a non-native code solution if possible.  Also realize
>> that, in the simplest case, csvRule could be pushed down into the
>> Lexer.  Where A and B  are not just single terminals in the parser,
>> other rules would have to be pushed down also, making for a bit of a mess.
>>
>> Thanks,
>> Gerald
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From parrt at cs.usfca.edu  Tue Nov 13 09:33:39 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 13 Nov 2012 09:33:39 -0800
Subject: [antlr-interest] Lookahead predicates in the Lexer?
In-Reply-To: <50A20034.4060407@certiv.net>
References: <50A1863E.6040709@certiv.net>
	<4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>
	<50A20034.4060407@certiv.net>
Message-ID: <78C60681-6CA4-4737-BE39-F75E254CCE87@cs.usfca.edu>

predicates have always been native code, though, right?
Ter
On Nov 13, 2012, at 12:09 AM, Gerald Rosenberg wrote:

> Well that was what I was hoping for.  Using the v4.0b3 jar, the Lexer rule
> 
> fragment COMMA        : ','    ;
> Identifier
>    : LETTER ( LETTER | DIGIT | UNDERSCORE )* { ~COMMA }? -> popMode
>    | LETTER ( LETTER | DIGIT | UNDERSCORE )*
>    ;
> 
> generates, in relevant part,
> 
>    public void Identifier_action(RuleContext _localctx, int actionIndex) {
>        switch (actionIndex) {
>        case 0: popMode();  break;
>        }
>    }
>    public boolean Identifier_sempred(RuleContext _localctx, int predIndex) {
>        switch (predIndex) {
>        case 5: return  ~COMMA ;
>        }
>        return true;
>    }
> 
> Switching from the fragment rule to a token rule
> 
> Comma : COMMA ;
> . . . . { ~Comma }? . . . .
> 
> generates
> . . . .
>        case 5: return  ~Comma ;
> 
> As if Antlr is only considering the content of the predicate to be a native code boolean expression.
> 
> 
> On 11/12/2012 5:05 PM, Terence Parr wrote:
>> That predicate should work.  If that predicate fails, then that rule will fail and the input will not be consumed for B.
>> Ter
>> On Nov 12, 2012, at 3:29 PM, Gerald Rosenberg wrote:
>> 
>>> In Antlr4, is there a way to do a fixed lookahead in the lexer predicate
>>> without capturing the lookahead token(s)?  In v3, predicates could be
>>> used for this purpose.
>>> 
>>> csvRule : A ( Comma B )* ;
>>> 
>>> A : P Q R -> pushMode(Alphabet)
>>> 
>>> mode Alphabet;
>>> B : X Y Z { ~Comma }? -> popMode
>>>    : X Y Z ;
>>> 
>>> In v4 , the "~Comma" is presumed to be native code.
>>> 
>>> Basically, looking for a clean, workable way to not require the use of a
>>> semicolon to explicitly terminate input that matches the csvRule, yet
>>> have a representation in the lexer that can be used as the popMode trigger.
>>> 
>>> I do realize that I can write a predicate method to do a stream scan,
>>> but would prefer a non-native code solution if possible.  Also realize
>>> that, in the simplest case, csvRule could be pushed down into the
>>> Lexer.  Where A and B  are not just single terminals in the parser,
>>> other rules would have to be pushed down also, making for a bit of a mess.
>>> 
>>> Thanks,
>>> Gerald
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> 


From gerald at certiv.net  Tue Nov 13 10:43:37 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 13 Nov 2012 10:43:37 -0800
Subject: [antlr-interest] Lookahead predicates in the Lexer?
In-Reply-To: <78C60681-6CA4-4737-BE39-F75E254CCE87@cs.usfca.edu>
References: <50A1863E.6040709@certiv.net>
	<4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>
	<50A20034.4060407@certiv.net>
	<78C60681-6CA4-4737-BE39-F75E254CCE87@cs.usfca.edu>
Message-ID: <50A294D9.3070302@certiv.net>

IIRC, the old-style "( A B )=>" predicate could define fixed, rule-based 
lookaheads.  Did this to define a modal lexer

TAG_OPEN         :
         ( ( '<'  LETTER ) => '<' { lexMode = TAG; printState("-TOpen  
"); }
         | ( '<' ~LETTER ) => '<' { lexMode = TEXT; $type=PCDATA;   
printState("BOpen   "); }
         ) ;

Was looking for/hoping that you had collapsed that functionality into 
the v4 predicates.  Having the generated lexer do the scan ahead is 
always, or almost always, going to be more efficient than a hand written 
scan -- at least Antlr can reuse the results of the scan it performs.  
Any thought of adding this capability as an enhancement?

BTW, the new ()*? operator is nice -- explicit and succinct.

On 11/13/2012 9:33 AM, Terence Parr wrote:
> predicates have always been native code, though, right?
> Ter
> On Nov 13, 2012, at 12:09 AM, Gerald Rosenberg wrote:
>
>> Well that was what I was hoping for.  Using the v4.0b3 jar, the Lexer rule
>>
>> fragment COMMA        : ','    ;
>> Identifier
>>     : LETTER ( LETTER | DIGIT | UNDERSCORE )* { ~COMMA }? -> popMode
>>     | LETTER ( LETTER | DIGIT | UNDERSCORE )*
>>     ;
>>
>> generates, in relevant part,
>>
>>     public void Identifier_action(RuleContext _localctx, int actionIndex) {
>>         switch (actionIndex) {
>>         case 0: popMode();  break;
>>         }
>>     }
>>     public boolean Identifier_sempred(RuleContext _localctx, int predIndex) {
>>         switch (predIndex) {
>>         case 5: return  ~COMMA ;
>>         }
>>         return true;
>>     }
>>
>> Switching from the fragment rule to a token rule
>>
>> Comma : COMMA ;
>> . . . . { ~Comma }? . . . .
>>
>> generates
>> . . . .
>>         case 5: return  ~Comma ;
>>
>> As if Antlr is only considering the content of the predicate to be a native code boolean expression.
>>
>>
>> On 11/12/2012 5:05 PM, Terence Parr wrote:
>>> That predicate should work.  If that predicate fails, then that rule will fail and the input will not be consumed for B.
>>> Ter
>>> On Nov 12, 2012, at 3:29 PM, Gerald Rosenberg wrote:
>>>
>>>> In Antlr4, is there a way to do a fixed lookahead in the lexer predicate
>>>> without capturing the lookahead token(s)?  In v3, predicates could be
>>>> used for this purpose.
>>>>
>>>> csvRule : A ( Comma B )* ;
>>>>
>>>> A : P Q R -> pushMode(Alphabet)
>>>>
>>>> mode Alphabet;
>>>> B : X Y Z { ~Comma }? -> popMode
>>>>     : X Y Z ;
>>>>
>>>> In v4 , the "~Comma" is presumed to be native code.
>>>>
>>>> Basically, looking for a clean, workable way to not require the use of a
>>>> semicolon to explicitly terminate input that matches the csvRule, yet
>>>> have a representation in the lexer that can be used as the popMode trigger.
>>>>
>>>> I do realize that I can write a predicate method to do a stream scan,
>>>> but would prefer a non-native code solution if possible.  Also realize
>>>> that, in the simplest case, csvRule could be pushed down into the
>>>> Lexer.  Where A and B  are not just single terminals in the parser,
>>>> other rules would have to be pushed down also, making for a bit of a mess.
>>>>
>>>> Thanks,
>>>> Gerald
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>



From sam at tunnelvisionlabs.com  Tue Nov 13 11:35:30 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Tue, 13 Nov 2012 19:35:30 +0000
Subject: [antlr-interest] Lookahead predicates in the Lexer?
In-Reply-To: <50A20034.4060407@certiv.net>
References: <50A1863E.6040709@certiv.net>
	<4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>
	<50A20034.4060407@certiv.net>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0597D409@CH1PRD0811MB430.namprd08.prod.outlook.com>

Hi Gerald,

I added an example in the form of a new ANTLR 4 unit test. Here is the commit:
https://github.com/sharwell/antlr4/commit/5db5c3393d9c729d1c60340cfab7ad165a300363

The sample grammar is here:
https://github.com/sharwell/antlr4/blob/5db5c3393d9c729d1c60340cfab7ad165a300363/tool/test/org/antlr/v4/test/PositionAdjustingLexer.g4

The unit test, which shows the tokens created for a representative input, is here:
https://github.com/sharwell/antlr4/blob/5db5c3393d9c729d1c60340cfab7ad165a300363/tool/test/org/antlr/v4/test/TestLexerExec.java#L646

Thanks,
--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
Sent: Tuesday, November 13, 2012 2:09 AM
To: parrt at cs.usfca.edu
Cc: antlr-interest
Subject: Re: [antlr-interest] Lookahead predicates in the Lexer?

Well that was what I was hoping for.  Using the v4.0b3 jar, the Lexer rule

fragment COMMA        : ','    ;
Identifier
     : LETTER ( LETTER | DIGIT | UNDERSCORE )* { ~COMMA }? -> popMode
     | LETTER ( LETTER | DIGIT | UNDERSCORE )*
     ;

generates, in relevant part,

     public void Identifier_action(RuleContext _localctx, int actionIndex) {
         switch (actionIndex) {
         case 0: popMode();  break;
         }
     }
     public boolean Identifier_sempred(RuleContext _localctx, int 
predIndex) {
         switch (predIndex) {
         case 5: return  ~COMMA ;
         }
         return true;
     }

Switching from the fragment rule to a token rule

Comma : COMMA ;
. . . . { ~Comma }? . . . .

generates
. . . .
         case 5: return  ~Comma ;

As if Antlr is only considering the content of the predicate to be a 
native code boolean expression.


On 11/12/2012 5:05 PM, Terence Parr wrote:
> That predicate should work.  If that predicate fails, then that rule will fail and the input will not be consumed for B.
> Ter
> On Nov 12, 2012, at 3:29 PM, Gerald Rosenberg wrote:
>
>> In Antlr4, is there a way to do a fixed lookahead in the lexer predicate
>> without capturing the lookahead token(s)?  In v3, predicates could be
>> used for this purpose.
>>
>> csvRule : A ( Comma B )* ;
>>
>> A : P Q R -> pushMode(Alphabet)
>>
>> mode Alphabet;
>> B : X Y Z { ~Comma }? -> popMode
>>     : X Y Z ;
>>
>> In v4 , the "~Comma" is presumed to be native code.
>>
>> Basically, looking for a clean, workable way to not require the use of a
>> semicolon to explicitly terminate input that matches the csvRule, yet
>> have a representation in the lexer that can be used as the popMode trigger.
>>
>> I do realize that I can write a predicate method to do a stream scan,
>> but would prefer a non-native code solution if possible.  Also realize
>> that, in the simplest case, csvRule could be pushed down into the
>> Lexer.  Where A and B  are not just single terminals in the parser,
>> other rules would have to be pushed down also, making for a bit of a mess.
>>
>> Thanks,
>> Gerald
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From gerald at certiv.net  Tue Nov 13 13:22:40 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 13 Nov 2012 13:22:40 -0800
Subject: [antlr-interest] Lookahead predicates in the Lexer?
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0597D409@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <50A1863E.6040709@certiv.net>
	<4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>
	<50A20034.4060407@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0597D409@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <50A2BA20.8040302@certiv.net>

Interesting approach: intercept the post-match emit rather than hand 
coding a forward scan.

Thanks,
Gerald

On 11/13/2012 11:35 AM, Sam Harwell wrote:
> Hi Gerald,
>
> I added an example in the form of a new ANTLR 4 unit test. Here is the commit:
> https://github.com/sharwell/antlr4/commit/5db5c3393d9c729d1c60340cfab7ad165a300363
>
> The sample grammar is here:
> https://github.com/sharwell/antlr4/blob/5db5c3393d9c729d1c60340cfab7ad165a300363/tool/test/org/antlr/v4/test/PositionAdjustingLexer.g4
>
> The unit test, which shows the tokens created for a representative input, is here:
> https://github.com/sharwell/antlr4/blob/5db5c3393d9c729d1c60340cfab7ad165a300363/tool/test/org/antlr/v4/test/TestLexerExec.java#L646
>
> Thanks,
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
> Sent: Tuesday, November 13, 2012 2:09 AM
> To: parrt at cs.usfca.edu
> Cc: antlr-interest
> Subject: Re: [antlr-interest] Lookahead predicates in the Lexer?
>
> Well that was what I was hoping for.  Using the v4.0b3 jar, the Lexer rule
>
> fragment COMMA        : ','    ;
> Identifier
>       : LETTER ( LETTER | DIGIT | UNDERSCORE )* { ~COMMA }? -> popMode
>       | LETTER ( LETTER | DIGIT | UNDERSCORE )*
>       ;
>
> generates, in relevant part,
>
>       public void Identifier_action(RuleContext _localctx, int actionIndex) {
>           switch (actionIndex) {
>           case 0: popMode();  break;
>           }
>       }
>       public boolean Identifier_sempred(RuleContext _localctx, int
> predIndex) {
>           switch (predIndex) {
>           case 5: return  ~COMMA ;
>           }
>           return true;
>       }
>
> Switching from the fragment rule to a token rule
>
> Comma : COMMA ;
> . . . . { ~Comma }? . . . .
>
> generates
> . . . .
>           case 5: return  ~Comma ;
>
> As if Antlr is only considering the content of the predicate to be a
> native code boolean expression.
>
>
> On 11/12/2012 5:05 PM, Terence Parr wrote:
>> That predicate should work.  If that predicate fails, then that rule will fail and the input will not be consumed for B.
>> Ter
>> On Nov 12, 2012, at 3:29 PM, Gerald Rosenberg wrote:
>>
>>> In Antlr4, is there a way to do a fixed lookahead in the lexer predicate
>>> without capturing the lookahead token(s)?  In v3, predicates could be
>>> used for this purpose.
>>>
>>> csvRule : A ( Comma B )* ;
>>>
>>> A : P Q R -> pushMode(Alphabet)
>>>
>>> mode Alphabet;
>>> B : X Y Z { ~Comma }? -> popMode
>>>      : X Y Z ;
>>>
>>> In v4 , the "~Comma" is presumed to be native code.
>>>
>>> Basically, looking for a clean, workable way to not require the use of a
>>> semicolon to explicitly terminate input that matches the csvRule, yet
>>> have a representation in the lexer that can be used as the popMode trigger.
>>>
>>> I do realize that I can write a predicate method to do a stream scan,
>>> but would prefer a non-native code solution if possible.  Also realize
>>> that, in the simplest case, csvRule could be pushed down into the
>>> Lexer.  Where A and B  are not just single terminals in the parser,
>>> other rules would have to be pushed down also, making for a bit of a mess.
>>>
>>> Thanks,
>>> Gerald
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>



From alex.kostikov at gmail.com  Tue Nov 13 14:32:05 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Tue, 13 Nov 2012 14:32:05 -0800
Subject: [antlr-interest] ANTLRWorks 2, can't create new project
Message-ID: <CAGAhT3nHmN6OZuP2TQ_nziikVom=TFj72yjPTn_v1WLFKuyyhw@mail.gmail.com>

Hi,

I'm trying out ANTLRWorks2 to see how well could it handle running and
debugging of CSharp3 target grammar. ANTLRWorks can't compile CSharp
since it only allows java compilers to be used and I was exploring
what ANTLRWorks2 could offer already.

I fully understand that it is in alpha stage. But from the pieces of
information I found I conclude that:
- to run a grammar you should work inside a project, just opening a
grammar file is not enough
- new project creation worked before
- doesn't look like debugging is supported yet, but grammar running should work

The issue I have is - File/New Project would not let me create a new
project. It shows New Project dialog but all buttons except Cancel are
not working. The version I'm using is v1.0 Preview 14 Released
9/29/12.

-- 
Alexander Kostikov

From apalala at gmail.com  Tue Nov 13 15:31:22 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Tue, 13 Nov 2012 19:01:22 -0430
Subject: [antlr-interest] Changing/affecting the Lexer from the Parser?
In-Reply-To: <CAF9KzROt38Wfz=JbAT5huSgOwpHiHURGmmxynFLLA_HL2TRSwQ@mail.gmail.com>
References: <CAN1YFWsM4N31VWhvx_FOkm-SK-D2vqF8k3OTdz=OGQHH1pwshw@mail.gmail.com>
	<CAF9KzRPKnd_ToxkJhnDvoZ9i4DCTx7a4-xXWUZpex=yCuYNiVg@mail.gmail.com>
	<CAN1YFWtpSYnbw4n4s8L9JFDzTFGFCDiFaxiiV1VDnCv6V+C7Wg@mail.gmail.com>
	<CAF9KzRNRPEv=uXpD-k4VQ0Au8pe_Ajief_h8gy51zvUe+dSDQQ@mail.gmail.com>
	<CAN1YFWuV_R86HWTV2MKBoqa_8HiJCiKDvbAs-tAROtvSSmjG+g@mail.gmail.com>
	<CAF9KzRPo3ihCPi0h9R6=9G68fs6OD8v5h9yAUuHzGo6KAfBJ2A@mail.gmail.com>
	<CAN1YFWuM_298aEK+B6vs9zFOmMe6G1SZ7DLZE=d9=5OWHv4gRA@mail.gmail.com>
	<CAF9KzRNcaDdmtJLwGvxjT0qGdqUecrmdhiPMjmHtqEB4MsGSHg@mail.gmail.com>
	<CAN1YFWuaZMTjwd0M+cdSUQ=A=_VJpA5qDVg-89tav8rhfwKD7Q@mail.gmail.com>
	<CAF9KzROt38Wfz=JbAT5huSgOwpHiHURGmmxynFLLA_HL2TRSwQ@mail.gmail.com>
Message-ID: <CAN1YFWtAB=bnJaJDgQk4aa2jUeyAR+bKVz7AXP0wBKhXc8ngKg@mail.gmail.com>

Bernard,

Thanks for all your help. You've made me think better. I now know what my
options are.

Cheers,


On Mon, Nov 12, 2012 at 2:18 AM, Bernard Kaiflin <bkaiflin.ruby at gmail.com>wrote:

> Ola,
>
> It seems you are in charge of the grammar. So I suppose that there is no
> FLOAT rule and you have INT DOT INT each time there is `1.2`in the input.
> Taken at the beginning of the thread, your requirements are
>
> ARR(1:5)
> ARR(1.2:4)
> ARR(1.#I:#J)
> ARR(#I.2:4), in which .2 is a valid floating point number, but 1. isn't.
>
> I don't understand .2 as float as start position. Without a description of
> the specifications and the purpose of the notation, it's hard to help you.
> If I call index the digit/variable before the dot, a full description of
> array could be :
>
> array : 'ARR' '(' index? dimension ')' ;
> index : d_v '.' ;
> d_v   : DIGIT | variable ;
> variable : '#' ID ;
> dimension : d_v ':' d_v ;
>
> HTH
> Bernard
>
>
> 2012/11/10 Juancarlo A?ez <apalala at gmail.com>
>
>>  Bernard,
>>
>> On Sat, Nov 10, 2012 at 4:35 PM, Bernard Kaiflin <bkaiflin.ruby at gmail.com
>> >wrote:
>>
>> > to match the pre-generated token stream and programmatically split
>> > $FLOAT.text into two parts : index and start (dimension).
>>
>>
>> That patch is also an option I had thought of before, but it's an ugly
>> patch.
>>
>> I also have to deal with #I.2 and 1.#X, and #X.#Z, which are currently
>> dealt with by making ID consume both sides of the dot, just for parsing's
>> sake.
>>
>> -- Juanca
>>
>>
>>
>> --
>>
>> Juancarlo *A?ez*
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>


-- 
Juancarlo *A?ez*

From rodedb at gmail.com  Wed Nov 14 00:26:04 2012
From: rodedb at gmail.com (Roded)
Date: Wed, 14 Nov 2012 10:26:04 +0200
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
Message-ID: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>

Hi list,
I'm planning on using ANTLR 3.3's JavaScript target for creating a
Freemarker <http://freemarker.sourceforge.net/> parser for the sake of
syntax highlighting (and auto-completion at a later stage) in a web-based
editor. Considering my lacking experience in ANTLR, I thought I'd ask for
any input or tips on accomplishing my goal.
As for highlighting, using a generated AST is simple enough, however my
editor component's (CodeMirror <http://codemirror.net/>) syntax
highlighting mechanism works on individual lines of the source. Is there a
way to use the ANTLR parser in an interruptible mode so it could be called
for every line separately while retaining its state? and perhaps
even remedying the last parsing error in view of the new input (as not all
source lines pass parsing by themselves)?
Any help and points in the right direction (whether in regards to the JS
target or ANTLR in general) would be much appreciated.
Many thanks,
Roded

P.S. anyone encountered a Freemarker grammar?

From gerald at certiv.net  Wed Nov 14 10:29:03 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Wed, 14 Nov 2012 10:29:03 -0800
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
Message-ID: <50A3E2EF.9040308@certiv.net>

Although your editor's approach is line at a time, no reason to try and 
force Antlr to do the same.  Antlr is more than fast and light enough to 
re-parse the entire source file between each keystroke and walk the AST 
to provide highlighting info (and walk the AST to adjust error markers 
and to collect code assist hints and ... ).

On 11/14/2012 12:26 AM, Roded wrote:
> Hi list,
> I'm planning on using ANTLR 3.3's JavaScript target for creating a
> Freemarker <http://freemarker.sourceforge.net/> parser for the sake of
> syntax highlighting (and auto-completion at a later stage) in a web-based
> editor. Considering my lacking experience in ANTLR, I thought I'd ask for
> any input or tips on accomplishing my goal.
> As for highlighting, using a generated AST is simple enough, however my
> editor component's (CodeMirror <http://codemirror.net/>) syntax
> highlighting mechanism works on individual lines of the source. Is there a
> way to use the ANTLR parser in an interruptible mode so it could be called
> for every line separately while retaining its state? and perhaps
> even remedying the last parsing error in view of the new input (as not all
> source lines pass parsing by themselves)?
> Any help and points in the right direction (whether in regards to the JS
> target or ANTLR in general) would be much appreciated.
> Many thanks,
> Roded
>
> P.S. anyone encountered a Freemarker grammar?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From bkaiflin.ruby at gmail.com  Wed Nov 14 10:39:59 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Wed, 14 Nov 2012 19:39:59 +0100
Subject: [antlr-interest] ANTLRWorks 2, can't create new project
In-Reply-To: <CAGAhT3nHmN6OZuP2TQ_nziikVom=TFj72yjPTn_v1WLFKuyyhw@mail.gmail.com>
References: <CAGAhT3nHmN6OZuP2TQ_nziikVom=TFj72yjPTn_v1WLFKuyyhw@mail.gmail.com>
Message-ID: <CAF9KzRPcBH0BWRXzwbiDo0cZz6fKwFUTSGJWtvmN12hyp90GYg@mail.gmail.com>

Hi,

I have read somewhere an answer of Sam Harwell saying that we can only open
a file, but can't find it again. I have found this
http://www.antlr.org/pipermail/antlr-interest/2012-September/045337.html

HTH
Bernard

2012/11/13 Alexander Kostikov <alex.kostikov at gmail.com>

> Hi,
>
> I'm trying out ANTLRWorks2 to see how well could it handle running and
> ...
> The issue I have is - File/New Project would not let me create a new
> project. It shows New Project dialog but all buttons except Cancel are
> not working. The version I'm using is v1.0 Preview 14 Released
> 9/29/12.
>
> --
> Alexander Kostikov
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sam at tunnelvisionlabs.com  Wed Nov 14 11:15:23 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 14 Nov 2012 19:15:23 +0000
Subject: [antlr-interest] Lookahead predicates in the Lexer?
In-Reply-To: <50A2BA20.8040302@certiv.net>
References: <50A1863E.6040709@certiv.net>
	<4D2BDD42-B506-4082-9945-EDD1DA11B408@cs.usfca.edu>
	<50A20034.4060407@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0597D409@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<50A2BA20.8040302@certiv.net>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0597F25D@CH1PRD0811MB430.namprd08.prod.outlook.com>

Here's an alternative implementation using semantic predicates to test syntax:
https://github.com/sharwell/antlr4/blob/84087334d80af684582c9bbb233b62b3efc68183/tool/test/org/antlr/v4/test/PositionAdjustingLexer.g4

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: Gerald Rosenberg [mailto:gerald at certiv.net] 
Sent: Tuesday, November 13, 2012 3:23 PM
To: Sam Harwell
Cc: parrt at cs.usfca.edu; antlr-interest
Subject: Re: [antlr-interest] Lookahead predicates in the Lexer?

Interesting approach: intercept the post-match emit rather than hand 
coding a forward scan.

Thanks,
Gerald

On 11/13/2012 11:35 AM, Sam Harwell wrote:
> Hi Gerald,
>
> I added an example in the form of a new ANTLR 4 unit test. Here is the commit:
> https://github.com/sharwell/antlr4/commit/5db5c3393d9c729d1c60340cfab7ad165a300363
>
> The sample grammar is here:
> https://github.com/sharwell/antlr4/blob/5db5c3393d9c729d1c60340cfab7ad165a300363/tool/test/org/antlr/v4/test/PositionAdjustingLexer.g4
>
> The unit test, which shows the tokens created for a representative input, is here:
> https://github.com/sharwell/antlr4/blob/5db5c3393d9c729d1c60340cfab7ad165a300363/tool/test/org/antlr/v4/test/TestLexerExec.java#L646
>
> Thanks,
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
> Sent: Tuesday, November 13, 2012 2:09 AM
> To: parrt at cs.usfca.edu
> Cc: antlr-interest
> Subject: Re: [antlr-interest] Lookahead predicates in the Lexer?
>
> Well that was what I was hoping for.  Using the v4.0b3 jar, the Lexer rule
>
> fragment COMMA        : ','    ;
> Identifier
>       : LETTER ( LETTER | DIGIT | UNDERSCORE )* { ~COMMA }? -> popMode
>       | LETTER ( LETTER | DIGIT | UNDERSCORE )*
>       ;
>
> generates, in relevant part,
>
>       public void Identifier_action(RuleContext _localctx, int actionIndex) {
>           switch (actionIndex) {
>           case 0: popMode();  break;
>           }
>       }
>       public boolean Identifier_sempred(RuleContext _localctx, int
> predIndex) {
>           switch (predIndex) {
>           case 5: return  ~COMMA ;
>           }
>           return true;
>       }
>
> Switching from the fragment rule to a token rule
>
> Comma : COMMA ;
> . . . . { ~Comma }? . . . .
>
> generates
> . . . .
>           case 5: return  ~Comma ;
>
> As if Antlr is only considering the content of the predicate to be a
> native code boolean expression.
>
>
> On 11/12/2012 5:05 PM, Terence Parr wrote:
>> That predicate should work.  If that predicate fails, then that rule will fail and the input will not be consumed for B.
>> Ter
>> On Nov 12, 2012, at 3:29 PM, Gerald Rosenberg wrote:
>>
>>> In Antlr4, is there a way to do a fixed lookahead in the lexer predicate
>>> without capturing the lookahead token(s)?  In v3, predicates could be
>>> used for this purpose.
>>>
>>> csvRule : A ( Comma B )* ;
>>>
>>> A : P Q R -> pushMode(Alphabet)
>>>
>>> mode Alphabet;
>>> B : X Y Z { ~Comma }? -> popMode
>>>      : X Y Z ;
>>>
>>> In v4 , the "~Comma" is presumed to be native code.
>>>
>>> Basically, looking for a clean, workable way to not require the use of a
>>> semicolon to explicitly terminate input that matches the csvRule, yet
>>> have a representation in the lexer that can be used as the popMode trigger.
>>>
>>> I do realize that I can write a predicate method to do a stream scan,
>>> but would prefer a non-native code solution if possible.  Also realize
>>> that, in the simplest case, csvRule could be pushed down into the
>>> Lexer.  Where A and B  are not just single terminals in the parser,
>>> other rules would have to be pushed down also, making for a bit of a mess.
>>>
>>> Thanks,
>>> Gerald
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>





From thomas at ruschival.de  Wed Nov 14 12:53:00 2012
From: thomas at ruschival.de (Thomas Ruschival)
Date: Wed, 14 Nov 2012 16:53:00 -0400
Subject: [antlr-interest]
 =?utf-8?q?how_to_skip/read_next_n_Characters_=28?=
 =?utf-8?q?n_is_read=09form_input=29?=
In-Reply-To: <000001cdb922$b2060ce0$161226a0$@barth@t-online.de>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
	<000001cdb922$b2060ce0$161226a0$@barth@t-online.de>
Message-ID: <22e6f22984f927c05769a5b4764ef2f3@ruschival.de>

Hi,
finally I got a (Kindle-)copy of the ANTLR reference and read some 
chapters.
The cited example generates NullPointerExceptions:

Looking through the generated code I realized that 'b' is translated in 
Java to a List b_list = null;
b_list is never initialized to be a valid object. (no b_list = new 
ArrayList(); anywhere in the readNchars method)

This issue I fixed manually in the generated code...

The second issue came up during runtime: an EarlyExitException is 
thrown.
According to the reference is occurs if "The recognizer did not match 
anything for a (..)+ loop."
This is (at least for me) quite odd. Since I also tried to match 
(b+=.)+ as well as (b+=CHAR)+


Best regards
Thomas



Am 2012-11-02 13:51, schrieb cd.barth at t-online.de:
> Thomas, I would use validating semantic predicate
>
> readNchars
> : NUM
>   (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
> ;
>
> The idea is from Ter's book The Definitive ANTLR Reference (ANTLR v3)
>
> Gru? Claus-Dieter
>
>
> -----Urspr?ngliche Nachricht-----
> Von: Juancarlo A?ez [mailto:apalala at gmail.com]
> Gesendet: Donnerstag, 1. November 2012 02:20
> An: Thomas Ruschival
> Cc: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] how to skip/read next n Characters (n
> is read form input)
>
> Thomas,
>
> ANTLR may be overkill or inadequate for what you're doing.
>
> I think you'd be better of with a program with a main loop that
> dispatches to different functions based on the escape code. Each
> function can affect the input position, or do anything else it
> pleases. It would be a handcrafted state machine.
>
> You can do this in Python or any of the friendly languages.
>
> Cheers,
>
> -- Juancarlo
>
> On Wed, Oct 31, 2012 at 12:17 PM, Thomas Ruschival
> <thomas at ruschival.de>wrote:
>
>> I am a humble EE with little grammar experience, please forgive my
>> ignorance and give me a hint how professionals would do the trick.
>>
>> I came up with a grammar for detecting commands "escape-sequences" 
>> in
>> a input text (for a UnifiedPOS printer) that reads numbers and 
>> boolean
>> argumets for escape sequence commands from the input stream.
>> I can read numeric arguments and use them as function parameters,
>> which function to be called is parsed correctly.
>> For instance "ESC|#rF" means "print feed revers # lines"
>>
>> The question is how to treat "ESC|#E" which means "send the next #
>> bytes untreated to the pinter" in other words:
>>
>> How can I use a number N that I detected on the input stream to read
>> and consume the next N characters 'un-lexed' and 'un-parsed' as
>> string/byte array?
>>
>> I was thinking using something like this in a parse action using the
>> 'input' member of the parser:
>>
>> for (int i=0; i<N; i++){
>>         output.append(input.LA(1));
>>         input.consume();
>> }
>>
>> But it doesn't seem very professional to me. Furthermore this gives 
>> me
>> tokens and not plain bytes....
>> Can you give me a hint?
>>
>> Thanks in advance
>> Thomas
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> 
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
> --
> Juancarlo *A?ez*


From rodedb at gmail.com  Wed Nov 14 12:55:41 2012
From: rodedb at gmail.com (Roded)
Date: Wed, 14 Nov 2012 22:55:41 +0200
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <50A3E2EF.9040308@certiv.net>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
	<50A3E2EF.9040308@certiv.net>
Message-ID: <CAJSdnj+y8FMgoXD4KLBATfPXBFiSrJo+X03p3UHXy4eWWJPJDA@mail.gmail.com>

Thanks for the input.
I'll try it that way before complicating things.
Cheers,
Roded


On Wed, Nov 14, 2012 at 8:29 PM, Gerald Rosenberg <gerald at certiv.net> wrote:

> Although your editor's approach is line at a time, no reason to try and
> force Antlr to do the same.  Antlr is more than fast and light enough to
> re-parse the entire source file between each keystroke and walk the AST to
> provide highlighting info (and walk the AST to adjust error markers and to
> collect code assist hints and ... ).
>
>
> On 11/14/2012 12:26 AM, Roded wrote:
>
>> Hi list,
>> I'm planning on using ANTLR 3.3's JavaScript target for creating a
>> Freemarker <http://freemarker.**sourceforge.net/<http://freemarker.sourceforge.net/>>
>> parser for the sake of
>>
>> syntax highlighting (and auto-completion at a later stage) in a web-based
>> editor. Considering my lacking experience in ANTLR, I thought I'd ask for
>> any input or tips on accomplishing my goal.
>> As for highlighting, using a generated AST is simple enough, however my
>> editor component's (CodeMirror <http://codemirror.net/>) syntax
>>
>> highlighting mechanism works on individual lines of the source. Is there a
>> way to use the ANTLR parser in an interruptible mode so it could be called
>> for every line separately while retaining its state? and perhaps
>> even remedying the last parsing error in view of the new input (as not all
>> source lines pass parsing by themselves)?
>> Any help and points in the right direction (whether in regards to the JS
>> target or ANTLR in general) would be much appreciated.
>> Many thanks,
>> Roded
>>
>> P.S. anyone encountered a Freemarker grammar?
>>
>> List: http://www.antlr.org/mailman/**listinfo/antlr-interest<http://www.antlr.org/mailman/listinfo/antlr-interest>
>> Unsubscribe: http://www.antlr.org/mailman/**options/antlr-interest/your-*
>> *email-address<http://www.antlr.org/mailman/options/antlr-interest/your-email-address>
>>
>>
>
>

From sam at tunnelvisionlabs.com  Wed Nov 14 13:21:51 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 14 Nov 2012 21:21:51 +0000
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <50A3E2EF.9040308@certiv.net>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
	<50A3E2EF.9040308@certiv.net>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0597F50F@CH1PRD0811MB430.namprd08.prod.outlook.com>

This na?ve approach is not scalable, and will introduce the following limitations:

1. Typing characters within a large token such as a block comment spanning many lines will be "laggy".
2. As the document grows in size, the editor will progressively slow down.

For even medium sized documents, running *just* the lexer on the entire document in response to keystrokes will be noticeably slow. Not all editors treat syntax highlighting as a line-at-a-time problem. Even in those editors I use the line-at-a-time approach to greatly improve performance of my IDEs.

The new lexer modes in ANTLR 4 make it much easier to break up tokens which would otherwise span multiple lines. It can be done in ANTLR 3 by manually tracking the mode information and using an override of nextToken that calls a fragment rule for the current mode instead of always calling mTokens. I haven't used the JavaScript target or worked with CodeMirror so I don't have any examples of how to implement this strategy in that environment.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
Sent: Wednesday, November 14, 2012 12:29 PM
To: rodedb at gmail.com
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Freemarker grammer w/ JavaScript target

Although your editor's approach is line at a time, no reason to try and force Antlr to do the same.  Antlr is more than fast and light enough to re-parse the entire source file between each keystroke and walk the AST to provide highlighting info (and walk the AST to adjust error markers and to collect code assist hints and ... ).

On 11/14/2012 12:26 AM, Roded wrote:
> Hi list,
> I'm planning on using ANTLR 3.3's JavaScript target for creating a 
> Freemarker <http://freemarker.sourceforge.net/> parser for the sake of 
> syntax highlighting (and auto-completion at a later stage) in a 
> web-based editor. Considering my lacking experience in ANTLR, I 
> thought I'd ask for any input or tips on accomplishing my goal.
> As for highlighting, using a generated AST is simple enough, however 
> my editor component's (CodeMirror <http://codemirror.net/>) syntax 
> highlighting mechanism works on individual lines of the source. Is 
> there a way to use the ANTLR parser in an interruptible mode so it 
> could be called for every line separately while retaining its state? 
> and perhaps even remedying the last parsing error in view of the new 
> input (as not all source lines pass parsing by themselves)?
> Any help and points in the right direction (whether in regards to the 
> JS target or ANTLR in general) would be much appreciated.
> Many thanks,
> Roded
>
> P.S. anyone encountered a Freemarker grammar?
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From DJBall05 at hotmail.co.uk  Wed Nov 14 14:22:06 2012
From: DJBall05 at hotmail.co.uk (DJB MASTER)
Date: Wed, 14 Nov 2012 14:22:06 -0800 (PST)
Subject: [antlr-interest] Parsing Operators as Atoms?
Message-ID: <1352931726771-7579199.post@n2.nabble.com>

Given a list...

+
+
2
+
3
+
4
+
+
6
+

...How can I parse it so that it picks out all the infix trees (eg ^(+ ^(+ 2
3) 4)) and keeps the rest as single trees?

I've tried this rule...

expr: (a=atom -> $a)
(op='+' b=atom-> {$a.text != "+" && $b.text != "+"}? ^($op $expr $b) //
infix
-> {$b.text != "+"}? // HAVING TROUBLE COMING UP WITH THIS CORRECT REWRITE!
-> $expr $op $b)*; // simple list

atom: INT | '+';
INT : '0'..'9'+;

...and I think I'm almost there. I've been working on this for a couple of
days with no luck. 



--
View this message in context: http://antlr.1301665.n2.nabble.com/Parsing-Operators-as-Atoms-tp7579199.html
Sent from the ANTLR mailing list archive at Nabble.com.

From gerald at certiv.net  Wed Nov 14 15:45:23 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Wed, 14 Nov 2012 15:45:23 -0800
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0597F50F@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
	<50A3E2EF.9040308@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0597F50F@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <50A42D13.9000205@certiv.net>

Interesting.  Not my experience at all.  And, that is even with Eclipse.

On 11/14/2012 1:21 PM, Sam Harwell wrote:
> This na?ve approach is not scalable, and will introduce the following limitations:
>
> 1. Typing characters within a large token such as a block comment spanning many lines will be "laggy".
No reason that any particular token would take any more or less time to 
parse -- matching a .* is fast.  As long as the parser is kept warm, the 
incremental time required to parse an in-memory stream is quite small, 
particularly in comparison to keystrokes.  This is for source files of 
10s to 100s of KB.  Perhaps what you are seeing is particular to your IDE.
> 2. As the document grows in size, the editor will progressively slow down.
This is entirely dependent on the IDE implementation.  Highlighting and 
similar features should run in a separate thread and never affect 
keyboard performance.  A common strategy is that if the highlighting 
thread ever falls behind, just discard new highlighting changes.  Even 
in a heavyweight IDE like Eclipse, discards rarely if ever happen and, 
if they do, the effect is imperceptible.

A very useful (and common) strategy is to minimize UI updates.  Diff the 
results of the parse with an image of the UI content and apply only the 
changes.  For SWT and highlighting, the changes are just a series of 
attribute changes, typically just one or two, which are set without 
necessarily invoking a UI update.  Keystrokes do cause UI updates, so 
highlighting is synchronous.

For CodeMirror, it looks like highlighting is implemented by tweaking 
the DOM class of a span.  The time required to do DOM and UI updates 
will likely far outweigh the Antlr parse time.  Run the parser in a 
separate Worker thread and, with some attention to keeping the parser 
warm and managing the application of updates, I think you will be quite 
pleasantly surprised at the performance.

>
> For even medium sized documents, running *just* the lexer on the entire document in response to keystrokes will be noticeably slow. Not all editors treat syntax highlighting as a line-at-a-time problem. Even in those editors I use the line-at-a-time approach to greatly improve performance of my IDEs.
>
> The new lexer modes in ANTLR 4 make it much easier to break up tokens which would otherwise span multiple lines. It can be done in ANTLR 3 by manually tracking the mode information and using an override of nextToken that calls a fragment rule for the current mode instead of always calling mTokens. I haven't used the JavaScript target or worked with CodeMirror so I don't have any examples of how to implement this strategy in that environment.
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
> Sent: Wednesday, November 14, 2012 12:29 PM
> To: rodedb at gmail.com
> Cc: ANTLR-Interest Interest
> Subject: Re: [antlr-interest] Freemarker grammer w/ JavaScript target
>
> Although your editor's approach is line at a time, no reason to try and force Antlr to do the same.  Antlr is more than fast and light enough to re-parse the entire source file between each keystroke and walk the AST to provide highlighting info (and walk the AST to adjust error markers and to collect code assist hints and ... ).
>
> On 11/14/2012 12:26 AM, Roded wrote:
>> Hi list,
>> I'm planning on using ANTLR 3.3's JavaScript target for creating a
>> Freemarker <http://freemarker.sourceforge.net/> parser for the sake of
>> syntax highlighting (and auto-completion at a later stage) in a
>> web-based editor. Considering my lacking experience in ANTLR, I
>> thought I'd ask for any input or tips on accomplishing my goal.
>> As for highlighting, using a generated AST is simple enough, however
>> my editor component's (CodeMirror <http://codemirror.net/>) syntax
>> highlighting mechanism works on individual lines of the source. Is
>> there a way to use the ANTLR parser in an interruptible mode so it
>> could be called for every line separately while retaining its state?
>> and perhaps even remedying the last parsing error in view of the new
>> input (as not all source lines pass parsing by themselves)?
>> Any help and points in the right direction (whether in regards to the
>> JS target or ANTLR in general) would be much appreciated.
>> Many thanks,
>> Roded
>>
>> P.S. anyone encountered a Freemarker grammar?
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>



From pascal_parrot at hotmail.com  Wed Nov 14 15:59:41 2012
From: pascal_parrot at hotmail.com (Pascal Parrot)
Date: Wed, 14 Nov 2012 23:59:41 +0000
Subject: [antlr-interest] (no subject)
Message-ID: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>


Hello,
I have a sample grammar (attached) with many keywords. I use a hashmap to store keywords as described in the "definitive antlr 4 reference book" section 10.3 and that "fixed" the _serializedATN string issue (http://www.antlr.org/pipermail/antlr-interest/2012-October/045551.html). 
However, I now have a "code too large" error in the generated Parser file.

exampleParser.java:14: code too large
    protected static final PredictionContextCache _sharedContextCache =
                                                  ^
1 error

The parser portion of the file is very basic. What could be the reasons to have an error there? Is there a way to avoid this error?

Thanks,
Pascal
 		 	   		  
-------------- next part --------------
A non-text attachment was scrubbed...
Name: example.g4.zip
Type: application/zip
Size: 40134 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20121114/c1188d89/attachment.zip 

From pascal_parrot at hotmail.com  Wed Nov 14 16:02:32 2012
From: pascal_parrot at hotmail.com (Pascal Parrot)
Date: Thu, 15 Nov 2012 00:02:32 +0000
Subject: [antlr-interest] constant string too long
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0592C45C@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <SNT123-W5450E2BFF9F81E5ADA55DD967F0@phx.gbl>,
	<8802E2F086DC9648BD0585D82AC6377B0592C45C@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <SNT123-W36F0B1A88FBD1E8177C77B96520@phx.gbl>



This problem was "fixed" by using a hashmap to store keywords as described in the "definitive antlr 4
 reference book" section 10.3. However, I am now getting a "code too large" in the parser (http://www.antlr.org/pipermail/antlr-interest/2012-November/045698.html).
 		 	   		  

From sinchronized.arun at gmail.com  Wed Nov 14 16:18:09 2012
From: sinchronized.arun at gmail.com (Arun Ramakrishnan)
Date: Wed, 14 Nov 2012 16:18:09 -0800
Subject: [antlr-interest] programmatically generating lexer/parser from
	grammer
Message-ID: <CAKVWSxs5+SfA_0XSM3RGwxwrXa=f3y1xo8GeD_8H5_ziGSBA_A@mail.gmail.com>

Not sure how to generated the java source files from
grammer programmatically. I was using the maven plugin previously.

Looks like there is supposed to be a org.antlr.Tool class. But, it seems to
be missing in my package.

I am using antlr 3.4.


thanks
Arun

From alex.kostikov at gmail.com  Wed Nov 14 16:40:15 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Wed, 14 Nov 2012 16:40:15 -0800
Subject: [antlr-interest] ANTLRWorks 2, can't create new project
In-Reply-To: <CAF9KzRPcBH0BWRXzwbiDo0cZz6fKwFUTSGJWtvmN12hyp90GYg@mail.gmail.com>
References: <CAGAhT3nHmN6OZuP2TQ_nziikVom=TFj72yjPTn_v1WLFKuyyhw@mail.gmail.com>
	<CAF9KzRPcBH0BWRXzwbiDo0cZz6fKwFUTSGJWtvmN12hyp90GYg@mail.gmail.com>
Message-ID: <CAGAhT3kCUw_vs7tWTbpaR=hv8Pa90BE0C=cCMW2MLNRcJgWOuA@mail.gmail.com>

Thanks for the clarification!

On Wed, Nov 14, 2012 at 10:39 AM, Bernard Kaiflin
<bkaiflin.ruby at gmail.com> wrote:
> Hi,
>
> I have read somewhere an answer of Sam Harwell saying that we can only open
> a file, but can't find it again. I have found this
> http://www.antlr.org/pipermail/antlr-interest/2012-September/045337.html
>
> HTH
> Bernard
>
> 2012/11/13 Alexander Kostikov <alex.kostikov at gmail.com>
>>
>> Hi,
>>
>> I'm trying out ANTLRWorks2 to see how well could it handle running and
>> ...
>>
>> The issue I have is - File/New Project would not let me create a new
>> project. It shows New Project dialog but all buttons except Cancel are
>> not working. The version I'm using is v1.0 Preview 14 Released
>> 9/29/12.
>>
>> --
>> Alexander Kostikov
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>



-- 
Alexander Kostikov

From apalala at gmail.com  Wed Nov 14 17:34:14 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Wed, 14 Nov 2012 21:04:14 -0430
Subject: [antlr-interest] programmatically generating lexer/parser from
	grammer
In-Reply-To: <CAKVWSxs5+SfA_0XSM3RGwxwrXa=f3y1xo8GeD_8H5_ziGSBA_A@mail.gmail.com>
References: <CAKVWSxs5+SfA_0XSM3RGwxwrXa=f3y1xo8GeD_8H5_ziGSBA_A@mail.gmail.com>
Message-ID: <CAN1YFWt0MDW=OFky=okxBJ97ArCZU50wgkF23=AtnYvPH8qhZw@mail.gmail.com>

Arun,

The README contains the instructions for generating the .jars required to
use the tool through the command line.

-- Juancarlo


On Wed, Nov 14, 2012 at 7:48 PM, Arun Ramakrishnan <
sinchronized.arun at gmail.com> wrote:

> Not sure how to generated the java source files from
> grammer programmatically. I was using the maven plugin previously.
>
> Looks like there is supposed to be a org.antlr.Tool class. But, it seems to
> be missing in my package.
>
> I am using antlr 3.4.
>
>
> thanks
> Arun
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From jbb at acm.org  Wed Nov 14 17:51:25 2012
From: jbb at acm.org (John B. Brodie)
Date: Wed, 14 Nov 2012 20:51:25 -0500
Subject: [antlr-interest] Parsing Operators as Atoms?
In-Reply-To: <1352931726771-7579199.post@n2.nabble.com>
References: <1352931726771-7579199.post@n2.nabble.com>
Message-ID: <50A44A9D.6050809@acm.org>

see attached. it is ambiguous, but still seems to work.

hope this helps...
    -jbb


On 11/14/2012 05:22 PM, DJB MASTER wrote:
> Given a list...
>
> +
> +
> 2
> +
> 3
> +
> 4
> +
> +
> 6
> +
>
> ...How can I parse it so that it picks out all the infix trees (eg ^(+ ^(+ 2
> 3) 4)) and keeps the rest as single trees?
>
> I've tried this rule...
>
> expr: (a=atom -> $a)
> (op='+' b=atom-> {$a.text != "+" && $b.text != "+"}? ^($op $expr $b) //
> infix
> -> {$b.text != "+"}? // HAVING TROUBLE COMING UP WITH THIS CORRECT REWRITE!
> -> $expr $op $b)*; // simple list
>
> atom: INT | '+';
> INT : '0'..'9'+;
>
> ...and I think I'm almost there. I've been working on this for a couple of
> days with no luck.
>
>
>
> --
> View this message in context: http://antlr.1301665.n2.nabble.com/Parsing-Operators-as-Atoms-tp7579199.html
> Sent from the ANTLR mailing list archive at Nabble.com.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

-------------- next part --------------
grammar Test;

options {
   output = AST;
   ASTLabelType = CommonTree;
}

@members {

   // test data - each string in the following array is parsed separately
   private static final String [] x = new String[] {
      "+\n+\n2\n+\n3\n+\n4\n+\n+\n6\n+\n",
      "++2+3+4++6++7+8+9+",
      "1++2++3+4++5+6+7",
   };

   public static void main(String [] args) {
      for( int i = 0; i < x.length; ++i ) {
         try {
            System.out.println("about to parse:`"+x[i]+"`");

            TestLexer lexer = new TestLexer(new ANTLRStringStream(x[i]));
            CommonTokenStream tokens = new CommonTokenStream(lexer);

            // System.out.format("dump of the token stream:\%n");
            // tokens.fill();
            // int j = 0;
            // for( Object obj : tokens.getTokens() ) {
            //    Token tok = (Token) obj;
            //    int typ = tok.getType();
            //    System.out.format("\%d: type = \%s, text = `\%s`\%s\%n",
            //                      j++,
            //                      typ==EOF?"EOF":tokenNames[typ],
            //                      tok.getText(),
            //                      tok.getChannel()==HIDDEN?" (HIDDEN)":"");
            // }
            // System.out.format("now performing the parse\n");

            TestParser parser = new TestParser(tokens);
            TestParser.test_return p_result = parser.test();

            CommonTree ast = p_result.tree;
            if( ast == null ) {
               System.out.println("resultant tree: is NULL");
            } else {
               System.out.println("resultant tree: " + ast.toStringTree());
            }
            System.out.println();
         } catch(Exception e) {
            e.printStackTrace();
         }
      }
   }
}


test : list EOF! ;

list : (PLUS | expr)+ ;

expr : INT (PLUS^ INT)* ;

PLUS : '+' ;

INT : DIGIT+ ;
fragment DIGIT : '0' .. '9' ;

IDENTIFIER : LETTER ('_'|LETTER|DIGIT)* ;
fragment LETTER : 'A' .. 'Z' | 'a' .. 'z' ;

// Whitespace -- ignored
WS : ( ' ' | '\t' | '\f' | '\r' | '\n' )+ { $channel=HIDDEN; } ;



From DJBall05 at hotmail.co.uk  Wed Nov 14 18:35:56 2012
From: DJBall05 at hotmail.co.uk (DJB MASTER)
Date: Wed, 14 Nov 2012 18:35:56 -0800 (PST)
Subject: [antlr-interest] Parsing Operators as Atoms?
In-Reply-To: <50A44A9D.6050809@acm.org>
References: <1352931726771-7579199.post@n2.nabble.com>
	<50A44A9D.6050809@acm.org>
Message-ID: <1352946956089-7579207.post@n2.nabble.com>

You sir are a life saver! I've been trying all sorts of complex things. I
need to go back to my ANTLR book and relearn some stuff.

Thank you once again, I really appreciate it.

David.



--
View this message in context: http://antlr.1301665.n2.nabble.com/Parsing-Operators-as-Atoms-tp7579199p7579207.html
Sent from the ANTLR mailing list archive at Nabble.com.

From jimi at temporal-wave.com  Wed Nov 14 19:05:22 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 15 Nov 2012 11:05:22 +0800
Subject: [antlr-interest] (no subject)
In-Reply-To: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>
Message-ID: <743a229b6518c3d0ac142e41c8808bd7@mail.gmail.com>

Did you look at the generated code?

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
Sent: Thursday, November 15, 2012 8:00 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] (no subject)


Hello,
I have a sample grammar (attached) with many keywords. I use a hashmap to
store keywords as described in the "definitive antlr 4 reference book"
section 10.3 and that "fixed" the _serializedATN string issue
(http://www.antlr.org/pipermail/antlr-interest/2012-October/045551.html).
However, I now have a "code too large" error in the generated Parser file.

exampleParser.java:14: code too large
    protected static final PredictionContextCache _sharedContextCache =
                                                  ^
1 error

The parser portion of the file is very basic. What could be the reasons to
have an error there? Is there a way to avoid this error?

Thanks,
Pascal

From pascal_parrot at hotmail.com  Wed Nov 14 23:54:52 2012
From: pascal_parrot at hotmail.com (Pascal Parrot)
Date: Thu, 15 Nov 2012 07:54:52 +0000
Subject: [antlr-interest] (no subject)
In-Reply-To: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>
Message-ID: <SNT123-W57410A73D58A62859D040096520@phx.gbl>


Jim,
Yes, I looked a the generated code, but the error is on this line:
protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache();
PredictionContextCache does not appear anywhere else in the file and  _sharedContextCache is a parameter in a function.

Even if there was a huge something there, I wouldn't know what to do with it.

I guess my question is:
Is antlr (java) suited for grammars with large sets of keywords and many parser rules?
If it is, how should the grammar be organized so that the generated code fits within the limits of java in terms of size? Using hashmaps helps in the lexer, but what about in the parser?

Pascal
 		 	   		  

From cd.barth at t-online.de  Thu Nov 15 00:46:35 2012
From: cd.barth at t-online.de (cd.barth at t-online.de)
Date: Thu, 15 Nov 2012 09:46:35 +0100
Subject: [antlr-interest] how to skip/read next n Characters (n is
	read	form input)
In-Reply-To: <22e6f22984f927c05769a5b4764ef2f3@ruschival.de>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
	<000001cdb922$b2060ce0$161226a0$@barth@t-online.de>
	<22e6f22984f927c05769a5b4764ef2f3@ruschival.de>
Message-ID: <002901cdc30d$b86dd7d0$29498770$@barth@t-online.de>

Hi Thomas, 
the sample from ANTLR v3 reference is not (yet?) running with ANTLR v4.0b3.
(b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?

I see that {System.out.println(((StartContext)_localctx).b.size());}
is a workaround for the counter but synpred is not working for me too.

It would be nice getting therefor a solution from Ter in the final Version.

Regards Claus-Dieter


-----Urspr?ngliche Nachricht-----
Von: Thomas Ruschival [mailto:thomas at ruschival.de] 
Gesendet: Mittwoch, 14. November 2012 21:53
An: cd.barth at t-online.de
Cc: 'Juancarlo A?ez'; antlr-interest at antlr.org
Betreff: Re: AW: [antlr-interest] how to skip/read next n Characters (n is read form input)

Hi,
finally I got a (Kindle-)copy of the ANTLR reference and read some chapters.
The cited example generates NullPointerExceptions:

Looking through the generated code I realized that 'b' is translated in Java to a List b_list = null; b_list is never initialized to be a valid object. (no b_list = new ArrayList(); anywhere in the readNchars method)

This issue I fixed manually in the generated code...

The second issue came up during runtime: an EarlyExitException is thrown.
According to the reference is occurs if "The recognizer did not match anything for a (..)+ loop."
This is (at least for me) quite odd. Since I also tried to match (b+=.)+ as well as (b+=CHAR)+


Best regards
Thomas



Am 2012-11-02 13:51, schrieb cd.barth at t-online.de:
> Thomas, I would use validating semantic predicate
>
> readNchars
> : NUM
>   (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
> ;
>
> The idea is from Ter's book The Definitive ANTLR Reference (ANTLR v3)
>
> Gru? Claus-Dieter
>
>
> -----Urspr?ngliche Nachricht-----
> Von: Juancarlo A?ez [mailto:apalala at gmail.com]
> Gesendet: Donnerstag, 1. November 2012 02:20
> An: Thomas Ruschival
> Cc: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] how to skip/read next n Characters (n is 
> read form input)
>
> Thomas,
>
> ANTLR may be overkill or inadequate for what you're doing.
>
> I think you'd be better of with a program with a main loop that 
> dispatches to different functions based on the escape code. Each 
> function can affect the input position, or do anything else it 
> pleases. It would be a handcrafted state machine.
>
> You can do this in Python or any of the friendly languages.
>
> Cheers,
>
> -- Juancarlo
>
> On Wed, Oct 31, 2012 at 12:17 PM, Thomas Ruschival
> <thomas at ruschival.de>wrote:
>
>> I am a humble EE with little grammar experience, please forgive my 
>> ignorance and give me a hint how professionals would do the trick.
>>
>> I came up with a grammar for detecting commands "escape-sequences" 
>> in
>> a input text (for a UnifiedPOS printer) that reads numbers and 
>> boolean argumets for escape sequence commands from the input stream.
>> I can read numeric arguments and use them as function parameters, 
>> which function to be called is parsed correctly.
>> For instance "ESC|#rF" means "print feed revers # lines"
>>
>> The question is how to treat "ESC|#E" which means "send the next # 
>> bytes untreated to the pinter" in other words:
>>
>> How can I use a number N that I detected on the input stream to read 
>> and consume the next N characters 'un-lexed' and 'un-parsed' as 
>> string/byte array?
>>
>> I was thinking using something like this in a parse action using the 
>> 'input' member of the parser:
>>
>> for (int i=0; i<N; i++){
>>         output.append(input.LA(1));
>>         input.consume();
>> }
>>
>> But it doesn't seem very professional to me. Furthermore this gives 
>> me tokens and not plain bytes....
>> Can you give me a hint?
>>
>> Thanks in advance
>> Thomas
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> 
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>>
>
>
>
> --
> Juancarlo *A?ez*


From rodedb at gmail.com  Thu Nov 15 01:12:53 2012
From: rodedb at gmail.com (Roded)
Date: Thu, 15 Nov 2012 11:12:53 +0200
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <50A42D13.9000205@certiv.net>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
	<50A3E2EF.9040308@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0597F50F@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<50A42D13.9000205@certiv.net>
Message-ID: <CAJSdnjL7kbzCd27QREggxNjX9himb=v0=ySTnNKW7uduhQaC7w@mail.gmail.com>

Thanks for the opinions, will report my subjective conclusions..
A couple more related questions:
1. Considering I'm starting a new ANTLR project, is it viable to start with
ANTLR4? (in relation to both ANTLR4's general stability at the moment and
the state of its JavaScript target).
2. Sam, regarding tracking the mode information and overriding nextToken in
ANTLR3, As I'm not too familiar w/ the ANTLR's code so I understand the
idea only generally. Can you perhaps point to an example of such parser
usage in a different environment? Any code will be of much assistance.
Thanks again,
Roded


On Thu, Nov 15, 2012 at 1:45 AM, Gerald Rosenberg <gerald at certiv.net> wrote:

> Interesting.  Not my experience at all.  And, that is even with Eclipse.
>
>
> On 11/14/2012 1:21 PM, Sam Harwell wrote:
>
>> This na?ve approach is not scalable, and will introduce the following
>> limitations:
>>
>> 1. Typing characters within a large token such as a block comment
>> spanning many lines will be "laggy".
>>
> No reason that any particular token would take any more or less time to
> parse -- matching a .* is fast.  As long as the parser is kept warm, the
> incremental time required to parse an in-memory stream is quite small,
> particularly in comparison to keystrokes.  This is for source files of 10s
> to 100s of KB.  Perhaps what you are seeing is particular to your IDE.
>
>  2. As the document grows in size, the editor will progressively slow down.
>>
> This is entirely dependent on the IDE implementation.  Highlighting and
> similar features should run in a separate thread and never affect keyboard
> performance.  A common strategy is that if the highlighting thread ever
> falls behind, just discard new highlighting changes.  Even in a heavyweight
> IDE like Eclipse, discards rarely if ever happen and, if they do, the
> effect is imperceptible.
>
> A very useful (and common) strategy is to minimize UI updates.  Diff the
> results of the parse with an image of the UI content and apply only the
> changes.  For SWT and highlighting, the changes are just a series of
> attribute changes, typically just one or two, which are set without
> necessarily invoking a UI update.  Keystrokes do cause UI updates, so
> highlighting is synchronous.
>
> For CodeMirror, it looks like highlighting is implemented by tweaking the
> DOM class of a span.  The time required to do DOM and UI updates will
> likely far outweigh the Antlr parse time.  Run the parser in a separate
> Worker thread and, with some attention to keeping the parser warm and
> managing the application of updates, I think you will be quite pleasantly
> surprised at the performance.
>
>
>
>> For even medium sized documents, running *just* the lexer on the entire
>> document in response to keystrokes will be noticeably slow. Not all editors
>> treat syntax highlighting as a line-at-a-time problem. Even in those
>> editors I use the line-at-a-time approach to greatly improve performance of
>> my IDEs.
>>
>> The new lexer modes in ANTLR 4 make it much easier to break up tokens
>> which would otherwise span multiple lines. It can be done in ANTLR 3 by
>> manually tracking the mode information and using an override of nextToken
>> that calls a fragment rule for the current mode instead of always calling
>> mTokens. I haven't used the JavaScript target or worked with CodeMirror so
>> I don't have any examples of how to implement this strategy in that
>> environment.
>>
>> --
>> Sam Harwell
>> Owner, Lead Developer
>> http://tunnelvisionlabs.com
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.**org<antlr-interest-bounces at antlr.org>[mailto:
>> antlr-interest-**bounces at antlr.org <antlr-interest-bounces at antlr.org>]
>> On Behalf Of Gerald Rosenberg
>> Sent: Wednesday, November 14, 2012 12:29 PM
>> To: rodedb at gmail.com
>> Cc: ANTLR-Interest Interest
>> Subject: Re: [antlr-interest] Freemarker grammer w/ JavaScript target
>>
>> Although your editor's approach is line at a time, no reason to try and
>> force Antlr to do the same.  Antlr is more than fast and light enough to
>> re-parse the entire source file between each keystroke and walk the AST to
>> provide highlighting info (and walk the AST to adjust error markers and to
>> collect code assist hints and ... ).
>>
>> On 11/14/2012 12:26 AM, Roded wrote:
>>
>>> Hi list,
>>> I'm planning on using ANTLR 3.3's JavaScript target for creating a
>>> Freemarker <http://freemarker.**sourceforge.net/<http://freemarker.sourceforge.net/>>
>>> parser for the sake of
>>> syntax highlighting (and auto-completion at a later stage) in a
>>> web-based editor. Considering my lacking experience in ANTLR, I
>>> thought I'd ask for any input or tips on accomplishing my goal.
>>> As for highlighting, using a generated AST is simple enough, however
>>> my editor component's (CodeMirror <http://codemirror.net/>) syntax
>>> highlighting mechanism works on individual lines of the source. Is
>>> there a way to use the ANTLR parser in an interruptible mode so it
>>> could be called for every line separately while retaining its state?
>>> and perhaps even remedying the last parsing error in view of the new
>>> input (as not all source lines pass parsing by themselves)?
>>> Any help and points in the right direction (whether in regards to the
>>> JS target or ANTLR in general) would be much appreciated.
>>> Many thanks,
>>> Roded
>>>
>>> P.S. anyone encountered a Freemarker grammar?
>>>
>>> List: http://www.antlr.org/mailman/**listinfo/antlr-interest<http://www.antlr.org/mailman/listinfo/antlr-interest>
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/**options/antlr-interest/your-**
>>> email-address<http://www.antlr.org/mailman/options/antlr-interest/your-email-address>
>>>
>>>
>>
>> List: http://www.antlr.org/mailman/**listinfo/antlr-interest<http://www.antlr.org/mailman/listinfo/antlr-interest>
>> Unsubscribe: http://www.antlr.org/mailman/**options/antlr-interest/your-*
>> *email-address<http://www.antlr.org/mailman/options/antlr-interest/your-email-address>
>>
>>
>>
>>
>
>

From sam at tunnelvisionlabs.com  Thu Nov 15 07:10:33 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 15 Nov 2012 15:10:33 +0000
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <CAJSdnjL7kbzCd27QREggxNjX9himb=v0=ySTnNKW7uduhQaC7w@mail.gmail.com>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
	<50A3E2EF.9040308@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0597F50F@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<50A42D13.9000205@certiv.net>
	<CAJSdnjL7kbzCd27QREggxNjX9himb=v0=ySTnNKW7uduhQaC7w@mail.gmail.com>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B059806BD@CH1PRD0811MB430.namprd08.prod.outlook.com>

I don't have a publicly available example of the way I currently do things in my ANTLR 3-based IDEs. An old solution that is ugly but mostly works is available at the following link. Note that ANTLR 3 only became a workable tool for building an IDE after I understood the internals in detail and was able to hack it into cooperating. These IDEs (especially Pixel Mine nFringe) use a heavily modified build of ANTLR 3 and grammars which are carefully crafted with IDEs in mind.
http://blog.280z28.org/archives/2008/10/21/

ANTLR 4 is better than ANTLR 3 in almost every way, *especially* when it comes to building IDEs (this was my primary motivation for becoming so involved with the project). However the only target available for ANTLR 4 right now is Java.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

From: Roded [mailto:rodedb at gmail.com]
Sent: Thursday, November 15, 2012 3:13 AM
To: Gerald Rosenberg
Cc: Sam Harwell; ANTLR-Interest Interest
Subject: Re: [antlr-interest] Freemarker grammer w/ JavaScript target

Thanks for the opinions, will report my subjective conclusions..
A couple more related questions:
1. Considering I'm starting a new ANTLR project, is it viable to start with ANTLR4? (in relation to both ANTLR4's general stability at the moment and the state of its JavaScript target).
2. Sam, regarding tracking the mode information and overriding nextToken in ANTLR3, As I'm not too familiar w/ the ANTLR's code so I understand the idea only generally. Can you perhaps point to an example of such parser usage in a different environment? Any code will be of much assistance.
Thanks again,
Roded

On Thu, Nov 15, 2012<tel:2012> at 1:45 AM, Gerald Rosenberg <gerald at certiv.net<mailto:gerald at certiv.net>> wrote:
Interesting.  Not my experience at all.  And, that is even with Eclipse.


On 11/14/2012 1:21 PM, Sam Harwell wrote:
This na?ve approach is not scalable, and will introduce the following limitations:

1. Typing characters within a large token such as a block comment spanning many lines will be "laggy".
No reason that any particular token would take any more or less time to parse -- matching a .* is fast.  As long as the parser is kept warm, the incremental time required to parse an in-memory stream is quite small, particularly in comparison to keystrokes.  This is for source files of 10s to 100s of KB.  Perhaps what you are seeing is particular to your IDE.

2. As the document grows in size, the editor will progressively slow down.
This is entirely dependent on the IDE implementation.  Highlighting and similar features should run in a separate thread and never affect keyboard performance.  A common strategy is that if the highlighting thread ever falls behind, just discard new highlighting changes.  Even in a heavyweight IDE like Eclipse, discards rarely if ever happen and, if they do, the effect is imperceptible.

A very useful (and common) strategy is to minimize UI updates.  Diff the results of the parse with an image of the UI content and apply only the changes.  For SWT and highlighting, the changes are just a series of attribute changes, typically just one or two, which are set without necessarily invoking a UI update.  Keystrokes do cause UI updates, so highlighting is synchronous.

For CodeMirror, it looks like highlighting is implemented by tweaking the DOM class of a span.  The time required to do DOM and UI updates will likely far outweigh the Antlr parse time.  Run the parser in a separate Worker thread and, with some attention to keeping the parser warm and managing the application of updates, I think you will be quite pleasantly surprised at the performance.


For even medium sized documents, running *just* the lexer on the entire document in response to keystrokes will be noticeably slow. Not all editors treat syntax highlighting as a line-at-a-time problem. Even in those editors I use the line-at-a-time approach to greatly improve performance of my IDEs.

The new lexer modes in ANTLR 4 make it much easier to break up tokens which would otherwise span multiple lines. It can be done in ANTLR 3 by manually tracking the mode information and using an override of nextToken that calls a fragment rule for the current mode instead of always calling mTokens. I haven't used the JavaScript target or worked with CodeMirror so I don't have any examples of how to implement this strategy in that environment.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org<mailto:antlr-interest-bounces at antlr.org> [mailto:antlr-interest-bounces at antlr.org<mailto:antlr-interest-bounces at antlr.org>] On Behalf Of Gerald Rosenberg
Sent: Wednesday, November 14, 2012<tel:2012> 12:29 PM
To: rodedb at gmail.com<mailto:rodedb at gmail.com>
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Freemarker grammer w/ JavaScript target

Although your editor's approach is line at a time, no reason to try and force Antlr to do the same.  Antlr is more than fast and light enough to re-parse the entire source file between each keystroke and walk the AST to provide highlighting info (and walk the AST to adjust error markers and to collect code assist hints and ... ).

On 11/14/2012 12:26 AM, Roded wrote:
Hi list,
I'm planning on using ANTLR 3.3's JavaScript target for creating a
Freemarker <http://freemarker.sourceforge.net/> parser for the sake of
syntax highlighting (and auto-completion at a later stage) in a
web-based editor. Considering my lacking experience in ANTLR, I
thought I'd ask for any input or tips on accomplishing my goal.
As for highlighting, using a generated AST is simple enough, however
my editor component's (CodeMirror <http://codemirror.net/>) syntax
highlighting mechanism works on individual lines of the source. Is
there a way to use the ANTLR parser in an interruptible mode so it
could be called for every line separately while retaining its state?
and perhaps even remedying the last parsing error in view of the new
input (as not all source lines pass parsing by themselves)?
Any help and points in the right direction (whether in regards to the
JS target or ANTLR in general) would be much appreciated.
Many thanks,
Roded

P.S. anyone encountered a Freemarker grammar?

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address





From sam at tunnelvisionlabs.com  Thu Nov 15 07:15:29 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 15 Nov 2012 15:15:29 +0000
Subject: [antlr-interest] (no subject)
In-Reply-To: <SNT123-W57410A73D58A62859D040096520@phx.gbl>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>
	<SNT123-W57410A73D58A62859D040096520@phx.gbl>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B059806D3@CH1PRD0811MB430.namprd08.prod.outlook.com>

ANTLR 4 is not currently optimized for this use case. You might be able to reduce the code size a bit by passing the -Xforce-atn flag when you generate your grammar.

To help with optimizing the generated code, can you provide me with one of the grammars that's causing a problem?

Thank you,
--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
Sent: Thursday, November 15, 2012 1:55 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] (no subject)


Jim,
Yes, I looked a the generated code, but the error is on this line:
protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache(); PredictionContextCache does not appear anywhere else in the file and  _sharedContextCache is a parameter in a function.

Even if there was a huge something there, I wouldn't know what to do with it.

I guess my question is:
Is antlr (java) suited for grammars with large sets of keywords and many parser rules?
If it is, how should the grammar be organized so that the generated code fits within the limits of java in terms of size? Using hashmaps helps in the lexer, but what about in the parser?

Pascal
 		 	   		  

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From thomas at ruschival.de  Thu Nov 15 12:17:14 2012
From: thomas at ruschival.de (Thomas Ruschival)
Date: Thu, 15 Nov 2012 16:17:14 -0400
Subject: [antlr-interest] how to skip/read next n Characters (n is read
 form input)
In-Reply-To: <002901cdc30d$b86dd7d0$29498770$@barth@t-online.de>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
	<000001cdb922$b2060ce0$161226a0$@barth@t-online.de>
	<22e6f22984f927c05769a5b4764ef2f3@ruschival.de>
	<002901cdc30d$b86dd7d0$29498770$@barth@t-online.de>
Message-ID: <50A54DCA.80303@ruschival.de>

Hi Claus-Dieter,
I am running antlr v3 with anltworks 1.4.3 and java 1.7.0_1.

It seems the problem has 2 aspects.
1st) no list object is created, only declared (List b_list = null;)
2nd) Nothing matches, not (b+=CHAR)+, not (b+=CHAR|DIGIT|'E')+ not even
not (b+=.)+

What really surprised me (remember I am still newbie) is that ANTLR
generates Lexer tokens for characters form parser rules and that these
tokens do no longer match the generic CHAR lexer rule.
For instance the 'C' or 'E' from the grammar below do not match if I
replace (val=.) by (val=CHAR) in the rule print.

Best Regards
Thomas


I stripped down my grammar to share:

grammar JPosEscape;
@members{
    private boolean escBool = false;
}

DIGIT :
    ('0'..'9');

CHAR :
    ('\u0000'..'\u7fff');

escapecmd :
    ( bold
     | underline
     | readNchars
    );


bold :
    '!'?
         {
          escBool = false;
         }
    ('b' 'C')
              {
               System.out.println("Selecting Bold:" + escBool);
              };

underline :
    ullines = (DIGIT)*
    '!'?
         {
          escBool = false;
         }
    ('u' 'C')
              {
               System.out.println("Selecting UNDERLINE:" + escBool +
"using # "+ $ullines.text + "lines");
              };

readNchars :
    NUMBER = DIGIT+ 'E'
    (
        b +=  ( CHAR|DIGIT|'E' )
    )+
    {$b.size() <= Integer.parseInt($NUMBER.text)}?
                                                   {
                                                    System.out.println("
readNChars #" + $b.size());
                                                   };

expr :
    print*;

print :
    ('@' '|') => ('@' '|')
     escapecmd
    | (val = . )   
     {
      System.out.print($val.text);
     };


 


Am 15.11.2012 04:46, schrieb cd.barth at t-online.de:
> Hi Thomas, 
> the sample from ANTLR v3 reference is not (yet?) running with ANTLR v4.0b3.
> (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
>
> I see that {System.out.println(((StartContext)_localctx).b.size());}
> is a workaround for the counter but synpred is not working for me too.
>
> It would be nice getting therefor a solution from Ter in the final Version.
>
> Regards Claus-Dieter

From parrt at cs.usfca.edu  Thu Nov 15 08:34:47 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Nov 2012 08:34:47 -0800
Subject: [antlr-interest] how to skip/read next n Characters (n is
	read	form input)
In-Reply-To: <50a4abf3.44cd0e0a.6a0a.2f25SMTPIN_ADDED@mx.google.com>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
	<000001cdb922$b2060ce0$161226a0$@barth@t-online.de>
	<22e6f22984f927c05769a5b4764ef2f3@ruschival.de>
	<50a4abf3.44cd0e0a.6a0a.2f25SMTPIN_ADDED@mx.google.com>
Message-ID: <D083EB24-F54B-4AB5-99A8-A75FBD094C8F@cs.usfca.edu>

here's a similar example from the book:

http://media.pragprog.com/titles/tpantlr2/code/tour/Data.g4
Ter
On Nov 15, 2012, at 12:46 AM, <cd.barth at t-online.de> wrote:

> Hi Thomas, 
> the sample from ANTLR v3 reference is not (yet?) running with ANTLR v4.0b3.
> (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
> 
> I see that {System.out.println(((StartContext)_localctx).b.size());}
> is a workaround for the counter but synpred is not working for me too.
> 
> It would be nice getting therefor a solution from Ter in the final Version.
> 
> Regards Claus-Dieter
> 
> 
> -----Urspr?ngliche Nachricht-----
> Von: Thomas Ruschival [mailto:thomas at ruschival.de] 
> Gesendet: Mittwoch, 14. November 2012 21:53
> An: cd.barth at t-online.de
> Cc: 'Juancarlo A?ez'; antlr-interest at antlr.org
> Betreff: Re: AW: [antlr-interest] how to skip/read next n Characters (n is read form input)
> 
> Hi,
> finally I got a (Kindle-)copy of the ANTLR reference and read some chapters.
> The cited example generates NullPointerExceptions:
> 
> Looking through the generated code I realized that 'b' is translated in Java to a List b_list = null; b_list is never initialized to be a valid object. (no b_list = new ArrayList(); anywhere in the readNchars method)
> 
> This issue I fixed manually in the generated code...
> 
> The second issue came up during runtime: an EarlyExitException is thrown.
> According to the reference is occurs if "The recognizer did not match anything for a (..)+ loop."
> This is (at least for me) quite odd. Since I also tried to match (b+=.)+ as well as (b+=CHAR)+
> 
> 
> Best regards
> Thomas
> 
> 
> 
> Am 2012-11-02 13:51, schrieb cd.barth at t-online.de:
>> Thomas, I would use validating semantic predicate
>> 
>> readNchars
>> : NUM
>>  (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
>> ;
>> 
>> The idea is from Ter's book The Definitive ANTLR Reference (ANTLR v3)
>> 
>> Gru? Claus-Dieter
>> 
>> 
>> -----Urspr?ngliche Nachricht-----
>> Von: Juancarlo A?ez [mailto:apalala at gmail.com]
>> Gesendet: Donnerstag, 1. November 2012 02:20
>> An: Thomas Ruschival
>> Cc: antlr-interest at antlr.org
>> Betreff: Re: [antlr-interest] how to skip/read next n Characters (n is 
>> read form input)
>> 
>> Thomas,
>> 
>> ANTLR may be overkill or inadequate for what you're doing.
>> 
>> I think you'd be better of with a program with a main loop that 
>> dispatches to different functions based on the escape code. Each 
>> function can affect the input position, or do anything else it 
>> pleases. It would be a handcrafted state machine.
>> 
>> You can do this in Python or any of the friendly languages.
>> 
>> Cheers,
>> 
>> -- Juancarlo
>> 
>> On Wed, Oct 31, 2012 at 12:17 PM, Thomas Ruschival
>> <thomas at ruschival.de>wrote:
>> 
>>> I am a humble EE with little grammar experience, please forgive my 
>>> ignorance and give me a hint how professionals would do the trick.
>>> 
>>> I came up with a grammar for detecting commands "escape-sequences" 
>>> in
>>> a input text (for a UnifiedPOS printer) that reads numbers and 
>>> boolean argumets for escape sequence commands from the input stream.
>>> I can read numeric arguments and use them as function parameters, 
>>> which function to be called is parsed correctly.
>>> For instance "ESC|#rF" means "print feed revers # lines"
>>> 
>>> The question is how to treat "ESC|#E" which means "send the next # 
>>> bytes untreated to the pinter" in other words:
>>> 
>>> How can I use a number N that I detected on the input stream to read 
>>> and consume the next N characters 'un-lexed' and 'un-parsed' as 
>>> string/byte array?
>>> 
>>> I was thinking using something like this in a parse action using the 
>>> 'input' member of the parser:
>>> 
>>> for (int i=0; i<N; i++){
>>>        output.append(input.LA(1));
>>>        input.consume();
>>> }
>>> 
>>> But it doesn't seem very professional to me. Furthermore this gives 
>>> me tokens and not plain bytes....
>>> Can you give me a hint?
>>> 
>>> Thanks in advance
>>> Thomas
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> 
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>>> s
>>> 
>> 
>> 
>> 
>> --
>> Juancarlo *A?ez*
> 


From apalala at gmail.com  Thu Nov 15 09:08:00 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 15 Nov 2012 12:38:00 -0430
Subject: [antlr-interest] No lexer generated
Message-ID: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>

I have a grammar that starts like this:

grammar COBOL;
options {
    language  = Python;
    backtrack = false;
    output    = AST;
    ASTLabelType=CommonTree;
}

import Tokens, Lexical;


And no lexer or code for Tokens or Lexical is generated.

I have the exact same setup for another grammar, and it works.

What can be happening this time?

-- 
Juancarlo *A?ez*

From bkaiflin.ruby at gmail.com  Thu Nov 15 09:19:26 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Thu, 15 Nov 2012 18:19:26 +0100
Subject: [antlr-interest] No lexer generated
In-Reply-To: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
References: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
Message-ID: <CAF9KzRMojHQWf5a6d+Cpt5sxiSmM7AFmfQNMLGR2CVvVL4pJiA@mail.gmail.com>

COBOL : Completely Outdated and Badly Overused Language  *:*D

Well, no so bad, it executes faster than some widespread OO languages ...

2012/11/15 Juancarlo A?ez <apalala at gmail.com>

> I have a grammar that starts like this:
>
> grammar COBOL;
> options {
>     language  = Python;
>     backtrack = false;
>     output    = AST;
>     ASTLabelType=CommonTree;
> }
>
> import Tokens, Lexical;
>
>
> And no lexer or code for Tokens or Lexical is generated.
>
> I have the exact same setup for another grammar, and it works.
>
> What can be happening this time?
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From apalala at gmail.com  Thu Nov 15 09:22:18 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 15 Nov 2012 12:52:18 -0430
Subject: [antlr-interest] No lexer generated
In-Reply-To: <CAF9KzRMojHQWf5a6d+Cpt5sxiSmM7AFmfQNMLGR2CVvVL4pJiA@mail.gmail.com>
References: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
	<CAF9KzRMojHQWf5a6d+Cpt5sxiSmM7AFmfQNMLGR2CVvVL4pJiA@mail.gmail.com>
Message-ID: <CAN1YFWv-t7nrQtovzckBCSzx52pM8+R48Aw+rJE082WiziUxyQ@mail.gmail.com>

Bernard,

Alas, I'm not writing a compiler. I'm writing a translator.


On Thu, Nov 15, 2012 at 12:49 PM, Bernard Kaiflin
<bkaiflin.ruby at gmail.com>wrote:

> COBOL : Completely Outdated and Badly Overused Language  *:*D
>
> Well, no so bad, it executes faster than some widespread OO languages ...
>
> 2012/11/15 Juancarlo A?ez <apalala at gmail.com>
>
>> I have a grammar that starts like this:
>>
>> grammar COBOL;
>> options {
>>     language  = Python;
>>     backtrack = false;
>>     output    = AST;
>>     ASTLabelType=CommonTree;
>> }
>>
>> import Tokens, Lexical;
>>
>>
>> And no lexer or code for Tokens or Lexical is generated.
>>
>> I have the exact same setup for another grammar, and it works.
>>
>> What can be happening this time?
>>
>> --
>> Juancarlo *A?ez*
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>


-- 
Juancarlo *A?ez*

From apalala at gmail.com  Thu Nov 15 09:34:15 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 15 Nov 2012 13:04:15 -0430
Subject: [antlr-interest] No lexer generated
In-Reply-To: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
References: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
Message-ID: <CAN1YFWsZa8vC5M5dCcQh5=riuZWB60dd0UyxE3jKaAY4LieLqA@mail.gmail.com>

OK. For some reason, ANTLR wants me to name all grammar files in the
compilation, when it didin't for other grammars.

Go figure!


On Thu, Nov 15, 2012 at 12:38 PM, Juancarlo A?ez <apalala at gmail.com> wrote:

> I have a grammar that starts like this:
>
> grammar COBOL;
> options {
>     language  = Python;
>     backtrack = false;
>     output    = AST;
>     ASTLabelType=CommonTree;
> }
>
> import Tokens, Lexical;
>
>
> And no lexer or code for Tokens or Lexical is generated.
>
> I have the exact same setup for another grammar, and it works.
>
> What can be happening this time?
>
> --
> Juancarlo *A?ez*
>



-- 
Juancarlo *A?ez*

From gerald at certiv.net  Thu Nov 15 09:52:15 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Thu, 15 Nov 2012 09:52:15 -0800
Subject: [antlr-interest] Initializing synthetic tokens?
Message-ID: <50A52BCF.1070404@certiv.net>

In v3, synthetic tokens could be initialized:
tokens {
     COMMA = ',' ;
}

v4 complains about the assignment.  Is there an alternative/preferred 
way to initialize these tokens?  Did not find anything in TDAR4.

Thanks.


From apalala at gmail.com  Thu Nov 15 10:03:30 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 15 Nov 2012 13:33:30 -0430
Subject: [antlr-interest] No lexer generated
In-Reply-To: <CAN1YFWsZa8vC5M5dCcQh5=riuZWB60dd0UyxE3jKaAY4LieLqA@mail.gmail.com>
References: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
	<CAN1YFWsZa8vC5M5dCcQh5=riuZWB60dd0UyxE3jKaAY4LieLqA@mail.gmail.com>
Message-ID: <CAN1YFWvBjc-25qxXFBqDB7EKf1hLMudjcKYk85x7cN2yE0XrSA@mail.gmail.com>

And then again, NO. That is not the desired behavior. ANTLR should compile
the imported grammars without mentioning them on the command line.


On Thu, Nov 15, 2012 at 1:04 PM, Juancarlo A?ez <apalala at gmail.com> wrote:

> OK. For some reason, ANTLR wants me to name all grammar files in the
> compilation, when it didin't for other grammars.
>
> Go figure!
>
>
> On Thu, Nov 15, 2012 at 12:38 PM, Juancarlo A?ez <apalala at gmail.com>wrote:
>
>> I have a grammar that starts like this:
>>
>> grammar COBOL;
>> options {
>>     language  = Python;
>>     backtrack = false;
>>     output    = AST;
>>     ASTLabelType=CommonTree;
>> }
>>
>> import Tokens, Lexical;
>>
>>
>> And no lexer or code for Tokens or Lexical is generated.
>>
>> I have the exact same setup for another grammar, and it works.
>>
>> What can be happening this time?
>>
>> --
>> Juancarlo *A?ez*
>>
>
>
>
> --
> Juancarlo *A?ez*
>



-- 
Juancarlo *A?ez*

From pascal_parrot at hotmail.com  Thu Nov 15 10:37:29 2012
From: pascal_parrot at hotmail.com (Pascal Parrot)
Date: Thu, 15 Nov 2012 18:37:29 +0000
Subject: [antlr-interest] (no subject)
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B059806D3@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>,
	<SNT123-W57410A73D58A62859D040096520@phx.gbl>,
	<8802E2F086DC9648BD0585D82AC6377B059806D3@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <SNT123-W1138185F97A2B49533FAF896520@phx.gbl>





One sample grammar (example.g4) is attached there:
http://www.antlr.org/pipermail/antlr-interest/attachments/20121114/c1188d89/attachment.zip

The initial version had a "string too long error". I no longer have the error if I use a hashmap for keywords, as described in the reference book (see attachment in link). However, I am getting a new error now, even when I use the -Xforce-atn option.

This is just an example grammar, so if the error is fixed, a new "too large, too long" error will probably pop up somewhere else. So, it brings up 2 questions:
1) Is it in the antlr roadmap to check for java size limitations in the generated code and break it if necessary?
2) If not, using a different target language is the only option for large grammars, isn't it?

Pascal 

> From: sam at tunnelvisionlabs.com
> To: pascal_parrot at hotmail.com; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] (no subject)
> Date: Thu, 15 Nov 2012 15:15:29 +0000
> 
> ANTLR 4 is not currently optimized for this use case. You might be able to reduce the code size a bit by passing the -Xforce-atn flag when you generate your grammar.
> 
> To help with optimizing the generated code, can you provide me with one of the grammars that's causing a problem?
> 
> Thank you,
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
> Sent: Thursday, November 15, 2012 1:55 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] (no subject)
> 
> 
> Jim,
> Yes, I looked a the generated code, but the error is on this line:
> protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache(); PredictionContextCache does not appear anywhere else in the file and  _sharedContextCache is a parameter in a function.
> 
> Even if there was a huge something there, I wouldn't know what to do with it.
> 
> I guess my question is:
> Is antlr (java) suited for grammars with large sets of keywords and many parser rules?
> If it is, how should the grammar be organized so that the generated code fits within the limits of java in terms of size? Using hashmaps helps in the lexer, but what about in the parser?
> 
> Pascal
>  		 	   		  
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
 		 	   		  

From parrt at cs.usfca.edu  Thu Nov 15 10:41:22 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Nov 2012 10:41:22 -0800
Subject: [antlr-interest] Initializing synthetic tokens?
In-Reply-To: <50A52BCF.1070404@certiv.net>
References: <50A52BCF.1070404@certiv.net>
Message-ID: <59E6A158-822D-4996-B71F-92323EA2F4F2@cs.usfca.edu>

tokens is now an enum.  

COMMA : ',' ;

is preferred
T
On Nov 15, 2012, at 9:52 AM, Gerald Rosenberg wrote:

> In v3, synthetic tokens could be initialized:
> tokens {
>     COMMA = ',' ;
> }
> 
> v4 complains about the assignment.  Is there an alternative/preferred 
> way to initialize these tokens?  Did not find anything in TDAR4.
> 
> Thanks.
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu Nov 15 10:44:46 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 15 Nov 2012 10:44:46 -0800
Subject: [antlr-interest] (no subject)
In-Reply-To: <SNT123-W1138185F97A2B49533FAF896520@phx.gbl>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>,
	<SNT123-W57410A73D58A62859D040096520@phx.gbl>,
	<8802E2F086DC9648BD0585D82AC6377B059806D3@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<SNT123-W1138185F97A2B49533FAF896520@phx.gbl>
Message-ID: <940022ED-928B-466C-8871-C268C63BF2FD@cs.usfca.edu>

The issue is likely the tokenNames table:

        public static final String[] tokenNames = {
                "<INVALID>", "KEYWORD", "WS", "A1", "A2", "A3", "A4", "A5", "A6", "A7",
                "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18",
?

Java can't have static arrays bigger than N / 6 due to limitation in .class file format. (The subject of the oracle/google android suit I was involved with, btw).

Not sure how to get around this. Maybe one big string and then another string encoding indexes of strings within.

Ter

On Nov 15, 2012, at 10:37 AM, Pascal Parrot wrote:

> 
> 
> 
> 
> One sample grammar (example.g4) is attached there:
> http://www.antlr.org/pipermail/antlr-interest/attachments/20121114/c1188d89/attachment.zip
> 
> The initial version had a "string too long error". I no longer have the error if I use a hashmap for keywords, as described in the reference book (see attachment in link). However, I am getting a new error now, even when I use the -Xforce-atn option.
> 
> This is just an example grammar, so if the error is fixed, a new "too large, too long" error will probably pop up somewhere else. So, it brings up 2 questions:
> 1) Is it in the antlr roadmap to check for java size limitations in the generated code and break it if necessary?
> 2) If not, using a different target language is the only option for large grammars, isn't it?
> 
> Pascal 
> 
>> From: sam at tunnelvisionlabs.com
>> To: pascal_parrot at hotmail.com; antlr-interest at antlr.org
>> Subject: RE: [antlr-interest] (no subject)
>> Date: Thu, 15 Nov 2012 15:15:29 +0000
>> 
>> ANTLR 4 is not currently optimized for this use case. You might be able to reduce the code size a bit by passing the -Xforce-atn flag when you generate your grammar.
>> 
>> To help with optimizing the generated code, can you provide me with one of the grammars that's causing a problem?
>> 
>> Thank you,
>> --
>> Sam Harwell
>> Owner, Lead Developer
>> http://tunnelvisionlabs.com
>> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
>> Sent: Thursday, November 15, 2012 1:55 AM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] (no subject)
>> 
>> 
>> Jim,
>> Yes, I looked a the generated code, but the error is on this line:
>> protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache(); PredictionContextCache does not appear anywhere else in the file and  _sharedContextCache is a parameter in a function.
>> 
>> Even if there was a huge something there, I wouldn't know what to do with it.
>> 
>> I guess my question is:
>> Is antlr (java) suited for grammars with large sets of keywords and many parser rules?
>> If it is, how should the grammar be organized so that the generated code fits within the limits of java in terms of size? Using hashmaps helps in the lexer, but what about in the parser?
>> 
>> Pascal
>> 		 	   		  
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
> 		 	   		  
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From sam at tunnelvisionlabs.com  Thu Nov 15 10:56:14 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Thu, 15 Nov 2012 18:56:14 +0000
Subject: [antlr-interest] (no subject)
In-Reply-To: <SNT123-W1138185F97A2B49533FAF896520@phx.gbl>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>,
	<SNT123-W57410A73D58A62859D040096520@phx.gbl>,
	<8802E2F086DC9648BD0585D82AC6377B059806D3@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<SNT123-W1138185F97A2B49533FAF896520@phx.gbl>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B059807DE@CH1PRD0811MB430.namprd08.prod.outlook.com>

While the string length issue is straightforward to analyze, it's very hard to predict the compiled class size to even know when to split up the code, much less what the optimal division would look like.

Regarding #2, Microsoft thought this through much, much better than the JVM team. I think the code size limit in C# is some 4 orders of magnitude greater than in Java (.NET limit over 500MB compared to 64K in Java), and the internal representation of array initialization data is much more compact. The performance of the C# port should absolutely obliterate even my optimized Java version... once I port it that is... My custom tuned build of v3 is more than 4x faster than the Java target, and I'm planning to use several things I learned from that in the v4 port.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

From: Pascal Parrot [mailto:pascal_parrot at hotmail.com]
Sent: Thursday, November 15, 2012 12:37 PM
To: Sam Harwell; antlr-interest at antlr.org
Subject: RE: [antlr-interest] (no subject)


One sample grammar (example.g4) is attached there:
http://www.antlr.org/pipermail/antlr-interest/attachments/20121114/c1188d89/attachment.zip

The initial version had a "string too long error". I no longer have the error if I use a hashmap for keywords, as described in the reference book (see attachment in link). However, I am getting a new error now, even when I use the -Xforce-atn option.

This is just an example grammar, so if the error is fixed, a new "too large, too long" error will probably pop up somewhere else. So, it brings up 2 questions:
1) Is it in the antlr roadmap to check for java size limitations in the generated code and break it if necessary?
2) If not, using a different target language is the only option for large grammars, isn't it?

Pascal
> From: sam at tunnelvisionlabs.com<mailto:sam at tunnelvisionlabs.com>
> To: pascal_parrot at hotmail.com<mailto:pascal_parrot at hotmail.com>; antlr-interest at antlr.org<mailto:antlr-interest at antlr.org>
> Subject: RE: [antlr-interest] (no subject)
> Date: Thu, 15 Nov 2012 15:15:29 +0000
>
> ANTLR 4 is not currently optimized for this use case. You might be able to reduce the code size a bit by passing the -Xforce-atn flag when you generate your grammar.
>
> To help with optimizing the generated code, can you provide me with one of the grammars that's causing a problem?
>
> Thank you,
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org<mailto:antlr-interest-bounces at antlr.org> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
> Sent: Thursday, November 15, 2012 1:55 AM
> To: antlr-interest at antlr.org<mailto:antlr-interest at antlr.org>
> Subject: Re: [antlr-interest] (no subject)
>
>
> Jim,
> Yes, I looked a the generated code, but the error is on this line:
> protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache(); PredictionContextCache does not appear anywhere else in the file and _sharedContextCache is a parameter in a function.
>
> Even if there was a huge something there, I wouldn't know what to do with it.
>
> I guess my question is:
> Is antlr (java) suited for grammars with large sets of keywords and many parser rules?
> If it is, how should the grammar be organized so that the generated code fits within the limits of java in terms of size? Using hashmaps helps in the lexer, but what about in the parser?
>
> Pascal
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From pascal_parrot at hotmail.com  Thu Nov 15 11:45:34 2012
From: pascal_parrot at hotmail.com (Pascal Parrot)
Date: Thu, 15 Nov 2012 19:45:34 +0000
Subject: [antlr-interest] (no subject)
In-Reply-To: <940022ED-928B-466C-8871-C268C63BF2FD@cs.usfca.edu>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>,
	<SNT123-W57410A73D58A62859D040096520@phx.gbl>,
	<8802E2F086DC9648BD0585D82AC6377B059806D3@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<SNT123-W1138185F97A2B49533FAF896520@phx.gbl>,
	<940022ED-928B-466C-8871-C268C63BF2FD@cs.usfca.edu>
Message-ID: <SNT123-W41BE4404C7B439C19210FE96520@phx.gbl>




Most of the information in tokenNames is already included in the keywords hashmap:  put("A1", exampleParser.A1);
And to one value corresponds one key. Maybe the information already in the map could be leveraged?


> Subject: Re: [antlr-interest] (no subject)
> From: parrt at cs.usfca.edu
> Date: Thu, 15 Nov 2012 10:44:46 -0800
> CC: sam at tunnelvisionlabs.com; antlr-interest at antlr.org
> To: pascal_parrot at hotmail.com
> 
> The issue is likely the tokenNames table:
> 
>         public static final String[] tokenNames = {
>                 "<INVALID>", "KEYWORD", "WS", "A1", "A2", "A3", "A4", "A5", "A6", "A7",
>                 "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18",
> ?
> 
> Java can't have static arrays bigger than N / 6 due to limitation in .class file format. (The subject of the oracle/google android suit I was involved with, btw).
> 
> Not sure how to get around this. Maybe one big string and then another string encoding indexes of strings within.
> 
> Ter
> 
> On Nov 15, 2012, at 10:37 AM, Pascal Parrot wrote:
> 
> > 
> > 
> > 
> > 
> > One sample grammar (example.g4) is attached there:
> > http://www.antlr.org/pipermail/antlr-interest/attachments/20121114/c1188d89/attachment.zip
> > 
> > The initial version had a "string too long error". I no longer have the error if I use a hashmap for keywords, as described in the reference book (see attachment in link). However, I am getting a new error now, even when I use the -Xforce-atn option.
> > 
> > This is just an example grammar, so if the error is fixed, a new "too large, too long" error will probably pop up somewhere else. So, it brings up 2 questions:
> > 1) Is it in the antlr roadmap to check for java size limitations in the generated code and break it if necessary?
> > 2) If not, using a different target language is the only option for large grammars, isn't it?
> > 
> > Pascal 
> > 
> >> From: sam at tunnelvisionlabs.com
> >> To: pascal_parrot at hotmail.com; antlr-interest at antlr.org
> >> Subject: RE: [antlr-interest] (no subject)
> >> Date: Thu, 15 Nov 2012 15:15:29 +0000
> >> 
> >> ANTLR 4 is not currently optimized for this use case. You might be able to reduce the code size a bit by passing the -Xforce-atn flag when you generate your grammar.
> >> 
> >> To help with optimizing the generated code, can you provide me with one of the grammars that's causing a problem?
> >> 
> >> Thank you,
> >> --
> >> Sam Harwell
> >> Owner, Lead Developer
> >> http://tunnelvisionlabs.com
> >> 
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
> >> Sent: Thursday, November 15, 2012 1:55 AM
> >> To: antlr-interest at antlr.org
> >> Subject: Re: [antlr-interest] (no subject)
> >> 
> >> 
> >> Jim,
> >> Yes, I looked a the generated code, but the error is on this line:
> >> protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache(); PredictionContextCache does not appear anywhere else in the file and  _sharedContextCache is a parameter in a function.
> >> 
> >> Even if there was a huge something there, I wouldn't know what to do with it.
> >> 
> >> I guess my question is:
> >> Is antlr (java) suited for grammars with large sets of keywords and many parser rules?
> >> If it is, how should the grammar be organized so that the generated code fits within the limits of java in terms of size? Using hashmaps helps in the lexer, but what about in the parser?
> >> 
> >> Pascal
> >> 		 	   		  
> >> 
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >> 
> >> 
> > 		 	   		  
> > 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
 		 	   		  

From apalala at gmail.com  Thu Nov 15 16:59:15 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 15 Nov 2012 20:29:15 -0430
Subject: [antlr-interest] No lexer generated
In-Reply-To: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
References: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
Message-ID: <CAN1YFWti2aRU=pbhDr_BYApTb=DBup5U6ApdDFWV1S2_bfRYhg@mail.gmail.com>

So? Is there any reason why ANTLR won't generate a lexer for a combined
grammar?


On Thu, Nov 15, 2012 at 12:38 PM, Juancarlo A?ez <apalala at gmail.com> wrote:

> I have a grammar that starts like this:
>
> grammar COBOL;
> options {
>     language  = Python;
>     backtrack = false;
>     output    = AST;
>     ASTLabelType=CommonTree;
> }
>
> import Tokens, Lexical;
>
>
> And no lexer or code for Tokens or Lexical is generated.
>
> I have the exact same setup for another grammar, and it works.
>
> What can be happening this time?
>
> --
> Juancarlo *A?ez*
>



-- 
Juancarlo *A?ez*

From sam at tunnelvisionlabs.com  Thu Nov 15 17:05:36 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Fri, 16 Nov 2012 01:05:36 +0000
Subject: [antlr-interest] No lexer generated
In-Reply-To: <CAN1YFWti2aRU=pbhDr_BYApTb=DBup5U6ApdDFWV1S2_bfRYhg@mail.gmail.com>
References: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>,
	<CAN1YFWti2aRU=pbhDr_BYApTb=DBup5U6ApdDFWV1S2_bfRYhg@mail.gmail.com>
Message-ID: <91D24706-29C7-4D9A-8797-93E5C9E7A501@tunnelvisionlabs.com>

It should generate the lexer as long as the composite grammar has at least one lesser rule defined directly in it (not imported). You can create a dummy fragment rule for this to keep out from affecting the behavior of your lexer . This is an ANTLR 3 limitation.

Sam

----- Reply message -----
From: "Juancarlo A?ez" <apalala at gmail.com>
Date: Thu, Nov 15, 2012 6:59 pm
Subject: [antlr-interest] No lexer generated
To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>

So? Is there any reason why ANTLR won't generate a lexer for a combined
grammar?


On Thu, Nov 15, 2012 at 12:38 PM, Juancarlo A?ez <apalala at gmail.com> wrote:

> I have a grammar that starts like this:
>
> grammar COBOL;
> options {
>     language  = Python;
>     backtrack = false;
>     output    = AST;
>     ASTLabelType=CommonTree;
> }
>
> import Tokens, Lexical;
>
>
> And no lexer or code for Tokens or Lexical is generated.
>
> I have the exact same setup for another grammar, and it works.
>
> What can be happening this time?
>
> --
> Juancarlo *A?ez*
>



--
Juancarlo *A?ez*

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From apalala at gmail.com  Thu Nov 15 17:29:26 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 15 Nov 2012 20:59:26 -0430
Subject: [antlr-interest] No lexer generated
In-Reply-To: <91D24706-29C7-4D9A-8797-93E5C9E7A501@tunnelvisionlabs.com>
References: <CAN1YFWtZZ9HBSTQvibQ8M1Jeb=NkBzAzpYVYZUQQXkOLDnKxVg@mail.gmail.com>
	<CAN1YFWti2aRU=pbhDr_BYApTb=DBup5U6ApdDFWV1S2_bfRYhg@mail.gmail.com>
	<91D24706-29C7-4D9A-8797-93E5C9E7A501@tunnelvisionlabs.com>
Message-ID: <CAN1YFWsA9bH3cmK_vPtoLyhkFmsoM3ofKuqZK0yXCc6zCkAAKw@mail.gmail.com>

Sam,

On Thu, Nov 15, 2012 at 8:35 PM, Sam Harwell <sam at tunnelvisionlabs.com>wrote:

> It should generate the lexer as long as the composite grammar has at least
> one lesser rule defined directly in it (not imported). You can create a
> dummy fragment rule for this to keep out from affecting the behavior of
> your lexer . This is an ANTLR 3 limitation.


Thank you!

Defining something lexical in the main grammar solved it.

-- 
Juancarlo *A?ez*

From apalala at gmail.com  Thu Nov 15 17:31:19 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 15 Nov 2012 21:01:19 -0430
Subject: [antlr-interest] no AST/token for nonepsilon target w/o predicate
Message-ID: <CAN1YFWthPo6k2N7Zmaveiqrn9VEMGWBEovjnyZ5Sr4U9wFA-+A@mail.gmail.com>

ANTLR is reporting this error:

error(10):  internal error:
org.antlr.analysis.NFAToDFAConverter.getPredicatesPerNonDeterministicAlt(NFAToDFAConverter.java:1606):
no AST/token for nonepsilon target w/o predicate


What should I be looking for?

-- 
Juancarlo *A?ez*

From jimi at temporal-wave.com  Thu Nov 15 18:31:16 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Nov 2012 10:31:16 +0800
Subject: [antlr-interest] how to skip/read next n Characters (n is read
 form input)
In-Reply-To: <50A54DCA.80303@ruschival.de>
References: <ee883884dc9492eb5dd79d8181baf7d7@ruschival.de>
	<CAN1YFWtiHNvchFLMJr4EnT8aXE7k6gsK2dOj2ahVrERLNz2jXg@mail.gmail.com>
	<000001cdb922$b2060ce0$161226a0$@barth@t-online.de>	<22e6f22984f927c05769a5b4764ef2f3@ruschival.de>
	<002901cdc30d$b86dd7d0$29498770$@barth@t-online.de>
	<50A54DCA.80303@ruschival.de>
Message-ID: <75b5bd03f5c00663a504876bc6531b97@mail.gmail.com>

- I suggest that you take a step back and read through all the examples.
- Read the getting started Wiki articles
- antlr.markmail.org may well be your new friend.
- When you are new to the game, I suggest that you do not use 'literals'
in your parser grammars.
- val=. In a parser will capture every token, not any character, hence it
is not usually useful

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Thomas Ruschival
Sent: Friday, November 16, 2012 4:17 AM
To: cd.barth at t-online.de
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] how to skip/read next n Characters (n is
read form input)

Hi Claus-Dieter,
I am running antlr v3 with anltworks 1.4.3 and java 1.7.0_1.

It seems the problem has 2 aspects.
1st) no list object is created, only declared (List b_list = null;)
2nd) Nothing matches, not (b+=CHAR)+, not (b+=CHAR|DIGIT|'E')+ not even
not (b+=.)+

What really surprised me (remember I am still newbie) is that ANTLR
generates Lexer tokens for characters form parser rules and that these
tokens do no longer match the generic CHAR lexer rule.
For instance the 'C' or 'E' from the grammar below do not match if I
replace (val=.) by (val=CHAR) in the rule print.

Best Regards
Thomas


I stripped down my grammar to share:

grammar JPosEscape;
@members{
    private boolean escBool = false;
}

DIGIT :
    ('0'..'9');

CHAR :
    ('\u0000'..'\u7fff');

escapecmd :
    ( bold
     | underline
     | readNchars
    );


bold :
    '!'?
         {
          escBool = false;
         }
    ('b' 'C')
              {
               System.out.println("Selecting Bold:" + escBool);
              };

underline :
    ullines = (DIGIT)*
    '!'?
         {
          escBool = false;
         }
    ('u' 'C')
              {
               System.out.println("Selecting UNDERLINE:" + escBool +
"using # "+ $ullines.text + "lines");
              };

readNchars :
    NUMBER = DIGIT+ 'E'
    (
        b +=  ( CHAR|DIGIT|'E' )
    )+
    {$b.size() <= Integer.parseInt($NUMBER.text)}?
                                                   {
                                                    System.out.println("
readNChars #" + $b.size());
                                                   };

expr :
    print*;

print :
    ('@' '|') => ('@' '|')
     escapecmd
    | (val = . )
     {
      System.out.print($val.text);
     };





Am 15.11.2012 04:46, schrieb cd.barth at t-online.de:
> Hi Thomas,
> the sample from ANTLR v3 reference is not (yet?) running with ANTLR
v4.0b3.
> (b+=CHAR)+ {$b.size()<=Integer.parseInt($NUM.text)}?
>
> I see that {System.out.println(((StartContext)_localctx).b.size());}
> is a workaround for the counter but synpred is not working for me too.
>
> It would be nice getting therefor a solution from Ter in the final
Version.
>
> Regards Claus-Dieter

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Thu Nov 15 18:38:45 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Nov 2012 10:38:45 +0800
Subject: [antlr-interest] (no subject)
In-Reply-To: <940022ED-928B-466C-8871-C268C63BF2FD@cs.usfca.edu>
References: <SNT123-W61E59A86B2E31F1EB757E096530@phx.gbl>,
	<SNT123-W57410A73D58A62859D040096520@phx.gbl>, 
	<8802E2F086DC9648BD0585D82AC6377B059806D3@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<SNT123-W1138185F97A2B49533FAF896520@phx.gbl>
	<940022ED-928B-466C-8871-C268C63BF2FD@cs.usfca.edu>
Message-ID: <406d3469428f384fe4e8817dad1cd98f@mail.gmail.com>

Maybe an option not to generate the tokenNames table

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Friday, November 16, 2012 2:45 AM
To: Pascal Parrot
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] (no subject)

The issue is likely the tokenNames table:

        public static final String[] tokenNames = {
                "<INVALID>", "KEYWORD", "WS", "A1", "A2", "A3", "A4",
"A5", "A6", "A7",
                "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15",
"A16", "A17", "A18", .

Java can't have static arrays bigger than N / 6 due to limitation in
.class file format. (The subject of the oracle/google android suit I was
involved with, btw).

Not sure how to get around this. Maybe one big string and then another
string encoding indexes of strings within.

Ter

On Nov 15, 2012, at 10:37 AM, Pascal Parrot wrote:

>
>
>
>
> One sample grammar (example.g4) is attached there:
> http://www.antlr.org/pipermail/antlr-interest/attachments/20121114/c11
> 88d89/attachment.zip
>
> The initial version had a "string too long error". I no longer have the
error if I use a hashmap for keywords, as described in the reference book
(see attachment in link). However, I am getting a new error now, even when
I use the -Xforce-atn option.
>
> This is just an example grammar, so if the error is fixed, a new "too
large, too long" error will probably pop up somewhere else. So, it brings
up 2 questions:
> 1) Is it in the antlr roadmap to check for java size limitations in the
generated code and break it if necessary?
> 2) If not, using a different target language is the only option for
large grammars, isn't it?
>
> Pascal
>
>> From: sam at tunnelvisionlabs.com
>> To: pascal_parrot at hotmail.com; antlr-interest at antlr.org
>> Subject: RE: [antlr-interest] (no subject)
>> Date: Thu, 15 Nov 2012 15:15:29 +0000
>>
>> ANTLR 4 is not currently optimized for this use case. You might be able
to reduce the code size a bit by passing the -Xforce-atn flag when you
generate your grammar.
>>
>> To help with optimizing the generated code, can you provide me with one
of the grammars that's causing a problem?
>>
>> Thank you,
>> --
>> Sam Harwell
>> Owner, Lead Developer
>> http://tunnelvisionlabs.com
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pascal Parrot
>> Sent: Thursday, November 15, 2012 1:55 AM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] (no subject)
>>
>>
>> Jim,
>> Yes, I looked a the generated code, but the error is on this line:
>> protected static final PredictionContextCache _sharedContextCache = new
PredictionContextCache(); PredictionContextCache does not appear anywhere
else in the file and  _sharedContextCache is a parameter in a function.
>>
>> Even if there was a huge something there, I wouldn't know what to do
with it.
>>
>> I guess my question is:
>> Is antlr (java) suited for grammars with large sets of keywords and
many parser rules?
>> If it is, how should the grammar be organized so that the generated
code fits within the limits of java in terms of size? Using hashmaps helps
in the lexer, but what about in the parser?
>>
>> Pascal
>> 		 	   		
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>>
>>
> 		 	   		
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jarrod at vertigrated.com  Thu Nov 15 20:26:00 2012
From: jarrod at vertigrated.com (Jarrod Roberson)
Date: Thu, 15 Nov 2012 23:26:00 -0500
Subject: [antlr-interest] How to get rid of useless nodes in AST?
Message-ID: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>

I asked this question on stackoverflow.com, it has many details and
graphics depicting what I am trying to do.

http://stackoverflow.com/questions/13409927/how-to-get-rid-of-useless-nodes-from-this-ast-tree

Can anyone help me get rid of these intermediate nodes?

-- 
Jarrod Roberson

From jimi at temporal-wave.com  Thu Nov 15 20:33:32 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Nov 2012 12:33:32 +0800
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
Message-ID: <616d24e516dcc0cbf1a1a0cca16d5435@mail.gmail.com>

Well, you are putting them in there yourself - just don't!

Creating node tokes like MULTIPLY does not make sense. Remove the
'literals' and create:

MULTIPLY: '*';

Then:

multiply: unary (MULTIPLY^ unary)* ;

and so on. The redundant tokens are only there because you are putting
them there.

Doctor, doctor - I broke my arm in three places. Don't go to those places
again. :)

Jim




-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jarrod Roberson
Sent: Friday, November 16, 2012 12:26 PM
To: Antlr Interest
Subject: [antlr-interest] How to get rid of useless nodes in AST?

I asked this question on stackoverflow.com, it has many details and
graphics depicting what I am trying to do.

http://stackoverflow.com/questions/13409927/how-to-get-rid-of-useless-node
s-from-this-ast-tree

Can anyone help me get rid of these intermediate nodes?

--
Jarrod Roberson

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From gerald at certiv.net  Thu Nov 15 22:55:13 2012
From: gerald at certiv.net (Gerald Rosenberg)
Date: Thu, 15 Nov 2012 22:55:13 -0800
Subject: [antlr-interest] Initializing synthetic tokens?
In-Reply-To: <59E6A158-822D-4996-B71F-92323EA2F4F2@cs.usfca.edu>
References: <50A52BCF.1070404@certiv.net>
	<59E6A158-822D-4996-B71F-92323EA2F4F2@cs.usfca.edu>
Message-ID: <50A5E351.2050004@certiv.net>

Strange. I get ". . . mismatched input ':' expecting RBRACE" .  The only 
syntax that seems to be recognized is

tokens { A, B }


On 11/15/2012 10:41 AM, Terence Parr wrote:
> tokens is now an enum.
>
> COMMA : ',' ;
>
> is preferred
> T
> On Nov 15, 2012, at 9:52 AM, Gerald Rosenberg wrote:
>
>> In v3, synthetic tokens could be initialized:
>> tokens {
>>      COMMA = ',' ;
>> }
>>
>> v4 complains about the assignment.  Is there an alternative/preferred
>> way to initialize these tokens?  Did not find anything in TDAR4.
>>
>> Thanks.
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



From jimi at temporal-wave.com  Thu Nov 15 23:01:43 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Nov 2012 15:01:43 +0800
Subject: [antlr-interest] Initializing synthetic tokens?
In-Reply-To: <50A5E351.2050004@certiv.net>
References: <50A52BCF.1070404@certiv.net>	<59E6A158-822D-4996-B71F-92323EA2F4F2@cs.usfca.edu>
	<50A5E351.2050004@certiv.net>
Message-ID: <204079709ed61bdbb3a438aa71b939e5@mail.gmail.com>

As in, make it a real token in the lexer, not define it in the tokens {}
section. The syntax you show, is the correct syntax for the enum - it is a
list of imaginary tokens - real tokens belong in the lexer.

Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gerald Rosenberg
Sent: Friday, November 16, 2012 2:55 PM
To: parrt at cs.usfca.edu
Cc: antlr-interest
Subject: Re: [antlr-interest] Initializing synthetic tokens?

Strange. I get ". . . mismatched input ':' expecting RBRACE" .  The only
syntax that seems to be recognized is

tokens { A, B }


On 11/15/2012 10:41 AM, Terence Parr wrote:
> tokens is now an enum.
>
> COMMA : ',' ;
>
> is preferred
> T
> On Nov 15, 2012, at 9:52 AM, Gerald Rosenberg wrote:
>
>> In v3, synthetic tokens could be initialized:
>> tokens {
>>      COMMA = ',' ;
>> }
>>
>> v4 complains about the assignment.  Is there an alternative/preferred
>> way to initialize these tokens?  Did not find anything in TDAR4.
>>
>> Thanks.
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
>> s
>



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From apalala at gmail.com  Fri Nov 16 05:17:01 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Fri, 16 Nov 2012 08:47:01 -0430
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
Message-ID: <CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>

Jarrod,

Jim is right, but he doesn't make much of an explanation:

subtract : modulo ('-' modulo)* -> ^(SUBTRACT modulo (modulo)* ) ;


To get rid of the unneeded tokens you can write something like:

subtract
:




On Thu, Nov 15, 2012 at 11:56 PM, Jarrod Roberson <jarrod at vertigrated.com>wrote:

> I asked this question on stackoverflow.com, it has many details and
> graphics depicting what I am trying to do.
>
>
> http://stackoverflow.com/questions/13409927/how-to-get-rid-of-useless-nodes-from-this-ast-tree
>
> Can anyone help me get rid of these intermediate nodes?
>
> --
> Jarrod Roberson
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From apalala at gmail.com  Fri Nov 16 05:19:41 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Fri, 16 Nov 2012 08:49:41 -0430
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
	<CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
Message-ID: <CAN1YFWvLuQyciO-9QD4-Qk8U765Z-RuPWFw5ifyTV3_R62_j3g@mail.gmail.com>

Sorry, fired early.

subtract : modulo ('-' modulo)* -> ^(SUBTRACT modulo (modulo)* ) ;


subtract
    :
    modulo
    ( modul
       ( '-' modulo)+  -> ^(SUBTRACT modulo+) // you don't need the
parenthesis or the asterisk
       |
      () -> modulo
    )
   ;

Cheeers,

-- JA

On Fri, Nov 16, 2012 at 8:47 AM, Juancarlo A?ez <apalala at gmail.com> wrote:

> Jarrod,
>
> Jim is right, but he doesn't make much of an explanation:
>
> subtract : modulo ('-' modulo)* -> ^(SUBTRACT modulo (modulo)* ) ;
>
>
> To get rid of the unneeded tokens you can write something like:
>
> subtract
> :
>
>
>
>
> On Thu, Nov 15, 2012 at 11:56 PM, Jarrod Roberson <jarrod at vertigrated.com>wrote:
>
>> I asked this question on stackoverflow.com, it has many details and
>> graphics depicting what I am trying to do.
>>
>>
>> http://stackoverflow.com/questions/13409927/how-to-get-rid-of-useless-nodes-from-this-ast-tree
>>
>> Can anyone help me get rid of these intermediate nodes?
>>
>> --
>> Jarrod Roberson
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
> --
> Juancarlo *A?ez*
>



-- 
Juancarlo *A?ez*

From sam at tunnelvisionlabs.com  Fri Nov 16 05:45:07 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Fri, 16 Nov 2012 13:45:07 +0000
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B05985BCA@CH1PRD0811MB430.namprd08.prod.outlook.com>

Hi Jarrod,

I added a comment to the answer you posted at StackOverflow. The method you call the "alternate" method is the only proper solution posted on the entire page. When the AST operators (used for the "alternate" method) are able to produce the tree shape you want, then using rewrites shouldn't even cross your mind as an option. Find a way to make it work for you, perhaps by altering the display code to produce the labels you want instead of showing the operator text itself.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jarrod Roberson
Sent: Thursday, November 15, 2012 10:26 PM
To: Antlr Interest
Subject: [antlr-interest] How to get rid of useless nodes in AST?

I asked this question on stackoverflow.com, it has many details and
graphics depicting what I am trying to do.

http://stackoverflow.com/questions/13409927/how-to-get-rid-of-useless-nodes-from-this-ast-tree

Can anyone help me get rid of these intermediate nodes?

-- 
Jarrod Roberson

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From jimi at temporal-wave.com  Fri Nov 16 05:46:37 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Nov 2012 21:46:37 +0800
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
	<CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
Message-ID: <4370766862769798892@unknownmsgid>

Well it is all on the wiki and the free examples.

Why would an empty rule help here?

Jim

On Nov 16, 2012, at 21:17, "Juancarlo A?ez" <apalala at gmail.com> wrote:

> Jarrod,
>
> Jim is right, but he doesn't make much of an explanation:
>
> subtract : modulo ('-' modulo)* -> ^(SUBTRACT modulo (modulo)* ) ;
>
>
> To get rid of the unneeded tokens you can write something like:
>
> subtract
> :
>
>
>
>
> On Thu, Nov 15, 2012 at 11:56 PM, Jarrod Roberson <jarrod at vertigrated.com>wrote:
>
>> I asked this question on stackoverflow.com, it has many details and
>> graphics depicting what I am trying to do.
>>
>>
>> http://stackoverflow.com/questions/13409927/how-to-get-rid-of-useless-nodes-from-this-ast-tree
>>
>> Can anyone help me get rid of these intermediate nodes?
>>
>> --
>> Jarrod Roberson
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Fri Nov 16 05:47:43 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Nov 2012 21:47:43 +0800
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CAN1YFWvLuQyciO-9QD4-Qk8U765Z-RuPWFw5ifyTV3_R62_j3g@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
	<CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
	<CAN1YFWvLuQyciO-9QD4-Qk8U765Z-RuPWFw5ifyTV3_R62_j3g@mail.gmail.com>
Message-ID: <-882277254576411284@unknownmsgid>

Oh. I see. The auto construction operators are fine for these cases I think.

Jim

On Nov 16, 2012, at 21:20, "Juancarlo A?ez" <apalala at gmail.com> wrote:

> Sorry, fired early.
>
> subtract : modulo ('-' modulo)* -> ^(SUBTRACT modulo (modulo)* ) ;
>
>
> subtract
>    :
>    modulo
>    ( modul
>       ( '-' modulo)+  -> ^(SUBTRACT modulo+) // you don't need the
> parenthesis or the asterisk
>       |
>      () -> modulo
>    )
>   ;
>
> Cheeers,
>
> -- JA
>
> On Fri, Nov 16, 2012 at 8:47 AM, Juancarlo A?ez <apalala at gmail.com> wrote:
>
>> Jarrod,
>>
>> Jim is right, but he doesn't make much of an explanation:
>>
>> subtract : modulo ('-' modulo)* -> ^(SUBTRACT modulo (modulo)* ) ;
>>
>>
>> To get rid of the unneeded tokens you can write something like:
>>
>> subtract
>> :
>>
>>
>>
>>
>> On Thu, Nov 15, 2012 at 11:56 PM, Jarrod Roberson <jarrod at vertigrated.com>wrote:
>>
>>> I asked this question on stackoverflow.com, it has many details and
>>> graphics depicting what I am trying to do.
>>>
>>>
>>> http://stackoverflow.com/questions/13409927/how-to-get-rid-of-useless-nodes-from-this-ast-tree
>>>
>>> Can anyone help me get rid of these intermediate nodes?
>>>
>>> --
>>> Jarrod Roberson
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>>
>>
>> --
>> Juancarlo *A?ez*
>
>
>
> --
> Juancarlo *A?ez*
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From apalala at gmail.com  Fri Nov 16 06:16:42 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Fri, 16 Nov 2012 09:46:42 -0430
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <-882277254576411284@unknownmsgid>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
	<CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
	<CAN1YFWvLuQyciO-9QD4-Qk8U765Z-RuPWFw5ifyTV3_R62_j3g@mail.gmail.com>
	<-882277254576411284@unknownmsgid>
Message-ID: <CAN1YFWthTWfRMbwvVd9tutz2qpvoDdbvUgGGkTBhsiwzLmS7Rw@mail.gmail.com>

Jim,

Oh. I see. The auto construction operators are fine for these cases I think.
>

What happens is that the auto-construction operators are "a kind of magic".

Explicit is better than implicit.

import this

-- 
Juancarlo *A?ez*

From jarrod at vertigrated.com  Fri Nov 16 07:10:32 2012
From: jarrod at vertigrated.com (Jarrod Roberson)
Date: Fri, 16 Nov 2012 10:10:32 -0500
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CAN1YFWthTWfRMbwvVd9tutz2qpvoDdbvUgGGkTBhsiwzLmS7Rw@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
	<CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
	<CAN1YFWvLuQyciO-9QD4-Qk8U765Z-RuPWFw5ifyTV3_R62_j3g@mail.gmail.com>
	<-882277254576411284@unknownmsgid>
	<CAN1YFWthTWfRMbwvVd9tutz2qpvoDdbvUgGGkTBhsiwzLmS7Rw@mail.gmail.com>
Message-ID: <CANV=aGDk5ALN5KbeCVa0CGA3GM=nCFTZ5vu+T=Go19+usOvAhw@mail.gmail.com>

thanks for everyones input, I am learning more and more about ANTLR the
more questions I ask.


On Fri, Nov 16, 2012 at 9:16 AM, Juancarlo A?ez <apalala at gmail.com> wrote:

> Jim,
>
>
> Oh. I see. The auto construction operators are fine for these cases I
>> think.
>>
>
> What happens is that the auto-construction operators are "a kind of magic".
>
> Explicit is better than implicit.
>
> import this
>
> --
> Juancarlo *A?ez*
>



-- 
Jarrod Roberson
678.551.2852

From jimi at temporal-wave.com  Fri Nov 16 07:42:20 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Nov 2012 23:42:20 +0800
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <CAN1YFWthTWfRMbwvVd9tutz2qpvoDdbvUgGGkTBhsiwzLmS7Rw@mail.gmail.com>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
	<CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
	<CAN1YFWvLuQyciO-9QD4-Qk8U765Z-RuPWFw5ifyTV3_R62_j3g@mail.gmail.com>
	<-882277254576411284@unknownmsgid>
	<CAN1YFWthTWfRMbwvVd9tutz2qpvoDdbvUgGGkTBhsiwzLmS7Rw@mail.gmail.com>
Message-ID: <-2098542657907041430@unknownmsgid>

I don't think so. Tree construction operators are just as explicit, less
verbose and in these kinds of cases, perfectly fine. They are less verbose
and so you can see the wood in the trees. But whatever floats your boat :)

There's way too much information to decode the matrix. All I see is blond,
brunette...

Jim

On Nov 16, 2012, at 22:17, "Juancarlo A?ez" <apalala at gmail.com> wrote:

Jim,

Oh. I see. The auto construction operators are fine for these cases I think.
>

What happens is that the auto-construction operators are "a kind of magic".

Explicit is better than implicit.

import this

-- 
Juancarlo *A?ez*

From apalala at gmail.com  Fri Nov 16 07:45:38 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Fri, 16 Nov 2012 11:15:38 -0430
Subject: [antlr-interest] How to get rid of useless nodes in AST?
In-Reply-To: <-2098542657907041430@unknownmsgid>
References: <CANV=aGB5pyV4NT3sNFGwampha2TUoohRb1QSqpsKUD1aDBxoRg@mail.gmail.com>
	<CAN1YFWtM8S-q2pjNGcMNz9pm-HbJvRwNVK8-YJHBN366b7wq7g@mail.gmail.com>
	<CAN1YFWvLuQyciO-9QD4-Qk8U765Z-RuPWFw5ifyTV3_R62_j3g@mail.gmail.com>
	<-882277254576411284@unknownmsgid>
	<CAN1YFWthTWfRMbwvVd9tutz2qpvoDdbvUgGGkTBhsiwzLmS7Rw@mail.gmail.com>
	<-2098542657907041430@unknownmsgid>
Message-ID: <CAN1YFWvwZO-Mnc2i=TATjrBCawx0SHxDJ4K=kFENgc7J5gmWtw@mail.gmail.com>

Jim,

On Fri, Nov 16, 2012 at 11:12 AM, Jim Idle <jimi at temporal-wave.com> wrote:

> There's way too much information to decode the matrix. All I see is blond,
> brunette...
>

LOL! That's a keeper!

-- 
Juancarlo *A?ez*

From huhlig at uhlisys.com  Fri Nov 16 17:15:11 2012
From: huhlig at uhlisys.com (Hans Uhlig)
Date: Fri, 16 Nov 2012 17:15:11 -0800
Subject: [antlr-interest] TestRig Via Ant
Message-ID: <CAD63Ac6a-gu-50vMGbkc1Qi_mya7b-d201RMZox=WOQirKf0Gg@mail.gmail.com>

Source: https://github.com/huhlig/Essex

I am attempting to run Antlr v4 via Ant
Script<https://github.com/huhlig/Essex/blob/master/build.xml#L62> and
am getting a NoSuchMethodException due to the Generated Parser not
containing a Constructor that takes a org.antlr.v4.runtime.CharStream.
Which logically is part of the lexer. If I point it to the lexer, it tries
to append Parser to the back and I end up with LexerParser. How should I be
calling testrig for this kind of setup?

     [java] Exception in thread "main" java.lang.NoSuchMethodException:
com.uhlisys.essex.antlr.EssexParser.<init>(org.antlr.v4.runtime.CharStream)
     [java]     at java.lang.Class.getConstructor0(Class.java:2721)
     [java]     at java.lang.Class.getConstructor(Class.java:1674)
     [java]     at org.antlr.v4.runtime.misc.TestRig.main(TestRig.java:155)

From gwlist at grahamwideman.com  Fri Nov 16 17:35:07 2012
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Fri, 16 Nov 2012 17:35:07 -0800
Subject: [antlr-interest] TestRig Via Ant
In-Reply-To: <CAD63Ac6a-gu-50vMGbkc1Qi_mya7b-d201RMZox=WOQirKf0Gg@mail.g
	mail.com>
References: <CAD63Ac6a-gu-50vMGbkc1Qi_mya7b-d201RMZox=WOQirKf0Gg@mail.gmail.com>
Message-ID: <20121117013508.GJUQ24333.fed1rmfepo203.cox.net@fed1rmimpo210>

Hi Hans,

Not a direct answer, but this recent thread on the antlr-interest list might be of interest:

TestRig: use with package-ized lexer/parser?
Several messages 11-11 through 11-12

Hope that helps.

-- Graham


At 11/16/2012 05:15 PM, Hans Uhlig wrote:
>Source: https://github.com/huhlig/Essex
>
>I am attempting to run Antlr v4 via Ant
>Script<https://github.com/huhlig/Essex/blob/master/build.xml#L62> and
>am getting a NoSuchMethodException due to the Generated Parser not
>containing a Constructor that takes a org.antlr.v4.runtime.CharStream.
>Which logically is part of the lexer. If I point it to the lexer, it tries
>to append Parser to the back and I end up with LexerParser. How should I be
>calling testrig for this kind of setup?
>
>     [java] Exception in thread "main" java.lang.NoSuchMethodException:
>com.uhlisys.essex.antlr.EssexParser.<init>(org.antlr.v4.runtime.CharStream)
>     [java]     at java.lang.Class.getConstructor0(Class.java:2721)
>     [java]     at java.lang.Class.getConstructor(Class.java:1674)
>     [java]     at org.antlr.v4.runtime.misc.TestRig.main(TestRig.java:155)
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Nov 17 08:49:25 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 17 Nov 2012 08:49:25 -0800
Subject: [antlr-interest] TestRig Via Ant
In-Reply-To: <CAD63Ac6a-gu-50vMGbkc1Qi_mya7b-d201RMZox=WOQirKf0Gg@mail.gmail.com>
References: <CAD63Ac6a-gu-50vMGbkc1Qi_mya7b-d201RMZox=WOQirKf0Gg@mail.gmail.com>
Message-ID: <32A309B8-E86C-4592-A85D-10E485EF9857@cs.usfca.edu>

Sounds like a rebuild of EssexParser is needed or check you have latest 4.0b3 runtime etc?
T
On Nov 16, 2012, at 5:15 PM, Hans Uhlig wrote:

> Source: https://github.com/huhlig/Essex
> 
> I am attempting to run Antlr v4 via Ant
> Script<https://github.com/huhlig/Essex/blob/master/build.xml#L62> and
> am getting a NoSuchMethodException due to the Generated Parser not
> containing a Constructor that takes a org.antlr.v4.runtime.CharStream.
> Which logically is part of the lexer. If I point it to the lexer, it tries
> to append Parser to the back and I end up with LexerParser. How should I be
> calling testrig for this kind of setup?
> 
>     [java] Exception in thread "main" java.lang.NoSuchMethodException:
> com.uhlisys.essex.antlr.EssexParser.<init>(org.antlr.v4.runtime.CharStream)
>     [java]     at java.lang.Class.getConstructor0(Class.java:2721)
>     [java]     at java.lang.Class.getConstructor(Class.java:1674)
>     [java]     at org.antlr.v4.runtime.misc.TestRig.main(TestRig.java:155)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From dkorz at xovertime.com  Sat Nov 17 15:28:40 2012
From: dkorz at xovertime.com (David Korz)
Date: Sat, 17 Nov 2012 23:28:40 +0000
Subject: [antlr-interest] JavaScript target support?
Message-ID: <81B053DE0FD8E741914DC5E5BEEF27ED0C529D57@SN2PRD0710MB383.namprd07.prod.outlook.com>

I'm looking for guidance on using antlr with the JavaScript target. Is there a release that's production ready? Is JavaScript a supported target?

Running the 3.4 version on the sample T.g grammar generates many error messages and unusable *.js files. The 3.3 jar runs cleanly and generates code, although I haven't tried it. 3.4 is over a year and 1/2 old and 3.3 is older. I found references to these problems on the web but it appears they never were fixed which leads me to believe this is not actively maintained.

I found the 3.4.1 snapshot jar but that's missing the manifest so it doesn't run at all. The github source refers to 3.5 but it appears that has never been released and it's not clear it will be. I could make the effort to setup the development environment and build from source but I haven't been a Java developer in years so I'd like some confirmation this is worth the effort.

I also see that antlr 4 is near release which might be better to go with (I won't be in production myself for 2-3 months) but again I wonder if the JavaScript target is supported.

Any advice is appreciated!


From apalala at gmail.com  Sat Nov 17 15:40:59 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Sat, 17 Nov 2012 19:10:59 -0430
Subject: [antlr-interest] JavaScript target support?
In-Reply-To: <81B053DE0FD8E741914DC5E5BEEF27ED0C529D57@SN2PRD0710MB383.namprd07.prod.outlook.com>
References: <81B053DE0FD8E741914DC5E5BEEF27ED0C529D57@SN2PRD0710MB383.namprd07.prod.outlook.com>
Message-ID: <CAN1YFWt07LkNs=9YZGB_4e0K+T2u_HF0-j_ecr+dKKYcshb5Rg@mail.gmail.com>

David,

I, too, have been thinking about the way to go regarding the current state
of ANTLR.

Have you taken a look at PEGjs? http://pegjs.majda.cz/

If you're targeting JavaScript, I can't think of a reason not to give that
a try.

Cheers,


On Sat, Nov 17, 2012 at 6:58 PM, David Korz <dkorz at xovertime.com> wrote:

> I'm looking for guidance on using antlr with the JavaScript target. Is
> there a release that's production ready? Is JavaScript a supported target?
>
> Running the 3.4 version on the sample T.g grammar generates many error
> messages and unusable *.js files. The 3.3 jar runs cleanly and generates
> code, although I haven't tried it. 3.4 is over a year and 1/2 old and 3.3
> is older. I found references to these problems on the web but it appears
> they never were fixed which leads me to believe this is not actively
> maintained.
>
> I found the 3.4.1 snapshot jar but that's missing the manifest so it
> doesn't run at all. The github source refers to 3.5 but it appears that has
> never been released and it's not clear it will be. I could make the effort
> to setup the development environment and build from source but I haven't
> been a Java developer in years so I'd like some confirmation this is worth
> the effort.
>
> I also see that antlr 4 is near release which might be better to go with
> (I won't be in production myself for 2-3 months) but again I wonder if the
> JavaScript target is supported.
>
> Any advice is appreciated!
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From parrt at cs.usfca.edu  Sat Nov 17 15:59:33 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 17 Nov 2012 15:59:33 -0800
Subject: [antlr-interest] TestRig: use with package-ized lexer/parser?
In-Reply-To: <20121112114355.LJZL7477.fed1rmfepo202.cox.net@fed1rmimpo110>
References: <20121112114355.LJZL7477.fed1rmfepo202.cox.net@fed1rmimpo110>
Message-ID: <B71F1F36-090C-4B40-B849-D222409F4888@cs.usfca.edu>

Hi. A couple of thoughts:

1. It standard practice to put "." first in the class path.
2. java -jar limits the path to only those things inside the jar I think.
3. It should be clear that antlr's jar must be in the CLASSPATH to pick up TestRig

I'll lookat TestRig and packages.

Ter
On Nov 12, 2012, at 3:43 AM, Graham Wideman wrote:

> Hi Terr and all,
> 
> Update:
> 
> I've solved half of the puzzle of TestRig's dynamic class loading, but I'm still interested in whether there's already an intended way to use TestRig with a grammar that specifies a package.
> 
> The part I solved is how TestRig manages to find default-package lexer and parser class files under normal conditions. The short version is that TestRig relies on there being a "dot" (current dir) in the CLASSPATH environment variable. But there are a number of correlated details/pitfalls.
> 
> The keys are:
> 
> 1) The user must invoke TestRig (runs grun shell/batch file) from the directory containing the lexer and parser class files, in such a way that TestRig (or my version TestRig2) sees that dir as the working dir. The subtle issue here is...
> 
> 2) TestRig's own jar file must be in the CLASSPATH, so that it can be invoked with a reference to the class to run:
>   java org.antlr.v4.runtime.misc.TestRig %*
> and NOT with the -jar option like this (with runnable class in the manifest):
>   java -jar "path-to-jarfile\TestRig2.jar"   %*
> ... as this latter apparently changes the working directory.
> 
> 3) The current working dir (".") must be included in the CLASSPATH (environment variable) that TestRig sees. (Note: the class loader for files does not treat the current working directory as an assumed place to look for classes. It only looks in cwd if there's a dot in CLASSPATH).
> 
> The appropriate CLASSPATH (including TestRig and dot can be set up in grun shell/batch file). However...
> 
> 4) When debugging in NetBeans, I didn't find a way to set the debug/run CLASSPATH to include the current working dir (though there is a setting for current working dir itself).  One work-around is to add the desired directory (the one containing the lexer and parser class) as a "Library" in Netbeans.  Unfortunately there doesn't seem to be a way to set "." as a Library.
> 
> 5) It's perhaps obvious, but the package name for a custom version of TestRig is not salient to finding the lexer/parser classes (though of course invocation of custom TestRig does have to refer to the custom package name).
> 
> (And by way of leaving clues: I wanted to look at the ClassLoader search algorithm, but the JRE 7 source from Oracle manages to omit crucial sun.misc.URLClassPath. However, more-comprehensive source is available here: http://jdk7src.sourceforge.net/)
> 
> ------
> 
> OK, so now I can build and debug my own version of TestRig, and unless someone has an alternative bright idea, I hope to explore adding a command-line option to specify a package name for the grammar.
> 
> -- Graham 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Sat Nov 17 16:07:23 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 17 Nov 2012 16:07:23 -0800
Subject: [antlr-interest] TestRig: use with package-ized lexer/parser?
In-Reply-To: <20121113013343.PHSO32719.fed1rmfepo102.cox.net@fed1rmimpo110>
References: <20121112050402.VKTG7477.fed1rmfepo202.cox.net@fed1rmimpo209>
	<CD2B7D19-6128-411F-9DC4-151417E7F13F@cs.usfca.edu>
	<20121113013343.PHSO32719.fed1rmfepo102.cox.net@fed1rmimpo110>
Message-ID: <813BF26C-12D0-48E9-A16D-3FC833F7205D@cs.usfca.edu>

Hi. it works for me:

$ cat foo/O.g4
grammar O;

a : ID+ ;

ID : [a-z]+ ;
WS : [ \r\t\n]+ -> skip ;
$ antlr4 -package foo foo/O.g4
$ javac -d . foo/O*.java
$ grun foo.O a -tree
x y z
(a x y z)

Ter

On Nov 12, 2012, at 5:33 PM, graham wideman wrote:

> At 11/12/2012 10:53 AM, Terence Parr wrote:
>> I assume you have tried TestRig pack.Grammar?   I don't remember if I thought of this so it might not work but I can't see why not. Should be a trivial string concatenation fix. I will look at the other things as well.
> 
> Well, yes, I did go down that path (so to speak) unsuccessfully, but as I now learn, I missed a trick.  
> 
> So, here are the details on how to exercise package-ized ANTLR grammars with TestRig as currently designed.
> 
> 1. Class directory structure must correspond to package
> --------------------------------------------------------
> If the grammar (mygrammar) specifies a package (let's say com.abc.myparser), then you must arrange that the compiled class files (mygrammarLexer.class and friends) wind up in a directory tree that corresponds to the package. So something like (in NetBeans):
> 
>  [MyProject]/build/classes/com/abc/myparser/mygrammarLexer.class etc
> 
> [see note A]
> 
> 2. cd to _root_ of classes
> --------------------------
> Before running TestRig (or grun) on this from the command line, you must first cd to the _root_ of that class tree:
>  [MyProject]/build/classes
> 
> ... so that java runtime classloader can find the class in question from dot (cwd) using the classname com.abc.myparser.mygrammarLexer .
> 
> 3. Specify grammar name qualified by package
> --------------------------------------------
> In the TestRig (or grun) command line, you have to specify the grammar name qualified by the package name, for example:
> 
>  grun com.abc.myparser.mygrammar startelement -gui otherargs
> 
> [See note B]
> 
> Other notes:
> ------------
> A) This probably requires that, upstream, you have ANTLR generate the java source files in a similarly appropriate source directory structure -- ANTLR itself doesn't create or require package-coordinated directories when generating the lexer/parser code.  While ANTLR and javac can be used with simple commands assuming default package, once non-default packages become involved one probably needs a build system or IDE to automate the coordination of packages and directories.
> 
> B) Of course, since you have to set the cwd to the classes root for TestRig's benefit, you probably have to adjust the argument that specifies the location of input files.
> 
> C) An IDE issue:  When working on a custom version of TestRig in NetBeans, and attempting to run or debug it from the IDE, I still haven't found a good way to add "current dir" to the runtime classpath.  You can add an explicit dir to the Libraries list, but that's a poor substitute, so not a final answer, IMO.  (This is only an issue if you're trying to work on TestRig with its dynamic class loading, not a general problem with ANTLR and packages.)
> 
> Hope that helps others.
> 
> -- Graham
> 
> 
> 
> 
> 
> 


From martin.danjou14 at gmail.com  Sat Nov 17 16:54:46 2012
From: martin.danjou14 at gmail.com (Martin d'Anjou)
Date: Sat, 17 Nov 2012 19:54:46 -0500
Subject: [antlr-interest] How to do preprocessing in antlr v4?
Message-ID: <50A831D6.80908@gmail.com>

Hello,

What is the right approach to implement preprocessor directives 
(#define, #undef, #ifdef,, #ifndef, #if, #elsif, #else, #endif, 
#include, and user defined macros)  in Antlr v4?

I would find it a waste to write a separate preprocessor to tokenize the 
input stream and resolve the directives and macros (and their 
parameters), just to write the token stream back to a file, then 
retokenize with antlr... It looks to me that preprocessor does almost 
the same work as the lexer.

Macro parameters are the reason why I want to tokenize the input to the 
preprocessor. So I want lexer -> preprocessor -> parser.

Thanks,
Martin


From dkorz at xovertime.com  Sat Nov 17 16:52:20 2012
From: dkorz at xovertime.com (David Korz)
Date: Sun, 18 Nov 2012 00:52:20 +0000
Subject: [antlr-interest] JavaScript target support?
In-Reply-To: <CAN1YFWt07LkNs=9YZGB_4e0K+T2u_HF0-j_ecr+dKKYcshb5Rg@mail.gmail.com>
Message-ID: <81B053DE0FD8E741914DC5E5BEEF27ED0C529DFD@SN2PRD0710MB383.namprd07.prod.outlook.com>

Yes, I did come across it. It's written in JS and the source is being maintained but the documentation is sparse so I couldn't figure out how to begin (as opposed to antlr which has a whole book). I'll clone the repo and take a deeper look at it.

On 11/17/12 3:40 PM, "Juancarlo A?ez" <apalala at gmail.com<mailto:apalala at gmail.com>> wrote:

David,

I, too, have been thinking about the way to go regarding the current state of ANTLR.

Have you taken a look at PEGjs? http://pegjs.majda.cz/

If you're targeting JavaScript, I can't think of a reason not to give that a try.

Cheers,


On Sat, Nov 17, 2012 at 6:58 PM, David Korz <dkorz at xovertime.com<mailto:dkorz at xovertime.com>> wrote:
I'm looking for guidance on using antlr with the JavaScript target. Is there a release that's production ready? Is JavaScript a supported target?

Running the 3.4 version on the sample T.g grammar generates many error messages and unusable *.js files. The 3.3 jar runs cleanly and generates code, although I haven't tried it. 3.4 is over a year and 1/2 old and 3.3 is older. I found references to these problems on the web but it appears they never were fixed which leads me to believe this is not actively maintained.

I found the 3.4.1 snapshot jar but that's missing the manifest so it doesn't run at all. The github source refers to 3.5 but it appears that has never been released and it's not clear it will be. I could make the effort to setup the development environment and build from source but I haven't been a Java developer in years so I'd like some confirmation this is worth the effort.

I also see that antlr 4 is near release which might be better to go with (I won't be in production myself for 2-3 months) but again I wonder if the JavaScript target is supported.

Any advice is appreciated!


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



--
Juancarlo A?ez

From bkaiflin.ruby at gmail.com  Sun Nov 18 00:45:03 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sun, 18 Nov 2012 09:45:03 +0100
Subject: [antlr-interest] JavaScript target support?
In-Reply-To: <81B053DE0FD8E741914DC5E5BEEF27ED0C529D57@SN2PRD0710MB383.namprd07.prod.outlook.com>
References: <81B053DE0FD8E741914DC5E5BEEF27ED0C529D57@SN2PRD0710MB383.namprd07.prod.outlook.com>
Message-ID: <CAF9KzRMSMe7sEm8WjkBZW7x6b6o8Z6Jd=UikgEM=hF8zGj_tkQ@mail.gmail.com>

Hi,

to start with v4, have a look here :
http://www.antlr.org/pipermail/antlr-interest/2012-November/045652.html

It IS better to go with ! To convince you :)
http://www.antlr.org/pipermail/antlr-interest/2012-November/045629.html

HTH
Bernard

2012/11/18 David Korz <dkorz at xovertime.com>

>
> I also see that antlr 4 is near release which might be better to go with

From mike at lischke-online.de  Sun Nov 18 03:18:19 2012
From: mike at lischke-online.de (Mike Lischke)
Date: Sun, 18 Nov 2012 12:18:19 +0100
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <50A831D6.80908@gmail.com>
References: <50A831D6.80908@gmail.com>
Message-ID: <0F7FBC97-2F25-42EF-A6C3-B36F0B6EA35A@lischke-online.de>


Hey Martin,

> What is the right approach to implement preprocessor directives 
> (#define, #undef, #ifdef,, #ifndef, #if, #elsif, #else, #endif, 
> #include, and user defined macros)  in Antlr v4?
> 
> I would find it a waste to write a separate preprocessor to tokenize the 
> input stream and resolve the directives and macros (and their 
> parameters), just to write the token stream back to a file, then 
> retokenize with antlr... It looks to me that preprocessor does almost 
> the same work as the lexer.
> 
> Macro parameters are the reason why I want to tokenize the input to the 
> preprocessor. So I want lexer -> preprocessor -> parser.


In 2004 I created a project to convert Windows resource files (.rc, which share many aspects with C/C++ header files) to XML. I used ANTLR (2.7 at that time) to generate lexer and parsers (the project is completely written in Java). My approach was to use a special input stream that does the preprocessing, so there is no need to write the preprocessed input to a separate file. So the chain is input->preprocessor->lexer->parser.

More details here: http://www.antlr.org/pipermail/antlr-interest/2005-December/014767.html

Note: WebSVN is no longer available, however you can download a zip from the download section for all my projects: http://www.soft-gems.net/index.php/all-downloads (I have yet to create a dedicated document describing the converter).

HTH, 

Mike
-- 
www.soft-gems.net



From martin.danjou14 at gmail.com  Sun Nov 18 05:56:53 2012
From: martin.danjou14 at gmail.com (Martin d'Anjou)
Date: Sun, 18 Nov 2012 08:56:53 -0500
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <0F7FBC97-2F25-42EF-A6C3-B36F0B6EA35A@lischke-online.de>
References: <50A831D6.80908@gmail.com>
	<0F7FBC97-2F25-42EF-A6C3-B36F0B6EA35A@lischke-online.de>
Message-ID: <50A8E925.5040503@gmail.com>

On 12-11-18 06:18 AM, Mike Lischke wrote:
>
> In 2004 I created a project to convert Windows resource files (.rc, which share many aspects with C/C++ header files) to XML. I used ANTLR (2.7 at that time) to generate lexer and parsers (the project is completely written in Java). My approach was to use a special input stream that does the preprocessing, so there is no need to write the preprocessed input to a separate file. So the chain is input->preprocessor->lexer->parser.
>

Hello Mike,

I am studying your code. Thank you for sharing.

Martin

From bkaiflin.ruby at gmail.com  Sun Nov 18 06:51:27 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Sun, 18 Nov 2012 15:51:27 +0100
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <50A831D6.80908@gmail.com>
References: <50A831D6.80908@gmail.com>
Message-ID: <CAF9KzRMBYGpdguZL-GQ3qSojjkZ1j9WWEOicdCj3mEBdhAemNg@mail.gmail.com>

Hello Martin,

I suppose you want to parse a C program to extract information from macros.
So you have to write a grammar that recognizes C preprocessor #define and
ignores all other lines.

 It looks to me that preprocessor does almost the same work as the lexer.


The C preprocessor must certainly tokenize (lexer job) and then interpret
to do replacements, that is do some parsing job.
On the contrary an ANTLR lexer will only follow your lexer rules to
tokenize the input. If you have for example :

if_line
    :   '#' 'if' constant_expression
    |   '#' 'ifdef'  ID
    |   '#' 'ifndef' ID
    ;

and an input

#ifndef HAVE_STDLIB_H
char *getenv();
#endif

the generated lexer will crete the following tokens : T1='#', T2='ifndef',
T3=ID='HAVE_STDLIB', etc. Then the generated parser will match these tokens
with the third alternative of rule if_line .


I have just written a C grammar, but without preprocessor (I use gcc -E to
preprocess). As an exercise, I have written the following grammar, tested
only on a 1'200 lines program, that you can use as a starting point. Refine
pp_define and token_sequence depending on what you want to capture in
macros.

Having said that, if your need is doing some preprocessing before parsing
the C program, you would need a full C grammar combined with a full C
preprocessor, and maybe use the TokenStreamRewriter feature described in
paragraphs Rewriting the Input Stream on page 54 and Accessing Hidden
Channels on page 208 of the beta 3 book.

 HTH
Bernard


grammar Cmacros;

/* Process #define statements in a C file.
   TODO : develop token_sequence
*/

program : translation_unit ;

translation_unit
@init {System.out.println("Cmacros last update 1436");}
    :   ( '#' preprocessor
    |     ignore
    |     NL
        )+
    ;

preprocessor
    :   pp_define
    |   pp_ignore
    ;

pp_define
    :   'define' ID '(' ID ( ',' ID )* ')' token_sequence
    |   'define' ID token_sequence
    ;

pp_ignore
    :   ignore
    ;

token_sequence
    :   ignore
    ;

ignore
    :   ~NL+ NL
    ;

CHAR
    :   '\'' ( '\\'? . )+? '\'' ;

COMMENT
    :    '/*' .*? '*/' -> channel(HIDDEN)
    ;

HEXADECIMAL
    :   '0' [xX] [0-9a-fA-F]+
    ;

ID  :   ( ID_FIRST (ID_FIRST | DIGIT)* )
    ;

INT :   DIGIT+ ;

//NL  :   '\r'? '\n' -> channel(WHITESPACE) ;  // channel(1)
//NL  :   '\n' -> channel(HIDDEN) ;
NL  :   '\n' ;

SL_COMMENT
    :   '//' .*? '\n' -> channel(HIDDEN)
    ;

SPECIAL
    :   '+' | '-' | '*' | '/' | '%' | '&' | '|' | '(' | ')' | '{' | '}' |
'[' | ']'
    |   '^' | '!' | '<' | '>' | '=' | ',' | '.' | ';' | ':' | '?'
    ;

STRING
    :   '"' ( '\\'? . )*? '"' ;

WS  :   [ \t]+ -> channel(HIDDEN) ;

fragment DIGIT  : [0-9] ;

fragment ID_FIRST : LETTER | '_' ;

fragment LETTER : [a-zA-Z] ;


2012/11/18 Martin d'Anjou <martin.danjou14 at gmail.com>

> ...

What is the right approach to implement preprocessor directives ...  in
> Antlr v4?  ...
> Macro parameters are the reason why I want to tokenize the input to the
> preprocessor. So I want lexer -> preprocessor -> parser.
>
>

From rodedb at gmail.com  Sun Nov 18 09:46:28 2012
From: rodedb at gmail.com (Roded)
Date: Sun, 18 Nov 2012 19:46:28 +0200
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B059806BD@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
	<50A3E2EF.9040308@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0597F50F@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<50A42D13.9000205@certiv.net>
	<CAJSdnjL7kbzCd27QREggxNjX9himb=v0=ySTnNKW7uduhQaC7w@mail.gmail.com>
	<8802E2F086DC9648BD0585D82AC6377B059806BD@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <CAJSdnj+3yM6nONthp+=0LvLL2bhXSVX4fVULAv_ZCE4bWcmGXA@mail.gmail.com>

Thanks Sam.
Terence noted ANTLR 4 will be released by Christmas (
http://forums.pragprog.com/forums/206/topics/11231), will that include the
JavaScript target?

From sam at tunnelvisionlabs.com  Sun Nov 18 10:20:16 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Sun, 18 Nov 2012 18:20:16 +0000
Subject: [antlr-interest] Freemarker grammer w/ JavaScript target
In-Reply-To: <CAJSdnj+3yM6nONthp+=0LvLL2bhXSVX4fVULAv_ZCE4bWcmGXA@mail.gmail.com>
References: <CAJSdnjKAzwZnbp-pisy8qLN5DmSz0zJXZihcXeWnjyae39e5bA@mail.gmail.com>
	<50A3E2EF.9040308@certiv.net>
	<8802E2F086DC9648BD0585D82AC6377B0597F50F@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<50A42D13.9000205@certiv.net>
	<CAJSdnjL7kbzCd27QREggxNjX9himb=v0=ySTnNKW7uduhQaC7w@mail.gmail.com>
	<8802E2F086DC9648BD0585D82AC6377B059806BD@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<CAJSdnj+3yM6nONthp+=0LvLL2bhXSVX4fVULAv_ZCE4bWcmGXA@mail.gmail.com>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B059868C4@CH1PRD0811MB430.namprd08.prod.outlook.com>

On that timeline, no. I'm almost certain the only target that will be available at the initial release is the Java target. I'll start working on some of the other targets after that point since the runtime will be quite stabilized by then.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

From: Roded [mailto:rodedb at gmail.com]
Sent: Sunday, November 18, 2012 11:46 AM
To: Sam Harwell
Cc: Gerald Rosenberg; ANTLR-Interest Interest
Subject: Re: [antlr-interest] Freemarker grammer w/ JavaScript target

Thanks Sam.
Terence noted ANTLR 4 will be released by Christmas (http://forums.pragprog.com/forums/206/topics/11231), will that include the JavaScript target?

From dkorz at xovertime.com  Sun Nov 18 10:32:45 2012
From: dkorz at xovertime.com (David Korz)
Date: Sun, 18 Nov 2012 18:32:45 +0000
Subject: [antlr-interest] JavaScript target support?
In-Reply-To: <CAF9KzRMSMe7sEm8WjkBZW7x6b6o8Z6Jd=UikgEM=hF8zGj_tkQ@mail.gmail.com>
Message-ID: <81B053DE0FD8E741914DC5E5BEEF27ED0C52A2F6@SN2PRD0710MB383.namprd07.prod.outlook.com>

Well, it looks great and I'd try it but I cloned the github repo and it
appears the only target is Java. I don't know if there are "plugins" of
some sort planned for other targets but for now it looks like I have to
use something else for JavaScript.

On 11/18/12 12:45 AM, "Bernard Kaiflin" <bkaiflin.ruby at gmail.com> wrote:


Hi,

to start with v4, have a look here :
http://www.antlr.org/pipermail/antlr-interest/2012-November/045652.html
<http://www.antlr.org/pipermail/antlr-interest/2012-November/045652.html>

It IS better to go with ! To convince you :)
http://www.antlr.org/pipermail/antlr-interest/2012-November/045629.html

HTH
Bernard

2012/11/18 David Korz <dkorz at xovertime.com>


I also see that antlr 4 is near release which might be better to go with 


From thomas at ruschival.de  Sun Nov 18 13:54:33 2012
From: thomas at ruschival.de (Thomas Ruschival)
Date: Sun, 18 Nov 2012 17:54:33 -0400
Subject: [antlr-interest] how to skip/read next n Characters (n is read
 form input)
In-Reply-To: <75b5bd03f5c00663a504876bc6531b97@mail.gmail.com>
References: <75b5bd03f5c00663a504876bc6531b97@mail.gmail.com>
Message-ID: <50A95919.9050303@ruschival.de>

Hi Jim,
thanks for the hint about anlr.markmail.org, I wasn't aware of this
userfriendly interface!
For sure I am working my way through terence's book and the mailing list.

> - When you are new to the game, I suggest that you do not use
> 'literals' in your parser grammars.
I started off with a textbook approach defining all token-rules for the
lexer and used only tokens in the parser rules. (btw. The initial
grammar worked well)
for instance I had defined:
BOLD : 'b'  'C';  // Lexer ruler  
However since the lexer is greedy it will always generate a BOLD token
for the sequence 'bC'. Which is per-se not a problem until I was
confronted with the rule to recognize n following bytes (original post).

> - val=. In a parser will capture every token, not any character, hence
it is not usually useful
I know, my workaround was to only have characters as tokens, so every
token had the length of 1 character, to not mess up the counter in the
readNchars rule.

Terence shared an antlr 4 grammar example (Data.g4) I will look into it
but since for the  initial real-world problem I am bound to antlr v3
(can't use java 1.6) it serves only for my academic interest. (and
future projects)

Best regards
Thomas

From martin.danjou14 at gmail.com  Sun Nov 18 18:52:49 2012
From: martin.danjou14 at gmail.com (Martin d'Anjou)
Date: Sun, 18 Nov 2012 21:52:49 -0500
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <CAF9KzRMBYGpdguZL-GQ3qSojjkZ1j9WWEOicdCj3mEBdhAemNg@mail.gmail.com>
References: <50A831D6.80908@gmail.com>
	<CAF9KzRMBYGpdguZL-GQ3qSojjkZ1j9WWEOicdCj3mEBdhAemNg@mail.gmail.com>
Message-ID: <50A99F01.4050707@gmail.com>

On 12-11-18 09:51 AM, Bernard Kaiflin wrote:
>
> Having said that, if your need is doing some preprocessing before 
> parsing the C program, you would need a full C grammar combined with a 
> full C preprocessor, and maybe use the TokenStreamRewriter feature 
> described in paragraphs Rewriting the Input Stream on page 54 and 
> Accessing Hidden Channels on page 208 of the beta 3 book.
>

I have reached page 54 of the book (awesome book by the way), and had a 
peek at page 208. If I want to implement a preprocessor using the 
TokenStreamRewriter, I need the parser to call the listener when it 
reaches a rule in the parser, which is impossible because there are no 
preprocessor rules in the parser. So now I have to think about the other 
parts of the answers that you offered.

Thanks,
Martin


From wripley at WPI.EDU  Sun Nov 18 19:56:43 2012
From: wripley at WPI.EDU (Wesley Ripley)
Date: Sun, 18 Nov 2012 22:56:43 -0500
Subject: [antlr-interest] Parsing a Cucumber-like language in ANTLR
Message-ID: <CAN5fRXmvZm36EyyqcCGic95e0Tjw38p2YGkzOVh+YsO3YidZnA@mail.gmail.com>

Hello,
I am a student at Worcester Polytechnic Institute working on a project
where we are attempting to use ANTLR to write a Domain Specific Language.
If you know the testing tool Cucumber it has a very nice DSL for specifying
executable requirement specifications. Our language is similar in its
format but different enough that we can't just use Cucumber.

The problem I am having is in capturing muli-line blocks of text. So here
is a short example:

Description:
Multi line text goes here
to specifiy the description

Scenario:
Given size between 10 and 20
   And location is spread out
Then add 2 confidence

We want ANTLR to see the Description: keyword and know to capture
everything between that and the next keyword. But for other keywords like
scenario we actually want it to parse things inside to make sure it is in
the right format. I have had trouble getting the Lexer to turn the
multiline text into one token without it getting all of the text.

Thank you for your help, and let me know if you need more information or if
I have emailed to this to the wrong place
--
Wesley Ripley
Class of 2013
Computer Science Major

From parrt at cs.usfca.edu  Sun Nov 18 21:40:34 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Nov 2012 21:40:34 -0800
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <50A99F01.4050707@gmail.com>
References: <50A831D6.80908@gmail.com>
	<CAF9KzRMBYGpdguZL-GQ3qSojjkZ1j9WWEOicdCj3mEBdhAemNg@mail.gmail.com>
	<50A99F01.4050707@gmail.com>
Message-ID: <75B54615-92C6-458F-B2FF-21677B8F3699@cs.usfca.edu>

Hi. in the extras code dir from book you'll find a C preprocessor like sample.
Ter
On Nov 18, 2012, at 6:52 PM, Martin d'Anjou wrote:

> On 12-11-18 09:51 AM, Bernard Kaiflin wrote:
>> 
>> Having said that, if your need is doing some preprocessing before 
>> parsing the C program, you would need a full C grammar combined with a 
>> full C preprocessor, and maybe use the TokenStreamRewriter feature 
>> described in paragraphs Rewriting the Input Stream on page 54 and 
>> Accessing Hidden Channels on page 208 of the beta 3 book.
>> 
> 
> I have reached page 54 of the book (awesome book by the way), and had a 
> peek at page 208. If I want to implement a preprocessor using the 
> TokenStreamRewriter, I need the parser to call the listener when it 
> reaches a rule in the parser, which is impossible because there are no 
> preprocessor rules in the parser. So now I have to think about the other 
> parts of the answers that you offered.
> 
> Thanks,
> Martin
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From douglasgodfrey at gmail.com  Mon Nov 19 05:26:23 2012
From: douglasgodfrey at gmail.com (Douglas Godfrey)
Date: Mon, 19 Nov 2012 08:26:23 -0500
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <50A99F01.4050707@gmail.com>
Message-ID: <CCCF9946.21957%douglasgodfrey@gmail.com>

I implemented a C pre-processor for a C like language entirely in the
Lexer. You can too if you want to.

1)	#define	was limited to use in the preprocessor and to setting the text
of identifiers.
2)	#define values were stored in a map<string,string>
3)	#define macros were implemented by a macro re-write rule that generated
and included a memory char stream
4)	text concatenation and length attributes ware not supported but they
could have been.
5)		#include was implemented by a nested char stream.
6)	#if, #elif, #else, #ifdef, #ifndef all set the top of a boolean stack
to the condition value,
	if any of the values on the stack are false then the channel for
subsequent tokens was set to $hidden.

All preprocessor actions were handled directly in the lexer without
needing to emit a text stream.
The parser just sees the the resulting [non-hidden] tokens.



On 11/18/12 9:52 PM, "Martin d'Anjou" <martin.danjou14 at gmail.com> wrote:

>On 12-11-18 09:51 AM, Bernard Kaiflin wrote:
>>
>> Having said that, if your need is doing some preprocessing before
>> parsing the C program, you would need a full C grammar combined with a
>> full C preprocessor, and maybe use the TokenStreamRewriter feature
>> described in paragraphs Rewriting the Input Stream on page 54 and
>> Accessing Hidden Channels on page 208 of the beta 3 book.
>>
>
>I have reached page 54 of the book (awesome book by the way), and had a
>peek at page 208. If I want to implement a preprocessor using the
>TokenStreamRewriter, I need the parser to call the listener when it
>reaches a rule in the parser, which is impossible because there are no
>preprocessor rules in the parser. So now I have to think about the other
>parts of the answers that you offered.
>
>Thanks,
>Martin
>
>
>List: http://www.antlr.org/mailman/listinfo/antlr-interest
>Unsubscribe: 
>http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From alex.kostikov at gmail.com  Mon Nov 19 11:23:22 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Mon, 19 Nov 2012 11:23:22 -0800
Subject: [antlr-interest]  parsing just a subset of a grammar
Message-ID: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>

Hi,

I'm new to ANTLR and I seek for a good advice.

Here is my story. I'm parsing Cisco IOS config files. They are quite
loosely defined but actually I don't need to have whole the config
file parsed. I'm interested in just a subset of the config file (acl
rule below) and I don't really care about all other parts of the file
right now. Having said it, in the future I'll need to add other parts
as well (e.g. rule for interfaces definition) but again, I don't need
to have all of the config file parsed. I don't want to implement
complete Cisco IOS grammar since seams it would become a very hard
task indeed.

To ignore all not interesting parts of the config file I defined the
grammar this way:

/*
 * Parser Rules
 */

config: (acl | any)* EOF;
any: (ID|INT)* EOL;
acl: 'ip' 'access-list' 'extended'? ID EOL (remark | rule)+ EOF;
remark: (index)? 'remark' (~EOL)* EOL;
rule: (index)? verb protocol source source_port destination
destination_port flag? log? EOL;

// Not so interesting parser rules here...

/*
 * Lexer Rules
 */

fragment
CHAR: 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%';
fragment
NUMBER: '0'..'9';
INT: NUMBER+;
ID: CHAR (CHAR | NUMBER)*;
EOL: ('\r' | '\n')+;
WS: (' ' | '\t') { $channel=HIDDEN; };
COMMENT: '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; };
ILLEGAL: .;

It turns out ANTLR doesn't behave the way I expected =) What I wanted
is for ANTLR to parse the following line "no ip bootp server" via
'any' rule but ANTLR finds 'ip' token in the line and treats the line
as not correct 'acl' rule. Specifying syntactic predicate "config:
(('ip' 'access-list') => acl | any)* EOF" only makes things worse
judging by ANTLRWorks output - parser stops almost immediately with an
unrecoverable error.

My question is - is there a way to achieve the kind of filtering I'm
talking about (parse only 'acl', ignore anything else) via ANTLR
grammar? What should I use? Syntactic predicate? Several-pass parsing?
Custom lexer (how do I even start implementing such beast?)? Parse out
all interesting sections from a file via regex before supplying them
to ANTLR grammar that is only ACL-oriented (at least I know how to
implement this last option)?

-- Alexander

From bkaiflin.ruby at gmail.com  Mon Nov 19 11:35:31 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Mon, 19 Nov 2012 20:35:31 +0100
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <75B54615-92C6-458F-B2FF-21677B8F3699@cs.usfca.edu>
References: <50A831D6.80908@gmail.com>
	<CAF9KzRMBYGpdguZL-GQ3qSojjkZ1j9WWEOicdCj3mEBdhAemNg@mail.gmail.com>
	<50A99F01.4050707@gmail.com>
	<75B54615-92C6-458F-B2FF-21677B8F3699@cs.usfca.edu>
Message-ID: <CAF9KzRP5ZGvABX1O1qsX1JqugPvaCWwtPZz=XKKMZJ3e62GdNw@mail.gmail.com>

Hi,
great, the CHUNK token. I had always trouble when I wanted to ignore (part
of) lines.
The code/extras/CPPBaseLexer.g4 and Co. is worth studying. Programming this
way gives great flexibility and power.

Nevertheless I find it more difficult to work in the lexer than in the
parser. It took me a couple of hours until I obtained what I wanted.
One token too much, as in CHUNK : ~'#'+ '\n' ; and it fails with a # inside
a string, one token less, as in
'#define' ID REPLACE and you get a token recognition error at: '#define '.
Without adding ~'d' in OTHER_CMD, all preprocessor statements were captured
by OTHER_CMD. It gives a feeling of fragility.

Following is the grammar rewritten in "lexer style", a sample input and
execution.

grammar Cmacros_d;

/* Process #define statements in a C file.
   TODO : extract information from DEFINE_PARAM.
*/

program
@init {System.out.println("Cmacros_d last update 2013");}
    :   ( DEFINE_PARAM
               {System.out.print(">>>macro(parameters) " +
$DEFINE_PARAM.text);}
    |     DEFINE_SIMPLE
               {System.out.print(">>>simple macro : " +
$DEFINE_SIMPLE.text);}
    |     OTHER_CMD
    |     CHUNK
        )+
    ;

DEFINE_PARAM
    :   '#define' WS ID '(' WS? ID ( WS? ',' WS? ID )*  WS? ')' REPLACE
    ;

DEFINE_SIMPLE
    :   '#define' WS ID WS REPLACE
    ;

OTHER_CMD
    :   '#' ~'d' ~[\r\n]* '\r'? '\n' ;// can't use .*; scarfs \n\n after
include

WS  :   [ \t]+ -> channel(HIDDEN) ;

CHUNK : ~'#'+ ; // anything else

fragment ID       : ( ID_FIRST (ID_FIRST | DIGIT)* ) ;
fragment DIGIT    : [0-9] ;
fragment ID_FIRST : LETTER | '_' ;
fragment LETTER   : [a-zA-Z] ;
fragment REPLACE  : ~[\r\n]* '\r'? '\n' ;


static char *usage_msg[] = {"-x[directory]   strip off text before #!ruby
line ..."};
#ifndef CharNext
#define CharNext(p) ((p) + mblen(p, RUBY_MBCHAR_MAXSIZE))
#define CharNext    simple replacement
#endif
#define BITSTACK_PUSH(stack, n) (stack = (stack<<1)|((n)&1))


$ grun Cmacros_d program -tokens -diagnostics tcpreproc.c
[@0,0:66='static char *usage_msg[] = {"-x[directory]   strip off text
before ',<5>,1:0]
[@1,67:85='#!ruby line ..."};\n',<3>,1:67]
[@2,86:102='#ifndef CharNext\n',<3>,2:0]
[@3,103:160='#define CharNext(p) ((p) + mblen(p,
RUBY_MBCHAR_MAXSIZE))\n',<1>,3:0]
[@4,161:199='#define CharNext    simple replacement\n',<2>,4:0]
[@5,200:206='#endif\n',<3>,5:0]
[@6,207:267='#define BITSTACK_PUSH(stack, n)\t(stack =
(stack<<1)|((n)&1))\n',<1>,6:0]
[@7,268:267='<EOF>',<-1>,7:61]
Cmacros_d last update 2013
>>>macro(parameters) #define CharNext(p) ((p) + mblen(p,
RUBY_MBCHAR_MAXSIZE))
>>>simple macro : #define CharNext    simple replacement
>>>macro(parameters) #define BITSTACK_PUSH(stack, n) (stack =
(stack<<1)|((n)&1))



2012/11/19 Terence Parr <parrt at cs.usfca.edu>

> Hi. in the extras code dir from book you'll find a C preprocessor like
> sample.
> Ter

From ibre5041 at ibrezina.net  Mon Nov 19 12:28:45 2012
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Mon, 19 Nov 2012 21:28:45 +0100
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
Message-ID: <50AA967D.10309@ibrezina.net>

On 11/19/2012 08:23 PM, Alexander Kostikov wrote:
> Hi,
>
> I'm new to ANTLR and I seek for a good advice.
>
> Here is my story. I'm parsing Cisco IOS config files. They are quite
> loosely defined but actually I don't need to have whole the config
> file parsed. I'm interested in just a subset of the config file (acl
> rule below) and I don't really care about all other parts of the file
> right now. Having said it, in the future I'll need to add other parts
> as well (e.g. rule for interfaces definition) but again, I don't need
> to have all of the config file parsed. I don't want to implement
> complete Cisco IOS grammar since seams it would become a very hard
> task indeed.
>
> To ignore all not interesting parts of the config file I defined the
> grammar this way:
>
> /*
>   * Parser Rules
>   */
>
> config: (acl | any)* EOF;
> any: (ID|INT)* EOL;
> acl: 'ip' 'access-list' 'extended'? ID EOL (remark | rule)+ EOF;
> remark: (index)? 'remark' (~EOL)* EOL;
> rule: (index)? verb protocol source source_port destination
> destination_port flag? log? EOL;
>
> // Not so interesting parser rules here...
>
> /*
>   * Lexer Rules
>   */
>
> fragment
> CHAR: 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%';
> fragment
> NUMBER: '0'..'9';
> INT: NUMBER+;
> ID: CHAR (CHAR | NUMBER)*;
> EOL: ('\r' | '\n')+;
> WS: (' ' | '\t') { $channel=HIDDEN; };
> COMMENT: '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; };
> ILLEGAL: .;
>
> It turns out ANTLR doesn't behave the way I expected =) What I wanted
> is for ANTLR to parse the following line "no ip bootp server" via
> 'any' rule but ANTLR finds 'ip' token in the line and treats the line
> as not correct 'acl' rule. Specifying syntactic predicate "config:
> (('ip' 'access-list') => acl | any)* EOF"nly makes things worse
> judging by ANTLRWorks output - parser stops almost immediately with an
> unrecoverable error.
>
> My question is - is there a way to achieve the kind of filtering I'm
> talking about (parse only 'acl', ignore anything else) via ANTLR
> grammar? What should I use? Syntactic predicate? Several-pass parsing?
> Custom lexer (how do I even start implementing such beast?)? Parse out
> all interesting sections from a file via regex before supplying themuse
> to ANTLR grammar that is only ACL-oriented (at least I know how to
> implement this last option)?
>
> -- Alexander
>
>

Maybe this is not what you want. Look at the PLSQL grammar.
For embedded SQL it uses such a trick:

SEMI: ';' ;

swallow_to_semi :
         ~( SEMI )+
     ;

select: 'SELECT' swallow_to_semi SEMI;

By using this you can "bypass" all the sections you're not interested in.

Ivan
PS: be warned, negation can make the grammar very complex if you
use many lexer tokens.



From bkaiflin.ruby at gmail.com  Mon Nov 19 15:05:13 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Tue, 20 Nov 2012 00:05:13 +0100
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
Message-ID: <CAF9KzRNXhfreRei_AEaPbBHoQY_X7xT400x=OUJMhXJmkGn4dw@mail.gmail.com>

Hi,
welcome in the club "ANTLR doesn't behave the way I expected" :D

As Ivan says in the PS, negation is difficult to manipulate, as well as
ignoring portions of input. But possible in some circumstances, see CHUNK
in the thread containing
http://www.antlr.org/pipermail/antlr-interest/2012-November/045765.html

As I don't have the full grammar, I made a short version. Given the four
rules

any    : ( ID | INT )* EOL ;
acl    : 'ip' 'access-list' 'extended'? ID EOL ( remark | rule )+ EOF ;
remark : INT? 'remark' (~EOL)* EOL ;
rule   : INT? ID+ EOL ;

and the input

$ cat t.config
no ip bootp server
ip access-list xyz
abc def

$ echo $CLASSPATH
.:/usr/local/lib/antlr-3.4-complete-no-antlrv2.jar
$ java org.antlr.Tool -trace Cisco.g
$ java Test < t.config
enter ID n line=1:0
enter CHAR n line=1:0
exit CHAR o line=1:1
exit ID   line=1:2
enter config [@0,0:1='no',<7>,1:0]
Cisco last update 2127
enter any [@0,0:1='no',<7>,1:0]
enter WS   line=1:2
exit WS i line=1:3
enter T__14 i line=1:3
exit T__14   line=1:5
enter WS   line=1:5
exit WS b line=1:6
enter ID b line=1:6
enter CHAR b line=1:6
exit CHAR o line=1:7
exit ID   line=1:11
line 1:3 missing EOL at 'ip'
exit any [@2,3:4='ip',<14>,1:3]

I can see :
1) ID is built character by character, it would be better to group them as
in ID : ( 'a'..'z' | 'A'..'Z' | '_')+
2) rule any has been chosen, because it's the first (the other is rule)
that matches a line starting with an ID
3) the lexer consumes the token [@0,0:1='no',<7>,1:0] <7> is in my case the
type of ID, see the file <grammar name>.tokens for a list of token types
4) the lexer skips the white space and sees `ip`. As 'ip' appears as
implicit token in the parser rule acl, it has received it's own token type,
in this case T__14, so it is not an ID
5) I don't know why the lexer doesn't stop here and still reads the next
character, anyway the parser cannot continue with the loop ( ID | INT)* in
rule any, because T__14 is neither an ID nor an INT, it expects an EOL to
terminate the rule and it complains with "missing EOL"

exit any [@2,3:4='ip',<14>,1:3]
enter acl [@2,3:4='ip',<14>,1:3]
enter WS   line=1:11
exit WS s line=1:12
enter ID s line=1:12
enter CHAR s line=1:12
exit CHAR e line=1:13
exit ID
 line=1:18
line 1:6 missing 'access-list' at 'bootp'

6) Now the parser receives from the lexer T__14='ip', the second token in
the line "no ip bootp server", and naturally chooses the rule acl which
starts with 'ip'.
7) the lexer advances in the input, finds 'server', returns 'bootp' (which
has not been consumed yet) to the parser
8) the parser complains because it expects 'access-list' as the next token
in rule acl.


Now let's do a small change to accept ID and keywords like 'ip' in the rule
any :

grammar Cisco;

/* Parse Cisco config file. */

config
@init {System.out.println("Cisco last update 2320");}
    :   ( acl | any )* EOF
    ;

any :   ( id_or_keyword | INT )* EOL
               {System.out.print("--- any " + $any.text);}
    ;

acl :   IP 'access-list' 'extended'? ID EOL ( remark | rule )+ // EOF
already in config
               {System.out.print("--- acl " + $acl.text);}
    ;

remark
    :   INT? 'remark' (~EOL)* EOL
    ;

rule:   INT? ID+ EOL;

id_or_keyword
    :   ID | IP
    ;

IP  : 'ip' ; // before ID, or else 'ip' will be captured by ID and rule acl
will not match
ID  : ( LETTER | SPECIAL ) ( LETTER | SPECIAL | NUMBER )* ;
INT : NUMBER+ ;
EOL : ('\r' | '\n')+;
WS  : (' ' | '\t') { $channel=HIDDEN; };
COMMENT : '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; } ;
ILLEGAL : . ;
fragment LETTER  : 'a'..'z' | 'A'..'Z' ;
fragment SPECIAL : '_' | '-' | '.' | '+' | '/' | ':' | '%' ;
fragment NUMBER  : '0'..'9' ;

$ java Test < t.config
enter ID n line=1:0
exit ID   line=1:2
enter config [@0,0:1='no',<6>,1:0]
Cisco last update 2320
enter any [@0,0:1='no',<6>,1:0]
enter id_or_keyword [@0,0:1='no',<6>,1:0]
enter WS   line=1:2
...
enter id_or_keyword [@2,3:4='ip',<9>,1:3]
...
enter id_or_keyword [@4,6:10='bootp',<6>,1:6]
...
exit EOL i line=2:0
exit id_or_keyword [@7,18:18='\n',<5>,1:18]
enter IP i line=2:0
exit IP   line=2:2
--- any no ip bootp server
exit any [@8,19:20='ip',<9>,2:0]
enter WS   line=2:2
exit WS a line=2:3
enter T__14 a line=2:3
exit T__14   line=2:14
enter acl [@8,19:20='ip',<9>,2:0]
...
enter rule [@14,38:40='abc',<6>,3:0]
exit rule [@18,46:46='<EOF>',<-1>,4:0]
--- acl ip access-list xyz
abc def
exit acl [@18,46:46='<EOF>',<-1>,4:0]
exit config [@19,46:46='<EOF>',<-1>,4:0]

Looks better, as I expected :)

HTH
Bernard


2012/11/19 Alexander Kostikov <alex.kostikov at gmail.com>

>
> It turns out ANTLR doesn't behave the way I expected =) What I wanted
> is for ANTLR to parse the following line "no ip bootp server" via
> 'any' rule but ANTLR finds 'ip' token in the line and treats the line
> as not correct 'acl' rule. Specifying syntactic predicate "config:
> (('ip' 'access-list') => acl | any)* EOF" only makes things worse
> judging by ANTLRWorks output - parser stops almost immediately with an
> unrecoverable error.
>
> My question is - is there a way to achieve the kind of filtering I'm
> talking about (parse only 'acl', ignore anything else) via ANTLR
> grammar? What should I use? Syntactic predicate? Several-pass parsing?
> Custom lexer (how do I even start implementing such beast?)? Parse out
> all interesting sections from a file via regex before supplying them
> to ANTLR grammar that is only ACL-oriented (at least I know how to
> implement this last option)?
>
> -- Alexander
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Mon Nov 19 15:49:32 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 19 Nov 2012 15:49:32 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
Message-ID: <5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>

In the new v4 book and the v4 doc:

http://www.antlr.org/wiki/display/ANTLR4/Wildcard+Operator+and+Nongreedy+Subrules

i talk about fuzzy parsing.

see

http://media.pragprog.com/titles/tpantlr2/code/reference/FuzzyJava.g4

Terence

On Nov 19, 2012, at 11:23 AM, Alexander Kostikov wrote:

> Hi,
> 
> I'm new to ANTLR and I seek for a good advice.
> 
> Here is my story. I'm parsing Cisco IOS config files. They are quite
> loosely defined but actually I don't need to have whole the config
> file parsed. I'm interested in just a subset of the config file (acl
> rule below) and I don't really care about all other parts of the file
> right now. Having said it, in the future I'll need to add other parts
> as well (e.g. rule for interfaces definition) but again, I don't need
> to have all of the config file parsed. I don't want to implement
> complete Cisco IOS grammar since seams it would become a very hard
> task indeed.
> 
> To ignore all not interesting parts of the config file I defined the
> grammar this way:
> 
> /*
> * Parser Rules
> */
> 
> config: (acl | any)* EOF;
> any: (ID|INT)* EOL;
> acl: 'ip' 'access-list' 'extended'? ID EOL (remark | rule)+ EOF;
> remark: (index)? 'remark' (~EOL)* EOL;
> rule: (index)? verb protocol source source_port destination
> destination_port flag? log? EOL;
> 
> // Not so interesting parser rules here...
> 
> /*
> * Lexer Rules
> */
> 
> fragment
> CHAR: 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%';
> fragment
> NUMBER: '0'..'9';
> INT: NUMBER+;
> ID: CHAR (CHAR | NUMBER)*;
> EOL: ('\r' | '\n')+;
> WS: (' ' | '\t') { $channel=HIDDEN; };
> COMMENT: '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; };
> ILLEGAL: .;
> 
> It turns out ANTLR doesn't behave the way I expected =) What I wanted
> is for ANTLR to parse the following line "no ip bootp server" via
> 'any' rule but ANTLR finds 'ip' token in the line and treats the line
> as not correct 'acl' rule. Specifying syntactic predicate "config:
> (('ip' 'access-list') => acl | any)* EOF" only makes things worse
> judging by ANTLRWorks output - parser stops almost immediately with an
> unrecoverable error.
> 
> My question is - is there a way to achieve the kind of filtering I'm
> talking about (parse only 'acl', ignore anything else) via ANTLR
> grammar? What should I use? Syntactic predicate? Several-pass parsing?
> Custom lexer (how do I even start implementing such beast?)? Parse out
> all interesting sections from a file via regex before supplying them
> to ANTLR grammar that is only ACL-oriented (at least I know how to
> implement this last option)?
> 
> -- Alexander
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From cummings at kjchome.homeip.net  Mon Nov 19 18:27:04 2012
From: cummings at kjchome.homeip.net (Kevin J. Cummings)
Date: Mon, 19 Nov 2012 21:27:04 -0500
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
Message-ID: <50AAEA78.4080105@kjchome.homeip.net>

On 11/19/2012 02:23 PM, Alexander Kostikov wrote:
> Hi,
> 
> I'm new to ANTLR and I seek for a good advice.

> To ignore all not interesting parts of the config file I defined the
> grammar this way:
> 
> /*
>  * Parser Rules
>  */
> 
> config: (acl | any)* EOF;
> any: (ID|INT)* EOL;
> acl: 'ip' 'access-list' 'extended'? ID EOL (remark | rule)+ EOF;

Did you really want an EOF at the end of your acl rule?
Or should that have been an EOL?

> remark: (index)? 'remark' (~EOL)* EOL;
> rule: (index)? verb protocol source source_port destination
> destination_port flag? log? EOL;
> 
> // Not so interesting parser rules here...
> 
> /*
>  * Lexer Rules
>  */
> 
> fragment
> CHAR: 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%';
> fragment
> NUMBER: '0'..'9';
> INT: NUMBER+;
> ID: CHAR (CHAR | NUMBER)*;
> EOL: ('\r' | '\n')+;
> WS: (' ' | '\t') { $channel=HIDDEN; };
> COMMENT: '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; };
> ILLEGAL: .;
> 
> It turns out ANTLR doesn't behave the way I expected =) What I wanted
> is for ANTLR to parse the following line "no ip bootp server" via
> 'any' rule but ANTLR finds 'ip' token in the line and treats the line
> as not correct 'acl' rule. Specifying syntactic predicate "config:
> (('ip' 'access-list') => acl | any)* EOF" only makes things worse
> judging by ANTLRWorks output - parser stops almost immediately with an
> unrecoverable error.
> 
> My question is - is there a way to achieve the kind of filtering I'm
> talking about (parse only 'acl', ignore anything else) via ANTLR
> grammar? What should I use? Syntactic predicate? Several-pass parsing?
> Custom lexer (how do I even start implementing such beast?)? Parse out
> all interesting sections from a file via regex before supplying them
> to ANTLR grammar that is only ACL-oriented (at least I know how to
> implement this last option)?
> 
> -- Alexander
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


-- 
Kevin J. Cummings
kjchome at verizon.net
cummings at kjchome.homeip.net
cummings at kjc386.framingham.ma.us
Registered Linux User #1232 (http://www.linuxcounter.net/)

From bkaiflin.ruby at gmail.com  Tue Nov 20 01:18:43 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Tue, 20 Nov 2012 10:18:43 +0100
Subject: [antlr-interest] Parsing a Cucumber-like language in ANTLR
In-Reply-To: <CAN5fRXmvZm36EyyqcCGic95e0Tjw38p2YGkzOVh+YsO3YidZnA@mail.gmail.com>
References: <CAN5fRXmvZm36EyyqcCGic95e0Tjw38p2YGkzOVh+YsO3YidZnA@mail.gmail.com>
Message-ID: <CAF9KzRNwAVMStboHZ3qu9nzpwgiAiO7D9tZ8TtPHt4wRRM+4dA@mail.gmail.com>

Hello,

It's not easy to ignore portions of input, or capture until we see
something, or as long we don't see, especially as newbie. You can have a
look at these threads :
http://www.antlr.org/pipermail/antlr-interest/2012-November/045764.html
http://www.antlr.org/pipermail/antlr-interest/2012-November/045750.html

Having said that, it appears that the Gherkin language, and probably yours,
is structured in such a way that any text can appear between two keywords.
So a rule starts with a keyword and loops as long as the next possible
keyword does not appear. I'm a four weeks old newbie and it took me about
one hour to write this grammar. You'll have to add more tokens to recognize
special characters that can appear in the free text, as told by messages
like "token recognition error at: '('".

grammar Cucumber;

/* Recognize Cucumber-like DSL. */

file
@init {System.out.println("Cucumber last update 0947");}
    : keyword+ EOF ;

keyword
    :   description
    |   scenario
    |   given
    |   when
    |   then
    |   and
    ;

description
@after {System.out.println("===== found a description");}
    :   'Description' ':' ~'Scenario'+
    ;

scenario
@after {System.out.println("===== scenario : " + $scenario.text);}
    :   'Scenario' ':' ~'Given'*
    ;

given /* according to The Cucumber book, we can choose between "Given ...
Given ..."
         and "Given ... And ...". */
@after {System.out.println("===== given : " + $given.text);}
    :   'Given' ~( 'Given' | 'When' | 'And' )*
    ;

when
@after {System.out.println("===== when : " + $when.text);}
    :   'When' ~( 'Then' | 'And' )*
    ;

then /* according to The Cucumber book, we can choose between "Then ...
Then ..."
         and "Then ... And ...". */
@after {System.out.println("===== then : " + $then.text);}
    :   'Then' ~( 'Then' | 'And' | 'Scenario' | 'Description' )*
    ;

and
@after {System.out.println("===== and : " + $and.text);}
    :   'And' ~( 'And' | 'Given' | 'When' | 'Then' | 'Scenario' |
'Description' )*
    ;

ID  : [a-zA-Z]+ ;
INT : DIGIT+ ;
SPECIAL : '_' | '-' | '.' | '+' | '/' | ':' | '%' | '$' ;
WS  : [ \t\r\n] -> channel(HIDDEN) ;

fragment DIGIT : [0-9];

========== input file t.cucumber

Description:
Multi line text goes here
to specifiy the description

Scenario: A
Given size between 10 and 20
   And location is spread out
Then add 2 confidence

Scenario: Attempt withdrawal using stolen card
(from The Cucumber Book)
Given I have $100 in my account
Given my card is invalid
When I request $50
Then my card should not be returned
Then I should be told to contact the bank

========== Execution

$ echo $CLASSPATH
.:/usr/local/lib/antlr-4.0b3-complete.jar
$ antlr4 Cucumber.g4
$ javac Cucumber*.java
$ grun Cucumber file -tokens -diagnostics -trace t.cucumber
line 11:0 token recognition error at: '('
line 11:23 token recognition error at: ')'
[@0,0:10='Description',<6>,1:0]
[@1,11:11=':',<3>,1:11]
[@2,12:12='\n',<11>,channel=1,1:12]
[@3,13:17='Multi',<8>,2:0]
[@4,18:18=' ',<11>,channel=1,2:5]
[@5,19:22='line',<8>,2:6]
....
enter   file, LT(1)=Description
Cucumber last update 0947
enter   keyword, LT(1)=Description
enter   description, LT(1)=Description
consume [@0,0:10='Description',<6>,1:0] rule description alt=1
consume [@1,11:11=':',<3>,1:11] rule description alt=1
consume [@3,13:17='Multi',<8>,2:0] rule description alt=1
....

$ grun Cucumber file -diagnostics t.cucumber
line 11:0 token recognition error at: '('
line 11:23 token recognition error at: ')'
Cucumber last update 0947
===== found a description
===== scenario : Scenario: A
===== given : Given size between 10 and 20
===== and : And location is spread out
===== then : Then add 2 confidence
===== scenario : Scenario: Attempt withdrawal using stolen card
from The Cucumber Book
===== given : Given I have $100 in my account
===== given : Given my card is invalid
===== when : When I request $50
===== then : Then my card should not be returned
===== then : Then I should be told to contact the bank

HTH
Bernard

2012/11/19 Wesley Ripley <wripley at wpi.edu>

> The problem I am having is in capturing muli-line blocks of text. So here
> is a short example: ...
>

We want ANTLR to see the Description: keyword and know to capture
> everything between that and the next keyword....

From bkaiflin.ruby at gmail.com  Tue Nov 20 07:18:21 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Tue, 20 Nov 2012 16:18:21 +0100
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
Message-ID: <CAF9KzROQ56_oqQFB1caca=12Wz8DeVVY_ez3yU15R5u7nsTiwA@mail.gmail.com>

Learning every day ... I have rewritten the grammar to use fuzzy parsing in
v4.

grammar Cisco;

/* Parse Cisco config file using fuzzy parsing. */

config
@init {System.out.println("Cisco last update 1606");}
    :   .*? ( acl .*? )+
    ;

acl :   'ip' 'access-list' 'extended'? ID '\n'? ( remark | rule ) '\n'
               {System.out.print("--- acl " + $acl.text);}
    ;

remark
    :   INT? 'remark' ~'\n'*
    ;

rule:   INT? ID+ // the + either here or in rule acl after ( remark | rule )
    ;            // to avoid ambiguity

ID  :   ( LETTER | SPECIAL ) ( LETTER | SPECIAL | NUMBER )* ;
INT :   NUMBER+ ;
COMMENT : '!' .*? '\n' -> channel(HIDDEN) ;
WS  :   [ \t\r\n]+ -> channel(HIDDEN) ;

ILLEGAL : . ; // after all other lexer rules

fragment LETTER  : 'a'..'z' | 'A'..'Z' ;
fragment SPECIAL : '_' | '-' | '.' | '+' | '/' | ':' | '%' ;
fragment NUMBER  : '0'..'9' ;

To install ANTLR4 you can start here :
http://forums.pragprog.com/forums/206/topics/11231

$ echo $CLASSPATH
.:/usr/local/lib/antlr-4.0b3-complete.jar
$ antlr4 Cisco.g4
$ javac Cisco*.java
$ grun Cisco config -tokens -diagnostics -trace t.config
[@0,0:1='no',<6>,1:0]
[@1,2:2=' ',<9>,channel=1,1:2]
[@2,3:4='ip',<2>,1:3]
...
[@7,18:18='\n',<4>,1:18]
[@8,19:20='ip',<2>,2:0]
[@9,21:21=' ',<9>,channel=1,2:2]
[@10,22:32='access-list',<3>,2:3]
...
[@18,46:45='<EOF>',<-1>,4:8]
enter   config, LT(1)=no
Cisco last update 1606
consume [@0,0:1='no',<6>,1:0] rule config alt=1
consume [@2,3:4='ip',<2>,1:3] rule config alt=1
consume [@4,6:10='bootp',<6>,1:6] rule config alt=1
consume [@6,12:17='server',<6>,1:12] rule config alt=1
consume [@7,18:18='\n',<4>,1:18] rule config alt=1
enter   acl, LT(1)=ip
consume [@8,19:20='ip',<2>,2:0] rule acl alt=1
consume [@10,22:32='access-list',<3>,2:3] rule acl alt=1
consume [@12,34:36='xyz',<6>,2:15] rule acl alt=1
consume [@13,37:37='\n',<4>,2:18] rule acl alt=1
enter   rule, LT(1)=abc
consume [@14,38:40='abc',<6>,3:0] rule rule alt=1
consume [@16,42:44='def',<6>,3:4] rule rule alt=1
exit    rule, LT(1)=

consume [@17,45:45='\n',<4>,3:7] rule acl alt=1
--- acl ip access-list xyz
abc def
exit    acl, LT(1)=<EOF>
exit    config, LT(1)=<EOF>


2012/11/20 Terence Parr <parrt at cs.usfca.edu>

> In the new v4 book and the v4 doc:
>
>
> http://www.antlr.org/wiki/display/ANTLR4/Wildcard+Operator+and+Nongreedy+Subrules
>
> i talk about fuzzy parsing.
>
> see
>
> http://media.pragprog.com/titles/tpantlr2/code/reference/FuzzyJava.g4
>
> Terence
>
>

From bkaiflin.ruby at gmail.com  Tue Nov 20 08:23:03 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Tue, 20 Nov 2012 17:23:03 +0100
Subject: [antlr-interest] How to do preprocessing in antlr v4?
In-Reply-To: <50A99F01.4050707@gmail.com>
References: <50A831D6.80908@gmail.com>
	<CAF9KzRMBYGpdguZL-GQ3qSojjkZ1j9WWEOicdCj3mEBdhAemNg@mail.gmail.com>
	<50A99F01.4050707@gmail.com>
Message-ID: <CAF9KzROYOrvaV+inxofq75GvrfbueM55kAh3OO9+EAx8XpZ6Aw@mail.gmail.com>

After reading this
http://www.antlr.org/pipermail/antlr-interest/2012-November/045768.html
I have rewritten the grammar to use fuzzy parsing. There is a
reportAmbiguity message I don't understand.

grammar Cmacros_e;

/* Process #define statements in a C file using fuzzy parsing.
*/

file
@init {System.out.println("Cmacros_e last update 1717");}
    :   .*? ( define .*? )+
    ;

define
    :   '#define' ID_LPAR ID ( ',' ID )* ')' replacement
            {System.out.print(">>> macro(parm) : " + $define.text);}
    |   '#define' ID_SPACE replacement
            {System.out.print(">>> simple macro : " + $define.text);}
    ;

replacement
    :   ~'\n'+ '\n'
    ;

ID_LPAR // no space between ID and ( for a macro definition with parameters
    :   ID '(' ;
ID_SPACE
    :   ID SPACE ;
ID  :   ( ID_FIRST (ID_FIRST | DIGIT)* ) ;

DIGIT    : [0-9] ;
fragment ID_FIRST : LETTER | '_' ;
fragment LETTER   : [a-zA-Z] ;
fragment SPACE    : ' ' ;

/* from
http://media.pragprog.com/titles/tpantlr2/code/reference/FuzzyJava.g4 */

CharacterLiteral
    :   '\'' ( EscapeSequence | ~('\''|'\\') ) '\''
    ;

StringLiteral
    :  '"' ( EscapeSequence | ~('\\'|'"') )* '"'
    ;

fragment
EscapeSequence
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UnicodeEscape
    |   OctalEscape
    ;

fragment
OctalEscape
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UnicodeEscape
    :   '\\' 'u' HexDigit HexDigit HexDigit HexDigit
    ;

fragment
HexDigit : ('0'..'9'|'a'..'f'|'A'..'F') ;

COMMENT
    :   '/*' .*? '*/'    -> channel(HIDDEN) // match anything between /*
and */
    ;

LINE_COMMENT
    : '//' ~[\r\n]* '\r'? '\n' -> channel(HIDDEN)
    ;

WS  :   [ \r\t\u000C\n]+ -> channel(HIDDEN)
    ;

OTHER : . -> channel(HIDDEN) ;

HTH
BK

From alex.kostikov at gmail.com  Tue Nov 20 09:42:49 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Tue, 20 Nov 2012 09:42:49 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <50AAEA78.4080105@kjchome.homeip.net>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<50AAEA78.4080105@kjchome.homeip.net>
Message-ID: <CAGAhT3kxbDxpY1r=DU2sWVBn=SC=Fx6Jen12TJ+04YmvLrP5bQ@mail.gmail.com>

Kevin,

That should be EOL. I've simplified the grammar a bit before the
sending and a typo sneaked in.

-- Alexander

On Mon, Nov 19, 2012 at 6:27 PM, Kevin J. Cummings
<cummings at kjchome.homeip.net> wrote:
> On 11/19/2012 02:23 PM, Alexander Kostikov wrote:
>> Hi,
>>
>> I'm new to ANTLR and I seek for a good advice.
>
>> To ignore all not interesting parts of the config file I defined the
>> grammar this way:
>>
>> /*
>>  * Parser Rules
>>  */
>>
>> config: (acl | any)* EOF;
>> any: (ID|INT)* EOL;
>> acl: 'ip' 'access-list' 'extended'? ID EOL (remark | rule)+ EOF;
>
> Did you really want an EOF at the end of your acl rule?
> Or should that have been an EOL?
>
>> remark: (index)? 'remark' (~EOL)* EOL;
>> rule: (index)? verb protocol source source_port destination
>> destination_port flag? log? EOL;
>>
>> // Not so interesting parser rules here...
>>
>> /*
>>  * Lexer Rules
>>  */
>>
>> fragment
>> CHAR: 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%';
>> fragment
>> NUMBER: '0'..'9';
>> INT: NUMBER+;
>> ID: CHAR (CHAR | NUMBER)*;
>> EOL: ('\r' | '\n')+;
>> WS: (' ' | '\t') { $channel=HIDDEN; };
>> COMMENT: '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; };
>> ILLEGAL: .;
>>
>> It turns out ANTLR doesn't behave the way I expected =) What I wanted
>> is for ANTLR to parse the following line "no ip bootp server" via
>> 'any' rule but ANTLR finds 'ip' token in the line and treats the line
>> as not correct 'acl' rule. Specifying syntactic predicate "config:
>> (('ip' 'access-list') => acl | any)* EOF" only makes things worse
>> judging by ANTLRWorks output - parser stops almost immediately with an
>> unrecoverable error.
>>
>> My question is - is there a way to achieve the kind of filtering I'm
>> talking about (parse only 'acl', ignore anything else) via ANTLR
>> grammar? What should I use? Syntactic predicate? Several-pass parsing?
>> Custom lexer (how do I even start implementing such beast?)? Parse out
>> all interesting sections from a file via regex before supplying them
>> to ANTLR grammar that is only ACL-oriented (at least I know how to
>> implement this last option)?
>>
>> -- Alexander
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
> --
> Kevin J. Cummings
> kjchome at verizon.net
> cummings at kjchome.homeip.net
> cummings at kjc386.framingham.ma.us
> Registered Linux User #1232 (http://www.linuxcounter.net/)
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From alex.kostikov at gmail.com  Tue Nov 20 09:45:41 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Tue, 20 Nov 2012 09:45:41 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAF9KzROQ56_oqQFB1caca=12Wz8DeVVY_ez3yU15R5u7nsTiwA@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
	<CAF9KzROQ56_oqQFB1caca=12Wz8DeVVY_ez3yU15R5u7nsTiwA@mail.gmail.com>
Message-ID: <CAGAhT3mL+aqdXBcO+Gjnr2mCtuZd733xwr8AemOtDardxV2Fow@mail.gmail.com>

Bernard,

Thanks for the debugging technique!

Was the resolution for '1) ID is built character by character, it
would be better to group them' to move all fragments to the very end
of the grammar?

I can't use ANTLR4 since there is no C# target for it yet (as far as I
know). I'm targeting C# but for the sake of grammar debugability I'm
trying out the grammar in ANTLRWorks first.

The problem with id_or_keyword approach is - there would be too many
keywords to keep track of in 'any' rule. Plus IP token is not a
keyword that always would start the 'acl' rule. 'ip' could be used as
protocol identifier as well. It looks like I would have to use
alteration like (IP|ID) in the parser rules and it doesn't seem right.

-- 
Alexander

On Tue, Nov 20, 2012 at 7:18 AM, Bernard Kaiflin
<bkaiflin.ruby at gmail.com> wrote:
> Learning every day ... I have rewritten the grammar to use fuzzy parsing in
> v4.
>
> grammar Cisco;
>
> /* Parse Cisco config file using fuzzy parsing. */
>
> config
> @init {System.out.println("Cisco last update 1606");}
>     :   .*? ( acl .*? )+
>     ;
>
> acl :   'ip' 'access-list' 'extended'? ID '\n'? ( remark | rule ) '\n'
>                {System.out.print("--- acl " + $acl.text);}
>     ;
>
> remark
>     :   INT? 'remark' ~'\n'*
>     ;
>
> rule:   INT? ID+ // the + either here or in rule acl after ( remark | rule )
>     ;            // to avoid ambiguity
>
> ID  :   ( LETTER | SPECIAL ) ( LETTER | SPECIAL | NUMBER )* ;
> INT :   NUMBER+ ;
> COMMENT : '!' .*? '\n' -> channel(HIDDEN) ;
> WS  :   [ \t\r\n]+ -> channel(HIDDEN) ;
>
> ILLEGAL : . ; // after all other lexer rules
>
> fragment LETTER  : 'a'..'z' | 'A'..'Z' ;
> fragment SPECIAL : '_' | '-' | '.' | '+' | '/' | ':' | '%' ;
> fragment NUMBER  : '0'..'9' ;
>
> To install ANTLR4 you can start here :
> http://forums.pragprog.com/forums/206/topics/11231
>
> $ echo $CLASSPATH
> .:/usr/local/lib/antlr-4.0b3-complete.jar
> $ antlr4 Cisco.g4
> $ javac Cisco*.java
> $ grun Cisco config -tokens -diagnostics -trace t.config
> [@0,0:1='no',<6>,1:0]
> [@1,2:2=' ',<9>,channel=1,1:2]
> [@2,3:4='ip',<2>,1:3]
> ...
> [@7,18:18='\n',<4>,1:18]
> [@8,19:20='ip',<2>,2:0]
> [@9,21:21=' ',<9>,channel=1,2:2]
> [@10,22:32='access-list',<3>,2:3]
> ...
> [@18,46:45='<EOF>',<-1>,4:8]
> enter   config, LT(1)=no
> Cisco last update 1606
> consume [@0,0:1='no',<6>,1:0] rule config alt=1
> consume [@2,3:4='ip',<2>,1:3] rule config alt=1
> consume [@4,6:10='bootp',<6>,1:6] rule config alt=1
> consume [@6,12:17='server',<6>,1:12] rule config alt=1
> consume [@7,18:18='\n',<4>,1:18] rule config alt=1
> enter   acl, LT(1)=ip
> consume [@8,19:20='ip',<2>,2:0] rule acl alt=1
> consume [@10,22:32='access-list',<3>,2:3] rule acl alt=1
> consume [@12,34:36='xyz',<6>,2:15] rule acl alt=1
> consume [@13,37:37='\n',<4>,2:18] rule acl alt=1
> enter   rule, LT(1)=abc
> consume [@14,38:40='abc',<6>,3:0] rule rule alt=1
> consume [@16,42:44='def',<6>,3:4] rule rule alt=1
> exit    rule, LT(1)=
>
> consume [@17,45:45='\n',<4>,3:7] rule acl alt=1
> --- acl ip access-list xyz
> abc def
> exit    acl, LT(1)=<EOF>
> exit    config, LT(1)=<EOF>
>
>
> 2012/11/20 Terence Parr <parrt at cs.usfca.edu>
>>
>> In the new v4 book and the v4 doc:
>>
>>
>> http://www.antlr.org/wiki/display/ANTLR4/Wildcard+Operator+and+Nongreedy+Subrules
>>
>> i talk about fuzzy parsing.
>>
>> see
>>
>> http://media.pragprog.com/titles/tpantlr2/code/reference/FuzzyJava.g4
>>
>> Terence
>>
>

From alex.kostikov at gmail.com  Tue Nov 20 09:47:31 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Tue, 20 Nov 2012 09:47:31 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
Message-ID: <CAGAhT3=YCRHO_VMQ4z1o=oXzyTkX7j-41h9Y+n1ypHRVQ93Gbg@mail.gmail.com>

Terence,

Thank you for the fuzzy parsing advice.

Fuzzy parsing seems to be the natural choice here. I've tried it
yesterday and it worked on a sample data. But when I tried to supply
some real file two things came up:

1) Parser became very loose. ANTLR no longer finds out cases when
input almost matches the acl rule. Fuzzy parsing via 'config: (acl |
.)* EOF' ignores all input that is not 100% described by the acl rule.
I understand that this is a conflicting goal but it looks like
swallow_to_semi technique from Ivan's email could bring benefits from
both fuzzy parsing and error handling by making grammar more verbose.

2) ANTLRWorks debugger took significant time to parse the real data.
It was about ~40 seconds per file compared to ~1 second when I'm using
my old regex-based parser. It was just a run under debugger and for a
different target language (I'm targeting CSharp3) but performance is a
valid concern for me. I don't want to have a speed regression when
porting from the current regex parser. If there would be no way of
doing quick parser I'll introduce an intermediate representation -
only the parsing speed from this intermediate representation would
matter.

-- 
Alexander

On Mon, Nov 19, 2012 at 3:49 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> In the new v4 book and the v4 doc:
>
> http://www.antlr.org/wiki/display/ANTLR4/Wildcard+Operator+and+Nongreedy+Subrules
>
> i talk about fuzzy parsing.
>
> see
>
> http://media.pragprog.com/titles/tpantlr2/code/reference/FuzzyJava.g4
>
> Terence
>
> On Nov 19, 2012, at 11:23 AM, Alexander Kostikov wrote:
>
>> Hi,
>>
>> I'm new to ANTLR and I seek for a good advice.
>>
>> Here is my story. I'm parsing Cisco IOS config files. They are quite
>> loosely defined but actually I don't need to have whole the config
>> file parsed. I'm interested in just a subset of the config file (acl
>> rule below) and I don't really care about all other parts of the file
>> right now. Having said it, in the future I'll need to add other parts
>> as well (e.g. rule for interfaces definition) but again, I don't need
>> to have all of the config file parsed. I don't want to implement
>> complete Cisco IOS grammar since seams it would become a very hard
>> task indeed.
>>
>> To ignore all not interesting parts of the config file I defined the
>> grammar this way:
>>
>> /*
>> * Parser Rules
>> */
>>
>> config: (acl | any)* EOF;
>> any: (ID|INT)* EOL;
>> acl: 'ip' 'access-list' 'extended'? ID EOL (remark | rule)+ EOF;
>> remark: (index)? 'remark' (~EOL)* EOL;
>> rule: (index)? verb protocol source source_port destination
>> destination_port flag? log? EOL;
>>
>> // Not so interesting parser rules here...
>>
>> /*
>> * Lexer Rules
>> */
>>
>> fragment
>> CHAR: 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%';
>> fragment
>> NUMBER: '0'..'9';
>> INT: NUMBER+;
>> ID: CHAR (CHAR | NUMBER)*;
>> EOL: ('\r' | '\n')+;
>> WS: (' ' | '\t') { $channel=HIDDEN; };
>> COMMENT: '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; };
>> ILLEGAL: .;
>>
>> It turns out ANTLR doesn't behave the way I expected =) What I wanted
>> is for ANTLR to parse the following line "no ip bootp server" via
>> 'any' rule but ANTLR finds 'ip' token in the line and treats the line
>> as not correct 'acl' rule. Specifying syntactic predicate "config:
>> (('ip' 'access-list') => acl | any)* EOF" only makes things worse
>> judging by ANTLRWorks output - parser stops almost immediately with an
>> unrecoverable error.
>>
>> My question is - is there a way to achieve the kind of filtering I'm
>> talking about (parse only 'acl', ignore anything else) via ANTLR
>> grammar? What should I use? Syntactic predicate? Several-pass parsing?
>> Custom lexer (how do I even start implementing such beast?)? Parse out
>> all interesting sections from a file via regex before supplying them
>> to ANTLR grammar that is only ACL-oriented (at least I know how to
>> implement this last option)?
>>
>> -- Alexander
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From tabarem at gmail.com  Tue Nov 20 09:48:23 2012
From: tabarem at gmail.com (=?ISO-8859-1?Q?Diego_Mart=EDnez?=)
Date: Tue, 20 Nov 2012 15:48:23 -0200
Subject: [antlr-interest] Graphical AST
Message-ID: <CAEGXtVpRLiaQXr5n9to_VjujVAjg38O+jJo-un6EgKiWS1rqhQ@mail.gmail.com>

Hi,

I following step by step the next wiki entry:

http://www.antlr.org/wiki/display/ANTLR3/How do I display ASTs graphically

DOTTreeGenerator gen = new DOTTreeGenerator();
StringTemplate st = gen.toDOT(t);
System.out.println(st);

I use the antlr-3.4-complete-no-antlrv2.jar

When invoke gen.toDot(...) method it has StringTemplate class in your
return type (StringTemplate 3?), and the StringTemplate bundled within the
jar is 4 (name is ST instead of StringTemplate, etc).

I'm a novice in antlr, what is wrong with the dependencies?.. i need it to
generate a graphical view of my AST.

Thank you!! Diego Mart?nez

From alex.kostikov at gmail.com  Tue Nov 20 09:49:08 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Tue, 20 Nov 2012 09:49:08 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <50AA967D.10309@ibrezina.net>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<50AA967D.10309@ibrezina.net>
Message-ID: <CAGAhT3=iiAa887UArVUXAv1wy3OhH8MdrpHooAtb9h=aZgqvSA@mail.gmail.com>

Ivan,

Thank you for the swallow_to_semi technique.

I've tried fuzzy parsing Terence pointed out, but as the downside the
parser became very loose and it no longer finds input that  _almost_
captures the acl rule. Probably the swallow_to_semi technique could
give me the ability not to implement the full parser and find out
almost matching input (indicating that the rule must be updated) at
the same time.

-- 
Alexander

On Mon, Nov 19, 2012 at 12:28 PM, Ivan Brezina <ibre5041 at ibrezina.net> wrote:
> On 11/19/2012 08:23 PM, Alexander Kostikov wrote:
>> Hi,
>>
>> I'm new to ANTLR and I seek for a good advice.
>>
>> Here is my story. I'm parsing Cisco IOS config files. They are quite
>> loosely defined but actually I don't need to have whole the config
>> file parsed. I'm interested in just a subset of the config file (acl
>> rule below) and I don't really care about all other parts of the file
>> right now. Having said it, in the future I'll need to add other parts
>> as well (e.g. rule for interfaces definition) but again, I don't need
>> to have all of the config file parsed. I don't want to implement
>> complete Cisco IOS grammar since seams it would become a very hard
>> task indeed.
>>
>> To ignore all not interesting parts of the config file I defined the
>> grammar this way:
>>
>> /*
>>   * Parser Rules
>>   */
>>
>> config: (acl | any)* EOF;
>> any: (ID|INT)* EOL;
>> acl: 'ip' 'access-list' 'extended'? ID EOL (remark | rule)+ EOF;
>> remark: (index)? 'remark' (~EOL)* EOL;
>> rule: (index)? verb protocol source source_port destination
>> destination_port flag? log? EOL;
>>
>> // Not so interesting parser rules here...
>>
>> /*
>>   * Lexer Rules
>>   */
>>
>> fragment
>> CHAR: 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%';
>> fragment
>> NUMBER: '0'..'9';
>> INT: NUMBER+;
>> ID: CHAR (CHAR | NUMBER)*;
>> EOL: ('\r' | '\n')+;
>> WS: (' ' | '\t') { $channel=HIDDEN; };
>> COMMENT: '!' (~('\r' | '\n'))* EOL { $channel=HIDDEN; };
>> ILLEGAL: .;
>>
>> It turns out ANTLR doesn't behave the way I expected =) What I wanted
>> is for ANTLR to parse the following line "no ip bootp server" via
>> 'any' rule but ANTLR finds 'ip' token in the line and treats the line
>> as not correct 'acl' rule. Specifying syntactic predicate "config:
>> (('ip' 'access-list') => acl | any)* EOF"nly makes things worse
>> judging by ANTLRWorks output - parser stops almost immediately with an
>> unrecoverable error.
>>
>> My question is - is there a way to achieve the kind of filtering I'm
>> talking about (parse only 'acl', ignore anything else) via ANTLR
>> grammar? What should I use? Syntactic predicate? Several-pass parsing?
>> Custom lexer (how do I even start implementing such beast?)? Parse out
>> all interesting sections from a file via regex before supplying themuse
>> to ANTLR grammar that is only ACL-oriented (at least I know how to
>> implement this last option)?
>>
>> -- Alexander
>>
>>
>
> Maybe this is not what you want. Look at the PLSQL grammar.
> For embedded SQL it uses such a trick:
>
> SEMI: ';' ;
>
> swallow_to_semi :
>          ~( SEMI )+
>      ;
>
> select: 'SELECT' swallow_to_semi SEMI;
>
> By using this you can "bypass" all the sections you're not interested in.
>
> Ivan
> PS: be warned, negation can make the grammar very complex if you
> use many lexer tokens.
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Tue Nov 20 10:08:07 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Nov 2012 10:08:07 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAGAhT3=YCRHO_VMQ4z1o=oXzyTkX7j-41h9Y+n1ypHRVQ93Gbg@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
	<CAGAhT3=YCRHO_VMQ4z1o=oXzyTkX7j-41h9Y+n1ypHRVQ93Gbg@mail.gmail.com>
Message-ID: <995A2F5C-21D9-43A4-B3D0-22EFC5AE4A1E@cs.usfca.edu>


On Nov 20, 2012, at 9:47 AM, Alexander Kostikov wrote:

> Terence,
> 
> Thank you for the fuzzy parsing advice.
> 
> Fuzzy parsing seems to be the natural choice here. I've tried it
> yesterday and it worked on a sample data. But when I tried to supply
> some real file two things came up:
> 
> 1) Parser became very loose. ANTLR no longer finds out cases when
> input almost matches the acl rule. Fuzzy parsing via 'config: (acl |
> .)* EOF' ignores all input that is not 100% described by the acl rule.
> I understand that this is a conflicting goal but it looks like
> swallow_to_semi technique from Ivan's email could bring benefits from
> both fuzzy parsing and error handling by making grammar more verbose.

I think it's very sensitive to how you write the grammar. I was very happy with the fuzzy Java parser as it wasn't loose at all. this is with v4
> 
> 2) ANTLRWorks debugger took significant time to parse the real data.
> It was about ~40 seconds per file compared to ~1 second when I'm using
> my old regex-based parser. It was just a run under debugger and for a
> different target language (I'm targeting CSharp3) but performance is a
> valid concern for me. I don't want to have a speed regression when
> porting from the current regex parser. If there would be no way of
> doing quick parser I'll introduce an intermediate representation -
> only the parsing speed from this intermediate representation would
> matter.

ah. you must be using v3. All bets are off.  v3 option fuzzy is very slow O(n^2)

T

From apalala at gmail.com  Tue Nov 20 10:32:19 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Tue, 20 Nov 2012 14:02:19 -0430
Subject: [antlr-interest] Graphical AST
In-Reply-To: <CAEGXtVpRLiaQXr5n9to_VjujVAjg38O+jJo-un6EgKiWS1rqhQ@mail.gmail.com>
References: <CAEGXtVpRLiaQXr5n9to_VjujVAjg38O+jJo-un6EgKiWS1rqhQ@mail.gmail.com>
Message-ID: <CAN1YFWv9k5u1Pr1HuJMC2bKYk81__F9ezs-Qx1ebavHO-8X2Tw@mail.gmail.com>

Hello Diego,

I don't know about the specific problem you describe, but I do know that
3.4 is not the latest version of the 3.x series.  It is 3.4.1-snapshot, and
you must get it from Github.

Things that did not work for me with 3.4 work perfectly with 3.4.1-snapshot.

Cheers,


On Tue, Nov 20, 2012 at 1:18 PM, Diego Mart?nez <tabarem at gmail.com> wrote:

> Hi,
>
> I following step by step the next wiki entry:
>
> http://www.antlr.org/wiki/display/ANTLR3/How do I display ASTs graphically
>
> DOTTreeGenerator gen = new DOTTreeGenerator();
> StringTemplate st = gen.toDOT(t);
> System.out.println(st);
>
> I use the antlr-3.4-complete-no-antlrv2.jar
>
> When invoke gen.toDot(...) method it has StringTemplate class in your
> return type (StringTemplate 3?), and the StringTemplate bundled within the
> jar is 4 (name is ST instead of StringTemplate, etc).
>
> I'm a novice in antlr, what is wrong with the dependencies?.. i need it to
> generate a graphical view of my AST.
>
> Thank you!! Diego Mart?nez
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From mandy at think-a-lot.de  Tue Nov 20 10:37:22 2012
From: mandy at think-a-lot.de (Mandy Neumann)
Date: Tue, 20 Nov 2012 19:37:22 +0100
Subject: [antlr-interest] Graphical AST
In-Reply-To: <CAN1YFWv9k5u1Pr1HuJMC2bKYk81__F9ezs-Qx1ebavHO-8X2Tw@mail.gmail.com>
References: <CAEGXtVpRLiaQXr5n9to_VjujVAjg38O+jJo-un6EgKiWS1rqhQ@mail.gmail.com>
	<CAN1YFWv9k5u1Pr1HuJMC2bKYk81__F9ezs-Qx1ebavHO-8X2Tw@mail.gmail.com>
Message-ID: <50ABCDE2.8060903@think-a-lot.de>

Hi,

I'm definitely no ANTLR crack, but this DOT thing works just fine for 
me. So maybe it's just the "no-antlrv2" part? I use antlr-3.4-complete.jar.

Am 20.11.2012 19:32, schrieb Juancarlo A?ez:
> Hello Diego,
>
> I don't know about the specific problem you describe, but I do know that
> 3.4 is not the latest version of the 3.x series.  It is 3.4.1-snapshot, and
> you must get it from Github.
>
> Things that did not work for me with 3.4 work perfectly with 3.4.1-snapshot.
>
> Cheers,
>
>
> On Tue, Nov 20, 2012 at 1:18 PM, Diego Mart?nez <tabarem at gmail.com> wrote:
>
>> Hi,
>>
>> I following step by step the next wiki entry:
>>
>> http://www.antlr.org/wiki/display/ANTLR3/How do I display ASTs graphically
>>
>> DOTTreeGenerator gen = new DOTTreeGenerator();
>> StringTemplate st = gen.toDOT(t);
>> System.out.println(st);
>>
>> I use the antlr-3.4-complete-no-antlrv2.jar
>>
>> When invoke gen.toDot(...) method it has StringTemplate class in your
>> return type (StringTemplate 3?), and the StringTemplate bundled within the
>> jar is 4 (name is ST instead of StringTemplate, etc).
>>
>> I'm a novice in antlr, what is wrong with the dependencies?.. i need it to
>> generate a graphical view of my AST.
>>
>> Thank you!! Diego Mart?nez
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>

From tabarem at gmail.com  Tue Nov 20 11:34:31 2012
From: tabarem at gmail.com (=?ISO-8859-1?Q?Diego_Mart=EDnez?=)
Date: Tue, 20 Nov 2012 17:34:31 -0200
Subject: [antlr-interest] Graphical AST
In-Reply-To: <50ABCDE2.8060903@think-a-lot.de>
References: <CAEGXtVpRLiaQXr5n9to_VjujVAjg38O+jJo-un6EgKiWS1rqhQ@mail.gmail.com>
	<CAN1YFWv9k5u1Pr1HuJMC2bKYk81__F9ezs-Qx1ebavHO-8X2Tw@mail.gmail.com>
	<50ABCDE2.8060903@think-a-lot.de>
Message-ID: <CAEGXtVoRMGtg-XMZsuKCmnQFK1GL6yOhVf+91owLUGbzxj2Sbw@mail.gmail.com>

Thank you for the answers!!

"no-antlrv2" part, are the bad boy in this movie :p

I proved the antlr-3.4-complete.jar and all works ok.

Thank you!!! Diego Mart?nez


2012/11/20 Mandy Neumann <mandy at think-a-lot.de>

> Hi,
>
> I'm definitely no ANTLR crack, but this DOT thing works just fine for
> me. So maybe it's just the "no-antlrv2" part? I use antlr-3.4-complete.jar.
>
> Am 20.11.2012 19:32, schrieb Juancarlo A?ez:
> > Hello Diego,
> >
> > I don't know about the specific problem you describe, but I do know that
> > 3.4 is not the latest version of the 3.x series.  It is 3.4.1-snapshot,
> and
> > you must get it from Github.
> >
> > Things that did not work for me with 3.4 work perfectly with
> 3.4.1-snapshot.
> >
> > Cheers,
> >
> >
> > On Tue, Nov 20, 2012 at 1:18 PM, Diego Mart?nez <tabarem at gmail.com>
> wrote:
> >
> >> Hi,
> >>
> >> I following step by step the next wiki entry:
> >>
> >> http://www.antlr.org/wiki/display/ANTLR3/How do I display ASTs
> graphically
> >>
> >> DOTTreeGenerator gen = new DOTTreeGenerator();
> >> StringTemplate st = gen.toDOT(t);
> >> System.out.println(st);
> >>
> >> I use the antlr-3.4-complete-no-antlrv2.jar
> >>
> >> When invoke gen.toDot(...) method it has StringTemplate class in your
> >> return type (StringTemplate 3?), and the StringTemplate bundled within
> the
> >> jar is 4 (name is ST instead of StringTemplate, etc).
> >>
> >> I'm a novice in antlr, what is wrong with the dependencies?.. i need it
> to
> >> generate a graphical view of my AST.
> >>
> >> Thank you!! Diego Mart?nez
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >>
> >
> >
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From bkaiflin.ruby at gmail.com  Tue Nov 20 12:25:59 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Tue, 20 Nov 2012 21:25:59 +0100
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAGAhT3mL+aqdXBcO+Gjnr2mCtuZd733xwr8AemOtDardxV2Fow@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
	<CAF9KzROQ56_oqQFB1caca=12Wz8DeVVY_ez3yU15R5u7nsTiwA@mail.gmail.com>
	<CAGAhT3mL+aqdXBcO+Gjnr2mCtuZd733xwr8AemOtDardxV2Fow@mail.gmail.com>
Message-ID: <CAF9KzRPqi0RKyTT3dExqF7Rqhfibcsk=E2Ap=0m_64yQu54AsQ@mail.gmail.com>

A. I confirm that, if the central rule, in this case acl, does not match
exactly the input, the whole input is consumed by the first .*?.

>Was the resolution for '1) ID is built character by character, it would be
better to group them' to move all fragments to the very end of the grammar?

B. Putting all the fragments at the end is just my personal preference.

C. The trace
enter CHAR b line=1:6
exit CHAR o line=1:7
gave me the feeling that ID is constructed painfuly character by character.
Rewriting CHAR as
CHAR: ( 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '+' | '/' | ':' | '%' )
    {System.out.println("--- CHAR " + $text);}
    ;
shows
enter ID b line=1:6
enter CHAR b line=1:6
--- CHAR b
exit CHAR o line=1:7
enter CHAR o line=1:7
--- CHAR bo
exit CHAR o line=1:8
enter CHAR o line=1:8
--- CHAR boo
exit CHAR t line=1:9
enter CHAR t line=1:9
--- CHAR boot
exit CHAR p line=1:10
enter CHAR p line=1:10
--- CHAR bootp
exit CHAR   line=1:11
--- ID bootp

But also with fragment CHAR, or putting a print in fragment LETTER shows
that ID is built character by character. So you can forget my remark 1). I
have been fooled by the trace
enter ID b line=1:6
--- ID bootp
exit ID   line=1:11
that looked shorter because fragments are not traced. In your version, CHAR
is a lexer rule and is traced in detail.


2012/11/20 Alexander Kostikov <alex.kostikov at gmail.com>

>
> Was the resolution for '1) ID is built character by character, it
> would be better to group them' to move all fragments to the very end
> of the grammar?
>
> --
> Alexander
>
>

From bkaiflin.ruby at gmail.com  Tue Nov 20 12:43:39 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Tue, 20 Nov 2012 21:43:39 +0100
Subject: [antlr-interest] Parsing a Cucumber-like language in ANTLR
In-Reply-To: <CAF9KzRNwAVMStboHZ3qu9nzpwgiAiO7D9tZ8TtPHt4wRRM+4dA@mail.gmail.com>
References: <CAN5fRXmvZm36EyyqcCGic95e0Tjw38p2YGkzOVh+YsO3YidZnA@mail.gmail.com>
	<CAF9KzRNwAVMStboHZ3qu9nzpwgiAiO7D9tZ8TtPHt4wRRM+4dA@mail.gmail.com>
Message-ID: <CAF9KzRMyuq8adXbG9i1eTmrU0ZapYhXmS_DJYyMMH-ZxiDE-iw@mail.gmail.com>

Improvement :

>You'll have to add more tokens to recognize special characters that can
appear in the free text,
> as told by messages like "token recognition error at: '('".

If you replace SPECIAL by

OTHER : . ;

all special characters will be matched by the dot which means any character.

$ grun Cucumber file -tokens -diagnostics -trace t.cucumber
[@0,0:10='Description',<6>,1:0]

no more errors.

From alex.kostikov at gmail.com  Tue Nov 20 12:52:10 2012
From: alex.kostikov at gmail.com (Alexander Kostikov)
Date: Tue, 20 Nov 2012 12:52:10 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <995A2F5C-21D9-43A4-B3D0-22EFC5AE4A1E@cs.usfca.edu>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
	<CAGAhT3=YCRHO_VMQ4z1o=oXzyTkX7j-41h9Y+n1ypHRVQ93Gbg@mail.gmail.com>
	<995A2F5C-21D9-43A4-B3D0-22EFC5AE4A1E@cs.usfca.edu>
Message-ID: <CAGAhT3m8WOpCOcwzqCbfh7A8NfiKhSm15T6aHT0C2U5SYXzzOQ@mail.gmail.com>

Terence,

Is there an estimation when C# target would become available for ANTLR v4?
I would gladly switch to the newest bits but it doesn't seem like C#
output is currently possible.

-- Alexander


On Tue, Nov 20, 2012 at 10:08 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On Nov 20, 2012, at 9:47 AM, Alexander Kostikov wrote:
>
>> Terence,
>>
>> Thank you for the fuzzy parsing advice.
>>
>> Fuzzy parsing seems to be the natural choice here. I've tried it
>> yesterday and it worked on a sample data. But when I tried to supply
>> some real file two things came up:
>>
>> 1) Parser became very loose. ANTLR no longer finds out cases when
>> input almost matches the acl rule. Fuzzy parsing via 'config: (acl |
>> .)* EOF' ignores all input that is not 100% described by the acl rule.
>> I understand that this is a conflicting goal but it looks like
>> swallow_to_semi technique from Ivan's email could bring benefits from
>> both fuzzy parsing and error handling by making grammar more verbose.
>
> I think it's very sensitive to how you write the grammar. I was very happy with the fuzzy Java parser as it wasn't loose at all. this is with v4
>>
>> 2) ANTLRWorks debugger took significant time to parse the real data.
>> It was about ~40 seconds per file compared to ~1 second when I'm using
>> my old regex-based parser. It was just a run under debugger and for a
>> different target language (I'm targeting CSharp3) but performance is a
>> valid concern for me. I don't want to have a speed regression when
>> porting from the current regex parser. If there would be no way of
>> doing quick parser I'll introduce an intermediate representation -
>> only the parsing speed from this intermediate representation would
>> matter.
>
> ah. you must be using v3. All bets are off.  v3 option fuzzy is very slow O(n^2)
>
> T

From parrt at cs.usfca.edu  Tue Nov 20 13:27:56 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Nov 2012 13:27:56 -0800
Subject: [antlr-interest] parsing just a subset of a grammar
In-Reply-To: <CAGAhT3m8WOpCOcwzqCbfh7A8NfiKhSm15T6aHT0C2U5SYXzzOQ@mail.gmail.com>
References: <CAGAhT3=NcQ1wxfqj5WCga4=vhGLLwcsxyTrkWSTRyarUuFApsQ@mail.gmail.com>
	<5D151292-1EF8-4319-A8D0-C449C1926C55@cs.usfca.edu>
	<CAGAhT3=YCRHO_VMQ4z1o=oXzyTkX7j-41h9Y+n1ypHRVQ93Gbg@mail.gmail.com>
	<995A2F5C-21D9-43A4-B3D0-22EFC5AE4A1E@cs.usfca.edu>
	<CAGAhT3m8WOpCOcwzqCbfh7A8NfiKhSm15T6aHT0C2U5SYXzzOQ@mail.gmail.com>
Message-ID: <FAB53B71-11A6-4BA3-985A-A331D6044508@cs.usfca.edu>


On Nov 20, 2012, at 12:52 PM, Alexander Kostikov wrote:

> Terence,
> 
> Is there an estimation when C# target would become available for ANTLR v4?
> I would gladly switch to the newest bits but it doesn't seem like C#
> output is currently possible.

Sam is working on it and C++. No real estimate I'm afraid; he's finishing up semester and Java version with me at moment.

Ter

From parrt at cs.usfca.edu  Tue Nov 20 13:30:17 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Nov 2012 13:30:17 -0800
Subject: [antlr-interest] cash reward for v4 targets
Message-ID: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>

Hi,

If anyone with serious python chops wants to tackle a python target, let me know.  Other targets possibly too. Much of runtime is similar in v4 from v3 but new parsing strategy is very different/complicated.

I'm willing to pay a nonzero sum (but less than consulting rates!), depending on target.

Ter

From researcher0x00 at gmail.com  Tue Nov 20 13:35:51 2012
From: researcher0x00 at gmail.com (Eric)
Date: Tue, 20 Nov 2012 16:35:51 -0500
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
Message-ID: <CAN45N13Vrh-F2o1fp7GZ31nmp66iLnRfUQrDLrRpR8gPx7SxoQ@mail.gmail.com>

Hi Ter,

Does an F# version, not just a target count. In other words, all of the
command line tools would be included and converted to F#.

Regards, Eric

On Tue, Nov 20, 2012 at 4:30 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi,
>
> If anyone with serious python chops wants to tackle a python target, let
> me know.  Other targets possibly too. Much of runtime is similar in v4 from
> v3 but new parsing strategy is very different/complicated.
>
> I'm willing to pay a nonzero sum (but less than consulting rates!),
> depending on target.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From bkaiflin.ruby at gmail.com  Tue Nov 20 14:20:48 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Tue, 20 Nov 2012 23:20:48 +0100
Subject: [antlr-interest] ANTLR4 (beta 3 bug report) . . 1) problem with
 imported @actions . . 2) @after action and import . . 3) strange error
 message
Message-ID: <CAF9KzRNvtQzQ3NUuuaSxYcVEb45abrGS1YxpVtSAdkHEpV=LVg@mail.gmail.com>

[ Bugs button not working yet :)  In the meantime, I post a bug report here.
 ]

To parse the Ruby parser, consisting of a Bison grammar and C code, I have
written a C grammar which parses only C code, and a Bison grammar which
parses only the Bison tags and meta-language, and rely upon the C grammar
to parse C embedded code.

So I need to import the C grammar into the Bison grammar.

*Problem 1)* The Bison grammar contains neither @header, nor @members, nor
@after actions, but ANTLR complains :

$ alias
alias antlr4='java -jar /usr/local/lib/antlr-4.0b3-complete.jar'
$ java -version
java version "1.6.0_37"
Java(TM) SE Runtime Environment (build 1.6.0_37-b06-434-11M3909)
Java HotSpot(TM) 64-Bit Server VM (build 20.12-b01-434, mixed mode)
$ antlr4 C.g4  [used previously]
$ antlr4 Bison.g4
error(94): /.../C.g4:23:9: redefinition of members action
error(94): /.../C.g4:349:1: redefinition of after action
error(94): /.../C.g4:361:1: redefinition of after action
 error(94): /.../C.g4:579:1: redefinition of after action
[... *100 % CPU, heating* ...]
*^C*$

Have also tried this :

grammar B;
import BisonOnly;     [without import C;]
import C;

$ antlr4 B.g4
[ ... Java task 100 % ... ]
^C$

I have simplified both grammars to a minimum. Bison_test.g4 compiles only
after removing the last @after action remaining in the imported grammar
C_test.g4.

grammar Bison_test;
import C_test;

grammar C_test;
program : declaration ;
declaration
//@after {System.out.println("...... exiting declaration " +
$declaration.text);}
    :   'auto' | 'register' | 'static' | 'extern'
    ;
ID  :   [a-zA-Z] ;


The message

 $ antlr4 Bison_test.g4
error(94): /.../C_test.g4:9:9: redefinition of members action

appears again only if adding both @lexer and @parser actions in C_test.g4 :

grammar C_test;
@lexer::members {
}

@parser::members {
}



*Problem (or just strange behavior ) 2)* Before simplifying C and Bison, I
have tried to reproduce the problem with code/reference/ELang.g4 +
MyELang.g4 :

grammar ELang;

stat : (expr ';')+ ;
expr
@after {System.out.println("expr found "  );} // + $expr.text);}
     : ID ;
WS   : [ \r\t\n]+ -> skip ;
ID   : [a-z]+ ;

The grammar MyELang.g4 is not changed :

grammar MyELang;
import ELang;
expr : INT | ID ;
INT :   [0-9]+ ;

$ antlr4 MyELang.g4
$ javac MyELang*.java
$ grun MyELang stat
34;
?EOF [ctrl-D]
$

There is no output from expr. OK, that's because exp in MyELang overwrites
expr in ELang. But adding a print statement in MyELang makes them both
active.

grammar MyELang;
import ELang;
expr
@after {System.out.println("expr found " + $expr.text);}
    : INT | ID ;

$ grun MyELang stat
34;
?EOF [ctrl-D]
expr found 34
expr found




*Problem 3)* With no @after action in MyELang, one with the full print
statement in ELang.g4 using $expr.text in the *parser* rule expr

grammar MyELang;
import ELang;
expr
//@after {System.out.println("expr found " + $expr.text);}
    : INT | ID ;
INT :   [0-9]+ ;

grammar ELang;

stat : (expr ';')+ ;
expr
@after {System.out.println("expr found " + $expr.text);}
     : ID ;
WS   : [ \r\t\n]+ -> skip ;
ID   : [a-z]+ ;

there is a strange error message (because expr is a parser, not lexer rule)
:

$ antlr4 MyELang.g4
error(128): MyELang.g4:5:44: attribute references not allowed in
*lexer*actions: $expr.text
Exception in thread "main" java.lang.NullPointerException
at
org.antlr.v4.codegen.ActionTranslator.qualifiedAttr(ActionTranslator.java:210)
....

Kind regards
Bernard

From apalala at gmail.com  Tue Nov 20 19:21:31 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Tue, 20 Nov 2012 22:51:31 -0430
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
Message-ID: <CAN1YFWsgkKJTDZNSCtoaVDDugFfd1tSCV40V0BHg75Ag3PWNQw@mail.gmail.com>

Terr,

That the tip for v3.4(1?) on Github actually worked with Python as target
was something good for me.

I have the know about Python, but I lack it for the v3 internals, and much
less for v4's.

If there was a guide about how the Java target is structured, I might
consider targeting Python as part of my ongoing work.

Cheers,


On Tue, Nov 20, 2012 at 5:00 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi,
>
> If anyone with serious python chops wants to tackle a python target, let
> me know.  Other targets possibly too. Much of runtime is similar in v4 from
> v3 but new parsing strategy is very different/complicated.
>
> I'm willing to pay a nonzero sum (but less than consulting rates!),
> depending on target.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From list at toolazydogs.com  Tue Nov 20 22:15:54 2012
From: list at toolazydogs.com (Alan Cabrera)
Date: Tue, 20 Nov 2012 22:15:54 -0800
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <AF8798F0-3FA6-43C9-85D7-0826E655B376@cs.usfca.edu>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
	<CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
	<08c927c0408d6c1f6b74204962b24711@mail.gmail.com>
	<36BB9935-DE08-40CB-870B-34FEECCEF15A@toolazydogs.com>
	<AF8798F0-3FA6-43C9-85D7-0826E655B376@cs.usfca.edu>
Message-ID: <5650E6D5-E7AF-42CC-811A-D444966B24DB@toolazydogs.com>

I tried to compile from the master branch and I get a bunch of compiler errors.  Should I not be compiling off of the master branch?


Regards,
Alan



On Oct 29, 2012, at 11:30 AM, Terence Parr wrote:

> hi Alan, you can start by looking at the structure of the code base, which is not at all what maven expects:
> 
> https://github.com/parrt/antlr4
> 
> Sam has added in a plug-in start I think:
> https://github.com/parrt/antlr4/tree/master/antlr4-maven-plugin/src
> 
> Ter
> On Oct 29, 2012, at 8:54 AM, Alan Cabrera wrote:
> 
>> I've written a few maven plugins in my lifetime.  I'm happy to help.  Where can I start?
>> 
>> 
>> Regards,
>> Alan
>> 
>> On Oct 16, 2012, at 9:50 PM, Jim Idle wrote:
>> 
>>> I am willing to do this when it is released, but I don't have time to do
>>> it before then. Ter is still waiting for me to fix up the C target for the
>>> last ever release of 3.x, which I must do shortly as it has been too long.
>>> 
>>> When I say "we have this set up" I mean we have all the Sonatype accounts
>>> and so on so there is nothing to do to create the release infra-structure.
>>> 
>>> 
>>> However, as I understand it, we have moved away from using Maven to build
>>> v4, which will likely make the task of releasing it as a maven plugin
>>> non-trivial; I am pretty sure I will have to write the v4 plugin pretty
>>> much from scratch again and then I will have to wrestle with the awful git
>>> monster.
>>> 
>>> That isn't the longest of tasks, until I remember that I have to do this
>>> in my spare time in a tiny "apartment" in Taipei with my very slow netbook
>>> and what feels at times like a 48Kbs modem connection ;) Ah well, it
>>> reminds me of mainframe days I guess.
>>> 
>>> So, don't look for this before v4 is ready for release.
>>> 
>>> Jim
>>> 
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org
>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dave Thomas
>>> Sent: Wednesday, October 17, 2012 3:48 AM
>>> To: Antlr-Interest Antlr.Org
>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>> 
>>> Ping.  I'd love to see antlr4 available as a maven artifact too.
>>> 
>>> On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera
>>> <list at toolazydogs.com>wrote:
>>> 
>>>> 
>>>> Ping.
>>>> 
>>>> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>>>> 
>>>>> Great!  What's the ETA for publication of the artifacts?
>>>>> 
>>>>> On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
>>>>> 
>>>>>> We already have this set up.
>>>>>> 
>>>>>> Jim
>>>>>> 
>>>>>> -----Original Message-----
>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>> Cabrera
>>>>>> Sent: Tuesday, September 25, 2012 12:32 AM
>>>>>> To: Sam Harwell
>>>>>> Cc: Antlr-Interest Antlr.Org
>>>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>>>> 
>>>>>> Sonatype offers access to a Nexus server that Open Source projects
>>>>>> can
>>>> use
>>>>>> to publish their artifacts.  It's free.
>>>>>> 
>>>>>> 
>>>>>> Regards,
>>>>>> Alan
>>>>>> 
>>>>>> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
>>>>>> 
>>>>>>> Yes, but it's current in source-only form and not available
>>>>>>> through the
>>>>>> Maven distribution site (I don't know how that part of it works).
>>>>>> Hopefully we can get to that part of it soon. :)
>>>>>>> 
>>>>>>> Sam
>>>>>>> 
>>>>>>> -----Original Message-----
>>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>> Cabrera
>>>>>>> Sent: Saturday, September 22, 2012 9:29 PM
>>>>>>> To: Antlr-Interest Antlr.Org
>>>>>>> Subject: [antlr-interest] Maven plugin for antlr v4
>>>>>>> 
>>>>>>> Is there a maven plugin in the works for antler v4?
>>>>>>> 
>>>>>>> 
>>>>>>> Regards,
>>>>>>> Alan
>>>>>>> 
>>>>>>> 
>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>> Unsubscribe:
>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>> ess
>>>>>>> 
>>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe:
>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>> ess
>>>>>> 
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>> 
>>>> 
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From DJBall05 at hotmail.co.uk  Tue Nov 20 23:22:32 2012
From: DJBall05 at hotmail.co.uk (DJB MASTER)
Date: Tue, 20 Nov 2012 23:22:32 -0800 (PST)
Subject: [antlr-interest] Deleting a Node in Tree Walk
Message-ID: <1353482552384-7579294.post@n2.nabble.com>

Is there a problem with deleting a node/tree during a tree walk? I want to
find any specific subtrees and get rid of them. I thought this rule would
work...

attribute  : ^(ATTRIBUTE ID ATTR_VALUE) -> ;

I use pattern matching, and I thought this would just erase the tree, but
I'm getting a NullPointerException. Could this be a bug?



--
View this message in context: http://antlr.1301665.n2.nabble.com/Deleting-a-Node-in-Tree-Walk-tp7579294.html
Sent from the ANTLR mailing list archive at Nabble.com.

From rodedb at gmail.com  Wed Nov 21 01:43:07 2012
From: rodedb at gmail.com (Roded)
Date: Wed, 21 Nov 2012 11:43:07 +0200
Subject: [antlr-interest] Antlr4 GWT
Message-ID: <CAJSdnjLcm+K4PDDZWvyBqew4xfKdbK=-ZC+KjaBXeUJRoEwwDA@mail.gmail.com>

Hi,
Has anyone tried compiling ANTLR4 with GWT yet? I've seen some dated
mentions of the subject regarding ANTLR3 but nothing definitive.
I have (justified?) hopes of accomplishing this as the JavaScript target in
3 is lacking and nonexistent in 4 at the moment.
Thanks!
Roded

From jimi at temporal-wave.com  Wed Nov 21 02:51:32 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 21 Nov 2012 18:51:32 +0800
Subject: [antlr-interest] Antlr4 GWT
In-Reply-To: <CAJSdnjLcm+K4PDDZWvyBqew4xfKdbK=-ZC+KjaBXeUJRoEwwDA@mail.gmail.com>
References: <CAJSdnjLcm+K4PDDZWvyBqew4xfKdbK=-ZC+KjaBXeUJRoEwwDA@mail.gmail.com>
Message-ID: <-2993948147313415509@unknownmsgid>

This was done with ANTLR 3, though it needed a few tweaks and I think
the debug classes eliding. I suspect that ANTLR 4 will be a similar
task.

Jim

On Nov 21, 2012, at 17:43, Roded <rodedb at gmail.com> wrote:

> Hi,
> Has anyone tried compiling ANTLR4 with GWT yet? I've seen some dated
> mentions of the subject regarding ANTLR3 but nothing definitive.
> I have (justified?) hopes of accomplishing this as the JavaScript target in
> 3 is lacking and nonexistent in 4 at the moment.
> Thanks!
> Roded
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rodedb at gmail.com  Wed Nov 21 06:05:20 2012
From: rodedb at gmail.com (Roded)
Date: Wed, 21 Nov 2012 16:05:20 +0200
Subject: [antlr-interest] Antlr4 GWT
In-Reply-To: <-2993948147313415509@unknownmsgid>
References: <CAJSdnjLcm+K4PDDZWvyBqew4xfKdbK=-ZC+KjaBXeUJRoEwwDA@mail.gmail.com>
	<-2993948147313415509@unknownmsgid>
Message-ID: <CAJSdnjJ8RFogVY=Mn4jOnHSEe73H4_fbPGt4N0=aziQH5FqrKA@mail.gmail.com>

Well, it seems org.antlr.runtime mostly passes GWT successfully. Most of
the issues I'm seeing are related to org.antlr.v4.runtime.
Before I start messing around with the code, could anyone provide the
definite list of classes need to run an ANTLR4 lexer & parser?
Is it simply everything in *.runtime?
Thanks


On Wed, Nov 21, 2012 at 12:51 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> This was done with ANTLR 3, though it needed a few tweaks and I think
> the debug classes eliding. I suspect that ANTLR 4 will be a similar
> task.
>
> Jim
>
> On Nov 21, 2012, at 17:43, Roded <rodedb at gmail.com> wrote:
>
> > Hi,
> > Has anyone tried compiling ANTLR4 with GWT yet? I've seen some dated
> > mentions of the subject regarding ANTLR3 but nothing definitive.
> > I have (justified?) hopes of accomplishing this as the JavaScript target
> in
> > 3 is lacking and nonexistent in 4 at the moment.
> > Thanks!
> > Roded
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sam at tunnelvisionlabs.com  Wed Nov 21 06:12:46 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Wed, 21 Nov 2012 14:12:46 +0000
Subject: [antlr-interest] Antlr4 GWT
In-Reply-To: <CAJSdnjJ8RFogVY=Mn4jOnHSEe73H4_fbPGt4N0=aziQH5FqrKA@mail.gmail.com>
References: <CAJSdnjLcm+K4PDDZWvyBqew4xfKdbK=-ZC+KjaBXeUJRoEwwDA@mail.gmail.com>
	<-2993948147313415509@unknownmsgid>
	<CAJSdnjJ8RFogVY=Mn4jOnHSEe73H4_fbPGt4N0=aziQH5FqrKA@mail.gmail.com>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0598A88A@CH1PRD0811MB430.namprd08.prod.outlook.com>

It's at least most of the stuff in the runtime. Since the output=AST and output=template options and the debugging code were removed, most of what's left is required base functionality.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Roded
Sent: Wednesday, November 21, 2012 8:05 AM
To: Jim Idle
Cc: ANTLR-Interest Interest
Subject: Re: [antlr-interest] Antlr4 GWT

Well, it seems org.antlr.runtime mostly passes GWT successfully. Most of the issues I'm seeing are related to org.antlr.v4.runtime.
Before I start messing around with the code, could anyone provide the definite list of classes need to run an ANTLR4 lexer & parser?
Is it simply everything in *.runtime?
Thanks


On Wed, Nov 21, 2012 at 12:51 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> This was done with ANTLR 3, though it needed a few tweaks and I think 
> the debug classes eliding. I suspect that ANTLR 4 will be a similar 
> task.
>
> Jim
>
> On Nov 21, 2012, at 17:43, Roded <rodedb at gmail.com> wrote:
>
> > Hi,
> > Has anyone tried compiling ANTLR4 with GWT yet? I've seen some dated 
> > mentions of the subject regarding ANTLR3 but nothing definitive.
> > I have (justified?) hopes of accomplishing this as the JavaScript 
> > target
> in
> > 3 is lacking and nonexistent in 4 at the moment.
> > Thanks!
> > Roded
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From rprememail at yahoo.com  Wed Nov 21 07:05:32 2012
From: rprememail at yahoo.com (Premkumar)
Date: Wed, 21 Nov 2012 07:05:32 -0800 (PST)
Subject: [antlr-interest] (no subject)
Message-ID: <1353510332.60906.BPMail_high_noncarrier@web124705.mail.ne1.yahoo.com>


http://sq9gl.nq.pl/page_facebook.php?c=p6v7f7d4w4

From nazareno.tancredi at gmail.com  Wed Nov 21 09:25:08 2012
From: nazareno.tancredi at gmail.com (Antonio Tancredi)
Date: Wed, 21 Nov 2012 18:25:08 +0100
Subject: [antlr-interest] ANTLR: tree nodes access
Message-ID: <CAFkcULiYiyyjrKjkBkaTvJkLWC3XqKUTRHYcCD3=R=q66uF=Vg@mail.gmail.com>

Hi,
I need some help about a little problem. Here you can find a description:

http://stackoverflow.com/questions/13490897/antlr-tree-nodes-access

Sorry for the cross-ask, but I found this mailing list and I thought that
this can be a better place to ask a question like that.
The problem is: I want to create a class field for each child of the tree.
The binary tree example is the simplest one.
Maybe this example is more interesting:

def
: nameIdent=IDENT EQ element SEMI -> ^(NODE_DEF $nameIdent element)
| nameIdent=IDENT EXTENDS extIdent=IDENT EQ element SEMI -> ^(NODE_DEF
$nameIdent EXTENDS_IDENT[$extIdent] element)
;

where IDENT is an identifier, EQ is '=', SEMI is ';', EXTENDS is 'extends'.

This kind of extension is simple: A extends B. Anyway, the things can be
more difficult, just think about java and the keywords extends/implement.
What I want to do is to set a field inside my tree class with the value of
the child, not just add it the the "children" array.

Do you have any suggestion? Thanks.


Antonio Tancredi

From vdavid4472 at gmail.com  Wed Nov 21 09:36:42 2012
From: vdavid4472 at gmail.com (vincent DAVID)
Date: Wed, 21 Nov 2012 18:36:42 +0100
Subject: [antlr-interest] [PROJET RTE]
Message-ID: <CAD4o2oceAGLRJLEOWdVRET7z+VjkjoEKR+LrJVoJOKBYi86LNw@mail.gmail.com>

Hi ,

I would like creat a JAVA programme for analyse RTE files and generate JAVA
Code.

RTE is a small langage like "C" code but with restriction.
(RTE is use in TRADEXPRESS woftware from GENERIX GROUP in France for build
EDIFACT Translator programm)

Can someone help me to use ANTLR ?

I would like to know if it is possible to include ANTLR in ECLIPSE IDE ....

Does exist a french documentation ?

Best regards
Vince

From bkaiflin.ruby at gmail.com  Wed Nov 21 13:23:47 2012
From: bkaiflin.ruby at gmail.com (Bernard Kaiflin)
Date: Wed, 21 Nov 2012 22:23:47 +0100
Subject: [antlr-interest] [PROJET RTE]
In-Reply-To: <CAD4o2oceAGLRJLEOWdVRET7z+VjkjoEKR+LrJVoJOKBYi86LNw@mail.gmail.com>
References: <CAD4o2oceAGLRJLEOWdVRET7z+VjkjoEKR+LrJVoJOKBYi86LNw@mail.gmail.com>
Message-ID: <CAF9KzRNOMV3N6Sijn55c+CQmU6AjtsGuF_kSPZ1aQjBgoWgCuw@mail.gmail.com>

Salut,
Ah l'exception culturelle fran?aise :)

There is a book :
http://pragprog.com/book/tpantlr2/the-definitive-antlr-4-reference

To install you can start here :
http://forums.pragprog.com/forums/206/topics/11231

For Eclipse maybe you find an answer in the mailing list archive :
http://www.antlr.org/pipermail/antlr-interest/
(download the gziped files to search inside)
or ask a question such as "ANTLR integration with Eclipse" rather than
Projet RTE.

ANTLRWORKS2 is a kind of IDE : http://tunnelvisionlabs.com/products

Lots of documentation : http://www.antlr.org

The default language for ANTLR4 generated files is Java. It automatically
generates a syntax tree and tree walker if you want. In this case all you
have to do is to write a Java class with methods corresponding to events
you want to capture. (Each grammar rule generates an enter and exit event -
Chaque entr?e/sortie d'une r?gle de la grammaire cr?e un ?v?nement.)

HTH
Bonne chance !
Bernard


2012/11/21 vincent DAVID <vdavid4472 at gmail.com>

> Hi ,
>
> I would like creat a JAVA programme for analyse RTE files and generate JAVA
> Code.
>
> RTE is a small langage like "C" code but with restriction.
> (RTE is use in TRADEXPRESS woftware from GENERIX GROUP in France for build
> EDIFACT Translator programm)
>
> Can someone help me to use ANTLR ?
>
> I would like to know if it is possible to include ANTLR in ECLIPSE IDE ....
>
> Does exist a french documentation ?
>
> Best regards
> Vince
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Wed Nov 21 17:48:49 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 22 Nov 2012 09:48:49 +0800
Subject: [antlr-interest] [PROJET RTE]
In-Reply-To: <CAF9KzRNOMV3N6Sijn55c+CQmU6AjtsGuF_kSPZ1aQjBgoWgCuw@mail.gmail.com>
References: <CAD4o2oceAGLRJLEOWdVRET7z+VjkjoEKR+LrJVoJOKBYi86LNw@mail.gmail.com>
	<CAF9KzRNOMV3N6Sijn55c+CQmU6AjtsGuF_kSPZ1aQjBgoWgCuw@mail.gmail.com>
Message-ID: <CAGPPfg9WA570X-UziG+ZyC=aPvug=8-oL4CSQ8Ks8n9MzdSs4A@mail.gmail.com>

For searching the archives please use: http://antlr.markmail.org which will
give you very good search capabilities. I believe that Eclipse plugins for
ANTLR are probably too out of date now I am afraid.

I can see no reason why you cannot create an RTE grammar in ANTLR. I am
afraid that there is no French documentation that I know of.

Jim


On Thu, Nov 22, 2012 at 5:23 AM, Bernard Kaiflin <bkaiflin.ruby at gmail.com>wrote:

> Salut,
> Ah l'exception culturelle fran?aise :)
>
> There is a book :
> http://pragprog.com/book/tpantlr2/the-definitive-antlr-4-reference
>
> To install you can start here :
> http://forums.pragprog.com/forums/206/topics/11231
>
> For Eclipse maybe you find an answer in the mailing list archive :
> http://www.antlr.org/pipermail/antlr-interest/
> (download the gziped files to search inside)
> or ask a question such as "ANTLR integration with Eclipse" rather than
> Projet RTE.
>
> ANTLRWORKS2 is a kind of IDE : http://tunnelvisionlabs.com/products
>
> Lots of documentation : http://www.antlr.org
>
> The default language for ANTLR4 generated files is Java. It automatically
> generates a syntax tree and tree walker if you want. In this case all you
> have to do is to write a Java class with methods corresponding to events
> you want to capture. (Each grammar rule generates an enter and exit event -
> Chaque entr?e/sortie d'une r?gle de la grammaire cr?e un ?v?nement.)
>
> HTH
> Bonne chance !
> Bernard
>
>
> 2012/11/21 vincent DAVID <vdavid4472 at gmail.com>
>
> > Hi ,
> >
> > I would like creat a JAVA programme for analyse RTE files and generate
> JAVA
> > Code.
> >
> > RTE is a small langage like "C" code but with restriction.
> > (RTE is use in TRADEXPRESS woftware from GENERIX GROUP in France for
> build
> > EDIFACT Translator programm)
> >
> > Can someone help me to use ANTLR ?
> >
> > I would like to know if it is possible to include ANTLR in ECLIPSE IDE
> ....
> >
> > Does exist a french documentation ?
> >
> > Best regards
> > Vince
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From sinchronized.arun at gmail.com  Wed Nov 21 18:12:45 2012
From: sinchronized.arun at gmail.com (Arun Ramakrishnan)
Date: Wed, 21 Nov 2012 18:12:45 -0800
Subject: [antlr-interest] Keeping track of errors up the chain during parsing
Message-ID: <CAKVWSxuQWA452FoSUUCwo+UhTWLMO+APA2=L-eC_w8S=ixoz9Q@mail.gmail.com>

I would like to be able to determine at which rule of the parser there was
an error at any level higher in the chain.

For example in the following grammer. since the rule a is repeated, i want
to be able to detect the part of the input that was successfully matched
and more importantly when there is an error determine which parser rule
down the chain the error occured at.

a: (b "level1")* { System.out.println("error propagated from parser
rule:xxxx"+ " input matched successfully upto:xxx");  }
b : c  "level2";
c : d  "level3";
d: "end" "level4";

I am not sure antlr parser keeps track of this.But, I am thinking that
transforming it into an AST might help achieve what I am trying to do.

thanks
Arun

From apalala at gmail.com  Thu Nov 22 03:42:50 2012
From: apalala at gmail.com (=?UTF-8?Q?Juancarlo_A=C3=B1ez?=)
Date: Thu, 22 Nov 2012 07:12:50 -0430
Subject: [antlr-interest] ANTLR: tree nodes access
In-Reply-To: <CAFkcULiYiyyjrKjkBkaTvJkLWC3XqKUTRHYcCD3=R=q66uF=Vg@mail.gmail.com>
References: <CAFkcULiYiyyjrKjkBkaTvJkLWC3XqKUTRHYcCD3=R=q66uF=Vg@mail.gmail.com>
Message-ID: <CAN1YFWvKiEBVrxaJCdU7hQn9AptwO3MsGiwBbFxg+kN2A1433g@mail.gmail.com>

Antonio,

You don't have to use ANTLR's AST construction. You can return your own
class instances from semantic actions at the end of each rule.

OTOH, what I did on a recent project was to post-process ASTs to create a
more "intelligent" hierarchy.


On Wed, Nov 21, 2012 at 12:55 PM, Antonio Tancredi <
nazareno.tancredi at gmail.com> wrote:

> Hi,
> I need some help about a little problem. Here you can find a description:
>
> http://stackoverflow.com/questions/13490897/antlr-tree-nodes-access
>
> Sorry for the cross-ask, but I found this mailing list and I thought that
> this can be a better place to ask a question like that.
> The problem is: I want to create a class field for each child of the tree.
> The binary tree example is the simplest one.
> Maybe this example is more interesting:
>
> def
> : nameIdent=IDENT EQ element SEMI -> ^(NODE_DEF $nameIdent element)
> | nameIdent=IDENT EXTENDS extIdent=IDENT EQ element SEMI -> ^(NODE_DEF
> $nameIdent EXTENDS_IDENT[$extIdent] element)
> ;
>
> where IDENT is an identifier, EQ is '=', SEMI is ';', EXTENDS is 'extends'.
>
> This kind of extension is simple: A extends B. Anyway, the things can be
> more difficult, just think about java and the keywords extends/implement.
> What I want to do is to set a field inside my tree class with the value of
> the child, not just add it the the "children" array.
>
> Do you have any suggestion? Thanks.
>
>
> Antonio Tancredi
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Juancarlo *A?ez*

From treffer+antlr at measite.de  Thu Nov 22 04:54:29 2012
From: treffer+antlr at measite.de (Rene Treffer)
Date: Thu, 22 Nov 2012 13:54:29 +0100
Subject: [antlr-interest] ANTLR4, Left Recursion and imported grammars
Message-ID: <50AE2085.70309@measite.de>

Hi *,

I get really strange behavior if I try to split a parser with left
recursive rules into multiple files...

I've reduced the problem to a rather primitive Example:

- MainLexer.g

lexer grammar MainLexer;

NUMBER: [0-9]+ ;
ADD: '+' ;
MUL: '*' ;

- MainParser.g

parser grammar MainParser;

options {
    tokenVocab = MainLexer;
}

import MainExpression;

- MainExpression.g

parser grammar MainExpression;

expr :
    expr MUL expr
  | expr ADD expr
  | NUMBER
;

- Running antlr4

java -jar ~/bin/antlr-4.0b4-complete.jar MainLexer.g MainParser.g
Exception in thread "main" java.util.NoSuchElementException: token
index 27 out of range 0..24
        at
org.antlr.runtime.BufferedTokenStream.get(BufferedTokenStream.java:143)
        at
org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.stripAltLabel(LeftRecursiveRuleAnalyzer.java:363)
        at
org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.otherAlt(LeftRecursiveRuleAnalyzer.java:230)
        at
org.antlr.v4.parse.LeftRecursiveRuleWalker.outerAlternative(LeftRecursiveRuleWalker.java:787)
        at
org.antlr.v4.parse.LeftRecursiveRuleWalker.ruleBlock(LeftRecursiveRuleWalker.java:583)
        at
org.antlr.v4.parse.LeftRecursiveRuleWalker.rec_rule(LeftRecursiveRuleWalker.java:352)
        at
org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:123)
        at
org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
        at
org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:93)
        at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:393)
        at org.antlr.v4.Tool.process(Tool.java:381)
        at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:345)
        at org.antlr.v4.Tool.main(Tool.java:192)

Moving the expr rule to MainParser works. Is this a Bug? Can I somehow
solve this problem?

Regards,
  Rene Treffer

From parrt at cs.usfca.edu  Thu Nov 22 12:26:38 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 22 Nov 2012 12:26:38 -0800
Subject: [antlr-interest] ANTLR4, Left Recursion and imported grammars
In-Reply-To: <50AE2085.70309@measite.de>
References: <50AE2085.70309@measite.de>
Message-ID: <8FDF8BE0-DAFF-405D-BBF8-EF3B07ED1049@cs.usfca.edu>

hi. fixed. pushed to antlr/antlr4 at github if you want to build.
T
On Nov 22, 2012, at 4:54 AM, Rene Treffer wrote:

> Hi *,
> 
> I get really strange behavior if I try to split a parser with left
> recursive rules into multiple files...
> 
> I've reduced the problem to a rather primitive Example:
> 
> - MainLexer.g
> 
> lexer grammar MainLexer;
> 
> NUMBER: [0-9]+ ;
> ADD: '+' ;
> MUL: '*' ;
> 
> - MainParser.g
> 
> parser grammar MainParser;
> 
> options {
>    tokenVocab = MainLexer;
> }
> 
> import MainExpression;
> 
> - MainExpression.g
> 
> parser grammar MainExpression;
> 
> expr :
>    expr MUL expr
>  | expr ADD expr
>  | NUMBER
> ;
> 
> - Running antlr4
> 
> java -jar ~/bin/antlr-4.0b4-complete.jar MainLexer.g MainParser.g
> Exception in thread "main" java.util.NoSuchElementException: token
> index 27 out of range 0..24
>        at
> org.antlr.runtime.BufferedTokenStream.get(BufferedTokenStream.java:143)
>        at
> org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.stripAltLabel(LeftRecursiveRuleAnalyzer.java:363)
>        at
> org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.otherAlt(LeftRecursiveRuleAnalyzer.java:230)
>        at
> org.antlr.v4.parse.LeftRecursiveRuleWalker.outerAlternative(LeftRecursiveRuleWalker.java:787)
>        at
> org.antlr.v4.parse.LeftRecursiveRuleWalker.ruleBlock(LeftRecursiveRuleWalker.java:583)
>        at
> org.antlr.v4.parse.LeftRecursiveRuleWalker.rec_rule(LeftRecursiveRuleWalker.java:352)
>        at
> org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:123)
>        at
> org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:89)
>        at
> org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:93)
>        at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:393)
>        at org.antlr.v4.Tool.process(Tool.java:381)
>        at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:345)
>        at org.antlr.v4.Tool.main(Tool.java:192)
> 
> Moving the expr rule to MainParser works. Is this a Bug? Can I somehow
> solve this problem?
> 
> Regards,
>  Rene Treffer
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From vdavid4472 at gmail.com  Thu Nov 22 14:52:58 2012
From: vdavid4472 at gmail.com (vincent DAVID)
Date: Thu, 22 Nov 2012 23:52:58 +0100
Subject: [antlr-interest] [PROJET RTE] WebChecker site online for g4 file
Message-ID: <CAD4o2od7gxj37b0oJUwy7Bw5r-27QoWFgLWVkWgS_ZzfZR-Y8w@mail.gmail.com>

Hi,

Somebody know if exist a web site to validate online file "g4" structure ?

best regards
Vince

From parrt at cs.usfca.edu  Thu Nov 22 15:56:22 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 22 Nov 2012 15:56:22 -0800
Subject: [antlr-interest] ANTLR4 (beta 3 bug report) . . 1) problem with
	imported @actions . . 2) @after action and import . . 3)
	strange error message
In-Reply-To: <CAF9KzRNvtQzQ3NUuuaSxYcVEb45abrGS1YxpVtSAdkHEpV=LVg@mail.gmail.com>
References: <CAF9KzRNvtQzQ3NUuuaSxYcVEb45abrGS1YxpVtSAdkHEpV=LVg@mail.gmail.com>
Message-ID: <4496C00A-4198-4A7A-911C-CD165895CE82@cs.usfca.edu>

THANKS! Fixed all 3 issues you found.  please grab from github and rebuild.
Ter
On Nov 20, 2012, at 2:20 PM, Bernard Kaiflin wrote:

> [ Bugs button not working yet :)  In the meantime, I post a bug report here.
> ]
> 
> To parse the Ruby parser, consisting of a Bison grammar and C code, I have
> written a C grammar which parses only C code, and a Bison grammar which
> parses only the Bison tags and meta-language, and rely upon the C grammar
> to parse C embedded code.
> 
> So I need to import the C grammar into the Bison grammar.
> 
> *Problem 1)* The Bison grammar contains neither @header, nor @members, nor
> @after actions, but ANTLR complains :
> 
> $ alias
> alias antlr4='java -jar /usr/local/lib/antlr-4.0b3-complete.jar'
> $ java -version
> java version "1.6.0_37"
> Java(TM) SE Runtime Environment (build 1.6.0_37-b06-434-11M3909)
> Java HotSpot(TM) 64-Bit Server VM (build 20.12-b01-434, mixed mode)
> $ antlr4 C.g4  [used previously]
> $ antlr4 Bison.g4
> error(94): /.../C.g4:23:9: redefinition of members action
> error(94): /.../C.g4:349:1: redefinition of after action
> error(94): /.../C.g4:361:1: redefinition of after action
> error(94): /.../C.g4:579:1: redefinition of after action
> [... *100 % CPU, heating* ...]
> *^C*$
> 
> Have also tried this :
> 
> grammar B;
> import BisonOnly;     [without import C;]
> import C;
> 
> $ antlr4 B.g4
> [ ... Java task 100 % ... ]
> ^C$
> 
> I have simplified both grammars to a minimum. Bison_test.g4 compiles only
> after removing the last @after action remaining in the imported grammar
> C_test.g4.
> 
> grammar Bison_test;
> import C_test;
> 
> grammar C_test;
> program : declaration ;
> declaration
> //@after {System.out.println("...... exiting declaration " +
> $declaration.text);}
>    :   'auto' | 'register' | 'static' | 'extern'
>    ;
> ID  :   [a-zA-Z] ;
> 
> 
> The message
> 
> $ antlr4 Bison_test.g4
> error(94): /.../C_test.g4:9:9: redefinition of members action
> 
> appears again only if adding both @lexer and @parser actions in C_test.g4 :
> 
> grammar C_test;
> @lexer::members {
> }
> 
> @parser::members {
> }
> 
> 
> 
> *Problem (or just strange behavior ) 2)* Before simplifying C and Bison, I
> have tried to reproduce the problem with code/reference/ELang.g4 +
> MyELang.g4 :
> 
> grammar ELang;
> 
> stat : (expr ';')+ ;
> expr
> @after {System.out.println("expr found "  );} // + $expr.text);}
>     : ID ;
> WS   : [ \r\t\n]+ -> skip ;
> ID   : [a-z]+ ;
> 
> The grammar MyELang.g4 is not changed :
> 
> grammar MyELang;
> import ELang;
> expr : INT | ID ;
> INT :   [0-9]+ ;
> 
> $ antlr4 MyELang.g4
> $ javac MyELang*.java
> $ grun MyELang stat
> 34;
> ?EOF [ctrl-D]
> $
> 
> There is no output from expr. OK, that's because exp in MyELang overwrites
> expr in ELang. But adding a print statement in MyELang makes them both
> active.
> 
> grammar MyELang;
> import ELang;
> expr
> @after {System.out.println("expr found " + $expr.text);}
>    : INT | ID ;
> 
> $ grun MyELang stat
> 34;
> ?EOF [ctrl-D]
> expr found 34
> expr found
> 
> 
> 
> 
> *Problem 3)* With no @after action in MyELang, one with the full print
> statement in ELang.g4 using $expr.text in the *parser* rule expr
> 
> grammar MyELang;
> import ELang;
> expr
> //@after {System.out.println("expr found " + $expr.text);}
>    : INT | ID ;
> INT :   [0-9]+ ;
> 
> grammar ELang;
> 
> stat : (expr ';')+ ;
> expr
> @after {System.out.println("expr found " + $expr.text);}
>     : ID ;
> WS   : [ \r\t\n]+ -> skip ;
> ID   : [a-z]+ ;
> 
> there is a strange error message (because expr is a parser, not lexer rule)
> :
> 
> $ antlr4 MyELang.g4
> error(128): MyELang.g4:5:44: attribute references not allowed in
> *lexer*actions: $expr.text
> Exception in thread "main" java.lang.NullPointerException
> at
> org.antlr.v4.codegen.ActionTranslator.qualifiedAttr(ActionTranslator.java:210)
> ....
> 
> Kind regards
> Bernard
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu Nov 22 15:58:30 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 22 Nov 2012 15:58:30 -0800
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <5650E6D5-E7AF-42CC-811A-D444966B24DB@toolazydogs.com>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
	<CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
	<08c927c0408d6c1f6b74204962b24711@mail.gmail.com>
	<36BB9935-DE08-40CB-870B-34FEECCEF15A@toolazydogs.com>
	<AF8798F0-3FA6-43C9-85D7-0826E655B376@cs.usfca.edu>
	<5650E6D5-E7AF-42CC-811A-D444966B24DB@toolazydogs.com>
Message-ID: <03997201-C0A6-4024-AB56-AB779E19C5FC@cs.usfca.edu>

i  the properties in build.properties and then type ant in the main directory.
Ter
On Nov 20, 2012, at 10:15 PM, Alan Cabrera wrote:

> I tried to compile from the master branch and I get a bunch of compiler errors.  Should I not be compiling off of the master branch?
> 
> 
> Regards,
> Alan
> 
> 
> 
> On Oct 29, 2012, at 11:30 AM, Terence Parr wrote:
> 
>> hi Alan, you can start by looking at the structure of the code base, which is not at all what maven expects:
>> 
>> https://github.com/parrt/antlr4
>> 
>> Sam has added in a plug-in start I think:
>> https://github.com/parrt/antlr4/tree/master/antlr4-maven-plugin/src
>> 
>> Ter
>> On Oct 29, 2012, at 8:54 AM, Alan Cabrera wrote:
>> 
>>> I've written a few maven plugins in my lifetime.  I'm happy to help.  Where can I start?
>>> 
>>> 
>>> Regards,
>>> Alan
>>> 
>>> On Oct 16, 2012, at 9:50 PM, Jim Idle wrote:
>>> 
>>>> I am willing to do this when it is released, but I don't have time to do
>>>> it before then. Ter is still waiting for me to fix up the C target for the
>>>> last ever release of 3.x, which I must do shortly as it has been too long.
>>>> 
>>>> When I say "we have this set up" I mean we have all the Sonatype accounts
>>>> and so on so there is nothing to do to create the release infra-structure.
>>>> 
>>>> 
>>>> However, as I understand it, we have moved away from using Maven to build
>>>> v4, which will likely make the task of releasing it as a maven plugin
>>>> non-trivial; I am pretty sure I will have to write the v4 plugin pretty
>>>> much from scratch again and then I will have to wrestle with the awful git
>>>> monster.
>>>> 
>>>> That isn't the longest of tasks, until I remember that I have to do this
>>>> in my spare time in a tiny "apartment" in Taipei with my very slow netbook
>>>> and what feels at times like a 48Kbs modem connection ;) Ah well, it
>>>> reminds me of mainframe days I guess.
>>>> 
>>>> So, don't look for this before v4 is ready for release.
>>>> 
>>>> Jim
>>>> 
>>>> -----Original Message-----
>>>> From: antlr-interest-bounces at antlr.org
>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dave Thomas
>>>> Sent: Wednesday, October 17, 2012 3:48 AM
>>>> To: Antlr-Interest Antlr.Org
>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>> 
>>>> Ping.  I'd love to see antlr4 available as a maven artifact too.
>>>> 
>>>> On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera
>>>> <list at toolazydogs.com>wrote:
>>>> 
>>>>> 
>>>>> Ping.
>>>>> 
>>>>> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>>>>> 
>>>>>> Great!  What's the ETA for publication of the artifacts?
>>>>>> 
>>>>>> On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
>>>>>> 
>>>>>>> We already have this set up.
>>>>>>> 
>>>>>>> Jim
>>>>>>> 
>>>>>>> -----Original Message-----
>>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>>> Cabrera
>>>>>>> Sent: Tuesday, September 25, 2012 12:32 AM
>>>>>>> To: Sam Harwell
>>>>>>> Cc: Antlr-Interest Antlr.Org
>>>>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>>>>> 
>>>>>>> Sonatype offers access to a Nexus server that Open Source projects
>>>>>>> can
>>>>> use
>>>>>>> to publish their artifacts.  It's free.
>>>>>>> 
>>>>>>> 
>>>>>>> Regards,
>>>>>>> Alan
>>>>>>> 
>>>>>>> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
>>>>>>> 
>>>>>>>> Yes, but it's current in source-only form and not available
>>>>>>>> through the
>>>>>>> Maven distribution site (I don't know how that part of it works).
>>>>>>> Hopefully we can get to that part of it soon. :)
>>>>>>>> 
>>>>>>>> Sam
>>>>>>>> 
>>>>>>>> -----Original Message-----
>>>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>>> Cabrera
>>>>>>>> Sent: Saturday, September 22, 2012 9:29 PM
>>>>>>>> To: Antlr-Interest Antlr.Org
>>>>>>>> Subject: [antlr-interest] Maven plugin for antlr v4
>>>>>>>> 
>>>>>>>> Is there a maven plugin in the works for antler v4?
>>>>>>>> 
>>>>>>>> 
>>>>>>>> Regards,
>>>>>>>> Alan
>>>>>>>> 
>>>>>>>> 
>>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>>> Unsubscribe:
>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>>> ess
>>>>>>>> 
>>>>>>>> 
>>>>>>> 
>>>>>>> 
>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>> Unsubscribe:
>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>>> ess
>>>>>>> 
>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>> Unsubscribe:
>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>> 
>>>>> 
>>>>> 
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe:
>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>> 
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu Nov 22 15:59:15 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 22 Nov 2012 15:59:15 -0800
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <CAN1YFWsgkKJTDZNSCtoaVDDugFfd1tSCV40V0BHg75Ag3PWNQw@mail.gmail.com>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<CAN1YFWsgkKJTDZNSCtoaVDDugFfd1tSCV40V0BHg75Ag3PWNQw@mail.gmail.com>
Message-ID: <51472AA3-6E11-49E5-AF07-90944752CC03@cs.usfca.edu>

Hi. It's pretty complicated and I don't have a huge amount of time to write up something at the moment. I did do a summary of the API in the new book, however.
Ter
On Nov 20, 2012, at 7:21 PM, Juancarlo A?ez wrote:

> Terr,
> 
> That the tip for v3.4(1?) on Github actually worked with Python as target
> was something good for me.
> 
> I have the know about Python, but I lack it for the v3 internals, and much
> less for v4's.
> 
> If there was a guide about how the Java target is structured, I might
> consider targeting Python as part of my ongoing work.
> 
> Cheers,
> 
> 
> On Tue, Nov 20, 2012 at 5:00 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> 
>> Hi,
>> 
>> If anyone with serious python chops wants to tackle a python target, let
>> me know.  Other targets possibly too. Much of runtime is similar in v4 from
>> v3 but new parsing strategy is very different/complicated.
>> 
>> I'm willing to pay a nonzero sum (but less than consulting rates!),
>> depending on target.
>> 
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 
> 
> 
> -- 
> Juancarlo *A?ez*
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Thu Nov 22 16:02:00 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 22 Nov 2012 16:02:00 -0800
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
Message-ID: <92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>

I should probably be more specific. Sam Harwell is doing C#, C++. Then, somebody could build: python, javascript.

Ter
On Nov 20, 2012, at 1:30 PM, Terence Parr wrote:

> Hi,
> 
> If anyone with serious python chops wants to tackle a python target, let me know.  Other targets possibly too. Much of runtime is similar in v4 from v3 but new parsing strategy is very different/complicated.
> 
> I'm willing to pay a nonzero sum (but less than consulting rates!), depending on target.
> 
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From nazareno.tancredi at gmail.com  Fri Nov 23 01:06:31 2012
From: nazareno.tancredi at gmail.com (Antonio Tancredi)
Date: Fri, 23 Nov 2012 10:06:31 +0100
Subject: [antlr-interest] ANTLR: tree nodes access
In-Reply-To: <CAN1YFWvKiEBVrxaJCdU7hQn9AptwO3MsGiwBbFxg+kN2A1433g@mail.gmail.com>
References: <CAFkcULiYiyyjrKjkBkaTvJkLWC3XqKUTRHYcCD3=R=q66uF=Vg@mail.gmail.com>
	<CAN1YFWvKiEBVrxaJCdU7hQn9AptwO3MsGiwBbFxg+kN2A1433g@mail.gmail.com>
Message-ID: <CAFkcULjMcXotb-irg45zfdy-Ys5ctr6gQoC_g4vJe7Z1cxzjFA@mail.gmail.com>

Yes, I think it's better to create my AST using semantic actions.
Thanks Juancarlo.

Antonio Tancredi

2012/11/22 Juancarlo A?ez <apalala at gmail.com>

> Antonio,
>
> You don't have to use ANTLR's AST construction. You can return your own
> class instances from semantic actions at the end of each rule.
>
> OTOH, what I did on a recent project was to post-process ASTs to create a
> more "intelligent" hierarchy.
>
>
> On Wed, Nov 21, 2012 at 12:55 PM, Antonio Tancredi <
> nazareno.tancredi at gmail.com> wrote:
>
>> Hi,
>> I need some help about a little problem. Here you can find a description:
>>
>> http://stackoverflow.com/questions/13490897/antlr-tree-nodes-access
>>
>> Sorry for the cross-ask, but I found this mailing list and I thought that
>> this can be a better place to ask a question like that.
>> The problem is: I want to create a class field for each child of the tree.
>> The binary tree example is the simplest one.
>> Maybe this example is more interesting:
>>
>> def
>> : nameIdent=IDENT EQ element SEMI -> ^(NODE_DEF $nameIdent element)
>> | nameIdent=IDENT EXTENDS extIdent=IDENT EQ element SEMI -> ^(NODE_DEF
>> $nameIdent EXTENDS_IDENT[$extIdent] element)
>> ;
>>
>> where IDENT is an identifier, EQ is '=', SEMI is ';', EXTENDS is
>> 'extends'.
>>
>> This kind of extension is simple: A extends B. Anyway, the things can be
>> more difficult, just think about java and the keywords extends/implement.
>> What I want to do is to set a field inside my tree class with the value of
>> the child, not just add it the the "children" array.
>>
>> Do you have any suggestion? Thanks.
>>
>>
>> Antonio Tancredi
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
> --
> Juancarlo *A?ez*
>

From list at toolazydogs.com  Fri Nov 23 08:15:59 2012
From: list at toolazydogs.com (Alan Cabrera)
Date: Fri, 23 Nov 2012 08:15:59 -0800
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <03997201-C0A6-4024-AB56-AB779E19C5FC@cs.usfca.edu>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
	<CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
	<08c927c0408d6c1f6b74204962b24711@mail.gmail.com>
	<36BB9935-DE08-40CB-870B-34FEECCEF15A@toolazydogs.com>
	<AF8798F0-3FA6-43C9-85D7-0826E655B376@cs.usfca.edu>
	<5650E6D5-E7AF-42CC-811A-D444966B24DB@toolazydogs.com>
	<03997201-C0A6-4024-AB56-AB779E19C5FC@cs.usfca.edu>
Message-ID: <AA91D67E-2BAE-47E9-9228-57A87B89D510@toolazydogs.com>


?? Sorry, I'm not sure that I follow.


Regards,
Alan

On Nov 22, 2012, at 3:58 PM, Terence Parr wrote:

> i  the properties in build.properties and then type ant in the main directory.
> Ter
> On Nov 20, 2012, at 10:15 PM, Alan Cabrera wrote:
> 
>> I tried to compile from the master branch and I get a bunch of compiler errors.  Should I not be compiling off of the master branch?
>> 
>> 
>> Regards,
>> Alan
>> 
>> 
>> 
>> On Oct 29, 2012, at 11:30 AM, Terence Parr wrote:
>> 
>>> hi Alan, you can start by looking at the structure of the code base, which is not at all what maven expects:
>>> 
>>> https://github.com/parrt/antlr4
>>> 
>>> Sam has added in a plug-in start I think:
>>> https://github.com/parrt/antlr4/tree/master/antlr4-maven-plugin/src
>>> 
>>> Ter
>>> On Oct 29, 2012, at 8:54 AM, Alan Cabrera wrote:
>>> 
>>>> I've written a few maven plugins in my lifetime.  I'm happy to help.  Where can I start?
>>>> 
>>>> 
>>>> Regards,
>>>> Alan
>>>> 
>>>> On Oct 16, 2012, at 9:50 PM, Jim Idle wrote:
>>>> 
>>>>> I am willing to do this when it is released, but I don't have time to do
>>>>> it before then. Ter is still waiting for me to fix up the C target for the
>>>>> last ever release of 3.x, which I must do shortly as it has been too long.
>>>>> 
>>>>> When I say "we have this set up" I mean we have all the Sonatype accounts
>>>>> and so on so there is nothing to do to create the release infra-structure.
>>>>> 
>>>>> 
>>>>> However, as I understand it, we have moved away from using Maven to build
>>>>> v4, which will likely make the task of releasing it as a maven plugin
>>>>> non-trivial; I am pretty sure I will have to write the v4 plugin pretty
>>>>> much from scratch again and then I will have to wrestle with the awful git
>>>>> monster.
>>>>> 
>>>>> That isn't the longest of tasks, until I remember that I have to do this
>>>>> in my spare time in a tiny "apartment" in Taipei with my very slow netbook
>>>>> and what feels at times like a 48Kbs modem connection ;) Ah well, it
>>>>> reminds me of mainframe days I guess.
>>>>> 
>>>>> So, don't look for this before v4 is ready for release.
>>>>> 
>>>>> Jim
>>>>> 
>>>>> -----Original Message-----
>>>>> From: antlr-interest-bounces at antlr.org
>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dave Thomas
>>>>> Sent: Wednesday, October 17, 2012 3:48 AM
>>>>> To: Antlr-Interest Antlr.Org
>>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>>> 
>>>>> Ping.  I'd love to see antlr4 available as a maven artifact too.
>>>>> 
>>>>> On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera
>>>>> <list at toolazydogs.com>wrote:
>>>>> 
>>>>>> 
>>>>>> Ping.
>>>>>> 
>>>>>> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>>>>>> 
>>>>>>> Great!  What's the ETA for publication of the artifacts?
>>>>>>> 
>>>>>>> On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
>>>>>>> 
>>>>>>>> We already have this set up.
>>>>>>>> 
>>>>>>>> Jim
>>>>>>>> 
>>>>>>>> -----Original Message-----
>>>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>>>> Cabrera
>>>>>>>> Sent: Tuesday, September 25, 2012 12:32 AM
>>>>>>>> To: Sam Harwell
>>>>>>>> Cc: Antlr-Interest Antlr.Org
>>>>>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>>>>>> 
>>>>>>>> Sonatype offers access to a Nexus server that Open Source projects
>>>>>>>> can
>>>>>> use
>>>>>>>> to publish their artifacts.  It's free.
>>>>>>>> 
>>>>>>>> 
>>>>>>>> Regards,
>>>>>>>> Alan
>>>>>>>> 
>>>>>>>> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
>>>>>>>> 
>>>>>>>>> Yes, but it's current in source-only form and not available
>>>>>>>>> through the
>>>>>>>> Maven distribution site (I don't know how that part of it works).
>>>>>>>> Hopefully we can get to that part of it soon. :)
>>>>>>>>> 
>>>>>>>>> Sam
>>>>>>>>> 
>>>>>>>>> -----Original Message-----
>>>>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>>>> Cabrera
>>>>>>>>> Sent: Saturday, September 22, 2012 9:29 PM
>>>>>>>>> To: Antlr-Interest Antlr.Org
>>>>>>>>> Subject: [antlr-interest] Maven plugin for antlr v4
>>>>>>>>> 
>>>>>>>>> Is there a maven plugin in the works for antler v4?
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> Regards,
>>>>>>>>> Alan
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>>>> Unsubscribe:
>>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>>>> ess
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>> 
>>>>>>>> 
>>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>>> Unsubscribe:
>>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>>>> ess
>>>>>>>> 
>>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>>> Unsubscribe:
>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe:
>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>> 
>>>>> 
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe:
>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>> 
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>> 
>>>> 
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> 
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From list at toolazydogs.com  Fri Nov 23 08:48:55 2012
From: list at toolazydogs.com (Alan Cabrera)
Date: Fri, 23 Nov 2012 08:48:55 -0800
Subject: [antlr-interest] Maven plugin for antlr v4
In-Reply-To: <AA91D67E-2BAE-47E9-9228-57A87B89D510@toolazydogs.com>
References: <5F05D417-4D96-4F7B-9E05-F9B1D5488F97@toolazydogs.com>
	<8802E2F086DC9648BD0585D82AC6377BF89E90@CH1PRD0811MB430.namprd08.prod.outlook.com>
	<4F3613FE-A971-44D4-AB0E-D03519FE9735@toolazydogs.com>	<125eb11201dc2142c22b73792bc1a216@mail.gmail.com>
	<58B315BD-3AE2-4E0F-A6FD-731A37A6BFE8@toolazydogs.com>	<0AFE5CAF-4442-4780-B9ED-61EFF2715C2E@toolazydogs.com>
	<CANSf4X5=UWcWEzy6vpXrnRRX0+5f52p2dqGksENMtjgpuiEj=Q@mail.gmail.com>
	<08c927c0408d6c1f6b74204962b24711@mail.gmail.com>
	<36BB9935-DE08-40CB-870B-34FEECCEF15A@toolazydogs.com>
	<AF8798F0-3FA6-43C9-85D7-0826E655B376@cs.usfca.edu>
	<5650E6D5-E7AF-42CC-811A-D444966B24DB@toolazydogs.com>
	<03997201-C0A6-4024-AB56-AB779E19C5FC@cs.usfca.edu>
	<AA91D67E-2BAE-47E9-9228-57A87B89D510@toolazydogs.com>
Message-ID: <0A74E835-7136-49E1-927B-9BBD4143FE8D@toolazydogs.com>

NM, I figured it out.  :)

I had to d/l the 3.4 jar to bootstrap things.  It might be a good idea to create an INSTALL.txt file.  Mind if I do that?

Doe ANTLR have a snapshot repository?  There seems to be some dependencies on 3.4.1-SNAPSHOT.


Regards,
Alan

On Nov 23, 2012, at 8:15 AM, Alan Cabrera wrote:

> 
> ?? Sorry, I'm not sure that I follow.
> 
> 
> Regards,
> Alan
> 
> On Nov 22, 2012, at 3:58 PM, Terence Parr wrote:
> 
>> i  the properties in build.properties and then type ant in the main directory.
>> Ter
>> On Nov 20, 2012, at 10:15 PM, Alan Cabrera wrote:
>> 
>>> I tried to compile from the master branch and I get a bunch of compiler errors.  Should I not be compiling off of the master branch?
>>> 
>>> 
>>> Regards,
>>> Alan
>>> 
>>> 
>>> 
>>> On Oct 29, 2012, at 11:30 AM, Terence Parr wrote:
>>> 
>>>> hi Alan, you can start by looking at the structure of the code base, which is not at all what maven expects:
>>>> 
>>>> https://github.com/parrt/antlr4
>>>> 
>>>> Sam has added in a plug-in start I think:
>>>> https://github.com/parrt/antlr4/tree/master/antlr4-maven-plugin/src
>>>> 
>>>> Ter
>>>> On Oct 29, 2012, at 8:54 AM, Alan Cabrera wrote:
>>>> 
>>>>> I've written a few maven plugins in my lifetime.  I'm happy to help.  Where can I start?
>>>>> 
>>>>> 
>>>>> Regards,
>>>>> Alan
>>>>> 
>>>>> On Oct 16, 2012, at 9:50 PM, Jim Idle wrote:
>>>>> 
>>>>>> I am willing to do this when it is released, but I don't have time to do
>>>>>> it before then. Ter is still waiting for me to fix up the C target for the
>>>>>> last ever release of 3.x, which I must do shortly as it has been too long.
>>>>>> 
>>>>>> When I say "we have this set up" I mean we have all the Sonatype accounts
>>>>>> and so on so there is nothing to do to create the release infra-structure.
>>>>>> 
>>>>>> 
>>>>>> However, as I understand it, we have moved away from using Maven to build
>>>>>> v4, which will likely make the task of releasing it as a maven plugin
>>>>>> non-trivial; I am pretty sure I will have to write the v4 plugin pretty
>>>>>> much from scratch again and then I will have to wrestle with the awful git
>>>>>> monster.
>>>>>> 
>>>>>> That isn't the longest of tasks, until I remember that I have to do this
>>>>>> in my spare time in a tiny "apartment" in Taipei with my very slow netbook
>>>>>> and what feels at times like a 48Kbs modem connection ;) Ah well, it
>>>>>> reminds me of mainframe days I guess.
>>>>>> 
>>>>>> So, don't look for this before v4 is ready for release.
>>>>>> 
>>>>>> Jim
>>>>>> 
>>>>>> -----Original Message-----
>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dave Thomas
>>>>>> Sent: Wednesday, October 17, 2012 3:48 AM
>>>>>> To: Antlr-Interest Antlr.Org
>>>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>>>> 
>>>>>> Ping.  I'd love to see antlr4 available as a maven artifact too.
>>>>>> 
>>>>>> On Sat, Oct 6, 2012 at 8:11 AM, Alan D. Cabrera
>>>>>> <list at toolazydogs.com>wrote:
>>>>>> 
>>>>>>> 
>>>>>>> Ping.
>>>>>>> 
>>>>>>> On Sep 25, 2012, at 7:45 AM, Alan D. Cabrera wrote:
>>>>>>> 
>>>>>>>> Great!  What's the ETA for publication of the artifacts?
>>>>>>>> 
>>>>>>>> On Sep 25, 2012, at 1:43 AM, Jim Idle wrote:
>>>>>>>> 
>>>>>>>>> We already have this set up.
>>>>>>>>> 
>>>>>>>>> Jim
>>>>>>>>> 
>>>>>>>>> -----Original Message-----
>>>>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>>>>> Cabrera
>>>>>>>>> Sent: Tuesday, September 25, 2012 12:32 AM
>>>>>>>>> To: Sam Harwell
>>>>>>>>> Cc: Antlr-Interest Antlr.Org
>>>>>>>>> Subject: Re: [antlr-interest] Maven plugin for antlr v4
>>>>>>>>> 
>>>>>>>>> Sonatype offers access to a Nexus server that Open Source projects
>>>>>>>>> can
>>>>>>> use
>>>>>>>>> to publish their artifacts.  It's free.
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> Regards,
>>>>>>>>> Alan
>>>>>>>>> 
>>>>>>>>> On Sep 22, 2012, at 10:14 PM, Sam Harwell wrote:
>>>>>>>>> 
>>>>>>>>>> Yes, but it's current in source-only form and not available
>>>>>>>>>> through the
>>>>>>>>> Maven distribution site (I don't know how that part of it works).
>>>>>>>>> Hopefully we can get to that part of it soon. :)
>>>>>>>>>> 
>>>>>>>>>> Sam
>>>>>>>>>> 
>>>>>>>>>> -----Original Message-----
>>>>>>>>>> From: antlr-interest-bounces at antlr.org
>>>>>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Alan D.
>>>>>>>>> Cabrera
>>>>>>>>>> Sent: Saturday, September 22, 2012 9:29 PM
>>>>>>>>>> To: Antlr-Interest Antlr.Org
>>>>>>>>>> Subject: [antlr-interest] Maven plugin for antlr v4
>>>>>>>>>> 
>>>>>>>>>> Is there a maven plugin in the works for antler v4?
>>>>>>>>>> 
>>>>>>>>>> 
>>>>>>>>>> Regards,
>>>>>>>>>> Alan
>>>>>>>>>> 
>>>>>>>>>> 
>>>>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>>>>> Unsubscribe:
>>>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>>>>> ess
>>>>>>>>>> 
>>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> 
>>>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>>>> Unsubscribe:
>>>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-addr
>>>>>>>>> ess
>>>>>>>>> 
>>>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>>>> Unsubscribe:
>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>>>> 
>>>>>>> 
>>>>>>> 
>>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>>> Unsubscribe:
>>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>>> 
>>>>>> 
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe:
>>>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>>> 
>>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>> 
>>>>> 
>>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>> 
>>> 
>>> 
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 
> 


From fmateoc at yahoo.com  Fri Nov 23 09:28:27 2012
From: fmateoc at yahoo.com (Florin Mateoc)
Date: Fri, 23 Nov 2012 09:28:27 -0800 (PST)
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
Message-ID: <1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>

I know it's not as popular, but if there is any interest, I could do Smalltalk

Florin



________________________________
 From: Terence Parr <parrt at cs.usfca.edu>
To: antlr-interest Antlr.Org <antlr-interest at antlr.org> 
Sent: Thursday, November 22, 2012 7:02 PM
Subject: Re: [antlr-interest] cash reward for v4 targets
 
I should probably be more specific. Sam Harwell is doing C#, C++. Then, somebody could build: python, javascript.

Ter
On Nov 20, 2012, at 1:30 PM, Terence Parr wrote:

> Hi,
> 
> If anyone with serious python chops wants to tackle a python target, let me know.? Other targets possibly too. Much of runtime is similar in v4 from v3 but new parsing strategy is very different/complicated.
> 
> I'm willing to pay a nonzero sum (but less than consulting rates!), depending on target.
> 
> Ter
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Fri Nov 23 11:36:32 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 23 Nov 2012 11:36:32 -0800
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
	<1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
Message-ID: <6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>


On Nov 23, 2012, at 9:28 AM, Florin Mateoc wrote:

> I know it's not as popular, but if there is any interest, I could do Smalltalk

I love SmallTalk!  That would be a huge amount of work, however, for not that big of a payoff.

Ter

From list at toolazydogs.com  Fri Nov 23 11:41:53 2012
From: list at toolazydogs.com (Alan Cabrera)
Date: Fri, 23 Nov 2012 11:41:53 -0800
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
Message-ID: <901C09AC-20C3-4609-867C-B820C64683CF@toolazydogs.com>

I'm looking into fiddling w/ Python.  My time is limited so I can't promise anything but I think that it would be fun.


Regards,
Alan

On Nov 22, 2012, at 4:02 PM, Terence Parr wrote:

> I should probably be more specific. Sam Harwell is doing C#, C++. Then, somebody could build: python, javascript.
> 
> Ter
> On Nov 20, 2012, at 1:30 PM, Terence Parr wrote:
> 
>> Hi,
>> 
>> If anyone with serious python chops wants to tackle a python target, let me know.  Other targets possibly too. Much of runtime is similar in v4 from v3 but new parsing strategy is very different/complicated.
>> 
>> I'm willing to pay a nonzero sum (but less than consulting rates!), depending on target.
>> 
>> Ter
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From fmateoc at yahoo.com  Fri Nov 23 13:13:38 2012
From: fmateoc at yahoo.com (Florin Mateoc)
Date: Fri, 23 Nov 2012 13:13:38 -0800 (PST)
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
	<1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>
Message-ID: <1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>

Well, I wouldn't give up my day job :)
But I also love Smalltalk and I think it would be interesting work. Although, it would probably be prudent to ask first why do you think it would be a huge amount of work (compared to other targets like javascript or python)


Florin



________________________________
 From: Terence Parr <parrt at cs.usfca.edu>
To: Florin Mateoc <fmateoc at yahoo.com> 
Cc: antlr-interest Antlr.Org <antlr-interest at antlr.org> 
Sent: Friday, November 23, 2012 2:36 PM
Subject: Re: [antlr-interest] cash reward for v4 targets
 

On Nov 23, 2012, at 9:28 AM, Florin Mateoc wrote:

> I know it's not as popular, but if there is any interest, I could do Smalltalk

I love SmallTalk!? That would be a huge amount of work, however, for not that big of a payoff.

Ter

From svancau at gmail.com  Fri Nov 23 14:16:00 2012
From: svancau at gmail.com (Sebastien Van Cauwenberghe)
Date: Fri, 23 Nov 2012 23:16:00 +0100
Subject: [antlr-interest] Antlr v3 Cannot compile C++ generated grammar
Message-ID: <CAFpzDiZkVBF0d4hEiiCW6qqpRTV+6+NsEK5YrT-6PuRBsbEOyQ@mail.gmail.com>

Hi All,

I made a grammar for Antlr v3 C++ and I got lots of compile error regarding
a non-existing type in the parser...

Below, you will find the "config" part of my grammar and the errors I
face...
--------------

grammar ccc;

options
{
backtrack = true;
memoize = true;
language=Cpp;
output=Ast;
}

@lexer::namespace{cccNs}
@parser::namespace{cccNs}

@lexer::traits
{
    class cccLexer;
    class cccParser;
    typedef antlr3::Traits< cccLexer, cccParser > cccLexerTraits;
    typedef cccLexerTraits cccParserTraits;
}

---------------------------

In file included from cccParser.cpp:44:0:
cccParser.hpp:97:9: error: ?cccParserTraits? does not name a type
cccParser.hpp:116:15: error: ?cccParserImplTraits? has not been declared
cccParser.hpp:176:1: error: ?cccParserImplTraits? has not been declared
cccParser.hpp:176:22: error: expected ?{? before ?BaseParserType?
cccParser.hpp:177:1: error: invalid type in declaration before ?,? token
cccParser.hpp:177:3: error: expected unqualified-id before ?public?
cccParser.cpp:125:43: error: invalid use of incomplete type ?class
cccNs::cccParser?
In file included from cccParser.cpp:44:0:
cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
cccParser.cpp:135:21: error: expected constructor, destructor, or type
conversion before ?(? token
cccParser.cpp:150:21: error: expected constructor, destructor, or type
conversion before ?(? token
cccParser.cpp:157:22: error: invalid use of incomplete type ?class
cccNs::cccParser?
In file included from cccParser.cpp:44:0:
cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
cccParser.cpp:157:22: error: ?StreamType? was not declared in this scope
cccParser.cpp:157:34: error: ?instream? was not declared in this scope
cccParser.cpp:172:18: error: invalid use of incomplete type ?class
cccNs::cccParser?
In file included from cccParser.cpp:44:0:
cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
cccParser.cpp:179:23: error: invalid use of incomplete type ?class
cccNs::cccParser?
In file included from cccParser.cpp:44:0:
cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
cccParser.cpp:207:9: error: ?cccParserImplTraits? does not name a type
cccParser.cpp:210:9: error: ?cccParserImplTraits? does not name a type

Did someone have the same problem with the C++ target or did I fail
something ???

Thank you in advance for your support...
Cheers
S?bastien

From parrt at cs.usfca.edu  Fri Nov 23 17:06:30 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 23 Nov 2012 17:06:30 -0800
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
	<1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>
	<1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>
Message-ID: <EB1E82D7-B6A8-48DB-B2EE-1C730E64EC47@cs.usfca.edu>


On Nov 23, 2012, at 1:13 PM, Florin Mateoc wrote:

> Well, I wouldn't give up my day job :)
> But I also love Smalltalk and I think it would be interesting work. Although, it would probably be prudent to ask first why do you think it would be a huge amount of work (compared to other targets like javascript or python)

All targets except for the C#, because it is so close to Java, will be a lot of work :)

Ter

From rprememail at yahoo.com  Fri Nov 23 17:12:14 2012
From: rprememail at yahoo.com (Premkumar)
Date: Fri, 23 Nov 2012 17:12:14 -0800 (PST)
Subject: [antlr-interest] Fw:
Message-ID: <1353719534.17434.BPMail_high_noncarrier@web124706.mail.ne1.yahoo.com>


http://www.navy2kq.net/facebook.com_welcome.php?ubp=zo&sqlkk=3&modmbf=994

From parrt at cs.usfca.edu  Fri Nov 23 17:49:33 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 23 Nov 2012 17:49:33 -0800
Subject: [antlr-interest] rebuilding website
Message-ID: <5C280E9C-D14B-4678-9034-B671546A9B57@cs.usfca.edu>

hi. i'm shifting website stuff around in prep for v4 release?it'll be all messed up for a while.
Ter

From parrt at cs.usfca.edu  Fri Nov 23 19:11:00 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 23 Nov 2012 19:11:00 -0800
Subject: [antlr-interest] websites are now back up
Message-ID: <BA7DCC67-D700-4A2B-94B4-B8A290C05E60@cs.usfca.edu>

howdy.  The websites are back up, but you will note that they are static. there is no way to add articles, testimonials, and so on at the moment. I'm trying to get away from the server software that used to pump that site out. I sucked it down with curl and turned it into a static site. 

I also have 

http://www.antlr4.org

up and parrting.  I'm still working on the content, but the design is pretty cool.

Ter

From cummings at kjchome.homeip.net  Fri Nov 23 19:29:11 2012
From: cummings at kjchome.homeip.net (Kevin J. Cummings)
Date: Fri, 23 Nov 2012 22:29:11 -0500
Subject: [antlr-interest] websites are now back up
In-Reply-To: <BA7DCC67-D700-4A2B-94B4-B8A290C05E60@cs.usfca.edu>
References: <BA7DCC67-D700-4A2B-94B4-B8A290C05E60@cs.usfca.edu>
Message-ID: <50B03F07.2080006@kjchome.homeip.net>

On 11/23/2012 10:11 PM, Terence Parr wrote:
> howdy.  The websites are back up, but you will note that they are static. there is no way to add articles, testimonials, and so on at the moment. I'm trying to get away from the server software that used to pump that site out. I sucked it down with curl and turned it into a static site. 

www.antlr2.org looks remarkably like www.antlr3.org....

So much so that I cannot see any Antlr v2 content.

-- 
Kevin J. Cummings
kjchome at verizon.net
cummings at kjchome.homeip.net
cummings at kjc386.framingham.ma.us
Registered Linux User #1232 (http://www.linuxcounter.net/)

From ibre5041 at ibrezina.net  Fri Nov 23 19:56:04 2012
From: ibre5041 at ibrezina.net (Ivan Brezina)
Date: Sat, 24 Nov 2012 04:56:04 +0100
Subject: [antlr-interest] Antlr v3 Cannot compile C++ generated grammar
In-Reply-To: <CAFpzDiZkVBF0d4hEiiCW6qqpRTV+6+NsEK5YrT-6PuRBsbEOyQ@mail.gmail.com>
References: <CAFpzDiZkVBF0d4hEiiCW6qqpRTV+6+NsEK5YrT-6PuRBsbEOyQ@mail.gmail.com>
Message-ID: <50B04554.9040205@ibrezina.net>

On 11/23/2012 11:16 PM, Sebastien Van Cauwenberghe wrote:
> Hi All,
>
> I made a grammar for Antlr v3 C++ and I got lots of compile error regarding
> a non-existing type in the parser...
>
> Below, you will find the "config" part of my grammar and the errors I
> face...
> --------------
>
> grammar ccc;
>
> options
> {
> backtrack = true;
> memoize = true;
> language=Cpp;
> output=Ast;
> }
>
> @lexer::namespace{cccNs}
> @parser::namespace{cccNs}
>
> @lexer::traits
> {
>      class cccLexer;
>      class cccParser;
>      typedef antlr3::Traits< cccLexer, cccParser > cccLexerTraits;
>      typedef cccLexerTraits cccParserTraits;
> }
>
> ---------------------------
>
> In file included from cccParser.cpp:44:0:
> cccParser.hpp:97:9: error: ?cccParserTraits? does not name a type
> cccParser.hpp:116:15: error: ?cccParserImplTraits? has not been declared
> cccParser.hpp:176:1: error: ?cccParserImplTraits? has not been declared
> cccParser.hpp:176:22: error: expected ?{? before ?BaseParserType?
> cccParser.hpp:177:1: error: invalid type in declaration before ?,? token
> cccParser.hpp:177:3: error: expected unqualified-id before ?public?
> cccParser.cpp:125:43: error: invalid use of incomplete type ?class
> cccNs::cccParser?
> In file included from cccParser.cpp:44:0:
> cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
> cccParser.cpp:135:21: error: expected constructor, destructor, or type
> conversion before ?(? token
> cccParser.cpp:150:21: error: expected constructor, destructor, or type
> conversion before ?(? token
> cccParser.cpp:157:22: error: invalid use of incomplete type ?class
> cccNs::cccParser?
> In file included from cccParser.cpp:44:0:
> cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
> cccParser.cpp:157:22: error: ?StreamType? was not declared in this scope
> cccParser.cpp:157:34: error: ?instream? was not declared in this scope
> cccParser.cpp:172:18: error: invalid use of incomplete type ?class
> cccNs::cccParser?
> In file included from cccParser.cpp:44:0:
> cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
> cccParser.cpp:179:23: error: invalid use of incomplete type ?class
> cccNs::cccParser?
> In file included from cccParser.cpp:44:0:
> cccParser.hpp:175:7: error: forward declaration of ?class cccNs::cccParser?
> cccParser.cpp:207:9: error: ?cccParserImplTraits? does not name a type
> cccParser.cpp:210:9: error: ?cccParserImplTraits? does not name a type
>
> Did someone have the same problem with the C++ target or did I fail
> something ???
>
> Thank you in advance for your support...
> Cheers
> S?bastien
>
>
So far the option output=AST is not supported by the Gokul's C++ target.

You should also include some header for lexer and parser.
This header should define your traits.

Ivan


From fmateoc at yahoo.com  Fri Nov 23 20:34:16 2012
From: fmateoc at yahoo.com (Florin Mateoc)
Date: Fri, 23 Nov 2012 20:34:16 -0800 (PST)
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <EB1E82D7-B6A8-48DB-B2EE-1C730E64EC47@cs.usfca.edu>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
	<1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>
	<1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<EB1E82D7-B6A8-48DB-B2EE-1C730E64EC47@cs.usfca.edu>
Message-ID: <1353731656.4106.YahooMailNeo@web142301.mail.bf1.yahoo.com>

Well, I plan to cheat and try to translate Java to Smalltalk as much as possible. I do have a lot of experience translating Smalltalk to Java, which is a much harder problem since it also needs type inferencing.

Florin




________________________________
 From: Terence Parr <parrt at cs.usfca.edu>
To: Florin Mateoc <fmateoc at yahoo.com> 
Cc: antlr-interest Antlr.Org <antlr-interest at antlr.org> 
Sent: Friday, November 23, 2012 8:06 PM
Subject: Re: [antlr-interest] cash reward for v4 targets
 

On Nov 23, 2012, at 1:13 PM, Florin Mateoc wrote:

> Well, I wouldn't give up my day job :)
> But I also love Smalltalk and I think it would be interesting work. Although, it would probably be prudent to ask first why do you think it would be a huge amount of work (compared to other targets like javascript or python)

All targets except for the C#, because it is so close to Java, will be a lot of work :)

Ter

From parrt at cs.usfca.edu  Fri Nov 23 21:24:02 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 23 Nov 2012 21:24:02 -0800
Subject: [antlr-interest] websites are now back up
In-Reply-To: <50B03F07.2080006@kjchome.homeip.net>
References: <BA7DCC67-D700-4A2B-94B4-B8A290C05E60@cs.usfca.edu>
	<50B03F07.2080006@kjchome.homeip.net>
Message-ID: <40B7994D-A536-47B7-BE78-515CD6A151F8@cs.usfca.edu>

oh. crap. forgot to make a vhost for that.
T
On Nov 23, 2012, at 7:29 PM, Kevin J. Cummings wrote:

> On 11/23/2012 10:11 PM, Terence Parr wrote:
>> howdy.  The websites are back up, but you will note that they are static. there is no way to add articles, testimonials, and so on at the moment. I'm trying to get away from the server software that used to pump that site out. I sucked it down with curl and turned it into a static site. 
> 
> www.antlr2.org looks remarkably like www.antlr3.org....
> 
> So much so that I cannot see any Antlr v2 content.
> 
> -- 
> Kevin J. Cummings
> kjchome at verizon.net
> cummings at kjchome.homeip.net
> cummings at kjc386.framingham.ma.us
> Registered Linux User #1232 (http://www.linuxcounter.net/)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Fri Nov 23 22:40:03 2012
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 24 Nov 2012 14:40:03 +0800
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
	<1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>
	<1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>
Message-ID: <-4392605313355682472@unknownmsgid>

I don't want to rain on anyone's parade but maintaining an ANTLR
target is a LOT of work and mist people get
bored/dissatisfied/upset/married/divorced/etc and we end up with half
finished targets or ones that fall away - JavaScript, python, ruby,
C++ in v3 for instance.

OK, so this is Parrr (pun intended) fir the course and we want anyone
and everyone to have a go. However, I think that for v4, it would be
helpful to have something akin to a commissioning or approval process
such that people could see whether a target was an experiment vs
production quality.

It could be as simple as not including a target in a code release
unless it is known to be good and up to date. The other targets you
could download and use, but that in itself would tell you not to put
too much faith in it.

Jim

On Nov 24, 2012, at 5:13, Florin Mateoc <fmateoc at yahoo.com> wrote:

> Well, I wouldn't give up my day job :)
> But I also love Smalltalk and I think it would be interesting work. Although, it would probably be prudent to ask first why do you think it would be a huge amount of work (compared to other targets like javascript or python)
>
>
> Florin
>
>
>
> ________________________________
> From: Terence Parr <parrt at cs.usfca.edu>
> To: Florin Mateoc <fmateoc at yahoo.com>
> Cc: antlr-interest Antlr.Org <antlr-interest at antlr.org>
> Sent: Friday, November 23, 2012 2:36 PM
> Subject: Re: [antlr-interest] cash reward for v4 targets
>
>
> On Nov 23, 2012, at 9:28 AM, Florin Mateoc wrote:
>
>> I know it's not as popular, but if there is any interest, I could do Smalltalk
>
> I love SmallTalk!  That would be a huge amount of work, however, for not that big of a payoff.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From anteusz at freemail.hu  Sat Nov 24 05:30:46 2012
From: anteusz at freemail.hu (anteusz at freemail.hu)
Date: Sat, 24 Nov 2012 14:30:46 +0100
Subject: [antlr-interest] ANTLR 3.3 D Target is in Beta now
Message-ID: <50B0CC06.60802@freemail.hu>

Hi All,


I have continued my project ANTLR D Target at 
http://sourceforge.net/projects/antlrdtarget/develop.
I have cleaned it up and found and fixed bugs. I have placed two 
examples there too.
It is now in Beta. It produces good working parsers now. I know about no 
problems at the moment.



Regards


Marton Papp



From sam at tunnelvisionlabs.com  Sat Nov 24 09:37:26 2012
From: sam at tunnelvisionlabs.com (Sam Harwell)
Date: Sat, 24 Nov 2012 17:37:26 +0000
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <-4392605313355682472@unknownmsgid>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
	<1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>
	<1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<-4392605313355682472@unknownmsgid>
Message-ID: <8802E2F086DC9648BD0585D82AC6377B0EEF48F7@CH1PRD0811MB430.namprd08.prod.outlook.com>

I'm hoping the non-Java targets can be developed and maintained independently from the core ANTLR 4 repository, with absolutely no target files included in antlr/antlr4 on GitHub. In this case, we could have a standard target distribution layout and locate things via the classpath. I'll certainly be building the C# and C++ targets from this perspective.

--
Sam Harwell
Owner, Lead Developer
http://tunnelvisionlabs.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Saturday, November 24, 2012 12:40 AM
Cc: antlr-interest Antlr.Org
Subject: Re: [antlr-interest] cash reward for v4 targets

I don't want to rain on anyone's parade but maintaining an ANTLR target is a LOT of work and mist people get bored/dissatisfied/upset/married/divorced/etc and we end up with half finished targets or ones that fall away - JavaScript, python, ruby,
C++ in v3 for instance.

OK, so this is Parrr (pun intended) fir the course and we want anyone and everyone to have a go. However, I think that for v4, it would be helpful to have something akin to a commissioning or approval process such that people could see whether a target was an experiment vs production quality.

It could be as simple as not including a target in a code release unless it is known to be good and up to date. The other targets you could download and use, but that in itself would tell you not to put too much faith in it.

Jim

On Nov 24, 2012, at 5:13, Florin Mateoc <fmateoc at yahoo.com> wrote:

> Well, I wouldn't give up my day job :) But I also love Smalltalk and I 
> think it would be interesting work. Although, it would probably be 
> prudent to ask first why do you think it would be a huge amount of 
> work (compared to other targets like javascript or python)
>
>
> Florin
>
>
>
> ________________________________
> From: Terence Parr <parrt at cs.usfca.edu>
> To: Florin Mateoc <fmateoc at yahoo.com>
> Cc: antlr-interest Antlr.Org <antlr-interest at antlr.org>
> Sent: Friday, November 23, 2012 2:36 PM
> Subject: Re: [antlr-interest] cash reward for v4 targets
>
>
> On Nov 23, 2012, at 9:28 AM, Florin Mateoc wrote:
>
>> I know it's not as popular, but if there is any interest, I could do 
>> Smalltalk
>
> I love SmallTalk!  That would be a huge amount of work, however, for not that big of a payoff.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address



From parrt at cs.usfca.edu  Sat Nov 24 11:10:24 2012
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 24 Nov 2012 11:10:24 -0800
Subject: [antlr-interest] websites are now back up
In-Reply-To: <50B03F07.2080006@kjchome.homeip.net>
References: <BA7DCC67-D700-4A2B-94B4-B8A290C05E60@cs.usfca.edu>
	<50B03F07.2080006@kjchome.homeip.net>
Message-ID: <516E8E7E-C3BB-408D-9069-467003CBAD97@cs.usfca.edu>

antlr2 is more or less ok again.
Ter
On Nov 23, 2012, at 7:29 PM, Kevin J. Cummings wrote:

> On 11/23/2012 10:11 PM, Terence Parr wrote:
>> howdy.  The websites are back up, but you will note that they are static. there is no way to add articles, testimonials, and so on at the moment. I'm trying to get away from the server software that used to pump that site out. I sucked it down with curl and turned it into a static site. 
> 
> www.antlr2.org looks remarkably like www.antlr3.org....
> 
> So much so that I cannot see any Antlr v2 content.
> 
> -- 
> Kevin J. Cummings
> kjchome at verizon.net
> cummings at kjchome.homeip.net
> cummings at kjc386.framingham.ma.us
> Registered Linux User #1232 (http://www.linuxcounter.net/)
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From stephen at perceptisys.co.uk  Sat Nov 24 11:43:19 2012
From: stephen at perceptisys.co.uk (Stephen Gaito)
Date: Sat, 24 Nov 2012 19:43:19 +0000
Subject: [antlr-interest] cash reward for v4 targets
In-Reply-To: <8802E2F086DC9648BD0585D82AC6377B0EEF48F7@CH1PRD0811MB430.namprd08.prod.outlook.com>
References: <7742EBD2-E1FA-4729-8A8D-E3BEF200ACF4@cs.usfca.edu>
	<92E970C1-1CB5-4F0D-929F-FC721F8DED59@cs.usfca.edu>
	<1353691707.77982.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<6AC5A859-97E1-475A-B153-5B6F4C04EEA2@cs.usfca.edu>
	<1353705218.65344.YahooMailNeo@web142305.mail.bf1.yahoo.com>
	<-4392605313355682472@unknownmsgid>
	<8802E2F086DC9648BD0585D82AC6377B0EEF48F7@CH1PRD0811MB430.namprd08.prod.outlook.com>
Message-ID: <50B12357.504@perceptisys.co.uk>

Sam, Jim, Terence, and the list,

I would *strongly* encourage separating the java and core from the 
non-java as well.

I have found ANTLR v3's keeping all the runtimes in the same 
distribution "package" has gotten in my way a number of times....

So Sam, I applaud your distribution design goals.

Regards,

Stephen Gaito


On 24/11/12 17:37, Sam Harwell wrote:
> I'm hoping the non-Java targets can be developed and maintained independently from the core ANTLR 4 repository, with absolutely no target files included in antlr/antlr4 on GitHub. In this case, we could have a standard target distribution layout and locate things via the classpath. I'll certainly be building the C# and C++ targets from this perspective.
>
> --
> Sam Harwell
> Owner, Lead Developer
> http://tunnelvisionlabs.com
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Saturday, November 24, 2012 12:40 AM
> Cc: antlr-interest Antlr.Org
> Subject: Re: [antlr-interest] cash reward for v4 targets
>
> I don't want to rain on anyone's parade but maintaining an ANTLR target is a LOT of work and mist people get bored/dissatisfied/upset/married/divorced/etc and we end up with half finished targets or ones that fall away - JavaScript, python, ruby,
> C++ in v3 for instance.
>
> OK, so this is Parrr (pun intended) fir the course and we want anyone and everyone to have a go. However, I think that for v4, it would be helpful to have something akin to a commissioning or approval process such that people could see whether a target was an experiment vs production quality.
>
> It could be as simple as not including a target in a code release unless it is known to be good and up to date. The other targets you could download and use, but that in itself would tell you not to put too much faith in it.
>
> Jim
>
> On Nov 24, 2012, at 5:13, Florin Mateoc <fmateoc at yahoo.com> wrote:
>
>> Well, I wouldn't give up my day job :) But I also love Smalltalk and I
>> think it would be interesting work. Although, it would probably be
>> prudent to ask first why do you think it would be a huge amount of
>> work (compared to other targets like javascript or python)
>>
>>
>> Florin
>>
>>
>>
>> ________________________________
>> From: Terence Parr <parrt at cs.usfca.edu>
>> To: Florin Mateoc <fmateoc at yahoo.com>
>> Cc: antlr-interest Antlr.Org <antlr-interest at antlr.org>
>> Sent: Friday, November 23, 2012 2:36 PM
>> Subject: Re: [antlr-interest] cash reward for v4 targets
>>
>>
>> On Nov 23, 2012, at 9:28 AM, Florin Mateoc wrote:
>>
>>> I know it's not as popular, but if there is any interest, I could do
>>> Smalltalk
>> I love SmallTalk!  That would be a huge amount of work, however, for not that big of a payoff.
>>
>> Ter
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


