From harald_m_mueller at gmx.de  Sat Dec  1 01:27:44 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sat, 1 Dec 2007 10:27:44 +0100
Subject: [antlr-interest] Lexer context problem
In-Reply-To: <op.t2aggum5ba319o@cirrus>
Message-ID: <20071201092748.0EC3611EB0E@www.antlr.org>

Hi Keith -

you wrote:
> 
> Could someone explain what I'm doing wrong here

Forgive me being blunt - but what you are doing wrong is to use that
predicate at all. What you do is a BIG SMELL: Controlling the sequencing of
your LEXER by knowledge about the order of symbols on the PARSER level.
Lexing (tokenizing) is based on the assumption that you do it WITHOUT
knowing anything about the use of the tokens (words) in the grammar. Period.

(There are special cases where this does not work - some have been cited
here; and eoms way of sometimes(rarely!) passing in some information to the
lexer at a defined time would be helpful. But usual languages have just a
handful of gimmicks of that sort; C#, AFAIK, has 2 [>> and keyword
identifiers]; Pascal hat 1 [the .. from your example]).

Ok - to get inteo the details: The problem with your grammar is that

   ..

is a valid name (I'm not sure you want this - but maybe it has do be like
that; also ...... is a valid name). That's the reason why "NAME jumps in".
There are at least four ways out - in the first three, throw away that
brackets flag:

a) Define that sequences of periods are not valid names (e.g. by removing
the dot in the first parenthesis of NAME).
b) Define that .. is not name by moving DOTDOT *before* rule NAME.
c) If .. must be name at some places, use my "lexing parser" idea - so
define

     DOTDOT : .. ;
     NAME: ...as you have it...

In the parser, say

     name : NAME | DOTDOT ;

and now continue e.g. with

     tuple : name OSB INT DOTDOT INT CSB ;

d) If you are not yet happy then, first go to the definer of your language
and ask what the heck this '..' name is supposed to be and mean, and
convince him or her that you want to do a) or b) or c). If this does not
work: Use that brackets flag WITH =>:

NAME : {!brackets}? => ...what you have...
     | '..' { $type = DOTDOT; }
     ;

- and expect to test for a day; and to write a long comment on why you did
not use a) or b) or c).

Hope this helps!

Regards
Harald M.


> 
> Giving the input "Abc[1..2]" to the following
> -----
> grammar Test;
> 
> @lexer::members {
> 	boolean brackets;
> }
> 
> tuple	:	NAME OSB INT DOTDOT INT CSB;
> 
> NAME	
> 	:	{!brackets}?  
> ('A'..'Z'|'a'..'z'|'.'|'_')('0'..'9'|'A'..'Z'|'a'..'z'|'.'|'_')+
> 	;
> 
> OSB
> 	:	'[' {brackets=true;}
> 	;
> 
> DOTDOT
> 	:	{brackets}? '..'
> 	;
> 
> CSB
> 	:	']' {brackets=false;}
> 	;
> 
> INT
> 	:	'0' | ('1'..'9')('0'..'9')*
> 	;
> -----
> I always get an error "ine 1:6 rule NAME failed predicate: 
> {!brackets}?"
> 
> NAME seems to be jumping in when (as far as my understanding 
> goes (which isn't very far) it shouldn't. The Open Square 
> Brackets (OSB) sets 'bracket' true so NAME should not be 
> recognised. Strangely if I reduce 'tuple' to:
> 
> 	tuple	:	NAME OSB INT DOTDOT CSB ; / with the 
> input "Abc[1..]" works
> 
> but..
> 
> 	tuple	:	NAME OSB DOTDOT INT CSB ; // with the 
> input "Abc[..1]" fails??
> 
> I've just bought the book and scanned that for an answer but 
> can't find anything.
> 
> Thanks in advance
> Keith
> 


From antlr-list at arizona-software.ch  Sat Dec  1 12:11:10 2007
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sat, 1 Dec 2007 12:11:10 -0800
Subject: [antlr-interest] ANTLRWorks 1.1.5 released
Message-ID: <06E5B4B2-C7BA-4E83-9ABE-9F1DA78F1AB1@arizona-software.ch>

Hi,

ANTLRWorks 1.1.5 is available and fixes the following:

Bug fix:
     [AW-124] - Highlight decision DFA does not always show inner rule  
decision
     [AW-125] - Highlight decision DFA does not display in some  
situation
     [AW-126] - Highlight of input token in debugger doesn't display  
properly for multi-line tokens

Improvement:
     [AW-45] - Handle catch/finally syntax

Regards,

Jean

From Steven.Dussinger at bcbsfl.com  Sun Dec  2 09:28:52 2007
From: Steven.Dussinger at bcbsfl.com (Dussinger, Steven)
Date: Sun, 2 Dec 2007 12:28:52 -0500
Subject: [antlr-interest] PL/SQL grammar problems
Message-ID: <BD08272222A4F849880057274FA7A7C20577A5D0@EDCWMSGP001BZ.bcbsfl.com>

Hi All:

I recently was tasked to look into parsing PL/SQL from Oracle in order
to gather some metrics. I found the PL/SQL grammar on the Antlr site and
am trying to use it, but I've run into a problem that I just can't seem
to figure out how to fix.

My test case (as follows) contains three procedure definitions, each
containing a simple if-then statement. The only difference in the three
procedures is the location of the parens in the if clause. The first two
procedures parse just fine (with parens around the entire boolean
expression or with no parens at all), but the third procedure (with
parens surrounding only the calculation portion of the boolean
expression) fails with the following messages:

line 36:22: expecting "then", found '<'
line 39:11: unexpected token: IF
line 42:1: expecting EOF, found 'END'

The test case is as follows:

CREATE OR REPLACE 
PACKAGE BODY p_accounts_payable_1
IS

   PROCEDURE works (
      po_s_return_code      IN OUT   VARCHAR2
   )
   IS

   BEGIN
      IF     (X + Y < 100) -- Note the parens surround the entire
boolean expression
      THEN
         po_s_return_code := '0';
      END IF;
   END;

   PROCEDURE works2 (
      po_s_return_code      IN OUT   VARCHAR2
   )
   IS

   BEGIN
      IF     X + Y < 100 -- Note no parens at all
      THEN
         po_s_return_code := '0';
      END IF;
   END;

   PROCEDURE fails (
      po_s_return_code      IN OUT   VARCHAR2
   )
   IS

   BEGIN
      IF     (X + Y) < 100 -- Note the parens surround the calculation
only (not the boolean expression)
      			   -- This one fails to parse.
      THEN
         po_s_return_code := '0';
      END IF;
   END;

END;

I think I've narrowed the problem down to the following portion of the
grammar:

boolean_factor    returns [ CommonToken r = null ] :
          ( OPEN_PAREN boolean_exp CLOSE_PAREN ) =>
        o:OPEN_PAREN boolean_exp cp:CLOSE_PAREN 
      | user_defined_function
      | ( plsql_expression
      ( (relational_op plsql_expression) =>( r=relational_op
          plsql_expression )
      | ( "is" ) => ( i:"is" (no:"not")? n:"null" )
      | ( ( "not" ) ? "like") =>( (n1:"not")? l:"like" match_string )
      | ( ( "not" ) ? "between") => (n2:"not")? b:"between"
plsql_expression
                                a:"and" plsql_expression 
      | ( (n3:"not")? in:"in" op:OPEN_PAREN plsql_exp_list
c2:CLOSE_PAREN )
      | ( ( cursor_name | subquery )
           pc:PERCENTAGE
           (nf:"notfound"
            | fo:"found"
            | io:"isopen"
        ) ) )? )
      | ( cursor_name (p3:PERCENTAGE
          (n4:"notfound"
         |  f2:"found"
         | i2:"isopen"
      )))?
      | boolean_literal
      ;

It seems that I need to add parens around the plsql_expression
relational_op... portion of this rule, but that seems to add ambiguity
to the first clause, and no matter how I tried to add those parens, it
fails. Does anyone have some pointers they could give me (understanding
that I'm not the most advanced parser guy in the world :-))...

Thanks.

--Steve


Blue Cross Blue Shield of Florida, Inc., and its subsidiary and affiliate companies are not responsible for errors or omissions in this e-mail message. Any personal comments made in this e-mail do not reflect the views of Blue Cross Blue Shield of Florida, Inc.  The information contained in this document may be confidential and intended solely for the use of the individual or entity to whom it is addressed.  This document may contain material that is privileged or protected from disclosure under applicable law.  If you are not the intended recipient or the individual responsible for delivering to the intended recipient, please (1) be advised that any use, dissemination, forwarding, or copying of this document IS STRICTLY PROHIBITED; and (2) notify sender immediately by telephone and destroy the document. THANK YOU.


From parrt at antlr.org  Sun Dec  2 11:24:55 2007
From: parrt at antlr.org (Terence Parr)
Date: Sun, 2 Dec 2007 11:24:55 -0800
Subject: [antlr-interest] Error nodes created upon syntax error
Message-ID: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>

hi,

Currently syntax errors cause invalid trees and possibly even runtime  
exceptions when building ASTs. What we really need I believe is to  
have rules that encounter syntax errors return an ERROR node of some  
sort that records where the error occurred and, with luck, the tokens  
consumed during recovery. I started an improvement request:

http://www.antlr.org:8888/browse/ANTLR-193

The basic idea is that ERROR nodes get used in place of ASTs that  
would normally be produced by rule indications.  For example, the  
following rule would return a valid AST except for the subtrees  
associated with rule refs in encountering syntax errors:

forDecl : 'for' '(' decl ';' expr ';' expr ')' stat -> ... ;

If there is an error inside decl, the tree would return

^('for' ERROR subtree-expr subtree-expr)

This effectively means that I must turn off the single token  
insertion and deletion that occurs automatically within a single  
rule.  If a syntax error occurs, the immediately surrounding rule  
must terminate in return an error node.

Does this make sense? I would like to stick this into 3.1 release.

Ter

From gbr at newtechlaw.com  Sun Dec  2 13:07:47 2007
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Sun, 02 Dec 2007 13:07:47 -0800
Subject: [antlr-interest] AntlrDT 0.10 Released
Message-ID: <200712022107.lB2L7lKY032565@tach.newtechlaw.com>


An early beta version of AntlrDT is now available.

AntlrDT is an Eclipse 3.3+ plugin implementing a syntax-directed 
Antlr V3+ grammar editor. Includes syntax-highlighting, action block 
folding, full in-editor syntax analysis and problem marking, Outline 
View, and incremental builder.

Details:  http://www.certiv.net/products/antlrdt.html
Download:  http://www.certiv.net/download/downloads.html#antlrdt

Best,
Gerald
----
Gerald B. Rosenberg
Certiv Analytics

www.certiv.net


From stevagewp at gmail.com  Sun Dec  2 20:24:28 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Mon, 3 Dec 2007 15:24:28 +1100
Subject: [antlr-interest] Non-disjoint tokens
In-Reply-To: <474a7991.2315300a.5cd0.46d2SMTPIN_ADDED@mx.google.com>
References: <b8ceeef70711250341k4639f08asdc2cd1ed1bc314d1@mail.gmail.com>
	<474a7991.2315300a.5cd0.46d2SMTPIN_ADDED@mx.google.com>
Message-ID: <b8ceeef70712022024y2ecdd3d9n7acf6b670ea9e67b@mail.gmail.com>

On 11/26/07, Gavin Lambert <antlr at mirality.co.nz> wrote:
> The usual trick with common-prefix literals (or perhaps the
> "other" usual trick, since Austin already posted the semantic
> predicate version) is to compose them into a single rule.  The key
> point is to explicitly give ANTLR the alternatives so that it
> doesn't try to plunge ahead without looking first.

Hey, I just gave this a go on a similar problem and it works really well!

In this case, I want to recognise ISBN's in normal text and treat them
specially. However, if the ISBN is malformed (even slightly), I want
to treat it like any other sequence of random letters and numbers.
This solution is elegant enough for me:

----
ISBN_LINK:
  ((ISBN_LINK_ACTUAL (LETTERS | PUNCTUATION | N)) => ISBN_LINK_ACTUAL
  | LETTERS { $type=LETTERS; }
  );

fragment
ISBN_LINK_ACTUAL:
    'ISBN'
    ' '+
    ('97' ('8' | '9'))?
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9')
    ((' ' | '-')? '0'..'9' | 'X' | 'x');


LETTERS: ('a'..'z' | 'A'..'Z')+;
DIGITS: ('0'..'9')+;
PUNCTUATION: '-' | ' ' | '.' | ',';
N: '\r'? '\n';

----

And as an added bonus, it becomes possible to add trailing
requirements (ie, the ISBN must be followed by non-digits) because you
already have the syntactic predicate.

This has made my day :)

QUESTION: Why doesn't putting ~DIGITS in the syntactic predicate work?

Steve

From antlr at mirality.co.nz  Sun Dec  2 23:27:23 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 03 Dec 2007 20:27:23 +1300
Subject: [antlr-interest] Non-disjoint tokens
In-Reply-To: <b8ceeef70712022024y2ecdd3d9n7acf6b670ea9e67b@mail.gmail.co
 m>
References: <b8ceeef70711250341k4639f08asdc2cd1ed1bc314d1@mail.gmail.com>
	<474a7991.2315300a.5cd0.46d2SMTPIN_ADDED@mx.google.com>
	<b8ceeef70712022024y2ecdd3d9n7acf6b670ea9e67b@mail.gmail.com>
Message-ID: <20071203072757.10F4311EAA9@www.antlr.org>

At 17:24 3/12/2007, Steve Bennett wrote:
 >QUESTION: Why doesn't putting ~DIGITS in the syntactic predicate 

 >work?

Because you can only invert sets, not sequences.  In other words, 
this works:

fragment DIGIT: '0'..'9';
DIGITS: DIGIT+;
NONDIGITS: (~DIGIT)+;

but this doesn't:

DIGITS: ('0'..'9')+;
NONDIGITS: ~DIGITS;

Note that ('a' | 'b') is still a set, so can be inverted; 'ab' is 
a sequence, and can't be.  (And all of these examples assume 
you're in the lexer -- the rule is the same in the parser but it 
presents itself differently, since each item in the set can be a 
complete token instead of just a single character.  Though 
inverting in the parser isn't common anyway.)


From ankit.mehrotra at tcs.com  Mon Dec  3 01:12:54 2007
From: ankit.mehrotra at tcs.com (ankit.mehrotra at tcs.com)
Date: Mon, 3 Dec 2007 14:42:54 +0530
Subject: [antlr-interest] problem with class CommonTree
Message-ID: <OF835DE575.51C79218-ON652573A6.003198AA-652573A6.0032E090@tcs.com>

Hi all,

I have started antlr a couple of hours back. I was working through the 
example of AST walk through, where on compiling the files I am getting an 
error,

ASTExprParser.java:82: cannot find symbol
symbol  : method toStringtree()
location: class org.antlr.runtime.tree.CommonTree
 System.out.println(((CommonTree)stat1.tree).toStringtree());

                                       ^
1 error


All I have are the jar files for the 
libraries(antlr-3.0.1,antlr-2.7.7,antlr-runtime-3.0.1 and 
stringTemplate-3.0b1). 
How should I go about removing this error.

Thanks
Ankit
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/8382f617/attachment.html 

From stevagewp at gmail.com  Mon Dec  3 03:06:54 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Mon, 3 Dec 2007 22:06:54 +1100
Subject: [antlr-interest] Non-disjoint tokens
In-Reply-To: <4753afff.2215300a.05c6.1092SMTPIN_ADDED@mx.google.com>
References: <b8ceeef70711250341k4639f08asdc2cd1ed1bc314d1@mail.gmail.com>
	<474a7991.2315300a.5cd0.46d2SMTPIN_ADDED@mx.google.com>
	<b8ceeef70712022024y2ecdd3d9n7acf6b670ea9e67b@mail.gmail.com>
	<4753afff.2215300a.05c6.1092SMTPIN_ADDED@mx.google.com>
Message-ID: <b8ceeef70712030306s3379ef58gda26a0906ae9afac@mail.gmail.com>

On 12/3/07, Gavin Lambert <antlr at mirality.co.nz> wrote:
> Because you can only invert sets, not sequences.  In other words,
> this works:
>
> fragment DIGIT: '0'..'9';
> DIGITS: DIGIT+;
> NONDIGITS: (~DIGIT)+;
<snip>
> Note that ('a' | 'b') is still a set, so can be inverted; 'ab' is
> a sequence, and can't be.  (And all of these examples assume
> you're in the lexer -- the rule is the same in the parser but it
> presents itself differently, since each item in the set can be a
> complete token instead of just a single character.  Though
> inverting in the parser isn't common anyway.)

Thanks for that explanation. I think I was confusing the lexer and
parser slightly. What I wanted was "anything other than a sequence of
digits" rather than "a sequence of anything other than digits".
Decomposing it as you suggest works.

Steve

From tirelli at post.com  Mon Dec  3 04:52:49 2007
From: tirelli at post.com (Edson Tirelli)
Date: Mon, 3 Dec 2007 10:52:49 -0200
Subject: [antlr-interest] Grammar does not match a valid sentence
Message-ID: <e6dd5ba30712030452w7e7b8d40idda76a22df2b4ef9@mail.gmail.com>

     All,

     I have a grammar that is not matching a valid sentence and I don't
understand exactly why. If anyone can shed some light, I would really
appreciate.
     To see the problem:

Using: antlr v3.0 and antlrworks 1.1.4:

1. Load the attached grammar in antlrworks
2. Select the interpreter tab and paste the following sentence:

Address( street[1] == "Low" && street[2] == "High" )

3. Use the rule "fact" as an entry point to parse the sentence above.

     The above sentence is a valid sentence, but it is raising a
NoViableAltException in the "and_restr_connective" rule, while the expected
behavior is not to match "and_restr_connective", but go back in the call
hierarchy and to match the "and_constr" rule.
     If you remove the square brackets, the sentence will work fine
(matching the "and_constr" rule):

Address( street1 == "Low" && street2 == "High" )

     Any idea how can I fix that?
     Thanks in advance,

     []s
     Edson

-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/20eeeb1d/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: DRL2.g
Type: application/octet-stream
Size: 6542 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/20eeeb1d/attachment.obj 

From jaluber at gmx.de  Mon Dec  3 05:05:57 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 03 Dec 2007 14:05:57 +0100
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
Message-ID: <4753FF35.8080803@gmx.de>

Terence Parr wrote:
> hi,
> 
> Currently syntax errors cause invalid trees and possibly even runtime
> exceptions when building ASTs. What we really need I believe is to have
> rules that encounter syntax errors return an ERROR node of some sort
> that records where the error occurred and, with luck, the tokens
> consumed during recovery. I started an improvement request:
> 
> http://www.antlr.org:8888/browse/ANTLR-193
> 
> The basic idea is that ERROR nodes get used in place of ASTs that would
> normally be produced by rule indications.  For example, the following
> rule would return a valid AST except for the subtrees associated with
> rule refs in encountering syntax errors:
> 
> forDecl : 'for' '(' decl ';' expr ';' expr ')' stat -> ... ;
> 
> If there is an error inside decl, the tree would return
> 
> ^('for' ERROR subtree-expr subtree-expr)
> 
> This effectively means that I must turn off the single token insertion
> and deletion that occurs automatically within a single rule.  If a
> syntax error occurs, the immediately surrounding rule must terminate in
> return an error node.
> 
> Does this make sense? I would like to stick this into 3.1 release.

It makes sense, but what about single deletion/insertion in normal mode?
How do we deal with an ERROR node in the next grammar? Or is then there
a way to emit an error message during the construction of the AST?

Johannes

From Austin_Hastings at Yahoo.com  Mon Dec  3 06:07:04 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Mon, 03 Dec 2007 09:07:04 -0500
Subject: [antlr-interest] ENHANCEMENT [ Ant Task ] - Add "mapper" for
	extracting target filenames.
Message-ID: <47540D88.2030004@Yahoo.com>


I'd love to see an ant mapper 
(http://ant.apache.org/manual/CoreTypes/mapper.html) built around the 
same code that the ANTLR3 task uses for deciding the output filename 
(that is, the "grammar type" info in the file). It should probably take 
the same options vis-a-vis flattening directory structures, output 
directory, etc. as does ANTLR3 itself:

<pathconvert
    property = "my.parser.path"
    targetos = "unix"
    >
    <mapper
       type = "antlr3:ParserNameMapper"
       from = "${my.grammar.file}"
       />
</pathconvert>
<echo>My parser file path is: ${my.parser.path}</echo>

Would output any of:

lexer.g -> null
parser.g -> parser.java (or is it parserParser.java?)
combo.g -> comboParser.java
treeparser.g -> treeparser.java


depending on what the grammar type was.

There could obviously be an "antlr3:LexerNameMapper" as well, and even 
an "antlr3:WorthlessIntermediateFilesToDeleteMapper" until that stupid 
__.g file goes away.

=Austin


From stevagewp at gmail.com  Mon Dec  3 06:40:52 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Tue, 4 Dec 2007 01:40:52 +1100
Subject: [antlr-interest] Unexpected breakage of code
Message-ID: <b8ceeef70712030640n5eb5c7fcxe9f1c6c0bd52f34e@mail.gmail.com>

[I'm sending this as a "something very unexpected happened to poor
naive newbie, he's ok now, but thought you should know"]

A very small change to a lexer rule caused a very obscure error message:

In the following code:
----
RFC_LINK:
  ((RFC_LINK_ACTUAL) => RFC_LINK_ACTUAL
  | LETTER { $type=LETTERS; }
  );

fragment
RFC_LINK_ACTUAL:
    'RFC'
    ' '+
    ('0'..'9')+;
----

If '0'..'9' is replaced by DIGIT (which is defined and used
elsewhere), then the generated code seems to be very different, and
use a "specialStateTransition" method in a class which derives from
DFA. That caused a string of errors of this type:

[01:24:44] \tmp\antlrworks\headerline8Lexer.java:4304: cannot find symbol
[01:24:44] symbol  : variable in_foo
[01:24:44] location: class headerline8Lexer.DFA24
[01:24:44]                                 !this.in_foo &&
[01:24:44]                                  ^

This happens because *that*, totally unrelated, code is no longer in a
method on the lexer class, but has been moved away to this new DFA
class. So you have one apparently insignificant change in one place
causing an obscure message to eminate from an apparently unrelated
place...

Perhaps this is a known issue, but for me it was extremely surprising,
so perhaps there is a way to reduce the impact of it, or something?
Getting Java compile errors is always so disconcerting...

Steve

From jneeraj at us.ibm.com  Mon Dec  3 07:01:31 2007
From: jneeraj at us.ibm.com (Neeraj Joshi)
Date: Mon, 3 Dec 2007 08:01:31 -0700
Subject: [antlr-interest] Neeraj Joshi/Durham/IBM is out of the office.
Message-ID: <OF7E4B8F33.42F1E6EF-ON872573A6.005289AD-872573A6.005289AD@us.ibm.com>


I will be out of the office starting  12/03/2007 and will not return until
12/10/2007.

I am on vacation and  will have no access to email until wednesday 16th oct
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/b712efa5/attachment.html 

From doctlo-antlr at yahoo.com  Mon Dec  3 10:14:14 2007
From: doctlo-antlr at yahoo.com (Thad)
Date: Mon, 3 Dec 2007 10:14:14 -0800 (PST)
Subject: [antlr-interest] Line delimted grammar
Message-ID: <382433.40612.qm@web82509.mail.mud.yahoo.com>

For a certain project I am working on I need to parse
a complex configuration file. 

Two propeties of the file are: it is line delimited,
and blank lines are ignored.

I tried to do this a while ago and encountered
problems with the line delimitaion.

Can someone recommend a simple antlr example for a
line delimited language with blank lines ignored? ( It
seems to be the combination of the two that causes me
problems. ) 

If you can't then can someone post a grammar for a
simple language? Something like:
each program is a list of statements, statements are
one line, whitespace is ignored, blank lines are
ignored, anything after a # is a comment, lines of the
form letter=integer are statements?

Thanks
Thad

PS.
Is there some simple way to search the archives for
old messages? I can help but think that there is
something on line delimited grammars in there.


From parrt at cs.usfca.edu  Mon Dec  3 10:19:22 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 3 Dec 2007 10:19:22 -0800
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <4753FF35.8080803@gmx.de>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
	<4753FF35.8080803@gmx.de>
Message-ID: <8D6230B0-F089-4859-8046-6EF0282A21DB@cs.usfca.edu>


On Dec 3, 2007, at 5:05 AM, Johannes Luber wrote:
> It makes sense, but what about single deletion/insertion in normal  
> mode?

Well, i've been thinking.  I realize now that that mode is only of  
academic interest.  How can you execute actions without putting in  
guards against all possible input syntax errors?  That's what we call  
a parser. ;)  So, upon error in a rule, you must execute no further  
actions and immediately report error, recover, and return.

> How do we deal with an ERROR node in the next grammar? Or is then  
> there
> a way to emit an error message during the construction of the AST?

Well, presumably, you wouldn't pass the tree along to another  
grammar...it is malformed.

Ter

From jaluber at gmx.de  Mon Dec  3 10:54:57 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 03 Dec 2007 19:54:57 +0100
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <8D6230B0-F089-4859-8046-6EF0282A21DB@cs.usfca.edu>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>	<4753FF35.8080803@gmx.de>
	<8D6230B0-F089-4859-8046-6EF0282A21DB@cs.usfca.edu>
Message-ID: <47545101.8000700@gmx.de>

Terence Parr wrote:
> 
> On Dec 3, 2007, at 5:05 AM, Johannes Luber wrote:
>> It makes sense, but what about single deletion/insertion in normal mode?
> 
> Well, i've been thinking.  I realize now that that mode is only of
> academic interest.  How can you execute actions without putting in
> guards against all possible input syntax errors?  That's what we call a
> parser. ;)  So, upon error in a rule, you must execute no further
> actions and immediately report error, recover, and return.

I agree. Will you use then the Strategy pattern in your changed source code?

>> How do we deal with an ERROR node in the next grammar? Or is then there
>> a way to emit an error message during the construction of the AST?
> 
> Well, presumably, you wouldn't pass the tree along to another
> grammar...it is malformed.

Better worded: How does this change affect the error recovery as
described in the book?

Johannes

From parrt at cs.usfca.edu  Mon Dec  3 11:01:18 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 3 Dec 2007 11:01:18 -0800
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <47545101.8000700@gmx.de>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>	<4753FF35.8080803@gmx.de>
	<8D6230B0-F089-4859-8046-6EF0282A21DB@cs.usfca.edu>
	<47545101.8000700@gmx.de>
Message-ID: <A3331CBF-FA89-4764-A7AF-D71A9FBE1FB5@cs.usfca.edu>


On Dec 3, 2007, at 10:54 AM, Johannes Luber wrote:

> Terence Parr wrote:
>>
>> On Dec 3, 2007, at 5:05 AM, Johannes Luber wrote:
>>> It makes sense, but what about single deletion/insertion in  
>>> normal mode?
>>
>> Well, i've been thinking.  I realize now that that mode is only of
>> academic interest.  How can you execute actions without putting in
>> guards against all possible input syntax errors?  That's what we  
>> call a
>> parser. ;)  So, upon error in a rule, you must execute no further
>> actions and immediately report error, recover, and return.
>
> I agree. Will you use then the Strategy pattern in your changed  
> source code?

I don't know the strategy pattern (I don't really pay attention to  
formal pattern names). can you be more specific?

  I'm thinking about simply removing the single token insertion and  
deletion and providing a faq entry that describes how to turn it back on

>>> How do we deal with an ERROR node in the next grammar? Or is then  
>>> there
>>> a way to emit an error message during the construction of the AST?
>>
>> Well, presumably, you wouldn't pass the tree along to another
>> grammar...it is malformed.
>
> Better worded: How does this change affect the error recovery as
> described in the book?

Only where it talks about how it impressed it is with itself. ;)   It  
won't really affect anybody.  I'm not convinced that it will actually  
be worse at air recovery.  It will probably actually reduce the  
number of exceptions encountered upon syntax error.

Ter

From fhellerhoff at yahoo.de  Mon Dec  3 11:00:42 2007
From: fhellerhoff at yahoo.de (Friedhelm)
Date: Mon, 03 Dec 2007 20:00:42 +0100
Subject: [antlr-interest] Problem with position of parenthesis term
Message-ID: <4754525A.1060300@yahoo.de>

Maybe it is my misunderstanding, but I have problems regarding 
parenthese is my logic (please see my grammar below)

I have added rules for handling AND and OR and for expressions in 
parenthesis.
But now, depending on the positition of the parenthesis term, the lexer 
does not evaluate correctly.

working:            AGE>0 AND (AGE<10 OR WEIGHT<500)
NOT working    (AGE<10 OR WEIGHT<500) AND AGE>0


What is my mistake? Does anyone have an example with similar logic?

Thanks for any answer,
  Fridi
------------------------------------------------------------------------------------------------------------------------------------------------------

grammar Rule1;

options {   
   language = CSharp;
   output=AST;   
   ASTLabelType=CommonTree;
}

/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/
 

tokens
{ 
  AND = 'AND';
  OR = 'OR';
}
   


// ensure that ANTLR will NOT catch exceptions itself
@rulecatch {
    catch (RecognitionException e) {
      throw e;
    }
}


WS    : (' '
    | '\t'
    | '\n'
    | '\r')
    { channel=HIDDEN; }
    ;
   
LPAR
    : '('
    ;

RPAR
    : ')'
    ; 

// gr?sser als (greather than)   
GT   
    : '>'
    ;     

// kleiner als (less than)
LT_
    : '<'
    ;   

// kleiner oder gleich (less equals)
LEQ
    : '<='
    ;   

// gr?sser oder gleich (less equals)
GEQ
    : '>='
    ;   
   
// gleich (equals)
EQ
    : '='
    ;   

// Eine Zahl   
INT   
    : DIGIT+
    ;
 
DATE
    : '\"' '0'..'3' '0'..'9' '\.' '0'..'1' '0'..'2' '\.' DIGIT DIGIT 
DIGIT DIGIT '\"'
    ; 
 
fragment 
DIGIT
    : '0'..'9'
    ;
   
fragment 
LETTER
    : 'A'..'Z' | 'a'..'z'
    ;   
   
IDENT 
    : LETTER (INT | LETTER | '_')+
    ;   
 
STRING
      : '\"'! (~('\"'|'\r'|'\n'|'\.'))* '\"'!
    ;
   
/*------------------------------------------------------------------
 * PARSER RULES
 *------------------------------------------------------------------*/

   
comparable   
    :    IDENT
    |    INT
    |    DATE // put date before string!
    |    STRING
    ;


scalarCondition
    :    IDENT (GT|LT_|LEQ|GEQ|EQ)^ comparable
    ;


condition
    :    LPAR! expression RPAR!
    |    scalarCondition
    ;

term
    :    condition (AND^ condition)*
    ;
       
expression
    :    term  (OR^ term )*
    ;   
   




From jaluber at gmx.de  Mon Dec  3 11:10:55 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 03 Dec 2007 20:10:55 +0100
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <A3331CBF-FA89-4764-A7AF-D71A9FBE1FB5@cs.usfca.edu>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>	<4753FF35.8080803@gmx.de>	<8D6230B0-F089-4859-8046-6EF0282A21DB@cs.usfca.edu>	<47545101.8000700@gmx.de>
	<A3331CBF-FA89-4764-A7AF-D71A9FBE1FB5@cs.usfca.edu>
Message-ID: <475454BF.7040107@gmx.de>

Terence Parr wrote:
> I don't know the strategy pattern (I don't really pay attention to
> formal pattern names). can you be more specific?

<http://en.wikipedia.org/wiki/Strategy_pattern>. In our context, people
can exchange the error handler easily. The default may be printing error
messages, a new behaviour may allow to check errors programmatically via
exception transfer. Using Strategy gives more flexibility overall at a
very low cost.

>  I'm thinking about simply removing the single token insertion and
> deletion and providing a faq entry that describes how to turn it back on
> 
>> Better worded: How does this change affect the error recovery as
>> described in the book?
> 
> Only where it talks about how it impressed it is with itself. ;)

It should have been "effect" then? Otherwise I don't get your joke.

> It won't really affect anybody.  I'm not convinced that it will actually
> be worse at air recovery.  It will probably actually reduce the number of
> exceptions encountered upon syntax error.

That's good.

Johannes

From harald_m_mueller at gmx.de  Mon Dec  3 12:15:26 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Mon, 3 Dec 2007 21:15:26 +0100
Subject: [antlr-interest] Grammar does not match a valid sentence
In-Reply-To: <e6dd5ba30712030452w7e7b8d40idda76a22df2b4ef9@mail.gmail.com>
Message-ID: <20071203201529.0019211EBE5@www.antlr.org>

Edson - 
 
I looked into your grammar and played with it a little ... that language is
more or less a horror story.
 
Essentially, you can say things like
    a == 5 && c != 6
but also
    a == 5 && != 6
(without the c) and then there are operators that may be names, so you can
say
    a == 5 && c 6
(meaning probably a == 5 && a c 6, where c is some user-defined operator);
and then you can have those brackets as in
    a[3] == 5 && b[3] == 6
but an operator can ALSO have brackets, so you can have
    a[3] == 5 && b[3] 6
(meaning probably a[3] == 5 && a b[3] 6 - whatever the operator b[3] is
meant to be ...) as well as
    a[3] == 5 && b[3] c[2] 6
where now the b[3] is a path and c[2] is the operator.
 
The grammar tries to find a way thru this by having { backtracking=true; }
options in it - but I fear that hte graphs of the LL(*) analysis and the {
backtracking=true; } don't always work the way they are supposed to: Either
because ANTLR simply won't be able to do everything, or because there is
some tiny flaw in the grammar so that there's really no way to parse some of
the constructs.
When you remove the { backtracking=true; } around line 85 (I edited the file
a few times, so that number may be off), ANTLR tells you
 
    error(211): DRL2.g:88:3: [fatal] rule and_restr_connective has non-LL(*)
decision due to recursive rule invocations reachable from alts 1,2.  Resolve
by left-factoring or using syntactic predicates or using backtrack=true
option.
    warning(200): DRL2.g:88:3: Decision can match input such as
"DOUBLE_AMPER LEFT_PAREN {LEFT_PAREN, NOT, '=='..'!='}" using multiple
alternatives: 1, 2
    As a result, alternative(s) 2 were disabled for that input
 
Now, this definitely is a horrible thing - a grammar that is "not at all
LL(*)." ...
 
I would argue that the only way to "repiar" this machinery is to have only
one level of nested expressions, so that eg. DOUBLE_AMPER is only at one
place in the grammar. The core rule for a simple expression might be
something like
 
    simpleexpression:    path? operator value
 
where path is defined in some LL(k) (or LL(*) way) so that it is possible to
decide whether there is path. One step further, one could try
 
    simpleexpression
        : (path)=> path operator value
        | operator value
        ;
 
But I may also be wrong with these suggestions ... only having the full
thing set up will show what's going on.
 
Regards & good luck
Harald


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Edson Tirelli
Sent: Monday, December 03, 2007 1:53 PM
To: antlr-interest at antlr.org
Cc: Mark Proctor; Michael Neale
Subject: [antlr-interest] Grammar does not match a valid sentence



     All,

     I have a grammar that is not matching a valid sentence and I don't
understand exactly why. If anyone can shed some light, I would really
appreciate.
     To see the problem:

Using: antlr v3.0 and antlrworks 1.1.4:

1. Load the attached grammar in antlrworks 
2. Select the interpreter tab and paste the following sentence:

Address( street[1] == "Low" && street[2] == "High" ) 

3. Use the rule "fact" as an entry point to parse the sentence above.

     The above sentence is a valid sentence, but it is raising a
NoViableAltException in the "and_restr_connective" rule, while the expected
behavior is not to match "and_restr_connective", but go back in the call
hierarchy and to match the "and_constr" rule. 
     If you remove the square brackets, the sentence will work fine
(matching the "and_constr" rule):

Address( street1 == "Low" && street2 == "High" )

     Any idea how can I fix that?
     Thanks in advance,

     []s
     Edson

-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/43d5f1fb/attachment.html 

From antlr at twistedprotein.com  Mon Dec  3 12:24:21 2007
From: antlr at twistedprotein.com (Brendon McLean)
Date: Mon, 3 Dec 2007 22:24:21 +0200
Subject: [antlr-interest] Strategy for Java AST rewrite
Message-ID: <CEEA77FA-C318-4DDE-AB4C-B084DE85D3C2@twistedprotein.com>

Hi,

(Disclaimer: I've checked Google and searched the mailing list but I  
can't find the answer.)

I'm writing some code that needs to create a simple AST for Java.   
The AST will be used to identify code fragments that can be modified  
in a certain way and possibly written back to the file.  I've been  
leaning towards Antlr 3 because, from what I can gather it seems  
Antlr 3 has made it considerably easier to get token offsets and  
hence modify the underlying file.  On the other hand, there is a  
working 2.7 grammar with what seems to be a well thought out AST,  
which the new grammar is lacking.

I've been working on the new grammar but have run into a few things  
which make me wonder how much real-world action it's seen.  For  
example, it can currently match the annotation:

@Broken("Default Parameter", "Illegal Parameter").

The 2.7 grammar won't let this pass.  To add to my dilemma, it is  
obviously possible to make do with Antlr 2.7 as I've seen some syntax  
highlighting projects based on it.  What I am wondering boils down to  
three questions:

1.  Is anyone else working on the Java grammar at the moment that  
would mind collaborating?
2.  Are the reasons for using ANTLR 3 compelling enough for me in my  
case?
3.  Are people using the new Java grammar for anything serious.

Regards,
Brendon McLean.

From harald_m_mueller at gmx.de  Mon Dec  3 12:43:33 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Mon, 3 Dec 2007 21:43:33 +0100
Subject: [antlr-interest] Problem with position of parenthesis term
In-Reply-To: <4754525A.1060300@yahoo.de>
Message-ID: <20071203204337.9009011EB67@www.antlr.org>

Hallo Herr Hellerhoff!

Your grammar is fine - both your examples worked when I tried them, as far
as I could see. What is your concrete problem? (error message?)

BTW, you should 
a) reorder it according to ANTLR conventions - i.e., put parser rules before
lexer rules; and write the parser rules in top-down order instead of
bottom-up;
b) maybe indicate the start rule by writing a rule like that:
	rule: expression;
- right now, all top-level rules of your grammar call each other
recursively, so ANTLR issues a warning that it does not know what the "top
level rule" is.

Best regards
Harald M. M?ller
Cortex-Brainware

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Friedhelm
> Sent: Monday, December 03, 2007 8:01 PM
> To: antlr
> Subject: [antlr-interest] Problem with position of parenthesis term
> 
> Maybe it is my misunderstanding, but I have problems 
> regarding parenthese is my logic (please see my grammar below)
> 
> I have added rules for handling AND and OR and for 
> expressions in parenthesis.
> But now, depending on the positition of the parenthesis term, 
> the lexer does not evaluate correctly.
> 
> working:            AGE>0 AND (AGE<10 OR WEIGHT<500)
> NOT working    (AGE<10 OR WEIGHT<500) AND AGE>0
> 
> 
> What is my mistake? Does anyone have an example with similar logic?
> 
> Thanks for any answer,
>   Fridi
> --------------------------------------------------------------
> --------------------------------------------------------------
> --------------------------
> 
> grammar Rule1;
> 
> options {   
>    language = CSharp;
>    output=AST;   
>    ASTLabelType=CommonTree;
> }
> 
> /*------------------------------------------------------------------
>  * LEXER RULES
>  *------------------------------------------------------------------*/
>  
> 
> tokens
> {
>   AND = 'AND';
>   OR = 'OR';
> }
>    
> 
> 
> // ensure that ANTLR will NOT catch exceptions itself
> @rulecatch {
>     catch (RecognitionException e) {
>       throw e;
>     }
> }
> 
> 
> WS    : (' '
>     | '\t'
>     | '\n'
>     | '\r')
>     { channel=HIDDEN; }
>     ;
>    
> LPAR
>     : '('
>     ;
> 
> RPAR
>     : ')'
>     ; 
> 
> // gr?sser als (greather than)   
> GT   
>     : '>'
>     ;     
> 
> // kleiner als (less than)
> LT_
>     : '<'
>     ;   
> 
> // kleiner oder gleich (less equals)
> LEQ
>     : '<='
>     ;   
> 
> // gr?sser oder gleich (less equals)
> GEQ
>     : '>='
>     ;   
>    
> // gleich (equals)
> EQ
>     : '='
>     ;   
> 
> // Eine Zahl   
> INT   
>     : DIGIT+
>     ;
>  
> DATE
>     : '\"' '0'..'3' '0'..'9' '\.' '0'..'1' '0'..'2' '\.' DIGIT DIGIT 
> DIGIT DIGIT '\"'
>     ; 
>  
> fragment 
> DIGIT
>     : '0'..'9'
>     ;
>    
> fragment 
> LETTER
>     : 'A'..'Z' | 'a'..'z'
>     ;   
>    
> IDENT 
>     : LETTER (INT | LETTER | '_')+
>     ;   
>  
> STRING
>       : '\"'! (~('\"'|'\r'|'\n'|'\.'))* '\"'!
>     ;
>    
> /*------------------------------------------------------------------
>  * PARSER RULES
>  *------------------------------------------------------------------*/
> 
>    
> comparable   
>     :    IDENT
>     |    INT
>     |    DATE // put date before string!
>     |    STRING
>     ;
> 
> 
> scalarCondition
>     :    IDENT (GT|LT_|LEQ|GEQ|EQ)^ comparable
>     ;
> 
> 
> condition
>     :    LPAR! expression RPAR!
>     |    scalarCondition
>     ;
> 
> term
>     :    condition (AND^ condition)*
>     ;
>        
> expression
>     :    term  (OR^ term )*
>     ;   
>    
> 
> 


From tirelli at post.com  Mon Dec  3 12:52:45 2007
From: tirelli at post.com (Edson Tirelli)
Date: Mon, 3 Dec 2007 18:52:45 -0200
Subject: [antlr-interest] Grammar does not match a valid sentence
In-Reply-To: <20071203201534.C58791E3009@spf3.us4.outblaze.com>
References: <e6dd5ba30712030452w7e7b8d40idda76a22df2b4ef9@mail.gmail.com>
	<20071203201534.C58791E3009@spf3.us4.outblaze.com>
Message-ID: <e6dd5ba30712031252s228cc216l9be11f2319f935cc@mail.gmail.com>

   Harald,

   Thanks a lot for your answer. I know it probably took you quite some time
to go through that and answer me, because you captured the exact picture of
how the language is today. Our grammar has several non-LL(*) constructions
that were implemented earlier in its life and now we have to deal with
backward compatibility issues.
   Anyway, the change I tried to introduce in the grammar was allowing user
defined identifiers (ID token) followed by an optional [] to be used as an
operator. This is to allow things like:

Event( this after[1,10] anotherEvent )

   Where "after" is a user defined operator and 1,10 are parameters to it.
Anyway, I know that introducing an identification token (like '~') makes the
grammar work, but users don't want that.

Event( this ~after[1,10] anotherEvent )

  So we will have to either have all possible operators hardcoded in the
grammar (as Lexer tokens) or have the users to accept the addition of an
identification token.

   Thanks a lot for your feedback.

   Edson


I know that using a token to identify such operators

2007/12/3, Harald M. M?ller <harald_m_mueller at gmx.de>:
>
>  Edson -
>
> I looked into your grammar and played with it a little ... that language
> is more or less a horror story.
>
> Essentially, you can say things like
>     a == 5 && c != 6
> but also
>     a == 5 && != 6
> (without the c) and then there are operators that may be names, so you can
> say
>      a == 5 && c 6
> (meaning probably a == 5 && a c 6, where c is some user-defined operator);
> and then you can have those brackets as in
>     a[3] == 5 && b[3] == 6
> but an operator can ALSO have brackets, so you can have
>      a[3] == 5 && b[3] 6
> (meaning probably a[3] == 5 && a b[3] 6 - whatever the operator b[3] is
> meant to be ...) as well as
>      a[3] == 5 && b[3] c[2] 6
> where now the b[3] is a path and c[2] is the operator.
>
> The grammar tries to find a way thru this by having { backtracking=true; }
> options in it - but I fear that hte graphs of the LL(*) analysis and the {
> backtracking=true; } don't always work the way they are supposed to: Either
> because ANTLR simply won't be able to do everything, or because there is
> some tiny flaw in the grammar so that there's really no way to parse some of
> the constructs.
> When you remove the { backtracking=true; } around line 85 (I edited the
> file a few times, so that number may be off), ANTLR tells you
>
>     error(211): DRL2.g:88:3: [fatal] rule and_restr_connective has
> non-LL(*) decision due to recursive rule invocations reachable from alts
> 1,2.  Resolve by left-factoring or using syntactic predicates or using
> backtrack=true option.
>     warning(200): DRL2.g:88:3: Decision can match input such as
> "DOUBLE_AMPER LEFT_PAREN {LEFT_PAREN, NOT, '=='..'!='}" using multiple
> alternatives: 1, 2
>     As a result, alternative(s) 2 were disabled for that input
>
> Now, this definitely is a horrible thing - a grammar that is "not at all
> LL(*)." ...
>
> I would argue that the only way to "repiar" this machinery is to have only
> one level of nested expressions, so that eg. DOUBLE_AMPER is only at one
> place in the grammar. The core rule for a simple expression might be
> something like
>
>     simpleexpression:    path? operator value
>
> where path is defined in some LL(k) (or LL(*) way) so that it is possible
> to decide whether there is path. One step further, one could try
>
>      simpleexpression
>         : (path)=> path operator value
>         | operator value
>         ;
>
> But I may also be wrong with these suggestions ... only having the full
> thing set up will show what's going on.
>
> Regards & good luck
> Harald
>
>  ------------------------------
> *From:* antlr-interest-bounces at antlr.org [mailto:
> antlr-interest-bounces at antlr.org] *On Behalf Of *Edson Tirelli
> *Sent:* Monday, December 03, 2007 1:53 PM
> *To:* antlr-interest at antlr.org
> *Cc:* Mark Proctor; Michael Neale
> *Subject:* [antlr-interest] Grammar does not match a valid sentence
>
>
>      All,
>
>      I have a grammar that is not matching a valid sentence and I don't
> understand exactly why. If anyone can shed some light, I would really
> appreciate.
>      To see the problem:
>
> Using: antlr v3.0 and antlrworks 1.1.4:
>
> 1. Load the attached grammar in antlrworks
> 2. Select the interpreter tab and paste the following sentence:
>
> Address( street[1] == "Low" && street[2] == "High" )
>
> 3. Use the rule "fact" as an entry point to parse the sentence above.
>
>      The above sentence is a valid sentence, but it is raising a
> NoViableAltException in the "and_restr_connective" rule, while the expected
> behavior is not to match "and_restr_connective", but go back in the call
> hierarchy and to match the "and_constr" rule.
>      If you remove the square brackets, the sentence will work fine
> (matching the "and_constr" rule):
>
> Address( street1 == "Low" && street2 == "High" )
>
>      Any idea how can I fix that?
>      Thanks in advance,
>
>      []s
>      Edson
>
> --
>   Edson Tirelli
>   JBoss Drools Core Development
>   Office: +55 11 3529-6000
>   Mobile: +55 11 9287-5646
>   JBoss, a division of Red Hat @ www.jboss.com
>
>


-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/953fafdd/attachment-0001.html 

From harald_m_mueller at gmx.de  Mon Dec  3 13:01:10 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Mon, 3 Dec 2007 22:01:10 +0100
Subject: [antlr-interest] Grammar does not match a valid sentence
In-Reply-To: <e6dd5ba30712031252s228cc216l9be11f2319f935cc@mail.gmail.com>
Message-ID: <20071203210122.0827111EB8D@www.antlr.org>

Edson -
 
I won't go much deeper into your troubles - but couldn't you at least use
different parentheses for that (as I understand it, new) construct of
"operator with parameters"? E.g.
    after[[1,10]]
    after<<1,10>>
    after{{1,10}}
    after/1,10/
    after`1,10?
or whatever other languages have as grouping tokens ... HTML has <!-- -->
for comments - how about
    after<-- 1,10 -->
;-) 
 
But that may not really help you ...
Regards & good luck!
HArald


  _____  

From: ed.tirelli at gmail.com [mailto:ed.tirelli at gmail.com] On Behalf Of Edson
Tirelli
Sent: Monday, December 03, 2007 9:53 PM
To: harald_m_mueller at gmx.de; antlr-interest at antlr.org
Cc: Mark Proctor; Michael Neale
Subject: Re: [antlr-interest] Grammar does not match a valid sentence



   Harald,

   Thanks a lot for your answer. I know it probably took you quite some time
to go through that and answer me, because you captured the exact picture of
how the language is today. Our grammar has several non-LL(*) constructions
that were implemented earlier in its life and now we have to deal with
backward compatibility issues. 
   Anyway, the change I tried to introduce in the grammar was allowing user
defined identifiers (ID token) followed by an optional [] to be used as an
operator. This is to allow things like:

Event( this after[1,10] anotherEvent ) 

   Where "after" is a user defined operator and 1,10 are parameters to it.
Anyway, I know that introducing an identification token (like '~') makes the
grammar work, but users don't want that. 

Event( this ~after[1,10] anotherEvent )

  So we will have to either have all possible operators hardcoded in the
grammar (as Lexer tokens) or have the users to accept the addition of an
identification token.

   Thanks a lot for your feedback.

   Edson


I know that using a token to identify such operators


2007/12/3, Harald M. M?ller <harald_m_mueller at gmx.de>: 

Edson - 
 
I looked into your grammar and played with it a little ... that language is
more or less a horror story.
 
Essentially, you can say things like
    a == 5 && c != 6
but also
    a == 5 && != 6
(without the c) and then there are operators that may be names, so you can
say

    a == 5 && c 6
(meaning probably a == 5 && a c 6, where c is some user-defined operator);
and then you can have those brackets as in
    a[3] == 5 && b[3] == 6
but an operator can ALSO have brackets, so you can have

    a[3] == 5 && b[3] 6
(meaning probably a[3] == 5 && a b[3] 6 - whatever the operator b[3] is
meant to be ...) as well as

    a[3] == 5 && b[3] c[2] 6
where now the b[3] is a path and c[2] is the operator.
 
The grammar tries to find a way thru this by having { backtracking=true; }
options in it - but I fear that hte graphs of the LL(*) analysis and the {
backtracking=true; } don't always work the way they are supposed to: Either
because ANTLR simply won't be able to do everything, or because there is
some tiny flaw in the grammar so that there's really no way to parse some of
the constructs.
When you remove the { backtracking=true; } around line 85 (I edited the file
a few times, so that number may be off), ANTLR tells you
 
    error(211): DRL2.g:88:3: [fatal] rule and_restr_connective has non-LL(*)
decision due to recursive rule invocations reachable from alts 1,2.  Resolve
by left-factoring or using syntactic predicates or using backtrack=true
option.
    warning(200): DRL2.g:88:3: Decision can match input such as
"DOUBLE_AMPER LEFT_PAREN {LEFT_PAREN, NOT, '=='..'!='}" using multiple
alternatives: 1, 2
    As a result, alternative(s) 2 were disabled for that input
 
Now, this definitely is a horrible thing - a grammar that is "not at all
LL(*)." ...
 
I would argue that the only way to "repiar" this machinery is to have only
one level of nested expressions, so that eg. DOUBLE_AMPER is only at one
place in the grammar. The core rule for a simple expression might be
something like
 
    simpleexpression:    path? operator value
 
where path is defined in some LL(k) (or LL(*) way) so that it is possible to
decide whether there is path. One step further, one could try
 

    simpleexpression
        : (path)=> path operator value
        | operator value
        ;
 
But I may also be wrong with these suggestions ... only having the full
thing set up will show what's going on.
 
Regards & good luck
Harald


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Edson Tirelli
Sent: Monday, December 03, 2007 1:53 PM
To: antlr-interest at antlr.org
Cc: Mark Proctor; Michael Neale
Subject: [antlr-interest] Grammar does not match a valid sentence




     All,

     I have a grammar that is not matching a valid sentence and I don't
understand exactly why. If anyone can shed some light, I would really
appreciate.
     To see the problem:

Using: antlr v3.0 and antlrworks 1.1.4:

1. Load the attached grammar in antlrworks 
2. Select the interpreter tab and paste the following sentence:

Address( street[1] == "Low" && street[2] == "High" ) 

3. Use the rule "fact" as an entry point to parse the sentence above.

     The above sentence is a valid sentence, but it is raising a
NoViableAltException in the "and_restr_connective" rule, while the expected
behavior is not to match "and_restr_connective", but go back in the call
hierarchy and to match the "and_constr" rule. 
     If you remove the square brackets, the sentence will work fine
(matching the "and_constr" rule):

Address( street1 == "Low" && street2 == "High" )

     Any idea how can I fix that?
     Thanks in advance,

     []s
     Edson

-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com 




-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/8140f883/attachment.html 

From jaluber at gmx.de  Mon Dec  3 13:17:19 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 03 Dec 2007 22:17:19 +0100
Subject: [antlr-interest] Problem with position of parenthesis term
In-Reply-To: <4754525A.1060300@yahoo.de>
References: <4754525A.1060300@yahoo.de>
Message-ID: <4754725F.3030006@gmx.de>

Friedhelm wrote:
> Maybe it is my misunderstanding, but I have problems regarding
> parenthese is my logic (please see my grammar below)
> 
> I have added rules for handling AND and OR and for expressions in
> parenthesis.
> But now, depending on the positition of the parenthesis term, the lexer
> does not evaluate correctly.
> 
> working:            AGE>0 AND (AGE<10 OR WEIGHT<500)
> NOT working    (AGE<10 OR WEIGHT<500) AND AGE>0
> 
> 
> What is my mistake? Does anyone have an example with similar logic?
> 
> Thanks for any answer,
>  Fridi

Try adding

start: expression EOF;

Johannes


From bbrown at botspiritcompany.com  Mon Dec  3 15:58:55 2007
From: bbrown at botspiritcompany.com (bbrown)
Date: Mon, 3 Dec 2007 18:58:55 -0500
Subject: [antlr-interest] C grammar example from the site
Message-ID: <20071203235513.M35727@www.botspiritcompany.com>

I was having trouble generating the C grammar from the site.

"ANSI C grammar for ANTLR v3
Terence Parr Wed Jul 19, 2006 18:18
Haven't tested a bunch, but it's a good start. :)"

I downloaded the C.g file and did the following.

LIB1=${LIB}antlr-3.0.1.jar
LIB2=${LIB}antlr-runtime-3.0.1.jar
LIB3=${LIB}stringtemplate-3.1b1.jar
LIBb=${LIB}antlr-2.7.7.jar

java -classpath $CP1 org.antlr.Tool c.g

At this point, things look ok:

ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)
error(8):  file c.g contains grammar CParser; names must
warning(200): c.g:455:38: Decision can match input such a
le alternatives: 1, 2


But I don't get a Parser File?  is it supposed to generate a parser so that I
can process the tokens?

Here are the classes that are generated.

CParserLexer$DFA25.class  CParserLexer.class
CParserLexer$DFA35.class  ParseMain.class

--
Berlin Brown
[berlin dot brown at gmail dot com]
http://botspiritcompany.com/botlist/?


From khp at cypress.com  Mon Dec  3 17:53:31 2007
From: khp at cypress.com (Kalen Petersen)
Date: Mon, 03 Dec 2007 17:53:31 -0800
Subject: [antlr-interest] ANTLRv3 emits literal DOWN instead of Token.Down
Message-ID: <4754B31B.5090403@cypress.com>

Been using antlr for a few weeks now and it's great, but today I 
stumbled across this bug. 

The attached grammar produces invalid code in both java and C# targets.  
In the lookahead, it emits "DOWN" instead of "Token.Down" as in the 
recognition stage.  This is on line 37 in DownBugParser.java. 

This is observed with the version of antlr included in ANTLRWorks 1.1.5. 

Thanks,

--Kalen
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: DownBug.g
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071203/b77f6853/attachment-0001.pl 

From xverges at gmail.com  Mon Dec  3 18:14:50 2007
From: xverges at gmail.com (=?ISO-8859-1?Q?Xavier_Verg=E9s?=)
Date: Tue, 4 Dec 2007 03:14:50 +0100
Subject: [antlr-interest] Line delimted grammar
Message-ID: <6cf1e0bb0712031814y7ef3ee51s7608a90c7fc04710@mail.gmail.com>

>Is there some simple way to search the archives for
>old messages? I can help but think that there is
>something on line delimited grammars in there.

Maybe
http://groups.google.com/group/il-antlr-interest/

(My apologies if I'm breaking something in my first post to this list)

-Xavier

From stevagewp at gmail.com  Mon Dec  3 20:20:21 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Tue, 4 Dec 2007 15:20:21 +1100
Subject: [antlr-interest] Querying the parse tree
Message-ID: <b8ceeef70712032020if89bb9euf5edaa6226c90c74@mail.gmail.com>

Hi all,
  Just wondering if there is a way to get information about the parse
tree during a parse. For example, I'm frequently using code like this:

----
rule @init { in_rule_levels ++; }

...;

finally { in_rule_levels --; }

...

other_rule: { in_rule_levels < 1 }? => ... ;

----

Sometimes I just want to know at some other point whether I'm
currently "inside" a certain rule, other times I need to know how many
times inside it I am.

Perhaps there is a more elegant way to do this? I briefly looked at
@scope, but it seems more complicated than my approach above. All I
would ever need is the number of times a certain rule has been called
to get to the current point, and possibly a list of callers, like
["rule", "rule", "other_rule"].

Steve

From ankit.mehrotra at tcs.com  Mon Dec  3 22:06:06 2007
From: ankit.mehrotra at tcs.com (ankit.mehrotra at tcs.com)
Date: Tue, 4 Dec 2007 11:36:06 +0530
Subject: [antlr-interest] problem with expression evaluation using AST
In-Reply-To: <OF835DE575.51C79218-ON652573A6.003198AA-652573A6.0032E090@tcs.com>
Message-ID: <OFFA062B54.F80A8F10-ON652573A7.00216C0E-652573A7.0021C649@tcs.com>

Hi,

while evaluating expressions in AST's ,  tried a very simple example ,


tree grammar Eval;
options{
tokenVocab = ASTExpr;
ASTLabelType= CommonTree;
}

@header{
import java.util.HashMap;
}

@members{
HashMap memory = new HashMap();
}

prog    :       stat+;

stat    :       expr {System.out.println($expr.value);}
        |       ^('=' ID expr)
                {memory.put($ID.text,new Integer($expr.value));}
        ;

expr returns [int value]
        :       ^('+' a=expr b=expr) {$value = a+b;}
        |       ^('-' a=expr b=expr) {$value = a-b;}
        |       ^('*' a=expr b=expr) {$value = a*b;}
        |       ID
                {
                Integer v = (Integer)memory.get($ID.text);
                if (v != null) $value=v.intValue();
                else System.err.println("Undefined Variable "+$ID.text);
                }
        |       INT     {$value=Integer.parseInt($INT.text);}
        ;

ID      :       ('a'..'z'|'A'..'Z')+;
INT     :       '0'..'9'+;

and when have compiled it for generating code, it is giving me this error

java org.antlr.Tool Eval.g
ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
error(10):  internal error: Eval.g : java.lang.NullPointerException
org.antlr.tool.GrammarSanity.traceStatesLookingForLeftRecursion(GrammarSanity.ja
va:105)
org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion(GrammarSanity.java:37
)
org.antlr.tool.Grammar.checkAllRulesForLeftRecursion(Grammar.java:1388)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:268)
org.antlr.Tool.processGrammar(Tool.java:347)
org.antlr.Tool.process(Tool.java:268)
org.antlr.Tool.main(Tool.java:70)


Please Help

Ankit 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071204/163e6ac2/attachment.html 

From ankit.mehrotra at tcs.com  Mon Dec  3 22:43:21 2007
From: ankit.mehrotra at tcs.com (ankit.mehrotra at tcs.com)
Date: Tue, 4 Dec 2007 12:13:21 +0530
Subject: [antlr-interest] problem with expression evaluation using AST
In-Reply-To: <OFFA062B54.F80A8F10-ON652573A7.00216C0E-652573A7.0021C649@tcs.com>
Message-ID: <OF8620DFE9.B59984D6-ON652573A7.00252089-652573A7.00252F6F@tcs.com>

Hi,

I have resolved the problem. 

Sorry for the inconvienence

Thanks
Ankit 



ankit.mehrotra at tcs.com 
Sent by: antlr-interest-bounces at antlr.org
12/04/2007 11:36 AM

To
antlr-interest at antlr.org
cc

Subject
[antlr-interest] problem with expression evaluation using AST







Hi, 

while evaluating expressions in AST's ,  tried a very simple example , 


tree grammar Eval; 
options{ 
tokenVocab = ASTExpr; 
ASTLabelType= CommonTree; 
} 

@header{ 
import java.util.HashMap; 
} 

@members{ 
HashMap memory = new HashMap(); 
} 

prog        :        stat+; 

stat        :        expr {System.out.println($expr.value);} 
        |        ^('=' ID expr) 
                {memory.put($ID.text,new Integer($expr.value));} 
        ; 

expr returns [int value] 
        :        ^('+' a=expr b=expr) {$value = a+b;} 
        |        ^('-' a=expr b=expr) {$value = a-b;} 
        |        ^('*' a=expr b=expr) {$value = a*b;} 
        |        ID 
                { 
                Integer v = (Integer)memory.get($ID.text); 
                if (v != null) $value=v.intValue(); 
                else System.err.println("Undefined Variable "+$ID.text); 
                } 
        |        INT         {$value=Integer.parseInt($INT.text);} 
        ; 

ID        :        ('a'..'z'|'A'..'Z')+; 
INT        :        '0'..'9'+; 

and when have compiled it for generating code, it is giving me this error 

java org.antlr.Tool Eval.g 
ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007 
error(10):  internal error: Eval.g : java.lang.NullPointerException 
org.antlr.tool.GrammarSanity.traceStatesLookingForLeftRecursion(GrammarSanity.ja 

va:105) 
org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion(GrammarSanity.java:37 

) 
org.antlr.tool.Grammar.checkAllRulesForLeftRecursion(Grammar.java:1388) 
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:268) 
org.antlr.Tool.processGrammar(Tool.java:347) 
org.antlr.Tool.process(Tool.java:268) 
org.antlr.Tool.main(Tool.java:70) 


Please Help 

Ankit 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you



ForwardSourceID:NT00019B76 
=====-----=====-----=====
Notice: The information contained in this e-mail
message and/or attachments to it may contain 
confidential or privileged information. If you are 
not the intended recipient, any dissemination, use, 
review, distribution, printing or copying of the 
information contained in this e-mail message 
and/or attachments to it are strictly prohibited. If 
you have received this communication in error, 
please notify us by reply e-mail or telephone and 
immediately and permanently delete the message 
and any attachments. Thank you


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071204/68118d8d/attachment.html 

From antlr at mirality.co.nz  Mon Dec  3 23:45:25 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 04 Dec 2007 20:45:25 +1300
Subject: [antlr-interest] ANTLRv3 emits literal DOWN instead of
 Token.Down
In-Reply-To: <4754B31B.5090403@cypress.com>
References: <4754B31B.5090403@cypress.com>
Message-ID: <20071204074542.9D04D11EC20@www.antlr.org>

At 14:53 4/12/2007, Kalen Petersen wrote:
 >The attached grammar produces invalid code in both java and C#
 >targets.
 >In the lookahead, it emits "DOWN" instead of "Token.Down" as
 >in the recognition stage.  This is on line 37 in 
DownBugParser.java.
[...]
 >grammar DownBug;
 >	
 >bug_rule
 >	:   ^('+' bug_rule)
 >	|   '+' bug_rule
 >	|   ZERO
 >	;

Hmm.  I'm surprised that even compiles.  That doesn't seem like a 
valid construct to me -- you're using ^ like an AST node (which 
shouldn't work outside a rewrite rule or tree parser).


From Ramon.Verbruggen at quintiq.com  Tue Dec  4 00:10:50 2007
From: Ramon.Verbruggen at quintiq.com (Ramon Verbruggen)
Date: Tue, 04 Dec 2007 09:10:50 +0100
Subject: [antlr-interest] C grammar example from the site (bbrown)
In-Reply-To: <mailman.12219.1196733218.2534.antlr-interest@antlr.org>
References: <mailman.12219.1196733218.2534.antlr-interest@antlr.org>
Message-ID: <47551999.BB97.0087.0@quintiq.com>

> I was having trouble generating the C grammar from the site.
>
> java -classpath $CP1 org.antlr.Tool c.g
>
> At this point, things look ok:
>
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)
>error(8):  file c.g contains grammar CParser; names must
>
It's a hint! ANTLR is telling you that it does not expect a grammar
named CParser in a file called c.g, so you should rename your file to
CParser.g or rename your grammar to c.


>warning(200): c.g:455:38: Decision can match input such a
>le alternatives: 1, 2
>
Since this is a warning I would expect a parser to be generated after
you changed either the filename or the name of the grammar.

I hope this helps,

Ramon Verbruggen



This message contains information that may be privileged or confidential
and is the property of Quintiq. It is only intended for the person to
whom it is addressed. If you are not the intended recipient, you are not
authorized to read, print, retain, copy, disseminate, distribute or use
this message or any part thereof. If you have received this message in
error, please notify the sender immediately and delete all copies of
this message. Please note that e-mails are susceptible to change,
therefore they are not binding.

From fhellerhoff at yahoo.de  Tue Dec  4 02:33:58 2007
From: fhellerhoff at yahoo.de (Friedhelm)
Date: Tue, 04 Dec 2007 11:33:58 +0100
Subject: [antlr-interest] Problem with position of parenthesis term
Message-ID: <47552D16.5080806@yahoo.de>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071204/2555e8ef/attachment.html 

From xverges at gmail.com  Tue Dec  4 02:35:47 2007
From: xverges at gmail.com (Xavier)
Date: Tue, 4 Dec 2007 11:35:47 +0100
Subject: [antlr-interest] Simple grammar,
	but #if #endif and are making it harder
Message-ID: <6cf1e0bb0712040235x1f395430wb72752b9149b3906@mail.gmail.com>

I have to translate .ADM files, that specify Windows Policy Settings
http://msdn2.microsoft.com/en-us/library/aa372405.aspx

I'm having a hard time getting started,mostly because I'm new to ANTLR
and I don't know how to deal with comments and #if #endif sections.

1. To learn how to deal with #if #endif, is there a simpler starting
point than the full featured C Preprocessor from Youngki KU
http://www.antlr.org/grammar/1166665121622/Cpp.tar

2. What does look like a better approach?
2.1. Having a preprocessor step (a grammar to deal with comments and
#ifdefs) and handling the "meat" in a later step
2.2. Using a single grammar definition

Thanks in advance for any advice.

-Xavier

From harald_m_mueller at gmx.de  Tue Dec  4 03:13:28 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Tue, 04 Dec 2007 12:13:28 +0100
Subject: [antlr-interest] Simple grammar,
 but #if #endif and are making it harder
In-Reply-To: <6cf1e0bb0712040235x1f395430wb72752b9149b3906@mail.gmail.com>
References: <6cf1e0bb0712040235x1f395430wb72752b9149b3906@mail.gmail.com>
Message-ID: <20071204111328.322640@gmx.net>

Hi - re item 2., after a quick scan over the documentation, I'd say that the following is legitimate:

    POLICY !!DisableTaskMgr    
#if version < 4.0
       EXPLAIN !!DisableTaskMgr_Explain
#endif
#if version >= 4.0
       EXPLAIN !!...something else...
#endif
       VALUENAME "DisableTaskMgr"
   END POLICY

However, according to the documentation, there can only be one EXPLAIN clause in a POLICY. Therefore, if your grammar should mimick Microsoft's definition, you have to *evaluate* the #ifs *before* running the parser. Usually, this means that having all in one grammar gets really ugly.

In your case, one could try a one-pass grammar, because the #if's as well as the other commands appear to be line-oriented (are they really? I did not find any positive statement on this ...), so some mingling machinery might be possible.

Still, I would go for 2 passes (be they in-memory; or using a real intermediate file - how large is your input going to be? everything below a few 10000 lines does not need read-write optimization, IMHO): It is simply simpler.

Regards
Harald M.

-------- Original-Nachricht --------
> Datum: Tue, 4 Dec 2007 11:35:47 +0100
> Von: Xavier <xverges at gmail.com>
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Simple grammar,	but #if #endif and are making it harder

> I have to translate .ADM files, that specify Windows Policy Settings
> http://msdn2.microsoft.com/en-us/library/aa372405.aspx
> 
> I'm having a hard time getting started,mostly because I'm new to ANTLR
> and I don't know how to deal with comments and #if #endif sections.
> 
> 1. To learn how to deal with #if #endif, is there a simpler starting
> point than the full featured C Preprocessor from Youngki KU
> http://www.antlr.org/grammar/1166665121622/Cpp.tar
> 
> 2. What does look like a better approach?
> 2.1. Having a preprocessor step (a grammar to deal with comments and
> #ifdefs) and handling the "meat" in a later step
> 2.2. Using a single grammar definition
> 
> Thanks in advance for any advice.
> 
> -Xavier

-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From relationalalgebra at gmail.com  Tue Dec  4 03:27:51 2007
From: relationalalgebra at gmail.com (G R)
Date: Tue, 4 Dec 2007 12:27:51 +0100
Subject: [antlr-interest] ANTLR embedded code within Latex
Message-ID: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>

Hi !

I'm writing an essay -using Latex- for my school on ANTLR.
I wonder if someone has already done this before (I think so) and if there
is some Latex listing definition for ANTLR syntax.
If there is already something existing i would really appreciate if you
could tell me. This time google isn't my friend, and want not help me.

Thanks!

G.R.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071204/78541382/attachment.html 

From laguest at archeia.com  Tue Dec  4 04:01:46 2007
From: laguest at archeia.com (Luke A. Guest)
Date: Tue, 04 Dec 2007 12:01:46 +0000
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
Message-ID: <1196769706.5145.53.camel@rogue>

On Tue, 2007-12-04 at 12:27 +0100, G R wrote:
> Hi !
> 
> I'm writing an essay -using Latex- for my school on ANTLR.
> I wonder if someone has already done this before (I think so) and if
> there is some Latex listing definition for ANTLR syntax.
> If there is already something existing i would really appreciate if
> you could tell me. This time google isn't my friend, and want not help
> me. 

The closest you'll probably get is a code (think that's what it's
called) environment, not sure if it's installed by default.

It most probably won't do syntax highlighting for ANTLR though.

Luke.



From xverges at gmail.com  Tue Dec  4 04:57:45 2007
From: xverges at gmail.com (Xavier)
Date: Tue, 4 Dec 2007 13:57:45 +0100
Subject: [antlr-interest] Simple grammar,
	but #if #endif and are making it harder
In-Reply-To: <20071204111328.322640@gmx.net>
References: <6cf1e0bb0712040235x1f395430wb72752b9149b3906@mail.gmail.com>
	<20071204111328.322640@gmx.net>
Message-ID: <6cf1e0bb0712040457r5c30af07t55fd904428970c40@mail.gmail.com>

> Still, I would go for 2 passes (be they in-memory; or using a real intermediate file)

Thanks, Harald. 2 passes and real intermediate file will make me feel
safer in my baby steps :-)

-Xavier

On Dec 4, 2007 12:13 PM, Harald Mueller <harald_m_mueller at gmx.de> wrote:
> Hi - re item 2., after a quick scan over the documentation, I'd say that the following is legitimate:
>
>     POLICY !!DisableTaskMgr
> #if version < 4.0
>        EXPLAIN !!DisableTaskMgr_Explain
> #endif
> #if version >= 4.0
>        EXPLAIN !!...something else...
> #endif
>        VALUENAME "DisableTaskMgr"
>    END POLICY
>
> However, according to the documentation, there can only be one EXPLAIN clause in a POLICY. Therefore, if your grammar should mimick Microsoft's definition, you have to *evaluate* the #ifs *before* running the parser. Usually, this means that having all in one grammar gets really ugly.
>
> In your case, one could try a one-pass grammar, because the #if's as well as the other commands appear to be line-oriented (are they really? I did not find any positive statement on this ...), so some mingling machinery might be possible.
>
> Still, I would go for 2 passes (be they in-memory; or using a real intermediate file - how large is your input going to be? everything below a few 10000 lines does not need read-write optimization, IMHO): It is simply simpler.
>
> Regards
> Harald M.
>
> -------- Original-Nachricht --------
> > Datum: Tue, 4 Dec 2007 11:35:47 +0100
> > Von: Xavier <xverges at gmail.com>
> > An: antlr-interest at antlr.org
> > Betreff: [antlr-interest] Simple grammar,     but #if #endif and are making it harder
>
>
> > I have to translate .ADM files, that specify Windows Policy Settings
> > http://msdn2.microsoft.com/en-us/library/aa372405.aspx
> >
> > I'm having a hard time getting started,mostly because I'm new to ANTLR
> > and I don't know how to deal with comments and #if #endif sections.
> >
> > 1. To learn how to deal with #if #endif, is there a simpler starting
> > point than the full featured C Preprocessor from Youngki KU
> > http://www.antlr.org/grammar/1166665121622/Cpp.tar
> >
> > 2. What does look like a better approach?
> > 2.1. Having a preprocessor step (a grammar to deal with comments and
> > #ifdefs) and handling the "meat" in a later step
> > 2.2. Using a single grammar definition
> >
> > Thanks in advance for any advice.
> >
> > -Xavier
>
> --
> GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
> Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail
>



-- 
-Xavier

From relationalalgebra at gmail.com  Tue Dec  4 04:13:18 2007
From: relationalalgebra at gmail.com (G R)
Date: Tue, 4 Dec 2007 13:13:18 +0100
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <1196769706.5145.53.camel@rogue>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
	<1196769706.5145.53.camel@rogue>
Message-ID: <2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>

That's the problem : the Latex package listings is used to embedded code
(Java, C, ...) but nothing defined for ANTLR grammars.
I can define it myself but it's some kind of tough task, that's why I'm
asking you if someone already done this ans could share it :-)

G. R.

2007/12/4, Luke A. Guest <laguest at archeia.com>:
>
> On Tue, 2007-12-04 at 12:27 +0100, G R wrote:
> > Hi !
> >
> > I'm writing an essay -using Latex- for my school on ANTLR.
> > I wonder if someone has already done this before (I think so) and if
> > there is some Latex listing definition for ANTLR syntax.
> > If there is already something existing i would really appreciate if
> > you could tell me. This time google isn't my friend, and want not help
> > me.
>
> The closest you'll probably get is a code (think that's what it's
> called) environment, not sure if it's installed by default.
>
> It most probably won't do syntax highlighting for ANTLR though.
>
> Luke.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071204/8a780390/attachment.html 

From relationalalgebra at gmail.com  Tue Dec  4 06:07:12 2007
From: relationalalgebra at gmail.com (G R)
Date: Tue, 4 Dec 2007 15:07:12 +0100
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <1196775529.5145.57.camel@rogue>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
	<1196769706.5145.53.camel@rogue>
	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>
	<1196775529.5145.57.camel@rogue>
Message-ID: <2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>

I've already think about that problem, but if I can just have a ANTLR syntax
definition, I would be very happy (really).
I don't know how the book ANTLR Reference has been written, maybe Latex,
then, there must be somewhere a syntax definition (\summon Terence!)


Thanks Luke for your interest.

G. R.


2007/12/4, Luke A. Guest <laguest at archeia.com>:

> Not that I'm aware of.
>
> Also, you'd need 2 types of syntax colouring anyway, 1 for ANTLR and the
> other for whatever implementation language you're using (Java, C, C++,
> etc.).
>
> Luke.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071204/8184284f/attachment.html 

From laguest at archeia.com  Tue Dec  4 06:14:14 2007
From: laguest at archeia.com (Luke A. Guest)
Date: Tue, 04 Dec 2007 14:14:14 +0000
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
	<1196769706.5145.53.camel@rogue>
	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>
	<1196775529.5145.57.camel@rogue>
	<2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
Message-ID: <1196777654.5145.59.camel@rogue>

On Tue, 2007-12-04 at 15:07 +0100, G R wrote:
> I've already think about that problem, but if I can just have a ANTLR
> syntax definition, I would be very happy (really).
> I don't know how the book ANTLR Reference has been written, maybe
> Latex, then, there must be somewhere a syntax definition (\summon
> Terence!) 

I couldn't find any mention of LaTeX at the start of the book, but it
wouldn't surprise me it if was laid out with LaTeX ;D

Luke.



From andreas.ravnestad at gmail.com  Tue Dec  4 09:25:54 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Tue, 4 Dec 2007 18:25:54 +0100
Subject: [antlr-interest] Getting the exceptions caught in nextToken()
Message-ID: <db3e39e10712040925x3f892dq137ae5835be8bc02@mail.gmail.com>

Currently it seems the nextToken() method in the base lexer class can
not be forced to throw exceptions on to the parser (or anything else)
-- instead the lexer is catching them and printing error messages to
stderr. How can these exceptions be thrown back to the parser so they
can be used?

Thanks,
Andreas

From john at jacelridge.com  Tue Dec  4 09:55:26 2007
From: john at jacelridge.com (John Ridgway)
Date: Tue, 4 Dec 2007 12:55:26 -0500
Subject: [antlr-interest] Strategy for Java AST rewrite
In-Reply-To: <CEEA77FA-C318-4DDE-AB4C-B084DE85D3C2@twistedprotein.com>
References: <CEEA77FA-C318-4DDE-AB4C-B084DE85D3C2@twistedprotein.com>
Message-ID: <5017AAE5-914F-4EA9-B294-839643687A5E@jacelridge.com>

I've been working on an AST generating grammar for Java, which I  
intended to distribute when it was finished.  It's not yet finished,  
but I would certainly appreciate help and/or would be glad to help you.

What you point out is definitely an error in the grammar.

I'm attaching what I've got so far (which includes the error) so you  
can take a look at what I've done and criticize it (or trash it).

Peace
- John
Visiting Assistant Professor
Trinity College
Hartford, CT


-------------- next part --------------
A non-text attachment was scrubbed...
Name: JavaAST.g
Type: application/octet-stream
Size: 33914 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071204/94141ad2/attachment-0001.obj 
-------------- next part --------------




On Dec 3, 2007, at 3:24 PM, Brendon McLean wrote:

> Hi,
>
> (Disclaimer: I've checked Google and searched the mailing list but  
> I can't find the answer.)
>
> I'm writing some code that needs to create a simple AST for Java.   
> The AST will be used to identify code fragments that can be  
> modified in a certain way and possibly written back to the file.   
> I've been leaning towards Antlr 3 because, from what I can gather  
> it seems Antlr 3 has made it considerably easier to get token  
> offsets and hence modify the underlying file.  On the other hand,  
> there is a working 2.7 grammar with what seems to be a well thought  
> out AST, which the new grammar is lacking.
>
> I've been working on the new grammar but have run into a few things  
> which make me wonder how much real-world action it's seen.  For  
> example, it can currently match the annotation:
>
> @Broken("Default Parameter", "Illegal Parameter").
>
> The 2.7 grammar won't let this pass.  To add to my dilemma, it is  
> obviously possible to make do with Antlr 2.7 as I've seen some  
> syntax highlighting projects based on it.  What I am wondering  
> boils down to three questions:
>
> 1.  Is anyone else working on the Java grammar at the moment that  
> would mind collaborating?
> 2.  Are the reasons for using ANTLR 3 compelling enough for me in  
> my case?
> 3.  Are people using the new Java grammar for anything serious.
>
> Regards,
> Brendon McLean.


From khp at cypress.com  Tue Dec  4 10:01:50 2007
From: khp at cypress.com (Kalen Petersen)
Date: Tue, 04 Dec 2007 10:01:50 -0800
Subject: [antlr-interest] ANTLRv3 emits literal DOWN instead of
	Token.Down
In-Reply-To: <20071204074612.84D8FADEEC@ns5.cypress.com>
References: <4754B31B.5090403@cypress.com>
	<20071204074612.84D8FADEEC@ns5.cypress.com>
Message-ID: <4755960E.4010507@cypress.com>

Gavin Lambert wrote:
> At 14:53 4/12/2007, Kalen Petersen wrote:
> [...]
> >grammar DownBug;
> >   
> >bug_rule
> >    :   ^('+' bug_rule)
> >    |   '+' bug_rule
> >    |   ZERO
> >    ;
>
> Hmm.  I'm surprised that even compiles.  That doesn't seem like a 
> valid construct to me -- you're using ^ like an AST node (which 
> shouldn't work outside a rewrite rule or tree parser).
This came originally from a rewrite grammar working on an AST, it's 
true.  In the process of removing gobs of extraneous other code, I also 
removed those options.  Originally, it was actually two rules from an 
expression grammar, one for postfix '++' and the other for prefix '++'.
Hopefully that justifies this as a little less crazy or just invalid code.


From jaluber at gmx.de  Tue Dec  4 10:32:07 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 04 Dec 2007 19:32:07 +0100
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <1196777654.5145.59.camel@rogue>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>	<1196769706.5145.53.camel@rogue>	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>	<1196775529.5145.57.camel@rogue>	<2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
	<1196777654.5145.59.camel@rogue>
Message-ID: <47559D27.8020409@gmx.de>

Luke A. Guest wrote:
> On Tue, 2007-12-04 at 15:07 +0100, G R wrote:
>> I've already think about that problem, but if I can just have a ANTLR
>> syntax definition, I would be very happy (really).
>> I don't know how the book ANTLR Reference has been written, maybe
>> Latex, then, there must be somewhere a syntax definition (\summon
>> Terence!) 
> 
> I couldn't find any mention of LaTeX at the start of the book, but it
> wouldn't surprise me it if was laid out with LaTeX ;D

I happen to know that TDAR is written in some proprietary system.

Johannes

From laguest at archeia.com  Tue Dec  4 10:41:26 2007
From: laguest at archeia.com (Luke A. Guest)
Date: Tue, 04 Dec 2007 18:41:26 +0000
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <47559D27.8020409@gmx.de>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
	<1196769706.5145.53.camel@rogue>
	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>
	<1196775529.5145.57.camel@rogue>
	<2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
	<1196777654.5145.59.camel@rogue>  <47559D27.8020409@gmx.de>
Message-ID: <1196793686.5145.67.camel@rogue>

On Tue, 2007-12-04 at 19:32 +0100, Johannes Luber wrote:
> Luke A. Guest wrote:
> > On Tue, 2007-12-04 at 15:07 +0100, G R wrote:
> >> I've already think about that problem, but if I can just have a ANTLR
> >> syntax definition, I would be very happy (really).
> >> I don't know how the book ANTLR Reference has been written, maybe
> >> Latex, then, there must be somewhere a syntax definition (\summon
> >> Terence!) 
> > 
> > I couldn't find any mention of LaTeX at the start of the book, but it
> > wouldn't surprise me it if was laid out with LaTeX ;D
> 
> I happen to know that TDAR is written in some proprietary system.

What's TDAR?

Luke.



From jaluber at gmx.de  Tue Dec  4 10:52:37 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 04 Dec 2007 19:52:37 +0100
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <1196793686.5145.67.camel@rogue>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>	
	<1196769706.5145.53.camel@rogue>	
	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>	
	<1196775529.5145.57.camel@rogue>	
	<2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>	
	<1196777654.5145.59.camel@rogue> <47559D27.8020409@gmx.de>
	<1196793686.5145.67.camel@rogue>
Message-ID: <4755A1F5.4030105@gmx.de>

Luke A. Guest wrote:
> What's TDAR?

The Definitive ANTLR Reference.

Johannes

From guntiso at latnet.lv  Tue Dec  4 12:03:09 2007
From: guntiso at latnet.lv (Guntis Ozols)
Date: Tue,  4 Dec 2007 22:03:09 +0200
Subject: [antlr-interest] Getting the exceptions caught in nextToken()
In-Reply-To: <db3e39e10712040925x3f892dq137ae5835be8bc02@mail.gmail.com>
References: <db3e39e10712040925x3f892dq137ae5835be8bc02@mail.gmail.com>
Message-ID: <1196798589.4755b27d6c866@clients.latnet.lv>

Not sure if it fits you, I use something like this:

// Error handling (do not recover).
// This part sucks, I'd prefer to call stopOnError(true) from API
// NOTE: Throwing in lexer also means: disable antlrworks debugger and lexer
syntactic predicates, Oh my dear...
@lexer::members {
public void reportError(RecognitionException e) {
    // API does not allow to throw e from here, throwing RuntimeException
instead
    throw new RuntimeException("Lexing recognition problem", e);
}
}

@members {
protected void mismatch(IntStream input, int ttype, BitSet follow)
        throws RecognitionException {
    throw new MismatchedTokenException(ttype, input);
}
public void recoverFromMismatchedSet(IntStream input, RecognitionException e,
BitSet follow)
        throws RecognitionException {
    throw e;
}
}

@rulecatch {
    catch (RecognitionException e) {
        throw e;
    }
}


> Currently it seems the nextToken() method in the base lexer class can
> not be forced to throw exceptions on to the parser (or anything else)
> -- instead the lexer is catching them and printing error messages to
> stderr. How can these exceptions be thrown back to the parser so they
> can be used?
>
> Thanks,
> Andreas



From parrt at cs.usfca.edu  Tue Dec  4 12:36:28 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Dec 2007 12:36:28 -0800
Subject: [antlr-interest] C grammar example from the site
In-Reply-To: <20071203235513.M35727@www.botspiritcompany.com>
References: <20071203235513.M35727@www.botspiritcompany.com>
Message-ID: <EA932DC2-17E7-43C3-AB3A-82BCC1D59169@cs.usfca.edu>


On Dec 3, 2007, at 3:58 PM, bbrown wrote:

> I was having trouble generating the C grammar from the site.
>
> "ANSI C grammar for ANTLR v3
> Terence Parr Wed Jul 19, 2006 18:18
> Haven't tested a bunch, but it's a good start. :)"
>
> I downloaded the C.g file and did the following.
>
> LIB1=${LIB}antlr-3.0.1.jar
> LIB2=${LIB}antlr-runtime-3.0.1.jar
> LIB3=${LIB}stringtemplate-3.1b1.jar
> LIBb=${LIB}antlr-2.7.7.jar
>
> java -classpath $CP1 org.antlr.Tool c.g
>
> At this point, things look ok:
>
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)
> error(8):  file c.g contains grammar CParser; names must
> warning(200): c.g:455:38: Decision can match input such a
> le alternatives: 1, 2
>
>
> But I don't get a Parser File?  is it supposed to generate a parser  
> so that I
> can process the tokens?

you have changed the file name or the grammar name inside.  Note the  
error message.

Ter

From antlr at twistedprotein.com  Tue Dec  4 13:31:26 2007
From: antlr at twistedprotein.com (Brendon McLean)
Date: Tue, 4 Dec 2007 23:31:26 +0200
Subject: [antlr-interest] Strategy for Java AST rewrite
In-Reply-To: <5017AAE5-914F-4EA9-B294-839643687A5E@jacelridge.com>
References: <CEEA77FA-C318-4DDE-AB4C-B084DE85D3C2@twistedprotein.com>
	<5017AAE5-914F-4EA9-B294-839643687A5E@jacelridge.com>
Message-ID: <B3AB1C0D-7104-436B-A3CD-A3888B94AED2@twistedprotein.com>

Thanks John.  You've gotten further than I have and you've gotten  
around some issues that I've run into (I had to use scoped variables  
for some hoisted predicates).  I'll try and integrate anything useful  
from my work if I find anything.  At the very least, perhaps I can  
fix an error or two that you've picked up from the original grammar.

Thanks again for sharing your work.

Regards,
Brendon.

On 4 Dec 2007, at 19:55, John Ridgway wrote:

> I've been working on an AST generating grammar for Java, which I  
> intended to distribute when it was finished.  It's not yet  
> finished, but I would certainly appreciate help and/or would be  
> glad to help you.
>
> What you point out is definitely an error in the grammar.
>
> I'm attaching what I've got so far (which includes the error) so  
> you can take a look at what I've done and criticize it (or trash it).
>
> Peace
> - John
> Visiting Assistant Professor
> Trinity College
> Hartford, CT
>
>
> <JavaAST.g>
>
>
>
> On Dec 3, 2007, at 3:24 PM, Brendon McLean wrote:
>
>> Hi,
>>
>> (Disclaimer: I've checked Google and searched the mailing list but  
>> I can't find the answer.)
>>
>> I'm writing some code that needs to create a simple AST for Java.   
>> The AST will be used to identify code fragments that can be  
>> modified in a certain way and possibly written back to the file.   
>> I've been leaning towards Antlr 3 because, from what I can gather  
>> it seems Antlr 3 has made it considerably easier to get token  
>> offsets and hence modify the underlying file.  On the other hand,  
>> there is a working 2.7 grammar with what seems to be a well  
>> thought out AST, which the new grammar is lacking.
>>
>> I've been working on the new grammar but have run into a few  
>> things which make me wonder how much real-world action it's seen.   
>> For example, it can currently match the annotation:
>>
>> @Broken("Default Parameter", "Illegal Parameter").
>>
>> The 2.7 grammar won't let this pass.  To add to my dilemma, it is  
>> obviously possible to make do with Antlr 2.7 as I've seen some  
>> syntax highlighting projects based on it.  What I am wondering  
>> boils down to three questions:
>>
>> 1.  Is anyone else working on the Java grammar at the moment that  
>> would mind collaborating?
>> 2.  Are the reasons for using ANTLR 3 compelling enough for me in  
>> my case?
>> 3.  Are people using the new Java grammar for anything serious.
>>
>> Regards,
>> Brendon McLean.
>


From ohumbel at gmail.com  Tue Dec  4 13:36:31 2007
From: ohumbel at gmail.com (Oti)
Date: Tue, 4 Dec 2007 22:36:31 +0100
Subject: [antlr-interest] problem with class CommonTree
In-Reply-To: <OF835DE575.51C79218-ON652573A6.003198AA-652573A6.0032E090@tcs.com>
References: <OF835DE575.51C79218-ON652573A6.003198AA-652573A6.0032E090@tcs.com>
Message-ID: <ba90a0a90712041336v508b1ce8qdf21977f5d346a99@mail.gmail.com>

Ankit,

IMHO it should read toStringTree() (vs. toStringtree()).

Oti.

On Dec 3, 2007 10:12 AM,  <ankit.mehrotra at tcs.com> wrote:
>
> Hi all,
>
> I have started antlr a couple of hours back. I was working through the
> example of AST walk through, where on compiling the files I am getting an
> error,
>
> ASTExprParser.java:82: cannot find symbol
> symbol  : method toStringtree()
> location: class org.antlr.runtime.tree.CommonTree
>
> System.out.println(((CommonTree)stat1.tree).toStringtree());
>
>                                        ^
> 1 error
>
>
> All I have are the jar files for the
> libraries(antlr-3.0.1,antlr-2.7.7,antlr-runtime-3.0.1 and
> stringTemplate-3.0b1).
> How should I go about removing this error.
>
> Thanks
>  Ankit=====-----=====-----=====
> Notice: The information contained in this e-mail
> message and/or attachments to it may contain
> confidential or privileged information. If you are
> not the intended recipient, any dissemination, use,
> review, distribution, printing or copying of the
> information contained in this e-mail message
> and/or attachments to it are strictly prohibited. If
> you have received this communication in error,
> please notify us by reply e-mail or telephone and
> immediately and permanently delete the message
> and any attachments. Thank you
>
>
>
>

From parrt at cs.usfca.edu  Tue Dec  4 16:36:53 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 4 Dec 2007 16:36:53 -0800
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
	<1196769706.5145.53.camel@rogue>
	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>
	<1196775529.5145.57.camel@rogue>
	<2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
Message-ID: <68522DE0-873B-4051-A82B-A5C483BB58B5@cs.usfca.edu>


On Dec 4, 2007, at 6:07 AM, G R wrote:

> I've already think about that problem, but if I can just have a  
> ANTLR syntax definition, I would be very happy (really).
> I don't know how the book ANTLR Reference has been written, maybe  
> Latex, then, there must be somewhere a syntax definition (\summon  
> Terence!)

I used some proprietary stuff for Prag Progs.  Tool used custom  
macros in back-end (proprietary stuff also).

Sorry I can't help more.

Ter

From clifford.heath at gmail.com  Tue Dec  4 18:27:59 2007
From: clifford.heath at gmail.com (Clifford Heath)
Date: Wed, 05 Dec 2007 13:27:59 +1100
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>	<1196769706.5145.53.camel@rogue>	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>	<1196775529.5145.57.camel@rogue>
	<2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
Message-ID: <fj52bf$gis$1@ger.gmane.org>

G R wrote:
> I've already think about that problem, but if I can just have a ANTLR 
> syntax definition, I would be very happy (really).

There's an Antlr 2 grammar for Antlr 3, because that's how it's built.
Perhaps if you open that up in ANTLRWorks, you can save the railroad
diagram images and use those in your essay instead?

Clifford Heath.


From antlr at jazillian.com  Tue Dec  4 18:38:14 2007
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 04 Dec 2007 21:38:14 -0500
Subject: [antlr-interest] Simple grammar,
 but #if #endif and are making it harder
In-Reply-To: <6cf1e0bb0712040235x1f395430wb72752b9149b3906@mail.gmail.com>
References: <6cf1e0bb0712040235x1f395430wb72752b9149b3906@mail.gmail.com>
Message-ID: <47560F16.1050509@jazillian.com>

I've extended the C grammar to include preprocessor directives,
and I also have code that evaluates them. The code is proprietary,
but if you're willing to pay money for it, let me know.

Andy

Xavier wrote:
> I have to translate .ADM files, that specify Windows Policy Settings
> http://msdn2.microsoft.com/en-us/library/aa372405.aspx
>
> I'm having a hard time getting started,mostly because I'm new to ANTLR
> and I don't know how to deal with comments and #if #endif sections.
>
> 1. To learn how to deal with #if #endif, is there a simpler starting
> point than the full featured C Preprocessor from Youngki KU
> http://www.antlr.org/grammar/1166665121622/Cpp.tar
>
> 2. What does look like a better approach?
> 2.1. Having a preprocessor step (a grammar to deal with comments and
> #ifdefs) and handling the "meat" in a later step
> 2.2. Using a single grammar definition
>
> Thanks in advance for any advice.
>
> -Xavier
>
>   


From pink at odahoda.de  Tue Dec  4 19:47:32 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Tue, 04 Dec 2007 19:47:32 -0800
Subject: [antlr-interest] Python target: output=template ready for
	testing
In-Reply-To: <fian7f$2of$1@ger.gmane.org>
References: <fian7f$2of$1@ger.gmane.org>
Message-ID: <fj570j$rcu$1@ger.gmane.org>

Update: the stringtemplate3 is now available as beta:
<http://www.stringtemplate.org/download/stringtemplate3-3.1b1.tar.gz>

-Ben

Benjamin Niemann wrote:
> If you are interested in the output=template option of ANTLR, have a 
> look at the repository <http://fisheye2.cenqua.com/browse/antlr> - I 
> just checked in the implementation for it. Using template output creates 
> a dependency on the antlr2 runtime and stringtemplate3, which you have 
> to grab from fisheye as well. Some minimal documentation can be found in 
> the wiki <http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget>.
> Using output=template with rewrite=true is a damn cool thing, if you are 
> tweaking structure text ;)
> 
> BTW: most other V3.1 features should be available in the Python target 
> as well.


From stevagewp at gmail.com  Tue Dec  4 22:42:42 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Wed, 5 Dec 2007 17:42:42 +1100
Subject: [antlr-interest] Internal error
Message-ID: <b8ceeef70712042242o76596e63ue0045cb0aee443c7@mail.gmail.com>

I got this error with ANTLRWorks 1.1.5 (and .4 as well):

[17:38:49] error(10):  internal error:
c:\downloads\antlr\headerline9.g : java.util.NoSuchElementException:
no such attribute: description in template context [orPredicates
notPredicate evalPredicate(...)]
org.antlr.stringtemplate.StringTemplate.checkNullAttributeAgainstFormalArguments(StringTemplate.java:1290)
org.antlr.stringtemplate.StringTemplate.get(StringTemplate.java:814)
org.antlr.stringtemplate.StringTemplate.get(StringTemplate.java:812)
org.antlr.stringtemplate.StringTemplate.getAttribute(StringTemplate.java:696)
org.antlr.stringtemplate.language.ActionEvaluator.attribute(ActionEvaluator.java:355)
org.antlr.stringtemplate.language.ActionEvaluator.expr(ActionEvaluator.java:131)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:79)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:722)
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:659)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:81)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:722)
org.antlr.stringtemplate.language.ASTExpr.writeAttribute(ASTExpr.java:659)
org.antlr.stringtemplate.language.ActionEvaluator.action(ActionEvaluator.java:81)
org.antlr.stringtemplate.language.ASTExpr.write(ASTExpr.java:152)
org.antlr.stringtemplate.StringTemplate.write(StringTemplate.java:714)
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1649)
org.antlr.stringtemplate.StringTemplate.toString(StringTemplate.java:1640)
org.antlr.codegen.ACyclicDFACodeGenerator.walkFixedDFAGeneratingStateMachine(ACyclicDFACodeGenerator.java:137)
org.antlr.codegen.ACyclicDFACodeGenerator.genFixedLookaheadDecision(ACyclicDFACodeGenerator.java:47)
org.antlr.codegen.CodeGenerator.genLookaheadDecision(CodeGenerator.java:613)
org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:974)
org.antlr.codegen.CodeGenTreeWalker.ebnf(CodeGenTreeWalker.java:1804)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1637)
org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:486)
org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:333)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)
org.antlr.Tool.processGrammar(Tool.java:347)
org.antlr.Tool.process(Tool.java:268)
org.antlr.works.generate.CodeGenerate.generate(Unknown Source)
org.antlr.works.debugger.local.DBLocal.generateGrammar(Unknown Source)
org.antlr.works.debugger.local.DBLocal.generateAndCompileGrammar(Unknown Source)
org.antlr.works.debugger.local.DBLocal.run(Unknown Source)
java.lang.Thread.run(Thread.java:619)

The code that seems to have caused it is as follows:
----
literal_equals:
    {!in_header}? => EQUALS
    | {input.LA(2) != EQUALS}? => EQUALS;
----

Am I doing something wrong? It didn't produce this error without the
third line of the above.

This apparently equivalent rule doesn't produce the error, I have just
discovered:

literal_equals:
    {!in_header || input.LA(2) != EQUALS}? => EQUALS
;


Thanks,
Steve

From bshkara at gmail.com  Wed Dec  5 01:03:02 2007
From: bshkara at gmail.com (Basil Shkara)
Date: Wed, 5 Dec 2007 20:03:02 +1100
Subject: [antlr-interest] ObjC target and predefined rule attribute $text
Message-ID: <C7D2DC22-BE2A-49FD-ACB7-333B52A6CA45@gmail.com>

Hi,

When using the rule attribute: $text, the ObjC generated fails to  
declare the range required.

E.g.

rule	:	WORD {NSLog(@"\%@", $rule.text);};

results in the following ObjC:

NSLog(@"%@", [input substringWithRange:NSMakeRange(_start, [input  
index]-_start)]);

The problem is that '_start' is undeclared.

Any help appreciated.

I am using Kay's 3.1 early access source.

Thanks!

From relationalalgebra at gmail.com  Wed Dec  5 01:16:11 2007
From: relationalalgebra at gmail.com (G R)
Date: Wed, 5 Dec 2007 10:16:11 +0100
Subject: [antlr-interest] ANTLR embedded code within Latex
In-Reply-To: <fj52bf$gis$1@ger.gmane.org>
References: <2ea6ad20712040327m122d17f9g37d074982451ed9a@mail.gmail.com>
	<1196769706.5145.53.camel@rogue>
	<2ea6ad20712040413l36f3655cyc12e0883eab4519d@mail.gmail.com>
	<1196775529.5145.57.camel@rogue>
	<2ea6ad20712040607i32216e14x2e4f7a7ff0c4d3db@mail.gmail.com>
	<fj52bf$gis$1@ger.gmane.org>
Message-ID: <2ea6ad20712050116y7383a46ci5e6e9b96d8fedce8@mail.gmail.com>

Thanks Terence anyway.

I'll just define the ANTLR syntax "on the fly", otherwise, this will ask too
much of my precious time.
Thanks for your help indeed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071205/34dfb95e/attachment.html 

From JALuber at gmx.de  Wed Dec  5 03:10:06 2007
From: JALuber at gmx.de (Johannes Luber)
Date: Wed, 05 Dec 2007 12:10:06 +0100
Subject: [antlr-interest] Internal error
In-Reply-To: <b8ceeef70712042242o76596e63ue0045cb0aee443c7@mail.gmail.com>
References: <b8ceeef70712042242o76596e63ue0045cb0aee443c7@mail.gmail.com>
Message-ID: <20071205111006.243540@gmx.net>


-------- Original-Nachricht --------
> Datum: Wed, 5 Dec 2007 17:42:42 +1100
> Von: "Steve Bennett" <stevagewp at gmail.com>
> An: "antlr-interest Interest" <antlr-interest at antlr.org>
> Betreff: [antlr-interest] Internal error

> I got this error with ANTLRWorks 1.1.5 (and .4 as well):
> 
...
> 
> The code that seems to have caused it is as follows:
> ----
> literal_equals:
>     {!in_header}? => EQUALS
>     | {input.LA(2) != EQUALS}? => EQUALS;
> ----
> 
> Am I doing something wrong? It didn't produce this error without the
> third line of the above.
> 
> This apparently equivalent rule doesn't produce the error, I have just
> discovered:
> 
> literal_equals:
>     {!in_header || input.LA(2) != EQUALS}? => EQUALS
> ;
> 

Remove those spaces between "}?" and "=>" - maybe that's causing the parsing error.

Johannes
-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From antlr at twistedprotein.com  Wed Dec  5 03:45:34 2007
From: antlr at twistedprotein.com (Brendon McLean)
Date: Wed, 5 Dec 2007 13:45:34 +0200
Subject: [antlr-interest] Intentional?: Can't label (tokens*)
Message-ID: <62E97D2D-4E0C-4494-8FD7-10171858CFAC@twistedprotein.com>

I was wondering whether the labelling of parenthesised tokens should  
be allowed?

Currently, you can construct a grammar like this:

postincdec	:	varref op=('++' | '--')	-> (^POSTFIX_EXPR $op)

The grammar will compile to Java, but the program is invalid as the  
token ref 'op' is never assigned a value.  In this particular case,  
labelling this token expression makes sense (to a human), but I can  
see why labelling parenthesised token expressions will not always  
make sense (more than one token for example).

It would be nice if this could fail fast or if the grammar could be  
tweaked to make labelling parenthesised token expression illegal.

Regards,
Brendon.

From stevagewp at gmail.com  Wed Dec  5 04:09:37 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Wed, 5 Dec 2007 23:09:37 +1100
Subject: [antlr-interest] Intentional?: Can't label (tokens*)
In-Reply-To: <62E97D2D-4E0C-4494-8FD7-10171858CFAC@twistedprotein.com>
References: <62E97D2D-4E0C-4494-8FD7-10171858CFAC@twistedprotein.com>
Message-ID: <b8ceeef70712050409g59402744h32b2dc37d50399ab@mail.gmail.com>

On 12/5/07, Brendon McLean <antlr at twistedprotein.com> wrote:
> I was wondering whether the labelling of parenthesised tokens should
> be allowed?
>
> Currently, you can construct a grammar like this:
>
> postincdec      :       varref op=('++' | '--') -> (^POSTFIX_EXPR $op)

Looks like what I did wrong in my previous post. How should one write this?

postincdec      :       varref (op='++' | op='--') -> ^(POSTFIX_EXPR $op)

(I assume you meant ^ before the other parentheses).

Incidentally, I find it odd that it's illegal to parenthesise the AST structure:

... -> (foo);

seems to be illegal.  It's not particularly useful, but you expect it
to be ignored.

Steve

From JALuber at gmx.de  Wed Dec  5 04:45:56 2007
From: JALuber at gmx.de (Johannes Luber)
Date: Wed, 05 Dec 2007 13:45:56 +0100
Subject: [antlr-interest] Intentional?: Can't label (tokens*)
In-Reply-To: <b8ceeef70712050409g59402744h32b2dc37d50399ab@mail.gmail.com>
References: <62E97D2D-4E0C-4494-8FD7-10171858CFAC@twistedprotein.com>
	<b8ceeef70712050409g59402744h32b2dc37d50399ab@mail.gmail.com>
Message-ID: <20071205124556.309760@gmx.net>


-------- Original-Nachricht --------
> Datum: Wed, 5 Dec 2007 23:09:37 +1100
> Von: "Steve Bennett" <stevagewp at gmail.com>
> An: "Brendon McLean" <antlr at twistedprotein.com>
> CC: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] Intentional?: Can\'t label (tokens*)

> On 12/5/07, Brendon McLean <antlr at twistedprotein.com> wrote:
> > I was wondering whether the labelling of parenthesised tokens should
> > be allowed?
> >
> > Currently, you can construct a grammar like this:
> >
> > postincdec      :       varref op=('++' | '--') -> (^POSTFIX_EXPR $op)
> 
> Looks like what I did wrong in my previous post. How should one write
> this?
> 
> postincdec      :       varref (op='++' | op='--') -> ^(POSTFIX_EXPR $op)
> 
> (I assume you meant ^ before the other parentheses).

postincdec      :       varref op=('++' | '--') -> ^(POSTFIX_EXPR $op)

is correct, but an ANTLR bug prevents this usage. Just create an op-subrule as workaround.

> 
> Incidentally, I find it odd that it's illegal to parenthesise the AST
> structure:
> 
> ... -> (foo);
> 
> seems to be illegal.  It's not particularly useful, but you expect it
> to be ignored.

It complains because usually people forget the '^' in front of the parentheses.

Johannes
-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From antlr at twistedprotein.com  Wed Dec  5 04:53:36 2007
From: antlr at twistedprotein.com (Brendon McLean)
Date: Wed, 5 Dec 2007 14:53:36 +0200
Subject: [antlr-interest] Intentional?: Can't label (tokens*)
In-Reply-To: <20071205124556.309760@gmx.net>
References: <62E97D2D-4E0C-4494-8FD7-10171858CFAC@twistedprotein.com>
	<b8ceeef70712050409g59402744h32b2dc37d50399ab@mail.gmail.com>
	<20071205124556.309760@gmx.net>
Message-ID: <78F671D9-599B-4356-BAA9-0D9B5B6522E2@twistedprotein.com>

>> postincdec      :       varref (op='++' | op='--') -> ^ 
>> (POSTFIX_EXPR $op)

That's what I've done.

>> (I assume you meant ^ before the other parentheses).

Whoops.  I did mean that.

> postincdec      :       varref op=('++' | '--') -> ^(POSTFIX_EXPR $op)
>
> is correct, but an ANTLR bug prevents this usage. Just create an op- 
> subrule as workaround.

That's good to know.

Thanks,
Brendon.

From ralf_c at web.de  Wed Dec  5 08:11:41 2007
From: ralf_c at web.de (Ralf Cremerius)
Date: Wed, 05 Dec 2007 17:11:41 +0100
Subject: [antlr-interest] =?iso-8859-15?q?How_to_parse_a_file_of_some_=22l?=
 =?iso-8859-15?q?anguage_1=22_with_embedded_strings_of_another_=22language?=
 =?iso-8859-15?q?_2=22=3F?=
Message-ID: <1997941383@web.de>

Hello,

I'm rather new to ANTLR and trying my best to fight with v3.  :-)

Though I consulted the official book and looked it up in the documentation, I can't figure out so far, if some feature I need can be realized with ANTLR v3:
Is it possible to tell ANTLR, that the content of some rule or token in my grammar has to be handled by another grammar file?
What I like to accomplish is that I parse some input file according to grammar 1 and defer handling of certain delimited strings inside the input to grammar 2. If I mixed up both grammars, I guess there would be a lot of difficult lexing issues - and of course the grammar file would be rather large.

The only topic roughly connected to my needs seems to be "grammar inheritance" - but as far as I understand it, it's still on the ToDo-list of ANTLR v3.1 and (even if available) wouldn't allow me to have two different lexers for my two distinct grammars.
Any comments, ideas, ... or better solutions than my "naive approach" would of course be highly appreciated.

Thanks in advance,
  Ralf Cremerius

PS:  Thanks for providing this great tool, that ANTLR is. I'll never wish myself being back in university, when we had to struggle with LEX & Co. ... :-)
_______________________________________________________________________
Jetzt neu! Sch?tzen Sie Ihren PC mit McAfee und WEB.DE. 3 Monate
kostenlos testen. http://www.pc-sicherheit.web.de/startseite/?mc=022220


From harald_m_mueller at gmx.de  Wed Dec  5 08:33:07 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Wed, 05 Dec 2007 17:33:07 +0100
Subject: [antlr-interest] How to parse a file of some "language 1" with
 embedded strings of another "language 2"?
In-Reply-To: <1997941383@web.de>
References: <1997941383@web.de>
Message-ID: <20071205163307.104830@gmx.net>

Hi - 
from your email, I pick the following ...

> ... defer handling of certain delimited strings inside the input to ...

uppercase the DELIMITED STRINGS - i.e., I assume you want to e.g. parse the text in comments; or format strings; by a different "local grammar" - and forward you to my posting about nested parsers a few days ago. Maybe that helps you! - or you can at least explain why you have a different problem ...

Regards
Harald M.


-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

From john at jacelridge.com  Wed Dec  5 08:51:47 2007
From: john at jacelridge.com (John Ridgway)
Date: Wed, 5 Dec 2007 11:51:47 -0500
Subject: [antlr-interest] Default templates with output=template
Message-ID: <E6B77B18-D5CD-4571-B656-3BA12B74E009@jacelridge.com>

Friends -
I am attempting to use templates with a grammar and discovering some  
(to me) surprising behavior.  When I do:

w : x -> xyz2(x=x);
x : y;
y : z -> xyz(z=z);

I would anticipate that the template created by using xyz would be  
passed up through the intermediate rule to the rule for w; but this  
does not happen.  Instead x has a null template.  Is there a good  
reason for this, or could (should) ANTLR be changed so that, in a  
case where no template is specified, the obvious default is used.

I don't believe that I can even do:

x : y -> y;

Am I missing something?

Peace
- John


From kroepke at classdump.org  Wed Dec  5 09:31:58 2007
From: kroepke at classdump.org (=?ISO-8859-1?Q?Kay_R=F6pke?=)
Date: Wed, 5 Dec 2007 18:31:58 +0100
Subject: [antlr-interest] ObjC target and predefined rule attribute $text
In-Reply-To: <C7D2DC22-BE2A-49FD-ACB7-333B52A6CA45@gmail.com>
References: <C7D2DC22-BE2A-49FD-ACB7-333B52A6CA45@gmail.com>
Message-ID: <14C6CA11-761C-4FD2-8827-B3E14C434FCE@classdump.org>

Hi!

On Dec 5, 2007, at 10:03 AM, Basil Shkara wrote:

>
> The problem is that '_start' is undeclared.
>
> Any help appreciated.
>
> I am using Kay's 3.1 early access source.


Thanks for reporting!

Yes, that's one of the issue I've been working on until I got  
distracted by my job.
Don't despair, three more days and I'll have my last day here. Should  
get around to
finish 3.1 then.

cheers,
-k
-- 
Kay R?pke
http://classdump.org/







From Bern.McCarty at bentley.com  Wed Dec  5 10:21:03 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Wed, 5 Dec 2007 13:21:03 -0500
Subject: [antlr-interest] Newbie can't get off the ground and get through
	tutorial successfully
Message-ID: <EE8C2D034A022444B87B1332B39781050EAEB0A5@extonpo1.bentley.com>


I'm brand new to antlr and to try to get off of the ground I'm trying to
go through the AntlrWorks tutorial at
http://www.antlr.org/works/help/tutorial/calculator.html. When I get to
the part where I try to Debug I always get a modal Error dialog stating:
"Cannot launch the remote parser because port 49153 is already in use".
But I'm just doing this tutorial straight-up.  What made AntlrWorks even
decide to do remote debugging in the first place? I thought it did Java
stuff (as this tutorial is) in-process? I am not selecting "Debug
Remote..." from the Debugger menu, rather I am selecting "Debug...".

I am quite stuck since I cannot get through beginner lesson #1 here.  I
appreciate any help that could get me unstuck. For what it is worth, I
am running Windows Vista x64.  Up until that point in the tutorial,
things are working fine.

For what it is worth:

netstat -an | findstr 49153

  TCP    0.0.0.0:49153          0.0.0.0:0              LISTENING
  TCP    [::]:49153             [::]:0                 LISTENING


-Bern
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071205/72302d1e/attachment-0001.html 

From parrt at cs.usfca.edu  Wed Dec  5 10:37:36 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 5 Dec 2007 10:37:36 -0800
Subject: [antlr-interest] Default templates with output=template
In-Reply-To: <E6B77B18-D5CD-4571-B656-3BA12B74E009@jacelridge.com>
References: <E6B77B18-D5CD-4571-B656-3BA12B74E009@jacelridge.com>
Message-ID: <A115B5E8-2221-46F4-A562-1B8B23E3260C@cs.usfca.edu>


On Dec 5, 2007, at 8:51 AM, John Ridgway wrote:

> Friends -
> I am attempting to use templates with a grammar and discovering  
> some (to me) surprising behavior.  When I do:
>
> w : x -> xyz2(x=x);
> x : y;
> y : z -> xyz(z=z);
>
> I would anticipate that the template created by using xyz would be  
> passed up through the intermediate rule to the rule for w; but this  
> does not happen.  Instead x has a null template.

Correct...er...correct per my intentions but not what we want in this  
case.

>   Is there a good reason for this, or could (should) ANTLR be  
> changed so that, in a case where no template is specified, the  
> obvious default is used.

Well, I did not know what the right answer was for templates for as I  
do know the answer for trees.  I thought we would simply tried out  
for a while and see what the right answer is.

> I don't believe that I can even do:
>
> x : y -> y;
>
> Am I missing something?

Yeah, you need a template there:

x : y -> {$y.st} ;

Awkward for this case, but oddly I have not needed this very often.   
In general, one does not know what the output or rule should be even  
given the output of the invoke rules.  With trees, this is obvious  
and you can just put them together.   With templates however you do  
not know what to generate (well, I suppose for a case where there is  
an alternative with a single rule reference it may be obvious but I  
decided to go for consistency).

What should be template be for this rule?

decl : 'int' ID (',' ID)* ;

  For consistency, I decided not to specify an automatic template.

Ter



From antlr at mirality.co.nz  Wed Dec  5 11:06:15 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 06 Dec 2007 08:06:15 +1300
Subject: [antlr-interest] Newbie can't get off the ground and get
 through tutorial successfully
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EAEB0A5@extonpo1.bentley. com>
References: <EE8C2D034A022444B87B1332B39781050EAEB0A5@extonpo1.bentley.com>
Message-ID: <20071205190631.C3ABF11EB38@www.antlr.org>

At 07:21 6/12/2007, Bern.McCarty at bentley.com wrote:

>I?m brand new to antlr and to try to get off of 
>the ground I?m trying to go through the 
>AntlrWorks tutorial at 
><http://www.antlr.org/works/help/tutorial/calculator.html>http://www.antlr.org/works/help/tutorial/calculator.html. 
>When I get to the part where I try to Debug I 
>always get a modal Error dialog stating: ?Cannot 
>launch the remote parser because port 49153 is 
>already in use?. But I?m just doing this 
>tutorial straight-up.  What made AntlrWorks even 
>decide to do remote debugging in the first 
>place? I thought it did Java stuff (as this 
>tutorial is) in-process? I am not selecting 
>?Debug Remote
? from the Debugger menu, rather I 
>am selecting ?Debug
?.

I'm not sure, but there's a decent chance that 
the plain Debug still uses the same debug port as 
the "real" parser.  Most likely it's sharing 
classes for simplicity.

>For what it is worth:
>
>netstat -an | findstr 49153
>
>   TCP    0.0.0.0:49153          0.0.0.0:0              LISTENING
>
>   TCP    [::]:49153             [::]:0                 LISTENING

Try using -bv as well -- that will tell you which 
process is listening on that port.  Most likely 
you've got a dangling copy of the parser lurking around somewhere. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071206/dc10b5ad/attachment.html 

From Bern.McCarty at bentley.com  Wed Dec  5 11:49:35 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Wed, 5 Dec 2007 14:49:35 -0500
Subject: [antlr-interest] Newbie can't get off the ground and get
	through tutorial successfully
In-Reply-To: <200712051906.lB5J6Vh0028661@mx3.bentley.com>
References: <EE8C2D034A022444B87B1332B39781050EAEB0A5@extonpo1.bentley.com>
	<200712051906.lB5J6Vh0028661@mx3.bentley.com>
Message-ID: <EE8C2D034A022444B87B1332B39781050EAEB30E@extonpo1.bentley.com>

Using netstat -bv -an seems to show that the "EventLog" service is using
port 49153.

 

Active Connections

 

  Proto  Local Address          Foreign Address        State [System]

.

.

.

  TCP    0.0.0.0:49153          0.0.0.0:0              LISTENING

  Eventlog

[System]

.

.

.

  TCP    [::]:49153             [::]:0                 LISTENING

  Eventlog

[System]

 

I've tried to disable the windows event log service to see if it would
make a difference, but it seems Vista doesn't want to let me do that.  I
can stop some other services, but the EventLog is depended upon by the
Task Scheduling service and it seems Vista won't let you turn that one
off or something.

 

So, if Gavin's guess is right that even "local" debugging is using the
network stack, how do I at least configure it to use an available port
(rather than an unavailable port)?  The only opportunity to specify a
port is when selecting "Debug Remote..." but I am selecting "Debug...".

 

-Bern

 

 

From: Gavin Lambert [mailto:antlr at mirality.co.nz] 
Sent: Wednesday, December 05, 2007 2:06 PM
To: Bern McCarty; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Newbie can't get off the ground and get
through tutorial successfully

 

At 07:21 6/12/2007, Bern.McCarty at bentley.com wrote:




I'm brand new to antlr and to try to get off of the ground I'm trying to
go through the AntlrWorks tutorial at
http://www.antlr.org/works/help/tutorial/calculator.html. When I get to
the part where I try to Debug I always get a modal Error dialog stating:
"Cannot launch the remote parser because port 49153 is already in use".
But I'm just doing this tutorial straight-up.  What made AntlrWorks even
decide to do remote debugging in the first place? I thought it did Java
stuff (as this tutorial is) in-process? I am not selecting "Debug
Remote..." from the Debugger menu, rather I am selecting "Debug...".


I'm not sure, but there's a decent chance that the plain Debug still
uses the same debug port as the "real" parser.  Most likely it's sharing
classes for simplicity.




For what it is worth:

netstat -an | findstr 49153

  TCP    0.0.0.0:49153          0.0.0.0:0              LISTENING

  TCP    [::]:49153             [::]:0                 LISTENING


Try using -bv as well -- that will tell you which process is listening
on that port.  Most likely you've got a dangling copy of the parser
lurking around somewhere.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071205/602296b6/attachment.html 

From Austin_Hastings at Yahoo.com  Wed Dec  5 12:20:40 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Wed, 05 Dec 2007 15:20:40 -0500
Subject: [antlr-interest] More on "early commitment" problems with Lexer
Message-ID: <47570818.60106@Yahoo.com>

Howdy,


I'm trying to lex quoted strings that allow backslash-escapes, but that 
don't pre-define what the backslash escapes are going to be.

This is in contrast with the existing grammar examples, all of which 
have code like:

fragment
EscapeSequence: Slash ('\'' | 't' | 'n' | 'r' | 'b' | '"' | ...) | 
UnicodeEscape | OctalEscape | HexEscape ;

STRING_LITERAL: '"' (options {greedy=false;}: EscapeSequence | .)* '"' ;

In these examples, the list of all possible escape sequences is defined 
in advance, and it seems to work.

My version looked like this:

Qlit_Single:   Q (options {greedy=false;}: Slash Q | . )* Q ;

Where Q = single quote = '\''.

The problem was the "early commit" decision that Antlr3's lexer makes -- 
it rears its ugly head in the float vs. range issue, as well. In short, 
since Slash ('\\') is singled out, the lexer is generated such that the 
only possible sequence accepted will be Slash-Q. The '.' anychar option 
is ignored, so that \t becomes a lexer error.

I'm sure this is a design feature, and Antlr is working exactly as 
designed, and this really is the way it is supposed to be, blah blah blah.

But if anyone else needs to deal with it, I thought I'd point out the 
workaround:

Match this:

Qlit_Single: Q (options {greedy=false;}: Slash . | .)* Q;

The same premature ejaculation now works in favor of the token - 
matching Slash . means that whatever character follows a slash will be 
gobbled up, and not interfere with the matching. In my case, that means 
that Slash Q gets both the slash and the single quote into the string, 
and Slash anything-else goes in as well. Postprocessing is fairly easy.

=Austin





From r.mark.volkmann at gmail.com  Wed Dec  5 12:46:29 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 5 Dec 2007 14:46:29 -0600
Subject: [antlr-interest] unexpected token @
Message-ID: <f0fcc6820712051246s24d11199uee3c4eaaa81b4fdb@mail.gmail.com>

The tree grammar rule below causes the error "syntax error: antlr:
MathTree.g:42:1: unexpected token: @", but I don't understand why.
Polynomial is a Java class in the same package of the classes
generated from the grammar.
Do you see anything syntactically wrong with this?

polynomial returns [Polynomial result]
@scope {
  Polynomial currentPolynomial;
}
  :	^(POLYNOMIAL term*) {
    $result = currentPolynomial = new Polynomial();
  }
  ;

-- 
R. Mark Volkmann
Object Computing, Inc.

From dave at badgers-in-foil.co.uk  Wed Dec  5 12:55:50 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 5 Dec 2007 20:55:50 +0000
Subject: [antlr-interest] unexpected token @
In-Reply-To: <f0fcc6820712051246s24d11199uee3c4eaaa81b4fdb@mail.gmail.com>
References: <f0fcc6820712051246s24d11199uee3c4eaaa81b4fdb@mail.gmail.com>
Message-ID: <20071205205549.GB28961@badgers-in-foil.co.uk>

On Wed, Dec 05, 2007 at 02:46:29PM -0600, Mark Volkmann wrote:
> The tree grammar rule below causes the error "syntax error: antlr:
> MathTree.g:42:1: unexpected token: @", but I don't understand why.
> Polynomial is a Java class in the same package of the classes
> generated from the grammar.
> Do you see anything syntactically wrong with this?
> 
> polynomial returns [Polynomial result]
> @scope {
>   Polynomial currentPolynomial;
> }
>   :	^(POLYNOMIAL term*) {
>     $result = currentPolynomial = new Polynomial();
>   }
>   ;

scope doesn't take an '@' prefix, as far as I remember.

Maybe you want something like,

  polynomial returns [Polynomial result]
    :   ^(POLYNOMIAL term*) {
      $result = MyScope::currentPolynomial = new Polynomial();
    }
    ;

with

  scope {
    Polynomial currentPolynomial;
  }

defined at the top of your grammar?


you need to add a,

myrule
  scope MyScope;
  : ...
  ;

to a rule if you want to push a new 'scope frame' into the 'scope
stack', or something like that.


helps?
dave

-- 
http://david.holroyd.me.uk/

From r.mark.volkmann at gmail.com  Wed Dec  5 13:02:24 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 5 Dec 2007 15:02:24 -0600
Subject: [antlr-interest] unexpected token @
In-Reply-To: <20071205205549.GB28961@badgers-in-foil.co.uk>
References: <f0fcc6820712051246s24d11199uee3c4eaaa81b4fdb@mail.gmail.com>
	<20071205205549.GB28961@badgers-in-foil.co.uk>
Message-ID: <f0fcc6820712051302kc60acb9h7a096420d9e3a25@mail.gmail.com>

On Dec 5, 2007 2:55 PM, David Holroyd <dave at badgers-in-foil.co.uk> wrote:
>
> On Wed, Dec 05, 2007 at 02:46:29PM -0600, Mark Volkmann wrote:
> > The tree grammar rule below causes the error "syntax error: antlr:
> > MathTree.g:42:1: unexpected token: @", but I don't understand why.
> > Polynomial is a Java class in the same package of the classes
> > generated from the grammar.
> > Do you see anything syntactically wrong with this?
> >
> > polynomial returns [Polynomial result]
> > @scope {
> >   Polynomial currentPolynomial;
> > }
> >   :   ^(POLYNOMIAL term*) {
> >     $result = currentPolynomial = new Polynomial();
> >   }
> >   ;
>
> scope doesn't take an '@' prefix, as far as I remember.
>
> Maybe you want something like,
>
>   polynomial returns [Polynomial result]
>     :   ^(POLYNOMIAL term*) {
>       $result = MyScope::currentPolynomial = new Polynomial();
>     }
>     ;
>
> with
>
>   scope {
>     Polynomial currentPolynomial;
>   }
>
> defined at the top of your grammar?
>
>
> you need to add a,
>
> myrule
>   scope MyScope;
>   : ...
>   ;
>
> to a rule if you want to push a new 'scope frame' into the 'scope
> stack', or something like that.

I can do that to use a global scope, but I want a scope that is
limited to the rule that defines it and any rules invoked by it. It
turns out there is a typo on page 87 in the ANTLR book in the section
on "Dynamic Rule Attribute Scopes". It shows using "@scope", but it
should be just "scope".

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Wed Dec  5 13:45:53 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 5 Dec 2007 15:45:53 -0600
Subject: [antlr-interest] bug in tree parser code gen related to rule scopes?
Message-ID: <f0fcc6820712051345o1a84b645g833920d7917b6556@mail.gmail.com>

I have the following in my tree grammar MathTree.g.

polynomial returns [Polynomial result]
scope {
  Polynomial current;
}
  :	^(POLYNOMIAL term*) {
    $result = $polynomial.current = new Polynomial();
  }
  ;

term
  :	^(TERM coefficient=NUMBER) {
    $polynomial.current.addTerm(new Term(toDouble(coefficient)));
  }
  |	^(TERM coefficient=NUMBER variable=NAME) {
    $polynomial.current.addTerm(new Term(toDouble(coefficient),
$variable.text));
  }
  |	^(TERM variable=NAME exponent=NUMBER) {
    $polynomial.current.addTerm(new Term($variable.text, toDouble(exponent)));
  }
  |	^(TERM coefficient=NUMBER variable=NAME exponent=NUMBER) {
    $polynomial.current.addTerm(
      new Term(toDouble(coefficient), $variable.text, toDouble(exponent)));
  }
  ;

The generated MathTree.java class contains the following.

    protected static class polynomial_scope {
        Polynomial current;
    }
    protected Stack polynomial_stack = new Stack();

and then later this code

    retval.result = polynomial_stack.current = new Polynomial();

Clearly this is wrong because current is not a field of
java.util.Stack, it is a field of the class polynomial_scope.
Did I stumble across a bug or did I do something wrong in my tree grammar?

-- 
R. Mark Volkmann
Object Computing, Inc.

From yotommy at gmail.com  Wed Dec  5 13:50:55 2007
From: yotommy at gmail.com (Tom Smith)
Date: Wed, 5 Dec 2007 16:50:55 -0500
Subject: [antlr-interest] bug in tree parser code gen related to rule
	scopes?
In-Reply-To: <f0fcc6820712051345o1a84b645g833920d7917b6556@mail.gmail.com>
References: <f0fcc6820712051345o1a84b645g833920d7917b6556@mail.gmail.com>
Message-ID: <82dc0d190712051350q293c08beu66f8e8956147d4fe@mail.gmail.com>

On Dec 5, 2007 4:45 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> I have the following in my tree grammar MathTree.g.
>
> polynomial returns [Polynomial result]
> scope {
>   Polynomial current;
> }
>   :     ^(POLYNOMIAL term*) {
>     $result = $polynomial.current = new Polynomial();
>   }
>   ;

I *think* you should express this as $polynomial::current.

From parrt at cs.usfca.edu  Wed Dec  5 13:51:20 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 5 Dec 2007 13:51:20 -0800
Subject: [antlr-interest] unexpected token @
In-Reply-To: <f0fcc6820712051302kc60acb9h7a096420d9e3a25@mail.gmail.com>
References: <f0fcc6820712051246s24d11199uee3c4eaaa81b4fdb@mail.gmail.com>
	<20071205205549.GB28961@badgers-in-foil.co.uk>
	<f0fcc6820712051302kc60acb9h7a096420d9e3a25@mail.gmail.com>
Message-ID: <62CB5BDD-18CC-4260-BA52-39D85B4F4DB4@cs.usfca.edu>

Sorry. this has fixed in a later edition (2) of book.

scope {...}

Ter

On Dec 5, 2007, at 1:02 PM, Mark Volkmann wrote:

> On Dec 5, 2007 2:55 PM, David Holroyd <dave at badgers-in-foil.co.uk>  
> wrote:
>>
>> On Wed, Dec 05, 2007 at 02:46:29PM -0600, Mark Volkmann wrote:
>>> The tree grammar rule below causes the error "syntax error: antlr:
>>> MathTree.g:42:1: unexpected token: @", but I don't understand why.
>>> Polynomial is a Java class in the same package of the classes
>>> generated from the grammar.
>>> Do you see anything syntactically wrong with this?
>>>
>>> polynomial returns [Polynomial result]
>>> @scope {
>>>   Polynomial currentPolynomial;
>>> }
>>>   :   ^(POLYNOMIAL term*) {
>>>     $result = currentPolynomial = new Polynomial();
>>>   }
>>>   ;
>>
>> scope doesn't take an '@' prefix, as far as I remember.
>>
>> Maybe you want something like,
>>
>>   polynomial returns [Polynomial result]
>>     :   ^(POLYNOMIAL term*) {
>>       $result = MyScope::currentPolynomial = new Polynomial();
>>     }
>>     ;
>>
>> with
>>
>>   scope {
>>     Polynomial currentPolynomial;
>>   }
>>
>> defined at the top of your grammar?
>>
>>
>> you need to add a,
>>
>> myrule
>>   scope MyScope;
>>   : ...
>>   ;
>>
>> to a rule if you want to push a new 'scope frame' into the 'scope
>> stack', or something like that.
>
> I can do that to use a global scope, but I want a scope that is
> limited to the rule that defines it and any rules invoked by it. It
> turns out there is a typo on page 87 in the ANTLR book in the section
> on "Dynamic Rule Attribute Scopes". It shows using "@scope", but it
> should be just "scope".
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From r.mark.volkmann at gmail.com  Wed Dec  5 14:18:12 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 5 Dec 2007 16:18:12 -0600
Subject: [antlr-interest] bug in tree parser code gen related to rule
	scopes?
In-Reply-To: <82dc0d190712051350q293c08beu66f8e8956147d4fe@mail.gmail.com>
References: <f0fcc6820712051345o1a84b645g833920d7917b6556@mail.gmail.com>
	<82dc0d190712051350q293c08beu66f8e8956147d4fe@mail.gmail.com>
Message-ID: <f0fcc6820712051418h31c6e0a4m5c947cecc3707f38@mail.gmail.com>

On Dec 5, 2007 3:50 PM, Tom Smith <yotommy at gmail.com> wrote:
> On Dec 5, 2007 4:45 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> > I have the following in my tree grammar MathTree.g.
> >
> > polynomial returns [Polynomial result]
> > scope {
> >   Polynomial current;
> > }
> >   :     ^(POLYNOMIAL term*) {
> >     $result = $polynomial.current = new Polynomial();
> >   }
> >   ;
>
> I *think* you should express this as $polynomial::current.

Thanks! That fixed it. I also had to move where I was assigning to
current like this.

polynomial returns [Polynomial result]
scope {
  Polynomial current = new Polynomial();
}
  :	^(POLYNOMIAL term*) {
    $result = $polynomial::current;
  }
  ;



-- 
R. Mark Volkmann
Object Computing, Inc.

From dave at badgers-in-foil.co.uk  Wed Dec  5 14:32:21 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 5 Dec 2007 22:32:21 +0000
Subject: [antlr-interest] [ANN] antlr-maven-plugin (for ANTLRv2) version 2.0
	released
Message-ID: <20071205223220.GA30149@badgers-in-foil.co.uk>

Hi there!

Version 2.0 of the antlr-maven-plugin for integrating ANTLRv2 into your
Maven 2 build has just been released at mojo.codehaus.org,

  http://mojo.codehaus.org/antlr-maven-plugin/


NB, this supersedes previous releases of the plugin from,

  http://maven.apache.org/plugins/maven-antlr-plugin/


enjoy!
dave

-- 
http://david.holroyd.me.uk/

From stevagewp at gmail.com  Wed Dec  5 16:12:08 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Thu, 6 Dec 2007 11:12:08 +1100
Subject: [antlr-interest] Newbie can't get off the ground and get
	through tutorial successfully
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EAEB30E@extonpo1.bentley.com>
References: <EE8C2D034A022444B87B1332B39781050EAEB0A5@extonpo1.bentley.com>
	<200712051906.lB5J6Vh0028661@mx3.bentley.com>
	<EE8C2D034A022444B87B1332B39781050EAEB30E@extonpo1.bentley.com>
Message-ID: <b8ceeef70712051612y4e7e63fbn57a133008ad7beed@mail.gmail.com>

On 12/6/07, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com> wrote:
> So, if Gavin's guess is right that even "local" debugging is using the
> network stack, how do I at least configure it to use an available port
> (rather than an unavailable port)?  The only opportunity to specify a port
> is when selecting "Debug Remote?" but I am selecting "Debug?".

File | Preferences | Debugger.

Steve

From Bern.McCarty at bentley.com  Wed Dec  5 16:37:49 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Wed, 5 Dec 2007 19:37:49 -0500
Subject: [antlr-interest] Newbie can't get off the ground and get
	through tutorial successfully
In-Reply-To: <b8ceeef70712051612y4e7e63fbn57a133008ad7beed@mail.gmail.com>
References: <EE8C2D034A022444B87B1332B39781050EAEB0A5@extonpo1.bentley.com>
	<200712051906.lB5J6Vh0028661@mx3.bentley.com>
	<EE8C2D034A022444B87B1332B39781050EAEB30E@extonpo1.bentley.com>
	<b8ceeef70712051612y4e7e63fbn57a133008ad7beed@mail.gmail.com>
Message-ID: <EE8C2D034A022444B87B1332B39781050EB20246@extonpo1.bentley.com>

Thanks. You got me past that problem. Now the debugger seems to function
but upon the first step it goes to the atom production and never parses
anything but the "2" at the beginning of the input in the tutorial.

What am I doing wrong now?  The tutorial says "Make sure that the start
rule is "prog"."  I'm highlighting "prog" before I hit step but it makes
no difference. Is there some other action that I need to take to "set
the start rule" in the debugger?

-Bern

-----Original Message-----
From: Steve Bennett [mailto:stevagewp at gmail.com] 
Sent: Wednesday, December 05, 2007 7:12 PM
To: Bern McCarty
Cc: antlr at mirality.co.nz; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Newbie can't get off the ground and get
through tutorial successfully

On 12/6/07, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com> wrote:
> So, if Gavin's guess is right that even "local" debugging is using the
> network stack, how do I at least configure it to use an available port
> (rather than an unavailable port)?  The only opportunity to specify a
port
> is when selecting "Debug Remote..." but I am selecting "Debug...".

File | Preferences | Debugger.

Steve

From Bern.McCarty at bentley.com  Wed Dec  5 16:49:20 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Wed, 5 Dec 2007 19:49:20 -0500
Subject: [antlr-interest] Newbie can't get off the ground and get
	through tutorial successfully
References: <EE8C2D034A022444B87B1332B39781050EAEB0A5@extonpo1.bentley.com>
	<200712051906.lB5J6Vh0028661@mx3.bentley.com>
	<EE8C2D034A022444B87B1332B39781050EAEB30E@extonpo1.bentley.com>
	<b8ceeef70712051612y4e7e63fbn57a133008ad7beed@mail.gmail.com> 
Message-ID: <EE8C2D034A022444B87B1332B39781050EB20260@extonpo1.bentley.com>

Oh!  I see it now.  Sorry for being a dunce.

-----Original Message-----
From: Bern McCarty 
Sent: Wednesday, December 05, 2007 7:38 PM
To: 'Steve Bennett'
Cc: antlr at mirality.co.nz; antlr-interest at antlr.org
Subject: RE: [antlr-interest] Newbie can't get off the ground and get
through tutorial successfully

Thanks. You got me past that problem. Now the debugger seems to function
but upon the first step it goes to the atom production and never parses
anything but the "2" at the beginning of the input in the tutorial.

What am I doing wrong now?  The tutorial says "Make sure that the start
rule is "prog"."  I'm highlighting "prog" before I hit step but it makes
no difference. Is there some other action that I need to take to "set
the start rule" in the debugger?

-Bern

-----Original Message-----
From: Steve Bennett [mailto:stevagewp at gmail.com] 
Sent: Wednesday, December 05, 2007 7:12 PM
To: Bern McCarty
Cc: antlr at mirality.co.nz; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Newbie can't get off the ground and get
through tutorial successfully

On 12/6/07, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com> wrote:
> So, if Gavin's guess is right that even "local" debugging is using the
> network stack, how do I at least configure it to use an available port
> (rather than an unavailable port)?  The only opportunity to specify a
port
> is when selecting "Debug Remote..." but I am selecting "Debug...".

File | Preferences | Debugger.

Steve

From relationalalgebra at gmail.com  Thu Dec  6 00:09:46 2007
From: relationalalgebra at gmail.com (G R)
Date: Thu, 6 Dec 2007 09:09:46 +0100
Subject: [antlr-interest] Strange behavior with backtracking
Message-ID: <2ea6ad20712060009g184884e0qf874b14e262046fd@mail.gmail.com>

Hi!
While I was debugging my application, I found some strange error. Here is a
part of my grammar :

grammar RAGrammar;
options    {output=AST;
    backtrack=true;
    memoize=true;}

raExpr    :    raQuery     ->^(raQuery)
    |    RelationName    ->^(RelationName);

raQuery    :    project^
    |    select^
    |    rename^
    |    product^
    |    join^
    |    union^
    |    intersect^
    |    difference^
    |    divide^;
        catch [RecognitionException re] {
            throw re;
        }

relation:    LeftParent raQuery RightParent    ->^(raQuery)
    |    RelationName            ->^(RelationName);

union
:    r1=relation Union r2=relation
        ->^(Union $r1 $r2);
intersect
:    r1=relation Intersect r2=relation
        ->^(Intersect $r1 $r2);
difference
:    r1=relation Difference r2=relation
        ->^(Difference $r1 $r2);
divide
:    r1=relation Divide r2=relation
        ->^(Divide $r1 $r2);

So there are a few parser rule that ask for a relation then, a relational
algebra operator (Union, Intersect, Difference, and the last one in my
grammar : Divide).
When I try parsing the follow input, everything  works fine :

(PROJECT [nomClub] Clubcheap)
 UNION (PROJECT [nomClub] Clubexpensive)

But when I make an error in this input like this :

(PROJECT [nomClub] Clubcheap)
 UNION (PROJECT [nomClub. Clubexpensive)

I expect that ANTLR raise an error like "mismatched input '.' expecting ']'
in project.
But the error I get is : "mismatched input 'UNION' expecting DIVIDE in
divide"
So I think the error comes from the backtracking (correct me if I'm wrong,
I'm here to learn), where ANTLR believe he is in the last rule (no syntactic
predicate for the last rule) ans then raise a wrong error message.

How can i correct this ?
I would really appreciate any help for this.

Thanks.

G. R.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071206/1104c854/attachment.html 

From chris77550 at gmail.com  Thu Dec  6 01:10:03 2007
From: chris77550 at gmail.com (Christopher Brown)
Date: Thu, 6 Dec 2007 10:10:03 +0100
Subject: [antlr-interest] How can I edit StringTemplate group files in
	ANTLRWorks ?
Message-ID: <85c0f52a0712060110x6211255em879121cf92d467b7@mail.gmail.com>

Hi,

I'm using ST# 3, and getting started using group files for generating
HTML.  As such, I prefer to use the default template lexer instead of
the angle bracket lexer.

This is how I'm setting it up in code:

            string templateFolder = Request.PhysicalApplicationPath +
"templates";

            StreamReader reader = new
StreamReader(Path.Combine(templateFolder, "st2.txt"));
            StringTemplateGroup myTemplates = new
StringTemplateGroup(reader,typeof(Antlr.StringTemplate.Language.DefaultTemplateLexer));
            reader.Close();

That works fine.  Now I'd like to use something more sophisticated
than a "stringtemplate-unaware" text editor.  I thought I'd give
ANTLRWorks a try, but I can't figure out how to set it up to load the
grammar files then load my templates, especially give that I'm not
using the angle bracket lexer, which appears to be the default for
group files.

I noticed several ".g" files in the "Antlr.StringTemplate.Language"
source directory, but don't know really how to work with them.

Can anyone advise me?

Thanks in advance,
Christopher

From andreas.ravnestad at gmail.com  Thu Dec  6 05:22:08 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Thu, 6 Dec 2007 14:22:08 +0100
Subject: [antlr-interest] Getting the exceptions caught in nextToken()
In-Reply-To: <1196798589.4755b27d6c866@clients.latnet.lv>
References: <db3e39e10712040925x3f892dq137ae5835be8bc02@mail.gmail.com>
	<1196798589.4755b27d6c866@clients.latnet.lv>
Message-ID: <db3e39e10712060522m1fd403d2ldef4065964bc50ae@mail.gmail.com>

On 12/4/07, Guntis Ozols <guntiso at latnet.lv> wrote:
> Not sure if it fits you, I use something like this:
>
> // Error handling (do not recover).
> // This part sucks, I'd prefer to call stopOnError(true) from API
> // NOTE: Throwing in lexer also means: disable antlrworks debugger and lexer
> syntactic predicates, Oh my dear...
> @lexer::members {
> public void reportError(RecognitionException e) {
>     // API does not allow to throw e from here, throwing RuntimeException
> instead
>     throw new RuntimeException("Lexing recognition problem", e);
> }
> }
>
> @members {
> protected void mismatch(IntStream input, int ttype, BitSet follow)
>         throws RecognitionException {
>     throw new MismatchedTokenException(ttype, input);
> }
> public void recoverFromMismatchedSet(IntStream input, RecognitionException e,
> BitSet follow)
>         throws RecognitionException {
>     throw e;
> }
> }
>
> @rulecatch {
>     catch (RecognitionException e) {
>         throw e;
>     }
> }
>

Yikes, but I need my syntactic predicates :)

Just a thought: could it be possible to circumvent this by overriding
nextToken() and employing the observer pattern to flag for an
exception in the parser?

Regards,
Andreas

From guntiso at latnet.lv  Thu Dec  6 06:26:19 2007
From: guntiso at latnet.lv (Guntis Ozols)
Date: Thu,  6 Dec 2007 16:26:19 +0200
Subject: [antlr-interest] Getting the exceptions caught in nextToken()
In-Reply-To: <db3e39e10712060522m1fd403d2ldef4065964bc50ae@mail.gmail.com>
References: <db3e39e10712040925x3f892dq137ae5835be8bc02@mail.gmail.com>
	<1196798589.4755b27d6c866@clients.latnet.lv>
	<db3e39e10712060522m1fd403d2ldef4065964bc50ae@mail.gmail.com>
Message-ID: <1196951179.4758068bebab7@clients.latnet.lv>

Not sure. Maybe somebody knows how to handle this properly, I don't.
Instead, I did all the work in parser (changed token types).

I think lexer generator should be modified to generate lexer that handles
exceptions for predicates or sets some predicateMode flag, but I'm not too deep
into this, perhaps authors have other ideas.

> On 12/4/07, Guntis Ozols <guntiso at latnet.lv> wrote:
> > Not sure if it fits you, I use something like this:
> >
> > // Error handling (do not recover).
> > // This part sucks, I'd prefer to call stopOnError(true) from API
> > // NOTE: Throwing in lexer also means: disable antlrworks debugger and
> lexer
> > syntactic predicates, Oh my dear...
> > @lexer::members {
> > public void reportError(RecognitionException e) {
> >     // API does not allow to throw e from here, throwing RuntimeException
> > instead
> >     throw new RuntimeException("Lexing recognition problem", e);
> > }
> > }
> >
> > @members {
> > protected void mismatch(IntStream input, int ttype, BitSet follow)
> >         throws RecognitionException {
> >     throw new MismatchedTokenException(ttype, input);
> > }
> > public void recoverFromMismatchedSet(IntStream input, RecognitionException
> e,
> > BitSet follow)
> >         throws RecognitionException {
> >     throw e;
> > }
> > }
> >
> > @rulecatch {
> >     catch (RecognitionException e) {
> >         throw e;
> >     }
> > }
> >
>
> Yikes, but I need my syntactic predicates :)
>
> Just a thought: could it be possible to circumvent this by overriding
> nextToken() and employing the observer pattern to flag for an
> exception in the parser?
>
> Regards,
> Andreas


From yotommy at gmail.com  Thu Dec  6 07:37:21 2007
From: yotommy at gmail.com (Tom Smith)
Date: Thu, 6 Dec 2007 10:37:21 -0500
Subject: [antlr-interest] transforming AST nodes
Message-ID: <82dc0d190712060737g6683e108ge3ab96fc34f1a6c5@mail.gmail.com>

Hello,

I am seeking advice on good ways to transform the structure of some
AST nodes.  My example involves translating a language that supports
multiple assignment into one that does not.  The grammar (shown below)
parses input of the form:

    a, b = c, d

into

    ^(ASSIGN ^(LIST a b) ^(LIST c d))

However I would like a structure more like:

    ^(LIST ^(ASSIGN a c) ^(ASSIGN b d))

I've considered two ways of accomplishing this.  I'd appreciate
feedback on these, or suggestions for a better alternative.

Option 1.  Change the rewrite expression for multAssign such that it
uses custom Java code to create a new tree node with the desired
structure.

Option 2.  Create a tree grammar with output=AST that performs the
desired transformation.  However if I understand correctly, this is
only available in antlr 3.1.  Is that correct, and is it available
somewhere?  And will I end up doing something like Option 1 in this
grammar anyway?

Thanks,
Tom.

grammar MultAssign;

options {
	output = AST;
}

tokens {
	ASSIGN = '=';
	LIST;
}

multAssign
	:	assignList ASSIGN assignList
	->	^(ASSIGN assignList assignList)
	;

assignList
	:	IDENT ( ',' IDENT )*
	->	^(LIST IDENT+)
	;

IDENT
   :  ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
   ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;

From Austin_Hastings at Yahoo.com  Thu Dec  6 11:31:33 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Thu, 06 Dec 2007 14:31:33 -0500
Subject: [antlr-interest] NQOT: Grammar meta-programming
Message-ID: <47584E15.1000606@Yahoo.com>

Howdy,

This isn't quite off topic, nor quite on topic. I thought I'd throw it 
out here since there are probably some researchy types reading.

I'm in the middle of yet another implementation of an expression 
language. This time it's for strings. So far I've got '+' for 
catenation, and various unary operators. I've recently had to do a 
c-like arithmetic expression sublanguage a couple of times.

It occurs to me that this is boilerplate. Yes, there are operators. Yes, 
they are the standard ones. Yes there is precedence. Yes, the precedence 
levels are standard. Why do I have to type this?

More to the point, what do I have to type to NOT have to type all this 
cruft? What feature does ANTLR need that will support grammar metacoding 
so that I can compactly declare the entire arithmetic or string 
expression aspect of my language?

Is there a notion of an "abstract grammar"? Is there a "generic 
grammar"? Is there an "interface GrammarWithArithmethicExpressions" that 
my grammar can implement?

Of course, the fact that Antlr's lookahead wants to know about the 
tokens that may start or end an expression will interfere, but does it 
have to interfere that much? What kind of "token set" would I have to 
declare to enable Antlr to 'bolt on' a sub-grammar? What information 
would be needed to 'extend' a base grammar? Is anything necessary in 
order to disable certain operators, or re-cast them to a different 
precedence or associativity? What about converting an operator from 
binary to unary, or vice-versa?

In short, what's the state of research on grammar meta-programming, and 
who's going to advance it?

=Austin


From myeates at jpl.nasa.gov  Thu Dec  6 13:40:20 2007
From: myeates at jpl.nasa.gov (Mathew Yeates)
Date: Thu, 06 Dec 2007 13:40:20 -0800
Subject: [antlr-interest] woot! Found a fortran grammar
Message-ID: <47586C44.6060000@jpl.nasa.gov>

Hi
I found an antlr grammar for f77 at The Open Fortran Parser website 
(http://fortran-parser.sourceforge.net/index.html). After looking at 
their grammar I can see I could never figured this out in a finite 
amount of time.

Now I want to build a translator to take Fortran to Python/C#.
After reading a few things I'm guessing that I want produce an AST and 
the then walk it, emitting Python when appropriate. The AST they produce 
will be flat since they define no tokens so I'll need to add this.

Or do I want to use rewrite rules?

Any input/tips/pointers are grealy appreciated.

Mathew


From Bern.McCarty at bentley.com  Thu Dec  6 20:45:38 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Thu, 6 Dec 2007 23:45:38 -0500
Subject: [antlr-interest] Cannot understand why parser accepts input...
Message-ID: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>

Why does the below grammer successfully parse the input " B ==3C" When
there are no numerals allowed anywhere in the grammer?

grammar BoolExpr;

top	:
	expr EOF
	;

expr	: 
	unaryExp | equalityExp
	;

unaryExp:	
	'!' equalityExp
	;

equalityExp	:
	andOrExpr (('=='|'!=') andOrExpr)*
	;

andOrExpr
	:	atom (('||'|'&&') atom)*
	;

atom	:
	|	ID
	|	'(' expr ')'
	;

ID	:	('A'..'Z')+
	;

WS  	:  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    	;



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071206/7a017c10/attachment.html 

From stevagewp at gmail.com  Thu Dec  6 21:30:31 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Fri, 7 Dec 2007 16:30:31 +1100
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <47584E15.1000606@Yahoo.com>
References: <47584E15.1000606@Yahoo.com>
Message-ID: <b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>

On 12/7/07, Austin Hastings <Austin_Hastings at yahoo.com> wrote:
> It occurs to me that this is boilerplate. Yes, there are operators. Yes,
> they are the standard ones. Yes there is precedence. Yes, the precedence
> levels are standard. Why do I have to type this?

I was wondering about this too. It occurred to me that virtually any
language that anyone is willing to programming in bears a striking
similarity to most other languages out there. The difficulty of
switching from imperative to functional paradigms sort of bears that
out.

So it would really seem obvious to have some kind of grammar
generator. I was picturing a GUI, but a language would be fine too. In
my imagined GUI, you select options like "Uses blocks" (yes),
"Supported blocks" (if/then/else, while, procedure declaration...),
"Blocks look like" ("{..}") etc.

Such a thing would probably rapidly get you to about 90% of what's
required to parse some language. But how would you specify the other
10%? How do you specify the tiny freaky detail that makes language Foo
totally distinct from every other language? Do you end up simply
generating the grammar once, then hand-editing it? Is there an
extension mechanism?

One could start by assembling a family of languages which ought to be
parseable by some meta grammar parser. You could start with
object-oriented languages like Java, Object Pascal, VB, and work out
all the features they have in common, and ways of parameterising them.
Then possibly expand to all imperative languages. But being generic
enough to include functional and declarative languages like Haskell
and Prolog...ugh. That sounds hard.

I'd love to hear how far people have gone on this. I have a vague
dream of one day being able to whip up an interpreter for an esoteric
language in an hour or less...

Steve

Steve

From antlr at mirality.co.nz  Fri Dec  7 00:22:30 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 07 Dec 2007 21:22:30 +1300
Subject: [antlr-interest] Cannot understand why parser accepts input...
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley. com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
Message-ID: <20071207082246.52A5811EBA7@www.antlr.org>

At 17:45 7/12/2007, Bern.McCarty at bentley.com wrote:

>Why does the below grammer successfully parse the input " B ==3C" 
>When there are no numerals allowed anywhere in the grammer?

It's an automatic error-recovery thing.  When ANTLRv3 encounters a 
character it can't figure out, it prints an error to the console 
(by default), drops the character, and then tries again.


From relationalalgebra at gmail.com  Fri Dec  7 04:04:25 2007
From: relationalalgebra at gmail.com (G R)
Date: Fri, 7 Dec 2007 13:04:25 +0100
Subject: [antlr-interest] Stuck with parser & tree grammar
Message-ID: <2ea6ad20712070404s6aea6941pca597e710de4605c@mail.gmail.com>

Hi all!
I'm still trying to translate relational algebra into SQL.
I used to some problems with my grammar, so I decide to change it into a
LL(1) grammar.
So, a relational algebra query can be describe like this :

raExpr
:    raQuery^
|    RelationName^;

raQuery
:    project^
|    select^
|    rename^
|    binaryExpr^;

binaryExpr
:    r1=relation (BinaryOp r2=relation
|     LeftBrack a1=AttributeName RightBrack Join r2=relation LeftBrack
a2=AttributeName RightBrack)
    ->{$BinaryOp!=null}?^(BinaryOp $r1 $r2)
    ->^(Join ^(Left $r1 $a1) ^(Right $r2 $a2));

relation
:    LeftParent raQuery RightParent
    ->^(raQuery)
|    RelationName
    ->^(RelationName);

As you can see, I'm trying to make possible input like :
relationName1 UNION relationName2
Or
relationName1[AttributeName1] JOIN relationName2[AttributeName2]

Using this grammar, this is ok : my AST looks good. Using previous inputs, I
got the following AST :
(UNION relationName1 relationName2)
Or
(Join (Left relationName1, AttributeName1) (Right relationName2,
AttributeName2))

The problem is in the tree grammar. I don't know how to deal with the rule
binaryExpr.
I've try this :
binaryExpr
:    ^(BinaryOp r1=relation r2=relation)
        -> {BinaryOp==Union}? Union(left={$r1.st}, right={$r2.st})
        -> {BinaryOp==Intersect}? Intersect(left={$r1.st}, right={$r2.st})
        -> {BinaryOp==Difference}? Difference(left={$r1.st}, right={$r2.st})
        -> {BinaryOp==Divide}? Divide(left={$r1.st}, right={$r2.st})
|    ^(Join ^(Left r1=relation a1=AttributeName) ^(Right r2=relation
a2=AttributeName))
        -> join(leftRel={$lr.st}, leftAtt={$la.text}, leftAlias={$lr.alias},
                        rightRel={$rr.st}, rightAtt={$ra.text},
rightAlias={$rr.alias});

But, ANTLR is expecting a REWRITE instead of the optional operator ( | )
just after the Divide.

So, my question is : how can I generate my walker using the previous parser
grammar, or What should I do for this to work ?

Thanks for any help.

G.R.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/d601cb81/attachment.html 

From Bern.McCarty at bentley.com  Fri Dec  7 04:17:32 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Fri, 7 Dec 2007 07:17:32 -0500
Subject: [antlr-interest] Cannot understand why parser accepts input...
In-Reply-To: <20071207082246.52A5811EBA7@www.antlr.org>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
	<20071207082246.52A5811EBA7@www.antlr.org>
Message-ID: <EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>

...but when I enter a clearly invalid input into the interpreter such as
simply "3" or "B=3C the console contains no errors or warnings at all.

How could a mode that allows incorrect input without even issuing a
complaint/warning possibly be helpful? Is there a way to turn it off?

Thanks,
-Bern



-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gavin Lambert
Sent: Friday, December 07, 2007 3:23 AM
To: Bern McCarty; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Cannot understand why parser accepts
input...

At 17:45 7/12/2007, Bern.McCarty at bentley.com wrote:

>Why does the below grammer successfully parse the input " B ==3C" 
>When there are no numerals allowed anywhere in the grammer?

It's an automatic error-recovery thing.  When ANTLRv3 encounters a 
character it can't figure out, it prints an error to the console 
(by default), drops the character, and then tries again.


From relationalalgebra at gmail.com  Fri Dec  7 04:26:24 2007
From: relationalalgebra at gmail.com (G R)
Date: Fri, 7 Dec 2007 13:26:24 +0100
Subject: [antlr-interest] Cannot understand why parser accepts input...
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
	<20071207082246.52A5811EBA7@www.antlr.org>
	<EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
Message-ID: <2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>

Try using this lexer rule at the end of your grammar :

OtherChar :.;

This will define every character, and if you don't mention in your grammar
that you want a "OtherChar", then, an exception will be raised.
Hope, this helps you.

G.R.

2007/12/7, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com>:
>
> ...but when I enter a clearly invalid input into the interpreter such as
> simply "3" or "B=3C the console contains no errors or warnings at all.
>
> How could a mode that allows incorrect input without even issuing a
> complaint/warning possibly be helpful? Is there a way to turn it off?
>
> Thanks,
> -Bern
>
>
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gavin Lambert
> Sent: Friday, December 07, 2007 3:23 AM
> To: Bern McCarty; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Cannot understand why parser accepts
> input...
>
> At 17:45 7/12/2007, Bern.McCarty at bentley.com wrote:
>
> >Why does the below grammer successfully parse the input " B ==3C"
> >When there are no numerals allowed anywhere in the grammer?
>
> It's an automatic error-recovery thing.  When ANTLRv3 encounters a
> character it can't figure out, it prints an error to the console
> (by default), drops the character, and then tries again.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/93044e95/attachment-0001.html 

From Bern.McCarty at bentley.com  Fri Dec  7 04:49:49 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Fri, 7 Dec 2007 07:49:49 -0500
Subject: [antlr-interest] Cannot understand why parser accepts input...
In-Reply-To: <2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com><20071207082246.52A5811EBA7@www.antlr.org><EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
	<2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>
Message-ID: <EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>

Yes that is a big help.  Thanks. At least now I see a
NoViableAltException in the interpreter output "diagram".  However,
there is still no indication of anything being amiss at all in the
console window.  Shouldn't the console window have something to say
about an exception that has caused parsing to fail?

 

-Bern

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of G R
Sent: Friday, December 07, 2007 7:26 AM
To: antlr at mirality.co.nz; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Cannot understand why parser accepts
input...

 

Try using this lexer rule at the end of your grammar :

OtherChar :.;

This will define every character, and if you don't mention in your
grammar that you want a "OtherChar", then, an exception will be raised. 
Hope, this helps you.

G.R.

2007/12/7, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com >:

...but when I enter a clearly invalid input into the interpreter such as
simply "3" or "B=3C the console contains no errors or warnings at all.

How could a mode that allows incorrect input without even issuing a
complaint/warning possibly be helpful? Is there a way to turn it off? 

Thanks,
-Bern



-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto: antlr-interest-bounces at antlr.org
<mailto:antlr-interest-bounces at antlr.org> ] On Behalf Of Gavin Lambert
Sent: Friday, December 07, 2007 3:23 AM
To: Bern McCarty; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Cannot understand why parser accepts 
input...

At 17:45 7/12/2007, Bern.McCarty at bentley.com wrote:

>Why does the below grammer successfully parse the input " B ==3C"
>When there are no numerals allowed anywhere in the grammer? 

It's an automatic error-recovery thing.  When ANTLRv3 encounters a
character it can't figure out, it prints an error to the console
(by default), drops the character, and then tries again.

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/81642756/attachment.html 

From relationalalgebra at gmail.com  Fri Dec  7 05:02:42 2007
From: relationalalgebra at gmail.com (G R)
Date: Fri, 7 Dec 2007 14:02:42 +0100
Subject: [antlr-interest] Cannot understand why parser accepts input...
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
	<20071207082246.52A5811EBA7@www.antlr.org>
	<EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
	<2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>
Message-ID: <2ea6ad20712070502t23148bfata0c1d40ae5501514@mail.gmail.com>

Try using the debugger and take a look at the output section.

G.R.

2007/12/7, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com>:
>
>  Yes that is a big help.  Thanks. At least now I see a
> NoViableAltException in the interpreter output "diagram".  However, there is
> still no indication of anything being amiss at all in the console window.
> Shouldn't the console window have something to say about an exception that
> has caused parsing to fail?
>
>
>
> -Bern
>
>
>
> *From:* antlr-interest-bounces at antlr.org [mailto:
> antlr-interest-bounces at antlr.org] *On Behalf Of *G R
> *Sent:* Friday, December 07, 2007 7:26 AM
> *To:* antlr at mirality.co.nz; antlr-interest at antlr.org
> *Subject:* Re: [antlr-interest] Cannot understand why parser accepts
> input...
>
>
>
> Try using this lexer rule at the end of your grammar :
>
> OtherChar :.;
>
> This will define every character, and if you don't mention in your grammar
> that you want a "OtherChar", then, an exception will be raised.
> Hope, this helps you.
>
> G.R.
>
> 2007/12/7, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com >:
>
> ...but when I enter a clearly invalid input into the interpreter such as
> simply "3" or "B=3C the console contains no errors or warnings at all.
>
> How could a mode that allows incorrect input without even issuing a
> complaint/warning possibly be helpful? Is there a way to turn it off?
>
> Thanks,
> -Bern
>
>
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto: antlr-interest-bounces at antlr.org] On Behalf Of Gavin Lambert
> Sent: Friday, December 07, 2007 3:23 AM
> To: Bern McCarty; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Cannot understand why parser accepts
> input...
>
> At 17:45 7/12/2007, Bern.McCarty at bentley.com wrote:
>
> >Why does the below grammer successfully parse the input " B ==3C"
> >When there are no numerals allowed anywhere in the grammer?
>
> It's an automatic error-recovery thing.  When ANTLRv3 encounters a
> character it can't figure out, it prints an error to the console
> (by default), drops the character, and then tries again.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/923df298/attachment.html 

From moro at flw.mb.uni-dortmund.de  Fri Dec  7 05:56:44 2007
From: moro at flw.mb.uni-dortmund.de (Roidl Moritz)
Date: Fri, 7 Dec 2007 14:56:44 +0100
Subject: [antlr-interest] Stuck with parser & tree grammar[Scanned]
In-Reply-To: <2ea6ad20712070404s6aea6941pca597e710de4605c@mail.gmail.com>
References: <2ea6ad20712070404s6aea6941pca597e710de4605c@mail.gmail.com>
Message-ID: <E7874CE0A1B0C24ABBE866A25F7F301146960A@hermes.flw.mb.uni-dortmund.de>

Hi,

 

this is a snippet from ANTLRv3Tree.g that describes the structure of
rewrites:

 

rewrite

      :     (^('->' SEMPRED rewrite_alternative))* ^('->'
rewrite_alternative)

      |

      ;

 

You always need a default rewrite rule which takes all the cases that
are not covered by the conditional rewrites. So, you could try something
like this:

 

binaryExpr

:    ^(BinaryOp r1=relation r2=relation)

        -> {BinaryOp==Union}? Union(left={$r1.st}, right={$r2.st})

        -> {BinaryOp==Intersect}? Intersect(left={$r1.st},
right={$r2.st}) 

        -> {BinaryOp==Difference}? Difference(left={$r1.st},
right={$r2.st})

        -> {BinaryOp==Divide}? Divide(left={$r1.st}, right={$r2.st})

        -> UndefinedBinaryOp(left={$r1.st}, right={$r2.st})

 

Since you know that only the conditional cases can occur the default
rule will never be evaluated. I hope this works, I haven't tested it.

 

Moritz

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/8e8368fa/attachment.html 

From Bern.McCarty at bentley.com  Fri Dec  7 06:38:00 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Fri, 7 Dec 2007 09:38:00 -0500
Subject: [antlr-interest] Cannot understand why interpreter accepts bad
	input...
In-Reply-To: <2ea6ad20712070502t23148bfata0c1d40ae5501514@mail.gmail.com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com><20071207082246.52A5811EBA7@www.antlr.org><EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com><2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com><EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>
	<2ea6ad20712070502t23148bfata0c1d40ae5501514@mail.gmail.com>
Message-ID: <EE8C2D034A022444B87B1332B39781050EB5CECA@extonpo1.bentley.com>

I'm really struggling with trying to use the AntlrWorks interpreter and
greatly appreciate any help I can get.  The first grammer below does NOT
require Gavin's trick of defining a "IllegalChar: .;" rule in order to
get a NoViableAltException when feeding bad input like "a" into the
interpreter.  The 2nd grammer DOES require Gavin's trick in order to get
a NoViableAltException out of the same bad input.  I don't get it.  Is
there a way to tell the interpreter to please always give me errors when
I feed it bad input? Otherwise I get tricked into taking my grammer down
a bad path because I do not realize anything is wrong.  Would I be
better off forgoing the IDE and just running the command-line tool to
test my grammar each time I change it?  I just can't seem to make heads
or tails of the interpreter/Debugger combo.

 

// First grammer.  Correctly provides an exception for bad input like
"a":

 

grammar AtLeastThisOneComplainsAboutBadInput;

 

top         : atomList EOF;

 

atomList:             atom (',' atom)*;

 

atom     :               ASPECTID

                |              '(' atomList ')'

                ;

 

ASPECTID

                :               'PP_ID_FeatureAspects' ('_' ASPECTNAME)+

                ;

 

fragment ASPECTNAME

                :               'A'..'Z' ('a'..'z' | 'A'..'Z' |
'0'..'9')*

                ;

 

WS         :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}

                ;

 

Second Grammer.  Provides no Exception for bad input such as "a".  What
is so different about this grammer than the first?  The input is clearly
illegal is it not?  What is the interpreter for again?

 

grammar PPExpr;

 

top         : expr EOF;

 

expr       : unaryExp | equalityExp

                ;

 

unaryExp:            '!' equalityExp

                ;

 

equalityExp        :               andOrExpr (('=='|'!=') andOrExpr)*

                ;

 

andOrExpr

                :               atom (('||'|'&&') atom)*

                ;

 

atom     :

                |              ASPECTID

                |              '(' expr ')'

                ;

 

ASPECTID

                :               'PP_ID_FeatureAspects' ('_' ASPECTNAME)+

                ;

 

fragment ASPECTNAME

                :               'A'..'Z' ('a'..'z' | 'A'..'Z' |
'0'..'9')*

                ;

 

WS         :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}

                ;

 

 

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of G R
Sent: Friday, December 07, 2007 8:03 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Cannot understand why parser accepts
input...

 

Try using the debugger and take a look at the output section.

G.R.

2007/12/7, Bern.McCarty at bentley.com < Bern.McCarty at bentley.com
<mailto:Bern.McCarty at bentley.com> >:

Yes that is a big help.  Thanks. At least now I see a
NoViableAltException in the interpreter output "diagram".  However,
there is still no indication of anything being amiss at all in the
console window.  Shouldn't the console window have something to say
about an exception that has caused parsing to fail?

 

-Bern

 

From: antlr-interest-bounces at antlr.org [mailto:
antlr-interest-bounces at antlr.org
<mailto:antlr-interest-bounces at antlr.org> ] On Behalf Of G R
Sent: Friday, December 07, 2007 7:26 AM
To: antlr at mirality.co.nz; antlr-interest at antlr.org


Subject: Re: [antlr-interest] Cannot understand why parser accepts
input...

 

Try using this lexer rule at the end of your grammar :

OtherChar :.;

This will define every character, and if you don't mention in your
grammar that you want a "OtherChar", then, an exception will be raised. 
Hope, this helps you.

G.R.

2007/12/7, Bern.McCarty at bentley.com < Bern.McCarty at bentley.com
<mailto:Bern.McCarty at bentley.com> >:

...but when I enter a clearly invalid input into the interpreter such as
simply "3" or "B=3C the console contains no errors or warnings at all.

How could a mode that allows incorrect input without even issuing a
complaint/warning possibly be helpful? Is there a way to turn it off? 

Thanks,
-Bern



-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto: antlr-interest-bounces at antlr.org
<mailto:antlr-interest-bounces at antlr.org> ] On Behalf Of Gavin Lambert
Sent: Friday, December 07, 2007 3:23 AM
To: Bern McCarty; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Cannot understand why parser accepts 
input...

At 17:45 7/12/2007, Bern.McCarty at bentley.com wrote:

>Why does the below grammer successfully parse the input " B ==3C"
>When there are no numerals allowed anywhere in the grammer? 

It's an automatic error-recovery thing.  When ANTLRv3 encounters a
character it can't figure out, it prints an error to the console
(by default), drops the character, and then tries again.

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/a145c2b0/attachment-0001.html 

From paox75 at gmail.com  Fri Dec  7 07:09:26 2007
From: paox75 at gmail.com (Pablo H)
Date: Fri, 7 Dec 2007 15:09:26 +0000
Subject: [antlr-interest] Step-by-Step parsing
Message-ID: <dc6c53790712070709q50f37d42m5b412be9835ca99a@mail.gmail.com>

Hi everybody,

I am newbie in parser generator tools. I have just downloaded antlr and I
have made some basic examples. I would like to know how to use antlr for
parsing a grammar step-by-step. My goal is to develop a program that, given
that a particular state of the parsing processing, it returns the list of
candidate tokens. For example, given that the following grammar:

S : 'a' A 'c' B ;
A : ('b')* | 'c' ;
B : ('d')+ ;

if the parser has already recognized "abb", calling the function
getCandidateList() will return "b c".

May you provide me some hints?

Thank very much in advance
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/10b961a3/attachment.html 

From antlr at jazillian.com  Fri Dec  7 08:02:19 2007
From: antlr at jazillian.com (Andy Tripp)
Date: Fri, 07 Dec 2007 11:02:19 -0500
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
References: <47584E15.1000606@Yahoo.com>
	<b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
Message-ID: <47596E8B.5030109@jazillian.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071207/1a36861a/attachment.html 

From andreas.ravnestad at gmail.com  Fri Dec  7 11:13:51 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Fri, 7 Dec 2007 20:13:51 +0100
Subject: [antlr-interest] Using a different Tree class
Message-ID: <db3e39e10712071113y4728958aq4f81913cf0089f0b@mail.gmail.com>

Hi!

How can I make Antlr use a different Tree class (not CommonTree)?

Currently I have this in the grammar:

  grammar XQFT;
  options {
      output=AST;
      ASTLabelType=XQFTTree;
  }

Where XQFTTree extends CommonTree. And then, this is the test program:

  XQFTParser.module_return result = parser.module();
  XQFTTree tree = (XQFTTree)result.getTree();

And that will currently produce this error:

Exception in thread "main" java.lang.ClassCastException:
org.antlr.runtime.tree.CommonTree cannot be cast to
no.ntnu.xqft.parse.XQFTTree
        at no.ntnu.xqft.parse.XQFTParser.module(Unknown Source)
        at no.ntnu.xqft.test.TreeTest.execute(Unknown Source)
        at no.ntnu.xqft.test.TreeTest.main(Unknown Source)

I'm sure I'm just missing a small detail here.

Thanks,
Andreas

From r.mark.volkmann at gmail.com  Fri Dec  7 12:21:17 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 7 Dec 2007 14:21:17 -0600
Subject: [antlr-interest] mismatched tree node
Message-ID: <f0fcc6820712071221q11645544v83bcec0779420914@mail.gmail.com>

I'm trying to understand why my tree parser is giving me a "mismatched
tree node: - expecting <UP>" error.
Here's the string representation of the simple AST it is processing.

(SCRIPT (FUNCTION f x (POLYNOMIAL (TERM 3 x 2) - (TERM 5 x) + (TERM
7))) (FIND f 1))

It doesn't like the minus sign between the first and second TERM. It
also doesn't like the plus sign between the second and third term.

Here is my tree grammar, stripped down to the bare minimum that will
reproduce the problem.

tree grammar MathTree;

options {
  ASTLabelType = CommonTree;
  tokenVocab = Math;
  output = template;
}

@header {
  package com.ociweb.math;
}

script: ^(SCRIPT statement*);

statement: ^(FUNCTION name=NAME variable=NAME polynomial);

polynomial: ^(POLYNOMIAL term (sign term)*);

sign:	'+' | '-';

term
  :	^(TERM NUMBER)
  |	^(TERM NUMBER NAME)
  |	^(TERM NAME NUMBER)
  |	^(TERM NUMBER NAME NUMBER)
  ;

-- 
R. Mark Volkmann
Object Computing, Inc.

From yotommy at gmail.com  Fri Dec  7 12:22:23 2007
From: yotommy at gmail.com (Tom Smith)
Date: Fri, 7 Dec 2007 15:22:23 -0500
Subject: [antlr-interest] transforming AST nodes
In-Reply-To: <82dc0d190712060737g6683e108ge3ab96fc34f1a6c5@mail.gmail.com>
References: <82dc0d190712060737g6683e108ge3ab96fc34f1a6c5@mail.gmail.com>
Message-ID: <82dc0d190712071222v695e180eq32979727507e9780@mail.gmail.com>

In the absence of any advice to date, I've implemented Option 1, which
appears to work.  However any advice on improvements are still
welcome!

Thanks,
Tom.

On Dec 6, 2007 10:37 AM, Tom Smith <yotommy at gmail.com> wrote:
> Hello,
>
> I am seeking advice on good ways to transform the structure of some
> AST nodes.  My example involves translating a language that supports
> multiple assignment into one that does not.  The grammar (shown below)
> parses input of the form:
>
>     a, b = c, d
>
> into
>
>     ^(ASSIGN ^(LIST a b) ^(LIST c d))
>
> However I would like a structure more like:
>
>     ^(LIST ^(ASSIGN a c) ^(ASSIGN b d))
>
> I've considered two ways of accomplishing this.  I'd appreciate
> feedback on these, or suggestions for a better alternative.
>
> Option 1.  Change the rewrite expression for multAssign such that it
> uses custom Java code to create a new tree node with the desired
> structure.
>
> Option 2.  Create a tree grammar with output=AST that performs the
> desired transformation.  However if I understand correctly, this is
> only available in antlr 3.1.  Is that correct, and is it available
> somewhere?  And will I end up doing something like Option 1 in this
> grammar anyway?
>
> Thanks,
> Tom.
>
> grammar MultAssign;
>
> options {
>         output = AST;
> }
>
> tokens {
>         ASSIGN = '=';
>         LIST;
> }
>
> multAssign
>         :       assignList ASSIGN assignList
>         ->      ^(ASSIGN assignList assignList)
>         ;
>
> assignList
>         :       IDENT ( ',' IDENT )*
>         ->      ^(LIST IDENT+)
>         ;
>
> IDENT
>    :  ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
>    ;
>
> WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
>     ;
>

From r.mark.volkmann at gmail.com  Fri Dec  7 12:22:52 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 7 Dec 2007 14:22:52 -0600
Subject: [antlr-interest] ANTLRWorks inserting tabs
Message-ID: <f0fcc6820712071222h4dc1346anc7c57354fa65e35a@mail.gmail.com>

Is there a way to configure ANTLRWorks so it doesn't insert tabs while
editing a grammar?
It often does this before and after the colon and vertical bar
characters in rules.

-- 
R. Mark Volkmann
Object Computing, Inc.

From harsha.nagesh at credit-suisse.com  Fri Dec  7 12:59:17 2007
From: harsha.nagesh at credit-suisse.com (Nagesh, Harsha)
Date: Fri, 7 Dec 2007 15:59:17 -0500
Subject: [antlr-interest] parser in javascript
Message-ID: <2C28FF0D4B055343B1AEFFE32812310DE6968C@enyc12p32001.corpny.csfb.com>


Can antlr generate a parser in javascript for a given grammar ?

==============================================================================
Please access the attached hyperlink for an important electronic communications disclaimer: 

http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
==============================================================================


From antlr at mirality.co.nz  Fri Dec  7 13:02:21 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 08 Dec 2007 10:02:21 +1300
Subject: [antlr-interest] Cannot understand why interpreter accepts bad
 input...
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EB5CECA@extonpo1.bentley. com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
	<20071207082246.52A5811EBA7@www.antlr.org>
	<EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
	<2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>
	<2ea6ad20712070502t23148bfata0c1d40ae5501514@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CECA@extonpo1.bentley.com>
Message-ID: <20071207210758.0ED5011EAC0@www.antlr.org>

At 03:38 8/12/2007, Bern.McCarty at bentley.com wrote:
>I'm really struggling with trying to use the AntlrWorks 
>interpreter and greatly appreciate any help I can get.  The first 
>grammer below does NOT require Gavin's trick of defining a 
>"IllegalChar: .;" rule in order to get a NoViableAltException 
>when feeding bad input like "a" into the interpreter.

'Twasn't my trick; it was G.R. who suggested it.

Incidentally, when I tried your original grammar (without 
modification) it did indeed generate an error on the console.  No 
tricks required.

Note that the error doesn't appear in the AST diagram; it appears 
in the Output window.  This is because it occurs at lexing 
time.  By adding a catch-all rule like the above you're moving the 
error to occur at parsing time instead (since your parser grammer 
doesn't accept IllegalChar anywhere), which is why the error 
appears differently.


Personally I've got mixed feelings about the auto-error-recovery 
in ANTLR.  In many cases I'd rather it just instantly aborted any 
time it didn't like what it saw, but I can see the merit in 
continuing on and doing the best it can (if nothing else, it lets 
you see several errors in a row).  In any case you can override 
the lexer's error-handling behaviour to do whatever you want 
(though note that this won't affect the interpreter).


From antlr at mirality.co.nz  Fri Dec  7 12:55:00 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 08 Dec 2007 09:55:00 +1300
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <47596E8B.5030109@jazillian.com>
References: <47584E15.1000606@Yahoo.com>
	<b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
	<47596E8B.5030109@jazillian.com>
Message-ID: <20071207211023.91CFB11EBAE@www.antlr.org>

At 05:02 8/12/2007, Andy Tripp wrote:
>On the other hand...one approach I've thought about would be to 
>use programming-by-example.
>You feed your magic tool sets of examples: "Here is a program, 
>and here is the AST that
>it should produce". If you can make your set of examples 
>exhaustive (i.e. cover all language constructs), that seems like 
>it might work.
>
>So the tool could store its grammar in whatever format it wants 
>(ANTLR or something completely different), but you'd essentially 
>define your parser not as a traditional BNF-style grammar, but 
>rather as a set of example (input, AST) pairs.

That'd be pretty cool.  Although I suspect in practice you'd 
probably need to have an (input, token stream, AST) triplet (or 
sets of input=>tokens and sets of tokens=>ASTs).  Going straight 
from input to AST is probably a bit too hard :)

Actually even the first half of that (input => token stream) would 
be a big help in many cases.  Since ANTLR doesn't have much 
debugging support for lexers, it's easy to accidentally break 
something in weird ways (especially if you don't have unit tests).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071208/5c3cbe82/attachment.html 

From Bern.McCarty at bentley.com  Fri Dec  7 13:11:51 2007
From: Bern.McCarty at bentley.com (Bern.McCarty at bentley.com)
Date: Fri, 7 Dec 2007 16:11:51 -0500
Subject: [antlr-interest] Cannot understand why interpreter accepts bad
	input...
In-Reply-To: <200712072107.lB7L7wWP017973@mx4.bentley.com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
	<20071207082246.52A5811EBA7@www.antlr.org>
	<EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
	<2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>
	<2ea6ad20712070502t23148bfata0c1d40ae5501514@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CECA@extonpo1.bentley.com>
	<200712072107.lB7L7wWP017973@mx4.bentley.com>
Message-ID: <EE8C2D034A022444B87B1332B39781050EB91F3E@extonpo1.bentley.com>

>>> Incidentally, when I tried your original grammar (without
modification) it did indeed generate an error on the console.  No tricks
required.

When you ran it in the debugger, yes, but not when merely using the
interpreter.  Whereas in my last message the first grammer provides an
indication of an exception when run in the interpreter, while the 2nd
grammar does not.  And I have no understanding of why this is.

I'm concluding that I should not prototype/modify/develop my grammar by
doing edit/interpret cycles.  It is just messing me up.  I guess I have
to use edit/debug instead.

-----Original Message-----
From: Gavin Lambert [mailto:antlr at mirality.co.nz] 
Sent: Friday, December 07, 2007 4:02 PM
To: Bern McCarty; antlr-interest at antlr.org
Subject: Re: [antlr-interest] Cannot understand why interpreter accepts
bad input...

At 03:38 8/12/2007, Bern.McCarty at bentley.com wrote:
>I'm really struggling with trying to use the AntlrWorks 
>interpreter and greatly appreciate any help I can get.  The first 
>grammer below does NOT require Gavin's trick of defining a 
>"IllegalChar: .;" rule in order to get a NoViableAltException 
>when feeding bad input like "a" into the interpreter.

'Twasn't my trick; it was G.R. who suggested it.

Incidentally, when I tried your original grammar (without 
modification) it did indeed generate an error on the console.  No 
tricks required.

Note that the error doesn't appear in the AST diagram; it appears 
in the Output window.  This is because it occurs at lexing 
time.  By adding a catch-all rule like the above you're moving the 
error to occur at parsing time instead (since your parser grammer 
doesn't accept IllegalChar anywhere), which is why the error 
appears differently.


Personally I've got mixed feelings about the auto-error-recovery 
in ANTLR.  In many cases I'd rather it just instantly aborted any 
time it didn't like what it saw, but I can see the merit in 
continuing on and doing the best it can (if nothing else, it lets 
you see several errors in a row).  In any case you can override 
the lexer's error-handling behaviour to do whatever you want 
(though note that this won't affect the interpreter).


From antlr at mirality.co.nz  Fri Dec  7 13:29:58 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 08 Dec 2007 10:29:58 +1300
Subject: [antlr-interest] Cannot understand why interpreter accepts bad
 input...
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EB91F3E@extonpo1.bentley. com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
	<20071207082246.52A5811EBA7@www.antlr.org>
	<EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
	<2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>
	<2ea6ad20712070502t23148bfata0c1d40ae5501514@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CECA@extonpo1.bentley.com>
	<200712072107.lB7L7wWP017973@mx4.bentley.com>
	<EE8C2D034A022444B87B1332B39781050EB91F3E@extonpo1.bentley.com>
Message-ID: <20071207213250.96B3511EB75@www.antlr.org>

At 10:11 8/12/2007, Bern.McCarty at bentley.com wrote:
 >I'm concluding that I should not prototype/modify/develop my
 >grammar by doing edit/interpret cycles.  It is just messing me
 >up.  I guess I have to use edit/debug instead.

I've never had much confidence in the interpreter; it always seems 
to give me weird results.

Also, when you're working at the lexer level (which includes 
adding quoted literals in a combined parser) neither ANTLR nor 
ANTLRworks provides much useful debugging assistance.

At this stage you're much better off writing a standalone test 
harness that:
   - at minimum, takes an input file/string and dumps the 
resulting token stream to an output file (or the screen) for 
manual inspection.
   - ideally, takes a series of input files/strings and verifies 
the output of the lexer matches the corresponding "correct" 
output; ie. a set of unit tests.


From antlr at jazillian.com  Fri Dec  7 13:53:56 2007
From: antlr at jazillian.com (Andy Tripp)
Date: Fri, 07 Dec 2007 16:53:56 -0500
Subject: [antlr-interest] transforming AST nodes
In-Reply-To: <82dc0d190712060737g6683e108ge3ab96fc34f1a6c5@mail.gmail.com>
References: <82dc0d190712060737g6683e108ge3ab96fc34f1a6c5@mail.gmail.com>
Message-ID: <4759C0F4.6060009@jazillian.com>

My advice would be to keep your parsing, tree transformation, and output 
parts of your
program separate.

If this is the only transformation you'll be doing, it's fine to have 
the ANTLR parser do
more than parse - transform the AST. Or to use StringTemplate to do more 
than output
the AST - to output a transformed AST.

But if things get any more complicated, it would be nicer 
architecturally to keep the
AST transformation separate.

And then I'd just write vanilla Java (or whatever language) code to do 
the tree transformation.

Andy
                
       

Tom Smith wrote:
> Hello,
>
> I am seeking advice on good ways to transform the structure of some
> AST nodes.  My example involves translating a language that supports
> multiple assignment into one that does not.  The grammar (shown below)
> parses input of the form:
>
>     a, b = c, d
>
> into
>
>     ^(ASSIGN ^(LIST a b) ^(LIST c d))
>
> However I would like a structure more like:
>
>     ^(LIST ^(ASSIGN a c) ^(ASSIGN b d))
>
> I've considered two ways of accomplishing this.  I'd appreciate
> feedback on these, or suggestions for a better alternative.
>
> Option 1.  Change the rewrite expression for multAssign such that it
> uses custom Java code to create a new tree node with the desired
> structure.
>
> Option 2.  Create a tree grammar with output=AST that performs the
> desired transformation.  However if I understand correctly, this is
> only available in antlr 3.1.  Is that correct, and is it available
> somewhere?  And will I end up doing something like Option 1 in this
> grammar anyway?
>
> Thanks,
> Tom.
>
> grammar MultAssign;
>
> options {
> 	output = AST;
> }
>
> tokens {
> 	ASSIGN = '=';
> 	LIST;
> }
>
> multAssign
> 	:	assignList ASSIGN assignList
> 	->	^(ASSIGN assignList assignList)
> 	;
>
> assignList
> 	:	IDENT ( ',' IDENT )*
> 	->	^(LIST IDENT+)
> 	;
>
> IDENT
>    :  ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$')*
>    ;
>
> WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
>     ;
>
>   


From Austin_Hastings at Yahoo.com  Fri Dec  7 14:02:04 2007
From: Austin_Hastings at Yahoo.com (Austin Hastings)
Date: Fri, 07 Dec 2007 17:02:04 -0500
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <20071207211023.91CFB11EBAE@www.antlr.org>
References: <47584E15.1000606@Yahoo.com>	<b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>	<47596E8B.5030109@jazillian.com>
	<20071207211023.91CFB11EBAE@www.antlr.org>
Message-ID: <4759C2DC.4080307@Yahoo.com>



Gavin Lambert wrote:
> At 05:02 8/12/2007, Andy Tripp wrote:
>> On the other hand...one approach I've thought about would be to use 
>> programming-by-example.
>> You feed your magic tool sets of examples: "Here is a program, and 
>> here is the AST that
>> it should produce". If you can make your set of examples exhaustive 
>> (i.e. cover all language constructs), that seems like it might work.
>>
>> So the tool could store its grammar in whatever format it wants 
>> (ANTLR or something completely different), but you'd essentially 
>> define your parser not as a traditional BNF-style grammar, but rather 
>> as a set of example (input, AST) pairs.
>
> That'd be pretty cool.  Although I suspect in practice you'd probably 
> need to have an (input, token stream, AST) triplet (or sets of 
> input=>tokens and sets of tokens=>ASTs).  Going straight from input to 
> AST is probably a bit too hard 

After thinking about it, I wonder if what I'm really looking for isn't 
just a wizard. Something that would step through the grammar 
specification process, whip up a lexer and a parser, and then stay out 
of the way. Most of the rest of it could be done by differencing with 
existing languages:

What is the purpose of this recognizer: [ compiling | interpreting | 
rewriting | validating ]

Use traditional 'C' identifier tokens? [y/n]
Allow these extra characters *inside* an identifier: [_____]
Allow these extra characters to *start* an identifier: [______]

What operator syntax do you want to use: [C | Fortran | SQL]

What keywords do you want to start with: [C | C++ | Java | Eiffel | SQL 
| Fortran ]

Edit the list of keywords here: [ (big text entry box) ]


This would obviously get more elaborate as more languages were brought 
into the fold, and it would also get more elaborate as more "purposes" 
were added -- possibly to the point of providing tree parsers 
automatically as well.



> Actually even the first half of that (input => token stream) would be 
> a big help in many cases.  Since ANTLR doesn't have much debugging 
> support for lexers, it's easy to accidentally break something in weird 
> ways (especially if you don't have unit tests).

I'm working on that right now. I've got a rewrite of gunit that does 
token stream checking -- that's the string expression thingy I was 
talking about. I've got to actually "go to work" next week, but I'll 
probably have something alpha-ready sometime during or shortly after the 
holidays.

=Austin


From r.mark.volkmann at gmail.com  Fri Dec  7 15:09:05 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 7 Dec 2007 17:09:05 -0600
Subject: [antlr-interest] mismatched tree node
In-Reply-To: <f0fcc6820712071221q11645544v83bcec0779420914@mail.gmail.com>
References: <f0fcc6820712071221q11645544v83bcec0779420914@mail.gmail.com>
Message-ID: <f0fcc6820712071509n35932c82sfc0b3ed4a723ad98@mail.gmail.com>

The problem was that I also had a lexer rule in my lexer/parser
grammar named SIGN that matched '+' and '-' just like the non-lexer
rule in my tree grammar.

On Dec 7, 2007 2:21 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> I'm trying to understand why my tree parser is giving me a "mismatched
> tree node: - expecting <UP>" error.
> Here's the string representation of the simple AST it is processing.
>
> (SCRIPT (FUNCTION f x (POLYNOMIAL (TERM 3 x 2) - (TERM 5 x) + (TERM
> 7))) (FIND f 1))
>
> It doesn't like the minus sign between the first and second TERM. It
> also doesn't like the plus sign between the second and third term.
>
> Here is my tree grammar, stripped down to the bare minimum that will
> reproduce the problem.
>
> tree grammar MathTree;
>
> options {
>   ASTLabelType = CommonTree;
>   tokenVocab = Math;
>   output = template;
> }
>
> @header {
>   package com.ociweb.math;
> }
>
> script: ^(SCRIPT statement*);
>
> statement: ^(FUNCTION name=NAME variable=NAME polynomial);
>
> polynomial: ^(POLYNOMIAL term (sign term)*);
>
> sign:   '+' | '-';
>
> term
>   :     ^(TERM NUMBER)
>   |     ^(TERM NUMBER NAME)
>   |     ^(TERM NAME NUMBER)
>   |     ^(TERM NUMBER NAME NUMBER)
>   ;

-- 
R. Mark Volkmann
Object Computing, Inc.

From harald_m_mueller at gmx.de  Sat Dec  8 02:47:42 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Sat, 08 Dec 2007 11:47:42 +0100
Subject: [antlr-interest] Using a different Tree class
In-Reply-To: <db3e39e10712071113y4728958aq4f81913cf0089f0b@mail.gmail.com>
References: <db3e39e10712071113y4728958aq4f81913cf0089f0b@mail.gmail.com>
Message-ID: <20071208104742.292820@gmx.net>

Hi - 

you must also change the AST node factory - see http://www.antlr.org/wiki/display/ANTLR3/Interfacing+AST+with+Java

ASTLabelType=XQFTTree only changes the *declarations* in the code generated by ANTLR, but not the *behavior* of the AST generation.

Regards
Harald

-------- Original-Nachricht --------
> Datum: Fri, 7 Dec 2007 20:13:51 +0100
> Von: "Andreas Ravnestad" <andreas.ravnestad at gmail.com>
> An: "Antlr Interest" <antlr-interest at antlr.org>
> Betreff: [antlr-interest] Using a different Tree class

> Hi!
> 
> How can I make Antlr use a different Tree class (not CommonTree)?
> 
> Currently I have this in the grammar:
> 
>   grammar XQFT;
>   options {
>       output=AST;
>       ASTLabelType=XQFTTree;
>   }
> 
> Where XQFTTree extends CommonTree. And then, this is the test program:
> 
>   XQFTParser.module_return result = parser.module();
>   XQFTTree tree = (XQFTTree)result.getTree();
> 
> And that will currently produce this error:
> 
> Exception in thread "main" java.lang.ClassCastException:
> org.antlr.runtime.tree.CommonTree cannot be cast to
> no.ntnu.xqft.parse.XQFTTree
>         at no.ntnu.xqft.parse.XQFTParser.module(Unknown Source)
>         at no.ntnu.xqft.test.TreeTest.execute(Unknown Source)
>         at no.ntnu.xqft.test.TreeTest.main(Unknown Source)
> 
> I'm sure I'm just missing a small detail here.
> 
> Thanks,
> Andreas

-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From harald_m_mueller at gmx.de  Sat Dec  8 03:04:47 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Sat, 08 Dec 2007 12:04:47 +0100
Subject: [antlr-interest] Step-by-Step parsing
In-Reply-To: <dc6c53790712070709q50f37d42m5b412be9835ca99a@mail.gmail.com>
References: <dc6c53790712070709q50f37d42m5b412be9835ca99a@mail.gmail.com>
Message-ID: <20071208110447.292870@gmx.net>

Hi - 

this is what is called "(computation of) follow sets" in parsing terminology; and ANTLR internally certainly does this - however, as far as I(!) know and have seen in the generated code, not for public use, but for its internal code generation only; with ANTLR3's LL(*) analysis, I would guess that at times it does not even compute good(?) old "follow sets", but "follow graphs", which are not that useful for you.

I (I!) would start that project from scratch - and restrict myself to a simple grammar definition syntax, not ANTLR's full fledged machinery - with e.g. its syntactic predicates, multiple ways to specify tokens (names and strings), additional syntax for AST generation(^) and executable code(nested {...}s) etc. Only when that project starts getting "large," you would/could contribute to ANTLR to make follow sets visible.

Otherwise, you need an "ANTLR internals guru" (e.g. Terence!) who'd show you around the guts of ANTLRs to make the follow-set-interface publicly useable.

Regards
Harald

-------- Original-Nachricht --------
> Datum: Fri, 7 Dec 2007 15:09:26 +0000
> Von: "Pablo H" <paox75 at gmail.com>
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Step-by-Step parsing

> Hi everybody,
> 
> I am newbie in parser generator tools. I have just downloaded antlr and I
> have made some basic examples. I would like to know how to use antlr for
> parsing a grammar step-by-step. My goal is to develop a program that,
> given
> that a particular state of the parsing processing, it returns the list of
> candidate tokens. For example, given that the following grammar:
> 
> S : 'a' A 'c' B ;
> A : ('b')* | 'c' ;
> B : ('d')+ ;
> 
> if the parser has already recognized "abb", calling the function
> getCandidateList() will return "b c".
> 
> May you provide me some hints?
> 
> Thank very much in advance

-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From harald_m_mueller at gmx.de  Sat Dec  8 03:08:45 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Sat, 08 Dec 2007 12:08:45 +0100
Subject: [antlr-interest] Stuck with parser & tree grammar
In-Reply-To: <2ea6ad20712070404s6aea6941pca597e710de4605c@mail.gmail.com>
References: <2ea6ad20712070404s6aea6941pca597e710de4605c@mail.gmail.com>
Message-ID: <20071208110845.292830@gmx.net>

Hi -
Just a guess (without ever having done that myself): Maybe there has to be one (last) condition-less rewrite; so if you drop the {BinaryOp==Divide}?, it might work ... sorry if I'm compeltely off here.
Regards
Harald
-------- Original-Nachricht --------
> Datum: Fri, 7 Dec 2007 13:04:25 +0100
> Von: "G R" <relationalalgebra at gmail.com>
> An: "antlr-interest Interest" <antlr-interest at antlr.org>
> Betreff: [antlr-interest] Stuck with parser & tree grammar

> Hi all!
> I'm still trying to translate relational algebra into SQL.
> I used to some problems with my grammar, so I decide to change it into a
> LL(1) grammar.
> So, a relational algebra query can be describe like this :
> 
> raExpr
> :    raQuery^
> |    RelationName^;
> 
> raQuery
> :    project^
> |    select^
> |    rename^
> |    binaryExpr^;
> 
> binaryExpr
> :    r1=relation (BinaryOp r2=relation
> |     LeftBrack a1=AttributeName RightBrack Join r2=relation LeftBrack
> a2=AttributeName RightBrack)
>     ->{$BinaryOp!=null}?^(BinaryOp $r1 $r2)
>     ->^(Join ^(Left $r1 $a1) ^(Right $r2 $a2));
> 
> relation
> :    LeftParent raQuery RightParent
>     ->^(raQuery)
> |    RelationName
>     ->^(RelationName);
> 
> As you can see, I'm trying to make possible input like :
> relationName1 UNION relationName2
> Or
> relationName1[AttributeName1] JOIN relationName2[AttributeName2]
> 
> Using this grammar, this is ok : my AST looks good. Using previous inputs,
> I
> got the following AST :
> (UNION relationName1 relationName2)
> Or
> (Join (Left relationName1, AttributeName1) (Right relationName2,
> AttributeName2))
> 
> The problem is in the tree grammar. I don't know how to deal with the rule
> binaryExpr.
> I've try this :
> binaryExpr
> :    ^(BinaryOp r1=relation r2=relation)
>         -> {BinaryOp==Union}? Union(left={$r1.st}, right={$r2.st})
>         -> {BinaryOp==Intersect}? Intersect(left={$r1.st}, right={$r2.st})
>         -> {BinaryOp==Difference}? Difference(left={$r1.st},
> right={$r2.st})
>         -> {BinaryOp==Divide}? Divide(left={$r1.st}, right={$r2.st})
> |    ^(Join ^(Left r1=relation a1=AttributeName) ^(Right r2=relation
> a2=AttributeName))
>         -> join(leftRel={$lr.st}, leftAtt={$la.text},
> leftAlias={$lr.alias},
>                         rightRel={$rr.st}, rightAtt={$ra.text},
> rightAlias={$rr.alias});
> 
> But, ANTLR is expecting a REWRITE instead of the optional operator ( | )
> just after the Divide.
> 
> So, my question is : how can I generate my walker using the previous
> parser
> grammar, or What should I do for this to work ?
> 
> Thanks for any help.
> 
> G.R.

-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From harald_m_mueller at gmx.de  Sat Dec  8 03:20:00 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Sat, 08 Dec 2007 12:20:00 +0100
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
References: <47584E15.1000606@Yahoo.com>
	<b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
Message-ID: <20071208112000.292830@gmx.net>

Steve wrote:
> I have a vague
> dream of one day being able to whip up an interpreter for an esoteric
> language in an hour or less...

All the so-called "simple expressions" in languages I had to parse in the last 15 years were different - not in intent, but because many "language designers" have no idea about what they do and hence introduce subtle or not so subtle "impossibilities" into their languages. Not even C and C# have the same "simple expressions" - e.g.,

   (T) -a

might be a cast expression in C, but never in C#, because they changed the language only a very tiny bit to remove the old "lexical hack." (I hope I did not mess up that example - I did not look intot the reference when I wrote it ...).
I do not know whether Smalltalk is an "esoteric language" in your terminology, but there

   3 + 4 * 5

equals 35 (because method calling is defined like that!).

Last (but not least??), writing the expression part of a language is often a good "entry point" into the first unit tests that have(!!!!!) to be written for any grammar; and I think what you save up front will haunt you later when you get to the intricacies of a language ...

Just be 2 cents (as I said, from some experience with nasty languages ... parsing of which earned me some money, BTW :-) ).

Regards
Harald

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger

From jaluber at gmx.de  Sat Dec  8 03:35:04 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 08 Dec 2007 12:35:04 +0100
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <20071208112000.292830@gmx.net>
References: <47584E15.1000606@Yahoo.com>	<b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
	<20071208112000.292830@gmx.net>
Message-ID: <475A8168.9090206@gmx.de>

Harald Mueller wrote:
> Steve wrote:
>> I have a vague
>> dream of one day being able to whip up an interpreter for an esoteric
>> language in an hour or less...
> 
> All the so-called "simple expressions" in languages I had to parse in the last 15 years were different - not in intent, but because many "language designers" have no idea about what they do and hence introduce subtle or not so subtle "impossibilities" into their languages. Not even C and C# have the same "simple expressions" - e.g.,
> 
>    (T) -a
> 
> might be a cast expression in C, but never in C#, because they changed the language only a very tiny bit to remove the old "lexical hack." (I hope I did not mess up that example - I did not look intot the reference when I wrote it ...).

Actually, this is wrong.

"Cast expressions:

A cast_expression is used to explicitly convert an expression to a given
type.

cast_expression
   :    '( ' type ')'unary_expression
   ;

A cast_expression of the form (T)E, where T is a type and E is a
unary_expression, performs an explicit conversion (?6.2) of the value of
E to type T. If no explicit conversion exists from E to T, a
compile-time error occurs. Otherwise, the result is the value produced
by the explicit conversion. The result is always classified as a value,
even if E denotes a variable.

The grammar for a cast_expression leads to certain syntactic
ambiguities. For example, the expression (x)?y could either be
interpreted as a cast_expression (a cast of ?y to type x) or as an
additive_expression combined with a parenthesized_expression (which
computes the value x ? y).

To resolve cast_expression ambiguities, the following rule exists: A
sequence of one or more tokens (?2.3.3) enclosed in parentheses is
considered the start of a cast_expression only if at least one of the
following are true:

? The sequence of tokens is correct grammar for a type, but not for an
expression.

? The sequence of tokens is correct grammar for a type, and the token
immediately following the closing parentheses is the token ?~?, the
token ?!?, the token ?(?, an identifier (?2.4.1), a literal (?2.4.4), or
any keyword (?2.4.3) except as and is.

The term ?correct grammar? above means only that the sequence of tokens
must conform to the particular grammatical production. It specifically
does not consider the actual meaning of any constituent identifiers. For
example, if x and y are identifiers, then x.y is correct grammar for a
type, even if x.y doesn?t actually denote a type.

>From the disambiguation rule it follows that, if x and y are
identifiers, (x)y, (x)(y), and (x)(-y) are cast_expressions, but (x)-y
is not, even if x identifies a type. However, if x is a keyword that
identifies a predefined type (such as int), then all four forms are
cast_expressions (because such a keyword could not possibly be an
expression by itself)."

At least this doesn't require a lexical hack.

> Last (but not least??), writing the expression part of a language is often a good "entry point" into the first unit tests that have(!!!!!) to be written for any grammar; and I think what you save up front will haunt you later when you get to the intricacies of a language ...

How would you do unit tests with ANTLR? I'm not sure how I can realize
them here.

Johannes

From antlr at mirality.co.nz  Sat Dec  8 04:09:44 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sun, 09 Dec 2007 01:09:44 +1300
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <475A8168.9090206@gmx.de>
References: <47584E15.1000606@Yahoo.com>
	<b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
	<20071208112000.292830@gmx.net> <475A8168.9090206@gmx.de>
Message-ID: <20071208121046.1188211EB4B@www.antlr.org>

At 00:35 9/12/2007, Johannes Luber wrote:
 >How would you do unit tests with ANTLR? I'm not sure how I can
 >realize them here.

Like any other class -- you test that given certain input, it 
produces specific output.

In my view the most important thing to unit test is the lexer, 
since that's often the most brittle component and ANTLR doesn't 
give you as much debugging help with it -- combined with at times 
some rather odd decision making, it's even more important.  All 
you need to test there is that given certain strings as input, the 
lexer produces specific token streams.  (You could test only the 
type and order of tokens, but for a comprehensive test it ought to 
verify that each token contains the correct data as well).

Unit testing the parser may be more complicated depending on how 
it's written.  If it's generating an AST or a StringTemplate, then 
again you can just test the generated output against what you're 
expecting.  If it's executing actions directly, then you'll need 
to test the consequences of those actions, whether "live" or by 
mocking it out through an interface.

You might want to have a look at gUnit.  I haven't used it myself 
but you might find it helpful.


From relationalalgebra at gmail.com  Sat Dec  8 04:58:24 2007
From: relationalalgebra at gmail.com (G R)
Date: Sat, 8 Dec 2007 13:58:24 +0100
Subject: [antlr-interest] Stuck with parser & tree grammar
In-Reply-To: <20071208110845.292830@gmx.net>
References: <2ea6ad20712070404s6aea6941pca597e710de4605c@mail.gmail.com>
	<20071208110845.292830@gmx.net>
Message-ID: <2ea6ad20712080458p2872ff69t2dfa6f62df90d6b0@mail.gmail.com>

Just forget this mail.
I've been able to get rid of this attributes that was harassing my life and
my grammar :-)
Thanks for help indeed.

G.R.

2007/12/8, Harald Mueller <harald_m_mueller at gmx.de>:
>
> Hi -
> Just a guess (without ever having done that myself): Maybe there has to be
> one (last) condition-less rewrite; so if you drop the {BinaryOp==Divide}?,
> it might work ... sorry if I'm compeltely off here.
> Regards
> Harald
> -------- Original-Nachricht --------
> > Datum: Fri, 7 Dec 2007 13:04:25 +0100
> > Von: "G R" <relationalalgebra at gmail.com>
> > An: "antlr-interest Interest" <antlr-interest at antlr.org>
> > Betreff: [antlr-interest] Stuck with parser & tree grammar
>
> > Hi all!
> > I'm still trying to translate relational algebra into SQL.
> > I used to some problems with my grammar, so I decide to change it into a
> > LL(1) grammar.
> > So, a relational algebra query can be describe like this :
> >
> > raExpr
> > :    raQuery^
> > |    RelationName^;
> >
> > raQuery
> > :    project^
> > |    select^
> > |    rename^
> > |    binaryExpr^;
> >
> > binaryExpr
> > :    r1=relation (BinaryOp r2=relation
> > |     LeftBrack a1=AttributeName RightBrack Join r2=relation LeftBrack
> > a2=AttributeName RightBrack)
> >     ->{$BinaryOp!=null}?^(BinaryOp $r1 $r2)
> >     ->^(Join ^(Left $r1 $a1) ^(Right $r2 $a2));
> >
> > relation
> > :    LeftParent raQuery RightParent
> >     ->^(raQuery)
> > |    RelationName
> >     ->^(RelationName);
> >
> > As you can see, I'm trying to make possible input like :
> > relationName1 UNION relationName2
> > Or
> > relationName1[AttributeName1] JOIN relationName2[AttributeName2]
> >
> > Using this grammar, this is ok : my AST looks good. Using previous
> inputs,
> > I
> > got the following AST :
> > (UNION relationName1 relationName2)
> > Or
> > (Join (Left relationName1, AttributeName1) (Right relationName2,
> > AttributeName2))
> >
> > The problem is in the tree grammar. I don't know how to deal with the
> rule
> > binaryExpr.
> > I've try this :
> > binaryExpr
> > :    ^(BinaryOp r1=relation r2=relation)
> >         -> {BinaryOp==Union}? Union(left={$r1.st}, right={$r2.st})
> >         -> {BinaryOp==Intersect}? Intersect(left={$r1.st},
> right={$r2.st})
> >         -> {BinaryOp==Difference}? Difference(left={$r1.st},
> > right={$r2.st})
> >         -> {BinaryOp==Divide}? Divide(left={$r1.st}, right={$r2.st})
> > |    ^(Join ^(Left r1=relation a1=AttributeName) ^(Right r2=relation
> > a2=AttributeName))
> >         -> join(leftRel={$lr.st}, leftAtt={$la.text},
> > leftAlias={$lr.alias},
> >                         rightRel={$rr.st}, rightAtt={$ra.text},
> > rightAlias={$rr.alias});
> >
> > But, ANTLR is expecting a REWRITE instead of the optional operator ( | )
> > just after the Divide.
> >
> > So, my question is : how can I generate my walker using the previous
> > parser
> > grammar, or What should I do for this to work ?
> >
> > Thanks for any help.
> >
> > G.R.
>
> --
> GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
> Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071208/979fa8ca/attachment.html 

From relationalalgebra at gmail.com  Sat Dec  8 05:00:38 2007
From: relationalalgebra at gmail.com (G R)
Date: Sat, 8 Dec 2007 14:00:38 +0100
Subject: [antlr-interest] parser in javascript
In-Reply-To: <2C28FF0D4B055343B1AEFFE32812310DE6968C@enyc12p32001.corpny.csfb.com>
References: <2C28FF0D4B055343B1AEFFE32812310DE6968C@enyc12p32001.corpny.csfb.com>
Message-ID: <2ea6ad20712080500i55346c76i213464c300b23197@mail.gmail.com>

No.
http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targets

G.R.

2007/12/7, Nagesh, Harsha <harsha.nagesh at credit-suisse.com>:
>
>
> Can antlr generate a parser in javascript for a given grammar ?
>
>
> ==============================================================================
> Please access the attached hyperlink for an important electronic
> communications disclaimer:
>
> http://www.credit-suisse.com/legal/en/disclaimer_email_ib.html
>
> ==============================================================================
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071208/2e340890/attachment.html 

From harald_m_mueller at gmx.de  Sat Dec  8 10:35:44 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sat, 8 Dec 2007 19:35:44 +0100
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <475A8168.9090206@gmx.de>
Message-ID: <20071208183537.5E17111EAF4@www.antlr.org>

I wrote -

>Not even C and C# have the same "simple expressions" - 
> > e.g.,
> > 
> >    (T) -a
> > 
> > might be a cast expression in C, but never in C#, 
[...]

and Johannes answered

> Actually, this is wrong.

and I say: Huh? - because he cites the C# spec where it says

[...] 
> if x and y are
> identifiers, (x)y, (x)(y), and (x)(-y) are cast_expressions, 
> but (x)-y is not, even if x identifies a type. 

Isn't that exactly what I said?? (in C, if T is declared as a type via
typedef, (T) -a is actually parsed as a cast expression).
But that detail is only important for those C# language lawyers and grammar
writers like you and me ;-) ...

> 
> How would you do unit tests with ANTLR? I'm not sure how I 
> can realize them here.

"unit tests with ANTLR" sounds a little bit wrong, maybe: "unit tests for a
grammar" or "unit tests for a lexer+parser" is the main thing to do ... And
for writing test cases, see e.g. Boris Beizer's "Black Box Testing" - a must
read just to get the "hang of testing" ...

Regards 
Harald


From andreas.ravnestad at gmail.com  Sat Dec  8 10:39:23 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Sat, 8 Dec 2007 19:39:23 +0100
Subject: [antlr-interest] OT: Generating visual representations of a AST
Message-ID: <db3e39e10712081039o2a51d4a2o5b39bff98b3abccb@mail.gmail.com>

Hi!

I've been using qtree+latex to generate visual representations of
AST's, however qtree has some serious limitations as well as
annoyances, so I'm looking for some other way to generate these visual
representations.

My current parser can generate a textual AST representation on any
LISP-like form (root (child1 child2... etc

So, anyone know a good way to generate nice graphics trees? :)

Thanks,
Andreas

From dave at badgers-in-foil.co.uk  Sat Dec  8 10:54:51 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sat, 8 Dec 2007 18:54:51 +0000
Subject: [antlr-interest] OT: Generating visual representations of a AST
In-Reply-To: <db3e39e10712081039o2a51d4a2o5b39bff98b3abccb@mail.gmail.com>
References: <db3e39e10712081039o2a51d4a2o5b39bff98b3abccb@mail.gmail.com>
Message-ID: <20071208185450.GA11289@badgers-in-foil.co.uk>

On Sat, Dec 08, 2007 at 07:39:23PM +0100, Andreas Ravnestad wrote:
> I've been using qtree+latex to generate visual representations of
> AST's, however qtree has some serious limitations as well as
> annoyances, so I'm looking for some other way to generate these visual
> representations.
> 
> My current parser can generate a textual AST representation on any
> LISP-like form (root (child1 child2... etc
> 
> So, anyone know a good way to generate nice graphics trees? :)

I use graphviz,

  http://graphviz.org/


ta,
dave

-- 
http://david.holroyd.me.uk/

From andreas.ravnestad at gmail.com  Sat Dec  8 11:01:18 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Sat, 8 Dec 2007 20:01:18 +0100
Subject: [antlr-interest] OT: Generating visual representations of a AST
In-Reply-To: <20071208185450.GA11289@badgers-in-foil.co.uk>
References: <db3e39e10712081039o2a51d4a2o5b39bff98b3abccb@mail.gmail.com>
	<20071208185450.GA11289@badgers-in-foil.co.uk>
Message-ID: <db3e39e10712081101x16b8b497g6706490b6f3a49a5@mail.gmail.com>

On 12/8/07, David Holroyd <dave at badgers-in-foil.co.uk> wrote:
> On Sat, Dec 08, 2007 at 07:39:23PM +0100, Andreas Ravnestad wrote:
> > I've been using qtree+latex to generate visual representations of
> > AST's, however qtree has some serious limitations as well as
> > annoyances, so I'm looking for some other way to generate these visual
> > representations.
> >
> > My current parser can generate a textual AST representation on any
> > LISP-like form (root (child1 child2... etc
> >
> > So, anyone know a good way to generate nice graphics trees? :)
>
> I use graphviz,
>
>   http://graphviz.org/
>
>
> ta,
> dave
>
> --
> http://david.holroyd.me.uk/
>

Ah yes I was just reading up on it :) Are you generating the code from
toStringTree()?

-Andreas

From yotommy at gmail.com  Sat Dec  8 12:28:09 2007
From: yotommy at gmail.com (Tom Smith)
Date: Sat, 8 Dec 2007 15:28:09 -0500
Subject: [antlr-interest] OT: Generating visual representations of a AST
In-Reply-To: <db3e39e10712081101x16b8b497g6706490b6f3a49a5@mail.gmail.com>
References: <db3e39e10712081039o2a51d4a2o5b39bff98b3abccb@mail.gmail.com>
	<20071208185450.GA11289@badgers-in-foil.co.uk>
	<db3e39e10712081101x16b8b497g6706490b6f3a49a5@mail.gmail.com>
Message-ID: <82dc0d190712081228y720c8f26lc842ecc0d87440cb@mail.gmail.com>

Try using DOTTreeGenerator.

On Dec 8, 2007 2:01 PM, Andreas Ravnestad <andreas.ravnestad at gmail.com> wrote:

> > I use graphviz,
> >
> >   http://graphviz.org/
> >
> >
> > ta,
> > dave
> >
> > --
> > http://david.holroyd.me.uk/
> >
>
> Ah yes I was just reading up on it :) Are you generating the code from
> toStringTree()?
>
> -Andreas
>

From stevagewp at gmail.com  Sat Dec  8 17:36:07 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Sun, 9 Dec 2007 12:36:07 +1100
Subject: [antlr-interest] ANTLRWorks inserting tabs
In-Reply-To: <f0fcc6820712071222h4dc1346anc7c57354fa65e35a@mail.gmail.com>
References: <f0fcc6820712071222h4dc1346anc7c57354fa65e35a@mail.gmail.com>
Message-ID: <b8ceeef70712081736t623abear8be04525418e1fb2@mail.gmail.com>

On 12/8/07, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> Is there a way to configure ANTLRWorks so it doesn't insert tabs while
> editing a grammar?
> It often does this before and after the colon and vertical bar
> characters in rules.

There's one option in File | Preferences | Editor ("Auto-indent ':' in
rule). It still creates tabs when you type a | on a new line though,
for instance.

It would certainly be nice if you could make it definable insert a
number of spaces rather than a tab character. Tabs quickly descend
into chaos if you're moving the file around different editors,
operating systems etc.

Steve

From stevagewp at gmail.com  Sat Dec  8 17:38:58 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Sun, 9 Dec 2007 12:38:58 +1100
Subject: [antlr-interest] Cannot understand why interpreter accepts bad
	input...
In-Reply-To: <EE8C2D034A022444B87B1332B39781050EB91F3E@extonpo1.bentley.com>
References: <EE8C2D034A022444B87B1332B39781050EB5CA89@extonpo1.bentley.com>
	<20071207082246.52A5811EBA7@www.antlr.org>
	<EE8C2D034A022444B87B1332B39781050EB5CC1D@extonpo1.bentley.com>
	<2ea6ad20712070426i644ab849i88e51df92febf830@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CC6D@extonpo1.bentley.com>
	<2ea6ad20712070502t23148bfata0c1d40ae5501514@mail.gmail.com>
	<EE8C2D034A022444B87B1332B39781050EB5CECA@extonpo1.bentley.com>
	<200712072107.lB7L7wWP017973@mx4.bentley.com>
	<EE8C2D034A022444B87B1332B39781050EB91F3E@extonpo1.bentley.com>
Message-ID: <b8ceeef70712081738j5d4be1a5o57d528e56e2ddd95@mail.gmail.com>

On 12/8/07, Bern.McCarty at bentley.com <Bern.McCarty at bentley.com> wrote:
> I'm concluding that I should not prototype/modify/develop my grammar by
> doing edit/interpret cycles.  It is just messing me up.  I guess I have
> to use edit/debug instead.

I reached this conclusion as well. IMHO the interpreter should come
with a big warning that its results are *not* to be trusted. I wasted
several hours before I realised that the interpreter simply doesn't
handle syntactic or semantic predicates *at all*.

And since the debugger works so well, I'm not sure I really see the
point of the interpreter. It's quicker to launch, but the range of
grammars it can correctly handle is so small, it's not usually worth
it.

Steve

From stevagewp at gmail.com  Sat Dec  8 18:54:08 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Sun, 9 Dec 2007 13:54:08 +1100
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <47596E8B.5030109@jazillian.com>
References: <47584E15.1000606@Yahoo.com>
	<b8ceeef70712062130s694a3bsdec3d5b3fac388ee@mail.gmail.com>
	<47596E8B.5030109@jazillian.com>
Message-ID: <b8ceeef70712081854j31d91e26i77635a8ec347109b@mail.gmail.com>

On 12/8/07, Andy Tripp <antlr at jazillian.com> wrote:
>  It does seem like you could get 90% of the way in parsing languages like C,
> C++, Java, and C#
>  with some generic scheme. But in practice,  it turns out to  be  less than
> 10%. That's because
>  a *basic* parser, which covers most of the language, seems like it's 90% of
> the effort, but it's
>  really only 10%. So let's say your *basic* parser covers expressions, flow
> control, and function declarations.
>  Great! Now start on function pointers, templates/generics, operator
> overloading,
>  preprocessor directives, typedef, etc. What's the saying? "In software, the
> first 90% takes 90% of the time,
>  and the last 10% takes the OTHER 90% of the time" :)

Yep, that wouldn't surprise me. However, if the goal is to be able to
handle esoteric languages (particularly where the syntax could be
tweaked) most of these really horrible aspects probably won't be
present. Well, that's my understanding of esoteric languages - odd
syntax, odd semantics, but generally straightforward to parse.

>  Then try it on real-world programs, and you'll be amazed at
>  what strange syntax is actually considered valid (especially in C++). Your
> parser fails, you

C++ is not a language anyone in their right mind would want to try and
parse. Ever. I should have ruled it out.

>  And that's not even mentioning column-based formatting (FORTRAN, COBOL),
>  and constructs within the program that can change how the program should be
> parsed (COBOL).

Those would probably be outside the immedate grouping of languages to
be dealt with.


>  Beyond just successful parsing, there's the issue of creating a reasonable
> AST.
>  As a simple example, the return type of a C/C++ function is optional, but
> you might want
>  the AST to have a return type. So you want to stuff an "int" node in the
> AST during parsing.
>  Or you might want to building symbol tables during parsing.

That doesn't strike me as patricularly remarkable semantics.

>
>  So for any real-world app, you could copy-and-paste some common parts of a
> grammar
>  (such as grabbing the expression-part of a C grammar for use in your Java
> grammar), or
>  you could come up with some fancy generic mechanism. Either way, that work
> is going to
>  be a tiny amount of the total work (say 0.01%) anyway.

I think it'll be more than that...perhaps I'm really thinking in terms
of a rapid prototyping tool, rather than a genuine solution for
building industrial strength parsers.

>  One way to approach this is to compare the C and Java ANTLR grammars.
> You'll see that
>  these apparently similar languages don't have all that much in common in
> their grammars.

Interesting.
>  On the other hand...one approach I've thought about would be to use
> programming-by-example.
>  You feed your magic tool sets of examples: "Here is a program, and here is
> the AST that
>  it should produce". If you can make your set of examples exhaustive (i.e.
> cover all language
>  constructs), that seems like it might work.

Yeah. Or even, "Translate the following pseudo code into your
language." Then the metaparser will know the meaning of your code
without you having to explicitly write the AST.

Steve

From stevagewp at gmail.com  Sat Dec  8 22:06:02 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Sun, 9 Dec 2007 17:06:02 +1100
Subject: [antlr-interest] Out of heap space generating my grammar
Message-ID: <b8ceeef70712082206u1000326ev17a96cbd56d74517@mail.gmail.com>

I got this when attempting to generate the code for my grammar :

----
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
at java.util.HashMap.addEntry(Unknown Source)
at java.util.HashMap.put(Unknown Source)
at org.antlr.stringtemplate.StringTemplate$Aggregate.put(StringTemplate.java:181)
at org.antlr.stringtemplate.StringTemplate.setAttribute(StringTemplate.java:680)
at org.antlr.stringtemplate.StringTemplate.setAttribute(StringTemplate.java:655)
at org.antlr.codegen.CodeGenerator.generateLocalFOLLOW(CodeGenerator.java:581)
at org.antlr.codegen.CodeGenTreeWalker.atom(CodeGenTreeWalker.java:1910)
at org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1641)
at org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
at org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
at org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
at org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
at org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:486)
at org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:333)
at org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)
at org.antlr.Tool.processGrammar(Tool.java:347)
at org.antlr.Tool.process(Tool.java:268)
at org.antlr.Tool.main(Tool.java:70)
Program returned code  : 1
----

I'm running antlrworks like this:

java -Xms256m -Xmx384m -jar o:\dlnew\antlrworks-1.1.5.jar

So there should be enough memory. Obviously something is wrong with my
grammar, but I'm not sure exactly what. I keep running into problems
like this where I add semantic predicates that then seem to cause the
size of the generated code to explode. Can anyone help?

Thanks,
Steve

From stevagewp at gmail.com  Sat Dec  8 22:53:16 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Sun, 9 Dec 2007 17:53:16 +1100
Subject: [antlr-interest] Out of heap space generating my grammar
In-Reply-To: <b8ceeef70712082206u1000326ev17a96cbd56d74517@mail.gmail.com>
References: <b8ceeef70712082206u1000326ev17a96cbd56d74517@mail.gmail.com>
Message-ID: <b8ceeef70712082253w7cd68170of102ecad48723ad9@mail.gmail.com>

On 12/9/07, Steve Bennett <stevagewp at gmail.com> wrote:
> So there should be enough memory. Obviously something is wrong with my
> grammar, but I'm not sure exactly what. I keep running into problems
> like this where I add semantic predicates that then seem to cause the
> size of the generated code to explode. Can anyone help?

Ok, looks like a small error in my code caused the problem. If anyone
wants to see the grammar that caused the heap error, I have saved a
copy.

Steve

From relationalalgebra at gmail.com  Sun Dec  9 09:09:49 2007
From: relationalalgebra at gmail.com (G R)
Date: Sun, 9 Dec 2007 18:09:49 +0100
Subject: [antlr-interest] Another Parser skipping error
Message-ID: <2ea6ad20712090909p46b7d64cg26c9570e5cf8c04d@mail.gmail.com>

Hi all.
Still with my relational algebra grammar, almost everything works fine
except my error recognition.
When I use a correct input but, put some others character at the end, and
then make the input invalid, I, sometimes, get an error (that's what I
want^^), but sometimes not.
Using character that are not define in the lexer will raised an error (a
lexer error then). Everythings Ok here.
 But, when the character is define by my lexer grammar (like '[' that is use
in some parser rules), no error is raised when it should be.

as an example, here is a valid input :
Relation1 \JOIN Relation2

When I use the following input, i got an error (which is normal) :
Relation1 \JOIN Relation2 .
(where the dot is not define in the lexer rules)

But, using this input, non error is raised (whereas it should be)
Relation1 \JOIN Relation2 [
(where the left bracket is define by the rule LeftBrack of the lexer)

Searching the maillinglist, I haven't been able to find any solution to
that. I think Bern McCarty got the same kind of problem with this :
http://groups.google.com/group/il-antlr-interest/browse_thread/thread/85156e277420f8d9

Can anyone give some help ?


G.R.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071209/31c61241/attachment.html 

From ad_cooney at hotmail.com  Sun Dec  9 09:13:51 2007
From: ad_cooney at hotmail.com (Adam Cooney)
Date: Sun, 9 Dec 2007 17:13:51 +0000
Subject: [antlr-interest] Running Antlr-3.0
Message-ID: <BLU124-W26DC744A6B1F3B30708EE7846A0@phx.gbl>


Hi all, 
I recently installed Antlr-3.0 only when I attempt to run a grammar it gives me an error:

C:\antlr-3.0.1>java src.org.antlr.Tool Expr.g
Exception in thread "main" java.lang.NoClassDefFoundError: src/org/antlr/Tool
 
The site says its due to classpath being incorrect, any ideas why the following is wrong because it seems correct to me.
 
.;C:\antlr-3.0.1\lib\antlr-3.0.1.jar; C:\antlr-3.0.1\lib\antlr-2.7.7.jar;C:\antlr-3.0.1\lib\antlr-runtime-3.0.1.jar;C:\antlr-3.0.1\lib\stringtemplate-3.1b1.jar
 
The cmd prompt is set to folder c:\antlr-3.0.1\, which is also where the grammar resides. Any quick help for this really basic (and probably stupidly simple) problem is greatly appreciated.
Thanks
Adam
_________________________________________________________________
Get free emoticon packs and customisation from Windows Live. 
http://www.pimpmylive.co.uk
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071209/ad5bae81/attachment.html 

From relationalalgebra at gmail.com  Sun Dec  9 09:29:26 2007
From: relationalalgebra at gmail.com (G R)
Date: Sun, 9 Dec 2007 18:29:26 +0100
Subject: [antlr-interest] Running Antlr-3.0
In-Reply-To: <BLU124-W26DC744A6B1F3B30708EE7846A0@phx.gbl>
References: <BLU124-W26DC744A6B1F3B30708EE7846A0@phx.gbl>
Message-ID: <2ea6ad20712090929v6a1ef41ao98d82774e8636c94@mail.gmail.com>

Using the classpath, you must just put the path of the directory where your
jar are.
Instead of
C:\antlr-3.0.1\lib\antlr-3.0.1.jar; C:\antlr-3.0.1\lib\antlr-2.7.7.jar
;C:\antlr-3.0.1\lib\antlr-runtime-3.0.1.jar;C:\antlr-
3.0.1\lib\stringtemplate-3.1b1.jar
put ;C:\antlr-3.0.1\lib in your path.

G. R.

2007/12/9, Adam Cooney <ad_cooney at hotmail.com>:
>
>  Hi all,
> I recently installed Antlr-3.0 only when I attempt to run a grammar it
> gives me an error:
>  C:\antlr-3.0.1>java src.org.antlr.Tool Expr.g
> Exception in thread "main" java.lang.NoClassDefFoundError:
> src/org/antlr/Tool
>
> The site says its due to classpath being incorrect, any ideas why the
> following is wrong because it seems correct to me.
>
> .;C:\antlr-3.0.1\lib\antlr-3.0.1.jar; C:\antlr-3.0.1\lib\antlr-2.7.7.jar
> ;C:\antlr-3.0.1\lib\antlr-runtime-3.0.1.jar;C:\antlr-
> 3.0.1\lib\stringtemplate-3.1b1.jar
>
> The cmd prompt is set to folder c:\antlr-3.0.1\, which is also where the
> grammar resides. Any quick help for this really basic (and probably stupidly
> simple) problem is greatly appreciated.
>
> Thanks
> Adam
>
> ------------------------------
> Are you the Quizmaster? Play BrainBattle with a friend now!<http://specials.uk.msn.com/brainbattle>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071209/e08cc738/attachment-0001.html 

From relationalalgebra at gmail.com  Sun Dec  9 09:57:41 2007
From: relationalalgebra at gmail.com (G R)
Date: Sun, 9 Dec 2007 18:57:41 +0100
Subject: [antlr-interest] Running Antlr-3.0
In-Reply-To: <BLU124-W53826062EEB3F01E6FCC9846A0@phx.gbl>
References: <BLU124-W26DC744A6B1F3B30708EE7846A0@phx.gbl>
	<2ea6ad20712090929v6a1ef41ao98d82774e8636c94@mail.gmail.com>
	<BLU124-W53826062EEB3F01E6FCC9846A0@phx.gbl>
Message-ID: <2ea6ad20712090957x3f72fd4fp42d2f09353ad8d02@mail.gmail.com>

First try a reboot if you haven't. CLASSPATH with windows is such a crapp...
Secondly, using the maillinglist, when you reply to a message, make it to
antlr-interest at antlr.org without changing the subject ;)

Good luck!

G.R.

2007/12/9, Adam Cooney <ad_cooney at hotmail.com>:
>
>  I changed the classpath to
> ;C:\antlr-3.0.1\lib
>
> Then in command prompt I did:
> C:\antlr-3.0.1\examples-v3\LL-star\
> Followed by:
> java org.antlr.Tool SimpleC.g
>
> And I still get the same damn message:
> C:\antlr-3.0.1\examples-v3\java\LL-star>java org.antlr.Tool SimpleC.g
> Exception in thread "main" java.lang.NoClassDefFoundError: org/antlr/Tool
>
> Makes no sense to me why it wont work. Have also tried doing
> C:\antlr-3.0.1\examples-v3\java\LL-star>set CLASSPATH= C:\antlr-3.0.1\lib;
> C:\antlr-3.0.1\examples-v3\java\LL-star>java org.antlr.Tool SimpleC.g
> Exception in thread "main" java.lang.NoClassDefFoundError: org/antlr/Tool
>
> I know this is just a stupid error somewhere, but it is getting rather
> annoying
>
>
>  ------------------------------
> Date: Sun, 9 Dec 2007 18:29:26 +0100
> From: relationalalgebra at gmail.com
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Running Antlr-3.0
>
> Using the classpath, you must just put the path of the directory where
> your jar are.
> Instead of
> C:\antlr-3.0.1\lib\antlr-3.0.1.jar; C:\antlr-3.0.1\lib\antlr-2.7.7.jar
> ;C:\antlr-3.0.1\lib\antlr-runtime-3.0.1.jar ;C:\antlr-
> 3.0.1\lib\stringtemplate-3.1b1.jar
> put ;C:\antlr-3.0.1\lib in your path.
>
> G. R.
>
> 2007/12/9, Adam Cooney < ad_cooney at hotmail.com>:
>
> Hi all,
> I recently installed Antlr-3.0 only when I attempt to run a grammar it
> gives me an error:
> C:\antlr-3.0.1>java src.org.antlr.Tool Expr.g
> Exception in thread "main" java.lang.NoClassDefFoundError:
> src/org/antlr/Tool
>
> The site says its due to classpath being incorrect, any ideas why the
> following is wrong because it seems correct to me.
>
> .;C:\antlr-3.0.1\lib\antlr-3.0.1.jar; C:\antlr-3.0.1\lib\antlr-2.7.7.jar
> ;C:\antlr-3.0.1\lib\antlr-runtime-3.0.1.jar;C:\antlr-
> 3.0.1\lib\stringtemplate-3.1b1.jar
>
> The cmd prompt is set to folder c:\antlr-3.0.1\, which is also where the
> grammar resides. Any quick help for this really basic (and probably stupidly
> simple) problem is greatly appreciated.
>
> Thanks
> Adam
>
> ------------------------------
> Are you the Quizmaster? Play BrainBattle with a friend now!
> <http://specials.uk.msn.com/brainbattle>
>
>
>
> ------------------------------
> Can you guess the film? Search Charades! <https://www.searchcharades.com>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071209/64f1d649/attachment.html 

From ad_cooney at hotmail.com  Sun Dec  9 10:10:17 2007
From: ad_cooney at hotmail.com (Adam Cooney)
Date: Sun, 9 Dec 2007 18:10:17 +0000
Subject: [antlr-interest] Running Antlr-3.0
In-Reply-To: <2ea6ad20712090957x3f72fd4fp42d2f09353ad8d02@mail.gmail.com>
References: <BLU124-W26DC744A6B1F3B30708EE7846A0@phx.gbl>
	<2ea6ad20712090929v6a1ef41ao98d82774e8636c94@mail.gmail.com>
	<BLU124-W53826062EEB3F01E6FCC9846A0@phx.gbl> 
	<2ea6ad20712090957x3f72fd4fp42d2f09353ad8d02@mail.gmail.com>
Message-ID: <BLU124-W25B1C45DB67C58102C3920846A0@phx.gbl>


Sigh, still doesn't work. I know this is a lot to ask, but can someone really quickly write a step guide to installing this thing.
I've downloaded "antlr-3.0b7.tar.gz", extracted it into the C:\ so its inthe folder
C:\antlr-3.0b7, with the jar files in the folder C:\antlr-3.0b7\lib. I then set the classpath variable to ;C:\antlr-3.0b7\lib   . Then i typed in java org.antlr.Tool and got the error message. So I am quite confused, i checked the tool file and well there isnt a .class file there and there isnt a .class file in any other directory in the org\antlr\ directories, tried compiling them but i get loads of errors so i assume that isn't needed. 


Date: Sun, 9 Dec 2007 18:57:41 +0100From: relationalalgebra at gmail.comTo: ad_cooney at hotmail.com; antlr-interest at antlr.orgSubject: Re: [antlr-interest] Running Antlr-3.0First try a reboot if you haven't. CLASSPATH with windows is such a crapp...Secondly, using the maillinglist, when you reply to a message, make it to antlr-interest at antlr.org without changing the subject ;)Good luck!G.R.
2007/12/9, Adam Cooney <ad_cooney at hotmail.com>: 

I changed the classpath to;C:\antlr-3.0.1\lib Then in command prompt I did:C:\antlr-3.0.1\examples-v3\LL-star\Followed by:java org.antlr.Tool SimpleC.g And I still get the same damn message:C:\antlr-3.0.1\examples-v3\java\LL-star>java org.antlr.Tool SimpleC.gException in thread "main" java.lang.NoClassDefFoundError: org/antlr/Tool Makes no sense to me why it wont work. Have also tried doingC:\antlr-3.0.1\examples-v3\java\LL-star>set CLASSPATH= C:\antlr-3.0.1\lib;C:\antlr-3.0.1\examples-v3\java\LL-star>java org.antlr.Tool SimpleC.gException in thread "main" java.lang.NoClassDefFoundError: org/antlr/Tool I know this is just a stupid error somewhere, but it is getting rather annoying


Date: Sun, 9 Dec 2007 18:29:26 +0100From: relationalalgebra at gmail.comTo: antlr-interest at antlr.orgSubject: Re: [antlr-interest] Running Antlr-3.0 
Using the classpath, you must just put the path of the directory where your jar are.Instead of C:\antlr-3.0.1\lib\antlr-3.0.1.jar; C:\antlr-3.0.1\lib\antlr-2.7.7.jar;C:\antlr-3.0.1\lib\antlr-runtime-3.0.1.jar ;C:\antlr-3.0.1\lib\stringtemplate-3.1b1.jarput ;C:\antlr-3.0.1\lib in your path.G. R.
2007/12/9, Adam Cooney < ad_cooney at hotmail.com>: 

Hi all, I recently installed Antlr-3.0 only when I attempt to run a grammar it gives me an error:
C:\antlr-3.0.1>java src.org.antlr.Tool Expr.gException in thread "main" java.lang.NoClassDefFoundError: src/org/antlr/Tool The site says its due to classpath being incorrect, any ideas why the following is wrong because it seems correct to me.  .;C:\antlr-3.0.1\lib\antlr-3.0.1.jar; C:\antlr-3.0.1\lib\antlr-2.7.7.jar;C:\antlr-3.0.1\lib\antlr-runtime-3.0.1.jar;C:\antlr-3.0.1\lib\stringtemplate-3.1b1.jar The cmd prompt is set to folder c:\antlr-3.0.1\, which is also where the grammar resides. Any quick help for this really basic (and probably stupidly simple) problem is greatly appreciated. ThanksAdam

Are you the Quizmaster? Play BrainBattle with a friend now! 

Can you guess the film? Search Charades!
_________________________________________________________________
Who's friends with who and co-starred in what?
http://www.searchgamesbox.com/celebrityseparation.shtml
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071209/43a17b93/attachment.html 

From rschulz at sonic.net  Sun Dec  9 10:19:03 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Sun, 9 Dec 2007 10:19:03 -0800
Subject: [antlr-interest] Running Antlr-3.0
In-Reply-To: <BLU124-W26DC744A6B1F3B30708EE7846A0@phx.gbl>
References: <BLU124-W26DC744A6B1F3B30708EE7846A0@phx.gbl>
Message-ID: <200712091019.04124.rschulz@sonic.net>

On Sunday 09 December 2007 09:13, Adam Cooney wrote:
> Hi all,
> I recently installed Antlr-3.0 only when I attempt to run a grammar
> it gives me an error:
>
> C:\antlr-3.0.1>java src.org.antlr.Tool Expr.g
> Exception in thread "main" java.lang.NoClassDefFoundError:
> src/org/antlr/Tool

In addition to getting your -classpath or CLASSPATH set propertly, you 
should know that the entry-point class name argument (which you show 
as "src.org.antlr.Tool") does not include "src.". The top-level package 
in which the ANTLR code is found is "org."

(You may or may not know that the recommended package structure for Java 
is to use the domain-wise reversal of the DNS domain name associated 
with the publisher or author of the software. The intention is to 
prevent inadvertent clashes between software originating in different 
projects but used together elsewhere.)


> ...
>
> Adam


Randall Schulz

From antlr at mirality.co.nz  Sun Dec  9 10:37:23 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 10 Dec 2007 07:37:23 +1300
Subject: [antlr-interest] Another Parser skipping error
In-Reply-To: <2ea6ad20712090909p46b7d64cg26c9570e5cf8c04d@mail.gmail.com
 >
References: <2ea6ad20712090909p46b7d64cg26c9570e5cf8c04d@mail.gmail.com>
Message-ID: <20071209183934.4279F11EC4F@www.antlr.org>

At 06:09 10/12/2007, G R wrote:
>When I use a correct input but, put some others character at the 
>end, and then make the input invalid, I, sometimes, get an error 
>(that's what I want^^), but sometimes not.
>Using character that are not define in the lexer will raised an 
>error (a lexer error then). Everythings Ok here.
[...]
>But, using this input, non error is raised (whereas it should be)
>Relation1 \JOIN Relation2 [
>(where the left bracket is define by the rule LeftBrack of the 
>lexer)

You need to make sure that your entrypoint rule ends with EOF.  If 
you don't do this then ANTLR will assume that it doesn't need to 
consume all of the input, so won't object to trailing constructs 
that it doesn't understand. 


From relationalalgebra at gmail.com  Sun Dec  9 11:16:06 2007
From: relationalalgebra at gmail.com (G R)
Date: Sun, 9 Dec 2007 20:16:06 +0100
Subject: [antlr-interest] Another Parser skipping error
In-Reply-To: <475c3666.08e9300a.77f4.ffffbdfeSMTPIN_ADDED@mx.google.com>
References: <2ea6ad20712090909p46b7d64cg26c9570e5cf8c04d@mail.gmail.com>
	<475c3666.08e9300a.77f4.ffffbdfeSMTPIN_ADDED@mx.google.com>
Message-ID: <2ea6ad20712091116m2ed45597oe52170dca943591@mail.gmail.com>

The problem is that with Java, you don't have any end of string char like \0
with C (I know, C don't know strings, just a way to illustrate it).
My input comes from a JTextArea, then I don't know how to define my EOF
token.

Using a ";" is not something I want to do. So I've try to define my input
with the method that takes a char[] and the length of this array (sorry, I'm
not in front of my code, i cannot tell you the name) hopping that the lexer
will parse the entire char[], but this doesn't work.

Any idea how to do this without a ";" ?

Thanks
G.R.


2007/12/9, Gavin Lambert <antlr at mirality.co.nz>:
>
> At 06:09 10/12/2007, G R wrote:
> >When I use a correct input but, put some others character at the
> >end, and then make the input invalid, I, sometimes, get an error
> >(that's what I want^^), but sometimes not.
> >Using character that are not define in the lexer will raised an
> >error (a lexer error then). Everythings Ok here.
> [...]
> >But, using this input, non error is raised (whereas it should be)
> >Relation1 \JOIN Relation2 [
> >(where the left bracket is define by the rule LeftBrack of the
> >lexer)
>
> You need to make sure that your entrypoint rule ends with EOF.  If
> you don't do this then ANTLR will assume that it doesn't need to
> consume all of the input, so won't object to trailing constructs
> that it doesn't understand.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071209/d9feb4c8/attachment.html 

From rschulz at sonic.net  Sun Dec  9 11:23:47 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Sun, 9 Dec 2007 11:23:47 -0800
Subject: [antlr-interest] Another Parser skipping error
In-Reply-To: <2ea6ad20712091116m2ed45597oe52170dca943591@mail.gmail.com>
References: <2ea6ad20712090909p46b7d64cg26c9570e5cf8c04d@mail.gmail.com>
	<475c3666.08e9300a.77f4.ffffbdfeSMTPIN_ADDED@mx.google.com>
	<2ea6ad20712091116m2ed45597oe52170dca943591@mail.gmail.com>
Message-ID: <200712091123.47869.rschulz@sonic.net>

On Sunday 09 December 2007 11:16, G R wrote:
> The problem is that with Java, you don't have any end of string char
> like \0 with C (I know, C don't know strings, just a way to
> illustrate it). My input comes from a JTextArea, then I don't know
> how to define my EOF token.

I forget at the moment, but isn't it necessary to construct some kind of 
java.io.XYZInputStream (or XYZReader) for the ANTLR parser? If so, it 
will generate the necessary end-of-file indication (even if the 
underlying byte or character source is not literally a file).

Perhaps what you're missing is the fact that EOF is built in to ANTLR, 
not something you define or supply. You simply use that built-in 
pseudo-token in your grammar productions where you want to require that 
the complete input has been consumed.


> ...
>
> Thanks
> G.R.


Randall Schulz

From gbr at newtechlaw.com  Sun Dec  9 11:52:53 2007
From: gbr at newtechlaw.com (Gerald B. Rosenberg)
Date: Sun, 09 Dec 2007 11:52:53 -0800
Subject: [antlr-interest] AntlrDT 0.20 Released
Message-ID: <200712091953.lB9Jr5Km020777@tach.newtechlaw.com>


Second beta version of AntlrDT is now available.

Improved Editor features: auto indent and auto edit
Fixed scope and rulecatch handling
Added AntlrWorks launcher
Added preference pages
Added AntlrDT file graphic
Bug fixes

Removed commercial use restrictions.

AntlrDT is an Eclipse 3.3+ plugin implementing a syntax-directed 
Antlr V3+ grammar editor. Includes syntax-highlighting, action block 
folding, full in-editor syntax analysis and problem marking, Outline 
View, and incremental builder.

Details:  http://www.certiv.net/products/antlrdt.html
Download:  http://www.certiv.net/download/downloads.html#antlrdt

Best,
Gerald
----
Gerald B. Rosenberg, Esq.
NewTechLaw
285 Hamilton Avenue, Suite 520
Palo Alto, CA  94301-2576

650.325.2100  (office)  /  650.703.1724  (cell)
650.325.2107  (fax)

www.newtechlaw.com


From parrt at cs.usfca.edu  Sun Dec  9 15:26:29 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 9 Dec 2007 15:26:29 -0800
Subject: [antlr-interest] ANTLRv3 emits literal DOWN instead of
	Token.Down
In-Reply-To: <4754B31B.5090403@cypress.com>
References: <4754B31B.5090403@cypress.com>
Message-ID: <D79CAAE7-B525-40DE-9DC8-8B4D964C828A@cs.usfca.edu>

Hi Kalen,

Well, this is more of a "don't allow ^(...) matching" in a nontree  
parser bug.

TreeParser defines:

	public static final int DOWN = Token.DOWN;

so it will compile no problem.

Adding issue

http://www.antlr.org:8888/browse/ANTLR-198

Ter

On Dec 3, 2007, at 5:53 PM, Kalen Petersen wrote:

> Been using antlr for a few weeks now and it's great, but today I  
> stumbled across this bug.
> The attached grammar produces invalid code in both java and C#  
> targets.  In the lookahead, it emits "DOWN" instead of "Token.Down"  
> as in the recognition stage.  This is on line 37 in  
> DownBugParser.java.
> This is observed with the version of antlr included in ANTLRWorks  
> 1.1.5.
> Thanks,
>
> --Kalen
> grammar DownBug;
> 	
> bug_rule
> 	:   ^('+' bug_rule)
> 	|   '+' bug_rule
> 	|   ZERO
> 	;
>
> ZERO
> 	:	'0'+
> 	;
> 	
> WS	:	'\n' {$channel=HIDDEN;}
> 	;


From jaluber at gmx.de  Sun Dec  9 16:19:58 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 10 Dec 2007 01:19:58 +0100
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <20071208183536.9678gmx1@mp035.gmx.net>
References: <20071208183536.9678gmx1@mp035.gmx.net>
Message-ID: <475C862E.5020500@gmx.de>

Harald M. M?ller wrote:
> I wrote -
> 
>> Not even C and C# have the same "simple expressions" - 
>>> e.g.,
>>>
>>>    (T) -a
>>>
>>> might be a cast expression in C, but never in C#, 
> [...]
> 
> and Johannes answered
> 
>> Actually, this is wrong.
> 
> and I say: Huh? - because he cites the C# spec where it says
> 
> [...] 
>> if x and y are
>> identifiers, (x)y, (x)(y), and (x)(-y) are cast_expressions, 
>> but (x)-y is not, even if x identifies a type. 
> 
> Isn't that exactly what I said?? (in C, if T is declared as a type via
> typedef, (T) -a is actually parsed as a cast expression).
> But that detail is only important for those C# language lawyers and grammar
> writers like you and me ;-) ...

The problem is that you overlook e.g. "(int) -1.0", which is valid
nonetheless.
> 
>> How would you do unit tests with ANTLR? I'm not sure how I 
>> can realize them here.
> 
> "unit tests with ANTLR" sounds a little bit wrong, maybe: "unit tests for a
> grammar" or "unit tests for a lexer+parser" is the main thing to do ... And
> for writing test cases, see e.g. Boris Beizer's "Black Box Testing" - a must
> read just to get the "hang of testing" ...

Interesting - never heard of that book. Will look into that.

Johannes

From r.mark.volkmann at gmail.com  Sun Dec  9 16:26:10 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 9 Dec 2007 18:26:10 -0600
Subject: [antlr-interest] literal apostrophe
Message-ID: <f0fcc6820712091626m55504b47g44339c4c310c9f2d@mail.gmail.com>

How do you specify a literal apostrophe in a grammar. For example, I
want to parse something like this.

f'(x)

I have a rule like this.

function: name '\'' '(' variable ')'

I don't think I'm specifying the literal apostrophe correctly.

-- 
R. Mark Volkmann
Object Computing, Inc.

From stevagewp at gmail.com  Sun Dec  9 16:37:09 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Mon, 10 Dec 2007 11:37:09 +1100
Subject: [antlr-interest] literal apostrophe
In-Reply-To: <f0fcc6820712091626m55504b47g44339c4c310c9f2d@mail.gmail.com>
References: <f0fcc6820712091626m55504b47g44339c4c310c9f2d@mail.gmail.com>
Message-ID: <b8ceeef70712091637k9c8a3ecn317abd1fd1487f31@mail.gmail.com>

On 12/10/07, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> How do you specify a literal apostrophe in a grammar. For example, I
> want to parse something like this.
>
> f'(x)
>
> I have a rule like this.
>
> function: name '\'' '(' variable ')'
>
>
>

That's the correct way. Perhaps another rule involving apostrophes is
conflicting? In that case, perhaps a lexer rule will help:

APOSTROPHE: '\'';

function: name APOSTROPHE ...

Steve

From r.mark.volkmann at gmail.com  Sun Dec  9 19:50:23 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 9 Dec 2007 21:50:23 -0600
Subject: [antlr-interest] using newline for a statement terminator
Message-ID: <f0fcc6820712091950h1e4556ffmda6eb76c6edaa3e8@mail.gmail.com>

I've come to the conclusion that it's difficult to implement a
language with ANTLR where statements are terminated by a newline
character. Hopefully I'm wrong about this and there is a simple
pattern of usage that I'm missing. If you've done this, any hints
would be appreciated.

-- 
R. Mark Volkmann
Object Computing, Inc.

From antlr-interest at codef0x.org  Sun Dec  9 19:54:41 2007
From: antlr-interest at codef0x.org (HJ)
Date: Sun, 9 Dec 2007 22:54:41 -0500 (EST)
Subject: [antlr-interest] Rebuilding Antlr 3.0.1
Message-ID: <29295963.1631197258881843.JavaMail.root@mail.codef0x.org>

I am attempting to follow http://www.antlr.org/wiki/pages/viewpage.action?pageId=732 ('How do I rebuild ANTLR v3?').

There doesn't seem that much to mess up, and yet the build process blows up pretty good.

$ uname -a
Linux pos 2.6.22-14-386 #1 Sun Oct 14 22:36:54 GMT 2007 i686 GNU/Linux

$ java -version
java version "1.7.0"
IcedTea Runtime Environment (build 1.7.0-b21)
IcedTea Client VM (build 1.7.0-b21, mixed mode, sharing)

$ pwd
/home/me/antlr31pre/antlr-3.0.1

$ ant -version
Apache Ant version 1.7.0 compiled on August 29 2007

$ ant build
Buildfile: build.xml

generator-prepare:

generator:

BUILD FAILED
/home/me/antlr31pre/antlr-3.0.1/build.xml:102: The following error occurred while executing this line:
/home/me/antlr31pre/antlr-3.0.1/build.xml:55: Problem: failed to create task or type antlr
Cause: the class org.apache.tools.ant.taskdefs.optional.ANTLR was not found.
        This looks like one of Ant's optional components.
Action: Check that the appropriate optional JAR exists in
        -/usr/share/ant/lib
        -/home/me/.ant/lib
        -a directory added on the command line with the -lib argument

Do not panic, this is a common problem.
The commonest cause is a missing JAR.

This is not a bug; it is a configuration problem


Total time: 0 seconds



I have also tried ant with a flurry of -lib definitions using absolute paths down into the 'antlr-3.0.1/lib' directory which yields the same error.

I've cd'd to 'src' and I've tried the manual javac method as described by the wiki, but javac -classpath N -d . ....., where N is an absolute path to 'antlr-3.0.1/lib' or a colon-separated list of absolute-path .jar files beneath 'antlr-3.0.1/lib', still yields bad results -- where javac seems to be complaining about no org.antlr package or no stringtemplate package; I can't really tell.

Surely I'm missing something simple?

~HJ

From rschulz at sonic.net  Sun Dec  9 19:56:54 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Sun, 9 Dec 2007 19:56:54 -0800
Subject: [antlr-interest] using newline for a statement terminator
In-Reply-To: <f0fcc6820712091950h1e4556ffmda6eb76c6edaa3e8@mail.gmail.com>
References: <f0fcc6820712091950h1e4556ffmda6eb76c6edaa3e8@mail.gmail.com>
Message-ID: <200712091956.54950.rschulz@sonic.net>

On Sunday 09 December 2007 19:50, Mark Volkmann wrote:
> I've come to the conclusion that it's difficult to implement a
> language with ANTLR where statements are terminated by a newline
> character. Hopefully I'm wrong about this and there is a simple
> pattern of usage that I'm missing. If you've done this, any hints
> would be appreciated.

There is no reason that newline character or sequence is any harder to 
use as a statement terminator or separator than any other character.

The problem comes because of the ambiguity that results from not making 
a newline a _mandatory_ terminator, as, say, a semicolon would be. That 
practice is compounded by the typical practice of making semicolon 
allowable but optional.

Personally, as someone currently using Groovy, I don't think it's worth 
it. Semicolons are neither evil nor particularly onerous. But ambiguity 
is the bane of language designers.


Randall Schulz

From antlr-interest at codef0x.org  Sun Dec  9 20:30:18 2007
From: antlr-interest at codef0x.org (HJ)
Date: Sun, 9 Dec 2007 23:30:18 -0500 (EST)
Subject: [antlr-interest] Rebuilding Antlr 3.0.1
In-Reply-To: <29295963.1631197258881843.JavaMail.root@mail.codef0x.org>
Message-ID: <13164314.1691197261018024.JavaMail.root@mail.codef0x.org>

Antlr3 task for Ant (link below) would initially seem like the solution, except that I haven't been able to make it 'go'.
http://antlr.org/share/1169924912745/antlr3-task.zip

I copied antlr3.jar into ~/.ant/lib to no avail, according to the documentation.  Also, the documentation seems to say that I need Antlr version 3.1b1 -- which implies that Antlr3-task is no longer compatible with Antlr version 3.0.1.  Has the ability to build Antlr v3.0.1 already vanished?

~HJ

----- Original Message -----
From: "HJ" <antlr-interest at codef0x.org>
To: antlr-interest at antlr.org
Sent: Sunday, December 9, 2007 10:54:41 PM (GMT-0500) America/New_York
Subject: [antlr-interest] Rebuilding Antlr 3.0.1

I am attempting to follow http://www.antlr.org/wiki/pages/viewpage.action?pageId=732 ('How do I rebuild ANTLR v3?').

There doesn't seem that much to mess up, and yet the build process blows up pretty good.

$ uname -a
Linux pos 2.6.22-14-386 #1 Sun Oct 14 22:36:54 GMT 2007 i686 GNU/Linux

$ java -version
java version "1.7.0"
IcedTea Runtime Environment (build 1.7.0-b21)
IcedTea Client VM (build 1.7.0-b21, mixed mode, sharing)

$ pwd
/home/me/antlr31pre/antlr-3.0.1

$ ant -version
Apache Ant version 1.7.0 compiled on August 29 2007

$ ant build
Buildfile: build.xml

generator-prepare:

generator:

BUILD FAILED
/home/me/antlr31pre/antlr-3.0.1/build.xml:102: The following error occurred while executing this line:
/home/me/antlr31pre/antlr-3.0.1/build.xml:55: Problem: failed to create task or type antlr
Cause: the class org.apache.tools.ant.taskdefs.optional.ANTLR was not found.
        This looks like one of Ant's optional components.
Action: Check that the appropriate optional JAR exists in
        -/usr/share/ant/lib
        -/home/me/.ant/lib
        -a directory added on the command line with the -lib argument

Do not panic, this is a common problem.
The commonest cause is a missing JAR.

This is not a bug; it is a configuration problem


Total time: 0 seconds



I have also tried ant with a flurry of -lib definitions using absolute paths down into the 'antlr-3.0.1/lib' directory which yields the same error.

I've cd'd to 'src' and I've tried the manual javac method as described by the wiki, but javac -classpath N -d . ....., where N is an absolute path to 'antlr-3.0.1/lib' or a colon-separated list of absolute-path .jar files beneath 'antlr-3.0.1/lib', still yields bad results -- where javac seems to be complaining about no org.antlr package or no stringtemplate package; I can't really tell.

Surely I'm missing something simple?

~HJ


From pink at odahoda.de  Sun Dec  9 21:54:06 2007
From: pink at odahoda.de (Benjamin Niemann)
Date: Sun, 09 Dec 2007 21:54:06 -0800
Subject: [antlr-interest] Rebuilding Antlr 3.0.1
In-Reply-To: <29295963.1631197258881843.JavaMail.root@mail.codef0x.org>
References: <29295963.1631197258881843.JavaMail.root@mail.codef0x.org>
Message-ID: <fjika0$qfc$1@ger.gmane.org>

Hi HJ,

ant needs the antlr plugin, that is for antlr v2, not v3. For Debian 
this is part of the ant-optional package - other distributions might 
have a similar package.

HTH

HJ wrote:
> I am attempting to follow http://www.antlr.org/wiki/pages/viewpage.action?pageId=732 ('How do I rebuild ANTLR v3?').
> 
> There doesn't seem that much to mess up, and yet the build process blows up pretty good.
> 
> $ uname -a
> Linux pos 2.6.22-14-386 #1 Sun Oct 14 22:36:54 GMT 2007 i686 GNU/Linux
> 
> $ java -version
> java version "1.7.0"
> IcedTea Runtime Environment (build 1.7.0-b21)
> IcedTea Client VM (build 1.7.0-b21, mixed mode, sharing)
> 
> $ pwd
> /home/me/antlr31pre/antlr-3.0.1
> 
> $ ant -version
> Apache Ant version 1.7.0 compiled on August 29 2007
> 
> $ ant build
> Buildfile: build.xml
> 
> generator-prepare:
> 
> generator:
> 
> BUILD FAILED
> /home/me/antlr31pre/antlr-3.0.1/build.xml:102: The following error occurred while executing this line:
> /home/me/antlr31pre/antlr-3.0.1/build.xml:55: Problem: failed to create task or type antlr
> Cause: the class org.apache.tools.ant.taskdefs.optional.ANTLR was not found.
>         This looks like one of Ant's optional components.
> Action: Check that the appropriate optional JAR exists in
>         -/usr/share/ant/lib
>         -/home/me/.ant/lib
>         -a directory added on the command line with the -lib argument
> 
> Do not panic, this is a common problem.
> The commonest cause is a missing JAR.
> 
> This is not a bug; it is a configuration problem
> 
> 
> Total time: 0 seconds
> 
> 
> 
> I have also tried ant with a flurry of -lib definitions using absolute paths down into the 'antlr-3.0.1/lib' directory which yields the same error.
> 
> I've cd'd to 'src' and I've tried the manual javac method as described by the wiki, but javac -classpath N -d . ....., where N is an absolute path to 'antlr-3.0.1/lib' or a colon-separated list of absolute-path .jar files beneath 'antlr-3.0.1/lib', still yields bad results -- where javac seems to be complaining about no org.antlr package or no stringtemplate package; I can't really tell.
> 
> Surely I'm missing something simple?
> 
> ~HJ
> 


From harald_m_mueller at gmx.de  Sun Dec  9 23:34:32 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Mon, 10 Dec 2007 08:34:32 +0100
Subject: [antlr-interest] NQOT: Grammar meta-programming
In-Reply-To: <475C862E.5020500@gmx.de>
References: <20071208183536.9678gmx1@mp035.gmx.net> <475C862E.5020500@gmx.de>
Message-ID: <20071210073432.18420@gmx.net>

Johannes wrote:

> Harald M. M?ller wrote:
> > I wrote -
> > 
> >> Not even C and C# have the same "simple expressions" - 
> >>> e.g.,
> >>>
> >>>    (T) -a
> >>>
> >>> might be a cast expression in C, but never in C#, 
> > [...]
> > 
> > and Johannes answered
> > 
> >> Actually, this is wrong.
> > 
> > and I say: Huh? - 
and he says:
> 
> The problem is that you overlook e.g. "(int) -1.0", which is valid
> nonetheless.

Ah - so much for precise examples :-) I meant T and a to be identifiers, i.e. the example was meant to be a real *example*, not some generic thing where T could also be int or the like. The C# spec at exactly the place cited is careful enough: It says explicitly "If x and y are identifiers, ..." - I forgot this.

Lesson to be learned: Specify examples better :-)

Regards
Harald


-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From relationalalgebra at gmail.com  Sun Dec  9 23:43:32 2007
From: relationalalgebra at gmail.com (G R)
Date: Mon, 10 Dec 2007 08:43:32 +0100
Subject: [antlr-interest] Another Parser skipping error
In-Reply-To: <200712091123.47869.rschulz@sonic.net>
References: <2ea6ad20712090909p46b7d64cg26c9570e5cf8c04d@mail.gmail.com>
	<475c3666.08e9300a.77f4.ffffbdfeSMTPIN_ADDED@mx.google.com>
	<2ea6ad20712091116m2ed45597oe52170dca943591@mail.gmail.com>
	<200712091123.47869.rschulz@sonic.net>
Message-ID: <2ea6ad20712092343p190a4f76o79e0c344f441a113@mail.gmail.com>

Ok, I didn't know that EOF was an ANTLR define token.
Thank for your help, this works fine now :-)

G.R.

2007/12/9, Randall R Schulz <rschulz at sonic.net>:
>
> On Sunday 09 December 2007 11:16, G R wrote:
> > The problem is that with Java, you don't have any end of string char
> > like \0 with C (I know, C don't know strings, just a way to
> > illustrate it). My input comes from a JTextArea, then I don't know
> > how to define my EOF token.
>
> I forget at the moment, but isn't it necessary to construct some kind of
> java.io.XYZInputStream (or XYZReader) for the ANTLR parser? If so, it
> will generate the necessary end-of-file indication (even if the
> underlying byte or character source is not literally a file).
>
> Perhaps what you're missing is the fact that EOF is built in to ANTLR,
> not something you define or supply. You simply use that built-in
> pseudo-token in your grammar productions where you want to require that
> the complete input has been consumed.
>
>
> > ...
> >
> > Thanks
> > G.R.
>
>
> Randall Schulz
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071210/5a3ceb69/attachment-0001.html 

From paox75 at gmail.com  Mon Dec 10 05:28:24 2007
From: paox75 at gmail.com (Pablo H)
Date: Mon, 10 Dec 2007 13:28:24 +0000
Subject: [antlr-interest] Step-by-Step parsing
In-Reply-To: <20071208110447.292870@gmx.net>
References: <dc6c53790712070709q50f37d42m5b412be9835ca99a@mail.gmail.com>
	<20071208110447.292870@gmx.net>
Message-ID: <dc6c53790712100528w67e57c3y81b32c1de4117879@mail.gmail.com>

Thank you Harald !

On Dec 8, 2007 11:04 AM, Harald Mueller <harald_m_mueller at gmx.de> wrote:

> Hi -
>
> this is what is called "(computation of) follow sets" in parsing
> terminology; and ANTLR internally certainly does this - however, as far as
> I(!) know and have seen in the generated code, not for public use, but for
> its internal code generation only; with ANTLR3's LL(*) analysis, I would
> guess that at times it does not even compute good(?) old "follow sets", but
> "follow graphs", which are not that useful for you.


I (I!) would start that project from scratch - and restrict myself to a
> simple grammar definition syntax, not ANTLR's full fledged machinery - with
> e.g. its syntactic predicates, multiple ways to specify tokens (names and
> strings), additional syntax for AST generation(^) and executable code(nested
> {...}s) etc. Only when that project starts getting "large," you would/could
> contribute to ANTLR to make follow sets visible.
>

I have read about computation of follow sets, and, now, I have a clear idea
of how to obtain them from scratch.

I am starting to consider programming the simplifier parser generator that
you suggest me. I was browsing antlr source code, and I can not find how to
obtain the follow-set interface. However, I have found two classes (
antlr.tool.Interpreter and antlr.tool.RandomPhrase) that might hint me how
to build these follow-sets using antlr. At this time, I am trying to devise
how to adapt both classes to make a step-by-step parsing, although, I do not
know yet if it is possible.

>
> Otherwise, you need an "ANTLR internals guru" (e.g. Terence!) who'd show
> you around the guts of ANTLRs to make the follow-set-interface publicly
> useable.
>

I have seriously lack of ANTLR internals, so any comment, hint,
suggestion... will be well received.

Many thanks

>
> Regards
> Harald
>
> -------- Original-Nachricht --------
> > Datum: Fri, 7 Dec 2007 15:09:26 +0000
> > Von: "Pablo H" <paox75 at gmail.com>
> > An: antlr-interest at antlr.org
> > Betreff: [antlr-interest] Step-by-Step parsing
>
> > Hi everybody,
> >
> > I am newbie in parser generator tools. I have just downloaded antlr and
> I
> > have made some basic examples. I would like to know how to use antlr for
> > parsing a grammar step-by-step. My goal is to develop a program that,
> > given
> > that a particular state of the parsing processing, it returns the list
> of
> > candidate tokens. For example, given that the following grammar:
> >
> > S : 'a' A 'c' B ;
> > A : ('b')* | 'c' ;
> > B : ('d')+ ;
> >
> > if the parser has already recognized "abb", calling the function
> > getCandidateList() will return "b c".
> >
> > May you provide me some hints?
> >
> > Thank very much in advance
>
> --
> Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten
> Browser-Versionen downloaden: http://www.gmx.net/de/go/browser
>



-- 
Pablo Haya Coll
<a href="http://rincon.uam.es/dir?cw=230957031250000">e-card</a>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071210/77e40de5/attachment.html 

From antlr-interest at codef0x.org  Mon Dec 10 06:02:13 2007
From: antlr-interest at codef0x.org (HJ)
Date: Mon, 10 Dec 2007 09:02:13 -0500 (EST)
Subject: [antlr-interest] Rebuilding Antlr 3.0.1
In-Reply-To: <fjika0$qfc$1@ger.gmane.org>
Message-ID: <28990400.1721197295333329.JavaMail.root@mail.codef0x.org>

I was able to satisfy the dependency by installing the ant-optional package in Ubuntu.

As a sidenote, the build process also requires Junit to be installed.

I still can't build 3.0.1 (errors below), but the HEAD (development) tarball downloaded yesterday builds just fine, and that's good enough for me.

Cheers,
~HJ

compile:
  [myjavac] Compiling 126 source files to /home/me/antlr31pre/antlr-3.0.1/build/classes
  [myjavac] /home/me/antlr31pre/antlr-3.0.1/codegen/ANTLRLexer.java:61: duplicate class: org.antlr.tool.ANTLRLexer
  [myjavac] public class ANTLRLexer extends antlr.CharScanner implements ANTLRTokenTypes, TokenStream
  [myjavac]        ^
  [myjavac] /home/me/antlr31pre/antlr-3.0.1/codegen/ANTLRParser.java:72: duplicate class: org.antlr.tool.ANTLRParser
  [myjavac] public class ANTLRParser extends antlr.LLkParser       implements ANTLRTokenTypes
  [myjavac]        ^
  [myjavac] /home/me/antlr31pre/antlr-3.0.1/codegen/ANTLRTokenTypes.java:37: duplicate class: org.antlr.tool.ANTLRTokenTypes
  [myjavac] public interface ANTLRTokenTypes {
  [myjavac]        ^
  [myjavac] /home/me/antlr31pre/antlr-3.0.1/codegen/ANTLRTreePrinter.java:52: duplicate class: org.antlr.tool.ANTLRTreePrinter
...
...
...
(many more errors)


From yotommy at gmail.com  Mon Dec 10 07:50:44 2007
From: yotommy at gmail.com (Tom Smith)
Date: Mon, 10 Dec 2007 10:50:44 -0500
Subject: [antlr-interest] implementation of multiple AST passes?
Message-ID: <82dc0d190712100750y70ec6c97md8d08f810f0a830e@mail.gmail.com>

My translator project would definitely benefit from multiple passes
over the AST.  I'm looking at implementation options.

I see a thread from antlr-interest in June 2005 in which Terence
describes a method in which a single tree grammar can be supplied with
different actions/behaviors via subclassing:

http://www.antlr.org/pipermail/antlr-interest/2005-June/012788.html

Antlr has changed a lot since 2005.  Have any of those changes brought
good alternatives to the approach described above?

Thanks,
Tom Smith.

From r.mark.volkmann at gmail.com  Mon Dec 10 09:08:21 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 10 Dec 2007 11:08:21 -0600
Subject: [antlr-interest] not parsing to end of input
Message-ID: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>

I've stripped down my grammar to the smallest size that reproduces the
problem. When I run "print x;" through this grammar using the
ANTLRWorks debugger, it doesn't process the semicolon. It stops
parsing at that point and throws the rest of the input away. In my
real grammar this ends up being multiple lines of lost input. Any idea
what I'm doing wrong?

grammar problem;

options {
  output = AST;
}

script: print ';';
print: 'print' LETTER -> ^('print');
	
LETTER: 'a'..'z';
WHITESPACE: ' '+ { $channel = HIDDEN; };

-- 
R. Mark Volkmann
Object Computing, Inc.

From yotommy at gmail.com  Mon Dec 10 09:27:03 2007
From: yotommy at gmail.com (Tom Smith)
Date: Mon, 10 Dec 2007 12:27:03 -0500
Subject: [antlr-interest] not parsing to end of input
In-Reply-To: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>
References: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>
Message-ID: <82dc0d190712100927n20cb36efp8594c9c5653fdbfc@mail.gmail.com>

When I ran this through the ANTLRworks debugger, it parsed all the
input properly.

When you invoked "Debug" are you selecting the 'script' rule as the start rule?

On Dec 10, 2007 12:08 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> I've stripped down my grammar to the smallest size that reproduces the
> problem. When I run "print x;" through this grammar using the
> ANTLRWorks debugger, it doesn't process the semicolon. It stops
> parsing at that point and throws the rest of the input away. In my
> real grammar this ends up being multiple lines of lost input. Any idea
> what I'm doing wrong?
>
> grammar problem;
>
> options {
>   output = AST;
> }
>
> script: print ';';
> print: 'print' LETTER -> ^('print');
>
> LETTER: 'a'..'z';
> WHITESPACE: ' '+ { $channel = HIDDEN; };
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>

From r.mark.volkmann at gmail.com  Mon Dec 10 12:35:53 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 10 Dec 2007 14:35:53 -0600
Subject: [antlr-interest] not parsing to end of input
In-Reply-To: <82dc0d190712100927n20cb36efp8594c9c5653fdbfc@mail.gmail.com>
References: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>
	<82dc0d190712100927n20cb36efp8594c9c5653fdbfc@mail.gmail.com>
Message-ID: <f0fcc6820712101235h6b40adecg818f39df87dac35f@mail.gmail.com>

On Dec 10, 2007 11:27 AM, Tom Smith <yotommy at gmail.com> wrote:
> When I ran this through the ANTLRworks debugger, it parsed all the
> input properly.
>
> When you invoked "Debug" are you selecting the 'script' rule as the start rule?

No, I didn't. That was my problem for this small grammar. However,
there is still a problem with my larger grammar. I'll try again to
reduce it to something smaller that exhibits the problem and send it
out again. Thanks for looking at this!

> On Dec 10, 2007 12:08 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> > I've stripped down my grammar to the smallest size that reproduces the
> > problem. When I run "print x;" through this grammar using the
> > ANTLRWorks debugger, it doesn't process the semicolon. It stops
> > parsing at that point and throws the rest of the input away. In my
> > real grammar this ends up being multiple lines of lost input. Any idea
> > what I'm doing wrong?
> >
> > grammar problem;
> >
> > options {
> >   output = AST;
> > }
> >
> > script: print ';';
> > print: 'print' LETTER -> ^('print');
> >
> > LETTER: 'a'..'z';
> > WHITESPACE: ' '+ { $channel = HIDDEN; };

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Mon Dec 10 13:08:16 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 10 Dec 2007 15:08:16 -0600
Subject: [antlr-interest] not parsing to end of input
In-Reply-To: <f0fcc6820712101235h6b40adecg818f39df87dac35f@mail.gmail.com>
References: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>
	<82dc0d190712100927n20cb36efp8594c9c5653fdbfc@mail.gmail.com>
	<f0fcc6820712101235h6b40adecg818f39df87dac35f@mail.gmail.com>
Message-ID: <f0fcc6820712101308h3f27bf4x52cbe1c43f6d90a0@mail.gmail.com>

Okay, here's a new, short grammar that illustrates the problem. Try
feeding the following two lines into it using the ANTLRWorks debugger.
You'll see that it stops before the semicolon on the first line and
doesn't parse the rest.

print f(x);
print a;

---

grammar problem;

options {
  output = AST;
}

tokens {
  PRINT;
  SCRIPT;
}

print
  : 'print' NAME '(' v=(NUMBER | NAME) ')' -> ^(PRINT NAME $v)
  | 'print' NAME -> ^(PRINT NAME)
  ;

script: (print TERMINATOR)* EOF -> ^(SCRIPT print*);
  	
NAME: 'a'..'z';
NEWLINE: '\r'? '\n' { $channel = HIDDEN; };
NUMBER: '0'..'9';		
TERMINATOR: ';';
WHITESPACE: (' '|'\t')+ { $channel = HIDDEN; };

On Dec 10, 2007 2:35 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> On Dec 10, 2007 11:27 AM, Tom Smith <yotommy at gmail.com> wrote:
> > When I ran this through the ANTLRworks debugger, it parsed all the
> > input properly.
> >
> > When you invoked "Debug" are you selecting the 'script' rule as the start rule?
>
> No, I didn't. That was my problem for this small grammar. However,
> there is still a problem with my larger grammar. I'll try again to
> reduce it to something smaller that exhibits the problem and send it
> out again. Thanks for looking at this!
>
>
> > On Dec 10, 2007 12:08 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> > > I've stripped down my grammar to the smallest size that reproduces the
> > > problem. When I run "print x;" through this grammar using the
> > > ANTLRWorks debugger, it doesn't process the semicolon. It stops
> > > parsing at that point and throws the rest of the input away. In my
> > > real grammar this ends up being multiple lines of lost input. Any idea
> > > what I'm doing wrong?
> > >
> > > grammar problem;
> > >
> > > options {
> > >   output = AST;
> > > }
> > >
> > > script: print ';';
> > > print: 'print' LETTER -> ^('print');
> > >
> > > LETTER: 'a'..'z';
> > > WHITESPACE: ' '+ { $channel = HIDDEN; };
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From yotommy at gmail.com  Mon Dec 10 13:19:12 2007
From: yotommy at gmail.com (Tom Smith)
Date: Mon, 10 Dec 2007 16:19:12 -0500
Subject: [antlr-interest] not parsing to end of input
In-Reply-To: <f0fcc6820712101308h3f27bf4x52cbe1c43f6d90a0@mail.gmail.com>
References: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>
	<82dc0d190712100927n20cb36efp8594c9c5653fdbfc@mail.gmail.com>
	<f0fcc6820712101235h6b40adecg818f39df87dac35f@mail.gmail.com>
	<f0fcc6820712101308h3f27bf4x52cbe1c43f6d90a0@mail.gmail.com>
Message-ID: <82dc0d190712101319s316afe0dye08f1017412a8c16@mail.gmail.com>

It looks like a suspect assignment.  Try:

print
 : 'print' NAME '(' v=ref ')' -> ^(PRINT NAME $v)
 | 'print' NAME -> ^(PRINT NAME)
 ;

ref
  : NAME
  | NUMBER
  ;

On Dec 10, 2007 4:08 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> Okay, here's a new, short grammar that illustrates the problem. Try
> feeding the following two lines into it using the ANTLRWorks debugger.
> You'll see that it stops before the semicolon on the first line and
> doesn't parse the rest.
>
> print f(x);
> print a;
>
> ---
>
> grammar problem;
>
> options {
>   output = AST;
> }
>
> tokens {
>   PRINT;
>   SCRIPT;
> }
>
> print
>   : 'print' NAME '(' v=(NUMBER | NAME) ')' -> ^(PRINT NAME $v)
>   | 'print' NAME -> ^(PRINT NAME)
>   ;
>
> script: (print TERMINATOR)* EOF -> ^(SCRIPT print*);
>
> NAME: 'a'..'z';
> NEWLINE: '\r'? '\n' { $channel = HIDDEN; };
> NUMBER: '0'..'9';
> TERMINATOR: ';';
> WHITESPACE: (' '|'\t')+ { $channel = HIDDEN; };
>
>
> On Dec 10, 2007 2:35 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> > On Dec 10, 2007 11:27 AM, Tom Smith <yotommy at gmail.com> wrote:
> > > When I ran this through the ANTLRworks debugger, it parsed all the
> > > input properly.
> > >
> > > When you invoked "Debug" are you selecting the 'script' rule as the start rule?
> >
> > No, I didn't. That was my problem for this small grammar. However,
> > there is still a problem with my larger grammar. I'll try again to
> > reduce it to something smaller that exhibits the problem and send it
> > out again. Thanks for looking at this!
> >
> >
> > > On Dec 10, 2007 12:08 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> > > > I've stripped down my grammar to the smallest size that reproduces the
> > > > problem. When I run "print x;" through this grammar using the
> > > > ANTLRWorks debugger, it doesn't process the semicolon. It stops
> > > > parsing at that point and throws the rest of the input away. In my
> > > > real grammar this ends up being multiple lines of lost input. Any idea
> > > > what I'm doing wrong?
> > > >
> > > > grammar problem;
> > > >
> > > > options {
> > > >   output = AST;
> > > > }
> > > >
> > > > script: print ';';
> > > > print: 'print' LETTER -> ^('print');
> > > >
> > > > LETTER: 'a'..'z';
> > > > WHITESPACE: ' '+ { $channel = HIDDEN; };
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
> >
>
>
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>

From antlr at shmuelhome.mine.nu  Mon Dec 10 13:25:38 2007
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Mon, 10 Dec 2007 23:25:38 +0200
Subject: [antlr-interest] not parsing to end of input
In-Reply-To: <f0fcc6820712101308h3f27bf4x52cbe1c43f6d90a0@mail.gmail.com>
References: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>	<82dc0d190712100927n20cb36efp8594c9c5653fdbfc@mail.gmail.com>	<f0fcc6820712101235h6b40adecg818f39df87dac35f@mail.gmail.com>
	<f0fcc6820712101308h3f27bf4x52cbe1c43f6d90a0@mail.gmail.com>
Message-ID: <475DAED2.6020804@shmuelhome.mine.nu>

Mark Volkmann wrote:
> Okay, here's a new, short grammar that illustrates the problem. Try
> feeding the following two lines into it using the ANTLRWorks debugger.
> You'll see that it stops before the semicolon on the first line and
> doesn't parse the rest.
>
> print f(x);
> print a;
>
> ---
>
> grammar problem;
>
> options {
>   output = AST;
> }
>
> tokens {
>   PRINT;
>   SCRIPT;
> }
>
> print
>   : 'print' NAME '(' v=(NUMBER | NAME) ')' -> ^(PRINT NAME $v)
>   | 'print' NAME -> ^(PRINT NAME)
>   ;
>
> script: (print TERMINATOR)* EOF -> ^(SCRIPT print*);
>   	
> NAME: 'a'..'z';
> NEWLINE: '\r'? '\n' { $channel = HIDDEN; };
> NUMBER: '0'..'9';		
> TERMINATOR: ';';
> WHITESPACE: (' '|'\t')+ { $channel = HIDDEN; };
>
>   

The rewrite rule doesn't know what to do with $v. Define v as (v=NUMBER 
| v=NAME).


From r.mark.volkmann at gmail.com  Mon Dec 10 13:51:15 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 10 Dec 2007 15:51:15 -0600
Subject: [antlr-interest] not parsing to end of input
In-Reply-To: <475DAED2.6020804@shmuelhome.mine.nu>
References: <f0fcc6820712100908r1c552e02o1fb8da87d0ab124c@mail.gmail.com>
	<82dc0d190712100927n20cb36efp8594c9c5653fdbfc@mail.gmail.com>
	<f0fcc6820712101235h6b40adecg818f39df87dac35f@mail.gmail.com>
	<f0fcc6820712101308h3f27bf4x52cbe1c43f6d90a0@mail.gmail.com>
	<475DAED2.6020804@shmuelhome.mine.nu>
Message-ID: <f0fcc6820712101351k16972722sd0e02e2edca648d@mail.gmail.com>

Thanks to both Shmuel and Tom! That fixed it.

On Dec 10, 2007 3:25 PM, shmuel siegel <antlr at shmuelhome.mine.nu> wrote:
> Mark Volkmann wrote:
> > Okay, here's a new, short grammar that illustrates the problem. Try
> > feeding the following two lines into it using the ANTLRWorks debugger.
> > You'll see that it stops before the semicolon on the first line and
> > doesn't parse the rest.
> >
> > print f(x);
> > print a;
> >
> > ---
> >
> > grammar problem;
> >
> > options {
> >   output = AST;
> > }
> >
> > tokens {
> >   PRINT;
> >   SCRIPT;
> > }
> >
> > print
> >   : 'print' NAME '(' v=(NUMBER | NAME) ')' -> ^(PRINT NAME $v)
> >   | 'print' NAME -> ^(PRINT NAME)
> >   ;
> >
> > script: (print TERMINATOR)* EOF -> ^(SCRIPT print*);
> >
> > NAME: 'a'..'z';
> > NEWLINE: '\r'? '\n' { $channel = HIDDEN; };
> > NUMBER: '0'..'9';
> > TERMINATOR: ';';
> > WHITESPACE: (' '|'\t')+ { $channel = HIDDEN; };
> >
> >
>
> The rewrite rule doesn't know what to do with $v. Define v as (v=NUMBER
> | v=NAME).
>
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From silvester.pozarnik at tracetracker.com  Tue Dec 11 03:31:02 2007
From: silvester.pozarnik at tracetracker.com (Silvester Pozarnik)
Date: Tue, 11 Dec 2007 12:31:02 +0100
Subject: [antlr-interest] The combined grammar definition
In-Reply-To: <OFFA062B54.F80A8F10-ON652573A7.00216C0E-652573A7.0021C649@tcs.com>
Message-ID: <5D85F621120B9545BE359DCFA7788125BB7483@SERVER.tt.tracetracker.com>

Hi,

In the antlr V2 one could define all three grammars (lexer, parser &
tree) in the single file, each with it's own 'option' and 'header'
information.

The WIKI documentation for the ANTLR3 ("ANTLR3 /Grammars" document)
states that "... There are four kinds of grammars: lexer, parser, tree,
and combined (no modifier) ...". 

How to define a combine grammar in ANTLR3 heaving possibility to
separately define @header, @members,... section for each of the
grammars, all in one file?

A template file should be appreciated.

Thanks a lot
Silvester.
 

From Sam.Ellis at arm.com  Tue Dec 11 03:40:37 2007
From: Sam.Ellis at arm.com (Sam Ellis)
Date: Tue, 11 Dec 2007 11:40:37 -0000
Subject: [antlr-interest] The combined grammar definition
In-Reply-To: <5D85F621120B9545BE359DCFA7788125BB7483@SERVER.tt.tracetracker.com>
Message-ID: <89A528FE6DB0FA44877BB2F05B8467180690876C@ZIPPY.Emea.Arm.com>

antlr-interest-bounces at antlr.org wrote:
> In the antlr V2 one could define all three grammars (lexer, parser &
> tree) in the single file, each with it's own 'option' and 'header'
> information. 
> 
> How to define a combine grammar in ANTLR3 heaving possibility to
> separately define @header, @members,... section for each of the
> grammars, all in one file? 

Prefix the section name with the grammar type, for example:

@parser::header {
}

@lexer::header{
}

The same applies for members etc.


-- 
Sam Ellis, Engineering Manager,
Product Engineering Group,                 Tel: +44 (0) 1223 400516
System Design Division,                    Fax: +44 (0) 1223 400887
ARM Ltd., 110 Fulbourn Road,               skype:armsamellis
Cambridge, CB1 9NJ                         mailto:sam.ellis at arm.com

-- 
IMPORTANT NOTICE: The contents of this email and any attachments are confidential and may also be privileged. If you are not the intended recipient, please notify the sender immediately and do not disclose the contents to any other person, use it for any purpose, or store or copy the information in any medium.  Thank you.



From silvester.pozarnik at tracetracker.com  Tue Dec 11 03:45:36 2007
From: silvester.pozarnik at tracetracker.com (Silvester Pozarnik)
Date: Tue, 11 Dec 2007 12:45:36 +0100
Subject: [antlr-interest] The combined grammar definition
In-Reply-To: <89A528FE6DB0FA44877BB2F05B8467180690876C@ZIPPY.Emea.Arm.com>
Message-ID: <5D85F621120B9545BE359DCFA7788125BB7486@SERVER.tt.tracetracker.com>

Thanks, but my problem is how to include a "tree grammar" in the same
file, heaving also the possibility to separately define @header,
@members and other sections.

BR.
Silvester

 

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sam Ellis
> Sent: 11. desember 2007 12:41
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] The combined grammar definition
> 
> antlr-interest-bounces at antlr.org wrote:
> > In the antlr V2 one could define all three grammars (lexer, parser &
> > tree) in the single file, each with it's own 'option' and 'header'
> > information.
> >
> > How to define a combine grammar in ANTLR3 heaving possibility to
> > separately define @header, @members,... section for each of the
> > grammars, all in one file?
> 
> Prefix the section name with the grammar type, for example:
> 
> @parser::header {
> }
> 
> @lexer::header{
> }
> 
> The same applies for members etc.
> 
> 
> --
> Sam Ellis, Engineering Manager,
> Product Engineering Group,                 Tel: +44 (0) 1223 400516
> System Design Division,                    Fax: +44 (0) 1223 400887
> ARM Ltd., 110 Fulbourn Road,               skype:armsamellis
> Cambridge, CB1 9NJ                         mailto:sam.ellis at arm.com
> 
> --
> IMPORTANT NOTICE: The contents of this email and any attachments are
> confidential and may also be privileged. If you are not the intended
> recipient, please notify the sender immediately and do not disclose
the
> contents to any other person, use it for any purpose, or store or copy
the
> information in any medium.  Thank you.
> 


From relationalalgebra at gmail.com  Tue Dec 11 04:14:16 2007
From: relationalalgebra at gmail.com (G R)
Date: Tue, 11 Dec 2007 13:14:16 +0100
Subject: [antlr-interest] The combined grammar definition
In-Reply-To: <5D85F621120B9545BE359DCFA7788125BB7486@SERVER.tt.tracetracker.com>
References: <89A528FE6DB0FA44877BB2F05B8467180690876C@ZIPPY.Emea.Arm.com>
	<5D85F621120B9545BE359DCFA7788125BB7486@SERVER.tt.tracetracker.com>
Message-ID: <2ea6ad20712110414u4be07cajfa818f9723c99e2f@mail.gmail.com>

You cannot have lexer, parser and treee in the same file.
You can combine lexer and parser, but not tree grammar. I think this due to
the rule rewriting mechanism

Hope this help.

G.R.

2007/12/11, Silvester Pozarnik <silvester.pozarnik at tracetracker.com>:
>
> Thanks, but my problem is how to include a "tree grammar" in the same
> file, heaving also the possibility to separately define @header,
> @members and other sections.
>
> BR.
> Silvester
>
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Sam Ellis
> > Sent: 11. desember 2007 12:41
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] The combined grammar definition
> >
> > antlr-interest-bounces at antlr.org wrote:
> > > In the antlr V2 one could define all three grammars (lexer, parser &
> > > tree) in the single file, each with it's own 'option' and 'header'
> > > information.
> > >
> > > How to define a combine grammar in ANTLR3 heaving possibility to
> > > separately define @header, @members,... section for each of the
> > > grammars, all in one file?
> >
> > Prefix the section name with the grammar type, for example:
> >
> > @parser::header {
> > }
> >
> > @lexer::header{
> > }
> >
> > The same applies for members etc.
> >
> >
> > --
> > Sam Ellis, Engineering Manager,
> > Product Engineering Group,                 Tel: +44 (0) 1223 400516
> > System Design Division,                    Fax: +44 (0) 1223 400887
> > ARM Ltd., 110 Fulbourn Road,               skype:armsamellis
> > Cambridge, CB1 9NJ                         mailto:sam.ellis at arm.com
> >
> > --
> > IMPORTANT NOTICE: The contents of this email and any attachments are
> > confidential and may also be privileged. If you are not the intended
> > recipient, please notify the sender immediately and do not disclose
> the
> > contents to any other person, use it for any purpose, or store or copy
> the
> > information in any medium.  Thank you.
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071211/813bacbd/attachment-0001.html 

From antlr at mirality.co.nz  Tue Dec 11 04:08:29 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 12 Dec 2007 01:08:29 +1300
Subject: [antlr-interest] The combined grammar definition
In-Reply-To: <5D85F621120B9545BE359DCFA7788125BB7486@SERVER.tt.tracetrac
	ker.com>
References: <89A528FE6DB0FA44877BB2F05B8467180690876C@ZIPPY.Emea.Arm.com>
	<5D85F621120B9545BE359DCFA7788125BB7486@SERVER.tt.tracetracker.com>
Message-ID: <20071211122229.2388211E9DA@www.antlr.org>

At 00:45 12/12/2007, Silvester Pozarnik wrote:
 >Thanks, but my problem is how to include a "tree grammar" in the 

 >same file, heaving also the possibility to separately define
 >@header, @members and other sections.

You can't.  Tree grammars are always in their own file.


From aravinda777 at gmail.com  Tue Dec 11 04:40:24 2007
From: aravinda777 at gmail.com (Aravinda Dassanayake)
Date: Tue, 11 Dec 2007 18:10:24 +0530
Subject: [antlr-interest] Error in console...!!!
Message-ID: <c1960e000712110440m7f6bf554l59e1bb2ed636ce5e@mail.gmail.com>

Hi everybody!

I've come up with a C# grammar using ANTLR 3.0, and for this I followed the
language spec of Microsoft. However, I am getting the following error when I
try to generate rule code while implementing the grammar using ANTLRWorks.


[17:57:08] error(10):  internal error:
org.antlr.tool.Grammar.createLookaheadDFA(Grammar.java:864): could not even
do k=1 for decision 1
[17:57:10] error(10):  internal error:
org.antlr.tool.Grammar.createLookaheadDFA(Grammar.java:864): could not even
do k=1 for decision 2
[17:57:13] error(10):  internal error:
org.antlr.tool.Grammar.createLookaheadDFA(Grammar.java:864): could not even
do k=1 for decision 3

This error started to pop up, when I was adding few Parser rules, and it
just freezes at this point.
How can I get out of this, and i would hghly appreciate it if someone could
give me some pointers to locate the error and rectify it.

Regards,
AD
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071211/190bcc28/attachment.html 

From r.mark.volkmann at gmail.com  Tue Dec 11 07:38:35 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 11 Dec 2007 09:38:35 -0600
Subject: [antlr-interest] passing more than one parameter to a rule
Message-ID: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>

Here's the beginning of a rule named "define" that passes two String
parameters to a rule named "polynomial".

define
  : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text, $fv.text]

Here's the beginning of the "polynomial" rule showing that it accepts
two String parameters.

polynomial[String fnt, String fvt]

When I attempt to test this using the ANTLRWorks debugger I get the
following error message.

illegal start of expression
[09:35:09]
polynomial11=polynomial(input.toString(fn.start,fn.stop),  ,
input.toString(fv.start,fv.stop));

Note the consecutive commas as if it's trying to pass three parameters.

Any idea what I'm doing wrong?

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Tue Dec 11 08:45:38 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 11 Dec 2007 10:45:38 -0600
Subject: [antlr-interest] feature request for ANTLRWorks
Message-ID: <f0fcc6820712110845g294cf6c5s8f44fd89d6113ef4@mail.gmail.com>

Is there a better forum for this?

Currently when running the debugger on a grammar that creates an AST
the AST displayed in a previous run isn't cleared at the beginning of
the next run. If that run fails for any reason, the old AST is still
displayed, giving the impression that it may have worked. It would be
great if the AST display was cleared at the beginning of each new run.

-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Tue Dec 11 11:30:05 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Dec 2007 11:30:05 -0800
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
Message-ID: <B7212A03-5478-44E7-BF1F-17CEC695B7F1@cs.usfca.edu>

Hi Mark. Are you using the latest build?  This sounds familiar.

Ter
On Dec 11, 2007, at 7:38 AM, Mark Volkmann wrote:

> Here's the beginning of a rule named "define" that passes two String
> parameters to a rule named "polynomial".
>
> define
>  : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text,  
> $fv.text]
>
> Here's the beginning of the "polynomial" rule showing that it accepts
> two String parameters.
>
> polynomial[String fnt, String fvt]
>
> When I attempt to test this using the ANTLRWorks debugger I get the
> following error message.
>
> illegal start of expression
> [09:35:09]
> polynomial11=polynomial(input.toString(fn.start,fn.stop),  ,
> input.toString(fv.start,fv.stop));
>
> Note the consecutive commas as if it's trying to pass three  
> parameters.
>
> Any idea what I'm doing wrong?
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From r.mark.volkmann at gmail.com  Tue Dec 11 11:58:15 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 11 Dec 2007 13:58:15 -0600
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <B7212A03-5478-44E7-BF1F-17CEC695B7F1@cs.usfca.edu>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<B7212A03-5478-44E7-BF1F-17CEC695B7F1@cs.usfca.edu>
Message-ID: <f0fcc6820712111158k27dc72e2j65c0bdf2d41f3335@mail.gmail.com>

On Dec 11, 2007 1:30 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi Mark. Are you using the latest build?  This sounds familiar.

I'm using version 3.0.1.

>
> Ter
>
> On Dec 11, 2007, at 7:38 AM, Mark Volkmann wrote:
>
> > Here's the beginning of a rule named "define" that passes two String
> > parameters to a rule named "polynomial".
> >
> > define
> >  : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text,
> > $fv.text]
> >
> > Here's the beginning of the "polynomial" rule showing that it accepts
> > two String parameters.
> >
> > polynomial[String fnt, String fvt]
> >
> > When I attempt to test this using the ANTLRWorks debugger I get the
> > following error message.
> >
> > illegal start of expression
> > [09:35:09]
> > polynomial11=polynomial(input.toString(fn.start,fn.stop),  ,
> > input.toString(fv.start,fv.stop));
> >
> > Note the consecutive commas as if it's trying to pass three
> > parameters.
> >
> > Any idea what I'm doing wrong?

-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Tue Dec 11 12:02:46 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Dec 2007 12:02:46 -0800
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <f0fcc6820712111158k27dc72e2j65c0bdf2d41f3335@mail.gmail.com>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<B7212A03-5478-44E7-BF1F-17CEC695B7F1@cs.usfca.edu>
	<f0fcc6820712111158k27dc72e2j65c0bdf2d41f3335@mail.gmail.com>
Message-ID: <C8CD7FCB-D79D-4908-B651-838B15A3DC59@cs.usfca.edu>


On Dec 11, 2007, at 11:58 AM, Mark Volkmann wrote:

> On Dec 11, 2007 1:30 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi Mark. Are you using the latest build?  This sounds familiar.
>
> I'm using version 3.0.1.

Can u try:

http://www.antlr.org/download/build/antlr-2007-12-10.19.tar.gz

THanks,
Ter

From r.mark.volkmann at gmail.com  Tue Dec 11 12:46:24 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 11 Dec 2007 14:46:24 -0600
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <C8CD7FCB-D79D-4908-B651-838B15A3DC59@cs.usfca.edu>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<B7212A03-5478-44E7-BF1F-17CEC695B7F1@cs.usfca.edu>
	<f0fcc6820712111158k27dc72e2j65c0bdf2d41f3335@mail.gmail.com>
	<C8CD7FCB-D79D-4908-B651-838B15A3DC59@cs.usfca.edu>
Message-ID: <f0fcc6820712111246ue439851jb5b998ea9251ffad@mail.gmail.com>

On Dec 11, 2007 2:02 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On Dec 11, 2007, at 11:58 AM, Mark Volkmann wrote:
>
> > On Dec 11, 2007 1:30 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> >> Hi Mark. Are you using the latest build?  This sounds familiar.
> >
> > I'm using version 3.0.1.
>
> Can u try:
>
> http://www.antlr.org/download/build/antlr-2007-12-10.19.tar.gz

I got the same error with that version. Here's the output. I use Ant
to run this.

gen:
     [java] ANTLR Parser Generator  Version 3.1b1 (??)  1989-2007
     [java] ANTLR Parser Generator  Version 3.1b1 (??)  1989-2007
     [move] Moving 3 files to
/Users/Mark/Documents/Programming/ANTLR/Math/gen/com/ociweb/math

compile:
    [javac] Compiling 8 source files to
/Users/Mark/Documents/Programming/ANTLR/Math/build/classes
    [javac] /Users/Mark/Documents/Programming/ANTLR/Math/gen/com/ociweb/math/MathParser.java:372:
illegal start of expression
    [javac]
polynomial11=polynomial((fn!=null?input.toString(fn.start,fn.stop):null),
 , (fv!=null?input.toString(fv.start,fv.stop):null));
    [javac]
                            ^
    [javac] /Users/Mark/Documents/Programming/ANTLR/Math/gen/com/ociweb/math/MathParser.java:372:
')' expected
    [javac]
polynomial11=polynomial((fn!=null?input.toString(fn.start,fn.stop):null),
 , (fv!=null?input.toString(fv.start,fv.stop):null));
    [javac]

        ^
    [javac] 2 errors

In case you want to try it, here's my full lexer/parser grammar ...
fairly small.

grammar Math;

options {
  output = AST;
}

tokens {
  ASSIGN;
  DEFINE;
  DERIVATIVE;
  POLYNOMIAL;
  PRINT;
  SCRIPT;
  TERM;
}

@header {
  package com.ociweb.math;
}

@lexer::header {
  package com.ociweb.math;
}

coefficient: NUMBER;

exponent:	'^' NUMBER -> NUMBER;

functionName: NAME;

assign: variable '=' value -> ^(ASSIGN variable value);

define
  : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text, $fv.text]
    -> ^(DEFINE $fn $fv polynomial);

derivative: functionName '\'' '(' variable ')' -> ^(DERIVATIVE functionName);

// fnt = function name text; fvt = function variable text
polynomial[String fnt, String fvt]
  : term[$fvt] (SIGN term[$fvt])* -> ^(POLYNOMIAL term (SIGN term)*);

print
  : 'print' functionName '(' value ')' -> ^(PRINT functionName value)
  | 'print' functionName '(' variable ')' -> ^(PRINT functionName variable)
  | 'print' variable -> ^(PRINT variable)
  ;

// This is the "start rule".
script: (statement TERMINATOR)* EOF -> ^(SCRIPT statement*);

statement: assign | define | derivative | print;

// fnt = function name text; fvt = function variable text
term[String fnt, String fvt]
  // tv = term variable
  : c=coefficient? tv=variable? e=exponent?
    { tv == null ? true : ($tv.text).equals($fvt) }? // a validating
semantic predicate
    -> ^(TERM $c? $tv? $e?)
  ;
  catch [FailedPredicateException fpe] {
    String tvt = input.toString(tv.start, tv.stop);
    System.err.println("In function " + fnt + " the term variable " + tvt +
      " doesn't match function variable " + fvt);
  }

value: NUMBER;
variable:	NAME;

COMMENT: '#' (~'\n')* { $channel = HIDDEN; };
CONTINUATION: '\\' NEWLINE  { $channel = HIDDEN; };
NAME: 'a'..'z';

// Windows uses \r\n. UNIX and Mac OS X use \n.
NEWLINE: '\r'? '\n' { $channel = HIDDEN; };

NUMBER: INTEGER | FLOAT;
fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
fragment INTEGER: SIGN? NATURAL_NUMBER;
fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;

SIGN:	'+' | '-';
TERMINATOR: ';'; // | NEWLINE;
WHITESPACE: (' '|'\t')+ { $channel = HIDDEN; };

Here's some sample input.

f(x) = 2x^4 - 5x + 7 - x^3 + x;
print f(-2);

-- 
R. Mark Volkmann
Object Computing, Inc.

From hnine at isis.vanderbilt.edu  Tue Dec 11 14:17:37 2007
From: hnine at isis.vanderbilt.edu (Harmon Nine)
Date: Tue, 11 Dec 2007 16:17:37 -0600
Subject: [antlr-interest] Problem with "C" code generation on tree parser
Message-ID: <7AB1C26C64423249964AB392C6EBF0E0018B768F@discovery.isis.vanderbilt.edu>

Hello all.

 

Since C++ code generation is not available for 3.0.1, I'm trying to
interface to the "C"-generated code.

 

The options in the ".g" file are:

options {

  language=C;

  output=AST;

  tokenVocab=MatLab;

  ASTLabelType=CommonTree;

}

 

 

The compiler (visual studio 2005) is currently complaining about 2
things:

 

1)

c:\projects\hcddes\trunk\mfile\mfileparser\matlabudm.c(1130) : error
C2039: 'stop' : is not a member of 'MatLabUdm_input_return_struct'

c:\projects\hcddes\trunk\mfile\mfileparser\matlabudm.h(99) : see
declaration of 'MatLabUdm_input_return_struct'

 

Here is the offending line in "matlabudm.c":

//------------

pMatLabUdm_BlockPop();

 

retval.stop = LT(-1); /* OFFENDING LINE */

retval.tree = ADAPTOR->rulePostProcessing(ADAPTOR, root_0);

ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start,
retval.stop); /* SEE 2) BELOW */

//------------

 

Here's the MatLabUdm_input_return_struct definition:

 

//------------

typedef struct MatLabUdm_input_return_struct

{

    pANTLR3_BASE_TREE       start;/* @returnScope.ruleReturnMembers() */

    pANTLR3_BASE_TREE   tree;

    /* End @returnScope.ruleReturnMembers() */   

}

    MatLabUdm_input_return;

//------------

 

QUESTION:  should "stop" be added as a member of this struct, i.e. as
type "pANTLR3_BASE_TREE"?  I've tried doing this in "C.stg", but there
is still a problem (see below).

 

 

2)  The compiler also complains about an incompatible type being passed
to "ADAPTOR->setTokenBoundaries" in the above code:

 

c:\projects\hcddes\trunk\mfile\mfileparser\matlabudm.c(1132) : warning
C4133: 'function' : incompatible types - from 'pANTLR3_BASE_TREE' to
'pANTLR3_COMMON_TOKEN'

 

How can this be remedied?

 

 

Thanks.

-- Harmon

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071211/f41cd248/attachment.html 

From parrt at cs.usfca.edu  Tue Dec 11 14:32:57 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Dec 2007 14:32:57 -0800
Subject: [antlr-interest] Bug in lookahead DFA?
In-Reply-To: <7AB1C26C64423249964AB392C6EBF0E001705081@discovery.isis.vanderbilt.edu>
References: <7AB1C26C64423249964AB392C6EBF0E001705081@discovery.isis.vanderbilt.edu>
Message-ID: <9420F79C-A767-4C74-866C-3BECE70AEDB3@cs.usfca.edu>

Harmon, this is indeed a bug. worse, in 3.1beta it disappears and  
builds bad DFA!  Yikes.  I've seen this before; added to my existing  
bug:

http://www.antlr.org:8888/browse/ANTLR-178

I'll fix for 3.1

Ter
On Nov 14, 2007, at 9:36 AM, Harmon Nine wrote:

> Hi.
>
> I?m trying to write a parser for MatLab (without objects, classes,  
> or structs) and am coming across some peculiar behavior.  A portion  
> of this grammar that results in this behavior is at the end of this  
> message.
>
> In this grammar, I?m using a syntactic predicate to differentiate  
> between an assignment and expression-evaluation statements (see the  
> ?statement? rule below).  Antlr accepts the parser definition  
> without error.
>
> The problem occurs when the parser attempts to parse a rather simple  
> file:
> y(1) = 0
> y(1)
>
> That is, it gives the error
>
> line 1:5 no viable alternative at input ?=?
>
> Perhaps there is an error in the parser definition, but the peculiar  
> thing is that when, on the ?statement? rule, I reduce ?k? to 2, i.e.
>
> statement:
> options {
>   k=2;
> }
>             : ?
>
> The parser works correctly.
>
> I also tried k at various other values.  When it is set at a value  
> of 10, I get the following message:
>
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
> warning(205): DFABug.g:37:2: ANTLR could not analyze this decision  
> in rule statement; often this is because of recursive rule  
> references visible from the left edge of alternatives.  ANTLR will  
> re-analyze the decision with a fixed lookahead of k=1.  Consider  
> using "options {k=1;}" for that decision and possibly adding a  
> syntactic predicate.
>
> The warning message isn?t really applicable, as the rule is not  
> recursive and already has a syntactic predicate.
>
> Is this normal behavior?   I.e. when using syntactic predicates, is  
> it normal to have to give ?k? a small finite value to get the  
> lookahead to work properly, rather than simply to enhance efficiency?
>
> If not, how does one submit a bug report?
>
>
> Here?s the grammar:
> parser grammar DFABug;
>
> options {
> //  language=C++;
>   tokenVocab=DFABugTokens;
>   output=AST;
> }
>
> delimiter
>         :       null_lines empty_lines?
>         |       empty_lines
>         ;
>
> null_lines
>         :       null_line+
>         ;
>
> null_line
>         :       empty_lines? ( COMMA | SEMI )!
>         ;
>
> empty_lines
>         :       line+
>         ;
>
> line    :       ( COMMENT | NEWLINES )!
>         ;
>
> statement_list
>         :       statement ( delimiter statement )* delimiter?
>         ;
>
> statement
> options {
>   k=2;
> }
>       :     (reference ASSIGN)=> reference ASSIGN^ expr
>         |       expr
>       ;
>
> expr  :     reference
>       |     INTEGER
>       |     DOUBLE
>       |     IMAGINARY
>       |     TEXT
>       ;
>
> reference
>       :       IDENTIFIER^ LPAREN! argument_list RPAREN!
>         ;
>
> argument_list
>         :       expr ( COMMA! expr )*
>         ;
>
>
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071211/f83b5a1c/attachment-0001.html 

From Roberto.Attias at arc.com  Tue Dec 11 15:12:20 2007
From: Roberto.Attias at arc.com (Roberto Attias)
Date: Tue, 11 Dec 2007 15:12:20 -0800
Subject: [antlr-interest] exception when generating code from CLI ,
	but not from ANTLRWorks
Message-ID: <475F1954.9010702@arc.com>

Hi,
I'm new to ANTLR, so this may be a naive question, please bear with me.

I've written a grammar to parse my own type of expressions. This grammar 
was derived by the C grammar, mainly by stripping out some rules. The 
problem I'm having is that if I generate code from ANTRLWorks 
(Generate/Generate Code) it works ok, but If I run the following:

java -classpath 
"antlr-3.0b7/lib/antlr-3.0b7.jar;antlr-3.0b7/lib/stringtemplate-3.0.jar;antlr-3.0b7/lib/antlr-2.7.7.jar" 
org.antlr.Tool MyExpression.g

I get the following error:

ANTLR Parser Generator  Version 3.0b7 (April 12, 2007)  1989-2007
error(100): ARCPlotterExpression.g:0:0: syntax error: assign.types: 
<AST>:0:0: u
nexpected end of subtree
error(10):  internal error: ARCPlotterExpression.g : 
java.lang.ClassCastExceptio
n: antlr.ASTNULLType cannot be cast to org.antlr.tool.GrammarAST
org.antlr.tool.AssignTokenTypesWalker.block(AssignTokenTypesWalker.java:1215)
org.antlr.tool.AssignTokenTypesWalker.rule(AssignTokenTypesWalker.java:1030)
org.antlr.tool.AssignTokenTypesWalker.rules(AssignTokenTypesWalker.java:610)
org.antlr.tool.AssignTokenTypesWalker.grammarSpec(AssignTokenTypesWalker.java:49
2)
org.antlr.tool.AssignTokenTypesWalker.grammar(AssignTokenTypesWalker.java:363)
org.antlr.tool.Grammar.setGrammarContent(Grammar.java:539)
org.antlr.tool.Grammar.<init>(Grammar.java:448)
org.antlr.Tool.getGrammar(Tool.java:331)
org.antlr.Tool.process(Tool.java:267)
org.antlr.Tool.main(Tool.java:70)


Can anybody hints to what might be wrong?

         Thanks,
                         Roberto 
Unless otherwise expressly stated, this message does not create or vary any contractual relationship between you and ARC International. The contents of this e-mail may be confidential and if you have received it in error, please delete it from your system, destroy any hard copies and telephone the above number. Incoming emails to ARC may be subject to monitoring other than by the addressee. SJ  
 
 
 
 
 

From hnine at isis.vanderbilt.edu  Tue Dec 11 15:32:08 2007
From: hnine at isis.vanderbilt.edu (Harmon Nine)
Date: Tue, 11 Dec 2007 17:32:08 -0600
Subject: [antlr-interest] Bug in lookahead DFA?
In-Reply-To: <9420F79C-A767-4C74-866C-3BECE70AEDB3@cs.usfca.edu>
References: <7AB1C26C64423249964AB392C6EBF0E001705081@discovery.isis.vanderbilt.edu>
	<9420F79C-A767-4C74-866C-3BECE70AEDB3@cs.usfca.edu>
Message-ID: <7AB1C26C64423249964AB392C6EBF0E0018B76AF@discovery.isis.vanderbilt.edu>

When is 3.1 to be released (ballpark)?

 

Thanks.

-- Harmon

 

________________________________

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Tuesday, December 11, 2007 4:33 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Bug in lookahead DFA?

 

Harmon, this is indeed a bug. worse, in 3.1beta it disappears and builds
bad DFA!  Yikes.  I've seen this before; added to my existing bug:

 

http://www.antlr.org:8888/browse/ANTLR-178

 

I'll fix for 3.1

 

Ter

On Nov 14, 2007, at 9:36 AM, Harmon Nine wrote:





Hi.

 

I'm trying to write a parser for MatLab (without objects, classes, or
structs) and am coming across some peculiar behavior.  A portion of this
grammar that results in this behavior is at the end of this message.

 

In this grammar, I'm using a syntactic predicate to differentiate
between an assignment and expression-evaluation statements (see the
"statement" rule below).  Antlr accepts the parser definition without
error.

 

The problem occurs when the parser attempts to parse a rather simple
file:

y(1) = 0

y(1)

 

That is, it gives the error

 

line 1:5 no viable alternative at input '='

 

Perhaps there is an error in the parser definition, but the peculiar
thing is that when, on the "statement" rule, I reduce "k" to 2, i.e.

 

statement:

options {

  k=2;

}

            : ...

 

The parser works correctly.

 

I also tried k at various other values.  When it is set at a value of
10, I get the following message:

 

ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007

warning(205): DFABug.g:37:2: ANTLR could not analyze this decision in
rule statement; often this is because of recursive rule references
visible from the left edge of alternatives.  ANTLR will re-analyze the
decision with a fixed lookahead of k=1.  Consider using "options {k=1;}"
for that decision and possibly adding a syntactic predicate.

 

The warning message isn't really applicable, as the rule is not
recursive and already has a syntactic predicate.

 

Is this normal behavior?   I.e. when using syntactic predicates, is it
normal to have to give "k" a small finite value to get the lookahead to
work properly, rather than simply to enhance efficiency?

 

If not, how does one submit a bug report?

 

 

Here's the grammar:

parser grammar DFABug;

 

options {

//  language=C++;

  tokenVocab=DFABugTokens;

  output=AST;

}

 

delimiter

        :       null_lines empty_lines?

        |       empty_lines

        ;

 

null_lines

        :       null_line+

        ;

 

null_line

        :       empty_lines? ( COMMA | SEMI )!

        ;

 

empty_lines

        :       line+

        ;

 

line    :       ( COMMENT | NEWLINES )!

        ;

 

statement_list

        :       statement ( delimiter statement )* delimiter?

        ;

 

statement

options {

  k=2;

}

      :     (reference ASSIGN)=> reference ASSIGN^ expr

        |       expr

      ;

 

expr  :     reference

      |     INTEGER

      |     DOUBLE

      |     IMAGINARY

      |     TEXT

      ;

 

reference

      :       IDENTIFIER^ LPAREN! argument_list RPAREN!

        ;

 

argument_list

        :       expr ( COMMA! expr )*

        ;

 

 

 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071211/49f4e602/attachment-0001.html 

From parrt at cs.usfca.edu  Tue Dec 11 18:28:33 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Dec 2007 18:28:33 -0800
Subject: [antlr-interest] Bug in lookahead DFA?
In-Reply-To: <7AB1C26C64423249964AB392C6EBF0E0018B76AF@discovery.isis.vanderbilt.edu>
References: <7AB1C26C64423249964AB392C6EBF0E001705081@discovery.isis.vanderbilt.edu>
	<9420F79C-A767-4C74-866C-3BECE70AEDB3@cs.usfca.edu>
	<7AB1C26C64423249964AB392C6EBF0E0018B76AF@discovery.isis.vanderbilt.edu>
Message-ID: <A32A5963-16DD-4C10-85DD-430AE602738E@cs.usfca.edu>

I hope by end of January before I start to teach.
Ter

From parrt at cs.usfca.edu  Tue Dec 11 18:57:43 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Dec 2007 18:57:43 -0800
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
Message-ID: <26741700-0A57-403F-BCEF-5E296FF83753@cs.usfca.edu>

Ouch. even

a : A b["foo", $A] ;

b[String x, String y] : C ;

fails.  Working on bug right now...i have isolated issue.

Ter

On Dec 11, 2007, at 7:38 AM, Mark Volkmann wrote:

> Here's the beginning of a rule named "define" that passes two String
> parameters to a rule named "polynomial".
>
> define
>  : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text,  
> $fv.text]
>
> Here's the beginning of the "polynomial" rule showing that it accepts
> two String parameters.
>
> polynomial[String fnt, String fvt]
>
> When I attempt to test this using the ANTLRWorks debugger I get the
> following error message.
>
> illegal start of expression
> [09:35:09]
> polynomial11=polynomial(input.toString(fn.start,fn.stop),  ,
> input.toString(fv.start,fv.stop));
>
> Note the consecutive commas as if it's trying to pass three  
> parameters.
>
> Any idea what I'm doing wrong?
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From parrt at cs.usfca.edu  Tue Dec 11 19:05:41 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 11 Dec 2007 19:05:41 -0800
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <26741700-0A57-403F-BCEF-5E296FF83753@cs.usfca.edu>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<26741700-0A57-403F-BCEF-5E296FF83753@cs.usfca.edu>
Message-ID: <ED294F37-AFE8-475F-84F4-0F7EF8522A7A@cs.usfca.edu>

Ok, fixed. Grab:

http://www.antlr.org/download/build/antlr-2007-12-11.19.tar.gz

or just remove space from arg list after comma ;)

Ter

On Dec 11, 2007, at 6:57 PM, Terence Parr wrote:

> Ouch. even
>
> a : A b["foo", $A] ;
>
> b[String x, String y] : C ;
>
> fails.  Working on bug right now...i have isolated issue.
>
> Ter
>
> On Dec 11, 2007, at 7:38 AM, Mark Volkmann wrote:
>
>> Here's the beginning of a rule named "define" that passes two String
>> parameters to a rule named "polynomial".
>>
>> define
>> : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text,  
>> $fv.text]
>>
>> Here's the beginning of the "polynomial" rule showing that it accepts
>> two String parameters.
>>
>> polynomial[String fnt, String fvt]
>>
>> When I attempt to test this using the ANTLRWorks debugger I get the
>> following error message.
>>
>> illegal start of expression
>> [09:35:09]
>> polynomial11=polynomial(input.toString(fn.start,fn.stop),  ,
>> input.toString(fv.start,fv.stop));
>>
>> Note the consecutive commas as if it's trying to pass three  
>> parameters.
>>
>> Any idea what I'm doing wrong?
>>
>> -- 
>> R. Mark Volkmann
>> Object Computing, Inc.
>


From auberlin at hotmail.com  Tue Dec 11 23:09:10 2007
From: auberlin at hotmail.com (Auber Lin)
Date: Wed, 12 Dec 2007 07:09:10 +0000
Subject: [antlr-interest] license question for ANTLR v3 examples
Message-ID: <BAY125-W33C06A7A8FCA90B02A0479C5650@phx.gbl>


hi mailing-list members,
     i does not find any clear statement for the license description to ANTLR v3 examples located at http://www.antlr.org/download/examples-v3.tar.gz
i'm not sure whether i could modify the example grammars for a business product. Anyone can help with this kind of information?
 
Cheers!
Auber
 
_________________________________________________________________
Don't get caught with egg on your face. Play Chicktionary!
http://club.live.com/chicktionary.aspx?icid=chick_wlhmtextlink1_dec
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071212/b3139562/attachment.html 

From Roberto.Attias at arc.com  Tue Dec 11 23:47:18 2007
From: Roberto.Attias at arc.com (Roberto Attias)
Date: Tue, 11 Dec 2007 23:47:18 -0800
Subject: [antlr-interest] exception when generating code from CLI ,
	but not from ANTLRWorks
Message-ID: <475F9206.8060002@arc.com>

ok, was my mistake... I was using an earlier version of antlr.

    Roberto 
Unless otherwise expressly stated, this message does not create or vary any contractual relationship between you and ARC International. The contents of this e-mail may be confidential and if you have received it in error, please delete it from your system, destroy any hard copies and telephone the above number. Incoming emails to ARC may be subject to monitoring other than by the addressee. SJ  
 
 
 
 
 

From Roberto.Attias at arc.com  Wed Dec 12 00:26:55 2007
From: Roberto.Attias at arc.com (Roberto Attias)
Date: Wed, 12 Dec 2007 00:26:55 -0800
Subject: [antlr-interest] AST Tree generation question
Message-ID: <475F9B4F.5030705@arc.com>

In an expression grammar derived from one of the examples I have the 
following rule:

additive_expression
    : (multiplicative_expression) ('+^' multiplicative_expression | '-'^ 
multiplicative_expression)*
    ;

When parsing a+b", this generates a tree as expected. Now ,I want to 
have OP_ADD or OP_SUB as radix of the tree when evaluating a+b or a-b. 
I'm not entirely sure how to do that. Is there a way to indicate that a 
different token should be used in the inlined syntax? If not, how to do 
this with rewrite rules?

I've tried different combinations, but can't get this to work...

   Thanks,

                 Roberto 
Unless otherwise expressly stated, this message does not create or vary any contractual relationship between you and ARC International. The contents of this e-mail may be confidential and if you have received it in error, please delete it from your system, destroy any hard copies and telephone the above number. Incoming emails to ARC may be subject to monitoring other than by the addressee. SJ  
 
 
 
 
 

From aravinda777 at gmail.com  Wed Dec 12 00:34:01 2007
From: aravinda777 at gmail.com (Aravinda Dassanayake)
Date: Wed, 12 Dec 2007 14:04:01 +0530
Subject: [antlr-interest] C# 2.0 grammar needed...
Message-ID: <c1960e000712120034p2d86eff7h66b2732320ba091a@mail.gmail.com>

Hi everybody,

Has anyone got a solid ANTLR 3.0 grammar for C# 2.0? I'm working on one
right now, and in fact I've gone quite far with it, and just trying to get
over few errors at the moment.

However, just want to check whether I can do some reusing to save the amount
of rework.

Regards,

Aravinda Dassanayake
+94785248946

aravinda777 at yahoo.com
aravinda777 at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071212/b66d519e/attachment.html 

From relationalalgebra at gmail.com  Wed Dec 12 02:53:51 2007
From: relationalalgebra at gmail.com (G R)
Date: Wed, 12 Dec 2007 11:53:51 +0100
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <ED294F37-AFE8-475F-84F4-0F7EF8522A7A@cs.usfca.edu>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<26741700-0A57-403F-BCEF-5E296FF83753@cs.usfca.edu>
	<ED294F37-AFE8-475F-84F4-0F7EF8522A7A@cs.usfca.edu>
Message-ID: <2ea6ad20712120253s8f2f83dpf8e6f9e228fa2486@mail.gmail.com>

Does your testing team works for Microsoft also ?
Just kidding.
ANTLR is a very good and usefull framework. Keep going guys!

G. R.

2007/12/12, Terence Parr <parrt at cs.usfca.edu>:
>
> Ok, fixed. Grab:
>
> http://www.antlr.org/download/build/antlr-2007-12-11.19.tar.gz
>
> or just remove space from arg list after comma ;)
>
> Ter
>
> On Dec 11, 2007, at 6:57 PM, Terence Parr wrote:
>
> > Ouch. even
> >
> > a : A b["foo", $A] ;
> >
> > b[String x, String y] : C ;
> >
> > fails.  Working on bug right now...i have isolated issue.
> >
> > Ter
> >
> > On Dec 11, 2007, at 7:38 AM, Mark Volkmann wrote:
> >
> >> Here's the beginning of a rule named "define" that passes two String
> >> parameters to a rule named "polynomial".
> >>
> >> define
> >> : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text,
> >> $fv.text]
> >>
> >> Here's the beginning of the "polynomial" rule showing that it accepts
> >> two String parameters.
> >>
> >> polynomial[String fnt, String fvt]
> >>
> >> When I attempt to test this using the ANTLRWorks debugger I get the
> >> following error message.
> >>
> >> illegal start of expression
> >> [09:35:09]
> >> polynomial11=polynomial(input.toString(fn.start,fn.stop),  ,
> >> input.toString(fv.start,fv.stop));
> >>
> >> Note the consecutive commas as if it's trying to pass three
> >> parameters.
> >>
> >> Any idea what I'm doing wrong?
> >>
> >> --
> >> R. Mark Volkmann
> >> Object Computing, Inc.
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071212/34b0420a/attachment.html 

From dav1dr at eml.cc  Wed Dec 12 02:51:34 2007
From: dav1dr at eml.cc (Dave Rodgman)
Date: Wed, 12 Dec 2007 10:51:34 +0000
Subject: [antlr-interest] Java annotations on generated parser code
Message-ID: <1197456694.8559.43.camel@arm03584.emea.arm.com>

Hi,
        
I'd like the files ANTLR generates to contain annotations, so that I can
do something like (in Java, at least):

@parser::header {
    package ...;

    import ...Autogenerated;

    @Autogenerated
}

so that my ant scripts can identify autogenerated java files and delete
them as part of their clean target.

Unfortunately, ant puts some imports after the inserted header code, so
this fails.

Would it be possible for antlr to guarantee that the header code will be
inserted immediately before the class definition? Alternatively, the
java target could just split the annotations out and insert them further
down (though I can understand that that's a road you might not want to
go down).

thanks

Dave


From antlr at mirality.co.nz  Wed Dec 12 02:59:46 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 12 Dec 2007 23:59:46 +1300
Subject: [antlr-interest] AST Tree generation question
In-Reply-To: <475F9B4F.5030705@arc.com>
References: <475F9B4F.5030705@arc.com>
Message-ID: <20071212111017.14CC311E9D8@www.antlr.org>

At 21:26 12/12/2007, Roberto Attias wrote:
 >In an expression grammar derived from one of the examples I have 

 >the following rule:
 >
 >additive_expression
 >    : (multiplicative_expression) ('+^' 
multiplicative_expression |
 >'-'^
 >multiplicative_expression)*
 >    ;
 >
 >When parsing a+b", this generates a tree as expected. Now ,I 
want
 >to have OP_ADD or OP_SUB as radix of the tree when evaluating 
a+b
 >or a-b.

The easiest way to do this would be to declare OP_ADD as a token 
consisting of '+', and use that in place of the constant 
above.  (And that ^ should be outside the quotes; I'm assuming 
that's a typo.)

If you don't want to do that for some reason, then you can use 
rewrites.  I'm actually not completely sure of the exact syntax 
myself, but I think you can do something like this:

additive_expression
   : (a=multiplicative_expression -> $a)
     (
       (b='+' c=multiplicative_expression
          -> ^(OP_ADD[$b] $additive_expression $c))
     | (d='-' e=multiplicative_expression
          -> ^(OP_SUB[$d] $additive_expression $e))
     )*
   ;

The key points are that a rewrite arrow sets the tree output for 
the entire rule, no matter where it appears, and once set you can 
refer to the previously-set tree when building another tree.  The 
other useful bit is the square brackets after the OP_* virtual 
tokens; those aren't required, but if you use them it'll associate 
the corresponding source token (the operator) with the tree node, 
so it'll still have text and a source location.


From r.mark.volkmann at gmail.com  Wed Dec 12 05:34:39 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 12 Dec 2007 07:34:39 -0600
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <ED294F37-AFE8-475F-84F4-0F7EF8522A7A@cs.usfca.edu>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<26741700-0A57-403F-BCEF-5E296FF83753@cs.usfca.edu>
	<ED294F37-AFE8-475F-84F4-0F7EF8522A7A@cs.usfca.edu>
Message-ID: <f0fcc6820712120534p795579b2r148ff46cab5020e4@mail.gmail.com>

On Dec 11, 2007 9:05 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Ok, fixed. Grab:
>
> http://www.antlr.org/download/build/antlr-2007-12-11.19.tar.gz

Thanks! That worked.

Is there a way to configure ANTLRWorks to use a new version of ANTLR?
I don't see anything in the Preferences to do that.

> or just remove space from arg list after comma ;)
>
> Ter
>
>
> On Dec 11, 2007, at 6:57 PM, Terence Parr wrote:
>
> > Ouch. even
> >
> > a : A b["foo", $A] ;
> >
> > b[String x, String y] : C ;
> >
> > fails.  Working on bug right now...i have isolated issue.
> >
> > Ter
> >
> > On Dec 11, 2007, at 7:38 AM, Mark Volkmann wrote:
> >
> >> Here's the beginning of a rule named "define" that passes two String
> >> parameters to a rule named "polynomial".
> >>
> >> define
> >> : fn=functionName '(' fv=variable ')' '=' polynomial[$fn.text,
> >> $fv.text]
> >>
> >> Here's the beginning of the "polynomial" rule showing that it accepts
> >> two String parameters.
> >>
> >> polynomial[String fnt, String fvt]
> >>
> >> When I attempt to test this using the ANTLRWorks debugger I get the
> >> following error message.
> >>
> >> illegal start of expression
> >> [09:35:09]
> >> polynomial11=polynomial(input.toString(fn.start,fn.stop),  ,
> >> input.toString(fv.start,fv.stop));
> >>
> >> Note the consecutive commas as if it's trying to pass three
> >> parameters.
> >>
> >> Any idea what I'm doing wrong?
> >>
> >> --
> >> R. Mark Volkmann
> >> Object Computing, Inc.
> >
>
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From takpoli at hotmail.com  Wed Dec 12 07:27:07 2007
From: takpoli at hotmail.com (Tak-po Li)
Date: Wed, 12 Dec 2007 10:27:07 -0500
Subject: [antlr-interest] stringtemplate-3.0.jar
In-Reply-To: <mailman.14692.1197457817.2534.antlr-interest@antlr.org>
References: <mailman.14692.1197457817.2534.antlr-interest@antlr.org>
Message-ID: <BAY105-W6D9B24AF3F45FF27EF9AEAB650@phx.gbl>


 
I am new with Antlr.  I am in XT plateform.  I run antlrworks and got files xxxParser and xxxLexer.  However, when I run "java xxx", I got "error reading stringtemplate-3.0.jar; error in opening zip file".
 
I just rename stringtemplate-3.0.tar.gz which I downloaded from its web to stringtemplate-3.0.jar.  I believe that is incorrect.  What is the correct way to create file stringtemplate-3.0.jar?
 
Thanks,
 
Tak
 
_________________________________________________________________
Share life as it happens with the new Windows Live.
http://www.windowslive.com/share.html?ocid=TXT_TAGHM_Wave2_sharelife_122007
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071212/84714268/attachment.html 

From r.mark.volkmann at gmail.com  Wed Dec 12 08:10:05 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 12 Dec 2007 10:10:05 -0600
Subject: [antlr-interest] handling single-line comments
Message-ID: <f0fcc6820712120810o79894b1fv50c4baecb31aa335@mail.gmail.com>

Here's a grammar containing just three lexer rules.

grammar BadLexer;

COMMENT: '#' (~'\n')* NEWLINE { $channel = HIDDEN; };
NEWLINE: ('\r'? '\n')+ { $channel = HIDDEN; };
WHITESPACE: (' '|'\t')+ { $channel = HIDDEN; };

When I run Grammar ... Check Grammar on it in ANTLRWorks I get the
following warning.

warning(200): BadLexer.g:3:20: Decision can match input such as
"{'\u0000'..'\t', '\u000B'..'\uFFFE'}" using multiple alternatives: 1,
2
As a result, alternative(s) 2 were disabled for that input

There must be a better way to write the COMMENT rule. Suggestions
would be appreciated.

-- 
R. Mark Volkmann
Object Computing, Inc.

From jaluber at gmx.de  Wed Dec 12 08:18:04 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 12 Dec 2007 17:18:04 +0100
Subject: [antlr-interest] stringtemplate-3.0.jar
In-Reply-To: <BAY105-W6D9B24AF3F45FF27EF9AEAB650@phx.gbl>
References: <mailman.14692.1197457817.2534.antlr-interest@antlr.org>
	<BAY105-W6D9B24AF3F45FF27EF9AEAB650@phx.gbl>
Message-ID: <476009BC.9020802@gmx.de>

Tak-po Li schrieb:
>  
> I am new with Antlr.  I am in XT plateform.  I run antlrworks and got
> files xxxParser and xxxLexer.  However, when I run "java xxx", I got
> "error reading stringtemplate-3.0.jar; error in opening zip file".
>  
> I just rename stringtemplate-3.0.tar.gz which I downloaded from its web
> to stringtemplate-3.0.jar.  I believe that is incorrect.  What is the
> correct way to create file stringtemplate-3.0.jar?

You have to download stringtemplate-3.0.jar, which should be just
another link on the website. .tar.gz-files are compressed like .zip and
need an archiver to decompress them. I don't know if
stringtemplate-3.0.tar.gz contains the .jar or only the source code.

Johannes

From takpoli at hotmail.com  Wed Dec 12 09:04:14 2007
From: takpoli at hotmail.com (Tak-po Li)
Date: Wed, 12 Dec 2007 12:04:14 -0500
Subject: [antlr-interest] stringtemplate-3.0.jar
Message-ID: <BAY105-W118D06820419800122F182AB650@phx.gbl>


 
After Mark helps me resolve the problem in stringtemplate, it compiles with massges:
 
Note: xxxParser.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
 
My one line script batch: "javac -classpath antlr-runtime-3.0.3.jar;
antlr-2.7.7.jar;stringtemplate.jar xxx.java xxxParser.java xxxLexer.java".  I use jdk1.6.0_03.
 
My simple test file xxx.java is:
import org.antlr.runtime.*;import org.antlr.stringtemplate.*;import org.antlr.stringtemplate.language.*;
public class verilog {
 public static void main (String[] args) throws Exception {  ANTLRInputStream input = new ANTLRInputStream (System.in);  xxxLexer lexer = new xxxLexer (input);  CommonTokenStream tokens = new CommonTokenStream (lexer);  xxxParser parser = new xxxParser (tokens);  parser.source_text(); }
}
 
When I run "java xxx < yyy" I got:
Exception in thread "main" java.lang.NoClassDefFoundError: xxx.
 
Could anyone help?  Thanks,
 
Tak
 
 
 
> Date: Wed, 12 Dec 2007 10:13:29 -0600> From: r.mark.volkmann at gmail.com> To: takpoli at hotmail.com> Subject: Re: [antlr-interest] stringtemplate-3.0.jar> > On Dec 12, 2007 10:04 AM, Tak-po Li <takpoli at hotmail.com> wrote:> >> >> > Thanks, Mark, when I untar using 'tar zxf stringtemplate_3.0.tar.gz', I get> > a directory stringtemplate_3.0 with files and subdirectory under it.> > That's what you want.> > > I am new to Java too. How could I make them back to *.jar? Thanks,> > You don't need to get them back to a .jar file. There should be a> directory named 'lib'. The file 'stringtemplate.jar' is inside that.> > > > Date: Wed, 12 Dec 2007 09:49:56 -0600> > > From: r.mark.volkmann at gmail.com> > > To: takpoli at hotmail.com> > > Subject: Re: [antlr-interest] stringtemplate-3.0.jar> >> >> > >> > > On Dec 12, 2007 9:27 AM, Tak-po Li <takpoli at hotmail.com> wrote:> > > >> > > >> > > > I am new with Antlr. I am in XT plateform. I run antlrworks and got> > files> > > > xxxParser and xxxLexer. However, when I run 'java xxx', I got 'error> > > > reading stringtemplate-3.0.jar; error in opening zip file'.> > > >> > > > I just rename stringtemplate-3.0.tar.gz which I downloaded from its web> > to> > > > stringtemplate-3.0.jar. I believe that is incorrect. What is the correct> > > > way to create file stringtemplate-3.0.jar?> > >> > > You can't just rename it. You have to unzip it. I'm not sure how to do> > > that under Windows. If you had Cygwin installed then you'd run 'tar> > > zxf stringtemplate-3.0.tar'.> > >> > > > Thanks,> > > >> > > > Tak> > > >> > > >> > > > ________________________________> > > > Share life as it happens with the new Windows Live. Share now!> > >> > >> > >> > > --> > > R. Mark Volkmann> > > Object Computing, Inc.> >> >> > ________________________________> > The best games are on Xbox 360. Click here for a special offer on an Xbox> > 360 Console. Get it now!> > > > -- > R. Mark Volkmann> Object Computing, Inc.
_________________________________________________________________
Don't get caught with egg on your face. Play Chicktionary!
http://club.live.com/chicktionary.aspx?icid=chick_wlhmtextlink1_dec
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071212/3fb11500/attachment.html 

From r.mark.volkmann at gmail.com  Wed Dec 12 09:09:01 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 12 Dec 2007 11:09:01 -0600
Subject: [antlr-interest] stringtemplate-3.0.jar
In-Reply-To: <BAY105-W118D06820419800122F182AB650@phx.gbl>
References: <BAY105-W118D06820419800122F182AB650@phx.gbl>
Message-ID: <f0fcc6820712120909p7ddc837fiaf09300dd4a922e3@mail.gmail.com>

On Dec 12, 2007 11:04 AM, Tak-po Li <takpoli at hotmail.com> wrote:
>
>  After Mark helps me resolve the problem in stringtemplate, it compiles with
> massges:
>
>  Note: xxxParser.java uses unchecked or unsafe operations.
>  Note: Recompile with -Xlint:unchecked for details.

I think you just have to ignore those warnings for now. I believe they
are caused by ANTLR generating Java code that doesn't use typed
collections (generics). Maybe someone can tell use a flag to use on
javac to suppress those.

>  My one line script batch: "javac -classpath antlr-runtime-3.0.3.jar;
>  antlr-2.7.7.jar;stringtemplate.jar xxx.java xxxParser.java xxxLexer.java".
> I use jdk1.6.0_03.
>
>  My simple test file xxx.java is:
>
> import org.antlr.runtime.*;
> import org.antlr.stringtemplate.*;
> import org.antlr.stringtemplate.language.*;
>  public class verilog {
>   public static void main (String[] args) throws Exception {
>   ANTLRInputStream input = new ANTLRInputStream (System.in);
>   xxxLexer lexer = new xxxLexer (input);
>   CommonTokenStream tokens = new CommonTokenStream (lexer);
>   xxxParser parser = new xxxParser (tokens);
>   parser.source_text();
>  }
>  }
>
>  When I run "java xxx < yyy" I got:
>  Exception in thread "main" java.lang.NoClassDefFoundError: xxx.
>
>  Could anyone help?  Thanks,
>
>  Tak
>
>
>
>
>
> > Date: Wed, 12 Dec 2007 10:13:29 -0600
> > From: r.mark.volkmann at gmail.com
> > To: takpoli at hotmail.com
> > Subject: Re: [antlr-interest] stringtemplate-3.0.jar
> >
> > On Dec 12, 2007 10:04 AM, Tak-po Li <takpoli at hotmail.com> wrote:
> > >
> > >
> > > Thanks, Mark, when I untar using 'tar zxf stringtemplate_3.0.tar.gz', I
> get
> > > a directory stringtemplate_3.0 with files and subdirectory under it.
> >
> > That's what you want.
> >
> > > I am new to Java too. How could I make them back to *.jar? Thanks,
> >
> > You don't need to get them back to a .jar file. There should be a
> > directory named 'lib'. The file 'stringtemplate.jar' is inside that.
> >
> > > > Date: Wed, 12 Dec 2007 09:49:56 -0600
> > > > From: r.mark.volkmann at gmail.com
> > > > To: takpoli at hotmail.com
> > > > Subject: Re: [antlr-interest] stringtemplate-3.0.jar
> > >
> > >
> > > >
> > > > On Dec 12, 2007 9:27 AM, Tak-po Li <takpoli at hotmail.com> wrote:
> > > > >
> > > > >
> > > > > I am new with Antlr. I am in XT plateform. I run antlrworks and got
> > > files
> > > > > xxxParser and xxxLexer. However, when I run 'java xxx', I got 'error
> > > > > reading stringtemplate-3.0.jar; error in opening zip file'.
> > > > >
> > > > > I just rename stringtemplate-3.0.tar.gz which I downloaded from its
> web
> > > to
> > > > > stringtemplate-3.0.jar. I believe that is incorrect. What is the
> correct
> > > > > way to create file stringtemplate-3.0.jar?
> > > >
> > > > You can't just rename it. You have to unzip it. I'm not sure how to do
> > > > that under Windows. If you had Cygwin installed then you'd run 'tar
> > > > zxf stringtemplate-3.0.tar'.
> > > >
> > > > > Thanks,
> > > > >
> > > > > Tak
> > > > >
> > > > >
> > > > > ________________________________
> > > > > Share life as it happens with the new Windows Live. Share now!
> > > >
> > > >
> > > >
> > > > --
> > > > R. Mark Volkmann
> > > > Object Computing, Inc.
> > >
> > >
> > > ________________________________
> > > The best games are on Xbox 360. Click here for a special offer on an
> Xbox
> > > 360 Console. Get it now!
> >
> >
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
>
>
> ________________________________
> Don't get caught with egg on your face. Play Chicktionary! Check it out!



-- 
R. Mark Volkmann
Object Computing, Inc.

From takpoli at hotmail.com  Wed Dec 12 09:09:05 2007
From: takpoli at hotmail.com (Tak-po Li)
Date: Wed, 12 Dec 2007 12:09:05 -0500
Subject: [antlr-interest] stringtemplate-3.0.jar
Message-ID: <BAY105-W417F19BABAF12D26E39C80AB650@phx.gbl>


 
I meant:
 
When I run "java xxx < yyy" I got:Exception in thread "main" java.lang.NoClassDefFoundError: org/antlr/runtime/CharStream.
 
Tak 
 
 
 


From: takpoli at hotmail.comTo: antlr-interest at antlr.orgCC: r.mark.volkmann at gmail.comSubject: RE: [antlr-interest] stringtemplate-3.0.jarDate: Wed, 12 Dec 2007 12:04:14 -0500


 After Mark helps me resolve the problem in stringtemplate, it compiles with massges: Note: xxxParser.java uses unchecked or unsafe operations.Note: Recompile with -Xlint:unchecked for details. My one line script batch: "javac -classpath antlr-runtime-3.0.3.jar;antlr-2.7.7.jar;stringtemplate.jar xxx.java xxxParser.java xxxLexer.java".  I use jdk1.6.0_03. My simple test file xxx.java is:import org.antlr.runtime.*;import org.antlr.stringtemplate.*;import org.antlr.stringtemplate.language.*;public class verilog { public static void main (String[] args) throws Exception {  ANTLRInputStream input = new ANTLRInputStream (System.in);  xxxLexer lexer = new xxxLexer (input);  CommonTokenStream tokens = new CommonTokenStream (lexer);  xxxParser parser = new xxxParser (tokens);  parser.source_text(); }} When I run "java xxx < yyy" I got:Exception in thread "main" java.lang.NoClassDefFoundError: xxx. Could anyone help?  Thanks, Tak   > Date: Wed, 12 Dec 2007 10:13:29 -0600> From: r.mark.volkmann at gmail.com> To: takpoli at hotmail.com> Subject: Re: [antlr-interest] stringtemplate-3.0.jar> > On Dec 12, 2007 10:04 AM, Tak-po Li <takpoli at hotmail.com> wrote:> >> >> > Thanks, Mark, when I untar using 'tar zxf stringtemplate_3.0.tar.gz', I get> > a directory stringtemplate_3.0 with files and subdirectory under it.> > That's what you want.> > > I am new to Java too. How could I make them back to *.jar? Thanks,> > You don't need to get them back to a .jar file. There should be a> directory named 'lib'. The file 'stringtemplate.jar' is inside that.> > > > Date: Wed, 12 Dec 2007 09:49:56 -0600> > > From: r.mark.volkmann at gmail.com> > > To: takpoli at hotmail.com> > > Subject: Re: [antlr-interest] stringtemplate-3.0.jar> >> >> > >> > > On Dec 12, 2007 9:27 AM, Tak-po Li <takpoli at hotmail.com> wrote:> > > >> > > >> > > > I am new with Antlr. I am in XT plateform. I run antlrworks and got> > files> > > > xxxParser and xxxLexer. However, when I run 'java xxx', I got 'error> > > > reading stringtemplate-3.0.jar; error in opening zip file'.> > > >> > > > I just rename stringtemplate-3.0.tar.gz which I downloaded from its web> > to> > > > stringtemplate-3.0.jar. I believe that is incorrect. What is the correct> > > > way to create file stringtemplate-3.0.jar?> > >> > > You can't just rename it. You have to unzip it. I'm not sure how to do> > > that under Windows. If you had Cygwin installed then you'd run 'tar> > > zxf stringtemplate-3.0.tar'.> > >> > > > Thanks,> > > >> > > > Tak> > > >> > > >> > > > ________________________________> > > > Share life as it happens with the new Windows Live. Share now!> > >> > >> > >> > > --> > > R. Mark Volkmann> > > Object Computing, Inc.> >> >> > ________________________________> > The best games are on Xbox 360. Click here for a special offer on an Xbox> > 360 Console. Get it now!> > > > -- > R. Mark Volkmann> Object Computing, Inc.

Don't get caught with egg on your face. Play Chicktionary! Check it out! 
_________________________________________________________________
Don't get caught with egg on your face. Play Chicktionary!
http://club.live.com/chicktionary.aspx?icid=chick_wlhmtextlink1_dec
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071212/c591d22e/attachment-0001.html 

From john at jacelridge.com  Wed Dec 12 10:19:19 2007
From: john at jacelridge.com (John Ridgway)
Date: Wed, 12 Dec 2007 13:19:19 -0500
Subject: [antlr-interest] handling single-line comments
In-Reply-To: <f0fcc6820712120810o79894b1fv50c4baecb31aa335@mail.gmail.com>
References: <f0fcc6820712120810o79894b1fv50c4baecb31aa335@mail.gmail.com>
Message-ID: <C046E813-17D1-4C06-B4E2-24C771D0F051@jacelridge.com>

The problem is the '\r'? in NEWLINE.  You need to add it to the  
COMMENT rule as well.  Here's the appropriate portion of the Java  
grammar's lexer rules:

WS  :  ( ' '|'\r'|'\t'|'\u000C'|'\n' ) {$channel=HIDDEN;}
     ;

COMMENT
     :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
     ;

LINE_COMMENT
     : '//' ~( '\n'|'\r' )* '\r'? '\n' {$channel=HIDDEN;}
     ;

Note that the LINE_COMMENT rule contains ~('\n'|'\r'), not just (~'\n').

You can get the whole grammar from the ANTLR web-site.

Peace
- John


On Dec 12, 2007, at 11:10 AM, Mark Volkmann wrote:

> Here's a grammar containing just three lexer rules.
>
> grammar BadLexer;
>
> COMMENT: '#' (~'\n')* NEWLINE { $channel = HIDDEN; };
> NEWLINE: ('\r'? '\n')+ { $channel = HIDDEN; };
> WHITESPACE: (' '|'\t')+ { $channel = HIDDEN; };
>
> When I run Grammar ... Check Grammar on it in ANTLRWorks I get the
> following warning.
>
> warning(200): BadLexer.g:3:20: Decision can match input such as
> "{'\u0000'..'\t', '\u000B'..'\uFFFE'}" using multiple alternatives: 1,
> 2
> As a result, alternative(s) 2 were disabled for that input
>
> There must be a better way to write the COMMENT rule. Suggestions
> would be appreciated.
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From antlr at mirality.co.nz  Wed Dec 12 10:59:38 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 13 Dec 2007 07:59:38 +1300
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <f0fcc6820712120534p795579b2r148ff46cab5020e4@mail.gmail.co
 m>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<26741700-0A57-403F-BCEF-5E296FF83753@cs.usfca.edu>
	<ED294F37-AFE8-475F-84F4-0F7EF8522A7A@cs.usfca.edu>
	<f0fcc6820712120534p795579b2r148ff46cab5020e4@mail.gmail.com>
Message-ID: <20071212185952.9BFAE11EAA9@www.antlr.org>

At 02:34 13/12/2007, Mark Volkmann wrote:
 >Is there a way to configure ANTLRWorks to use a new version of
 >ANTLR?
 >I don't see anything in the Preferences to do that.

Since it's embedded in the jar file, you have to unpack the 
ANTLRworks and ANTLR jars, copy over the contents of the ANTLR 
jar, and then repack the modified ANTLRworks jar.


From r.mark.volkmann at gmail.com  Wed Dec 12 12:02:20 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 12 Dec 2007 14:02:20 -0600
Subject: [antlr-interest] stringtemplate-3.0.jar
In-Reply-To: <BAY105-W417F19BABAF12D26E39C80AB650@phx.gbl>
References: <BAY105-W417F19BABAF12D26E39C80AB650@phx.gbl>
Message-ID: <f0fcc6820712121202s2f6ad02at4f4b7a24ee39788f@mail.gmail.com>

On Dec 12, 2007 11:09 AM, Tak-po Li <takpoli at hotmail.com> wrote:
>
>
>  I meant:
>
>
>  When I run "java xxx < yyy" I got:
> Exception in thread "main" java.lang.NoClassDefFoundError:
> org/antlr/runtime/CharStream.

That class is in the antlr-3.0.1.jar file. Make sure you have that jar
file in your CLASSPATH.

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Wed Dec 12 15:20:03 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 12 Dec 2007 17:20:03 -0600
Subject: [antlr-interest] constructing AST nodes from variables
Message-ID: <f0fcc6820712121520i27500233t396e547cc6f5ba8@mail.gmail.com>

Is it possible to set a variable that is used in an AST rewrite rule?
In the example below that doesn't currently work I'm trying to set the
variable "msg" and then output it into my AST. Maybe the underlying
question is whether you can use both { } and -> in the same rule.

myRule
@init { String msg; }
  : 'assert' left=value r=RELATION right=value
    { msg = "some string value"; }
    -> ^(ASSERT $r $left $right msg);

-- 
R. Mark Volkmann
Object Computing, Inc.

From john at jacelridge.com  Wed Dec 12 16:16:54 2007
From: john at jacelridge.com (John Ridgway)
Date: Wed, 12 Dec 2007 19:16:54 -0500
Subject: [antlr-interest] constructing AST nodes from variables
In-Reply-To: <f0fcc6820712121520i27500233t396e547cc6f5ba8@mail.gmail.com>
References: <f0fcc6820712121520i27500233t396e547cc6f5ba8@mail.gmail.com>
Message-ID: <87E5EE85-C3F7-4D4D-960D-515312E5A449@jacelridge.com>

I think you need
   -> ^(ASSERT $r $left $right {msg})

note the braces around msg

Peace
- John


On Dec 12, 2007, at 6:20 PM, Mark Volkmann wrote:

> Is it possible to set a variable that is used in an AST rewrite rule?
> In the example below that doesn't currently work I'm trying to set the
> variable "msg" and then output it into my AST. Maybe the underlying
> question is whether you can use both { } and -> in the same rule.
>
> myRule
> @init { String msg; }
>   : 'assert' left=value r=RELATION right=value
>     { msg = "some string value"; }
>     -> ^(ASSERT $r $left $right msg);
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From parrt at cs.usfca.edu  Wed Dec 12 17:10:12 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 12 Dec 2007 17:10:12 -0800
Subject: [antlr-interest] passing more than one parameter to a rule
In-Reply-To: <f0fcc6820712120534p795579b2r148ff46cab5020e4@mail.gmail.com>
References: <f0fcc6820712110738h1fb518cfxbda70aeeb8e82c56@mail.gmail.com>
	<26741700-0A57-403F-BCEF-5E296FF83753@cs.usfca.edu>
	<ED294F37-AFE8-475F-84F4-0F7EF8522A7A@cs.usfca.edu>
	<f0fcc6820712120534p795579b2r148ff46cab5020e4@mail.gmail.com>
Message-ID: <819D7ADF-43BA-4331-A9F4-1FE65F364E74@cs.usfca.edu>


On Dec 12, 2007, at 5:34 AM, Mark Volkmann wrote:

> On Dec 11, 2007 9:05 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Ok, fixed. Grab:
>>
>> http://www.antlr.org/download/build/antlr-2007-12-11.19.tar.gz
>
> Thanks! That worked.

Ooops...i totally messed that up.  I just rewrote to be smarter.   
You're ok for now though.

Ter

From Ramon.Verbruggen at quintiq.com  Thu Dec 13 01:08:54 2007
From: Ramon.Verbruggen at quintiq.com (Ramon Verbruggen)
Date: Thu, 13 Dec 2007 10:08:54 +0100
Subject: [antlr-interest] Problem with "C" code generation on tree parser
In-Reply-To: <mailman.14565.1197412378.2534.antlr-interest@antlr.org>
References: <mailman.14565.1197412378.2534.antlr-interest@antlr.org>
Message-ID: <476104B5.BB97.0087.0@quintiq.com>

Harmon,

I'm happily using ANTLR 3.0.1 with the C runtime and Visual Studio
2005, the options in my grammar look like this:

options 
{
	output=AST;

	//For debugging with ANTLRWorks, comment out the following two
lines:
	language=C;
	ASTLabelType=pANTLR3_BASE_TREE; // <==== I think this is your
problem
}

My grammar is not a tree grammar though if I understand the terminology
correctly: it just takes text as input and produces an AST as output. If
I am not mistaken a tree grammar in ANTLR is a grammar that operates on
a tree, i.e. takes a tree as input.

> Since C++ code generation is not available for 3.0.1, I'm trying to
> interface to the "C"-generated code.
> 
>
> The options in the ".g" file are:
>
>options {
>
>  language=C;
>
>  output=AST;
>
>  tokenVocab=MatLab;
>
>  ASTLabelType=CommonTree;
>
>}
>
I hope this helps,

Ramon
 


This message contains information that may be privileged or confidential
and is the property of Quintiq. It is only intended for the person to
whom it is addressed. If you are not the intended recipient, you are not
authorized to read, print, retain, copy, disseminate, distribute or use
this message or any part thereof. If you have received this message in
error, please notify the sender immediately and delete all copies of
this message. Please note that e-mails are susceptible to change,
therefore they are not binding.

From harald_m_mueller at gmx.de  Thu Dec 13 05:34:55 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Thu, 13 Dec 2007 14:34:55 +0100
Subject: [antlr-interest] Can tree rewriting be done (easily/out-of-the-box)
 with the current ANTLR 3.x?
Message-ID: <20071213133455.172830@gmx.net>

Hi - 

sorry for that quesatsion: I searched the archives and found a posting from Feb 2007 where Terrence says he can do it on one blackboard. However, I did not find more indications whether it works now "out of the box."

If it does: Where's documentation?

If not: How can I do it (as manually and as node-copying as you have it)? (yes, I can find out the pure manual code myself - but if someone already has some idioms, it would be nice if she/he could share them).

Ah yes: The software where I need this has to be delivered on Monday ...

Regards
Harald

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger

From yotommy at gmail.com  Thu Dec 13 05:47:17 2007
From: yotommy at gmail.com (Tom Smith)
Date: Thu, 13 Dec 2007 08:47:17 -0500
Subject: [antlr-interest] Can tree rewriting be done
	(easily/out-of-the-box) with the current ANTLR 3.x?
In-Reply-To: <20071213133455.172830@gmx.net>
References: <20071213133455.172830@gmx.net>
Message-ID: <82dc0d190712130547t42b85b9dja9aa278f20c2ac19@mail.gmail.com>

Harald,

Looks like this is in the 3.1 early access release.  Here is an excerpt from
CHANGES.txt:

July 20, 2007

* Added AST construction for tree parsers including -> rewrite rules.
  Rewrite mode (rewrite=true) alters the tree in place rather than
  constructing a whole new tree.  Implementation notes:

Hope this helps,
Tom.

On Dec 13, 2007 8:34 AM, Harald Mueller <harald_m_mueller at gmx.de> wrote:

> Hi -
>
> sorry for that quesatsion: I searched the archives and found a posting
> from Feb 2007 where Terrence says he can do it on one blackboard. However, I
> did not find more indications whether it works now "out of the box."
>
> If it does: Where's documentation?
>
> If not: How can I do it (as manually and as node-copying as you have it)?
> (yes, I can find out the pure manual code myself - but if someone already
> has some idioms, it would be nice if she/he could share them).
>
> Ah yes: The software where I need this has to be delivered on Monday ...
>
> Regards
> Harald
>
> --
> Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
> Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071213/d1dba407/attachment.html 

From harald_m_mueller at gmx.de  Thu Dec 13 06:09:24 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Thu, 13 Dec 2007 15:09:24 +0100
Subject: [antlr-interest] Can tree rewriting be done
 (easily/out-of-the-box) with the current ANTLR 3.x?
In-Reply-To: <82dc0d190712130547t42b85b9dja9aa278f20c2ac19@mail.gmail.com>
References: <20071213133455.172830@gmx.net>
	<82dc0d190712130547t42b85b9dja9aa278f20c2ac19@mail.gmail.com>
Message-ID: <20071213140924.172850@gmx.net>

Thanks Tom - 

it rules out 3.1 ;-) (I'm not going into some production software with it ...).
Anyone a take on how to do it (manually (as little as possible)) with 3.0?

Thx
Harald

-------- Original-Nachricht --------
> Datum: Thu, 13 Dec 2007 08:47:17 -0500
> Von: "Tom Smith" <yotommy at gmail.com>
> An: "Harald Mueller" <harald_m_mueller at gmx.de>
> CC: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] Can tree rewriting be done (easily/out-of-the-box) with the current ANTLR 3.x?

> Harald,
> 
> Looks like this is in the 3.1 early access release.  Here is an excerpt
> from
> CHANGES.txt:
> 
> July 20, 2007
> 
> * Added AST construction for tree parsers including -> rewrite rules.
>   Rewrite mode (rewrite=true) alters the tree in place rather than
>   constructing a whole new tree.  Implementation notes:
> 
> Hope this helps,
> Tom.
> 
> On Dec 13, 2007 8:34 AM, Harald Mueller <harald_m_mueller at gmx.de> wrote:
> 
> > Hi -
> >
> > sorry for that quesatsion: I searched the archives and found a posting
> > from Feb 2007 where Terrence says he can do it on one blackboard.
> However, I
> > did not find more indications whether it works now "out of the box."
> >
> > If it does: Where's documentation?
> >
> > If not: How can I do it (as manually and as node-copying as you have
> it)?
> > (yes, I can find out the pure manual code myself - but if someone
> already
> > has some idioms, it would be nice if she/he could share them).
> >
> > Ah yes: The software where I need this has to be delivered on Monday ...
> >
> > Regards
> > Harald
> >
> > --
> > Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
> > Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger
> >

-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From takpoli at hotmail.com  Thu Dec 13 06:53:36 2007
From: takpoli at hotmail.com (Tak-po Li)
Date: Thu, 13 Dec 2007 09:53:36 -0500
Subject: [antlr-interest] stringtemplate-3.0.jar
Message-ID: <BAY105-W30D59C606C1AB13C29953EAB660@phx.gbl>


 Mark, Thanks, for your help.  CharStream is in both antlr and antlr run time.  My problem was in classpath. when I run javac, I use 'javac -cp antlr-3.0.1.jar ...', however, when I run java, I use only 'java xxx'.  I place the library into the environment variable, and I can see the output now. Thanks. Tak > Date: Wed, 12 Dec 2007 15:37:01 -0600> From: r.mark.volkmann at gmail.com> To: takpoli at hotmail.com> Subject: Re: [antlr-interest] stringtemplate-3.0.jar> > On Dec 12, 2007 3:16 PM, Tak-po Li <takpoli at hotmail.com> wrote:> >> >> > Mark,> >> > Thanks for your help.> >> > When I wrote 'output=template', I got those compiler Notes, however, when I> > wrote 'output=AST', those Notes are no longer there. You are right. We may> > have to live with them for now.> >> > The excution give me more problem: When I run 'java xxx < yyy' I got:> >> > Exception in thread 'main' java.lang.NoClassDefFoundError:> > org/antlr/runtime/CharStream.> >> > Do you use antlr-runtime-3.0.1?> > No, I have antlr-3.0.1.jar and antlr-2.7.7.jar in my classpath, but> not the runtime jar.> > > If CharStream is not in it, I should have> > compiler error. If it is in, I should not got a error message like the> > above. I am confused.> > It is in my version. Try this. Open a command prompt, cd to the ANTLR> lib directory, and enter this.> > jar tf antlr-3.0.1.jar> > That will list all the files inside the jar. One of them should be> CharStream.class.> > > Should I switch to the earlier version?> > That shouldn't be necessary.> > -- > R. Mark Volkmann> Object Computing, Inc.
_________________________________________________________________
i?m is proud to present Cause Effect, a series about real people making a difference.
http://im.live.com/Messenger/IM/MTV/?source=text_Cause_Effect
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071213/c9b2228c/attachment.html 

From hnine at isis.vanderbilt.edu  Thu Dec 13 07:17:57 2007
From: hnine at isis.vanderbilt.edu (Harmon Nine)
Date: Thu, 13 Dec 2007 09:17:57 -0600
Subject: [antlr-interest] Problem with "C" code generation on tree parser
In-Reply-To: <476104B5.BB97.0087.0@quintiq.com>
References: <mailman.14565.1197412378.2534.antlr-interest@antlr.org>
	<476104B5.BB97.0087.0@quintiq.com>
Message-ID: <7AB1C26C64423249964AB392C6EBF0E0018B7792@discovery.isis.vanderbilt.edu>

A very important point that I forgot to mention:

I'm using the "C" code generation on a tree-grammar.  The "C" code
generation works fine for the parser-grammar.

Are you using the "C" code generation for a tree-grammar?

Thanks.
-- Harmon

> -----Original Message-----
> From: Ramon Verbruggen [mailto:Ramon.Verbruggen at quintiq.com]
> Sent: Thursday, December 13, 2007 3:09 AM
> To: antlr-interest at antlr.org
> Cc: Harmon Nine
> Subject: Re: Problem with "C" code generation on tree parser
> 
> Harmon,
> 
> I'm happily using ANTLR 3.0.1 with the C runtime and Visual Studio
> 2005, the options in my grammar look like this:
> 
> options
> {
> 	output=AST;
> 
> 	//For debugging with ANTLRWorks, comment out the following two
> lines:
> 	language=C;
> 	ASTLabelType=pANTLR3_BASE_TREE; // <==== I think this is your
> problem
> }
> 
> My grammar is not a tree grammar though if I understand the
terminology
> correctly: it just takes text as input and produces an AST as output.
If
> I am not mistaken a tree grammar in ANTLR is a grammar that operates
on
> a tree, i.e. takes a tree as input.
> 
> > Since C++ code generation is not available for 3.0.1, I'm trying to
> > interface to the "C"-generated code.
> >
> >
> > The options in the ".g" file are:
> >
> >options {
> >
> >  language=C;
> >
> >  output=AST;
> >
> >  tokenVocab=MatLab;
> >
> >  ASTLabelType=CommonTree;
> >
> >}
> >
> I hope this helps,
> 
> Ramon
> 
> 
> 
> This message contains information that may be privileged or
confidential
> and is the property of Quintiq. It is only intended for the person to
> whom it is addressed. If you are not the intended recipient, you are
not
> authorized to read, print, retain, copy, disseminate, distribute or
use
> this message or any part thereof. If you have received this message in
> error, please notify the sender immediately and delete all copies of
> this message. Please note that e-mails are susceptible to change,
> therefore they are not binding.

From r.mark.volkmann at gmail.com  Thu Dec 13 07:26:45 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 13 Dec 2007 09:26:45 -0600
Subject: [antlr-interest] stringtemplate-3.0.jar
In-Reply-To: <BAY105-W30D59C606C1AB13C29953EAB660@phx.gbl>
References: <BAY105-W30D59C606C1AB13C29953EAB660@phx.gbl>
Message-ID: <f0fcc6820712130726i3ca41406o3ef4d825720d488b@mail.gmail.com>

Eventually you're going to want to use Ant or Maven to make this
easier. If you decide to use Ant, I can sent you an example Ant build
file that I use for my ANTLR project. Others on the list could help
you with Maven if you go that route.

On Dec 13, 2007 8:53 AM, Tak-po Li <takpoli at hotmail.com> wrote:
>
>
> Mark,
>
> Thanks, for your help.  CharStream is in both antlr and antlr run time.  My
> problem was in classpath.
>
> when I run javac, I use 'javac -cp antlr-3.0.1.jar ...', however, when I run
> java, I use only 'java xxx'.  I place the library into the environment
> variable, and I can see the output now.
>
> Thanks.
>
> Tak
>
>
>
> > Date: Wed, 12 Dec 2007 15:37:01 -0600
> > From: r.mark.volkmann at gmail.com
> > To: takpoli at hotmail.com
> > Subject: Re: [antlr-interest] stringtemplate-3.0.jar
>
>
> >
> > On Dec 12, 2007 3:16 PM, Tak-po Li <takpoli at hotmail.com> wrote:
> > >
> > >
> > > Mark,
> > >
> > > Thanks for your help.
> > >
> > > When I wrote 'output=template', I got those compiler Notes, however,
> when I
> > > wrote 'output=AST', those Notes are no longer there. You are right. We
> may
> > > have to live with them for now.
> > >
> > > The excution give me more problem: When I run 'java xxx < yyy' I got:
> > >
> > > Exception in thread 'main' java.lang.NoClassDefFoundError:
> > > org/antlr/runtime/CharStream.
> > >
> > > Do you use antlr-runtime-3.0.1?
> >
> > No, I have antlr-3.0.1.jar and antlr-2.7.7.jar in my classpath, but
> > not the runtime jar.
> >
> > > If CharStream is not in it, I should have
> > > compiler error. If it is in, I should not got a error message like the
> > > above. I am confused.
> >
> > It is in my version. Try this. Open a command prompt, cd to the ANTLR
> > lib directory, and enter this.
> >
> > jar tf antlr-3.0.1.jar
> >
> > That will list all the files inside the jar. One of them should be
> > CharStream.class.
> >
> > > Should I switch to the earlier version?
> >
> > That shouldn't be necessary.
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
>
>
> ________________________________
> i'm is proud to present Cause Effect, a series about real people making a
> difference. Learn more



-- 
R. Mark Volkmann
Object Computing, Inc.

From takpoli at hotmail.com  Thu Dec 13 08:34:09 2007
From: takpoli at hotmail.com (Tak-po Li)
Date: Thu, 13 Dec 2007 11:34:09 -0500
Subject: [antlr-interest] escaped identifier in Verilog
Message-ID: <BAY105-W13BFDE6A7DCAB4F022AF02AB660@phx.gbl>


 
There is so called "escape identifier" in Verilog as: \cciTimer[0]
Where "ccTimer" is the normal identifier.  "[0]" is the vector (or array expansion).  There is no white character between '\' and 'c'.
 
I recall the Verilog example in antlr.org for v2 handles it as:
 
ESCAPED_IDENTIFIER     : '\\'! (~ '\040')+ ('\040'|'\t'|'\n')!    ;
 
It seems it is not working for v3.  Could anyone help with a solution for v3?
 
Thanks,
 
Tak
_________________________________________________________________
i?m is proud to present Cause Effect, a series about real people making a difference.
http://im.live.com/Messenger/IM/MTV/?source=text_Cause_Effect
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071213/d03a467a/attachment.html 

From parrt at cs.usfca.edu  Thu Dec 13 10:12:31 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 13 Dec 2007 10:12:31 -0800
Subject: [antlr-interest] Can tree rewriting be done
	(easily/out-of-the-box) with the current ANTLR 3.x?
In-Reply-To: <20071213140924.172850@gmx.net>
References: <20071213133455.172830@gmx.net>
	<82dc0d190712130547t42b85b9dja9aa278f20c2ac19@mail.gmail.com>
	<20071213140924.172850@gmx.net>
Message-ID: <8959BB1B-AF8A-4475-A224-B7D0460505B9@cs.usfca.edu>

Hi Harald,

I apologize for the delay in getting the tree rewriting done.  I am  
back working on antlr now, well after I grade my final exam, but Kay  
Roepke is here for two weeksfrom Hamburg and we will be doing a lot of  
hacking.

In the meantime, you can do tree rewriting by returning a new tree  
from every rule.  Start by including an @after action I think that  
makes a duplicate of the incoming tree $rule.start. When you need to  
do a rewrite, you will have to probably manually build the new tree  
for those productions needing a new tree.  Set the return value.  Ack,  
every reference to a rule will need to build up a new tree based upon  
what is returned.  This will be very messy and error prone.  Hmm...

Ter

From antlr at mirality.co.nz  Thu Dec 13 10:21:16 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 14 Dec 2007 07:21:16 +1300
Subject: [antlr-interest] escaped identifier in Verilog
In-Reply-To: <BAY105-W13BFDE6A7DCAB4F022AF02AB660@phx.gbl>
References: <BAY105-W13BFDE6A7DCAB4F022AF02AB660@phx.gbl>
Message-ID: <20071213182128.120D211EAA9@www.antlr.org>

At 05:34 14/12/2007, Tak-po Li wrote:
>I recall the Verilog example in antlr.org for v2 handles it as:
>
>ESCAPED_IDENTIFIER
>     : '\\'! (~ '\040')+ ('\040'|'\t'|'\n')!
>     ;

First off, try changing the '\040's into ' 's.  I'm not sure if v3 
supports octal escapes. 


From andreas.ravnestad at gmail.com  Thu Dec 13 11:35:19 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Thu, 13 Dec 2007 20:35:19 +0100
Subject: [antlr-interest] Oh my, code too large
Message-ID: <db3e39e10712131135x29184fb2k10368398cec45b17@mail.gmail.com>

Sometimes ANTLR generates a lexer which will make javac choke on
itself with a message resembling this:

src/no/ntnu/xqft/parse/XQFTLexer.java:14313: code too large
        public int specialStateTransition(int s, IntStream input)
throws NoViableAltException {
                   ^

Any ideas how to get around this? Maybe a 64 bit operating system? :)

-Andreas

From andreas.ravnestad at gmail.com  Thu Dec 13 11:51:26 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Thu, 13 Dec 2007 20:51:26 +0100
Subject: [antlr-interest] Oh my, code too large
In-Reply-To: <db3e39e10712131135x29184fb2k10368398cec45b17@mail.gmail.com>
References: <db3e39e10712131135x29184fb2k10368398cec45b17@mail.gmail.com>
Message-ID: <db3e39e10712131151y26b759b4ud8405fcf001a4009@mail.gmail.com>

On 12/13/07, Andreas Ravnestad <andreas.ravnestad at gmail.com> wrote:
> Sometimes ANTLR generates a lexer which will make javac choke on
> itself with a message resembling this:
>
> src/no/ntnu/xqft/parse/XQFTLexer.java:14313: code too large
>         public int specialStateTransition(int s, IntStream input)
> throws NoViableAltException {
>                    ^
>
> Any ideas how to get around this? Maybe a 64 bit operating system? :)
>
> -Andreas
>



And in related news:

Exception in thread "main" java.lang.Error: Unresolved compilation problem:
	The code of method sequenceType() is exceeding the 65535 bytes limit

I hope christmas holidays will be here soon :(

-Andreas

From ima_band at comcast.net  Thu Dec 13 12:37:54 2007
From: ima_band at comcast.net (ima_band at comcast.net)
Date: Thu, 13 Dec 2007 20:37:54 +0000
Subject: [antlr-interest] Perplexed about template option
Message-ID: <121320072037.25127.47619822000C693C0000622722007504380B020E0DA10E0307@comcast.net>

Hi,

To my sheer delight I am generating tons of code with ANTLR without having to deal with the more complex AST trees. But since I'm using the template option all of my rules return an implicit string template, right? Trouble is, unless I'm mistaken, this ties you into having template output that mimics the hierarchy (i.e. nesting) of your input data. When I created a DataObject wrapper it worked fine but my Bean implementation needed field name and type data in two separate parts of the file. At first I imagined being able to invoke 2 different templates from my columnDef rule and pass them up and into my outermost template as two separate parameters. As far as I can tell that is not possible. Instead I created an aggregate FieldDef class in the @members area and added them to a fieldDefList as columns where recognized down in the columnDef rule then passed the list of aggregates to the outermost template and leveraged StringTemplates various iterator features.  

I was forced to abandon what I thought was the stated intent of the template option (bubbling up STs) and piece together a bunch of Java code instead. Don't get me wrong, applying templates to multi-valued attributes is pretty cool and gets me where I want to be. But if you could emit multiple STs for the same rule then you could simply pass them to the outermost template and stick them where they need to be! No muss. No fuss. No unneeded class definitions.

Thoughts?

Jeff
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071213/5a57a716/attachment.html 

From john at jacelridge.com  Thu Dec 13 13:04:43 2007
From: john at jacelridge.com (John Ridgway)
Date: Thu, 13 Dec 2007 16:04:43 -0500
Subject: [antlr-interest] Oh my, code too large
In-Reply-To: <db3e39e10712131151y26b759b4ud8405fcf001a4009@mail.gmail.com>
References: <db3e39e10712131135x29184fb2k10368398cec45b17@mail.gmail.com>
	<db3e39e10712131151y26b759b4ud8405fcf001a4009@mail.gmail.com>
Message-ID: <E4EE7177-51C0-4CDF-947A-0ABB75EDBDC1@jacelridge.com>

The problem is real.  Java effectively limits you to 65KBytes per  
method of byte-code.  The source of the limit is the definition of  
the class files.  A class file includes, for each method, a table of  
exception handlers, and each of the entries in these tables includes  
the address (in bytes relative to the beginning of the method) of the  
beginning and end of the try-block, stored as two 16-bit integers.   
There is no way around this.  I hope that there are people out there  
who can make suggestions as to how to modify your lexer to generate  
less code.

Peace
- John


On Dec 13, 2007, at 2:51 PM, Andreas Ravnestad wrote:

> On 12/13/07, Andreas Ravnestad <andreas.ravnestad at gmail.com> wrote:
>> Sometimes ANTLR generates a lexer which will make javac choke on
>> itself with a message resembling this:
>>
>> src/no/ntnu/xqft/parse/XQFTLexer.java:14313: code too large
>>         public int specialStateTransition(int s, IntStream input)
>> throws NoViableAltException {
>>                    ^
>>
>> Any ideas how to get around this? Maybe a 64 bit operating system? :)
>>
>> -Andreas
>>
>
>
>
> And in related news:
>
> Exception in thread "main" java.lang.Error: Unresolved compilation  
> problem:
> 	The code of method sequenceType() is exceeding the 65535 bytes limit
>
> I hope christmas holidays will be here soon :(
>
> -Andreas


From jaluber at gmx.de  Thu Dec 13 13:52:58 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 13 Dec 2007 22:52:58 +0100
Subject: [antlr-interest] Can tree rewriting be
 done	(easily/out-of-the-box) with the current ANTLR 3.x?
In-Reply-To: <8959BB1B-AF8A-4475-A224-B7D0460505B9@cs.usfca.edu>
References: <20071213133455.172830@gmx.net>	<82dc0d190712130547t42b85b9dja9aa278f20c2ac19@mail.gmail.com>	<20071213140924.172850@gmx.net>
	<8959BB1B-AF8A-4475-A224-B7D0460505B9@cs.usfca.edu>
Message-ID: <4761A9BA.3030606@gmx.de>

Terence Parr schrieb:
> Hi Harald,
> 
> I apologize for the delay in getting the tree rewriting done.  I am back
> working on antlr now, well after I grade my final exam, but Kay Roepke
> is here for two weeksfrom Hamburg and we will be doing a lot of hacking.
> 
> In the meantime, you can do tree rewriting by returning a new tree
> from every rule.  Start by including an @after action I think that 
> makes a duplicate of the incoming tree $rule.start. When you need to do
> a rewrite, you will have to probably manually build the new tree for
> those productions needing a new tree.  Set the return value.  Ack, every
> reference to a rule will need to build up a new tree based upon what is
> returned.  This will be very messy and error prone.  Hmm...
> 
> Ter
> 

Does this mean you haven't written the parts so far that it works with
ANTLR rewritng syntax (whichever that may look like)? If I'm correct
then how long will you probably need for the missing parts?

Johannes

From parrt at cs.usfca.edu  Thu Dec 13 14:11:46 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 13 Dec 2007 14:11:46 -0800
Subject: [antlr-interest] Can tree rewriting be
	done	(easily/out-of-the-box) with the current ANTLR 3.x?
In-Reply-To: <4761A9BA.3030606@gmx.de>
References: <20071213133455.172830@gmx.net>	<82dc0d190712130547t42b85b9dja9aa278f20c2ac19@mail.gmail.com>	<20071213140924.172850@gmx.net>
	<8959BB1B-AF8A-4475-A224-B7D0460505B9@cs.usfca.edu>
	<4761A9BA.3030606@gmx.de>
Message-ID: <ABED5A63-E4EA-48C8-8F43-8D990866F2F9@cs.usfca.edu>


On Dec 13, 2007, at 1:52 PM, Johannes Luber wrote:
> Does this mean you haven't written the parts so far that it works with
> ANTLR rewritng syntax (whichever that may look like)? If I'm correct
> then how long will you probably need for the missing parts?

I'm not sure if you're asking me or Harald, but 3.1 has the rewrite  
stuff and seems to work but it is still in flux.

I am currently tracking down a nasty ANTLR analysis issue.

Ter

From Stephen.Hardy at digi.com  Thu Dec 13 14:47:08 2007
From: Stephen.Hardy at digi.com (Hardy, Stephen)
Date: Thu, 13 Dec 2007 14:47:08 -0800
Subject: [antlr-interest] Enhancement request for identifying imaginary
	tokens
Message-ID: <62BABE024B7C074E9194E9727A418979C4F0FD@dvs-sms-mail01.digi.com>

Maybe I missed something, but it would be nice if there was an option to
automatically "identify" all imaginary tokens.  Currently, this requires
explicit identification as per the following example:

struct_declarator
    : declarator (':' constant_expression)?	
        -> ^(STRUCT_DECLARATOR[$start] declarator constant_expression?)
    | ':' constant_expression			
        -> ^(STRUCT_DECLARATOR_ANON_BITFIELD[$start]
constant_expression)
    ;


Admittedly, it's not all that difficult to put the
MY_IMAGINARY_TOKEN[$start] construct everywhere in the tree writing
part, but it does make the code less readable.  Having an option to do
this by default would be very handy when debugging tree walkers.
Something like

options {
  IdentifyImaginaryTokensWithStart = true;
}

Regards,
SJH


From antlr.org at pb.co.za  Thu Dec 13 22:18:47 2007
From: antlr.org at pb.co.za (Pieter Breed)
Date: Fri, 14 Dec 2007 08:18:47 +0200
Subject: [antlr-interest] simple query language EBNF
In-Reply-To: <9acbed8c0712132214j100a48b5l7776631992eed94d@mail.gmail.com>
References: <9acbed8c0712132214j100a48b5l7776631992eed94d@mail.gmail.com>
Message-ID: <9acbed8c0712132218idfc8824gbeaf9fa4640d17de@mail.gmail.com>

Hi,

I am trying to get a small special purpose query language working with
ANTLR, and I am having some trouble sorting out the right way to do some
things.

The basic domain problem is this:

you have some keywords: 'from', 'with', 'display', 'filter', 'set'
an example of a valid "query" is this:

from    LastMonth MultipliedBy 3
filter  WeekDays
filter  Not Holidays
set     EachDay 8-hours
with    Expectations

The idea is that ANTLR only takes care of the big structure of the query
(sorting out what string value goes with from, what string value goes with
filter etc) and then I will use these strings and do custom parsing on them.
(Using reflections. Ex, LastMonth is a method on a specific object, it has a
method Multipliedby which takes a parameter 3 and so on)

My ANTLR problem is that I want the raw text "LastMonth MultipliedBy 3" as
output from ANTLR, but I don't know how to specify that rule. I don't know
how say "everything but one of the commandwords". Below I tried to use
string quoting to delimit the text I am interested in, but that also doesn't
work.

This is what I have at the moment (I am troubleshooting at the moment, so I
put the comments in queryLine rule to help with this.):

grammar WorkLogQL;

tokens {
    FROM = 'from';
    WITH = 'with';
    FILTER = 'filter';
    SET = 'set';
    DISPLAY = 'display';
}

queryLine
    :    fromSpec
        //(WS filterSpec)*
        //WS actionSpec
        //WS withSpec
    ;

fromSpec returns [IDateRange result]
    : FROM WS SPECTEXT
        {
            result = ParseDateRangeSpecification($SPECTEXT.value);
        }
    ;

withSpec
    :    WITH WS SPECTEXT
    ;

actionSpec
    : DISPLAY
    |    SET WS SPECTEXT
    ;

filterSpec
    :    FILTER WS SPECTEXT
    ;

SPECTEXT
    :    '\'' .+ '\''
    ;

WS
    :    (' '|'\t'|'\r'? '\n')+ {$channel=HIDDEN;} ;

As is (ie, with the comments) and this input:
from 'Today'

The parser falls over in SPECTEXT. When I am running in ANTLRWorks, in the
Interpreter mode, I get a tree that looks something like this:
<grammar worklogql>
<queryLine>
<fromSpec>
<from> - <MismatchedTokenException>

How can I get this working? Any ideas?

Regards,
Pieter
-- 

Tempus est mensura motus rerum mobilium.
Time is the measure of movement.

   -- Auctoritates Aristotelis

+27 82 567 6207
http://pieterbreed.blogspot.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071214/badf4503/attachment.html 

From w.pasman at tudelft.nl  Fri Dec 14 02:05:46 2007
From: w.pasman at tudelft.nl (W.Pasman@tudelft.nl)
Date: Fri, 14 Dec 2007 11:05:46 +0100
Subject: [antlr-interest] parsing operators with priorities via attribute
	grammar??
Message-ID: <4762557A.5010101@tudelft.nl>

Hi,
I am trying to write a parser for prolog.
Now in prolog there are operators with assigned priorities. There are 
dozens of operators, and writing a grammar rule for each operator would 
greately clutter the (already large) prolog grammar.
The prolog reference implementation ("Prolog: The Standard" by Deransart 
et al) uses an attribute grammar and we want to copy this as close as 
possible into the antlr grammar describing prolog.

Is there a way to do this operators-with-priority parsing using attributes?





Below a description of the tries I already did. I ran into lots of 
problems using semantic predicates, attributes, etc. I'm not sure which 
issues are the same underlying problem, and whether I run do maybe 
misunderstand parts or whether there are antlr bugs involved. So let me 
just discuss what I tried.
A very basic example illustrating the problems is this grammar

term::=NUMBER extraterms
extraterms::=(OP NUMBER)* (leaving out the priorities for a moment)
NUMBER::=1|2|3
OP::=a|b|c

To incorporate the priority handling in ANTLR you would want to write 
something like

extraterms[P]:
        (nextop=OP { prio(nextop)>P }?) =>
        OP NUMBER extraterms[prio(nextop)]
    |
    ;

so basically, we use the attribute P to limit the priority of the term 
that is being parsed
and, what we want is the parser to try read next OP, and if it is right 
priority continue parsing.
    if it is not right priority, then take the epsilon production rule 
instead.

note: I tested the parsers with antlrworks 1.1.5.
In some cases my grammar seemed to work as intended from the 
antlrworks-debugger, but it failed when running in the interpreter.






I noticed a number of problems with this and similar attempts

1. grammar fragments like {Token op=input.LA(1); 
getprio(op.getText())>0}? compiles to java code
            if ( !(Token op=input.LA(1); getprio(op.getText())>0) ) { .... }
which fails to compile (in java you can't declare variables inside a 
boolean test I think)

2. splitting out the initializer and the real test as in
    extraterms[int P]:
    {Token op=input.LT(1);} { getprio(op.getText())>0}? OP
    |
    ;
    does compile but the resulting parser just checks for OP in the 
input stream
    in fact it seems my grammar is now interpreted as

    writing extraterms[int P]:
    OP {Token op=input.LT(1);} { getprio(op.getText())>0}?
    |
    ;

which will parse the terms incorrectly: if an operator comes with the 
wrong priority the parse fails wth a FailedPredicateException, instead 
of succeeding using the epsilon production rule in that case.

After more attempts in this directoin  I got the impression that I might 
need the semantic predicates to get what I want. So next attempt

4. extraterms[...]: .... (p=OP {getprio(p.getText())>P}?)=> OP | ...
the semantic test (the term left of =>) calls a separate function 
testsynpred(). Problems now are:
a. the code does not pass the attribute P to testsynpred(),  so the ">" 
can not be evaluated in testsynpred
    (hence the generated java code does not even compile)
b. similarly the variable p (smaller p) is declared in the extraterms 
code section,
    not in testsynpred where the parser now wants to use it
    (another reason why generated java code again does not compile)

5. as an attempted workaround to get the attribute P to the testsynpred 
we define a global currentP and write
{ currentP=P; }
        ( {input.LA(1)==OP && getprio(input.LT(1).getText())<currentP }?)
But results in a code block
    if (backtracking==0) { currentP =P; }
so currentP is probably not set at all defeating the workaround.




From parrt at cs.usfca.edu  Fri Dec 14 09:32:15 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 09:32:15 -0800
Subject: [antlr-interest] Enhancement request for identifying imaginary
	tokens
In-Reply-To: <62BABE024B7C074E9194E9727A418979C4F0FD@dvs-sms-mail01.digi.com>
References: <62BABE024B7C074E9194E9727A418979C4F0FD@dvs-sms-mail01.digi.com>
Message-ID: <05205DFF-0F37-457C-8079-2E93985EBD00@cs.usfca.edu>

Hi Stephen, i'm not sure what you are asking for.  You must say what  
root node to create.  How would antlr know what you want?

thanks,

Ter
On Dec 13, 2007, at 2:47 PM, Hardy, Stephen wrote:

> Maybe I missed something, but it would be nice if there was an  
> option to
> automatically "identify" all imaginary tokens.  Currently, this  
> requires
> explicit identification as per the following example:
>
> struct_declarator
>    : declarator (':' constant_expression)?	
>        -> ^(STRUCT_DECLARATOR[$start] declarator constant_expression?)
>    | ':' constant_expression			
>        -> ^(STRUCT_DECLARATOR_ANON_BITFIELD[$start]
> constant_expression)
>    ;
>
>
> Admittedly, it's not all that difficult to put the
> MY_IMAGINARY_TOKEN[$start] construct everywhere in the tree writing
> part, but it does make the code less readable.  Having an option to do
> this by default would be very handy when debugging tree walkers.
> Something like
>
> options {
>  IdentifyImaginaryTokensWithStart = true;
> }
>
> Regards,
> SJH
>


From Stephen.Hardy at digi.com  Fri Dec 14 09:47:49 2007
From: Stephen.Hardy at digi.com (Hardy, Stephen)
Date: Fri, 14 Dec 2007 09:47:49 -0800
Subject: [antlr-interest] Enhancement request for identifying imaginary
	tokens
In-Reply-To: <05205DFF-0F37-457C-8079-2E93985EBD00@cs.usfca.edu>
Message-ID: <62BABE024B7C074E9194E9727A418979C4F100@dvs-sms-mail01.digi.com>

As I said, I have probably missed something obvious, but what I meant
was that

options { output = AST; IdentifyImaginaryTokensWithStart = true; }
tokens { FOO; }
foo:  bar baz  -> ^(FOO bar baz);

would be the same as what must now be done explicitly for each imaginary
node i.e.

options { output = AST; }
tokens { FOO; }
foo:  bar baz  -> ^(FOO[$start] bar baz);

Currently, it seems that without the [] 'constructor parameter' the
imaginary tokens do not get any line/colum number information.  Thus, if
a tree walker gets confused and tries to print an imaginary token in its
error message, then the line/col info is always 0:0.  This makes it
harder to debug, which is why I went through my grammar and explicitly
assigned the $start token to each imaginary token created.

(And now, having said that, maybe it is already the default and it was
something else that I did wrong which made me think otherwise; after
all, I do create a few extra nodes programmatically and maybe it was
these which exhibited the line/col problem.  If so, I apologize for
wasting your time.)

Regards,
SJH


> -----Original Message-----
> From: Terence Parr [mailto:parrt at cs.usfca.edu] 
> Sent: Friday, December 14, 2007 9:32 AM
> To: Hardy, Stephen
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Enhancement request for 
> identifying imaginary tokens
> 
> Hi Stephen, i'm not sure what you are asking for.  You must say what  
> root node to create.  How would antlr know what you want?
> 
> thanks,
> 
> Ter
> On Dec 13, 2007, at 2:47 PM, Hardy, Stephen wrote:
> 
> > Maybe I missed something, but it would be nice if there was an  
> > option to
> > automatically "identify" all imaginary tokens.  Currently, this  
> > requires
> > explicit identification as per the following example:
> >
> > struct_declarator
> >    : declarator (':' constant_expression)?	
> >        -> ^(STRUCT_DECLARATOR[$start] declarator 
> constant_expression?)
> >    | ':' constant_expression			
> >        -> ^(STRUCT_DECLARATOR_ANON_BITFIELD[$start]
> > constant_expression)
> >    ;
> >
> >
> > Admittedly, it's not all that difficult to put the
> > MY_IMAGINARY_TOKEN[$start] construct everywhere in the tree writing
> > part, but it does make the code less readable.  Having an 
> option to do
> > this by default would be very handy when debugging tree walkers.
> > Something like
> >
> > options {
> >  IdentifyImaginaryTokensWithStart = true;
> > }
> >
> > Regards,
> > SJH
> >
> 
> 

From parrt at cs.usfca.edu  Fri Dec 14 09:55:12 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 09:55:12 -0800
Subject: [antlr-interest] Enhancement request for identifying imaginary
	tokens
In-Reply-To: <62BABE024B7C074E9194E9727A418979C4F100@dvs-sms-mail01.digi.com>
References: <62BABE024B7C074E9194E9727A418979C4F100@dvs-sms-mail01.digi.com>
Message-ID: <2737EABB-AAC9-448A-9784-56B0B9306AA6@cs.usfca.edu>

OH!  I get it.  Well, I put the [...] ctor args there as you might  
want the 2nd not first token to be payload of imaginary...

e : x=INT op='+' y=INT -> ^(ADD[$op] $x $y );

Ter


From Stephen.Hardy at digi.com  Fri Dec 14 10:04:25 2007
From: Stephen.Hardy at digi.com (Hardy, Stephen)
Date: Fri, 14 Dec 2007 10:04:25 -0800
Subject: [antlr-interest] Enhancement request for identifying
	imaginarytokens
In-Reply-To: <2737EABB-AAC9-448A-9784-56B0B9306AA6@cs.usfca.edu>
Message-ID: <62BABE024B7C074E9194E9727A418979C4F101@dvs-sms-mail01.digi.com>

Hi Terence,

Understood, but with a large grammar it becomes a bit tedious to
explicitly put for all imaginary tokens.  Also, there is often no
convenient token to co-opt for the purpose.  I thought being able to
specify a default of the "start" token (whatever it may be) would be
useful for most folks, provided there was the option to override the
token assignment as you showed below, with the usual [] syntax.

Regards,
SJH


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Friday, December 14, 2007 9:55 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Enhancement request for 
> identifying imaginarytokens
> 
> OH!  I get it.  Well, I put the [...] ctor args there as you might  
> want the 2nd not first token to be payload of imaginary...
> 
> e : x=INT op='+' y=INT -> ^(ADD[$op] $x $y );
> 
> Ter
> 
> 

From parrt at cs.usfca.edu  Fri Dec 14 10:09:23 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 10:09:23 -0800
Subject: [antlr-interest] Enhancement request for identifying
	imaginarytokens
In-Reply-To: <62BABE024B7C074E9194E9727A418979C4F101@dvs-sms-mail01.digi.com>
References: <62BABE024B7C074E9194E9727A418979C4F101@dvs-sms-mail01.digi.com>
Message-ID: <DF6D4D68-C2B0-4263-9B3E-3D9912D309E4@cs.usfca.edu>


On Dec 14, 2007, at 10:04 AM, Hardy, Stephen wrote:

> Hi Terence,
>
> Understood, but with a large grammar it becomes a bit tedious to
> explicitly put for all imaginary tokens.  Also, there is often no
> convenient token to co-opt for the purpose.  I thought being able to
> specify a default of the "start" token (whatever it may be) would be
> useful for most folks, provided there was the option to override the
> token assignment as you showed below, with the usual [] syntax.

Possibly.  Are you overusing imaginary tokens though?  Seems you  
create one for every rewrite.  Why not just ref existing token?

Ter

From jaluber at gmx.de  Fri Dec 14 10:43:52 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 14 Dec 2007 19:43:52 +0100
Subject: [antlr-interest] Local backtracking
Message-ID: <4762CEE8.9010007@gmx.de>

Hi!

I'm wondering how one does determine which rules have to receive
"options {backtrack=true;}" so the warning regarding non-LL(*) vanishes.
Applying it to the marked rule alone doesn't work and making it global
because of one rule alone I can't give a predicate (because I believe it
would exclude valid token streams, too) seems too much.

Johannes

From parrt at cs.usfca.edu  Fri Dec 14 10:50:20 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 10:50:20 -0800
Subject: [antlr-interest] Local backtracking
In-Reply-To: <4762CEE8.9010007@gmx.de>
References: <4762CEE8.9010007@gmx.de>
Message-ID: <40BD63FA-DD48-41EF-AAB2-2C3F6285DF92@cs.usfca.edu>

The backtrack option should apply to all decisions in a rule...you  
might try on the offending subrule, however.

( options {...} : ...)

Ter
On Dec 14, 2007, at 10:43 AM, Johannes Luber wrote:

> Hi!
>
> I'm wondering how one does determine which rules have to receive
> "options {backtrack=true;}" so the warning regarding non-LL(*)  
> vanishes.
> Applying it to the marked rule alone doesn't work and making it global
> because of one rule alone I can't give a predicate (because I  
> believe it
> would exclude valid token streams, too) seems too much.
>
> Johannes


From siemsen at UCAR.EDU  Fri Dec 14 11:08:21 2007
From: siemsen at UCAR.EDU (Pete Siemsen)
Date: Fri, 14 Dec 2007 12:08:21 -0700
Subject: [antlr-interest] Perplexed about template option
In-Reply-To: <121320072037.25127.47619822000C693C0000622722007504380B020E0DA10E0307@comcast.net>
References: <121320072037.25127.47619822000C693C0000622722007504380B020E0DA10E0307@comcast.net>
Message-ID: <A308B4AA-D28B-4529-A087-C2DA409E1734@UCAR.EDU>

I think the main reason to use templates is to allow you to easily  
change your output language.  Suppose you are parsing input language  
A and producing either output language B or output language C.   
Templates provide a great mechanism for this.  But suppose A, B and C  
have major elements that appear in a different order.  I solve this  
by saving up Java variables as I parse and then calling a single  
template from one rule.

Dunno if this helps.  I'm learning bigtime, and I confess I don't  
really know how to use the implicit string templates returned by  
individual rules.

-- Pete



On Dec 13, 2007, at 1:37 PM, ima_band at comcast.net wrote:

> Hi,
>
> To my sheer delight I am generating tons of code with ANTLR without  
> having to deal with the more complex AST trees. But since I'm using  
> the template option all of my rules return an implicit string  
> template, right? Trouble is, unless I'm mistaken, this ties you  
> into having template output that mimics the hierarchy (i.e.  
> nesting) of your input data. When I created a DataObject wrapper it  
> worked fine but my Bean implementation needed field name and type  
> data in two separate parts of the file. At first I imagined being  
> able to invoke 2 different templates from my columnDef rule and  
> pass them up and into my outermost template as two separate  
> parameters. As far as I can tell that is not possible. Instead I  
> created an aggregate FieldDef class in the @members area and added  
> them to a fieldDefList as columns where recognized down in the  
> columnDef rule then passed the list of aggregates to the outermost  
> template and leveraged StringTemplates var ious i terator features.
>
> I was forced to abandon what I thought was the stated intent of the  
> template option (bubbling up STs) and piece together a bunch of  
> Java code instead. Don't get me wrong, applying templates to multi- 
> valued attributes is pretty cool and gets me where I want to be.  
> But if you could emit multiple STs for the same rule then you could  
> simply pass them to the outermost template and stick them where  
> they need to be! No muss. No fuss. No unneeded class definitions.
>
> Thoughts?
>
> Jeff
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071214/e61c2094/attachment.html 

From jaluber at gmx.de  Fri Dec 14 12:24:45 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 14 Dec 2007 21:24:45 +0100
Subject: [antlr-interest] rewrite rule translation to tree grammar
Message-ID: <4762E68D.2040202@gmx.de>

Hi,

I have the following rule:

qualified_identifier
   :   (i1=IDENTIFIER -> ^(QUALIFIED_IDENTIFIER $i1))
       (DOT i2=IDENTIFIER -> ^($qualified_identifier DOT $i2))*
   ;

But I haven't found an example in TDAR which explains the equivalent
rule for a tree grammar. Can someone help?

Johannes

From parrt at cs.usfca.edu  Fri Dec 14 12:52:37 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 12:52:37 -0800
Subject: [antlr-interest] rewrite rule translation to tree grammar
In-Reply-To: <4762E68D.2040202@gmx.de>
References: <4762E68D.2040202@gmx.de>
Message-ID: <2E986157-4CDA-4EA3-A3E3-589094894E88@cs.usfca.edu>

hi. that seems incorrect to me.  You can't have a tree as a root  
node.  Imagine creating $qualified_identifier as tree in first subrule  
then making root in (...)*.  Probably not right.
Ter
On Dec 14, 2007, at 12:24 PM, Johannes Luber wrote:

> Hi,
>
> I have the following rule:
>
> qualified_identifier
>   :   (i1=IDENTIFIER -> ^(QUALIFIED_IDENTIFIER $i1))
>       (DOT i2=IDENTIFIER -> ^($qualified_identifier DOT $i2))*
>   ;
>
> But I haven't found an example in TDAR which explains the equivalent
> rule for a tree grammar. Can someone help?
>
> Johannes


From jaluber at gmx.de  Fri Dec 14 13:09:48 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 14 Dec 2007 22:09:48 +0100
Subject: [antlr-interest] rewrite rule translation to tree grammar
In-Reply-To: <2E986157-4CDA-4EA3-A3E3-589094894E88@cs.usfca.edu>
References: <4762E68D.2040202@gmx.de>
	<2E986157-4CDA-4EA3-A3E3-589094894E88@cs.usfca.edu>
Message-ID: <4762F11C.60401@gmx.de>

Terence Parr schrieb:
> hi. that seems incorrect to me.  You can't have a tree as a root node. 
> Imagine creating $qualified_identifier as tree in first subrule then
> making root in (...)*.  Probably not right.
> Ter

Having thought about your answer, it explains one of my difficulties. I
tried to mimic the following example:

expr : (INT -> INT) ('+' i=INT -> ^('+' $expr $i) )* ;

The solution seems to be that I need an equivalent for the '+'. But my
rule doesn't have a token which could be the overall root. What do you
suggest? And what would be the tree grammar equivalent?

Johannes

> On Dec 14, 2007, at 12:24 PM, Johannes Luber wrote:
> 
>> Hi,
>>
>> I have the following rule:
>>
>> qualified_identifier
>>   :   (i1=IDENTIFIER -> ^(QUALIFIED_IDENTIFIER $i1))
>>       (DOT i2=IDENTIFIER -> ^($qualified_identifier DOT $i2))*
>>   ;
>>
>> But I haven't found an example in TDAR which explains the equivalent
>> rule for a tree grammar. Can someone help?
>>
>> Johannes
> 


From parrt at cs.usfca.edu  Fri Dec 14 13:16:12 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 13:16:12 -0800
Subject: [antlr-interest] rewrite rule translation to tree grammar
In-Reply-To: <4762F11C.60401@gmx.de>
References: <4762E68D.2040202@gmx.de>
	<2E986157-4CDA-4EA3-A3E3-589094894E88@cs.usfca.edu>
	<4762F11C.60401@gmx.de>
Message-ID: <0D09A5A9-2C2A-4CD2-B2FD-DDBB66C7793F@cs.usfca.edu>


On Dec 14, 2007, at 1:09 PM, Johannes Luber wrote:

> Terence Parr schrieb:
>> hi. that seems incorrect to me.  You can't have a tree as a root  
>> node.
>> Imagine creating $qualified_identifier as tree in first subrule then
>> making root in (...)*.  Probably not right.
>> Ter
>
> Having thought about your answer, it explains one of my  
> difficulties. I
> tried to mimic the following example:
>
> expr : (INT -> INT) ('+' i=INT -> ^('+' $expr $i) )* ;
>
> The solution seems to be that I need an equivalent for the '+'. But my
> rule doesn't have a token which could be the overall root. What do you
> suggest? And what would be the tree grammar equivalent?

First, allow me to suggest:

expr : INT ('+'^ INT)* ;

To match either in tree grammar:

expr : ^('+' expr expr)
	| INT
	;

Ter

From Stephen.Hardy at digi.com  Fri Dec 14 13:19:26 2007
From: Stephen.Hardy at digi.com (Hardy, Stephen)
Date: Fri, 14 Dec 2007 13:19:26 -0800
Subject: [antlr-interest] Enhancement request for
	identifyingimaginarytokens
In-Reply-To: <DF6D4D68-C2B0-4263-9B3E-3D9912D309E4@cs.usfca.edu>
Message-ID: <62BABE024B7C074E9194E9727A418979C4F102@dvs-sms-mail01.digi.com>

You're right in that I have slightly overused ITs, however in cases
where there is a logical choice (like the operator in expressions) I
just pull that token to the root of the new sub-tree.  It's when one
gets to higher level constructs of the language where ITs become more
useful, since there is often no reasonable token to use as the root.
For example, one could use the ';' that terminates statements as the
root node for all statement sub-trees, but I think it's nicer to have
distinct ITs for expression statements, if statements, for statements
etc. -- the theory is that this makes tree walkers more efficient, if
not easier to understand.  In many cases the actual ';' or other
delimiting token is not actually part of the rule where one would like
to ref it, since it would not be the most natural way to express the
grammar.


Regards,
SJH

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Friday, December 14, 2007 10:09 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Enhancement request for 
> identifyingimaginarytokens
> 
> 
> On Dec 14, 2007, at 10:04 AM, Hardy, Stephen wrote:
> 
> > Hi Terence,
> >
> > Understood, but with a large grammar it becomes a bit tedious to
> > explicitly put for all imaginary tokens.  Also, there is often no
> > convenient token to co-opt for the purpose.  I thought being able to
> > specify a default of the "start" token (whatever it may be) would be
> > useful for most folks, provided there was the option to override the
> > token assignment as you showed below, with the usual [] syntax.
> 
> Possibly.  Are you overusing imaginary tokens though?  Seems you  
> create one for every rewrite.  Why not just ref existing token?
> 
> Ter
> 

From parrt at cs.usfca.edu  Fri Dec 14 13:25:05 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 13:25:05 -0800
Subject: [antlr-interest] fixed nasty DFA analysis issue
Message-ID: <B121D0C8-E355-42C3-B357-9CF43751BFF6@cs.usfca.edu>

Fixed:

http://www.antlr.org:8888/browse/ANTLR-178

ANTLR detected but failed to announce the error as it thought it would  
retry with k=1. It just didn't. ;) Did lots of clean up.   Added some  
tests; doing more now.  Will push a build later.

Ter
---------------
My changes:

December 13-14, 2007

* I abort entire DFA construction now when I see recursion in > 1 alt.
   Decision is non-LL(*) even if some pieces are LL(*).  Safer to bail
   out and try with fixed k.  If user set fixed k then it continues  
because
   analysis will eventually terminate for sure.  If a pred is  
encountered
   and k=* and it's non-LL(*), it aborts and retries at k=1 but does NOT
   emit an error.

* Decided that recursion overflow while computing a lookahead DFA is
   serious enough that I should bail out of entire DFA computation.
   Previously analysis tried to keep going and made the rules about
   how analysis worked more complicated.  Better to simply abort when
   decision can't be computed with current max stack (-Xm option).
   User can adjust or add predicate etc...  This is now an error
   not a warning.

* Cleaned up how DFA construction/analysis aborts due to non-LL(*) and
   overflow etc...  Throws exceptions now, which cleans up a bunch of IF
   checks etc...  Very nice now. Exceptions:
         analysis/AnalysisRecursionOverflowException.java
         analysis/AnalysisTimeoutException.java
         analysis/NonLLStarDecisionException.java

* ErrorManager.grammarWarning() counted them as errors not warnings.

* Unreachable alt warnings are now errors.

* The upshot of these changes is that I fixed ANTLR-178 and did
   lots of refactoring of code handling analysis failure.


From parrt at cs.usfca.edu  Fri Dec 14 13:30:30 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 13:30:30 -0800
Subject: [antlr-interest] Enhancement request for
	identifyingimaginarytokens
In-Reply-To: <62BABE024B7C074E9194E9727A418979C4F102@dvs-sms-mail01.digi.com>
References: <62BABE024B7C074E9194E9727A418979C4F102@dvs-sms-mail01.digi.com>
Message-ID: <338F0FCC-574F-4D77-B05E-FCFCC8556749@cs.usfca.edu>

Hi. Why not do what I do:

s : 'if' e 'then' s -> ^('if' e s)
   | e ';' -> e
   ;

etc...  no need for imaginary tokens.  Remember imag is for nodes that  
have no corresponding input token.

Ter
On Dec 14, 2007, at 1:19 PM, Hardy, Stephen wrote:

> You're right in that I have slightly overused ITs, however in cases
> where there is a logical choice (like the operator in expressions) I
> just pull that token to the root of the new sub-tree.  It's when one
> gets to higher level constructs of the language where ITs become more
> useful, since there is often no reasonable token to use as the root.
> For example, one could use the ';' that terminates statements as the
> root node for all statement sub-trees, but I think it's nicer to have
> distinct ITs for expression statements, if statements, for statements
> etc. -- the theory is that this makes tree walkers more efficient, if
> not easier to understand.  In many cases the actual ';' or other
> delimiting token is not actually part of the rule where one would like
> to ref it, since it would not be the most natural way to express the
> grammar.


From jaluber at gmx.de  Fri Dec 14 13:34:09 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 14 Dec 2007 22:34:09 +0100
Subject: [antlr-interest] rewrite rule translation to tree grammar
In-Reply-To: <0D09A5A9-2C2A-4CD2-B2FD-DDBB66C7793F@cs.usfca.edu>
References: <4762E68D.2040202@gmx.de>
	<2E986157-4CDA-4EA3-A3E3-589094894E88@cs.usfca.edu>
	<4762F11C.60401@gmx.de>
	<0D09A5A9-2C2A-4CD2-B2FD-DDBB66C7793F@cs.usfca.edu>
Message-ID: <4762F6D1.9060907@gmx.de>

Terence Parr schrieb:
> First, allow me to suggest:
> 
> expr : INT ('+'^ INT)* ;
> 
> To match either in tree grammar:
> 
> expr : ^('+' expr expr)
>     | INT
>     ;

So my rule should be:

qualified_identifier
   :   (i1=IDENTIFIER -> ^(QUALIFIED_IDENTIFIER $i1))
       (DOT i2=IDENTIFIER -> ^(ROOT $qualified_identifier DOT $i2))*
   ;

And the tree grammar equivalent:

qualified_identifier
   :   ^(ROOT qualified_identifier DOT i2=IDENTIFIER)
   |   ^(QUALIFIED_IDENTIFIER IDENTIFIER)
   ;

Am I right?

Johannes

From parrt at cs.usfca.edu  Fri Dec 14 14:23:59 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 14 Dec 2007 14:23:59 -0800
Subject: [antlr-interest] rewrite rule translation to tree grammar
In-Reply-To: <4762F6D1.9060907@gmx.de>
References: <4762E68D.2040202@gmx.de>
	<2E986157-4CDA-4EA3-A3E3-589094894E88@cs.usfca.edu>
	<4762F11C.60401@gmx.de>
	<0D09A5A9-2C2A-4CD2-B2FD-DDBB66C7793F@cs.usfca.edu>
	<4762F6D1.9060907@gmx.de>
Message-ID: <5470FB64-A30F-4EA8-9AF1-4E2F79F4B3E0@cs.usfca.edu>


On Dec 14, 2007, at 1:34 PM, Johannes Luber wrote:

> Terence Parr schrieb:
>> First, allow me to suggest:
>>
>> expr : INT ('+'^ INT)* ;
>>
>> To match either in tree grammar:
>>
>> expr : ^('+' expr expr)
>>    | INT
>>    ;
>
> So my rule should be:
>
> qualified_identifier
>   :   (i1=IDENTIFIER -> ^(QUALIFIED_IDENTIFIER $i1))
>       (DOT i2=IDENTIFIER -> ^(ROOT $qualified_identifier DOT $i2))*
>   ;

why not

qid : ID (DOT^ ID)* ;

> And the tree grammar equivalent:
>
> qualified_identifier
>   :   ^(ROOT qualified_identifier DOT i2=IDENTIFIER)
>   |   ^(QUALIFIED_IDENTIFIER IDENTIFIER)
>   ;

qid : ^(DOT qid)
       |  ID
       ;

Ter

From jaluber at gmx.de  Fri Dec 14 14:43:34 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 14 Dec 2007 23:43:34 +0100
Subject: [antlr-interest] rewrite rule translation to tree grammar
In-Reply-To: <5470FB64-A30F-4EA8-9AF1-4E2F79F4B3E0@cs.usfca.edu>
References: <4762E68D.2040202@gmx.de>
	<2E986157-4CDA-4EA3-A3E3-589094894E88@cs.usfca.edu>
	<4762F11C.60401@gmx.de>
	<0D09A5A9-2C2A-4CD2-B2FD-DDBB66C7793F@cs.usfca.edu>
	<4762F6D1.9060907@gmx.de>
	<5470FB64-A30F-4EA8-9AF1-4E2F79F4B3E0@cs.usfca.edu>
Message-ID: <47630716.6020607@gmx.de>

Terence Parr schrieb:
> 
> On Dec 14, 2007, at 1:34 PM, Johannes Luber wrote:
> 
>> Terence Parr schrieb:
>>> First, allow me to suggest:
>>>
>>> expr : INT ('+'^ INT)* ;
>>>
>>> To match either in tree grammar:
>>>
>>> expr : ^('+' expr expr)
>>>    | INT
>>>    ;
>>
>> So my rule should be:
>>
>> qualified_identifier
>>   :   (i1=IDENTIFIER -> ^(QUALIFIED_IDENTIFIER $i1))
>>       (DOT i2=IDENTIFIER -> ^(ROOT $qualified_identifier DOT $i2))*
>>   ;
> 
> why not
> 
> qid : ID (DOT^ ID)* ;
> 
>> And the tree grammar equivalent:
>>
>> qualified_identifier
>>   :   ^(ROOT qualified_identifier DOT i2=IDENTIFIER)
>>   |   ^(QUALIFIED_IDENTIFIER IDENTIFIER)
>>   ;
> 
> qid : ^(DOT qid)
>       |  ID
>       ;

Because I didn't realize that DOT equals '.'... I will change my grammar
 accordingly. But now I've got two other questions:

1. What is the right translation for c?

r[CommonTree c] : ID -> ^(ID {$c}) ;

2. What do I have to write in this instance to make it syntactically
correct?

s: NEW t[$NEW.tree] -> t;

t[CommonTree newTree]: q -> ^(q {$newTree});

Johannes

From takpoli at hotmail.com  Fri Dec 14 16:09:58 2007
From: takpoli at hotmail.com (Tak-po Li)
Date: Fri, 14 Dec 2007 19:09:58 -0500
Subject: [antlr-interest] escaped identifier in Verilog
Message-ID: <BAY105-W16816F446259B37804747DAB600@phx.gbl>


 
Thanks, Gavin, I change it as you suggested.  It helps passing the compiling.  I will report more when I obtain the final result.
 
Tak
 
 
 
> Date: Fri, 14 Dec 2007 07:21:16 +1300> To: takpoli at hotmail.com; antlr-interest at antlr.org> From: antlr at mirality.co.nz> Subject: Re: [antlr-interest] escaped identifier in Verilog> > At 05:34 14/12/2007, Tak-po Li wrote:> >I recall the Verilog example in antlr.org for v2 handles it as:> >> >ESCAPED_IDENTIFIER> > : '\\'! (~ '\040')+ ('\040'|'\t'|'\n')!> > ;> > First off, try changing the '\040's into ' 's. I'm not sure if v3 > supports octal escapes. > 
_________________________________________________________________
Don't get caught with egg on your face. Play Chicktionary!
http://club.live.com/chicktionary.aspx?icid=chick_wlhmtextlink1_dec
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071214/28408fdc/attachment-0001.html 

From barabucc at cs.unibo.it  Sat Dec 15 05:52:02 2007
From: barabucc at cs.unibo.it (Gioele Barabucci)
Date: Sat, 15 Dec 2007 14:52:02 +0100
Subject: [antlr-interest] FishEye tarballs are broken
Message-ID: <fk0m2j$a31$1@ger.gmane.org>

Hello,

the tarballs (tbz2, tgz, zip) generated by FishEye are broken. I tried many
times to download them I always got a broken file. tbz2 and tgz tarballs
look truncated: they contain some of the files, but not all of them. tar
refuses to extract these tarballs: 

| gzip: stdin: unexpected end of file
| tar: Unexpected EOF in archive

-- 
Gioele Barabucci <barabucc at cs.unibo.it>


From jimi at temporal-wave.com  Sat Dec 15 14:47:29 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 15 Dec 2007 14:47:29 -0800
Subject: [antlr-interest] Problem with "C" code generation on tree parser
In-Reply-To: <7AB1C26C64423249964AB392C6EBF0E0018B768F@discovery.isis.vanderbilt.edu>
Message-ID: <"LC326AEC1BDB341b8AC6D7F248390F47E.1197759128.scalix.temporal-wave.com*"@MHS>

I was travelling and not able to look at this, but if you care to send
me your grammar I will see what is going on. This sounds like something
I have fixed in the development version.

 

Jim

 

  _____  

From: Harmon Nine [mailto:hnine at isis.vanderbilt.edu] 
Sent: Tuesday, December 11, 2007 2:18 PM
To: antlr-interest Interest
Subject: [antlr-interest] Problem with "C" code generation on tree
parser

 

Hello all.

 

Since C++ code generation is not available for 3.0.1, I?m trying to
interface to the ?C?-generated code.

 

The options in the ?.g? file are:

options {

  language=C;

  output=AST;

  tokenVocab=MatLab;

  ASTLabelType=CommonTree;

}

 

 

The compiler (visual studio 2005) is currently complaining about 2
things:

 

1)

c:\projects\hcddes\trunk\mfile\mfileparser\matlabudm.c(1130) : error
C2039: 'stop' : is not a member of 'MatLabUdm_input_return_struct'

c:\projects\hcddes\trunk\mfile\mfileparser\matlabudm.h(99) : see
declaration of 'MatLabUdm_input_return_struct'

 

Here is the offending line in ?matlabudm.c?:

//------------

pMatLabUdm_BlockPop();

 

retval.stop = LT(-1); /* OFFENDING LINE */

retval.tree = ADAPTOR->rulePostProcessing(ADAPTOR, root_0);

ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start,
retval.stop); /* SEE 2) BELOW */

//------------

 

Here?s the MatLabUdm_input_return_struct definition:

 

//------------

typedef struct MatLabUdm_input_return_struct

{

    pANTLR3_BASE_TREE       start;/* @returnScope.ruleReturnMembers() */

    pANTLR3_BASE_TREE   tree;

    /* End @returnScope.ruleReturnMembers() */   

}

    MatLabUdm_input_return;

//------------

 

QUESTION:  should ?stop? be added as a member of this struct, i.e. as
type ?pANTLR3_BASE_TREE??  I?ve tried doing this in ?C.stg?, but there
is still a problem (see below).

 

 

2)  The compiler also complains about an incompatible type being passed
to ?ADAPTOR->setTokenBoundaries? in the above code:

 

c:\projects\hcddes\trunk\mfile\mfileparser\matlabudm.c(1132) : warning
C4133: 'function' : incompatible types - from 'pANTLR3_BASE_TREE' to
'pANTLR3_COMMON_TOKEN'

 

How can this be remedied?

 

 

Thanks.

-- Harmon


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071215/c998d3cd/attachment.html 

From kroepke at classdump.org  Sat Dec 15 23:29:44 2007
From: kroepke at classdump.org (=?ISO-8859-1?Q?Kay_R=F6pke?=)
Date: Sat, 15 Dec 2007 23:29:44 -0800
Subject: [antlr-interest] license question for ANTLR v3 examples
In-Reply-To: <BAY125-W33C06A7A8FCA90B02A0479C5650@phx.gbl>
References: <BAY125-W33C06A7A8FCA90B02A0479C5650@phx.gbl>
Message-ID: <A791272F-79CD-4285-B214-14DA3BF26E3B@classdump.org>

Hi!

Everything that's offered through the download page (http://antlr.org/download.html 
) is licensed under the modified BSD licence.
It would surprise me, if there are any restrictions, other maybe the  
user supplied grammars at http://antlr.org/grammar/list
Those might come with a different licence attached.

I'll ask Ter directly when I see him tomorrow, but as the examples  
live in the same depot ANTLR does, I'd say it's BSD.

HTH,
-k
On Dec 11, 2007, at 11:09 PM, Auber Lin wrote:

>
> hi mailing-list members,
>     i does not find any clear statement for the license description  
> to ANTLR v3 examples located at http://www.antlr.org/download/examples-v3.tar.gz
> i'm not sure whether i could modify the example grammars for a  
> business product. Anyone can help with this kind of information?
>
> Cheers!
> Auber
>
> _________________________________________________________________
> Don't get caught with egg on your face. Play Chicktionary!
> http://club.live.com/chicktionary.aspx?icid=chick_wlhmtextlink1_dec

-- 
Kay R?pke
http://classdump.org/







From jaluber at gmx.de  Sun Dec 16 11:12:23 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 16 Dec 2007 20:12:23 +0100
Subject: [antlr-interest] Strange error message
Message-ID: <47657897.3000604@gmx.de>

Hi,

Does anyone know the source of the follwing error message?

"[20:06:43] error(114):
/home/verequus/Studium/Diplomarbeit_Experimental/CSharpML/CSharp3ParserSyntax.g:0:0:
attribute is not a token, parameter, or return value: member"

I don't find any rule which includes the string "member" as the whole
string so I'm mystified where to check for the cause.

Thanks in advance
Johannes

From antlr at mirality.co.nz  Sun Dec 16 12:00:29 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 17 Dec 2007 09:00:29 +1300
Subject: [antlr-interest] Strange error message
In-Reply-To: <47657897.3000604@gmx.de>
References: <47657897.3000604@gmx.de>
Message-ID: <20071216200043.D084911EAC6@www.antlr.org>

At 08:12 17/12/2007, Johannes Luber wrote:
 >Does anyone know the source of the follwing error message?
 >
 >"[20:06:43] error(114):
 >/home/verequus/Studium/Diplomarbeit_Experimental/CSharpML/CSharp3Pa
 >rserSyntax.g:0:0: attribute is not a token, parameter, or return 

 >value: member"
 >
 >I don't find any rule which includes the string "member" as the
 >whole string so I'm mystified where to check for the cause.

Well, I can't be too specific without seeing your grammar, but you 
could try turning off "whole word search" in your 
editor.  Sometimes that won't find things like "$member".  (And 
usually this sort of error would be generated from either 
"$member" or "$*.member".)


From mark at antelope.nildram.co.uk  Sun Dec 16 14:03:53 2007
From: mark at antelope.nildram.co.uk (Mark)
Date: Sun, 16 Dec 2007 23:03:53 +0100
Subject: [antlr-interest] Problem with recursive rules
Message-ID: <20071216230359.E45432C9D6F@smtp.nildram.co.uk>

Hi,

I've just discovered ANTLR and it looks like a fantastic tool, but I'd be
grateful if anyone here could offer me any help with the following..

If I try to parse an IF statement in a language with a rule like this:

statement =
'{' statement '}'
|  ....
|  'if' expression 'then' statement 'else' statement

Then I get a conflict warning.  Looking at it in Antlrworks shows that the
problem is: if it finds a statement like "if (a) then if (b) then
doSomething; else doSomethingElse", it doesn't know which 'if' the 'else'
applies to.  It should always apply to the inner one (ie, the "if b" in this
example), but how do I tell ANTLR that?

Thanks,
Mark.


________________________________________________
Message sent using UebiMiau 2.7.2


From jaluber at gmx.de  Sun Dec 16 15:34:23 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 17 Dec 2007 00:34:23 +0100
Subject: [antlr-interest] Problem with recursive rules
In-Reply-To: <20071216230359.E45432C9D6F@smtp.nildram.co.uk>
References: <20071216230359.E45432C9D6F@smtp.nildram.co.uk>
Message-ID: <4765B5FF.1060607@gmx.de>

Mark schrieb:
> Hi,
> 
> I've just discovered ANTLR and it looks like a fantastic tool, but I'd be
> grateful if anyone here could offer me any help with the following..
> 
> If I try to parse an IF statement in a language with a rule like this:
> 
> statement =
> '{' statement '}'
> |  ....
> |  'if' expression 'then' statement 'else' statement
> 
> Then I get a conflict warning.  Looking at it in Antlrworks shows that the
> problem is: if it finds a statement like "if (a) then if (b) then
> doSomething; else doSomethingElse", it doesn't know which 'if' the 'else'
> applies to.  It should always apply to the inner one (ie, the "if b" in this
> example), but how do I tell ANTLR that?

ANTLR does already that. You can suppress the warning by adding a
symantic predicate like:

if_statement
	:	IF OPEN_PARENS bool_expression CLOSE_PARENS embedded_statement
((ELSE)=> ELSE embedded_statement)?
	;

as I use it.

Johannes

From mark at antelope.nildram.co.uk  Sun Dec 16 15:13:43 2007
From: mark at antelope.nildram.co.uk (Mark)
Date: Mon, 17 Dec 2007 0:13:43 +0100
Subject: [antlr-interest] Problem with recursive rules
Message-ID: <20071217001344.DC9EDC55F9@smtp.nildram.co.uk>

Hi,

Thank you very much for your reply!

I am still having some very strange behaviour though.  I have the ollowing
lexical rules:

N	:	('0'..'9');
L	:	(('A'..'Z')|('a'..'z'));
IDENTIFIER
:	L ((L|N)*);

However, whenever I generate code I am told that "token definition N is
unreachable" even though it is right there..

Also, AntlrWorks's "interpreter" and "debugger" do not seem to work properly
at all.  The debugger apparantly tries to compile a class called "__test__"
which fails to compile because it cannot find the lexer and parser classes
that Antlr generated.  It may also be because those classes also do not seem
to compile; the Java compiler gives errors like:

[00:07:14] \tmp\antlrworks\tParser.java:1525: orphaned default
[00:07:14]             default();
[00:07:14]             ^
[00:07:14] \tmp\antlrworks\tParser.java:1525: : expected
[00:07:14]             default();
[00:07:14]                    ^
[00:07:14] \tmp\antlrworks\tParser.java:1525: illegal start of expression
[00:07:14]             default();
[00:07:14]                     ^
[00:07:14] \tmp\antlrworks\tParser.java:1593: <identifier> expected
[00:07:14]     public final void default() throws RecognitionException {
[00:07:14]                      ^

Is there any solution for this?

Mark

________________________________________________
Message sent using UebiMiau 2.7.2


From auberlin at hotmail.com  Sun Dec 16 18:55:44 2007
From: auberlin at hotmail.com (Auber Lin)
Date: Mon, 17 Dec 2007 02:55:44 +0000
Subject: [antlr-interest] license question for ANTLR v3 examples
In-Reply-To: <A791272F-79CD-4285-B214-14DA3BF26E3B@classdump.org>
References: <BAY125-W33C06A7A8FCA90B02A0479C5650@phx.gbl>
	<A791272F-79CD-4285-B214-14DA3BF26E3B@classdump.org>
Message-ID: <BAY125-W27ED0CA972AD6853DF5962C5620@phx.gbl>


Kay,
  Thank you for your clarification, BSD license is good enough for me.
 
Cheers!
Auber
 
> CC: antlr-interest at antlr.org> From: kroepke at classdump.org> To: auberlin at hotmail.com> Subject: Re: [antlr-interest] license question for ANTLR v3 examples> Date: Sat, 15 Dec 2007 23:29:44 -0800> > Hi!> > Everything that's offered through the download page (http://antlr.org/download.html > ) is licensed under the modified BSD licence.> It would surprise me, if there are any restrictions, other maybe the > user supplied grammars at http://antlr.org/grammar/list> Those might come with a different licence attached.> > I'll ask Ter directly when I see him tomorrow, but as the examples > live in the same depot ANTLR does, I'd say it's BSD.> > HTH,> -k> On Dec 11, 2007, at 11:09 PM, Auber Lin wrote:> > >> > hi mailing-list members,> > i does not find any clear statement for the license description > > to ANTLR v3 examples located at http://www.antlr.org/download/examples-v3.tar.gz> > i'm not sure whether i could modify the example grammars for a > > business product. Anyone can help with this kind of information?> >> > Cheers!> > Auber> >> > _________________________________________________________________> > Don't get caught with egg on your face. Play Chicktionary!> > http://club.live.com/chicktionary.aspx?icid=chick_wlhmtextlink1_dec> > -- > Kay R?pke> http://classdump.org/> > > > > > 
_________________________________________________________________
Share life as it happens with the new Windows Live.
http://www.windowslive.com/share.html?ocid=TXT_TAGHM_Wave2_sharelife_122007
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071217/d51f1b94/attachment.html 

From akhailtash at gmail.com  Sun Dec 16 19:41:59 2007
From: akhailtash at gmail.com (Amal Khailtash)
Date: Sun, 16 Dec 2007 22:41:59 -0500
Subject: [antlr-interest] Preserve C/C++ comments in ANTLR v3
Message-ID: <f6a04d790712161941j6d522b6boad0b727f3fd8bc62@mail.gmail.com>

I need to extract comments from C/C++/Java source file.  Normally comments
are thrown away and they are defined as lexer rules (in ANTLR v3):

  // Single-line comments
  SL_COMMENT
    : '//' ( ~('\r'|'\n')* ) '\r'? '\n' {skip();}
    ;

  // Multi-line comments
  ML_COMMENT
    : '/*' (options {greedy=false;} : .)* '*/' {skip();}
    ;

Basically I need something like this:

  comment : sl_comment | ml_comment ;

  sl_comment : '//' COMMENT_LINE ;

  ml_comment : '/*' COMMENT_TEXT '*/' ;

How do I define COMMENT_LINE and COMMENT_TEXT?  Especially if I am ignoring
whitespace, it becomes more confusing.
Any hints or pointers would be appreciated,
-- Amal*

*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071216/d6ddce27/attachment.html 

From antlr at mirality.co.nz  Sun Dec 16 23:05:15 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 17 Dec 2007 20:05:15 +1300
Subject: [antlr-interest] Problem with recursive rules
In-Reply-To: <20071217001344.DC9EDC55F9@smtp.nildram.co.uk>
References: <20071217001344.DC9EDC55F9@smtp.nildram.co.uk>
Message-ID: <20071217070526.83D9911EB5E@www.antlr.org>

At 12:13 17/12/2007, Mark wrote:
 >the Java compiler gives errors like:
 >
 >[00:07:14] \tmp\antlrworks\tParser.java:1525: orphaned default
 >[00:07:14]             default();
 >[00:07:14]             ^
 >[00:07:14] \tmp\antlrworks\tParser.java:1525: : expected
 >[00:07:14]             default();
 >[00:07:14]                    ^
 >[00:07:14] \tmp\antlrworks\tParser.java:1525: illegal start of
 >expression
 >[00:07:14]             default();
 >[00:07:14]                     ^
 >[00:07:14] \tmp\antlrworks\tParser.java:1593: <identifier>
 >expected
 >[00:07:14]     public final void default() throws
 >RecognitionException {
 >[00:07:14]                      ^

This means that you probably have a rule called "default" in your 
grammar.  You'll need to rename it, as it conflicts with a Java 
reserved keyword.


From marco.bakera at tu-dortmund.de  Mon Dec 17 02:50:20 2007
From: marco.bakera at tu-dortmund.de (Marco Bakera)
Date: Mon, 17 Dec 2007 11:50:20 +0100
Subject: [antlr-interest] ANTLR parsing too lazy
Message-ID: <200712171150.20607.marco.bakera@tu-dortmund.de>

Hey everybody,

It seem that the parser that I use for parsing mathematical expressions 
accepts inputs like 

'(a & b))' 

although there is no rule for the second closing parenthesis. This expression 
will be parsed into a syntax tree like the following

&
+- a
\- b

Whatever follows '( a & b)' will be ignored since no rules matches. 

How can I manage to let antlr throw an exception when the input reaches a 
place where no rule matches?

Thanks for any kind of help.

Greetings,
Marco.

From antlr at shmuelhome.mine.nu  Mon Dec 17 03:05:40 2007
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Mon, 17 Dec 2007 13:05:40 +0200
Subject: [antlr-interest] ANTLR parsing too lazy
In-Reply-To: <200712171150.20607.marco.bakera@tu-dortmund.de>
References: <200712171150.20607.marco.bakera@tu-dortmund.de>
Message-ID: <47665804.5070108@shmuelhome.mine.nu>

Marco Bakera wrote:
> Hey everybody,
>
> It seem that the parser that I use for parsing mathematical expressions 
> accepts inputs like 
>
> '(a & b))' 
>
> although there is no rule for the second closing parenthesis. This expression 
> will be parsed into a syntax tree like the following
>
> &
> +- a
> \- b
>
> Whatever follows '( a & b)' will be ignored since no rules matches. 
>
> How can I manage to let antlr throw an exception when the input reaches a 
> place where no rule matches?
>
> Thanks for any kind of help.
>
> Greetings,
> Marco
You haven't included your grammar so I am just guessing. The usual cause 
of this problem is that you wrote your grammar to recognize what it can 
and then stop. You didn't insist that the grammar recognize the entire 
input. For instance, your case could have been written as

prog: sentence+;
sentence: '(' IDENT '&' IDENT ')';

It hits the second right paren and stops; it found a sentence; hence it 
found a prog.

Instead write
prog: sentence+ EOF;

Now, everything until the EOF must be recognized. I hope that it is 
obvious how to apply this to your case.

Shmuel


> .
>   



From marco.bakera at tu-dortmund.de  Mon Dec 17 06:33:15 2007
From: marco.bakera at tu-dortmund.de (Marco Bakera)
Date: Mon, 17 Dec 2007 15:33:15 +0100
Subject: [antlr-interest] ANTLR parsing too lazy
In-Reply-To: <47665804.5070108@shmuelhome.mine.nu>
References: <200712171150.20607.marco.bakera@tu-dortmund.de>
	<47665804.5070108@shmuelhome.mine.nu>
Message-ID: <200712171533.15818.marco.bakera@tu-dortmund.de>

On Monday 17 December 2007 12:05:40 shmuel siegel wrote:
>
> You didn't insist that the grammar recognize the entire
> input. For instance, your case could have been written as
>
> prog: sentence+;
> sentence: '(' IDENT '&' IDENT ')';
>
> It hits the second right paren and stops; it found a sentence; hence it
> found a prog.
>
> Instead write
> prog: sentence+ EOF;
>
> Now, everything until the EOF must be recognized. I hope that it is
> obvious how to apply this to your case.

Yes. That was the key idea that made my day. :)

Thanks a lot for that fast response.


Greetings,
Marco.



From r.mark.volkmann at gmail.com  Mon Dec 17 08:30:41 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 17 Dec 2007 10:30:41 -0600
Subject: [antlr-interest] EOF in a lexer rule
Message-ID: <f0fcc6820712170830y736c5b9fo9689016237d3a088@mail.gmail.com>

All of the statements in my little language end with TERMINATOR. Below
is how that is defined.

TERMINATOR: NEWLINE | EOF;
fragment NEWLINE: ('\r'? '\n')+;

If all my statements end with a newline, including the last one,
everything parses fine. However, if the last line doesn't end in a
newline (just EOF) then I get a MismatchedTokenException. Is it clear
why this happens based on the lexer rules above? Is it legal to refer
to EOF in a lexer rule?

-- 
R. Mark Volkmann
Object Computing, Inc.

From wiggjd at lsbu.ac.uk  Tue Dec 18 04:11:29 2007
From: wiggjd at lsbu.ac.uk (Wigg, J D)
Date: Tue, 18 Dec 2007 12:11:29 -0000
Subject: [antlr-interest] Uploading grammar on ANTLR website
Message-ID: <54FBE2327E8C4F4ABF9B6608D12CB9312EB70F@CSD-EXBE-VS2.lsbu.ac.uk>

I want to upload the latest version of the C++ grammar file
(CPP_parser.g etc.) onto the ANTLR website.
 
I think this is usually done using a *.zip file.
 
However, I think this maybe a problem for some users who do not have
usable copies of Winzip so they would not be able to unzip the file. 
 
My first question is, can *.zip files be a problem for some users?
 
In any case it would seem better to upload a self-extracting zip file
(which I think the standard WinZip program (V.9?) can produce) so my
second question is, will uploading a self extracting file (eg.
CPP_parser_v_3.2.exe) be acceptable on the ANTLR website?
 
Thanks,
 
David



--
Copyright in this email and in any attachments belongs to London South Bank University.  This email, and its attachments if any, may be confidential or legally privileged and is intended to be seen only by the person to whom it is addressed.  If you are not the intended recipient, please note the following: (1) You should take immediate action to notify the sender and delete the original email and all copies from your computer systems; (2) You should not read copy or use the contents of the email nor disclose it or its existence to anyone else.

The views expressed herein are those of the author(s) and should not be taken as those of London South Bank University, unless this is specifically stated.

London South Bank University is a company limited by guarantee registered in England and Wales.  The following details apply to London South Bank University: Company number - 00986761; Registered office and trading address - 103 Borough Road London SE1 0AA; VAT number - 778 1116 17; Email address - lsbuinfo at lsbu.ac.uk
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071218/10142df9/attachment.html 

From antlr at shmuelhome.mine.nu  Tue Dec 18 04:22:39 2007
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Tue, 18 Dec 2007 14:22:39 +0200
Subject: [antlr-interest] Uploading grammar on ANTLR website
In-Reply-To: <54FBE2327E8C4F4ABF9B6608D12CB9312EB70F@CSD-EXBE-VS2.lsbu.ac.uk>
References: <54FBE2327E8C4F4ABF9B6608D12CB9312EB70F@CSD-EXBE-VS2.lsbu.ac.uk>
Message-ID: <4767BB8F.2020606@shmuelhome.mine.nu>

Wigg, J D wrote:
> I want to upload the latest version of the C++ grammar file 
> (CPP_parser.g etc.) onto the ANTLR website.
>  
> I think this is usually done using a *.zip file.
>  
> However, I think this maybe a problem for some users who do not have 
> usable copies of Winzip so they would not be able to unzip the file.
>  
> My first question is, can *.zip files be a problem for some users?
>  
> In any case it would seem better to upload a self-extracting zip file 
> (which I think the standard WinZip program (V.9?) can produce) so my 
> second question is, will uploading a self extracting file (eg. 
> CPP_parser_v_3.2.exe) be acceptable on the ANTLR website?
>  
> Thanks,
>  
> David
>
The self extraction exe is very likely Windows centric. That eliminates 
other platforms. Besides, Windows XP comes with the ability to extract 
zip files. Also, there are free programs like 7zip to perform the 
extraction.

Zip files seem like a much better choice since there are free extractors 
available for most platforms.


From suranjith_e at yahoo.com  Tue Dec 18 06:20:07 2007
From: suranjith_e at yahoo.com (sura)
Date: Tue, 18 Dec 2007 06:20:07 -0800 (PST)
Subject: [antlr-interest] Nesc Parser
In-Reply-To: <mailman.0.1197987198.12203.antlr-interest@antlr.org>
Message-ID: <180878.56144.qm@web57103.mail.re3.yahoo.com>


How can I generate NesC parse using antlr. Any use ful
guids ... 

Thank you
suranjith


      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 


From jpschewe at mtu.net  Tue Dec 18 17:06:42 2007
From: jpschewe at mtu.net (Jon Schewe)
Date: Tue, 18 Dec 2007 19:06:42 -0600
Subject: [antlr-interest] Unfolding of loops with antlr?
Message-ID: <47686EA2.2050305@mtu.net>

I've got something I'd like to do with antlr and I'm not sure it's
possible.  I want to unfold loops with antlr inside the parser.  The
idea is this, say I've got an input file like below.  Now antlr has
given me the ability to write nice rules to parse this language and to
do various actions on each rule.  What I'd really like to do is to be
able to tell antlr to repeat a rule action on the same input stream
multiple times while I change some data outside.  Another option would
be for me to be able to duplicate a set of tokens during parsing.  Say
if I know the set of tokens between LOOP and END, could I tell antlr to
duplicate that set of tokens 10 times (since the loop goes from 1 to 10)
with an extra token added in to tell me the loop index during the
initial parse and then let the tree parser just walk the tree?

I'm sure I could hand the AST off to some custom method to do it, but
that seems like I'm duplicating what antlr is already doing in the tree
parser.

Params
i 5;

Variables
x[i];
y;

Constraints
LOOP index 1...10:
  loop[index]:
  f[index] = 10 * x[index];
END

simple:
g = 5 * y;

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From bshkara at gmail.com  Wed Dec 19 03:33:59 2007
From: bshkara at gmail.com (Basil Shkara)
Date: Wed, 19 Dec 2007 22:33:59 +1100
Subject: [antlr-interest] $TOKEN.pos absolute location
Message-ID: <2868E9D0-1C5F-4302-B2AA-DB7E4459C309@gmail.com>

Hi,

Using $TOKEN.pos gives you the position relative to $TOKEN's line.  Is  
there an easy way of receiving the position relative to all characters  
occurring beforehand?

So rather than receiving pos=43, line=2 - is it possible to receive  
pos=80, assuming that there are 79 characters before $TOKEN?

I am currently using the ObjC target and am using a lot of messy  
instance variables to count every token as it is parsed by my parser.   
There must another way!  :)

Regards,
Basil.

From stefan.eder at ebuconnect.de  Wed Dec 19 03:41:52 2007
From: stefan.eder at ebuconnect.de (Stefan Eder)
Date: Wed, 19 Dec 2007 12:41:52 +0100
Subject: [antlr-interest] NullPointerException in rewrite rule
Message-ID: <47690380.5030400@ebuconnect.de>

Hi,

I get a NullPointerException in a rewrite rule with Antlr 3.01.
My intention is to concat several tokens to one new token during AST construction.
Any ideas what I am doing wrong?

Grammar:
	grammar Test;
	options {output=AST;}
	tokens {FLOAT;}
	floatSequence
		: 
		value=(NumberLiteral ('.' NumberLiteral))
		-> ^(FLOAT[$value])
		;
	NumberLiteral	: ('0'..'9') + ;

Main method:
public static void main(String[] args)
throws RecognitionException {
	CharStream charStream = new ANTLRStringStream("0.815");
	TestLexer testLexer = new TestLexer(charStream);
	TokenStream tokenStream = new CommonTokenStream(testLexer);
	TestParser parser = new TestParser(tokenStream);
	parser.floatSequence();
}

Exception stack:
Exception in thread "main" java.lang.NullPointerException
	at org.antlr.runtime.CommonToken.<init>(CommonToken.java:72)
	at org.antlr.runtime.tree.CommonTreeAdaptor.createToken(CommonTreeAdaptor.java:60)
	at org.antlr.runtime.tree.BaseTreeAdaptor.create(BaseTreeAdaptor.java:102)
	at TestParser.floatSequence(TestParser.java:105)
	at Main.main(Main.java:16)


Reviewing the generated code:
    //...
    Token value=null;
    //...
    root_1 =
      (Object)adaptor.becomeRoot(adaptor.create(FLOAT, value), root_1);
The variable value has not been initialized between declaration and use.
Calling adaptor.create(FLOAT, null) causes the exception.

If I remove the rewrite rule, the exception disappears and the input is parsed ok.

Stefan




From wiggjd at lsbu.ac.uk  Wed Dec 19 04:36:50 2007
From: wiggjd at lsbu.ac.uk (Wigg, J D)
Date: Wed, 19 Dec 2007 12:36:50 -0000
Subject: [antlr-interest] C++ Parser Update V3.2
Message-ID: <54FBE2327E8C4F4ABF9B6608D12CB9312EB70B@CSD-EXBE-VS2.lsbu.ac.uk>

My final update of the CPP_parser (V3.2) using ANTLR V2.7 to generate
C++ parser in C++ is now available on the http://www.antlr.org
website.
 
I now wish to retire and to hand on this C++ grammar file for someone
else to look after for maintenance and further development. For
instance, I hope he/she would be able adapt it for use with ANTLR V3
(when C++ output is available!) and/or use it to generate Java code
(instead of or in addition to C++).
 
Potential volunteer(s) please contact me for further information and
co-ordination of hand-over.
 
I expect to be available to assist with any problems with this new
version and also for consultation about further developments. 
 
David Wigg
Research Fellow
London South Bank University
UK



--
Copyright in this email and in any attachments belongs to London South Bank University.  This email, and its attachments if any, may be confidential or legally privileged and is intended to be seen only by the person to whom it is addressed.  If you are not the intended recipient, please note the following: (1) You should take immediate action to notify the sender and delete the original email and all copies from your computer systems; (2) You should not read copy or use the contents of the email nor disclose it or its existence to anyone else.

The views expressed herein are those of the author(s) and should not be taken as those of London South Bank University, unless this is specifically stated.

London South Bank University is a company limited by guarantee registered in England and Wales.  The following details apply to London South Bank University: Company number - 00986761; Registered office and trading address - 103 Borough Road London SE1 0AA; VAT number - 778 1116 17; Email address - lsbuinfo at lsbu.ac.uk
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071219/43d6f973/attachment.html 

From ralf_c at web.de  Wed Dec 19 06:09:33 2007
From: ralf_c at web.de (Ralf Cremerius)
Date: Wed, 19 Dec 2007 15:09:33 +0100
Subject: [antlr-interest] =?iso-8859-15?q?Is_it_possible_to_capture_the_in?=
 =?iso-8859-15?q?put_of_a_wildcard_for_tree_construction_inside_a_block_of?=
 =?iso-8859-15?q?_multiple_occurrences=3F?=
Message-ID: <2028483672@web.de>

Hi,

I just have a question about some detail in ANTLR v3:

I'm writing a parser grammar generating an AST. In one specific rule, I need to use the wildcard (.) inside some block of multiple occurrences, but I also need the matched input to construct a tree from it. Can this be done somehow? I tried to use a label but this didn't work.

rule:	     (
	       APOSTROPHE!
	       (options {greedy=false;} : .  )* 
	       APOSTROPHE!
	       )+
	       -> ^( ----?---- );

Or am I just asking for too much and this is conceptually forbidden?

Thanks in advance for reading,
  Ralf Cremerius
_________________________________________________________________________
In 5 Schritten zur eigenen Homepage. Jetzt Domain sichern und gestalten! 
Nur 3,99 EUR/Monat! http://www.maildomain.web.de/?mc=021114


From r.mark.volkmann at gmail.com  Wed Dec 19 06:33:57 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 19 Dec 2007 08:33:57 -0600
Subject: [antlr-interest] NullPointerException in rewrite rule
In-Reply-To: <47690380.5030400@ebuconnect.de>
References: <47690380.5030400@ebuconnect.de>
Message-ID: <f0fcc6820712190633j72faf3a0sf13c9e6db3ae2931@mail.gmail.com>

On Dec 19, 2007 5:41 AM, Stefan Eder <stefan.eder at ebuconnect.de> wrote:
> Hi,
>
> I get a NullPointerException in a rewrite rule with Antlr 3.01.
> My intention is to concat several tokens to one new token during AST construction.
> Any ideas what I am doing wrong?
>
> Grammar:
>         grammar Test;
>         options {output=AST;}
>         tokens {FLOAT;}
>         floatSequence
>                 :
>                 value=(NumberLiteral ('.' NumberLiteral))

I don't know if this is related to the problem, but why don't you make
a lexer rule that creates a single token for your floating point
numbers? For example,

REAL: INTEGER+ ('.' INTEGER+)?;
INTEGER: '0'..'9';

If you had those then your rule above could be written like this.

floatSequence: REAL -> ^(FLOAT REAL);

>                 -> ^(FLOAT[$value])

Why do you have the square brackets? I don't think you mean to pass
$value as a parameter to the FLOAT rule.

>                 ;
>         NumberLiteral   : ('0'..'9') + ;
>
> Main method:
> public static void main(String[] args)
> throws RecognitionException {
>         CharStream charStream = new ANTLRStringStream("0.815");
>         TestLexer testLexer = new TestLexer(charStream);
>         TokenStream tokenStream = new CommonTokenStream(testLexer);
>         TestParser parser = new TestParser(tokenStream);
>         parser.floatSequence();
> }
>
> Exception stack:
> Exception in thread "main" java.lang.NullPointerException
>         at org.antlr.runtime.CommonToken.<init>(CommonToken.java:72)
>         at org.antlr.runtime.tree.CommonTreeAdaptor.createToken(CommonTreeAdaptor.java:60)
>         at org.antlr.runtime.tree.BaseTreeAdaptor.create(BaseTreeAdaptor.java:102)
>         at TestParser.floatSequence(TestParser.java:105)
>         at Main.main(Main.java:16)
>
>
> Reviewing the generated code:
>     //...
>     Token value=null;
>     //...
>     root_1 =
>       (Object)adaptor.becomeRoot(adaptor.create(FLOAT, value), root_1);
> The variable value has not been initialized between declaration and use.
> Calling adaptor.create(FLOAT, null) causes the exception.
>
> If I remove the rewrite rule, the exception disappears and the input is parsed ok.

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Wed Dec 19 07:39:42 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 19 Dec 2007 09:39:42 -0600
Subject: [antlr-interest] current rule name
Message-ID: <f0fcc6820712190739i1a00f293y4715c3c124c41eee@mail.gmail.com>

Is there an easy way to determine the name of the rule that is
currently being processed? In my case I'm overriding the
getErrorMessage method in BaseRecognizer and need to know the current
rule name in order to create a good error message. I looked at the API
for RecognitionException and don't see a way to get the rule name. I
know I could use the "paraphrase mechanism" discussed in the book in
section 10.3, but I thought maybe there was an easier way.

-- 
R. Mark Volkmann
Object Computing, Inc.

From jimi at temporal-wave.com  Wed Dec 19 08:38:51 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 Dec 2007 08:38:51 -0800
Subject: [antlr-interest] Is it possible to capture the input of a
	wildcard for tree construction inside a block of multiple
	occurrences?
In-Reply-To: <2028483672@web.de>
Message-ID: <"L36C378363242466eBBB02FD3709F8AFE.1198082692.scalix.temporal-wave.com*"@MHS>

This sounds more like something you should do in the lexer to be honest 
(assuming it does not cause a context issue). The use of '.' in a parser 
is a bit tricky as it just matches any token of course and in the 
construct you have will match to EOF I think.

Also note that you cannot use both '!' and AST rewrites. If you are 
using rewrites, then just don't mention the APOSTROPHE tokens ;-).

You would have more surety by creating a parser rule that contains all 
the tokens other than APOSTROPHE. Then you could do:

rule:
	APOSTROPHE
		(stuff += notanapostrophe)*
	APOSTROPHE

	-> ^(APOSTROPHE $stuff*)
;

Jim

> -----Original Message-----
> From: Ralf Cremerius [mailto:ralf_c at web.de]
> Sent: Wednesday, December 19, 2007 6:10 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Is it possible to capture the input of a
> wildcard for tree construction inside a block of multiple occurrences?
> 
> Hi,
> 
> I just have a question about some detail in ANTLR v3:
> 
> I'm writing a parser grammar generating an AST. In one specific rule, 
I
> need to use the wildcard (.) inside some block of multiple 
occurrences,
> but I also need the matched input to construct a tree from it. Can 
this be
> done somehow? I tried to use a label but this didn't work.
> 
> rule:	     (
> 	       APOSTROPHE!
> 	       (options {greedy=false;} : .  )*
> 	       APOSTROPHE!
> 	       )+
> 	       -> ^( ----?---- );
> 
> Or am I just asking for too much and this is conceptually forbidden?
> 
> Thanks in advance for reading,
>   Ralf Cremerius
> 
________________________________________________________________________
_
> In 5 Schritten zur eigenen Homepage. Jetzt Domain sichern und 
gestalten!
> Nur 3,99 EUR/Monat! http://www.maildomain.web.de/?mc=021114
> 



From jimi at temporal-wave.com  Wed Dec 19 08:40:56 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 Dec 2007 08:40:56 -0800
Subject: [antlr-interest] $TOKEN.pos absolute location
In-Reply-To: <2868E9D0-1C5F-4302-B2AA-DB7E4459C309@gmail.com>
Message-ID: <"L95911FA8445F444fAD581F75040D73E6.1198082818.scalix.temporal-wave.com*"@MHS>

In the other targets this is just the .start element. I would think it 
is the same for objc.

Jim

> -----Original Message-----
> From: Basil Shkara [mailto:bshkara at gmail.com]
> Sent: Wednesday, December 19, 2007 3:34 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] $TOKEN.pos absolute location
> 
> Hi,
> 
> Using $TOKEN.pos gives you the position relative to $TOKEN's line.  Is
> there an easy way of receiving the position relative to all characters
> occurring beforehand?
> 
> So rather than receiving pos=43, line=2 - is it possible to receive
> pos=80, assuming that there are 79 characters before $TOKEN?
> 
> I am currently using the ObjC target and am using a lot of messy
> instance variables to count every token as it is parsed by my parser.
> There must another way!  :)
> 
> Regards,
> Basil.



From jimi at temporal-wave.com  Wed Dec 19 08:46:27 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 19 Dec 2007 08:46:27 -0800
Subject: [antlr-interest] NullPointerException in rewrite rule
In-Reply-To: <47690380.5030400@ebuconnect.de>
Message-ID: <"LBA4F7D7A0F54450789E0C14D9A6900B4.1198083145.scalix.temporal-wave.com*"@MHS>

Well, value isnt going to track quite what you want here I think :-)

Assuming that you need this in the parser (this is quite often 
legitimate) and not the lexer, then:

@init
{
	String text;
}
v1=NumberLiteral '.' v2=NumberLiteral

{
	$text = $v1.text '.' $v2.text;
}
	-> ^FLOAT[$text]

Or something similar.

Jim  

> -----Original Message-----
> From: Stefan Eder [mailto:stefan.eder at ebuconnect.de]
> Sent: Wednesday, December 19, 2007 3:42 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] NullPointerException in rewrite rule
> 
> Hi,
> 
> I get a NullPointerException in a rewrite rule with Antlr 3.01.
> My intention is to concat several tokens to one new token during AST
> construction.
> Any ideas what I am doing wrong?
> 
> Grammar:
> 	grammar Test;
> 	options {output=AST;}
> 	tokens {FLOAT;}
> 	floatSequence
> 		:
> 		value=(NumberLiteral ('.' NumberLiteral))
> 		-> ^(FLOAT[$value])
> 		;
> 	NumberLiteral	: ('0'..'9') + ;
> 
> Main method:
> public static void main(String[] args)
> throws RecognitionException {
> 	CharStream charStream = new ANTLRStringStream("0.815");
> 	TestLexer testLexer = new TestLexer(charStream);
> 	TokenStream tokenStream = new CommonTokenStream(testLexer);
> 	TestParser parser = new TestParser(tokenStream);
> 	parser.floatSequence();
> }
> 
> Exception stack:
> Exception in thread "main" java.lang.NullPointerException
> 	at org.antlr.runtime.CommonToken.<init>(CommonToken.java:72)
> 	at
> 
org.antlr.runtime.tree.CommonTreeAdaptor.createToken(CommonTreeAdaptor.j
av
> a:60)
> 	at
> 
org.antlr.runtime.tree.BaseTreeAdaptor.create(BaseTreeAdaptor.java:102)
> 	at TestParser.floatSequence(TestParser.java:105)
> 	at Main.main(Main.java:16)
> 
> 
> Reviewing the generated code:
>     //...
>     Token value=null;
>     //...
>     root_1 =
>       (Object)adaptor.becomeRoot(adaptor.create(FLOAT, value), 
root_1);
> The variable value has not been initialized between declaration and 
use.
> Calling adaptor.create(FLOAT, null) causes the exception.
> 
> If I remove the rewrite rule, the exception disappears and the input 
is
> parsed ok.
> 
> Stefan
> 
> 
> 



From stefan.eder at ebuconnect.de  Wed Dec 19 11:34:01 2007
From: stefan.eder at ebuconnect.de (Stefan Eder)
Date: Wed, 19 Dec 2007 20:34:01 +0100
Subject: [antlr-interest] NullPointerException in rewrite rule
In-Reply-To: <f0fcc6820712190633j72faf3a0sf13c9e6db3ae2931@mail.gmail.com>
References: <47690380.5030400@ebuconnect.de>
	<f0fcc6820712190633j72faf3a0sf13c9e6db3ae2931@mail.gmail.com>
Message-ID: <47697229.5090401@ebuconnect.de>

sometimes I need something like 47.11 as three tokens (NumberLiteral '.' 
NumberLiteral).
So, as far as I understood, I need to make a parser rule to match a REAL 
if such a match is in scope rather than a lexer rule.
On the other hand it would sometimes be pretty convenient to merge some 
tokens.
An within the "language" that I need to parse it is even worse, numbers 
may be identifiers...
:~(
I have an identifier rule that matches several tokens and it would make 
the AST much flatter and easier to work on, if I would find a way to do 
what I am trying to do

Mark Volkmann schrieb:
> On Dec 19, 2007 5:41 AM, Stefan Eder <stefan.eder at ebuconnect.de> wrote:
>   
>> Hi,
>>
>> I get a NullPointerException in a rewrite rule with Antlr 3.01.
>> My intention is to concat several tokens to one new token during AST construction.
>> Any ideas what I am doing wrong?
>>
>> Grammar:
>>         grammar Test;
>>         options {output=AST;}
>>         tokens {FLOAT;}
>>         floatSequence
>>                 :
>>                 value=(NumberLiteral ('.' NumberLiteral))
>>     
>
> I don't know if this is related to the problem, but why don't you make
> a lexer rule that creates a single token for your floating point
> numbers? For example,
>
> REAL: INTEGER+ ('.' INTEGER+)?;
> INTEGER: '0'..'9';
>
> If you had those then your rule above could be written like this.
>
> floatSequence: REAL -> ^(FLOAT REAL);
>
>   
>>                 -> ^(FLOAT[$value])
>>     
>
> Why do you have the square brackets? I don't think you mean to pass
> $value as a parameter to the FLOAT rule.
>
>   
>>                 ;
>>         NumberLiteral   : ('0'..'9') + ;
>>
>> Main method:
>> public static void main(String[] args)
>> throws RecognitionException {
>>         CharStream charStream = new ANTLRStringStream("0.815");
>>         TestLexer testLexer = new TestLexer(charStream);
>>         TokenStream tokenStream = new CommonTokenStream(testLexer);
>>         TestParser parser = new TestParser(tokenStream);
>>         parser.floatSequence();
>> }
>>
>> Exception stack:
>> Exception in thread "main" java.lang.NullPointerException
>>         at org.antlr.runtime.CommonToken.<init>(CommonToken.java:72)
>>         at org.antlr.runtime.tree.CommonTreeAdaptor.createToken(CommonTreeAdaptor.java:60)
>>         at org.antlr.runtime.tree.BaseTreeAdaptor.create(BaseTreeAdaptor.java:102)
>>         at TestParser.floatSequence(TestParser.java:105)
>>         at Main.main(Main.java:16)
>>
>>
>> Reviewing the generated code:
>>     //...
>>     Token value=null;
>>     //...
>>     root_1 =
>>       (Object)adaptor.becomeRoot(adaptor.create(FLOAT, value), root_1);
>> The variable value has not been initialized between declaration and use.
>> Calling adaptor.create(FLOAT, null) causes the exception.
>>
>> If I remove the rewrite rule, the exception disappears and the input is parsed ok.
>>     
>
>   

-- 
Stefan Eder
Senior Software Architekt / Senior Consultant
	

Phone:	+49 2137 934132
Office: +49 2181 2363-0
Fax:	+49 2181 2363-43
Mobile: +49 172 6050 486

Web: www.ebuconnect.de
Mail: stefan.eder at ebuconnect.de

Sitz der Gesellschaft: ebuconnect AG, Stadttor 1, D-40219 D?sseldorf 
Amtsgericht D?sseldorf: HRB 40219
Vorstand: Andreas Weiss - Vorsitzender
Vorsitzender des Aufsichtsrates: Dr. Marc Henze

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071219/d373927e/attachment.html 

From stefan.eder at ebuconnect.de  Wed Dec 19 14:28:52 2007
From: stefan.eder at ebuconnect.de (Stefan Eder)
Date: Wed, 19 Dec 2007 23:28:52 +0100
Subject: [antlr-interest] NullPointerException in rewrite rule
In-Reply-To: <"LBA4F7D7A0F54450789E0C14D9A6900B4.1198083145.scalix.temporal-wave.com*"@MHS>
References: <"LBA4F7D7A0F54450789E0C14D9A6900B4.1198083145.scalix.temporal-wave.com*"@MHS>
Message-ID: <47699B24.3010807@ebuconnect.de>

I figured it out:
floatSequence returns [String sequence]
    :
    v1=NumberLiteral '.' v2=NumberLiteral
    {
        $sequence = $v1.text + '.' + $v2.text;
    }
    -> ^(FLOAT[$sequence])
    ;
This way it works because $sequence is writable available in actions and 
readable in rewrite rules.

You brought me on the even more easier way that can solve even more 
difficult situations, because $text seems to be an attribute of the rule 
representing the text of the all matched tokens. You get an error if you 
try to assign a value to $text within an action.

So:
identifier returns [String name]
    :
    (NumberLiteral|LetterLiteral)+
    {
        $name=$text;
    }
    -> ^(ID[$text])
    ;
or
floatSequence returns [String sequence]
    :
    NumberLiteral '.' NumberLiteral
    {
        $sequence = $text;
    }
    -> ^(FLOAT[$sequence])
    ;

brings exactly what I want, one single token with the text of the 
complete subtree as text.
:~)

Yes, what I am going to parse has identifiers that may start with digits.

Stefan

Jim Idle schrieb:
> Well, value isnt going to track quite what you want here I think :-)
>
> Assuming that you need this in the parser (this is quite often 
> legitimate) and not the lexer, then:
>
> @init
> {
> 	String text;
> }
> v1=NumberLiteral '.' v2=NumberLiteral
>
> {
> 	$text = $v1.text '.' $v2.text;
> }
> 	-> ^FLOAT[$text]
>
> Or something similar.
>
> Jim  
>
>   
>> -----Original Message-----
>> From: Stefan Eder [mailto:stefan.eder at ebuconnect.de]
>> Sent: Wednesday, December 19, 2007 3:42 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] NullPointerException in rewrite rule
>>
>> Hi,
>>
>> I get a NullPointerException in a rewrite rule with Antlr 3.01.
>> My intention is to concat several tokens to one new token during AST
>> construction.
>> Any ideas what I am doing wrong?
>>
>> Grammar:
>> 	grammar Test;
>> 	options {output=AST;}
>> 	tokens {FLOAT;}
>> 	floatSequence
>> 		:
>> 		value=(NumberLiteral ('.' NumberLiteral))
>> 		-> ^(FLOAT[$value])
>> 		;
>> 	NumberLiteral	: ('0'..'9') + ;
>>
>> Main method:
>> public static void main(String[] args)
>> throws RecognitionException {
>> 	CharStream charStream = new ANTLRStringStream("0.815");
>> 	TestLexer testLexer = new TestLexer(charStream);
>> 	TokenStream tokenStream = new CommonTokenStream(testLexer);
>> 	TestParser parser = new TestParser(tokenStream);
>> 	parser.floatSequence();
>> }
>>
>> Exception stack:
>> Exception in thread "main" java.lang.NullPointerException
>> 	at org.antlr.runtime.CommonToken.<init>(CommonToken.java:72)
>> 	at
>>
>>     
> org.antlr.runtime.tree.CommonTreeAdaptor.createToken(CommonTreeAdaptor.j
> av
>   
>> a:60)
>> 	at
>>
>>     
> org.antlr.runtime.tree.BaseTreeAdaptor.create(BaseTreeAdaptor.java:102)
>   
>> 	at TestParser.floatSequence(TestParser.java:105)
>> 	at Main.main(Main.java:16)
>>
>>
>> Reviewing the generated code:
>>     //...
>>     Token value=null;
>>     //...
>>     root_1 =
>>       (Object)adaptor.becomeRoot(adaptor.create(FLOAT, value), 
>>     
> root_1);
>   
>> The variable value has not been initialized between declaration and 
>>     
> use.
>   
>> Calling adaptor.create(FLOAT, null) causes the exception.
>>
>> If I remove the rewrite rule, the exception disappears and the input 
>>     
> is
>   
>> parsed ok.
>>
>> Stefan
>>
>>
>>
>>     
>
>
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071219/24841bee/attachment.html 

From minas at ti.com  Wed Dec 19 15:22:43 2007
From: minas at ti.com (Minas Hambardzumyan)
Date: Wed, 19 Dec 2007 17:22:43 -0600
Subject: [antlr-interest] attempt to compare antlr vs bison/flex performance
Message-ID: <4769A7C3.8010206@ti.com>

Hello,

In an effort to compare antlr and bison/flex parsers, I did the 
following exercise:

- found and compiled bison/flex "C" language parser from the following 
location:
    ftp://ftp.uu.net/usenet/net.sources/ansi.c.grammar.Z
- downloaded and compiled antlr3 implementation of "C" language parser 
from this directory in antlr3 examples:
   antlr/examples-v3/C/C
- preprocessed a "C" language file and stripped it such that both parser 
would pass it through (mostly minor changes)
- compared runtime for each parser


The results of this exercise show that the antlr parser is ~9 times 
slower than the flex/bison parser. I have used the same version of GNU C 
compiler for both parsers, with exact same compile options.

Although the grammar definitions come from different sources, I still 
think this exercise gives a general idea about performance differences 
of these parsers. Could anyone please tell me if this is an expected 
runtime difference or you think I could do some optimizations to get 
faster performance from antlr3.

I can send the complete code I used for both parsers, or any parts of 
it, if necessary. Just tell me which part would be of interest.

Thanks,
Minas

From jaluber at gmx.de  Wed Dec 19 15:31:10 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 20 Dec 2007 00:31:10 +0100
Subject: [antlr-interest] attempt to compare antlr vs bison/flex
	performance
In-Reply-To: <4769A7C3.8010206@ti.com>
References: <4769A7C3.8010206@ti.com>
Message-ID: <4769A9BE.3040005@gmx.de>

Minas Hambardzumyan schrieb:
 > Although the grammar definitions come from different sources, I still
> think this exercise gives a general idea about performance differences
> of these parsers. Could anyone please tell me if this is an expected
> runtime difference or you think I could do some optimizations to get
> faster performance from antlr3.

I know that in the perforce repository the current source is supposed to
perform at least 50% better than the one available. So it is possible to
optimize stuff. But Ter should know more about this.

Johannes

From fog at initd.org  Wed Dec 19 15:37:08 2007
From: fog at initd.org (Federico Di Gregorio)
Date: Thu, 20 Dec 2007 00:37:08 +0100
Subject: [antlr-interest] Rewriting tokens in AST grammar
Message-ID: <1198107428.4069.23.camel@mila.office.dinunzioedigregorio>

Hi,

first of all let me say that ANTLR is great. I used COCO/R before but
ANTLR error reporting and recovering are just much much better.

After the kudos, my little problem with an AST grammar (RDF turtle). I
recognize various kinds of literals at the token level:

literal
	: s=quotedString (LANG | DATATYPE)? -> ^(LITERAL $s LANG? DATATYPE?)
	| INTEGER -> ^(LITERAL INTEGER)
	| DOUBLE  -> ^(LITERAL DOUBLE)
	| DECIMAL -> ^(LITERAL DECIMAL)
	| BOOLEAN -> ^(LITERAL BOOLEAN)
	;

and everything works, but it would be much better to rewrite them in a
uniform way here in the AST generation and not in the tree walker. I
know that I can't do that but I'd show you what I'd like to do anyway
hoping there is a right way I have missed:

literal
	: s=quotedString (LANG | DATATYPE)? -> ^(LITERAL $s LANG? DATATYPE?)
	| INTEGER -> ^(LITERAL INTEGER DATATYPE["xsd:int"])
	| DOUBLE  -> ^(LITERAL DOUBLE DATATYPE["xsd:double"])
	...

and so on. In brief I'd like to generate the fake token that is implicit
in the literal type.

Many thanks,
federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Those who do not study Lisp are doomed to reimplement it. Poorly.
                                     -- from Karl M. Hegbloom .signature
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa =?ISO-8859-1?Q?=E8?= una parte del messaggio
	firmata digitalmente
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071220/3b7c01e9/attachment.bin 

From parrt at cs.usfca.edu  Wed Dec 19 15:39:46 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 19 Dec 2007 15:39:46 -0800
Subject: [antlr-interest] attempt to compare antlr vs bison/flex
	performance
In-Reply-To: <4769A9BE.3040005@gmx.de>
References: <4769A7C3.8010206@ti.com> <4769A9BE.3040005@gmx.de>
Message-ID: <952FA22E-B6E0-42B9-AA4E-5A2655465F0A@cs.usfca.edu>


On Dec 19, 2007, at 3:31 PM, Johannes Luber wrote:

> Minas Hambardzumyan schrieb:
>> Although the grammar definitions come from different sources, I still
>> think this exercise gives a general idea about performance  
>> differences
>> of these parsers. Could anyone please tell me if this is an expected
>> runtime difference or you think I could do some optimizations to get
>> faster performance from antlr3.
>
> I know that in the perforce repository the current source is  
> supposed to
> perform at least 50% better than the one available. So it is  
> possible to
> optimize stuff. But Ter should know more about this.

I'm working on ANTLR's analysis engine with Kay Roepke.  A TSQL  
grammar that took 1m30s is now taking about 10s!  I have not optimized  
the runtime.

Also note that the C grammar for v3 is optimized for readability not  
at all for speed.  It is not LL(1) by any stretch.  I could alter to  
be superfast but less readable...

Ter

From antlr-interest at schraverus.com  Wed Dec 19 17:00:34 2007
From: antlr-interest at schraverus.com (Corno Schraverus)
Date: Wed, 19 Dec 2007 17:00:34 -0800
Subject: [antlr-interest] token filtering in C target (antlr 3.0)
Message-ID: <000001c842a3$ba92bb60$2fb83220$@com>

Hi all,

I'm trying to port a whitespace significant grammar from 2.7 to 3.0.
(It is almost identical to the python parser available for 2.7; basically
all that has to be done is override the 'nextToken' method.)
I'm going through the sources of the runtime library for the C target but
cannot find the nextToken method(function) and if I'm correct it's done with
_LA(). However _LA() is more complex: arbitrary lookahead or lookback. Do I
have to implement this functionality to get it working correctly?

greetings,

Corno



From stevagewp at gmail.com  Wed Dec 19 20:18:26 2007
From: stevagewp at gmail.com (Steve Bennett)
Date: Thu, 20 Dec 2007 15:18:26 +1100
Subject: [antlr-interest] Enhancement request for
	identifyingimaginarytokens
In-Reply-To: <338F0FCC-574F-4D77-B05E-FCFCC8556749@cs.usfca.edu>
References: <62BABE024B7C074E9194E9727A418979C4F102@dvs-sms-mail01.digi.com>
	<338F0FCC-574F-4D77-B05E-FCFCC8556749@cs.usfca.edu>
Message-ID: <b8ceeef70712192018o6e44905fu58512d3aa8a15719@mail.gmail.com>

On 12/15/07, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi. Why not do what I do:
>
> s : 'if' e 'then' s -> ^('if' e s)
>    | e ';' -> e
>    ;
>
> etc...  no need for imaginary tokens.  Remember imag is for nodes that
> have no corresponding input token.

I'm a bit unclear on this. Not having yet gotten to the tree-walking
or output generation phases, I don't know the ramifications of the
choices, but it seems somehow a bit untidy having an AST composed of
both imaginary and real tokens. I would be inclined towards using IT's
everywhere, in order to have consistent naming etc, but this isn't a
good idea?

Steve

From ralf_c at web.de  Thu Dec 20 00:39:06 2007
From: ralf_c at web.de (Ralf Cremerius)
Date: Thu, 20 Dec 2007 09:39:06 +0100
Subject: [antlr-interest]
 =?iso-8859-15?q?Is_it_possible_to_capture_the_in?=
 =?iso-8859-15?q?put_of_a_wildcard_for_tree_construction_inside_a_block_of?=
 =?iso-8859-15?q?_multiple_occurrences=3F?=
Message-ID: <2030324026@web.de>

Hi Jim,

thanks a lot for your help:  Splitting my rule into a lexer token and a smaller parser rule perfectly solved my problem.  :-)

Ralf

> This sounds more like something you should do in the lexer to be honest 
> (assuming it does not cause a context issue). The use of '.' in a parser 
> is a bit tricky as it just matches any token of course and in the 
> construct you have will match to EOF I think.
> 
> Also note that you cannot use both '!' and AST rewrites. If you are 
> using rewrites, then just don't mention the APOSTROPHE tokens ;-).
> 
> You would have more surety by creating a parser rule that contains all 
> the tokens other than APOSTROPHE. Then you could do:
> 
> rule:
> 	APOSTROPHE
> 		(stuff += notanapostrophe)*
> 	APOSTROPHE
> 
> 	-> ^(APOSTROPHE $stuff*)
> ;
> 
> Jim
______________________________________________________________________________
Jetzt neu! Im riesigen WEB.DE Club SmartDrive Dateien freigeben und mit 
Freunden teilen! http://www.freemail.web.de/club/smartdrive_ttc.htm/?mc=021134


From aravinda777 at gmail.com  Thu Dec 20 06:42:50 2007
From: aravinda777 at gmail.com (Aravinda Dassanayake)
Date: Thu, 20 Dec 2007 20:12:50 +0530
Subject: [antlr-interest] Unreachable alternatives problem...
Message-ID: <c1960e000712200642o11cadd7fy446f278119468ba2@mail.gmail.com>

Hi everybody,

I'm working on  a C# grammar to create a complexity calculation tool,
and I'm getting the following warning when a grammar check is done.

[12:05:42] Checking Grammar...
[12:05:44] warning(201): C_Sharp_warning_rem.g:45:28: The following
alternatives are unreachable: 1,2

[12:05:44] warning(208): C_Sharp_warning_rem.g:2047:1: The following
token definitions are unreachable:
DELIMITED_COMMENT,SINGLE_LINE_COMMENT,IDENTIFIER_OR_KEYWORD,DECIMAL_DIGITS,?INTEGER_TYPE_SUFFIX,HEX_DIGIT,REAL_TYPE_SUFFIX,SINGLE_CHARACTER,SIMPLE_ESCA?PE_SEQUENCE,HEXADECIMAL_ESCAPE_SEQUENCE,UNICODE_ESCAPE_SEQUENCE,REGULAR_STR?ING_LITERAL,SINGLE_REGULAR_STRING_LITERAL_CHARACTER,VERBATIM_STRING_LITERAL?,SINGLE_VERBATIM_STRING_LITERAL_CHARACTER,QUOTE_ESCAPE_SEQUENCE,NULL_LITERA?L


Could you please enlighten me on what exactly is meant by saying that
alternatives are unreachable as above, and how to get over them?

FYI, in my case I have glbal backtracking = true for the moment to
avoid a load of other warnings.

A quick response is highly appreciated.

Regards,
Aravinda
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071220/e96052dd/attachment-0001.html 

From jaluber at gmx.de  Thu Dec 20 07:20:44 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 20 Dec 2007 16:20:44 +0100
Subject: [antlr-interest] Enhancement request for identifying imaginary
 tokens
In-Reply-To: <b8ceeef70712192018o6e44905fu58512d3aa8a15719@mail.gmail.com>
References: <62BABE024B7C074E9194E9727A418979C4F102@dvs-sms-mail01.digi.com>	<338F0FCC-574F-4D77-B05E-FCFCC8556749@cs.usfca.edu>
	<b8ceeef70712192018o6e44905fu58512d3aa8a15719@mail.gmail.com>
Message-ID: <476A884C.7090407@gmx.de>

Steve Bennett schrieb:
> On 12/15/07, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Hi. Why not do what I do:
>>
>> s : 'if' e 'then' s -> ^('if' e s)
>>    | e ';' -> e
>>    ;
>>
>> etc...  no need for imaginary tokens.  Remember imag is for nodes that
>> have no corresponding input token.
> 
> I'm a bit unclear on this. Not having yet gotten to the tree-walking
> or output generation phases, I don't know the ramifications of the
> choices, but it seems somehow a bit untidy having an AST composed of
> both imaginary and real tokens. I would be inclined towards using IT's
> everywhere, in order to have consistent naming etc, but this isn't a
> good idea?

I found that there are three places for imaginary tokens:

1. If you want to rename a token to highlight the context it is in. For
example, '<', known as LT, can mean really the lower-than-operator or
the opening symbol for generics. I disambiguate with OP_LT[LT] or
OPEN_GENERICS[LT].

2. Use as root where no other normal token is available. I'm ambivalent
on this, as I'm not sure if you have to get to a situation like ^(ROOT
$rule otherToken) or if ^(otherToken $rule) is also sufficient. But
there is the case:

explicit_anonymous_function_parameter
    :   anonymous_function_parameter_modifier? type IDENTIFIER
        -> ^(EXPLICIT_ANONYMOUS_FUNCTION_PARAMETER ^(OPTIONAL
anonymous_function_parameter_modifier?) type IDENTIFIER)
    ;

Without an imaginary token ANTLR would see "^(^(" - a tree as root of
another tree, which is illegal. The made up root prevents this.

3. Disambiguation for tree grammars. I prefer to remove backtracking and
predicates from tree grammars as much as possible, as those are usually
repetition of work of former used parsers. When the grammar analysis
complains about an ambiguity, which can't be solved by left-factoring
easily, I insert a special unique token at the beginning of the
ambiguous token stream.

Hope that helps,
Johannes

From parrt at cs.usfca.edu  Thu Dec 20 09:39:36 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 20 Dec 2007 09:39:36 -0800
Subject: [antlr-interest] attempt to compare antlr vs bison/flex
	performance
In-Reply-To: <4769A7C3.8010206@ti.com>
References: <4769A7C3.8010206@ti.com>
Message-ID: <08DFF476-A43D-4711-81A7-2E19DE56AE12@cs.usfca.edu>

Hi Minas.  Can you try it on the Java grammar(s)?  I spent a bit of  
time making that fast.

Ter
On Dec 19, 2007, at 3:22 PM, Minas Hambardzumyan wrote:

> Hello,
>
> In an effort to compare antlr and bison/flex parsers, I did the  
> following exercise:
>
> - found and compiled bison/flex "C" language parser from the  
> following location:
>    ftp://ftp.uu.net/usenet/net.sources/ansi.c.grammar.Z
> - downloaded and compiled antlr3 implementation of "C" language  
> parser from this directory in antlr3 examples:
>   antlr/examples-v3/C/C
> - preprocessed a "C" language file and stripped it such that both  
> parser would pass it through (mostly minor changes)
> - compared runtime for each parser
>
>
> The results of this exercise show that the antlr parser is ~9 times  
> slower than the flex/bison parser. I have used the same version of  
> GNU C compiler for both parsers, with exact same compile options.
>
> Although the grammar definitions come from different sources, I  
> still think this exercise gives a general idea about performance  
> differences of these parsers. Could anyone please tell me if this  
> is an expected runtime difference or you think I could do some  
> optimizations to get faster performance from antlr3.
>
> I can send the complete code I used for both parsers, or any parts  
> of it, if necessary. Just tell me which part would be of interest.
>
> Thanks,
> Minas


From GDykes at acsisinc.com  Thu Dec 20 09:58:10 2007
From: GDykes at acsisinc.com (Dykes, Gene)
Date: Thu, 20 Dec 2007 12:58:10 -0500
Subject: [antlr-interest] Antlr and Visual Studio
Message-ID: <A2BD8A00D4875049BF0B6E00E50EB8C20A10C7@MAILSRV06.acsisinc.com>

We have this application in production that uses Antlr 2.7.  (Antlr was
a major factor in the creation of this successful product.)  While
upgrading the application, I also tried upgrading to Antrl 3.0.1, only
to find that the CSharp runtime seems to be broken.  Is this true?  Does
nobody use Antlr 3.0.1 with C# on Visual Studio?  The symptom is that
the ANTRLInputStream constructor hangs.  I found while googling that a
couple others had reported the same problem, but there appeared to be no
response offering a solution.

 

Interestingly, one of my google hits was some source code written by
Kunle Odutola that contains this test case (note the name of the
method):

 

[Test]

                public void TestANTLRInputStreamConstructorDoesNotHang()

                {

                                Encoding encoding = Encoding.Unicode;

                                byte[] grammarStrBuffer =
encoding.GetBytes(grammarStr);

                                MemoryStream grammarStream = new
MemoryStream(grammarStrBuffer);

 

                                ANTLRInputStream input = new
ANTLRInputStream(grammarStream, encoding);

                }

 

Using that same sequence of statements hangs when I try it.

 

If somebody knows the status of this problem or could point out what
bone-headed thing I might be doing wrong, I would appreciate it.

 

 -- gene


__________________
Any e-mail communication originating from Acsis Inc (or Acsis GmbH), is intended for business purposes only and its use is explicitly intended for the addressed recipient only.  This e-mail communication may also contain information that may be considered confidential or protected by law.  If you received this e-mail and are not the intended recipient, you are hereby formally notified that any use (including the copying or distributing) of this communication, in part, or in whole, is strictly prohibited by law.  If the case, you are formally requested to then notify the originator at Acsis Inc. (or Acsis GmbH), by return e-mail and to delete this e-mail from your mail system.  Additionally, unless explicitly designated this e-mail does not constitute to represent a formal binding contract under law.  Finally, the receipt of this e-mail communication does not constitute a consent to the use of the originators contact information for any direct marketing purposes or for transfers of data to third parties.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071220/12d36404/attachment.html 

From r.mark.volkmann at gmail.com  Thu Dec 20 10:00:41 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 20 Dec 2007 12:00:41 -0600
Subject: [antlr-interest] omission in BaseRecognizer.java?
Message-ID: <f0fcc6820712201000h715e0849meeb3d54e47b50e22@mail.gmail.com>

I noticed that the getErrorMessage method in BaseRecognizer.java
provides a message for every subclass of RecognizerException except
MismatchedRangeException. In that case null is returned. It probably
needs to be handled. Maybe the nested if should end in an else that
returns a reasonable message for any subclass of RecognizerException
that isn't specifically handled in case new subclasses are added
later.

-- 
R. Mark Volkmann
Object Computing, Inc.

From andreas.ravnestad at gmail.com  Thu Dec 20 11:07:05 2007
From: andreas.ravnestad at gmail.com (Andreas Ravnestad)
Date: Thu, 20 Dec 2007 20:07:05 +0100
Subject: [antlr-interest] Development of an XQuery parser with full-text
 extensions, project report
Message-ID: <476ABD59.2070002@gmail.com>

Hi all,

This autumn a fellow student and myself have been working on an XQFT 
parser front end, putting ANTLR to the test as the designated parser 
generator. Here is the complete project report: 
http://folk.ntnu.no/andrerav/report.pdf

The report details a fair amount of ANTLR features (all the way from 
lexing to AST generation), as well as some limitations. I figured you 
guys might be interested in checking it out :)

-Andreas

From Waverly.Edwards at genesys.com  Thu Dec 20 11:11:58 2007
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Thu, 20 Dec 2007 14:11:58 -0500
Subject: [antlr-interest] attempt to compare antlr vs
	bison/flexperformance
In-Reply-To: <08DFF476-A43D-4711-81A7-2E19DE56AE12@cs.usfca.edu>
References: <4769A7C3.8010206@ti.com>
	<08DFF476-A43D-4711-81A7-2E19DE56AE12@cs.usfca.edu>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1DDA5AD@navamane001.ad.internal.corp>

 
If possible, would you create a before and after grammar.  By having
both it would give me ideas on what
to look for and think about in making a faster grammar.


Thank you,


W.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: Thursday, December 20, 2007 12:40 PM
To: Minas Hambardzumyan
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] attempt to compare antlr vs
bison/flexperformance

Hi Minas.  Can you try it on the Java grammar(s)?  I spent a bit of time
making that fast.

[snip]

From r.mark.volkmann at gmail.com  Thu Dec 20 11:33:14 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 20 Dec 2007 13:33:14 -0600
Subject: [antlr-interest] why override recoverFromMismatchSet?
Message-ID: <f0fcc6820712201133o35b34368nc954e3db1396871b@mail.gmail.com>

Why does section 10.4 in the book recommend overriding
recoverFromMismatchSet in order to make the parser exit immediately
upon recognition error? It seems that overriding mismatch so it
doesn't call recoverFromMismatchSet (as shown in the same section)
would be sufficient.

-- 
R. Mark Volkmann
Object Computing, Inc.

From bshkara at gmail.com  Thu Dec 20 12:08:00 2007
From: bshkara at gmail.com (Basil Shkara)
Date: Fri, 21 Dec 2007 07:08:00 +1100
Subject: [antlr-interest] $TOKEN.pos absolute location
In-Reply-To: <"L95911FA8445F444fAD581F75040D73E6.1198082818.scalix.temporal-wave.com*"@MHS>
References: <"L95911FA8445F444fAD581F75040D73E6.1198082818.scalix.temporal-wave.com*"@MHS>
Message-ID: <5C881535-3D85-4E45-8BFF-0EAA4BC64582@gmail.com>

Thanks Jim,

You're right.  $rule.start will return the absolute location.

However in ObjC, you receive an ANTLRToken object so to get at the  
value, send the message: tokenIndex to return an unsigned int which  
you can then use.

So something like this: [$rule.start tokenIndex] will work.

However I have noticed that sending tokenIndex on the ANTLRToken  
returned from $rule.stop in the ObjC target will always return the  
value 0 which seems like a bug in the templates.

This is in the latest ObjC.stg from fisheye.

Regards,
Basil.

On 20/12/2007, at 3:40 AM, Jim Idle wrote:

> In the other targets this is just the .start element. I would think it
> is the same for objc.
>
> Jim
>
>> -----Original Message-----
>> From: Basil Shkara [mailto:bshkara at gmail.com]
>> Sent: Wednesday, December 19, 2007 3:34 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] $TOKEN.pos absolute location
>>
>> Hi,
>>
>> Using $TOKEN.pos gives you the position relative to $TOKEN's line.   
>> Is
>> there an easy way of receiving the position relative to all  
>> characters
>> occurring beforehand?
>>
>> So rather than receiving pos=43, line=2 - is it possible to receive
>> pos=80, assuming that there are 79 characters before $TOKEN?
>>
>> I am currently using the ObjC target and am using a lot of messy
>> instance variables to count every token as


From r.mark.volkmann at gmail.com  Thu Dec 20 13:59:41 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 20 Dec 2007 15:59:41 -0600
Subject: [antlr-interest] building ANTLR 3.0.1
Message-ID: <f0fcc6820712201359v38eb0399k18e2ccb423d8f57a@mail.gmail.com>

I downloaded the source and ran "ant" from the directory by created by
unzipping it, but I get

Buildfile: build.xml

generator-prepare:
    [mkdir] Created dir:
/Users/Mark/Documents/Programming/ANTLR/antlr-3.0.1/codegen
     [copy] Copying 6 files to
/Users/Mark/Documents/Programming/ANTLR/antlr-3.0.1/codegen

generator:
    [antlr] Exception in thread "main" java.lang.NoClassDefFoundError:
antlr/Tool

BUILD FAILED

The class antlr/Tool is in lib/antlr-2.7.7.jar which would seem to be
in the classpath defined in build.xml.

I saw the wiki page on "How do I rebuild ANTLR v3?" at
http://www.antlr.org/wiki/pages/viewpage.action?pageId=732 but it
doesn't indicate that I'm missing any steps.

I think the key questions are "What classpath does the generate Ant
task use?" and "Where is the generate Ant task defined?"

-- 
R. Mark Volkmann
Object Computing, Inc.

From minas at ti.com  Thu Dec 20 14:27:29 2007
From: minas at ti.com (Minas Hambardzumyan)
Date: Thu, 20 Dec 2007 16:27:29 -0600
Subject: [antlr-interest] attempt to compare antlr vs bison/flex
	performance
In-Reply-To: <08DFF476-A43D-4711-81A7-2E19DE56AE12@cs.usfca.edu>
References: <4769A7C3.8010206@ti.com>
	<08DFF476-A43D-4711-81A7-2E19DE56AE12@cs.usfca.edu>
Message-ID: <476AEC51.4070802@ti.com>

I guess I could compare antlr java parser with the bison version in the 
gcc compiler. I will send an update when I get some results...

One conclusion seams to be obvious though. If the speed is of essence, 
then one has to simplify the grammar definition as close to LL(1) as 
possible. Doing so though moves the grammar definition away from the 
simple to read EBNF format -- one of the most important advantages of 
using antlr. So it is up to the user to pick -- easy to use/read vs not 
os easy but fast...

Regards,
Minas.

Terence Parr wrote:
> Hi Minas. Can you try it on the Java grammar(s)? I spent a bit of time 
> making that fast.
>
> Ter
> On Dec 19, 2007, at 3:22 PM, Minas Hambardzumyan wrote:
>
>> Hello,
>>
>> In an effort to compare antlr and bison/flex parsers, I did the 
>> following exercise:
>>
>> - found and compiled bison/flex "C" language parser from the 
>> following location:
>> ftp://ftp.uu.net/usenet/net.sources/ansi.c.grammar.Z
>> - downloaded and compiled antlr3 implementation of "C" language 
>> parser from this directory in antlr3 examples:
>> antlr/examples-v3/C/C
>> - preprocessed a "C" language file and stripped it such that both 
>> parser would pass it through (mostly minor changes)
>> - compared runtime for each parser
>>
>>
>> The results of this exercise show that the antlr parser is ~9 times 
>> slower than the flex/bison parser. I have used the same version of 
>> GNU C compiler for both parsers, with exact same compile options.
>>
>> Although the grammar definitions come from different sources, I still 
>> think this exercise gives a general idea about performance 
>> differences of these parsers. Could anyone please tell me if this is 
>> an expected runtime difference or you think I could do some 
>> optimizations to get faster performance from antlr3.
>>
>> I can send the complete code I used for both parsers, or any parts of 
>> it, if necessary. Just tell me which part would be of interest.
>>
>> Thanks,
>> Minas
>


From nalinchandrawansha at yahoo.com  Fri Dec 21 00:47:33 2007
From: nalinchandrawansha at yahoo.com (Nalin Chandrawansha)
Date: Fri, 21 Dec 2007 00:47:33 -0800 (PST)
Subject: [antlr-interest] How to get the line no. of a token at lexer
Message-ID: <805829.57471.qm@web60225.mail.yahoo.com>

Hi,
 
Is there any method of retrieving the line no. of a token at lexer? 
 
For example, if we want to catch the line numbers of comments,
 
LINE_COMMENT : label='//'  ~('\n'|'\r')* '\r'? '\n'  {System.out.println("Found a comment at line : "  +$label.line );}  {$channel=HIDDEN;}    ;
 
This doesn't work at lexer though we can use the .line at the paresr rules.
 
 
Thank you.
Nalin Chandrawansha

Send instant messages to your online friends http://uk.messenger.yahoo.com 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071221/7f3f47ba/attachment.html 

From antlr at mirality.co.nz  Fri Dec 21 01:21:01 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 21 Dec 2007 22:21:01 +1300
Subject: [antlr-interest] How to get the line no. of a token at  lexer
In-Reply-To: <805829.57471.qm@web60225.mail.yahoo.com>
References: <805829.57471.qm@web60225.mail.yahoo.com>
Message-ID: <20071221092119.DE74611EB38@www.antlr.org>

At 21:47 21/12/2007, Nalin Chandrawansha wrote:
>Is there any method of retrieving the line no. of a token at 
>lexer?
>
>For example, if we want to catch the line numbers of comments,
>
>LINE_COMMENT : label='//'  ~('\n'|'\r')* '\r'? 
>'\n'  {System.out.println("Found a comment at line : 
>"  +$label.line );}  {$channel=HIDDEN;}    ;
>
>This doesn't work at lexer though we can use the .line at the 
>paresr rules.

This is because in the parser a label represents a token (which 
contains line information) whereas in the lexer a label is just a 
character.

However you should be able to access the members of the lexer 
class which are tracking the information it will end up putting in 
the token it's about to create; this is target-specific, 
though.  For the Java target I think you can just use 
"tokenStartLine".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071221/27237963/attachment.html 

From harald_m_mueller at gmx.de  Fri Dec 21 02:09:42 2007
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Fri, 21 Dec 2007 11:09:42 +0100
Subject: [antlr-interest] Antlr and Visual Studio
In-Reply-To: <A2BD8A00D4875049BF0B6E00E50EB8C20A10C7@MAILSRV06.acsisinc.com>
References: <A2BD8A00D4875049BF0B6E00E50EB8C20A10C7@MAILSRV06.acsisinc.com>
Message-ID: <20071221100942.7660@gmx.net>

Hi -

Actually, I ran into the same problem (IS THIS A BUG??).
The only solution I found was to use ANTLRFileStream, which is very fast.

(When looking into ANTLR's sources, I see that all code is based on ANTLRStringStream: Doesn't that mean that

(a) the problem with ANTRLInputStream is local to that class? - and the code seems simple enough to find any potential problem ...

(b) ANTLR now always will want to read a file completely before working with it? What does that mean for reading e.g. GB-sized files?? or having parsers in pipelines with the expectation that they will emit something when "enough input" (for a rule?) has been read - is all this "not-intended usage"?

Regards
Harald

-------- Original-Nachricht --------
> Datum: Thu, 20 Dec 2007 12:58:10 -0500
> Von: "Dykes, Gene" <GDykes at acsisinc.com>
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Antlr and Visual Studio

> We have this application in production that uses Antlr 2.7.  (Antlr was
> a major factor in the creation of this successful product.)  While
> upgrading the application, I also tried upgrading to Antrl 3.0.1, only
> to find that the CSharp runtime seems to be broken.  Is this true?  Does
> nobody use Antlr 3.0.1 with C# on Visual Studio?  The symptom is that
> the ANTRLInputStream constructor hangs.  I found while googling that a
> couple others had reported the same problem, but there appeared to be no
> response offering a solution.
> 
>  
> 
> Interestingly, one of my google hits was some source code written by
> Kunle Odutola that contains this test case (note the name of the
> method):
> 
>  
> 
> [Test]
> 
>                 public void TestANTLRInputStreamConstructorDoesNotHang()
> 
>                 {
> 
>                                 Encoding encoding = Encoding.Unicode;
> 
>                                 byte[] grammarStrBuffer =
> encoding.GetBytes(grammarStr);
> 
>                                 MemoryStream grammarStream = new
> MemoryStream(grammarStrBuffer);
> 
>  
> 
>                                 ANTLRInputStream input = new
> ANTLRInputStream(grammarStream, encoding);
> 
>                 }
> 
>  
> 
> Using that same sequence of statements hangs when I try it.
> 
>  
> 
> If somebody knows the status of this problem or could point out what
> bone-headed thing I might be doing wrong, I would appreciate it.
> 
>  
> 
>  -- gene
> 
> 
> __________________
> Any e-mail communication originating from Acsis Inc (or Acsis GmbH), is
> intended for business purposes only and its use is explicitly intended for
> the addressed recipient only.  This e-mail communication may also contain
> information that may be considered confidential or protected by law.  If you
> received this e-mail and are not the intended recipient, you are hereby
> formally notified that any use (including the copying or distributing) of this
> communication, in part, or in whole, is strictly prohibited by law.  If the
> case, you are formally requested to then notify the originator at Acsis
> Inc. (or Acsis GmbH), by return e-mail and to delete this e-mail from your
> mail system.  Additionally, unless explicitly designated this e-mail does not
> constitute to represent a formal binding contract under law.  Finally, the
> receipt of this e-mail communication does not constitute a consent to the
> use of the originators contact information for any direct marketing
> purposes or for transfers of data to third parties.

-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

From andres.bernasconi at gmail.com  Fri Dec 21 04:54:26 2007
From: andres.bernasconi at gmail.com (Andres Bernasconi)
Date: Fri, 21 Dec 2007 09:54:26 -0300
Subject: [antlr-interest] missing attribute access on rule scope when
	testing token in action section
Message-ID: <aad8a2e0712210454q78abb090hd53e86d58ff61a6b@mail.gmail.com>

I would like to provide an example for this problem (working with ANTLRWorks
1.1.5):

This grammar "compiles" OK:
grammar testGrammar;

error_test
    :    someval=(other_rule)
    {
        if($someval != null ){
            System.out.println($someval.text);
        }
    };


other_rule
    :    'A' ('A' | 'B')+;


but this one, does NOT:
grammar testGrammar;

error_test
    :    someval=other_rule
    {
        if($someval != null ){
            System.out.println($someval.text);
        }
    };


other_rule
    :    'A' ('A' | 'B')+;


Another problem is the Java code generated by ANTLR (in the first case):
        try {
            //
D:\\data\\dev\\tools\\antlrWorks\\grammars\\testGrammar.g:4:2: (someval= (
other_rule ) )
            //
D:\\data\\dev\\tools\\antlrWorks\\grammars\\testGrammar.g:4:4: someval= (
other_rule )
            {
            //
D:\\data\\dev\\tools\\antlrWorks\\grammars\\testGrammar.g:4:12: ( other_rule
)
            //
D:\\data\\dev\\tools\\antlrWorks\\grammars\\testGrammar.g:4:13: other_rule
            {
            pushFollow(FOLLOW_other_rule_in_error_test14);
            other_rule();
            _fsp--;


            }


                    if(someval != null ){
                        System.out.println(someval.getText());
                    }


            }

you can notice that the "someval" variable is never assigned a value.

Now if I change the second example (the non-working one) and avoid the $ in
the if statement
if( someval != null )

The code compiles and it generates the following valid Java Code:
...
pushFollow(FOLLOW_other_rule_in_error_test13);
someval=other_rule();
_fsp--;
...

where 'someval' is being assigned a value.

Regards
Andres B.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071221/9f3ae5ba/attachment-0001.html 

From r.mark.volkmann at gmail.com  Fri Dec 21 06:33:54 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 21 Dec 2007 08:33:54 -0600
Subject: [antlr-interest] overriding BaseRecognizer methods for lexer,
	parser and tree parser
Message-ID: <f0fcc6820712210633y348ef8d4tf48040e8ae429209@mail.gmail.com>

I'd like to override the displayRecognitionError method for all three
of my generated parser classes, the lexer, the token parser and the
tree parser. It seems that the only way to do this is to repeat my new
version of that method three times in my grammar files. Is there a
better way? My first thought was to create my own subclass of
BaseRecognizer and then tell ANTLR to use that instead of
BaseRecognizer as the superclass of Lexer, Parser and TreeParser which
are the superclasses of the generated classes. Of course that doesn't
make sense because Java can't just switch the superclass of classes
that aren't generated.

-- 
R. Mark Volkmann
Object Computing, Inc.

From jflack at math.purdue.edu  Fri Dec 21 07:52:17 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 21 Dec 2007 10:52:17 -0500
Subject: [antlr-interest] disambiguating sempred in a closure?
Message-ID: <476BE131.4080504@math.purdue.edu>


Hi,

I have backed myself into a corner where I need semantic
information to decide whether to take an exit branch:

prod : something
        ( options { greedy=true; }
        : { muppet }? ( KERMIT | FOZZIE )
        | { turtle }? ( LEONARDO | DONATELLO )
        )*
      ;

so that even if the lookahead is KERMIT or FOZZIE
I should take the exit branch if I'm not looking for
muppets. (Before you ask, no, I don't know this
statically; actions may alter these flags on any
iteration. Such is the language I'm trying to parse.)

antlr 2.7.7 treats these sempreds as validating because they
are not at the top of the production, so they throw exceptions
instead of exiting the closure. I haven't tried to port my
grammar to antlr 3 yet.

1.  Is there a way to refactor this production in antlr 2.7.7
     to get the behavior I want?

2.  Is it easier in antlr 3?  Is it enough easier that I should
     bite the bullet and port the 1100 line grammar rather than
     fussing with it in 2.7.7?

Thanks,
-Chap


From r.mark.volkmann at gmail.com  Fri Dec 21 08:24:23 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 21 Dec 2007 10:24:23 -0600
Subject: [antlr-interest] separating lexer and parser rules
Message-ID: <f0fcc6820712210824v5581f977s7d397ae9448d3db4@mail.gmail.com>

If I put my lexer and parser rules in separate grammar files, what do
I have to do in the parser grammar so it is aware of the lexer rules?
When I try to generate the parser class I get lots of error messages
that say "literal has no associated lexer rule".

-- 
R. Mark Volkmann
Object Computing, Inc.

From sam.ellis at arm.com  Fri Dec 21 08:40:47 2007
From: sam.ellis at arm.com (Sam Ellis)
Date: Fri, 21 Dec 2007 16:40:47 +0000
Subject: [antlr-interest] overriding BaseRecognizer methods for lexer,
	parser and tree parser
In-Reply-To: <f0fcc6820712210633y348ef8d4tf48040e8ae429209@mail.gmail.com>
Message-ID: <C3919D0F.1FB65%sam.ellis@arm.com>

On 21/12/2007 14:33, "Mark Volkmann" <r.mark.volkmann at gmail.com> wrote:

> I'd like to override the displayRecognitionError method for all three
> of my generated parser classes, the lexer, the token parser and the
> tree parser. It seems that the only way to do this is to repeat my new
> version of that method three times in my grammar files. Is there a
> better way? My first thought was to create my own subclass of
> BaseRecognizer and then tell ANTLR to use that instead of
> BaseRecognizer as the superclass of Lexer, Parser and TreeParser which
> are the superclasses of the generated classes. Of course that doesn't
> make sense because Java can't just switch the superclass of classes
> that aren't generated.

I solve this by creating a new class that is responsible for all error
reporting, and then pass an instance of this class to the lexer and parser.
I override the lexer and parser constructor to pass the error reporting
class as a new parameter, but an alternative is do this via a separate
method call instead. In the lexer and parser I override the error reporting
methods to call my new error reporting class. This means most of the error
reporting code is centralised, and the changes to the lexer and parser are
trivial.


-- 
Sam Ellis, Engineering Manager,
Product Engineering Group,                 Tel: +44 (0) 1223 400516
System Design Division,                    Fax: +44 (0) 1223 400887
ARM Ltd., 110 Fulbourn Road,               skype:armsamellis
Cambridge, CB1 9NJ                         mailto:sam.ellis at arm.com



-- 
IMPORTANT NOTICE: The contents of this email and any attachments are confidential and may also be privileged. If you are not the intended recipient, please notify the sender immediately and do not disclose the contents to any other person, use it for any purpose, or store or copy the information in any medium.  Thank you.



From r.mark.volkmann at gmail.com  Fri Dec 21 09:21:39 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 21 Dec 2007 11:21:39 -0600
Subject: [antlr-interest] literal apostrophe in lexer rule
Message-ID: <f0fcc6820712210921r30949437u20c4bb228bdb7511@mail.gmail.com>

Why do I get "unexpected char: '\' from the following lexer rule?

APOSTROPHE: '\'';

-- 
R. Mark Volkmann
Object Computing, Inc.

From jaluber at gmx.de  Fri Dec 21 09:45:52 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 21 Dec 2007 18:45:52 +0100
Subject: [antlr-interest] separating lexer and parser rules
In-Reply-To: <f0fcc6820712210824v5581f977s7d397ae9448d3db4@mail.gmail.com>
References: <f0fcc6820712210824v5581f977s7d397ae9448d3db4@mail.gmail.com>
Message-ID: <476BFBD0.20006@gmx.de>

Mark Volkmann schrieb:
> If I put my lexer and parser rules in separate grammar files, what do
> I have to do in the parser grammar so it is aware of the lexer rules?
> When I try to generate the parser class I get lots of error messages
> that say "literal has no associated lexer rule".
> 

Add in the parser options:

tokenVocab=LexerName;

LexerName has to be the names of the .tokens file of your lexer with the
file ending.

Johannes

From r.mark.volkmann at gmail.com  Fri Dec 21 09:52:33 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 21 Dec 2007 11:52:33 -0600
Subject: [antlr-interest] separating lexer and parser rules
In-Reply-To: <476BFBD0.20006@gmx.de>
References: <f0fcc6820712210824v5581f977s7d397ae9448d3db4@mail.gmail.com>
	<476BFBD0.20006@gmx.de>
Message-ID: <f0fcc6820712210952w5cc78676r44769929d030f27@mail.gmail.com>

On Dec 21, 2007 11:45 AM, Johannes Luber <jaluber at gmx.de> wrote:
> Mark Volkmann schrieb:
> > If I put my lexer and parser rules in separate grammar files, what do
> > I have to do in the parser grammar so it is aware of the lexer rules?
> > When I try to generate the parser class I get lots of error messages
> > that say "literal has no associated lexer rule".
> >
>
> Add in the parser options:
>
> tokenVocab=LexerName;
>
> LexerName has to be the names of the .tokens file of your lexer with the
> file ending.

Thanks! Now I need to decide what to name the grammar files so that
reasonable class names are generated. I'd love to name my grammar
files something like MathLexer.g, MathParser.g and MathTree.g. If I do
that though then my generated Lexer class will be MathLexerLexer.java
and my generated Parser class will be MathParserParser.java. Is there
a common convention for grammar file names?

-- 
R. Mark Volkmann
Object Computing, Inc.

From jaluber at gmx.de  Fri Dec 21 10:05:42 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 21 Dec 2007 19:05:42 +0100
Subject: [antlr-interest] separating lexer and parser rules
In-Reply-To: <f0fcc6820712210952w5cc78676r44769929d030f27@mail.gmail.com>
References: <f0fcc6820712210824v5581f977s7d397ae9448d3db4@mail.gmail.com>	
	<476BFBD0.20006@gmx.de>
	<f0fcc6820712210952w5cc78676r44769929d030f27@mail.gmail.com>
Message-ID: <476C0076.3000005@gmx.de>

Mark Volkmann schrieb:
> Thanks! Now I need to decide what to name the grammar files so that
> reasonable class names are generated. I'd love to name my grammar
> files something like MathLexer.g, MathParser.g and MathTree.g. If I do
> that though then my generated Lexer class will be MathLexerLexer.java
> and my generated Parser class will be MathParserParser.java. Is there
> a common convention for grammar file names?

3.1 won't add Lexer or Parser to single grammars - until then you have
to live with it.

Johannes


From jpschewe at mtu.net  Fri Dec 21 12:00:12 2007
From: jpschewe at mtu.net (Jon Schewe)
Date: Fri, 21 Dec 2007 14:00:12 -0600
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <47686EA2.2050305@mtu.net>
References: <47686EA2.2050305@mtu.net>
Message-ID: <476C1B4C.5060006@mtu.net>

I figured it out.  Can someone let me know if I'm doing something
inherently bad here by mucking with the input stream directly and
calling the rule method directly?
loop
@init {
  Map<String, Integer> loopScope = new HashMap<String, Integer>();
  pushScope(loopScope);
}
:
^(
  'LOOP'
  ^(index=ID lb=numint ub=numint) {null == getValue($index.text) }? {
      System.out.println("Do loop with index: " + $index.text + " from "
+ $lb.value + " to " + $ub.value);
      // save the place we are at just before the constraints
      final int marker = ((CommonTreeNodeStream)input).mark();
      for(int counter=$lb.value; counter <= $ub.value; ++counter) {
        loopScope.put($index.text, counter);
        // jump to just before the constraints
        ((CommonTreeNodeStream)input).rewind(marker);
        constraints();
      }
  }
  //constraints
) /*{
    System.out.println("End of loop");
    for(int i=$lb.value; i<=$ub.value; ++i) {
      loopScope.put($ID.text, i);
      constraints(); // invoke constraints rule
    }
  }*/
;
finally {
  // remove loop scope
  popScope();
}

Jon Schewe wrote:
> I've got something I'd like to do with antlr and I'm not sure it's
> possible.  I want to unfold loops with antlr inside the parser.  The
> idea is this, say I've got an input file like below.  Now antlr has
> given me the ability to write nice rules to parse this language and to
> do various actions on each rule.  What I'd really like to do is to be
> able to tell antlr to repeat a rule action on the same input stream
> multiple times while I change some data outside.  Another option would
> be for me to be able to duplicate a set of tokens during parsing.  Say
> if I know the set of tokens between LOOP and END, could I tell antlr to
> duplicate that set of tokens 10 times (since the loop goes from 1 to 10)
> with an extra token added in to tell me the loop index during the
> initial parse and then let the tree parser just walk the tree?
>
> I'm sure I could hand the AST off to some custom method to do it, but
> that seems like I'm duplicating what antlr is already doing in the tree
> parser.
>
> Params
> i 5;
>
> Variables
> x[i];
> y;
>
> Constraints
> LOOP index 1...10:
>   loop[index]:
>   f[index] = 10 * x[index];
> END
>
> simple:
> g = 5 * y;
>
>   

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From fog at initd.org  Fri Dec 21 12:55:42 2007
From: fog at initd.org (Federico Di Gregorio)
Date: Fri, 21 Dec 2007 21:55:42 +0100
Subject: [antlr-interest] Question about Antlr grammar
Message-ID: <1198270542.4318.4.camel@mila.office.dinunzioedigregorio>

Out of curiosity, can someone explain why in Antlr some "keywords" have
a leading @ and some haven't? Why @begin but not @scope?

Thanks,
federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
 If we are going to teach "creation science" as an alternative to
  evolution, then we should also teach the stork theory as an
  alternative to biological reproduction.                -- Judith Hayes


From parrt at cs.usfca.edu  Fri Dec 21 12:59:38 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Dec 2007 12:59:38 -0800
Subject: [antlr-interest] Question about Antlr grammar
In-Reply-To: <1198270542.4318.4.camel@mila.office.dinunzioedigregorio>
References: <1198270542.4318.4.camel@mila.office.dinunzioedigregorio>
Message-ID: <FFE49A5E-B1DC-423E-9254-4A42CF192816@cs.usfca.edu>


On Dec 21, 2007, at 12:55 PM, Federico Di Gregorio wrote:

> Out of curiosity, can someone explain why in Antlr some "keywords"  
> have
> a leading @ and some haven't? Why @begin but not @scope?

@ "at" is for "action"

Ter

From fog at initd.org  Fri Dec 21 13:05:45 2007
From: fog at initd.org (Federico Di Gregorio)
Date: Fri, 21 Dec 2007 22:05:45 +0100
Subject: [antlr-interest] Question about Antlr grammar
In-Reply-To: <FFE49A5E-B1DC-423E-9254-4A42CF192816@cs.usfca.edu>
References: <1198270542.4318.4.camel@mila.office.dinunzioedigregorio>
	<FFE49A5E-B1DC-423E-9254-4A42CF192816@cs.usfca.edu>
Message-ID: <1198271145.4318.10.camel@mila.office.dinunzioedigregorio>


Il giorno ven, 21/12/2007 alle 12.59 -0800, Terence Parr ha scritto:
> On Dec 21, 2007, at 12:55 PM, Federico Di Gregorio wrote:
>
> > Out of curiosity, can someone explain why in Antlr some "keywords"  
> > have
> > a leading @ and some haven't? Why @begin but not @scope?
>
> @ "at" is for "action"

Like in "actions are blocks of text written in the target language"?
Then I understand why we have @headers or @members. Thank you very much.
(But.. mm.. why not @scope? :)

Btw, I received the book today; I hightly suggest buying it to anybody
using antlr. Great work Ter.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
 To prepare such test data, I get into the meaniest, nastiest frame of
  mind that I can manage, and I write the cruelest code I can think of;
  then I turn around and I embed that in even nastier constructions
  that are almost obscene.                                  -- D.E.Knuth


From harald_m_mueller at gmx.de  Fri Dec 21 13:17:08 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Fri, 21 Dec 2007 22:17:08 +0100
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <476C1B4C.5060006@mtu.net>
Message-ID: <20071221211714.7098811EB6F@www.antlr.org>

Hi -

Once again a blunt answer: No-one would (and should) do this voluntarily.
This is code which only works - but this is one of the worst things one can
say about code.

Under all normal circumstances, you would use rewriting to do this, i.e. you
would load the input into some intermediate form (ANTLR trees, e.g.
CommonTree; your own homegrown tree; even an XML structure), then work on
this intermediate structure (using ANTLR rewrite rules; or your own manual
visitor; or XSLT). Only such an architecture yields the necessary
"separations of concerns" or "assignment of responsibilities".

What you do is "only possible," but nothing more.

If for some reason (usually if you are in a very big hurry; and no real
quality needs to be delivered) you want to deliver this code (after it
miracuously survives some code review), you should at least write a comment
of >= 30 lines where you explain
* why you did not choose a standard rewriting solution;
* what should happen if the code fails (or why you can prove that it will
not fail; even when the implementation of the ANTLR runtime changes so that
usual lexers and parsers will still work)
* and label this with "HACK" (or at least "HACK?").
A bunch of unit tests tailored to this specific code should also be
provided, so that in the case that suddenly this does not work any longer,
someone can run those tests and conclude "aha, the tricky code with the
stream rewinding and direct calling is broken, after all ... let's now
either throw away the software or get the budget to write it according to a
standard design."

This is about how people on my projects have to handle such "I figured it
out" solutions.

Regards
Harald

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jon Schewe
> Sent: Friday, December 21, 2007 9:00 PM
> To: Antlr List
> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
> 
> I figured it out.  Can someone let me know if I'm doing 
> something inherently bad here by mucking with the input 
> stream directly and calling the rule method directly?
> loop
> @init {
>   Map<String, Integer> loopScope = new HashMap<String, Integer>();
>   pushScope(loopScope);
> }
> :
> ^(
>   'LOOP'
>   ^(index=ID lb=numint ub=numint) {null == getValue($index.text) }? {
>       System.out.println("Do loop with index: " + $index.text 
> + " from "
> + $lb.value + " to " + $ub.value);
>       // save the place we are at just before the constraints
>       final int marker = ((CommonTreeNodeStream)input).mark();
>       for(int counter=$lb.value; counter <= $ub.value; ++counter) {
>         loopScope.put($index.text, counter);
>         // jump to just before the constraints
>         ((CommonTreeNodeStream)input).rewind(marker);
>         constraints();
>       }
>   }
>   //constraints
> ) /*{
>     System.out.println("End of loop");
>     for(int i=$lb.value; i<=$ub.value; ++i) {
>       loopScope.put($ID.text, i);
>       constraints(); // invoke constraints rule
>     }
>   }*/
> ;
> finally {
>   // remove loop scope
>   popScope();
> }
> 
> Jon Schewe wrote:
> > I've got something I'd like to do with antlr and I'm not sure it's 
> > possible.  I want to unfold loops with antlr inside the 
> parser.  The 
> > idea is this, say I've got an input file like below.  Now antlr has 
> > given me the ability to write nice rules to parse this 
> language and to 
> > do various actions on each rule.  What I'd really like to 
> do is to be 
> > able to tell antlr to repeat a rule action on the same input stream 
> > multiple times while I change some data outside.  Another 
> option would 
> > be for me to be able to duplicate a set of tokens during 
> parsing.  Say 
> > if I know the set of tokens between LOOP and END, could I 
> tell antlr 
> > to duplicate that set of tokens 10 times (since the loop 
> goes from 1 
> > to 10) with an extra token added in to tell me the loop 
> index during 
> > the initial parse and then let the tree parser just walk the tree?
> >
> > I'm sure I could hand the AST off to some custom method to 
> do it, but 
> > that seems like I'm duplicating what antlr is already doing in the 
> > tree parser.
> >
> > Params
> > i 5;
> >
> > Variables
> > x[i];
> > y;
> >
> > Constraints
> > LOOP index 1...10:
> >   loop[index]:
> >   f[index] = 10 * x[index];
> > END
> >
> > simple:
> > g = 5 * y;
> >
> >   
> 
> --
> Jon Schewe | http://mtu.net/~jpschewe
> If you see an attachment named signature.asc, this is my 
> digital signature.
> See http://www.gnupg.org for more information.
> 
> For I am convinced that neither death nor life, neither 
> angels nor demons, neither the present nor the future, nor 
> any powers, neither height nor depth, nor anything else in 
> all creation, will be able to separate us from the love of 
> God that is in Christ Jesus our Lord. - Romans 8:38-39
> 


From harald_m_mueller at gmx.de  Fri Dec 21 13:31:15 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Fri, 21 Dec 2007 22:31:15 +0100
Subject: [antlr-interest] Is the -1 bug in .NET ANTLR 3.0.1 runtime's
	ANTLRReaderStream fixed or not? (was: Antlr and Visual Studio)
Message-ID: <20071221213118.271A711EB82@www.antlr.org>

Hi ANTLR maintainers (Kunle?!?) -

In ANTLRReaderStream (in the C# runtime), there is or was a bug in method
Load(...): The condition of the do-while loop is in some sources

	while (num != -1);

whereas in other sources (interim builds) it is

	while (numRead != 0);

The latter is correct, the former is wrong and leads to an endless loop.

However, when I download the current source 3.0.1 from the ANTLR page
(ANTLR.Tool.zip from the link "Binary of ANTLR tool"; with
runtime\CSharp\bin\net-2.0\Antlr3.Runtime.dll with Version 0.3.0.37313 and
file date Aug. 13th, 2007, 11:40pm - i.e., the "latest ANTLR version") and
look into ANTLRReaderStream.Load() with Reflector, I still see the first -
wrong - condition!!
It seems something got mixed up here ...

Will/might this be repaired in some official 3.0.x release, or so we have to
wait for an official 3.1 for this?

BTW, array doubling is a somewhat slow algorithm for very long files - I
have input files with more than 100MB, which yields about 10 doublings and
hence copies around 1 GB of data. Below is a (not really beautified; and
intentionally .Net 1.1) variant which does only one copying over and hence
is faster (but requires twice the final memory instead of only 1.5 for the
original algorithm).

Regards
Harald M.

		/// <summary>
		/// Loads and buffers the contents of the specified reader
to be 
		/// used as this ANTLRReaderStream's source
		/// </summary>
		public virtual void Load(TextReader reader, int size, int
readChunkSize)
		{
			if (reader == null)
			{
				return;
			}
			if (size <= 0)
			{
				size = INITIAL_BUFFER_SIZE;
			}
			if (readChunkSize <= 0)
			{
				readChunkSize = READ_BUFFER_SIZE;
			}

			try
			{
			    IList buffers = new ArrayList(100);
			    int length;
                        for (int i = 0; ; i++) {
                            char[] segment = new char[readChunkSize];
                            int numRead = reader.Read(segment, p,
readChunkSize);
                            if (numRead != readChunkSize) 
                            {
                                char[] lastSegment = new char[numRead];
                                Array.Copy(segment, 0, lastSegment, 0,
numRead);
                                buffers.Add(lastSegment);
                                length = (buffers.Count - 1) * readChunkSize
+ numRead;
                                break;
                            } 
                            else 
                            {
                                buffers.Add(segment);
                            }
                        }
                        data = new char[length];
                        p = 0;
                        foreach (char[] segment in buffers) {
                            Array.Copy(segment, 0, data, p, segment.Length);
                            p += segment.Length;
                        }
			}
			finally
			{
				reader.Close();
			}
		}

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071221/f33f7245/attachment-0001.html 

From harald_m_mueller at gmx.de  Fri Dec 21 13:49:45 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Fri, 21 Dec 2007 22:49:45 +0100
Subject: [antlr-interest] disambiguating sempred in a closure?
In-Reply-To: <476BE131.4080504@math.purdue.edu>
Message-ID: <20071221214948.6CE9611EB9F@www.antlr.org>

Hi -

As far I can see, the sempreds ARE at the top of the (inner) rule. Below is
the code produced by ANTLR 2.7.5 for C# - I did not run it, but it looks
pretty correct.
And I would not go to ANTLR 3 with an 1100 line grammar, unless you plan
this as a major (and maybe failing) step in your project; I stopped working
on porting a 300 line grammar (lexer + parser) after I found that some
features from ANTLR 2.x are not (yet) present in ANTLR 3.x ...

Regards
Harald M.

	public void prod() //throws RecognitionException,
TokenStreamException
{
		
		returnAST = null;
		ASTPair currentAST = ASTPair.GetInstance();
		AST prod_AST = null;
		
		something();
		astFactory.addASTChild(currentAST, returnAST);
		{    // ( ... )*
			for (;;)
			{
				if (((LA(1)==KERMIT||LA(1)==FOZZIE))&&(
muppet ))		<<< go into this branch if muppet is true
				{
					{
						switch ( LA(1) )
						{
						case KERMIT:
						{
							AST tmp1_AST = null;
							tmp1_AST =
astFactory.create(LT(1));
	
astFactory.addASTChild(currentAST, tmp1_AST);
							match(KERMIT);
							break;
						}
						case FOZZIE:
						{
							AST tmp2_AST = null;
							tmp2_AST =
astFactory.create(LT(1));
	
astFactory.addASTChild(currentAST, tmp2_AST);
							match(FOZZIE);
							break;
						}
						default:
						{
							throw new
NoViableAltException(LT(1), getFilename());
						}
						 }
					}
				}
				else if
(((LA(1)==LEONARDO||LA(1)==DONATELLO))&&( turtle )) {		<<< go into
this branch if turtle is true
					{
						switch ( LA(1) )
						{
						case LEONARDO:
						{
							AST tmp3_AST = null;
							tmp3_AST =
astFactory.create(LT(1));
	
astFactory.addASTChild(currentAST, tmp3_AST);
							match(LEONARDO);
							break;
						}
						case DONATELLO:
						{
							AST tmp4_AST = null;
							tmp4_AST =
astFactory.create(LT(1));
	
astFactory.addASTChild(currentAST, tmp4_AST);
							match(DONATELLO);
							break;
						}
						default:
						{
							throw new
NoViableAltException(LT(1), getFilename());
						}
						 }
					}
				}
				else
<<< exit the loop if none of the above (lookaheads and flags) are true
				{
					goto _loop5_breakloop;
				}
				
			}
_loop5_breakloop:			;
		}    // ( ... )*
		prod_AST = currentAST.root;
		returnAST = prod_AST;
		ASTPair.PutInstance(currentAST);
	}
	

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of J Chapman Flack
> Sent: Friday, December 21, 2007 4:52 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] disambiguating sempred in a closure?
> 
> 
> Hi,
> 
> I have backed myself into a corner where I need semantic 
> information to decide whether to take an exit branch:
> 
> prod : something
>         ( options { greedy=true; }
>         : { muppet }? ( KERMIT | FOZZIE )
>         | { turtle }? ( LEONARDO | DONATELLO )
>         )*
>       ;
> 
> so that even if the lookahead is KERMIT or FOZZIE I should 
> take the exit branch if I'm not looking for muppets. (Before 
> you ask, no, I don't know this statically; actions may alter 
> these flags on any iteration. Such is the language I'm trying 
> to parse.)
> 
> antlr 2.7.7 treats these sempreds as validating because they 
> are not at the top of the production, so they throw 
> exceptions instead of exiting the closure. I haven't tried to 
> port my grammar to antlr 3 yet.
> 
> 1.  Is there a way to refactor this production in antlr 2.7.7
>      to get the behavior I want?
> 
> 2.  Is it easier in antlr 3?  Is it enough easier that I should
>      bite the bullet and port the 1100 line grammar rather than
>      fussing with it in 2.7.7?
> 
> Thanks,
> -Chap
> 


From fog at initd.org  Fri Dec 21 14:19:39 2007
From: fog at initd.org (Federico Di Gregorio)
Date: Fri, 21 Dec 2007 23:19:39 +0100
Subject: [antlr-interest] Possible bug in C# backend
Message-ID: <1198275579.4318.20.camel@mila.office.dinunzioedigregorio>

Hi,

using the C# backend and "scope" the generated code can't be compiled
because for every rule with a scope the compiler generates code that
references rulename_stack but never declares it. Is this enough or there
is a formal way to post a bug report?

(Or this is not a bug and I just don't understand scopes?)

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
            Bhoe, bhe, bhe. Sono brutto e cattivo. Brutto lama! -- Cuzco


From jflack at math.purdue.edu  Fri Dec 21 14:26:36 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 21 Dec 2007 17:26:36 -0500
Subject: [antlr-interest] disambiguating sempred in a closure?
In-Reply-To: <200712212150.lBLLoDbp013820@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
Message-ID: <476C3D9C.6070206@math.purdue.edu>


Harald M. M?ller wrote:
> As far I can see, the sempreds ARE at the top of the (inner) rule. Below is
> the code produced by ANTLR 2.7.5 for C# - I did not run it, but it looks
> pretty correct.
> 			for (;;)
> 			{
> 				if (((LA(1)==KERMIT||LA(1)==FOZZIE))&&(
> muppet ))
...
> 				else if
> (((LA(1)==LEONARDO||LA(1)==DONATELLO))&&( turtle )) {
> 				else
> 				{
> 					goto _loop5_breakloop;
> 				}
> 				
> 			}

Ah.  Hmmm.  My bad for sending in a simplified version of my
production without first confirming that it generates the same
code as the one in the real grammar!  I've tried it now and
indeed my simplified snippet produces code that would work.

Now I just have to figure out what I simplified out that makes
the difference in the generated code. One thing that changed is
that the real grammar has k=3. The generated code resembles this:

_loop113: do {
   if ((_tokenSet_30.member(LA(1))) && (_tokenSet_31.member(LA(2)))
   && (_tokenSet_6.member(LA(3)))) {
     if (((LA(1)==KERMIT||LA(1)==FOZZIE))&&
     fireSemanticPredicateEvaluated(
     antlr.debug.SemanticPredicateEvent.PREDICTING,18, muppet )) {
       op=mup();
     }
     else if (((LA(1)==LEONARDO||LA(1)==DONATELLO))&&
     fireSemanticPredicateEvaluated(
     antlr.debug.SemanticPredicateEvent.PREDICTING,19, turtle )) {
       op=tur();
     }
     else {
       throw new NoViableAltException(LT(1), getFilename());
     }
     suf=suffix();
   }
   else {
     break _loop113;
   }
} while (true);

Note that it will only take the exit if LA(1), LA(2), and LA(3)
are not in token sets 30, 31, and 6, respectively; the semantic
predicates only appear with the inner tests on LA(1), where
failure can only cause an exception to be thrown.

Thanks for demonstrating that my snippet was too far
simplified.  Hmmm.  Hmmmm.

-Chap

From jflack at math.purdue.edu  Fri Dec 21 14:58:25 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 21 Dec 2007 17:58:25 -0500
Subject: [antlr-interest] disambiguating sempred in a closure?
In-Reply-To: <476C3D9C.6070206@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
Message-ID: <476C4511.7010103@math.purdue.edu>


Ok, here is the simplified grammar that really does
demonstrate my dilemma. The predicates can't do what
I need because of the grouping parentheses added to
factor out the common something_else suffix.

I can get the code I want if I leave off the grouping
parens and duplicate the something_else suffix on
each branch. Is that the best I can do?  I hate to
duplicate the something_else (which is followed by
a nontrivial action).

Is the story the same in ANTLR 3?

-Chap

class CelebParser extends Parser;

prod : something
        ( options { greedy=true; }
        : ( { muppet }? ( KERMIT | FOZZIE )
          | { turtle }? ( LEONARDO | DONATELLO )
          )
	 something_else
        )*
      ;

something : APPLE
           | HOWITZER
	  ;

something_else : SPACESHIP
                | APTERYX
	       ;

From parrt at cs.usfca.edu  Fri Dec 21 15:13:55 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Dec 2007 15:13:55 -0800
Subject: [antlr-interest] disambiguating sempred in a closure?
In-Reply-To: <476C4511.7010103@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<476C4511.7010103@math.purdue.edu>
Message-ID: <B6F882D5-9B03-4E25-8871-C44DC7535468@cs.usfca.edu>


On Dec 21, 2007, at 2:58 PM, J Chapman Flack wrote:
> Ok, here is the simplified grammar that really does
> demonstrate my dilemma. The predicates can't do what
> I need because of the grouping parentheses added to
> factor out the common something_else suffix.
>
> I can get the code I want if I leave off the grouping
> parens and duplicate the something_else suffix on
> each branch. Is that the best I can do?  I hate to
> duplicate the something_else (which is followed by
> a nontrivial action).

Hi Chap!  long time no chat ;)

Heh, so the code gen is not right in v2?  I can't remember how it  
works :(

> Is the story the same in ANTLR 3?
> class CelebParser extends Parser;
>
> prod : something
>       ( options { greedy=true; }
>       : ( { muppet }? ( KERMIT | FOZZIE )
>         | { turtle }? ( LEONARDO | DONATELLO )
>         )
> 	 something_else
>       )*
>     ;

v3 is way better at this stuff.  You use a gated semantic pred, which  
always get hoisted into decision:

prod : something
       ( ( { muppet }?=> ( KERMIT | FOZZIE )
         | { turtle }?=> ( LEONARDO | DONATELLO )
         )
	 something_else
       )*
     ;

results in DFA predictor:

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Celeb.dec-2.pdf
Type: application/pdf
Size: 16459 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071221/ee983471/attachment-0001.pdf 
-------------- next part --------------




The preds are hoisted out of the subrule inside (...)* and used to  
control exit.  3rd alt (exit) is implicit.

Ter

From parrt at cs.usfca.edu  Fri Dec 21 15:18:06 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Dec 2007 15:18:06 -0800
Subject: [antlr-interest] disambiguating sempred in a closure?
In-Reply-To: <B6F882D5-9B03-4E25-8871-C44DC7535468@cs.usfca.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<476C4511.7010103@math.purdue.edu>
	<B6F882D5-9B03-4E25-8871-C44DC7535468@cs.usfca.edu>
Message-ID: <A7E698D2-76CB-4973-A96F-FAE8E22FF8CB@cs.usfca.edu>


On Dec 21, 2007, at 3:13 PM, Terence Parr wrote:

> results in DFA predictor:
>
> <Celeb.dec-2.pdf>
>
> The preds are hoisted out of the subrule inside (...)* and used to  
> control exit.  3rd alt (exit) is implicit.

correction: 2nd alt is exit.  1st alt is subrule.The =>1 means  
"predicts alt 1".

Ter

From jpschewe at mtu.net  Fri Dec 21 15:38:39 2007
From: jpschewe at mtu.net (Jon Schewe)
Date: Fri, 21 Dec 2007 17:38:39 -0600
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <20071221211714.6B4B7F00B5@mtu.net>
References: <20071221211714.6B4B7F00B5@mtu.net>
Message-ID: <476C4E7F.1080307@mtu.net>

I'm open to suggestions on how to do this correctly.  I've asked and
received no replies.  How would one go about doing this with rewrite
rules?  I know of no looping mechanism to do this in antlr.  I'd prefer
to do it in the parser and add the extra tokens to the stream, perhaps
even putting in tokens to tell me what the values of the index variables
are.  However I've yet to find any other way of doing it besides walking
the AST myself with custom code, which seems much more error prone when
antlr already does this itself very well.

Harald M. M?ller wrote:
> Hi -
>
> Once again a blunt answer: No-one would (and should) do this voluntarily.
> This is code which only works - but this is one of the worst things one can
> say about code.
>
> Under all normal circumstances, you would use rewriting to do this, i.e. you
> would load the input into some intermediate form (ANTLR trees, e.g.
> CommonTree; your own homegrown tree; even an XML structure), then work on
> this intermediate structure (using ANTLR rewrite rules; or your own manual
> visitor; or XSLT). Only such an architecture yields the necessary
> "separations of concerns" or "assignment of responsibilities".
>
> What you do is "only possible," but nothing more.
>
> If for some reason (usually if you are in a very big hurry; and no real
> quality needs to be delivered) you want to deliver this code (after it
> miracuously survives some code review), you should at least write a comment
> of >= 30 lines where you explain
> * why you did not choose a standard rewriting solution;
> * what should happen if the code fails (or why you can prove that it will
> not fail; even when the implementation of the ANTLR runtime changes so that
> usual lexers and parsers will still work)
> * and label this with "HACK" (or at least "HACK?").
> A bunch of unit tests tailored to this specific code should also be
> provided, so that in the case that suddenly this does not work any longer,
> someone can run those tests and conclude "aha, the tricky code with the
> stream rewinding and direct calling is broken, after all ... let's now
> either throw away the software or get the budget to write it according to a
> standard design."
>
> This is about how people on my projects have to handle such "I figured it
> out" solutions.
>
> Regards
> Harald
>
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org 
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jon Schewe
>> Sent: Friday, December 21, 2007 9:00 PM
>> To: Antlr List
>> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
>>
>> I figured it out.  Can someone let me know if I'm doing 
>> something inherently bad here by mucking with the input 
>> stream directly and calling the rule method directly?
>> loop
>> @init {
>>   Map<String, Integer> loopScope = new HashMap<String, Integer>();
>>   pushScope(loopScope);
>> }
>> :
>> ^(
>>   'LOOP'
>>   ^(index=ID lb=numint ub=numint) {null == getValue($index.text) }? {
>>       System.out.println("Do loop with index: " + $index.text 
>> + " from "
>> + $lb.value + " to " + $ub.value);
>>       // save the place we are at just before the constraints
>>       final int marker = ((CommonTreeNodeStream)input).mark();
>>       for(int counter=$lb.value; counter <= $ub.value; ++counter) {
>>         loopScope.put($index.text, counter);
>>         // jump to just before the constraints
>>         ((CommonTreeNodeStream)input).rewind(marker);
>>         constraints();
>>       }
>>   }
>>   //constraints
>> ) /*{
>>     System.out.println("End of loop");
>>     for(int i=$lb.value; i<=$ub.value; ++i) {
>>       loopScope.put($ID.text, i);
>>       constraints(); // invoke constraints rule
>>     }
>>   }*/
>> ;
>> finally {
>>   // remove loop scope
>>   popScope();
>> }
>>
>> Jon Schewe wrote:
>>     
>>> I've got something I'd like to do with antlr and I'm not sure it's 
>>> possible.  I want to unfold loops with antlr inside the 
>>>       
>> parser.  The 
>>     
>>> idea is this, say I've got an input file like below.  Now antlr has 
>>> given me the ability to write nice rules to parse this 
>>>       
>> language and to 
>>     
>>> do various actions on each rule.  What I'd really like to 
>>>       
>> do is to be 
>>     
>>> able to tell antlr to repeat a rule action on the same input stream 
>>> multiple times while I change some data outside.  Another 
>>>       
>> option would 
>>     
>>> be for me to be able to duplicate a set of tokens during 
>>>       
>> parsing.  Say 
>>     
>>> if I know the set of tokens between LOOP and END, could I 
>>>       
>> tell antlr 
>>     
>>> to duplicate that set of tokens 10 times (since the loop 
>>>       
>> goes from 1 
>>     
>>> to 10) with an extra token added in to tell me the loop 
>>>       
>> index during 
>>     
>>> the initial parse and then let the tree parser just walk the tree?
>>>
>>> I'm sure I could hand the AST off to some custom method to 
>>>       
>> do it, but 
>>     
>>> that seems like I'm duplicating what antlr is already doing in the 
>>> tree parser.
>>>
>>> Params
>>> i 5;
>>>
>>> Variables
>>> x[i];
>>> y;
>>>
>>> Constraints
>>> LOOP index 1...10:
>>>   loop[index]:
>>>   f[index] = 10 * x[index];
>>> END
>>>
>>> simple:
>>> g = 5 * y;
>>>
>>>   
>>>       
>> --
>> Jon Schewe | http://mtu.net/~jpschewe
>> If you see an attachment named signature.asc, this is my 
>> digital signature.
>> See http://www.gnupg.org for more information.
>>
>> For I am convinced that neither death nor life, neither 
>> angels nor demons, neither the present nor the future, nor 
>> any powers, neither height nor depth, nor anything else in 
>> all creation, will be able to separate us from the love of 
>> God that is in Christ Jesus our Lord. - Romans 8:38-39
>>
>>     

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From antlr at mirality.co.nz  Fri Dec 21 15:41:14 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 22 Dec 2007 12:41:14 +1300
Subject: [antlr-interest] disambiguating sempred in a closure?
In-Reply-To: <476C4511.7010103@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<476C4511.7010103@math.purdue.edu>
Message-ID: <20071221234126.71C5C11E97B@www.antlr.org>

At 11:58 22/12/2007, J Chapman Flack wrote:
 >Ok, here is the simplified grammar that really does
 >demonstrate my dilemma. The predicates can't do what
 >I need because of the grouping parentheses added to
 >factor out the common something_else suffix.
[...]
 >prod : something
 >        ( options { greedy=true; }
 >        : ( { muppet }? ( KERMIT | FOZZIE )
 >          | { turtle }? ( LEONARDO | DONATELLO )
 >          )
 >	something_else
 >        )*
 >      ;

I haven't tried it, but I would think that you could accomplish 
what you want by manually hoisting the predicate:

prod : something
        ( options { greedy=true; }
        : { muppet || turtle }?
          ( { muppet }? ( KERMIT | FOZZIE )
          | { turtle }? ( LEONARDO | DONATELLO )
          ) something_else
        )*
      ;


From jaluber at gmx.de  Fri Dec 21 15:49:52 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 22 Dec 2007 00:49:52 +0100
Subject: [antlr-interest] Is the -1 bug in .NET ANTLR 3.0.1 runtime's
 ANTLRReaderStream fixed or not? (was: Antlr and Visual Studio)
In-Reply-To: <20071221213118.271A711EB82@www.antlr.org>
References: <20071221213118.271A711EB82@www.antlr.org>
Message-ID: <476C5120.6070301@gmx.de>

Harald M. M?ller schrieb:
> Hi ANTLR maintainers (Kunle?!?) -
> 
> In ANTLRReaderStream (in the C# runtime), there is or was a bug in
> method Load(...): The condition of the do-while loop is in some sources
> 
>         while (num != -1);
> 
> whereas in other sources (interim builds) it is
> 
>         while (numRead != 0);
> 
> The latter is correct, the former is wrong and leads to an endless loop.
> 
> However, when I download the current source 3.0.1 from the ANTLR page
> (ANTLR.Tool.zip from the link "Binary of ANTLR tool"; with
> runtime\CSharp\bin\net-2.0\Antlr3.Runtime.dll with Version 0.3.0.37313
> and file date Aug. 13th, 2007, 11:40pm - i.e., the "latest ANTLR
> version") and look into ANTLRReaderStream.Load() with Reflector, I still
> see the first - wrong - condition!!
> 
> It seems something got mixed up here ...
> 
> Will/might this be repaired in some official 3.0.x release, or so we
> have to wait for an official 3.1 for this?

There won't be another 3.0.x release. I've checked in the repos and the
source is correct there already. Not sure why you have a differing
result here. Looking at the title of this thread - was this the bug the
one mentioned in the first email? Before I work through that issue, I
ask. :)
> 
> BTW, array doubling is a somewhat slow algorithm for very long files - I
> have input files with more than 100MB, which yields about 10 doublings
> and hence copies around 1 GB of data. Below is a (not really beautified;
> and intentionally .Net 1.1) variant which does only one copying over and
> hence is faster (but requires twice the final memory instead of only 1.5
> for the original algorithm).

Looking through the code, I see you mention the variable p in the first
for-loop (I would have used a do-while loop instead), but don't declare
it. Shouldn't it replaced by 0 then? You always get a fresh chunk
anyway. The next setting of p to 0 should declare then p, too.

Regarding the memory footprint - do you believe that this may be a
problem for large files? Is this speed-memory trade-off worth it (for
smaller files it looks like yes)? And how do you get C# source files
that long?

Johannes

From jaluber at gmx.de  Fri Dec 21 15:51:56 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 22 Dec 2007 00:51:56 +0100
Subject: [antlr-interest] Possible bug in C# backend
In-Reply-To: <1198275579.4318.20.camel@mila.office.dinunzioedigregorio>
References: <1198275579.4318.20.camel@mila.office.dinunzioedigregorio>
Message-ID: <476C519C.40509@gmx.de>

Federico Di Gregorio schrieb:
> Hi,
> 
> using the C# backend and "scope" the generated code can't be compiled
> because for every rule with a scope the compiler generates code that
> references rulename_stack but never declares it. Is this enough or there
> is a formal way to post a bug report?
> 
> (Or this is not a bug and I just don't understand scopes?)
> 
> federico
>

Can you attach a sample grammar exhibiting this behaviour?

Johannes

From fog at initd.org  Fri Dec 21 16:25:33 2007
From: fog at initd.org (Federico Di Gregorio)
Date: Sat, 22 Dec 2007 01:25:33 +0100
Subject: [antlr-interest] Possible bug in C# backend
In-Reply-To: <476C519C.40509@gmx.de>
References: <1198275579.4318.20.camel@mila.office.dinunzioedigregorio>
	<476C519C.40509@gmx.de>
Message-ID: <1198283133.4318.36.camel@mila.office.dinunzioedigregorio>


Il giorno sab, 22/12/2007 alle 00.51 +0100, Johannes Luber ha scritto:
> Federico Di Gregorio schrieb:
> > Hi,
> > 
> > using the C# backend and "scope" the generated code can't be compiled
> > because for every rule with a scope the compiler generates code that
> > references rulename_stack but never declares it. Is this enough or there
> > is a formal way to post a bug report?
> > 
> > (Or this is not a bug and I just don't understand scopes?)
> > 
> > federico
> >
> Can you attach a sample grammar exhibiting this behaviour?

Yes, but I don't knwo if this is really a bug. It happens only with an
empty scope. My case was:

statement
scope {
}
	: ^(PREFIX PNAME URIREF) { ParserUtils.SetPrefix($PNAME.Text, $URIREF.Text); }
	| ^(BASE URIREF)         { ParserUtils.SetBase($URIREF.Text);               }
	| ^(STATEMENTS subject
		   (predicateObjectList[$subject.node] { Statements.AddRange($predicateObjectList.stms); })+ )
	;




I know an empty scope probably should not be used (I was debugging and I
just left it there to avoid too much retyping) but I suppose it should
generate right code or fail the code generation not fail during the
compile step.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
  Qu'est ce que la folie? Juste un sentiment de libert? si
   fort qu'on en oublie ce qui nous rattache au monde... -- J. de Loctra


From parrt at cs.usfca.edu  Fri Dec 21 19:11:36 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Dec 2007 19:11:36 -0800
Subject: [antlr-interest] antlr 3.1 beta daily
Message-ID: <70B68A85-49A4-4B73-AED5-53F4EEC7B02A@cs.usfca.edu>

Yo. If you would like to test your really huge grammar on the latest  
version of ANTLR that Kay Roepke and I optimized over the last week,  
grab:

http://www.antlr.org/download/build/antlr-2007-12-21.19.tar.gz

We optimized the hell out of the code itself and then I added an LL(1)- 
optimized grammar analyzer that made a huge difference.  An SQL  
grammar that was taking a minute and a half to process now takes about  
10 seconds.

This might make the generated code bigger or smaller...i'll have a  
look at that later.

Ter

From parrt at cs.usfca.edu  Fri Dec 21 19:12:45 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 21 Dec 2007 19:12:45 -0800
Subject: [antlr-interest] antlr 3.1 beta daily
In-Reply-To: <70B68A85-49A4-4B73-AED5-53F4EEC7B02A@cs.usfca.edu>
References: <70B68A85-49A4-4B73-AED5-53F4EEC7B02A@cs.usfca.edu>
Message-ID: <CE3BCC22-0178-4754-BC23-56743589B6E0@cs.usfca.edu>

I forgot to mention.  Use k=1 and backtrack=true to engage the  
"failsafe" mode where the new LL(1) optimized engine kicks in.  It  
engages for any LL(1) decision even if no k=1 option though.

Ter

On Dec 21, 2007, at 7:11 PM, Terence Parr wrote:

> Yo. If you would like to test your really huge grammar on the latest  
> version of ANTLR that Kay Roepke and I optimized over the last week,  
> grab:
>
> http://www.antlr.org/download/build/antlr-2007-12-21.19.tar.gz
>
> We optimized the hell out of the code itself and then I added an  
> LL(1)-optimized grammar analyzer that made a huge difference.  An  
> SQL grammar that was taking a minute and a half to process now takes  
> about 10 seconds.
>
> This might make the generated code bigger or smaller...i'll have a  
> look at that later.
>
> Ter


From bshkara at gmail.com  Fri Dec 21 22:39:11 2007
From: bshkara at gmail.com (Basil Shkara)
Date: Sat, 22 Dec 2007 17:39:11 +1100
Subject: [antlr-interest] ObjC generated code does not match ANTLRWorks
Message-ID: <225C24CF-AB3F-46E3-AE6C-48725BFBA2D2@gmail.com>

Hi,

I have been finding inconsistent results regarding the behaviour of  
the generated code for the ObjC target and what ANTLRWorks shows me.

I have created a test grammar which does not behave as expected upon  
compiling the resulting ObjC code using the 3.0.1 early access source:

NEWLINE			:	'\r'?'\n';
WS			:	' ' | '\t';
UNDERSCORE		:	'_';
OTHER			:	.;

start			:	(rule|NEWLINE|OTHER|WS)+;
text			:	WS|NEWLINE|OTHER;
rule			:	(UNDERSCORE text+ UNDERSCORE);

My test rig consists of an NSTextView and a delegate class listening  
for the textStorageDidProcessEditing notification.  I have a number of  
class methods which are called from the parser and which perform some  
syntax highlighting.

The anomaly is that whenever a newline is entered, the parser will  
stop parsing from that point on.  After the newline, there is no  
further activity from the parser.

ANTLRWorks (1.1.5) however says that my grammar is fine and it works  
perfectly using the built in interpreter.

Appreciate any help.

Regards,
Basil.

From harald_m_mueller at gmx.de  Sat Dec 22 00:41:16 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sat, 22 Dec 2007 09:41:16 +0100
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <476C4E7F.1080307@mtu.net>
Message-ID: <20071222084119.EA8E211EAEC@www.antlr.org>

Hi -

I'm not sure how to answer this, because "term rewriting" and "tree
rewriting" are fundamental concepts of handling parse trees: I would hope
that you have learned (or can learn) about that somewhere else, before you
jump into the tools problems.
In this email, I'll still utter a few general things (my time is limited,
because there is a inspection meeting with the architect as well as the
builder of our new house ... in the afternoon, I'll find more time!).

First, rewriting is a *semantic concept*: So it's good practice to do this
not in the parser, but in a latter stage (pass).

Second, there is no reason to rewriting with ANTLR rewrite rules; in some
instances, a custom rewriter (which can even ignore much of the grammar) is
faster to write than a complete tree grammar - don't fall to the "I have a
hammer (=ANTLR), it must be a nail!" fallacy. Especially for local changes
("peephole optimization"/"peephole rewriting"), where the effects need no
knowledge about the surrounding, this may yield more fine-granular and
stable software, because changes in other places of the (tree)
structure/grammar will not affect the local change rule at all.

- so I actually contradict your statement "any other way of doing it walking
the AST myself with custom code, which seems much more error prone when
antlr already does this itself very well ...": What ANTLR does well is to
walk a complete (sub-)tree according to a grammar; what it does not well
(or, more to the point, what I do not so well with ANTLR), IMHO, is to
handle local rules whose code (a) should be decoupled from the rest of the
tree structure; and (b) which need arbitrary computational intelligence
which cannot be expressed in rewrite rules directly.

I'll post some code - I promise! -, and then we can tear it up when it's
totally "contra ANTLR"!

Regards
Harald M.

> -----Original Message-----
> From: Jon Schewe [mailto:jpschewe at mtu.net] 
> Sent: Saturday, December 22, 2007 12:39 AM
> To: harald_m_mueller at gmx.de
> Cc: 'Antlr List'
> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
> 
> I'm open to suggestions on how to do this correctly.  I've 
> asked and received no replies.  How would one go about doing 
> this with rewrite rules?  I know of no looping mechanism to 
> do this in antlr.  I'd prefer to do it in the parser and add 
> the extra tokens to the stream, perhaps even putting in 
> tokens to tell me what the values of the index variables are. 
>  However I've yet to find any other way of doing it besides 
> walking the AST myself with custom code, which seems much 
> more error prone when antlr already does this itself very well.
> 
> Harald M. M?ller wrote:
> > Hi -
> >
> > Once again a blunt answer: No-one would (and should) do 
> this voluntarily.
> > This is code which only works - but this is one of the worst things 
> > one can say about code.
> >
> > Under all normal circumstances, you would use rewriting to do this, 
> > i.e. you would load the input into some intermediate form 
> (ANTLR trees, e.g.
> > CommonTree; your own homegrown tree; even an XML 
> structure), then work 
> > on this intermediate structure (using ANTLR rewrite rules; 
> or your own 
> > manual visitor; or XSLT). Only such an architecture yields the 
> > necessary "separations of concerns" or "assignment of 
> responsibilities".
> >
> > What you do is "only possible," but nothing more.
> >
> > If for some reason (usually if you are in a very big hurry; and no 
> > real quality needs to be delivered) you want to deliver this code 
> > (after it miracuously survives some code review), you 
> should at least 
> > write a comment of >= 30 lines where you explain
> > * why you did not choose a standard rewriting solution;
> > * what should happen if the code fails (or why you can 
> prove that it 
> > will not fail; even when the implementation of the ANTLR runtime 
> > changes so that usual lexers and parsers will still work)
> > * and label this with "HACK" (or at least "HACK?").
> > A bunch of unit tests tailored to this specific code should also be 
> > provided, so that in the case that suddenly this does not work any 
> > longer, someone can run those tests and conclude "aha, the 
> tricky code 
> > with the stream rewinding and direct calling is broken, 
> after all ... 
> > let's now either throw away the software or get the budget 
> to write it 
> > according to a standard design."
> >
> > This is about how people on my projects have to handle such 
> "I figured 
> > it out" solutions.
> >
> > Regards
> > Harald
> >
> >   
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org 
> >> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jon Schewe
> >> Sent: Friday, December 21, 2007 9:00 PM
> >> To: Antlr List
> >> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
> >>
> >> I figured it out.  Can someone let me know if I'm doing something 
> >> inherently bad here by mucking with the input stream directly and 
> >> calling the rule method directly?
> >> loop
> >> @init {
> >>   Map<String, Integer> loopScope = new HashMap<String, Integer>();
> >>   pushScope(loopScope);
> >> }
> >> :
> >> ^(
> >>   'LOOP'
> >>   ^(index=ID lb=numint ub=numint) {null == 
> getValue($index.text) }? {
> >>       System.out.println("Do loop with index: " + $index.text
> >> + " from "
> >> + $lb.value + " to " + $ub.value);
> >>       // save the place we are at just before the constraints
> >>       final int marker = ((CommonTreeNodeStream)input).mark();
> >>       for(int counter=$lb.value; counter <= $ub.value; ++counter) {
> >>         loopScope.put($index.text, counter);
> >>         // jump to just before the constraints
> >>         ((CommonTreeNodeStream)input).rewind(marker);
> >>         constraints();
> >>       }
> >>   }
> >>   //constraints
> >> ) /*{
> >>     System.out.println("End of loop");
> >>     for(int i=$lb.value; i<=$ub.value; ++i) {
> >>       loopScope.put($ID.text, i);
> >>       constraints(); // invoke constraints rule
> >>     }
> >>   }*/
> >> ;
> >> finally {
> >>   // remove loop scope
> >>   popScope();
> >> }
> >>
> >> Jon Schewe wrote:
> >>     
> >>> I've got something I'd like to do with antlr and I'm not 
> sure it's 
> >>> possible.  I want to unfold loops with antlr inside the
> >>>       
> >> parser.  The
> >>     
> >>> idea is this, say I've got an input file like below.  Now 
> antlr has 
> >>> given me the ability to write nice rules to parse this
> >>>       
> >> language and to
> >>     
> >>> do various actions on each rule.  What I'd really like to
> >>>       
> >> do is to be
> >>     
> >>> able to tell antlr to repeat a rule action on the same 
> input stream 
> >>> multiple times while I change some data outside.  Another
> >>>       
> >> option would
> >>     
> >>> be for me to be able to duplicate a set of tokens during
> >>>       
> >> parsing.  Say
> >>     
> >>> if I know the set of tokens between LOOP and END, could I
> >>>       
> >> tell antlr
> >>     
> >>> to duplicate that set of tokens 10 times (since the loop
> >>>       
> >> goes from 1
> >>     
> >>> to 10) with an extra token added in to tell me the loop
> >>>       
> >> index during
> >>     
> >>> the initial parse and then let the tree parser just walk the tree?
> >>>
> >>> I'm sure I could hand the AST off to some custom method to
> >>>       
> >> do it, but
> >>     
> >>> that seems like I'm duplicating what antlr is already 
> doing in the 
> >>> tree parser.
> >>>
> >>> Params
> >>> i 5;
> >>>
> >>> Variables
> >>> x[i];
> >>> y;
> >>>
> >>> Constraints
> >>> LOOP index 1...10:
> >>>   loop[index]:
> >>>   f[index] = 10 * x[index];
> >>> END
> >>>
> >>> simple:
> >>> g = 5 * y;
> >>>
> >>>   
> >>>       
> >> --
> >> Jon Schewe | http://mtu.net/~jpschewe If you see an 
> attachment named 
> >> signature.asc, this is my digital signature.
> >> See http://www.gnupg.org for more information.
> >>
> >> For I am convinced that neither death nor life, neither angels nor 
> >> demons, neither the present nor the future, nor any 
> powers, neither 
> >> height nor depth, nor anything else in all creation, will 
> be able to 
> >> separate us from the love of God that is in Christ Jesus 
> our Lord. - 
> >> Romans 8:38-39
> >>
> >>     
> 
> --
> Jon Schewe | http://mtu.net/~jpschewe
> If you see an attachment named signature.asc, this is my 
> digital signature.
> See http://www.gnupg.org for more information.
> 
> For I am convinced that neither death nor life, neither 
> angels nor demons, neither the present nor the future, nor 
> any powers, neither height nor depth, nor anything else in 
> all creation, will be able to separate us from the love of 
> God that is in Christ Jesus our Lord. - Romans 8:38-39
> 


From aheller at gmx.at  Fri Dec 21 13:10:13 2007
From: aheller at gmx.at (Arnulf Heller)
Date: Fri, 21 Dec 2007 22:10:13 +0100
Subject: [antlr-interest] attempt to compare antlr vs bison/flex
 performance
In-Reply-To: <4769A7C3.8010206@ti.com>
References: <4769A7C3.8010206@ti.com>
Message-ID: <20071222093123.NGPS20158.viefep11-int.chello.at@schnuftikus.gmx.at>

Hi,

a point that you might also consider is the performance of the Lexer alone.

As far as I can remember there were statements in this mailing list 
that the ANTLR Lexer performance is not mind-blasting :-)
These folks also found ways to use Flex for the lexing part with good 
speed improvements.

This gives the power of ANTLR parsing and the speed of Flex lexing :-)

Maybe you manage to separate your benchmark into the lexing and full 
parsing part.
With ANTLR that should be perfectly possible because you can use the 
Lexer "standalone" and pop tokens out.
If you are able to do that with Flex too (and I assume that is 
possible but my Flex experience is rusty) you can compare the lexing 
and parsing processing overhead for both approaches.

It might also prove difficult to compare the performance due to 
caching of the file in the OS, the CPU, ...
I assume it's good advice to repeat the test several times an 
alternating the two competitors.

In case you have reproducible results, please post it - I'm also curious :-)


At 00:22 20.12.2007, you wrote:
>Hello,
>
>In an effort to compare antlr and bison/flex parsers, I did the 
>following exercise:
>
>- found and compiled bison/flex "C" language parser from the 
>following location:
>    ftp://ftp.uu.net/usenet/net.sources/ansi.c.grammar.Z
>- downloaded and compiled antlr3 implementation of "C" language 
>parser from this directory in antlr3 examples:
>   antlr/examples-v3/C/C
>- preprocessed a "C" language file and stripped it such that both 
>parser would pass it through (mostly minor changes)
>- compared runtime for each parser
>
>
>The results of this exercise show that the antlr parser is ~9 times 
>slower than the flex/bison parser. I have used the same version of 
>GNU C compiler for both parsers, with exact same compile options.
>
>Although the grammar definitions come from different sources, I 
>still think this exercise gives a general idea about performance 
>differences of these parsers. Could anyone please tell me if this is 
>an expected runtime difference or you think I could do some 
>optimizations to get faster performance from antlr3.
>
>I can send the complete code I used for both parsers, or any parts 
>of it, if necessary. Just tell me which part would be of interest.
>
>Thanks,
>Minas


From rschulz at sonic.net  Sat Dec 22 07:17:13 2007
From: rschulz at sonic.net (Randall R Schulz)
Date: Sat, 22 Dec 2007 07:17:13 -0800
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <20071222084119.EA8E211EAEC@www.antlr.org>
References: <20071222084119.EA8E211EAEC@www.antlr.org>
Message-ID: <200712220717.13222.rschulz@sonic.net>

On Saturday 22 December 2007 00:41, Harald M. M?ller wrote:
> Hi -
>
> ...
>
> Second, there is no reason to rewriting with ANTLR rewrite rules; in
> some instances, a custom rewriter (which can even ignore much of the
> grammar) is faster to write than a complete tree grammar - don't fall
> to the "I have a hammer (=ANTLR), it must be a nail!" fallacy.
> Especially for local changes ("peephole optimization"/"peephole
> rewriting"), where the effects need no knowledge about the
> surrounding, this may yield more fine-granular and stable software,
> because changes in other places of the (tree) structure/grammar will
> not affect the local change rule at all.

I have tree rewriting requirements (not essentially connected to a 
parsing task though it does occur downstream of an ANTLR parser) and 
have found that Tom works well for these purposes.

<http://tom.loria.fr/>


> ...
>
> Regards
> Harald M.


Randall Schulz

From parrt at cs.usfca.edu  Sat Dec 22 09:27:37 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 22 Dec 2007 09:27:37 -0800
Subject: [antlr-interest] attempt to compare antlr vs bison/flex
	performance
In-Reply-To: <20071222093123.NGPS20158.viefep11-int.chello.at@schnuftikus.gmx.at>
References: <4769A7C3.8010206@ti.com>
	<20071222093123.NGPS20158.viefep11-int.chello.at@schnuftikus.gmx.at>
Message-ID: <28D92AE3-805C-4EA6-A726-5DA1B6AC7D36@cs.usfca.edu>


On Dec 21, 2007, at 1:10 PM, Arnulf Heller wrote:

> Hi,
>
> a point that you might also consider is the performance of the  
> Lexer alone.
>
> As far as I can remember there were statements in this mailing list  
> that the ANTLR Lexer performance is not mind-blasting :-)

that was v2. v3 performs much better.

Ter


From jaluber at gmx.de  Sat Dec 22 15:50:32 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 23 Dec 2007 00:50:32 +0100
Subject: [antlr-interest] Bug in all targets? (Was: Possible bug in C#
 backend)
In-Reply-To: <1198283133.4318.36.camel@mila.office.dinunzioedigregorio>
References: <1198275579.4318.20.camel@mila.office.dinunzioedigregorio>	<476C519C.40509@gmx.de>
	<1198283133.4318.36.camel@mila.office.dinunzioedigregorio>
Message-ID: <476DA2C8.6040900@gmx.de>

Other target developers can skip to the grammar part!

Federico Di Gregorio schrieb:
> Il giorno sab, 22/12/2007 alle 00.51 +0100, Johannes Luber ha scritto:
>> Can you attach a sample grammar exhibiting this behaviour?
> 
> Yes, but I don't knwo if this is really a bug. It happens only with an
> empty scope. My case was:
> 
> statement
> scope {
> }
> 	: ^(PREFIX PNAME URIREF) { ParserUtils.SetPrefix($PNAME.Text, $URIREF.Text); }
> 	| ^(BASE URIREF)         { ParserUtils.SetBase($URIREF.Text);               }
> 	| ^(STATEMENTS subject
> 		   (predicateObjectList[$subject.node] { Statements.AddRange($predicateObjectList.stms); })+ )
> 	;
> 

It is a bug alright. (But usually sample grammar isn't a single rule,
but directly compilable.) I will have a look at it - right now I'm
fixing the sample grammars. I had to wrangle with making the nant build
file platform independent, too. Things could have gone more smoothly
there...
> 
> I know an empty scope probably should not be used (I was debugging and I
> just left it there to avoid too much retyping) but I suppose it should
> generate right code or fail the code generation not fail during the
> compile step.

Empty scopes are only waste of resources, but not actually forbidden. I
wonder if the other targets exhibit the same behaviour. I've created a
sample grammar:

grammar EmptyScope;

options{
language=CSharp;
}

compilation_start
	:	rule1*
	;
	
rule1
scope {
}
	:	WS
	;

WS:	' ';

Testing for Java I saw the same error, so I suppose this is true for all
targets.

Johannes

From jimi at temporal-wave.com  Sat Dec 22 19:18:12 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 22 Dec 2007 19:18:12 -0800
Subject: [antlr-interest] token filtering in C target (antlr 3.0)
In-Reply-To: <000001c842a3$ba92bb60$2fb83220$@com>
Message-ID: <"L7DC53C95696849738E0CD2524E7C0CDA.1198380309.scalix.temporal-wave.com*"@MHS>

nextToken is there. It is a "method" in the tokSource construct, which 
is contained in the lexer. Write your replacement nextToken by copying 
the one in antlr3Lexer.c, then after you create the lexer and add the 
tokenSource, install your own version.

Jim

> -----Original Message-----
> From: Corno Schraverus [mailto:antlr-interest at schraverus.com]
> Sent: Wednesday, December 19, 2007 5:01 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] token filtering in C target (antlr 3.0)
> 
> Hi all,
> 
> I'm trying to port a whitespace significant grammar from 2.7 to 3.0.
> (It is almost identical to the python parser available for 2.7; 
basically
> all that has to be done is override the 'nextToken' method.)
> I'm going through the sources of the runtime library for the C target 
but
> cannot find the nextToken method(function) and if I'm correct it's 
done
> with
> _LA(). However _LA() is more complex: arbitrary lookahead or lookback. 
Do
> I
> have to implement this functionality to get it working correctly?
> 
> greetings,
> 
> Corno
> 
> 



From jaluber at gmx.de  Tue Dec 25 10:23:29 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 25 Dec 2007 19:23:29 +0100
Subject: [antlr-interest] Development of an XQuery parser with full-text
 extensions, project report
In-Reply-To: <476ABD59.2070002@gmail.com>
References: <476ABD59.2070002@gmail.com>
Message-ID: <47714AA1.3030808@gmx.de>

Andreas Ravnestad schrieb:
> Hi all,
> 
> This autumn a fellow student and myself have been working on an XQFT
> parser front end, putting ANTLR to the test as the designated parser
> generator. Here is the complete project report:
> http://folk.ntnu.no/andrerav/report.pdf
> 
> The report details a fair amount of ANTLR features (all the way from
> lexing to AST generation), as well as some limitations. I figured you
> guys might be interested in checking it out :)
> 
> -Andreas

I'd like to say that everyone doing more complex things with ANTLR
should read it, as it contains some interesting things. I noticed that
your UnbufferedCommonTokenStream could be improved somewhat.
fillBuffer(int k) has some code duplication which can removed by
applying the one-and-a-half loop pattern:

protected void fillBuffer(int k)
{
   int no = 0;
   do
   {
      Token t = tokenSource.nextToken();
      if (t==null || t.getType()==CharStream.EOF)
          break;
      t.setTokenIndex(tokenIndex);
      tokens.add(t);
      tokenIndex++;
      if(t.getChannel()==channel)
         if(++no == k){
            p = skipOffTokenChannels(p);
            break;
         }
   } while (true);
}

In case, you and other people aren't convinced of my position, I'd like
to refer you to <http://david.tribble.com/text/goto.html> and
<http://www.cis.temple.edu/~ingargio/cis71/software/roberts/documents/loopexit.txt>.

Regarding the lexer: How did you know exactly that you have to
distinguish a certain situation with a state? Would it be possible to
change the lexer that it would relex the input after changing the state?
That seems to be easier than to reduce the token lookahead (which may
nonetheless cross borders via syntactic predicates). FYI, in ANTLR 3.1
all automatic recovery has been removed - at least it should happen
there. A glance into Lexer.java tells me that nextToken() still has the
same unfortunate behaviour with no added throws-clause. Maybe Ter didn't
get to it yet.

Johannes



From parrt at cs.usfca.edu  Tue Dec 25 11:25:54 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Dec 2007 11:25:54 -0800
Subject: [antlr-interest] Development of an XQuery parser with full-text
	extensions, project report
In-Reply-To: <476ABD59.2070002@gmail.com>
References: <476ABD59.2070002@gmail.com>
Message-ID: <8E7A3A5D-C2E6-44F0-8B57-8BC40B0DDCEF@cs.usfca.edu>

Hi Andreas. Very nice!  Can I host the report at antlr.org (to ensure  
longevity)?
Ter
On Dec 20, 2007, at 11:07 AM, Andreas Ravnestad wrote:

> Hi all,
>
> This autumn a fellow student and myself have been working on an  
> XQFT parser front end, putting ANTLR to the test as the designated  
> parser generator. Here is the complete project report: http:// 
> folk.ntnu.no/andrerav/report.pdf
>
> The report details a fair amount of ANTLR features (all the way  
> from lexing to AST generation), as well as some limitations. I  
> figured you guys might be interested in checking it out :)
>
> -Andreas


From parrt at cs.usfca.edu  Tue Dec 25 11:27:54 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Dec 2007 11:27:54 -0800
Subject: [antlr-interest] Development of an XQuery parser with full-text
	extensions, project report
In-Reply-To: <47714AA1.3030808@gmx.de>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
Message-ID: <917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>


On Dec 25, 2007, at 10:23 AM, Johannes Luber wrote:
>  FYI, in ANTLR 3.1
> all automatic recovery has been removed - at least it should happen
> there.

Actually, it will be there no problem.  Rule-level recovery will be  
default but within-rule recovery should be turned off.  Can turn it  
back on with a simple method override.

> A glance into Lexer.java tells me that nextToken() still has the
> same unfortunate behaviour with no added throws-clause. Maybe Ter  
> didn't
> get to it yet.
>

remind me which issue we're talking about again?

Ter

From jaluber at gmx.de  Tue Dec 25 13:25:38 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 25 Dec 2007 22:25:38 +0100
Subject: [antlr-interest] Development of an XQuery parser with full-text
 extensions, project report
In-Reply-To: <917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
Message-ID: <47717552.5000408@gmx.de>

Terence Parr schrieb:
> 
> On Dec 25, 2007, at 10:23 AM, Johannes Luber wrote:
>>  FYI, in ANTLR 3.1
>> all automatic recovery has been removed - at least it should happen
>> there.
> 
> Actually, it will be there no problem.  Rule-level recovery will be
> default but within-rule recovery should be turned off.  Can turn it back
> on with a simple method override.

Can you give an example to explain the difference between both
situations and why the differentiation makes sense?
> 
>> A glance into Lexer.java tells me that nextToken() still has the
>> same unfortunate behaviour with no added throws-clause. Maybe Ter didn't
>> get to it yet.
>>
> 
> remind me which issue we're talking about again?

nextToken() catches RuleMismatchException (could be another kindof
exception), so it doesn't declare that it throws RuleMismatchException.
But there are instances, where someone wants overwrite nextToken() with
rethrowing the exception - and can't.

Johannes

From jpschewe at mtu.net  Tue Dec 25 17:09:15 2007
From: jpschewe at mtu.net (Jon Schewe)
Date: Tue, 25 Dec 2007 19:09:15 -0600
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <20071222084119.C6C47F018E@mtu.net>
References: <20071222084119.C6C47F018E@mtu.net>
Message-ID: <4771A9BB.2050200@mtu.net>

I know rewrite rules and have found lots of documentation on them.  If
writing a piece of custom code to parse the resulting AST is more
appropriate, I'd be interested in seeing some examples of this. 

Thus far I prefer to use ANTLR to walk the AST and then actions in the
parser as I haven't written something to walk the AST and it appears
that ANTLR is doing that already so I didn't want to reinvent the
wheel.  The base problem I have is this:

I have a non-tree parser (although I may be converting to a tree parser)
that works well for my simple constraint language and creates all of the
appropriate constraints and variables.  I am adding the concept of parse
time parameters (those that are defined at the top of the file and are
substituted during parse) along with variable subscripts (using the
parameters) and loops to make it easier to specify larger sets of
constraints that are similar.  The loops should be unfolded at parse
time (perhaps a pass after ANTLR).  My current approach has been to try
and have ANTLR run over the same set of tokens the specified number of
times for the loop as that would execute my already working code that
creates constraints using the ANTLR actions.  This resulted in my desire
to mess with the input stream (which as you have stated isn't a good
idea).  The other thought I had was to figure out how to take a set of
tokens and insert them into the stream a number of times to simulate the
loop being unfolded.  That or go back and don't do this part with ANTLR,
which is where I could use some examples.

Thanks.

Harald M. M?ller wrote:
> Hi -
>
> I'm not sure how to answer this, because "term rewriting" and "tree
> rewriting" are fundamental concepts of handling parse trees: I would hope
> that you have learned (or can learn) about that somewhere else, before you
> jump into the tools problems.
> In this email, I'll still utter a few general things (my time is limited,
> because there is a inspection meeting with the architect as well as the
> builder of our new house ... in the afternoon, I'll find more time!).
>
> First, rewriting is a *semantic concept*: So it's good practice to do this
> not in the parser, but in a latter stage (pass).
>
> Second, there is no reason to rewriting with ANTLR rewrite rules; in some
> instances, a custom rewriter (which can even ignore much of the grammar) is
> faster to write than a complete tree grammar - don't fall to the "I have a
> hammer (=ANTLR), it must be a nail!" fallacy. Especially for local changes
> ("peephole optimization"/"peephole rewriting"), where the effects need no
> knowledge about the surrounding, this may yield more fine-granular and
> stable software, because changes in other places of the (tree)
> structure/grammar will not affect the local change rule at all.
>
> - so I actually contradict your statement "any other way of doing it walking
> the AST myself with custom code, which seems much more error prone when
> antlr already does this itself very well ...": What ANTLR does well is to
> walk a complete (sub-)tree according to a grammar; what it does not well
> (or, more to the point, what I do not so well with ANTLR), IMHO, is to
> handle local rules whose code (a) should be decoupled from the rest of the
> tree structure; and (b) which need arbitrary computational intelligence
> which cannot be expressed in rewrite rules directly.
>
> I'll post some code - I promise! -, and then we can tear it up when it's
> totally "contra ANTLR"!
>
> Regards
> Harald M.
>
>   
>> -----Original Message-----
>> From: Jon Schewe [mailto:jpschewe at mtu.net] 
>> Sent: Saturday, December 22, 2007 12:39 AM
>> To: harald_m_mueller at gmx.de
>> Cc: 'Antlr List'
>> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
>>
>> I'm open to suggestions on how to do this correctly.  I've 
>> asked and received no replies.  How would one go about doing 
>> this with rewrite rules?  I know of no looping mechanism to 
>> do this in antlr.  I'd prefer to do it in the parser and add 
>> the extra tokens to the stream, perhaps even putting in 
>> tokens to tell me what the values of the index variables are. 
>>  However I've yet to find any other way of doing it besides 
>> walking the AST myself with custom code, which seems much 
>> more error prone when antlr already does this itself very well.
>>
>> Harald M. M?ller wrote:
>>     
>>> Hi -
>>>
>>> Once again a blunt answer: No-one would (and should) do 
>>>       
>> this voluntarily.
>>     
>>> This is code which only works - but this is one of the worst things 
>>> one can say about code.
>>>
>>> Under all normal circumstances, you would use rewriting to do this, 
>>> i.e. you would load the input into some intermediate form 
>>>       
>> (ANTLR trees, e.g.
>>     
>>> CommonTree; your own homegrown tree; even an XML 
>>>       
>> structure), then work 
>>     
>>> on this intermediate structure (using ANTLR rewrite rules; 
>>>       
>> or your own 
>>     
>>> manual visitor; or XSLT). Only such an architecture yields the 
>>> necessary "separations of concerns" or "assignment of 
>>>       
>> responsibilities".
>>     
>>> What you do is "only possible," but nothing more.
>>>
>>> If for some reason (usually if you are in a very big hurry; and no 
>>> real quality needs to be delivered) you want to deliver this code 
>>> (after it miracuously survives some code review), you 
>>>       
>> should at least 
>>     
>>> write a comment of >= 30 lines where you explain
>>> * why you did not choose a standard rewriting solution;
>>> * what should happen if the code fails (or why you can 
>>>       
>> prove that it 
>>     
>>> will not fail; even when the implementation of the ANTLR runtime 
>>> changes so that usual lexers and parsers will still work)
>>> * and label this with "HACK" (or at least "HACK?").
>>> A bunch of unit tests tailored to this specific code should also be 
>>> provided, so that in the case that suddenly this does not work any 
>>> longer, someone can run those tests and conclude "aha, the 
>>>       
>> tricky code 
>>     
>>> with the stream rewinding and direct calling is broken, 
>>>       
>> after all ... 
>>     
>>> let's now either throw away the software or get the budget 
>>>       
>> to write it 
>>     
>>> according to a standard design."
>>>
>>> This is about how people on my projects have to handle such 
>>>       
>> "I figured 
>>     
>>> it out" solutions.
>>>
>>> Regards
>>> Harald
>>>
>>>   
>>>       
>>>> -----Original Message-----
>>>> From: antlr-interest-bounces at antlr.org 
>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jon Schewe
>>>> Sent: Friday, December 21, 2007 9:00 PM
>>>> To: Antlr List
>>>> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
>>>>
>>>> I figured it out.  Can someone let me know if I'm doing something 
>>>> inherently bad here by mucking with the input stream directly and 
>>>> calling the rule method directly?
>>>> loop
>>>> @init {
>>>>   Map<String, Integer> loopScope = new HashMap<String, Integer>();
>>>>   pushScope(loopScope);
>>>> }
>>>> :
>>>> ^(
>>>>   'LOOP'
>>>>   ^(index=ID lb=numint ub=numint) {null == 
>>>>         
>> getValue($index.text) }? {
>>     
>>>>       System.out.println("Do loop with index: " + $index.text
>>>> + " from "
>>>> + $lb.value + " to " + $ub.value);
>>>>       // save the place we are at just before the constraints
>>>>       final int marker = ((CommonTreeNodeStream)input).mark();
>>>>       for(int counter=$lb.value; counter <= $ub.value; ++counter) {
>>>>         loopScope.put($index.text, counter);
>>>>         // jump to just before the constraints
>>>>         ((CommonTreeNodeStream)input).rewind(marker);
>>>>         constraints();
>>>>       }
>>>>   }
>>>>   //constraints
>>>> ) /*{
>>>>     System.out.println("End of loop");
>>>>     for(int i=$lb.value; i<=$ub.value; ++i) {
>>>>       loopScope.put($ID.text, i);
>>>>       constraints(); // invoke constraints rule
>>>>     }
>>>>   }*/
>>>> ;
>>>> finally {
>>>>   // remove loop scope
>>>>   popScope();
>>>> }
>>>>
>>>> Jon Schewe wrote:
>>>>     
>>>>         
>>>>> I've got something I'd like to do with antlr and I'm not 
>>>>>           
>> sure it's 
>>     
>>>>> possible.  I want to unfold loops with antlr inside the
>>>>>       
>>>>>           
>>>> parser.  The
>>>>     
>>>>         
>>>>> idea is this, say I've got an input file like below.  Now 
>>>>>           
>> antlr has 
>>     
>>>>> given me the ability to write nice rules to parse this
>>>>>       
>>>>>           
>>>> language and to
>>>>     
>>>>         
>>>>> do various actions on each rule.  What I'd really like to
>>>>>       
>>>>>           
>>>> do is to be
>>>>     
>>>>         
>>>>> able to tell antlr to repeat a rule action on the same 
>>>>>           
>> input stream 
>>     
>>>>> multiple times while I change some data outside.  Another
>>>>>       
>>>>>           
>>>> option would
>>>>     
>>>>         
>>>>> be for me to be able to duplicate a set of tokens during
>>>>>       
>>>>>           
>>>> parsing.  Say
>>>>     
>>>>         
>>>>> if I know the set of tokens between LOOP and END, could I
>>>>>       
>>>>>           
>>>> tell antlr
>>>>     
>>>>         
>>>>> to duplicate that set of tokens 10 times (since the loop
>>>>>       
>>>>>           
>>>> goes from 1
>>>>     
>>>>         
>>>>> to 10) with an extra token added in to tell me the loop
>>>>>       
>>>>>           
>>>> index during
>>>>     
>>>>         
>>>>> the initial parse and then let the tree parser just walk the tree?
>>>>>
>>>>> I'm sure I could hand the AST off to some custom method to
>>>>>       
>>>>>           
>>>> do it, but
>>>>     
>>>>         
>>>>> that seems like I'm duplicating what antlr is already 
>>>>>           
>> doing in the 
>>     
>>>>> tree parser.
>>>>>
>>>>> Params
>>>>> i 5;
>>>>>
>>>>> Variables
>>>>> x[i];
>>>>> y;
>>>>>
>>>>> Constraints
>>>>> LOOP index 1...10:
>>>>>   loop[index]:
>>>>>   f[index] = 10 * x[index];
>>>>> END
>>>>>
>>>>> simple:
>>>>> g = 5 * y;
>>>>>
>>>>>   
>>>>>       
>>>>>           
>>>> --
>>>> Jon Schewe | http://mtu.net/~jpschewe If you see an 
>>>>         
>> attachment named 
>>     
>>>> signature.asc, this is my digital signature.
>>>> See http://www.gnupg.org for more information.
>>>>
>>>> For I am convinced that neither death nor life, neither angels nor 
>>>> demons, neither the present nor the future, nor any 
>>>>         
>> powers, neither 
>>     
>>>> height nor depth, nor anything else in all creation, will 
>>>>         
>> be able to 
>>     
>>>> separate us from the love of God that is in Christ Jesus 
>>>>         
>> our Lord. - 
>>     
>>>> Romans 8:38-39
>>>>
>>>>     
>>>>         
>> --
>> Jon Schewe | http://mtu.net/~jpschewe
>> If you see an attachment named signature.asc, this is my 
>> digital signature.
>> See http://www.gnupg.org for more information.
>>
>> For I am convinced that neither death nor life, neither 
>> angels nor demons, neither the present nor the future, nor 
>> any powers, neither height nor depth, nor anything else in 
>> all creation, will be able to separate us from the love of 
>> God that is in Christ Jesus our Lord. - Romans 8:38-39
>>
>>     

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From parrt at cs.usfca.edu  Tue Dec 25 17:31:11 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 25 Dec 2007 17:31:11 -0800
Subject: [antlr-interest] Development of an XQuery parser with full-text
	extensions, project report
In-Reply-To: <47717552.5000408@gmx.de>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
Message-ID: <D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>


On Dec 25, 2007, at 1:25 PM, Johannes Luber wrote:

> Terence Parr schrieb:
>>
>> On Dec 25, 2007, at 10:23 AM, Johannes Luber wrote:
>>> FYI, in ANTLR 3.1
>>> all automatic recovery has been removed - at least it should happen
>>> there.
>>
>> Actually, it will be there no problem.  Rule-level recovery will be
>> default but within-rule recovery should be turned off.  Can turn it  
>> back
>> on with a simple method override.
>
> Can you give an example to explain the difference between both
> situations and why the differentiation makes sense?

The new situation will be that any syntax error, no viable alternative  
for mismatched token, will throw an exception which is caught at the  
bottom of the rule.  The catch clause will report an error and  
initiate error recovery.

  As an option, and the default for pre 3.1, you can have antlr try to  
recover within the rule. This is where it does its single token  
insertion or deletion.  If you forget a ')', for example, it often can  
continue within the rule.  This often results in much better error  
recovery.  Per my previous e-mails, this can cause trouble for actions  
that expected that previous token to be matched.  Imagine an action  
that references $ID but the ID did not actually get matched! The  
parser inserted one magically, but it has useless data.

>>> A glance into Lexer.java tells me that nextToken() still has the
>>> same unfortunate behaviour with no added throws-clause. Maybe Ter  
>>> didn't
>>> get to it yet.
>>>
>>
>> remind me which issue we're talking about again?
>
> nextToken() catches RuleMismatchException (could be another kindof
> exception), so it doesn't declare that it throws  
> RuleMismatchException.
> But there are instances, where someone wants overwrite nextToken()  
> with
> rethrowing the exception - and can't.

Hmm...well, I just looked and it seems like it will cause a ripple  
effect where you have to put the catch clause everywhere. It should be  
okay as most of the references are within a parser rule, but don't you  
think it is simply easier to throw either an error or run-time  
exception if you want the entire parsing process to stop upon lexical  
error.

Throwing a recognition exception from a token stream is undefined. Who  
is supposed to catch it? you might not even use a parser? I'm not sure  
recognition exceptions should come out.  When there is a problem it  
should keep going.  If you wanted to bail out and stop lexing, you  
must make the invoking parser fail as well. I don't think we should  
pass a lexical recognition exception on to the parser because it is  
not an exception for the parser.

   Does that make sense?

Ter

From jaluber at gmx.de  Wed Dec 26 04:10:53 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 26 Dec 2007 13:10:53 +0100
Subject: [antlr-interest] Development of an XQuery parser with full-text
 extensions, project report
In-Reply-To: <D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
Message-ID: <477244CD.2000204@gmx.de>

Terence Parr schrieb:
> 
> On Dec 25, 2007, at 1:25 PM, Johannes Luber wrote:
> 
>> Can you give an example to explain the difference between both
>> situations and why the differentiation makes sense?
> 
> The new situation will be that any syntax error, no viable alternative
> for mismatched token, will throw an exception which is caught at the
> bottom of the rule.  The catch clause will report an error and initiate
> error recovery.

That's where I hit my limits of understanding. What error recovery can
be done at the bottom of a rule anyway?

>  As an option, and the default for pre 3.1, you can have antlr try to
> recover within the rule. This is where it does its single token
> insertion or deletion.  If you forget a ')', for example, it often can
> continue within the rule.  This often results in much better error
> recovery.  Per my previous e-mails, this can cause trouble for actions
> that expected that previous token to be matched.  Imagine an action that
> references $ID but the ID did not actually get matched! The parser
> inserted one magically, but it has useless data.

That's really bad.

>> nextToken() catches RuleMismatchException (could be another kindof
>> exception), so it doesn't declare that it throws RuleMismatchException.
>> But there are instances, where someone wants overwrite nextToken() with
>> rethrowing the exception - and can't.
> 
> Hmm...well, I just looked and it seems like it will cause a ripple
> effect where you have to put the catch clause everywhere. It should be
> okay as most of the references are within a parser rule, but don't you
> think it is simply easier to throw either an error or run-time exception
> if you want the entire parsing process to stop upon lexical error.
> 
> Throwing a recognition exception from a token stream is undefined. Who
> is supposed to catch it? you might not even use a parser? I'm not sure
> recognition exceptions should come out.  When there is a problem it
> should keep going.  If you wanted to bail out and stop lexing, you must
> make the invoking parser fail as well. I don't think we should pass a
> lexical recognition exception on to the parser because it is not an
> exception for the parser.
> 
>   Does that make sense?

It makes sense from your point of view. But does this mean, you would
solve the problem described in the XQuery report under 7.7.2 via a
run-time-exception?

Johannes

From mdepascale at dii.unisi.it  Wed Dec 26 09:39:11 2007
From: mdepascale at dii.unisi.it (Maurizio de Pascale)
Date: Wed, 26 Dec 2007 18:39:11 +0100
Subject: [antlr-interest] ANTLR3 C Target
Message-ID: <477291BF.4050101@dii.unisi.it>

Hi,
I'm moving my small antlr 2.7 project to antlr 3.
since it looks like C++ support is (currently?) gone I'm using the C 
runtime.
Unfortunately, finding info about it (on both the wiki and the web) 
looks quite hard, so I appeal to your good (xmas) will...

Mostly, I need to reproduce with the C API features of the (old?) object 
oriented counterpart.
1) I used to have a stream filter between the parser and the lexer for 
logging purpose. Can this be implemented and how?
2) How to provide input from a memory buffer instead of a file?
3) without exceptions, how to know if errors occured? the starting 
parser rule returns void :( and it looks like the parser simply outputs 
error info to the standard output.
How to get programmatically these info/errors and how to disable the 
error output?

Thank you in advance and Merry Christmas,
Maurizio de Pascale
mdepascale at dii.unisi.it

From parrt at cs.usfca.edu  Wed Dec 26 10:12:30 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 26 Dec 2007 10:12:30 -0800
Subject: [antlr-interest] Bug in all targets? (Was: Possible bug in C#
	backend)
In-Reply-To: <476DA2C8.6040900@gmx.de>
References: <1198275579.4318.20.camel@mila.office.dinunzioedigregorio>	<476C519C.40509@gmx.de>
	<1198283133.4318.36.camel@mila.office.dinunzioedigregorio>
	<476DA2C8.6040900@gmx.de>
Message-ID: <5F969592-98E4-4605-953E-7156BE15CACC@cs.usfca.edu>

add http://www.antlr.org:8888/browse/ANTLR-200

Ter
On Dec 22, 2007, at 3:50 PM, Johannes Luber wrote:
>> I know an empty scope probably should not be used (I was debugging  
>> and I
>> just left it there to avoid too much retyping) but I suppose it  
>> should
>> generate right code or fail the code generation not fail during the
>> compile step.
>
> Empty scopes are only waste of resources, but not actually  
> forbidden. I
> wonder if the other targets exhibit the same behaviour. I've created a
> sample grammar:
>
> grammar EmptyScope;
>
> options{
> language=CSharp;
> }
>
> compilation_start
> 	:	rule1*
> 	;
> 	
> rule1
> scope {
> }
> 	:	WS
> 	;
>
> WS:	' ';
>
> Testing for Java I saw the same error, so I suppose this is true for  
> all
> targets.
>
> Johannes


From jimi at temporal-wave.com  Wed Dec 26 13:11:12 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 26 Dec 2007 13:11:12 -0800
Subject: [antlr-interest] ANTLR3 C Target
In-Reply-To: <477291BF.4050101@dii.unisi.it>
Message-ID: <"L0D0FBF54308D49d7B3C986B79CF1BD09.1198703945.scalix.temporal-wave.com*"@MHS>

Consult the source code documentation (see ANTLR API documentation off 
the home page) and the examples in the examples download on the download 
page, under the C examples subdirectory. If you just want to use the 
runtime then you dont really need the source, just the examples, but 
if you want to start overriding things, then you need to read the source 
code or the doxygen docs.

1) Just override the nextToken 'method' call in the token source. Copy 
the code from antlr3Lexer.c, then add your own code. You will slow thing 
down dramatically by doing things like that, but I assume that this is 
debugging purposes etc.
2) See: http://www.antlr.org/api/C/index.html and look at 
antlr3StringStream
3) You need to override things to do what you want. In this case the 
displayRecognitionError() function, which as the documentation says, is 
basically a place holder for your own function. 

I have posted this before, but perhaps the search of the posting 
archives (home page of the web site) isnt bringing it up. To override 
api functions (though there are other ways because it is C and there are 
always other ways), do:

@parser::apifuncs
{
    // Install custom error message display
    //
    RECOGNIZER->displayRecognitionError = produceError;
}

In your parser or tree parser grammar. Then provide:


void produceError
(pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_UINT8 *tokenNames)
{
...
}

Which of course does not actually need to print anything out, it could 
just accumulate a collection of the errors for alter processing by 
something else. 

I usually (like in the default version) increment recognizer->errorCount 
and check if this is 0 or not after parsing, but you can do anything you 
like of course.

Jim

> -----Original Message-----
> From: Maurizio de Pascale [mailto:mdepascale at dii.unisi.it]
> Sent: Wednesday, December 26, 2007 9:39 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3 C Target
> 
> Hi,
> I'm moving my small antlr 2.7 project to antlr 3.
> since it looks like C++ support is (currently?) gone I'm using the C
> runtime.
> Unfortunately, finding info about it (on both the wiki and the web)
> looks quite hard, so I appeal to your good (xmas) will...
> 
> Mostly, I need to reproduce with the C API features of the (old?) 
object
> oriented counterpart.
> 1) I used to have a stream filter between the parser and the lexer for
> logging purpose. Can this be implemented and how?
> 2) How to provide input from a memory buffer instead of a file?
> 3) without exceptions, how to know if errors occured? the starting
> parser rule returns void :( and it looks like the parser simply 
outputs
> error info to the standard output.
> How to get programmatically these info/errors and how to disable the
> error output?
> 
> Thank you in advance and Merry Christmas,
> Maurizio de Pascale
> mdepascale at dii.unisi.it



From parrt at antlr.org  Wed Dec 26 18:47:05 2007
From: parrt at antlr.org (Terence Parr)
Date: Wed, 26 Dec 2007 18:47:05 -0800
Subject: [antlr-interest] generated code too big? try -Xnoinlinedfa
Message-ID: <2153BAD3-FC1D-4561-8A45-571640A4BBC8@antlr.org>

ack. too big!

~/tmp $ java org.antlr.Tool T.g
ANTLR Parser Generator  Version 3.1b1 (??)  1989-2007
~/tmp $ javac TLexer.java
TLexer.java:1339: code too large for try statement
         try {
             ^
TLexer.java:1338: code too large
     public final void mIPV6_ADDRESS() throws RecognitionException {
                       ^

finishes but code is too big...bummer...ok, i'll try

~/tmp $ java org.antlr.Tool -Xnoinlinedfa T.g
~/tmp $ javac TLexer.java
~/tmp $ wc -l TLexer.java
     4550 TLexer.java
~/tmp $ java org.antlr.Tool T.g
ANTLR Parser Generator  Version 3.1b1 (??)  1989-2007
~/tmp $ wc -l TLexer.java
    16913 TLexer.java

ah ha!

Ter


From guntiso at latnet.lv  Thu Dec 27 05:32:14 2007
From: guntiso at latnet.lv (Guntis Ozols)
Date: Thu, 27 Dec 2007 15:32:14 +0200
Subject: [antlr-interest] Development of an XQuery parser with
	full-text	extensions, project report
In-Reply-To: <D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
Message-ID: <1198762334.4773a95e4e85d@clients.latnet.lv>

> > nextToken() catches RuleMismatchException (could be another kindof
> > exception), so it doesn't declare that it throws
> > RuleMismatchException.
> > But there are instances, where someone wants overwrite nextToken()
> > with rethrowing the exception - and can't.
>
> Hmm...well, I just looked and it seems like it will cause a ripple
> effect where you have to put the catch clause everywhere.

Why catch? You only need to catch lexer/parser predicates,
but predicates are normal flow, and exceptions are slow
so I'd suggest to call special (with flag?) methods for
predicates to maybe return null instead.

> It should be okay as most of the references are within a parser rule,
> but don't you think it is simply easier to throw either an error

No, errors are intended for more serious problems,
like OutOfMemoryError, StackOverflowError

> or run-time exception if you want the entire parsing process
> to stop upon lexical error.

This must be on by default.
BTW LexerException can extend RuntimeException, too,
to make throws declaration optional.

> Throwing a recognition exception from a token stream is undefined.
> Who is supposed to catch it? you might not even use a parser?

main() or whatever is supposed to catch or not to catch it,
depending on circumstances which are known to lexer/parser user,
but not known to lexer/parser developer.

> I'm not sure recognition exceptions should come out.
> When there is a problem it should keep going.

Oh NO! Reminds me:
  expecting zip-file, getting atomic-bomb, exploding anyway...

> If you wanted to bail out and stop lexing, you
> must make the invoking parser fail as well.

Sure

> I don't think we should pass a lexical recognition exception
> on to the parser because it is not an exception for the parser.

It is not for the parser, and therefore should be PASSED TO and
NOT HANDLED by the parser, UNLESS rulecatch LexerException is
defined in parser grammar.

By default, if LexerException extends RuntimeException,
it may even be not mentioned in parser, still cause parse to fail.

>    Does that make sense?

See above :)

> Ter

Guntis


From tbrandonau at gmail.com  Thu Dec 27 06:02:30 2007
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Fri, 28 Dec 2007 01:02:30 +1100
Subject: [antlr-interest] Development of an XQuery parser with full-text
	extensions, project report
In-Reply-To: <1198762334.4773a95e4e85d@clients.latnet.lv>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
Message-ID: <ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>

On Dec 28, 2007 12:32 AM, Guntis Ozols <guntiso at latnet.lv> wrote:

> > I'm not sure recognition exceptions should come out.
> > When there is a problem it should keep going.
>
> Oh NO! Reminds me:
>   expecting zip-file, getting atomic-bomb, exploding anyway...
Actually I think this is (or at least should) be the case in almost
all applications. Bailing at the first error is generally extremely
annoying as you want to see all errors in your input not just the
first error.
>
> > If you wanted to bail out and stop lexing, you
> > must make the invoking parser fail as well.
>
> Sure
>
> > I don't think we should pass a lexical recognition exception
> > on to the parser because it is not an exception for the parser.
>
> It is not for the parser, and therefore should be PASSED TO and
> NOT HANDLED by the parser, UNLESS rulecatch LexerException is
> defined in parser grammar.
>
> By default, if LexerException extends RuntimeException,
> it may even be not mentioned in parser, still cause parse to fail.
>
> >    Does that make sense?
>
> See above :)
>
I think the current handling is good,  I think in most cases the most
sensible thing to do is to record errors but keep parsing so this
should be the default. It should (as I believe it currently is) be
easy to throw a runtime exception on error to abort parsing.
Though perhaps an inbuilt error-tracking class could be provided to
record all errors that occurred. It seems that a class that records a
list of all the exceptions that occurred would be generally useful and
the basis of any more advanced error reporting system so could be
provided by default (though I could be wrong here). Specifying a rule
catch and re-throwing a custom exception could be used to provide
extra information to be used in the reporting process.

Tom.
> > Ter
>
> Guntis
>
>

From guntiso at latnet.lv  Thu Dec 27 07:00:16 2007
From: guntiso at latnet.lv (Guntis Ozols)
Date: Thu, 27 Dec 2007 17:00:16 +0200
Subject: [antlr-interest] Development of an XQuery parser with
	full-text	extensions, project report
In-Reply-To: <ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
Message-ID: <1198767616.4773be00ec690@clients.latnet.lv>

> I think the current handling is good,  I think in most cases the most
> sensible thing to do is to record errors but keep parsing so this
> should be the default. It should (as I believe it currently is) be
> easy to throw a runtime exception on error to abort parsing.
> (...)
> Tom.

It's not good. It should be possible to attach error-listener/handler
to lexer/parser from API, and recover if this listener/handler says so
(for example, recover from first 100 errors), otherwise fail.
If there is no listener/handler - fail!

Will you be hapy with a database tool which happily deletes all rows from
the table because of misspelled where clause (on the way, printing humble
error message somewhere on the server console),
what kind of reliability is that?

Guntis


From guntiso at latnet.lv  Thu Dec 27 07:30:30 2007
From: guntiso at latnet.lv (Guntis Ozols)
Date: Thu, 27 Dec 2007 17:30:30 +0200
Subject: [antlr-interest] Development of an XQuery parser
	with	full-text	extensions, project report
In-Reply-To: <1198767616.4773be00ec690@clients.latnet.lv>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
	<1198767616.4773be00ec690@clients.latnet.lv>
Message-ID: <1198769430.4773c5167971e@clients.latnet.lv>

> > I think the current handling is good,  I think in most cases the most
> > sensible thing to do is to record errors but keep parsing so this
> > should be the default. It should (as I believe it currently is) be
> > easy to throw a runtime exception on error to abort parsing.
> > (...)
> > Tom.
>
> It's not good. It should be possible to attach error-listener/handler
> to lexer/parser from API, and recover if this listener/handler says so
> (for example, recover from first 100 errors), otherwise fail.
> If there is no listener/handler - fail!
>
> Will you be hapy with a database tool which happily deletes all rows from
> the table because of misspelled where clause (on the way, printing humble
> error message somewhere on the server console),
> what kind of reliability is that?

I also think that the question
- How do I report more than one error?
is the question of improvement, but
- How do I stop it from accepting invalid input?
is call for help and indication of trap
not expected from a serious tool and/or tool generator

Guntis


From tbrandonau at gmail.com  Thu Dec 27 08:05:45 2007
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Fri, 28 Dec 2007 03:05:45 +1100
Subject: [antlr-interest] Development of an XQuery parser with full-text
	extensions, project report
In-Reply-To: <1198769430.4773c5167971e@clients.latnet.lv>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
	<1198767616.4773be00ec690@clients.latnet.lv>
	<1198769430.4773c5167971e@clients.latnet.lv>
Message-ID: <ebc876d70712270805m222e8aa0l520b3fbb76b4c79a@mail.gmail.com>

On Dec 28, 2007 2:30 AM, Guntis Ozols <guntiso at latnet.lv> wrote:
>
> > > I think the current handling is good,  I think in most cases the most
> > > sensible thing to do is to record errors but keep parsing so this
> > > should be the default. It should (as I believe it currently is) be
> > > easy to throw a runtime exception on error to abort parsing.
> > > (...)
> > > Tom.
> >
> > It's not good. It should be possible to attach error-listener/handler
> > to lexer/parser from API, and recover if this listener/handler says so
> > (for example, recover from first 100 errors), otherwise fail.
> > If there is no listener/handler - fail!
> >
I can't really see why you'd generally want to do that rather than do
the whole parse and then only print the first 100 errors. There are
some cases sure, but I don't see any need to complicate ANTLR dealing
with them. Currently you can do something like:
@lexer::members {
  int numErrors = 0;
  public void reportError(RecognitionException e) {
    if(numErrors++ > 100)
      throw new TooManyErrorsException();
    }
  }
}
Where TooManyErrorsException is a RuntimeException subclass. I don't
see any general need to have error handlers specified at runtime,
though of course you can add this if you need it.

> > Will you be hapy with a database tool which happily deletes all rows from
> > the table because of misspelled where clause (on the way, printing humble
> > error message somewhere on the server console),
> > what kind of reliability is that?
That's got nothing to do with ANTLR, that's the application's problem.
As I said, I thought having a default error handler that collected
errors rather than simply printing them to the console would be a good
idea then they can be analysed and appropriate, application specific,
steps can be taken. Obviously ANTLR can't know which errors should
lead to aborting and which shouldn't and I think in most cases
aborting on any error is not what you want and you should complete the
parse and based on errors received decide on what further processing
to do. I don't think that the reportError should be removed, but I
think overriding it to throw a runtime exception is a perfectly good
way of aborting on any invalid input and I don't see any reason to
make it any easier by complicating ANTLR.
>
> I also think that the question
> - How do I report more than one error?
> is the question of improvement, but
> - How do I stop it from accepting invalid input?
> is call for help and indication of trap
> not expected from a serious tool and/or tool generator
As I said, I think completing a parse with erroneous input is
generally desired, as in every compiler, database application and
pretty much every other parser based tool I have used, they all print
all errors not just the first one, hence you don't want to abort the
parse.
>
> Guntis
>
>

Tom.

From jpschewe at mtu.net  Thu Dec 27 08:12:44 2007
From: jpschewe at mtu.net (Jon Schewe)
Date: Thu, 27 Dec 2007 10:12:44 -0600
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <4771A9BB.2050200@mtu.net>
References: <20071222084119.C6C47F018E@mtu.net> <4771A9BB.2050200@mtu.net>
Message-ID: <4773CEFC.9080006@mtu.net>

Given the discussion here I've taken another look at custom AST walkers
and found that it's really not that difficult to write an AST walker if
you do a good job creating the tree in the parser with rewrite rules.  I
haven't rewritten the whole grammar yet, but have written an example
that contains most of the elements and found it very manageable.  Thank
you for the suggestions to look in another direction.

Jon Schewe wrote:
> I know rewrite rules and have found lots of documentation on them.  If
> writing a piece of custom code to parse the resulting AST is more
> appropriate, I'd be interested in seeing some examples of this. 
>
> Thus far I prefer to use ANTLR to walk the AST and then actions in the
> parser as I haven't written something to walk the AST and it appears
> that ANTLR is doing that already so I didn't want to reinvent the
> wheel.  The base problem I have is this:
>
> I have a non-tree parser (although I may be converting to a tree parser)
> that works well for my simple constraint language and creates all of the
> appropriate constraints and variables.  I am adding the concept of parse
> time parameters (those that are defined at the top of the file and are
> substituted during parse) along with variable subscripts (using the
> parameters) and loops to make it easier to specify larger sets of
> constraints that are similar.  The loops should be unfolded at parse
> time (perhaps a pass after ANTLR).  My current approach has been to try
> and have ANTLR run over the same set of tokens the specified number of
> times for the loop as that would execute my already working code that
> creates constraints using the ANTLR actions.  This resulted in my desire
> to mess with the input stream (which as you have stated isn't a good
> idea).  The other thought I had was to figure out how to take a set of
> tokens and insert them into the stream a number of times to simulate the
> loop being unfolded.  That or go back and don't do this part with ANTLR,
> which is where I could use some examples.
>
> Thanks.
>
> Harald M. M?ller wrote:
>   
>> Hi -
>>
>> I'm not sure how to answer this, because "term rewriting" and "tree
>> rewriting" are fundamental concepts of handling parse trees: I would hope
>> that you have learned (or can learn) about that somewhere else, before you
>> jump into the tools problems.
>> In this email, I'll still utter a few general things (my time is limited,
>> because there is a inspection meeting with the architect as well as the
>> builder of our new house ... in the afternoon, I'll find more time!).
>>
>> First, rewriting is a *semantic concept*: So it's good practice to do this
>> not in the parser, but in a latter stage (pass).
>>
>> Second, there is no reason to rewriting with ANTLR rewrite rules; in some
>> instances, a custom rewriter (which can even ignore much of the grammar) is
>> faster to write than a complete tree grammar - don't fall to the "I have a
>> hammer (=ANTLR), it must be a nail!" fallacy. Especially for local changes
>> ("peephole optimization"/"peephole rewriting"), where the effects need no
>> knowledge about the surrounding, this may yield more fine-granular and
>> stable software, because changes in other places of the (tree)
>> structure/grammar will not affect the local change rule at all.
>>
>> - so I actually contradict your statement "any other way of doing it walking
>> the AST myself with custom code, which seems much more error prone when
>> antlr already does this itself very well ...": What ANTLR does well is to
>> walk a complete (sub-)tree according to a grammar; what it does not well
>> (or, more to the point, what I do not so well with ANTLR), IMHO, is to
>> handle local rules whose code (a) should be decoupled from the rest of the
>> tree structure; and (b) which need arbitrary computational intelligence
>> which cannot be expressed in rewrite rules directly.
>>
>> I'll post some code - I promise! -, and then we can tear it up when it's
>> totally "contra ANTLR"!
>>
>> Regards
>> Harald M.
>>
>>   
>>     
>>> -----Original Message-----
>>> From: Jon Schewe [mailto:jpschewe at mtu.net] 
>>> Sent: Saturday, December 22, 2007 12:39 AM
>>> To: harald_m_mueller at gmx.de
>>> Cc: 'Antlr List'
>>> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
>>>
>>> I'm open to suggestions on how to do this correctly.  I've 
>>> asked and received no replies.  How would one go about doing 
>>> this with rewrite rules?  I know of no looping mechanism to 
>>> do this in antlr.  I'd prefer to do it in the parser and add 
>>> the extra tokens to the stream, perhaps even putting in 
>>> tokens to tell me what the values of the index variables are. 
>>>  However I've yet to find any other way of doing it besides 
>>> walking the AST myself with custom code, which seems much 
>>> more error prone when antlr already does this itself very well.
>>>
>>> Harald M. M?ller wrote:
>>>     
>>>       
>>>> Hi -
>>>>
>>>> Once again a blunt answer: No-one would (and should) do 
>>>>       
>>>>         
>>> this voluntarily.
>>>     
>>>       
>>>> This is code which only works - but this is one of the worst things 
>>>> one can say about code.
>>>>
>>>> Under all normal circumstances, you would use rewriting to do this, 
>>>> i.e. you would load the input into some intermediate form 
>>>>       
>>>>         
>>> (ANTLR trees, e.g.
>>>     
>>>       
>>>> CommonTree; your own homegrown tree; even an XML 
>>>>       
>>>>         
>>> structure), then work 
>>>     
>>>       
>>>> on this intermediate structure (using ANTLR rewrite rules; 
>>>>       
>>>>         
>>> or your own 
>>>     
>>>       
>>>> manual visitor; or XSLT). Only such an architecture yields the 
>>>> necessary "separations of concerns" or "assignment of 
>>>>       
>>>>         
>>> responsibilities".
>>>     
>>>       
>>>> What you do is "only possible," but nothing more.
>>>>
>>>> If for some reason (usually if you are in a very big hurry; and no 
>>>> real quality needs to be delivered) you want to deliver this code 
>>>> (after it miracuously survives some code review), you 
>>>>       
>>>>         
>>> should at least 
>>>     
>>>       
>>>> write a comment of >= 30 lines where you explain
>>>> * why you did not choose a standard rewriting solution;
>>>> * what should happen if the code fails (or why you can 
>>>>       
>>>>         
>>> prove that it 
>>>     
>>>       
>>>> will not fail; even when the implementation of the ANTLR runtime 
>>>> changes so that usual lexers and parsers will still work)
>>>> * and label this with "HACK" (or at least "HACK?").
>>>> A bunch of unit tests tailored to this specific code should also be 
>>>> provided, so that in the case that suddenly this does not work any 
>>>> longer, someone can run those tests and conclude "aha, the 
>>>>       
>>>>         
>>> tricky code 
>>>     
>>>       
>>>> with the stream rewinding and direct calling is broken, 
>>>>       
>>>>         
>>> after all ... 
>>>     
>>>       
>>>> let's now either throw away the software or get the budget 
>>>>       
>>>>         
>>> to write it 
>>>     
>>>       
>>>> according to a standard design."
>>>>
>>>> This is about how people on my projects have to handle such 
>>>>       
>>>>         
>>> "I figured 
>>>     
>>>       
>>>> it out" solutions.
>>>>
>>>> Regards
>>>> Harald
>>>>
>>>>   
>>>>       
>>>>         
>>>>> -----Original Message-----
>>>>> From: antlr-interest-bounces at antlr.org 
>>>>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jon Schewe
>>>>> Sent: Friday, December 21, 2007 9:00 PM
>>>>> To: Antlr List
>>>>> Subject: Re: [antlr-interest] Unfolding of loops with antlr?
>>>>>
>>>>> I figured it out.  Can someone let me know if I'm doing something 
>>>>> inherently bad here by mucking with the input stream directly and 
>>>>> calling the rule method directly?
>>>>> loop
>>>>> @init {
>>>>>   Map<String, Integer> loopScope = new HashMap<String, Integer>();
>>>>>   pushScope(loopScope);
>>>>> }
>>>>> :
>>>>> ^(
>>>>>   'LOOP'
>>>>>   ^(index=ID lb=numint ub=numint) {null == 
>>>>>         
>>>>>           
>>> getValue($index.text) }? {
>>>     
>>>       
>>>>>       System.out.println("Do loop with index: " + $index.text
>>>>> + " from "
>>>>> + $lb.value + " to " + $ub.value);
>>>>>       // save the place we are at just before the constraints
>>>>>       final int marker = ((CommonTreeNodeStream)input).mark();
>>>>>       for(int counter=$lb.value; counter <= $ub.value; ++counter) {
>>>>>         loopScope.put($index.text, counter);
>>>>>         // jump to just before the constraints
>>>>>         ((CommonTreeNodeStream)input).rewind(marker);
>>>>>         constraints();
>>>>>       }
>>>>>   }
>>>>>   //constraints
>>>>> ) /*{
>>>>>     System.out.println("End of loop");
>>>>>     for(int i=$lb.value; i<=$ub.value; ++i) {
>>>>>       loopScope.put($ID.text, i);
>>>>>       constraints(); // invoke constraints rule
>>>>>     }
>>>>>   }*/
>>>>> ;
>>>>> finally {
>>>>>   // remove loop scope
>>>>>   popScope();
>>>>> }
>>>>>
>>>>> Jon Schewe wrote:
>>>>>     
>>>>>         
>>>>>           
>>>>>> I've got something I'd like to do with antlr and I'm not 
>>>>>>           
>>>>>>             
>>> sure it's 
>>>     
>>>       
>>>>>> possible.  I want to unfold loops with antlr inside the
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> parser.  The
>>>>>     
>>>>>         
>>>>>           
>>>>>> idea is this, say I've got an input file like below.  Now 
>>>>>>           
>>>>>>             
>>> antlr has 
>>>     
>>>       
>>>>>> given me the ability to write nice rules to parse this
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> language and to
>>>>>     
>>>>>         
>>>>>           
>>>>>> do various actions on each rule.  What I'd really like to
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> do is to be
>>>>>     
>>>>>         
>>>>>           
>>>>>> able to tell antlr to repeat a rule action on the same 
>>>>>>           
>>>>>>             
>>> input stream 
>>>     
>>>       
>>>>>> multiple times while I change some data outside.  Another
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> option would
>>>>>     
>>>>>         
>>>>>           
>>>>>> be for me to be able to duplicate a set of tokens during
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> parsing.  Say
>>>>>     
>>>>>         
>>>>>           
>>>>>> if I know the set of tokens between LOOP and END, could I
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> tell antlr
>>>>>     
>>>>>         
>>>>>           
>>>>>> to duplicate that set of tokens 10 times (since the loop
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> goes from 1
>>>>>     
>>>>>         
>>>>>           
>>>>>> to 10) with an extra token added in to tell me the loop
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> index during
>>>>>     
>>>>>         
>>>>>           
>>>>>> the initial parse and then let the tree parser just walk the tree?
>>>>>>
>>>>>> I'm sure I could hand the AST off to some custom method to
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> do it, but
>>>>>     
>>>>>         
>>>>>           
>>>>>> that seems like I'm duplicating what antlr is already 
>>>>>>           
>>>>>>             
>>> doing in the 
>>>     
>>>       
>>>>>> tree parser.
>>>>>>
>>>>>> Params
>>>>>> i 5;
>>>>>>
>>>>>> Variables
>>>>>> x[i];
>>>>>> y;
>>>>>>
>>>>>> Constraints
>>>>>> LOOP index 1...10:
>>>>>>   loop[index]:
>>>>>>   f[index] = 10 * x[index];
>>>>>> END
>>>>>>
>>>>>> simple:
>>>>>> g = 5 * y;
>>>>>>
>>>>>>   
>>>>>>       
>>>>>>           
>>>>>>             
>>>>> --
>>>>> Jon Schewe | http://mtu.net/~jpschewe If you see an 
>>>>>         
>>>>>           
>>> attachment named 
>>>     
>>>       
>>>>> signature.asc, this is my digital signature.
>>>>> See http://www.gnupg.org for more information.
>>>>>
>>>>> For I am convinced that neither death nor life, neither angels nor 
>>>>> demons, neither the present nor the future, nor any 
>>>>>         
>>>>>           
>>> powers, neither 
>>>     
>>>       
>>>>> height nor depth, nor anything else in all creation, will 
>>>>>         
>>>>>           
>>> be able to 
>>>     
>>>       
>>>>> separate us from the love of God that is in Christ Jesus 
>>>>>         
>>>>>           
>>> our Lord. - 
>>>     
>>>       
>>>>> Romans 8:38-39
>>>>>
>>>>>     
>>>>>         
>>>>>           
>>> --
>>> Jon Schewe | http://mtu.net/~jpschewe
>>> If you see an attachment named signature.asc, this is my 
>>> digital signature.
>>> See http://www.gnupg.org for more information.
>>>
>>> For I am convinced that neither death nor life, neither 
>>> angels nor demons, neither the present nor the future, nor 
>>> any powers, neither height nor depth, nor anything else in 
>>> all creation, will be able to separate us from the love of 
>>> God that is in Christ Jesus our Lord. - Romans 8:38-39
>>>
>>>     
>>>       
>
>   

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From jameshamilton at whoyouknow.co.uk  Thu Dec 27 08:31:30 2007
From: jameshamilton at whoyouknow.co.uk (James Hamilton)
Date: Thu, 27 Dec 2007 16:31:30 +0000
Subject: [antlr-interest] java v3 grammar
Message-ID: <e28d32c0712270831m2aca4aa0r3016e8b57fefe67b@mail.gmail.com>

Hi,

Does anyone have a v3 java1.5 grammar which outputs an AST.

I've been using the one on the antlr website but am having trouble adding
trees actions into it.

Thanks,

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071227/922fbf42/attachment.html 

From jimi at temporal-wave.com  Thu Dec 27 08:27:05 2007
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 27 Dec 2007 08:27:05 -0800
Subject: [antlr-interest] Development of an XQuery parser with
	full-text	extensions, project report
In-Reply-To: <1198767616.4773be00ec690@clients.latnet.lv>
Message-ID: <"LEF88C8BA15684df189E18A959056FBC0.1198773311.scalix.temporal-wave.com*"@MHS>

You are confusing two separate systems altogether. Parsers should 
attempt to recover and list all errors that they can. Virtually all 
other programs should stop immediately upon fatal errors. Ter suggested 
throwing an exception to STOP the parsing completely, hence the small 
overhead of throwing a single exception is irrelevant in that case.

Jim

> -----Original Message-----
> From: Guntis Ozols [mailto:guntiso at latnet.lv]
> Sent: Thursday, December 27, 2007 7:00 AM
> To: Thomas Brandon
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Development of an XQuery parser with 
full-
> text extensions, project report
> 
> > I think the current handling is good,  I think in most cases the 
most
> > sensible thing to do is to record errors but keep parsing so this
> > should be the default. It should (as I believe it currently is) be
> > easy to throw a runtime exception on error to abort parsing.
> > (...)
> > Tom.
> 
> It's not good. It should be possible to attach error-listener/handler
> to lexer/parser from API, and recover if this listener/handler says so
> (for example, recover from first 100 errors), otherwise fail.
> If there is no listener/handler - fail!
> 
> Will you be hapy with a database tool which happily deletes all rows 
from
> the table because of misspelled where clause (on the way, printing 
humble
> error message somewhere on the server console),
> what kind of reliability is that?
> 
> Guntis
> 



From john at jacelridge.com  Thu Dec 27 08:43:17 2007
From: john at jacelridge.com (John Ridgway)
Date: Thu, 27 Dec 2007 11:43:17 -0500
Subject: [antlr-interest] java v3 grammar
In-Reply-To: <e28d32c0712270831m2aca4aa0r3016e8b57fefe67b@mail.gmail.com>
References: <e28d32c0712270831m2aca4aa0r3016e8b57fefe67b@mail.gmail.com>
Message-ID: <434D7417-AD0C-4D21-A8A5-96FFFF36ADBD@jacelridge.com>

I have been working on one for a while, and it is almost ready.  I  
believe that it parses any syntactically correct Java compilation  
unit (and a few that are not correct), and it generates an AST.  I am  
going to continue to improve it, but you are welcome to it in its  
current state if you want it.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: JavaAST.g
Type: application/octet-stream
Size: 40011 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071227/704860c5/attachment-0001.obj 
-------------- next part --------------


Peace
- John



On Dec 27, 2007, at 11:31 AM, James Hamilton wrote:

> Hi,
>
> Does anyone have a v3 java1.5 grammar which outputs an AST.
>
> I've been using the one on the antlr website but am having trouble  
> adding trees actions into it.
>
> Thanks,
>
> James


From jflack at math.purdue.edu  Thu Dec 27 09:21:36 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Thu, 27 Dec 2007 12:21:36 -0500
Subject: [antlr-interest] disambiguating sempred in a closure?
In-Reply-To: <B6F882D5-9B03-4E25-8871-C44DC7535468@cs.usfca.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<476C4511.7010103@math.purdue.edu>
	<B6F882D5-9B03-4E25-8871-C44DC7535468@cs.usfca.edu>
Message-ID: <4773DF20.3050805@math.purdue.edu>


Terence Parr wrote:
> v3 is way better at this stuff.  You use a gated semantic pred, which 
> always get hoisted into decision:
> 
> prod : something
>       ( ( { muppet }?=> ( KERMIT | FOZZIE )
>         | { turtle }?=> ( LEONARDO | DONATELLO )
>         )
>      something_else
>       )*
>     ;

Ah ... ok (shrugs, downloads v2v3-0.2.tar.gz ... was originally
planning to finish a v2 version first, get that working, and
use that as a regression base for a v3 port, but maybe not if
it means bending over backwards in 2 to do what's easy in 3).

-Chap

From parrt at cs.usfca.edu  Thu Dec 27 11:27:59 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Dec 2007 11:27:59 -0800
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <4773CEFC.9080006@mtu.net>
References: <20071222084119.C6C47F018E@mtu.net> <4771A9BB.2050200@mtu.net>
	<4773CEFC.9080006@mtu.net>
Message-ID: <FE038767-A4D6-401B-AD95-776A24860590@cs.usfca.edu>


On Dec 27, 2007, at 8:12 AM, Jon Schewe wrote:

> Given the discussion here I've taken another look at custom AST  
> walkers
> and found that it's really not that difficult to write an AST walker  
> if
> you do a good job creating the tree in the parser with rewrite  
> rules.  I
> haven't rewritten the whole grammar yet, but have written an example
> that contains most of the elements and found it very manageable.   
> Thank
> you for the suggestions to look in another direction.

Beware of simple walkers.  They are great if you want to print out  
every node or count them.  They cannot, however, answer important  
questions such as "am I in this context?". You cannot apply actions  
that are appropriate only in certain contexts very easily without  
grammatical context.

Ter

From antlr at mirality.co.nz  Thu Dec 27 12:36:03 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 28 Dec 2007 09:36:03 +1300
Subject: [antlr-interest] Development of an XQuery parser with
 full-text	extensions, project report
In-Reply-To: <1198767616.4773be00ec690@clients.latnet.lv>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
	<1198767616.4773be00ec690@clients.latnet.lv>
Message-ID: <20071227203622.608FB11EB6F@www.antlr.org>

At 04:00 28/12/2007, Guntis Ozols wrote:
 >Will you be hapy with a database tool which happily deletes all
 >rows from the table because of misspelled where clause (on the
 >way, printing humble error message somewhere on the server
 >console), what kind of reliability is that?

Obviously you shouldn't do that, and if you've got something where 
that's a possibility, it means that you're probably doing the 
wrong thing in your parser actions.

When you've got a case where the input may be invalid (which is 
most of the time), you should ensure that your parser actions 
don't have side-effects -- they should merely record state (eg. 
similar to building an AST, but a bit less formal) or queue up 
tasks that need to be performed without actually taking any 
action.  Then your main program actions it all only if it managed 
to complete the parse without errors.  (It might be a good idea to 
change to actually build an AST in your parser.)

And incidentally, I'm not sure that was the best example -- SQL is 
a particularly unforgiving language (oops, I just accidentally 
pressed ENTER after typing "DELETE FROM Paychecks"; I was going to 
enter a WHERE clause, honest!).


From parrt at antlr.org  Thu Dec 27 12:36:37 2007
From: parrt at antlr.org (Terence Parr)
Date: Thu, 27 Dec 2007 12:36:37 -0800
Subject: [antlr-interest] new build
Message-ID: <2B954CD9-387F-4C45-9210-B1251C73DF6E@antlr.org>

Hi.  This should behave much better on nasty and large input  
grammars.  Generated code should be much smaller also (I'm inlining  
more DFAs).

http://www.antlr.org/download/build/antlr-2007-12-27.12.tar.gz

Ter

From jflack at math.purdue.edu  Thu Dec 27 14:51:09 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Thu, 27 Dec 2007 17:51:09 -0500
Subject: [antlr-interest] ANTLR 3 diagnostics
In-Reply-To: <476C3D9C.6070206@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
Message-ID: <47742C5D.1070407@math.purdue.edu>


I have an ANTLR 2 combined grammar (that wasn't finished, but
did compile without warnings under ANTLR 2), converted
to an ANTLR 3 combined grammar using v2v3.

Now the v3 org.antlr.Tool gives the following stack
overflow, and I am seeking suggestions for any reasonably
effective way to diagnose what rule(s) in the grammar may
be implicated:

Exception in thread "main" java.lang.StackOverflowError
         at 
org.antlr.analysis.NFAConfiguration.equals(NFAConfiguration.java:108)
         at java.util.HashMap.getEntry(HashMap.java:349)
         at java.util.HashMap.containsKey(HashMap.java:335)
         at java.util.HashSet.contains(HashSet.java:184)
         at 
org.antlr.analysis.NFAToDFAConverter.closureIsBusy(NFAToDFAConverter.
java:817)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:632)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:762)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:727)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:727)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:727)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:762)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:727)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:727)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:727)
         at 
org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java:762)


antlrWorks does not display any red for this grammar, though it does
pop up a dialog box saying it thinks the grammar isn't v3, for reasons
undisclosed. However, all the Generate and View Code options in
antlrWorks do send the same stack dump to stderr, and fail to generate
anything. Is there any feature in antlrWorks that can be used to narrow
the search for the problem?

Thanks,
-Chap

From jflack at math.purdue.edu  Thu Dec 27 15:05:25 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Thu, 27 Dec 2007 18:05:25 -0500
Subject: [antlr-interest] ANTLR 3 diagnostics
In-Reply-To: <47742C5D.1070407@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
Message-ID: <47742FB5.3030401@math.purdue.edu>


J Chapman Flack wrote:
> Now the v3 org.antlr.Tool gives the following stack
> overflow, and I am seeking suggestions for any reasonably
> effective way to diagnose what rule(s) in the grammar may

or I could have read the docs ... -Xwatchconversion seems to
get me in the neighborhood. Sorry for the bandwidth.

-Chap

From parrt at cs.usfca.edu  Thu Dec 27 15:07:00 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Dec 2007 15:07:00 -0800
Subject: [antlr-interest] ANTLR 3 diagnostics
In-Reply-To: <47742C5D.1070407@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
Message-ID: <D921F803-5459-42DC-8C38-93E94257E3EA@cs.usfca.edu>

Hi Chap, i'm neck deep in some bugs at moment...but, please grab  
latest build

http://www.antlr.org/download/build/antlr-2007-12-27.12.tar.gz

and run org.antlr.Tool from command line.  Might give you better  
joy...if not, lemme know...
Ter
On Dec 27, 2007, at 2:51 PM, J Chapman Flack wrote:

>
> I have an ANTLR 2 combined grammar (that wasn't finished, but
> did compile without warnings under ANTLR 2), converted
> to an ANTLR 3 combined grammar using v2v3.
>
> Now the v3 org.antlr.Tool gives the following stack
> overflow, and I am seeking suggestions for any reasonably
> effective way to diagnose what rule(s) in the grammar may
> be implicated:
>
> Exception in thread "main" java.lang.StackOverflowError
>        at  
> org.antlr.analysis.NFAConfiguration.equals(NFAConfiguration.java:108)
>        at java.util.HashMap.getEntry(HashMap.java:349)
>        at java.util.HashMap.containsKey(HashMap.java:335)
>        at java.util.HashSet.contains(HashSet.java:184)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closureIsBusy(NFAToDFAConverter.
> java:817)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 632)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 762)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 727)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 727)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 727)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 762)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 727)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 727)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 727)
>        at  
> org.antlr.analysis.NFAToDFAConverter.closure(NFAToDFAConverter.java: 
> 762)
>
>
> antlrWorks does not display any red for this grammar, though it does
> pop up a dialog box saying it thinks the grammar isn't v3, for reasons
> undisclosed. However, all the Generate and View Code options in
> antlrWorks do send the same stack dump to stderr, and fail to generate
> anything. Is there any feature in antlrWorks that can be used to  
> narrow
> the search for the problem?
>
> Thanks,
> -Chap


From harald_m_mueller at gmx.de  Thu Dec 27 15:12:59 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Fri, 28 Dec 2007 00:12:59 +0100
Subject: [antlr-interest] new build
In-Reply-To: <2B954CD9-387F-4C45-9210-B1251C73DF6E@antlr.org>
Message-ID: <20071227231258.2C96F11EBCF@www.antlr.org>

Hi Terence -

Here's some feedback on the build from a C# developer ...

it is (at least for me) still hard to build ANTLR from the tar.gz.
Because of the two bugs I sent you in my previous email, I have to rebuild
all of ANTLR. 
However, this is not so easy - here is my "cookbook" of how to create an
ANTLR from your sources - maybe this is also helpful for others.

First, going to the root directory (where build.xml resides) and running ANT
results in

	C:\MyProjects\ANTLR3Explanations\antlr-2007-12-27.12>ant
	Buildfile: build.xml

	generator-prepare:

	generator:
	    [antlr] java.lang.NoClassDefFoundError: antlr/Tool
	    [antlr] Exception in thread "main"

This can be corrected by setting the CLASSPATH explicitly (assuming one runs
ANT from the top-level untar directory):

	set ANTLRLIB=.\lib
	set
CLASSPATH=%ANTLRLIB%\stringtemplate-3.1b1.jar;%ANTLRLIB%\antlr-2.7.7.jar;C:\
eclipse\plugins\org.junit_3.8.1\junit.jar

where junit points to some arbitrary junit installation. Running ANT now
will now produce a host of "duplicate class" errors:

  [myjavac]
C:\MyProjects\ANTLR3Explanations\antlr-2007-12-27.12\codegen\ANTLRLexer.java
:61: duplicate class: org.antlr.tool.ANTLRLexer
  [myjavac] public class ANTLRLexer extends antlr.CharScanner implements
ANTLRTokenTypes, TokenStream
  ...etc. (13 such messages)

At this point, it is necessary to remove the "codegen.dir" from the sources
to be compiled. This is done by removing (or commenting) the line

	<pathelement location="${codegen.dir}" />

in the build.xml file (line 36 in the current build). Now, the compile will
work (interestingly, after this, it is possible to re-insert the line;
because of the lazy compile, everything will work fine from then on, it
seems).

It is now possible to repair the bug in ASTTreeParser.stg and do a final
compile.

Finally, one must copy over the result from build\antlr.jar to
lib\antlr-2007-12-27.12.jar (or the like; if one desires to use the lib dir
as an entry point).

----

Re the C#2.0 runtime, there are a couple more errors in it (although they
are all essentially the same error - using List<T> instead of IList).
There are 4 files which need to be repaired - I have added the repaired
versions as attachments.
(I probably should send you also the grammar with which I found the errors -
but it is currently in a chaotic/experimental state ... maybe I find time
for that in the next days).

Best regards
Harald

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Thursday, December 27, 2007 9:37 PM
> To: Antlr List
> Subject: [antlr-interest] new build
> 
> Hi.  This should behave much better on nasty and large input 
> grammars.  Generated code should be much smaller also (I'm 
> inlining more DFAs).
> 
> http://www.antlr.org/download/build/antlr-2007-12-27.12.tar.gz
> 
> Ter
> 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: RewriteRuleElementStream.cs
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071228/c6f08eb6/attachment-0004.pl 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: RewriteRuleTokenStream.cs
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071228/c6f08eb6/attachment-0005.pl 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: RewriteRuleSubtreeStream.cs
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071228/c6f08eb6/attachment-0006.pl 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: RewriteRuleNodeStream.cs
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20071228/c6f08eb6/attachment-0007.pl 

From jflack at math.purdue.edu  Thu Dec 27 15:28:02 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Thu, 27 Dec 2007 18:28:02 -0500
Subject: [antlr-interest] A rule ANTLR 3 doesn't like [Re: ANTLR 3
	diagnostics]
In-Reply-To: <47742FB5.3030401@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
	<47742FB5.3030401@math.purdue.edu>
Message-ID: <47743502.9090200@math.purdue.edu>


J Chapman Flack wrote:
> J Chapman Flack wrote:
>> Now the v3 org.antlr.Tool gives the following stack
>> overflow, and I am seeking suggestions for any reasonably
>> ...
> or I could have read the docs ... -Xwatchconversion seems to
> get me in the neighborhood. Sorry for the bandwidth.

The offending rule is one that had already required creativity
in getting ANTLR 2 to accept it. I suppose it may require
different creativity to get v3 to accept it.

The goal is to parse n (a parameter passed by caller) NUMBERs
separated by delimiter tokens of token type tt (another parameter,
but we are confident tt != SEMI). If the caller passes 0 for n,
take as many as possible.  Looks like this, converted from ANTLR 2:

numeric_aggregate[int n, int tt]
                  @init {
                    boolean limit = ( 0 != n );
                  }
                  : NUMBER
                    ( options { greedy = true; } :
                      { (!limit || (--n > 0)) && LA(1) == tt }? ~( SEMI )
                      NUMBER
                    )*
                    { !limit || 0 == n }?
                  ;

Should this work in ANTLR 3?  Or is there a more-recommended way
of expressing this rule?

I'll try with the more recent build tomorrow.

Thanks,
-Chap

From jpschewe at mtu.net  Thu Dec 27 15:38:59 2007
From: jpschewe at mtu.net (Jon Schewe)
Date: Thu, 27 Dec 2007 17:38:59 -0600
Subject: [antlr-interest] Unfolding of loops with antlr?
In-Reply-To: <FE038767-A4D6-401B-AD95-776A24860590@cs.usfca.edu>
References: <20071222084119.C6C47F018E@mtu.net>
	<4771A9BB.2050200@mtu.net>	<4773CEFC.9080006@mtu.net>
	<FE038767-A4D6-401B-AD95-776A24860590@cs.usfca.edu>
Message-ID: <47743793.3000303@mtu.net>

Terence Parr wrote:
>
> On Dec 27, 2007, at 8:12 AM, Jon Schewe wrote:
>
>> Given the discussion here I've taken another look at custom AST walkers
>> and found that it's really not that difficult to write an AST walker if
>> you do a good job creating the tree in the parser with rewrite rules.  I
>> haven't rewritten the whole grammar yet, but have written an example
>> that contains most of the elements and found it very manageable.  Thank
>> you for the suggestions to look in another direction.
>
> Beware of simple walkers.  They are great if you want to print out
> every node or count them.  They cannot, however, answer important
> questions such as "am I in this context?". You cannot apply actions
> that are appropriate only in certain contexts very easily without
> grammatical context.
>
I'm not sure where you are getting at here, but I don't seem to have any
of these problems.  I've enhanced the AST to make it clear what context
I'm in and I'm parsing a simple language that just contains variable
declarations and equations and loops.

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From parrt at cs.usfca.edu  Thu Dec 27 15:42:19 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Dec 2007 15:42:19 -0800
Subject: [antlr-interest] A rule ANTLR 3 doesn't like [Re: ANTLR 3
	diagnostics]
In-Reply-To: <47743502.9090200@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
	<47742FB5.3030401@math.purdue.edu>
	<47743502.9090200@math.purdue.edu>
Message-ID: <EBEE0866-57AB-49F9-842D-C1A279ED5EA7@cs.usfca.edu>

Hi Chap, try removing side effects from preds...no telling how many  
times they exec now.

Also use {...}?=> pred not {..}? to force including in DFA decision  
maker.
Ter
On Dec 27, 2007, at 3:28 PM, J Chapman Flack wrote:

>
> J Chapman Flack wrote:
>> J Chapman Flack wrote:
>>> Now the v3 org.antlr.Tool gives the following stack
>>> overflow, and I am seeking suggestions for any reasonably
>>> ...
>> or I could have read the docs ... -Xwatchconversion seems to
>> get me in the neighborhood. Sorry for the bandwidth.
>
> The offending rule is one that had already required creativity
> in getting ANTLR 2 to accept it. I suppose it may require
> different creativity to get v3 to accept it.
>
> The goal is to parse n (a parameter passed by caller) NUMBERs
> separated by delimiter tokens of token type tt (another parameter,
> but we are confident tt != SEMI). If the caller passes 0 for n,
> take as many as possible.  Looks like this, converted from ANTLR 2:
>
> numeric_aggregate[int n, int tt]
>                 @init {
>                   boolean limit = ( 0 != n );
>                 }
>                 : NUMBER
>                   ( options { greedy = true; } :
>                     { (!limit || (--n > 0)) && LA(1) == tt }?  
> ~( SEMI )
>                     NUMBER
>                   )*
>                   { !limit || 0 == n }?
>                 ;
>
> Should this work in ANTLR 3?  Or is there a more-recommended way
> of expressing this rule?
>
> I'll try with the more recent build tomorrow.
>
> Thanks,
> -Chap


From guntiso at latnet.lv  Thu Dec 27 17:02:47 2007
From: guntiso at latnet.lv (Guntis Ozols)
Date: Fri, 28 Dec 2007 03:02:47 +0200
Subject: [antlr-interest] Development of an XQuery parser with
	full-text	extensions, project report
In-Reply-To: <ebc876d70712270805m222e8aa0l520b3fbb76b4c79a@mail.gmail.com>
References: <476ABD59.2070002@gmail.com> <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
	<1198767616.4773be00ec690@clients.latnet.lv>
	<1198769430.4773c5167971e@clients.latnet.lv>
	<ebc876d70712270805m222e8aa0l520b3fbb76b4c79a@mail.gmail.com>
Message-ID: <1198803767.47744b37c97bc@clients.latnet.lv>

> > > > I think the current handling is good,  I think in most cases the most
> > > > sensible thing to do is to record errors but keep parsing so this
> > > > should be the default. It should (as I believe it currently is) be
> > > > easy to throw a runtime exception on error to abort parsing.
> > > > (...)
> > > > Tom.
> > >
> > > It's not good. It should be possible to attach error-listener/handler
> > > to lexer/parser from API, and recover if this listener/handler says so
> > > (for example, recover from first 100 errors), otherwise fail.
> > > If there is no listener/handler - fail!
> > >
> I can't really see why you'd generally want to do that rather than do
> the whole parse and then only print the first 100 errors. There are
> some cases sure, but I don't see any need to complicate ANTLR dealing
> with them. Currently you can do something like:
> @lexer::members {
>   int numErrors = 0;
>   public void reportError(RecognitionException e) {
>     if(numErrors++ > 100)
>       throw new TooManyErrorsException();
>     }
>   }
> }
> Where TooManyErrorsException is a RuntimeException subclass. I don't
> see any general need to have error handlers specified at runtime,
> though of course you can add this if you need it.

The only reason I want it to be configurable from API is because these
'Frankenstein' grammar files with target language specific error handling
does not fit with my understanding of separation of concerns.
To my understanding, your code above has nothing to do with your grammar
or any other grammar.

Two things polluting my grammar file which i'd like to factor out are:
- package declarations (should be possible to specify as command line opt.)
- flexible error handling code

> I don't think that the reportError should be removed, but I
> think overriding it to throw a runtime exception is a perfectly good
> way of aborting on any invalid input and I don't see any reason to
> make it any easier by complicating ANTLR.
>
> Tom.

I believe it does not work as expected if there are lexer predicates,
does it? Also, ANTLRWorks debugger does not work if lexer throws
exception (debugger is unable to attach it's all forgiving error
handler at runtime to work properly)

Guntis


From parrt at cs.usfca.edu  Thu Dec 27 17:16:30 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 27 Dec 2007 17:16:30 -0800
Subject: [antlr-interest] yet another build (with change list for today)
Message-ID: <262608CE-28C0-4DB5-9B81-92A6FBD38195@cs.usfca.edu>

Hi.  Just pushed:

http://www.antlr.org/download/build/antlr-2007-12-27.17.tar.gz

Not sure what's changed since today's earlier build, but here are  
today's changes:

December 27, 2007

* Changed -Xnoinlinedfa to -Xmaxinlinedfastates m where m is
   maximum number of states a DFA can have before ANTLR avoids
   inlining it.  Instead, you get a table-based DFA.  This
   affectively avoids some acyclic DFA that still have many states
   with multiple incident edges.  The combinatorial explosion smacks
   of infinite loop.  Fixes ANTLR-130.

* [...] are allowed in args now but ] must be escaped as \]. E.g.,
   a[String[\] ick, int i] : ... ;
   And calling a rule: foo[x[i\], 34]
   Fixes ANTLR-140.

* Fixed ANTLR-105.   
Target.getTargetStringLiteralFromANTLRStringLiteral()
   escaped " that were already escaped.

* target's can now specify how to encode int as char escape.  Moved
   DFA.encodeIntAsCharEscape to Target.

* Bug in runtime.DFA.  If a special state (one with predicate) failed,  
it
   tried to continue (causing out of range exception due to state = -1)
   instead of reporting error.

* If -dfa with combined grammar T.g, builds T.dec-*.dot and TLexer.dec- 
*.dot

* Fix ANTLR-165.
   Generate TParser.java and TLexer.java from T.g if combined, else
   use T.java as output regardless of type.
   BACKWARD INCOMPATIBILITY since file names change.
   I changed the examples-v3/java to be consistent.  Required XML.g ->
   XMLLexer.java and fuzzy/Main.java change.

* Fix ANTLR-169.  Deletes tmp lexer grammar file.

Enjoy.

Ter
PS	This link might show most recent fixes:

http://www.antlr.org:8888/secure/IssueNavigator.jspa?reset=true&mode=hide&pid=10000&status=5&status=6&updated:previous=-1w&sorter/field=updated&sorter/order=DESC

From mark at antelope.nildram.co.uk  Thu Dec 27 20:16:57 2007
From: mark at antelope.nildram.co.uk (Mark)
Date: Fri, 28 Dec 2007 5:16:57 +0100
Subject: [antlr-interest] Semantic Exceptions
Message-ID: <20071228051659.5E1472B5010@smtp.nildram.co.uk>

Hi,

How do I throw Semantic Exceptions (or their equivalent) in ANTLR 3?

Thanks and Happy New Year!



________________________________________________
Message sent using UebiMiau 2.7.2


From Joerg.Werner at qimonda.com  Fri Dec 28 02:06:56 2007
From: Joerg.Werner at qimonda.com (Werner Joerg (QAG PD PT TPE C))
Date: Fri, 28 Dec 2007 11:06:56 +0100
Subject: [antlr-interest] Problem with latest build
Message-ID: <EB319CC805146B44B7237B13BC5F0CAC1A0E5737@drsse0102.qimonda.com>

Hi all,

Using the latest nightly build I get the following error when running org.antlr.Tool:

ANTLR Parser Generator  Version 3.1b1 (??)  1989-2007
src/com/qimonda/pd/pt/tpec/JasdapTools/evalGenCombinations/GetCombinationTreeWalker.g3
error(100): GetCombinationTreeWalker.g3:118:12: syntax error: antlr: GetCombinationTreeWalker.g3:118:12: unexpected token: )
error(100): GetCombinationTreeWalker.g3:119:2: syntax error: antlr: GetCombinationTreeWalker.g3:119:2: unexpected token: ;

The offending lines in my grammar seem to be:

key
        : ^( KEY .)
        ;

I assume the "." for matching any tree node is the problem. In version 3.0 similar constructs were working fine. Looks like a regression to me. Any comments?

Regards,

J?rg

--
Dr. J?rg Werner (???)
Qimonda AG
Memory Products Division
QAG PD PT TPE C
Am Campeon 1-12
D-85579 Neubiberg
email: joerg.werner at qimonda.com
Tel:  +49 89 60088-2231
Fax:  +49 89 60088-442231

Chairman of the Supervisory Board/Aufsichtsratsvorsitzender: Peter J. Fischl
Management Board/Vorstand: Kin Wah Loh (Chairman/Vorsitzender), Dr. Michael Majerus, Thomas J. Seifert
Register Court/Registergericht: M?nchen HRB 152545, Seat/Sitz: M?nchen


From antlr-interest at schraverus.com  Fri Dec 28 14:08:20 2007
From: antlr-interest at schraverus.com (Corno Schraverus)
Date: Fri, 28 Dec 2007 14:08:20 -0800
Subject: [antlr-interest] antlr-interest Digest, Vol 37, Issue 54
In-Reply-To: <F4688DE545E7443CBE3CB0E7E4B23218@ISDlan.local>
References: <F4688DE545E7443CBE3CB0E7E4B23218@ISDlan.local>
Message-ID: <000901c8499e$296870b0$7c395210$@com>

Thanks Jim for the answer, I found the nextToken method now, I must have
overlooked it.
I think I'm very close to getting it to work but there's one thing that I
don't get.

The tokens that are fed to the parser are identical now (considering 'text'
and 'type') to the ones when using antlr 2.7,
but nonetheless I see that the parser misinterprets the stream for the
tokens I add in between the lexer and the parser.
I think I must be creating the tokens in the wrong way or I must be setting
the text in a wrong way, otherwise, I don't understand what the difference
between the original tokens and my added tokens is.

Is the code below the way it is supposed to be done?
(WhitespaceSignificantTokenStream has a pointer to the lexer)


void setText(pANTLR3_COMMON_TOKEN token, WhitespaceSignificantTokenStream*
wsts, char const* value)
{
  token->setText(token,
wsts->lexer_->pLexer->tokSource->strFactory->newStr(wsts->lexer_->pLexer->to
kSource->strFactory, (pANTLR3_UINT8)value));
}

char* getText(pANTLR3_COMMON_TOKEN token)
{
  return (char*)token->getText(token)->chars;
}

void addToken(WhitespaceSignificantTokenStream* wsts, int type, char* value)
{
  pANTLR3_COMMON_TOKEN tok =
wsts->lexer_->pLexer->tokFactory->newToken(wsts->lexer_->pLexer->tokFactory)
;
  tok->setType(tok, type);
  setText(tok, wsts, value);
  tok->setLine(tok, wsts->lexer_->pLexer->getLine(wsts->lexer_->pLexer));
  wsts->theQueue_.push(tok);
}

TIA,

Corno
 
> nextToken is there. It is a "method" in the tokSource construct, which
> is contained in the lexer. Write your replacement nextToken by copying
> the one in antlr3Lexer.c, then after you create the lexer and add the
> tokenSource, install your own version.
> 
> Jim
> 
> > -----Original Message-----
> > From: Corno Schraverus [mailto:antlr-interest at schraverus.com]
> > Sent: Wednesday, December 19, 2007 5:01 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] token filtering in C target (antlr 3.0)
> >
> > Hi all,
> >
> > I'm trying to port a whitespace significant grammar from 2.7 to 3.0.
> > (It is almost identical to the python parser available for 2.7;
> basically
> > all that has to be done is override the 'nextToken' method.)
> > I'm going through the sources of the runtime library for the C target
> but
> > cannot find the nextToken method(function) and if I'm correct it's
> done
> > with
> > _LA(). However _LA() is more complex: arbitrary lookahead or
> lookback.
> Do
> > I
> > have to implement this functionality to get it working correctly?
> >
> > greetings,
> >
> > Corno
> >



From go2elango at gmail.com  Fri Dec 28 06:19:51 2007
From: go2elango at gmail.com (elango m)
Date: Fri, 28 Dec 2007 19:49:51 +0530
Subject: [antlr-interest] Memory issue while lexer initialization
Message-ID: <154902370712280619h40998ac7h687495796522f92b@mail.gmail.com>

Hi,

I have a memory issue when I create an instance of the lexer (new
MyLexer(new ANTLRStringStream("expression")). The following code in the
lexer creates instances of short[] with a huge data, consuming more than 25
Mb. I don't understand why it requires such a huge memory. Any help is
appreciated.

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString
(DFA14_transitionS[i]);
        }
    }

Thanks,
--Elango M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071228/ce107e2d/attachment-0001.html 

From antlr-interest at schraverus.com  Fri Dec 28 16:09:04 2007
From: antlr-interest at schraverus.com (Corno Schraverus)
Date: Fri, 28 Dec 2007 16:09:04 -0800
Subject: [antlr-interest] token filtering in C target (antlr 3.0) [repost
	with correct subject]
Message-ID: <000d01c849af$06e5ff60$14b1fe20$@com>

Thanks Jim for the answer, I found the nextToken method now, I must have
overlooked it.
I think I'm very close to getting it to work but there's one thing that I
don't get.

The tokens that are fed to the parser are identical now (considering 'text'
and 'type') to the ones when using antlr 2.7,
but nonetheless I see that the parser misinterprets the stream for the
tokens I add in between the lexer and the parser.
I think I must be creating the tokens in the wrong way or I must be setting
the text in a wrong way, otherwise, I don't understand what the difference
between the original tokens and my added tokens is.

Is the code below the way it is supposed to be done?
(WhitespaceSignificantTokenStream has a pointer to the lexer)


void setText(pANTLR3_COMMON_TOKEN token, WhitespaceSignificantTokenStream*
wsts, char const* value)
{
  token->setText(token,
wsts->lexer_->pLexer->tokSource->strFactory->newStr(wsts->lexer_->pLexer->to
kSource->strFactory, (pANTLR3_UINT8)value));
}

char* getText(pANTLR3_COMMON_TOKEN token)
{
  return (char*)token->getText(token)->chars;
}

void addToken(WhitespaceSignificantTokenStream* wsts, int type, char* value)
{
  pANTLR3_COMMON_TOKEN tok =
wsts->lexer_->pLexer->tokFactory->newToken(wsts->lexer_->pLexer->tokFactory)
;
  tok->setType(tok, type);
  setText(tok, wsts, value);
  tok->setLine(tok, wsts->lexer_->pLexer->getLine(wsts->lexer_->pLexer));
  wsts->theQueue_.push(tok);
}

TIA,

Corno
 
> nextToken is there. It is a "method" in the tokSource construct, which
> is contained in the lexer. Write your replacement nextToken by copying
> the one in antlr3Lexer.c, then after you create the lexer and add the
> tokenSource, install your own version.
> 
> Jim




From jflack at math.purdue.edu  Fri Dec 28 07:46:39 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 28 Dec 2007 10:46:39 -0500
Subject: [antlr-interest] A rule ANTLR 3 doesn't like [Re: ANTLR 3
	diagnostics]
In-Reply-To: <EBEE0866-57AB-49F9-842D-C1A279ED5EA7@cs.usfca.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
	<47742FB5.3030401@math.purdue.edu>
	<47743502.9090200@math.purdue.edu>
	<EBEE0866-57AB-49F9-842D-C1A279ED5EA7@cs.usfca.edu>
Message-ID: <47751A5F.6060803@math.purdue.edu>


Terence Parr wrote:
> Hi Chap, try removing side effects from preds...no telling how many 
> times they exec now.

Good to know, I'll be sure to take out the side effects. But I trust
ANTLR isn't trying to analyze the java code, so this can't be behind
the stack overflow in the DFA builder, right?

> Also use {...}?=> pred not {..}? to force including in DFA decision maker.

That sounds more promising, though I seem to recall trying it yesterday
and still blowing the stack. I'll try with the newer build.

-Chap

numeric_aggregate[int n, int tt]
                  @init {
                    boolean limit = ( 0 != n );
                  }
                  : NUMBER
                    ( options { greedy = true; } :
                      { (!limit || (--n > 0)) && LA(1) == tt }? ~( SEMI )
                      NUMBER
                    )*
                    { !limit || 0 == n }?
                  ;

From jyotisha at nord-com.net  Fri Dec 28 08:41:46 2007
From: jyotisha at nord-com.net (Jyotish-Software)
Date: Fri, 28 Dec 2007 17:41:46 +0100
Subject: [antlr-interest] problem with example
Message-ID: <4775274A.3060806@nord-com.net>

Hallo everyone,
I am new to the list and first of all I would like to thank Terence Parr 
and Jean Bovet for their wonderfull software.
I just bought the book 'The Definitive ANTLR Reference' Version 
2007-7-29 and copied the example in chapter 3, Expr.g. It works as 
written in the text, for example with '3+@'  or '(3'  that is, the error 
  is reported is exactly as in the book. But when I enter '(3+4)*5' the 
syntax tree in the interpreter shows a NoViableAltException and the 
debugger has the right result 35 but states: Line 1:4 no viable 
alternative at input ')'. The same happens when I run the Test.java 
which I do in Eclipse. From the syntax tree I see that another multExp 
is started which find no satisfying value for the atom. How can one stop 
  the parsing at this point or what is wrong?
Kind regards
Rolf



From jaluber at gmx.de  Fri Dec 28 09:55:27 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 28 Dec 2007 18:55:27 +0100
Subject: [antlr-interest] new build
In-Reply-To: <20071227231258.2C96F11EBCF@www.antlr.org>
References: <20071227231258.2C96F11EBCF@www.antlr.org>
Message-ID: <4775388F.7050900@gmx.de>

Harald M. M?ller schrieb:
> Re the C#2.0 runtime, there are a couple more errors in it (although they
> are all essentially the same error - using List<T> instead of IList).
> There are 4 files which need to be repaired - I have added the repaired
> versions as attachments.
> (I probably should send you also the grammar with which I found the errors -
> but it is currently in a chaotic/experimental state ... maybe I find time
> for that in the next days).

Oops. That was my mistake. I'd like to know why it didn't work because
my own grammar had no problem with the missing I-s.

Johannes

From parrt at cs.usfca.edu  Fri Dec 28 09:56:36 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 09:56:36 -0800
Subject: [antlr-interest] attempt to compare antlr vs bison/flex
	performance
In-Reply-To: <476AEC51.4070802@ti.com>
References: <4769A7C3.8010206@ti.com>
	<08DFF476-A43D-4711-81A7-2E19DE56AE12@cs.usfca.edu>
	<476AEC51.4070802@ti.com>
Message-ID: <F18C55A1-9908-4FF9-85AC-B93F936D1302@cs.usfca.edu>


On Dec 20, 2007, at 2:27 PM, Minas Hambardzumyan wrote:

> I guess I could compare antlr java parser with the bison version in  
> the gcc compiler. I will send an update when I get some results...
>
> One conclusion seams to be obvious though. If the speed is of  
> essence, then one has to simplify the grammar definition as close to  
> LL(1) as possible.

Just LL(*) or perhaps LL(k).  It's the backtracking that is inefficient.

> Doing so though moves the grammar definition away from the simple to  
> read EBNF format -- one of the most important advantages of using  
> antlr. So it is up to the user to pick -- easy to use/read vs not os  
> easy but fast...

The point of LL(*) is to get power w/o forcing unnatural grammars or w/ 
o deadly performance.  90% of the time, you'll be fine with ANTLR.

Ter

From parrt at cs.usfca.edu  Fri Dec 28 09:57:51 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 09:57:51 -0800
Subject: [antlr-interest] literal apostrophe in lexer rule
In-Reply-To: <f0fcc6820712210921r30949437u20c4bb228bdb7511@mail.gmail.com>
References: <f0fcc6820712210921r30949437u20c4bb228bdb7511@mail.gmail.com>
Message-ID: <5C179FB6-AC7B-4320-8E40-B7DF8837E174@cs.usfca.edu>

works fine in 3.1beta...
Ter
On Dec 21, 2007, at 9:21 AM, Mark Volkmann wrote:

> Why do I get "unexpected char: '\' from the following lexer rule?
>
> APOSTROPHE: '\'';
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From parrt at cs.usfca.edu  Fri Dec 28 09:59:04 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 09:59:04 -0800
Subject: [antlr-interest] Problem with latest build
In-Reply-To: <EB319CC805146B44B7237B13BC5F0CAC1A0E5737@drsse0102.qimonda.com>
References: <EB319CC805146B44B7237B13BC5F0CAC1A0E5737@drsse0102.qimonda.com>
Message-ID: <7D2BE800-1DF0-42ED-ABEA-28548556468D@cs.usfca.edu>

yikes!  I'm working on it...
Ter
On Dec 28, 2007, at 2:06 AM, Werner Joerg (QAG PD PT TPE C) wrote:

> Hi all,
>
> Using the latest nightly build I get the following error when  
> running org.antlr.Tool:
>
> ANTLR Parser Generator  Version 3.1b1 (??)  1989-2007
> src/com/qimonda/pd/pt/tpec/JasdapTools/evalGenCombinations/ 
> GetCombinationTreeWalker.g3
> error(100): GetCombinationTreeWalker.g3:118:12: syntax error: antlr:  
> GetCombinationTreeWalker.g3:118:12: unexpected token: )
> error(100): GetCombinationTreeWalker.g3:119:2: syntax error: antlr:  
> GetCombinationTreeWalker.g3:119:2: unexpected token: ;
>
> The offending lines in my grammar seem to be:
>
> key
>        : ^( KEY .)
>        ;
>
> I assume the "." for matching any tree node is the problem. In  
> version 3.0 similar constructs were working fine. Looks like a  
> regression to me. Any comments?
>
> Regards,
>
> J?rg
>
> --
> Dr. J?rg Werner (???)
> Qimonda AG
> Memory Products Division
> QAG PD PT TPE C
> Am Campeon 1-12
> D-85579 Neubiberg
> email: joerg.werner at qimonda.com
> Tel:  +49 89 60088-2231
> Fax:  +49 89 60088-442231
>
> Chairman of the Supervisory Board/Aufsichtsratsvorsitzender: Peter  
> J. Fischl
> Management Board/Vorstand: Kin Wah Loh (Chairman/Vorsitzender), Dr.  
> Michael Majerus, Thomas J. Seifert
> Register Court/Registergericht: M?nchen HRB 152545, Seat/Sitz:  
> M?nchen
>


From parrt at cs.usfca.edu  Fri Dec 28 10:10:42 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 10:10:42 -0800
Subject: [antlr-interest] Memory issue while lexer initialization
In-Reply-To: <154902370712280619h40998ac7h687495796522f92b@mail.gmail.com>
References: <154902370712280619h40998ac7h687495796522f92b@mail.gmail.com>
Message-ID: <95DFE5CE-1A59-485A-BDD5-B830FE3902AD@cs.usfca.edu>

hi. you must have one huge grammar.  Do you have a lexer with a  
million tokens?
Ter
On Dec 28, 2007, at 6:19 AM, elango m wrote:

> Hi,
>
> I have a memory issue when I create an instance of the lexer (new  
> MyLexer(new ANTLRStringStream("expression")). The following code in  
> the lexer creates instances of short[] with a huge data, consuming  
> more than 25 Mb. I don't understand why it requires such a huge  
> memory. Any help is appreciated.
>
>     static {
>         int numStates = DFA14_transitionS.length;
>         DFA14_transition = new short[numStates][];
>         for (int i=0; i<numStates; i++) {
>             DFA14_transition[i] = DFA.unpackEncodedString  
> (DFA14_transitionS[i]);
>         }
>     }
>
> Thanks,
> --Elango M
>


From jaluber at gmx.de  Fri Dec 28 10:14:38 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 28 Dec 2007 19:14:38 +0100
Subject: [antlr-interest] yet another build (with change list for today)
In-Reply-To: <262608CE-28C0-4DB5-9B81-92A6FBD38195@cs.usfca.edu>
References: <262608CE-28C0-4DB5-9B81-92A6FBD38195@cs.usfca.edu>
Message-ID: <47753D0E.5020204@gmx.de>

Terence Parr schrieb:
> * target's can now specify how to encode int as char escape.  Moved
>   DFA.encodeIntAsCharEscape to Target.

What is this option supposed to do? It's the first time I've seen it
mentioned.

Johannes

From parrt at cs.usfca.edu  Fri Dec 28 10:19:24 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 10:19:24 -0800
Subject: [antlr-interest] yet another build (with change list for today)
In-Reply-To: <47753D0E.5020204@gmx.de>
References: <262608CE-28C0-4DB5-9B81-92A6FBD38195@cs.usfca.edu>
	<47753D0E.5020204@gmx.de>
Message-ID: <4580AC62-3B64-4241-8A83-76D5337CCD33@cs.usfca.edu>

ActionScript guy needed it to use char escapes for his target.  It  
should just work for all other targets (mostly likely you don't use it  
anyway).
Ter
On Dec 28, 2007, at 10:14 AM, Johannes Luber wrote:

> Terence Parr schrieb:
>> * target's can now specify how to encode int as char escape.  Moved
>>  DFA.encodeIntAsCharEscape to Target.
>
> What is this option supposed to do? It's the first time I've seen it
> mentioned.
>
> Johannes


From jflack at math.purdue.edu  Fri Dec 28 10:20:13 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 28 Dec 2007 13:20:13 -0500
Subject: [antlr-interest] A rule ANTLR 3 doesn't like [Re: ANTLR 3
	diagnostics]
In-Reply-To: <47751A5F.6060803@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
	<47742FB5.3030401@math.purdue.edu>
	<47743502.9090200@math.purdue.edu>
	<EBEE0866-57AB-49F9-842D-C1A279ED5EA7@cs.usfca.edu>
	<47751A5F.6060803@math.purdue.edu>
Message-ID: <47753E5D.30201@math.purdue.edu>


J Chapman Flack wrote:
> That sounds more promising, though I seem to recall trying it yesterday
> and still blowing the stack. I'll try with the newer build.

A new grammar containing only this rule in isolation compiles
without error (and generates believable code). In the original
grammar, the stack still overflows in the DFA builder while
working on this rule.  I suppose I can start copying other
rules over from the original until it blows up again; something
involving callers of the rule, I suppose.

Is there any other technique (after adding -Xwatchconversion)
that might shed some more light?  I'll try -Xdbgconversion
and see what I can make sense of.

What does -Xm do?  Might the converter invoke rules repeatedly?
(Ok, I'll order the book, it probably has more of that information
than I'm finding on the wiki).  Could that pose a problem for
rules where choices depend on parameters and sempreds?

-Chap

> numeric_aggregate[int n, int tt]
>                  @init {
>                    boolean limit = ( 0 != n );
>                  }
>                  : NUMBER
>                    ( options { greedy = true; } :
>                      { (!limit || (--n > 0)) && LA(1) == tt }? ~( SEMI )
>                      NUMBER
>                    )*
>                    { !limit || 0 == n }?
>                  ;
> 


From parrt at cs.usfca.edu  Fri Dec 28 10:30:09 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 10:30:09 -0800
Subject: [antlr-interest] Problem with latest build
In-Reply-To: <EB319CC805146B44B7237B13BC5F0CAC1A0E5737@drsse0102.qimonda.com>
References: <EB319CC805146B44B7237B13BC5F0CAC1A0E5737@drsse0102.qimonda.com>
Message-ID: <5A29704E-37F9-4A7D-9D67-3CE0D391CFB2@cs.usfca.edu>

Please grab

http://www.antlr.org/download/build/antlr-2007-12-28.10.tar.gz

Ter

On Dec 28, 2007, at 2:06 AM, Werner Joerg (QAG PD PT TPE C) wrote:

> Hi all,
>
> Using the latest nightly build I get the following error when  
> running org.antlr.Tool:
>
> ANTLR Parser Generator  Version 3.1b1 (??)  1989-2007
> src/com/qimonda/pd/pt/tpec/JasdapTools/evalGenCombinations/ 
> GetCombinationTreeWalker.g3
> error(100): GetCombinationTreeWalker.g3:118:12: syntax error: antlr:  
> GetCombinationTreeWalker.g3:118:12: unexpected token: )
> error(100): GetCombinationTreeWalker.g3:119:2: syntax error: antlr:  
> GetCombinationTreeWalker.g3:119:2: unexpected token: ;
>
> The offending lines in my grammar seem to be:
>
> key
>        : ^( KEY .)
>        ;
>
> I assume the "." for matching any tree node is the problem. In  
> version 3.0 similar constructs were working fine. Looks like a  
> regression to me. Any comments?
>
> Regards,
>
> J?rg
>
> --
> Dr. J?rg Werner (???)
> Qimonda AG
> Memory Products Division
> QAG PD PT TPE C
> Am Campeon 1-12
> D-85579 Neubiberg
> email: joerg.werner at qimonda.com
> Tel:  +49 89 60088-2231
> Fax:  +49 89 60088-442231
>
> Chairman of the Supervisory Board/Aufsichtsratsvorsitzender: Peter  
> J. Fischl
> Management Board/Vorstand: Kin Wah Loh (Chairman/Vorsitzender), Dr.  
> Michael Majerus, Thomas J. Seifert
> Register Court/Registergericht: M?nchen HRB 152545, Seat/Sitz:  
> M?nchen
>


From parrt at cs.usfca.edu  Fri Dec 28 10:30:45 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 10:30:45 -0800
Subject: [antlr-interest] A rule ANTLR 3 doesn't like [Re: ANTLR 3
	diagnostics]
In-Reply-To: <47753E5D.30201@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
	<47742FB5.3030401@math.purdue.edu>
	<47743502.9090200@math.purdue.edu>
	<EBEE0866-57AB-49F9-842D-C1A279ED5EA7@cs.usfca.edu>
	<47751A5F.6060803@math.purdue.edu> <47753E5D.30201@math.purdue.edu>
Message-ID: <09F953E3-1456-4793-8606-8B7BA2E5295D@cs.usfca.edu>

Hi Chap, can you pass me the latest version of your grammar?  I should  
look at it.
Ter
On Dec 28, 2007, at 10:20 AM, J Chapman Flack wrote:

>
> J Chapman Flack wrote:
>> That sounds more promising, though I seem to recall trying it  
>> yesterday
>> and still blowing the stack. I'll try with the newer build.
>
> A new grammar containing only this rule in isolation compiles
> without error (and generates believable code). In the original
> grammar, the stack still overflows in the DFA builder while
> working on this rule.  I suppose I can start copying other
> rules over from the original until it blows up again; something
> involving callers of the rule, I suppose.
>
> Is there any other technique (after adding -Xwatchconversion)
> that might shed some more light?  I'll try -Xdbgconversion
> and see what I can make sense of.
>
> What does -Xm do?  Might the converter invoke rules repeatedly?
> (Ok, I'll order the book, it probably has more of that information
> than I'm finding on the wiki).  Could that pose a problem for
> rules where choices depend on parameters and sempreds?
>
> -Chap
>
>> numeric_aggregate[int n, int tt]
>>                 @init {
>>                   boolean limit = ( 0 != n );
>>                 }
>>                 : NUMBER
>>                   ( options { greedy = true; } :
>>                     { (!limit || (--n > 0)) && LA(1) == tt }?  
>> ~( SEMI )
>>                     NUMBER
>>                   )*
>>                   { !limit || 0 == n }?
>>                 ;
>


From parrt at cs.usfca.edu  Fri Dec 28 10:32:58 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 10:32:58 -0800
Subject: [antlr-interest] starting to play with tree rewriting now
Message-ID: <A79A7381-1F33-4686-8FC7-FD68AF932E1A@cs.usfca.edu>

hi, in prep for 3.1 release, i'm going to build some examples of tree  
rewriting then do some grammar composition stuff to see what state  
it's in. :)

Ter

From fog at initd.org  Fri Dec 28 10:37:13 2007
From: fog at initd.org (Federico Di Gregorio)
Date: Fri, 28 Dec 2007 19:37:13 +0100
Subject: [antlr-interest] Memory issue while lexer initialization
In-Reply-To: <95DFE5CE-1A59-485A-BDD5-B830FE3902AD@cs.usfca.edu>
References: <154902370712280619h40998ac7h687495796522f92b@mail.gmail.com>
	<95DFE5CE-1A59-485A-BDD5-B830FE3902AD@cs.usfca.edu>
Message-ID: <1198867033.3894.18.camel@mila.office.dinunzioedigregorio>


Il giorno ven, 28/12/2007 alle 10.10 -0800, Terence Parr ha scritto:
> hi. you must have one huge grammar.  Do you have a lexer with a  
> million tokens?

About lexer size, I have a pretty simple (I hope) set of rules that
generates i pretty huge transitions table: about 70000 lines of 16
shorts each, for a total of about 2100 Kb of static data. I understand
2100 Kb is not that much but any suggestion on how to reduce the lexer
size (now my code takes 3x time to cmpile) is welcome.

The grammar is attached to this email.

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
                   I came like Water, and like Wind I go. -- Omar Khayam
-------------- next part --------------
grammar llTurtle;

options {
	language=CSharp;
	output=AST;
	ASTLabelType=CommonTree;
}

tokens {
	BLANK;
	LITERAL;
	COLLECTION;
	STATEMENTS;
	PREDICATEOBJECTS;
}

@parser::namespace { Greengrass.Parser.Turtle }
@lexer::namespace  { Greengrass.Parser.Turtle }

@header {
	using System.Collections;
	using System.Collections.Generic;

	// Disable CS0219 (assigned but never used) and CS0162 (unreachable code)
	// to avoid spurious warnings from Antlr generated code.
	#pragma warning disable 219, 162
}

@members {
	public override string GetErrorMessage(RecognitionException e, string[] tokenNames)
	{
		string msg = base.GetErrorMessage(e, tokenNames);
		throw new ParserException(msg, e.Line, e.CharPositionInLine, e);
	}
	
	public override string GetTokenErrorDisplay(IToken t)
	{
		return t.ToString();
	}
}

/* PARSER */

document : statement* EOF ;

statement
	: directive '.'!
	| triples '.'!
	;

directive
	: prefixDirective
	| baseDirective
	;
	
prefixDirective
	: PREFIX PNAME URIREF -> ^(PREFIX PNAME URIREF)
	;

baseDirective
	: BASE URIREF -> ^(BASE URIREF)
	;
 	
triples
	: subject predicateObjectList -> ^(STATEMENTS subject predicateObjectList)
	;

predicateObjectList
	: verb objectList (';' verb objectList)* ';'? -> ^(PREDICATEOBJECTS verb objectList)+
	;

objectList
	: obj (',' obj)* -> obj+
	;

verb
	: A -> { adaptor.Create(URIREF, "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>") }
	| resource
	;

subject
	: resource
	| blank
	| VARDOLLAR
	| VARQMARK
	;

predicate
	: resource
	| VARDOLLAR
	| VARQMARK
	;
	
obj
	: resource
	| blank
	| literal
	| VARDOLLAR
	| VARQMARK
	;

literal
	: s=quotedString (lang | datatype)? -> ^(LITERAL $s lang? datatype?)
	| INTEGER -> ^(LITERAL INTEGER { adaptor.Create(URIREF, "<http://www.w3.org/2001/XMLSchema#int>") } )
	| DOUBLE  -> ^(LITERAL DOUBLE  { adaptor.Create(URIREF, "<http://www.w3.org/2001/XMLSchema#double>") } )
	| DECIMAL -> ^(LITERAL DECIMAL { adaptor.Create(URIREF, "<http://www.w3.org/2001/XMLSchema#decimal>") } )
	| BOOLEAN -> ^(LITERAL BOOLEAN { adaptor.Create(URIREF, "<http://www.w3.org/2001/XMLSchema#boolean>") } )
	;

lang
	: '@' LANG -> LANG
	;

datatype
	: '^^' URIREF -> URIREF
	;

blank
	: NODEID -> ^(BLANK NODEID)
	| '[]' -> BLANK
	| '[' predicateObjectList ']' -> ^(STATEMENTS BLANK predicateObjectList)
	| collection
	;

collection
	: '(' obj* ')' -> ^(COLLECTION obj*)
	;
	
resource
	: URIREF
	| QNAME
	// FIXME: unfortunately a PNAME is a perfectly valid QNAME and we need this hack.
	| PNAME -> { adaptor.Create(QNAME, $PNAME.Text) }
	;

quotedString
	: STRING
	| LONGSTRING
	;

/* LEXER */

BOOLEAN
	: 'true' | 'false'
	;

INTEGER
	: ('-'|'+')? DIGIT+
	;
	
DOUBLE
	: ('-'|'+')? (DIGIT+ '.' DIGIT* EXPONENT | '.' DIGIT+ EXPONENT | DIGIT+ EXPONENT)
	;

DECIMAL
	: ('-'|'+')? (DIGIT+ '.' DIGIT* | '.' DIGIT+)
	;

A
	: 'a'
	;

NODEID 
	: '_:'! PN_NAME_START PN_NAME*
	;

PNAME
	: (PN_NAME_START PN_NAME*)? ':'
	;

QNAME
	: (PN_NAME_START_UNDERSCORE PN_NAME*)? ':' PN_NAME*
	;

BASE
	: '@base'
	;
	
PREFIX
	: '@prefix'
	;

URIREF
	: '<' ( ~(CONTROL) | '"' | '\\>' | '\\t' | '\\n' | '\\r' | '\\\\' | '\\u' | '\\U' )* '>'
	;

STRING
	: '"' ( ~(CONTROL) | '>' | '\\t' | '\\n' | '\\r' | '\\\\' | '\\"' | '\\u' | '\\U' )* '"'
	;

LONGSTRING
	: '"""' ( ~(CONTROL) | '"' ~'"' | '>' | '\\t' | '\\n' | '\\r' | '\\\\' | '\\"' | '\\u' | '\\U' | '\t' | '\n' | '\r' )* '"""'
	;

LANG
	: ('a'..'z')+ ( '-' ('a'..'z' | '0'..'9')+ )*
	;

VARDOLLAR
	: '$' PN_NAME+
	;
	
VARQMARK
	: '?' PN_NAME+
	;

WS
	: (' ' | '\t' | '\f' | EOL )+ { $channel = HIDDEN; }
	;

COMMENT
	: '#' (~('\n' | '\r'))* EOL { $channel = HIDDEN; }
	;

fragment EOL
	: ('\r'? '\n' | '\r')
	;
	
fragment PN_NAME_START
	: 'A'..'Z' | 'a'..'z'
    | '\u00c0'..'\u00d6' | '\u00d8'..'\u00f6' | '\u00f8'..'\u02ff' | '\u0370'..'\u037d'
    | '\u037f'..'\u1fff' | '\u200c'..'\u200d' | '\u2070'..'\u218f' | '\u2c00'..'\u2fef'
    | '\u3001'..'\ud7ff' | '\uf900'..'\ufdcf' | '\ufdf0'..'\ufffd'
	;

fragment PN_NAME_START_UNDERSCORE
	: PN_NAME_START | '_'
	;

fragment PN_NAME
	: PN_NAME_START_UNDERSCORE | '-' | '0'..'9' | '\u00b7' | '\U0300'..'\U036f' | '\U203f'..'\U2040'
	;

fragment CONTROL
	: '\u0000'..'\u001f' | '"' | '\\' | '>'
	;

fragment DIGIT
	: '0'..'9'
	;

fragment EXPONENT
	: ('e'|'E')('+'|'-')?DIGIT+
	;

From jflack at math.purdue.edu  Fri Dec 28 11:00:16 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 28 Dec 2007 14:00:16 -0500
Subject: [antlr-interest] A rule ANTLR 3 doesn't like [Re: ANTLR 3
	diagnostics]
In-Reply-To: <09F953E3-1456-4793-8606-8B7BA2E5295D@cs.usfca.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
	<47742FB5.3030401@math.purdue.edu>
	<47743502.9090200@math.purdue.edu>
	<EBEE0866-57AB-49F9-842D-C1A279ED5EA7@cs.usfca.edu>
	<47751A5F.6060803@math.purdue.edu> <47753E5D.30201@math.purdue.edu>
	<09F953E3-1456-4793-8606-8B7BA2E5295D@cs.usfca.edu>
Message-ID: <477547C0.6070508@math.purdue.edu>


Terence Parr wrote:
> Hi Chap, can you pass me the latest version of your grammar?  I should 
> look at it.

Tell you what - if I give up after trying a bit longer to find a
pared-down version that still has the problem, then I may take you
up on that and send the whole thing.  It's for a language that's
never been documented except for its historical sparsely-commented
parser hand-coded in C by someone who shouldn't have ... and hacked on
for years (hmm, how many criteria on the "ugly parser project"
list did I just hit?) so I bet you're NOT really looking forward
to being hit with the whole thing. ;)

-Chap

From harald_m_mueller at gmx.de  Fri Dec 28 12:22:09 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Fri, 28 Dec 2007 21:22:09 +0100
Subject: [antlr-interest] new build
In-Reply-To: <4775388F.7050900@gmx.de>
Message-ID: <20071228202200.EC54B11EBE8@www.antlr.org>

The problem is that you probably did not work with the resulting lists very
much: The constructors of those 4 classes with a single object parameter
capture all wrongly generated code ...
I'll prep up my grammars and send them to you in a few hours.
Best regards
Harald

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Johannes Luber
> Sent: Friday, December 28, 2007 6:55 PM
> Cc: 'Antlr List'
> Subject: Re: [antlr-interest] new build
> 
> Harald M. M?ller schrieb:
> > Re the C#2.0 runtime, there are a couple more errors in it 
> (although 
> > they are all essentially the same error - using List<T> 
> instead of IList).
> > There are 4 files which need to be repaired - I have added the 
> > repaired versions as attachments.
> > (I probably should send you also the grammar with which I found the 
> > errors - but it is currently in a chaotic/experimental 
> state ... maybe 
> > I find time for that in the next days).
> 
> Oops. That was my mistake. I'd like to know why it didn't 
> work because my own grammar had no problem with the missing I-s.
> 
> Johannes
> 


From jflack at math.purdue.edu  Fri Dec 28 12:44:57 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 28 Dec 2007 15:44:57 -0500
Subject: [antlr-interest] character literal bugs in 2007-12-27.12
In-Reply-To: <mailman.1.1198872001.8753.antlr-interest@antlr.org>
References: <mailman.1.1198872001.8753.antlr-interest@antlr.org>
Message-ID: <47756049.10405@math.purdue.edu>


My lexer rule:

WS : ( ' '
      | '\f'
      | '\n'
      | '\r'
      | '\t'
      | '\013' // \v
      )
      { $channel = HIDDEN; }
    ;

produces in Java:

             ...
             case '\u0000':
                 {
                 alt1=6;
                 }
                 break;
             ...
             case 6 :
                 ... match("\013"); ...

That is, the \013 literal is passed correctly to match(),
but in the *decision* it seems to have been treated as a
\0 escape followed by a 1 and a 3. Also, the comments generated
into the code refer to '\\013' which would be yet another
different string.

-Chap

From parrt at cs.usfca.edu  Fri Dec 28 13:31:36 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 13:31:36 -0800
Subject: [antlr-interest] proposal: new properties or Token methods
Message-ID: <E9D1485C-058C-4753-B974-6702CCB87C93@cs.usfca.edu>

hi. I find myself doing Integer.valueOf($label.text) a lot.  Integer  
values are so common in languages that perhaps we should define  
$label.int and maybe label.float?  Or, is it simpler to just define

	public int toInt();
	public float toFloat();
	public double toDouble();

in Token interface?  I guess I'll try that first.

Ter

From jaluber at gmx.de  Fri Dec 28 13:37:09 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 28 Dec 2007 22:37:09 +0100
Subject: [antlr-interest] proposal: new properties or Token methods
In-Reply-To: <E9D1485C-058C-4753-B974-6702CCB87C93@cs.usfca.edu>
References: <E9D1485C-058C-4753-B974-6702CCB87C93@cs.usfca.edu>
Message-ID: <47756C85.5060204@gmx.de>

Terence Parr schrieb:
> hi. I find myself doing Integer.valueOf($label.text) a lot.  Integer
> values are so common in languages that perhaps we should define
> $label.int and maybe label.float?  Or, is it simpler to just define
> 
>     public int toInt();
>     public float toFloat();
>     public double toDouble();
> 
> in Token interface?  I guess I'll try that first.

Adding properties to labels seems to be less language-dependent. So I'd
prefer this approach. BTW, what is supposed to happen, when the label
contains "abc" instead?

Johannes

From parrt at cs.usfca.edu  Fri Dec 28 13:46:57 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 28 Dec 2007 13:46:57 -0800
Subject: [antlr-interest] proposal: new properties or Token methods
In-Reply-To: <47756C85.5060204@gmx.de>
References: <E9D1485C-058C-4753-B974-6702CCB87C93@cs.usfca.edu>
	<47756C85.5060204@gmx.de>
Message-ID: <86E11011-40B8-4E5B-AF1A-65CCA140DA98@cs.usfca.edu>


On Dec 28, 2007, at 1:37 PM, Johannes Luber wrote:

> Terence Parr schrieb:
>> hi. I find myself doing Integer.valueOf($label.text) a lot.  Integer
>> values are so common in languages that perhaps we should define
>> $label.int and maybe label.float?  Or, is it simpler to just define
>>
>>    public int toInt();
>>    public float toFloat();
>>    public double toDouble();
>>
>> in Token interface?  I guess I'll try that first.
>
> Adding properties to labels seems to be less language-dependent.

Agreed but I don't want to add lots of more templates...well, let's  
start with just int:

tokenLabelPropertyRef_int(scope,attr) ::= "(<scope>!=null? 
Integer.valueOf(<scope>.getText()):0)"
lexerRuleLabelPropertyRef_int(scope,attr) ::=
     "(<scope>!=null?Integer.valueOf(<scope>.getText()):0)"
lexerRulePropertyRef_int(scope,attr) ::=  
"Integer.valueOf(<scope>.getText())"


> So I'd
> prefer this approach. BTW, what is supposed to happen, when the label
> contains "abc" instead?

Whatever the native implementation says happens when converting "abc"  
to int.

Ok, let's try this new .int property.  Seems very useful.

Ter

From jflack at math.purdue.edu  Fri Dec 28 14:14:32 2007
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Fri, 28 Dec 2007 17:14:32 -0500
Subject: [antlr-interest] RFE: bring back (at least the global) testLiterals
	option!
In-Reply-To: <mailman.1.1198872001.8753.antlr-interest@antlr.org>
References: <mailman.1.1198872001.8753.antlr-interest@antlr.org>
Message-ID: <47757548.9030502@math.purdue.edu>


Hi,

I'm thinking of using the "implicit strategy" for keyword lexing
described in
http://www.antlr.org/wiki/pages/viewpage.action?pageId=1802308
because it closely matches how the reference implementation of
this language does it, and it was very easy in ANTLR 2.7.7 using

tokens {
   KWD1 = 'kwd1';
   KWD2 = 'kwd2';
   ...
   KWD252 = 'kwd252';
}

with global options { testLiterals=false; caseSensitiveLiterals=false; }

and rule options { testLiterals=true; } on the rule for identifiers.
The result was clear, correct, and compact.

To do the same thing in ANTLR 3, I have to supply my own
CheckKeywordsTable() that implements the intended matching rules,
and use it explicitly in the identifier rule.  That's no big deal.

What's unpleasant is that ANTLR hasn't preserved my nice, clear
tokens { } block in any form I can use for the purpose. An
array of the keyword strings would offer a way for Java code
to recover and use them. Instead, they are spread out one each in
a pile of mKWD1() ... mKWD252() methods, which aren't even
useful because they call match() on the kwd strings directly
with no chance to apply custom matching rules, and an mTokens()
method is created with a very large predictor DFA that's equally
useless for the same reason. (I suppose I might recover the
strings out of the mKWD methods using reflection and a subclass
that overrides match() ... but that's the sort of thing one only
does to make a point. ;)

I guess in order to avoid creating the useless mKWD...() methods
and huge DFA, I would need a tokens { } block that gives only the
bare KWD... names, and leaves off the = 'kwd...' strings. Then,
to initialize my CheckKeywordsTable, I'll need somewhere to add
252 *more* lines that repeat (without typos) the token names from
the tokens { } block, and associate them with the corresponding
strings. Sure, it's no big deal to generate that with vi commands
from my original 2.7.7 tokens block. But that only confirms that
this is an expansion from 250 to 500 source lines while adding
no new information, but creating a new relationship between
two source tables that now need to be edited in sync. What I like
about ANTLR is that it's a really clear, concise way to describe
a grammar--but this has made it less so.

I can see how the default behavior would be good in default
situations, but for situations like this it might be really
nice to bring back the testLiterals option, just as a global-only
option.  Setting testLiterals=false globally would simply suppress
all the auto-generated mKWD() methods and the big honkin' DFA,
and just generate a nice array of keywords that a custom
CheckKeywordsTable method can be initialized from. That would
allow the grammar to be about as clear and compact as it was before.

There's my suggestion, and I won't even charge the $0.02.

-Chap

From dave at badgers-in-foil.co.uk  Fri Dec 28 16:20:22 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sat, 29 Dec 2007 00:20:22 +0000
Subject: [antlr-interest] Development of an XQuery parser with
	full-text	extensions, project report
In-Reply-To: <1198803767.47744b37c97bc@clients.latnet.lv>
References: <47714AA1.3030808@gmx.de>
	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>
	<47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
	<1198767616.4773be00ec690@clients.latnet.lv>
	<1198769430.4773c5167971e@clients.latnet.lv>
	<ebc876d70712270805m222e8aa0l520b3fbb76b4c79a@mail.gmail.com>
	<1198803767.47744b37c97bc@clients.latnet.lv>
Message-ID: <20071229002005.GA26120@badgers-in-foil.co.uk>

On Fri, Dec 28, 2007 at 03:02:47AM +0200, Guntis Ozols wrote:
> Two things polluting my grammar file which i'd like to factor out are:
> - package declarations (should be possible to specify as command line opt.)
[...]

It would be nice if ANTLR understood packages.  It should be something
in the grammar though, not a command-line option.  This knowledge could
allow ANTLR to automatically find pkg/T.tokens when tokenVocab=pgk.T is
used, for instance.

All a bit Java specific, of course.


ta,
dave

-- 
http://david.holroyd.me.uk/

From jaluber at gmx.de  Fri Dec 28 16:25:01 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 29 Dec 2007 01:25:01 +0100
Subject: [antlr-interest] Development of an XQuery parser with	full-text
 extensions, project report
In-Reply-To: <20071229002005.GA26120@badgers-in-foil.co.uk>
References: <47714AA1.3030808@gmx.de>	<917665F6-0DDA-4898-8CD2-337BA801FCCD@cs.usfca.edu>	<47717552.5000408@gmx.de>	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>	<1198762334.4773a95e4e85d@clients.latnet.lv>	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>	<1198767616.4773be00ec690@clients.latnet.lv>	<1198769430.4773c5167971e@clients.latnet.lv>	<ebc876d70712270805m222e8aa0l520b3fbb76b4c79a@mail.gmail.com>	<1198803767.47744b37c97bc@clients.latnet.lv>
	<20071229002005.GA26120@badgers-in-foil.co.uk>
Message-ID: <477593DD.1060805@gmx.de>

David Holroyd schrieb:
> On Fri, Dec 28, 2007 at 03:02:47AM +0200, Guntis Ozols wrote:
>> Two things polluting my grammar file which i'd like to factor out are:
>> - package declarations (should be possible to specify as command line opt.)
> [...]
> 
> It would be nice if ANTLR understood packages.  It should be something
> in the grammar though, not a command-line option.  This knowledge could
> allow ANTLR to automatically find pkg/T.tokens when tokenVocab=pgk.T is
> used, for instance.
> 
> All a bit Java specific, of course.

I'm sure, that there are ways to map packaging to other systems, like
namespaces in C#.

Johannes

From r.mark.volkmann at gmail.com  Sat Dec 29 03:33:08 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sat, 29 Dec 2007 05:33:08 -0600
Subject: [antlr-interest] splitting lexer and parser grammars
Message-ID: <f0fcc6820712290333m42b96da6mb408f06277ac678e@mail.gmail.com>

If I put my lexer rules in a separate grammar file from my parser
rules that create an AST, does that mean I can't use ANTLRWorks to
test that the parser grammar is creating correct ASTs? I can't figure
out a way to tell it that it needs to process both grammar files.

-- 
R. Mark Volkmann
Object Computing, Inc.

From jaluber at gmx.de  Sat Dec 29 05:21:50 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 29 Dec 2007 14:21:50 +0100
Subject: [antlr-interest] splitting lexer and parser grammars
In-Reply-To: <f0fcc6820712290333m42b96da6mb408f06277ac678e@mail.gmail.com>
References: <f0fcc6820712290333m42b96da6mb408f06277ac678e@mail.gmail.com>
Message-ID: <477649EE.4050506@gmx.de>

Mark Volkmann schrieb:
> If I put my lexer rules in a separate grammar file from my parser
> rules that create an AST, does that mean I can't use ANTLRWorks to
> test that the parser grammar is creating correct ASTs? I can't figure
> out a way to tell it that it needs to process both grammar files.
> 

Did you use

options {
tokenVocab=LexerGrammar;
}

Johannes

From dafusi at gmail.com  Sat Dec 29 06:19:10 2007
From: dafusi at gmail.com (daniele fusi)
Date: Sat, 29 Dec 2007 15:19:10 +0100
Subject: [antlr-interest] grammar newbie: "escaping" tokens
Message-ID: <692f84d30712290619y66b97e80j712e77c54b527585@mail.gmail.com>

Hi list, sorry for the naive question but I'm just beginning with this
wonderful tool and experimenting a bit. and I cannot find simple
examples in ANTL3. I've created a simple (tree) grammar representing a
dummy query language, where terms are bound with boolean operators (&
| ! for and, or, not) and grouped with parentheses (). Also, a term
can include a single wildcard * or ? at its beginning or end, or be
followed by a tilde plus a floating point number (indicating a fuzzy
match treshold). Until then I (think so) managed to define this simple
grammar, but now I'd like to add another option, i.e. using a full
regular expression as a query term, enclosed in some delimiter
character (say #). So, I'd like to have queries like:

term1 & (term2 | #regexforterm3#)

of course, regexes can include characters I have reserved for other
purposes in this grammar, like parentheses or the like. I'd simply
want to tell the parser that whatever it finds in #...# should be
treated as a term, so that it does not misinterpret characters like
()?* etc. I've tried to define a new token like

'#'!(LETTER|REGEXMETA)+'#'!

but this does not seem to work in every case. Here's my sample grammar
definition, could anyone give a hint?
Thanx!

========================================
grammar QueryTree;
...
query	:	expr EOF;
expr	:	andExpr (OR^ andExpr)*;
andExpr	:	notExpr (AND^ notExpr)*;
notExpr	:	NOT^? term;
term	:	TOKEN
	|	'('!expr')'!;

// LEXICALS
AND	:	'&';
OR	:	'|';
NOT	:	'!';
WS	:	(' '|'\t'|'\n'|'\r')+ {$channel=HIDDEN;};
TOKEN	:	LETTER+
	|	'#'!(LETTER|REGEXMETA)+'#'!
	| 	LETTER+ WILDCARD
	|	WILDCARD LETTER+
	|	LETTER+ FUZZY
;
fragment
LETTER	:	'a'..'z'|'A'..'Z'|'\''|
		'\u0391'..'\u03A9'|'\u03B1'..'\u03C9'|
		'\u03DC';
fragment
WILDCARD:	'*'|'?';
fragment
DIGIT	:	'0'..'9';
fragment
FUZZY	:	'~'(DIGIT+('.'DIGIT+)?)?;
fragment
REGEXMETA
	:	('['|']'|'\\'|'^' | '$' | '.' | '|' | '?' | '*' | '+' | '(' | ')');
========================================

From john at jacelridge.com  Sat Dec 29 12:07:01 2007
From: john at jacelridge.com (John Ridgway)
Date: Sat, 29 Dec 2007 15:07:01 -0500
Subject: [antlr-interest] java v3 grammar
In-Reply-To: <434D7417-AD0C-4D21-A8A5-96FFFF36ADBD@jacelridge.com>
References: <e28d32c0712270831m2aca4aa0r3016e8b57fefe67b@mail.gmail.com>
	<434D7417-AD0C-4D21-A8A5-96FFFF36ADBD@jacelridge.com>
Message-ID: <329DF292-363D-4417-B262-6C4C57C1FCEA@jacelridge.com>

The version of the grammar that I sent you may have been broken.  I'm  
attaching a better version.

Peace
- John

-------------- next part --------------
A non-text attachment was scrubbed...
Name: JavaAST.g
Type: application/octet-stream
Size: 40372 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071229/53bd139c/attachment-0001.obj 
-------------- next part --------------




On Dec 27, 2007, at 11:43 AM, John Ridgway wrote:

> I have been working on one for a while, and it is almost ready.  I  
> believe that it parses any syntactically correct Java compilation  
> unit (and a few that are not correct), and it generates an AST.  I  
> am going to continue to improve it, but you are welcome to it in its  
> current state if you want it.
>
> <JavaAST.g>
>
> Peace
> - John
>
>
>
> On Dec 27, 2007, at 11:31 AM, James Hamilton wrote:
>
>> Hi,
>>
>> Does anyone have a v3 java1.5 grammar which outputs an AST.
>>
>> I've been using the one on the antlr website but am having trouble  
>> adding trees actions into it.
>>
>> Thanks,
>>
>> James
>


From harald_m_mueller at gmx.de  Sat Dec 29 14:16:13 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sat, 29 Dec 2007 23:16:13 +0100
Subject: [antlr-interest] What do . (period) and Tokens mean in tree
	grammars?
Message-ID: <20071229221615.311EF11EB51@www.antlr.org>

Sorry that I ask - but I did not find it on the Wiki and not in the ANTLR
book: What do . and Tokens mean in tree grammars?

AFAIK, . means "any complete subtree." - although this seems not to work in
some current builds, if I understood some email of yesterday correctly?

Question number two:
Does a single Token also match a complete tree with this token at the root,
or only a "childless tree" (i.e. the token as a tree node alone)?

Question number three:
What sort of lookahead is used over . ? For example, would the following
work - assume here that the subtrees can be arbitrarily large subconditions
(as is usual in expression trees):

condition : ^(AND . ^(NOT .))	-> ...rewrite1...
	| ^(AND . .)		-> ...rewrite2...
	;

The intention of this is to rewrite an AND tree which has as second child a
tree with a NOT root to rewrite1; whereas all other trees are supposed to be
rewritten as rewrite2.
If ANTLR tree parsing works the way I assume it - namely the whole tree is
flattened to a node sequence, on which "one-dimensional" parsing techniques
(even LL(*)) are applied, then the NOT will be "too far" away even for an
LL(*) analysis, because there will be recursively nested expressions on the
way between the AND and the NOT. However, if ANTLR goes for real
"two-dimensional" parsing, or does some lookahead over arbitrarily large
subtrees (to the readily available "later" children!) - which I would call
"1.5-dimensional lookahead computation/parsing", then the above two patterns
could be disambiguated.

Thanks
Harald
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071229/470767a3/attachment.html 

From dave at badgers-in-foil.co.uk  Sat Dec 29 14:41:18 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sat, 29 Dec 2007 22:41:18 +0000
Subject: [antlr-interest] Development of an XQuery parser with	full-text
	extensions, project report
In-Reply-To: <477593DD.1060805@gmx.de>
References: <47717552.5000408@gmx.de>
	<D7319449-CF0D-4B4E-8AB2-652A514056A3@cs.usfca.edu>
	<1198762334.4773a95e4e85d@clients.latnet.lv>
	<ebc876d70712270602ha57cc1dne75e18dace04f1ea@mail.gmail.com>
	<1198767616.4773be00ec690@clients.latnet.lv>
	<1198769430.4773c5167971e@clients.latnet.lv>
	<ebc876d70712270805m222e8aa0l520b3fbb76b4c79a@mail.gmail.com>
	<1198803767.47744b37c97bc@clients.latnet.lv>
	<20071229002005.GA26120@badgers-in-foil.co.uk>
	<477593DD.1060805@gmx.de>
Message-ID: <20071229224118.GE12420@badgers-in-foil.co.uk>

On Sat, Dec 29, 2007 at 01:25:01AM +0100, Johannes Luber wrote:
> David Holroyd schrieb:
> > On Fri, Dec 28, 2007 at 03:02:47AM +0200, Guntis Ozols wrote:
> >> Two things polluting my grammar file which i'd like to factor out are:
> >> - package declarations (should be possible to specify as command line opt.)
> > [...]
> > 
> > It would be nice if ANTLR understood packages.  It should be something
> > in the grammar though, not a command-line option.  This knowledge could
> > allow ANTLR to automatically find pkg/T.tokens when tokenVocab=pgk.T is
> > used, for instance.
> > 
> > All a bit Java specific, of course.
> 
> I'm sure, that there are ways to map packaging to other systems, like
> namespaces in C#.

Oh yes, and of course ANTLR should try to tread some path that sits
nicely with the respective concepts in different target languages.

I just meant that the requirement for such a feature, just in order to
make things work reasonably, is specific to Java, because Java ties
package structure to folder structure in a way that (I understand) C#
doesn't with namespaces.

It would be nice for ANTLR to 'just know' what folder files should be
generated in (for the Java target), rather than needing to be told
explicitly so as to match the package structure.


ta,
dave

-- 
http://david.holroyd.me.uk/

From cory.isaacson at compuflex.com  Sat Dec 29 17:56:02 2007
From: cory.isaacson at compuflex.com (Cory Isaacson)
Date: Sat, 29 Dec 2007 18:56:02 -0700
Subject: [antlr-interest] Get Values after parse
Message-ID: <008a01c84a87$2385a2a0$6a90e7e0$@isaacson@compuflex.com>

I am new to ANTLR, and have a simple question. I need to parse a simple SQL
SELECT statement, and can see how to create the grammar for the lexer and
parser. I need to then get specific values from the SELECT statement, such
as table name(s), column name(s), the WHERE clause, etc.

 

To actually get the values, do I need to output an AST tree? If so, what is
the simplest way to access specific node/values? 

 

If you can suggest examples to look at and/or the best API to use that would
be great.

 

Thanks in advance for any assistance.

 

Cory

 

 

 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071229/cf98272f/attachment.html 

From whitis at freelabs.com  Sat Dec 29 21:44:48 2007
From: whitis at freelabs.com (Mark Whitis)
Date: Sun, 30 Dec 2007 00:44:48 -0500 (EST)
Subject: [antlr-interest] bug: bison/yacc converter won't parse
Message-ID: <Pine.LNX.4.64.0712300044220.8143@localhost.localdomain>

I tried to build the bison/yacc to antlr converter but antlr chokes
on the grammar files even though I am using the version of antlr
it was supposedly written for.   The distribution contains
no makefile, just ambiguous instructions to run antlr on the
two grammars and then compile with Main.java.

wget http://www.antlr.org/share/1151380794488/bison.zip
unzip bison.zip
cd bison

runantlr bison.g
Running java antlr.Tool $* with /usr/share/java/antlr.jar appended to the 
CLASSPATH variable
ANTLR Parser Generator   Version 2.7.6 (20071129)   1989-2005
bison.g:191:17: rule classDef trapped:
bison.g:191:17: unexpected token: ^
error: aborting grammar 'BisonParser' due to errors
Exiting due to errors.

runantlr BisonParserTree.g
Running java antlr.Tool $* with /usr/share/java/antlr.jar appended to the 
CLASSPATH variable
ANTLR Parser Generator   Version 2.7.6 (20071129)   1989-2005
BisonParserTree.g:42:13: Treewalkers only support k=1
panic: Cannot find importVocab file 'BisonTokenTypes.txt'



From adam.rpconnelly at googlemail.com  Sat Dec 29 23:34:35 2007
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Sun, 30 Dec 2007 07:34:35 +0000
Subject: [antlr-interest] Generated code causes InvalidCastException
Message-ID: <b9a39b060712292334y7017db74q46eb1c43aca095cc@mail.gmail.com>

Hi,

I'm trying to write a simple language to use for code generation.  So far
I've got a working recogniser, and am working on a tree parser.  My parser
grammar simply builds an AST and doesn't have any actions - I was going to
do the work in the tree parser.  The problem I'm having is that I have a
rule as follows:

project:    ^(PROJECT ID template+) { Console.WriteLine("project " +
$ID.text + " {"); }
    ;

PROJECT and ID are tokens from my parser grammar.  The grammar generates
fine, but when I try to use the tree parser to parse an AST created by my
parser, I get an InvalidCastException which says that it can't cast a
CommonTree to a CommonToken.  The offending line is in project() and is as
follows:

ID1 = (CommonToken)input.LT(1);

I'm using the runtime from the Antlr 3.0.1 Source Distribution and the C#
target, and I created and generated both my parsers using ANTLRWorks 1.1.5.

Any help would be appreciated.

Cheers,

Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071230/1647a28e/attachment.html 

From whitis at freelabs.com  Sun Dec 30 01:08:27 2007
From: whitis at freelabs.com (Mark Whitis)
Date: Sun, 30 Dec 2007 04:08:27 -0500 (EST)
Subject: [antlr-interest] nested parsing (BSDL)
Message-ID: <Pine.LNX.4.64.0712300107430.8143@localhost.localdomain>

I am trying to write a parser BSDL, which is a clunky language for
defining JTAG boundary scan information for an integrated circuit.
It is clunky because even though its designers apparently had better
ideas, design by committe dictated that it be "based on an existing
language" which turned out to be VHDL.   Instead of extending
the needed subset of VHDL, they stuffed a complex grammar into
strings.

A yacc/lex parser for outdated version 0.0 of the language is
here:   http://www.vhdl.org/vug_bbs/bsdl.parser
Part 5 of that message, also contains a sample file (search for the
third occurence of "8374".

Here is another sample file, that is cleaner than some:
http://www.standardics.nxp.com/support/documents/microcontrollers/txt/lpc2468fbd208.bsd
But the important subsets of the examples is excerpted below.

The problem is that the bulk of the structure of the language is
hidden inside strings.   Worse, the strings are broken at random
locations and concatenated with "&".

I have excerpted four of the important strings from the first so
you can see the problem:

constant DW_PACKAGE:PIN_MAP_STRING:="CLK:1, Q:(2,3,4,5,7,8,9,10), " &
           "D:(23,22,21,20,19,17,16,15),"  &
           "GND:6, VCC:18, OC_NEG:24, TDO:11, TMS:12, TCK:13, TDI:14";

attribute REGISTER_ACCESS of ttl74bct8374 : entity is
        "BOUNDARY (READBN, READBT, CELLTST),"   &
        "BYPASS (TOPHIP, SETBYP, RUNT, TRIBYP),"   &
        "BCR[2] (SCANCN, SCANCT)";   -- 2-bit Boundary Control Register


attribute INSTRUCTION_OPCODE of ttl74bct8374 : entity is
        "BYPASS (11111111, 10001000, 00000101, 10000100, 00000001),"   &
        "EXTEST (00000000, 10000000),"  &
        "SAMPLE (00000010, 10000010),"  &
        "INTEST (00000011, 10000011),"  &
        "TRIBYP (00000110, 10000110),"  &     -- Boundary Hi-Z
        "SETBYP (00000111, 10000111),"  &     -- Boundary 1/0
        "RUNT   (00001001, 10001001),"  &     -- Boundary run test
        "READBN (00001010, 10001010),"  &     -- Boundary read normal
        "READBT (00001011, 10001011),"  &     -- Boundary read test
        "CELLTST(00001100, 10001100),"  &     -- Boundary selftest normal
        "TOPHIP (00001101, 10001101),"  &     -- Boundary toggle out test
        "SCANCN (00001110, 10001110),"  &     -- BCR Scan normal
        "SCANCT (00001111, 10001111)";        -- BCR Scan test

attribute BOUNDARY_REGISTER of ttl74bct8374 : entity is
       -- num cell  port   function safe [ccell disval rslt]
         "17 (BC_1, CLK,    input,   X),"  &
         "16 (BC_1, OC_NEG, input,   X),"  &  -- Merged Input/Control
         "16 (BC_1, *,      control, 1),"  &  -- Merged Input/Control
         "15 (BC_1, D(1),   input,   X),"  &
         "14 (BC_1, D(2),   input,   X),"  &
         "13 (BC_1, D(3),   input,   X),"  &
         "12 (BC_1, D(4),   input,   X),"  &
         "11 (BC_1, D(5),   input,   X),"  &
         "10 (BC_1, D(6),   input,   X),"  &
         "9  (BC_1, D(7),   input,   X),"  &
         "8  (BC_1, D(8),   input,   X),"  &
         "7  (BC_1, Q(1),   output3, X,  16, 1, Z)," &  -- cell 16 @ 1 -> 
Hi-Z.
         "6  (BC_1, Q(2),   output3, X,  16, 1, Z)," &
         "5  (BC_1, Q(3),   output3, X,  16, 1, Z)," &
         "4  (BC_1, Q(4),   output3, X,  16, 1, Z)," &
         "3  (BC_1, Q(5),   output3, X,  16, 1, Z)," &
         "2  (BC_1, Q(6),   output3, X,  16, 1, Z)," &
         "1  (BC_1, Q(7),   output3, X,  16, 1, Z)," &
         "0  (BC_1, Q(8),   output3, X,  16, 1, Z)";

The yacc/lex implementation only calls yyparse() once.   It utilizes
a trick where it changes the getc() function used by the lexar
in midstream to splice the concatenated strings into the input.

Now, there are several possible ways of handling this:
   - Call a separate parser on the contents of each complex string.
     This will require at least 5 separate parsers and would
     generate 5 seperate ASTs, so it doesn't seem like a very
     elegant solution.
   - perform some sort of getc() substitution as the yacc/lex
     implementation did
   - Use some sort of replace operator.
     Antlr has, for example:
       ( blah )?
     which means ( blah ) is optional.   Is there something similar
     like
       ( blah )magic
     which means:
       - discard ( blah )
       - insert the modified version of blah into the input stream
         as if it occurred in the original text here.
     Or, more likely, something of the form
        ( blah ) {
           newstring=concatenate(...);
           discard();
           insert_here(newstring);
        }
It appears that the inner and outer grammars are not incompatable.

It also isn't clear to me from the documenation what the best
way to concatenate strings is.  I could not see that that was
handled in the ansi C

My current definition of a string (normal or structured) is:
STRING_LITERAL: ('"' ~('"')* '"' ) ('&' ('"' ~('"')* '"' ) )* ;
While "foo""bar" is a valid string in VHDL, it isn't in BSDL
so that isn't a problem.

generic_parameter: 'generic' '(' 'PHYSICAL_PIN_MAP' ':' 'string' ':=' 
STRING_LITERAL ')' ';';

which would probably get rewritten as something like:
generic_parameter: 'generic' '(' 'PHYSICAL_PIN_MAP' ':' 'string' ':='
(STRING_LITERAL){ fixme() }  ')' ';';
where fixme() is whatever performs the concatenation and reinsertion.

Fortunately, the BSDL subset of VHDL does not allow expressions other
than the concatenation of constant strings.

It appears. from the "How do I strip quotes?" FAQ entry  that in java, 
setText() and getText() might be part of the solution, but these
do not appear to be documented and probably do not cause reparsing.

A VHDL grammar is here:
http://www.antlr.org/grammar/1086696923011/vhdlams/index.html

Antlr supports rewrite rules but those seem to be at the AST level
and don't appear to result in reparsing.

BTW, my target language will be C for portability (this will be
a library).   It does not even handle litteral string concatenation, this
is left to the constant expression handling.

Of course, it would be better if this were possible to do directly in the
antlr grammar itself.   Tricks played from code fragments would be
invisable to tools like antlrworks.

It seems that there may be many languages where something similar is
needed.   For example,
    <date value="1999-03-02">
    </date>
might need to parse the date string.

For the general case, it is also better if this is done in such a way
that it doesn't matter if the subordinate grammar is compatable with
the parrent grammar.   To do this, you would probably specify a rule from
which to start parsing and might need to specify a different lexical
rule scope.   lexrules "main" { ... }, lexrules "subordinate" { ... }.

I am using antlr 2.7.6 (the latest version with debian package) but if
v3 handles this better, it would warrant an upgrade.


From harald_m_mueller at gmx.de  Sun Dec 30 02:07:07 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sun, 30 Dec 2007 11:07:07 +0100
Subject: [antlr-interest] nested parsing (BSDL)
In-Reply-To: <Pine.LNX.4.64.0712300107430.8143@localhost.localdomain>
Message-ID: <20071230100708.9CD2511ECA2@www.antlr.org>

I admit I only scanned your email: But the "textbook approach", in my
opinion would be the following:

1. Have a VHDL parser, which accepts strings simply as strings.
2. Do an AST rewrite, where you do "constant folding", i.e. you compute
expressions that are made up only of constants. This will at least
concatenate the &-separated strings.
3. Do another AST rewrite where you interpret the strings by calling another
lexer+parser on them, return an AST from them and put that AST into the
already existing AST structure.

Another possibility would be to try to define a "LONG_STRING" symbol in the
VHDL lexer, which allows string constants with & and comments to be passed
to the lexer as a simple string; thus, you could get rid of stage 2. above;
and maybe it is then possible to call the nested parsers of step 3.
immediately while parsing, so that you end up with a 1-pass machine (but I
would definitely keep the multiple grammars apart).
This possibility will not allow constructs with parentheses like

constant DW_PACKAGE:PIN_MAP_STRING:="CLK:1, Q:(2,3,4,5,7,8,9,10), " &
           ( "D:(23,22,21,20,19,17,16,15),"  &
             ( "GND:6, VCC:18, OC_NEG:24, TDO:11, TMS:12, TCK:13, TDI:14" )
           );

which might be allowed in the syntax of VHDL. Also, with constant folding
you could maybe tackle beasts like

   constant B0 = "00000000";
   constant B1 = "00000001";
   constant B2 = "00000010";
   constant B3 = "00000011";
   ...
   constant T0 = "10000000";
   constant T1 = "10000001";
   ...

   attribute INSTRUCTION_OPCODE of ttl74bct8374 : entity is
        "BYPASS (11111111, 10001000, 00000101, 10000100, 00000001),"   &
        "EXTEST (" & B0 & ", " & T0 & "," &
        "SAMPLE (" & B2 & ", " & T2 & "," &
   ...

or something like that where one starts to use constants in the "nested
program."

When I find a little time, I might look once more into this ...


From jaluber at gmx.de  Sun Dec 30 07:39:30 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 30 Dec 2007 16:39:30 +0100
Subject: [antlr-interest] Generated code causes InvalidCastException
In-Reply-To: <b9a39b060712292334y7017db74q46eb1c43aca095cc@mail.gmail.com>
References: <b9a39b060712292334y7017db74q46eb1c43aca095cc@mail.gmail.com>
Message-ID: <4777BBB2.9060209@gmx.de>

Adam Connelly schrieb:
> Hi,
> 
> I'm trying to write a simple language to use for code generation.  So
> far I've got a working recogniser, and am working on a tree parser.  My
> parser grammar simply builds an AST and doesn't have any actions - I was
> going to do the work in the tree parser.  The problem I'm having is that
> I have a rule as follows:
> 
> project:    ^(PROJECT ID template+) { Console.WriteLine("project " +
> $ID.text + " {"); }
>     ;
> 
> PROJECT and ID are tokens from my parser grammar.  The grammar generates
> fine, but when I try to use the tree parser to parse an AST created by
> my parser, I get an InvalidCastException which says that it can't cast a
> CommonTree to a CommonToken.  The offending line is in project() and is
> as follows:
> 
> ID1 = (CommonToken)input.LT(1);
> 
> I'm using the runtime from the Antlr 3.0.1 Source Distribution and the
> C# target, and I created and generated both my parsers using ANTLRWorks
> 1.1.5.
> 
> Any help would be appreciated.

Did you add to the options in the tree grammar "ASTLabelType=CommonTree;"?

Johannes

From nward at resqsoft.com  Sun Dec 30 10:01:41 2007
From: nward at resqsoft.com (Nathan Ward)
Date: Sun, 30 Dec 2007 13:01:41 -0500
Subject: [antlr-interest] StringTemplate/MVC design issue
Message-ID: <004401c84b0e$09044800$6500a8c0@nwardlt>

The separation-of-concern that are enforced by StingTemplate makes a lot of
sense, but I have a case where what should be the responsibility of the
model vs the view is not clear to me. My gut feeling is that an additional
construct should be provided by StringTemplate (i.e. the view).

I've inherited code that uses ANTLR 2.0 and StringTemplate 3.0 that uses the
visitor pattern instead of a tree walker to convert PL/SQL to Java. There
are several cases where I need to convert a name that I find in the PL/SQL
code to multiple statements in Java where the first letter is sometimes
uppercase and sometimes lowercase in order to follow Java naming
conventions. For example, a PL/SQL package named DK_PSQL3400 will be
converted to a Java class named DkPsql3400Services. However, other java
classes for other packages that have calls to stored procedures in this
package will have an instance of this class named "dkPsql3400Services". 

In terms of StringTemplate and MVC pattern, should the model, view, or
controller be responsible for ensuring that DK_PSQL3400 is converted to
DkPsql3400Services in some cases and dkPsql3400Services in other cases? We
do build up a number of objects that act as the model. When we find a
definition of a PL/SQL package, we create a PackageDefinition object and
this object can be responsible for converting the package name of
DK_PSQL3400 to DkPsql3400 and perhaps also appending "Services" to it.
However, I don't see why the model should have to provide a means to convert
the first letter to uppercase and sometimes to lowercase in certain cases. 

This is actual a simple example compared to other cases that we are dealing
with. We also create an interface in Java related to each PL/SQL package.
When we find variables defined in a PL/SQL package specification, we create
a getter and a setter method in the interface and also a member variable in
the implementation class that we generate. So, the variable name needs to be
uppercase first letter when we build the getter method, e.g. we have a
template of: "public <type> get<name>()", but we need first letter lowercase
when we define the instance variable. 

It seems to me, that in these types of cases, there should be a template
construct that allows me to perform string manipulation operations on a
single value. If a template is passes a "name" parameter, would it be
reasonable to provide a template construct to convert the first letter to
uppercase or lowercase? 

What we've done so far, is to provide additional methods on our model
objects. For example, PackageDefinition class has a toClassName() and a
toVariableName() method that simply handles the first letter upper/lower.
The visitor calls these methods to set attributes on templates. But, I think
this is the wrong way to do it. With this approach, the model knows too much
about the view. If we convert to something other than Java in the future,
the uppercase/lowercase first letter, not to mention the other naming
conventions may not be necessary and/or may be different. Will I have to
subclass my model objects, such as PackageDefinition, just to manage these
syntax conversion issues? Is there any examples, articles, etc. that
describe how best to deal with these kinds of design issues? 

   Nathan

Nathan Ward
ResQSoft, Inc.
703.861.9103
www.resqsoft.com


From philippe.faes at gmail.com  Sun Dec 30 10:16:57 2007
From: philippe.faes at gmail.com (Philippe Faes)
Date: Sun, 30 Dec 2007 19:16:57 +0100
Subject: [antlr-interest] check validity of single rule
Message-ID: <cb16cb310712301016p1cf813fem7afb605147734df9@mail.gmail.com>

Hi all,

I want to write tests for my grammar, but I can't figure out how to get the
correct feedback from ANTLR.

e.g. I want this to pass:
createParserFromString("a:=b;").assignment();

but this should fail:
createParserFromString("a:=b").assignment(); // no semicolon
createParserFromString("a:=b; #$%").assignment(); // junk after statement

>From the return value I can see if an 'assignment' is matched from the text,
but I cannot detect if there is junk after the valid assignment.

Any hints?

kind regards
Philippe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071230/9a5547d7/attachment.html 

From jaluber at gmx.de  Sun Dec 30 10:35:29 2007
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 30 Dec 2007 19:35:29 +0100
Subject: [antlr-interest] check validity of single rule
In-Reply-To: <cb16cb310712301016p1cf813fem7afb605147734df9@mail.gmail.com>
References: <cb16cb310712301016p1cf813fem7afb605147734df9@mail.gmail.com>
Message-ID: <4777E4F1.3010604@gmx.de>

Philippe Faes schrieb:
> Hi all,
> 
> I want to write tests for my grammar, but I can't figure out how to get
> the correct feedback from ANTLR.
> 
> e.g. I want this to pass:
> createParserFromString("a:=b;").assignment();
> 
> but this should fail:
> createParserFromString("a:=b").assignment(); // no semicolon
> createParserFromString("a:=b; #$%").assignment(); // junk after statement
> 
> From the return value I can see if an 'assignment' is matched from the
> text, but I cannot detect if there is junk after the valid assignment.
> 
> Any hints?

Do you use EOF at the end of an assignment? In case, assignment is
deeply buried in the grammar, I suppose that you aren't testing for the
right thing. assignment may be responsible for only one statement. So my
advice is to test several statements in a row at the appropriate rule.
Or you could create:

assignmentTest: assignment EOF;

which should reject example 2.

Johannes

From harald_m_mueller at gmx.de  Sun Dec 30 11:13:56 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sun, 30 Dec 2007 20:13:56 +0100
Subject: [antlr-interest] StringTemplate/MVC design issue
In-Reply-To: <004401c84b0e$09044800$6500a8c0@nwardlt>
Message-ID: <20071230191359.5319E11EC99@www.antlr.org>

> What we've done so far, is to provide additional methods on 
> our model objects. For example, PackageDefinition class has a 
> toClassName() and a
> toVariableName() method that simply handles the first letter 
> upper/lower.
> The visitor calls these methods to set attributes on 
> templates. But, I think this is the wrong way to do it. With 
> this approach, the model knows too much about the view. If we 
> convert to something other than Java in the future, the 
> uppercase/lowercase first letter, not to mention the other 
> naming conventions may not be necessary and/or may be 
> different. 

We do currently exactly the same (in a quite large code generator emitting
Java and NHibernate hbm.xmls).
I wouldn't change anything in the machinery behind the scenes, but rather do
about the following:
- Let the model not return strings, but an object of some type
"AbstractName"; the concrete object will be returned by a factory, e.g.
"JavaName" or "CSharpName" or "SQLName". These classes (which do not conform
to an interface!)then habe methods that implement the various idioms on how
to convert a generic "package definition's name" to a Java/C#/... class
name, a variable name, a parameter name etc. If you emit code in some other
language, you would have to have other 
- Whatever part of the program selects the templates to be used will also
install the factory.

Whether you then count these classes to be part of the "model" or "view" is
up to you - I would think they are an "intelligent strategy of the view
injected into the model."
(Draw an architecture picture in your documentation where you explain this
:-) !).

Regards
Harald M.

P.S. Similar questions often come up in the GUI MVC context: Models often
cannot be THAT abstract w/ regards to the view - showing a list in a listbox
or as a list of radiobuttons requires, although the representations in
principle have the same power, often a few small different
methods/behaviors. Some sort of injection/factory can help there also.



From harald_m_mueller at gmx.de  Sun Dec 30 11:24:38 2007
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sun, 30 Dec 2007 20:24:38 +0100
Subject: [antlr-interest] Get Values after parse
In-Reply-To: <008a01c84a87$2385a2a0$6a90e7e0$@isaacson@compuflex.com>
Message-ID: <20071230192442.D6EAD11EC92@www.antlr.org>

Usually, you would just add actions to the grammar which store the relevant
values somewhere else - typically in the parser object itself:
 
grammar SomeSQL;
 
@members {
    public List<String> columnNames = new ArrayList<String>();
    public String whereClause;
    // instead of public, write accessors in real-life code ...
}
 
sql : selectClause fromClause whereClause?
     ;
 
selectClause 
     : 'select' columnList
     ;
 
columnList 
     : (ID '.')? '*'        { columnNames.Add(...???...); }
     | c1=column        { columnNames.Add($c1.text); }
       ( ','
         c2=column        { columnNames.Add($c2.text); }
       )*
     ;
 
etc.
 
In your main code, after running
 
     SomeSQLParser p = new SomeSQLParser(...);
     p.sql();
 
you can then get all the information from your SomeSQLParser object:
 
     for (String columnName : p.columnNames) { ... }
     ...o.whereClause...
 
Instead of using the parser class, you can also pass some "storage/context"
object as a parameter to the parser's constructor and have the actions
record their findings in that context (in compiler talk, this would be a
"symbol table").
 
Regards
Harald
 


  _____  

From: antlr-interest-bounces at antlr.org [mailt
o:antlr-interest-bounces at antlr.org] On Behalf Of Cory Isaacson
Sent: Sunday, December 30, 2007 2:56 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Get Values after parse



I am new to ANTLR, and have a simple question. I need to parse a simple SQL
SELECT statement, and can see how to create the grammar for the lexer and
parser. I need to then get specific values from the SELECT statement, such
as table name(s), column name(s), the WHERE clause, etc.

 

To actually get the values, do I need to output an AST tree? If so, what is
the simplest way to access specific node/values? 

 

If you can suggest examples to look at and/or the best API to use that would
be great.

 

Thanks in advance for any assistance.

 

Cory

 

 

 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071230/84901e02/attachment-0001.html 

From dave at badgers-in-foil.co.uk  Sun Dec 30 12:58:03 2007
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 30 Dec 2007 20:58:03 +0000
Subject: [antlr-interest] check validity of single rule
In-Reply-To: <cb16cb310712301016p1cf813fem7afb605147734df9@mail.gmail.com>
References: <cb16cb310712301016p1cf813fem7afb605147734df9@mail.gmail.com>
Message-ID: <20071230205802.GA26694@badgers-in-foil.co.uk>

On Sun, Dec 30, 2007 at 07:16:57PM +0100, Philippe Faes wrote:
> e.g. I want this to pass:
> createParserFromString("a:=b;").assignment();
> 
> but this should fail:
> createParserFromString("a:=b").assignment(); // no semicolon
> createParserFromString("a:=b; #$%").assignment(); // junk after statement
> 
> From the return value I can see if an 'assignment' is matched from the text,
> but I cannot detect if there is junk after the valid assignment.

If you arrange for the test code to have access to the TokenStream, you
could assert that the next token is EOF.

If you put each of these fragments into separate JUnit test methods, you
could additionally extract the EOF-assertion into the tearDown() method
for the TestCase too.


ta,
dave

-- 
http://david.holroyd.me.uk/

From whitis at freelabs.com  Sun Dec 30 16:01:41 2007
From: whitis at freelabs.com (Mark Whitis)
Date: Sun, 30 Dec 2007 19:01:41 -0500 (EST)
Subject: [antlr-interest] Antlr-works/antlr bugs
Message-ID: <Pine.LNX.4.64.0712300409030.8143@localhost.localdomain>

OS: Linux debian unstable
Antlrworks version: 1.1.5
classpath is empty.

I like some of the features of antlr works but there are some bugs in
antlrworks and antlr:

Bug #1
------
Check grammar reports success and the internal grammar error display shows 
clean even though a number of errors appear in the console and on stderr.
In addition, there are some java exception dumps.   The errors, 
themselves, appear to be bogus, they are complaints about missing rules
that are not actually missing (grammar below).

Switching "Desktop mode" off and restarting the program fixes
some of these bugs, turning it back on and restarting
causes them to reappear.    With desktop mode off, antlr still complains
about the false errors which antlrworks itself does not find but
it at least reports that there were errors instead of claiming
success.   The exceptions went away when turning of desktop mode
and did not come back when it was reeenabled.

[16:06:24] Checking Grammar...
[16:06:24] error(106): bsdl.g:28:44: reference to undefined rule: exponent
[16:06:24] error(106): bsdl.g:12:3: reference to undefined rule: 
use_statement
[16:06:24] error(106): bsdl.g:10:3: reference to undefined rule: 
generic_parameter
[16:06:24] error(106): bsdl.g:14:3: reference to undefined rule: 
scan_port_identification
[16:06:24] error(106): bsdl.g:15:3: reference to undefined rule: 
tap_description
[16:06:24] error(106): bsdl.g:16:3: reference to undefined rule: 
boundary_register_description
[16:06:24] error(106): bsdl.g:13:3: reference to undefined rule: 
package_pin_mapping
[16:06:24] error(106): bsdl.g:11:3: reference to undefined rule: 
logical_port_description

Ok, maybe there is some context that I am not supplying in the
grammar file but antlrworks and antlr should at least be consistent.
Some of the trivial examples have some stuff I am not doing.
I haven't separated parser and lexar rules, but that doesn't seem
to be a requirement (indeed the ANSI C grammar doesn't do that) and there 
is no markup for doing that, anyway; examples use comments.  I haven't
identified named tokens and don't ever intend to; that was a bug in lex/yacc
and if there weren't sample grammars that demonstated that this was
unnecessary, I wouldn't be using antlr in the first place.   I didn't
provide main(), not relevent at this stage.   I have been using
real grammars as an example, not the trivial stuff.

Bug #2
------
Desktop mode has dubious value, wastes screenspace, is buggy, and is
on by default.   In most cases, tabs for multiple files would be of
far greater value and that doesn't appear to be supported.   When
more than one file needs to be seen at the same time, split window or
multiple independent windows are almost always preferable to creating
a bogus desktop.

Bug #3
------
Program has some of the usual java bugs of not being executable from path,
starting in the wrong directory, etc.   It does do a better job than
many, however, of finding files specified on command line and running
from an arbitrary directory (though it does this by putting everything
in the jar file).

http://www.freelabs.com/~whitis/java/example_wrapper_script

Bug #4
------
path to dot is initially blank.   "/usr/bin/dot" would be a good default
value.   Won't work in many cases on proprietary OSes but at least it
will work on most of the free ones.

Bug #5
------
If I use generate -> show parser code, I get additional errors that
look bogus.

This:

[16:35:51] warning(200): /home/whitis/src/bsdl_parser/bsdl.g:30:50: 
Decision can match input such as "EOF" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[16:35:52] error(106): /home/whitis/src/bsdl_parser/bsdl.g:28:44: 
reference to undefined rule: exponent

Is not a valid response to:
    FLOAT_LITERAL: ('0'..'9')+ '.' ('0'..'9')+ exponent?;
    fragment exponent: ('e'|'E') ('+'|'-')? ('0'..'9')+;
The problem seems to be the use of "exponent" instead of
"Exponent" for a fragment/token.
Note: this is at least a documentation bug.   Case sensitivity is
only alluded to in the Rule elements table, not the text of the
documentation or the tutorials.   Case sensitivity in languages
is a flaw.   You should be able to, at least optionally,  mark tokens with 
a keyword "token" and rules with "rule" and/or by section "lexar { }" and
"parser { }".

I also wonder why the user has to tell the program which is a token
and which is a gramatical rule.   The difference,
aside from some subtleties of whitespace handling, is 
basically whether it is more efficient to handle
with a lexer or a parser and ANTLR should know the answer to
that better than the user.  Let us override, of course, but
lexar/parser distinction are really an implementation detail and
a historical anachronism from the days when separate tools were used.
I know the difference but users new to grammars have enough else
to worry about.  A more important distinction comes when you build
parse trees or programs instead of a language recognizer.   Tokens
are a single entity in the parse tree.   But, in terms of optimization,
a smart program might use a lexar for some things the user thinks of
as parser rules and vice versa.   Thus, 'attribute' 'INSTRUCTION_LENGTH' 
'of' might be implemented in a lexer state machine that generates
three AST tokens.  And with the appropriate configuration of whitespace
handling, 'attribute INSTRUCTION_LENGTH of' could be a single
AST token as well.   Some thought needs to be given to the potential
for reserved words being recognized as identifiers in other contexts
which may be either a good thing or a bad one depending on application.0
All the user should be concerned with is how many AST nodes are
generated from a rule and how whitespace is handled, and they don't
need to be concerned about nodes if they are building a recognizer.

BTW, the main docs doesn't even have the word "whitespace" or
"white space" even though there is a "WS" example lexar rules.
And since whitespace could, in the future, get special handling inside 
tokens whitespace rules are special and there needs to be a keyword that 
identifies them.

MISC
----
Line number display should be on the view menu, not burried in 
preferences.   This is something that the user may change frequently.
It also should default to on.

Auto indent ":" involves non-consensual activity and should default to 
off.

Autosave should default to on.   And it should autosave to a different
file name and not display a dialog box (other common autosave bugs,
not tested yet).

Create backup file should default to on.

The three window manipulation buttins in the upper right corner are 
non-standard and substandard.   The maximize button is an empty box,
and the minimize button has an underscore that overlaps with the
edge of the box and thus also looks like an empty box.   Only a problem
in desktop mode, though.

GRAMMAR
-------
grammar bsdl;

options {
    // language=C;
    language=Java;
}
//  note: IDENTIFIER at start and end should match

BSDL_main: 'entity' IDENTIFIER 'is'
   generic_parameter?
   logical_port_description?
   use_statement*
   package_pin_mapping?
   scan_port_identification?
   tap_description?
   boundary_register_description?
   'end' IDENTIFIER;

WHITESPACE:  ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+ 	{ $channel = HIDDEN; } ;

IDENTIFIER: ( 'A'..'Z' | 'a'..'z' ) ( 'A'..'Z' | 'a'..'z' | '0'..'9' | '_' )*;

// must concatenate somehow
STRING_LITERAL: ('"' ~('"')* '"' ) ('&' ('"' ~('"')* '"' ) )* ;

INTEGER_LITERAL: ('0'..'9')+;

FLOAT_LITERAL: ('0'..'9')+ '.' ('0'..'9')+ exponent?;

fragment exponent: ('e'|'E') ('+'|'-')? ('0'..'9')+;

COMMENT: '--' ~('\r'|'\n')* '\r'? '\n' {$channel=HIDDEN;};

generic_parameter: 'generic' '(' 'PHYSICAL_PIN_MAP' ':' 'string' ':='  STRING_LITERAL ')' ';';

logical_port_description: 'port' '(' (pin_id ';')+ ')' ';';

pin_id:  identifier_list ':' mode ':' pin_type;

// Note: out is a tristate output and buffer is a two state output
mode:  'linkage' | 'in' | 'out' | 'inout' | 'buffer';
identifier_list: IDENTIFIER (',' IDENTIFIER)*;

pin_type: pin_scalar | pin_vector;

pin_scalar: IDENTIFIER;

pin_vector:
    IDENTIFIER '(' range ')';

range:
    INTEGER_LITERAL 'to' INTEGER_LITERAL
    | INTEGER_LITERAL 'downto' INTEGER_LITERAL;

use_statement:
    'use' vhdl_package_name;

vhdl_package_name:
   ( 'A'..'Z' | 'a'..'z' ) ( 'A'..'Z' | 'a'..'z' | '0'..'9' | '_' | '.')*;

package_pin_mapping:
   'attribute' 'PIN_MAP' 'of' IDENTIFIER ':' 'entity' 'is' 'PHYSICAL_PIN_MAP' ';'
   | 'constant' IDENTIFIER ':' 'PIN_MAP_STRING' ':=' map_string ';' ;

// must invoke a subordinate parser on map_string;
map_string: STRING_LITERAL;

scan_port_identification:
    'attribute' 'TAP_SCAN_IN' 'of' IDENTIFIER ':' 'signal' 'is' 'true' ';'
    | 'attribute' 'TAP_SCAN_OUT' 'of' IDENTIFIER ':' 'signal' 'is' 'true' ';'
    | 'attribute' 'TAP_SCAN_MODE' 'of' IDENTIFIER ':' 'signal' 'is' 'true' ';'
    | 'attribute' 'TAP_SCAN_RESET' 'of' IDENTIFIER ':' 'signal' 'is' 'true' ';'
    | 'attribute' 'TAP_SCAN_CLOCK' 'of' IDENTIFIER ':' 'signal' 'is' '(' frequency ','  ('LOW' | 'BOTH' ) ';'
    ;

frequency: FLOAT_LITERAL;

// must invoke a subordinate parser on map_string;


tap_description:
    'attribute' 'INSTRUCTION_LENGTH' 'of' IDENTIFIER ':' 'entity' 'is' INTEGER_LITERAL ';'
   | 'attribute' 'INSTRUCTION_OPCODE' 'of' IDENTIFIER ':' 'entity' 'is' opcode_table ';'
   | 'attribute' 'INSTRUCTION_CAPTURE' 'of' IDENTIFIER ':' 'entity' 'is' capture_pattern ';'
   | 'attribute' 'INSTRUCTION_DISABLE' 'of' IDENTIFIER ':' 'entity' 'is' opcode_name ';'
   | 'attribute' 'INSTRUCTION_PRIVATE' 'of' IDENTIFIER ':' 'entity' 'is' opcode_list ';'
   | 'attribute' 'INSTRUCION_USAGE' 'of' IDENTIFIER ':' 'entity' 'is' usage_string';'
   ;

opcode_table: 'todo_opcode_table';
capture_pattern: 'todo_capture_pattern';
opcode_name: 'todo_opcode_name';
opcode_list: 'todo_opcode_list';
usage_string: 'todo_usage_string';
boundary_register_description: 'todo_boundary_register_description' ;

EXCEPTIONS
----------
Sample1:
Exception in thread "Thread-20" java.lang.NullPointerException
         at org.antlr.works.menu.MenuGrammar.checkGrammarDidEnd(Unknown 
Source)
         at org.antlr.works.grammar.CheckGrammar.run(Unknown Source)
         at java.lang.Thread.run(Thread.java:620)


Sample2:
error(100): bsdl.g:9:10: syntax error: antlr: bsdl.g:9:10: unexpected 
token: :

bsdl.g:19:44: expecting '"', found 'u'
         at org.antlr.tool.ANTLRLexer.nextToken(ANTLRLexer.java:321)
         at 
antlr.TokenStreamRewriteEngine.nextToken(TokenStreamRewriteEngine.java:161)
         at antlr.TokenBuffer.fill(TokenBuffer.java:69)
         at antlr.TokenBuffer.LT(TokenBuffer.java:86)
         at antlr.LLkParser.LT(LLkParser.java:56)
         at org.antlr.tool.ANTLRParser.alternative(ANTLRParser.java:1755)
         at org.antlr.tool.ANTLRParser.block(ANTLRParser.java:1713)
         at org.antlr.tool.ANTLRParser.ebnf(ANTLRParser.java:2522)
         at 
org.antlr.tool.ANTLRParser.elementNoOptionSpec(ANTLRParser.java:2005)
         at org.antlr.tool.ANTLRParser.element(ANTLRParser.java:1925)
         at org.antlr.tool.ANTLRParser.alternative(ANTLRParser.java:1777)
         at org.antlr.tool.ANTLRParser.altList(ANTLRParser.java:1448)
         at org.antlr.tool.ANTLRParser.rule(ANTLRParser.java:1236)
         at org.antlr.tool.ANTLRParser.rules(ANTLRParser.java:655)
         at org.antlr.tool.ANTLRParser.grammar(ANTLRParser.java:389)
         at org.antlr.tool.Grammar.setGrammarContent(Grammar.java:521)
         at org.antlr.tool.Grammar.setGrammarContent(Grammar.java:497)
         at org.antlr.works.grammar.EngineGrammar.createNewGrammar(Unknown 
Source)
         at 
org.antlr.works.grammar.EngineGrammar.createCombinedGrammar(Unknown 
Source)
         at org.antlr.works.grammar.EngineGrammar.createGrammars(Unknown 
Source)
         at 
org.antlr.works.generate.CodeGenerate.getGrammarLanguage(Unknown Source)
         at org.antlr.works.menu.MenuGenerate.isKnownLanguage(Unknown 
Source)
         at org.antlr.works.menu.MenuGenerate.checkLanguage(Unknown Source)
         at 
org.antlr.works.menu.MenuGenerate.checkAndShowGeneratedCode(Unknown 
Source)
         at org.antlr.works.menu.MenuGenerate.showGeneratedCode(Unknown 
Source)
         at org.antlr.works.editor.EditorMenu.handleMenuGenerate(Unknown 
Source)
         at org.antlr.works.editor.EditorMenu.handleMenuEvent(Unknown 
Source)
         at 
org.antlr.xjlib.appkit.menu.XJMenuItem$MenuActionListener.actionPerformed(Unknown 
Source)
         at 
javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1957)
         at 
javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2278)
         at 
javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:377)
         at 
javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:232)
         at javax.swing.AbstractButton.doClick(AbstractButton.java:357)
         at 
javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1137)
         at 
javax.swing.plaf.basic.BasicMenuItemUI$Handler.menuDragMouseReleased(BasicMenuItemUI.java:1241)
         at 
javax.swing.JMenuItem.fireMenuDragMouseReleased(JMenuItem.java:548)
         at 
javax.swing.JMenuItem.processMenuDragMouseEvent(JMenuItem.java:445)
         at javax.swing.JMenuItem.processMouseEvent(JMenuItem.java:391)
         at 
javax.swing.MenuSelectionManager.processMouseEvent(MenuSelectionManager.java:292)
         at 
javax.swing.plaf.basic.BasicPopupMenuUI$MouseGrabber.eventDispatched(BasicPopupMenuUI.java:783)
         at 
java.awt.Toolkit$SelectiveAWTEventListener.eventDispatched(Toolkit.java:2339)
         at 
java.awt.Toolkit$ToolkitEventMulticaster.eventDispatched(Toolkit.java:2232)
         at java.awt.Toolkit.notifyAWTEventListeners(Toolkit.java:2190)
         at java.awt.Component.dispatchEventImpl(Component.java:4263)
         at java.awt.Container.dispatchEventImpl(Container.java:2018)
         at java.awt.Component.dispatchEvent(Component.java:4195)
         at 
java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4222)
         at 
java.awt.LightweightDispatcher.processMouseEvent(Container.java:3886)
         at 
java.awt.LightweightDispatcher.dispatchEvent(Container.java:3816)
         at java.awt.Container.dispatchEventImpl(Container.java:2004)
         at java.awt.Window.dispatchEventImpl(Window.java:2210)
         at java.awt.Component.dispatchEvent(Component.java:4195)
         at java.awt.EventQueue.dispatchEvent(EventQueue.java:599)
         at 
java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:273)
         at 
java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:183)
         at 
java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:173)
         at 
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:168)
         at 
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:160)
         at java.awt.EventDispatchThread.run(EventDispatchThread.java:121)



From whitis at freelabs.com  Sun Dec 30 16:58:57 2007
From: whitis at freelabs.com (Mark Whitis)
Date: Sun, 30 Dec 2007 19:58:57 -0500 (EST)
Subject: [antlr-interest] nested parsing (BSDL)
In-Reply-To: <E1J8v9h-0000IK-2Y@localhost.localdomain>
References: <E1J8v9h-0000IK-2Y@localhost.localdomain>
Message-ID: <Pine.LNX.4.64.0712301904150.8143@localhost.localdomain>

Thanks for responding, see below.

On Sun, 30 Dec 2007, Harald M. M?ller wrote:

> I admit I only scanned your email: But the "textbook approach", in my
> opinion would be the following:
>
> 1. Have a VHDL parser, which accepts strings simply as strings.
> 2. Do an AST rewrite, where you do "constant folding", i.e. you compute
> expressions that are made up only of constants. This will at least
> concatenate the &-separated strings.
> 3. Do another AST rewrite where you interpret the strings by calling another
> lexer+parser on them, return an AST from them and put that AST into the
> already existing AST structure.

Way too complicated for this application.   Something similar is done
where an existing VHDL tool is adapted.   There are no suitable
VHDL tools for adaptation in this case.

Although I think antlr should be able to create a clean AST tree from
this language (otherwise it suffers from an "omega inconsistency", a 
descrepency between the antlr language itself and the real world), I
probably won't use them.    The results of the parse can simply be
stored in structs, arrays, and combinations thereof.

> Another possibility would be to try to define a "LONG_STRING" symbol in the
> VHDL lexer, which allows string constants with & and comments to be passed
> to the lexer as a simple string; thus, you could get rid of stage 2. above;
> and maybe it is then possible to call the nested parsers of step 3.
> immediately while parsing, so that you end up with a 1-pass machine

Well, I was looking for suggestions on how to do something along these 
lines.   Given the documentation limitations, I can't even tell if antlr 
can do this, let alone how.

> (but I  would definitely keep the multiple grammars apart).

I really do not want to keep the grammars separate.

This is a BSDL parser, not a BSDL retrofit to VHDL.  BSDL was designed so 
you could do either.  I want to logically keep the grammar in something 
resembling the form it really should have been in the first place.  The 
whole "VHDL" subset thing is more of a bug than a feature, the result of 
design by committee.

> This possibility will not allow constructs with parentheses like
>
> constant DW_PACKAGE:PIN_MAP_STRING:="CLK:1, Q:(2,3,4,5,7,8,9,10), " &
>           ( "D:(23,22,21,20,19,17,16,15),"  &
>             ( "GND:6, VCC:18, OC_NEG:24, TDO:11, TMS:12, TCK:13, TDI:14" )
>           );
>
> which might be allowed in the syntax of VHDL. Also, with constant folding
> you could maybe tackle beasts like
>
>   constant B0 = "00000000";
>   constant B1 = "00000001";
>   constant B2 = "00000010";
>   constant B3 = "00000011";
>   ...
>   constant T0 = "10000000";
>   constant T1 = "10000001";
>   ...
>
>   attribute INSTRUCTION_OPCODE of ttl74bct8374 : entity is
>        "BYPASS (11111111, 10001000, 00000101, 10000100, 00000001),"   &
>        "EXTEST (" & B0 & ", " & T0 & "," &
>        "SAMPLE (" & B2 & ", " & T2 & "," &
>   ...
>
> or something like that where one starts to use constants in the "nested
> program."

Understand what you are getting at, however, this is prohibitted
in the language itself, fortunately.   Concatentation of litteral
strings is the only form of expression allowed.   Aside from
the string anarchy and complexity in the model itself, BSDL
is very rigid in a lot of ways about how things are expressed.
The order of statements, for example, is fixed.  If they had
simply been a little more rigid about a few things like where strings were 
broken, you wouldn't need a parser at all - a simple perl script
would do the job.

The design of BSDL could have been MUCH better if they had not made
the VHDL mistake and had included some other information.
But at least they tried to keep it simple.   BSDL is a descriptive
language, not a programming or synthesis one.   Exception being
IEEE STD 1532 programming macros which should have used a small
subset of VHDL coding features (or better yet, a tiny subset of C) but 
didn't.   Instead, you have something like three layers of programming
macros with no control flow.

VHDL would have made sense if vendors were providing behavioral
models of ICs, but they don't.   And even if that were the case,
this would not have been the way to do it.    Real extensions to
VHDL would have made sense; they would have been useful for more
than BSDL.   VHDL and Verilog is a flawed model that only represents a 
subset of the important information.  This is the kind of stuff you tend
to get from the expensive beaurocratic design by committee standards
organizations.

However, I think that parsing inside of strings has a lot of
applications besides BSDL and needs to be supported and documented.
Needing, for example, 20 different grammars because you have 20 different
string types, though, would leave a lot to be desired.

From mark at antelope.nildram.co.uk  Sun Dec 30 16:04:35 2007
From: mark at antelope.nildram.co.uk (Mark)
Date: Mon, 31 Dec 2007 1:04:35 +0100
Subject: [antlr-interest] ANTLR does not properly recognise single
	characters?
Message-ID: <20071231010435.8626F2DC035@smtp.nildram.co.uk>

I'm having some rather strange behaviour from ANTLR when presenting it with
single character tokens.  I have the following declared:

L	:	(('A'..'Z')|('a'..'z')|'_');
N	:	('0'..'9');
IDENTIFIER  :	L ((L|N)*);

But when I run my parser I've seen the following error:
> line 3:10 mismatched input 't' expecting IDENTIFIER

This seems to make no sense, as "t" should match IDENTIFIER.  Changing the
identifier 't' in the source language to 'tu' fixes the problem, so the
problem is specific to matching single character tokens.  Can anyone shed
any light on what's going on here?

Thanks,
Mark


________________________________________________
Message sent using UebiMiau 2.7.2


From nward at resqsoft.com  Sun Dec 30 18:42:47 2007
From: nward at resqsoft.com (Nathan Ward)
Date: Sun, 30 Dec 2007 21:42:47 -0500
Subject: [antlr-interest] StringTemplate/MVC design issue
In-Reply-To: <20071230191359.C0C9C1FE6C@mxperim7.sea5.speakeasy.net>
References: <004401c84b0e$09044800$6500a8c0@nwardlt>
	<20071230191359.C0C9C1FE6C@mxperim7.sea5.speakeasy.net>
Message-ID: <004e01c84b56$d69a0d70$6500a8c0@nwardlt>

Thanks! That helps. I'm not sure I quite picture yet where exactly I add the
factory, but it gives me some new ideas that will help me figure that out. 

   Nathan

-----Original Message-----
From: Harald M. M?ller [mailto:harald_m_mueller at gmx.de] 
Sent: Sunday, December 30, 2007 2:14 PM
To: 'Nathan Ward'; antlr-interest at antlr.org
Subject: RE: [antlr-interest] StringTemplate/MVC design issue

> What we've done so far, is to provide additional methods on our model 
> objects. For example, PackageDefinition class has a
> toClassName() and a
> toVariableName() method that simply handles the first letter 
> upper/lower.
> The visitor calls these methods to set attributes on templates. But, I 
> think this is the wrong way to do it. With this approach, the model 
> knows too much about the view. If we convert to something other than 
> Java in the future, the uppercase/lowercase first letter, not to 
> mention the other naming conventions may not be necessary and/or may 
> be different.

We do currently exactly the same (in a quite large code generator emitting
Java and NHibernate hbm.xmls).
I wouldn't change anything in the machinery behind the scenes, but rather do
about the following:
- Let the model not return strings, but an object of some type
"AbstractName"; the concrete object will be returned by a factory, e.g.
"JavaName" or "CSharpName" or "SQLName". These classes (which do not conform
to an interface!)then habe methods that implement the various idioms on how
to convert a generic "package definition's name" to a Java/C#/... class
name, a variable name, a parameter name etc. If you emit code in some other
language, you would have to have other
- Whatever part of the program selects the templates to be used will also
install the factory.

Whether you then count these classes to be part of the "model" or "view" is
up to you - I would think they are an "intelligent strategy of the view
injected into the model."
(Draw an architecture picture in your documentation where you explain this
:-) !).

Regards
Harald M.

P.S. Similar questions often come up in the GUI MVC context: Models often
cannot be THAT abstract w/ regards to the view - showing a list in a listbox
or as a list of radiobuttons requires, although the representations in
principle have the same power, often a few small different
methods/behaviors. Some sort of injection/factory can help there also.





From antlr at mirality.co.nz  Sun Dec 30 19:32:57 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 31 Dec 2007 16:32:57 +1300
Subject: [antlr-interest] ANTLR does not properly recognise single
 characters?
In-Reply-To: <20071231010435.8626F2DC035@smtp.nildram.co.uk>
References: <20071231010435.8626F2DC035@smtp.nildram.co.uk>
Message-ID: <20071231033309.CAF4111EC79@www.antlr.org>

At 13:04 31/12/2007, Mark wrote:
 >I'm having some rather strange behaviour from ANTLR when 
presenting
 >it with single character tokens.  I have the following declared:
 >
 >L	:	(('A'..'Z')|('a'..'z')|'_');
 >N	:	('0'..'9');
 >IDENTIFIER  :	L ((L|N)*);
 >
 >But when I run my parser I've seen the following error:
 >> line 3:10 mismatched input 't' expecting IDENTIFIER

"t" could match either L or IDENTIFIER, since they're both public 
(non-fragment) tokens.  L will win, since it's listed first.

"tu" could match either two Ls or one IDENTIFIER.  In this case, 
IDENTIFIER will win, since it's fewer tokens.

You probably want to make both L and N fragment rules.


From federico.omoto at gmail.com  Sun Dec 30 23:07:15 2007
From: federico.omoto at gmail.com (Fede)
Date: Mon, 31 Dec 2007 04:07:15 -0300
Subject: [antlr-interest] Smalltalk grammar
In-Reply-To: <8caacddf-2063-4100-9b00-b1c745c22953@21g2000hsj.googlegroups.com>
References: <8caacddf-2063-4100-9b00-b1c745c22953@21g2000hsj.googlegroups.com>
Message-ID: <8b4221f20712302307t1dea121g8621c0fd3a6f478b@mail.gmail.com>

Hi!

I'm new to ANTLR and I'm having a problem translating a few rules
found here:
http://chronos-st.blogspot.com/2007/12/smalltalk-in-one-page.html

The specific problem is on set subtraction, coudn't find a way to do
it in ANTLR. Sorry if this kind of question was answered before but I
found nothing searching in the ml archives.

I'm sending you the grammar I've written so far (again, this is my
first time with ANTLR, so it's possible there could be lots of
errors).

The problematic rules are:
-BindableIdentifier
-SymbolInArrayLiteral
-LiteralArrayElement

Please, if someone can take a look at it and give me some tips it will be
VERY appreciated :)


Thank you in advance,

Fede


/////////////////// Smalltalk grammar ///////////////////

grammar Smalltalk;

Character
       :       '\u0000'..'\uFFFE'
       ;

WhitespaceCharacter
       :       (' '|'\t'|'\n'|'\r')
       ;

DecimalDigit
       :       '0'..'9'
       ;

Letter
       :       ('a'..'z' | 'A'..'Z')
       ;

CommentCharacter
       :       ~'"'
       ;

Comment
       :       '"' CommentCharacter* '"'
       ;

OptionalWhitespace
       :       (WhitespaceCharacter | Comment)*
       ;

Whitespace
       :       (WhitespaceCharacter | Comment) OptionalWhitespace
       ;

LetterOrDigit
       :       DecimalDigit | Letter
       ;

Identifier
       :       (Letter | '_') (LetterOrDigit | '_')*
       ;

Reference
       :       Identifier
       ;

ConstantReference
       :       'nil' | 'false' | 'true'
       ;

PseudoVariableReference
       :       'self' | 'super' | 'thisContext'
       ;

ReservedIdentifier
       :       PseudoVariableReference | ConstantReference
       ;

// FIXME
BindableIdentifier
       :       Identifier - ReservedIdentifier
       ;

UnaryMessageSelector
       :       Identifier
       ;

Keyword :       Identifier ':'
       ;

KeywordMessageSelector
       :        Keyword Keyword*
       ;

BinarySelectorChar
       :       '~' | '!' | '@' | '%' | '&' | '*' | '-' | '+' | '=' | '|' |
'\\' |
'<' | '>' | ',' | '?' | '/'
       ;

BinaryMessageSelector
       :       BinarySelectorChar BinarySelectorChar?
       ;

IntegerLiteral
       :       '-'? UnsignedIntegerLiteral
       ;

UnsignedIntegerLiteral
       :       DecimalIntegerLiteral | Radix 'r' BaseNIntegerLiteral
       ;

DecimalIntegerLiteral
       :       DecimalDigit DecimalDigit*
       ;

Radix
       :       DecimalIntegerLiteral
       ;

BaseNIntegerLiteral
       :       LetterOrDigit LetterOrDigit*
       ;

ScaledDecimalLiteral
       :       '-'? DecimalIntegerLiteral ('.' DecimalIntegerLiteral)? 's'
DecimalIntegerLiteral?
       ;

FloatingPointLiteral
       :       '-'? DecimalIntegerLiteral ('.' DecimalIntegerLiteral
Exponent? |
Exponent)
       ;

Exponent
       :       ('e' | 'd' | 'q') (('-')? DecimalIntegerLiteral)?
       ;

CharacterLiteral
       :       '$' Character
       ;

StringLiteral
       :       '\'' (StringLiteralCharacter | '\'\'')* '\''
       ;

StringLiteralCharacter
       :       ~'\''
       ;

// FIXME
SymbolInArrayLiteral
       :       UnaryMessageSelector - ConstantReference |
KeywordMessageSelector |
BinaryMessageSelector
       ;

SymbolLiteral
       :       '#' (SymbolInArrayLiteral | ConstantReference |
StringLiteral)
       ;

ArrayLiteral
       :       ObjectArrayLiteral | ByteArrayLiteral
       ;

ObjectArrayLiteral
       :       '#' NestedObjectArrayLiteral
       ;

NestedObjectArrayLiteral
       :       '(' OptionalWhitespace (LiteralArrayElement (Whitespace
LiteralArrayElement)*)? OptionalWhitespace ')'
       ;

// FIXME
LiteralArrayElement
       :       literal - blockLiteral | NestedObjectArrayLiteral |
SymbolInArrayLiteral | ConstantReference
       ;

ByteArrayLiteral
       :       '#[' OptionalWhitespace (UnsignedIntegerLiteral (Whitespace
UnsignedIntegerLiteral)*)? OptionalWhitespace ']'
       ;

formalBlockArgumentDeclaration
       :       ':' BindableIdentifier
       ;

formalBlockArgumentDeclarationList
       :       formalBlockArgumentDeclaration (Whitespace
formalBlockArgumentDeclaration)*
       ;

blockLiteral
       :       '[' (OptionalWhitespace formalBlockArgumentDeclarationList
OptionalWhitespace '|')? executableCode OptionalWhitespace ']'
       ;

literal
       :       ConstantReference | IntegerLiteral | ScaledDecimalLiteral |
FloatingPointLiteral | CharacterLiteral | StringLiteral |
SymbolLiteral | ArrayLiteral | blockLiteral
       ;

nestedExpression
       :       '(' statement OptionalWhitespace ')'
       ;

operand
       :       literal | Reference | nestedExpression
       ;

unaryMessage
       :       UnaryMessageSelector
       ;

unaryMessageChain
       :       (OptionalWhitespace unaryMessage)*
       ;

binaryMessageOperand
       :       operand unaryMessageChain
       ;

binaryMessage
       :       BinaryMessageSelector OptionalWhitespace binaryMessageOperand
       ;

binaryMessageChain
       :       (OptionalWhitespace binaryMessage)*
       ;

keywordMessageArgument
       :       binaryMessageOperand binaryMessageChain
       ;

keywordMessageSegment
       :       Keyword OptionalWhitespace keywordMessageArgument
       ;

keywordMessage
       :       keywordMessageSegment (OptionalWhitespace
keywordMessageSegment)*
       ;

messageChain
       :       unaryMessage unaryMessageChain binaryMessageChain
keywordMessage? |
binaryMessage binaryMessageChain keywordMessage? | keywordMessage
       ;

cascadedMessage
       :       ';' OptionalWhitespace messageChain
       ;

expression
       :       operand (OptionalWhitespace messageChain (OptionalWhitespace
cascadedMessage)*)?
       ;

assignmentOperation
       :       OptionalWhitespace BindableIdentifier OptionalWhitespace ':='
       ;

statement
       :       assignmentOperation* OptionalWhitespace expression
       ;

methodReturnOperator
       :       OptionalWhitespace '^'
       ;

finalStatement
       :       methodReturnOperator? statement
       ;

localVariableDeclarationList
       :       OptionalWhitespace '|' OptionalWhitespace (BindableIdentifier
(Whitespace BindableIdentifier)*)? OptionalWhitespace '|'
       ;

executableCode
       :       localVariableDeclarationList? ((statement OptionalWhitespace
'.')*
finalStatement '.'?)?
       ;

unaryMethodHeader
       :       UnaryMessageSelector
       ;

binaryMethodHeader
       :       BinaryMessageSelector OptionalWhitespace BindableIdentifier
       ;

keywordMethodHeaderSegment
       :       Keyword OptionalWhitespace BindableIdentifier
       ;

keywordMethodHeader
       :       keywordMethodHeaderSegment (Whitespace
keywordMethodHeaderSegment)*
       ;

methodHeader
       :       unaryMethodHeader | binaryMethodHeader | keywordMethodHeader
       ;

methodDeclaration
       :       OptionalWhitespace methodHeader executableCode
       ;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071231/57ae1418/attachment.html 

From go2elango at gmail.com  Mon Dec 31 02:08:36 2007
From: go2elango at gmail.com (elango m)
Date: Mon, 31 Dec 2007 15:38:36 +0530
Subject: [antlr-interest] Memory issue while lexer initialization
In-Reply-To: <95DFE5CE-1A59-485A-BDD5-B830FE3902AD@cs.usfca.edu>
References: <154902370712280619h40998ac7h687495796522f92b@mail.gmail.com>
	<95DFE5CE-1A59-485A-BDD5-B830FE3902AD@cs.usfca.edu>
Message-ID: <154902370712310208w55e60541p29de414ee73bafb@mail.gmail.com>

Thanks for your reply.

My lexer have around 60 tokens, i think its not huge.

I wanted to define keywords(around 50) in my lexer, something similar to the
following. When I remove this from the grammar I don't see the memory issue.
Is there any way to solve this problem?

KEYWORD : 'Keyword1' | 'Keyword2' | .... | 'Keyword50';

Thanks,
--Elango M


On Dec 28, 2007 11:40 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> hi. you must have one huge grammar.  Do you have a lexer with a
> million tokens?
> Ter
> On Dec 28, 2007, at 6:19 AM, elango m wrote:
>
> > Hi,
> >
> > I have a memory issue when I create an instance of the lexer (new
> > MyLexer(new ANTLRStringStream("expression")). The following code in
> > the lexer creates instances of short[] with a huge data, consuming
> > more than 25 Mb. I don't understand why it requires such a huge
> > memory. Any help is appreciated.
> >
> >     static {
> >         int numStates = DFA14_transitionS.length;
> >         DFA14_transition = new short[numStates][];
> >         for (int i=0; i<numStates; i++) {
> >             DFA14_transition[i] = DFA.unpackEncodedString
> > (DFA14_transitionS[i]);
> >         }
> >     }
> >
> > Thanks,
> > --Elango M
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071231/25552d70/attachment.html 

From antlr at mirality.co.nz  Mon Dec 31 02:20:04 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 31 Dec 2007 23:20:04 +1300
Subject: [antlr-interest] Memory issue while lexer initialization
In-Reply-To: <154902370712310208w55e60541p29de414ee73bafb@mail.gmail.com
 >
References: <154902370712280619h40998ac7h687495796522f92b@mail.gmail.com>
	<95DFE5CE-1A59-485A-BDD5-B830FE3902AD@cs.usfca.edu>
	<154902370712310208w55e60541p29de414ee73bafb@mail.gmail.com>
Message-ID: <20071231102021.7CC6E11E970@www.antlr.org>

At 23:08 31/12/2007, elango m wrote:
>I wanted to define keywords(around 50) in my lexer, something 
>similar to the following. When I remove this from the grammar I 
>don't see the memory issue. Is there any way to solve this 
>problem?
>
>KEYWORD : 'Keyword1' | 'Keyword2' | .... | 'Keyword50';

I'm not sure why the above would have the effect you were 
describing (maybe the state transitions just blow out 
exponentially), but usually the way you'd do this sort of thing is 
like this:

tokens {
   KEYWORD1 = 'Keyword1';
   KEYWORD2 = 'Keyword2';
   ...
   KEYWORD50 = 'Keyword50';
}

...

keyword: KEYWORD1 | KEYWORD2 | .... | KEYWORD50;

This way each keyword gets its own unique token, so you can define 
which keywords are accepted in certain places specifically, or 
just use the catchall 'keyword' rule when you don't care.

Although note that it's not quite this simple in practice; 
sometimes the lexer needs a little help disambiguating certain 
keywords, especially if they have a common prefix.


From philippe.faes at gmail.com  Mon Dec 31 02:55:52 2007
From: philippe.faes at gmail.com (Philippe Faes)
Date: Mon, 31 Dec 2007 11:55:52 +0100
Subject: [antlr-interest] check validity of single rule
Message-ID: <6F760121-86F7-4712-AFF3-EBF47DD66B09@gmail.com>

Dear Johannes,

Thanks for your response.
I am indeed checking rules buried deep in the grammar, and I want to  
test individual generation rules.
I have a very large grammar, and it would be painful to create at  
foobarTest rule for each existing rule foobar. It's great that antlr  
does graceful recovery after errors, but there must be a way to check  
if a string confoms to a rule, right?
I plan on checking a lot of generation rules with a lot of examples,  
so it should be as simple as possible.

thanks

Philippe Faes schrieb:
 > Hi all,
 >
 > I want to write tests for my grammar, but I can't figure out how  
to get
 > the correct feedback from ANTLR.
 >
 > e.g. I want this to pass:
 > createParserFromString("a:=b;").assignment();
 >
 > but this should fail:
 > createParserFromString("a:=b").assignment(); // no semicolon
 > createParserFromString("a:=b; #$%").assignment(); // junk after  
statement
 >
 > From the return value I can see if an 'assignment' is matched from  
the
 > text, but I cannot detect if there is junk after the valid  
assignment.
 >
 > Any hints?

Do you use EOF at the end of an assignment? In case, assignment is
deeply buried in the grammar, I suppose that you aren't testing for the
right thing. assignment may be responsible for only one statement. So my
advice is to test several statements in a row at the appropriate rule.
Or you could create:

assignmentTest: assignment EOF;

which should reject example 2.

Johannes
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071231/8462092c/attachment.html 

From antlr at mirality.co.nz  Mon Dec 31 03:31:06 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 01 Jan 2008 00:31:06 +1300
Subject: [antlr-interest] check validity of single rule
In-Reply-To: <6F760121-86F7-4712-AFF3-EBF47DD66B09@gmail.com>
References: <6F760121-86F7-4712-AFF3-EBF47DD66B09@gmail.com>
Message-ID: <20071231113122.C976611EB7F@www.antlr.org>

At 23:55 31/12/2007, Philippe Faes wrote:
>I am indeed checking rules buried deep in the grammar, and I want 
>to test individual generation rules.
>I have a very large grammar, and it would be painful to create at 
>foobarTest rule for each existing rule foobar. It's great that 
>antlr does graceful recovery after errors, but there must be a 
>way to check if a string confoms to a rule, right?

Well, the strings do conform to the rule.  The junk afterwards are 
just presumed to be matched by some (later) rule that you haven't 
called yet.

Have another look at what David suggested.  The parser rule will 
only consume the input that matches, so any unconsumed input in 
the stream means that the rule didn't match the complete string -- 
and that sounds like what you're trying to detect.

I don't recall offhand what regular parser rules return, but 
certainly output=AST parser rules return the AST, which includes 
the stop token, which includes a token stream position.  That's 
another way you could check it, though probably more convoluted 
than David's suggestion.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080101/f624f19d/attachment.html 

From aainsworth2000 at yahoo.co.uk  Mon Dec 31 03:47:53 2007
From: aainsworth2000 at yahoo.co.uk (Adam Ainsworth)
Date: Mon, 31 Dec 2007 11:47:53 +0000 (GMT)
Subject: [antlr-interest] Smalltalk grammar
Message-ID: <431606.58784.qm@web27102.mail.ukl.yahoo.com>

Hi Fede,

Let me say that I'm by no means an expert in grammars or Antlr, I've just been playing around for the last couple of weeks, so please read the following with that in mind.

Firstly lexical rules which do not correspond to output tokens should be marked as fragments, e.g. "fragment Character : '\u0000'..'\uFFFE';" This is necessary to prevent these building blocks being incorrectly output as tokens.

Note that EBNF only allows simple cases of 'syntactic exception', where the set of exceptions could be replaced with a fixed set of strings. 

I think the first two cases in the smalltalk lexer rules can easily be handled in Antlr by ordering the lexical rules appropriately. For example ensure that ReservedIdentifier appears before Identifier and BindableIdentifier, and then 'self' will be recognised as a ReservedIdentifier.  There is then no need for the syntactic exception in the definition of BindableIdentifier.

However the third instance is much more complicated; here we have a lexer rule which references 2 parser rules for a start, which makes me think that the split between lexer and parser is not correct. There is no way to replace the syntactic exception with a set of strings, and therefore I do not think that this grammar is actually an EBNF grammar. I don't think there is a simple way to resolve this problem with the grammar, it needs a detailed analysis of what the grammar is trying to achieve here, which then needs restating in a correct grammar.

Another tricky problem with the lexer rules proposed on 'Smalltalk in One Page'  is that there is no way for the lexer to distinguish between a Reference and a BindableIdentifier. I suspect this is simply asking too much of the lexing phase, I think it would be more typical just to output identifiers at this stage, and leave classification of the identifiers until parsing, since it requires knowledge of the construct in which the identifier is being used.

These problems lead me to believe that this grammar has not been tested (i.e. used with any automated tool)  and some serious effort will be needed to get it working with Antlr or any other tool.

Regards,

Adam





      ___________________________________________________________
Yahoo! Answers - Got a question? Someone out there knows the answer. Try it
now.
http://uk.answers.yahoo.com/ 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20071231/3f729da4/attachment.html 

From fog at initd.org  Mon Dec 31 03:56:15 2007
From: fog at initd.org (Federico Di Gregorio)
Date: Mon, 31 Dec 2007 12:56:15 +0100
Subject: [antlr-interest] check validity of single rule
In-Reply-To: <20071231113122.C976611EB7F@www.antlr.org>
References: <6F760121-86F7-4712-AFF3-EBF47DD66B09@gmail.com>
	<20071231113122.C976611EB7F@www.antlr.org>
Message-ID: <1199102175.4090.7.camel@mila.office.dinunzioedigregorio>


Il giorno mar, 01/01/2008 alle 00.31 +1300, Gavin Lambert ha scritto:
> At 23:55 31/12/2007, Philippe Faes wrote:
> > I am indeed checking rules buried deep in the grammar, and I want to
> > test individual generation rules.
> > I have a very large grammar, and it would be painful to create at
> > foobarTest rule for each existing rule foobar. It's great that antlr
> > does graceful recovery after errors, but there must be a way to
> > check if a string confoms to a rule, right?
>
> Well, the strings do conform to the rule.  The junk afterwards are
> just presumed to be matched by some (later) rule that you haven't
> called yet.

I do my tests exactly this way and I explicitly check for EOL using the
lexer to make sure the rule consumed all the input (as it is supposed to
do). Something like:

Assert.AreEqual(YourLexerClass.EOF, lexer.Input.LA(1))

works for me. (Beware of trailing spaces!)

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
              La felicit? ? una tazza di cioccolata calda. Sempre. -- Io
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa =?ISO-8859-1?Q?=E8?= una parte del messaggio
	firmata digitalmente
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20071231/4e1d803e/attachment.bin 

From philippe.faes at gmail.com  Mon Dec 31 06:13:51 2007
From: philippe.faes at gmail.com (Philippe Faes)
Date: Mon, 31 Dec 2007 15:13:51 +0100
Subject: [antlr-interest] check validity of single rule
In-Reply-To: <1199102175.4090.7.camel@mila.office.dinunzioedigregorio>
References: <6F760121-86F7-4712-AFF3-EBF47DD66B09@gmail.com>
	<20071231113122.C976611EB7F@www.antlr.org>
	<1199102175.4090.7.camel@mila.office.dinunzioedigregorio>
Message-ID: <47090C73-CA32-44D5-B5DE-436EF2A035E2@gmail.com>

Thanks Federico and the others,

I think it works fine when I inspect the TokenStream after parsing.
happy 2008

Philippe

On 31 Dec 2007, at 12:56, Federico Di Gregorio wrote:

>
> Il giorno mar, 01/01/2008 alle 00.31 +1300, Gavin Lambert ha scritto:
>> At 23:55 31/12/2007, Philippe Faes wrote:
>>> I am indeed checking rules buried deep in the grammar, and I want to
>>> test individual generation rules.
>>> I have a very large grammar, and it would be painful to create at
>>> foobarTest rule for each existing rule foobar. It's great that antlr
>>> does graceful recovery after errors, but there must be a way to
>>> check if a string confoms to a rule, right?
>>
>> Well, the strings do conform to the rule.  The junk afterwards are
>> just presumed to be matched by some (later) rule that you haven't
>> called yet.
>
> I do my tests exactly this way and I explicitly check for EOL using  
> the
> lexer to make sure the rule consumed all the input (as it is  
> supposed to
> do). Something like:
>
> Assert.AreEqual(YourLexerClass.EOF, lexer.Input.LA(1))
>
> works for me. (Beware of trailing spaces!)
>
> federico
>
> -- 
> Federico Di Gregorio                         http:// 
> people.initd.org/fog
> Debian GNU/Linux Developer                                 
> fog at debian.org
> INIT.D Developer                                            
> fog at initd.org
>               La felicit? ? una tazza di cioccolata calda. Sempre.  
> -- Io


From r.mark.volkmann at gmail.com  Mon Dec 31 07:34:32 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 31 Dec 2007 09:34:32 -0600
Subject: [antlr-interest] difference between tokens and string literals
Message-ID: <f0fcc6820712310734y76e61318vc2b1adf8e258495b@mail.gmail.com>

I'm confused about how to detail with the difference between tokens
and string literals. In the example below I have a lexer, parser and
tree grammar all pared down to be a simple as possible. In particular,
I don't know the correct way to write the "list" rule in the tree
grammar. When I give this the input "list variables", why is the
output "failed"?

--- lexer grammar ---

lexer grammar BasicLexer;

LIST: 'list';
LIST_OPTION: 'functions' | 'variables';

NEWLINE: ('\r'? '\n')+;
WHITESPACE: ' '+ { $channel = HIDDEN; };

--- parser grammar ---

parser grammar BasicParser;

options {
  output = AST;
  tokenVocab = BasicLexer;
}

list: LIST LIST_OPTION terminator -> ^(LIST LIST_OPTION);

// It seems that you cannot refer to EOF in a lexer rule,
// so I made this a parser rule.
terminator: NEWLINE | EOF;

--- tree grammar ---

tree grammar BasicTree;

options {
  ASTLabelType = CommonTree;
  tokenVocab = BasicParser;
  output = template;
}

list
  : ^(LIST 'functions') { System.out.println("list functions isn't
supported yet"); }
  | ^(LIST 'variables') { System.out.println("list variables isn't
supported yet"); }
  | ^(LIST LIST_OPTION) { System.out.println("failed"); }
  ;

If needed I can provide the Java code I wrote that uses the
ANTLR-generated classes, but that's probably not relevant. I'm pretty
sure the issue is in one of my grammar files.

-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Mon Dec 31 11:37:03 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Dec 2007 11:37:03 -0800
Subject: [antlr-interest] bug: bison/yacc converter won't parse
In-Reply-To: <Pine.LNX.4.64.0712300044220.8143@localhost.localdomain>
References: <Pine.LNX.4.64.0712300044220.8143@localhost.localdomain>
Message-ID: <F48C8CB0-8293-40F4-8E34-87AF5DB3659F@cs.usfca.edu>

Hi Mark, I'm not sure...haven't ever looked at that I'm afraid.
Ter
On Dec 29, 2007, at 9:44 PM, Mark Whitis wrote:

> I tried to build the bison/yacc to antlr converter but antlr chokes
> on the grammar files even though I am using the version of antlr
> it was supposedly written for.   The distribution contains
> no makefile, just ambiguous instructions to run antlr on the
> two grammars and then compile with Main.java.
>
> wget http://www.antlr.org/share/1151380794488/bison.zip
> unzip bison.zip
> cd bison
>
> runantlr bison.g
> Running java antlr.Tool $* with /usr/share/java/antlr.jar appended  
> to the CLASSPATH variable
> ANTLR Parser Generator   Version 2.7.6 (20071129)   1989-2005
> bison.g:191:17: rule classDef trapped:
> bison.g:191:17: unexpected token: ^
> error: aborting grammar 'BisonParser' due to errors
> Exiting due to errors.
>
> runantlr BisonParserTree.g
> Running java antlr.Tool $* with /usr/share/java/antlr.jar appended  
> to the CLASSPATH variable
> ANTLR Parser Generator   Version 2.7.6 (20071129)   1989-2005
> BisonParserTree.g:42:13: Treewalkers only support k=1
> panic: Cannot find importVocab file 'BisonTokenTypes.txt'
>
>


From parrt at cs.usfca.edu  Mon Dec 31 11:39:28 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Dec 2007 11:39:28 -0800
Subject: [antlr-interest] StringTemplate/MVC design issue
In-Reply-To: <004e01c84b56$d69a0d70$6500a8c0@nwardlt>
References: <004401c84b0e$09044800$6500a8c0@nwardlt>
	<20071230191359.C0C9C1FE6C@mxperim7.sea5.speakeasy.net>
	<004e01c84b56$d69a0d70$6500a8c0@nwardlt>
Message-ID: <84247EE5-4110-4E1D-BF66-DCD7CC643321@cs.usfca.edu>


On Dec 30, 2007, at 6:42 PM, Nathan Ward wrote:

> Thanks! That helps. I'm not sure I quite picture yet where exactly I  
> add the
> factory, but it gives me some new ideas that will help me figure  
> that out.

Hi :)  You can also use the ST 3.1 format option:

<varname; format="javaCase">

which will call toString("javaCase") on the varname object's renderer.

Ter

From parrt at cs.usfca.edu  Mon Dec 31 11:47:07 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Dec 2007 11:47:07 -0800
Subject: [antlr-interest] RFE: bring back (at least the global)
	testLiterals option!
In-Reply-To: <47757548.9030502@math.purdue.edu>
References: <mailman.1.1198872001.8753.antlr-interest@antlr.org>
	<47757548.9030502@math.purdue.edu>
Message-ID: <3E949873-ADF1-4D39-B50F-1E52E9FF65FA@cs.usfca.edu>


On Dec 28, 2007, at 2:14 PM, J Chapman Flack wrote:

>
> Hi,
>
> I'm thinking of using the "implicit strategy" for keyword lexing
> described in
> http://www.antlr.org/wiki/pages/viewpage.action?pageId=1802308
> because it closely matches how the reference implementation of
> this language does it, and it was very easy in ANTLR 2.7.7 using
>
> tokens {
>  KWD1 = 'kwd1';
>  KWD2 = 'kwd2';
>  ...
>  KWD252 = 'kwd252';
> }
>
> with global options { testLiterals=false;  
> caseSensitiveLiterals=false; }
>
> and rule options { testLiterals=true; } on the rule for identifiers.
> The result was clear, correct, and compact.
>
> To do the same thing in ANTLR 3, I have to supply my own
> CheckKeywordsTable() that implements the intended matching rules,
> and use it explicitly in the identifier rule.  That's no big deal.
>
> What's unpleasant is that ANTLR hasn't preserved my nice, clear
> tokens { } block in any form I can use for the purpose. An
> array of the keyword strings would offer a way for Java code
> to recover and use them.

I looked in the parser generated from your above list and see:

     public static final String[] tokenNames = new String[] {
         "<invalid>", "<EOR>", "<DOWN>", "<UP>", "KWD1", "KWD2",  
"KWD252"
     };

Would that work for you?

Ter

From parrt at cs.usfca.edu  Mon Dec 31 12:25:09 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Dec 2007 12:25:09 -0800
Subject: [antlr-interest] character literal bugs in 2007-12-27.12
In-Reply-To: <47756049.10405@math.purdue.edu>
References: <mailman.1.1198872001.8753.antlr-interest@antlr.org>
	<47756049.10405@math.purdue.edu>
Message-ID: <72DAF1AA-FD7B-4156-B22A-AAAEB5683233@cs.usfca.edu>

zoiks!  Ok, i allowed octal escapes...rather than fix, it's illegal  
now ;)  try:

WS : ( ' '
     | '\f' {;}
     | '\n'
     | '\r'
     | '\t'
     | '\u000B' // \v
     )
     { $channel = HIDDEN; }
   ;

Ter
On Dec 28, 2007, at 12:44 PM, J Chapman Flack wrote:

>
> My lexer rule:
>
> WS : ( ' '
>     | '\f'
>     | '\n'
>     | '\r'
>     | '\t'
>     | '\013' // \v
>     )
>     { $channel = HIDDEN; }
>   ;
>
> produces in Java:
>
>            ...
>            case '\u0000':
>                {
>                alt1=6;
>                }
>                break;
>            ...
>            case 6 :
>                ... match("\013"); ...
>
> That is, the \013 literal is passed correctly to match(),
> but in the *decision* it seems to have been treated as a
> \0 escape followed by a 1 and a 3. Also, the comments generated
> into the code refer to '\\013' which would be yet another
> different string.
>
> -Chap


From antlr at mirality.co.nz  Mon Dec 31 13:07:58 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 01 Jan 2008 10:07:58 +1300
Subject: [antlr-interest] difference between tokens and string literals
In-Reply-To: <f0fcc6820712310734y76e61318vc2b1adf8e258495b@mail.gmail.co
 m>
References: <f0fcc6820712310734y76e61318vc2b1adf8e258495b@mail.gmail.com>
Message-ID: <20071231211033.B6B7411EBC6@www.antlr.org>

At 04:34 1/01/2008, Mark Volkmann wrote:
 >
 >I'm confused about how to detail with the difference between
 >tokens and string literals.

Tokens are tokens, and string literals are mere sequences of 
characters.  In certain cases, string literals can be promoted 
automatically to tokens, but I usually find that more confusing 
than helpful.

 >I don't know the correct way to write the "list" rule in the 
tree
 >grammar. When I give this the input "list variables", why is the
 >output "failed"?

It's because the actual tree from the rewrite is ^(LIST 
LIST_OPTION), which matches option 3.  In fact options 1 and 2 
really ought to give you a compiler error since it's impossible 
for those to ever match anything, even if you did keep the actual 
text of the option around -- but ANTLR 3's grammar error checking 
is a little flaky at the moment because it's still using ANTLR 2 
to do much of the work.

You could use a semantic predicate to compare the contents of the 
LIST_OPTION token (assuming you modified the parser to actually 
give it some contents), but personally I think it'd make things 
much simpler if you broke this up into multiple tokens anyway:

lexer grammar BasicLexer;

tokens {
   LIST = 'list';
   FUNCTIONS = 'functions';
   VARIABLES = 'variables';
}

NEWLINE: ('\r'? '\n')+;
WHITESPACE: ' '+ { $channel = HIDDEN; };

parser grammar BasicParser;
options {
   output = AST;
   tokenVocab = BasicLexer;
}

list: LIST list_option terminator -> ^(LIST[$LIST] $list_option);
list_option: FUNCTIONS | VARIABLES;
terminator: NEWLINE | EOF;

tree grammar BasicTree;
options {
   ASTLabelType = CommonTree;
   tokenVocab = BasicLexer;
   output = template;
}

list
   : ^(LIST FUNCTIONS) { System.out.println("list functions isn't 
supported yet"); }
   | ^(LIST VARIABLES) { System.out.println("list variables isn't 
supported yet"); }
   | ^(LIST .) { System.out.println("failed"); }
   ;


From parrt at cs.usfca.edu  Mon Dec 31 13:52:02 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Dec 2007 13:52:02 -0800
Subject: [antlr-interest] soliciting language recipes book outline feedback
Message-ID: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>

Howdy folks,

I've signed up to do another book for pragmatic programmers.  This  
time I'm going to do a collection of "how to" examples/recipes.  The  
book is meant to teach you how to fish not give you fish--the examples  
will be necessarily smallish. I anticipate the level being  
introductory through intermediate as real, big examples will simply  
not fit. I'd like to start out with really brain-dead examples such as  
comma separated value parsing so that I can explain the fundamentals.   
I will always remember the first technical book I read (on 6502  
assembly code code by Lance Levanthal).  This awesome book started out  
showing how to clear a memory location. This gave me the confidence  
that I might actually understand the rest of the book :)

I propose breaking the book up into three main sections: parsing,  
interpretation, translation. I would love to hear peoples feedback  
about what examples would be useful and exciting.  Keep in mind that  
the average example will need to fit in about 5 to 10 pages. Code  
samples will be made available online and not necessarily completely  
printed out in the book to save space. Also I would love to hear your  
feedback about how the recipes should be laid out or described.

Please CC Susannah Pfalzer, with whom I'm fortunate to work with  
again, on your replies as she is not a member of this list. :)

Here is my rough draft list of examples, which is a bit too few.   
Thanks and happy new year!

Ter
------------
I. Parsing recipes
	comma-separated values (show in java then python or ruby then ANTLR)
	parsing binary data (fixed and non-fixed size records)
	parsing log files (in awk/sed/grep then ANTLR)
	configuration file or JSON or YAML
	text-based network protocol (e.g., POP, nntp, http)
	graphs and networks via edge list format
	read fixed a XML format like:
		SVG (vector graphics)
		or, RDF ontology graph
	handling include files
	parsing island grammars like JSP
	simplified English imperative statement recognizer
		(E.g., games: "pick up gun and shoot spy")

II. Interpretation recipes
	arithmetic expression trees
	polynomial differentiation
	query language (parse and pull data from DB)
	serial/deserialize objects
	partial PS interpreter
	simple programming language interpreter

III. Translation recipes
	wiki to HTML
	simplified programming language pretty printer
	instrumenting simplified programming language with profiling info
	simple Java byte code generator
	simple robot control language for lego MindStorm robots
	class hierarchy generator (awk/sed/grep then grep+ANTLR)
		generates DOT format for graphviz to visualize

From jpschewe at mtu.net  Mon Dec 31 13:57:52 2007
From: jpschewe at mtu.net (Jon Schewe)
Date: Mon, 31 Dec 2007 15:57:52 -0600
Subject: [antlr-interest] Exit status of Tool
Message-ID: <477965E0.9010604@mtu.net>

It would be really nice if the antlr Tool would exit with an error
status when an error occurs.  I'm calling it from inside ant and have
set "failOnError" to "true" when calling the antlr Tool class and ant
just keeps going on even when the Tool outputs error messages.

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From parrt at cs.usfca.edu  Mon Dec 31 14:04:23 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Dec 2007 14:04:23 -0800
Subject: [antlr-interest] Exit status of Tool
In-Reply-To: <477965E0.9010604@mtu.net>
References: <477965E0.9010604@mtu.net>
Message-ID: <390DFDDE-DF6D-4DA3-9C69-6F11C5A08759@cs.usfca.edu>

yup. 3.1 latest builds have that.

let me push one now...ok, try

antlr-2007-12-31.14.tar.gz

Ter
On Dec 31, 2007, at 1:57 PM, Jon Schewe wrote:

> It would be really nice if the antlr Tool would exit with an error
> status when an error occurs.  I'm calling it from inside ant and have
> set "failOnError" to "true" when calling the antlr Tool class and ant
> just keeps going on even when the Tool outputs error messages.


From r.mark.volkmann at gmail.com  Mon Dec 31 14:40:05 2007
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 31 Dec 2007 16:40:05 -0600
Subject: [antlr-interest] difference between tokens and string literals
In-Reply-To: <47795acb.0422300a.31f2.ffff9ab8SMTPIN_ADDED@mx.google.com>
References: <f0fcc6820712310734y76e61318vc2b1adf8e258495b@mail.gmail.com>
	<47795acb.0422300a.31f2.ffff9ab8SMTPIN_ADDED@mx.google.com>
Message-ID: <f0fcc6820712311440i5807b5fes34850f93fb781339@mail.gmail.com>

On Dec 31, 2007 3:07 PM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 04:34 1/01/2008, Mark Volkmann wrote:
>  >
>  >I'm confused about how to detail with the difference between
>  >tokens and string literals.
>
> Tokens are tokens, and string literals are mere sequences of
> characters.  In certain cases, string literals can be promoted
> automatically to tokens, but I usually find that more confusing
> than helpful.
>
>  >I don't know the correct way to write the "list" rule in the
> tree
>  >grammar. When I give this the input "list variables", why is the
>  >output "failed"?
>
> It's because the actual tree from the rewrite is ^(LIST
> LIST_OPTION), which matches option 3.  In fact options 1 and 2
> really ought to give you a compiler error since it's impossible
> for those to ever match anything, even if you did keep the actual
> text of the option around -- but ANTLR 3's grammar error checking
> is a little flaky at the moment because it's still using ANTLR 2
> to do much of the work.
>
> You could use a semantic predicate to compare the contents of the
> LIST_OPTION token (assuming you modified the parser to actually
> give it some contents), but personally I think it'd make things
> much simpler if you broke this up into multiple tokens anyway:
>
> lexer grammar BasicLexer;
>
> tokens {
>    LIST = 'list';
>    FUNCTIONS = 'functions';
>    VARIABLES = 'variables';
> }

I found out that you can't assign literal values to tokens in a
lexer-only grammar. ANTLR outputs an error message when you do that.
As far as I can tell, there's no point in using a tokens specification
(section 4.4 in the book) in a lexer-only grammar. I fixed this by
putting the following in my lexer-only grammar.

LIST: 'list';
FUNCTIONS: 'functions';
VARIABLES: 'variables';

> NEWLINE: ('\r'? '\n')+;
> WHITESPACE: ' '+ { $channel = HIDDEN; };
>
> parser grammar BasicParser;
> options {
>    output = AST;
>    tokenVocab = BasicLexer;
> }
>
> list: LIST list_option terminator -> ^(LIST[$LIST] $list_option);

Instead of the line above, I was able to use the following.

list: LIST list_option terminator -> ^(LIST listOption);

> list_option: FUNCTIONS | VARIABLES;
> terminator: NEWLINE | EOF;
>
> tree grammar BasicTree;
> options {
>    ASTLabelType = CommonTree;
>    tokenVocab = BasicLexer;
>    output = template;
> }
>
> list
>    : ^(LIST FUNCTIONS) { System.out.println("list functions isn't
> supported yet"); }
>    | ^(LIST VARIABLES) { System.out.println("list variables isn't
> supported yet"); }
>    | ^(LIST .) { System.out.println("failed"); }
>    ;

-- 
R. Mark Volkmann
Object Computing, Inc.

From antlr at mirality.co.nz  Mon Dec 31 16:03:32 2007
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 01 Jan 2008 13:03:32 +1300
Subject: [antlr-interest] difference between tokens and string literals
In-Reply-To: <f0fcc6820712311440i5807b5fes34850f93fb781339@mail.gmail.co
 m>
References: <f0fcc6820712310734y76e61318vc2b1adf8e258495b@mail.gmail.com>
	<47795acb.0422300a.31f2.ffff9ab8SMTPIN_ADDED@mx.google.com>
	<f0fcc6820712311440i5807b5fes34850f93fb781339@mail.gmail.com>
Message-ID: <20080101000345.EFED011ECAA@www.antlr.org>

At 11:40 1/01/2008, Mark Volkmann wrote:
 >I found out that you can't assign literal values to tokens in a
 >lexer-only grammar. ANTLR outputs an error message when you do
 >that.
 >As far as I can tell, there's no point in using a tokens
 >specification (section 4.4 in the book) in a lexer-only
 >grammar.

Well, that'll learn me to test my suggestions rather than just 
using air code.  Maybe :)

 >Instead of the line above, I was able to use the following.
 >
 >list: LIST list_option terminator -> ^(LIST listOption);

Presumably you meant "^(LIST list_option)" there.

That's good.  I couldn't remember off-hand whether ANTLR would 
automatically insert the appropriate content for named rules or if 
you needed to explicitly specify it in order to get the content 
and source line information to carry across, so I tried to play it 
safe by being more explicit than was actually necessary.

Glad you got it working, anyway.


From parrt at cs.usfca.edu  Mon Dec 31 17:11:42 2007
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 31 Dec 2007 17:11:42 -0800
Subject: [antlr-interest] A rule ANTLR 3 doesn't like [Re: ANTLR 3
	diagnostics]
In-Reply-To: <47743502.9090200@math.purdue.edu>
References: <200712212150.lBLLoDbp013820@math.purdue.edu>
	<476C3D9C.6070206@math.purdue.edu>
	<47742C5D.1070407@math.purdue.edu>
	<47742FB5.3030401@math.purdue.edu>
	<47743502.9090200@math.purdue.edu>
Message-ID: <659AFD0F-88E2-4F8A-B833-2241DF2CBCB4@cs.usfca.edu>

ok, Chap...your grammar takes about 9 seconds to process now instead  
of "can't handle it".  My notes:

* Added the start of a semantic predicate computation for LL(1) to solve
   a problem with slow grammar analysis even with k=1 due to predicates.
   Then I realized the problem with that grammar was elsewhere in my  
code.
   Semantic context really shouldn't be used when preventing closure
   recomputation.  The predicates became huge even though the reduced
   boolean value would be no different.  The analyzer seems faster now  
that
   I am not testing predicate values all the time.  Further it may
   terminate sooner just due to reduced closure recursion.

I'm not convinced my choice is perfect yet but it handles all my  
relevant unit tests and examples.

Grab latest build antlr-2007-12-31.17.tar.gz and let me know if it  
generates correct code. ;)

Ter


From monty at codetransform.com  Mon Dec 31 21:35:27 2007
From: monty at codetransform.com (Monty Zukowski)
Date: Mon, 31 Dec 2007 21:35:27 -0800
Subject: [antlr-interest] soliciting language recipes book outline
	feedback
In-Reply-To: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
References: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
Message-ID: <598864c70712312135k36f330eama622a1e2d530072c@mail.gmail.com>

How about C's typedef?  That's always fun.

I'm also really happy with my little expression language which
generates Java code.  All operators and functions are stored in the
tree as functions, and the functions themselves are defined in a
separate file as snippets of ST templates.  I think that would be a
good little recipe, we can chat further about it if you like.  Sample:

expression:  a+b
grammar: addition!: x:atom PLUS y:atom {##=#[#(FUNCTION, "add:2"), x, y];}
tree: (FUNCTION "add:2" a b)
function definition: add($x, $y) ::= <<$x + $y>>
alternate function definition for BigIntegers: add($x, $y) ::= <<$x.add($y)>>

My language handles different types, but for a cookbook you could
leave that out.

Also fun is handling multiple grammars.  For instance our expression
language is mainly for generating strings, so we have a templating
kind of grammar:

{$interpreted_variable} some static text followed by
{$another_variable + $yet_another}

One grammar breaks it into chunks of either static text or code.  If
it is code it calls the expression grammar on the contents.  Must be
similar to the string template grammar.

Ta

Monty

On Dec 31, 2007 1:52 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Howdy folks,
>
> I've signed up to do another book for pragmatic programmers.  This
> time I'm going to do a collection of "how to" examples/recipes.  The
> book is meant to teach you how to fish not give you fish--the examples
> will be necessarily smallish. I anticipate the level being
> introductory through intermediate as real, big examples will simply
> not fit. I'd like to start out with really brain-dead examples such as
> comma separated value parsing so that I can explain the fundamentals.
> I will always remember the first technical book I read (on 6502
> assembly code code by Lance Levanthal).  This awesome book started out
> showing how to clear a memory location. This gave me the confidence
> that I might actually understand the rest of the book :)
>
> I propose breaking the book up into three main sections: parsing,
> interpretation, translation. I would love to hear peoples feedback
> about what examples would be useful and exciting.  Keep in mind that
> the average example will need to fit in about 5 to 10 pages. Code
> samples will be made available online and not necessarily completely
> printed out in the book to save space. Also I would love to hear your
> feedback about how the recipes should be laid out or described.
>
> Please CC Susannah Pfalzer, with whom I'm fortunate to work with
> again, on your replies as she is not a member of this list. :)
>
> Here is my rough draft list of examples, which is a bit too few.
> Thanks and happy new year!
>
> Ter
> ------------
> I. Parsing recipes
>         comma-separated values (show in java then python or ruby then ANTLR)
>         parsing binary data (fixed and non-fixed size records)
>         parsing log files (in awk/sed/grep then ANTLR)
>         configuration file or JSON or YAML
>         text-based network protocol (e.g., POP, nntp, http)
>         graphs and networks via edge list format
>         read fixed a XML format like:
>                 SVG (vector graphics)
>                 or, RDF ontology graph
>         handling include files
>         parsing island grammars like JSP
>         simplified English imperative statement recognizer
>                 (E.g., games: "pick up gun and shoot spy")
>
> II. Interpretation recipes
>         arithmetic expression trees
>         polynomial differentiation
>         query language (parse and pull data from DB)
>         serial/deserialize objects
>         partial PS interpreter
>         simple programming language interpreter
>
> III. Translation recipes
>         wiki to HTML
>         simplified programming language pretty printer
>         instrumenting simplified programming language with profiling info
>         simple Java byte code generator
>         simple robot control language for lego MindStorm robots
>         class hierarchy generator (awk/sed/grep then grep+ANTLR)
>                 generates DOT format for graphviz to visualize
>

