From firatkucuk at gmail.com  Tue Jan  1 02:05:15 2008
From: firatkucuk at gmail.com (=?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?=)
Date: Tue, 1 Jan 2008 12:05:15 +0200
Subject: [antlr-interest] Python.g string with triple quote
Message-ID: <7385e6fe0801010205i4e8d6e09qbcb3b9a088b9942f@mail.gmail.com>

Hi

These are the Python.g string literal lexer rules:

STRING
    :   ('r'|'u'|'ur')?
        (   '\'\'\'' (options {greedy=false;}:.)* '\'\'\''
        |   '"""' (options {greedy=false;}:.)* '"""'
        |   '"' (ESC|~('\\'|'\n'|'"'))* '"'
        |   '\'' (ESC|~('\\'|'\n'|'\''))* '\''
        )
	;

fragment
ESC
	:	'\\' .
	;

--------------------------

var = """hello"""

this is OK

var = """"hello"""

this is OK

var = """hello""""

this is NOT OK.

and also python shell behaves like that.

Python 2.5.1 (r251:54863, Oct  5 2007, 13:36:32)
[GCC 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> var = """hello"""
>>> var = """"hello"""
>>> var = """hello""""
  File "<stdin>", line 1
    var = """hello""""
                     ^
SyntaxError: EOL while scanning single-quoted string


is there a way to fix this? or is this normal?

-- 
??r. G?r. F?rat K???k
ADAMYO Distance Learning
SAKARYA University / TURKEY

From harald_m_mueller at gmx.de  Tue Jan  1 02:39:32 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 1 Jan 2008 11:39:32 +0100
Subject: [antlr-interest] soliciting language recipes book outline
	feedback
In-Reply-To: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
Message-ID: <20080101103931.5B8C911ECEE@www.antlr.org>

Hi -

At minimum, I would require that there are two solutions for many (? - a few
important) of the examples. In the real world, there is not "the solution."
(and of course, not both/more solutions need to be done down to code ... but
there should - like in any good patterns book - be enough meat so that the
problems are made clear when solving one over the other solution; I'm very
convinced that there is never ever a "perfect solution" in your business).

Just to lay out that "design space" a little: Whether you 

* do your work in the parser;
* create an AST and do your work there;
* create an AST, rewrite in to another AT, do your work there;
* create a complete different structure (e.g. a flow graph [think "byte
code"]) to do your work; 
* create an AST, the create the different structure and do your work there;

depends very much 

* on your current needs ("semantics") (are there "tree jumping semantics" =
work on some distant, even upcoming subtree; "flow jumping semantics" = do
something in the middle of some distant, even umpcoming tree; "simple
semantics" = work recursively down/up the AST);
* on future needs (are you going to add additional semantics to the tree -
optimizations [think constant folding], documentation [think Javadoc], ...)

Before I ever start laying out a grammar, I write down this design space for
a tool - which sometimes results in creating an AST at a time where this
seems "way to complicated" - but I know it will help with that "tiny
language extension" they are already talking about ... or the opposite:
Seeing that a generalization (even a small one) requires much work, I reduce
the machine to a "small one" (and will bill the customer for the large one
when he really claims to need it ...).

Second, there should probably be advice on when/where to stop using ANTLR.
The two "boundaries" that right now come to mind are
* XML - you can do something with ANTLR here (see a few great Wiki entries),
but of course there are lots of XML-specific technologies;
* rewriting - when a rewriting solution is going to become a "calculus,"
other tools (one was mentioned here a few days ago ...) might be a better
choice - but why?

.... just my two cents (also why I find today's wiki entries somewhat ad-hoc
...).

Regards
Harald

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
> Sent: Monday, December 31, 2007 10:52 PM
> To: antlr-interest at antlr.org List
> Cc: Susannah Davidson Pfalzer
> Subject: [antlr-interest] soliciting language recipes book 
> outline feedback
> 
> Howdy folks,
> 
> I've signed up to do another book for pragmatic programmers.  
> This time I'm going to do a collection of "how to" 
> examples/recipes.  The book is meant to teach you how to fish 
> not give you fish--the examples will be necessarily smallish. 
> I anticipate the level being introductory through 
> intermediate as real, big examples will simply not fit. I'd 
> like to start out with really brain-dead examples such as  
> comma separated value parsing so that I can explain the 
> fundamentals.   
> I will always remember the first technical book I read (on 
> 6502 assembly code code by Lance Levanthal).  This awesome 
> book started out showing how to clear a memory location. This 
> gave me the confidence that I might actually understand the 
> rest of the book :)
> 
> I propose breaking the book up into three main sections: 
> parsing, interpretation, translation. I would love to hear 
> peoples feedback about what examples would be useful and 
> exciting.  Keep in mind that the average example will need to 
> fit in about 5 to 10 pages. Code samples will be made 
> available online and not necessarily completely printed out 
> in the book to save space. Also I would love to hear your 
> feedback about how the recipes should be laid out or described.
> 
> Please CC Susannah Pfalzer, with whom I'm fortunate to work 
> with again, on your replies as she is not a member of this list. :)
> 
> Here is my rough draft list of examples, which is a bit too few.   
> Thanks and happy new year!
> 
> Ter
> ------------
> I. Parsing recipes
> 	comma-separated values (show in java then python or 
> ruby then ANTLR)
> 	parsing binary data (fixed and non-fixed size records)
> 	parsing log files (in awk/sed/grep then ANTLR)
> 	configuration file or JSON or YAML
> 	text-based network protocol (e.g., POP, nntp, http)
> 	graphs and networks via edge list format
> 	read fixed a XML format like:
> 		SVG (vector graphics)
> 		or, RDF ontology graph
> 	handling include files
> 	parsing island grammars like JSP
> 	simplified English imperative statement recognizer
> 		(E.g., games: "pick up gun and shoot spy")
> 
> II. Interpretation recipes
> 	arithmetic expression trees
> 	polynomial differentiation
> 	query language (parse and pull data from DB)
> 	serial/deserialize objects
> 	partial PS interpreter
> 	simple programming language interpreter
> 
> III. Translation recipes
> 	wiki to HTML
> 	simplified programming language pretty printer
> 	instrumenting simplified programming language with 
> profiling info
> 	simple Java byte code generator
> 	simple robot control language for lego MindStorm robots
> 	class hierarchy generator (awk/sed/grep then grep+ANTLR)
> 		generates DOT format for graphviz to visualize
> 


From harald_m_mueller at gmx.de  Tue Jan  1 05:30:03 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 1 Jan 2008 14:30:03 +0100
Subject: [antlr-interest] nested parsing (BSDL)
In-Reply-To: <Pine.LNX.4.64.0712301904150.8143@localhost.localdomain>
Message-ID: <20080101133002.DA81511ECB9@www.antlr.org>

> Thanks for responding, see below.
> 
[...]
> > Another possibility would be to try to define a 
> "LONG_STRING" symbol 
> > in the VHDL lexer, which allows string constants with & and 
> comments 
> > to be passed to the lexer as a simple string; thus, you 
> could get rid 
> > of stage 2. above; and maybe it is then possible to call 
> the nested parsers of step 3.
> > immediately while parsing, so that you end up with a 1-pass machine
> 
> Well, I was looking for suggestions on how to do something 
> along these 
> lines.   Given the documentation limitations, I can't even 
> tell if antlr 
> can do this, let alone how.

Ok - I added the code I came up with in the last hour or so for this (it is
C#, but I think it should be understandable to Java and other people ...).

I did not look at the grammar you've supplied in the original email, but
jsut "invented things" along the way ...
Unfortunately, ANTLR 3.x does not support commands for tweaking the text in
a symbol (or rather, it claims it, but that still does not work); however,
in your case it seems easy to assemble the "LONG_TRING" symbol text (which
is now simply "STRING" in the code I provide) manually.

The output of the concrete example is a single AST containing the "outer
structure" with nested ASTs containing the "inner structures:"

(attribute REGISTER_ACCESS ttl74bct8374 (BOUNDARY READBN READBT CELLTST)
(BYPASS TOPHIP SETBYP RUNT TRIBYP) ([ BCR 2 SCANCN SCANCT)) (attribute BLA
ttl74bct8374 3) (attribute BLI ttl74bct8374 (BYPASS 11111111 10001000
00000101 10000100 00000001)) (attribute INSTRUCTION_OPCODE ttl74bct8374
(BYPASS 11111111 10001000 00000101 10000100 00000001) (EXTEST 00000000
10000000) (SAMPLE 00000010 10000010) (INTEST 00000011 10000011) (TRIBYP
00000110 10000110) (SETBYP 00000111 10000111) (RUNT 00001001 10001001)
(READBN 00001010 10001010) (READBT 00001011 10001011) (CELLTST 00001100
10001100) (TOPHIP 00001101 10001101) (SCANCN 00001110 10001110) (SCANCT
00001111 10001111)) (attribute BOUNDARY_REGISTER ttl74bct8374 (17 BC_1 CLK
input X) (16 BC_1 OC_NEG input X) (16 BC_1 * control 1) (15 BC_1 (D 1) input
X) (14 BC_1 (D 2) input X) (13 BC_1 (D 3) input X) (12 BC_1 (D 4) input X)
(11 BC_1 (D 5) input X) (10 BC_1 (D 6) input X) (9 BC_1 (D 7) input X) (8
BC_1 (D 8) input X) (7 BC_1 (Q 1) output3 X 16 1 Z) (6 BC_1 (Q 2) output3 X
16 1 Z) (5 BC_1 (Q 3) output3 X 16 1 Z) (4 BC_1 (Q 4) output3 X 16 1 Z) (3
BC_1 (Q 5) output3 X 16 1 Z) (2 BC_1 (Q 6) output3 X 16 1 Z) (1 BC_1 (Q 7)
output3 X 16 1 Z) (0 BC_1 (Q 8) output3 X 16 1 Z))

Is this what you are looking for?

(And if you do not want to have an AST which you traverse afterwards, but
you want to do actions directly while parsing, this shouldn't be too hard
when you pass a pointer of the outer parser to the inner one, so that the
inner one can work with fields and methods of the outer one; or, probably
better yet, you define a "work context" which you pass to the outer parser
and from there on to the inner one, so that both can happily work along on
that context).

(I feel inclined to upload an example for such a nested parser thing to the
Wiki, but I'm still in some related discussions with Terence ...).

Regards
Harald

-------------- next part --------------
A non-text attachment was scrubbed...
Name: NestedVHDLBSDL.zip
Type: application/x-zip-compressed
Size: 5040 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080101/797bab36/attachment.bin 

From harald_m_mueller at gmx.de  Tue Jan  1 05:57:40 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 1 Jan 2008 14:57:40 +0100
Subject: [antlr-interest] nested parsing (BSDL)
In-Reply-To: <Pine.LNX.4.64.0712301904150.8143@localhost.localdomain>
Message-ID: <20080101135738.873ED11ECBF@www.antlr.org>

A few more comments: 

[...]
> 
> > (but I  would definitely keep the multiple grammars apart).
> 
> I really do not want to keep the grammars separate.

Well, this seems to contradict what the language looks like. A parser
grammar, IMHO, is not the point to retrofit your wishes into the language:
If the language is as crooked as yours (if I understand you correctly), your
grammar should faithfully mirror this crookedness.
Only at the level of ASTs can you go for your "abstract syntax", which can
(and should) be as beautiful as possible.

The other possibility is that you have (or there is) a single-level sensible
grammar for that language which you can directly (not some parser with
re-feed/stream change concepts - that's NOT part of standard grammars
[contextfree, ENBF, whatever]!!). I doubt this, because whoever would have
written this grammar would have jumped out of the window and prayed for a
redesign of the language ...

Still, I do have an idea using the Emit() functionality of lexers to do a
sort of "shove those inner symbols up to the single parser" ... maybe I like
to try this also over my holidays :-)

> BSDL was 
> designed so 
> you could do either.  I want to logically keep the grammar in 
> something 
> resembling the form it really should have been in the first 
> place.  

As I said above, I think this is not a goal to be pursued: The
(lexer+parser) grammar should *describe* what is out there, not abstract
away from it into some wishful thinking direction.

> Understand what you are getting at, however, this is prohibitted
> in the language itself, fortunately.   Concatentation of litteral
> strings is the only form of expression allowed.   

... including white space and comments (as you examples show)! - so it's not
that trivial; and maybe there are preprocessor directives, which could also
crop up inside such a string etc.??? - and what else you have outside the
"conceptual grammar"?
At some point, my  3-pass suggestion will be easier than trying to write
some lexer-level machine which handles all those things at once.
But of course, this is hopefully only a horror scenario ...

> However, I think that parsing inside of strings has a lot of
> applications besides BSDL and needs to be supported and documented.

... therefore I tried to come up some an example code.
I hope I showed how a two-grammar (or N-grammar) machine can be done; I'll
think about a 1-grammar version a little ...

> Needing, for example, 20 different grammars because you have 
> 20 different
> string types, though, would leave a lot to be desired.

In all cases I know (printf or other formatting grammar inside strings;
regex grammar inside strings; Javadoc inside /** comments; C#'s XMLdoc
inside /// comments), it is actually *necessary* to have different grammars
- even the tokenization is different (think of printf vs. C).

You case of a language with nested strings where much of the core
tokenization inside and outside is the same is, I would risk to state, a
very odd example with almost no parallels anywhere else.

Regards
Harald


From harald_m_mueller at gmx.de  Tue Jan  1 08:03:48 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 1 Jan 2008 17:03:48 +0100
Subject: [antlr-interest] nested parsing (BSDL)
Message-ID: <20080101160348.909F011EC20@www.antlr.org>

Me ... a last time ... 

Of course, you can merge my Inner and Outer grammars into one grammar; and
yet fire up a new parser for the strings. You'd end up with a single
combined grammar then!
As the example in the main program (end of email) shows, expression now
allows to write a "spec" inside a string as well as outside - the AST will
always be the same!
Is that acceptable to you?

... still, I more and more find this a very weird language definition; I
don't think that such an "constructs inside as well as outside strings" does
occur anywhere else (on the other hand, I have seen languages that were even
weirder than that - combining free-format and fixed-column format, e.g.
...).

Regards
Harald

-----------------

grammar StringNestedLanguage;

options {
	language=CSharp;
	ASTLabelType=CommonTree;
	output=AST;
}

@parser::members {
    private CommonTree CreateAST(string input) {
		// Console.Out.WriteLine("INNER: " + input);
        ICharStream cs = new ANTLRStringStream(input);
        StringNestedLanguageLexer lexer = new StringNestedLanguageLexer(cs);
        CommonTokenStream ts = new CommonTokenStream(lexer);
        StringNestedLanguageParser parser = new
StringNestedLanguageParser(ts);
        return (CommonTree) parser.specInSTRING().Tree;
    }
}

// Standard entry point for single file.
top : definition*
    ;

definition
    : ATTRIBUTE^ ID OF! ID COLON! ENTITY! IS! expression SEMI!
    ;
    
expression
    : NUMBER
    | // if spec is in string.
      STRING                    -> { CreateAST($STRING.text) }
    | // if spec is written directly.
      spec
    ;

// Additional entry point for in-STRING parsing.
specInSTRING
    : spec 
      EOF!
    ;

spec
    : thing 
      ( COMMA! 
        thing
      )* 
    ;
    
thing
    : ls^
      LPAR!
      param
      ( COMMA! param
      )*
      RPAR!
    ;
    
ls  : ID (LBRCKT^ NUMBER RBRCKT!)?
    | NUMBER
    ;
    
param
    : ID
    | NUMBER
    | ASTERISK
    | thing
    ;

// ------

STRING @init { string t = ""; }
    : s0=SIMPLE_STRING		{ t += $s0.text.Trim('\"'); }
      IGNORE 
      ( '&' 
        IGNORE 
        s1=SIMPLE_STRING	{ t += $s1.text.Trim('\"'); }
        IGNORE
      )*
							{ $text = t; }
    ;

fragment
SIMPLE_STRING
    : '"'! ~('"')* '"'!
    ;

fragment
IGNORE
    : ( IWS
      | INL
      | ICOMMENT
      )*
    ;

fragment
IWS  : (' '|'\t')+
    ;
    
WS   : IWS                       { $channel = HIDDEN; }
	;
	
fragment
INL  : ('\r'|'\n')+                     
    ;

NL   : INL						{ $channel = HIDDEN;
}
	;
	
fragment
ICOMMENT
    : '--' ~('\r'|'\n')* INL             
    ;
    
COMMENT   : ICOMMENT                       { $channel = HIDDEN; }
	;
	
ATTRIBUTE
    : 'attribute'
    ;

ENTITY
    : 'entity'
    ;
    
IS  : 'is'
    ;
    
OF  : 'of'
    ;

ID  : ('A'..'Z'|'a'..'z'|'_') ('A'..'Z'|'a'..'z'|'0'..'9'|'_')*
    ;
    
NUMBER
    : ('0'..'9')+
    ;

SEMI
    : ';'
    ;
    
LPAR
    : '('
    ;
    
RPAR
    : ')'
    ;
        
LBRCKT
    : '['
    ;

RBRCKT
    : ']'
    ;
    
COMMA
    : ','
    ;
    
ASTERISK
    : '*'
    ;
    
COLON
    : ':'
    ;

==============================================

using System;
using Antlr.Runtime;
using Antlr.Runtime.Tree;

namespace Interpreter {
    class Program {
        static void Main() {
            ParseAndInterpret(@"
attribute BLA of ttl74bct8374 : entity is 3;

attribute BLI of ttl74bct8374 : entity is ""BYPASS (11111111, 10001000,
00000101, 10000100, 00000001)"";

attribute BLI of ttl74bct8374 : entity is BYPASS (11111111, 10001000,
00000101, 10000100, 00000001);

attribute INSTRUCTION_OPCODE of ttl74bct8374 : entity is
        ""BYPASS (11111111, 10001000, 00000101, 10000100, 00000001),""   &
        ""EXTEST (00000000, 10000000),""  &
        ""TRIBYP (00000110, 10000110),""  &     -- Boundary Hi-Z
        ""SETBYP (00000111, 10000111),""  &     -- Boundary 1/0
        ""SCANCT (00001111, 10001111)"";        -- BCR Scan test

attribute INSTRUCTION_OPCODE of ttl74bct8374 : entity is
        BYPASS (11111111, 10001000, 00000101, 10000100, 00000001),
        EXTEST (00000000, 10000000),
        TRIBYP (00000110, 10000110),     -- Boundary Hi-Z
        SETBYP (00000111, 10000111),     -- Boundary 1/0
        SCANCT (00001111, 10001111);        -- BCR Scan test

attribute BOUNDARY_REGISTER of ttl74bct8374 : entity is
       -- num cell  port   function safe [ccell disval rslt]
         ""17 (BC_1, CLK,    input,   X),""  &
         ""16 (BC_1, OC_NEG, input,   X),""  &  -- Merged Input/Control
         ""16 (BC_1, *,      control, 1),""  &  -- Merged Input/Control
         ""15 (BC_1, D(1),   input,   X),""  &
         ""8  (BC_1, D(8),   input,   X),""  &
         ""7  (BC_1, Q(1),   output3, X,  16, 1, Z),"" &  -- cell 16 @ 1 ->
Hi-Z.
         ""0  (BC_1, Q(8),   output3, X,  16, 1, Z)"";

attribute BOUNDARY_REGISTER of ttl74bct8374 : entity is
       -- num cell  port   function safe [ccell disval rslt]
         17 (BC_1, CLK,    input,   X),
         16 (BC_1, OC_NEG, input,   X),  -- Merged Input/Control
         16 (BC_1, *,      control, 1),  -- Merged Input/Control
         15 (BC_1, D(1),   input,   X),
         8  (BC_1, D(8),   input,   X),
         7  (BC_1, Q(1),   output3, X,  16, 1, Z),  -- cell 16 @ 1 -> Hi-Z.
         0  (BC_1, Q(8),   output3, X,  16, 1, Z);
");
       }

        private static void ParseAndInterpret(string input) {
            // Setup lexer and parser
            ICharStream cs = new ANTLRStringStream(input);
            StringNestedLanguageLexer lexer = new
StringNestedLanguageLexer(cs);
            CommonTokenStream ts = new CommonTokenStream(lexer);
            StringNestedLanguageParser parser = new
StringNestedLanguageParser(ts);

            // Create the AST
            CommonTree tree = (CommonTree) parser.top().Tree;
            Console.Out.WriteLine(tree.ToStringTree());
        }
    }
}


From sunshine at public.kherson.ua  Tue Jan  1 09:15:56 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 01 Jan 2008 19:15:56 +0200
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <BAY130-DS24DA0019F3DBFD800625286920@phx.gbl>
Message-ID: <C3A041EC.88D78%sunshine@public.kherson.ua>

On 30/10/07 6:47 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:

> I have made a tentative start now, but I have been busy working for a while
> unfortunately. I hope to be back on it next week sometime. The C target has
> worked fine for most people that initially wanted C++ back ends, though
> eventually it will be better to have C++ based actions of course.

Hi Jim,

Once I again I want repeat this question :-)

1) we have few year ago made SQL grammar for ANTLR 2.7.2 made with C++
target.

So I wonder, how easy will be port this to C target.
And what you mean with
>    eventually it will be better to have C++ based actions of course".

You mean now in C target we cannot have actions as

    {
        MyClass * p = new MyClass()
        i.e. Some C++ code
    }

?


2) also I have come to all these issues because again did profile of 100K-1M
INSERTS, and I see big troubles in ANTLR 2.7.2 C++ runtime. As far as I
could see problem come from LA() which calls a lots NextToken() which
creates std::string() what cause call of new() (and later free.

ANTLR parser looks to work 8-10 times slower of YACC or Lemon. And I think
because of this reason.

I have check -- and it seems to be deal of few hard days work to try remove
std::string from C++ runtime of ANTLR 2.7.2 and using instead just
    pair  { char*, length }
    where char* points right into string we do parse.
    I do not see any need today do COPY of each token string.
    btw, how you have implement this in C runtime for v3 ?

Before to do this I was going to check state of deal in ANTLR 3,
and I see that C++ runtime even not exists.

My advice will be not use std::string at all, and do not make not required
copies of strings into each Token object.


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From harald_m_mueller at gmx.de  Tue Jan  1 09:25:20 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 1 Jan 2008 18:25:20 +0100
Subject: [antlr-interest] Line delimted grammar
In-Reply-To: <382433.40612.qm@web82509.mail.mud.yahoo.com>
Message-ID: <20080101172527.895A511ECEC@www.antlr.org>

Hi - here is a simple line-delimited grammar.
The only "interesting thing" is that a "statement" = "line" may end with an
NL (newline/end of line) AS WELL AS a COMMENT_TO_NL. This makes it easier to
write the COMMENT_TO_NL token - it munches up all chars including the
end-of-line chars; and hence can represent an end-of-line.
If you need the white-space also in your result (AST or whatever), the whole
thing is more work, but still easy - the "emtpy line" then will be about

    line : WS (stmt WS)? WS? (COMMENT_TO_NL | NL);

Regards
Harald

grammar LineDelimited;

options {
	language=CSharp;
	output=AST;
}

@header {
	#pragma warning disable 0219
}

file
    : line* EOF!
    ;

line
    : stmt? (COMMENT_TO_NL! | NL!)
    ;
    
stmt
    : 'dir'^ filepattern
    | 'for'^ VAR 'in'! '('! filepattern ')'! 'do'! stmt
    | ID^ filepattern*
    ;

filepattern
    : ( ID | '*' )
      ( '.'!
        (ID | '*')
      )?
    ;

COMMENT_TO_NL
    : '#' ~('\r'|'\n')* NL
    ;

ID  : ('a'..'z'|'0'..'9'|'_')+
	;
	
VAR : '%' ID
    ;

WS  :  (' '|'\t')+ { $channel=HIDDEN; };

NL  : '\r' '\n'
    | '\r' 
    | '\n' 
    ;

===================

using System;
using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Tree;

namespace Interpreter {
    class Program {
        static void Main() {
            ParseAndInterpret(@"
 
                dir *.bak   # only bak files


                for %f in (*.bak) do del *.bak # now they are gone ...
                
                dir *.bak   
                run *.*

                ");

            Console.In.Read();
        }

        private static void ParseAndInterpret(string input) {
            // Setup lexer and parser
            ICharStream cs = new ANTLRStringStream(input);
            LineDelimitedLexer lexer = new LineDelimitedLexer(cs);
            CommonTokenStream ts = new CommonTokenStream(lexer);
            LineDelimitedParser parser = new LineDelimitedParser(ts);

            CommonTree tree = (CommonTree) parser.file().Tree;
            Console.Out.WriteLine(tree.ToStringTree());
        }
   }
}



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Thad
> Sent: Monday, December 03, 2007 7:14 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Line delimted grammar
> 
> For a certain project I am working on I need to parse a 
> complex configuration file. 
> 
> Two propeties of the file are: it is line delimited, and 
> blank lines are ignored.
> 
> I tried to do this a while ago and encountered problems with 
> the line delimitaion.
> 
> Can someone recommend a simple antlr example for a line 
> delimited language with blank lines ignored? ( It seems to be 
> the combination of the two that causes me problems. ) 
> 
> If you can't then can someone post a grammar for a simple 
> language? Something like:
> each program is a list of statements, statements are one 
> line, whitespace is ignored, blank lines are ignored, 
> anything after a # is a comment, lines of the form 
> letter=integer are statements?
> 
> Thanks
> Thad
> 
> PS.
> Is there some simple way to search the archives for old 
> messages? I can help but think that there is something on 
> line delimited grammars in there.
> 


From harald_m_mueller at gmx.de  Tue Jan  1 09:45:18 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 1 Jan 2008 18:45:18 +0100
Subject: [antlr-interest] simple query language EBNF
In-Reply-To: <9acbed8c0712132218idfc8824gbeaf9fa4640d17de@mail.gmail.com>
Message-ID: <20080101174527.7BBF611EC4C@www.antlr.org>

Did you succeed?
I see at least the following problem with your grammar: WS is to be hidden
from the parser ...
 
WS  
    :    (' '|'\t'|'\r'? '\n')+ {$channel=HIDDEN;} ;

... but you use it in your rules, e.g.
 
fromSpec returns [IDateRange result]
    : FROM WS SPECTEXT
 
The rule should instead be
 
fromSpec returns [IDateRange result]
    : FROM SPECTEXT
 
For the rest, I would say that you do NOT want "everything behind the
keyword" - at least that would be a very bad language design (have you done
language design for a few languages already??).
A good language should allow the human reader to understand where the
boundaries between "parsed text" and "non-parsed text" are - therefore you
would design the language e.g. so that the "raw text" is embedded in some
delimiters:
 
from    <LastMonth MultipliedBy 3>
filter  <WeekDays>
filter  <Not Holidays>
set     <EachDay 8-hours>
with    <Expectations>

But no! - you'll exclaim at this ... my users can readily find out the
boundaries by ... what? Maybe it's the newlines? - is the following ok??
 
from    LastMonth MultipliedBy 3 filter WeekDays filter Not Holidays set
EachDay 8-hours with Expectations
 
If it is not, then you have at least an "end delimiter", and you can define
a symbol 
    REST_OF_TEXT : ~NL NL ; 
where NL is your definition of an NL character.
 
It the above one-liner IS ok (i.e. there need not be new-line separations
between clauses), then you should decree that at least the tokenization of
those "tails" is clear - so that you do NOT allow e.g.
 
set     EachDay with 'u'
with   Expectations 

(even though it looks nice: days with 'u' are tUesday, ThUrsday, satUrday
and sUnday ;-) ).
In that case, you define a list of tokens for those tails - e.g.,
identifiers (which in your case include dashes), numbers, and whatever. And
the specText then becomes 
 
   specText : ( ID | NUMBER | ...)*
 
To sum up:
 
* Either you define delimiters around the "open language", between which
"everything goes" (even there, you may want to track nested parentheses
etc.)
* Or you do not delimit the open segments - then you should define the
tokens allows in them.
 
Everything else is not so good; and comes usually under the heading "badly
designed language" ... ... ... ... IMVHO.
 
Regards
Harald


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Pieter Breed
Sent: Friday, December 14, 2007 7:19 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] simple query language EBNF


Hi,

I am trying to get a small special purpose query language working with
ANTLR, and I am having some trouble sorting out the right way to do some
things.

The basic domain problem is this: 

you have some keywords: 'from', 'with', 'display', 'filter', 'set' 
an example of a valid "query" is this:

from    LastMonth MultipliedBy 3
filter  WeekDays
filter  Not Holidays
set     EachDay 8-hours
with    Expectations

The idea is that ANTLR only takes care of the big structure of the query
(sorting out what string value goes with from, what string value goes with
filter etc) and then I will use these strings and do custom parsing on them.
(Using reflections. Ex, LastMonth is a method on a specific object, it has a
method Multipliedby which takes a parameter 3 and so on) 

My ANTLR problem is that I want the raw text "LastMonth MultipliedBy 3" as
output from ANTLR, but I don't know how to specify that rule. I don't know
how say "everything but one of the commandwords". Below I tried to use
string quoting to delimit the text I am interested in, but that also doesn't
work. 

This is what I have at the moment (I am troubleshooting at the moment, so I
put the comments in queryLine rule to help with this.):

grammar WorkLogQL; 

tokens {
    FROM = 'from';
    WITH = 'with';
    FILTER = 'filter';
    SET = 'set';
    DISPLAY = 'display';
}

queryLine
    :    fromSpec 
        //(WS filterSpec)* 
        //WS actionSpec 
        //WS withSpec
    ;

fromSpec returns [IDateRange result]
    : FROM WS SPECTEXT
        {
            result = ParseDateRangeSpecification($SPECTEXT.value); 
        }
    ;

withSpec
    :    WITH WS SPECTEXT
    ;

actionSpec
    : DISPLAY
    |    SET WS SPECTEXT
    ;

filterSpec
    :    FILTER WS SPECTEXT
    ;

SPECTEXT 
    :    '\'' .+ '\''
    ;
    
WS  
    :    (' '|'\t'|'\r'? '\n')+ {$channel=HIDDEN;} ;

As is (ie, with the comments) and this input: 
from 'Today'

The parser falls over in SPECTEXT. When I am running in ANTLRWorks, in the
Interpreter mode, I get a tree that looks something like this: 
<grammar worklogql>
<queryLine> 
<fromSpec>
<from> - <MismatchedTokenException> 

How can I get this working? Any ideas?

Regards,
Pieter
-- 

Tempus est mensura motus rerum mobilium. 
Time is the measure of movement.

   -- Auctoritates Aristotelis 

+27 82 567 6207
http://pieterbreed.blogspot.com/ 




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080101/77b430eb/attachment.html 

From harald_m_mueller at gmx.de  Tue Jan  1 09:52:06 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 1 Jan 2008 18:52:06 +0100
Subject: [antlr-interest] simple query language EBNF
In-Reply-To: <20080101174527.7BBF611EC4C@www.antlr.org>
Message-ID: <20080101175204.9FA8911ECED@www.antlr.org>

>...If it is not, then you have at least an "end delimiter", and you can
define a symbol  
>     REST_OF_TEXT : ~NL NL ;  
> where NL is your definition of an NL character. 
 
.. well, no, you can't (even if you add the * I forgot). But you can then
define your "clauses" to be actual tokens, e.g. 
 
FROM : 'from' (~NL)* NL;
 
etc. 
 
Rest should be clear, I hope.
Regards
Harald
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080101/440b8a40/attachment-0001.html 

From jimi at temporal-wave.com  Tue Jan  1 11:49:27 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 1 Jan 2008 11:49:27 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <C3A041EC.88D78%sunshine@public.kherson.ua>
Message-ID: <"L4F14E6E685824bc9874DDB28CDE23429.1199217530.scalix.temporal-wave.com*"@MHS>

Yes - the new C++ runtime (when I eventually finish it!) will not 
allocate any memory for the token strings unless you access it. It will 
also avoid smart pointers and things. However, at the end of the day, 
unless you really really want to use C++ in your actions, I think that 
the C target will always be a little bit faster. Hence I am also going 
to look at making the C target more C++ compatible too.

Porting a C++ 2.7 grammar to 3.x C probably involves more work on the 
grammar and tree stuff than it does on the C++ to C work. In general I 
advise people to limit the action code to API calls, which means that 
you would need to supply a C linkable interface to your current code, 
then keep your grammar and action ode as separate as possible. Grammars 
that hae too much of the for actions directly typed in to them tend to 
be difficult to read anyway.

Jim

> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine at public.kherson.ua]
> Sent: Tuesday, January 01, 2008 9:16 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] More, Status of C++ backend?
> 
> On 30/10/07 6:47 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:
> 
> > I have made a tentative start now, but I have been busy working for 
a
> while
> > unfortunately. I hope to be back on it next week sometime. The C 
target
> has
> > worked fine for most people that initially wanted C++ back ends, 
though
> > eventually it will be better to have C++ based actions of course.
> 
> Hi Jim,
> 
> Once I again I want repeat this question :-)
> 
> 1) we have few year ago made SQL grammar for ANTLR 2.7.2 made with C++
> target.
> 
> So I wonder, how easy will be port this to C target.
> And what you mean with
> >    eventually it will be better to have C++ based actions of 
course".
> 
> You mean now in C target we cannot have actions as
> 
>     {
>         MyClass * p = new MyClass()
>         i.e. Some C++ code
>     }
> 
> ?
> 
> 
> 2) also I have come to all these issues because again did profile of 
100K-
> 1M
> INSERTS, and I see big troubles in ANTLR 2.7.2 C++ runtime. As far as 
I
> could see problem come from LA() which calls a lots NextToken() which
> creates std::string() what cause call of new() (and later free.
> 
> ANTLR parser looks to work 8-10 times slower of YACC or Lemon. And I 
think
> because of this reason.
> 
> I have check -- and it seems to be deal of few hard days work to try
> remove
> std::string from C++ runtime of ANTLR 2.7.2 and using instead just
>     pair  { char*, length }
>     where char* points right into string we do parse.
>     I do not see any need today do COPY of each token string.
>     btw, how you have implement this in C runtime for v3 ?
> 
> Before to do this I was going to check state of deal in ANTLR 3,
> and I see that C++ runtime even not exists.
> 
> My advice will be not use std::string at all, and do not make not 
required
> copies of strings into each Token object.
> 
> 
> --
> Best regards,
> 
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
> 
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
> 
> [I feel the need: the need for speed]
> 
> 



From sunshine at public.kherson.ua  Tue Jan  1 12:23:37 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 01 Jan 2008 22:23:37 +0200
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"L4F14E6E685824bc9874DDB28CDE23429.1199217530.scalix.temporal-wave.com*"@MHS>
Message-ID: <C3A06DE9.88DA0%sunshine@public.kherson.ua>

On 1/1/08 9:49 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:

Hi Jim,

> Yes - the new C++ runtime (when I eventually finish it!) will not
> allocate any memory for the token strings unless you access it. It will
> also avoid smart pointers and things. However, at the end of the day,
> unless you really really want to use C++ in your actions, I think that
> the C target will always be a little bit faster. Hence I am also going
> to look at making the C target more C++ compatible too.
> 
> Porting a C++ 2.7 grammar to 3.x C probably involves more work on the
> grammar and tree stuff than it does on the C++ to C work. In general I
> advise people to limit the action code to API calls, which means that
> you would need to supply a C linkable interface to your current code,
> then keep your grammar and action ode as separate as possible. Grammars
> that hae too much of the for actions directly typed in to them tend to
> be difficult to read anyway.

Do you mean something as

Tree_rule:
    {Sql_Node_Ptr p = make_sql_insert_node(); }
    
?

All our such factories return our C++ nodes.

I do not see reason why this should not work in C runtime,
Except as make it compile as CPP.


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From siemsen at ucar.edu  Tue Jan  1 13:02:51 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Tue, 1 Jan 2008 14:02:51 -0700
Subject: [antlr-interest] passing stuff from lexer to parser
Message-ID: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>

Is there an elegant way to pass extra information from the lexer  
phase to the parser phase of an ANTLR translator?

My input is a bunch of source files in a directory tree.   I want to  
output a new directory tree with the same layout as the source  
directory tree.  In the top-level source directory is a special file  
that "includes" all the other files in the source directory tree in  
the proper order.  It contains lines like

#pragma include ("qualifiers_optional.mof")
#pragma include ("Core/CIM_ManagedElement.mof")
#pragma include ("Core/CIM_ManagedSystemElement.mof")
#pragma include ("Core/CIM_SystemStatisticalInformation.mof")
#pragma include ("Database/CIM_CommonDatabaseSettingData.mof")
#pragma include ("Database/CIM_CommonDatabaseStatistics.mof")
#pragma include ("Database/CIM_DatabaseResourceStatistics.mof")

etc.

To handle the include statements, I use the mechanism described in  
the ANTLR Wiki page titled "How do I implement include files?".  It  
works great.  It does its magic during the lexer phase.  So all the  
source files are lexed first into one big token stream, then the  
parser starts.

Currently, my translator just emits output to standard out, as one  
text stream.  Now I'm ready to make it put the output into  
directories and files.  The source text is a set of things with names  
like CIM_DatabaseResourceStatistics, so I know what to name each  
output file.  I just need to know what directory to put each output  
file in.

During the lexer phase, I store the name-to-directory information in  
a HashMap.  So for example, the HashMap tells me that the output file  
named CIM_DatabaseResourceStatistics.java belongs in the output  
subdirectory named "Database".

I need to pass the HashMap from the lexer to the parser.  Is there a  
good way to do it?  Am I thinking about the problem correctly?

-- Pete

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080101/30e891d2/attachment.html 

From antlr at mirality.co.nz  Tue Jan  1 14:13:28 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 02 Jan 2008 11:13:28 +1300
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
Message-ID: <20080101221342.53FAD11ED01@www.antlr.org>

At 10:02 2/01/2008, siemsen at ucar.edu wrote:
>To handle the include statements, I use the mechanism described 
>in the ANTLR Wiki page titled "How do I implement include 
>files?".  It works great.  It does its magic during the lexer 
>phase.  So all the source files are lexed first into one big 
>token stream, then the parser starts.
>
>Currently, my translator just emits output to standard out, as 
>one text stream.  Now I'm ready to make it put the output into 
>directories and files.  The source text is a set of things with 
>names like CIM_DatabaseResourceStatistics, so I know what to name 
>each output file.  I just need to know what directory to put each 
>output file in.

If you're generating separate outputs for each file, then treating 
it as a single lexer stream seems a little odd.  (Not necessarily 
wrong, especially if there are dependencies between the 
files.  Just odd.)

If there aren't order-based dependencies between the files, then 
it might be better to treat them as separate translation units and 
invoke separate instances of the lexer/parser to deal with them.

>During the lexer phase, I store the name-to-directory information 
>in a HashMap.  So for example, the HashMap tells me that the 
>output file named CIM_DatabaseResourceStatistics.java belongs in 
>the output subdirectory named "Database".
>
>I need to pass the HashMap from the lexer to the parser.  Is 
>there a good way to do it?  Am I thinking about the problem 
>correctly?

Probably the easiest way to do this is to pass an INCLUDE token up 
to the parser that contains the full filename, and let the parser 
reconstruct the HashMap itself.  Or you could use it in a scope 
instead, since presumably everything else is logically contained 
within one or more INCLUDEs.


From adam.rpconnelly at googlemail.com  Tue Jan  1 18:22:05 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Wed, 2 Jan 2008 02:22:05 +0000
Subject: [antlr-interest] Javadoc style parsing
Message-ID: <b9a39b060801011822u581853b3ifd94a46c1bd7fa53@mail.gmail.com>

Hi,

Just wanted to ask for some ideas.  I'm designing a language and have most
of the grammar done (I've still to add a few bits in and put in the template
generation).  The language is a modeling language for describing some
database objects and I'd like to allow some meta-data to hold a human
friendly description of these objects.

I had an idea of having a special type of comment (like in javadoc) that I
would send to a different channel than the standard parser.  I could then
parse these comments separately (although this might not end up being
desirable).  This would mean that I wouldn't have to put in references to an
optional comment rule wherever comments were allowed.

The downside to this that I can see at the moment is that I'm not sure how I
would then get the information about the object that each comment was
attached to.

Any ideas?

Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/de97fd7c/attachment.html 

From jimi at temporal-wave.com  Tue Jan  1 18:20:38 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 1 Jan 2008 18:20:38 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <C3A06DE9.88DA0%sunshine@public.kherson.ua>
Message-ID: <"LF5F7A181D5D24c2d933F587C8496D0C9.1199241008.scalix.temporal-wave.com*"@MHS>


> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine at public.kherson.ua]
...
> > Porting a C++ 2.7 grammar to 3.x C probably involves more work on 
the
> > grammar and tree stuff than it does on the C++ to C work. In general 
I
> > advise people to limit the action code to API calls, which means 
that
> > you would need to supply a C linkable interface to your current 
code,
> > then keep your grammar and action ode as separate as possible. 
Grammars
> > that hae too much of the for actions directly typed in to them tend 
to
> > be difficult to read anyway.
> 
> Do you mean something as
> 
> Tree_rule:
>     {Sql_Node_Ptr p = make_sql_insert_node(); }
> 
> ?
> 
> All our such factories return our C++ nodes.
> 
> I do not see reason why this should not work in C runtime,
> Except as make it compile as CPP.
> 
The generated C needs a little tweaking so that you could compile it as 
CPP - it isn't difficult to do this and I have been meaning to. I would 
suggest that you try a few examples and see if you feel your performance 
problems would be solved this way. They probably would be, but I am 
happy to make any improvements that practical applications reveal to be 
worth it.

Jim


From markwright at internode.on.net  Tue Jan  1 18:49:21 2008
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 2 Jan 2008 13:49:21 +1100
Subject: [antlr-interest] More, Status of C++ backend?
Message-ID: <20080102134921.00007e59@goanna>

> 2) also I have come to all these issues because again did profile of
> 100K-1M INSERTS, and I see big troubles in ANTLR 2.7.2 C++ runtime.
> As far as I could see problem come from LA() which calls a lots
> NextToken() which creates std::string() what cause call of new() (and
> later free.
> 
> ANTLR parser looks to work 8-10 times slower of YACC or Lemon. And I
> think because of this reason.
> 
> I have check -- and it seems to be deal of few hard days work to try
> remove std::string from C++ runtime of ANTLR 2.7.2 and using instead
> just pair  { char*, length }
>     where char* points right into string we do parse.
>     I do not see any need today do COPY of each token string.
>     btw, how you have implement this in C runtime for v3 ?

Hello Ruslan and Jim,

Another idea is:  maybe it might be easier to find a way to optionally
plug in Andrei Alexandrescu's flex_string instead of std::string.
flex_string is used in the Boost Wave project, presumably for the
same reason.

Thanks, Mark

-- 

From jimi at temporal-wave.com  Tue Jan  1 18:36:26 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 1 Jan 2008 18:36:26 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <20080102134921.00007e59@goanna>
Message-ID: <"L2DFC47BC1F194f3b98F7A9D117A48FC0.1199241954.scalix.temporal-wave.com*"@MHS>

Possible, but the C runtime already has a string too and I prefer to 
keep away from third party dependencies, even if they are decent ones.

Jim

> -----Original Message-----
> From: Mark Wright [mailto:markwright at internode.on.net]
> Sent: Tuesday, January 01, 2008 6:49 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] More, Status of C++ backend?
> 
> > 2) also I have come to all these issues because again did profile of
> > 100K-1M INSERTS, and I see big troubles in ANTLR 2.7.2 C++ runtime.
> > As far as I could see problem come from LA() which calls a lots
> > NextToken() which creates std::string() what cause call of new() 
(and
> > later free.
> >
> > ANTLR parser looks to work 8-10 times slower of YACC or Lemon. And I
> > think because of this reason.
> >
> > I have check -- and it seems to be deal of few hard days work to try
> > remove std::string from C++ runtime of ANTLR 2.7.2 and using instead
> > just pair  { char*, length }
> >     where char* points right into string we do parse.
> >     I do not see any need today do COPY of each token string.
> >     btw, how you have implement this in C runtime for v3 ?
> 
> Hello Ruslan and Jim,
> 
> Another idea is:  maybe it might be easier to find a way to optionally
> plug in Andrei Alexandrescu's flex_string instead of std::string.
> flex_string is used in the Boost Wave project, presumably for the
> same reason.
> 
> Thanks, Mark
> 
> --



From markwright at internode.on.net  Tue Jan  1 19:37:32 2008
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 2 Jan 2008 14:37:32 +1100
Subject: [antlr-interest] More, Status of C++ backend?
Message-ID: <20080102143732.00006df8@goanna>

> Possible, but the C runtime already has a string too and I prefer to 
> keep away from third party dependencies, even if they are decent ones.
>
> Jim

Hello Jim,

That sounds perfectly reasonable.  I agree with whatever you decide
on free work you are doing for us :-) (I am also working on a freeware
software project).

Just another crazy idea which you can ignore if you wish:

Since flex_string is API compatible with std::string, *if* you
wanted to use std::string by default in the ANTLR C++ runtime,
then maybe the ANTLR C++ runtime header files could look for a C
pre-processor #define before deciding to #include <string>, so that
the user could optionally plug in flex_string if they wanted to.
The user could create a typedef of their chosen flex_string
in a header file that is #include'd before the ANTLR C++ runtime
header files. 

Thanks, Mark

-- 

From jonathan.thomas at ca.com  Tue Jan  1 19:28:33 2008
From: jonathan.thomas at ca.com (Jonathan T)
Date: Wed, 02 Jan 2008 14:28:33 +1100
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"L2DFC47BC1F194f3b98F7A9D117A48FC0.1199241954.scalix.temporal-wave.com*"@MHS>
References: <"L2DFC47BC1F194f3b98F7A9D117A48FC0.1199241954.scalix.temporal-wave.com*"@MHS>
Message-ID: <477B04E1.30106@ca.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/9b7a7091/attachment.html 

From siemsen at ucar.edu  Tue Jan  1 20:48:30 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Tue, 1 Jan 2008 21:48:30 -0700
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <20080101221342.9EDC6309C051@nscan2.ucar.edu>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
	<20080101221342.9EDC6309C051@nscan2.ucar.edu>
Message-ID: <991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>

Gavin,

Thanks, that makes perfect sense.  It's certainly better than what I  
was trying to do with a HashMap.  I think I'm thinking about this  
more clearly now.

I understand the idea, but I can't seem to implement it.  I have a  
"PragmaInclude" lexer rule that reads each include statement and  
switches the input stream to the new file.  It works.  I'd like to do  
what you suggest, and access the PragmaInclude token in the parser,  
so the parser can see the file name.  The odd thing is that the lexer  
doesn't seem to generate a PragmaInclude token.

Attached is the grammar.  In it, the "compilerDirective" parser rule  
uses the PragmaInclude token.  I couldn't get compilerDirective to  
"fire" while parsing.  I discovered that I could comment the  
compilerDirective rule completely and the translator would still  
behave the same.  It seems to me that the lexer never creates a  
PragmaInclude token, even though the PragmaInclude definitely executes.

What am I missing?

-- Pete
-------------- next part --------------
A non-text attachment was scrubbed...
Name: cimmof2java.g
Type: application/octet-stream
Size: 18879 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080101/ad9f2a64/attachment-0001.obj 
-------------- next part --------------



On Jan 1, 2008, at 3:13 PM, Gavin Lambert wrote:

> At 10:02 2/01/2008, siemsen at ucar.edu wrote:
>> To handle the include statements, I use the mechanism described in  
>> the ANTLR Wiki page titled "How do I implement include files?".   
>> It works great.  It does its magic during the lexer phase.  So all  
>> the source files are lexed first into one big token stream, then  
>> the parser starts.
>>
>> Currently, my translator just emits output to standard out, as one  
>> text stream.  Now I'm ready to make it put the output into  
>> directories and files.  The source text is a set of things with  
>> names like CIM_DatabaseResourceStatistics, so I know what to name  
>> each output file.  I just need to know what directory to put each  
>> output file in.
>
>> During the lexer phase, I store the name-to-directory information  
>> in a HashMap.  So for example, the HashMap tells me that the  
>> output file named CIM_DatabaseResourceStatistics.java belongs in  
>> the output subdirectory named "Database".
>>
>> I need to pass the HashMap from the lexer to the parser.  Is there  
>> a good way to do it?  Am I thinking about the problem correctly?
>
> Probably the easiest way to do this is to pass an INCLUDE token up  
> to the parser that contains the full filename, and let the parser  
> reconstruct the HashMap itself.  Or you could use it in a scope  
> instead, since presumably everything else is logically contained  
> within one or more INCLUDEs.
>


From tbrandonau at gmail.com  Tue Jan  1 21:34:11 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Wed, 2 Jan 2008 16:34:11 +1100
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
	<20080101221342.9EDC6309C051@nscan2.ucar.edu>
	<991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>
Message-ID: <ebc876d70801012134x54b88c15qf13bfc6767d3f704@mail.gmail.com>

On Jan 2, 2008 3:48 PM,  <siemsen at ucar.edu> wrote:
> Gavin,
>
> Thanks, that makes perfect sense.  It's certainly better than what I
> was trying to do with a HashMap.  I think I'm thinking about this
> more clearly now.
>
> I understand the idea, but I can't seem to implement it.  I have a
> "PragmaInclude" lexer rule that reads each include statement and
> switches the input stream to the new file.  It works.  I'd like to do
> what you suggest, and access the PragmaInclude token in the parser,
> so the parser can see the file name.  The odd thing is that the lexer
> doesn't seem to generate a PragmaInclude token.
>
> Attached is the grammar.  In it, the "compilerDirective" parser rule
> uses the PragmaInclude token.  I couldn't get compilerDirective to
> "fire" while parsing.  I discovered that I could comment the
> compilerDirective rule completely and the translator would still
> behave the same.  It seems to me that the lexer never creates a
> PragmaInclude token, even though the PragmaInclude definitely executes.
>
> What am I missing?
The call to Lexer.reset() clears the information token information
from the PragmaInclude rule. In fact the call to setCharStream calls
reset() also so this seems redundant and removing it won't solve the
issue (the extra call will additionally seek the new token stream to 0
but this shouldn't be needed). Rather than calling setCharStream you
could update input directly and not call reset though this is not
really advisable as future versions of ANTLR could easily break this
(I think 3.1 will).
Your design seems somewhat strange. Can the top level file also
include normal statements or only includes? Where does the output for
normal statements go? Can the included files contain includes and if
so what happens with the output for them?
It looks like you're processing a list of different input files to be
separately processed, not a file with includes. In that case I think
Gavin's suggestion of separately processing each file is better. Then
you top level grammar would just handle the include syntax and end up
with a list linking include file names to ASTs or templates or
whatever the result of processing each include is.

Tom.
>
> -- Pete
>
>
>
>
> On Jan 1, 2008, at 3:13 PM, Gavin Lambert wrote:
>
> > At 10:02 2/01/2008, siemsen at ucar.edu wrote:
> >> To handle the include statements, I use the mechanism described in
> >> the ANTLR Wiki page titled "How do I implement include files?".
> >> It works great.  It does its magic during the lexer phase.  So all
> >> the source files are lexed first into one big token stream, then
> >> the parser starts.
> >>
> >> Currently, my translator just emits output to standard out, as one
> >> text stream.  Now I'm ready to make it put the output into
> >> directories and files.  The source text is a set of things with
> >> names like CIM_DatabaseResourceStatistics, so I know what to name
> >> each output file.  I just need to know what directory to put each
> >> output file in.
> >
> >> During the lexer phase, I store the name-to-directory information
> >> in a HashMap.  So for example, the HashMap tells me that the
> >> output file named CIM_DatabaseResourceStatistics.java belongs in
> >> the output subdirectory named "Database".
> >>
> >> I need to pass the HashMap from the lexer to the parser.  Is there
> >> a good way to do it?  Am I thinking about the problem correctly?
> >
> > Probably the easiest way to do this is to pass an INCLUDE token up
> > to the parser that contains the full filename, and let the parser
> > reconstruct the HashMap itself.  Or you could use it in a scope
> > instead, since presumably everything else is logically contained
> > within one or more INCLUDEs.
> >
>
>
>

From laguest at archeia.com  Tue Jan  1 22:43:26 2008
From: laguest at archeia.com (Luke A. Guest)
Date: Wed, 02 Jan 2008 06:43:26 +0000
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"L2DFC47BC1F194f3b98F7A9D117A48FC0.1199241954.scalix.temporal-wave.com*"@MHS>
References: <"L2DFC47BC1F194f3b98F7A9D117A48FC0.1199241954.scalix.temporal-wave.com*"@MHS>
Message-ID: <1199256206.5983.8.camel@rogue>

On Tue, 2008-01-01 at 18:36 -0800, Jim Idle wrote:
> Possible, but the C runtime already has a string too and I prefer to 
> keep away from third party dependencies, even if they are decent ones.

I have to say that it really does make sense to have the C++ sources
depend on the C sources. i.e. for the C++ to use the C string sources is
fine IMO. I mean what would be the point in rewriting the string code
specifically for C++?

Luke.



From antlr.org at pb.co.za  Wed Jan  2 00:49:13 2008
From: antlr.org at pb.co.za (Pieter Breed)
Date: Wed, 2 Jan 2008 10:49:13 +0200
Subject: [antlr-interest] simple query language EBNF
In-Reply-To: <477a7c37.2876420a.73be.fffff0b0SMTPIN_ADDED@mx.google.com>
References: <9acbed8c0712132218idfc8824gbeaf9fa4640d17de@mail.gmail.com>
	<477a7c37.2876420a.73be.fffff0b0SMTPIN_ADDED@mx.google.com>
Message-ID: <9acbed8c0801020049g16a658b4ifbf1cfd98117ca76@mail.gmail.com>

Hi Harald,

Thank you very much for your post; to answer your questions: No, I have
never designed languages before, but I've had to write a few recursive
descent compilers from given EBNF definitions, but that's it. I find it very
hard going for a for-interest-only project, I am thinking of dropping this
for now and looking at this again in a few weeks.

I looked at your suggestions, and came up with the following:

queryLine
    :    fromSpec ;

fromSpec
    : FROM SPECTEXT
    ;

SPECTEXT
    :    (~NL)+ NL
    ;

NL
    : '\r'? '\n'
    ;

WS
    :    (' '|'\t')+ {$channel=HIDDEN;}
    ;

(I left out a few dead ends so the line numbers below won't make sense...)

This seems to hang ANTLRWorks (1.1.5); the interpreting dialog doesn't go
away... there are a few errors on the console though. This is what they say:

[10:48:10] error(100): WorkLogQL.g:0:0: syntax error: buildnfa: <AST>:40:4:
unexpected AST node: ?
[10:48:10] error(100): WorkLogQL.g:0:0: syntax error: buildnfa: <AST>:40:10:
expecting EOA, found ''\n''
[10:48:10] warning(200): WorkLogQL.g:36:8: Decision can match input such as
"'\r'" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[10:48:10] warning(200): WorkLogQL.g:36:8: Decision can match input such as
"'\n'" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[10:48:10] warning(201): WorkLogQL.g:36:8: The following alternatives are
unreachable: 2

[10:48:10] warning(208): WorkLogQL.g:39:1: The following token definitions
are unreachable: NL
[10:48:10] Interpreting...
[10:48:10] error(100): WorkLogQL.g:0:0: syntax error: buildnfa: <AST>:40:4:
unexpected AST node: ?
[10:48:10] error(100): WorkLogQL.g:0:0: syntax error: buildnfa: <AST>:40:10:
expecting EOA, found ''\n''
[10:48:10] warning(200): WorkLogQL.g:36:8: Decision can match input such as
"'\r'" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[10:48:10] warning(200): WorkLogQL.g:36:8: Decision can match input such as
"'\n'" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[10:48:10] warning(201): WorkLogQL.g:36:8: The following alternatives are
unreachable: 2

[10:48:10] warning(208): WorkLogQL.g:39:1: The following token definitions
are unreachable: NL

So the error messages are pretty clear, but I still don't get them... I
thought I was smarter than this ;)

Regards,
Pieter


On Jan 1, 2008 7:45 PM, Harald M. M?ller <harald_m_mueller at gmx.de> wrote:

>  Did you succeed?
> I see at least the following problem with your grammar: WS is to be hidden
> from the parser ...
>
> WS
>     :    (' '|'\t'|'\r'? '\n')+ {$channel=HIDDEN;} ;
> ... but you use it in your rules, e.g.
>
> fromSpec returns [IDateRange result]
>     : FROM WS SPECTEXT
>
> The rule should instead be
>
> fromSpec returns [IDateRange result]
>     : FROM SPECTEXT
>
> For the rest, I would say that you do NOT want "everything behind the
> keyword" - at least that would be a very bad language design (have you done
> language design for a few languages already??).
> A good language should allow the human reader to understand where the
> boundaries between "parsed text" and "non-parsed text" are - therefore you
> would design the language e.g. so that the "raw text" is embedded in some
> delimiters:
>
> from    <LastMonth MultipliedBy 3>
> filter  <WeekDays>
> filter  <Not Holidays>
> set     <EachDay 8-hours>
> with    <Expectations>
> But no! - you'll exclaim at this ... my users can readily find out the
> boundaries by ... what? Maybe it's the newlines? - is the following ok??
>
>  from    LastMonth MultipliedBy 3 filter WeekDays filter Not Holidays
> set EachDay 8-hours with Expectations
>
> If it is not, then you have at least an "end delimiter", and you can
> define a symbol
>     REST_OF_TEXT : ~NL NL ;
> where NL is your definition of an NL character.
>
> It the above one-liner IS ok (i.e. there need not be new-line separations
> between clauses), then you should decree that at least the tokenization of
> those "tails" is clear - so that you do NOT allow e.g.
>
> set     EachDay with 'u'
> with   Expectations
> (even though it looks nice: days with 'u' are tUesday, ThUrsday, satUrday
> and sUnday ;-) ).
> In that case, you define a list of tokens for those tails - e.g.,
> identifiers (which in your case include dashes), numbers, and whatever. And
> the specText then becomes
>
>    specText : ( ID | NUMBER | ...)*
>
> To sum up:
>
> * Either you define delimiters around the "open language", between which
> "everything goes" (even there, you may want to track nested parentheses
> etc.)
> * Or you do not delimit the open segments - then you should define the
> tokens allows in them.
>
> Everything else is not so good; and comes usually under the heading "badly
> designed language" ... ... ... ... IMVHO.
>
> Regards
> Harald
>
>  ------------------------------
> *From:* antlr-interest-bounces at antlr.org [mailto:
> antlr-interest-bounces at antlr.org] *On Behalf Of *Pieter Breed
> *Sent:* Friday, December 14, 2007 7:19 AM
> *To:* antlr-interest at antlr.org
> *Subject:* [antlr-interest] simple query language EBNF
>
>  Hi,
>
> I am trying to get a small special purpose query language working with
> ANTLR, and I am having some trouble sorting out the right way to do some
> things.
>
> The basic domain problem is this:
>
> you have some keywords: 'from', 'with', 'display', 'filter', 'set'
> an example of a valid "query" is this:
>
> from    LastMonth MultipliedBy 3
> filter  WeekDays
> filter  Not Holidays
> set     EachDay 8-hours
> with    Expectations
>
> The idea is that ANTLR only takes care of the big structure of the query
> (sorting out what string value goes with from, what string value goes with
> filter etc) and then I will use these strings and do custom parsing on them.
> (Using reflections. Ex, LastMonth is a method on a specific object, it has a
> method Multipliedby which takes a parameter 3 and so on)
>
> My ANTLR problem is that I want the raw text "LastMonth MultipliedBy 3" as
> output from ANTLR, but I don't know how to specify that rule. I don't know
> how say "everything but one of the commandwords". Below I tried to use
> string quoting to delimit the text I am interested in, but that also doesn't
> work.
>
> This is what I have at the moment (I am troubleshooting at the moment, so
> I put the comments in queryLine rule to help with this.):
>
> grammar WorkLogQL;
>
> tokens {
>     FROM = 'from';
>     WITH = 'with';
>     FILTER = 'filter';
>     SET = 'set';
>     DISPLAY = 'display';
> }
>
> queryLine
>     :    fromSpec
>         //(WS filterSpec)*
>         //WS actionSpec
>         //WS withSpec
>     ;
>
> fromSpec returns [IDateRange result]
>     : FROM WS SPECTEXT
>         {
>             result = ParseDateRangeSpecification($SPECTEXT.value);
>         }
>     ;
>
> withSpec
>     :    WITH WS SPECTEXT
>     ;
>
> actionSpec
>     : DISPLAY
>     |    SET WS SPECTEXT
>     ;
>
> filterSpec
>     :    FILTER WS SPECTEXT
>     ;
>
> SPECTEXT
>     :    '\'' .+ '\''
>     ;
>
> WS
>     :    (' '|'\t'|'\r'? '\n')+ {$channel=HIDDEN;} ;
>
> As is (ie, with the comments) and this input:
> from 'Today'
>
> The parser falls over in SPECTEXT. When I am running in ANTLRWorks, in the
> Interpreter mode, I get a tree that looks something like this:
> <grammar worklogql>
> <queryLine>
> <fromSpec>
> <from> - <MismatchedTokenException>
>
> How can I get this working? Any ideas?
>
> Regards,
> Pieter
> --
>
> Tempus est mensura motus rerum mobilium.
> Time is the measure of movement.
>
>    -- Auctoritates Aristotelis
>
> +27 82 567 6207
> http://pieterbreed.blogspot.com/
>
>
>
>


-- 
"Things which matter most, should never be at the mercy of things which
matter least." - Goethe.

+27 82 567 6207
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/af865b1a/attachment-0001.html 

From sunshine at public.kherson.ua  Wed Jan  2 03:09:33 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Wed, 02 Jan 2008 13:09:33 +0200
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <20080102134921.00007e59@goanna>
Message-ID: <C3A13D8D.88E6B%sunshine@public.kherson.ua>

On 2/1/08 4:49 AM, "Mark Wright" <markwright at internode.on.net> wrote:

>> 2) also I have come to all these issues because again did profile of
>> 100K-1M INSERTS, and I see big troubles in ANTLR 2.7.2 C++ runtime.
>> As far as I could see problem come from LA() which calls a lots
>> NextToken() which creates std::string() what cause call of new() (and
>> later free.
>> 
>> ANTLR parser looks to work 8-10 times slower of YACC or Lemon. And I
>> think because of this reason.
>> 
>> I have check -- and it seems to be deal of few hard days work to try
>> remove std::string from C++ runtime of ANTLR 2.7.2 and using instead
>> just pair  { char*, length }
>>     where char* points right into string we do parse.
>>     I do not see any need today do COPY of each token string.
>>     btw, how you have implement this in C runtime for v3 ?
> 
> Hello Ruslan and Jim,
> 
> Another idea is:  maybe it might be easier to find a way to optionally
> plug in Andrei Alexandrescu's flex_string instead of std::string.
> flex_string is used in the Boost Wave project, presumably for the
> same reason.

But does flex_string require allocation by new()?
I assume that YES.

And again, profiler show main problems from this new/delete =>
malloc()/free() allocations.

Stack of profiler show deep for our SQL parser e.g. On 25-30 methods.
Each method itself eat e..g. 0.9% of time.
    0.8% is in fact LA() calls.

So there is no obvious bottleneck place. Its spread over all calls.

In SqlLite's Lemon parser deep of stack is only about 7-10 methods. And I am
sure they do not do this overhead allocations.


--------
Aha, I see what you mean, Mark.

Probably flex_string uses POINTERs and do not copy inside?
Well, this may speed up 50% of potential ..

I will try to check this way. Should be relatively easy.


---------
And one more thing.

    MEMORY POOL

I believe that C/C++ runtimes of ANTLR should be armed by this things
always. And give to develop this way:

    pool -> all AST nodes and may be even our SQL nodes we allocate from it.
        then we trash the whole tree by single call of pool.free_all()

I know that few developers have use this way, and say this improve a lots
speed. So why we all need invent a bike?


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From sunshine at public.kherson.ua  Wed Jan  2 03:12:24 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Wed, 02 Jan 2008 13:12:24 +0200
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <477B04E1.30106@ca.com>
Message-ID: <C3A13E38.88E6C%sunshine@public.kherson.ua>

On 2/1/08 5:28 AM, "Jonathan T" <jonathan.thomas at ca.com> wrote:

> Would it also be fair to say that as Ruslan was saying, it's the copying of
> the string - many times over which really causes the problem.  This is ANTLR
> V2 type behaviour - whereas the new V3 type behaviour is to avoid copying the
> input just to make tokens etc - at least that is what Ter has done for Java, I
> assume the same sort of change occurs for most other back-ends.
> 
> Therefore if the number of string creates/deletes is drastically reduced, then
> what string object/type you use may become a moot point.

I will argue a little, Jonathan.

        new std::string()

Or 
        new another_string()

Do call of TWO allocations

    *  new  => malloc
        constructor
            new for char buffer
    
If we switch to pointers in the some_string_class we still have

    *  new  => malloc
        constructor

I.e. We have remove only 50% of allocations.

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From markwright at internode.on.net  Wed Jan  2 03:53:27 2008
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 2 Jan 2008 22:53:27 +1100
Subject: [antlr-interest] More, Status of C++ backend?
Message-ID: <20080102225327.00006904@goanna>

> > Hello Ruslan and Jim,
> > 
> > Another idea is:  maybe it might be easier to find a way to
> > optionally plug in Andrei Alexandrescu's flex_string instead of
> > std::string. flex_string is used in the Boost Wave project,
> > presumably for the same reason.
> 
> But does flex_string require allocation by new()?
> I assume that YES.

Hello Ruslan,

flex_string uses policy based design, so you can choose
whether you want it to use new() or your own allocator:

http://www.ddj.com/cpp/184403784

> And again, profiler show main problems from this new/delete =>
> malloc()/free() allocations.

There are platforms such as Windows and Solaris where the
default malloc()/free() implementations have performance
issues with:

- multi-threading mutexes.  On Solaris you can use libmtmalloc instead.

- the underlying allocator.

Since you can choose to use your own allocator with flex_string,
I think there is a good chance that flex_string using
a per-thread memory pool (hence no mutex overhead) and a
custom allocator could outperform implementations
that do not have these features.
 
> Stack of profiler show deep for our SQL parser e.g. On 25-30 methods.
> Each method itself eat e..g. 0.9% of time.
>     0.8% is in fact LA() calls.
> 
> So there is no obvious bottleneck place. Its spread over all calls.
> 
> In SqlLite's Lemon parser deep of stack is only about 7-10 methods.
> And I am sure they do not do this overhead allocations.
> 
> 
> --------
> Aha, I see what you mean, Mark.
> 
> Probably flex_string uses POINTERs and do not copy inside?

You can choose the policies.

> Well, this may speed up 50% of potential ..
> 
> I will try to check this way. Should be relatively easy.
> 
> 
> ---------
> And one more thing.
> 
>     MEMORY POOL
> 
> I believe that C/C++ runtimes of ANTLR should be armed by this things
> always.

This is easy to plug into flex_string.

> And give to develop this way:
> 
>     pool -> all AST nodes and may be even our SQL nodes we allocate
> from it. then we trash the whole tree by single call of
> pool.free_all()
> 
> I know that few developers have use this way, and say this improve a
> lots speed. So why we all need invent a bike?

I think you will like Andrei's article.

Thanks, Mark
 
> -- 
> Best regards,
> 
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
> 
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com


-- 

From sunshine at public.kherson.ua  Wed Jan  2 04:50:01 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Wed, 02 Jan 2008 14:50:01 +0200
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <20080102225327.00006904@goanna>
Message-ID: <C3A15519.88E87%sunshine@public.kherson.ua>

On 2/1/08 1:53 PM, "Mark Wright" <markwright at internode.on.net> wrote:

Hi Mark,

>>> Another idea is:  maybe it might be easier to find a way to
>>> optionally plug in Andrei Alexandrescu's flex_string instead of
>>> std::string. flex_string is used in the Boost Wave project,
>>> presumably for the same reason.
>> 
>> But does flex_string require allocation by new()?
>> I assume that YES.
> 
> Hello Ruslan,
> 
> flex_string uses policy based design, so you can choose
> whether you want it to use new() or your own allocator:
> 
> http://www.ddj.com/cpp/184403784

Okay, although note that std::string also allow you specify own allocator.
Right? Problem is in time we all need spend to find good mem pool, then plug
them all together into our projects.

DREAM IS: that ANTLR C++ itself include some good mem-pool from the box for
its AST nodes and allow us to use this mem pool for our own nodes also.

>> And again, profiler show main problems from this new/delete =>
>> malloc()/free() allocations.
> 
> There are platforms such as Windows and Solaris where the
> default malloc()/free() implementations have performance
> issues with:
> 
> - multi-threading mutexes.  On Solaris you can use libmtmalloc instead.
> - the underlying allocator.

Right. As well as even such simple thing as allocation of small-size objects
or objects of the same fixed size. When pool know such limits it can be more
effective. 
 
> Since you can choose to use your own allocator with flex_string,
> I think there is a good chance that flex_string using
> a per-thread memory pool (hence no mutex overhead) and a
> custom allocator could outperform implementations
> that do not have these features.

 
>> Stack of profiler show deep for our SQL parser e.g. On 25-30 methods.
>> Each method itself eat e..g. 0.9% of time.
>>     0.8% is in fact LA() calls.
>> 
>> So there is no obvious bottleneck place. Its spread over all calls.
>> 
>> In SqlLite's Lemon parser deep of stack is only about 7-10 methods.
>> And I am sure they do not do this overhead allocations.
>> 
>> 
>> --------
>> Aha, I see what you mean, Mark.
>> 
>> Probably flex_string uses POINTERs and do not copy inside?
> 
> You can choose the policies.
> 
>> Well, this may speed up 50% of potential ..
>> 
>> I will try to check this way. Should be relatively easy.
>> 
>> 
>> ---------
>> And one more thing.
>> 
>>     MEMORY POOL
>> 
>> I believe that C/C++ runtimes of ANTLR should be armed by this things
>> always.
> 
> This is easy to plug into flex_string.

> I think you will like Andrei's article.

:-) 

I will read of course. Also just yesterday I have see mention that latest
boost has mem pool also.

Up to know I have spent time with mem pool from old good compiller
Metrowerks CodeWarrior. Apps made with Codearrior have win few times Visual
C++ and GCC apps thanks to this.


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From jflack at math.purdue.edu  Wed Jan  2 05:55:07 2008
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Wed, 02 Jan 2008 08:55:07 -0500
Subject: [antlr-interest] RFE: bring back (at least the global)
 testLiterals option!
In-Reply-To: <3E949873-ADF1-4D39-B50F-1E52E9FF65FA@cs.usfca.edu>
References: <mailman.1.1198872001.8753.antlr-interest@antlr.org>
	<47757548.9030502@math.purdue.edu>
	<3E949873-ADF1-4D39-B50F-1E52E9FF65FA@cs.usfca.edu>
Message-ID: <477B97BB.3000400@math.purdue.edu>


Terence Parr wrote:
>     public static final String[] tokenNames = new String[] {
>         "<invalid>", "<EOR>", "<DOWN>", "<UP>", "KWD1", "KWD2", "KWD252"
>     };

Not really, because those are the symbolic names for the tokens,
not necessarily identical to the concrete character strings
representing them (and can't be, in cases where the concrete
strings are invalid identifiers in the target language, or
would clash with existing identifiers used in the code).

-Chap

From antlr at mirality.co.nz  Wed Jan  2 06:06:54 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 03 Jan 2008 03:06:54 +1300
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <1199256206.5983.8.camel@rogue>
References: <"L2DFC47BC1F194f3b98F7A9D117A48FC0.1199241954.scalix.temporal-wave.com*"@MHS>
	<1199256206.5983.8.camel@rogue>
Message-ID: <20080102140745.6D4A711ECF4@www.antlr.org>

At 19:43 2/01/2008, Luke A. Guest wrote:
 >I have to say that it really does make sense to have the C++
 >sources depend on the C sources. i.e. for the C++ to use the
 >C string sources is fine IMO. I mean what would be the point
 >in rewriting the string code specifically for C++?

Well, inheritance can be represented a bit cleaner in C++.

But in the end it doesn't make a lot of difference.  Either way 
there's going to be duplication (even if only interface 
duplication to create C++ wrapper classes).

But I think that the C++ runtime should end up looking almost 
identical to the Java runtime (both for familiarity and ease of 
maintenance), whereas the C runtime necessarily has to be 
significantly different since the language has no syntactic 
support for OOP.


From snyder at t-vec.com  Wed Jan  2 06:30:54 2008
From: snyder at t-vec.com (Chris Snyder)
Date: Wed, 2 Jan 2008 09:30:54 -0500
Subject: [antlr-interest] Mathworks m-script parser
Message-ID: <002d01c84d4c$15af1c70$265d080a@Gizmo>

Hello,

 

Has anyone constructed a grammar for Mathworks m-script? I have a good start
on one but it would be nice to compare or ditch mine if there is a better
version.

 

Chris

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/b68a50b9/attachment.html 

From ola.bini at gmail.com  Wed Jan  2 08:13:07 2008
From: ola.bini at gmail.com (Ola Bini)
Date: Wed, 02 Jan 2008 16:13:07 +0000
Subject: [antlr-interest] Lexing an interesting syntax
Message-ID: <477BB813.5060709@gmail.com>

Hi,

Just started work on a lexer for an Io-based language. I want the lexing 
to handle the same constructs as Io, and mostly it's really easy. I hit 
one little snag though. I have a solution, but it's incredibly ugly. So 
I'm wondering how this can be done in the Antlr way.

To make it easy, the lexing is only on identifiers, where any 
combination of the letter "s" and ":" is valid, "=", ":=" and "::=" is 
valid. That's all.
With these constraints, I need:

* "s:" to lex into "s:"
* "s:=" to lex into "s" and ":="
* "s::=" to lex into "s:" and ":="
* "s::::=" to lex into "s:::" and ":="

How can I accomplish this in a good way? The ugly way I have right now 
depends on an action that checks if the next character is "=" and the 
currently matched token ends with ":". If that's true, it sets a flag 
and strips the ":" away from the text of the token. Conversely, when "=" 
is matched, an action checks if the flag is set, and in that case sets 
the text to be ":=" instead. This is obviously extremely ugly, but it 
seems to work, except that indices will be a bit wrong.

Can anyone give me a better solution to this?

Cheers

-- 
 Ola Bini (http://ola-bini.blogspot.com) 
 JRuby Core Developer
 Developer, ThoughtWorks Studios (http://studios.thoughtworks.com)
 Practical JRuby on Rails (http://apress.com/book/view/9781590598818)

 "Yields falsehood when quined" yields falsehood when quined.



From jimi at temporal-wave.com  Wed Jan  2 08:14:35 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 2 Jan 2008 08:14:35 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <1199256206.5983.8.camel@rogue>
Message-ID: <"LA3BEB15BBD7A4d6e879B4782EFAD9A4E.1199291052.scalix.temporal-wave.com*"@MHS>


> -----Original Message-----
> From: Luke A. Guest [mailto:laguest at archeia.com]
> Sent: Tuesday, January 01, 2008 10:43 PM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] More, Status of C++ backend?
> 
> On Tue, 2008-01-01 at 18:36 -0800, Jim Idle wrote:
> > Possible, but the C runtime already has a string too and I prefer to
> > keep away from third party dependencies, even if they are decent 
ones.
> 
> I have to say that it really does make sense to have the C++ sources
> depend on the C sources. i.e. for the C++ to use the C string sources 
is
> fine IMO. I mean what would be the point in rewriting the string code
> specifically for C++?

Yes - I can see arguments all around really though, so I want to produce 
a flexible solution basically and this may end up being two targets - 
one being a lightweight set of wrapper classes that make the syntax of 
dealing with tokens and so on in actions neater than the C equivalent, 
and one being more akin to the current 2.7 C++ runtime. My feeling is 
that there is not much advantage to that, and that making the C more C++ 
compatible is the first order of business.

Jim


From jimi at temporal-wave.com  Wed Jan  2 08:17:09 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 2 Jan 2008 08:17:09 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <C3A13D8D.88E6B%sunshine@public.kherson.ua>
Message-ID: <"L6E79D44B64484c7783668C845F82E440.1199291206.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine at public.kherson.ua]
> Sent: Wednesday, January 02, 2008 3:10 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] More, Status of C++ backend?
> 
> 
> ---------
> And one more thing.
> 
>     MEMORY POOL
> 
> I believe that C/C++ runtimes of ANTLR should be armed by this things
> always. And give to develop this way:
> 
>     pool -> all AST nodes and may be even our SQL nodes we allocate 
from
> it.
>         then we trash the whole tree by single call of pool.free_all()
> 
> I know that few developers have use this way, and say this improve a 
lots
> speed. So why we all need invent a bike?

Please read through the C source as you will find that it already deals 
with tokens and nodes and anything that may need to be allocated lots of 
times in this manner, allocating a chunk of them at once and parceling 
them out when requested. You free everything when your parser is 
'finished'.

Jim
 



From jimi at temporal-wave.com  Wed Jan  2 08:20:16 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 2 Jan 2008 08:20:16 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <C3A15519.88E87%sunshine@public.kherson.ua>
Message-ID: <"LE6A442875918486eA79873BB3AF01B51.1199291394.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine at public.kherson.ua]
> Sent: Wednesday, January 02, 2008 4:50 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] More, Status of C++ backend?
> 
> On 2/1/08 1:53 PM, "Mark Wright" <markwright at internode.on.net> wrote:
> 
> Hi Mark,
> 
> >>> Another idea is:  maybe it might be easier to find a way to
> >>> optionally plug in Andrei Alexandrescu's flex_string instead of
> >>> std::string. flex_string is used in the Boost Wave project,
> >>> presumably for the same reason.
> >>
> >> But does flex_string require allocation by new()?
> >> I assume that YES.
> >
> > Hello Ruslan,
> >
> > flex_string uses policy based design, so you can choose
> > whether you want it to use new() or your own allocator:
> >
> > http://www.ddj.com/cpp/184403784
> 
> Okay, although note that std::string also allow you specify own 
allocator.
> Right? Problem is in time we all need spend to find good mem pool, 
then
> plug
> them all together into our projects.
> 
> DREAM IS: that ANTLR C++ itself include some good mem-pool from the 
box
> for
> its AST nodes and allow us to use this mem pool for our own nodes 
also.

The C runtime already does this and if you want to make your own nodes, 
then you provide a similar mechanism for your node information (copy and 
past will work fine ;-). There is no inheritance in the C, so you are 
given a set of embedded structures. Create your own node, and embed the 
common node within it, it will act like a derived class. However, in C, 
you can just managed it with pointers anyway, and your memory pool is 
just taken from an array of your own nodes. Simple really (which is 
usually fastest ;-).

Jim



From jimi at temporal-wave.com  Wed Jan  2 08:22:26 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 2 Jan 2008 08:22:26 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"3812.16171199281908.scalix.temporal-wave.com*"@MHS>
Message-ID: <"LDF8FDFA0F1884b6393D9FB70E194F75E.1199291518.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> Sent: Wednesday, January 02, 2008 6:07 AM
> To: Luke A. Guest; Jim Idle
> 
> Well, inheritance can be represented a bit cleaner in C++.
> 
> But in the end it doesn't make a lot of difference.  Either way
> there's going to be duplication (even if only interface
> duplication to create C++ wrapper classes).
> 
> But I think that the C++ runtime should end up looking almost
> identical to the Java runtime (both for familiarity and ease of
> maintenance), whereas the C runtime necessarily has to be
> significantly different since the language has no syntactic
> support for OOP.

Yeah - I see that argument too, however I think it will end up being 
slower just for the sake of making it use "proper classes", so I would 
not use it and just go with the C runtime. I am not sure how many people 
would go one way or the other. I think doing this in phases makes a lot 
of sense.

Jim
 



From jimi at temporal-wave.com  Wed Jan  2 08:42:45 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 2 Jan 2008 08:42:45 -0800
Subject: [antlr-interest] Lexing an interesting syntax
In-Reply-To: <477BB813.5060709@gmail.com>
Message-ID: <"LDD1551128BBC4c5484C73FFFF183A7E7.1199292725.scalix.temporal-wave.com*"@MHS>


> -----Original Message-----
> From: Ola Bini [mailto:ola.bini at gmail.com]
> Sent: Wednesday, January 02, 2008 8:13 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Lexing an interesting syntax
> 
> Hi,
> 
> Just started work on a lexer for an Io-based language. I want the 
lexing
> to handle the same constructs as Io, and mostly it's really easy. I 
hit
> one little snag though. I have a solution, but it's incredibly ugly. 
So
> I'm wondering how this can be done in the Antlr way.
> 
> To make it easy, the lexing is only on identifiers, where any
> combination of the letter "s" and ":" is valid, "=", ":=" and "::=" is
> valid. That's all.
> With these constraints, I need:
> 
> * "s:" to lex into "s:"
> * "s:=" to lex into "s" and ":="
> * "s::=" to lex into "s:" and ":="
> * "s::::=" to lex into "s:::" and ":="

Don't try to do so much of this in the lexer is the answer. Allow a 
separate token, COLON and either make the operator ":=" in the lexer or 
perhaps even parse that in the parser. But adding a bit more to your 
requirements by guessing ;-), then for the input:

s:
s:=f
s::=f
s::::=f
s:=h==i

The grammar below should do it:

grammar t;

code
	: line*
	;

line
	: id ((COLEQ | OPASS) expr?)?
	;
	
expr
	: e1 (OPEQ e1)*
	;

e1
	: id
	;

id
	: ID COLON*
	;
	
COLEQ	:	':='	;
OPEQ	:	'=='	;
OPASS	:	'='		;
COLON	: 	':'		;

ID	:	 'a'..'z'+ 	;

WS 	:	 ('\r' | ' ' | '\n' | '\t')+
		{
			$channel = HIDDEN;
		}
	;


Note that you may find the lexer does not do what you expect if you have 
other uses of COLON in pairs of operator characters. Then you will need 
to use predicates in a COLON lexer rule that start with ':', then select 
'', '=' and 'x' where 'x' is your other character, and set $type 
accordingly. Sounds like you won't need that though.

Jim



From ola.bini at gmail.com  Wed Jan  2 09:14:47 2008
From: ola.bini at gmail.com (Ola Bini)
Date: Wed, 02 Jan 2008 17:14:47 +0000
Subject: [antlr-interest] Lexing an interesting syntax
In-Reply-To: <"LDD1551128BBC4c5484C73FFFF183A7E7.1199292725.scalix.temporal-wave.com*"@MHS>
References: <"LDD1551128BBC4c5484C73FFFF183A7E7.1199292725.scalix.temporal-wave.com*"@MHS>
Message-ID: <477BC687.6020507@gmail.com>

Jim Idle wrote:
>> -----Original Message-----
>> From: Ola Bini [mailto:ola.bini at gmail.com]
>> Sent: Wednesday, January 02, 2008 8:13 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Lexing an interesting syntax
>>
>> Hi,
>>
>> Just started work on a lexer for an Io-based language. I want the 
>>     
> lexing
>   
>> to handle the same constructs as Io, and mostly it's really easy. I 
>>     
> hit
>   
>> one little snag though. I have a solution, but it's incredibly ugly. 
>>     
> So
>   
>> I'm wondering how this can be done in the Antlr way.
>>
>> To make it easy, the lexing is only on identifiers, where any
>> combination of the letter "s" and ":" is valid, "=", ":=" and "::=" is
>> valid. That's all.
>> With these constraints, I need:
>>
>> * "s:" to lex into "s:"
>> * "s:=" to lex into "s" and ":="
>> * "s::=" to lex into "s:" and ":="
>> * "s::::=" to lex into "s:::" and ":="
>>     
>
> Don't try to do so much of this in the lexer is the answer. Allow a 
> separate token, COLON and either make the operator ":=" in the lexer or 
> perhaps even parse that in the parser. But adding a bit more to your 
> requirements by guessing ;-), then for the input:
>   
Thanks. That might actually be the best solution. It's a bit ugly, since 
Identifier tokens would be good to always be able to rely on from the 
lexer, but it seems like a much better approach than mine, at least.

Cheers

-- 
 Ola Bini (http://ola-bini.blogspot.com) 
 JRuby Core Developer
 Developer, ThoughtWorks Studios (http://studios.thoughtworks.com)
 Practical JRuby on Rails (http://apress.com/book/view/9781590598818)

 "Yields falsehood when quined" yields falsehood when quined.



From yotommy at gmail.com  Wed Jan  2 10:00:04 2008
From: yotommy at gmail.com (Tom Smith)
Date: Wed, 2 Jan 2008 13:00:04 -0500
Subject: [antlr-interest] soliciting language recipes book outline
	feedback
In-Reply-To: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
References: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
Message-ID: <82dc0d190801021000m7fa9b474xe3b71fc8b33b9023@mail.gmail.com>

In the section on Translation recipes, I would love to see an outline of a
multi-pass translator (e.g., to support semantic checks).  IMHO, I've seen
great support for grammars (in the book, on this list, on the wiki), but
there is much less material addressing the overall structure of
applications.

As an example, after a lot of searching, I found a message from 2005 in the
archive of this list that I have used as a model for a multi-pass
translator:

http://www.antlr.org/pipermail/antlr-interest/2005-June/012788.html

This, or more recent rethinking of such approaches, could be a great help as
a how-to entry.

Thanks,
Tom.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/19ace624/attachment.html 

From spoulson3 at yahoo.com  Wed Jan  2 11:20:55 2008
From: spoulson3 at yahoo.com (Shawn Poulson)
Date: Wed, 2 Jan 2008 11:20:55 -0800 (PST)
Subject: [antlr-interest] Troubles getting started
Message-ID: <162481.14162.qm@web30608.mail.mud.yahoo.com>

Hello to all,

I'm looking for a good language parser for C# and came across ANTLR. 
It looks pretty sharp from the web site, but I haven't been able to get
it to run yet.  I know a little Java to get by, so please bear with me
if there's anything I missed.

I'm going by the Getting started page on the Wiki
"http://www.antlr.org/wiki/pages/viewpage.action?pageId=728", but that
information seems too little to work.  It doesn't say what tar file to
get, but my best guess is the one labeled "source distribution" on the
download page.  But, the file structure is different in that one.

What I'm starting with is the examples-v3.  I installed nant 0.85, have
the source distribution's lib folder in my CLASSPATH, and ran "nant
build" from the csharp examples folder.  I get the error
"java.lang.NoClassDefFoundError: org/antlr/Tool", but my
antlr-3.0.1.jar is in the classpath.  I tried renaming to antlr.jar,
but no change.

Also, the instructions in the examples README.txt seem to conflict.  It
mentions I need a lot of various files, but doesn't really say where to
get them.  I'm not sure if the source distribution includes everything
I need.

Can anyone help me out?  Thanks!

---
Shawn Poulson
spoulson at explodingcoder.com

From bernhardttom at yahoo.com  Wed Jan  2 12:39:28 2008
From: bernhardttom at yahoo.com (Thomas Bernhardt)
Date: Wed, 2 Jan 2008 12:39:28 -0800 (PST)
Subject: [antlr-interest] Tree parser and Java interface question to passing
	rule results
Message-ID: <220077.7851.qm@web37104.mail.mud.yahoo.com>

Can someone please help me get a tree walker to invoke a Java method for a
rule, passing the tree node representing the rule result?

I have the tree grammar as follows, and the "???" is what I'm trying to figure out:

valueExpr
    :     constant { leaveNode(???); }
    |      // ... 
    ;

constant
    :    INT_TYPE
    |    LONG_TYPE
    |    FLOAT_TYPE
   
 |    DOUBLE_TYPE
    |    STRING_TYPE
    |    BOOL_TYPE
    |    NULL_TYPE
    ;

The
goal is to get the tree or node that resulted from the "constant" rule to be
passed to the "leaveNode(Tree tree)" method. What should "???" be?

Thank you!
Tom 
http://esper.codehaus.org   Esper loves ANTLR




      Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.
<!-- DIV {margin:0px;}-->Can
you please help me get my tree walker to invoke a Java method for a
rule, passing the tree node representing the rule result?

I have the tree grammar as follows, and the "???" is what I'm trying to figure out:

valueExpr
    :     constant { leaveNode(???); }
    |      // ... 
    ;

constant
    :    INT_TYPE
    |    LONG_TYPE
    |    FLOAT_TYPE
   
 |    DOUBLE_TYPE
    |    STRING_TYPE
    |    BOOL_TYPE
    |    NULL_TYPE
    ;

The
goal is to get the tree that resulted from the "constant" rule to be
passed to the "leaveNode(Tree tree)" method. What should "???" be?

Thank you!
Tom 
http://esper.codehaus.org   Esper loves ANTLR





      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/a097a941/attachment.html 

From siemsen at ucar.edu  Wed Jan  2 13:54:47 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Wed, 2 Jan 2008 14:54:47 -0700
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <ebc876d70801012134x54b88c15qf13bfc6767d3f704@mail.gmail.com>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
	<20080101221342.9EDC6309C051@nscan2.ucar.edu>
	<991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>
	<ebc876d70801012134x54b88c15qf13bfc6767d3f704@mail.gmail.com>
Message-ID: <2C7FFDD4-38BD-493C-8AB5-B794E339B1E1@ucar.edu>

Tom, Gavin,

As you suggest, my design is a bit strange, but it's driven by the  
the arrangement of the source files.  I don't control the source  
files.  They are class definitions of the Common Information Model  
(see http://www.dmtf.org/standards/cim/cim_schema_v217/).  Each class  
definition is in a single file, in a language called Managed Object  
Format, or MOF.  I'm translating them into Java files.  The source  
files are arranged on per class, as several hundred separate files in  
about 13 subdirectories.  A single top-level file contains include  
statements that include all the other files, preceded by 2 files that  
define language elements used in every other file.  The include file  
starts like this:

#pragma include ("qualifiers.mof")
#pragma include ("qualifiers_optional.mof")
#pragma include ("Core/CIM_ManagedElement.mof")
#pragma include ("Core/CIM_ManagedSystemElement.mof")
#pragma include ("Core/CIM_SystemStatisticalInformation.mof")
#pragma include ("Database/CIM_CommonDatabaseSettingData.mof")
#pragma include ("Database/CIM_CommonDatabaseStatistics.mof")
#pragma include ("Database/CIM_DatabaseResourceStatistics.mof")

etc.

The top-level file contains nothing but include statements, and none  
of the other files contain include statements, but the first 2  
included files contain code that is needed by each of the other  
files.  The files are included in order such that superclasses are  
defined before subclasses, but that isn't really important for  
translation.

When I wrote the translator, I just implemented the "how to handle  
include files" scheme, before I learned that there were no other  
include statements to be found in any of the other files.  I found  
out that ANTLR has no trouble lexing the entire set of files into a  
single stream of tokens.  It seemed "big", but it works, and I'm not  
sure it's a good idea to change to an approach that would parse the  
files one-at-a-time.  Such an approach would assume that the layout  
of the source files is static.  New versions of the Common  
Information Model appear fairly regularly, and there's no guarantee  
that the layout of the source files won't change.

Would it be possible to inject a token into the token stream just  
before I switch to the include file and call reset?  In the  
PragmaInclude lexer rule, can I call "emit" to do it, and make the  
token contain the include file name?  I haven't done anything like  
this before, I just wonder if it's reasonable.

-- Pete


On Jan 1, 2008, at 10:34 PM, Thomas Brandon wrote:

> On Jan 2, 2008 3:48 PM,  <siemsen at ucar.edu> wrote:
>> Gavin,
>>
>> Thanks, that makes perfect sense.  It's certainly better than what I
>> was trying to do with a HashMap.  I think I'm thinking about this
>> more clearly now.
>>
>> I understand the idea, but I can't seem to implement it.  I have a
>> "PragmaInclude" lexer rule that reads each include statement and
>> switches the input stream to the new file.  It works.  I'd like to do
>> what you suggest, and access the PragmaInclude token in the parser,
>> so the parser can see the file name.  The odd thing is that the lexer
>> doesn't seem to generate a PragmaInclude token.
>>
>> Attached is the grammar.  In it, the "compilerDirective" parser rule
>> uses the PragmaInclude token.  I couldn't get compilerDirective to
>> "fire" while parsing.  I discovered that I could comment the
>> compilerDirective rule completely and the translator would still
>> behave the same.  It seems to me that the lexer never creates a
>> PragmaInclude token, even though the PragmaInclude definitely  
>> executes.
>>
>> What am I missing?
> The call to Lexer.reset() clears the information token information
> from the PragmaInclude rule. In fact the call to setCharStream calls
> reset() also so this seems redundant and removing it won't solve the
> issue (the extra call will additionally seek the new token stream to 0
> but this shouldn't be needed). Rather than calling setCharStream you
> could update input directly and not call reset though this is not
> really advisable as future versions of ANTLR could easily break this
> (I think 3.1 will).
> Your design seems somewhat strange. Can the top level file also
> include normal statements or only includes? Where does the output for
> normal statements go? Can the included files contain includes and if
> so what happens with the output for them?
> It looks like you're processing a list of different input files to be
> separately processed, not a file with includes. In that case I think
> Gavin's suggestion of separately processing each file is better. Then
> you top level grammar would just handle the include syntax and end up
> with a list linking include file names to ASTs or templates or
> whatever the result of processing each include is.
>
> Tom.
>>
>> -- Pete
>>
>>
>>
>>
>> On Jan 1, 2008, at 3:13 PM, Gavin Lambert wrote:
>>
>>> At 10:02 2/01/2008, siemsen at ucar.edu wrote:
>>>> To handle the include statements, I use the mechanism described in
>>>> the ANTLR Wiki page titled "How do I implement include files?".
>>>> It works great.  It does its magic during the lexer phase.  So all
>>>> the source files are lexed first into one big token stream, then
>>>> the parser starts.
>>>>
>>>> Currently, my translator just emits output to standard out, as one
>>>> text stream.  Now I'm ready to make it put the output into
>>>> directories and files.  The source text is a set of things with
>>>> names like CIM_DatabaseResourceStatistics, so I know what to name
>>>> each output file.  I just need to know what directory to put each
>>>> output file in.
>>>
>>>> During the lexer phase, I store the name-to-directory information
>>>> in a HashMap.  So for example, the HashMap tells me that the
>>>> output file named CIM_DatabaseResourceStatistics.java belongs in
>>>> the output subdirectory named "Database".
>>>>
>>>> I need to pass the HashMap from the lexer to the parser.  Is there
>>>> a good way to do it?  Am I thinking about the problem correctly?
>>>
>>> Probably the easiest way to do this is to pass an INCLUDE token up
>>> to the parser that contains the full filename, and let the parser
>>> reconstruct the HashMap itself.  Or you could use it in a scope
>>> instead, since presumably everything else is logically contained
>>> within one or more INCLUDEs.
>>>
>>
>>
>>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/5d1d68ed/attachment-0001.html 

From jaluber at gmx.de  Wed Jan  2 14:03:37 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 02 Jan 2008 23:03:37 +0100
Subject: [antlr-interest] Troubles getting started
In-Reply-To: <162481.14162.qm@web30608.mail.mud.yahoo.com>
References: <162481.14162.qm@web30608.mail.mud.yahoo.com>
Message-ID: <477C0A39.2010309@gmx.de>

Shawn Poulson schrieb:
> Hello to all,
> 
> I'm looking for a good language parser for C# and came across ANTLR. 
> It looks pretty sharp from the web site, but I haven't been able to get
> it to run yet.  I know a little Java to get by, so please bear with me
> if there's anything I missed.
> 
> I'm going by the Getting started page on the Wiki
> "http://www.antlr.org/wiki/pages/viewpage.action?pageId=728", but that
> information seems too little to work.  It doesn't say what tar file to
> get, but my best guess is the one labeled "source distribution" on the
> download page.  But, the file structure is different in that one.

Ignore any differences from the description regarding the directory
structure. Things are probably a bit outdated.

> What I'm starting with is the examples-v3.  I installed nant 0.85, have
> the source distribution's lib folder in my CLASSPATH, and ran "nant
> build" from the csharp examples folder.  I get the error
> "java.lang.NoClassDefFoundError: org/antlr/Tool", but my
> antlr-3.0.1.jar is in the classpath.  I tried renaming to antlr.jar,
> but no change.

Actually, you have to put the jars into the "_SharedLibs" directory.
Unfortunately, the readme has a wrong naming scheme compared to what the
build file actually says. Note the 's' in "_SharedLibs" and the
different ANTLR-jar name. I'm using a depot version of the build file
where there may other changes compared to the 3.0-version, so you may
end up editing files yourself again, if I'd sent it to you.

> Also, the instructions in the examples README.txt seem to conflict.  It
> mentions I need a lot of various files, but doesn't really say where to
> get them.  I'm not sure if the source distribution includes everything
> I need.

The files should be in the source distro (except the nant stuff).

> Can anyone help me out?  Thanks!

I hope I was helpful enough. :)

Johannes

From parrt at cs.usfca.edu  Wed Jan  2 14:43:49 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 2 Jan 2008 14:43:49 -0800
Subject: [antlr-interest] Tree parser and Java interface question to
	passing rule results
In-Reply-To: <220077.7851.qm@web37104.mail.mud.yahoo.com>
References: <220077.7851.qm@web37104.mail.mud.yahoo.com>
Message-ID: <F1C0A350-9A54-4DAD-A230-DC31B542A1A1@cs.usfca.edu>

Hi.
On Jan 2, 2008, at 12:39 PM, Thomas Bernhardt wrote:

> Can someone please help me get a tree walker to invoke a Java method  
> for a rule, passing the tree node representing the rule result?
>
> I have the tree grammar as follows, and the "???" is what I'm trying  
> to figure out:
>
> valueExpr
>     :     constant { leaveNode(???); }
>     |      // ...
>     ;
>
> constant
>     :    INT_TYPE
>     |    LONG_TYPE
>     |    FLOAT_TYPE
>     |    DOUBLE_TYPE
>     |    STRING_TYPE
>     |    BOOL_TYPE
>     |    NULL_TYPE
>     ;
>
> The goal is to get the tree or node that resulted from the  
> "constant" rule to be passed to the "leaveNode(Tree tree)" method.  
> What should "???" be?

$constant.tree

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080102/5f3156eb/attachment.html 

From antlr at mirality.co.nz  Wed Jan  2 14:49:24 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 03 Jan 2008 11:49:24 +1300
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"LDF8FDFA0F1884b6393D9FB70E194F75E.1199291518.scalix.tempo
	ral-wave.com*"@MHS>
References: <"3812.16171199281908.scalix.temporal-wave.com*"@MHS>
	<"LDF8FDFA0F1884b6393D9FB70E194F75E.1199291518.scalix.temporal-wave.com*"@MHS>
Message-ID: <20080102224942.76C0F11EC50@www.antlr.org>

At 05:22 3/01/2008, Jim Idle wrote:
 >Yeah - I see that argument too, however I think it will end up
 >being slower just for the sake of making it use "proper
 >classes", so I would not use it and just go with the C runtime.

There's nothing inherently slow about C++ over C, it's just that 
you have to be aware that the compiler can inject extra code 
"behind your back" :)

And I wasn't proposing going and using std::string as a member of 
the token or anything.  You'd do it the same way as the Java 
runtime works -- normally store only indexes, but create a string 
on demand.

 >I think doing this in phases makes a lot of sense.

Definitely.  The obvious first phase would be to get the C runtime 
C++-safe (which last time I checked it almost was, there was just 
one function somewhere that used a C++ keyword as an identifier, I 
think).  The second phase would be to make C++ wrappers for the 
existing C runtime.

The thing is, I'm not convinced that making C++ wrapper classes 
would actually be faster or simpler than making full C++ 
classes.  Trying to take a C++ object (with polymorphic methods) 
and pass it across to the C runtime could get a little 
tricky.  Doable, of course; I'm just not sure it's worth the 
effort.


From antlr at mirality.co.nz  Wed Jan  2 14:59:08 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 03 Jan 2008 11:59:08 +1300
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <2C7FFDD4-38BD-493C-8AB5-B794E339B1E1@ucar.edu>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
	<20080101221342.9EDC6309C051@nscan2.ucar.edu>
	<991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>
	<ebc876d70801012134x54b88c15qf13bfc6767d3f704@mail.gmail.com>
	<2C7FFDD4-38BD-493C-8AB5-B794E339B1E1@ucar.edu>
Message-ID: <20080102225925.D2B3C11ED11@www.antlr.org>

At 10:54 3/01/2008, siemsen at ucar.edu wrote:
>The top-level file contains nothing but include 
>statements, and none of the other files contain 
>include statement?phk?????lZb s, but the first 2 
>included files contain code that is needed by 
>each of the other files.  The files are included 
>in order such that superclasses are defined 
>before subclasses, but that isn't really 
>important for translation.

What sort of 
code?  Constants?  Superclasses?  Support 
classes/methods?  Any of those could be dealt 
with as a separate file easily enough.

>Would it be possible to inject a token into the 
>token stream just before I switch to the include 
>file and call reset?  In the PragmaInclude lexer 
>rule, can I call "emit" to do it, and make the 
>token contain the include file name?  I haven't 
>done anything like this before, I just wonder if it's reasonable.

Lexer operation is basically just calling 
nextToken to retrieve one token at a 
time.  Calling emit sets the data for that token; 
not calling it will lead to generating a default 
token based on all the characters matched by the rule.

I'm not really familiar with the Java runtime, so 
I'm not sure what the reset call affects.  It 
might destroy an emit as well (and you probably 
can't emit afterwards successfully 
either).  Still, it could be worth a try.

The rule must currently be returning *something*, 
though, since every top-level lexer rule called 
must return a token.  Trace it through with a 
debugger and see what's going on.


From dalke at dalkescientific.com  Wed Jan  2 15:41:08 2008
From: dalke at dalkescientific.com (Andrew Dalke)
Date: Thu, 3 Jan 2008 00:41:08 +0100
Subject: [antlr-interest] Python.g string with triple quote
In-Reply-To: <7385e6fe0801010205i4e8d6e09qbcb3b9a088b9942f@mail.gmail.com>
References: <7385e6fe0801010205i4e8d6e09qbcb3b9a088b9942f@mail.gmail.com>
Message-ID: <F46DEA80-9305-4F12-AAD4-A277304EC5FE@dalkescientific.com>

On Jan 1, 2008, at 11:05 AM, F?rat K???k wrote:
> and also python shell behaves like that.
>
> Python 2.5.1 (r251:54863, Oct  5 2007, 13:36:32)
> [GCC 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)] on linux2
> Type "help", "copyright", "credits" or "license" for more information.
>>>> var = """hello"""
>>>> var = """"hello"""
>>>> var = """hello""""
>   File "<stdin>", line 1
>     var = """hello""""
>                      ^
> SyntaxError: EOL while scanning single-quoted string
>
>
> is there a way to fix this? or is this normal?

This is the proper (meaning, documented and expected) behavior for  
Python.

Python does string concatenation, so successive strings are joined.   
The C implementation does this at the tokenization level and the  
parser never even sees it.  For example,

   a = "Monty Python's " "Flying Circus"
becomes
   a = "Monty Python's Flying Circus"

Similarly,

   a = """My hovercraft """ "is" ''' full of eels.'''
                                 ^------------------^ triple quoted  
string
                                                      (using single  
quotes)
       ^------------------^ triple quoted string (using double quotes)
                            ^--^ single quoted string (using single  
quotes)


is identical to

   a = "My hovercraft is full of eels."

What you're seeing here is a triple quoted string followed by the  
start of a single quoted string, and hence the error message saying  
the Python lexer cannot find the close quote for a single-quoted  
string before the end of the line.


				Andrew
				dalke at dalkescientific.com

[1]  ..hovercraft.. - http://www.youtube.com/watch?v=p_ve37gVwxw


From jimi at temporal-wave.com  Wed Jan  2 15:56:22 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 2 Jan 2008 15:56:22 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"3812.16221199313222.scalix.temporal-wave.com*"@MHS>
Message-ID: <"L0147260D3B824f159AAA5FFA889BCDAF.1199318763.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> Sent: Wednesday, January 02, 2008 2:49 PM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] More, Status of C++ backend?
> 
> At 05:22 3/01/2008, Jim Idle wrote:
>  >Yeah - I see that argument too, however I think it will end up
>  >being slower just for the sake of making it use "proper
>  >classes", so I would not use it and just go with the C runtime.
> 
> There's nothing inherently slow about C++ over C, it's just that
> you have to be aware that the compiler can inject extra code
> "behind your back" :)

Well, there is extra setup for exception handling and so on - hence all 
the goings on with Embedded C++ specs. It never turns out as lean as C 
and most programmers screw it up royally ;-P

> 
> And I wasn't proposing going and using std::string as a member of
> the token or anything.  You'd do it the same way as the Java
> runtime works -- normally store only indexes, but create a string
> on demand.

No, obviously not. In fact I am not sure that std:string is too terrible 
when you are not allocating millions of them that won't even be used, 
but it is probably high enough to look at alternatives.

> 
>  >I think doing this in phases makes a lot of sense.
> 
> Definitely.  The obvious first phase would be to get the C runtime
> C++-safe (which last time I checked it almost was, there was just
> one function somewhere that used a C++ keyword as an identifier, I
> think).  The second phase would be to make C++ wrappers for the
> existing C runtime.

Yep - it is a few #ifdefs and a change in a couple of the sources.

> 
> The thing is, I'm not convinced that making C++ wrapper classes
> would actually be faster or simpler than making full C++
> classes.  Trying to take a C++ object (with polymorphic methods)
> and pass it across to the C runtime could get a little
> tricky.  Doable, of course; I'm just not sure it's worth the
> effort.

Yep. Though in the first instance I am really only interested in neater 
syntax for action code. I bet that is all that virtually everyone needs 
to be honest.

Jim



From jonathan.thomas at ca.com  Wed Jan  2 16:08:51 2008
From: jonathan.thomas at ca.com (Jonathan T)
Date: Thu, 03 Jan 2008 11:08:51 +1100
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <C3A13E38.88E6C%sunshine@public.kherson.ua>
References: <C3A13E38.88E6C%sunshine@public.kherson.ua>
Message-ID: <477C2793.5060205@ca.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/9278f3cc/attachment-0001.html 

From antlr at jazillian.com  Wed Jan  2 16:35:19 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Wed, 02 Jan 2008 19:35:19 -0500
Subject: [antlr-interest] Javadoc style parsing
In-Reply-To: <b9a39b060801011822u581853b3ifd94a46c1bd7fa53@mail.gmail.com>
References: <b9a39b060801011822u581853b3ifd94a46c1bd7fa53@mail.gmail.com>
Message-ID: <477C2DC7.8050802@jazillian.com>

Adam Connelly wrote:
> Hi,
>
> Just wanted to ask for some ideas.  I'm designing a language and have 
> most of the grammar done (I've still to add a few bits in and put in 
> the template generation).  The language is a modeling language for 
> describing some database objects and I'd like to allow some meta-data 
> to hold a human friendly description of these objects.
>
> I had an idea of having a special type of comment (like in javadoc) 
> that I would send to a different channel than the standard parser.  I 
> could then parse these comments separately (although this might not 
> end up being desirable).  This would mean that I wouldn't have to put 
> in references to an optional comment rule wherever comments were allowed.
>
> The downside to this that I can see at the moment is that I'm not sure 
> how I would then get the information about the object that each 
> comment was attached to.
>
> Any ideas?
>
> Adam
The hard part is associating each comment with a particular node in the 
AST. Peter Van Der Ahe at Sun wrote a
good paper about how hard that is, and even that paper only scratched 
the surface.

Consider this code:
----------------------------------------
// here is a comment that appears to be at the top of the file, but only 
because there are a few blank lines after it.

// a comment that seems to "go with" the following line, and not the 
previous comment, but again, only because of blank lines
int i;

for (int i=0; i<10 /* what does any inline comment go with? */; i++)
   // a comment that "goes with" the block inside the for loop
  {
      // another comment that "goes with" the block inside the for loop
  }  // does this comment "go with" the for loop, or the following code?
----------------------------------------

If you have control of the language (sounds like you do), I'd seriously 
consider making comments a real part of the grammar,
perhaps having a "comment statement", as opposed to the C, C++, Java, 
and many other languages approach of
allowing statements anywhere and having a preprocessor throw them out.





From adam.rpconnelly at googlemail.com  Wed Jan  2 17:33:27 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Thu, 3 Jan 2008 01:33:27 +0000
Subject: [antlr-interest] Javadoc style parsing
In-Reply-To: <477C2DC7.8050802@jazillian.com>
References: <b9a39b060801011822u581853b3ifd94a46c1bd7fa53@mail.gmail.com>
	<477C2DC7.8050802@jazillian.com>
Message-ID: <b9a39b060801021733m5edc0cbbk8f23f30e4eb886ff@mail.gmail.com>

Thanks for the reply.

I'll check out that paper you mentioned if I get a chance.  I think I'll
follow your advice and make the comments part of the grammar.  I think what
I'll do is have comments that are just ignored by the parser (C/C++ style
comments), then have a separate comment style for holding the descriptions
that's only allowed in certain places.  Probably easier that way in the long
run.  I guess it also means that I can give some structure to the comments
to hold different types of information.

Cheers,

Adam

On Jan 3, 2008 12:35 AM, Andy Tripp <antlr at jazillian.com> wrote:

> Adam Connelly wrote:
> > Hi,
> >
> > Just wanted to ask for some ideas.  I'm designing a language and have
> > most of the grammar done (I've still to add a few bits in and put in
> > the template generation).  The language is a modeling language for
> > describing some database objects and I'd like to allow some meta-data
> > to hold a human friendly description of these objects.
> >
> > I had an idea of having a special type of comment (like in javadoc)
> > that I would send to a different channel than the standard parser.  I
> > could then parse these comments separately (although this might not
> > end up being desirable).  This would mean that I wouldn't have to put
> > in references to an optional comment rule wherever comments were
> allowed.
> >
> > The downside to this that I can see at the moment is that I'm not sure
> > how I would then get the information about the object that each
> > comment was attached to.
> >
> > Any ideas?
> >
> > Adam
> The hard part is associating each comment with a particular node in the
> AST. Peter Van Der Ahe at Sun wrote a
> good paper about how hard that is, and even that paper only scratched
> the surface.
>
> Consider this code:
> ----------------------------------------
> // here is a comment that appears to be at the top of the file, but only
> because there are a few blank lines after it.
>
> // a comment that seems to "go with" the following line, and not the
> previous comment, but again, only because of blank lines
> int i;
>
> for (int i=0; i<10 /* what does any inline comment go with? */; i++)
>   // a comment that "goes with" the block inside the for loop
>  {
>      // another comment that "goes with" the block inside the for loop
>  }  // does this comment "go with" the for loop, or the following code?
> ----------------------------------------
>
> If you have control of the language (sounds like you do), I'd seriously
> consider making comments a real part of the grammar,
> perhaps having a "comment statement", as opposed to the C, C++, Java,
> and many other languages approach of
> allowing statements anywhere and having a preprocessor throw them out.
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/06102019/attachment.html 

From sunshine at public.kherson.ua  Wed Jan  2 22:18:01 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Thu, 03 Jan 2008 08:18:01 +0200
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <477C2793.5060205@ca.com>
Message-ID: <C3A24AB9.88FF5%sunshine@public.kherson.ua>

On 3/1/08 2:08 AM, "Jonathan T" <jonathan.thomas at ca.com> wrote:

Hi Jonathan,

> V2 duplicated the input stream all over the place, resulting in the high
> number of string allocations/deallocations that you are seeing. You want to
> optimise the actual allocation/deallocation.  What about removing them
> altogether?

Even better. 
Yes I need read latest docs yet, and check v3 deeply.

> Gavin probably put it better further down in this thread
> QUOTE ... I wasn't proposing going and using std::string as a member of the
> token or anything.  You'd do it the same way as the Java runtime works --
> normally store only indexes, but create a string on demand. ... END_QUOTE

Okay, although I will suggest use not indexes as Java, but direct char*
pointers.

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From whitis at freelabs.com  Wed Jan  2 23:47:07 2008
From: whitis at freelabs.com (Mark Whitis)
Date: Thu, 3 Jan 2008 02:47:07 -0500 (EST)
Subject: [antlr-interest] nested parsing (BSDL)
In-Reply-To: <E1J9hGE-0005mN-G2@localhost.localdomain>
References: <E1J9hGE-0005mN-G2@localhost.localdomain>
Message-ID: <Pine.LNX.4.64.0801011551220.8143@localhost.localdomain>

[This message mentions some antlr bugs and feature suggestions, they
have been tagged with "[BUG]".  Feature suggestions are not necessarilly
bugs in the sense of failure to perform as documented but they do
represent substantial limitations in antlr's expressive power or serious
usability issues.   Bugs were compounded by other bugs, to a staggering
degree]

Thanks for a very detailed response.   Even if it wasn't quite what
I was looking for, I think I and others will learn from your example.
I found your message as I was preparing to post a progress report.

I think I came up with a solution that almost works just before I got your 
email. It works pretty much like what I was asking for aside from having
too much target language specific code.   But it does have some advantages
over your suggestion:
   - Single grammar file
   - Makes good AST trees if you want them
   - Use of AST trees is not necessary
     Can use one assignment to a data structure or a function call
     for more complicated assignments in each major rule.
   - doesn't have lex/yacc anachronisms like predefining
     lexical tokens.
   - extending to support other structured strings does not require
     anything more than new grammar rules
   - If it wasn't for a confounding series of bugs, the single
     grammar file would have been conducive to using antlrworks
     debugger.
   - yours uses InnerParser.  I can't find that documented anywhere.
     (The C# API doc is a broken link), it doesn't seem to exist
     in the C, Java, or Python APIs.   If there was a variation that
     let you specify the root rule to use in a grammar so I
     could use the same grammer, it would be close to what I want).
     And, trying to recreate the functionality runs into the same
     problems with the runtime libraries I was having 
Thus it keeps my options open.
Yours has the advantage that it works from a parser rule instead of
a lexer rule but it loses the advantage by using multiple parsers.
Yours has an advantage if the island grammar is lexically incompatable
with the parent grammar.   However, I thought I was pretty clear about
wanting to do this with one grammar.


The basic form is:

    rule: blah blah (ugly_string | parse_inside_ugly_string) blah blah;

Where "ugly_string" is a lexer rule that matches the string and
then embeds the text  and "parse_inside_ugly_string" is a parser rule that
parses inside the string.   You end up with a grammar that will parse
a file with or without quotes on the subordinate grammar.  This won't work
if the island grammar is incompatible with the enclosing grammar's lexar.

There is one issue I am still working on.    [Found a workaround] The need 
for two
token rules that both can match the same string, one for structured
strings and one for simple strings.   Maybe I can move the
nesting call up to the parser level so I can use the same token.
But, it seems the code to switch streams works in a lexar but not
in a parser.   The FAQ example cheats by handling the include directive
as a lexical token.   I am now trying to use a "global" variable
that is common to a single instance of the parser+lexer to
switch the parsing behavior on and off but I am having a hard
time figuring out where to declare it such that it can be
set in a parser rule but tested from a lexer action.

[BUG]Unfortunately, trying to define a psuedo-global or even global
in antlr is a frustrating experience, particularly since I am
using antlrworks and everthing must be in the parser file.
I have no control over how files are linked together or even
knowledge of or control over what is in main().   Even defining "public 
class global { 
...}" in @header (which isn't reentrant) fails because it gets inserted
before the import statements.  "scope global {...}" and then using
$Global:: fails in lexer actions.  There should
  Globals could also have issues with backtracking, so I coded somewhat
defensively (I set it at the beginning of each rule that calls 
STRING_LITERAL_TOKEN).   And I can't see how to navigate from
the parser context to a public member of the lexer class (which
I declared) getTokenStream().member_name doesn't work. 
getTokenStream().getTokenSource() is a dead end; antlr runtime classs
fail to preserve the all important class linkages.

You should
be able to do something simple like PARSER->LEXER->Member

[BUG]Token rules don't accept parameters.  Tried that.  One of the
advantages of an integrated tool such as antlr over separate
tools like lex/yacc should be tight coupling.   This should
be possible even with TokenStream packages in the way.
Instead of calling:
   if(nextToken() == TOKEN_TYPE_FOO) ...
You call
   if(nextTokenOfType(TOKEN_TYPE_FOO, args)) ...
If the args make the token match different input, a token rule can
be automatically split into multiple tokens as far as the state
machine is concerned.

[BUG]ANTLR doesn't appear to be smart enough yet to automatically gate the 
lexar based on the parser context.   Seems that this could potentially
reslove a lot of grammar issues.   One example would be the use of
a keyword as an identifier.
   - Pass a bitmap into the lexer indicating the valid tokens
     at this level of grammar.
   - lexer state machine doesn't take branches not allowed by context.
     It defaults to branching into another state it would otherwise
     have reached.  If more characters have been consumed than
     necessary because the state machine would have otherwise
     reached a terminal state, the branch specifies a number
     of characters to ungetc().
   - If the lexer can't find a valid state in the current context,
     then maybe it tries all possibilities to enable better error
     messages: "Expecting hex constant, got: identifier" or
     "expecting decimal integer, got hex constant or identifier".
If antlr did this, the whole issue of parsing inside strings woul
have been a non-issue as you could have a STRING_LITERAL token
and still use '"' as a token as well.   And you could easily parse
languages where a hex constant was lexically indistinguisable from
an identifier but easily distinguished in context.

"The first time you 
encounter a problem, writing a formal, general, and automatic mechanism
is expensive and is usually overkill. From then on, though, you are much
faster and better at solving similar problems because of your automated 
tool."  -- definitive antlr guide

Basically, I have solved the problem of parsing inside strings, at least
for this problem domain.  But
I can't turn it on and off because every path I have tried to accomplish
that has been blocked, usually because of implementation flaws that
I would not have made even if I wasn't thinking about this particular
problem.  I have spent an entire day trying to do something (communicate
a single bit of information to the lexer) that should have been
trivial.


[BUG]Now because antlrworks only handles Java, I am going to need C
and Java code for the dirty tricks.   And since antlr lacks support
for conditionally including multiple languages, I am going to
have to preprocess the file when producing the C version.  To
do this, I will put something like "///Java" after each line of
Java code and "///C" before each line of C code.   That way,
when antlrworks processes the file, it will see Java but the
Makefile can preprocess the file to turn it into C.
As far as I can tell, the remote debugging protocol for C targets
hasn't been implemented yet.

Here are the relevent excerpts from the grammar file.

// Taken from ANTLR FAQ: How do I implement include files?
// http://www.antlr.org/wiki/pages/viewpage.action?pageId=557057
@lexer::members {
     class SaveStruct {
       SaveStruct(CharStream input){
         this.input = input;
         this.marker = input.mark();
       }
       public CharStream input;
       public int marker;
      }

      Stack<SaveStruct> includes = new Stack<SaveStruct>();

     // We should override this method for handling EOF of included file
      public Token nextToken(){
        Token token = super.nextToken();

        if(token==Token.EOF_TOKEN && !includes.empty()){
         // We've got EOF and have non empty stack.
          SaveStruct ss = includes.pop();
          setCharStream(ss.input);
          input.rewind(ss.marker);
          token = super.nextToken();
        }

       // Skip first token after switching on another input.
       if(((CommonToken)token).getStartIndex() < 0)
          token = super.nextToken();

        return token;
      }
  }

STRING_LITERAL:
      '"' STRING_CONTENTS_FRAGMENT '"'
        (WHITESPACE_COMMENT_FRAGMENT* '&' WHITESPACE_COMMENT_FRAGMENT* 
'"'STRING_CONTENTS_FRAGMENT '"')*
       {
         int i;
         boolean instring=false;
         boolean incomment=false;
         String s;
         StringBuffer d = new StringBuffer(65536);
         s=getText();
         for(i=0; i<s.length(); i++) {
            // if(s.charAt(i) != '"') d.append(s.charAt(i));
            if(!incomment && s.charAt(i) == '"') {
                instring = !instring;
                continue;  // don't want to add character to string below
            }
            if(!instring && s.charAt(i) == '-') { // since it has already 
been lexed, one dash is enough
               incomment=true;
            }
            if(s.charAt(i) == '\r' || s.charAt(i) == '\n') {
               incomment=false;
            }
            if(instring) d.append(s.charAt(i));

         }
         setText(d.toString());
         // char x[] = { 'a', 'b', 'c', 'd' };
         // PUSHSTREAM(new pANTLR3_INPUT_STREAM(new 
ANTLRStringStream(x,4)));
         // PUSHSTREAM(new pANTLR3_INPUT_STREAM(new 
ANTLRStringStream(d.toString())));

         // Adapted from ANTLR FAQ: How do implement include files?
          SaveStruct ss = new SaveStruct(input);
          includes.push(ss);

          // switch on new input stream
          setCharStream(new ANTLRStringStream(d.toString()));
          reset();
      }
      ;

fragment STRING_CONTENTS_FRAGMENT: ~('"')*;
fragment WHITESPACE_COMMENT_FRAGMENT: (WHITESPACE_FRAG | COMMENT_FRAG)+ ;

fragment WHITESPACE_FRAG: ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+ ;
fragment COMMENT_FRAG: '--' ~('\r'|'\n')* '\r'? '\n' ;


package_pin_mapping:
   'attribute' 'PIN_MAP' 'of' IDENTIFIER ':' 'entity' 'is' 
'PHYSICAL_PIN_MAP' ';'
   | 'constant' IDENTIFIER ':' 'PIN_MAP_STRING' ':=' (map_string | 
package_pin_map_string) ';' ;

package_pin_map_string: package_pin_map_string_entry ( ',' 
package_pin_map_string_entry )*;

package_pin_map_string_entry:
    IDENTIFIER ':' INTEGER_LITERAL
    | IDENTIFIER ':' '(' INTEGER_LITERAL ( ',' INTEGER_LITERAL )* ')'
    ;
// must invoke a subordinate parser on map_string;
map_string: STRING_LITERAL;

INTEGER_LITERAL: ('0'..'9')+;
---end excerpt---
I have been running the antlrworks debugger on the following
text (with package_pin_mapping as the start rule):

constant FK_PACKAGE:PIN_MAP_STRING:="CLK:9, Q:(10,11,12,13,16,17,18,19)," 
&   "D:(6,5,4,3,2,27,26,25)," & -- comment
   "GND:14, VCC:28, OC_NEG:7, TDO:20, TMS:21, TCK:23, TDI:24";

This gets translated into this:

constant FK_PACKAGE:PIN_MAP_STRING:= CLK:9, Q:(10,11,12,13,16,17,18,19),
   D:(6,5,4,3,2,27,26,25), GND:14,
   VCC:28, OC_NEG:7, TDO:20, TMS:21, TCK:23, TDI:24;
(linebreaks added for readability).

I am tempted to include "{" and "}" around the embedded text since
that makes a more aesthically pleasing virtual grammar closer to
what BSDL should have been in the first place.





In response to one of your comments that what I was trying to do,
parse inside strings, is unusual, I think that is far from the case.
>From a programming language perspective, it is unusual.   For data
files, though, it is very common.
One example would be SVG where they made the huge mistake of
encoding polylines inside of strings instead of encoding as
XML.   Saves a few bytes in the file but at way to high a cost.

Here is another possible vector representation of a polyline that
I am considering for a CAD application:
    <polyline type="closed">
       <line start="point(0,0,0)" end="point(0,1,0)" />
       <line start="point(0,1,0)" end="point(1,1,0)" />
       <arc start="point(1,1,0)" end="point(1,1,1)" center="point(0,1,0)" 
direction="clockwise" normalvector="vector(0,1,0)" />
    </polyline>
This is more in keeping with the XML philosphy and much more readable
than how SVG does it.   It also has the problem of parsing inside strings
but for a good reason.    Unlike SVG, points in this language are
expressions.   Writing expressions as xml trees would get hideous.

    <polyline id="polyline1" type="closed">
       <line id="segment1" start="point(0,0,0)" end="point(0,1,0)" />
       <line id="segment2" start="segment1.end" end="segment1.end+vector(1,0,0)" />
       <arc id="segment3" start="segment2.end" end="segment1.start" 
center="segment1.end"
direction="clockwise" normalvector="vector(0,1,0)" />
    </polyline>

This representation is still trading gramatical elegence for brevity. 
And in practice, CAD files can have a huge number of parameters so
things often aren't going to fit on one line, anyway.   But such
a tradeoff would have been a reasonable compromise for SVG.
Not having one tag per sub-object in SVG was a big mistake.
So, both SVG and a slightly improved SVG are examples of parsing inside
strings.

Of course, there is also the possibility of representing the
start and end points as tags instead of attributes which is actually
better XML practice.
    <polyline>
      <line>
         <start>point(0,0,0)</start>
         <end>point(0,0,0)</end>
      </line>
    ...
    </polyline>
Of course, abandoning XML makes possible a variety of more readable
expressions that read more like code:
    object polyline1 : type polyline {
       object segment1 : type line {
          start point(0,0,0);
          end point(0,1,0);
       }
       object segment2 : type line {
          start segment2.start;
          end segment1.end+vector(1,0,0);
       }
       ...
    }

[BUG]Not parsing inside strings
Some examples of structured stings that are likely to be common
in data files:
   - Lists
     foo="1,2,3"
     nameservers="128.168.0.1, 128.168.0.2"
     nameservers="ns1.example.com, ns2.example.com"
     administrators="john, paul, george"
   - ip addresses (above)
   - Dates:
     date="2008-01-01"
     date="2008-01-01T0505Z"
   - currency:
     "US$150.22"
   - format strings
     format="%s: (%d, %d)"
   - phone numbers:
     phone="+1-123-456-7890x123"
   - urls
     url="http://www.example.com:1234/foo/bar?query=antlr"
   - display modes:
     Option "MetaModes" "1600x1200, 1280x1024, 800x600, 640x480"
   - key codes
     type="CTRL+ALT"
   - colors
     color="lightblue"
     color="rgb:20/35/73"
     color="#FF0080"
   - USB/PCI device ids:
     id="1234:5678"
     id="0x1234:0x5678"
     id="usb:1234:5678"
   - filemodes:
     mode="0755"
     mode="u+rwx,g+rx,o+rx"
   - regular expressions
     match="[A-Za-z0-9][A-Za-z0-9_]*"
   - substitution
     path="/home/$(user)/mail"
   - query strings
     query="antlr AND \"island grammar\""
     query="name, address, phone FROM customers WHERE total_purchases>100"
   - ids
     id="foo bar" // invalid
     id="ABC123" // valid
   - styles
     <p style="{border: solid; border-width: thick; clear: both; 
background: 
silver; padding 12px; porder-style: groove}">
   -

If you are building a parser, validator, or a translator, you may need to 
parse inside.

[BUG]Thus, in the following example (where a string has all the baggage 
of
the BSDL example), a very simple notation such as
     LEXER_TOKEN --> STRIPANDPARSE( LEXER_FRAGMENT, root_rule)
could be used to say:
     When you encounter a LEXER_TOKEN, discard the portion that
     does not match one or more occurances of LEXER_FRAGMENT in the
     original lexer rule and then parse the results inline starting
     with root_rule.

Simple notation, fairly easy to implement except for requiring
the lexer to keep a temporary fragment tree, easy to apply in
a variety situations, requires no target language dependencies,
and the -->FUNCTION_CALL() mechanism can be reused to provide
many other things missing in antlr in a target language independent
way.   For more generality, an optional third argument could specify
a different set of lexer rules:
    lexer SUBSET1 {
        RULE1: ... ;
        RULE2: ... ;
        inherit MAIN_LEXER RULE3, RULE4;
       ...
    }
Maybe there is a way to use the x=RULE or x+=RULE notation somehow instead
of using the fragment extraction.  This equires that the variable
have a scope that spans more than one rule.  If so, it still should not
require target language specific code and should be reentrant across
mulitple invokations of parsers and possibly within a parser as well.

Example:
    ip_addresses: 'ip_address' '=' STRING_LITERAL 
-->STRIPANDPARSE(STRING_CONTENTS_FRAGMENT, ipadress_contents) ';' ;
    ip_address_contents: one_ip_address (',' one_ip_address);
    one_ip_address:
       ipv4_address
       | '[' ipv4_address ']'
       | ipv6_address
       | '[' ipv6_address ']'
       | domain_name
       ;
    IPV4_ADDRESS: INT '.' INT '.' INT '.' INT;
    IPV6_ADDRESS: HEX (':'+ HEX)*;   // oversimplified
    fragment HEX: ('0'..'9'| 'A'..'Z')+
    fragment INT: ('0'..'9')+
    STRING_LITERAL:
      '"' STRING_CONTENTS_FRAGMENT '"'
        (WHITESPACE_COMMENT_FRAGMENT* '&' WHITESPACE_COMMENT_FRAGMENT*
       '"'STRING_CONTENTS_FRAGMENT '"')*
    fragment STRING_CONTENTS_FRAGMENT: ~('"')*;
    fragment WHITESPACE_COMMENT_FRAGMENT: (WHITESPACE_FRAG | COMMENT_FRAG)+ 
;

    fragment WHITESPACE_FRAG: ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+ ;
    fragment COMMENT_FRAG: '--' ~('\r'|'\n')* '\r'? '\n' ;


In your example, you wrote:
    : ATTRIBUTE^ ID OF! ID COLON! ENTITY! IS! expression SEMI! ;
took me a minute, then I realized you were stripping away the
unnecessary cruft using "!".   Although I was aware of "!", I hadn't
thought of using it that aggressively, yet.    Since I am parsing
BSDL instead of VHDL, I am using a separate rule for each.


I would have been done by now if I had written a recursive descent
parser by hand.   I have been trying to learn antlr in the hope
that, having done so, I would be able to do similar things faster.
In light of my experiences so far, that hope is fading fast.

[bug] The problem isn't so much the individual bugs but the fact
that every most attempts to workaround an existing bug is
compounded by additional bugs.   The tree of compounding bugs below is
only a partial list:
   - bug: antlr doesn't handle parsing inside strings
     workaround: switch the input by messing with the internals
     - bug: antlrworks doesn't suport debugging C code
     - workaround: code the dirty tricks in Java as well as C
       - bug: Java runtime lacks InnerParser like functionality
         (not that innerparser itself is quite right for the job
         since it requires separate file).
         workaround: try to duplicate the functionaly using the
         include file example.
          - bug: the include file example only works in the lexer
              and you can't pass arguments to lexer rules.   Need
              parser context to enable and disable dirty tricks.
            workaround: try to set a variable
              - bug: variables aren't shared between lexer and parser
                workaround: use scope
                  - bug: that doesn't work
                workaround: use @members
                  - bug: that doesn't work
                workaround: use a global variable (not reentrant)
                   - bug: straightjacketed java language doesn't allow
                     globals:
                     workaround: declare a global class in @header
                         - bug: it puts the header before the imports
                           and Java won't let you declare a class before
                            the imports
               workaround: try to put the variable in the lexer and
               access it from the parser by following the class
               chain from lexer to parser
                  - bug: antlr doesn't provide ready access to
                    the current parser and lexer.  PARSER->, LEXER->
                    Workaround: follow the class chain
                     - bug: antlr runtime doesn't preserve class chain
                       linkages, for example in TokenSource so
                       you can't get from the parser class to the
                       lexer class public members.
                       workaround: try to go from lexer to parser
                          - bug: doesn't look like that will work, either.
           Workaround: try to use rule arguments
              - bug: you can't pass rule arguments to lexer rules.

       - bug: antlrworks doesn't support multiple target language actions
           or conditional inclusion
         workaround: preprocess grammar file
            - bug: antlrworks doesn't play nicely with make
             workaround:  use a weird syntax
     - workaround: define two parser rules that parse the
       same token with different actions based on context
        - bug: can't communicate parser to lexer
          workaround: use two lexer rules that match the same token
          but are never called in the same parser context
           - bug: antlr can't pick the lexer rule based on context
   workaround: set parse_inside_string in token rules for tokens
         which match before the string to be parsed, even though
         this violates one of ANTLRs primary selling points of not
         having to define tokens seperately.
        - bug: this
          PIN_MAP_STRING: 'PIN_MAP_STRING' {
               parse_inside_string=true;
          };
          Generates this:
            "mismatched input 'PIN_MAP_STRING' expecting PIN_MAP_STRING"
          But 'PIN_MAP_STRING' in a parser rule does not.
          Workaround: move IDENTIFIER to bottom of file since ANTLR
          handles precedence by order in file rather than an explicit
          precedence.

[bug]When parsing inside a string, line numbers printed are wrong and
it doesn't print the number the string (or include file) was included
from.

Anyway, I finally got it to parse the entire file.

From mdepascale at dii.unisi.it  Thu Jan  3 02:59:38 2008
From: mdepascale at dii.unisi.it (Maurizio de Pascale)
Date: Thu, 03 Jan 2008 11:59:38 +0100
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"L0147260D3B824f159AAA5FFA889BCDAF.1199318763.scalix.temporal-wave.com*"@MHS>
References: <"L0147260D3B824f159AAA5FFA889BCDAF.1199318763.scalix.temporal-wave.com*"@MHS>
Message-ID: <477CC01A.702@dii.unisi.it>

Jim Idle wrote:
>   
>> -----Original Message-----
>> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
>> Sent: Wednesday, January 02, 2008 2:49 PM
>> To: Jim Idle; antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] More, Status of C++ backend?
>>
>> At 05:22 3/01/2008, Jim Idle wrote:
>>  >Yeah - I see that argument too, however I think it will end up
>>  >being slower just for the sake of making it use "proper
>>  >classes", so I would not use it and just go with the C runtime.
>>
>> There's nothing inherently slow about C++ over C, it's just that
>> you have to be aware that the compiler can inject extra code
>> "behind your back" :)
>>     
>
> Well, there is extra setup for exception handling and so on - hence all 
> the goings on with Embedded C++ specs. It never turns out as lean as C 
> and most programmers screw it up royally ;-P
>
>   
It depends on the compiler and hardware. zero cost C++ exception 
handling is possible.
However, moving error reporting/handling from additional 
arguments/return codes to exceptions can even make code faster on most 
compilers, and certainly makes code more readable.
As an example, a main using the C runtime is ten times longer of the 
same main in Java.

My suggestion is that the right road (ideally of course, I know the C 
runtime is already in place) would be to have the runtime written in C++ 
(as close as possible to the java counterpart) and provide (also) a C 
API for C users.


my two cents,
Maurizio de Pascale
mdepascale at dii.unisi.it


From clive.i.hill at jpmorgan.com  Thu Jan  3 05:24:35 2008
From: clive.i.hill at jpmorgan.com (clive.i.hill at jpmorgan.com)
Date: Thu, 3 Jan 2008 13:24:35 +0000
Subject: [antlr-interest] Problem with lexical nondeterminism - ANTLR 2.7.7
Message-ID: <OF1FAC3B32.201AB508-ON802573C5.0048E08B-802573C5.0049A9BD@jpmchase.com>

Hi,

I get the following warning when building my lexer from stragegy.g:

/Grammar/strategy.g: warning:lexical nondeterminism between rules NUMBER 
and APAC_NUMERIC_TICKER upon
./Grammar/strategy.g:     k==1:'0'..'9'
./Grammar/strategy.g:     k==2:'0'..'9'
./Grammar/strategy.g:     k==3:'0'..'9'
./Grammar/strategy.g:     k==4:'0'..'9'

Passing the following string fails:

"spx dec 1350 c 43 44"

As it takes 1350 to be an APAC_NUMERIC_TICKER when I it to be considered 
to be a NUMBER.  Interestingly, the following works:

"spx dec 135 c 43 44"

My definition for the lexer rule is:

APAC_NUMERIC_TICKER
    : ((DIGIT)+ (COMMA) (CHAR) (CHAR))
    ;

I want this to only be used if a string entered "has at least one DIGIT 
and is followed by a COMMA then two CHARs".  This is clearly not the case 
for the string 1350 - and yet it matches,  and then throws the exception:


antlr.TokenStreamRecognitionException: expecting ',', found ' '


Can anyone suggest a way to only match this rule if it is in the correct 
format ((DIGIT)+ (COMMA) (CHAR) (CHAR)) ?

Thanks in advance,

Clive



Attached is my grammar file.




Generally, this communication is for informational purposes only
and it is not intended as an offer or solicitation for the purchase
or sale of any financial instrument or as an official confirmation
of any transaction. In the event you are receiving the offering
materials attached below related to your interest in hedge funds or
private equity, this communication may be intended as an offer or
solicitation for the purchase or sale of such fund(s).  All market
prices, data and other information are not warranted as to
completeness or accuracy and are subject to change without notice.
Any comments or statements made herein do not necessarily reflect
those of JPMorgan Chase & Co., its subsidiaries and affiliates.

This transmission may contain information that is privileged,
confidential, legally privileged, and/or exempt from disclosure
under applicable law. If you are not the intended recipient, you
are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance
thereon) is STRICTLY PROHIBITED. Although this transmission and any
attachments are believed to be free of any virus or other defect
that might affect any computer system into which it is received and
opened, it is the responsibility of the recipient to ensure that it
is virus free and no responsibility is accepted by JPMorgan Chase &
Co., its subsidiaries and affiliates, as applicable, for any loss
or damage arising in any way from its use. If you received this
transmission in error, please immediately contact the sender and
destroy the material in its entirety, whether in electronic or hard
copy format. Thank you.
Please refer to http://www.jpmorgan.com/pages/disclosures for
disclosures relating to UK legal entities.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/9351b184/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: strategy.g.zip
Type: application/zip
Size: 4965 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/9351b184/attachment.zip 

From antlr-list at splitbody.com  Thu Jan  3 05:40:38 2008
From: antlr-list at splitbody.com (body)
Date: Thu, 3 Jan 2008 08:40:38 -0500
Subject: [antlr-interest] first steps with a lexer/parser
Message-ID: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>

hello,

i am trying to deal with the messages that look like this:

{ a=1 b="2" c="t" d="stuff" e="one two" f={ g="three four" h={ i=5
j="a ha" } } }

below is my lexer/parser. it seems to work and emit proper-looking
tree, but i want to run it by you, because it does not feel right.

it seems like i should be using fragments somewhere, also i cannot
figure out how to build a proper tree grammar out of it.

any suggestions appreciated.

thank you.

-----------------
grammar MsgString;

options { output = AST; }

tokens {
	PAIR;
	MSG;
	STR_VAL;
	INT_VAL;
}

start  :    msg NL? EOF -> ^(MSG msg) ;

msg    :    '{' WS nameValuePairExpr* WS '}' -> ^(MSG nameValuePairExpr*) ;

nameValuePairExpr
       :    NAME '=' valueExpr WS? -> ^(PAIR NAME valueExpr) ;

valueExpr
       :    quotedString -> ^(STR_VAL quotedString)
       |    INT -> ^(INT_VAL INT)
       |    msg
       ;

quotedString
       :    '"'! .* '"'!
       ;

INT    :    '0'..'9'+ ;

NAME   :    ('a'..'z'|'A'..'Z'|'0'..'9')+ ;

WS     :    ' '+ ;

NL     :    ('\n'|'\r')+ ;
-----------------

From harald_m_mueller at gmx.de  Thu Jan  3 05:47:24 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Thu, 03 Jan 2008 14:47:24 +0100
Subject: [antlr-interest] nested parsing (BSDL)
In-Reply-To: <Pine.LNX.4.64.0801011551220.8143@localhost.localdomain>
References: <E1J9hGE-0005mN-G2@localhost.localdomain>
	<Pine.LNX.4.64.0801011551220.8143@localhost.localdomain>
Message-ID: <20080103134724.43040@gmx.net>

Hi - 

You wrote a very intersting (and very long) email about your experience and frustrations with ANTLR (and AntlrWorks) - I would heartily invite anyone (especially the core ANTLR team) to read through this, at least your final "tree of bugs" ...

... even though I do not agree with you on many points (or maybe only on a few central points). I'll try to address these items - and then let the ANTLR people find out what should be done ...

Yesterday, I've posted another solution to your problem - you may or may not have read it - which actually does have only a single grammar file. It is maybe not completely fair, but I'll use that solution to compare what we did.
First, I think we both ended up with the same concept - having that rule (structured_string | structure) somewhere which allows both a string-enclosed and a non-enclosed version of the same syntactic structure.

-----
Here's a short comparison of your approaches:

>    - Single grammar file
"Me too."

>    - Makes good AST trees if you want them
"Me too," I'd say - the AST looks exactly as if the text in the string was written verbatim in the file.

>    - Use of AST trees is not necessary
>      Can use one assignment to a data structure or a function call
>      for more complicated assignments in each major rule.
Me not really: The separate parser might make it necessary to share some state over both of them by passing the "parent parser" to the "child parser"; however, this is a standard delegation pattern which costs only a few lines.

>    - doesn't have lex/yacc anachronisms like predefining
>      lexical tokens.
"Me too."

>    - extending to support other structured strings does not require
>      anything more than new grammar rules
Here, I need a new method which sets up a lexer+parser to run inside the string; however, even this method can be generalized (nicely in languages with generics) so that only 2 lines or so of calling code remain.
(I assume that the lexical syntax of all structured strings in one grammar is the same - e.g., they all are combined with & and can have nested comments, but nothing else).

>    - If it wasn't for a confounding series of bugs, the single
>      grammar file would have been conducive to using antlrworks
>      debugger.
See first item.

>    - yours uses InnerParser.  I can't find that documented anywhere.
??? It's a parser class created from the grammar I defined in Inner.g in the two-grammar (+lexer grammar) version.

> Thus it keeps my options open.
I hope mine (the single grammar file version) would also.

> Yours has an advantage if the island grammar is lexically incompatable
> with the parent grammar.   However, I thought I was pretty clear about
> wanting to do this with one grammar.
Yes - these are definitely two different kind of fish ...

> 
> 
> The basic form is:
> 
>     rule: blah blah (ugly_string | parse_inside_ugly_string) blah blah;
> 
> Where "ugly_string" is a lexer rule that matches the string and
> then embeds the text  and "parse_inside_ugly_string" is a parser rule that
> parses inside the string.   You end up with a grammar that will parse
> a file with or without quotes on the subordinate grammar.

...

Re Antlrworks, I must say that I dont use it ... I'm just much faster setting up a new (or copying on of my) small environment for running something; re gramamr debugging, up to now my knowledge of LL(k) parsing and the (not always obvious) ANTLR rules have allowed me to find grammar troubles in acceptable time ... but this is a very personal judgment.

> [BUG]Unfortunately, trying to define a psuedo-global or even global
> in antlr is a frustrating experience, particularly since I am
> using antlrworks and everthing must be in the parser file.

I'm not sure what you mean here. But defining something global in Java could be done by just creating a static inner class, which would go into the @members section - but that's not an ANTLR issue.

Or do you mean you want to share something between lexer and parser? why don't you just pass them a common context which holds the data you want to exchange (except that ... sigh ... any such behavior will most probably not be called in AntlrWorks, and hence you lose some debugging capability ... probably exactly for the nerve-racking issues you're trying to solve ...).


The next items you write essentially want to control the lexer from the parser: As far as I understand ANTLR 3, it is simply not designed for this; rather, the idea is that the tokization happens *completely up front*. I - as you - can cite numerous cases where this is not acceptable (e.g. reading from an endless stream - pipe, network, ...), but at the moment, this seems to be frozen.
E.g.:
> [BUG]ANTLR doesn't appear to be smart enough yet to automatically gate the
> lexar based on the parser context.   Seems that this could potentially
> reslove a lot of grammar issues.   One example would be the use of
> a keyword as an identifier.
>    - Pass a bitmap into the lexer indicating the valid tokens
>      at this level of grammar.

Yes. The alternative is to move up such decisions into the parser (I wrote a posting about "lexing parsers" some time ago). It helps to solve such issues - whether it is "beautiful" ... well ...

[...]
> I have spent an entire day trying to do something (communicate
> a single bit of information to the lexer) that should have been
> trivial.

A trivial answer to this is: You sholdn't have tried so long ... simply moving to the parser level would have solved that issue as I see it - but this obviously said with hindsight (and after I also learned the issue of up-front tokenization the hard way; ANTLR 2, e.g. could switch lexers and parsers on the same input stream - I concept I used in a few places, and where I'm now scrathcing my head how I should replace this in ANTLR 3 [currently, I simply don't upgrade those projects ...]).

> [BUG]Now because antlrworks only handles Java, I am going to need C
> and Java code for the dirty tricks.   And since antlr lacks support
> for conditionally including multiple languages, ...

As I said, I don't use AntlrWorks, so I can't say why this support is not (or not fully) there ...


> STRING_LITERAL:
>       '"' STRING_CONTENTS_FRAGMENT '"'
>         (WHITESPACE_COMMENT_FRAGMENT* '&' WHITESPACE_COMMENT_FRAGMENT* 
> '"'STRING_CONTENTS_FRAGMENT '"')*
>        {
>          int i;
>          boolean instring=false;
>          boolean incomment=false;
>          String s;
>          StringBuffer d = new StringBuffer(65536);
>          s=getText();
>          for(i=0; i<s.length(); i++) {
>             // if(s.charAt(i) != '"') d.append(s.charAt(i));
>             if(!incomment && s.charAt(i) == '"') {
>                 instring = !instring;
>                 continue;  // don't want to add character to string below
>             }
>             if(!instring && s.charAt(i) == '-') { // since it has already 
> been lexed, one dash is enough
>                incomment=true;
>             }
>             if(s.charAt(i) == '\r' || s.charAt(i) == '\n') {
>                incomment=false;
>             }
>             if(instring) d.append(s.charAt(i));
> 
>          }
>          setText(d.toString());
>          // char x[] = { 'a', 'b', 'c', 'd' };
>          // PUSHSTREAM(new pANTLR3_INPUT_STREAM(new 
> ANTLRStringStream(x,4)));
>          // PUSHSTREAM(new pANTLR3_INPUT_STREAM(new 
> ANTLRStringStream(d.toString())));
> 
>          // Adapted from ANTLR FAQ: How do implement include files?
>           SaveStruct ss = new SaveStruct(input);
>           includes.push(ss);
> 
>           // switch on new input stream
>           setCharStream(new ANTLRStringStream(d.toString()));
>           reset();
>       }
>       ;

I would really hope that any solution which does not do such manual parsing is to be preferred (like mine [the last one]???). Yet, I see that such things are possible and even FAQ'd ... not happy with this.

> In response to one of your comments that what I was trying to do,
> parse inside strings, is unusual, I think that is far from the case.
> >From a programming language perspective, it is unusual.   For data
> files, though, it is very common.

Granted! - I have not done much work with such (for whatever reasons - just happens to be so).

> One example would be SVG where they made the huge mistake of

... well, badly design languages are certainly an issue - although the question up to which point a tool must support which strange things is probably a very open-ended one.

> [BUG]Not parsing inside strings

Bug ... well: I think the 10 lines or so I need to set up an additional lexer+parser which then runs through the string with the grammar already there isn't that much - so whether ANTLR needs to support anything more here, I doubt (except if you want to use AntlrWorks on such nested things: Then, an ANTLR-language-level notation is needed ... AntlrWorks people: What would you say?)

> Some examples of structured stings that are likely to be common
> in data files:
[...]

Oh - I must confess that only now I understand your view - and I must agree: All those file formats which declare "string escapes" = say that they might or might not enclose something in a string only to protect some text from "another semantics" (e.g., when a comma means "column separator" in a file; but should mean "list separator" for a single-column entry at some point) are candidates for such optional in-string/directly-in-text parsing switching.
-> you are right, this is much more frequent than I thought.

> 
> [BUG]Thus, in the following example (where a string has all the baggage 
> of
> the BSDL example), a very simple notation such as
>      LEXER_TOKEN --> STRIPANDPARSE( LEXER_FRAGMENT, root_rule)
> could be used to say:
>      When you encounter a LEXER_TOKEN, discard the portion that
>      does not match one or more occurances of LEXER_FRAGMENT in the
>      original lexer rule and then parse the results inline starting
>      with root_rule.
> 
> Simple notation, [...]

I still would not call it a bug ... still a suggestion to be thought about - at least one (they - the ANTLR people; we - the ANTLR users) must provide easy idioms how to do this if it is not supported internally by ANTLR.


> In your example, you wrote:
>     : ATTRIBUTE^ ID OF! ID COLON! ENTITY! IS! expression SEMI! ;
> took me a minute, then I realized you were stripping away the
> unnecessary cruft using "!".   Although I was aware of "!", I hadn't
> thought of using it that aggressively, yet.    

... and probably Terence kills me for this - instead of writing

: ATTRIBUTE i1=ID OF! i2=ID COLON ENTITY IS expression SEMI
   -> ^(ATTRIBUTE $i1 $i2 expression)

The many !s grew "historically" - first, I thought I'd keep everything except of and is, then I say the SEMI, then I removed ENTITY also ...

> I would have been done by now if I had written a recursive descent
> parser by hand.   I have been trying to learn antlr in the hope
> that, having done so, I would be able to do similar things faster.
> In light of my experiences so far, that hope is fading fast.

To some degree, I have to agree with you: Even though Terence has written a great book, it is much too "main-stream compiler oriented." Many many aspects of what one can do with languages (and what languages can do to one) are not covered anywhere - even the Wiki is sparse on such issues. In the last 2 weeks, I have written maybe 20 smaller ANTLR grammars in trying to answer various questions on this mailing list. Maybe I should just throw them into the Wiki as-is (but of course with some comments) ... with the double risk that people like you are even more overwhelmed; and that people more in the knowing than I tear my "solutions" apart - but at least there'd be somewhat more to find ...

> 
> [bug] The problem isn't so much the individual bugs but the fact
> that every most attempts to workaround an existing bug is
> compounded by additional bugs.   

In one of my first postings here, I got the (IMHO somewhat harsh) answer (I paraphrase) "you will see that it can be done in ANTLR 3 if you just learn to think the ANTLR 3 way ..." - and I just were inclined to answer the same way. However, this is not a solution. When someone (I, maybe) finds time, we could/should add your list of "bugs" to the Wiki and give some useful explanation on how you could have proceeded differently (and, in the best of all worlds, also explain the troubles yo might have encountered then ...); I'll at least try to do this a little bit.

> The tree of compounding bugs below is
> only a partial list:
>    - bug: antlr doesn't handle parsing inside strings
>      workaround: switch the input by messing with the internals
>      - bug: antlrworks doesn't suport debugging C code
>      - workaround: code the dirty tricks in Java as well as C
>        - bug: Java runtime lacks InnerParser like functionality
>          (not that innerparser itself is quite right for the job
>          since it requires separate file).
>          workaround: try to duplicate the functionaly using the
>          include file example.
>           - bug: the include file example only works in the lexer
>               and you can't pass arguments to lexer rules.   Need
>               parser context to enable and disable dirty tricks.
>             workaround: try to set a variable
>               - bug: variables aren't shared between lexer and parser
>                 workaround: use scope
>                   - bug: that doesn't work
>                 workaround: use @members
>                   - bug: that doesn't work
>                 workaround: use a global variable (not reentrant)
>                    - bug: straightjacketed java language doesn't allow
>                      globals:
>                      workaround: declare a global class in @header
>                          - bug: it puts the header before the imports
>                            and Java won't let you declare a class before
>                             the imports
>                workaround: try to put the variable in the lexer and
>                access it from the parser by following the class
>                chain from lexer to parser
>                   - bug: antlr doesn't provide ready access to
>                     the current parser and lexer.  PARSER->, LEXER->
>                     Workaround: follow the class chain
>                      - bug: antlr runtime doesn't preserve class chain
>                        linkages, for example in TokenSource so
>                        you can't get from the parser class to the
>                        lexer class public members.
>                        workaround: try to go from lexer to parser
>                           - bug: doesn't look like that will work, either.
>            Workaround: try to use rule arguments
>               - bug: you can't pass rule arguments to lexer rules.
> 
>        - bug: antlrworks doesn't support multiple target language actions
>            or conditional inclusion
>          workaround: preprocess grammar file
>             - bug: antlrworks doesn't play nicely with make
>              workaround:  use a weird syntax
>      - workaround: define two parser rules that parse the
>        same token with different actions based on context
>         - bug: can't communicate parser to lexer
>           workaround: use two lexer rules that match the same token
>           but are never called in the same parser context
>            - bug: antlr can't pick the lexer rule based on context
>    workaround: set parse_inside_string in token rules for tokens
>          which match before the string to be parsed, even though
>          this violates one of ANTLRs primary selling points of not
>          having to define tokens seperately.
>         - bug: this
>           PIN_MAP_STRING: 'PIN_MAP_STRING' {
>                parse_inside_string=true;
>           };
>           Generates this:
>             "mismatched input 'PIN_MAP_STRING' expecting PIN_MAP_STRING"
>           But 'PIN_MAP_STRING' in a parser rule does not.
>           Workaround: move IDENTIFIER to bottom of file since ANTLR
>           handles precedence by order in file rather than an explicit
>           precedence.
> 
> [bug]When parsing inside a string, line numbers printed are wrong and
> it doesn't print the number the string (or include file) was included
> from.

THIS is definitely a consequence of manually implemented nested lexers and parsers - but it should be easy to fix this (telling a lexer that it should start with file/line so-and-so) ... maybe someone knows how to do this???

> 
> Anyway, I finally got it to parse the entire file.

What can I say?

Best regards
Harald

-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From harald_m_mueller at gmx.de  Thu Jan  3 05:51:31 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Thu, 03 Jan 2008 14:51:31 +0100
Subject: [antlr-interest] Problem with lexical nondeterminism - ANTLR
	2.7.7
In-Reply-To: <OF1FAC3B32.201AB508-ON802573C5.0048E08B-802573C5.0049A9BD@jpmchase.com>
References: <OF1FAC3B32.201AB508-ON802573C5.0048E08B-802573C5.0049A9BD@jpmchase.com>
Message-ID: <20080103135131.116360@gmx.net>

Just off my head, you could write something like (I did not check the syntax at all)

NUMBER
    : DIGIT+ 
      ( COMMA CHAR CHAR { $type = APAC_NUMERIC_TICKER; }
      |                 // remains a NUMBER
      )

- only ANTLR 3 can look that far ahead ... (and you dont need so many parentheses).

Regards
Harald

-------- Original-Nachricht --------
> Datum: Thu, 3 Jan 2008 13:24:35 +0000
> Von: clive.i.hill at jpmorgan.com
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Problem with lexical nondeterminism - ANTLR 2.7.7

> Hi,
> 
> I get the following warning when building my lexer from stragegy.g:
> 
> /Grammar/strategy.g: warning:lexical nondeterminism between rules NUMBER 
> and APAC_NUMERIC_TICKER upon
> ./Grammar/strategy.g:     k==1:'0'..'9'
> ./Grammar/strategy.g:     k==2:'0'..'9'
> ./Grammar/strategy.g:     k==3:'0'..'9'
> ./Grammar/strategy.g:     k==4:'0'..'9'
> 
> Passing the following string fails:
> 
> "spx dec 1350 c 43 44"
> 
> As it takes 1350 to be an APAC_NUMERIC_TICKER when I it to be considered 
> to be a NUMBER.  Interestingly, the following works:
> 
> "spx dec 135 c 43 44"
> 
> My definition for the lexer rule is:
> 
> APAC_NUMERIC_TICKER
>     
>     ;
> 
> I want this to only be used if a string entered "has at least one DIGIT 
> and is followed by a COMMA then two CHARs".  This is clearly not the case 
> for the string 1350 - and yet it matches,  and then throws the exception:
> 
> 
> antlr.TokenStreamRecognitionException: expecting ',', found ' '
> 
> 
> Can anyone suggest a way to only match this rule if it is in the correct 
> format ((DIGIT)+ (COMMA) (CHAR) (CHAR)) ?
> 
> Thanks in advance,
> 
> Clive
> 
> 
> 
> Attached is my grammar file.
> 
> 
> 
> 
> Generally, this communication is for informational purposes only
> and it is not intended as an offer or solicitation for the purchase
> or sale of any financial instrument or as an official confirmation
> of any transaction. In the event you are receiving the offering
> materials attached below related to your interest in hedge funds or
> private equity, this communication may be intended as an offer or
> solicitation for the purchase or sale of such fund(s).  All market
> prices, data and other information are not warranted as to
> completeness or accuracy and are subject to change without notice.
> Any comments or statements made herein do not necessarily reflect
> those of JPMorgan Chase & Co., its subsidiaries and affiliates.
> 
> This transmission may contain information that is privileged,
> confidential, legally privileged, and/or exempt from disclosure
> under applicable law. If you are not the intended recipient, you
> are hereby notified that any disclosure, copying, distribution, or
> use of the information contained herein (including any reliance
> thereon) is STRICTLY PROHIBITED. Although this transmission and any
> attachments are believed to be free of any virus or other defect
> that might affect any computer system into which it is received and
> opened, it is the responsibility of the recipient to ensure that it
> is virus free and no responsibility is accepted by JPMorgan Chase &
> Co., its subsidiaries and affiliates, as applicable, for any loss
> or damage arising in any way from its use. If you received this
> transmission in error, please immediately contact the sender and
> destroy the material in its entirety, whether in electronic or hard
> copy format. Thank you.
> Please refer to http://www.jpmorgan.com/pages/disclosures for
> disclosures relating to UK legal entities.

-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From spoulson3 at yahoo.com  Thu Jan  3 06:22:27 2008
From: spoulson3 at yahoo.com (Shawn Poulson)
Date: Thu, 3 Jan 2008 06:22:27 -0800 (PST)
Subject: [antlr-interest] antlr-interest Digest, Vol 38, Issue 9
In-Reply-To: <mailman.21311.1199319342.2534.antlr-interest@antlr.org>
Message-ID: <685558.30311.qm@web30611.mail.mud.yahoo.com>

> Actually, you have to put the jars into the "_SharedLibs" directory.
> Unfortunately, the readme has a wrong naming scheme compared to what
> the
> build file actually says. Note the 's' in "_SharedLibs" and the
> different ANTLR-jar name. I'm using a depot version of the build file
> where there may other changes compared to the 3.0-version, so you may
> end up editing files yourself again, if I'd sent it to you.

Ok, I've copied antlr-2.7.7.jar, antlr-3.0.1.jar,
antlr-runtime-3.0.1.jar, and stringtemplate-3.1b1.jar into _SharedLibs.
 Nant is still erroring out on the same ClassNotFoundException.

I see that antlr-3.0.1.jar contains the org.antlr.Tool path and
structure.  What is keeping Java from opening this jar?  I tried
renaming to antlr.jar, but again no change.

What else would I need to copy in or edit?

Thanks for the quick reply.


---
Shawn Poulson
spoulson at explodingcoder.com

From harald_m_mueller at gmx.de  Thu Jan  3 06:32:55 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Thu, 03 Jan 2008 15:32:55 +0100
Subject: [antlr-interest] antlr-interest Digest, Vol 38, Issue 9
In-Reply-To: <685558.30311.qm@web30611.mail.mud.yahoo.com>
References: <685558.30311.qm@web30611.mail.mud.yahoo.com>
Message-ID: <20080103143255.43050@gmx.net>

Hi -

Maybe you have the same problem I had: For a reason unknown to me (Johannes??), the nant file "examples-v3.common.xml" requires that the ANTLR.jar is called "antlr-v3.x.jar". If you rename it so, everything works ...
Oops: Also stringtemplate must be called "stringtemplate-v3.x.jar".

Best is that you look into the file examples-v3.common.xml to find out the required names - they are near the top of the file.

Regards
Harald

-------- Original-Nachricht --------
> Datum: Thu, 3 Jan 2008 06:22:27 -0800 (PST)
> Von: Shawn Poulson <spoulson3 at yahoo.com>
> An: jaluber at gmx.de
> CC: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] antlr-interest Digest, Vol 38, Issue 9

> > Actually, you have to put the jars into the "_SharedLibs" directory.
> > Unfortunately, the readme has a wrong naming scheme compared to what
> > the
> > build file actually says. Note the 's' in "_SharedLibs" and the
> > different ANTLR-jar name. I'm using a depot version of the build file
> > where there may other changes compared to the 3.0-version, so you may
> > end up editing files yourself again, if I'd sent it to you.
> 
> Ok, I've copied antlr-2.7.7.jar, antlr-3.0.1.jar,
> antlr-runtime-3.0.1.jar, and stringtemplate-3.1b1.jar into _SharedLibs.
>  Nant is still erroring out on the same ClassNotFoundException.
> 
> I see that antlr-3.0.1.jar contains the org.antlr.Tool path and
> structure.  What is keeping Java from opening this jar?  I tried
> renaming to antlr.jar, but again no change.
> 
> What else would I need to copy in or edit?
> 
> Thanks for the quick reply.
> 
> 
> ---
> Shawn Poulson
> spoulson at explodingcoder.com

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger?did=10

From harald_m_mueller at gmx.de  Thu Jan  3 06:59:11 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Thu, 03 Jan 2008 15:59:11 +0100
Subject: [antlr-interest] first steps with a lexer/parser
In-Reply-To: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>
References: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>
Message-ID: <20080103145911.43060@gmx.net>

Hi -

a) A quoted string should be a token, IMO, not a rule (except ... see the thread on parsing BSDL where we quarrel about "structured string parsing" ... but this would not be "first steps").
(I am constantly unsure whether ! works in lexer rules - so, if you wnat to strip the " and it does NOT work, first complain to Terence; and then do something like
    $text = $text.Trim('\"'); // in C#
or
    $text = $text.substring(1,$text.length-1); // in Java

b) Are you really sure that whitespace is that significant? According to your grammar,

{a=1}

is not allowed: You require a WS after { and before } - and WS is at least one blank. Also, { a = 1 } would be wrong: No WS around = ...
Almost all languages I know *ignore* whitespace. In ANTLR, you do this by sending the WS tokens to the HIDDEN channel via { $channel = HIDDEN; }.

c) There is no good reason to have artificial roots for single tokens - instead of ^(INT_VAL INT), just use the INT; same for STR_VAL.

d) Also for the '=', I would not add an artificial symbol, but simply use the '=' as root:

     ...: NAME '='^ valueExpr;

- but this is a matter of taste, I'd say.

Regards
Harald

-------- Original-Nachricht --------
> Datum: Thu, 3 Jan 2008 08:40:38 -0500
> Von: body <antlr-list at splitbody.com>
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] first steps with a lexer/parser

> hello,
> 
> i am trying to deal with the messages that look like this:
> 
> { a=1 b="2" c="t" d="stuff" e="one two" f={ g="three four" h={ i=5
> j="a ha" } } }
> 
> below is my lexer/parser. it seems to work and emit proper-looking
> tree, but i want to run it by you, because it does not feel right.
> 
> it seems like i should be using fragments somewhere, also i cannot
> figure out how to build a proper tree grammar out of it.
> 
> any suggestions appreciated.
> 
> thank you.
> 
> -----------------
> grammar MsgString;
> 
> options { output = AST; }
> 
> tokens {
> 	PAIR;
> 	MSG;
> 	STR_VAL;
> 	INT_VAL;
> }
> 
> start  :    msg NL? EOF -> ^(MSG msg) ;
> 
> msg    :    '{' WS nameValuePairExpr* WS '}' -> ^(MSG nameValuePairExpr*)
> ;
> 
> nameValuePairExpr
>        :    NAME '=' valueExpr WS? -> ^(PAIR NAME valueExpr) ;
> 
> valueExpr
>        :    quotedString -> ^(STR_VAL quotedString)
>        |    INT -> ^(INT_VAL INT)
>        |    msg
>        ;
> 
> quotedString
>        :    '"'! .* '"'!
>        ;
> 
> INT    :    '0'..'9'+ ;
> 
> NAME   :    ('a'..'z'|'A'..'Z'|'0'..'9')+ ;
> 
> WS     :    ' '+ ;
> 
> NL     :    ('\n'|'\r')+ ;
> -----------------

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger?did=10

From troy.daniels at baesystems.com  Thu Jan  3 07:00:39 2008
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Thu, 3 Jan 2008 10:00:39 -0500
Subject: [antlr-interest] Problem with lexical nondeterminism - ANTLR
	2.7.7
References: <OF1FAC3B32.201AB508-ON802573C5.0048E08B-802573C5.0049A9BD@jpmchase.com>
Message-ID: <40CBD611A793EA438464B91E749DD8B00361EAC1@blums0017.alphatech.com>

The problem is that your rules are ambiguous with fixed look-ahead,
which is what antlr 2 uses.  Given 4 digits and k=4 look-ahead, either
rule could match, hence the warning when compiling the grammar.  You
need a semantic predicate to disambiguate it:
 
APAC_NUMERIC_TICKER 
    : (DIGIT+ COMMA) => ((DIGIT)+ (COMMA) (CHAR) (CHAR)) 
    ; 

The sample input you give is precisely where it is ambiguous.  1350
looks like 4 digits, which will match NUMBER or the beginning of
APAC_NUMBER_TICKER.
 
Troy


  _____  

	From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of
clive.i.hill at jpmorgan.com
	Sent: Thursday, January 03, 2008 8:25 AM
	To: antlr-interest at antlr.org
	Subject: [antlr-interest] Problem with lexical nondeterminism -
ANTLR 2.7.7
	
	

	Hi, 
	
	I get the following warning when building my lexer from
stragegy.g: 
	
	/Grammar/strategy.g: warning:lexical nondeterminism between
rules NUMBER and APAC_NUMERIC_TICKER upon 
	./Grammar/strategy.g:     k==1:'0'..'9' 
	./Grammar/strategy.g:     k==2:'0'..'9' 
	./Grammar/strategy.g:     k==3:'0'..'9' 
	./Grammar/strategy.g:     k==4:'0'..'9' 
	
	Passing the following string fails: 
	
	"spx dec 1350 c 43 44" 
	
	As it takes 1350 to be an APAC_NUMERIC_TICKER when I it to be
considered to be a NUMBER.  Interestingly, the following works: 
	
	"spx dec 135 c 43 44" 
	
	My definition for the lexer rule is: 
	
	APAC_NUMERIC_TICKER 
	    : ((DIGIT)+ (COMMA) (CHAR) (CHAR)) 
	    ; 
	
	I want this to only be used if a string entered "has at least
one DIGIT and is followed by a COMMA then two CHARs".  This is clearly
not the case for the string 1350 - and yet it matches,  and then throws
the exception: 
	
	
antlr.TokenStreamRecognitionException: expecting ',', found ' '



	Can anyone suggest a way to only match this rule if it is in the
correct format ((DIGIT)+ (COMMA) (CHAR) (CHAR)) ? 
	
	Thanks in advance, 
	
	Clive 
	
	
	
	Attached is my grammar file. 
	
	
	

	
  _____  


	

	Generally, this communication is for informational purposes only
and it is not intended as an offer or solicitation for the purchase or
sale of any financial instrument or as an official confirmation of any
transaction. In the event you are receiving the offering materials
attached below related to your interest in hedge funds or private
equity, this communication may be intended as an offer or solicitation
for the purchase or sale of such fund(s). All market prices, data and
other information are not warranted as to completeness or accuracy and
are subject to change without notice. Any comments or statements made
herein do not necessarily reflect those of JPMorgan Chase & Co., its
subsidiaries and affiliates. This transmission may contain information
that is privileged, confidential, legally privileged, and/or exempt from
disclosure under applicable law. If you are not the intended recipient,
you are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance thereon)
is STRICTLY PROHIBITED. Although this transmission and any attachments
are believed to be free of any virus or other defect that might affect
any computer system into which it is received and opened, it is the
responsibility of the recipient to ensure that it is virus free and no
responsibility is accepted by JPMorgan Chase & Co., its subsidiaries and
affiliates, as applicable, for any loss or damage arising in any way
from its use. If you received this transmission in error, please
immediately contact the sender and destroy the material in its entirety,
whether in electronic or hard copy format. Thank you. Please refer to
http://www.jpmorgan.com/pages/disclosures for disclosures relating to UK
legal entities. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/9f257a3b/attachment.html 

From mailing.list.recipient at gmail.com  Thu Jan  3 07:03:58 2008
From: mailing.list.recipient at gmail.com (John Gunnarsson)
Date: Thu, 3 Jan 2008 16:03:58 +0100
Subject: [antlr-interest] C++ parser generator
Message-ID: <6b332d3d0801030703u62c694bagf07ff329f44d8cf3@mail.gmail.com>

Recently I discovered the need for a parser generator, tried flex/bison but
disliked it since it isn't really made for generating c++ code.
Is it possible to generate a c++ generator with antlrv3 (or any other
version of antlr)? cant find much documentation about it, the wiki is only
containg info about the C parser generator, as far as i could see.

//John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/01de8734/attachment-0001.html 

From spoulson3 at yahoo.com  Thu Jan  3 08:41:23 2008
From: spoulson3 at yahoo.com (Shawn Poulson)
Date: Thu, 3 Jan 2008 08:41:23 -0800 (PST)
Subject: [antlr-interest] antlr-interest Digest, Vol 38, Issue 9
In-Reply-To: <20080103143255.43050@gmx.net>
Message-ID: <97511.10717.qm@web30610.mail.mud.yahoo.com>

--- Harald Mueller <harald_m_mueller at gmx.de> wrote:

> Maybe you have the same problem I had: For a reason unknown to me
> (Johannes??), the nant file "examples-v3.common.xml" requires that
> the ANTLR.jar is called "antlr-v3.x.jar". If you rename it so,
> everything works ...
> Oops: Also stringtemplate must be called "stringtemplate-v3.x.jar".
> 
> Best is that you look into the file examples-v3.common.xml to find
> out the required names - they are near the top of the file.

This did it!  The antlr.classpath value had to be adjusted to the exact
filenames.  I also had to copy in the files from source distribution:
"runtime\CSharp\bin\net-2.0" to "_SharedLibs\net-2.0".

Now... if someone could clarify this stuff in the docs. :)  Thanks to
both of you, Harold and Johannes.

---
Shawn Poulson
spoulson at explodingcoder.com

From bernhardttom at yahoo.com  Thu Jan  3 09:26:29 2008
From: bernhardttom at yahoo.com (Thomas Bernhardt)
Date: Thu, 3 Jan 2008 09:26:29 -0800 (PST)
Subject: [antlr-interest] Tree parser and Java interface question to
	passing rule results
Message-ID: <552310.81112.qm@web37107.mail.mud.yahoo.com>

I found that in order for the "$constant.tree" to work, I have to turn on "output=AST" in my tree grammar. If I add "output=AST" then the generated tree walker doesn't compile: 

                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

with "retval.stop" cannot be found as a symbol variable, since the result inherits from TreeRuleReturnScope and that doesn't have a member stop. There are other compiler errors.

Thanks,
Tom
----- Original Message ----
From: Terence Parr <parrt at cs.usfca.edu>
To: Thomas Bernhardt <bernhardttom at yahoo.com>
Cc: antlr-interest at antlr.org
Sent: Wednesday, January 2, 2008 5:43:49 PM
Subject: Re: [antlr-interest] Tree parser and Java interface question to passing rule results


Hi.
On Jan 2, 2008, at 12:39 PM, Thomas Bernhardt wrote:

Can someone please help me get a tree walker to invoke a Java method for a rule, passing the tree node representing the rule result?

I have the tree grammar as follows, and the "???" is what I'm trying to figure out:

valueExpr
    :     constant { leaveNode(???); }
    |      // ... 
    ;

constant
    :    INT_TYPE
    |    LONG_TYPE
    |    FLOAT_TYPE
    |    DOUBLE_TYPE
    |    STRING_TYPE
    |    BOOL_TYPE
    |    NULL_TYPE
    ;

The goal is to get the tree or node that resulted from the "constant" rule to be passed to the "leaveNode(Tree tree)" method. What should "???" be?







$constant.tree


Ter






      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/9554fb62/attachment.html 

From jaluber at gmx.de  Thu Jan  3 09:49:29 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 03 Jan 2008 18:49:29 +0100
Subject: [antlr-interest] C++ parser generator
In-Reply-To: <6b332d3d0801030703u62c694bagf07ff329f44d8cf3@mail.gmail.com>
References: <6b332d3d0801030703u62c694bagf07ff329f44d8cf3@mail.gmail.com>
Message-ID: <477D2029.20506@gmx.de>

John Gunnarsson schrieb:
> Recently I discovered the need for a parser generator, tried flex/bison
> but disliked it since it isn't really made for generating c++ code.
> Is it possible to generate a c++ generator with antlrv3 (or any other
> version of antlr)? cant find much documentation about it, the wiki is
> only containg info about the C parser generator, as far as i could see.
> 
> //John

The former maintainer of the C++ target left because of lack of time and
the new one didn't manage to finish the wrapper around the C code - the
C code is still somewhat C++-incompatible (though this is being worked
upon). The best bet is to use the C-Target and a C-compiler and to use
"extern C" in your C++-code so far.

Johannes

From jaluber at gmx.de  Thu Jan  3 11:14:36 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 03 Jan 2008 20:14:36 +0100
Subject: [antlr-interest] antlr-interest Digest, Vol 38, Issue 9
In-Reply-To: <97511.10717.qm@web30610.mail.mud.yahoo.com>
References: <97511.10717.qm@web30610.mail.mud.yahoo.com>
Message-ID: <477D341C.2050302@gmx.de>

Shawn Poulson schrieb:
> --- Harald Mueller <harald_m_mueller at gmx.de> wrote:
> 
>> Maybe you have the same problem I had: For a reason unknown to me
>> (Johannes??), the nant file "examples-v3.common.xml" requires that
>> the ANTLR.jar is called "antlr-v3.x.jar". If you rename it so,
>> everything works ...
>> Oops: Also stringtemplate must be called "stringtemplate-v3.x.jar".
>>
>> Best is that you look into the file examples-v3.common.xml to find
>> out the required names - they are near the top of the file.

To answer Harald's question: The names of the required files are changed
to make the nant build files more immune against version changes. It
means less editing and normally less confusion.

> This did it!  The antlr.classpath value had to be adjusted to the exact
> filenames.  I also had to copy in the files from source distribution:
> "runtime\CSharp\bin\net-2.0" to "_SharedLibs\net-2.0".
> 
> Now... if someone could clarify this stuff in the docs. :)  Thanks to
> both of you, Harold and Johannes.

Please show the section(s) in the README.txt where something is actually
missing. A short look into the file didn't show anything.

Johannes

From antlr at mirality.co.nz  Thu Jan  3 11:53:08 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 04 Jan 2008 08:53:08 +1300
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <477CC01A.702@dii.unisi.it>
References: <"L0147260D3B824f159AAA5FFA889BCDAF.1199318763.scalix.temporal-wave.com*"@MHS>
	<477CC01A.702@dii.unisi.it>
Message-ID: <20080103195326.61C7811EB62@www.antlr.org>

At 23:59 3/01/2008, Maurizio de Pascale wrote:
 >My suggestion is that the right road (ideally of course, I know 
the
 >C runtime is already in place) would be to have the runtime 
written
 >in C++ (as close as possible to the java counterpart) and 
provide
 >(also) a C API for C users.

No, I disagree with that.  It's important to keep a pure C 
runtime, for use with embedded hardware.  Most of the embedded C++ 
compilers I've seen are fairly flaky.  (And that includes gcc.)


From antlr at mirality.co.nz  Thu Jan  3 12:00:53 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 04 Jan 2008 09:00:53 +1300
Subject: [antlr-interest] Problem with lexical nondeterminism - ANTLR
 2.7.7
In-Reply-To: <40CBD611A793EA438464B91E749DD8B00361EAC1@blums0017.alphate
	ch.com>
References: <OF1FAC3B32.201AB508-ON802573C5.0048E08B-802573C5.0049A9BD@jpmchase.com>
	<40CBD611A793EA438464B91E749DD8B00361EAC1@blums0017.alphatech.com>
Message-ID: <20080103200122.2523211EA85@www.antlr.org>

At 04:00 4/01/2008, Daniels, Troy \(US SSA\) wrote:

>The problem is that your rules are ambiguous with fixed 
>look-ahead, which is what antlr 2 uses.  Given 4 digits and k=4 
>look-ahead, either rule could match, hence the warning when 
>compiling the grammar.  You need a semantic predicate to 
>disambiguate it:
>
>APAC_NUMERIC_TICKER
>     : (DIGIT+ COMMA) => ((DIGIT)+ (COMMA) (CHAR) (CHAR))
>     ;

That's actually a syntactic predicate :)

But yeah, that should do the trick.  Although you don't need that 
many parentheses.  You may also need to make sure that 
APAC_NUMERIC_TICKER is listed before NUMBER in the grammar file.


From jimi at temporal-wave.com  Thu Jan  3 12:10:15 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 3 Jan 2008 12:10:15 -0800
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <20080103195326.61C7811EB62@www.antlr.org>
Message-ID: <"L8437430DC1384e4286D6DAC56A5AF549.1199391610.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> Sent: Thursday, January 03, 2008 11:53 AM
> To: Maurizio de Pascale
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] More, Status of C++ backend?
> 
> At 23:59 3/01/2008, Maurizio de Pascale wrote:
>  >My suggestion is that the right road (ideally of course, I know
> the
>  >C runtime is already in place) would be to have the runtime
> written
>  >in C++ (as close as possible to the java counterpart) and
> provide
>  >(also) a C API for C users.
> 
> No, I disagree with that.  It's important to keep a pure C
> runtime, for use with embedded hardware.  Most of the embedded C++
> compilers I've seen are fairly flaky.  (And that includes gcc.)
> 

Yes. Maurizio - I guess you have never had to maintain C++ libraries on 
12 different operating systems all with different compilers with 
different ideas about C++ linkage and interaction with C ;-). I don't 
wish to put that burden on everyone who wants a C interface as I have 
had to do this with ANTLR 2 and it was a complete nightmare, having 
nothing to do with the quality of the code, but the C++ compilers and 
the linkers. 

It is going to be bad enough looking after the C++ library for C++ 
programmers who are linking with C++ object :-)

Jim


From clive.i.hill at jpmorgan.com  Thu Jan  3 13:02:13 2008
From: clive.i.hill at jpmorgan.com (clive.i.hill at jpmorgan.com)
Date: Thu, 3 Jan 2008 21:02:13 +0000
Subject: [antlr-interest] Problem with lexical nondeterminism - ANTLR
	2.7.7
In-Reply-To: <20080103200122.2523211EA85@www.antlr.org>
Message-ID: <OF3A975810.734843EE-ON802573C5.0072F136-802573C5.00738F42@jpmchase.com>

Thanks to Gavin, Troy, and Harald for getting back.

If I try your suggestions with APAC_NUMERIC_TICKER above NUMER I still get 
the same issue.  Harold your suggestion would work if it matches NUMBER 
first but it was actually an APAC_NUMERIC_TICKER.  The match actually 
happens the other way around.

I'll try and read up some more on syntactic predicates, but I've attached 
my new grammar file in case anyone has any more suggestions.

Thanks,

Clive






Gavin Lambert <antlr at mirality.co.nz> 
Sent by: antlr-interest-bounces at antlr.org
03/01/2008 20:00

To
"Daniels, Troy \(US SSA\)" <troy.daniels at baesystems.com>, 
<antlr-interest at antlr.org>
cc

Subject
Re: [antlr-interest] Problem with lexical nondeterminism - ANTLR 2.7.7






At 04:00 4/01/2008, Daniels, Troy \(US SSA\) wrote:

>The problem is that your rules are ambiguous with fixed 
>look-ahead, which is what antlr 2 uses.  Given 4 digits and k=4 
>look-ahead, either rule could match, hence the warning when 
>compiling the grammar.  You need a semantic predicate to 
>disambiguate it:
>
>APAC_NUMERIC_TICKER
>     : (DIGIT+ COMMA) => ((DIGIT)+ (COMMA) (CHAR) (CHAR))
>     ;

That's actually a syntactic predicate :)

But yeah, that should do the trick.  Although you don't need that 
many parentheses.  You may also need to make sure that 
APAC_NUMERIC_TICKER is listed before NUMBER in the grammar file.





Generally, this communication is for informational purposes only
and it is not intended as an offer or solicitation for the purchase
or sale of any financial instrument or as an official confirmation
of any transaction. In the event you are receiving the offering
materials attached below related to your interest in hedge funds or
private equity, this communication may be intended as an offer or
solicitation for the purchase or sale of such fund(s).  All market
prices, data and other information are not warranted as to
completeness or accuracy and are subject to change without notice.
Any comments or statements made herein do not necessarily reflect
those of JPMorgan Chase & Co., its subsidiaries and affiliates.

This transmission may contain information that is privileged,
confidential, legally privileged, and/or exempt from disclosure
under applicable law. If you are not the intended recipient, you
are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance
thereon) is STRICTLY PROHIBITED. Although this transmission and any
attachments are believed to be free of any virus or other defect
that might affect any computer system into which it is received and
opened, it is the responsibility of the recipient to ensure that it
is virus free and no responsibility is accepted by JPMorgan Chase &
Co., its subsidiaries and affiliates, as applicable, for any loss
or damage arising in any way from its use. If you received this
transmission in error, please immediately contact the sender and
destroy the material in its entirety, whether in electronic or hard
copy format. Thank you.
Please refer to http://www.jpmorgan.com/pages/disclosures for
disclosures relating to UK legal entities.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/7452eac2/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: strategy.g.zip
Type: application/zip
Size: 4977 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080103/7452eac2/attachment.zip 

From antlr at mirality.co.nz  Thu Jan  3 13:26:38 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 04 Jan 2008 10:26:38 +1300
Subject: [antlr-interest] Problem with lexical nondeterminism - ANTLR
 2.7.7
In-Reply-To: <OF3A975810.734843EE-ON802573C5.0072F136-802573C5.00738F42@
	jpmchase.com>
References: <20080103200122.2523211EA85@www.antlr.org>
	<OF3A975810.734843EE-ON802573C5.0072F136-802573C5.00738F42@jpmchase.com>
Message-ID: <20080103212658.4C26E11EAC4@www.antlr.org>

At 10:02 4/01/2008, clive.i.hill at jpmorgan.com wrote:
>If I try your suggestions with APAC_NUMERIC_TICKER above NUMER I 
>still get the same issue.  Harold your suggestion would work if 
>it matches NUMBER first but it was actually an 
>APAC_NUMERIC_TICKER.  The match actually happens the other way 
>around.

Ok, what's probably happening here is that ANTLR is discarding the 
predicate because there's only one alt.  I thought it was only 
ANTLR 3 that did that, but I guess v2 did as well.  In that case 
you'll need to combine the rules:

NUMBER
     : (INT COMMA) => APAC_NUMERIC_TICKER 
{$setType(APAC_NUMERIC_TICKER);}
     | (INT COLON) => RANGE               {$setType(RANGE);}
     | (DOT) => FLOAT                     {$setType(FLOAT);}
     | (INT DOT) => FLOAT                 {$setType(FLOAT);}
     | INT                                {$setType(INT);}
     ;

protected
APAC_NUMERIC_TICKER
     : INT COMMA CHAR CHAR
     ;


From jimi at temporal-wave.com  Thu Jan  3 13:40:03 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 3 Jan 2008 13:40:03 -0800
Subject: [antlr-interest] Problem with lexical nondeterminism - ANTLR
	2.7.7
In-Reply-To: <20080103212658.4C26E11EAC4@www.antlr.org>
Message-ID: <"L0873399B7E90467f85EA09FF74C3B802.1199396996.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> Sent: Thursday, January 03, 2008 1:27 PM
> To: clive.i.hill at jpmorgan.com
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Problem with lexical nondeterminism - 
ANTLR
> 2.7.7
> 
> At 10:02 4/01/2008, clive.i.hill at jpmorgan.com wrote:
> >If I try your suggestions with APAC_NUMERIC_TICKER above NUMER I
> >still get the same issue.  Harold your suggestion would work if
> >it matches NUMBER first but it was actually an
> >APAC_NUMERIC_TICKER.  The match actually happens the other way
> >around.
> 
> Ok, what's probably happening here is that ANTLR is discarding the
> predicate because there's only one alt.  I thought it was only
> ANTLR 3 that did that, but I guess v2 did as well.  In that case
> you'll need to combine the rules:
> 
> NUMBER
>      : (INT COMMA) => APAC_NUMERIC_TICKER
> {$setType(APAC_NUMERIC_TICKER);}
>      | (INT COLON) => RANGE               {$setType(RANGE);}
>      | (DOT) => FLOAT                     {$setType(FLOAT);}
>      | (INT DOT) => FLOAT                 {$setType(FLOAT);}
>      | INT                                {$setType(INT);}
>      ;
> 
> protected
> APAC_NUMERIC_TICKER
>      : INT COMMA CHAR CHAR
>      ;
> 

I suggest that combine the common elements though, which will minimize 
predicates (probably to none) and the protected calls:

NUMBER
: INT
    (
         COMMA (whatelse?)	{ $setType(APAC_NUMERIC_TICKER);}
       | DOT INT			{ $setType(FLOAT); }
       | COLON INT            { $setType(RANGE); }
	 |                      { $setType(INT);   }
    )
| DOT 
    (
         INT                  { $setType(FLOAT); }
       |                      { $setType(DOT);   }
    )
;

Combine common roots basically, then branch accordingly. You can often 
avoid predicates this way.

Jim


From jbb at acm.org  Thu Jan  3 15:58:45 2008
From: jbb at acm.org (John B. Brodie)
Date: Thu, 03 Jan 2008 18:58:45 -0500
Subject: [antlr-interest] RewriteEmptyStreamException from
	antlr-2007-12-31.17 interim 3b1 build
Message-ID: <E1JAZxV-0006Fg-Qf@gecko.home.org>

Greetings!

<Apologies in advance if this message is inappropriate for this list>

I am using the antlr-2007-12-31.17.tar.gz interim build of 3b1
(playing with tree rewrites via output=AST in a tree grammar)

and discovered a minor hiccup when parsing erroneous an input.
(note this is in PARSING not tree walking nor rewriting)

this Test.g grammar:

grammar Test;

options {
	output = AST;
	ASTLabelType = CommonTree;
}

tokens{ ROOT; }

start : ( a )* required=b EOF -> ^(ROOT a* $required) ;
a : 'a' ;
b : 'b' ;


obtains this exception when trying to PARSE a sentence that is just the
letter a :

line 0:-1 mismatched input '<EOF>' expecting 'b'
org.antlr.runtime.tree.RewriteEmptyStreamException: token required
	at org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
	at org.antlr.runtime.tree.RewriteRuleElementStream.nextTree(RewriteRuleElementStream.java:145)
	at TestParser.start(TestParser.java:163)
	at TestParser.main(TestParser.java:54)

(note that the TestParser.java line numbers are wrong because I have
removed my test driver from the above Test.g grammar)

but if i change the start rule to be:

start : ( a )* required='b' EOF -> ^(ROOT a* $required) ;

(observe the quotes surrounding b)

everything works kinda sorta as expected: a syntax error message
is displayed (but still with the goofy line 0:-1 location stuff), no
exception thrown, and null AST returned.

If, perhaps, the above is too cryptic; I can try to supply more info...
   -jbb

(would the antlr-dev list be better for interim build bug reports?)

From parrt at cs.usfca.edu  Fri Jan  4 10:35:37 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Jan 2008 10:35:37 -0800
Subject: [antlr-interest] power to antlr.org will be unstable today
Message-ID: <3FF0EFFA-1AA0-49E1-8B29-B81714B65BD7@cs.usfca.edu>

hi. San Francisco has crap power supply; antlr.org up/down.  Silicon  
valley is high tech...*when* the power is up.  very sad.

Ter

From harald_m_mueller at gmx.de  Fri Jan  4 06:42:31 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Fri, 04 Jan 2008 15:42:31 +0100
Subject: [antlr-interest] first steps with a lexer/parser
In-Reply-To: <4496897d0801040625t4168b611w9c8d7281842d10a4@mail.gmail.com>
References: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>	
	<20080103145911.43060@gmx.net>	
	<4496897d0801032138n2bc280b1rc99d8238905af062@mail.gmail.com>	
	<20080104100214.63100@gmx.net>
	<4496897d0801040625t4168b611w9c8d7281842d10a4@mail.gmail.com>
Message-ID: <20080104144231.63100@gmx.net>

Hi -

a) WS and NL should get a marker
   { $channel = HIDDEN; }
so that the parser does not even see them - because I'm quite sure that also
   {a=1}
etc. (see first mail) should be allowed.
And then you can remove all references to WS and NL from the parser! - the language should then look much more like your language definition (wherever you got this from - if you invent(ed) the language yourself, still write a natural-language specification for the language, where you steal as much as possible from well-done other language specifications; Java and C# are the best ones for programming languages around - for other languages, I'd at least try to steal ideas from the whitespace and comment parts of those. And while I'm on the subject: If you design a language, always allow the possibility of some sort of comments; you will even need them in your tests).

b) In the rule 
    start  :    msg NL? EOF ;
put an ! behind EOF: You dont want this in the AST (unfortunately, it becomes a null Token - see the end of your output, which creates troubles off and on; and you get an artificial null root also - both are ugly).
(and remove the NL? - see a)).

c) You do a "double job" in the STR rules:

> STR
[...]
>        :    '"' ANYCHAR* '"'
>        ;
> 
> fragment ANYCHAR
>        :    (~'"')+
>        ;

There is a + in ANYCHAR, and a * in STR. What you want is simply either

 STR
[...]
        :    '"' (~'"')* '"'
        ;

or, if you want to keep this ANYCHAR rule,

STR
[...]
       :    '"' ANYCHAR* '"'
       ;

fragment ANYCHAR
       :    ~'"'         // without +
       ;

d) You might also want to capture tabs ('\t') in your WS rule.

Regards
Harald


-------- Original-Nachricht --------
> Datum: Fri, 4 Jan 2008 09:25:28 -0500
> Von: body <antlr-list at splitbody.com>
> An: "Harald Mueller" <harald_m_mueller at gmx.de>
> CC: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] first steps with a lexer/parser

> i see!
> 
> thank you for your patience, below is the modified lexer/parser.
> 
> so for the input string
> 
> { a=1 b="2" c="t" d="text" e="one two" f={ g="three four" h={ i=5 j="a ha"
> } } }
> 
> it produces
> 
> (MSG (PAIR a 1) (PAIR b 2) (PAIR c t) (PAIR d text) (PAIR e one two)
> (PAIR f (MSG (PAIR g three four) (PAIR h (MSG (PAIR i 5) (PAIR j a
> ha)))))) null
> 
> so now i just have to write the tree grammar to walk it and take
> appropriate action, correct?
> 
> thanks again for your help.
> 
> ----------------------------
> 
> grammar MsgString;
> 
> options { output = AST; }
> 
> tokens {
> 	PAIR;
> 	MSG;
> }
> 
> start  :    msg NL? EOF ;
> 
> msg    :    '{' WS nameValuePairExpr* WS '}' -> ^(MSG nameValuePairExpr*)
> ;
> 
> nameValuePairExpr
>        :    NAME '=' valueExpr WS? -> ^(PAIR NAME valueExpr) ;
> 
> valueExpr
>        :    STR
>        |    INT
>        |    msg
>        ;
> 
> STR
>        @after{
>             setText(getText().substring(1, getText().length()-1));
>        }
>        :    '"' ANYCHAR* '"'
>        ;
> 
> fragment ANYCHAR
>        :    (~'"')+
>        ;
> 
> INT    :    '0'..'9'+ ;
> 
> NAME   :    ('a'..'z'|'A'..'Z'|'0'..'9')+ ;
> 
> WS     :    ' '+ ;
> 
> NL     :    ('\n'|'\r')+ ;
> 
> ----------------------------
> 
> On 1/4/08, Harald Mueller <harald_m_mueller at gmx.de> wrote:
> > > a). it is indeed simpler if i use tokens instead of rules, but then i
> > > cannot strip the double quotes (! don't work unlike in the case of
> > > rules), and getting rid of them explicitly in code seems to be
> > > terribly hacky.
> >
> > No. The correct way is to normalize the token text in the lexer.
> Everything else is considered hacky in lexer+parser design.
> > (Yes, there is a bug in ANTLR 3.x, as far as I know, so that ! does not
> work in the lexer right now. Terence promised to work on this somewhen
> "now" - please complain about this!).
> >
> > >
> > > b). i could not simply skip() WS, because then they get removed from
> > > my strings within the quotes (and i want spaces preserved inside
> > > quotes).
> >
> > If this is the only reason for keeping the WS, it shows even more that
> the decision to do string assembly on the parser level is wrong. Please
> don't do this. One simple line in the lext
> >
> >     $text = $text.substring(1,....);
> >
> > or a repaired ANTLR with two tiny !
> >
> >     STRING : '"'! ~('"')* '"'!
> >
> > as opposed to thinking about WS in the grammar at multiple places, where
> it is (by language definition - at least I assume this) irrelevant: Please
> go for the time-proven, text-book decision.
> >
> > > or perhaps some sort of a flag that says that if i am inside a
> > > quoted string i do not throw away spaces.
> >
> > If at all, you can re-create the original text from the HIDDEN channel -
> there, all the characters are preserved.
> >
> > > d). i guess similar to a). i prefer semantic rather than symbolic...
> > > err.. symbols
> >
> > Yeah - here it is perfectly ok to use a sensible name instead of '='.
> >
> > Regards
> > Harald
> >

-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

From antlr-list at splitbody.com  Fri Jan  4 06:25:28 2008
From: antlr-list at splitbody.com (body)
Date: Fri, 4 Jan 2008 09:25:28 -0500
Subject: [antlr-interest] first steps with a lexer/parser
In-Reply-To: <20080104100214.63100@gmx.net>
References: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>
	<20080103145911.43060@gmx.net>
	<4496897d0801032138n2bc280b1rc99d8238905af062@mail.gmail.com>
	<20080104100214.63100@gmx.net>
Message-ID: <4496897d0801040625t4168b611w9c8d7281842d10a4@mail.gmail.com>

i see!

thank you for your patience, below is the modified lexer/parser.

so for the input string

{ a=1 b="2" c="t" d="text" e="one two" f={ g="three four" h={ i=5 j="a ha" } } }

it produces

(MSG (PAIR a 1) (PAIR b 2) (PAIR c t) (PAIR d text) (PAIR e one two)
(PAIR f (MSG (PAIR g three four) (PAIR h (MSG (PAIR i 5) (PAIR j a
ha)))))) null

so now i just have to write the tree grammar to walk it and take
appropriate action, correct?

thanks again for your help.

----------------------------

grammar MsgString;

options { output = AST; }

tokens {
	PAIR;
	MSG;
}

start  :    msg NL? EOF ;

msg    :    '{' WS nameValuePairExpr* WS '}' -> ^(MSG nameValuePairExpr*) ;

nameValuePairExpr
       :    NAME '=' valueExpr WS? -> ^(PAIR NAME valueExpr) ;

valueExpr
       :    STR
       |    INT
       |    msg
       ;

STR
       @after{
            setText(getText().substring(1, getText().length()-1));
       }
       :    '"' ANYCHAR* '"'
       ;

fragment ANYCHAR
       :    (~'"')+
       ;

INT    :    '0'..'9'+ ;

NAME   :    ('a'..'z'|'A'..'Z'|'0'..'9')+ ;

WS     :    ' '+ ;

NL     :    ('\n'|'\r')+ ;

----------------------------

On 1/4/08, Harald Mueller <harald_m_mueller at gmx.de> wrote:
> > a). it is indeed simpler if i use tokens instead of rules, but then i
> > cannot strip the double quotes (! don't work unlike in the case of
> > rules), and getting rid of them explicitly in code seems to be
> > terribly hacky.
>
> No. The correct way is to normalize the token text in the lexer. Everything else is considered hacky in lexer+parser design.
> (Yes, there is a bug in ANTLR 3.x, as far as I know, so that ! does not work in the lexer right now. Terence promised to work on this somewhen "now" - please complain about this!).
>
> >
> > b). i could not simply skip() WS, because then they get removed from
> > my strings within the quotes (and i want spaces preserved inside
> > quotes).
>
> If this is the only reason for keeping the WS, it shows even more that the decision to do string assembly on the parser level is wrong. Please don't do this. One simple line in the lext
>
>     $text = $text.substring(1,....);
>
> or a repaired ANTLR with two tiny !
>
>     STRING : '"'! ~('"')* '"'!
>
> as opposed to thinking about WS in the grammar at multiple places, where it is (by language definition - at least I assume this) irrelevant: Please go for the time-proven, text-book decision.
>
> > or perhaps some sort of a flag that says that if i am inside a
> > quoted string i do not throw away spaces.
>
> If at all, you can re-create the original text from the HIDDEN channel - there, all the characters are preserved.
>
> > d). i guess similar to a). i prefer semantic rather than symbolic...
> > err.. symbols
>
> Yeah - here it is perfectly ok to use a sensible name instead of '='.
>
> Regards
> Harald
>

From jpschewe at mtu.net  Fri Jan  4 08:32:38 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Fri, 04 Jan 2008 10:32:38 -0600
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
	quoted string to token?
Message-ID: <477E5FA6.3070602@mtu.net>

I have the following parser rule and lexer rule (others exist as well). 
I'm using antlr 3.0.1.  If I change '*' in multExpr to PRODUCT then at
runtime I get an exception.  If I leave it at '*', all is fine.  What am
I doing wrong here?
   [junit] token PRODUCT
    [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token
PRODUCT
    [junit]     at
org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
    [junit]     at
org.antlr.runtime.tree.RewriteRuleTokenStream.next(RewriteRuleTokenStream.java:57)
 

/**
 * @param negate if true, negate all expressions by multiplying by -1
 */   
multExpr[boolean negate]
    :   atom ('*' atom)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"])
atom+)
                             ->           ^(PRODUCT atom+)
    ;

PRODUCT         :   '*'     ;

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From antlr-list at splitbody.com  Fri Jan  4 07:03:12 2008
From: antlr-list at splitbody.com (body)
Date: Fri, 4 Jan 2008 10:03:12 -0500
Subject: [antlr-interest] first steps with a lexer/parser
In-Reply-To: <20080104144231.63100@gmx.net>
References: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>
	<20080103145911.43060@gmx.net>
	<4496897d0801032138n2bc280b1rc99d8238905af062@mail.gmail.com>
	<20080104100214.63100@gmx.net>
	<4496897d0801040625t4168b611w9c8d7281842d10a4@mail.gmail.com>
	<20080104144231.63100@gmx.net>
Message-ID: <4496897d0801040703j4e1bbbepb07b9448c4f5cbb9@mail.gmail.com>

thanks again for the quick response, it really, really helps.

> a) WS and NL should get a marker
>    { $channel = HIDDEN; }
> so that the parser does not even see them - because I'm quite sure that also
>    {a=1}
> etc. (see first mail) should be allowed.
> And then you can remove all references to WS and NL from the parser! - the language should then look much more like your language definition ---skipped ---

all great points! but luckily it is an incoming data file; so i just
replicated it. but you are right; so i used hidden channel and it made
the grammar much simpler without losing my spaces inside the string.

here's a question - what would i have to change if i had escaped
quotes inside of the string (\")? then surely i would have to use .*
to match the string, and then do something different inside of it.

>
> b) In the rule
>     start  :    msg NL? EOF ;
> put an ! behind EOF: You dont want this in the AST (unfortunately, it becomes a null Token - see the end of your output, which creates troubles off and on; and you get an artificial null root also - both are ugly).
> (and remove the NL? - see a)).

ah! i was wondering about that null! and i forgot about hidden channel
for NL - good point.

>
> c) You do a "double job" in the STR rules:
>
> > STR
> [...]
> >        :    '"' ANYCHAR* '"'
> >        ;
> >
> > fragment ANYCHAR
> >        :    (~'"')+
> >        ;
>
> There is a + in ANYCHAR, and a * in STR. What you want is simply either
>
>  STR
> [...]
>         :    '"' (~'"')* '"'
>         ;
>
> or, if you want to keep this ANYCHAR rule,
>
> STR
> [...]
>        :    '"' ANYCHAR* '"'
>        ;
>
> fragment ANYCHAR
>        :    ~'"'         // without +
>        ;

yes, you are right, both former and latter seem to work.

>
> d) You might also want to capture tabs ('\t') in your WS rule.

done, thank you.

------------------------

grammar MsgString;

options { output = AST; }

tokens {
	PAIR;
	MSG;
}

start  :    msg EOF! ;

msg    :    '{' nameValuePairExpr* '}' -> ^(MSG nameValuePairExpr*) ;

nameValuePairExpr
       :    NAME '=' valueExpr WS? -> ^(PAIR NAME valueExpr) ;

valueExpr
       :    STR
       |    INT
       |    msg
       ;

STR
       @after{
            setText(getText().substring(1, getText().length()-1));
       }
       :    '"' ~'"'* '"'
       ;

INT    :    '0'..'9'+ ;

NAME   :    ('a'..'z'|'A'..'Z'|'0'..'9')+ ;

WS     :    (' '|'\t')+ { $channel = HIDDEN; } ;

NL     :    ('\n'|'\r')+ { $channel = HIDDEN; } ;

------------------------

and input/output:

{ a=1 b="2" c="t" d="text" e="one two" f={ g="three four" h={ i=5 j="a ha" } } }

(MSG (PAIR a 1) (PAIR b 2) (PAIR c t) (PAIR d text) (PAIR e one two)
(PAIR f (MSG (PAIR g three four) (PAIR h (MSG (PAIR i 5) (PAIR j a
ha))))))

From harald_m_mueller at gmx.de  Fri Jan  4 02:02:14 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Fri, 04 Jan 2008 11:02:14 +0100
Subject: [antlr-interest] first steps with a lexer/parser
In-Reply-To: <4496897d0801032138n2bc280b1rc99d8238905af062@mail.gmail.com>
References: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>	
	<20080103145911.43060@gmx.net>
	<4496897d0801032138n2bc280b1rc99d8238905af062@mail.gmail.com>
Message-ID: <20080104100214.63100@gmx.net>

> a). it is indeed simpler if i use tokens instead of rules, but then i
> cannot strip the double quotes (! don't work unlike in the case of
> rules), and getting rid of them explicitly in code seems to be
> terribly hacky.

No. The correct way is to normalize the token text in the lexer. Everything else is considered hacky in lexer+parser design.
(Yes, there is a bug in ANTLR 3.x, as far as I know, so that ! does not work in the lexer right now. Terence promised to work on this somewhen "now" - please complain about this!).

> 
> b). i could not simply skip() WS, because then they get removed from
> my strings within the quotes (and i want spaces preserved inside
> quotes). 

If this is the only reason for keeping the WS, it shows even more that the decision to do string assembly on the parser level is wrong. Please don't do this. One simple line in the lext

    $text = $text.substring(1,....);

or a repaired ANTLR with two tiny !

    STRING : '"'! ~('"')* '"'!

as opposed to thinking about WS in the grammar at multiple places, where it is (by language definition - at least I assume this) irrelevant: Please go for the time-proven, text-book decision.

> or perhaps some sort of a flag that says that if i am inside a
> quoted string i do not throw away spaces.

If at all, you can re-create the original text from the HIDDEN channel - there, all the characters are preserved.

> d). i guess similar to a). i prefer semantic rather than symbolic...
> err.. symbols

Yeah - here it is perfectly ok to use a sensible name instead of '='.

Regards
Harald
 

> 
> thanks again for the pointers, i will keep digging.
> 
> -a
> 
> On 1/3/08, Harald Mueller <harald_m_mueller at gmx.de> wrote:
> > Hi -
> >
> > a) A quoted string should be a token, IMO, not a rule (except ... see
> the thread on parsing BSDL where we quarrel about "structured string parsing"
> ... but this would not be "first steps").
> > (I am constantly unsure whether ! works in lexer rules - so, if you wnat
> to strip the " and it does NOT work, first complain to Terence; and then
> do something like
> >     $text = $text.Trim('\"'); // in C#
> > or
> >     $text = $text.substring(1,$text.length-1); // in Java
> >
> > b) Are you really sure that whitespace is that significant? According to
> your grammar,
> >
> > {a=1}
> >
> > is not allowed: You require a WS after { and before } - and WS is at
> least one blank. Also, { a = 1 } would be wrong: No WS around = ...
> > Almost all languages I know *ignore* whitespace. In ANTLR, you do this
> by sending the WS tokens to the HIDDEN channel via { $channel = HIDDEN; }.
> >
> > c) There is no good reason to have artificial roots for single tokens -
> instead of ^(INT_VAL INT), just use the INT; same for STR_VAL.
> >
> > d) Also for the '=', I would not add an artificial symbol, but simply
> use the '=' as root:
> >
> >      ...: NAME '='^ valueExpr;
> >
> > - but this is a matter of taste, I'd say.
> >
> > Regards
> > Harald
> >
> > -------- Original-Nachricht --------
> > > Datum: Thu, 3 Jan 2008 08:40:38 -0500
> > > Von: body <antlr-list at splitbody.com>
> > > An: antlr-interest at antlr.org
> > > Betreff: [antlr-interest] first steps with a lexer/parser
> >
> > > hello,
> > >
> > > i am trying to deal with the messages that look like this:
> > >
> > > { a=1 b="2" c="t" d="stuff" e="one two" f={ g="three four" h={ i=5
> > > j="a ha" } } }
> > >
> > > below is my lexer/parser. it seems to work and emit proper-looking
> > > tree, but i want to run it by you, because it does not feel right.
> > >
> > > it seems like i should be using fragments somewhere, also i cannot
> > > figure out how to build a proper tree grammar out of it.
> > >
> > > any suggestions appreciated.
> > >
> > > thank you.
> > >
> > > -----------------
> > > grammar MsgString;
> > >
> > > options { output = AST; }
> > >
> > > tokens {
> > >       PAIR;
> > >       MSG;
> > >       STR_VAL;
> > >       INT_VAL;
> > > }
> > >
> > > start  :    msg NL? EOF -> ^(MSG msg) ;
> > >
> > > msg    :    '{' WS nameValuePairExpr* WS '}' -> ^(MSG
> nameValuePairExpr*)
> > > ;
> > >
> > > nameValuePairExpr
> > >        :    NAME '=' valueExpr WS? -> ^(PAIR NAME valueExpr) ;
> > >
> > > valueExpr
> > >        :    quotedString -> ^(STR_VAL quotedString)
> > >        |    INT -> ^(INT_VAL INT)
> > >        |    msg
> > >        ;
> > >
> > > quotedString
> > >        :    '"'! .* '"'!
> > >        ;
> > >
> > > INT    :    '0'..'9'+ ;
> > >
> > > NAME   :    ('a'..'z'|'A'..'Z'|'0'..'9')+ ;
> > >
> > > WS     :    ' '+ ;
> > >
> > > NL     :    ('\n'|'\r')+ ;
> > > -----------------
> >
> > --
> > Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
> > Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger?did=10
> >

-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From ola.bini at gmail.com  Fri Jan  4 11:06:52 2008
From: ola.bini at gmail.com (Ola Bini)
Date: Fri, 04 Jan 2008 19:06:52 +0000
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <477E5FA6.3070602@mtu.net>
References: <477E5FA6.3070602@mtu.net>
Message-ID: <477E83CC.5030208@gmail.com>

Jon Schewe wrote:
> I have the following parser rule and lexer rule (others exist as well). 
> I'm using antlr 3.0.1.  If I change '*' in multExpr to PRODUCT then at
> runtime I get an exception.  If I leave it at '*', all is fine.  What am
> I doing wrong here?
>    [junit] token PRODUCT
>     [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token
> PRODUCT
>     [junit]     at
> org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
>     [junit]     at
> org.antlr.runtime.tree.RewriteRuleTokenStream.next(RewriteRuleTokenStream.java:57)
>  
>
> /**
>  * @param negate if true, negate all expressions by multiplying by -1
>  */   
> multExpr[boolean negate]
>     :   atom ('*' atom)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"])
> atom+)
>                              ->           ^(PRODUCT atom+)
>     ;
>
> PRODUCT         :   '*'     ;
>   
I have seen the same problem, and have no idea why this happens.

-- 
 Ola Bini (http://ola-bini.blogspot.com) 
 JRuby Core Developer
 Developer, ThoughtWorks Studios (http://studios.thoughtworks.com)
 Practical JRuby on Rails (http://apress.com/book/view/9781590598818)

 "Yields falsehood when quined" yields falsehood when quined.



From harald_m_mueller at gmx.de  Fri Jan  4 08:38:36 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Fri, 04 Jan 2008 17:38:36 +0100
Subject: [antlr-interest] first steps with a lexer/parser
In-Reply-To: <4496897d0801040703j4e1bbbepb07b9448c4f5cbb9@mail.gmail.com>
References: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>	
	<20080103145911.43060@gmx.net>	
	<4496897d0801032138n2bc280b1rc99d8238905af062@mail.gmail.com>	
	<20080104100214.63100@gmx.net>	
	<4496897d0801040625t4168b611w9c8d7281842d10a4@mail.gmail.com>	
	<20080104144231.63100@gmx.net>
	<4496897d0801040703j4e1bbbepb07b9448c4f5cbb9@mail.gmail.com>
Message-ID: <20080104163836.63100@gmx.net>

> ... and it made the grammar much simpler without losing ...

That's what we all strive for, isn't it? :-)

> 
> here's a question - what would i have to change if i had escaped
> quotes inside of the string (\")? then surely i would have to use .*
> to match the string, and then do something different inside of it.

The following works ... I would like to have a little more standard string handling in ANTLR 3 lexers (I liked ANTLR 2 more here ...):

STRING @init { string result = ""; }        // we build the text "manually"
    : '"'
      ( c=~('"')   { result += (char) $c; } // a non-" char
      | '\\' '"'   { result += '\"'; }      // an escaped "
      )*
      '"'          { $text = result; }
    ;

Regards
Harald

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger?did=10

From jls2933 at free.fr  Fri Jan  4 02:32:35 2008
From: jls2933 at free.fr (Jean-Luc MATHIEU)
Date: Fri, 04 Jan 2008 11:32:35 +0100
Subject: [antlr-interest] Server access
Message-ID: <477E0B43.4050502@free.fr>

Hello !

It is impossible for me to reach the www.antlr.org web site today ... Is 
it the same for you ? Is there another location where i can download the 
3.x version of antlr ?

Regards,
Jean-Luc

From harald_m_mueller at gmx.de  Fri Jan  4 02:32:40 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Fri, 04 Jan 2008 11:32:40 +0100
Subject: [antlr-interest] Problem with lexical nondeterminism -
	ANTLR	2.7.7
In-Reply-To: <OF3A975810.734843EE-ON802573C5.0072F136-802573C5.00738F42@jpmchase.com>
References: <OF3A975810.734843EE-ON802573C5.0072F136-802573C5.00738F42@jpmchase.com>
Message-ID: <20080104103240.63100@gmx.net>

> Harold your suggestion would work if it matches NUMBER 
> first but it was actually an APAC_NUMERIC_TICKER.  The match actually 
> happens the other way around.

What? Maybe I misunderstand you - but the following code lexes all strings like 123,aa as APAC_N_T, whereas strings 1234 etc. are lexed as numbers (without any need for any predicates - just standard left-factoring).
Isn't that what you wanted??

Regards

Harald

------------------------------

header {
	using System.IO;
}

options {
  language = "CSharp";
}

class WordLexer extends Lexer;

tokens {
   APAC_N_T;
}

{
  public static void Main() {
    using (TextReader tr = new StringReader("1 12 123 1234 12345 123456 1234567 1,aa 12,aa 123,aa 1234,aa 12345,aa 123456,aa 1234567,aa 123 aa")) {
      WordLexer wl = new WordLexer(tr);
      for (;;) {
        IToken t = wl.nextToken();
        if (t.Type == Token.EOF_TYPE) break;
        switch (t.Type) {
            case NUMBER: Console.Out.WriteLine(t.getText() + " -> NUMBER"); break;
            case APAC_N_T: Console.Out.WriteLine(t.getText() + " -> APAC_N_T"); break;
            case ID: Console.Out.WriteLine(t.getText() + " -> ID"); break;
            default: Console.Out.WriteLine(t.getText() + " -> other"); break;
        }
      }
    }
    Console.In.Read();
  }
}

NUMBER
    : ('0'..'9')+
      ( ',' . .   { _ttype = APAC_N_T; }
      |
      )
    ;
    
ID  : ('a'..'z')+
    ;

WS  : (' ' | '\n' | '\r')+  { _ttype = Token.SKIP;  }
    ;

/* Result:

1 -> NUMBER
12 -> NUMBER
123 -> NUMBER
1234 -> NUMBER
12345 -> NUMBER
123456 -> NUMBER
1234567 -> NUMBER
1,aa -> APAC_N_T
12,aa -> APAC_N_T
123,aa -> APAC_N_T
1234,aa -> APAC_N_T
12345,aa -> APAC_N_T
123456,aa -> APAC_N_T
1234567,aa -> APAC_N_T
123 -> NUMBER
aa -> ID
*/

-- 
Der GMX SmartSurfer hilft bis zu 70% Ihrer Onlinekosten zu sparen! 
Ideal f?r Modem und ISDN: http://www.gmx.net/de/go/smartsurfer

From clive.i.hill at jpmorgan.com  Fri Jan  4 03:27:30 2008
From: clive.i.hill at jpmorgan.com (clive.i.hill at jpmorgan.com)
Date: Fri, 4 Jan 2008 11:27:30 +0000
Subject: [antlr-interest] Problem with lexical nondeterminism -
	ANTLR	2.7.7
In-Reply-To: <"L0873399B7E90467f85EA09FF74C3B802.1199396996.scalix.temporal-wave.com*"@MHS>
Message-ID: <OF714BB469.C26948D1-ON802573C6.003EB851-802573C6.003EF16B@jpmchase.com>

Brilliant!  Thanks guys for your advice.

Jim's suggestion fixed the problem.

For some reason I was still getting an issue with Gavin's.  It was still 
thinking that 1350 was APAC_NUMERIC_TICKER.  I'm not too sure why and as 
Jim's works I've stopped investigating.

Thanks again to all those that got back.





"Jim Idle" <jimi at temporal-wave.com> 
Sent by: antlr-interest-bounces at antlr.org
03/01/2008 21:40

To
antlr-interest at antlr.org
cc

Subject
Re: [antlr-interest] Problem with lexical nondeterminism - ANTLR 2.7.7








> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> Sent: Thursday, January 03, 2008 1:27 PM
> To: clive.i.hill at jpmorgan.com
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Problem with lexical nondeterminism - 
ANTLR
> 2.7.7
> 
> At 10:02 4/01/2008, clive.i.hill at jpmorgan.com wrote:
> >If I try your suggestions with APAC_NUMERIC_TICKER above NUMER I
> >still get the same issue.  Harold your suggestion would work if
> >it matches NUMBER first but it was actually an
> >APAC_NUMERIC_TICKER.  The match actually happens the other way
> >around.
> 
> Ok, what's probably happening here is that ANTLR is discarding the
> predicate because there's only one alt.  I thought it was only
> ANTLR 3 that did that, but I guess v2 did as well.  In that case
> you'll need to combine the rules:
> 
> NUMBER
>      : (INT COMMA) => APAC_NUMERIC_TICKER
> {$setType(APAC_NUMERIC_TICKER);}
>      | (INT COLON) => RANGE               {$setType(RANGE);}
>      | (DOT) => FLOAT                     {$setType(FLOAT);}
>      | (INT DOT) => FLOAT                 {$setType(FLOAT);}
>      | INT                                {$setType(INT);}
>      ;
> 
> protected
> APAC_NUMERIC_TICKER
>      : INT COMMA CHAR CHAR
>      ;
> 

I suggest that combine the common elements though, which will minimize 
predicates (probably to none) and the protected calls:

NUMBER
: INT
    (
         COMMA (whatelse?)               { $setType(APAC_NUMERIC_TICKER);}
       | DOT INT                                                 { 
$setType(FLOAT); }
       | COLON INT            { $setType(RANGE); }
                  |                      { $setType(INT);   }
    )
| DOT 
    (
         INT                  { $setType(FLOAT); }
       |                      { $setType(DOT);   }
    )
;

Combine common roots basically, then branch accordingly. You can often 
avoid predicates this way.

Jim





Generally, this communication is for informational purposes only
and it is not intended as an offer or solicitation for the purchase
or sale of any financial instrument or as an official confirmation
of any transaction. In the event you are receiving the offering
materials attached below related to your interest in hedge funds or
private equity, this communication may be intended as an offer or
solicitation for the purchase or sale of such fund(s).  All market
prices, data and other information are not warranted as to
completeness or accuracy and are subject to change without notice.
Any comments or statements made herein do not necessarily reflect
those of JPMorgan Chase & Co., its subsidiaries and affiliates.

This transmission may contain information that is privileged,
confidential, legally privileged, and/or exempt from disclosure
under applicable law. If you are not the intended recipient, you
are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance
thereon) is STRICTLY PROHIBITED. Although this transmission and any
attachments are believed to be free of any virus or other defect
that might affect any computer system into which it is received and
opened, it is the responsibility of the recipient to ensure that it
is virus free and no responsibility is accepted by JPMorgan Chase &
Co., its subsidiaries and affiliates, as applicable, for any loss
or damage arising in any way from its use. If you received this
transmission in error, please immediately contact the sender and
destroy the material in its entirety, whether in electronic or hard
copy format. Thank you.
Please refer to http://www.jpmorgan.com/pages/disclosures for
disclosures relating to UK legal entities.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080104/72d01374/attachment.html 

From jaluber at gmx.de  Fri Jan  4 13:31:17 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Fri, 04 Jan 2008 22:31:17 +0100
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <477E83CC.5030208@gmail.com>
References: <477E5FA6.3070602@mtu.net> <477E83CC.5030208@gmail.com>
Message-ID: <477EA5A5.8060903@gmx.de>

Ola Bini schrieb:
> Jon Schewe wrote:
>> I have the following parser rule and lexer rule (others exist as
>> well). I'm using antlr 3.0.1.  If I change '*' in multExpr to PRODUCT
>> then at
>> runtime I get an exception.  If I leave it at '*', all is fine.  What am
>> I doing wrong here?
>>    [junit] token PRODUCT
>>     [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token
>> PRODUCT
>>     [junit]     at
>> org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
>>
>>     [junit]     at
>> org.antlr.runtime.tree.RewriteRuleTokenStream.next(RewriteRuleTokenStream.java:57)
>>
>>  
>>
>> /**
>>  * @param negate if true, negate all expressions by multiplying by -1
>>  */   multExpr[boolean negate]
>>     :   atom ('*' atom)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"])
>> atom+)
>>                              ->           ^(PRODUCT atom+)
>>     ;
>>
>> PRODUCT         :   '*'     ;
>>   
> I have seen the same problem, and have no idea why this happens.
> 

The reason is simple: '*' and PRODUCT have different tokens. If you
change a literal to a token, then change all occurrences of it. You have
overlooked '*' in "atom ('*' atom)*".

Johannes

From parrt at cs.usfca.edu  Fri Jan  4 17:52:23 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 4 Jan 2008 17:52:23 -0800
Subject: [antlr-interest] blog entry about experience converting v2 to v3
Message-ID: <E3CA4FFA-4C9F-4D1A-A65A-98D0A5D76C4C@cs.usfca.edu>

http://www.sapphiresteel.com/ANTLR3-Ready-for-prime-time

From phreed at gmail.com  Fri Jan  4 19:18:04 2008
From: phreed at gmail.com (Fred)
Date: Fri, 4 Jan 2008 21:18:04 -0600
Subject: [antlr-interest] Temporarily change the position of the parser
Message-ID: <cb0c557b0801041918v5c5c8caahdc5fe4cc3107dd55@mail.gmail.com>

There are probably other ways to accomplish this but....

I have an AST.
On the first pass my program builds a symbol table, a dictionary of
names and node references into the AST.
Second pass, the program searches for entities, these entities
reference the names from the symbol table.
When the second pass finds an entity it creates a tree parser and
parses the tree starting at the entity.
I want the parser needs to push the current position in the AST onto a
stack, change the position to the that referenced by the symbol table,
parse from that node and return.

It would seem that the symbols could be pre-parsed when the symbol
table is built but they need to be processed differently based on
where used.

From fyaoxy at gmail.com  Thu Jan  3 18:35:00 2008
From: fyaoxy at gmail.com (=?GB2312?B?z/LH2M/N?=)
Date: Fri, 4 Jan 2008 10:35:00 +0800
Subject: [antlr-interest] first steps with a lexer/parser
In-Reply-To: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>
References: <4496897d0801030540g205383d1g357eb9571e958649@mail.gmail.com>
Message-ID: <91dd9a4f0801031835m4144f68ewdfa4fc79ab6c2dc3@mail.gmail.com>

Hi,
maybe you wanna check out that ON grammar at:
https://on.dev.java.net
You will see you could take little pain on typing:)

2008/1/3, body <antlr-list at splitbody.com>:
>
> hello,
>
> i am trying to deal with the messages that look like this:
>
> { a=1 b="2" c="t" d="stuff" e="one two" f={ g="three four" h={ i=5
> j="a ha" } } }
>
> below is my lexer/parser. it seems to work and emit proper-looking
> tree, but i want to run it by you, because it does not feel right.
>
> it seems like i should be using fragments somewhere, also i cannot
> figure out how to build a proper tree grammar out of it.
>
> any suggestions appreciated.
>
> thank you.
>
> -----------------
> grammar MsgString;
>
> options { output = AST; }
>
> tokens {
>         PAIR;
>         MSG;
>         STR_VAL;
>         INT_VAL;
> }
>
> start  :    msg NL? EOF -> ^(MSG msg) ;
>
> msg    :    '{' WS nameValuePairExpr* WS '}' -> ^(MSG nameValuePairExpr*)
> ;
>
> nameValuePairExpr
>        :    NAME '=' valueExpr WS? -> ^(PAIR NAME valueExpr) ;
>
> valueExpr
>        :    quotedString -> ^(STR_VAL quotedString)
>        |    INT -> ^(INT_VAL INT)
>        |    msg
>        ;
>
> quotedString
>        :    '"'! .* '"'!
>        ;
>
> INT    :    '0'..'9'+ ;
>
> NAME   :    ('a'..'z'|'A'..'Z'|'0'..'9')+ ;
>
> WS     :    ' '+ ;
>
> NL     :    ('\n'|'\r')+ ;
> -----------------
>



-- 
??
???
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080104/62449a53/attachment.html 

From clinton.roy at gmail.com  Fri Jan  4 21:46:48 2008
From: clinton.roy at gmail.com (Clinton Roy)
Date: Sat, 5 Jan 2008 15:46:48 +1000
Subject: [antlr-interest] linux.conf.au 2008 tutorial
Message-ID: <9c0715e40801042146i7f28dacah87021f14bb303fd4@mail.gmail.com>

Hey folks,

I've got a two hour tutorial slot for an antlr tutorial at this years
linux.conf.au in Melbourne, Australia.

I've given quite a few Antlr presentations before and will be basing
this one on the OSDC talk I gave:
http://azure.humbug.org.au/~croy/antlr_osdc.pdf

I walk through the slides, giving demonstrations with antlrworks
(which is great for showing dfs and ast diagrams).

I'd very much appreciate any feedback or suggestions people have on this talk.

cheers! :)
-- 
Clinton Roy
CSIRO - Robotics Platform Engineer
Autonomous Systems Lab

humbug.org.au  - Brisbane Unix Group
azure.humbug.org.au/~croy/blog - Blog
flickr.com/photos/croy/ - Photos

From mdepascale at dii.unisi.it  Sat Jan  5 03:29:18 2008
From: mdepascale at dii.unisi.it (Maurizio de Pascale)
Date: Sat, 05 Jan 2008 12:29:18 +0100
Subject: [antlr-interest] More, Status of C++ backend?
In-Reply-To: <"L8437430DC1384e4286D6DAC56A5AF549.1199391610.scalix.temporal-wave.com*"@MHS>
References: <"L8437430DC1384e4286D6DAC56A5AF549.1199391610.scalix.temporal-wave.com*"@MHS>
Message-ID: <477F6A0E.8040103@dii.unisi.it>

You're right Jim, that's why I've said "ideally" ;D

I've often listened to people complaining about poor compilers and 
linkers (especially for embedded devices), simply I used to believe that 
at least the meaning of extern c was standard across compilers and that 
non templated C++ code should compile correctly even on toy compilers.

Maybe some ANTLR user has a working C++ to C compiler ;)

cheers,
Maurizio
mdepascale at dii.unisi.it

Jim Idle wrote:
>   
>> -----Original Message-----
>> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
>> Sent: Thursday, January 03, 2008 11:53 AM
>> To: Maurizio de Pascale
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] More, Status of C++ backend?
>>
>> At 23:59 3/01/2008, Maurizio de Pascale wrote:
>>  >My suggestion is that the right road (ideally of course, I know
>> the
>>  >C runtime is already in place) would be to have the runtime
>> written
>>  >in C++ (as close as possible to the java counterpart) and
>> provide
>>  >(also) a C API for C users.
>>
>> No, I disagree with that.  It's important to keep a pure C
>> runtime, for use with embedded hardware.  Most of the embedded C++
>> compilers I've seen are fairly flaky.  (And that includes gcc.)
>>
>>     
>
> Yes. Maurizio - I guess you have never had to maintain C++ libraries on 
> 12 different operating systems all with different compilers with 
> different ideas about C++ linkage and interaction with C ;-). I don't 
> wish to put that burden on everyone who wants a C interface as I have 
> had to do this with ANTLR 2 and it was a complete nightmare, having 
> nothing to do with the quality of the code, but the C++ compilers and 
> the linkers. 
>
> It is going to be bad enough looking after the C++ library for C++ 
> programmers who are linking with C++ object :-)
>
> Jim
>
>
>   

From whitis at freelabs.com  Sat Jan  5 04:33:28 2008
From: whitis at freelabs.com (Mark Whitis)
Date: Sat, 5 Jan 2008 07:33:28 -0500 (EST)
Subject: [antlr-interest] Parser generator philosophy
Message-ID: <Pine.LNX.4.64.0801050732440.8143@localhost.localdomain>

This is a long message, but it is the most important message I will
ever post to this group.  If it takes a while to read, it took more
than a day to write.

I have taken parts from two different draft emails I have written on
other topics and combined them here, since this belongs in a separate 
topic.
Because of this origin, the order of this message is a bit backwards.
I describe the path to take before I describe the specific bugs
in detail.   But the abstract stuff is more important for impatient
people to read than a detailed list of flaws.   The abstract context
also will make it easier to appreciate the gravity of the flaws.
But in the middle, I diverge into the more distant future.  And
the sections overlap.

In the preface to the definitive guide, Terrance, you talk about being
two levels of indirection from doing anything productive.   But a tool
such as ANTLR could be gives you enormous leverage to accomplish more
through improving the productivity of others than you could accomplish
individually.   If you take ANTLR to the tipping point where critical
mass is reached it has the potential to catalize major improvements.
Archimedes said "Give me a lever long enough and a fulcum on which to
place and I shall move the world".   ANTLR isn't that lever, yet,
but it could be.  Due to time constraints, I will only scratch the surface
of the implications.   The absence of a solid grammar language has
severely impacted the history of computing.

Now, I may have made some mistakes.   I am criticising ANTLR before
I fully understand it.   But if I waited until I did, I might forget
a lot of the problems.  My naivety with antlr specifics combined with
my vast experience in many areas that are not antlr specific and my
knack for seeing the big picture is actually helpful in identifying flaws.
I am not accustomed to doing things "the ANTLR way" or working around
the flaws.   Thus, I am in a good position to catch flaws that will
turn away potential users by the hundreds or thousands and simultaneously
see how those flaws fit into the big picture and ticked off enough
to be motivated to write about it.   But it means that my suggested
notations may need to be altered to fit into the antlr scheme.

ANTLR does a lot of neat stuff.   But I think that it has yet to
pass a critical usability threshold.   But you can take my blunt
constructive criticism here as a compliment of sorts.   I think
ANTLR has potential.   While ANTLRs fans may compare it to
older parser generators, I compare it to what a parser generator
should be.   Thus, I will be talking more about what is wrong with
ANTLR than what is right.

ANTLR is supposed to be designed to work in the real world where grammars
are often ugly.   No parser generator can be expected to
handle languages that are really abysmal.   But the bar is much lower
than it should be.

Here is a basic, crucial, philosphical point: A grammar file should be
able to define everything that is not application specific about a
grammar in the grammar language itself.  Consider converting lex/yacc
grammars to ANTLR.  That which was done by dirty tricks inside actions
cannot be understood by a next generation tool, specifically antlr.
Don't repeat that mistake.  If someone comes out with a tool tomorrow
that uses a more efficient algorithm (and doesn't duplicate antlr's
runtime internals) it should still be able to use the grammar file
either directly or by running through a converter.  The problems that
show up today as language dependency are largely the same problems
that would screw things up for the next generation.  And they are
problems that were obvious, to me at least, a couple decades ago.

Think of ANTLR++ not as a tool but as a language; the tool is nothing
more than a specific implementation of the language.   How fast it runs,
while important for some applications, is entirely secondary to the
expressive power and reusability of the language itself.   Whether
ANTLR can do what I am describing here ultimately will have an
order of magnitude more social impact than how fast it does it.
If the tool is slow, people can optimize or come up with new tools
where needed or drop in a faster chip.    Think of it more as the
answer to EBNF, plus a reference implementation, than as the replacement
to lex/yacc, et. al.   In other words, the job is to create a portable
grammar language and the first tool that uses it.   Expect that other 
tools
will use it.   Some will be parser generators, some won't.
The missing features I describe at the bottom of the file are
more important than how many languages it natively targets.   A version
of ANTLR that supports these features with only a single target, C, would 
be
more useful than the current version (dozens of languages can link to
a parser library written in C).   But the problems in supporting
multiple languages are very similar to the problems of making a portable
grammar.   Thus, ANTLR's strength in almost supporting 5 target languages
focuses attention on the core notational deficiencies.   It also means
that a lot of the groundwork has probably already been done.   But it
means there is more work to do where the runtime API code needs 
improvement.

There are two sorts of actions:
   - grammar actions
   - application specific actions.
Syntactical grammar actions need to be implemented as extensions to the
basic rules themselves or as a small embedded language:
   - an expression syntax with magic function calls and simple
     assignment.   Thus, the
     strings can be handled something like this:
        PARSE(COMBINE(STRIP(...)))
   - a stripped down language with basic control structures that is
     reasonable to reimplement in other tools and which can be easily
     translated into all the target languages antlr supports.
Both would use a notation for accessing data that is not antlr runtime
specific.   Basic object oriented rules of hiding the internal structure
apply.

Application specific actions would also benefit, in terms of portability
across target languages, from a minimal embedded language that is
translated to the target language (target language in this text refers
to the language the parser runs in).   However, any application specific
action blocks should be separable from the core syntactical and/or 
semantical
actions.

    rule: blah blah
      syntactical {
         // syntax specific rules, that can't be integrated into antlr 
rules
         // portable antlrcode
      }
      semantic {
         // semantic tagging actions in portable language (described below)
         // portable antlrcode
      }
      language antlrcode {
         // portable application specific code
      }
      language "C" {
         // C code, application specific only
      }
      language "Java" {
         // Java code, application specific only
      }
      ;
The first three blocks, if present are all executed.   One of the last
two is executed.   Rarely would you need all these on the same rule.

Every language should have a single permissively licensed grammar file
that is both human and machine readable and complete enough that it can
immediately be run through the parser generator tool of their choice,
as long as it is good enough, and build a recognizer.   Any code
that is added would be application specific (i.e. are you building a
compiler, a syntax highlighting editor, etc).   In fact, if what
you are building is a syntax highlighting editor all you should
need is a stylesheet once you have the basic infrastructure.
Consider, for example, applying CSS to grammar rules.
    IDENTIFIER { background: red; }
    STRING { background: blue; }
Now, if you implement the features and fix the problems I have
described in my past messages and the one I haven't sent yet, to
make ANTLR++ then the ANTLR++ grammar would be very close to
satisfying this goal.

Everything about the syntax would be defined in the grammar file,
and maybe a few semantic details as well (such as whether an
identifier is a class, a typedef, a constant, a scalar, etc.).

Translators should be able to convert EXPRESS, XML Schema, etc. into
ANTLR++.


The syntax of the language can't depend on antlr's runtime internals
or whether you are using LR/GLR/LL(k).  These are ephemeral.  Someone
should be able to extend ANTLR, the tool, or write another tool that
uses a choice of LL(k), GLR, LR, or recursive decent parser and use
the same files.  Granted, writing a bottom up parser that implements
all the features of the ANTLR++ language may be tricky, but it should
be doable.  An LR parser generator would need to rewrite rules to make
them LR friendly, and then convert the tree back to the original form.
Not necessarily worth undertaking, but it should be possible.
Potential support for LR parser itself shouldn't hold back language
features.   The most important use of an LR parser (or other) backend 
would
be simply to tell a language designer if an LR parser is possible
so they can weigh the benefits of a representation against the cost.
And LR, GLR, and recursive descent are used as examples for the
basic principle that the grammar description language should not
be tied to one algorithm.

Consider the FAQ and Mailing list.   If a question is asked that is
gramatical in nature, the answer better not be target specific or
runtime specific code.

I believe that what I am suggesting can be done and should be done.   In 
fact,
I think it could have been done 20 years ago.

When undertaking ANTLR++, one should consider ANTLR+=2.   Forward thinking
helps.   While ANTLR++ would just deal with syntax and those basic 
features,
such as knowing the basic type of a symbol which is sometimes necessary
to parse the syntax, ANTLR+=2 would begin to tackle semantics.
You would tag all operators in an abstract way.


@precedence: ('*', '/'), ('+', '-')
expr:
    a=expr '+' b=expr   SEMANTICS { ADDITION_OPERATION(a,b); }
    | a=expr '-' b=expr   SENANTICS {SUBTRACTION_OPERATION(a,b;) }
    | a=expr '*' b=expr   SEMANTICS { MULIIPLY_OPERATION(a,b) }
    | a=expr '/' b=expr   SEMANTICS { DIVIDE_OPERATION(a,b) }
    ;
variable_declaration:
    'variable' id=IDENTIFIER ':' type=type_expression 
SEMANTICS::VARIABLE_DECLARATION(id, type);

function_declaration:
    'function' id=IDENTIFIER ('returns' type=type_expression) '(' 
parameters=parameter_list ')' (body="{" statement* "}")+ ';' 
SEMANTICS::FUNCTION_DECLARATION(id, type, parameters, body);

Note that these are abstract markups and not code.   There is a huge
difference between the expression parser example in the definitive
guide with its actions statements and the abstract markup here.
Abstract symantic markup lets you do a lot of things.  Here are a few 
examples,
mostly from the programming language domain:
   - move from parser generator towards a true compiler compiler and
     interpreter compiler.  ANTLR+=2 is the front end.   The backend
     isn't much harder than a normal compiler backend for a single
     complex language.  Once the backend supports a construct from
     one language, it is ready to support that construct for other 
languages.
     And projects like LLVM can be used for code generation.
   - documentation generators can automatically extract the information
     that x is a variable and y is a function.
   - Documentation generators or more sophisticated tools, can actually
     tell what variables can be derived from which other variables.
   - for simple examples like an expression parser, tools can be written
     that automatically generate the evaluator.
   - automatic translators get a big boost because grammar files are
     usable on both ends.   For example, it isn't that hard to map 
corresponding
     operators, precedence, etc. such that expressions can be translated.
     StringTemplate could come in handy here.   N languages shouldn't
     require N^2 translators written from scratch.   And a unified
     translator could have some advantages in converting mixed language
     programs because it could use the original source of a library
     and avoid lost information.
   - users will not be limited in their choice of language based on
     what languages are available for a particular target CPU or
     environment.   If you have ever done embedded work, you know what
     I mean.
   - users will be able to construct supersets of languages fairly easily.
     Enforced subsets will be trivial.
   - it is an important step towards a truly modular and sane compiler with
     a permisive license and good cross platform compilation.
     Front ends, generated with ANTLR+=2 are loaded as plugins.
     Code generators are loaded as plugins.   Code generators are loaded
     as plugins.  Optimizers are loaded as plugins.   Mixing commercial
     and free plugins.
   - languages can be developed by people doing real work in the real
     world and thus have a better idea what is really needed rather than
     by people who have time to build a compiler.
   - because the same grammar can be used to update all the other tools
     associated with a language (IDEs, documentation generators, call graph
     generators, pretty printers, code review tools, syntax aware
     version contol systems, etc) people can choose languages more
     based on their merits than their popularity.
   - domain specific data languages start to be as usable as XML.
   - syntax aware editors.  Not just syntax highlighting but
     knowing what is valid in any context.   And not just for
     programs but for data as well.   It might create a template
     to fill in.

This is somewhat similar to existing AST/parse tree behavior.   But it
adds standardized tagging.     The grammar writer can call x a 'function',
'proceedure', or a "frobnitz" but the tree will still contain the 
necessary
information.   Notice that there is not a single action in this example.
The actions are implied by the semantics and the application, not hard
coded into the grammar file.    One tool may produce a compiler,
one tool may produce an interpretter, one tool may produce a translator,
another tool produces documentation, another tool analyzes variable
dependencies, another tool does logic synthesis, etc.
All work from the same grammar and the same AST++ tree.   They work
whether you write the expression as "a+b" or "a b +".   It doesn't matter
what style the grammar is written in (for example antlr style or LR style)
or what style the language expresses them in.

Thus, you might get a tree that looks something like
   thus, given OPERATOR_PLUS(operand_a, operand_b) and "C+D" and
rule fragment "

              "+":plus:OPERATOR_PLUS
                      |
           +----------+-----------------+
           |                            |
  "C":atom:operand_a         "D":atom:operand_b

Note that this can be used whether the tree ends up (+ (C D)) or
"(+ (D C)).    Also note that without tagging, we would have two
"atoms" without knowing the semantics of those atoms.  Also, note
that at no time does the backend rely on the text "+" to determine
the type of operation.   Some operators are written differently
in different languages.   "<", "<<", "@<", "lt", and ".LT" mean
the same thing in different languages.

Antlr users who haven't seen this wil probably appreciate it.
http://merd.sourceforge.net/pixel/language-study/syntax-across-languages/Vrs.html
With possible hidden channel info mixed in for tools that need it.

With operand_a and operand_b perhaps prefixed or linked to OPERATOR_PLUS
entry, which might be necessary to unravel more complicated versions.
This wouldn't be limited to proceedural languages.   Abstract tagging
could describe lists, sets, etc. for data files.   Data languages would
add more tags, thus a node would be tagged as a) a list and b) information
about what information it contains (Phone numbers).   Thus there would
be two tags from different domains, one application specific.
Additional tags for protocols.   The tags might indicate that
the data is a variable length list with hash and/or subscript lookup.
Additional tags for 2D/3D graphics modelling.

Given a data file, you could use a query program to extract information.
A tool could generate a query program specific to one data language.
Grammars written by 6 different people could be used to automatically
construct most of a compiler that handled C, C++, ADA, Java, C#, and D.
And that is an easy example because most of those use the same basic
expression syntax.  Enough so that a compiler or interpretter could
be built automatically that might not handle the more exotic features
of a language but would be able to handle the basic features from day
one and start throwing test cases at it.   The creator of a language
can start using a subset of that language before a complete compiler
is built.


A couple hundred semantic tags could probably define most of the commonly
used features of most programming languages.  The tags would be
written in function call style.   Possibly some simple control structures:
    IF(SYMBOL_LOOKUP(a).basic_type == STRING) {
       OPERATOR_PLUS(a,b);
    } else {
       OPERATOR_CONCATENATE(a,b);
    }
But this decision making ability may not be necessary if you can
do:
   {SYMBOL_LOOKUP(a).basic_type == STRING} (a=expr "+" b=expr)
     semantics { OPERATOR_CONCATENATE(a,b); }
   | (a=expr "+" b=expr) semantics { OPERATOR_PLUS(a,b); }

Note that this example is not meant to suggest that you try to
put a bunch of type specific stuff in the grammar file.  Instead
it is dealing with a common special case where a language misuses
the addition operator for concatenation.  The D language, for example,
defines a concatenation operator "~".   The back end should not have
to modified for this.  If for some reason the back end has to deal with
it, you use OPERATOR_PLUS_OR_CONCATENATE(), preserving the ambiguity.

An intial version of the tagging mechanism itself could be incorporated
in ANTLR++.   Defining the tags would be the job of ANTLR+=2.  TAG
definitions would be in a file that could be updated.   And it would
probably contain some rewriting mechanisms.

Users would define their own, nonstandard tags using the common "X_NAME()"
convention until the tags were standardized.

In many ways, ANTLR+=2 could be easier than ANTLR++.   The existing
rewriting rules are close.  Not there, yet, as far as I understand them.
When you use
   a=expr '+' b=expr ^(PLUS a b)
you appear to lose information.  You lose more when you flatten the
tree.  I am talking about a system that retains all of the text and
all of the intermediate nodes.  You can retain the information that
"C+D" used the "+" operator and that C is both an expr and a atom.
or maybe that one was an integer_atom and the other was a float_atom.
I am adding information, not subtracting it and doing it without
increasing the depth of the tree.

In the long, run, all this could make ANTLR easier to maintain and
extend.    Consider that there are JAVA, C, Python, C#, and Objective
C runtimes.    Now consider that one of the reasons to make ANTLR+=2
is to make translators easy to write.   Thus, the C, Python, C# and
Objective C runtimes could be translated from the Java runtime.
The fact that Java is fairly abstract and yet crippled helps.   Java is
more notationally complete in many respects but functionally incomplete.
You can't automatically translate C pointer code to Java very easily
but you can do the reverse.   Converting classes to C isn't very
hard, structs with function pointers.  Expressions with member
methods a.b(...) get translated to a->b(a,...).   In the case of
Java to C, there is already a (not maintained) translator called Toba.
It deals with exception handling, garbage collecting, etc.
ANTLR probably isn't using a lot of the Java proprietary libraries (SWING,
etc.) that would complicate translating GUI apps.   Translating to
C#, C++, and Objective-C can largely reuse C translation while
turning off certain translation steps (classes, exception handling,
member methods).   There are a few Java to C++ programs out there.
And translation code can be shared with an implementation that
converts antlrcode actions to the various target languages for
those cases where you really need actions but want portability
for things that still won't fit into the improved abstract notation.
Alternatively, something like Comeau C++ to C translator ($50) could
be used as a temporary measure to simplify the translation process
and LLVM is rumored to do C++ to C, though I have my doubts as
to whether that is true.

The difficulty in translating from C and having, for example,
hand coded classe classes, exceptions, or pointer operations convert
into the appropriate notation for those classes is somewhat analogous
to the current state of ANTLR.   While C is functionally complete,
it just isn't abstract enough.   While you might be able to write
something in C or ANTLR, it isn't abstracted to the point that
it can be translated and reused.

In the next section (taken from the second email), I list the flaws
in ANTLR that I see.  Most of these are serious limitations in the
abstract notation of ANTLR that limit its use as a portable grammar
language between tools and even between different language targets
of ANTLR.

The following are NOT rare edge cases that should be handled by
user supplied target language and antlr runtime specific kludges:
   - case insensitivity
     (VHDL, BSDL, Pascal, ADA, SQL, BASIC, HTML, CQL, FORTRAN, HTTP,
     Oracle (database), many assemblers, DOS SHELL, many non-unix
     shells, human languages, common lisp, FORTH, Logo, PL/I, Scheme,
     SGML, PHP (keywords), E, MUMPS,...)
   - nested parsing (VHDL, XML, SVG, C, C++...)
     - parsing inside strings (VHDL, XML, SVG, ...)
     - handling of include files (C, C++, ...)
     - selecting a parser and lexar subgrammar when doing nested parsing
     - putting nested grammars in user's choice of separate grammar
       files or in the same file.
     - selectively sharing rules among nested grammars and parent
       grammar.
   - keywords as identifiers
     (SQL, COBOL, Natual/Abadas, JCL, BSDL (sort of),...)
     Plus, this handles the general problem of code breakage in
     non-ambiguous cases due to official and unofficial extensions
     to a language.
   - selectively disallowing whitespace between tokens
   - choosing between multiple token rules that match the same input
     based on parser context.
   - communicating between parser rules/actions and lexer rules/actions
     - shared variables
     - arguments
   - selecting tree format, where more than one is supported.  AST vs Parse
     trees in this case.
   - keyword abreviation
     (very common in command languages, a really bad idea to use in scripts
     written in those languages)
   - conditional inclusion of parts of the grammar file based on
     variables  (i.e. similar to C #if or #ifdef) including user
     defined variables and options to the language.
     @if language=="C"
     @else
     @endif
     And also defining those from the ANTLR command line.
   - grammar include files
     This is needed for many large and/or modular grammars such as those
     produced  by w3.org and iso.   Some examples are X3D, STEP (3D),
   - operator precedence.
     (Almost every language which handles expressions).
     This isn't too hard to do by rewriting grammars but the result
    is cluttered grammars that are harder for readers to understand.
   - access to parser class members from lexer actions, access
     to lexer class members from parser actions, and access to other
     utility classes from either.
   - Non-finite input streams, streams larger than memory, and
     streams where not all data is immediately available
     (such as protocols).
   - operator tokens defined by the user
     of a grammar, not the grammer itself.   Requires a runtime
     table lookup.   Multiple character operators "++" would be harder to
     implement, though possible.   This gets around, for example, the
     c++ limitation on defining new operators.
      U+2200 .. U+22FF (mathematical symbols) are prime candidates.
     as are U+0391..U+03A9 and U+03B1..U+03C9 (greek letters).
   - layered parsing
     For example, You might layer an SVG parser on top of an XML parser.
     @include might be enough, then again it might not be.

These are for the most point perfectly ordinary things that any user
would expect a compiler compiler to be able to do automatically.   Yes, 
users
have often been disappointed by existing compiler compilers.  But
these are common reasons why users abondon existing tools in search
of a better compiler compiler.    These are reasons why 5000 users
a month download ANTLR in search of a better tool (but only a
miniscule percentage apparenlty actually produce grammars for
real world languages with ANTLR).   Yet most of
these require ugly target language specific code hacks or have other
problems in antlr.   Some are even handled worse in antlr than
in its predecessors.

If the core of ANTLR is well written, most of these won't be too hard
to do.


My next message will deal with case sensitivity with a lot of discussion
of unicode as well.



From jpschewe at mtu.net  Sat Jan  5 05:47:47 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Sat, 05 Jan 2008 07:47:47 -0600
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <477EA5A5.8060903@gmx.de>
References: <477E5FA6.3070602@mtu.net> <477E83CC.5030208@gmail.com>
	<477EA5A5.8060903@gmx.de>
Message-ID: <477F8A83.5050906@mtu.net>

Johannes Luber wrote:
> Ola Bini schrieb:
>   
>> Jon Schewe wrote:
>>     
>>> I have the following parser rule and lexer rule (others exist as
>>> well). I'm using antlr 3.0.1.  If I change '*' in multExpr to PRODUCT
>>> then at
>>> runtime I get an exception.  If I leave it at '*', all is fine.  What am
>>> I doing wrong here?
>>>    [junit] token PRODUCT
>>>     [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token
>>> PRODUCT
>>>     [junit]     at
>>> org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
>>>
>>>     [junit]     at
>>> org.antlr.runtime.tree.RewriteRuleTokenStream.next(RewriteRuleTokenStream.java:57)
>>>
>>>  
>>>
>>> /**
>>>  * @param negate if true, negate all expressions by multiplying by -1
>>>  */   multExpr[boolean negate]
>>>     :   atom ('*' atom)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"])
>>> atom+)
>>>                              ->           ^(PRODUCT atom+)
>>>     ;
>>>
>>> PRODUCT         :   '*'     ;
>>>   
>>>       
>> I have seen the same problem, and have no idea why this happens.
>>
>>     
>
> The reason is simple: '*' and PRODUCT have different tokens. If you
> change a literal to a token, then change all occurrences of it. You have
> overlooked '*' in "atom ('*' atom)*".
>   
I think you missed my point.  The only occurrance of '*' or PRODUCT on
the left side of a rewrite rule in my grammar is the one that you see
there.  If I change all occurrances of '*' to PRODUCT and have the
PRODUCT lexer rule, then I get the exception.  However if I do not have
the PRODUCT lexer rule and use the string literal '*' on the left hand
side of my rewrite rules and insert an imaginary token (one that isn't
referenced in the lexer) in my rewrite rules it works fine.

I have another case where I'm getting the same exception as well.  If I
add another case to my atom parser rule that doesn't cause a
non-determinism, I get the same exception when parsing a file that
previously parsed just fine and doesn't have anything in it that should
cause the new rule to be executed.

What causes this exception?  Most other error messages I get from antlr
are very clear stating that there are no viable alternatives at a
particular line number.  Here I get this exception.

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From markwright at internode.on.net  Sat Jan  5 07:04:21 2008
From: markwright at internode.on.net (Mark Wright)
Date: Sun, 6 Jan 2008 02:04:21 +1100
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <477F8A83.5050906@mtu.net>
References: <477E5FA6.3070602@mtu.net> <477E83CC.5030208@gmail.com>
	<477EA5A5.8060903@gmx.de> <477F8A83.5050906@mtu.net>
Message-ID: <20080106020421.000057b4@goanna>

Hello Jon,

Here is an example stack trace of the exception:

Exception in thread "main" org.antlr.runtime.tree.RewriteEarlyExitException
        at tntdbo.dboc.TntdboParser.template_parameter_list(TntdboParser.java:15830)
        at tntdbo.dboc.TntdboParser.template_declaration(TntdboParser.java:15677)
        at tntdbo.dboc.TntdboParser.declaration(TntdboParser.java:5443)
        at tntdbo.dboc.TntdboParser.declaration_seq(TntdboParser.java:5327)
        at tntdbo.dboc.TntdboParser.namespace_body(TntdboParser.java:9378)
        at tntdbo.dboc.TntdboParser.original_namespace_definition(TntdboParser.java:9142)
        at tntdbo.dboc.TntdboParser.named_namespace_definition(TntdboParser.java:9053)
        at tntdbo.dboc.TntdboParser.namespace_definition(TntdboParser.java:8958)
        at tntdbo.dboc.TntdboParser.declaration(TntdboParser.java:5471)
        at tntdbo.dboc.TntdboParser.declaration_seq(TntdboParser.java:5327)
        at tntdbo.dboc.TntdboParser.translation_unit(TntdboParser.java:243)
        at tntdbo.dboc.Tntdboc.process(Tntdboc.java:99)
        at tntdbo.dboc.Tntdboc.<init>(Tntdboc.java:39)
        at tntdbo.dboc.Tntdboc.main(Tntdboc.java:65)

So I open up the 1.2 MB generated Java parser source file in emacs,
(as netbeans just hangs when trying to open it), and go to line 15830
from the stack trace above.  The relevant fragment is below.
Then I look above the line where the RewriteEarlyExitException
was thrown, to the comment that ANTLR helpfully generated for
me to let me know the line in my grammar where I screwed up.

// AST REWRITE
// elements: template_parameter
// token labels: 
// rule labels: retval
// token list labels: 
// rule list labels: 
retval.tree = root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

root_0 = (TntdboAST)adaptor.nil();
// 1175:17: -> ^( TEMPLATE_PARAM ( template_parameter )+ )
{
    // Tntdbo.g:1175:20: ^( TEMPLATE_PARAM ( template_parameter )+ )
    {
    TntdboAST root_1 = (TntdboAST)adaptor.nil();
    root_1 = (TntdboAST)adaptor.becomeRoot((TntdboAST)adaptor.create(TEMPLATE_PARAM, "TEMPLATE_PARAM"), root_1);

    if ( !(stream_template_parameter.hasNext()) ) {
        throw new RewriteEarlyExitException();          <=== line 15830
    }
    while ( stream_template_parameter.hasNext() ) {
        adaptor.addChild(root_1, stream_template_parameter.nextTree());

    }
    stream_template_parameter.reset();

    adaptor.addChild(root_0, root_1);
    }

}

I look at that line:

template_parameter_list
  :   template_parameter ( ',' template_parameter )*
          -> ^(TEMPLATE_PARAM template_parameter+)      <=== line 1175
  ;

and I guess it is wrong, it does not like the plus in the AST rewrite.
I tried changing it to:

template_parameter_list
  :   l+=template_parameter ( ',' l+=template_parameter )*
          -> ^(TEMPLATE_PARAM $l)      <=== line 1175
  ;

It then gets past the RewriteEarlyExitException (to another issue in my grammar).

I hope this gives some hints on how to debug it.

Regards, Mark

-- 

From jaluber at gmx.de  Sat Jan  5 07:27:43 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 05 Jan 2008 16:27:43 +0100
Subject: [antlr-interest] Parser generator philosophy
In-Reply-To: <Pine.LNX.4.64.0801050732440.8143@localhost.localdomain>
References: <Pine.LNX.4.64.0801050732440.8143@localhost.localdomain>
Message-ID: <477FA1EF.4060102@gmx.de>

Mark Whitis schrieb:
...
> ANTLR does a lot of neat stuff.   But I think that it has yet to
> pass a critical usability threshold.

That's right. I believe we have to get to ANTLR 3.2 or 3.3 to fill most
of the missing gaps.

...

> Here is a basic, crucial, philosphical point: A grammar file should be
> able to define everything that is not application specific about a
> grammar in the grammar language itself.  Consider converting lex/yacc
> grammars to ANTLR.  That which was done by dirty tricks inside actions
> cannot be understood by a next generation tool, specifically antlr.
> Don't repeat that mistake.  If someone comes out with a tool tomorrow
> that uses a more efficient algorithm (and doesn't duplicate antlr's
> runtime internals) it should still be able to use the grammar file
> either directly or by running through a converter.  The problems that
> show up today as language dependency are largely the same problems
> that would screw things up for the next generation.  And they are
> problems that were obvious, to me at least, a couple decades ago.

Reading further, I've first thought, you were thinking of something like
<http://www.antlr.org/share/1196371900868/yggdrasil.pdf>. But you aren't.

...
>    rule: blah blah
>      syntactical {
>         // syntax specific rules, that can't be integrated into antlr rules
>         // portable antlrcode
>      }
>      semantic {
>         // semantic tagging actions in portable language (described below)
>         // portable antlrcode
>      }
>      language antlrcode {
>         // portable application specific code
>      }
>      language "C" {
>         // C code, application specific only
>      }
>      language "Java" {
>         // Java code, application specific only
>      }
>      ;
> The first three blocks, if present are all executed.   One of the last
> two is executed.   Rarely would you need all these on the same rule.
>

A major problem seems to be with your approach, that tree rewriting
isn't supported as everything goes into one file. And I can't help to
feel that the four categories for code are somewhat arbitrary.

...

> 
> 
> The syntax of the language can't depend on antlr's runtime internals
> or whether you are using LR/GLR/LL(k).  These are ephemeral.  Someone
> should be able to extend ANTLR, the tool, or write another tool that
> uses a choice of LL(k), GLR, LR, or recursive decent parser and use
> the same files.  Granted, writing a bottom up parser that implements
> all the features of the ANTLR++ language may be tricky, but it should
> be doable.  An LR parser generator would need to rewrite rules to make
> them LR friendly, and then convert the tree back to the original form.
...

I'm really wondering, if one can automatically convert a LR-grammar into
LL or the other way around. That may cause additional ambiguities which
aren't there in the original version. How can a tool extract enough
information to solve these problems? IMO, having something like
Yggdrasil is enough, as automatic conversions between different grammar
forms are only a nice-to-have feature. Building a target-independent
grammar for a particular parsing method seems not to bad for a deal.

> Consider the FAQ and Mailing list.   If a question is asked that is
> gramatical in nature, the answer better not be target specific or
> runtime specific code.

Looking at the examples delivered for four languages, I'd say that ANTLR
is lacking so far in a few areas.

...
> 
> @precedence: ('*', '/'), ('+', '-')
> expr:
>    a=expr '+' b=expr   SEMANTICS { ADDITION_OPERATION(a,b); }
>    | a=expr '-' b=expr   SENANTICS {SUBTRACTION_OPERATION(a,b;) }
>    | a=expr '*' b=expr   SEMANTICS { MULIIPLY_OPERATION(a,b) }
>    | a=expr '/' b=expr   SEMANTICS { DIVIDE_OPERATION(a,b) }
>    ;
> variable_declaration:
>    'variable' id=IDENTIFIER ':' type=type_expression
> SEMANTICS::VARIABLE_DECLARATION(id, type);
> 
> function_declaration:
>    'function' id=IDENTIFIER ('returns' type=type_expression) '('
> parameters=parameter_list ')' (body="{" statement* "}")+ ';'
> SEMANTICS::FUNCTION_DECLARATION(id, type, parameters, body);
> 
> Note that these are abstract markups and not code.   There is a huge
> difference between the expression parser example in the definitive
> guide with its actions statements and the abstract markup here.

The major problem with your abstract markup is that it is limited to the
things, you have included. YGGDRASIL is probably not limited, but Loring
Cramer knows best.

> Abstract symantic markup lets you do a lot of things.  Here are a few
> examples,
> mostly from the programming language domain:
>   - move from parser generator towards a true compiler compiler and
>     interpreter compiler.  ANTLR+=2 is the front end.   The backend
>     isn't much harder than a normal compiler backend for a single
>     complex language.  Once the backend supports a construct from
>     one language, it is ready to support that construct for other
> languages.

I'm not sure what the difference between a compiler compiler and parser
generator is supposed to be. For me, they refer to the same thing.

...
> 
> This is somewhat similar to existing AST/parse tree behavior.   But it
> adds standardized tagging.     The grammar writer can call x a 'function',
> 'proceedure', or a "frobnitz" but the tree will still contain the necessary
> information.   Notice that there is not a single action in this example.
> The actions are implied by the semantics and the application, not hard
> coded into the grammar file.    One tool may produce a compiler,
> one tool may produce an interpretter, one tool may produce a translator,
> another tool produces documentation, another tool analyzes variable
> dependencies, another tool does logic synthesis, etc.
> All work from the same grammar and the same AST++ tree.   They work
> whether you write the expression as "a+b" or "a b +".   It doesn't matter
> what style the grammar is written in (for example antlr style or LR style)
> or what style the language expresses them in.

That sounds utopian. Not sure if all tools can derive their required
information like you describe.

...
> With operand_a and operand_b perhaps prefixed or linked to OPERATOR_PLUS
> entry, which might be necessary to unravel more complicated versions.
> This wouldn't be limited to proceedural languages.   Abstract tagging
> could describe lists, sets, etc. for data files.   Data languages would
> add more tags, thus a node would be tagged as a) a list and b) information
> about what information it contains (Phone numbers).   Thus there would
> be two tags from different domains, one application specific.
> Additional tags for protocols.   The tags might indicate that
> the data is a variable length list with hash and/or subscript lookup.
> Additional tags for 2D/3D graphics modelling.

This proves that your approach is indeed one level too low.

...
> A couple hundred semantic tags could probably define most of the commonly
> used features of most programming languages.  The tags would be
> written in function call style.   Possibly some simple control structures:
>    IF(SYMBOL_LOOKUP(a).basic_type == STRING) {
>       OPERATOR_PLUS(a,b);
>    } else {
>       OPERATOR_CONCATENATE(a,b);
>    }
> But this decision making ability may not be necessary if you can
> do:
>   {SYMBOL_LOOKUP(a).basic_type == STRING} (a=expr "+" b=expr)
>     semantics { OPERATOR_CONCATENATE(a,b); }
>   | (a=expr "+" b=expr) semantics { OPERATOR_PLUS(a,b); }

If you need more than fifty different things which won't be nonetheless
ever enough then you aren't doing things orthogonal.

> Note that this example is not meant to suggest that you try to
> put a bunch of type specific stuff in the grammar file.  Instead
> it is dealing with a common special case where a language misuses
> the addition operator for concatenation.  The D language, for example,
> defines a concatenation operator "~".   The back end should not have
> to modified for this.  If for some reason the back end has to deal with
> it, you use OPERATOR_PLUS_OR_CONCATENATE(), preserving the ambiguity.

The use of '+' as string concatenation operator is indeed bad, but not
all languages have that use truly inbuilt. OO-Languages like C# employ
operator overloading. In these cases I don't see your approach working.

> An intial version of the tagging mechanism itself could be incorporated
> in ANTLR++.   Defining the tags would be the job of ANTLR+=2.  TAG
> definitions would be in a file that could be updated.   And it would
> probably contain some rewriting mechanisms.
> 
> Users would define their own, nonstandard tags using the common "X_NAME()"
> convention until the tags were standardized.

This approach makes me shudder...

> In many ways, ANTLR+=2 could be easier than ANTLR++.   The existing
> rewriting rules are close.  Not there, yet, as far as I understand them.
> When you use
>   a=expr '+' b=expr ^(PLUS a b)
> you appear to lose information.  You lose more when you flatten the
> tree.  I am talking about a system that retains all of the text and
> all of the intermediate nodes.  You can retain the information that
> "C+D" used the "+" operator and that C is both an expr and a atom.
> or maybe that one was an integer_atom and the other was a float_atom.
> I am adding information, not subtracting it and doing it without
> increasing the depth of the tree.

I thought you could prevent while rewriting the loss of any information.
In my view, you can save everything needed somewhere.

> In the long, run, all this could make ANTLR easier to maintain and
> extend.    Consider that there are JAVA, C, Python, C#, and Objective
> C runtimes.    Now consider that one of the reasons to make ANTLR+=2
> is to make translators easy to write.   Thus, the C, Python, C# and
> Objective C runtimes could be translated from the Java runtime.
>
> The fact that Java is fairly abstract and yet crippled helps.   Java is
> more notationally complete in many respects but functionally incomplete.
> You can't automatically translate C pointer code to Java very easily
> but you can do the reverse.   Converting classes to C isn't very
> hard, structs with function pointers.  Expressions with member
> methods a.b(...) get translated to a->b(a,...).   In the case of
> Java to C, there is already a (not maintained) translator called Toba.
> It deals with exception handling, garbage collecting, etc.
> ANTLR probably isn't using a lot of the Java proprietary libraries (SWING,
> etc.) that would complicate translating GUI apps.   Translating to
> C#, C++, and Objective-C can largely reuse C translation while
> turning off certain translation steps (classes, exception handling,
> member methods).   There are a few Java to C++ programs out there.
> And translation code can be shared with an implementation that
> converts antlrcode actions to the various target languages for
> those cases where you really need actions but want portability
> for things that still won't fit into the improved abstract notation.
> Alternatively, something like Comeau C++ to C translator ($50) could
> be used as a temporary measure to simplify the translation process
> and LLVM is rumored to do C++ to C, though I have my doubts as
> to whether that is true.

I have to disagree there. Runtimes have always some specific ways to
deal with problems - and those specifics don't only very in how they
differ, but also where they differ. So I consider it far more work to
make runtime translations automatically - without any human intervention
afterwards - than to do it yourself by hand (except basic syntax
translation).

...
> In the next section (taken from the second email), I list the flaws
> in ANTLR that I see.  Most of these are serious limitations in the
> abstract notation of ANTLR that limit its use as a portable grammar
> language between tools and even between different language targets
> of ANTLR.
> 
> The following are NOT rare edge cases that should be handled by
> user supplied target language and antlr runtime specific kludges:
>   - case insensitivity
>     (VHDL, BSDL, Pascal, ADA, SQL, BASIC, HTML, CQL, FORTRAN, HTTP,
>     Oracle (database), many assemblers, DOS SHELL, many non-unix
>     shells, human languages, common lisp, FORTH, Logo, PL/I, Scheme,
>     SGML, PHP (keywords), E, MUMPS,...)

Unicode handling makes case insensitivity more complicated. In Turkey
the uppercase y isn't Y, but Y accented with ... whatever that accent
is. In any case, you have to add locales. I know that .NET supports
locales so at least there it may be easy to compare the input. But I
don't know if the templates to generate the parser can be easily updated.

...
>   - selectively disallowing whitespace between tokens

Something I did with checking the indices of the supposedly neighboring
tokens (difference may be only one).

>   - choosing between multiple token rules that match the same input
>     based on parser context.

Can be done already. Just use for scanning a normal name (like "TILDE")
and via rewriting and imaginary tokens you can get to
"CONCATENATION[TILDE]".

>   - communicating between parser rules/actions and lexer rules/actions
>     - shared variables
>     - arguments

The situation right now: The Lexer is entirely separate from the parser.
In fact the default implementation lexes everything before the parser
sees the first token. Unfortunately, there are enough situations, where
the parser HAS to tell the lexer something. Using globals isn't enough
(scopes don't work because lexer and parser are in separate files and
classes).

Which reminds me: Lexer tokens can't have arguments, unless they are
fragment rules. I forgot the reason for this, but orthogonality-wise
it's not a good decision, even so implementation-wise the reason may be
sound.

>   - selecting tree format, where more than one is supported.  AST vs Parse
>     trees in this case.

Not sure, what you mean here.

>   - keyword abreviation
>     (very common in command languages, a really bad idea to use in scripts
>     written in those languages)

In combination with case insensitivity? In any case, these feature has
been requested already.

...
>   - grammar include files
>     This is needed for many large and/or modular grammars such as those
>     produced  by w3.org and iso.   Some examples are X3D, STEP (3D),

That feature is supposed to be included in 3.1.

>   - operator precedence.
>     (Almost every language which handles expressions).
>     This isn't too hard to do by rewriting grammars but the result
>    is cluttered grammars that are harder for readers to understand.

I'm not sure, if that is a good idea or not...

>   - access to parser class members from lexer actions, access
>     to lexer class members from parser actions, and access to other
>     utility classes from either.

See a few comments above.

>   - Non-finite input streams, streams larger than memory, and
>     streams where not all data is immediately available
>     (such as protocols).

Definitively missing.

>   - operator tokens defined by the user
>     of a grammar, not the grammer itself.   Requires a runtime
>     table lookup.   Multiple character operators "++" would be harder to
>     implement, though possible.   This gets around, for example, the
>     c++ limitation on defining new operators.
>      U+2200 .. U+22FF (mathematical symbols) are prime candidates.
>     as are U+0391..U+03A9 and U+03B1..U+03C9 (greek letters).

Huh? At which step of a usual compiler development are the user supposed
to add their new operators?

>   - layered parsing
>     For example, You might layer an SVG parser on top of an XML parser.
>     @include might be enough, then again it might not be.

That could be done via another tree grammar after XML.

> These are for the most point perfectly ordinary things that any user
> would expect a compiler compiler to be able to do automatically.   Yes,
> users
> have often been disappointed by existing compiler compilers.  But
> these are common reasons why users abondon existing tools in search
> of a better compiler compiler.    These are reasons why 5000 users
> a month download ANTLR in search of a better tool (but only a
> miniscule percentage apparenlty actually produce grammars for
> real world languages with ANTLR).   Yet most of
> these require ugly target language specific code hacks or have other
> problems in antlr.   Some are even handled worse in antlr than
> in its predecessors.
> 
> If the core of ANTLR is well written, most of these won't be too hard
> to do.
> 
> 
> My next message will deal with case sensitivity with a lot of discussion
> of unicode as well.

Unicode support isn't that good. I'd like to declare the use of
character classes and to being capable to deal with characters beyond
\uFFFF. It would make a lexer for C# very easy.

Johannes

From john at jacelridge.com  Sat Jan  5 08:27:11 2008
From: john at jacelridge.com (John Ridgway)
Date: Sat, 5 Jan 2008 11:27:11 -0500
Subject: [antlr-interest] Problem with ANTLR
Message-ID: <EA4F230D-A795-48C2-9B3A-9CBE8A96B2BF@jacelridge.com>

Friends -
I have the following issue with ANTLR (3.1beta):

I know that you can use the goal of a rule inside a rule when building  
an AST; for instance:

expression
     :   ( primary -> primary )
         ( arguments -> ^(CALL $expression arguments) ) *
     ;

but I want to pass the goal to the subsidiary thing, thusly:

expression
     :   (primary -> primary )
         ( selector[$expression.tree] -> selector )*
     ;

selector[Tree expr]
     : ...
     ;

This doesn't work, (the passed value is always null).  Is that a  
fundamental restriction or a bug?  (Or a feature?) :-)

Peace
- John


From bruhn.andersen at webspeed.dk  Sat Jan  5 09:33:52 2008
From: bruhn.andersen at webspeed.dk (Peter Bruhn Andersen)
Date: Sat, 05 Jan 2008 18:33:52 +0100
Subject: [antlr-interest] Natural language parsing
Message-ID: <477FBF80.2010201@webspeed.dk>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080105/5d76a715/attachment.html 

From parrt at cs.usfca.edu  Sat Jan  5 10:46:22 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Jan 2008 10:46:22 -0800
Subject: [antlr-interest] Natural language parsing
In-Reply-To: <477FBF80.2010201@webspeed.dk>
References: <477FBF80.2010201@webspeed.dk>
Message-ID: <37B1565F-A356-429E-95DA-44C02B5A0EDD@cs.usfca.edu>


On Jan 5, 2008, at 9:33 AM, Peter Bruhn Andersen wrote:

> I?ll soon be starting a project that needs to do quiet a bit of  
> natural language parsing. For that purpose I?ve tried to find  
> examples of how to use ANTLR but so far I?ve been out of luck. If  
> any of you know of such a project I would like to get a link to the  
> documentation. A paper with ?do and don?t do? advises will be  
> equally welcome.
>
> Though my own project will be targeting the Danish language I think  
> any examples will be useful.
>

Hi. I plan on building a simple English parser for my upcoming DSL  
recipes book, but it will be a while before I'm working on it.

Terence


From parrt at cs.usfca.edu  Sat Jan  5 10:47:13 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 5 Jan 2008 10:47:13 -0800
Subject: [antlr-interest] Problem with ANTLR
In-Reply-To: <EA4F230D-A795-48C2-9B3A-9CBE8A96B2BF@jacelridge.com>
References: <EA4F230D-A795-48C2-9B3A-9CBE8A96B2BF@jacelridge.com>
Message-ID: <933CEA1A-DBF6-481F-84F6-797D8B7620F4@cs.usfca.edu>

Hmm...should work.  What does the generated code for expression look  
like?
Ter
On Jan 5, 2008, at 8:27 AM, John Ridgway wrote:

> Friends -
> I have the following issue with ANTLR (3.1beta):
>
> I know that you can use the goal of a rule inside a rule when  
> building an AST; for instance:
>
> expression
>    :   ( primary -> primary )
>        ( arguments -> ^(CALL $expression arguments) ) *
>    ;
>
> but I want to pass the goal to the subsidiary thing, thusly:
>
> expression
>    :   (primary -> primary )
>        ( selector[$expression.tree] -> selector )*
>    ;
>
> selector[Tree expr]
>    : ...
>    ;
>
> This doesn't work, (the passed value is always null).  Is that a  
> fundamental restriction or a bug?  (Or a feature?) :-)
>
> Peace
> - John
>


From nik9000 at gmail.com  Sat Jan  5 19:41:42 2008
From: nik9000 at gmail.com (Nikolas Everett)
Date: Sat, 5 Jan 2008 22:41:42 -0500
Subject: [antlr-interest] Template grammars - argument specifying
	constructed template
Message-ID: <d4e11e980801051941p396b1a0bo9ed2d675140d2077@mail.gmail.com>

I'm trying to do this:

example[String templateName]
    :    ^(E (^X A M) P L E) -> ($templateName)(e={$E.text}, m={$M.text))
    ;

Is there an easy way to do this without some kind of odd hack using
stringtemplate's indirection?

Thanks,

--Nik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080105/1d0e5c9d/attachment.html 

From nik9000 at gmail.com  Sat Jan  5 20:23:26 2008
From: nik9000 at gmail.com (Nikolas Everett)
Date: Sat, 5 Jan 2008 23:23:26 -0500
Subject: [antlr-interest] Template grammars - argument specifying
	constructed template
In-Reply-To: <d4e11e980801051941p396b1a0bo9ed2d675140d2077@mail.gmail.com>
References: <d4e11e980801051941p396b1a0bo9ed2d675140d2077@mail.gmail.com>
Message-ID: <d4e11e980801052023la556efk2b669f88e9357d9e@mail.gmail.com>

I think I've answered my own question:

example1:  ^(A example2[this.getTemplateLib().getInstanceOf("example1")]) ->
{example2.st};
example2[StringTemplate template]: ^(B C) {$template.setAttribute($C.text);}
-> {template};

I haven't tested it thoroughly, but it looks to work.  I hate to drop lots
of java code in my grammar, but it does get the job done.

--Nik

On Jan 5, 2008 10:41 PM, Nikolas Everett < nik9000 at gmail.com> wrote:

> I'm trying to do this:
>
> example[String templateName]
>     :    ^(E (^X A M) P L E) -> ($templateName)(e={$E.text}, m={$M.text))
>     ;
>
> Is there an easy way to do this without some kind of odd hack using
> stringtemplate's indirection?
>
> Thanks,
>
> --Nik
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080105/c34d0d3f/attachment.html 

From geoff_hendrey at yahoo.com  Sun Jan  6 00:22:07 2008
From: geoff_hendrey at yahoo.com (Geoff hendrey)
Date: Sun, 6 Jan 2008 00:22:07 -0800 (PST)
Subject: [antlr-interest] insert after tree?
Message-ID: <335636.47645.qm@web31806.mail.mud.yahoo.com>

>From my Java program, I want to insert text after a *tree* not after a token.

I guess I am looking for a "TreeRewriteStream" as opposed to a TokenRewriteStream. 

As a workaroud I tried creating an imaginary token in my grammar file and using it to identify the rightmost side of a tree. Like this:

a 'func' a ->^('func' a+ IMAGINARY)

But then as I found out, the IMAGINARY Token doesn't seem to work with TokenRewriteStream.insertAfter.

Can anybody advise on how I can insert text immediately after a particular tree? (The text is static so perhaps there is a way to do it from the grammar file...)


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080106/8097db76/attachment.html 

From alessnet at gmail.com  Sun Jan  6 08:48:03 2008
From: alessnet at gmail.com (Alessandro)
Date: Sun, 6 Jan 2008 17:48:03 +0100
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
Message-ID: <be9e4140801060848y575f9302t9b4fdfd5b20cb77d@mail.gmail.com>

Hello,
(sorry for my bad english)

I can see that there is a problem with token deletion/insertion if you
are also building trees.
Take this rule, for exemple :

test	:	'var' ID ';'    -> ^('var' ID);

If the input if "var ;", the token insertion system detect that the
token "ID" is missing, then report the error, but continue parsing.

If you look closer to the generated code, you will see :

-----
ID2=(Token)input.LT(1); // save ID2
match(input,ID,FOLLOW_ID_in_test26);
stream_ID.add(ID2); // ID2 have a bad reference
----

ID2 contains a reference to the token ';' and not to the token ID. The
"match" procedure doesn't thow any exception because of the "token
insertion" system.

So the resulting tree will be in reality ^( 'var' ';') ....and it is
totally incorrect, am I right ?

If I want to use the "token deletion/insertion symbol" with tree
building, can I modify the "match" procedure in order to modify, for
instance, the content of "ID2" ( without altering the reference) ?

I imagined a workaround. ( LA(i) is the token at the index
current_pos+i in the stream ).

if there is a token insertion, do this in the "match" procedure :

1. add the "special" imaginary token (matching the missing token) in
the stream at the postion LA(2) (position is wrong now). The stream
must allow token insertion.
2. Swap (contents and not references) LA(1) and LA(2). (you have to
correct index informations)
3. ID2 still has a reference to LA(1), but the content of the token is
now "special imaginary ID token".


if there is a token deletion, do this in the "match" procedure :

1. Save LA(1) content to a temporary variable : temp_var
2. Copy the content of LA(2) in LA(1)
3. Copy the content of temp_var in LA(2)
4. Swap (references only) LA(1) AND LA(2)
5. ID2 has reference to **OLD** LA(1), but now it is LA(2).


In the commonTreeAdaptator.create procedure :

1. if the token is a "special" imaginary token : return an ERROR node
(like Terence proposal)
2. else : create a node like usual.

What do you think about this this (non-tested) workaround ?

The best solution, I think, is that "match" procedure returns the
reference of the real matched token.

On Dec 2, 2007 8:24 PM, Terence Parr <parrt at antlr.org> wrote:
> hi,
>
> Currently syntax errors cause invalid trees and possibly even runtime
> exceptions when building ASTs. What we really need I believe is to
> have rules that encounter syntax errors return an ERROR node of some
> sort that records where the error occurred and, with luck, the tokens
> consumed during recovery. I started an improvement request:
>
> http://www.antlr.org:8888/browse/ANTLR-193
>
> The basic idea is that ERROR nodes get used in place of ASTs that
> would normally be produced by rule indications.  For example, the
> following rule would return a valid AST except for the subtrees
> associated with rule refs in encountering syntax errors:
>
> forDecl : 'for' '(' decl ';' expr ';' expr ')' stat -> ... ;
>
> If there is an error inside decl, the tree would return
>
> ^('for' ERROR subtree-expr subtree-expr)
>
> This effectively means that I must turn off the single token
> insertion and deletion that occurs automatically within a single
> rule.  If a syntax error occurs, the immediately surrounding rule
> must terminate in return an error node.
>
> Does this make sense? I would like to stick this into 3.1 release.
>
> Ter
>

From harald_m_mueller at gmx.de  Sun Jan  6 09:04:04 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Sun, 6 Jan 2008 18:04:04 +0100
Subject: [antlr-interest] insert after tree?
In-Reply-To: <335636.47645.qm@web31806.mail.mud.yahoo.com>
Message-ID: <20080106170406.A180011EBC7@www.antlr.org>

Sorry - I don't understand your question: 
- You have an AST?
- you want to output it again as text?
- but after some sub-AST of it, you want to have written some additional
text?
 
or
 
- You have an AST
- you want to insert a node behind a certain sub-AST
so that later tree parsers/walkers will see that additional node
 
Is it one of these two - or something differently?
 
Sorry for being a little bit slow ...
Regards
Harald


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Geoff hendrey
Sent: Sunday, January 06, 2008 9:22 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] insert after tree?


>From my Java program, I want to insert text after a *tree* not after a
token.

I guess I am looking for a "TreeRewriteStream" as opposed to a
TokenRewriteStream. 

As a workaroud I tried creating an imaginary token in my grammar file and
using it to identify the rightmost side of a tree. Like this:

a 'func' a ->^('func' a+ IMAGINARY)

But then as I found out, the IMAGINARY Token doesn't seem to work with
TokenRewriteStream.insertAfter.

Can anybody advise on how I can insert text immediately after a particular
tree? (The text is static so perhaps there is a way to do it from the
grammar file...)



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080106/1954b4e0/attachment.html 

From geoff_hendrey at yahoo.com  Sun Jan  6 10:56:56 2008
From: geoff_hendrey at yahoo.com (Geoff hendrey)
Date: Sun, 6 Jan 2008 10:56:56 -0800 (PST)
Subject: [antlr-interest] insert after tree?
Message-ID: <910112.95286.qm@web31801.mail.mud.yahoo.com>

It's the first case you mention below. 



More specifically, I need to recognize SQL "LIKE" expression trees from
within a SQL statement and add the text "ESCAPE '~'" after the LIKE
expression's tree. I have this in my grammar file.



likeExpression

    :(concatenationExpression 'LIKE' concatenationExpression) ->^('LIKE' concatenationExpression+ ESCAPE)     ;



I added the imaginary ESCAPE token, but I have not had any luck in my
Java trying to replace the imaginary escape token with the real text
"ESCAPE '~'". If only I could add a *real* token through my rewrite
rule above , I would be in business.



On PAge 176 of Terence's book it shows how to construct an imaginary
token with from a real token, but I don't have a real token to use (as
far as I can tell), which means I can't use the TokeRewriteStream with the imaginary token, as far as I can tell.


 
-geoff





----- Original Message ----
From: Harald M. M?ller <harald_m_mueller at gmx.de>
To: Geoff hendrey <geoff_hendrey at yahoo.com>; antlr-interest at antlr.org
Sent: Sunday, January 6, 2008 9:04:04 AM
Subject: RE: [antlr-interest] insert after tree?




 
DIV {
MARGIN:0px;}



Sorry - I don't understand your question: 


- You have an AST?

- you want to output it again as text?

- but after some sub-AST of it, you want to have written 
some additional text?

 

or

 

- You have an AST

- you want to insert a node behind a certain 
sub-AST

so that later tree parsers/walkers will see that additional 
node

 

Is it one of these two - or something 
differently?

 

Sorry for being a little bit slow ...

Regards

Harald



  
  
  From: antlr-interest-bounces at antlr.org 
  [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Geoff 
  hendrey
Sent: Sunday, January 06, 2008 9:22 AM
To: 
  antlr-interest at antlr.org
Subject: [antlr-interest] insert after 
  tree?



  

  From 
  my Java program, I want to insert text after a *tree* not after a 
  token.

I guess I am looking for a "TreeRewriteStream" as opposed to a 
  TokenRewriteStream. 

As a workaroud I tried creating an imaginary token 
  in my grammar file and using it to identify the rightmost side of a tree. Like 
  this:

a 'func' a ->^('func' a+ IMAGINARY)

But then as I found 
  out, the IMAGINARY Token doesn't seem to work with 
  TokenRewriteStream.insertAfter.

Can anybody advise on how I can insert 
  text immediately after a particular tree? (The text is static so perhaps there 
  is a way to do it from the grammar file...)

  





-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080106/a8469459/attachment-0001.html 

From parrt at cs.usfca.edu  Sun Jan  6 11:48:49 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 6 Jan 2008 11:48:49 -0800
Subject: [antlr-interest] Template grammars - argument specifying
	constructed template
In-Reply-To: <d4e11e980801051941p396b1a0bo9ed2d675140d2077@mail.gmail.com>
References: <d4e11e980801051941p396b1a0bo9ed2d675140d2077@mail.gmail.com>
Message-ID: <8124EF2B-48A6-4A6A-8301-5DE778B7F9D8@cs.usfca.edu>

Well, using the template name as a variable is not really a hack is  
it?  If so, you can predicate the rewrite

a[String name]
	:	...	-> {name.equals("ick")}? ick(...)
			-> {name.equals("foo")}? foo(...)
	;

I'd recomm. what you have :)

Ter
On Jan 5, 2008, at 7:41 PM, Nikolas Everett wrote:

> I'm trying to do this:
>
> example[String templateName]
>     :    ^(E (^X A M) P L E) -> ($templateName)(e={$E.text},  
> m={$M.text))
>     ;
>
> Is there an easy way to do this without some kind of odd hack using  
> stringtemplate's indirection?
>
> Thanks,
>
> --Nik
>


From antlr at mirality.co.nz  Sun Jan  6 13:37:59 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 07 Jan 2008 10:37:59 +1300
Subject: [antlr-interest] insert after tree?
In-Reply-To: <910112.95286.qm@web31801.mail.mud.yahoo.com>
References: <910112.95286.qm@web31801.mail.mud.yahoo.com>
Message-ID: <20080106213816.0FA1411EBA7@www.antlr.org>

At 07:56 7/01/2008, Geoff hendrey wrote:
>likeExpression
>     :(concatenationExpression 'LIKE' concatenationExpression) 
> ->^('LIKE' concatenationExpression+ ESCAPE)     ;
>
>I added the imaginary ESCAPE token, but I have not had any luck 
>in my Java trying to replace the imaginary escape token with the 
>real text "ESCAPE '~'". If only I could add a *real* token 
>through my rewrite rule above , I would be in business.

The tree is a tree of tokens, not a tree of characters.  So you 
can't add an arbitrary '~' to it; you can only add a token 
representing a '~'.  Any tokens you insert manually into the 
stream are imaginary tokens, because they're not tied to the input 
stream.  This is no different.

Note that even if you do add a TILDE token or something that 
represents the '~', unless you do something convoluted it won't 
have any text or source location.  You'll need to match it based 
on token type rather than contents. 


From jaluber at gmx.de  Sun Jan  6 13:50:41 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 06 Jan 2008 22:50:41 +0100
Subject: [antlr-interest] ANT build problems
Message-ID: <47814D31.8070600@gmx.de>

Hi,

since I've moved to Linux I haven't been able to get that ant build
script for ANTLR running. I've recreated in a virtual Windows my
original configuration (save the exact paths), but I run into the same
problem despite having it formerly working. The guide of Harald didn't
help me regarding that problem, too.

I created the following script:

"#!/bin/bash

ANTLRLIB=/home/verequus/Arbeit/ANTLR/code/antlr/main/lib
CLASSPATH=$ANTLRLIB/stringtemplate-3.1b1.jar:$ANTLRLIB/antlr-3.1.0.jar:$ANTLRLIB/antlr-2.7.7.jar:/usr/share/java/junit.jar

ant build"

The reference to antlr-3.1.0.jar is merely a renamed intermediate build.
Unfortunately I get error messages like these (from Windows here, but
they are basically the same on Linux):

" [myjavac]
C:\ANTLR\code\antlr\main\src\org\antlr\codegen\ActionTranslator.java
:554: cannot find symbol
  [myjavac] symbol  : variable state
  [myjavac] location: class org.antlr.codegen.ActionTranslator
  [myjavac]             match('$'); if (state.failed) return ;
  [myjavac]                             ^"

The problem is that ActionTranslater.g and ActionAnalysis.g expect 3.1
already (not to mention some unit tests), but are run with 2.7.7 in ant.
What has to be done that this is working again?

Johannes

From mailing.list.recipient at gmail.com  Sun Jan  6 14:26:47 2008
From: mailing.list.recipient at gmail.com (John Gunnarsson)
Date: Sun, 6 Jan 2008 23:26:47 +0100
Subject: [antlr-interest] Threadsafe C parser
Message-ID: <6b332d3d0801061426k552d8da0y52f6ff3fc2617c74@mail.gmail.com>

Since C isn't object oriented, declarations in the grammar's member area is
static this is not a viable option to store data and build a thread safe
parser.
Could I store data per parser somehow?
Is this the place:
http://www.antlr.org/api/C/struct_a_n_t_l_r3___b_a_s_e___r_e_c_o_g_n_i_z_e_r__struct.html#d2f3309b604f5433e1480337b764c2da
ANTLR3_BASE_RECOGNIZER_struct::userp ?

If so, how can I reach it from within a grammar action?

//John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080106/efd94d0c/attachment.html 

From r.mark.volkmann at gmail.com  Sun Jan  6 15:18:28 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 6 Jan 2008 17:18:28 -0600
Subject: [antlr-interest] customizing error messages
Message-ID: <f0fcc6820801061518s6cbbd225yf5712633a5d4c208@mail.gmail.com>

I'm customizing error messages in my lexer, parser and tree parser.
When I output an error message from the lexer, the parser outputs
another error message. How can I signal to the parser that the lexer
already took care of the error message?

-- 
R. Mark Volkmann
Object Computing, Inc.

From firatkucuk at gmail.com  Sun Jan  6 15:23:05 2008
From: firatkucuk at gmail.com (=?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?=)
Date: Mon, 7 Jan 2008 01:23:05 +0200
Subject: [antlr-interest] a simple (not for me :)) grammar problem
Message-ID: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>

hi,
the problem is related to following grammar:

grammar Sample;

start: (FLOAT | INTEGER) DOT IDENTIFIER;

FLOAT: NUMBER DOT NUMBER;
INTEGER: NUMBER;
IDENTIFIER: LETTER+;
DOT: '.';
fragment NUMBER: DIGIT+;
fragment LETTER: 'a' .. 'z';
fragment DIGIT: '0' .. '9';


let us try:

3.hello

result:
line 1:2 required (...)+ loop did not match anything at character 'h'
line 1:3 mismatched input 'ello' expecting set null


what should i do?

-- 
??r. G?r. F?rat K???k
ADAMYO Distance Learning
SAKARYA University / TURKEY

From parrt at cs.usfca.edu  Sun Jan  6 15:27:10 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 6 Jan 2008 15:27:10 -0800
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
Message-ID: <6F766486-672E-49B6-B267-1868DA5F6091@cs.usfca.edu>

Hi. see

http://www.antlr.org/wiki/pages/viewpage.action?pageId=3604497

But generally the lexer is trying to match the 3. as a float; it  
matches greedily.
Ter

On Jan 6, 2008, at 3:23 PM, F?rat K???k wrote:

> hi,
> the problem is related to following grammar:
>
> grammar Sample;
>
> start: (FLOAT | INTEGER) DOT IDENTIFIER;
>
> FLOAT: NUMBER DOT NUMBER;
> INTEGER: NUMBER;
> IDENTIFIER: LETTER+;
> DOT: '.';
> fragment NUMBER: DIGIT+;
> fragment LETTER: 'a' .. 'z';
> fragment DIGIT: '0' .. '9';
>
>
> let us try:
>
> 3.hello
>
> result:
> line 1:2 required (...)+ loop did not match anything at character 'h'
> line 1:3 mismatched input 'ello' expecting set null
>
>
> what should i do?
>
> -- 
> ??r. G?r. F?rat K???k
> ADAMYO Distance Learning
> SAKARYA University / TURKEY


From r.mark.volkmann at gmail.com  Sun Jan  6 15:28:22 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 6 Jan 2008 17:28:22 -0600
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
Message-ID: <f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>

On Jan 6, 2008 5:23 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> hi,
> the problem is related to following grammar:
>
> grammar Sample;
>
> start: (FLOAT | INTEGER) DOT IDENTIFIER;
>
> FLOAT: NUMBER DOT NUMBER;
> INTEGER: NUMBER;
> IDENTIFIER: LETTER+;
> DOT: '.';
> fragment NUMBER: DIGIT+;
> fragment LETTER: 'a' .. 'z';
> fragment DIGIT: '0' .. '9';
>
> let us try:
>
> 3.hello
>
> result:
> line 1:2 required (...)+ loop did not match anything at character 'h'
> line 1:3 mismatched input 'ello' expecting set null

I think it's trying to match a FLOAT which requires a number after the
DOT. It should work if you change the start rule to this.

start: INTEGER DOT IDENTIFIER;

Do you really need to be able to parse something like this?
3.14.hello

-- 
R. Mark Volkmann
Object Computing, Inc.

From siemsen at ucar.edu  Sun Jan  6 18:25:11 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Sun, 6 Jan 2008 19:25:11 -0700
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <20080102225926.804A3610C8B@nscan4.ucar.edu>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
	<20080101221342.9EDC6309C051@nscan2.ucar.edu>
	<991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>
	<ebc876d70801012134x54b88c15qf13bfc6767d3f704@mail.gmail.com>
	<2C7FFDD4-38BD-493C-8AB5-B794E339B1E1@ucar.edu>
	<20080102225926.804A3610C8B@nscan4.ucar.edu>
Message-ID: <E93FDA69-89D4-462D-B759-200FFD4B2F12@ucar.edu>

Gavin,

My comments inline...

On Jan 2, 2008, at 3:59 PM, Gavin Lambert wrote:

> At 10:54 3/01/2008, siemsen at ucar.edu wrote:
>> The top-level file contains nothing but include statements, and  
>> none of the other files contain include statements, but the first  
>> 2 included files contain code that is needed by each of the other  
>> files.  The files are included in order such that superclasses are  
>> defined before subclasses, but that isn't really important for  
>> translation.
>
> What sort of code?  Constants?  Superclasses?  Support classes/ 
> methods?  Any of those could be dealt with as a separate file  
> easily enough.

The 2 included files contain code that defines about 50 "qualifiers"  
that can be applied to the classes, methods and fields defined in the  
other files.  The 2 includes need to be parsed before each of the  
included files.  As Thomas Brandon and you have suggested, the source  
files are organized as a bunch of separately included files, and it  
seems reasonable to parse them separately.  I could do so, but then  
the translator would rely on the current structure of the source  
files.  I don't control that structure, and those who do might change  
it, so I don't want to "hard code" it into the translator.  ANTLR has  
no trouble reading the source and producing one large token stream,  
so I don't see a compelling reason not to let it do so.

My problem is that the suggested way of handling include files with  
ANTLR has an annoying feature - the lexer eats the include statements  
without producing tokens for the actual include statements  
themselves.  Other than that, include processing works fine.  If my  
parser didn't need to know the names of the included files, there  
would be no issue.  I just need a slightly better mechanism for  
handling include files - one that allows the parser to see the file  
names.  Hence my next question...

>> Would it be possible to inject a token into the token stream just  
>> before I switch to the include file and call reset?  In the  
>> PragmaInclude lexer rule, can I call "emit" to do it, and make the  
>> token contain the include file name?  I haven't done anything like  
>> this before, I just wonder if it's reasonable.
>
> Lexer operation is basically just calling nextToken to retrieve one  
> token at a time.  Calling emit sets the data for that token; not  
> calling it will lead to generating a default token based on all the  
> characters matched by the rule.
>
> I'm not really familiar with the Java runtime, so I'm not sure what  
> the reset call affects.  It might destroy an emit as well (and you  
> probably can't emit afterwards successfully either).  Still, it  
> could be worth a try.
>
> The rule must currently be returning *something*, though, since  
> every top-level lexer rule called must return a token.  Trace it  
> through with a debugger and see what's going on.

I tried adding a call to emit right before the calls to setCharStream  
and reset.  As Thomas Brandon predicted, nothing happened, probably  
because the calls to setCharStream and reset destroy the token(s)  
created by the lexer rule.  I tried putting the call to emit right  
after the call to reset, even though that's not of much value to me -  
I want the parser to know the include file name before it sees tokens  
from the include file.  That generated this:

Exception in thread "main" java.lang.ClassCastException:  
org.antlr.runtime.ClassicToken
         at cimmof2javaLexer.nextToken(cimmof2javaLexer.java:111)
         at org.antlr.runtime.CommonTokenStream.fillBuffer 
(CommonTokenStream.java:119)
         at org.antlr.runtime.CommonTokenStream.LT 
(CommonTokenStream.java:238)
         at cimmof2javaParser.mofSpecification(cimmof2javaParser.java: 
141)
         at cimmof2java.main(cimmof2java.java:24)

Line 111 in cimmof2javaLexer.java is

     		if (((CommonToken)token).getStartIndex() < 0)

So when the token is cast to a CommonToken, boom.  I confess that I'm  
not sure how to handle this.  If you're still interested, it may help  
to see a current version of the grammar, which I've attached.

I'll start a new antlr-interest thread that focuses on the mechanism  
for handling include files.  I think the parser should see the tokens  
in the include statement, and that the tokens from the included file  
should appear after the tokens that represent the include statement  
itself.

Thanks for all your help!

-- Pete
-------------- next part --------------
A non-text attachment was scrubbed...
Name: cimmof2java.g
Type: application/octet-stream
Size: 18536 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080106/32f71f86/attachment-0001.obj 
-------------- next part --------------


From siemsen at ucar.edu  Sun Jan  6 18:37:18 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Sun, 6 Jan 2008 19:37:18 -0700
Subject: [antlr-interest] how to tweak the handling of include files
Message-ID: <CD77C41B-5F42-430B-B681-9B98051EC586@ucar.edu>

I'm parsing some "include" statements using the code suggested by the  
ANTLR Wiki page entitled "How do I implement include files?" at  
http://www.antlr.org/wiki/pages/viewpage.action?pageId=557057.  It  
works but for one thing.  The code executes in the lexer, and quietly  
replaces the include statement with tokens representing the contents  
of the include file.  This is expocted, but no tokens representing  
the include statement itself get into the token stream.  The include  
statement itself is "lost".

Is there any way for the parser to see the name of the include file?   
I want it for a problem specific to the files I'm parsing, but I can  
imagine a more general case where the the parser might want to report  
the name of the include file in error messages or something.

I tried inserting an "emit" call into the code to explicitly emit a  
token containing the file name, but the following calls to  
setCharStream and reset eat the resulting token, so the parser never  
sees it.

-- Pete


From r.mark.volkmann at gmail.com  Sun Jan  6 19:26:11 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 6 Jan 2008 21:26:11 -0600
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
Message-ID: <f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>

On Jan 6, 2008 5:31 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> yes i need it.

I decided to take a shot at figuring out a solution to your grammar.
It should be easy right. Terr already gave the hint that the problem
is that it was greedily grabbing the DOT for FLOAT instead of leaving
it for the separator between the number and the identifier. Piece of
cake? Well I've tried several things I thought would work to no avail.
Why in the world doesn't this work?

grammar Sample;

options {
 backtrack = true; // I shouldn't need this, but I don't think it can hurt.
}

start
 // Using a syntactic predicate to order alternatives.
 : (INTEGER DOT IDENTIFIER)=> INTEGER DOT IDENTIFIER
 | FLOAT DOT IDENTIFIER  ;

FLOAT: NUMBER DOT NUMBER;
INTEGER: NUMBER;
IDENTIFIER: LETTER+;
DOT: '.';
fragment NUMBER: DIGIT+;
fragment LETTER: 'a' .. 'z';
fragment DIGIT: '0' .. '9';

> 07.01.2008 tarihinde Mark Volkmann <r.mark.volkmann at gmail.com> yazm??:
> > On Jan 6, 2008 5:23 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> > > hi,
> > > the problem is related to following grammar:
> > >
> > > grammar Sample;
> > >
> > > start: (FLOAT | INTEGER) DOT IDENTIFIER;
> > >
> > > FLOAT: NUMBER DOT NUMBER;
> > > INTEGER: NUMBER;
> > > IDENTIFIER: LETTER+;
> > > DOT: '.';
> > > fragment NUMBER: DIGIT+;
> > > fragment LETTER: 'a' .. 'z';
> > > fragment DIGIT: '0' .. '9';
> > >
> > > let us try:
> > >
> > > 3.hello
> > >
> > > result:
> > > line 1:2 required (...)+ loop did not match anything at character 'h'
> > > line 1:3 mismatched input 'ello' expecting set null
> >
> > I think it's trying to match a FLOAT which requires a number after the
> > DOT. It should work if you change the start rule to this.
> >
> > start: INTEGER DOT IDENTIFIER;
> >
> > Do you really need to be able to parse something like this?
> > 3.14.hello

-- 
R. Mark Volkmann
Object Computing, Inc.

From whitis at freelabs.com  Sun Jan  6 19:44:15 2008
From: whitis at freelabs.com (Mark Whitis)
Date: Sun, 6 Jan 2008 22:44:15 -0500 (EST)
Subject: [antlr-interest] Parser generator philosophy
In-Reply-To: <477FA1EF.4060102@gmx.de>
References: <Pine.LNX.4.64.0801050732440.8143@localhost.localdomain>
	<477FA1EF.4060102@gmx.de>
Message-ID: <Pine.LNX.4.64.0801051739150.8143@localhost.localdomain>



On Sat, 5 Jan 2008, Johannes Luber wrote:

> Reading further, I've first thought, you were thinking of something like
> <http://www.antlr.org/share/1196371900868/yggdrasil.pdf>. But you aren't.

Thanks for that link.   The docs look pretty sketchy but there does
appear to be some overlap with what I am saying.

> A major problem seems to be with your approach, that tree rewriting
> isn't supported as everything goes into one file.

I never said tree rewriting isn't supported.   Everything for
the very front end goes into one file or set of files (user's
choice, not the tools).   In practice, one file would usually be
used except for modular grammars where a set of grammars
share modules.

In fact, I am dismayed to read that antlr itself doesn't yet
support tree rewriting rules for tree grammers, though that
is planned for future versions.   Odd becuase you would
think that it would take more to remove it.

You might, as a simplified example,  have many passes in a compiler:
   - The first pass parses the syntax.
     it executes the portable "syntax { }" actions.
     builds a symbol table.
   - the second pass does the semantic tagging.
     Can be merged with the first pass on some languages like
     C that require forward declarations.
     executes the protable "semantic { } actions.
     Does the semantic tagging.   AST tree is built here or
     in pass 1.
   - The third pass resolves constant subexpressions as these
     will need to be resolved before you can determine the
     size of objects "char a[SIZE+1]".
     They are either removed from the tree or kept but tagged
     as dead weight but still available for things like
     error messages so the compiler can tell you that
     "a+b+c" which resolves to "15" is not a valid value
     rather than confusing you with "15".
   - The fourth pass, which might be merged with the third,
     would do source level optimiztion like pruning code where:
        if(never) {
        }
     It might also factor out constant subexpressions, do
     loop unrolling, etc.
   - The fifth pass outputs LLVM assembler
   - subsequent optimization and code generation passes handled by LLVM

The division between first and second pass is a little fuzzy, still.
The basic issue is that many languages require you to build at least
a minimal symbol table before you can finish parsing.   In C, is "a*b"
multiplication (with discarded result) or declaring b to be a
pointer to type a?   If the language has an ambiguous syntax and
lets you write things in any order like
    a*b;
    typedef int a;
Then things start to get really ugly.

Only the first two passes use the portable grammar file.  The third and 
fourth passes do not need to be defined in the portable grammar file. 
The tagging information left behind by the grammar file provides enough 
information for these passes to be done with no knowledge of the specific 
grammar.  Thus, these are language independent parts of the compiler 
backend.

Most of what happens in pass 3 and later can be language independent 
provided you have a core that is built around a meta language that supports the 
common constructs of many languages. One notable exception is function 
calling conventions which can be target and language specific.  However, 
because of cross language linkages, a compler for one language needs to 
support more than one of these anyway. It is easy to graft a C frontend 
onto a C++ compiler, and not just because C is mostly a subset 
notationally.  C++ has the constructs and the ambiguity. As C++ is a 
kitchen sink language, a core which supports C++ is close to supporting 
many other languages. Yes, the core will need to be extended some as 
languages are added.

Your typical syntax highlighting editor would perform passes 1 and 2.
It might punt when it comes to highlighting the truly ambiguous stuff.
A smarter version, might do something analagous to passes 3 and 4, 
displaying the contents of if(never) in grey and displaying the results of 
constant expressions when you mouseover.

A translator normally would skip passes 3 and 4.

> And I can't help to
> feel that the four categories for code are somewhat arbitrary.

No, not really arbitrary but not final either.  The key point is that 
there needs to be a division.  The division between the first two 
categories is still a little fuzzy at this point but they differ in 
fundamental ways.  Syntax {} contains the stuff without which you could 
not parse the grammar.  Semantics {} contains only tagging rules. If you 
don't need tagging, for example, you could simply not apply these rules.
The distinction between the antlrcode (probably should be renamed
portableactions) and the language specific implementations is very
clear.    The language specific stuff is only for the stuff
that can't be handled by the portable actions.   And both the
antlrcode and language "*" sections are just there to allow
traditional (application specific) behavior without the
existing problems mixing languages.

> I'm really wondering, if one can automatically convert a LR-grammar into
> LL or the other way around. That may cause additional ambiguities which
> aren't there in the original version. How can a tool extract enough
> information to solve these problems? IMO, having something like
> Yggdrasil is enough, as automatic conversions between different grammar
> forms are only a nice-to-have feature. Building a target-independent
> grammar for a particular parsing method seems not to bad for a deal.

Yeah, I am wondering that as well.   There is a good chance that
there may be some grammars that are not even be expressable in
certain grammar rule types like LR.    However, there are also
likely to be a number of grammars that can be converted.  Your
typical expression syntax can be expressed in LR, GLR, LL(k),
LL(*), or recursive descent.

This is a problem for the academics to play with.

This is a little different than the problem, of converting from
a portable grammar syntax to LR(k) or LL(k).   In a portable
syntax you may have more information:
   expr: factor (
      precedence(10) expr "*" expr
      | precedence(10) expr "/" expr
      | precedence(20) expr '+' expr
      | precedence(20) expr '-' expr
      | atom
      )
      ;
This is much easier to read and write and is sufficiently abstract
that it could probably be translated into an LL or LR grammar
fairly easily.   It hasn't been factored into either LL or LR yet
so information hasn't been lost or convoluted.  It requires factoring
code to be written.   If I was a professor, like Terrance, 
I might have a student take a crack at it.

Something similar might be possible to apply to the classic
shift/reduce conflict:
    statement:
      | precedence(10) if '(' expr ')' '{' statement* '}' else '{'
      precedence(20) if '(' expr ')' '{'  statement* '}'
statement*'}'
      ;
While precedence() might not be as flexible as a predicate, but for
those operations where it is usable, it is more abstract and
isn't target language specific.


> The major problem with your abstract markup is that it is limited to the
> things, you have included. YGGDRASIL is probably not limited, but Loring
> Cramer knows best.

Well, I don't really understand what yggdrasil does and doesn't do.
But from your statement, I would get the impression that it might
do too much in the grammar file such that you end up repeating
the same stuff across a lot of grammars.

Tagging things is pretty easy to do.   Coming up with an initial
set of tags is the hard part.   If you come up with a set of
tags that work for C++ you are most of the way there, but you
need to add some things like "finally".  And the set of tags
would be maintained in a CVS central repository with a wiki for
documenting them.

> I'm not sure what the difference between a compiler compiler and parser
> generator is supposed to be. For me, they refer to the same thing.

That is because the term "compiler compiler" as commonly used is a 
misnomer.    A parser generator produces a parser (and maybe a lexer).
A compiler compiler would produce a compiler or at least a substantial
prototype.   A compiler compiler would link to a backend or produces
results that can be directly linked and provides the syntax trees in a
form that is directly usable by the back end.   With a parser generator
one grammer might produce a syntax tree with "<" and another ".LT." for
the same operation.    You can improve on that by having standard
conventions such that both produce "LESS_THAN_OPERATOR" for the tree
node but in doing so, you have probably lost the original text and
thus would end up with error messages like
   "LESS_THAN_OPERATOR" not defined for combination of string and int.
Instead of
   "<" not defined for combination of string and int.


>> This is somewhat similar to existing AST/parse tree behavior.   But it
>> adds standardized tagging.     The grammar writer can call x a 'function',
>> 'proceedure', or a "frobnitz" but the tree will still contain the necessary
>> information.   Notice that there is not a single action in this example.
>> The actions are implied by the semantics and the application, not hard
>> coded into the grammar file.    One tool may produce a compiler,
>> one tool may produce an interpretter, one tool may produce a translator,
>> another tool produces documentation, another tool analyzes variable
>> dependencies, another tool does logic synthesis, etc.
>> All work from the same grammar and the same AST++ tree.   They work
>> whether you write the expression as "a+b" or "a b +".   It doesn't matter
>> what style the grammar is written in (for example antlr style or LR style)
>> or what style the language expresses them in.
>
> That sounds utopian. Not sure if all tools can derive their required
> information like you describe.

Can all tools derive 100%?  Maybe not.   But getting more than 90% is
probably reasonable.   A lot of the hard stuff deals with stuff like 
arbitrary conventions for particular languages on particular platforms.  In
C++, file name munging isn't even the same for different compilers
on the same platform.   But that doesn't stop you from using the
same backend to compile 10 different languages from 10 different
grammars and linking them together or building a compiler that
can produce a working executable for your new language with complete
source.  And, as I said above, linkage conventions for different
languages are needed for each language so it can link to other
languages anyway so linkage conventions are a platform issue
more than a language issue.   So, a backend would accept
plugins that handle such arbitrary stuff.   The C++ compiler
might use the platform specific C, C++, ADA, D, and C# plugins.
The D compiler uses the same set of plugins.

Stuff that should be fairly easy to handle:
   - expressions
   - variable declarations
   - type declarations
   - scalar types
   - function definitions
   - exception handling
   - class definitions
   - statements
   - function arguments
Sure different languages have different modifiers for types and
variables.   static, private, public, const, final, near, far,
__attribute__((section("bank3E.rodata"))).   Function arguments
have various permutations indicating how the values may be passed: in, 
out, inout, copy, reference.  Scalar types usually map to 8, 16, 32, or
64 bit integers, 32, 40, 48, 64, or 80 bit floating point,  16, 32, or
64 bit pointers or references, with some additional attributes like
signed/unsigned.   On some weird platforms, you might have 24 bit
integers (DSP), 9 bit bytes, 36 bit words (IBM Mainframe), etc.  most 
complex types combine these basic forms into arrays, structs, classes,
lists, or hashes.   In C, you have int which may be 16 or 32 bits or
even 36 bits depending on platform.   So, you need to be able
to tag something "exactly 32 bits" or "at least 32 bits" and
"exactly" itself has two modifiers: "exactly 32 bits for calculations"
(i.e. every calculation on a 36 bit word is followed by "X &= 0xFFFFFFFF"
and "exactly 32 bits for storage" in case you are reading a 
binary structure from a normal machine on a 36 bit mainframe (chances
are you will just stuff it into a 36 bit word and waste 4 bits instead).

You aren't going to take a grammar file, run it through a tool
and produce a production ready compiler in a day.   But you
could take the grammar file and in one day be ready to write
test cases to evaluate the expressive power of the language,
excluding constructs that don't exist in other common languages.



>
> ...
>> With operand_a and operand_b perhaps prefixed or linked to OPERATOR_PLUS
>> entry, which might be necessary to unravel more complicated versions.
>> This wouldn't be limited to proceedural languages.   Abstract tagging
>> could describe lists, sets, etc. for data files.   Data languages would
>> add more tags, thus a node would be tagged as a) a list and b) information
>> about what information it contains (Phone numbers).   Thus there would
>> be two tags from different domains, one application specific.
>> Additional tags for protocols.   The tags might indicate that
>> the data is a variable length list with hash and/or subscript lookup.
>> Additional tags for 2D/3D graphics modelling.
>
> This proves that your approach is indeed one level too low.

Vague assertion.

> If you need more than fifty different things which won't be nonetheless
> ever enough then you aren't doing things orthogonal.


You could say the same meaningless statement about needing 50 different 
grammars for 50 different languages which will never be enough because
there will always be a language 51.    There will always be another
language.    However, the number of basic tags increases at a much
lower rate than the number of languages.   It is possible for the
number of tags to be smaller than the number of languages supported.
A couple hundred tags could support an infinite number of programming
languages, if not real ones.   If you group the tags into
sets (TRY, CATCH, FINALLY, RAISE) then the number of tag groups is
roughly equivalent to the number of constructs supported.

Your criticism seems analogous to criticizing English because
"noun" and "verb" are defined in a dictionary and new nouns
and verbs need to be added.    I am sure we could both
rip into English for a whole lot of reasons but that isn't
really one of them.   Now, logban, IIRC tries to address
the vocabularity issue by using compound words such that
"small-ice-planet" is used for meteor.   And it wouldn't
hurt to apply a little of that to the TAG naming to make
the names more consistant (or "orthogonal" if you prefer).

Tags is much better than rewriting compiler code glue for every
language that supports a construct.    The later is of order N*M where N
is the number of languages and M is the number of constructs.

For data files, the secondary attributes I refer to like 
'NAME','PHONE_NUMBER', 'CITY', 'STATE', 'POSTAL CODE', 'COUNTRY', EMAIL, 
URL, CREDIT_CARD_NUMBER, etc.) are strings.  It costs very little to 
convey additional information.  These are just taken from a domain 
specific dictionary with shared subsets.  Thus, if a program sees a tree 
like:
   ^('Numero Telephono:':PHONES:LIST:
       '+1-234-567-8901':PH_ENTRY:LIST_ITEM:'PHONE_NUMBER'
       '+1-234-567-8902':PH_ENTRY:LIST_ITEM:'PHONE_NUMBER'
       '+1-234-567-8903':PH_ENTRY:LIST_ITEM:'PHONE_NUMBER'
    )
without understanding the grammar rule names (which may be derived from
one of many standards and thus different for each grammar that contains
contact info) or the language (spanish) the data file was written in , it 
immediately undestands that it has a list of three
phone numbers and can dial a number if you click on it, can search
based on phone number, etc.   This won't convey everything there
is to know about the data to every tool.   It isn't enough
to perform automatic translations from one language to another
though common subsets may be translated or searched.  You can answer
questions like, what is Mark's email whether that information
was given to you in a vcard or a docbook manuscript, even
if you don't know which file the information is in.   These
could be organized in a hierarchy.   Thus, PHONE_NUMBER becomes
entity.contact.phone.   There is nothing ANTLR specific about
these secondary keywords, they deal with the general problem
of tagging descriptive information.   They could be used to derive XML tags,
used by search engines such as google, in database field descriptions, and 
a variety of other applications.

If we are going to use 'orthogonal' sloppily, I can also say that
hand coding parsers in C is more 'orthogonal' than writing parsers
in ANTLR because there will always be another language that
ANTLR can't parse.

So, yes, creating a compiler for a new language in some cases requires
defining a new tag and thus we have to add a tag definition NEWTAG to
the central repository.  In the mean time, we can use X_NEWTAG
during the discusion period.   There may not even be a need
to add the tag, in some cases.   If you are writing an C-INTERCAL
compiler, you just use X_COMEFROM_STATEMENT and be done with it as there
are few, if any, other programming languages that support COMEFROM.
Or you tag it INTERCAL_NONSTANDARD and the backend loads your
intercal_nonstandard.so plugin if it isn't, calls the nonstandard() 
method, passes a pointer to the tree node, the root of the tree, 
and options struct, and you code it the way you would have coded
it if you weren't using tags by just looking at the text of the
node.   The compiler backend itself doesn't need updating
because you can implement a comefrom by rewriting the tree and
converting it into a standard goto.

A lot of languages could be implemented without changing ANTLR+=2
or the compiler core just by doing tree rewrites.   If it is code
that is usable by other languages, then define a standard tag.

The process of defining a new tag could be to:
   - Post a new tag feature request on bugzilla, wiki, and/or a mailing
     list
   - wait 14 days for discussion, using X_NEWTAG in the interim.
   - submit your new tag definition to CVS/SVN/etc.
   - submit modifications to existing plugins, if any, to CVS
   - submit your plugin, if open source, to CVS.
I.E. it would be an internet mediated standards process with low
overhead.    You post a suggestion to add tags for "try/catch/raise",
someone writes back that try/catch/finally/raise would be better
and you code your plugin so it handles at least try/catch with
in a way that allows easy addition of finally if you don't
implement finally.

> The use of '+' as string concatenation operator is indeed bad, but not
> all languages have that use truly inbuilt. OO-Languages like C# employ
> operator overloading. In these cases I don't see your approach working.

Yep.   That could be coded as OPERATOR_ADD or OPERATOR_ADD_OR_CONCATENATE
or OPERATOR_ADD + AMBIGUOUS.
The first works as it goes through the normal operator overloading
mechanism.   The second or third sets would tip off tools that
are not compilers that something fishy might be going on.

You may need special handling if you allow constant initializers
with plugins:
    string foo="hello" + ", world";
A language that allows this, however, is likely to use the same
semantics as this in C:
    char foo[]="hello" ", world"
Thus the constant subexpression plugin can be expected to have a method
that implements this and you just need to TAG it or rewrite it in
your grammar file.


>> Users would define their own, nonstandard tags using the common "X_NAME()"
>> convention until the tags were standardized.
>
> This approach makes me shudder...

Why?   It works fine in many other areas.   Any language which can't
be extended is limited in its expressive power.

> I thought you could prevent while rewriting the loss of any information.
> In my view, you can save everything needed somewhere.

That may be but as far as I can see that isn't normal practice or
necessarily easy to do.
>
> I have to disagree there. Runtimes have always some specific ways to
> deal with problems - and those specifics don't only very in how they
> differ, but also where they differ. So I consider it far more work to
> make runtime translations automatically - without any human intervention
> afterwards - than to do it yourself by hand (except basic syntax
> translation).

So what?  Just because you use translation doesn't mean you can't
optimize or make changes.  You could substitute individual methods
in the generated code.  Even if it is harder at first, in the
long run it isn't and the solution may address other problems as well.
Maintaining five different implementations of the same code
is asking for trouble.   Maintaining 10 is worse.

Now, how well code translates depends on how you write the code.
If you write code that looks like C with classes, it can be fairly
easy.   If you use exceptions, it is harder to port to some
languages.   ANTLR code seems to use exceptions like crazy,
so much so that exceptions are the normal case, not the exceptions.
Without exceptions, the code might be say 20% larger.   With exceptions,
however, the code is 400% larger when you factor in the different 
languages.   While the source code is a bit larger if you don't
use exceptions, the object code isn't necessarily smaller or
faster - exception implementation can have a lot of overhead.
And exceptions have various semantic quirks.
    if(rc=match(...)==EXCEPTION) {
       // blah
    } else if(rc==SUCCESS) {
      // blah
    }
Optionally (if you care about sort order)
    else {if(rc==LESS_THAN) {
      // blah
    } else {if(rc==GREATER_THAN) {
      // blah
   }
Or:
    else {
      // blah
    }

Porting exception handling code to C looks kinda ugly and there
are a few surprises (like some local variables allocated to registers 
being returned to their previous state if not declared volatile.
    http://www.on-time.com/ddj0011.htm
    http://www.nicemice.net/cexcept/
But C isn't the only language porting exceptions can be an
issue as different languages have different quirks.


> Unicode handling makes case insensitivity more complicated. In Turkey
> the uppercase y isn't Y, but Y accented with ... whatever that accent
> is. In any case, you have to add locales. I know that .NET supports
> locales so at least there it may be easy to compare the input. But I
> don't know if the templates to generate the parser can be easily updated.

I deal with this at length in my case sensitivity post which I mentioned 
was forthcoming.  Short version is there is really much excuse for not 
creating the basic infrastruction and providing an ASCII implementation 
and you can substitute unicode methods that will work for a lot of unicode 
using existing libraries.  But if you want proper handling, you will have 
to abandon the notion of a string as an array of 8/16/32 bit characters 
and instead treat it as a string of variable length objects that you use 
standard library functions to sequence through, compare, etc.  For ASCII 
you can optimize by making your string methods inline and suffer very 
little performance penalty.  Full unicode support would be a gradual 
transition.  Would have been pretty easy to do in the ANTLR3 rewrite, 
probably much harder now.   Spend a couple hours skimming the unicode
standard and you have a pretty good idea what your string class should
look like.

>>   - selectively disallowing whitespace between tokens
>
> Something I did with checking the indices of the supposedly neighboring
> tokens (difference may be only one).

Target language and runtime specific but I might borrow that as a 
workaround until ANTLR is fixed.

>>   - choosing between multiple token rules that match the same input
>>     based on parser context.
>
> Can be done already. Just use for scanning a normal name (like "TILDE")
> and via rewriting and imaginary tokens you can get to
> "CONCATENATION[TILDE]".

Not sure exactly what you are saying but it sounds target language and
runtime specific.

>>   - communicating between parser rules/actions and lexer rules/actions
>>     - shared variables
>>     - arguments
>
> The situation right now: The Lexer is entirely separate from the parser.
> In fact the default implementation lexes everything before the parser
> sees the first token. Unfortunately, there are enough situations, where
> the parser HAS to tell the lexer something. Using globals isn't enough
> (scopes don't work because lexer and parser are in separate files and
> classes).

Yeah, I think we agree here.

>
> Which reminds me: Lexer tokens can't have arguments, unless they are
> fragment rules. I forgot the reason for this, but orthogonality-wise
> it's not a good decision, even so implementation-wise the reason may be
> sound.

Yes, this could be a pain to implement.  I can suggest a number of
reasons:
   - general absence of comunication between parser/lexer.
   - parser doesn't call lexer functions directly, but through
     a stream class that isn't yet flexible enough to communicate.
   - precomputed state machines
   - the need to purge lookahead token cache, etc. when changing
     values
   - a lot of optimizations may assume that the breakdown of text
     into tokens is constant regardless of context.
   - possible use of code that resembles
      if(get_token()==FOO)
    rather than
      if(match_token(FOO)
    You can add arguments to the second version and modify the meddling
    classes in between to pass the data through.

There are ways around this.    They aren't necessarily easy.  But I
have mentioned some of them.

>>   - selecting tree format, where more than one is supported.  AST vs Parse
>>     trees in this case.
>
> Not sure, what you mean here.

Actually, neither am I.  Must have been interrupted when I wrote that.

>>   - keyword abreviation
>>     (very common in command languages, a really bad idea to use in scripts
>>     written in those languages)
>
> In combination with case insensitivity? In any case, these feature has
> been requested already.

And they will keep being requested.  wheels don't get greased unless they 
squeak.  Not something I care that much about, myself, since I usually 
don't allow abreviation but it was an obvious case.


>>   - grammar include files
> That feature is supposed to be included in 3.1.

Thanks.   Glad to hear that.

>
>>   - operator precedence.
> I'm not sure, if that is a good idea or not...

No, it isn't a good idea, it is a great one.  :-)   It turns out
that there is a way of doing this that solves, or improves,  about
half a dozen problems at once.   Readabiity, writability, target
language independence, using multiple backends (LR/LL/GLR/recusive
descent/etc), portability between tools, ability to use grammar
files for non-parser purposes, information abstraction, etc.   See above.

>>   - access to parser class members from lexer actions, access
>>     to lexer class members from parser actions, and access to other
>>     utility classes from either.
>
> See a few comments above.

Here, I am not talking about passing arguments to rules but
rather communicating between lexer and parser actions.  If you
change the value of a predicate as a result, though you better
warn antlr so it can flush the cache and backtrack.

>>   - Non-finite input streams, streams larger than memory, and
>>     streams where not all data is immediately available
>>     (such as protocols).
>
> Definitively missing.

May not be that hard to add.   Although ANTLR's concept is
that if you give it a file it sucks the whole thing into a string
and works on the string and rather than copying characters from the
stream it uses pointers/indexes to reference them, it does
have the ability to rewrite token values.   Thus, token values
are not limited to coming from the content of the stream.
So, the implementation is probably functionally similar to:
    struct {
       char *source_string;
       int start_char;
       int num_chars;
       boolean_t free_it;
    }
Thus, copying the source instead of referencing it may be fairly easy to 
add.   However, you probably have to deal with with a tendancy to
read the same source more than once and thus may need a ring buffer
on the input which means you need to handle wrapping.

>>   - operator tokens defined by the user
>>     of a grammar, not the grammer itself.   Requires a runtime
>>     table lookup.   Multiple character operators "++" would be harder to
>>     implement, though possible.   This gets around, for example, the
>>     c++ limitation on defining new operators.
>>      U+2200 .. U+22FF (mathematical symbols) are prime candidates.
>>     as are U+0391..U+03A9 and U+03B1..U+03C9 (greek letters).
>
> Huh? At which step of a usual compiler development are the user supposed
> to add their new operators?

At no stage of compiler development.   The end-user declares their tokens
in the file being compiled.    This should not be as hard as it sounds
at first.   It means that each state of a state machine where this
token may be relevent consults a lookup table.  This will typically
affect a few special rules:
     NEW_OPERATOR_PRECEDENCE_1:  :new-token[1]: ;
     NEW_OPERATOR_PRECEDENCE_2:  :new-token[2]: ;
     NEW_OPERATOR_PRECEDENCE_3:  :new-token[3]: ;
     NEW_OPERATOR_PRECEDENCE_4:  :new-token[4]: ;
     ...
This gets tagged NEW_OPERATOR and the compiler back end takes advantage of 
the fact that it gets both tags and the original text.  Lexer states
just call is_new_operator(precedence, char_reference);  you arange 
things so these rules are called last.   Just a tad more and you
can define unary vs binary operators.  Presto, you
have the ability to use a whole bunch of new operators and define
their precedence.    http://www.unicode.org/charts/PDF/U2200.pdf

Making the changes to ANTLR grammar and lexer would be done at the
same time unicode property matching is added, so the marginal cost
is small.

>>   - layered parsing
>>     For example, You might layer an SVG parser on top of an XML parser.
>>     @include might be enough, then again it might not be.
>
> That could be done via another tree grammar after XML.

One problem here is that ANTLR currently doesn't let treeparsers
output trees.

> Unicode support isn't that good. I'd like to declare the use of
> character classes and to being capable to deal with characters beyond
> \uFFFF. It would make a lexer for C# very easy.

I will move comments to the case insensitivity/unicode post.

Thanks for your input.

From Waverly.Edwards at genesys.com  Sun Jan  6 19:46:22 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Sun, 6 Jan 2008 22:46:22 -0500
Subject: [antlr-interest] first and follow and lookahead
Message-ID: <FF993752CB890B4EB591BE5450C37BF1E40137@navamane001.ad.internal.corp>


Would someone direct me on how to extract the first and follow set from
a grammar.  I would like to extract this information purely for my
benefit and education.

Also, is there a way that ANTLR can tell me how far it has to look ahead
in the grammar to properly parse.


Thank you,


W.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080106/d0ecd7da/attachment.html 

From tbrandonau at gmail.com  Sun Jan  6 21:01:44 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Mon, 7 Jan 2008 16:01:44 +1100
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <E93FDA69-89D4-462D-B759-200FFD4B2F12@ucar.edu>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
	<20080101221342.9EDC6309C051@nscan2.ucar.edu>
	<991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>
	<ebc876d70801012134x54b88c15qf13bfc6767d3f704@mail.gmail.com>
	<2C7FFDD4-38BD-493C-8AB5-B794E339B1E1@ucar.edu>
	<20080102225926.804A3610C8B@nscan4.ucar.edu>
	<E93FDA69-89D4-462D-B759-200FFD4B2F12@ucar.edu>
Message-ID: <ebc876d70801062101w2eeff058s26546b1f2eb888f@mail.gmail.com>

On Jan 7, 2008 1:25 PM,  <siemsen at ucar.edu> wrote:
> Gavin,
>
> My comments inline...
>
> On Jan 2, 2008, at 3:59 PM, Gavin Lambert wrote:
>
> >> Would it be possible to inject a token into the token stream just
> >> before I switch to the include file and call reset?  In the
> >> PragmaInclude lexer rule, can I call "emit" to do it, and make the
> >> token contain the include file name?  I haven't done anything like
> >> this before, I just wonder if it's reasonable.
> >
> > Lexer operation is basically just calling nextToken to retrieve one
> > token at a time.  Calling emit sets the data for that token; not
> > calling it will lead to generating a default token based on all the
> > characters matched by the rule.
> >
> > I'm not really familiar with the Java runtime, so I'm not sure what
> > the reset call affects.  It might destroy an emit as well (and you
> > probably can't emit afterwards successfully either).  Still, it
> > could be worth a try.
> >
> > The rule must currently be returning *something*, though, since
> > every top-level lexer rule called must return a token.  Trace it
> > through with a debugger and see what's going on.
>
> I tried adding a call to emit right before the calls to setCharStream
> and reset.  As Thomas Brandon predicted, nothing happened, probably
> because the calls to setCharStream and reset destroy the token(s)
> created by the lexer rule.  I tried putting the call to emit right
> after the call to reset, even though that's not of much value to me -
> I want the parser to know the include file name before it sees tokens
> from the include file.
Putting it after the reset will still result in it coming out before
the included tokens.

> That generated this:
>
> Exception in thread "main" java.lang.ClassCastException:
> org.antlr.runtime.ClassicToken
>          at cimmof2javaLexer.nextToken(cimmof2javaLexer.java:111)
>          at org.antlr.runtime.CommonTokenStream.fillBuffer
> (CommonTokenStream.java:119)
>          at org.antlr.runtime.CommonTokenStream.LT
> (CommonTokenStream.java:238)
>          at cimmof2javaParser.mofSpecification(cimmof2javaParser.java:
> 141)
>          at cimmof2java.main(cimmof2java.java:24)
>
> Line 111 in cimmof2javaLexer.java is
>
>                 if (((CommonToken)token).getStartIndex() < 0)
>
> So when the token is cast to a CommonToken, boom.  I confess that I'm
> not sure how to handle this.  If you're still interested, it may help
> to see a current version of the grammar, which I've attached.
>
Yeah, the reset call wipes all the token variables so emit before hand
wont help. It looks like you should be able to call emit after the
reset call. It Iooks like the overloaded nextToken in the include
example skips the empty token that results when you switch lexers but
if a token is created after the reset it should return this. You
should be creating a CommonToken not a ClassicToken. Looks like it is
working fine otherwise.

> I'll start a new antlr-interest thread that focuses on the mechanism
> for handling include files.  I think the parser should see the tokens
> in the include statement, and that the tokens from the included file
> should appear after the tokens that represent the include statement
> itself.
>
Generally I don't think you would really want the include statement to
remain in the source file. The more typical method would be to use a
custom token subclass that stored the original file name. This might
be a better method for you as well. This saves you having to track the
filename of the last include file in the parser and means that the
original file name is always available for error messages and the
like.

Tom.

> Thanks for all your help!
>
> -- Pete
>
>
>
>

From firatkucuk at gmail.com  Sun Jan  6 23:25:38 2008
From: firatkucuk at gmail.com (=?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?=)
Date: Mon, 7 Jan 2008 09:25:38 +0200
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
Message-ID: <7385e6fe0801062325n52874779r35f5ff7a80ce25b7@mail.gmail.com>

NoViableAltException :(

i guess we cannot use syntactic predication over LEXER rules.


2008/1/7, Mark Volkmann <r.mark.volkmann at gmail.com>:
> On Jan 6, 2008 5:31 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> > yes i need it.
>
> I decided to take a shot at figuring out a solution to your grammar.
> It should be easy right. Terr already gave the hint that the problem
> is that it was greedily grabbing the DOT for FLOAT instead of leaving
> it for the separator between the number and the identifier. Piece of
> cake? Well I've tried several things I thought would work to no avail.
> Why in the world doesn't this work?
>
> grammar Sample;
>
> options {
>  backtrack = true; // I shouldn't need this, but I don't think it can hurt.
> }
>
> start
>  // Using a syntactic predicate to order alternatives.
>  : (INTEGER DOT IDENTIFIER)=> INTEGER DOT IDENTIFIER
>  | FLOAT DOT IDENTIFIER  ;
>
> FLOAT: NUMBER DOT NUMBER;
> INTEGER: NUMBER;
> IDENTIFIER: LETTER+;
> DOT: '.';
> fragment NUMBER: DIGIT+;
> fragment LETTER: 'a' .. 'z';
> fragment DIGIT: '0' .. '9';
>
> > 07.01.2008 tarihinde Mark Volkmann <r.mark.volkmann at gmail.com> yazm??:
> > > On Jan 6, 2008 5:23 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> > > > hi,
> > > > the problem is related to following grammar:
> > > >
> > > > grammar Sample;
> > > >
> > > > start: (FLOAT | INTEGER) DOT IDENTIFIER;
> > > >
> > > > FLOAT: NUMBER DOT NUMBER;
> > > > INTEGER: NUMBER;
> > > > IDENTIFIER: LETTER+;
> > > > DOT: '.';
> > > > fragment NUMBER: DIGIT+;
> > > > fragment LETTER: 'a' .. 'z';
> > > > fragment DIGIT: '0' .. '9';
> > > >
> > > > let us try:
> > > >
> > > > 3.hello
> > > >
> > > > result:
> > > > line 1:2 required (...)+ loop did not match anything at character 'h'
> > > > line 1:3 mismatched input 'ello' expecting set null
> > >
> > > I think it's trying to match a FLOAT which requires a number after the
> > > DOT. It should work if you change the start rule to this.
> > >
> > > start: INTEGER DOT IDENTIFIER;
> > >
> > > Do you really need to be able to parse something like this?
> > > 3.14.hello
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>


-- 
??r. G?r. F?rat K???k
ADAMYO Distance Learning
SAKARYA University / TURKEY

From antlr at mirality.co.nz  Sun Jan  6 23:57:43 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 07 Jan 2008 20:57:43 +1300
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.co
 m>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
Message-ID: <20080107075803.AB14811E9D0@www.antlr.org>

At 16:26 7/01/2008, Mark Volkmann wrote:
 >It should be easy right. Terr already gave the hint that the
 >problem is that it was greedily grabbing the DOT for FLOAT
 >instead of leaving it for the separator between the number
 >and the identifier. Piece of cake? Well I've tried several
 >things I thought would work to no avail.
 >Why in the world doesn't this work?
[...]
 > backtrack = true; // I shouldn't need this, but I don't think 
it
 >can hurt.

It's not going to help, either.  "backtrack = true" has no effect 
on the lexer.

 >FLOAT: NUMBER DOT NUMBER;
 >INTEGER: NUMBER;
 >IDENTIFIER: LETTER+;
 >DOT: '.';
 >fragment NUMBER: DIGIT+;
 >fragment LETTER: 'a' .. 'z';
 >fragment DIGIT: '0' .. '9';

This has been discussed to death before.  For reasons of 
performance (and some other obscure thing, I think), when 
processing a + loop ANTLR will use k=1 lookahead.  Thus when faced 
with the choice between FLOAT and INTEGER, it looks ahead to see 
at least one DIGIT and then says "ok, that's a FLOAT".  It doesn't 
look past all the DIGITs to see whether there's a DOT or 
not.  (Ter has said he might look into improving this a bit in a 
later version.)

Whenever there's a common prefix in your tokens, you will need to 
combine the rules to remove the ambiguity:

INTEGER
   : NUMBER
     ( /* nothing afterwards */
     | DOT NUMBER { $type = FLOAT; }
     )
   ;


From firatkucuk at gmail.com  Mon Jan  7 00:20:41 2008
From: firatkucuk at gmail.com (=?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?=)
Date: Mon, 7 Jan 2008 10:20:41 +0200
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <20080107075803.AB14811E9D0@www.antlr.org>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
Message-ID: <7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>

this is my simple solution:

the original sample grammar:
grammar Sample;

start           :  (FLOAT | INTEGER) DOT IDENTIFIER;

FLOAT           :  NUMBER DOT NUMBER;
INTEGER         :  NUMBER;
IDENTIFIER      :  LETTER+;
DOT             :  '.';
WHITESPACE      :  (' ' | '\t')+ {$channel = HIDDEN;};
fragment NUMBER :  DIGIT+;
fragment LETTER :  'a' .. 'z';
fragment DIGIT  :  '0' .. '9';

i can convert float lexer rule and integer lexer rule to parser rules
so i can use syntactic predication.


grammar Sample;

start
options {backtrack = true;}
	:  (floatLiteral | integerLiteral) DOT IDENTIFIER
	;

floatLiteral  	:	NUMBER DOT NUMBER;
integerLiteral  : NUMBER;
IDENTIFIER      :  LETTER+;
DOT             :  '.';
WHITESPACE      :  (' ' | '\t')+ {$channel = HIDDEN;};
NUMBER          :  DIGIT+;
fragment LETTER :  'a' .. 'z';
fragment DIGIT  :  '0' .. '9';


it parses:
3.hello
and
3.4.hello

but the new problem is :

it parses:  3   .   4   .  hello

float literals should be adjacent as in Java grammar.


2008/1/7, Gavin Lambert <antlr at mirality.co.nz>:
> At 16:26 7/01/2008, Mark Volkmann wrote:
>  >It should be easy right. Terr already gave the hint that the
>  >problem is that it was greedily grabbing the DOT for FLOAT
>  >instead of leaving it for the separator between the number
>  >and the identifier. Piece of cake? Well I've tried several
>  >things I thought would work to no avail.
>  >Why in the world doesn't this work?
> [...]
>  > backtrack = true; // I shouldn't need this, but I don't think
> it
>  >can hurt.
>
> It's not going to help, either.  "backtrack = true" has no effect
> on the lexer.
>
>  >FLOAT: NUMBER DOT NUMBER;
>  >INTEGER: NUMBER;
>  >IDENTIFIER: LETTER+;
>  >DOT: '.';
>  >fragment NUMBER: DIGIT+;
>  >fragment LETTER: 'a' .. 'z';
>  >fragment DIGIT: '0' .. '9';
>
> This has been discussed to death before.  For reasons of
> performance (and some other obscure thing, I think), when
> processing a + loop ANTLR will use k=1 lookahead.  Thus when faced
> with the choice between FLOAT and INTEGER, it looks ahead to see
> at least one DIGIT and then says "ok, that's a FLOAT".  It doesn't
> look past all the DIGITs to see whether there's a DOT or
> not.  (Ter has said he might look into improving this a bit in a
> later version.)
>
> Whenever there's a common prefix in your tokens, you will need to
> combine the rules to remove the ambiguity:
>
> INTEGER
>    : NUMBER
>      ( /* nothing afterwards */
>      | DOT NUMBER { $type = FLOAT; }
>      )
>    ;
>
>


-- 
??r. G?r. F?rat K???k
ADAMYO Distance Learning
SAKARYA University / TURKEY

From laguest at archeia.com  Mon Jan  7 01:21:12 2008
From: laguest at archeia.com (Luke A. Guest)
Date: Mon, 07 Jan 2008 09:21:12 +0000
Subject: [antlr-interest] first and follow and lookahead
In-Reply-To: <FF993752CB890B4EB591BE5450C37BF1E40137@navamane001.ad.internal.corp>
References: <FF993752CB890B4EB591BE5450C37BF1E40137@navamane001.ad.internal.corp>
Message-ID: <1199697672.5981.3.camel@rogue>

On Sun, 2008-01-06 at 22:46 -0500, Edwards, Waverly wrote:
> 
> Would someone direct me on how to extract the first and follow set
> from a grammar.  I would like to extract this information purely for
> my benefit and education.

This is shown in all undergraduate compiler text books.
> 
Luke.



From r.mark.volkmann at gmail.com  Mon Jan  7 04:12:08 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 7 Jan 2008 06:12:08 -0600
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
Message-ID: <f0fcc6820801070412g11a439cbmb70061c620b9130e@mail.gmail.com>

On Jan 7, 2008 2:20 AM, F?rat K???k <firatkucuk at gmail.com> wrote:
> this is my simple solution:
>
> the original sample grammar:
> grammar Sample;
>
> start           :  (FLOAT | INTEGER) DOT IDENTIFIER;
>
> FLOAT           :  NUMBER DOT NUMBER;
> INTEGER         :  NUMBER;
> IDENTIFIER      :  LETTER+;
> DOT             :  '.';
> WHITESPACE      :  (' ' | '\t')+ {$channel = HIDDEN;};
> fragment NUMBER :  DIGIT+;
> fragment LETTER :  'a' .. 'z';
> fragment DIGIT  :  '0' .. '9';
>
> i can convert float lexer rule and integer lexer rule to parser rules
> so i can use syntactic predication.
>
>
> grammar Sample;
>
> start
> options {backtrack = true;}
>         :  (floatLiteral | integerLiteral) DOT IDENTIFIER
>         ;
>
> floatLiteral    :       NUMBER DOT NUMBER;
> integerLiteral  : NUMBER;
> IDENTIFIER      :  LETTER+;
> DOT             :  '.';
> WHITESPACE      :  (' ' | '\t')+ {$channel = HIDDEN;};
> NUMBER          :  DIGIT+;
> fragment LETTER :  'a' .. 'z';
> fragment DIGIT  :  '0' .. '9';
>
>
> it parses:
> 3.hello
> and
> 3.4.hello
>
> but the new problem is :
>
> it parses:  3   .   4   .  hello
>
> float literals should be adjacent as in Java grammar.

I think you just need to not send space characters to the hidden
channel. That worked for me. Of course that means that for other rules
you're going to have to specify exactly where whitespace is allowed
which may be tedious. Maybe someone will offer a better solution.

> 2008/1/7, Gavin Lambert <antlr at mirality.co.nz>:
> > At 16:26 7/01/2008, Mark Volkmann wrote:
> >  >It should be easy right. Terr already gave the hint that the
> >  >problem is that it was greedily grabbing the DOT for FLOAT
> >  >instead of leaving it for the separator between the number
> >  >and the identifier. Piece of cake? Well I've tried several
> >  >things I thought would work to no avail.
> >  >Why in the world doesn't this work?
> > [...]
> >  > backtrack = true; // I shouldn't need this, but I don't think
> > it
> >  >can hurt.
> >
> > It's not going to help, either.  "backtrack = true" has no effect
> > on the lexer.
> >
> >  >FLOAT: NUMBER DOT NUMBER;
> >  >INTEGER: NUMBER;
> >  >IDENTIFIER: LETTER+;
> >  >DOT: '.';
> >  >fragment NUMBER: DIGIT+;
> >  >fragment LETTER: 'a' .. 'z';
> >  >fragment DIGIT: '0' .. '9';
> >
> > This has been discussed to death before.  For reasons of
> > performance (and some other obscure thing, I think), when
> > processing a + loop ANTLR will use k=1 lookahead.  Thus when faced
> > with the choice between FLOAT and INTEGER, it looks ahead to see
> > at least one DIGIT and then says "ok, that's a FLOAT".  It doesn't
> > look past all the DIGITs to see whether there's a DOT or
> > not.  (Ter has said he might look into improving this a bit in a
> > later version.)
> >
> > Whenever there's a common prefix in your tokens, you will need to
> > combine the rules to remove the ambiguity:
> >
> > INTEGER
> >    : NUMBER
> >      ( /* nothing afterwards */
> >      | DOT NUMBER { $type = FLOAT; }
> >      )
> >    ;
> >
> >
>
>
>
> --
> ??r. G?r. F?rat K???k
> ADAMYO Distance Learning
> SAKARYA University / TURKEY
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From antlr at mirality.co.nz  Mon Jan  7 04:24:56 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 08 Jan 2008 01:24:56 +1300
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.co
 m>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
Message-ID: <20080107122512.6C29A11ECBA@www.antlr.org>

At 21:20 7/01/2008, =?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?= wrote:
 >
 >this is my simple solution:

It's not a solution if it doesn't work :)

Try doing what I suggested.  You really should handle the floats 
in the lexer, since you don't have to worry about whitespace 
weirdness that way.  And if you do it the way I said, it should 
work.


From r.mark.volkmann at gmail.com  Mon Jan  7 07:13:33 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 7 Jan 2008 09:13:33 -0600
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <47821a29.0622300a.4165.ffff8ed1SMTPIN_ADDED@mx.google.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
	<47821a29.0622300a.4165.ffff8ed1SMTPIN_ADDED@mx.google.com>
Message-ID: <f0fcc6820801070713radd3474r5f76f7dcfb59c2f9@mail.gmail.com>

On Jan 7, 2008 6:24 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 21:20 7/01/2008, =?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?= wrote:
>  >
>  >this is my simple solution:
>
> It's not a solution if it doesn't work :)
>
> Try doing what I suggested.  You really should handle the floats
> in the lexer, since you don't have to worry about whitespace
> weirdness that way.  And if you do it the way I said, it should
> work.

I think this is what you want or at least really close.

grammar Sample;

start
  options { backtrack = true; }
  : (floatValue | integerValue) DOT IDENTIFIER
    { System.out.println("matched!"); }
  ;

floatValue: NUMBER DOT NUMBER;
integerValue: NUMBER;

DOT: '.';
IDENTIFIER: LETTER+;
NUMBER: DIGIT+;
fragment LETTER: 'a'..'z';
fragment DIGIT: '0'..'9';

NEWLINE: '\r'? '\n' { skip(); };

-- 
R. Mark Volkmann
Object Computing, Inc.

From spoulson3 at yahoo.com  Mon Jan  7 08:14:21 2008
From: spoulson3 at yahoo.com (Shawn Poulson)
Date: Mon, 7 Jan 2008 08:14:21 -0800 (PST)
Subject: [antlr-interest] Value types - can't be set to null in C#
Message-ID: <600574.48424.qm@web30605.mail.mud.yahoo.com>

Hello,

Now that I've gotten setup on using ANTLR, I found a small snag that
doesn't seem to be mentioned in the Wiki or Google for that matter.

I'm building a grammar that parses a datetime string and returns a
DateTime object in C#.  So far the grammar looks like:

----- 8< ----- 8< -----
prog: dt=datetime {Debug.WriteLine("datetime=" +
$dt.value.ToString());};

datetime returns [DateTime value]:
   (h=hour24 {Debug.WriteLine("hour24=" + $h.value.ToString());}
   ':' m=minute {Debug.WriteLine("minute=" + $m.value.ToString());}
   ':' s=second {Debug.WriteLine("second=" + $s.value.ToString());}
   '.' ms=millisecond {Debug.WriteLine("millisecond=" +
$ms.value.ToString());})
   {
      $value = new DateTime(2008, 1, 4, $h.value, $m.value, $s.value,
$ms.value);
   };
      

hour24 returns [int value]:
   INT {$value = int.Parse($INT.text);};

minute returns [int value]:
   INT {$value = int.Parse($INT.text);};

second returns [int value]:
   INT {$value = int.Parse($INT.text);};

millisecond returns [int value]:
   INT {$value = int.Parse($INT.text);};

INT: '0'..'9'+;
WS: (' '|'\t'|'\r\n'|'\r')+ { $channel = HIDDEN; };
----- 8< ----- 8< -----

It generates ok with ANTLR, but when I compile in Visual Studio 2005 I
get two identical errors for "prog" and "datetime" rules:

"Cannot convert null to 'System.DateTime' because it is a value type"

One of the offending lines is:
---- 8< ----- 8< -----
    public void prog() // throws RecognitionException [1]
    {   
        DateTime dt = null;
...
---- 8< ----- 8< -----

Is there a way I can set the initialization to be something arbitrary,
like DateTime.Now?

Thanks.

---
Shawn Poulson
spoulson at explodingcoder.com

From harald_m_mueller at gmx.de  Mon Jan  7 08:18:07 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Mon, 07 Jan 2008 17:18:07 +0100
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <600574.48424.qm@web30605.mail.mud.yahoo.com>
References: <600574.48424.qm@web30605.mail.mud.yahoo.com>
Message-ID: <20080107161807.298890@gmx.net>

datetime returns [DateTime value = DateTime.Now]

-------- Original-Nachricht --------
> Datum: Mon, 7 Jan 2008 08:14:21 -0800 (PST)
> Von: Shawn Poulson <spoulson3 at yahoo.com>
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Value types - can\'t be set to null in C#

> Hello,
> 
> Now that I've gotten setup on using ANTLR, I found a small snag that
> doesn't seem to be mentioned in the Wiki or Google for that matter.
> 
> I'm building a grammar that parses a datetime string and returns a
> DateTime object in C#.  So far the grammar looks like:
> 
> ----- 8< ----- 8< -----
> prog: dt=datetime {Debug.WriteLine("datetime=" +
> $dt.value.ToString());};
> 
> datetime returns [DateTime value]:
>    (h=hour24 {Debug.WriteLine("hour24=" + $h.value.ToString());}
>    ':' m=minute {Debug.WriteLine("minute=" + $m.value.ToString());}
>    ':' s=second {Debug.WriteLine("second=" + $s.value.ToString());}
>    '.' ms=millisecond {Debug.WriteLine("millisecond=" +
> $ms.value.ToString());})
>    {
>       $value = new DateTime(2008, 1, 4, $h.value, $m.value, $s.value,
> $ms.value);
>    };
>       
> 
> hour24 returns [int value]:
>    INT {$value = int.Parse($INT.text);};
> 
> minute returns [int value]:
>    INT {$value = int.Parse($INT.text);};
> 
> second returns [int value]:
>    INT {$value = int.Parse($INT.text);};
> 
> millisecond returns [int value]:
>    INT {$value = int.Parse($INT.text);};
> 
> INT: '0'..'9'+;
> WS: (' '|'\t'|'\r\n'|'\r')+ { $channel = HIDDEN; };
> ----- 8< ----- 8< -----
> 
> It generates ok with ANTLR, but when I compile in Visual Studio 2005 I
> get two identical errors for "prog" and "datetime" rules:
> 
> "Cannot convert null to 'System.DateTime' because it is a value type"
> 
> One of the offending lines is:
> ---- 8< ----- 8< -----
>     public void prog() // throws RecognitionException [1]
>     {   
>         DateTime dt = null;
> ...
> ---- 8< ----- 8< -----
> 
> Is there a way I can set the initialization to be something arbitrary,
> like DateTime.Now?
> 
> Thanks.
> 
> ---
> Shawn Poulson
> spoulson at explodingcoder.com

-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From Sebastian.Kaliszewski at softax.com.pl  Mon Jan  7 08:44:31 2008
From: Sebastian.Kaliszewski at softax.com.pl (Sebastian Kaliszewski)
Date: Mon, 07 Jan 2008 17:44:31 +0100
Subject: [antlr-interest] C++ parser generator
In-Reply-To: <6b332d3d0801030703u62c694bagf07ff329f44d8cf3@mail.gmail.com>
References: <6b332d3d0801030703u62c694bagf07ff329f44d8cf3@mail.gmail.com>
Message-ID: <478256EF.30800@softax.com.pl>

John Gunnarsson wrote:
> Recently I discovered the need for a parser generator, tried flex/bison 
> but disliked it since it isn't really made for generating c++ code.
> Is it possible to generate a c++ generator with antlrv3 (or any other 
> version of antlr)? cant find much documentation about it, the wiki is 
> only containg info about the C parser generator, as far as i could see.

Try version 2.7.7 (www.antlr2.org), there is fully fledged C++ generator

rgds
\SK

From Waverly.Edwards at genesys.com  Mon Jan  7 08:38:53 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Mon, 7 Jan 2008 11:38:53 -0500
Subject: [antlr-interest] first and follow and lookahead
In-Reply-To: <1199697672.5981.3.camel@rogue>
References: <FF993752CB890B4EB591BE5450C37BF1E40137@navamane001.ad.internal.corp>
	<1199697672.5981.3.camel@rogue>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1E401D5@navamane001.ad.internal.corp>

 
Yes Sir, I have seen explanations of first and follow.
What I would really like to know is if I can obtain
through ANTLR an output of first and follow sets.

I apologize for being unclear in my request.


Thank you,


W.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Luke A. Guest
Sent: Monday, January 07, 2008 4:21 AM
To: ANTR Interest
Subject: Re: [antlr-interest] first and follow and lookahead

On Sun, 2008-01-06 at 22:46 -0500, Edwards, Waverly wrote:
> 
> Would someone direct me on how to extract the first and follow set 
> from a grammar.  I would like to extract this information purely for 
> my benefit and education.

This is shown in all undergraduate compiler text books.
> 
Luke.



From siemsen at ucar.edu  Mon Jan  7 08:45:03 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Mon, 7 Jan 2008 09:45:03 -0700
Subject: [antlr-interest] passing stuff from lexer to parser
In-Reply-To: <ebc876d70801062101w2eeff058s26546b1f2eb888f@mail.gmail.com>
References: <69BD6239-B561-4FB7-BEE0-08CBF4DC38EA@ucar.edu>
	<20080101221342.9EDC6309C051@nscan2.ucar.edu>
	<991008BF-4D97-4B1B-A4E6-E43EC2F7F605@ucar.edu>
	<ebc876d70801012134x54b88c15qf13bfc6767d3f704@mail.gmail.com>
	<2C7FFDD4-38BD-493C-8AB5-B794E339B1E1@ucar.edu>
	<20080102225926.804A3610C8B@nscan4.ucar.edu>
	<E93FDA69-89D4-462D-B759-200FFD4B2F12@ucar.edu>
	<ebc876d70801062101w2eeff058s26546b1f2eb888f@mail.gmail.com>
Message-ID: <7973C7BB-D48D-4A24-95AF-39B227E3F877@ucar.edu>

On Jan 6, 2008, at 10:01 PM, Thomas Brandon wrote:

> On Jan 7, 2008 1:25 PM,  <siemsen at ucar.edu> wrote:
>> Gavin,
>>
>> My comments inline...
>>
>> On Jan 2, 2008, at 3:59 PM, Gavin Lambert wrote:
>>
>>>> Would it be possible to inject a token into the token stream just
>>>> before I switch to the include file and call reset?  In the
>>>> PragmaInclude lexer rule, can I call "emit" to do it, and make the
>>>> token contain the include file name?  I haven't done anything like
>>>> this before, I just wonder if it's reasonable.
>>>
>>> Lexer operation is basically just calling nextToken to retrieve one
>>> token at a time.  Calling emit sets the data for that token; not
>>> calling it will lead to generating a default token based on all the
>>> characters matched by the rule.
>>>
>>> I'm not really familiar with the Java runtime, so I'm not sure what
>>> the reset call affects.  It might destroy an emit as well (and you
>>> probably can't emit afterwards successfully either).  Still, it
>>> could be worth a try.
>>>
>>> The rule must currently be returning *something*, though, since
>>> every top-level lexer rule called must return a token.  Trace it
>>> through with a debugger and see what's going on.
>>
>> I tried adding a call to emit right before the calls to setCharStream
>> and reset.  As Thomas Brandon predicted, nothing happened, probably
>> because the calls to setCharStream and reset destroy the token(s)
>> created by the lexer rule.  I tried putting the call to emit right
>> after the call to reset, even though that's not of much value to me -
>> I want the parser to know the include file name before it sees tokens
>> from the include file.
> Putting it after the reset will still result in it coming out before
> the included tokens.
>
>> That generated this:
>>
>> Exception in thread "main" java.lang.ClassCastException:
>> org.antlr.runtime.ClassicToken
>>          at cimmof2javaLexer.nextToken(cimmof2javaLexer.java:111)
>>          at org.antlr.runtime.CommonTokenStream.fillBuffer 
>> (CommonTokenStream.java:119)
>>          at org.antlr.runtime.CommonTokenStream.LT 
>> (CommonTokenStream.java:238)
>>          at cimmof2javaParser.mofSpecification 
>> (cimmof2javaParser.java:141)
>>          at cimmof2java.main(cimmof2java.java:24)
>>
>> Line 111 in cimmof2javaLexer.java is
>>
>>                 if (((CommonToken)token).getStartIndex() < 0)
>>
>> So when the token is cast to a CommonToken, boom.  I confess that I'm
>> not sure how to handle this.  If you're still interested, it may help
>> to see a current version of the grammar, which I've attached.
>>
> Yeah, the reset call wipes all the token variables so emit before hand
> wont help. It looks like you should be able to call emit after the
> reset call. It Iooks like the overloaded nextToken in the include
> example skips the empty token that results when you switch lexers but
> if a token is created after the reset it should return this. You
> should be creating a CommonToken not a ClassicToken. Looks like it is
> working fine otherwise.

Yep, creating a CommonToken instead of a ClassicToken fixed it.
THANKS!

>> I'll start a new antlr-interest thread that focuses on the mechanism
>> for handling include files.  I think the parser should see the tokens
>> in the include statement, and that the tokens from the included file
>> should appear after the tokens that represent the include statement
>> itself.
>>
> Generally I don't think you would really want the include statement to
> remain in the source file. The more typical method would be to use a
> custom token subclass that stored the original file name. This might
> be a better method for you as well. This saves you having to track the
> filename of the last include file in the parser and means that the
> original file name is always available for error messages and the
> like.
>
> Tom.

Perhaps this would be better, but for now I'll just track the include
filename in the parser.

Thanks again!

-- Pete

From siemsen at ucar.edu  Mon Jan  7 08:48:27 2008
From: siemsen at ucar.edu (siemsen at ucar.edu)
Date: Mon, 7 Jan 2008 09:48:27 -0700
Subject: [antlr-interest] how to tweak the handling of include files
In-Reply-To: <CD77C41B-5F42-430B-B681-9B98051EC586@ucar.edu>
References: <CD77C41B-5F42-430B-B681-9B98051EC586@ucar.edu>
Message-ID: <17A003A0-6093-4B25-8071-52C342257102@ucar.edu>

Thomas Brandon provided a working answer to this.   Moving the call  
to "emit" after the call to "reset" allows the emitted token to be  
seen by the parser.  Thanks Thomas!

-- Pete

On Jan 6, 2008, at 7:37 PM, siemsen at ucar.edu wrote:

> I'm parsing some "include" statements using the code suggested by  
> the ANTLR Wiki page entitled "How do I implement include files?" at  
> http://www.antlr.org/wiki/pages/viewpage.action?pageId=557057.  It  
> works but for one thing.  The code executes in the lexer, and  
> quietly replaces the include statement with tokens representing the  
> contents of the include file.  This is expocted, but no tokens  
> representing the include statement itself get into the token  
> stream.  The include statement itself is "lost".
>
> Is there any way for the parser to see the name of the include  
> file?  I want it for a problem specific to the files I'm parsing,  
> but I can imagine a more general case where the the parser might  
> want to report the name of the include file in error messages or  
> something.
>
> I tried inserting an "emit" call into the code to explicitly emit a  
> token containing the file name, but the following calls to  
> setCharStream and reset eat the resulting token, so the parser  
> never sees it.
>
> -- Pete
>


From damien.internet at gmail.com  Mon Jan  7 08:25:59 2008
From: damien.internet at gmail.com (Damien)
Date: Mon, 07 Jan 2008 17:25:59 +0100
Subject: [antlr-interest] Beginner questions
Message-ID: <47825297.3080900@gmail.com>

Hello,

I'm new to Antlr but I have already bought the book and done some 
reading and practicing using ANTLRWorks 1.1.5.
I have written a simple grammar (for simple maths, including function 
calls) which compiles. The grammar requires the option "backtrack=true".
I have 3 questions:

1) My grammar runs fine on the input "d+f(-2)" but the interpreter fails 
with "FailedPredicateException". Is "backtrack=true" impossible in 
interpreted mode?

2) Using the debugger on the input "d+f(-2)", the part of the parse tree 
from atom > functionExpr > .. appears in double, the one on the left 
being green. I can't find what that means.

3) I'm using java as the target language. I can't find how the access 
the parse tree, only the AST with the option output=AST.


Thank you,

damien


grammar Expr;

options { output=AST; k=2; backtrack=true; }

prog    :    stmt+;

stmt    :    expr NEWLINE
    ;
   
expr    :    addExpr;

addExpr    :    '-'? (atom | mulExpr) (('+' | '-') (atom | mulExpr))*
    ;
   
mulExpr    :    atom (('*' | '/') atom)+
    ;
   
parExpr    :    '(' expr ')'
    ;

functionExpr
    :    ID '(' expr (',' expr)* ')'
    ;

atom    :    INT | ID | functionExpr | parExpr
    ;
   
ID    :    ('a'..'z')+;
INT    :    '0'..'9'+;
NEWLINE    :    '\r'? '\n';
WS    :    (' ')+ {skip();};

From jimi at temporal-wave.com  Mon Jan  7 09:55:36 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 7 Jan 2008 09:55:36 -0800
Subject: [antlr-interest] Threadsafe C parser
In-Reply-To: <6b332d3d0801061426k552d8da0y52f6ff3fc2617c74@mail.gmail.com>
Message-ID: <"LD1A8DDB9011A45158ABF3C9D31374B7D.1199729190.scalix.temporal-wave.com*"@MHS>

There are no static allocations and no threading issues with the C
stuff. @members I meant for additional functions and so on, not for
variable declarations.

 

You will find that your @context declarations appear in the per instance
structure for the compiler and not in any static area. However, the
userp variable is also another way to do it if the things you want to
instantiate are more complicated than the odd int/Boolean etc.

 

All rules and elements in the generated code have access to the ctx->
(context pointer) for the parser/tree parser, etc. 

 

See past posts for details of the @area in the C target (which should
become a wiki article really), but in short:

 

@lexer::context

{

       pMVB_PARSE_SESSION         ps;                        // MVB
compiler session context for lexer

       ANTLR3_BOOLEAN                    haveHeader;          // Set to
TRUE once we have seen a PROGRAM or SUBROUTINE

}

 

@parser::context

{

       pMVB_PARSE_SESSION  ps;                  // MVB compiler session
context for parser

}

 

In your rules you are then guaranteed to have ctx-> and can do this in
the action:

 

ctx->haveHeader = true.

 

If you use the userp element you can divorce the specifics of your
additional ?thing? from the grammar somewhat. You would use this when
the grammar rules and so on don?t actually care anything about what is
there. For instance maybe there is a structure you carry around for
error reporting and you need it available from the parser instance you
will be passed in the error routine. But it was just put there to give
people a choice and in general I would use the @context stuff which
works very neatly.

 

Jim

 

 

  _____  

From: John Gunnarsson [mailto:mailing.list.recipient at gmail.com] 
Sent: Sunday, January 06, 2008 2:27 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Threadsafe C parser

 

Since C isn't object oriented, declarations in the grammar's member area
is static this is not a viable option to store data and build a thread
safe parser.
Could I store data per parser somehow?
Is this the place:
http://www.antlr.org/api/C/struct_a_n_t_l_r3___b_a_s_e___r_e_c_o_g_n_i_z
_e_r__struct.html#d2f3309b604f5433e1480337b764c2da 
ANTLR3_BASE_RECOGNIZER_struct::userp ?

If so, how can I reach it from within a grammar action?

//John




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080107/4d06b3c9/attachment.html 

From parrt at cs.usfca.edu  Mon Jan  7 10:36:37 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 10:36:37 -0800
Subject: [antlr-interest] soliciting language recipes book outline
	feedback
In-Reply-To: <598864c70712312135k36f330eama622a1e2d530072c@mail.gmail.com>
References: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
	<598864c70712312135k36f330eama622a1e2d530072c@mail.gmail.com>
Message-ID: <73F42D67-BA9B-433A-A0A5-9B72BB29DAF7@cs.usfca.edu>


On Dec 31, 2007, at 9:35 PM, Monty Zukowski wrote:

> How about C's typedef?  That's always fun.

Yes, I think some kind of nasty context-sensitive parsing is in order.  
added.

> I'm also really happy with my little expression language which
> generates Java code.  All operators and functions are stored in the
> tree as functions, and the functions themselves are defined in a
> separate file as snippets of ST templates.  I think that would be a
> good little recipe, we can chat further about it if you like.  Sample:
>
> expression:  a+b
> grammar: addition!: x:atom PLUS y:atom {##=#[#(FUNCTION, "add:2"),  
> x, y];}
> tree: (FUNCTION "add:2" a b)
> function definition: add($x, $y) ::= <<$x + $y>>
> alternate function definition for BigIntegers: add($x, $y) ::= << 
> $x.add($y)>>

So the function "name" dictates which template to load?

> Also fun is handling multiple grammars.  For instance our expression
> language is mainly for generating strings, so we have a templating
> kind of grammar:
>
> {$interpreted_variable} some static text followed by
> {$another_variable + $yet_another}
>
> One grammar breaks it into chunks of either static text or code.  If
> it is code it calls the expression grammar on the contents.  Must be
> similar to the string template grammar.

Or any other island grammar.  I have that as one of the recipes.  
probably need to kinds: lexically identified and grammatically  
identified

Thanks!

Ter
> On Dec 31, 2007 1:52 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> Howdy folks,
>>
>> I've signed up to do another book for pragmatic programmers.  This
>> time I'm going to do a collection of "how to" examples/recipes.  The
>> book is meant to teach you how to fish not give you fish--the  
>> examples
>> will be necessarily smallish. I anticipate the level being
>> introductory through intermediate as real, big examples will simply
>> not fit. I'd like to start out with really brain-dead examples such  
>> as
>> comma separated value parsing so that I can explain the fundamentals.
>> I will always remember the first technical book I read (on 6502
>> assembly code code by Lance Levanthal).  This awesome book started  
>> out
>> showing how to clear a memory location. This gave me the confidence
>> that I might actually understand the rest of the book :)
>>
>> I propose breaking the book up into three main sections: parsing,
>> interpretation, translation. I would love to hear peoples feedback
>> about what examples would be useful and exciting.  Keep in mind that
>> the average example will need to fit in about 5 to 10 pages. Code
>> samples will be made available online and not necessarily completely
>> printed out in the book to save space. Also I would love to hear your
>> feedback about how the recipes should be laid out or described.
>>
>> Please CC Susannah Pfalzer, with whom I'm fortunate to work with
>> again, on your replies as she is not a member of this list. :)
>>
>> Here is my rough draft list of examples, which is a bit too few.
>> Thanks and happy new year!
>>
>> Ter
>> ------------
>> I. Parsing recipes
>>        comma-separated values (show in java then python or ruby  
>> then ANTLR)
>>        parsing binary data (fixed and non-fixed size records)
>>        parsing log files (in awk/sed/grep then ANTLR)
>>        configuration file or JSON or YAML
>>        text-based network protocol (e.g., POP, nntp, http)
>>        graphs and networks via edge list format
>>        read fixed a XML format like:
>>                SVG (vector graphics)
>>                or, RDF ontology graph
>>        handling include files
>>        parsing island grammars like JSP
>>        simplified English imperative statement recognizer
>>                (E.g., games: "pick up gun and shoot spy")
>>
>> II. Interpretation recipes
>>        arithmetic expression trees
>>        polynomial differentiation
>>        query language (parse and pull data from DB)
>>        serial/deserialize objects
>>        partial PS interpreter
>>        simple programming language interpreter
>>
>> III. Translation recipes
>>        wiki to HTML
>>        simplified programming language pretty printer
>>        instrumenting simplified programming language with profiling  
>> info
>>        simple Java byte code generator
>>        simple robot control language for lego MindStorm robots
>>        class hierarchy generator (awk/sed/grep then grep+ANTLR)
>>                generates DOT format for graphviz to visualize
>>


From parrt at cs.usfca.edu  Mon Jan  7 10:39:48 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 10:39:48 -0800
Subject: [antlr-interest] soliciting language recipes book outline
	feedback
In-Reply-To: <20080101103931.5B8C911ECEE@www.antlr.org>
References: <20080101103931.5B8C911ECEE@www.antlr.org>
Message-ID: <1A0196B1-27B3-4CB1-A74E-62E8A5639A0F@cs.usfca.edu>


On Jan 1, 2008, at 2:39 AM, Harald M. M?ller wrote:

> Hi -
>
> At minimum, I would require that there are two solutions for many (?  
> - a few
> important) of the examples. In the real world, there is not "the  
> solution."
> (and of course, not both/more solutions need to be done down to  
> code ... but
> there should - like in any good patterns book - be enough meat so  
> that the
> problems are made clear when solving one over the other solution;  
> I'm very
> convinced that there is never ever a "perfect solution" in your  
> business).

Yes, I think that is a good idea to at least discuss the different  
approaches with their various benefits and disadvantages.

> Just to lay out that "design space" a little: Whether you
>
> * do your work in the parser;
> * create an AST and do your work there;
> * create an AST, rewrite in to another AT, do your work there;
> * create a complete different structure (e.g. a flow graph [think  
> "byte
> code"]) to do your work;
> * create an AST, the create the different structure and do your work  
> there;

Yup, though we had to be careful not to write a textbook; I'm doing  
that one next :)

> Before I ever start laying out a grammar, I write down this design  
> space for
> a tool - which sometimes results in creating an AST at a time where  
> this
> seems "way to complicated" - but I know it will help with that "tiny
> language extension" they are already talking about ... or the  
> opposite:

yup

> Seeing that a generalization (even a small one) requires much work,  
> I reduce
> the machine to a "small one" (and will bill the customer for the  
> large one
> when he really claims to need it ...).

ha! :)

> Second, there should probably be advice on when/where to stop using  
> ANTLR.

Yeah, I wanted to do a number of things was just code and with awk/sed  
and with Python or Ruby.

> The two "boundaries" that right now come to mind are
> * XML - you can do something with ANTLR here (see a few great Wiki  
> entries),
> but of course there are lots of XML-specific technologies;
> * rewriting - when a rewriting solution is going to become a  
> "calculus,"
> other tools (one was mentioned here a few days ago ...) might be a  
> better
> choice - but why?
>
> .... just my two cents (also why I find today's wiki entries  
> somewhat ad-hoc
> ...).

  thanks for the feedback Harald!
Ter

From parrt at cs.usfca.edu  Mon Jan  7 10:42:02 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 10:42:02 -0800
Subject: [antlr-interest] soliciting language recipes book outline
	feedback
In-Reply-To: <82dc0d190801021000m7fa9b474xe3b71fc8b33b9023@mail.gmail.com>
References: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
	<82dc0d190801021000m7fa9b474xe3b71fc8b33b9023@mail.gmail.com>
Message-ID: <CE68DC1A-52A0-45CB-AF34-60E7EB5E2FBB@cs.usfca.edu>


On Jan 2, 2008, at 10:00 AM, Tom Smith wrote:

> In the section on Translation recipes, I would love to see an  
> outline of a multi-pass translator (e.g., to support semantic  
> checks).  IMHO, I've seen great support for grammars (in the book,  
> on this list, on the wiki), but there is much less material  
> addressing the overall structure of applications.

True, although we cannot go into too much detail without writing a  
different book.  I think each recipe should provide a nice outline of  
the procedure. Abstracting all of these procedures into a decision  
tree will be the subject of my textbook.

> As an example, after a lot of searching, I found a message from 2005  
> in the archive of this list that I have used as a model for a multi- 
> pass translator:
>
> http://www.antlr.org/pipermail/antlr-interest/2005-June/012788.html
>
> This, or more recent rethinking of such approaches, could be a great  
> help as a how-to entry.

Cool.  Added "Designing grammars for reuse." to the outline.

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080107/ce8ef173/attachment-0001.html 

From myeates at jpl.nasa.gov  Mon Jan  7 10:58:31 2008
From: myeates at jpl.nasa.gov (Mathew Yeates)
Date: Mon, 07 Jan 2008 10:58:31 -0800
Subject: [antlr-interest] book, online doc discrepancy?
Message-ID: <47827657.2030001@jpl.nasa.gov>

Using StringTemplate the book says to do (using Python)

hello=stringtemplate.StringTemplate("Hello, <name>")
hello.setAttribute("name","World")
print hello.toString() #is an error :AttributeError: 'StringTemplate' 
object has no attribute 'toString'

if I do
print str(hello) I get Hello, <name>

But the online docs say to use $name$ and hello["name"] = "World"
and this works.


????

Mathew




From monty at codetransform.com  Mon Jan  7 11:10:23 2008
From: monty at codetransform.com (Monty Zukowski)
Date: Mon, 7 Jan 2008 11:10:23 -0800
Subject: [antlr-interest] soliciting language recipes book outline
	feedback
In-Reply-To: <73F42D67-BA9B-433A-A0A5-9B72BB29DAF7@cs.usfca.edu>
References: <1AF6FA01-BA7C-456F-9294-104A8BDD916C@cs.usfca.edu>
	<598864c70712312135k36f330eama622a1e2d530072c@mail.gmail.com>
	<73F42D67-BA9B-433A-A0A5-9B72BB29DAF7@cs.usfca.edu>
Message-ID: <598864c70801071110k7d566c56n8a623c51631a3909@mail.gmail.com>

> > I'm also really happy with my little expression language which
> > generates Java code.  All operators and functions are stored in the
> > tree as functions, and the functions themselves are defined in a
> > separate file as snippets of ST templates.  I think that would be a
> > good little recipe, we can chat further about it if you like.  Sample:
> >
> > expression:  a+b
> > grammar: addition!: x:atom PLUS y:atom {##=#[#(FUNCTION, "add:2"),
> > x, y];}
> > tree: (FUNCTION "add:2" a b)
> > function definition: add($x, $y) ::= <<$x + $y>>
> > alternate function definition for BigIntegers: add($x, $y) ::= <<
> > $x.add($y)>>
>
> So the function "name" dictates which template to load?

Exactly.

From parrt at cs.usfca.edu  Mon Jan  7 11:11:14 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 11:11:14 -0800
Subject: [antlr-interest] book, online doc discrepancy?
In-Reply-To: <47827657.2030001@jpl.nasa.gov>
References: <47827657.2030001@jpl.nasa.gov>
Message-ID: <D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>


On Jan 7, 2008, at 10:58 AM, Mathew Yeates wrote:

> Using StringTemplate the book says to do (using Python)
>
> hello=stringtemplate.StringTemplate("Hello, <name>")
> hello.setAttribute("name","World")
> print hello.toString() #is an error :AttributeError:  
> 'StringTemplate' object has no attribute 'toString'

must be a python difference.  how do you convert to string in python?  
use that not .toString()

Ter
>
>
> if I do
> print str(hello) I get Hello, <name>
>
> But the online docs say to use $name$ and hello["name"] = "World"
> and this works.
>
>
> ????
>
> Mathew
>
>
>


From parrt at cs.usfca.edu  Mon Jan  7 11:15:54 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 11:15:54 -0800
Subject: [antlr-interest] first and follow and lookahead
In-Reply-To: <FF993752CB890B4EB591BE5450C37BF1E401D5@navamane001.ad.internal.corp>
References: <FF993752CB890B4EB591BE5450C37BF1E40137@navamane001.ad.internal.corp>
	<1199697672.5981.3.camel@rogue>
	<FF993752CB890B4EB591BE5450C37BF1E401D5@navamane001.ad.internal.corp>
Message-ID: <4B1CFE6D-8A4A-4E2F-A9CD-E86465AC71BD@cs.usfca.edu>


On Jan 7, 2008, at 8:38 AM, Edwards, Waverly wrote:

>
> Yes Sir, I have seen explanations of first and follow.
> What I would really like to know is if I can obtain
> through ANTLR an output of first and follow sets.

Yes, ANTLR computes this for error recovery.  Look for methods FIRST/ 
LOOK etc... in Grammar.  Well, in 3.1 they will be similar and  
probably in LL1Analyzer.java.

Ter

From spoulson3 at yahoo.com  Mon Jan  7 12:28:33 2008
From: spoulson3 at yahoo.com (Shawn Poulson)
Date: Mon, 7 Jan 2008 12:28:33 -0800 (PST)
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <20080107161807.298890@gmx.net>
Message-ID: <591769.30492.qm@web30604.mail.mud.yahoo.com>


--- Harald Mueller <harald_m_mueller at gmx.de> wrote:
> datetime returns [DateTime value = DateTime.Now]

Thanks for the quick reply.  This had actually eliminated one of the
two errors.  However, it still generates one error from the the C# code
I quoted for the "prog" rule.

It seems I still need to initialize the "dt" value in the prog rule:

----- 8< ----- 8< -----
prog: dt=datetime {Debug.WriteLine("datetime=" +
$dt.value.ToString());};
----- 8< ----- 8< -----

Any ideas?

---
Shawn Poulson
spoulson at explodingcoder.com

From firatkucuk at gmail.com  Mon Jan  7 12:35:11 2008
From: firatkucuk at gmail.com (=?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?=)
Date: Mon, 7 Jan 2008 22:35:11 +0200
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <f0fcc6820801070713radd3474r5f76f7dcfb59c2f9@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
	<47821a29.0622300a.4165.ffff8ed1SMTPIN_ADDED@mx.google.com>
	<f0fcc6820801070713radd3474r5f76f7dcfb59c2f9@mail.gmail.com>
Message-ID: <7385e6fe0801071235j48c050a3x44fc808be0e098e1@mail.gmail.com>

no,
this is what i did.

this grammar parses "3     .    4    . hello".

so as gavin said.

"It's not a solution if it doesn't work :)"



2008/1/7, Mark Volkmann <r.mark.volkmann at gmail.com>:
>
> On Jan 7, 2008 6:24 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> > At 21:20 7/01/2008, =?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?= wrote:
> >  >
> >  >this is my simple solution:
> >
> > It's not a solution if it doesn't work :)
> >
> > Try doing what I suggested.  You really should handle the floats
> > in the lexer, since you don't have to worry about whitespace
> > weirdness that way.  And if you do it the way I said, it should
> > work.
>
> I think this is what you want or at least really close.
>
> grammar Sample;
>
> start
>   options { backtrack = true; }
>   : (floatValue | integerValue) DOT IDENTIFIER
>     { System.out.println("matched!"); }
>   ;
>
> floatValue: NUMBER DOT NUMBER;
> integerValue: NUMBER;
>
> DOT: '.';
> IDENTIFIER: LETTER+;
> NUMBER: DIGIT+;
> fragment LETTER: 'a'..'z';
> fragment DIGIT: '0'..'9';
>
> NEWLINE: '\r'? '\n' { skip(); };
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
??r. G?r. F?rat K???k
ADAMYO Distance Learning
SAKARYA University / TURKEY
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080107/8689dab1/attachment.html 

From myeates at jpl.nasa.gov  Mon Jan  7 12:57:39 2008
From: myeates at jpl.nasa.gov (Mathew Yeates)
Date: Mon, 07 Jan 2008 12:57:39 -0800
Subject: [antlr-interest] book, online doc discrepancy?
In-Reply-To: <D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
Message-ID: <47829243.50604@jpl.nasa.gov>

Well, str(hello) doesn't work. It seems like attributes are not being 
checked when writing.

Terence Parr wrote:
>
> On Jan 7, 2008, at 10:58 AM, Mathew Yeates wrote:
>
>> Using StringTemplate the book says to do (using Python)
>>
>> hello=stringtemplate.StringTemplate("Hello, <name>")
>> hello.setAttribute("name","World")
>> print hello.toString() #is an error :AttributeError: 'StringTemplate' 
>> object has no attribute 'toString'
>
> must be a python difference.  how do you convert to string in python? 
> use that not .toString()
>
> Ter
>>
>>
>> if I do
>> print str(hello) I get Hello, <name>
>>
>> But the online docs say to use $name$ and hello["name"] = "World"
>> and this works.
>>
>>
>> ????
>>
>> Mathew
>>
>>
>>
>
>



From parrt at cs.usfca.edu  Mon Jan  7 13:57:07 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 13:57:07 -0800
Subject: [antlr-interest] book, online doc discrepancy?
In-Reply-To: <47829243.50604@jpl.nasa.gov>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<47829243.50604@jpl.nasa.gov>
Message-ID: <E92300AF-E644-41D1-A9AB-621E3AF5FEC5@cs.usfca.edu>


On Jan 7, 2008, at 12:57 PM, Mathew Yeates wrote:

> Well, str(hello) doesn't work. It seems like attributes are not  
> being checked when writing.

Hmm...probably $name$ is better as it's the default for templates not  
in a group file.
Ter

From myeates at jpl.nasa.gov  Mon Jan  7 14:03:49 2008
From: myeates at jpl.nasa.gov (Mathew Yeates)
Date: Mon, 07 Jan 2008 14:03:49 -0800
Subject: [antlr-interest] book, online doc discrepancy?
In-Reply-To: <E92300AF-E644-41D1-A9AB-621E3AF5FEC5@cs.usfca.edu>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<47829243.50604@jpl.nasa.gov>
	<E92300AF-E644-41D1-A9AB-621E3AF5FEC5@cs.usfca.edu>
Message-ID: <4782A1C5.6060603@jpl.nasa.gov>

Thanks.
hello=stringtemplate.StringTemplate("Hello, $name$")
works for me.

Terence Parr wrote:
>
> On Jan 7, 2008, at 12:57 PM, Mathew Yeates wrote:
>
>> Well, str(hello) doesn't work. It seems like attributes are not being 
>> checked when writing.
>
> Hmm...probably $name$ is better as it's the default for templates not 
> in a group file.
> Ter
>



From harald_m_mueller at gmx.de  Mon Jan  7 14:06:04 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Mon, 07 Jan 2008 23:06:04 +0100
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <591769.30492.qm@web30604.mail.mud.yahoo.com>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
Message-ID: <20080107220604.286220@gmx.net>

Hi -

My "idea" is that there is a small bug in the initialization ... Johannes - HELP!!!???
What might work - but it's more a hack - is to switch on output=AST - then the generated return class could work ...
Or, for the moment, you declare your return value as DateTime?, which can be set to null.
However, both these weird ideas are straws ... the init of a strcut value should be correct(ed).

Regards
Harald


-------- Original-Nachricht --------
> Datum: Mon, 7 Jan 2008 12:28:33 -0800 (PST)
> Von: Shawn Poulson <spoulson3 at yahoo.com>
> An: Harald Mueller <harald_m_mueller at gmx.de>, antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] Value types - can\'t be set to null in C#

> 
> --- Harald Mueller <harald_m_mueller at gmx.de> wrote:
> > datetime returns [DateTime value = DateTime.Now]
> 
> Thanks for the quick reply.  This had actually eliminated one of the
> two errors.  However, it still generates one error from the the C# code
> I quoted for the "prog" rule.
> 
> It seems I still need to initialize the "dt" value in the prog rule:
> 
> ----- 8< ----- 8< -----
> prog: dt=datetime {Debug.WriteLine("datetime=" +
> $dt.value.ToString());};
> ----- 8< ----- 8< -----
> 
> Any ideas?
> 
> ---
> Shawn Poulson
> spoulson at explodingcoder.com

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger?did=10

From r.mark.volkmann at gmail.com  Mon Jan  7 14:15:23 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 7 Jan 2008 16:15:23 -0600
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <7385e6fe0801071235j48c050a3x44fc808be0e098e1@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
	<47821a29.0622300a.4165.ffff8ed1SMTPIN_ADDED@mx.google.com>
	<f0fcc6820801070713radd3474r5f76f7dcfb59c2f9@mail.gmail.com>
	<7385e6fe0801071235j48c050a3x44fc808be0e098e1@mail.gmail.com>
Message-ID: <f0fcc6820801071415x283040abn1cdcff40f8761fb9@mail.gmail.com>

On Jan 7, 2008 2:35 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> no,
> this is what i did.
>
> this grammar parses "3     .    4    . hello".

The solution I emailed out doesn't parse that because it doesn't skip
whitespace. Well, I should be more clear. This is the output I get.

     [java] line 1:1 no viable alternative at character ' '
     [java] matched!
     [java] line 1:2 no viable alternative at character ' '
     [java] line 1:4 no viable alternative at character ' '
     [java] line 1:5 no viable alternative at character ' '
     [java] line 1:8 no viable alternative at character ' '
     [java] line 1:9 no viable alternative at character ' '
     [java] line 1:11 no viable alternative at character ' '
     [java] line 1:12 no viable alternative at character ' '

So you see I get the message "matched!", but I also get all the "no
viable alternative" messages. What we need is a way to make the parser
stop when it gets one of those. I think this is addressed in section
10.4. I'll try that and let you know what happens.

> so as gavin said.
>
>
> "It's not a solution if it doesn't work :)"
>
>
>
>  2008/1/7, Mark Volkmann <r.mark.volkmann at gmail.com>:
>
> > On Jan 7, 2008 6:24 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> > > At 21:20 7/01/2008, =?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?= wrote:
> > >  >
> > >  >this is my simple solution:
> > >
> > > It's not a solution if it doesn't work :)
> > >
> > > Try doing what I suggested.  You really should handle the floats
> > > in the lexer, since you don't have to worry about whitespace
> > > weirdness that way.  And if you do it the way I said, it should
> > > work.
> >
> > I think this is what you want or at least really close.
> >
> > grammar Sample;
> >
> > start
> >   options { backtrack = true; }
> >   : (floatValue | integerValue) DOT IDENTIFIER
> >     { System.out.println("matched!"); }
> >   ;
> >
> > floatValue: NUMBER DOT NUMBER;
> > integerValue: NUMBER;
> >
> > DOT: '.';
> > IDENTIFIER: LETTER+;
> > NUMBER: DIGIT+;
> > fragment LETTER: 'a'..'z';
> > fragment DIGIT: '0'..'9';
> >
> > NEWLINE: '\r'? '\n' { skip(); };
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
> >
>
>
>
>
> --
> ??r. G?r. F?rat K???k
> ADAMYO Distance Learning
> SAKARYA University / TURKEY



-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Mon Jan  7 14:18:47 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 7 Jan 2008 16:18:47 -0600
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <f0fcc6820801071415x283040abn1cdcff40f8761fb9@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
	<47821a29.0622300a.4165.ffff8ed1SMTPIN_ADDED@mx.google.com>
	<f0fcc6820801070713radd3474r5f76f7dcfb59c2f9@mail.gmail.com>
	<7385e6fe0801071235j48c050a3x44fc808be0e098e1@mail.gmail.com>
	<f0fcc6820801071415x283040abn1cdcff40f8761fb9@mail.gmail.com>
Message-ID: <f0fcc6820801071418jcc7297exbb8507c6ad18357b@mail.gmail.com>

Here is my attempt to stop parsing after the lexer gets a
NoViableAltException. It doesn't stop. Can someone tell me why? Here's
the output I get when I process "3 .14.hello". Note that the space
between the 3 and the dot isn't allowed by the grammar.

matched!
line 1:1 no viable alternative at character ' '

grammar Sample;

@lexer::members {
  protected void mismatch(IntStream input, int ttype, BitSet follow)
  throws RecognitionException {
    throw new MismatchedTokenException(ttype, input);
  }

  public void recoverFromMismatchedSet(
    IntStream input, RecognitionException e, BitSet follow)
  throws RecognitionException {
    throw e;
  }
}

@parser::members {
  protected void mismatch(IntStream input, int ttype, BitSet follow)
  throws RecognitionException {
    throw new MismatchedTokenException(ttype, input);
  }

  public void recoverFromMismatchedSet(
    IntStream input, RecognitionException e, BitSet follow)
  throws RecognitionException {
    throw e;
  }
}

@lexer::rulecatch {
  catch (RecognitionException e) {
    throw e;
  }
}

@parser::rulecatch {
  catch (RecognitionException e) {
    throw e;
  }
}

start
  options { backtrack = true; }
  : (floatValue | integerValue) DOT IDENTIFIER
    { System.out.println("matched!"); }
  ;

floatValue: NUMBER DOT NUMBER;
integerValue: NUMBER;

DOT: '.';
IDENTIFIER: LETTER+;
NUMBER: DIGIT+;
fragment LETTER: 'a'..'z';
fragment DIGIT: '0'..'9';

NEWLINE: '\r'? '\n' { skip(); };

On Jan 7, 2008 4:15 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> On Jan 7, 2008 2:35 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> > no,
> > this is what i did.
> >
> > this grammar parses "3     .    4    . hello".
>
> The solution I emailed out doesn't parse that because it doesn't skip
> whitespace. Well, I should be more clear. This is the output I get.
>
>      [java] line 1:1 no viable alternative at character ' '
>      [java] matched!
>      [java] line 1:2 no viable alternative at character ' '
>      [java] line 1:4 no viable alternative at character ' '
>      [java] line 1:5 no viable alternative at character ' '
>      [java] line 1:8 no viable alternative at character ' '
>      [java] line 1:9 no viable alternative at character ' '
>      [java] line 1:11 no viable alternative at character ' '
>      [java] line 1:12 no viable alternative at character ' '
>
> So you see I get the message "matched!", but I also get all the "no
> viable alternative" messages. What we need is a way to make the parser
> stop when it gets one of those. I think this is addressed in section
> 10.4. I'll try that and let you know what happens.
>
>
> > so as gavin said.
> >
> >
> > "It's not a solution if it doesn't work :)"
> >
> >
> >
> >  2008/1/7, Mark Volkmann <r.mark.volkmann at gmail.com>:
> >
> > > On Jan 7, 2008 6:24 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> > > > At 21:20 7/01/2008, =?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?= wrote:
> > > >  >
> > > >  >this is my simple solution:
> > > >
> > > > It's not a solution if it doesn't work :)
> > > >
> > > > Try doing what I suggested.  You really should handle the floats
> > > > in the lexer, since you don't have to worry about whitespace
> > > > weirdness that way.  And if you do it the way I said, it should
> > > > work.
> > >
> > > I think this is what you want or at least really close.
> > >
> > > grammar Sample;
> > >
> > > start
> > >   options { backtrack = true; }
> > >   : (floatValue | integerValue) DOT IDENTIFIER
> > >     { System.out.println("matched!"); }
> > >   ;
> > >
> > > floatValue: NUMBER DOT NUMBER;
> > > integerValue: NUMBER;
> > >
> > > DOT: '.';
> > > IDENTIFIER: LETTER+;
> > > NUMBER: DIGIT+;
> > > fragment LETTER: 'a'..'z';
> > > fragment DIGIT: '0'..'9';
> > >
> > > NEWLINE: '\r'? '\n' { skip(); };
> > >
> > > --
> > > R. Mark Volkmann
> > > Object Computing, Inc.
> > >
> >
> >
> >
> >
> > --
> > ??r. G?r. F?rat K???k
> > ADAMYO Distance Learning
> > SAKARYA University / TURKEY
>
>
>
> --
>
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From antlr at jazillian.com  Mon Jan  7 15:01:53 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 07 Jan 2008 18:01:53 -0500
Subject: [antlr-interest] Natural language parsing
In-Reply-To: <477FBF80.2010201@webspeed.dk>
References: <477FBF80.2010201@webspeed.dk>
Message-ID: <4782AF61.2030509@jazillian.com>

Peter Bruhn Andersen wrote:
>
> I'll soon be starting a project that needs to do quiet a bit of 
> natural language parsing. For that purpose I've tried to find examples 
> of how to use ANTLR but so far I've been out of luck. If any of you 
> know of such a project I would like to get a link to the 
> documentation. A paper with 'do and don't do' advises will be equally 
> welcome.
>
The NLP field has it's own set of tools and a completely different 
approach to parsing than the programming-language-parsing field. Unless 
you have complete control of the input and you can make it a relatively 
trivial grammar, ANTLR and similar tools are the wrong tools to use. By 
"trivial" here, I mean a couple thousand lines. I think you'll never get 
ANTLR (or similar) to parse real-world natural language in any 
meaningful way - that is, create a real AST with NOUN and VERB and 
PREPOSITIONAL_CLAUSE and so on.

I once saw a poster for a NLP conference, and I noticed that among the 
images on the poster was a newspaper with the headline "Woods Eyes 
Masters". Try parsing that sentence without knowing the context - that 
it's a sports headline :) After chewing on that for a while, you'll see 
why the best NLP programs are really based on statistical analysis of 
word frequencies, rather than top-down "parsing".

Andy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080107/19341b2d/attachment.html 

From jaluber at gmx.de  Mon Jan  7 15:38:56 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 08 Jan 2008 00:38:56 +0100
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <20080107220604.286220@gmx.net>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
	<20080107220604.286220@gmx.net>
Message-ID: <4782B810.9030605@gmx.de>

Harald Mueller schrieb:
> Hi -
> 
> My "idea" is that there is a small bug in the initialization ... Johannes - HELP!!!???
> What might work - but it's more a hack - is to switch on output=AST - then the generated return class could work ...
> Or, for the moment, you declare your return value as DateTime?, which can be set to null.
> However, both these weird ideas are straws ... the init of a strcut value should be correct(ed).
> 
> Regards
> Harald

"Small" bug indeed... The entire problem is based on the fact, that
there is only a limited map in CSharp.stg, which includes basically only
the inbuilt value types (edited to include DateTime):

csharpTypeInitMap ::= [
	"int":"0",
	"uint":"0",
	"long":"0",
	"ulong":"0",
	"float":"0.0",
	"double":"0.0",
	"bool":"false",
	"byte":"0",
	"sbyte":"0",
	"short":"0",
	"ushort":"0",
	"char":"char.MinValue",
	"DateTime":"DateTime.MinValue",
	default:"null" // anything other than an atomic type
]

The default is, as you see, null. Adding new types to this structure is
an open-ended task. So we'd need a new way to tell ANTLR, that there is
a special case. Maybe "prog: dt(DateTime.MinValue)=datetime"? Ter?

In any case, I'm reluctant to change the official template for this
special case. I suggest to rebuild ANTLR yourself with the delivered
sources, along with the change in CSharp.stg, until Ter can make a real fix.

Johannes

From parrt at cs.usfca.edu  Mon Jan  7 15:46:55 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 15:46:55 -0800
Subject: [antlr-interest] Natural language parsing
In-Reply-To: <4782AF61.2030509@jazillian.com>
References: <477FBF80.2010201@webspeed.dk> <4782AF61.2030509@jazillian.com>
Message-ID: <483B5F3C-B157-466F-A23C-90CEB2967563@cs.usfca.edu>

But an amazingly large subset can be had with a top-down parser.   
Successful NLP work always tries to apply grammatical structure  
(according to best fit rather than deterministic like top-down LL  
stuff) not just word frequencies.  Even backtracking is required by  
humans when reading sentences; antlr could handle that part too. :)

Ter

On Jan 7, 2008, at 3:01 PM, Andy Tripp wrote:

> Peter Bruhn Andersen wrote:
>>
>> I?ll soon be starting a project that needs to do quiet a bit of  
>> natural language parsing. For that purpose I?ve tried to find  
>> examples of how to use ANTLR but so far I?ve been out of luck. If  
>> any of you know of such a project I would like to get a link to the  
>> documentation. A paper with ?do and don?t do? advises will be  
>> equally welcome.
>>
> The NLP field has it's own set of tools and a completely different  
> approach to parsing than the programming-language-parsing field.  
> Unless you have complete control of the input and you can make it a  
> relatively trivial grammar, ANTLR and similar tools are the wrong  
> tools to use. By "trivial" here, I mean a couple thousand lines. I  
> think you'll never get ANTLR (or similar) to parse real-world  
> natural language in any meaningful way - that is, create a real AST  
> with NOUN and VERB and PREPOSITIONAL_CLAUSE and so on.
>
> I once saw a poster for a NLP conference, and I noticed that among  
> the images on the poster was a newspaper with the headline "Woods  
> Eyes Masters". Try parsing that sentence without knowing the context  
> - that it's a sports headline :) After chewing on that for a while,  
> you'll see why the best NLP programs are really based on statistical  
> analysis of word frequencies, rather than top-down "parsing".
>
> Andy


From jaluber at gmx.de  Mon Jan  7 15:54:52 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 08 Jan 2008 00:54:52 +0100
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <4782B810.9030605@gmx.de>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>	<20080107220604.286220@gmx.net>
	<4782B810.9030605@gmx.de>
Message-ID: <4782BBCC.8070704@gmx.de>

Johannes Luber schrieb:
> The default is, as you see, null. Adding new types to this structure is
> an open-ended task. So we'd need a new way to tell ANTLR, that there is
> a special case. Maybe "prog: dt(DateTime.MinValue)=datetime"? Ter?

I suppose, this fix will also allow $(default)reference, as labels won't
be the single place, where value types in C# can appear.

Johannes


From r.mark.volkmann at gmail.com  Mon Jan  7 15:57:57 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 7 Jan 2008 17:57:57 -0600
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <f0fcc6820801071418jcc7297exbb8507c6ad18357b@mail.gmail.com>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
	<47821a29.0622300a.4165.ffff8ed1SMTPIN_ADDED@mx.google.com>
	<f0fcc6820801070713radd3474r5f76f7dcfb59c2f9@mail.gmail.com>
	<7385e6fe0801071235j48c050a3x44fc808be0e098e1@mail.gmail.com>
	<f0fcc6820801071415x283040abn1cdcff40f8761fb9@mail.gmail.com>
	<f0fcc6820801071418jcc7297exbb8507c6ad18357b@mail.gmail.com>
Message-ID: <f0fcc6820801071557kfc21e7et7b434f2f8008f4f9@mail.gmail.com>

I have at least a partial answer to my own question.
The generated lexer class contains the method mToken which throws a
NoViableAltException when the illegal space after between the 3 and
the dot is encountered. This is caught in the the nextToken method of
the standard Lexer class. That catch calls reportError and recover. I
don't want it to recover though.

The techniques in section 10.4 of the book, "Exiting the Recognizer
upon First Error" won't work here. I suppose I could try to override
the Lexer nextToken method, but that seems like too much work. The
only solution I've come up with so far is to override the recover
method in the generated Lexer class so it does a System.exit(1).

Is there a better way to stop processing when the lexer throws a
NoViableAltException?

On Jan 7, 2008 4:18 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> Here is my attempt to stop parsing after the lexer gets a
> NoViableAltException. It doesn't stop. Can someone tell me why? Here's
> the output I get when I process "3 .14.hello". Note that the space
> between the 3 and the dot isn't allowed by the grammar.
>
> matched!
> line 1:1 no viable alternative at character ' '
>
> grammar Sample;
>
> @lexer::members {
>   protected void mismatch(IntStream input, int ttype, BitSet follow)
>   throws RecognitionException {
>     throw new MismatchedTokenException(ttype, input);
>   }
>
>   public void recoverFromMismatchedSet(
>     IntStream input, RecognitionException e, BitSet follow)
>   throws RecognitionException {
>     throw e;
>   }
> }
>
> @parser::members {
>   protected void mismatch(IntStream input, int ttype, BitSet follow)
>   throws RecognitionException {
>     throw new MismatchedTokenException(ttype, input);
>   }
>
>   public void recoverFromMismatchedSet(
>     IntStream input, RecognitionException e, BitSet follow)
>   throws RecognitionException {
>     throw e;
>   }
> }
>
> @lexer::rulecatch {
>   catch (RecognitionException e) {
>     throw e;
>   }
> }
>
> @parser::rulecatch {
>   catch (RecognitionException e) {
>     throw e;
>   }
> }
>
> start
>   options { backtrack = true; }
>   : (floatValue | integerValue) DOT IDENTIFIER
>     { System.out.println("matched!"); }
>   ;
>
> floatValue: NUMBER DOT NUMBER;
> integerValue: NUMBER;
>
> DOT: '.';
> IDENTIFIER: LETTER+;
> NUMBER: DIGIT+;
> fragment LETTER: 'a'..'z';
> fragment DIGIT: '0'..'9';
>
> NEWLINE: '\r'? '\n' { skip(); };
>
>
> On Jan 7, 2008 4:15 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> > On Jan 7, 2008 2:35 PM, F?rat K???k <firatkucuk at gmail.com> wrote:
> > > no,
> > > this is what i did.
> > >
> > > this grammar parses "3     .    4    . hello".
> >
> > The solution I emailed out doesn't parse that because it doesn't skip
> > whitespace. Well, I should be more clear. This is the output I get.
> >
> >      [java] line 1:1 no viable alternative at character ' '
> >      [java] matched!
> >      [java] line 1:2 no viable alternative at character ' '
> >      [java] line 1:4 no viable alternative at character ' '
> >      [java] line 1:5 no viable alternative at character ' '
> >      [java] line 1:8 no viable alternative at character ' '
> >      [java] line 1:9 no viable alternative at character ' '
> >      [java] line 1:11 no viable alternative at character ' '
> >      [java] line 1:12 no viable alternative at character ' '
> >
> > So you see I get the message "matched!", but I also get all the "no
> > viable alternative" messages. What we need is a way to make the parser
> > stop when it gets one of those. I think this is addressed in section
> > 10.4. I'll try that and let you know what happens.
> >
> >
> > > so as gavin said.
> > >
> > >
> > > "It's not a solution if it doesn't work :)"
> > >
> > >
> > >
> > >  2008/1/7, Mark Volkmann <r.mark.volkmann at gmail.com>:
> > >
> > > > On Jan 7, 2008 6:24 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> > > > > At 21:20 7/01/2008, =?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?= wrote:
> > > > >  >
> > > > >  >this is my simple solution:
> > > > >
> > > > > It's not a solution if it doesn't work :)
> > > > >
> > > > > Try doing what I suggested.  You really should handle the floats
> > > > > in the lexer, since you don't have to worry about whitespace
> > > > > weirdness that way.  And if you do it the way I said, it should
> > > > > work.
> > > >
> > > > I think this is what you want or at least really close.
> > > >
> > > > grammar Sample;
> > > >
> > > > start
> > > >   options { backtrack = true; }
> > > >   : (floatValue | integerValue) DOT IDENTIFIER
> > > >     { System.out.println("matched!"); }
> > > >   ;
> > > >
> > > > floatValue: NUMBER DOT NUMBER;
> > > > integerValue: NUMBER;
> > > >
> > > > DOT: '.';
> > > > IDENTIFIER: LETTER+;
> > > > NUMBER: DIGIT+;
> > > > fragment LETTER: 'a'..'z';
> > > > fragment DIGIT: '0'..'9';
> > > >
> > > > NEWLINE: '\r'? '\n' { skip(); };
> > > >
> > > > --
> > > > R. Mark Volkmann
> > > > Object Computing, Inc.
> > > >
> > >
> > >
> > >
> > >
> > > --
> > > ??r. G?r. F?rat K???k
> > > ADAMYO Distance Learning
> > > SAKARYA University / TURKEY
> >
> >
> >
> > --
> >
> > R. Mark Volkmann
> > Object Computing, Inc.
> >
>
>
>
> --
>
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From antlr at mirality.co.nz  Mon Jan  7 16:40:37 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 08 Jan 2008 13:40:37 +1300
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <4782B810.9030605@gmx.de>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
	<20080107220604.286220@gmx.net> <4782B810.9030605@gmx.de>
Message-ID: <20080108004149.20C1111ECFE@www.antlr.org>

At 12:38 8/01/2008, Johannes Luber wrote:
 >"Small" bug indeed... The entire problem is based on the fact,
 >that there is only a limited map in CSharp.stg, which includes
 >basically only the inbuilt value types (edited to include
 >DateTime):
[...]
 >The default is, as you see, null. Adding new types to this
 >structure is an open-ended task.

Does C# 2.0's "default" keyword work outside generic contexts?  If 
so, you could just always initialise everything as:

   Type x = default(Type);


From parrt at cs.usfca.edu  Mon Jan  7 16:50:54 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 7 Jan 2008 16:50:54 -0800
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <4782B810.9030605@gmx.de>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
	<20080107220604.286220@gmx.net> <4782B810.9030605@gmx.de>
Message-ID: <7B5420A6-DF97-4F2A-9476-9F20671CB379@cs.usfca.edu>


On Jan 7, 2008, at 3:38 PM, Johannes Luber wrote:

> The default is, as you see, null. Adding new types to this structure  
> is
> an open-ended task. So we'd need a new way to tell ANTLR, that there  
> is
> a special case. Maybe "prog: dt(DateTime.MinValue)=datetime"? Ter?

I'd rather not add syntax for this.  If it's not a built-in type, all  
defaults can be null for objects, right?

Ter

From antlr at mirality.co.nz  Mon Jan  7 16:53:01 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 08 Jan 2008 13:53:01 +1300
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <20080107122512.6C29A11ECBA@www.antlr.org>
References: <7385e6fe0801061523g25449058p18083a7e21dd953e@mail.gmail.com>
	<f0fcc6820801061528y7e88add5t1ff41d2647932740@mail.gmail.com>
	<7385e6fe0801061531h54ae651cy87d97c76ec6950bd@mail.gmail.com>
	<f0fcc6820801061926r769f8a21x588b43b37e89cde1@mail.gmail.com>
	<20080107075803.AB14811E9D0@www.antlr.org>
	<7385e6fe0801070020m5895c475y62737fc5e4b6f71c@mail.gmail.com>
	<20080107122512.6C29A11ECBA@www.antlr.org>
Message-ID: <20080108005320.6B86511ED46@www.antlr.org>

At 01:24 8/01/2008, I wrote:
 >Try doing what I suggested.  You really should handle the floats 

 >in the lexer, since you don't have to worry about whitespace
 >weirdness that way.  And if you do it the way I said, it should
 >work.

Ok, I was a little overly optimistic there; there was still a bit 
of k=1 lookahead that I hadn't accounted for that broke it.  But 
it works if you use a syntactic predicate:

grammar Sample;

tokens {
   FLOAT;
}

start: (FLOAT | INTEGER) DOT IDENTIFIER;

INTEGER
	:	NUMBER
		(	(DOT DIGIT) => DOT NUMBER { $type = FLOAT; }
		|	/* nothing */
		)
	;

IDENTIFIER: LETTER+;
DOT: '.';
fragment NUMBER: DIGIT+;
fragment LETTER: 'a' .. 'z';
fragment DIGIT: '0' .. '9';


From antlr at mirality.co.nz  Mon Jan  7 17:01:29 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 08 Jan 2008 14:01:29 +1300
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <7B5420A6-DF97-4F2A-9476-9F20671CB379@cs.usfca.edu>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
	<20080107220604.286220@gmx.net> <4782B810.9030605@gmx.de>
	<7B5420A6-DF97-4F2A-9476-9F20671CB379@cs.usfca.edu>
Message-ID: <20080108010643.AF74111ED3D@www.antlr.org>

At 13:50 8/01/2008, Terence Parr wrote:
 >I'd rather not add syntax for this.  If it's not a built-in 
type,
 >all defaults can be null for objects, right?

Objects, yes.  Types, no.  In C# you can define "value types" (and 
there are a number of standard ones like DateTime) which cannot be 
assigned null.  On the upside, they are required to have a default 
constructor, so if you know that a given type is a value type you 
can just do "Type x = new Type();"

Of course from a Java-based code-generation standpoint you have no 
way of knowing whether a given type is a value type or a reference 
type, which complicates matters.  So if the 'default' keyword 
thing I suggested a moment ago doesn't work (or if you don't want 
to restrict yourself to C# 2.0) then you'll have to have some kind 
of syntax to tell ANTLR whether types are value or reference.

(Or alternatively declare them as member variables 
somewhere.  Member variables get automagically assigned either 0, 
null, or default instance as appropriate when the instance is 
constructed, unlike local variables.  Of course doing this would 
either break recursive rules or be a major pain in the butt [and 
hurt performance], so I don't think we want to go there.)


From antlr at mirality.co.nz  Mon Jan  7 17:14:00 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 08 Jan 2008 14:14:00 +1300
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <7.1.0.9.0.20080108135348.06093b58@mirality.co.nz>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
	<20080107220604.286220@gmx.net> <4782B810.9030605@gmx.de>
	<7B5420A6-DF97-4F2A-9476-9F20671CB379@cs.usfca.edu>
	<7.1.0.9.0.20080108135348.06093b58@mirality.co.nz>
Message-ID: <20080108011600.291AA11ED4A@www.antlr.org>

Mere moments ago, I wrote:
 >Of course from a Java-based code-generation standpoint you have 
no
 >way of knowing whether a given type is a value type or a 
reference
 >type, which complicates matters.  So if the 'default' keyword 
thing
 >I suggested a moment ago doesn't work (or if you don't want to
 >restrict yourself to C# 2.0) then you'll have to have some kind 
of
 >syntax to tell ANTLR whether types are value or reference.

Actually, another thing that could work is simply detecting 
whether the variables are used within an @init block.  If so, you 
could assume that they're being initialised properly there and 
simply not do any initialisation at declaration time.

So for the original example, it'd have to be rewritten slightly to 
this:

datetime returns [DateTime value]
@init {
   $value = DateTime.MinValue;
}
   : (h=hour24 {Debug.WriteLine("hour24=" + $h.value.ToString());}
     ':' m=minute {Debug.WriteLine("minute=" + 
$m.value.ToString());}
     ':' s=second {Debug.WriteLine("second=" + 
$s.value.ToString());}
     '.' ms=millisecond {Debug.WriteLine("millisecond=" +
$ms.value.ToString());})
     {
       $value = new DateTime(2008, 1, 4, $h.value, $m.value, 
$s.value,
$ms.value);
     }
   ;

... which would generate:

//...
   DateTime value;
//...
   value = DateTime.MinValue;
//...

That'd work.  It could be mildly annoying if these types were used 
commonly (so a global "this is how you init DateTimes" specifier 
or getting "default" to work would be better), but it'd be a 
simple quick-fix solution.


From adam.rpconnelly at googlemail.com  Mon Jan  7 17:23:57 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Tue, 8 Jan 2008 01:23:57 +0000
Subject: [antlr-interest] book, online doc discrepancy?
In-Reply-To: <4782A1C5.6060603@jpl.nasa.gov>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<47829243.50604@jpl.nasa.gov>
	<E92300AF-E644-41D1-A9AB-621E3AF5FEC5@cs.usfca.edu>
	<4782A1C5.6060603@jpl.nasa.gov>
Message-ID: <b9a39b060801071723u325e55ffnb18b7123e6545dad@mail.gmail.com>

About the '<' '>' and '$' difference, AFAIK you can specify whether you want
to use AngleBracketLexer or the dollar sign one in the constructor for a
template.

That's maybe one thing that should be standardised.  When I started using
StringTemplate I just loaded individual templates, and used "$name$" style
placeholders.  After a while I ended up creating group files and it took me
a while to figure out why the templates wouldn't work.  Is there a reason
for this difference?

Also, the different comment style between "outside templates in group file"
(C-Style) and within templates is maybe slightly confusing.  Is there a
reason why it wouldn't be possible to just use "<!" "!>" or "$!" "!$"
everywhere?

Adam

On 07/01/2008, Mathew Yeates <myeates at jpl.nasa.gov> wrote:
>
> Thanks.
> hello=stringtemplate.StringTemplate("Hello, $name$")
> works for me.
>
> Terence Parr wrote:
> >
> > On Jan 7, 2008, at 12:57 PM, Mathew Yeates wrote:
> >
> >> Well, str(hello) doesn't work. It seems like attributes are not being
> >> checked when writing.
> >
> > Hmm...probably $name$ is better as it's the default for templates not
> > in a group file.
> > Ter
> >
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080108/be6a0548/attachment.html 

From dirty at apple.com  Mon Jan  7 18:06:50 2008
From: dirty at apple.com (Cameron Esfahani)
Date: Mon, 7 Jan 2008 18:06:50 -0800
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <7B5420A6-DF97-4F2A-9476-9F20671CB379@cs.usfca.edu>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
	<20080107220604.286220@gmx.net> <4782B810.9030605@gmx.de>
	<7B5420A6-DF97-4F2A-9476-9F20671CB379@cs.usfca.edu>
Message-ID: <32AB8751-DE7B-4A7F-87D2-297ECA7E4F3F@apple.com>

I remember seeing a similar problem with typedef-ed structures in the  
C backend.  It was initializing them to NULL and my compiler didn't  
like that...

On Jan 7, 2008, at 4:50 PM, Terence Parr wrote:

>
> On Jan 7, 2008, at 3:38 PM, Johannes Luber wrote:
>
>> The default is, as you see, null. Adding new types to this  
>> structure is
>> an open-ended task. So we'd need a new way to tell ANTLR, that  
>> there is
>> a special case. Maybe "prog: dt(DateTime.MinValue)=datetime"? Ter?
>
> I'd rather not add syntax for this.  If it's not a built-in type,  
> all defaults can be null for objects, right?
>
> Ter

Cameron Esfahani
dirty at apple.com

"It is the spirit and not the form of law that keeps justice alive."

Earl Warren



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080107/01bd4ba3/attachment.html 

From open.zone at virgin.net  Tue Jan  8 02:47:57 2008
From: open.zone at virgin.net (Micheal J)
Date: Tue, 8 Jan 2008 10:47:57 -0000
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <4782B810.9030605@gmx.de>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com><20080107220604.286220@gmx.net>
	<4782B810.9030605@gmx.de>
Message-ID: <000001c851e3$ef63cba0$0400a8c0@marion>

> "Small" bug indeed... The entire problem is based on the 
> fact, that there is only a limited map in CSharp.stg, which 
> includes basically only the inbuilt value types (edited to 
> include DateTime):
> 
> csharpTypeInitMap ::= [
> 	"int":"0",
> 	"uint":"0",
> 	"long":"0",
> 	"ulong":"0",
> 	"float":"0.0",
> 	"double":"0.0",
> 	"bool":"false",
> 	"byte":"0",
> 	"sbyte":"0",
> 	"short":"0",
> 	"ushort":"0",
> 	"char":"char.MinValue",
> 	"DateTime":"DateTime.MinValue",
> 	default:"null" // anything other than an atomic type ]
> 
> The default is, as you see, null. Adding new types to this 
> structure is an open-ended task. So we'd need a new way to 
> tell ANTLR, that there is a special case. Maybe "prog: 
> dt(DateTime.MinValue)=datetime"? Ter?

Can maps be extended using the region syntax/feature?. If yes, end users can
extend the type_init map as required...

> In any case, I'm reluctant to change the official template 
> for this special case. I suggest to rebuild ANTLR yourself 
> with the delivered sources, along with the change in 
> CSharp.stg, until Ter can make a real fix.

I don't disagree but, DateTime is a frequently-used standard type - just
like char or ushort...

Micheal


From nelson.ana at gmail.com  Tue Jan  8 03:32:52 2008
From: nelson.ana at gmail.com (Ana Nelson)
Date: Tue, 8 Jan 2008 11:32:52 +0000
Subject: [antlr-interest] gUnit (Aug 20,
	2007) incompatible with ANTLR 3.1b intermediate builds
Message-ID: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>

I had some trouble getting gUnit working, I was getting Java Exceptions such
as:
Exception in thread "main" java.lang.NoSuchFieldError: type

Eventually I changed my classpath to reference the official antlr release (
antlr-3.0.1) and not the intermediate build/early access version (
antlr-2007-12-31.17), and recompiled the grammar I was testing with
antlr-3.0.1 and that did the trick.

I did try compiling gUnit.g with antlr-2007-12-31.17 to see if I could use
the more recent version, but there's an issue with quote escaping so the
generated .java files won't compile.

Just posting this here in case anyone else has a similar problem.

Are there any plans to make gUnit part of ANTLR? I would really like to have
tests for my grammars and to stay up to date with recent versions of ANTLR
(since I'm hoping to switch to the Ruby target if it gets more development).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080108/ae5be278/attachment.html 

From jaluber at gmx.de  Tue Jan  8 03:42:17 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 08 Jan 2008 12:42:17 +0100
Subject: [antlr-interest] Value types - can't be set to null in C#
In-Reply-To: <20080108011600.21675gmx1@mx069.gmx.net>
References: <591769.30492.qm@web30604.mail.mud.yahoo.com>
	<20080107220604.286220@gmx.net> <4782B810.9030605@gmx.de>
	<7B5420A6-DF97-4F2A-9476-9F20671CB379@cs.usfca.edu>
	<7.1.0.9.0.20080108135348.06093b58@mirality.co.nz>
	<20080108011600.21675gmx1@mx069.gmx.net>
Message-ID: <47836199.4080900@gmx.de>

Gavin Lambert schrieb:
> Mere moments ago, I wrote:
>>Of course from a Java-based code-generation standpoint you have no
>>way of knowing whether a given type is a value type or a reference
>>type, which complicates matters.  So if the 'default' keyword thing
>>I suggested a moment ago doesn't work (or if you don't want to
>>restrict yourself to C# 2.0) then you'll have to have some kind of
>>syntax to tell ANTLR whether types are value or reference.
> 
> Actually, another thing that could work is simply detecting whether the
> variables are used within an @init block.  If so, you could assume that
> they're being initialised properly there and simply not do any
> initialisation at declaration time.

The latter is interesting as it allows to remain compatible with C# 1.
"default(Type)" would work otherwise. If I get around to change the
sources, so the C# 2-build uses everywhere enhanced techniques, I'll
remember that. The question is then, if Ter is willing to change ANTLR
to implement that behaviour.

Wait a minute - how can the map know, which typename should go between
the parentheses? Can some template replacement be used in that case? My
StringTemplate skills don't go far enough.

> That'd work.  It could be mildly annoying if these types were used
> commonly (so a global "this is how you init DateTimes" specifier or
> getting "default" to work would be better), but it'd be a simple
> quick-fix solution.

Depending on Ter's decision, I may add a line to the map, as a special
exception.

Johannes


From jaluber at gmx.de  Tue Jan  8 03:44:32 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 08 Jan 2008 12:44:32 +0100
Subject: [antlr-interest] Parser generator philosophy
In-Reply-To: <Pine.LNX.4.64.0801051739150.8143@localhost.localdomain>
References: <Pine.LNX.4.64.0801050732440.8143@localhost.localdomain>
	<477FA1EF.4060102@gmx.de>
	<Pine.LNX.4.64.0801051739150.8143@localhost.localdomain>
Message-ID: <47836220.6000703@gmx.de>

I accidentally sent the mail to Mark himself and not to the list, so I
resend it properly.

Mark Whitis schrieb:
>
> I never said tree rewriting isn't supported.   Everything for
> the very front end goes into one file or set of files (user's
> choice, not the tools).   In practice, one file would usually be
> used except for modular grammars where a set of grammars
> share modules.

Well, it still LOOKS like it. I don't know how your approach can support
this, but this isn't proof that your approach can't support this.

> In fact, I am dismayed to read that antlr itself doesn't yet
> support tree rewriting rules for tree grammers, though that
> is planned for future versions.   Odd becuase you would
> think that it would take more to remove it.

"...take more to remove it."??? What do you mean? In any case, tree
rewriting is supported by the latest intermediate builds. 3.1 is
supposed to be released this January - or February, if other targets
than Java and C# don't work at the end of this month. (I haven't read
anything about the state of the C target yet, which should be included
in a working form. After all, it is already a working target for 3.0.)

> You might, as a simplified example,  have many passes in a compiler:
>   - The first pass parses the syntax.
>     it executes the portable "syntax { }" actions.
>     builds a symbol table.
>   - the second pass does the semantic tagging.
>     Can be merged with the first pass on some languages like
>     C that require forward declarations.
>     executes the protable "semantic { } actions.
>     Does the semantic tagging.   AST tree is built here or
>     in pass 1.
>   - The third pass resolves constant subexpressions as these
>     will need to be resolved before you can determine the
>     size of objects "char a[SIZE+1]".
>     They are either removed from the tree or kept but tagged
>     as dead weight but still available for things like
>     error messages so the compiler can tell you that
>     "a+b+c" which resolves to "15" is not a valid value
>     rather than confusing you with "15".
>   - The fourth pass, which might be merged with the third,
>     would do source level optimiztion like pruning code where:
>        if(never) {
>        }
>     It might also factor out constant subexpressions, do
>     loop unrolling, etc.
>   - The fifth pass outputs LLVM assembler
>   - subsequent optimization and code generation passes handled by LLVM

I'm not that much of an expert, compared to Ter, but the first two
passes seem awfully complicated to me...
> 
> The division between first and second pass is a little fuzzy, still.
> The basic issue is that many languages require you to build at least
> a minimal symbol table before you can finish parsing.   In C, is "a*b"
> multiplication (with discarded result) or declaring b to be a
> pointer to type a?   If the language has an ambiguous syntax and
> lets you write things in any order like
>    a*b;
>    typedef int a;
> Then things start to get really ugly.

There are probably too many different variations of these corner cases
to support that directly by ANTLR.

...

> Yes, the core will need to be extended
> some as languages are added.

And that's exactly the kind of situation which shouldn't happen. ANTLR-X
has to be complete and high enough abstracted so it doesn't require this.

...

> The language specific stuff is only for the stuff
> that can't be handled by the portable actions.
...

That's illustrating the ironic point: You want ANTLR become language
independent, but you still allow the use of language-specifics. I'm
wondering, if YGGDRASIL manages to allow a truely language-independent
implementation, or if it breaks down at later point. Maybe it's enough
to keep the grammar file from language specifics, but require to
translate a certain additional backend (beyound that what is strictly
necessary to compile the translated grammar file itself), which is
implemented in separate files. It would make things definitively
cleaner, as replacing the innards of a ANTLR grammar file can be quite
tricky.

...
> Can all tools derive 100%?  Maybe not.   But getting more than 90% is
> probably reasonable.

How do you add the last 10% without risking to lose them in a later
regeneration?
...
>> If you need more than fifty different things which won't be nonetheless
>> ever enough then you aren't doing things orthogonal.
> 
> 
> You could say the same meaningless statement about needing 50 different
> grammars for 50 different languages which will never be enough because
> there will always be a language 51.    There will always be another
> language.    However, the number of basic tags increases at a much
> lower rate than the number of languages.   It is possible for the
> number of tags to be smaller than the number of languages supported.
> A couple hundred tags could support an infinite number of programming
> languages, if not real ones.   If you group the tags into
> sets (TRY, CATCH, FINALLY, RAISE) then the number of tag groups is
> roughly equivalent to the number of constructs supported.
> 
> Your criticism seems analogous to criticizing English because
> "noun" and "verb" are defined in a dictionary and new nouns
> and verbs need to be added.    I am sure we could both
> rip into English for a whole lot of reasons but that isn't
> really one of them.   Now, logban, IIRC tries to address
> the vocabularity issue by using compound words such that
> "small-ice-planet" is used for meteor.   And it wouldn't
> hurt to apply a little of that to the TAG naming to make
> the names more consistant (or "orthogonal" if you prefer).

Actually I come from XAML (WPF from Microsoft), where each class has an
own tag, instead using a tag "<class name='...'>". And I happen to know
a few RPG magic systems, which try to deal with sensible spell creation.
If you happen to add effectively the same effect to each element of a
certain layer, then it screams, that there are two different things
mixed. How applicable my nonetheless sensible criticism is here, is an
entirely other question - which at least I can't answer.

> Tags is much better than rewriting compiler code glue for every
> language that supports a construct.    The later is of order N*M where N
> is the number of languages and M is the number of constructs.
> 
> For data files, the secondary attributes I refer to like
> 'NAME','PHONE_NUMBER', 'CITY', 'STATE', 'POSTAL CODE', 'COUNTRY', EMAIL,
> URL, CREDIT_CARD_NUMBER, etc.) are strings.  It costs very little to
> convey additional information.  These are just taken from a domain
> specific dictionary with shared subsets.  Thus, if a program sees a tree
> like:
>   ^('Numero Telephono:':PHONES:LIST:
>       '+1-234-567-8901':PH_ENTRY:LIST_ITEM:'PHONE_NUMBER'
>       '+1-234-567-8902':PH_ENTRY:LIST_ITEM:'PHONE_NUMBER'
>       '+1-234-567-8903':PH_ENTRY:LIST_ITEM:'PHONE_NUMBER'
>    )
> without understanding the grammar rule names (which may be derived from
> one of many standards and thus different for each grammar that contains
> contact info) or the language (spanish) the data file was written in ,
> it immediately undestands that it has a list of three
> phone numbers and can dial a number if you click on it, can search
> based on phone number, etc.

This looks like as if you try to add DSLs to ANTLR grammar syntax. I
prefer instead the LISP approach: Use a generic approach to define a DSL
and then write in it. Not sure, if that is feasible, but it's cleaner
and prevents accidental mixing of tags - and allows even different
meanings (e.g., "bank" can mean to different things).

...
>>> Users would define their own, nonstandard tags using the common
>>> "X_NAME()"
>>> convention until the tags were standardized.
>>
>> This approach makes me shudder...
> 
> Why?   It works fine in many other areas.   Any language which can't
> be extended is limited in its expressive power.

Because your approach looks to me as too far open-ended and muddled.
Firstly, too many people add things, which creates confusion ("Where to
put feature X? Should I use feature Y here?"). Secondly, I believe that
overlaps in tags may cause a greater overhaul - at least, if one can't
exchange the definitions in a way, that doesn't influence existing code.
Am I too pessimistic here...?

...
>> Unicode handling makes case insensitivity more complicated. In Turkey
>> the uppercase y isn't Y, but Y accented with ... whatever that accent
>> is. In any case, you have to add locales. I know that .NET supports
>> locales so at least there it may be easy to compare the input. But I
>> don't know if the templates to generate the parser can be easily updated.
> 
> I deal with this at length in my case sensitivity post which I mentioned
> was forthcoming.  Short version is there is really much excuse for not
> creating the basic infrastruction and providing an ASCII implementation
> and you can substitute unicode methods that will work for a lot of
> unicode using existing libraries.  But if you want proper handling, you
> will have to abandon the notion of a string as an array of 8/16/32 bit
> characters and instead treat it as a string of variable length objects
> that you use standard library functions to sequence through, compare,
> etc.  For ASCII you can optimize by making your string methods inline
> and suffer very little performance penalty.  Full unicode support would
> be a gradual transition.  Would have been pretty easy to do in the
> ANTLR3 rewrite, probably much harder now.   Spend a couple hours
> skimming the unicode
> standard and you have a pretty good idea what your string class should
> look like.

I hope you don't suggest to implement an own string class and not to use
existing implementations.
> 
>>>   - selectively disallowing whitespace between tokens
>>
>> Something I did with checking the indices of the supposedly neighboring
>> tokens (difference may be only one).
> 
> Target language and runtime specific but I might borrow that as a
> workaround until ANTLR is fixed.

Indices are actually supported by ANTLR token attributes. Although the
implementation is indeed target specific.
> 
>>>   - choosing between multiple token rules that match the same input
>>>     based on parser context.
>>
>> Can be done already. Just use for scanning a normal name (like "TILDE")
>> and via rewriting and imaginary tokens you can get to
>> "CONCATENATION[TILDE]".
> 
> Not sure exactly what you are saying but it sounds target language and
> runtime specific.

Nope, normal ANTLR grammar. This is explained in TDAR in the section
about imaginary tokens.
...
>> Which reminds me: Lexer tokens can't have arguments, unless they are
>> fragment rules. I forgot the reason for this, but orthogonality-wise
>> it's not a good decision, even so implementation-wise the reason may be
>> sound.
> 
> Yes, this could be a pain to implement.  I can suggest a number of
> reasons:
>   - general absence of comunication between parser/lexer.
>   - parser doesn't call lexer functions directly, but through
>     a stream class that isn't yet flexible enough to communicate.
>   - precomputed state machines
>   - the need to purge lookahead token cache, etc. when changing
>     values
>   - a lot of optimizations may assume that the breakdown of text
>     into tokens is constant regardless of context.
>   - possible use of code that resembles
>      if(get_token()==FOO)
>    rather than
>      if(match_token(FOO)
>    You can add arguments to the second version and modify the meddling
>    classes in between to pass the data through.
> 
> There are ways around this.    They aren't necessarily easy.  But I
> have mentioned some of them.
> 
...
>>>   - operator tokens defined by the user
>>>     of a grammar, not the grammer itself.   Requires a runtime
>>>     table lookup.   Multiple character operators "++" would be harder to
>>>     implement, though possible.   This gets around, for example, the
>>>     c++ limitation on defining new operators.
>>>      U+2200 .. U+22FF (mathematical symbols) are prime candidates.
>>>     as are U+0391..U+03A9 and U+03B1..U+03C9 (greek letters).
>>
>> Huh? At which step of a usual compiler development are the user supposed
>> to add their new operators?
> 
> At no stage of compiler development.   The end-user declares their tokens
> in the file being compiled.    This should not be as hard as it sounds
> at first.   It means that each state of a state machine where this
> token may be relevent consults a lookup table.  This will typically
> affect a few special rules:
>     NEW_OPERATOR_PRECEDENCE_1:  :new-token[1]: ;
>     NEW_OPERATOR_PRECEDENCE_2:  :new-token[2]: ;
>     NEW_OPERATOR_PRECEDENCE_3:  :new-token[3]: ;
>     NEW_OPERATOR_PRECEDENCE_4:  :new-token[4]: ;
>     ...
> This gets tagged NEW_OPERATOR and the compiler back end takes advantage
> of the fact that it gets both tags and the original text.  Lexer states
> just call is_new_operator(precedence, char_reference);  you arange
> things so these rules are called last.   Just a tad more and you
> can define unary vs binary operators.  Presto, you
> have the ability to use a whole bunch of new operators and define
> their precedence.    http://www.unicode.org/charts/PDF/U2200.pdf
> 
> Making the changes to ANTLR grammar and lexer would be done at the
> same time unicode property matching is added, so the marginal cost
> is small.

If I read this right you allow people to modify the behaviour of a
compiled parser?

> One problem here is that ANTLR currently doesn't let treeparsers
> output trees.

3.1 can do that.
...
> Thanks for your input.
> 

No problem.

Johannes


From Waverly.Edwards at genesys.com  Tue Jan  8 06:36:50 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Tue, 8 Jan 2008 09:36:50 -0500
Subject: [antlr-interest] first and follow and lookahead
In-Reply-To: <4B1CFE6D-8A4A-4E2F-A9CD-E86465AC71BD@cs.usfca.edu>
References: <FF993752CB890B4EB591BE5450C37BF1E40137@navamane001.ad.internal.corp>
	<1199697672.5981.3.camel@rogue>
	<FF993752CB890B4EB591BE5450C37BF1E401D5@navamane001.ad.internal.corp>
	<4B1CFE6D-8A4A-4E2F-A9CD-E86465AC71BD@cs.usfca.edu>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1E40305@navamane001.ad.internal.corp>


I will look into this.


Thank you very much,


W. 

-----Original Message-----
From: Terence Parr [mailto:parrt at cs.usfca.edu] 
Sent: Monday, January 07, 2008 2:16 PM
To: Edwards, Waverly
Cc: ANTR Interest
Subject: Re: [antlr-interest] first and follow and lookahead


On Jan 7, 2008, at 8:38 AM, Edwards, Waverly wrote:

>
> Yes Sir, I have seen explanations of first and follow.
> What I would really like to know is if I can obtain through ANTLR an 
> output of first and follow sets.

Yes, ANTLR computes this for error recovery.  Look for methods FIRST/
LOOK etc... in Grammar.  Well, in 3.1 they will be similar and probably
in LL1Analyzer.java.

Ter

From adam.rpconnelly at googlemail.com  Tue Jan  8 06:55:41 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Tue, 8 Jan 2008 14:55:41 +0000
Subject: [antlr-interest] gUnit (Aug 20,
	2007) incompatible with ANTLR 3.1b intermediate builds
In-Reply-To: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>
References: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>
Message-ID: <b9a39b060801080655k175b6d27t7c0a6de6cd5df4e4@mail.gmail.com>

One thing I'd be interested in finding out about is the compatibility with
different languages other than Java.  I get the feeling at the moment that
to use gUnit you have to use antlr to generate java sources that you then
compile and pass to gUnit (although I could be wrong).  Are there any plans
to support other languages (i.e. C# :)) or to make it language agnostic
(which I suspect will be a non-starter).

It's just that I'd like to use something like gUnit for testing my grammars,
but don't want to have to generate them for different target languages just
for the sake of testing (although even that's probably easier than writing
my own unit tests all the time).

Is the gUnit source in a downloadable place that I could take a look at if I
get a chance?

Adam

On 08/01/2008, Ana Nelson <nelson.ana at gmail.com> wrote:
>
> I had some trouble getting gUnit working, I was getting Java Exceptions
> such as:
> Exception in thread "main" java.lang.NoSuchFieldError: type
>
> Eventually I changed my classpath to reference the official antlr release
> ( antlr-3.0.1) and not the intermediate build/early access version (
> antlr-2007-12-31.17), and recompiled the grammar I was testing with
> antlr-3.0.1 and that did the trick.
>
> I did try compiling gUnit.g with antlr-2007-12-31.17 to see if I could use
> the more recent version, but there's an issue with quote escaping so the
> generated .java files won't compile.
>
> Just posting this here in case anyone else has a similar problem.
>
> Are there any plans to make gUnit part of ANTLR? I would really like to
> have tests for my grammars and to stay up to date with recent versions of
> ANTLR (since I'm hoping to switch to the Ruby target if it gets more
> development).
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080108/0b75e99e/attachment.html 

From adam.rpconnelly at googlemail.com  Tue Jan  8 07:41:38 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Tue, 8 Jan 2008 15:41:38 +0000
Subject: [antlr-interest] Token Names
Message-ID: <b9a39b060801080741vb8bc3b3q8be41ab6d2115823@mail.gmail.com>

Hi,

When antlr's doing error reporting it uses the tokenNames array to get the
name of tokens that it couldn't parse (from what I can see).  If I want to
change what's displayed in the error message I can easily alter the values
in this array to do so, but is there a way to do this in the grammar?

Here's an example:

rule: expression ';' ;

could give a tokenNames array something like this:

public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "';'"
    };

whereas

rule: expression SEMI ;

SEMI: ';' ;

could give something like this:

public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "SEMI"
    };

Is there a way in the grammar to tell antlr to put the actual ';' in the
tokenNames array rather than the name "SEMI" (which apart from the innuendo
might not be amazingly useful to users :))?

Cheers,

Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080108/2edf2a70/attachment.html 

From antlr at jazillian.com  Tue Jan  8 07:44:41 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 08 Jan 2008 10:44:41 -0500
Subject: [antlr-interest] Natural language parsing
In-Reply-To: <483B5F3C-B157-466F-A23C-90CEB2967563@cs.usfca.edu>
References: <477FBF80.2010201@webspeed.dk> <4782AF61.2030509@jazillian.com>
	<483B5F3C-B157-466F-A23C-90CEB2967563@cs.usfca.edu>
Message-ID: <47839A69.3060801@jazillian.com>

Terence Parr wrote:
> But an amazingly large subset can be had with a top-down parser.  
> Successful NLP work always tries to apply grammatical structure 
> (according to best fit rather than deterministic like top-down LL 
> stuff) not just word frequencies.  Even backtracking is required by 
> humans when reading sentences; antlr could handle that part too. :)
>
So how would ANTLR help in trying to figure out grammatical structure if 
the approach is "best fit" rather than top-down LL?

From nelson.ana at gmail.com  Tue Jan  8 08:22:37 2008
From: nelson.ana at gmail.com (Ana Nelson)
Date: Tue, 8 Jan 2008 16:22:37 +0000
Subject: [antlr-interest] gUnit (Aug 20,
	2007) incompatible with ANTLR 3.1b intermediate builds
In-Reply-To: <b9a39b060801080655k175b6d27t7c0a6de6cd5df4e4@mail.gmail.com>
References: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>
	<b9a39b060801080655k175b6d27t7c0a6de6cd5df4e4@mail.gmail.com>
Message-ID: <a7d6d2740801080822o2dc39e02oc597f12e11c40f72@mail.gmail.com>

It's there in the gunit.jar file, just expand the jar.



On 08/01/2008, Adam Connelly <adam.rpconnelly at googlemail.com> wrote:
>
> One thing I'd be interested in finding out about is the compatibility with
> different languages other than Java.  I get the feeling at the moment that
> to use gUnit you have to use antlr to generate java sources that you then
> compile and pass to gUnit (although I could be wrong).  Are there any plans
> to support other languages ( i.e. C# :)) or to make it language agnostic
> (which I suspect will be a non-starter).
>
> It's just that I'd like to use something like gUnit for testing my
> grammars, but don't want to have to generate them for different target
> languages just for the sake of testing (although even that's probably easier
> than writing my own unit tests all the time).
>
> Is the gUnit source in a downloadable place that I could take a look at if
> I get a chance?
>
> Adam
>
> On 08/01/2008, Ana Nelson < nelson.ana at gmail.com> wrote:
> >
> > I had some trouble getting gUnit working, I was getting Java Exceptions
> > such as:
> > Exception in thread "main" java.lang.NoSuchFieldError: type
> >
> > Eventually I changed my classpath to reference the official antlr
> > release ( antlr-3.0.1) and not the intermediate build/early access
> > version (antlr-2007-12-31.17), and recompiled the grammar I was testing
> > with antlr-3.0.1 and that did the trick.
> >
> > I did try compiling gUnit.g with antlr-2007-12-31.17 to see if I could
> > use the more recent version, but there's an issue with quote escaping so the
> > generated .java files won't compile.
> >
> > Just posting this here in case anyone else has a similar problem.
> >
> > Are there any plans to make gUnit part of ANTLR? I would really like to
> > have tests for my grammars and to stay up to date with recent versions of
> > ANTLR (since I'm hoping to switch to the Ruby target if it gets more
> > development).
> >
> >
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080108/fe51f82d/attachment.html 

From kroepke at classdump.org  Tue Jan  8 08:57:41 2008
From: kroepke at classdump.org (=?ISO-8859-1?Q?Kay_R=F6pke?=)
Date: Tue, 8 Jan 2008 17:57:41 +0100
Subject: [antlr-interest] Beginner questions
In-Reply-To: <47825297.3080900@gmail.com>
References: <47825297.3080900@gmail.com>
Message-ID: <EF3589FB-2E83-4C5D-8996-633D2CBDF50C@classdump.org>

Hi!

On Jan 7, 2008, at 5:25 PM, Damien wrote:

> 1) My grammar runs fine on the input "d+f(-2)" but the interpreter  
> fails with "FailedPredicateException". Is "backtrack=true"  
> impossible in interpreted mode?

Currently not, no. I don't remember the exact problems with it, but it  
isn't implemented. You can use the debugger to attach to an external  
driver class, though. That should work.

>
> 2) Using the debugger on the input "d+f(-2)", the part of the parse  
> tree from atom > functionExpr > .. appears in double, the one on the  
> left being green. I can't find what that means.

That's a skipped parse tree when backtracking, IIRC. The last one in  
green is the one that matched.

>
> 3) I'm using java as the target language. I can't find how the  
> access the parse tree, only the AST with the option output=AST.


See http://www.antlr.org/wiki/pages/viewpage.action?pageId=1760

cheers,
-k
-- 
Kay R?pke
http://classdump.org/







From parrt at cs.usfca.edu  Tue Jan  8 09:21:22 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 8 Jan 2008 09:21:22 -0800
Subject: [antlr-interest] Natural language parsing
In-Reply-To: <47839A69.3060801@jazillian.com>
References: <477FBF80.2010201@webspeed.dk> <4782AF61.2030509@jazillian.com>
	<483B5F3C-B157-466F-A23C-90CEB2967563@cs.usfca.edu>
	<47839A69.3060801@jazillian.com>
Message-ID: <31EE15A7-0037-461D-A851-5E7F2D485F75@cs.usfca.edu>


On Jan 8, 2008, at 7:44 AM, Andy Tripp wrote:

> Terence Parr wrote:
>> But an amazingly large subset can be had with a top-down parser.   
>> Successful NLP work always tries to apply grammatical structure  
>> (according to best fit rather than deterministic like top-down LL  
>> stuff) not just word frequencies.  Even backtracking is required  
>> by humans when reading sentences; antlr could handle that part  
>> too. :)
>>
> So how would ANTLR help in trying to figure out grammatical  
> structure if the approach is "best fit" rather than top-down LL?

ANTLR could only handle a limited deterministic subset rather than  
full NLP and couldn't help in that area.  I'm just saying that  
grammatical structure is key to NLP.  Word freq don't cut it.  I'm  
paraphrasing Steven Pinker, a human language expert from some fancy- 
pants school back east. :)

Ter

From leon.antlr at mac.com  Tue Jan  8 09:40:37 2008
From: leon.antlr at mac.com (Leon Su)
Date: Tue, 8 Jan 2008 09:40:37 -0800
Subject: [antlr-interest] gUnit (Aug 20,
	2007) incompatible with ANTLR 3.1b intermediate builds
In-Reply-To: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>
References: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>
Message-ID: <241D6C1E-9E91-48AF-B628-68533492299C@mac.com>

Hi Ana,
Current gUnit is only compatible with latest ANTLR official version  
3.0.1 or version 3.0.
It does has the incompatible problem with the latest intermediate  
builds such as antlr-2007-12-31.17.
The problem will be solved in the next release of gunit, and sorry  
for the inconvenience.
Thanks for addressing the issue.

To Adam:
gUnit only supports Java as the target language currently, and the  
source is included in the gunit.jar as Ana mentioned.

Leon

On Jan 8, 2008, at 3:32 AM, Ana Nelson wrote:

> I had some trouble getting gUnit working, I was getting Java  
> Exceptions such as:
> Exception in thread "main" java.lang.NoSuchFieldError: type
>
> Eventually I changed my classpath to reference the official antlr  
> release ( antlr-3.0.1) and not the intermediate build/early access  
> version (antlr-2007-12-31.17), and recompiled the grammar I was  
> testing with antlr-3.0.1 and that did the trick.
>
> I did try compiling gUnit.g with antlr-2007-12-31.17 to see if I  
> could use the more recent version, but there's an issue with quote  
> escaping so the generated .java files won't compile.
>
> Just posting this here in case anyone else has a similar problem.
>
> Are there any plans to make gUnit part of ANTLR? I would really  
> like to have tests for my grammars and to stay up to date with  
> recent versions of ANTLR (since I'm hoping to switch to the Ruby  
> target if it gets more development).
>
>


From jimi at temporal-wave.com  Tue Jan  8 10:07:30 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 8 Jan 2008 10:07:30 -0800
Subject: [antlr-interest] a simple (not for me :)) grammar problem
In-Reply-To: <f0fcc6820801071557kfc21e7et7b434f2f8008f4f9@mail.gmail.com>
Message-ID: <"L5E67785300AD48b890CF00D88AE1C84F.1199816313.scalix.temporal-wave.com*"@MHS>

I think that the trick you are looking for is:

grammar harry;

start 
	:	(number_stuff)+
	;
	
number_stuff
	: (FLOAT | NUMBER) (DOT ID)?
	;
	
ID
	: ('a'..'z' | 'A'..'Z')+
	;
	
fragment
FLOAT
	: '0'..'9'+ '.' '0'..'9'
	;
	
NUMBER
	: ('0'..'9')+
		(
			 ('.' '0'..'9')=> ('.' ('0'..'9')+)
			 	{ $type = FLOAT; }
			|// Just an integer
		)
	;

DOT
	: '.'
	;
	
OTHER
	: . {$channel = HIDDEN; }
	;

If whitespace is significant to the parser then pass it back of course.

Jim

> -----Original Message-----
> From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> Sent: Monday, January 07, 2008 3:58 PM
> To: F?rat K???k
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] a simple (not for me :)) grammar problem
> 
> I have at least a partial answer to my own question.
> The generated lexer class contains the method mToken which throws a



From adam.rpconnelly at googlemail.com  Tue Jan  8 10:46:44 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Tue, 8 Jan 2008 18:46:44 +0000
Subject: [antlr-interest] gUnit (Aug 20,
	2007) incompatible with ANTLR 3.1b intermediate builds
In-Reply-To: <241D6C1E-9E91-48AF-B628-68533492299C@mac.com>
References: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>
	<241D6C1E-9E91-48AF-B628-68533492299C@mac.com>
Message-ID: <b9a39b060801081046r222d9b7dkef4a451a2e6878d7@mail.gmail.com>

Thanks for the replies.  I just didn't think of that (probably because I
don't normally use Java).

Cheers,

Adam

On 08/01/2008, Leon Su <leon.antlr at mac.com> wrote:
>
> Hi Ana,
> Current gUnit is only compatible with latest ANTLR official version
> 3.0.1 or version 3.0.
> It does has the incompatible problem with the latest intermediate
> builds such as antlr-2007-12-31.17.
> The problem will be solved in the next release of gunit, and sorry
> for the inconvenience.
> Thanks for addressing the issue.
>
> To Adam:
> gUnit only supports Java as the target language currently, and the
> source is included in the gunit.jar as Ana mentioned.
>
> Leon
>
> On Jan 8, 2008, at 3:32 AM, Ana Nelson wrote:
>
> > I had some trouble getting gUnit working, I was getting Java
> > Exceptions such as:
> > Exception in thread "main" java.lang.NoSuchFieldError: type
> >
> > Eventually I changed my classpath to reference the official antlr
> > release ( antlr-3.0.1) and not the intermediate build/early access
> > version (antlr-2007-12-31.17), and recompiled the grammar I was
> > testing with antlr-3.0.1 and that did the trick.
> >
> > I did try compiling gUnit.g with antlr-2007-12-31.17 to see if I
> > could use the more recent version, but there's an issue with quote
> > escaping so the generated .java files won't compile.
> >
> > Just posting this here in case anyone else has a similar problem.
> >
> > Are there any plans to make gUnit part of ANTLR? I would really
> > like to have tests for my grammars and to stay up to date with
> > recent versions of ANTLR (since I'm hoping to switch to the Ruby
> > target if it gets more development).
> >
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080108/5fde3b8e/attachment.html 

From zuper85 at hotmail.it  Tue Jan  8 12:59:14 2008
From: zuper85 at hotmail.it (Michele Bortolato)
Date: Tue, 8 Jan 2008 21:59:14 +0100
Subject: [antlr-interest] about portability of code
Message-ID: <BAY108-W220FA82345F92527384194D6480@phx.gbl>


Hi
First of all i ask for sorry for my creepy english.

I have to build an application consisting of a compiler (and other things)

For the building of the parser-lexer i will use antlrWorks but....

In the future, when the project will be completed, will i need to include antlr.jar in my project files or there are some method to generate a parser-lexer "stand-alone"?

Thanks



_________________________________________________________________
Conosci Doretta? Contattala, ? ora su Messenger!
http://www.doretta82.it/banner/index.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080108/4cfd7dcd/attachment.html 

From antlr at mirality.co.nz  Tue Jan  8 13:19:49 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 09 Jan 2008 10:19:49 +1300
Subject: [antlr-interest] Natural language parsing
In-Reply-To: <47839A69.3060801@jazillian.com>
References: <477FBF80.2010201@webspeed.dk> <4782AF61.2030509@jazillian.com>
	<483B5F3C-B157-466F-A23C-90CEB2967563@cs.usfca.edu>
	<47839A69.3060801@jazillian.com>
Message-ID: <20080108212006.955AE11EDA1@www.antlr.org>

At 04:44 9/01/2008, Andy Tripp wrote:
 >So how would ANTLR help in trying to figure out grammatical
 >structure if the approach is "best fit" rather than top-down
 >LL?

I'm fairly sure that something like Inform 7 (natural language 
based) *could* be parsed by something like ANTLR (though I'm also 
fairly sure that's not what it uses).

That's a case where the grammar is fairly restrictive, despite 
initial appearance; although one complication is that the source 
file can introduce new grammatical constructs.


From antlr at jazillian.com  Tue Jan  8 13:30:03 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Tue, 08 Jan 2008 16:30:03 -0500
Subject: [antlr-interest] Natural language parsing
In-Reply-To: <31EE15A7-0037-461D-A851-5E7F2D485F75@cs.usfca.edu>
References: <477FBF80.2010201@webspeed.dk> <4782AF61.2030509@jazillian.com>
	<483B5F3C-B157-466F-A23C-90CEB2967563@cs.usfca.edu>
	<47839A69.3060801@jazillian.com>
	<31EE15A7-0037-461D-A851-5E7F2D485F75@cs.usfca.edu>
Message-ID: <4783EB5B.40607@jazillian.com>

Terence Parr wrote:
>
> ANTLR could only handle a limited deterministic subset rather than 
> full NLP and couldn't help in that area.  I'm just saying that 
> grammatical structure is key to NLP.  Word freq don't cut it.  I'm 
> paraphrasing Steven Pinker, a human language expert from some 
> fancy-pants school back east. :)
My understanding is that the grammatical structure and word frequencies 
are all intertwined, too. So when you look for the verb in "Woods Eyes 
Masters", you might see that "eyes" is used as a verb less often than 
"masters" is, yet that's offset by the fact that sentences almost never 
end with a verb. And even then, if "Woods" doesn't turn out to be a noun 
which can perform the "eyes" action (as determined by word frequency), 
then we might backtrack and decide that "masters" is the verb after all.

All in all, NLP seems like a total crapshoot compared to parsing 
programming languages. Heck, even C++ and COBOL have SOME rules that 
come close :)

Andy


From jaluber at gmx.de  Tue Jan  8 13:39:24 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 08 Jan 2008 22:39:24 +0100
Subject: [antlr-interest] about portability of code
In-Reply-To: <BAY108-W220FA82345F92527384194D6480@phx.gbl>
References: <BAY108-W220FA82345F92527384194D6480@phx.gbl>
Message-ID: <4783ED8C.1060603@gmx.de>

Michele Bortolato schrieb:
> Hi
> First of all i ask for sorry for my creepy english.
> 
> I have to build an application consisting of a compiler (and other things)
> 
> For the building of the parser-lexer i will use antlrWorks but....
> 
> In the future, when the project will be completed, will i need to
> include antlr.jar in my project files or there are some method to
> generate a parser-lexer "stand-alone"?

Once you have created and compiled your classes, you have only to
provide the runtime (each target supplies its own). The original
antlr.jar isn't needed.

Johannes

From SWatt at infobal.com  Tue Jan  8 14:44:07 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Tue, 8 Jan 2008 17:44:07 -0500 
Subject: [antlr-interest] Natural language parsing
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DAD8C@EXSVR1>

[On with my cognitive scientist hat!]

Grammar less important than frequency may be. Start with verbs sentences
may. 

(Yes, I know it ends up sounding like Yoda.) Human language understanding
research has not lately followed the lexical -> grammatical -> semantic
pipeline path for all cases. A lot depends on the purpose of the
application. Information retrieval typically ignores all grammatical
structure in favour of word frequencies, because that supports robust
search, and if you have a decent query (and a large collection) to start
with, it's enough. If you need to map semantics, or are working with small
collections, these techniques are far less useful. Frequencies are handy,
but essentially they are heuristics of likelihood of information bearing.
However, people may be cued to process words "out of band" using other
tricks, like SWITCHING TO UPPER CASE (which you probably read before other
words without intending to) although grammatically this may not fit. 

I've been working with an eye-tracker, to explore how people read texts, and
they generally don't follow a wholly linear pattern. Some words are skipped
entirely, and there is a tendency to latch onto significant words, and even
step back to reprocess others in a new context, if time and resources
permit. Hence, many people entirely miss grammatical errors, and are
unbelievably robust in the face of language errors of all kinds. (Robustness
is why IR looks at work frequencies so much - it is a very reliable approach
in the face of errors.) The key is to think of the reader as an information
processor, trying to do a particular task. The nature of the task, how much
time they have, the source of the text, etc., all influence the strategies
they use. 

One interesting model is the predictor-substantiator style, developed by De
Jong in FRUMP. FRUMP consists of a two components: a predictor (designed to
make guesses about what the text is saying) and a substantiator (that looks
for evidence about those guesses). The two operate cyclically with lots of
backtracking. This is kind of like a *very* general parser, except that it
was originally intended to directly construct a semantic model not a
syntactic one, and it can more or less move to any token at any point in
processing. So, most standard parsers and grammars are like
easy-to-construct versions of this framework. Easy-to-construct is good,
most predictor-substantiator NLP systems are mammoth efforts in fairly
limited domains, yet they achieve a balance between the robustness of IR and
depth-of-processing of a grammar. 

The great thing about a grammar is that (especially in combination with a
part-of-speech tagger for term classification) it can get you a long way
quickly, especially with backtracking. Certainly, if I needed to build an
NLP system to extract some sort of meaning from texts in a limited domain on
a time budget, I'd start with some kind of grammar, even if it isn't
necessarily the right thing conceptually. However, the more robustness I
needed to achieve, the more I'd have to bend its rules, and there might come
a point where I ended up with something that didn't look much like a grammar
in any traditional sense. 

All the best
Stuart

-----Original Message-----
From: Andy Tripp [mailto:antlr at jazillian.com]
Sent: Tuesday, January 08, 2008 4:30 PM
To: Terence Parr
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Natural language parsing


Terence Parr wrote:
>
> ANTLR could only handle a limited deterministic subset rather than 
> full NLP and couldn't help in that area.  I'm just saying that 
> grammatical structure is key to NLP.  Word freq don't cut it.  I'm 
> paraphrasing Steven Pinker, a human language expert from some 
> fancy-pants school back east. :)
My understanding is that the grammatical structure and word frequencies 
are all intertwined, too. So when you look for the verb in "Woods Eyes 
Masters", you might see that "eyes" is used as a verb less often than 
"masters" is, yet that's offset by the fact that sentences almost never 
end with a verb. And even then, if "Woods" doesn't turn out to be a noun 
which can perform the "eyes" action (as determined by word frequency), 
then we might backtrack and decide that "masters" is the verb after all.

All in all, NLP seems like a total crapshoot compared to parsing 
programming languages. Heck, even C++ and COBOL have SOME rules that 
come close :)

Andy

From oscar at perex.org  Tue Jan  8 23:23:59 2008
From: oscar at perex.org (=?ISO-8859-1?Q?Oscar_P=E9rez?=)
Date: Wed, 9 Jan 2008 01:23:59 -0600
Subject: [antlr-interest] AntlWorks and CommonTokenStream derivated class
Message-ID: <f4c6db60801082323j62647a47had5a59cdce8f465d@mail.gmail.com>

Hi, I'm new in ANTLR.

I try to use a new TokenStream class (like PythonTokenStream) in antlrworks.
It generate the 'build' directory, with __Test__ class. How can I force
antlr to use my class?


Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080109/951b85e3/attachment.html 

From alexander at gaengel.de  Wed Jan  9 08:55:59 2008
From: alexander at gaengel.de (=?ISO-8859-15?Q?Alexander_G=E4ngel?=)
Date: Wed, 09 Jan 2008 17:55:59 +0100
Subject: [antlr-interest] REAL or int or Range
Message-ID: <4784FC9F.1040607@gaengel.de>

I have a Problem in My grammar

I try to decide if I got in Integer an Real or an Range like 0..9

It works for Int and Real but if I input 0..9 in Antlrworks in the Input 
frame is only 9 and the Parse Tree is like ths:

Where is the Rest of my Input?

My grammar is like this:
grammar test;
start    :
    uint_or_real
    |(uint_or_real RANGE uint_or_real)+;

uint_or_real
    :   
    UINT
    |REAL;

REAL
        :   
        UINT 
            (
                    Exponent FloatTypeSuffix?
                    |FloatTypeSuffix
                        |
                                (DOT (UINT Exponent? FloatTypeSuffix?
                        )
                )
            );


fragment
Exponent : ('e'|'E') ('+'|'-')? UINT ;
UINT : DIGIT_10+ ;

fragment DIGIT_10 : '0'..'9' ;

fragment
FloatTypeSuffix : ('f'|'F'|'d'|'D') ;

RANGE    :    '..';
DOT    :    '.';

WS    :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;};
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080109/8ee07091/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: parseTree.jpg
Type: image/jpeg
Size: 3680 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080109/8ee07091/attachment.jpg 

From firatkucuk at gmail.com  Wed Jan  9 09:14:13 2008
From: firatkucuk at gmail.com (=?ISO-8859-9?Q?F=FDrat_K=FC=E7=FCk?=)
Date: Wed, 9 Jan 2008 19:14:13 +0200
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <4784FC9F.1040607@gaengel.de>
References: <4784FC9F.1040607@gaengel.de>
Message-ID: <7385e6fe0801090914g11c13e29n9e16d0069d525266@mail.gmail.com>

this is my antlrworks interpreter output:



2008/1/9, Alexander G?ngel <alexander at gaengel.de>:
>
>  I have a Problem in My grammar
>
> I try to decide if I got in Integer an Real or an Range like 0..9
>
> It works for Int and Real but if I input 0..9 in Antlrworks in the Input
> frame is only 9 and the Parse Tree is like ths:
>
> Where is the Rest of my Input?
>
> My grammar is like this:
> grammar test;
> start    :
>     uint_or_real
>     |(uint_or_real RANGE uint_or_real)+;
>
> uint_or_real
>     :
>     UINT
>     |REAL;
>
> REAL
>         :
>         UINT
>             (
>                     Exponent FloatTypeSuffix?
>                     |FloatTypeSuffix
>                         |
>                                 (DOT (UINT Exponent? FloatTypeSuffix?
>                         )
>                 )
>             );
>
>
> fragment
> Exponent : ('e'|'E') ('+'|'-')? UINT ;
> UINT : DIGIT_10+ ;
>
> fragment DIGIT_10 : '0'..'9' ;
>
> fragment
> FloatTypeSuffix : ('f'|'F'|'d'|'D') ;
>
> RANGE    :    '..';
> DOT    :    '.';
>
> WS    :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;};
>



-- 
??r. G?r. F?rat K???k
ADAMYO Distance Learning
SAKARYA University / TURKEY
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080109/2cb03ff4/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/jpeg
Size: 3680 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080109/2cb03ff4/attachment-0001.jpe 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: result.png
Type: image/png
Size: 2723 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080109/2cb03ff4/attachment-0001.png 

From alexander at gaengel.de  Wed Jan  9 15:10:29 2008
From: alexander at gaengel.de (=?ISO-8859-9?Q?Alexander_G=E4ngel?=)
Date: Thu, 10 Jan 2008 00:10:29 +0100
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <7385e6fe0801090914g11c13e29n9e16d0069d525266@mail.gmail.com>
References: <4784FC9F.1040607@gaengel.de>
	<7385e6fe0801090914g11c13e29n9e16d0069d525266@mail.gmail.com>
Message-ID: <47855465.9010703@gaengel.de>

This is mysterious,

I tried it on another PC and still got only the 9

Some stats of the systems I tried

Both use Windows Vista Prof with java jdk1.6.0_10 and antlrworks 1.1.5
under Compiler I have set javac and Path C:\Program
Files\Java\jdk1.6.0_10\bin
for Classpath nothing is Checked

Alexander

F?rat K???k schrieb:
> this is my antlrworks interpreter output:
>
>
>
> 2008/1/9, Alexander G?ngel <alexander at gaengel.de
> <mailto:alexander at gaengel.de>>:
>
>     I have a Problem in My grammar
>
>     I try to decide if I got in Integer an Real or an Range like 0..9
>
>     It works for Int and Real but if I input 0..9 in Antlrworks in the
>     Input frame is only 9 and the Parse Tree is like ths:
>
>     Where is the Rest of my Input?
>
>     My grammar is like this:
>     grammar test;
>     start    :
>         uint_or_real
>         |(uint_or_real RANGE uint_or_real)+;
>
>     uint_or_real
>         :   
>         UINT
>         |REAL;
>
>     REAL
>             :   
>             UINT 
>                 (
>                         Exponent FloatTypeSuffix?
>                         |FloatTypeSuffix
>                             |
>                                     (DOT (UINT Exponent? FloatTypeSuffix?
>                             )
>                     )
>                 );
>
>
>     fragment
>     Exponent : ('e'|'E') ('+'|'-')? UINT ;
>     UINT : DIGIT_10+ ;
>
>     fragment DIGIT_10 : '0'..'9' ;
>
>     fragment
>     FloatTypeSuffix : ('f'|'F'|'d'|'D') ;
>
>     RANGE    :    '..';
>     DOT    :    '.';
>
>     WS    :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;};
>
>
>
>
> -- 
> ??r. G?r. F?rat K???k
> ADAMYO Distance Learning
> SAKARYA University / TURKEY
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/b044ba93/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: image/jpeg
Size: 3680 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/b044ba93/attachment.jpe 

From antlr at mirality.co.nz  Wed Jan  9 15:40:42 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 10 Jan 2008 12:40:42 +1300
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <4784FC9F.1040607@gaengel.de>
References: <4784FC9F.1040607@gaengel.de>
Message-ID: <20080109234101.E345E11EC29@www.antlr.org>

At 05:55 10/01/2008, Alexander G?ngel wrote:

>I have a Problem in My grammar
>
>I try to decide if I got in Integer an Real or an Range like 0..9
>
>It works for Int and Real but if I input 0..9 in 
>Antlrworks in the Input frame is only 9
[...]
>start    :
>     uint_or_real
>     |(uint_or_real RANGE uint_or_real)+;

Try changing this to:

start : statement EOF;

statement
   :  uint_or_real
   |  (uint_or_real RANGE uint_or_real)+
   ;

(That's a really odd grammar, by the way.  Why do 
you support multiple ranges but not multiple numbers?)
    


From alexander at gaengel.de  Wed Jan  9 16:17:19 2008
From: alexander at gaengel.de (=?UTF-8?B?QWxleGFuZGVyIEfDpG5nZWw=?=)
Date: Thu, 10 Jan 2008 01:17:19 +0100
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <r020f9k09Naqw1.RZmta@mi-ob.rzone.de>
References: <4784FC9F.1040607@gaengel.de> <r020f9k09Naqw1.RZmta@mi-ob.rzone.de>
Message-ID: <4785640F.3020607@gaengel.de>

It's still not working for me now I get


The Grammar is just an Test, cause it?s not working in a bigger Grammar
so I tried an Simpler one just with my Problem.

What I think is odd is that it works for F?rat K???k.

Alexander

Gavin Lambert schrieb:
> At 05:55 10/01/2008, Alexander G?ngel wrote:
>
>> I have a Problem in My grammar
>>
>> I try to decide if I got in Integer an Real or an Range like 0..9
>>
>> It works for Int and Real but if I input 0..9 in Antlrworks in the
>> Input frame is only 9
> [...]
>> start    :
>>     uint_or_real
>>     |(uint_or_real RANGE uint_or_real)+;
>
> Try changing this to:
>
> start : statement EOF;
>
> statement
>   :  uint_or_real
>   |  (uint_or_real RANGE uint_or_real)+
>   ;
>
> (That's a really odd grammar, by the way.  Why do you support multiple
> ranges but not multiple numbers?)
>   
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/9b8b6f98/attachment.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Export.png
Type: image/png
Size: 2142 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/9b8b6f98/attachment.png 

From antlr at mirality.co.nz  Wed Jan  9 17:26:28 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 10 Jan 2008 14:26:28 +1300
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <4785640F.3020607@gaengel.de>
References: <4784FC9F.1040607@gaengel.de> <r020f9k09Naqw1.RZmta@mi-ob.rzone.de>
	<4785640F.3020607@gaengel.de>
Message-ID: <20080110012647.1BC1A11E98C@www.antlr.org>

At 13:17 10/01/2008, Alexander G??ngel wrote:

>It's still not working for me

Hmmm.  It might be a prefixing problem (the two 
alts have the same prefix, so it's not sure which one to use).

The best solution would be to alter your source 
language; for example, this should work to 
distinguish a single number vs. range:

number_or_range : uint_or_real (RANGE uint_or_real)? ;

And then you could use this:

start : number_or_range+ EOF;

This will accept any mixture of numbers and 
ranges; eg "42" is valid, as is "42.1..50 72 
12..18.7".  This is different from what you originally had.


From antlr at shmuelhome.mine.nu  Wed Jan  9 18:13:55 2008
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Thu, 10 Jan 2008 04:13:55 +0200
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <4785640F.3020607@gaengel.de>
References: <4784FC9F.1040607@gaengel.de> <r020f9k09Naqw1.RZmta@mi-ob.rzone.de>
	<4785640F.3020607@gaengel.de>
Message-ID: <47857F63.2090800@shmuelhome.mine.nu>

Alexander G?ngel wrote:
>
> What I think is odd is that it works for F?rat K???k.
>
Maybe not so strange. In the debugger, I get the same as you but in the
interpreter I get the attached png.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: range.png
Type: image/png
Size: 2693 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/534c0b2e/attachment-0001.png 

From jimi at temporal-wave.com  Wed Jan  9 18:14:29 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 9 Jan 2008 18:14:29 -0800
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <47857F63.2090800@shmuelhome.mine.nu>
Message-ID: <"L4EC05BB791D14ef7A9B10EC3F72A640D.1199931955.scalix.temporal-wave.com*"@MHS>

The interpreter won't be able to deal with your specification I think, 
whereas the real generated code does. I gave out code for int vs float 
vs range some time back if you check the archives - that should do what 
you want.

Jim

> -----Original Message-----
> From: shmuel siegel [mailto:antlr at shmuelhome.mine.nu]
> Sent: Wednesday, January 09, 2008 6:14 PM
> To: Antlr Interest
> Subject: Re: [antlr-interest] REAL or int or Range
> 
> Alexander G?ngel wrote:
> >
> > What I think is odd is that it works for F?rat K???k.
> >
> Maybe not so strange. In the debugger, I get the same as you but in 
the
> interpreter I get the attached png.
> 
> 
> 
> No virus found in this incoming message.
> Checked by AVG Free Edition.
> Version: 7.5.516 / Virus Database: 269.19.0/1216 - Release Date: 
1/9/2008
> 10:16 AM
> 
> 


From Abhijit_Ghonge at infosys.com  Thu Jan 10 02:04:45 2008
From: Abhijit_Ghonge at infosys.com (Abhijit Nandkumar Ghonge)
Date: Thu, 10 Jan 2008 15:34:45 +0530
Subject: [antlr-interest] catch block in lexer rule
Message-ID: <13CAB19CBE2BDD49BC741F05E9FA4B5A102931CDEA@BLRKECMBX05.ad.infosys.com>


I'm using antlr 3.0 version. I wanted to add Exception handler in lexer rule as we can add in the parser rule; something like:

START: '<start>';
catch[RecognitionException re]{
                reporter.reportError(re);
}

Can I achieve such thing. As we can add a global @rulecatch in parser do we something similar to add for lexer rule. Please help.

~abhijit.


**************** CAUTION - Disclaimer *****************
This e-mail contains PRIVILEGED AND CONFIDENTIAL INFORMATION intended solely for the use of the addressee(s). If you are not the intended recipient, please notify the sender by e-mail and delete the original message. Further, you are not to copy, disclose, or distribute this e-mail or its contents to any other person and any such actions are unlawful. This e-mail may contain viruses. Infosys has taken every reasonable precaution to minimize this risk, but is not liable for any damage you may sustain as a result of any virus in this e-mail. You should carry out your own virus checks before opening the e-mail or attachment. Infosys reserves the right to monitor and review the content of all messages sent to or from this e-mail address. Messages sent to or from this e-mail address may be stored on the Infosys e-mail system.
***INFOSYS******** End of Disclaimer ********INFOSYS***
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/4e8af59f/attachment.html 

From nelson.ana at gmail.com  Thu Jan 10 03:41:22 2008
From: nelson.ana at gmail.com (Ana Nelson)
Date: Thu, 10 Jan 2008 11:41:22 +0000
Subject: [antlr-interest] gUnit (Aug 20,
	2007) incompatible with ANTLR 3.1b intermediate builds
In-Reply-To: <241D6C1E-9E91-48AF-B628-68533492299C@mac.com>
References: <a7d6d2740801080332k3dbdcc2epdffcd9f417f6cdbb@mail.gmail.com>
	<241D6C1E-9E91-48AF-B628-68533492299C@mac.com>
Message-ID: <a7d6d2740801100341x6068e2a9m5a3c7cacf8bf31c2@mail.gmail.com>

Hi, Leon,

Thanks for your reply, and thanks for gUnit. :-)

Do you plan to set up a project page for gUnit somewhere (with a public
source code repository)? Or will it be made part of ANTLR?

-Ana



On 08/01/2008, Leon Su <leon.antlr at mac.com> wrote:
>
> Hi Ana,
> Current gUnit is only compatible with latest ANTLR official version
> 3.0.1 or version 3.0.
> It does has the incompatible problem with the latest intermediate
> builds such as antlr-2007-12-31.17.
> The problem will be solved in the next release of gunit, and sorry
> for the inconvenience.
> Thanks for addressing the issue.
>
> To Adam:
> gUnit only supports Java as the target language currently, and the
> source is included in the gunit.jar as Ana mentioned.
>
> Leon
>
> On Jan 8, 2008, at 3:32 AM, Ana Nelson wrote:
>
> > I had some trouble getting gUnit working, I was getting Java
> > Exceptions such as:
> > Exception in thread "main" java.lang.NoSuchFieldError: type
> >
> > Eventually I changed my classpath to reference the official antlr
> > release ( antlr-3.0.1) and not the intermediate build/early access
> > version (antlr-2007-12-31.17), and recompiled the grammar I was
> > testing with antlr-3.0.1 and that did the trick.
> >
> > I did try compiling gUnit.g with antlr-2007-12-31.17 to see if I
> > could use the more recent version, but there's an issue with quote
> > escaping so the generated .java files won't compile.
> >
> > Just posting this here in case anyone else has a similar problem.
> >
> > Are there any plans to make gUnit part of ANTLR? I would really
> > like to have tests for my grammars and to stay up to date with
> > recent versions of ANTLR (since I'm hoping to switch to the Ruby
> > target if it gets more development).
> >
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/cf6fef9a/attachment.html 

From adam.rpconnelly at googlemail.com  Thu Jan 10 10:04:29 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Thu, 10 Jan 2008 18:04:29 +0000
Subject: [antlr-interest] Token Names
In-Reply-To: <47862367.50200@dii.unisi.it>
References: <b9a39b060801080741vb8bc3b3q8be41ab6d2115823@mail.gmail.com>
	<47862367.50200@dii.unisi.it>
Message-ID: <b9a39b060801101004y4a729b25vc53d2ab6df4ea413@mail.gmail.com>

I know I can do that, but what if I want to have it as a lexer token, but
still show the text of the token rather than the name?  Example:

rule
  :  expression SCOLON
  ;

SCOLON : ';'
  ;

I think I might have a partial workaround (by altering the way the parser
gets the token name), but I just wanted to know if there was any facility in
antlr to specify that you want to use the token text rather than the token
name.

I guess a reason for wanting to be able to do this would be if you planned
to have multiple lexers with the same parser (like if I wanted to have two
lexers, one which specifies an end of expression character as ';' and
another which specifies it as ':' - a bit contrived I'll agree).

Cheers,

Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/d7630884/attachment.html 

From parrt at cs.usfca.edu  Thu Jan 10 12:09:32 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 12:09:32 -0800
Subject: [antlr-interest] Full error reporting with the simplest grammar
In-Reply-To: <fgtorf$9gk$1@ger.gmane.org>
References: <fgtorf$9gk$1@ger.gmane.org>
Message-ID: <420EEF96-6D0E-48BF-8205-978AAD00360C@cs.usfca.edu>

Problem #1 Added

http://www.antlr.org:8888/browse/ANTLR-209


On Nov 7, 2007, at 5:29 PM, Curtis Clauson wrote:
> ----------
> Problem #2
>
> I originally did not have the "Invalid" token. I quickly discovered  
> that CommonTokenStream parses *ALL* of the tokens in the source on  
> the first call for a token. I had expected that it would only buffer  
> the consumed and look-ahead tokens so that any lexer exception would  
> be caught by the parser and could be reported in parser context. I  
> do not understand and it is undocumented for what purpose  
> CommonTokenStream does this.

Note: some of what you describe as undocumented is actually in the  
book ;)

> I also found that the lexer is not capable of propagating a  
> RecognitionException since nextToken has a catch hard-coded in.  
> There seems to be no way in the grammar to configure this outside of  
> overriding the nextToken() method.

That is by design, though not what some of you want obviously.  Just  
have it  Throw an error instead of an exception or some other kind of  
exception.


> The idea is to use AntLR "as is" as much as possible, so  
> implementing a new TokenStream that only buffers consumed or look- 
> ahead tokens is out.

THere is also an unbuffered stream if you take a look. There is  
absolutely no limitation in ANTLR that says it must buffer the input;  
I was just being efficient.

>  It seems that the only solution is to record lexer errors in the  
> token stream as <invalid> tokens. This could be done by defining  
> <invalid> tokens in the grammar with a type assigning action, or  
> overriding the nextToken() method and altering the exception handler.
>
> Both of these solutions work for my simple example. Also, since they  
> both eliminate the possibility of a RecognitionException being  
> thrown, they mask problem #1.
>
> I chose the grammar solution for this example, but it might not be  
> possible for a more complex lexer, and I do not know if this is a  
> solution that is consistent with the intended design.
>
> ----------
> Problem #3
>
> For this problem, I do not have a solution, and it is a show-stopper.
>   at
> The parser, when it sees an unexpected token, reports the error and  
> tries two kinds of recovery. If the following token is of the  
> expected type, it consumes the current token and returns a match,  
> skipping the unexpected token. If the current token can follow the  
> expected token, it returns a match and does not consume a token,  
> continuing with the current token as if it had seen the missing token.
>
> This means that match() might match the next or a non-existing token  
> instead of the current. However, when a rule action uses a token  
> reference, like in my grammar where the action in singleCharacter  
> that follows Character uses the $Character.text field to report the  
> string that was matched, that reference is obtained by AntLR before  
> the call to match() from the input stream like so:
>    Character1=(Token)input.LT(1);
>    match(input,Character,FOLLOW_Character_in_singleCharacter33);
>    out.println("Parsed token Character '" + Character1.getText() +  
> "'");
>
> If the call to match() performs error recovery, that token reference  
> will *NOT* be the one that matched.

That is correct and a known issue.	for v3.1 I'm thinking about turning  
off this feature because, while it is great in journal papers and to  
show off their recovery, actions are always screwed up by this error  
recovery in particular.  Any error recovery can cause trouble, but  
this one is particularly vexing. I believe you can simply override  
match and so on, but I am looking at this myself at the moment.

Ter

From parrt at cs.usfca.edu  Thu Jan 10 12:17:23 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 12:17:23 -0800
Subject: [antlr-interest] overlapping lexer rules
In-Reply-To: <fgu3vc$fo$1@ger.gmane.org>
References: <3b19324d0711021552obfb704ch9f52968449cc1490@mail.gmail.com>
	<fgu3vc$fo$1@ger.gmane.org>
Message-ID: <4807605E-F1F5-4821-A667-66C7C0003882@cs.usfca.edu>


On Nov 7, 2007, at 8:39 PM, Curtis Clauson wrote:

> The second example is technically valid because of the undocumented  
> fact that the *ORDER* of lexer rules is also significant.

google search finds

http://www.antlr.org/wiki/display/ANTLR3/Quick+Starter+on+Parser+Grammars+-+No+Past+Experience+Required

on first page.

> As to why this poor example is in the book, and why the effect of  
> rule order on the lexer is not appropriately documented - ya got me.

   It is clearly marked as an issue. perhaps you should look at the  
title which is "ambiguities and Nondeterminisms" as well is the text  
inside.

> cimbroken wrote:
>> quoting two examples from the book (pg.280-281):
>> 1)
>> INT : DIGIT+ ;
>> DIGIT : '0'..'9' ;
>> 2)
>> INT : '0'..'9' +;
>> FLOAT : '0'..'9' + ('.' '0'..'9'*)? ;
>> I don't understand very well why the second is *not* a mistake.

it IS a mistake, clearly specified in the book as a problem.

Ter

From tim.hilgenberg at hewitt.com  Thu Jan 10 12:48:35 2008
From: tim.hilgenberg at hewitt.com (Tim Hilgenberg)
Date: Thu, 10 Jan 2008 14:48:35 -0600
Subject: [antlr-interest] CN=Tim Hilgenberg/OU=National/O=Hewitt Associates
 is out of the office.
Message-ID: <OF4FA32A3C.539BF4F2-ON862573CC.00724FC2-862573CC.00724FC2@hewitt.com>



Regarding your message: antlr-interest Digest, Vol 38, Issue 36

I will be out of the office starting  10-Jan-2008 and will not return until
15-Jan-2008.

I will not be checking v-mail and email during this time period.
If you have urgent needs, contact John Hansen.


 
The information contained in this e-mail and any accompanying documents may contain information that is confidential or otherwise protected from disclosure. If you are not the intended recipient of this message, or if this message has been addressed to you in error, please immediately alert the sender by reply e-mail and then delete this message, including any attachments. Any dissemination, distribution or other use of the contents of this message by anyone other than the intended recipient is strictly prohibited. All messages sent to and from this e-mail address may be monitored as permitted by applicable law and regulations to ensure compliance with our internal policies and to protect our business. Emails are not secure and cannot be guaranteed to be error free as they can be intercepted, amended, lost or destroyed, or contain viruses. You are deemed to have accepted these risks if you communicate with us by email. 




From parrt at cs.usfca.edu  Thu Jan 10 13:32:45 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 13:32:45 -0800
Subject: [antlr-interest] Disabling recovery during parsing
In-Reply-To: <fh03eg$bu1$1@ger.gmane.org>
References: <BLU108-W33703E1BC2350F7D3FCB42C0880@phx.gbl>
	<fh03eg$bu1$1@ger.gmane.org>
Message-ID: <F7935B16-0E5A-4A4B-BB3E-E42F816569E9@cs.usfca.edu>


On Nov 8, 2007, at 2:42 PM, Curtis Clauson wrote:

> The entire error recovery and reporting systems are not  
> appropriately documented, and your frustration is well understood.
>
> Both the lexer and parser handle error recovery similarly, but with  
> different method calls.
>
> The lexer will call
>  recover(re)
> before it throws a RecognitionException, which consumes the  
> unexpected character. The top
>  nextToken()
> method has a hard-coded exception handler that catches the  
> RecognitionException, reports the error, and calls recover(re) again  
> (a bug in my opinion).

Excellent catch, Curtis.  Fixed by only consuming if not consume  
previously:

			catch (NoViableAltException nva) {
				reportError(nva);
				recover(nva); // throw out current char and try again
			}
			catch (RecognitionException re) {
				reportError(re);
				// match() routine has already called recover()
			}

fixed:

http://www.antlr.org:8888/browse/ANTLR-209


> One important, and also undocumented, note: CommonTokenStream will  
> lex the *entire* stream into tokens on the first token fetch. This  
> means the lexer will process and display all errors before the  
> parser processes the first token. So much for context.

Ah. I thought I had an unbuffered token buf; somebody else might have  
sent one to list.  Anyhoo, i only have UnBufferedTreeNodeStream at the  
moment.

> When the parser fails to match a token, it calls
>  mismatch(...)
> which creates the exception object and then calls
>  recoverFromMismatchedToken(...)
> This method looks ahead at the next token and if it matches, reports  
> the error, skips the unexpected token, and returns a successful  
> match. If it does not match, it calls
>  recoverFromMismatchedElement(...)
> This method tests if the unexpected token could follow the expected  
> token. If so, it will report the error, and return a successful  
> match (acting as if the missing token were found). If not, the  
> exception object is finally thrown.
>
> If you have not created your own rule exception handler in the  
> grammar, or configured the default exception handlers with  
> @rulecatch {}, then the exception will be caught by the default rule  
> exception handler, which will call
>  reportError(re)
>  recover(input, re)
>
> The recover(...) method in the parser will try to consume tokens  
> until one is found that allows it to resynchronize and continue  
> parsing the rest of the tokens.
>
> To change how recovery is handled in the parser, override
>  recoverFromMismatchedToken(...)
>  recoverFromMismatchedElement(...)
> to change those strategies, or override
>  mismatch(...)
> to change the whole before-exception response.
> To change how recovery is done in response to the RecoveryException,  
> configure or provide a different either default or per-rule  
> exception handler in the grammar, or override
>  reportError(re)
>  recover(input, re)
> in the parser.
>
> I had to spelunk the source to find all of this, since these  
> questions never get answered. I has worked for me so far.

Thanks for digging around in there.  code is doc ;)  Also, i'm pretty  
sure a lot of this is covered in book on how to override error message  
etc...

Ter

From parrt at cs.usfca.edu  Thu Jan 10 14:09:52 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 14:09:52 -0800
Subject: [antlr-interest] added a FAQ entry on making the lexer exit upon
	first lexical error
Message-ID: <E3B0B2D0-20DB-4291-BDED-4A3F62EA6D55@cs.usfca.edu>

http://www.antlr.org/wiki/pages/viewpage.action?pageId=5341217

Ter

From adam.rpconnelly at googlemail.com  Thu Jan 10 14:58:31 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Thu, 10 Jan 2008 22:58:31 +0000
Subject: [antlr-interest] Token Names
In-Reply-To: <b9a39b060801101004y4a729b25vc53d2ab6df4ea413@mail.gmail.com>
References: <b9a39b060801080741vb8bc3b3q8be41ab6d2115823@mail.gmail.com>
	<47862367.50200@dii.unisi.it>
	<b9a39b060801101004y4a729b25vc53d2ab6df4ea413@mail.gmail.com>
Message-ID: <b9a39b060801101458w63c337f9j5edaa47f3c1d9d3e@mail.gmail.com>

After discussing this with a colleague, we've come up with the following
idea:

Create a ErrorHandler interface that handles reporting errors.  The parser
accepts an ErrorHandler as an argument, and overrides the error
handling/reporting methods with calls to the ErrorHandler.  The handler is
generated from the list of tokens, and possibly altered by hand to specify
what text should be shown for which token (or maybe there can be something
more automatic).

This means that you could easily provide support for multiple languages, you
can tailor the error reporting without altering either the lexer or parser,
and regenerating the parser doesn't lose any changes you made to the token
names.

Does that seem sensible or am I imagining a problem that doesn't exist?

It would be nice to have some syntax in the lexer that let you specify the
textual representation of a token, for example (bearing in mind that I'm not
proposing the following syntax, just something that has this effect):

MYTOKEN
options { altName="my token"; }
: 'token'
;

Cheers,

Adam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/da26bd21/attachment.html 

From parrt at cs.usfca.edu  Thu Jan 10 15:06:58 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 15:06:58 -0800
Subject: [antlr-interest] Token Names
In-Reply-To: <b9a39b060801101004y4a729b25vc53d2ab6df4ea413@mail.gmail.com>
References: <b9a39b060801080741vb8bc3b3q8be41ab6d2115823@mail.gmail.com>
	<47862367.50200@dii.unisi.it>
	<b9a39b060801101004y4a729b25vc53d2ab6df4ea413@mail.gmail.com>
Message-ID: <07AFDC90-BB44-40AA-BEF2-4118B6226486@cs.usfca.edu>

Can't you override the error reporting method(s)?
Ter
On Jan 10, 2008, at 10:04 AM, Adam Connelly wrote:

> I know I can do that, but what if I want to have it as a lexer  
> token, but still show the text of the token rather than the name?   
> Example:
>
> rule
>   :  expression SCOLON
>   ;
>
> SCOLON : ';'
>   ;
>
> I think I might have a partial workaround (by altering the way the  
> parser gets the token name), but I just wanted to know if there was  
> any facility in antlr to specify that you want to use the token text  
> rather than the token name.
>
> I guess a reason for wanting to be able to do this would be if you  
> planned to have multiple lexers with the same parser (like if I  
> wanted to have two lexers, one which specifies an end of expression  
> character as ';' and another which specifies it as ':' - a bit  
> contrived I'll agree).
>
> Cheers,
>
> Adam


From myeates at jpl.nasa.gov  Thu Jan 10 15:31:09 2008
From: myeates at jpl.nasa.gov (Mathew Yeates)
Date: Thu, 10 Jan 2008 15:31:09 -0800
Subject: [antlr-interest] save a tree
Message-ID: <4786AABD.30005@jpl.nasa.gov>

No. I'm not a tree hugger!

 From within a java program I want to save (to disk) the AST I've 
created. Then I want to read it back into a python program. Anyone have 
any ideas about the simplest approach to this?

Mathew



From parrt at cs.usfca.edu  Thu Jan 10 15:56:51 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 15:56:51 -0800
Subject: [antlr-interest] new FAQ entry on how to emit an error token
Message-ID: <7B57CBE9-0EFB-404E-A9A0-14D67C0E7152@cs.usfca.edu>

http://www.antlr.org/wiki/pages/viewpage.action?pageId=5341230

From john.t.volk at gmail.com  Thu Jan 10 16:26:51 2008
From: john.t.volk at gmail.com (John Volk)
Date: Thu, 10 Jan 2008 18:26:51 -0600
Subject: [antlr-interest] Determining Imaginary Nodes
Message-ID: <3f3de9260801101626wd09b21eh63f7909d0c5f677f@mail.gmail.com>

Hi,

I'm wondering if there is a way to determine programmatically whether a
CommonTree node is an imaginary node (i.e., a node created in a rewrite
rule; not from the text of the file being parsed).

I've looked at a few possiblities.  For example, it seems that if the
CommonToken for a particular CommonTree node has -1 as it's tokenIndex, then
that node is imaginary.  This doesn't catch all the cases, though.  In some
cases where an imaginary node is a non-leaf node, it looks like the
tokenIndex of the token for that node is somehow derived from the node's
children.  This isn't true of all non-leaf nodes, though.  Many will have -1
as the tokenIndex.

Anyone have any ideas?  Hopefully, I'm being clear enough.

Thanks.

- John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/8b1733d4/attachment-0001.html 

From parrt at cs.usfca.edu  Thu Jan 10 16:39:54 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 16:39:54 -0800
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
Message-ID: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>

This has lots of little fixes and the composite grammar stuff  
working.  Look at

http://fisheye2.cenqua.com/browse/antlr-examples

for the composite-java example to show how I broke up the java grammar.

polydiff example to show how tree construction works in tree parser.  
tree rewriting.

Grab

http://www.antlr.org/download/build/antlr-2008-01-10.16.tar.gz

Ter

From cory.isaacson at compuflex.com  Thu Jan 10 16:46:32 2008
From: cory.isaacson at compuflex.com (Cory Isaacson)
Date: Thu, 10 Jan 2008 17:46:32 -0700
Subject: [antlr-interest] Reuse Lexer/Parser Objects
Message-ID: <014e01c853eb$6a5c1a20$3f144e60$@isaacson@compuflex.com>

I have a large number of Strings I want to parse, and as I need to do some
processing on each one, I elected to just build the parser to process one at
a time. However I noticed that all of the examples create a new lexer and
parser each time. Is this going to be inefficient? I could redesign things
to process a large group of strings, but they I would need to trigger my
processing after each parse (I know that can be done, but it seemed simpler
to iterate through the strings as I already have the iterator loop).

 

Thanks,

 

Cory

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/7f453056/attachment.html 

From cory.isaacson at compuflex.com  Thu Jan 10 18:01:34 2008
From: cory.isaacson at compuflex.com (Cory Isaacson)
Date: Thu, 10 Jan 2008 19:01:34 -0700
Subject: [antlr-interest] Reuse Lexer/Parser Objects
In-Reply-To: <014e01c853eb$6a5c1a20$3f144e60$@isaacson@compuflex.com>
References: <014e01c853eb$6a5c1a20$3f144e60$@isaacson@compuflex.com>
Message-ID: <016601c853f5$e5e4a900$b1adfb00$@isaacson@compuflex.com>

A follow-up question to this. The strings are all in files (numerous log
files). I need to process each log record individually. I'm also concerned
that if I implement the entire log file in a single pass, processing one log
record at a time, that the memory usage of the parser would be unmanageable.

 

Again, any comments will be very helpful.

 

Thanks,

 

Cory

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cory Isaacson
Sent: Thursday, January 10, 2008 5:47 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Reuse Lexer/Parser Objects

 

I have a large number of Strings I want to parse, and as I need to do some
processing on each one, I elected to just build the parser to process one at
a time. However I noticed that all of the examples create a new lexer and
parser each time. Is this going to be inefficient? I could redesign things
to process a large group of strings, but they I would need to trigger my
processing after each parse (I know that can be done, but it seemed simpler
to iterate through the strings as I already have the iterator loop).

 

Thanks,

 

Cory

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/565923c8/attachment.html 

From parrt at cs.usfca.edu  Thu Jan 10 18:22:23 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 10 Jan 2008 18:22:23 -0800
Subject: [antlr-interest] Determining Imaginary Nodes
In-Reply-To: <3f3de9260801101626wd09b21eh63f7909d0c5f677f@mail.gmail.com>
References: <3f3de9260801101626wd09b21eh63f7909d0c5f677f@mail.gmail.com>
Message-ID: <F84A3B94-77A1-445B-AF51-D92F7F6F4993@cs.usfca.edu>


On Jan 10, 2008, at 4:26 PM, John Volk wrote:

> Hi,
>
> I'm wondering if there is a way to determine programmatically  
> whether a CommonTree node is an imaginary node (i.e., a node created  
> in a rewrite rule; not from the text of the file being parsed).
>
> I've looked at a few possiblities.  For example, it seems that if  
> the CommonToken for a particular CommonTree node has -1 as it's  
> tokenIndex, then that node is imaginary.  This doesn't catch all the  
> cases, though.  In some cases where an imaginary node is a non-leaf  
> node, it looks like the tokenIndex of the token for that node is  
> somehow derived from the node's children.  This isn't true of all  
> non-leaf nodes, though.  Many will have -1 as the tokenIndex.

Imaginary nodes can be created from real tokens, in which case I copy  
all known info (such as index) into the new node/token.  Why do you  
need this, btw?  You can probably use a TreeAdaptor to mark them  
specially in create().
Ter

From cory.isaacson at compuflex.com  Thu Jan 10 20:47:30 2008
From: cory.isaacson at compuflex.com (Cory Isaacson)
Date: Thu, 10 Jan 2008 21:47:30 -0700
Subject: [antlr-interest] Reuse Lexer/Parser Objects
In-Reply-To: <016601c853f5$e5e4a900$b1adfb00$@isaacson@compuflex.com>
References: <014e01c853eb$6a5c1a20$3f144e60$@isaacson@compuflex.com>
	<016601c853f5$e5e4a900$b1adfb00$@isaacson@compuflex.com>
Message-ID: <018701c8540d$1429a240$3c7ce6c0$@isaacson@compuflex.com>

I ended up reinitializing the same lexer, token and parser objects for each
string. It seems very fast and memory efficient this way, so unless anyone
has a better suggestion I'll go with this.

 

Cory

 

From: Cory Isaacson [mailto:cory.isaacson at compuflex.com] 
Sent: Thursday, January 10, 2008 7:02 PM
To: 'Cory Isaacson'; antlr-interest at antlr.org
Subject: RE: [antlr-interest] Reuse Lexer/Parser Objects

 

A follow-up question to this. The strings are all in files (numerous log
files). I need to process each log record individually. I'm also concerned
that if I implement the entire log file in a single pass, processing one log
record at a time, that the memory usage of the parser would be unmanageable.

 

Again, any comments will be very helpful.

 

Thanks,

 

Cory

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cory Isaacson
Sent: Thursday, January 10, 2008 5:47 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Reuse Lexer/Parser Objects

 

I have a large number of Strings I want to parse, and as I need to do some
processing on each one, I elected to just build the parser to process one at
a time. However I noticed that all of the examples create a new lexer and
parser each time. Is this going to be inefficient? I could redesign things
to process a large group of strings, but they I would need to trigger my
processing after each parse (I know that can be done, but it seemed simpler
to iterate through the strings as I already have the iterator loop).

 

Thanks,

 

Cory

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080110/2ec36dce/attachment-0001.html 

From guntiso at latnet.lv  Thu Jan 10 20:53:56 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Fri, 11 Jan 2008 06:53:56 +0200
Subject: [antlr-interest] RFE: support for clean grammar
Message-ID: <1200027236.4786f66443334@clients.latnet.lv>

For those [few?] of us who want grammar separated from implementation,
there should be some easy way to do that. It gives us (blah blah...):

- independence of target language
- independence of antlr version & antlr internals
- ability to use the same grammar file to generate
  parsers fitted for various purposes
  (highlighting, editing, interpreting, compiling, ...)
- simplified testing and debugging
- ...

(!) I believe it can be achieved in many cases with the following
very-easy-to-implement *command line* options:

  lexer.package
  parser.package
  lexer.superclass
  parser.superclass

To cover the rest, two things should be supported by *antlr grammar*
i.e. in target language independent way:

  no-arg method call (action)
  no-arg boolean function call (predicate)

That's it. This is one step away,
we can have (first in the world?) portable grammars in few hours

Please correct me if I am wrong or missing something

Thanks,
Guntis


From guntiso at latnet.lv  Thu Jan 10 22:02:43 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Fri, 11 Jan 2008 08:02:43 +0200
Subject: [antlr-interest] Token Names
In-Reply-To: <07AFDC90-BB44-40AA-BEF2-4118B6226486@cs.usfca.edu>
References: <b9a39b060801080741vb8bc3b3q8be41ab6d2115823@mail.gmail.com>
	<47862367.50200@dii.unisi.it>
	<b9a39b060801101004y4a729b25vc53d2ab6df4ea413@mail.gmail.com>
	<07AFDC90-BB44-40AA-BEF2-4118B6226486@cs.usfca.edu>
Message-ID: <1200031363.478706831706f@clients.latnet.lv>

> Can't you override the error reporting method(s)?
> Ter

Yes, but...

This has been discussed before, I'll try to explain.

- it is flexible
  allows to reuse the same parser in different environments
  by providing different error handlers

- it is simple
  one glance at API + some programming expierence
  is enough to understand it

- it is not complex
  does not require to dig wiki and/or code
  does not require to understand antlr internals
  does not require to hack 4 methods

- it is what people expect
  many projects use this approach

- it does not pollute grammar
  error handling has nothing to do with grammar

- System.err is not flexible and not usable in production, is it?
  So everybody has to override exception handling anyway.
  If so, why not have flexible API in the first place?

- it will make this project look a bit more mature

I think adding some 15 lines of code for this is well worth it

Guntis


From dmitry.gusev at gmail.com  Fri Jan 11 06:32:17 2008
From: dmitry.gusev at gmail.com (Dmitry Gusev)
Date: Fri, 11 Jan 2008 17:32:17 +0300
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005
Message-ID: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>

Running Antrl3.Tool.exe for c# can't find vs2005 message format. Any ways to
fix the issue?

..\..\tools\Antlr3.Tool.exe -message-format vs2005 Expression.g
ANTLR Parser Generator  Version 3.0 (May 17, 2007)  1989-2007
no such message format file
org/antlr/tool/templates/messages/formats/vs2005.stg retrying with default
ANTLR format

-- 
Dmitry Gusev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080111/d60be6fe/attachment.html 

From JALuber at gmx.de  Fri Jan 11 06:58:12 2008
From: JALuber at gmx.de (Johannes Luber)
Date: Fri, 11 Jan 2008 15:58:12 +0100
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005
In-Reply-To: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>
References: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>
Message-ID: <20080111145812.209910@gmx.net>

> Running Antrl3.Tool.exe for c# can't find vs2005 message format. Any ways
> to
> fix the issue?
> 
> ..\..\tools\Antlr3.Tool.exe -message-format vs2005 Expression.g
> ANTLR Parser Generator  Version 3.0 (May 17, 2007)  1989-2007
> no such message format file
> org/antlr/tool/templates/messages/formats/vs2005.stg retrying with default
> ANTLR format
> 
> -- 
> Dmitry Gusev

Looking the file in question I notice that it is merely an annotated copy of the normal ANTLR format file. A quick google search didn't show up any link describing the VS 2005 format, so I can't fix it. :(

Johannes
-- 
Ist Ihr Browser Vista-kompatibel? Jetzt die neuesten 
Browser-Versionen downloaden: http://www.gmx.net/de/go/browser

From yotommy at gmail.com  Fri Jan 11 08:07:42 2008
From: yotommy at gmail.com (Tom Smith)
Date: Fri, 11 Jan 2008 11:07:42 -0500
Subject: [antlr-interest] gUnit support for non-default lexer package?
Message-ID: <82dc0d190801110807t45807700n87fb594a70abb17b@mail.gmail.com>

Hello,

It appears that gUnit only supports non-default package definitions for the
parser, not the lexer.  Can anyone confirm or deny?

Thanks,
Tom.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080111/f9d478cb/attachment.html 

From john.t.volk at gmail.com  Fri Jan 11 08:20:30 2008
From: john.t.volk at gmail.com (John Volk)
Date: Fri, 11 Jan 2008 10:20:30 -0600
Subject: [antlr-interest] Determining Imaginary Nodes
In-Reply-To: <F84A3B94-77A1-445B-AF51-D92F7F6F4993@cs.usfca.edu>
References: <3f3de9260801101626wd09b21eh63f7909d0c5f677f@mail.gmail.com>
	<F84A3B94-77A1-445B-AF51-D92F7F6F4993@cs.usfca.edu>
Message-ID: <3f3de9260801110820n37dfa649jd5c3fc47e14a5ac2@mail.gmail.com>

On Jan 10, 2008 8:22 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> On Jan 10, 2008, at 4:26 PM, John Volk wrote:
>
> >> Hi,
> >>
> >> I'm wondering if there is a way to determine programmatically
> >> whether a CommonTree node is an imaginary node (i.e., a node created
> >> in a rewrite rule; not from the text of the file being parsed).
> >>
> >> I've looked at a few possiblities.  For example, it seems that if
> >> the CommonToken for a particular CommonTree node has -1 as it's
> >> tokenIndex, then that node is imaginary.  This doesn't catch all the
> >> cases, though.  In some cases where an imaginary node is a non-leaf
> >> node, it looks like the tokenIndex of the token for that node is
> >> somehow derived from the node's children.  This isn't true of all
> >> non-leaf nodes, though.  Many will have -1 as the tokenIndex.
>
> >Imaginary nodes can be created from real tokens, in which case I copy
> >all known info (such as index) into the new node/token.  Why do you
> >need this, btw?  You can probably use a TreeAdaptor to mark them
> >specially in create().
> >Ter


Basically, I'm creating an AST, doing some processing on it, and then
attempting to highlight relevant tokens in a GUI.  The processing step might
tell me that, for example, the ALT token created by the ANTLRv3 grammar
needs to be highlighted.  I need to be able to determine that the ALT token
is not actually present in the text of the grammar I'm parsing, and I need
to be able to do this for arbitrary grammars.

TreeAdaptor is the way to do this?  I'm not very familiar with that really,
but I'm sure there's stuff out on the web.

- John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080111/491824f2/attachment.html 

From parrt at antlr.org  Fri Jan 11 11:18:42 2008
From: parrt at antlr.org (Terence Parr)
Date: Fri, 11 Jan 2008 11:18:42 -0800
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <be9e4140801060848y575f9302t9b4fdfd5b20cb77d@mail.gmail.com>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
	<be9e4140801060848y575f9302t9b4fdfd5b20cb77d@mail.gmail.com>
Message-ID: <515552DB-0C5E-45D6-8A05-85332619074C@antlr.org>

Hi Alessandro. thanks for the suggestion.  Yes, I've been thinking  
about this problem and it is even more general.  What do you do about  
actions that must execute after recovery even though they refer to a  
token that does not exist?!

The unfortunate truth comes down to the following: single token  
insertion and deletion recovery with in an alternative is really sexy  
for journal papers, but I believe I've convinced myself that they are  
not practical.  Well, at least in the presence of actions.

The  Simple solution is to turn this off, relying on a normal "exit  
rule upon syntax error" mechanism but leave the insertion and deletion  
mechanism as an option by overriding methods.

Ter
On Jan 6, 2008, at 8:48 AM, Alessandro wrote:

> Hello,
> (sorry for my bad english)
>
> I can see that there is a problem with token deletion/insertion if you
> are also building trees.
> Take this rule, for exemple :
>
> test	:	'var' ID ';'    -> ^('var' ID);
>
> If the input if "var ;", the token insertion system detect that the
> token "ID" is missing, then report the error, but continue parsing.
>
> If you look closer to the generated code, you will see :
>
> -----
> ID2=(Token)input.LT(1); // save ID2
> match(input,ID,FOLLOW_ID_in_test26);
> stream_ID.add(ID2); // ID2 have a bad reference
> ----
>
> ID2 contains a reference to the token ';' and not to the token ID. The
> "match" procedure doesn't thow any exception because of the "token
> insertion" system.
>
> So the resulting tree will be in reality ^( 'var' ';') ....and it is
> totally incorrect, am I right ?
>
> If I want to use the "token deletion/insertion symbol" with tree
> building, can I modify the "match" procedure in order to modify, for
> instance, the content of "ID2" ( without altering the reference) ?
>
> I imagined a workaround. ( LA(i) is the token at the index
> current_pos+i in the stream ).
>
> if there is a token insertion, do this in the "match" procedure :
>
> 1. add the "special" imaginary token (matching the missing token) in
> the stream at the postion LA(2) (position is wrong now). The stream
> must allow token insertion.
> 2. Swap (contents and not references) LA(1) and LA(2). (you have to
> correct index informations)
> 3. ID2 still has a reference to LA(1), but the content of the token is
> now "special imaginary ID token".
>
>
> if there is a token deletion, do this in the "match" procedure :
>
> 1. Save LA(1) content to a temporary variable : temp_var
> 2. Copy the content of LA(2) in LA(1)
> 3. Copy the content of temp_var in LA(2)
> 4. Swap (references only) LA(1) AND LA(2)
> 5. ID2 has reference to **OLD** LA(1), but now it is LA(2).
>
>
> In the commonTreeAdaptator.create procedure :
>
> 1. if the token is a "special" imaginary token : return an ERROR node
> (like Terence proposal)
> 2. else : create a node like usual.
>
> What do you think about this this (non-tested) workaround ?
>
> The best solution, I think, is that "match" procedure returns the
> reference of the real matched token.
>
> On Dec 2, 2007 8:24 PM, Terence Parr <parrt at antlr.org> wrote:
>> hi,
>>
>> Currently syntax errors cause invalid trees and possibly even runtime
>> exceptions when building ASTs. What we really need I believe is to
>> have rules that encounter syntax errors return an ERROR node of some
>> sort that records where the error occurred and, with luck, the tokens
>> consumed during recovery. I started an improvement request:
>>
>> http://www.antlr.org:8888/browse/ANTLR-193
>>
>> The basic idea is that ERROR nodes get used in place of ASTs that
>> would normally be produced by rule indications.  For example, the
>> following rule would return a valid AST except for the subtrees
>> associated with rule refs in encountering syntax errors:
>>
>> forDecl : 'for' '(' decl ';' expr ';' expr ')' stat -> ... ;
>>
>> If there is an error inside decl, the tree would return
>>
>> ^('for' ERROR subtree-expr subtree-expr)
>>
>> This effectively means that I must turn off the single token
>> insertion and deletion that occurs automatically within a single
>> rule.  If a syntax error occurs, the immediately surrounding rule
>> must terminate in return an error node.
>>
>> Does this make sense? I would like to stick this into 3.1 release.
>>
>> Ter
>>


From yotommy at gmail.com  Fri Jan 11 11:48:46 2008
From: yotommy at gmail.com (Tom Smith)
Date: Fri, 11 Jan 2008 14:48:46 -0500
Subject: [antlr-interest] gUnit support for non-default lexer package?
In-Reply-To: <82dc0d190801110807t45807700n87fb594a70abb17b@mail.gmail.com>
References: <82dc0d190801110807t45807700n87fb594a70abb17b@mail.gmail.com>
Message-ID: <82dc0d190801111148i66b66d60ya5cfeeb0c2dacc1b@mail.gmail.com>

I was mistaken --- it seems that gUnits header declaration applies to both
lexer and parser.

On Jan 11, 2008 11:07 AM, Tom Smith <yotommy at gmail.com> wrote:

> Hello,
>
> It appears that gUnit only supports non-default package definitions for
> the parser, not the lexer.  Can anyone confirm or deny?
>
> Thanks,
> Tom.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080111/7312c87f/attachment.html 

From pink at odahoda.de  Fri Jan 11 12:06:39 2008
From: pink at odahoda.de (Benjamin Niemann)
Date: Fri, 11 Jan 2008 21:06:39 +0100
Subject: [antlr-interest] save a tree
References: <4786AABD.30005@jpl.nasa.gov>
Message-ID: <fm8i8f$186$1@ger.gmane.org>

Hi Mathew,

Mathew Yeates wrote:
>  From within a java program I want to save (to disk) the AST I've
> created. Then I want to read it back into a python program. Anyone have
> any ideas about the simplest approach to this?

I'm not aware of any format, package, whatever (something that could
(de)serialize custom objects cross language) that could help you here - and
ANTLR does not offer anything here. So you probably have to build your own
serialization in Java and deserialize in Python - and ANTLR does not offer
anything here.
Just walk to AST and dump all info that you need in a easy to parse format
and read it back in Python building the nodes along the way.

-Ben

-- 
Benjamin Niemann
Email: pink at odahoda dot de
WWW: http://pink.odahoda.de/


From parrt at cs.usfca.edu  Fri Jan 11 12:53:50 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 11 Jan 2008 12:53:50 -0800
Subject: [antlr-interest] save a tree
In-Reply-To: <fm8i8f$186$1@ger.gmane.org>
References: <4786AABD.30005@jpl.nasa.gov> <fm8i8f$186$1@ger.gmane.org>
Message-ID: <711E9403-F70B-4D7F-B7C0-10D18A45286A@cs.usfca.edu>

isn't there a "save as XML" method or somethign?
Ter
On Jan 11, 2008, at 12:06 PM, Benjamin Niemann wrote:

> Hi Mathew,
>
> Mathew Yeates wrote:
>> From within a java program I want to save (to disk) the AST I've
>> created. Then I want to read it back into a python program. Anyone  
>> have
>> any ideas about the simplest approach to this?
>
> I'm not aware of any format, package, whatever (something that could
> (de)serialize custom objects cross language) that could help you  
> here - and
> ANTLR does not offer anything here. So you probably have to build  
> your own
> serialization in Java and deserialize in Python - and ANTLR does not  
> offer
> anything here.
> Just walk to AST and dump all info that you need in a easy to parse  
> format
> and read it back in Python building the nodes along the way.
>
> -Ben
>
> -- 
> Benjamin Niemann
> Email: pink at odahoda dot de
> WWW: http://pink.odahoda.de/
>


From john.t.volk at gmail.com  Fri Jan 11 13:28:24 2008
From: john.t.volk at gmail.com (John Volk)
Date: Fri, 11 Jan 2008 15:28:24 -0600
Subject: [antlr-interest] Custom TreeAdaptor Examples
Message-ID: <3f3de9260801111328t20313d6age0a26fc051f5876f@mail.gmail.com>

Hi,

This is a followup to my previous question about imaginary nodes.  I'm
pretty sure I see how custom TreeAdaptors can be used to mark imaginary
nodes.  The only thing left to figure out is how to plug my adaptor into the
Parser I'm creating to read the input file.  I've found some stuff on the
web, but nothing that really provides the code for the entire example.  The
most helpful thing I've found is this:
http://www.antlr.org/wiki/display/ANTLR3/Interfacing+AST+with+Java  But, it
still leaves me a bit confused.  For example, what type is HtmlDoc?  Any
help is greatly appreciated.

- John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080111/c84c2cc2/attachment.html 

From lgcraymer at yahoo.com  Fri Jan 11 14:45:35 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Fri, 11 Jan 2008 14:45:35 -0800 (PST)
Subject: [antlr-interest] Error nodes created upon syntax error
Message-ID: <219102.84839.qm@web55903.mail.re3.yahoo.com>

I'll throw in my 2 cents.  Back when IBM was going to conquer the world with PL/I, there was a  compiler ("PL/C") for the language out of Cornell which had the "nifty" feature that it did spell checking on keywords.  If you typed "ptu", the compiler would interpret this as "put".  Somehow, this never made it into the mainstream--real programs have too many symbols that might be mangled by a spell-checker.  The real problem is that errors in programs epitomize Murphy's Law--whatever can go wrong will go wrong--and there is no magic solution for error handling.  Most errors are detail errors, there are often few or no error patterns that are easily recognized by a digital machine.  Human pattern recognition, on the other hand, is very good--especially if hints as to where the problem lies can be passed along.

The upshot of this is that there are three elements of an error-handling system:
    1.)  Resynchronization, usually via (multiple) token deletion.
    2.)  Recording the error state.
    3.)  Intelligible error reporting.

Resynchronization has to be done at the grammar level--only the developer can identify the points in the grammar that lend themselves to resynchronization.  Recording mechanisms depend somewhat on further processing steps but also on the choice of resynchronization points.  Intelligible error reporting is both art and highly error-prone:  rarely does the developer understand the user's perspective on errors well enough to give the right hints.  "The Devil is in the details!"

That said, I suspect that one of the tricks that could simplify ANTLR error handling is to take advantage of hidden "channels"--newlines, comments, and other forms of whitespace are often good hints for synchronization.

--Loring

----- Original Message ----
> From: Terence Parr <parrt at antlr.org>
> To: Alessandro <alessnet at gmail.com>
> Cc: antlr-interest Interest <antlr-interest at antlr.org>
> Sent: Friday, January 11, 2008 11:18:42 AM
> Subject: Re: [antlr-interest] Error nodes created upon syntax error
> 
> Hi Alessandro. thanks for the suggestion.  Yes, I've been thinking  
> about this problem and it is even more general.  What do you do about  
> actions that must execute after recovery even though they refer to a  
> token that does not exist?!
> 
> The unfortunate truth comes down to the following: single token  
> insertion and deletion recovery with in an alternative is really sexy  
> for journal papers, but I believe I've convinced myself that they are  
> not practical.  Well, at least in the presence of actions.
> 
> The  Simple solution is to turn this off, relying on a normal "exit  
> rule upon syntax error" mechanism but leave the insertion and
> deletion
> 
  
> mechanism as an option by overriding methods.
> 
> Ter
> On Jan 6, 2008, at 8:48 AM, Alessandro wrote:
> 
> > Hello,
> > (sorry for my bad english)
> >
> > I can see that there is a problem with token deletion/insertion
> if
> 
 you
> > are also building trees.
> > Take this rule, for exemple :
> >
> > test    :    'var' ID ';'    -> ^('var' ID);
> >
> > If the input if "var ;", the token insertion system detect that the
> > token "ID" is missing, then report the error, but continue parsing.
> >
> > If you look closer to the generated code, you will see :
> >
> > -----
> > ID2=(Token)input.LT(1); // save ID2
> > match(input,ID,FOLLOW_ID_in_test26);
> > stream_ID.add(ID2); // ID2 have a bad reference
> > ----
> >
> > ID2 contains a reference to the token ';' and not to the token
> ID.
> 
 The
> > "match" procedure doesn't thow any exception because of the "token
> > insertion" system.
> >
> > So the resulting tree will be in reality ^( 'var' ';') ....and it is
> > totally incorrect, am I right ?
> >
> > If I want to use the "token deletion/insertion symbol" with tree
> > building, can I modify the "match" procedure in order to modify, for
> > instance, the content of "ID2" ( without altering the reference) ?
> >
> > I imagined a workaround. ( LA(i) is the token at the index
> > current_pos+i in the stream ).
> >
> > if there is a token insertion, do this in the "match" procedure :
> >
> > 1. add the "special" imaginary token (matching the missing token) in
> > the stream at the postion LA(2) (position is wrong now). The stream
> > must allow token insertion.
> > 2. Swap (contents and not references) LA(1) and LA(2). (you have to
> > correct index informations)
> > 3. ID2 still has a reference to LA(1), but the content of the
> token
> 
 is
> > now "special imaginary ID token".
> >
> >
> > if there is a token deletion, do this in the "match" procedure :
> >
> > 1. Save LA(1) content to a temporary variable : temp_var
> > 2. Copy the content of LA(2) in LA(1)
> > 3. Copy the content of temp_var in LA(2)
> > 4. Swap (references only) LA(1) AND LA(2)
> > 5. ID2 has reference to **OLD** LA(1), but now it is LA(2).
> >
> >
> > In the commonTreeAdaptator.create procedure :
> >
> > 1. if the token is a "special" imaginary token : return an ERROR node
> > (like Terence proposal)
> > 2. else : create a node like usual.
> >
> > What do you think about this this (non-tested) workaround ?
> >
> > The best solution, I think, is that "match" procedure returns the
> > reference of the real matched token.
> >
> > On Dec 2, 2007 8:24 PM, Terence Parr  wrote:
> >> hi,
> >>
> >> Currently syntax errors cause invalid trees and possibly
> even
> 
 runtime
> >> exceptions when building ASTs. What we really need I believe is to
> >> have rules that encounter syntax errors return an ERROR node of some
> >> sort that records where the error occurred and, with luck,
> the
> 
 tokens
> >> consumed during recovery. I started an improvement request:
> >>
> >> http://www.antlr.org:8888/browse/ANTLR-193
> >>
> >> The basic idea is that ERROR nodes get used in place of ASTs that
> >> would normally be produced by rule indications.  For example, the
> >> following rule would return a valid AST except for the subtrees
> >> associated with rule refs in encountering syntax errors:
> >>
> >> forDecl : 'for' '(' decl ';' expr ';' expr ')' stat -> ... ;
> >>
> >> If there is an error inside decl, the tree would return
> >>
> >> ^('for' ERROR subtree-expr subtree-expr)
> >>
> >> This effectively means that I must turn off the single token
> >> insertion and deletion that occurs automatically within a single
> >> rule.  If a syntax error occurs, the immediately surrounding rule
> >> must terminate in return an error node.
> >>
> >> Does this make sense? I would like to stick this into 3.1 release.
> >>
> >> Ter
> >>
> 
> 




      ____________________________________________________________________________________
Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile.  Try it now.  http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ 


From myeates at jpl.nasa.gov  Fri Jan 11 15:04:33 2008
From: myeates at jpl.nasa.gov (Mathew Yeates)
Date: Fri, 11 Jan 2008 15:04:33 -0800
Subject: [antlr-interest] save a tree
In-Reply-To: <711E9403-F70B-4D7F-B7C0-10D18A45286A@cs.usfca.edu>
References: <4786AABD.30005@jpl.nasa.gov> <fm8i8f$186$1@ger.gmane.org>
	<711E9403-F70B-4D7F-B7C0-10D18A45286A@cs.usfca.edu>
Message-ID: <4787F601.5050805@jpl.nasa.gov>

I found something called xmlserialize in antlr277 which writes out the 
tree. But nothing to read it back in.

Mathew

Terence Parr wrote:
> isn't there a "save as XML" method or somethign?
> Ter
> On Jan 11, 2008, at 12:06 PM, Benjamin Niemann wrote:
>
>> Hi Mathew,
>>
>> Mathew Yeates wrote:
>>> From within a java program I want to save (to disk) the AST I've
>>> created. Then I want to read it back into a python program. Anyone have
>>> any ideas about the simplest approach to this?
>>
>> I'm not aware of any format, package, whatever (something that could
>> (de)serialize custom objects cross language) that could help you here 
>> - and
>> ANTLR does not offer anything here. So you probably have to build 
>> your own
>> serialization in Java and deserialize in Python - and ANTLR does not 
>> offer
>> anything here.
>> Just walk to AST and dump all info that you need in a easy to parse 
>> format
>> and read it back in Python building the nodes along the way.
>>
>> -Ben
>>
>> -- 
>> Benjamin Niemann
>> Email: pink at odahoda dot de
>> WWW: http://pink.odahoda.de/
>>
>
>



From parrt at cs.usfca.edu  Fri Jan 11 15:05:55 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 11 Jan 2008 15:05:55 -0800
Subject: [antlr-interest] save a tree
In-Reply-To: <4787F601.5050805@jpl.nasa.gov>
References: <4786AABD.30005@jpl.nasa.gov> <fm8i8f$186$1@ger.gmane.org>
	<711E9403-F70B-4D7F-B7C0-10D18A45286A@cs.usfca.edu>
	<4787F601.5050805@jpl.nasa.gov>
Message-ID: <ECED432E-12C3-4356-89B4-D48B2A5A1217@cs.usfca.edu>


On Jan 11, 2008, at 3:04 PM, Mathew Yeates wrote:

> I found something called xmlserialize in antlr277 which writes out  
> the tree. But nothing to read it back in.

oh, you need an XML parser ;)  some examples on wiki or use a standard  
xml lib.
Ter


From open.zone at virgin.net  Fri Jan 11 18:58:29 2008
From: open.zone at virgin.net (Micheal J)
Date: Sat, 12 Jan 2008 02:58:29 -0000
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005
In-Reply-To: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>
References: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>
Message-ID: <000001c854c7$03a6fe80$0400a8c0@marion>

Hi,
 
Antlr.Tool.exe is [currently] only provided as a [unsupported] convenience
to the ANTLR/C#-on-CLI community. It is derived from the 3.0 version and not
the later 3.0.1 version (or indeed the beta 3.1 build). 
 
As for the issue you report, it seems that the ikvm-ed executable is not be
able to find the vs2005 resource (.NET resource names can't contain the dot
char - i.e. '.' - AFAIK). If you need the vs2005 format, please use the
original java version of the ANTLR tool. 
 
 
Micheal


  _____  

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dmitry Gusev
Sent: 11 January 2008 14:32
To: antlr-interest at antlr.org
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005


Running Antrl3.Tool.exe for c# can't find vs2005 message format. Any ways to
fix the issue?

..\..\tools\Antlr3.Tool.exe -message-format vs2005 Expression.g
ANTLR Parser Generator  Version 3.0 (May 17, 2007)  1989-2007 
no such message format file
org/antlr/tool/templates/messages/formats/vs2005.stg retrying with default
ANTLR format

-- 
Dmitry Gusev 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080112/5a75ce2d/attachment.html 

From antlr at mirality.co.nz  Sat Jan 12 01:34:32 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 12 Jan 2008 22:34:32 +1300
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <515552DB-0C5E-45D6-8A05-85332619074C@antlr.org>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
	<be9e4140801060848y575f9302t9b4fdfd5b20cb77d@mail.gmail.com>
	<515552DB-0C5E-45D6-8A05-85332619074C@antlr.org>
Message-ID: <20080112093449.CC37411EC83@www.antlr.org>

At 08:18 12/01/2008, Terence Parr wrote:
 >The  Simple solution is to turn this off, relying on a
 >normal "exit rule upon syntax error" mechanism but leave
 >the insertion and deletion mechanism as an option by
 >overriding methods.

It'd be nicer if there were an "options" entry that controlled 
this (both on a per-rule basis as well as a grammar-wide basis).

(Of course, I'm a big fan of options, anyway; I'm still missing 
caseInsensitiveLiterals and the token aliases...)


From antlr at mirality.co.nz  Sat Jan 12 01:38:06 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 12 Jan 2008 22:38:06 +1300
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005
In-Reply-To: <000001c854c7$03a6fe80$0400a8c0@marion>
References: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>
	<000001c854c7$03a6fe80$0400a8c0@marion>
Message-ID: <20080112093821.C6A9E11EC98@www.antlr.org>

At 15:58 12/01/2008, Micheal J wrote:

>As for the issue you report, it seems that the ikvm-ed executable 
>is not be able to find the vs2005 resource (.NET resource names 
>can't contain the dot char - i.e. '.' - AFAIK). If you need the 
>vs2005 format, please use the original java version of the ANTLR 
>tool.

.NET resource names definitely can include a dot character.  (In 
fact almost all of the WinForms resources have dots in them; 
frequently several dots.)  It just depends on how they're linked 
in.


From open.zone at virgin.net  Sat Jan 12 04:57:42 2008
From: open.zone at virgin.net (Micheal J)
Date: Sat, 12 Jan 2008 12:57:42 -0000
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005
In-Reply-To: <476930810087231B@n080.sc1.he.tucows.com> (added by
	postmaster@bouncemessage.net)
References: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>
	<000001c854c7$03a6fe80$0400a8c0@marion>
	<476930810087231B@n080.sc1.he.tucows.com> (added by
	postmaster@bouncemessage.net)
Message-ID: <001401c8551a$b9aa1020$0400a8c0@marion>

 
Hi Gavin,

> >As for the issue you report, it seems that the ikvm-ed executable is 
> >not be able to find the vs2005 resource (.NET resource names can't 
> >contain the dot char - i.e. '.' - AFAIK). If you need the
> >vs2005 format, please use the original java version of the 
> ANTLR tool.
> 
> .NET resource names definitely can include a dot character.  
> (In fact almost all of the WinForms resources have dots in 
> them; frequently several dots.)  It just depends on how 
> they're linked in.

I stand corrected. The naming restrictions are indeed closely-related to
exactly how the resources are linked in....

Micheal


From zuper85 at hotmail.it  Sat Jan 12 07:41:24 2008
From: zuper85 at hotmail.it (Michele Bortolato)
Date: Sat, 12 Jan 2008 16:41:24 +0100
Subject: [antlr-interest] Error in Backtracking (?)
Message-ID: <BAY108-W41C1455430429D8E5C9A45D6440@phx.gbl>


Hi

I putted down this simple grammar:
-------------------------------------
rule	:	exp conf exp;

exp	:	expA|expB|FIELD|expS;

expA	:	multExpr (('+'|'-')multExpr)*;
multExpr:	atom(('*'|'/')atom)*;
atom	:	FLOAT|'('expA')';

expB	:	bexp(('||'|'&&')bexp)*;
bexp	:	'TRUE'|'FALSE'|'('expB')';

expS	:	'('expS')'|String;

conf	:	'='|'!='|'<'|'>'|'<='|'>=';

FLOAT	:	('0'..'9')+('.'('0'..'9')+)?;

FIELD	:	SUBFIELD('.'SUBFIELD)*;

String    :  '"' (~('\\'|'"') )* '"'   ;

WHITESPACE	:	(' '|'\n'|'\t'|'\r')+{ skip();};

fragment SUBFIELD	:	CHAR(CHAR|('0'..'9'))*;

fragment CHAR	:	('a'..'z')|('A'..'Z')|'_';
---------------------

This grammar could(?) generate 4 kind of differen expressions
Aritmethic expressions(expA)
Boolean expressions(expB)
String expressions(expS)
and an expression consisting of a simple field (FIELD)

whithout any option the compiler says that when i find a '(' it can't decide if the expression is a expA or a expB or a expS.

if i use the option backtrack=true and memoize=true the interpreter don't accept any kind of string.

where is the problem?

Thanks
_________________________________________________________________
Ti piace giocare con le lettere? Prova ABCLive!
http://messengergiochi.it.msn.com/

From JALuber at gmx.de  Sat Jan 12 09:29:12 2008
From: JALuber at gmx.de (Johannes Luber)
Date: Sat, 12 Jan 2008 18:29:12 +0100
Subject: [antlr-interest] Error in Backtracking (?)
In-Reply-To: <001401c8551a$b9aa1020$0400a8c0@marion>
References: <37a147f40801110632q4d5c18bdy1b6edf2760c29ad3@mail.gmail.com>
	<000001c854c7$03a6fe80$0400a8c0@marion>
	<476930810087231B@n080.sc1.he.tucows.com> (added by
	postmaster@bouncemessage.net) <001401c8551a$b9aa1020$0400a8c0@marion>
Message-ID: <20080112172912.144410@gmx.net>

> Hi
> 
> I putted down this simple grammar:
...
> 
> This grammar could(?) generate 4 kind of differen expressions
> Aritmethic expressions(expA)
> Boolean expressions(expB)
> String expressions(expS)
> and an expression consisting of a simple field (FIELD)
> 
> whithout any option the compiler says that when i find a '(' it can't
> decide if the expression is a expA or a expB or a expS.
> 
> if i use the option backtrack=true and memoize=true the interpreter don't
> accept any kind of string.
> 
> where is the problem?

I suppose backtracking creates predicates in the code, which the interpreter doesn't understand. Use the debug option instead. BTW, don't use the global backtrack option. Instead use left-factoring or syntactic predicates. Makes the grammar faster.

Johannes
-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From JALuber at gmx.de  Sat Jan 12 09:31:33 2008
From: JALuber at gmx.de (Johannes Luber)
Date: Sat, 12 Jan 2008 18:31:33 +0100
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005
Message-ID: <20080112173133.144430@gmx.net>

> Hi Gavin,
> 
> > >As for the issue you report, it seems that the ikvm-ed executable is 
> > >not be able to find the vs2005 resource (.NET resource names can't 
> > >contain the dot char - i.e. '.' - AFAIK). If you need the
> > >vs2005 format, please use the original java version of the 
> > ANTLR tool.
> > 
> > .NET resource names definitely can include a dot character.  
> > (In fact almost all of the WinForms resources have dots in 
> > them; frequently several dots.)  It just depends on how 
> > they're linked in.
> 
> I stand corrected. The naming restrictions are indeed closely-related to
> exactly how the resources are linked in....
> 
> Micheal

First of all, how do you know, Micheal, that the thread starter used IKVM? I can't seen any hint for that. Another weirdness is that the mention vs2005.stg starts with "group antlr;". Could that be the source of the error instead?

Johannes
-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From dave at badgers-in-foil.co.uk  Sat Jan 12 10:53:56 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sat, 12 Jan 2008 18:53:56 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
Message-ID: <20080112185355.GD18657@badgers-in-foil.co.uk>

On Thu, Jan 10, 2008 at 04:39:54PM -0800, Terence Parr wrote:
> http://www.antlr.org/download/build/antlr-2008-01-10.16.tar.gz

I'm having a go at upgrading from 3.0.


First little thing I notice is that I need to implement some additional
methods in  TreeAdaptor.  The only non-obvious thing is the intention
of,

  setChildIndex(Object,int)

should this result in the child actually changing position?  i.e. given

  (TREE A B C)

a call to 

  setChildIndex(A, 1);

would give

  (TREE B A C)

?  Or is this just for bookkeeping, and the child is already at this
location?



Maybe my problem is I'm not sure why CommonTree records 'childIndex' and
does,

  public int getChildIndex() {
      return childIndex;
  }

rather than just something like,

  public int getChildIndex() {
      return parent.children.indexOf(this);
  }



ta,
dave

-- 
http://david.holroyd.me.uk/

From parrt at cs.usfca.edu  Sat Jan 12 11:42:45 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Jan 2008 11:42:45 -0800
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <20080112185355.GD18657@badgers-in-foil.co.uk>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
Message-ID: <601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>


On Jan 12, 2008, at 10:53 AM, David Holroyd wrote:

> On Thu, Jan 10, 2008 at 04:39:54PM -0800, Terence Parr wrote:
>> http://www.antlr.org/download/build/antlr-2008-01-10.16.tar.gz
>
> I'm having a go at upgrading from 3.0.

Great!

> First little thing I notice is that I need to implement some  
> additional
> methods in  TreeAdaptor.  The only non-obvious thing is the intention
> of,
>
>  setChildIndex(Object,int)
>
> should this result in the child actually changing position?

Nope, just set the index.

> ?  Or is this just for bookkeeping, and the child is already at this
> location?

yep, leave it in same position.

> Maybe my problem is I'm not sure why CommonTree records 'childIndex'  
> and
> does,
>
>  public int getChildIndex() {
>      return childIndex;
>  }
>
> rather than just something like,
>
>  public int getChildIndex() {
>      return parent.children.indexOf(this);
>  }

speed :)

I need index for replacing children during ast rewrite mode in tree  
parsers. :)

also trees now have parent pointers. :)

Ter

From parrt at antlr.org  Sat Jan 12 11:49:59 2008
From: parrt at antlr.org (Terence Parr)
Date: Sat, 12 Jan 2008 11:49:59 -0800
Subject: [antlr-interest] Error nodes created upon syntax error
In-Reply-To: <20080112093449.CC37411EC83@www.antlr.org>
References: <5C238C8C-1985-467D-8486-AA05CA0209F0@antlr.org>
	<be9e4140801060848y575f9302t9b4fdfd5b20cb77d@mail.gmail.com>
	<515552DB-0C5E-45D6-8A05-85332619074C@antlr.org>
	<20080112093449.CC37411EC83@www.antlr.org>
Message-ID: <F043E8AB-A6FD-4BC0-BC2C-7D49530EED27@antlr.org>


On Jan 12, 2008, at 1:34 AM, Gavin Lambert wrote:

> At 08:18 12/01/2008, Terence Parr wrote:
> >The  Simple solution is to turn this off, relying on a
> >normal "exit rule upon syntax error" mechanism but leave
> >the insertion and deletion mechanism as an option by
> >overriding methods.
>
> It'd be nicer if there were an "options" entry that controlled this  
> (both on a per-rule basis as well as a grammar-wide basis).
>
> (Of course, I'm a big fan of options, anyway; I'm still missing  
> caseInsensitiveLiterals and the token aliases...)

:)  well, as you can tell I'm not a big fan of options because each  
Boolean option doubles my testing space. Literals are as obvious as  
simple method overrides to let you say precisely what you want.  In  
this case the documentation is the code.  Simple faq entry solves  
everything for every target :)

I like single solutions that simply work.  This morning I came up with  
the "correct" answer: do single token insertion and deletion for a  
token not referenced in an action or a rewrite rule. :) perfect,  
bigger burden on me but easier on the user.

Ter

From dave at badgers-in-foil.co.uk  Sat Jan 12 16:34:43 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 13 Jan 2008 00:34:43 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
Message-ID: <20080113003443.GE18657@badgers-in-foil.co.uk>

On Sat, Jan 12, 2008 at 11:42:45AM -0800, Terence Parr wrote:
> 
> On Jan 12, 2008, at 10:53 AM, David Holroyd wrote:
> The only non-obvious thing is the intention of,
> >
> > setChildIndex(Object,int)
> >
> >should this result in the child actually changing position?
> 
> Nope, just set the index.

Great.  I can just ignore it then, I think.

> also trees now have parent pointers. :)

My existing setTree() takes a different argument type, and therefore
overloads the BaseTree new method, rather than overriding it.  Not sure
if that's a problem yet.

Something appears to be quite broken due to my TokenStream
implementation after moving to the latest code though.  I see more
index() / rewind() stuff going on in the parser; probably I didn't
implement something correctly here.


-- 
http://david.holroyd.me.uk/

From dave at badgers-in-foil.co.uk  Sat Jan 12 17:22:48 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 13 Jan 2008 01:22:48 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <20080113003443.GE18657@badgers-in-foil.co.uk>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
Message-ID: <20080113012247.GF18657@badgers-in-foil.co.uk>

On Sun, Jan 13, 2008 at 12:34:43AM +0000, David Holroyd wrote:
> On Thu, Jan 10, 2008 at 04:39:54PM -0800, Terence Parr wrote:
> > http://www.antlr.org/download/build/antlr-2008-01-10.16.tar.gz
> 
> I'm having a go at upgrading from 3.0.

> Something appears to be quite broken due to my TokenStream
> implementation after moving to the latest code though.  I see more
> index() / rewind() stuff going on in the parser; probably I didn't
> implement something correctly here.

Ok, my mark() implementation was knackered.  All better now.



It seems that ANTLR is less happy about me trying to parse 'fragments'
now.

i.e. if I set up the input "test", and then invoke

  MyParser.identifier()

the generated parser now says

  NoViableAltException(-1!=[()* loopback of ..blah..]

whereas this seemed to work with the earlier ANTLR releases, at least
for some rules.


Is this sort of usage just not intended to work?

In the cases where I had problems in the past, I'd just append some
other token to the language fragment I was attempting to parse.

Is there a 'correct' way to fix this?  e.g. putting EOF all over the
place?


ta!
dave

-- 
http://david.holroyd.me.uk/

From parrt at cs.usfca.edu  Sat Jan 12 17:25:16 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Jan 2008 17:25:16 -0800
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <20080113012247.GF18657@badgers-in-foil.co.uk>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
	<20080113012247.GF18657@badgers-in-foil.co.uk>
Message-ID: <C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>

> It seems that ANTLR is less happy about me trying to parse 'fragments'
> now.
>
> i.e. if I set up the input "test", and then invoke
>
>  MyParser.identifier()
>
> the generated parser now says
>
>  NoViableAltException(-1!=[()* loopback of ..blah..]
>
> whereas this seemed to work with the earlier ANTLR releases, at least
> for some rules.
>
>
> Is this sort of usage just not intended to work?
>
> In the cases where I had problems in the past, I'd just append some
> other token to the language fragment I was attempting to parse.
>
> Is there a 'correct' way to fix this?  e.g. putting EOF all over the
> place?

fragment rules are meant to be called only from other lexer rules; any  
other usage is "off label" ;)

Ter

From parrt at cs.usfca.edu  Sat Jan 12 17:25:51 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 12 Jan 2008 17:25:51 -0800
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
	<20080113012247.GF18657@badgers-in-foil.co.uk>
	<C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
Message-ID: <0C5BAD2A-45BC-4756-821F-FC3D1E07560F@cs.usfca.edu>

Oh, not lexer fragments...parser fragments...hmm..should work. can u  
trace for me a bit further?
Ter
On Jan 12, 2008, at 5:25 PM, Terence Parr wrote:

>> It seems that ANTLR is less happy about me trying to parse  
>> 'fragments'
>> now.
>>
>> i.e. if I set up the input "test", and then invoke
>>
>> MyParser.identifier()
>>
>> the generated parser now says
>>
>> NoViableAltException(-1!=[()* loopback of ..blah..]
>>
>> whereas this seemed to work with the earlier ANTLR releases, at least
>> for some rules.
>>
>>
>> Is this sort of usage just not intended to work?
>>
>> In the cases where I had problems in the past, I'd just append some
>> other token to the language fragment I was attempting to parse.
>>
>> Is there a 'correct' way to fix this?  e.g. putting EOF all over the
>> place?
>
> fragment rules are meant to be called only from other lexer rules;  
> any other usage is "off label" ;)
>
> Ter


From dave at badgers-in-foil.co.uk  Sat Jan 12 17:49:35 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 13 Jan 2008 01:49:35 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
	<20080113012247.GF18657@badgers-in-foil.co.uk>
	<C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
Message-ID: <20080113014935.GA24577@badgers-in-foil.co.uk>

On Sat, Jan 12, 2008 at 05:25:16PM -0800, Terence Parr wrote:
> >It seems that ANTLR is less happy about me trying to parse 'fragments'
> >now.
> >
> >i.e. if I set up the input "test", and then invoke
> >
> > MyParser.identifier()
> >
> >the generated parser now says
> >
> > NoViableAltException(-1!=[()* loopback of ..blah..]
> >
> >whereas this seemed to work with the earlier ANTLR releases, at least
> >for some rules.

> fragment rules are meant to be called only from other lexer rules; any  
> other usage is "off label" ;)

Sorry; bad choice of wording on my part, these are actually parser
rules.

'Snippet' might be a better term.  So, I want to parse a snippet of the
target language, rather than an entire compilation unit.

e.g., here's the definition of 'identifier',

  identifier 
    :   (   qualifiedIdent -> qualifiedIdent
        )
        (   options{greedy=true;}
        :   poi=propOrIdent[root_0, retval.start] -> $poi
        )*
        -> ^(IDENTIFIER $identifier)
    ;

With the input snippet "testpkg" I invoke the generated identifier()
method directly, and I see

  NoViableAltException(-1!=[()* loopback of 676:3: ( options {greedy=true;} : poi= propOrIdent[root_0, retval.start] -> $poi)*])

I assume the -1 in the message is EOF.


ta,
dave

-- 
http://david.holroyd.me.uk/

From dave at badgers-in-foil.co.uk  Sat Jan 12 17:56:50 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 13 Jan 2008 01:56:50 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <0C5BAD2A-45BC-4756-821F-FC3D1E07560F@cs.usfca.edu>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
	<20080113012247.GF18657@badgers-in-foil.co.uk>
	<C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
	<0C5BAD2A-45BC-4756-821F-FC3D1E07560F@cs.usfca.edu>
Message-ID: <20080113015650.GB24577@badgers-in-foil.co.uk>

On Sat, Jan 12, 2008 at 05:25:51PM -0800, Terence Parr wrote:
> Oh, not lexer fragments...parser fragments...hmm..should work. can u  
> trace for me a bit further?

I'll give it a debug in the morning.

ta,
dave

-- 
http://david.holroyd.me.uk/

From dave at badgers-in-foil.co.uk  Sun Jan 13 06:01:19 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 13 Jan 2008 14:01:19 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <0C5BAD2A-45BC-4756-821F-FC3D1E07560F@cs.usfca.edu>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
	<20080113012247.GF18657@badgers-in-foil.co.uk>
	<C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
	<0C5BAD2A-45BC-4756-821F-FC3D1E07560F@cs.usfca.edu>
Message-ID: <20080113140119.GA306@badgers-in-foil.co.uk>

On Sat, Jan 12, 2008 at 05:25:51PM -0800, Terence Parr wrote:
> Oh, not lexer fragments...parser fragments...hmm..should work. can u  
> trace for me a bit further?

Turning on DFA.debug gives the following trace for the decision which is
failing,

  Enter DFA.predict for decision 47
  DFA 47 state 0 LA(1)=\uffff(-1), index=1
  min[0]=5
  max[0]=d
  eot[0]=-1
  eof[0]=-1
  1 -1 1 -1 -1 -1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 9 

also, DFA47.eof == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], if that's
relevant.


Is there any more info I could provide?


ta,
dave

-- 
http://david.holroyd.me.uk/

From alessnet at gmail.com  Sun Jan 13 08:57:14 2008
From: alessnet at gmail.com (Alessandro)
Date: Sun, 13 Jan 2008 17:57:14 +0100
Subject: [antlr-interest] Backtracking problem
Message-ID: <be9e4140801130857u20592bf7kcf16e02b77706796@mail.gmail.com>

Hello,

I have a problem with semantic predicates.

Here is a part of my grammar :

instructionlist
	:	(instruction SEMI)* -> instruction*;
	
instruction

	:	wait_
	|	if_
	|	while_
	|	(assign)=>assign
	|	(call)=>call;
/*
I tried first (lhside[false] ASSIGN) => assign
*/

assign	:	lhside[false] ASSIGN rhside;

call	:	LAUNCH lhside[false] '<-' ID LP rhsidelist RP
	|	lhside[false] '<-' ID LP rhsidelist RP
	|	ID LP rhsidelist RP ;


lhside[Boolean tilde]	:	sub_local2 (DOT sub_local2)*;
sub_local2
	:	ID (CO rhside CF)+  -> ^(ID_ARR[$ID] rhside*)
	|	ID -> ^(ID);


Both rules "call" and "assign" can begin with "lhside", and this rule
is self-recursive.
So the decision in rule "instruction" isn't LL(*). I think that if the
input begin with "lhside ASSIGN" this is an "assign" for sure !
But I have a problem, and I don't know if this is a bug ...

With the input
self.touch_one := 3;
it's ok...(even with input "touch_one[3] = 3;")

But with the input
self.touch_one[3] :=3;
I have an error in "instruction" : no viable alternative at input ':='
This is very strange because neither "(call)"  nor "(assign)"
predicate are executed for this input...

In ANTLRWorks, the input "self.touch_one[3] := 3;" is correct with the
rule "assign" (and not with "call").

I forget something ?
(the complete grammar is attached to this mail)

Thanks :-)

Alessandro
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sdl.g
Type: application/octet-stream
Size: 6222 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080113/98164e6d/attachment-0001.obj 

From dave at badgers-in-foil.co.uk  Sun Jan 13 12:19:56 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sun, 13 Jan 2008 20:19:56 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <20080113014935.GA24577@badgers-in-foil.co.uk>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
	<20080113012247.GF18657@badgers-in-foil.co.uk>
	<C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
	<20080113014935.GA24577@badgers-in-foil.co.uk>
Message-ID: <20080113201955.GA4628@badgers-in-foil.co.uk>

On Sun, Jan 13, 2008 at 01:49:35AM +0000, David Holroyd wrote:
> e.g., here's the definition of 'identifier',
> 
>   identifier 
>     :   (   qualifiedIdent -> qualifiedIdent
>         )
>         (   options{greedy=true;}
>         :   poi=propOrIdent[root_0, retval.start] -> $poi
>         )*
>         -> ^(IDENTIFIER $identifier)
>     ;
> 
> With the input snippet "testpkg" I invoke the generated identifier()
> method directly, and I see
> 
>   NoViableAltException(-1!=[()* loopback of 676:3: ( options {greedy=true;} : poi= propOrIdent[root_0, retval.start] -> $poi)*])

If I explicitly add an optional EOF to the rule, all is well again,


  identifier 
    :   (   qualifiedIdent -> qualifiedIdent
        )
        (   options{greedy=true;}
        :   poi=propOrIdent[root_0, retval.start] -> $poi
        )*
        EOF?
        -> ^(IDENTIFIER $identifier)
        ;


-- 
http://david.holroyd.me.uk/

From parrt at cs.usfca.edu  Sun Jan 13 12:54:39 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 13 Jan 2008 12:54:39 -0800
Subject: [antlr-interest] work machine died
Message-ID: <3484B8D9-7F96-4AAD-9076-A189C102641E@cs.usfca.edu>

crap...i turned on timemachine for os x and it made the OS not see  
the ethernet port.  great.  archive and reinstall wedged.  Now i'll  
try fresh install.  lovely.  anybody use timemachine with luck?

Ter

From open.zone at virgin.net  Sun Jan 13 13:56:30 2008
From: open.zone at virgin.net (Micheal J)
Date: Sun, 13 Jan 2008 21:56:30 -0000
Subject: [antlr-interest] Antlr3.Tool.exe -message-format vs2005
In-Reply-To: <20080112173133.144430@gmx.net>
References: <20080112173133.144430@gmx.net>
Message-ID: <000301c8562f$28978750$0400a8c0@marion>

> > I stand corrected. The naming restrictions are indeed 
> closely-related 
> > to exactly how the resources are linked in....
> > 
> > Micheal
> 
> First of all, how do you know, Micheal, that the thread 
> starter used IKVM? I can't seen any hint for that. 

My comment was about the executable (we contributed that).

> Another 
> weirdness is that the mention vs2005.stg starts with "group 
> antlr;". Could that be the source of the error instead?

No. The template loading logic supports that.

Micheal



From parrt at cs.usfca.edu  Sun Jan 13 15:13:56 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 13 Jan 2008 15:13:56 -0800
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <20080113201955.GA4628@badgers-in-foil.co.uk>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
	<20080112185355.GD18657@badgers-in-foil.co.uk>
	<601D1B78-C1BA-424F-AA86-80E6AD300DB6@cs.usfca.edu>
	<20080113003443.GE18657@badgers-in-foil.co.uk>
	<20080113012247.GF18657@badgers-in-foil.co.uk>
	<C269AC43-21CC-479D-904C-08985AB3745A@cs.usfca.edu>
	<20080113014935.GA24577@badgers-in-foil.co.uk>
	<20080113201955.GA4628@badgers-in-foil.co.uk>
Message-ID: <45D5BC10-A880-4299-88F4-5B5B39669A29@cs.usfca.edu>

Yep, antlr is not ignoring "what follows" for loops on ends of rules  
anymore I guess. strange.
Ter
On Jan 13, 2008, at 12:19 PM, David Holroyd wrote:

> On Sun, Jan 13, 2008 at 01:49:35AM +0000, David Holroyd wrote:
>> e.g., here's the definition of 'identifier',
>>
>>  identifier
>>    :   (   qualifiedIdent -> qualifiedIdent
>>        )
>>        (   options{greedy=true;}
>>        :   poi=propOrIdent[root_0, retval.start] -> $poi
>>        )*
>>        -> ^(IDENTIFIER $identifier)
>>    ;
>>
>> With the input snippet "testpkg" I invoke the generated identifier()
>> method directly, and I see
>>
>>  NoViableAltException(-1!=[()* loopback of 676:3: ( options  
>> {greedy=true;} : poi= propOrIdent[root_0, retval.start] -> $poi)*])
>
> If I explicitly add an optional EOF to the rule, all is well again,
>
>
>  identifier
>    :   (   qualifiedIdent -> qualifiedIdent
>        )
>        (   options{greedy=true;}
>        :   poi=propOrIdent[root_0, retval.start] -> $poi
>        )*
>        EOF?
>        -> ^(IDENTIFIER $identifier)
>        ;
>
>
> -- 
> http://david.holroyd.me.uk/


From parrt at cs.usfca.edu  Sun Jan 13 15:15:32 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 13 Jan 2008 15:15:32 -0800
Subject: [antlr-interest] work machine died
In-Reply-To: <3484B8D9-7F96-4AAD-9076-A189C102641E@cs.usfca.edu>
References: <3484B8D9-7F96-4AAD-9076-A189C102641E@cs.usfca.edu>
Message-ID: <489A55E8-45B7-40F1-81F5-2E22F3676C1C@cs.usfca.edu>

Wow. turns out an unhappy coincidence...ethernet dead...doubt  
timemachine could do that...  just lost 5 hours.
ter
On Jan 13, 2008, at 12:54 PM, Terence Parr wrote:

> crap...i turned on timemachine for os x and it made the OS not see  
> the ethernet port.  great.  archive and reinstall wedged.  Now i'll  
> try fresh install.  lovely.  anybody use timemachine with luck?
>
> Ter


From r.mark.volkmann at gmail.com  Sun Jan 13 16:54:33 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sun, 13 Jan 2008 18:54:33 -0600
Subject: [antlr-interest] work machine died
In-Reply-To: <3484B8D9-7F96-4AAD-9076-A189C102641E@cs.usfca.edu>
References: <3484B8D9-7F96-4AAD-9076-A189C102641E@cs.usfca.edu>
Message-ID: <f0fcc6820801131654l66e161ebwef6e041ec8ce6bf4@mail.gmail.com>

On Jan 13, 2008 2:54 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> crap...i turned on timemachine for os x and it made the OS not see
> the ethernet port.  great.  archive and reinstall wedged.  Now i'll
> try fresh install.  lovely.  anybody use timemachine with luck?

Time Machine has worked well for me so far with a MacBook Pro and a new iMac.

-- 
R. Mark Volkmann
Object Computing, Inc.

From cory.isaacson at compuflex.com  Sun Jan 13 21:36:55 2008
From: cory.isaacson at compuflex.com (Cory Isaacson)
Date: Sun, 13 Jan 2008 22:36:55 -0700
Subject: [antlr-interest] Newline not recognized
Message-ID: <000b01c8566f$7b4d4800$71e7d800$@isaacson@compuflex.com>

I have a rule like this:

 

r : MYSTARTTOKEN '\n' NEXTTOKEN ;

 

When I parse it doesn't see the '\n' char.

 

If I put the '\n' into to Lexer rule like this:

 

NEXTTOKEN : '\n' 'xyz' ;

 

It works fine, but this won't meet my needs as I need to get the text of
NEXTTOKEN (without the newline).

 

Any idea what is wrong in what I'm doing?

 

Cory

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080113/f5733573/attachment.html 

From tbrandonau at gmail.com  Sun Jan 13 23:20:27 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Mon, 14 Jan 2008 18:20:27 +1100
Subject: [antlr-interest] Newline not recognized
In-Reply-To: <-3609598642124291289@unknownmsgid>
References: <-3609598642124291289@unknownmsgid>
Message-ID: <ebc876d70801132320t462b5d72x1a9023501aa08721@mail.gmail.com>

Can't tell exactly what's going on without seeing the full grammar.
Do you have a lexer rule that matches newlines? Tokens and literals are not
interchangeable. i.e. given:
literalNL: '\n';
NL: '\n';
literalNL won't work as all newlines will have been matched by the NL rule
while the literal '\n' will generate a new lexer rule with a different token
type.

Tom.
On 1/14/08, Cory Isaacson <cory.isaacson at compuflex.com> wrote:
>
>  I have a rule like this:
>
>
>
> r : MYSTARTTOKEN '\n' NEXTTOKEN ;
>
>
>
> When I parse it doesn't see the '\n' char.
>
>
>
> If I put the '\n' into to Lexer rule like this:
>
>
>
> NEXTTOKEN : '\n' 'xyz' ;
>
>
>
> It works fine, but this won't meet my needs as I need to get the text of
> NEXTTOKEN (without the newline).
>
>
>
> Any idea what is wrong in what I'm doing?
>
>
>
> Cory
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080114/3fa57630/attachment.html 

From antlr at mirality.co.nz  Sun Jan 13 23:22:45 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Mon, 14 Jan 2008 20:22:45 +1300
Subject: [antlr-interest] Newline not recognized
In-Reply-To: <000b01c8566f$7b4d4800$71e7d800$@isaacson@compuflex.com>
References: <000b01c8566f$7b4d4800$71e7d800$@isaacson@compuflex.com>
Message-ID: <20080114072300.531F211ECC4@www.antlr.org>

At 18:36 14/01/2008, Cory Isaacson wrote:

>I have a rule like this:
>
>r : MYSTARTTOKEN '\n' NEXTTOKEN ;
>
>When I parse it doesn't see the '\n' char.
>
>If I put the '\n' into to Lexer rule like this:
>
>NEXTTOKEN : '\n' 'xyz' ;
>
>It works fine, but this won't meet my needs as I need to get the 
>text of NEXTTOKEN (without the newline).
>
>Any idea what is wrong in what I'm doing?

Most likely, you've already got a different token representing a 
'\n'.  Whenever you use a string literal in a parser rule, it 
creates a hidden new token that matches that literal.  If your 
lexer is choosing to generate a different token over that one, 
though (eg. you have a WS rule), then it'll never match.

If whitespace (or just newlines) are significant in your grammar, 
then make sure you don't hide them at the lexer level, and that 
you're not mixing lexer and parser rules.  (I generally find it 
easier to remember the separation if you avoid using string 
literals in parser rules altogether.)


From aravinda777 at gmail.com  Mon Jan 14 03:36:22 2008
From: aravinda777 at gmail.com (Aravinda Dassanayake)
Date: Mon, 14 Jan 2008 17:06:22 +0530
Subject: [antlr-interest] C# Parser : problem with identifying a class
	declaration
Message-ID: <c1960e000801140336l4628ba85w1bd57f5fceb2850d@mail.gmail.com>

Hi everybody,

I'm working on a C# parser to implement a code complexity analysis tool. I
need this to be a Java implementation although I ma analysing C# code since
this is goin to be part of a biger tool stack. I've chosen to implement this
following the language spec by MS, and implementing as a combined grammar
like the Java grammar (Which I find a beutiful piece of work!) since my
requirements are not very complex to go ahead with a tree grammar.

However, I have few problems.

The main issue is that the parser doesnt identify a class declaration
properly. It is trying to match it to a delegate declaration no matter what
I do. The rules in conflict are as follows.


type_declaration
    :
    class_declaration
    |struct_declaration
    |interface_declaration
    |enum_declaration
    |delegate_declaration
    ;

class_declaration
    :
    attributes? class_modifiers? 'class' IDENTIFIER class_base? class_body
';'?
    ;

delegate_declaration
    :
    attributes? delegate_modifiers? 'delegate' return_type IDENTIFIER '('
formal_parameter_list? ')' ';'
    ;

enum_declaration
    :
    attributes? enum_modifiers? 'enum' IDENTIFIER enum_base? enum_body ';'?
    ;


class_modifiers
    :
    (class_modifier) (class_modifier)*
    ;

class_modifier
    :
    'new'
    |'public'
    |'protected'
    |'internal'
    |'private'
    |'abstract'
    |'sealed'
    ;


delegate_modifiers
    :
    (delegate_modifier) (delegate_modifier)*
    ;

delegate_modifier
    :
    'new'
    |'public'
    |'protected'
    |'internal'
    |'private'
    ;

enum_modifiers
    :
    (enum_modifier) (enum_modifier)*
    ;


enum_modifier
    :
    'new'
    |'public'
    |'protected'
    |'internal'
    |'private'
    ;



Given below are some of the errors given by the generated java parser when
analysing a C# source code.

BR.recoverFromMismatchedToken
line 8:8 mismatched input 'class' expecting 'delegate'
BR.recoverFromMismatchedToken
line 20:9 mismatched input 'int' expecting 'delegate'
BR.recoverFromMismatchedToken
line 21:2 mismatched input '{' expecting ';'
line 22:10 no viable alternative at input '_hash'
line 22:16 no viable alternative at input 'CompareTo'
line 22:28 no viable alternative at input 'TextLine'
line 22:37 no viable alternative at input 'obj'


FYI, the global options are set as follows.

options {
backtrack=true;
memoize=true;
language=Java;
}



Without the class declaration properly identified, the parser does not go
ahead analysing entries within the class properly.

Therefore, a very quick pointer on how to make this properly identify
classes, delegates and enums would be highly appreciated, specially because
time is running out fast for me.

Thanks & Best Regards,
-- 
Aravinda Dassanayake

+94572231204
+94715300757

aravinda777 at yahoo.com
aravinda777 at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080114/c488044b/attachment-0001.html 

From antlr at mirality.co.nz  Mon Jan 14 03:59:53 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 15 Jan 2008 00:59:53 +1300
Subject: [antlr-interest] C# Parser : problem with identifying a class
 declaration
In-Reply-To: <c1960e000801140336l4628ba85w1bd57f5fceb2850d@mail.gmail.co
 m>
References: <c1960e000801140336l4628ba85w1bd57f5fceb2850d@mail.gmail.com>
Message-ID: <20080114120012.9C67711EAB4@www.antlr.org>

At 00:36 15/01/2008, Aravinda Dassanayake wrote:
>The main issue is that the parser doesnt identify a class 
>declaration properly. It is trying to match it to a delegate 
>declaration no matter what I do. The rules in conflict are as 
>follows.
>
>
>type_declaration
>     :
>     class_declaration
>     |struct_declaration
>     |interface_declaration
>     |enum_declaration
>     |delegate_declaration
>     ;
>
>class_declaration
>     :
>     attributes? class_modifiers? 'class' IDENTIFIER class_base? 
> class_body ';'?
>     ;
>
>delegate_declaration
>     :
>     attributes? delegate_modifiers? 'delegate' return_type 
> IDENTIFIER '(' formal_parameter_list? ')' ';'
>     ;

ANTLR's default lookahead disambiguation can't see past loop 
constructs at the moment.  If you need it to, you'll need to tell 
it that it needs to check additional lookahead by adding syntactic 
predicates.  Also, you can probably factor the attributes out:

type_declaration
     :  attributes?
        (   (class_modifiers? 'class') => class_declaration
        |   (struct_modifiers? 'struct') => struct_declaration
        |   (interface_modifiers? 'interface') => 
interface_declaration
        |   (enum_modifiers? 'enum') => enum_declaration
        |   (delegate_modifiers? 'delegate') => 
delegate_declaration
        )
     ;

>class_modifiers
>     :
>     (class_modifier) (class_modifier)*
>     ;

That's a BNF-ism.  You should use this instead (generated code is 
simpler this way):

class_modifiers: class_modifier+;

>class_modifier
>     :
>     'new'
>     |'public'
>     |'protected'
>     |'internal'
>     |'private'
>     |'abstract'
>     |'sealed'
>     ;
[...]
>delegate_modifier
>     :
>     'new'
>     |'public'
>     |'protected'
>     |'internal'
>     |'private'
>     ;

Also, check the generated code for these; make sure it's not 
accidentally generating two separate tokens for e.g. 'new'.  If it 
is, for some reason, then you'll need to use named lexer tokens 
instead of string literals.


From andreas.bartho at inf.tu-dresden.de  Mon Jan 14 04:06:28 2008
From: andreas.bartho at inf.tu-dresden.de (Andreas Bartho)
Date: Mon, 14 Jan 2008 13:06:28 +0100
Subject: [antlr-interest] C# Parser : problem with identifying a class
 declaration
In-Reply-To: <c1960e000801140336l4628ba85w1bd57f5fceb2850d@mail.gmail.com>
References: <c1960e000801140336l4628ba85w1bd57f5fceb2850d@mail.gmail.com>
Message-ID: <478B5044.6090306@inf.tu-dresden.de>

Hi,

I used to have that problem too. The reason was that somewhere in the 
class declaration (of the parsed C#-file) was a syntax error. ANTLR 
tried backtracking and finally, with delegate_declaration as its last 
alternative, produced the error message.

Try a syntactic predicate.

typedeclaration
     :   (attributes? classmodifiers? 'partial'? 'class')
         => classdeclaration
     |   (attributes? structmodifiers? 'partial'? 'struct')
         => structdeclaration
     |   (attributes? interfacemodifiers? 'partial'? 'interface')
         => interfacedeclaration
     |   (attributes? enummodifiers? 'enum')
         => enumdeclaration
     |   (attributes? delegatemodifiers? 'delegate')
         => delegatedeclaration
     ;


Hopefully the error reported will now be reported inside the class 
declaration.

Be warned, though, that there is still a lot of trouble waiting for you.
You might want to have a look at my grammar (which I'm still not sure 
does everything as it should, but currently it works for me.)
http://deftproject.svn.sourceforge.net/viewvc/*checkout*/deftproject/depth/com.comarch.depth.antlrcsharp/CSharp.g?revision=41

It is published under the Eclipse Public License.

Hope that helps
Andreas

From r.mark.volkmann at gmail.com  Mon Jan 14 07:34:16 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 14 Jan 2008 09:34:16 -0600
Subject: [antlr-interest] searchable mailing list archive
Message-ID: <f0fcc6820801140734q5a267273v2716f4cf0ea194ac@mail.gmail.com>

Is there a website where I can search the ANTLR mailing list archive?

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Mon Jan 14 07:36:09 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 14 Jan 2008 09:36:09 -0600
Subject: [antlr-interest] ANTLRWorks and quotes in actions
Message-ID: <f0fcc6820801140736n4568535as2ebf655c3e507afa@mail.gmail.com>

ANTLRWorks flags escaped double quotes in Java strings within actions
as errors. Is there a way around this? Is this a known issue?

For example, a line like this will be flagged.

String s = "The value is \"" + value + "\".";

-- 
R. Mark Volkmann
Object Computing, Inc.

From jaluber at gmx.de  Mon Jan 14 09:03:37 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 14 Jan 2008 18:03:37 +0100
Subject: [antlr-interest] searchable mailing list archive
In-Reply-To: <f0fcc6820801140734q5a267273v2716f4cf0ea194ac@mail.gmail.com>
References: <f0fcc6820801140734q5a267273v2716f4cf0ea194ac@mail.gmail.com>
Message-ID: <478B95E9.60603@gmx.de>

Mark Volkmann schrieb:
> Is there a website where I can search the ANTLR mailing list archive?
> 
Look at
<http://www.antlr.org/pipermail/antlr-interest/>.

Johannes

From dave at badgers-in-foil.co.uk  Mon Jan 14 09:28:31 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 14 Jan 2008 17:28:31 +0000
Subject: [antlr-interest] searchable mailing list archive
In-Reply-To: <f0fcc6820801140734q5a267273v2716f4cf0ea194ac@mail.gmail.com>
References: <f0fcc6820801140734q5a267273v2716f4cf0ea194ac@mail.gmail.com>
Message-ID: <20080114172830.GA21037@badgers-in-foil.co.uk>

On Mon, Jan 14, 2008 at 09:34:16AM -0600, Mark Volkmann wrote:
> Is there a website where I can search the ANTLR mailing list archive?

I use,

http://www.google.co.uk/search?q=badgers+site%3Awww.antlr.org%3A8080%2Fpipermail%2Fantlr-interest


ta,
dave

-- 
http://david.holroyd.me.uk/

From cory.isaacson at compuflex.com  Mon Jan 14 10:55:36 2008
From: cory.isaacson at compuflex.com (Cory Isaacson)
Date: Mon, 14 Jan 2008 11:55:36 -0700
Subject: [antlr-interest] Newline not recognized
In-Reply-To: <ebc876d70801132320t462b5d72x1a9023501aa08721@mail.gmail.com>
References: <-3609598642124291289@unknownmsgid>
	<ebc876d70801132320t462b5d72x1a9023501aa08721@mail.gmail.com>
Message-ID: <009201c856df$0df9f580$29ede080$@isaacson@compuflex.com>

Thanks, this was very helpful, I found out what I was doing wrong.

 

One follow on question:

 

My message format is name/value pairs like this:

 

\nLabel1=value

\nLabel2=value

 

However, the value can contain an entire SQL statement, which can of course
have single, double quotes, etc. What is a good way to recognize the value,
but not so broadly that the lexer token tries to recognize the whole
message?

 

Thanks,

 

Cory

 

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Thomas Brandon
Sent: Monday, January 14, 2008 12:20 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Newline not recognized

 

Can't tell exactly what's going on without seeing the full grammar.
Do you have a lexer rule that matches newlines? Tokens and literals are not
interchangeable. i.e. given:
literalNL: '\n';
NL: '\n'; 
literalNL won't work as all newlines will have been matched by the NL rule
while the literal '\n' will generate a new lexer rule with a different token
type.

Tom.

On 1/14/08, Cory Isaacson <cory.isaacson at compuflex.com> wrote:

I have a rule like this:

 

r : MYSTARTTOKEN '\n' NEXTTOKEN ;

 

When I parse it doesn't see the '\n' char.

 

If I put the '\n' into to Lexer rule like this:

 

NEXTTOKEN : '\n' 'xyz' ;

 

It works fine, but this won't meet my needs as I need to get the text of
NEXTTOKEN (without the newline).

 

Any idea what is wrong in what I'm doing?

 

Cory

 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080114/adc5c63d/attachment.html 

From Alexei_Ostrov at ml.com  Mon Jan 14 12:11:24 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Mon, 14 Jan 2008 15:11:24 -0500
Subject: [antlr-interest] CSharp 3.0 target
Message-ID: <7619C175A5316C40A1F03CD996117B9D027723D5@MLNYC727MB.amrs.win.ml.com>

Kunle, 

I apologize if I should be writing to a different place... If so, could
you please let me know?

I've generated the Lexer and Parser but they do not compile. In Lexer I
find the this.type variable. I defined it locally for now, but it
obviously is not right. From debugging I understand that this is the
type of the token, but because it is private it does not propagate to
the right place. I also do not see it defined anywhere in Lexer or
BaseParser as non-private field. I see it as property of Token, but am
not sure how it is supposed to get there. 
What am I doing wrong?

I am using 3.0.1 version. 

Thank you much, 

Alexei

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------

From jpschewe at mtu.net  Mon Jan 14 12:26:26 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Mon, 14 Jan 2008 14:26:26 -0600
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <20080106020421.000057b4@goanna>
References: <477E5FA6.3070602@mtu.net>
	<477E83CC.5030208@gmail.com>	<477EA5A5.8060903@gmx.de>
	<477F8A83.5050906@mtu.net> <20080106020421.000057b4@goanna>
Message-ID: <478BC572.4030201@mtu.net>

I just got time to get back to this project, been stuck on a different 
one.  I tried your suggestion of gathering everything up in a variable 
and that didn't help.  Still the same error. 

/**
 * @param negate if true, negate all expressions by multiplying by -1
 */   
multExpr[boolean negate]
    :   a+=atom (PRODUCT a+=atom)* -> {negate}? ^(PRODUCT ^(NUMBER 
DOUBLE["-1"]) $a)
                                   ->           ^(PRODUCT $a)
    ;

    [junit]     Caused an ERROR
    [junit] token PRODUCT
    [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token 
PRODUCT
    [junit]     at 
org.antlr.runtime.tree.RewriteRuleElementStream._next(RewriteRuleElementStream.java:158)
    [junit]     at 
org.antlr.runtime.tree.RewriteRuleTokenStream.next(RewriteRuleTokenStream.java:57)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.parser.GHOCESParser.multExpr(GHOCESParser.java:3518)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.parser.GHOCESParser.addExpr(GHOCESParser.java:3311)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.parser.GHOCESParser.constraintDecl(GHOCESParser.java:2312)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.parser.GHOCESParser.constraints(GHOCESParser.java:1972)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.parser.GHOCESParser.constraintDecls(GHOCESParser.java:733)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.parser.GHOCESParser.program(GHOCESParser.java:168)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.GHOCES.parseFile(GHOCES.java:401)
    [junit]     at 
com.honeywell.htc.schedinfra.pconstraint.parser.test.TestParser.test1(TestParser.java:85)

Mark Wright wrote:
> Hello Jon,
>
> Here is an example stack trace of the exception:
>
> Exception in thread "main" org.antlr.runtime.tree.RewriteEarlyExitException
>         at tntdbo.dboc.TntdboParser.template_parameter_list(TntdboParser.java:15830)
>         at tntdbo.dboc.TntdboParser.template_declaration(TntdboParser.java:15677)
>         at tntdbo.dboc.TntdboParser.declaration(TntdboParser.java:5443)
>         at tntdbo.dboc.TntdboParser.declaration_seq(TntdboParser.java:5327)
>         at tntdbo.dboc.TntdboParser.namespace_body(TntdboParser.java:9378)
>         at tntdbo.dboc.TntdboParser.original_namespace_definition(TntdboParser.java:9142)
>         at tntdbo.dboc.TntdboParser.named_namespace_definition(TntdboParser.java:9053)
>         at tntdbo.dboc.TntdboParser.namespace_definition(TntdboParser.java:8958)
>         at tntdbo.dboc.TntdboParser.declaration(TntdboParser.java:5471)
>         at tntdbo.dboc.TntdboParser.declaration_seq(TntdboParser.java:5327)
>         at tntdbo.dboc.TntdboParser.translation_unit(TntdboParser.java:243)
>         at tntdbo.dboc.Tntdboc.process(Tntdboc.java:99)
>         at tntdbo.dboc.Tntdboc.<init>(Tntdboc.java:39)
>         at tntdbo.dboc.Tntdboc.main(Tntdboc.java:65)
>
> So I open up the 1.2 MB generated Java parser source file in emacs,
> (as netbeans just hangs when trying to open it), and go to line 15830
> from the stack trace above.  The relevant fragment is below.
> Then I look above the line where the RewriteEarlyExitException
> was thrown, to the comment that ANTLR helpfully generated for
> me to let me know the line in my grammar where I screwed up.
>
> // AST REWRITE
> // elements: template_parameter
> // token labels: 
> // rule labels: retval
> // token list labels: 
> // rule list labels: 
> retval.tree = root_0;
> RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
>
> root_0 = (TntdboAST)adaptor.nil();
> // 1175:17: -> ^( TEMPLATE_PARAM ( template_parameter )+ )
> {
>     // Tntdbo.g:1175:20: ^( TEMPLATE_PARAM ( template_parameter )+ )
>     {
>     TntdboAST root_1 = (TntdboAST)adaptor.nil();
>     root_1 = (TntdboAST)adaptor.becomeRoot((TntdboAST)adaptor.create(TEMPLATE_PARAM, "TEMPLATE_PARAM"), root_1);
>
>     if ( !(stream_template_parameter.hasNext()) ) {
>         throw new RewriteEarlyExitException();          <=== line 15830
>     }
>     while ( stream_template_parameter.hasNext() ) {
>         adaptor.addChild(root_1, stream_template_parameter.nextTree());
>
>     }
>     stream_template_parameter.reset();
>
>     adaptor.addChild(root_0, root_1);
>     }
>
> }
>
> I look at that line:
>
> template_parameter_list
>   :   template_parameter ( ',' template_parameter )*
>           -> ^(TEMPLATE_PARAM template_parameter+)      <=== line 1175
>   ;
>
> and I guess it is wrong, it does not like the plus in the AST rewrite.
> I tried changing it to:
>
> template_parameter_list
>   :   l+=template_parameter ( ',' l+=template_parameter )*
>           -> ^(TEMPLATE_PARAM $l)      <=== line 1175
>   ;
>
> It then gets past the RewriteEarlyExitException (to another issue in my grammar).
>
> I hope this gives some hints on how to debug it.
>
> Regards, Mark
>
>   

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From nik9000 at gmail.com  Mon Jan 14 13:15:19 2008
From: nik9000 at gmail.com (Nikolas Everett)
Date: Mon, 14 Jan 2008 16:15:19 -0500
Subject: [antlr-interest] ANTLRWorks Remote Debugger
Message-ID: <d4e11e980801141315l2f5fb681s37b20ecc3f8edc35@mail.gmail.com>

I'm trying to debug a grammar using the remote debugger and it is giving me
trees full of the name of my grammar instead of token names (
http://nik.endoftheinternet.org/~nik/parseTree.eps).  I do have the grammar
open while debugging it.  I'm using the latest spin of antlr to run the
grammar(2008-01-10.16) and the latest antlrworks (1.1.5).

Is this the expected behavior?  Is it possible to get it to work like the
integrated debugger?

Thanks,

--Nik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080114/ae0246c9/attachment.html 

From Alexei_Ostrov at ml.com  Mon Jan 14 13:25:57 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Mon, 14 Jan 2008 16:25:57 -0500
Subject: [antlr-interest] CSharp 3.0 target
Message-ID: <7619C175A5316C40A1F03CD996117B9D039C3DEF@MLNYC727MB.amrs.win.ml.com>

Solution to the problem:

>From examples of code for 2.7.x I see that Lexer used to be the
ITokenSource. In 3.0 Lexer does not implement that interface any more.
Instead there is a shared state that carries this information. So,
instead of the private int type field in the myGenerateLexer I declared
	private int type
	{
		set{state.type=value;}
	}

This works; I can "recognize" things now.

Alexei

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Ostrov, Alexei
(GMIT-TASS)
Sent: Monday, January 14, 2008 3:11 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] CSharp 3.0 target

Kunle, 

I apologize if I should be writing to a different place... If so, could
you please let me know?

I've generated the Lexer and Parser but they do not compile. In Lexer I
find the this.type variable. I defined it locally for now, but it
obviously is not right. From debugging I understand that this is the
type of the token, but because it is private it does not propagate to
the right place. I also do not see it defined anywhere in Lexer or
BaseParser as non-private field. I see it as property of Token, but am
not sure how it is supposed to get there. 
What am I doing wrong?

I am using 3.0.1 version. 

Thank you much, 

Alexei

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or
proprietary, and if you are not an intended recipient, please notify the
sender, do not use or share it and delete it. Unless specifically
indicated, this message is not an offer to sell or a solicitation of any
investment products or other financial product or service, an official
confirmation of any transaction, or an official statement of Merrill
Lynch. Subject to applicable law, Merrill Lynch may monitor, review and
retain e-communications (EC) traveling through its networks/systems. The
laws of the country of each sender/recipient may impact the handling of
EC, and EC may be archived, supervised and produced in countries other
than the country in which you are located. This message cannot be
guaranteed to be secure or error-free. This message is subject to terms
available at the following link:
http://www.ml.com/e-communications_terms/. By messaging with Merrill
Lynch you consent to the foregoing.
--------------------------------------------------------

From jaluber at gmx.de  Mon Jan 14 13:48:01 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 14 Jan 2008 22:48:01 +0100
Subject: [antlr-interest] CSharp 3.0 target
In-Reply-To: <7619C175A5316C40A1F03CD996117B9D039C3DEF@MLNYC727MB.amrs.win.ml.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DEF@MLNYC727MB.amrs.win.ml.com>
Message-ID: <478BD891.9080400@gmx.de>

Ostrov, Alexei (GMIT-TASS) schrieb:
> Solution to the problem:
> 
>> >From examples of code for 2.7.x I see that Lexer used to be the
> ITokenSource. In 3.0 Lexer does not implement that interface any more.
> Instead there is a shared state that carries this information. So,
> instead of the private int type field in the myGenerateLexer I declared
> 	private int type
> 	{
> 		set{state.type=value;}
> 	}
> 
> This works; I can "recognize" things now.
> 
> Alexei

Looking at your solution, I wonder if you are really using 3.0.1 and not 
some pre-3.1. AFAIK, state was introduced only in that development line.

Johannes

From dave at badgers-in-foil.co.uk  Mon Jan 14 13:51:29 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 14 Jan 2008 21:51:29 +0000
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
	quoted string to token?
In-Reply-To: <478BC572.4030201@mtu.net>
References: <477E5FA6.3070602@mtu.net> <477E83CC.5030208@gmail.com>
	<477EA5A5.8060903@gmx.de> <477F8A83.5050906@mtu.net>
	<20080106020421.000057b4@goanna> <478BC572.4030201@mtu.net>
Message-ID: <20080114215128.GA23106@badgers-in-foil.co.uk>

On Mon, Jan 14, 2008 at 02:26:26PM -0600, Jon Schewe wrote:
> I just got time to get back to this project, been stuck on a different 
> one.  I tried your suggestion of gathering everything up in a variable 
> and that didn't help.  Still the same error. 
> 
> /**
> * @param negate if true, negate all expressions by multiplying by -1
> */   
> multExpr[boolean negate]
>    :   a+=atom (PRODUCT a+=atom)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"]) $a)
>                                   ->           ^(PRODUCT $a)
>    ;
> 
>    [junit]     Caused an ERROR
>    [junit] token PRODUCT
>    [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token PRODUCT

I got one of those the other day as a result of a rule something like,

  r: A B C? -> B C;

ANTLR is unhappy when trying to do the C rewrite, on finding the expected
tree is missing (the input didn't actually contain C).  My fix was of
course to change to,

  r: A B C? -> B C?

You can't fix just by writing PRODUCT* on the r.h.s., as a tree with
zero-or-more root nodes doesn't make sense.

Also, do you really always want to create a tree with PRODUCT as the
root here, even if PRODUCT is not in the input?  I would have thought
that if no PRODUCT is present, you'd just want 'atom'?


How about something like (untested!),

  multExpr
      :   a+=atom
      (   (PRODUCT a+=atom)+ -> ^(PRODUCT $a)
      |                      -> $a
      )
      ;

(yes, I dropped the 'negate' stuff to make it simpler -- sorry ;)


ta,
dave

-- 
http://david.holroyd.me.uk/

From dmitry.gusev at gmail.com  Mon Jan 14 14:01:43 2008
From: dmitry.gusev at gmail.com (Dmitry Gusev)
Date: Tue, 15 Jan 2008 01:01:43 +0300
Subject: [antlr-interest] Using unicode in *.g file
Message-ID: <37a147f40801141401t12ffc6fehb3c6c079dc9f67d2@mail.gmail.com>

Why this isn't supported?

In order to use Russian words as tokens I should write them as unicode
escape sequences \u00xx blah blah
Thats very inconvenient, is it possible to fix this somehow?

-- 
Dmitry Gusev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080115/ad2f76ab/attachment.html 

From dave at badgers-in-foil.co.uk  Mon Jan 14 14:05:15 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 14 Jan 2008 22:05:15 +0000
Subject: [antlr-interest] pushed antlr build with tree rewriting and
	composite grammars (java)
In-Reply-To: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
References: <1C462AC4-E05C-4E18-8B5A-2C2ADDC981E0@cs.usfca.edu>
Message-ID: <20080114220514.GB23106@badgers-in-foil.co.uk>

On Thu, Jan 10, 2008 at 04:39:54PM -0800, Terence Parr wrote:
> Grab
> 
> http://www.antlr.org/download/build/antlr-2008-01-10.16.tar.gz

Another change I notice is that where there were rules like,

  classDef
      :  CLASS ident
         classExtendsClause
         typeBlock
         -> (CLASS ident classExtendsClause typeBlock)

  classExtendsClause
      :  (EXTENDS^ identifier)?
      ;

I must change the rewrite in the first rule to,

  classDef
      :  CLASS ident
         classExtendsClause
         typeBlock
         -> (CLASS ident classExtendsClause? typeBlock)

Which sort-of makes sense, though the left and right hand sides of the
rewrite end up looking 'unbalanced' now.  It looks better if I just
hoist the '?' everywhere,

  classDef
      :  CLASS ident
         classExtendsClause?
         typeBlock
         -> (CLASS ident classExtendsClause? typeBlock)

  classExtendsClause
      :  EXTENDS^ identifier
      ;


ta,
dave

-- 
http://david.holroyd.me.uk/

From Alexei_Ostrov at ml.com  Mon Jan 14 14:11:54 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Mon, 14 Jan 2008 17:11:54 -0500
Subject: [antlr-interest] CSharp 3.0 target
Message-ID: <7619C175A5316C40A1F03CD996117B9D027723D8@MLNYC727MB.amrs.win.ml.com>

Hm, 

I will try to get the distribution pack again. 

Thank you

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Johannes Luber
Sent: Monday, January 14, 2008 4:48 PM
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] CSharp 3.0 target

Ostrov, Alexei (GMIT-TASS) schrieb:
> Solution to the problem:
> 
>> >From examples of code for 2.7.x I see that Lexer used to be the
> ITokenSource. In 3.0 Lexer does not implement that interface any more.
> Instead there is a shared state that carries this information. So,
> instead of the private int type field in the myGenerateLexer I
declared
> 	private int type
> 	{
> 		set{state.type=value;}
> 	}
> 
> This works; I can "recognize" things now.
> 
> Alexei

Looking at your solution, I wonder if you are really using 3.0.1 and not

some pre-3.1. AFAIK, state was introduced only in that development line.

Johannes
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------

From jaluber at gmx.de  Mon Jan 14 14:44:32 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 14 Jan 2008 23:44:32 +0100
Subject: [antlr-interest] Using unicode in *.g file
In-Reply-To: <37a147f40801141401t12ffc6fehb3c6c079dc9f67d2@mail.gmail.com>
References: <37a147f40801141401t12ffc6fehb3c6c079dc9f67d2@mail.gmail.com>
Message-ID: <478BE5D0.4070402@gmx.de>

Dmitry Gusev schrieb:
> Why this isn't supported?
> 
> In order to use Russian words as tokens I should write them as unicode 
> escape sequences \u00xx blah blah
> Thats very inconvenient, is it possible to fix this somehow?

Unfortuantely, ANTLR still parses *.g files with ANTLR 2.7.7, which 
doesn't support unicode characters directly. Ter is working on a 
solution, but this while take a while. Maybe 3.2 has this feature.

Johannes

From antlr at jazillian.com  Mon Jan 14 14:42:21 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 14 Jan 2008 17:42:21 -0500
Subject: [antlr-interest] save a tree
In-Reply-To: <fm8i8f$186$1@ger.gmane.org>
References: <4786AABD.30005@jpl.nasa.gov> <fm8i8f$186$1@ger.gmane.org>
Message-ID: <478BE54D.70806@jazillian.com>

There's gotta be a tool that lets you save a Java object in XML and then 
read
it back in in python. There are lots of tools that save Java objects as XML.
Maybe this thing works: 
http://www.ibm.com/developerworks/library/x-matters32.html

Andy

Benjamin Niemann wrote:
> Hi Mathew,
>
> Mathew Yeates wrote:
>   
>>  From within a java program I want to save (to disk) the AST I've
>> created. Then I want to read it back into a python program. Anyone have
>> any ideas about the simplest approach to this?
>>     
>
> I'm not aware of any format, package, whatever (something that could
> (de)serialize custom objects cross language) that could help you here - and
> ANTLR does not offer anything here. So you probably have to build your own
> serialization in Java and deserialize in Python - and ANTLR does not offer
> anything here.
> Just walk to AST and dump all info that you need in a easy to parse format
> and read it back in Python building the nodes along the way.
>
> -Ben
>
>   

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080114/dbbadab4/attachment.html 

From jpschewe at mtu.net  Mon Jan 14 15:40:10 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Mon, 14 Jan 2008 17:40:10 -0600
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <20080114215128.GA23106@badgers-in-foil.co.uk>
References: <477E5FA6.3070602@mtu.net>
	<477E83CC.5030208@gmail.com>	<477EA5A5.8060903@gmx.de>
	<477F8A83.5050906@mtu.net>	<20080106020421.000057b4@goanna>
	<478BC572.4030201@mtu.net>
	<20080114215128.GA23106@badgers-in-foil.co.uk>
Message-ID: <478BF2DA.7030200@mtu.net>

David Holroyd wrote:
> On Mon, Jan 14, 2008 at 02:26:26PM -0600, Jon Schewe wrote:
>   
>> I just got time to get back to this project, been stuck on a different 
>> one.  I tried your suggestion of gathering everything up in a variable 
>> and that didn't help.  Still the same error. 
>>
>> /**
>> * @param negate if true, negate all expressions by multiplying by -1
>> */   
>> multExpr[boolean negate]
>>    :   a+=atom (PRODUCT a+=atom)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"]) $a)
>>                                   ->           ^(PRODUCT $a)
>>    ;
>>
>>    [junit]     Caused an ERROR
>>    [junit] token PRODUCT
>>    [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token PRODUCT
>>     
>
> You can't fix just by writing PRODUCT* on the r.h.s., as a tree with
> zero-or-more root nodes doesn't make sense.
>
> Also, do you really always want to create a tree with PRODUCT as the
> root here, even if PRODUCT is not in the input?  I would have thought
> that if no PRODUCT is present, you'd just want 'atom'?
>
>   
Yes, I really want to always have PRODUCT, at least that's how my tree
walker is setup right now.  It makes for a more regular tree.  Is the
problem that antlr can't figure out which PRODUCT token to use?

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From parrt at cs.usfca.edu  Mon Jan 14 17:59:02 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 14 Jan 2008 17:59:02 -0800
Subject: [antlr-interest] ANTLRWorks Remote Debugger
In-Reply-To: <d4e11e980801141315l2f5fb681s37b20ecc3f8edc35@mail.gmail.com>
References: <d4e11e980801141315l2f5fb681s37b20ecc3f8edc35@mail.gmail.com>
Message-ID: <667A8FCB-07D0-44BE-A248-43F3E0C1DA56@cs.usfca.edu>

weird. never seen it.  got a test grammar that does it?  Does it do  
same thing nonremote?
Ter
On Jan 14, 2008, at 1:15 PM, Nikolas Everett wrote:

> I'm trying to debug a grammar using the remote debugger and it is  
> giving me trees full of the name of my grammar instead of token  
> names (http://nik.endoftheinternet.org/~nik/parseTree.eps ).  I do  
> have the grammar open while debugging it.  I'm using the latest spin  
> of antlr to run the grammar(2008-01-10.16) and the latest antlrworks  
> (1.1.5).
>
> Is this the expected behavior?  Is it possible to get it to work  
> like the integrated debugger?
>
> Thanks,
>
> --Nik
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080114/62a59fa8/attachment.html 

From Alexei_Ostrov at ml.com  Mon Jan 14 20:23:54 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Mon, 14 Jan 2008 23:23:54 -0500
Subject: [antlr-interest] White space skip in antlr 3.1
Message-ID: <7619C175A5316C40A1F03CD996117B9D039C3DF0@MLNYC727MB.amrs.win.ml.com>

I found multiple examples for skipping white space:

...

WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ skip(); };  

COMA  :           WS','WS;

...

 

This works in AntlrWorks but does not work after code generation for
CSharp. 

I also tried some others:

Antlr::Token::SKIP

Token.Skip()

 

I suspect these are for C++/C and Java, though...

Can someone please give me a hint about how to ignore white space?

 

Alexei

Alexei Ostrov 
Desk A0513, 11th floor, 222 Broadway, NY, NY10038 
212.670.1784 
917.520.0205
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080114/20eee074/attachment.html 

From antlr at mirality.co.nz  Tue Jan 15 00:04:45 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 15 Jan 2008 21:04:45 +1300
Subject: [antlr-interest] Newline not recognized
In-Reply-To: <009201c856df$0df9f580$29ede080$@isaacson@compuflex.com>
References: <-3609598642124291289@unknownmsgid>
	<ebc876d70801132320t462b5d72x1a9023501aa08721@mail.gmail.com>
	<009201c856df$0df9f580$29ede080$@isaacson@compuflex.com>
Message-ID: <20080115080504.898DA11EAC5@www.antlr.org>

At 07:55 15/01/2008, Cory Isaacson wrote:
>One follow on question:
>
>My message format is name/value pairs like this:
>
>\nLabel1=value
>\nLabel2=value
>
>However, the value can contain an entire SQL statement, which can 
>of course have single, double quotes, etc. What is a good way to 
>recognize the value, but not so broadly that the lexer token 
>tries to recognize the whole message?

With that sort of input I wouldn't even bother with a formal 
parser -- that's what String.Split was built for.


From smbogan at gmail.com  Tue Jan 15 00:10:29 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Tue, 15 Jan 2008 02:10:29 -0600
Subject: [antlr-interest] options and tokens
Message-ID: <31160efe0801150010q590b76ffs8b0659ae7ac80968@mail.gmail.com>

My grammar starts out something like this:

grammar fqs;

tokens {
   IMAGINARY;
}

options {
  output=AST;
}

However, I get a an error that options is unexpected.  How do I create
imaginary tokens for my rewrites if I can't use both options and
tokens?  If I flip the order, it always complains about the second
one.  Am I missing something here?  This is my first time trying to
use AST rewrite rules.

Thanks for any help,
S M Bogan

From dave at badgers-in-foil.co.uk  Tue Jan 15 00:30:58 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Tue, 15 Jan 2008 08:30:58 +0000
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
	quoted string to token?
In-Reply-To: <478BF2DA.7030200@mtu.net>
References: <477E5FA6.3070602@mtu.net> <477E83CC.5030208@gmail.com>
	<477EA5A5.8060903@gmx.de> <477F8A83.5050906@mtu.net>
	<20080106020421.000057b4@goanna> <478BC572.4030201@mtu.net>
	<20080114215128.GA23106@badgers-in-foil.co.uk>
	<478BF2DA.7030200@mtu.net>
Message-ID: <20080115083058.GC23106@badgers-in-foil.co.uk>

On Mon, Jan 14, 2008 at 05:40:10PM -0600, Jon Schewe wrote:
> David Holroyd wrote:
> > On Mon, Jan 14, 2008 at 02:26:26PM -0600, Jon Schewe wrote:
> >   
> >> I just got time to get back to this project, been stuck on a different 
> >> one.  I tried your suggestion of gathering everything up in a variable 
> >> and that didn't help.  Still the same error. 
> >>
> >> /**
> >> * @param negate if true, negate all expressions by multiplying by -1
> >> */   
> >> multExpr[boolean negate]
> >>    :   a+=atom (PRODUCT a+=atom)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"]) $a)
> >>                                   ->           ^(PRODUCT $a)
> >>    ;
> >>
> >>    [junit]     Caused an ERROR
> >>    [junit] token PRODUCT
> >>    [junit] org.antlr.runtime.tree.RewriteEmptyStreamException: token PRODUCT
> >>     
> >
> > You can't fix just by writing PRODUCT* on the r.h.s., as a tree with
> > zero-or-more root nodes doesn't make sense.
> >
> > Also, do you really always want to create a tree with PRODUCT as the
> > root here, even if PRODUCT is not in the input?  I would have thought
> > that if no PRODUCT is present, you'd just want 'atom'?
> >
> >   
> Yes, I really want to always have PRODUCT, at least that's how my tree
> walker is setup right now.  It makes for a more regular tree.  Is the
> problem that antlr can't figure out which PRODUCT token to use?

Ah, sorry.

Yes, my understanding is that ANTLR sees that there are PRODUCT entries
on the left and right of the rewrite, and therefor tracks the PRODUCTs
seen while parsing in order to stick those actual entries in to the
rewritten tree.

I suspect RewriteEmptyStreamException is the result when the rewrite
tries to insert one of the captured PRODUCTs, but the parse didn't
capture one (because there was an 'atom' with no '*', I guess).


Here's another idea that I didn't test :)

  multExpr[boolean negate]
    :   a+=atom (a+=multHelp)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"]) $a)
                               ->           ^(PRODUCT $a)
    ;

  multHelp
    :   PRODUCT atom -> atom


ta,
dave

-- 
http://david.holroyd.me.uk/

From dave at badgers-in-foil.co.uk  Tue Jan 15 00:35:09 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Tue, 15 Jan 2008 08:35:09 +0000
Subject: [antlr-interest] options and tokens
In-Reply-To: <31160efe0801150010q590b76ffs8b0659ae7ac80968@mail.gmail.com>
References: <31160efe0801150010q590b76ffs8b0659ae7ac80968@mail.gmail.com>
Message-ID: <20080115083509.GD23106@badgers-in-foil.co.uk>

On Tue, Jan 15, 2008 at 02:10:29AM -0600, Shaun Bogan wrote:
> My grammar starts out something like this:
> 
> grammar fqs;
> 
> tokens {
>    IMAGINARY;
> }
> 
> options {
>   output=AST;
> }
> 
> However, I get a an error that options is unexpected.  How do I create
> imaginary tokens for my rewrites if I can't use both options and
> tokens?  If I flip the order, it always complains about the second
> one.  Am I missing something here?  This is my first time trying to
> use AST rewrite rules.

I have it working with,

  grammar G;
  options { ... }
  tokens { ... }

What error do you see with them ordered this way?


ta,
dave

-- 
http://david.holroyd.me.uk/

From sunshine at public.kherson.ua  Tue Jan 15 02:36:10 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 15 Jan 2008 12:36:10 +0200
Subject: [antlr-interest] About C runtime question.
In-Reply-To: <478BF2DA.7030200@mtu.net>
Message-ID: <C3B2593A.8A545%sunshine@public.kherson.ua>

Hi Jim,


>From here:
    
    http://www.antlr.org/wiki/display/ANTLR3/ANTLR3+Code+Generation+-+C

> As there is no such thing as an object reference in C, I chose to create a
> number of typedef structs that reflect the calling interface chosen by Terence
> in the Java version of the same. The initialization of a parser, lexer, input
> stream or internal structure therefore consists of allocating the memory
> required for an instance of the typedef struct that represents the interface,
> initializing any counters, pointers and buffers etc, then populating a number
> of pointers to functions that implement the equivalent of the methods in the
> Java class.

Sounds like each time for each new object, is executed population of
function pointers?

I think more effective prepare this once, and in the object structure keep
only pointer to StructOfFuncsOfClassXXXX, exactly as C++ do.

No ?

P.S. I have not read sources yet


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From adam.rpconnelly at googlemail.com  Tue Jan 15 03:45:57 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Tue, 15 Jan 2008 11:45:57 +0000
Subject: [antlr-interest] White space skip in antlr 3.1
In-Reply-To: <7619C175A5316C40A1F03CD996117B9D039C3DF0@MLNYC727MB.amrs.win.ml.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF0@MLNYC727MB.amrs.win.ml.com>
Message-ID: <b9a39b060801150345w7a637181i963211382fdb27ff@mail.gmail.com>

I think I've noticed that before.  I tend to just set the channel to hidden:

WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ $channel=HIDDEN; };

This means that the parser does not see the whitespace, but isn't exactly
the same as skip() (I don't think) although I don't know the difference.
Anyhow, it's always worked for me in C#.

Adam

On 15/01/2008, Ostrov, Alexei (GMIT-TASS) <Alexei_Ostrov at ml.com> wrote:
>
>   I found multiple examples for skipping white space:
>
> ?
>
> WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ skip(); };
>
> COMA  :           WS','WS;
>
> ?
>
>
>
> This works in AntlrWorks but does not work after code generation for
> CSharp.
>
> I also tried some others:
>
> Antlr::Token::SKIP
>
> Token.Skip()
>
>
>
> I suspect these are for C++/C and Java, though?
>
> Can someone please give me a hint about how to ignore white space?
>
>
>
> Alexei
>
> Alexei Ostrov
> Desk A0513, 11th floor, 222 Broadway, NY, NY10038
> 212.670.1784
> 917.520.0205
>
>
>  ------------------------------
>  This message w/attachments (message) may be privileged, confidential or
> proprietary, and if you are not an intended recipient, please notify the
> sender, do not use or share it and delete it. Unless specifically indicated,
> this message is not an offer to sell or a solicitation of any investment
> products or other financial product or service, an official confirmation of
> any transaction, or an official statement of Merrill Lynch. Subject to
> applicable law, Merrill Lynch may monitor, review and retain
> e-communications (EC) traveling through its networks/systems. The laws of
> the country of each sender/recipient may impact the handling of EC, and EC
> may be archived, supervised and produced in countries other than the country
> in which you are located. This message cannot be guaranteed to be secure or
> error-free. This message is subject to terms available at the following
> link: http://www.ml.com/e-communications_terms/. By messaging with Merrill
> Lynch you consent to the foregoing.
>  ------------------------------
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080115/203254a9/attachment.html 

From harald_m_mueller at gmx.de  Tue Jan 15 03:57:45 2008
From: harald_m_mueller at gmx.de (Harald Mueller)
Date: Tue, 15 Jan 2008 12:57:45 +0100
Subject: [antlr-interest] White space skip in antlr 3.1
In-Reply-To: <b9a39b060801150345w7a637181i963211382fdb27ff@mail.gmail.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF0@MLNYC727MB.amrs.win.ml.com>
	<b9a39b060801150345w7a637181i963211382fdb27ff@mail.gmail.com>
Message-ID: <20080115115745.211670@gmx.net>

Skip() (with uppercase S) works for me ...

Regards
Harald 

-------- Original-Nachricht --------
> Datum: Tue, 15 Jan 2008 11:45:57 +0000
> Von: "Adam Connelly" <adam.rpconnelly at googlemail.com>
> An: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] White space skip in antlr 3.1

> I think I've noticed that before.  I tend to just set the channel to
> hidden:
> 
> WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ $channel=HIDDEN; };
> 
> This means that the parser does not see the whitespace, but isn't exactly
> the same as skip() (I don't think) although I don't know the difference.
> Anyhow, it's always worked for me in C#.
> 
> Adam
> 
> On 15/01/2008, Ostrov, Alexei (GMIT-TASS) <Alexei_Ostrov at ml.com> wrote:
> >
> >   I found multiple examples for skipping white space:
> >
> > ?
> >
> > WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ skip(); };
> >
> > COMA  :           WS','WS;
> >
> > ?
> >
> >
> >
> > This works in AntlrWorks but does not work after code generation for
> > CSharp.
> >
> > I also tried some others:
> >
> > Antlr::Token::SKIP
> >
> > Token.Skip()
> >
> >
> >
> > I suspect these are for C++/C and Java, though?
> >
> > Can someone please give me a hint about how to ignore white space?
> >
> >
> >
> > Alexei
> >
> > Alexei Ostrov
> > Desk A0513, 11th floor, 222 Broadway, NY, NY10038
> > 212.670.1784
> > 917.520.0205
> >
> >
> >  ------------------------------
> >  This message w/attachments (message) may be privileged, confidential or
> > proprietary, and if you are not an intended recipient, please notify the
> > sender, do not use or share it and delete it. Unless specifically
> indicated,
> > this message is not an offer to sell or a solicitation of any investment
> > products or other financial product or service, an official confirmation
> of
> > any transaction, or an official statement of Merrill Lynch. Subject to
> > applicable law, Merrill Lynch may monitor, review and retain
> > e-communications (EC) traveling through its networks/systems. The laws
> of
> > the country of each sender/recipient may impact the handling of EC, and
> EC
> > may be archived, supervised and produced in countries other than the
> country
> > in which you are located. This message cannot be guaranteed to be secure
> or
> > error-free. This message is subject to terms available at the following
> > link: http://www.ml.com/e-communications_terms/. By messaging with
> Merrill
> > Lynch you consent to the foregoing.
> >  ------------------------------
> >
> >

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger?did=10

From jaluber at gmx.de  Tue Jan 15 04:12:26 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 15 Jan 2008 13:12:26 +0100
Subject: [antlr-interest] options and tokens
In-Reply-To: <20080115083509.GD23106@badgers-in-foil.co.uk>
References: <31160efe0801150010q590b76ffs8b0659ae7ac80968@mail.gmail.com>
	<20080115083509.GD23106@badgers-in-foil.co.uk>
Message-ID: <478CA32A.7060109@gmx.de>

David Holroyd schrieb:
> I have it working with,
> 
>   grammar G;
>   options { ... }
>   tokens { ... }

The reason why this works and not the other way around is that the 
current grammar parser doesn't work order-independent yet. IIRC, the 
wiki details the expected order at some page.

Johannes

From markwright at internode.on.net  Tue Jan 15 05:04:48 2008
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 16 Jan 2008 00:04:48 +1100
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <20080115083058.GC23106@badgers-in-foil.co.uk>
References: <477E5FA6.3070602@mtu.net> <477E83CC.5030208@gmail.com>
	<477EA5A5.8060903@gmx.de> <477F8A83.5050906@mtu.net>
	<20080106020421.000057b4@goanna> <478BC572.4030201@mtu.net>
	<20080114215128.GA23106@badgers-in-foil.co.uk>
	<478BF2DA.7030200@mtu.net>
	<20080115083058.GC23106@badgers-in-foil.co.uk>
Message-ID: <20080116000448.00001219@goanna>

On Tue, 15 Jan 2008 08:30:58 +0000
David Holroyd <dave at badgers-in-foil.co.uk> wrote:

> On Mon, Jan 14, 2008 at 05:40:10PM -0600, Jon Schewe wrote:
> > David Holroyd wrote:
> > > On Mon, Jan 14, 2008 at 02:26:26PM -0600, Jon Schewe wrote:
> > >   
> > >> I just got time to get back to this project, been stuck on a
> > >> different one.  I tried your suggestion of gathering everything
> > >> up in a variable and that didn't help.  Still the same error. 
> > >>
> > >> /**
> > >> * @param negate if true, negate all expressions by multiplying
> > >> by -1 */   
> > >> multExpr[boolean negate]
> > >>    :   a+=atom (PRODUCT a+=atom)* -> {negate}? ^(PRODUCT
> > >> ^(NUMBER DOUBLE["-1"]) $a) ->           ^(PRODUCT $a)
> > >>    ;
> > >>
> > >>    [junit]     Caused an ERROR
> > >>    [junit] token PRODUCT
> > >>    [junit] org.antlr.runtime.tree.RewriteEmptyStreamException:
> > >> token PRODUCT 
> > >
> > > You can't fix just by writing PRODUCT* on the r.h.s., as a tree
> > > with zero-or-more root nodes doesn't make sense.
> > >
> > > Also, do you really always want to create a tree with PRODUCT as
> > > the root here, even if PRODUCT is not in the input?  I would have
> > > thought that if no PRODUCT is present, you'd just want 'atom'?
> > >
> > >   
> > Yes, I really want to always have PRODUCT, at least that's how my
> > tree walker is setup right now.  It makes for a more regular tree.
> > Is the problem that antlr can't figure out which PRODUCT token to
> > use?
> 
> Ah, sorry.
> 
> Yes, my understanding is that ANTLR sees that there are PRODUCT
> entries on the left and right of the rewrite, and therefor tracks the
> PRODUCTs seen while parsing in order to stick those actual entries in
> to the rewritten tree.

Hello Dave,

That seems like you might be on the right line of thinking.
I don't actually know, but I'll continue to sort of speculate
anyway...
 
> I suspect RewriteEmptyStreamException is the result when the rewrite
> tries to insert one of the captured PRODUCTs, but the parse didn't
> capture one (because there was an 'atom' with no '*', I guess).

I am sort of wondering if maybe ANTLR might be expecting
to see all the PRODUCT tokens that were matched in the
rule appear in the AST rewrite rule, and maybe its confused
when there is only 1 in the AST rewrite rule?

That guess could easilly be tested by changing the PRODUCT
in the rewrite rule to an imaginary token.

Crazy idea: I don't suppose ANTLR would like .start attribute here
(from p. 130 figure 6.2 of the ANTLR book)

multExpr[boolean negate]
   :   a+=atom (PRODUCT a+=atom)* -> {negate}? ^(PRODUCT.start ^(NUMBER DOUBLE["-1"]) $a)  
                                  ->           ^(PRODUCT.start $a)  
   ;

> Here's another idea that I didn't test :)
>
>   multExpr[boolean negate]
>     :   a+=atom (a+=multHelp)* -> {negate}? ^(PRODUCT ^(NUMBER
> DOUBLE["-1"]) $a) ->           ^(PRODUCT $a)
>     ;
> 
>   multHelp
>     :   PRODUCT atom -> atom

I wonder if that might be different as it seems like the
a+=multHelp might be trying to collect a sequence
of PRODCUT atom tokens?

Anyway I'm only guessing, so feel free to ignore me.

Thanks, Mark

From r.mark.volkmann at gmail.com  Tue Jan 15 05:42:30 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 15 Jan 2008 07:42:30 -0600
Subject: [antlr-interest] access-modifier for rules
Message-ID: <f0fcc6820801150542y5c0c9027qb2a1109bdd090b89@mail.gmail.com>

I see that rule names in an ANTLR grammar can be preceded by an
access-modifier. However, I've never seen this actually used in any
grammars. What are examples of cases where you'd want to specify one?

-- 
R. Mark Volkmann
Object Computing, Inc.

From jaluber at gmx.de  Tue Jan 15 06:01:08 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 15 Jan 2008 15:01:08 +0100
Subject: [antlr-interest] access-modifier for rules
In-Reply-To: <f0fcc6820801150542y5c0c9027qb2a1109bdd090b89@mail.gmail.com>
References: <f0fcc6820801150542y5c0c9027qb2a1109bdd090b89@mail.gmail.com>
Message-ID: <478CBCA4.6090604@gmx.de>

Mark Volkmann schrieb:
> I see that rule names in an ANTLR grammar can be preceded by an
> access-modifier. However, I've never seen this actually used in any
> grammars. What are examples of cases where you'd want to specify one?
> 
So far, only fragment has any effect. I don't why Ter does look for 
them, so my speculation is that  he either plans to use them at some 
time in the future or he only wants introduce better error handling.

Johannes

From Alexei_Ostrov at ml.com  Tue Jan 15 06:22:38 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Tue, 15 Jan 2008 09:22:38 -0500
Subject: [antlr-interest] White space skip in antlr 3.1
Message-ID: <7619C175A5316C40A1F03CD996117B9D039C3DF1@MLNYC727MB.amrs.win.ml.com>

Thank you very much! 

(' '|'\t'|'\f'|'\n'|'\r'){ $channel=HIDDEN; }; //no '+' needed
works for me handsomely :).
{Skip();}; works nicely as well!

Good stuff.


Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Harald Mueller
Sent: Tuesday, January 15, 2008 6:58 AM
To: Adam Connelly; antlr-interest at antlr.org
Subject: Re: [antlr-interest] White space skip in antlr 3.1

Skip() (with uppercase S) works for me ...

Regards
Harald 

-------- Original-Nachricht --------
> Datum: Tue, 15 Jan 2008 11:45:57 +0000
> Von: "Adam Connelly" <adam.rpconnelly at googlemail.com>
> An: antlr-interest at antlr.org
> Betreff: Re: [antlr-interest] White space skip in antlr 3.1

> I think I've noticed that before.  I tend to just set the channel to
> hidden:
> 
> WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ $channel=HIDDEN; };
> 
> This means that the parser does not see the whitespace, but isn't exactly
> the same as skip() (I don't think) although I don't know the difference.
> Anyhow, it's always worked for me in C#.
> 
> Adam
> 
> On 15/01/2008, Ostrov, Alexei (GMIT-TASS) <Alexei_Ostrov at ml.com> wrote:
> >
> >   I found multiple examples for skipping white space:
> >
> > ...
> >
> > WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ skip(); };
> >
> > COMA  :           WS','WS;
> >
> > ...
> >
> >
> >
> > This works in AntlrWorks but does not work after code generation for
> > CSharp.
> >
> > I also tried some others:
> >
> > Antlr::Token::SKIP
> >
> > Token.Skip()
> >
> >
> >
> > I suspect these are for C++/C and Java, though...
> >
> > Can someone please give me a hint about how to ignore white space?
> >
> >
> >
> > Alexei
> >
> > Alexei Ostrov
> > Desk A0513, 11th floor, 222 Broadway, NY, NY10038
> > 212.670.1784
> > 917.520.0205
> >
> >
> >  ------------------------------
> >  This message w/attachments (message) may be privileged, confidential or
> > proprietary, and if you are not an intended recipient, please notify the
> > sender, do not use or share it and delete it. Unless specifically
> indicated,
> > this message is not an offer to sell or a solicitation of any investment
> > products or other financial product or service, an official confirmation
> of
> > any transaction, or an official statement of Merrill Lynch. Subject to
> > applicable law, Merrill Lynch may monitor, review and retain
> > e-communications (EC) traveling through its networks/systems. The laws
> of
> > the country of each sender/recipient may impact the handling of EC, and
> EC
> > may be archived, supervised and produced in countries other than the
> country
> > in which you are located. This message cannot be guaranteed to be secure
> or
> > error-free. This message is subject to terms available at the following
> > link: http://www.ml.com/e-communications_terms/. By messaging with
> Merrill
> > Lynch you consent to the foregoing.
> >  ------------------------------
> >
> >

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger?did=10
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------

From smbogan at gmail.com  Tue Jan 15 08:40:42 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Tue, 15 Jan 2008 10:40:42 -0600
Subject: [antlr-interest] options and tokens
In-Reply-To: <31160efe0801150010q590b76ffs8b0659ae7ac80968@mail.gmail.com>
References: <31160efe0801150010q590b76ffs8b0659ae7ac80968@mail.gmail.com>
Message-ID: <31160efe0801150840s7ecf0217x7457d7740af4fda0@mail.gmail.com>

Strangely, that's how I had it before, with options first, then
tokens.  I had some commented out code inbetween.  It seems removing
the comments fixed it.  Odd.

Thanks for the help,
S M Bogan

On Jan 15, 2008 2:10 AM, Shaun Bogan <smbogan at gmail.com> wrote:
> My grammar starts out something like this:
>
> grammar fqs;
>
> tokens {
>   IMAGINARY;
> }
>
> options {
>  output=AST;
> }
>
> However, I get a an error that options is unexpected.  How do I create
> imaginary tokens for my rewrites if I can't use both options and
> tokens?  If I flip the order, it always complains about the second
> one.  Am I missing something here?  This is my first time trying to
> use AST rewrite rules.
>
> Thanks for any help,
> S M Bogan
>

From antlr at mirality.co.nz  Tue Jan 15 10:39:38 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 16 Jan 2008 07:39:38 +1300
Subject: [antlr-interest] White space skip in antlr 3.1
In-Reply-To: <b9a39b060801150345w7a637181i963211382fdb27ff@mail.gmail.co
 m>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF0@MLNYC727MB.amrs.win.ml.com>
	<b9a39b060801150345w7a637181i963211382fdb27ff@mail.gmail.com>
Message-ID: <20080115183957.9357D11EADA@www.antlr.org>

At 00:45 16/01/2008, Adam Connelly wrote:

>I think I've noticed that before.  I tend to just set the channel 
>to hidden:
>
>WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ $channel=HIDDEN; 
>};
>
>This means that the parser does not see the whitespace, but isn't 
>exactly the same as skip() (I don't think) although I don't know 
>the difference.  Anyhow, it's always worked for me in C#.

skip() will avoid generating a token entirely.  $channel = HIDDEN 
will still generate a token, but mark it as on a different channel 
from the normal parsing, which will make the parser ignore it but 
leave it accessible to actions if need be. 


From sunshine at public.kherson.ua  Tue Jan 15 13:24:28 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 15 Jan 2008 23:24:28 +0200
Subject: [antlr-interest] [HELP][MACOSX] CLASSPATH problems
Message-ID: <C3B2F12C.8A692%sunshine@public.kherson.ua>

Hi All,

I have found only way to make run org.antlr.Tool using this command line:

java -cp "/antlr-3.0.1/lib/antlr-3.0.1.jar:
          /antlr-3.0.1/lib/antlr-2.7.7.jar:
          /antlr-3.0.1/lib/stringtemplate-3.1b1.jar" org.antlr.Tool

I.e. I need specify 3 JAR files. If I try specify only folder then it not
works.


java -cp "/antlr-3.0.1/lib" org.antlr.Tool      <<<<<<<<< not works.


---------------------------
It will be great if on this page

    How do I install this damn thing?
    http://antlr.org/wiki/pages/viewpage.action?pageId=728

Will be given EXACT steps HOW TO setup this CLASSPATH variable for each OS.

Please keep in mind that not all developers are JAVA guru and each day do
this :-)

I have spend already 2 hours for Google search, and have found that IT SEEMS
on MAC OS X I can specify CLASSPATH in the HOME/.tcshrc file.

Is this right?

Can anybody copy/paste own lines for this file?


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From r.mark.volkmann at gmail.com  Tue Jan 15 13:53:20 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 15 Jan 2008 15:53:20 -0600
Subject: [antlr-interest] output = template
Message-ID: <f0fcc6820801151353g48b3c5dmd3b81ae1312aaedc@mail.gmail.com>

I have a tree grammar whose output is performed using
System.out.println calls in rule actions and doesn't use
StringTemplate. Why do I have to set the grammar option "output =
template;" to get this to work when I'm not using StringTemplate?

It seems that there isn't a default value for this option. Is that correct?

-- 
R. Mark Volkmann
Object Computing, Inc.

From stephanie.balzer at gmail.com  Tue Jan 15 14:38:55 2008
From: stephanie.balzer at gmail.com (Stephanie Balzer)
Date: Tue, 15 Jan 2008 23:38:55 +0100
Subject: [antlr-interest] Option backtrack=true
Message-ID: <61bdac940801151438t7e699d99qcf3afc2b07198d0a@mail.gmail.com>

Hi all,

I am new to ANTLR and use ANTLRWorks to develop a compiler for my
programming language. I based my grammar on the Java 1.5 grammar for ANTLR
v3. Thus, I took over the options

k=2; backtrack=true; memoize=true

With above options, I was able to generate the parser successfully. However,
when I started debugging some programming language statements/expressions
the parser seemed to simply ignore some of the rules and didn't produce the
result I expected. I guess this has to do with the syntactic predicates that
are assigned to productions.

Now my questions:

- What does this option actually mean?

- Is it advisable not use the backtracking option?

- If I use the backtracking option, how can I influence these predicates?

I also tried to remove the backtracking option. In this case, however, I get
a lot of warnings when generating the parser. To resolve these warnings I
started to left factor my rules. But this seems to be a endless story!

So, another question:

- Is left factoring the only solution to deal with the warnings (besides
enabling backtracking)?

Thanks a lot for your help!

Stephanie
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080115/78e807e1/attachment.html 

From Alexei_Ostrov at ml.com  Tue Jan 15 14:56:52 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Tue, 15 Jan 2008 17:56:52 -0500
Subject: [antlr-interest] What is the difference between grammars?!
Message-ID: <7619C175A5316C40A1F03CD996117B9D039C3DF6@MLNYC727MB.amrs.win.ml.com>

One:	
DIGIT		: 	'0'..'9';
DOUBLE 	:	(DIGIT)+ ('.' (DIGIT)+)? ('e' ('-'|'+')?( DIGIT)+ )? ;
num	:	DOUBLE | COLUMN;


Another one:
DOUBLE 	:	('0'..'9')+ ('.' ('0'..'9')+)? ('e'
('-'|'+')?('0'..'9')+ )? ;
num	:	DOUBLE | COLUMN;


The first one does not accept 4 as num, the second one does. 

That is if I check the parse trees either in AntlrWorks or via generated
code (CSharp). Using Antlr build antlr-2008-01-10.16  

What am I missing!? Did I stumble into a bug? 

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080115/b9cce34a/attachment.html 

From john at jacelridge.com  Tue Jan 15 14:58:33 2008
From: john at jacelridge.com (John Ridgway)
Date: Tue, 15 Jan 2008 17:58:33 -0500
Subject: [antlr-interest] [HELP][MACOSX] CLASSPATH problems
In-Reply-To: <C3B2F12C.8A692%sunshine@public.kherson.ua>
References: <C3B2F12C.8A692%sunshine@public.kherson.ua>
Message-ID: <04FB7357-80E4-4D54-B368-13B3ED203AD2@jacelridge.com>

If you use Fink, then you can install Antlr as simply as:
   fink install antlr3
though you have to have fink configured to use the unstable tree.   
Then running Antlr becomes
   java org.antlr.Tool ...

Without fink you'll need to set the CLASSPATH environment variable.   
In sh descendants, such as bash, the following works:
CLASSPATH=/antlr-3.0.1/lib/antlr-3.0.1.jar:/antlr-3.0.1/lib/ 
antlr-2.7.7.jar:/antlr-3.0.1/lib/stringtemplate-3.1b1.jar
export CLASSPATH

In csh descendants I believe (though I don't use tcsh) you need the  
following:
setenv CLASSPATH /antlr-3.0.1/lib/antlr-3.0.1.jar:/antlr-3.0.1/lib/ 
antlr-2.7.7.jar:/antlr-3.0.1/lib/stringtemplate-3.1b1.jar

Peace
- John


On Jan 15, 2008, at 4:24 PM, Ruslan Zasukhin wrote:

> Hi All,
>
> I have found only way to make run org.antlr.Tool using this command  
> line:
>
> java -cp "/antlr-3.0.1/lib/antlr-3.0.1.jar:
>          /antlr-3.0.1/lib/antlr-2.7.7.jar:
>          /antlr-3.0.1/lib/stringtemplate-3.1b1.jar" org.antlr.Tool
>
> I.e. I need specify 3 JAR files. If I try specify only folder then  
> it not
> works.
>
>
> java -cp "/antlr-3.0.1/lib" org.antlr.Tool      <<<<<<<<< not works.
>
>
> ---------------------------
> It will be great if on this page
>
>    How do I install this damn thing?
>    http://antlr.org/wiki/pages/viewpage.action?pageId=728
>
> Will be given EXACT steps HOW TO setup this CLASSPATH variable for  
> each OS.
>
> Please keep in mind that not all developers are JAVA guru and each  
> day do
> this :-)
>
> I have spend already 2 hours for Google search, and have found that  
> IT SEEMS
> on MAC OS X I can specify CLASSPATH in the HOME/.tcshrc file.
>
> Is this right?
>
> Can anybody copy/paste own lines for this file?
>
>
> -- 
> Best regards,
>
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
>
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
>
> [I feel the need: the need for speed]
>
>


From rschulz at sonic.net  Tue Jan 15 15:03:52 2008
From: rschulz at sonic.net (Randall R Schulz)
Date: Tue, 15 Jan 2008 15:03:52 -0800
Subject: [antlr-interest] What is the difference between grammars?!
In-Reply-To: <7619C175A5316C40A1F03CD996117B9D039C3DF6@MLNYC727MB.amrs.win.ml.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF6@MLNYC727MB.amrs.win.ml.com>
Message-ID: <200801151503.52931.rschulz@sonic.net>

On Tuesday 15 January 2008 14:56, Ostrov, Alexei (GMIT-TASS) wrote:
> One:
> DIGIT		: 	'0'..'9';
> DOUBLE 	:	(DIGIT)+ ('.' (DIGIT)+)? ('e' ('-'|'+')?( DIGIT)+ )? ;
> num	:	DOUBLE | COLUMN;
>
>
> Another one:
> DOUBLE 	:	('0'..'9')+ ('.' ('0'..'9')+)? ('e' ('-'|'+')?('0'..'9')+ )? ;
> num	:	DOUBLE | COLUMN;
>
>
> The first one does not accept 4 as num, the second one does.
>
> That is if I check the parse trees either in AntlrWorks or via
> generated code (CSharp). Using Antlr build antlr-2008-01-10.16
>
> What am I missing!? Did I stumble into a bug?

You're using the DIGIT lexeme in the first grammar as a fragment, but
you did not declare it as such. Just put that keyword ("fragment") in
front of DIGIT and it should do what you want and expect.


> Alexei Ostrov


Randall Schulz

From jaluber at gmx.de  Tue Jan 15 15:09:33 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 16 Jan 2008 00:09:33 +0100
Subject: [antlr-interest] What is the difference between grammars?!
In-Reply-To: <7619C175A5316C40A1F03CD996117B9D039C3DF6@MLNYC727MB.amrs.win.ml.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF6@MLNYC727MB.amrs.win.ml.com>
Message-ID: <478D3D2D.8070204@gmx.de>

Ostrov, Alexei (GMIT-TASS) schrieb:
> That is if I check the parse trees either in AntlrWorks or via generated 
> code (CSharp). Using Antlr build antlr-2008-01-10.16 

On that note, the last intermediate build which I know of that it 
contains a working C# target is the last build of 2007. If any newer one 
still works it is purely by chance, as I haven't gotten around to 
integrate Ter's latest changes.

Johannes

From jaluber at gmx.de  Tue Jan 15 16:03:38 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 16 Jan 2008 01:03:38 +0100
Subject: [antlr-interest] Option backtrack=true
In-Reply-To: <61bdac940801151438t7e699d99qcf3afc2b07198d0a@mail.gmail.com>
References: <61bdac940801151438t7e699d99qcf3afc2b07198d0a@mail.gmail.com>
Message-ID: <478D49DA.1000809@gmx.de>

Stephanie Balzer schrieb:
> Hi all,
> 
> I am new to ANTLR and use ANTLRWorks to develop a compiler for my 
> programming language. I based my grammar on the Java 1.5 grammar for 
> ANTLR v3. Thus, I took over the options
> 
> k=2; backtrack=true; memoize=true
> 
> With above options, I was able to generate the parser successfully. 
> However, when I started debugging some programming language 
> statements/expressions the parser seemed to simply ignore some of the 
> rules and didn't produce the result I expected. I guess this has to do 
> with the syntactic predicates that are assigned to productions.
> 
> Now my questions:
> 
> - What does this option actually mean?

<http://en.wikipedia.org/wiki/Backtracking> explains what backtracking 
is doing in general.

> - Is it advisable not use the backtracking option?

It is slower because every rule reference is guarded by a predicate. It 
also hides errors, so I wouldn't use it, if I can help it.

> - If I use the backtracking option, how can I influence these predicates?

I believe that putting an own predicate in front of a rule makes ANTLR 
leaving it untouched.
> 
> I also tried to remove the backtracking option. In this case, however, I 
> get a lot of warnings when generating the parser. To resolve these 
> warnings I started to left factor my rules. But this seems to be a 
> endless story!
> 
> So, another question:
> 
> - Is left factoring the only solution to deal with the warnings (besides 
> enabling backtracking)?

No. You can use also syntactic predicates. I've attached a draft of a 
tutorial dealing with this issue. I'm very interested in feedback before 
I put it into the wiki. I'm not confident that I've got all the rough 
edges yet.

Johannes


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: NoBacktrackingTutorial.txt
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20080116/2ed400d5/attachment-0001.txt 

From smbogan at gmail.com  Tue Jan 15 23:20:57 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Wed, 16 Jan 2008 01:20:57 -0600
Subject: [antlr-interest] AST and the interpreter
Message-ID: <31160efe0801152320m7d13c7e5vfe7ce7a0b3fdc711@mail.gmail.com>

Is it normal for the ANTLRWorks interpreter to stop working after
using rewrite rules and outputing an AST?  The debugger still works.
The interpreter basically fails when it tries to interpret the first
token, giving a NoViableAltException.

Also, I'm also curious what the different colors mean for the parse
tree generated by the debugger, is this supposed to show backtracking?

Thanks,
S M Bogan

From mehta.anuj at wipro.com  Wed Jan 16 01:51:00 2008
From: mehta.anuj at wipro.com (Anuj Mehta)
Date: Wed, 16 Jan 2008 15:21:00 +0530
Subject: [antlr-interest] Query: Rule Based Command Line Response Parsing
	using ANTLR
Message-ID: <BLR-EC-EX2048s4KWiG000016d8@BLR-EC-MBX05.wipro.com>

Hi 

 

Can we use ANTLR for parsing "response" from a command (CLI)?

 

Example: For command 'route' following is response. 

 

[anuj at anuj ~]$ /sbin/route 

Kernel IP routing table 

Destination     Gateway         Genmask         Flags Metric Ref 

Use    Iface 

172.31.44.0     *               255.255.255.0          U     0 

0         0         eth0 

169.254.0.0     *               255.255.0.0              U     0 

0         0         eth0 

default         172.31.44.1     0.0.0.0                  UG    0 

0        0        eth0 

 

Now I want to save above data in a HashMap/Table (row wise or 

column wise). So for that I may create an input file which will contain
rules like

1) Check for correct order of following headers i.e.  Destination, Gateway,
Genmask, Flags etc.

2) Skip empty lines.

3) Store all the values (say row wise) in a HashTable i.e.  "172.31.44.0
*               255.255.255.0          U     0 

0         0         eth0"

 

 

Do let me know your suggestions for doing this.

 

Thanks, 

Anuj


The information contained in this electronic message and any attachments to this message are intended for the exclusive use of the addressee(s) and may contain proprietary, confidential or privileged information. If you are not the intended recipient, you should not disseminate, distribute or copy this e-mail. Please notify the sender immediately and destroy all copies of this message and any attachments. 

WARNING: Computer viruses can be transmitted via email. The recipient should check this email and any attachments for the presence of viruses. The company accepts no liability for any damage caused by any virus transmitted by this email.

www.wipro.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080116/d5803ad6/attachment.html 

From Waverly.Edwards at genesys.com  Wed Jan 16 02:58:34 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Wed, 16 Jan 2008 05:58:34 -0500
Subject: [antlr-interest] writing a simple tool
Message-ID: <FF993752CB890B4EB591BE5450C37BF1E40D31@navamane001.ad.internal.corp>


I am currently attempting to write what I hope is a simple tool to
validate an ebnf grammar and export the first and follow set.
Unfortunately, no amount of reading has enabled perform the 'easy' (to
others) task of generating this first and follow set.  I have read
multiple books and texts on the subject.  So I've embarked on a mission
to start by first validating an ebnf grammar and moving forward from
there.

My first stumbling block came early in writing an ebnf grammar.  In my
effort to separate my parser rules so I can apply some type of action I
have created recursive definitions.  I know what they are but I've been
unable figure out how to dig myself out of this hole.

Any and all help will be greatly appreciated.


W.


grammar ebnf;


options {
	k = 1; // force myself to keep grammar LL(1)
}


/*
REFERENCE

www.cs.bris.ac.uk/Teaching/Resources/COMS30122/lectures/02_Scanning.p.pd
f 

Grammar symbols
Here is a 'standard' set of symbols for this unit
The first four are BNF, the rest EBNF

Symol or Expr        ,// MEANING

::                    // is (is defined as)
&                     // then (followed by, always implicit)
|                     // OR 
;                     // end of definition 
?, '[' expression ']' // optional
*, '{' expression '}' // zero or more times
+                     // one or more times
'(' expression ')'    // bracketing (subrule)
 
NOT GOING TO BE IMPLEMENTED ( & )
*/


fragment
HEXDIGIT     :  '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ;

fragment
CHAR         :  ASCII_SET | ESC_CHAR | HEX_CHAR;

fragment
ASCII_SET    :  '\u0020'..'\u00FF';

DIGIT        :	'0'..'9' ;
LETTER       :	'a'..'z' | 'A'..'Z' ;
ID           :	( LETTER | '_' ) ( LETTER | DIGIT | '_' )* ;
INTEGER      :	DIGIT (DIGIT)* ;	
HEX_CHAR     :  '\\x' HEXDIGIT HEXDIGIT ( HEXDIGIT HEXDIGIT ) ?;  // two
or four digit hex, ASCII or UNICODE
ESC_CHAR     :  '\\' ('\'' | '\\' | 'a' | 'b' | 'n' | 'r' | 't');
LINE_COMMENT : ('//') ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;} ;


start_bnf    :    rule * ;
rule         :    ID ( '=' | '::' ) expression ';' ;
expression   :    term ( '|' term )* ;
term         :    factor  (factor)* ;

//factor       :    ID | literal | range | '(' expression ')' | '{'
expression '}' | '[' expression ']' | expression '+' ;

factor       :    ID | literal | range | subrule | zeroOrMore  |
optional | oneOrMore ;
subrule      :   '(' expression ')';
zeroOrMore   :   '{' expression '}' | expression '*'  ;
optional     :   '[' expression ']' | ( expression '?' );
oneOrMore    :   expression '+';
literal      :    '\''  CHAR * '\'' ;
range        :    '\'' CHAR '\'' '..' '\'' CHAR '\'' ;


From damien.internet at gmail.com  Wed Jan 16 03:06:22 2008
From: damien.internet at gmail.com (Damien)
Date: Wed, 16 Jan 2008 12:06:22 +0100
Subject: [antlr-interest] AST rewrite rules issue with -> ^('+' $elts+)
Message-ID: <478DE52E.6020804@gmail.com>

Hello,

I'm writing a grammar for a calculator.

I have the following working:

mulExpr    :    atom ('*' (atom))+ -> ^('*' atom+);

which is equivalent to the following, also working:

mulExpr    :    elts+=atom ('*' (elts+=atom))+ -> ^('*' $elts+);

I have an issue with the following:

addExpr    :     (elts+=mulExpr | elts+=atom) ('+'  (elts+=mulExpr | 
elts+=atom))* -> ^('+' $elts+);

If I don't comment out the rewite rule above, the AST is empty.

Why is this wrong?

Thanks a lot


Complete grammar:
grammar Expr;

options { output=AST; backtrack=true; } //k=2;

prog    :    stmt+;

stmt    :    expr (NEWLINE | EOF);

expr    :    addExpr;

parExpr    :    '(' e=expr ')' -> $e
    ;

addExpr    :    //'-'? (mulExpr | atom) (('+' | '-')  (mulExpr | atom))*
        (elts+=mulExpr | elts+=atom) ('+' (elts+=mulExpr | elts+=atom))* 
-> ^('+' $elts+)
    ;

mulExpr    :    atom ('*' (atom))+ -> ^('*' atom+)
        ;

functionExpr
    :    ID '(' expr (',' expr)* ')' -> ^(ID expr+)
    ;

atom    :    INT | ID | functionExpr | parExpr
    ;
   
ID    :    ('a'..'z')+;
INT    :    '0'..'9'+;
NEWLINE    :    '\r'? '\n';
WS    :    (' ')+ {skip();};


From jaluber at gmx.de  Wed Jan 16 03:22:31 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 16 Jan 2008 12:22:31 +0100
Subject: [antlr-interest] writing a simple tool
In-Reply-To: <FF993752CB890B4EB591BE5450C37BF1E40D31@navamane001.ad.internal.corp>
References: <FF993752CB890B4EB591BE5450C37BF1E40D31@navamane001.ad.internal.corp>
Message-ID: <478DE8F7.8020408@gmx.de>

Edwards, Waverly schrieb:
> I am currently attempting to write what I hope is a simple tool to
> validate an ebnf grammar and export the first and follow set.
> Unfortunately, no amount of reading has enabled perform the 'easy' (to
> others) task of generating this first and follow set.  I have read
> multiple books and texts on the subject.  So I've embarked on a mission
> to start by first validating an ebnf grammar and moving forward from
> there.
> 
> My first stumbling block came early in writing an ebnf grammar.  In my
> effort to separate my parser rules so I can apply some type of action I
> have created recursive definitions.  I know what they are but I've been
> unable figure out how to dig myself out of this hole.
> 
> Any and all help will be greatly appreciated.

I also happen to have an unpublished tutorial about the very kind of 
problem you have (before anyone asks - no, I don't have any more lurking 
on the harddrive ;). I've attached it to this email. I'd also appreciate 
any of feedback here.

Johannes
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: LeftRecursionTutorial.txt
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20080116/29c73c5e/attachment-0001.txt 

From axelle.ziegler at gmail.com  Wed Jan 16 03:38:44 2008
From: axelle.ziegler at gmail.com (Axelle Ziegler)
Date: Wed, 16 Jan 2008 12:38:44 +0100
Subject: [antlr-interest] Grammar Inheritance
Message-ID: <ced6eb420801160338k269c3728p9477af8228be6852@mail.gmail.com>

That might be a FAQ, but I've been unable to find the answer so far : I'd
like to have a "base" grammar containing common rules, and several
"extension" grammars, containing extra rules. It seems grammar inheritance
should be the solution to my problem, but I'm under the impression that this
feature has been removed from AntLr v3, and I can't really find any
documentation on the subject. Is there any equivalent feature in AntLRv3 ?
If not, is it still possible to use the inheritance feature from v2 ?

Thanks in advance for your answers,


-- 
Axelle Ziegler
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080116/88afe0ea/attachment.html 

From jaluber at gmx.de  Wed Jan 16 03:44:04 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 16 Jan 2008 12:44:04 +0100
Subject: [antlr-interest] Grammar Inheritance
In-Reply-To: <ced6eb420801160338k269c3728p9477af8228be6852@mail.gmail.com>
References: <ced6eb420801160338k269c3728p9477af8228be6852@mail.gmail.com>
Message-ID: <478DEE04.3090109@gmx.de>

Axelle Ziegler schrieb:
> That might be a FAQ, but I've been unable to find the answer so far : 
> I'd like to have a "base" grammar containing common rules, and several 
> "extension" grammars, containing extra rules. It seems grammar 
> inheritance should be the solution to my problem, but I'm under the 
> impression that this feature has been removed from AntLr v3, and I can't 
> really find any documentation on the subject. Is there any equivalent 
> feature in AntLRv3 ? If not, is it still possible to use the inheritance 
> feature from v2 ?

Only 3.1 will have this feature. If you use the Java target, then you 
can use an intermediate build instead of waiting for a release.

Johannes

From Axelle.Ziegler.01 at normalesup.org  Wed Jan 16 04:27:42 2008
From: Axelle.Ziegler.01 at normalesup.org (Axelle Ziegler)
Date: Wed, 16 Jan 2008 13:27:42 +0100
Subject: [antlr-interest] Grammar Inheritance
In-Reply-To: <478DEE04.3090109@gmx.de>
References: <ced6eb420801160338k269c3728p9477af8228be6852@mail.gmail.com>
	<478DEE04.3090109@gmx.de>
Message-ID: <ced6eb420801160427g2953ead3uc05393972666ec16@mail.gmail.com>

I will do that, thanks a lot. Is there an even preliminary doc on the syntax
and use of composite grammars ?

Thanks again for your help,

-- 
Axelle Ziegler

On Jan 16, 2008 12:44 PM, Johannes Luber <jaluber at gmx.de> wrote:

> Axelle Ziegler schrieb:
> > That might be a FAQ, but I've been unable to find the answer so far :
> > I'd like to have a "base" grammar containing common rules, and several
> > "extension" grammars, containing extra rules. It seems grammar
> > inheritance should be the solution to my problem, but I'm under the
> > impression that this feature has been removed from AntLr v3, and I can't
> > really find any documentation on the subject. Is there any equivalent
> > feature in AntLRv3 ? If not, is it still possible to use the inheritance
> > feature from v2 ?
>
> Only 3.1 will have this feature. If you use the Java target, then you
> can use an intermediate build instead of waiting for a release.
>
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080116/0bad8ba5/attachment.html 

From jaluber at gmx.de  Wed Jan 16 04:34:16 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 16 Jan 2008 13:34:16 +0100
Subject: [antlr-interest] Grammar Inheritance
In-Reply-To: <ced6eb420801160427g2953ead3uc05393972666ec16@mail.gmail.com>
References: <ced6eb420801160338k269c3728p9477af8228be6852@mail.gmail.com>	<478DEE04.3090109@gmx.de>
	<ced6eb420801160427g2953ead3uc05393972666ec16@mail.gmail.com>
Message-ID: <478DF9C8.30905@gmx.de>

Axelle Ziegler schrieb:
> I will do that, thanks a lot. Is there an even preliminary doc on the 
> syntax and use of composite grammars ?

I suppose you could look at the example which should be included in the 
build (just extract the files from the jar). And IIRC, I have seen on 
the wiki at least some scribblings by Ter, so I haven't check their 
usefulness myself. I don't need that feature yet.

Johannes

From adam.rpconnelly at googlemail.com  Wed Jan 16 04:44:44 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Wed, 16 Jan 2008 12:44:44 +0000
Subject: [antlr-interest] White space skip in antlr 3.1
In-Reply-To: <478cfdfe.0269300a.6eed.ffff814eSMTPIN_ADDED@mx.google.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF0@MLNYC727MB.amrs.win.ml.com>
	<b9a39b060801150345w7a637181i963211382fdb27ff@mail.gmail.com>
	<478cfdfe.0269300a.6eed.ffff814eSMTPIN_ADDED@mx.google.com>
Message-ID: <b9a39b060801160444m2c24d17fqe385c17f5f9b4946@mail.gmail.com>

So I take it that in general (unless you have memory limitations or
want to avoid creating unnecessary tokens) you want to use $channel =
HIDDEN?

Adam

On 15/01/2008, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 00:45 16/01/2008, Adam Connelly wrote:
>
> >I think I've noticed that before.  I tend to just set the channel
> >to hidden:
> >
> >WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ $channel=HIDDEN;
> >};
> >
> >This means that the parser does not see the whitespace, but isn't
> >exactly the same as skip() (I don't think) although I don't know
> >the difference.  Anyhow, it's always worked for me in C#.
>
> skip() will avoid generating a token entirely.  $channel = HIDDEN
> will still generate a token, but mark it as on a different channel
> from the normal parsing, which will make the parser ignore it but
> leave it accessible to actions if need be.
>
>

From Alexei_Ostrov at ml.com  Wed Jan 16 06:42:46 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Wed, 16 Jan 2008 09:42:46 -0500
Subject: [antlr-interest] White space skip in antlr 3.1
Message-ID: <7619C175A5316C40A1F03CD996117B9D039C3DF7@MLNYC727MB.amrs.win.ml.com>

Actually, I ended up using HIDEN. Skip() did something weird when
parsing  one of my clauses (It might have been my bug, obviously). It
seemed to put parsing into an infinite loop... I do not have details on
this, so do not want to confuse anyone... I will report it if I get back
to this and get more information on this.

Cheers

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Adam Connelly
Sent: Wednesday, January 16, 2008 7:45 AM
To: Gavin Lambert
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] White space skip in antlr 3.1

So I take it that in general (unless you have memory limitations or
want to avoid creating unnecessary tokens) you want to use $channel =
HIDDEN?

Adam

On 15/01/2008, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 00:45 16/01/2008, Adam Connelly wrote:
>
> >I think I've noticed that before.  I tend to just set the channel
> >to hidden:
> >
> >WS       :           (' '|'\t'|'\f'|'\n'|'\r')+{ $channel=HIDDEN;
> >};
> >
> >This means that the parser does not see the whitespace, but isn't
> >exactly the same as skip() (I don't think) although I don't know
> >the difference.  Anyhow, it's always worked for me in C#.
>
> skip() will avoid generating a token entirely.  $channel = HIDDEN
> will still generate a token, but mark it as on a different channel
> from the normal parsing, which will make the parser ignore it but
> leave it accessible to actions if need be.
>
>
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------

From Alexei_Ostrov at ml.com  Wed Jan 16 07:27:50 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Wed, 16 Jan 2008 10:27:50 -0500
Subject: [antlr-interest] What is the difference between grammars?!
Message-ID: <7619C175A5316C40A1F03CD996117B9D027723E4@MLNYC727MB.amrs.win.ml.com>

I was told this is the first version with signed runtime support
assemblies for CSharp... Is there a regular schedule associated with
builds? Do you have any approximation for release date? 

Thank you,
Alexei

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Johannes Luber
Sent: Tuesday, January 15, 2008 6:10 PM
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] What is the difference between grammars?!

Ostrov, Alexei (GMIT-TASS) schrieb:
> That is if I check the parse trees either in AntlrWorks or via
generated 
> code (CSharp). Using Antlr build antlr-2008-01-10.16 

On that note, the last intermediate build which I know of that it 
contains a working C# target is the last build of 2007. If any newer one

still works it is purely by chance, as I haven't gotten around to 
integrate Ter's latest changes.

Johannes
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------

From jaluber at gmx.de  Wed Jan 16 07:37:33 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 16 Jan 2008 16:37:33 +0100
Subject: [antlr-interest] What is the difference between grammars?!
In-Reply-To: <7619C175A5316C40A1F03CD996117B9D027723E4@MLNYC727MB.amrs.win.ml.com>
References: <7619C175A5316C40A1F03CD996117B9D027723E4@MLNYC727MB.amrs.win.ml.com>
Message-ID: <478E24BD.7040703@gmx.de>

Ostrov, Alexei (GMIT-TASS) schrieb:
> I was told this is the first version with signed runtime support
> assemblies for CSharp...

The first version of ANTLR, i.e. version 3.0? Or do you mean 
specifically the runtime?

> Is there a regular schedule associated with
> builds? Do you have any approximation for release date? 

The schedule in general is "when I have time to check for new changes". 
But I plan to bring the target over the next two weeks on par again with 
the Java target.

Johannes

From Alexei_Ostrov at ml.com  Wed Jan 16 08:16:16 2008
From: Alexei_Ostrov at ml.com (Ostrov, Alexei (GMIT-TASS))
Date: Wed, 16 Jan 2008 11:16:16 -0500
Subject: [antlr-interest] What is the difference between grammars?!
Message-ID: <7619C175A5316C40A1F03CD996117B9D039C3DF8@MLNYC727MB.amrs.win.ml.com>

I am confused about what you mean by this: "The first version of ANTLR,
i.e. version 3.0? ".
I mean the runtime. My team signs all the assemblies that we emit. That
requires all the references to be signed as well. This is the only
reason (at least so far) for me to go with 3.1 even though it is still
not released.

Thank you for your time,
Alexei

Alexei Ostrov
Desk A0513, 11th floor, 222 Broadway, NY, NY10038
212.670.1784
917.520.0205

-----Original Message-----
From: Johannes Luber [mailto:jaluber at gmx.de] 
Sent: Wednesday, January 16, 2008 10:38 AM
To: Ostrov, Alexei (GMIT-TASS)
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] What is the difference between grammars?!

Ostrov, Alexei (GMIT-TASS) schrieb:
> I was told this is the first version with signed runtime support
> assemblies for CSharp...

The first version of ANTLR, i.e. version 3.0? Or do you mean 
specifically the runtime?

> Is there a regular schedule associated with
> builds? Do you have any approximation for release date? 

The schedule in general is "when I have time to check for new changes". 
But I plan to bring the target over the next two weeks on par again with

the Java target.

Johannes
--------------------------------------------------------

This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------

From ahmedh at horizonssoftware.com  Wed Jan 16 08:29:02 2008
From: ahmedh at horizonssoftware.com (Ahmed Hamouda)
Date: Wed, 16 Jan 2008 18:29:02 +0200
Subject: [antlr-interest] How to use generated C# parser ?
Message-ID: <2E91F09A8F13BE4BACAA46759CA4991548C519@hs-srv-01.horizonssoftware.com>

Hi all,

I'm a new user for Antlr parser generation tool, I use AntlrWorks.

I already have writed the language in Antlr and generated the lexer and
parser successfully and now trying to use the generated code.

 

This is the code to use them

 

string strParserTest = "Sum(Process:strTest,lstTest)";

ICharStream cs = new ANTLRStringStream(strParserTest);

KPILexer lexer = new KPILexer(cs);

CommonTokenStream tokens = new CommonTokenStream();

tokens.TokenSource = lexer;

KPIParser parser = new KPIParser(tokens);

 

This is good, but I don't know the next step to use parser to check the
formula against the defined grammar.

In other word, I want to know how to use the parser to check of
correctness of the formula.

 

Any idea will be appreciated.

Thank you for cooperation.

 

Best Regards

 

Ahmed Hamouda (MCTS)

Software Engineer

Horizons Software

Address: 93 Haroun Al Rasheed Street, Heliopolis, Cairo, Egypt. 11351. 

Tel:         +202-2644-3709

Mobile:    +2010-33-55-879

Fax:        +202-2632-0661

Website:   www.horizonssoftware.com <http://www.horizonssoftware.com/> 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080116/a259599b/attachment.html 

From cross at symboticware.com  Wed Jan 16 09:03:19 2008
From: cross at symboticware.com (Cameron Ross)
Date: Wed, 16 Jan 2008 12:03:19 -0500
Subject: [antlr-interest] Scanning extended ASCII characters in ANTLR v3
Message-ID: <478E38D7.5020109@symboticware.com>

Hello,

I'm constructing a parser for a language that allows arbitrary length 
byte sequences to be embedded within a well formed text message. The 
relevant lexical rules defined within the language specification 
document are:

Digit = [ "0" ? "9" ].
ByteSequence = "#" Digit+ "\"" <byte sequence>.

Where # signifies the beginning of a byte sequence header, Digit+ 
signifies the number of bytes to follow in the byte sequence, and " 
signifies the end of the header and the beginning of the actual byte 
sequence data. Note that bytes in the sequence can fall anywhere within 
the extended ASCII character set (i.e. from 0x00 to 0xFF). I've defined 
an ANTLR grammar that works as expected as long as the byte sequence 
stays in the 7-bit ASCII range (i.e. 0x00 to 0x7F). However, when bytes 
in the 8-bit ASCII range are scanned (0x80 to 0xFF), the integer value 
returned by LA(1) is always incorrectly reported as 65533 (0xFFFD). I 
recall that ANLTR v2 had a charVocabulary option where one could set the 
valid input character set using something like charVocabulary = 
'\0'..'\377' (octal), but this doesn't seem to be supported in ANTLR v3.

How can I get my lexer to accept characters in the (0x80 to 0xFF) range? 
The relevant parts of my ANTLR grammar follow:

DIGIT: '0'..'9';
BYTE_SEQUENCE
: '#' DIGIT+ '"'
{
int numBytes = Integer.parseInt($INTEGER.text);
System.out.println("number of bytes = " + numBytes);
readBytes(numBytes);
}
;



@lexer::members {
private void readBytes(int numBytes) {
for (int i=0; i<numBytes; ++i) {
int value = input.LA(1);
input.consume();
System.out.println("\tvalue = " + value);
}
}
}

Thanks much,
Cameron.

From vbar at comp.cz  Wed Jan 16 09:14:36 2008
From: vbar at comp.cz (Vaclav Barta)
Date: Wed, 16 Jan 2008 18:14:36 +0100
Subject: [antlr-interest] How to use generated C# parser ?
In-Reply-To: <2E91F09A8F13BE4BACAA46759CA4991548C519@hs-srv-01.horizonssoftware.com>
References: <2E91F09A8F13BE4BACAA46759CA4991548C519@hs-srv-01.horizonssoftware.com>
Message-ID: <478E3B7C.4040801@comp.cz>

Ahmed Hamouda wrote:
> I already have writed the language in Antlr and generated the lexer and 
> parser successfully and now trying to use the generated code.
> 
> string strParserTest = "Sum(Process:strTest,lstTest)";
> ICharStream cs = new ANTLRStringStream(strParserTest);
> KPILexer lexer = new KPILexer(cs);
> CommonTokenStream tokens = new CommonTokenStream();
> tokens.TokenSource = lexer;
> KPIParser parser = new KPIParser(tokens);
> 
> This is good, but I don?t know the next step to use parser to check the 
> formula against the defined grammar.
parser.sum();
(or whatever the rule parsing Sum(...) is called in your grammar).

	Bye
		Vasek
--
http://www.mangrove.cz/
Open Source integration


From jaluber at gmx.de  Wed Jan 16 09:29:45 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 16 Jan 2008 18:29:45 +0100
Subject: [antlr-interest] What is the difference between grammars?!
In-Reply-To: <7619C175A5316C40A1F03CD996117B9D039C3DF8@MLNYC727MB.amrs.win.ml.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF8@MLNYC727MB.amrs.win.ml.com>
Message-ID: <478E3F09.5040407@gmx.de>

Ostrov, Alexei (GMIT-TASS) schrieb:
> I am confused about what you mean by this: "The first version of ANTLR,
> i.e. version 3.0? ".
> I mean the runtime. My team signs all the assemblies that we emit. That
> requires all the references to be signed as well. This is the only
> reason (at least so far) for me to go with 3.1 even though it is still
> not released.

Wasn't the runtime signed for 3.0? I haven't been maintainer then.

Johannes

From antlr at mirality.co.nz  Wed Jan 16 11:15:42 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 17 Jan 2008 08:15:42 +1300
Subject: [antlr-interest] Query: Rule Based Command Line Response
 Parsing using ANTLR
In-Reply-To: <BLR-EC-EX2048s4KWiG000016d8@BLR-EC-MBX05.wipro.com>
References: <BLR-EC-EX2048s4KWiG000016d8@BLR-EC-MBX05.wipro.com>
Message-ID: <20080116191831.F043611EAF1@www.antlr.org>

At 22:51 16/01/2008, Anuj Mehta wrote:
>Can we use ANTLR for parsing "response" from a command (CLI)?
>
>Example: For command 'route' following is response.
>
>[anuj at anuj ~]$ /sbin/route
>Kernel IP routing table
>Destination     Gateway         Genmask         Flags Metric Ref
>Use    Iface
>172.31.44.0     *               255.255.255.0          U     0
>0         0         eth0
>169.254.0.0     *               255.255.0.0              U     0
>0         0         eth0
>default         172.31.44.1     0.0.0.0                  UG    0
>0        0        eth0

You could, but it's probably just as easy (if not easier) to parse 
this as simple tab-separated data.

Of course, since this command is not required to generate stable 
or machine-parsable output, a better option would be to track down 
the APIs you need to call to obtain the equivalent information, 
rather than trying to parse the output of another command.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080117/b910fe68/attachment.html 

From antlr at mirality.co.nz  Wed Jan 16 11:29:35 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 17 Jan 2008 08:29:35 +1300
Subject: [antlr-interest] What is the difference between grammars?!
In-Reply-To: <7619C175A5316C40A1F03CD996117B9D039C3DF8@MLNYC727MB.amrs.w
	in.ml.com>
References: <7619C175A5316C40A1F03CD996117B9D039C3DF8@MLNYC727MB.amrs.win.ml.com>
Message-ID: <20080116192953.AF9FB11E947@www.antlr.org>

At 05:16 17/01/2008, Ostrov, Alexei (GMIT-TASS) wrote:
 >
 >I mean the runtime. My team signs all the assemblies that we
 >emit.  That requires all the references to be signed as well.
 >This is the only reason (at least so far) for me to go with
 >3.1 even though it is still not released.

Whenever you're faced with an assembly you want to use that isn't 
signed, you could always just sign it yourself.  The process is a 
little fiddly (you have to disassemble and reassemble the 
assembly, since you can sign only as part of compilation), but it 
works.  Just bear in mind that self-signed third-party assemblies 
probably shouldn't be put into the GAC.


From symbioid at gmail.com  Wed Jan 16 12:07:03 2008
From: symbioid at gmail.com (Dave Elliot)
Date: Wed, 16 Jan 2008 14:07:03 -0600
Subject: [antlr-interest] rule != token? And Atomic rules... 2 questions +
	included grammar
Message-ID: <f81d80ad0801161207v55059890r790bed7cf356180e@mail.gmail.com>

Greetings!  Kay found one of my blog posts and pointed me this way, so
I figured I'd best join this community :)

I have a couple questions, I'm taking posting my source code
management commit notes:



 1 error listed still. Had 3.
 e.ast_node not recognized.
 I shouldn't be using ast_node with tokens, only rules.
 I converted tokens to merely "return new ASTNode();" (as we did for
atom), and this gets rid of 2 errors.
 I left the old actions as comments (below the lines they affect).


 However, there still seems to be something registering as a token,
but I'm not sure what.
 It isn't the "atom" alternative in the factor rule, in fact,
 that may need to be set back to the full addChild actions,
 as it doesn't affect the errors either way.


 The errors generated are for the rongoParser.java, not the grammar
file itself, so I don't see lines.
 However, based upon the number of the remaining error compared to the
ones I fixed,
 it appears the error is coming up earlier rather than later in the
code. Possibly above the "io" rule.

Also:
 Why, in the "io" rule, do I have to do "LPAREN e = (expr) RPAREN"
 but in "factor" I have to do "LPAREN e = expr RPAREN"???
 If I do vice versa for either, I find I get a "Token!=Rule" or some
such thing.

Below is the grammar:  (I apologize, I copied it from track, so you
see the line numbers and such)
Next time, I can just work with the relevant parts, but figured the
full grammar so far is the best to deal with.  If anyone needs
clarification of my questions (that is, I don't have the error info
here, nor the rongoParser code to help detect any problem there),
please ask, and I can try to get more detailed info tonight if
necessary.

Thanks for any help!

Dave

------------------------
1 grammar rongo;
2

3 @header {
4 package org.rongo;
5 import java.util.HashMap;
6 import org.rongo.ASTNode;
7 import java.util.ArrayList;
8 }
9

10 @lexer::header { package org.rongo; }
11

12 @members {
13 /* Map variable name to Integer object holding value */
14 HashMap memory = new HashMap();
15 ASTNode root;
16 ArrayList alist = new ArrayList();
17 }
18

19 prog returns[ASTNode ast_node]
20         :       e = stat+ {ASTNode myNode=new ASTNode();
myNode.addChild($e.ast_node); myNode.visit(); alist.add(myNode); root
= myNode;}
21         ;
22

23 stat returns [ASTNode ast_node]
24         :       e = type_decl {ASTNode myNode=new ASTNode();
myNode.addChild($e.ast_node); myNode.visit(); alist.add(myNode);
return myNode;} NEWLINE
25         |       e = expr {ASTNode myNode=new ASTNode();
myNode.addChild($e.ast_node); myNode.visit(); alist.add(myNode);
return myNode;} NEWLINE
26         |       e = io {ASTNode myNode=new ASTNode();
myNode.addChild($e.ast_node); myNode.visit(); alist.add(myNode);
return myNode;} NEWLINE
27         ;
28
29 io returns [ASTNode ast_node]
30         :       'print' LPAREN e = (expr) RPAREN {ASTNode
myNode=new ASTNode(); myNode.addChild($e.ast_node); myNode.visit();
alist.add(myNode); return myNode;}
31         |       'read' LPAREN e = ID RPAREN {return new ASTNode();}
32         // {ASTNode myNode=new ASTNode();
myNode.addChild($e.ast_node); myNode.visit(); alist.add(myNode);
return myNode;}
33         ;
34
35 type_decl returns [ASTNode ast_node]
36         :       'int:' e = ID (EQUALS INT)?     {return new ASTNode();}
37 //      {ASTNode myNode=new ASTNode();
myNode.addChild($e.ast_node); myNode.visit(); alist.add(myNode);
return myNode;}
38         ;
39
40 expr returns[ASTNode ast_node]
41         :       e = mexpr ((PLUS|MINUS) mexpr)* {ASTNode myNode=new
ASTNode(); myNode.addChild($e.ast_node); myNode.visit();
alist.add(myNode); return myNode;}
42         ;
43
44 mexpr returns[ASTNode ast_node]
45         :       e = factor  ((TIMES|DIV) factor)* {ASTNode
myNode=new ASTNode(); myNode.addChild($e.ast_node); myNode.visit();
alist.add(myNode); return myNode;}
46         ;
47

48 factor returns[ASTNode ast_node]
49         :       LPAREN e = expr RPAREN {ASTNode myNode=new
ASTNode(); myNode.addChild($e.ast_node); myNode.visit();
alist.add(myNode); return myNode;}
50         |       e = atom {return new ASTNode();}
51         //{ASTNode myNode=new ASTNode();
myNode.addChild($e.ast_node); myNode.visit(); alist.add(myNode);
return myNode;}
52         ;
53
54 atom returns[ASTNode ast_node]
55         :       INT {return new ASTNode();}
56         |       ID {return new ASTNode(); }
57         ;
58
59 WS      : (' '  | '\t')+ {skip();}
60         ;
61 NEWLINE
62         :       ( '\r\n'
63         |       '\r'
64         |       '\n')
65         ;
66

67 COMMENT :       '//' (~('\n'|'\r'|'\r\n'))*
68 {skip();}
69 ;
70

71 INT             :       ('0'..'9')+;
72 PLUS    :       '+';
73 MINUS   :       '-';
74 TIMES   :       '*';
75 DIV             :       '/';
76 LPAREN  :       '(';
77 RPAREN  :       ')';
78 ID              :       ('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9')*;
79 COLON   :       ':';
80 EQUALS  :       '=';

From jflack at math.purdue.edu  Wed Jan 16 12:39:41 2008
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Wed, 16 Jan 2008 15:39:41 -0500
Subject: [antlr-interest] antlr-interest Digest, Vol 38, Issue 52
In-Reply-To: <mailman.1.1200513601.3702.antlr-interest@antlr.org>
References: <mailman.1.1200513601.3702.antlr-interest@antlr.org>
Message-ID: <478E6B8D.40102@math.purdue.edu>


> From: Cameron Ross <cross at symboticware.com>
> Digit = [ "0" ? "9" ].
> ByteSequence = "#" Digit+ "\"" <byte sequence>.
> 
> Where # signifies the beginning of a byte sequence header, Digit+ 
> signifies the number of bytes to follow in the byte sequence, and " 
> signifies the end of the header and the beginning of the actual byte 
> sequence data. Note that bytes in the sequence can fall anywhere within 
> the extended ASCII character set (i.e. from 0x00 to 0xFF).
> ... However, when bytes
> in the 8-bit ASCII range are scanned (0x80 to 0xFF), the integer value 
> returned by LA(1) is always incorrectly reported as 65533 (0xFFFD). I 

"extended ASCII" and "8-bit ASCII" are terms that aren't based in
any standard and so they mostly get in the way of seeing what's going
on here.  ASCII is a 7-bit code that uses the values 0x00 - 0x7F,
exclusively.

I don't see your code for providing the input to the ANTLR lexer,
but it seems likely that it's coming as a Java character stream
(i.e. there is a java.io.Reader involved).  The Reader's job is
to convert external, byte-oriented character representations into
Unicode characters. ANTLR folks can easily picture a Reader
as a kind of pre-lexer that consumes bytes and emits chars.
Its "lexer grammar" is determined by a character set name,
which you can pass to an InputStreamReader constructor, for
example.

\uFFFD, the Unicode "REPLACEMENT CHARACTER" (I'm not shouting,
Unicode official char names are always in caps) is exactly what
a Reader is expected to emit if it hits a byte sequence that
violates the lexical grammar of its character set.  If you had
a Reader that expected ASCII input, the results you're seeing
are what you would get.

To get the behavior that you seem to be looking for, you could
create a Reader for the character set "iso-8859_1". This character
set just happens to consist of exactly the one-byte sequences
0x00 - 0xff which it maps directly into the chars \u0000 - \u00ff.

Some time way back in ANTLR 2 days I remember thinking how nice
it would be if you could explicitly define a byte-oriented
rather than char-oriented lexer (i.e. ANTLR could have both
CharLexer and ByteLexer classes derived from a common
base recognizer class that did almost all the work, but you
would ask it to generate a byte lexer when your language
specification wasn't Unicode-based, and completely avoid
jumping through Unicode-related hoops).  I haven't yet caught
up enough with ANTLR 3 to see whether that's possible, but if
not the best bet is just to treat your input explicitly as
iso-8859_1-encoded characters.

-Chap

From cross at symboticware.com  Wed Jan 16 12:53:31 2008
From: cross at symboticware.com (Cameron Ross)
Date: Wed, 16 Jan 2008 15:53:31 -0500
Subject: [antlr-interest] antlr-interest Digest, Vol 38, Issue 52
In-Reply-To: <478E6B8D.40102@math.purdue.edu>
References: <mailman.1.1200513601.3702.antlr-interest@antlr.org>
	<478E6B8D.40102@math.purdue.edu>
Message-ID: <478E6ECB.5050805@symboticware.com>

Works like a charm... thanks!

Cameron.

J Chapman Flack wrote:
>
>> From: Cameron Ross <cross at symboticware.com>
>> Digit = [ "0" ? "9" ].
>> ByteSequence = "#" Digit+ "\"" <byte sequence>.
>>
>> Where # signifies the beginning of a byte sequence header, Digit+ 
>> signifies the number of bytes to follow in the byte sequence, and " 
>> signifies the end of the header and the beginning of the actual byte 
>> sequence data. Note that bytes in the sequence can fall anywhere 
>> within the extended ASCII character set (i.e. from 0x00 to 0xFF).
>> ... However, when bytes
>> in the 8-bit ASCII range are scanned (0x80 to 0xFF), the integer 
>> value returned by LA(1) is always incorrectly reported as 65533 
>> (0xFFFD). I 
>
> "extended ASCII" and "8-bit ASCII" are terms that aren't based in
> any standard and so they mostly get in the way of seeing what's going
> on here.  ASCII is a 7-bit code that uses the values 0x00 - 0x7F,
> exclusively.
>
> I don't see your code for providing the input to the ANTLR lexer,
> but it seems likely that it's coming as a Java character stream
> (i.e. there is a java.io.Reader involved).  The Reader's job is
> to convert external, byte-oriented character representations into
> Unicode characters. ANTLR folks can easily picture a Reader
> as a kind of pre-lexer that consumes bytes and emits chars.
> Its "lexer grammar" is determined by a character set name,
> which you can pass to an InputStreamReader constructor, for
> example.
>
> \uFFFD, the Unicode "REPLACEMENT CHARACTER" (I'm not shouting,
> Unicode official char names are always in caps) is exactly what
> a Reader is expected to emit if it hits a byte sequence that
> violates the lexical grammar of its character set.  If you had
> a Reader that expected ASCII input, the results you're seeing
> are what you would get.
>
> To get the behavior that you seem to be looking for, you could
> create a Reader for the character set "iso-8859_1". This character
> set just happens to consist of exactly the one-byte sequences
> 0x00 - 0xff which it maps directly into the chars \u0000 - \u00ff.
>
> Some time way back in ANTLR 2 days I remember thinking how nice
> it would be if you could explicitly define a byte-oriented
> rather than char-oriented lexer (i.e. ANTLR could have both
> CharLexer and ByteLexer classes derived from a common
> base recognizer class that did almost all the work, but you
> would ask it to generate a byte lexer when your language
> specification wasn't Unicode-based, and completely avoid
> jumping through Unicode-related hoops).  I haven't yet caught
> up enough with ANTLR 3 to see whether that's possible, but if
> not the best bet is just to treat your input explicitly as
> iso-8859_1-encoded characters.
>
> -Chap
>


From zuper85 at hotmail.it  Wed Jan 16 13:04:05 2008
From: zuper85 at hotmail.it (Michele Bortolato)
Date: Wed, 16 Jan 2008 22:04:05 +0100
Subject: [antlr-interest] Building XML like AST
Message-ID: <BAY108-W8A00B5897669649043DABD6400@phx.gbl>


Hi.

let's suppose i have a grammar like this:

prog:   expr+ ;

expr:   multExpr (('+'|'-') multExpr)*
    ; 

multExpr
    :   atom ('*' atom)*
    ; 

atom:   INT
    |   '(' expr ')'
    ;

// START:tokens
INT :   '0'..'9'+ ;
NEWLINE:'\r'? '\n' ;
WS  :   (' '|'\t'|'\n'|'\r')+ {skip();} ;

i need to generate an AST for this grammra in XML form.

example, for a string like 3*4+5

i could need an output such:


   
      3
      4
   


instead of :(* 3 (+ 4 5))

could ANTLR(WORKS) generate an XML element rather than a CommonType tree?How?

I didn't found anything on  ANTLR Reference.

Thanks
_________________________________________________________________
Ti piace giocare con le lettere? Prova ABCLive!
http://messengergiochi.it.msn.com/

From lilypondtool at organum.hu  Thu Jan 17 03:11:19 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Thu, 17 Jan 2008 12:11:19 +0100
Subject: [antlr-interest] ANTLR 3 migration: TokenStreamSelector
Message-ID: <478F37D7.8080408@organum.hu>

Hi,

I have a grammar written for Antlr 2 where I used the 
TokenStreamSelector class to initialize an embedded (nested) parser and 
lexer: the language could have embedded fragments written in an other 
language. This is the same case as the multiLexer example in the 2nd 
version where Javadoc comments were parsed with a separate parser.
As this is a common task I'm quite sure that there is support for this 
in Antlr3. What can I use for this purpose in Antlr 3?

Thank you,

Bertalan Fodor

-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu


From vbar at comp.cz  Thu Jan 17 05:07:14 2008
From: vbar at comp.cz (Vaclav Barta)
Date: Thu, 17 Jan 2008 14:07:14 +0100
Subject: [antlr-interest] insert after tree?
In-Reply-To: <910112.95286.qm@web31801.mail.mud.yahoo.com>
References: <910112.95286.qm@web31801.mail.mud.yahoo.com>
Message-ID: <478F5302.6000001@comp.cz>

Hi,

sorry for the late answer, but I had to publish the software first; :-) 
for programmatic transformations of SQL, I heartily recommend MacroScope 
(http://macroscope.sourceforge.net/). It's in C#, so probably not 
directly usable in your case, but IMHO still useful to see how your 
problem can be solved (in an ANTLR-nonspecific way - it was my first 
ANTLR project, so the architecture is quite conservative). ANTLR is used 
strictly for parsing. Its actions build an SQL syntax tree (not ANTLR 
AST, but a tree of custom typed objects - what MS calls an "object 
model"), and tree transformations (like adding an ESCAPE clause) are 
implemented separately, normally with visitors. I don't doubt ANTLR 
gurus could do tree transformations with much less code, but I don't 
regret starting simple - had enough ANTLR on my plate as it was...

	Bye
		Vasek

Geoff hendrey wrote:
> It's the first case you mention below.
> 
> More specifically, I need to recognize SQL "LIKE" expression trees from 
> within a SQL statement and add the text "ESCAPE '~'" after the LIKE 
> expression's tree. I have this in my grammar file.
> 
> likeExpression
>     :(concatenationExpression 'LIKE' concatenationExpression) ->^('LIKE' 
> concatenationExpression+ ESCAPE)     ;
> 
> I added the imaginary ESCAPE token, but I have not had any luck in my 
> Java trying to replace the imaginary escape token with the real text 
> "ESCAPE '~'". If only I could add a *real* token through my rewrite rule 
> above , I would be in business.
> 
> On PAge 176 of Terence's book it shows how to construct an imaginary 
> token with from a real token, but I don't have a real token to use (as 
> far as I can tell), which means I can't use the TokeRewriteStream with 
> the imaginary token, as far as I can tell.
> 
>  
> -geoff
> 
> 
> 
> 
> ----- Original Message ----
> From: Harald M. M?ller <harald_m_mueller at gmx.de>
> To: Geoff hendrey <geoff_hendrey at yahoo.com>; antlr-interest at antlr.org
> Sent: Sunday, January 6, 2008 9:04:04 AM
> Subject: RE: [antlr-interest] insert after tree?
> 
> Sorry - I don't understand your question:
> - You have an AST?
> - you want to output it again as text?
> - but after some sub-AST of it, you want to have written some additional 
> text?
>  
> or
>  
> - You have an AST
> - you want to insert a node behind a certain sub-AST
> so that later tree parsers/walkers will see that additional node
>  
> Is it one of these two - or something differently?
>  
> Sorry for being a little bit slow ...
> Regards
> Harald
> 
>     ------------------------------------------------------------------------
>     *From:* antlr-interest-bounces at antlr.org
>     [mailto:antlr-interest-bounces at antlr.org] *On Behalf Of *Geoff hendrey
>     *Sent:* Sunday, January 06, 2008 9:22 AM
>     *To:* antlr-interest at antlr.org
>     *Subject:* [antlr-interest] insert after tree?
> 
>      From my Java program, I want to insert text after a *tree* not
>     after a token.
> 
>     I guess I am looking for a "TreeRewriteStream" as opposed to a
>     TokenRewriteStream.
> 
>     As a workaroud I tried creating an imaginary token in my grammar
>     file and using it to identify the rightmost side of a tree. Like this:
> 
>     a 'func' a ->^('func' a+ IMAGINARY)
> 
>     But then as I found out, the IMAGINARY Token doesn't seem to work
>     with TokenRewriteStream.insertAfter.
> 
>     Can anybody advise on how I can insert text immediately after a
>     particular tree? (The text is static so perhaps there is a way to do
>     it from the grammar file...)
> 
> 


From r.mark.volkmann at gmail.com  Thu Jan 17 08:17:35 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 17 Jan 2008 10:17:35 -0600
Subject: [antlr-interest] ANTLRWorks debugging when lexer and parser
	grammars are separated
Message-ID: <f0fcc6820801170817x376fb08cy4fccf9184d98f50f@mail.gmail.com>

I must be missing a step. How can I use ANTLRWorks to debug a parser
grammar when the lexer rules are in a separate file? Do I have to open
the lexer grammar file first and select "Generate Code" from the
Generate menu? Do I have to find the .tokens file that is generated
and used by my parser grammar and move that to a special directory
where ANTLRWorks can find it?

-- 
R. Mark Volkmann
Object Computing, Inc.

From mrfont at room4me.com  Thu Jan 17 12:04:16 2008
From: mrfont at room4me.com (Frank Font)
Date: Thu, 17 Jan 2008 15:04:16 -0500
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR
In-Reply-To: <D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
Message-ID: <478FB4C0.8020209@room4me.com>

Hello,

I purchased the book, read through it, but I have a thick skull.  
Perhaps I can get some advice here on two questions about converting 
formula expressions that look like "basic" syntax...

IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
    H-CAPRESTATE
ELSE
    IF REP_DTE < '2001-01-01' THEN
        ACCTG_CNG + ACCTG_ERR_CRCT
    END IF
END IF

Into a flat format that looks like Excel formula syntax...

IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE < 
'2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT)

I tried writing a few grammar files, but all have had various runtime 
issues.

Here are my questions...

1.  Is ANTLR the right tool for this job?  (I don't have much time.)
2.  If it is the right tool, is there already a grammar that will get me 
most of the way there?

Thanks in advance for any advice.

Regards,
Frank Font


From r.mark.volkmann at gmail.com  Thu Jan 17 13:02:15 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 17 Jan 2008 15:02:15 -0600
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR
In-Reply-To: <478FB4C0.8020209@room4me.com>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<478FB4C0.8020209@room4me.com>
Message-ID: <f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>

On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
> Hello,
>
> I purchased the book, read through it, but I have a thick skull.
> Perhaps I can get some advice here on two questions about converting
> formula expressions that look like "basic" syntax...
>
> IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
>     H-CAPRESTATE
> ELSE
>     IF REP_DTE < '2001-01-01' THEN
>         ACCTG_CNG + ACCTG_ERR_CRCT
>     END IF
> END IF
>
> Into a flat format that looks like Excel formula syntax...
>
> IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE <
> '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT)
>
> I tried writing a few grammar files, but all have had various runtime
> issues.
>
> Here are my questions...
>
> 1.  Is ANTLR the right tool for this job?  (I don't have much time.)

ANTLR can definitely do this. However, you shouldn't expect the work
to go quickly if this is your first ANTLR grammar. You'll be learning
lots of things along the way.

> 2.  If it is the right tool, is there already a grammar that will get me
> most of the way there?

I'm not aware of a particular existing grammar that is close to what
you want. Maybe someone else knows of one.

> Thanks in advance for any advice.
>
> Regards,
> Frank Font

-- 
R. Mark Volkmann
Object Computing, Inc.

From pink at odahoda.de  Thu Jan 17 13:15:19 2008
From: pink at odahoda.de (Benjamin Niemann)
Date: Thu, 17 Jan 2008 22:15:19 +0100
Subject: [antlr-interest] book, online doc discrepancy?
References: <47827657.2030001@jpl.nasa.gov>
Message-ID: <fmogh7$n63$1@ger.gmane.org>

Hi Mathew,

Mathew Yeates wrote:

> Using StringTemplate the book says to do (using Python)
> 
> hello=stringtemplate.StringTemplate("Hello, <name>")
> hello.setAttribute("name","World")
> print hello.toString() #is an error :AttributeError: 'StringTemplate'
> object has no attribute 'toString'
> 
> if I do
> print str(hello) I get Hello, <name>
> 
> But the online docs say to use $name$ and hello["name"] = "World"
> and this works.

Please note that, if you want to use ANTLR in conjunction with
StringTemplate and Python, you'll have to use the stringtemplate3 package
that you can download from the StringTemplate site or the pypi.

I think the old stringtemplate (V2.x) package did not have a toString method
and only implemented __str__, but V3 has both - and str() will actually
throw an exception, if you work with unicode strings, so I recommend to use
toString.

I think there was also a change of the default lexer between V2 and V3 and
the book refers to V3.

hello.setAttribute("name","World") and hello["name"] = "World" should be
equivalent.

-Ben

-- 
Benjamin Niemann
Email: pink at odahoda dot de
WWW: http://pink.odahoda.de/


From r.mark.volkmann at gmail.com  Thu Jan 17 13:55:49 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 17 Jan 2008 15:55:49 -0600
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR
In-Reply-To: <f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<478FB4C0.8020209@room4me.com>
	<f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>
Message-ID: <f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>

Here's a start on your grammar.

grammar Accounting;

options {
  output = template;
}

@lexer::header { package com.ociweb.accounting; }
@parser::header { package com.ociweb.accounting; }

start: ifStatement EOF;

ifStatement
  : 'IF' condition 'THEN' statement ('ELSE' statement)? 'END IF';

comparison: expression RELATIONAL_OPERATOR expression;

condition: comparison (LOGICAL_OPERATOR comparison)*;

expression
  : STRING_LITERAL
  | value (SIGN value)*;

statement: expression | ifStatement;

value: NAME | NUMBER;

LOGICAL_OPERATOR: 'AND' | 'OR';

RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';

APOSTROPHE: '\'';

NUMBER: INTEGER | FLOAT;
fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
fragment INTEGER: SIGN? NATURAL_NUMBER;
fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
SIGN: '+' | '-';

NAME: LETTER (LETTER | NUMBER | '_')*;

STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;

WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };

// Note that NONCONTROL_CHAR does not include the double-quote character.
fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
fragment LETTER: LOWER | UPPER;
fragment LOWER: 'a'..'z';
fragment UPPER: 'A'..'Z';
fragment DIGIT: '0'..'9';
fragment NEWLINE: '\r'? '\n';
fragment SPACE: ' ' | '\t';

// Note that SYMBOL does not include the
// apostrophe or double-quote characters.
fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';

It parses your example input except for I changed "H-CAPRESTATE" to
"H_CAPRESTATE" to simply things. This way I can use "-" for
subtraction. I'm sure there's a way to work this out so you can also
use "-" in names.

The grammar above doesn't output anything. It just verifies that input conforms.

Email me privately if you want the Java code I wrote that uses the
generated classes and my Ant build file.

On Jan 17, 2008 3:02 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
> > Hello,
> >
> > I purchased the book, read through it, but I have a thick skull.
> > Perhaps I can get some advice here on two questions about converting
> > formula expressions that look like "basic" syntax...
> >
> > IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
> >     H-CAPRESTATE
> > ELSE
> >     IF REP_DTE < '2001-01-01' THEN
> >         ACCTG_CNG + ACCTG_ERR_CRCT
> >     END IF
> > END IF
> >
> > Into a flat format that looks like Excel formula syntax...
> >
> > IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE <
> > '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT)
> >
> > I tried writing a few grammar files, but all have had various runtime
> > issues.
> >
> > Here are my questions...
> >
> > 1.  Is ANTLR the right tool for this job?  (I don't have much time.)
>
> ANTLR can definitely do this. However, you shouldn't expect the work
> to go quickly if this is your first ANTLR grammar. You'll be learning
> lots of things along the way.
>
> > 2.  If it is the right tool, is there already a grammar that will get me
> > most of the way there?
>
> I'm not aware of a particular existing grammar that is close to what
> you want. Maybe someone else knows of one.
>
>
> > Thanks in advance for any advice.
> >
> > Regards,
> > Frank Font
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Thu Jan 17 14:21:33 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 17 Jan 2008 16:21:33 -0600
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR
In-Reply-To: <f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<478FB4C0.8020209@room4me.com>
	<f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>
	<f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
Message-ID: <f0fcc6820801171421o460fcdd2q9e31c947e7836a81@mail.gmail.com>

Here's a version of the grammar that I believe produces the output you
want. Note that it is currently limited to logical expressions with a
single "AND" or "OR". If anyone sees ways to improve what I've done
I'd love to get feedback on this. I'm still learning ANTLR.

grammar Accounting;

options {
  output = template;
}

@lexer::header { package com.ociweb.accounting; }
@parser::header { package com.ociweb.accounting; }

@parser::members {
  private void out(String text) { System.out.print(text); }
  private void outln(String text) { System.out.print(text); }
}

start: ifStatement EOF;

ifBegin: 'IF' { out("IF("); };
ifEnd: 'END IF' { out(")"); };

ifStatement
  : ifBegin condition 'THEN' statement ('ELSE' statement)? ifEnd;

comparison
  : expression RELATIONAL_OPERATOR expression;

condition
  : c1=comparison { out($c1.text); }
  | c1=comparison lo=LOGICAL_OPERATOR c2=comparison
    {
      out($lo.text + "(" + $c1.text + ", " + $c2.text + ")");
    }
  ;

expression
  : STRING_LITERAL
  | value (SIGN value)*
  ;

statement
  @init { out(", "); }
  : e=expression { out($e.text); }
  | ifStatement
  ;

value: NAME | NUMBER;

LOGICAL_OPERATOR: 'AND' | 'OR';

RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';

APOSTROPHE: '\'';

NUMBER: INTEGER | FLOAT;
fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
fragment INTEGER: SIGN? NATURAL_NUMBER;
fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
SIGN: '+' | '-';

NAME: LETTER (LETTER | NUMBER | '_')*;

STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;

WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };

// Note that NONCONTROL_CHAR does not include the double-quote character.
fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
fragment LETTER: LOWER | UPPER;
fragment LOWER: 'a'..'z';
fragment UPPER: 'A'..'Z';
fragment DIGIT: '0'..'9';
fragment NEWLINE: '\r'? '\n';
fragment SPACE: ' ' | '\t';

// Note that SYMBOL does not include the
// apostrophe or double-quote characters.
fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';


On Jan 17, 2008 3:55 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> Here's a start on your grammar.
>
> grammar Accounting;
>
> options {
>   output = template;
> }
>
> @lexer::header { package com.ociweb.accounting; }
> @parser::header { package com.ociweb.accounting; }
>
> start: ifStatement EOF;
>
> ifStatement
>   : 'IF' condition 'THEN' statement ('ELSE' statement)? 'END IF';
>
> comparison: expression RELATIONAL_OPERATOR expression;
>
> condition: comparison (LOGICAL_OPERATOR comparison)*;
>
> expression
>   : STRING_LITERAL
>   | value (SIGN value)*;
>
> statement: expression | ifStatement;
>
> value: NAME | NUMBER;
>
> LOGICAL_OPERATOR: 'AND' | 'OR';
>
> RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
>
> APOSTROPHE: '\'';
>
> NUMBER: INTEGER | FLOAT;
> fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
> fragment INTEGER: SIGN? NATURAL_NUMBER;
> fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
> SIGN: '+' | '-';
>
> NAME: LETTER (LETTER | NUMBER | '_')*;
>
> STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
>
> WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
>
> // Note that NONCONTROL_CHAR does not include the double-quote character.
> fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
> fragment LETTER: LOWER | UPPER;
> fragment LOWER: 'a'..'z';
> fragment UPPER: 'A'..'Z';
> fragment DIGIT: '0'..'9';
> fragment NEWLINE: '\r'? '\n';
> fragment SPACE: ' ' | '\t';
>
> // Note that SYMBOL does not include the
> // apostrophe or double-quote characters.
> fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';
>
> It parses your example input except for I changed "H-CAPRESTATE" to
> "H_CAPRESTATE" to simply things. This way I can use "-" for
> subtraction. I'm sure there's a way to work this out so you can also
> use "-" in names.
>
> The grammar above doesn't output anything. It just verifies that input conforms.
>
> Email me privately if you want the Java code I wrote that uses the
> generated classes and my Ant build file.
>
>
> On Jan 17, 2008 3:02 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> > On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
> > > Hello,
> > >
> > > I purchased the book, read through it, but I have a thick skull.
> > > Perhaps I can get some advice here on two questions about converting
> > > formula expressions that look like "basic" syntax...
> > >
> > > IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
> > >     H-CAPRESTATE
> > > ELSE
> > >     IF REP_DTE < '2001-01-01' THEN
> > >         ACCTG_CNG + ACCTG_ERR_CRCT
> > >     END IF
> > > END IF
> > >
> > > Into a flat format that looks like Excel formula syntax...
> > >
> > > IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE <
> > > '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT)
> > >
> > > I tried writing a few grammar files, but all have had various runtime
> > > issues.
> > >
> > > Here are my questions...
> > >
> > > 1.  Is ANTLR the right tool for this job?  (I don't have much time.)
> >
> > ANTLR can definitely do this. However, you shouldn't expect the work
> > to go quickly if this is your first ANTLR grammar. You'll be learning
> > lots of things along the way.
> >
> > > 2.  If it is the right tool, is there already a grammar that will get me
> > > most of the way there?
> >
> > I'm not aware of a particular existing grammar that is close to what
> > you want. Maybe someone else knows of one.
> >
> >
> > > Thanks in advance for any advice.
> > >
> > > Regards,
> > > Frank Font
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
> >
>
>
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From mrfont at room4me.com  Thu Jan 17 14:27:55 2008
From: mrfont at room4me.com (Frank Font)
Date: Thu, 17 Jan 2008 17:27:55 -0500
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR (can
 translate using rewrite?)
In-Reply-To: <f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
References: <47827657.2030001@jpl.nasa.gov>	
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>	
	<478FB4C0.8020209@room4me.com>	
	<f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>
	<f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
Message-ID: <478FD66B.6020707@room4me.com>

Hi Mark,

Thanks for the sample grammar. 

To keep things simple, do you think the entire translation can be done 
via "rewrite=true" setting and then adding things like "-> 
template(....)" actions to the relevant rules? 

For example, I'm inclined to add this to the grammar you provided...

ifStatement
	: 'IF' e1=condition 'THEN' e2=statement ('ELSE' e3=statement)? 'END IF'
	-> template(e1={$e1.text},e2={$e2.text}) " IF(<e1>,<e2>,<e3>) "
	;


I started going down the rewrite road with mixed success and I'm not 
sure it is the right road.

Regards,
Frank Font

PS - Not familiar with the "com.ociweb.accounting" package.  Do I really 
need that installed?

Mark Volkmann wrote:
> Here's a start on your grammar.
>
> grammar Accounting;
>
> options {
>   output = template;
> }
>
> @lexer::header { package com.ociweb.accounting; }
> @parser::header { package com.ociweb.accounting; }
>
> start: ifStatement EOF;
>
> ifStatement
>   : 'IF' condition 'THEN' statement ('ELSE' statement)? 'END IF';
>
> comparison: expression RELATIONAL_OPERATOR expression;
>
> condition: comparison (LOGICAL_OPERATOR comparison)*;
>
> expression
>   : STRING_LITERAL
>   | value (SIGN value)*;
>
> statement: expression | ifStatement;
>
> value: NAME | NUMBER;
>
> LOGICAL_OPERATOR: 'AND' | 'OR';
>
> RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
>
> APOSTROPHE: '\'';
>
> NUMBER: INTEGER | FLOAT;
> fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
> fragment INTEGER: SIGN? NATURAL_NUMBER;
> fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
> SIGN: '+' | '-';
>
> NAME: LETTER (LETTER | NUMBER | '_')*;
>
> STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
>
> WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
>
> // Note that NONCONTROL_CHAR does not include the double-quote character.
> fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
> fragment LETTER: LOWER | UPPER;
> fragment LOWER: 'a'..'z';
> fragment UPPER: 'A'..'Z';
> fragment DIGIT: '0'..'9';
> fragment NEWLINE: '\r'? '\n';
> fragment SPACE: ' ' | '\t';
>
> // Note that SYMBOL does not include the
> // apostrophe or double-quote characters.
> fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';
>
> It parses your example input except for I changed "H-CAPRESTATE" to
> "H_CAPRESTATE" to simply things. This way I can use "-" for
> subtraction. I'm sure there's a way to work this out so you can also
> use "-" in names.
>
> The grammar above doesn't output anything. It just verifies that input conforms.
>
> Email me privately if you want the Java code I wrote that uses the
> generated classes and my Ant build file.
>
> On Jan 17, 2008 3:02 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
>   
>> On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
>>     
>>> Hello,
>>>
>>> I purchased the book, read through it, but I have a thick skull.
>>> Perhaps I can get some advice here on two questions about converting
>>> formula expressions that look like "basic" syntax...
>>>
>>> IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
>>>     H-CAPRESTATE
>>> ELSE
>>>     IF REP_DTE < '2001-01-01' THEN
>>>         ACCTG_CNG + ACCTG_ERR_CRCT
>>>     END IF
>>> END IF
>>>
>>> Into a flat format that looks like Excel formula syntax...
>>>
>>> IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE <
>>> '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT))
>>>
>>> I tried writing a few grammar files, but all have had various runtime
>>> issues.
>>>
>>> Here are my questions...
>>>
>>> 1.  Is ANTLR the right tool for this job?  (I don't have much time.)
>>>       
>> ANTLR can definitely do this. However, you shouldn't expect the work
>> to go quickly if this is your first ANTLR grammar. You'll be learning
>> lots of things along the way.
>>
>>     
>>> 2.  If it is the right tool, is there already a grammar that will get me
>>> most of the way there?
>>>       
>> I'm not aware of a particular existing grammar that is close to what
>> you want. Maybe someone else knows of one.
>>
>>
>>     
>>> Thanks in advance for any advice.
>>>
>>> Regards,
>>> Frank Font
>>>       
>> --
>> R. Mark Volkmann
>> Object Computing, Inc.
>>
>>     
>
>
>
>   


From mrfont at room4me.com  Thu Jan 17 14:50:28 2008
From: mrfont at room4me.com (Frank Font)
Date: Thu, 17 Jan 2008 17:50:28 -0500
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR
In-Reply-To: <f0fcc6820801171421o460fcdd2q9e31c947e7836a81@mail.gmail.com>
References: <47827657.2030001@jpl.nasa.gov>	
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>	
	<478FB4C0.8020209@room4me.com>	
	<f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>	
	<f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
	<f0fcc6820801171421o460fcdd2q9e31c947e7836a81@mail.gmail.com>
Message-ID: <478FDBB4.7070203@room4me.com>

Hi Mark,

Wow, you put these things together fast!  (Quicker than I can try them out.)

Okay, I ran this in ANTLRWorks 1.1.5 and am getting error messages in 
the "output" window...

line 2:5 no viable alternative at character 'C'
line 1:0 no viable alternative at input 'IF'

These messages are a mystery to me and I get gobbs of them with my other 
grammars.

Also, I don't see the translated output anywhere although the parse tree 
looks good.

Any insight?

Regards,
Frank

Mark Volkmann wrote:
> Here's a version of the grammar that I believe produces the output you
> want. Note that it is currently limited to logical expressions with a
> single "AND" or "OR". If anyone sees ways to improve what I've done
> I'd love to get feedback on this. I'm still learning ANTLR.
>
> grammar Accounting;
>
> options {
>   output = template;
> }
>
> @lexer::header { package com.ociweb.accounting; }
> @parser::header { package com.ociweb.accounting; }
>
> @parser::members {
>   private void out(String text) { System.out.print(text); }
>   private void outln(String text) { System.out.print(text); }
> }
>
> start: ifStatement EOF;
>
> ifBegin: 'IF' { out("IF("); };
> ifEnd: 'END IF' { out(")"); };
>
> ifStatement
>   : ifBegin condition 'THEN' statement ('ELSE' statement)? ifEnd;
>
> comparison
>   : expression RELATIONAL_OPERATOR expression;
>
> condition
>   : c1=comparison { out($c1.text); }
>   | c1=comparison lo=LOGICAL_OPERATOR c2=comparison
>     {
>       out($lo.text + "(" + $c1.text + ", " + $c2.text + ")");
>     }
>   ;
>
> expression
>   : STRING_LITERAL
>   | value (SIGN value)*
>   ;
>
> statement
>   @init { out(", "); }
>   : e=expression { out($e.text); }
>   | ifStatement
>   ;
>
> value: NAME | NUMBER;
>
> LOGICAL_OPERATOR: 'AND' | 'OR';
>
> RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
>
> APOSTROPHE: '\'';
>
> NUMBER: INTEGER | FLOAT;
> fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
> fragment INTEGER: SIGN? NATURAL_NUMBER;
> fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
> SIGN: '+' | '-';
>
> NAME: LETTER (LETTER | NUMBER | '_')*;
>
> STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
>
> WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
>
> // Note that NONCONTROL_CHAR does not include the double-quote character.
> fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
> fragment LETTER: LOWER | UPPER;
> fragment LOWER: 'a'..'z';
> fragment UPPER: 'A'..'Z';
> fragment DIGIT: '0'..'9';
> fragment NEWLINE: '\r'? '\n';
> fragment SPACE: ' ' | '\t';
>
> // Note that SYMBOL does not include the
> // apostrophe or double-quote characters.
> fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';
>
>
> On Jan 17, 2008 3:55 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
>   
>> Here's a start on your grammar.
>>
>> grammar Accounting;
>>
>> options {
>>   output = template;
>> }
>>
>> @lexer::header { package com.ociweb.accounting; }
>> @parser::header { package com.ociweb.accounting; }
>>
>> start: ifStatement EOF;
>>
>> ifStatement
>>   : 'IF' condition 'THEN' statement ('ELSE' statement)? 'END IF';
>>
>> comparison: expression RELATIONAL_OPERATOR expression;
>>
>> condition: comparison (LOGICAL_OPERATOR comparison)*;
>>
>> expression
>>   : STRING_LITERAL
>>   | value (SIGN value)*;
>>
>> statement: expression | ifStatement;
>>
>> value: NAME | NUMBER;
>>
>> LOGICAL_OPERATOR: 'AND' | 'OR';
>>
>> RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
>>
>> APOSTROPHE: '\'';
>>
>> NUMBER: INTEGER | FLOAT;
>> fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
>> fragment INTEGER: SIGN? NATURAL_NUMBER;
>> fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
>> SIGN: '+' | '-';
>>
>> NAME: LETTER (LETTER | NUMBER | '_')*;
>>
>> STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
>>
>> WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
>>
>> // Note that NONCONTROL_CHAR does not include the double-quote character.
>> fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
>> fragment LETTER: LOWER | UPPER;
>> fragment LOWER: 'a'..'z';
>> fragment UPPER: 'A'..'Z';
>> fragment DIGIT: '0'..'9';
>> fragment NEWLINE: '\r'? '\n';
>> fragment SPACE: ' ' | '\t';
>>
>> // Note that SYMBOL does not include the
>> // apostrophe or double-quote characters.
>> fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';
>>
>> It parses your example input except for I changed "H-CAPRESTATE" to
>> "H_CAPRESTATE" to simply things. This way I can use "-" for
>> subtraction. I'm sure there's a way to work this out so you can also
>> use "-" in names.
>>
>> The grammar above doesn't output anything. It just verifies that input conforms.
>>
>> Email me privately if you want the Java code I wrote that uses the
>> generated classes and my Ant build file.
>>
>>
>> On Jan 17, 2008 3:02 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
>>     
>>> On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
>>>       
>>>> Hello,
>>>>
>>>> I purchased the book, read through it, but I have a thick skull.
>>>> Perhaps I can get some advice here on two questions about converting
>>>> formula expressions that look like "basic" syntax...
>>>>
>>>> IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
>>>>     H-CAPRESTATE
>>>> ELSE
>>>>     IF REP_DTE < '2001-01-01' THEN
>>>>         ACCTG_CNG + ACCTG_ERR_CRCT
>>>>     END IF
>>>> END IF
>>>>
>>>> Into a flat format that looks like Excel formula syntax...
>>>>
>>>> IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE <
>>>> '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT)
>>>>
>>>> I tried writing a few grammar files, but all have had various runtime
>>>> issues.
>>>>
>>>> Here are my questions...
>>>>
>>>> 1.  Is ANTLR the right tool for this job?  (I don't have much time.)
>>>>         
>>> ANTLR can definitely do this. However, you shouldn't expect the work
>>> to go quickly if this is your first ANTLR grammar. You'll be learning
>>> lots of things along the way.
>>>
>>>       
>>>> 2.  If it is the right tool, is there already a grammar that will get me
>>>> most of the way there?
>>>>         
>>> I'm not aware of a particular existing grammar that is close to what
>>> you want. Maybe someone else knows of one.
>>>
>>>
>>>       
>>>> Thanks in advance for any advice.
>>>>
>>>> Regards,
>>>> Frank Font
>>>>         
>>> --
>>> R. Mark Volkmann
>>> Object Computing, Inc.
>>>
>>>       
>>
>> --
>> R. Mark Volkmann
>> Object Computing, Inc.
>>
>>     
>
>
>
>   


From r.mark.volkmann at gmail.com  Thu Jan 17 15:02:36 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 17 Jan 2008 17:02:36 -0600
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR (can
	translate using rewrite?)
In-Reply-To: <478FD66B.6020707@room4me.com>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<478FB4C0.8020209@room4me.com>
	<f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>
	<f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
	<478FD66B.6020707@room4me.com>
Message-ID: <f0fcc6820801171502x6110ba11q60bf3b05545a5e71@mail.gmail.com>

On Jan 17, 2008 4:27 PM, Frank Font <mrfont at room4me.com> wrote:
> Hi Mark,
>
> Thanks for the sample grammar.
>
> To keep things simple, do you think the entire translation can be done
> via "rewrite=true" setting and then adding things like "->
> template(....)" actions to the relevant rules?

I don't think that's a good approach because I think there is too much
difference between the input and output. I think the rewrite thing is
best used when you're outputting most of the input as-is. Maybe others
will have a different opinion.

I have to admit I haven't used StringTemplate yet. I need to learn that still.

> For example, I'm inclined to add this to the grammar you provided...
>
> ifStatement
>         : 'IF' e1=condition 'THEN' e2=statement ('ELSE' e3=statement)? 'END IF'
>         -> template(e1={$e1.text},e2={$e2.text}) " IF(<e1>,<e2>,<e3>) "
>         ;

Hmm ... that looks much nicer than my string concatenation!

> I started going down the rewrite road with mixed success and I'm not
> sure it is the right road.
>
> Regards,
> Frank Font
>
> PS - Not familiar with the "com.ociweb.accounting" package.  Do I really
> need that installed?

That's just the Java package name I selected. The generated classes
come out with

package com.ociweb.accounting.

You should change that to be a reasonable Java package name for your company.

> Mark Volkmann wrote:
> > Here's a start on your grammar.
> >
> > grammar Accounting;
> >
> > options {
> >   output = template;
> > }
> >
> > @lexer::header { package com.ociweb.accounting; }
> > @parser::header { package com.ociweb.accounting; }
> >
> > start: ifStatement EOF;
> >
> > ifStatement
> >   : 'IF' condition 'THEN' statement ('ELSE' statement)? 'END IF';
> >
> > comparison: expression RELATIONAL_OPERATOR expression;
> >
> > condition: comparison (LOGICAL_OPERATOR comparison)*;
> >
> > expression
> >   : STRING_LITERAL
> >   | value (SIGN value)*;
> >
> > statement: expression | ifStatement;
> >
> > value: NAME | NUMBER;
> >
> > LOGICAL_OPERATOR: 'AND' | 'OR';
> >
> > RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
> >
> > APOSTROPHE: '\'';
> >
> > NUMBER: INTEGER | FLOAT;
> > fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
> > fragment INTEGER: SIGN? NATURAL_NUMBER;
> > fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
> > SIGN: '+' | '-';
> >
> > NAME: LETTER (LETTER | NUMBER | '_')*;
> >
> > STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
> >
> > WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
> >
> > // Note that NONCONTROL_CHAR does not include the double-quote character.
> > fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
> > fragment LETTER: LOWER | UPPER;
> > fragment LOWER: 'a'..'z';
> > fragment UPPER: 'A'..'Z';
> > fragment DIGIT: '0'..'9';
> > fragment NEWLINE: '\r'? '\n';
> > fragment SPACE: ' ' | '\t';
> >
> > // Note that SYMBOL does not include the
> > // apostrophe or double-quote characters.
> > fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';
> >
> > It parses your example input except for I changed "H-CAPRESTATE" to
> > "H_CAPRESTATE" to simply things. This way I can use "-" for
> > subtraction. I'm sure there's a way to work this out so you can also
> > use "-" in names.
> >
> > The grammar above doesn't output anything. It just verifies that input conforms.
> >
> > Email me privately if you want the Java code I wrote that uses the
> > generated classes and my Ant build file.
> >
> > On Jan 17, 2008 3:02 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> >
> >> On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
> >>
> >>> Hello,
> >>>
> >>> I purchased the book, read through it, but I have a thick skull.
> >>> Perhaps I can get some advice here on two questions about converting
> >>> formula expressions that look like "basic" syntax...
> >>>
> >>> IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
> >>>     H-CAPRESTATE
> >>> ELSE
> >>>     IF REP_DTE < '2001-01-01' THEN
> >>>         ACCTG_CNG + ACCTG_ERR_CRCT
> >>>     END IF
> >>> END IF
> >>>
> >>> Into a flat format that looks like Excel formula syntax...
> >>>
> >>> IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE <
> >>> '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT))
> >>>
> >>> I tried writing a few grammar files, but all have had various runtime
> >>> issues.
> >>>
> >>> Here are my questions...
> >>>
> >>> 1.  Is ANTLR the right tool for this job?  (I don't have much time.)
> >>>
> >> ANTLR can definitely do this. However, you shouldn't expect the work
> >> to go quickly if this is your first ANTLR grammar. You'll be learning
> >> lots of things along the way.
> >>
> >>
> >>> 2.  If it is the right tool, is there already a grammar that will get me
> >>> most of the way there?
> >>>
> >> I'm not aware of a particular existing grammar that is close to what
> >> you want. Maybe someone else knows of one.
> >>
> >>
> >>
> >>> Thanks in advance for any advice.
> >>>
> >>> Regards,
> >>> Frank Font
> >>>
> >> --
> >> R. Mark Volkmann
> >> Object Computing, Inc.
> >>
> >>
> >
> >
> >
> >
>
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Thu Jan 17 15:08:19 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 17 Jan 2008 17:08:19 -0600
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR
In-Reply-To: <478FDBB4.7070203@room4me.com>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<478FB4C0.8020209@room4me.com>
	<f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>
	<f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
	<f0fcc6820801171421o460fcdd2q9e31c947e7836a81@mail.gmail.com>
	<478FDBB4.7070203@room4me.com>
Message-ID: <f0fcc6820801171508m81e4077h38acfdbd454a0f10@mail.gmail.com>

On Jan 17, 2008 4:50 PM, Frank Font <mrfont at room4me.com> wrote:
> Hi Mark,
>
> Wow, you put these things together fast!  (Quicker than I can try them out.)
>
> Okay, I ran this in ANTLRWorks 1.1.5 and am getting error messages in
> the "output" window...
>
> line 2:5 no viable alternative at character 'C'
> line 1:0 no viable alternative at input 'IF'

What happens if you select "Check Grammar" from the "Grammar" menu?
I get a dialog that says "Check Grammar succeeded."

I tried to use the debugger and got a Swing error which I think
indicates a bug in ANTLRWorks, not a bug in the grammar.

I'll zip up my Ant build script and my Java code that uses the
generated classes (Processor.java) and send it to you.

> These messages are a mystery to me and I get gobbs of them with my other
> grammars.
>
> Also, I don't see the translated output anywhere although the parse tree
> looks good.

I think the reason I don't see the text output is due to the
Swing-related bug that I hit.

> Any insight?
>
> Regards,
> Frank
>
>
> Mark Volkmann wrote:
> > Here's a version of the grammar that I believe produces the output you
> > want. Note that it is currently limited to logical expressions with a
> > single "AND" or "OR". If anyone sees ways to improve what I've done
> > I'd love to get feedback on this. I'm still learning ANTLR.
> >
> > grammar Accounting;
> >
> > options {
> >   output = template;
> > }
> >
> > @lexer::header { package com.ociweb.accounting; }
> > @parser::header { package com.ociweb.accounting; }
> >
> > @parser::members {
> >   private void out(String text) { System.out.print(text); }
> >   private void outln(String text) { System.out.print(text); }
> > }
> >
> > start: ifStatement EOF;
> >
> > ifBegin: 'IF' { out("IF("); };
> > ifEnd: 'END IF' { out(")"); };
> >
> > ifStatement
> >   : ifBegin condition 'THEN' statement ('ELSE' statement)? ifEnd;
> >
> > comparison
> >   : expression RELATIONAL_OPERATOR expression;
> >
> > condition
> >   : c1=comparison { out($c1.text); }
> >   | c1=comparison lo=LOGICAL_OPERATOR c2=comparison
> >     {
> >       out($lo.text + "(" + $c1.text + ", " + $c2.text + ")");
> >     }
> >   ;
> >
> > expression
> >   : STRING_LITERAL
> >   | value (SIGN value)*
> >   ;
> >
> > statement
> >   @init { out(", "); }
> >   : e=expression { out($e.text); }
> >   | ifStatement
> >   ;
> >
> > value: NAME | NUMBER;
> >
> > LOGICAL_OPERATOR: 'AND' | 'OR';
> >
> > RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
> >
> > APOSTROPHE: '\'';
> >
> > NUMBER: INTEGER | FLOAT;
> > fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
> > fragment INTEGER: SIGN? NATURAL_NUMBER;
> > fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
> > SIGN: '+' | '-';
> >
> > NAME: LETTER (LETTER | NUMBER | '_')*;
> >
> > STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
> >
> > WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
> >
> > // Note that NONCONTROL_CHAR does not include the double-quote character.
> > fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
> > fragment LETTER: LOWER | UPPER;
> > fragment LOWER: 'a'..'z';
> > fragment UPPER: 'A'..'Z';
> > fragment DIGIT: '0'..'9';
> > fragment NEWLINE: '\r'? '\n';
> > fragment SPACE: ' ' | '\t';
> >
> > // Note that SYMBOL does not include the
> > // apostrophe or double-quote characters.
> > fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';
> >
> >
> > On Jan 17, 2008 3:55 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> >
> >> Here's a start on your grammar.
> >>
> >> grammar Accounting;
> >>
> >> options {
> >>   output = template;
> >> }
> >>
> >> @lexer::header { package com.ociweb.accounting; }
> >> @parser::header { package com.ociweb.accounting; }
> >>
> >> start: ifStatement EOF;
> >>
> >> ifStatement
> >>   : 'IF' condition 'THEN' statement ('ELSE' statement)? 'END IF';
> >>
> >> comparison: expression RELATIONAL_OPERATOR expression;
> >>
> >> condition: comparison (LOGICAL_OPERATOR comparison)*;
> >>
> >> expression
> >>   : STRING_LITERAL
> >>   | value (SIGN value)*;
> >>
> >> statement: expression | ifStatement;
> >>
> >> value: NAME | NUMBER;
> >>
> >> LOGICAL_OPERATOR: 'AND' | 'OR';
> >>
> >> RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
> >>
> >> APOSTROPHE: '\'';
> >>
> >> NUMBER: INTEGER | FLOAT;
> >> fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
> >> fragment INTEGER: SIGN? NATURAL_NUMBER;
> >> fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
> >> SIGN: '+' | '-';
> >>
> >> NAME: LETTER (LETTER | NUMBER | '_')*;
> >>
> >> STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
> >>
> >> WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
> >>
> >> // Note that NONCONTROL_CHAR does not include the double-quote character.
> >> fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
> >> fragment LETTER: LOWER | UPPER;
> >> fragment LOWER: 'a'..'z';
> >> fragment UPPER: 'A'..'Z';
> >> fragment DIGIT: '0'..'9';
> >> fragment NEWLINE: '\r'? '\n';
> >> fragment SPACE: ' ' | '\t';
> >>
> >> // Note that SYMBOL does not include the
> >> // apostrophe or double-quote characters.
> >> fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' | '{'..'~';
> >>
> >> It parses your example input except for I changed "H-CAPRESTATE" to
> >> "H_CAPRESTATE" to simply things. This way I can use "-" for
> >> subtraction. I'm sure there's a way to work this out so you can also
> >> use "-" in names.
> >>
> >> The grammar above doesn't output anything. It just verifies that input conforms.
> >>
> >> Email me privately if you want the Java code I wrote that uses the
> >> generated classes and my Ant build file.
> >>
> >>
> >> On Jan 17, 2008 3:02 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> >>
> >>> On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
> >>>
> >>>> Hello,
> >>>>
> >>>> I purchased the book, read through it, but I have a thick skull.
> >>>> Perhaps I can get some advice here on two questions about converting
> >>>> formula expressions that look like "basic" syntax...
> >>>>
> >>>> IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
> >>>>     H-CAPRESTATE
> >>>> ELSE
> >>>>     IF REP_DTE < '2001-01-01' THEN
> >>>>         ACCTG_CNG + ACCTG_ERR_CRCT
> >>>>     END IF
> >>>> END IF
> >>>>
> >>>> Into a flat format that looks like Excel formula syntax...
> >>>>
> >>>> IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE <
> >>>> '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT)
> >>>>
> >>>> I tried writing a few grammar files, but all have had various runtime
> >>>> issues.
> >>>>
> >>>> Here are my questions...
> >>>>
> >>>> 1.  Is ANTLR the right tool for this job?  (I don't have much time.)
> >>>>
> >>> ANTLR can definitely do this. However, you shouldn't expect the work
> >>> to go quickly if this is your first ANTLR grammar. You'll be learning
> >>> lots of things along the way.
> >>>
> >>>
> >>>> 2.  If it is the right tool, is there already a grammar that will get me
> >>>> most of the way there?
> >>>>
> >>> I'm not aware of a particular existing grammar that is close to what
> >>> you want. Maybe someone else knows of one.
> >>>
> >>>
> >>>
> >>>> Thanks in advance for any advice.
> >>>>
> >>>> Regards,
> >>>> Frank Font
> >>>>
> >>> --
> >>> R. Mark Volkmann
> >>> Object Computing, Inc.
> >>>
> >>>
> >>
> >> --
> >> R. Mark Volkmann
> >> Object Computing, Inc.
> >>
> >>
> >
> >
> >
> >
>
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From asengine at gmail.com  Thu Jan 17 15:15:22 2008
From: asengine at gmail.com (Ashish)
Date: Thu, 17 Jan 2008 15:15:22 -0800
Subject: [antlr-interest] newbie question - mismatched input/token
Message-ID: <cc29a5e50801171515i656637b0rfb8256e36fa8282b@mail.gmail.com>

Hi,
I'm trying to come up with a custom select statement. However, for the
simple grammar and input I get a mismatched-token error - see details below.
Obviously I'm missing something basic here. Thanks in advance

-Ashish

//Input
SELECT a FROM b

//Error message:
recoverFromMismatchedToken
BR.recoverFromMismatchedToken
line 1:0 mismatched input 'SELECT' expecting FROM
//Select.g:
grammar Select;

prog : sstmt;

sstmt : select (from)?;

select : SELECT ID+ ;

from  : FROM ID+   ;

SELECT : 'select'|'SELECT';
FROM : 'from'|'FROM';
WHERE : 'where'|'WHERE';
ID :  ('a'..'z'|'A'..'Z')+;
INT :  ('0'..'9')+;
WS : (' '|'\t')+ {$channel=HIDDEN;};
NEWLINE : ('\r'|'\n')+ {$channel=HIDDEN;};
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080117/abe92896/attachment.html 

From r.mark.volkmann at gmail.com  Thu Jan 17 15:37:34 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Thu, 17 Jan 2008 17:37:34 -0600
Subject: [antlr-interest] newbie question - mismatched input/token
In-Reply-To: <cc29a5e50801171515i656637b0rfb8256e36fa8282b@mail.gmail.com>
References: <cc29a5e50801171515i656637b0rfb8256e36fa8282b@mail.gmail.com>
Message-ID: <f0fcc6820801171537v1ec778bauc208bfa462ef0f3f@mail.gmail.com>

On Jan 17, 2008 5:15 PM, Ashish <asengine at gmail.com> wrote:
> Hi,
> I'm trying to come up with a custom select statement. However, for the
> simple grammar and input I get a mismatched-token error - see details below.
> Obviously I'm missing something basic here. Thanks in advance

Try changing "select : SELECT ID+ ;" to "select : SELECT ID ;"
Maybe the + is making it pick up the FROM token.
Also remove the + from your from rule.
There is already a + in the ID rule to match multiple letters.

> -Ashish
>
> //Input
> SELECT a FROM b
>
> //Error message:
> recoverFromMismatchedToken
> BR.recoverFromMismatchedToken
> line 1:0 mismatched input 'SELECT' expecting FROM
>
> //Select.g:
> grammar Select;
>
> prog : sstmt;
>
> sstmt : select (from)?;
>
> select : SELECT ID+ ;
>
> from  : FROM ID+   ;
>
> SELECT : 'select'|'SELECT';
> FROM : 'from'|'FROM';
> WHERE : 'where'|'WHERE';
> ID :  ('a'..'z'|'A'..'Z')+;
> INT :  ('0'..'9')+;
> WS : (' '|'\t')+ {$channel=HIDDEN;};
> NEWLINE : ('\r'|'\n')+ {$channel=HIDDEN;};
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From jimi at temporal-wave.com  Thu Jan 17 20:55:40 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 17 Jan 2008 20:55:40 -0800
Subject: [antlr-interest] About C runtime question.
In-Reply-To: <C3B2593A.8A545%sunshine@public.kherson.ua>
Message-ID: <"L74AFD2273FE54f63B05CC50F80C2E91B.1200633302.scalix.temporal-wave.com*"@MHS>

Read the sources ;-) The 'objects' that are created a lot, such as 
tokens and strings, are not populated by initializing each method 
pointer individually. 

> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine at public.kherson.ua]
> Sent: Tuesday, January 15, 2008 2:36 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] About C runtime question.
> 
> Hi Jim,
> 
> 
> >From here:
> 
>     
http://www.antlr.org/wiki/display/ANTLR3/ANTLR3+Code+Generation+-+C
> 
> > As there is no such thing as an object reference in C, I chose to
> create a
> > number of typedef structs that reflect the calling interface chosen
> by Terence
> > in the Java version of the same. The initialization of a parser,
> lexer, input
> > stream or internal structure therefore consists of allocating the
> memory
> > required for an instance of the typedef struct that represents the
> interface,
> > initializing any counters, pointers and buffers etc, then populating
> a number
> > of pointers to functions that implement the equivalent of the 
methods
> in the
> > Java class.
> 
> Sounds like each time for each new object, is executed population of
> function pointers?
> 
> I think more effective prepare this once, and in the object structure
> keep
> only pointer to StructOfFuncsOfClassXXXX, exactly as C++ do.
> 
> No ?
> 
> P.S. I have not read sources yet
> 
> 
> --
> Best regards,
> 
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
> 
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
> 
> [I feel the need: the need for speed]
> 
> 



From antlr at mirality.co.nz  Fri Jan 18 00:17:41 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 18 Jan 2008 21:17:41 +1300
Subject: [antlr-interest] newbie question - mismatched input/token
In-Reply-To: <cc29a5e50801171515i656637b0rfb8256e36fa8282b@mail.gmail.co
 m>
References: <cc29a5e50801171515i656637b0rfb8256e36fa8282b@mail.gmail.com>
Message-ID: <20080118081812.0867711EB34@www.antlr.org>

At 12:15 18/01/2008, Ashish wrote:
>I'm trying to come up with a custom select statement. However, 
>for the
>simple grammar and input I get a mismatched-token error - see 
>details below.
[...]
>//Input
>SELECT a FROM b
>
>//Error message:
>recoverFromMismatchedToken
>BR.recoverFromMismatchedToken
>line 1:0 mismatched input 'SELECT' expecting FROM

The grammar all looks fine to me.  Are you sure you're choosing 
"prog" as your start rule?  (Also, generally speaking, your start 
rule should have EOF at the end to make it give an error if it 
can't match the entire input.)

>SELECT : 'select'|'SELECT';
>FROM : 'from'|'FROM';
>WHERE : 'where'|'WHERE';

Note that these are insufficient for true case insensitivity.  It 
won't match "Select" or "sELeCt", for example.


From zuper85 at hotmail.it  Fri Jan 18 00:57:57 2008
From: zuper85 at hotmail.it (Michele Bortolato)
Date: Fri, 18 Jan 2008 09:57:57 +0100
Subject: [antlr-interest] AST->XML
Message-ID: <BAY108-W13E6BFC6F0D7F1C25FAE23D6420@phx.gbl>


Hi 

Has antlr(works) a tool to convert ast to XML?

thanks
_________________________________________________________________
Scarica GRATIS le tue emoticon preferite!
http://intrattenimento.it.msn.com/emoticon/

From adam.rpconnelly at googlemail.com  Fri Jan 18 01:44:31 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Fri, 18 Jan 2008 09:44:31 +0000
Subject: [antlr-interest] Seeking advice - 2 questions using ANTLR (can
	translate using rewrite?)
In-Reply-To: <f0fcc6820801171502x6110ba11q60bf3b05545a5e71@mail.gmail.com>
References: <47827657.2030001@jpl.nasa.gov>
	<D2168763-E6B2-41DA-AD78-02AB4EED4511@cs.usfca.edu>
	<478FB4C0.8020209@room4me.com>
	<f0fcc6820801171302q7dbee127t68c3c554f6e1f4ff@mail.gmail.com>
	<f0fcc6820801171355o2a3980f5y8ec0d52112a807a0@mail.gmail.com>
	<478FD66B.6020707@room4me.com>
	<f0fcc6820801171502x6110ba11q60bf3b05545a5e71@mail.gmail.com>
Message-ID: <b9a39b060801180144t617a6e6bx482e91b74865f2e@mail.gmail.com>

I would tend to go along the template route because, apart from anything
else, it let's you provide multiple output targets (i.e. you could translate
into other syntaxes than just excel simply by creating a new template file
if you wanted).

So far I've only got good things to say about StringTemplate and template
rewriting.

Adam

On 17/01/2008, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
>
> On Jan 17, 2008 4:27 PM, Frank Font <mrfont at room4me.com> wrote:
> > Hi Mark,
> >
> > Thanks for the sample grammar.
> >
> > To keep things simple, do you think the entire translation can be done
> > via "rewrite=true" setting and then adding things like "->
> > template(....)" actions to the relevant rules?
>
> I don't think that's a good approach because I think there is too much
> difference between the input and output. I think the rewrite thing is
> best used when you're outputting most of the input as-is. Maybe others
> will have a different opinion.
>
> I have to admit I haven't used StringTemplate yet. I need to learn that
> still.
>
> > For example, I'm inclined to add this to the grammar you provided...
> >
> > ifStatement
> >         : 'IF' e1=condition 'THEN' e2=statement ('ELSE' e3=statement)?
> 'END IF'
> >         -> template(e1={$e1.text},e2={$e2.text}) " IF(<e1>,<e2>,<e3>) "
> >         ;
>
> Hmm ... that looks much nicer than my string concatenation!
>
> > I started going down the rewrite road with mixed success and I'm not
> > sure it is the right road.
> >
> > Regards,
> > Frank Font
> >
> > PS - Not familiar with the "com.ociweb.accounting" package.  Do I really
> > need that installed?
>
> That's just the Java package name I selected. The generated classes
> come out with
>
> package com.ociweb.accounting.
>
> You should change that to be a reasonable Java package name for your
> company.
>
> > Mark Volkmann wrote:
> > > Here's a start on your grammar.
> > >
> > > grammar Accounting;
> > >
> > > options {
> > >   output = template;
> > > }
> > >
> > > @lexer::header { package com.ociweb.accounting; }
> > > @parser::header { package com.ociweb.accounting; }
> > >
> > > start: ifStatement EOF;
> > >
> > > ifStatement
> > >   : 'IF' condition 'THEN' statement ('ELSE' statement)? 'END IF';
> > >
> > > comparison: expression RELATIONAL_OPERATOR expression;
> > >
> > > condition: comparison (LOGICAL_OPERATOR comparison)*;
> > >
> > > expression
> > >   : STRING_LITERAL
> > >   | value (SIGN value)*;
> > >
> > > statement: expression | ifStatement;
> > >
> > > value: NAME | NUMBER;
> > >
> > > LOGICAL_OPERATOR: 'AND' | 'OR';
> > >
> > > RELATIONAL_OPERATOR: '<' | '<=' | '=' | '>=' | '>';
> > >
> > > APOSTROPHE: '\'';
> > >
> > > NUMBER: INTEGER | FLOAT;
> > > fragment FLOAT: INTEGER '.' NATURAL_NUMBER;
> > > fragment INTEGER: SIGN? NATURAL_NUMBER;
> > > fragment NATURAL_NUMBER: '0' | '1'..'9' '0'..'9'*;
> > > SIGN: '+' | '-';
> > >
> > > NAME: LETTER (LETTER | NUMBER | '_')*;
> > >
> > > STRING_LITERAL: APOSTROPHE NONCONTROL_CHAR* APOSTROPHE;
> > >
> > > WHITESPACE: (NEWLINE | SPACE)+ { $channel = HIDDEN; };
> > >
> > > // Note that NONCONTROL_CHAR does not include the double-quote
> character.
> > > fragment NONCONTROL_CHAR: LETTER | DIGIT | SYMBOL | SPACE;
> > > fragment LETTER: LOWER | UPPER;
> > > fragment LOWER: 'a'..'z';
> > > fragment UPPER: 'A'..'Z';
> > > fragment DIGIT: '0'..'9';
> > > fragment NEWLINE: '\r'? '\n';
> > > fragment SPACE: ' ' | '\t';
> > >
> > > // Note that SYMBOL does not include the
> > > // apostrophe or double-quote characters.
> > > fragment SYMBOL: '!' | '#'..'&' | '('..'/' | ':'..'@' | '['..'`' |
> '{'..'~';
> > >
> > > It parses your example input except for I changed "H-CAPRESTATE" to
> > > "H_CAPRESTATE" to simply things. This way I can use "-" for
> > > subtraction. I'm sure there's a way to work this out so you can also
> > > use "-" in names.
> > >
> > > The grammar above doesn't output anything. It just verifies that input
> conforms.
> > >
> > > Email me privately if you want the Java code I wrote that uses the
> > > generated classes and my Ant build file.
> > >
> > > On Jan 17, 2008 3:02 PM, Mark Volkmann <r.mark.volkmann at gmail.com>
> wrote:
> > >
> > >> On Jan 17, 2008 2:04 PM, Frank Font <mrfont at room4me.com> wrote:
> > >>
> > >>> Hello,
> > >>>
> > >>> I purchased the book, read through it, but I have a thick skull.
> > >>> Perhaps I can get some advice here on two questions about converting
> > >>> formula expressions that look like "basic" syntax...
> > >>>
> > >>> IF REP_DTE > '2001-01-01' AND ATOTAL>100 THEN
> > >>>     H-CAPRESTATE
> > >>> ELSE
> > >>>     IF REP_DTE < '2001-01-01' THEN
> > >>>         ACCTG_CNG + ACCTG_ERR_CRCT
> > >>>     END IF
> > >>> END IF
> > >>>
> > >>> Into a flat format that looks like Excel formula syntax...
> > >>>
> > >>> IF( AND(REP_DTE > '2001-01-01',ATOTAL>100), H-CAPRESTATE, IF(REP_DTE
> <
> > >>> '2001-01-01', ACCTG_CNG + ACCTG_ERR_CRCT))
> > >>>
> > >>> I tried writing a few grammar files, but all have had various
> runtime
> > >>> issues.
> > >>>
> > >>> Here are my questions...
> > >>>
> > >>> 1.  Is ANTLR the right tool for this job?  (I don't have much time.)
> > >>>
> > >> ANTLR can definitely do this. However, you shouldn't expect the work
> > >> to go quickly if this is your first ANTLR grammar. You'll be learning
> > >> lots of things along the way.
> > >>
> > >>
> > >>> 2.  If it is the right tool, is there already a grammar that will
> get me
> > >>> most of the way there?
> > >>>
> > >> I'm not aware of a particular existing grammar that is close to what
> > >> you want. Maybe someone else knows of one.
> > >>
> > >>
> > >>
> > >>> Thanks in advance for any advice.
> > >>>
> > >>> Regards,
> > >>> Frank Font
> > >>>
> > >> --
> > >> R. Mark Volkmann
> > >> Object Computing, Inc.
> > >>
> > >>
> > >
> > >
> > >
> > >
> >
> >
>
>
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/6671a3fa/attachment.html 

From vbar at comp.cz  Fri Jan 18 01:56:25 2008
From: vbar at comp.cz (Vaclav Barta)
Date: Fri, 18 Jan 2008 10:56:25 +0100
Subject: [antlr-interest] AST->XML
In-Reply-To: <BAY108-W13E6BFC6F0D7F1C25FAE23D6420@phx.gbl>
References: <BAY108-W13E6BFC6F0D7F1C25FAE23D6420@phx.gbl>
Message-ID: <479077C9.9010807@comp.cz>

Michele Bortolato wrote:
 > Has antlr(works) a tool to convert ast to XML?
Not as far as I'm aware. The last suggestion for your problem I've seen 
on this list was to use some package converting object trees to XML 
(whose choice will obviously depend on your language and other 
preferences) and use that.

	Bye
		Vasek
--
http://www.mangrove.cz/
Open Source integration


From alexander at gaengel.de  Fri Jan 18 01:59:31 2008
From: alexander at gaengel.de (=?UTF-8?B?QWxleGFuZGVyIEfDpG5nZWw=?=)
Date: Fri, 18 Jan 2008 10:59:31 +0100
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <"L4EC05BB791D14ef7A9B10EC3F72A640D.1199931955.scalix.temporal-wave.com*"@MHS>
References: <"L4EC05BB791D14ef7A9B10EC3F72A640D.1199931955.scalix.temporal-wave.com*"@MHS>
Message-ID: <47907883.8060806@gaengel.de>

I searched the Archive but till now I did not find anything, but I will 
keep looking.

I now also tried with actual code an not with AntlrWorks debugger an now 
I get the message:
line 1:2 required (...)+ loop did not match anything at character '.'
when I try to  parse 0..9

the 0.. is still missing in the output (I now create an Ast to test and 
it has only the node 9)

so I think AntlrWorks should at least also give the errormessage.

Alexander

Jim Idle schrieb:
> The interpreter won't be able to deal with your specification I think, 
> whereas the real generated code does. I gave out code for int vs float 
> vs range some time back if you check the archives - that should do what 
> you want.
>
> Jim
>
>   
>> -----Original Message-----
>> From: shmuel siegel [mailto:antlr at shmuelhome.mine.nu]
>> Sent: Wednesday, January 09, 2008 6:14 PM
>> To: Antlr Interest
>> Subject: Re: [antlr-interest] REAL or int or Range
>>
>> Alexander G?ngel wrote:
>>     
>>> What I think is odd is that it works for F?rat K???k.
>>>
>>>       
>> Maybe not so strange. In the debugger, I get the same as you but in 
>>     
> the
>   
>> interpreter I get the attached png.
>>
>>
>>
>> No virus found in this incoming message.
>> Checked by AVG Free Edition.
>> Version: 7.5.516 / Virus Database: 269.19.0/1216 - Release Date: 
>>     
> 1/9/2008
>   
>> 10:16 AM
>>
>>
>>     
>
>
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/50727469/attachment.html 

From r.mark.volkmann at gmail.com  Fri Jan 18 06:39:44 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 18 Jan 2008 08:39:44 -0600
Subject: [antlr-interest] StringTemplate - getting started
Message-ID: <f0fcc6820801180639k1c989c96u1c14868773727a76@mail.gmail.com>

I'm giving StringTemplate a go. However, I just get "null" for the
output. I wonder if the problem is that my start rule doesn't
explicitly specify any output. For example, I have something like
this.

statement: foo | help;

help: HELP -> help();

---

"help" is a template that I load from a .stg as shown in section 9.4
of the book.
It doesn't take an parameters.
I know it is finding this template because if I rename it in the .stg,
I get an error saying it can't find the template.
Here's the template. Note that my tree parser grammar name is "MathTree".

group MathTree;
help() :== "This is help!"

My Java code creates a StringTemplateGroup, passes it to
treeParser.setTemplateLib.
The code that attempts to output the template looks like this.

MathTree.statement_return r = treeParser.statement();
System.out.println("r = " + r); // This outputs "null".
System.out.println(r.getTemplate().toString()); // and of course I get
a NullPointerException here.

Any idea why I get back null from treeParser.statement()?

-- 
R. Mark Volkmann
Object Computing, Inc.

From SWatt at infobal.com  Fri Jan 18 06:47:55 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Fri, 18 Jan 2008 09:47:55 -0500
Subject: [antlr-interest] AST->XML
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DAD9F@EXSVR1>

I wrote an odd hack solution to this for the C runtime, which I can send,
but it does depend on a nasty test to see which tokens are AST tokens and
which aren't, and this was not immediately obviously testable in the
generated files. 

However, I didn't convert the AST from its textual representation, just
wrote it directly. I did this because I was getting in a muddle with the
Lisp-style AST, where it was not immediately clear when a token was a token
and when it was text, i.e., parsing a macro "MACRO" could get confused in my
ASTs with an empty MACRO token type with no body. Yes, I know this was all
my bad coding, and could easily have been avoided, but switching to XML gave
me *much* faster parsing of the ASTs, and as I don't need to tree-walk but
to search for grammar patterns, XPath on the ASTs has worked like a charm
for me, and saved me a lot of tedious work. 

All the best
Stuart

-----Original Message-----
From: Vaclav Barta [mailto:vbar at comp.cz]
Sent: Friday, January 18, 2008 4:56 AM
To: Michele Bortolato
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] AST->XML


Michele Bortolato wrote:
 > Has antlr(works) a tool to convert ast to XML?
Not as far as I'm aware. The last suggestion for your problem I've seen 
on this list was to use some package converting object trees to XML 
(whose choice will obviously depend on your language and other 
preferences) and use that.

	Bye
		Vasek
--
http://www.mangrove.cz/
Open Source integration

From adam.rpconnelly at googlemail.com  Fri Jan 18 07:08:51 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Fri, 18 Jan 2008 15:08:51 +0000
Subject: [antlr-interest] StringTemplate - getting started
In-Reply-To: <f0fcc6820801180639k1c989c96u1c14868773727a76@mail.gmail.com>
References: <f0fcc6820801180639k1c989c96u1c14868773727a76@mail.gmail.com>
Message-ID: <b9a39b060801180708vefd8710q327b487ef60da7b8@mail.gmail.com>

I think you have to explicitly pass the template up.  Try:

statement: foo | (help { $statement.st = $help.st} );

help: HELP -> help();

or maybe you can do:

statement: st=foo | st=help
                 { $statement.st=$st; };

help: HELP -> help();

I'm fairly certain I had the same problem in the past.

Cheers,

Adam

On 18/01/2008, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
>
> I'm giving StringTemplate a go. However, I just get "null" for the
> output. I wonder if the problem is that my start rule doesn't
> explicitly specify any output. For example, I have something like
> this.
>
> statement: foo | help;
>
> help: HELP -> help();
>
> ---
>
> "help" is a template that I load from a .stg as shown in section 9.4
> of the book.
> It doesn't take an parameters.
> I know it is finding this template because if I rename it in the .stg,
> I get an error saying it can't find the template.
> Here's the template. Note that my tree parser grammar name is "MathTree".
>
> group MathTree;
> help() :== "This is help!"
>
> My Java code creates a StringTemplateGroup, passes it to
> treeParser.setTemplateLib.
> The code that attempts to output the template looks like this.
>
> MathTree.statement_return r = treeParser.statement();
> System.out.println("r = " + r); // This outputs "null".
> System.out.println(r.getTemplate().toString()); // and of course I get
> a NullPointerException here.
>
> Any idea why I get back null from treeParser.statement()?
>
> --
> R. Mark Volkmann
> Object Computing, Inc.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/055f1e6f/attachment.html 

From jimi at temporal-wave.com  Fri Jan 18 07:29:54 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 18 Jan 2008 07:29:54 -0800
Subject: [antlr-interest] newbie question - mismatched input/token
In-Reply-To: <20080118081812.0867711EB34@www.antlr.org>
Message-ID: <"LA168EFA27F86485bAF07939CC19A3642.1200671377.scalix.temporal-wave.com*"@MHS>

For case insensitivity, see the wiki, and:

http://www.antlr.org/pipermail/antlr-interest/2007-January/019008.html

Jim

> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> Sent: Friday, January 18, 2008 12:18 AM
> To: Ashish; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] newbie question - mismatched input/token
> 
> At 12:15 18/01/2008, Ashish wrote:
> >I'm trying to come up with a custom select statement. However,
> >for the
> >simple grammar and input I get a mismatched-token error - see
> >details below.
> [...]
> >//Input
> >SELECT a FROM b
> >
> >//Error message:
> >recoverFromMismatchedToken
> >BR.recoverFromMismatchedToken
> >line 1:0 mismatched input 'SELECT' expecting FROM
> 
> The grammar all looks fine to me.  Are you sure you're choosing
> "prog" as your start rule?  (Also, generally speaking, your start
> rule should have EOF at the end to make it give an error if it
> can't match the entire input.)
> 
> >SELECT : 'select'|'SELECT';
> >FROM : 'from'|'FROM';
> >WHERE : 'where'|'WHERE';
> 
> Note that these are insufficient for true case insensitivity.  It
> won't match "Select" or "sELeCt", for example.
> 



From jimi at temporal-wave.com  Fri Jan 18 07:37:16 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 18 Jan 2008 07:37:16 -0800
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <47907883.8060806@gaengel.de>
Message-ID: <"LA93CAD39A9E14afdB439266F76EF79BF.1200671818.scalix.temporal-wave.com*"@MHS>

This should help (here it uses parser rules, but you could use the same
predicate stuff to match range in the lexer too:

?

// Return decimal numeric as one token but 888..888 as NUMBER RANGE
NUMBER

// Also shows that '.' can still be recognized on its own, just for
kicks.

// Try the input 999.88 . . 666..667

//

grammar harry;

?

start 

???? :??? (number_range)+

???? ;

???? 

number_range

???? : NUMBER ( RANGE NUMBER)?

???? | DOT

???? ;

???? 

NUMBER

???? : ('0'..'9')+

?????????? (

??????????????? ?('.' '0'..'9')=> ('.' ('0'..'9')+)

??????????????? |// Just an integer

?????????? )

???? ;

?

RANGE

???? :??? '..'

???? ;

???? 

DOT

???? : '.'

???? ;

???? 

OTHER

???? : . {$channel = HIDDEN; }

???? ;

?

Jim 

?

From: Alexander G?ngel [mailto:alexander at gaengel.de] 
Sent: Friday, January 18, 2008 2:00 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] REAL or int or Range

?

I searched the Archive but till now I did not find anything, but I will
keep looking.

I now also tried with actual code an not with AntlrWorks debugger an now
I get the message:
line 1:2 required (...)+ loop did not match anything at character '.' 
when I try to? parse 0..9

the 0.. is still missing in the output (I now create an Ast to test and
it has only the node 9)

so I think AntlrWorks should at least also give the errormessage.

Alexander

Jim Idle schrieb: 

The interpreter won't be able to deal with your specification I think, 
whereas the real generated code does. I gave out code for int vs float 
vs range some time back if you check the archives - that should do what 
you want.
?
Jim
?
? 

   -----Original Message-----
   From: shmuel siegel [mailto:antlr at shmuelhome.mine.nu]
   Sent: Wednesday, January 09, 2008 6:14 PM
   To: Antlr Interest
   Subject: Re: [antlr-interest] REAL or int or Range
   ?
   Alexander G?ngel wrote:
   ??? 

      What I think is odd is that it works for F?rat K???k.
      ?
      ????? 

   Maybe not so strange. In the debugger, I get the same as you but in 
   ????

the
? 

   interpreter I get the attached png.
   ?
   ?
   ?
   No virus found in this incoming message.
   Checked by AVG Free Edition.
   Version: 7.5.516 / Virus Database: 269.19.0/1216 - Release Date: 
   ????

1/9/2008
? 

   10:16 AM
   ?
   ?
   ??? 

?
?
? 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/b9fc26ae/attachment.html 

From asengine at gmail.com  Fri Jan 18 09:48:17 2008
From: asengine at gmail.com (Ashish)
Date: Fri, 18 Jan 2008 09:48:17 -0800
Subject: [antlr-interest] newbie question - mismatched input/token
In-Reply-To: <479060c4.1be7300a.69ef.44ffSMTPIN_ADDED@mx.google.com>
References: <cc29a5e50801171515i656637b0rfb8256e36fa8282b@mail.gmail.com>
	<479060c4.1be7300a.69ef.44ffSMTPIN_ADDED@mx.google.com>
Message-ID: <cc29a5e50801180948hdaaa568k7bbfcf3401ebaace@mail.gmail.com>

I'm seeing this when running the grammar in antlrworks 1.1.5 on vista.
The same grammar works fine when using antlr 3.0.1 via the
command line( java org.antlrTool ...; javac*.java; java ...).

Anyone else seen this behaviour ?

Thanks
Ashish



On Jan 18, 2008 12:17 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:

> At 12:15 18/01/2008, Ashish wrote:
> >I'm trying to come up with a custom select statement. However,
> >for the
> >simple grammar and input I get a mismatched-token error - see
> >details below.
> [...]
> >//Input
> >SELECT a FROM b
> >
> >//Error message:
> >recoverFromMismatchedToken
> >BR.recoverFromMismatchedToken
> >line 1:0 mismatched input 'SELECT' expecting FROM
>
> The grammar all looks fine to me.  Are you sure you're choosing
> "prog" as your start rule?  (Also, generally speaking, your start
> rule should have EOF at the end to make it give an error if it
> can't match the entire input.)
>
> >SELECT : 'select'|'SELECT';
> >FROM : 'from'|'FROM';
> >WHERE : 'where'|'WHERE';
>
> Note that these are insufficient for true case insensitivity.  It
> won't match "Select" or "sELeCt", for example.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/348b1c63/attachment-0001.html 

From Waverly.Edwards at genesys.com  Fri Jan 18 10:22:11 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Fri, 18 Jan 2008 13:22:11 -0500
Subject: [antlr-interest] writing a simple tool
In-Reply-To: <478DE8F7.8020408@gmx.de>
References: <FF993752CB890B4EB591BE5450C37BF1E40D31@navamane001.ad.internal.corp>
	<478DE8F7.8020408@gmx.de>
Message-ID: <FF993752CB890B4EB591BE5450C37BF178D8AA@navamane001.ad.internal.corp>


Thank you Johannes.  With your helpd and a LOT of effort, I was able to
get out of the hole I had dug.

I'm hoping to get further assistance.  I am getting the following errors
when testing my grammar


line 1:16 no viable alternative at input ';'
line 2:8 no viable alternative at input '='
line 2:14 no viable alternative at input '|'
line 2:18 no viable alternative at input ']'
line 2:32 no viable alternative at input '}'
line 3:5 no viable alternative at input '='
line 3:31 no viable alternative at input '}'
line 3:47 no viable alternative at input ']'


using this at my input source

digit = "0".."9";
integer = ["+"|"-"] digit {digit};
real = integer "." digit {digit} [ "E" integer ];


I'm REALLY hoping someone can see what I'm doing wrong.
I've been trying for a few days to get this correct without success.
This is the closest I've gotten so far.

Thank you,


W.


Oh, I found a simplified text that explains first and follow 
sets simply enough that I'm *starting* to understand how to
Compute them.






grammar EBNF_V8;

options {
	k = 1; // force myself to keep grammar LL(1) 
	}

/*
REFERENCE

www.cs.bris.ac.uk/Teaching/Resources/COMS30122/lectures/02_Scanning.p.pd
f 

Grammar symbols
Here is a 'standard' set of symbols for this unit The first four are
BNF, the rest EBNF

Symol or Expr        ,// MEANING

::                    // is (is defined as)
|                     // OR
&                     // AND
;                     // end of definition 
?, '[' expression ']' // optional
*, '{' expression '}' // zero or more times
+                     // one or more times
'(' expression ')'    // bracketing (subrule)
 
NOT GOING TO BE IMPLEMENTED ( & )
*/


//fragment
//CHAR_LITERAL      :  '\'' (~(ESC_CHAR))* '\'' ; 
CHAR_LITERAL      :  '\'' (~('\r\n'|'\r'|'\n'))* '\'' ; 

//fragment
STR_LITERAL       : '"' ((~ESC_CHAR))* '"' ; 
//STR_LITERAL       :  '"' (~('\r\n'|'\r'|'\n'))* '"' ; 

fragment
DIGIT             :  '0'..'9' ;

fragment
LETTER            :  'a'..'z' | 'A'..'Z' ;

fragment
HEX_DIGIT         :  'A'..'Z'|'a'..'z'|'0'..'9';


fragment
ESC_CHAR          :   ('\b' | '\f' | '\n' | '\r' |  '\t' | '\'' | '\"' |
'\\');
//                  |  '\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;


BECOMES           :  '=' | '::' | ':' ;
RANGE             :  '..';
ID                : ( LETTER | '_' ) ( LETTER | DIGIT | '_' )* ;
//WS	          : (' ' | '\t' | '\n' | '\r' )+  { skip(); };
WS	          : ( ' ' | '\t' )+ { $channel=HIDDEN; };
NL	          : ( '\n' | '\r') { $channel=HIDDEN; };




start_ebnf        : rule* ;
rule              : ID BECOMES expression ';' ;
expression        : and_expression ( '|' expression ) ;
and_expression    : expression_value (  and_expression ) ;
expression_value  : ID qualifier?
                  | terminal qualifier? 
                  | RANGE                           // RANGE ("0".."9" |
"A".."Z")
                  | '(' expression ')' qualifier?             
                  | '{' expression '}'              // ZERO OR MORE
BLOCK
                  | '[' expression ']'              // OPTIONAL BLOCK
                  ;             
             
terminal          : STR_LITERAL | CHAR_LITERAL ;
qualifier         : '*' | '+' | '?';               // ZERO OR MORE, ONE
OR MORE, OPTIONAL




-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Johannes Luber
Sent: Wednesday, January 16, 2008 6:23 AM
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] writing a simple tool

Edwards, Waverly schrieb:
> I am currently attempting to write what I hope is a simple tool to 
> validate an ebnf grammar and export the first and follow set.
> Unfortunately, no amount of reading has enabled perform the 'easy' (to
> others) task of generating this first and follow set.  I have read 
> multiple books and texts on the subject.  So I've embarked on a 
> mission to start by first validating an ebnf grammar and moving 
> forward from there.
> 
> My first stumbling block came early in writing an ebnf grammar.  In my

> effort to separate my parser rules so I can apply some type of action 
> I have created recursive definitions.  I know what they are but I've 
> been unable figure out how to dig myself out of this hole.
> 
> Any and all help will be greatly appreciated.

I also happen to have an unpublished tutorial about the very kind of
problem you have (before anyone asks - no, I don't have any more lurking
on the harddrive ;). I've attached it to this email. I'd also appreciate
any of feedback here.

Johannes

From r.mark.volkmann at gmail.com  Fri Jan 18 12:04:28 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 18 Jan 2008 14:04:28 -0600
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars -
	pleading?
Message-ID: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>

Is it okay to plead for help? If so, I'm pleading! ;-)

I have a grammar that is split into three grammar files ... lexer,
parser and tree parser. I really want to use the ANTLRWorks debugger
to debug AST creation in the parser grammar, but I can only get that
to work if I combine the grammar files for the lexer and parser into
one. Either ANTLRWorks can do what I want or there's a trick to set
this up.

Has anybody done this? Is Jean Bovet out there?

-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Fri Jan 18 12:29:33 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Jan 2008 12:29:33 -0800
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
Message-ID: <14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>

run -debug on the parser grammar from command line. compile.  start  
up.  run AW's "debug remote..." and joy shall be yours!

Ter
On Jan 18, 2008, at 12:04 PM, Mark Volkmann wrote:

> Is it okay to plead for help? If so, I'm pleading! ;-)
>
> I have a grammar that is split into three grammar files ... lexer,
> parser and tree parser. I really want to use the ANTLRWorks debugger
> to debug AST creation in the parser grammar, but I can only get that
> to work if I combine the grammar files for the lexer and parser into
> one. Either ANTLRWorks can do what I want or there's a trick to set
> this up.
>
> Has anybody done this? Is Jean Bovet out there?
>
> -- 
> R. Mark Volkmann
> Object Computing, Inc.


From r.mark.volkmann at gmail.com  Fri Jan 18 12:55:55 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 18 Jan 2008 14:55:55 -0600
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
	<14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
Message-ID: <f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>

On Jan 18, 2008 2:29 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> run -debug on the parser grammar from command line.

Okay, I added the "-debug" option when running org.antlr.Tool on my
grammar files.

> compile.  start

The code generated with -debug compiles fine, but when I run it I get

Exception in thread "main" java.lang.NullPointerException at
org.antlr.runtime.debug.DebugTokenStream.<init>(DebugTokenStream.java:45)

Do I have to do something different in my code that uses the generated classes?

If I generate code without -debug and run it, everything is fine.

> up.  run AW's "debug remote..." and joy shall be yours!

I found the wiki page
http://www.antlr.org/wiki/pages/viewpage.action?pageId=4554898 that
documents using remote debugging. It says "the simple driver class to
exercise the parser is slightly different", but I don't see anything
special going on in that code.

> Ter
>
> On Jan 18, 2008, at 12:04 PM, Mark Volkmann wrote:
>
> > Is it okay to plead for help? If so, I'm pleading! ;-)
> >
> > I have a grammar that is split into three grammar files ... lexer,
> > parser and tree parser. I really want to use the ANTLRWorks debugger
> > to debug AST creation in the parser grammar, but I can only get that
> > to work if I combine the grammar files for the lexer and parser into
> > one. Either ANTLRWorks can do what I want or there's a trick to set
> > this up.
> >
> > Has anybody done this? Is Jean Bovet out there?
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
>
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Fri Jan 18 13:18:44 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Jan 2008 13:18:44 -0800
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
	<14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
	<f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>
Message-ID: <4BAE34A1-2825-4EE3-9B88-4D4880A8FD18@cs.usfca.edu>


On Jan 18, 2008, at 12:55 PM, Mark Volkmann wrote:

> On Jan 18, 2008 2:29 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>> run -debug on the parser grammar from command line.
>
> Okay, I added the "-debug" option when running org.antlr.Tool on my
> grammar files.

  only run it on the one grammar you want to debug.

>> compile.  start
>
> The code generated with -debug compiles fine, but when I run it I get
>
> Exception in thread "main" java.lang.NullPointerException at
> org
> .antlr.runtime.debug.DebugTokenStream.<init>(DebugTokenStream.java:45)
>
>
> Do I have to do something different in my code that uses the  
> generated classes?

Hm.... This doesn't happen for me.  Try again only using -debug on the  
parser grammar.

Ter

From r.mark.volkmann at gmail.com  Fri Jan 18 13:30:26 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 18 Jan 2008 15:30:26 -0600
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <4BAE34A1-2825-4EE3-9B88-4D4880A8FD18@cs.usfca.edu>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
	<14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
	<f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>
	<4BAE34A1-2825-4EE3-9B88-4D4880A8FD18@cs.usfca.edu>
Message-ID: <f0fcc6820801181330y2d88509as970f4978a432bbc7@mail.gmail.com>

I figured out the issue. In my Java code that uses the generated
classes I was creating my parser and tree parser objects by passing
null to the constructor and then later calling setTokenStream on the
parser and setTreeNodeStream on the tree parser. You can't do that
when you compile with debug because the generated constructor for the
parser class will do this.

setTokenStream(new DebugTokenStream(input,proxy));

That means null is passed to the DebugTokenStream constructor which is
why I was getting the NullPointerException.

I can work around this for now by not creating my parser and tree
parser objects until I know what stream I want them to use.

I've got it working now. Thanks!

On Jan 18, 2008 3:18 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On Jan 18, 2008, at 12:55 PM, Mark Volkmann wrote:
>
> > On Jan 18, 2008 2:29 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> >> run -debug on the parser grammar from command line.
> >
> > Okay, I added the "-debug" option when running org.antlr.Tool on my
> > grammar files.
>
>   only run it on the one grammar you want to debug.
>
> >> compile.  start
> >
> > The code generated with -debug compiles fine, but when I run it I get
> >
> > Exception in thread "main" java.lang.NullPointerException at
> > org
> > .antlr.runtime.debug.DebugTokenStream.<init>(DebugTokenStream.java:45)
> >
> >
> > Do I have to do something different in my code that uses the
> > generated classes?
>
> Hm.... This doesn't happen for me.  Try again only using -debug on the
> parser grammar.
>
> Ter
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From asengine at gmail.com  Fri Jan 18 13:45:34 2008
From: asengine at gmail.com (Ashish)
Date: Fri, 18 Jan 2008 13:45:34 -0800
Subject: [antlr-interest] newbie question - mismatched input/token
In-Reply-To: <cc29a5e50801180948hdaaa568k7bbfcf3401ebaace@mail.gmail.com>
References: <cc29a5e50801171515i656637b0rfb8256e36fa8282b@mail.gmail.com>
	<479060c4.1be7300a.69ef.44ffSMTPIN_ADDED@mx.google.com>
	<cc29a5e50801180948hdaaa568k7bbfcf3401ebaace@mail.gmail.com>
Message-ID: <cc29a5e50801181345o69474e4ct43056746528f5f31@mail.gmail.com>

I think this is a case of user error. The start-rule in the debugger window
was probably the from-rule.

-Ashish

On Jan 18, 2008 9:48 AM, Ashish <asengine at gmail.com> wrote:

> I'm seeing this when running the grammar in antlrworks 1.1.5 on vista.
> The same grammar works fine when using antlr 3.0.1 via the
> command line( java org.antlrTool ...; javac*.java; java ...).
>
> Anyone else seen this behaviour ?
>
> Thanks
> Ashish
>
>
>
> On Jan 18, 2008 12:17 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:
>
> > At 12:15 18/01/2008, Ashish wrote:
> > >I'm trying to come up with a custom select statement. However,
> > >for the
> > >simple grammar and input I get a mismatched-token error - see
> > >details below.
> > [...]
> > >//Input
> > >SELECT a FROM b
> > >
> > >//Error message:
> > >recoverFromMismatchedToken
> > >BR.recoverFromMismatchedToken
> > >line 1:0 mismatched input 'SELECT' expecting FROM
> >
> > The grammar all looks fine to me.  Are you sure you're choosing
> > "prog" as your start rule?  (Also, generally speaking, your start
> > rule should have EOF at the end to make it give an error if it
> > can't match the entire input.)
> >
> > >SELECT : 'select'|'SELECT';
> > >FROM : 'from'|'FROM';
> > >WHERE : 'where'|'WHERE';
> >
> > Note that these are insufficient for true case insensitivity.  It
> > won't match "Select" or "sELeCt", for example.
> >
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/fbe0997a/attachment.html 

From r.mark.volkmann at gmail.com  Fri Jan 18 13:53:37 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 18 Jan 2008 15:53:37 -0600
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <f0fcc6820801181330y2d88509as970f4978a432bbc7@mail.gmail.com>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
	<14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
	<f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>
	<4BAE34A1-2825-4EE3-9B88-4D4880A8FD18@cs.usfca.edu>
	<f0fcc6820801181330y2d88509as970f4978a432bbc7@mail.gmail.com>
Message-ID: <f0fcc6820801181353j6b3c1d28s1d578f40ad33d920@mail.gmail.com>

The big lesson learned in this for me is that
if my parser grammar builds an AST
and the lexer rules are combined with it in a single file
then I can debug the AST generation in ANTLRWorks
without writing any Java code

but ...

if my parser and lexer rules are in separate files
then I have to write Java code and run it in order to use the
ANTLRWorks debugger.

Correct?

On Jan 18, 2008 3:30 PM, Mark Volkmann <r.mark.volkmann at gmail.com> wrote:
> I figured out the issue. In my Java code that uses the generated
> classes I was creating my parser and tree parser objects by passing
> null to the constructor and then later calling setTokenStream on the
> parser and setTreeNodeStream on the tree parser. You can't do that
> when you compile with debug because the generated constructor for the
> parser class will do this.
>
> setTokenStream(new DebugTokenStream(input,proxy));
>
> That means null is passed to the DebugTokenStream constructor which is
> why I was getting the NullPointerException.
>
> I can work around this for now by not creating my parser and tree
> parser objects until I know what stream I want them to use.
>
> I've got it working now. Thanks!
>
>
> On Jan 18, 2008 3:18 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> >
> > On Jan 18, 2008, at 12:55 PM, Mark Volkmann wrote:
> >
> > > On Jan 18, 2008 2:29 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
> > >> run -debug on the parser grammar from command line.
> > >
> > > Okay, I added the "-debug" option when running org.antlr.Tool on my
> > > grammar files.
> >
> >   only run it on the one grammar you want to debug.
> >
> > >> compile.  start
> > >
> > > The code generated with -debug compiles fine, but when I run it I get
> > >
> > > Exception in thread "main" java.lang.NullPointerException at
> > > org
> > > .antlr.runtime.debug.DebugTokenStream.<init>(DebugTokenStream.java:45)
> > >
> > >
> > > Do I have to do something different in my code that uses the
> > > generated classes?
> >
> > Hm.... This doesn't happen for me.  Try again only using -debug on the
> > parser grammar.
> >
> > Ter
> >
>
>
>
> --
>
> R. Mark Volkmann
> Object Computing, Inc.
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Fri Jan 18 14:14:14 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Jan 2008 14:14:14 -0800
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <f0fcc6820801181353j6b3c1d28s1d578f40ad33d920@mail.gmail.com>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
	<14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
	<f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>
	<4BAE34A1-2825-4EE3-9B88-4D4880A8FD18@cs.usfca.edu>
	<f0fcc6820801181330y2d88509as970f4978a432bbc7@mail.gmail.com>
	<f0fcc6820801181353j6b3c1d28s1d578f40ad33d920@mail.gmail.com>
Message-ID: <5A7B2E10-22B8-430D-8546-9C326B0299E9@cs.usfca.edu>


On Jan 18, 2008, at 1:53 PM, Mark Volkmann wrote:

> The big lesson learned in this for me is that
> if my parser grammar builds an AST
> and the lexer rules are combined with it in a single file
> then I can debug the AST generation in ANTLRWorks
> without writing any Java code
>
> but ...
>
> if my parser and lexer rules are in separate files
> then I have to write Java code and run it in order to use the
> ANTLRWorks debugger.
>
> Correct?

or copy the __Test__.java file from your AW dir and use that :)

Ter

From r.mark.volkmann at gmail.com  Fri Jan 18 14:26:38 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 18 Jan 2008 16:26:38 -0600
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <5A7B2E10-22B8-430D-8546-9C326B0299E9@cs.usfca.edu>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
	<14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
	<f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>
	<4BAE34A1-2825-4EE3-9B88-4D4880A8FD18@cs.usfca.edu>
	<f0fcc6820801181330y2d88509as970f4978a432bbc7@mail.gmail.com>
	<f0fcc6820801181353j6b3c1d28s1d578f40ad33d920@mail.gmail.com>
	<5A7B2E10-22B8-430D-8546-9C326B0299E9@cs.usfca.edu>
Message-ID: <f0fcc6820801181426r5c1b1c94nc5d530d2a9150d00@mail.gmail.com>

On Jan 18, 2008 4:14 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> On Jan 18, 2008, at 1:53 PM, Mark Volkmann wrote:
>
> > The big lesson learned in this for me is that
> > if my parser grammar builds an AST
> > and the lexer rules are combined with it in a single file
> > then I can debug the AST generation in ANTLRWorks
> > without writing any Java code
> >
> > but ...
> >
> > if my parser and lexer rules are in separate files
> > then I have to write Java code and run it in order to use the
> > ANTLRWorks debugger.
> >
> > Correct?
>
> or copy the __Test__.java file from your AW dir and use that :)

What creates that source file ... or is that something that is
generated from my grammar by ANTLRWorks?

BTW, I added a wiki page titled "When do I need to use remote
debugging?" at http://www.antlr.org/wiki/pages/viewpage.action?pageId=5832732.
Don't let me say anything that is wrong. ;-)

-- 
R. Mark Volkmann
Object Computing, Inc.

From devon.rueckner at temboo.com  Fri Jan 18 15:09:23 2008
From: devon.rueckner at temboo.com (Devon)
Date: Fri, 18 Jan 2008 18:09:23 -0500
Subject: [antlr-interest] initializing a new node using a parser rule match
Message-ID: <19245fa20801181509u70cb3ceye32c8422217435dc@mail.gmail.com>

Hi -

NB:  My target is Python.

I'm having difficulty creating an imaginary node and initializing it
(with line/char number in particular) using information from a matched
rule.

In our expression language, two tokens next to each other (ignoring
whitespace) is an implicit concatenation (which we represent as a
FUNCTION type node with the text "concat").  I therefore need to
create an imaginary FUNCTION node.

My intuition was to do something like this:

concatExpr
    :   (addExpr -> addExpr)
        (a=addExpr -> ^(FUNCTION[$a, 'concat'] $concatExpr $a))*
    ;

However, this throws the error "missing attribute access on rule scope".
The following creates the expect tree, except FUNCTION contains
incorrect line/character information:

concatExpr
    :   (addExpr -> addExpr)
        (addExpr -> ^({self.adaptor.createFromType(FUNCTION,"concat")}
$concatExpr addExpr))*
    ;

Any ideas how to get the right info into the node?  In this case, the
best info to insert would actually be the character and line numbers
immediately following the first addExpr (since there could be a lot of
or no whitespace).

Thanks for your help
~ Devon

From parrt at cs.usfca.edu  Fri Jan 18 15:48:26 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Jan 2008 15:48:26 -0800
Subject: [antlr-interest] ANTLRWorks and separate lexer/parser grammars
	- pleading?
In-Reply-To: <f0fcc6820801181426r5c1b1c94nc5d530d2a9150d00@mail.gmail.com>
References: <f0fcc6820801181204i3cfbab5cv5a4654a19d4a8476@mail.gmail.com>
	<14076870-6B1F-4E76-BC65-952FC4BA659B@cs.usfca.edu>
	<f0fcc6820801181255k43e59b83w33e7acdceb42b88f@mail.gmail.com>
	<4BAE34A1-2825-4EE3-9B88-4D4880A8FD18@cs.usfca.edu>
	<f0fcc6820801181330y2d88509as970f4978a432bbc7@mail.gmail.com>
	<f0fcc6820801181353j6b3c1d28s1d578f40ad33d920@mail.gmail.com>
	<5A7B2E10-22B8-430D-8546-9C326B0299E9@cs.usfca.edu>
	<f0fcc6820801181426r5c1b1c94nc5d530d2a9150d00@mail.gmail.com>
Message-ID: <DD380135-C6B0-4D34-86B0-B849E7E47E09@cs.usfca.edu>


On Jan 18, 2008, at 2:26 PM, Mark Volkmann wrote:

> On Jan 18, 2008 4:14 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>>
>> On Jan 18, 2008, at 1:53 PM, Mark Volkmann wrote:
>>
>>> The big lesson learned in this for me is that
>>> if my parser grammar builds an AST
>>> and the lexer rules are combined with it in a single file
>>> then I can debug the AST generation in ANTLRWorks
>>> without writing any Java code
>>>
>>> but ...
>>>
>>> if my parser and lexer rules are in separate files
>>> then I have to write Java code and run it in order to use the
>>> ANTLRWorks debugger.
>>>
>>> Correct?
>>
>> or copy the __Test__.java file from your AW dir and use that :)
>
> What creates that source file ... or is that something that is
> generated from my grammar by ANTLRWorks?

yep.

> BTW, I added a wiki page titled "When do I need to use remote
> debugging?" at http://www.antlr.org/wiki/pages/viewpage.action?pageId=5832732 
> .
> Don't let me say anything that is wrong. ;-)

Thanks...i'll take a look later.
Ter

From asengine at gmail.com  Fri Jan 18 15:51:10 2008
From: asengine at gmail.com (Ashish)
Date: Fri, 18 Jan 2008 15:51:10 -0800
Subject: [antlr-interest] AST/rewrite rule question
Message-ID: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>

Hi,
If the start rule is specified without any rewrite rules all the queries
from the
input are parsed and nodes are created for the select queries as expected.
However if the start rule is modified to use the rewrite rule to create the
AST ie

from
  selectQueries :  (selectQuery)*;
to
  selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq);

then, only the first query in the file seems to be parsed. The rest seem to
be ignored.
Test file contents/program/grammar snippet  below.

Thanks
Ashish

// run as
java TestTree < input-queries-file

// Input queries
select a;
select x, y, z;
select a, b, c from x, y, z;
select asdf from qwert;
select a from b where x > c;
select a, b, vdef from asdf, qwer where c > x;

// TestTree - Main program snippet
        ANTLRInputStream input = new ANTLRInputStream(System.in);
        SelectTreeLexer lexer = new SelectTreeLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        SelectTreeParser parser = new SelectTreeParser(tokens);
        SelectTreeParser.selectQueries_return selectQueries =
           parser.selectQueries();
        Object o = selectQueries.getTree();

        System.out.println("o : " + o.getClass().getName());
        Tree tree = (Tree)o;
        traverseTree(tree, "");
    }
    private static void traverseTree(Tree t, String indent) {
        printTree(t, indent);
        int children = t.getChildCount();
        for(int i=0; i<children; i++) {
            traverseTree(t.getChild(i), indent + "  ");
        }
    }
    private static void printTree(Tree t, String indent) {
        System.out.println(indent + " tree: " + t.toStringTree());
    }

// Grammar contents
grammar SelectTree;

options {
        output=AST;
        ASTLabelType=CommonTree;
}

tokens {
        SELECT_QUERIES;
}


selectQueries
        :       (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq)
        ;

selectQuery
        :       selectClause fromClause? whereClause? SEMICOLON
        ;

selectClause
        :       SELECT selectList  -> ^(SELECT selectList)
        ;

fromClause
        :       FROM fromList  -> ^(FROM fromList)
        ;
whereClause
        :       WHERE conditionClause -> ^(WHERE conditionClause)
        ;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/e5dedb2d/attachment.html 

From jaluber at gmx.de  Fri Jan 18 15:56:58 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Sat, 19 Jan 2008 00:56:58 +0100
Subject: [antlr-interest] AST/rewrite rule question
In-Reply-To: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>
References: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>
Message-ID: <47913CCA.9060400@gmx.de>

Ashish schrieb:
> Hi,
> If the start rule is specified without any rewrite rules all the queries 
> from the
> input are parsed and nodes are created for the select queries as expected.
> However if the start rule is modified to use the rewrite rule to create 
> the AST ie
>  
> from
>   selectQueries :  (selectQuery)*;
> to
>   selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq);
>  
> then, only the first query in the file seems to be parsed. The rest seem 
> to be ignored.
> Test file contents/program/grammar snippet  below.
>  
> Thanks
> Ashish

Did you try

selectQueries :  (sq+=selectQuery)* EOF -> ^(SELECT_QUERIES $sq);

?

Johannes

From asengine at gmail.com  Fri Jan 18 16:03:13 2008
From: asengine at gmail.com (Ashish)
Date: Fri, 18 Jan 2008 16:03:13 -0800
Subject: [antlr-interest] AST/rewrite rule question
In-Reply-To: <47913CCA.9060400@gmx.de>
References: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>
	<47913CCA.9060400@gmx.de>
Message-ID: <cc29a5e50801181603o71d29223of5d4c62bff072935@mail.gmail.com>

On Jan 18, 2008 3:56 PM, Johannes Luber <jaluber at gmx.de> wrote:

> Ashish schrieb:
> > Hi,
> > If the start rule is specified without any rewrite rules all the queries
> > from the
> > input are parsed and nodes are created for the select queries as
> expected.
> > However if the start rule is modified to use the rewrite rule to create
> > the AST ie
> >
> > from
> >   selectQueries :  (selectQuery)*;
> > to
> >   selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq);
> >
> > then, only the first query in the file seems to be parsed. The rest seem
> > to be ignored.
> > Test file contents/program/grammar snippet  below.
> >
> > Thanks
> > Ashish
>
> Did you try
>
> selectQueries :  (sq+=selectQuery)* EOF -> ^(SELECT_QUERIES $sq);
>
> ?
>
Yes, I tried that. No luck. :)

-Ashish
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/013408bd/attachment.html 

From parrt at cs.usfca.edu  Fri Jan 18 16:25:17 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 18 Jan 2008 16:25:17 -0800
Subject: [antlr-interest] AST/rewrite rule question
In-Reply-To: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>
References: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>
Message-ID: <0EB92353-9043-465B-A784-F65EA58F8BCF@cs.usfca.edu>


On Jan 18, 2008, at 3:51 PM, Ashish wrote:

> Hi,
> If the start rule is specified without any rewrite rules all the  
> queries from the
> input are parsed and nodes are created for the select queries as  
> expected.
> However if the start rule is modified to use the rewrite rule to  
> create the AST ie
>
> from
>   selectQueries :  (selectQuery)*;
> to
>   selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq);

try

selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq+);

Ter

From asengine at gmail.com  Fri Jan 18 16:44:41 2008
From: asengine at gmail.com (Ashish)
Date: Fri, 18 Jan 2008 16:44:41 -0800
Subject: [antlr-interest] AST/rewrite rule question
In-Reply-To: <0EB92353-9043-465B-A784-F65EA58F8BCF@cs.usfca.edu>
References: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>
	<0EB92353-9043-465B-A784-F65EA58F8BCF@cs.usfca.edu>
Message-ID: <cc29a5e50801181644n4edb3f54jeb10073fc8870eed@mail.gmail.com>

That worked. Of course. Thanks !



On Jan 18, 2008 4:25 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> On Jan 18, 2008, at 3:51 PM, Ashish wrote:
>
> > Hi,
> > If the start rule is specified without any rewrite rules all the
> > queries from the
> > input are parsed and nodes are created for the select queries as
> > expected.
> > However if the start rule is modified to use the rewrite rule to
> > create the AST ie
> >
> > from
> >   selectQueries :  (selectQuery)*;
> > to
> >   selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq);
>
> try
>
> selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq+);
>
> Ter
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/a42dbc45/attachment.html 

From asengine at gmail.com  Fri Jan 18 18:44:17 2008
From: asengine at gmail.com (Ashish)
Date: Fri, 18 Jan 2008 18:44:17 -0800
Subject: [antlr-interest] parser backtrack issue
Message-ID: <cc29a5e50801181844i49f5b29bxa7a8be3739669b82@mail.gmail.com>

Hi,
I defined boolean expressions as
booleanExpressions
     :  booleanExpression ( BOOLEAN_OR  booleanExpression )*
     |  booleanExpression ( BOOLEAN_AND booleanExpression )*

but the antlr code generator complained so I added the backtrack option as
below
booleanExpressions
options {
 backtrack = true;
}
     :  booleanExpression ( BOOLEAN_OR  booleanExpression )*
     |  booleanExpression ( BOOLEAN_AND booleanExpression )*

But when run with the input
select a from b where c > d && x < y;

I get the following error
recoverFromMismatchedToken
BR.recoverFromMismatchedToken
line 1:28 mismatched input '&&' expecting SEMICOLON
I can get rid of the error if booleanExpressions is defined as
 booleanExpressions
     :  booleanExpression ( (BOOLEAN_OR  | BOOLEAN_AND) booleanExpression )*

however I am not sure how to go about writing the rewrite rule for AST
generation for this one line version.
Writing the rewrite rule for the 2 line version seems fairly obvious.

Thanks again,
Ashish
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080118/c2c091c4/attachment-0001.html 

From antlr at mirality.co.nz  Fri Jan 18 18:53:55 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 19 Jan 2008 15:53:55 +1300
Subject: [antlr-interest] AST/rewrite rule question
In-Reply-To: <0EB92353-9043-465B-A784-F65EA58F8BCF@cs.usfca.edu>
References: <cc29a5e50801181551i4fcb9687h90aac0355d62d66c@mail.gmail.com>
	<0EB92353-9043-465B-A784-F65EA58F8BCF@cs.usfca.edu>
Message-ID: <20080119025411.932AF11EC5F@www.antlr.org>

At 13:25 19/01/2008, Terence Parr wrote:
 >try
 >
 >selectQueries :  (sq+=selectQuery)* -> ^(SELECT_QUERIES $sq+);

Surely that should be a * on the RHS, to match the one on the 
left?  I seem to recall reading posts from people who had this 
sort of thing throw exceptions when there was no data to insert 
(eg. when $sq is null).


From antlr at mirality.co.nz  Fri Jan 18 18:59:18 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 19 Jan 2008 15:59:18 +1300
Subject: [antlr-interest] parser backtrack issue
In-Reply-To: <cc29a5e50801181844i49f5b29bxa7a8be3739669b82@mail.gmail.co
 m>
References: <cc29a5e50801181844i49f5b29bxa7a8be3739669b82@mail.gmail.com>
Message-ID: <20080119025932.7D4C811EC60@www.antlr.org>

At 15:44 19/01/2008, Ashish wrote:
>I defined boolean expressions as
>booleanExpressions
>      :  booleanExpression ( BOOLEAN_OR  booleanExpression )*
>      |  booleanExpression ( BOOLEAN_AND booleanExpression )*

That's only going to match a chain of ANDs or a chain or ORs.  It 
won't match a mixed sequence of ANDs and ORs, for example.  You 
probably want this:

booleanExpressions
   :  booleanExpression ((BOOLEAN_OR | BOOLEAN_AND) 
booleanExpression)*
   ;

Or this:

booleanExpressions
   :  booleanExpression
      ( BOOLEAN_OR booleanExpressions
      | BOOLEAN_AND booleanExpressions
      )?
   ;


From fwierzbicki at gmail.com  Fri Jan 18 20:33:41 2008
From: fwierzbicki at gmail.com (Frank Wierzbicki)
Date: Fri, 18 Jan 2008 23:33:41 -0500
Subject: [antlr-interest] Python 2.5 grammar uploaded
Message-ID: <4dab5f760801182033x6d6d84a7v69918d6a63a9ba8@mail.gmail.com>

I just uploaded an updated Python grammar that adds the new features
from Python 2.5.  I'm working on replacing Jython's current JavaCC
grammar with Antlr3.  Despite warnings in the comments I was unable to
resist mucking with the lexer :).  This is my first serious use of
Anltr3 so I'm guessing that there is room for improvement, so if
anyone here has critiques I'd love to hear them.  Also I have the same
grammar with AST production rules along with a walker in the Jython
sandbox, but these are probably not ready for anyone to look at
(especially the walker -- lots of rough edges).  In any case, thanks
for Antlr3 -- it is a joy to use.

By the way -- I have a typo in my description for the grammar -- 'as'
becomes a keyword in Python 2.6 not Python 2.5.

-Frank

From dave at badgers-in-foil.co.uk  Sat Jan 19 04:58:21 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Sat, 19 Jan 2008 12:58:21 +0000
Subject: [antlr-interest] parser backtrack issue
In-Reply-To: <cc29a5e50801181844i49f5b29bxa7a8be3739669b82@mail.gmail.com>
References: <cc29a5e50801181844i49f5b29bxa7a8be3739669b82@mail.gmail.com>
Message-ID: <20080119125821.GA14699@badgers-in-foil.co.uk>

On Fri, Jan 18, 2008 at 06:44:17PM -0800, Ashish wrote:
> I can get rid of the error if booleanExpressions is defined as
>  booleanExpressions
>      :  booleanExpression ( (BOOLEAN_OR  | BOOLEAN_AND) booleanExpression )*
> 
> however I am not sure how to go about writing the rewrite rule for AST
> generation for this one line version.

It's quite simple with tree structuring operators (assuming you don't
have additional reasons to use a rewrite),

  booleanExpressions
      :  booleanExpression ( boolOp^ booleanExpression )*
      ;

  boolOp
      :  BOOLEAN_OR  | BOOLEAN_AND
      ;

Expressing this with the rewrite syntax is a bit more fiddly,

  booleanExpressions
      :  (   booleanExpression
             -> booleanExpression
	 )
         (   boolOp booleanExpression
             -> ^(booleanOp $booleanExpression booleanExpression)
         )*
      ;

The (apparently redundant) booleanExpression->booleanExpression is
required to set the initial value of the $booleanExpressions result
tree.


ta,
dave

-- 
http://david.holroyd.me.uk/

From alessnet at gmail.com  Sat Jan 19 10:31:53 2008
From: alessnet at gmail.com (Alessandro)
Date: Sat, 19 Jan 2008 19:31:53 +0100
Subject: [antlr-interest] Complexity of ANTLR
Message-ID: <be9e4140801191031y7aeec20br1049105f1a12e3d3@mail.gmail.com>

Hello,

Sorry if my question has already been answered.
I want to know the complexity of ANTLR (without using backtracking).

ANTLR uses a (cyclic) DFA to choose the correct alternative. If the
language isn't LL(k) for a fixed k, in the worse case, in every rule,
the DFA scan the whole piece of input matching the rule before
entering in it. So it is exponential ?

Is it possible to have accurate complexities (average and worse) ?

Thanks a lot :-)

Alessandro

From rdclark at gmail.com  Sat Jan 19 12:38:38 2008
From: rdclark at gmail.com (Richard Clark)
Date: Sat, 19 Jan 2008 12:38:38 -0800
Subject: [antlr-interest] Wiki re-organization idea
Message-ID: <d3992d900801191238k65d43888m531d0c644c401eef@mail.gmail.com>

Hi all,
I've been off doing a tricky project* with ANTLR and StringTemplate, and now
I'm getting ready to write up notes on processing XML with ANTLR. I've also
been looking at the "Tutorials" section of the Wiki and noticing ways to
improve it for new and experienced users.

Right now, the Wiki categories are:

- ANTLR v3 documentation
- ANTLR v3 FAQ
- ANTLR v3 To Do List
- Grammar Design Patterns (a single page)
- Presentations
- Terence Notes
- Tutorials

The Tutorials mixes material for absolute beginners with intermediate to
advanced applications. I'd like to split things up with a clear learning
path:

- Tutorials
-- Five minute introduction to ANTLR 3
-- Quick Starter on Parser Grammars - No Past Experience Required
-- Roadmap to learning ANTLR [new]

- Using ANTLR [new]
-- Example grammars [new]
--- Expression evaluator
--- Fig - Generic configuration language interpreter
--- JSON Interpreter
--- Simple tree-based interpeter
-- Interfacing AST with Java
-- Island Grammars Under Parser Control
-- Migrating from ANTLR 2 to ANTLR 3
-- Test-Driven Development with ANTLR
-- Using ANTLR 3 with Maven 2
-- XML [new]
--- Parsing XML
--- Interfacing StAX to ANTLR


What do you all think? Ter, is this OK?

...Richard

* Taking XHTML in and generating a native Word 2007 document out with
styles, graphics, pagination, etc. It took about 3 weeks and less than 1000
lines of source!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080119/bc1cbad2/attachment.html 

From asengine at gmail.com  Sat Jan 19 13:58:06 2008
From: asengine at gmail.com (Ashish)
Date: Sat, 19 Jan 2008 13:58:06 -0800
Subject: [antlr-interest] parser backtrack issue
In-Reply-To: <47916795.2215300a.419b.71caSMTPIN_ADDED@mx.google.com>
References: <cc29a5e50801181844i49f5b29bxa7a8be3739669b82@mail.gmail.com>
	<47916795.2215300a.419b.71caSMTPIN_ADDED@mx.google.com>
Message-ID: <cc29a5e50801191358m75b854e4qa1ae4caa40ce4b94@mail.gmail.com>

On Jan 18, 2008 6:59 PM, Gavin Lambert <antlr at mirality.co.nz> wrote:

> At 15:44 19/01/2008, Ashish wrote:
> >I defined boolean expressions as
> >booleanExpressions
> >      :  booleanExpression ( BOOLEAN_OR  booleanExpression )*
> >      |  booleanExpression ( BOOLEAN_AND booleanExpression )*
>
> That's only going to match a chain of ANDs or a chain or ORs.  It
> won't match a mixed sequence of ANDs and ORs, for example.  You
> probably want this:
>
> booleanExpressions
>   :  booleanExpression ((BOOLEAN_OR | BOOLEAN_AND)
> booleanExpression)*
>   ;
>
> Or this:
>
> booleanExpressions
>   :  booleanExpression
>      ( BOOLEAN_OR booleanExpressions
>      | BOOLEAN_AND booleanExpressions
>      )?
>   ;
>
>

That is what I want ! Thanks for pointing that out.
-Ashish
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080119/6e9102ed/attachment.html 

From asengine at gmail.com  Sat Jan 19 14:01:23 2008
From: asengine at gmail.com (Ashish)
Date: Sat, 19 Jan 2008 14:01:23 -0800
Subject: [antlr-interest] parser backtrack issue
In-Reply-To: <20080119125821.GA14699@badgers-in-foil.co.uk>
References: <cc29a5e50801181844i49f5b29bxa7a8be3739669b82@mail.gmail.com>
	<20080119125821.GA14699@badgers-in-foil.co.uk>
Message-ID: <cc29a5e50801191401o2260b9a7w8f11eed5458c8769@mail.gmail.com>

Thanks for reminding about AST operators. I'd decided to use rewrite rules
but the operators seem to be much easier.

This alias rocks!

-Ashish


On Jan 19, 2008 4:58 AM, David Holroyd <dave at badgers-in-foil.co.uk> wrote:

> On Fri, Jan 18, 2008 at 06:44:17PM -0800, Ashish wrote:
> > I can get rid of the error if booleanExpressions is defined as
> >  booleanExpressions
> >      :  booleanExpression ( (BOOLEAN_OR  | BOOLEAN_AND)
> booleanExpression )*
> >
> > however I am not sure how to go about writing the rewrite rule for AST
> > generation for this one line version.
>
> It's quite simple with tree structuring operators (assuming you don't
> have additional reasons to use a rewrite),
>
>  booleanExpressions
>      :  booleanExpression ( boolOp^ booleanExpression )*
>      ;
>
>  boolOp
>      :  BOOLEAN_OR  | BOOLEAN_AND
>      ;
>
> Expressing this with the rewrite syntax is a bit more fiddly,
>
>  booleanExpressions
>      :  (   booleanExpression
>             -> booleanExpression
>         )
>         (   boolOp booleanExpression
>             -> ^(booleanOp $booleanExpression booleanExpression)
>         )*
>      ;
>
> The (apparently redundant) booleanExpression->booleanExpression is
> required to set the initial value of the $booleanExpressions result
> tree.
>
>
> ta,
> dave
>
> --
> http://david.holroyd.me.uk/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080119/26668265/attachment.html 

From stevagewp at gmail.com  Sun Jan 20 05:54:54 2008
From: stevagewp at gmail.com (Steve Bennett)
Date: Mon, 21 Jan 2008 00:54:54 +1100
Subject: [antlr-interest] Tree grammar/stringtemplate: do I need this?
Message-ID: <b8ceeef70801200554k9139c22n2d95857989075331@mail.gmail.com>

Hi all,
  I've got a medium sized parser for a wiki language which generates a
nice AST. I'd now like to be able to dump out the AST as HTML. Almost
all of the processing and validation has already taken place at this
point.

I thought a tree grammar and string templates would be the way to go.
But according to the book, I should "begin by copying the parser
grammar...and hten altering the header". Eep! Although my parser is
only 760 lines so far, it is bound to grow, and I hate the idea of
having to keep the two parsers synchronised. Also, so much of what
tree grammars do seems redundant for my purposes: there is no "high
level structure" to be validated.

All I really want is something to convert an AST node such as this:

OL
+LI
++foo
+LI
++bar

into text like this:

<ol>
<li>
foo
</li>
</li>
bar
</li>
</ol>

Is there a simpler way?

(I do want to do a small amount of intermediate processing, like
concatenating the children of certain nodes, but maybe that's a
separate issue...)

Thanks for any advice!

Steve

From rdclark at gmail.com  Sun Jan 20 09:54:37 2008
From: rdclark at gmail.com (Richard Clark)
Date: Sun, 20 Jan 2008 09:54:37 -0800
Subject: [antlr-interest] Tree grammar/stringtemplate: do I need this?
In-Reply-To: <b8ceeef70801200554k9139c22n2d95857989075331@mail.gmail.com>
References: <b8ceeef70801200554k9139c22n2d95857989075331@mail.gmail.com>
Message-ID: <d3992d900801200954i1aff976fk3f3f6e0128238835@mail.gmail.com>

If the structure of your tree maps directly onto the HTML you want to
generate, why not write a simple tree walker? (Look at the source for
BaseTree.toStringTree).
If you want to do more than that (e.g. add pretty printing, print some
things in a differentr order, etc.), StringTemplate and a tree grammar are
the way to go. While it sounds like a pain to keep a parser and tree parser
synchronized, it's usually not that bad in practice.

 ...Richard
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080120/a30f967f/attachment.html 

From tvial at octo.com  Sun Jan 20 09:59:14 2008
From: tvial at octo.com (Thomas VIAL)
Date: Sun, 20 Jan 2008 18:59:14 +0100 (CET)
Subject: [antlr-interest] Workaround for the "code too large" problem
Message-ID: <2944.88.166.61.40.1200851954.squirrel@webmail.octo.com>

Hi,

I have been running into the "Code too large" problem. I have already changed my tokens to abstract ones with a
keyword lookup table (simplifying lexer code, as per
http://www.antlr.org/pipermail/antlr-interest/2007-August/023007.html). It worked for a while but when I threw in
a few more tokens the error came back again, on the parser this time.

I have identified 2 causes:
- big inline array tokenNames, which seems to serves informational purposes only (not used internally by ANTLR)
- big static initialization block at the end of the file, for the FOLLOW_* BitSet's

My grammar is ~400 tokens large which is too much apparentlty. As a workaround I have put together a small awk script
(see below), to be used as a post-processing step after generating the parser. It removes the supposedly unused
tokenNames array (and getter), and splits the BitSet initialization block is small methods called from the
constructor.

Of course it relies heavily on the precise layout and formatting used by ANTLR when generating the parser; it is
designed for ANTLR v3.0.1. And it works like a charm ;)

Hoping it will help others who have this very annoying "code too large" error!

Thomas


------------------------------------------------------------
function dumpBitSetGroup() {
	print "\tprivate void bitSetInitGroup_" bitSetGroups "()\n\t{";
	for (i = 0; i < bitSetIdx; i++)
		print "\t\t" (bitSetName[i]) " = " (bitSetDef[i]);
	print "\t}\n";
	bitSetIdx = 0;
	bitSetGroups++;
}

BEGIN {
	BITSET_GROUPING = 50;

	skipLine = 0;
	tokenNamesDef = 1;
	ctrLines = 0;
	inConstructor = 0;
	bitSetIdx = 0;
	bitSetGroups = 0;
}

# Get class name
/^public class/ {
	className = $3;
}

# Token names definition - we probably don't need it
/public static .* tokenNames/ {
	skipLine = 1;
	tokenNamesDef = 1;
}
# The array declaration spans 3 lines, skip them all
($0 ~ /^[[:blank:]]*"<invalid>"/) && tokenNamesDef {
	skipLine = 1;
}
($0 ~ /^[[:blank:]]*};[[:blank:]]*$/) && tokenNamesDef {
	skipLine = 1;
	tokenNamesDef = 0;
}

# Remove the getter method accordingly (it fits on one line)
/public .* getTokenNames/ {
	skipLine = 1;
}

# Remember constructor definition, we will output it later
($0 ~ /^[[:blank:]]*public/) && ($2 ~ ("^" className "\\(")) {
	inConstructor = 1;
}
(inConstructor) {
	constructor[ctrLines++] = $0;
	skipLine = 1;
}
($0 ~ /^[[:blank:]]*}[[:blank:]]*$/) && inConstructor {
	inConstructor = 0;
}

# BitSet's definition
/^[[:blank:]]*public static final BitSet FOLLOW_/ {
	# Remember definition
	split($0, decl, " = ");
	bitSetName[bitSetIdx] = $5;
	bitSetDef[bitSetIdx++] = decl[2];

	# Reduce to simple declaration, no initialization (but remove "final" attribute!)
	$0 = "\tpublic static BitSet " $5 ";"

	# Output group
	if (bitSetIdx == BITSET_GROUPING)
		dumpBitSetGroup();
}

# End of file
/^}$/ {
	# Remaining BitSet's
	dumpBitSetGroup();

	# Constructor
	print constructor[0];
	print constructor[1];
	for (i = 0; i < bitSetGroups; i++)
		print "\t\t\tbitSetInitGroup_" i "();";
	for (i = 2; i < ctrLines; i++)
		print constructor[i];
}

# Output
(!skipLine) {
	print;
}
{
	skipLine = 0;
}


From aheller at gmx.at  Sun Jan 20 12:14:23 2008
From: aheller at gmx.at (Arnulf Heller)
Date: Sun, 20 Jan 2008 21:14:23 +0100
Subject: [antlr-interest] target language independent action code
Message-ID: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>

hi,

I know this topic was discussed a couple of times here ...

But as far as I know there is no solution available right now 
(possibly apart from Loring Cramers yggdrasil).

I think target language independent action code would be of great help because:

1. ANTLR provides a steadily growing foundation of grammars for 
various languages (which is very cool). Unfortunately its almost 
certain that the grammar targets a different language ...
2. Action code clutters the readability of the grammar - especially 
if its in a target language that you don't know.

Because ANTLR changes a lot over time, action code should be embedded 
into ANTLR directly with "on board" tools.

So why not use these wonderful string templates?

Instead of writing

{ myDict.add($ID.text()); }

one could write for instance

[ DictAdd(ID) ]

which ANTLR could translate on the fly to target language code at 
that position.

Then the writer of the grammar needs to provide a string template 
group (with a template "DictAdd") which performs the translation to 
"his" target language.
This way targetting a different language amounts to rewriting the 
string template group.
This does not alter the original grammar and will hopefully be posted :-)

The target language folks even could provide a minimal toolset for 
dictionaries and the like. If there is a good collection of tools, 
the action code gets structured, documented and well known by the time.

What do you think?


From zuper85 at hotmail.it  Sun Jan 20 12:39:04 2008
From: zuper85 at hotmail.it (Michele Bortolato)
Date: Sun, 20 Jan 2008 21:39:04 +0100
Subject: [antlr-interest] Throwing custom exception
Message-ID: <BAY108-W16457A91C3F950D802C2E0D63C0@phx.gbl>


Hi

Could i add on a Nonterminal specify an throws clause?

such like

exp throws CustomExceptions         :         exp?       ;
_________________________________________________________________
Conosci Doretta? Contattala, ? ora su Messenger!
http://www.doretta82.it/banner/index.html

From parrt at cs.usfca.edu  Sun Jan 20 14:42:16 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 20 Jan 2008 14:42:16 -0800
Subject: [antlr-interest] Python 2.5 grammar uploaded
In-Reply-To: <4dab5f760801182033x6d6d84a7v69918d6a63a9ba8@mail.gmail.com>
References: <4dab5f760801182033x6d6d84a7v69918d6a63a9ba8@mail.gmail.com>
Message-ID: <370FEC8A-92B0-4084-BDB1-344DC610FB90@cs.usfca.edu>

Hi Frank, great work!
Ter
On Jan 18, 2008, at 8:33 PM, Frank Wierzbicki wrote:

> I just uploaded an updated Python grammar that adds the new features
> from Python 2.5.  I'm working on replacing Jython's current JavaCC
> grammar with Antlr3.  Despite warnings in the comments I was unable to
> resist mucking with the lexer :).  This is my first serious use of
> Anltr3 so I'm guessing that there is room for improvement, so if
> anyone here has critiques I'd love to hear them.  Also I have the same
> grammar with AST production rules along with a walker in the Jython
> sandbox, but these are probably not ready for anyone to look at
> (especially the walker -- lots of rough edges).  In any case, thanks
> for Antlr3 -- it is a joy to use.
>
> By the way -- I have a typo in my description for the grammar -- 'as'
> becomes a keyword in Python 2.6 not Python 2.5.
>
> -Frank


From parrt at cs.usfca.edu  Sun Jan 20 14:47:38 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 20 Jan 2008 14:47:38 -0800
Subject: [antlr-interest] Complexity of ANTLR
In-Reply-To: <be9e4140801191031y7aeec20br1049105f1a12e3d3@mail.gmail.com>
References: <be9e4140801191031y7aeec20br1049105f1a12e3d3@mail.gmail.com>
Message-ID: <64E573ED-C8D3-4DA9-99C0-8D014B1317CA@cs.usfca.edu>


On Jan 19, 2008, at 10:31 AM, Alessandro wrote:

> Hello,
>
> Sorry if my question has already been answered.
> I want to know the complexity of ANTLR (without using backtracking).
>
> ANTLR uses a (cyclic) DFA to choose the correct alternative. If the
> language isn't LL(k) for a fixed k, in the worse case, in every rule,
> the DFA scan the whole piece of input matching the rule before
> entering in it. So it is exponential ?

Sounds like the worst case would be highly nonlinear, yes.  it would  
be O(n^2) I think for n input symbol.  Each symbol would have to look  
at rest of input: n+n-1+n-2+n-3 etc...

> Is it possible to have accurate complexities (average and worse) ?

Average?  Well, you can run -profile, but in theory I'm not sure.   
mostly it's LL(1).  backtracking adds a high constant (if  
memoizing).  In summary, i've not done the aveage case ;)

Ter

From marco.neumann at gmail.com  Sun Jan 20 15:06:38 2008
From: marco.neumann at gmail.com (Marco Neumann)
Date: Sun, 20 Jan 2008 18:06:38 -0500
Subject: [antlr-interest] New York Semantic Web Meetup : ANTLR Introduction
Message-ID: <844a8dbf0801201506y42f6d910x6f5144a2f95d81de@mail.gmail.com>

Hi ANTLR Developer,

I am the organizer of the New York Semantic Web SIG/Meetup and was wondering
if you could recommend an ANTLR expert in the New York City area, I would
like to invite him/her to present ANTLR  at one of our upcoming meetings.

 http://www.swnyc.org
 http://semweb.meetup.com/25/

We typically have 15-25 people attending the sessions (from ~140 people on
the groups mailing list). Speakers have an 1h 1/2 to present a topic related
to efforts in the Semantic Web space. Our group is composed of practitioners
and researchers in the New York Metro Area with a diverse background in
fields such as financial, biopharm, business intelligence, marketing, media,
programmers, computer science students, job seekers and entrepreneurs.

It is a great way for the group to learn about ANTLR, its features and
possible (existing)  integration into Semantic Web applications.

All The Best,
Marco

New York Semantic Web Meetup
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080120/520e5805/attachment.html 

From ima_band at comcast.net  Sun Jan 20 15:44:36 2008
From: ima_band at comcast.net (ima_band at comcast.net)
Date: Sun, 20 Jan 2008 23:44:36 +0000
Subject: [antlr-interest] Using comment text to control text insertion
	during rewrite
Message-ID: <012020082344.3449.4793DCE40002624800000D7922007354460B020E0DA10E0307@comcast.net>

Hi,

I'm using the following code with the rewrite option to ignore comments.

    // stuff we want to ignore yet pass through for rewriting
    CMT : '<!--' (options {greedy=false;} : .)* '-->' {$channel = HIDDEN;};

It works great but I now have a need to use the *contents* of a comment to determine the token index to use for my text insertion/replacement. I'm using the following construct currently and it's great for sticking something at the beginning (insertBefore) or end (insertAfter) of a gramatical constuct but I'd like to make it smart enough to key off of comment text so that it inserts the code in it's proper section so I don't have to manually move it.
   { tokens.insertBefore($formBeans.stop, "replacement stuff\n"); }
I'd like to know if this is even possible using the rewrite option. Can someone point me in the right direction?
Thanks,
Jeff 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080120/6b25c998/attachment.html 

From markwright at internode.on.net  Sun Jan 20 18:22:19 2008
From: markwright at internode.on.net (Mark Wright)
Date: Mon, 21 Jan 2008 13:22:19 +1100
Subject: [antlr-interest] target language independent action code
In-Reply-To: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
Message-ID: <20080121132219.00006ea2@goanna>

On Sun, 20 Jan 2008 21:14:23 +0100
Arnulf Heller <aheller at gmx.at> wrote:

> hi,
> 
> I know this topic was discussed a couple of times here ...
> 
> But as far as I know there is no solution available right now 
> (possibly apart from Loring Cramers yggdrasil).
> 
> I think target language independent action code would be of great
> help because:
> 
> 1. ANTLR provides a steadily growing foundation of grammars for 
> various languages (which is very cool). Unfortunately its almost 
> certain that the grammar targets a different language ...
> 2. Action code clutters the readability of the grammar - especially 
> if its in a target language that you don't know.

Hello Arnulf,

The normal approach to avoid cluttering the grammar is to just
have one line of action code that calls a method in in target
language.
 
> Because ANTLR changes a lot over time, action code should be embedded 
> into ANTLR directly with "on board" tools.

For a parser for a large language the ANTLR generated parser file
is already too large (2.5MB in my case) for the Netbeans debugger
to open when it only has at most one line in each action.  To
then go and embed the action code would stop me from being able to
debug it at all.  Even if the debugger could handle it, there is
no way I want to go searching through megabytes of generated
parser code looking for the place to set my breakpoint.

> So why not use these wonderful string templates?
> 
> Instead of writing
> 
> { myDict.add($ID.text()); }
> 
> one could write for instance
> 
> [ DictAdd(ID) ]
> 
> which ANTLR could translate on the fly to target language code at 
> that position.

In practice the action code for a compiler for a large
language is thousands of lines of code just for entering the
information into a symbol table, which for an object orientated
language is a DAG (Directed Acyclic Graph), for looking up
information in the symbol table, etc.  It would be inconvenient
to develop and debug this using string templates.
 
> Then the writer of the grammar needs to provide a string template 
> group (with a template "DictAdd") which performs the translation to 
> "his" target language.
> This way targetting a different language amounts to rewriting the 
> string template group.
> This does not alter the original grammar and will hopefully be
> posted :-)
> 
> The target language folks even could provide a minimal toolset for 
> dictionaries and the like.

A dictionary is insufficient for a symbol table for an object
orientated language.  It would be impractical for the target language
developers to anticipate the symbol table language requirements for
evey conceivable language.

> If there is a good collection of tools, 
> the action code gets structured, documented and well known by the
> time.
> 
> What do you think?

In my dreams I wish there was some magic way to automatically translate
the Java ANTLR runtime and all my Java action code into C++ sometime
in the future when the C++ runtime is available.

Back in real world, what I am doing at the moment is I develop all
of my Java action code modelled in the freeware UML CASE tool called
BOUML:

http://bouml.free.fr/

Then I hope that some time in the future that some other kind hearted
masochists (not me, sorry, I am already one level of indirection away
from real work) will develop a C++ ANTLR runtime including tree wizard,
and C++ string template.

Thanks, Mark

-- 

From kanaero at gmail.com  Sun Jan 20 18:23:46 2008
From: kanaero at gmail.com (Suresh Kannan)
Date: Sun, 20 Jan 2008 21:23:46 -0500
Subject: [antlr-interest] C target
Message-ID: <2fc34dea0801201823w3cd7e233ua4338dc167aa148f@mail.gmail.com>

Hello,

First of all, I want to thank Jim for providing an excellent C-target.
My end use is on an embedded target. Although a c++ target would be
good, I tried the C++ target from antlr 2.7.2 and I cringe at the use
of the C++ std:: library. If you are indeed working on the C++ target
I recommend a standalone runtime. In any case I just  got started with
the C target and also antlr in general, I got the SimpleCalc example
from the wiki (http://www.antlr.org/wiki/display/ANTLR3/Using+the+ANTLR3+C+Target)
working as-is. However is there a list of examples for the C runtime
or is the wiki one it ?

I am a bit lost as to how to go further, but I am going to continue
digging further.

regards,
suresh.

From lgcraymer at yahoo.com  Sun Jan 20 19:42:38 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 20 Jan 2008 19:42:38 -0800 (PST)
Subject: [antlr-interest] target language independent action code
Message-ID: <817381.93479.qm@web55905.mail.re3.yahoo.com>

Mark--

Oh good--someone with a very large parser.  How much of the generated code is DFA definitions?  That is, if you split the file where the DFA classes start appearing, how big are the two pieces?  From the cases I have seen, DFA classes grow non-linearly with the size of the grammar.  For a generated file to be this large, my guess is that most of the code is DFA definitions that could be generated in separate files in a dfa directory to end up with manageable file sizes.

--Loring

----- Original Message ----
> From: Mark Wright <markwright at internode.on.net>
> To: antlr-interest at antlr.org
> Sent: Sunday, January 20, 2008 6:22:19 PM
> Subject: Re: [antlr-interest] target language independent action code
> 
> On Sun, 20 Jan 2008 21:14:23 +0100
> Arnulf Heller  wrote:
> 
> > hi,
> > 
> > I know this topic was discussed a couple of times here ...
> > 
> > But as far as I know there is no solution available right now 
> > (possibly apart from Loring Cramers yggdrasil).
> > 
> > I think target language independent action code would be of great
> > help because:
> > 
> > 1. ANTLR provides a steadily growing foundation of grammars for 
> > various languages (which is very cool). Unfortunately its almost 
> > certain that the grammar targets a different language ...
> > 2. Action code clutters the readability of the grammar - especially 
> > if its in a target language that you don't know.
> 
> Hello Arnulf,
> 
> The normal approach to avoid cluttering the grammar is to just
> have one line of action code that calls a method in in target
> language.
>  
> > Because ANTLR changes a lot over time, action code should be
> embedded
> 
 
> > into ANTLR directly with "on board" tools.
> 
> For a parser for a large language the ANTLR generated parser file
> is already too large (2.5MB in my case) for the Netbeans debugger
> to open when it only has at most one line in each action.  To
> then go and embed the action code would stop me from being able to
> debug it at all.  Even if the debugger could handle it, there is
> no way I want to go searching through megabytes of generated
> parser code looking for the place to set my breakpoint.
> 
> > So why not use these wonderful string templates?
> > 
> > Instead of writing
> > 
> > { myDict.add($ID.text()); }
> > 
> > one could write for instance
> > 
> > [ DictAdd(ID) ]
> > 
> > which ANTLR could translate on the fly to target language code at 
> > that position.
> 
> In practice the action code for a compiler for a large
> language is thousands of lines of code just for entering the
> information into a symbol table, which for an object orientated
> language is a DAG (Directed Acyclic Graph), for looking up
> information in the symbol table, etc.  It would be inconvenient
> to develop and debug this using string templates.
>  
> > Then the writer of the grammar needs to provide a string template 
> > group (with a template "DictAdd") which performs the translation to 
> > "his" target language.
> > This way targetting a different language amounts to rewriting the 
> > string template group.
> > This does not alter the original grammar and will hopefully be
> > posted :-)
> > 
> > The target language folks even could provide a minimal toolset for 
> > dictionaries and the like.
> 
> A dictionary is insufficient for a symbol table for an object
> orientated language.  It would be impractical for the target language
> developers to anticipate the symbol table language requirements for
> evey conceivable language.
> 
> > If there is a good collection of tools, 
> > the action code gets structured, documented and well known by the
> > time.
> > 
> > What do you think?
> 
> In my dreams I wish there was some magic way to automatically translate
> the Java ANTLR runtime and all my Java action code into C++ sometime
> in the future when the C++ runtime is available.
> 
> Back in real world, what I am doing at the moment is I develop all
> of my Java action code modelled in the freeware UML CASE tool called
> BOUML:
> 
> http://bouml.free.fr/
> 
> Then I hope that some time in the future that some other kind hearted
> masochists (not me, sorry, I am already one level of indirection away
> from real work) will develop a C++ ANTLR runtime including tree wizard,
> and C++ string template.
> 
> Thanks, Mark
> 
> -- 
> 




      ____________________________________________________________________________________
Never miss a thing.  Make Yahoo your home page. 
http://www.yahoo.com/r/hs

From jimi at temporal-wave.com  Sun Jan 20 20:13:02 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 20 Jan 2008 20:13:02 -0800
Subject: [antlr-interest] C target
In-Reply-To: <2fc34dea0801201823w3cd7e233ua4338dc167aa148f@mail.gmail.com>
Message-ID: <"LD8185D2623854de1806A482C0A7DF75C.1200889997.scalix.temporal-wave.com*"@MHS>

Hi Suresh,

Thanks for your complement. This is probably an FAQ by now ;-).

If you download the examples tar on the downloads page, you will see 
that the examples are split into Java, sharp, python and the C 
directories. The C examples all have Visual Studio 2005 .sln files and I 
would create Makefiles, but they are to obvious to bother doing so to be 
honest. You just run ANTLR on all the grammar files and compile all the 
.c files into an executable binary.

In the examples you will see how to invoke parsers and tree parsers etc 
as well as a few example s of how to use the strings in tokens and so 
on.

Hope that helps,

Jim

> -----Original Message-----
> From: Suresh Kannan [mailto:kanaero at gmail.com]
> Sent: Sunday, January 20, 2008 6:24 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] C target
> 
> Hello,
> 
> First of all, I want to thank Jim for providing an excellent C-target.
> My end use is on an embedded target. Although a c++ target would be
> good, I tried the C++ target from antlr 2.7.2 and I cringe at the use
> of the C++ std:: library. If you are indeed working on the C++ target
> I recommend a standalone runtime. In any case I just  got started with
> the C target and also antlr in general, I got the SimpleCalc example
> from the wiki
> (http://www.antlr.org/wiki/display/ANTLR3/Using+the+ANTLR3+C+Target)
> working as-is. However is there a list of examples for the C runtime
> or is the wiki one it ?
> 
> I am a bit lost as to how to go further, but I am going to continue
> digging further.
> 
> regards,
> suresh.



From markwright at internode.on.net  Sun Jan 20 21:34:17 2008
From: markwright at internode.on.net (Mark Wright)
Date: Mon, 21 Jan 2008 16:34:17 +1100
Subject: [antlr-interest] target language independent action code
In-Reply-To: <817381.93479.qm@web55905.mail.re3.yahoo.com>
References: <817381.93479.qm@web55905.mail.re3.yahoo.com>
Message-ID: <20080121163417.00003175@goanna>

On Sun, 20 Jan 2008 19:42:38 -0800 (PST)
Loring Craymer <lgcraymer at yahoo.com> wrote:

> Mark--
> 
> Oh good--someone with a very large parser.  How much of the generated
> code is DFA definitions?  That is, if you split the file where the
> DFA classes start appearing, how big are the two pieces?  From the
> cases I have seen, DFA classes grow non-linearly with the size of the
> grammar.  For a generated file to be this large, my guess is that
> most of the code is DFA definitions that could be generated in
> separate files in a dfa directory to end up with manageable file
> sizes.
> 
> --Loring

Hello Loring,

Thanks for you interest, some stats are below.

The stats say there is no backtracking, and no syntactic predicates.
Instead there is thousands of lines (in separate Java files) of
dis-ambiguating semantic predicates that do things like:

* scan backwards one or two symbols to retrieve a
pointer from a token (that was set in an earlier action)
to a symbol table entry necessary (if it is present)
to understand what comes next.

* scan forwards looking for dis-ambiguating tokens.

* look up stuff in symbol tables.

* scan forwards with little hand coded recursive descent compilers
looking up stuff in symbols tables and looking for dis-ambiguating
tokens.

There is a reason for this madness:

p. 256 ANTLR book:
"When building grammars for really difficult languages such as C++,
engineers often leave the grammar in a natural condition and then
add semantic predicates ... to manually scan ahead looking for
the distinguishing symbol."

Thanks, Mark

goanna% wc TntdboParser.java                
   41973  104845 2507347 TntdboParser.java
goanna% grep -n "extends DFA" TntdboParser.java
27312:    class DFA6 extends DFA {
28163:    class DFA14 extends DFA {
28641:    class DFA22 extends DFA {
28801:    class DFA28 extends DFA {
28941:    class DFA33 extends DFA {
29051:    class DFA34 extends DFA {
29165:    class DFA35 extends DFA {
29366:    class DFA41 extends DFA {
29462:    class DFA51 extends DFA {
29596:    class DFA59 extends DFA {
30451:    class DFA60 extends DFA {
31328:    class DFA62 extends DFA {
31825:    class DFA68 extends DFA {
32323:    class DFA72 extends DFA {
32809:    class DFA76 extends DFA {
33455:    class DFA77 extends DFA {
33534:    class DFA81 extends DFA {
33663:    class DFA94 extends DFA {
33837:    class DFA123 extends DFA {
33976:    class DFA133 extends DFA {
34482:    class DFA135 extends DFA {
34727:    class DFA138 extends DFA {
34912:    class DFA139 extends DFA {
35082:    class DFA141 extends DFA {
35252:    class DFA142 extends DFA {
35340:    class DFA151 extends DFA {
35550:    class DFA159 extends DFA {
35685:    class DFA168 extends DFA {
35830:    class DFA174 extends DFA {
36409:    class DFA175 extends DFA {
36558:    class DFA178 extends DFA {
37286:    class DFA195 extends DFA {
37797:    class DFA199 extends DFA {
38441:    class DFA212 extends DFA {
38945:    class DFA231 extends DFA {
39061:    class DFA236 extends DFA {
39976:    class DFA237 extends DFA {
40484:    class DFA243 extends DFA {
goanna% ls -al TntdboParser.java 
-rw-rw-r--   1 mwright  eng      2507347 Jan 21 01:31 TntdboParser.java
goanna% 

java -Xmx256m
-classpath /h/goanna/2/eng/dev/tntdbo/java_src:/h/goanna/2/eng/dev/tntdbo:/h/goanna/2/ts/antlr/antlr-2007-12-28.10/lib/antlr-2007-12-28.10.jar:/h/goanna/2/ts/antlr/antlr-2007-12-28.10/lib/runtime-2007-12-28.10.jar:/h/goanna/2/ts/antlr/antlr-2007-12-28.10/lib/stringtemplate-3.1b1.jar:/h/goanna/2/ts/antlr/antlr-2007-12-28.10/lib/antlr-2.7.7.jar
org.antlr.Tool -Xconversiontimeout 60000 -report Tntdbo.g ANTLR Parser
Generator  Version 3.1b1 (??)  1989-2007 ANTLR Grammar Report; Stats
Version 4 Grammar: Tntdbo Type: combined
Target language: Java
Output: AST
Grammar option k: none
Grammar option backtrack: false
Rules: 181
Productions: 450
Decisions: 252
Cyclic DFA decisions: 0
LL(1) decisions: 155
Min fixed k: -1
Max fixed k: 5
Average fixed k: 0.4722222222222222
Standard deviation of fixed k: 1.0763771972404776
Min acyclic DFA states: 0
Max acyclic DFA states: 95
Average acyclic DFA states: 8.738095238095237
Standard deviation of acyclic DFA states: 17.405489160926603
Total acyclic DFA states: 2202
Min cyclic DFA states: 0
Max cyclic DFA states: 0
Average cyclic DFA states: 0.0
Standard deviation of cyclic DFA states: 0.0
Total cyclic DFA states: 0
Vocabulary size: 269
DFA creation time in ms: 28142
Number of semantic predicates found: 111
Number of manual fixed lookahead k=value options: 56
Number of nondeterministic decisions: 97
Number of nondeterministic decisions resolved with predicates: 97
Number of DFA conversions terminated early: 0
Number of errors: 0
Number of warnings: 0
Number of infos: 0
Number of syntactic predicates found: 0
Decisions with syntactic predicates: 0
Decision DFAs using syntactic predicates: 0
Decisions with semantic predicates: 56
Decision DFAs using semantic predicates: 97

Backtracking report:
Number of decisions that backtrack: 0

NFA conversion early termination report:
Number of NFA conversions that terminated early: 0


Compilation finished at Mon Jan 21 01:31:10

-- 

From lgcraymer at yahoo.com  Sun Jan 20 21:49:33 2008
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sun, 20 Jan 2008 21:49:33 -0800 (PST)
Subject: [antlr-interest] target language independent action code
Message-ID: <19987.33921.qm@web55901.mail.re3.yahoo.com>

Mark--

Thanks for the info!  The explanation of "lots of sempreds" is also helpful--hoisting will contribute to the code size, and could be the reason that DFA defs are "only" 1/3 of the total.

--Loring

----- Original Message ----
> From: Mark Wright <markwright at internode.on.net>
> To: antlr-interest at antlr.org
> Sent: Sunday, January 20, 2008 9:34:17 PM
> Subject: Re: [antlr-interest] target language independent action code
> 
> On Sun, 20 Jan 2008 19:42:38 -0800 (PST)
> Loring Craymer  wrote:
> 
> > Mark--
> > 
> > Oh good--someone with a very large parser.  How much of the generated
> > code is DFA definitions?  That is, if you split the file where the
> > DFA classes start appearing, how big are the two pieces?  From the
> > cases I have seen, DFA classes grow non-linearly with the size of the
> > grammar.  For a generated file to be this large, my guess is that
> > most of the code is DFA definitions that could be generated in
> > separate files in a dfa directory to end up with manageable file
> > sizes.
> > 
> > --Loring
> 
> Hello Loring,
> 
> Thanks for you interest, some stats are below.
> 
> The stats say there is no backtracking, and no syntactic predicates.
> Instead there is thousands of lines (in separate Java files) of
> dis-ambiguating semantic predicates that do things like:
> 
> * scan backwards one or two symbols to retrieve a
> pointer from a token (that was set in an earlier action)
> to a symbol table entry necessary (if it is present)
> to understand what comes next.
> 
> * scan forwards looking for dis-ambiguating tokens.
> 
> * look up stuff in symbol tables.
> 
> * scan forwards with little hand coded recursive descent compilers
> looking up stuff in symbols tables and looking for dis-ambiguating
> tokens.
> 
> There is a reason for this madness:
> 
> p. 256 ANTLR book:
> "When building grammars for really difficult languages such as C++,
> engineers often leave the grammar in a natural condition and then
> add semantic predicates ... to manually scan ahead looking for
> the distinguishing symbol."
> 
> Thanks, Mark
> 
> goanna% wc TntdboParser.java                
>    41973  104845 2507347 TntdboParser.java
> goanna% grep -n "extends DFA" TntdboParser.java
> 27312:    class DFA6 extends DFA {
> 28163:    class DFA14 extends DFA {
> 28641:    class DFA22 extends DFA {
> 28801:    class DFA28 extends DFA {
> 28941:    class DFA33 extends DFA {
> 29051:    class DFA34 extends DFA {
> 29165:    class DFA35 extends DFA {
> 29366:    class DFA41 extends DFA {
> 29462:    class DFA51 extends DFA {
> 29596:    class DFA59 extends DFA {
> 30451:    class DFA60 extends DFA {
> 31328:    class DFA62 extends DFA {
> 31825:    class DFA68 extends DFA {
> 32323:    class DFA72 extends DFA {
> 32809:    class DFA76 extends DFA {
> 33455:    class DFA77 extends DFA {
> 33534:    class DFA81 extends DFA {
> 33663:    class DFA94 extends DFA {
> 33837:    class DFA123 extends DFA {
> 33976:    class DFA133 extends DFA {
> 34482:    class DFA135 extends DFA {
> 34727:    class DFA138 extends DFA {
> 34912:    class DFA139 extends DFA {
> 35082:    class DFA141 extends DFA {
> 35252:    class DFA142 extends DFA {
> 35340:    class DFA151 extends DFA {
> 35550:    class DFA159 extends DFA {
> 35685:    class DFA168 extends DFA {
> 35830:    class DFA174 extends DFA {
> 36409:    class DFA175 extends DFA {
> 36558:    class DFA178 extends DFA {
> 37286:    class DFA195 extends DFA {
> 37797:    class DFA199 extends DFA {
> 38441:    class DFA212 extends DFA {
> 38945:    class DFA231 extends DFA {
> 39061:    class DFA236 extends DFA {
> 39976:    class DFA237 extends DFA {
> 40484:    class DFA243 extends DFA {
> goanna% ls -al TntdboParser.java 
> -rw-rw-r--   1 mwright  eng      2507347 Jan 21 01:31 TntdboParser.java
> goanna% 
> 
> java -Xmx256m
> -classpath
> 
 /h/goanna/2/eng/dev/tntdbo/java_src:/h/goanna/2/eng/dev/tntdbo:/h/goanna/2/ts/a
> ntlr/antlr-2007-12-28.10/lib/antlr-2007-12-28.10.jar:/h/goanna/2/ts/antlr/antlr-
> 2007-12-28.10/lib/runtime-2007-12-28.10.jar:/h/goanna/2/ts/antlr/antlr-2007-12-2
> 8.10/lib/stringtemplate-3.1b1.jar:/h/goanna/2/ts/antlr/antlr-2007-12-28.10/lib/a
> ntlr-2.7.7.jar
> org.antlr.Tool -Xconversiontimeout 60000 -report Tntdbo.g ANTLR Parser
> Generator  Version 3.1b1 (??)  1989-2007 ANTLR Grammar Report; Stats
> Version 4 Grammar: Tntdbo Type: combined
> Target language: Java
> Output: AST
> Grammar option k: none
> Grammar option backtrack: false
> Rules: 181
> Productions: 450
> Decisions: 252
> Cyclic DFA decisions: 0
> LL(1) decisions: 155
> Min fixed k: -1
> Max fixed k: 5
> Average fixed k: 0.4722222222222222
> Standard deviation of fixed k: 1.0763771972404776
> Min acyclic DFA states: 0
> Max acyclic DFA states: 95
> Average acyclic DFA states: 8.738095238095237
> Standard deviation of acyclic DFA states: 17.405489160926603
> Total acyclic DFA states: 2202
> Min cyclic DFA states: 0
> Max cyclic DFA states: 0
> Average cyclic DFA states: 0.0
> Standard deviation of cyclic DFA states: 0.0
> Total cyclic DFA states: 0
> Vocabulary size: 269
> DFA creation time in ms: 28142
> Number of semantic predicates found: 111
> Number of manual fixed lookahead k=value options: 56
> Number of nondeterministic decisions: 97
> Number of nondeterministic decisions resolved with predicates: 97
> Number of DFA conversions terminated early: 0
> Number of errors: 0
> Number of warnings: 0
> Number of infos: 0
> Number of syntactic predicates found: 0
> Decisions with syntactic predicates: 0
> Decision DFAs using syntactic predicates: 0
> Decisions with semantic predicates: 56
> Decision DFAs using semantic predicates: 97
> 
> Backtracking report:
> Number of decisions that backtrack: 0
> 
> NFA conversion early termination report:
> Number of NFA conversions that terminated early: 0
> 
> 
> Compilation finished at Mon Jan 21 01:31:10
> 
> -- 
> 




      ____________________________________________________________________________________
Looking for last minute shopping deals?  
Find them fast with Yahoo! Search.  http://tools.search.yahoo.com/newsearch/category.php?category=shopping

From zuper85 at hotmail.it  Mon Jan 21 01:00:12 2008
From: zuper85 at hotmail.it (Michele Bortolato)
Date: Mon, 21 Jan 2008 10:00:12 +0100
Subject: [antlr-interest]  Throwing custom exception
In-Reply-To: <BAY108-W16457A91C3F950D802C2E0D63C0@phx.gbl>
References: <BAY108-W16457A91C3F950D802C2E0D63C0@phx.gbl>
Message-ID: <BAY108-W147C7202DBA217AB38FA8CD63D0@phx.gbl>


Hi

Could i add on a Nonterminal specify an throws clause?

such like

exp throws CustomExceptions         :         exp?       ;

otherwise i must to add a throws clause on each method definition on the parser code

Thanks

_________________________________________________________________
Ti piace giocare con le lettere? Prova ABCLive!
http://messengergiochi.it.msn.com/

From antlr at mirality.co.nz  Mon Jan 21 03:47:34 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 22 Jan 2008 00:47:34 +1300
Subject: [antlr-interest] C target
In-Reply-To: <2fc34dea0801201823w3cd7e233ua4338dc167aa148f@mail.gmail.co
 m>
References: <2fc34dea0801201823w3cd7e233ua4338dc167aa148f@mail.gmail.com>
Message-ID: <20080121114746.CFFBC11EAA0@www.antlr.org>

At 15:23 21/01/2008, Suresh Kannan wrote:
 >
 >Although a c++ target would be good, I tried the C++
 >target from antlr 2.7.2 and I cringe at the use of
 >the C++ std:: library.

uClibc++ isn't too bad.

But yeah, generally speaking "small footprint" and "templates" do 
not mix.


From jpschewe at mtu.net  Mon Jan 21 05:37:28 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Mon, 21 Jan 2008 07:37:28 -0600
Subject: [antlr-interest] RewriteEmptyStreamException when changing from
 quoted string to token?
In-Reply-To: <20080115083058.GC23106@badgers-in-foil.co.uk>
References: <477E5FA6.3070602@mtu.net>
	<477E83CC.5030208@gmail.com>	<477EA5A5.8060903@gmx.de>
	<477F8A83.5050906@mtu.net>	<20080106020421.000057b4@goanna>
	<478BC572.4030201@mtu.net>	<20080114215128.GA23106@badgers-in-foil.co.uk>	<478BF2DA.7030200@mtu.net>
	<20080115083058.GC23106@badgers-in-foil.co.uk>
Message-ID: <4794A018.7010707@mtu.net>

David Holroyd wrote:
> I suspect RewriteEmptyStreamException is the result when the rewrite
> tries to insert one of the captured PRODUCTs, but the parse didn't
> capture one (because there was an 'atom' with no '*', I guess).
>
>
> Here's another idea that I didn't test :)
>
>   multExpr[boolean negate]
>     :   a+=atom (a+=multHelp)* -> {negate}? ^(PRODUCT ^(NUMBER DOUBLE["-1"]) $a)
>                                ->           ^(PRODUCT $a)
>     ;
>
>   multHelp
>     :   PRODUCT atom -> atom
>
>
>   
Thanks, that took care of it.  Now on to debugging other parts of the 
parser.

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From kanaero at gmail.com  Mon Jan 21 05:52:37 2008
From: kanaero at gmail.com (Suresh Kannan)
Date: Mon, 21 Jan 2008 08:52:37 -0500
Subject: [antlr-interest] C target
Message-ID: <2fc34dea0801210552j2c47d292p9526a84a34d20e3e@mail.gmail.com>

Aaah, Thank you. I scrolleth not far enough.

regards,
suresh.

From r.mark.volkmann at gmail.com  Mon Jan 21 06:33:09 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 21 Jan 2008 08:33:09 -0600
Subject: [antlr-interest] org.antlr.Tool options
Message-ID: <f0fcc6820801210633y428efd51jaaf95e68b9cd2bd0@mail.gmail.com>

If I understand correctly,
the -o options tells it where to write generated .java and .tokens files and
the -lib option tells it where the generated code should look for .tokens files.

When would you every want the values for -o and -lib to be different?

-- 
R. Mark Volkmann
Object Computing, Inc.

From cross at symboticware.com  Mon Jan 21 07:04:15 2008
From: cross at symboticware.com (Cameron Ross)
Date: Mon, 21 Jan 2008 10:04:15 -0500
Subject: [antlr-interest] Scanning URI tokens and grammar resuse
Message-ID: <4794B46F.3040803@symboticware.com>

Hi,

I'm constructing a grammar for a language that must recognize URIs as 
described in RFC 2396.  This is probably a pretty common requirement, so 
I'm wondering if an ANTLR 3 grammar already exists.  Any links would be 
much appreciated. 

Also, URIs are just one small part of the language I'm considering, so 
I'll have to include URI scanning rules within the rest of my lexer 
grammar.  I know there was the concept of super grammars in  ANLTR 2, 
but its not clear to me if this is the  recommended way to reuse gammar 
code in ANTLR 3? 

Thanks much,
Cameron.

From jpschewe at mtu.net  Mon Jan 21 07:27:27 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Mon, 21 Jan 2008 09:27:27 -0600
Subject: [antlr-interest] Antlr dropping tokens?
Message-ID: <4794B9DF.4060808@mtu.net>

Here's a piece of my grammar that I'm testing with junit.  It appears
that some tokens are getting dropped.
The input is this:
b[1 ... (param1 - 5 - 1) * 4]

The resulting tree is this:
(b (SUM (PRODUCT (NUMBER 1))) (SUM (PRODUCT (SUM (PRODUCT param1)
(PRODUCT (NUMBER -1) (NUMBER 5)) (PRODUCT (NUMBER -1) (NUMBER 1))))))

Where did the "* 4" go?  I didn't think ANTLR could drop tokens like
that.  This is using antlr 3.0.1.

The grammar fragment is below:
/**
* Name used in a variable declaration.
*/
nameDecl :
  IDENT -> IDENT
| IDENT LBRACK lb=subscriptAddExpr[false] ELLIPSIS
ub=subscriptAddExpr[false] RBRACK -> ^(IDENT $lb $ub)
;
subscriptAddExpr[boolean negate]
:
subscriptMultExpr[negate] (PLUS subscriptMultExpr[negate] | MINUS
subscriptMultExpr[!negate])* -> ^(SUM subscriptMultExpr+)

;

/**
* @param negate if true, negate all expressions by multiplying by -1
*/
subscriptMultExpr[boolean negate]
:
  a+=subscriptAtom (a+=subscriptMultHelp)* -> {negate}? ^(PRODUCT
^(NUMBER NUM_INT["-1"]) $a)
                                           ->           ^(PRODUCT $a)
;

subscriptMultHelp : PRODUCT subscriptAtom -> subscriptAtom ;

/**
* Base type that can be inside a subscript.
*/
subscriptAtom
:
  IDENT
| numint
| subscriptParExpression
;

subscriptParExpression
:
LPAREN subscriptAddExpr[false] RPAREN -> subscriptAddExpr
;


/**
* A finite integer number.  May be negative.
*/
numint
:
  MINUS NUM_INT -> ^(NUMBER ^(MINUS NUM_INT))
| NUM_INT -> ^(NUMBER NUM_INT)
;

// ----------- Lexer ---------------------
// Operators
LPAREN          :   '('     ;
RPAREN          :   ')'     ;
LBRACK          :   '['     ;
RBRACK          :   ']'     ;
ELLIPSIS        :   '...'   ;
EQ              :   '='     ;
MINUS           :   '-'     ;
PLUS            :   '+'     ;
SEMI            :   ';'     ;
LCURLY          :   '{'     ;
RCURLY          :   '}'     ;
LE              :   '<='    ;
COLON           :   ':'     ;
COMMA           :   ','     ;
PRODUCT         :   '*'     ;

// Keywords
IN              :   'in'    ;

// Functions
SUMMATION       :   'SUM'   ;
LOOP            :   'LOOP'  ;
TAN             :   'tan'   ;
COS             :   'cos'   ;
SIN             :   'sin'   ;
LOG             :   'log'   ;
LOG10           :   'log10' ;
EXP             :   'exp'   ;
POW             :   'pow'   ;


/** Single-line comments */
SL_COMMENT
  : '//' ~( '\n'|'\r' )* '\r'? '\n' { $channel=HIDDEN; }
    ;

/** multiple-line comments */
ML_COMMENT
    :    '/*'
        ( options {greedy=false;} : . )*
        '*/'
        {$channel=HIDDEN;}
    ;

IDENT :
  ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
  ;

// a numeric literal
NUM_INT
  : ('0'..'9')+ EXPONENT?
  ;

NUM_FLOAT
    :     DIGITS '.' DIGITS? EXPONENT?
    | '.' DIGITS EXPONENT?
    ;

fragment
DIGITS : ('0'..'9')+ ;


// a protected method to assist in matching floating point numbers
fragment
EXPONENT
  : ('e'|'E') ('+'|'-')? ('0'..'9')+
  ;

// Whitespace -- ignored
WS    :    (    ' '
        |    '\t'
        |    '\f'
            // handle newlines
        |    (    '\r\n'  // Evil DOS
            |    '\n'    // Unix (the right way)
            )
        )+
        { $channel=HIDDEN; }
    ;



-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels
nor demons, neither the present nor the future, nor any
powers, neither height nor depth, nor anything else in all
creation, will be able to separate us from the love of God that
is in Christ Jesus our Lord. - Romans 8:38-39



From simone.tripodi at gmail.com  Mon Jan 21 07:47:37 2008
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Mon, 21 Jan 2008 16:47:37 +0100
Subject: [antlr-interest] SPARQL 1.1 is out
Message-ID: <4173dc210801210747r7afbdf3dt44ce34a19ac6c575@mail.gmail.com>

Hi all,
I'm glad to announce that, after Juergen Pfundt joined Michele
Mostarda and I working on the SPARQL Grammar, we finally released the
1.1 version!!!
Thanks to Juergen Pfundt, already known to the ANTLR community as the
antlr3's ant task author, the Grammar is compliant to W3C's
reccomandation, and thanks to his extraordinary efforts, a lot of bugs
have been fixed. Thank you Juergen!!!
The grammar is available to download at the official ANTLR Grammars
repository, http://www.antlr.org/grammar/list.

Cheers,
Juergen Pfundt
Michele Mostarda
Simone Tripodi

From fog at initd.org  Mon Jan 21 07:56:28 2008
From: fog at initd.org (Federico Di Gregorio)
Date: Mon, 21 Jan 2008 16:56:28 +0100
Subject: [antlr-interest] SPARQL 1.1 is out
In-Reply-To: <4173dc210801210747r7afbdf3dt44ce34a19ac6c575@mail.gmail.com>
References: <4173dc210801210747r7afbdf3dt44ce34a19ac6c575@mail.gmail.com>
Message-ID: <1200930988.4685.74.camel@mila.office.dinunzioedigregorio>


Il giorno lun, 21/01/2008 alle 16.47 +0100, Simone Tripodi ha scritto:
> Hi all,
> I'm glad to announce that, after Juergen Pfundt joined Michele
> Mostarda and I working on the SPARQL Grammar, we finally released the
> 1.1 version!!!
> Thanks to Juergen Pfundt, already known to the ANTLR community as the
> antlr3's ant task author, the Grammar is compliant to W3C's
> reccomandation, and thanks to his extraordinary efforts, a lot of bugs
> have been fixed. Thank you Juergen!!!
> The grammar is available to download at the official ANTLR Grammars
> repository, http://www.antlr.org/grammar/list.

Great! I am about to use it in my Greengrass projects, while
implementing the SPARQL query feature. Btw, I currently use a
custom-made Turtle grammar but, given the fact the graph patterns and
construction use almost exactly the same syntax what do you think about
factoring out the Turtle part? Is it possible and feasible?

federico

-- 
Federico Di Gregorio                         http://people.initd.org/fog
Debian GNU/Linux Developer                                fog at debian.org
INIT.D Developer                                           fog at initd.org
 Come sai se il primo ? ben dato? In realt? ? "Beh il secondo bacio ben
  dato non si rifiuta".                                    -- Alessandra
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 189 bytes
Desc: Questa =?ISO-8859-1?Q?=E8?= una parte del messaggio
	firmata digitalmente
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080121/a9b70fea/attachment.bin 

From r.mark.volkmann at gmail.com  Mon Jan 21 07:56:34 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Mon, 21 Jan 2008 09:56:34 -0600
Subject: [antlr-interest] Antlr dropping tokens?
In-Reply-To: <4794B9DF.4060808@mtu.net>
References: <4794B9DF.4060808@mtu.net>
Message-ID: <f0fcc6820801210756n3679c8f1xb1bc351d8d70b69@mail.gmail.com>

Could this be related to not having a rule that ends in EOF?

On Jan 21, 2008 9:27 AM, Jon Schewe <jpschewe at mtu.net> wrote:
> Here's a piece of my grammar that I'm testing with junit.  It appears
> that some tokens are getting dropped.
> The input is this:
> b[1 ... (param1 - 5 - 1) * 4]
>
> The resulting tree is this:
> (b (SUM (PRODUCT (NUMBER 1))) (SUM (PRODUCT (SUM (PRODUCT param1)
> (PRODUCT (NUMBER -1) (NUMBER 5)) (PRODUCT (NUMBER -1) (NUMBER 1))))))
>
> Where did the "* 4" go?  I didn't think ANTLR could drop tokens like
> that.  This is using antlr 3.0.1.
>
> The grammar fragment is below:
> /**
> * Name used in a variable declaration.
> */
> nameDecl :
>   IDENT -> IDENT
> | IDENT LBRACK lb=subscriptAddExpr[false] ELLIPSIS
> ub=subscriptAddExpr[false] RBRACK -> ^(IDENT $lb $ub)
> ;
> subscriptAddExpr[boolean negate]
> :
> subscriptMultExpr[negate] (PLUS subscriptMultExpr[negate] | MINUS
> subscriptMultExpr[!negate])* -> ^(SUM subscriptMultExpr+)
>
> ;
>
> /**
> * @param negate if true, negate all expressions by multiplying by -1
> */
> subscriptMultExpr[boolean negate]
> :
>   a+=subscriptAtom (a+=subscriptMultHelp)* -> {negate}? ^(PRODUCT
> ^(NUMBER NUM_INT["-1"]) $a)
>                                            ->           ^(PRODUCT $a)
> ;
>
> subscriptMultHelp : PRODUCT subscriptAtom -> subscriptAtom ;
>
> /**
> * Base type that can be inside a subscript.
> */
> subscriptAtom
> :
>   IDENT
> | numint
> | subscriptParExpression
> ;
>
> subscriptParExpression
> :
> LPAREN subscriptAddExpr[false] RPAREN -> subscriptAddExpr
> ;
>
>
> /**
> * A finite integer number.  May be negative.
> */
> numint
> :
>   MINUS NUM_INT -> ^(NUMBER ^(MINUS NUM_INT))
> | NUM_INT -> ^(NUMBER NUM_INT)
> ;
>
> // ----------- Lexer ---------------------
> // Operators
> LPAREN          :   '('     ;
> RPAREN          :   ')'     ;
> LBRACK          :   '['     ;
> RBRACK          :   ']'     ;
> ELLIPSIS        :   '...'   ;
> EQ              :   '='     ;
> MINUS           :   '-'     ;
> PLUS            :   '+'     ;
> SEMI            :   ';'     ;
> LCURLY          :   '{'     ;
> RCURLY          :   '}'     ;
> LE              :   '<='    ;
> COLON           :   ':'     ;
> COMMA           :   ','     ;
> PRODUCT         :   '*'     ;
>
> // Keywords
> IN              :   'in'    ;
>
> // Functions
> SUMMATION       :   'SUM'   ;
> LOOP            :   'LOOP'  ;
> TAN             :   'tan'   ;
> COS             :   'cos'   ;
> SIN             :   'sin'   ;
> LOG             :   'log'   ;
> LOG10           :   'log10' ;
> EXP             :   'exp'   ;
> POW             :   'pow'   ;
>
>
> /** Single-line comments */
> SL_COMMENT
>   : '//' ~( '\n'|'\r' )* '\r'? '\n' { $channel=HIDDEN; }
>     ;
>
> /** multiple-line comments */
> ML_COMMENT
>     :    '/*'
>         ( options {greedy=false;} : . )*
>         '*/'
>         {$channel=HIDDEN;}
>     ;
>
> IDENT :
>   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
>   ;
>
> // a numeric literal
> NUM_INT
>   : ('0'..'9')+ EXPONENT?
>   ;
>
> NUM_FLOAT
>     :     DIGITS '.' DIGITS? EXPONENT?
>     | '.' DIGITS EXPONENT?
>     ;
>
> fragment
> DIGITS : ('0'..'9')+ ;
>
>
> // a protected method to assist in matching floating point numbers
> fragment
> EXPONENT
>   : ('e'|'E') ('+'|'-')? ('0'..'9')+
>   ;
>
> // Whitespace -- ignored
> WS    :    (    ' '
>         |    '\t'
>         |    '\f'
>             // handle newlines
>         |    (    '\r\n'  // Evil DOS
>             |    '\n'    // Unix (the right way)
>             )
>         )+
>         { $channel=HIDDEN; }
>     ;
>
>
>
> --
> Jon Schewe | http://mtu.net/~jpschewe
> If you see an attachment named signature.asc, this is my digital
> signature.
> See http://www.gnupg.org for more information.
>
> For I am convinced that neither death nor life, neither angels
> nor demons, neither the present nor the future, nor any
> powers, neither height nor depth, nor anything else in all
> creation, will be able to separate us from the love of God that
> is in Christ Jesus our Lord. - Romans 8:38-39
>
>
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From jpschewe at mtu.net  Mon Jan 21 08:00:38 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Mon, 21 Jan 2008 10:00:38 -0600
Subject: [antlr-interest] Antlr dropping tokens?
In-Reply-To: <f0fcc6820801210756n3679c8f1xb1bc351d8d70b69@mail.gmail.com>
References: <4794B9DF.4060808@mtu.net>
	<f0fcc6820801210756n3679c8f1xb1bc351d8d70b69@mail.gmail.com>
Message-ID: <4794C1A6.2050500@mtu.net>

In my full grammar there is a rule that ends in EOF.  My test case is 
just a piece of the grammar, so there is no EOF.  Also note though, 
there are brackets that are parsed after the "* 4".

Mark Volkmann wrote:
> Could this be related to not having a rule that ends in EOF?
>
> On Jan 21, 2008 9:27 AM, Jon Schewe <jpschewe at mtu.net> wrote:
>   
>> Here's a piece of my grammar that I'm testing with junit.  It appears
>> that some tokens are getting dropped.
>> The input is this:
>> b[1 ... (param1 - 5 - 1) * 4]
>>
>> The resulting tree is this:
>> (b (SUM (PRODUCT (NUMBER 1))) (SUM (PRODUCT (SUM (PRODUCT param1)
>> (PRODUCT (NUMBER -1) (NUMBER 5)) (PRODUCT (NUMBER -1) (NUMBER 1))))))
>>
>> Where did the "* 4" go?  I didn't think ANTLR could drop tokens like
>> that.  This is using antlr 3.0.1.
>>
>> The grammar fragment is below:
>> /**
>> * Name used in a variable declaration.
>> */
>> nameDecl :
>>   IDENT -> IDENT
>> | IDENT LBRACK lb=subscriptAddExpr[false] ELLIPSIS
>> ub=subscriptAddExpr[false] RBRACK -> ^(IDENT $lb $ub)
>> ;
>> subscriptAddExpr[boolean negate]
>> :
>> subscriptMultExpr[negate] (PLUS subscriptMultExpr[negate] | MINUS
>> subscriptMultExpr[!negate])* -> ^(SUM subscriptMultExpr+)
>>
>> ;
>>
>> /**
>> * @param negate if true, negate all expressions by multiplying by -1
>> */
>> subscriptMultExpr[boolean negate]
>> :
>>   a+=subscriptAtom (a+=subscriptMultHelp)* -> {negate}? ^(PRODUCT
>> ^(NUMBER NUM_INT["-1"]) $a)
>>                                            ->           ^(PRODUCT $a)
>> ;
>>
>> subscriptMultHelp : PRODUCT subscriptAtom -> subscriptAtom ;
>>
>> /**
>> * Base type that can be inside a subscript.
>> */
>> subscriptAtom
>> :
>>   IDENT
>> | numint
>> | subscriptParExpression
>> ;
>>
>> subscriptParExpression
>> :
>> LPAREN subscriptAddExpr[false] RPAREN -> subscriptAddExpr
>> ;
>>
>>
>> /**
>> * A finite integer number.  May be negative.
>> */
>> numint
>> :
>>   MINUS NUM_INT -> ^(NUMBER ^(MINUS NUM_INT))
>> | NUM_INT -> ^(NUMBER NUM_INT)
>> ;
>>
>> // ----------- Lexer ---------------------
>> // Operators
>> LPAREN          :   '('     ;
>> RPAREN          :   ')'     ;
>> LBRACK          :   '['     ;
>> RBRACK          :   ']'     ;
>> ELLIPSIS        :   '...'   ;
>> EQ              :   '='     ;
>> MINUS           :   '-'     ;
>> PLUS            :   '+'     ;
>> SEMI            :   ';'     ;
>> LCURLY          :   '{'     ;
>> RCURLY          :   '}'     ;
>> LE              :   '<='    ;
>> COLON           :   ':'     ;
>> COMMA           :   ','     ;
>> PRODUCT         :   '*'     ;
>>
>> // Keywords
>> IN              :   'in'    ;
>>
>> // Functions
>> SUMMATION       :   'SUM'   ;
>> LOOP            :   'LOOP'  ;
>> TAN             :   'tan'   ;
>> COS             :   'cos'   ;
>> SIN             :   'sin'   ;
>> LOG             :   'log'   ;
>> LOG10           :   'log10' ;
>> EXP             :   'exp'   ;
>> POW             :   'pow'   ;
>>
>>
>> /** Single-line comments */
>> SL_COMMENT
>>   : '//' ~( '\n'|'\r' )* '\r'? '\n' { $channel=HIDDEN; }
>>     ;
>>
>> /** multiple-line comments */
>> ML_COMMENT
>>     :    '/*'
>>         ( options {greedy=false;} : . )*
>>         '*/'
>>         {$channel=HIDDEN;}
>>     ;
>>
>> IDENT :
>>   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
>>   ;
>>
>> // a numeric literal
>> NUM_INT
>>   : ('0'..'9')+ EXPONENT?
>>   ;
>>
>> NUM_FLOAT
>>     :     DIGITS '.' DIGITS? EXPONENT?
>>     | '.' DIGITS EXPONENT?
>>     ;
>>
>> fragment
>> DIGITS : ('0'..'9')+ ;
>>
>>
>> // a protected method to assist in matching floating point numbers
>> fragment
>> EXPONENT
>>   : ('e'|'E') ('+'|'-')? ('0'..'9')+
>>   ;
>>
>> // Whitespace -- ignored
>> WS    :    (    ' '
>>         |    '\t'
>>         |    '\f'
>>             // handle newlines
>>         |    (    '\r\n'  // Evil DOS
>>             |    '\n'    // Unix (the right way)
>>             )
>>         )+
>>         { $channel=HIDDEN; }
>>     ;
>>
>>
>>
>> --
>> Jon Schewe | http://mtu.net/~jpschewe
>> If you see an attachment named signature.asc, this is my digital
>> signature.
>> See http://www.gnupg.org for more information.
>>
>> For I am convinced that neither death nor life, neither angels
>> nor demons, neither the present nor the future, nor any
>> powers, neither height nor depth, nor anything else in all
>> creation, will be able to separate us from the love of God that
>> is in Christ Jesus our Lord. - Romans 8:38-39
>>
>>
>>
>>     
>
>
>
>   

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From parrt at cs.usfca.edu  Mon Jan 21 08:10:15 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 21 Jan 2008 08:10:15 -0800
Subject: [antlr-interest] Antlr dropping tokens?
In-Reply-To: <4794B9DF.4060808@mtu.net>
References: <4794B9DF.4060808@mtu.net>
Message-ID: <F9DA41DB-8C6A-47EC-8D0C-BBD7A24D69F1@cs.usfca.edu>

same error as last person with this problem a day or so ago.

use $a+ or $a*

Ter
On Jan 21, 2008, at 7:27 AM, Jon Schewe wrote:

> Here's a piece of my grammar that I'm testing with junit.  It appears
> that some tokens are getting dropped.
> The input is this:
> b[1 ... (param1 - 5 - 1) * 4]
>
> The resulting tree is this:
> (b (SUM (PRODUCT (NUMBER 1))) (SUM (PRODUCT (SUM (PRODUCT param1)
> (PRODUCT (NUMBER -1) (NUMBER 5)) (PRODUCT (NUMBER -1) (NUMBER 1))))))
>
> Where did the "* 4" go?  I didn't think ANTLR could drop tokens like
> that.  This is using antlr 3.0.1.
>
> The grammar fragment is below:
> /**
> * Name used in a variable declaration.
> */
> nameDecl :
>  IDENT -> IDENT
> | IDENT LBRACK lb=subscriptAddExpr[false] ELLIPSIS
> ub=subscriptAddExpr[false] RBRACK -> ^(IDENT $lb $ub)
> ;
> subscriptAddExpr[boolean negate]
> :
> subscriptMultExpr[negate] (PLUS subscriptMultExpr[negate] | MINUS
> subscriptMultExpr[!negate])* -> ^(SUM subscriptMultExpr+)
>
> ;
>
> /**
> * @param negate if true, negate all expressions by multiplying by -1
> */
> subscriptMultExpr[boolean negate]
> :
>  a+=subscriptAtom (a+=subscriptMultHelp)* -> {negate}? ^(PRODUCT
> ^(NUMBER NUM_INT["-1"]) $a)
>                                           ->           ^(PRODUCT $a)
> ;
>
> subscriptMultHelp : PRODUCT subscriptAtom -> subscriptAtom ;
>
> /**
> * Base type that can be inside a subscript.
> */
> subscriptAtom
> :
>  IDENT
> | numint
> | subscriptParExpression
> ;
>
> subscriptParExpression
> :
> LPAREN subscriptAddExpr[false] RPAREN -> subscriptAddExpr
> ;
>
>
> /**
> * A finite integer number.  May be negative.
> */
> numint
> :
>  MINUS NUM_INT -> ^(NUMBER ^(MINUS NUM_INT))
> | NUM_INT -> ^(NUMBER NUM_INT)
> ;
>
> // ----------- Lexer ---------------------
> // Operators
> LPAREN          :   '('     ;
> RPAREN          :   ')'     ;
> LBRACK          :   '['     ;
> RBRACK          :   ']'     ;
> ELLIPSIS        :   '...'   ;
> EQ              :   '='     ;
> MINUS           :   '-'     ;
> PLUS            :   '+'     ;
> SEMI            :   ';'     ;
> LCURLY          :   '{'     ;
> RCURLY          :   '}'     ;
> LE              :   '<='    ;
> COLON           :   ':'     ;
> COMMA           :   ','     ;
> PRODUCT         :   '*'     ;
>
> // Keywords
> IN              :   'in'    ;
>
> // Functions
> SUMMATION       :   'SUM'   ;
> LOOP            :   'LOOP'  ;
> TAN             :   'tan'   ;
> COS             :   'cos'   ;
> SIN             :   'sin'   ;
> LOG             :   'log'   ;
> LOG10           :   'log10' ;
> EXP             :   'exp'   ;
> POW             :   'pow'   ;
>
>
> /** Single-line comments */
> SL_COMMENT
>  : '//' ~( '\n'|'\r' )* '\r'? '\n' { $channel=HIDDEN; }
>    ;
>
> /** multiple-line comments */
> ML_COMMENT
>    :    '/*'
>        ( options {greedy=false;} : . )*
>        '*/'
>        {$channel=HIDDEN;}
>    ;
>
> IDENT :
>  ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
>  ;
>
> // a numeric literal
> NUM_INT
>  : ('0'..'9')+ EXPONENT?
>  ;
>
> NUM_FLOAT
>    :     DIGITS '.' DIGITS? EXPONENT?
>    | '.' DIGITS EXPONENT?
>    ;
>
> fragment
> DIGITS : ('0'..'9')+ ;
>
>
> // a protected method to assist in matching floating point numbers
> fragment
> EXPONENT
>  : ('e'|'E') ('+'|'-')? ('0'..'9')+
>  ;
>
> // Whitespace -- ignored
> WS    :    (    ' '
>        |    '\t'
>        |    '\f'
>            // handle newlines
>        |    (    '\r\n'  // Evil DOS
>            |    '\n'    // Unix (the right way)
>            )
>        )+
>        { $channel=HIDDEN; }
>    ;
>
>
>
> -- 
> Jon Schewe | http://mtu.net/~jpschewe
> If you see an attachment named signature.asc, this is my digital
> signature.
> See http://www.gnupg.org for more information.
>
> For I am convinced that neither death nor life, neither angels
> nor demons, neither the present nor the future, nor any
> powers, neither height nor depth, nor anything else in all
> creation, will be able to separate us from the love of God that
> is in Christ Jesus our Lord. - Romans 8:38-39
>
>


From jbb at acm.org  Mon Jan 21 08:15:34 2008
From: jbb at acm.org (John B. Brodie)
Date: Mon, 21 Jan 2008 11:15:34 -0500
Subject: [antlr-interest] Antlr dropping tokens?
In-Reply-To: <4794B9DF.4060808@mtu.net> (message from Jon Schewe on Mon, 21
	Jan 2008 09:27:27 -0600)
References: <4794B9DF.4060808@mtu.net>
Message-ID: <E1JGzJ8-0005ma-L7@gecko.home.org>

Jon Schewe wrote (in part):
>Here's a piece of my grammar that I'm testing with junit.  It appears
>that some tokens are getting dropped.
>The input is this:
>b[1 ... (param1 - 5 - 1) * 4]
...snipped...
>/**
>* @param negate if true, negate all expressions by multiplying by -1
>*/
>subscriptMultExpr[boolean negate]
>:
>  a+=subscriptAtom (a+=subscriptMultHelp)* -> {negate}? ^(PRODUCT
>^(NUMBER NUM_INT["-1"]) $a)
>                                           ->           ^(PRODUCT $a)
>;
>
>subscriptMultHelp : PRODUCT subscriptAtom -> subscriptAtom ;

I have not tested the following but I believe it to be the truth...

You are accumulating a list of nodes in `a` on the left hand side of
the rewrite (e.g. using the a+=... form).  Yet on the right hand side
you only use `$a` which I believe resolves to be just the first
element of the accumulated list.  Thus only the first operand is
placed into the tree, dropping the second, third, and subsequent
operands.

Use $a+ on the right hand side of the rewrite in subscriptMultExpr.

Hope this helps...
   -jbb

From simone.tripodi at gmail.com  Mon Jan 21 08:17:00 2008
From: simone.tripodi at gmail.com (Simone Tripodi)
Date: Mon, 21 Jan 2008 17:17:00 +0100
Subject: [antlr-interest] SPARQL 1.1 is out
In-Reply-To: <1200930988.4685.74.camel@mila.office.dinunzioedigregorio>
References: <4173dc210801210747r7afbdf3dt44ce34a19ac6c575@mail.gmail.com>
	<1200930988.4685.74.camel@mila.office.dinunzioedigregorio>
Message-ID: <4173dc210801210817o7c294aeftc8c0324ffcb4500f@mail.gmail.com>

Hi Federico!
first of all thank you very much to your interest about our small project :)
Well, we have never thought about the Turtle part, I suppose it's
possible, but I need some investigations before saying how easy/hard
it is :P
Let me check (and have a brainstorming with my team mates :P) and I'll
send you news ASAP :)
Cheers,
Simone

2008/1/21, Federico Di Gregorio <fog at initd.org>:
>
> Il giorno lun, 21/01/2008 alle 16.47 +0100, Simone Tripodi ha scritto:
> > Hi all,
> > I'm glad to announce that, after Juergen Pfundt joined Michele
> > Mostarda and I working on the SPARQL Grammar, we finally released the
> > 1.1 version!!!
> > Thanks to Juergen Pfundt, already known to the ANTLR community as the
> > antlr3's ant task author, the Grammar is compliant to W3C's
> > reccomandation, and thanks to his extraordinary efforts, a lot of bugs
> > have been fixed. Thank you Juergen!!!
> > The grammar is available to download at the official ANTLR Grammars
> > repository, http://www.antlr.org/grammar/list.
>
> Great! I am about to use it in my Greengrass projects, while
> implementing the SPARQL query feature. Btw, I currently use a
> custom-made Turtle grammar but, given the fact the graph patterns and
> construction use almost exactly the same syntax what do you think about
> factoring out the Turtle part? Is it possible and feasible?
>
> federico
>
> --
> Federico Di Gregorio                         http://people.initd.org/fog
> Debian GNU/Linux Developer                                fog at debian.org
> INIT.D Developer                                           fog at initd.org
>  Come sai se il primo ? ben dato? In realt? ? "Beh il secondo bacio ben
>   dato non si rifiuta".                                    -- Alessandra
>
>


-- 
My GoogleCode profile: http://code.google.com/u/simone.tripodi/
My Sourceforge: https://sourceforge.net/users/stripodi
My Picasa: http://picasaweb.google.com/simone.tripodi/
My Tube: http://www.youtube.com/user/stripodi

From smbogan at gmail.com  Mon Jan 21 09:19:00 2008
From: smbogan at gmail.com (Shaun Bogan)
Date: Mon, 21 Jan 2008 11:19:00 -0600
Subject: [antlr-interest] rewrite rules
Message-ID: <31160efe0801210919s5d946d27s20620b5f64192cbd@mail.gmail.com>

unaryright
:  operand seventhops? -> ^(UNARYRIGHT seventhops? operand)
;

I am trying to get my grammar to only make the UNARYRIGHT node when
both seventhops and operand are present, because seventhops is
optional.

Using:
unaryright options{backtrack = true;}
:  operand seventhops -> ^(UNARYRIGHT seventhops operand)
|  operand
;

works in the debugger, but not in the interpreter, and I'd prefer to
do this without backtracking if at all possible.

Any help is greatly appreciated,
S M Bogan

From dave at badgers-in-foil.co.uk  Mon Jan 21 09:28:19 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Mon, 21 Jan 2008 17:28:19 +0000
Subject: [antlr-interest] rewrite rules
In-Reply-To: <31160efe0801210919s5d946d27s20620b5f64192cbd@mail.gmail.com>
References: <31160efe0801210919s5d946d27s20620b5f64192cbd@mail.gmail.com>
Message-ID: <20080121172818.GA21489@badgers-in-foil.co.uk>

On Mon, Jan 21, 2008 at 11:19:00AM -0600, Shaun Bogan wrote:
> unaryright
> :  operand seventhops? -> ^(UNARYRIGHT seventhops? operand)
> ;
> 
> I am trying to get my grammar to only make the UNARYRIGHT node when
> both seventhops and operand are present, because seventhops is
> optional.

Untested:


  unaryright
	:	(operand -> operand)
		(
			seventhops -> UNARYRIGHT seventhops $unaryright
		|	           -> $unaryright
		)

ta,
dave

-- 
http://david.holroyd.me.uk/

From jan.sture.nielsen at gmail.com  Mon Jan 21 09:32:11 2008
From: jan.sture.nielsen at gmail.com (Jan Nielsen)
Date: Mon, 21 Jan 2008 10:32:11 -0700
Subject: [antlr-interest] ANTLR NUB
Message-ID: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>

Hello all,

I am a completely non-useful body when it comes to ANTLR, and grammars
in general. But I have a problem which smells like I could solve with
the help of ANTLR, but I'm finding myself leaning away from it after
reading The Definitive Guide...I think I would benefit greatly from
Ter's forthcoming recipe book...I apologize for pedantic nature and
the length of this email.

I am hoping to get a little advice from you ANTLR experts of the ilk -
"why are you doing that?!?" or "there is a better way...". So, let me
describe what I need:

I have a simple API need:

  List<Date> getValidDates(
    String expression
    );

where "expression" is a simple domain specific language of the form:

  from <start-date> [to <end-date>]
    [excluding <period> [, <period>]]
    [including <period> [, <period>]]

and <period> take a couple of forms: a specific date, a date range, a
day of week, or a range of days of week, a month, or a range of
months:

  "21/January/2008"
  "21/January/2008-28/January/2008"
  "Monday-Thursday"
  "June-July"
  "Monday[3]/January"

I would also like to support pre-defined dates, like "Dr. Martin
Luther King Day" which is defined at the "third Monday of January".

Here are a few examples of valid expressions:

  "from 1-January-2008"
  "from 1-January-2008 to 1-January-2009"
  "from 1-January-2008 to 1-January-2009 excluding 21-January-2008"
  "from 1-January-2008 to 1-January-2009 excluding 21-January-2008"
  "from 1-January-2008 to 1-January-2009 excluding Thursday-Sunday"
  "from 1-January-2008 to 1-January-2009 excluding Thursday-Sunday
including June-July"
  "from 1-January-2008 to 1-January-2009 excluding Monday-Thursday
including 21-January-2008"
  "from 1-January-2008 to 1-January-2009 excluding Monday-Thursday
including 'Dr. Martin Luther King Day'"

A "including" after an "excluding", i.e., to the right of, overrides
the exclusion.

My first stab at a grammar:

grammar T;

prog
    : 'from' date ('to' date)?
      ('including' period)? (',' period)*
      ('excluding' period)? (',' period)*
    ;

date
    : DAY_OF_MONTH '/' MONTH '/' YEAR
    ;

period
    : day_of_month_period
    | day_of_week_period
    ;

day_of_month_period
    : DAY_OF_MONTH (MONTH)? (YEAR)?
    ;

day_of_week_period
    : DAY_OF_WEEK ('[' OCCURRENCE ']')? (YEAR)?
    ;

OCCURRENCE
    : '1'..'4'
    ;

YEAR
    : '1'..'9' '0'..'9' '0'..'9' '0'..'9'
    ;

MONTH
    : 'January'
    | 'February'
    | 'March'
    | 'April'
    | 'May'
    | 'June'
    | 'July'
    | 'August'
    | 'September'
    | 'October'
    | 'November'
    | 'December'
    ;

DAY_OF_MONTH : '1'..'9' | '1'..'2' '0'..'9' | '30' | '31';

DAY_OF_WEEK
    : 'Monday'
    | 'Tuesday'
    | 'Wednesday'
    | 'Thursday'
    | 'Friday'
    | 'Saturday'
    | 'Sunday'
    ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;

COMMENT
    :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    ;

You, unlike me, may be able to see that this does not work. The
parsing of date is unsuccessful. And the range construct is not
represented either. I think these issues are solvable, it'll just take
me a while. But once I have a parser for my expression, how do I
actually use the parser to implement my API???

To answer this question I used gUnit to generate a JUnit test (see
below) for me from which I learned how I can hook-in the parser, but
I'm a bit worried about the apparent parser API needs. Specifically,
I'm worried about the vacuuming needed to get the results back to an
API. Is there a better way to integrate the parser into my program?
Once I have the parser integrated, my plan is to process each of these
dates to spit out the date list...is that the right way to do it?

Any help you can provide is greatly appreciated.

-Jan


gunit T;

prog
    :
    << "from 12/February/2008" >> OK
    << "from 12/February/2008 to 1/March/2009" >> OK

which produces JUnit code of the form:

import junit.framework.TestCase;
import java.io.*;
import java.lang.reflect.*;
import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;

public class TestT extends TestCase {
	String stdout;
	String stderr;

	public void testProg1() throws Exception {
		// test input: " "from 12/February/2008" "
		Object retval = execParser("prog", "from 12/February/2008", false);
		Object actual = examineParserExecResult(27, retval);
		Object expecting = "OK";

		assertEquals("testing rule " + "prog", expecting, actual);
	}

	public void testProg2() throws Exception {
		// test input: " "from 12/February/2008 to 1/March/2009" "
		Object retval = execParser("prog",
				"from 12/February/2008 to 1/March/2009", false);
		Object actual = examineParserExecResult(27, retval);
		Object expecting = "OK";

		assertEquals("testing rule prog", expecting, actual);
	}

	// Invoke target parser.rule
	public Object execParser(String testRuleName, String testInput,
			boolean isFile) throws Exception {
		CharStream input;
		/** Set up ANTLR input stream based on input source, file or String */
		if (isFile == true) {
			input = new ANTLRFileStream(testInput);
		} else {
			input = new ANTLRStringStream(testInput);
		}
		try {
			TLexer lexer = new TLexer(input);
			CommonTokenStream tokens = new CommonTokenStream(lexer);
			TParser parser = new TParser(tokens);
			/** Use Reflection to get rule method from parser */
			Method ruleName = Class.forName("TParser").getMethod(testRuleName);

			/** Start of I/O Redirecting */
			PipedInputStream pipedIn = new PipedInputStream();
			PipedOutputStream pipedOut = new PipedOutputStream();
			PipedInputStream pipedErrIn = new PipedInputStream();
			PipedOutputStream pipedErrOut = new PipedOutputStream();
			try {
				pipedOut.connect(pipedIn);
				pipedErrOut.connect(pipedErrIn);
			} catch (IOException e) {
				System.err.println("connection failed...");
				System.exit(1);
			}
			PrintStream console = System.out;
			PrintStream consoleErr = System.err;
			PrintStream ps = new PrintStream(pipedOut);
			PrintStream ps2 = new PrintStream(pipedErrOut);
			System.setOut(ps);
			System.setErr(ps2);
			/** End of redirecting */

			/** Invoke grammar rule, and store if there is a return value */
			Object ruleReturn = ruleName.invoke(parser);
			String astString = null;
			/** If rule has return value, determine if it's an AST */
			if (ruleReturn != null) {
				/** If return object is instanceof AST, get the toStringTree */
				if (ruleReturn.toString().indexOf(testRuleName + "_return") > 0) {
					try { // NullPointerException may happen here...
						Class _return = Class.forName("TParser" + "$"
								+ testRuleName + "_return");
						Method[] methods = _return.getDeclaredMethods();
						for (Method method : methods) {
							if (method.getName().equals("getTree")) {
								Method returnName = _return
										.getMethod("getTree");
								CommonTree tree = (CommonTree) returnName
										.invoke(ruleReturn);
								astString = tree.toStringTree();
							}
						}
					} catch (Exception e) {
						System.err.println(e);
					}
				}
			}

			org.antlr.gunit.gUnitExecuter.StreamVacuum stdoutVacuum = new
org.antlr.gunit.gUnitExecuter.StreamVacuum(
					pipedIn);
			org.antlr.gunit.gUnitExecuter.StreamVacuum stderrVacuum = new
org.antlr.gunit.gUnitExecuter.StreamVacuum(
					pipedErrIn);
			ps.close();
			ps2.close();
			System.setOut(console); // Reset standard output
			System.setErr(consoleErr); // Reset standard err out
			this.stdout = null;
			this.stderr = null;
			stdoutVacuum.start();
			stderrVacuum.start();
			stdoutVacuum.join();
			stderrVacuum.join();
			// retVal could be actual return object from rule, stderr or stdout
			if (stderrVacuum.toString().length() > 0) {
				this.stderr = stderrVacuum.toString();
				return this.stderr;
			}
			if (stdoutVacuum.toString().length() > 0) {
				this.stdout = stdoutVacuum.toString();
			}
			if (astString != null) { // Return toStringTree of AST
				return astString;
			}
			if (ruleReturn != null) {
				return ruleReturn;
			}
			if (stderrVacuum.toString().length() == 0
					&& stdoutVacuum.toString().length() == 0) {
				return null;
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (SecurityException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (IllegalAccessException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (InvocationTargetException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (InterruptedException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
		return stdout;
	}

	// Modify the return value if the expected token type is OK or FAIL
	public Object examineParserExecResult(int tokenType, Object retVal) {
		if (tokenType == 27) { // expected Token: OK
			if (this.stderr == null) {
				return "OK";
			} else {
				return "FAIL";
			}
		} else if (tokenType == 28) { // expected Token: FAIL
			if (this.stderr != null) {
				return "FAIL";
			} else {
				return "OK";
			}
		} else { // return the same object for the other token types
			return retVal;
		}
	}

}

From jan.sture.nielsen at gmail.com  Mon Jan 21 10:08:59 2008
From: jan.sture.nielsen at gmail.com (Jan Nielsen)
Date: Mon, 21 Jan 2008 11:08:59 -0700
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
Message-ID: <f79c7d4d0801211008x5f7debb2i29facd7340cfbaf3@mail.gmail.com>

Um, of course that should have been:

 "from 1/January/2008"
 "from 1/January/2008 to 1/January/2009"
 "from 1/January/2008 to 1/January/2009 excluding 21/January/2008"
 "from 1/January/2008 to 1/January/2009 excluding 21/January/2008"
 "from 1/January/2008 to 1/January/2009 excluding Thursday-Sunday"
 "from 1/January/2008 to 1/January/2009 excluding Thursday-Sunday
including June-July"
 "from 1/January/2008 to 1/January/2009 excluding Monday-Thursday
including 21/January/2008"
 "from 1/January/2008 to 1/January/2009 excluding Monday-Thursday
including 'Dr. Martin Luther King Day'"

And I could have been more clear on my parser API usage question. I am
envisioning something like this:

  public final List<Date> getValidDates(
      final String expression
      )
  {
      CommonTree expressionAst = execParser(
          expression
      );

      // Process the AST here, presumably...but how???
      // ...???

      return <list-of-valid-dates>;
  }

  private CommonTree execParser(
      final String expression
      )
  {
    //similar to gUnit's JUnit...but return the AST instead.
  }

On Jan 21, 2008 10:32 AM, Jan Nielsen <jan.sture.nielsen at gmail.com> wrote:
> Hello all,
>
> I am a completely non-useful body when it comes to ANTLR, and grammars
> in general. But I have a problem which smells like I could solve with
> the help of ANTLR, but I'm finding myself leaning away from it after
> reading The Definitive Guide...I think I would benefit greatly from
> Ter's forthcoming recipe book...I apologize for pedantic nature and
> the length of this email.
>
> I am hoping to get a little advice from you ANTLR experts of the ilk -
> "why are you doing that?!?" or "there is a better way...". So, let me
> describe what I need:
>
> I have a simple API need:
>
>   List<Date> getValidDates(
>     String expression
>     );
>
> where "expression" is a simple domain specific language of the form:
>
>   from <start-date> [to <end-date>]
>     [excluding <period> [, <period>]]
>     [including <period> [, <period>]]
>
> and <period> take a couple of forms: a specific date, a date range, a
> day of week, or a range of days of week, a month, or a range of
> months:
>
>   "21/January/2008"
>   "21/January/2008-28/January/2008"
>   "Monday-Thursday"
>   "June-July"
>   "Monday[3]/January"
>
> I would also like to support pre-defined dates, like "Dr. Martin
> Luther King Day" which is defined at the "third Monday of January".
>
> Here are a few examples of valid expressions:
>
>   "from 1-January-2008"
>   "from 1-January-2008 to 1-January-2009"
>   "from 1-January-2008 to 1-January-2009 excluding 21-January-2008"
>   "from 1-January-2008 to 1-January-2009 excluding 21-January-2008"
>   "from 1-January-2008 to 1-January-2009 excluding Thursday-Sunday"
>   "from 1-January-2008 to 1-January-2009 excluding Thursday-Sunday
> including June-July"
>   "from 1-January-2008 to 1-January-2009 excluding Monday-Thursday
> including 21-January-2008"
>   "from 1-January-2008 to 1-January-2009 excluding Monday-Thursday
> including 'Dr. Martin Luther King Day'"
>
> A "including" after an "excluding", i.e., to the right of, overrides
> the exclusion.
>
> My first stab at a grammar:
>
> grammar T;
>
> prog
>     : 'from' date ('to' date)?
>       ('including' period)? (',' period)*
>       ('excluding' period)? (',' period)*
>     ;
>
> date
>     : DAY_OF_MONTH '/' MONTH '/' YEAR
>     ;
>
> period
>     : day_of_month_period
>     | day_of_week_period
>     ;
>
> day_of_month_period
>     : DAY_OF_MONTH (MONTH)? (YEAR)?
>     ;
>
> day_of_week_period
>     : DAY_OF_WEEK ('[' OCCURRENCE ']')? (YEAR)?
>     ;
>
> OCCURRENCE
>     : '1'..'4'
>     ;
>
> YEAR
>     : '1'..'9' '0'..'9' '0'..'9' '0'..'9'
>     ;
>
> MONTH
>     : 'January'
>     | 'February'
>     | 'March'
>     | 'April'
>     | 'May'
>     | 'June'
>     | 'July'
>     | 'August'
>     | 'September'
>     | 'October'
>     | 'November'
>     | 'December'
>     ;
>
> DAY_OF_MONTH : '1'..'9' | '1'..'2' '0'..'9' | '30' | '31';
>
> DAY_OF_WEEK
>     : 'Monday'
>     | 'Tuesday'
>     | 'Wednesday'
>     | 'Thursday'
>     | 'Friday'
>     | 'Saturday'
>     | 'Sunday'
>     ;
>
> WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
>     ;
>
> COMMENT
>     :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
>     ;
>
> LINE_COMMENT
>     : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
>     ;
>
> You, unlike me, may be able to see that this does not work. The
> parsing of date is unsuccessful. And the range construct is not
> represented either. I think these issues are solvable, it'll just take
> me a while. But once I have a parser for my expression, how do I
> actually use the parser to implement my API???
>
> To answer this question I used gUnit to generate a JUnit test (see
> below) for me from which I learned how I can hook-in the parser, but
> I'm a bit worried about the apparent parser API needs. Specifically,
> I'm worried about the vacuuming needed to get the results back to an
> API. Is there a better way to integrate the parser into my program?
> Once I have the parser integrated, my plan is to process each of these
> dates to spit out the date list...is that the right way to do it?
>
> Any help you can provide is greatly appreciated.
>
> -Jan
>
>
> gunit T;
>
> prog
>     :
>     << "from 12/February/2008" >> OK
>     << "from 12/February/2008 to 1/March/2009" >> OK
>
> which produces JUnit code of the form:
>
> import junit.framework.TestCase;
> import java.io.*;
> import java.lang.reflect.*;
> import org.antlr.runtime.*;
> import org.antlr.runtime.tree.*;
>
> public class TestT extends TestCase {
>         String stdout;
>         String stderr;
>
>         public void testProg1() throws Exception {
>                 // test input: " "from 12/February/2008" "
>                 Object retval = execParser("prog", "from 12/February/2008", false);
>                 Object actual = examineParserExecResult(27, retval);
>                 Object expecting = "OK";
>
>                 assertEquals("testing rule " + "prog", expecting, actual);
>         }
>
>         public void testProg2() throws Exception {
>                 // test input: " "from 12/February/2008 to 1/March/2009" "
>                 Object retval = execParser("prog",
>                                 "from 12/February/2008 to 1/March/2009", false);
>                 Object actual = examineParserExecResult(27, retval);
>                 Object expecting = "OK";
>
>                 assertEquals("testing rule prog", expecting, actual);
>         }
>
>         // Invoke target parser.rule
>         public Object execParser(String testRuleName, String testInput,
>                         boolean isFile) throws Exception {
>                 CharStream input;
>                 /** Set up ANTLR input stream based on input source, file or String */
>                 if (isFile == true) {
>                         input = new ANTLRFileStream(testInput);
>                 } else {
>                         input = new ANTLRStringStream(testInput);
>                 }
>                 try {
>                         TLexer lexer = new TLexer(input);
>                         CommonTokenStream tokens = new CommonTokenStream(lexer);
>                         TParser parser = new TParser(tokens);
>                         /** Use Reflection to get rule method from parser */
>                         Method ruleName = Class.forName("TParser").getMethod(testRuleName);
>
>                         /** Start of I/O Redirecting */
>                         PipedInputStream pipedIn = new PipedInputStream();
>                         PipedOutputStream pipedOut = new PipedOutputStream();
>                         PipedInputStream pipedErrIn = new PipedInputStream();
>                         PipedOutputStream pipedErrOut = new PipedOutputStream();
>                         try {
>                                 pipedOut.connect(pipedIn);
>                                 pipedErrOut.connect(pipedErrIn);
>                         } catch (IOException e) {
>                                 System.err.println("connection failed...");
>                                 System.exit(1);
>                         }
>                         PrintStream console = System.out;
>                         PrintStream consoleErr = System.err;
>                         PrintStream ps = new PrintStream(pipedOut);
>                         PrintStream ps2 = new PrintStream(pipedErrOut);
>                         System.setOut(ps);
>                         System.setErr(ps2);
>                         /** End of redirecting */
>
>                         /** Invoke grammar rule, and store if there is a return value */
>                         Object ruleReturn = ruleName.invoke(parser);
>                         String astString = null;
>                         /** If rule has return value, determine if it's an AST */
>                         if (ruleReturn != null) {
>                                 /** If return object is instanceof AST, get the toStringTree */
>                                 if (ruleReturn.toString().indexOf(testRuleName + "_return") > 0) {
>                                         try { // NullPointerException may happen here...
>                                                 Class _return = Class.forName("TParser" + "$"
>                                                                 + testRuleName + "_return");
>                                                 Method[] methods = _return.getDeclaredMethods();
>                                                 for (Method method : methods) {
>                                                         if (method.getName().equals("getTree")) {
>                                                                 Method returnName = _return
>                                                                                 .getMethod("getTree");
>                                                                 CommonTree tree = (CommonTree) returnName
>                                                                                 .invoke(ruleReturn);
>                                                                 astString = tree.toStringTree();
>                                                         }
>                                                 }
>                                         } catch (Exception e) {
>                                                 System.err.println(e);
>                                         }
>                                 }
>                         }
>
>                         org.antlr.gunit.gUnitExecuter.StreamVacuum stdoutVacuum = new
> org.antlr.gunit.gUnitExecuter.StreamVacuum(
>                                         pipedIn);
>                         org.antlr.gunit.gUnitExecuter.StreamVacuum stderrVacuum = new
> org.antlr.gunit.gUnitExecuter.StreamVacuum(
>                                         pipedErrIn);
>                         ps.close();
>                         ps2.close();
>                         System.setOut(console); // Reset standard output
>                         System.setErr(consoleErr); // Reset standard err out
>                         this.stdout = null;
>                         this.stderr = null;
>                         stdoutVacuum.start();
>                         stderrVacuum.start();
>                         stdoutVacuum.join();
>                         stderrVacuum.join();
>                         // retVal could be actual return object from rule, stderr or stdout
>                         if (stderrVacuum.toString().length() > 0) {
>                                 this.stderr = stderrVacuum.toString();
>                                 return this.stderr;
>                         }
>                         if (stdoutVacuum.toString().length() > 0) {
>                                 this.stdout = stdoutVacuum.toString();
>                         }
>                         if (astString != null) { // Return toStringTree of AST
>                                 return astString;
>                         }
>                         if (ruleReturn != null) {
>                                 return ruleReturn;
>                         }
>                         if (stderrVacuum.toString().length() == 0
>                                         && stdoutVacuum.toString().length() == 0) {
>                                 return null;
>                         }
>                 } catch (ClassNotFoundException e) {
>                         e.printStackTrace();
>                         System.exit(1);
>                 } catch (SecurityException e) {
>                         e.printStackTrace();
>                         System.exit(1);
>                 } catch (NoSuchMethodException e) {
>                         e.printStackTrace();
>                         System.exit(1);
>                 } catch (IllegalAccessException e) {
>                         e.printStackTrace();
>                         System.exit(1);
>                 } catch (InvocationTargetException e) {
>                         e.printStackTrace();
>                         System.exit(1);
>                 } catch (InterruptedException e) {
>                         e.printStackTrace();
>                         System.exit(1);
>                 } catch (Exception e) {
>                         e.printStackTrace();
>                         System.exit(1);
>                 }
>                 return stdout;
>         }
>
>         // Modify the return value if the expected token type is OK or FAIL
>         public Object examineParserExecResult(int tokenType, Object retVal) {
>                 if (tokenType == 27) { // expected Token: OK
>                         if (this.stderr == null) {
>                                 return "OK";
>                         } else {
>                                 return "FAIL";
>                         }
>                 } else if (tokenType == 28) { // expected Token: FAIL
>                         if (this.stderr != null) {
>                                 return "FAIL";
>                         } else {
>                                 return "OK";
>                         }
>                 } else { // return the same object for the other token types
>                         return retVal;
>                 }
>         }
>
> }
>

From antlr at mirality.co.nz  Mon Jan 21 10:54:51 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 22 Jan 2008 07:54:51 +1300
Subject: [antlr-interest] org.antlr.Tool options
In-Reply-To: <f0fcc6820801210633y428efd51jaaf95e68b9cd2bd0@mail.gmail.co
 m>
References: <f0fcc6820801210633y428efd51jaaf95e68b9cd2bd0@mail.gmail.com>
Message-ID: <20080121190144.4737011EBCB@www.antlr.org>

At 03:33 22/01/2008, Mark Volkmann wrote:
 >
 >If I understand correctly, the -o options tells it where
 >to write generated .java and .tokens files and the -lib
 >option tells it where the generated code should look for
 >.tokens files.
 >
 >When would you every want the values for -o and -lib to be
 >different?

Maybe you've got the lexer and parser grammars in different 
folders, and want to keep it that way?  Maybe you've got 
lexer/parser in one folder, and tree parsers in different 
folders?  Perhaps there's some common tree parser shared by 
multiple lexer/parsers, so it's in the "common" folder rather than 
the "app-specific" folder?


From xverges at gmail.com  Mon Jan 21 11:03:22 2008
From: xverges at gmail.com (Xavier)
Date: Mon, 21 Jan 2008 20:03:22 +0100
Subject: [antlr-interest] Inconsistent line ending in generated c# files
Message-ID: <6cf1e0bb0801211103tbb704edu4f5e0d8e26a3abfd@mail.gmail.com>

The generated c# seem to have both lines ending with LF and with CRLF.
For instance, in the generated Lexer, the token names and their
associated constants are separated/line ended by LF, while the rest of
the code uses CRLF.

Am I missing some conflig flag, or it is just a minor bug/ugliness?

Thanks.

-Xavier

From john at jacelridge.com  Mon Jan 21 11:22:58 2008
From: john at jacelridge.com (John Ridgway)
Date: Mon, 21 Jan 2008 14:22:58 -0500
Subject: [antlr-interest] rewrite rules
In-Reply-To: <20080121172818.GA21489@badgers-in-foil.co.uk>
References: <31160efe0801210919s5d946d27s20620b5f64192cbd@mail.gmail.com>
	<20080121172818.GA21489@badgers-in-foil.co.uk>
Message-ID: <679B8C6B-DC91-44CD-9472-E06DEE617F99@jacelridge.com>

Actually the following ought to work, I believe (also untested):
  unaryright
	:	(operand -> operand)
		(   seventhops -> UNARYRIGHT seventhops $unaryright )?


Peace
- John


On Jan 21, 2008, at 12:28 PM, David Holroyd wrote:

> On Mon, Jan 21, 2008 at 11:19:00AM -0600, Shaun Bogan wrote:
>> unaryright
>> :  operand seventhops? -> ^(UNARYRIGHT seventhops? operand)
>> ;
>>
>> I am trying to get my grammar to only make the UNARYRIGHT node when
>> both seventhops and operand are present, because seventhops is
>> optional.
>
> Untested:
>
>
>  unaryright
> 	:	(operand -> operand)
> 		(
> 			seventhops -> UNARYRIGHT seventhops $unaryright
> 		|	           -> $unaryright
> 		)
>
> ta,
> dave
>
> -- 
> http://david.holroyd.me.uk/


From antlr at jazillian.com  Mon Jan 21 11:37:41 2008
From: antlr at jazillian.com (Andy Tripp)
Date: Mon, 21 Jan 2008 14:37:41 -0500
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
Message-ID: <4794F485.9000606@jazillian.com>

Hi Jan,

It looks to me like you've got overlapping rules for numbers in your 
lexer rules.
Try replacing OCCURRENCE, YEAR, and DAY_OF_MONTH with a single rule for 
handling numbers:

NUMBER: ('0'..'9)*;

As for the general question of "what to do?"...
Use the "buildAST=true" option to have the ANTLR parser produce an AST.
It will look something like this:

DATE_EXPR
    FROM
          DATE "1-January-2008"
    TO
          DATE "20-January-2008"
    EXCLUDING
          PERIOD
               DATE "Monday"
               DATE "Friday"
    INCLUDING
          PERIOD
               DATE "Monday"

What I'd do is create and then modify a List of Dates
as you process the AST. Something like this:

List<Date> getValidDates(AST dateExpr) {
    Date fromDate, toDate;
    List<Date> dates = new ArrayList<Date>();
    AST from = dateExpr.getFirstChild();
    dates.add(parseDate(from.getFirstChild())); // first date in the 
List is always from date

    Date toDate = null;

    AST to = dateExpr.getNextSibling();
    if (ast.getType() == TO) {
         toDate = parseDate(from.getFirstChild())); // we have a to date
    }
    dates.addAll(expand(dates, fromDate, toDate));   // write the 
expand() method - toDate is null means "to the end of time"

    AST theRest;
    if (ast.getType() == TO) {
        theRest = to.getNextSibling();
     } else {
        theRest = to;
    }
    while (theRest != null) {
        if (theRest.getType() == EXCLUDING) {
              exclude(dates, theRest);  // write the exclude() method
        }
        if (theRest.getType() == INCLUDING) {
              include(dates, theRest);  // write the include() method
        }
        theRest = theRest.getNextSibling();
    }
    return dates;
}
       
As you can see, this is plain old boring Java code that does the simple 
"walking" of the AST.
The other, fancier, way to do it would be to use an ANTLR tree grammar.

Andy

From antlr at mirality.co.nz  Mon Jan 21 11:31:30 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 22 Jan 2008 08:31:30 +1300
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.co
 m>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
Message-ID: <20080121193826.C00EA11EB4F@www.antlr.org>

At 06:32 22/01/2008, Jan Nielsen wrote:
 >
 >Here are a few examples of valid expressions:
 >
 > "from 1/January/2008"
 > "from 1/January/2008 to 1/January/2009"
 > "from 1/January/2008 to 1/January/2009 excluding 
21/January/2008"
 > "from 1/January/2008 to 1/January/2009 excluding 
21/January/2008"
 > "from 1/January/2008 to 1/January/2009 excluding 
Thursday-Sunday"
 > "from 1/January/2008 to 1/January/2009 excluding 
Thursday-Sunday
 >including June-July"
 > "from 1/January/2008 to 1/January/2009 excluding 
Monday-Thursday
 >including 21/January/2008"
 > "from 1/January/2008 to 1/January/2009 excluding 
Monday-Thursday
 >including 'Dr. Martin Luther King Day'"
 >
 >A "including" after an "excluding", i.e., to the right of,
 >overrides the exclusion.

Is it permitted to have repeated clauses?  ie. "from X including A 
excluding B including C"?

 >prog
 >    : 'from' date ('to' date)?
 >      ('including' period)? (',' period)*
 >      ('excluding' period)? (',' period)*
 >    ;

This enforces an order between "including" and "excluding"; one 
which doesn't match your examples above.  At minimum to get the 
examples to work (and assuming repeated clauses are not permitted) 
you'll need to reverse these.

Also your scoping on the comma-separated bits is wrong; this 
should be inside the optional clause (otherwise it doesn't make 
much sense).  So:

prog
   : 'from' date ('to' date)? excluding_clause? including_clause?
   ;

excluding_clause
   : 'excluding' period (',' period)*
   ;

including_clause
   : 'including' period (',' period)*
   ;

 >day_of_month_period
 >    : DAY_OF_MONTH (MONTH)? (YEAR)?
 >    ;
 >
 >day_of_week_period
 >    : DAY_OF_WEEK ('[' OCCURRENCE ']')? (YEAR)?
 >    ;

Shouldn't these have slashes?  You're also not covering other 
types of constructs permitted by your examples.

 >OCCURRENCE
 >    : '1'..'4'
 >    ;
 >
 >YEAR
 >    : '1'..'9' '0'..'9' '0'..'9' '0'..'9'
 >    ;
[...]
 >DAY_OF_MONTH : '1'..'9' | '1'..'2' '0'..'9' | '30' | '31';

You can't do this.  The most important thing to remember is that 
all lexing is done up front with no input from the parser (since 
the parser doesn't even exist yet).  Thus any non-fragment tokens 
become independent candidates for output.  Facing a '3' in the 
input stream, it could match any one of these rules; given no 
clear preference ANTLR will choose the first listed and generate 
an OCCURRENCE token, which you're not accepting when it finally 
does reach the parser.

At the lexer level you should just recognise basic integers, and 
then validate them based on context in the parser:

NUMBER: ('0'..'9')+;

occurrence: n=NUMBER { validateOccurrence($n.text); }?;
year: n=NUMBER { validateYear($n.text); }?;
day_of_month: n=NUMBER { validateDayOfMonth($n.text); }?;

 > But once I have a parser for my expression, how do I actually
 > use the parser to implement my API???

There are two common ways to do this.  One is to output an AST 
from the parser, which in your case could end up looking something 
like this (expressed in string form):
   ^(FROM ^(DATE 1 January 2008) ^(DATE 1 January 2009) 
^(EXCLUDING ^(DAY ^(RANGE Monday Thursday))) ^(INCLUDING ^(DAY 
"Dr. Martin Luther King Day"))

(Of course the exact syntax is variable; you can put in what you 
want for the most part, although a certain structure will be 
dictated by how the rules are organised.)  Then you can just write 
tree-walking code to call your various API functions as 
appropriate.  (Or even write a tree parser, though that's usually 
unnecessary.)

Another approach is to simply include the action code as you are 
parsing.  For example:

excluding_clause
   : 'excluding' p=period { addExclusion($p.result); }
     (',' p=period { addExclusion($p.result); } )*
   ;

Of course for this to work, you'll need to also enhance the period 
and date rules with 'returns' clauses, which create a data 
structure that describes what they have just recognised.


From jaluber at gmx.de  Mon Jan 21 11:47:41 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 21 Jan 2008 20:47:41 +0100
Subject: [antlr-interest] Inconsistent line ending in generated c# files
In-Reply-To: <6cf1e0bb0801211103tbb704edu4f5e0d8e26a3abfd@mail.gmail.com>
References: <6cf1e0bb0801211103tbb704edu4f5e0d8e26a3abfd@mail.gmail.com>
Message-ID: <4794F6DD.50404@gmx.de>

Xavier schrieb:
> The generated c# seem to have both lines ending with LF and with CRLF.
> For instance, in the generated Lexer, the token names and their
> associated constants are separated/line ended by LF, while the rest of
> the code uses CRLF.
> 
> Am I missing some conflig flag, or it is just a minor bug/ugliness?

That is some ugliness, which should be have been removed for 3.1. At 
least at those files, where I encountered it. Probably for all string 
template files, I've touched, if my editor standardizes the line endings 
on its own accord. The actual cause? A Perforce feature/bug, depending 
on whom you ask.

Johannes

From antlr at mirality.co.nz  Mon Jan 21 11:46:05 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 22 Jan 2008 08:46:05 +1300
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <4794F485.9000606@jazillian.com>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
	<4794F485.9000606@jazillian.com>
Message-ID: <20080121194811.D8E7F11EB20@www.antlr.org>

At 08:37 22/01/2008, Andy Tripp wrote:
 >
 >Try replacing OCCURRENCE, YEAR, and DAY_OF_MONTH with a single 
rule
 >for handling numbers:
 >
 >NUMBER: ('0'..'9)*;

Yeah, that's another thing you need to watch out for: never have a 
top-level lexer rule that can match nothing.  (It leads to 
infinite loops, since it can always match nothing without 
advancing the input stream.)

So you need to use + in preference to *, as I said earlier :)


From xverges at gmail.com  Mon Jan 21 11:59:43 2008
From: xverges at gmail.com (Xavier)
Date: Mon, 21 Jan 2008 20:59:43 +0100
Subject: [antlr-interest] Escape chars in templates within grammar files
Message-ID: <6cf1e0bb0801211159xa5c9dc0x549d769d0b87a6ae@mail.gmail.com>

I'm using
options {
        language=CSharp;
        output=template;
        rewrite=true;
}
and would like to use new lines in the templates that are inlined in
the grammar file.

My understanding was that I should use <\n> in the template, but it is
causing an error:

ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
    error(10):  internal error: LineTest.g : LineTest.g:29:17:
expecting '"', found 'n'
    org.antlr.tool.ANTLRLexer.nextToken(ANTLRLexer.java:321)
    antlr.TokenStreamRewriteEngine.nextToken(TokenStreamRewriteEngine.java:161)
    ...

(LineTest.g:29:17 is the "n" in <\n>)
line:	foo NewLine -> template()
			       "LINE<\n>";

Am I missing something, or is this a bug? And if it is, any suggestion
to bypass it?

Thanks in advance.

-Xavier

From jimi at temporal-wave.com  Mon Jan 21 11:55:57 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 21 Jan 2008 11:55:57 -0800
Subject: [antlr-interest] rewrite rules
In-Reply-To: <31160efe0801210919s5d946d27s20620b5f64192cbd@mail.gmail.com>
Message-ID: <"L467FECECA8FB4f299E9DDA56FD57A550.1200946580.scalix.temporal-wave.com*"@MHS>

unaryright
:  operand st=seventhops? 

      -> {$st==null}? ^(UNARYRIGHT operand)
      ->              ^(UNARYRIGHT $st+ operand)
;



> -----Original Message-----
> From: Shaun Bogan [mailto:smbogan at gmail.com]
> Sent: Monday, January 21, 2008 9:19 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] rewrite rules
> 
> unaryright
> :  operand seventhops? -> ^(UNARYRIGHT seventhops? operand)
> ;
> 
> I am trying to get my grammar to only make the UNARYRIGHT node when
> both seventhops and operand are present, because seventhops is
> optional.
> 
> Using:
> unaryright options{backtrack = true;}
> :  operand seventhops -> ^(UNARYRIGHT seventhops operand)
> |  operand
> ;
> 
> works in the debugger, but not in the interpreter, and I'd prefer to
> do this without backtracking if at all possible.
> 
> Any help is greatly appreciated,
> S M Bogan



From aheller at gmx.at  Mon Jan 21 13:27:45 2008
From: aheller at gmx.at (Arnulf Heller)
Date: Mon, 21 Jan 2008 22:27:45 +0100
Subject: [antlr-interest] target language independent action code
In-Reply-To: <20080121132219.00006ea2@goanna>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
	<20080121132219.00006ea2@goanna>
Message-ID: <20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>

Hi Mark,

> > hi,
> >
> > I know this topic was discussed a couple of times here ...
> >
> > But as far as I know there is no solution available right now
> > (possibly apart from Loring Cramers yggdrasil).
> >
> > I think target language independent action code would be of great
> > help because:
> >
> > 1. ANTLR provides a steadily growing foundation of grammars for
> > various languages (which is very cool). Unfortunately its almost
> > certain that the grammar targets a different language ...
> > 2. Action code clutters the readability of the grammar - especially
> > if its in a target language that you don't know.
>
>Hello Arnulf,
>
>The normal approach to avoid cluttering the grammar is to just
>have one line of action code that calls a method in in target
>language.

Ok, I know that trick ;-) But do function invocations look the same 
in every target language? I don't think so.

>
> > Because ANTLR changes a lot over time, action code should be embedded
> > into ANTLR directly with "on board" tools.
>
>For a parser for a large language the ANTLR generated parser file
>is already too large (2.5MB in my case) for the Netbeans debugger
>to open when it only has at most one line in each action.  To
>then go and embed the action code would stop me from being able to
>debug it at all.  Even if the debugger could handle it, there is
>no way I want to go searching through megabytes of generated
>parser code looking for the place to set my breakpoint.

Good point. I assume it is no problem to wrap the in-place action 
with a function call, e.g.:

myrule : ID [ DictAdd(ID) ] ;

could translate to

myrule_action1(ID) { dictionary.add(ID); }

and a call of myrule_action1 in the code for rule myrule.
Then you have a change to place a breakpoint there.


> > So why not use these wonderful string templates?
> >
> > Instead of writing
> >
> > { myDict.add($ID.text()); }
> >
> > one could write for instance
> >
> > [ DictAdd(ID) ]
> >
> > which ANTLR could translate on the fly to target language code at
> > that position.
>
>In practice the action code for a compiler for a large
>language is thousands of lines of code just for entering the
>information into a symbol table, which for an object orientated
>language is a DAG (Directed Acyclic Graph), for looking up
>information in the symbol table, etc.  It would be inconvenient
>to develop and debug this using string templates.

Yes, but exactly that is the best argument for providing such a base 
functionality!
I have been a little imprecise here: I do not suggest that everything 
needs to be done with string templates.
Especially a data structure like a dictionary should be part of the 
runtime; members and functions that come with the BaseParser (in its 
respective target language - needless to say)
The string template just triggers that member functions.

Only specialized action code that is not covered by base 
functionality needs to be provided by the grammar designer.

But the question is:
Are concepts like dictionaries, lists, maps etc. really so different 
between different grammars?
Ok, there are scoping rules and the like but in principle they do the same.
I don't know, I never designed such a huge grammar.

But take a look into smaller grammars like CMinus.g
I think it does not take too much to make that target language agnostic.

>
> > Then the writer of the grammar needs to provide a string template
> > group (with a template "DictAdd") which performs the translation to
> > "his" target language.
> > This way targetting a different language amounts to rewriting the
> > string template group.
> > This does not alter the original grammar and will hopefully be
> > posted :-)
> >
> > The target language folks even could provide a minimal toolset for
> > dictionaries and the like.
>
>A dictionary is insufficient for a symbol table for an object
>orientated language.  It would be impractical for the target language
>developers to anticipate the symbol table language requirements for
>evey conceivable language.

ok, thats bad news. My memory of compiler construction lessons fade 
away slowly, but what makes it hard in your opinion to build some 
sort of universal symbol table? the scoping rules? keywords versus names?


> > If there is a good collection of tools,
> > the action code gets structured, documented and well known by the
> > time.
> >
> > What do you think?
>
>In my dreams I wish there was some magic way to automatically translate
>the Java ANTLR runtime and all my Java action code into C++ sometime
>in the future when the C++ runtime is available.

Don't know if that provides any comfort to you but I'm currently 
trying to port the Java runtime to C++. Not very demanding, I just 
rename keywords etc.
As far as I could see there are no Java specific features in there.
String processing and pointers vs. objects are annoying but no show stoppers.

Everytime I replace a java Object with a C++ pointer I get a steadily 
growing feeling that I need to test that sometimes :-)
And realizing that most example grammars use Java as target language 
(and action code) led me to this posting ...


>Back in real world, what I am doing at the moment is I develop all
>of my Java action code modelled in the freeware UML CASE tool called
>BOUML:
>
>http://bouml.free.fr/
>
>Then I hope that some time in the future that some other kind hearted
>masochists (not me, sorry, I am already one level of indirection away
>from real work) will develop a C++ ANTLR runtime including tree wizard,
>and C++ string template.

Ok, seems that I can't count on you :-)


>Thanks, Mark
>
>--

Bye!



From jaluber at gmx.de  Mon Jan 21 13:37:36 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 21 Jan 2008 22:37:36 +0100
Subject: [antlr-interest] target language independent action code
In-Reply-To: <20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>	<20080121132219.00006ea2@goanna>
	<20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>
Message-ID: <479510A0.8090502@gmx.de>

Arnulf Heller schrieb:
> And realizing that most example grammars use Java as target language 
> (and action code) led me to this posting ...

I'd like to point out that at the time of writing at least CSharp mimics 
every Java example. How C and ActionCode fare, I don't know but that 
counts puts Java examples - vs. examples in other languages - into the 
minority.

Johannes

From aheller at gmx.at  Mon Jan 21 13:46:36 2008
From: aheller at gmx.at (Arnulf Heller)
Date: Mon, 21 Jan 2008 22:46:36 +0100
Subject: [antlr-interest] target language independent action code
In-Reply-To: <479510A0.8090502@gmx.de>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
	<20080121132219.00006ea2@goanna>
	<20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>
	<479510A0.8090502@gmx.de>
Message-ID: <20080121214634.BXRB5957.viefep16-int.chello.at@edge.upc.biz>

At 22:37 21.01.2008, you wrote:
>Arnulf Heller schrieb:
>>And realizing that most example grammars use Java as target 
>>language (and action code) led me to this posting ...
>
>I'd like to point out that at the time of writing at least CSharp 
>mimics every Java example. How C and ActionCode fare, I don't know 
>but that counts puts Java examples - vs. examples in other languages 
>- into the minority.
>
>Johannes

Hm. Interesting. Taking a look into CMinus.g, I can understand that 
action code like

variable
     :   type declarator ';'
         -> {$function.size()>0 && $function::name==null}?
            globalVariable(type={$type.st},name={$declarator.st})
         -> variable(type={$type.st},name={$declarator.st})
     ;

declarator
     :   ID -> {new StringTemplate($ID.text)}
     ;

will work on most target languages. Thats because Terence already did 
the work in these cases (and I assume that there are hidden string 
templates that translate that). ANTLR translates the $variable tokens 
appropriately.

But I can not imagine that this works in C#, does it?

program
scope {
   List globals;
   List functions;
}
@init {
   $program::globals = new ArrayList();
   $program::functions = new ArrayList();
}
     :   declaration+
         -> 
program(globals={$program::globals},functions={$program::functions})
     ;

If it does then C# is indeed just a reincarnation of Java (or should 
I say relabel?) :-)

Arnulf


From sunshine at public.kherson.ua  Mon Jan 21 14:14:57 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 22 Jan 2008 00:14:57 +0200
Subject: [antlr-interest] ANTLRWorks, Internal ERROR with my grammar.
Message-ID: <C3BAE601.8B226%sunshine@public.kherson.ua>

> On 21/1/08 9:50 PM, "Ruslan Zasukhin" <sunshine at public.kherson.ua> wrote:
 
Hi Again,

>> * debugger even do not starts and show dialog about INTERNAL ERROR.
>>     see attached picture.

I have found reason why debugger fails to start.

For this I have start reduce our grammar as much as possible and have come
to this:

----------------------------------
grammar VSQL_Parser;

sql
    :    sql_single  EOF!
    ;

sql_single    : 'create' 'table' IDENT;

IDENT  :   ('a'..'z'|'A'..'Z')+ ;
INT :   '0'..'9'+ ;
NEWLINE:'\r'? '\n' ;
WS  :   (' '|'\t')+ {skip();} ;
----------------------------------

And we still get this internal error
Solution is to remove  !  Near to  EOF!

Its never mind where !  Is located.

For example this also produce this error sometimes. But on the second run it
seems works fine..


----------------------------------
grammar VSQL_Parser;

sql
    :    sql_single  EOF
    ;

sql_single    : 'create' 'table'! IDENT;

IDENT  :   ('a'..'z'|'A'..'Z')+ ;
INT :   '0'..'9'+ ;
NEWLINE:'\r'? '\n' ;
WS  :   (' '|'\t')+ {skip();} ;
----------------------------------


Why this happens?  My bug?  ANTRLWorks bug ?


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From jaluber at gmx.de  Mon Jan 21 14:20:47 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 21 Jan 2008 23:20:47 +0100
Subject: [antlr-interest] target language independent action code
In-Reply-To: <20080121214634.BXRB5957.viefep16-int.chello.at@edge.upc.biz>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
	<20080121132219.00006ea2@goanna>
	<20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>
	<479510A0.8090502@gmx.de>
	<20080121214634.BXRB5957.viefep16-int.chello.at@edge.upc.biz>
Message-ID: <47951ABF.8060905@gmx.de>

Arnulf Heller schrieb:
> Hm. Interesting. Taking a look into CMinus.g, I can understand that 
> action code like
> 
> variable
>     :   type declarator ';'
>         -> {$function.size()>0 && $function::name==null}?
>            globalVariable(type={$type.st},name={$declarator.st})
>         -> variable(type={$type.st},name={$declarator.st})
>     ;
> 
> declarator
>     :   ID -> {new StringTemplate($ID.text)}
>     ;
> 
> will work on most target languages.

At least those based on C. Others like BASIC or Lisp will require 
changes. And CSharp doesn't know "size()" for arrays, but "Count". So 
there is some difference already.

> Thats because Terence already did 
> the work in these cases (and I assume that there are hidden string 
> templates that translate that). ANTLR translates the $variable tokens 
> appropriately.

Ter created the example and someone else than me translated it to 
CSharp. So I don't know how much had to be changed there. In any case, 
the $-variables are parsed by ANTLR itself and don't need StringTemplate 
per se. But the actual output will use ST again.

> But I can not imagine that this works in C#, does it?
> 
> program
> scope {
>   List globals;
>   List functions;
> }
> @init {
>   $program::globals = new ArrayList();
>   $program::functions = new ArrayList();
> }
>     :   declaration+
>         -> 
> program(globals={$program::globals},functions={$program::functions})
>     ;
> 
> If it does then C# is indeed just a reincarnation of Java (or should I 
> say relabel?) :-)

It doesn't compile - you have to change List into IList first! :P 
Seriously, C# has lots of differences compared to Java, but these 
examples don't showcase them. E.g., Java doesn't have a using-statement 
and a bad support for generics and none for closures yet. Please read 
books about C# and Java first, before you go on to compare them.

Johannes

From lilypondtool at organum.hu  Mon Jan 21 15:45:25 2008
From: lilypondtool at organum.hu (Bertalan Fodor)
Date: Tue, 22 Jan 2008 00:45:25 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
Message-ID: <47952E95.7040601@organum.hu>

Hi,

I'm creating a parser with nested parser. To make it simple I tell you 
my problem as if I was doing Javadoc parsing inside a Java parser.
So I have this in my lexer:
JAVADOC: '/**' { JavadocParser javadocParser = new JavadocParser(new 
CommonTokenStream(new JavadocLexer(this.input))); 
javadocParser.rootRule(); }

The problem is that while this code correctly switches to the Javadoc 
lexer, and parses the Javadoc parts correctly, upon returning from the 
Javadoc parsing, the character stream is not correctly positioned.

Can you help me how to achieve the nested parsing in antlr 3?

Thank you very much,

Bertalan Fodor

ps I've already asked this on this list, but got no answer, so I tried 
to make my question more simple.

From parrt at cs.usfca.edu  Mon Jan 21 15:50:58 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 21 Jan 2008 15:50:58 -0800
Subject: [antlr-interest] ANTLRWorks, Internal ERROR with my grammar.
In-Reply-To: <C3BAE601.8B226%sunshine@public.kherson.ua>
References: <C3BAE601.8B226%sunshine@public.kherson.ua>
Message-ID: <D6A9C701-1E1E-4E8A-9853-C8832C25BE82@cs.usfca.edu>

Hi, this is a known ANTLR issue where it doesn't give a good message  
when you use ! or ^ and no output=AST option.

Ter
On Jan 21, 2008, at 2:14 PM, Ruslan Zasukhin wrote:

>> On 21/1/08 9:50 PM, "Ruslan Zasukhin" <sunshine at public.kherson.ua>  
>> wrote:
>
> Hi Again,
>
>>> * debugger even do not starts and show dialog about INTERNAL ERROR.
>>>    see attached picture.
>
> I have found reason why debugger fails to start.
>
> For this I have start reduce our grammar as much as possible and  
> have come
> to this:
>
> ----------------------------------
> grammar VSQL_Parser;
>
> sql
>    :    sql_single  EOF!
>    ;
>
> sql_single    : 'create' 'table' IDENT;
>
> IDENT  :   ('a'..'z'|'A'..'Z')+ ;
> INT :   '0'..'9'+ ;
> NEWLINE:'\r'? '\n' ;
> WS  :   (' '|'\t')+ {skip();} ;
> ----------------------------------
>
> And we still get this internal error
> Solution is to remove  !  Near to  EOF!
>
> Its never mind where !  Is located.
>
> For example this also produce this error sometimes. But on the  
> second run it
> seems works fine..
>
>
> ----------------------------------
> grammar VSQL_Parser;
>
> sql
>    :    sql_single  EOF
>    ;
>
> sql_single    : 'create' 'table'! IDENT;
>
> IDENT  :   ('a'..'z'|'A'..'Z')+ ;
> INT :   '0'..'9'+ ;
> NEWLINE:'\r'? '\n' ;
> WS  :   (' '|'\t')+ {skip();} ;
> ----------------------------------
>
>
> Why this happens?  My bug?  ANTRLWorks bug ?
>
>
> -- 
> Best regards,
>
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
>
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
>
> [I feel the need: the need for speed]
>
>


From sunshine at public.kherson.ua  Mon Jan 21 22:07:20 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 22 Jan 2008 08:07:20 +0200
Subject: [antlr-interest] ANTLRWorks, Internal ERROR with my grammar.
In-Reply-To: <D6A9C701-1E1E-4E8A-9853-C8832C25BE82@cs.usfca.edu>
Message-ID: <C3BB54B8.8B2A6%sunshine@public.kherson.ua>

On 22/1/08 1:50 AM, "Terence Parr" <parrt at cs.usfca.edu> wrote:

Hi All,

> Hi, this is a known ANTLR issue where it doesn't give a good message
> when you use ! or ^ and no output=AST option.

Then may be Jean can improve ANTLRWorks to give at least warning if grammar
have this? 

> Ter
> On Jan 21, 2008, at 2:14 PM, Ruslan Zasukhin wrote:
> 
>>> On 21/1/08 9:50 PM, "Ruslan Zasukhin" <sunshine at public.kherson.ua>
>>> wrote:
>> 
>> Hi Again,
>> 
>>>> * debugger even do not starts and show dialog about INTERNAL ERROR.
>>>>    see attached picture.
>> 
>> I have found reason why debugger fails to start.
>> 
>> For this I have start reduce our grammar as much as possible and
>> have come
>> to this:
>> 
>> ----------------------------------
>> grammar VSQL_Parser;
>> 
>> sql
>>    :    sql_single  EOF!
>>    ;
>> 
>> sql_single    : 'create' 'table' IDENT;
>> 
>> IDENT  :   ('a'..'z'|'A'..'Z')+ ;
>> INT :   '0'..'9'+ ;
>> NEWLINE:'\r'? '\n' ;
>> WS  :   (' '|'\t')+ {skip();} ;
>> ----------------------------------
>> 
>> And we still get this internal error
>> Solution is to remove  !  Near to  EOF!
>> 
>> Its never mind where !  Is located.
>> 
>> For example this also produce this error sometimes. But on the
>> second run it
>> seems works fine..
>> 
>> 
>> ----------------------------------
>> grammar VSQL_Parser;
>> 
>> sql
>>    :    sql_single  EOF
>>    ;
>> 
>> sql_single    : 'create' 'table'! IDENT;
>> 
>> IDENT  :   ('a'..'z'|'A'..'Z')+ ;
>> INT :   '0'..'9'+ ;
>> NEWLINE:'\r'? '\n' ;
>> WS  :   (' '|'\t')+ {skip();} ;
>> ----------------------------------
>> 
>> 
>> Why this happens?  My bug?  ANTRLWorks bug ?

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From jan.sture.nielsen at gmail.com  Mon Jan 21 22:25:51 2008
From: jan.sture.nielsen at gmail.com (Jan Nielsen)
Date: Mon, 21 Jan 2008 23:25:51 -0700
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <4794f4b4.26b5420a.1486.2f54SMTPIN_ADDED@mx.google.com>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
	<4794f4b4.26b5420a.1486.2f54SMTPIN_ADDED@mx.google.com>
Message-ID: <f79c7d4d0801212225i5f0c6db7qbac8fca5380d41d9@mail.gmail.com>

Hi Gavin and Andy,

Thanks for the input! Per your suggestions, I modified my grammar (and
DSL a bit) and the resulting parser now passes these test cases:

 "from 1/January/2008"
 "from 1/January/2008 to 1/January/2009"
 "from 1/January/2008 to 1/January/2009 exclude 1/January/2008"
 "from 1/January/2008 to 1/January/2009 exclude 21/January/2008"
 "from 1/January/2008 to 1/January/2009 exclude Thursday-Sunday"
 "from 1/January/2008 to 1/January/2009 exclude Monday, Wednesday, Friday"
 "from 1/January/2008 to 1/January/2009 exclude Thursday[4]/November"
 "from 1/January/2008 to 1/January/2009 exclude Thursday-Sunday
include June-July"
 "from 1/January/2008 to 1/January/2009 exclude Monday-Thursday
include 21/January/2008"
 "from 1/January exclude 1/January"
 "from 1/January exclude 21/January"
 "from 1/January exclude Thursday-Sunday"
 "from 1/January exclude Monday, Wednesday, Friday"
 "from 1/January exclude Thursday[4]/November"
 "from 1/January exclude Thursday-Sunday include June-July"
 "from 1/January exclude Monday-Thursday include 21/January/2008"

I initially envisioned having repeated exclusion and inclusion clauses
but I don't think I need to support it now; I'll probably have a go at
it once I get the parser and tie-ins working.

Thanks, again, for your help.


-Jan


grammar T;

options{
    output = AST;
    ASTLabelType = CommonTree;
}

prog
    : 'from' date ('to' date)? exclude_clause? include_clause?
    ;

date
    : day_of_month '/' MONTH ('/' year)?
    ;

exclude_clause
    : 'exclude' period (',' period)*
    ;

include_clause
    : 'include' period (',' period)*
    ;

period
    : day_of_month_period
    | day_of_week_period
    | month_period
    ;

day_of_month_period
    : date ('-' date)?
    ;

day_of_week_period
    : DAY_OF_WEEK ('[' occurrence ']')? ('-' DAY_OF_WEEK)?
    ;

month_period
    : MONTH ('-' MONTH)?
    ;

occurrence
    : NUMBER
    ;

year
    : NUMBER
    ;

MONTH
    : 'January'
    | 'February'
    | 'March'
    | 'April'
    | 'May'
    | 'June'
    | 'July'
    | 'August'
    | 'September'
    | 'October'
    | 'November'
    | 'December'
    ;

day_of_month
    : NUMBER
    ;

DAY_OF_WEEK
    : 'Monday'
    | 'Tuesday'
    | 'Wednesday'
    | 'Thursday'
    | 'Friday'
    | 'Saturday'
    | 'Sunday'
    ;

NUMBER
    : ('0'..'9')+
    ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;}
    ;

COMMENT
    :   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
    ;

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
    ;


On Jan 21, 2008 12:31 PM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 06:32 22/01/2008, Jan Nielsen wrote:
>  >
>  >Here are a few examples of valid expressions:
>  >
>  > "from 1/January/2008"
>  > "from 1/January/2008 to 1/January/2009"
>  > "from 1/January/2008 to 1/January/2009 excluding
> 21/January/2008"
>  > "from 1/January/2008 to 1/January/2009 excluding
> 21/January/2008"
>  > "from 1/January/2008 to 1/January/2009 excluding
> Thursday-Sunday"
>  > "from 1/January/2008 to 1/January/2009 excluding
> Thursday-Sunday
>  >including June-July"
>  > "from 1/January/2008 to 1/January/2009 excluding
> Monday-Thursday
>  >including 21/January/2008"
>  > "from 1/January/2008 to 1/January/2009 excluding
> Monday-Thursday
>  >including 'Dr. Martin Luther King Day'"
>  >
>  >A "including" after an "excluding", i.e., to the right of,
>  >overrides the exclusion.
>
> Is it permitted to have repeated clauses?  ie. "from X including A
> excluding B including C"?
>
>  >prog
>  >    : 'from' date ('to' date)?
>  >      ('including' period)? (',' period)*
>  >      ('excluding' period)? (',' period)*
>  >    ;
>
> This enforces an order between "including" and "excluding"; one
> which doesn't match your examples above.  At minimum to get the
> examples to work (and assuming repeated clauses are not permitted)
> you'll need to reverse these.
>
> Also your scoping on the comma-separated bits is wrong; this
> should be inside the optional clause (otherwise it doesn't make
> much sense).  So:
>
> prog
>    : 'from' date ('to' date)? excluding_clause? including_clause?
>    ;
>
> excluding_clause
>    : 'excluding' period (',' period)*
>    ;
>
> including_clause
>    : 'including' period (',' period)*
>    ;
>
>  >day_of_month_period
>  >    : DAY_OF_MONTH (MONTH)? (YEAR)?
>  >    ;
>  >
>  >day_of_week_period
>  >    : DAY_OF_WEEK ('[' OCCURRENCE ']')? (YEAR)?
>  >    ;
>
> Shouldn't these have slashes?  You're also not covering other
> types of constructs permitted by your examples.
>
>  >OCCURRENCE
>  >    : '1'..'4'
>  >    ;
>  >
>  >YEAR
>  >    : '1'..'9' '0'..'9' '0'..'9' '0'..'9'
>  >    ;
> [...]
>  >DAY_OF_MONTH : '1'..'9' | '1'..'2' '0'..'9' | '30' | '31';
>
> You can't do this.  The most important thing to remember is that
> all lexing is done up front with no input from the parser (since
> the parser doesn't even exist yet).  Thus any non-fragment tokens
> become independent candidates for output.  Facing a '3' in the
> input stream, it could match any one of these rules; given no
> clear preference ANTLR will choose the first listed and generate
> an OCCURRENCE token, which you're not accepting when it finally
> does reach the parser.
>
> At the lexer level you should just recognise basic integers, and
> then validate them based on context in the parser:
>
> NUMBER: ('0'..'9')+;
>
> occurrence: n=NUMBER { validateOccurrence($n.text); }?;
> year: n=NUMBER { validateYear($n.text); }?;
> day_of_month: n=NUMBER { validateDayOfMonth($n.text); }?;
>
>  > But once I have a parser for my expression, how do I actually
>  > use the parser to implement my API???
>
> There are two common ways to do this.  One is to output an AST
> from the parser, which in your case could end up looking something
> like this (expressed in string form):
>    ^(FROM ^(DATE 1 January 2008) ^(DATE 1 January 2009)
> ^(EXCLUDING ^(DAY ^(RANGE Monday Thursday))) ^(INCLUDING ^(DAY
> "Dr. Martin Luther King Day"))
>
> (Of course the exact syntax is variable; you can put in what you
> want for the most part, although a certain structure will be
> dictated by how the rules are organised.)  Then you can just write
> tree-walking code to call your various API functions as
> appropriate.  (Or even write a tree parser, though that's usually
> unnecessary.)
>
> Another approach is to simply include the action code as you are
> parsing.  For example:
>
> excluding_clause
>    : 'excluding' p=period { addExclusion($p.result); }
>      (',' p=period { addExclusion($p.result); } )*
>    ;
>
> Of course for this to work, you'll need to also enhance the period
> and date rules with 'returns' clauses, which create a data
> structure that describes what they have just recognised.
>
>

From harald_m_mueller at gmx.de  Mon Jan 21 22:24:38 2008
From: harald_m_mueller at gmx.de (=?iso-8859-1?Q?Harald_M._M=FCller?=)
Date: Tue, 22 Jan 2008 07:24:38 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <47952E95.7040601@organum.hu>
Message-ID: <20080122063745.4641211EB1F@www.antlr.org>

I wouldn't do it like this.
If you want to really do this in the (non-nested) lexer: "Lex" the symbol;
and then start a NEW StringReader on the symbols's getText(), from which you
feed your (nested) lexer and parser.
Maybe you want to do this in the (non-nested) parser ... easy if the symbol
turns up there; a little work if you pushed the symbol into the HIDDEN
channel (or some other channel) in the (non-nested) lexer, so that you have
to "undig" it somehow in the (non-nested) parser
Hope this very short explanation helps.
Regards
Harald

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Bertalan Fodor
> Sent: Tuesday, January 22, 2008 12:45 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3 Nested parser
> 
> Hi,
> 
> I'm creating a parser with nested parser. To make it simple I 
> tell you my problem as if I was doing Javadoc parsing inside 
> a Java parser.
> So I have this in my lexer:
> JAVADOC: '/**' { JavadocParser javadocParser = new 
> JavadocParser(new CommonTokenStream(new 
> JavadocLexer(this.input))); javadocParser.rootRule(); }
> 
> The problem is that while this code correctly switches to the 
> Javadoc lexer, and parses the Javadoc parts correctly, upon 
> returning from the Javadoc parsing, the character stream is 
> not correctly positioned.
> 
> Can you help me how to achieve the nested parsing in antlr 3?
> 
> Thank you very much,
> 
> Bertalan Fodor
> 
> ps I've already asked this on this list, but got no answer, 
> so I tried to make my question more simple.
> 


From antlr at mirality.co.nz  Mon Jan 21 23:41:15 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 22 Jan 2008 20:41:15 +1300
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <f79c7d4d0801212225i5f0c6db7qbac8fca5380d41d9@mail.gmail.co
 m>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
	<4794f4b4.26b5420a.1486.2f54SMTPIN_ADDED@mx.google.com>
	<f79c7d4d0801212225i5f0c6db7qbac8fca5380d41d9@mail.gmail.com>
Message-ID: <20080122074135.1AA2311EB0C@www.antlr.org>

At 19:25 22/01/2008, Jan Nielsen wrote:
 >
 >I initially envisioned having repeated exclusion and inclusion
 >clauses but I don't think I need to support it now

If you want them, it's pretty straightforward.  Just change the 
prog rule to this:

prog
     : 'from' date ('to' date)? (exclude_clause | include_clause)* 
EOF
     ;

This will permit any number of include and exclude clauses in any 
order.

 >day_of_week_period
 >    : DAY_OF_WEEK ('[' occurrence ']')? ('-' DAY_OF_WEEK)?
 >    ;

If "Monday[3]-Wednesday" doesn't make sense (and I'm not sure how 
it could), you could possibly change this to:

day_of_week_period
     : DAY_OF_WEEK ('[' occurrence ']' | '-' DAY_OF_WEEK)?
     ;

This will permit only one (or neither) of the two options to be 
specified.


From sunshine at public.kherson.ua  Mon Jan 21 23:47:33 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 22 Jan 2008 09:47:33 +0200
Subject: [antlr-interest] ANTLR feedback -- ANTLRWorks out of memory
In-Reply-To: <"L54E5C14F422C4589B267B46E15188EAB.1200584295.scalix.temporal-wave.com*"@MHS>
Message-ID: <C3BB6C35.8B2C9%sunshine@public.kherson.ua>

On 17/1/08 5:18 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:

> The debugger isn't implemented for the C target until the next release.
> The out of memory error is probably that you should start ANTLRWorks
> with something like -Xmx750M as it can take a lot of heap space to keep
> running the analysis etc. This is mostly just with ANTLRWorks.
> 
> Jim

Hi All,

Jim have give hint how to increase RAM for ANTLRWorks, but I assume this is
for start from terminal.

What is way todo this if I want to use on OSX the packaged version of
ANTLRworks ?

I do not see such prefs.

Does exists such way?  If no, Jean, may be its good idea add it somehow into
prefs?


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From lilypondtool at organum.hu  Tue Jan 22 01:00:46 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Tue, 22 Jan 2008 10:00:46 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
Message-ID: <4795B0BE.70908@organum.hu>

Thank you for your answer.
If I understand your suggestion correctly, the problem with it is that I 
can't lex the symbol: actually it is an embedded language, so only the 
nested lexer and parser can find the end of the embedded part. So 
actually I would need the following: feed the nested lexer/parser with 
all the input beginning from the '/**' symbol and let it parse it. Then 
when the parsing is over, I'd like to set the non-nested lexer/parser to 
the end position of the nested parsing. So the problem is how to set the 
input stream position to the end of the embedded part, either rewinding 
or forward winding. Maybe I can use the return value of the nested 
rootRule() to find the position. However I could not find a way yet how 
to do this all.

Anyway, if you have some example of some nested parsing, that could 
probably effectively help me.

Thanks,

Bert

Harald M. M?ller wrote:
> I wouldn't do it like this.
> If you want to really do this in the (non-nested) lexer: "Lex" the symbol;
> and then start a NEW StringReader on the symbols's getText(), from which you
> feed your (nested) lexer and parser.
> Maybe you want to do this in the (non-nested) parser ... easy if the symbol
> turns up there; a little work if you pushed the symbol into the HIDDEN
> channel (or some other channel) in the (non-nested) lexer, so that you have
> to "undig" it somehow in the (non-nested) parser
> Hope this very short explanation helps.
> Regards
> Harald
>
>   
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org 
>> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Bertalan Fodor
>> Sent: Tuesday, January 22, 2008 12:45 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] ANTLR3 Nested parser
>>
>> Hi,
>>
>> I'm creating a parser with nested parser. To make it simple I 
>> tell you my problem as if I was doing Javadoc parsing inside 
>> a Java parser.
>> So I have this in my lexer:
>> JAVADOC: '/**' { JavadocParser javadocParser = new 
>> JavadocParser(new CommonTokenStream(new 
>> JavadocLexer(this.input))); javadocParser.rootRule(); }
>>
>> The problem is that while this code correctly switches to the 
>> Javadoc lexer, and parses the Javadoc parts correctly, upon 
>> returning from the Javadoc parsing, the character stream is 
>> not correctly positioned.
>>
>> Can you help me how to achieve the nested parsing in antlr 3?
>>
>> Thank you very much,
>>
>> Bertalan Fodor
>>
>> ps I've already asked this on this list, but got no answer, 
>> so I tried to make my question more simple.
>>
>>     
>
>
>   


-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/3d5b78b1/attachment.html 

From sunshine at public.kherson.ua  Tue Jan 22 01:06:07 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 22 Jan 2008 11:06:07 +0200
Subject: [antlr-interest] Error: Can't find template tokenRefBang.st Why?
Message-ID: <C3BB7E9F.8B2DD%sunshine@public.kherson.ua>

Hi,

I run ANTLR from terminal with our SQL parser grammar.
And get strange error:

Anybody can point reason?
May be I need try newest betas?

---------
ruslans-power-mac-g5:~ rz$ java org.antlr.Tool
/PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g
ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007

error(10):  internal error:
/PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g :
java.lang.IllegalArgumentException: Can't find template tokenRefBang.st
org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGr
oup.java:485)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGro
up.java:372)
org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGro
up.java:384)
org.antlr.codegen.CodeGenTreeWalker.getTokenElementST(CodeGenTreeWalker.java
:160)
org.antlr.codegen.CodeGenTreeWalker.atom(CodeGenTreeWalker.java:1965)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1641)
org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1490)
org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:486)
org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:333)
org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)
org.antlr.Tool.processGrammar(Tool.java:347)
org.antlr.Tool.process(Tool.java:268)
org.antlr.Tool.main(Tool.java:70)



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/a3a9151b/attachment-0001.html 

From tbrandonau at gmail.com  Tue Jan 22 01:27:20 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Tue, 22 Jan 2008 20:27:20 +1100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <4795B0BE.70908@organum.hu>
References: <4795B0BE.70908@organum.hu>
Message-ID: <ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>

Check out the island-grammar example. It shows lexer based nesting. The
pertinent code in the main lexer is:
JAVADOC : '/**'
          {
            // create a new javadoc lexer/parser duo that feeds
            // off the current input stream
            System.out.println("enter javadoc");
            JavadocLexer j = new JavadocLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(j);
            tokens.discardTokenType(JavadocLexer.WS);
            JavadocParser p = new JavadocParser(tokens);
            p.comment();
            // returns a JAVADOC token to the java parser but on a
            // different channel than the normal token stream so it
            // doesn't get in the way.
            $channel = JAVADOC_CHANNEL;
          }
        ;
And in the nested lexer:
/** When the javadoc parser sees end-of-comment it just says 'I'm done',
which
 *  consumes the tokens and forces this javadoc parser (feeding
 *  off the input stream currently) to exit.  It returns from
 *  method comment(), which was called from JAVADOC action in the
 *  Simple parser's lexer.
 */
END     : '*/' {token = Token.EOF_TOKEN;}
          {System.out.println("exit javadoc");}
        ;

Your code in the outer lexer looks OK, just passing the same input stream
should keep it synched. Check your code for exiting the inner lexer.

Tom.
On Jan 22, 2008 8:00 PM, Bertalan Fodor (LilyPondTool) <
lilypondtool at organum.hu> wrote:

>  Thank you for your answer.
> If I understand your suggestion correctly, the problem with it is that I
> can't lex the symbol: actually it is an embedded language, so only the
> nested lexer and parser can find the end of the embedded part. So actually I
> would need the following: feed the nested lexer/parser with all the input
> beginning from the '/**' symbol and let it parse it. Then when the parsing
> is over, I'd like to set the non-nested lexer/parser to the end position of
> the nested parsing. So the problem is how to set the input stream position
> to the end of the embedded part, either rewinding or forward winding. Maybe
> I can use the return value of the nested rootRule() to find the position.
> However I could not find a way yet how to do this all.
>
> Anyway, if you have some example of some nested parsing, that could
> probably effectively help me.
>
> Thanks,
>
> Bert
>
>
> Harald M. M?ller wrote:
>
> I wouldn't do it like this.
> If you want to really do this in the (non-nested) lexer: "Lex" the symbol;
> and then start a NEW StringReader on the symbols's getText(), from which you
> feed your (nested) lexer and parser.
> Maybe you want to do this in the (non-nested) parser ... easy if the symbol
> turns up there; a little work if you pushed the symbol into the HIDDEN
> channel (or some other channel) in the (non-nested) lexer, so that you have
> to "undig" it somehow in the (non-nested) parser
> Hope this very short explanation helps.
> Regards
> Harald
>
>
>
>  -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org <antlr-interest-bounces at antlr.org>] On Behalf Of Bertalan Fodor
> Sent: Tuesday, January 22, 2008 12:45 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR3 Nested parser
>
> Hi,
>
> I'm creating a parser with nested parser. To make it simple I
> tell you my problem as if I was doing Javadoc parsing inside
> a Java parser.
> So I have this in my lexer:
> JAVADOC: '/**' { JavadocParser javadocParser = new
> JavadocParser(new CommonTokenStream(new
> JavadocLexer(this.input))); javadocParser.rootRule(); }
>
> The problem is that while this code correctly switches to the
> Javadoc lexer, and parses the Javadoc parts correctly, upon
> returning from the Javadoc parsing, the character stream is
> not correctly positioned.
>
> Can you help me how to achieve the nested parsing in antlr 3?
>
> Thank you very much,
>
> Bertalan Fodor
>
> ps I've already asked this on this list, but got no answer,
> so I tried to make my question more simple.
>
>
>
>
>
> --
> LilyPondTool is the editor for LilyPond files.
> See http://lilypondtool.organum.hu
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/a5e06450/attachment.html 

From tbrandonau at gmail.com  Tue Jan 22 01:32:03 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Tue, 22 Jan 2008 20:32:03 +1100
Subject: [antlr-interest] Error: Can't find template tokenRefBang.st Why?
In-Reply-To: <C3BB7E9F.8B2DD%sunshine@public.kherson.ua>
References: <C3BB7E9F.8B2DD%sunshine@public.kherson.ua>
Message-ID: <ebc876d70801220132q2c1cf79cy28e0282df06eadd5@mail.gmail.com>

You can't have both AST operators (^ and !) and rewrites in the same rule.
You are using ! in a rule with rewrites. Unfortunately currently the error
message doesn't give the location, this is a known issue. I don't think this
will be fixed in 3.1.

Tom.
On Jan 22, 2008 8:06 PM, Ruslan Zasukhin <sunshine at public.kherson.ua> wrote:

>  Hi,
>
> I run ANTLR from terminal with our SQL parser grammar.
> And get strange error:
>
> Anybody can point reason?
> May be I need try newest betas?
>
> ---------
> ruslans-power-mac-g5:~ rz$ java org.antlr.Tool/PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
>
> error(10):  internal error:
> /PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g :
> java.lang.IllegalArgumentException: Can't find template tokenRefBang.st
> org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(
> StringTemplateGroup.java:485)
> org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(
> StringTemplateGroup.java:372)
> org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(
> StringTemplateGroup.java:384)
> org.antlr.codegen.CodeGenTreeWalker.getTokenElementST(
> CodeGenTreeWalker.java:160)
> org.antlr.codegen.CodeGenTreeWalker.atom(CodeGenTreeWalker.java:1965)
> org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1641)
> org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1490)
> org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java
> :1252)
> org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
> org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
> org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
> org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java
> :486)
> org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:333)
> org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)
> org.antlr.Tool.processGrammar(Tool.java:347)
> org.antlr.Tool.process(Tool.java:268)
> org.antlr.Tool.main(Tool.java:70)
>
>
>
> --
> Best regards,
>
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
>
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
>
> [I feel the need: the need for speed]
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/cbd18cf4/attachment.html 

From alexander at gaengel.de  Tue Jan 22 01:32:14 2008
From: alexander at gaengel.de (=?UTF-8?B?QWxleGFuZGVyIEfDpG5nZWw=?=)
Date: Tue, 22 Jan 2008 10:32:14 +0100
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <"LA93CAD39A9E14afdB439266F76EF79BF.1200671818.scalix.temporal-wave.com*"@MHS>
References: <"LA93CAD39A9E14afdB439266F76EF79BF.1200671818.scalix.temporal-wave.com*"@MHS>
Message-ID: <4795B81E.7040007@gaengel.de>

Thank you Jim,

Ok so it works, but shouldn't LL(*)  distinguish between '.' and '..'

I also think that AntlrWorks at least give the Error message:
line 1:2 required (...)+ loop did not match anything at character '.'

like the real code when debugging in AntlrWorks.

Alexander

Jim Idle schrieb:
>
> This should help (here it uses parser rules, but you could use the 
> same predicate stuff to match range in the lexer too:
>
>  
>
> // Return decimal numeric as one token but 888..888 as NUMBER RANGE 
> NUMBER
>
> // Also shows that '.' can still be recognized on its own, just for 
> kicks.
>
> // Try the input 999.88 . . 666..667
>
> //
>
> grammar harry;
>
>  
>
> start
>
>      :    (number_range)+
>
>      ;
>
>     
>
> number_range
>
>      : NUMBER ( RANGE NUMBER)?
>
>      | DOT
>
>      ;
>
>     
>
> NUMBER
>
>      : ('0'..'9')+
>
>            (
>
>                  ('.' '0'..'9')=> ('.' ('0'..'9')+)
>
>                 |// Just an integer
>
>            )
>
>      ;
>
>  
>
> RANGE
>
>      :    '..'
>
>      ;
>
>     
>
> DOT
>
>      : '.'
>
>      ;
>
>     
>
> OTHER
>
>      : . {$channel = HIDDEN; }
>
>      ;
>
>  
>
> Jim
>
>  
>
> *From:* Alexander G?ngel [mailto:alexander at gaengel.de]
> *Sent:* Friday, January 18, 2008 2:00 AM
> *To:* antlr-interest at antlr.org
> *Subject:* Re: [antlr-interest] REAL or int or Range
>
>  
>
> I searched the Archive but till now I did not find anything, but I 
> will keep looking.
>
> I now also tried with actual code an not with AntlrWorks debugger an 
> now I get the message:
> line 1:2 required (...)+ loop did not match anything at character '.'
> when I try to  parse 0..9
>
> the 0.. is still missing in the output (I now create an Ast to test 
> and it has only the node 9)
>
> so I think AntlrWorks should at least also give the errormessage.
>
> Alexander
>
> Jim Idle schrieb:
>
> The interpreter won't be able to deal with your specification I think, 
>   
> whereas the real generated code does. I gave out code for int vs float 
>   
> vs range some time back if you check the archives - that should do what 
>   
> you want.
>   
>  
>   
> Jim
>   
>  
>   
>   
>   
>
>     -----Original Message-----
>         
>
>     From: shmuel siegel [mailto:antlr at shmuelhome.mine.nu]
>         
>
>     Sent: Wednesday, January 09, 2008 6:14 PM
>         
>
>     To: Antlr Interest
>         
>
>     Subject: Re: [antlr-interest] REAL or int or Range
>         
>
>      
>         
>
>     Alexander G?ngel wrote:
>         
>
>         
>         
>
>         What I think is odd is that it works for F?rat K???k.
>               
>
>          
>               
>
>               
>               
>
>     Maybe not so strange. In the debugger, I get the same as you but in 
>         
>
>         
>         
>
> the
>   
>   
>   
>
>     interpreter I get the attached png.
>         
>
>      
>         
>
>      
>         
>
>      
>         
>
>     No virus found in this incoming message.
>         
>
>     Checked by AVG Free Edition.
>         
>
>     Version: 7.5.516 / Virus Database: 269.19.0/1216 - Release Date: 
>         
>
>         
>         
>
> 1/9/2008
>   
>   
>   
>
>     10:16 AM
>         
>
>      
>         
>
>      
>         
>
>         
>         
>
>  
>   
>  
>   
>   
>   
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/a8765429/attachment-0001.html 

From lilypondtool at organum.hu  Tue Jan 22 01:34:45 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Tue, 22 Jan 2008 10:34:45 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>
References: <4795B0BE.70908@organum.hu>
	<ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>
Message-ID: <4795B8B5.5000402@organum.hu>


> END     : '*/' {token = Token.EOF_TOKEN;}
>           {System.out.println("exit javadoc");}
>         ;
Thank you! I can't try this now but I think that EOF_TOKEN emitting does 
the trick. I don't know how I didn't find this island-grammar example 
(perhaps I was looking for the words nested, tokenstreamselector and so).

Bert
>
> Your code in the outer lexer looks OK, just passing the same input 
> stream should keep it synched. Check your code for exiting the inner 
> lexer.
>
> Tom.

From antlr at mirality.co.nz  Tue Jan 22 02:58:59 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Tue, 22 Jan 2008 23:58:59 +1300
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <4795B81E.7040007@gaengel.de>
References: <"LA93CAD39A9E14afdB439266F76EF79BF.1200671818.scalix.temporal-wave.com*"@MHS>
	<4795B81E.7040007@gaengel.de>
Message-ID: <20080122105917.B878411EC60@www.antlr.org>

At 22:32 22/01/2008, Alexander G??ngel wrote:

>Ok so it works, but shouldn't LL(*)  distinguish 
>between '.' and '..'

Arguably yes, but the lookahead in the lexer 
definitely seems to be biased towards only LL(1) 
at the moment.  Ter said he's going to look into it sometime.


From sunshine at public.kherson.ua  Tue Jan 22 05:32:57 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 22 Jan 2008 15:32:57 +0200
Subject: [antlr-interest] Error: Can't find template tokenRefBang.st Why?
In-Reply-To: <ebc876d70801220132q2c1cf79cy28e0282df06eadd5@mail.gmail.com>
Message-ID: <C3BBBD29.8B332%sunshine@public.kherson.ua>

On 22/1/08 11:32 AM, "Thomas Brandon" <tbrandonau at gmail.com> wrote:

> You can't have both AST operators (^ and !) and rewrites in the same rule. You
> are using ! in a rule with rewrites. Unfortunately currently the error message
> doesn't give the location, this is a known issue. I don't think this will be
> fixed in 3.1.

Thank you Thomas, I will check this point.
Yes I am porting old grammar from v2 to v3.
 
> Tom.
> On Jan 22, 2008 8:06 PM, Ruslan Zasukhin <sunshine at public.kherson.ua> wrote:
> Hi,
> 
> I run ANTLR from terminal with our SQL parser grammar.
> And get strange error:
> 
> Anybody can point reason?
> May be I need try newest betas?
> 
> ---------
> ruslans-power-mac-g5:~ rz$ java org.antlr.Tool
> /PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g
> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
> 
> error(10):  internal error:
> /PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g :
> java.lang.IllegalArgumentException: Can't find template tokenRefBang.st
> org.antlr.stringtemplate.StringTemplateGroup.lookupTemplate(StringTemplateGrou
> p.java:485)
> org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup
> .java:372)
> org.antlr.stringtemplate.StringTemplateGroup.getInstanceOf(StringTemplateGroup
> .java:384)
> org.antlr.codegen.CodeGenTreeWalker.getTokenElementST(CodeGenTreeWalker.java:1
> 60)
> org.antlr.codegen.CodeGenTreeWalker.atom(CodeGenTreeWalker.java:1965)
> org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1641)
> org.antlr.codegen.CodeGenTreeWalker.element(CodeGenTreeWalker.java:1490)
> org.antlr.codegen.CodeGenTreeWalker.alternative(CodeGenTreeWalker.java:1252)
> org.antlr.codegen.CodeGenTreeWalker.block(CodeGenTreeWalker.java:1037)
> org.antlr.codegen.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:753)
> org.antlr.codegen.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:544)
> org.antlr.codegen.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.java:486)
> org.antlr.codegen.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:333)
> org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:406)
> org.antlr.Tool.processGrammar(Tool.java:347)
> org.antlr.Tool.process(Tool.java:268)
> org.antlr.Tool.main(Tool.java:70)

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From r.mark.volkmann at gmail.com  Tue Jan 22 06:52:03 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 22 Jan 2008 08:52:03 -0600
Subject: [antlr-interest] gated semantic predicate usage
Message-ID: <f0fcc6820801220652w77ab359w1e12172a0bd6b2d7@mail.gmail.com>

In the book in section 13.2 there is an example of using a gated
semantic predicate to conditionally disable assert statements. When
using this pattern in a parser grammar the result seems to be an error
message like "mismatched input 'assert' expecting EOF" followed by a
stack trace for a NullPointerException from the tree parser. I tried
adding a catch at the end of the parser rule that contains the gated
semantic predicate, but no exception is thrown. I'm confused about how
to use this mechanism to disable certain statements and output a
reasonable error message when they appear in input.

-- 
R. Mark Volkmann
Object Computing, Inc.

From sunshine at public.kherson.ua  Tue Jan 22 07:05:31 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Tue, 22 Jan 2008 17:05:31 +0200
Subject: [antlr-interest] Error: Can't find template tokenRefBang.st --
 FOUND WHY
In-Reply-To: <C3BBBD29.8B332%sunshine@public.kherson.ua>
Message-ID: <C3BBD2DB.8B36B%sunshine@public.kherson.ua>

On 22/1/08 3:32 PM, "Ruslan Zasukhin" <sunshine at public.kherson.ua> wrote:

> On 22/1/08 11:32 AM, "Thomas Brandon" <tbrandonau at gmail.com> wrote:
> 
>> You can't have both AST operators (^ and !) and rewrites in the same rule.
>> You are using ! in a rule with rewrites. Unfortunately currently the error
>> message doesn't give the location, this is a known issue. I don't think this
>> will be fixed in 3.1.
>> Tom.
> 
> Thank you Thomas, I will check this point.
> Yes I am porting old grammar from v2 to v3.

Well, it seems I have found ONE MORE reason when ANTLR give this error.

Rule which cause problem is:

row_expr
    :   (LPAREN! expr RPAREN!) => LPAREN! expr RPAREN!
    ;


If remove ! In the head of predicate then it works

row_expr
    :   (LPAREN expr RPAREN) => LPAREN! expr RPAREN!
    ;


Please note down this issue for ANTLR.


----------  
>> On Jan 22, 2008 8:06 PM, Ruslan Zasukhin <sunshine at public.kherson.ua> wrote:
>> Hi,
>> 
>> I run ANTLR from terminal with our SQL parser grammar.
>> And get strange error:
>> Anybody can point reason?

>> ---------
>> ruslans-power-mac-g5:~ rz$ java org.antlr.Tool
>> /PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g
>> ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  1989-2007
>> 
>> error(10):  internal error:
>> /PARADIGMA/Developer_2/sources_Third_Party/ANTLR3/VSQL_Parser.g :
>> java.lang.IllegalArgumentException: Can't find template tokenRefBang.st

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From alexander at gaengel.de  Tue Jan 22 07:05:52 2008
From: alexander at gaengel.de (=?ISO-8859-1?Q?Alexander_G=E4ngel?=)
Date: Tue, 22 Jan 2008 16:05:52 +0100
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <m035c0k0MAvUkK.RZmta@mi-ob.rzone.de>
References: <"LA93CAD39A9E14afdB439266F76EF79BF.1200671818.scalix.temporal-wave.com*"@MHS>
	<4795B81E.7040007@gaengel.de> <m035c0k0MAvUkK.RZmta@mi-ob.rzone.de>
Message-ID: <47960650.6020000@gaengel.de>

ok, I see.

is there any workaround ?

cause the Language I try to parse not only allows int real and rang but 
also functions like 13.div(2) so if the lexer could distinguish '.' and 
'..' I think this would not be such an hard Problem then.

Alexander

Gavin Lambert schrieb:
> At 22:32 22/01/2008, Alexander G??ngel wrote:
>
>> Ok so it works, but shouldn't LL(*)  distinguish between '.' and '..'
>
> Arguably yes, but the lookahead in the lexer definitely seems to be 
> biased towards only LL(1) at the moment.  Ter said he's going to look 
> into it sometime.
>
>

From kroepke at classdump.org  Tue Jan 22 07:13:38 2008
From: kroepke at classdump.org (=?UTF-8?Q?Kay_R=C3=B6pke?=)
Date: Tue, 22 Jan 2008 16:13:38 +0100
Subject: [antlr-interest] ANTLR feedback -- ANTLRWorks out of memory
In-Reply-To: <C3BB6C35.8B2C9%sunshine@public.kherson.ua>
References: <C3BB6C35.8B2C9%sunshine@public.kherson.ua>
Message-ID: <2326B93A-32C4-4672-B04A-992BFA66E603@classdump.org>

Hi!

On Jan 22, 2008, at 8:47 AM, Ruslan Zasukhin  
<sunshine at public.kherson.ua> wrote:

> On 17/1/08 5:18 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:
>
>> The debugger isn't implemented for the C target until the next  
>> release.
>> The out of memory error is probably that you should start ANTLRWorks
>> with something like -Xmx750M as it can take a lot of heap space to  
>> keep
>> running the analysis etc. This is mostly just with ANTLRWorks.
>>
>> Jim
>
> Hi All,
>
> Jim have give hint how to increase RAM for ANTLRWorks, but I assume  
> this is
> for start from terminal.
>
> What is way todo this if I want to use on OSX the packaged version of
> ANTLRworks ?
>
> I do not see such prefs.
>
> Does exists such way?  If no, Jean, may be its good idea add it  
> somehow into
> prefs?

This setting normally is in the Info.plist file in the app bundle. You  
can alter or add arguments for jvm in there. That's why there is no  
user pref for it.

Hth,

Kay

From r.mark.volkmann at gmail.com  Tue Jan 22 08:17:44 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 22 Jan 2008 10:17:44 -0600
Subject: [antlr-interest] backtrack and k options
Message-ID: <f0fcc6820801220817r2a4569d9q85db5c957c46d487@mail.gmail.com>

Does the k option have any meaning if the backtrack option is set to false?
I'm guessing the answer is "no", but I want to verify that.

-- 
R. Mark Volkmann
Object Computing, Inc.

From jimi at temporal-wave.com  Tue Jan 22 08:46:13 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 22 Jan 2008 08:46:13 -0800
Subject: [antlr-interest] gated semantic predicate usage
In-Reply-To: <f0fcc6820801220652w77ab359w1e12172a0bd6b2d7@mail.gmail.com>
Message-ID: <"L03DC7AB51D744e8cB38CED80B2D63D6A.1201021609.scalix.temporal-wave.com*"@MHS>

I have found that certain DFA decisions involving gated predicates do 
not generate quite the correct code, in that they work correctly when 
the gate is passed but give NVA errors when they do not. However, if you 
switch to the latest daily build (see downloads page) you will find that 
they (and som other DFA stuff) work perfectly as Ter has fixed 'em.

Jim

> -----Original Message-----
> From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> Sent: Tuesday, January 22, 2008 6:52 AM
> To: antlr-interest Interest
> Subject: [antlr-interest] gated semantic predicate usage
> 
> In the book in section 13.2 there is an example of using a gated
> semantic predicate to conditionally disable assert statements. When
> using this pattern in a parser grammar the result seems to be an error
> message like "mismatched input 'assert' expecting EOF" followed by a
> stack trace for a NullPointerException from the tree parser. I tried
> adding a catch at the end of the parser rule that contains the gated
> semantic predicate, but no exception is thrown. I'm confused about how
> to use this mechanism to disable certain statements and output a
> reasonable error message when they appear in input.
> 
> --
> R. Mark Volkmann
> Object Computing, Inc.



From jimi at temporal-wave.com  Tue Jan 22 08:50:32 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 22 Jan 2008 08:50:32 -0800
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <47960650.6020000@gaengel.de>
Message-ID: <"L3DB4532506814c2bB1F07629C59D5E8B.1201021868.scalix.temporal-wave.com*"@MHS>

Alex,

See prior posts on this. The code I gave you used the parser, but was 
also able to return '.' vs '..'. What you need to do is basically 
lookahead in the rule yourself and reject the akts that are not what you 
want, akin to this:


fragment DOT : '.' ;

range
: '.'
    (     ('.')=>'.'         // It is indeed two dots
       |  { $type = DOT; }   // Just a dot
    )
;

Personally I think that you end up with tighter code this way as you are 
specifying exactly what you want ot happen, but there are many who 
believe that ANTLR should just 'do it' ;-)

Jim 

> -----Original Message-----
> From: Alexander G?ngel [mailto:alexander at gaengel.de]
> Sent: Tuesday, January 22, 2008 7:06 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] REAL or int or Range
> 
> ok, I see.
> 
> is there any workaround ?
> 
> cause the Language I try to parse not only allows int real and rang 
but
> also functions like 13.div(2) so if the lexer could distinguish '.' 
and
> '..' I think this would not be such an hard Problem then.
> 
> Alexander
> 
> Gavin Lambert schrieb:
> > At 22:32 22/01/2008, Alexander G??ngel wrote:
> >
> >> Ok so it works, but shouldn't LL(*)  distinguish between '.' and
> '..'
> >
> > Arguably yes, but the lookahead in the lexer definitely seems to be
> > biased towards only LL(1) at the moment.  Ter said he's going to 
look
> > into it sometime.
> >
> >



From parrt at cs.usfca.edu  Tue Jan 22 10:10:53 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 22 Jan 2008 10:10:53 -0800
Subject: [antlr-interest] ANTLRWorks, Internal ERROR with my grammar.
In-Reply-To: <C3BB54B8.8B2A6%sunshine@public.kherson.ua>
References: <C3BB54B8.8B2A6%sunshine@public.kherson.ua>
Message-ID: <710925D2-7F48-41F1-899D-80FE595643C1@cs.usfca.edu>

Hi.it is something that I have to fix :)
Ter
On Jan 21, 2008, at 10:07 PM, Ruslan Zasukhin wrote:

> On 22/1/08 1:50 AM, "Terence Parr" <parrt at cs.usfca.edu> wrote:
>
> Hi All,
>
>> Hi, this is a known ANTLR issue where it doesn't give a good message
>> when you use ! or ^ and no output=AST option.
>
> Then may be Jean can improve ANTLRWorks to give at least warning if  
> grammar
> have this?
>
>> Ter
>> On Jan 21, 2008, at 2:14 PM, Ruslan Zasukhin wrote:
>>
>>>> On 21/1/08 9:50 PM, "Ruslan Zasukhin" <sunshine at public.kherson.ua>
>>>> wrote:
>>>
>>> Hi Again,
>>>
>>>>> * debugger even do not starts and show dialog about INTERNAL  
>>>>> ERROR.
>>>>>   see attached picture.
>>>
>>> I have found reason why debugger fails to start.
>>>
>>> For this I have start reduce our grammar as much as possible and
>>> have come
>>> to this:
>>>
>>> ----------------------------------
>>> grammar VSQL_Parser;
>>>
>>> sql
>>>   :    sql_single  EOF!
>>>   ;
>>>
>>> sql_single    : 'create' 'table' IDENT;
>>>
>>> IDENT  :   ('a'..'z'|'A'..'Z')+ ;
>>> INT :   '0'..'9'+ ;
>>> NEWLINE:'\r'? '\n' ;
>>> WS  :   (' '|'\t')+ {skip();} ;
>>> ----------------------------------
>>>
>>> And we still get this internal error
>>> Solution is to remove  !  Near to  EOF!
>>>
>>> Its never mind where !  Is located.
>>>
>>> For example this also produce this error sometimes. But on the
>>> second run it
>>> seems works fine..
>>>
>>>
>>> ----------------------------------
>>> grammar VSQL_Parser;
>>>
>>> sql
>>>   :    sql_single  EOF
>>>   ;
>>>
>>> sql_single    : 'create' 'table'! IDENT;
>>>
>>> IDENT  :   ('a'..'z'|'A'..'Z')+ ;
>>> INT :   '0'..'9'+ ;
>>> NEWLINE:'\r'? '\n' ;
>>> WS  :   (' '|'\t')+ {skip();} ;
>>> ----------------------------------
>>>
>>>
>>> Why this happens?  My bug?  ANTRLWorks bug ?
>
> -- 
> Best regards,
>
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
>
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
>
> [I feel the need: the need for speed]
>
>


From jpschewe at mtu.net  Tue Jan 22 10:13:25 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Tue, 22 Jan 2008 12:13:25 -0600
Subject: [antlr-interest] Antlr dropping tokens?
In-Reply-To: <F9DA41DB-8C6A-47EC-8D0C-BBD7A24D69F1@cs.usfca.edu>
References: <4794B9DF.4060808@mtu.net>
	<F9DA41DB-8C6A-47EC-8D0C-BBD7A24D69F1@cs.usfca.edu>
Message-ID: <47963245.90706@mtu.net>

What is difference between $a* and $a+?

Terence Parr wrote:
> same error as last person with this problem a day or so ago.
>
> use $a+ or $a*
>
> Ter
> On Jan 21, 2008, at 7:27 AM, Jon Schewe wrote:
>
>> Here's a piece of my grammar that I'm testing with junit.  It appears
>> that some tokens are getting dropped.
>> The input is this:
>> b[1 ... (param1 - 5 - 1) * 4]
>>
>> The resulting tree is this:
>> (b (SUM (PRODUCT (NUMBER 1))) (SUM (PRODUCT (SUM (PRODUCT param1)
>> (PRODUCT (NUMBER -1) (NUMBER 5)) (PRODUCT (NUMBER -1) (NUMBER 1))))))
>>
>> Where did the "* 4" go?  I didn't think ANTLR could drop tokens like
>> that.  This is using antlr 3.0.1.
>>
>> The grammar fragment is below:
>> /**
>> * Name used in a variable declaration.
>> */
>> nameDecl :
>>  IDENT -> IDENT
>> | IDENT LBRACK lb=subscriptAddExpr[false] ELLIPSIS
>> ub=subscriptAddExpr[false] RBRACK -> ^(IDENT $lb $ub)
>> ;
>> subscriptAddExpr[boolean negate]
>> :
>> subscriptMultExpr[negate] (PLUS subscriptMultExpr[negate] | MINUS
>> subscriptMultExpr[!negate])* -> ^(SUM subscriptMultExpr+)
>>
>> ;
>>
>> /**
>> * @param negate if true, negate all expressions by multiplying by -1
>> */
>> subscriptMultExpr[boolean negate]
>> :
>>  a+=subscriptAtom (a+=subscriptMultHelp)* -> {negate}? ^(PRODUCT
>> ^(NUMBER NUM_INT["-1"]) $a)
>>                                           ->           ^(PRODUCT $a)
>> ;
>>
>> subscriptMultHelp : PRODUCT subscriptAtom -> subscriptAtom ;
>>
>> /**
>> * Base type that can be inside a subscript.
>> */
>> subscriptAtom
>> :
>>  IDENT
>> | numint
>> | subscriptParExpression
>> ;
>>
>> subscriptParExpression
>> :
>> LPAREN subscriptAddExpr[false] RPAREN -> subscriptAddExpr
>> ;
>>
>>
>> /**
>> * A finite integer number.  May be negative.
>> */
>> numint
>> :
>>  MINUS NUM_INT -> ^(NUMBER ^(MINUS NUM_INT))
>> | NUM_INT -> ^(NUMBER NUM_INT)
>> ;
>>
>> // ----------- Lexer ---------------------
>> // Operators
>> LPAREN          :   '('     ;
>> RPAREN          :   ')'     ;
>> LBRACK          :   '['     ;
>> RBRACK          :   ']'     ;
>> ELLIPSIS        :   '...'   ;
>> EQ              :   '='     ;
>> MINUS           :   '-'     ;
>> PLUS            :   '+'     ;
>> SEMI            :   ';'     ;
>> LCURLY          :   '{'     ;
>> RCURLY          :   '}'     ;
>> LE              :   '<='    ;
>> COLON           :   ':'     ;
>> COMMA           :   ','     ;
>> PRODUCT         :   '*'     ;
>>
>> // Keywords
>> IN              :   'in'    ;
>>
>> // Functions
>> SUMMATION       :   'SUM'   ;
>> LOOP            :   'LOOP'  ;
>> TAN             :   'tan'   ;
>> COS             :   'cos'   ;
>> SIN             :   'sin'   ;
>> LOG             :   'log'   ;
>> LOG10           :   'log10' ;
>> EXP             :   'exp'   ;
>> POW             :   'pow'   ;
>>
>>
>> /** Single-line comments */
>> SL_COMMENT
>>  : '//' ~( '\n'|'\r' )* '\r'? '\n' { $channel=HIDDEN; }
>>    ;
>>
>> /** multiple-line comments */
>> ML_COMMENT
>>    :    '/*'
>>        ( options {greedy=false;} : . )*
>>        '*/'
>>        {$channel=HIDDEN;}
>>    ;
>>
>> IDENT :
>>  ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
>>  ;
>>
>> // a numeric literal
>> NUM_INT
>>  : ('0'..'9')+ EXPONENT?
>>  ;
>>
>> NUM_FLOAT
>>    :     DIGITS '.' DIGITS? EXPONENT?
>>    | '.' DIGITS EXPONENT?
>>    ;
>>
>> fragment
>> DIGITS : ('0'..'9')+ ;
>>
>>
>> // a protected method to assist in matching floating point numbers
>> fragment
>> EXPONENT
>>  : ('e'|'E') ('+'|'-')? ('0'..'9')+
>>  ;
>>
>> // Whitespace -- ignored
>> WS    :    (    ' '
>>        |    '\t'
>>        |    '\f'
>>            // handle newlines
>>        |    (    '\r\n'  // Evil DOS
>>            |    '\n'    // Unix (the right way)
>>            )
>>        )+
>>        { $channel=HIDDEN; }
>>    ;
>>
>>
>>
>> -- 
>> Jon Schewe | http://mtu.net/~jpschewe
>> If you see an attachment named signature.asc, this is my digital
>> signature.
>> See http://www.gnupg.org for more information.
>>
>> For I am convinced that neither death nor life, neither angels
>> nor demons, neither the present nor the future, nor any
>> powers, neither height nor depth, nor anything else in all
>> creation, will be able to separate us from the love of God that
>> is in Christ Jesus our Lord. - Romans 8:38-39
>>
>>

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From parrt at cs.usfca.edu  Tue Jan 22 10:17:42 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 22 Jan 2008 10:17:42 -0800
Subject: [antlr-interest] Antlr dropping tokens?
In-Reply-To: <47963245.90706@mtu.net>
References: <4794B9DF.4060808@mtu.net>
	<F9DA41DB-8C6A-47EC-8D0C-BBD7A24D69F1@cs.usfca.edu>
	<47963245.90706@mtu.net>
Message-ID: <4E76ED6C-1BC4-4A92-B82E-242A65C2154D@cs.usfca.edu>

Hi Jon,

$a* would allow $a to be an empty list whereas $a+ with throw an  
exception if the list were in.  In general you must match the  
cardinality on the right side with cardinality on the left :)
Ter
On Jan 22, 2008, at 10:13 AM, Jon Schewe wrote:

> What is difference between $a* and $a+?
>
> Terence Parr wrote:
>> same error as last person with this problem a day or so ago.
>>
>> use $a+ or $a*
>>
>> Ter
>> On Jan 21, 2008, at 7:27 AM, Jon Schewe wrote:
>>
>>> Here's a piece of my grammar that I'm testing with junit.  It  
>>> appears
>>> that some tokens are getting dropped.
>>> The input is this:
>>> b[1 ... (param1 - 5 - 1) * 4]
>>>
>>> The resulting tree is this:
>>> (b (SUM (PRODUCT (NUMBER 1))) (SUM (PRODUCT (SUM (PRODUCT param1)
>>> (PRODUCT (NUMBER -1) (NUMBER 5)) (PRODUCT (NUMBER -1) (NUMBER  
>>> 1))))))
>>>
>>> Where did the "* 4" go?  I didn't think ANTLR could drop tokens like
>>> that.  This is using antlr 3.0.1.
>>>
>>> The grammar fragment is below:
>>> /**
>>> * Name used in a variable declaration.
>>> */
>>> nameDecl :
>>> IDENT -> IDENT
>>> | IDENT LBRACK lb=subscriptAddExpr[false] ELLIPSIS
>>> ub=subscriptAddExpr[false] RBRACK -> ^(IDENT $lb $ub)
>>> ;
>>> subscriptAddExpr[boolean negate]
>>> :
>>> subscriptMultExpr[negate] (PLUS subscriptMultExpr[negate] | MINUS
>>> subscriptMultExpr[!negate])* -> ^(SUM subscriptMultExpr+)
>>>
>>> ;
>>>
>>> /**
>>> * @param negate if true, negate all expressions by multiplying by -1
>>> */
>>> subscriptMultExpr[boolean negate]
>>> :
>>> a+=subscriptAtom (a+=subscriptMultHelp)* -> {negate}? ^(PRODUCT
>>> ^(NUMBER NUM_INT["-1"]) $a)
>>>                                          ->           ^(PRODUCT $a)
>>> ;
>>>
>>> subscriptMultHelp : PRODUCT subscriptAtom -> subscriptAtom ;
>>>
>>> /**
>>> * Base type that can be inside a subscript.
>>> */
>>> subscriptAtom
>>> :
>>> IDENT
>>> | numint
>>> | subscriptParExpression
>>> ;
>>>
>>> subscriptParExpression
>>> :
>>> LPAREN subscriptAddExpr[false] RPAREN -> subscriptAddExpr
>>> ;
>>>
>>>
>>> /**
>>> * A finite integer number.  May be negative.
>>> */
>>> numint
>>> :
>>> MINUS NUM_INT -> ^(NUMBER ^(MINUS NUM_INT))
>>> | NUM_INT -> ^(NUMBER NUM_INT)
>>> ;
>>>
>>> // ----------- Lexer ---------------------
>>> // Operators
>>> LPAREN          :   '('     ;
>>> RPAREN          :   ')'     ;
>>> LBRACK          :   '['     ;
>>> RBRACK          :   ']'     ;
>>> ELLIPSIS        :   '...'   ;
>>> EQ              :   '='     ;
>>> MINUS           :   '-'     ;
>>> PLUS            :   '+'     ;
>>> SEMI            :   ';'     ;
>>> LCURLY          :   '{'     ;
>>> RCURLY          :   '}'     ;
>>> LE              :   '<='    ;
>>> COLON           :   ':'     ;
>>> COMMA           :   ','     ;
>>> PRODUCT         :   '*'     ;
>>>
>>> // Keywords
>>> IN              :   'in'    ;
>>>
>>> // Functions
>>> SUMMATION       :   'SUM'   ;
>>> LOOP            :   'LOOP'  ;
>>> TAN             :   'tan'   ;
>>> COS             :   'cos'   ;
>>> SIN             :   'sin'   ;
>>> LOG             :   'log'   ;
>>> LOG10           :   'log10' ;
>>> EXP             :   'exp'   ;
>>> POW             :   'pow'   ;
>>>
>>>
>>> /** Single-line comments */
>>> SL_COMMENT
>>> : '//' ~( '\n'|'\r' )* '\r'? '\n' { $channel=HIDDEN; }
>>>   ;
>>>
>>> /** multiple-line comments */
>>> ML_COMMENT
>>>   :    '/*'
>>>       ( options {greedy=false;} : . )*
>>>       '*/'
>>>       {$channel=HIDDEN;}
>>>   ;
>>>
>>> IDENT :
>>> ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
>>> ;
>>>
>>> // a numeric literal
>>> NUM_INT
>>> : ('0'..'9')+ EXPONENT?
>>> ;
>>>
>>> NUM_FLOAT
>>>   :     DIGITS '.' DIGITS? EXPONENT?
>>>   | '.' DIGITS EXPONENT?
>>>   ;
>>>
>>> fragment
>>> DIGITS : ('0'..'9')+ ;
>>>
>>>
>>> // a protected method to assist in matching floating point numbers
>>> fragment
>>> EXPONENT
>>> : ('e'|'E') ('+'|'-')? ('0'..'9')+
>>> ;
>>>
>>> // Whitespace -- ignored
>>> WS    :    (    ' '
>>>       |    '\t'
>>>       |    '\f'
>>>           // handle newlines
>>>       |    (    '\r\n'  // Evil DOS
>>>           |    '\n'    // Unix (the right way)
>>>           )
>>>       )+
>>>       { $channel=HIDDEN; }
>>>   ;
>>>
>>>
>>>
>>> -- 
>>> Jon Schewe | http://mtu.net/~jpschewe
>>> If you see an attachment named signature.asc, this is my digital
>>> signature.
>>> See http://www.gnupg.org for more information.
>>>
>>> For I am convinced that neither death nor life, neither angels
>>> nor demons, neither the present nor the future, nor any
>>> powers, neither height nor depth, nor anything else in all
>>> creation, will be able to separate us from the love of God that
>>> is in Christ Jesus our Lord. - Romans 8:38-39
>>>
>>>
>
> -- 
> Jon Schewe | http://mtu.net/~jpschewe
> If you see an attachment named signature.asc, this is my digital
> signature.
> See http://www.gnupg.org for more information.
>
> For I am convinced that neither death nor life, neither angels nor  
> demons, neither the present nor the future, nor any powers, neither  
> height nor depth, nor anything else in all creation, will be able to  
> separate us from the love of God that is in Christ Jesus our Lord. -  
> Romans 8:38-39
>


From jpschewe at mtu.net  Tue Jan 22 10:33:46 2008
From: jpschewe at mtu.net (Jon Schewe)
Date: Tue, 22 Jan 2008 12:33:46 -0600
Subject: [antlr-interest] Antlr could not analyze decision - intermittent
Message-ID: <4796370A.5090600@mtu.net>

I get the following error 5 out of 6 times when I run antlr on the same 
grammar file without changing anything.  Why don't I get the error 
everytime?  This makes it very hard to debug if my changes will fix 
anything. 

BTW I've already added options {k=1;} to the rule that this refers to 
and I have syntatic predicates to resolve the issues.

     [java] ANTLR Parser Generator  Version 3.0.1 (August 13, 2007)  
1989-2007
     [java] warning(205): 
src/com/honeywell/htc/schedinfra/pconstraint/parser/GHOCES.g:200:5: 
ANTLR could not analyze this decision in rule constraintDecl; often this 
is because of recursive rule references visible from the left edge of 
alternatives.  ANTLR will re-analyze the decision with a fixed lookahead 
of k=1.  Consider using "options {k=1;}" for that decision and possibly 
adding a syntactic predicate.
 

-- 
Jon Schewe | http://mtu.net/~jpschewe
If you see an attachment named signature.asc, this is my digital
signature.
See http://www.gnupg.org for more information.

For I am convinced that neither death nor life, neither angels 
nor demons, neither the present nor the future, nor any 
powers, neither height nor depth, nor anything else in all 
creation, will be able to separate us from the love of God that 
is in Christ Jesus our Lord. - Romans 8:38-39


From antlr at mirality.co.nz  Tue Jan 22 10:49:11 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 23 Jan 2008 07:49:11 +1300
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <"L3DB4532506814c2bB1F07629C59D5E8B.1201021868.scalix.tempo
	ral-wave.com*"@MHS>
References: <47960650.6020000@gaengel.de>
	<"L3DB4532506814c2bB1F07629C59D5E8B.1201021868.scalix.temporal-wave.com*"@MHS>
Message-ID: <20080122184941.0B40A11EC7B@www.antlr.org>

At 05:50 23/01/2008, Jim Idle wrote:
 >
 >fragment DOT : '.' ;
 >
 >range
 >: '.'
 >    (     ('.')=>'.'         // It is indeed two dots
 >       |  { $type = DOT; }   // Just a dot
 >    )
 >;

Except the "range" rule needs to be a lexer rule as well.  So 
"RANGE" instead.  And if you're defining DOT like that anyway, you 
might as well write it like this:

fragment DOT : '.';

RANGE
   : DOT
     ( (DOT) => DOT
     | {$type = DOT; }
     )
   ;


From antlr at mirality.co.nz  Tue Jan 22 10:53:07 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 23 Jan 2008 07:53:07 +1300
Subject: [antlr-interest] Antlr could not analyze decision - intermittent
In-Reply-To: <4796370A.5090600@mtu.net>
References: <4796370A.5090600@mtu.net>
Message-ID: <20080122185340.3149611EC3C@www.antlr.org>

At 07:33 23/01/2008, Jon Schewe wrote:
 >
 >I get the following error 5 out of 6 times when I run antlr on 
the
 >same grammar file without changing anything.  Why don't I get 
the
 >error everytime?  This makes it very hard to debug if my changes 

 >will fix anything.

I could be wrong, but I think it has a timeout for 
generating/processing the DFA.  If it hits the timeout without 
finishing, then you get the error, otherwise it's able to 
continue.

Most likely your grammar is a border case where sometimes it 
manages to make it in time but other times it times out.


From jimi at temporal-wave.com  Tue Jan 22 11:09:34 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 22 Jan 2008 11:09:34 -0800
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <"2555.10421201026539.scalix.temporal-wave.com*"@MHS>
Message-ID: <"L018DCD2AC2F34da4A078C397B299D337.1201030213.scalix.temporal-wave.com*"@MHS>

Just a typo. But when you define using fragments, then you will quite 
often make a function call in the lexer, rather than just matching. So 
it is slower. In this case it may not matter.

Jim

> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> Sent: Tuesday, January 22, 2008 10:49 AM
> To: Jim Idle; antlr-interest at antlr.org
> Subject: Re: [antlr-interest] REAL or int or Range
> 
> At 05:50 23/01/2008, Jim Idle wrote:
>  >
>  >fragment DOT : '.' ;
>  >
>  >range
>  >: '.'
>  >    (     ('.')=>'.'         // It is indeed two dots
>  >       |  { $type = DOT; }   // Just a dot
>  >    )
>  >;
> 
> Except the "range" rule needs to be a lexer rule as well.  So
> "RANGE" instead.  And if you're defining DOT like that anyway, you
> might as well write it like this:
> 
> fragment DOT : '.';
> 
> RANGE
>    : DOT
>      ( (DOT) => DOT
>      | {$type = DOT; }
>      )
>    ;
> 



From r.mark.volkmann at gmail.com  Tue Jan 22 12:21:54 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 22 Jan 2008 14:21:54 -0600
Subject: [antlr-interest] gated semantic predicate usage
In-Reply-To: <L03DC7AB51D744e8cB38CED80B2D63D6A.1201021609.scalix.temporal-wave.com*@MHS>
References: <f0fcc6820801220652w77ab359w1e12172a0bd6b2d7@mail.gmail.com>
	<L03DC7AB51D744e8cB38CED80B2D63D6A.1201021609.scalix.temporal-wave.com*@MHS>
Message-ID: <f0fcc6820801221221x4eecd129g2f27eca331ef7283@mail.gmail.com>

I'm using the antlr-2008-01-14.10 version now. I no longer get the
NullPointerException which is good, but it also doesn't throw an
exception when the predicate fails. Maybe it's not supposed to. I just
get a message that says "

line 11:0 mismatched input 'list' expecting EOF
MathTree.g: node from line 0:0 mismatched tree node: <mismatched
token: [@55,354:357='list',<12>,11:0], resync=a = 3.14".

I'd like to figure out a way to detect that some input (in this case a
statement that starts with "list") wasn't processed due to the gated
semantic predicate and output a better error message. Do you know how
to detect this?

On Jan 22, 2008 10:46 AM, Jim Idle <jimi at temporal-wave.com> wrote:
> I have found that certain DFA decisions involving gated predicates do
> not generate quite the correct code, in that they work correctly when
> the gate is passed but give NVA errors when they do not. However, if you
> switch to the latest daily build (see downloads page) you will find that
> they (and som other DFA stuff) work perfectly as Ter has fixed 'em.
>
> Jim
>
>
> > -----Original Message-----
> > From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> > Sent: Tuesday, January 22, 2008 6:52 AM
> > To: antlr-interest Interest
> > Subject: [antlr-interest] gated semantic predicate usage
> >
> > In the book in section 13.2 there is an example of using a gated
> > semantic predicate to conditionally disable assert statements. When
> > using this pattern in a parser grammar the result seems to be an error
> > message like "mismatched input 'assert' expecting EOF" followed by a
> > stack trace for a NullPointerException from the tree parser. I tried
> > adding a catch at the end of the parser rule that contains the gated
> > semantic predicate, but no exception is thrown. I'm confused about how
> > to use this mechanism to disable certain statements and output a
> > reasonable error message when they appear in input.
> >
> > --
> > R. Mark Volkmann
> > Object Computing, Inc.
>
>
>



-- 
R. Mark Volkmann
Object Computing, Inc.

From dave at badgers-in-foil.co.uk  Tue Jan 22 13:16:54 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Tue, 22 Jan 2008 21:16:54 +0000
Subject: [antlr-interest] Antlr could not analyze decision - intermittent
In-Reply-To: <20080122185340.3149611EC3C@www.antlr.org>
References: <4796370A.5090600@mtu.net>
	<20080122185340.3149611EC3C@www.antlr.org>
Message-ID: <20080122211654.GA10491@badgers-in-foil.co.uk>

On Wed, Jan 23, 2008 at 07:53:07AM +1300, Gavin Lambert wrote:
> At 07:33 23/01/2008, Jon Schewe wrote:
> > I get the following error 5 out of 6 times when I run antlr on the
> > same grammar file without changing anything.  Why don't I get the
> > error everytime?  This makes it very hard to debug if my changes
> > will fix anything.
> 
> I could be wrong, but I think it has a timeout for 
> generating/processing the DFA.  If it hits the timeout without 
> finishing, then you get the error, otherwise it's able to 
> continue.

Indeed!

Use the

  -Xconversiontimeout <n>

command-line option to allow ANTLR work at the problem for longer.
(Sorry, I don't recall if the argument is in seconds or milliseconds.)


ta,
dave

-- 
http://david.holroyd.me.uk/

From jimi at temporal-wave.com  Tue Jan 22 13:18:29 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 22 Jan 2008 13:18:29 -0800
Subject: [antlr-interest] gated semantic predicate usage
In-Reply-To: <f0fcc6820801221221x4eecd129g2f27eca331ef7283@mail.gmail.com>
Message-ID: <"L8C383F2FABC94f60A5620B580CF264D7.1201037943.scalix.temporal-wave.com*"@MHS>

> -----Original Message-----
> From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> Sent: Tuesday, January 22, 2008 12:22 PM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] gated semantic predicate usage
> 
> I'm using the antlr-2008-01-14.10 version now. I no longer get the
> NullPointerException which is good, but it also doesn't throw an
> exception when the predicate fails. Maybe it's not supposed to. I just
> get a message that says "
> 
> line 11:0 mismatched input 'list' expecting EOF
> MathTree.g: node from line 0:0 mismatched tree node: <mismatched
> token: [@55,354:357='list',<12>,11:0], resync=a = 3.14".
> 
> I'd like to figure out a way to detect that some input (in this case a
> statement that starts with "list") wasn't processed due to the gated
> semantic predicate and output a better error message. Do you know how
> to detect this?

I think you are probably trying to use a gated predicate for something 
that it is not intended for. If the gate is turned off it means that the 
recognizer just won't ever take the alt that the gate protects. If there 
are tokens in the input stream, then something must match them or you 
have a syntax error.

When you get  a syntax error, your tree rewrite will possibly try to 
write null elements. You must protect for this in rewrite rules -> {$xxx 
!=null}? ^(TOKEN $xxx+)

If you want to know whether the gate was open or closed, either 
reevaluate the predicate, or evaluate it in the rule and return it as a 
Boolean return type. However, you will still need something to process 
your list token. Perhaps what you want are conditional rewrites? What is 
it that you are trying to achieve?

Jim



From r.mark.volkmann at gmail.com  Tue Jan 22 13:57:11 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 22 Jan 2008 15:57:11 -0600
Subject: [antlr-interest] gated semantic predicate usage
In-Reply-To: <L8C383F2FABC94f60A5620B580CF264D7.1201037943.scalix.temporal-wave.com*@MHS>
References: <f0fcc6820801221221x4eecd129g2f27eca331ef7283@mail.gmail.com>
	<L8C383F2FABC94f60A5620B580CF264D7.1201037943.scalix.temporal-wave.com*@MHS>
Message-ID: <f0fcc6820801221357t723e6564h8362d2562480b2f@mail.gmail.com>

On Jan 22, 2008 3:18 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> > -----Original Message-----
> > From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> > Sent: Tuesday, January 22, 2008 12:22 PM
> > To: Jim Idle
> > Cc: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] gated semantic predicate usage
> >
> > I'm using the antlr-2008-01-14.10 version now. I no longer get the
> > NullPointerException which is good, but it also doesn't throw an
> > exception when the predicate fails. Maybe it's not supposed to. I just
> > get a message that says "
> >
> > line 11:0 mismatched input 'list' expecting EOF
> > MathTree.g: node from line 0:0 mismatched tree node: <mismatched
> > token: [@55,354:357='list',<12>,11:0], resync=a = 3.14".
> >
> > I'd like to figure out a way to detect that some input (in this case a
> > statement that starts with "list") wasn't processed due to the gated
> > semantic predicate and output a better error message. Do you know how
> > to detect this?
>
> I think you are probably trying to use a gated predicate for something
> that it is not intended for.

You're probably right. See my further comments below.

> If the gate is turned off it means that the
> recognizer just won't ever take the alt that the gate protects. If there
> are tokens in the input stream, then something must match them or you
> have a syntax error.
>
> When you get  a syntax error, your tree rewrite will possibly try to
> write null elements. You must protect for this in rewrite rules -> {$xxx
> !=null}? ^(TOKEN $xxx+)
>
> If you want to know whether the gate was open or closed, either
> reevaluate the predicate, or evaluate it in the rule and return it as a
> Boolean return type. However, you will still need something to process
> your list token. Perhaps what you want are conditional rewrites? What is
> it that you are trying to achieve?

I have a language that can be used in "batch" mode or interactively.
In batch mode you process a file of statements. In interactive mode
you enter statements one at a time at a prompt. Some statements are
only intended for interactive use. For example, "help" which outputs
help on the supported statements.

My needs seem similar to what is discussed in section 13.2 of the book
where Terr is conditionally disabling use of the Java assert keyword
using a gated semantic predicate. When allowAssert is false and an
"assert" is found in the input, I suspect no other alternative will
handle it. That's also true for my "help" statements.

If I'm using gated semantic predicates incorrectly then it seems the
book example is a bit suspect.

-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Tue Jan 22 14:34:53 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 22 Jan 2008 14:34:53 -0800
Subject: [antlr-interest] CS652: programming languages course starts tomorrow
Message-ID: <65563A9B-D467-4295-B322-6268B6CC184A@cs.usfca.edu>

howdy...if you want to follow along as I build notes, labs, and  
projects:

http://www.antlr.org/wiki/display/CS652/CS652+Home

Ter

From lilypondtool at organum.hu  Tue Jan 22 14:40:47 2008
From: lilypondtool at organum.hu (Bertalan Fodor)
Date: Tue, 22 Jan 2008 23:40:47 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>
References: <4795B0BE.70908@organum.hu>
	<ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>
Message-ID: <479670EF.10803@organum.hu>

Now I could try this. The problem is that I would have to emit the 
EOF_TOKEN from the parser, because the lexer has no idea whether the 
nested language input has come to its end or not. But the token buffer 
surely contains tokens that are not in the nested language, so I have to 
get out from the nested lexer and roll back the consumed tokens somehow.

Do you have an idea for the solution?

Thank you,

Bert

Thomas Brandon ?rta:
> Check out the island-grammar example. It shows lexer based nesting. 
> The pertinent code in the main lexer is:
> JAVADOC : '/**'
>           {
>             // create a new javadoc lexer/parser duo that feeds
>             // off the current input stream
>             System.out.println("enter javadoc");
>             JavadocLexer j = new JavadocLexer(input);
>             CommonTokenStream tokens = new CommonTokenStream(j);
>             tokens.discardTokenType (JavadocLexer.WS);
>             JavadocParser p = new JavadocParser(tokens);
>             p.comment();
>             // returns a JAVADOC token to the java parser but on a
>             // different channel than the normal token stream so it
>             // doesn't get in the way.
>             $channel = JAVADOC_CHANNEL;
>           }
>         ;
> And in the nested lexer:
> /** When the javadoc parser sees end-of-comment it just says 'I'm 
> done', which
>  *  consumes the tokens and forces this javadoc parser (feeding
>  *  off the input stream currently) to exit.  It returns from
>  *  method comment(), which was called from JAVADOC action in the
>  *  Simple parser's lexer.
>  */
> END     : '*/' {token = Token.EOF_TOKEN;}
>           {System.out.println("exit javadoc");}
>         ;
>
> Your code in the outer lexer looks OK, just passing the same input 
> stream should keep it synched. Check your code for exiting the inner 
> lexer.
>
> Tom.
> On Jan 22, 2008 8:00 PM, Bertalan Fodor (LilyPondTool) 
> <lilypondtool at organum.hu <mailto:lilypondtool at organum.hu>> wrote:
>
>     Thank you for your answer.
>     If I understand your suggestion correctly, the problem with it is
>     that I can't lex the symbol: actually it is an embedded language,
>     so only the nested lexer and parser can find the end of the
>     embedded part. So actually I would need the following: feed the
>     nested lexer/parser with all the input beginning from the '/**'
>     symbol and let it parse it. Then when the parsing is over, I'd
>     like to set the non-nested lexer/parser to the end position of the
>     nested parsing. So the problem is how to set the input stream
>     position to the end of the embedded part, either rewinding or
>     forward winding. Maybe I can use the return value of the nested
>     rootRule() to find the position. However I could not find a way
>     yet how to do this all.
>
>     Anyway, if you have some example of some nested parsing, that
>     could probably effectively help me.
>
>     Thanks,
>
>     Bert
>
>
>     Harald M. M?ller wrote:
>>     I wouldn't do it like this.
>>     If you want to really do this in the (non-nested) lexer: "Lex" the symbol;
>>     and then start a NEW StringReader on the symbols's getText(), from which you
>>     feed your (nested) lexer and parser.
>>     Maybe you want to do this in the (non-nested) parser ... easy if the symbol
>>     turns up there; a little work if you pushed the symbol into the HIDDEN
>>     channel (or some other channel) in the (non-nested) lexer, so that you have
>>     to "undig" it somehow in the (non-nested) parser
>>     Hope this very short explanation helps.
>>     Regards
>>     Harald
>>
>>       
>>>     -----Original Message-----
>>>     From: antlr-interest-bounces at antlr.org <mailto:antlr-interest-bounces at antlr.org> 
>>>     [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Bertalan Fodor
>>>     Sent: Tuesday, January 22, 2008 12:45 AM
>>>     To: antlr-interest at antlr.org <mailto:antlr-interest at antlr.org>
>>>     Subject: [antlr-interest] ANTLR3 Nested parser
>>>
>>>     Hi,
>>>
>>>     I'm creating a parser with nested parser. To make it simple I 
>>>     tell you my problem as if I was doing Javadoc parsing inside 
>>>     a Java parser.
>>>     So I have this in my lexer:
>>>     JAVADOC: '/**' { JavadocParser javadocParser = new 
>>>     JavadocParser(new CommonTokenStream(new 
>>>     JavadocLexer(this.input))); javadocParser.rootRule(); }
>>>
>>>     The problem is that while this code correctly switches to the 
>>>     Javadoc lexer, and parses the Javadoc parts correctly, upon 
>>>     returning from the Javadoc parsing, the character stream is 
>>>     not correctly positioned.
>>>
>>>     Can you help me how to achieve the nested parsing in antlr 3?
>>>
>>>     Thank you very much,
>>>
>>>     Bertalan Fodor
>>>
>>>     ps I've already asked this on this list, but got no answer, 
>>>     so I tried to make my question more simple.
>>>
>>>         
>>       
>
>
>     -- 
>     LilyPondTool is the editor for LilyPond files.
>     See http://lilypondtool.organum.hu
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/576389ed/attachment-0001.html 

From dejas9000 at gmail.com  Tue Jan 22 14:49:53 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Tue, 22 Jan 2008 16:49:53 -0600
Subject: [antlr-interest] Assembly for Antlr.Runtime namespace
Message-ID: <38a26f430801221449r6638453bv5ee2a76cbd24a002@mail.gmail.com>

Hello!

I have downloaded ANTLRWorks and created my first grammar.  I was then able
to construct a parser and lexer via ANTLRWorks.  However the two files,
AGLParser.cs and AGLLexer.cs appear to have dependencies on the
Antrl.Runtime namespace. I cannot however find any source or binaries on
antlr.org that appear to define this namespace.  Could someone please point
me to the correct libraries?  Thanks

-- Dejas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/b76e1d48/attachment.html 

From jaluber at gmx.de  Tue Jan 22 15:14:09 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 23 Jan 2008 00:14:09 +0100
Subject: [antlr-interest] Assembly for Antlr.Runtime namespace
In-Reply-To: <38a26f430801221449r6638453bv5ee2a76cbd24a002@mail.gmail.com>
References: <38a26f430801221449r6638453bv5ee2a76cbd24a002@mail.gmail.com>
Message-ID: <479678C1.5060002@gmx.de>

Dejas Ninethousand schrieb:
> Hello!
> 
> I have downloaded ANTLRWorks and created my first grammar.  I was then 
> able to construct a parser and lexer via ANTLRWorks.  However the two 
> files, AGLParser.cs and AGLLexer.cs appear to have dependencies on the 
> Antrl.Runtime namespace. I cannot however find any source or binaries on 
> antlr.org <http://antlr.org> that appear to define this namespace.  
> Could someone please point me to the correct libraries?  Thanks
> 
> -- Dejas

That is somewhat complicated. If you have ANTLRworks 1.1.4 or prior, 
then you have to get the source distribution for 3.0.1 and look for the 
DLLs. If you use version 1.1.5... I don't know which intermediate build 
that version is using. You can extract that and build the libraries 
yourself. Or you could do that with the newest intermediate build and 
generate the files via the command line. I haven't gotten around to put 
the compiled result into Perforce. BTW, the C# target isn't in sync with 
the latest Java changes, but if you do only 3.0 stuff, you shouldn't be 
bothered.

Johannes

From dejas9000 at gmail.com  Tue Jan 22 15:19:38 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Tue, 22 Jan 2008 17:19:38 -0600
Subject: [antlr-interest] Assembly for Antlr.Runtime namespace
In-Reply-To: <479678C1.5060002@gmx.de>
References: <38a26f430801221449r6638453bv5ee2a76cbd24a002@mail.gmail.com>
	<479678C1.5060002@gmx.de>
Message-ID: <38a26f430801221519u5625ff47u59a14cc070287acd@mail.gmail.com>

I have antworks-1.1.5.jar.  If I make a copy, change it to .zip, and open it
up where in the package structure would I find the .cs files that define the
Antrl.Runtime namespace?

If I can get that far I can probably build my own dll (I would imagine).

-- Dejas

On Jan 22, 2008 5:14 PM, Johannes Luber <jaluber at gmx.de> wrote:

> Dejas Ninethousand schrieb:
> > Hello!
> >
> > I have downloaded ANTLRWorks and created my first grammar.  I was then
> > able to construct a parser and lexer via ANTLRWorks.  However the two
> > files, AGLParser.cs and AGLLexer.cs appear to have dependencies on the
> > Antrl.Runtime namespace. I cannot however find any source or binaries on
> > antlr.org <http://antlr.org> that appear to define this namespace.
> > Could someone please point me to the correct libraries?  Thanks
> >
> > -- Dejas
>
> That is somewhat complicated. If you have ANTLRworks 1.1.4 or prior,
> then you have to get the source distribution for 3.0.1 and look for the
> DLLs. If you use version 1.1.5... I don't know which intermediate build
> that version is using. You can extract that and build the libraries
> yourself. Or you could do that with the newest intermediate build and
> generate the files via the command line. I haven't gotten around to put
> the compiled result into Perforce. BTW, the C# target isn't in sync with
> the latest Java changes, but if you do only 3.0 stuff, you shouldn't be
> bothered.
>
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/6fca3fe0/attachment.html 

From jaluber at gmx.de  Tue Jan 22 15:29:24 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 23 Jan 2008 00:29:24 +0100
Subject: [antlr-interest] Assembly for Antlr.Runtime namespace
In-Reply-To: <38a26f430801221519u5625ff47u59a14cc070287acd@mail.gmail.com>
References: <38a26f430801221449r6638453bv5ee2a76cbd24a002@mail.gmail.com>	
	<479678C1.5060002@gmx.de>
	<38a26f430801221519u5625ff47u59a14cc070287acd@mail.gmail.com>
Message-ID: <47967C54.30809@gmx.de>

Dejas Ninethousand schrieb:
> I have antworks-1.1.5.jar.  If I make a copy, change it to .zip, and 
> open it up where in the package structure would I find the .cs files 
> that define the Antrl.Runtime namespace?

That's the theory. :) Go into code/antlr/main/runtime/CSharp to find the 
project files.
> 
> If I can get that far I can probably build my own dll (I would imagine).

There are only the .sln files for VS - the NANT build isn't working 
right now.

Johannes

From dejas9000 at gmail.com  Tue Jan 22 15:45:42 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Tue, 22 Jan 2008 17:45:42 -0600
Subject: [antlr-interest] Assembly for Antlr.Runtime namespace
In-Reply-To: <47967C54.30809@gmx.de>
References: <38a26f430801221449r6638453bv5ee2a76cbd24a002@mail.gmail.com>
	<479678C1.5060002@gmx.de>
	<38a26f430801221519u5625ff47u59a14cc070287acd@mail.gmail.com>
	<47967C54.30809@gmx.de>
Message-ID: <38a26f430801221545i49c38f41taa2a26199a812816@mail.gmail.com>

That directory structure did not exist in the jar; however, I downloaed
antlr-3.0.1.tar.gz source distro and found four .dll files in
/runtime/CSharp/bin/net-2.0 including antlr.runtime.dll.

After adding those dlls to my references list, I attempted to compile but
now get two errors:

Error    2    An object reference is required for the non-static field,
method, or property 'Antlr.Runtime.Debug.DebugParser.dbg'
C:\projects\AGLInterpExp\AGLParser.cs    52    59    AGLInterpExp
Error    3    An object reference is required for the non-static field,
method, or property 'Antlr.Runtime.Debug.DebugParser.dbg'
C:\projects\AGLInterpExp\AGLParser.cs    52    59    AGLInterpExp


that line (59) line is:

protected ITreeAdaptor adaptor = new DebugTreeAdaptor(dbg, new
CommonTreeAdaptor());

dbg does not appear to be defined as a field in surrounding ANTLRWorks
generated "AGLParser.cs" file.  Is it perhaps expecting that member to be
inherited from DebugParser but for some reason is not?

-- Dejas



On Jan 22, 2008 5:29 PM, Johannes Luber <jaluber at gmx.de> wrote:

> Dejas Ninethousand schrieb:
> > I have antworks-1.1.5.jar.  If I make a copy, change it to .zip, and
> > open it up where in the package structure would I find the .cs files
> > that define the Antrl.Runtime namespace?
>
> That's the theory. :) Go into code/antlr/main/runtime/CSharp to find the
> project files.
> >
> > If I can get that far I can probably build my own dll (I would imagine).
>
> There are only the .sln files for VS - the NANT build isn't working
> right now.
>
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/d9efd6a5/attachment.html 

From jimi at temporal-wave.com  Tue Jan 22 15:54:08 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 22 Jan 2008 15:54:08 -0800
Subject: [antlr-interest] gated semantic predicate usage
In-Reply-To: <f0fcc6820801221357t723e6564h8362d2562480b2f@mail.gmail.com>
Message-ID: <"LC5CFFD22818B4a97B2C8FE51F19B8EDE.1201047286.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> Sent: Tuesday, January 22, 2008 1:57 PM
> To: Jim Idle
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] gated semantic predicate usage
> 
> 
> My needs seem similar to what is discussed in section 13.2 of the book
> where Terr is conditionally disabling use of the Java assert keyword
> using a gated semantic predicate. When allowAssert is false and an
> "assert" is found in the input, I suspect no other alternative will
> handle it. That's also true for my "help" statements.
> 
> If I'm using gated semantic predicates incorrectly then it seems the
> book example is a bit suspect.

Not really. It just turns on or off rules. If you turn off assert then 
the parser will give you a syntax error, which is what you want if you 
are not supporting assert!

In your case, in batch mode, then would you not want to reject batch 
files that contain commands that can't be used? 

However, I must say that my preferred approach to such things is to 
parse them and produce the tree then when the tree is parsing you can 
issue a semantic error: "help command is no allowed in batch mode.", or 
you can just silently ignore it. If you turn off the parsing of it 
altogether, then the parser will issue a syntax error, which is what it 
should do and the gated predicate is working just fine.

Hope that helps you to decide on the approach to your 'problem'?

Jim


From jimi at temporal-wave.com  Tue Jan 22 16:08:17 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 22 Jan 2008 16:08:17 -0800
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <479670EF.10803@organum.hu>
Message-ID: <"L2BE68ABE0E554909B908614CF2AB8809.1201048134.scalix.temporal-wave.com*"@MHS>

If the exit trigger in your nested language is not something that can be
picked up lexically, then I don?t see how you can use the nested grammar
in quite the same way. Though it seems a little strange that there is no
lexical context for the end of the embedded language, I have in fact had
to deal with something similar to this myself.

 

However, I assume that your parser knows when to stop parsing, so:

 

1)      There will be a finite set of terminals that end the parse;

2)      Have the second lexer just lex from the trigger point to the end
of the input stream (it should not throw out any errors, use ANY : . ;
to consume anything it can?t really handle.

a.       If there is a way to safely determine a point where it
definitely ends, then limit the input length to that;

3)      Parse the second token stream but don?t use EOF on your start
rule.

4)      Record the input position in the input stream for any terminal
that might end the parse;

5)      When the parse ends, reset the input stream to the offset
directly following the end of the terminating terminal;

 

But, that seems like you will end up lexing a lot of things you should
not need to this way, especially if you have a lot of embedded elements.
Perhaps if you mention what you are trying to parse, then better
solutions can be thought of.  

 

One other thought is whether the first lexer can determine where the
embedded language starts and stops in which case you can tokenize the
whole text into one token and invoke the embedded language parser from
your parser.

 

Jim

 

From: Bertalan Fodor [mailto:lilypondtool at organum.hu] 
Sent: Tuesday, January 22, 2008 2:41 PM
To: Thomas Brandon
Cc: Antlr Interest
Subject: Re: [antlr-interest] ANTLR3 Nested parser

 

Now I could try this. The problem is that I would have to emit the
EOF_TOKEN from the parser, because the lexer has no idea whether the
nested language input has come to its end or not. But the token buffer
surely contains tokens that are not in the nested language, so I have to
get out from the nested lexer and roll back the consumed tokens somehow.

Do you have an idea for the solution?

Thank you,

Bert

Thomas Brandon ?rta: 

Check out the island-grammar example. It shows lexer based nesting. The
pertinent code in the main lexer is:
JAVADOC : '/**'
          {
            // create a new javadoc lexer/parser duo that feeds
            // off the current input stream 
            System.out.println("enter javadoc");
            JavadocLexer j = new JavadocLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(j);
            tokens.discardTokenType (JavadocLexer.WS);
            JavadocParser p = new JavadocParser(tokens);
            p.comment();
            // returns a JAVADOC token to the java parser but on a
            // different channel than the normal token stream so it 
            // doesn't get in the way.
            $channel = JAVADOC_CHANNEL;
          }
        ;
And in the nested lexer:
/** When the javadoc parser sees end-of-comment it just says 'I'm done',
which 
 *  consumes the tokens and forces this javadoc parser (feeding
 *  off the input stream currently) to exit.  It returns from
 *  method comment(), which was called from JAVADOC action in the
 *  Simple parser's lexer. 
 */
END     : '*/' {token = Token.EOF_TOKEN;}
          {System.out.println("exit javadoc");}
        ;

Your code in the outer lexer looks OK, just passing the same input
stream should keep it synched. Check your code for exiting the inner
lexer. 

Tom.

On Jan 22, 2008 8:00 PM, Bertalan Fodor (LilyPondTool)
<lilypondtool at organum.hu> wrote:

Thank you for your answer.
If I understand your suggestion correctly, the problem with it is that I
can't lex the symbol: actually it is an embedded language, so only the
nested lexer and parser can find the end of the embedded part. So
actually I would need the following: feed the nested lexer/parser with
all the input beginning from the '/**' symbol and let it parse it. Then
when the parsing is over, I'd like to set the non-nested lexer/parser to
the end position of the nested parsing. So the problem is how to set the
input stream position to the end of the embedded part, either rewinding
or forward winding. Maybe I can use the return value of the nested
rootRule() to find the position. However I could not find a way yet how
to do this all.

Anyway, if you have some example of some nested parsing, that could
probably effectively help me.

Thanks,

Bert 



Harald M. M?ller wrote: 

I wouldn't do it like this.
If you want to really do this in the (non-nested) lexer: "Lex" the
symbol;
and then start a NEW StringReader on the symbols's getText(), from which
you
feed your (nested) lexer and parser.
Maybe you want to do this in the (non-nested) parser ... easy if the
symbol
turns up there; a little work if you pushed the symbol into the HIDDEN
channel (or some other channel) in the (non-nested) lexer, so that you
have
to "undig" it somehow in the (non-nested) parser
Hope this very short explanation helps.
Regards
Harald
 
  

   -----Original Message-----
   From: antlr-interest-bounces at antlr.org 
   [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Bertalan Fodor
   Sent: Tuesday, January 22, 2008 12:45 AM
   To: antlr-interest at antlr.org
   Subject: [antlr-interest] ANTLR3 Nested parser
    
   Hi,
    
   I'm creating a parser with nested parser. To make it simple I 
   tell you my problem as if I was doing Javadoc parsing inside 
   a Java parser.
   So I have this in my lexer:
   JAVADOC: '/**' { JavadocParser javadocParser = new 
   JavadocParser(new CommonTokenStream(new 
   JavadocLexer(this.input))); javadocParser.rootRule(); }
    
   The problem is that while this code correctly switches to the 
   Javadoc lexer, and parses the Javadoc parts correctly, upon 
   returning from the Javadoc parsing, the character stream is 
   not correctly positioned.
    
   Can you help me how to achieve the nested parsing in antlr 3?
    
   Thank you very much,
    
   Bertalan Fodor
    
   ps I've already asked this on this list, but got no answer, 
   so I tried to make my question more simple.
    
       

  

 

-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu

 

 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080122/86a2e25b/attachment-0001.html 

From tbrandonau at gmail.com  Tue Jan 22 16:45:38 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Wed, 23 Jan 2008 11:45:38 +1100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <479670EF.10803@organum.hu>
References: <4795B0BE.70908@organum.hu>
	<ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>
	<479670EF.10803@organum.hu>
Message-ID: <ebc876d70801221645u674d5b86g1eb7f56fb22ac97b@mail.gmail.com>

Lexing and parsing are completely independent and cannot influence each
other. In fact, in the current implementation of CommonTokenStream the
entire file is lexed when the first token is requested. The trouble with
using the nested parser to detect the extents is by the time it runs the
nested lexer will have already processed the entire input stream producing
errors you would have to ignore. You can try Jim's suggestion however it
seems that that will complicate error handling, with a likelihood of tokens
being processed by the wrong lexer.
It may be easier to write fragment lexer rules that did a basic parse of
your nested language. You should be able to take any parser rules, convert
all except the root rule to fragments and use them as is in a lexer
(assuming you don't use parameters, return values or scopes which would need
to be replaced with global variables). Then you can simplify them as much as
possible. Along the lines of the ANTLR grammar which parses actions for a
few elements (strings, character literals, curly delimited blocks etc) to
determine the end delimiter.

Tom.
On Jan 23, 2008 9:40 AM, Bertalan Fodor <lilypondtool at organum.hu> wrote:

>  Now I could try this. The problem is that I would have to emit the
> EOF_TOKEN from the parser, because the lexer has no idea whether the nested
> language input has come to its end or not. But the token buffer surely
> contains tokens that are not in the nested language, so I have to get out
> from the nested lexer and roll back the consumed tokens somehow.
>
> Do you have an idea for the solution?
>
> Thank you,
>
> Bert
>
> Thomas Brandon ?rta:
>
> Check out the island-grammar example. It shows lexer based nesting. The
> pertinent code in the main lexer is:
> JAVADOC : '/**'
>           {
>             // create a new javadoc lexer/parser duo that feeds
>             // off the current input stream
>             System.out.println("enter javadoc");
>             JavadocLexer j = new JavadocLexer(input);
>             CommonTokenStream tokens = new CommonTokenStream(j);
>             tokens.discardTokenType (JavadocLexer.WS);
>             JavadocParser p = new JavadocParser(tokens);
>             p.comment();
>             // returns a JAVADOC token to the java parser but on a
>             // different channel than the normal token stream so it
>             // doesn't get in the way.
>             $channel = JAVADOC_CHANNEL;
>           }
>         ;
> And in the nested lexer:
> /** When the javadoc parser sees end-of-comment it just says 'I'm done',
> which
>  *  consumes the tokens and forces this javadoc parser (feeding
>  *  off the input stream currently) to exit.  It returns from
>  *  method comment(), which was called from JAVADOC action in the
>  *  Simple parser's lexer.
>  */
> END     : '*/' {token = Token.EOF_TOKEN;}
>           {System.out.println("exit javadoc");}
>         ;
>
> Your code in the outer lexer looks OK, just passing the same input stream
> should keep it synched. Check your code for exiting the inner lexer.
>
> Tom.
> On Jan 22, 2008 8:00 PM, Bertalan Fodor (LilyPondTool) <
> lilypondtool at organum.hu> wrote:
>
> > Thank you for your answer.
> > If I understand your suggestion correctly, the problem with it is that I
> > can't lex the symbol: actually it is an embedded language, so only the
> > nested lexer and parser can find the end of the embedded part. So actually I
> > would need the following: feed the nested lexer/parser with all the input
> > beginning from the '/**' symbol and let it parse it. Then when the parsing
> > is over, I'd like to set the non-nested lexer/parser to the end position of
> > the nested parsing. So the problem is how to set the input stream position
> > to the end of the embedded part, either rewinding or forward winding. Maybe
> > I can use the return value of the nested rootRule() to find the position.
> > However I could not find a way yet how to do this all.
> >
> > Anyway, if you have some example of some nested parsing, that could
> > probably effectively help me.
> >
> > Thanks,
> >
> > Bert
> >
> > Harald M. M?ller wrote:
> >
> > I wouldn't do it like this.
> > If you want to really do this in the (non-nested) lexer: "Lex" the symbol;
> > and then start a NEW StringReader on the symbols's getText(), from which you
> > feed your (nested) lexer and parser.
> > Maybe you want to do this in the (non-nested) parser ... easy if the symbol
> > turns up there; a little work if you pushed the symbol into the HIDDEN
> > channel (or some other channel) in the (non-nested) lexer, so that you have
> > to "undig" it somehow in the (non-nested) parser
> > Hope this very short explanation helps.
> > Regards
> > Harald
> >
> >
> >
> >  -----Original Message-----
> > From: antlr-interest-bounces at antlr.org
> > [mailto:antlr-interest-bounces at antlr.org <antlr-interest-bounces at antlr.org>] On Behalf Of Bertalan Fodor
> > Sent: Tuesday, January 22, 2008 12:45 AM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] ANTLR3 Nested parser
> >
> > Hi,
> >
> > I'm creating a parser with nested parser. To make it simple I
> > tell you my problem as if I was doing Javadoc parsing inside
> > a Java parser.
> > So I have this in my lexer:
> > JAVADOC: '/**' { JavadocParser javadocParser = new
> > JavadocParser(new CommonTokenStream(new
> > JavadocLexer(this.input))); javadocParser.rootRule(); }
> >
> > The problem is that while this code correctly switches to the
> > Javadoc lexer, and parses the Javadoc parts correctly, upon
> > returning from the Javadoc parsing, the character stream is
> > not correctly positioned.
> >
> > Can you help me how to achieve the nested parsing in antlr 3?
> >
> > Thank you very much,
> >
> > Bertalan Fodor
> >
> > ps I've already asked this on this list, but got no answer,
> > so I tried to make my question more simple.
> >
> >
> >
> >
> >
> >  --
> > LilyPondTool is the editor for LilyPond files.
> > See http://lilypondtool.organum.hu
> >
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/3aa663f4/attachment.html 

From qwertie256 at gmail.com  Tue Jan 22 20:06:11 2008
From: qwertie256 at gmail.com (David Piepgrass)
Date: Tue, 22 Jan 2008 21:06:11 -0700
Subject: [antlr-interest] nested parsing (BSDL)
In-Reply-To: <20080103134724.43040@gmx.net>
References: <E1J9hGE-0005mN-G2@localhost.localdomain>
	<Pine.LNX.4.64.0801011551220.8143@localhost.localdomain>
	<20080103134724.43040@gmx.net>
Message-ID: <ce40b1470801222006o31b4fd22m12be55b00b83859c@mail.gmail.com>

> > (but I  would definitely keep the multiple grammars apart).
>
> I really do not want to keep the grammars separate.

It's rather late for me to join the discussion, but here's a thought.
It sounds like you don't want to use two nested grammars because the
outer and inner grammar are so similar.

In that case, maybe you could still nest the grammars, but use the
*same* parser for the outer and inner code. The outer lexer would
tokenize the BSDL strings without parsing them, then the outer parser
would concatenate the strings. Then it would create a 'string stream'
(though I'm not sure what you can use as a string stream in C/C++)
from the concatenated string, and send it to an inner lexer and
parser. The trick is simply that the outer and inner parsers are just
different instances of the same class. The parser and lexer classes
could have a flag in it like

bool isInnerParser;

So that the outer and inner parsers can act slightly differently
depending on this flag. Once the inner parser is done, the outer
parser can append the AST from the inner parser to the outer AST.

Am I making sense?

-- 
- David
http://qism.blogspot.com

From antlr at mirality.co.nz  Tue Jan 22 22:39:03 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 23 Jan 2008 19:39:03 +1300
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <"L018DCD2AC2F34da4A078C397B299D337.1201030213.scalix.tempo
	ral-wave.com*"@MHS>
References: <"2555.10421201026539.scalix.temporal-wave.com*"@MHS>
	<"L018DCD2AC2F34da4A078C397B299D337.1201030213.scalix.temporal-wave.com*"@MHS>
Message-ID: <20080123063925.DBCCA11ECA1@www.antlr.org>

At 08:09 23/01/2008, Jim Idle wrote:
 >
 >But when you define using fragments, then you will quite
 >often make a function call in the lexer, rather than just
 >matching.

True.  Although the ANTLR compiler ought to peephole optimise that 
away.  (It doesn't at the moment though, sadly.  Still, the target 
compiler might.)


From sunshine at public.kherson.ua  Tue Jan 22 22:48:11 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Wed, 23 Jan 2008 08:48:11 +0200
Subject: [antlr-interest] ANTLR feedback -- ANTLRWorks out of memory
In-Reply-To: <2326B93A-32C4-4672-B04A-992BFA66E603@classdump.org>
Message-ID: <C3BCAFCB.8B506%sunshine@public.kherson.ua>

On 22/1/08 5:13 PM, "Kay R?pke" <kroepke at classdump.org> wrote:

>>> The debugger isn't implemented for the C target until the next  release. The
>>> out of memory error is probably that you should start ANTLRWorks with
>>> something like -Xmx750M as it can take a lot of heap space to  keep running
>>> the analysis etc. This is mostly just with ANTLRWorks.
>>> 
>>> Jim
>> 
>> Hi All,
>> 
>> Jim have give hint how to increase RAM for ANTLRWorks, but I assume  this is
>> for start from terminal.
>> 
>> What is way todo this if I want to use on OSX the packaged version of
>> ANTLRworks ?
>> 
>> I do not see such prefs.
>> 
>> Does exists such way?  If no, Jean, may be its good idea add it  somehow into
>> prefs?
> 
> This setting normally is in the Info.plist file in the app bundle. You
> can alter or add arguments for jvm in there. That's why there is no
> user pref for it.

Hi Key

I have check info.plist before write above letter. There is no such
parameter here pointed.

Do you know its exact name or example or docs URL?

For now I will try google :-)


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From sunshine at public.kherson.ua  Tue Jan 22 22:55:31 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Wed, 23 Jan 2008 08:55:31 +0200
Subject: [antlr-interest] ANTLR feedback -- ANTLRWorks out of memory
In-Reply-To: <C3BCAFCB.8B506%sunshine@public.kherson.ua>
Message-ID: <C3BCB183.8B50A%sunshine@public.kherson.ua>

On 23/1/08 8:48 AM, "Ruslan Zasukhin" <sunshine at public.kherson.ua> wrote:

> I have check info.plist before write above letter. There is no such
> parameter here pointed.
> 
> Do you know its exact name or example or docs URL?
> 
> For now I will try google :-)

This is URL 

http://developer.apple.com/documentation/Java/Conceptual/JavaPropVMInfoRef/A
rticles/JavaDictionaryInfo.plistKeys.html#//apple_ref/doc/uid/TP40001969-SW2

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From lilypondtool at organum.hu  Tue Jan 22 23:49:40 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Wed, 23 Jan 2008 08:49:40 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <ebc876d70801221645u674d5b86g1eb7f56fb22ac97b@mail.gmail.com>
References: <4795B0BE.70908@organum.hu>	<ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>	<479670EF.10803@organum.hu>
	<ebc876d70801221645u674d5b86g1eb7f56fb22ac97b@mail.gmail.com>
Message-ID: <4796F194.4020907@organum.hu>


> The trouble with using the nested parser to detect the extents is by 
> the time it runs the nested lexer will have already processed the 
> entire input stream producing errors you would have to ignore.
Yes, now I can see that can be an issue. Originally I was thinking about 
subclassing the character and/or token stream to provide rewinding that 
is better suited for me, but I think I will go with that fragment lexer 
solution. That will at last render into Harald's original suggestion, 
ie. to handle that fragment as a single String.

Thanks,

Bert

From lilypondtool at organum.hu  Wed Jan 23 00:20:11 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Wed, 23 Jan 2008 09:20:11 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <"L2BE68ABE0E554909B908614CF2AB8809.1201048134.scalix.temporal-wave.com*"@MHS>
References: <"L2BE68ABE0E554909B908614CF2AB8809.1201048134.scalix.temporal-wave.com*"@MHS>
Message-ID: <4796F8BB.2050603@organum.hu>


> But, that seems like you will end up lexing a lot of things you should 
> not need to this way, especially if you have a lot of embedded 
> elements. Perhaps if you mention what you are trying to parse, then 
> better solutions can be thought of.  
>
>  
>
> One other thought is whether the first lexer can determine where the 
> embedded language starts and stops in which case you can tokenize the 
> whole text into one token and invoke the embedded language parser from 
> your parser.
>
Thanks for your ideas. I attach the nested language grammar to let you 
see for what I would need to find the end of input.
The outer grammar looks for the '#' symbol, upon seeing that it will 
switch to the nested language like this.

assignment_in_outer = #(inner-language expression (which-is scheme))

The real fun is that the inner-language expression can contain even 
fragments written in the outer language. (If you know the Scheme 
language you can know that it allows redefining the language itself.) 
Now I consider them as multiline comments for simplicity.

Bert
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/b8aabbed/attachment.html 
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: Scheme.g3
Url: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/b8aabbed/attachment.pl 

From sunshine at public.kherson.ua  Wed Jan 23 02:00:55 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Wed, 23 Jan 2008 12:00:55 +0200
Subject: [antlr-interest] [C Target]  Why It is here:  if (BACKTRACKING>0)
Message-ID: <C3BCDCF7.8B54D%sunshine@public.kherson.ua>

Hi All,

I have got first success with generated C source files from our Valentina
SQL grammar.

And I see these lines:

                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return retval;
                    }


I do not understand why this present here at all, if in our grammar
backtracking is OFF always.

Jim ?


-------
Generated C - file is 4 Mb
Wow, ANTLR2 did generate 0.5 MB

But yes I see that a lots of comments present here now.
:-)

Its not a problem, just for info.


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From tbrandonau at gmail.com  Wed Jan 23 02:02:59 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Wed, 23 Jan 2008 21:02:59 +1100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <4796F8BB.2050603@organum.hu>
References: <L2BE68ABE0E554909B908614CF2AB8809.1201048134.scalix.temporal-wave.com*@MHS>
	<4796F8BB.2050603@organum.hu>
Message-ID: <ebc876d70801230202k58b9c115yb925f067c7838904@mail.gmail.com>

Not familiar with Scheme but assuming that all parentheses are nested apart
from known literal contexts it should be OK with something like:
SCHEME_BLOCK
    :    '#' NESTED_SCHEME_BLOCK
    ;

fragment
NESTED_SCHEME_BLOCK
    '('
    (    options {greedy=false; k=1;}
    :    NESTED_SCHEME_BLOCK
    |    STRING_LITERAL
    |    CHAR_LITERAL
    |    .
    )*
    ')'
    ;
Assuming string and char literals are the only literal contexts.
You may not need the k=1 option but a similar thing in the ANTLR grammar
causes the LL(*) analysis to explode, fixed by this.

Tom.
On Jan 23, 2008 7:20 PM, Bertalan Fodor (LilyPondTool) <
lilypondtool at organum.hu> wrote:

>
>  But, that seems like you will end up lexing a lot of things you should
> not need to this way, especially if you have a lot of embedded elements.
> Perhaps if you mention what you are trying to parse, then better solutions
> can be thought of.
>
>
>
> One other thought is whether the first lexer can determine where the
> embedded language starts and stops in which case you can tokenize the whole
> text into one token and invoke the embedded language parser from your
> parser.
>
> Thanks for your ideas. I attach the nested language grammar to let you see
> for what I would need to find the end of input.
> The outer grammar looks for the '#' symbol, upon seeing that it will
> switch to the nested language like this.
>
> assignment_in_outer = #(inner-language expression (which-is scheme))
>
> The real fun is that the inner-language expression can contain even
> fragments written in the outer language. (If you know the Scheme language
> you can know that it allows redefining the language itself.) Now I consider
> them as multiline comments for simplicity.
>
> Bert
>
>
>
> grammar Scheme;
> options {
>        output=AST;
>        language=Java;
>        memoize=true;
> }
>
> tokens {
>        ARROW = '=>';
>        ELSE = 'else';
>
>        UNQUOTE = 'unquote';
>        UNQUOTE_SPLICING = 'unquote-splicing';
>        IF = 'if';
>        SET = 'set!';
>        COND = 'cond';
>        AND = 'and';
>        OR = 'or';
>        CASE = 'case';
>        LET = 'let';
>        LETSTAR = 'let*';
>        LETREC = 'letrec';
>        DO = 'do';
>        DELAY = 'delay';
>        QUASIQUOTE = 'quasiquote';
>
>        LET_SYNTAX = 'let-syntax';
>        LETREC_SYNTAX = 'letrec-syntax';
>        SYNTAX_RULES = 'syntax-rules';
>        QUOTE=  'quote';
>        LAMBDA= 'lambda';
>        BEGIN=  'begin';
>        DEFINE= 'define';
>        DEFINESYNTAX=   'define-syntax'
>        ;
> }
>
>
> @members {
>        private int qqtDepth;
>        private static java.util.logging.Logger log =
> java.util.logging.Logger.getLogger("LilyParser");
>        private Set macroNames = new HashSet();
>        }
> @header {
>        package lilytool.parser.antlr;
>
>        import java.util.HashSet;
>        import java.util.Set;
> }
>
> @lexer::header {
>        package lilytool.parser.antlr;
> }
>
>
> identifier returns [String value]:
>  syntacticKeyword { $value = $syntacticKeyword.value; }
> | variable { $value = $variable.value; };
>
>
> syntacticKeyword returns [ String value ]:
>  expressionKeyword { $value = $expressionKeyword.value; }
> | ELSE^ { $value = $ELSE.text; }
> | ARROW^ { $value = $ARROW.text; }
> | DEFINE^ { $value = $DEFINE.text; }
> | UNQUOTE^ { $value = $UNQUOTE.text; }
> | UNQUOTE_SPLICING^ { $value = $UNQUOTE_SPLICING.text; }
> ;
>
> expressionKeyword returns [ String value ]:
>  QUOTE^ { $value = $QUOTE.text; }
> | LAMBDA^ { $value = $LAMBDA.text; }
> | IF^ { $value = $IF.text; }
> | SET^ { $value = $SET.text; }
> | BEGIN^ { $value = $BEGIN.text; }
> | COND^ { $value = $COND.text; }
> | AND^ { $value = $AND.text; }
> | OR^ { $value = $OR.text; }
> | CASE^ { $value = $CASE.text; }
> | LET^ { $value = $LET.text; }
> | LETSTAR^ { $value = $LETSTAR.text; }
> | LETREC^ { $value = $LETREC.text; }
> | DO^ { $value = $DO.text; }
> | DELAY^ { $value = $DELAY.text; }
> | QUASIQUOTE^ { $value = $QUASIQUOTE.text; }
> ;
>
> variable returns [ String value ] :
>  VARIABLE^ { $value = $VARIABLE.text; }
> | '...' { $value = "..."; }
> ;
>
>
> /*
>  * External representations
>  */
>
> datum :
>  simpleDatum
> | compoundDatum
> ;
>
> simpleDatum :
>  BOOLEAN
> | NUMBER
> | CHARACTER
> | STRING
> | symbol
> ;
>
> symbol :
>  identifier
> ;
>
> compoundDatum :
>  list
> | vector
> ;
>
> list :
>  E_OPEN ( ( datum )+ ( DOT^ datum )? )? E_CLOSE
> | abbreviation
> ;
>
> abbreviation :
>  abbrevPrefix datum
> ;
>
> abbrevPrefix :
>  APOS^
> | BAPOS^ // "`"
> | COMMA^ // ","
> | COMMAAT^ //",@"
> ;
>
> vector :
>  HASHOPEN^ ( datum )* E_CLOSE
> ;
>
> /*
>  * expressions
>  */
>
> expression :
>  variable
> | literal
> |  lambdaExpression
> |  conditional
> |  assignment
> |  derivedExpression
> | procedureCall
> |  macroUse
> | macroBlock
> ;
>
> literal :
>  quotation
> | selfEvaluating
> ;
>
> selfEvaluating :
>  BOOLEAN
> | NUMBER
> | CHARACTER
> | s=STRING
> ;
>
> quotation :
>  APOS^ datum
> | E_OPEN QUOTE datum E_CLOSE
> ;
>
> procedureCall :
>  E_OPEN operator ( operand )* E_CLOSE
> ;
>
> operator :
>  expression
> ;
>
> operand :
>  expression
> ;
>
> lambdaExpression :
>  E_OPEN LAMBDA formals body E_CLOSE
> ;
>
> formals :
>  E_OPEN ( ( variable )+ ( DOT variable )? )? E_CLOSE
> | variable
> ;
>
> body :
> ((definition) => definition)* sequence
> ;
>
> sequence :  command* expression;
>
> conditional :
>  E_OPEN IF test consequent alternate E_CLOSE
> ;
>
> test :
>  expression
> ;
>
> consequent :
>  expression
> ;
>
> alternate :
> ( expression )?
> ;
>
> assignment :
>  E_OPEN SET variable expression E_CLOSE
> ;
>
> derivedExpression :
> (quasiquotation)=>quasiquotation |
> E_OPEN ( COND ( condClause+ (E_OPEN ELSE sequence E_CLOSE)? | E_OPEN ELSE
> sequence E_CLOSE)
>      | CASE expression ( caseClause+ (E_OPEN ELSE sequence E_CLOSE)? |
> E_OPEN ELSE sequence E_CLOSE)
>      | AND ( test )*
>      | OR ( test )*
>      | LET ( variable )? E_OPEN ( bindingSpec )* E_CLOSE body
>      | LETSTAR E_OPEN ( bindingSpec )* E_CLOSE body
>      | LETREC E_OPEN ( bindingSpec )* E_CLOSE body
>      | BEGIN sequence
>      | DO E_OPEN ( iterationSpec )* E_CLOSE E_OPEN test doResult E_CLOSE
>        ( command )*
>      | DELAY expression ) E_CLOSE
> ;
>
> command : expression    ;
>
> condClause :
>  E_OPEN test ( sequence | ARROW recipient )? E_CLOSE;
>
> recipient :
>  expression;
>
> caseClause :
>  E_OPEN E_OPEN ( datum )* E_CLOSE sequence E_CLOSE;
>
> bindingSpec :
> E_OPEN variable expression E_CLOSE;
>
> iterationSpec :
>  E_OPEN variable init ( step )? E_CLOSE
> ;
>
> init :
>  expression
> ;
>
> step :
>  expression
> ;
>
> doResult :
>  ( sequence )?
> ;
>
> macroUse :
>  { macroNames.contains(((TokenStream)input).LT(2).getText())}? E_OPEN
> keyword ( datum )* E_CLOSE
> ;
>
> keyword returns [ String value ]: identifier { $value = $identifier.value;
> };
>
> macroBlock :
>  E_OPEN ( LET_SYNTAX | LETREC_SYNTAX ) E_OPEN ( syntaxSpec )* E_CLOSE body
> E_CLOSE { macroNames.add($syntaxSpec.name); }
> ;
>
> syntaxSpec returns [String name] :
>  E_OPEN keyword { $name = $keyword.value; } transformerSpec E_CLOSE
> ;
>
> quasiquotation
> options { backtrack = true;}
> scope {
>        int d;
>        }
> @init {
>        $quasiquotation::d=1;
> }
> :
>  quasiquotationD;
>
> qQTemplate
> options { backtrack = true;}
> @init { qqtDepth = $quasiquotation::d; } :
>  { qqtDepth == 0 }?=>expression
> | simpleDatum
> | vectorQQTemplate
> | listQQTemplate
> | unquotation
> ;
>
> quasiquotationD
> :
>  BAPOS^ qQTemplate
> | E_OPEN QUASIQUOTE qQTemplate E_CLOSE
> ;
>
> listQQTemplate
> options { backtrack = true;}
> :
>  APOS^ qQTemplate
> |  { $quasiquotation::d+=1; } quasiquotationD
> |        E_OPEN ( ( qQTemplateOrSplice )+ ( DOT^ qQTemplate )? )? E_CLOSE
> ;
>
> vectorQQTemplate:
>  HASHOPEN ( qQTemplateOrSplice )* E_CLOSE
> ;
>
> unquotation:
>  COMMA^ { $quasiquotation::d-=1; } qQTemplate
> | E_OPEN UNQUOTE { $quasiquotation::d-=1; } qQTemplate E_CLOSE
> ;
>
> qQTemplateOrSplice
> options { backtrack = true;}
> :
>   qQTemplate
> | splicingUnquotation
> ;
>
> splicingUnquotation :
>  COMMAAT^ { $quasiquotation::d-=1; } qQTemplate
> | E_OPEN UNQUOTE_SPLICING { $quasiquotation::d-=1; } qQTemplate E_CLOSE
> ;
>
> /*
>  * Transformers
>  */
>
> transformerSpec :
>  E_OPEN SYNTAX_RULES E_OPEN ( identifier )* E_CLOSE ( syntaxRule )*
> E_CLOSE
> ;
>
> syntaxRule :
>  E_OPEN pattern template E_CLOSE
> ;
>
> pattern :
>  patternIdentifier
> | E_OPEN ( ( pattern )+ ( DOT pattern | ellipsis )? )?  E_CLOSE
> | HASHOPEN ( ( pattern )+ ( ellipsis )? )? E_CLOSE
> | patternDatum
> ;
>
> patternDatum :
>  STRING
> | CHARACTER
> | BOOLEAN
> | NUMBER
> ;
>
> template :
>  patternIdentifier
> | E_OPEN ( ( templateElement )+ ( DOT templateElement )? )? E_CLOSE
> | HASHOPEN ( templateElement )* E_CLOSE
> | templateDatum
> ;
>
> templateElement :
>  template ( ellipsis )?
> ;
>
> templateDatum :
>  patternDatum
> ;
>
> patternIdentifier : /* any identifier except "..." */
>  syntacticKeyword
> | VARIABLE
> ;
>
> ellipsis :
>  '...'
> ;
>
>
> scm returns [ String text] @init { $text = ""; } :  commandOrDefinition {
>        // for our purpose we allow only one and only command in an
> SCM_TOKEN block
>        //   TokenSelector.selector.pop();
>
> };
>
> commandOrDefinition :
>        syntaxDefinition
>        | (definition)=>definition
>        | command
> ;
>
> definition :
> E_OPEN (
>        DEFINE ( variable expression | E_OPEN variable defFormals E_CLOSE
> body )
>        |       BEGIN definition*) E_CLOSE
> ;
>
> defFormals :
> (variable)* ( DOT variable)?;
>
> syntaxDefinition :
>  E_OPEN DEFINESYNTAX keyword transformerSpec E_CLOSE;
>
>  /* LEXER
>  */
>
> VARIABLE:       INITIAL (SUBSEQUENT)* | PECULIAR_IDENTIFIER;
>
> fragment INITIAL : LETTER | SPECIAL_INITIAL;
> fragment LETTER : ('a'..'z'| 'A'..'Z' | '\u0080'..'\ufffe') ;
> fragment SPECIAL_INITIAL
> :('!'|'$'|'%'|'&'|'*'|'/'|':'|'<'|'='|'>'|'?'|'^'|'_'|'~'|'{'|'}'|'#:');
> fragment SUBSEQUENT : INITIAL | DIGIT | SPECIAL_SUBSEQUENT;
> fragment DIGIT : ('0'..'9');
> fragment SPECIAL_SUBSEQUENT :  '.' | '+'|'-' | '@' ;
> fragment PECULIAR_IDENTIFIER : '+' | '-';
>
> APOS: '\'';
> BAPOS: '`';
> COMMA: ',';
> COMMAAT: ',@';
> DOT : '.';
>
> BOOLEAN : '#t' | '#f' ;
>
> HASHOPEN: '#(';
>
> CHARACTER : '#\\' (CHARACTER_NAME | ~(' '|'\n')) ;
> fragment CHARACTER_NAME : 'space' | 'newline';
>
> STRING : '"' STRING_ELEMENT* '"';
> fragment STRING_ELEMENT : ~('"' | '\\') | '\\' ('"' | '\\' );
>
> NUMBER :
>        NUM_2 |
>        NUM_8 |
>        NUM_10 |
>        NUM_16
> ;
> fragment NUM_2 : PREFIX_2 COMPLEX_2;
> fragment NUM_8 : PREFIX_8 COMPLEX_8;
> fragment NUM_10 : PREFIX_10? COMPLEX_10;
> fragment NUM_16 : PREFIX_16 COMPLEX_16;
> fragment COMPLEX_2 :
>        REAL_2 ('@' REAL_2)? |
>        REAL_2? SIGN ( UREAL_2 )? 'i'
>        ;
> fragment COMPLEX_8 :
>        REAL_8 ( '@' REAL_8)? |
>        REAL_8? SIGN UREAL_8? 'i'
>        ;
> fragment COMPLEX_10 :
>        REAL_10 ('@' REAL_10)? |
>        REAL_10? SIGN UREAL_10? 'i'
> ;
> fragment COMPLEX_16 :
>        REAL_16 ('@' REAL_16)? |
>        REAL_16? SIGN UREAL_16? 'i'
>        ;
> fragment REAL_2 : (SIGN)? UREAL_2;
> fragment REAL_8 : (SIGN)? UREAL_8;
> fragment REAL_10 : (SIGN)? UREAL_10;
> fragment REAL_16 : (SIGN)? UREAL_16;
> fragment UREAL_2 : UINTEGER_2 ( '/' UINTEGER_2 )?;
> fragment UREAL_8 : UINTEGER_8 ( '/' UINTEGER_8 )?;
> fragment UREAL_10 : (UINTEGER_10 '/')=> UINTEGER_10 '/' UINTEGER_10 |
> DECIMAL_10;
> fragment UREAL_16 : UINTEGER_16 ( '/' UINTEGER_16 )?;
> fragment DECIMAL_10 :
>        ( UINTEGER_10
>        | '.' DIGIT_10+ '#'*
>        | DIGIT_10+ '.' DIGIT_10* '#'*
>        | DIGIT_10+ '#'+ '.' '#'*
>        ) SUFFIX
>        ;
> fragment UINTEGER_2 : ( DIGIT_2 )+ ( '#' )*;
> fragment UINTEGER_8 : ( DIGIT_8 )+ ( '#' )*;
> fragment UINTEGER_10 : ( DIGIT_10 )+ ( '#' )*;
> fragment UINTEGER_16 : ( DIGIT_16 )+ ( '#' )*;
> fragment PREFIX_2 : EXACTNESS RADIX_2 | RADIX_2 EXACTNESS | RADIX_2;
> fragment PREFIX_8 : RADIX_8 EXACTNESS | EXACTNESS RADIX_8 | RADIX_8;
> fragment PREFIX_10 : RADIX_10 EXACTNESS | EXACTNESS RADIX_10 | EXACTNESS |
> RADIX_10;
> fragment PREFIX_16 : RADIX_16 EXACTNESS | EXACTNESS RADIX_16 | RADIX_16;
> fragment SUFFIX : (EXPONENT_MARKER SIGN? DIGIT+)?;
> fragment EXPONENT_MARKER : ('e'|'s'|'f'|'d'|'l');
> fragment SIGN : ('+'|'-');
> fragment EXACTNESS : ( '#i' | '#e');
> fragment RADIX_2 : '#b';
> fragment RADIX_8 : '#o';
> fragment RADIX_10 : '#d';
> fragment RADIX_16 : '#x';
> fragment DIGIT_2 : '0'|'1';
> fragment DIGIT_8 : '0'..'7';
> fragment DIGIT_10 : '0'..'9';
> fragment DIGIT_16 : DIGIT_10 | 'a'..'f';
>
> COMMENT :
>                ';' .* '\n' {$channel=HIDDEN;}
>                ;
>
> WS :    (' ' | '\t' | '\n' | '\r') { $channel=HIDDEN; }
>        ;
>
>
> E_OPEN : '(';
> E_CLOSE: ')';
>
> /* Lilypond expressions are regarded as ML comments now.
> However, we could switch to another lexer analogueous to SCM_T in
> lily-antlr.g
> */
> LILYEXP
>        : '#{' (options {greedy=false;} : .)*   '#}'  {channel=HIDDEN;}
>        ;
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/478180e0/attachment-0001.html 

From r.mark.volkmann at gmail.com  Wed Jan 23 05:43:32 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 23 Jan 2008 07:43:32 -0600
Subject: [antlr-interest] projects using ANTLR
Message-ID: <f0fcc6820801230543x73913bfbv516e9b07cf6531a4@mail.gmail.com>

Is there a web page somewhere that lists some projects that are using
ANTLR? I think JRuby and Groovy use ANTLR. I'd like to hear about
other somewhat well-known projects that are using it.

-- 
R. Mark Volkmann
Object Computing, Inc.

From dave at badgers-in-foil.co.uk  Wed Jan 23 06:00:45 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 23 Jan 2008 14:00:45 +0000
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <4796F194.4020907@organum.hu>
References: <4795B0BE.70908@organum.hu>
	<ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>
	<479670EF.10803@organum.hu>
	<ebc876d70801221645u674d5b86g1eb7f56fb22ac97b@mail.gmail.com>
	<4796F194.4020907@organum.hu>
Message-ID: <20080123140044.GA22125@badgers-in-foil.co.uk>

On Wed, Jan 23, 2008 at 08:49:40AM +0100, Bertalan Fodor (LilyPondTool) wrote:
> 
> >The trouble with using the nested parser to detect the extents is by 
> >the time it runs the nested lexer will have already processed the 
> >entire input stream producing errors you would have to ignore.
> Yes, now I can see that can be an issue. Originally I was thinking about 
> subclassing the character and/or token stream to provide rewinding that 
> is better suited for me, but I think I will go with that fragment lexer 
> solution. That will at last render into Harald's original suggestion, 
> ie. to handle that fragment as a single String.

Does the following method apply..?

  http://www.antlr.org/wiki/display/ANTLR3/Island+Grammars+Under+Parser+Control

I had similar situation with embedded 'E4X' XML-literal expressions.
These can recursively embed expressions from the outer language too, but
I didn't implement that yet.

I initially attempted to make this work by defining complicated
fragment lexer rules in the 'outer' language in order to snarf the
entire embedded language sequence.  Unfortunately that didn't work for
this grammar due to the 'start marker' being ambiguous with other
tokens.  In this language, it's difficult for the lexer to know whether
input that starts with,

   <foo

is part of a comparison, i.e.,

   bar<foo

or part of an XML literal, i.e.,

   <foo attr="33"/>

OTOH, it's trivial for the parser to know what's ahead depending on the
context it sees '<' in.

If the '#(' is lexically unambiguous in your target syntax, your life
will be easier that mine of course!  :)


ta,
dave

-- 
http://david.holroyd.me.uk/

From lilypondtool at organum.hu  Wed Jan 23 06:16:38 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Wed, 23 Jan 2008 15:16:38 +0100
Subject: [antlr-interest] ANTLR3 Nested parser
In-Reply-To: <20080123140044.GA22125@badgers-in-foil.co.uk>
References: <4795B0BE.70908@organum.hu>	<ebc876d70801220127j47e37b22j3802109a2c03f4fc@mail.gmail.com>	<479670EF.10803@organum.hu>	<ebc876d70801221645u674d5b86g1eb7f56fb22ac97b@mail.gmail.com>	<4796F194.4020907@organum.hu>
	<20080123140044.GA22125@badgers-in-foil.co.uk>
Message-ID: <47974C46.40109@organum.hu>

Yes, this definitely applies, thank your for noting it. I have luck, 
because the 'start marker' is not used for anything else in the outer 
language, so I can go with the fragment lexer rules. They don't seem 
very difficult.

Bert
> I initially attempted to make this work by defining complicated
> fragment lexer rules in the 'outer' language in order to snarf the
> entire embedded language sequence.  Unfortunately that didn't work for
> this grammar due to the 'start marker' being ambiguous with other
> tokens.  In this language, it's difficult for the lexer to know whether
> input that starts with,
>
>    <foo
>
> is part of a comparison, i.e.,
>
>    bar<foo
>
> or part of an XML literal, i.e.,
>
>    <foo attr="33"/>
>
> OTOH, it's trivial for the parser to know what's ahead depending on the
> context it sees '<' in.
>
> If the '#(' is lexically unambiguous in your target syntax, your life
> will be easier that mine of course!  :)
>
>
> ta,
> dave
>
>   


-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu


From devteam at jubii.fr  Wed Jan 23 15:30:09 2008
From: devteam at jubii.fr (Dev Team)
Date: Wed Jan 23 15:30:09 CET 2008
Subject: [antlr-interest] Problem with '.' character
Message-ID: <120109860911464@jubii.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/1a11fb15/attachment.html 

From adam.rpconnelly at googlemail.com  Wed Jan 23 07:16:13 2008
From: adam.rpconnelly at googlemail.com (Adam Connelly)
Date: Wed, 23 Jan 2008 15:16:13 +0000
Subject: [antlr-interest] CS652: programming languages course starts
	tomorrow
In-Reply-To: <65563A9B-D467-4295-B322-6268B6CC184A@cs.usfca.edu>
References: <65563A9B-D467-4295-B322-6268B6CC184A@cs.usfca.edu>
Message-ID: <b9a39b060801230716w108adf05if847659fe9816810@mail.gmail.com>

That looks really interesting.  If I wasn't sick of uni after 5 years I'd
consider taking your course, although you don't seem to like "tardiness"
which probably wouldn't work in my favour :P.  I might try doing some of the
labs if I get a chance.

Adam

On 22/01/2008, Terence Parr <parrt at cs.usfca.edu> wrote:
>
> howdy...if you want to follow along as I build notes, labs, and
> projects:
>
> http://www.antlr.org/wiki/display/CS652/CS652+Home
>
> Ter
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/43142b1a/attachment.html 

From troy.daniels at baesystems.com  Wed Jan 23 07:55:49 2008
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Wed, 23 Jan 2008 10:55:49 -0500
Subject: [antlr-interest] Problem with '.' character
References: <120109860911464@jubii.com>
Message-ID: <40CBD611A793EA438464B91E749DD8B00386346A@blums0017.alphatech.com>

Why is var2.var3 not a field expression?  Is it because they are on
different lines?  If so, you need to exclude newlines from your ignored
whitespace, and write the line-based rules as something like:
 
assignment: expr EQ expr NL;
 
rather than what I assume your current rule is:
 
assignment: expr EQ expr;
 
where NL matches whatever is allowed for newlines. 
 
Troy
 


  _____  

	From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Dev Team
	Sent: Wednesday, January 23, 2008 10:30 AM
	To: antlr-interest at antlr.org
	Subject: [antlr-interest] Problem with '.' character
	
	
	Hi there,
	I am currently trying to write a grammar with antlr.
	But the '.' character is used for both table/field separator and
statement ending.
	here is an example :
	
	method public void myMethod() :
	//...
	var1 = var2.
	var3 = myTable.myField.
	//...
	end method.
	
	So, the problem is that the grammar considers 'var2.var3' as a
table/field expression.
	Does someone know how to resolve this problem ?
	thanks in advance
	

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/1494b7a1/attachment.html 

From lilypondtool at organum.hu  Wed Jan 23 08:03:02 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Wed, 23 Jan 2008 17:03:02 +0100
Subject: [antlr-interest] Problem with '.' character
In-Reply-To: <40CBD611A793EA438464B91E749DD8B00386346A@blums0017.alphatech.com>
References: <120109860911464@jubii.com>
	<40CBD611A793EA438464B91E749DD8B00386346A@blums0017.alphatech.com>
Message-ID: <47976536.7000607@organum.hu>

Isn't it possible to write this:

var1=var2.var3=myTable.myField

With ANTLR 3, in this case I think LL(*) with backtracking should find 
its way, because the '=' sign will guide it.

Bert



Daniels, Troy (US SSA) wrote:
> Why is var2.var3 not a field expression?  Is it because they are on 
> different lines?  If so, you need to exclude newlines from your 
> ignored whitespace, and write the line-based rules as something like:
>  
> assignment: expr EQ expr NL;
>  
> rather than what I assume your current rule is:
>  
> assignment: expr EQ expr;
>  
> where NL matches whatever is allowed for newlines.
>  
> Troy
>  
>
>     ------------------------------------------------------------------------
>     *From:* antlr-interest-bounces at antlr.org
>     [mailto:antlr-interest-bounces at antlr.org] *On Behalf Of *Dev Team
>     *Sent:* Wednesday, January 23, 2008 10:30 AM
>     *To:* antlr-interest at antlr.org
>     *Subject:* [antlr-interest] Problem with '.' character
>
>     Hi there,
>     I am currently trying to write a grammar with antlr.
>     But the '.' character is used for both table/field separator and
>     statement ending.
>     here is an example :
>
>     |method public void myMethod() :
>     //...
>     var1 = var2.
>     var3 = myTable.myField.
>     //...
>     end method.
>     |
>     So, the problem is that the grammar considers 'var2.var3' as a
>     table/field expression.
>     Does someone know how to resolve this problem ?
>     thanks in advance
>


-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/2d6a25b7/attachment.html 

From jimi at temporal-wave.com  Wed Jan 23 07:53:14 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 23 Jan 2008 07:53:14 -0800
Subject: [antlr-interest] REAL or int or Range
In-Reply-To: <"2555.10471201069113.scalix.temporal-wave.com*"@MHS>
Message-ID: <"L5545CFD20D76431bBEC3403841EC46C9.1201104839.scalix.temporal-wave.com*"@MHS>

> -----Original Message-----
> From: Gavin Lambert [mailto:antlr at mirality.co.nz]
> 
> At 08:09 23/01/2008, Jim Idle wrote:
>  >
>  >But when you define using fragments, then you will quite
>  >often make a function call in the lexer, rather than just
>  >matching.
> 
> True.  Although the ANTLR compiler ought to peephole optimise that
> away.  (It doesn't at the moment though, sadly.  Still, the target
> compiler might.)
> 

There are quite a few codegen optimizations that could be (and I am sure 
will be in the end) achieved. Of course, the first thing you want is a 
accurate code generation and bugs removed from the analysis engine. Then 
effort can be put into the generated code.

In general, I think that the better C compilers would see the fragment 
functions as excellent targets for inlining, but some compilers are 
better than others of course ;-)

Jim


From jimi at temporal-wave.com  Wed Jan 23 07:58:26 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 23 Jan 2008 07:58:26 -0800
Subject: [antlr-interest] projects using ANTLR
In-Reply-To: <f0fcc6820801230543x73913bfbv516e9b07cf6531a4@mail.gmail.com>
Message-ID: <"LB497DD89A3BB427cA4A39009F5E5176B.1201105155.scalix.temporal-wave.com*"@MHS>

You mean other than the testimonial page, which is pretty much the most 
direct link from the front page? http://www.antlr.org/testimonial/list 
:-)

Of course, people using ANTLR for 'famous' projects can't really be 
coerced to write things there, but it isn't a bad list.


Jim

> -----Original Message-----
> From: Mark Volkmann [mailto:r.mark.volkmann at gmail.com]
> Sent: Wednesday, January 23, 2008 5:44 AM
> To: antlr-interest Interest
> Subject: [antlr-interest] projects using ANTLR
> 
> Is there a web page somewhere that lists some projects that are using
> ANTLR? I think JRuby and Groovy use ANTLR. I'd like to hear about
> other somewhat well-known projects that are using it.
> 
> --
> R. Mark Volkmann
> Object Computing, Inc.



From tbrandonau at gmail.com  Wed Jan 23 08:22:11 2008
From: tbrandonau at gmail.com (Thomas Brandon)
Date: Thu, 24 Jan 2008 03:22:11 +1100
Subject: [antlr-interest] Problem with '.' character
In-Reply-To: <120109860911464@jubii.com>
References: <120109860911464@jubii.com>
Message-ID: <ebc876d70801230822p1449b2fcw3d859c36a59f7e8b@mail.gmail.com>

It looks like your language may be ambiguous. Given:
a=b.c=d.e
how can you tell if this is 2 statements:
(ASSIGN (VAR a) (VAR b))
(ASSIGN (VAR c) (FIELD d e))
or 1 statement:
(ASSIGN (VAR a) (ASSIGN (FIELD b c) (FIELD d e)))
With just this information I can't see a way so I can't see any way to write
a grammar to do so.
Are variables declared? If it's pre-compiled, are tables\fields known at
compile time? If one of these is true you may be able to use a symbol table
to resolve this. But you still may end up with a very messy grammar,
especially if variable declarations need not precede use in the file.
If possible you really need to reconsider your language design.

Tom.
On Jan 24, 2008 1:30 AM, Dev Team <devteam at jubii.fr> wrote:

>  Hi there,
> I am currently trying to write a grammar with antlr.
> But the '.' character is used for both table/field separator and statement
> ending.
> here is an example :
>
>  method public void myMethod() :
> //...
> var1 = var2.
> var3 = myTable.myField.
> //...
> end method.
>
> So, the problem is that the grammar considers 'var2.var3' as a table/field
> expression.
> Does someone know how to resolve this problem ?
> thanks in advance
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/b96b1ccc/attachment.html 

From jimi at temporal-wave.com  Wed Jan 23 08:20:35 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 23 Jan 2008 08:20:35 -0800
Subject: [antlr-interest] Problem with '.' character
In-Reply-To: <120109860911464@jubii.com>
Message-ID: <"LC215C3667DF6470289E5BCB8162E5830.1201106487.scalix.temporal-wave.com*"@MHS>

The language is inherently ambiguous (who picks ?.? for end of
statement?). The real end of statement token depends on whether the
statement end ?.? Always precedes a linefeed, or can separate statements
without line feeds: I.E

 

statement . statement . statement

 

So, you need to pick up the context of the ?.?. You can either do this
in the lexer or the parser (with a gated predicate).

 

Assuming that a ?.? Followed by whitespace or linefeed means the end of
statement, otherwise it is a ?.?, then you can do this lexically:

 

statements

 : statement (EOS statement)*

;

 

// Place holder so we have a token type

//

fragment EOS : ?.? (WS|NL);

 

// can also use input.LA(-1) if preceeding spaces turned out to be
important too.

// use just LA() for C target.

//

DOT  : ?.? { if (input.LA(1) == ? ? | input.LA(1) == ?\n? | input.LA(1)
== ?\t?) { $type = EOS; } ;

 

 

With a gated predicate in the parser you could construct your table
expression such that if there is no whitespace preceding the DOT then it
is a compound, but in this case the lexing solution is probably best:

 

statements : statement (DOT statement)* ;

tableRef: ID

                                (

                                                {(
(CommonTokenStream)input ).get( input.index()-1 ).getType() != WS }?=>

 

                                                DOT ID

                                                

                                )*

                ;

 

Jim

 

From: Dev Team [mailto:devteam at jubii.fr] 
Sent: Wednesday, January 23, 2008 3:30 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Problem with '.' character

 

body{font:12px
Arial;margin:3px;overflow-y:auto;overflow-x:auto}p{margin:0px;}blockquot
e, ol, ul{margin-top:0px;margin-bottom:0px;} 

Hi there,
I am currently trying to write a grammar with antlr.
But the '.' character is used for both table/field separator and
statement ending.
here is an example :

method public void myMethod() :
//...
var1 = var2.
var3 = myTable.myField.
//...
end method.

So, the problem is that the grammar considers 'var2.var3' as a
table/field expression.
Does someone know how to resolve this problem ?
thanks in advance


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/51acf615/attachment.html 

From jimi at temporal-wave.com  Wed Jan 23 08:23:51 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 23 Jan 2008 08:23:51 -0800
Subject: [antlr-interest] Problem with '.' character
In-Reply-To: <47976536.7000607@organum.hu>
Message-ID: <"LE3073637EFA748beA95B443E69256C08.1201106681.scalix.temporal-wave.com*"@MHS>

However, don?t use any kind of backtracking solution unless the parser
is quick and dirty.

 

Jim

 

From: Bertalan Fodor (LilyPondTool) [mailto:lilypondtool at organum.hu] 
Sent: Wednesday, January 23, 2008 8:03 AM
To: Daniels, Troy \(US SSA\)
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Problem with '.' character

 

Isn't it possible to write this:

var1=var2.var3=myTable.myField

With ANTLR 3, in this case I think LL(*) with backtracking should find
its way, because the '=' sign will guide it. 

Bert



Daniels, Troy (US SSA) wrote: 

Why is var2.var3 not a field expression?  Is it because they are on
different lines?  If so, you need to exclude newlines from your ignored
whitespace, and write the line-based rules as something like:

 

assignment: expr EQ expr NL;

 

rather than what I assume your current rule is:

 

assignment: expr EQ expr;

 

where NL matches whatever is allowed for newlines. 

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/f2af2fdc/attachment-0001.html 

From jimi at temporal-wave.com  Wed Jan 23 08:37:59 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 23 Jan 2008 08:37:59 -0800
Subject: [antlr-interest] [C Target] Why It is here: if (BACKTRACKING>0)
In-Reply-To: <C3BCDCF7.8B54D%sunshine@public.kherson.ua>
Message-ID: <"LFB1154011E0B47bf906577E9E44C1264.1201107530.scalix.temporal-wave.com*"@MHS>

The code generating string template does not care whether there is any 
backtracking involved and so any actions or generated code that should 
not be executed if the rule is in backtracking mode are gated in this 
way. It resolves to an int and the C compiler will generate code that 
checks such an expression extremely efficiently such that coupled with 
pipelining and so on, I doubt that you could measure the difference in 
performance without it. I suppose that the template could check this 
kind of circumstance and gate the check in the stringtemplate, but it is 
hardly worth it.

If you were absolutely sure that the code never does any backtracking, 
then you could change the definition of the macro such that the C 
compiler would always optimize it away. But then you are playing with 
the fundamentals for pretty much zero gain. In general, dont worry 
about the micro optimizations.

I have not tried this, but in theory it would be fine, so long as there 
are no circumstances in which backtracking would be on:

@parser::postinclude
{
#undef BACKTRACKING
#define BACKTRACKING 0
}

But, as I said, this is unlikely to give you any measurable performance 
gain.

What you should look at is whether you are getting a 4M file because 
there is just a lot of rules, or because you have created a parser that 
needs huge DFA tables and so on to deal with the way it is put together. 
Eliminating predicates that invoke rules is always a performance 
improvement, but you seem to be saying you have no backtracking and no 
predicates, so perhaps the grammar is fine. My TSQL 20065 grammar 
generates about the same amount of code with pretty much no predicates 
and definitely not backtracking, which is really a prototyping tool 
(though with memoizing turned on it can be reasonable if performance is 
not your top priority).

Hope that helps.

Jim

> -----Original Message-----
> From: Ruslan Zasukhin [mailto:sunshine at public.kherson.ua]
> Sent: Wednesday, January 23, 2008 2:01 AM
> To: antlr-interest at antlr.org; Jim Idle
> Subject: [C Target] Why It is here: if (BACKTRACKING>0)
> 
> Hi All,
> 
> I have got first success with generated C source files from our
> Valentina
> SQL grammar.
> 
> And I see these lines:
> 
>                     if (BACKTRACKING>0)
>                     {
>                         FAILEDFLAG = ANTLR3_TRUE;
>                         return retval;
>                     }
> 
> 
> I do not understand why this present here at all, if in our grammar
> backtracking is OFF always.
> 
> Jim ?
> 
> 
> -------
> Generated C - file is 4 Mb
> Wow, ANTLR2 did generate 0.5 MB
> 
> But yes I see that a lots of comments present here now.
> :-)
> 
> Its not a problem, just for info.
> 
> 
> --
> Best regards,
> 
> Ruslan Zasukhin
> VP Engineering and New Technology
> Paradigma Software, Inc
> 
> Valentina - Joining Worlds of Information
> http://www.paradigmasoft.com
> 
> [I feel the need: the need for speed]
> 
> 



From jimi at temporal-wave.com  Wed Jan 23 09:04:09 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 23 Jan 2008 09:04:09 -0800
Subject: [antlr-interest] [C Target] Why It is here: if (BACKTRACKING>0)
In-Reply-To: <"LFB1154011E0B47bf906577E9E44C1264.1201107530.scalix.temporal-wave.com*"@MHS>
Message-ID: <"LCE25D323502C436b87CBB7D384DC8ABB.1201109088.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Jim Idle


> predicates, so perhaps the grammar is fine. My TSQL 20065 grammar
> generates about the same amount of code with pretty much no predicates

Though I pride myself (perhaps too much ;-), on anticipating future 
requirements in programs, a prediction of this magnitude would require 
runes and entrails. I meant T-SQL 2005 or course :-)

Jim
 



From parrt at cs.usfca.edu  Wed Jan 23 10:05:10 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 23 Jan 2008 10:05:10 -0800
Subject: [antlr-interest] CS652: programming languages course starts
	tomorrow
In-Reply-To: <b9a39b060801230716w108adf05if847659fe9816810@mail.gmail.com>
References: <65563A9B-D467-4295-B322-6268B6CC184A@cs.usfca.edu>
	<b9a39b060801230716w108adf05if847659fe9816810@mail.gmail.com>
Message-ID: <6574AF8D-E20B-4B87-BA54-0ABFD67412F0@cs.usfca.edu>


On Jan 23, 2008, at 7:16 AM, Adam Connelly wrote:

> That looks really interesting.  If I wasn't sick of uni after 5  
> years I'd consider taking your course, although you don't seem to  
> like "tardiness" which probably wouldn't work in my favour :P.

It will be so interesting that you will be dying to show up on time. ;)

>   I might try doing some of the labs if I get a chance.

cool :)

Ter

From vbar at comp.cz  Wed Jan 23 10:22:21 2008
From: vbar at comp.cz (Vaclav Barta)
Date: Wed, 23 Jan 2008 19:22:21 +0100
Subject: [antlr-interest] [C Target] Why It is here: if (BACKTRACKING>0)
In-Reply-To: <"LFB1154011E0B47bf906577E9E44C1264.1201107530.scalix.temporal-wave.com*"@MHS>
References: <"LFB1154011E0B47bf906577E9E44C1264.1201107530.scalix.temporal-wave.com*"@MHS>
Message-ID: <200801231922.22798.vbar@comp.cz>

On Wednesday 23 January 2008 17:37:59 Jim Idle wrote:
> Eliminating predicates that invoke rules is always a performance
> improvement, but you seem to be saying you have no backtracking and no
> predicates, so perhaps the grammar is fine. My TSQL 20065 grammar
> generates about the same amount of code with pretty much no predicates
Chmm, is it available? I've adapted my SQL grammar from 
http://www.antlr.org/grammar/1062280680642/MS_SQL_SELECT.html , and while I 
don't see any performance problems with it, it definitely has predicates, so 
I'd like to see an alternative...

	Bye
		Vasek
--
http://www.mangrove.cz/
Open Source integration

From corellian.c at gmail.com  Wed Jan 23 10:28:55 2008
From: corellian.c at gmail.com (Cristian Peraferrer)
Date: Wed, 23 Jan 2008 19:28:55 +0100
Subject: [antlr-interest]  Unix-like parameters grammar
Message-ID: <94C6083E-25B5-4A9F-9673-F89BD968C520@gmail.com>

Hi,

I am trying to build a grammar to parse unix-like parameters, but I'm  
having problems with the FileName token.
Any help or suggestion will be appreciated.

Thanks in advance.
Cristian

Here the grammar:

grammar params;

options {k = 1;}

@members {
   public String output_filename = null;
   public String input_filename = null;
}

/*------------------------------------------------------------------
  * PARSER RULES
  *------------------------------------------------------------------*/

// Parameters grammar
parameters
	:	inputMethod? opts? ;

inputMethod
	:	'-' {System.out.println("input method: stdin"); }
	|	FileName {input_filename = $FileName.text;}
	;

opts	:	(longOption | shortOption)+ ;

// Long format options grammar
longOption
	:	'--output' FileName {output_filename = $FileName.text;} ;
	
// Abbreviated format options grammar
shortOption
	:	'-o' FileName {output_filename = $FileName.text;} ;
	
/*------------------------------------------------------------------
  * LEXER RULES
  *------------------------------------------------------------------*/

FileName
	:	(~('-'|' -'))* ;
// White spaces
WS	:	(' '|'\t') {$channel = HIDDEN;} ;


-- 
GPG Key-ID: 0x564903FA - Jabber ID: corellian at swissjabber.ch


From sunshine at public.kherson.ua  Wed Jan 23 10:51:29 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Wed, 23 Jan 2008 20:51:29 +0200
Subject: [antlr-interest] [C Target] Why It is here: if (BACKTRACKING>0)
In-Reply-To: <"LFB1154011E0B47bf906577E9E44C1264.1201107530.scalix.temporal-wave.com*"@MHS>
Message-ID: <C3BD5951.8B651%sunshine@public.kherson.ua>

On 23/1/08 6:37 PM, "Jim Idle" <jimi at temporal-wave.com> wrote:

Hi Jim,

> The code generating string template does not care whether there is any
> backtracking involved and so any actions or generated code that should
> not be executed if the rule is in backtracking mode are gated in this
> way. It resolves to an int and the C compiler will generate code that
> checks such an expression extremely efficiently such that coupled with
> pipelining and so on, I doubt that you could measure the difference in
> performance without it. I suppose that the template could check this
> kind of circumstance and gate the check in the stringtemplate, but it is
> hardly worth it.
> 
> If you were absolutely sure that the code never does any backtracking,
> then you could change the definition of the macro such that the C
> compiler would always optimize it away. But then you are playing with
> the fundamentals for pretty much zero gain. In general, dont worry
> about the micro optimizations.

So you mean that this code
    
    if (BACKTRACKING>0)
    
Is related NOT only with

    options 
    {
        backtrack    = true;
    }

But to semantic predicates also?  Aha, okay then.
I have think it is only for

        backtrack    = true;


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From jaluber at gmx.de  Wed Jan 23 11:04:30 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 23 Jan 2008 20:04:30 +0100
Subject: [antlr-interest] Assembly for Antlr.Runtime namespace
In-Reply-To: <38a26f430801221545i49c38f41taa2a26199a812816@mail.gmail.com>
References: <38a26f430801221449r6638453bv5ee2a76cbd24a002@mail.gmail.com>	
	<479678C1.5060002@gmx.de>	
	<38a26f430801221519u5625ff47u59a14cc070287acd@mail.gmail.com>	
	<47967C54.30809@gmx.de>
	<38a26f430801221545i49c38f41taa2a26199a812816@mail.gmail.com>
Message-ID: <47978FBE.8070307@gmx.de>

Dejas Ninethousand schrieb:
> That directory structure did not exist in the jar; however, I downloaed 
> antlr-3.0.1.tar.gz source distro and found four .dll files in 
> /runtime/CSharp/bin/net-2.0 including antlr.runtime.dll.
> 
> After adding those dlls to my references list, I attempted to compile 
> but now get two errors:
> 
> Error    2    An object reference is required for the non-static field, 
> method, or property 'Antlr.Runtime.Debug.DebugParser.dbg'    
> C:\projects\AGLInterpExp\AGLParser.cs    52    59    AGLInterpExp
> Error    3    An object reference is required for the non-static field, 
> method, or property ' Antlr.Runtime.Debug.DebugParser.dbg'    
> C:\projects\AGLInterpExp\AGLParser.cs    52    59    AGLInterpExp
> 
> 
> that line (59) line is:
> 
> protected ITreeAdaptor adaptor = new DebugTreeAdaptor(dbg, new 
> CommonTreeAdaptor());
> 
> dbg does not appear to be defined as a field in surrounding ANTLRWorks 
> generated "AGLParser.cs" file.  Is it perhaps expecting that member to 
> be inherited from DebugParser but for some reason is not?
> 
> -- Dejas
The problem is probably that the DLLs of 3.0.1 aren't binary compatible 
to 3.1 generated files. ANTLRworks 1.1.5 uses already a pre-3.1 so you 
have to took in an intermediate build for that directory structure (or 
at least runtime/CSharp, in case the releases cut the structure).

Johannes

From kroepke at classdump.org  Wed Jan 23 11:22:20 2008
From: kroepke at classdump.org (=?ISO-8859-1?Q?Kay_R=F6pke?=)
Date: Wed, 23 Jan 2008 20:22:20 +0100
Subject: [antlr-interest] target language independent action code
In-Reply-To: <47951ABF.8060905@gmx.de>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
	<20080121132219.00006ea2@goanna>
	<20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>
	<479510A0.8090502@gmx.de>
	<20080121214634.BXRB5957.viefep16-int.chello.at@edge.upc.biz>
	<47951ABF.8060905@gmx.de>
Message-ID: <9D7673E8-7F28-4DF4-83DD-D2B7CE26DFC1@classdump.org>

Hi!

On Jan 21, 2008, at 11:20 PM, Johannes Luber wrote:

>> Thats because Terence already did the work in these cases (and I  
>> assume that there are hidden string templates that translate that).  
>> ANTLR translates the $variable tokens appropriately.
>
> Ter created the example and someone else than me translated it to  
> CSharp. So I don't know how much had to be changed there. In any  
> case, the $-variables are parsed by ANTLR itself and don't need  
> StringTemplate per se. But the actual output will use ST again.


Just for clarification, it's best to treat $variables in actions as  
opaque. There's a filtering lexer that goes through every action to  
look for the variables and then uses certain StringTemplates from the  
respective Target.stg to translate into target code.
So, in effect ST is used by those, but just because code generation in  
ANTLR is based on ST, they are not templates themselves, though.

I don't think it is wise to try to abstract code even further than  
that, as it is either a heavy burden on the code generation side, or  
will be painful to write (just because you'd actually invent a new  
programming language for actions, that could be easily translated into  
any other kind of language, at least those ANTLR targets).
One beauty of ANTLR is that it nicely integrates with target specific  
code, so you can call any old API within your actions. Apart from the  
"helper variables" $token et al, ANTLR doesn't care what you put in it.
The variables are there to protect the programmer from changes in the  
ANTLR implementation. Just imagine you'd had to write code like  
_id.text all the time. It would surely break when you rename the label  
in the grammar, and you would not get a warning from ANTLR - just from  
your compiler, saying that there are a gazillion references to an  
undeclared var _id.

That said, we are aware of the pains of cross-language grammars and  
I'm thinking about ways to help with the solution. Sadly I'm far from  
ready to announce anything yet.
One common use-case is that you found a grammar in the antlr.org  
grammar list, use that, some publishes a bug fix for that grammar and  
you are left with your copy of it and the need to merge. In most cases  
you have probably heavily modified the grammar already, and if only  
with custom actions. Painful.

As for code size: I've been long a fan of having the DFA classes  
outside of the generated file, i.e. in either one DFA file or in  
separate ones. I guess providing an option like that (- 
XmultipleDFAfiles or somesuch) could help in certain situations. Once  
upon a time the DFAs were in separate files, IIRC, but that has  
changed. I don't remember the reasons, but the code generation classes  
in ANTLR's core would need changing to support multiple output files.  
So don't expect it to be done quickly (unless of course, you want to  
volunteer and present your solution ;)) We might even convince Ter of  
the value :P

cheers,
-k
-- 
Kay R?pke
http://classdump.org/







From dejas9000 at gmail.com  Wed Jan 23 11:31:45 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Wed, 23 Jan 2008 13:31:45 -0600
Subject: [antlr-interest] Parser inheriting from DebugParser instead of
	Parser
Message-ID: <38a26f430801231131n209fa03cp7b65da0a30f5c7bd@mail.gmail.com>

I was somehow able to place ANTLRWorks into a mode where its C# generated
parser class inherited from a class called DebugParser instead of Parser.
However, now the program is back in a state generating code that descends
from Parser.  It appears descending from DebugParser may have uncovered a
bug in the MS C# complier, so I am interested in generating the old version
of the class again (descending from DebugParser) but can't figure out how to
do it.  Does anyone know how this is done?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080123/bfb741ff/attachment-0001.html 

From zhixueyong at hotmail.com  Wed Jan 23 12:34:42 2008
From: zhixueyong at hotmail.com (Xue Yong Zhi)
Date: Wed, 23 Jan 2008 15:34:42 -0500
Subject: [antlr-interest] projects using ANTLR
In-Reply-To: <f0fcc6820801230543x73913bfbv516e9b07cf6531a4@mail.gmail.com>
References: <f0fcc6820801230543x73913bfbv516e9b07cf6531a4@mail.gmail.com>
Message-ID: <fn8895$23u$1@ger.gmane.org>

Mark Volkmann wrote:
> Is there a web page somewhere that lists some projects that are using
> ANTLR? I think JRuby and Groovy use ANTLR. I'd like to hear about
> other somewhat well-known projects that are using it.
> 

Here is a old post of mine:
http://seclib.blogspot.com/2005/06/parser-generator-used-for-popular.html

btw, JRuby does not use ANTLR.

-- 
Xue Yong Zhi
XRuby (Ruby to Java bytecode compiler):
http://xruby.blogspot.com


From jimi at temporal-wave.com  Wed Jan 23 13:01:29 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 23 Jan 2008 13:01:29 -0800
Subject: [antlr-interest] [C Target] Why It is here: if (BACKTRACKING>0)
In-Reply-To: <200801231922.22798.vbar@comp.cz>
Message-ID: <"L4838BE263A5F45caB961A8003DA50F84.1201123339.scalix.temporal-wave.com*"@MHS>

Sorry - it is going to be a commercial product rather than freeware.

Jim

> -----Original Message-----
> From: Vaclav Barta [mailto:vbar at comp.cz]


> Chmm, is it available? I've adapted my SQL grammar from
> http://www.antlr.org/grammar/1062280680642/MS_SQL_SELECT.html , and
> while I
> don't see any performance problems with it, it definitely has
> predicates, so
> I'd like to see an alternative...



From jaluber at gmx.de  Wed Jan 23 13:54:33 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Wed, 23 Jan 2008 22:54:33 +0100
Subject: [antlr-interest] Parser inheriting from DebugParser instead of
 Parser
In-Reply-To: <38a26f430801231131n209fa03cp7b65da0a30f5c7bd@mail.gmail.com>
References: <38a26f430801231131n209fa03cp7b65da0a30f5c7bd@mail.gmail.com>
Message-ID: <4797B799.5000407@gmx.de>

Dejas Ninethousand schrieb:
> I was somehow able to place ANTLRWorks into a mode where its C# 
> generated parser class inherited from a class called DebugParser instead 
> of Parser.  However, now the program is back in a state generating code 
> that descends from Parser.  It appears descending from DebugParser may 
> have uncovered a bug in the MS C# complier, so I am interested in 
> generating the old version of the class again (descending from 
> DebugParser) but can't figure out how to do it.  Does anyone know how 
> this is done?
> 

Can you describe the bug? There are few bugs related to debugging which 
haven't been fixed yet. Before you suspect the compiler - suspect your 
code first, then the libraries. ;)

Johannes

From parrt at cs.usfca.edu  Wed Jan 23 18:44:51 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 23 Jan 2008 18:44:51 -0800
Subject: [antlr-interest] ST 3.1 (Java): get it while it's hot
Message-ID: <0DE1CBFC-8677-41E4-AD21-35EF053D4D6E@cs.usfca.edu>

http://www.stringtemplate.org/download.html

Python and C# or not far behind.

Ter

From Hong-Thai.Nguyen at imag.fr  Thu Jan 24 02:41:23 2008
From: Hong-Thai.Nguyen at imag.fr (Hong-Thai NGUYEN)
Date: Thu, 24 Jan 2008 11:41:23 +0100
Subject: [antlr-interest] [C Target]: comment processing
Message-ID: <DA0CC6BB-66D0-44B1-899D-ECA8A4E6AF33@imag.fr>

Hi,
I'm using ANTLR for creating a compiler in linguistic processing  
(syst?me-Q). The target language is ANSI C.
We'd keep all comments in code source and attach them to related  
items (like JavaDoc, i got example of sub-parser to process JavaDoc  
type comment from Ter, thanks).
But, we'd try to keep ANTLR grammar as clear as possible, we wouldn't  
pollute with "comment"  rule every where. So, we're using Channel to  
identify comment-liked Tokens, then calculate which items are related  
to which comments by line number. It's a good solution ? Even that,  
antlr3c don't give API (ex. getTokens(), ...) like in Java Target.

I've an other issue, if ANTLR support some kind of "global" rule like:
global_rule:
item comment;
where item = ALL matching rule, so that i can grant directly comment  
to every propriety items. How could we implement that in ANTLR ?

Thanks,

============================
Hong-Thai NGUYEN
PhD Student
Email: Hong-Thai.Nguyen at imag.fr
GETALP-LIG
385 rue de la Biblioth?e`que
38041 Grenoble cedex
France
Tel.:   + 33 4 7651 4817
Fax.:  + 33 4 7644 6675
GSM.: + 33 6 27 04 86 22
IM (Yahoo): thaichat04, (Sky): thaichat04
Page: http://www-clips.imag.fr/geta/User/hong-thai.nguyen/Welcome.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/1fd9829c/attachment.html 

From discontinuum at gmail.com  Thu Jan 24 03:57:09 2008
From: discontinuum at gmail.com (l33t)
Date: Thu, 24 Jan 2008 12:57:09 +0100
Subject: [antlr-interest] tokenVocab option leads to incomplete DFA in lexer
Message-ID: <f4dc39b90801240357g3d57219v886a8b1cc0672d1c@mail.gmail.com>

Hi.

I'm rewriting an old ANTLR v2 grammar to ANTLR v3, but I've
encountered problems while importing token vocabulary.
Basically, what I need is to instruct lexer to generate a particular token
type when it sees a certain literal. For instance: the lexer sees 'define
' for which it creates a new token. I want it to create a token with a
prescribed type, say
101.

The old ANTLR2 grammar named *T.g* contains this piece of code:

options {
  importVocab = TImport;
}

and the *TImportTokenTypes.txt* file contains lines like this:

TDImport

...
DEFINE="define"=101
...

Everything works flawlessly, in *TLexer.java* there is a literal.put("abort",
101) construct and both *TLexTokenTypes.java* and *TTokenTypes.java*
 contain int DEFINE = 101;



Now, I have created an ANTLR3 grammar which looks like this

grammar E;

options {
  output = AST;
  ASTLabelType = CommonTree;
}

program : ( statement )+  ;
statement
  : 'define' ID '=' INT ';'
  | 'declare' ID ';'
  ;

ID: ('a'..'z'|'A'..'Z')+;
INT: '0'..'9'+;
WS: ( '\n' | '\r' | ' ' | '\t' )+ { $channel = HIDDEN; };


This simple grammar accepts sentences like define x = 10; declare
aaa;.I generate lexer and parser, run a test
on a *sample input*:
define x=8;define y=12;
declare z ;
and everything works just fine. At least until I try to instruct ANTLR3 to
assign a token type 101 to the literal 'define'. At first, I went for the
obvious:

grammar E;

options {
  tokenVocab = Basic;
  output = AST;
  ASTLabelType = CommonTree;
}
// The rest of the grammar is the same

with *Basic.tokens* containing lines

'define'=101
...

When I generated the grammar (java org.antlr.Tool -lib . E.g) everything
seemed ok, but it was not.
When I tried to test it on the same sample input I obtained the following
error:
line 1:0 required (...)+ loop did not match anything at input 'define'

When I opened the *ELexer.java* to study it, there was no trace of the '
define' literal at all.
While in the first case (without the tokenVocab option) the lexer contained
stuff like this:

// $ANTLR start T7
public final void mT7() throws RecognitionException {
  try {
    int _type = T7;
    // E.g:3:4: ( 'define' )
    // E.g:3:6: 'define'
    {
      match("define");
    }
    this.type = _type;
  }
  ...
}
// $ANTLR end T7


and the *E.tokens* contained

INT=5
WS=6
ID=4
'declare'=10
*'define'=7*
'='=8
';'=9

which is correct, in the second case (with the tokenVocab option specified)
the *E.tokens* file was correct, ie. 'define' had 101 assigned

INT=103
WS=104
ID=102
'declare'=107
*'define'=101*
'='=105
';'=106

but *ELexer.java* did not have a mT101()method. Separating lexer and
parser grammar did not solve the problem.
Neither did the following trick where *Basic.tokens* contained just

DEFINE=101

and the grammar used tokenVocab and tokens definition:

grammar E;

options {
  output = AST;
  ASTLabelType = CommonTree;
  tokenVocab = Basic;
}

tokens {
  AST_define='define';
}

This fails during grammar generation with this exception:

ANTLR Parser Generator Version 3.0.1 (August 13, 2007) 1989-2007
error(10): internal error: E.g : java.lang.NullPointerException
org.antlr.tool.AssignTokenTypesWalker.aliasTokenIDsAndLiterals(
AssignTokenTypesWalker.java:257)
org.antlr.tool.AssignTokenTypesWalker.assignTypes(
AssignTokenTypesWalker.java:211)
org.antlr.tool.AssignTokenTypesWalker.grammar(AssignTokenTypesWalker.java
:375)
org.antlr.tool.Grammar.setGrammarContent(Grammar.java:547)
org.antlr.tool.Grammar.<init>(Grammar.java:456)
org.antlr.Tool.getGrammar(Tool.java:331)
org.antlr.Tool.process(Tool.java:267)
org.antlr.Tool.main(Tool.java:70)



Is it possible that there is a bug in ANTLR 3.0.1 and the DFA is not
generated properly? Or is it just me doing something wrong? Or is there
another way to assign a particular token type to a ceratin literal?

As for versions, I'm using *antlr-3.0.1*, *stringtemplate-3.1b1*.

Erik Kratochvil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/be262dfa/attachment-0001.html 

From tirelli at post.com  Thu Jan 24 05:26:03 2008
From: tirelli at post.com (Edson Tirelli)
Date: Thu, 24 Jan 2008 11:26:03 -0200
Subject: [antlr-interest] Anyone has a LISP ANTLR3 grammar and can
	contribute it to Drools?
Message-ID: <e6dd5ba30801240526l1d2a1ea5m56b5921d9f4f287c@mail.gmail.com>

    All,

   We need a Lisp ANTLR3 grammar for the Drools open source project (
http://labs.jboss.com/drools/). We were going to build one from scratch, but
I was wondering if anyone has one ready and can contribute to the project.
All proper credits would be given, as usual. Project's license is ASF.
   Alternatively, an (E)BNF Lisp grammar that we can use as a base to build
an ANTLR3 would also be helpful. Our main worry is how to define the
function name token for Lisp, since lisp accepts almost anything as a
function name.

   We really appreciate any help.

   Thanks,
     Edson

-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/4d82dbd9/attachment.html 

From ola.bini at gmail.com  Thu Jan 24 05:52:27 2008
From: ola.bini at gmail.com (Ola Bini)
Date: Thu, 24 Jan 2008 14:52:27 +0100
Subject: [antlr-interest] Anyone has a LISP ANTLR3 grammar and
 can	contribute it to Drools?
In-Reply-To: <e6dd5ba30801240526l1d2a1ea5m56b5921d9f4f287c@mail.gmail.com>
References: <e6dd5ba30801240526l1d2a1ea5m56b5921d9f4f287c@mail.gmail.com>
Message-ID: <4798981B.4000508@gmail.com>

Edson Tirelli wrote:
>
>     All,
>
>    We need a Lisp ANTLR3 grammar for the Drools open source project 
> (http://labs.jboss.com/drools/). We were going to build one from 
> scratch, but I was wondering if anyone has one ready and can 
> contribute to the project. All proper credits would be given, as 
> usual. Project's license is ASF.
>    Alternatively, an (E)BNF Lisp grammar that we can use as a base to 
> build an ANTLR3 would also be helpful. Our main worry is how to define 
> the function name token for Lisp, since lisp accepts almost anything 
> as a function name.
>
Actually, you could make it really easy for yourself and make a lisp 
that doesn't take everything as a function name. The easiest you could 
do is probably just use the CL conventions and parse everything as 
atoms, separated by spaces. Spaces in atom names can be escaped with \. 
You can also have an atom name inside bars: |foo bar|, and then strings. 
That's really all you need.

Cheers

-- 
 Ola Bini (http://ola-bini.blogspot.com) 
 JRuby Core Developer
 Developer, ThoughtWorks Studios (http://studios.thoughtworks.com)
 Practical JRuby on Rails (http://apress.com/book/view/9781590598818)

 "Yields falsehood when quined" yields falsehood when quined.



From SWatt at infobal.com  Thu Jan 24 06:40:53 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Thu, 24 Jan 2008 09:40:53 -0500
Subject: [antlr-interest] Anyone has a LISP ANTLR3 grammar and
	can	con	tribute it to Drools?
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DADB2@EXSVR1>

Yes, CL is definitely the way to go.

However, with Lisp, the easy stuff is:

expression =
  '(' expression* ('.' expression)? ')'
  | symbol
  | number

which is more or less the whole "natural" syntax of Lisp - it was designed
to be trivial parse on 1950s hardware!

The language Lisp then uses "special forms" which define the semantics.
These include examples like (if (= a b) (print c)), where "if" the
conditional. However, special forms are not syntactic, really. 

However, you very quickly get into additional stuff which is done by
"readtables", which define associations between characters, and which can
strictly (in Common Lisp) be manipulated at run-time, or even at compile
time. These extensions are mostly simple, but a few (such as backquote) are
not. Essentially, you can associate a character with a function then then
gets called as part of the reader, which is what takes text and turns it
into a Lisp internal representation. 

In ANTLR terms, these character associations can recursively call the parser
(or even the raw input stream) to do other stuff. Comments, for example, can
be handled by the read-table, both the regular ";" and the balanced "#| ....
|#" type.  "#" is an extension to the read-table for all sorts of nasty
stuff, and uses the second character to invoke a function (i.e., readtables
can be cascaded). For example, "#'" is a readtable macro that reads a Lisp
expression (as above) and conveniently wraps the (FUNCTION ...) special form
around it, just as "'" is a convenience for (QUOTE ...). ANTLR can do all
this stuff nicely with ASTs, if you put all these characters in the lexer,
and then match them at the left of the expression rule. 

i.e., pick a subset of CL, or another Lisp, and when you have it, the
grammar will probably be trivial. Don't even think about trying to do all of
CL in ANTLR (or any other parser) - it was designed in a way that allows
Lisp to take control of the input process at certain stages; ideal for
higher-level language processing. You probably don't need some of the
oddities of CL, like some of the rarer # readtable macros, not that they are
hard to do.

This is the issue with Lisp - there is a standard, but it would be
inappropriate to implement much of it in ANTLR as it is largely dynamic and
intimately connected with the core language; yet subsets may vary depending
on context of use. 

All the best
Stuart

-----Original Message-----
From: Ola Bini [mailto:ola.bini at gmail.com]
Sent: Thursday, January 24, 2008 8:52 AM
To: Edson Tirelli
Cc: antlr-interest at antlr.org; Mark Proctor
Subject: Re: [antlr-interest] Anyone has a LISP ANTLR3 grammar and can
contribute it to Drools?


Edson Tirelli wrote:
>
>     All,
>
>    We need a Lisp ANTLR3 grammar for the Drools open source project 
> (http://labs.jboss.com/drools/). We were going to build one from 
> scratch, but I was wondering if anyone has one ready and can 
> contribute to the project. All proper credits would be given, as 
> usual. Project's license is ASF.
>    Alternatively, an (E)BNF Lisp grammar that we can use as a base to 
> build an ANTLR3 would also be helpful. Our main worry is how to define 
> the function name token for Lisp, since lisp accepts almost anything 
> as a function name.
>
Actually, you could make it really easy for yourself and make a lisp 
that doesn't take everything as a function name. The easiest you could 
do is probably just use the CL conventions and parse everything as 
atoms, separated by spaces. Spaces in atom names can be escaped with \. 
You can also have an atom name inside bars: |foo bar|, and then strings. 
That's really all you need.

Cheers

-- 
 Ola Bini (http://ola-bini.blogspot.com) 
 JRuby Core Developer
 Developer, ThoughtWorks Studios (http://studios.thoughtworks.com)
 Practical JRuby on Rails (http://apress.com/book/view/9781590598818)

 "Yields falsehood when quined" yields falsehood when quined.


From jimi at temporal-wave.com  Thu Jan 24 07:07:23 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 24 Jan 2008 07:07:23 -0800
Subject: [antlr-interest] [C Target]: comment processing
In-Reply-To: <DA0CC6BB-66D0-44B1-899D-ECA8A4E6AF33@imag.fr>
Message-ID: <"LBD882E49BBB9433dBB3B66136098EB0A.1201188506.scalix.temporal-wave.com*"@MHS>

The C target does support the same way of retrieving off-channel tokens
that the java target does, but the semantics are C of course J See the C
target examples in the downloadable examples pack on the download page.
This has Visual Studio 2005 .sln files, and if you are a UNIX man, then
just convert all the grammar files and compile all the .c files into one
binary. This will give you some of the API ?look and feel?.

 

To see how to achieve the getTokens functionality, look at the MACRO
definitions in the generated code. You will see that you have a MACRO
INPUT, which is the the input stream (whether lexer, parser or tree
parser).

 

So, you can do this:

 

? $tok=rule ?.

 

pANTLR3_LIST commentTokens;

pANTLR3_VECTOR allTokens;

 

 

allTokens                 = INPUT->getTokens             (INPUT);  //
Returns pointer to the list of all tokens

commentTokens  = INPUT->getTokenRange  (INPUT, $tok->start, $tok->stop);
// Other semantics for $xxx apply of course

 

 

The API for the LIST and VECTOR are all documented.

 

You can pick out the comments even from the tree parser, so you should
not need together the comment anywhere, just scan back through the
tokens from the token you wish to associate comments with, looking for
COMMENT types. Of course, the difficulty of associating the comments
with the correct piece of code is a different problem.

 

However, you probably need scopes if you want to actually collect things
(which I don?t think you need to do).

 

Jim

 

 

 

From: Hong-Thai NGUYEN [mailto:Hong-Thai.Nguyen at imag.fr] 
Sent: Thursday, January 24, 2008 2:41 AM
To: ANTLR maillist
Subject: [antlr-interest] [C Target]: comment processing

 

Hi,

I'm using ANTLR for creating a compiler in linguistic processing
(syst?me-Q). The target language is ANSI C.

We'd keep all comments in code source and attach them to related items
(like JavaDoc, i got example of sub-parser to process JavaDoc type
comment from Ter, thanks).

But, we'd try to keep ANTLR grammar as clear as possible, we wouldn't
pollute with "comment"  rule every where. So, we're using Channel to
identify comment-liked Tokens, then calculate which items are related to
which comments by line number. It's a good solution ? Even that, antlr3c
don't give API (ex. getTokens(), ...) like in Java Target.

 

I've an other issue, if ANTLR support some kind of "global" rule like:

global_rule:

item comment;

where item = ALL matching rule, so that i can grant directly comment to
every propriety items. How could we implement that in ANTLR ?

 

Thanks,

 

============================

Hong-Thai NGUYEN

PhD Student

Email: Hong-Thai.Nguyen at imag.fr

GETALP-LIG

385 rue de la Bibliothe`que

38041 Grenoble cedex

France

Tel.:   + 33 4 7651 4817

Fax.:  + 33 4 7644 6675

GSM.: + 33 6 27 04 86 22

IM (Yahoo): thaichat04, (Sky): thaichat04

Page: http://www-clips.imag.fr/geta/User/hong-thai.nguyen/Welcome.html


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/31cf1202/attachment-0001.html 

From tirelli at post.com  Thu Jan 24 08:18:42 2008
From: tirelli at post.com (Edson Tirelli)
Date: Thu, 24 Jan 2008 14:18:42 -0200
Subject: [antlr-interest] Anyone has a LISP ANTLR3 grammar and can con
	tribute it to Drools?
In-Reply-To: <96AD91D781CCD511A66000B0D0D15C49043DADB2@EXSVR1>
References: <96AD91D781CCD511A66000B0D0D15C49043DADB2@EXSVR1>
Message-ID: <e6dd5ba30801240818t612aad5byfde70dcd73876f25@mail.gmail.com>

   Thank you all for the tips.

   We will look into following your suggestions!

    Cheers,
      Edson

2008/1/24, Stuart Watt <SWatt at infobal.com>:
>
> Yes, CL is definitely the way to go.
>
> However, with Lisp, the easy stuff is:
>
> expression =
>   '(' expression* ('.' expression)? ')'
>   | symbol
>   | number
>
> which is more or less the whole "natural" syntax of Lisp - it was designed
> to be trivial parse on 1950s hardware!
>
> The language Lisp then uses "special forms" which define the semantics.
> These include examples like (if (= a b) (print c)), where "if" the
> conditional. However, special forms are not syntactic, really.
>
> However, you very quickly get into additional stuff which is done by
> "readtables", which define associations between characters, and which can
> strictly (in Common Lisp) be manipulated at run-time, or even at compile
> time. These extensions are mostly simple, but a few (such as backquote)
> are
> not. Essentially, you can associate a character with a function then then
> gets called as part of the reader, which is what takes text and turns it
> into a Lisp internal representation.
>
> In ANTLR terms, these character associations can recursively call the
> parser
> (or even the raw input stream) to do other stuff. Comments, for example,
> can
> be handled by the read-table, both the regular ";" and the balanced "#|
> ....
> |#" type.  "#" is an extension to the read-table for all sorts of nasty
> stuff, and uses the second character to invoke a function (i.e.,
> readtables
> can be cascaded). For example, "#'" is a readtable macro that reads a Lisp
> expression (as above) and conveniently wraps the (FUNCTION ...) special
> form
> around it, just as "'" is a convenience for (QUOTE ...). ANTLR can do all
> this stuff nicely with ASTs, if you put all these characters in the lexer,
> and then match them at the left of the expression rule.
>
> i.e., pick a subset of CL, or another Lisp, and when you have it, the
> grammar will probably be trivial. Don't even think about trying to do all
> of
> CL in ANTLR (or any other parser) - it was designed in a way that allows
> Lisp to take control of the input process at certain stages; ideal for
> higher-level language processing. You probably don't need some of the
> oddities of CL, like some of the rarer # readtable macros, not that they
> are
> hard to do.
>
> This is the issue with Lisp - there is a standard, but it would be
> inappropriate to implement much of it in ANTLR as it is largely dynamic
> and
> intimately connected with the core language; yet subsets may vary
> depending
> on context of use.
>
> All the best
> Stuart
>
> -----Original Message-----
> From: Ola Bini [mailto:ola.bini at gmail.com]
> Sent: Thursday, January 24, 2008 8:52 AM
> To: Edson Tirelli
> Cc: antlr-interest at antlr.org; Mark Proctor
> Subject: Re: [antlr-interest] Anyone has a LISP ANTLR3 grammar and can
> contribute it to Drools?
>
>
> Edson Tirelli wrote:
> >
> >     All,
> >
> >    We need a Lisp ANTLR3 grammar for the Drools open source project
> > (http://labs.jboss.com/drools/). We were going to build one from
> > scratch, but I was wondering if anyone has one ready and can
> > contribute to the project. All proper credits would be given, as
> > usual. Project's license is ASF.
> >    Alternatively, an (E)BNF Lisp grammar that we can use as a base to
> > build an ANTLR3 would also be helpful. Our main worry is how to define
> > the function name token for Lisp, since lisp accepts almost anything
> > as a function name.
> >
> Actually, you could make it really easy for yourself and make a lisp
> that doesn't take everything as a function name. The easiest you could
> do is probably just use the CL conventions and parse everything as
> atoms, separated by spaces. Spaces in atom names can be escaped with \.
> You can also have an atom name inside bars: |foo bar|, and then strings.
> That's really all you need.
>
> Cheers
>
> --
> Ola Bini (http://ola-bini.blogspot.com)
> JRuby Core Developer
> Developer, ThoughtWorks Studios (http://studios.thoughtworks.com)
> Practical JRuby on Rails (http://apress.com/book/view/9781590598818)
>
> "Yields falsehood when quined" yields falsehood when quined.
>
>


-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/6cf970f0/attachment.html 

From dejas9000 at gmail.com  Thu Jan 24 08:19:33 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Thu, 24 Jan 2008 10:19:33 -0600
Subject: [antlr-interest] Problem Creating Imaginary Node
Message-ID: <38a26f430801240819q5f8c8825h7f0e16e9bd21f1b1@mail.gmail.com>

Based on my understanding of the documentation at
http://www.antlr.org/wiki/display/ANTLR3/Tree+construction I am attempting
to create an imaginary node on my AST via:

declaration
    : type_identifier IDENTIFIER -> ^(DECLtype_identifier IDENTIFIER)
    ;

But whenever I try to generate the code from within ANTLRWorks 1.1.5 it
complains that DECL is an undefined token.  What am I missing?  Thanks.

--Dejas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/f76fee05/attachment.html 

From jaluber at gmx.de  Thu Jan 24 08:27:10 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 24 Jan 2008 17:27:10 +0100
Subject: [antlr-interest] Problem Creating Imaginary Node
In-Reply-To: <38a26f430801240819q5f8c8825h7f0e16e9bd21f1b1@mail.gmail.com>
References: <38a26f430801240819q5f8c8825h7f0e16e9bd21f1b1@mail.gmail.com>
Message-ID: <4798BC5E.6000108@gmx.de>

Dejas Ninethousand schrieb:
> Based on my understanding of the documentation at 
> http://www.antlr.org/wiki/display/ANTLR3/Tree+construction I am 
> attempting to create an imaginary node on my AST via:
> 
> declaration
>     : type_identifier IDENTIFIER -> ^(DECLtype_identifier IDENTIFIER)
>     ;
> 
> But whenever I try to generate the code from within ANTLRWorks 1.1.5 it 
> complains that DECL is an undefined token.  What am I missing?  Thanks.
> 
> --Dejas

Did you use

tokens {
DECL;
}

?

Johannes

From dejas9000 at gmail.com  Thu Jan 24 08:34:35 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Thu, 24 Jan 2008 10:34:35 -0600
Subject: [antlr-interest] Parser inheriting from DebugParser instead of
	Parser
In-Reply-To: <4797B799.5000407@gmx.de>
References: <38a26f430801231131n209fa03cp7b65da0a30f5c7bd@mail.gmail.com>
	<4797B799.5000407@gmx.de>
Message-ID: <38a26f430801240834p21ac301au4c0fda8312a06d24@mail.gmail.com>

It appears now that it was not a compiler bug (aside from reporting the
error twice) but what appears to be an error in the construction of the *
Parser.cs file which uses a technique that not allowable in C# (but
allowable in Java, hence my confusion).  I am unable to put ANTLERWorks back
in the state where the generated parser inherits from DebugParser instead of
Parser, (and accidentally blew away that version of the file) so I will have
to relate from memory what the issue was with the generated code.

DebugParser has a field in it named dbg which is protected internal.
Somewhere in the generated *Parser.cs, when inheriting from DebugParser, a
field is defined that passes that inherited dbg to a constructor during
field initialization.  It looked something like this:

// inside generated parser class which inherits from DebugParser:

SomeType someField = new SomethingFromLib(dbg, someotherParam);

As I have just discovered, this type of field initialization that references
another field in the class (i.e. dbg) is not allowed in C# (though allowable
in Java, which I bet is the source of the confusion).  This initialization
must happen in the constructor (and when I moved it to the constructor the
file then compiled fine).  So the important thing to note is that, for
example:

class Foo
{
      Object dog = new Object();
      Object cat = dog; // this line will not compile with cryptic error
message, nor will any line that references dog e.g. "new X(dog);"

}

Is not an allowable C# program while:

class Foo
{
      Object dog = new Object();
      Object cat;

      public Foo()
      {
          cat = dog;
      }

}

is.

I think a good way to think about this is "In C#, implicit (or explicit)
references to this or base (i.e. "super") are not allowable in field
initializers."  Not sure why C# does this, but evidently it is the case.

Hope this helps.




On Jan 23, 2008 3:54 PM, Johannes Luber <jaluber at gmx.de> wrote:

> Dejas Ninethousand schrieb:
> > I was somehow able to place ANTLRWorks into a mode where its C#
> > generated parser class inherited from a class called DebugParser instead
> > of Parser.  However, now the program is back in a state generating code
> > that descends from Parser.  It appears descending from DebugParser may
> > have uncovered a bug in the MS C# complier, so I am interested in
> > generating the old version of the class again (descending from
> > DebugParser) but can't figure out how to do it.  Does anyone know how
> > this is done?
> >
>
> Can you describe the bug? There are few bugs related to debugging which
> haven't been fixed yet. Before you suspect the compiler - suspect your
> code first, then the libraries. ;)
>
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/c70d9235/attachment.html 

From dejas9000 at gmail.com  Thu Jan 24 08:39:26 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Thu, 24 Jan 2008 10:39:26 -0600
Subject: [antlr-interest] Problem Creating Imaginary Node
In-Reply-To: <4798BC5E.6000108@gmx.de>
References: <38a26f430801240819q5f8c8825h7f0e16e9bd21f1b1@mail.gmail.com>
	<4798BC5E.6000108@gmx.de>
Message-ID: <38a26f430801240839p3b8658c7s1077326749893b39@mail.gmail.com>

No.  Should I have?  If so, that doesn't make sense to me since DECL is
imaginary.

On Jan 24, 2008 10:27 AM, Johannes Luber <jaluber at gmx.de> wrote:

> Dejas Ninethousand schrieb:
> > Based on my understanding of the documentation at
> > http://www.antlr.org/wiki/display/ANTLR3/Tree+construction I am
> > attempting to create an imaginary node on my AST via:
> >
> > declaration
> >     : type_identifier IDENTIFIER -> ^(DECLtype_identifier IDENTIFIER)
> >     ;
> >
> > But whenever I try to generate the code from within ANTLRWorks 1.1.5 it
> > complains that DECL is an undefined token.  What am I missing?  Thanks.
> >
> > --Dejas
>
> Did you use
>
> tokens {
> DECL;
> }
>
> ?
>
> Johannes
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/3a575526/attachment.html 

From dejas9000 at gmail.com  Thu Jan 24 08:41:41 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Thu, 24 Jan 2008 10:41:41 -0600
Subject: [antlr-interest] Problem Creating Imaginary Node
In-Reply-To: <38a26f430801240839p3b8658c7s1077326749893b39@mail.gmail.com>
References: <38a26f430801240819q5f8c8825h7f0e16e9bd21f1b1@mail.gmail.com>
	<4798BC5E.6000108@gmx.de>
	<38a26f430801240839p3b8658c7s1077326749893b39@mail.gmail.com>
Message-ID: <38a26f430801240841y79d724b9mb510262e84994ca6@mail.gmail.com>

Ok, that appears to have worked... though I don't see any reference to that
requirement on the linked below doc page.   Thanks for the help!

On Jan 24, 2008 10:39 AM, Dejas Ninethousand <dejas9000 at gmail.com> wrote:

> No.  Should I have?  If so, that doesn't make sense to me since DECL is
> imaginary.
>
>
> On Jan 24, 2008 10:27 AM, Johannes Luber <jaluber at gmx.de> wrote:
>
> > Dejas Ninethousand schrieb:
> > > Based on my understanding of the documentation at
> > > http://www.antlr.org/wiki/display/ANTLR3/Tree+construction I am
> > > attempting to create an imaginary node on my AST via:
> > >
> > > declaration
> > >     : type_identifier IDENTIFIER -> ^(DECLtype_identifier IDENTIFIER)
> > >     ;
> > >
> > > But whenever I try to generate the code from within ANTLRWorks 1.1.5it
> > > complains that DECL is an undefined token.  What am I missing?
> >  Thanks.
> > >
> > > --Dejas
> >
> > Did you use
> >
> > tokens {
> > DECL;
> > }
> >
> > ?
> >
> > Johannes
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/f0952523/attachment-0001.html 

From jaluber at gmx.de  Thu Jan 24 09:24:37 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 24 Jan 2008 18:24:37 +0100
Subject: [antlr-interest] Parser inheriting from DebugParser instead of
 Parser
In-Reply-To: <38a26f430801240834p21ac301au4c0fda8312a06d24@mail.gmail.com>
References: <38a26f430801231131n209fa03cp7b65da0a30f5c7bd@mail.gmail.com>	
	<4797B799.5000407@gmx.de>
	<38a26f430801240834p21ac301au4c0fda8312a06d24@mail.gmail.com>
Message-ID: <4798C9D5.8090304@gmx.de>

Dejas Ninethousand schrieb:
> It appears now that it was not a compiler bug (aside from reporting the 
> error twice) but what appears to be an error in the construction of the 
> *Parser.cs file which uses a technique that not allowable in C# (but 
> allowable in Java, hence my confusion).  I am unable to put ANTLERWorks 
> back in the state where the generated parser inherits from DebugParser 
> instead of Parser, (and accidentally blew away that version of the file) 
> so I will have to relate from memory what the issue was with the 
> generated code.
> 
> DebugParser has a field in it named dbg which is protected internal.  
> Somewhere in the generated *Parser.cs, when inheriting from DebugParser, 
> a field is defined that passes that inherited dbg to a constructor 
> during field initialization.  It looked something like this:
> 
> // inside generated parser class which inherits from DebugParser:
> 
> SomeType someField = new SomethingFromLib(dbg, someotherParam);
> 
> As I have just discovered, this type of field initialization that 
> references another field in the class ( i.e. dbg) is not allowed in C# 
> (though allowable in Java, which I bet is the source of the confusion).  
> This initialization must happen in the constructor (and when I moved it 
> to the constructor the file then compiled fine).  So the important thing 
> to note is that, for example:
> 
> class Foo
> {
>       Object dog = new Object();
>       Object cat = dog; // this line will not compile with cryptic error 
> message, nor will any line that references dog e.g. "new X(dog);"
> 
> }
> 
> Is not an allowable C# program while:
> 
> class Foo
> {
>       Object dog = new Object();
>       Object cat;
> 
>       public Foo()
>       {
>           cat = dog;
>       }
> 
> }
> 
> is.
> 
> I think a good way to think about this is "In C#, implicit (or explicit) 
> references to this or base (i.e. "super") are not allowable in field 
> initializers."  Not sure why C# does this, but evidently it is the case.
> 
> Hope this helps.

Ok, that is one the bugs. The reason for the behaviour change is the 
way, objects are initialized. Fields with initializers come first, 
beginning with the most derived class. Then constructors are next, 
beginning with the base class.

Johannes

From devteam at jubii.fr  Thu Jan 24 18:32:38 2008
From: devteam at jubii.fr (Dev Team)
Date: Thu Jan 24 18:32:38 CET 2008
Subject: [antlr-interest] Problem with '.' character
Message-ID: <193235876693275@jubii.com>

An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/7300d9ee/attachment.html 

From rschulz at sonic.net  Thu Jan 24 09:44:53 2008
From: rschulz at sonic.net (Randall R Schulz)
Date: Thu, 24 Jan 2008 09:44:53 -0800
Subject: [antlr-interest]
	=?iso-8859-1?q?Anyone_has_a_LISP_ANTLR3_grammar_?=
	=?iso-8859-1?q?and_can=09con=09tribute_it_to_Drools=3F?=
In-Reply-To: <96AD91D781CCD511A66000B0D0D15C49043DADB2@EXSVR1>
References: <96AD91D781CCD511A66000B0D0D15C49043DADB2@EXSVR1>
Message-ID: <200801240944.54067.rschulz@sonic.net>

On Thursday 24 January 2008 06:40, Stuart Watt wrote:
> Yes, CL is definitely the way to go.
>
> However, with Lisp, the easy stuff is:
>
> expression =
>   '(' expression* ('.' expression)? ')'

Shouldn't that be:

  '(' expression+ ('.' expression)? ')'


Otherwise you'll accept invalid S-Expressions like this:

  ( . foo )


Also, I think you'll need lexeme and grammar productions to handle quote 
(the apostrophe reader macro, not the (quote ...) form) and back-quote, 
at a minimum.


I've written a pretty complete Common Lisp reader and printer library 
with lists (cons cells), vectors, the full complement of numeric 
representations, reader macros and a read-table. The input side is 
quite complete (up to the aspects that require an evaluator), while the 
printer is somewhat less so.

I wrote it all "by hand," with no parser generator support. This seems 
reasonable for Lisp in ways it would not be for most any other 
language.


> ...


Randall Schulz

From SWatt at infobal.com  Thu Jan 24 10:20:13 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Thu, 24 Jan 2008 13:20:13 -0500
Subject: [antlr-interest] Anyone has a LISP ANTLR3 grammar and
	can	con		tribute it to Drools?
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DADB3@EXSVR1>

Yup, for the * => + was my fault - missed that one folks, sorry.

As I said, quote and backquote are properly handled dynamically through
readtables. It is possible to change ' and ` to do entirely different
things, even dynamically. Of course, anyone who did so would not be writing
Lisp any more, but Lispers used this kind of trick to make cheap
approximations to domain specific languages. Adding backquote to Lisp was
even an example in CLTL2, and it is far from simple, especially when nested
(which does happen). 

Approximating readtables by fixing them in ANTLR is a good move. However, I
have seen Lisp grammars that go as far as lexing the special form symbols
specially, as if they are keywords; not a good move. Essentially the Lisp
reader produces an expression from the text, and the interpreter/compiler
operates on these expressions. ANTLR's parser can do the reader, and tree
grammars handle execution, but Lisp coupled them far more closely, by
allowing the interpreter to call the reader and vice versa. 

A good example is the #. syntax which reads the following text as an
expression, runs it, and puts the value in the resulting expression at read
time. i.e., (print #.(+ 1 2)) reads in the expression (print 3). This is a
good example of why full CL parsing/reading can be intertwined with the Lisp
evaluator. It is also an amazing example of the total flexibility which made
Lisp such a powerful language. This flexibility unfortunately made it
possible for people to write some of the worst code I have ever seen. 

--S

-----Original Message-----
From: Randall R Schulz [mailto:rschulz at sonic.net]
Sent: Thursday, January 24, 2008 12:45 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Anyone has a LISP ANTLR3 grammar and can
con tribute it to Drools?


On Thursday 24 January 2008 06:40, Stuart Watt wrote:
> Yes, CL is definitely the way to go.
>
> However, with Lisp, the easy stuff is:
>
> expression =
>   '(' expression* ('.' expression)? ')'

Shouldn't that be:

  '(' expression+ ('.' expression)? ')'


Otherwise you'll accept invalid S-Expressions like this:

  ( . foo )


Also, I think you'll need lexeme and grammar productions to handle quote 
(the apostrophe reader macro, not the (quote ...) form) and back-quote, 
at a minimum.


I've written a pretty complete Common Lisp reader and printer library 
with lists (cons cells), vectors, the full complement of numeric 
representations, reader macros and a read-table. The input side is 
quite complete (up to the aspects that require an evaluator), while the 
printer is somewhat less so.

I wrote it all "by hand," with no parser generator support. This seems 
reasonable for Lisp in ways it would not be for most any other 
language.


> ...


Randall Schulz

From parrt at cs.usfca.edu  Thu Jan 24 11:11:29 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 24 Jan 2008 11:11:29 -0800
Subject: [antlr-interest] Wiki re-organization idea
In-Reply-To: <d3992d900801191238k65d43888m531d0c644c401eef@mail.gmail.com>
References: <d3992d900801191238k65d43888m531d0c644c401eef@mail.gmail.com>
Message-ID: <B1EE9276-4433-40B8-B7D1-DD9FFCD78823@cs.usfca.edu>

great idea.  I have modified the wiki to reorganize approximately as  
you have suggested.

http://www.antlr.org/wiki/display/ANTLR3/ANTLR+3+Wiki+Home

Ter
On Jan 19, 2008, at 12:38 PM, Richard Clark wrote:
> I've been off doing a tricky project* with ANTLR and StringTemplate,  
> and now I'm getting ready to write up notes on processing XML with  
> ANTLR. I've also been looking at the "Tutorials" section of the Wiki  
> and noticing ways to improve it for new and experienced users.
>
> Right now, the Wiki categories are:
>
> - ANTLR v3 documentation
> - ANTLR v3 FAQ
> - ANTLR v3 To Do List
> - Grammar Design Patterns (a single page)
> - Presentations
> - Terence Notes
> - Tutorials
>
> The Tutorials mixes material for absolute beginners with  
> intermediate to advanced applications. I'd like to split things up  
> with a clear learning path:
>
> - Tutorials
> -- Five minute introduction to ANTLR 3
> -- Quick Starter on Parser Grammars - No Past Experience Required
> -- Roadmap to learning ANTLR [new]
>
> - Using ANTLR [new]
> -- Example grammars [new]
> --- Expression evaluator
> --- Fig - Generic configuration language interpreter
> --- JSON Interpreter
> --- Simple tree-based interpeter
> -- Interfacing AST with Java
> -- Island Grammars Under Parser Control
> -- Migrating from ANTLR 2 to ANTLR 3
> -- Test-Driven Development with ANTLR
> -- Using ANTLR 3 with Maven 2
> -- XML [new]
> --- Parsing XML
> --- Interfacing StAX to ANTLR
>
>
> What do you all think? Ter, is this OK?
>
> ...Richard
>
> * Taking XHTML in and generating a native Word 2007 document out  
> with styles, graphics, pagination, etc. It took about 3 weeks and  
> less than 1000 lines of source!
>


From jaluber at gmx.de  Thu Jan 24 11:28:22 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Thu, 24 Jan 2008 20:28:22 +0100
Subject: [antlr-interest] New Tutorial added
Message-ID: <4798E6D6.2020805@gmx.de>

Hi,

after reworking my tutorial about "How to remove global backtracking 
from your grammar" with the helpful advice by Stephanie Balzer, I've 
posted it here: 
<http://www.antlr.org/wiki/display/ANTLR3/How+to+remove+global+backtracking+from+your+grammar>

Feedback welcome!

Johannes

From dejas9000 at gmail.com  Thu Jan 24 12:57:10 2008
From: dejas9000 at gmail.com (Dejas Ninethousand)
Date: Thu, 24 Jan 2008 14:57:10 -0600
Subject: [antlr-interest] Recommend a Document for TreeAdaptors?
Message-ID: <38a26f430801241257x7e2ee454sab4e15daf20b6b3b@mail.gmail.com>

I have my first parse tree (default) horray!  Of course now I want to build
parse trees using classes of my own design instead of relying on the default
ITree implementation.  Poking around a bit I get the notion that this is
done by providing a custom TreeAdaptor implementation; however, I am having
trouble finding clear and expressive documentation on antlr.org related to
custom tree construction.  Could anyone recommend a url that is more
instructive on this topic?  Thanks.

-- Dejas
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080124/8475c0d8/attachment.html 

From jflack at math.purdue.edu  Thu Jan 24 15:41:38 2008
From: jflack at math.purdue.edu (J Chapman Flack)
Date: Thu, 24 Jan 2008 18:41:38 -0500
Subject: [antlr-interest] Unix-like parameters grammar
In-Reply-To: <mailman.6269.1201116710.2502.antlr-interest@antlr.org>
References: <mailman.6269.1201116710.2502.antlr-interest@antlr.org>
Message-ID: <47992232.60305@math.purdue.edu>


Cristian Peraferrer wrote:
> I am trying to build a grammar to parse unix-like parameters, but I'm  
> having problems with the FileName token.

Depending on how unix-like you want to be, you may need to
think about how this actually works in unix.

When a program gets launched as a result of a shell command,
two things happen:

1. The shell lexes the command line into a sequence of tokens
    that become the program name and its list of argument strings.

2. The program looks at its sequence of argument strings and
    decides which ones represent options, or groups of options,
    or things-that-aren't-options (often, but hardly always,
    filenames).

(1) happens without any awareness of options, filenames, or
special meanings for -. All it does is tokenize a string
by splitting at all occurrences of non-quoted whitespace.
On the other hand, it is aware of all the shell's styles
of quotation, so that you could give a sequence of commands
(in sh, or ksh, or bash) like

     touch "My File"
     "ls" My\ File
     \l\s '-l'"t" My' 'File
     r'm' \-f M"y F"ile

where the first and second lines have two tokens each, and the
third and fourth have three each. (I assume you have no need to
duplicate the shell's grammar of control structures or its
variable substitution features, so all you need is a lexer that
knows the quoting rules.)

(2) happens without any awareness of the shell's quoting rules; those
have all been applied. It's also no longer lexing from a string;
its input is now the sequence of strings resulting from the
shell's tokenizing, and the shell's quoting characters have served
their purpose and are now gone. For example, the final token in
each of the above commands is the seven-character string that
starts with M and ends with e.

It's in (2) that the program itself checks for (already tokenized)
strings that begin with - and treats them as options, or treats
the exact string - as representing stdin.  Your question about how
to tokenize FileName probably stems from thinking that you need to
tokenize it. You don't; it's anything that was passed to you by
the shell as a single string and that you don't think is an option.
Unix will happily create a file with any string for a name, as
long as it doesn't contain \x00 anywhere or \x2f except in
reasonable places - those are the only two restrictions (though a
Unix system can mount different types of filesystem that may impose
further restrictions).

If you are writing a genuine Unix command-line program, of course
you rely on the genuine shell to do (1) and your program is only
concerned with (2).  If you are setting out to replicate the
behavior in a different environment, it probably lends itself
best to a kind of staged approach with a lexer that simply
understands quoting and returns a stream of a single token
type ARGSTRING, then parhaps a token-filter stage that could
replace an ARGSTRING with one or more option tokens if it starts
with - (and no -- has been seen), and then a parser on the
end of that. That might be the most natural high-level ANTLRish
picture of what's really going on--though of course most Unix
programs use much more lightweight library functions for the purpose.

-Chap

From guntiso at latnet.lv  Thu Jan 24 15:48:40 2008
From: guntiso at latnet.lv (Guntis Ozols)
Date: Fri, 25 Jan 2008 01:48:40 +0200
Subject: [antlr-interest] target language independent action code
In-Reply-To: <9D7673E8-7F28-4DF4-83DD-D2B7CE26DFC1@classdump.org>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
	<20080121132219.00006ea2@goanna>
	<20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>
	<479510A0.8090502@gmx.de>
	<20080121214634.BXRB5957.viefep16-int.chello.at@edge.upc.biz>
	<47951ABF.8060905@gmx.de>
	<9D7673E8-7F28-4DF4-83DD-D2B7CE26DFC1@classdump.org>
Message-ID: <1201218520.479923d8ec69f@clients.latnet.lv>

> ...
> That said, we are aware of the pains of cross-language grammars and
> I'm thinking about ways to help with the solution. Sadly I'm far from
> ready to announce anything yet.
> ...
> Kay R?pke

I had some ideas (& hype), can someone comment on these, too?
Are these simple solutions underspecified or stupid
(I'm not in the Book club) or what?
http://www.antlr.org/pipermail/antlr-interest/2008-January/025661.html

Guntis


From snouto at gmail.com  Fri Jan 25 01:22:20 2008
From: snouto at gmail.com (Mohammed Ibrahim Mohammed)
Date: Fri, 25 Jan 2008 11:22:20 +0200
Subject: [antlr-interest] Embedded Systems Parsing .....
Message-ID: <002f01c85f33$d753bfe0$0201a8c0@robtronix>

I need to generate parsers using antlr tool targetting some embedded Systems based on specific backend C library for each target MCU , i need antlr to use this C library to generate the parser codes ,  How can i do that ????? and if there is any online tutorial for that please write it down !!!!



snouto,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080125/3042d7ac/attachment.html 

From lilypondtool at organum.hu  Fri Jan 25 02:21:06 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Fri, 25 Jan 2008 11:21:06 +0100
Subject: [antlr-interest] ANTLR 3 Lexical States
Message-ID: <4799B812.7050005@organum.hu>

My Antlr grammar I'm migrating to Antlr 3 heavily uses lexical states, 
that is, the Lexer has lots of semantic predicates to distinguish 
between alternatives like this
STRING: {inState(States.NORMAL)}? LETTER+
SPECIAL_STRING: {inState(States.SPECIAL)}? LETTER+

The states are set during the parse process, like this
special_handling: "\special" { setState(States.SPECIAL); } SPECIAL_STRING;

It worked perfectly well in Anltr 2. However, now I'm a bit afraid that 
the Antlr 3 style lexing will make this not work.

What do you think?

Thank you,

Bertalan Fodor

-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu


From sunshine at public.kherson.ua  Fri Jan 25 03:21:09 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Fri, 25 Jan 2008 13:21:09 +0200
Subject: [antlr-interest] ANTLRWorks debugger error  " code too large"
Message-ID: <C3BF92C5.8B9DC%sunshine@public.kherson.ua>

Hi All,

I have cleanup SQL grammar so
    it not show errors,
    it is compiled by ANTRL,

    ANTRL works debugger is able compile it also

But then show this error:

[13:15:41] /tmp/antlrworks/VSQL_ParserParser.java:15: code too large
[13:15:41]     public static final String[] tokenNames = new String[] {
[13:15:41]                                  ^
[13:15:41] 1 error


How to fix this ?

I already have assign 750Mb to ANTLRWorks



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From sunshine at public.kherson.ua  Fri Jan 25 04:03:45 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Fri, 25 Jan 2008 14:03:45 +0200
Subject: [antlr-interest] [ANTLRWorks][Bug?]
Message-ID: <C3BF9CC1.8B9EE%sunshine@public.kherson.ua>

Hi Jean,

I have meet strange glitch in the Interpreter, I think it is bug.

Steps to reproduce:
-----------------------

* Copy paste this tiny grammar into  VSQL_Parser.g text file

grammar VSQL_Parser;

options 
{
    k        = 2; 
    output    = AST;
}

sql
    :    'create' 'table' IDENT EOF
    ;

fragment
DIGIT   : ('0'..'9');

fragment
LETTER     : 'a'..'z';

IDENT    : ( LETTER | '_' ) ( LETTER | '_' | DIGIT )* ;



* open this grammar in the AW,
* go to Interpreter panel

* specify as input         create table tt
* click button RUN,  works fine. We see expected diagram.

now

* specify as input         create table t
* click button RUN,  Errors in the console about NULL exception.

As far as I see IDENT Lexer rule is correct. So why interpreter failes with
single character IDENT ???



-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From sunshine at public.kherson.ua  Fri Jan 25 04:31:14 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Fri, 25 Jan 2008 14:31:14 +0200
Subject: [antlr-interest] [ANTLRWorks][Bug?]
In-Reply-To: <C3BF9CC1.8B9EE%sunshine@public.kherson.ua>
Message-ID: <C3BFA332.8B9F8%sunshine@public.kherson.ua>

On 25/1/08 2:03 PM, "Ruslan Zasukhin" <sunshine at public.kherson.ua> wrote:

Hi Jean,

Aha, so I have test this on 1.1.5 release,
And here it works well,

So 2 issues in the 1.1.6 build you have sent me:

    * this on char issue
    * diagrams in the interpreter are FLAT.

 
> I have meet strange glitch in the Interpreter, I think it is bug.
> 
> Steps to reproduce:
> -----------------------
> 
> * Copy paste this tiny grammar into  VSQL_Parser.g text file
> 
> grammar VSQL_Parser;
> 
> options 
> {
>     k        = 2;
>     output    = AST;
> }
> 
> sql
>     :    'create' 'table' IDENT EOF
>     ;
> 
> fragment
> DIGIT   : ('0'..'9');
> 
> fragment
> LETTER     : 'a'..'z';
> 
> IDENT    : ( LETTER | '_' ) ( LETTER | '_' | DIGIT )* ;
> 
> 
> 
> * open this grammar in the AW,
> * go to Interpreter panel
> 
> * specify as input         create table tt
> * click button RUN,  works fine. We see expected diagram.
> 
> now
> 
> * specify as input         create table t
> * click button RUN,  Errors in the console about NULL exception.
> 
> As far as I see IDENT Lexer rule is correct. So why interpreter failes with
> single character IDENT ???
> 
> 

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From sunshine at public.kherson.ua  Fri Jan 25 04:36:40 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Fri, 25 Jan 2008 14:36:40 +0200
Subject: [antlr-interest] [ANTLRWorks] Why Interpreter show token! Tokens ?
Message-ID: <C3BFA478.8B9FE%sunshine@public.kherson.ua>

Hi Jean.

Assume in your expr.g  example we change it as

    |   '('! e=expr ')'! {$value = $e.value;}
    

Interpreter still show these 2 tokens.
I wonder why? As for me I should not see them on diagram.
Or at least this can be implemented as 2 ways prefs


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From sunshine at public.kherson.ua  Fri Jan 25 04:52:02 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Fri, 25 Jan 2008 14:52:02 +0200
Subject: [antlr-interest] ANTLRWorks debugger error  " code too large"
In-Reply-To: <C3BF92C5.8B9DC%sunshine@public.kherson.ua>
Message-ID: <C3BFA812.8BA0A%sunshine@public.kherson.ua>

On 25/1/08 1:21 PM, "Ruslan Zasukhin" <sunshine at public.kherson.ua> wrote:

> Hi All,
> 
> I have cleanup SQL grammar so
>     it not show errors,
>     it is compiled by ANTRL,
> 
>     ANTRL works debugger is able compile it also
> 
> But then show this error:
> 
> [13:15:41] /tmp/antlrworks/VSQL_ParserParser.java:15: code too large
> [13:15:41]     public static final String[] tokenNames = new String[] {
> [13:15:41]                                  ^
> [13:15:41] 1 error
> 
> 
> How to fix this ?
> 
> I already have assign 750Mb to ANTLRWorks

I have found on this list letter from Terrence, about

    -Xnoinlinedfa

I have try put this into

    Prefs -> General -> ANTLR Optiions

DO NOT HELPS.

ANTLRWorks debugger ignores this I think.

So how to make it working ??? :-)

Wait for 3.1 where debugger will be able work with C target?


-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From discontinuum at gmail.com  Fri Jan 25 05:29:32 2008
From: discontinuum at gmail.com (=?UTF-8?Q?Erik_Kratochv=C3=ADl?=)
Date: Fri, 25 Jan 2008 14:29:32 +0100
Subject: [antlr-interest] tokenVocab option leads to incomplete DFA in
	lexer
Message-ID: <f4dc39b90801250529g454bb65erbe3a102bb8b81b11@mail.gmail.com>

Finally, I have found a way to fool the grammar generator, although this page
http://www.antlr.org/wiki/display/ANTLR3/Migrating+from+ANTLR+2+to+ANTLR+3
states that it is not be possible to assign token types to certain literals
("Apparently, 'testLiterals' on tokens is no longer allowed (it is now
unnecessary)." )
and comments in the org.antlr.tool.AssignTokenTypesWalker.java claim that
  // if lexer, don't allow aliasing in tokens section


If you create Basic.tokens file that contains these lines

  DEFINE=101
  DECLARE=102

and then, in E.g (in the lexer grammar) you create a special lexer
rule for selected literals like this

  DECLARE: 'declare';
  DEFINE: 'define';

everything will work :)



The whole grammar:

grammar E;

options {
  tokenVocab = Basic;
  output = AST;
  ASTLabelType = CommonTree;
}

program  : ( statement )+   ;

statement
  : DEFINE ID '=' INT ';'
  | DECLARE ID ';'
  ;

DECLARE : 'declare';
DEFINE : 'define';

ID   : ('a'..'z'|'A'..'Z')+ ;
INT  : '0'..'9'+  ;
WS  : ( '\n' | '\r' | ' ' | '\t' )+    { $channel = HIDDEN; }  ;


The only drawback is that you have to use DECLARE instead of 'declare'
in the parser grammar
(but this may also be perceived as an advantage because if you
misspell DECLARE antlr.Tool will detect it).

The generated E.tokens file contains correct values

  DEFINE=101
  INT=104
  WS=105
  DECLARE=102
  ID=103
  '='=106
  ';'=107

-- 
Erik Kratochv?l

From sunshine at public.kherson.ua  Fri Jan 25 07:27:38 2008
From: sunshine at public.kherson.ua (Ruslan Zasukhin)
Date: Fri, 25 Jan 2008 17:27:38 +0200
Subject: [antlr-interest] ANTLRWorks debugger error " code too large"
In-Reply-To: <475086500801250407u793ab2e4kb28c431f4d6b5eaf@mail.gmail.com>
Message-ID: <C3BFCC8A.8BA54%sunshine@public.kherson.ua>

On 25/1/08 2:07 PM, "Thomas Vial" <tvial at octo.com> wrote:

Hi Thomas,

> I think you can safely remove tokenNames (and getTokenNames()) from the
> generated parser code. They are not used by the parser itself.

Hmm, but ANTLRWorks  self generate something behind scene.
Right?

How I can change that?
  
Note, that I not just develop Java-based grammar, but simple want to use
ANTLRWorks debugger with my grammar (that future going to be C-based)



> Thomas
> 
>  
> 2008/1/25, Ruslan Zasukhin <sunshine at public.kherson.ua>:
> Hi All,
> 
> I have cleanup SQL grammar so
>    it not show errors,
>    it is compiled by ANTRL,
> 
>    ANTRL works debugger is able compile it also
> 
> But then show this error:
> 
> [13:15:41] /tmp/antlrworks/VSQL_ParserParser.java:15: code too large
> [13:15:41]     public static final String[] tokenNames = new String[] {
> [13:15:41]                                  ^
> [13:15:41] 1 error
> 
> 
> How to fix this ?
> 
> I already have assign 750Mb to ANTLRWorks

-- 
Best regards,

Ruslan Zasukhin
VP Engineering and New Technology
Paradigma Software, Inc

Valentina - Joining Worlds of Information
http://www.paradigmasoft.com

[I feel the need: the need for speed]



From jimi at temporal-wave.com  Fri Jan 25 07:21:11 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 25 Jan 2008 07:21:11 -0800
Subject: [antlr-interest] Embedded Systems Parsing .....
In-Reply-To: <002f01c85f33$d753bfe0$0201a8c0@robtronix>
Message-ID: <"L8B61192B5C4D4a29870F8926B9BA87C7.1201275743.scalix.temporal-wave.com*"@MHS>

Not sure exactly what you are trying to do here, but I sounds like you
want to parse some languages using grammar generating the C target code,
then when you have parsed the language, you wish to make calls into a
pre-existing backend library (also in C) to generate target code for the
language?

 

This should be extremely simple. The fact that you are using C makes no
difference really to the way you construct the grammar and so on, but
once you have produced a tree for the parse, you walk it with an ANTLR
tree parser and either do semantic checking as you code generate or do a
semantic pass then a code generation pass (this can get as complicated
as you need of course).

 

In the code generation pass, you embed your calls to the C libraries.
The calls are just embedded function calls (try to keep the amount of
code you put in to the grammar to an absolute minimum ? function calls
and a few tracking structures in scopes perhaps.

 

Now, you may have meant that you want to parse the code, then use a
different library to generate the tree, this is done by a similar
process and you can either implement your own tree adaptor, tree nodes
and tree walkers or just embed calls in the parser rather than the tree
parser.

 

Getting started with real grammars is easiest with the ANTLR book,
though it is not strictly necessary. You should probably start by
reading the articles on the Wiki, then the docs for the C target API.
Also, download the examples tar/zip on the ANTLR download pages. In
there you will find the C sub directory which contains the example
grammars set up for working in C.

 

Finally, you could just contract it all out to me ;-)

 

Jim 

 

From: Mohammed Ibrahim Mohammed [mailto:snouto at gmail.com] 
Sent: Friday, January 25, 2008 1:22 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Embedded Systems Parsing .....

 

I need to generate parsers using antlr tool targetting some embedded
Systems based on specific backend C library for each target MCU , i need
antlr to use this C library to generate the parser codes ,  How can i do
that ????? and if there is any online tutorial for that please write it
down !!!!

 

 

 

snouto,


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080125/aaf4c4cf/attachment.html 

From jimi at temporal-wave.com  Fri Jan 25 07:34:58 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 25 Jan 2008 07:34:58 -0800
Subject: [antlr-interest] ANTLR 3 Lexical States
In-Reply-To: <4799B812.7050005@organum.hu>
Message-ID: <"LB7A25CB1158A43f080C14409338EA6D2.1201276573.scalix.temporal-wave.com*"@MHS>

It will be a lot more readable, and generate better code if you do this 
instead:

1) Create fragment rules for your tokens that have the same pattern. In 
fact you can just use the tokens {} section to create the token types, 
but then ANTLR will give you warnings that there is no token called XYZ 
when you try to use this type in the lexer. As I hate warnings, I use 
fragment tokens. You won't use them for matching (usually) so they don't 
actually have to match the pattern they represent, but it is probably 
good to document this if they don't!!

2) Use one pattern match for all the tokens that clash, then change the 
type according to the context:


fragment STRING 		: LETTERS 	;
fragment SPECIAL_STRING : LETTERS	;

STRINGS:
		LETTERS

			{
				switch (state)
				{
					case States.NORMAL:

							$type = STRING;
							Break;
				
					case States.SPECIAL:
							$type = SPECIAL_STRING;
...
				}	
			}
;


And so on.

Jim

> -----Original Message-----
> From: Bertalan Fodor (LilyPondTool) [mailto:lilypondtool at organum.hu]
> Sent: Friday, January 25, 2008 2:21 AM
> To: Antlr Interest
> Subject: [antlr-interest] ANTLR 3 Lexical States
> 
> My Antlr grammar I'm migrating to Antlr 3 heavily uses lexical states,
> that is, the Lexer has lots of semantic predicates to distinguish
> between alternatives like this
> STRING: {inState(States.NORMAL)}? LETTER+
> SPECIAL_STRING: {inState(States.SPECIAL)}? LETTER+
> 
> The states are set during the parse process, like this
> special_handling: "\special" { setState(States.SPECIAL); }
> SPECIAL_STRING;
> 
> It worked perfectly well in Anltr 2. However, now I'm a bit afraid 
that
> the Antlr 3 style lexing will make this not work.
> 
> What do you think?
> 
> Thank you,
> 
> Bertalan Fodor
> 
> --
> LilyPondTool is the editor for LilyPond files.
> See http://lilypondtool.organum.hu
> 



From jimi at temporal-wave.com  Fri Jan 25 07:44:49 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 25 Jan 2008 07:44:49 -0800
Subject: [antlr-interest] tokenVocab option leads to incomplete DFA in
	lexer
In-Reply-To: <f4dc39b90801250529g454bb65erbe3a102bb8b81b11@mail.gmail.com>
Message-ID: <"LACF55E23C84E40908F6B15116FE5C5DE.1201277162.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Erik Kratochv?l [mailto:discontinuum at gmail.com]
> Sent: Friday, January 25, 2008 5:30 AM
> 
> The only drawback is that you have to use DECLARE instead of 'declare'
> in the parser grammar


I strongly advocate doing this. I can't see any advantage of using 
'ssss' in the parser, only downsides <duck>.

Jim


From lilypondtool at organum.hu  Fri Jan 25 08:07:47 2008
From: lilypondtool at organum.hu (Bertalan Fodor (LilyPondTool))
Date: Fri, 25 Jan 2008 17:07:47 +0100
Subject: [antlr-interest] ANTLR 3 Lexical States
In-Reply-To: <"LB7A25CB1158A43f080C14409338EA6D2.1201276573.scalix.temporal-wave.com*"@MHS>
References: <"LB7A25CB1158A43f080C14409338EA6D2.1201276573.scalix.temporal-wave.com*"@MHS>
Message-ID: <479A0953.6070300@organum.hu>

Yes, that's a good idea, but that doesn't solve the problem that the 
state change must be done in the parser. So in the switch(state) 
statement the value of state is always NORMAL, because the lexing will 
be done first.
Now I'm thinking of the following possibilities:
- Harald M?ller's lexing parser - as I see currently it doesn't work 
with overlapping Lexer rules, like if in the example below STRING is 
'a'..'z' and SPECIAL_STRING is '<'|'a'
- David Holroyd's lazy token stream - with which I see the problem that 
it lazily loads the tokens from the source, but not from the source, so 
I may not be able to change the token type according to lexical state
- handling all lexer-state-pushing situations as recursively embedded 
island-grammars - the problem is that these islands actually can be 
infinitely embedded in each other.
- going back to Antlr 2
- writing the lexer with JFlex

I really don't want the last 2 possibilities, so I'm very curious if 
there is some good ways for my grammar.

Bert

Jim Idle wrote:
> It will be a lot more readable, and generate better code if you do this 
> instead:
>
> 1) Create fragment rules for your tokens that have the same pattern. In 
> fact you can just use the tokens {} section to create the token types, 
> but then ANTLR will give you warnings that there is no token called XYZ 
> when you try to use this type in the lexer. As I hate warnings, I use 
> fragment tokens. You won't use them for matching (usually) so they don't 
> actually have to match the pattern they represent, but it is probably 
> good to document this if they don't!!
>
> 2) Use one pattern match for all the tokens that clash, then change the 
> type according to the context:
>
>
> fragment STRING 		: LETTERS 	;
> fragment SPECIAL_STRING : LETTERS	;
>
> STRINGS:
> 		LETTERS
>
> 			{
> 				switch (state)
> 				{
> 					case States.NORMAL:
>
> 							$type = STRING;
> 							Break;
> 				
> 					case States.SPECIAL:
> 							$type = SPECIAL_STRING;
> ...
> 				}	
> 			}
> ;
>
>
> And so on.
>
> Jim
>
>   
>> -----Original Message-----
>> From: Bertalan Fodor (LilyPondTool) [mailto:lilypondtool at organum.hu]
>> Sent: Friday, January 25, 2008 2:21 AM
>> To: Antlr Interest
>> Subject: [antlr-interest] ANTLR 3 Lexical States
>>
>> My Antlr grammar I'm migrating to Antlr 3 heavily uses lexical states,
>> that is, the Lexer has lots of semantic predicates to distinguish
>> between alternatives like this
>> STRING: {inState(States.NORMAL)}? LETTER+
>> SPECIAL_STRING: {inState(States.SPECIAL)}? LETTER+
>>
>> The states are set during the parse process, like this
>> special_handling: "\special" { setState(States.SPECIAL); }
>> SPECIAL_STRING;
>>
>> It worked perfectly well in Anltr 2. However, now I'm a bit afraid 
>>     
> that
>   
>> the Antlr 3 style lexing will make this not work.
>>
>> What do you think?
>>
>> Thank you,
>>
>> Bertalan Fodor
>>
>> --
>> LilyPondTool is the editor for LilyPond files.
>> See http://lilypondtool.organum.hu
>>
>>     
>
>
>
>   


-- 
LilyPondTool is the editor for LilyPond files.
See http://lilypondtool.organum.hu

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080125/026030bb/attachment-0001.html 

From discontinuum at gmail.com  Fri Jan 25 08:09:16 2008
From: discontinuum at gmail.com (Erik Kratochvil)
Date: Fri, 25 Jan 2008 17:09:16 +0100
Subject: [antlr-interest] (...)+ rules do not throw NoViableAltException
Message-ID: <f4dc39b90801250809y187ca1d3q68160c4f89427a1c@mail.gmail.com>

Consider the following grammar

grammar E;

prog:   (stat)+ ;

stat:   'define' ID '=' INT ';'   |   'declare' ID ';'   ;

ID  :   ('a'..'z'|'A'..'Z')+ ;
INT :   '0'..'9'+ ;
WS  :   (' '|'\t'|'\n'|'\r')+ {skip();} ;


For the *prog* rule org.antlr.Tool E.g (antlr-3.0.1) gives

public final void prog() throws RecognitionException {
...
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==7||LA1_0==10) ) {
                    alt1=1;
                }

                switch (alt1) {
            	case 1 :
...
            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);
...
}



I think that the grammar generator should place an else clause right after

if ( (LA1_0==7||LA1_0==10) ) {
   alt1=1;
}

that throws NoViableAltException.


-- 
Erik Kratochvil

From jimi at temporal-wave.com  Fri Jan 25 10:11:44 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 25 Jan 2008 10:11:44 -0800
Subject: [antlr-interest] ANTLR 3 Lexical States
In-Reply-To: <479A0953.6070300@organum.hu>
Message-ID: <"LC7C7EB7FD2354047A1087B20F3526470.1201285979.scalix.temporal-wave.com*"@MHS>

Ah, well you didn?t say that you were controlling the state from the
parser ;-) ANTLR3 isn?t really designed to do that, and anyway there are
lots of potential problems with lookahead. Are you sure that you are not
trying to do too much in the lexer (I know, it worked in ANTLR2)?

 

Could you use STRING when the tokens can be the same, then inspect the
string in the parser and use gated predicates to select particular alts?
If your parser already knows that the next pattern ?a?..?z? should be
interpreted as a SPECIAL_STRING rather than STRING, then I am not sure
why you need to control the state of the lexer from the parser, but
perhaps the lexer would sometimes return two or more different tokens
rather than a dingle token.

 

Another option may be to derive your own class from CommonTokenStream
and have the LA (and possibly LT and LB methods) look at the state. When
it sees a STRING token (as in just get the lexer to match the base
patterns) and the parser says it is in state xyz, then change the token
type before it goes to the parser. Of course, you run into the issue of
lookahead and so on. It also would not work if the lexer would have
sometimes returned two tokens rather than one ?bigger? one.

 

Yet another possibility is embedded parsers/island grammars.

 

However, you should also check to see if your issue isn?t that you want
to match something like:

 

?ll? AND ?hh?

 

And for some reason want the same token set to match as different tokens
when it is really only semantically rather than syntactically different.
I assume that this is not your issue though. What is it you are trying
to parse?

 

Jim

 

 

From: Bertalan Fodor (LilyPondTool) [mailto:lilypondtool at organum.hu] 
Sent: Friday, January 25, 2008 8:08 AM
To: Jim Idle
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] ANTLR 3 Lexical States

 

Yes, that's a good idea, but that doesn't solve the problem that the
state change must be done in the parser. So in the switch(state)
statement the value of state is always NORMAL, because the lexing will
be done first. 
Now I'm thinking of the following possibilities:
- Harald M?ller's lexing parser - as I see currently it doesn't work
with overlapping Lexer rules, like if in the example below STRING is
'a'..'z' and SPECIAL_STRING is '<'|'a'
- David Holroyd's lazy token stream - with which I see the problem that
it lazily loads the tokens from the source, but not from the source, so
I may not be able to change the token type according to lexical state
- handling all lexer-state-pushing situations as recursively embedded
island-grammars - the problem is that these islands actually can be
infinitely embedded in each other.
- going back to Antlr 2
- writing the lexer with JFlex 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080125/c0050c34/attachment.html 

From lilypondtool at organum.hu  Fri Jan 25 12:06:23 2008
From: lilypondtool at organum.hu (Bertalan Fodor)
Date: Fri, 25 Jan 2008 21:06:23 +0100
Subject: [antlr-interest] ANTLR 3 Lexical States
Message-ID: <200801252106240000@1839221457>



> What is it you are trying
> to parse?
It is the LilyPond grammar.

I think this example will explain:

In 'initial' state the \w+ words mean variables, so if you read var, there should be a 'var' variable defined.
However, in an other state, let's call it 'markup' everything is allowed and interpreted as string literals: 
\markup { everything can go here, even +- and whatever 
In this mode you can switch to another mode with a command like this: \normalMode { var },  }

So lexical states can be nested.

I'm going to be afraid that antlr 3 won't really suit.

Bert

From lilypondtool at organum.hu  Fri Jan 25 12:54:39 2008
From: lilypondtool at organum.hu (lilypondtool at organum.hu)
Date: Fri, 25 Jan 2008 21:54:39 +0100
Subject: [antlr-interest] ANTLR 3 Lexical States
In-Reply-To: <200801252106240000@1839221457>
References: <200801252106240000@1839221457>
Message-ID: <20080125215439.02rqc4f1msk8kcsg@control.maxer.hu>

Or to answer myself: perhaps I'll try making an island grammar for all 
the possible lexical states.

Bert

Quoting Bertalan Fodor <lilypondtool at organum.hu>:

>
>
>> What is it you are trying
>> to parse?
> It is the LilyPond grammar.
>
> I think this example will explain:
>
> In 'initial' state the \w+ words mean variables, so if you read var, 
> there should be a 'var' variable defined.
> However, in an other state, let's call it 'markup' everything is 
> allowed and interpreted as string literals:
> \markup { everything can go here, even +- and whatever
> In this mode you can switch to another mode with a command like this: 
> \normalMode { var },  }
>
> So lexical states can be nested.
>
> I'm going to be afraid that antlr 3 won't really suit.
>
> Bert
>
>



From r.mark.volkmann at gmail.com  Fri Jan 25 13:01:07 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 25 Jan 2008 15:01:07 -0600
Subject: [antlr-interest] projects using ANTLR
In-Reply-To: <fn8895$23u$1@ger.gmane.org>
References: <f0fcc6820801230543x73913bfbv516e9b07cf6531a4@mail.gmail.com>
	<fn8895$23u$1@ger.gmane.org>
Message-ID: <f0fcc6820801251301g1740f6e5yc789c8bbe69a924e@mail.gmail.com>

On Jan 23, 2008 2:34 PM, Xue Yong Zhi <zhixueyong at hotmail.com> wrote:
> Mark Volkmann wrote:
> > Is there a web page somewhere that lists some projects that are using
> > ANTLR? I think JRuby and Groovy use ANTLR. I'd like to hear about
> > other somewhat well-known projects that are using it.
> >
>
> Here is a old post of mine:
> http://seclib.blogspot.com/2005/06/parser-generator-used-for-popular.html
>
> btw, JRuby does not use ANTLR.

Thanks for catching that!

So what general purpose programming languages have a
compiler/interpreter that uses ANTLR-generated code to parse their
source code? I only know of two at the moment, Groovy and XRuby. I
realize there are many examples of ANTLR usage for things other than
general purpose programming languages.

-- 
R. Mark Volkmann
Object Computing, Inc.

From parrt at cs.usfca.edu  Fri Jan 25 13:06:03 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 25 Jan 2008 13:06:03 -0800
Subject: [antlr-interest] projects using ANTLR
In-Reply-To: <f0fcc6820801251301g1740f6e5yc789c8bbe69a924e@mail.gmail.com>
References: <f0fcc6820801230543x73913bfbv516e9b07cf6531a4@mail.gmail.com>
	<fn8895$23u$1@ger.gmane.org>
	<f0fcc6820801251301g1740f6e5yc789c8bbe69a924e@mail.gmail.com>
Message-ID: <E52E14FD-9560-4FC9-A0B0-72F462076262@cs.usfca.edu>


On Jan 25, 2008, at 1:01 PM, Mark Volkmann wrote:

> On Jan 23, 2008 2:34 PM, Xue Yong Zhi <zhixueyong at hotmail.com> wrote:
>> Mark Volkmann wrote:
>>> Is there a web page somewhere that lists some projects that are  
>>> using
>>> ANTLR? I think JRuby and Groovy use ANTLR. I'd like to hear about
>>> other somewhat well-known projects that are using it.
>>>
>>
>> Here is a old post of mine:
>> http://seclib.blogspot.com/2005/06/parser-generator-used-for-popular.html
>>
>> btw, JRuby does not use ANTLR.
>
> Thanks for catching that!
>
> So what general purpose programming languages have a
> compiler/interpreter that uses ANTLR-generated code to parse their
> source code? I only know of two at the moment, Groovy and XRuby. I
> realize there are many examples of ANTLR usage for things other than
> general purpose programming languages.

http://www.linguamantra.org

Ter

From markwright at internode.on.net  Sat Jan 26 02:47:26 2008
From: markwright at internode.on.net (Mark Wright)
Date: Sat, 26 Jan 2008 21:47:26 +1100
Subject: [antlr-interest] Recommend a Document for TreeAdaptors?
In-Reply-To: <38a26f430801241257x7e2ee454sab4e15daf20b6b3b@mail.gmail.com>
References: <38a26f430801241257x7e2ee454sab4e15daf20b6b3b@mail.gmail.com>
Message-ID: <20080126214726.00004dc2@goanna>

On Thu, 24 Jan 2008 14:57:10 -0600
"Dejas Ninethousand" <dejas9000 at gmail.com> wrote:

> I have my first parse tree (default) horray!  Of course now I want to
> build parse trees

Hello Dejas,

I guess you mean Abstract Syntax Trees.

> using classes of my own design instead of relying
> on the default ITree implementation.  Poking around a bit I get the
> notion that this is done by providing a custom TreeAdaptor
> implementation; however, I am having trouble finding clear and
> expressive documentation on antlr.org related to custom tree
> construction.  Could anyone recommend a url that is more instructive
> on this topic?  Thanks.
> 
> -- Dejas

I guess I should ask which target are you using.

With the Java target an alternative approach is to ask
ANTLR to build tokens of your own class:

options {
        output=AST;
        TokenLabelType=MyToken;
        ASTLabelType=CommonTree;
}

// ...

@lexer::members {
    // ANTLR 3.0.1
    // public Token emit() {
    //     MyToken t = new MyToken(input, type, channel, tokenStartCharIndex, getCharIndex()-1);
    //     t.setLine(tokenStartLine);
    //     t.setText(text);
    //     t.setCharPositionInLine(tokenStartCharPositionInLine);
    //     emit(t);
    //     return t;
    // }

    // ANTLR 3.1 beta
    public Token emit() {
        Token t = new MyToken(input, state.type, state.channel, state.tokenStartCharIndex, getCharIndex()-1);
        t.setLine(state.tokenStartLine);
        t.setText(state.text);
        t.setCharPositionInLine(state.tokenStartCharPositionInLine);
        emit(t);
        return t;
    }
}

Then you can add your own field that can contain a pointer to
a class in your symbol table heirarchy:

public class MyToken extends CommonToken {
  protected Symbol symbol;

  public MyToken(CharStream input, int type, int channel, int start, int stop) {
    super(input, type, channel, start, stop);
    symbol = (Symbol)null;
  }

  public MyToken(int type, String text) {
    super(type, text);
    symbol = (Symbol)null;
  }

  public final Symbol getSymbol() {
    return symbol;
  }

  public void setSymbol(Symbol value) {
    symbol = value;
  }

}

With the C target Jim explained in an email a while ago
that there is a void* field already in the token struct
for this purpose.

Thanks, Mark

-- 

From open.zone at virgin.net  Sat Jan 26 04:30:02 2008
From: open.zone at virgin.net (Micheal J)
Date: Sat, 26 Jan 2008 12:30:02 -0000
Subject: [antlr-interest] projects using ANTLR
In-Reply-To: <f0fcc6820801251301g1740f6e5yc789c8bbe69a924e@mail.gmail.com>
References: <f0fcc6820801230543x73913bfbv516e9b07cf6531a4@mail.gmail.com><fn8895$23u$1@ger.gmane.org>
	<f0fcc6820801251301g1740f6e5yc789c8bbe69a924e@mail.gmail.com>
Message-ID: <004401c86017$2dd7a280$0200a8c0@marion>

> So what general purpose programming languages have a 
> compiler/interpreter that uses ANTLR-generated code to parse 
> their source code? I only know of two at the moment, Groovy 
> and XRuby. I realize there are many examples of ANTLR usage 
> for things other than general purpose programming languages.
> 
> --
> R. Mark Volkmann
> Object Computing, Inc.

IIRC, Boo and Nemerle both used ANTLR/C# v2.x at some point in their
history. Nemerle has since been rewritten in Nemerle. Not sure about Boo.
Both projects continue to use ANTLR for some tools in their toolchain.

Micheal


From gn at fluidon.dyndns.info  Sat Jan 26 12:23:36 2008
From: gn at fluidon.dyndns.info (Christian Gudrian)
Date: Sat, 26 Jan 2008 21:23:36 +0100
Subject: [antlr-interest] Problems with syntactic predicates(?)
Message-ID: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info>

Hello!

I want to write a grammar that matches equations like:

a=1
2=b
f_a(3)=4
5=f_b(6,7)
f_c(8,9)

This is my approach so far:

// -------------------------- 8< --------------------------

grammar test;

INT	:	( '0'..'9' )+ ;	
IDENT	:	( 'a'..'z' )+ ;
	
equation	
	:	( expression '=' ) => expression '=' expression
	|	function_call
	;

expression	
	:	( IDENT '(' ) => function_call
	|	INT
	|	IDENT
	;
	
function_call	
	:	IDENT '(' args? ')' ;
	
args	:	expression ( ',' expression )* ;

// ------------------------- >8 --------------------------

The ANTLRWorks debugger shows me, that the equation rule matches input  
of the form "a=1".  Everything involving function calls doesn't match,  
however; I get a NoViableAltException(0!=[null]) error in these  
cases.  I suspect it's my use of syntactic predicates which causes  
this behaviour, isn't it?  What's wrong?

Christian


From jimi at temporal-wave.com  Sat Jan 26 17:06:21 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 26 Jan 2008 17:06:21 -0800
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info>
Message-ID: <"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>

Look at the example grammars for how to set up for parsing expressions 
with precedence, you don't need those predicates but you do need to 
chain your rules correctly. Start by coding the primitives (the thigns 
that cannot break down further). You want something like

equations
	: equation* EOF
	;

equation
  : primary ('=' primary)?
  ;

primary
  : IDENT ('(' expression (',' expression)* ')')?
  | INT
  ;

INT	:	( '0'..'9' )+ ;
IDENT	:	( 'a'..'z' )+ ;
WS	:	(' ' | '\t' )+ { $channel = HIDDEN; } ;
NL	:	'\r'? '\n'	{ $channel = HIDDEN; } ;

You are trying to construct context/semantics in the parser, but it's 
job is to parse correct syntactical constructs only. After the parser 
you can apply context and semantics. For your grammar then you want to 
combine everything with common roots into one rule/alt and branch when 
tokens tell you that you must.

Jim

> -----Original Message-----
> From: Christian Gudrian [mailto:gn at fluidon.dyndns.info]
> Sent: Saturday, January 26, 2008 12:24 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Problems with syntactic predicates(?)
> 
> Hello!
> 
> I want to write a grammar that matches equations like:
> 
> a=1
> 2=b
> f_a(3)=4
> 5=f_b(6,7)
> f_c(8,9)
> 
> This is my approach so far:
> 
> // -------------------------- 8< --------------------------
> 
> grammar test;
> 
> INT	:	( '0'..'9' )+ ;
> IDENT	:	( 'a'..'z' )+ ;
> 
> equation
> 	:	( expression '=' ) => expression '=' expression
> 	|	function_call
> 	;
> 
> expression
> 	:	( IDENT '(' ) => function_call
> 	|	INT
> 	|	IDENT
> 	;
> 
> function_call
> 	:	IDENT '(' args? ')' ;
> 
> args	:	expression ( ',' expression )* ;
> 
> // ------------------------- >8 --------------------------
> 
> The ANTLRWorks debugger shows me, that the equation rule matches input
> of the form "a=1".  Everything involving function calls doesn't match,
> however; I get a NoViableAltException(0!=[null]) error in these
> cases.  I suspect it's my use of syntactic predicates which causes
> this behaviour, isn't it?  What's wrong?
> 
> Christian
> 



From r.mark.volkmann at gmail.com  Sat Jan 26 18:21:08 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Sat, 26 Jan 2008 20:21:08 -0600
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*@MHS>
References: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info>
	<LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*@MHS>
Message-ID: <f0fcc6820801261821xe1035dcm4064fccd6d601403@mail.gmail.com>

On Jan 26, 2008 7:06 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> Look at the example grammars for how to set up for parsing expressions
> with precedence, you don't need those predicates but you do need to
> chain your rules correctly. Start by coding the primitives (the thigns
> that cannot break down further). You want something like
>
> equations
>         : equation* EOF
>         ;
>
> equation
>   : primary ('=' primary)?
>   ;
>
> primary
>   : IDENT ('(' expression (',' expression)* ')')?
>   | INT
>   ;
>
> INT     :       ( '0'..'9' )+ ;
> IDENT   :       ( 'a'..'z' )+ ;
> WS      :       (' ' | '\t' )+ { $channel = HIDDEN; } ;
> NL      :       '\r'? '\n'      { $channel = HIDDEN; } ;
>
> You are trying to construct context/semantics in the parser, but it's
> job is to parse correct syntactical constructs only. After the parser
> you can apply context and semantics. For your grammar then you want to
> combine everything with common roots into one rule/alt and branch when
> tokens tell you that you must.

I like this approach much better.
One minor change is needed to parse the original input which contains
IDENT values containing underscores.

IDENT: ('a'..'z' | '_')+;

-- 
R. Mark Volkmann
Object Computing, Inc.

From gn at fluidon.dyndns.info  Sun Jan 27 02:03:49 2008
From: gn at fluidon.dyndns.info (Christian Gudrian)
Date: Sun, 27 Jan 2008 11:03:49 +0100
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>
References: <"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>
Message-ID: <E89EA98B-8C5C-40E3-BD21-C4773BF3109A@fluidon.dyndns.info>

Hello, Jim!

Thanks for your answer.

> Look at the example grammars for how to set up for parsing expressions
> with precedence, you don't need those predicates but you do need to
> chain your rules correctly.

My example was only a subset of the original grammar I am working on.   
Since that grammar is significantly larger (and works most of the time  
as expected) I would be glad if I didn't have to restructure it.

I'm particularly interested in why the parser fails to correctly parse  
the given input. If I step through the debugger of ANTLRWorks I can  
see that the parser not even tries to match the syntactic predicate.   
Why would it do so?

What's also strange: if I allow at most one expression as the function  
arguments, i.e.

function_call : IDENT '(' expression? ')' ;

everything works as expected.  Why?

> You are trying to construct context/semantics in the parser, but it's
> job is to parse correct syntactical constructs only.

Is there a definite line between what's already context/semantics and  
what's still syntax?  Don't you define a language's syntax by  
specifying the context a given symbol or token is allowed to show up?

Christian

From markwright at internode.on.net  Sun Jan 27 03:30:08 2008
From: markwright at internode.on.net (Mark Wright)
Date: Sun, 27 Jan 2008 22:30:08 +1100
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>
References: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info>
	<"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>
Message-ID: <20080127223008.00006ff7@goanna>

On Sat, 26 Jan 2008 17:06:21 -0800
"Jim Idle" <jimi at temporal-wave.com> wrote:

> Look at the example grammars for how to set up for parsing
> expressions with precedence, you don't need those predicates but you
> do need to chain your rules correctly. Start by coding the primitives
> (the thigns that cannot break down further). You want something like
> 
> equations
> 	: equation* EOF
> 	;
> 
> equation
>   : primary ('=' primary)?
>   ;
> 
> primary
>   : IDENT ('(' expression (',' expression)* ')')?
>   | INT
>   ;
> 
> INT	:	( '0'..'9' )+ ;
> IDENT	:	( 'a'..'z' )+ ;
> WS	:	(' ' | '\t' )+ { $channel = HIDDEN; } ;
> NL	:	'\r'? '\n'	{ $channel = HIDDEN; } ;

Hello Jim,

I agree with Jim's approach here.
 
> You are trying to construct context/semantics in the parser, but it's 
> job is to parse correct syntactical constructs only. After the parser 
> you can apply context and semantics.

You can construct context/semantics in the parser with the
left factoring you are suggesting:

grammar test;

options {
        output=AST;
        TokenLabelType=CommonToken;
        ASTLabelType=CommonTree;
}

tokens {
  FUNCTION_CALL;
}

equations
        :   equation* EOF
        ;

equation
        :   (left=expression -> expression) ('=' right=expression -> ^('=' $left $right))?
        ;

expression
        :   (t=IDENT -> IDENT) (function_call[$t] -> function_call)?
        |   INT
        ;

function_call[CommonToken t]
        : '(' expression (',' expression)* ')'
                -> ^(FUNCTION_CALL {$t} expression+)
        ;

INT 	:	( '0'..'9' )+ ;
IDENT	:	( 'a'..'z' )+ ;
WS	    :	(' ' | '\t' )+ { $channel = HIDDEN; } ;
NL	    :	'\r'? '\n'	{ $channel = HIDDEN; } ;

Thanks, Mark

> For your grammar then you want
> to combine everything with common roots into one rule/alt and branch
> when tokens tell you that you must.
> 
> Jim
> 
> > -----Original Message-----
> > From: Christian Gudrian [mailto:gn at fluidon.dyndns.info]
> > Sent: Saturday, January 26, 2008 12:24 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Problems with syntactic predicates(?)
> > 
> > Hello!
> > 
> > I want to write a grammar that matches equations like:
> > 
> > a=1
> > 2=b
> > f_a(3)=4
> > 5=f_b(6,7)
> > f_c(8,9)
> > 
> > This is my approach so far:
> > 
> > // -------------------------- 8< --------------------------
> > 
> > grammar test;
> > 
> > INT	:	( '0'..'9' )+ ;
> > IDENT	:	( 'a'..'z' )+ ;
> > 
> > equation
> > 	:	( expression '=' ) => expression '=' expression
> > 	|	function_call
> > 	;
> > 
> > expression
> > 	:	( IDENT '(' ) => function_call
> > 	|	INT
> > 	|	IDENT
> > 	;
> > 
> > function_call
> > 	:	IDENT '(' args? ')' ;
> > 
> > args	:	expression ( ',' expression )* ;
> > 
> > // ------------------------- >8 --------------------------
> > 
> > The ANTLRWorks debugger shows me, that the equation rule matches
> > input of the form "a=1".  Everything involving function calls
> > doesn't match, however; I get a NoViableAltException(0!=[null])
> > error in these cases.  I suspect it's my use of syntactic
> > predicates which causes this behaviour, isn't it?  What's wrong?
> > 
> > Christian
> > 
> 


-- 

From rhein at fim.uni-passau.de  Sun Jan 27 03:51:40 2008
From: rhein at fim.uni-passau.de (Alexander von Rhein)
Date: Sun, 27 Jan 2008 12:51:40 +0100
Subject: [antlr-interest] C# grammar for AST Generation
Message-ID: <479C704C.7090506@fim.uni-passau.de>

Hi,

i have to use a AST Generator for C# source codes for my bachelor thesis.
My idea was to generate one with ANTLR (target language should be Java).
The problem is that i could not get hold of any functional C# Grammar so far.
There are some in the Grammar repository but they do not work with ANTLRv3 (tried to convert them too).

If i try to correct the Grammars myself it will probably get even worse ;)

Do you have any tips for me where i can get a functional Grammar?
Or any better solution?

Thanks so far,

Alexander

From ssiegel at finjan.com  Sun Jan 27 05:02:39 2008
From: ssiegel at finjan.com (Shmuel Siegel)
Date: Sun, 27 Jan 2008 15:02:39 +0200
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <20080127223008.00006ff7@goanna>
References: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info><"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>
	<20080127223008.00006ff7@goanna>
Message-ID: <50DD80D1E881B649AAD30E0FFEED435813DDD7@exmail1.finjan.com>

The question at hand isn't how to write the grammar; we all agree that
it is better to avoid predicates. The question is "why is the original
grammar failing?" As far as I can tell, the DFA predictor is getting
confused by the recursion in "args". If I make args depend on IDENTs
only, I can get the grammar to work (that is, it parses boo(a,b)).

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mark Wright
Sent: Sunday, January 27, 2008 1:30 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Problems with syntactic predicates(?)

On Sat, 26 Jan 2008 17:06:21 -0800
"Jim Idle" <jimi at temporal-wave.com> wrote:

> Look at the example grammars for how to set up for parsing
> expressions with precedence, you don't need those predicates but you
> do need to chain your rules correctly. Start by coding the primitives
> (the thigns that cannot break down further). You want something like
> 
> equations
> 	: equation* EOF
> 	;
> 
> equation
>   : primary ('=' primary)?
>   ;
> 
> primary
>   : IDENT ('(' expression (',' expression)* ')')?
>   | INT
>   ;
> 
> INT	:	( '0'..'9' )+ ;
> IDENT	:	( 'a'..'z' )+ ;
> WS	:	(' ' | '\t' )+ { $channel = HIDDEN; } ;
> NL	:	'\r'? '\n'	{ $channel = HIDDEN; } ;

Hello Jim,

I agree with Jim's approach here.
 
> You are trying to construct context/semantics in the parser, but it's 
> job is to parse correct syntactical constructs only. After the parser 
> you can apply context and semantics.

You can construct context/semantics in the parser with the
left factoring you are suggesting:

grammar test;

options {
        output=AST;
        TokenLabelType=CommonToken;
        ASTLabelType=CommonTree;
}

tokens {
  FUNCTION_CALL;
}

equations
        :   equation* EOF
        ;

equation
        :   (left=expression -> expression) ('=' right=expression ->
^('=' $left $right))?
        ;

expression
        :   (t=IDENT -> IDENT) (function_call[$t] -> function_call)?
        |   INT
        ;

function_call[CommonToken t]
        : '(' expression (',' expression)* ')'
                -> ^(FUNCTION_CALL {$t} expression+)
        ;

INT 	:	( '0'..'9' )+ ;
IDENT	:	( 'a'..'z' )+ ;
WS	    :	(' ' | '\t' )+ { $channel = HIDDEN; } ;
NL	    :	'\r'? '\n'	{ $channel = HIDDEN; } ;

Thanks, Mark

> For your grammar then you want
> to combine everything with common roots into one rule/alt and branch
> when tokens tell you that you must.
> 
> Jim
> 
> > -----Original Message-----
> > From: Christian Gudrian [mailto:gn at fluidon.dyndns.info]
> > Sent: Saturday, January 26, 2008 12:24 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Problems with syntactic predicates(?)
> > 
> > Hello!
> > 
> > I want to write a grammar that matches equations like:
> > 
> > a=1
> > 2=b
> > f_a(3)=4
> > 5=f_b(6,7)
> > f_c(8,9)
> > 
> > This is my approach so far:
> > 
> > // -------------------------- 8< --------------------------
> > 
> > grammar test;
> > 
> > INT	:	( '0'..'9' )+ ;
> > IDENT	:	( 'a'..'z' )+ ;
> > 
> > equation
> > 	:	( expression '=' ) => expression '=' expression
> > 	|	function_call
> > 	;
> > 
> > expression
> > 	:	( IDENT '(' ) => function_call
> > 	|	INT
> > 	|	IDENT
> > 	;
> > 
> > function_call
> > 	:	IDENT '(' args? ')' ;
> > 
> > args	:	expression ( ',' expression )* ;
> > 
> > // ------------------------- >8 --------------------------
> > 
> > The ANTLRWorks debugger shows me, that the equation rule matches
> > input of the form "a=1".  Everything involving function calls
> > doesn't match, however; I get a NoViableAltException(0!=[null])
> > error in these cases.  I suspect it's my use of syntactic
> > predicates which causes this behaviour, isn't it?  What's wrong?
> > 
> > Christian
> > 
> 


-- 


From tirelli at post.com  Sun Jan 27 05:14:23 2008
From: tirelli at post.com (Edson Tirelli)
Date: Sun, 27 Jan 2008 11:14:23 -0200
Subject: [antlr-interest] Anyone has a LISP ANTLR3 grammar and can con
	tribute it to Drools?
In-Reply-To: <200801240944.54067.rschulz@sonic.net>
References: <96AD91D781CCD511A66000B0D0D15C49043DADB2@EXSVR1>
	<200801240944.54067.rschulz@sonic.net>
Message-ID: <e6dd5ba30801270514k7181abf9u5164d716ed2a0e34@mail.gmail.com>

    Randall,

    Thanks for the tips. I found a BNF grammar in a book I have. We will try
to implement the parser using that grammar as a basis.
    For maintainability purposes (you know how open source projects are), we
prefer to use a parser generator instead of manually building a parser, but
I guess you are right... it could be done manually.

    Thanks,
       Edson

2008/1/24, Randall R Schulz <rschulz at sonic.net>:
>
> On Thursday 24 January 2008 06:40, Stuart Watt wrote:
> > Yes, CL is definitely the way to go.
> >
> > However, with Lisp, the easy stuff is:
> >
> > expression =
> >   '(' expression* ('.' expression)? ')'
>
> Shouldn't that be:
>
>   '(' expression+ ('.' expression)? ')'
>
>
> Otherwise you'll accept invalid S-Expressions like this:
>
>   ( . foo )
>
>
> Also, I think you'll need lexeme and grammar productions to handle quote
> (the apostrophe reader macro, not the (quote ...) form) and back-quote,
> at a minimum.
>
>
> I've written a pretty complete Common Lisp reader and printer library
> with lists (cons cells), vectors, the full complement of numeric
> representations, reader macros and a read-table. The input side is
> quite complete (up to the aspects that require an evaluator), while the
> printer is somewhat less so.
>
> I wrote it all "by hand," with no parser generator support. This seems
> reasonable for Lisp in ways it would not be for most any other
> language.
>
>
> > ...
>
>
> Randall Schulz
>



-- 
  Edson Tirelli
  JBoss Drools Core Development
  Office: +55 11 3529-6000
  Mobile: +55 11 9287-5646
  JBoss, a division of Red Hat @ www.jboss.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080127/775d5b67/attachment-0001.html 

From gn at fluidon.dyndns.info  Sun Jan 27 13:13:14 2008
From: gn at fluidon.dyndns.info (Christian Gudrian)
Date: Sun, 27 Jan 2008 22:13:14 +0100
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <50DD80D1E881B649AAD30E0FFEED435813DDD7@exmail1.finjan.com>
References: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info><"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>
	<20080127223008.00006ff7@goanna>
	<50DD80D1E881B649AAD30E0FFEED435813DDD7@exmail1.finjan.com>
Message-ID: <5DFB94D7-5781-444D-A763-2D524CDD4C58@fluidon.dyndns.info>


Hello!

> As far as I can tell, the DFA predictor is getting
> confused by the recursion in "args".

Seemingly, yes.  If I only allow none or one function argument the  
parser correctly matches the given input.

My question now is (apart from bad design and other considerations):  
is my original grammar /supposed/ to make ANTLR create a parser that  
matches my desired input in the first place?

Christian

From jimi at temporal-wave.com  Sun Jan 27 13:28:04 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 27 Jan 2008 13:28:04 -0800
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <E89EA98B-8C5C-40E3-BD21-C4773BF3109A@fluidon.dyndns.info>
Message-ID: <"L10C4CB12D7EF4e5f8C6434D2FC485767.1201470583.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Christian Gudrian [mailto:gn at fluidon.dyndns.info]
> Sent: Sunday, January 27, 2008 2:04 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Problems with syntactic predicates(?)
> 
> Hello, Jim!
> 
> Thanks for your answer.
> 
> > Look at the example grammars for how to set up for parsing
> expressions
> > with precedence, you don't need those predicates but you do need to
> > chain your rules correctly.
> 
> My example was only a subset of the original grammar I am working on.
> Since that grammar is significantly larger (and works most of the time
> as expected) I would be glad if I didn't have to restructure it.

I am afraid that if that is a sample of how you have it right now, then 
you will be glad if you DO restructure it, as this is why it is going 
wrong :-(

Jim


From xverges at gmail.com  Sun Jan 27 14:37:05 2008
From: xverges at gmail.com (Xavier)
Date: Sun, 27 Jan 2008 23:37:05 +0100
Subject: [antlr-interest] Rewrite to templates broken?
Message-ID: <6cf1e0bb0801271437g524cae78tb1bdcc010c81b3fa@mail.gmail.com>

I'm getting a different outcome from a rewrite rule and action that I
would expect to do the same.

Am I missing something, or did I hit some bug?

options {
        language=CSharp;
        output=template;
        rewrite=true;
}
file:	line* EOF;
	
line:	nonComment? comment? NewLine
		{
			Console.Out.WriteLine("[line]" + $text + "[/line]");
		}
		->template(out={$text}) "[line]<out>[/line]"


While stdout prints every line enclose by [line]...[/line],
the TokenRewriteStream only encloses every two lines.

I'm generating the code from antlrworks-1.1.5.jar

Thanks in advance.

-Xavier

From jaluber at gmx.de  Sun Jan 27 14:41:28 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Sun, 27 Jan 2008 23:41:28 +0100
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <50DD80D1E881B649AAD30E0FFEED435813DDD7@exmail1.finjan.com>
References: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info><"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>	<20080127223008.00006ff7@goanna>
	<50DD80D1E881B649AAD30E0FFEED435813DDD7@exmail1.finjan.com>
Message-ID: <479D0898.60301@gmx.de>

Shmuel Siegel schrieb:
> The question at hand isn't how to write the grammar; we all agree that
> it is better to avoid predicates. The question is "why is the original
> grammar failing?" As far as I can tell, the DFA predictor is getting
> confused by the recursion in "args". If I make args depend on IDENTs
> only, I can get the grammar to work (that is, it parses boo(a,b)).

Recursion is a strong clue to use backtracking here. But if that's worth 
it compared to the other approach?

Johannes

From gn at fluidon.dyndns.info  Sun Jan 27 14:41:39 2008
From: gn at fluidon.dyndns.info (Christian Gudrian)
Date: Sun, 27 Jan 2008 23:41:39 +0100
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <"L10C4CB12D7EF4e5f8C6434D2FC485767.1201470583.scalix.temporal-wave.com*"@MHS>
References: <"L10C4CB12D7EF4e5f8C6434D2FC485767.1201470583.scalix.temporal-wave.com*"@MHS>
Message-ID: <B27B60C4-6930-4B06-B85B-9348B199C051@fluidon.dyndns.info>

Hello!

> I am afraid that if that is a sample of how you have it right now,  
> then
> you will be glad if you DO restructure it, as this is why it is going
> wrong :-(

Well, then back to work!

Thanks for all the help.

Christian

From antlr-list at arizona-software.ch  Sun Jan 27 15:45:42 2008
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Sun, 27 Jan 2008 15:45:42 -0800
Subject: [antlr-interest] ANTLRWorks 1.1.6 released
Message-ID: <60988182-5171-44EF-9A30-82308182D2E2@arizona-software.ch>

Hi,

ANTLRWorks 1.1.6 is available and fixes the following:

Bug fix:
     [AW-127] - java.lang.IndexOutOfBoundsException when opening  
certain files on Linux
     [AW-129] - Extract rule doesn't respect properly ID boundaries
     [AW-131] - ANTLR Tool usage is displayed when a grammar file has  
not been saved
     [AW-132] - Most keyboard mapping doesn't work for the plugin  
version inside IntelliJ 7
     [AW-134] - Check grammar fails to report an alert to the user  
when there is an exception during analysis
     [AW-135] - Check grammar does not report errors and warnings in  
the early stage of analysis
     [AW-136] - Disable escape key when closing document because  
default behavior will close the alert by returning the
                code NO instead of CANCEL
     [AW-138] - Console output in debugger does not print out all the  
lines
     [AW-143] - Cannot export SD in bitmap format on Windows XP
     [AW-150] - Syntax diagram are not displayed properly for certain  
rules

Improvement:
     [AW-130] - Use Metal LAF by default on Linux
     [AW-133] - DOT path value by default could be "/usr/bin/dot"
     [AW-139] - Syntax diagram showing warnings/errors consume too  
much CPU
     [AW-140] - Number of warnings reported in editor does not reflect  
the actual number of warnings

Note that this version of ANTLRWorks ships with ANTLR 3.0.1. Once  
ANTLR 3.1 is available, ANTLRWorks will be updated.

Regards,

Jean

From jstpierre-antlr at mecheye.net  Sun Jan 27 15:48:08 2008
From: jstpierre-antlr at mecheye.net (ANTLR Mailing List)
Date: Sun, 27 Jan 2008 18:48:08 -0500
Subject: [antlr-interest] Token/TOKENS Rewrite Bug
Message-ID: <4ff3ab470801271548t7e40a344y208284d8a2177d2d@mail.gmail.com>

Hello there. I'm not sure if this has been fixed, but I have a simple
grammar that ANTLR (in 3.0 or some dev version) generates incorrectly in
Java. It's an easy manual fix, but I'd thought I'll let you know.

Here's my grammar, it's a simple variation of the Expr grammar:

grammar ExprTree;
options {
    // language=ActionScript;
    output=AST;
    ASTLabelType=CommonTree; // type of $stat.tree ref etc...
}

tokens {
    SET_VARIABLE = 'SetVariable';
    GET_VARIABLE = 'GetVariable';
    PUSH = 'Push';
    PLUS = '+';
    MINUS = '-';
    STAR = '*';
    SLASH = '/';
    PERCENT = '%';
}

prog:   ( stat { System.out.println ( $stat.tree.toStringTree ( ) ); } )+ ;

stat:   expr NEWLINE        -> expr
    |   ID '=' expr NEWLINE -> ^(ID expr SET_VARIABLE)
    |   NEWLINE             ->
    ;

expr:   v1=multExpr (op=(PLUS|MINUS) v2=multExpr)? -> ^($v1 ($v2 $op)?);

multExpr
    :   v1=atom (op=(STAR|SLASH|PERCENT) v2=atom)? -> ^($v1 ($v2 $op)?);

atom:   INT
    |   ID -> ^(ID GET_VARIABLE)
    |   '('! expr ')'!
    ;

ID  :   ('a'..'z'|'A'..'Z')+ ;
INT :   '0'..'9'+ ;
NEWLINE: ';' ;
WS  :   (' '|  '\t')+ { $channel=HIDDEN; } ;

The problem happens in expr and multExpr; the rewrite of $op. It gets caught
up in PLUS or MINUS (or STAR, SLASH or PERCENT) that it forgets to set op.
Inside the alternative switch statement that sets op, we have this:

switch (alt3) {
    case 1 :
    // ExprTree.g:25:26: PLUS
    {
        PLUS9=Token(input.LT(1));
        matchStream(input,PLUS,FOLLOW_PLUS_in_expr198);
        stream_PLUS.add(PLUS9);
    }
    break;
    case 2 :
    // ExprTree.g:25:31: MINUS
    {
        MINUS10=Token(input.LT(1));
        matchStream(input,MINUS,FOLLOW_MINUS_in_expr200);
        stream_MINUS.add(MINUS10);
   }
   break;
}

It sets PLUS9 and MINUS10 without setting op, but op is referenced when
doing the rewrite. The op is just a simple fix of setting op at the same
time it sets PLUS9 (or MINUS10).

Also, Terr, I am interested in developing the ActionScript target (I have
already talked to George Scott). What would I need to do to get my
credentials added?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080127/fe5ff253/attachment.html 

From jaluber at gmx.de  Sun Jan 27 16:20:20 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 28 Jan 2008 01:20:20 +0100
Subject: [antlr-interest] Token/TOKENS Rewrite Bug
In-Reply-To: <4ff3ab470801271548t7e40a344y208284d8a2177d2d@mail.gmail.com>
References: <4ff3ab470801271548t7e40a344y208284d8a2177d2d@mail.gmail.com>
Message-ID: <479D1FC4.2020705@gmx.de>

ANTLR Mailing List schrieb:
> Hello there. I'm not sure if this has been fixed, but I have a simple 
> grammar that ANTLR (in 3.0 or some dev version) generates incorrectly in 
> Java. It's an easy manual fix, but I'd thought I'll let you know.
> 
> Here's my grammar, it's a simple variation of the Expr grammar:
> 
...

This is already a known bug and hopefully Ter will finally fix it. But 
there is a workaround - extract the contents of the parentheses into an 
own rule.


Johannes

From xverges at gmail.com  Sun Jan 27 16:17:40 2008
From: xverges at gmail.com (Xavier)
Date: Mon, 28 Jan 2008 01:17:40 +0100
Subject: [antlr-interest] Rewrite to templates broken?
In-Reply-To: <6cf1e0bb0801271437g524cae78tb1bdcc010c81b3fa@mail.gmail.com>
References: <6cf1e0bb0801271437g524cae78tb1bdcc010c81b3fa@mail.gmail.com>
Message-ID: <6cf1e0bb0801271617g5b2746aajd306c08921d340c8@mail.gmail.com>

I'm able to avoid the effects mentioned in my earlier post by using

file:	(line NewLine)* line? EOF;

line:   nonComment? comment?
                {
                         Console.Out.WriteLine("[line]" + $text + "[/line]");
                 }
                 ->template(out={$text}) "[line]<out>[/line]"



On Jan 27, 2008 11:37 PM, Xavier <xverges at gmail.com> wrote:
> I'm getting a different outcome from a rewrite rule and action that I
> would expect to do the same.
>
> Am I missing something, or did I hit some bug?
>
> options {
>         language=CSharp;
>         output=template;
>         rewrite=true;
> }
> file:   line* EOF;
>
> line:   nonComment? comment? NewLine
>                 {
>                         Console.Out.WriteLine("[line]" + $text + "[/line]");
>                 }
>                 ->template(out={$text}) "[line]<out>[/line]"
>
>
> While stdout prints every line enclose by [line]...[/line],
> the TokenRewriteStream only encloses every two lines.
>
> I'm generating the code from antlrworks-1.1.5.jar
>
> Thanks in advance.
>
> -Xavier
>



-- 
-Xavier

From antlr at shmuelhome.mine.nu  Sun Jan 27 17:31:09 2008
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Mon, 28 Jan 2008 03:31:09 +0200
Subject: [antlr-interest] Problems with syntactic predicates(?)
In-Reply-To: <479D0898.60301@gmx.de>
References: <F7811A62-6DA3-4821-A6A9-A87AAF169AD3@fluidon.dyndns.info><"LCE2E390799C149c282CC0695592837BE.1201397261.scalix.temporal-wave.com*"@MHS>	<20080127223008.00006ff7@goanna>	<50DD80D1E881B649AAD30E0FFEED435813DDD7@exmail1.finjan.com>
	<479D0898.60301@gmx.de>
Message-ID: <479D305D.7020005@shmuelhome.mine.nu>

Whatever the problem is in 3.01, the current 3.1 build fixes it. The 
parsing works as expected.

Johannes Luber wrote:
> Shmuel Siegel schrieb:
>> The question at hand isn't how to write the grammar; we all agree that
>> it is better to avoid predicates. The question is "why is the original
>> grammar failing?" As far as I can tell, the DFA predictor is getting
>> confused by the recursion in "args". If I make args depend on IDENTs
>> only, I can get the grammar to work (that is, it parses boo(a,b)).
>
> Recursion is a strong clue to use backtracking here. But if that's 
> worth it compared to the other approach?
>
> Johannes



From jaluber at gmx.de  Mon Jan 28 07:23:41 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 28 Jan 2008 16:23:41 +0100
Subject: [antlr-interest] C# grammar for AST Generation
In-Reply-To: <479C704C.7090506@fim.uni-passau.de>
References: <479C704C.7090506@fim.uni-passau.de>
Message-ID: <479DF37D.7060608@gmx.de>

Alexander von Rhein schrieb:
> Hi,
> 
> i have to use a AST Generator for C# source codes for my bachelor thesis.
> My idea was to generate one with ANTLR (target language should be Java).
> The problem is that i could not get hold of any functional C# Grammar so 
> far.
> There are some in the Grammar repository but they do not work with 
> ANTLRv3 (tried to convert them too).
> 
> If i try to correct the Grammars myself it will probably get even worse ;)
> 
> Do you have any tips for me where i can get a functional Grammar?
> Or any better solution?
> 
> Thanks so far,
> 
> Alexander
> 

Well, for Java you can look at 
<http://deftproject.svn.sourceforge.net/viewvc/*checkout*/deftproject/depth/com.comarch.depth.antlrcsharp/CSharp.g?revision=41>, 
I believe. I have also a C# grammar but its target is C# and it isn't 
working in the moment, but if you are still interested, I can send it, too.

Johannes

From antlr at mirality.co.nz  Thu Jan 24 02:32:23 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 24 Jan 2008 23:32:23 +1300
Subject: [antlr-interest] target language independent action code
In-Reply-To: <9D7673E8-7F28-4DF4-83DD-D2B7CE26DFC1@classdump.org>
References: <20080120201433.XRCD5957.viefep16-int.chello.at@edge.upc.biz>
	<20080121132219.00006ea2@goanna>
	<20080121212749.CCPM6701.viefep34-int.chello.at@schnuftikus.gmx.at>
	<479510A0.8090502@gmx.de>
	<20080121214634.BXRB5957.viefep16-int.chello.at@edge.upc.biz>
	<47951ABF.8060905@gmx.de>
	<9D7673E8-7F28-4DF4-83DD-D2B7CE26DFC1@classdump.org>
Message-ID: <20080128175110.CE44F11EB23@www.antlr.org>

At 08:22 24/01/2008, Kay R?pke wrote:
 >
 >One common use-case is that you found a grammar 
in the antlr.org
 >grammar list, use that, some publishes a bug 
fix for that grammar
 >and you are left with your copy of it and the need to merge. In
 >most cases you have probably heavily modified 
the grammar already,
 >and if only with custom actions. Painful.

That's what three-way merge tools are 
for.  Compare a pristine copy of the original 
version you modified with both the new version 
provided and your modified version.  Merge 
changes from the second to the third.  Verify 
your unit tests.  Usually fairly straightforward, 
although it depends on how extensive the modifications are.


From antlr at mirality.co.nz  Thu Jan 24 02:27:43 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Thu, 24 Jan 2008 23:27:43 +1300
Subject: [antlr-interest] Parser inheriting from DebugParser instead of
 Parser
In-Reply-To: <38a26f430801231131n209fa03cp7b65da0a30f5c7bd@mail.gmail.co
 m>
References: <38a26f430801231131n209fa03cp7b65da0a30f5c7bd@mail.gmail.com>
Message-ID: <20080128175112.C226A11EB67@www.antlr.org>

At 08:31 24/01/2008, Dejas Ninethousand wrote:

>I was somehow able to place ANTLRWorks into a mode where its C# 
>generated parser class inherited from a class called DebugParser 
>instead of Parser.  However, now the program is back in a state 
>generating code that descends from Parser.  It appears descending 
>from DebugParser may have uncovered a bug in the MS C# complier, 
>so I am interested in generating the old version of the class 
>again (descending from DebugParser) but can't figure out how to 
>do it.  Does anyone know how this is done?

If you pass -debug to ANTLR when compiling your grammar, it will 
generate code with debugging hooks. 


From parrt at cs.usfca.edu  Mon Jan 28 11:55:17 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 28 Jan 2008 11:55:17 -0800
Subject: [antlr-interest] Token/TOKENS Rewrite Bug
In-Reply-To: <4ff3ab470801271548t7e40a344y208284d8a2177d2d@mail.gmail.com>
References: <4ff3ab470801271548t7e40a344y208284d8a2177d2d@mail.gmail.com>
Message-ID: <D401EAA1-6730-4323-9522-8CA245A06E08@cs.usfca.edu>


On Jan 27, 2008, at 3:48 PM, ANTLR Mailing List wrote:

> Hello there. I'm not sure if this has been fixed, but I have a  
> simple grammar that ANTLR (in 3.0 or some dev version) generates  
> incorrectly in Java. It's an easy manual fix, but I'd thought I'll  
> let you know.

...

yep, known.

http://www.antlr.org:8888/browse/ANTLR-162

> Also, Terr, I am interested in developing the ActionScript target (I  
> have already talked to George Scott). What would I need to do to get  
> my credentials added?

So George wants you to help on the project? If so, then all we need is  
a fact signature etc.

http://www.antlr.org/doc/ANTLR-contributor-agreement.pdf

Ter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080128/0473df9b/attachment.html 

From lefevrol at yahoo.com  Mon Jan 28 13:17:52 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Mon, 28 Jan 2008 22:17:52 +0100
Subject: [antlr-interest] question about variable assignment in grammars
Message-ID: <fnlgq5$72n$1@ger.gmane.org>

I am going through the book and looking at ExprEval.g.
I am puzzled by the use of auxiliary variable names in
the actions, i.e., under the expr and multExpr rules
we have these assignments to 'e' but under the stat
rule expr is "accessed" directly, as in '$expr.value'
Thus why couldn't we write, e.g., $atom.value?

Also, re. the atom rule, something that can correspond
to an entire expression (third option in the rule) does
not match my understanding of the word "atom", atomic
usually meaning "without a fine structure". Is it really
correct to use it here or is it a legerdemain?

Thanks,

-- O.L.


From jhvdven at xs4all.nl  Mon Jan 28 14:27:37 2008
From: jhvdven at xs4all.nl (Jan van der Ven)
Date: Mon, 28 Jan 2008 23:27:37 +0100
Subject: [antlr-interest] Dynamic token generation
Message-ID: <479E56D9.6010407@xs4all.nl>

Dear Antlr Community,


First of all, let me tell you that our SourceForge project is still 
using Antlr 2.7. We are not old-fashioned, we just do not have the time 
to cope with all the new versions of the splendid tools we are working with.

Having said that, my problem as described below, might force an upgrade 
and if required we will do so.

We are extending the QuantumDB eclipse plugin 
(http://sourceforge.net/projects/quantum) with grammar recognition 
capabilities. You can find the base grammar file here: 
http://quantum.cvs.sourceforge.net/quantum/quantum-plugin/src/com/quantum/core/sql/grammar/DmlSQL2.g?view=log. 
It is an adaptation of Mr Vnuk's DmlSQL2.g file. It is full of code. It 
handles only SQL-92. Any feedback on the file as it is will be 
appreciated, but the problem at hand is the following:

- Each database has its own set of keywords
- Each database has its own set of functions

Quantum uses a JDBC driver to connect to the specific database. Most 
drivers report a list of keywords and functions. I would like these to 
appear as tokens in the grammar. This means that a rule would refer to a 
token as a KEYWORD, but the KEYWORD should be defined at runtime. Is 
this possible?

Kind regards,


Jan




From jaluber at gmx.de  Mon Jan 28 14:37:25 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Mon, 28 Jan 2008 23:37:25 +0100
Subject: [antlr-interest] Dynamic token generation
In-Reply-To: <479E56D9.6010407@xs4all.nl>
References: <479E56D9.6010407@xs4all.nl>
Message-ID: <479E5925.2040005@gmx.de>

Jan van der Ven schrieb:
> Dear Antlr Community,
> ...
> Quantum uses a JDBC driver to connect to the specific database. Most 
> drivers report a list of keywords and functions. I would like these to 
> appear as tokens in the grammar. This means that a rule would refer to a 
> token as a KEYWORD, but the KEYWORD should be defined at runtime. Is 
> this possible?

At minimum, you have to know what keyword is allowed when. I suppose 
that is somewhere defined already. You can then use a generic token in 
place of the keywords and check dynamically, if the token text equals 
the required keyword. A possible implementation is (for C#):

contextual_keyword[string identifier]
	:	{ input.LT(1).Text == $identifier }? IDENTIFIER
	;

Johannes

From jaluber at gmx.de  Mon Jan 28 15:52:40 2008
From: jaluber at gmx.de (Johannes Luber)
Date: Tue, 29 Jan 2008 00:52:40 +0100
Subject: [antlr-interest] Rewrite to templates broken?
In-Reply-To: <6cf1e0bb0801271617g5b2746aajd306c08921d340c8@mail.gmail.com>
References: <6cf1e0bb0801271437g524cae78tb1bdcc010c81b3fa@mail.gmail.com>
	<6cf1e0bb0801271617g5b2746aajd306c08921d340c8@mail.gmail.com>
Message-ID: <479E6AC8.7000508@gmx.de>

Xavier schrieb:
> I'm able to avoid the effects mentioned in my earlier post by using
> 
> file:	(line NewLine)* line? EOF;
> 
> line:   nonComment? comment?
>                 {
>                          Console.Out.WriteLine("[line]" + $text + "[/line]");
>                  }
>                  ->template(out={$text}) "[line]<out>[/line]"
> 
> 

Could you please post - or send me directly - a complete grammar? 
Otherwise I can't test it.

Johannes

From oscar at perex.org  Mon Jan 28 23:57:15 2008
From: oscar at perex.org (=?ISO-8859-1?Q?Oscar_P=E9rez?=)
Date: Tue, 29 Jan 2008 01:57:15 -0600
Subject: [antlr-interest] Template for optional element
Message-ID: <f4c6db60801282357h48abe0f9tf0020e5ac4343e4@mail.gmail.com>

Hi.

I'm new in ANTLR.

I want to use a template for a rule like this:

func: ^( Func ID params* body ) -> func(name={$ID.text},
par={$params.st}, block={$body.st});

but if there aren't params in source text, then broken!!!

?How can I write a template for optional elements?

Tanks.

From r.mark.volkmann at gmail.com  Tue Jan 29 04:52:58 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 29 Jan 2008 06:52:58 -0600
Subject: [antlr-interest] question about variable assignment in grammars
In-Reply-To: <fnlgq5$72n$1@ger.gmane.org>
References: <fnlgq5$72n$1@ger.gmane.org>
Message-ID: <f0fcc6820801290452k500fc956udd8e9b544273082a@mail.gmail.com>

On Jan 28, 2008 3:17 PM, Olivier Lefevre <lefevrol at yahoo.com> wrote:
> I am going through the book and looking at ExprEval.g.

I assume you're talking about section 3.2.

> I am puzzled by the use of auxiliary variable names in
> the actions, i.e., under the expr and multExpr rules
> we have these assignments to 'e' but under the stat
> rule expr is "accessed" directly, as in '$expr.value'
> Thus why couldn't we write, e.g., $atom.value?

You can. In some cases it's just personal preference. However, if a
rule refers to another rule more than once then you need to use
variables to differentiate between the occurrences. You can see this
in the expr rule of Eval.g in section 3.3 where it uses the following.

: ^('+' a=expr b=expr) { $value = a + b; }

> Also, re. the atom rule, something that can correspond
> to an entire expression (third option in the rule) does
> not match my understanding of the word "atom", atomic
> usually meaning "without a fine structure". Is it really
> correct to use it here or is it a legerdemain?

I agree that it doesn't fit the definition of an atom. I'd never heard
the word "legerdemain" before. You caused me to look it up, so now I
know. ;-) "skillful use of one's hands when performing conjuring
tricks; deception; trickery"



-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Tue Jan 29 04:57:38 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Tue, 29 Jan 2008 06:57:38 -0600
Subject: [antlr-interest] Template for optional element
In-Reply-To: <f4c6db60801282357h48abe0f9tf0020e5ac4343e4@mail.gmail.com>
References: <f4c6db60801282357h48abe0f9tf0020e5ac4343e4@mail.gmail.com>
Message-ID: <f0fcc6820801290457v280261d1h1faaa920e0470729@mail.gmail.com>

On Jan 29, 2008 1:57 AM, Oscar P?rez <oscar at perex.org> wrote:
> Hi.
>
> I'm new in ANTLR.
>
> I want to use a template for a rule like this:
>
> func: ^( Func ID params* body ) -> func(name={$ID.text},
> par={$params.st}, block={$body.st});
>
> but if there aren't params in source text, then broken!!!
>
> ?How can I write a template for optional elements?

Does it solve the problem to use something like this in your template?

<if(params)><params><endif>

-- 
R. Mark Volkmann
Object Computing, Inc.

From asmith at moncons.co.uk  Tue Jan 29 05:00:51 2008
From: asmith at moncons.co.uk (Montebello)
Date: Tue, 29 Jan 2008 13:00:51 +0000
Subject: [antlr-interest] ANTLRWorks 1.1.6 released
In-Reply-To: <60988182-5171-44EF-9A30-82308182D2E2@arizona-software.ch>
References: <60988182-5171-44EF-9A30-82308182D2E2@arizona-software.ch>
Message-ID: <479F2383.4040704@moncons.co.uk>

Hi Jean,

I am afraid that something seems to have broken in AW debug between
1.1.5 and 1.1.6.

I had a grammar set up in 1.1.5 which would check, generate code,
compile and run in debug without any errors. I upgraded to 1.1.6 and now
the same setup of grammar and configuration of AW produces a compilation
error when the debugger is preparing itself for a run. (Checking and
generation are still OK via the menu icons). As a result the debugger
will not continue.

The error shown in the console is the standard "cannot find symbol"
shown when the classpath is wrong. This occurs when the debugger is
attempting to compile the _Test_.java file at the first reference in
this file (line 12 on my system) to the Parser produced by the combined
grammar. The error may result because the debugger compiler classpath
perhaps does not now include the "classes" subdirectory into which the
compiler files the results of compilation. After a failed attempt this
subdirectory does contain fresh class files resulting from the
compilation of the parser and lexer code by the debugger.

To check my attribution of the error, after a failed attempt to run the
debugger in 1.1.6 I immediately reverted to 1.1.5 and with no other
changes the run was normal once more.

Can you look into this please as it makes 1.1.6 unusable for debugging.

Thanks for your efforts,

Andrew Smith

From nik9000 at gmail.com  Tue Jan 29 05:02:15 2008
From: nik9000 at gmail.com (Nikolas Everett)
Date: Tue, 29 Jan 2008 08:02:15 -0500
Subject: [antlr-interest] Generating initializers and headers
Message-ID: <d4e11e980801290502n6b26c936g5185ce1f1751325c@mail.gmail.com>

I've been puzzling over this for a few days, and haven't thought of anything
useful, so I figured I'd ask the group.

I'm looking to generate C code from antlr/stringtemplate.  I'd like to
generate methods in a .c file, method signatures in a .h file, and probably
some sort of initialization method in the .c file.  My problem is that any
part of the AST could generate code in any of those 3 places.  What is the
normal way to handle this?

I have been using an OutputStream that can recognize escape sequences to
change which file its writing to.  This lets me write 1 template per
construction of the form
methodDef(name, stuff...) ::= <<
stream <name>.c:
  blah blah blah
stream <name>.h:
  extern blah blah blah
stream <name>Initializer.c:
  metadata goes here

This gets the job done, but doesn't feel all that elegant so its probably
not the right way to do it.

--Nik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080129/1bbc9232/attachment.html 

From lefevrol at yahoo.com  Tue Jan 29 07:24:48 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Tue, 29 Jan 2008 16:24:48 +0100
Subject: [antlr-interest] question about variable assignment in grammars
In-Reply-To: <f0fcc6820801290452k500fc956udd8e9b544273082a@mail.gmail.com>
References: <fnlgq5$72n$1@ger.gmane.org>
	<f0fcc6820801290452k500fc956udd8e9b544273082a@mail.gmail.com>
Message-ID: <fnngg6$8gc$1@ger.gmane.org>

> You can. In some cases it's just personal preference. However, if
> a rule refers to another rule more than once then you need to use
> variables to differentiate between the occurrences. 

OK.

> I agree that it doesn't fit the definition of an atom. I'd never heard
> the word "legerdemain" before. You caused me to look it up, so now I
> know. ;-) "skillful use of one's hands when performing conjuring
> tricks; deception; trickery"

Look up "cavalier" as well ;-) I meant it here in a linguistic sense,
as in: "an abuse of language".

-- O.L.


From jan.sture.nielsen at gmail.com  Tue Jan 29 10:11:47 2008
From: jan.sture.nielsen at gmail.com (Jan Nielsen)
Date: Tue, 29 Jan 2008 11:11:47 -0700
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <47959e30.1781420a.5044.fffffcdeSMTPIN_ADDED@mx.google.com>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
	<4794f4b4.26b5420a.1486.2f54SMTPIN_ADDED@mx.google.com>
	<f79c7d4d0801212225i5f0c6db7qbac8fca5380d41d9@mail.gmail.com>
	<47959e30.1781420a.5044.fffffcdeSMTPIN_ADDED@mx.google.com>
Message-ID: <f79c7d4d0801291011i29c0e3e7k5b06f80676431287@mail.gmail.com>

So I rewrote the grammar with return values after implementing the
underlying APIs. I'm still having some basic issues with recognition,
however. I think the excludeClause and includeClause lists are not
being handled correctly - perhaps because of the comma?

I have included my test cases and grammar below. If you have any
insights about what I've done wrong, I'd be delighted to entertain
them. :)

Many thanks,

-Jan


test cases and std & stderr output:

available 1/January/2008
available 1/January/2008 to 1/January/2009
available 1/January/2008 to 1/January/2009, exclude 1/January/2008
available 1/January/2008 to 1/January/2009, exclude 21/January/2008
available 1/January/2008 to 1/January/2009, exclude Thursday to Sunday
available 1/January/2008 to 1/January/2009, exclude Monday, Wednesday, Friday
available 1/January/2008 to 1/January/2009, exclude Thursday(fourth)/November
available 1/January/2008 to 1/January/2009, exclude Thursday to
Sunday, include June to July
available 1/January/2008 to 1/January/2009, exclude Monday to
Thursday, include 21/January/2008
available 1/January/2008 to 1/January/2009, exclude
Tuesday(first)/November, Monday, 1/November/2008, include
Monday(third)/January, 12/February, 1/January
line 1:80 no viable alternative at input 'June'
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
BR.recoverFromMismatchedToken
available 1/January/2008, exclude Monday(last)/May
available 1/January, exclude 1/January
available 1/January, exclude 21/January
line 1:19 mismatched input ',' expecting '/'
available 1/January, exclude Thursday to Sunday
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
available 1/January, exclude Thursday to Sunday, include
Thursday(fourth)/November to Sunday(fourth)/November
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
available 1/January, exclude Monday, Wednesday,
FridayBR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
line 1:57 no viable alternative at input 'June'
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'
BR.recoverFromMismatchedToken
line 1:19 mismatched input ',' expecting '/'

available 1/January, exclude Thursday(fourth)/November
available 1/January, exclude Thursday to Sunday, include June to July
available 1/January, exclude Monday to Thursday, include 21/January/2008
available 1/January, exclude Monday to Thursday, include 21/January/2008
available 1/January, exclude Tuesday(first)/November, include
Tuesday(first)/November/2009
available 1/January, exclude Monday(third), include Monday(third)/January

grammar:

grammar Availability;

options{
    superClass = AvailabilityBaseParser;
}

program
    : availabilityClause
    ;

availabilityClause
    : 'available' durationClause (excludeClause includeClause?)?
    ;

durationClause
    : startDate endDateClause?
    ;

endDateClause
    : 'to' endDate
    ;

startDate
    : p=dayOfMonthInYearClause   { setStartDate($p.value); }
    ;

endDate
    : p=dayOfMonthInYearClause   { setEndDate($p.value); }
    ;

excludeClause
    : ',' 'exclude' p=period     { addExclude($p.value); }
        (',' p=period            { addExclude($p.value); })*
    ;

includeClause
    : ',' 'include' p=period     { addInclude($p.value); }
        (',' p=period            { addInclude($p.value); })*
    ;

period returns [adc.util.Date value]
    : r=range                    { $value = $r.value; }
    | d=date                     { $value = $d.value; }
    ;

range returns [adc.util.DateRange value]
    : s=date 'to' e=date         { $value = new
adc.util.DateRange($s.value,$e.value); }
    ;

date returns [adc.util.Date value]
    : d=dayOfMonthDateClause     { $value = $d.value; }
    | w=dayOfWeekDateClause      { $value = $w.value; }
    | m=monthDateClause          { $value = $m.value; }
    ;

dayOfWeekDateClause returns [adc.util.Date value]
    : d=dayOfWeek                { $value = new adc.util.Date($d.value); }
        (o=occurrenceClause      { $value.getDay().setSelector($o.value); })?
        (m=monthClause           { $value.setMonth($m.value); }
            (y=yearClause        { $value.setYear($y.value); })?)?
    ;

dayOfMonthDateClause returns [adc.util.Date value]
    : d=dayOfMonth m=monthClause { $value = new
adc.util.Date($d.value,$m.value); }
        (y=yearClause            { $value.setYear($y.value); })?
    ;

monthDateClause returns [adc.util.Date value]
    : m=monthClause              { $value = new adc.util.Date($m.value); }
        (y=yearClause            { $value.setYear($y.value); })?
    ;

dayOfMonthInYearClause returns [adc.util.Date value]
    : d=dayOfMonth m=monthClause y=yearClause
                                 { $value = new
adc.util.Date($d.value,$m.value,$y.value); }
    ;

dayClause returns [adc.util.Day value]
    : d=dayOfMonth               { $value = adc.util.Day.ANY;
$value.setSelector($d.value); }
    | w=dayOfWeekClause          { $value = $w.value; }
    ;

monthClause returns [adc.util.Month value]
    : '/' m=month                { $value = $m.value; }
    ;

yearClause returns [int value]
    : '/' y=year                 { $value = Integer.parseInt($y.text); }
    ;

dayOfWeekClause returns [adc.util.Day value]
    : d=dayOfWeek                { $value = $d.value; }
        (o=occurrenceClause      { $value.setSelector($o.value); })?
    ;

dayOfWeek returns [adc.util.Day value]
    : DAY_OF_WEEK                { $value = adc.util.Day.MONDAY; }
    ;
/*
    : 'Monday'                   { $value = adc.util.Day.MONDAY; }
    | 'Tuesday'                  { $value = adc.util.Day.TUESDAY; }
    | 'Wednesday'                { $value = adc.util.Day.WEDNESDAY; }
    | 'Thursday'                 { $value = adc.util.Day.THURSDAY; }
    | 'Friday'                   { $value = adc.util.Day.FRIDAY; }
    | 'Saturday'                 { $value = adc.util.Day.SATURDAY; }
    | 'Sunday'                   { $value = adc.util.Day.SUNDAY; }
    ;
*/

occurrenceClause returns [int value]
    : '(' o=occurrence ')'       { $value = $o.value; }
    ;

occurrence returns [int value]
    : OCCURRENCE                 { $value = 1; }
    ;
/*
    : 'first'                    { $value = 1; }
    | 'second'                   { $value = 2; }
    | 'third'                    { $value = 3; }
    | 'fourth'                   { $value = 4; }
    ;
*/

dayOfMonth returns [int value]
    : NUMBER                     { $value = Integer.parseInt($NUMBER.text); }
    ;

month returns [adc.util.Month value]
    : MONTH                      { $value = adc.util.Month.JANUARY; }
    ;
/*
    : 'January'                  { $value = adc.util.Month.JANUARY; }
    | 'February'                 { $value = adc.util.Month.FEBRUARY; }
    | 'March'                    { $value = adc.util.Month.MARCH; }
    | 'April'                    { $value = adc.util.Month.APRIL; }
    | 'May'                      { $value = adc.util.Month.MAY; }
    | 'June'                     { $value = adc.util.Month.JUNE; }
    | 'July'                     { $value = adc.util.Month.JULY; }
    | 'August'                   { $value = adc.util.Month.AUGUST; }
    | 'September'                { $value = adc.util.Month.SEPTEMBER; }
    | 'October'                  { $value = adc.util.Month.OCTOBER; }
    | 'November'                 { $value = adc.util.Month.NOVEMBER; }
    | 'December'                 { $value = adc.util.Month.DECEMBER; }
    ;
*/

year returns [int year]
    : NUMBER                     { $year = Integer.parseInt($NUMBER.text); }
    ;

DAY_OF_WEEK returns [adc.util.Day value]
    : 'Monday'                   { $value = adc.util.Day.MONDAY; }
    | 'Tuesday'                  { $value = adc.util.Day.TUESDAY; }
    | 'Wednesday'                { $value = adc.util.Day.WEDNESDAY; }
    | 'Thursday'                 { $value = adc.util.Day.THURSDAY; }
    | 'Friday'                   { $value = adc.util.Day.FRIDAY; }
    | 'Saturday'                 { $value = adc.util.Day.SATURDAY; }
    | 'Sunday'                   { $value = adc.util.Day.SUNDAY; }
    ;

MONTH returns [adc.util.Month value]
    : 'January'                  { $value = adc.util.Month.JANUARY; }
    | 'February'                 { $value = adc.util.Month.FEBRUARY; }
    | 'March'                    { $value = adc.util.Month.MARCH; }
    | 'April'                    { $value = adc.util.Month.APRIL; }
    | 'May'                      { $value = adc.util.Month.MAY; }
    | 'June'                     { $value = adc.util.Month.JUNE; }
    | 'July'                     { $value = adc.util.Month.JULY; }
    | 'August'                   { $value = adc.util.Month.AUGUST; }
    | 'September'                { $value = adc.util.Month.SEPTEMBER; }
    | 'October'                  { $value = adc.util.Month.OCTOBER; }
    | 'November'                 { $value = adc.util.Month.NOVEMBER; }
    | 'December'                 { $value = adc.util.Month.DECEMBER; }
    ;

OCCURRENCE returns [int value]
    : 'last'                     { $value = -1; }
    | 'first'                    { $value =  1; }
    | 'second'                   { $value =  2; }
    | 'third'                    { $value =  3; }
    | 'fourth'                   { $value =  4; }
    ;

NUMBER
    : DIGIT+
    ;

fragment DIGIT
    : '0'..'9'
    ;

WS  :  (' '|'\r'|'\t'|'\u000C'|'\n')
                                 { $channel=HIDDEN; }
    ;

COMMENT
    :   '/*' ( options {greedy=false;} : . )* '*/'
                                 { $channel=HIDDEN; }
    ;

LINE_COMMENT
    : '//' ~('\n'|'\r')* '\r'? '\n'
                                 { $channel=HIDDEN; }
    ;



On Jan 22, 2008 12:41 AM, Gavin Lambert <antlr at mirality.co.nz> wrote:
> At 19:25 22/01/2008, Jan Nielsen wrote:
>  >
>  >I initially envisioned having repeated exclusion and inclusion
>  >clauses but I don't think I need to support it now
>
> If you want them, it's pretty straightforward.  Just change the
> prog rule to this:
>
> prog
>      : 'from' date ('to' date)? (exclude_clause | include_clause)*
> EOF
>      ;
>
> This will permit any number of include and exclude clauses in any
> order.
>
>  >day_of_week_period
>  >    : DAY_OF_WEEK ('[' occurrence ']')? ('-' DAY_OF_WEEK)?
>  >    ;
>
> If "Monday[3]-Wednesday" doesn't make sense (and I'm not sure how
> it could), you could possibly change this to:
>
> day_of_week_period
>      : DAY_OF_WEEK ('[' occurrence ']' | '-' DAY_OF_WEEK)?
>      ;
>
> This will permit only one (or neither) of the two options to be
> specified.
>
>

From jimi at temporal-wave.com  Tue Jan 29 10:10:49 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 29 Jan 2008 10:10:49 -0800
Subject: [antlr-interest] ANTLRWorks 1.1.6 released
In-Reply-To: <479F2383.4040704@moncons.co.uk>
Message-ID: <"L9F4799C6A0A2411a9B9B0FFF9C497DA4.1201631574.scalix.temporal-wave.com*"@MHS>

Delete all the pre-existing generated stuff including the .java files 
and the classes and it seems to work - I had similar issues. 

However, I am using ANTLR 3.1 with ANTLRWorks - there may be a 
dependency now. Ter, didnt you change ANTLRWorks to use the new 
debugger parameters, or was that in a separate branch or something?

Jim

> -----Original Message-----
> From: Montebello [mailto:asmith at moncons.co.uk]
> Sent: Tuesday, January 29, 2008 5:01 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] ANTLRWorks 1.1.6 released
> 
> Hi Jean,
> 
> I am afraid that something seems to have broken in AW debug between
> 1.1.5 and 1.1.6.
> 
> I had a grammar set up in 1.1.5 which would check, generate code,
> compile and run in debug without any errors. I upgraded to 1.1.6 and
> now
> the same setup of grammar and configuration of AW produces a
> compilation
> error when the debugger is preparing itself for a run. (Checking and
> generation are still OK via the menu icons). As a result the debugger
> will not continue.
> 
> The error shown in the console is the standard "cannot find symbol"
> shown when the classpath is wrong. This occurs when the debugger is
> attempting to compile the _Test_.java file at the first reference in
> this file (line 12 on my system) to the Parser produced by the 
combined
> grammar. The error may result because the debugger compiler classpath
> perhaps does not now include the "classes" subdirectory into which the
> compiler files the results of compilation. After a failed attempt this
> subdirectory does contain fresh class files resulting from the
> compilation of the parser and lexer code by the debugger.
> 
> To check my attribution of the error, after a failed attempt to run 
the
> debugger in 1.1.6 I immediately reverted to 1.1.5 and with no other
> changes the run was normal once more.
> 
> Can you look into this please as it makes 1.1.6 unusable for 
debugging.
> 
> Thanks for your efforts,
> 
> Andrew Smith



From parrt at cs.usfca.edu  Tue Jan 29 10:36:28 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 29 Jan 2008 10:36:28 -0800
Subject: [antlr-interest] ANTLRWorks 1.1.6 released
In-Reply-To: <479F2383.4040704@moncons.co.uk>
References: <60988182-5171-44EF-9A30-82308182D2E2@arizona-software.ch>
	<479F2383.4040704@moncons.co.uk>
Message-ID: <A1B91E34-5D37-4819-A75A-F559320A6833@cs.usfca.edu>

I'm investigating with Jean.  Seems may be an output template issue.
ter
On Jan 29, 2008, at 5:00 AM, Montebello wrote:

> Hi Jean,
>
> I am afraid that something seems to have broken in AW debug between
> 1.1.5 and 1.1.6.
>
> I had a grammar set up in 1.1.5 which would check, generate code,
> compile and run in debug without any errors. I upgraded to 1.1.6 and  
> now
> the same setup of grammar and configuration of AW produces a  
> compilation
> error when the debugger is preparing itself for a run. (Checking and
> generation are still OK via the menu icons). As a result the debugger
> will not continue.
>
> The error shown in the console is the standard "cannot find symbol"
> shown when the classpath is wrong. This occurs when the debugger is
> attempting to compile the _Test_.java file at the first reference in
> this file (line 12 on my system) to the Parser produced by the  
> combined
> grammar. The error may result because the debugger compiler classpath
> perhaps does not now include the "classes" subdirectory into which the
> compiler files the results of compilation. After a failed attempt this
> subdirectory does contain fresh class files resulting from the
> compilation of the parser and lexer code by the debugger.
>
> To check my attribution of the error, after a failed attempt to run  
> the
> debugger in 1.1.6 I immediately reverted to 1.1.5 and with no other
> changes the run was normal once more.
>
> Can you look into this please as it makes 1.1.6 unusable for  
> debugging.
>
> Thanks for your efforts,
>
> Andrew Smith


From antlr at mirality.co.nz  Tue Jan 29 10:43:52 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Wed, 30 Jan 2008 07:43:52 +1300
Subject: [antlr-interest] Generating initializers and headers
In-Reply-To: <d4e11e980801290502n6b26c936g5185ce1f1751325c@mail.gmail.co
 m>
References: <d4e11e980801290502n6b26c936g5185ce1f1751325c@mail.gmail.com>
Message-ID: <20080129184426.ED9B411EB9A@www.antlr.org>

At 02:02 30/01/2008, Nikolas Everett wrote:

>I'm looking to generate C code from antlr/stringtemplate.  I'd 
>like to generate methods in a .c file, method signatures in a .h 
>file, and probably some sort of initialization method in the .c 
>file.  My problem is that any part of the AST could generate code 
>in any of those 3 places.  What is the normal way to handle this?

I did something similar a while ago by creating custom data 
structures via action code, and then iterating through them 
several times in different modes to generate the different output.

If you want to do it more ANTLR-ish, though, then you could have 
your parser create an AST, and then write two or three separate 
tree parsers (one for each output file you want to generate) that 
walk the tree and generate the desired output.


-- 
No virus found in this outgoing message.
Checked by AVG Free Edition. 
Version: 7.5.516 / Virus Database: 269.19.14/1247 - Release Date: 28/01/2008 10:59



From jbb at acm.org  Tue Jan 29 11:05:10 2008
From: jbb at acm.org (John B. Brodie)
Date: Tue, 29 Jan 2008 14:05:10 -0500
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <f79c7d4d0801291011i29c0e3e7k5b06f80676431287@mail.gmail.com>
	(jan.sture.nielsen@gmail.com)
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
	<4794f4b4.26b5420a.1486.2f54SMTPIN_ADDED@mx.google.com>
	<f79c7d4d0801212225i5f0c6db7qbac8fca5380d41d9@mail.gmail.com>
	<47959e30.1781420a.5044.fffffcdeSMTPIN_ADDED@mx.google.com>
	<f79c7d4d0801291011i29c0e3e7k5b06f80676431287@mail.gmail.com>
Message-ID: <E1JJvle-00024K-69@gecko.home.org>

Greetings!

Jan Nielsen wrote:
>So I rewrote the grammar with return values after implementing the
>underlying APIs. I'm still having some basic issues with recognition,
>however. I think the excludeClause and includeClause lists are not
>being handled correctly - perhaps because of the comma?

The handling of the comma in excludeClause and includeClause looks
okay to me.

>I have included my test cases and grammar below. If you have any
>insights about what I've done wrong, I'd be delighted to entertain
>them. :)

monthClause REQUIRES a '/' before the name of the month. so the test
input of "include June to July" will be illegal. according to the
grammar that should instead be "include /June to /July".

as for the other errors, I am really confused. is your test rig
proper? since your grammar only handles a single availablityClause you
should be starting with a brand new fresh lexer and parser for each of
your inputs, right? or are you trying to re-use a prior lexer&parser
instance? if re-using, perhaps encountering the above error puts the
parser into a bad state so that it is unable to deal with subsequent
input (just guessing here).

maybe changing the program rule to look for EOF after the
availabilityClause might help to figure things out... e.g:

program : availabilityClause EOF ;



>Many thanks,

Hope this helps...

>...grammar and test cases snipped...

   -jbb

From aheller at gmx.at  Tue Jan 29 11:06:32 2008
From: aheller at gmx.at (Arnulf Heller)
Date: Tue, 29 Jan 2008 20:06:32 +0100
Subject: [antlr-interest] Generating initializers and headers
In-Reply-To: <d4e11e980801290502n6b26c936g5185ce1f1751325c@mail.gmail.co
 m>
References: <d4e11e980801290502n6b26c936g5185ce1f1751325c@mail.gmail.com>
Message-ID: <20080129190633.WWAM14752.viefep18-int.chello.at@edge.upc.biz>

At 14:02 29.01.2008, you wrote:
>I've been puzzling over this for a few days, and haven't thought of 
>anything useful, so I figured I'd ask the group.
>
>I'm looking to generate C code from antlr/stringtemplate.  I'd like 
>to generate methods in a .c file, method signatures in a .h file, 
>and probably some sort of initialization method in the .c file.  My 
>problem is that any part of the AST could generate code in any of 
>those 3 places.  What is the normal way to handle this?

hi,

look at the ANTLR3 sources (src\org\antlr\codegen\CodeGenerator.java, 
src\org\antlr\codegen\templates\cpp\CPP.stg)

I think this is what you are looking for.

They keep two string templates in a group (that share type 
definitions etc.) and throw the parsing output onto them:

                 headerFileST.setAttribute("actions", actions);
                 outputFileST.setAttribute("actions", actions);
                 headerFileST.setAttribute("buildTemplate", new 
Boolean(grammar.buildTemplate()));
                 outputFileST.setAttribute("buildTemplate", new 
Boolean(grammar.buildTemplate()));
                 headerFileST.setAttribute("buildAST", new 
Boolean(grammar.buildAST()));
                 outputFileST.setAttribute("buildAST", new 
Boolean(grammar.buildAST()));
                 outputFileST.setAttribute("rewriteMode", 
Boolean.valueOf(grammar.rewriteMode()));
                 headerFileST.setAttribute("rewriteMode", 
Boolean.valueOf(grammar.rewriteMode()));
                 outputFileST.setAttribute("backtracking", 
Boolean.valueOf(canBacktrack));
                 headerFileST.setAttribute("backtracking", 
Boolean.valueOf(canBacktrack));

cheers,
arnulf 


From jan.sture.nielsen at gmail.com  Tue Jan 29 12:53:42 2008
From: jan.sture.nielsen at gmail.com (Jan Nielsen)
Date: Tue, 29 Jan 2008 13:53:42 -0700
Subject: [antlr-interest] ANTLR NUB
In-Reply-To: <E1JJvle-00024K-69@gecko.home.org>
References: <f79c7d4d0801210932s597a1146jefe0f2ec207f5046@mail.gmail.com>
	<4794f4b4.26b5420a.1486.2f54SMTPIN_ADDED@mx.google.com>
	<f79c7d4d0801212225i5f0c6db7qbac8fca5380d41d9@mail.gmail.com>
	<47959e30.1781420a.5044.fffffcdeSMTPIN_ADDED@mx.google.com>
	<f79c7d4d0801291011i29c0e3e7k5b06f80676431287@mail.gmail.com>
	<E1JJvle-00024K-69@gecko.home.org>
Message-ID: <f79c7d4d0801291253v2440e60bkc515e37312cac8ed@mail.gmail.com>

On Jan 29, 2008 12:05 PM, John B. Brodie <jbb at acm.org> wrote:
> Greetings!
>
> Jan Nielsen wrote:
> >So I rewrote the grammar with return values after implementing the
> >underlying APIs. I'm still having some basic issues with recognition,
> >however. I think the excludeClause and includeClause lists are not
> >being handled correctly - perhaps because of the comma?
>
> The handling of the comma in excludeClause and includeClause looks
> okay to me.

Okay.

>
> >I have included my test cases and grammar below. If you have any
> >insights about what I've done wrong, I'd be delighted to entertain
> >them. :)
>
> monthClause REQUIRES a '/' before the name of the month. so the test
> input of "include June to July" will be illegal. according to the
> grammar that should instead be "include /June to /July".

Ahh - right you are! And I did a similar error with startDate and endDate.

> as for the other errors, I am really confused. is your test rig
> proper? since your grammar only handles a single availablityClause you
> should be starting with a brand new fresh lexer and parser for each of
> your inputs, right?

Yes; I create a new lexer and parser for each availability line in my
test rig - I should have made that clear. But I've change to process
multiple availabilityClauses now from a file with EOF at the end:

  program : availabilityClause+ EOF;

And things are now working. Now on to handling errors more gracefully...

Many thanks for your help!


-Jan

From asmith at moncons.co.uk  Tue Jan 29 15:08:39 2008
From: asmith at moncons.co.uk (Montebello)
Date: Tue, 29 Jan 2008 23:08:39 +0000
Subject: [antlr-interest] ANTLRWorks 1.1.6 released
In-Reply-To: <"L9F4799C6A0A2411a9B9B0FFF9C497DA4.1201631574.scalix.temporal-wave.com*"@MHS>
References: <"L9F4799C6A0A2411a9B9B0FFF9C497DA4.1201631574.scalix.temporal-wave.com*"@MHS>
Message-ID: <479FB1F7.3000104@moncons.co.uk>

Hi Jim,

Thanks for the suggestion to try removing everything generated, but
unfortunately it did not help at all. The same error occurred, possibly
because of the reason suggested by your hint, since I am using the
standard issue ANTLR 3.0.1 with AW 1.1.6. Before my first mail I had
tried deleting the class files without success but had not done a total
clear out.

For me, it is back to waiting for the experts,

Andrew Smith

From shro8822 at vandals.uidaho.edu  Tue Jan 29 16:37:24 2008
From: shro8822 at vandals.uidaho.edu (Benjamin Shropshire)
Date: Tue, 29 Jan 2008 16:37:24 -0800
Subject: [antlr-interest] Using antlr under C#
Message-ID: <BAYC1-PASMTP07152963AFF5315189F5FAF5360@CEZ.ICE>

I am trying to use Antlr under C# and am finding it frustrating because
I can't seem to find any clear documentation on how to use it.

this page:      http://www.antlr.org/api/CSharp/index.html
linked from this page:      http://www.antlr.org/api/
gives a 404.

Installing antlr gives me the .dll's to link with but I can't seem to
find any info in there to show me what to do with it.

googel gives me this:  http://www.antlr.org/doc/csharp-runtime.html
but that just shows up as file not found.

I found what seems to be a reop here:
http://fisheye2.cenqua.com/browse/antlr/runtime/CSharp
but I can't find a way to download more than one file at a time (.zip,
.tgz and .tbz2 all give corrupt files)

What I want is enough documentation to be able to figure out what's
what. Like; how do I manually pull all the tokens from a
CommonTokenStream? (I'd love the answer to that one but "Teach a man to
fish...")

Any help would be appreciated?


From darien.hager at etelos-inc.com  Tue Jan 29 17:02:08 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Tue, 29 Jan 2008 17:02:08 -0800
Subject: [antlr-interest] Code generation weirdness?
Message-ID: <c8c997f40801291702j71be4a73tdbd6758f0814675e@mail.gmail.com>

Very much a newbie experimenting here, so apologies for imprecision and
misunderstandings in advance.

I'm using AntlrWorks 1.16, and the generated code for Python breaks
when combined with the JSON grammar on the wiki. Interpreter/Debugger does
fine.

It appears that a python class named "object" is created in jsonParser.py,
matching the grammar's rule of the same name.  (Not the AST tree label,
that's all upper-case)

The problem is that choosing the name "object" is probably a bad idea for
many reasons, and things blow up.
_______
Traceback (most recent call last):
File "jsonParser.py", line 44, in <module>
class jsonParser(Parser):
File "jsonParser.py", line 593, in jsonParser
class array_return(object):
TypeError: Error when calling the metaclass bases
function() argument 1 must be code, not str
_______

Changing the grammar's AST tree label to "j_object" fixes the problems.

Is there a reason that these generated classnames don't have some sort of
default prefix for language safety? Could such a thing be reasonably
implemented? It seems like a big pitfall that grammar rule names can
collide with target language keywords.
It's possible that there was some warning about this kind of bug and I
missed it...


-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080129/0745b495/attachment.html 

From jan.sture.nielsen at gmail.com  Tue Jan 29 17:56:43 2008
From: jan.sture.nielsen at gmail.com (Jan Nielsen)
Date: Tue, 29 Jan 2008 18:56:43 -0700
Subject: [antlr-interest] ANTLR code too large
Message-ID: <f79c7d4d0801291756v32b3b2d2jcfb7f63bc60c3865@mail.gmail.com>

My ANTLR grammar sippit below generates code that is "too large" from
a compiler/class-file perspective; if I use the lexer rule DAY_OF_WEEK
everything is fine but it doesn't parse correctly because of the lack
of return values. I can use "noinlinedfa" [1] to address the lexer
rule size* problem, but I'm wondering if there's a better way. In my
grammar [2], I define a dayOfWeek parser rule (I suppose could pass
the result back through the parser in a lexer rule action?). Is there
a better way to do this sort of thing?

Thanks,

-Jan


(*) Does anyone know how to tell the Maven 2 antlr-maven-plugin [3] to
use -Xnoinlinedfa during the code-generation phase?
[1] http://www.antlr.org/pipermail/antlr-interest/2007-December/025360.html
[2] http://www.antlr.org/pipermail/antlr-interest/2008-January/026019.html
[3] http://mojo.codehaus.org/antlr-maven-plugin/

dayOfWeek returns [adc.util.Day value]
/*
    : DAY_OF_WEEK                { $value = adc.util.Day.MONDAY; }
    ;
*/

    : 'Monday'                   { $value = adc.util.Day.MONDAY; }
    | 'Tuesday'                  { $value = adc.util.Day.TUESDAY; }
    | 'Wednesday'                { $value = adc.util.Day.WEDNESDAY; }
    | 'Thursday'                 { $value = adc.util.Day.THURSDAY; }
    | 'Friday'                   { $value = adc.util.Day.FRIDAY; }
    | 'Saturday'                 { $value = adc.util.Day.SATURDAY; }
    | 'Sunday'                   { $value = adc.util.Day.SUNDAY; }
    ;

DAY_OF_WEEK returns [adc.util.Day value]
    : 'Monday'                   { $value = adc.util.Day.MONDAY; }
    | 'Tuesday'                  { $value = adc.util.Day.TUESDAY; }
    | 'Wednesday'                { $value = adc.util.Day.WEDNESDAY; }
    | 'Thursday'                 { $value = adc.util.Day.THURSDAY; }
    | 'Friday'                   { $value = adc.util.Day.FRIDAY; }
    | 'Saturday'                 { $value = adc.util.Day.SATURDAY; }
    | 'Sunday'                   { $value = adc.util.Day.SUNDAY; }
    ;

From antlr-list at arizona-software.ch  Tue Jan 29 18:48:49 2008
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Tue, 29 Jan 2008 18:48:49 -0800
Subject: [antlr-interest] ANTLRWorks 1.1.6 released
In-Reply-To: <479F2383.4040704@moncons.co.uk>
References: <60988182-5171-44EF-9A30-82308182D2E2@arizona-software.ch>
	<479F2383.4040704@moncons.co.uk>
Message-ID: <7CC828D9-5C23-4DF8-87CA-2F9BCDD103B5@arizona-software.ch>

This has been fixed yesterday night. Please download ANTLRWorks 1.1.6  
again and it should work.

Jean

On Jan 29, 2008, at 5:00 AM, Montebello wrote:

> Hi Jean,
>
> I am afraid that something seems to have broken in AW debug between
> 1.1.5 and 1.1.6.
>
> I had a grammar set up in 1.1.5 which would check, generate code,
> compile and run in debug without any errors. I upgraded to 1.1.6 and  
> now
> the same setup of grammar and configuration of AW produces a  
> compilation
> error when the debugger is preparing itself for a run. (Checking and
> generation are still OK via the menu icons). As a result the debugger
> will not continue.
>
> The error shown in the console is the standard "cannot find symbol"
> shown when the classpath is wrong. This occurs when the debugger is
> attempting to compile the _Test_.java file at the first reference in
> this file (line 12 on my system) to the Parser produced by the  
> combined
> grammar. The error may result because the debugger compiler classpath
> perhaps does not now include the "classes" subdirectory into which the
> compiler files the results of compilation. After a failed attempt this
> subdirectory does contain fresh class files resulting from the
> compilation of the parser and lexer code by the debugger.
>
> To check my attribution of the error, after a failed attempt to run  
> the
> debugger in 1.1.6 I immediately reverted to 1.1.5 and with no other
> changes the run was normal once more.
>
> Can you look into this please as it makes 1.1.6 unusable for  
> debugging.
>
> Thanks for your efforts,
>
> Andrew Smith


From stevagewp at gmail.com  Tue Jan 29 21:02:22 2008
From: stevagewp at gmail.com (Steve Bennett)
Date: Wed, 30 Jan 2008 16:02:22 +1100
Subject: [antlr-interest] Apparently equivalent code refactoring doesn't work
Message-ID: <b8ceeef70801292102v44c3b091s6cc3aff3c02dce47@mail.gmail.com>

Hi all,

These two code fragments should be effectively equivalent, I think:

1:

internal_link:
    link_start COLON? pagename (PIPE link_caption?)? link_end
((letters)=>link_trail)?
-> ^(INTERNAL_LINK ^(PAGENAME pagename) ^(TEXT link_caption? link_trail?));

link_caption
@init {this.caption_levels++;}:
        simple_text;
finally {this.caption_levels--; }

----

2:

internal_link:
    link_start COLON? pagename (PIPE link_caption)? link_end
((letters)=>link_trail)?
-> ^(INTERNAL_LINK ^(PAGENAME pagename) ^(TEXT link_caption? link_trail?));

link_caption
@init {this.caption_levels++; }:
        simple_text?;
finally {this.caption_levels--; }


(the difference being the question mark after 'link_caption' or after
'simple_text')

However, version 2 matches [[foo|]] (which is what I want), but
version 1 doesn't. In particular, in the debugger, the parse tree for
1 shows 'simple_text' in red, and 'simple_inline_elem' is brown - then
the parse for internal_link apparently fails and it goes on to try
other rules.

Just wondering if anyone could think of why this would be? I feel iffy
about having rules that can match blank, so I'd prefer version 1 if
possible. Maybe I've missed something really obvious.

Thanks in advance,
Steve
PS using the latest ANTLRworks (1.1.6)

From stevagewp at gmail.com  Tue Jan 29 21:25:08 2008
From: stevagewp at gmail.com (Steve Bennett)
Date: Wed, 30 Jan 2008 16:25:08 +1100
Subject: [antlr-interest] Modularisation
Message-ID: <b8ceeef70801292125r615f74f0m5866934a4eb93ac3@mail.gmail.com>

This has probably been asked before, but any prospect of modular
grammars? Even something as brutal as a #include "myothergrammar.g"
would help deal with my monolithic grammar...

Thanks,
Steve

From gn at fluidon.dyndns.info  Wed Jan 30 01:48:54 2008
From: gn at fluidon.dyndns.info (Christian Gudrian)
Date: Wed, 30 Jan 2008 10:48:54 +0100
Subject: [antlr-interest] ANTLRWorks 1.1.6 released
In-Reply-To: <"L9F4799C6A0A2411a9B9B0FFF9C497DA4.1201631574.scalix.temporal-wave.com*"@MHS>
References: <"L9F4799C6A0A2411a9B9B0FFF9C497DA4.1201631574.scalix.temporal-wave.com*"@MHS>
Message-ID: <47A04806.8020105@fluidon.dyndns.info>

Jim Idle wrote:

> However, I am using ANTLR 3.1 with ANTLRWorks - there may be a 
> dependency now.

How can I make ANTLRWorks use ANTLR 3.1?  I've tried to build it myself
using antlr-2008-01-23.10 but failed.

Christian


From mehta.anuj at wipro.com  Wed Jan 30 05:18:35 2008
From: mehta.anuj at wipro.com (Anuj Mehta)
Date: Wed, 30 Jan 2008 18:48:35 +0530
Subject: [antlr-interest] line 0:-1 mismatched input '<EOF>'
Message-ID: <BLR-EC-EX202H71yEXU0000056b@BLR-EC-MBX05.wipro.com>

Hi

 

I wrote a grammar for parsing a small text but getting following error.

Please guide me where I am going wrong?

 

Error:-

recoverFromMismatchedToken

BR.recoverFromMismatchedToken

line 0:-1 mismatched input '<EOF>' expecting Title

 

 

Input Text:-

 

Kernel IP routing table

Destination     Gateway

 

 

 

Grammar:

 

grammar route;

 

expr     :           Heading Title {System.out.println("done");};

 

Heading          :           'Kernel IP routing table';        

 

Title     :           'Destination' WS 'Gateway';

 

WS      :           (' '|'\t'|'\n'|'\r')+ {skip();};

 

 

 

Regards,

Anuj Mehta

 


Please do not print this email unless it is absolutely necessary. Spread environmental awareness.

The information contained in this electronic message and any attachments to this message are intended for the exclusive use of the addressee(s) and may contain proprietary, confidential or privileged information. If you are not the intended recipient, you should not disseminate, distribute or copy this e-mail. Please notify the sender immediately and destroy all copies of this message and any attachments. 

WARNING: Computer viruses can be transmitted via email. The recipient should check this email and any attachments for the presence of viruses. The company accepts no liability for any damage caused by any virus transmitted by this email. 

www.wipro.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080130/334693f9/attachment-0001.html 

From dave at badgers-in-foil.co.uk  Wed Jan 30 05:30:57 2008
From: dave at badgers-in-foil.co.uk (David Holroyd)
Date: Wed, 30 Jan 2008 13:30:57 +0000
Subject: [antlr-interest] line 0:-1 mismatched input '<EOF>'
In-Reply-To: <BLR-EC-EX202H71yEXU0000056b@BLR-EC-MBX05.wipro.com>
References: <BLR-EC-EX202H71yEXU0000056b@BLR-EC-MBX05.wipro.com>
Message-ID: <20080130133056.GB10572@badgers-in-foil.co.uk>

On Wed, Jan 30, 2008 at 06:48:35PM +0530, Anuj Mehta wrote:
> I wrote a grammar for parsing a small text but getting following error.
> [...]

It's not addressing the question you asked, but have you looked at
reading from /proc/net/route, rather than parsing the output of
/sbin/route?  The proc file is supposed to be more easily
machine-readable (in fact, it probably doesn't even need a 'parser' to
do the job -- I think the /sbin/route command just reads /proc/net/route
line by line using scanf)

ta,
dave

-- 
http://david.holroyd.me.uk/

From JohnBlack at kashori.com  Wed Jan 30 05:43:41 2008
From: JohnBlack at kashori.com (John Black)
Date: Wed, 30 Jan 2008 08:43:41 -0500
Subject: [antlr-interest] Meaning of the {synpred} objects in the Clif.g
	(ISO Common Logic) parser
Message-ID: <07bb01c86346$20b03ae0$6601a8c0@KASHORI001>

I have been viewing the Clif.g [1] grammar in AntlrWorks and I am puzzled by the errors the interpreter produces when I try to parse some clif strings with that GUI when loaded with that grammer. Here is an example:

  a.. FailedPredicateException(sentence,{synpred41}?) 

I am also curious about boxes shown in the 'Syntax Diagram' with such names as '{synpred41}',  '{synpred42}', '{synpred43}', shown when looking at the 'sentence' goal. Can someone point me to documentation that explains these objects? Or is someone willing to explain them to me? Also, do they have any affect on the operation of the parser? 

I am interested in this now that ISO Common Logic has become an official ISO standard [2] for symbolic logic and conceptual graphs. Also, I am interested in helping to get the "ISO Common Logic Tools" [3] SourceForge project jump started. 

Cheers,
John Black
www.kashori.com



1. http://pando.svn.sourceforge.net/viewvc/pando/code/modules/parsers/src/net/sf/pando/parsers/clif3/grammar/Clif3.g?view=log

2. http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=39175

3. http://sourceforge.net/projects/common-logic/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080130/852485ba/attachment.html 

From r.mark.volkmann at gmail.com  Wed Jan 30 05:44:16 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 30 Jan 2008 07:44:16 -0600
Subject: [antlr-interest] Template for optional element
In-Reply-To: <f4c6db60801291957h156cd81bjc39b41224eafe4af@mail.gmail.com>
References: <f4c6db60801282357h48abe0f9tf0020e5ac4343e4@mail.gmail.com>
	<f0fcc6820801290457v280261d1h1faaa920e0470729@mail.gmail.com>
	<f4c6db60801291957h156cd81bjc39b41224eafe4af@mail.gmail.com>
Message-ID: <f0fcc6820801300544v5f9cacecwff7d9eb69d25b888@mail.gmail.com>

On Jan 29, 2008 9:57 PM, Oscar P?rez <oscar at perex.org> wrote:
> 2008/1/29, Mark Volkmann <r.mark.volkmann at gmail.com>:
>
> > On Jan 29, 2008 1:57 AM, Oscar P?rez <oscar at perex.org> wrote:
> > > Hi.
> > >
> > > I'm new in ANTLR.
> > >
> > > I want to use a template for a rule like this:
> > >
> > > func: ^( Func ID params* body ) -> func(name={$ID.text},
> > > par={$params.st}, block={$body.st});
> > >
> > > but if there aren't params in source text, then broken!!!
> > >
> > > ?How can I write a template for optional elements?
> >
> > Does it solve the problem to use something like this in your template?
> >
> > <if(params)><params><endif>

> Is not work!
> I believe that <if(params)>  works only when you do not use the
> "params" param in the template. For example the template:
>
> func(name,body) ::= " <if(!body)> empty <endif> "
>
> you can use the template:
>
> func: ^( Func ID params* body ) -> func(name={$ID.text}) // no "body"
> in template...
>
>
> But my problem is another one:
>
> In the rule 'func' there is an optional element: params* , it can have no.
>
> func: ^(Func ID params* body) -> func(param={$params} )
>
> the error report is:
>
>
> Exception in thread "main" java.lang.NullPointerException
>         at MophouaWalker.method(MophouaWalker.java:1141)
>         at MophouaWalker.classDef(MophouaWalker.java:547)
>         at MophouaWalker.file(MophouaWalker.java:135)
>         at MophouaMain.main(MophouaMain.java:51)
>
> I think so the prvious rule is equvalent to:
>
> func: ^(Func ID body) -> func(param={$params} )
>
> when there are not parameters, then the templete function recive a null Pointer.
>
> the question is:
>
> How it can write template for rules with optional elements?
> I must rewrite the rule?

I'm pretty sure that  <if(params)><params><endif> will output params
only if params is not null and is not a boolean whose value is false.
When params isn't supplied, I think its value to StringTemplate is
null.

I have a case like this in one of my grammars. Here's a rule from my
tree grammar. Note how the "coef" and "exp" parameters are optional in
some alternatives and they are passed to the "term" StringTemplate.

term[String sign]
  : ^(TERM coef=NUMBER)
    {
      Double c = Double.parseDouble($coef.text);
      if ("-".equals(sign)) c = -c;
    }
    -> term(coef={c})
  | ^(TERM coef=NUMBER? var=NAME exp=NUMBER?)
    {
      Double c = Double.parseDouble($coef.text);
      if ("-".equals(sign)) c = -c;
    }
    -> term(coef={c}, var={$var}, exp={$exp})
  ;

Here's the "term" StringTemplate.

term(coef, var, exp) ::= <<
p.addTerm(<coef><if(var)>, "<var>"<endif><if(exp)>, <exp><endif>);
>>

Note how I use "if" to determine what to output.

-- 
R. Mark Volkmann
Object Computing, Inc.

From r.mark.volkmann at gmail.com  Wed Jan 30 05:48:03 2008
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Wed, 30 Jan 2008 07:48:03 -0600
Subject: [antlr-interest] AST rewrite
Message-ID: <f0fcc6820801300548r2ebb1933i17199f08ad0192f4@mail.gmail.com>

I have the following rule in my parser grammar and it works just fine.
I don't know how though. Note how my rule matches "term" in two places
and I refer to both of them in my rewrite rule without assigning them
to variables.

polynomial[String fnt, String fvt]
  : term[$fnt, $fvt] (SIGN term[$fnt, $fvt])*
    -> ^(POLYNOMIAL term (SIGN term)*);

Why does this work? I thought I'd have to do something like this.

polynomial[String fnt, String fvt]
  : t1=term[$fnt, $fvt] (SIGN tn=term[$fnt, $fvt])*
    -> ^(POLYNOMIAL $t1 (SIGN $tn)*);

-- 
R. Mark Volkmann
Object Computing, Inc.

From antlr at shmuelhome.mine.nu  Wed Jan 30 05:51:48 2008
From: antlr at shmuelhome.mine.nu (shmuel siegel)
Date: Wed, 30 Jan 2008 15:51:48 +0200
Subject: [antlr-interest] line 0:-1 mismatched input '<EOF>'
In-Reply-To: <BLR-EC-EX202H71yEXU0000056b@BLR-EC-MBX05.wipro.com>
References: <BLR-EC-EX202H71yEXU0000056b@BLR-EC-MBX05.wipro.com>
Message-ID: <47A080F4.8020008@shmuelhome.mine.nu>

Seems a little strange to want WS as part of Title yes mark it as a 
skipped token.
It would be better to make Title a parser rule (use title instead of 
Title) and remove WS from the rule.

Anuj Mehta wrote:
>
> Hi
>
> I wrote a grammar for parsing a small text but getting following error.
>
> Please guide me where I am going wrong?
>
> Error:-
>
> recoverFromMismatchedToken
>
> BR.recoverFromMismatchedToken
>
> line 0:-1 mismatched input '<EOF>' expecting Title
>
> Input Text:-
>
> Kernel IP routing table
>
> Destination Gateway
>
> Grammar:
>
> grammar route;
>
> expr : Heading Title {System.out.println(?done?);};
>
> Heading : 'Kernel IP routing table';
>
> Title : 'Destination' WS 'Gateway';
>
> WS : (' '|'\t'|'\n'|'\r')+ {skip();};
>
> Regards,
>
> Anuj Mehta
>



From stevagewp at gmail.com  Wed Jan 30 06:34:13 2008
From: stevagewp at gmail.com (Steve Bennett)
Date: Thu, 31 Jan 2008 01:34:13 +1100
Subject: [antlr-interest] ArrayIndexOutOfBoundsException
Message-ID: <b8ceeef70801300634y6f78efe0lda89205ff5b57278@mail.gmail.com>

I received this:

Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: -1
	at org.antlr.runtime.DFA.predict(DFA.java:44)
	at mediawiki1Parser.inline_text(mediawiki1Parser.java:13618)
	at mediawiki1Parser.header_simple_text(mediawiki1Parser.java:16669)
	at mediawiki1Parser.header3(mediawiki1Parser.java:5423)
	at mediawiki1Parser.synpred19_fragment(mediawiki1Parser.java:19872)
	at mediawiki1Parser.synpred19(mediawiki1Parser.java:20998)
	at mediawiki1Parser.headerline(mediawiki1Parser.java:4238)
	at mediawiki1Parser.synpred3_fragment(mediawiki1Parser.java:19604)
	at mediawiki1Parser.synpred3(mediawiki1Parser.java:21158)
	at mediawiki1Parser.line(mediawiki1Parser.java:1295)
	at mediawiki1Parser.article(mediawiki1Parser.java:915)
	at mediawiki1Parser.start(mediawiki1Parser.java:299)
	at __Test__.main(__Test__.java:14)


The relevant section from mediawiki1parser.java:

            	case 2 :
            	    // C:\\antlr\\mediawiki1.g:523:34: HYPHEN
            	    {
            	    HYPHEN288=(Token)input.LT(1); // <-- line 13618
            	    match(input,HYPHEN,FOLLOW_HYPHEN_in_mwletters4745);
if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    HYPHEN288_tree = (Object)adaptor.create(HYPHEN288);
            	    adaptor.addChild(root_0, HYPHEN288_tree);
            	    }


I can't immediately see why the exception involved hyphens - there
were none in the input stream, nor were any rules involved in hyphens
in any danger of being called - I think. Changing the grammar a bit
seems to cause an exception in a different rule instead.

Any ideas?

Steve

From jimi at temporal-wave.com  Wed Jan 30 08:13:43 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 30 Jan 2008 08:13:43 -0800
Subject: [antlr-interest] ANTLR code too large
In-Reply-To: <f79c7d4d0801291756v32b3b2d2jcfb7f63bc60c3865@mail.gmail.com>
Message-ID: <"L4ACEC02D74114bd2BBF7CD3FCE191E28.1201710958.scalix.temporal-wave.com*"@MHS>

Jan,

My experience has been that when a very large lexer is generated it is 
because of some slight 'abuse' (so to speak) of lexer specifications and 
there is usually a better way to express the same thing and have a 
marked reduction in size etc. While ANTLR is pretty smart, it isnt a 
magic bullet ;-)

Without all of your lexer rules, it is difficult to say which would 
cause you problems, but look for these kind of things:

1) Rules that should be fragment rules (I am assuming this is ANTLR3 of 
course) as they are only 'called' by other lexer rules and should not be 
set up to return tokens to the parser;
2) Optional lead-ins in lexer rules (though they may be perfectly 
correct, you can often find a better way to put them together that will 
reduce complexity a lot. So: 'XX' ('XX' ':') 'XX' can be 'XX' 'XX' (':' 
'XX')?

Lexer rules (ANTLR3) don't allow return values, but I think that they 
parser correctly at the moment. Your best bet is (probably) to define a 
set of fragment rules then change the $type to them:

fragment MONDAY : 'Monday' ;
fragment TUESDAY : 'Tuesday' ;
...

DAY
	: MONDAY	{ $type = MONDAY; }
	| TUESDAY	{ $type = TUESDAY; }
....

day
	: MONDAY | TUESDAY | ...

If your parser grammar is too big, then it may just be that it is a huge 
grammar. Some solutions for this type of thing are coming in ANTLR 3.1 I 
believe, which is delayed as much as anything because I am halfway 
through catching up the runtime to the Java version ;-)

Jim

> -----Original Message-----
> From: Jan Nielsen [mailto:jan.sture.nielsen at gmail.com]
> Sent: Tuesday, January 29, 2008 5:57 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR code too large
> 
> My ANTLR grammar sippit below generates code that is "too large" from
> a compiler/class-file perspective; if I use the lexer rule DAY_OF_WEEK
> everything is fine but it doesn't parse correctly because of the lack
> of return values. I can use "noinlinedfa" [1] to address the lexer
> rule size* problem, but I'm wondering if there's a better way. In my
> grammar [2], I define a dayOfWeek parser rule (I suppose could pass
> the result back through the parser in a lexer rule action?). Is there
> a better way to do this sort of thing?
> 
> Thanks,
> 
> -Jan
> 
> 
> (*) Does anyone know how to tell the Maven 2 antlr-maven-plugin [3] to
> use -Xnoinlinedfa during the code-generation phase?
> [1] http://www.antlr.org/pipermail/antlr-interest/2007-
> December/025360.html
> [2] http://www.antlr.org/pipermail/antlr-interest/2008-
> January/026019.html
> [3] http://mojo.codehaus.org/antlr-maven-plugin/
> 
> dayOfWeek returns [adc.util.Day value]
> /*
>     : DAY_OF_WEEK                { $value = adc.util.Day.MONDAY; }
>     ;
> */
> 
>     : 'Monday'                   { $value = adc.util.Day.MONDAY; }
>     | 'Tuesday'                  { $value = adc.util.Day.TUESDAY; }
>     | 'Wednesday'                { $value = adc.util.Day.WEDNESDAY; }
>     | 'Thursday'                 { $value = adc.util.Day.THURSDAY; }
>     | 'Friday'                   { $value = adc.util.Day.FRIDAY; }
>     | 'Saturday'                 { $value = adc.util.Day.SATURDAY; }
>     | 'Sunday'                   { $value = adc.util.Day.SUNDAY; }
>     ;
> 
> DAY_OF_WEEK returns [adc.util.Day value]
>     : 'Monday'                   { $value = adc.util.Day.MONDAY; }
>     | 'Tuesday'                  { $value = adc.util.Day.TUESDAY; }
>     | 'Wednesday'                { $value = adc.util.Day.WEDNESDAY; }
>     | 'Thursday'                 { $value = adc.util.Day.THURSDAY; }
>     | 'Friday'                   { $value = adc.util.Day.FRIDAY; }
>     | 'Saturday'                 { $value = adc.util.Day.SATURDAY; }
>     | 'Sunday'                   { $value = adc.util.Day.SUNDAY; }
>     ;



From jimi at temporal-wave.com  Wed Jan 30 08:16:40 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 30 Jan 2008 08:16:40 -0800
Subject: [antlr-interest] Apparently equivalent code refactoring doesn't
	work
In-Reply-To: <b8ceeef70801292102v44c3b091s6cc3aff3c02dce47@mail.gmail.com>
Message-ID: <"L90C0B32685034a0883A26C0B88F0871E.1201711135.scalix.temporal-wave.com*"@MHS>



> -----Original Message-----
> From: Steve Bennett [mailto:stevagewp at gmail.com]
> Sent: Tuesday, January 29, 2008 9:02 PM
> To: antlr-interest
> Subject: [antlr-interest] Apparently equivalent code refactoring
> doesn't work
> 
> Hi all,
> 
> These two code fragments should be effectively equivalent, I think:
> 
> 1:
> 
> internal_link:
>     link_start COLON? pagename (PIPE link_caption?)? link_end
> ((letters)=>link_trail)?
> -> ^(INTERNAL_LINK ^(PAGENAME pagename) ^(TEXT link_caption?
> link_trail?));
> 
> link_caption
> @init {this.caption_levels++;}:
>         simple_text;
> finally {this.caption_levels--; }
> 
> ----
> 
> 2:
> 
> internal_link:
>     link_start COLON? pagename (PIPE link_caption)? link_end
> ((letters)=>link_trail)?
> -> ^(INTERNAL_LINK ^(PAGENAME pagename) ^(TEXT link_caption?
> link_trail?));
> 
> link_caption
> @init {this.caption_levels++; }:
>         simple_text?;
> finally {this.caption_levels--; }
> 
> 
> (the difference being the question mark after 'link_caption' or after
> 'simple_text')
> 

Steve,

You might just try the latest daily build of ANTLR 3.1 and see if that 
changes the behavior.

Jim


From jimi at temporal-wave.com  Wed Jan 30 08:17:14 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 30 Jan 2008 08:17:14 -0800
Subject: [antlr-interest] Modularisation
In-Reply-To: <b8ceeef70801292125r615f74f0m5866934a4eb93ac3@mail.gmail.com>
Message-ID: <"L6AA7658D13774dfb9BA7CC8BF476D930.1201711165.scalix.temporal-wave.com*"@MHS>

Look for grammar inheritance in 3.1

Jim 

> -----Original Message-----
> From: Steve Bennett [mailto:stevagewp at gmail.com]
> Sent: Tuesday, January 29, 2008 9:25 PM
> To: antlr-interest
> Subject: [antlr-interest] Modularisation
> 
> This has probably been asked before, but any prospect of modular
> grammars? Even something as brutal as a #include "myothergrammar.g"
> would help deal with my monolithic grammar...
> 
> Thanks,
> Steve



From jimi at temporal-wave.com  Wed Jan 30 08:26:00 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 30 Jan 2008 08:26:00 -0800
Subject: [antlr-interest] Meaning of the {synpred} objects in the Clif.g
	(ISO Common Logic) parser
In-Reply-To: <07bb01c86346$20b03ae0$6601a8c0@KASHORI001>
Message-ID: <"LCA9F9D3376284b3fB7AA0E08F621A9EA.1201711694.scalix.temporal-wave.com*"@MHS>

The interpreter cannot execute predicates, you need to run it in the
debugger. The syntactic predicates are used to attempt a parse of the
input stream and match the tokens in the predicate. If they match then
that alt is taken, if they do not then that alt is rejected. 

 

Jim

 

From: John Black [mailto:JohnBlack at kashori.com] 
Sent: Wednesday, January 30, 2008 5:44 AM
To: antlr-interest at antlr.org; pando-devel at lists.sourceforge.net;
billanderson at users.sourceforge.net
Subject: [antlr-interest] Meaning of the {synpred} objects in the Clif.g
(ISO Common Logic) parser

 

I have been viewing the Clif.g [1] grammar in AntlrWorks and I am
puzzled by the errors the interpreter produces when I try to parse some
clif strings with that GUI when loaded with that grammer. Here is an
example:

 

*  FailedPredicateException(sentence,{synpred41}?) 

 

I am also curious about boxes shown in the 'Syntax Diagram' with such
names as '{synpred41}',  '{synpred42}', '{synpred43}', shown when
looking at the 'sentence' goal. Can someone point me to documentation
that explains these objects? Or is someone willing to explain them to
me? Also, do they have any affect on the operation of the parser? 

 

I am interested in this now that ISO Common Logic has become an official
ISO standard [2] for symbolic logic and conceptual graphs. Also, I am
interested in helping to get the "ISO Common Logic Tools" [3]
SourceForge project jump started. 

 

Cheers,

John Black

www.kashori.com

 

 

 

1.
http://pando.svn.sourceforge.net/viewvc/pando/code/modules/parsers/src/n
et/sf/pando/parsers/clif3/grammar/Clif3.g?view=log

 

2.
http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?c
snumber=39175

 

3. http://sourceforge.net/projects/common-logic/


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080130/b52bb78f/attachment.html 

From JALuber at gmx.de  Wed Jan 30 12:58:34 2008
From: JALuber at gmx.de (Johannes Luber)
Date: Wed, 30 Jan 2008 21:58:34 +0100
Subject: [antlr-interest] Using antlr under C#
In-Reply-To: <c8c997f40801291702j71be4a73tdbd6758f0814675e@mail.gmail.com>
References: <c8c997f40801291702j71be4a73tdbd6758f0814675e@mail.gmail.com>
Message-ID: <20080130205834.163710@gmx.net>

> I am trying to use Antlr under C# and am finding it frustrating because
> I can't seem to find any clear documentation on how to use it.
> 
> this page:      http://www.antlr.org/api/CSharp/index.html
> linked from this page:      http://www.antlr.org/api/
> gives a 404.
> 
> Installing antlr gives me the .dll's to link with but I can't seem to
> find any info in there to show me what to do with it.
> 
> googel gives me this:  http://www.antlr.org/doc/csharp-runtime.html
> but that just shows up as file not found.
> 
> I found what seems to be a reop here:
> http://fisheye2.cenqua.com/browse/antlr/runtime/CSharp
> but I can't find a way to download more than one file at a time (.zip,
> .tgz and .tbz2 all give corrupt files)
> 
> What I want is enough documentation to be able to figure out what's
> what. Like; how do I manually pull all the tokens from a
> CommonTokenStream? (I'd love the answer to that one but "Teach a man to
> fish...")
> 
> Any help would be appreciated?

I have attached my driver class. I haven't pulled manually tokens yet from a stream, but I believe that NextToken() should do the trick. Would it be possible to write a page on the wiki about things you missed? It would be easier for you than for me, although I'll be of any assistance. :)

Johannes

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger

-- 
Psssst! Schon vom neuen GMX MultiMessenger geh?rt?
Der kann`s mit allen: http://www.gmx.net/de/go/multimessenger
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Tool.cs
Type: text/x-csharp
Size: 2435 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080130/078b0b82/attachment.bin 

From JALuber at gmx.de  Wed Jan 30 13:03:02 2008
From: JALuber at gmx.de (Johannes Luber)
Date: Wed, 30 Jan 2008 22:03:02 +0100
Subject: [antlr-interest] Code generation weirdness?
Message-ID: <20080130210302.244890@gmx.net>

> The problem is that choosing the name "object" is probably a bad idea for
> many reasons, and things blow up.
> _______
> Traceback (most recent call last):
> File "jsonParser.py", line 44, in <module>
> class jsonParser(Parser):
> File "jsonParser.py", line 593, in jsonParser
> class array_return(object):
> TypeError: Error when calling the metaclass bases
> function() argument 1 must be code, not str
> _______
> 
> Changing the grammar's AST tree label to "j_object" fixes the problems.
> 
> Is there a reason that these generated classnames don't have some sort of
> default prefix for language safety? Could such a thing be reasonably
> implemented? It seems like a big pitfall that grammar rule names can
> collide with target language keywords.
> It's possible that there was some warning about this kind of bug and I
> missed it...
> 

I don't know, if the writer did test the grammar or not, but there is no capability for prefixing the function names yet. It is planned to include it sometime in the future although I don't know if Ter already chose a version yet.

Johannes
-- 
GMX FreeMail: 1 GB Postfach, 5 E-Mail-Adressen, 10 Free SMS.
Alle Infos und kostenlose Anmeldung: http://www.gmx.net/de/go/freemail

From nik9000 at gmail.com  Wed Jan 30 13:56:18 2008
From: nik9000 at gmail.com (Nikolas Everett)
Date: Wed, 30 Jan 2008 16:56:18 -0500
Subject: [antlr-interest] Generating initializers and headers
In-Reply-To: <20080129190633.WWAM14752.viefep18-int.chello.at@edge.upc.biz>
References: <d4e11e980801290502n6b26c936g5185ce1f1751325c@mail.gmail.com>
	<20080129190633.WWAM14752.viefep18-int.chello.at@edge.upc.biz>
Message-ID: <d4e11e980801301356g4d3c9fe3p463c966f05914ba2@mail.gmail.com>

So far I think I have two options:

1.  Create a custom StringTemplateGroup which provides string templates that
proxy calls to all the StringTemplates that I'm going to need.  I could pull
out all the stringtemplates that I need and build the files with them.
That'd be simple enough.
2.  Create seperate template grammars that build everything I need.

I'll poke around with these two options and let the group know what I did.

Thanks for the help.

On Jan 29, 2008 2:06 PM, Arnulf Heller <aheller at gmx.at> wrote:

> At 14:02 29.01.2008, you wrote:
> >I've been puzzling over this for a few days, and haven't thought of
> >anything useful, so I figured I'd ask the group.
> >
> >I'm looking to generate C code from antlr/stringtemplate.  I'd like
> >to generate methods in a .c file, method signatures in a .h file,
> >and probably some sort of initialization method in the .c file.  My
> >problem is that any part of the AST could generate code in any of
> >those 3 places.  What is the normal way to handle this?
>
> hi,
>
> look at the ANTLR3 sources (src\org\antlr\codegen\CodeGenerator.java,
> src\org\antlr\codegen\templates\cpp\CPP.stg)
>
> I think this is what you are looking for.
>
> They keep two string templates in a group (that share type
> definitions etc.) and throw the parsing output onto them:
>
>                 headerFileST.setAttribute("actions", actions);
>                 outputFileST.setAttribute("actions", actions);
>                 headerFileST.setAttribute("buildTemplate", new
> Boolean(grammar.buildTemplate()));
>                 outputFileST.setAttribute("buildTemplate", new
> Boolean(grammar.buildTemplate()));
>                 headerFileST.setAttribute("buildAST", new
> Boolean(grammar.buildAST()));
>                 outputFileST.setAttribute("buildAST", new
> Boolean(grammar.buildAST()));
>                 outputFileST.setAttribute("rewriteMode",
> Boolean.valueOf(grammar.rewriteMode()));
>                 headerFileST.setAttribute("rewriteMode",
> Boolean.valueOf(grammar.rewriteMode()));
>                 outputFileST.setAttribute("backtracking",
> Boolean.valueOf(canBacktrack));
>                 headerFileST.setAttribute("backtracking",
> Boolean.valueOf(canBacktrack));
>
> cheers,
> arnulf
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080130/9e028e5e/attachment.html 

From dan.stanger at ieee.org  Wed Jan 30 15:28:51 2008
From: dan.stanger at ieee.org (Dan Stanger)
Date: Wed, 30 Jan 2008 18:28:51 -0500
Subject: [antlr-interest] Template map question
In-Reply-To: <20080130210302.244890@gmx.net>
References: <20080130210302.244890@gmx.net>
Message-ID: <47A10833.9030406@ieee.org>

Hello All,
Is it possible to access a map created in my group file, from the parser,
in a rewrite rule?  I would like to add new mappings to it.
Or would it have to be done in an action?
Are there code samples for either of these?
Thanks,
Dan Stanger


From parrt at cs.usfca.edu  Wed Jan 30 15:36:13 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Wed, 30 Jan 2008 15:36:13 -0800
Subject: [antlr-interest] Template map question
In-Reply-To: <47A10833.9030406@ieee.org>
References: <20080130210302.244890@gmx.net> <47A10833.9030406@ieee.org>
Message-ID: <9E0B3151-C960-48AB-81F2-1549CD897378@cs.usfca.edu>

On Jan 30, 2008, at 3:28 PM, Dan Stanger wrote:
> Hello All,
> Is it possible to access a map created in my group file, from the  
> parser,
> in a rewrite rule?

I believe so yes. just reference it as you would in a group file.

>  I would like to add new mappings to it.

oh.  Well, you would need to have an action not a rewrite rule do  
that. I can't remember the interface, but you would have to ask the ST  
group object for its maps.

> Are there code samples for either of these?

I don't think so.
Ter

From clive.i.hill at jpmorgan.com  Thu Jan 31 08:36:13 2008
From: clive.i.hill at jpmorgan.com (clive.i.hill at jpmorgan.com)
Date: Thu, 31 Jan 2008 16:36:13 +0000
Subject: [antlr-interest] Lexer rule problem - ANTLR 2.7.7
In-Reply-To: <BAY108-W16457A91C3F950D802C2E0D63C0@phx.gbl>
Message-ID: <OFA049176D.097306D0-ON802573E1.00523140-802573E1.005B34F2@jpmchase.com>

Hi,

I have a lexer rule that is meant to match a range of integers or numbers 
in the following style format:

5800:6000
or
1.8:2.0

The lexer rule I have for this is given by:

protected
RANGE 
    : (INT | FLOAT) COLON (INT | FLOAT)
    ;

where INT,FLOAT, DIGIT, DOT and COLON are given at the end of this email.


When I run my parser against the grammar file (attached) with the 
following string:

"ftse dec 5800:6000 c"

I get the following exception:


antlr.TokenStreamRecognitionException: expecting '.', found ':'

This is because the lexer is attempting to parse a RANGE token correctly, 
but is expecting a FLOAT.  My RANGE lexer rule,, it seems to me, should 
check for an INT or  a FLOAT.

This rule seems very uncomplicated, so I can't tell why it is going wrong. 
 Can anyone provide any suggestions?


Thanks in advance,

Clive




protected
FLOAT 
    : DOT INT
    | INT DOT (DIGIT)*
    ;

protected
INT 
    : (DIGIT)+ 
    ;

protected
DIGIT 
    : '0' .. '9'
    ;

COLON
        : ':'
        ;

protected
DOT 
    : '.'
    ;




Generally, this communication is for informational purposes only
and it is not intended as an offer or solicitation for the purchase
or sale of any financial instrument or as an official confirmation
of any transaction. In the event you are receiving the offering
materials attached below related to your interest in hedge funds or
private equity, this communication may be intended as an offer or
solicitation for the purchase or sale of such fund(s).  All market
prices, data and other information are not warranted as to
completeness or accuracy and are subject to change without notice.
Any comments or statements made herein do not necessarily reflect
those of JPMorgan Chase & Co., its subsidiaries and affiliates.

This transmission may contain information that is privileged,
confidential, legally privileged, and/or exempt from disclosure
under applicable law. If you are not the intended recipient, you
are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance
thereon) is STRICTLY PROHIBITED. Although this transmission and any
attachments are believed to be free of any virus or other defect
that might affect any computer system into which it is received and
opened, it is the responsibility of the recipient to ensure that it
is virus free and no responsibility is accepted by JPMorgan Chase &
Co., its subsidiaries and affiliates, as applicable, for any loss
or damage arising in any way from its use. If you received this
transmission in error, please immediately contact the sender and
destroy the material in its entirety, whether in electronic or hard
copy format. Thank you.
Please refer to http://www.jpmorgan.com/pages/disclosures for
disclosures relating to UK legal entities.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/ae884b7e/attachment-0001.html 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: strategy.g.zip
Type: application/zip
Size: 4987 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/ae884b7e/attachment-0001.zip 

From Waverly.Edwards at genesys.com  Thu Jan 31 08:53:17 2008
From: Waverly.Edwards at genesys.com (Edwards, Waverly)
Date: Thu, 31 Jan 2008 11:53:17 -0500
Subject: [antlr-interest] Lexer rule problem - ANTLR 2.7.7
In-Reply-To: <OFA049176D.097306D0-ON802573E1.00523140-802573E1.005B34F2@jpmchase.com>
References: <BAY108-W16457A91C3F950D802C2E0D63C0@phx.gbl>
	<OFA049176D.097306D0-ON802573E1.00523140-802573E1.005B34F2@jpmchase.com>
Message-ID: <FF993752CB890B4EB591BE5450C37BF1EF2D6C@navamane001.ad.internal.corp>

I'm not sure I understand the problem but shouldn't float be
 
fragment
FLOAT       
    : DOT INT 
    | INT DOT INT 
    ; 

INT DOT (DIGIT)*  says you have and integer followed by a dot followed
by zero or more digits so you could end up
with something unstable like this 
 
5000.
 
 
It also looks to me that you need two different types of ranges,
an int range and a float range.
 
What would happen if you ran across unvalidated input such as this
 
5800:2.0
 
fragment
INTRANGE       
    : INT COLON INT 
    ; 
 
fragment
FLOATRANGE       
    : FLOAT COLON  FLOAT
    ; 

I don't know if that solves your issue but it eliminates another.
 
 
W.

________________________________

From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of
clive.i.hill at jpmorgan.com
Sent: Thursday, January 31, 2008 11:36 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Lexer rule problem - ANTLR 2.7.7



Hi, 

I have a lexer rule that is meant to match a range of integers or
numbers in the following style format: 

5800:6000 
or 
1.8:2.0 

The lexer rule I have for this is given by: 

protected 
RANGE       
    : (INT | FLOAT) COLON (INT | FLOAT) 
    ; 

where INT,FLOAT, DIGIT, DOT and COLON are given at the end of this
email. 


When I run my parser against the grammar file (attached) with the
following string: 

"ftse dec 5800:6000 c" 

I get the following exception: 


antlr.TokenStreamRecognitionException: expecting '.', found ':'


This is because the lexer is attempting to parse a RANGE token
correctly, but is expecting a FLOAT.  My RANGE lexer rule,, it seems to
me, should check for an INT or  a FLOAT. 

This rule seems very uncomplicated, so I can't tell why it is going
wrong.  Can anyone provide any suggestions? 


Thanks in advance, 

Clive 




protected 
FLOAT       
    : DOT INT 
    | INT DOT (DIGIT)* 
    ; 

protected 
INT         
    : (DIGIT)+ 
    ; 

protected 
DIGIT       
    : '0' .. '9' 
    ; 

COLON 
        : ':' 
        ; 

protected 
DOT         
    : '.' 
    ; 




________________________________

Generally, this communication is for informational purposes only and it
is not intended as an offer or solicitation for the purchase or sale of
any financial instrument or as an official confirmation of any
transaction. In the event you are receiving the offering materials
attached below related to your interest in hedge funds or private
equity, this communication may be intended as an offer or solicitation
for the purchase or sale of such fund(s). All market prices, data and
other information are not warranted as to completeness or accuracy and
are subject to change without notice. Any comments or statements made
herein do not necessarily reflect those of JPMorgan Chase & Co., its
subsidiaries and affiliates. This transmission may contain information
that is privileged, confidential, legally privileged, and/or exempt from
disclosure under applicable law. If you are not the intended recipient,
you are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance thereon)
is STRICTLY PROHIBITED. Although this transmission and any attachments
are believed to be free of any virus or other defect that might affect
any computer system into which it is received and opened, it is the
responsibility of the recipient to ensure that it is virus free and no
responsibility is accepted by JPMorgan Chase & Co., its subsidiaries and
affiliates, as applicable, for any loss or damage arising in any way
from its use. If you received this transmission in error, please
immediately contact the sender and destroy the material in its entirety,
whether in electronic or hard copy format. Thank you. Please refer to
http://www.jpmorgan.com/pages/disclosures for disclosures relating to UK
legal entities. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/9e55b34e/attachment.html 

From jimi at temporal-wave.com  Thu Jan 31 08:42:01 2008
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 31 Jan 2008 08:42:01 -0800
Subject: [antlr-interest] Lexer rule problem - ANTLR 2.7.7
In-Reply-To: <OFA049176D.097306D0-ON802573E1.00523140-802573E1.005B34F2@jpmchase.com>
Message-ID: <"L6E71447C031044ccA8630A85AD6D7380.1201799064.scalix.temporal-wave.com*"@MHS>

Clive,

 

This should help you:

 

http://www.antlr.org/pipermail/antlr-interest/2007-October/024345.h
tml

 

Except in that example use COLON rather than a separate RANGE token.

 

Jim

 

From: clive.i.hill at jpmorgan.com [mailto:clive.i.hill at jpmorgan.com] 
Sent: Thursday, January 31, 2008 8:36 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Lexer rule problem - ANTLR 2.7.7

 


Hi, 

I have a lexer rule that is meant to match a range of integers or
numbers in the following style format: 

5800:6000 
or 
1.8:2.0 

The lexer rule I have for this is given by: 

protected 
RANGE       
    : (INT | FLOAT) COLON (INT | FLOAT) 
    ; 

where INT,FLOAT, DIGIT, DOT and COLON are given at the end of this
email. 


When I run my parser against the grammar file (attached) with the
following string: 

"ftse dec 5800:6000 c" 

I get the following exception: 

antlr.TokenStreamRecognitionException: expecting '.', found ':'



This is because the lexer is attempting to parse a RANGE token
correctly, but is expecting a FLOAT.  My RANGE lexer rule,, it seems to
me, should check for an INT or  a FLOAT. 

This rule seems very uncomplicated, so I can't tell why it is going
wrong.  Can anyone provide any suggestions? 


Thanks in advance, 

Clive 




protected 
FLOAT       
    : DOT INT 
    | INT DOT (DIGIT)* 
    ; 

protected 
INT         
    : (DIGIT)+ 
    ; 

protected 
DIGIT       
    : '0' .. '9' 
    ; 

COLON 
        : ':' 
        ; 

protected 
DOT         
    : '.' 
    ; 



  _____  

Generally, this communication is for informational purposes only and it
is not intended as an offer or solicitation for the purchase or sale of
any financial instrument or as an official confirmation of any
transaction. In the event you are receiving the offering materials
attached below related to your interest in hedge funds or private
equity, this communication may be intended as an offer or solicitation
for the purchase or sale of such fund(s). All market prices, data and
other information are not warranted as to completeness or accuracy and
are subject to change without notice. Any comments or statements made
herein do not necessarily reflect those of JPMorgan Chase & Co., its
subsidiaries and affiliates. This transmission may contain information
that is privileged, confidential, legally privileged, and/or exempt from
disclosure under applicable law. If you are not the intended recipient,
you are hereby notified that any disclosure, copying, distribution, or
use of the information contained herein (including any reliance thereon)
is STRICTLY PROHIBITED. Although this transmission and any attachments
are believed to be free of any virus or other defect that might affect
any computer system into which it is received and opened, it is the
responsibility of the recipient to ensure that it is virus free and no
responsibility is accepted by JPMorgan Chase & Co., its subsidiaries and
affiliates, as applicable, for any loss or damage arising in any way
from its use. If you received this transmission in error, please
immediately contact the sender and destroy the material in its entirety,
whether in electronic or hard copy format. Thank you. Please refer to
http://www.jpmorgan.com/pages/disclosures for disclosures relating to UK
legal entities. 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/8ef512a8/attachment-0001.html 

From marco.neumann at gmail.com  Thu Jan 31 09:36:02 2008
From: marco.neumann at gmail.com (Marco Neumann)
Date: Thu, 31 Jan 2008 12:36:02 -0500
Subject: [antlr-interest] New York Semantic Web Meetup : ANTLR
	Introduction
In-Reply-To: <844a8dbf0801201506y42f6d910x6f5144a2f95d81de@mail.gmail.com>
References: <844a8dbf0801201506y42f6d910x6f5144a2f95d81de@mail.gmail.com>
Message-ID: <844a8dbf0801310936p24bff935ua7ada143acec518f@mail.gmail.com>

Thank you again Terence for the invitation to post here. I was able to
successfully find high quality speakers for the upcoming Semantic Web
Meetup. Andy Tripp will give us an introduction to ANTLR in New York City on
February 21.

I would like to invite all interested antlr users/developer to attend this
session.

Best,
Marco

http://semweb.meetup.com/25/

*An Introduction to ANTLR*
*Andy Tripp*
Jazillian
http://www.jazillian.com

Automatic machine translation and language parsing. ANTLR, Another Tool for
Language Recognition, is a language tool that provides a framework for
constructing recognizers, interpreters, compilers, and translators from
grammatical descriptions containing actions in a variety of target
languages. The SPARQL query language grammar for ANTLR v3 was recently
updated to version 1.1 and provides an implementation of the W3C SPARQL
grammar specification.

http://www.antlr.org

*Lingpipe @ Work: Use case National Institutes of Health (NIH)*
*Breck Baldwin*
LingPipe, Alias-I
http://www.alias-i.com

Natural language processing for text analytics, text data mining and search.
LingPipe is a state-of-the-art suite of natural language processing tools
written in Java that performs tokenization, sentence detection, named entity
detection, coreference resolution, classification, clustering,
part-of-speech tagging, general chunking, fuzzy dictionary matching. These
general tools support a range of applications.
<http://semweb.meetup.com/25/>



On Jan 20, 2008 6:06 PM, Marco Neumann <marco.neumann at gmail.com> wrote:

> Hi ANTLR Developer,
>
> I am the organizer of the New York Semantic Web SIG/Meetup and was
> wondering if you could recommend an ANTLR expert in the New York City area,
> I would like to invite him/her to present ANTLR  at one of our upcoming
> meetings.
>
>  http://www.swnyc.org
>  http://semweb.meetup.com/25/
>
> We typically have 15-25 people attending the sessions (from ~140 people on
> the groups mailing list). Speakers have an 1h 1/2 to present a topic related
> to efforts in the Semantic Web space. Our group is composed of practitioners
> and researchers in the New York Metro Area with a diverse background in
> fields such as financial, biopharm, business intelligence, marketing, media,
> programmers, computer science students, job seekers and entrepreneurs.
>
> It is a great way for the group to learn about ANTLR, its features and
> possible (existing)  integration into Semantic Web applications.
>
> All The Best,
> Marco
>
> New York Semantic Web Meetup
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/f01f8956/attachment.html 

From lefevrol at yahoo.com  Thu Jan 31 09:42:07 2008
From: lefevrol at yahoo.com (Olivier Lefevre)
Date: Thu, 31 Jan 2008 18:42:07 +0100
Subject: [antlr-interest] Just plain var or $var.value?
Message-ID: <fnt19o$a8n$1@ger.gmane.org>

Still reading the book. Comparing tour/tree/Eval.g
and tour/eval/Eval.g I was struck by the difference
between, say, "a+b" in the former vs. "$e.value" in
the latter. I tried changing accesses in the first
file from the "var" to "$var.$value" form and vice-
versa in the latter file and in both cases it seemed
to work.

This is a bit confusing. Is it a kind of syntactic sugar?
Clearly the two forms are not always equivalent since,
e.g, replacing "$e.value" by "e" in the latter file is
ok but if you replace "$expr.value" by "expr" antlr does
not complain (maybe it should?) but EvalParser will not
compile. What is going on here and in which section of
the manual is it fully spec'ed out?

Thanks,

-- O.L.


From belayda at gmail.com  Thu Jan 31 09:44:30 2008
From: belayda at gmail.com (Bernardo Elayda)
Date: Thu, 31 Jan 2008 09:44:30 -0800
Subject: [antlr-interest] For Antlr 3.0.1 should stringtemplate 3.1 or 3.1b1
	be used?
Message-ID: <3e5ed32f0801310944i5177a1cdr2b823f0e84d84bff@mail.gmail.com>

Hi!

Antlr 3.0.1 is shipping with StringTemplate-3.1b1.jar.

Can this safely be replaced with StringTemplate-3.1.jar?  I couldn'f find
anything that said if this was the right thing to do.

thx in advance!

-Bernardo Elayda
Tripe.......the other white meat
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/02fde748/attachment.html 

From mark.edgeworth at scarletcode.co.uk  Thu Jan 31 10:14:07 2008
From: mark.edgeworth at scarletcode.co.uk (Mark Edgeworth)
Date: Thu, 31 Jan 2008 18:14:07 -0000
Subject: [antlr-interest] Lexer rule problem - ANTLR 2.7.7
In-Reply-To: <mailman.9370.1201799079.2502.antlr-interest@antlr.org>
Message-ID: <005601c86435$1710cb40$0300a8c0@chesterford>

Hi,

Thanks Jim for a note on a solution to this.  However, is it possible to
detect this condition pre-code generation and hence avoid a runtime error
when the developer happens to use the right (wrong?) data. 

As a relatively new user of ANTLR I have spent literally ages on just this
sort of issue recently.  ANTLR is a great tool and just so powerful, but
will often accept 'unusual' grammar constructs from newbies like me that can
never work properly.  Any extra build time checks are worth their weight in
gold to me as I learn... (ie 'lint' for .g files?)

Ta,

Mark Edgeworth

This is in response to Clive Hill's original question which starts:
>>
>>I have a lexer rule that is meant to match a range of integers or
>>numbers in the following style format: 
>>
>>5800:6000 
>>or 
>>1.8:2.0 
>> snip...snip


From darien.hager at etelos-inc.com  Thu Jan 31 10:15:23 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Thu, 31 Jan 2008 10:15:23 -0800
Subject: [antlr-interest] Languages within HTML
Message-ID: <c8c997f40801311015k32aa293eo7aedbde9864b00ec@mail.gmail.com>

I'm experimenting with ANTLR to try to solve a particular problem, and I'd
like to check some assumptions and ask for any suggestions.

Situation: I have an HTML file with boundaries defining blocks of embedded
code, such as PHP and JSP. More than one language can be embedded.

Suppose PHP blocks are encapsulated with <? ?> markers, and JSP blocks in <%
%> markers.

What I want to do is analyze the file and create a AST tree that begins with
line of siblings for each segment. (e.g. HTML, PHP, HTML, JSP, PHP, HTML,
PHP)

However, don't want it to be so naive that a properly-quoted end-marker will
be wrongly hit e.g. : <? echo("?>"); ?>

Question: Is the only robust way to do this to create (or re-use) grammars
for PHP and JSP?
I'm assuming the answer is yes, in which case
it's no longer a small experiment anymore.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/ee0ca457/attachment.html 

From parrt at cs.usfca.edu  Thu Jan 31 11:19:07 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 31 Jan 2008 11:19:07 -0800
Subject: [antlr-interest] For Antlr 3.0.1 should stringtemplate 3.1 or
	3.1b1 be used?
In-Reply-To: <3e5ed32f0801310944i5177a1cdr2b823f0e84d84bff@mail.gmail.com>
References: <3e5ed32f0801310944i5177a1cdr2b823f0e84d84bff@mail.gmail.com>
Message-ID: <B2868DB9-AB03-4942-B2C3-E108C6A410B6@cs.usfca.edu>


On Jan 31, 2008, at 9:44 AM, Bernardo Elayda wrote:

> Hi!
>
> Antlr 3.0.1 is shipping with StringTemplate-3.1b1.jar.
>
> Can this safely be replaced with StringTemplate-3.1.jar?

yes.

Ter

From monty at codetransform.com  Thu Jan 31 12:24:02 2008
From: monty at codetransform.com (Monty Zukowski)
Date: Thu, 31 Jan 2008 12:24:02 -0800
Subject: [antlr-interest] Languages within HTML
In-Reply-To: <c8c997f40801311015k32aa293eo7aedbde9864b00ec@mail.gmail.com>
References: <c8c997f40801311015k32aa293eo7aedbde9864b00ec@mail.gmail.com>
Message-ID: <598864c70801311224s6774ac4dy26f63593cfb342d9@mail.gmail.com>

You could probably get pretty far just by handling strings, comments &
escape sequences for each embedded language.

Monty

On Jan 31, 2008 10:15 AM, Darien Hager <darien.hager at etelos-inc.com> wrote:
> I'm experimenting with ANTLR to try to solve a particular problem, and I'd
> like to check some assumptions and ask for any suggestions.
>
> Situation: I have an HTML file with boundaries defining blocks of embedded
> code, such as PHP and JSP. More than one language can be embedded.
>
> Suppose PHP blocks are encapsulated with <? ?> markers, and JSP blocks in <%
> %> markers.
>
> What I want to do is analyze the file and create a AST tree that begins with
> line of siblings for each segment. (e.g. HTML, PHP, HTML, JSP, PHP, HTML,
> PHP)
>
> However, don't want it to be so naive that a properly-quoted end-marker will
> be wrongly hit e.g. : <? echo("?>"); ?>
>
> Question: Is the only robust way to do this to create (or re-use) grammars
> for PHP and JSP?
>  I'm assuming the answer is yes, in which case it's no longer a small
> experiment anymore.
>
> --
> Darien Hager
> Developer
> Etelos, Inc.
> darien at etelos.com
>
> http://www.etelos.com
> "Revolutionizing the way applications are developed, distributed and
> consumed."
>
> This e-mail message, including attachments, may contain confidential
> information for the sole use of the intended recipient(s). If you are not
> the intended recipient, then this is notice that any use, disclosure,
> dissemination, distribution or copying is strictly prohibited. If you have
> received this message in error please contact the sender by reply mail and
> destroy all copies of the original message.

From SWatt at infobal.com  Thu Jan 31 13:00:55 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Thu, 31 Jan 2008 16:00:55 -0500
Subject: [antlr-interest] Languages within HTML
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DADCD@EXSVR1>

An intriguing problem. I did not expect this work in PHP, and if the PHP was
intended to be processable as XML it would be invalid, as the markup tags
would cease to be processing instructions. PHP authors are usually
encouraged to do <? echo("?".">"); ?> or similar. I have a feeling ASP is
simpler, with the tags being processed before the source code is parsed,
because ASP allows multiple languages it has to work differently.

So it seems like the PHP processor behaves as if it starts in HTML mode, and
transforms (incrementally) everything up to "<?" into what behaves like an
echo statement. It then drops into PHP mode and parses (again incrementally)
until it hits "?>" where it would accept a statement terminator, switching
back into HTML and repeating. This is not at all what I had expected, and
implies all sorts of problems mixing JSP/ASP and PHP anyway, as JSP is
implemented as a rewrite, more or less. 

This processing model implies that PHP may need to be the "root" grammar,
with the HTML elements handed off to other grammars if and when needed.
Other grammars can be identified (partly!) by the tags, but <% ... %> can be
Java, JavaScript, VB, even Perl. I haven't tested any of these awkward cases
(such as Perl's heredoc) but I would guess (And it is a guess) that it is
PHP that is the oddity here. 

I've started to look at Pygments as a solution to doing code highlighting.
It does not parse deeply, but for segmenting stuff and handing things off
between different languages, particularly PHP/HTML/JSP/ASP, it works well.
However, it would be confused by this example. 

All the best
Stuart

-----Original Message-----
From: Monty Zukowski [mailto:monty at codetransform.com]
Sent: Thursday, January 31, 2008 3:24 PM
To: Darien Hager
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Languages within HTML


You could probably get pretty far just by handling strings, comments &
escape sequences for each embedded language.

Monty

On Jan 31, 2008 10:15 AM, Darien Hager <darien.hager at etelos-inc.com> wrote:
> I'm experimenting with ANTLR to try to solve a particular problem, and I'd
> like to check some assumptions and ask for any suggestions.
>
> Situation: I have an HTML file with boundaries defining blocks of embedded
> code, such as PHP and JSP. More than one language can be embedded.
>
> Suppose PHP blocks are encapsulated with <? ?> markers, and JSP blocks in
<%
> %> markers.
>
> What I want to do is analyze the file and create a AST tree that begins
with
> line of siblings for each segment. (e.g. HTML, PHP, HTML, JSP, PHP, HTML,
> PHP)
>
> However, don't want it to be so naive that a properly-quoted end-marker
will
> be wrongly hit e.g. : <? echo("?>"); ?>
>
> Question: Is the only robust way to do this to create (or re-use) grammars
> for PHP and JSP?
>  I'm assuming the answer is yes, in which case it's no longer a small
> experiment anymore.
>
> --
> Darien Hager
> Developer
> Etelos, Inc.
> darien at etelos.com
>
> http://www.etelos.com
> "Revolutionizing the way applications are developed, distributed and
> consumed."
>
> This e-mail message, including attachments, may contain confidential
> information for the sole use of the intended recipient(s). If you are not
> the intended recipient, then this is notice that any use, disclosure,
> dissemination, distribution or copying is strictly prohibited. If you have
> received this message in error please contact the sender by reply mail and
> destroy all copies of the original message.

From darien.hager at etelos-inc.com  Thu Jan 31 13:41:25 2008
From: darien.hager at etelos-inc.com (Darien Hager)
Date: Thu, 31 Jan 2008 13:41:25 -0800
Subject: [antlr-interest] Languages within HTML
In-Reply-To: <96AD91D781CCD511A66000B0D0D15C49043DADCD@EXSVR1>
References: <96AD91D781CCD511A66000B0D0D15C49043DADCD@EXSVR1>
Message-ID: <c8c997f40801311341o2a6c88c2p7aea1df99db9dac2@mail.gmail.com>

On 1/31/08, Stuart Watt <SWatt at infobal.com> wrote:
>
> An intriguing problem. I did not expect this work in PHP, and if the PHP
> was
> intended to be processable as XML it would be invalid, as the markup tags
> would cease to be processing instructions. PHP authors are usually
> encouraged to do <? echo("?".">"); ?> or similar. I
>
> This processing model implies that PHP may need to be the "root" grammar,
> with the HTML elements handed off to other grammars if and when needed.
>

It's a good question: Is the PHP parsing engine too lenient, and
should normatively
fail in that example to comply with XML processing instruction rules? I
don't think you can put CDATA inside PI blocks...

I'm not sure if the PHP language has "embeddable in accordance with XML" in
it's specs or whether it's just a happenstance similar naming from something
in SGML.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com

http://www.etelos.com
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/418e9ca5/attachment.html 

From SWatt at infobal.com  Thu Jan 31 14:11:34 2008
From: SWatt at infobal.com (Stuart Watt)
Date: Thu, 31 Jan 2008 17:11:34 -0500
Subject: [antlr-interest] Languages within HTML
Message-ID: <96AD91D781CCD511A66000B0D0D15C49043DADCE@EXSVR1>

If PHP required XML, you're right, it should fail - and PHP does say
 
Note: Also note that if you are embedding PHP within XML or XHTML you will
need to use the <?php ?> tags to remain compliant with standards. (
<http://www.php.net/manual/en/language.basic-syntax.php>
http://www.php.net/manual/en/language.basic-syntax.php) 
 
I suppose this is less of an issue when PHP is generating plain text (I've
used it to generate email messages). However, the PHP / XML processing
instruction discussion is both extensive and tense.
 
The issue that surprised me is that PHP cannot be segmented by any simple
form of island grammar, specialised to the start/end tags. I am pretty
certain that ASP and its various clones and specialisations can be segmented
in this way. (The real driver for this is Windows scripting, which allows
multiple server-side languages in one page (although this is now deprecated,
I believe, and probably was never really a good idea!). 
 
It feels like there is a tradeoff here between *always doing the right
thing* (which may never be entirely possible, as the language between <% ...
%> can be almost anything, even including PHP and doing a good job.
 
The impression I get from
http://www.php.net/manual/en/language.basic-syntax.php
<http://www.php.net/manual/en/language.basic-syntax.php>  is that people are
discouraged from doing stuff like <?php echo("?>"); ?>, but still may do so.

 
Incidentally, another even less pleasant version is:
 
<?php
echo <<<EOT
<?xml version="1.0"?>
And this should be PHP
EOT;
?>
and now back to HTML
 
Frankly, I am amazed this works. It shows that to determine the end of a PHP
tag requires a full PHP lex (at least) from the start of the PHP tag,
wherever that happens to be in the text. In practice, PHP seems to do a
parse -- but I have been caught before by PHP's syntax error handling, which
tended to eagerly cause fatal and uncatchable parse errors. 
 
All the best
Stuart

-----Original Message-----
From: Darien Hager [mailto:darien.hager at etelos-inc.com]
Sent: Thursday, January 31, 2008 4:41 PM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Languages within HTML


On 1/31/08, Stuart Watt < SWatt at infobal.com <mailto:SWatt at infobal.com> >
wrote: 

An intriguing problem. I did not expect this work in PHP, and if the PHP was
intended to be processable as XML it would be invalid, as the markup tags
would cease to be processing instructions. PHP authors are usually
encouraged to do <? echo("?".">"); ?> or similar. I

This processing model implies that PHP may need to be the "root" grammar,
with the HTML elements handed off to other grammars if and when needed.



It's a good question: Is the PHP parsing engine too lenient, and should
normatively fail in that example to comply with XML processing instruction
rules? I don't think you can put CDATA inside PI blocks...

I'm not sure if the PHP language has "embeddable in accordance with XML" in
it's specs or whether it's just a happenstance similar naming from something
in SGML.

-- 
Darien Hager
Developer
Etelos, Inc.
darien at etelos.com <mailto:darien at etelos.com>  

http://www.etelos.com <http://www.etelos.com> 
"Revolutionizing the way applications are developed, distributed and
consumed."

This e-mail message, including attachments, may contain confidential
information for the sole use of the intended recipient(s). If you are not
the intended recipient, then this is notice that any use, disclosure,
dissemination, distribution or copying is strictly prohibited. If you have
received this message in error please contact the sender by reply mail and
destroy all copies of the original message. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/ac77caf8/attachment.html 

From matthieu at offthelip.org  Thu Jan 31 15:15:31 2008
From: matthieu at offthelip.org (Matthieu Riou)
Date: Thu, 31 Jan 2008 15:15:31 -0800
Subject: [antlr-interest] Impossible to reference more than one global scope?
Message-ID: <fbdc6a970801311515i1cf98bbfrae1f8e6c93510c41@mail.gmail.com>

Hi,

I've having some problems with a rule that needs to reference two global
scopes:

scope BPELScope { OScope oscope; }
scope Parent { OActivity activity; }
...
process
scope BPELScope, Parent;
        :           ...

This leads to a "expecting SEMI, found ',' " error. Moreover the java code
generated is missing a stack push as I only have the following:

Parent_stack.push(new Parent_scope());

The BPELScope stack should also be pushed a new value but it's not,
resulting in an EmptyStackException at runtime. I also tried specifying the
two scopes as two different lines like this:

process
scope BPELScope;
scope Parent;
        :           ...

The error disappears but the call to push a new value in the stack is still
missing resulting in the same EmptyStackException. Am I missing the right
way to specify several global scope references or is it a bug?

Thanks,
Matthieu
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/2bd065a8/attachment-0001.html 

From matthieu at offthelip.org  Thu Jan 31 15:36:15 2008
From: matthieu at offthelip.org (Matthieu Riou)
Date: Thu, 31 Jan 2008 15:36:15 -0800
Subject: [antlr-interest] Impossible to reference more than one global
	scope?
In-Reply-To: <fbdc6a970801311515i1cf98bbfrae1f8e6c93510c41@mail.gmail.com>
References: <fbdc6a970801311515i1cf98bbfrae1f8e6c93510c41@mail.gmail.com>
Message-ID: <fbdc6a970801311536k32c8c5f9j5c717236d8d83090@mail.gmail.com>

I found the solution by looking into the codegen grammar. Apparently several
scopes should be declared simply by separating them with a space like this:

process
scope BPELScope Parent;
        :           ...

Maybe this should be documented somewhere (it's not in the book) and the
grammar posted online( [1] which seems to be indicating colons in the
ruleScopeSpec rule) should be updated?

Thanks,
Matthieu

[1] http://www.antlr.org/grammar/ANTLR/ANTLRv3.g

On Jan 31, 2008 3:15 PM, Matthieu Riou <matthieu at offthelip.org> wrote:

> Hi,
>
> I've having some problems with a rule that needs to reference two global
> scopes:
>
> scope BPELScope { OScope oscope; }
> scope Parent { OActivity activity; }
> ...
> process
> scope BPELScope, Parent;
>         :           ...
>
> This leads to a "expecting SEMI, found ',' " error. Moreover the java code
> generated is missing a stack push as I only have the following:
>
> Parent_stack.push(new Parent_scope());
>
> The BPELScope stack should also be pushed a new value but it's not,
> resulting in an EmptyStackException at runtime. I also tried specifying the
> two scopes as two different lines like this:
>
> process
> scope BPELScope;
> scope Parent;
>         :           ...
>
> The error disappears but the call to push a new value in the stack is
> still missing resulting in the same EmptyStackException. Am I missing the
> right way to specify several global scope references or is it a bug?
>
> Thanks,
> Matthieu
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/355288f4/attachment.html 

From parrt at cs.usfca.edu  Thu Jan 31 17:24:34 2008
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 31 Jan 2008 17:24:34 -0800
Subject: [antlr-interest] Impossible to reference more than one global
	scope?
In-Reply-To: <fbdc6a970801311536k32c8c5f9j5c717236d8d83090@mail.gmail.com>
References: <fbdc6a970801311515i1cf98bbfrae1f8e6c93510c41@mail.gmail.com>
	<fbdc6a970801311536k32c8c5f9j5c717236d8d83090@mail.gmail.com>
Message-ID: <62377207-A297-4E0C-8BE8-42806B3E5E4D@cs.usfca.edu>

Hmm...scope be

scope A, B, C;

i thought.  Wow, did i forget the COMMA?

Ter
On Jan 31, 2008, at 3:36 PM, Matthieu Riou wrote:

> I found the solution by looking into the codegen grammar. Apparently  
> several scopes should be declared simply by separating them with a  
> space like this:
>
> process
> scope BPELScope Parent;
>         :           ...
>
> Maybe this should be documented somewhere (it's not in the book) and  
> the grammar posted online( [1] which seems to be indicating colons  
> in the ruleScopeSpec rule) should be updated?
>
> Thanks,
> Matthieu
>
> [1] http://www.antlr.org/grammar/ANTLR/ANTLRv3.g
>
> On Jan 31, 2008 3:15 PM, Matthieu Riou <matthieu at offthelip.org> wrote:
> Hi,
>
> I've having some problems with a rule that needs to reference two  
> global scopes:
>
> scope BPELScope { OScope oscope; }
> scope Parent { OActivity activity; }
> ...
> process
> scope BPELScope, Parent;
>         :           ...
>
> This leads to a "expecting SEMI, found ',' " error. Moreover the  
> java code generated is missing a stack push as I only have the  
> following:
>
> Parent_stack.push(new Parent_scope());
>
> The BPELScope stack should also be pushed a new value but it's not,  
> resulting in an EmptyStackException at runtime. I also tried  
> specifying the two scopes as two different lines like this:
>
> process
> scope BPELScope;
> scope Parent;
>         :           ...
>
> The error disappears but the call to push a new value in the stack  
> is still missing resulting in the same EmptyStackException. Am I  
> missing the right way to specify several global scope references or  
> is it a bug?
>
> Thanks,
> Matthieu
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://www.antlr.org/pipermail/antlr-interest/attachments/20080131/8ecf2a9c/attachment.html 

From dan.stanger at ieee.org  Thu Jan 31 17:49:19 2008
From: dan.stanger at ieee.org (Dan Stanger)
Date: Thu, 31 Jan 2008 20:49:19 -0500
Subject: [antlr-interest] Template map question
In-Reply-To: <9E0B3151-C960-48AB-81F2-1549CD897378@cs.usfca.edu>
References: <20080130210302.244890@gmx.net> <47A10833.9030406@ieee.org>
	<9E0B3151-C960-48AB-81F2-1549CD897378@cs.usfca.edu>
Message-ID: <47A27A9F.5030102@ieee.org>

Hello All,
Is there a function to return a list of the maps in a template object?
Also, is there a antlr syntax to retrieve attributes from a template?
I would like to get values stored in a template created by one rule in 
another,
when a grammar is creating templates.
Thanks,
Dan Stanger
Terence Parr wrote:

> On Jan 30, 2008, at 3:28 PM, Dan Stanger wrote:
>
>> Hello All,
>> Is it possible to access a map created in my group file, from the  
>> parser,
>> in a rewrite rule?
>
>
> I believe so yes. just reference it as you would in a group file.
>
>>  I would like to add new mappings to it.
>
>
> oh.  Well, you would need to have an action not a rewrite rule do  
> that. I can't remember the interface, but you would have to ask the 
> ST  group object for its maps.
>
>> Are there code samples for either of these?
>
>
> I don't think so.
> Ter
>


From antlr-list at arizona-software.ch  Thu Jan 31 22:23:21 2008
From: antlr-list at arizona-software.ch (Jean Bovet)
Date: Thu, 31 Jan 2008 22:23:21 -0800
Subject: [antlr-interest]  ANTLRWorks 1.1.7 released
Message-ID: <38F01F73-B368-4D48-915C-96E3DC77AF3D@arizona-software.ch>

Hi,

ANTLRWorks 1.1.7 is available and fixes the problem of the faulty  
constructor when generating the test rig in the debugger.

Note that this version of ANTLRWorks ships with ANTLR 3.0.1. Once  
ANTLR 3.1 is available, ANTLRWorks will be updated.

Regards,

Jean

From antlr at mirality.co.nz  Thu Jan 31 23:45:09 2008
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Fri, 01 Feb 2008 20:45:09 +1300
Subject: [antlr-interest] Lexer rule problem - ANTLR 2.7.7
In-Reply-To: <005601c86435$1710cb40$0300a8c0@chesterford>
References: <mailman.9370.1201799079.2502.antlr-interest@antlr.org>
	<005601c86435$1710cb40$0300a8c0@chesterford>
Message-ID: <20080201074527.AF0DB11EBBE@www.antlr.org>

At 07:14 1/02/2008, Mark Edgeworth wrote:
 >As a relatively new user of ANTLR I have spent literally ages on 

 >just this sort of issue recently.  ANTLR is a great tool and 
just
 >so powerful, but will often accept 'unusual' grammar constructs
 >from newbies like me that can never work properly.  Any extra
 >build time checks are worth their weight in gold to me as I
 >learn... (ie 'lint' for .g files?)

Unit testing.  Construct a test harness for your lexer/parser in 
the language of your choice (eg. via JUnit, NUnit, CppUnit, or one 
of the many other frameworks) and run it frequently to ensure that 
changes you've made to your grammar haven't broken anything.

It's not quite build time (although it could be -- some build 
utilities can automatically run tests after building) but it's 
very specific and helps you make sure that your parser is doing 
what you think it's doing.

It's especially useful for testing the lexer in isolation, since 
you can't really do that properly in ANTLRworks.


From stevagewp at gmail.com  Thu Jan 31 23:58:36 2008
From: stevagewp at gmail.com (Steve Bennett)
Date: Fri, 1 Feb 2008 18:58:36 +1100
Subject: [antlr-interest] Bug? "new (new" code generated.
Message-ID: <b8ceeef70801312358ia29d6f3n3abe85bf8f1f25dd@mail.gmail.com>

I split a working grammar into a lexer and parser. Using Antlrworks
1.1.7, I now get this error:

[18:36:53] C:\antlr\__Test__.java:9: <identifier> expected
[18:36:53]  lex = new (new ANTLRFileStream("C:\\antlr\\__Test___input.txt"));
[18:36:53]            ^
[18:36:53] C:\antlr\__Test__.java:9: '(' or '[' expected
[18:36:53]  lex = new (new ANTLRFileStream("C:\\antlr\\__Test___input.txt"));
[18:36:53]                                                                  ^
[18:36:53] 2 errors

Here's the complete code being generated. Am I doing something wrong?

import java.io.*;
import org.antlr.runtime.*;
import org.antlr.runtime.debug.DebugEventSocketProxy;


public class __Test__ {

    public static void main(String args[]) throws Exception {
 lex = new (new ANTLRFileStream("C:\\antlr\\__Test___input.txt"));
        CommonTokenStream tokens = new CommonTokenStream(lex);

        mediawiki2Parser g = new mediawiki2Parser(tokens, 49153);
        try {
            g.start();
        } catch (RecognitionException e) {
            e.printStackTrace();
        }
    }
}

Steve

