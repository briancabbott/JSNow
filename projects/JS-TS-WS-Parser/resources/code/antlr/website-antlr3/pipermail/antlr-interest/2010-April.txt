From Amitesh.Kumar at standardbank.com  Thu Apr  1 02:05:46 2010
From: Amitesh.Kumar at standardbank.com (Kumar, Amitesh)
Date: Thu, 1 Apr 2010 10:05:46 +0100
Subject: [antlr-interest] posting
Message-ID: <9C204FB03F388A4DAC43AD0888BD86FD036B83F9@SIHLDNVSMSG04.Sbintldirectory.com>

Hi im trying to post to the antlr interest group but it seems I get
bouced everytime

Cheers
Amitesh Kumar

Amitesh Kumar |CIB Integration | Business Infrastructure Technology |
Standard Bank CIB International | Ground Floor, 20 Gresham Street,
London, EC2V 7JE 
T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com



*****************************************************************************
More information on Standard Bank is available at www.standardbank.com

Everything in this email and any attachments relating to the official business 
of Standard Bank Group Limited and any or all subsidiaries, ("the Company"), is 
proprietary to the Company. It is confidential, legally privileged and protected 
by relevant laws. The Company does not own and endorse any other content. 
Views and opinions are those of the sender unless clearly stated as being 
that of the Company.

The person or persons addressed in this email are the sole authorised 
recipient. Please notify the sender immediately if it has unintentionally, 
or inadvertently reached you and do not read, disclose or use the content 
in any way and delete this e-mail from your system. 

The Company cannot ensure that the integrity of this email has been
maintained nor that it is free of errors, virus, interception or interference. 
The sender therefore does not accept liability for any errors or omissions 
in the contents of this message which arise as a result of e-mail transmission. 
If verification is required please request a hard-copy version. This message 
is provided for informational purposes and should not be construed as a 
solicitation or offer to buy or sell any securities or related financial instruments.
*****************************************************************************


This message has been scanned for viruses by BlackSpider MailControl - www.blackspider.com

From Amitesh.Kumar at standardbank.com  Thu Apr  1 02:12:37 2010
From: Amitesh.Kumar at standardbank.com (Kumar, Amitesh)
Date: Thu, 1 Apr 2010 10:12:37 +0100
Subject: [antlr-interest] Parsing Large Files
Message-ID: <9C204FB03F388A4DAC43AD0888BD86FD036B83FF@SIHLDNVSMSG04.Sbintldirectory.com>

Hi Guys what we are looking for is just parsing the file and recording
the errors we don't need to keep a track of any tokens or a AST.
Im getting 
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space 
        at java.util.Arrays.copyOf(Arrays.java:2760) 
        at java.util.Arrays.copyOf(Arrays.java:2734) 
        at java.util.ArrayList.ensureCapacity(ArrayList.java:167) 
        at java.util.ArrayList.add(ArrayList.java:351) 
        at
org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:11
6) 
        at
org.antlr.runtime.CommonTokenStream.LT(CommonTokenStream.java:238) 
        at
org.antlr.runtime.Parser.getCurrentInputSymbol(Parser.java:54) 
        at
org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:104) 
        at DealsAll2Parser.header(DealsAll2Parser.java:123) 
        at DealsAll2Parser.file(DealsAll2Parser.java:67) 
        at AntlrMain.main(AntlrMain.java:53) 
I see where the error is coming from the CommonTokenStream is keeping
track of all past tokens, how can I make it so it doesn't. Do I have to
create my own Token Stream? Or is there a easy way.

Cheers 
Kumaap0


*****************************************************************************
More information on Standard Bank is available at www.standardbank.com

Everything in this email and any attachments relating to the official business 
of Standard Bank Group Limited and any or all subsidiaries, ("the Company"), is 
proprietary to the Company. It is confidential, legally privileged and protected 
by relevant laws. The Company does not own and endorse any other content. 
Views and opinions are those of the sender unless clearly stated as being 
that of the Company.

The person or persons addressed in this email are the sole authorised 
recipient. Please notify the sender immediately if it has unintentionally, 
or inadvertently reached you and do not read, disclose or use the content 
in any way and delete this e-mail from your system. 

The Company cannot ensure that the integrity of this email has been
maintained nor that it is free of errors, virus, interception or interference. 
The sender therefore does not accept liability for any errors or omissions 
in the contents of this message which arise as a result of e-mail transmission. 
If verification is required please request a hard-copy version. This message 
is provided for informational purposes and should not be construed as a 
solicitation or offer to buy or sell any securities or related financial instruments.
*****************************************************************************


This message has been scanned for viruses by BlackSpider MailControl - www.blackspider.com

From bkiers at gmail.com  Thu Apr  1 02:14:40 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 1 Apr 2010 11:14:40 +0200
Subject: [antlr-interest] posting
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B83F9@SIHLDNVSMSG04.Sbintldirectory.com>
References: <9C204FB03F388A4DAC43AD0888BD86FD036B83F9@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <z2zaf443a971004010214w82ab553cl8d88f8de93b60527@mail.gmail.com>

On Thu, Apr 1, 2010 at 11:05 AM, Kumar, Amitesh <
Amitesh.Kumar at standardbank.com> wrote:

> Hi im trying to post to the antlr interest group but it seems I get
> bouced everytime
>

Not any more: this one went through just fine.

Regards,

Bart.

From wabsie at gmail.com  Thu Apr  1 02:51:12 2010
From: wabsie at gmail.com (Mark Ruvald)
Date: Thu, 1 Apr 2010 11:51:12 +0200
Subject: [antlr-interest] Factorization of Logic Expressions
In-Reply-To: <SNT121-W44B6B97F41EA929F1FE92B962C0@phx.gbl>
References: <SNT121-W44B6B97F41EA929F1FE92B962C0@phx.gbl>
Message-ID: <h2k220288281004010251tb040d100u15caf7700b8eb6c2@mail.gmail.com>

Hi,

2010/3/17 Nazim Oztahtaci <nazim_oztahtaci at hotmail.com>

>
> [...] a DNF representation: ab+ac. [...]
> Now Im working on factorizing the DNF formed expressions back to
> originial [...]. So I need to factorize the DNF expression. [...]

I know that I cant reach the original expression everytime for the
> complicated expressions. Also for the reverse Demorgan, I cant use this
> matrix probably. I wanted to ask users of this mail group if they have any
> advice to me regarding an algorithm for this problem or a new way as
> solution.
>

Maybe http://en.wikipedia.org/wiki/And-inverter_graph can help you.


regards
-- Mark Ruvald.

A: Because it messes up the order in which people normally read text.
Q: Why is top-posting such a bad thing?
A: Top-posting.
Q: What is the most annoying thing on usenet and in e-mail?

From tho at catglobe.com  Thu Apr  1 03:10:43 2010
From: tho at catglobe.com (Duy Tho Nguyen)
Date: Thu, 01 Apr 2010 17:10:43 +0700
Subject: [antlr-interest] ClassNotFound exception when run gUnit
Message-ID: <4BB47123.2010409@catglobe.com>

I'm on my way to set up gUnit for my grammar. I'm learning the tutorial 
found there :
http://www.antlr.org/wiki/display/ANTLR3/gUnit+-+Grammar+Unit+Testing

I follow all the instruction but  when run gUnit, it give an error like 
this :

C:\__GUnit\examples\java\LL-star>java org.antlr.Tool SimpleC.g

C:\__GUnit\examples\java\LL-star>javac *.java

C:\__GUnit\examples\java\LL-star>java org.antlr.gunit.Interp SimpleC.gunit
java.lang.ClassNotFoundException: SimpleCLexer
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
        at org.antlr.gunit.gUnitExecutor.classForName(gUnitExecutor.java:98)
        at org.antlr.gunit.gUnitExecutor.runParser(gUnitExecutor.java:308)
        at 
org.antlr.gunit.gUnitExecutor.runCorrectParser(gUnitExecutor.java:159)
        at 
org.antlr.gunit.gUnitExecutor.executeTests(gUnitExecutor.java:175)
        at org.antlr.gunit.gUnitExecutor.execTest(gUnitExecutor.java:123)
        at org.antlr.gunit.Interp.main(Interp.java:71)

Java code for lexer and parser are generated and compile successfully 
and all files are located in the same folder:
c:\__GUnit\examples\java\LL-star\input
c:\__GUnit\examples\java\LL-star\SimpleC.g
c:\__GUnit\examples\java\LL-star\SimpleC.gunit
c:\__GUnit\examples\java\LL-star\SimpleC.tokens
c:\__GUnit\examples\java\LL-star\SimpleCLexer$DFA4.class
c:\__GUnit\examples\java\LL-star\SimpleCLexer.class
c:\__GUnit\examples\java\LL-star\SimpleCLexer.java
c:\__GUnit\examples\java\LL-star\SimpleCParser$DFA2.class
c:\__GUnit\examples\java\LL-star\SimpleCParser.class
c:\__GUnit\examples\java\LL-star\SimpleCParser.java

I can't figure out what is wrong to cause ClassNotFound exception so 
would someone please help me fix it.
I'm on a WinXP 64, using antlr 3.1.3,  string template  3.2  and   
jdk1.6.0_11.

Thank in advance



From christian.mayer at bsse.ethz.ch  Thu Apr  1 04:21:59 2010
From: christian.mayer at bsse.ethz.ch (Christian Mayer)
Date: Thu, 01 Apr 2010 12:21:59 +0100
Subject: [antlr-interest] Syntax of rewrite rule
Message-ID: <C7DA4067.1022%christian.mayer@bsse.ethz.ch>

Hi,

I am wondering how to transform the rewrite rule

Expr    :   mul_expr ( ( PLUS | MINUS )^ mul_expr )*;
 
Into the explicit form with the arrow

Expr    :   a=mul_expr (  op=( PLUS | MINUS ) b=mul_expr )*   ->   ? ;

For later use in an AST tree parser.

What is the proper way to do this? I checked ? The definitive ANTL
reference?/online documentation but could not find anything about the
syntax.

Thanks and best regards,

Chris



From bkiers at gmail.com  Thu Apr  1 03:43:13 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Thu, 1 Apr 2010 12:43:13 +0200
Subject: [antlr-interest] Syntax of rewrite rule
In-Reply-To: <C7DA4067.1022%christian.mayer@bsse.ethz.ch>
References: <C7DA4067.1022%christian.mayer@bsse.ethz.ch>
Message-ID: <g2zaf443a971004010343ra700a366z3c7bbb083f999bad@mail.gmail.com>

On Thu, Apr 1, 2010 at 1:21 PM, Christian Mayer <
christian.mayer at bsse.ethz.ch> wrote:

> I am wondering how to transform the rewrite rule
>
> Expr    :   mul_expr ( ( PLUS | MINUS )^ mul_expr )*;
>
> Into the explicit form with the arrow
>
> Expr    :   a=mul_expr (  op=( PLUS | MINUS ) b=mul_expr )*   ->   ? ;
>
> For later use in an AST tree parser.
>
> What is the proper way to do this? I checked ? The definitive ANTL
> reference?/online documentation but could not find anything about the
> syntax.
>

I did not test it, but I believe this would work:

Expr
  :  (a=mul_expr                   -> $a           )
     (op=(PLUS | MINUS) b=mul_expr -> ^($op $a $b) )*
  ;

Also see Chapter 7, section "Constructing AST's with rewrite rules"
paragraph "Rewrite Rules in Subrules" from "The definitive ANTLR reference".

Kind regards,

Bart.

From bychkov.anton at gmail.com  Thu Apr  1 04:20:16 2010
From: bychkov.anton at gmail.com (Anton Bychkov)
Date: Thu, 1 Apr 2010 16:20:16 +0500
Subject: [antlr-interest] backtrack + rule arguments + C target
Message-ID: <h2q1363099f1004010420k556cd392k3569d35087e98b57@mail.gmail.com>

Hi.

I have some problems with backtrack option and rule arguments.

Example grammar:

grammar testbt;

options
{
	language = C;
	backtrack = true;
}

expr	
	@init {
		int i = 1;
	}
	:
	num[i] | id[i]
	;


num[int i]	:	'0'..'9'+;
id[int i]	:	'a'..'z'+;

Generated files does not compile with error "error C2065: 'i' :
undeclared identifier".
(The problem is that C target does not insert rule arguments into
argument list of autogenerated 'synpred' functions.)

How can I fix this?

From jimi at temporal-wave.com  Thu Apr  1 06:37:29 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 06:37:29 -0700
Subject: [antlr-interest] crash with tree filter
In-Reply-To: <v2ne063fb511003312006z8f11dc74h1f431e531861b1dd@mail.gmail.com>
Message-ID: <a25cb7145a35e8489a3e173725573942@temporal-wave.com>

This is usually because one of your tokens has not formal definition and ends up out of range. Unfortunately there is a bug (I think I trigger it usually when developing import grammars) that does not record that a token has no definition under certain circumstances. So, check your token defs - the answer is buried in there somewhere.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of James Briant
> Sent: Wednesday, March 31, 2010 8:06 PM
> To: ANTLR Interest
> Subject: [antlr-interest] crash with tree filter
> 
> error(10):  internal error:
> com/binaryfinery/comb/javaparser/generated/JavaDef.g :
> java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 50
> java.util.Vector.set(Vector.java:712)
> org.antlr.analysis.DFA.createMinMaxTables(DFA.java:531)
> org.antlr.analysis.DFA.createStateTables(DFA.java:435)
> org.antlr.codegen.CodeGenerator.genLookaheadDecision(CodeGenerator.java
> :653)
> org.antlr.grammar.v2.CodeGenTreeWalker.block(CodeGenTreeWalker.java:101
> 8)
> org.antlr.grammar.v2.CodeGenTreeWalker.rule(CodeGenTreeWalker.java:797)
> org.antlr.grammar.v2.CodeGenTreeWalker.rules(CodeGenTreeWalker.java:588
> )
> org.antlr.grammar.v2.CodeGenTreeWalker.grammarSpec(CodeGenTreeWalker.ja
> va:530)
> org.antlr.grammar.v2.CodeGenTreeWalker.grammar(CodeGenTreeWalker.java:3
> 36)
> org.antlr.codegen.CodeGenerator.genRecognizer(CodeGenerator.java:432)
> org.antlr.Tool.generateRecognizer(Tool.java:641)
> org.antlr.Tool.process(Tool.java:454)
> org.antlr.mojo.antlr3.Antlr3Mojo.execute(Antlr3Mojo.java:391)
> org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginM
> anager.java:451)
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Defaul
> tLifecycleExecutor.java:558)
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGo
> al(DefaultLifecycleExecutor.java:512)
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Default
> LifecycleExecutor.java:482)
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandl
> eFailures(DefaultLifecycleExecutor.java:330)
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments
> (DefaultLifecycleExecutor.java:291)
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLife
> cycleExecutor.java:142)
> org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)
> org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)
> org.apache.maven.cli.MavenCli.main(MavenCli.java:287)
> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.ja
> va:39)
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccesso
> rImpl.java:25)
> java.lang.reflect.Method.invoke(Method.java:597)
> org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
> org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
> org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
> org.codehaus.classworlds.Launcher.main(Launcher.java:375)
> 
> This is where it tanks:
> 
> switchBlockLabels
>     :   ^(SWITCH_BLOCK_LABEL_LIST switchCaseLabels* )
>     ;
> 
> switchCaseLabels
>     :   ^(CASE expression blockStatement*)
>     | ^(DEFAULT blockStatement*)
>     ;
> 
> Any ideas?
> 
> Thanks,
> 
> Jamie
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Thu Apr  1 06:39:38 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 06:39:38 -0700
Subject: [antlr-interest] hack for crash
In-Reply-To: <q2he063fb511003312125mfdc2d40ey973696f87d8a701e@mail.gmail.com>
Message-ID: <81994f959e5a0046866bc05c94e1b260@temporal-wave.com>

Yeah - we need to fix the problem with token defs. I will try to make some time today to raise a few JIRAs for various bugs that have been reported. Then at least Ter can check them in V4.

Thanks for your efforts.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of James Briant
> Sent: Wednesday, March 31, 2010 9:26 PM
> To: ANTLR Interest
> Subject: [antlr-interest] hack for crash
> 
> in the org.antlr.analysis.DFA class, I hacked in the for loop. Total
> hackery
> on my part, but it works. Fixes symptoms not disease.
> 
> public int getNumberOfStates() {
> if ( getUserMaxLookahead()>0 ) {
> // if using fixed lookahead then uniqueSets not set
> return states.size();
> }
> for(int i = 0; i < states.size(); ++i) {
> DFAState state = states.get(i);
> int s = state.stateNumber;
> if ( s>=numberOfStates) {
> numberOfStates=s+1;
> }
> }
> return numberOfStates;
> }
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Thu Apr  1 06:51:35 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 06:51:35 -0700
Subject: [antlr-interest] posting
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B83F9@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <15cf1ad9d092ff4596822b40ee60d03a@temporal-wave.com>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kumar, Amitesh
> Sent: Thursday, April 01, 2010 2:06 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] posting
> 
> Hi im trying to post to the antlr interest group but it seems I get
> bouced everytime
> 

Not this time.





From jimi at temporal-wave.com  Thu Apr  1 06:54:08 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 06:54:08 -0700
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B83FF@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <eb0cd112da1c5d47a1b9e69548c2238e@temporal-wave.com>

Kumaap0,

It looks like just some inexperience here. My first guess is that you have a lexer rule that matches and empty string and so you are getting an infinite number of tokens.

Look for:

LEXERRULE: ('xxxxx')* ;

Where a  * should be a + as that is the most common error.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kumar, Amitesh
> Sent: Thursday, April 01, 2010 2:13 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Parsing Large Files
> 
> Hi Guys what we are looking for is just parsing the file and recording
> the errors we don't need to keep a track of any tokens or a AST.
> Im getting
> Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
>         at java.util.Arrays.copyOf(Arrays.java:2760)
>         at java.util.Arrays.copyOf(Arrays.java:2734)
>         at java.util.ArrayList.ensureCapacity(ArrayList.java:167)
>         at java.util.ArrayList.add(ArrayList.java:351)
>         at
> org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:1
> 1
> 6)
>         at
> org.antlr.runtime.CommonTokenStream.LT(CommonTokenStream.java:238)
>         at
> org.antlr.runtime.Parser.getCurrentInputSymbol(Parser.java:54)
>         at
> org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:104)
>         at DealsAll2Parser.header(DealsAll2Parser.java:123)
>         at DealsAll2Parser.file(DealsAll2Parser.java:67)
>         at AntlrMain.main(AntlrMain.java:53)
> I see where the error is coming from the CommonTokenStream is keeping
> track of all past tokens, how can I make it so it doesn't. Do I have to
> create my own Token Stream? Or is there a easy way.
> 
> Cheers
> Kumaap0
> 
> 
> ***********************************************************************
> ******
> More information on Standard Bank is available at www.standardbank.com
> 
> Everything in this email and any attachments relating to the official
> business
> of Standard Bank Group Limited and any or all subsidiaries, ("the
> Company"), is
> proprietary to the Company. It is confidential, legally privileged and
> protected
> by relevant laws. The Company does not own and endorse any other
> content.
> Views and opinions are those of the sender unless clearly stated as
> being
> that of the Company.
> 
> The person or persons addressed in this email are the sole authorised
> recipient. Please notify the sender immediately if it has
> unintentionally,
> or inadvertently reached you and do not read, disclose or use the
> content
> in any way and delete this e-mail from your system.
> 
> The Company cannot ensure that the integrity of this email has been
> maintained nor that it is free of errors, virus, interception or
> interference.
> The sender therefore does not accept liability for any errors or
> omissions
> in the contents of this message which arise as a result of e-mail
> transmission.
> If verification is required please request a hard-copy version. This
> message
> is provided for informational purposes and should not be construed as a
> solicitation or offer to buy or sell any securities or related
> financial instruments.
> ***********************************************************************
> ******
> 
> 
> This message has been scanned for viruses by BlackSpider MailControl -
> www.blackspider.com
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Thu Apr  1 06:57:54 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 06:57:54 -0700
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B83FF@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <e5dca2e97f405347a01ea8dfea19b84d@temporal-wave.com>

The other possibility is of course that you are trying to parse a massive file in one lump. You probably just want to reinvoke the parser for each deal record (break it up in the string tream.
Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kumar, Amitesh
> Sent: Thursday, April 01, 2010 2:13 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Parsing Large Files
> 
> Hi Guys what we are looking for is just parsing the file and recording
> the errors we don't need to keep a track of any tokens or a AST.
> Im getting
> Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
>         at java.util.Arrays.copyOf(Arrays.java:2760)
>         at java.util.Arrays.copyOf(Arrays.java:2734)
>         at java.util.ArrayList.ensureCapacity(ArrayList.java:167)
>         at java.util.ArrayList.add(ArrayList.java:351)
>         at
> org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:1
> 1
> 6)
>         at
> org.antlr.runtime.CommonTokenStream.LT(CommonTokenStream.java:238)
>         at
> org.antlr.runtime.Parser.getCurrentInputSymbol(Parser.java:54)
>         at
> org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:104)
>         at DealsAll2Parser.header(DealsAll2Parser.java:123)
>         at DealsAll2Parser.file(DealsAll2Parser.java:67)
>         at AntlrMain.main(AntlrMain.java:53)
> I see where the error is coming from the CommonTokenStream is keeping
> track of all past tokens, how can I make it so it doesn't. Do I have to
> create my own Token Stream? Or is there a easy way.
> 
> Cheers
> Kumaap0
> 
> 
> ***********************************************************************
> ******
> More information on Standard Bank is available at www.standardbank.com
> 
> Everything in this email and any attachments relating to the official
> business
> of Standard Bank Group Limited and any or all subsidiaries, ("the
> Company"), is
> proprietary to the Company. It is confidential, legally privileged and
> protected
> by relevant laws. The Company does not own and endorse any other
> content.
> Views and opinions are those of the sender unless clearly stated as
> being
> that of the Company.
> 
> The person or persons addressed in this email are the sole authorised
> recipient. Please notify the sender immediately if it has
> unintentionally,
> or inadvertently reached you and do not read, disclose or use the
> content
> in any way and delete this e-mail from your system.
> 
> The Company cannot ensure that the integrity of this email has been
> maintained nor that it is free of errors, virus, interception or
> interference.
> The sender therefore does not accept liability for any errors or
> omissions
> in the contents of this message which arise as a result of e-mail
> transmission.
> If verification is required please request a hard-copy version. This
> message
> is provided for informational purposes and should not be construed as a
> solicitation or offer to buy or sell any securities or related
> financial instruments.
> ***********************************************************************
> ******
> 
> 
> This message has been scanned for viruses by BlackSpider MailControl -
> www.blackspider.com
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Thu Apr  1 07:01:15 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 07:01:15 -0700
Subject: [antlr-interest] backtrack + rule arguments + C target
In-Reply-To: <h2q1363099f1004010420k556cd392k3569d35087e98b57@mail.gmail.com>
Message-ID: <eda1147d0e429447bb34d1fcd50f528b@temporal-wave.com>

Please read the documentation:

@declarations {}
@init {}

Then search the list using antlr.markmail.org for hoisted predicates and local variables. It isn't the C target it is just that the local variable or parameter is out of scope for the predicate, so you must use scopes if you have to use semantic predicates (with parameters).

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Anton Bychkov
> Sent: Thursday, April 01, 2010 4:20 AM
> To: antlr-interest at antlr.org interest
> Subject: [antlr-interest] backtrack + rule arguments + C target
> 
> Hi.
> 
> I have some problems with backtrack option and rule arguments.
> 
> Example grammar:
> 
> grammar testbt;
> 
> options
> {
> 	language = C;
> 	backtrack = true;
> }
> 
> expr
> 	@init {
> 		int i = 1;
> 	}
> 	:
> 	num[i] | id[i]
> 	;
> 
> 
> num[int i]	:	'0'..'9'+;
> id[int i]	:	'a'..'z'+;
> 
> Generated files does not compile with error "error C2065: 'i' :
> undeclared identifier".
> (The problem is that C target does not insert rule arguments into
> argument list of autogenerated 'synpred' functions.)
> 
> How can I fix this?
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From Amitesh.Kumar at standardbank.com  Thu Apr  1 07:26:44 2010
From: Amitesh.Kumar at standardbank.com (Kumar, Amitesh)
Date: Thu, 1 Apr 2010 15:26:44 +0100
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <e5dca2e97f405347a01ea8dfea19b84d@temporal-wave.com>
References: <9C204FB03F388A4DAC43AD0888BD86FD036B83FF@SIHLDNVSMSG04.Sbintldirectory.com>
	<e5dca2e97f405347a01ea8dfea19b84d@temporal-wave.com>
Message-ID: <9C204FB03F388A4DAC43AD0888BD86FD036B84C0@SIHLDNVSMSG04.Sbintldirectory.com>

 
Hi Jim your correct im new to ANTLR below is my CSV grammar,

This is what im running 

CharStream lex = new ANTLRFileStream("Dealsall3.csv");
DealsAll3Lexer csv3Lexer = new DealsAll3Lexer(lex);

csv3Lexer.setBacktrackingLevel(0);	
CommonTokenStream tokens = new CommonTokenStream(csv3Lexer);	
tokens.discardOffChannelTokens(true);		
DealsAll3Parser csv3Parser = new DealsAll3Parser(tokens);

csv3Parser.file();
System.out.println(csv3Parser.getNumberOfSyntaxErrors());

You right I could fix the above by not using the ANTLRFileStream and
just using a ANTLRStringStream and chunking the file by myself outside
of ANTLR.

But my general issue is that not all my data is a simple CSV file some
will be multi line records. Hence I didn't want to keep a record of the
tokens.
Any ideas . By the way thanks for your reply.

Cheers
Kumaap0



grammar DealsAll3 ; 
    
    file        :       header ( detail )* EOF ; 
    
    SEP :       WS? ( ',') WS? ; 
    
    header : 
        'IdentID,FGamma Tot,FutDeltaTot,FutGamma
Tot,Barrier2,BarrierLevel,Cmp_CP,Cmp_Delivery,Cmp_Expiry,Cmp_Strike' 
        NL 
        ; 
    
    
    detail 
        : f_IdentID=20=20=20 
        SEP ( f_FGamma_Tot )? 
        SEP ( f_FutDeltaTot )? 
        SEP ( f_FutGamma_Tot )? 
        SEP ( f_Barrier2 )? 
        SEP ( f_Barrier_Level )? 
        SEP ( f_Cmp_CP )? 
        SEP ( f_Cmp_Delivery )? 
        SEP ( f_Cmp_Expiry )? 
        SEP ( f_Cmp_Strike )? 
        NL ; 
    
    f_IdentID           :       NUMBER ;=20=20=20=20=20=20 
    f_FGamma_Tot        :       NUMBER ; 
    f_FutDeltaTot       :       NUMBER ; 
    f_FutGamma_Tot      :       NUMBER ; 
    f_Barrier2          :       STRING ;=20 
    f_Barrier_Level     :       STRING ;=20 
    f_Cmp_CP            :       STRING ;=20 
    f_Cmp_Delivery      :       STRING ;=20 
    f_Cmp_Expiry        :       STRING ;=20 
    f_Cmp_Strike        :       STRING ;=20 
    
    DATETIME    : DATE ( SP | 'T' ) TIME ; 
    
    DATE        : 
        (       ( ( ( '0' | '1' | '2' ) '0'..'9' ) | ( '3' ( '0' | '1' )

    ) ) 
                ( '-' | '/' ) 
                (       ( '01' | '02' | '03' | '04' | '05' | '06' | '07'

    | '08' | '09' | '10' | '11' | '12' ) 
                |       ( 'JAN' | 'FEB' | 'MAR' | 'APR' | 'MAY' | 'JUN' 
    | 'JUL' | 'SEP' | 'OCT' | 'NOV' | 'DEC' ) 
                |       ( 'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' 
    | 'Jul' | 'Sep' | 'Oct' | 'Nov' | 'Dec' ) 
                ) 
                ( '-' | '/' ) 
                ( ( '0'..'9' '0'..'9' )? '0'..'9' '0'..'9' ) 
        ) 
    |   (       ( '0'..'9' '0'..'9' '0'..'9' '0'..'9' ) 
                ( '-' | '/' ) 
                ( '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' 
    | '09' | '10' | '11' | '12' ) 
                ( '-' | '/' ) 
                ( ( ( '0' | '1' | '2' ) '0'..'9' ) | ( '3' ( '0' | '1' )

    ) ) 
        ) 
        ; 
    MONTH_YEAR  : 
        (       ( '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' 
    | '09' | '10' | '11' | '12' ) 
        |       ( 'JAN' | 'FEB' | 'MAR' | 'APR' | 'MAY' | 'JUN' | 'JUL' 
    | 'SEP' | 'OCT' | 'NOV' | 'DEC' ) 
        |       ( 'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' 
    | 'Sep' | 'Oct' | 'Nov' | 'Dec' ) 
        ) 
        '-' 
        ( ( '0'..'9' '0'..'9' )? '0'..'9' '0'..'9' ) 
        ; 
    MONTH_DAY   : 
        ( ( ( '0' | '1' | '2' ) '0'..'9' ) | ( '3' ( '0' | '1' ) ) ) 
        '-' 
        (       ( '01' | '02' | '03' | '04' | '05' | '06' | '07' | '08' 
    | '09' | '10' | '11' | '12' ) 
        |       ( 'JAN' | 'FEB' | 'MAR' | 'APR' | 'MAY' | 'JUN' | 'JUL' 
    | 'SEP' | 'OCT' | 'NOV' | 'DEC' ) 
        |       ( 'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' | 'Jul' 
    | 'Sep' | 'Oct' | 'Nov' | 'Dec' ) 
        ) 
        ; 
    
    TIME        : 
        ( ( '0'..'1' '0'..'9' ) | ('2' '0'..'4' ) ) // '00' to '24' 
        ':' 
        ( '0'..'5' '0'..'9' ) // '00' to '60' 
        ':' 
        ( '0'..'5' '0'..'9' ) // '00' to '60' 
        ( ( 'Z' // UTC 
        | ( '+' | '-' ) '00' ( (':' | ' ' ) '00' )? 
        ) ? 
        ) ; 
    
    NUMBER 
        :       ( '+' | '-' )?                      // It may be signed 
        (       ( '0'..'9' )+ '.' ( '0'..'9' )*     // Decimal point 
    with leading and trailing digits 
        |        '.' ( '0'..'9' )+                  // or it may be just

    a mantissa 
        |       '0'..'9'+                           // or it may be an 
    integer 
        ) 
        ; 
    
    STRING 
        :       ('"') VALID_CHAR+ ('"')     // Must have quotes at both 
    ends 
        |       VALID_CHAR+                 // or no quote at either end

        ; 
    
    fragment VALID_CHAR : 
        ( 'a'..'z' | 'A'..'Z' | '0'..'9' // the alphanumeric characters 
        |       ' '     // x20 =3D SPACE 
        |       '!'     // x21 =3D EXCLAMATION MARK 
        |       '#'     // x23 =3D NUMBER SIGN 
        |       '$'     // x24 =3D DOLLAR SIGN 
        |       '%'     // x25 =3D PERCENT SIGN 
        |       '&'     // x26 =3D AMPERSAND 
        |       '('     // x28 =3D LEFT PARENTHESIS 
        |       ')'     // x29 =3D RIGHT PARENTHESIS 
        |       '*'     // x2a =3D ASTERISK 
        |       '+'     // x2b =3D PLUS SIGN 
        // SEP char ',' // x2c =3D COMMA 
        |       '-'     // x2d =3D HYPHEN-MINUS 
        |       '.'     // x2e =3D FULL STOP 
        |       '/'     // x2f =3D SOLIDUS 
        |       ':'     // x3a =3D COLON 
        |       ';'     // x3b =3D SEMICOLON 
        |       '<'     // x3c =3D LESS-THAN SIGN 
        |       '=3D'   // x3d =3D EQUALS SIGN 
        |       '>'     // x3e =3D GREATER-THAN SIGN 
        |       '?'     // x3f =3D QUESTION MARK 
        |       '@'     // x40 =3D COMMERCIAL AT 
        |       '['     // x5b =3D LEFT SQUARE BRACKET 
        |       ']'     // x5d =3D RIGHT SQUARE BRACKET 
        |       '^'     // x5e =3D CIRCUMFLEX ACCENT 
        |       '_'     // x5f =3D LOW LINE 
        |       '`'     // x60 =3D GRAVE ACCENT 
        |       '{'     // x7b =3D LEFT CURLY BRACKET 
        |       '|'     // x7c =3D VERTICAL LINE 
        |       '}'     // x7d =3D RIGHT CURLY BRACKET 
        |       '~'     // x7e =3D TILDE 
        ) ;


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: 01 April 2010 14:58
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Parsing Large Files

The other possibility is of course that you are trying to parse a
massive file in one lump. You probably just want to reinvoke the parser
for each deal record (break it up in the string tream.
Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Kumar, Amitesh
> Sent: Thursday, April 01, 2010 2:13 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Parsing Large Files
> 
> Hi Guys what we are looking for is just parsing the file and recording

> the errors we don't need to keep a track of any tokens or a AST.
> Im getting
> Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
>         at java.util.Arrays.copyOf(Arrays.java:2760)
>         at java.util.Arrays.copyOf(Arrays.java:2734)
>         at java.util.ArrayList.ensureCapacity(ArrayList.java:167)
>         at java.util.ArrayList.add(ArrayList.java:351)
>         at
> org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:
> 1
> 1
> 6)
>         at
> org.antlr.runtime.CommonTokenStream.LT(CommonTokenStream.java:238)
>         at
> org.antlr.runtime.Parser.getCurrentInputSymbol(Parser.java:54)
>         at
> org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:104)
>         at DealsAll2Parser.header(DealsAll2Parser.java:123)
>         at DealsAll2Parser.file(DealsAll2Parser.java:67)
>         at AntlrMain.main(AntlrMain.java:53) I see where the error is 
> coming from the CommonTokenStream is keeping track of all past tokens,

> how can I make it so it doesn't. Do I have to create my own Token 
> Stream? Or is there a easy way.
> 
> Cheers
> Kumaap0
> 
> 
> **********************************************************************
> *
> ******
> More information on Standard Bank is available at www.standardbank.com
> 
> Everything in this email and any attachments relating to the official 
> business of Standard Bank Group Limited and any or all subsidiaries, 
> ("the Company"), is proprietary to the Company. It is confidential, 
> legally privileged and protected by relevant laws. The Company does 
> not own and endorse any other content.
> Views and opinions are those of the sender unless clearly stated as 
> being that of the Company.
> 
> The person or persons addressed in this email are the sole authorised 
> recipient. Please notify the sender immediately if it has 
> unintentionally, or inadvertently reached you and do not read, 
> disclose or use the content in any way and delete this e-mail from 
> your system.
> 
> The Company cannot ensure that the integrity of this email has been 
> maintained nor that it is free of errors, virus, interception or 
> interference.
> The sender therefore does not accept liability for any errors or 
> omissions in the contents of this message which arise as a result of 
> e-mail transmission.
> If verification is required please request a hard-copy version. This 
> message is provided for informational purposes and should not be 
> construed as a solicitation or offer to buy or sell any securities or 
> related financial instruments.
> **********************************************************************
> *
> ******
> 
> 
> This message has been scanned for viruses by BlackSpider MailControl -

> www.blackspider.com
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From marcin.rzeznicki at gmail.com  Thu Apr  1 08:02:14 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Thu, 1 Apr 2010 17:02:14 +0200
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B84C0@SIHLDNVSMSG04.Sbintldirectory.com>
References: <9C204FB03F388A4DAC43AD0888BD86FD036B83FF@SIHLDNVSMSG04.Sbintldirectory.com>
	<e5dca2e97f405347a01ea8dfea19b84d@temporal-wave.com>
	<9C204FB03F388A4DAC43AD0888BD86FD036B84C0@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <k2p14799bf61004010802reebec7e8z698efdfe16e5a4c8@mail.gmail.com>

On Thu, Apr 1, 2010 at 4:26 PM, Kumar, Amitesh
<Amitesh.Kumar at standardbank.com> wrote:
>

>
> But my general issue is that not all my data is a simple CSV file some
> will be multi line records. Hence I didn't want to keep a record of the
> tokens.
> Any ideas . By the way thanks for your reply.
>

Hi
You can easily implement your own TokenStream that is optimized for
your use case eg. does not try to keep everything in one big array. If
you explore this possibility, you will quickly discover that it is
very easy thing to do and test. Hope it helps.


> Cheers
> Kumaap0


-- 
Greetings
Marcin Rze?nicki

From jimi at temporal-wave.com  Thu Apr  1 08:26:30 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 08:26:30 -0700
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <k2p14799bf61004010802reebec7e8z698efdfe16e5a4c8@mail.gmail.com>
Message-ID: <2446272952ae6e43a9b2ba9163fb089a@temporal-wave.com>

Actually, I think that if you use UnbufferedTokenStream(), that this will pretty much do what you want already, but it is easy to derive from one of the token streams, and add methods tah can discard buffered tokens once you know you have dealt with them.

Also, if you have comma separated files, then it is usually easier to use awk. Finally, your grammar has myriad lexical ambiguities and I am afraid it is not going to work as you have written it. You cannot have more than one lexer rule that matches the same text as the lexer is not syntax directed, it just tokenizes what it sees.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> Sent: Thursday, April 01, 2010 8:02 AM
> To: Kumar, Amitesh
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> On Thu, Apr 1, 2010 at 4:26 PM, Kumar, Amitesh
> <Amitesh.Kumar at standardbank.com> wrote:
> >
> 
> >
> > But my general issue is that not all my data is a simple CSV file
> some
> > will be multi line records. Hence I didn't want to keep a record of
> the
> > tokens.
> > Any ideas . By the way thanks for your reply.
> >
> 
> Hi
> You can easily implement your own TokenStream that is optimized for
> your use case eg. does not try to keep everything in one big array. If
> you explore this possibility, you will quickly discover that it is
> very easy thing to do and test. Hope it helps.
> 
> 
> > Cheers
> > Kumaap0
> 
> 
> --
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From acondit at ipns.com  Thu Apr  1 08:27:33 2010
From: acondit at ipns.com (Alan Condit)
Date: Thu, 1 Apr 2010 08:27:33 -0700
Subject: [antlr-interest] Objective-C and Antlr
Message-ID: <1918CEB4-D45B-4E4C-9E37-A5F8C1B006AD@ipns.com>

Is there a string template to generate Objective-C from Antlr3.2? If not what version of Antlr does one need to go back to in order to get a version that will generate Objective-C code?

Thanks,
Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From jimi at temporal-wave.com  Thu Apr  1 08:29:36 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 08:29:36 -0700
Subject: [antlr-interest] Objective-C and Antlr
In-Reply-To: <1918CEB4-D45B-4E4C-9E37-A5F8C1B006AD@ipns.com>
Message-ID: <ae5820b41a49164fabb46295b2feef87@temporal-wave.com>

Well, the C output is compatible with Objective C of course, but the ObjC target was pretty much abandoned too many years ago to be useful. I doubt that there is much advantage to using an objective C oriented target vs a straight C target to be honest.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Thursday, April 01, 2010 8:28 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Objective-C and Antlr
> 
> Is there a string template to generate Objective-C from Antlr3.2? If
> not what version of Antlr does one need to go back to in order to get a
> version that will generate Objective-C code?
> 
> Thanks,
> Alan
> ---
> 
> Alan Condit
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at ipns.com
> Home-Office (503) 982-0906
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From Amitesh.Kumar at standardbank.com  Thu Apr  1 08:51:49 2010
From: Amitesh.Kumar at standardbank.com (Kumar, Amitesh)
Date: Thu, 1 Apr 2010 16:51:49 +0100
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <2446272952ae6e43a9b2ba9163fb089a@temporal-wave.com>
References: <k2p14799bf61004010802reebec7e8z698efdfe16e5a4c8@mail.gmail.com>
	<2446272952ae6e43a9b2ba9163fb089a@temporal-wave.com>
Message-ID: <9C204FB03F388A4DAC43AD0888BD86FD036B84EE@SIHLDNVSMSG04.Sbintldirectory.com>

Great where is this UnbufferedTokenStream.

Cheers Jim 


Amitesh Kumar |CIB Integration | Business Infrastructure Technology | Standard Bank CIB International | Ground Floor, 20 Gresham Street, London, EC2V 7JE 
T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: 01 April 2010 16:27
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Parsing Large Files

Actually, I think that if you use UnbufferedTokenStream(), that this will pretty much do what you want already, but it is easy to derive from one of the token streams, and add methods tah can discard buffered tokens once you know you have dealt with them.

Also, if you have comma separated files, then it is usually easier to use awk. Finally, your grammar has myriad lexical ambiguities and I am afraid it is not going to work as you have written it. You cannot have more than one lexer rule that matches the same text as the lexer is not syntax directed, it just tokenizes what it sees.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> Sent: Thursday, April 01, 2010 8:02 AM
> To: Kumar, Amitesh
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> On Thu, Apr 1, 2010 at 4:26 PM, Kumar, Amitesh 
> <Amitesh.Kumar at standardbank.com> wrote:
> >
> 
> >
> > But my general issue is that not all my data is a simple CSV file
> some
> > will be multi line records. Hence I didn't want to keep a record of
> the
> > tokens.
> > Any ideas . By the way thanks for your reply.
> >
> 
> Hi
> You can easily implement your own TokenStream that is optimized for 
> your use case eg. does not try to keep everything in one big array. If 
> you explore this possibility, you will quickly discover that it is 
> very easy thing to do and test. Hope it helps.
> 
> 
> > Cheers
> > Kumaap0
> 
> 
> --
> Greetings
> Marcin Rze?nicki
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


*****************************************************************************
More information on Standard Bank is available at www.standardbank.com

Everything in this email and any attachments relating to the official business 
of Standard Bank Group Limited and any or all subsidiaries, ("the Company"), is 
proprietary to the Company. It is confidential, legally privileged and protected 
by relevant laws. The Company does not own and endorse any other content. 
Views and opinions are those of the sender unless clearly stated as being 
that of the Company.

The person or persons addressed in this email are the sole authorised 
recipient. Please notify the sender immediately if it has unintentionally, 
or inadvertently reached you and do not read, disclose or use the content 
in any way and delete this e-mail from your system. 

The Company cannot ensure that the integrity of this email has been
maintained nor that it is free of errors, virus, interception or interference. 
The sender therefore does not accept liability for any errors or omissions 
in the contents of this message which arise as a result of e-mail transmission. 
If verification is required please request a hard-copy version. This message 
is provided for informational purposes and should not be construed as a 
solicitation or offer to buy or sell any securities or related financial instruments.
*****************************************************************************


This message has been scanned for viruses by BlackSpider MailControl - www.blackspider.com

From jimi at temporal-wave.com  Thu Apr  1 08:54:55 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 08:54:55 -0700
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B84EE@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <b191556f085e6649b00fc0eb02ef2e5f@temporal-wave.com>

Just replace new CommonTokenStream(...).

But you will need to fix your grammar before it will all work of course.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kumar, Amitesh
> Sent: Thursday, April 01, 2010 8:52 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> Great where is this UnbufferedTokenStream.
> 
> Cheers Jim
> 
> 
> Amitesh Kumar |CIB Integration | Business Infrastructure Technology |
> Standard Bank CIB International | Ground Floor, 20 Gresham Street,
> London, EC2V 7JE
> T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: 01 April 2010 16:27
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> Actually, I think that if you use UnbufferedTokenStream(), that this
> will pretty much do what you want already, but it is easy to derive
> from one of the token streams, and add methods tah can discard buffered
> tokens once you know you have dealt with them.
> 
> 
> Also, if you have comma separated files, then it is usually easier to
> use awk. Finally, your grammar has myriad lexical ambiguities and I am
> afraid it is not going to work as you have written it. You cannot have
> more than one lexer rule that matches the same text as the lexer is not
> syntax directed, it just tokenizes what it sees.
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> > Sent: Thursday, April 01, 2010 8:02 AM
> > To: Kumar, Amitesh
> > Cc: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing Large Files
> >
> > On Thu, Apr 1, 2010 at 4:26 PM, Kumar, Amitesh
> > <Amitesh.Kumar at standardbank.com> wrote:
> > >
> >
> > >
> > > But my general issue is that not all my data is a simple CSV file
> > some
> > > will be multi line records. Hence I didn't want to keep a record of
> > the
> > > tokens.
> > > Any ideas . By the way thanks for your reply.
> > >
> >
> > Hi
> > You can easily implement your own TokenStream that is optimized for
> > your use case eg. does not try to keep everything in one big array.
> If
> > you explore this possibility, you will quickly discover that it is
> > very easy thing to do and test. Hope it helps.
> >
> >
> > > Cheers
> > > Kumaap0
> >
> >
> > --
> > Greetings
> > Marcin Rze?nicki
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address
> 
> 
> ***********************************************************************
> ******
> More information on Standard Bank is available at www.standardbank.com
> 
> Everything in this email and any attachments relating to the official
> business
> of Standard Bank Group Limited and any or all subsidiaries, ("the
> Company"), is
> proprietary to the Company. It is confidential, legally privileged and
> protected
> by relevant laws. The Company does not own and endorse any other
> content.
> Views and opinions are those of the sender unless clearly stated as
> being
> that of the Company.
> 
> The person or persons addressed in this email are the sole authorised
> recipient. Please notify the sender immediately if it has
> unintentionally,
> or inadvertently reached you and do not read, disclose or use the
> content
> in any way and delete this e-mail from your system.
> 
> The Company cannot ensure that the integrity of this email has been
> maintained nor that it is free of errors, virus, interception or
> interference.
> The sender therefore does not accept liability for any errors or
> omissions
> in the contents of this message which arise as a result of e-mail
> transmission.
> If verification is required please request a hard-copy version. This
> message
> is provided for informational purposes and should not be construed as a
> solicitation or offer to buy or sell any securities or related
> financial instruments.
> ***********************************************************************
> ******
> 
> 
> This message has been scanned for viruses by BlackSpider MailControl -
> www.blackspider.com
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From Amitesh.Kumar at standardbank.com  Thu Apr  1 09:07:16 2010
From: Amitesh.Kumar at standardbank.com (Kumar, Amitesh)
Date: Thu, 1 Apr 2010 17:07:16 +0100
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <b191556f085e6649b00fc0eb02ef2e5f@temporal-wave.com>
References: <9C204FB03F388A4DAC43AD0888BD86FD036B84EE@SIHLDNVSMSG04.Sbintldirectory.com>
	<b191556f085e6649b00fc0eb02ef2e5f@temporal-wave.com>
Message-ID: <9C204FB03F388A4DAC43AD0888BD86FD036B84F6@SIHLDNVSMSG04.Sbintldirectory.com>

Ive got ANTLR version 3.2 it doesn't seem to have UnbufferedTokenStream, there doesn't seem to be a newer version on the site

Amitesh Kumar |CIB Integration | Business Infrastructure Technology | Standard Bank CIB International | Ground Floor, 20 Gresham Street, London, EC2V 7JE 
T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: 01 April 2010 16:55
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Parsing Large Files

Just replace new CommonTokenStream(...).

But you will need to fix your grammar before it will all work of course.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Kumar, Amitesh
> Sent: Thursday, April 01, 2010 8:52 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> Great where is this UnbufferedTokenStream.
> 
> Cheers Jim
> 
> 
> Amitesh Kumar |CIB Integration | Business Infrastructure Technology | 
> Standard Bank CIB International | Ground Floor, 20 Gresham Street, 
> London, EC2V 7JE
> T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: 01 April 2010 16:27
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> Actually, I think that if you use UnbufferedTokenStream(), that this 
> will pretty much do what you want already, but it is easy to derive 
> from one of the token streams, and add methods tah can discard 
> buffered tokens once you know you have dealt with them.
> 
> 
> Also, if you have comma separated files, then it is usually easier to 
> use awk. Finally, your grammar has myriad lexical ambiguities and I am 
> afraid it is not going to work as you have written it. You cannot have 
> more than one lexer rule that matches the same text as the lexer is 
> not syntax directed, it just tokenizes what it sees.
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> > bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> > Sent: Thursday, April 01, 2010 8:02 AM
> > To: Kumar, Amitesh
> > Cc: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing Large Files
> >
> > On Thu, Apr 1, 2010 at 4:26 PM, Kumar, Amitesh 
> > <Amitesh.Kumar at standardbank.com> wrote:
> > >
> >
> > >
> > > But my general issue is that not all my data is a simple CSV file
> > some
> > > will be multi line records. Hence I didn't want to keep a record 
> > > of
> > the
> > > tokens.
> > > Any ideas . By the way thanks for your reply.
> > >
> >
> > Hi
> > You can easily implement your own TokenStream that is optimized for 
> > your use case eg. does not try to keep everything in one big array.
> If
> > you explore this possibility, you will quickly discover that it is 
> > very easy thing to do and test. Hope it helps.
> >
> >
> > > Cheers
> > > Kumaap0
> >
> >
> > --
> > Greetings
> > Marcin Rze?nicki
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address
> 
> 
> **********************************************************************
> *
> ******
> More information on Standard Bank is available at www.standardbank.com
> 
> Everything in this email and any attachments relating to the official 
> business of Standard Bank Group Limited and any or all subsidiaries, 
> ("the Company"), is proprietary to the Company. It is confidential, 
> legally privileged and protected by relevant laws. The Company does 
> not own and endorse any other content.
> Views and opinions are those of the sender unless clearly stated as 
> being that of the Company.
> 
> The person or persons addressed in this email are the sole authorised 
> recipient. Please notify the sender immediately if it has 
> unintentionally, or inadvertently reached you and do not read, 
> disclose or use the content in any way and delete this e-mail from 
> your system.
> 
> The Company cannot ensure that the integrity of this email has been 
> maintained nor that it is free of errors, virus, interception or 
> interference.
> The sender therefore does not accept liability for any errors or 
> omissions in the contents of this message which arise as a result of 
> e-mail transmission.
> If verification is required please request a hard-copy version. This 
> message is provided for informational purposes and should not be 
> construed as a solicitation or offer to buy or sell any securities or 
> related financial instruments.
> **********************************************************************
> *
> ******
> 
> 
> This message has been scanned for viruses by BlackSpider MailControl - 
> www.blackspider.com
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Thu Apr  1 09:12:44 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 01 Apr 2010 09:12:44 -0700
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B84F6@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <b65b73c2f6ab934b810a1e770e7b61cb@temporal-wave.com>

Ah - this is still in development. In which case you would need to extend CommonTokenStream and create your own system. Or you could switch the development snapshot.


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kumar, Amitesh
> Sent: Thursday, April 01, 2010 9:07 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> Ive got ANTLR version 3.2 it doesn't seem to have
> UnbufferedTokenStream, there doesn't seem to be a newer version on the
> site
> 
> Amitesh Kumar |CIB Integration | Business Infrastructure Technology |
> Standard Bank CIB International | Ground Floor, 20 Gresham Street,
> London, EC2V 7JE
> T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Jim Idle
> Sent: 01 April 2010 16:55
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
> 
> Just replace new CommonTokenStream(...).
> 
> But you will need to fix your grammar before it will all work of
> course.
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Kumar, Amitesh
> > Sent: Thursday, April 01, 2010 8:52 AM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing Large Files
> >
> > Great where is this UnbufferedTokenStream.
> >
> > Cheers Jim
> >
> >
> > Amitesh Kumar |CIB Integration | Business Infrastructure Technology |
> > Standard Bank CIB International | Ground Floor, 20 Gresham Street,
> > London, EC2V 7JE
> > T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com
> >
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Jim Idle
> > Sent: 01 April 2010 16:27
> > Cc: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Parsing Large Files
> >
> > Actually, I think that if you use UnbufferedTokenStream(), that this
> > will pretty much do what you want already, but it is easy to derive
> > from one of the token streams, and add methods tah can discard
> > buffered tokens once you know you have dealt with them.
> >
> >
> > Also, if you have comma separated files, then it is usually easier to
> > use awk. Finally, your grammar has myriad lexical ambiguities and I
> am
> > afraid it is not going to work as you have written it. You cannot
> have
> > more than one lexer rule that matches the same text as the lexer is
> > not syntax directed, it just tokenizes what it sees.
> >
> > Jim
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of Marcin Rzeznicki
> > > Sent: Thursday, April 01, 2010 8:02 AM
> > > To: Kumar, Amitesh
> > > Cc: antlr-interest at antlr.org
> > > Subject: Re: [antlr-interest] Parsing Large Files
> > >
> > > On Thu, Apr 1, 2010 at 4:26 PM, Kumar, Amitesh
> > > <Amitesh.Kumar at standardbank.com> wrote:
> > > >
> > >
> > > >
> > > > But my general issue is that not all my data is a simple CSV file
> > > some
> > > > will be multi line records. Hence I didn't want to keep a record
> > > > of
> > > the
> > > > tokens.
> > > > Any ideas . By the way thanks for your reply.
> > > >
> > >
> > > Hi
> > > You can easily implement your own TokenStream that is optimized for
> > > your use case eg. does not try to keep everything in one big array.
> > If
> > > you explore this possibility, you will quickly discover that it is
> > > very easy thing to do and test. Hope it helps.
> > >
> > >
> > > > Cheers
> > > > Kumaap0
> > >
> > >
> > > --
> > > Greetings
> > > Marcin Rze?nicki
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> > interest/your-
> > > email-address
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
> >
> >
> >
> **********************************************************************
> > *
> > ******
> > More information on Standard Bank is available at
> www.standardbank.com
> >
> > Everything in this email and any attachments relating to the official
> > business of Standard Bank Group Limited and any or all subsidiaries,
> > ("the Company"), is proprietary to the Company. It is confidential,
> > legally privileged and protected by relevant laws. The Company does
> > not own and endorse any other content.
> > Views and opinions are those of the sender unless clearly stated as
> > being that of the Company.
> >
> > The person or persons addressed in this email are the sole authorised
> > recipient. Please notify the sender immediately if it has
> > unintentionally, or inadvertently reached you and do not read,
> > disclose or use the content in any way and delete this e-mail from
> > your system.
> >
> > The Company cannot ensure that the integrity of this email has been
> > maintained nor that it is free of errors, virus, interception or
> > interference.
> > The sender therefore does not accept liability for any errors or
> > omissions in the contents of this message which arise as a result of
> > e-mail transmission.
> > If verification is required please request a hard-copy version. This
> > message is provided for informational purposes and should not be
> > construed as a solicitation or offer to buy or sell any securities or
> > related financial instruments.
> >
> **********************************************************************
> > *
> > ******
> >
> >
> > This message has been scanned for viruses by BlackSpider MailControl
> -
> > www.blackspider.com
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jab.antlr at species.org  Thu Apr  1 10:15:07 2010
From: jab.antlr at species.org (James Briant)
Date: Thu, 1 Apr 2010 10:15:07 -0700
Subject: [antlr-interest] online version of this forum?
Message-ID: <n2je063fb511004011015oe86aed59j39483175e21cae12@mail.gmail.com>

I don't like to get email from this list, but I would very much like to be
able to reply to discussions here. How do I do that without actually
receiving emails to my inbox first? There doesn't appear to be a way. Is it
possible we could move to a forum that would allow for online
discussion/reply as well as supporting the email users?

Jamie

From nikolay.ognyanov at travelstoremaker.com  Thu Apr  1 10:16:18 2010
From: nikolay.ognyanov at travelstoremaker.com (Nikolay Ognyanov)
Date: Thu, 01 Apr 2010 20:16:18 +0300
Subject: [antlr-interest] Parsing Large Files
In-Reply-To: <9C204FB03F388A4DAC43AD0888BD86FD036B84F6@SIHLDNVSMSG04.Sbintldirectory.com>
References: <9C204FB03F388A4DAC43AD0888BD86FD036B84EE@SIHLDNVSMSG04.Sbintldirectory.com>	<b191556f085e6649b00fc0eb02ef2e5f@temporal-wave.com>
	<9C204FB03F388A4DAC43AD0888BD86FD036B84F6@SIHLDNVSMSG04.Sbintldirectory.com>
Message-ID: <4BB4D4E2.3000400@travelstoremaker.com>

I had for different reasons the same problem with CommonTokenStream
and ended up implementing my own stream. It is available under the name
XQTokenStream in my open source project xqgrammar at :

http://code.google.com/p/xqgrammar/.

Regards
Nikolay

On 04/01/2010 07:07 PM, Kumar, Amitesh wrote:
> Ive got ANTLR version 3.2 it doesn't seem to have UnbufferedTokenStream, there doesn't seem to be a newer version on the site
>
> Amitesh Kumar |CIB Integration | Business Infrastructure Technology | Standard Bank CIB International | Ground Floor, 20 Gresham Street, London, EC2V 7JE
> T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
> Sent: 01 April 2010 16:55
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Parsing Large Files
>
> Just replace new CommonTokenStream(...).
>
> But you will need to fix your grammar before it will all work of course.
>
> Jim
>
>    
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Kumar, Amitesh
>> Sent: Thursday, April 01, 2010 8:52 AM
>> To: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Parsing Large Files
>>
>> Great where is this UnbufferedTokenStream.
>>
>> Cheers Jim
>>
>>
>> Amitesh Kumar |CIB Integration | Business Infrastructure Technology |
>> Standard Bank CIB International | Ground Floor, 20 Gresham Street,
>> London, EC2V 7JE
>> T: +44 [0]203 145 5575 | E: amitesh.kumar at standardbank.com
>>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Jim Idle
>> Sent: 01 April 2010 16:27
>> Cc: antlr-interest at antlr.org
>> Subject: Re: [antlr-interest] Parsing Large Files
>>
>> Actually, I think that if you use UnbufferedTokenStream(), that this
>> will pretty much do what you want already, but it is easy to derive
>> from one of the token streams, and add methods tah can discard
>> buffered tokens once you know you have dealt with them.
>>
>>
>> Also, if you have comma separated files, then it is usually easier to
>> use awk. Finally, your grammar has myriad lexical ambiguities and I am
>> afraid it is not going to work as you have written it. You cannot have
>> more than one lexer rule that matches the same text as the lexer is
>> not syntax directed, it just tokenizes what it sees.
>>
>> Jim
>>
>>      
>>> -----Original Message-----
>>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> bounces at antlr.org] On Behalf Of Marcin Rzeznicki
>>> Sent: Thursday, April 01, 2010 8:02 AM
>>> To: Kumar, Amitesh
>>> Cc: antlr-interest at antlr.org
>>> Subject: Re: [antlr-interest] Parsing Large Files
>>>
>>> On Thu, Apr 1, 2010 at 4:26 PM, Kumar, Amitesh
>>> <Amitesh.Kumar at standardbank.com>  wrote:
>>>        
>>>>          
>>>        
>>>> But my general issue is that not all my data is a simple CSV file
>>>>          
>>> some
>>>        
>>>> will be multi line records. Hence I didn't want to keep a record
>>>> of
>>>>          
>>> the
>>>        
>>>> tokens.
>>>> Any ideas . By the way thanks for your reply.
>>>>
>>>>          
>>> Hi
>>> You can easily implement your own TokenStream that is optimized for
>>> your use case eg. does not try to keep everything in one big array.
>>>        
>> If
>>      
>>> you explore this possibility, you will quickly discover that it is
>>> very easy thing to do and test. Hope it helps.
>>>
>>>
>>>        
>>>> Cheers
>>>> Kumaap0
>>>>          
>>>
>>> --
>>> Greetings
>>> Marcin Rze?nicki
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-
>>>        
>> interest/your-
>>      
>>> email-address
>>>        
>>
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>>
>>
>> **********************************************************************
>> *
>> ******
>> More information on Standard Bank is available at www.standardbank.com
>>
>> Everything in this email and any attachments relating to the official
>> business of Standard Bank Group Limited and any or all subsidiaries,
>> ("the Company"), is proprietary to the Company. It is confidential,
>> legally privileged and protected by relevant laws. The Company does
>> not own and endorse any other content.
>> Views and opinions are those of the sender unless clearly stated as
>> being that of the Company.
>>
>> The person or persons addressed in this email are the sole authorised
>> recipient. Please notify the sender immediately if it has
>> unintentionally, or inadvertently reached you and do not read,
>> disclose or use the content in any way and delete this e-mail from
>> your system.
>>
>> The Company cannot ensure that the integrity of this email has been
>> maintained nor that it is free of errors, virus, interception or
>> interference.
>> The sender therefore does not accept liability for any errors or
>> omissions in the contents of this message which arise as a result of
>> e-mail transmission.
>> If verification is required please request a hard-copy version. This
>> message is provided for informational purposes and should not be
>> construed as a solicitation or offer to buy or sell any securities or
>> related financial instruments.
>> **********************************************************************
>> *
>> ******
>>
>>
>> This message has been scanned for viruses by BlackSpider MailControl -
>> www.blackspider.com
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
>>      
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>    

-- 


From jab.antlr at species.org  Thu Apr  1 10:19:23 2010
From: jab.antlr at species.org (James Briant)
Date: Thu, 1 Apr 2010 10:19:23 -0700
Subject: [antlr-interest] fixed
Message-ID: <r2je063fb511004011019uc4c9f4d0ncecf727629cd9505@mail.gmail.com>

Once I managed to get ANTLR to give me the error message, the problem was
easy to solve. I had these two lines:

|   ^(IF parenthesizedExpression statement statement)
|   ^(IF parenthesizedExpression statement)

And I just changed it to:

|   ^(IF parenthesizedExpression statement statement?)

And now it works fine.

So the problem was definitely an exception in the DFA constructor that was
then caught, but ignored, with no warning or error. Once I forced it to
report the error, I could fix it.

Jamie

From jab.antlr at species.org  Thu Apr  1 10:28:31 2010
From: jab.antlr at species.org (James Briant)
Date: Thu, 1 Apr 2010 10:28:31 -0700
Subject: [antlr-interest] building antlr: feedback
Message-ID: <v2ke063fb511004011028z748d2b2bm58b4216dc067eafb@mail.gmail.com>

I spent several hours building antlr, which on the one hand is a tiny amount
of time to go from nothing to having a fully working parser generator :-)
Thank you all for creating this awesome software. I have some requests to
make it even easier:

1. Try building it from a fresh checkout (like I had to). I got errors below
(at the end of this email).
2. Can we distinguish Unit Tests from Functional Tests please?

Unit tests need to be *short* time-wise, so that developers are motivated to
run them every time they build. I gave up running the unit tests after about
10 minutes, and eventually had to delete the test folders entirely.

Functional Tests on the other hand can take as long as you like.

May I suggest using http://maven.apache.org/pom.html#Profiles to
differentiate between builds that are local and builds that are intended to
be pushed out to the world?

Thanks for listening,

Jamie


neutron:antlr-3.2 jamie$ mvn package
[INFO] Scanning for projects...
[INFO] Reactor build order:
[INFO]   ANTLR Master build control POM
[INFO]   Antlr 3 Runtime
[INFO]   ANTLR Grammar Tool
[INFO]   Maven plugin for ANTLR V3
[INFO]
------------------------------------------------------------------------
[INFO] Building ANTLR Master build control POM
[INFO]    task-segment: [package]
[INFO]
------------------------------------------------------------------------
[INFO] [site:attach-descriptor]
[INFO]
------------------------------------------------------------------------
[INFO] Building Antlr 3 Runtime
[INFO]    task-segment: [package]
[INFO]
------------------------------------------------------------------------
[INFO] [buildnumber:create {execution: default}]
[INFO] Storing buildNumber: Mar 31, 2010 22:30:11 at timestamp:
1270099811460
[INFO]
------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO]
------------------------------------------------------------------------
[INFO] The scm url cannot be null.
[INFO]
------------------------------------------------------------------------
[INFO] Trace
java.lang.NullPointerException: The scm url cannot be null.
at
org.apache.maven.scm.manager.AbstractScmManager.makeScmRepository(AbstractScmManager.java:181)
at org.codehaus.mojo.build.CreateMojo.getScmRepository(CreateMojo.java:722)
at org.codehaus.mojo.build.CreateMojo.getScmBranch(CreateMojo.java:593)
at org.codehaus.mojo.build.CreateMojo.execute(CreateMojo.java:452)
at
org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)
at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)
at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)
at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)
at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)
at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)
at
org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)
at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)
at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)
at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
[INFO]
------------------------------------------------------------------------
[INFO] Total time: 5 seconds
[INFO] Finished at: Wed Mar 31 22:30:11 PDT 2010
[INFO] Final Memory: 23M/79M
[INFO]
------------------------------------------------------------------------

From rdclark at gmail.com  Thu Apr  1 11:04:55 2010
From: rdclark at gmail.com (Richard Clark)
Date: Thu, 1 Apr 2010 11:04:55 -0700
Subject: [antlr-interest] Partial parsing
In-Reply-To: <1363099f1003300951m55abf474o5a415059d20be80d@mail.gmail.com>
References: <1363099f1003300951m55abf474o5a415059d20be80d@mail.gmail.com>
Message-ID: <55BE0E93-D8B3-4F85-B526-393444F8EF2B@gmail.com>

Would a "filtering lexer" work better for you? That's used to pick out the content of interest and ignore the rest. 

I was able to write a SQL parser that picks out table definitions in one dialect and translates them to another dialect in something under 100 lines.

...R

On Mar 30, 2010, at 9:51 AM, Anton Bychkov wrote:

> Hi.
> 
> I'm trying to implement partial SQL parsing in my application with the
> help of ANTLR.
> It is hard to write proper grammar for some SQL expressions, so I want
> to leave them as a plain text.


From soren.andersen at gmail.com  Thu Apr  1 12:51:47 2010
From: soren.andersen at gmail.com (=?iso-8859-1?Q?S=F8ren_Andersen?=)
Date: Thu, 1 Apr 2010 21:51:47 +0200
Subject: [antlr-interest] LL(k) --- what is k?
Message-ID: <BBD74EC5-CAC9-4DE2-888E-3E80E83AFC92@gmail.com>

I have perhaps a strange question :)

I'm using ANTLR as part of my thesis, and one of the things I'd like to know (though not strictly necessary) is, when ANTLR is not in backtracking mode (being LL(*)) and it is instead "just" LL(k), is there any way to get ANTLR to *tell* you what said k is?

It would be quite interesting to know and compare the needed lookahead for different languages!

Thank you in advance,

S?ren Andersen

From parrt at cs.usfca.edu  Thu Apr  1 12:54:06 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Thu, 1 Apr 2010 12:54:06 -0700
Subject: [antlr-interest] LL(k) --- what is k?
In-Reply-To: <BBD74EC5-CAC9-4DE2-888E-3E80E83AFC92@gmail.com>
References: <BBD74EC5-CAC9-4DE2-888E-3E80E83AFC92@gmail.com>
Message-ID: <39A8C765-5C40-41C5-9EA1-45CD983CF136@cs.usfca.edu>

Hi. IThink that -report option will help you some with statistics.
Ter
On Apr 1, 2010, at 12:51 PM, S?ren Andersen wrote:

> I have perhaps a strange question :)
> 
> I'm using ANTLR as part of my thesis, and one of the things I'd like to know (though not strictly necessary) is, when ANTLR is not in backtracking mode (being LL(*)) and it is instead "just" LL(k), is there any way to get ANTLR to *tell* you what said k is?
> 
> It would be quite interesting to know and compare the needed lookahead for different languages!
> 
> Thank you in advance,
> 
> S?ren Andersen
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From spoulson at explodingcoder.com  Thu Apr  1 16:35:32 2010
From: spoulson at explodingcoder.com (Shawn Poulson)
Date: Thu, 01 Apr 2010 19:35:32 -0400
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
Message-ID: <00ab01cad1f4$0811a540$1834efc0$@com>

Hello all,

 

I've been working on and off with ANTLR over the past couple years and one
thing that always got me, not being a Java developer, was trying to remember
how to call ANTLR to compile my grammars to C#.  Moreover, I really wanted
it to be part of Visual Studio so that it generated code from the grammar on
change, like a Makefile.  I searched around and couldn't find any such tool
that already existed.

 

Visual Studio has an API that allows you to create your own code generators,
so I took a shot at it.  I have a working proof of concept that works as you
would expect.  The generated code files are seen as child nodes hanging off
the grammar file.  I was curious if anyone were willing to give it a shot
and let me know how it works for them.  I'd like to package it up into an
installer and put the source up on something like github or ohloh.  Any
input would be greatly appreciated.

 

---

Shawn Poulson

spoulson at explodingcoder.com

 


From acondit at ipns.com  Thu Apr  1 21:02:53 2010
From: acondit at ipns.com (Alan Condit)
Date: Thu, 1 Apr 2010 21:02:53 -0700
Subject: [antlr-interest] antlr-interest Digest, Vol 65, Issue 1
In-Reply-To: <mailman.1.1270148402.2282.antlr-interest@antlr.org>
References: <mailman.1.1270148402.2282.antlr-interest@antlr.org>
Message-ID: <0BDD123C-2BA8-477E-A1B8-E855368FC199@ipns.com>

Jim,

I guess the question then is how do you go about adding import header statements into the generated c files, so that you can use Objective C objects and messages in the tree handling code? I'd rather not have to edit them by hand everytime that I make a change to the .g file.

Also, is it possible to configure the lexer, so that you pass it a buffer, rather than a file stream? I currently have a lexer written in Objective-C that works that way, but I like the higher level lexer definition of antlr for ease of maintenance.

Alan
---

On Apr 1, 2010, at 12:00 PM, antlr-interest-request at antlr.org wrote:

>  28. Objective-C and Antlr (Alan Condit)
>  29. Re: Objective-C and Antlr (Jim Idle)
> ------------------------------
> 
> Message: 29
> Date: Thu, 01 Apr 2010 08:29:36 -0700
> From: "Jim Idle" <jimi at temporal-wave.com>
> Subject: Re: [antlr-interest] Objective-C and Antlr
> To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Message-ID: <ae5820b41a49164fabb46295b2feef87 at temporal-wave.com>
> Content-Type: text/plain;	charset="us-ascii"
> 
> Well, the C output is compatible with Objective C of course, but the ObjC target was pretty much abandoned too many years ago to be useful. I doubt that there is much advantage to using an objective C oriented target vs a straight C target to be honest.
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Alan Condit
>> Sent: Thursday, April 01, 2010 8:28 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Objective-C and Antlr
>> 
>> Is there a string template to generate Objective-C from Antlr3.2? If
>> not what version of Antlr does one need to go back to in order to get a
>> version that will generate Objective-C code?
>> 
>> Thanks,
>> Alan

From acondit at ipns.com  Thu Apr  1 21:05:23 2010
From: acondit at ipns.com (Alan Condit)
Date: Thu, 1 Apr 2010 21:05:23 -0700
Subject: [antlr-interest] Objective-C and Antlr
In-Reply-To: <mailman.1.1270148402.2282.antlr-interest@antlr.org>
References: <mailman.1.1270148402.2282.antlr-interest@antlr.org>
Message-ID: <37582E08-18A7-4A81-8B11-A8BF674196E9@ipns.com>

Jim,

I changed the subject line to try and keep it in the correct thread, sorry about that.

I guess the question then is how do you go about adding import header statements into the generated c files, so that you can use Objective C objects and messages in the tree handling code? I'd rather not have to edit them by hand everytime that I make a change to the .g file.

Also, is it possible to configure the lexer, so that you pass it a buffer, rather than a file stream? I currently have a lexer written in Objective-C that works that way, but I like the higher level lexer definition of antlr for ease of maintenance.

Alan
---

On Apr 1, 2010, at 12:00 PM, antlr-interest-request at antlr.org wrote:

> 28. Objective-C and Antlr (Alan Condit)
> 29. Re: Objective-C and Antlr (Jim Idle)
> ------------------------------
> 
> Message: 29
> Date: Thu, 01 Apr 2010 08:29:36 -0700
> From: "Jim Idle" <jimi at temporal-wave.com>
> Subject: Re: [antlr-interest] Objective-C and Antlr
> To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> Message-ID: <ae5820b41a49164fabb46295b2feef87 at temporal-wave.com>
> Content-Type: text/plain;	charset="us-ascii"
> 
> Well, the C output is compatible with Objective C of course, but the ObjC target was pretty much abandoned too many years ago to be useful. I doubt that there is much advantage to using an objective C oriented target vs a straight C target to be honest.
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Alan Condit
>> Sent: Thursday, April 01, 2010 8:28 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] Objective-C and Antlr
>> 
>> Is there a string template to generate Objective-C from Antlr3.2? If
>> not what version of Antlr does one need to go back to in order to get a
>> version that will generate Objective-C code?
>> 
>> Thanks,
>> Alan

From sharwell at pixelminegames.com  Thu Apr  1 22:34:13 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 2 Apr 2010 00:34:13 -0500
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
References: <00ab01cad1f4$0811a540$1834efc0$@com>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DEF0@martini.ironwillgames.com>

Hi Shawn,

I went the route of tying it into MSBuild. The generated file is placed
in the intermediate output directory (often obj\Debug or obj\Release).
This system properly handles dependent grammars (eg. tree grammars are
automatically recompiled when the lexer defining the tokens is
recompiled). The latest source is in source control as the
AntlrBuildTask project that's part of the C# 3 port. I still need to
post an updated set of binaries for it since I fixed several bugs.

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Shawn Poulson
Sent: Thursday, April 01, 2010 6:36 PM
To: ANTLR Interest
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files

Hello all,

 

I've been working on and off with ANTLR over the past couple years and
one
thing that always got me, not being a Java developer, was trying to
remember
how to call ANTLR to compile my grammars to C#.  Moreover, I really
wanted
it to be part of Visual Studio so that it generated code from the
grammar on
change, like a Makefile.  I searched around and couldn't find any such
tool
that already existed.

 

Visual Studio has an API that allows you to create your own code
generators,
so I took a shot at it.  I have a working proof of concept that works as
you
would expect.  The generated code files are seen as child nodes hanging
off
the grammar file.  I was curious if anyone were willing to give it a
shot
and let me know how it works for them.  I'd like to package it up into
an
installer and put the source up on something like github or ohloh.  Any
input would be greatly appreciated.

 

---

Shawn Poulson

spoulson at explodingcoder.com

 


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From BrianC at sannas.org  Fri Apr  2 01:01:31 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Thu, 1 Apr 2010 22:01:31 -1000
Subject: [antlr-interest] FW: C example error
Message-ID: <001501cad23a$b5540900$1ffc1b00$@sannas.org>

Is there any particular reason why the maintainers of the C port aren't
interested in this question?  This is the third time in the last 4 weeks
I've posted this, and I haven't received a single response

 

-Brian

 

From: Brian Catlin [mailto:BrianC at sannas.org] 
Sent: Monday, March 29, 2010 21:24
To: antlr-interest at antlr.org
Subject: C example error

 

I tried to build the PolyDiff example from Examples-v3, using
ANTLR-3.1-2009-06-28 and libantlr3c-3.2 in Visual Studio 2008.  The output
from the build:

 

1>------ Rebuild All started: Project: polydiff, Configuration: Debug Win32
------

1>Deleting intermediate and output files for project 'polydiff',
configuration 'Debug|Win32'

1>Translating to parser/lexer combination

1>Translating to parser/lexer combination

1>Translating to parser/lexer combination

1>Translating to parser/lexer combination

1>.\PolyDifferentiator.g(0,0) : warning 138 : grammar PolyDifferentiator: no
start rule (no rule can obviously be followed by EOF)

1>Compiling...

1>Simplifier.c

1>PolyPrinter.c

1>PolyParser.c

1>PolyLexer.c

1>PolyDifferentiator.c

1>main.c

1>Generating Code...

1>Compiling manifest to resources...

1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385

1>Copyright (C) Microsoft Corporation.  All rights reserved.

1>Linking...

1>LINK : C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exe not found or not
built by the last incremental link; performing full link

1>   Creating library C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.lib and
object C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exp

1>Embedding manifest...

1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385

1>Copyright (C) Microsoft Corporation.  All rights reserved.

1>Build log was saved at
"file://c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm
<file:///c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm> "

1>polydiff - 0 error(s), 1 warning(s)

========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========

 

As you can see, there is a warning generating PolyDifferentiator.g

 

When I run the resulting program, I get an access violation in addChild
(antlr3basetree.c) at the ->, because child has not been initialized

 

void      

addChild (pANTLR3_BASE_TREE tree, pANTLR3_BASE_TREE child)

{

      ANTLR3_UINT32   n;

      ANTLR3_UINT32   i;

 

      if    (child == NULL)

      {

            return;

      }

 

->  if    (child->isNilNode(child) == ANTLR3_TRUE)

      {

            if  (child->children != NULL && child->children ==
tree->children)

 

 

 

 


From Sanus at gmx.de  Fri Apr  2 04:21:44 2010
From: Sanus at gmx.de (Christian Hoffmann)
Date: Fri, 2 Apr 2010 13:21:44 +0200
Subject: [antlr-interest] Mismatched tree node
Message-ID: <926370867.20100402132144@gmx.de>

Hi,

I struggling with the error "Mismatched tree node" at my C grammar.
The error disappears if i remove the '+' at the imaginary node
creation for  TOK_ARRAY_INDEX to  -> ^(TOK_ARRAY_INDEX expression)
The examples in Terence book shows exactly this to collect input
elements.
The rule 'arrayDef' doesn't generate the error but i got only 1 node,
even for multidimensional array definition like 'a[1][2][3];'

// 1. problem

arrayIdent
        : IDENT^ arrayDef
        ;
arrayDef        // like a[1][2][3]...
  : arrayDefTmp (arrayDefTmp)*  -> ^(TOK_ARRAY_DEF arrayDefTmp+)
  ;
arrayDefTmp
  : '['! intConst ']'!
  ;

.....

// 2. problem

postfixExpression
  : methodCall
  | encapsulatedExpression
  | IDENT {
    ( '++' -> ^(TOK_POSTINC primaryExpression)
    | '--' -> ^(TOK_POSTDEC primaryExpression)
    | arrayIndex*   //-> ^(primaryExpression arrayIndex)
    )
  ;

arrayIndex
  : ('[' expression ']') -> ^(TOK_ARRAY_INDEX expression+)
  ;


Can anyone give me a hint?
Thx


-- 
Christian Hoffmann
?tzenkamp 4
38118 Braunschweig
Tel: 0171/7300609
Web: www.c-hoffmann.de
     www.logical-arts.de


From corrado.campisano at gmail.com  Fri Apr  2 07:59:11 2010
From: corrado.campisano at gmail.com (Corrado Campisano)
Date: Fri, 2 Apr 2010 16:59:11 +0200
Subject: [antlr-interest] Stopping parser and lexer at first error
In-Reply-To: <20814e5a1003091553w76e3aeedo8e3deac2f09ec563@mail.gmail.com>
References: <20814e5a1003091553w76e3aeedo8e3deac2f09ec563@mail.gmail.com>
Message-ID: <s2l20814e5a1004020759g205a00b8l8395c0c2aefdb5e0@mail.gmail.com>

Hi all,

I setup an ANTLR-maven archetype with a grammar providing the override for
the 'always resume' behaviour.

You can find details on my
website<http://www.servicemix.eu/index.php?option=com_content&view=article&id=14>,
maybe it's worth checking it and adding a notice on this archetype to this
ANTLR wiki page<http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+with+Maven>and/or
to the ANTLR
v3 Maven plugin page <http://www.antlr.org/antlr3-maven-plugin/index.html>.


Regards,
Corrado.


2010/3/10 Corrado Campisano <corrado.campisano at gmail.com>

> Hi all,
>
> I needed to catch any syntax error (letting the lexer insert/delete chars
> or the parser keeping parsing with the sys.err message only could be very
> dangerous to my application), so I took a look on the reference (which
> reports information not valid anymore) and on the internet and I found
> several hints and articles:
>
> Why the generated parser code tolerates illegal expression?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=4554943>
> How can I make the lexer exit upon first lexical error?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=5341217>
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
> [antlr-interest] I want to throw an exception and stop parse, please!
> <http://www.antlr.org/pipermail/antlr-interest/2009-May/034605.html>
>
> It looks to me I found a way to do this, maybe it's worth to publish that
> on the wiki, once validated.
>
>
> I just added the following overrides to my grammar (attached):
>
> @parser::members
> {
>     public class ParserException extends RuntimeException {
>             Object objCurrentInputSymbol = null;
>
>             public ParserException(Object oCurrentInputSymbol) {
>                 this.objCurrentInputSymbol = oCurrentInputSymbol;
>             }
>         }
>
>         protected Object recoverFromMismatchedToken(IntStream input, int
> ttype, BitSet follow) throws RecognitionException {
>             System.out.println("PARSER :
> this.getCurrentInputSymbol(input).toString() : " +
> this.getCurrentInputSymbol(input).toString());
>             System.out.println("PARSER : this.failed() : " +
> this.failed());
>             System.out.println("PARSER : this.getNumberOfSyntaxErrors() : "
> + this.getNumberOfSyntaxErrors());
>             throw new ParserException(this.getCurrentInputSymbol(input));
>         }
> }
>
> @lexer::members
> {
>     public class LexerException extends RuntimeException {
>             RecognitionException recognitionException = null;
>             String strErrorHeader = null;
>             String strErrorMessage = null;
>
>             public LexerException(RecognitionException recExc, String
> sHead, String sMsg) {
>                 this.recognitionException = recExc;
>                 this.strErrorHeader = sHead;
>                 this.strErrorMessage = sMsg;
>
>                 System.out.println("LEXER : ErrorHeader : " + sHead);
>                 System.out.println("LEXER : ErrorMessage : " + sMsg);
>                 System.out.println("LEXER : RecognitionException : " +
> this.recognitionException.toString());
>             }
>         }
>
>
>         public void reportError(RecognitionException recExc) {
>         throw new LexerException(recExc, this.getErrorHeader(recExc),
> getErrorMessage(recExc, this.getTokenNames()));
>     }
> }
>
>
> Then I tested it with a simple class:
>     public static void main(String[] args) {
>         testLexerError();
>         testParserError();
>     }
>     private static void testLexerError() {
>         String strDlToParse = "{CORRADO PIPPO ;feee}";
>         System.out.println("TESTING LEXER with : " + strDlToParse);
>         testError(strDlToParse);
>     }
>     private static void testParserError() {
>         String strDlToParse = "{CORRADO PIPPO feee} dhert";
>         System.out.println("TESTING PARSER with : " + strDlToParse);
>         testError(strDlToParse);
>     }
>     private static void testError(String strDlToParse) {
>         CommonTree tree=null;
>         String strError = null;
>
>         ANTLRStringStream input = new
> org.antlr.runtime.ANTLRStringStream(strDlToParse);
>         Dl2OwlJavaBLexer lexer = new Dl2OwlJavaBLexer(input);
>         TokenStream tokens = new
> org.antlr.runtime.CommonTokenStream(lexer);
>         Dl2OwlJavaBParser parser = new Dl2OwlJavaBParser(tokens);
>
>         try {
>             // this may rise an exception
>             // TODO : check why NO EXCEPTION is risen with error "line 1:9
> no viable alternative at character ';'" on inputs like "{CORRADO ;}"
>             eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom_return ret =
> parser.axiom();
>
>             // TODO : check if this will be executed if no exception rises
>             tree = (CommonTree) ret.getTree();
>
>             printTreeHelper(tree);
>
>         } catch (RecognitionException e) {
>
>             System.out.println(e.toString());
>             e.printStackTrace();
>
>         } catch (RuntimeException e) {
>
>             System.out.println(e.toString());
>             e.printStackTrace();
>         }
>     }
>
>
> The output looks ok, I wonder whether the whole 'trick' is too...
>
> TESTING LEXER with : {CORRADO PIPPO *;*feee}
> LEXER : ErrorHeader : line 1:15
> LEXER : ErrorMessage : no viable alternative at character ';'
> LEXER : RecognitionException : NoViableAltException(';'@[1:1: Tokens : (
> T__37 | T__38 | T__39 | T__40 | HAS_VALUE | ALL_VALUES | SOME_VALUES | DOT |
> HAS_CARD | MIN_CARD | MAX_CARD | NOT | AND | OR | URI_REF | INT_VALUE | WS |
> CTRL_CHAR );])
> eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
> eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
>     at
> eu.servicemix.dl2owl.Dl2OwlJavaBLexer.reportError(Dl2OwlJavaBLexer.java:69)
>     at org.antlr.runtime.Lexer.nextToken(Lexer.java:94)
>     at
> org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:119)
>     at org.antlr.runtime.CommonTokenStream.LT<http://org.antlr.runtime.commontokenstream.lt/>
> (CommonTokenStream.java:238)
>     at
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:110)
>     at
> eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:140)
>     at
> eu.servicemix.dl2owl.CommonTreeHelper.testLexerError(CommonTreeHelper.java:121)
>     at
> eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:113)
>
> TESTING PARSER with : {CORRADO PIPPO feee} *dhert*
> PARSER : this.getCurrentInputSymbol(input).toString() :
> [@8,21:25='dhert',<7>,1:21]
> PARSER : this.failed() : false
> PARSER : this.getNumberOfSyntaxErrors() : 0
> eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
> eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
>     at
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.recoverFromMismatchedToken(Dl2OwlJavaBParser.java:97)
>     at org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:115)
>     at
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:232)
>     at
> eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:140)
>     at
> eu.servicemix.dl2owl.CommonTreeHelper.testParserError(CommonTreeHelper.java:126)
>     at
> eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:114)
>
>
> Any comment really appreciated!!
>
> Corrado
>
>

From jimi at temporal-wave.com  Fri Apr  2 08:12:32 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 02 Apr 2010 08:12:32 -0700
Subject: [antlr-interest] antlr-interest Digest, Vol 65, Issue 1
In-Reply-To: <0BDD123C-2BA8-477E-A1B8-E855368FC199@ipns.com>
Message-ID: <d220f6e292f9e540b86bf3a026f5ccbf@temporal-wave.com>

Please read the API docs about the various @sections. However, make sure that you keep as much code as possible out of the actions in the grammar. All you should have is API calls to some kind of interface object, which you can certainly add in to the headers:

@includes
@header
@preincludes
@postinclude

See: Using Sections within Grammar Files: http://antlr.org/api/C/index.html

Use StringStream instead of FileStream. Download the examples zip file and look at the examples in the C directory.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Thursday, April 01, 2010 9:03 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] antlr-interest Digest, Vol 65, Issue 1
> 
> Jim,
> 
> I guess the question then is how do you go about adding import header
> statements into the generated c files, so that you can use Objective C
> objects and messages in the tree handling code? I'd rather not have to
> edit them by hand everytime that I make a change to the .g file.
> 
> Also, is it possible to configure the lexer, so that you pass it a
> buffer, rather than a file stream? I currently have a lexer written in
> Objective-C that works that way, but I like the higher level lexer
> definition of antlr for ease of maintenance.
> 
> Alan
> ---
> 
> On Apr 1, 2010, at 12:00 PM, antlr-interest-request at antlr.org wrote:
> 
> >  28. Objective-C and Antlr (Alan Condit)
> >  29. Re: Objective-C and Antlr (Jim Idle)
> > ------------------------------
> >
> > Message: 29
> > Date: Thu, 01 Apr 2010 08:29:36 -0700
> > From: "Jim Idle" <jimi at temporal-wave.com>
> > Subject: Re: [antlr-interest] Objective-C and Antlr
> > To: "antlr-interest at antlr.org" <antlr-interest at antlr.org>
> > Message-ID: <ae5820b41a49164fabb46295b2feef87 at temporal-wave.com>
> > Content-Type: text/plain;	charset="us-ascii"
> >
> > Well, the C output is compatible with Objective C of course, but the
> ObjC target was pretty much abandoned too many years ago to be useful.
> I doubt that there is much advantage to using an objective C oriented
> target vs a straight C target to be honest.
> 
> >
> > Jim
> >
> >> -----Original Message-----
> >> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> >> bounces at antlr.org] On Behalf Of Alan Condit
> >> Sent: Thursday, April 01, 2010 8:28 AM
> >> To: antlr-interest at antlr.org
> >> Subject: [antlr-interest] Objective-C and Antlr
> >>
> >> Is there a string template to generate Objective-C from Antlr3.2? If
> >> not what version of Antlr does one need to go back to in order to
> get a
> >> version that will generate Objective-C code?
> >>
> >> Thanks,
> >> Alan
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Fri Apr  2 08:15:56 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 02 Apr 2010 08:15:56 -0700
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DEF0@martini.ironwillgames.com>
Message-ID: <a32e038daefb6a4298f29ea2f4b11451@temporal-wave.com>

Did you updates this for VS2010 yet Sam? The C build system seems to use MSBUILD in vs2010 to, so I would suggest that we take your code out of the C# specific tree and my vs2008 C build rule files out of the C tree and create a buildsystems tree or something similar.  I (or you if you prefer to own it) can then adapt your current integration to select between C or C# on vs201, as my feeling is that the will be very similar (other htan I have a header file to deal with as well).

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sam Harwell
> Sent: Thursday, April 01, 2010 10:34 PM
> To: Shawn Poulson; ANTLR Interest
> Subject: Re: [antlr-interest] Visual Studio plugin for ANTLR grammar
> files
> 
> Hi Shawn,
> 
> I went the route of tying it into MSBuild. The generated file is placed
> in the intermediate output directory (often obj\Debug or obj\Release).
> This system properly handles dependent grammars (eg. tree grammars are
> automatically recompiled when the lexer defining the tokens is
> recompiled). The latest source is in source control as the
> AntlrBuildTask project that's part of the C# 3 port. I still need to
> post an updated set of binaries for it since I fixed several bugs.
> 
> Sam
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Shawn Poulson
> Sent: Thursday, April 01, 2010 6:36 PM
> To: ANTLR Interest
> Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
> 
> Hello all,
> 
> 
> 
> I've been working on and off with ANTLR over the past couple years and
> one
> thing that always got me, not being a Java developer, was trying to
> remember
> how to call ANTLR to compile my grammars to C#.  Moreover, I really
> wanted
> it to be part of Visual Studio so that it generated code from the
> grammar on
> change, like a Makefile.  I searched around and couldn't find any such
> tool
> that already existed.
> 
> 
> 
> Visual Studio has an API that allows you to create your own code
> generators,
> so I took a shot at it.  I have a working proof of concept that works
> as
> you
> would expect.  The generated code files are seen as child nodes hanging
> off
> the grammar file.  I was curious if anyone were willing to give it a
> shot
> and let me know how it works for them.  I'd like to package it up into
> an
> installer and put the source up on something like github or ohloh.  Any
> input would be greatly appreciated.
> 
> 
> 
> ---
> 
> Shawn Poulson
> 
> spoulson at explodingcoder.com
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Fri Apr  2 08:20:14 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 02 Apr 2010 08:20:14 -0700
Subject: [antlr-interest] FW: C example error
In-Reply-To: <001501cad23a$b5540900$1ffc1b00$@sannas.org>
Message-ID: <1daac78eed62b44784ee046b36c847da@temporal-wave.com>

1) Because I am very busy;
2) Because it is a warning not an error and is not stopping you doing anything;
3) Because it isn't specific to the C target as 10 seconds of investigation would have shown you;
4) Because you can use antlr.markmail.org and find the question answered a number of times;
5) Because you aren't paying me;
6) If you posted it 3 times and I did not answer, perhaps this tells you something about the question;

Does that answer your question?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Brian Catlin
> Sent: Friday, April 02, 2010 1:02 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] FW: C example error
> 
> Is there any particular reason why the maintainers of the C port aren't
> interested in this question?  This is the third time in the last 4
> weeks
> I've posted this, and I haven't received a single response
> 
> 
> 
> -Brian
> 
> 
> 
> From: Brian Catlin [mailto:BrianC at sannas.org]
> Sent: Monday, March 29, 2010 21:24
> To: antlr-interest at antlr.org
> Subject: C example error
> 
> 
> 
> I tried to build the PolyDiff example from Examples-v3, using
> ANTLR-3.1-2009-06-28 and libantlr3c-3.2 in Visual Studio 2008.  The
> output
> from the build:
> 
> 
> 
> 1>------ Rebuild All started: Project: polydiff, Configuration: Debug
> Win32
> ------
> 
> 1>Deleting intermediate and output files for project 'polydiff',
> configuration 'Debug|Win32'
> 
> 1>Translating to parser/lexer combination
> 
> 1>Translating to parser/lexer combination
> 
> 1>Translating to parser/lexer combination
> 
> 1>Translating to parser/lexer combination
> 
> 1>.\PolyDifferentiator.g(0,0) : warning 138 : grammar
> PolyDifferentiator: no
> start rule (no rule can obviously be followed by EOF)
> 
> 1>Compiling...
> 
> 1>Simplifier.c
> 
> 1>PolyPrinter.c
> 
> 1>PolyParser.c
> 
> 1>PolyLexer.c
> 
> 1>PolyDifferentiator.c
> 
> 1>main.c
> 
> 1>Generating Code...
> 
> 1>Compiling manifest to resources...
> 
> 1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385
> 
> 1>Copyright (C) Microsoft Corporation.  All rights reserved.
> 
> 1>Linking...
> 
> 1>LINK : C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exe not found or
> not
> built by the last incremental link; performing full link
> 
> 1>   Creating library C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.lib
> and
> object C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exp
> 
> 1>Embedding manifest...
> 
> 1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385
> 
> 1>Copyright (C) Microsoft Corporation.  All rights reserved.
> 
> 1>Build log was saved at
> "file://c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm
> <file:///c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm> "
> 
> 1>polydiff - 0 error(s), 1 warning(s)
> 
> ========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========
> 
> 
> 
> As you can see, there is a warning generating PolyDifferentiator.g
> 
> 
> 
> When I run the resulting program, I get an access violation in addChild
> (antlr3basetree.c) at the ->, because child has not been initialized
> 
> 
> 
> void
> 
> addChild (pANTLR3_BASE_TREE tree, pANTLR3_BASE_TREE child)
> 
> {
> 
>       ANTLR3_UINT32   n;
> 
>       ANTLR3_UINT32   i;
> 
> 
> 
>       if    (child == NULL)
> 
>       {
> 
>             return;
> 
>       }
> 
> 
> 
> ->  if    (child->isNilNode(child) == ANTLR3_TRUE)
> 
>       {
> 
>             if  (child->children != NULL && child->children ==
> tree->children)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Fri Apr  2 08:26:13 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 02 Apr 2010 08:26:13 -0700
Subject: [antlr-interest] Mismatched tree node
In-Reply-To: <926370867.20100402132144@gmx.de>
Message-ID: <5d0a08b9aaad554593a08ffdc77f74c3@temporal-wave.com>

Use ANTLR Works to visualize the AST that you are producing with ->(X e+) and you should see that your tree grammar does not reflect it. You want:

T : ^(TOK_ARRAY_INDEX e+) ;

In your tree grammar. In general, the tree grammar rule is the RHS of your parser rule.

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Christian Hoffmann
> Sent: Friday, April 02, 2010 4:22 AM
> To: ANTR Interest
> Subject: [antlr-interest] Mismatched tree node
> 
> Hi,
> 
> I struggling with the error "Mismatched tree node" at my C grammar.
> The error disappears if i remove the '+' at the imaginary node
> creation for  TOK_ARRAY_INDEX to  -> ^(TOK_ARRAY_INDEX expression)
> The examples in Terence book shows exactly this to collect input
> elements.
> The rule 'arrayDef' doesn't generate the error but i got only 1 node,
> even for multidimensional array definition like 'a[1][2][3];'
> 
> // 1. problem
> 
> arrayIdent
>         : IDENT^ arrayDef
>         ;
> arrayDef        // like a[1][2][3]...
>   : arrayDefTmp (arrayDefTmp)*  -> ^(TOK_ARRAY_DEF arrayDefTmp+)
>   ;
> arrayDefTmp
>   : '['! intConst ']'!
>   ;
> 
> .....
> 
> // 2. problem
> 
> postfixExpression
>   : methodCall
>   | encapsulatedExpression
>   | IDENT {
>     ( '++' -> ^(TOK_POSTINC primaryExpression)
>     | '--' -> ^(TOK_POSTDEC primaryExpression)
>     | arrayIndex*   //-> ^(primaryExpression arrayIndex)
>     )
>   ;
> 
> arrayIndex
>   : ('[' expression ']') -> ^(TOK_ARRAY_INDEX expression+)
>   ;
> 
> 
> Can anyone give me a hint?
> Thx
> 
> 
> --
> Christian Hoffmann
> ?tzenkamp 4
> 38118 Braunschweig
> Tel: 0171/7300609
> Web: www.c-hoffmann.de
>      www.logical-arts.de
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From stefika at gmail.com  Fri Apr  2 08:32:12 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Fri, 2 Apr 2010 09:32:12 -0600
Subject: [antlr-interest]  Creating extension libraries for a DSL
Message-ID: <n2v1332b72e1004020832m1523b853y7a509728a32e25b4@mail.gmail.com>

Hey folks,

Our development team here is nearly complete with a DSL that we've
designed and are hoping to ship the first open-source version in July
or so. Right now, we parse down to the ANTLR Java target and are
preparing for the version past this release, which I think needs to
include some extension libraries for the language. For example, while
our DSL can do all of the typical language things (e.g., if
statements, looping), there are no APIs or libraries for doing file
IO, connecting to hardware, network programming, or other such things.

Does this community have any experience adding in these sorts of
features, as in, suggestions as for what kind of approach we should
take? For example, we could allow something like a Java Native
Interface, that would allow a developer to connect in utilities that
allow things like File access. Or, we could allow custom native
functions for low level things, like a file keyword, but that doesn't
sound very flexible or extensible.

Any general suggestions on an appropriate approach to take?

Stefik

From sharwell at pixelminegames.com  Fri Apr  2 08:33:11 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Fri, 2 Apr 2010 10:33:11 -0500
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
References: <a32e038daefb6a4298f29ea2f4b11451@temporal-wave.com>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DEF1@martini.ironwillgames.com>

It didn't need any changes to work with C# projects with 2010. I'm using
it for my experimental language support in 2010. C code poses an
interesting problem of include directories. Perhaps you can output them
to:

$(IntermediateOutputDir)\Antlr\[GrammarName]\[GrammarName.h]

And then have it add obj\Debug\Antlr to the #include search directories.

The AntlrBuildTasks.dll MSBuild tasks assembly will be the same for the
CSharp3 and C targets. However, a new Antlr3.C.targets file or similar
will probably be much easier to maintain than a shared one for multiple
languages.

I'll try to put up a new build within the next couple days so people can
try this with more projects.

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Friday, April 02, 2010 10:16 AM
To: ANTLR Interest
Subject: Re: [antlr-interest] Visual Studio plugin for ANTLR grammar
files

Did you updates this for VS2010 yet Sam? The C build system seems to use
MSBUILD in vs2010 to, so I would suggest that we take your code out of
the C# specific tree and my vs2008 C build rule files out of the C tree
and create a buildsystems tree or something similar.  I (or you if you
prefer to own it) can then adapt your current integration to select
between C or C# on vs201, as my feeling is that the will be very similar
(other htan I have a header file to deal with as well).

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sam Harwell
> Sent: Thursday, April 01, 2010 10:34 PM
> To: Shawn Poulson; ANTLR Interest
> Subject: Re: [antlr-interest] Visual Studio plugin for ANTLR grammar
> files
> 
> Hi Shawn,
> 
> I went the route of tying it into MSBuild. The generated file is
placed
> in the intermediate output directory (often obj\Debug or obj\Release).
> This system properly handles dependent grammars (eg. tree grammars are
> automatically recompiled when the lexer defining the tokens is
> recompiled). The latest source is in source control as the
> AntlrBuildTask project that's part of the C# 3 port. I still need to
> post an updated set of binaries for it since I fixed several bugs.
> 
> Sam
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Shawn Poulson
> Sent: Thursday, April 01, 2010 6:36 PM
> To: ANTLR Interest
> Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
> 
> Hello all,
> 
> 
> 
> I've been working on and off with ANTLR over the past couple years and
> one
> thing that always got me, not being a Java developer, was trying to
> remember
> how to call ANTLR to compile my grammars to C#.  Moreover, I really
> wanted
> it to be part of Visual Studio so that it generated code from the
> grammar on
> change, like a Makefile.  I searched around and couldn't find any such
> tool
> that already existed.
> 
> 
> 
> Visual Studio has an API that allows you to create your own code
> generators,
> so I took a shot at it.  I have a working proof of concept that works
> as
> you
> would expect.  The generated code files are seen as child nodes
hanging
> off
> the grammar file.  I was curious if anyone were willing to give it a
> shot
> and let me know how it works for them.  I'd like to package it up into
> an
> installer and put the source up on something like github or ohloh.
Any
> input would be greatly appreciated.
> 
> 
> 
> ---
> 
> Shawn Poulson
> 
> spoulson at explodingcoder.com
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From jimi at temporal-wave.com  Fri Apr  2 08:35:56 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 02 Apr 2010 08:35:56 -0700
Subject: [antlr-interest] Stopping parser and lexer at first error
In-Reply-To: <s2l20814e5a1004020759g205a00b8l8395c0c2aefdb5e0@mail.gmail.com>
Message-ID: <a261531f3c9e224c9c03ca2e88699788@temporal-wave.com>

You should program your lexer such that it does not throw any errors. Program for the common mistakes (such as un-terminated "string) and have a catch all rule for unknown characters.

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Corrado Campisano
> Sent: Friday, April 02, 2010 7:59 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Stopping parser and lexer at first error
> 
> Hi all,
> 
> I setup an ANTLR-maven archetype with a grammar providing the override
> for
> the 'always resume' behaviour.
> 
> You can find details on my
> website<http://www.servicemix.eu/index.php?option=com_content&view=arti
> cle&id=14>,
> maybe it's worth checking it and adding a notice on this archetype to
> this
> ANTLR wiki
> page<http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+w
> ith+Maven>and/or
> to the ANTLR
> v3 Maven plugin page <http://www.antlr.org/antlr3-maven-
> plugin/index.html>.
> 
> 
> Regards,
> Corrado.
> 
> 
> 2010/3/10 Corrado Campisano <corrado.campisano at gmail.com>
> 
> > Hi all,
> >
> > I needed to catch any syntax error (letting the lexer insert/delete
> chars
> > or the parser keeping parsing with the sys.err message only could be
> very
> > dangerous to my application), so I took a look on the reference
> (which
> > reports information not valid anymore) and on the internet and I
> found
> > several hints and articles:
> >
> > Why the generated parser code tolerates illegal
> expression?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=4554
> 943>
> > How can I make the lexer exit upon first lexical
> error?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=5341217>
> > http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
> > [antlr-interest] I want to throw an exception and stop parse, please!
> > <http://www.antlr.org/pipermail/antlr-interest/2009-May/034605.html>
> >
> > It looks to me I found a way to do this, maybe it's worth to publish
> that
> > on the wiki, once validated.
> >
> >
> > I just added the following overrides to my grammar (attached):
> >
> > @parser::members
> > {
> >     public class ParserException extends RuntimeException {
> >             Object objCurrentInputSymbol = null;
> >
> >             public ParserException(Object oCurrentInputSymbol) {
> >                 this.objCurrentInputSymbol = oCurrentInputSymbol;
> >             }
> >         }
> >
> >         protected Object recoverFromMismatchedToken(IntStream input,
> int
> > ttype, BitSet follow) throws RecognitionException {
> >             System.out.println("PARSER :
> > this.getCurrentInputSymbol(input).toString() : " +
> > this.getCurrentInputSymbol(input).toString());
> >             System.out.println("PARSER : this.failed() : " +
> > this.failed());
> >             System.out.println("PARSER :
> this.getNumberOfSyntaxErrors() : "
> > + this.getNumberOfSyntaxErrors());
> >             throw new
> ParserException(this.getCurrentInputSymbol(input));
> >         }
> > }
> >
> > @lexer::members
> > {
> >     public class LexerException extends RuntimeException {
> >             RecognitionException recognitionException = null;
> >             String strErrorHeader = null;
> >             String strErrorMessage = null;
> >
> >             public LexerException(RecognitionException recExc, String
> > sHead, String sMsg) {
> >                 this.recognitionException = recExc;
> >                 this.strErrorHeader = sHead;
> >                 this.strErrorMessage = sMsg;
> >
> >                 System.out.println("LEXER : ErrorHeader : " + sHead);
> >                 System.out.println("LEXER : ErrorMessage : " + sMsg);
> >                 System.out.println("LEXER : RecognitionException : "
> +
> > this.recognitionException.toString());
> >             }
> >         }
> >
> >
> >         public void reportError(RecognitionException recExc) {
> >         throw new LexerException(recExc, this.getErrorHeader(recExc),
> > getErrorMessage(recExc, this.getTokenNames()));
> >     }
> > }
> >
> >
> > Then I tested it with a simple class:
> >     public static void main(String[] args) {
> >         testLexerError();
> >         testParserError();
> >     }
> >     private static void testLexerError() {
> >         String strDlToParse = "{CORRADO PIPPO ;feee}";
> >         System.out.println("TESTING LEXER with : " + strDlToParse);
> >         testError(strDlToParse);
> >     }
> >     private static void testParserError() {
> >         String strDlToParse = "{CORRADO PIPPO feee} dhert";
> >         System.out.println("TESTING PARSER with : " + strDlToParse);
> >         testError(strDlToParse);
> >     }
> >     private static void testError(String strDlToParse) {
> >         CommonTree tree=null;
> >         String strError = null;
> >
> >         ANTLRStringStream input = new
> > org.antlr.runtime.ANTLRStringStream(strDlToParse);
> >         Dl2OwlJavaBLexer lexer = new Dl2OwlJavaBLexer(input);
> >         TokenStream tokens = new
> > org.antlr.runtime.CommonTokenStream(lexer);
> >         Dl2OwlJavaBParser parser = new Dl2OwlJavaBParser(tokens);
> >
> >         try {
> >             // this may rise an exception
> >             // TODO : check why NO EXCEPTION is risen with error
> "line 1:9
> > no viable alternative at character ';'" on inputs like "{CORRADO ;}"
> >             eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom_return ret =
> > parser.axiom();
> >
> >             // TODO : check if this will be executed if no exception
> rises
> >             tree = (CommonTree) ret.getTree();
> >
> >             printTreeHelper(tree);
> >
> >         } catch (RecognitionException e) {
> >
> >             System.out.println(e.toString());
> >             e.printStackTrace();
> >
> >         } catch (RuntimeException e) {
> >
> >             System.out.println(e.toString());
> >             e.printStackTrace();
> >         }
> >     }
> >
> >
> > The output looks ok, I wonder whether the whole 'trick' is too...
> >
> > TESTING LEXER with : {CORRADO PIPPO *;*feee}
> > LEXER : ErrorHeader : line 1:15
> > LEXER : ErrorMessage : no viable alternative at character ';'
> > LEXER : RecognitionException : NoViableAltException(';'@[1:1: Tokens
> : (
> > T__37 | T__38 | T__39 | T__40 | HAS_VALUE | ALL_VALUES | SOME_VALUES
> | DOT |
> > HAS_CARD | MIN_CARD | MAX_CARD | NOT | AND | OR | URI_REF | INT_VALUE
> | WS |
> > CTRL_CHAR );])
> > eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
> > eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
> >     at
> >
> eu.servicemix.dl2owl.Dl2OwlJavaBLexer.reportError(Dl2OwlJavaBLexer.java
> :69)
> >     at org.antlr.runtime.Lexer.nextToken(Lexer.java:94)
> >     at
> >
> org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:1
> 19)
> >     at
> org.antlr.runtime.CommonTokenStream.LT<http://org.antlr.runtime.commont
> okenstream.lt/>
> > (CommonTokenStream.java:238)
> >     at
> >
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:110
> )
> >     at
> >
> eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:1
> 40)
> >     at
> >
> eu.servicemix.dl2owl.CommonTreeHelper.testLexerError(CommonTreeHelper.j
> ava:121)
> >     at
> > eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:113)
> >
> > TESTING PARSER with : {CORRADO PIPPO feee} *dhert*
> > PARSER : this.getCurrentInputSymbol(input).toString() :
> > [@8,21:25='dhert',<7>,1:21]
> > PARSER : this.failed() : false
> > PARSER : this.getNumberOfSyntaxErrors() : 0
> > eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
> > eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
> >     at
> >
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.recoverFromMismatchedToken(Dl2Ow
> lJavaBParser.java:97)
> >     at
> org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:115)
> >     at
> >
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:232
> )
> >     at
> >
> eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:1
> 40)
> >     at
> >
> eu.servicemix.dl2owl.CommonTreeHelper.testParserError(CommonTreeHelper.
> java:126)
> >     at
> > eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:114)
> >
> >
> > Any comment really appreciated!!
> >
> > Corrado
> >
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Fri Apr  2 08:40:24 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 02 Apr 2010 08:40:24 -0700
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DEF1@martini.ironwillgames.com>
Message-ID: <f5d30d11a5292d4ab613a1660b735647@temporal-wave.com>

OK -= I'll let you update your stuff and see if it saves me any time making it work for C and 2010.

Jim

> -----Original Message-----
> From: Sam Harwell [mailto:sharwell at pixelminegames.com]
> Sent: Friday, April 02, 2010 8:33 AM
> To: Jim Idle; ANTLR Interest
> Subject: RE: [antlr-interest] Visual Studio plugin for ANTLR grammar
> files
> 
> It didn't need any changes to work with C# projects with 2010. I'm
> using
> it for my experimental language support in 2010. C code poses an
> interesting problem of include directories. Perhaps you can output them
> to:
> 
> $(IntermediateOutputDir)\Antlr\[GrammarName]\[GrammarName.h]
> 
> And then have it add obj\Debug\Antlr to the #include search
> directories.
> 
> The AntlrBuildTasks.dll MSBuild tasks assembly will be the same for the
> CSharp3 and C targets. However, a new Antlr3.C.targets file or similar
> will probably be much easier to maintain than a shared one for multiple
> languages.
> 
> I'll try to put up a new build within the next couple days so people
> can
> try this with more projects.
> 
> Sam
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Friday, April 02, 2010 10:16 AM
> To: ANTLR Interest
> Subject: Re: [antlr-interest] Visual Studio plugin for ANTLR grammar
> files
> 
> Did you updates this for VS2010 yet Sam? The C build system seems to
> use
> MSBUILD in vs2010 to, so I would suggest that we take your code out of
> the C# specific tree and my vs2008 C build rule files out of the C tree
> and create a buildsystems tree or something similar.  I (or you if you
> prefer to own it) can then adapt your current integration to select
> between C or C# on vs201, as my feeling is that the will be very
> similar
> (other htan I have a header file to deal with as well).
> 
> Jim
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Sam Harwell
> > Sent: Thursday, April 01, 2010 10:34 PM
> > To: Shawn Poulson; ANTLR Interest
> > Subject: Re: [antlr-interest] Visual Studio plugin for ANTLR grammar
> > files
> >
> > Hi Shawn,
> >
> > I went the route of tying it into MSBuild. The generated file is
> placed
> > in the intermediate output directory (often obj\Debug or
> obj\Release).
> > This system properly handles dependent grammars (eg. tree grammars
> are
> > automatically recompiled when the lexer defining the tokens is
> > recompiled). The latest source is in source control as the
> > AntlrBuildTask project that's part of the C# 3 port. I still need to
> > post an updated set of binaries for it since I fixed several bugs.
> >
> > Sam
> >
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org
> > [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Shawn Poulson
> > Sent: Thursday, April 01, 2010 6:36 PM
> > To: ANTLR Interest
> > Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar
> files
> >
> > Hello all,
> >
> >
> >
> > I've been working on and off with ANTLR over the past couple years
> and
> > one
> > thing that always got me, not being a Java developer, was trying to
> > remember
> > how to call ANTLR to compile my grammars to C#.  Moreover, I really
> > wanted
> > it to be part of Visual Studio so that it generated code from the
> > grammar on
> > change, like a Makefile.  I searched around and couldn't find any
> such
> > tool
> > that already existed.
> >
> >
> >
> > Visual Studio has an API that allows you to create your own code
> > generators,
> > so I took a shot at it.  I have a working proof of concept that works
> > as
> > you
> > would expect.  The generated code files are seen as child nodes
> hanging
> > off
> > the grammar file.  I was curious if anyone were willing to give it a
> > shot
> > and let me know how it works for them.  I'd like to package it up
> into
> > an
> > installer and put the source up on something like github or ohloh.
> Any
> > input would be greatly appreciated.
> >
> >
> >
> > ---
> >
> > Shawn Poulson
> >
> > spoulson at explodingcoder.com
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address




From corrado.campisano at gmail.com  Fri Apr  2 08:47:44 2010
From: corrado.campisano at gmail.com (Corrado Campisano)
Date: Fri, 2 Apr 2010 17:47:44 +0200
Subject: [antlr-interest] Stopping parser and lexer at first error
In-Reply-To: <a261531f3c9e224c9c03ca2e88699788@temporal-wave.com>
References: <s2l20814e5a1004020759g205a00b8l8395c0c2aefdb5e0@mail.gmail.com>
	<a261531f3c9e224c9c03ca2e88699788@temporal-wave.com>
Message-ID: <s2h20814e5a1004020847sae97ee9ax990d169ad350af5@mail.gmail.com>

Hi,

I think this could apply to lexel-level errors due to unexpected chars, but
not to unexpected char-sequences.

I mean (it's not the case of my grammar, but could happen), what if I want
to distinguish tokens like those:
 - MyClass
 - MYCONSTANT
 - myVariable
and consider the following ones as errors:
 - MyCLass
 - MYCONstant
 - myVAriable

??

Is the "you should" from some best-practice?

I believe the lexer should rise exceptions due to errors in the 'lexical
analisys' and the parser for the 'syntactic analisys', am I wrong?


[image: http://wiki.codeblocks.org/images/a/a9/Parser_Flow.gif]


Regards,
Corrado


2010/4/2 Jim Idle <jimi at temporal-wave.com>

> You should program your lexer such that it does not throw any errors.
> Program for the common mistakes (such as un-terminated "string) and have a
> catch all rule for unknown characters.
>
> Jim
>
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Corrado Campisano
> > Sent: Friday, April 02, 2010 7:59 AM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Stopping parser and lexer at first error
> >
> > Hi all,
> >
> > I setup an ANTLR-maven archetype with a grammar providing the override
> > for
> > the 'always resume' behaviour.
> >
> > You can find details on my
> > website<http://www.servicemix.eu/index.php?option=com_content&view=arti
> > cle&id=14>,
> > maybe it's worth checking it and adding a notice on this archetype to
> > this
> > ANTLR wiki
> > page<http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+w
> > ith+Maven>and/or
> > to the ANTLR
> > v3 Maven plugin page <http://www.antlr.org/antlr3-maven-
> > plugin/index.html>.
> >
> >
> > Regards,
> > Corrado.
> >
> >
> > 2010/3/10 Corrado Campisano <corrado.campisano at gmail.com>
> >
> > > Hi all,
> > >
> > > I needed to catch any syntax error (letting the lexer insert/delete
> > chars
> > > or the parser keeping parsing with the sys.err message only could be
> > very
> > > dangerous to my application), so I took a look on the reference
> > (which
> > > reports information not valid anymore) and on the internet and I
> > found
> > > several hints and articles:
> > >
> > > Why the generated parser code tolerates illegal
> > expression?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=4554
> > 943>
> > > How can I make the lexer exit upon first lexical
> > error?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=5341217>
> > > http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
> > > [antlr-interest] I want to throw an exception and stop parse, please!
> > > <http://www.antlr.org/pipermail/antlr-interest/2009-May/034605.html>
> > >
> > > It looks to me I found a way to do this, maybe it's worth to publish
> > that
> > > on the wiki, once validated.
> > >
> > >
> > > I just added the following overrides to my grammar (attached):
> > >
> > > @parser::members
> > > {
> > >     public class ParserException extends RuntimeException {
> > >             Object objCurrentInputSymbol = null;
> > >
> > >             public ParserException(Object oCurrentInputSymbol) {
> > >                 this.objCurrentInputSymbol = oCurrentInputSymbol;
> > >             }
> > >         }
> > >
> > >         protected Object recoverFromMismatchedToken(IntStream input,
> > int
> > > ttype, BitSet follow) throws RecognitionException {
> > >             System.out.println("PARSER :
> > > this.getCurrentInputSymbol(input).toString() : " +
> > > this.getCurrentInputSymbol(input).toString());
> > >             System.out.println("PARSER : this.failed() : " +
> > > this.failed());
> > >             System.out.println("PARSER :
> > this.getNumberOfSyntaxErrors() : "
> > > + this.getNumberOfSyntaxErrors());
> > >             throw new
> > ParserException(this.getCurrentInputSymbol(input));
> > >         }
> > > }
> > >
> > > @lexer::members
> > > {
> > >     public class LexerException extends RuntimeException {
> > >             RecognitionException recognitionException = null;
> > >             String strErrorHeader = null;
> > >             String strErrorMessage = null;
> > >
> > >             public LexerException(RecognitionException recExc, String
> > > sHead, String sMsg) {
> > >                 this.recognitionException = recExc;
> > >                 this.strErrorHeader = sHead;
> > >                 this.strErrorMessage = sMsg;
> > >
> > >                 System.out.println("LEXER : ErrorHeader : " + sHead);
> > >                 System.out.println("LEXER : ErrorMessage : " + sMsg);
> > >                 System.out.println("LEXER : RecognitionException : "
> > +
> > > this.recognitionException.toString());
> > >             }
> > >         }
> > >
> > >
> > >         public void reportError(RecognitionException recExc) {
> > >         throw new LexerException(recExc, this.getErrorHeader(recExc),
> > > getErrorMessage(recExc, this.getTokenNames()));
> > >     }
> > > }
> > >
> > >
> > > Then I tested it with a simple class:
> > >     public static void main(String[] args) {
> > >         testLexerError();
> > >         testParserError();
> > >     }
> > >     private static void testLexerError() {
> > >         String strDlToParse = "{CORRADO PIPPO ;feee}";
> > >         System.out.println("TESTING LEXER with : " + strDlToParse);
> > >         testError(strDlToParse);
> > >     }
> > >     private static void testParserError() {
> > >         String strDlToParse = "{CORRADO PIPPO feee} dhert";
> > >         System.out.println("TESTING PARSER with : " + strDlToParse);
> > >         testError(strDlToParse);
> > >     }
> > >     private static void testError(String strDlToParse) {
> > >         CommonTree tree=null;
> > >         String strError = null;
> > >
> > >         ANTLRStringStream input = new
> > > org.antlr.runtime.ANTLRStringStream(strDlToParse);
> > >         Dl2OwlJavaBLexer lexer = new Dl2OwlJavaBLexer(input);
> > >         TokenStream tokens = new
> > > org.antlr.runtime.CommonTokenStream(lexer);
> > >         Dl2OwlJavaBParser parser = new Dl2OwlJavaBParser(tokens);
> > >
> > >         try {
> > >             // this may rise an exception
> > >             // TODO : check why NO EXCEPTION is risen with error
> > "line 1:9
> > > no viable alternative at character ';'" on inputs like "{CORRADO ;}"
> > >             eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom_return ret =
> > > parser.axiom();
> > >
> > >             // TODO : check if this will be executed if no exception
> > rises
> > >             tree = (CommonTree) ret.getTree();
> > >
> > >             printTreeHelper(tree);
> > >
> > >         } catch (RecognitionException e) {
> > >
> > >             System.out.println(e.toString());
> > >             e.printStackTrace();
> > >
> > >         } catch (RuntimeException e) {
> > >
> > >             System.out.println(e.toString());
> > >             e.printStackTrace();
> > >         }
> > >     }
> > >
> > >
> > > The output looks ok, I wonder whether the whole 'trick' is too...
> > >
> > > TESTING LEXER with : {CORRADO PIPPO *;*feee}
> > > LEXER : ErrorHeader : line 1:15
> > > LEXER : ErrorMessage : no viable alternative at character ';'
> > > LEXER : RecognitionException : NoViableAltException(';'@[1:1: Tokens
> > : (
> > > T__37 | T__38 | T__39 | T__40 | HAS_VALUE | ALL_VALUES | SOME_VALUES
> > | DOT |
> > > HAS_CARD | MIN_CARD | MAX_CARD | NOT | AND | OR | URI_REF | INT_VALUE
> > | WS |
> > > CTRL_CHAR );])
> > > eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
> > > eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
> > >     at
> > >
> > eu.servicemix.dl2owl.Dl2OwlJavaBLexer.reportError(Dl2OwlJavaBLexer.java
> > :69)
> > >     at org.antlr.runtime.Lexer.nextToken(Lexer.java:94)
> > >     at
> > >
> > org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:1
> > 19)
> > >     at
> > org.antlr.runtime.CommonTokenStream.LT<http://org.antlr.runtime.commont
> > okenstream.lt/>
> > > (CommonTokenStream.java:238)
> > >     at
> > >
> > eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:110
> > )
> > >     at
> > >
> > eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:1
> > 40)
> > >     at
> > >
> > eu.servicemix.dl2owl.CommonTreeHelper.testLexerError(CommonTreeHelper.j
> > ava:121)
> > >     at
> > > eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:113)
> > >
> > > TESTING PARSER with : {CORRADO PIPPO feee} *dhert*
> > > PARSER : this.getCurrentInputSymbol(input).toString() :
> > > [@8,21:25='dhert',<7>,1:21]
> > > PARSER : this.failed() : false
> > > PARSER : this.getNumberOfSyntaxErrors() : 0
> > > eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
> > > eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
> > >     at
> > >
> > eu.servicemix.dl2owl.Dl2OwlJavaBParser.recoverFromMismatchedToken(Dl2Ow
> > lJavaBParser.java:97)
> > >     at
> > org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:115)
> > >     at
> > >
> > eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:232
> > )
> > >     at
> > >
> > eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:1
> > 40)
> > >     at
> > >
> > eu.servicemix.dl2owl.CommonTreeHelper.testParserError(CommonTreeHelper.
> > java:126)
> > >     at
> > > eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:114)
> > >
> > >
> > > Any comment really appreciated!!
> > >
> > > Corrado
> > >
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jimi at temporal-wave.com  Fri Apr  2 09:40:35 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 02 Apr 2010 09:40:35 -0700
Subject: [antlr-interest] Stopping parser and lexer at first error
In-Reply-To: <s2h20814e5a1004020847sae97ee9ax990d169ad350af5@mail.gmail.com>
Message-ID: <701ce3f71525c7469a2027380fb2fa93@temporal-wave.com>

'Wrong' might be too strong.

However, you should not raise errors for that sort of thing in the lexer 'in general'. 

Obviously the lexer should raise an error when it sees there is something not correct, such as a character that cannot be allowed. However, it raises a controlled error that you program and record, then does not pass the character on. You can then parse and see if there are more errors you can give out, then, if possible check semantics. Basically try to give out as much error information in once pass as possible (however you also need to know the types of errors that will create many other spurious errors and stop processing when you see them.)

Your example below does not make sense to me because if:

MyClass is a correct keyword
But MyCLASS is not

Then the lexer rule will not recognize myCLASS as a keyword. If there is an ID rule then it will see it as that. If MyCLASS can mean nothing at all, then there should be a rule that matches it in the lexer, but issues a controlled error and deletes it. Your compiler will not go any farther than it can/should because you will record the error, but you won't just stop at the first thing that goes wrong lexically. There is nothing worse than a compiler that says "invalid character line 1, offset 34" and stops, so you fix that character, run it again and it says "invalid character line 1, offset 36".

So, I am advising you that if you program your lexer rules anticipating anything that can go wrong, then you won't throw any ANTLR exceptions that don't tell you anything about the error. You should still catch these and raise 'Internal compiler error' (because your lexer is incorrect) of course, but not rely on this as the way to catch bad input.

So:

STRING : '"' ~('"'|'\n'|'\r')*
          (
               '"'  // Hunky dory
             |  { raise(UNTERMINATED_STRING); } // Missing delimiter
          )
        ;

....

ID : ('a'..'z'|morestuff)+ { checkId($text); } ;


ANY : . { raise(ILLEGAL_CHARACTER); }


All of the above will result in a set of tokens that you can still parse, and hopefully check semantically, but you won't generate code and so on because you recorded the fact that there were errors.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Corrado Campisano
> Sent: Friday, April 02, 2010 8:48 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Stopping parser and lexer at first error
> 
> Hi,
> 
> I think this could apply to lexel-level errors due to unexpected chars,
> but
> not to unexpected char-sequences.
> 
> I mean (it's not the case of my grammar, but could happen), what if I
> want
> to distinguish tokens like those:
>  - MyClass
>  - MYCONSTANT
>  - myVariable
> and consider the following ones as errors:
>  - MyCLass
>  - MYCONstant
>  - myVAriable
> 
> ??
> 
> Is the "you should" from some best-practice?
> 
> I believe the lexer should rise exceptions due to errors in the
> 'lexical
> analisys' and the parser for the 'syntactic analisys', am I wrong?
> 
> 
> [image: http://wiki.codeblocks.org/images/a/a9/Parser_Flow.gif]
> 
> 
> Regards,
> Corrado
> 
> 
> 2010/4/2 Jim Idle <jimi at temporal-wave.com>
> 
> > You should program your lexer such that it does not throw any errors.
> > Program for the common mistakes (such as un-terminated "string) and
> have a
> > catch all rule for unknown characters.
> >
> > Jim
> >
> >
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of Corrado Campisano
> > > Sent: Friday, April 02, 2010 7:59 AM
> > > To: antlr-interest at antlr.org
> > > Subject: Re: [antlr-interest] Stopping parser and lexer at first
> error
> > >
> > > Hi all,
> > >
> > > I setup an ANTLR-maven archetype with a grammar providing the
> override
> > > for
> > > the 'always resume' behaviour.
> > >
> > > You can find details on my
> > >
> website<http://www.servicemix.eu/index.php?option=com_content&view=arti
> > > cle&id=14>,
> > > maybe it's worth checking it and adding a notice on this archetype
> to
> > > this
> > > ANTLR wiki
> > >
> page<http://www.antlr.org/wiki/display/ANTLR3/Building+ANTLR+Projects+w
> > > ith+Maven>and/or
> > > to the ANTLR
> > > v3 Maven plugin page <http://www.antlr.org/antlr3-maven-
> > > plugin/index.html>.
> > >
> > >
> > > Regards,
> > > Corrado.
> > >
> > >
> > > 2010/3/10 Corrado Campisano <corrado.campisano at gmail.com>
> > >
> > > > Hi all,
> > > >
> > > > I needed to catch any syntax error (letting the lexer
> insert/delete
> > > chars
> > > > or the parser keeping parsing with the sys.err message only could
> be
> > > very
> > > > dangerous to my application), so I took a look on the reference
> > > (which
> > > > reports information not valid anymore) and on the internet and I
> > > found
> > > > several hints and articles:
> > > >
> > > > Why the generated parser code tolerates illegal
> > >
> expression?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=4554
> > > 943>
> > > > How can I make the lexer exit upon first lexical
> > >
> error?<http://www.antlr.org/wiki/pages/viewpage.action?pageId=5341217>
> > > >
> http://www.antlr.org/wiki/display/ANTLR3/Custom+Syntax+Error+Recovery
> > > > [antlr-interest] I want to throw an exception and stop parse,
> please!
> > > > <http://www.antlr.org/pipermail/antlr-interest/2009-
> May/034605.html>
> > > >
> > > > It looks to me I found a way to do this, maybe it's worth to
> publish
> > > that
> > > > on the wiki, once validated.
> > > >
> > > >
> > > > I just added the following overrides to my grammar (attached):
> > > >
> > > > @parser::members
> > > > {
> > > >     public class ParserException extends RuntimeException {
> > > >             Object objCurrentInputSymbol = null;
> > > >
> > > >             public ParserException(Object oCurrentInputSymbol) {
> > > >                 this.objCurrentInputSymbol = oCurrentInputSymbol;
> > > >             }
> > > >         }
> > > >
> > > >         protected Object recoverFromMismatchedToken(IntStream
> input,
> > > int
> > > > ttype, BitSet follow) throws RecognitionException {
> > > >             System.out.println("PARSER :
> > > > this.getCurrentInputSymbol(input).toString() : " +
> > > > this.getCurrentInputSymbol(input).toString());
> > > >             System.out.println("PARSER : this.failed() : " +
> > > > this.failed());
> > > >             System.out.println("PARSER :
> > > this.getNumberOfSyntaxErrors() : "
> > > > + this.getNumberOfSyntaxErrors());
> > > >             throw new
> > > ParserException(this.getCurrentInputSymbol(input));
> > > >         }
> > > > }
> > > >
> > > > @lexer::members
> > > > {
> > > >     public class LexerException extends RuntimeException {
> > > >             RecognitionException recognitionException = null;
> > > >             String strErrorHeader = null;
> > > >             String strErrorMessage = null;
> > > >
> > > >             public LexerException(RecognitionException recExc,
> String
> > > > sHead, String sMsg) {
> > > >                 this.recognitionException = recExc;
> > > >                 this.strErrorHeader = sHead;
> > > >                 this.strErrorMessage = sMsg;
> > > >
> > > >                 System.out.println("LEXER : ErrorHeader : " +
> sHead);
> > > >                 System.out.println("LEXER : ErrorMessage : " +
> sMsg);
> > > >                 System.out.println("LEXER : RecognitionException
> : "
> > > +
> > > > this.recognitionException.toString());
> > > >             }
> > > >         }
> > > >
> > > >
> > > >         public void reportError(RecognitionException recExc) {
> > > >         throw new LexerException(recExc,
> this.getErrorHeader(recExc),
> > > > getErrorMessage(recExc, this.getTokenNames()));
> > > >     }
> > > > }
> > > >
> > > >
> > > > Then I tested it with a simple class:
> > > >     public static void main(String[] args) {
> > > >         testLexerError();
> > > >         testParserError();
> > > >     }
> > > >     private static void testLexerError() {
> > > >         String strDlToParse = "{CORRADO PIPPO ;feee}";
> > > >         System.out.println("TESTING LEXER with : " +
> strDlToParse);
> > > >         testError(strDlToParse);
> > > >     }
> > > >     private static void testParserError() {
> > > >         String strDlToParse = "{CORRADO PIPPO feee} dhert";
> > > >         System.out.println("TESTING PARSER with : " +
> strDlToParse);
> > > >         testError(strDlToParse);
> > > >     }
> > > >     private static void testError(String strDlToParse) {
> > > >         CommonTree tree=null;
> > > >         String strError = null;
> > > >
> > > >         ANTLRStringStream input = new
> > > > org.antlr.runtime.ANTLRStringStream(strDlToParse);
> > > >         Dl2OwlJavaBLexer lexer = new Dl2OwlJavaBLexer(input);
> > > >         TokenStream tokens = new
> > > > org.antlr.runtime.CommonTokenStream(lexer);
> > > >         Dl2OwlJavaBParser parser = new Dl2OwlJavaBParser(tokens);
> > > >
> > > >         try {
> > > >             // this may rise an exception
> > > >             // TODO : check why NO EXCEPTION is risen with error
> > > "line 1:9
> > > > no viable alternative at character ';'" on inputs like "{CORRADO
> ;}"
> > > >             eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom_return
> ret =
> > > > parser.axiom();
> > > >
> > > >             // TODO : check if this will be executed if no
> exception
> > > rises
> > > >             tree = (CommonTree) ret.getTree();
> > > >
> > > >             printTreeHelper(tree);
> > > >
> > > >         } catch (RecognitionException e) {
> > > >
> > > >             System.out.println(e.toString());
> > > >             e.printStackTrace();
> > > >
> > > >         } catch (RuntimeException e) {
> > > >
> > > >             System.out.println(e.toString());
> > > >             e.printStackTrace();
> > > >         }
> > > >     }
> > > >
> > > >
> > > > The output looks ok, I wonder whether the whole 'trick' is too...
> > > >
> > > > TESTING LEXER with : {CORRADO PIPPO *;*feee}
> > > > LEXER : ErrorHeader : line 1:15
> > > > LEXER : ErrorMessage : no viable alternative at character ';'
> > > > LEXER : RecognitionException : NoViableAltException(';'@[1:1:
> Tokens
> > > : (
> > > > T__37 | T__38 | T__39 | T__40 | HAS_VALUE | ALL_VALUES |
> SOME_VALUES
> > > | DOT |
> > > > HAS_CARD | MIN_CARD | MAX_CARD | NOT | AND | OR | URI_REF |
> INT_VALUE
> > > | WS |
> > > > CTRL_CHAR );])
> > > > eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
> > > > eu.servicemix.dl2owl.Dl2OwlJavaBLexer$LexerException
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.Dl2OwlJavaBLexer.reportError(Dl2OwlJavaBLexer.java
> > > :69)
> > > >     at org.antlr.runtime.Lexer.nextToken(Lexer.java:94)
> > > >     at
> > > >
> > >
> org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:1
> > > 19)
> > > >     at
> > >
> org.antlr.runtime.CommonTokenStream.LT<http://org.antlr.runtime.commont
> > > okenstream.lt/>
> > > > (CommonTokenStream.java:238)
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:110
> > > )
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:1
> > > 40)
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.CommonTreeHelper.testLexerError(CommonTreeHelper.j
> > > ava:121)
> > > >     at
> > > >
> eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:113)
> > > >
> > > > TESTING PARSER with : {CORRADO PIPPO feee} *dhert*
> > > > PARSER : this.getCurrentInputSymbol(input).toString() :
> > > > [@8,21:25='dhert',<7>,1:21]
> > > > PARSER : this.failed() : false
> > > > PARSER : this.getNumberOfSyntaxErrors() : 0
> > > > eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
> > > > eu.servicemix.dl2owl.Dl2OwlJavaBParser$ParserException
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.recoverFromMismatchedToken(Dl2Ow
> > > lJavaBParser.java:97)
> > > >     at
> > > org.antlr.runtime.BaseRecognizer.match(BaseRecognizer.java:115)
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.Dl2OwlJavaBParser.axiom(Dl2OwlJavaBParser.java:232
> > > )
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.CommonTreeHelper.testError(CommonTreeHelper.java:1
> > > 40)
> > > >     at
> > > >
> > >
> eu.servicemix.dl2owl.CommonTreeHelper.testParserError(CommonTreeHelper.
> > > java:126)
> > > >     at
> > > >
> eu.servicemix.dl2owl.CommonTreeHelper.main(CommonTreeHelper.java:114)
> > > >
> > > >
> > > > Any comment really appreciated!!
> > > >
> > > > Corrado
> > > >
> > > >
> > >
> > > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > > Unsubscribe: http://www.antlr.org/mailman/options/antlr-
> interest/your-
> > > email-address
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From cliff.s.hudson at gmail.com  Fri Apr  2 13:48:31 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 2 Apr 2010 13:48:31 -0700
Subject: [antlr-interest] Ambiguous lexing task
Message-ID: <v2p1c0448551004021348o71a6dc4frcf4269e9a17a5275@mail.gmail.com>

I have a string which I need to parse for IDs and operators.  This is
normally pretty easy, but there is one case where a character in the ID can
also match one character in the operator.  The tokens are:

OP_TRANSFORM : '->'

ID : (LETTER | '_') (options { greedy=true } : NAMECHAR)*

fragment NAMECHAR : LETTER | DIGIT | '_' | '-' ;

LETTER : 'a'..'z' | 'A'..'Z' ;
NUMBER: '0'..'9' ;


The issue is in parsing the following string:

my-identifier->foo

The ID token of course matches 'my-identifier-', and then I am left with an
extraneous '>'.  Is there a way to construct a set of lexing rules, possibly
with actions, that would correctly separate out the -> from the ID?  In this
case, I want the '-' in OP_TRANSFORM to be the preferred path and to match
'->' even in the above case.

Thanks.

From cliff.s.hudson at gmail.com  Fri Apr  2 13:59:16 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 2 Apr 2010 13:59:16 -0700
Subject: [antlr-interest] Ambiguous lexing task
In-Reply-To: <v2p1c0448551004021348o71a6dc4frcf4269e9a17a5275@mail.gmail.com>
References: <v2p1c0448551004021348o71a6dc4frcf4269e9a17a5275@mail.gmail.com>
Message-ID: <s2i1c0448551004021359i5ecf119aw7d9fd95b2b638adf@mail.gmail.com>

I've played around with it a bit, and I modified NAMECHAR to be:

fragment NAMECHAR
    : LETTER
    | DIGIT
    | '_'
    | {input.LA(2) != '>'}?=> '-'
    ;

This seems to do the trick.  However, I'm concerned this is not a best
practice for this kind of situation.  Could I get a suggestion as to the
"correct" way to go about this?

On Fri, Apr 2, 2010 at 1:48 PM, Cliff Hudson <cliff.s.hudson at gmail.com>wrote:

> I have a string which I need to parse for IDs and operators.  This is
> normally pretty easy, but there is one case where a character in the ID can
> also match one character in the operator.  The tokens are:
>
> OP_TRANSFORM : '->'
>
> ID : (LETTER | '_') (options { greedy=true } : NAMECHAR)*
>
> fragment NAMECHAR : LETTER | DIGIT | '_' | '-' ;
>
> LETTER : 'a'..'z' | 'A'..'Z' ;
> NUMBER: '0'..'9' ;
>
>
> The issue is in parsing the following string:
>
> my-identifier->foo
>
> The ID token of course matches 'my-identifier-', and then I am left with an
> extraneous '>'.  Is there a way to construct a set of lexing rules, possibly
> with actions, that would correctly separate out the -> from the ID?  In this
> case, I want the '-' in OP_TRANSFORM to be the preferred path and to match
> '->' even in the above case.
>
> Thanks.
>

From troy.daniels at baesystems.com  Fri Apr  2 14:56:01 2010
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Fri, 2 Apr 2010 17:56:01 -0400
Subject: [antlr-interest] Ambiguous lexing task
In-Reply-To: <s2i1c0448551004021359i5ecf119aw7d9fd95b2b638adf@mail.gmail.com>
Message-ID: <20100402220458.8AC0D341849E@www.antlr.org>

 

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cliff Hudson
> Sent: Friday, April 02, 2010 4:59 PM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Ambiguous lexing task
> 
> I've played around with it a bit, and I modified NAMECHAR to be:
> 
> fragment NAMECHAR
>     : LETTER
>     | DIGIT
>     | '_'
>     | {input.LA(2) != '>'}?=> '-'
>     ;
> 
> This seems to do the trick.  However, I'm concerned this is 
> not a best practice for this kind of situation.  Could I get 
> a suggestion as to the "correct" way to go about this?
> 

Is it every possible that that text should be interpreted as

my-identifier-  >  foo

(That is, my-identifier- "greater than" foo?) If it is, then the language is ambiguous to the lexer and you will have a lot of complications to deal with.  If this is not a valid interpretation, then that is a reasonable way to handle it.

Troy


> On Fri, Apr 2, 2010 at 1:48 PM, Cliff Hudson 
> <cliff.s.hudson at gmail.com>wrote:
> 
> > I have a string which I need to parse for IDs and 
> operators.  This is 
> > normally pretty easy, but there is one case where a 
> character in the 
> > ID can also match one character in the operator.  The tokens are:
> >
> > OP_TRANSFORM : '->'
> >
> > ID : (LETTER | '_') (options { greedy=true } : NAMECHAR)*
> >
> > fragment NAMECHAR : LETTER | DIGIT | '_' | '-' ;
> >
> > LETTER : 'a'..'z' | 'A'..'Z' ;
> > NUMBER: '0'..'9' ;
> >
> >
> > The issue is in parsing the following string:
> >
> > my-identifier->foo
> >
> > The ID token of course matches 'my-identifier-', and then I am left 
> > with an extraneous '>'.  Is there a way to construct a set 
> of lexing 
> > rules, possibly with actions, that would correctly separate 
> out the -> 
> > from the ID?  In this case, I want the '-' in OP_TRANSFORM 
> to be the 
> > preferred path and to match '->' even in the above case.
> >
> > Thanks.
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From cliff.s.hudson at gmail.com  Fri Apr  2 16:37:06 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 2 Apr 2010 16:37:06 -0700
Subject: [antlr-interest] Ambiguous lexing task
In-Reply-To: <4bb66a0a.6944f10a.1ae9.ffffb53bSMTPIN_ADDED@mx.google.com>
References: <s2i1c0448551004021359i5ecf119aw7d9fd95b2b638adf@mail.gmail.com>
	<4bb66a0a.6944f10a.1ae9.ffffb53bSMTPIN_ADDED@mx.google.com>
Message-ID: <t2y1c0448551004021637k6128c929h9468429d486d58f2@mail.gmail.com>

No, there is no operator '>', so there aren't any additional ambiguities
here.  Thanks.

On Fri, Apr 2, 2010 at 2:56 PM, Daniels, Troy (US SSA) <
troy.daniels at baesystems.com> wrote:

>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org
> > [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cliff Hudson
> > Sent: Friday, April 02, 2010 4:59 PM
> > To: antlr-interest at antlr.org
> > Subject: Re: [antlr-interest] Ambiguous lexing task
> >
> > I've played around with it a bit, and I modified NAMECHAR to be:
> >
> > fragment NAMECHAR
> >     : LETTER
> >     | DIGIT
> >     | '_'
> >     | {input.LA(2) != '>'}?=> '-'
> >     ;
> >
> > This seems to do the trick.  However, I'm concerned this is
> > not a best practice for this kind of situation.  Could I get
> > a suggestion as to the "correct" way to go about this?
> >
>
> Is it every possible that that text should be interpreted as
>
> my-identifier-  >  foo
>
> (That is, my-identifier- "greater than" foo?) If it is, then the language
> is ambiguous to the lexer and you will have a lot of complications to deal
> with.  If this is not a valid interpretation, then that is a reasonable way
> to handle it.
>
> Troy
>
>
> > On Fri, Apr 2, 2010 at 1:48 PM, Cliff Hudson
> > <cliff.s.hudson at gmail.com>wrote:
> >
> > > I have a string which I need to parse for IDs and
> > operators.  This is
> > > normally pretty easy, but there is one case where a
> > character in the
> > > ID can also match one character in the operator.  The tokens are:
> > >
> > > OP_TRANSFORM : '->'
> > >
> > > ID : (LETTER | '_') (options { greedy=true } : NAMECHAR)*
> > >
> > > fragment NAMECHAR : LETTER | DIGIT | '_' | '-' ;
> > >
> > > LETTER : 'a'..'z' | 'A'..'Z' ;
> > > NUMBER: '0'..'9' ;
> > >
> > >
> > > The issue is in parsing the following string:
> > >
> > > my-identifier->foo
> > >
> > > The ID token of course matches 'my-identifier-', and then I am left
> > > with an extraneous '>'.  Is there a way to construct a set
> > of lexing
> > > rules, possibly with actions, that would correctly separate
> > out the ->
> > > from the ID?  In this case, I want the '-' in OP_TRANSFORM
> > to be the
> > > preferred path and to match '->' even in the above case.
> > >
> > > Thanks.
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >

From spoulson at explodingcoder.com  Fri Apr  2 18:36:56 2010
From: spoulson at explodingcoder.com (Shawn Poulson)
Date: Fri, 02 Apr 2010 21:36:56 -0400
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files
In-Reply-To: <DD5A5D428FE040429CCDF377FAA892840152DEF0@martini.ironwillgames.com>
References: <00ab01cad1f4$0811a540$1834efc0$@com>
	<DD5A5D428FE040429CCDF377FAA892840152DEF0@martini.ironwillgames.com>
Message-ID: <000001cad2ce$284e0c60$78ea2520$@com>

Hi Sam,

Not a bad idea going with MSBuild.  That's certainly for suitable for an
official build strategy.  Sounds like both methods can be done together to
support development and build processes.

Thanks for pointing out the AntlrBuildTask.  I'll be taking a look at it.

-----Original Message-----
From: Sam Harwell [mailto:sharwell at pixelminegames.com] 
Sent: Friday, April 02, 2010 1:34 AM
To: Shawn Poulson; ANTLR Interest
Subject: RE: [antlr-interest] Visual Studio plugin for ANTLR grammar files

Hi Shawn,

I went the route of tying it into MSBuild. The generated file is placed
in the intermediate output directory (often obj\Debug or obj\Release).
This system properly handles dependent grammars (eg. tree grammars are
automatically recompiled when the lexer defining the tokens is
recompiled). The latest source is in source control as the
AntlrBuildTask project that's part of the C# 3 port. I still need to
post an updated set of binaries for it since I fixed several bugs.

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Shawn Poulson
Sent: Thursday, April 01, 2010 6:36 PM
To: ANTLR Interest
Subject: [antlr-interest] Visual Studio plugin for ANTLR grammar files

Hello all,

 

I've been working on and off with ANTLR over the past couple years and
one
thing that always got me, not being a Java developer, was trying to
remember
how to call ANTLR to compile my grammars to C#.  Moreover, I really
wanted
it to be part of Visual Studio so that it generated code from the
grammar on
change, like a Makefile.  I searched around and couldn't find any such
tool
that already existed.

 

Visual Studio has an API that allows you to create your own code
generators,
so I took a shot at it.  I have a working proof of concept that works as
you
would expect.  The generated code files are seen as child nodes hanging
off
the grammar file.  I was curious if anyone were willing to give it a
shot
and let me know how it works for them.  I'd like to package it up into
an
installer and put the source up on something like github or ohloh.  Any
input would be greatly appreciated.

 

---

Shawn Poulson

spoulson at explodingcoder.com

 


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From cliff.s.hudson at gmail.com  Fri Apr  2 20:29:27 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 2 Apr 2010 20:29:27 -0700
Subject: [antlr-interest] Creating extension libraries for a DSL
In-Reply-To: <n2v1332b72e1004020832m1523b853y7a509728a32e25b4@mail.gmail.com>
References: <n2v1332b72e1004020832m1523b853y7a509728a32e25b4@mail.gmail.com>
Message-ID: <h2y1c0448551004022029kf4b8d1c7x209630e2d52183b8@mail.gmail.com>

Have you looked at other languages and seen a pattern you like?  You could
then follow that pattern.  Typically adding extensions as keywords would be,
well, basically something no one does at this point.  Assuming you support
the concept of a function call, then having otherwise unresolved functions
go through a resolution system which, say, looks at a list of declared
imports and figures out if the function is in one of them is a
well-understood pattern.

On Fri, Apr 2, 2010 at 8:32 AM, Andreas Stefik <stefika at gmail.com> wrote:

> Hey folks,
>
> Our development team here is nearly complete with a DSL that we've
> designed and are hoping to ship the first open-source version in July
> or so. Right now, we parse down to the ANTLR Java target and are
> preparing for the version past this release, which I think needs to
> include some extension libraries for the language. For example, while
> our DSL can do all of the typical language things (e.g., if
> statements, looping), there are no APIs or libraries for doing file
> IO, connecting to hardware, network programming, or other such things.
>
> Does this community have any experience adding in these sorts of
> features, as in, suggestions as for what kind of approach we should
> take? For example, we could allow something like a Java Native
> Interface, that would allow a developer to connect in utilities that
> allow things like File access. Or, we could allow custom native
> functions for low level things, like a file keyword, but that doesn't
> sound very flexible or extensible.
>
> Any general suggestions on an appropriate approach to take?
>
> Stefik
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From BrianC at sannas.org  Fri Apr  2 21:37:39 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Fri, 2 Apr 2010 18:37:39 -1000
Subject: [antlr-interest] FW: C example error
In-Reply-To: <1daac78eed62b44784ee046b36c847da@temporal-wave.com>
References: <001501cad23a$b5540900$1ffc1b00$@sannas.org>
	<1daac78eed62b44784ee046b36c847da@temporal-wave.com>
Message-ID: <002401cad2e7$6e35d320$4aa17960$@sannas.org>

I'm sorry to aggravate you, I didn't know if anyone even saw the email, and
I didn't know about markmail.  Also, it is not just a warning, because the
program dies with an access violation from dereferencing a null pointer.

 -Brian

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Friday, April 02, 2010 05:20
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] FW: C example error

1) Because I am very busy;
2) Because it is a warning not an error and is not stopping you doing
anything;
3) Because it isn't specific to the C target as 10 seconds of investigation
would have shown you;
4) Because you can use antlr.markmail.org and find the question answered a
number of times;
5) Because you aren't paying me;
6) If you posted it 3 times and I did not answer, perhaps this tells you
something about the question;

Does that answer your question?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Brian Catlin
> Sent: Friday, April 02, 2010 1:02 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] FW: C example error
> 
> Is there any particular reason why the maintainers of the C port 
> aren't interested in this question?  This is the third time in the 
> last 4 weeks I've posted this, and I haven't received a single 
> response
> 
> 
> 
> -Brian
> 
> 
> 
> From: Brian Catlin [mailto:BrianC at sannas.org]
> Sent: Monday, March 29, 2010 21:24
> To: antlr-interest at antlr.org
> Subject: C example error
> 
> 
> 
> I tried to build the PolyDiff example from Examples-v3, using
> ANTLR-3.1-2009-06-28 and libantlr3c-3.2 in Visual Studio 2008.  The 
> output from the build:
> 
> 
> 
> 1>------ Rebuild All started: Project: polydiff, Configuration: Debug
> Win32
> ------
> 
> 1>Deleting intermediate and output files for project 'polydiff',
> configuration 'Debug|Win32'
> 
> 1>Translating to parser/lexer combination
> 
> 1>Translating to parser/lexer combination
> 
> 1>Translating to parser/lexer combination
> 
> 1>Translating to parser/lexer combination
> 
> 1>.\PolyDifferentiator.g(0,0) : warning 138 : grammar
> PolyDifferentiator: no
> start rule (no rule can obviously be followed by EOF)
> 
> 1>Compiling...
> 
> 1>Simplifier.c
> 
> 1>PolyPrinter.c
> 
> 1>PolyParser.c
> 
> 1>PolyLexer.c
> 
> 1>PolyDifferentiator.c
> 
> 1>main.c
> 
> 1>Generating Code...
> 
> 1>Compiling manifest to resources...
> 
> 1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385
> 
> 1>Copyright (C) Microsoft Corporation.  All rights reserved.
> 
> 1>Linking...
> 
> 1>LINK : C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exe not found or
> not
> built by the last incremental link; performing full link
> 
> 1>   Creating library C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.lib
> and
> object C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exp
> 
> 1>Embedding manifest...
> 
> 1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385
> 
> 1>Copyright (C) Microsoft Corporation.  All rights reserved.
> 
> 1>Build log was saved at
> "file://c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm
> <file:///c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm> "
> 
> 1>polydiff - 0 error(s), 1 warning(s)
> 
> ========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========
> 
> 
> 
> As you can see, there is a warning generating PolyDifferentiator.g
> 
> 
> 
> When I run the resulting program, I get an access violation in 
> addChild
> (antlr3basetree.c) at the ->, because child has not been initialized
> 
> 
> 
> void
> 
> addChild (pANTLR3_BASE_TREE tree, pANTLR3_BASE_TREE child)
> 
> {
> 
>       ANTLR3_UINT32   n;
> 
>       ANTLR3_UINT32   i;
> 
> 
> 
>       if    (child == NULL)
> 
>       {
> 
>             return;
> 
>       }
> 
> 
> 
> ->  if    (child->isNilNode(child) == ANTLR3_TRUE)
> 
>       {
> 
>             if  (child->children != NULL && child->children ==
> tree->children)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From stefika at gmail.com  Sat Apr  3 06:53:05 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Sat, 3 Apr 2010 07:53:05 -0600
Subject: [antlr-interest] Creating extension libraries for a DSL
In-Reply-To: <h2y1c0448551004022029kf4b8d1c7x209630e2d52183b8@mail.gmail.com>
References: <n2v1332b72e1004020832m1523b853y7a509728a32e25b4@mail.gmail.com>
	<h2y1c0448551004022029kf4b8d1c7x209630e2d52183b8@mail.gmail.com>
Message-ID: <r2m1332b72e1004030653yd6988d79lf9b6fcef73e10f7e@mail.gmail.com>

Cliff,

I'm not asking how to make abstractions or functions, or "how to look
at other languages and figure it out myself." No matter the
abstraction mechanisms you have in place (and we have a bunch of them
in our language), for you to complete certain kinds of operations you
need some kind of a low level bridge that can ultimately tell new, or
unique, pieces of hardware to physically do something. For example, if
a user wanted to add in a MIDI controller in our language, or a sound
library, or to tap into an ethernet controller, or some unique piece
of hardware we haven't considered, that simply would not exist unless
we had a low level bridge, which they could then tie into both the
hardware and our language, and then ultimately build abstractions
around in our language (e.g., a wrapper to a JNI library, as I stated
before).

There's lots of ways to approach it. LUA has an interesting approach.
Java uses JNI, while C allows you to embed assembly directly if
desired. I'm curious what more modern approaches folks take.

Stefik

On Fri, Apr 2, 2010 at 9:29 PM, Cliff Hudson <cliff.s.hudson at gmail.com> wrote:
> Have you looked at other languages and seen a pattern you like? ?You could
> then follow that pattern. ?Typically adding extensions as keywords would be,
> well, basically something no one does at this point. ?Assuming you support
> the concept of a function call, then having otherwise unresolved functions
> go through a resolution system which, say, looks at a list of declared
> imports and figures out if the function is in one of them is a
> well-understood pattern.
>
> On Fri, Apr 2, 2010 at 8:32 AM, Andreas Stefik <stefika at gmail.com> wrote:
>>
>> Hey folks,
>>
>> Our development team here is nearly complete with a DSL that we've
>> designed and are hoping to ship the first open-source version in July
>> or so. Right now, we parse down to the ANTLR Java target and are
>> preparing for the version past this release, which I think needs to
>> include some extension libraries for the language. For example, while
>> our DSL can do all of the typical language things (e.g., if
>> statements, looping), there are no APIs or libraries for doing file
>> IO, connecting to hardware, network programming, or other such things.
>>
>> Does this community have any experience adding in these sorts of
>> features, as in, suggestions as for what kind of approach we should
>> take? For example, we could allow something like a Java Native
>> Interface, that would allow a developer to connect in utilities that
>> allow things like File access. Or, we could allow custom native
>> functions for low level things, like a file keyword, but that doesn't
>> sound very flexible or extensible.
>>
>> Any general suggestions on an appropriate approach to take?
>>
>> Stefik
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From jimi at temporal-wave.com  Sat Apr  3 08:24:26 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sat, 3 Apr 2010 08:24:26 -0700
Subject: [antlr-interest] FW: C example error
In-Reply-To: <002401cad2e7$6e35d320$4aa17960$@sannas.org>
References: <001501cad23a$b5540900$1ffc1b00$@sannas.org>
	<1daac78eed62b44784ee046b36c847da@temporal-wave.com>
	<002401cad2e7$6e35d320$4aa17960$@sannas.org>
Message-ID: <8CB821AE-B176-45DF-A616-DF562234F059@temporal-wave.com>

I think you might need to update the header files to be honest. Your  
abort isnit because of the warning.

On Apr 2, 2010, at 21:37, "Brian Catlin" <BrianC at sannas.org> wrote:

> I'm sorry to aggravate you, I didn't know if anyone even saw the  
> email, and
> I didn't know about markmail.  Also, it is not just a warning,  
> because the
> program dies with an access violation from dereferencing a null  
> pointer.
>
> -Brian
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
> Sent: Friday, April 02, 2010 05:20
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] FW: C example error
>
> 1) Because I am very busy;
> 2) Because it is a warning not an error and is not stopping you doing
> anything;
> 3) Because it isn't specific to the C target as 10 seconds of  
> investigation
> would have shown you;
> 4) Because you can use antlr.markmail.org and find the question  
> answered a
> number of times;
> 5) Because you aren't paying me;
> 6) If you posted it 3 times and I did not answer, perhaps this tells  
> you
> something about the question;
>
> Does that answer your question?
>
> Jim
>
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Brian Catlin
>> Sent: Friday, April 02, 2010 1:02 AM
>> To: antlr-interest at antlr.org
>> Subject: [antlr-interest] FW: C example error
>>
>> Is there any particular reason why the maintainers of the C port
>> aren't interested in this question?  This is the third time in the
>> last 4 weeks I've posted this, and I haven't received a single
>> response
>>
>>
>>
>> -Brian
>>
>>
>>
>> From: Brian Catlin [mailto:BrianC at sannas.org]
>> Sent: Monday, March 29, 2010 21:24
>> To: antlr-interest at antlr.org
>> Subject: C example error
>>
>>
>>
>> I tried to build the PolyDiff example from Examples-v3, using
>> ANTLR-3.1-2009-06-28 and libantlr3c-3.2 in Visual Studio 2008.  The
>> output from the build:
>>
>>
>>
>> 1>------ Rebuild All started: Project: polydiff, Configuration: Debug
>> Win32
>> ------
>>
>> 1>Deleting intermediate and output files for project 'polydiff',
>> configuration 'Debug|Win32'
>>
>> 1>Translating to parser/lexer combination
>>
>> 1>Translating to parser/lexer combination
>>
>> 1>Translating to parser/lexer combination
>>
>> 1>Translating to parser/lexer combination
>>
>> 1>.\PolyDifferentiator.g(0,0) : warning 138 : grammar
>> PolyDifferentiator: no
>> start rule (no rule can obviously be followed by EOF)
>>
>> 1>Compiling...
>>
>> 1>Simplifier.c
>>
>> 1>PolyPrinter.c
>>
>> 1>PolyParser.c
>>
>> 1>PolyLexer.c
>>
>> 1>PolyDifferentiator.c
>>
>> 1>main.c
>>
>> 1>Generating Code...
>>
>> 1>Compiling manifest to resources...
>>
>> 1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385
>>
>> 1>Copyright (C) Microsoft Corporation.  All rights reserved.
>>
>> 1>Linking...
>>
>> 1>LINK : C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exe not found or
>> not
>> built by the last incremental link; performing full link
>>
>> 1>   Creating library C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.lib
>> and
>> object C:\MIMOS\ANTLR\examples-v3\C\Debug\polydiff.exp
>>
>> 1>Embedding manifest...
>>
>> 1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.7600.16385
>>
>> 1>Copyright (C) Microsoft Corporation.  All rights reserved.
>>
>> 1>Build log was saved at
>> "file://c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm
>> <file:///c:\MIMOS\ANTLR\examples-v3\C\polydiff\Debug\BuildLog.htm> "
>>
>> 1>polydiff - 0 error(s), 1 warning(s)
>>
>> ========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========
>>
>>
>>
>> As you can see, there is a warning generating PolyDifferentiator.g
>>
>>
>>
>> When I run the resulting program, I get an access violation in
>> addChild
>> (antlr3basetree.c) at the ->, because child has not been initialized
>>
>>
>>
>> void
>>
>> addChild (pANTLR3_BASE_TREE tree, pANTLR3_BASE_TREE child)
>>
>> {
>>
>>      ANTLR3_UINT32   n;
>>
>>      ANTLR3_UINT32   i;
>>
>>
>>
>>      if    (child == NULL)
>>
>>      {
>>
>>            return;
>>
>>      }
>>
>>
>>
>> ->  if    (child->isNilNode(child) == ANTLR3_TRUE)
>>
>>      {
>>
>>            if  (child->children != NULL && child->children ==
>> tree->children)
>>
>>
>>
>>
>>
>>
>>
>>
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/ 
>> your-
>> email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cliff.s.hudson at gmail.com  Sat Apr  3 08:57:05 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sat, 3 Apr 2010 08:57:05 -0700
Subject: [antlr-interest] Creating extension libraries for a DSL
In-Reply-To: <r2m1332b72e1004030653yd6988d79lf9b6fcef73e10f7e@mail.gmail.com>
References: <n2v1332b72e1004020832m1523b853y7a509728a32e25b4@mail.gmail.com>
	<h2y1c0448551004022029kf4b8d1c7x209630e2d52183b8@mail.gmail.com>
	<r2m1332b72e1004030653yd6988d79lf9b6fcef73e10f7e@mail.gmail.com>
Message-ID: <v2l1c0448551004030857w24185922jd7a84286001911e5@mail.gmail.com>

Well, it seems reasonable then to ask the question as to whether you
*should* provide any additional bridge beyond those mechanisms which already
exist.  What you are talking about is a driver layer in this case.  People
who write such things are almost universally going to do so in C, or such
libraries for these devices or similar ones are likely to exist (when we did
mobile phone development for instance, drivers for most pieces of hardware
were already available, and for those bits where there were none, we write
the drivers in C or C++ anyhow.)  In that case, just providing a way to call
into external executable code was the only thing the language needs to do,
as well as being able to marshal arguments back and forth between the
calling and called bits of code.

Given the simplicity of working with a C target language and its commonality
of usage, why not just go with that?  Everyone understands it.

On Sat, Apr 3, 2010 at 6:53 AM, Andreas Stefik <stefika at gmail.com> wrote:

> Cliff,
>
> I'm not asking how to make abstractions or functions, or "how to look
> at other languages and figure it out myself." No matter the
> abstraction mechanisms you have in place (and we have a bunch of them
> in our language), for you to complete certain kinds of operations you
> need some kind of a low level bridge that can ultimately tell new, or
> unique, pieces of hardware to physically do something. For example, if
> a user wanted to add in a MIDI controller in our language, or a sound
> library, or to tap into an ethernet controller, or some unique piece
> of hardware we haven't considered, that simply would not exist unless
> we had a low level bridge, which they could then tie into both the
> hardware and our language, and then ultimately build abstractions
> around in our language (e.g., a wrapper to a JNI library, as I stated
> before).
>
> There's lots of ways to approach it. LUA has an interesting approach.
> Java uses JNI, while C allows you to embed assembly directly if
> desired. I'm curious what more modern approaches folks take.
>
> Stefik
>
> On Fri, Apr 2, 2010 at 9:29 PM, Cliff Hudson <cliff.s.hudson at gmail.com>
> wrote:
> > Have you looked at other languages and seen a pattern you like?  You
> could
> > then follow that pattern.  Typically adding extensions as keywords would
> be,
> > well, basically something no one does at this point.  Assuming you
> support
> > the concept of a function call, then having otherwise unresolved
> functions
> > go through a resolution system which, say, looks at a list of declared
> > imports and figures out if the function is in one of them is a
> > well-understood pattern.
> >
> > On Fri, Apr 2, 2010 at 8:32 AM, Andreas Stefik <stefika at gmail.com>
> wrote:
> >>
> >> Hey folks,
> >>
> >> Our development team here is nearly complete with a DSL that we've
> >> designed and are hoping to ship the first open-source version in July
> >> or so. Right now, we parse down to the ANTLR Java target and are
> >> preparing for the version past this release, which I think needs to
> >> include some extension libraries for the language. For example, while
> >> our DSL can do all of the typical language things (e.g., if
> >> statements, looping), there are no APIs or libraries for doing file
> >> IO, connecting to hardware, network programming, or other such things.
> >>
> >> Does this community have any experience adding in these sorts of
> >> features, as in, suggestions as for what kind of approach we should
> >> take? For example, we could allow something like a Java Native
> >> Interface, that would allow a developer to connect in utilities that
> >> allow things like File access. Or, we could allow custom native
> >> functions for low level things, like a file keyword, but that doesn't
> >> sound very flexible or extensible.
> >>
> >> Any general suggestions on an appropriate approach to take?
> >>
> >> Stefik
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> >
>

From stefika at gmail.com  Sat Apr  3 10:39:08 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Sat, 3 Apr 2010 11:39:08 -0600
Subject: [antlr-interest] Creating extension libraries for a DSL
In-Reply-To: <v2l1c0448551004030857w24185922jd7a84286001911e5@mail.gmail.com>
References: <n2v1332b72e1004020832m1523b853y7a509728a32e25b4@mail.gmail.com>
	<h2y1c0448551004022029kf4b8d1c7x209630e2d52183b8@mail.gmail.com>
	<r2m1332b72e1004030653yd6988d79lf9b6fcef73e10f7e@mail.gmail.com>
	<v2l1c0448551004030857w24185922jd7a84286001911e5@mail.gmail.com>
Message-ID: <x2z1332b72e1004031039w7f6de0eeq770474e37ebc481e@mail.gmail.com>

It's possible we could do it that way, but I've avoided it. We're
using the Java target for our DSL, so a direct C wrapper would
probably require that we tap everything through Java, then through
JNI. So if we supported a straight C wrapper, it might be a little
complicated making it work with our DSL in terms of the way we make
users create their custom libraries. I suppose we could allow a
wrapper into and out of Java directly, which would probably get us
most of the way there, as users can then do whatever they want in JNI
anyway, but this still seems pretty messy. Perhaps a CORBA-like
middle-ware architecture? I guess most languages don't really do that
for this sort of thing ...

Hmm,

Stefik





On Sat, Apr 3, 2010 at 9:57 AM, Cliff Hudson <cliff.s.hudson at gmail.com> wrote:
> Well, it seems reasonable then to ask the question as to whether you
> *should* provide any additional bridge beyond those mechanisms which already
> exist. ?What you are talking about is a driver layer in this case. ?People
> who write such things are almost universally going to do so in C, or such
> libraries for these devices or similar ones are likely to exist (when we did
> mobile phone development for instance, drivers for most pieces of hardware
> were already available, and for those bits where there were none, we write
> the drivers in C or C++ anyhow.) ?In that case, just providing a way to call
> into external executable code was the only thing the language needs to do,
> as well as being able to marshal arguments back and forth between the
> calling and called bits of code.
> Given the simplicity of working with a C target language and its commonality
> of usage, why not just go with that? ?Everyone understands it.
>
> On Sat, Apr 3, 2010 at 6:53 AM, Andreas Stefik <stefika at gmail.com> wrote:
>>
>> Cliff,
>>
>> I'm not asking how to make abstractions or functions, or "how to look
>> at other languages and figure it out myself." No matter the
>> abstraction mechanisms you have in place (and we have a bunch of them
>> in our language), for you to complete certain kinds of operations you
>> need some kind of a low level bridge that can ultimately tell new, or
>> unique, pieces of hardware to physically do something. For example, if
>> a user wanted to add in a MIDI controller in our language, or a sound
>> library, or to tap into an ethernet controller, or some unique piece
>> of hardware we haven't considered, that simply would not exist unless
>> we had a low level bridge, which they could then tie into both the
>> hardware and our language, and then ultimately build abstractions
>> around in our language (e.g., a wrapper to a JNI library, as I stated
>> before).
>>
>> There's lots of ways to approach it. LUA has an interesting approach.
>> Java uses JNI, while C allows you to embed assembly directly if
>> desired. I'm curious what more modern approaches folks take.
>>
>> Stefik
>>
>> On Fri, Apr 2, 2010 at 9:29 PM, Cliff Hudson <cliff.s.hudson at gmail.com>
>> wrote:
>> > Have you looked at other languages and seen a pattern you like? ?You
>> > could
>> > then follow that pattern. ?Typically adding extensions as keywords would
>> > be,
>> > well, basically something no one does at this point. ?Assuming you
>> > support
>> > the concept of a function call, then having otherwise unresolved
>> > functions
>> > go through a resolution system which, say, looks at a list of declared
>> > imports and figures out if the function is in one of them is a
>> > well-understood pattern.
>> >
>> > On Fri, Apr 2, 2010 at 8:32 AM, Andreas Stefik <stefika at gmail.com>
>> > wrote:
>> >>
>> >> Hey folks,
>> >>
>> >> Our development team here is nearly complete with a DSL that we've
>> >> designed and are hoping to ship the first open-source version in July
>> >> or so. Right now, we parse down to the ANTLR Java target and are
>> >> preparing for the version past this release, which I think needs to
>> >> include some extension libraries for the language. For example, while
>> >> our DSL can do all of the typical language things (e.g., if
>> >> statements, looping), there are no APIs or libraries for doing file
>> >> IO, connecting to hardware, network programming, or other such things.
>> >>
>> >> Does this community have any experience adding in these sorts of
>> >> features, as in, suggestions as for what kind of approach we should
>> >> take? For example, we could allow something like a Java Native
>> >> Interface, that would allow a developer to connect in utilities that
>> >> allow things like File access. Or, we could allow custom native
>> >> functions for low level things, like a file keyword, but that doesn't
>> >> sound very flexible or extensible.
>> >>
>> >> Any general suggestions on an appropriate approach to take?
>> >>
>> >> Stefik
>> >>
>> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> >> Unsubscribe:
>> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>> >
>
>

From cliff.s.hudson at gmail.com  Sat Apr  3 13:35:46 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sat, 3 Apr 2010 13:35:46 -0700
Subject: [antlr-interest] Creating extension libraries for a DSL
In-Reply-To: <x2z1332b72e1004031039w7f6de0eeq770474e37ebc481e@mail.gmail.com>
References: <n2v1332b72e1004020832m1523b853y7a509728a32e25b4@mail.gmail.com>
	<h2y1c0448551004022029kf4b8d1c7x209630e2d52183b8@mail.gmail.com>
	<r2m1332b72e1004030653yd6988d79lf9b6fcef73e10f7e@mail.gmail.com>
	<v2l1c0448551004030857w24185922jd7a84286001911e5@mail.gmail.com>
	<x2z1332b72e1004031039w7f6de0eeq770474e37ebc481e@mail.gmail.com>
Message-ID: <n2x1c0448551004031335ua64d6322hc84c7bfe7779baf1@mail.gmail.com>

Ahh, well yes, if your runtime remains Java, then I can see why you'd be
reluctant to just go with a direct native code interface.  Is it necessary
or especially desirable to stick with the Java target?  Or is the JNI really
that cumbersome?  I'm more of a .Net person, and I guess we have a similar
issue, where we would have to either require the extension to use COM or do
LoadLibrary and PInvoke.

On Sat, Apr 3, 2010 at 10:39 AM, Andreas Stefik <stefika at gmail.com> wrote:

> It's possible we could do it that way, but I've avoided it. We're
> using the Java target for our DSL, so a direct C wrapper would
> probably require that we tap everything through Java, then through
> JNI. So if we supported a straight C wrapper, it might be a little
> complicated making it work with our DSL in terms of the way we make
> users create their custom libraries. I suppose we could allow a
> wrapper into and out of Java directly, which would probably get us
> most of the way there, as users can then do whatever they want in JNI
> anyway, but this still seems pretty messy. Perhaps a CORBA-like
> middle-ware architecture? I guess most languages don't really do that
> for this sort of thing ...
>
> Hmm,
>
> Stefik
>
>
>
>
>
> On Sat, Apr 3, 2010 at 9:57 AM, Cliff Hudson <cliff.s.hudson at gmail.com>
> wrote:
> > Well, it seems reasonable then to ask the question as to whether you
> > *should* provide any additional bridge beyond those mechanisms which
> already
> > exist.  What you are talking about is a driver layer in this case.
>  People
> > who write such things are almost universally going to do so in C, or such
> > libraries for these devices or similar ones are likely to exist (when we
> did
> > mobile phone development for instance, drivers for most pieces of
> hardware
> > were already available, and for those bits where there were none, we
> write
> > the drivers in C or C++ anyhow.)  In that case, just providing a way to
> call
> > into external executable code was the only thing the language needs to
> do,
> > as well as being able to marshal arguments back and forth between the
> > calling and called bits of code.
> > Given the simplicity of working with a C target language and its
> commonality
> > of usage, why not just go with that?  Everyone understands it.
> >
> > On Sat, Apr 3, 2010 at 6:53 AM, Andreas Stefik <stefika at gmail.com>
> wrote:
> >>
> >> Cliff,
> >>
> >> I'm not asking how to make abstractions or functions, or "how to look
> >> at other languages and figure it out myself." No matter the
> >> abstraction mechanisms you have in place (and we have a bunch of them
> >> in our language), for you to complete certain kinds of operations you
> >> need some kind of a low level bridge that can ultimately tell new, or
> >> unique, pieces of hardware to physically do something. For example, if
> >> a user wanted to add in a MIDI controller in our language, or a sound
> >> library, or to tap into an ethernet controller, or some unique piece
> >> of hardware we haven't considered, that simply would not exist unless
> >> we had a low level bridge, which they could then tie into both the
> >> hardware and our language, and then ultimately build abstractions
> >> around in our language (e.g., a wrapper to a JNI library, as I stated
> >> before).
> >>
> >> There's lots of ways to approach it. LUA has an interesting approach.
> >> Java uses JNI, while C allows you to embed assembly directly if
> >> desired. I'm curious what more modern approaches folks take.
> >>
> >> Stefik
> >>
> >> On Fri, Apr 2, 2010 at 9:29 PM, Cliff Hudson <cliff.s.hudson at gmail.com>
> >> wrote:
> >> > Have you looked at other languages and seen a pattern you like?  You
> >> > could
> >> > then follow that pattern.  Typically adding extensions as keywords
> would
> >> > be,
> >> > well, basically something no one does at this point.  Assuming you
> >> > support
> >> > the concept of a function call, then having otherwise unresolved
> >> > functions
> >> > go through a resolution system which, say, looks at a list of declared
> >> > imports and figures out if the function is in one of them is a
> >> > well-understood pattern.
> >> >
> >> > On Fri, Apr 2, 2010 at 8:32 AM, Andreas Stefik <stefika at gmail.com>
> >> > wrote:
> >> >>
> >> >> Hey folks,
> >> >>
> >> >> Our development team here is nearly complete with a DSL that we've
> >> >> designed and are hoping to ship the first open-source version in July
> >> >> or so. Right now, we parse down to the ANTLR Java target and are
> >> >> preparing for the version past this release, which I think needs to
> >> >> include some extension libraries for the language. For example, while
> >> >> our DSL can do all of the typical language things (e.g., if
> >> >> statements, looping), there are no APIs or libraries for doing file
> >> >> IO, connecting to hardware, network programming, or other such
> things.
> >> >>
> >> >> Does this community have any experience adding in these sorts of
> >> >> features, as in, suggestions as for what kind of approach we should
> >> >> take? For example, we could allow something like a Java Native
> >> >> Interface, that would allow a developer to connect in utilities that
> >> >> allow things like File access. Or, we could allow custom native
> >> >> functions for low level things, like a file keyword, but that doesn't
> >> >> sound very flexible or extensible.
> >> >>
> >> >> Any general suggestions on an appropriate approach to take?
> >> >>
> >> >> Stefik
> >> >>
> >> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> >> Unsubscribe:
> >> >>
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >> >
> >> >
> >
> >
>

From asoka250 at gmail.com  Sat Apr  3 14:38:15 2010
From: asoka250 at gmail.com (Ashok Varikuti)
Date: Sat, 3 Apr 2010 21:38:15 +0000 (UTC)
Subject: [antlr-interest] Updating my calendar
Message-ID: <827673973.86463791270330695332.JavaMail.batch@lpc04>

Hi

I am creating a birthday calendar of all my friends and family.  Can you please click on the link below to enter your birthday for me?

http://www.birthdayalarm.com/bd2/86670517a428203554b1507465184c475465907d1386

Thanks,
Ashok

From tyler.distad at gmail.com  Sat Apr  3 19:21:48 2010
From: tyler.distad at gmail.com (Tyler Distad)
Date: Sat, 3 Apr 2010 22:21:48 -0400
Subject: [antlr-interest] Moving from SableCC to ANTLR;
	What are tree grammars?
Message-ID: <g2y1bb620341004031921t83ffb699i6f9066ac80bbd08c@mail.gmail.com>

My Computer Science professor has taught his Compiler course with SableCC
for years. I am investigating moving the class to ANTLR.

Under SableCC, after creating a valid grammar, we used the Visitor pattern
to perform semantic checking and AT&T assembly generation. To do this, we
created a SemanticChecker class and a CodeGen class, both extending from the
SableCC DepthFirstAdapter class. This allowed for a beautiful separation of
the grammar definition and our processing code. We could also easily make
multiple passes over our AST.

I have hunted high and low for an ANTLR-specific method of doing anything
remotely similar. It has been intimated (
http://antlr.org/article/1100569809276/use.tree.grammars.tml) that tree
grammars should let me do what I want, but I must be misunderstanding
because my implementation is wholly inadequate.

Two questions:

 1) What is the point of a tree grammar? My work so far seems to indicate
that anything I can do in a "tree grammar" (such as actions, rewrites,
etc.), I can just as easily do in a "combined grammar."

 2) Assuming tree grammars are useful, then when working with them, do I
*really* have to copy/paste my rule definitions from my combined grammar?
The simplecTreeParser example in the examples-v3 file on the ANTLR website
certainly looks that way. I want to just be able to reference my tree
somewhere...not redefine the whole thing for every single pass.

Tyler Distad

For reference, below is a snippet of my non-tree-grammar. I do NOT want to
copy/paste this code into a new tree-grammar definition. I want to be able
to easily work with it from outside the AST.

    stmt: stmtAsmt
        | stmtIf
        | stmtWhile
        | expr SEMICOLON_CH -> ^(STMT expr)
    ;

    stmtAsmt
        : ID ASSIGN_OP expr SEMICOLON_CH
        -> ^(STMT ID expr)
        ;

    stmtIf
        : IF_KW L_PAR_CH expr R_PAR_CH L_BRACE_CH stmt* R_BRACE_CH (ELSE_KW
L_BRACE_CH stmt* R_BRACE_CH)?
        -> ^(STMT expr stmt* stmt*)
        ;

    stmtWhile
        : WHILE_KW L_PAR_CH expr R_PAR_CH L_BRACE_CH stmt* R_BRACE_CH
        -> ^(STMT expr stmt*)
        ;

From lgcraymer at yahoo.com  Sat Apr  3 19:58:17 2010
From: lgcraymer at yahoo.com (Loring Craymer)
Date: Sat, 3 Apr 2010 19:58:17 -0700 (PDT)
Subject: [antlr-interest] Moving from SableCC to ANTLR;
	What are tree grammars?
In-Reply-To: <g2y1bb620341004031921t83ffb699i6f9066ac80bbd08c@mail.gmail.com>
References: <g2y1bb620341004031921t83ffb699i6f9066ac80bbd08c@mail.gmail.com>
Message-ID: <704301.40645.qm@web55901.mail.re3.yahoo.com>

Tree grammars describe AST processors, and are more powerful than visitors since they recognize token sequences as productions.  See <http://www.antlr.org/article/1100569809276/use.tree.grammars.tml>.

--Loring



----- Original Message ----
> From: Tyler Distad <tyler.distad at gmail.com>
> To: antlr-interest at antlr.org
> Sent: Sat, April 3, 2010 7:21:48 PM
> Subject: [antlr-interest] Moving from SableCC to ANTLR; What are tree grammars?
> 
> My Computer Science professor has taught his Compiler course with SableCC
for 
> years. I am investigating moving the class to ANTLR.

Under SableCC, after 
> creating a valid grammar, we used the Visitor pattern
to perform semantic 
> checking and AT&T assembly generation. To do this, we
created a 
> SemanticChecker class and a CodeGen class, both extending from the
SableCC 
> DepthFirstAdapter class. This allowed for a beautiful separation of
the 
> grammar definition and our processing code. We could also easily 
> make
multiple passes over our AST.

I have hunted high and low for an 
> ANTLR-specific method of doing anything
remotely similar. It has been 
> intimated (

> href="http://antlr.org/article/1100569809276/use.tree.grammars.tml" 
> target=_blank >http://antlr.org/article/1100569809276/use.tree.grammars.tml) 
> that tree
grammars should let me do what I want, but I must be 
> misunderstanding
because my implementation is wholly inadequate.

Two 
> questions:

1) What is the point of a tree grammar? My work so far seems 
> to indicate
that anything I can do in a "tree grammar" (such as actions, 
> rewrites,
etc.), I can just as easily do in a "combined grammar."

2) 
> Assuming tree grammars are useful, then when working with them, do I
*really* 
> have to copy/paste my rule definitions from my combined grammar?
The 
> simplecTreeParser example in the examples-v3 file on the ANTLR 
> website
certainly looks that way. I want to just be able to reference my 
> tree
somewhere...not redefine the whole thing for every single 
> pass.

Tyler Distad

For reference, below is a snippet of my 
> non-tree-grammar. I do NOT want to
copy/paste this code into a new 
> tree-grammar definition. I want to be able
to easily work with it from 
> outside the AST.

    stmt: stmtAsmt
      
>   | stmtIf
        | stmtWhile
    
>     | expr SEMICOLON_CH -> ^(STMT expr)
    
> ;

    stmtAsmt
        : ID ASSIGN_OP 
> expr SEMICOLON_CH
        -> ^(STMT ID expr)
  
>       ;

    stmtIf
      
>   : IF_KW L_PAR_CH expr R_PAR_CH L_BRACE_CH stmt* R_BRACE_CH 
> (ELSE_KW
L_BRACE_CH stmt* R_BRACE_CH)?
        -> 
> ^(STMT expr stmt* stmt*)
        ;

    
> stmtWhile
        : WHILE_KW L_PAR_CH expr R_PAR_CH 
> L_BRACE_CH stmt* R_BRACE_CH
        -> ^(STMT expr 
> stmt*)
        ;

List: 
> href="http://www.antlr.org/mailman/listinfo/antlr-interest" target=_blank 
> >http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: 
> href="http://www.antlr.org/mailman/options/antlr-interest/your-email-address" 
> target=_blank 
> >http://www.antlr.org/mailman/options/antlr-interest/your-email-address


      


From stefika at gmail.com  Sat Apr  3 20:01:40 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Sat, 3 Apr 2010 21:01:40 -0600
Subject: [antlr-interest] Moving from SableCC to ANTLR;
	What are tree 	grammars?
In-Reply-To: <g2y1bb620341004031921t83ffb699i6f9066ac80bbd08c@mail.gmail.com>
References: <g2y1bb620341004031921t83ffb699i6f9066ac80bbd08c@mail.gmail.com>
Message-ID: <g2y1332b72e1004032001yd6fdf062w4c3977b54dfb6537@mail.gmail.com>

Hi Tyler,

On Sat, Apr 3, 2010 at 8:21 PM, Tyler Distad <tyler.distad at gmail.com> wrote:
> My Computer Science professor has taught his Compiler course with SableCC
> for years. I am investigating moving the class to ANTLR.
>

As a professor that teaches compilers myself on occasion, I would
highly recommend the change.

> Under SableCC, after creating a valid grammar, we used the Visitor pattern
> to perform semantic checking and AT&T assembly generation. To do this, we
> created a SemanticChecker class and a CodeGen class, both extending from the
> SableCC DepthFirstAdapter class. This allowed for a beautiful separation of
> the grammar definition and our processing code. We could also easily make
> multiple passes over our AST.

You can certainly do this sort of thing in ANTLR as well, although
using Visitor is generally unnecessary, as you have tree grammars,
which in my view, are far superior.

>
> I have hunted high and low for an ANTLR-specific method of doing anything
> remotely similar. It has been intimated (
> http://antlr.org/article/1100569809276/use.tree.grammars.tml) that tree
> grammars should let me do what I want, but I must be misunderstanding
> because my implementation is wholly inadequate.
>
> Two questions:
>
> ?1) What is the point of a tree grammar? My work so far seems to indicate
> that anything I can do in a "tree grammar" (such as actions, rewrites,
> etc.), I can just as easily do in a "combined grammar."

In non-technical terms, tree grammars iterate over your AST in a way
that is metaphorically similar to traversing over your AST's using
Visitor, except that you don't have to write, and more importantly
maintain, a visitor, and writing a tree grammar is massively easier
(in my opinion). In our case, we use a combined grammar as a first
pass and a modified tree grammar as a later pass. I've written
compilers using visitors exactly like you say, have contributed to
compilers without visitors (and without tree grammars), but the
largely automated approach to tree grammars is a real time saver.

Doing it this way also makes it really easy to carefully control which
actions you toss into your parser and your tree grammar, which is
important when writing multiple pass compilers. Doing this with
visitor is possible, of course, but in visitor classes, I always found
we needed to maintain a ton of state information about what is going
on. With tree grammars, you never have to do that, which simplifies
code significantly. And for the obvious things you do need to pass
around, you can use Scoping features of ANTLR, which is very helpful.

>
> ?2) Assuming tree grammars are useful, then when working with them, do I
> *really* have to copy/paste my rule definitions from my combined grammar?
> The simplecTreeParser example in the examples-v3 file on the ANTLR website
> certainly looks that way. I want to just be able to reference my tree
> somewhere...not redefine the whole thing for every single pass.

It's true that, on its face, it sounds like copy pasting rules into a
tree grammar is a bad idea --- but this is not quite correct. First,
you rarely copy paste in all the rules directly, as you usually want
to modify them to make your AST traversal simpler. The most typical
example of this is in expression rules, which are always a bit gross
in a parser, but are rewritten and clean in a tree grammar. We usually
also use tree rewrite rules in a number of places to ease parsing as
well.

But anyway, this only sounds like a bad idea until you try it. In
practice, copy pasting in rules into a new file, with all new,
carefully controllable (if you want), new semantic actions, is
extremely helpful.


In sum, here's a few advantages:

1. Visualization of DFAs and CFGs is extremely helpful, for students
(and myself sometimes, honestly, when I get stuck on a tricky rule)
2. Visualizations include the ability to analyze grammar conflicts ---
also very handy
3. LL star instead of LL k (like JavaCC --- Sable CC is LALR k if I
recall correctly)
4. Semantic and Syntactic predicates make writing very complex
grammars much easier than with traditional parsers
5. Tree grammars more or less get rid of the visitor pattern, which I
strongly prefer. I understand the visitor pattern very, very, well,
and have written compilers with it, but it drives me crazy sometimes.
6. Extremely excellent documentation, especially Terrence's books. I
haven't read the new one yet, but compared to most compiler books on
the market, Terrence's ANTLR book was a real breath of fresh air.

And here's some disadvantages:

1. Some of my students find writing certain rules in an LL grammar
more difficult than LALR, especially expressions.
2. Some of the ANTLR syntax/semantics is pretty non-intuitive for
students. I'm thinking specifically of rewrite rules like ^(NODE
OTHER_NODE), or a few other things. That isn't to say that things are
any easier in SableCC/JavaCC/Lex/Yacc, or any other language, as they
aren't, but still ...

Stefik


>
> Tyler Distad
>
> For reference, below is a snippet of my non-tree-grammar. I do NOT want to
> copy/paste this code into a new tree-grammar definition. I want to be able
> to easily work with it from outside the AST.
>
> ? ?stmt: stmtAsmt
> ? ? ? ?| stmtIf
> ? ? ? ?| stmtWhile
> ? ? ? ?| expr SEMICOLON_CH -> ^(STMT expr)
> ? ?;
>
> ? ?stmtAsmt
> ? ? ? ?: ID ASSIGN_OP expr SEMICOLON_CH
> ? ? ? ?-> ^(STMT ID expr)
> ? ? ? ?;
>
> ? ?stmtIf
> ? ? ? ?: IF_KW L_PAR_CH expr R_PAR_CH L_BRACE_CH stmt* R_BRACE_CH (ELSE_KW
> L_BRACE_CH stmt* R_BRACE_CH)?
> ? ? ? ?-> ^(STMT expr stmt* stmt*)
> ? ? ? ?;
>
> ? ?stmtWhile
> ? ? ? ?: WHILE_KW L_PAR_CH expr R_PAR_CH L_BRACE_CH stmt* R_BRACE_CH
> ? ? ? ?-> ^(STMT expr stmt*)
> ? ? ? ?;
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From tyler.distad at gmail.com  Sat Apr  3 20:27:23 2010
From: tyler.distad at gmail.com (Tyler Distad)
Date: Sat, 3 Apr 2010 23:27:23 -0400
Subject: [antlr-interest] Moving from SableCC to ANTLR;
	What are tree 	grammars?
In-Reply-To: <g2y1332b72e1004032001yd6fdf062w4c3977b54dfb6537@mail.gmail.com>
References: <g2y1bb620341004031921t83ffb699i6f9066ac80bbd08c@mail.gmail.com>
	<g2y1332b72e1004032001yd6fdf062w4c3977b54dfb6537@mail.gmail.com>
Message-ID: <h2r1bb620341004032027ib2c11612o2aeb469b8808193d@mail.gmail.com>

Sir,

On Sat, Apr 3, 2010 at 11:01 PM, Andreas Stefik <stefika at gmail.com> wrote:

> On Sat, Apr 3, 2010 at 8:21 PM, Tyler Distad <tyler.distad at gmail.com>
> wrote:
> > My Computer Science professor has taught his Compiler course with SableCC
> > for years. I am investigating moving the class to ANTLR.
> >
>
> As a professor that teaches compilers myself on occasion, I would
> highly recommend the change.
>

Thanks for your thorough response. I'm encouraged by your enthusiasm and
familiarity with ANTLR. I'm sure that as I continue to dig more deeply into
this project, I'll come up with more burning questions. For now, however,
I've been satisfied, and reassured that I'm really not going crazy.

Thanks again.

Tyler Distad

In sum, here's a few advantages:
>
> 1. Visualization of DFAs and CFGs is extremely helpful, for students
> (and myself sometimes, honestly, when I get stuck on a tricky rule)
> 2. Visualizations include the ability to analyze grammar conflicts ---
> also very handy
> 3. LL star instead of LL k (like JavaCC --- Sable CC is LALR k if I
> recall correctly)
> 4. Semantic and Syntactic predicates make writing very complex
> grammars much easier than with traditional parsers
> 5. Tree grammars more or less get rid of the visitor pattern, which I
> strongly prefer. I understand the visitor pattern very, very, well,
> and have written compilers with it, but it drives me crazy sometimes.
> 6. Extremely excellent documentation, especially Terrence's books. I
> haven't read the new one yet, but compared to most compiler books on
> the market, Terrence's ANTLR book was a real breath of fresh air.
>
> And here's some disadvantages:
>
> 1. Some of my students find writing certain rules in an LL grammar
> more difficult than LALR, especially expressions.
> 2. Some of the ANTLR syntax/semantics is pretty non-intuitive for
> students. I'm thinking specifically of rewrite rules like ^(NODE
> OTHER_NODE), or a few other things. That isn't to say that things are
> any easier in SableCC/JavaCC/Lex/Yacc, or any other language, as they
> aren't, but still ...
>

From gthouraya at yahoo.fr  Sun Apr  4 03:24:25 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Sun, 4 Apr 2010 10:24:25 +0000 (GMT)
Subject: [antlr-interest] New target language
Message-ID: <638219.66660.qm@web26308.mail.ukl.yahoo.com>

How I can add a target language other one than those defines in the site (Java, Csharp, C++,...) please. 



      

From markwright at internode.on.net  Sun Apr  4 04:47:46 2010
From: markwright at internode.on.net (Mark Wright)
Date: Sun, 4 Apr 2010 21:47:46 +1000
Subject: [antlr-interest] New target language
In-Reply-To: <638219.66660.qm@web26308.mail.ukl.yahoo.com>
References: <638219.66660.qm@web26308.mail.ukl.yahoo.com>
Message-ID: <20100404114746.GA19018@internode.on.net>

Some hints are on here:

http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targets
http://www.antlr.org/wiki/display/ANTLR3/How+to+build+an+ANTLR+code+generation+target

On Sun, Apr 04, 2010 at 10:24:25AM +0000, Gouasmi Thouraya wrote:
> How I can add a target language other one than those defines in the site (Java, Csharp, C++,...) please. 

From sharwell at pixelminegames.com  Mon Apr  5 19:44:51 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Mon, 5 Apr 2010 21:44:51 -0500
Subject: [antlr-interest] CSharp3 Target (ANTLR 3.2)
References: <80A5CDD2686EA042AE41C526324D44557743629D6D@EXCHANGE2007.signmgmt.local>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DEF7@martini.ironwillgames.com>

The official status is beta for a few reasons:

* Grammars built with the debug and/or profile flags aren't tested or
integrated into MSBuild.
* Delegate grammars aren't really tested.
* Aside from my own commercial product and several test projects, I
don't know of anyone putting the CSharp3 target to the test.

Here's a new build with (among other things) improved MSBuild support. I
need to make a blog entry about using the MSBuild support, but I can say
I'm exclusively using this for every grammar in every project I'm using
ANTLR in, including the v3 grammars for the C# port of the tool itself.

http://www.280z28.org/downloads/antlr/antlr-dotnet-binaries-3.2.0.6805.7
z

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Kevin Carroll
Sent: Monday, March 15, 2010 11:35 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] CSharp3 Target (ANTLR 3.2)

What is the "official" status of C# port of ANTLR 3.2 (i.e.,
language=CSharp3)?  Several of the new features of 3.2 are utilized
quite a bit in "Language Implementation Patterns".  Most importantly,
tree rewriting.

I have been using Sam Harwell's stand-alone Windows port of ANTLR 3.2
with success (after a few tweaks to unify member name capitalization and
a correction to the ApplyOnce method to bring it up-to-date with the
Java version).  The only true problem is that I would really love to use
my ANTLR-generated parser in conjunction with Actipro Software's
SyntaxEditor, but they only currently support the CSharp2 target
(understandably).

Thanks for any info,
Kevin Carroll

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From gthouraya at yahoo.fr  Tue Apr  6 03:04:16 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Tue, 6 Apr 2010 10:04:16 +0000 (GMT)
Subject: [antlr-interest] (no subject)
Message-ID: <292534.87230.qm@web26305.mail.ukl.yahoo.com>

hello ?
I have need to add another language (another one that those definite in language target), I followed the instructions of "How to build year ANTLR codes generation target" to add the XYZ directory in all the indicated places. But I don't know how must I do now? and where I add the grammar of this new language and the rules of transformation between the grammar of input and this new language? 
please give me an idea please



      

From Andi.Clemens at gmx.net  Tue Apr  6 04:23:30 2010
From: Andi.Clemens at gmx.net (Andi Clemens)
Date: Tue, 06 Apr 2010 13:23:30 +0200
Subject: [antlr-interest] Help on parsing SQL statements
Message-ID: <20100406112330.307040@gmx.net>

Hi,

I'm implementing a parser that returns the table_spec that is used in an (Oracle)SQL-Statement. The parser decides whether the statement should be executed or not.
I don't need all SQL statements that can occur, only the ones with table_specs in it, like SELECT, INSERT, DELETE, CREATE TABLE etc.
In most cases I don't even need to know the whole SQL statement, only parts of it. So I have rules that look something like this:

alter_materialized_view_statement
	:	'ALTER' 'MATERIALIZED' 'VIEW'
		('LOG' 'FORCE'? 'ON')? table_spec .*	
	; 
    

alter_view_statement
	:	'ALTER' 'VIEW' table_spec
		('ADD' | 'MODIFY' | 'DROP' | 'COMPILE') .*		
	;


But when I type in the following statement, the parser is not able to parse it:

ALTER VIEW schema.table [...];

Also the next statement is not working:

ALTER MATERIALIZED VIEW LOG ON schema.test [...];


Is it because I use ".*" in the rules? Why isn't ANTLR able to decide which rule to use here? They clearly start differently.
I always get the following error:

statementString(1)  : error 3 : , at offset -1
    near [Index: 0 (Start: 4058184-Stop: 4058188) ='alter', type<118> Line: 1 LinePos:-1]
     : cannot match to any predicted input...


Any idea how to fix that?
In the end, I only want to have some statements checked (the one with table_specs), other statements should be ignored (on parse error).

Andi

-- 
GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01

From Andi.Clemens at gmx.net  Tue Apr  6 04:32:10 2010
From: Andi.Clemens at gmx.net (Andi Clemens)
Date: Tue, 06 Apr 2010 13:32:10 +0200
Subject: [antlr-interest] Help on parsing SQL statements
In-Reply-To: <20100406112330.307040@gmx.net>
References: <20100406112330.307040@gmx.net>
Message-ID: <20100406113210.301500@gmx.net>

Some more info:

I'm using the PL/SQL grammar for Oracle as a starting point and implement the missing SQL statements around it.

Unfortunately this code becomes so huge, I'm not able to compile a Java generator from it and therefore can't use the debugger in ANTLRworks.

My main target is "C", it compiles fine, but debugging is not that easy here.

Andi

-------- Original-Nachricht --------
> Datum: Tue, 06 Apr 2010 13:23:30 +0200
> Von: "Andi Clemens" <Andi.Clemens at gmx.net>
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] Help on parsing SQL statements

> Hi,
> 
> I'm implementing a parser that returns the table_spec that is used in an
> (Oracle)SQL-Statement. The parser decides whether the statement should be
> executed or not.
> I don't need all SQL statements that can occur, only the ones with
> table_specs in it, like SELECT, INSERT, DELETE, CREATE TABLE etc.
> In most cases I don't even need to know the whole SQL statement, only
> parts of it. So I have rules that look something like this:
> 
> alter_materialized_view_statement
> 	:	'ALTER' 'MATERIALIZED' 'VIEW'
> 		('LOG' 'FORCE'? 'ON')? table_spec .*	
> 	; 
>     
> 
> alter_view_statement
> 	:	'ALTER' 'VIEW' table_spec
> 		('ADD' | 'MODIFY' | 'DROP' | 'COMPILE') .*		
> 	;
> 
> 
> But when I type in the following statement, the parser is not able to
> parse it:
> 
> ALTER VIEW schema.table [...];
> 
> Also the next statement is not working:
> 
> ALTER MATERIALIZED VIEW LOG ON schema.test [...];
> 
> 
> Is it because I use ".*" in the rules? Why isn't ANTLR able to decide
> which rule to use here? They clearly start differently.
> I always get the following error:
> 
> statementString(1)  : error 3 : , at offset -1
>     near [Index: 0 (Start: 4058184-Stop: 4058188) ='alter', type<118>
> Line: 1 LinePos:-1]
>      : cannot match to any predicted input...
> 
> 
> Any idea how to fix that?
> In the end, I only want to have some statements checked (the one with
> table_specs), other statements should be ignored (on parse error).
> 
> Andi
> 
> -- 
> GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
> Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address

-- 
GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01

From tienph711 at yahoo.co.uk  Tue Apr  6 05:17:06 2010
From: tienph711 at yahoo.co.uk (Pham Hung Tien)
Date: Tue, 6 Apr 2010 12:17:06 +0000 (GMT)
Subject: [antlr-interest] Mapping between grammar and generated code
Message-ID: <304580.47813.qm@web24504.mail.ird.yahoo.com>

Hi all,

Are there any ways to map line by line between grammar file and generated code file?


Tien.





      

From markwright at internode.on.net  Tue Apr  6 06:42:45 2010
From: markwright at internode.on.net (Mark Wright)
Date: Tue, 6 Apr 2010 23:42:45 +1000
Subject: [antlr-interest] (no subject)
In-Reply-To: <292534.87230.qm@web26305.mail.ukl.yahoo.com>
References: <292534.87230.qm@web26305.mail.ukl.yahoo.com>
Message-ID: <20100406134245.GB19018@internode.on.net>

In the antlr source code distribution you cd to the
directory:

cd antlr-3.2/tool/target/classes/org/antlr/codegen/templates

and then in there, create symlink to a directory where you
are creating the string template for your new target.

You can start by copying the Java one, Java/Java.stg,
and modify it as described in the instructions you
mention below.

In your test grammars you specify your new target
with the:

lexer grammar Zero;
options { language = XYZ; }
ZERO: '0';

where XYZ is the name of your target language, and
the name of the directory you created where ANTLR
looks for your XYZ.stg file.

On Tue, Apr 06, 2010 at 10:04:16AM +0000, Gouasmi Thouraya wrote:
> hello ?
> I have need to add another language (another one that those definite in language target), I followed the instructions of "How to build year ANTLR codes generation target" to add the XYZ directory in all the indicated places. But I don't know how must I do now? and where I add the grammar of this new language and the rules of transformation between the grammar of input and this new language? 
> please give me an idea please
> 
> 
> 
>       
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From terryarno at yahoo.com  Tue Apr  6 07:30:18 2010
From: terryarno at yahoo.com (Terry Arnold)
Date: Tue, 6 Apr 2010 07:30:18 -0700 (PDT)
Subject: [antlr-interest] How can Antlr Parser actions know the file names
	and line numbers from a C preprocessed file?
Message-ID: <221293.97152.qm@web52308.mail.re2.yahoo.com>

I?m writing a lint program for an in-house language whose source files are preprocessed just like C/C++. Can someone point me in the direction of figuring out how my parser actions can know what file and line number the current token(s) are really from?


The lexer knows all about it from the preprocessor ?#line? entries (for example):

#line 34 ?includeFile.h?

in the preprocessed file (?sourceFile.i?). But how can that information be given to the parser such that while parsing ?sourceFile.i?, line 332, a parser action can report that, say, 

includeFile.h(40) : warning : Local variable ?temp? declared but not used

How can the lexer tell the parser that the file and line number the current token is from is actually ?includeFile.h?, line 40, and not ?sourceFile.i?, line 332?

My lexer:

PPLINE  // preprocessor #line. update the parser with the file name and line number
    :   '#line' WS+ INT WS+  {input.setLine(Integer.parseInt($INT.text));} 
            STRING  {currentFile = $STRING.text;} 
        {  $channel=HIDDEN; }
    ;

input.setLine() compiles but I don't know yet if that is the right way to do it. If it is then it seems all I need is to update the parser with the file name (STRING).

Thanks for your help,


      

From marcelito20 at gmail.com  Tue Apr  6 07:39:22 2010
From: marcelito20 at gmail.com (Marcelo Carrillo)
Date: Tue, 6 Apr 2010 07:39:22 -0700 (PDT)
Subject: [antlr-interest] =?utf-8?q?Invitaci=C3=B3n_a_conectarnos_en_Linke?=
	=?utf-8?q?dIn?=
Message-ID: <973561954.16707271.1270564762559.JavaMail.app@ech3-cdn10.prod>

LinkedIn
------------Marcelo Carrillo requested to add you as a connection on LinkedIn:
------------------------------------------

Ian,

Me gustar?a a?adirte a mi red profesional en LinkedIn.
 
-Marcelo

Accept invitation from Marcelo Carrillo
http://www.linkedin.com/e/XJ_Jh42eHeYQ_eJ2S5_J_0Ueq9jQFT3yBwA6v-/blk/I1943743713_2/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYOnPcNdPcQdPcQej59bShVd3tegRZObPcUe3wUej8Mcz4LrCBxbOYWrSlI/EML_comm_afe/

View invitation from Marcelo Carrillo
http://www.linkedin.com/e/XJ_Jh42eHeYQ_eJ2S5_J_0Ueq9jQFT3yBwA6v-/blk/I1943743713_2/39vcP4TcPgTcPgVckALqnpPbOYWrSlI/svi/


 
------
(c) 2010, LinkedIn Corporation

From jimi at temporal-wave.com  Tue Apr  6 08:37:20 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 06 Apr 2010 08:37:20 -0700
Subject: [antlr-interest] Help on parsing SQL statements
In-Reply-To: <20100406113210.301500@gmx.net>
Message-ID: <d46d656b784a0445b6babbeba774bacc@temporal-wave.com>

Couple of pointers for you:

1) To use the grammar in any commercial way, you will probably need to change all those keywords in to real tokens in the lexer, otherwise you won't know what their symbols are for error messages and so on. Also constructing a tree/tree parser is a lot easier that way;
2) The generated code is large and VS2008 cannot debug more than 16384 code lines. To reduce you have to split the parser up into multiple imports;
3) The ANTLRWorks debugger only works with the development version of the C target and runtime as it went out of sync and I had no time to fix it for 3.2 - you can use the development snapshots if you are willing to build locally;
4) I have a commercial PL/SQL parser at: www.temporal-wave.com if you are in need of something commercial - you can test it online;

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andi Clemens
> Sent: Tuesday, April 06, 2010 4:32 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Help on parsing SQL statements
> 
> Some more info:
> 
> I'm using the PL/SQL grammar for Oracle as a starting point and
> implement the missing SQL statements around it.
> 
> Unfortunately this code becomes so huge, I'm not able to compile a Java
> generator from it and therefore can't use the debugger in ANTLRworks.
> 
> My main target is "C", it compiles fine, but debugging is not that easy
> here.
> 
> Andi
> 
> -------- Original-Nachricht --------
> > Datum: Tue, 06 Apr 2010 13:23:30 +0200
> > Von: "Andi Clemens" <Andi.Clemens at gmx.net>
> > An: antlr-interest at antlr.org
> > Betreff: [antlr-interest] Help on parsing SQL statements
> 
> > Hi,
> >
> > I'm implementing a parser that returns the table_spec that is used in
> an
> > (Oracle)SQL-Statement. The parser decides whether the statement
> should be
> > executed or not.
> > I don't need all SQL statements that can occur, only the ones with
> > table_specs in it, like SELECT, INSERT, DELETE, CREATE TABLE etc.
> > In most cases I don't even need to know the whole SQL statement, only
> > parts of it. So I have rules that look something like this:
> >
> > alter_materialized_view_statement
> > 	:	'ALTER' 'MATERIALIZED' 'VIEW'
> > 		('LOG' 'FORCE'? 'ON')? table_spec .*
> > 	;
> >
> >
> > alter_view_statement
> > 	:	'ALTER' 'VIEW' table_spec
> > 		('ADD' | 'MODIFY' | 'DROP' | 'COMPILE') .*
> > 	;
> >
> >
> > But when I type in the following statement, the parser is not able to
> > parse it:
> >
> > ALTER VIEW schema.table [...];
> >
> > Also the next statement is not working:
> >
> > ALTER MATERIALIZED VIEW LOG ON schema.test [...];
> >
> >
> > Is it because I use ".*" in the rules? Why isn't ANTLR able to decide
> > which rule to use here? They clearly start differently.
> > I always get the following error:
> >
> > statementString(1)  : error 3 : , at offset -1
> >     near [Index: 0 (Start: 4058184-Stop: 4058188) ='alter', type<118>
> > Line: 1 LinePos:-1]
> >      : cannot match to any predicted input...
> >
> >
> > Any idea how to fix that?
> > In the end, I only want to have some statements checked (the one with
> > table_specs), other statements should be ignored (on parse error).
> >
> > Andi
> >
> > --
> > GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
> > Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> 
> --
> GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
> Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Tue Apr  6 08:44:20 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 06 Apr 2010 08:44:20 -0700
Subject: [antlr-interest] How can Antlr Parser actions know the file
	names and line numbers from a C preprocessed file?
In-Reply-To: <221293.97152.qm@web52308.mail.re2.yahoo.com>
Message-ID: <fc7e533a6b456f47923111a422af7f8e@temporal-wave.com>

Lots of ways but:

Derive your own token from CommonToken and add file number field to it;
Get the lexer to produce those tokens and the parser to accept them;
Build a file table in the lexer and refer to it in error messages;
Keep track of current file in the lexer in case you need error messages from the lexer;
Keep track of current line number in the inferred file by setting it in your PPLINE rule then incrementing it in your NEWLINE rule;
Set the line and file number at the end of each rule (or override the nextToken stuff to set this automatically);


Start down that path and you will see the best way for your requirements.

You don't say what target language you use but in the C target there are user fields for storing such additional information so you can do the same thing as deriving a token.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Terry Arnold
> Sent: Tuesday, April 06, 2010 7:30 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] How can Antlr Parser actions know the file
> names and line numbers from a C preprocessed file?
> 
> I?m writing a lint program for an in-house language whose source files
> are preprocessed just like C/C++. Can someone point me in the direction
> of figuring out how my parser actions can know what file and line
> number the current token(s) are really from?
> 
> 
> The lexer knows all about it from the preprocessor ?#line? entries (for
> example):
> 
> #line 34 ?includeFile.h?
> 
> in the preprocessed file (?sourceFile.i?). But how can that information
> be given to the parser such that while parsing ?sourceFile.i?, line
> 332, a parser action can report that, say,
> 
> includeFile.h(40) : warning : Local variable ?temp? declared but not
> used
> 
> How can the lexer tell the parser that the file and line number the
> current token is from is actually ?includeFile.h?, line 40, and not
> ?sourceFile.i?, line 332?
> 
> My lexer:
> 
> PPLINE  // preprocessor #line. update the parser with the file name and
> line number
>     :   '#line' WS+ INT WS+
> {input.setLine(Integer.parseInt($INT.text));}
>             STRING  {currentFile = $STRING.text;}
>         {  $channel=HIDDEN; }
>     ;
> 
> input.setLine() compiles but I don't know yet if that is the right way
> to do it. If it is then it seems all I need is to update the parser
> with the file name (STRING).
> 
> Thanks for your help,
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From gthouraya at yahoo.fr  Tue Apr  6 17:26:27 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Wed, 7 Apr 2010 00:26:27 +0000 (GMT)
Subject: [antlr-interest] StringTemplate for target Language
Message-ID: <737327.60607.qm@web26306.mail.ukl.yahoo.com>

Is it obligatory to download and to install Maven2 to create the stringTemplate of a language target? otherwise what tool use to write the stringTemplate and how?
please help me



      

From wolfi9999 at gmx.de  Wed Apr  7 08:22:20 2010
From: wolfi9999 at gmx.de (wolfi9999 at gmx.de)
Date: Wed, 07 Apr 2010 17:22:20 +0200
Subject: [antlr-interest] Generate a Pascal similar grammar
Message-ID: <20100407152220.212050@gmx.net>

Hello!

I want to write a Pascal similar grammar which only
looks for if statements and function calls. All other
statements and texts are not interesting for me.
>From this I want to draw an activity diagram in an
UML Tool.

My question: is it possible to filter only for these
   two kind of statements (if, func call) and by which
   rule do I skip the rest of the text?

Thanks.

Regards
Wolfi

-- 
GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01

From Andi.Clemens at gmx.net  Wed Apr  7 08:42:07 2010
From: Andi.Clemens at gmx.net (Andi Clemens)
Date: Wed, 07 Apr 2010 17:42:07 +0200
Subject: [antlr-interest] Error Handling in C target?
Message-ID: <20100407154207.314930@gmx.net>

Hi,

I want to turn off all the warnings / errors coming from the lexer / parser.
I found an option that seems to turn error handling off:

defaultErrorHandler = false;

but somehow this isn't working in ANTLR 3.1.x?

Is there an easy way to turn error handling off in C?
In Java I would override some method I guess, but this is not possible for the C target, or am I wrong?

Andi

-- 
GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01

From jimi at temporal-wave.com  Wed Apr  7 08:48:14 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 07 Apr 2010 08:48:14 -0700
Subject: [antlr-interest] Error Handling in C target?
In-Reply-To: <20100407154207.314930@gmx.net>
Message-ID: <1fa77765cb557a458eb31ff55cdc5a48@temporal-wave.com>

Please read the C API and use list archive search. You just install a pointer to your own function for error handling.

http://antlr.markmail.org/search/?q=C%20error%20override


Generally a lexer should not be producing any errors.


Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andi Clemens
> Sent: Wednesday, April 07, 2010 8:42 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Error Handling in C target?
> 
> Hi,
> 
> I want to turn off all the warnings / errors coming from the lexer /
> parser.
> I found an option that seems to turn error handling off:
> 
> defaultErrorHandler = false;
> 
> but somehow this isn't working in ANTLR 3.1.x?
> 
> Is there an easy way to turn error handling off in C?
> In Java I would override some method I guess, but this is not possible
> for the C target, or am I wrong?
> 
> Andi
> 
> --
> GRATIS f?r alle GMX-Mitglieder: Die maxdome Movie-FLAT!
> Jetzt freischalten unter http://portal.gmx.net/de/go/maxdome01
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jcottam at umail.iu.edu  Wed Apr  7 11:18:53 2010
From: jcottam at umail.iu.edu (Joseph Cottam)
Date: Wed, 7 Apr 2010 14:18:53 -0400
Subject: [antlr-interest] Tree filter/rewrite wildcards
Message-ID: <h2pa01429f41004071118p2374236aj553cb50d1361b66@mail.gmail.com>

Using V3.2...


With grammar options:

  filter = true;

  output = AST;

topdown: ^(f=FUNCTION rest=.*) -> ^(FUNCTION NEW_NODE $rest);


Yields: ^(FUNCTION NEW_NODE)

Regardless of the contents matched in $rest.  Put another way, it seems to
match, but not output things caught up in a wildcard.


Is that the defined behavior?

How can I match number of anythings in tree


I have also tried:

   rest+=.* (no change to behavior)

   Rule called 'rest' with just a .* in it (does not compile, tries to catch
an exception that can't ever be thrown).



-Joseph Cottam

From jimi at temporal-wave.com  Wed Apr  7 11:26:29 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 07 Apr 2010 11:26:29 -0700
Subject: [antlr-interest] Tree filter/rewrite wildcards
In-Reply-To: <h2pa01429f41004071118p2374236aj553cb50d1361b66@mail.gmail.com>
Message-ID: <6a1c7aca4a28ba459356a44030af09cd@temporal-wave.com>

Did you try:

-> ^(FUNCTION NEW_NODE $rest*);
                            ^

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Joseph Cottam
> Sent: Wednesday, April 07, 2010 11:19 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Tree filter/rewrite wildcards
> 
> Using V3.2...
> 
> 
> With grammar options:
> 
>   filter = true;
> 
>   output = AST;
> 
> topdown: ^(f=FUNCTION rest=.*) -> ^(FUNCTION NEW_NODE $rest);
> 
> 
> Yields: ^(FUNCTION NEW_NODE)
> 
> Regardless of the contents matched in $rest.  Put another way, it seems
> to
> match, but not output things caught up in a wildcard.
> 
> 
> Is that the defined behavior?
> 
> How can I match number of anythings in tree
> 
> 
> I have also tried:
> 
>    rest+=.* (no change to behavior)
> 
>    Rule called 'rest' with just a .* in it (does not compile, tries to
> catch
> an exception that can't ever be thrown).
> 
> 
> 
> -Joseph Cottam
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From tyler.distad at gmail.com  Thu Apr  8 04:16:28 2010
From: tyler.distad at gmail.com (Tyler Distad)
Date: Thu, 8 Apr 2010 07:16:28 -0400
Subject: [antlr-interest] Processing/traversing a rule
Message-ID: <p2g1bb620341004080416lea0d51a5r26c3b3b78b76e772@mail.gmail.com>

I have a tree parser which is traversing the nodes of my AST. At points
within the grammar, I use action blocks to call methods on my processing
object, thus keeping large amounts of action code abstracted into a separate
file.

This has worked fine, but now I have the "if" and "while" statements visible
below:

stmtIf
    : ^(STMT_IF expr trueStmts=stmt* (ELSE_KW falseStmts=stmt*)?)
        { proc.outStmtIf($expr.start, $trueStmts.start,
$falseStmts.start);    }
    ;

stmtWhile
    : ^(STMT_WHILE expr stmt*)
        { proc.outStmtWhile($expr.start, $stmt.start);    }
    ;

Obviously, this works fine for actions which take place after the entire if
or while tree has been processed. But I want to do some processing before
the tree is traversed, as well as some at specific points during. I could
create more method calls in my processing object and sprinkle them
throughout the above AST, but that feels so clunky. I'd like to be able to
override the entire traversal of the rule at this point and do some custom
work.

So, two questions:
 * In general, is my method of making calls to a processing object
sane/normal/best practice?
 * In the above cases, is there any practical method of manually processing
an entire rule and its descendant tree?

Tyler Distad

From markwright at internode.on.net  Thu Apr  8 05:37:35 2010
From: markwright at internode.on.net (Mark Wright)
Date: Thu, 8 Apr 2010 22:37:35 +1000
Subject: [antlr-interest] StringTemplate for target Language
In-Reply-To: <737327.60607.qm@web26306.mail.ukl.yahoo.com>
References: <737327.60607.qm@web26306.mail.ukl.yahoo.com>
Message-ID: <20100408123735.GC8661@internode.on.net>

On Wed, Apr 07, 2010 at 12:26:27AM +0000, Gouasmi Thouraya wrote:
> Is it obligatory to download and to install Maven2 to create the stringTemplate of a language target?

Yes.

> otherwise what tool use to write the stringTemplate and how?
> please help me
 
Its necessary to download the ANTR 3.2 source code:

http://antlr.org/download/antlr-3.2.tar.gz

and build it with Maven.  The build instructions are in the
file BUILD.txt.  In the mail archives for this list there is a
recent email from myself giving some more hints on building
it with Maven.

Then there are some hints to get started on:

http://www.antlr.org/wiki/display/ANTLR3/How+to+build+an+ANTLR+code+generation+target

So after reating the simple lexer, you build it with the ANTLR tool
as described in the ANTLR documentation, something like:

java -Xmx512m -classpath $(ANTLR_CLASSPATH) org.antlr.Tool -Xconversiontimeout 1200000 -report T.g

please see the ANTLR documentation on how to set the ANTLR_CLASSPATH.

It will generate files like T.XYZ, or TLexer.XYZ and TParser.XYZ.

The XYZ.stg string template you are creating can generate the target
code with whatever strategy you like that makes sense in your target
language.

It may also be necessary to create a
antlr-3.2/tool/src/main/java/org/antlr/codegen/XYZTarget.java
file to customize the information that is passed from the
ANTLR tool to the XYZ.stg string template.


From john.farr at medtronic.com  Thu Apr  8 08:39:13 2010
From: john.farr at medtronic.com (Farr, John)
Date: Thu, 8 Apr 2010 10:39:13 -0500
Subject: [antlr-interest] Processing/traversing a rule -- dealing with
 conditionals
In-Reply-To: <p2g1bb620341004080416lea0d51a5r26c3b3b78b76e772@mail.gmail.com>
References: <p2g1bb620341004080416lea0d51a5r26c3b3b78b76e772@mail.gmail.com>
Message-ID: <0E0B60BD6BB03B4FA5F17D5C21AE4B361484B4F7BE@MSPM1BMSGM102.ent.core.medtronic.com>

Tyler,

It appears that you're trying to deal with the conditional aspect of your IF and WHILE statements in the tree grammar actions. I haven't found a way to do this exclusively in actions because the conditions determine which parts of the tree to "evaluate" and which parts to "skip over".

The way I deal with this in an expression evaluator tree is something like the following:

//-------------

@header { bool booleanResult; }

expression returns [Result result]
    : ^( IF     cond=expression
                { booleanResult = $cond.result.asBool(); }
                ( { booleanResult }?=>
                  s1=expression unevaluatedExpression
                  { $result = $s1.result; }
                | unevaluatedExpression s2=expression
                  { $result = $s2.result; }
                )
       )
    | ^( OR     op1=expression { booleanResult = $op1.result.asBool(); }
                ( { booleanResult }?=> unevaluatedExpression { $result = $op1.result; }
                | op2=expression { $result = $op2.result; }
                )
       )
    | ^( AND    op1=expression
                { booleanResult = $op1.result.asBool(); }
                ( { !booleanResult }?=>
                  unevaluatedExpression
                  { $result = $op1.result; }
                | op2=expression
                  { $result = $op2.result; }
                )
       )
    // ... other operators, literals, etc.
    ;

unevaluatedExpression
    : ^( ( IF | OR | AND
         | // other operators, etc.
         ) unevaluatedExpression* )
    | // literals, etc.
    ;

//-------------

This is obviously simplified and incomplete but I hope you'll get the idea. There are a couple of things this approach depends on:

1. A rule, unevaluatedExpression, that is like the main expression rule, but contains no evaluating actions.

2. A data member of the parser class, booleanResult, used in semantic predicates to select which subexpressions to evaluate. It needs to be at the parser level (or in a scope), so that it can be seen by the code generated for the semantic predicate.

3. The semantic predicates that select the appropriate subexpressions.

I hope this helps.

--John


-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Tyler Distad
Sent: Thursday, April 08, 2010 6:16 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Processing/traversing a rule

I have a tree parser which is traversing the nodes of my AST. At points within the grammar, I use action blocks to call methods on my processing object, thus keeping large amounts of action code abstracted into a separate file.

This has worked fine, but now I have the "if" and "while" statements visible
below:

stmtIf
    : ^(STMT_IF expr trueStmts=stmt* (ELSE_KW falseStmts=stmt*)?)
        { proc.outStmtIf($expr.start, $trueStmts.start,
$falseStmts.start);    }
    ;

stmtWhile
    : ^(STMT_WHILE expr stmt*)
        { proc.outStmtWhile($expr.start, $stmt.start);    }
    ;

Obviously, this works fine for actions which take place after the entire if or while tree has been processed. But I want to do some processing before the tree is traversed, as well as some at specific points during. I could create more method calls in my processing object and sprinkle them throughout the above AST, but that feels so clunky. I'd like to be able to override the entire traversal of the rule at this point and do some custom work.

So, two questions:
 * In general, is my method of making calls to a processing object sane/normal/best practice?
 * In the above cases, is there any practical method of manually processing an entire rule and its descendant tree?

Tyler Distad

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


[CONFIDENTIALITY AND PRIVACY NOTICE]

Information transmitted by this email is proprietary to Medtronic and is intended for use only by the individual or entity to which it is addressed, and may contain information that is private, privileged, confidential or exempt from disclosure under applicable law. If you are not the intended recipient or it appears that this mail has been forwarded to you without proper authority, you are notified that any use or dissemination of this information in any manner is strictly prohibited. In such cases, please delete this mail from your records.
 
To view this notice in other languages you can either select the following link or manually copy and paste the link into the address bar of a web browser: http://emaildisclaimer.medtronic.com


From sharwell at pixelminegames.com  Thu Apr  8 09:52:50 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Thu, 8 Apr 2010 11:52:50 -0500
Subject: [antlr-interest] New partial methods in the C# 3 generated code
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DF01@martini.ironwillgames.com>

I've made a few changes locally in the generated code for the CSharp3
target. Partial methods are new to C# 3, and were added so generated
code can add extensibility points. The partial methods and all calls to
them in generated code are *completely* removed by the compiler if there
is no implementation provided in another file.

 

1.       The partial methods "void EnterRule(string ruleName, int
ruleIndex)" and "void LeaveRule(string ruleName, int ruleIndex)" are
generated, and a call to each is placed at the beginning and end of each
rule.

 

2.       For each rule, the partial methods "void Enter[RuleName]()" and
"void Leave[RuleName]()" are generated. They are called *outside* of the
calls to EnterRule and LeaveRule (Enter[RuleName] before EnterRule,
Leave[RuleName] after LeaveRule).

 

3.       The -trace flag no longer affects the generated code. Calls to
BaseRecognizer.TraceIn and BaseRecognizer.TraceOut are always included
in the generated code, and the methods are now marked
[Conditional("ANTLR_TRACE")]. The calls are *inside* the calls to
EnterRule and LeaveRule.

 

4.       The partial method "void OnCreated()" is called at the end of
the constructor.

 

5.       The partial method "void CreateTreeAdaptor(ref ITreeAdaptor
adaptor)" is generated for tree parsers. Implement this method if you
want to use a tree adaptor other than CommonTreeAdaptor - no more need
to place conditional initialization inside your rules.

 

I'm also open to suggestions for other partial methods to add, which is
why I included this on the antlr-interest list.

 

Thanks,

Sam


From cconway at cs.nyu.edu  Thu Apr  8 10:08:16 2010
From: cconway at cs.nyu.edu (Christopher L Conway)
Date: Thu, 8 Apr 2010 13:08:16 -0400
Subject: [antlr-interest] C++ exceptions escape from libantlr3c
Message-ID: <w2q4a051d931004081008lcf83b3e7m1b43eb16432d2c6d@mail.gmail.com>

We have had a problem with our application crashing when a parser
exception is thrown. We override the default error handler as follows:

   /* init code... */
   pFooParser fooParser = NewFooParser(tokenStream);
   fooParser->pParser->rec->reportError = &reportError;

where reportError is defined inside my project:

   void reportError(pANTLR3_BASE_RECOGNIZER recognizer) {
       /* Collect information... */
       throw new ParserException(msg,filename,line,column);
   }

The main method is set up to catch ParserException, but on some (not
all) systems we get a crash with the message:

   terminate called after throwing an instance of 'ParserException'

The culprit seems to be libantlr3c routines
(e.g., recoverFromMismatchedToken) on the stack when the exception is
thrown. Since the library doesn't support exception handling, the
exception escapes and causes a crash.

A fairly simple fix for this problem is to add -fexceptions to the
command line when you compile the library. Unfortunately, the
libantlr3c configure script doesn't directly support user-supplied
CFLAGS. I'm attaching a patch that adds a --enable-cplusplus argument
to the configure script. (You need to rerun autoconf after applying
the patch for the changes to take effect.)

Regards,
Chris

From hugo.leeney at gmail.com  Thu Apr  8 10:44:15 2010
From: hugo.leeney at gmail.com (Hugo Leeney)
Date: Thu, 8 Apr 2010 10:44:15 -0700 (PDT)
Subject: [antlr-interest] Hugo Leeney wants to stay in touch on LinkedIn
Message-ID: <656168769.1211527.1270748655855.JavaMail.app@ech3-cdn10.prod>

LinkedIn
------------Hugo Leeney requested to add you as a connection on LinkedIn:
------------------------------------------

Ian,

I'd like to add you to my professional network on LinkedIn.

- Hugo Leeney

Accept invitation from Hugo Leeney
http://www.linkedin.com/e/XJ_Jh42eHeYQ_eJ2S5_J_0Ueq9jQFT3yBwA6v-/blk/I1951338402_2/1BpC5vrmRLoRZcjkkZt5YCpnlOt3RApnhMpmdzgmhxrSNBszYOnP8Md3wPcP4Rej59bRxHjSNpdlEQbPoNd30Od30Ncz4LrCBxbOYWrSlI/EML_comm_afe/

View invitation from Hugo Leeney
http://www.linkedin.com/e/XJ_Jh42eHeYQ_eJ2S5_J_0Ueq9jQFT3yBwA6v-/blk/I1951338402_2/39vcz0Qe3cPcjkVckALqnpPbOYWrSlI/svi/ 
------------------------------------------

DID YOU KNOW you can showcase your professional knowledge on LinkedIn to receive job/consulting offers and enhance your professional reputation? Posting replies to questions on LinkedIn Answers puts you in front of the world's professional community.
http://www.linkedin.com/e/abq/inv-24/

 
------
(c) 2010, LinkedIn Corporation

From cross at kojeware.com  Thu Apr  8 12:33:34 2010
From: cross at kojeware.com (Cameron Ross)
Date: Thu, 8 Apr 2010 15:33:34 -0400
Subject: [antlr-interest] OPEN, EOF ambiguity
Message-ID: <v2ybc2b292f1004081233qf7728db9g63d5673f6bb02925@mail.gmail.com>

Hi,

I have a grammar with an ambiguity that I just can't resolve.  When I check
the grammar using AntlrWorks I get the following: "Decision can match input
such as "{EOF, OPEN}" using multiple alternatives: 1, 2".  I've attached a
screen grab of the syntax diagram generated by AntrlWorks.  I don't
understand why ANLTR is thinking that EOF is ambiguous with OPEN.  I've
checked the grammar and clif_file is the only rule that is not referenced
from within the grammar, so I don't think that ANLTR should see module as a
start rule.  Any help is much appreciated.

Cameron
-------------- next part --------------
A non-text attachment was scrubbed...
Name: open_eof_ambiguity.png
Type: image/png
Size: 19807 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100408/2ad240d0/attachment.png 

From jimi at temporal-wave.com  Thu Apr  8 12:57:01 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 08 Apr 2010 12:57:01 -0700
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <v2ybc2b292f1004081233qf7728db9g63d5673f6bb02925@mail.gmail.com>
Message-ID: <fe84615442f8884fa81384382b97f6ca@temporal-wave.com>

You probably need to send the grammar rather than that graphic. It is likely something more fundamental and we cannot see what you predicates are doing from the graphic.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Cameron Ross
> Sent: Thursday, April 08, 2010 12:34 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] OPEN, EOF ambiguity
> 
> Hi,
> 
> I have a grammar with an ambiguity that I just can't resolve.  When I
> check the grammar using AntlrWorks I get the following: "Decision can
> match input such as "{EOF, OPEN}" using multiple alternatives: 1, 2".
> I've attached a screen grab of the syntax diagram generated by
> AntrlWorks.  I don't understand why ANLTR is thinking that EOF is
> ambiguous with OPEN.  I've checked the grammar and clif_file is the
> only rule that is not referenced from within the grammar, so I don't
> think that ANLTR should see module as a start rule.  Any help is much
> appreciated.
> 
> Cameron




From cross at kojeware.com  Thu Apr  8 13:05:49 2010
From: cross at kojeware.com (Cameron Ross)
Date: Thu, 8 Apr 2010 16:05:49 -0400
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <v2ybc2b292f1004081233qf7728db9g63d5673f6bb02925@mail.gmail.com>
References: <v2ybc2b292f1004081233qf7728db9g63d5673f6bb02925@mail.gmail.com>
Message-ID: <i2vbc2b292f1004081305nbfc00d23yc1992da1c47ee852@mail.gmail.com>

These rules show the top level of the grammar...

start_rule
: clif_file EOF
;

clif_file
: cltext+
;

cltext
: (OPEN CL_MODULE) => module -> ^(CLTEXT module)
| text -> ^(CLTEXT text)
;
module
: OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE -> ^(MODULE
^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
;

text
: phrase* -> ^(TEXT phrase*)
;


On Thu, Apr 8, 2010 at 3:33 PM, Cameron Ross <cross at kojeware.com> wrote:

> Hi,
>
> I have a grammar with an ambiguity that I just can't resolve.  When I check
> the grammar using AntlrWorks I get the following: "Decision can match input
> such as "{EOF, OPEN}" using multiple alternatives: 1, 2".  I've attached a
> screen grab of the syntax diagram generated by AntrlWorks.  I don't
> understand why ANLTR is thinking that EOF is ambiguous with OPEN.  I've
> checked the grammar and clif_file is the only rule that is not referenced
> from within the grammar, so I don't think that ANLTR should see module as a
> start rule.  Any help is much appreciated.
>
> Cameron
>



-- 
Kojeware Corporation

From jimi at temporal-wave.com  Thu Apr  8 13:07:45 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 08 Apr 2010 13:07:45 -0700
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
Message-ID: <b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>

Your text rule can be empty, you need to rejig your use of + and * or you end up with the empty match in more than one place.

 

Jim

 

From: Cameron Ross [mailto:cross at kojeware.com] 
Sent: Thursday, April 08, 2010 1:05 PM
To: Jim Idle
Subject: Re: [antlr-interest] OPEN, EOF ambiguity

 

These rules give the gist of it...

 

start_rule

          : clif_file EOF

          ;

 

clif_file

          : cltext+

          ;

 

cltext

          : (OPEN CL_MODULE) => module -> ^(CLTEXT module)

          | text -> ^(CLTEXT text)

          ;

                      

module

          : OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE -> ^(MODULE ^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)

          ;

 

text

          : phrase* -> ^(TEXT phrase*)

          ;

...

 

 

 

On Thu, Apr 8, 2010 at 3:57 PM, Jim Idle <jimi at temporal-wave.com> wrote:

You probably need to send the grammar rather than that graphic. It is likely something more fundamental and we cannot see what you predicates are doing from the graphic.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Cameron Ross
> Sent: Thursday, April 08, 2010 12:34 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] OPEN, EOF ambiguity
>
> Hi,
>
> I have a grammar with an ambiguity that I just can't resolve.  When I
> check the grammar using AntlrWorks I get the following: "Decision can
> match input such as "{EOF, OPEN}" using multiple alternatives: 1, 2".
> I've attached a screen grab of the syntax diagram generated by
> AntrlWorks.  I don't understand why ANLTR is thinking that EOF is
> ambiguous with OPEN.  I've checked the grammar and clif_file is the
> only rule that is not referenced from within the grammar, so I don't
> think that ANLTR should see module as a start rule.  Any help is much
> appreciated.
>
> Cameron





List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address




-- 
Kojeware Corporation




From cross at kojeware.com  Thu Apr  8 13:11:02 2010
From: cross at kojeware.com (Cameron Ross)
Date: Thu, 8 Apr 2010 16:11:02 -0400
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
Message-ID: <g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>

Yes, this is the way I have it implemented in my production version.
 However, I have to conform to a language specification which allows text to
have zero or more phrases.  Is there some ANLTR magic that I can use to
support this?


On Thu, Apr 8, 2010 at 4:07 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> Your text rule can be empty, you need to rejig your use of + and * or you
> end up with the empty match in more than one place.
>
>
>
> Jim
>
>
>
> From: Cameron Ross [mailto:cross at kojeware.com]
> Sent: Thursday, April 08, 2010 1:05 PM
> To: Jim Idle
> Subject: Re: [antlr-interest] OPEN, EOF ambiguity
>
>
>
> These rules give the gist of it...
>
>
>
> start_rule
>
>          : clif_file EOF
>
>          ;
>
>
>
> clif_file
>
>          : cltext+
>
>          ;
>
>
>
> cltext
>
>          : (OPEN CL_MODULE) => module -> ^(CLTEXT module)
>
>          | text -> ^(CLTEXT text)
>
>          ;
>
>
>
> module
>
>          : OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE ->
> ^(MODULE ^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
>
>          ;
>
>
>
> text
>
>          : phrase* -> ^(TEXT phrase*)
>
>          ;
>
> ...
>
>
>
>
>
>
>
> On Thu, Apr 8, 2010 at 3:57 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
> You probably need to send the grammar rather than that graphic. It is
> likely something more fundamental and we cannot see what you predicates are
> doing from the graphic.
>
> Jim
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Cameron Ross
> > Sent: Thursday, April 08, 2010 12:34 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] OPEN, EOF ambiguity
> >
> > Hi,
> >
> > I have a grammar with an ambiguity that I just can't resolve.  When I
> > check the grammar using AntlrWorks I get the following: "Decision can
> > match input such as "{EOF, OPEN}" using multiple alternatives: 1, 2".
> > I've attached a screen grab of the syntax diagram generated by
> > AntrlWorks.  I don't understand why ANLTR is thinking that EOF is
> > ambiguous with OPEN.  I've checked the grammar and clif_file is the
> > only rule that is not referenced from within the grammar, so I don't
> > think that ANLTR should see module as a start rule.  Any help is much
> > appreciated.
> >
> > Cameron
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> --
> Kojeware Corporation
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Kojeware Corporation

From acondit at ipns.com  Thu Apr  8 13:37:28 2010
From: acondit at ipns.com (Alan Condit)
Date: Thu, 8 Apr 2010 13:37:28 -0700
Subject: [antlr-interest] antlr-3.2 grammar
Message-ID: <326FF8D7-5444-48D2-BB7B-7A58B2D0D968@ipns.com>

I am interested in working with Ian Mitchell on the Objective-C target. From what I have been reading it seems like one of the current hang-ups to effective code generation is that antlr-3.2 is still written using v2 and lack of a string-template grammar for antlr-3.2.  One, is this correct? Two, what is the chance of Antlr3 being re-written using Antlr3?

Thanks,
Alan
---

Alan Condit
1085 Tierra Ct.
Woodburn, OR 97071

Email -- acondit at ipns.com
Home-Office (503) 982-0906


From jimi at temporal-wave.com  Thu Apr  8 14:32:41 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 08 Apr 2010 14:32:41 -0700
Subject: [antlr-interest] antlr-3.2 grammar
In-Reply-To: <326FF8D7-5444-48D2-BB7B-7A58B2D0D968@ipns.com>
Message-ID: <5d271db2e335e14ba0673636c85620a8@temporal-wave.com>

The current ANTLR 3.2 uses StringTemplate for code generation and whether the ANTLR parser is written in v2 or v3 affects neither code generation nor the writing of a language target runtime. We are writing ANTLR v4 and this is written in v3. V4 is intended to be backward compatible grammatically and in most other ways (if not all). 

So, you don't need to worry about this if you wish to implement Objective C. You might wish to look at just producing a veneer for the C target for objective C. I am eventually going to do that for C++

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Alan Condit
> Sent: Thursday, April 08, 2010 1:37 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] antlr-3.2 grammar
> 
> I am interested in working with Ian Mitchell on the Objective-C target.
> From what I have been reading it seems like one of the current hang-ups
> to effective code generation is that antlr-3.2 is still written using
> v2 and lack of a string-template grammar for antlr-3.2.  One, is this
> correct? Two, what is the chance of Antlr3 being re-written using
> Antlr3?
> 
> Thanks,
> Alan
> ---
> 
> Alan Condit
> 1085 Tierra Ct.
> Woodburn, OR 97071
> 
> Email -- acondit at ipns.com
> Home-Office (503) 982-0906
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From cross at kojeware.com  Thu Apr  8 16:48:38 2010
From: cross at kojeware.com (Cameron Ross)
Date: Thu, 8 Apr 2010 19:48:38 -0400
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
Message-ID: <h2qbc2b292f1004081648m15e0ba0k1c4957e8de54b08a@mail.gmail.com>

I guess I'm not clear on why ANTLR is seeing OPEN and EOF as an ambiguity.


On Thu, Apr 8, 2010 at 4:07 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> Your text rule can be empty, you need to rejig your use of + and * or you
> end up with the empty match in more than one place.
>
>
>
> Jim
>
>
>
> From: Cameron Ross [mailto:cross at kojeware.com]
> Sent: Thursday, April 08, 2010 1:05 PM
> To: Jim Idle
> Subject: Re: [antlr-interest] OPEN, EOF ambiguity
>
>
>
> These rules give the gist of it...
>
>
>
> start_rule
>
>          : clif_file EOF
>
>          ;
>
>
>
> clif_file
>
>          : cltext+
>
>          ;
>
>
>
> cltext
>
>          : (OPEN CL_MODULE) => module -> ^(CLTEXT module)
>
>          | text -> ^(CLTEXT text)
>
>          ;
>
>
>
> module
>
>          : OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE ->
> ^(MODULE ^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
>
>          ;
>
>
>
> text
>
>          : phrase* -> ^(TEXT phrase*)
>
>          ;
>
> ...
>
>
>
>
>
>
>
> On Thu, Apr 8, 2010 at 3:57 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
> You probably need to send the grammar rather than that graphic. It is
> likely something more fundamental and we cannot see what you predicates are
> doing from the graphic.
>
> Jim
>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Cameron Ross
> > Sent: Thursday, April 08, 2010 12:34 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] OPEN, EOF ambiguity
> >
> > Hi,
> >
> > I have a grammar with an ambiguity that I just can't resolve.  When I
> > check the grammar using AntlrWorks I get the following: "Decision can
> > match input such as "{EOF, OPEN}" using multiple alternatives: 1, 2".
> > I've attached a screen grab of the syntax diagram generated by
> > AntrlWorks.  I don't understand why ANLTR is thinking that EOF is
> > ambiguous with OPEN.  I've checked the grammar and clif_file is the
> > only rule that is not referenced from within the grammar, so I don't
> > think that ANLTR should see module as a start rule.  Any help is much
> > appreciated.
> >
> > Cameron
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>
> --
> Kojeware Corporation
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Kojeware Corporation

From cross at kojeware.com  Thu Apr  8 17:29:11 2010
From: cross at kojeware.com (Cameron Ross)
Date: Thu, 8 Apr 2010 20:29:11 -0400
Subject: [antlr-interest] Ambiguity caused by recursion (I think)
Message-ID: <v2mbc2b292f1004081729pbd7fb43fg90a5bf033f9047a7@mail.gmail.com>

Hi,

I have a grammar that calls a rule from two different "levels".  This leads
to an ambiguity being reported from the two different calls to the rule.
 Oddly, the ambiguity points to the same place, so I'm not sure why its
"ambiguous".  The pertinent parts of the grammar are shown below and I've
attached a screen grab of the syntax diagram from AntlrWorks.


start_rule
: clif_file
;

clif_file
: cltext+
;

cltext
: (OPEN CL_MODULE) => module -> ^(CLTEXT module)
| text -> ^(CLTEXT text)
;
module
: OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE -> ^(MODULE
^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
;
text
: phrase+ -> ^(TEXT phrase+)
;

phrase
: (OPEN CL_MODULE) => module -> ^(PHRASE module)
| (OPEN CL_IMPORTS) => importation -> ^(PHRASE importation)
| (OPEN CL_COMMENT) => commented_text -> ^(PHRASE commented_text)
| sentence -> ^(PHRASE sentence)
;
...

Thanks,
Cameron.
-- 
Kojeware Corporation
-------------- next part --------------
A non-text attachment was scrubbed...
Name: text_rule_ambiguity.png
Type: image/png
Size: 31724 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100408/e422b902/attachment.png 

From cliff.s.hudson at gmail.com  Thu Apr  8 17:49:59 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Thu, 8 Apr 2010 17:49:59 -0700
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
	<g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>
Message-ID: <h2g1c0448551004081749l7debadd5te977d757926bd1ad@mail.gmail.com>

I think you might just have to pop up one level to think about how to
express this - no magic needed.  The way that grammar is written, your file
is composed of one or more cltexts, which themselves may be composed either
of a module or any number of phrases (including none at all).  It seems to
me this can be re-specified to say that your file may be composed of any
combination of modules and texts, but may also be empty.  The empty file
condition should *not* be specified by the closure on phrase but rather as a
top-level rule.  For example:

start_rule
  : clif_file
  |
  ;

clif_file:
  cltext+ ;

cltext
  : module
  | text
  ;

text:
  phrase+;

This ensures that each cltext will produce at least something, and no
production from that rule will lead to the EOF condition so there will be no
confusion by ANTLR.

NOTE: I don't have ANTLR handy to test this...

On Thu, Apr 8, 2010 at 1:11 PM, Cameron Ross <cross at kojeware.com> wrote:

> Yes, this is the way I have it implemented in my production version.
>  However, I have to conform to a language specification which allows text
> to
> have zero or more phrases.  Is there some ANLTR magic that I can use to
> support this?
>
>
> On Thu, Apr 8, 2010 at 4:07 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>
> > Your text rule can be empty, you need to rejig your use of + and * or you
> > end up with the empty match in more than one place.
> >
> >
> >
> > Jim
> >
> >
> >
> > From: Cameron Ross [mailto:cross at kojeware.com]
> > Sent: Thursday, April 08, 2010 1:05 PM
> > To: Jim Idle
> > Subject: Re: [antlr-interest] OPEN, EOF ambiguity
> >
> >
> >
> > These rules give the gist of it...
> >
> >
> >
> > start_rule
> >
> >          : clif_file EOF
> >
> >          ;
> >
> >
> >
> > clif_file
> >
> >          : cltext+
> >
> >          ;
> >
> >
> >
> > cltext
> >
> >          : (OPEN CL_MODULE) => module -> ^(CLTEXT module)
> >
> >          | text -> ^(CLTEXT text)
> >
> >          ;
> >
> >
> >
> > module
> >
> >          : OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE
> ->
> > ^(MODULE ^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
> >
> >          ;
> >
> >
> >
> > text
> >
> >          : phrase* -> ^(TEXT phrase*)
> >
> >          ;
> >
> > ...
> >
> >
> >
> >
> >
> >
> >
> > On Thu, Apr 8, 2010 at 3:57 PM, Jim Idle <jimi at temporal-wave.com> wrote:
> >
> > You probably need to send the grammar rather than that graphic. It is
> > likely something more fundamental and we cannot see what you predicates
> are
> > doing from the graphic.
> >
> > Jim
> >
> >
> > > -----Original Message-----
> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > > bounces at antlr.org] On Behalf Of Cameron Ross
> > > Sent: Thursday, April 08, 2010 12:34 PM
> > > To: antlr-interest at antlr.org
> > > Subject: [antlr-interest] OPEN, EOF ambiguity
> > >
> > > Hi,
> > >
> > > I have a grammar with an ambiguity that I just can't resolve.  When I
> > > check the grammar using AntlrWorks I get the following: "Decision can
> > > match input such as "{EOF, OPEN}" using multiple alternatives: 1, 2".
> > > I've attached a screen grab of the syntax diagram generated by
> > > AntrlWorks.  I don't understand why ANLTR is thinking that EOF is
> > > ambiguous with OPEN.  I've checked the grammar and clif_file is the
> > > only rule that is not referenced from within the grammar, so I don't
> > > think that ANLTR should see module as a start rule.  Any help is much
> > > appreciated.
> > >
> > > Cameron
> >
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> >
> >
> >
> > --
> > Kojeware Corporation
> >
> >
> >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
>
>
> --
> Kojeware Corporation
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From tyler.distad at gmail.com  Thu Apr  8 18:42:54 2010
From: tyler.distad at gmail.com (Tyler Distad)
Date: Thu, 8 Apr 2010 21:42:54 -0400
Subject: [antlr-interest] Processing/traversing a rule -- dealing with
	conditionals
In-Reply-To: <0E0B60BD6BB03B4FA5F17D5C21AE4B361484B4F7BE@MSPM1BMSGM102.ent.core.medtronic.com>
References: <p2g1bb620341004080416lea0d51a5r26c3b3b78b76e772@mail.gmail.com>
	<0E0B60BD6BB03B4FA5F17D5C21AE4B361484B4F7BE@MSPM1BMSGM102.ent.core.medtronic.com>
Message-ID: <l2j1bb620341004081842r829ecc0ifa6a6b03251c4e0c@mail.gmail.com>

John,

Yes, I'm trying to deal with the conditional aspects of my grammar, but not
quite in the sense you suggest. My processor is not interpreting the
grammar, it's emitting assembly code for later compilation by gcc.

So, I want to process all of the expressions regardless of the truth value
of the conditional. In between each node of my stmtIf rule, I need to emit
assembly to account for tests, jumps, etc.

Do I have to "physically" place calls to my processor actions in between
each of the grammar nodes? I have multiple processing classes that each do
different things depending on their intent. I don't really want to create
excess methods on the root class for things that only my code generator pass
will do.

I guess my question boils back down to: Is there a way to override the
traversal of a single rule?

Tyler Distad

On Thu, Apr 8, 2010 at 11:39 AM, Farr, John <john.farr at medtronic.com> wrote:

> Tyler,
>
> It appears that you're trying to deal with the conditional aspect of your
> IF and WHILE statements in the tree grammar actions. I haven't found a way
> to do this exclusively in actions because the conditions determine which
> parts of the tree to "evaluate" and which parts to "skip over".
>
> The way I deal with this in an expression evaluator tree is something like
> the following:
>
> //-------------
>
> @header { bool booleanResult; }
>
> expression returns [Result result]
>    : ^( IF     cond=expression
>                { booleanResult = $cond.result.asBool(); }
>                ( { booleanResult }?=>
>                  s1=expression unevaluatedExpression
>                  { $result = $s1.result; }
>                | unevaluatedExpression s2=expression
>                  { $result = $s2.result; }
>                )
>       )
>    | ^( OR     op1=expression { booleanResult = $op1.result.asBool(); }
>                ( { booleanResult }?=> unevaluatedExpression { $result =
> $op1.result; }
>                | op2=expression { $result = $op2.result; }
>                )
>       )
>    | ^( AND    op1=expression
>                { booleanResult = $op1.result.asBool(); }
>                ( { !booleanResult }?=>
>                  unevaluatedExpression
>                  { $result = $op1.result; }
>                | op2=expression
>                  { $result = $op2.result; }
>                )
>       )
>    // ... other operators, literals, etc.
>    ;
>
> unevaluatedExpression
>    : ^( ( IF | OR | AND
>         | // other operators, etc.
>         ) unevaluatedExpression* )
>    | // literals, etc.
>    ;
>
> //-------------
>
> This is obviously simplified and incomplete but I hope you'll get the idea.
> There are a couple of things this approach depends on:
>
> 1. A rule, unevaluatedExpression, that is like the main expression rule,
> but contains no evaluating actions.
>
> 2. A data member of the parser class, booleanResult, used in semantic
> predicates to select which subexpressions to evaluate. It needs to be at the
> parser level (or in a scope), so that it can be seen by the code generated
> for the semantic predicate.
>
> 3. The semantic predicates that select the appropriate subexpressions.
>
> I hope this helps.
>
> --John
>
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:
> antlr-interest-bounces at antlr.org] On Behalf Of Tyler Distad
> Sent: Thursday, April 08, 2010 6:16 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Processing/traversing a rule
>
> I have a tree parser which is traversing the nodes of my AST. At points
> within the grammar, I use action blocks to call methods on my processing
> object, thus keeping large amounts of action code abstracted into a separate
> file.
>
> This has worked fine, but now I have the "if" and "while" statements
> visible
> below:
>
> stmtIf
>    : ^(STMT_IF expr trueStmts=stmt* (ELSE_KW falseStmts=stmt*)?)
>        { proc.outStmtIf($expr.start, $trueStmts.start,
> $falseStmts.start);    }
>    ;
>
> stmtWhile
>    : ^(STMT_WHILE expr stmt*)
>        { proc.outStmtWhile($expr.start, $stmt.start);    }
>    ;
>
> Obviously, this works fine for actions which take place after the entire if
> or while tree has been processed. But I want to do some processing before
> the tree is traversed, as well as some at specific points during. I could
> create more method calls in my processing object and sprinkle them
> throughout the above AST, but that feels so clunky. I'd like to be able to
> override the entire traversal of the rule at this point and do some custom
> work.
>
> So, two questions:
>  * In general, is my method of making calls to a processing object
> sane/normal/best practice?
>  * In the above cases, is there any practical method of manually processing
> an entire rule and its descendant tree?
>
> Tyler Distad
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> [CONFIDENTIALITY AND PRIVACY NOTICE]
>
> Information transmitted by this email is proprietary to Medtronic and is
> intended for use only by the individual or entity to which it is addressed,
> and may contain information that is private, privileged, confidential or
> exempt from disclosure under applicable law. If you are not the intended
> recipient or it appears that this mail has been forwarded to you without
> proper authority, you are notified that any use or dissemination of this
> information in any manner is strictly prohibited. In such cases, please
> delete this mail from your records.
>
> To view this notice in other languages you can either select the following
> link or manually copy and paste the link into the address bar of a web
> browser: http://emaildisclaimer.medtronic.com
>
>

From jbb at acm.org  Thu Apr  8 18:49:35 2010
From: jbb at acm.org (John B. Brodie)
Date: Thu, 08 Apr 2010 21:49:35 -0400
Subject: [antlr-interest] Ambiguity caused by recursion (I think)
In-Reply-To: <v2mbc2b292f1004081729pbd7fb43fg90a5bf033f9047a7@mail.gmail.com>
References: <v2mbc2b292f1004081729pbd7fb43fg90a5bf033f9047a7@mail.gmail.com>
Message-ID: <1270777775.6987.25.camel@gecko.home.org>

Greetings!

On Thu, 2010-04-08 at 20:29 -0400, Cameron Ross wrote:
> Hi,
> 
> I have a grammar that calls a rule from two different "levels".  This leads
> to an ambiguity being reported from the two different calls to the rule.
>  Oddly, the ambiguity points to the same place, so I'm not sure why its
> "ambiguous".  The pertinent parts of the grammar are shown below and I've
> attached a screen grab of the syntax diagram from AntlrWorks.
> 
> 
> start_rule
> : clif_file
> ;
> 
> clif_file
> : cltext+
> ;
> 
> cltext
> : (OPEN CL_MODULE) => module -> ^(CLTEXT module)
> | text -> ^(CLTEXT text)
> ;
> module
> : OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE -> ^(MODULE
> ^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
> ;
> text
> : phrase+ -> ^(TEXT phrase+)
> ;
> 
> phrase
> : (OPEN CL_MODULE) => module -> ^(PHRASE module)
> | (OPEN CL_IMPORTS) => importation -> ^(PHRASE importation)
> | (OPEN CL_COMMENT) => commented_text -> ^(PHRASE commented_text)
> | sentence -> ^(PHRASE sentence)
> ;
> ...

Well I found 4 issues with the above (the first 2 may be trivial, but
they really bug me.... sorry)

1) the above is INCOMPLETE! e.g. what is `importation`, what is
`exclusion_set` and so on... (i will try to blunder forward anyway)

2) the syntactic predicates are useless! AFAIK ANTLR's LL(*) algorithm
can deal with disambiguating left prefixes that consist of a finite set
of tokens (like what we have here in your example). ANTLR has issues
when a left prefix is infinite (either via left-recursion or via a
looping construct *,+).

and now to the "meat" of your problem (i hope)

3) a `cltext` is permitted to be either a `module` or a `text`. further
a `text` may be a list of `phrase`s and a `phrase` may be a `module` or
other things. so `cltext` is ambiguous. given an input consisting of the
token sequence OPEN CL_MODULE, we do know how to parse. it is either

cltext -> module

or it is 

cltext -> text -> phrase -> module

you need to make a choice here. probably just remove `module` from the
`cltext` rule.

4) and now a deeper ambiguity: a `clfile` is a list of `cltext` and
`cltext` is just a `text` (since, i assume, we have removed the `module`
alternative) and `text` is a list of `phrase`.

now suppose our input consists of three `sentence`s --- let me refer to
a sentence as the string "s_i". so we have the input (3 sentences):

"s_1" "s_2" "s_3" 

now how is this to be parsed?

is it as

clfile -> cltext -> text -> (phrase[s_1], 
                             phrase[s_2], 
                             phrase[s_3])

or is it

clfile -> (cltext -> text -> phrase[s_1]), 
          (cltext -> text -> phrase[s_2]), 
          (cltext -> text -> phrase[s_3])

or is it

clfile -> (cltext -> text -> phrase[s_1]), 
          (cltext -> text -> (phrase[s_2],phrase[s_3]))

or what is it supposed to be?





hope this helps...
   -jbb




 


From dietmar-s at online.de  Fri Apr  9 01:56:07 2010
From: dietmar-s at online.de (Dietmar Schaefer)
Date: Fri, 09 Apr 2010 10:56:07 +0200
Subject: [antlr-interest] need some advice
Message-ID: <4BBEEBA7.8030504@online.de>

Hi !


I just cannot figure out what is wrong with my grammar.

Here it is:


grammar Test;

scenario    :
    statement;


statement    :
        sequenceStatement   ;



sequenceStatement
    : 'DefSequence' ID WHITESPACE* '{' VALUE '}' ';'? '\n'? ;




ID           : LETTER (LETTER | DIGIT | '_' )* ;

fragment DIGIT : '0'..'9';

fragment LETTER : 'a'..'z' | 'A'..'Z';


WHITESPACE   : ( '\t' | ' ' | '\n'|'\r')+ {$channel = HIDDEN;} ;


VALUE
   : ('\u0041'|'\u0042'|'\u0043') DIGIT DIGIT DIGIT DIGIT | ('-')* 
{System.out.println("VALUE detected: ");};

---------------------------------------------------------

I cut my original grammar  down to the bare minimum.



DefSequence L { -- }   works

DefSequence L { A1200}  gives me MismatchedTokenException: line 1:16 
mismatched input 'A1200' expecting '\u0006'



Do I have to mention, that I am new to ANTLR ?  I don't think so !



regards



Dietmar



From dietmar-s at online.de  Fri Apr  9 02:37:48 2010
From: dietmar-s at online.de (Dietmar Schaefer)
Date: Fri, 09 Apr 2010 11:37:48 +0200
Subject: [antlr-interest] need some advice
In-Reply-To: <C7E4B9AB.10A5%christian.mayer@bsse.ethz.ch>
References: <C7E4B9AB.10A5%christian.mayer@bsse.ethz.ch>
Message-ID: <4BBEF56C.80008@online.de>

On 04/09/2010 12:02 PM, Christian Mayer wrote:
> Hi,
>
> If you send whitespaces to the hidden channel (in the lexer rules = upper
> case) you don't have to care about them in the parser rules (=lower case).
>
> Try something like:
>
> SequenceStatement : 'DefSequence' ID '{' VALUE '}' ';'? ;
>
> Cheers,
> Chris
>
>
>
> On 4/9/10 9:56 AM, "Dietmar Schaefer"<dietmar-s at online.de>  wrote:
>
>    
Hi Chris !

Right  - but it didn't solve the problem :-(


any more advices ?


regards


Dietmar


From dietmar-s at online.de  Fri Apr  9 02:49:44 2010
From: dietmar-s at online.de (Dietmar Schaefer)
Date: Fri, 09 Apr 2010 11:49:44 +0200
Subject: [antlr-interest] need some advice
In-Reply-To: <C7E4C2A7.10A7%christian.mayer@bsse.ethz.ch>
References: <C7E4C2A7.10A7%christian.mayer@bsse.ethz.ch>
Message-ID: <4BBEF838.1060504@online.de>

On 04/09/2010 12:40 PM, Christian Mayer wrote:
> Same error message?
>
>
>    
Not quite

DefSequence L { A1200}  gives me MismatchedTokenException: line 1:16
mismatched input 'A1200' expecting '\u0005'

                                                           ^
was before:

DefSequence L { A1200}  gives me MismatchedTokenException: line 1:16
mismatched input 'A1200' expecting '\u0006'


I don't think that is worth to mention ?


Thanks for you help !


regards


Dietmar

From bkiers at gmail.com  Fri Apr  9 02:50:23 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Fri, 9 Apr 2010 11:50:23 +0200
Subject: [antlr-interest] need some advice
In-Reply-To: <4BBEEBA7.8030504@online.de>
References: <4BBEEBA7.8030504@online.de>
Message-ID: <t2zaf443a971004090250pb68dd60cr8ac0874c741a240d@mail.gmail.com>

On Fri, Apr 9, 2010 at 10:56 AM, Dietmar Schaefer <dietmar-s at online.de>wrote:

> ...
> DefSequence L { -- }   works
>
> DefSequence L { A1200}  gives me MismatchedTokenException: line 1:16
> mismatched input 'A1200' expecting '\u0006'
>

When stumbling upon the 'A' from 'A1200', the lexer tries to complete an
ID-rule. Try moving the VALUE-rule before the ID-rule:

grammar Test;

scenario
  :  statement
  ;


statement
  :  sequenceStatement
  ;

sequenceStatement
   :  'DefSequence' ID '{' VALUE '}' ';'?
   ;

VALUE
  :  ('A' | 'B' | 'C') DIGIT DIGIT DIGIT DIGIT
  |  ('-')*
  ;

ID
  :  LETTER (LETTER | DIGIT | '_')*
  ;

fragment
DIGIT
  :  '0'..'9'
  ;

fragment
LETTER
  :  'a'..'z' | 'A'..'Z'
  ;

WHITESPACE
  :  ('\t' | ' ' | '\n' | '\r')+ {$channel = HIDDEN;}
  ;

But note that your ID's can then not start with 'A', 'B' or 'C'! If you want
that, look into semantic predicates:
http://www.antlr.org/doc/glossary.html#Predicate,_semantic

Regards,

Bart.

From dietmar-s at online.de  Fri Apr  9 04:23:45 2010
From: dietmar-s at online.de (Dietmar Schaefer)
Date: Fri, 09 Apr 2010 13:23:45 +0200
Subject: [antlr-interest] need some advice
In-Reply-To: <t2zaf443a971004090250pb68dd60cr8ac0874c741a240d@mail.gmail.com>
References: <4BBEEBA7.8030504@online.de>
	<t2zaf443a971004090250pb68dd60cr8ac0874c741a240d@mail.gmail.com>
Message-ID: <4BBF0E41.8090008@online.de>

On 04/09/2010 11:50 AM, Bart Kiers wrote:
> On Fri, Apr 9, 2010 at 10:56 AM, Dietmar Schaefer<dietmar-s at online.de>wrote:
>
>    

Well - that  explains everything.

I moved - at a first solution - the VALUE rule before the ID rule - it 
works.



Thank you and Chris for your help.


regards


Dietmar
> When stumbling upon the 'A' from 'A1200', the lexer tries to complete an
> ID-rule. Try moving the VALUE-rule before the ID-rule:
>
> grammar Test;
>
> scenario
>    :  statement
>    ;
>
>
> statement
>    :  sequenceStatement
>    ;
>
> sequenceStatement
>     :  'DefSequence' ID '{' VALUE '}' ';'?
>     ;
>
> VALUE
>    :  ('A' | 'B' | 'C') DIGIT DIGIT DIGIT DIGIT
>    |  ('-')*
>    ;
>
> ID
>    :  LETTER (LETTER | DIGIT | '_')*
>    ;
>
> fragment
> DIGIT
>    :  '0'..'9'
>    ;
>
> fragment
> LETTER
>    :  'a'..'z' | 'A'..'Z'
>    ;
>
> WHITESPACE
>    :  ('\t' | ' ' | '\n' | '\r')+ {$channel = HIDDEN;}
>    ;
>
> But note that your ID's can then not start with 'A', 'B' or 'C'! If you want
> that, look into semantic predicates:
> http://www.antlr.org/doc/glossary.html#Predicate,_semantic
>
> Regards,
>
> Bart.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>    


From cross at kojeware.com  Fri Apr  9 05:03:39 2010
From: cross at kojeware.com (Cameron Ross)
Date: Fri, 9 Apr 2010 08:03:39 -0400
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <h2g1c0448551004081749l7debadd5te977d757926bd1ad@mail.gmail.com>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
	<g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>
	<h2g1c0448551004081749l7debadd5te977d757926bd1ad@mail.gmail.com>
Message-ID: <q2wbc2b292f1004090503v52e77b63u85700771ae3d8282@mail.gmail.com>

Hi Cliff,

What you've suggested is how I have the production version of the grammar
implemented now.  However, the language spec that I must conform to
specifically states that a text can have zero or more phrases (which is the
crux of the problem).  I can leave my implementation the way it is and try
to have the spec changed, but it would be a heck of a lot easier to just
implement to the current spec.

Thanks for the help,
Cameron.

On Thu, Apr 8, 2010 at 8:49 PM, Cliff Hudson <cliff.s.hudson at gmail.com>wrote:

> I think you might just have to pop up one level to think about how to
> express this - no magic needed.  The way that grammar is written, your file
> is composed of one or more cltexts, which themselves may be composed either
> of a module or any number of phrases (including none at all).  It seems to
> me this can be re-specified to say that your file may be composed of any
> combination of modules and texts, but may also be empty.  The empty file
> condition should *not* be specified by the closure on phrase but rather as a
> top-level rule.  For example:
>
> start_rule
>   : clif_file
>   |
>   ;
>
> clif_file:
>   cltext+ ;
>
> cltext
>   : module
>   | text
>   ;
>
> text:
>   phrase+;
>
> This ensures that each cltext will produce at least something, and no
> production from that rule will lead to the EOF condition so there will be no
> confusion by ANTLR.
>
> NOTE: I don't have ANTLR handy to test this...
>
>
> On Thu, Apr 8, 2010 at 1:11 PM, Cameron Ross <cross at kojeware.com> wrote:
>
>> Yes, this is the way I have it implemented in my production version.
>>  However, I have to conform to a language specification which allows text
>> to
>> have zero or more phrases.  Is there some ANLTR magic that I can use to
>> support this?
>>
>>
>> On Thu, Apr 8, 2010 at 4:07 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>>
>> > Your text rule can be empty, you need to rejig your use of + and * or
>> you
>> > end up with the empty match in more than one place.
>> >
>> >
>> >
>> > Jim
>> >
>> >
>> >
>> > From: Cameron Ross [mailto:cross at kojeware.com]
>> > Sent: Thursday, April 08, 2010 1:05 PM
>> > To: Jim Idle
>> > Subject: Re: [antlr-interest] OPEN, EOF ambiguity
>> >
>> >
>> >
>> > These rules give the gist of it...
>> >
>> >
>> >
>> > start_rule
>> >
>> >          : clif_file EOF
>> >
>> >          ;
>> >
>> >
>> >
>> > clif_file
>> >
>> >          : cltext+
>> >
>> >          ;
>> >
>> >
>> >
>> > cltext
>> >
>> >          : (OPEN CL_MODULE) => module -> ^(CLTEXT module)
>> >
>> >          | text -> ^(CLTEXT text)
>> >
>> >          ;
>> >
>> >
>> >
>> > module
>> >
>> >          : OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE
>> ->
>> > ^(MODULE ^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
>> >
>> >          ;
>> >
>> >
>> >
>> > text
>> >
>> >          : phrase* -> ^(TEXT phrase*)
>> >
>> >          ;
>> >
>> > ...
>> >
>> >
>> >
>> >
>> >
>> >
>> >
>> > On Thu, Apr 8, 2010 at 3:57 PM, Jim Idle <jimi at temporal-wave.com>
>> wrote:
>> >
>> > You probably need to send the grammar rather than that graphic. It is
>> > likely something more fundamental and we cannot see what you predicates
>> are
>> > doing from the graphic.
>> >
>> > Jim
>> >
>> >
>> > > -----Original Message-----
>> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> > > bounces at antlr.org] On Behalf Of Cameron Ross
>> > > Sent: Thursday, April 08, 2010 12:34 PM
>> > > To: antlr-interest at antlr.org
>> > > Subject: [antlr-interest] OPEN, EOF ambiguity
>> > >
>> > > Hi,
>> > >
>> > > I have a grammar with an ambiguity that I just can't resolve.  When I
>> > > check the grammar using AntlrWorks I get the following: "Decision can
>> > > match input such as "{EOF, OPEN}" using multiple alternatives: 1, 2".
>> > > I've attached a screen grab of the syntax diagram generated by
>> > > AntrlWorks.  I don't understand why ANLTR is thinking that EOF is
>> > > ambiguous with OPEN.  I've checked the grammar and clif_file is the
>> > > only rule that is not referenced from within the grammar, so I don't
>> > > think that ANLTR should see module as a start rule.  Any help is much
>> > > appreciated.
>> > >
>> > > Cameron
>> >
>> >
>> >
>> >
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>> >
>> >
>> >
>> > --
>> > Kojeware Corporation
>> >
>> >
>> >
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>>
>>
>>
>> --
>> Kojeware Corporation
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>


-- 
Kojeware Corporation

From jcottam at umail.iu.edu  Fri Apr  9 06:38:32 2010
From: jcottam at umail.iu.edu (Joseph Cottam)
Date: Fri, 9 Apr 2010 09:38:32 -0400
Subject: [antlr-interest] Tree filter/rewrite wildcards
Message-ID: <x2xa01429f41004090638ob5f176b4gce0c92fbdc6e8392@mail.gmail.com>

*Using rest* is closer, but still not what I need (and seems to behave
oddly as well).
The rest* inserts only the last item matched.

topdown: ^(f=FUNCTION rest=.*) -> ^(FUNCTION NEW_NODE $rest*);*
Tree: ^(FUNCTION OLD1 OLD2 OLD3 OLD4)
Yields: ^(FUNCTION NEW_NODE OLD4)

-JC

> Did you try:
>
> -> ^(FUNCTION NEW_NODE $rest*);
>                           ^
>
> Jim
>
>* -----Original Message-----*
>>* From: antlr-interest-bounces at antlr.org <http://www.antlr.org/mailman/listinfo/antlr-interest> [mailto:antlr-interest-*
>>* bounces at antlr.org <http://www.antlr.org/mailman/listinfo/antlr-interest>] On Behalf Of Joseph Cottam*
>>* Sent: Wednesday, April 07, 2010 11:19 AM
*>>* To: antlr-interest at antlr.org
<http://www.antlr.org/mailman/listinfo/antlr-interest>
*>>* Subject: [antlr-interest] Tree filter/rewrite wildcards
*>>*
*>>* Using V3.2...
*>>*
*>>* With grammar options:
*>>*   filter = true;
*>>*   output = AST;
*>>*
*>>* topdown: ^(f=FUNCTION rest=.*) -> ^(FUNCTION NEW_NODE $rest);
*>>*
*>>* Yields: ^(FUNCTION NEW_NODE)
*>>*
*>>* Regardless of the contents matched in $rest.  Put another way, it seems
*>>* to** match, but not output things caught up in a wildcard.
*>>*
*>>* Is that the defined behavior?
*>>*
*>>* How can I match number of anythings in tree
*>>*
*>>* I have also tried:
*>>*    rest+=.* (no change to behavior)
*>>*    Rule called 'rest' with just a .* in it (does not compile, tries to
*>>*      catch* *an exception that can't ever be thrown).
*>>*
*>>*
*>>* -Joseph Cottam
*

From cliff.s.hudson at gmail.com  Fri Apr  9 10:02:14 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 9 Apr 2010 10:02:14 -0700
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <q2wbc2b292f1004090503v52e77b63u85700771ae3d8282@mail.gmail.com>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
	<g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>
	<h2g1c0448551004081749l7debadd5te977d757926bd1ad@mail.gmail.com>
	<q2wbc2b292f1004090503v52e77b63u85700771ae3d8282@mail.gmail.com>
Message-ID: <l2w1c0448551004091002md67e915ci89260ac6515f00e3@mail.gmail.com>

Well, it's not always true that grammar specs are, for instance, LALR(1) or
LL(k).  In such cases, you have to rejigger the grammar to make it work.
 The important thing is (or should be) that the grammar you do produce,
regardless of the technicalities, will parse what you intend and nothing
more.

On Fri, Apr 9, 2010 at 5:03 AM, Cameron Ross <cross at kojeware.com> wrote:

> Hi Cliff,
>
> What you've suggested is how I have the production version of the grammar
> implemented now.  However, the language spec that I must conform to
> specifically states that a text can have zero or more phrases (which is the
> crux of the problem).  I can leave my implementation the way it is and try
> to have the spec changed, but it would be a heck of a lot easier to just
> implement to the current spec.
>
> Thanks for the help,
> Cameron.
>
> On Thu, Apr 8, 2010 at 8:49 PM, Cliff Hudson <cliff.s.hudson at gmail.com>wrote:
>
>> I think you might just have to pop up one level to think about how to
>> express this - no magic needed.  The way that grammar is written, your file
>> is composed of one or more cltexts, which themselves may be composed either
>> of a module or any number of phrases (including none at all).  It seems to
>> me this can be re-specified to say that your file may be composed of any
>> combination of modules and texts, but may also be empty.  The empty file
>> condition should *not* be specified by the closure on phrase but rather as a
>> top-level rule.  For example:
>>
>> start_rule
>>   : clif_file
>>   |
>>   ;
>>
>> clif_file:
>>   cltext+ ;
>>
>> cltext
>>   : module
>>   | text
>>   ;
>>
>> text:
>>   phrase+;
>>
>> This ensures that each cltext will produce at least something, and no
>> production from that rule will lead to the EOF condition so there will be no
>> confusion by ANTLR.
>>
>> NOTE: I don't have ANTLR handy to test this...
>>
>>
>> On Thu, Apr 8, 2010 at 1:11 PM, Cameron Ross <cross at kojeware.com> wrote:
>>
>>> Yes, this is the way I have it implemented in my production version.
>>>  However, I have to conform to a language specification which allows text
>>> to
>>> have zero or more phrases.  Is there some ANLTR magic that I can use to
>>> support this?
>>>
>>>
>>> On Thu, Apr 8, 2010 at 4:07 PM, Jim Idle <jimi at temporal-wave.com> wrote:
>>>
>>> > Your text rule can be empty, you need to rejig your use of + and * or
>>> you
>>> > end up with the empty match in more than one place.
>>> >
>>> >
>>> >
>>> > Jim
>>> >
>>> >
>>> >
>>> > From: Cameron Ross [mailto:cross at kojeware.com]
>>> > Sent: Thursday, April 08, 2010 1:05 PM
>>> > To: Jim Idle
>>> > Subject: Re: [antlr-interest] OPEN, EOF ambiguity
>>> >
>>> >
>>> >
>>> > These rules give the gist of it...
>>> >
>>> >
>>> >
>>> > start_rule
>>> >
>>> >          : clif_file EOF
>>> >
>>> >          ;
>>> >
>>> >
>>> >
>>> > clif_file
>>> >
>>> >          : cltext+
>>> >
>>> >          ;
>>> >
>>> >
>>> >
>>> > cltext
>>> >
>>> >          : (OPEN CL_MODULE) => module -> ^(CLTEXT module)
>>> >
>>> >          | text -> ^(CLTEXT text)
>>> >
>>> >          ;
>>> >
>>> >
>>> >
>>> > module
>>> >
>>> >          : OPEN CL_MODULE interpretablename exclusion_set? cltext CLOSE
>>> ->
>>> > ^(MODULE ^(MODULE_IDENTIFIER interpretablename) exclusion_set? cltext)
>>> >
>>> >          ;
>>> >
>>> >
>>> >
>>> > text
>>> >
>>> >          : phrase* -> ^(TEXT phrase*)
>>> >
>>> >          ;
>>> >
>>> > ...
>>> >
>>> >
>>> >
>>> >
>>> >
>>> >
>>> >
>>> > On Thu, Apr 8, 2010 at 3:57 PM, Jim Idle <jimi at temporal-wave.com>
>>> wrote:
>>> >
>>> > You probably need to send the grammar rather than that graphic. It is
>>> > likely something more fundamental and we cannot see what you predicates
>>> are
>>> > doing from the graphic.
>>> >
>>> > Jim
>>> >
>>> >
>>> > > -----Original Message-----
>>> > > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>>> > > bounces at antlr.org] On Behalf Of Cameron Ross
>>> > > Sent: Thursday, April 08, 2010 12:34 PM
>>> > > To: antlr-interest at antlr.org
>>> > > Subject: [antlr-interest] OPEN, EOF ambiguity
>>> > >
>>> > > Hi,
>>> > >
>>> > > I have a grammar with an ambiguity that I just can't resolve.  When I
>>> > > check the grammar using AntlrWorks I get the following: "Decision can
>>> > > match input such as "{EOF, OPEN}" using multiple alternatives: 1, 2".
>>> > > I've attached a screen grab of the syntax diagram generated by
>>> > > AntrlWorks.  I don't understand why ANLTR is thinking that EOF is
>>> > > ambiguous with OPEN.  I've checked the grammar and clif_file is the
>>> > > only rule that is not referenced from within the grammar, so I don't
>>> > > think that ANLTR should see module as a start rule.  Any help is much
>>> > > appreciated.
>>> > >
>>> > > Cameron
>>> >
>>> >
>>> >
>>> >
>>> >
>>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> > Unsubscribe:
>>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> >
>>> >
>>> >
>>> >
>>> > --
>>> > Kojeware Corporation
>>> >
>>> >
>>> >
>>> >
>>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> > Unsubscribe:
>>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>> >
>>>
>>>
>>>
>>> --
>>> Kojeware Corporation
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>
>
> --
> Kojeware Corporation
>

From williamvdoorn at gmail.com  Fri Apr  9 11:44:45 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Fri, 9 Apr 2010 20:44:45 +0200
Subject: [antlr-interest] Building own interpreter
Message-ID: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>

Hello all,

I've been reading the The definitive ANTLR book and I've made my own small
language using the AST strcuture.

Now I was wondering, is it hard to make my own compiler/interpeter for this?
I can feed files and such to it, but how would I make my own
interpreter/compiler?

Thanks,

William van Doorn

From stefika at gmail.com  Fri Apr  9 11:56:27 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Fri, 9 Apr 2010 13:56:27 -0500
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
References: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
Message-ID: <t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>

William,

This is a complex question to answer, and it really depends on your
needs. For example, creating a whole compiler from scratch is
difficult, but possible. We have our own compiler (with an ANTLR front
end), that integrates our own custom language, called HOP, which is
basically a novice programming language we distribute to schools for
the blind. Our implementation is on sourceforge and is under GPL2, so
you are welcome to look at it (Search for "Sodbeans"). We also
integrate our custom compiler into NetBeans.

On the other hand, if your needs allow it, you can also do things like
have your antlr grammar generate java byte code or assembly directly,
which is sometimes easier, again depending on what you need. And very
simple interpreters for very simple languages aren't too tough, if you
know what you are doing, and depending on your requirements.

Hope that gives you some tips, at least. Short answer: Yes, it's
definitely possible, but it depends on your goals, and it's typically
not something you would bang out in a weekend.

Andreas Stefik, Ph.D.
Department of Computer Science
Southern Illinois University Edwardsville

On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn <williamvdoorn at gmail.com> wrote:
> Hello all,
>
> I've been reading the The definitive ANTLR book and I've made my own small
> language using the AST strcuture.
>
> Now I was wondering, is it hard to make my own compiler/interpeter for this?
> I can feed files and such to it, but how would I make my own
> interpreter/compiler?
>
> Thanks,
>
> William van Doorn
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From williamvdoorn at gmail.com  Fri Apr  9 11:59:48 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Fri, 9 Apr 2010 20:59:48 +0200
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>
References: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
	<t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>
Message-ID: <m2w6eb53c7e1004091159j51a82e7et8b63402958fccdde@mail.gmail.com>

Andreas,

Well, I can already execute some code and evaluate it, but is this really
the way to do it? e.g. could I use this as interpreter, or do I need a fully
different approach? (see the file I attached)

Thanks

William van Doorn



2010/4/9 Andreas Stefik <stefika at gmail.com>

> William,
>
> This is a complex question to answer, and it really depends on your
> needs. For example, creating a whole compiler from scratch is
> difficult, but possible. We have our own compiler (with an ANTLR front
> end), that integrates our own custom language, called HOP, which is
> basically a novice programming language we distribute to schools for
> the blind. Our implementation is on sourceforge and is under GPL2, so
> you are welcome to look at it (Search for "Sodbeans"). We also
> integrate our custom compiler into NetBeans.
>
> On the other hand, if your needs allow it, you can also do things like
> have your antlr grammar generate java byte code or assembly directly,
> which is sometimes easier, again depending on what you need. And very
> simple interpreters for very simple languages aren't too tough, if you
> know what you are doing, and depending on your requirements.
>
> Hope that gives you some tips, at least. Short answer: Yes, it's
> definitely possible, but it depends on your goals, and it's typically
> not something you would bang out in a weekend.
>
> Andreas Stefik, Ph.D.
> Department of Computer Science
> Southern Illinois University Edwardsville
>
> On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn <williamvdoorn at gmail.com>
> wrote:
> > Hello all,
> >
> > I've been reading the The definitive ANTLR book and I've made my own
> small
> > language using the AST strcuture.
> >
> > Now I was wondering, is it hard to make my own compiler/interpeter for
> this?
> > I can feed files and such to it, but how would I make my own
> > interpreter/compiler?
> >
> > Thanks,
> >
> > William van Doorn
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>

From stefika at gmail.com  Fri Apr  9 12:09:51 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Fri, 9 Apr 2010 14:09:51 -0500
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <m2w6eb53c7e1004091159j51a82e7et8b63402958fccdde@mail.gmail.com>
References: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
	<t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>
	<m2w6eb53c7e1004091159j51a82e7et8b63402958fccdde@mail.gmail.com>
Message-ID: <r2v1332b72e1004091209n6e6599dfn2f6720445c47eec4@mail.gmail.com>

That's hard to answer without knowing context. Compilers are tricky
things. For example, you might make a simple evaluator that will
inevitably run very slowly, but do the job you need. Or, you might
make something that generates code that ultimately be compiled into
very fast C code to be compiled by a GCC compiler --- or who knows
what.

That's why I'm saying it depends on context. What problem are you
trying to solve with your DSL?

Stefik

On Fri, Apr 9, 2010 at 1:59 PM, William v Doorn <williamvdoorn at gmail.com> wrote:
> Andreas,
>
> Well, I can already execute some code and evaluate it, but is this really
> the way to do it? e.g. could I use this as interpreter, or do I need a fully
> different approach? (see the file I attached)
>
> Thanks
>
> William van Doorn
>
>
>
> 2010/4/9 Andreas Stefik <stefika at gmail.com>
>>
>> William,
>>
>> This is a complex question to answer, and it really depends on your
>> needs. For example, creating a whole compiler from scratch is
>> difficult, but possible. We have our own compiler (with an ANTLR front
>> end), that integrates our own custom language, called HOP, which is
>> basically a novice programming language we distribute to schools for
>> the blind. Our implementation is on sourceforge and is under GPL2, so
>> you are welcome to look at it (Search for "Sodbeans"). We also
>> integrate our custom compiler into NetBeans.
>>
>> On the other hand, if your needs allow it, you can also do things like
>> have your antlr grammar generate java byte code or assembly directly,
>> which is sometimes easier, again depending on what you need. And very
>> simple interpreters for very simple languages aren't too tough, if you
>> know what you are doing, and depending on your requirements.
>>
>> Hope that gives you some tips, at least. Short answer: Yes, it's
>> definitely possible, but it depends on your goals, and it's typically
>> not something you would bang out in a weekend.
>>
>> Andreas Stefik, Ph.D.
>> Department of Computer Science
>> Southern Illinois University Edwardsville
>>
>> On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn <williamvdoorn at gmail.com>
>> wrote:
>> > Hello all,
>> >
>> > I've been reading the The definitive ANTLR book and I've made my own
>> > small
>> > language using the AST strcuture.
>> >
>> > Now I was wondering, is it hard to make my own compiler/interpeter for
>> > this?
>> > I can feed files and such to it, but how would I make my own
>> > interpreter/compiler?
>> >
>> > Thanks,
>> >
>> > William van Doorn
>> >
>> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> > Unsubscribe:
>> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >
>
>

From cliff.s.hudson at gmail.com  Fri Apr  9 12:13:33 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Fri, 9 Apr 2010 12:13:33 -0700
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <r2v1332b72e1004091209n6e6599dfn2f6720445c47eec4@mail.gmail.com>
References: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
	<t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>
	<m2w6eb53c7e1004091159j51a82e7et8b63402958fccdde@mail.gmail.com>
	<r2v1332b72e1004091209n6e6599dfn2f6720445c47eec4@mail.gmail.com>
Message-ID: <i2m1c0448551004091213t84aa4673la3ae3eda2234c07c@mail.gmail.com>

If you decide to go the compiled route, also consider just writing a
translator from your language to a compiled one, such as C or C++.  Then you
don't have to implement a compiler at all which will save you a ton of time.


On Fri, Apr 9, 2010 at 12:09 PM, Andreas Stefik <stefika at gmail.com> wrote:

> That's hard to answer without knowing context. Compilers are tricky
> things. For example, you might make a simple evaluator that will
> inevitably run very slowly, but do the job you need. Or, you might
> make something that generates code that ultimately be compiled into
> very fast C code to be compiled by a GCC compiler --- or who knows
> what.
>
> That's why I'm saying it depends on context. What problem are you
> trying to solve with your DSL?
>
> Stefik
>
> On Fri, Apr 9, 2010 at 1:59 PM, William v Doorn <williamvdoorn at gmail.com>
> wrote:
> > Andreas,
> >
> > Well, I can already execute some code and evaluate it, but is this really
> > the way to do it? e.g. could I use this as interpreter, or do I need a
> fully
> > different approach? (see the file I attached)
> >
> > Thanks
> >
> > William van Doorn
> >
> >
> >
> > 2010/4/9 Andreas Stefik <stefika at gmail.com>
> >>
> >> William,
> >>
> >> This is a complex question to answer, and it really depends on your
> >> needs. For example, creating a whole compiler from scratch is
> >> difficult, but possible. We have our own compiler (with an ANTLR front
> >> end), that integrates our own custom language, called HOP, which is
> >> basically a novice programming language we distribute to schools for
> >> the blind. Our implementation is on sourceforge and is under GPL2, so
> >> you are welcome to look at it (Search for "Sodbeans"). We also
> >> integrate our custom compiler into NetBeans.
> >>
> >> On the other hand, if your needs allow it, you can also do things like
> >> have your antlr grammar generate java byte code or assembly directly,
> >> which is sometimes easier, again depending on what you need. And very
> >> simple interpreters for very simple languages aren't too tough, if you
> >> know what you are doing, and depending on your requirements.
> >>
> >> Hope that gives you some tips, at least. Short answer: Yes, it's
> >> definitely possible, but it depends on your goals, and it's typically
> >> not something you would bang out in a weekend.
> >>
> >> Andreas Stefik, Ph.D.
> >> Department of Computer Science
> >> Southern Illinois University Edwardsville
> >>
> >> On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn <
> williamvdoorn at gmail.com>
> >> wrote:
> >> > Hello all,
> >> >
> >> > I've been reading the The definitive ANTLR book and I've made my own
> >> > small
> >> > language using the AST strcuture.
> >> >
> >> > Now I was wondering, is it hard to make my own compiler/interpeter for
> >> > this?
> >> > I can feed files and such to it, but how would I make my own
> >> > interpreter/compiler?
> >> >
> >> > Thanks,
> >> >
> >> > William van Doorn
> >> >
> >> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> > Unsubscribe:
> >> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >> >
> >
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From williamvdoorn at gmail.com  Fri Apr  9 12:16:23 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Fri, 9 Apr 2010 21:16:23 +0200
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <r2v1332b72e1004091209n6e6599dfn2f6720445c47eec4@mail.gmail.com>
References: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
	<t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>
	<m2w6eb53c7e1004091159j51a82e7et8b63402958fccdde@mail.gmail.com>
	<r2v1332b72e1004091209n6e6599dfn2f6720445c47eec4@mail.gmail.com>
Message-ID: <l2l6eb53c7e1004091216la1f50d67ta55a82429cde7d9@mail.gmail.com>

I'm basically looking for one of the following approaches:

1] Compile files into code which can be executed by my compiler or some
other existing compiler

2] Create an interpreter which can eval code from the user, or execute the
file directly (that's what I got now, java Test < input.txt)

2010/4/9 Andreas Stefik <stefika at gmail.com>

> That's hard to answer without knowing context. Compilers are tricky
> things. For example, you might make a simple evaluator that will
> inevitably run very slowly, but do the job you need. Or, you might
> make something that generates code that ultimately be compiled into
> very fast C code to be compiled by a GCC compiler --- or who knows
> what.
>
> That's why I'm saying it depends on context. What problem are you
> trying to solve with your DSL?
>
> Stefik
>
> On Fri, Apr 9, 2010 at 1:59 PM, William v Doorn <williamvdoorn at gmail.com>
> wrote:
> > Andreas,
> >
> > Well, I can already execute some code and evaluate it, but is this really
> > the way to do it? e.g. could I use this as interpreter, or do I need a
> fully
> > different approach? (see the file I attached)
> >
> > Thanks
> >
> > William van Doorn
> >
> >
> >
> > 2010/4/9 Andreas Stefik <stefika at gmail.com>
> >>
> >> William,
> >>
> >> This is a complex question to answer, and it really depends on your
> >> needs. For example, creating a whole compiler from scratch is
> >> difficult, but possible. We have our own compiler (with an ANTLR front
> >> end), that integrates our own custom language, called HOP, which is
> >> basically a novice programming language we distribute to schools for
> >> the blind. Our implementation is on sourceforge and is under GPL2, so
> >> you are welcome to look at it (Search for "Sodbeans"). We also
> >> integrate our custom compiler into NetBeans.
> >>
> >> On the other hand, if your needs allow it, you can also do things like
> >> have your antlr grammar generate java byte code or assembly directly,
> >> which is sometimes easier, again depending on what you need. And very
> >> simple interpreters for very simple languages aren't too tough, if you
> >> know what you are doing, and depending on your requirements.
> >>
> >> Hope that gives you some tips, at least. Short answer: Yes, it's
> >> definitely possible, but it depends on your goals, and it's typically
> >> not something you would bang out in a weekend.
> >>
> >> Andreas Stefik, Ph.D.
> >> Department of Computer Science
> >> Southern Illinois University Edwardsville
> >>
> >> On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn <
> williamvdoorn at gmail.com>
> >> wrote:
> >> > Hello all,
> >> >
> >> > I've been reading the The definitive ANTLR book and I've made my own
> >> > small
> >> > language using the AST strcuture.
> >> >
> >> > Now I was wondering, is it hard to make my own compiler/interpeter for
> >> > this?
> >> > I can feed files and such to it, but how would I make my own
> >> > interpreter/compiler?
> >> >
> >> > Thanks,
> >> >
> >> > William van Doorn
> >> >
> >> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> > Unsubscribe:
> >> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >> >
> >
> >
>

From stefika at gmail.com  Fri Apr  9 12:18:51 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Fri, 9 Apr 2010 14:18:51 -0500
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <i2m1c0448551004091213t84aa4673la3ae3eda2234c07c@mail.gmail.com>
References: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
	<t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>
	<m2w6eb53c7e1004091159j51a82e7et8b63402958fccdde@mail.gmail.com>
	<r2v1332b72e1004091209n6e6599dfn2f6720445c47eec4@mail.gmail.com>
	<i2m1c0448551004091213t84aa4673la3ae3eda2234c07c@mail.gmail.com>
Message-ID: <x2s1332b72e1004091218u96bbda69ye03feaa81b2dc4eb@mail.gmail.com>

If it doesn't matter for your particular application at all, then
cliff's suggestion is probably best. Just emit out code that can be
read by a traditional compiler (e.g., gcc). Only design a full
evaluator/interpreter if your application (whatever it is), demands
it.

Stefik

On Fri, Apr 9, 2010 at 2:13 PM, Cliff Hudson <cliff.s.hudson at gmail.com> wrote:
> If you decide to go the compiled route, also consider just writing a
> translator from your language to a compiled one, such as C or C++. ?Then you
> don't have to implement a compiler at all which will save you a ton of time.
>
>
> On Fri, Apr 9, 2010 at 12:09 PM, Andreas Stefik <stefika at gmail.com> wrote:
>>
>> That's hard to answer without knowing context. Compilers are tricky
>> things. For example, you might make a simple evaluator that will
>> inevitably run very slowly, but do the job you need. Or, you might
>> make something that generates code that ultimately be compiled into
>> very fast C code to be compiled by a GCC compiler --- or who knows
>> what.
>>
>> That's why I'm saying it depends on context. What problem are you
>> trying to solve with your DSL?
>>
>> Stefik
>>
>> On Fri, Apr 9, 2010 at 1:59 PM, William v Doorn <williamvdoorn at gmail.com>
>> wrote:
>> > Andreas,
>> >
>> > Well, I can already execute some code and evaluate it, but is this
>> > really
>> > the way to do it? e.g. could I use this as interpreter, or do I need a
>> > fully
>> > different approach? (see the file I attached)
>> >
>> > Thanks
>> >
>> > William van Doorn
>> >
>> >
>> >
>> > 2010/4/9 Andreas Stefik <stefika at gmail.com>
>> >>
>> >> William,
>> >>
>> >> This is a complex question to answer, and it really depends on your
>> >> needs. For example, creating a whole compiler from scratch is
>> >> difficult, but possible. We have our own compiler (with an ANTLR front
>> >> end), that integrates our own custom language, called HOP, which is
>> >> basically a novice programming language we distribute to schools for
>> >> the blind. Our implementation is on sourceforge and is under GPL2, so
>> >> you are welcome to look at it (Search for "Sodbeans"). We also
>> >> integrate our custom compiler into NetBeans.
>> >>
>> >> On the other hand, if your needs allow it, you can also do things like
>> >> have your antlr grammar generate java byte code or assembly directly,
>> >> which is sometimes easier, again depending on what you need. And very
>> >> simple interpreters for very simple languages aren't too tough, if you
>> >> know what you are doing, and depending on your requirements.
>> >>
>> >> Hope that gives you some tips, at least. Short answer: Yes, it's
>> >> definitely possible, but it depends on your goals, and it's typically
>> >> not something you would bang out in a weekend.
>> >>
>> >> Andreas Stefik, Ph.D.
>> >> Department of Computer Science
>> >> Southern Illinois University Edwardsville
>> >>
>> >> On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn
>> >> <williamvdoorn at gmail.com>
>> >> wrote:
>> >> > Hello all,
>> >> >
>> >> > I've been reading the The definitive ANTLR book and I've made my own
>> >> > small
>> >> > language using the AST strcuture.
>> >> >
>> >> > Now I was wondering, is it hard to make my own compiler/interpeter
>> >> > for
>> >> > this?
>> >> > I can feed files and such to it, but how would I make my own
>> >> > interpreter/compiler?
>> >> >
>> >> > Thanks,
>> >> >
>> >> > William van Doorn
>> >> >
>> >> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> >> > Unsubscribe:
>> >> >
>> >> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> >> >
>> >
>> >
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From williamvdoorn at gmail.com  Fri Apr  9 12:20:10 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Fri, 9 Apr 2010 21:20:10 +0200
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <x2s1332b72e1004091218u96bbda69ye03feaa81b2dc4eb@mail.gmail.com>
References: <z2q6eb53c7e1004091144ta136447bp2ba155247a7da469@mail.gmail.com>
	<t2m1332b72e1004091156rc7601ce1k81f47959759220ce@mail.gmail.com>
	<m2w6eb53c7e1004091159j51a82e7et8b63402958fccdde@mail.gmail.com>
	<r2v1332b72e1004091209n6e6599dfn2f6720445c47eec4@mail.gmail.com>
	<i2m1c0448551004091213t84aa4673la3ae3eda2234c07c@mail.gmail.com>
	<x2s1332b72e1004091218u96bbda69ye03feaa81b2dc4eb@mail.gmail.com>
Message-ID: <j2x6eb53c7e1004091220q12d7b0f9w25e1a4cc9fab5098@mail.gmail.com>

How am I going about this? I generated those basic Java files, but what now?

I'm trying to make a simple DSL to make it easier for my developers to
create specific code.

2010/4/9 Andreas Stefik <stefika at gmail.com>

> If it doesn't matter for your particular application at all, then
> cliff's suggestion is probably best. Just emit out code that can be
> read by a traditional compiler (e.g., gcc). Only design a full
> evaluator/interpreter if your application (whatever it is), demands
> it.
>
> Stefik
>
> On Fri, Apr 9, 2010 at 2:13 PM, Cliff Hudson <cliff.s.hudson at gmail.com>
> wrote:
> > If you decide to go the compiled route, also consider just writing a
> > translator from your language to a compiled one, such as C or C++.  Then
> you
> > don't have to implement a compiler at all which will save you a ton of
> time.
> >
> >
> > On Fri, Apr 9, 2010 at 12:09 PM, Andreas Stefik <stefika at gmail.com>
> wrote:
> >>
> >> That's hard to answer without knowing context. Compilers are tricky
> >> things. For example, you might make a simple evaluator that will
> >> inevitably run very slowly, but do the job you need. Or, you might
> >> make something that generates code that ultimately be compiled into
> >> very fast C code to be compiled by a GCC compiler --- or who knows
> >> what.
> >>
> >> That's why I'm saying it depends on context. What problem are you
> >> trying to solve with your DSL?
> >>
> >> Stefik
> >>
> >> On Fri, Apr 9, 2010 at 1:59 PM, William v Doorn <
> williamvdoorn at gmail.com>
> >> wrote:
> >> > Andreas,
> >> >
> >> > Well, I can already execute some code and evaluate it, but is this
> >> > really
> >> > the way to do it? e.g. could I use this as interpreter, or do I need a
> >> > fully
> >> > different approach? (see the file I attached)
> >> >
> >> > Thanks
> >> >
> >> > William van Doorn
> >> >
> >> >
> >> >
> >> > 2010/4/9 Andreas Stefik <stefika at gmail.com>
> >> >>
> >> >> William,
> >> >>
> >> >> This is a complex question to answer, and it really depends on your
> >> >> needs. For example, creating a whole compiler from scratch is
> >> >> difficult, but possible. We have our own compiler (with an ANTLR
> front
> >> >> end), that integrates our own custom language, called HOP, which is
> >> >> basically a novice programming language we distribute to schools for
> >> >> the blind. Our implementation is on sourceforge and is under GPL2, so
> >> >> you are welcome to look at it (Search for "Sodbeans"). We also
> >> >> integrate our custom compiler into NetBeans.
> >> >>
> >> >> On the other hand, if your needs allow it, you can also do things
> like
> >> >> have your antlr grammar generate java byte code or assembly directly,
> >> >> which is sometimes easier, again depending on what you need. And very
> >> >> simple interpreters for very simple languages aren't too tough, if
> you
> >> >> know what you are doing, and depending on your requirements.
> >> >>
> >> >> Hope that gives you some tips, at least. Short answer: Yes, it's
> >> >> definitely possible, but it depends on your goals, and it's typically
> >> >> not something you would bang out in a weekend.
> >> >>
> >> >> Andreas Stefik, Ph.D.
> >> >> Department of Computer Science
> >> >> Southern Illinois University Edwardsville
> >> >>
> >> >> On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn
> >> >> <williamvdoorn at gmail.com>
> >> >> wrote:
> >> >> > Hello all,
> >> >> >
> >> >> > I've been reading the The definitive ANTLR book and I've made my
> own
> >> >> > small
> >> >> > language using the AST strcuture.
> >> >> >
> >> >> > Now I was wondering, is it hard to make my own compiler/interpeter
> >> >> > for
> >> >> > this?
> >> >> > I can feed files and such to it, but how would I make my own
> >> >> > interpreter/compiler?
> >> >> >
> >> >> > Thanks,
> >> >> >
> >> >> > William van Doorn
> >> >> >
> >> >> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> >> > Unsubscribe:
> >> >> >
> >> >> >
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >> >> >
> >> >
> >> >
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> >
>

From jimi at temporal-wave.com  Fri Apr  9 13:02:49 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 09 Apr 2010 13:02:49 -0700
Subject: [antlr-interest] Building own interpreter
In-Reply-To: <j2x6eb53c7e1004091220q12d7b0f9w25e1a4cc9fab5098@mail.gmail.com>
Message-ID: <475d8a7d3d46fe44924efb8beb4d5b75@temporal-wave.com>

If you want Java as a target, just use the ASM .class generator. It is nice and easy and you can write any support/runtime classes quickly and easily in Java. Create a code generator class and call methods within it as you walk your tree. You could also get LLVM to do this for you in a similar fashion.

If you are targeting a text output, then just use StringTemplate and percolate the templates up your tree to the top rule. You can also generate LLVM intermediate code this way too.

Look for examples in the Language Implementation Patterns book. 

ASM and the JVM would be relatively easy :-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of William v Doorn
> Sent: Friday, April 09, 2010 12:20 PM
> To: Andreas Stefik
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Building own interpreter
> 
> How am I going about this? I generated those basic Java files, but what
> now?
> 
> I'm trying to make a simple DSL to make it easier for my developers to
> create specific code.
> 
> 2010/4/9 Andreas Stefik <stefika at gmail.com>
> 
> > If it doesn't matter for your particular application at all, then
> > cliff's suggestion is probably best. Just emit out code that can be
> > read by a traditional compiler (e.g., gcc). Only design a full
> > evaluator/interpreter if your application (whatever it is), demands
> > it.
> >
> > Stefik
> >
> > On Fri, Apr 9, 2010 at 2:13 PM, Cliff Hudson
> <cliff.s.hudson at gmail.com>
> > wrote:
> > > If you decide to go the compiled route, also consider just writing
> a
> > > translator from your language to a compiled one, such as C or C++.
> Then
> > you
> > > don't have to implement a compiler at all which will save you a ton
> of
> > time.
> > >
> > >
> > > On Fri, Apr 9, 2010 at 12:09 PM, Andreas Stefik <stefika at gmail.com>
> > wrote:
> > >>
> > >> That's hard to answer without knowing context. Compilers are
> tricky
> > >> things. For example, you might make a simple evaluator that will
> > >> inevitably run very slowly, but do the job you need. Or, you might
> > >> make something that generates code that ultimately be compiled
> into
> > >> very fast C code to be compiled by a GCC compiler --- or who knows
> > >> what.
> > >>
> > >> That's why I'm saying it depends on context. What problem are you
> > >> trying to solve with your DSL?
> > >>
> > >> Stefik
> > >>
> > >> On Fri, Apr 9, 2010 at 1:59 PM, William v Doorn <
> > williamvdoorn at gmail.com>
> > >> wrote:
> > >> > Andreas,
> > >> >
> > >> > Well, I can already execute some code and evaluate it, but is
> this
> > >> > really
> > >> > the way to do it? e.g. could I use this as interpreter, or do I
> need a
> > >> > fully
> > >> > different approach? (see the file I attached)
> > >> >
> > >> > Thanks
> > >> >
> > >> > William van Doorn
> > >> >
> > >> >
> > >> >
> > >> > 2010/4/9 Andreas Stefik <stefika at gmail.com>
> > >> >>
> > >> >> William,
> > >> >>
> > >> >> This is a complex question to answer, and it really depends on
> your
> > >> >> needs. For example, creating a whole compiler from scratch is
> > >> >> difficult, but possible. We have our own compiler (with an
> ANTLR
> > front
> > >> >> end), that integrates our own custom language, called HOP,
> which is
> > >> >> basically a novice programming language we distribute to
> schools for
> > >> >> the blind. Our implementation is on sourceforge and is under
> GPL2, so
> > >> >> you are welcome to look at it (Search for "Sodbeans"). We also
> > >> >> integrate our custom compiler into NetBeans.
> > >> >>
> > >> >> On the other hand, if your needs allow it, you can also do
> things
> > like
> > >> >> have your antlr grammar generate java byte code or assembly
> directly,
> > >> >> which is sometimes easier, again depending on what you need.
> And very
> > >> >> simple interpreters for very simple languages aren't too tough,
> if
> > you
> > >> >> know what you are doing, and depending on your requirements.
> > >> >>
> > >> >> Hope that gives you some tips, at least. Short answer: Yes,
> it's
> > >> >> definitely possible, but it depends on your goals, and it's
> typically
> > >> >> not something you would bang out in a weekend.
> > >> >>
> > >> >> Andreas Stefik, Ph.D.
> > >> >> Department of Computer Science
> > >> >> Southern Illinois University Edwardsville
> > >> >>
> > >> >> On Fri, Apr 9, 2010 at 1:44 PM, William v Doorn
> > >> >> <williamvdoorn at gmail.com>
> > >> >> wrote:
> > >> >> > Hello all,
> > >> >> >
> > >> >> > I've been reading the The definitive ANTLR book and I've made
> my
> > own
> > >> >> > small
> > >> >> > language using the AST strcuture.
> > >> >> >
> > >> >> > Now I was wondering, is it hard to make my own
> compiler/interpeter
> > >> >> > for
> > >> >> > this?
> > >> >> > I can feed files and such to it, but how would I make my own
> > >> >> > interpreter/compiler?
> > >> >> >
> > >> >> > Thanks,
> > >> >> >
> > >> >> > William van Doorn
> > >> >> >
> > >> >> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > >> >> > Unsubscribe:
> > >> >> >
> > >> >> >
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> > >> >> >
> > >> >
> > >> >
> > >>
> > >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > >> Unsubscribe:
> > >> http://www.antlr.org/mailman/options/antlr-interest/your-email-
> address
> > >
> > >
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From wclodius at los-alamos.net  Fri Apr  9 19:11:04 2010
From: wclodius at los-alamos.net (William B. Clodius)
Date: Fri, 9 Apr 2010 20:11:04 -0600
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <l2w1c0448551004091002md67e915ci89260ac6515f00e3@mail.gmail.com>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
	<g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>
	<h2g1c0448551004081749l7debadd5te977d757926bd1ad@mail.gmail.com>
	<q2wbc2b292f1004090503v52e77b63u85700771ae3d8282@mail.gmail.com>
	<l2w1c0448551004091002md67e915ci89260ac6515f00e3@mail.gmail.com>
Message-ID: <DA7424AC-475F-4D8B-8745-EF215388258D@los-alamos.net>


On Apr 9, 2010, at 11:02 AM, Cliff Hudson wrote:

> Well, it's not always true that grammar specs are, for instance, LALR(1) or
> LL(k).  In such cases, you have to rejigger the grammar to make it work.
> The important thing is (or should be) that the grammar you do produce,
> regardless of the technicalities, will parse what you intend and nothing
> more.
<snip>
However it is often useful to make the grammar you parse be different from the official grammar for the language. Often some constructs that the language language differentiates in the syntax may best (sometimes only) be distinguished during the semantic analysis. Error reporting can also be better if the lexical and syntactic properties of the accepted language is looser than the official language, though care must be taken to ensure that the semantic analysis detects all such errors and does not acidently give such errors meaning.

From cross at kojeware.com  Fri Apr  9 19:52:07 2010
From: cross at kojeware.com (Cameron Ross)
Date: Fri, 9 Apr 2010 22:52:07 -0400
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <DA7424AC-475F-4D8B-8745-EF215388258D@los-alamos.net>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com> 
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
	<g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>
	<h2g1c0448551004081749l7debadd5te977d757926bd1ad@mail.gmail.com> 
	<q2wbc2b292f1004090503v52e77b63u85700771ae3d8282@mail.gmail.com> 
	<l2w1c0448551004091002md67e915ci89260ac6515f00e3@mail.gmail.com> 
	<DA7424AC-475F-4D8B-8745-EF215388258D@los-alamos.net>
Message-ID: <-8465156618317598414@unknownmsgid>

Yes, this is the conclusion I'm coming to.  Thanks much.
Cameron.

Kojeware Corporation

On Apr 9, 2010, at 10:11 PM, "William B. Clodius" <wclodius at los-alamos.net
 > wrote:

>
> On Apr 9, 2010, at 11:02 AM, Cliff Hudson wrote:
>
>> Well, it's not always true that grammar specs are, for instance,
>> LALR(1) or
>> LL(k).  In such cases, you have to rejigger the grammar to make it
>> work.
>> The important thing is (or should be) that the grammar you do
>> produce,
>> regardless of the technicalities, will parse what you intend and
>> nothing
>> more.
> <snip>
> However it is often useful to make the grammar you parse be
> different from the official grammar for the language. Often some
> constructs that the language language differentiates in the syntax
> may best (sometimes only) be distinguished during the semantic
> analysis. Error reporting can also be better if the lexical and
> syntactic properties of the accepted language is looser than the
> official language, though care must be taken to ensure that the
> semantic analysis detects all such errors and does not acidently
> give such errors meaning.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From thejunkybox at gmail.com  Sat Apr 10 19:39:26 2010
From: thejunkybox at gmail.com (Jason_M)
Date: Sat, 10 Apr 2010 18:39:26 -0800 (PST)
Subject: [antlr-interest] is ANTLR good for Code2HTML tool ?
Message-ID: <1270953566883-4884225.post@n2.nabble.com>


Hi everyone,

I am reading about ANTLR and I would like some help please.

I am working on a project where I need to convert the source code of several
programming languages to HTML files where the code will be colored based on
the syntax of the programming language.
also there will hyperlinks (if there is a method call, a link will be
created to the line that define the method).
in the HTML, I also like to add metadata tags to specify the type of each
token (identifier, method, class ...etc ) 

Thanks

Jason
-- 
View this message in context: http://n2.nabble.com/is-ANTLR-good-for-Code2HTML-tool-tp4884225p4884225.html
Sent from the ANTLR mailing list archive at Nabble.com.

From cliff.s.hudson at gmail.com  Sat Apr 10 20:58:49 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sat, 10 Apr 2010 20:58:49 -0700
Subject: [antlr-interest] is ANTLR good for Code2HTML tool ?
In-Reply-To: <1270953566883-4884225.post@n2.nabble.com>
References: <1270953566883-4884225.post@n2.nabble.com>
Message-ID: <x2k1c0448551004102058t938d46e1sb1fddbbe2ce80688@mail.gmail.com>

Yes, ANTLR is very well suited to this type of task.  Did you have a
specific question?

On Sat, Apr 10, 2010 at 7:39 PM, Jason_M <thejunkybox at gmail.com> wrote:

>
> Hi everyone,
>
> I am reading about ANTLR and I would like some help please.
>
> I am working on a project where I need to convert the source code of
> several
> programming languages to HTML files where the code will be colored based on
> the syntax of the programming language.
> also there will hyperlinks (if there is a method call, a link will be
> created to the line that define the method).
> in the HTML, I also like to add metadata tags to specify the type of each
> token (identifier, method, class ...etc )
>
> Thanks
>
> Jason
> --
> View this message in context:
> http://n2.nabble.com/is-ANTLR-good-for-Code2HTML-tool-tp4884225p4884225.html
> Sent from the ANTLR mailing list archive at Nabble.com.
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From thejunkybox at gmail.com  Sat Apr 10 21:17:09 2010
From: thejunkybox at gmail.com (Jason_M)
Date: Sat, 10 Apr 2010 20:17:09 -0800 (PST)
Subject: [antlr-interest] is ANTLR good for Code2HTML tool ?
In-Reply-To: <x2k1c0448551004102058t938d46e1sb1fddbbe2ce80688@mail.gmail.com>
References: <1270953566883-4884225.post@n2.nabble.com>
	<x2k1c0448551004102058t938d46e1sb1fddbbe2ce80688@mail.gmail.com>
Message-ID: <1270959429045-4884402.post@n2.nabble.com>


Thanks for the answer Cliff,

I don't have a specific question at this point, I will download ANTLR and
play with it.

Jason
-- 
View this message in context: http://n2.nabble.com/is-ANTLR-good-for-Code2HTML-tool-tp4884225p4884402.html
Sent from the ANTLR mailing list archive at Nabble.com.

From williamvdoorn at gmail.com  Sun Apr 11 09:16:14 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Sun, 11 Apr 2010 18:16:14 +0200
Subject: [antlr-interest] Expecting EOF?
Message-ID: <i2u6eb53c7e1004110916tfa5c1247m86738f5f31b94766@mail.gmail.com>

Hello all,

So I've been writing my own small language build from the examples inside
the book of Terency parr. But now I'm getting the following error:

C:\antlr>java -cp
.;antlr-3.0.jar;stringtemplate-3.0.jar;antlr-runtime-3.0.jar;a
ntlr-2.7.7.jar Test < input.txt
line 0:-1 mismatched input '<EOF>' expecting NEWLINE

Isn't a NEWLINE the same as an EOF? And, what's line 0:-1? I've attached the
Eval and expression parser and the input file I used.

Thanks,

William van Doorn
-------------- next part --------------
functie f(x) is {
	a is x + 5
	2*a
}
f(10)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Expr1.g
Type: application/octet-stream
Size: 1213 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100411/336ab363/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Eval1.g
Type: application/octet-stream
Size: 5403 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100411/336ab363/attachment-0001.obj 

From jimi at temporal-wave.com  Sun Apr 11 10:00:42 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Sun, 11 Apr 2010 10:00:42 -0700
Subject: [antlr-interest] Expecting EOF?
In-Reply-To: <i2u6eb53c7e1004110916tfa5c1247m86738f5f31b94766@mail.gmail.com>
Message-ID: <83c88fc57552a54caa942af52c94b746@temporal-wave.com>

You are probably just missing a trailing newline from your input file because Windows is stupid about text files and does not do it correctly like UNIX ;-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of William v Doorn
> Sent: Sunday, April 11, 2010 9:16 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Expecting EOF?
> 
> Hello all,
> 
> So I've been writing my own small language build from the examples
> inside the book of Terency parr. But now I'm getting the following
> error:
> 
> C:\antlr>java -cp
> .;antlr-3.0.jar;stringtemplate-3.0.jar;antlr-runtime-3.0.jar;a
> ntlr-2.7.7.jar Test < input.txt
> line 0:-1 mismatched input '<EOF>' expecting NEWLINE
> 
> Isn't a NEWLINE the same as an EOF? And, what's line 0:-1? I've
> attached the Eval and expression parser and the input file I used.
> 
> Thanks,
> 
> William van Doorn




From ronburk at gmail.com  Sun Apr 11 11:33:13 2010
From: ronburk at gmail.com (Ron Burk)
Date: Sun, 11 Apr 2010 11:33:13 -0700
Subject: [antlr-interest] OPEN, EOF ambiguity
In-Reply-To: <-8465156618317598414@unknownmsgid>
References: <j2tbc2b292f1004081304wf3b55ef8rb874c85aa193820d@mail.gmail.com>
	<b697a31d8b38724eae3e5464a312b4ae@temporal-wave.com>
	<g2vbc2b292f1004081311gddd03224r66daa8e186b8348d@mail.gmail.com>
	<h2g1c0448551004081749l7debadd5te977d757926bd1ad@mail.gmail.com>
	<q2wbc2b292f1004090503v52e77b63u85700771ae3d8282@mail.gmail.com>
	<l2w1c0448551004091002md67e915ci89260ac6515f00e3@mail.gmail.com>
	<DA7424AC-475F-4D8B-8745-EF215388258D@los-alamos.net>
	<-8465156618317598414@unknownmsgid>
Message-ID: <r2g30dde8ce1004111133w3b91c809t21d71d26370be17b@mail.gmail.com>

This is an interesting example.

EBNF is handy when prototyping a grammar, but IME causes more
problems than it solves in the long run, usually in the form of obscuring
where the real problems lie. Seems like it is just quite difficult to give
intelligible (to non parser experts) error messages in the face of EBNF
constructs.

If I read this particular example correctly, the '+' EBNF operator is
being applied to a nullable non-terminal. I'm thinking that's the highest
level at which this error could have been identified. Without EBNF,
I think the grammar writer would be led to write rules
that presented with a left recursion problem, again
due to the nullability of cltext, but would have been closer
to the real issue (assuming the left recursion error
messages were kind enough to point out which leading
right-hand side non-terminals were nullable).

OTOH, maybe EBNF is really a good thing if enough
effort is invested in high-level error reporting. I can't see
that it would be impossible for a generator to be smart
enough to flag the '+' and say:
    Can't decide whether to keep repeating 'cltext', which
    can expand to the empty string because 'text' can
    expand to the empty string.
When you have doodads like preconditions, this gets
harder, presumably.

> I guess I'm not clear on why ANTLR is seeing
> OPEN and EOF as an ambiguity.

You tell the computer: "recognize any number of 'cltext'".
But 'cltext' can match the empty string (via 'text'). So,
no matter what token the parser runs into, just how many
empty 'cltext' items do you want it to recognize first?
Zero? One?, 10,000?

The error message is confusing because it is too
low-level and mentions OPEN and EOF. OPEN and
EOF just happen to be the tokens that would be legal
at that point. But the real issue is that you've asked
to recognize an indefinite number of empty strings
that could *precede* that OPEN or EOF.

Computers being literal-minded, this is an ambiguity.
And, in fact, people writing parsers often *do* want
empty strings recognized at various points to get
associated actions triggered before or after a
particular item. But asking to recognize an
indefinite number of empty strings is inherently
ambiguous (nothing really to do with the particular
algorithm you use to parse the grammar). As
the punchline to a bad joke goes:
"How do they know when they're done?"

>  However, the language spec that I must conform to
> specifically states that a text can have zero or more
> phrases (which is the crux of the problem).

Presumably that spec writer simply ignored the fact
that that leads to an infinite number of zero-phrase
'text' items in every input. Since you are the implementer,
however, you must explicitly account for all the
ambiguities the spec writer did not bother to
disambiguate. If specifications were completely
specific, then they could be automatically turned
into code with no need for a programmer. :-)

From ronburk at gmail.com  Sun Apr 11 12:10:46 2010
From: ronburk at gmail.com (Ron Burk)
Date: Sun, 11 Apr 2010 12:10:46 -0700
Subject: [antlr-interest] Expecting EOF?
In-Reply-To: <i2u6eb53c7e1004110916tfa5c1247m86738f5f31b94766@mail.gmail.com>
References: <i2u6eb53c7e1004110916tfa5c1247m86738f5f31b94766@mail.gmail.com>
Message-ID: <q2l30dde8ce1004111210s9b70e271g9bbc63f6896a73e4@mail.gmail.com>

Didn't spot anything you did to ask to treat EOF the
same as NEWLINE.


[C:\rlb]dump \input.txt
0000: 66 75 6e 63 74 69 65 20 66 28 78 29 20 69 73 20    functie f(x) is
0010: 7b  d  a  9 61 20 69 73 20 78 20 2b 20 35  d  a    {...a is x + 5..
0020:  9 32 2a 61  d  a 7d  d  a 66 28 31 30 29          .2*a..}..f(10)

As Jim speculated, your input seems to not have a trailing NEWLINE.
As for Windows versus Unix, they are equally happy to let users
create text files that aren't terminated by newlines (something
most programmer's editors view as correct behavior).

You could certainly make the grammar do the work
of treating EOF as a NEWLINE (and then as EOF
of course), but I suspect the simplest out is to just
have the lexer generate a NEWLINE if one was not
seen just prior to the EOF...

From gthouraya at yahoo.fr  Sun Apr 11 12:24:36 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Sun, 11 Apr 2010 19:24:36 +0000 (GMT)
Subject: [antlr-interest] ANTLRWork or ANTLR
Message-ID: <101692.61473.qm@web26303.mail.ukl.yahoo.com>

I must make the translate a language to another, it is sufficient to install the ANTLRWork or another version of ANTLR. ?
- if I use ANTLRWork, how? can I added another language( another that predifined). ?
- if I use another ANTLR version, how? can I use it after installing


      

From cliff.s.hudson at gmail.com  Sun Apr 11 16:07:44 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sun, 11 Apr 2010 16:07:44 -0700
Subject: [antlr-interest] ANTLRWork or ANTLR
In-Reply-To: <156718.94973.qm@web26303.mail.ukl.yahoo.com>
References: <z2r1c0448551004111325mebef589crf12a577134697a14@mail.gmail.com>
	<156718.94973.qm@web26303.mail.ukl.yahoo.com>
Message-ID: <g2t1c0448551004111607z81f6a47dm1adb9dfc97a12933@mail.gmail.com>

Ahh yes, that would be the way you would go about it.  However, I have not
personally used the StringTemplate functionality so I cannot provide
guidance there.  I have copied antlr interest group again, so they may be
able to help you.

On Sun, Apr 11, 2010 at 1:37 PM, Gouasmi Thouraya <gthouraya at yahoo.fr>wrote:

> here, I want to make a translation between a language Z and a CSP-Z
> language. what I understood that the Antlr can make that and  I must enter
> the grammar of language Z and must make the stringTemplate of CSP-Z. but I
> didn't understand how I can make this translation.
> pleases  if you have an idea help me
> please help me with give me some steps what I must following
>
> --- En date de : *Dim 11.4.10, Cliff Hudson <cliff.s.hudson at gmail.com>* a
> ?crit :
>
>
> De: Cliff Hudson <cliff.s.hudson at gmail.com>
> Objet: Re: [antlr-interest] ANTLRWork or ANTLR
> ?: "Gouasmi Thouraya" <gthouraya at yahoo.fr>
> Date: Dimanche 11 avril 2010, 22h25
>
>
> To be clear, you want to make ANTLR produce code for a new language, other
> than one of the many it supports?  Which language do you wish it to support?
>
> I am not familiar with how to add additional language support to ANTLR.  I
> am more familiar with writing grammars.
>
> On Sun, Apr 11, 2010 at 1:22 PM, Gouasmi Thouraya <gthouraya at yahoo.fr<http://mc/compose?to=gthouraya at yahoo.fr>
> > wrote:
>
>> thank you for your answer,
>> therefore, I want to add another language (another one that java, cpp,
>> JavaScript,..), I know that I must add an directory as describ in the
>> link"How build a antlr code generation target" but I don't know how I must
>> execute and if I enter one grammar and I ask for an output with this new
>> language, I get it.
>> please help me
>>
>> --- En date de : *Dim 11.4.10, Cliff Hudson <cliff.s.hudson at gmail.com<http://mc/compose?to=cliff.s.hudson at gmail.com>
>> >* a ?crit :
>>
>>
>> De: Cliff Hudson <cliff.s.hudson at gmail.com<http://mc/compose?to=cliff.s.hudson at gmail.com>
>> >
>> Objet: Re: [antlr-interest] ANTLRWork or ANTLR
>> ?: "Gouasmi Thouraya" <gthouraya at yahoo.fr<http://mc/compose?to=gthouraya at yahoo.fr>
>> >
>> Date: Dimanche 11 avril 2010, 22h07
>>
>>
>> ANTLRWorks is merely a GUI interface you can use to develop and debug your
>> grammars.  The distribution includes ANTLR itself, but is not a necessary
>> component.
>>
>> On Sun, Apr 11, 2010 at 12:24 PM, Gouasmi Thouraya <gthouraya at yahoo.fr<http://mc/compose?to=gthouraya at yahoo.fr>
>> > wrote:
>>
>>> I must make the translate a language to another, it is sufficient to
>>> install the ANTLRWork or another version of ANTLR.
>>> - if I use ANTLRWork, how  can I added another language( another that
>>> predifined).
>>> - if I use another ANTLR version, how  can I use it after installing
>>>
>>>
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>>
>
>

From jmchuma at gmail.com  Mon Apr 12 04:30:15 2010
From: jmchuma at gmail.com (=?UTF-8?Q?Jose_Mar=C3=ADa_Chumo_Mata?=)
Date: Mon, 12 Apr 2010 13:30:15 +0200
Subject: [antlr-interest] Possible bug in ANTLR's lexer
Message-ID: <z2s5fc92f921004120430ze9d8cb0fn5c1ce79bb5dc27b4@mail.gmail.com>

Hello.
I'm using ANTLR v3.2 (the one that comes with ANTLR Works 1.3.1) and I
think I've found a bug in the reset method in Lexer.java. What I've
done is travell the file, call the reset method and travell it again.
The bug I've found is that the line number of the tokens are wrong on
the second iteration. They are equal the the right line number plus
the number of lines in the parsed file. I thought the reset method
would let everything as when the lexer was created, but maybe the
current behaviour is the intended one.
On a (not so) unrelated note, I'm not really sure if the verb travell
can be used as I've used it but English is not my mother tongue so I
apologize the spelling mistakes.
Regards.

From espina.edgar at gmail.com  Mon Apr 12 05:25:34 2010
From: espina.edgar at gmail.com (Edgar Espina)
Date: Mon, 12 Apr 2010 09:25:34 -0300
Subject: [antlr-interest] ANTLR IDE 2.0.2 released!
Message-ID: <k2n92b42db61004120525je8918fdfre1d4b48b15029494@mail.gmail.com>

Hi,

 A bug fix release version:

   - Interpreter fails with some grammars ambiguities (introduced in the
last version:S)
   - Complex dependencies may impede generating parser.

The next version will runs on Eclipse 3.6 or higher.

Thanks
-- 
edgar

From williamvdoorn at gmail.com  Mon Apr 12 10:11:05 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Mon, 12 Apr 2010 19:11:05 +0200
Subject: [antlr-interest] Whitespace
Message-ID: <r2y6eb53c7e1004121011n881472fao5c5c570cc1a00f31@mail.gmail.com>

Hello all,

Are there any whitespace rules? My rules don't seem to match a whitespace
automatically more.

type 'is' ID

Doesn't match including whitespaces, only when I explicity add 'WS' (a basic
rule representing a whitespace character)

Before this just normally worked - could this be because of ANTLR IDE or
that I upgraded from v3.0 to v3.2?

Thanks,

William van Doorn

From sebastien.kirche at gmail.com  Mon Apr 12 11:16:53 2010
From: sebastien.kirche at gmail.com (=?ISO-8859-1?Q?S=E9bastien_Kirche?=)
Date: Mon, 12 Apr 2010 20:16:53 +0200
Subject: [antlr-interest] CommonTree -> AST conversion ?
Message-ID: <l2s5b451b0b1004121116xea429c0dx5e00e601eff05fb@mail.gmail.com>

Hi,

I am kinda new to antlr and I am working on a grammar fragment to familiar
myself with the antlr mechanics.

I have a parser grammar that is producing an AST (I have already read some
doc about the tree grammars, but in a first step i would like to manually
walk the tree to learn the basics) with the output=AST statement. The final
goal will be a spreadsheet-like language for a reporting application.

I would like to make some debugging tests using the ASTFrame but I did not
managed to provide the ASTFrame with a suitable AST / CommonAST so I print
it myselft for the moment.
Could someone correct my code or point me an example more complete that the
code snippet that is mentioned in the wiki ?
And could you point me some code for a custom tree walker ? I have read some
mentions about implementing a visitor pattern, it that the regular way ?

Thanks for your help.

public class TreeTester {

/**
 * @param args
 * @throws IOException
 * @throws RecognitionException
 */
public static void main(String[] args) throws IOException,
RecognitionException {
 if (args.length < 1){
System.out.println("Usage : TreeTester <fichier d'expressions>");
System.exit(1);
}
 String filename = args[0];
File tstFile = new File(filename);
 if (!tstFile.exists() || !tstFile.canRead()){
System.out.println(filename + " n'existe pas ou n'est pas accessible.");
System.exit(1);
}
 plxLexer lexer = new plxLexer(new ANTLRFileStream(filename));
CommonTokenStream tokens = new CommonTokenStream(lexer);
 plxParser parser = new plxParser(tokens);
plxParser.cell_return r = parser.cell();
 CommonTree t = (CommonTree) r.getTree();
System.out.println(t.getChildCount());
for (int i=0; i< t.getChildCount(); i++){
System.out.print(plxParser.tokenNames[t.getChild(i).getType()] + " : ");
System.out.println(t.getChild(i).toStringTree());
}

printTree(t, 0);
// this does not work, as It cant cast CommonTree to CommonAST nor AST
// ASTFrame debugView = new ASTFrame("arbre", (CommonAST) t);
// debugView.setVisible(true);
 }
 public static void printTree(CommonTree t, int indent) {
if ( t != null ) {
StringBuffer sb = new StringBuffer(indent);
for ( int i = 0; i < indent; i++ )
sb = sb.append("   ");
for ( int i = 0; i < t.getChildCount(); i++ ) {
System.out.println(sb.toString() + t.getChild(i).toString());
printTree((CommonTree)t.getChild(i), indent+1);
}
}
}
}

-- 
S?bastien Kirche

From gerald at certiv.net  Mon Apr 12 12:40:01 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Mon, 12 Apr 2010 12:40:01 -0700
Subject: [antlr-interest] CommonTree -> AST conversion ?
In-Reply-To: <l2s5b451b0b1004121116xea429c0dx5e00e601eff05fb@mail.gmail.com>
References: <l2s5b451b0b1004121116xea429c0dx5e00e601eff05fb@mail.gmail.com>
Message-ID: <4BC37711.8060608@certiv.net>

------ Original Message (Monday, April 12, 2010 8:16:53 
PM) From: S?bastien Kirche ------
Subject: [antlr-interest] CommonTree -> AST conversion ?
> Could someone correct my code or point me an example more complete that the
> code snippet that is mentioned in the wiki ?  And could you point me some code for a custom tree walker?
Just use Antlr to generate a sample tree walker.  The generated code is 
quite readable and will be an example specific to your AST.
> I have read some mentions about implementing a visitor pattern, it that the regular way ?
>    
The regular way is to just use a generated tree walker.

From parrt at antlr.org  Mon Apr 12 16:21:44 2010
From: parrt at antlr.org (Terence Parr)
Date: Mon, 12 Apr 2010 16:21:44 -0700
Subject: [antlr-interest] away from email until this weekend
Message-ID: <CF42D826-6C48-4F1E-B24F-AF260EBB52C7@antlr.org>

howdy. i'm going to be gone from Tue-Fri this week.

Terence

From tyler.distad at gmail.com  Mon Apr 12 20:48:57 2010
From: tyler.distad at gmail.com (Tyler Distad)
Date: Mon, 12 Apr 2010 23:48:57 -0400
Subject: [antlr-interest] Performing actions on a token
Message-ID: <k2y1bb620341004122048v59daac60v11042af71f0901c7@mail.gmail.com>

In my combined lexer/parser grammar, I have the following token rule:

FILE_DELIMITER : '|||||' (PRINTABLE ~ '|')+ '|||||' {$channel = HIDDEN;};

In a separate file, I have a tree parser grammar.

In one of these two files, I need to perform a specific action when this
token is found. I tried to add an action in my lexer/parser grammar, but it
wouldn't let me perform any actions on the token itself. (I need the text of
it.) Also, because the token can appear any number of times, at any point in
my grammar, it cannot easily be added to my tree grammar rules.

Is there any way for me to perform an action when this token appears in my
token stream? For various reasons, I wouldn't at all mind overriding some
part of the tokenization process if need be.

Tyler Distad

From sebastien.kirche at gmail.com  Tue Apr 13 02:12:53 2010
From: sebastien.kirche at gmail.com (=?ISO-8859-1?Q?S=E9bastien_Kirche?=)
Date: Tue, 13 Apr 2010 11:12:53 +0200
Subject: [antlr-interest] CommonTree -> AST conversion ?
In-Reply-To: <4BC37711.8060608@certiv.net>
References: <l2s5b451b0b1004121116xea429c0dx5e00e601eff05fb@mail.gmail.com>
	<4BC37711.8060608@certiv.net>
Message-ID: <k2v5b451b0b1004130212id6df4228i5637a95af7fe4059@mail.gmail.com>

Le 12 avril 2010 21:40, Gerald Rosenberg <gerald at certiv.net> a ?crit :

>  ------ Original Message (Monday, April 12, 2010 8:16:53
> PM) From: S?bastien Kirche ------
> Subject: [antlr-interest] CommonTree -> AST conversion ?
>
> Could someone correct my code or point me an example more complete that the
> code snippet that is mentioned in the wiki ?  And could you point me some code for a custom tree walker?
>
>  Just use Antlr to generate a sample tree walker.  The generated code is
> quite readable and will be an example specific to your AST.
>
> I have read some mentions about implementing a visitor pattern, it that the regular way ?
>
>
>  The regular way is to just use a generated tree walker.
>

Thanks for your feedback, but I am not sure to understand clearly :)
Do you mean to generate the tree walker by writing a tree grammar on top of
my parser grammar, or am I missing an antlr feature ?

When I was talking about implementing a visitor, it was related to the
article ? Manual Tree Walking Is Better Than Tree Grammars ?[1] and have
also seen a mention of it by Terence Parr in the mailing list archives. And
it was also to see what is under the hood of the tree grammars, like
learning some assembly helps to understand the work of a C compiler. And I
also find quite ugly the mix of grammar code with java code : I fear that
when my grammar will grow the maintenance of the resulting code will become
hard.

Thanks for your support.

[1] http://antlr.org/article/1170602723163/treewalkers.html
-- 
S?bastien Kirche

From foxterri2 at hotmail.com  Tue Apr 13 02:31:34 2010
From: foxterri2 at hotmail.com (foxterri foxterri)
Date: Tue, 13 Apr 2010 09:31:34 +0000
Subject: [antlr-interest] How to make a Treeparser for Terence Parr Antlr
	grammer
Message-ID: <SNT140-w6F98F998CCC804C29F96EF4110@phx.gbl>


Hi
I am making a project where the goal is to make a Java to c++ translater. For this purpose I have decided to use ANTLR. I am done with the scanner and parser and are going to make the Treeparser. But how do I start by making this treeparser? 
Based on Terence Parr java grammar (Link: http://www.antlr.org/grammar/1152141644268/Java.g) how would you start by making a treeparser for this?
I have looked in the "The Definitive ANTLR Reference" for inspiration.
But it seems like this only deals with grammars having rewrite rules or the AST construction operators ^ and ! which Terence Parr's grammar does not have.
 		 	   		  
_________________________________________________________________
The New Busy is not the too busy. Combine all your e-mail accounts with Hotmail.
http://www.windowslive.com/campaign/thenewbusy?tile=multiaccount&ocid=PID28326::T:WLMTAGL:ON:WL:en-US:WM_HMP:042010_4

From tounsimolka at yahoo.fr  Tue Apr 13 07:35:47 2010
From: tounsimolka at yahoo.fr (Molka Tounsi)
Date: Tue, 13 Apr 2010 14:35:47 +0000 (GMT)
Subject: [antlr-interest] CSP-Z to Java
Message-ID: <485300.13485.qm@web26404.mail.ukl.yahoo.com>

Hello
I wants to use the ANTLR for translater a language CSP-Z to
Java. But I understood how to make. I think that it is necessary to make
changes on grammar of Java already made on ANTLR. But where I have to make this
change In the ANTLR3.2 or in the ANTLRWorks, and how make the link between them.
Also I have try to write one grammar by using " Eclipse and Antlr 3.x " but the runing does not come true it gives me the
following error:
" Errors exist in required project(s)
expression
Proceed with launch?"

Thanks for your help.


      

From gerald at certiv.net  Tue Apr 13 12:24:47 2010
From: gerald at certiv.net (Gerald Rosenberg)
Date: Tue, 13 Apr 2010 12:24:47 -0700
Subject: [antlr-interest] CommonTree -> AST conversion ?
In-Reply-To: <k2v5b451b0b1004130212id6df4228i5637a95af7fe4059@mail.gmail.com>
References: <l2s5b451b0b1004121116xea429c0dx5e00e601eff05fb@mail.gmail.com>	
	<4BC37711.8060608@certiv.net>
	<k2v5b451b0b1004130212id6df4228i5637a95af7fe4059@mail.gmail.com>
Message-ID: <4BC4C4FF.5080106@certiv.net>

------ Original Message (Tuesday, April 13, 2010 11:12:53 
AM) From: S?bastien Kirche ------
Subject: Re: [antlr-interest] CommonTree -> AST conversion ?
> Do you mean to generate the tree walker by writing a tree grammar on 
> top of my parser grammar, or am I missing an antlr feature ?
Yes, just write a simple tree pattern matcher and have Antlr generate 
the tree walker code.  Lots of examples and more explanation in Language 
Implementation Patterns 
<http://pragprog.com/titles/tpdsl/language-design-patterns>.  
http://www.antlr.org/wiki/display/ANTLR3/Tree+pattern+matching
>
> When I was talking about implementing a visitor, it was related to the 
> article ? Manual Tree Walking Is Better Than Tree Grammars ?[1]
There are valid points made in that article, but that is just not the 
best place to start.
> And it was also to see what is under the hood of the tree grammars, 
> like learning some assembly helps to understand the work of a C compiler.
Looking at the source of the C compiler would be far more sensible.
> And I also find quite ugly the mix of grammar code with java code : I 
> fear that when my grammar will grow the maintenance of the resulting 
> code will become hard.
Yes, best to minimize the mix.  You can either use the superclass option 
(http://www.antlr.org/wiki/display/ANTLR3/Grammar+options) or, better, 
set a helper class on the parser that can then be called from the actions.


From rmann at latencyzero.com  Tue Apr 13 15:17:36 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Tue, 13 Apr 2010 15:17:36 -0700
Subject: [antlr-interest] Error building from source: The scm url cannot be
	null
Message-ID: <2BD73701-53D9-478D-A509-0FD74B991B5C@latencyzero.com>

Hi all,

I just downloaded antlr-3.2, and installed Maven 2.2.1. After downloading a bunch of jars, it ran into an error. The maven invocation and error are below. Did I do something wrong?

$ mvn -Dmaven.test.skip=true
...
[INFO] [buildnumber:create {execution: default}]
[INFO] Storing buildNumber: Apr 13, 2010 15:13:46 at timestamp: 1271196826772
[INFO] ------------------------------------------------------------------------
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] The scm url cannot be null.
[INFO] ------------------------------------------------------------------------
[INFO] Trace
java.lang.NullPointerException: The scm url cannot be null.
	at org.apache.maven.scm.manager.AbstractScmManager.makeScmRepository(AbstractScmManager.java:181)
	at org.codehaus.mojo.build.CreateMojo.getScmRepository(CreateMojo.java:722)
	at org.codehaus.mojo.build.CreateMojo.getScmBranch(CreateMojo.java:593)
	at org.codehaus.mojo.build.CreateMojo.execute(CreateMojo.java:452)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 minute 41 seconds
[INFO] Finished at: Tue Apr 13 15:13:46 PDT 2010
[INFO] Final Memory: 20M/79M
[INFO] ------------------------------------------------------------------------




From jimi at temporal-wave.com  Tue Apr 13 15:27:57 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 13 Apr 2010 15:27:57 -0700
Subject: [antlr-interest] Error building from source: The scm url cannot
	be null
In-Reply-To: <2BD73701-53D9-478D-A509-0FD74B991B5C@latencyzero.com>
Message-ID: <1afda7bcc67cd147b0d176bb8025de09@temporal-wave.com>

Please use:

antlr.markmail.org

Where you will find this explained many times.

Thanks,

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Rick Mann
> Sent: Tuesday, April 13, 2010 3:18 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Error building from source: The scm url
> cannot be null
> 
> Hi all,
> 
> I just downloaded antlr-3.2, and installed Maven 2.2.1. After
> downloading a bunch of jars, it ran into an error. The maven invocation
> and error are below. Did I do something wrong?
> 
> $ mvn -Dmaven.test.skip=true
> ...
> [INFO] [buildnumber:create {execution: default}]
> [INFO] Storing buildNumber: Apr 13, 2010 15:13:46 at timestamp:
> 1271196826772
> [INFO] ----------------------------------------------------------------
> --------
> [ERROR] FATAL ERROR
> [INFO] ----------------------------------------------------------------
> --------
> [INFO] The scm url cannot be null.
> [INFO] ----------------------------------------------------------------
> --------
> [INFO] Trace
> java.lang.NullPointerException: The scm url cannot be null.
> 	at
> org.apache.maven.scm.manager.AbstractScmManager.makeScmRepository(Abstr
> actScmManager.java:181)
> 	at
> org.codehaus.mojo.build.CreateMojo.getScmRepository(CreateMojo.java:722
> )
> 	at
> org.codehaus.mojo.build.CreateMojo.getScmBranch(CreateMojo.java:593)
> 	at
> org.codehaus.mojo.build.CreateMojo.execute(CreateMojo.java:452)
> 	at
> org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginM
> anager.java:490)
> 	at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(Defaul
> tLifecycleExecutor.java:694)
> 	at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLife
> cycle(DefaultLifecycleExecutor.java:556)
> 	at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(Default
> LifecycleExecutor.java:535)
> 	at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandl
> eFailures(DefaultLifecycleExecutor.java:387)
> 	at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments
> (DefaultLifecycleExecutor.java:348)
> 	at
> org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLife
> cycleExecutor.java:180)
> 	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
> 	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
> 	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
> 	at
> org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.ja
> va:39)
> 	at
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccesso
> rImpl.java:25)
> 	at java.lang.reflect.Method.invoke(Method.java:597)
> 	at
> org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
> 	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
> 	at
> org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
> 	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
> [INFO] ----------------------------------------------------------------
> --------
> [INFO] Total time: 1 minute 41 seconds
> [INFO] Finished at: Tue Apr 13 15:13:46 PDT 2010
> [INFO] Final Memory: 20M/79M
> [INFO] ----------------------------------------------------------------
> --------
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From rmann at latencyzero.com  Tue Apr 13 15:28:13 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Tue, 13 Apr 2010 15:28:13 -0700
Subject: [antlr-interest] NoViableAlt
Message-ID: <81FCF514-3529-4909-A37F-63CC0B99A0D5@latencyzero.com>

Why do I get a "NoViableAltException" when parsing "3", but when parsing "asd" I get "asd" (in the ANTLRWorks Interpreter):

top	:	 expr;

expr	:	multExpr (('+'|'-') multExpr)*;
multExpr:	atom ('*' atom)*;
atom	:	NUM | ID | '(' expr ')';

LETTER	:	'a'..'z' | 'A'..'Z';
DIGIT	:	'0'..'9';
ID	:	LETTER (LETTER | DIGIT)*;
NUM	:	DIGIT+ ('.' DIGIT+)?;

TIA,
-- 
Rick


From kirby.bohling at gmail.com  Tue Apr 13 15:37:27 2010
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Tue, 13 Apr 2010 17:37:27 -0500
Subject: [antlr-interest] NoViableAlt
In-Reply-To: <81FCF514-3529-4909-A37F-63CC0B99A0D5@latencyzero.com>
References: <81FCF514-3529-4909-A37F-63CC0B99A0D5@latencyzero.com>
Message-ID: <t2r3cac8fdf1004131537ub120f6cdi78a849b30495a247@mail.gmail.com>

Without actually running it, I'm pretty sure it's because '3' is
lexing to be 'DIGIT' (it's the first rule, if DIGIT had been below NUM
I think it might have "worked").

So the lexer returns 'DIGIT', which no rule from your parser accepts.
You likely meant to declare the DIGIT as a fragment.  At which point,
I think it'd start doing what you expect it to.

Kirby

On Tue, Apr 13, 2010 at 5:28 PM, Rick Mann <rmann at latencyzero.com> wrote:
> Why do I get a "NoViableAltException" when parsing "3", but when parsing "asd" I get "asd" (in the ANTLRWorks Interpreter):
>
> top ? ? : ? ? ? ?expr;
>
> expr ? ?: ? ? ? multExpr (('+'|'-') multExpr)*;
> multExpr: ? ? ? atom ('*' atom)*;
> atom ? ?: ? ? ? NUM | ID | '(' expr ')';
>
> LETTER ?: ? ? ? 'a'..'z' | 'A'..'Z';
> DIGIT ? : ? ? ? '0'..'9';
> ID ? ? ?: ? ? ? LETTER (LETTER | DIGIT)*;
> NUM ? ? : ? ? ? DIGIT+ ('.' DIGIT+)?;
>
> TIA,
> --
> Rick
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From rmann at latencyzero.com  Tue Apr 13 15:56:04 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Tue, 13 Apr 2010 15:56:04 -0700
Subject: [antlr-interest] NoViableAlt
In-Reply-To: <t2r3cac8fdf1004131537ub120f6cdi78a849b30495a247@mail.gmail.com>
References: <81FCF514-3529-4909-A37F-63CC0B99A0D5@latencyzero.com>
	<t2r3cac8fdf1004131537ub120f6cdi78a849b30495a247@mail.gmail.com>
Message-ID: <0811D077-8B0A-4644-8BF3-4ADDDA986424@latencyzero.com>

Yep! fragment is what I needed. It's been a while, I'm rusty. I originally had DIGIT below NUM, and I got other errors. Adding fragment fixed it. Thanks!

On Apr 13, 2010, at 15:37:27, Kirby Bohling wrote:

> Without actually running it, I'm pretty sure it's because '3' is
> lexing to be 'DIGIT' (it's the first rule, if DIGIT had been below NUM
> I think it might have "worked").
> 
> So the lexer returns 'DIGIT', which no rule from your parser accepts.
> You likely meant to declare the DIGIT as a fragment.  At which point,
> I think it'd start doing what you expect it to.
> 
> Kirby
> 
> On Tue, Apr 13, 2010 at 5:28 PM, Rick Mann <rmann at latencyzero.com> wrote:
>> Why do I get a "NoViableAltException" when parsing "3", but when parsing "asd" I get "asd" (in the ANTLRWorks Interpreter):
>> 
>> top     :        expr;
>> 
>> expr    :       multExpr (('+'|'-') multExpr)*;
>> multExpr:       atom ('*' atom)*;
>> atom    :       NUM | ID | '(' expr ')';
>> 
>> LETTER  :       'a'..'z' | 'A'..'Z';
>> DIGIT   :       '0'..'9';
>> ID      :       LETTER (LETTER | DIGIT)*;
>> NUM     :       DIGIT+ ('.' DIGIT+)?;
>> 
>> TIA,
>> --
>> Rick
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>> 


From BrianC at sannas.org  Wed Apr 14 00:57:02 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Wed, 14 Apr 2010 15:57:02 +0800
Subject: [antlr-interest] Lexer error
Message-ID: <01c001cadba8$12f33d80$38d9b880$@sannas.org>

The following grammar compiles without any sort of warnings or errors, and
ANTLRworks doesn't complain either, but when I call the parser, it returns a
warning for each character in the string to be parsed.  I know it has
something to do with the FILE_NAME rule, but I don't know how to fix it.  I
suspect that the lexer cannot create a token because the FILE_NAME rule
could also match any other token (a file name on Windows can contain just
about any character).  I've structured my grammar so that the FILE_NAME is
always the last token on a line, so I figured ANTLR would be able to figure
it out from that context, but that doesn't appear to be the case.  So, how
can I describe it to ANTLR? 

 

Any help would be greatly appreciated!

 

-Brian

 

 

DT> dump mbr

-memory-(1) : lexer error 3 :

         at offset 0, near 'D' :

        dump mbr

-memory-(1) : lexer error 3 :

         at offset 1, near 'U' :

        ump mbr

-memory-(1) : lexer error 3 :

         at offset 2, near 'M' :

        mp mbr

-memory-(1) : lexer error 3 :

         at offset 3, near 'P' :

        p mbr

-memory-(1) : lexer error 3 :

         at offset 5, near 'M' :

        mbr

-memory-(1) : lexer error 3 :

         at offset 6, near 'B' :

        br

-memory-(1) : lexer error 3 :

         at offset 7, near 'R' :

        r

 

//

// This grammar defines the commands available to the DiskTool (DT) program

//

 

grammar Commands;

 

options 

      {

      output = AST;

      ASTLabelType = pANTLR3_BASE_TREE;

      language = C;

      backtrack = true;

      memoize = true;

      }

 

@lexer::header

{

#define     ANTLR3_INLINE_INPUT_ASCII

}

 

//+

// Productions

//-

 

commands

      :

      (script_command

      | dump_command

      | show_command

      )*;

 

script_command

      :  '@' 

      FILE_NAME

      ;

 

dump_command

      : DUMP

      ( dump_struct

      | dump_block

      | a_file

      );

 

show_command

      : SHOW

      ( structure_nouns

      | storage_nouns

      | a_file

      );

      

mbr_vbr

      : MBR 

      | VBR

      ;

 

block_nouns

      : LBN 

      | LCN 

      | VBN 

      | VCN

      ;

 

structure_nouns

      : MBR

      | VBR

      ;

 

dump_block

 

      : block_nouns

      number

      (

      (',' number

      )

      | 

      (':' number

      ))?

      DRIVE_NAME?

      ;

 

dump_struct

      : mbr_vbr

      ('/' qualifier)?

      DRIVE_NAME?

      ;

 

storage_nouns

      : DISK

      | VOLUME

      ;

      

a_file

      : FILE

      FILE_NAME

      ;

 

number

      : DEC_NUMBER 

      | HEX_NUMBER

      ;

 

qualifier

      : ALL

      | CODE

      | TABLE

      ;

 

//+

// Tokens

//-

 

// Verbs

 

DUMP        : 'DUMP';

SHOW        : 'SHOW';

 

// Nouns

 

DISK        : 'DISK';

FILE        : 'FILE';

LBN         : 'LBN';

LCN         : 'LCN';

MBR         : 'MBR';

PBN         : 'PBN';

VBN         : 'VBN';

VBR         : 'VBR';

VCN         : 'VCN';

VOLUME      : 'VOLUME';

 

// Qualifiers

 

ALL         : 'ALL';

CODE        : 'CODE';

TABLE       : 'TABLE';

 

// Miscellaneous tokens

 

DRIVE_NAME

      : LETTER ':';

 

fragment

LETTER      : 'A'..'Z';

 

fragment

DIGIT : '0'..'9';

 

fragment

HEX_DIGIT   : (DIGIT | 'A'..'F');

 

HEX_NUMBER  : '0X' HEX_DIGIT+;

 

DEC_NUMBER  : DIGIT+;

 

fragment

FILE_NAME

      :  ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n')+ (('\r'? '\n') | EOF);

 

LINE_COMMENT

      : '!' ~('\n'|'\r')* (('\r'? '\n') | EOF) {$channel=HIDDEN;};

 

WS    : (' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};

 

 

 

#include <windows.h>

#include <stdio.h>

 

#include "CommandsLexer.h"                                              //
Generated by ANTLR from Commands.g

#include "CommandsParser.h"                                             //
Generated by ANTLR from Commands.g

 

 

 

void main (int Argc, char* Argv[])

{

DWORD                                     status;

char*                                     ptr;

char                                      command [1024];

DWORD                                     command_len;

pANTLR3_INPUT_STREAM                input;

pANTLR3_COMMON_TOKEN_STREAM         tstream;

pCommandsLexer                            lexer;

pCommandsParser                           parser;

CommandsParser_commands_return      commands_ast;

pANTLR3_COMMON_TREE_NODE_STREAM     nodes;

//pCommandsDumpDecl                       tree_parser;

 

 

      //+

      // Display our prompt and read a command string from the console

      //-

 

      while (TRUE)

            {

            printf ("DT> ");

            

            //+

            // Read the entire line

            //-

 

            if ((ptr = gets_s ((char *)command, sizeof (command))) != NULL)

                  {

                  command_len = strlen ((char*)command);

 

                  //+

                  // Only try to parse the input if there is something there

                  //-

 

                  if (command_len > 0)

                        {

 

                        //+

                        // Create the input stream

                        //-

 

                        if ((input = antlr3NewAsciiStringInPlaceStream
((pANTLR3_UINT8)&command, (ANTLR3_UINT64) command_len, NULL)) != 0)

                              {

 

                              //+

                              // Tell ANTLR to use upper-case when matching
tokens

                              //-

 

                              input->setUcaseLA (input, ANTLR3_TRUE);

 

                              //+

                              // Create a new instance of the lexer using
our input stream

                              //-

 

                              if ((lexer = CommandsLexerNew (input)) != 0)

                                    {

 

                                    //+

                                    // Create the token stream

                                    //-

 

                                    if ((tstream =
antlr3CommonTokenStreamSourceNew (ANTLR3_SIZE_HINT, TOKENSOURCE(lexer))) !=
0)

                                          {

 

                                          //+

                                          // Create a new instance of the
parser using our lexer

                                          //-

 

                                          if ((parser = CommandsParserNew
(tstream)) != 0)

                                                {

 

                                                //+

                                                // Call the parser with the
start symbol

                                                //-

 

                                                commands_ast =
parser->commands (parser); 

 

                                                //+

                                                // Check for errors parsing
the input

                                                //-

 

                                                if
(parser->pParser->rec->state->errorCount == 0)

                                                      {

 

                                                      //+

                                                      // The input was
parsed successfully.  Use the Abstract Syntax Tree

                                                      // which contains a
linked list of nodes containing the tokens that

                                                      // were parsed

                                                      //-

 

                                                      nodes =
antlr3CommonTreeNodeStreamNewTree (commands_ast.tree, ANTLR3_SIZE_HINT);

                                                      printf ("Commands
tree: %s\n", commands_ast.tree->toStringTree (commands_ast.tree)->chars);

//                                                    tree_parser =
CommandsDumpDeclNew (nodes);

 

//                                                    tree_parser->decl
(tree_parser);

//                                                    nodes->free (nodes);

//                                                    tree_parser->free
(tree_parser);

                                                      }

                                                else

                                                      {

                                                      printf ("Errors found
during parsing: %d\n", parser->pParser->rec->state->errorCount);

                                                      }

 

                                                //+

                                                // We're now done with these
instances, so free them

                                                //-

 

                                                parser->free (parser);

                                                tstream->free (tstream);

                                                lexer->free (lexer);

                                                input->close (input);

                                                }

                                          else

                                                {

                                                status = GetLastError ();

                                                printf ("Error creating
parser, status = %08x\n", status);

                                                break;

                                                }

 

                                          }

                                    else

                                          {

                                          status = GetLastError ();

                                          printf ("Unable to create token
stream, status = %08x\n", status);

                                          break;

                                          }

 

                                    }

                              else

                                    {

                                    status = GetLastError ();

                                    printf ("Unable to create lexer, status
= %08x\n", status);

                                    break;

                                    }

 

                              }

                        else

                              {

                              status = GetLastError ();

                              printf ("Error creating the input stream,
status = %08x\n", status);

                              break;

                              }

 

                        }

 

                  }

 

 

            }     // End while

 

}

 


From cliff.s.hudson at gmail.com  Wed Apr 14 01:19:01 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Wed, 14 Apr 2010 01:19:01 -0700
Subject: [antlr-interest] Lexer error
In-Reply-To: <01c001cadba8$12f33d80$38d9b880$@sannas.org>
References: <01c001cadba8$12f33d80$38d9b880$@sannas.org>
Message-ID: <l2j1c0448551004140119g21754998l28e19b291d33ecc9@mail.gmail.com>

FILE_NAME is a fragment, so it will never match as a token without another
token referring to it..  Rule a_file thus can never match (and in fact it
seems like you should get an error about that.)

You will have a more general problem that FILE_NAME can also match any of
your keywords, and likewise your keywords can match any filename that has
the same text, which means certain filenames will not produce the expected
tokens in your grammar.  Tokens without wildcards match in the order they
are declared, but tokens with wildcards can consume input before preceding
tokens that don't have wildcards which could also match the same input.

There are a couple of ways around this:
1. Teach your lexer more about the input using semantic predicates - these
allow you to switch token rules on an off depending on conditions you set.
2. Ensure your tokens are lexically unambiguous - for instance FILE_NAME
could be surrounded by quotation marks which none of your other tokens use.
 This option is probably more desirable, since file names can also contain
whitespace, and depending on how your grammar turns out, this would allow
you to continue to match tokens after the file name.

One note - ANTLR does not perform case-insensitive tokenization.  You've
probably already come across this, but I just wanted to make sure you knew
before you hit that too.

Finally, be sure to turn off backtracking and memoization periodically to
see if your grammar will function without them.  These do incur
performance/memory penalties, and most grammars can be written without
invoking these features.

On Wed, Apr 14, 2010 at 12:57 AM, Brian Catlin <BrianC at sannas.org> wrote:

> The following grammar compiles without any sort of warnings or errors, and
> ANTLRworks doesn't complain either, but when I call the parser, it returns
> a
> warning for each character in the string to be parsed.  I know it has
> something to do with the FILE_NAME rule, but I don't know how to fix it.  I
> suspect that the lexer cannot create a token because the FILE_NAME rule
> could also match any other token (a file name on Windows can contain just
> about any character).  I've structured my grammar so that the FILE_NAME is
> always the last token on a line, so I figured ANTLR would be able to figure
> it out from that context, but that doesn't appear to be the case.  So, how
> can I describe it to ANTLR?
>
>
>
> Any help would be greatly appreciated!
>
>
>
> -Brian
>
>
>
>
>
> DT> dump mbr
>
> -memory-(1) : lexer error 3 :
>
>         at offset 0, near 'D' :
>
>        dump mbr
>
> -memory-(1) : lexer error 3 :
>
>         at offset 1, near 'U' :
>
>        ump mbr
>
> -memory-(1) : lexer error 3 :
>
>         at offset 2, near 'M' :
>
>        mp mbr
>
> -memory-(1) : lexer error 3 :
>
>         at offset 3, near 'P' :
>
>        p mbr
>
> -memory-(1) : lexer error 3 :
>
>         at offset 5, near 'M' :
>
>        mbr
>
> -memory-(1) : lexer error 3 :
>
>         at offset 6, near 'B' :
>
>        br
>
> -memory-(1) : lexer error 3 :
>
>         at offset 7, near 'R' :
>
>        r
>
>
>
> //
>
> // This grammar defines the commands available to the DiskTool (DT) program
>
> //
>
>
>
> grammar Commands;
>
>
>
> options
>
>      {
>
>      output = AST;
>
>      ASTLabelType = pANTLR3_BASE_TREE;
>
>      language = C;
>
>      backtrack = true;
>
>      memoize = true;
>
>      }
>
>
>
> @lexer::header
>
> {
>
> #define     ANTLR3_INLINE_INPUT_ASCII
>
> }
>
>
>
> //+
>
> // Productions
>
> //-
>
>
>
> commands
>
>      :
>
>      (script_command
>
>      | dump_command
>
>      | show_command
>
>      )*;
>
>
>
> script_command
>
>      :  '@'
>
>      FILE_NAME
>
>      ;
>
>
>
> dump_command
>
>      : DUMP
>
>      ( dump_struct
>
>      | dump_block
>
>      | a_file
>
>      );
>
>
>
> show_command
>
>      : SHOW
>
>      ( structure_nouns
>
>      | storage_nouns
>
>      | a_file
>
>      );
>
>
>
> mbr_vbr
>
>      : MBR
>
>      | VBR
>
>      ;
>
>
>
> block_nouns
>
>      : LBN
>
>      | LCN
>
>      | VBN
>
>      | VCN
>
>      ;
>
>
>
> structure_nouns
>
>      : MBR
>
>      | VBR
>
>      ;
>
>
>
> dump_block
>
>
>
>      : block_nouns
>
>      number
>
>      (
>
>      (',' number
>
>      )
>
>      |
>
>      (':' number
>
>      ))?
>
>      DRIVE_NAME?
>
>      ;
>
>
>
> dump_struct
>
>      : mbr_vbr
>
>      ('/' qualifier)?
>
>      DRIVE_NAME?
>
>      ;
>
>
>
> storage_nouns
>
>      : DISK
>
>      | VOLUME
>
>      ;
>
>
>
> a_file
>
>      : FILE
>
>      FILE_NAME
>
>      ;
>
>
>
> number
>
>      : DEC_NUMBER
>
>      | HEX_NUMBER
>
>      ;
>
>
>
> qualifier
>
>      : ALL
>
>      | CODE
>
>      | TABLE
>
>      ;
>
>
>
> //+
>
> // Tokens
>
> //-
>
>
>
> // Verbs
>
>
>
> DUMP        : 'DUMP';
>
> SHOW        : 'SHOW';
>
>
>
> // Nouns
>
>
>
> DISK        : 'DISK';
>
> FILE        : 'FILE';
>
> LBN         : 'LBN';
>
> LCN         : 'LCN';
>
> MBR         : 'MBR';
>
> PBN         : 'PBN';
>
> VBN         : 'VBN';
>
> VBR         : 'VBR';
>
> VCN         : 'VCN';
>
> VOLUME      : 'VOLUME';
>
>
>
> // Qualifiers
>
>
>
> ALL         : 'ALL';
>
> CODE        : 'CODE';
>
> TABLE       : 'TABLE';
>
>
>
> // Miscellaneous tokens
>
>
>
> DRIVE_NAME
>
>      : LETTER ':';
>
>
>
> fragment
>
> LETTER      : 'A'..'Z';
>
>
>
> fragment
>
> DIGIT : '0'..'9';
>
>
>
> fragment
>
> HEX_DIGIT   : (DIGIT | 'A'..'F');
>
>
>
> HEX_NUMBER  : '0X' HEX_DIGIT+;
>
>
>
> DEC_NUMBER  : DIGIT+;
>
>
>
> fragment
>
> FILE_NAME
>
>      :  ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n')+ (('\r'? '\n') | EOF);
>
>
>
> LINE_COMMENT
>
>      : '!' ~('\n'|'\r')* (('\r'? '\n') | EOF) {$channel=HIDDEN;};
>
>
>
> WS    : (' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};
>
>
>
>
>
>
>
> #include <windows.h>
>
> #include <stdio.h>
>
>
>
> #include "CommandsLexer.h"                                              //
> Generated by ANTLR from Commands.g
>
> #include "CommandsParser.h"                                             //
> Generated by ANTLR from Commands.g
>
>
>
>
>
>
>
> void main (int Argc, char* Argv[])
>
> {
>
> DWORD                                     status;
>
> char*                                     ptr;
>
> char                                      command [1024];
>
> DWORD                                     command_len;
>
> pANTLR3_INPUT_STREAM                input;
>
> pANTLR3_COMMON_TOKEN_STREAM         tstream;
>
> pCommandsLexer                            lexer;
>
> pCommandsParser                           parser;
>
> CommandsParser_commands_return      commands_ast;
>
> pANTLR3_COMMON_TREE_NODE_STREAM     nodes;
>
> //pCommandsDumpDecl                       tree_parser;
>
>
>
>
>
>      //+
>
>      // Display our prompt and read a command string from the console
>
>      //-
>
>
>
>      while (TRUE)
>
>            {
>
>            printf ("DT> ");
>
>
>
>            //+
>
>            // Read the entire line
>
>            //-
>
>
>
>            if ((ptr = gets_s ((char *)command, sizeof (command))) != NULL)
>
>                  {
>
>                  command_len = strlen ((char*)command);
>
>
>
>                  //+
>
>                  // Only try to parse the input if there is something there
>
>                  //-
>
>
>
>                  if (command_len > 0)
>
>                        {
>
>
>
>                        //+
>
>                        // Create the input stream
>
>                        //-
>
>
>
>                        if ((input = antlr3NewAsciiStringInPlaceStream
> ((pANTLR3_UINT8)&command, (ANTLR3_UINT64) command_len, NULL)) != 0)
>
>                              {
>
>
>
>                              //+
>
>                              // Tell ANTLR to use upper-case when matching
> tokens
>
>                              //-
>
>
>
>                              input->setUcaseLA (input, ANTLR3_TRUE);
>
>
>
>                              //+
>
>                              // Create a new instance of the lexer using
> our input stream
>
>                              //-
>
>
>
>                              if ((lexer = CommandsLexerNew (input)) != 0)
>
>                                    {
>
>
>
>                                    //+
>
>                                    // Create the token stream
>
>                                    //-
>
>
>
>                                    if ((tstream =
> antlr3CommonTokenStreamSourceNew (ANTLR3_SIZE_HINT, TOKENSOURCE(lexer))) !=
> 0)
>
>                                          {
>
>
>
>                                          //+
>
>                                          // Create a new instance of the
> parser using our lexer
>
>                                          //-
>
>
>
>                                          if ((parser = CommandsParserNew
> (tstream)) != 0)
>
>                                                {
>
>
>
>                                                //+
>
>                                                // Call the parser with the
> start symbol
>
>                                                //-
>
>
>
>                                                commands_ast =
> parser->commands (parser);
>
>
>
>                                                //+
>
>                                                // Check for errors parsing
> the input
>
>                                                //-
>
>
>
>                                                if
> (parser->pParser->rec->state->errorCount == 0)
>
>                                                      {
>
>
>
>                                                      //+
>
>                                                      // The input was
> parsed successfully.  Use the Abstract Syntax Tree
>
>                                                      // which contains a
> linked list of nodes containing the tokens that
>
>                                                      // were parsed
>
>                                                      //-
>
>
>
>                                                      nodes =
> antlr3CommonTreeNodeStreamNewTree (commands_ast.tree, ANTLR3_SIZE_HINT);
>
>                                                      printf ("Commands
> tree: %s\n", commands_ast.tree->toStringTree (commands_ast.tree)->chars);
>
> //                                                    tree_parser =
> CommandsDumpDeclNew (nodes);
>
>
>
> //                                                    tree_parser->decl
> (tree_parser);
>
> //                                                    nodes->free (nodes);
>
> //                                                    tree_parser->free
> (tree_parser);
>
>                                                      }
>
>                                                else
>
>                                                      {
>
>                                                      printf ("Errors found
> during parsing: %d\n", parser->pParser->rec->state->errorCount);
>
>                                                      }
>
>
>
>                                                //+
>
>                                                // We're now done with these
> instances, so free them
>
>                                                //-
>
>
>
>                                                parser->free (parser);
>
>                                                tstream->free (tstream);
>
>                                                lexer->free (lexer);
>
>                                                input->close (input);
>
>                                                }
>
>                                          else
>
>                                                {
>
>                                                status = GetLastError ();
>
>                                                printf ("Error creating
> parser, status = %08x\n", status);
>
>                                                break;
>
>                                                }
>
>
>
>                                          }
>
>                                    else
>
>                                          {
>
>                                          status = GetLastError ();
>
>                                          printf ("Unable to create token
> stream, status = %08x\n", status);
>
>                                          break;
>
>                                          }
>
>
>
>                                    }
>
>                              else
>
>                                    {
>
>                                    status = GetLastError ();
>
>                                    printf ("Unable to create lexer, status
> = %08x\n", status);
>
>                                    break;
>
>                                    }
>
>
>
>                              }
>
>                        else
>
>                              {
>
>                              status = GetLastError ();
>
>                              printf ("Error creating the input stream,
> status = %08x\n", status);
>
>                              break;
>
>                              }
>
>
>
>                        }
>
>
>
>                  }
>
>
>
>
>
>            }     // End while
>
>
>
> }
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From Gogi66 at yandex.ru  Wed Apr 14 01:20:28 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Wed, 14 Apr 2010 12:20:28 +0400
Subject: [antlr-interest] Dynamically generate grammar
In-Reply-To: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
References: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
Message-ID: <124581271233228@web109.yandex.ru>

Hi,

I just started using ANTLR. I have a question about ANTLR features....
Is is possible to generate grammar dynamically. I mean processing input in two steps.

The goal is to retrieve data from a structured text file(different structures). This block will use
grammar that will tell another parser which structure will be.

E.g.
<<${TITLE}>>, ${AUTHOR};      // it is a first grammar that tells which structure of input text will

/*parse this grammar, then parse input text*/

<<News for today>>, John Woo


Sorry for mistakes in English,
best regards,
Ivan Ivanov

From Gogi66 at yandex.ru  Wed Apr 14 01:30:01 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Wed, 14 Apr 2010 12:30:01 +0400
Subject: [antlr-interest] Dynamically generate grammar
In-Reply-To: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
References: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
Message-ID: <72201271233801@web95.yandex.ru>

Hi,

I just started using ANTLR. I have a question about ANTLR features....
Is is possible to generate grammar dynamically. I mean processing input in two steps.

The goal is to retrieve data from a structured text file(different structures). This block will use
grammar that will tell another parser which structure will be.

E.g.
<<${TITLE}>>, ${AUTHOR};      // it is a first grammar that tells which structure of input text will

/*parse this grammar, then parse input text*/

<<News for today>>, John Woo


Sorry for mistakes in English,
best regards,
Ivan Ivanov

From Gogi66 at yandex.ru  Wed Apr 14 01:31:23 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Wed, 14 Apr 2010 12:31:23 +0400
Subject: [antlr-interest] Dynamically generate grammar
In-Reply-To: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
References: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
Message-ID: <72231271233883@web87.yandex.ru>

Hi,

I just started using ANTLR. I have a question about ANTLR features....
Is is possible to generate grammar dynamically. I mean processing input in two steps.

The goal is to retrieve data from a structured text file(different structures). This block will use
grammar that will tell another parser which structure will be.

E.g.
<<${TITLE}>>, ${AUTHOR};      // it is a first grammar that tells which structure of input text will

/*parse this grammar, then parse input text*/

<<News for today>>, John Woo


Sorry for mistakes in English,
best regards,
Ivan Ivanov

From Gogi66 at yandex.ru  Wed Apr 14 01:35:59 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Wed, 14 Apr 2010 12:35:59 +0400
Subject: [antlr-interest] Dynamically generate grammar
In-Reply-To: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
References: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
Message-ID: <77041271234159@web102.yandex.ru>

Hi,

I just started using ANTLR. I have a question about ANTLR features....
Is is possible to generate grammar dynamically. I mean processing input in two steps.

The goal is to retrieve data from a structured text file(different structures). This block will use
grammar that will tell another parser which structure will be.

E.g.
<<${TITLE}>>, ${AUTHOR};      // it is a first grammar that tells which structure of input text will

/*parse this grammar, then parse input text*/

<<News for today>>, John Woo


Sorry for mistakes in English,
best regards,
Ivan Ivanov

From cliff.s.hudson at gmail.com  Wed Apr 14 01:37:03 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Wed, 14 Apr 2010 01:37:03 -0700
Subject: [antlr-interest] Dynamically generate grammar
In-Reply-To: <124581271233228@web109.yandex.ru>
References: <mailman.0.1271233035.16793.antlr-interest@antlr.org>
	<124581271233228@web109.yandex.ru>
Message-ID: <s2x1c0448551004140137odfc2db0ej2e5dbea6e18ba569@mail.gmail.com>

For something like what you have above, it would probably be far easier to
write a simple string splitter which does what you want.  For instance, you
could use a regular expression to find where all of the ${...} parts are and
pull them out (or you could write an ANTLR lexer which does this.)  Then you
grab the remaining bits of string and place them into a list in order with
the ${} tags.  For each input line, you match the stored string against the
line starting from the current position in the line.  If you are at a tag in
your list, you hold on to it, match the next entry in the list, and then
assign all of the characters skipped between the last matched string and the
next matched string to the tag you are holding.  Repeat until the line is
consumed or you come across an error.

In your above example, your lexer would spit out:
1: <<
2: ${TITLE}
3: >>,
4: ${AUTHOR}
5: ;

Suppose your input string were:
<<My book>>, Joe Jones

The algorithm would match the first entry in the list, '<<'.  Since you
aren't holding any tag, you move the 'cursor' to the end of the <<.
You then have a tag, so you hold on to it and go the next entry.
You see '>>,' so you match that.  You grab all the text between the match
position and the last cursor position.  You assign it to the TITLE entry in
your record because that's the tag you are holding.  You then move the
cursor to the end of the '>>,'.
You see the AUTHOR tag, so you hold on to it and go to the next entry.
You see ';' so you match that.  Grab all the text between the match position
and the last cursor position.  Assign it to the AUTHOR entry in your record.
End of the line, you are done.

Easier than writing lever rules would be to just use a regex to pull the ${
... } out of the "grammar" file and split your strings that way.  But it can
be done either way.

2010/4/14 ????? <Gogi66 at yandex.ru>

> Hi,
>
> I just started using ANTLR. I have a question about ANTLR features....
> Is is possible to generate grammar dynamically. I mean processing input in
> two steps.
>
> The goal is to retrieve data from a structured text file(different
> structures). This block will use
> grammar that will tell another parser which structure will be.
>
> E.g.
> <<${TITLE}>>, ${AUTHOR};      // it is a first grammar that tells which
> structure of input text will
>
> /*parse this grammar, then parse input text*/
>
> <<News for today>>, John Woo
>
>
> Sorry for mistakes in English,
> best regards,
> Ivan Ivanov
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From Gogi66 at yandex.ru  Wed Apr 14 01:37:29 2010
From: Gogi66 at yandex.ru (=?koi8-r?B?7MHNxdI=?=)
Date: Wed, 14 Apr 2010 12:37:29 +0400
Subject: [antlr-interest] Dynamically generate grammar
Message-ID: <47551271234249@web110.yandex.ru>

Hi,

I just started using ANTLR. I have a question about ANTLR features....
Is is possible to generate grammar dynamically. I mean processing input in two steps.

The goal is to retrieve data from a structured text file(different structures). This block will use
grammar that will tell another parser which structure will be.

E.g.
<<${TITLE}>>, ${AUTHOR};      // it is a first grammar that tells which structure of input text will

/*parse this grammar, then parse input text*/

<<News for today>>, John Woo


Sorry for mistakes in English,
best regards,
Ivan Ivanov

From BrianC at sannas.org  Wed Apr 14 01:48:51 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Wed, 14 Apr 2010 16:48:51 +0800
Subject: [antlr-interest] Lexer error
In-Reply-To: <l2j1c0448551004140119g21754998l28e19b291d33ecc9@mail.gmail.com>
References: <01c001cadba8$12f33d80$38d9b880$@sannas.org>
	<l2j1c0448551004140119g21754998l28e19b291d33ecc9@mail.gmail.com>
Message-ID: <01d901cadbaf$4fcf5cf0$ef6e16d0$@sannas.org>

Placing the Fragment attribute on FILE_NAME was just the last in a long
series of desperate attempts to try and get it to work.  I too, am surprised
that ANTLR didn't at least warn about it.

 

Thanks for the advice about memoization and backtracking.

 

I modified FILE_NAME to add the quotes, as you suggested, but that didn't
help:

 

FILE_NAME

      :  '"' ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n' | '"')+ '"';

 

Do you have any recommendations on examples that use semantic predicates in
a way that is similar to what I'm trying to do?

 

Thanks!

-Brian

 

From: Cliff Hudson [mailto:cliff.s.hudson at gmail.com] 
Sent: Wednesday, April 14, 2010 16:19
To: BrianC at sannas.org
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Lexer error

 

FILE_NAME is a fragment, so it will never match as a token without another
token referring to it..  Rule a_file thus can never match (and in fact it
seems like you should get an error about that.)

 

You will have a more general problem that FILE_NAME can also match any of
your keywords, and likewise your keywords can match any filename that has
the same text, which means certain filenames will not produce the expected
tokens in your grammar.  Tokens without wildcards match in the order they
are declared, but tokens with wildcards can consume input before preceding
tokens that don't have wildcards which could also match the same input.  

 

There are a couple of ways around this:

1. Teach your lexer more about the input using semantic predicates - these
allow you to switch token rules on an off depending on conditions you set.

2. Ensure your tokens are lexically unambiguous - for instance FILE_NAME
could be surrounded by quotation marks which none of your other tokens use.
This option is probably more desirable, since file names can also contain
whitespace, and depending on how your grammar turns out, this would allow
you to continue to match tokens after the file name.

One note - ANTLR does not perform case-insensitive tokenization.  You've
probably already come across this, but I just wanted to make sure you knew
before you hit that too.

 

Finally, be sure to turn off backtracking and memoization periodically to
see if your grammar will function without them.  These do incur
performance/memory penalties, and most grammars can be written without
invoking these features.

 

On Wed, Apr 14, 2010 at 12:57 AM, Brian Catlin <BrianC at sannas.org> wrote:

The following grammar compiles without any sort of warnings or errors, and
ANTLRworks doesn't complain either, but when I call the parser, it returns a
warning for each character in the string to be parsed.  I know it has
something to do with the FILE_NAME rule, but I don't know how to fix it.  I
suspect that the lexer cannot create a token because the FILE_NAME rule
could also match any other token (a file name on Windows can contain just
about any character).  I've structured my grammar so that the FILE_NAME is
always the last token on a line, so I figured ANTLR would be able to figure
it out from that context, but that doesn't appear to be the case.  So, how
can I describe it to ANTLR?



Any help would be greatly appreciated!



-Brian





DT> dump mbr

-memory-(1) : lexer error 3 :

        at offset 0, near 'D' :

       dump mbr

-memory-(1) : lexer error 3 :

        at offset 1, near 'U' :

       ump mbr

-memory-(1) : lexer error 3 :

        at offset 2, near 'M' :

       mp mbr

-memory-(1) : lexer error 3 :

        at offset 3, near 'P' :

       p mbr

-memory-(1) : lexer error 3 :

        at offset 5, near 'M' :

       mbr

-memory-(1) : lexer error 3 :

        at offset 6, near 'B' :

       br

-memory-(1) : lexer error 3 :

        at offset 7, near 'R' :

       r



//

// This grammar defines the commands available to the DiskTool (DT) program

//



grammar Commands;



options

     {

     output = AST;

     ASTLabelType = pANTLR3_BASE_TREE;

     language = C;

     backtrack = true;

     memoize = true;

     }



@lexer::header

{

#define     ANTLR3_INLINE_INPUT_ASCII

}



//+

// Productions

//-



commands

     :

     (script_command

     | dump_command

     | show_command

     )*;



script_command

     :  '@'

     FILE_NAME

     ;



dump_command

     : DUMP

     ( dump_struct

     | dump_block

     | a_file

     );



show_command

     : SHOW

     ( structure_nouns

     | storage_nouns

     | a_file

     );



mbr_vbr

     : MBR

     | VBR

     ;



block_nouns

     : LBN

     | LCN

     | VBN

     | VCN

     ;



structure_nouns

     : MBR

     | VBR

     ;



dump_block



     : block_nouns

     number

     (

     (',' number

     )

     |

     (':' number

     ))?

     DRIVE_NAME?

     ;



dump_struct

     : mbr_vbr

     ('/' qualifier)?

     DRIVE_NAME?

     ;



storage_nouns

     : DISK

     | VOLUME

     ;



a_file

     : FILE

     FILE_NAME

     ;



number

     : DEC_NUMBER

     | HEX_NUMBER

     ;



qualifier

     : ALL

     | CODE

     | TABLE

     ;



//+

// Tokens

//-



// Verbs



DUMP        : 'DUMP';

SHOW        : 'SHOW';



// Nouns



DISK        : 'DISK';

FILE        : 'FILE';

LBN         : 'LBN';

LCN         : 'LCN';

MBR         : 'MBR';

PBN         : 'PBN';

VBN         : 'VBN';

VBR         : 'VBR';

VCN         : 'VCN';

VOLUME      : 'VOLUME';



// Qualifiers



ALL         : 'ALL';

CODE        : 'CODE';

TABLE       : 'TABLE';



// Miscellaneous tokens



DRIVE_NAME

     : LETTER ':';



fragment

LETTER      : 'A'..'Z';



fragment

DIGIT : '0'..'9';



fragment

HEX_DIGIT   : (DIGIT | 'A'..'F');



HEX_NUMBER  : '0X' HEX_DIGIT+;



DEC_NUMBER  : DIGIT+;



fragment

FILE_NAME

     :  ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n')+ (('\r'? '\n') | EOF);



LINE_COMMENT

     : '!' ~('\n'|'\r')* (('\r'? '\n') | EOF) {$channel=HIDDEN;};



WS    : (' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};







#include <windows.h>

#include <stdio.h>



#include "CommandsLexer.h"                                              //
Generated by ANTLR from Commands.g

#include "CommandsParser.h"                                             //
Generated by ANTLR from Commands.g







void main (int Argc, char* Argv[])

{

DWORD                                     status;

char*                                     ptr;

char                                      command [1024];

DWORD                                     command_len;

pANTLR3_INPUT_STREAM                input;

pANTLR3_COMMON_TOKEN_STREAM         tstream;

pCommandsLexer                            lexer;

pCommandsParser                           parser;

CommandsParser_commands_return      commands_ast;

pANTLR3_COMMON_TREE_NODE_STREAM     nodes;

//pCommandsDumpDecl                       tree_parser;





     //+

     // Display our prompt and read a command string from the console

     //-



     while (TRUE)

           {

           printf ("DT> ");



           //+

           // Read the entire line

           //-



           if ((ptr = gets_s ((char *)command, sizeof (command))) != NULL)

                 {

                 command_len = strlen ((char*)command);



                 //+

                 // Only try to parse the input if there is something there

                 //-



                 if (command_len > 0)

                       {



                       //+

                       // Create the input stream

                       //-



                       if ((input = antlr3NewAsciiStringInPlaceStream
((pANTLR3_UINT8)&command, (ANTLR3_UINT64) command_len, NULL)) != 0)

                             {



                             //+

                             // Tell ANTLR to use upper-case when matching
tokens

                             //-



                             input->setUcaseLA (input, ANTLR3_TRUE);



                             //+

                             // Create a new instance of the lexer using
our input stream

                             //-



                             if ((lexer = CommandsLexerNew (input)) != 0)

                                   {



                                   //+

                                   // Create the token stream

                                   //-



                                   if ((tstream =
antlr3CommonTokenStreamSourceNew (ANTLR3_SIZE_HINT, TOKENSOURCE(lexer))) !=
0)

                                         {



                                         //+

                                         // Create a new instance of the
parser using our lexer

                                         //-



                                         if ((parser = CommandsParserNew
(tstream)) != 0)

                                               {



                                               //+

                                               // Call the parser with the
start symbol

                                               //-



                                               commands_ast =
parser->commands (parser);



                                               //+

                                               // Check for errors parsing
the input

                                               //-



                                               if
(parser->pParser->rec->state->errorCount == 0)

                                                     {



                                                     //+

                                                     // The input was
parsed successfully.  Use the Abstract Syntax Tree

                                                     // which contains a
linked list of nodes containing the tokens that

                                                     // were parsed

                                                     //-



                                                     nodes =
antlr3CommonTreeNodeStreamNewTree (commands_ast.tree, ANTLR3_SIZE_HINT);

                                                     printf ("Commands
tree: %s\n", commands_ast.tree->toStringTree (commands_ast.tree)->chars);

//                                                    tree_parser =
CommandsDumpDeclNew (nodes);



//                                                    tree_parser->decl
(tree_parser);

//                                                    nodes->free (nodes);

//                                                    tree_parser->free
(tree_parser);

                                                     }

                                               else

                                                     {

                                                     printf ("Errors found
during parsing: %d\n", parser->pParser->rec->state->errorCount);

                                                     }



                                               //+

                                               // We're now done with these
instances, so free them

                                               //-



                                               parser->free (parser);

                                               tstream->free (tstream);

                                               lexer->free (lexer);

                                               input->close (input);

                                               }

                                         else

                                               {

                                               status = GetLastError ();

                                               printf ("Error creating
parser, status = %08x\n", status);

                                               break;

                                               }



                                         }

                                   else

                                         {

                                         status = GetLastError ();

                                         printf ("Unable to create token
stream, status = %08x\n", status);

                                         break;

                                         }



                                   }

                             else

                                   {

                                   status = GetLastError ();

                                   printf ("Unable to create lexer, status
= %08x\n", status);

                                   break;

                                   }



                             }

                       else

                             {

                             status = GetLastError ();

                             printf ("Error creating the input stream,
status = %08x\n", status);

                             break;

                             }



                       }



                 }





           }     // End while



}




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

 


From markwright at internode.on.net  Wed Apr 14 03:08:45 2010
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 14 Apr 2010 20:08:45 +1000
Subject: [antlr-interest] Lexer error
In-Reply-To: <01d901cadbaf$4fcf5cf0$ef6e16d0$@sannas.org>
References: <01c001cadba8$12f33d80$38d9b880$@sannas.org>
	<l2j1c0448551004140119g21754998l28e19b291d33ecc9@mail.gmail.com>
	<01d901cadbaf$4fcf5cf0$ef6e16d0$@sannas.org>
Message-ID: <20100414100845.GB23400@internode.on.net>

On Wed, Apr 14, 2010 at 04:48:51PM +0800, Brian Catlin wrote:
> Placing the Fragment attribute on FILE_NAME was just the last in a long
> series of desperate attempts to try and get it to work.  I too, am surprised
> that ANTLR didn't at least warn about it.
> 
>  
> 
> Thanks for the advice about memoization and backtracking.
> 
>  
> 
> I modified FILE_NAME to add the quotes, as you suggested, but that didn't
> help:
> 
>  
> 
> FILE_NAME
> 
>       :  '"' ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n' | '"')+ '"';
> 
>  
> 
> Do you have any recommendations on examples that use semantic predicates in
> a way that is similar to what I'm trying to do?
 
Yes, p. 287 section Keyords as Variables of The Definitive ANTLR Reference.

Regards, Mark
 
> Thanks!
> 
> -Brian
> 
>  
> 
> From: Cliff Hudson [mailto:cliff.s.hudson at gmail.com] 
> Sent: Wednesday, April 14, 2010 16:19
> To: BrianC at sannas.org
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexer error
> 
>  
> 
> FILE_NAME is a fragment, so it will never match as a token without another
> token referring to it..  Rule a_file thus can never match (and in fact it
> seems like you should get an error about that.)
> 
>  
> 
> You will have a more general problem that FILE_NAME can also match any of
> your keywords, and likewise your keywords can match any filename that has
> the same text, which means certain filenames will not produce the expected
> tokens in your grammar.  Tokens without wildcards match in the order they
> are declared, but tokens with wildcards can consume input before preceding
> tokens that don't have wildcards which could also match the same input.  
> 
>  
> 
> There are a couple of ways around this:
> 
> 1. Teach your lexer more about the input using semantic predicates - these
> allow you to switch token rules on an off depending on conditions you set.
> 
> 2. Ensure your tokens are lexically unambiguous - for instance FILE_NAME
> could be surrounded by quotation marks which none of your other tokens use.
> This option is probably more desirable, since file names can also contain
> whitespace, and depending on how your grammar turns out, this would allow
> you to continue to match tokens after the file name.
> 
> One note - ANTLR does not perform case-insensitive tokenization.  You've
> probably already come across this, but I just wanted to make sure you knew
> before you hit that too.
> 
>  
> 
> Finally, be sure to turn off backtracking and memoization periodically to
> see if your grammar will function without them.  These do incur
> performance/memory penalties, and most grammars can be written without
> invoking these features.
> 
>  
> 
> On Wed, Apr 14, 2010 at 12:57 AM, Brian Catlin <BrianC at sannas.org> wrote:
> 
> The following grammar compiles without any sort of warnings or errors, and
> ANTLRworks doesn't complain either, but when I call the parser, it returns a
> warning for each character in the string to be parsed.  I know it has
> something to do with the FILE_NAME rule, but I don't know how to fix it.  I
> suspect that the lexer cannot create a token because the FILE_NAME rule
> could also match any other token (a file name on Windows can contain just
> about any character).  I've structured my grammar so that the FILE_NAME is
> always the last token on a line, so I figured ANTLR would be able to figure
> it out from that context, but that doesn't appear to be the case.  So, how
> can I describe it to ANTLR?
> 
> 
> 
> Any help would be greatly appreciated!
> 
> 
> 
> -Brian
> 
> 
> 
> 
> 
> DT> dump mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 0, near 'D' :
> 
>        dump mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 1, near 'U' :
> 
>        ump mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 2, near 'M' :
> 
>        mp mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 3, near 'P' :
> 
>        p mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 5, near 'M' :
> 
>        mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 6, near 'B' :
> 
>        br
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 7, near 'R' :
> 
>        r
> 
> 
> 
> //
> 
> // This grammar defines the commands available to the DiskTool (DT) program
> 
> //
> 
> 
> 
> grammar Commands;
> 
> 
> 
> options
> 
>      {
> 
>      output = AST;
> 
>      ASTLabelType = pANTLR3_BASE_TREE;
> 
>      language = C;
> 
>      backtrack = true;
> 
>      memoize = true;
> 
>      }
> 
> 
> 
> @lexer::header
> 
> {
> 
> #define     ANTLR3_INLINE_INPUT_ASCII
> 
> }
> 
> 
> 
> //+
> 
> // Productions
> 
> //-
> 
> 
> 
> commands
> 
>      :
> 
>      (script_command
> 
>      | dump_command
> 
>      | show_command
> 
>      )*;
> 
> 
> 
> script_command
> 
>      :  '@'
> 
>      FILE_NAME
> 
>      ;
> 
> 
> 
> dump_command
> 
>      : DUMP
> 
>      ( dump_struct
> 
>      | dump_block
> 
>      | a_file
> 
>      );
> 
> 
> 
> show_command
> 
>      : SHOW
> 
>      ( structure_nouns
> 
>      | storage_nouns
> 
>      | a_file
> 
>      );
> 
> 
> 
> mbr_vbr
> 
>      : MBR
> 
>      | VBR
> 
>      ;
> 
> 
> 
> block_nouns
> 
>      : LBN
> 
>      | LCN
> 
>      | VBN
> 
>      | VCN
> 
>      ;
> 
> 
> 
> structure_nouns
> 
>      : MBR
> 
>      | VBR
> 
>      ;
> 
> 
> 
> dump_block
> 
> 
> 
>      : block_nouns
> 
>      number
> 
>      (
> 
>      (',' number
> 
>      )
> 
>      |
> 
>      (':' number
> 
>      ))?
> 
>      DRIVE_NAME?
> 
>      ;
> 
> 
> 
> dump_struct
> 
>      : mbr_vbr
> 
>      ('/' qualifier)?
> 
>      DRIVE_NAME?
> 
>      ;
> 
> 
> 
> storage_nouns
> 
>      : DISK
> 
>      | VOLUME
> 
>      ;
> 
> 
> 
> a_file
> 
>      : FILE
> 
>      FILE_NAME
> 
>      ;
> 
> 
> 
> number
> 
>      : DEC_NUMBER
> 
>      | HEX_NUMBER
> 
>      ;
> 
> 
> 
> qualifier
> 
>      : ALL
> 
>      | CODE
> 
>      | TABLE
> 
>      ;
> 
> 
> 
> //+
> 
> // Tokens
> 
> //-
> 
> 
> 
> // Verbs
> 
> 
> 
> DUMP        : 'DUMP';
> 
> SHOW        : 'SHOW';
> 
> 
> 
> // Nouns
> 
> 
> 
> DISK        : 'DISK';
> 
> FILE        : 'FILE';
> 
> LBN         : 'LBN';
> 
> LCN         : 'LCN';
> 
> MBR         : 'MBR';
> 
> PBN         : 'PBN';
> 
> VBN         : 'VBN';
> 
> VBR         : 'VBR';
> 
> VCN         : 'VCN';
> 
> VOLUME      : 'VOLUME';
> 
> 
> 
> // Qualifiers
> 
> 
> 
> ALL         : 'ALL';
> 
> CODE        : 'CODE';
> 
> TABLE       : 'TABLE';
> 
> 
> 
> // Miscellaneous tokens
> 
> 
> 
> DRIVE_NAME
> 
>      : LETTER ':';
> 
> 
> 
> fragment
> 
> LETTER      : 'A'..'Z';
> 
> 
> 
> fragment
> 
> DIGIT : '0'..'9';
> 
> 
> 
> fragment
> 
> HEX_DIGIT   : (DIGIT | 'A'..'F');
> 
> 
> 
> HEX_NUMBER  : '0X' HEX_DIGIT+;
> 
> 
> 
> DEC_NUMBER  : DIGIT+;
> 
> 
> 
> fragment
> 
> FILE_NAME
> 
>      :  ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n')+ (('\r'? '\n') | EOF);
> 
> 
> 
> LINE_COMMENT
> 
>      : '!' ~('\n'|'\r')* (('\r'? '\n') | EOF) {$channel=HIDDEN;};
> 
> 
> 
> WS    : (' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};
> 
> 
> 
> 
> 
> 
> 
> #include <windows.h>
> 
> #include <stdio.h>
> 
> 
> 
> #include "CommandsLexer.h"                                              //
> Generated by ANTLR from Commands.g
> 
> #include "CommandsParser.h"                                             //
> Generated by ANTLR from Commands.g
> 
> 
> 
> 
> 
> 
> 
> void main (int Argc, char* Argv[])
> 
> {
> 
> DWORD                                     status;
> 
> char*                                     ptr;
> 
> char                                      command [1024];
> 
> DWORD                                     command_len;
> 
> pANTLR3_INPUT_STREAM                input;
> 
> pANTLR3_COMMON_TOKEN_STREAM         tstream;
> 
> pCommandsLexer                            lexer;
> 
> pCommandsParser                           parser;
> 
> CommandsParser_commands_return      commands_ast;
> 
> pANTLR3_COMMON_TREE_NODE_STREAM     nodes;
> 
> //pCommandsDumpDecl                       tree_parser;
> 
> 
> 
> 
> 
>      //+
> 
>      // Display our prompt and read a command string from the console
> 
>      //-
> 
> 
> 
>      while (TRUE)
> 
>            {
> 
>            printf ("DT> ");
> 
> 
> 
>            //+
> 
>            // Read the entire line
> 
>            //-
> 
> 
> 
>            if ((ptr = gets_s ((char *)command, sizeof (command))) != NULL)
> 
>                  {
> 
>                  command_len = strlen ((char*)command);
> 
> 
> 
>                  //+
> 
>                  // Only try to parse the input if there is something there
> 
>                  //-
> 
> 
> 
>                  if (command_len > 0)
> 
>                        {
> 
> 
> 
>                        //+
> 
>                        // Create the input stream
> 
>                        //-
> 
> 
> 
>                        if ((input = antlr3NewAsciiStringInPlaceStream
> ((pANTLR3_UINT8)&command, (ANTLR3_UINT64) command_len, NULL)) != 0)
> 
>                              {
> 
> 
> 
>                              //+
> 
>                              // Tell ANTLR to use upper-case when matching
> tokens
> 
>                              //-
> 
> 
> 
>                              input->setUcaseLA (input, ANTLR3_TRUE);
> 
> 
> 
>                              //+
> 
>                              // Create a new instance of the lexer using
> our input stream
> 
>                              //-
> 
> 
> 
>                              if ((lexer = CommandsLexerNew (input)) != 0)
> 
>                                    {
> 
> 
> 
>                                    //+
> 
>                                    // Create the token stream
> 
>                                    //-
> 
> 
> 
>                                    if ((tstream =
> antlr3CommonTokenStreamSourceNew (ANTLR3_SIZE_HINT, TOKENSOURCE(lexer))) !=
> 0)
> 
>                                          {
> 
> 
> 
>                                          //+
> 
>                                          // Create a new instance of the
> parser using our lexer
> 
>                                          //-
> 
> 
> 
>                                          if ((parser = CommandsParserNew
> (tstream)) != 0)
> 
>                                                {
> 
> 
> 
>                                                //+
> 
>                                                // Call the parser with the
> start symbol
> 
>                                                //-
> 
> 
> 
>                                                commands_ast =
> parser->commands (parser);
> 
> 
> 
>                                                //+
> 
>                                                // Check for errors parsing
> the input
> 
>                                                //-
> 
> 
> 
>                                                if
> (parser->pParser->rec->state->errorCount == 0)
> 
>                                                      {
> 
> 
> 
>                                                      //+
> 
>                                                      // The input was
> parsed successfully.  Use the Abstract Syntax Tree
> 
>                                                      // which contains a
> linked list of nodes containing the tokens that
> 
>                                                      // were parsed
> 
>                                                      //-
> 
> 
> 
>                                                      nodes =
> antlr3CommonTreeNodeStreamNewTree (commands_ast.tree, ANTLR3_SIZE_HINT);
> 
>                                                      printf ("Commands
> tree: %s\n", commands_ast.tree->toStringTree (commands_ast.tree)->chars);
> 
> //                                                    tree_parser =
> CommandsDumpDeclNew (nodes);
> 
> 
> 
> //                                                    tree_parser->decl
> (tree_parser);
> 
> //                                                    nodes->free (nodes);
> 
> //                                                    tree_parser->free
> (tree_parser);
> 
>                                                      }
> 
>                                                else
> 
>                                                      {
> 
>                                                      printf ("Errors found
> during parsing: %d\n", parser->pParser->rec->state->errorCount);
> 
>                                                      }
> 
> 
> 
>                                                //+
> 
>                                                // We're now done with these
> instances, so free them
> 
>                                                //-
> 
> 
> 
>                                                parser->free (parser);
> 
>                                                tstream->free (tstream);
> 
>                                                lexer->free (lexer);
> 
>                                                input->close (input);
> 
>                                                }
> 
>                                          else
> 
>                                                {
> 
>                                                status = GetLastError ();
> 
>                                                printf ("Error creating
> parser, status = %08x\n", status);
> 
>                                                break;
> 
>                                                }
> 
> 
> 
>                                          }
> 
>                                    else
> 
>                                          {
> 
>                                          status = GetLastError ();
> 
>                                          printf ("Unable to create token
> stream, status = %08x\n", status);
> 
>                                          break;
> 
>                                          }
> 
> 
> 
>                                    }
> 
>                              else
> 
>                                    {
> 
>                                    status = GetLastError ();
> 
>                                    printf ("Unable to create lexer, status
> = %08x\n", status);
> 
>                                    break;
> 
>                                    }
> 
> 
> 
>                              }
> 
>                        else
> 
>                              {
> 
>                              status = GetLastError ();
> 
>                              printf ("Error creating the input stream,
> status = %08x\n", status);
> 
>                              break;
> 
>                              }
> 
> 
> 
>                        }
> 
> 
> 
>                  }
> 
> 
> 
> 
> 
>            }     // End while
> 
> 
> 
> }
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
>  
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From gthouraya at yahoo.fr  Wed Apr 14 04:07:03 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Wed, 14 Apr 2010 11:07:03 +0000 (GMT)
Subject: [antlr-interest] link not available
Message-ID: <905032.48498.qm@web26306.mail.ukl.yahoo.com>

Hi,
please, I can't open this link http://www.antlr.org/showcase.html , please help me.
?


      

From tcorbat at hsr.ch  Wed Apr 14 04:07:14 2010
From: tcorbat at hsr.ch (tcorbat at hsr.ch)
Date: Wed, 14 Apr 2010 13:07:14 +0200
Subject: [antlr-interest] Question about syntactic predicates in lexer rules
Message-ID: <E1FBA77227279347B0AAEFA3C17DBC4836583F2AE3@sid00101.hsr.ch>

Hello

I've got a question about syntactic predicates in lexer rule fragments. I encountered the following problem, while implementing the lexer for a language which can escape line-breaks with a backslash. The intention has been to catch escaped line-breaks in the lexer and just skip them. Below, a simplified version of the rules used. Nevertheless, they are sufficient to reproduce the question. The rules were intended to recognize something like the following. (I use <\n> to represent a linebreak)
---
foo \<\n>
<\n>
---
This works well so far. But, a problem occurs if I remove the whitespace between 'foo' and '\':
---
foo\<\n>
<\n>
---
If I run the parser in ANTLRWorks, with this input I get the following message:
"line 1:3 no viable alternative at character '\'"

I could figure out, that if I remove the alternative "UNIVERSAL_CHARACTER_NAME" from " IDENTIFIER_NONDIGIT", I works fine. I expect ANTLR to try to match that alternative due to the backslash, although it cannot succeed because of the required 'u' or 'U' in this alternative. Subsequently, I receive the error message and two "NEWLINE" tokens on the stream. Actually I had been quite surprised about this outcome and did not expect an alternative outcome due to the missing whitespace. As I expect, that I just do not understand how ANTLR works completely, I've tried to avoid the lexer entering the "UNIVERSAL_CHARACTER_NAME" alternative, by adding a syntactic predicate:
---
fragment
IDENTIFIER_NONDIGIT
                :              ('a'..'z'|'A'..'Z' | '_')+
                |             (UNIVERSAL_CHARACTER_NAME ) => UNIVERSAL_CHARACTER_NAME
                ;
---
That did not work out either. I have still received the error.
But, adding a syntactic predicate in the "IDENTIFIER" rule fixed my problem:

---
IDENTIFIER
                :              (IDENTIFIER_NONDIGIT) ((IDENTIFIER_NONDIGIT) => IDENTIFIER_NONDIGIT | DIGIT)*
                ;
---
This let the lexer create the expected token stream containing "foo" and one "<\n>". Basically, I do not recognize a difference between the two places, beside that one of the rules is a fragment rule, the other is not. Is it not possible to add syntactic predicates in fragment rules? Or did I miss something fundamentally?

Thanks for reading my questions.

Regards
Thomas






Grammar:
grammar simple;

code
                :              IDENTIFIER* NEWLINE
                ;

WS         :
                (' '|'\t')+ {skip();}
                ;

SKIPPED_NEWLINE
                :              '\\\n' {skip();}
                ;

NEWLINE
                :              '\n'
                ;

IDENTIFIER
                :              (IDENTIFIER_NONDIGIT) (IDENTIFIER_NONDIGIT | DIGIT)*
                ;

fragment
IDENTIFIER_NONDIGIT
                :              ('a'..'z'|'A'..'Z' | '_')+
                |             UNIVERSAL_CHARACTER_NAME
                ;

fragment
UNIVERSAL_CHARACTER_NAME
                :              '\\u' HEX_QUAD
                |             '\\U' HEX_QUAD HEX_QUAD
                ;

fragment
HEX_QUAD
                :              HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT
                ;

fragment
HEXADECIMAL_DIGIT
                :     '0'..'9'
                |     'a'..'f'
                |     'A'..'F'
                ;

fragment
DIGIT
                :              '0'..'9'
                ;



From boughtonp at gmail.com  Wed Apr 14 04:09:17 2010
From: boughtonp at gmail.com (Peter Boughton)
Date: Wed, 14 Apr 2010 12:09:17 +0100
Subject: [antlr-interest] link not available
In-Reply-To: <905032.48498.qm@web26306.mail.ukl.yahoo.com>
References: <905032.48498.qm@web26306.mail.ukl.yahoo.com>
Message-ID: <o2w5d97c171004140409m29be042fl1a3c586f777d3a86@mail.gmail.com>

Try http://www.antlr.org/showcase/list ?

From tyler.distad at gmail.com  Wed Apr 14 04:51:30 2010
From: tyler.distad at gmail.com (Tyler Distad)
Date: Wed, 14 Apr 2010 07:51:30 -0400
Subject: [antlr-interest] MismatchedSetException in lexer grammar
Message-ID: <x2r1bb620341004140451z41287321rde9f167efecd8c02@mail.gmail.com>

I have the following grammar:

fragment TAB : '\t';
fragment PRINTABLE : '\u0020'..'\u007F' | TAB;

fragment DELIM: '|||||';
FILE_DELIMITER : DELIM (PRINTABLE ~ '|')+ DELIM;

I have the following sample lexer rules:
|||||12|||||
|||||123|||||

The ANTLR interpreter accepts the first one, but the generated tree diagram
looks like:
FILE_DELIMITER:
 |--DELIM
 |--PRINTABLE
 |--DELIM
(Note there's only one PRINTABLE.)

For the second one, the ANTLR interpreter blows up with a
MismatchedSetException and a diagram like:
FILE_DELIMITER:
  |--DELIM
  |--PRINTABLE
  |--PRINTABLE
  |--MismatchedSetException

This pattern is reproducible: any input with an even number of PRINTABLE
characters succeeds. All odd inputs fail.

Any thoughts?

Tyler Distad

From BrianC at sannas.org  Wed Apr 14 05:17:46 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Wed, 14 Apr 2010 20:17:46 +0800
Subject: [antlr-interest] Lexer error
In-Reply-To: <20100414100845.GB23400@internode.on.net>
References: <01c001cadba8$12f33d80$38d9b880$@sannas.org>
	<l2j1c0448551004140119g21754998l28e19b291d33ecc9@mail.gmail.com>
	<01d901cadbaf$4fcf5cf0$ef6e16d0$@sannas.org>
	<20100414100845.GB23400@internode.on.net>
Message-ID: <01e901cadbcc$7ff192f0$7fd4b8d0$@sannas.org>

Thank you very much!  That solved it.  

This begs the question: Why didn't ANTLR report this?  Seems like a bug to
me, but then I haven't gotten to that part of the book yet (I have it as a
Kindle eBook, which has neither page numbers or any sort of search
capability), and perhaps it is described there.

Again, many thanks!

 -Brian

-----Original Message-----
From: Mark Wright [mailto:markwright at internode.on.net] 
Sent: Wednesday, April 14, 2010 18:09
To: Brian Catlin
Cc: 'Cliff Hudson'; antlr-interest at antlr.org
Subject: Re: Re: [antlr-interest] Lexer error

On Wed, Apr 14, 2010 at 04:48:51PM +0800, Brian Catlin wrote:
> Placing the Fragment attribute on FILE_NAME was just the last in a 
> long series of desperate attempts to try and get it to work.  I too, 
> am surprised that ANTLR didn't at least warn about it.
> 
>  
> 
> Thanks for the advice about memoization and backtracking.
> 
>  
> 
> I modified FILE_NAME to add the quotes, as you suggested, but that 
> didn't
> help:
> 
>  
> 
> FILE_NAME
> 
>       :  '"' ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n' | '"')+ '"';
> 
>  
> 
> Do you have any recommendations on examples that use semantic 
> predicates in a way that is similar to what I'm trying to do?
 
Yes, p. 287 section Keyords as Variables of The Definitive ANTLR Reference.

Regards, Mark
 
> Thanks!
> 
> -Brian
> 
>  
> 
> From: Cliff Hudson [mailto:cliff.s.hudson at gmail.com]
> Sent: Wednesday, April 14, 2010 16:19
> To: BrianC at sannas.org
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Lexer error
> 
>  
> 
> FILE_NAME is a fragment, so it will never match as a token without 
> another token referring to it..  Rule a_file thus can never match (and 
> in fact it seems like you should get an error about that.)
> 
>  
> 
> You will have a more general problem that FILE_NAME can also match any 
> of your keywords, and likewise your keywords can match any filename 
> that has the same text, which means certain filenames will not produce 
> the expected tokens in your grammar.  Tokens without wildcards match 
> in the order they are declared, but tokens with wildcards can consume 
> input before preceding tokens that don't have wildcards which could also
match the same input.
> 
>  
> 
> There are a couple of ways around this:
> 
> 1. Teach your lexer more about the input using semantic predicates - 
> these allow you to switch token rules on an off depending on conditions
you set.
> 
> 2. Ensure your tokens are lexically unambiguous - for instance 
> FILE_NAME could be surrounded by quotation marks which none of your other
tokens use.
> This option is probably more desirable, since file names can also 
> contain whitespace, and depending on how your grammar turns out, this 
> would allow you to continue to match tokens after the file name.
> 
> One note - ANTLR does not perform case-insensitive tokenization.  
> You've probably already come across this, but I just wanted to make 
> sure you knew before you hit that too.
> 
>  
> 
> Finally, be sure to turn off backtracking and memoization periodically 
> to see if your grammar will function without them.  These do incur 
> performance/memory penalties, and most grammars can be written without 
> invoking these features.
> 
>  
> 
> On Wed, Apr 14, 2010 at 12:57 AM, Brian Catlin <BrianC at sannas.org> wrote:
> 
> The following grammar compiles without any sort of warnings or errors, 
> and ANTLRworks doesn't complain either, but when I call the parser, it 
> returns a warning for each character in the string to be parsed.  I 
> know it has something to do with the FILE_NAME rule, but I don't know 
> how to fix it.  I suspect that the lexer cannot create a token because 
> the FILE_NAME rule could also match any other token (a file name on 
> Windows can contain just about any character).  I've structured my 
> grammar so that the FILE_NAME is always the last token on a line, so I 
> figured ANTLR would be able to figure it out from that context, but 
> that doesn't appear to be the case.  So, how can I describe it to ANTLR?
> 
> 
> 
> Any help would be greatly appreciated!
> 
> 
> 
> -Brian
> 
> 
> 
> 
> 
> DT> dump mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 0, near 'D' :
> 
>        dump mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 1, near 'U' :
> 
>        ump mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 2, near 'M' :
> 
>        mp mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 3, near 'P' :
> 
>        p mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 5, near 'M' :
> 
>        mbr
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 6, near 'B' :
> 
>        br
> 
> -memory-(1) : lexer error 3 :
> 
>         at offset 7, near 'R' :
> 
>        r
> 
> 
> 
> //
> 
> // This grammar defines the commands available to the DiskTool (DT) 
> program
> 
> //
> 
> 
> 
> grammar Commands;
> 
> 
> 
> options
> 
>      {
> 
>      output = AST;
> 
>      ASTLabelType = pANTLR3_BASE_TREE;
> 
>      language = C;
> 
>      backtrack = true;
> 
>      memoize = true;
> 
>      }
> 
> 
> 
> @lexer::header
> 
> {
> 
> #define     ANTLR3_INLINE_INPUT_ASCII
> 
> }
> 
> 
> 
> //+
> 
> // Productions
> 
> //-
> 
> 
> 
> commands
> 
>      :
> 
>      (script_command
> 
>      | dump_command
> 
>      | show_command
> 
>      )*;
> 
> 
> 
> script_command
> 
>      :  '@'
> 
>      FILE_NAME
> 
>      ;
> 
> 
> 
> dump_command
> 
>      : DUMP
> 
>      ( dump_struct
> 
>      | dump_block
> 
>      | a_file
> 
>      );
> 
> 
> 
> show_command
> 
>      : SHOW
> 
>      ( structure_nouns
> 
>      | storage_nouns
> 
>      | a_file
> 
>      );
> 
> 
> 
> mbr_vbr
> 
>      : MBR
> 
>      | VBR
> 
>      ;
> 
> 
> 
> block_nouns
> 
>      : LBN
> 
>      | LCN
> 
>      | VBN
> 
>      | VCN
> 
>      ;
> 
> 
> 
> structure_nouns
> 
>      : MBR
> 
>      | VBR
> 
>      ;
> 
> 
> 
> dump_block
> 
> 
> 
>      : block_nouns
> 
>      number
> 
>      (
> 
>      (',' number
> 
>      )
> 
>      |
> 
>      (':' number
> 
>      ))?
> 
>      DRIVE_NAME?
> 
>      ;
> 
> 
> 
> dump_struct
> 
>      : mbr_vbr
> 
>      ('/' qualifier)?
> 
>      DRIVE_NAME?
> 
>      ;
> 
> 
> 
> storage_nouns
> 
>      : DISK
> 
>      | VOLUME
> 
>      ;
> 
> 
> 
> a_file
> 
>      : FILE
> 
>      FILE_NAME
> 
>      ;
> 
> 
> 
> number
> 
>      : DEC_NUMBER
> 
>      | HEX_NUMBER
> 
>      ;
> 
> 
> 
> qualifier
> 
>      : ALL
> 
>      | CODE
> 
>      | TABLE
> 
>      ;
> 
> 
> 
> //+
> 
> // Tokens
> 
> //-
> 
> 
> 
> // Verbs
> 
> 
> 
> DUMP        : 'DUMP';
> 
> SHOW        : 'SHOW';
> 
> 
> 
> // Nouns
> 
> 
> 
> DISK        : 'DISK';
> 
> FILE        : 'FILE';
> 
> LBN         : 'LBN';
> 
> LCN         : 'LCN';
> 
> MBR         : 'MBR';
> 
> PBN         : 'PBN';
> 
> VBN         : 'VBN';
> 
> VBR         : 'VBR';
> 
> VCN         : 'VCN';
> 
> VOLUME      : 'VOLUME';
> 
> 
> 
> // Qualifiers
> 
> 
> 
> ALL         : 'ALL';
> 
> CODE        : 'CODE';
> 
> TABLE       : 'TABLE';
> 
> 
> 
> // Miscellaneous tokens
> 
> 
> 
> DRIVE_NAME
> 
>      : LETTER ':';
> 
> 
> 
> fragment
> 
> LETTER      : 'A'..'Z';
> 
> 
> 
> fragment
> 
> DIGIT : '0'..'9';
> 
> 
> 
> fragment
> 
> HEX_DIGIT   : (DIGIT | 'A'..'F');
> 
> 
> 
> HEX_NUMBER  : '0X' HEX_DIGIT+;
> 
> 
> 
> DEC_NUMBER  : DIGIT+;
> 
> 
> 
> fragment
> 
> FILE_NAME
> 
>      :  ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n')+ (('\r'? '\n') | 
> EOF);
> 
> 
> 
> LINE_COMMENT
> 
>      : '!' ~('\n'|'\r')* (('\r'? '\n') | EOF) {$channel=HIDDEN;};
> 
> 
> 
> WS    : (' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};
> 
> 
> 
> 
> 
> 
> 
> #include <windows.h>
> 
> #include <stdio.h>
> 
> 
> 
> #include "CommandsLexer.h"                                              //
> Generated by ANTLR from Commands.g
> 
> #include "CommandsParser.h"                                             //
> Generated by ANTLR from Commands.g
> 
> 
> 
> 
> 
> 
> 
> void main (int Argc, char* Argv[])
> 
> {
> 
> DWORD                                     status;
> 
> char*                                     ptr;
> 
> char                                      command [1024];
> 
> DWORD                                     command_len;
> 
> pANTLR3_INPUT_STREAM                input;
> 
> pANTLR3_COMMON_TOKEN_STREAM         tstream;
> 
> pCommandsLexer                            lexer;
> 
> pCommandsParser                           parser;
> 
> CommandsParser_commands_return      commands_ast;
> 
> pANTLR3_COMMON_TREE_NODE_STREAM     nodes;
> 
> //pCommandsDumpDecl                       tree_parser;
> 
> 
> 
> 
> 
>      //+
> 
>      // Display our prompt and read a command string from the console
> 
>      //-
> 
> 
> 
>      while (TRUE)
> 
>            {
> 
>            printf ("DT> ");
> 
> 
> 
>            //+
> 
>            // Read the entire line
> 
>            //-
> 
> 
> 
>            if ((ptr = gets_s ((char *)command, sizeof (command))) != 
> NULL)
> 
>                  {
> 
>                  command_len = strlen ((char*)command);
> 
> 
> 
>                  //+
> 
>                  // Only try to parse the input if there is something 
> there
> 
>                  //-
> 
> 
> 
>                  if (command_len > 0)
> 
>                        {
> 
> 
> 
>                        //+
> 
>                        // Create the input stream
> 
>                        //-
> 
> 
> 
>                        if ((input = antlr3NewAsciiStringInPlaceStream 
> ((pANTLR3_UINT8)&command, (ANTLR3_UINT64) command_len, NULL)) != 0)
> 
>                              {
> 
> 
> 
>                              //+
> 
>                              // Tell ANTLR to use upper-case when 
> matching tokens
> 
>                              //-
> 
> 
> 
>                              input->setUcaseLA (input, ANTLR3_TRUE);
> 
> 
> 
>                              //+
> 
>                              // Create a new instance of the lexer 
> using our input stream
> 
>                              //-
> 
> 
> 
>                              if ((lexer = CommandsLexerNew (input)) != 
> 0)
> 
>                                    {
> 
> 
> 
>                                    //+
> 
>                                    // Create the token stream
> 
>                                    //-
> 
> 
> 
>                                    if ((tstream = 
> antlr3CommonTokenStreamSourceNew (ANTLR3_SIZE_HINT, 
> TOKENSOURCE(lexer))) !=
> 0)
> 
>                                          {
> 
> 
> 
>                                          //+
> 
>                                          // Create a new instance of 
> the parser using our lexer
> 
>                                          //-
> 
> 
> 
>                                          if ((parser = 
> CommandsParserNew
> (tstream)) != 0)
> 
>                                                {
> 
> 
> 
>                                                //+
> 
>                                                // Call the parser with 
> the start symbol
> 
>                                                //-
> 
> 
> 
>                                                commands_ast =
> parser->commands (parser);
> 
> 
> 
>                                                //+
> 
>                                                // Check for errors 
> parsing the input
> 
>                                                //-
> 
> 
> 
>                                                if 
> (parser->pParser->rec->state->errorCount == 0)
> 
>                                                      {
> 
> 
> 
>                                                      //+
> 
>                                                      // The input was 
> parsed successfully.  Use the Abstract Syntax Tree
> 
>                                                      // which contains 
> a linked list of nodes containing the tokens that
> 
>                                                      // were parsed
> 
>                                                      //-
> 
> 
> 
>                                                      nodes = 
> antlr3CommonTreeNodeStreamNewTree (commands_ast.tree, 
> ANTLR3_SIZE_HINT);
> 
>                                                      printf ("Commands
> tree: %s\n", commands_ast.tree->toStringTree 
> (commands_ast.tree)->chars);
> 
> //                                                    tree_parser =
> CommandsDumpDeclNew (nodes);
> 
> 
> 
> //                                                    tree_parser->decl
> (tree_parser);
> 
> //                                                    nodes->free (nodes);
> 
> //                                                    tree_parser->free
> (tree_parser);
> 
>                                                      }
> 
>                                                else
> 
>                                                      {
> 
>                                                      printf ("Errors 
> found during parsing: %d\n", parser->pParser->rec->state->errorCount);
> 
>                                                      }
> 
> 
> 
>                                                //+
> 
>                                                // We're now done with 
> these instances, so free them
> 
>                                                //-
> 
> 
> 
>                                                parser->free (parser);
> 
>                                                tstream->free 
> (tstream);
> 
>                                                lexer->free (lexer);
> 
>                                                input->close (input);
> 
>                                                }
> 
>                                          else
> 
>                                                {
> 
>                                                status = GetLastError 
> ();
> 
>                                                printf ("Error creating 
> parser, status = %08x\n", status);
> 
>                                                break;
> 
>                                                }
> 
> 
> 
>                                          }
> 
>                                    else
> 
>                                          {
> 
>                                          status = GetLastError ();
> 
>                                          printf ("Unable to create 
> token stream, status = %08x\n", status);
> 
>                                          break;
> 
>                                          }
> 
> 
> 
>                                    }
> 
>                              else
> 
>                                    {
> 
>                                    status = GetLastError ();
> 
>                                    printf ("Unable to create lexer, 
> status = %08x\n", status);
> 
>                                    break;
> 
>                                    }
> 
> 
> 
>                              }
> 
>                        else
> 
>                              {
> 
>                              status = GetLastError ();
> 
>                              printf ("Error creating the input stream, 
> status = %08x\n", status);
> 
>                              break;
> 
>                              }
> 
> 
> 
>                        }
> 
> 
> 
>                  }
> 
> 
> 
> 
> 
>            }     // End while
> 
> 
> 
> }
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 
>  
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From foxterri2 at hotmail.com  Wed Apr 14 05:48:43 2010
From: foxterri2 at hotmail.com (foxterri foxterri)
Date: Wed, 14 Apr 2010 12:48:43 +0000
Subject: [antlr-interest] Language translation using ANTLR?
Message-ID: <SNT140-w2545DD9018B2ADFE260C93F4100@phx.gbl>




Hi

I want to make a translator, which can translate Java source code into C++
source code. But I am not sure how to do this using ANTLR.What is the best way
for doing this?


I have looked at an Article written in 2004 by Terence Parr:
http://www.antlr.org/wiki/display/ST/Language+Translation+Using+ANTLR+and+StringTemplate

This article describes how to translate Cminus to either Java, Python or pseudo
bytecodes using string templates. Since this article is from 2004 and that I
cannot find the code example, is this still an efficience way of
translating from source code to source code using ANTLR, even though Java and
C++ are much more complex than the Cminus example?
And can
anyone find the code example? It is mentioned in the article that the software
is compressed in the cminus.tar.gz. But where is the link to this this file, so
I can follow the examples by my self. I managed to find the Cminus grammar at
http://media.pragprog.com/titles/tpantlr/code/trees/CMinus/CMinus.g but the
other files I cannot find.


I hope you guys can help me in the right direction for making such a translator.

Best regards
Glen


 		 	   		  
_________________________________________________________________
The New Busy is not the too busy. Combine all your e-mail accounts with Hotmail.
http://www.windowslive.com/campaign/thenewbusy?tile=multiaccount&ocid=PID28326::T:WLMTAGL:ON:WL:en-US:WM_HMP:042010_4

From boughtonp at gmail.com  Wed Apr 14 05:55:46 2010
From: boughtonp at gmail.com (Peter Boughton)
Date: Wed, 14 Apr 2010 13:55:46 +0100
Subject: [antlr-interest] link not available
In-Reply-To: <595811.50854.qm@web26303.mail.ukl.yahoo.com>
References: <o2w5d97c171004140409m29be042fl1a3c586f777d3a86@mail.gmail.com> 
	<595811.50854.qm@web26303.mail.ukl.yahoo.com>
Message-ID: <o2j5d97c171004140555q69c64f77x679103d30d7aa78e@mail.gmail.com>

> Gouasmi Thouraya <gthouraya at yahoo.fr> wrote:
> I am need to a B method, but, it's not available.

I'm not quite sure what you're saying.

http://www.antlr.org/showcase.html does not exist - it returns a 404
File Not Found, and seems to have done so for years.

I did a trivial Google search to discover that the new URL for that
page is http://www.antlr.org/showcase/list

If that link does not work from your end, you can check Google's cached version:
http://webcache.googleusercontent.com/search?q=cache:aKLoor-I4MEJ:www.antlr.org/showcase/list+showcase+antlr.org

Alternatively, you can use the Wayback Machine from Archive.org to see
cached versions of any page, eg:
http://web.archive.org/web/20080625085630/http://www.antlr.org/showcase/list
http://web.archive.org/web/20020802082223/http://www.antlr.org/showcase.html


If that still doesn't help, you'll need to reword what you're asking.

From sebastien.kirche at gmail.com  Wed Apr 14 10:10:21 2010
From: sebastien.kirche at gmail.com (=?ISO-8859-1?Q?S=E9bastien_Kirche?=)
Date: Wed, 14 Apr 2010 19:10:21 +0200
Subject: [antlr-interest] CommonTree -> AST conversion ?
In-Reply-To: <4BC4C4FF.5080106@certiv.net>
References: <l2s5b451b0b1004121116xea429c0dx5e00e601eff05fb@mail.gmail.com>
	<4BC37711.8060608@certiv.net>
	<k2v5b451b0b1004130212id6df4228i5637a95af7fe4059@mail.gmail.com>
	<4BC4C4FF.5080106@certiv.net>
Message-ID: <q2n5b451b0b1004141010n5ff48077kc8cb07e452de883f@mail.gmail.com>

Le 13 avril 2010 21:24, Gerald Rosenberg <gerald at certiv.net> a ?crit :

>  ------ Original Message (Tuesday, April 13, 2010 11:12:53
> AM) From: S?bastien Kirche ------
> Subject: Re: [antlr-interest] CommonTree -> AST conversion ?
>
> Do you mean to generate the tree walker by writing a tree grammar on top of
> my parser grammar, or am I missing an antlr feature ?
>
> Yes, just write a simple tree pattern matcher and have Antlr generate the
> tree walker code.  Lots of examples and more explanation in Language
> Implementation Patterns<http://pragprog.com/titles/tpdsl/language-design-patterns>.
> http://www.antlr.org/wiki/display/ANTLR3/Tree+pattern+matching
>
>  [...]

>  And I also find quite ugly the mix of grammar code with java code : I
> fear that when my grammar will grow the maintenance of the resulting code
> will become hard.
>
> Yes, best to minimize the mix.  You can either use the superclass option (
> http://www.antlr.org/wiki/display/ANTLR3/Grammar+options) or, better, set
> a helper class on the parser that can then be called from the actions.
>
>
Yes, decoupling the application-specific code from the parser code with a
helper class sound a reasonable solution. I will try that.
And thanks for your documentation pointers.
-- 
S?bastien Kirche

From troy.daniels at baesystems.com  Wed Apr 14 10:22:48 2010
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Wed, 14 Apr 2010 13:22:48 -0400
Subject: [antlr-interest] Dynamically generate grammar
In-Reply-To: <s2x1c0448551004140137odfc2db0ej2e5dbea6e18ba569@mail.gmail.com>
Message-ID: <20100414172303.97F9A3418449@www.antlr.org>

If you will eventually have a complicated enough grammar that you want a real parser for both passes, that is possible but complicated.  You would need to write a parser for your meta-grammar, which probably uses StringTemplate to generate the grammar for your text input.  Then you would have to call the main Antlr class to build the parser, use javax.tools.JavaCompiler the compile the code and ensure that the code ended up in the classpath.  You could then create an instance of the new parser/lexer (probably with Class.forName and other reflection methods) and use that to parse the actual input.

So it is possible, but you probably do not want to do it if you can avoid it.

Troy

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cliff Hudson
> Sent: Wednesday, April 14, 2010 4:37 AM
> To: ?????
> Cc: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] Dynamically generate grammar
> 
> For something like what you have above, it would probably be 
> far easier to write a simple string splitter which does what 
> you want.  For instance, you could use a regular expression 
> to find where all of the ${...} parts are and pull them out 
> (or you could write an ANTLR lexer which does this.)  Then 
> you grab the remaining bits of string and place them into a 
> list in order with the ${} tags.  For each input line, you 
> match the stored string against the line starting from the 
> current position in the line.  If you are at a tag in your 
> list, you hold on to it, match the next entry in the list, 
> and then assign all of the characters skipped between the 
> last matched string and the next matched string to the tag 
> you are holding.  Repeat until the line is consumed or you 
> come across an error.
> 
> In your above example, your lexer would spit out:
> 1: <<
> 2: ${TITLE}
> 3: >>,
> 4: ${AUTHOR}
> 5: ;
> 
> Suppose your input string were:
> <<My book>>, Joe Jones
> 
> The algorithm would match the first entry in the list, '<<'.  
> Since you aren't holding any tag, you move the 'cursor' to 
> the end of the <<.
> You then have a tag, so you hold on to it and go the next entry.
> You see '>>,' so you match that.  You grab all the text 
> between the match position and the last cursor position.  You 
> assign it to the TITLE entry in your record because that's 
> the tag you are holding.  You then move the cursor to the end 
> of the '>>,'.
> You see the AUTHOR tag, so you hold on to it and go to the next entry.
> You see ';' so you match that.  Grab all the text between the 
> match position and the last cursor position.  Assign it to 
> the AUTHOR entry in your record.
> End of the line, you are done.
> 
> Easier than writing lever rules would be to just use a regex 
> to pull the ${ ... } out of the "grammar" file and split your 
> strings that way.  But it can be done either way.
> 
> 2010/4/14 ????? <Gogi66 at yandex.ru>
> 
> > Hi,
> >
> > I just started using ANTLR. I have a question about ANTLR 
> features....
> > Is is possible to generate grammar dynamically. I mean processing 
> > input in two steps.
> >
> > The goal is to retrieve data from a structured text file(different 
> > structures). This block will use grammar that will tell 
> another parser 
> > which structure will be.
> >
> > E.g.
> > <<${TITLE}>>, ${AUTHOR};      // it is a first grammar that 
> tells which
> > structure of input text will
> >
> > /*parse this grammar, then parse input text*/
> >
> > <<News for today>>, John Woo
> >
> >
> > Sorry for mistakes in English,
> > best regards,
> > Ivan Ivanov
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From cummings at kjchome.homeip.net  Wed Apr 14 10:50:58 2010
From: cummings at kjchome.homeip.net (Kevin J. Cummings)
Date: Wed, 14 Apr 2010 13:50:58 -0400
Subject: [antlr-interest] MismatchedSetException in lexer grammar
In-Reply-To: <x2r1bb620341004140451z41287321rde9f167efecd8c02@mail.gmail.com>
References: <x2r1bb620341004140451z41287321rde9f167efecd8c02@mail.gmail.com>
Message-ID: <4BC60082.7040208@kjchome.homeip.net>

On 04/14/2010 07:51 AM, Tyler Distad wrote:
> I have the following grammar:
> 
> fragment TAB : '\t';
> fragment PRINTABLE : '\u0020'..'\u007F' | TAB;
> 
> fragment DELIM: '|||||';
> FILE_DELIMITER : DELIM (PRINTABLE ~ '|')+ DELIM;

The group (PRINTABLE ~'|') does not do what you want it to.

It will match any pair of characters of which the first is a PRINTABLE
and the second is not a '|' character.  Thus your grammar only matches
even numbers of characters between your delimiters....

> I have the following sample lexer rules:
> |||||12|||||
> |||||123|||||
> 
> The ANTLR interpreter accepts the first one, but the generated tree diagram
> looks like:
> FILE_DELIMITER:
>  |--DELIM
>  |--PRINTABLE
>  |--DELIM
> (Note there's only one PRINTABLE.)
> 
> For the second one, the ANTLR interpreter blows up with a
> MismatchedSetException and a diagram like:
> FILE_DELIMITER:
>   |--DELIM
>   |--PRINTABLE
>   |--PRINTABLE
>   |--MismatchedSetException
> 
> This pattern is reproducible: any input with an even number of PRINTABLE
> characters succeeds. All odd inputs fail.
> 
> Any thoughts?
> 
> Tyler Distad
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


-- 
Kevin J. Cummings
kjchome at rcn.com
cummings at kjchome.homeip.net
cummings at kjc386.framingham.ma.us
Registered Linux User #1232 (http://counter.li.org)

From williamvdoorn at gmail.com  Wed Apr 14 11:27:52 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Wed, 14 Apr 2010 20:27:52 +0200
Subject: [antlr-interest] Implementing main method in ANTLR
Message-ID: <i2p6eb53c7e1004141127s230d1343y2e44348df4f52f95@mail.gmail.com>

Hello,

I've been working with ANTLR for quite some time now - and now I want to
implement a main method per file. However, I really have no idea how to do
this. I'm generating AST trees and then walk over those. But, how would I
implement a main method?

If anyone has an idea/approach on how to go about it - please tell me,
thanks.

William v. Doorn

From cliff.s.hudson at gmail.com  Wed Apr 14 11:39:52 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Wed, 14 Apr 2010 11:39:52 -0700
Subject: [antlr-interest] Implementing main method in ANTLR
In-Reply-To: <i2p6eb53c7e1004141127s230d1343y2e44348df4f52f95@mail.gmail.com>
References: <i2p6eb53c7e1004141127s230d1343y2e44348df4f52f95@mail.gmail.com>
Message-ID: <u2h1c0448551004141139l7d654cd2ya971e3950d64963@mail.gmail.com>

A simple main method would be one which determines where the input is going
to be coming from, then creates an input stream based on that location (for
instance, an ANTLRStringStream for something from a string, or
ANTLRFileStream for something from a file.)  Then you create your Lexer and
pass that input to the lexer.  You then create a token stream, such as
CommonTokenStream and pass it your lexer.  You then create your parser and
pass it your token stream.  You then invoke which ever rule you wish on your
parser - typically your top level rule whatever that may be.  If you are
using a tree parser, your parser call will return a tree.  You would then
instantiate your tree parser, and invoke one of its rules passing in your
tree.  Repeat this sequence for as many inputs as you desire.

On Wed, Apr 14, 2010 at 11:27 AM, William v Doorn
<williamvdoorn at gmail.com>wrote:

> Hello,
>
> I've been working with ANTLR for quite some time now - and now I want to
> implement a main method per file. However, I really have no idea how to do
> this. I'm generating AST trees and then walk over those. But, how would I
> implement a main method?
>
> If anyone has an idea/approach on how to go about it - please tell me,
> thanks.
>
> William v. Doorn
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From williamvdoorn at gmail.com  Wed Apr 14 11:46:11 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Wed, 14 Apr 2010 20:46:11 +0200
Subject: [antlr-interest] Implementing main method in ANTLR
In-Reply-To: <u2h1c0448551004141139l7d654cd2ya971e3950d64963@mail.gmail.com>
References: <i2p6eb53c7e1004141127s230d1343y2e44348df4f52f95@mail.gmail.com>
	<u2h1c0448551004141139l7d654cd2ya971e3950d64963@mail.gmail.com>
Message-ID: <y2j6eb53c7e1004141146n5f2156f8o7a3f97fe96100261@mail.gmail.com>

Hello --

I don't fully understand it yet, now my top-level rule is just a rule who
defines a list of lines. But - if I start parsing at the main method - those
other functions in the files aren't parsed and when I'm parsing them and I
have a print statement there it will print right away.

So I kind of need to parse everything and store it in my java-classes,
without executing anything in the functions - is this possible, would this
require much editting?

Thanks,

William van Doorn

2010/4/14 Cliff Hudson <cliff.s.hudson at gmail.com>

> A simple main method would be one which determines where the input is going
> to be coming from, then creates an input stream based on that location (for
> instance, an ANTLRStringStream for something from a string, or
> ANTLRFileStream for something from a file.)  Then you create your Lexer and
> pass that input to the lexer.  You then create a token stream, such as
> CommonTokenStream and pass it your lexer.  You then create your parser and
> pass it your token stream.  You then invoke which ever rule you wish on your
> parser - typically your top level rule whatever that may be.  If you are
> using a tree parser, your parser call will return a tree.  You would then
> instantiate your tree parser, and invoke one of its rules passing in your
> tree.  Repeat this sequence for as many inputs as you desire.
>
> On Wed, Apr 14, 2010 at 11:27 AM, William v Doorn <williamvdoorn at gmail.com
> > wrote:
>
>> Hello,
>>
>> I've been working with ANTLR for quite some time now - and now I want to
>> implement a main method per file. However, I really have no idea how to do
>> this. I'm generating AST trees and then walk over those. But, how would I
>> implement a main method?
>>
>> If anyone has an idea/approach on how to go about it - please tell me,
>> thanks.
>>
>> William v. Doorn
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From cliff.s.hudson at gmail.com  Wed Apr 14 11:52:04 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Wed, 14 Apr 2010 11:52:04 -0700
Subject: [antlr-interest] Implementing main method in ANTLR
In-Reply-To: <y2j6eb53c7e1004141146n5f2156f8o7a3f97fe96100261@mail.gmail.com>
References: <i2p6eb53c7e1004141127s230d1343y2e44348df4f52f95@mail.gmail.com>
	<u2h1c0448551004141139l7d654cd2ya971e3950d64963@mail.gmail.com>
	<y2j6eb53c7e1004141146n5f2156f8o7a3f97fe96100261@mail.gmail.com>
Message-ID: <y2v1c0448551004141152i8f91e9c8l8693162d422c668b@mail.gmail.com>

I guess I don't understand what exactly it is you are asking.  What do you
mean a 'main method per file'?  What other functions in which files?

On Wed, Apr 14, 2010 at 11:46 AM, William v Doorn
<williamvdoorn at gmail.com>wrote:

> Hello --
>
> I don't fully understand it yet, now my top-level rule is just a rule who
> defines a list of lines. But - if I start parsing at the main method - those
> other functions in the files aren't parsed and when I'm parsing them and I
> have a print statement there it will print right away.
>
> So I kind of need to parse everything and store it in my java-classes,
> without executing anything in the functions - is this possible, would this
> require much editting?
>
> Thanks,
>
> William van Doorn
>
> 2010/4/14 Cliff Hudson <cliff.s.hudson at gmail.com>
>
> A simple main method would be one which determines where the input is going
>> to be coming from, then creates an input stream based on that location (for
>> instance, an ANTLRStringStream for something from a string, or
>> ANTLRFileStream for something from a file.)  Then you create your Lexer and
>> pass that input to the lexer.  You then create a token stream, such as
>> CommonTokenStream and pass it your lexer.  You then create your parser and
>> pass it your token stream.  You then invoke which ever rule you wish on your
>> parser - typically your top level rule whatever that may be.  If you are
>> using a tree parser, your parser call will return a tree.  You would then
>> instantiate your tree parser, and invoke one of its rules passing in your
>> tree.  Repeat this sequence for as many inputs as you desire.
>>
>> On Wed, Apr 14, 2010 at 11:27 AM, William v Doorn <
>> williamvdoorn at gmail.com> wrote:
>>
>>> Hello,
>>>
>>> I've been working with ANTLR for quite some time now - and now I want to
>>> implement a main method per file. However, I really have no idea how to
>>> do
>>> this. I'm generating AST trees and then walk over those. But, how would I
>>> implement a main method?
>>>
>>> If anyone has an idea/approach on how to go about it - please tell me,
>>> thanks.
>>>
>>> William v. Doorn
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe:
>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>
>>
>>
>

From williamvdoorn at gmail.com  Wed Apr 14 11:56:51 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Wed, 14 Apr 2010 20:56:51 +0200
Subject: [antlr-interest] Implementing main method in ANTLR
In-Reply-To: <y2v1c0448551004141152i8f91e9c8l8693162d422c668b@mail.gmail.com>
References: <i2p6eb53c7e1004141127s230d1343y2e44348df4f52f95@mail.gmail.com>
	<u2h1c0448551004141139l7d654cd2ya971e3950d64963@mail.gmail.com>
	<y2j6eb53c7e1004141146n5f2156f8o7a3f97fe96100261@mail.gmail.com>
	<y2v1c0448551004141152i8f91e9c8l8693162d422c668b@mail.gmail.com>
Message-ID: <s2o6eb53c7e1004141156qc8fe5eb1me64d68b6524fef9e@mail.gmail.com>

Let's take this as an example:

nummer x() { return 3+5; }

void main_method() { print x(); }

Here, in a normal language - the nummer x will only be executed when the
main method calls it. Now in my grammar, it just walks over the lines in the
files and executes the statements inside the function. This is not what I
want. I only want to execute the pieces of code which are called in the main
method.

I've attached my grammar/tree walker,

Thanks;

William van Doorn

2010/4/14 Cliff Hudson <cliff.s.hudson at gmail.com>

> I guess I don't understand what exactly it is you are asking.  What do you
> mean a 'main method per file'?  What other functions in which files?
>
>
> On Wed, Apr 14, 2010 at 11:46 AM, William v Doorn <williamvdoorn at gmail.com
> > wrote:
>
>> Hello --
>>
>> I don't fully understand it yet, now my top-level rule is just a rule who
>> defines a list of lines. But - if I start parsing at the main method - those
>> other functions in the files aren't parsed and when I'm parsing them and I
>> have a print statement there it will print right away.
>>
>> So I kind of need to parse everything and store it in my java-classes,
>> without executing anything in the functions - is this possible, would this
>> require much editting?
>>
>> Thanks,
>>
>> William van Doorn
>>
>>  2010/4/14 Cliff Hudson <cliff.s.hudson at gmail.com>
>>
>> A simple main method would be one which determines where the input is
>>> going to be coming from, then creates an input stream based on that location
>>> (for instance, an ANTLRStringStream for something from a string, or
>>> ANTLRFileStream for something from a file.)  Then you create your Lexer and
>>> pass that input to the lexer.  You then create a token stream, such as
>>> CommonTokenStream and pass it your lexer.  You then create your parser and
>>> pass it your token stream.  You then invoke which ever rule you wish on your
>>> parser - typically your top level rule whatever that may be.  If you are
>>> using a tree parser, your parser call will return a tree.  You would then
>>> instantiate your tree parser, and invoke one of its rules passing in your
>>> tree.  Repeat this sequence for as many inputs as you desire.
>>>
>>> On Wed, Apr 14, 2010 at 11:27 AM, William v Doorn <
>>> williamvdoorn at gmail.com> wrote:
>>>
>>>> Hello,
>>>>
>>>> I've been working with ANTLR for quite some time now - and now I want to
>>>> implement a main method per file. However, I really have no idea how to
>>>> do
>>>> this. I'm generating AST trees and then walk over those. But, how would
>>>> I
>>>> implement a main method?
>>>>
>>>> If anyone has an idea/approach on how to go about it - please tell me,
>>>> thanks.
>>>>
>>>> William v. Doorn
>>>>
>>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>>> Unsubscribe:
>>>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>>>
>>>
>>>
>>
>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Grammar.g
Type: application/octet-stream
Size: 2113 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100414/e90d32c5/attachment.obj 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: GrammarWalker.g
Type: application/octet-stream
Size: 2209 bytes
Desc: not available
Url : http://www.antlr.org/pipermail/antlr-interest/attachments/20100414/e90d32c5/attachment-0001.obj 

From anthonyu at cs.ucla.edu  Wed Apr 14 15:53:56 2010
From: anthonyu at cs.ucla.edu (Anthony Urso)
Date: Wed, 14 Apr 2010 15:53:56 -0700
Subject: [antlr-interest] The right way to walk if/then/else clauses that
	contain multiple statements
Message-ID: <x2vba72f77f1004141553x7bc793dewfd69c5e44ce57180@mail.gmail.com>

I have a translator from a DSL to Java that mostly works.

I peeked behind the scenes and used trial and error to make a way to
get a working if/then/else walker that could handle multiple elseif
clauses.  I ended up passing the magic list_xxx variables into my
string template, and then doing parallel iteration over them.  I don't
think that is the correct way, unfortunately, and now that I want to
upgrade the walker to handle multiple statements per clause, I have no
idea how to do it.

What is the correct way to do this?

Thanks,
Anthony

===

grammar G;

statement:
    ifStatement;

ifStatement :
  'if'^ expression 'then'! statement+
 ('elseif' expression 'then'! statement+)*
 ('else' statement+)?
  'end'! 'if'!;

tree grammar Gtw;

statement:
   ^('if' tst=expression stmt=statement
    ('elseif' eitst+=expression eistmt+=statement)*
    ('else' estmt=statement)?) -> ifelseifelse(tst={tst}, stmt={stmt},
eitst={list_eitst},

eistmt={list_eistmt}, estmt={estmt});

group Gstg;

ifelseifelse(tst, stmt, eitst, eistmt, estmt) ::= <<
if (<tst>) {
  <stmt>
<if (eistmt)>
<eitst, eistmt: { t, s | \} else if (<t>) \{
  <s>
}>
<endif>
<if (estmt)>
} else {
  <estmt>
<endif>
}
>>

From BrianC at sannas.org  Wed Apr 14 19:54:19 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Thu, 15 Apr 2010 10:54:19 +0800
Subject: [antlr-interest] C Target: setUcaseLA bug?
Message-ID: <029101cadc46$f33e7aa0$d9bb6fe0$@sannas.org>

Is setUcaseLA known to work in ANTLR3c-3.2?  At the beginning of my
generated lexer routine mTokens, it switches on LA(1) trying to build a
token, but LA(1) is returning the lowercase input character.  As you can see
below, I call setUcaseLA immediately after the input stream was created.

 

 

#include <windows.h>

#include <stdio.h>

 

#include "CommandsLexer.h"                                              //
Generated by ANTLR from Commands.g

#include "CommandsParser.h"                                             //
Generated by ANTLR from Commands.g

 

 

 

void main (int Argc, char* Argv[])

{

DWORD                                     status;

char*                                     ptr;

char                                      command [1024];

DWORD                                     command_len;

pANTLR3_INPUT_STREAM                input;

pANTLR3_COMMON_TOKEN_STREAM         tstream;

pCommandsLexer                            lexer;

pCommandsParser                           parser;

CommandsParser_commands_return      commands_ast;

pANTLR3_COMMON_TREE_NODE_STREAM     nodes;

//pCommandsDumpDecl                       tree_parser;

 

 

      //+

      // Display our prompt and read a command string from the console

      //-

 

      while (TRUE)

            {

            printf ("DT> ");

            

            //+

            // Read the entire line

            //-

 

            if ((ptr = gets_s ((char *)command, sizeof (command))) != NULL)

                  {

                  command_len = strlen ((char*)command);

 

                  //+

                  // Only try to parse the input if there is something there

                  //-

 

                  if (command_len > 0)

                        {

 

                        //+

                        // Create the input stream

                        //-

 

                        if ((input = antlr3NewAsciiStringInPlaceStream
((pANTLR3_UINT8)&command, (ANTLR3_UINT64) command_len, NULL)) != 0)

                              {

 

                              //+

                              // Tell ANTLR to use upper-case when matching
tokens

                              //-

 

                              input->setUcaseLA (input, ANTLR3_TRUE);

 

                              //+

                              // Create a new instance of the lexer using
our input stream

                              //-

 

                              if ((lexer = CommandsLexerNew (input)) != 0)

                                    {

 

                                    //+

                                    // Create the token stream

                                    //-

 

                                    if ((tstream =
antlr3CommonTokenStreamSourceNew (ANTLR3_SIZE_HINT, TOKENSOURCE(lexer))) !=
0)

                                          {

 

                                          //+

                                          // Create a new instance of the
parser using our lexer

                                          //-

 

                                          if ((parser = CommandsParserNew
(tstream)) != 0)

                                                {

 

                                                //+

                                                // Call the parser with the
start symbol

                                                //-

 

                                                commands_ast =
parser->commands (parser); 

 

                                                //+

                                                // Check for errors parsing
the input

                                                //-

 

                                                if
(parser->pParser->rec->state->errorCount == 0)

                                                      {

 

                                                      //+

                                                      // The input was
parsed successfully.  Use the Abstract Syntax Tree

                                                      // which contains a
linked list of nodes containing the tokens that

                                                      // were parsed

                                                      //-

 

                                                      nodes =
antlr3CommonTreeNodeStreamNewTree (commands_ast.tree, ANTLR3_SIZE_HINT);

                                                      printf ("Commands
tree: %s\n", commands_ast.tree->toStringTree (commands_ast.tree)->chars);

//                                                    tree_parser =
CommandsDumpDeclNew (nodes);

 

//                                                    tree_parser->decl
(tree_parser);

//                                                    nodes->free (nodes);

//                                                    tree_parser->free
(tree_parser);

                                                      }

                                                else

                                                      {

                                                      printf ("Errors found
during parsing: %d\n", parser->pParser->rec->state->errorCount);

                                                      }

 

                                                //+

                                                // We're now done with these
instances, so free them

                                                //-

 

                                                parser->free (parser);

                                                tstream->free (tstream);

                                                lexer->free (lexer);

                                                input->close (input);

                                                }

                                          else

                                                {

                                                status = GetLastError ();

                                                printf ("Error creating
parser, status = %08x\n", status);

                                                break;

                                                }

 

                                          }

                                    else

                                          {

                                          status = GetLastError ();

                                          printf ("Unable to create token
stream, status = %08x\n", status);

                                          break;

                                          }

 

                                    }

                              else

                                    {

                                    status = GetLastError ();

                                    printf ("Unable to create lexer, status
= %08x\n", status);

                                    break;

                                    }

 

                              }

                        else

                              {

                              status = GetLastError ();

                              printf ("Error creating the input stream,
status = %08x\n", status);

                              break;

                              }

 

                        }

 

                  }

 

 

            }     // End while

 

}

 

 

//

// This grammar defines the commands available to the DiskTool (DT) program

//

 

grammar Commands;

 

options 

      {

      output = AST;

      ASTLabelType = pANTLR3_BASE_TREE;

      language = C;

      backtrack = true;

      memoize = true;

      }

 

@lexer::header

{

#define     ANTLR3_INLINE_INPUT_ASCII

}

 

//+

// Productions

//-

 

commands

      :

      (script_command

      | dump_command

      | show_command

      )*;

 

script_command

      :  '@' 

      WIN_FILE_NAME

      ;

 

dump_command

      : DUMP

      ( dump_struct

      | dump_block

      | a_file

      );

 

show_command

      : SHOW

      ( structure_nouns

      | storage_nouns

      | a_file

      );

      

mbr_vbr

      : MBR 

      | VBR

      ;

 

block_nouns

      : LBN 

      | LCN 

      | VBN 

      | VCN

      ;

 

structure_nouns

      : MBR

      | VBR

      ;

 

dump_block

 

      : block_nouns

      number

      (

      (',' number

      )

      | 

      (':' number

      ))?

      DRIVE_NAME?

      ;

 

dump_struct

      : mbr_vbr

      ('/' qualifier)?

      DRIVE_NAME?

      ;

 

storage_nouns

      : DISK

      | VOLUME

      ;

      

a_file

      : FILE

      WIN_FILE_NAME

      ;

 

number

      : DEC_NUMBER 

      | HEX_NUMBER

      ;

 

qualifier

      : ALL

      | CODE

      | TABLE

      ;

 

//+

// Tokens

//-

 

// Verbs

 

DUMP  : 'DUMP';

SHOW  : 'SHOW';

 

// Nouns

 

DISK  : 'DISK';

FILE  : 'FILE';

LBN         : 'LBN';

LCN         : 'LCN';

MBR         : 'MBR';

PBN         : 'PBN';

VBN         : 'VBN';

VBR         : 'VBR';

VCN         : 'VCN';

VOLUME      : 'VOLUME';

 

// Qualifiers

 

ALL         : 'ALL';

CODE  : 'CODE';

TABLE : 'TABLE';

 

// Miscellaneous tokens

 

DRIVE_NAME

      : LETTER ':';

 

fragment

LETTER      : 'A'..'Z';

 

fragment

DIGIT : '0'..'9';

 

fragment

HEX_DIGIT   : (DIGIT | 'A'..'F');

 

HEX_NUMBER  : '0X' HEX_DIGIT+;

 

DEC_NUMBER  : DIGIT+;

 

WIN_FILE_NAME

      :  '"' ~('|' | '<' | '>' | '*' | '?' | '\r' | '\n' | '"')+ '"';

 

LINE_COMMENT

      : '!' ~('\n'|'\r')* (('\r'? '\n') | EOF) {$channel=HIDDEN;};

 

WS    : (' ' | '\t' | '\r' | '\n')+ {$channel=HIDDEN;};

 


From iannone at cs.manchester.ac.uk  Thu Apr 15 06:44:36 2010
From: iannone at cs.manchester.ac.uk (Luigi Iannone)
Date: Thu, 15 Apr 2010 14:44:36 +0100
Subject: [antlr-interest] Imported parser tokens mismatch
Message-ID: <35A93DBF-5C96-4A94-8E7F-04703375E016@cs.manchester.ac.uk>

Hi,

I am struggling to re-use tokens across grammars. I have two combined grammars, namely

ManchesterOWLSyntax.g 
OPPLScript.g

They both import a parser grammar called MOWLParser.g, 

ManchesterOWLSyntax.g  imports it directly, whereas OPPLScript.g imports OPPLParser.g which imports MOWLParser.g

I would have thought that all the .tokens generated files would overlap on all the tokens defined inside MOWLParser.g

Maybe I am missing something but if I try to generate the code I end up with different MOWLParser.tokens which results in different token type codes for the same token.

Just as example the token CONJUNCTION gets code 77 when generating OPPLScript.g and 56 when generating ManchesterSyntax.g

I put all the relevant files at http://www.cs.man.ac.uk/~iannonel/antlrexperiments/ (both the loose files and their zipped archive: import.zip)

Thanks in advance for any help,

Luigi

From michael.cracraft at gmail.com  Thu Apr 15 07:52:15 2010
From: michael.cracraft at gmail.com (Michael Cracraft)
Date: Thu, 15 Apr 2010 10:52:15 -0400
Subject: [antlr-interest] Version conflicts between installed antlr jar
	files and python runtime installation
Message-ID: <w2q963857261004150752z4bd4878bgca1f7f6d3fcbbe2a@mail.gmail.com>

Any time antlr is updated on my Fedora boxes, I have an issue with the
python runtime and version mismatches.  Is there an option to either have
the python runtime ignore the version mismatch?  Or is there a method to
have the antlr-3.2.jar generate code as if it were the antlr-3.1.2.jar, for
example?  Or am I just doomed to have to download and maintain a separate
antlr jar matching my python runtime?

Thanks,
Michael

-- 
_____________________________________________

From jimi at temporal-wave.com  Thu Apr 15 13:00:53 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 15 Apr 2010 13:00:53 -0700
Subject: [antlr-interest] C Target: setUcaseLA bug?
In-Reply-To: <029101cadc46$f33e7aa0$d9bb6fe0$@sannas.org>
Message-ID: <ddc70befe12f1a4ba1ee0e62132a109b@temporal-wave.com>



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Brian Catlin
> Sent: Wednesday, April 14, 2010 7:54 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] C Target: setUcaseLA bug?
> 
> Is setUcaseLA known to work in ANTLR3c-3.2?  

Works for me, I just tried it. There must be something else going on. Are you sure you are looking at the debugger correctly? Are you tracing in to the upper case version of LA?

> At the beginning of my
> generated lexer routine mTokens, it switches on LA(1) trying to build a
> token, but LA(1) is returning the lowercase input character.  As you
> can see
> below, I call setUcaseLA immediately after the input stream was
> created.

> 
> @lexer::header
> 
> {
> 
> #define     ANTLR3_INLINE_INPUT_ASCII
> 
> }


Can you see your problem if I highlight the above line? ;-) You are not calling LA, as you have told the lexer to use inline input code and not call the input routines.

Jim




From jsuijs at gmail.com  Thu Apr 15 13:02:27 2010
From: jsuijs at gmail.com (Joep Suijs)
Date: Thu, 15 Apr 2010 22:02:27 +0200
Subject: [antlr-interest] identifier vs keyword issue
Message-ID: <t2q9d92de171004151302v1d3c0baao691998806ab74311@mail.gmail.com>

Hi guys,


I am working on parser for JAL, 'Just Another Language' for Microchips
PIC microcontrollers.

Within JAL you can define a variable like:

   var byte data

where 'data' is a valid identifier, matched by

   IDENTIFIER : LETTER (LETTER|'0'..'9')* ;

   fragment LETTER : 'A'..'Z' | 'a'..'z' | '_' ;


Now I want to add support for pragma statement, used for the setup of
the microcontroller. An example (one of quite a few) of this is:

   pragma  data    0x20-0x6F,0xA0-0xEF

With:

pragma
    : 'pragma'^ (
	( 'target' pragma_target )
	| ( 'data' constant '-' constant (',' constant '-' constant)* ) 	
    )
    ;

This works okay, but does break the parsing of identifiers like 'data'.

How can antlr (in general) handle keywords within a specific context,
while retaining the possibility to use these keywords as identifiers
in the general context?

Any advice is appreciated!

Joep

PS Amongst others, the full grammar (current state, not completed) is
at http://code.google.com/p/jallib/source/browse/#svn/trunk/grammar

From jimi at temporal-wave.com  Thu Apr 15 13:51:10 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 15 Apr 2010 13:51:10 -0700
Subject: [antlr-interest] Imported parser tokens mismatch
In-Reply-To: <35A93DBF-5C96-4A94-8E7F-04703375E016@cs.manchester.ac.uk>
Message-ID: <6bebaec05580eb479186b2f42c010392@temporal-wave.com>

Your best bet is to pre-create the .tokens file and use the tokenVocab option in the lexer. Just make sure that you keep token numbers contiguous and don't leave gaps. The token numbers will then not only be shared, but known values. You can have more tokens than you actually generate or deal with in a particular parser. I have used this concept across SQL parsers for instance so that a target enging can be origin agnostic.

Without a vocab option, the lexer will parse and produce the .tokens file. This will be imported by the parsers, which will produce their own .tokens files, which can be imported by tree walkers and so on but when they add tokens (even if they are the same names), then they will not be shared by different parsers.

You could probably get the outcome you want by carefully controlling the build order and setting the tokenVocab and so on, but it is trivial to maintain your own.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Luigi Iannone
> Sent: Thursday, April 15, 2010 6:45 AM
> To: ANTLR
> Subject: [antlr-interest] Imported parser tokens mismatch
> 
> Hi,
> 
> I am struggling to re-use tokens across grammars. I have two combined
> grammars, namely
> 
> ManchesterOWLSyntax.g
> OPPLScript.g
> 
> They both import a parser grammar called MOWLParser.g,
> 
> ManchesterOWLSyntax.g  imports it directly, whereas OPPLScript.g
> imports OPPLParser.g which imports MOWLParser.g
> 
> I would have thought that all the .tokens generated files would overlap
> on all the tokens defined inside MOWLParser.g
> 
> Maybe I am missing something but if I try to generate the code I end up
> with different MOWLParser.tokens which results in different token type
> codes for the same token.
> 
> Just as example the token CONJUNCTION gets code 77 when generating
> OPPLScript.g and 56 when generating ManchesterSyntax.g
> 
> I put all the relevant files at
> http://www.cs.man.ac.uk/~iannonel/antlrexperiments/ (both the loose
> files and their zipped archive: import.zip)
> 
> Thanks in advance for any help,
> 
> Luigi
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Thu Apr 15 13:54:00 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 15 Apr 2010 13:54:00 -0700
Subject: [antlr-interest] Version conflicts between installed antlr jar
	files and python runtime installation
In-Reply-To: <w2q963857261004150752z4bd4878bgca1f7f6d3fcbbe2a@mail.gmail.com>
Message-ID: <427035b35a6d82429cc058dae67d90e5@temporal-wave.com>

I would avoid updating ANTLR from the repositories to be honest and maintain the versions by downloading from the web site (or use Maven if you were not using Python).

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Michael Cracraft
> Sent: Thursday, April 15, 2010 7:52 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Version conflicts between installed antlr jar
> files and python runtime installation
> 
> Any time antlr is updated on my Fedora boxes, I have an issue with the
> python runtime and version mismatches.  Is there an option to either
> have
> the python runtime ignore the version mismatch?  Or is there a method
> to
> have the antlr-3.2.jar generate code as if it were the antlr-3.1.2.jar,
> for
> example?  Or am I just doomed to have to download and maintain a
> separate
> antlr jar matching my python runtime?
> 
> Thanks,
> Michael
> 
> --
> _____________________________________________
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Thu Apr 15 14:16:21 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 15 Apr 2010 14:16:21 -0700
Subject: [antlr-interest] identifier vs keyword issue
In-Reply-To: <t2q9d92de171004151302v1d3c0baao691998806ab74311@mail.gmail.com>
Message-ID: <a1767607f5ba5b47971bdd435cbb5c1a@temporal-wave.com>

Don't define the tokens as inline literals. Make them 'real' lexer tokens:

KEY1: 'key1';
KEY2: 'key2';
IDENT LETTER (LETTER|'0'..'9')* ;

Then:

ident
 : IDENTIFIER
 ;

keywId
 : IDENTIFIER -> IDENTIFIER
 | KEY1 -> IDENTIFIER[KEY1]
 | KEY2 -> IDENTIFIER[KEY2]
 ;


And use the keywId in your pragma statement and ident anywhere that keywords are not valid. In fact as a more general practice, you could allow keywords all the time, then reject them using a semantic error rather than syntactically via the parser. However you need to be careful to add some single token predicates when there is an ambiguity (or put up with lots of warnings).

There are other ways to do this, such as not defining the keywords and just checking the string contained in IDENTIFIER with a predicate, but I find that looks awkward myself.

Jim



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Joep Suijs
> Sent: Thursday, April 15, 2010 1:02 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] identifier vs keyword issue
> 
> Hi guys,
> 
> 
> I am working on parser for JAL, 'Just Another Language' for Microchips
> PIC microcontrollers.
> 
> Within JAL you can define a variable like:
> 
>    var byte data
> 
> where 'data' is a valid identifier, matched by
> 
>    IDENTIFIER : LETTER (LETTER|'0'..'9')* ;
> 
>    fragment LETTER : 'A'..'Z' | 'a'..'z' | '_' ;
> 
> 
> Now I want to add support for pragma statement, used for the setup of
> the microcontroller. An example (one of quite a few) of this is:
> 
>    pragma  data    0x20-0x6F,0xA0-0xEF
> 
> With:
> 
> pragma
>     : 'pragma'^ (
> 	( 'target' pragma_target )
> 	| ( 'data' constant '-' constant (',' constant '-' constant)* )
> 
>     )
>     ;
> 
> This works okay, but does break the parsing of identifiers like 'data'.
> 
> How can antlr (in general) handle keywords within a specific context,
> while retaining the possibility to use these keywords as identifiers
> in the general context?
> 
> Any advice is appreciated!
> 
> Joep
> 
> PS Amongst others, the full grammar (current state, not completed) is
> at http://code.google.com/p/jallib/source/browse/#svn/trunk/grammar
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From tounsimolka at yahoo.fr  Thu Apr 15 14:26:02 2010
From: tounsimolka at yahoo.fr (Molka Tounsi)
Date: Thu, 15 Apr 2010 21:26:02 +0000 (GMT)
Subject: [antlr-interest] rules of transition
Message-ID: <484248.59584.qm@web26401.mail.ukl.yahoo.com>

Hello,
I understood where I write the rules of transition, and when I write the file X.g , I write the rules of  lexer and parser just for a language A or the rules of both languages? 
Please answer me.
Thanks.


      

From iannone at cs.manchester.ac.uk  Thu Apr 15 14:37:20 2010
From: iannone at cs.manchester.ac.uk (Luigi Iannone)
Date: Thu, 15 Apr 2010 22:37:20 +0100
Subject: [antlr-interest] Imported parser tokens mismatch
In-Reply-To: <6bebaec05580eb479186b2f42c010392@temporal-wave.com>
References: <6bebaec05580eb479186b2f42c010392@temporal-wave.com>
Message-ID: <224416BB-ED68-4CC2-B9E4-F36FE8967DA8@cs.manchester.ac.uk>

Jim,

what about the imaginary tokens I create in the parser? From what you write it seems I have to include them in my hand-crafted .tokens files, but which .token file?

Thanks,

Luigi

On 15 Apr 2010, at 21:51, Jim Idle wrote:

> Your best bet is to pre-create the .tokens file and use the tokenVocab option in the lexer. Just make sure that you keep token numbers contiguous and don't leave gaps. The token numbers will then not only be shared, but known values. You can have more tokens than you actually generate or deal with in a particular parser. I have used this concept across SQL parsers for instance so that a target enging can be origin agnostic.
> 
> Without a vocab option, the lexer will parse and produce the .tokens file. This will be imported by the parsers, which will produce their own .tokens files, which can be imported by tree walkers and so on but when they add tokens (even if they are the same names), then they will not be shared by different parsers.
> 
> You could probably get the outcome you want by carefully controlling the build order and setting the tokenVocab and so on, but it is trivial to maintain your own.
> 
> Jim
> 
>> -----Original Message-----
>> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
>> bounces at antlr.org] On Behalf Of Luigi Iannone
>> Sent: Thursday, April 15, 2010 6:45 AM
>> To: ANTLR
>> Subject: [antlr-interest] Imported parser tokens mismatch
>> 
>> Hi,
>> 
>> I am struggling to re-use tokens across grammars. I have two combined
>> grammars, namely
>> 
>> ManchesterOWLSyntax.g
>> OPPLScript.g
>> 
>> They both import a parser grammar called MOWLParser.g,
>> 
>> ManchesterOWLSyntax.g  imports it directly, whereas OPPLScript.g
>> imports OPPLParser.g which imports MOWLParser.g
>> 
>> I would have thought that all the .tokens generated files would overlap
>> on all the tokens defined inside MOWLParser.g
>> 
>> Maybe I am missing something but if I try to generate the code I end up
>> with different MOWLParser.tokens which results in different token type
>> codes for the same token.
>> 
>> Just as example the token CONJUNCTION gets code 77 when generating
>> OPPLScript.g and 56 when generating ManchesterSyntax.g
>> 
>> I put all the relevant files at
>> http://www.cs.man.ac.uk/~iannonel/antlrexperiments/ (both the loose
>> files and their zipped archive: import.zip)
>> 
>> Thanks in advance for any help,
>> 
>> Luigi
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
>> email-address
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From gthouraya at yahoo.fr  Thu Apr 15 15:08:04 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Thu, 15 Apr 2010 22:08:04 +0000 (GMT)
Subject: [antlr-interest] where can put the rule of transfer between two
	languages
Message-ID: <582589.33640.qm@web26302.mail.ukl.yahoo.com>

Please can someone help me,I want make a transfer between two languages and I want to use ANTLR .?  
Please
can you tell me where I must put the rules of transformation between
the two grammars? For the second grammar, do I have to put it? If yes,
where I must to put it?? 


      

From jbb at acm.org  Thu Apr 15 16:58:44 2010
From: jbb at acm.org (John B. Brodie)
Date: Thu, 15 Apr 2010 19:58:44 -0400
Subject: [antlr-interest] where can put the rule of transfer between two
 languages
In-Reply-To: <582589.33640.qm@web26302.mail.ukl.yahoo.com>
References: <582589.33640.qm@web26302.mail.ukl.yahoo.com>
Message-ID: <1271375924.5594.27.camel@gecko.home.org>

Greetings!

On Thu, 2010-04-15 at 22:08 +0000, Gouasmi Thouraya wrote:
> Please can someone help me,I want make a transfer between two languages and I want to use ANTLR .   
> Please
> can you tell me where I must put the rules of transformation between
> the two grammars? For the second grammar, do I have to put it? If yes,
> where I must to put it?  

I am sorry but I am not sure I understand your question.

Are you trying to translate an input, in source language A, into an
output, in target language B. For example, are trying to do something
similar to translating C++ into C; or another example translating OCAML
to Scheme?

If so, maybe the below may help. If not, this message will be useless.

So if you want to translate input given in source language A and produce
output in target language B using ANTLR to orchestrate, you *REALLY*
need to read one or both of Dr. Parr's books (I believe the
www.antlr.org website has links to these publications, ask if you are
unable to locate them).

I believe the basic outline of the translation process is as follows:

1) create a grammar to parse (and lex) the source language A. this
grammar should produce an appropriate Abstract Syntax Tree (AST) in
order to support subsequent processing.

2) if your input is not certified as valid for language A, you will need
to develop appropriate tree walking phase(s) to validate the source AST.
E.G. if necessary, perform appropriate semantic analysis of the AST to
ensure that the input truly conforms to source language A.

3) develop a family of StringTemplates that, given an individual AST
node, will produce the desired text of the target language B (probably
by appropriately gluing together other StringTemplate results passed as
parameters).

4) write a tree walker grammar that will orchestrate calls upon the
StringTemplate library from step 3) above. each rule in this tree walker
passes the requisite intermediate strings to the proper template and
accumulates the resultant strings into a single String comprising the
entire resultant target language B program.

5) output the String resultant from step 4) to a file. 


and you really should read one of Dr. Parr's books in order to get a
better answer.

Hope this helps....
   -jbb



From BrianC at sannas.org  Thu Apr 15 18:52:58 2010
From: BrianC at sannas.org (Brian Catlin)
Date: Fri, 16 Apr 2010 09:52:58 +0800
Subject: [antlr-interest] C Target: setUcaseLA bug?
In-Reply-To: <ddc70befe12f1a4ba1ee0e62132a109b@temporal-wave.com>
References: <029101cadc46$f33e7aa0$d9bb6fe0$@sannas.org>
	<ddc70befe12f1a4ba1ee0e62132a109b@temporal-wave.com>
Message-ID: <02ef01cadd07$8be0b730$a3a22590$@sannas.org>

Thank you Jim!  

I guess I don't understand when ANTLR3_INLINE_INPUT_ASCII is needed, and the
implications thereof.

I certainly appreciate all the hard work you have been putting into the C
target, and the support you've provided

 -Brian

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Jim Idle
Sent: Friday, April 16, 2010 04:01
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] C Target: setUcaseLA bug?



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest- 
> bounces at antlr.org] On Behalf Of Brian Catlin
> Sent: Wednesday, April 14, 2010 7:54 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] C Target: setUcaseLA bug?
> 
> Is setUcaseLA known to work in ANTLR3c-3.2?  

Works for me, I just tried it. There must be something else going on. Are
you sure you are looking at the debugger correctly? Are you tracing in to
the upper case version of LA?

> At the beginning of my
> generated lexer routine mTokens, it switches on LA(1) trying to build 
> a token, but LA(1) is returning the lowercase input character.  As you 
> can see below, I call setUcaseLA immediately after the input stream 
> was created.

> 
> @lexer::header
> 
> {
> 
> #define     ANTLR3_INLINE_INPUT_ASCII
> 
> }


Can you see your problem if I highlight the above line? ;-) You are not
calling LA, as you have told the lexer to use inline input code and not call
the input routines.

Jim




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From bruno.le-hyaric at fr.thalesgroup.com  Fri Apr 16 04:50:11 2010
From: bruno.le-hyaric at fr.thalesgroup.com (Le Hyaric Bruno)
Date: Fri, 16 Apr 2010 13:50:11 +0200
Subject: [antlr-interest] Coding rule checking for Ada 95
Message-ID: <4BC84EF3.2050908@fr.thalesgroup.com>

Hi,

My current activity is to setup a coding rule engine for Ada95.

The main requirements are :
1 - the underlying parser should accept the whole Ada grammar
2 - coding rules must be easy to implement
3 - the engine must be very scalable (in order to process millions of LoC).

Now, I'll give more details and highlight some questions :

1 - For the moment I have an existing solutions based on ANTLRv3, and an 
Ada95 grammar for Python target (this grammar is based on Hibachi Ada95 
grammar for Java target, which is based on Ada95 grammar for Cpp target 
from O.Kellog).

2 - In the existing solution we have TreeWalker to walk on AST, but AST 
structure is really different from source code.

    * ??? I'm wondering if we can have an hybrid TreeWalker, which
      permits to walk on tree to match special tree patterns and then
      use the lexer to get some lines of code around the matching point ???
    * ??? Another approach : walking tree needs a lot of recursive
      algorithms, typically easy to write with a functionnal languages
      like Haskell, Caml, XSL... Did anyone try to build an hybrid
      engine (procedural/functionnal) for code analysis ???


3 - The existing solution isn't scalable at all, it's not ANTLR's fault, 
but the way it's encapsulated. The solution parse all files and keep 
ASTs in memory, then build a Model structure (hierarchy of packages, 
classes, operations...). In ower case, we need a more scalable approach 
like :

    * I start parsing all files one by one and keep AST on disk in a
      suitable form (??? any ideas to store AST efficiently on disk ???)
    * Then I reload the AST of one starting file and reload recursively
      AST for each dependencies (load on demand in fact)
    * Then we build the model and make some analysis

       ??? so, did anyone have to store/reload AST from disk? and how ???


Best regards,

Bruno.

From bruno.le-hyaric at fr.thalesgroup.com  Fri Apr 16 05:38:33 2010
From: bruno.le-hyaric at fr.thalesgroup.com (Le Hyaric Bruno)
Date: Fri, 16 Apr 2010 14:38:33 +0200
Subject: [antlr-interest]  Export Parse Tree Graph
Message-ID: <4BC85A49.4000004@fr.thalesgroup.com>

Hi, I made something like that in Python for my personal use :


import os

import antlr3.tree


# Path d'installation de graphviz
DOT = r' PATH TO DOT.EXE '



def __scan(node):
    """
        Simple top-down recursive scan of the tree
        to build the DOT graph definition
    """
    graph = str()
    if node.parent:
        node_id = str(hash(node))
        parent_id = str(hash(node.parent))
        node_label = str(node.getText()).replace('"','\\"') + ':' + str(node.getType())
        parent_label = str(node.parent.getText()).replace('"','\\"') + ':' + str(node.parent.getType())
        graph += '\t"' + parent_id + '" [label="' + parent_label + '"];\n'
        graph += '\t"' + node_id + '" [label="' + node_label + '"];\n'
        graph += '\t"' + parent_id + '" -> "' + node_id + '";\n'
    for child in node.children:
        graph += __scan(child)
    return graph

def __ast_to_dot(node, graph_name):
    """
        Build the DOT graph definition
    """
    body_graph = __scan(node)
    
    dot_graph = str()
    dot_graph += 'digraph "' + graph_name + '" {\n'
    dot_graph += body_graph
    dot_graph += '}\n'
    
    return dot_graph

def ast_graph(node,filename):
    """
        Build the DOT graph definition, save it in a DOT file
        then call graphviz/dot.exe to build the SVG file
        
        DON'T USE THIS ON BIG ADA SOURCE FILE
        
        (SVG file can be viewed with Firefox)
    """
    if not(isinstance(node,antlr3.tree.CommonTree)):
        raise 'node must be a antlr3.tree.CommonTree'
    dot_graph = __ast_to_dot(node, os.path.basename(filename).replace('.','_'))
    
    dot_path = filename.replace('.','_') + '.dot'
    dot_file = open(dot_path,'w')
    dot_file.write(dot_graph)
    dot_file.close()
    
    svg_path = os.path.splitext(filename)[0] + '.svg'
    cmd = DOT + ' -Tsvg -o "' + svg_path + '" "' + dot_path + '"'
    print cmd
    os.system(cmd)




> Hi,
> I'm currently using ANTLR v3 with the language = Python option.
> Is there a way to export the interpreted parse tree graph(as seen in the
> interpreter section of ANTLRWorks) to a dot file or a bitmap image without
> using ANTLRWorks?
> With thanks.


From r.mark.volkmann at gmail.com  Fri Apr 16 06:27:18 2010
From: r.mark.volkmann at gmail.com (Mark Volkmann)
Date: Fri, 16 Apr 2010 08:27:18 -0500
Subject: [antlr-interest] access token stream from parser action
Message-ID: <j2yf0fcc6821004160627u361e4490n55917f3bda217a49@mail.gmail.com>

I'm trying to access comment tokens that are written to the hidden
channel from a parser action. I'm using the Java 1.5 grammar that
Terrance wrote. When it finds things like classes, fields and methods,
I want to grab the comment, if any, that immediately precedes it.

I think I'm close to having it figured out, but I don't know how to
get access to the token stream from a parser action. How can I do
that?

-- 
R. Mark Volkmann
Object Computing, Inc.

From ronburk at gmail.com  Fri Apr 16 06:54:53 2010
From: ronburk at gmail.com (Ron Burk)
Date: Fri, 16 Apr 2010 06:54:53 -0700
Subject: [antlr-interest] Coding rule checking for Ada 95
In-Reply-To: <4BC84EF3.2050908@fr.thalesgroup.com>
References: <4BC84EF3.2050908@fr.thalesgroup.com>
Message-ID: <p2x30dde8ce1004160654g8aa73206n21be99f199dc569e@mail.gmail.com>

> 3 - the engine must be very scalable (in order to process millions of LoC).

Scalable is a word that usually needs a lot of pinning down.
Does it only have to scale to the size of the largest currently
existing Ada program? Would handling 100 million lines
of code would cover most situations?

>      (??? any ideas to store AST efficiently on disk ???)

Now you introduce a different scalability problem, since
the number of orders of magnitude of speed difference
between memory and disk has only gotten worse over
the years. Presumably you have some constraints on
how long the program can take to execute? How many
days or weeks are allowed for processing a 100
million-line program?

A 100 million-line Ada program requires, say, 10GB
of memory as source bytes (assume 100-character lines).
With care (though perhaps not using your favorite
interpreted language) the space for your own data structures
may be able to fit in the space freed up by stripping white
space and comments. So I would guesstimate it would
be possible to handle 100 million lines in 10GB. The time
required to just sequentially read 10GB (recalling Jim
Gray's observation that disks now begin to look like
sequential tapes to modern CPUs) will be unpleasant
enough -- I'm dubious you could ever make it tolerable to thrash
about on 10GB doing tree traversals via random disk I/O
(random being even slower than the initial sequential I/O
required to pass over the source).

Without knowing any other details (which might be critical),
I would be looking at approaches that involve:
  a) running on a 64-bit address machine with, say, 32GB of memory.
  b) taking advantage of compression opportunities here and there
  c) if necessary (might not be), using an implementation language
     that gives you more control over the size/type of data structures.

From jimi at temporal-wave.com  Fri Apr 16 11:13:40 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Apr 2010 11:13:40 -0700
Subject: [antlr-interest] access token stream from parser action
In-Reply-To: <j2yf0fcc6821004160627u361e4490n55917f3bda217a49@mail.gmail.com>
Message-ID: <7df28259861baf4e931fbf11513790bd@temporal-wave.com>

input.LT(n)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Mark Volkmann
> Sent: Friday, April 16, 2010 6:27 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] access token stream from parser action
> 
> I'm trying to access comment tokens that are written to the hidden
> channel from a parser action. I'm using the Java 1.5 grammar that
> Terrance wrote. When it finds things like classes, fields and methods,
> I want to grab the comment, if any, that immediately precedes it.
> 
> I think I'm close to having it figured out, but I don't know how to
> get access to the token stream from a parser action. How can I do
> that?
> 
> --
> R. Mark Volkmann
> Object Computing, Inc.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Fri Apr 16 11:18:52 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 16 Apr 2010 11:18:52 -0700
Subject: [antlr-interest] Coding rule checking for Ada 95
In-Reply-To: <4BC84EF3.2050908@fr.thalesgroup.com>
Message-ID: <0efd3f20b84b5f479679ece70967558b@temporal-wave.com>

You will not get a scalable, performing solution by using Python and writing things to disk. More memory and less memory access is the general principle for performance, but when you are as far away from the metal as Python, you should be writing something that does not have any performance constraints!

Jim (IMNSHO ;-)



> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Le Hyaric Bruno
> Sent: Friday, April 16, 2010 4:50 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Coding rule checking for Ada 95
> 
> Hi,
> 
> My current activity is to setup a coding rule engine for Ada95.
> 
> The main requirements are :
> 1 - the underlying parser should accept the whole Ada grammar
> 2 - coding rules must be easy to implement
> 3 - the engine must be very scalable (in order to process millions of
> LoC).
> 
> Now, I'll give more details and highlight some questions :
> 
> 1 - For the moment I have an existing solutions based on ANTLRv3, and
> an
> Ada95 grammar for Python target (this grammar is based on Hibachi Ada95
> grammar for Java target, which is based on Ada95 grammar for Cpp target
> from O.Kellog).
> 
> 2 - In the existing solution we have TreeWalker to walk on AST, but AST
> structure is really different from source code.
> 
>     * ??? I'm wondering if we can have an hybrid TreeWalker, which
>       permits to walk on tree to match special tree patterns and then
>       use the lexer to get some lines of code around the matching point
> ???
>     * ??? Another approach : walking tree needs a lot of recursive
>       algorithms, typically easy to write with a functionnal languages
>       like Haskell, Caml, XSL... Did anyone try to build an hybrid
>       engine (procedural/functionnal) for code analysis ???
> 
> 
> 3 - The existing solution isn't scalable at all, it's not ANTLR's
> fault,
> but the way it's encapsulated. The solution parse all files and keep
> ASTs in memory, then build a Model structure (hierarchy of packages,
> classes, operations...). In ower case, we need a more scalable approach
> like :
> 
>     * I start parsing all files one by one and keep AST on disk in a
>       suitable form (??? any ideas to store AST efficiently on disk
> ???)
>     * Then I reload the AST of one starting file and reload recursively
>       AST for each dependencies (load on demand in fact)
>     * Then we build the model and make some analysis
> 
>        ??? so, did anyone have to store/reload AST from disk? and how
> ???
> 
> 
> Best regards,
> 
> Bruno.
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From ronburk at gmail.com  Fri Apr 16 12:58:46 2010
From: ronburk at gmail.com (Ron Burk)
Date: Fri, 16 Apr 2010 12:58:46 -0700
Subject: [antlr-interest] Coding rule checking for Ada 95
In-Reply-To: <4BC8740A.8090707@fr.thalesgroup.com>
References: <4BC84EF3.2050908@fr.thalesgroup.com>
	<p2x30dde8ce1004160654g8aa73206n21be99f199dc569e@mail.gmail.com>
	<4BC8740A.8090707@fr.thalesgroup.com>
Message-ID: <x2i30dde8ce1004161258zb9116118ye2ccd7d7a637b918@mail.gmail.com>

> I was a bit large when I said millions LoC, it's about 1 or 2 millions (all

So figure 200MB. This may be quite doable all in memory on a 32-bit
Windows XP that has 2GB of memory. But it's large enough you
may have to make some choices (language, data structures, etc.)
based on space/speed efficiency rather than convenience.

From ron.hunter-duvar at oracle.com  Fri Apr 16 15:59:02 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Fri, 16 Apr 2010 16:59:02 -0600
Subject: [antlr-interest] @init actions executed during lookahead,
	@after actions not
Message-ID: <4BC8EBB6.9080508@oracle.com>

Hi,

I just ran into something a little odd. I'm using @init actions in some 
parser rules to stack some information and @after to pop it again. In 
the generated Java code, the @after action gets wrapped in an "if ( 
state.backtracking==0 ) {...}", so that it only gets executed when other 
actions are being executed, not during lookahead. This is what I 
expected. But I noticed that the @init actions are executed 
unconditionally, including during lookahead. I didn't expect this. The 
result was a lot of junk on the stack when it went into a dfa. The fix 
was easy enough, just checking state.backtracking myself. But I was 
wondering if this is an Antlr bug or if it's supposed to work this way.

Ron

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From antlr at mirality.co.nz  Fri Apr 16 16:44:05 2010
From: antlr at mirality.co.nz (Gavin Lambert)
Date: Sat, 17 Apr 2010 11:44:05 +1200
Subject: [antlr-interest] Grammar help
In-Reply-To: <00a401cac4e8$c3b6bbf0$4b2433d0$@sannas.org>
References: <008e01cac4bc$643178e0$2c946aa0$@sannas.org>
	<af443a971003152335s2166690ekae89098a13e838de@mail.gmail.com>
	<af443a971003152337h3fe34380tab52be475a4b7130@mail.gmail.com>
	<009601cac4d7$c6ecf070$54c6d150$@sannas.org>
	<af443a971003160032h642a637aye02511e9a0bfe56f@mail.gmail.com>
	<00a401cac4e8$c3b6bbf0$4b2433d0$@sannas.org>
Message-ID: <20100416234418.53E5C341840B@www.antlr.org>

At 21:12 16/03/2010, Brian Catlin wrote:
 >I don't get the errors I was getting before, but that is because 

 >the FILE_NAME token is matching everything,  I put a simple
 >printf action on the FILE_NAME token, and it gets called for
 >all input:
[...]
 >Is there a way to make the FILE_NAME token context sensitive so
 >that the lexer doesn't try to match it unless we're in a rule
 >that wants to find a file name?

No, ANTLR lexer's are context-free: you can't influence token 
selection from the parser.

What you need to do is to change your approach.  Have one token 
for QUOTED_STRING and another token for NAME.  Then, at the parser 
level (where you have context), decide whether any particular NAME 
is a command name or a filename (or whatever).


From tcorbat at hsr.ch  Sat Apr 17 00:39:01 2010
From: tcorbat at hsr.ch (tcorbat at hsr.ch)
Date: Sat, 17 Apr 2010 09:39:01 +0200
Subject: [antlr-interest] @init actions executed during lookahead,
	@after actions not
In-Reply-To: <4BC8EBB6.9080508@oracle.com>
References: <4BC8EBB6.9080508@oracle.com>
Message-ID: <E1FBA77227279347B0AAEFA3C17DBC4836652B6359@sid00101.hsr.ch>

Hi Ron,

I think this behavior is as intended. The @init block is intended to declare local variables. Therefore, it will always be executed. 
You could move the action, manipulating your stack, out of the @init block into an action inside the rule. Then, it would not get executed during lookahead.
I don't know if it is favorable, but if this manipulation of the stack is required in the subrules to correctly decide on alternatives, you could leave the action in @init and put the cleanup action (form @after) to the "finally" block, which will always get executed, regardless of the backtracking state.

I hope this helps.
Thomas


________________________________________
Von: antlr-interest-bounces at antlr.org [antlr-interest-bounces at antlr.org] im Auftrag von Ron Hunter-Duvar [ron.hunter-duvar at oracle.com]
Gesendet: Samstag, 17. April 2010 00:59
An: antlr-interest at antlr.org
Betreff: [antlr-interest] @init actions executed during lookahead,      @after actions not

Hi,

I just ran into something a little odd. I'm using @init actions in some
parser rules to stack some information and @after to pop it again. In
the generated Java code, the @after action gets wrapped in an "if (
state.backtracking==0 ) {...}", so that it only gets executed when other
actions are being executed, not during lookahead. This is what I
expected. But I noticed that the @init actions are executed
unconditionally, including during lookahead. I didn't expect this. The
result was a lot of junk on the stack when it went into a dfa. The fix
was easy enough, just checking state.backtracking myself. But I was
wondering if this is an Antlr bug or if it's supposed to work this way.

Ron

--
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From sharwell at pixelminegames.com  Sat Apr 17 06:20:45 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Sat, 17 Apr 2010 08:20:45 -0500
Subject: [antlr-interest] @init actions executed during lookahead,
	@after actions not
References: <4BC8EBB6.9080508@oracle.com>
	<E1FBA77227279347B0AAEFA3C17DBC4836652B6359@sid00101.hsr.ch>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DF05@martini.ironwillgames.com>

Now that I think about it, it seems a lot more likely that the code from
the @after block would have instead been an action if the intent was to
only execute as an action (when not backtracking). However, IIRC some
items (maybe it's the token start/stop indices) are only set after the
inline actions run, so if you want to work with them you have to use the
@after{} block instead. I just checked my grammars and found that I
currently have *both* possibilities at different locations - some assume
that the code always runs, and others assume it's only during
backtracking.

Maybe we should allow a @finally{} block immediately following where the
@init{} block goes?

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of tcorbat at hsr.ch
Sent: Saturday, April 17, 2010 2:39 AM
To: antlr-interest at antlr.org
Subject: Re: [antlr-interest] @init actions executed during
lookahead, at after actions not

Hi Ron,

I think this behavior is as intended. The @init block is intended to
declare local variables. Therefore, it will always be executed. 
You could move the action, manipulating your stack, out of the @init
block into an action inside the rule. Then, it would not get executed
during lookahead.
I don't know if it is favorable, but if this manipulation of the stack
is required in the subrules to correctly decide on alternatives, you
could leave the action in @init and put the cleanup action (form @after)
to the "finally" block, which will always get executed, regardless of
the backtracking state.

I hope this helps.
Thomas


________________________________________
Von: antlr-interest-bounces at antlr.org [antlr-interest-bounces at antlr.org]
im Auftrag von Ron Hunter-Duvar [ron.hunter-duvar at oracle.com]
Gesendet: Samstag, 17. April 2010 00:59
An: antlr-interest at antlr.org
Betreff: [antlr-interest] @init actions executed during lookahead,
@after actions not

Hi,

I just ran into something a little odd. I'm using @init actions in some
parser rules to stack some information and @after to pop it again. In
the generated Java code, the @after action gets wrapped in an "if (
state.backtracking==0 ) {...}", so that it only gets executed when other
actions are being executed, not during lookahead. This is what I
expected. But I noticed that the @init actions are executed
unconditionally, including during lookahead. I didn't expect this. The
result was a lot of junk on the stack when it went into a dfa. The fix
was easy enough, just checking state.backtracking myself. But I was
wondering if this is an Antlr bug or if it's supposed to work this way.

Ron

--
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From williamvdoorn at gmail.com  Sat Apr 17 09:41:31 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Sat, 17 Apr 2010 18:41:31 +0200
Subject: [antlr-interest] 'Catching' functions --
Message-ID: <n2p6eb53c7e1004170941wf12a3d09vc2c2e79ca1f4f8f@mail.gmail.com>

Hello all,

I'm writing a simple language where functions is a feature. To do this I
need to somehow catch the tree of expressions/statements and execute it with
the parameter(s) when it's needed. However, is it possible to create those
trees when walking over the AST? Let's say I have this in the tree:

^(FUNC_DECL type ID formalParams? block)

Is it possible to get the tree of the block? I only found this possible to
do when building the AST (using $block.tree) but I can't seem to do this
when walking over the AST.

Thanks,

William van Doorn

From ed at dorrington.org  Sat Apr 17 12:09:16 2010
From: ed at dorrington.org (Edward Dorrington)
Date: Sat, 17 Apr 2010 12:09:16 -0700
Subject: [antlr-interest] ANTLRMorph Release?
Message-ID: <E9B5EA09-8510-4A6C-9ED5-6F1FB12B3453@dorrington.org>

Hi there,

Is there a version of ANTLRMorph, beta or otherwise, available? The wiki Getting Started FAQ talks about getting it from the download page, but it just links back to the ANLTRMorph home page, with no download link I could find. I'm really interested in using it in a project I'm working on.

Thanks,

--Ed Dorrington

From parrt at cs.usfca.edu  Sat Apr 17 12:31:27 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sat, 17 Apr 2010 12:31:27 -0700
Subject: [antlr-interest] ANTLRMorph Release?
In-Reply-To: <E9B5EA09-8510-4A6C-9ED5-6F1FB12B3453@dorrington.org>
References: <E9B5EA09-8510-4A6C-9ED5-6F1FB12B3453@dorrington.org>
Message-ID: <1EC526F6-F21E-4845-81B6-69563E539FB4@cs.usfca.edu>

Hi. Well, I haven't been able to get back to this project...probablynot good idea for production project ;)
Ter
On Apr 17, 2010, at 12:09 PM, Edward Dorrington wrote:

> Hi there,
> 
> Is there a version of ANTLRMorph, beta or otherwise, available? The wiki Getting Started FAQ talks about getting it from the download page, but it just links back to the ANLTRMorph home page, with no download link I could find. I'm really interested in using it in a project I'm working on.
> 
> Thanks,
> 
> --Ed Dorrington
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From ed at dorrington.org  Sat Apr 17 14:11:33 2010
From: ed at dorrington.org (Edward Dorrington)
Date: Sat, 17 Apr 2010 14:11:33 -0700
Subject: [antlr-interest] ANTLRMorph Release?
In-Reply-To: <1EC526F6-F21E-4845-81B6-69563E539FB4@cs.usfca.edu>
References: <E9B5EA09-8510-4A6C-9ED5-6F1FB12B3453@dorrington.org>
	<1EC526F6-F21E-4845-81B6-69563E539FB4@cs.usfca.edu>
Message-ID: <AFDFEB1B-9E90-4294-8027-D8D3965DCAC7@dorrington.org>

Terence,

Thanks for the quick response. Sorry to hear that it's not available; it sounds like a great idea.

--Ed

On Apr 17, 2010, at 12:31 PM, Terence Parr wrote:

> Hi. Well, I haven't been able to get back to this project...probablynot good idea for production project ;)
> Ter
> On Apr 17, 2010, at 12:09 PM, Edward Dorrington wrote:
> 
>> Hi there,
>> 
>> Is there a version of ANTLRMorph, beta or otherwise, available? The wiki Getting Started FAQ talks about getting it from the download page, but it just links back to the ANLTRMorph home page, with no download link I could find. I'm really interested in using it in a project I'm working on.
>> 
>> Thanks,
>> 
>> --Ed Dorrington
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From jsuijs at gmail.com  Sun Apr 18 02:36:24 2010
From: jsuijs at gmail.com (Joep Suijs)
Date: Sun, 18 Apr 2010 11:36:24 +0200
Subject: [antlr-interest] rewrite question?
Message-ID: <r2s9d92de171004180236wf67e0950yf180220fe8039ada@mail.gmail.com>

Hi guys,

The rules below
arith_expr: term ((PLUS|MINUS)^ term)* ;
PLUS        : '+'  ;
MINUS	: '-'  ;

creates a node with type PLUS or MINUS (with value '+' or '-' and puts
the terms into subnodes). There are similar rules with other
opererators and all these operators are handle the same in my
application.

How can I change this rule to a node of type 'operator' (which does
not exist yet), and keep the value and subnodes?

Thanks,
Joep

From Giampaolo at Tomassoni.biz  Sun Apr 18 03:39:23 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Sun, 18 Apr 2010 12:39:23 +0200
Subject: [antlr-interest] backtrack=false and AST generation
Message-ID: <000101cadee3$69a03550$3ce09ff0$@biz>

Hello everybody,

I'm facing a problem for which it seems I can't find a reply in the site
docs and faqs.

I would like to parse text based on a very simple grammar (arithmetic
expressions with some boolean enhancement). Every example in the site seems
to adopt a non-LLR notation, while I would instead prefer to use
backtrack=false.

In example, I have stuff like this:


protected
expression
    :	(e=conditionalOrExpression -> $e) c=conditionalExpression
    ;

protected
conditionalExpression
    :	QMARK t=expression COMMA f=expression	-> ???
    |
    ;


Where conditionalExpression should possibly substitute the AST element
produced by "expression" with something like

	-> ^(ITE [TheActualASTRoot] $t $f)

in case the first case is matched.

The fact is that I can't find in the site docs how to replace the top of a
parent rule, if at all possible.

Am I completely headed toward the wrong direction?

Giampaolo


From markwright at internode.on.net  Sun Apr 18 05:07:19 2010
From: markwright at internode.on.net (Mark Wright)
Date: Sun, 18 Apr 2010 22:07:19 +1000
Subject: [antlr-interest] backtrack=false and AST generation
In-Reply-To: <000101cadee3$69a03550$3ce09ff0$@biz>
References: <000101cadee3$69a03550$3ce09ff0$@biz>
Message-ID: <20100418120719.GE23400@internode.on.net>

You can pass trees from one rule to another as a parameter(s),
maybe that might help, something like (probably requires more
work to obtain the tree you are after):

protected
expression
    :	e=conditionalOrExpression conditionalExpression[$e.tree]
    ;

protected
conditionalExpression[CommonTree TheActualASTRoot]
    :	QMARK t=expression COMMA f=expression
            -> ^(ITE ${TheActualASTRoot} $t $f)
    |
    ;

Regards, Mark

On Sun, Apr 18, 2010 at 12:39:23PM +0200, Giampaolo Tomassoni wrote:
> Hello everybody,
> 
> I'm facing a problem for which it seems I can't find a reply in the site
> docs and faqs.
> 
> I would like to parse text based on a very simple grammar (arithmetic
> expressions with some boolean enhancement). Every example in the site seems
> to adopt a non-LLR notation, while I would instead prefer to use
> backtrack=false.
> 
> In example, I have stuff like this:
> 
> 
> protected
> expression
>     :	(e=conditionalOrExpression -> $e) c=conditionalExpression
>     ;
> 
> protected
> conditionalExpression
>     :	QMARK t=expression COMMA f=expression	-> ???
>     |
>     ;
> 
> 
> Where conditionalExpression should possibly substitute the AST element
> produced by "expression" with something like
> 
> 	-> ^(ITE [TheActualASTRoot] $t $f)
> 
> in case the first case is matched.
> 
> The fact is that I can't find in the site docs how to replace the top of a
> parent rule, if at all possible.
> 
> Am I completely headed toward the wrong direction?
> 
> Giampaolo
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From recluze at gmail.com  Sun Apr 18 06:03:02 2010
From: recluze at gmail.com (Nauman)
Date: Sun, 18 Apr 2010 18:03:02 +0500
Subject: [antlr-interest] Using ANTLR within eclipse plugin
Message-ID: <q2s179887f51004180603g1e673c51tc8f87d4477112dba@mail.gmail.com>

Hi,

I am trying to use ANTLR and StringTemplate to write an eclipse plugin that
does language transformation. I have a view that takes the text from an
editor and puts the output in another textbox. The problem is that within
the plugin, I don't have access to the template file (EvalPolicy.stg below)
directly. I can get an IFile and read from it but it isn't compatible with
the FileReader and so, I can't pass it to the StringTemplateGroup.

groupFileR = new FileReader(FILEPATH);
StringTemplateGroup templates = new StringTemplateGroup(groupFileR);
// doesn't work because FILEPATH is within a jar etc etc.

I tried reading the whole file in the string and then passing it to the
constructor of StringTemplateGroup but I get the error:

Can't find template policyType.st; group hierarchy is [group EvalPolicy;
showType(type) ::= "something type <type>"
policyType(ptype) ::= <<
<ptype>
>>


Here's what I have in the plugin code

Bundle bundle = Platform.getBundle("ape");
Path path = new Path("src/EvalPolicy.stg");
URL fileURL = FileLocator.find(bundle, path, null);
 InputStream is = null;

try {
is = fileURL.openStream();
} catch (IOException e2) {
// TODO Auto-generated catch block
e2.printStackTrace();
}

StringBuilder sb = new StringBuilder();
String line;

try {
BufferedReader reader = new BufferedReader(
new InputStreamReader(is));
while ((line = reader.readLine()) != null) {
sb.append(line).append("\n");
}
is.close();
} catch (IOException e) {
e.printStackTrace();
}

strTemplateGroup = sb.toString();

StringTemplateGroup templates = new StringTemplateGroup(strTemplateGroup);


So, is it possible to create a FileReader through an IFile? If not, how can
I properly pass the string to the overloaded StringTemplateGroup(String)
constructor?

Thanks for the help,

Nauman

PhD Candidate
University of Peshawar
Peshawar, Pakistan

Blog: http://recluze.wordpress.com
Art gallery: http://flickr.com/recluze

Contact number: Use email.

From Giampaolo at Tomassoni.biz  Sun Apr 18 07:30:06 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Sun, 18 Apr 2010 16:30:06 +0200
Subject: [antlr-interest] backtrack=false and AST generation
In-Reply-To: <20100418120719.GE23400@internode.on.net>
References: <000101cadee3$69a03550$3ce09ff0$@biz>
	<20100418120719.GE23400@internode.on.net>
Message-ID: <000101cadf03$a42cdd20$ec869760$@biz>

> You can pass trees from one rule to another as a parameter(s),
> maybe that might help, something like (probably requires more
> work to obtain the tree you are after):
> 
> protected
> expression
>     :	e=conditionalOrExpression conditionalExpression[$e.tree]
>     ;
> 
> protected
> conditionalExpression[CommonTree TheActualASTRoot]
>     :	QMARK t=expression COMMA f=expression
>             -> ^(ITE ${TheActualASTRoot} $t $f)
>     |
>     ;
> 
> Regards, Mark

Thank you Mark, for your clever reply.

May I ask if there is any way to do somthing like this:

protected
expression
    :	e=conditionalOrExpression c=conditionalExpression[$e] -> $c
    ;

protected
conditionalExpression[conditionalOrExpression e]
    :	QMARK t=expression COMMA f=expression	-> ^(ITE $e $t $f)
    |						-> $e
    ;

It seems cleaner to me, since this way subrules are not going to "play
dirty" with the root of their parents.

Unfortunately, this notation causes a "reference to undefined label in
rewrite rule: $e" error. The point may be "e" is not of
conditionalOrExpression type or, well, I don't really know why. Something
like that works with non-AST generating combined parsers (with more
classical actions, then). But it seems not to work with rewrite actions.

Thank you again,

Giampaolo

PS: I forgot to thank everybody for this really great open-source piece.


From jbb at acm.org  Sun Apr 18 08:05:15 2010
From: jbb at acm.org (John B. Brodie)
Date: Sun, 18 Apr 2010 11:05:15 -0400
Subject: [antlr-interest] backtrack=false and AST generation
In-Reply-To: <000101cadf03$a42cdd20$ec869760$@biz>
References: <000101cadee3$69a03550$3ce09ff0$@biz>
	<20100418120719.GE23400@internode.on.net>
	<000101cadf03$a42cdd20$ec869760$@biz>
Message-ID: <1271603115.16025.11.camel@gecko.home.org>

Greetings!

On Sun, 2010-04-18 at 16:30 +0200, Giampaolo Tomassoni wrote:
> > You can pass trees from one rule to another as a parameter(s),
> > maybe that might help, something like (probably requires more
> > work to obtain the tree you are after):
> > 
> > protected
> > expression
> >     :	e=conditionalOrExpression conditionalExpression[$e.tree]
> >     ;
> > 
> > protected
> > conditionalExpression[CommonTree TheActualASTRoot]
> >     :	QMARK t=expression COMMA f=expression
> >             -> ^(ITE ${TheActualASTRoot} $t $f)
> >     |
> >     ;
> > 
> > Regards, Mark
> 
> Thank you Mark, for your clever reply.
> 
> May I ask if there is any way to do somthing like this:
> 
> protected
> expression
>     :	e=conditionalOrExpression c=conditionalExpression[$e] -> $c
>     ;
> 
> protected
> conditionalExpression[conditionalOrExpression e]
>     :	QMARK t=expression COMMA f=expression	-> ^(ITE $e $t $f)
>     |						-> $e
>     ;
> 
> It seems cleaner to me, since this way subrules are not going to "play
> dirty" with the root of their parents.
> 
> Unfortunately, this notation causes a "reference to undefined label in
> rewrite rule: $e" error. The point may be "e" is not of
> conditionalOrExpression type or, well, I don't really know why. Something
> like that works with non-AST generating combined parsers (with more
> classical actions, then). But it seems not to work with rewrite actions.
> 

I do not know why you get the undefined label error.

Have you considered not using a sub-rule for the then-else part?

Something like:

expression : 
    conditionalOrExpression (QMARK^ expression COMMA! expression) ?
  ;

or if you really want ITE as the root (instead of QMARK) perhaps:

expresssion :
    ( c=conditionalOrExpression -> $c )
        ( QMARK t=expression COMMA f=expression-> ^(ITE $c $t $f) )?
 ;


Hope this helps...
   -jbb
   


From Giampaolo at Tomassoni.biz  Sun Apr 18 09:03:47 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Sun, 18 Apr 2010 18:03:47 +0200
Subject: [antlr-interest] backtrack=false and AST generation
In-Reply-To: <1271603115.16025.11.camel@gecko.home.org>
References: <000101cadee3$69a03550$3ce09ff0$@biz>	
	<20100418120719.GE23400@internode.on.net>	
	<000101cadf03$a42cdd20$ec869760$@biz>
	<1271603115.16025.11.camel@gecko.home.org>
Message-ID: <000301cadf10$bac1bc10$30453430$@biz>

> I do not know why you get the undefined label error.
> 
> Have you considered not using a sub-rule for the then-else part?
> 
> Something like:
> 
> expression :
>     conditionalOrExpression (QMARK^ expression COMMA! expression) ?
>   ;
> 
> or if you really want ITE as the root (instead of QMARK) perhaps:
> 
> expresssion :
>     ( c=conditionalOrExpression -> $c )
>         ( QMARK t=expression COMMA f=expression-> ^(ITE $c $t $f) )?
>  ;
> 
> 
> Hope this helps...
>    -jbb

It helped a lot.
 
I was quite sure to get a non-LLR grammar that way, but now I see I have backtrack=false and still antlr doesn't complains...

Thank you, John.

Giampaolo


From parrt at cs.usfca.edu  Sun Apr 18 14:02:45 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 14:02:45 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
Message-ID: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>

Hi.I'm in the process of finishing up the grammar analysis so that I can start on code generation for ANTLR v4. ANTLR v3 lexers were pretty annoying and so I'm doing something a little different this time, though it should work in a backward-compatible way...it will simply work more naturally.  At the moment, I'm looking at the nongreedy loop issue. The following consumes all input then fails since + is greedy:

C : '//' .+ '\n' ;

With the DFA runtime interpreter, I can make this simulate a non-greedy loop but it would consume the rest of the input first and then backtrack. yikes!  I've been reading a lot about the  implementation of non-greedy loops and so on. The easiest way to do it is with an NFA not a DFA. Unfortunately, even with a really clever implementation, the  NFA will be slower. More importantly, I'm approximating recursive lexer rules with a DFA and then will invoke the recursive method at runtime after I've distinguished the input from other rules.  What I mean is that, I really kind of need to build a DFA :)

I looked and neither lex or JavaCC have the non-greedy operator.  They want you to use lexer states, which I will also implement. If you don't want to use a lexer state for the rule above, we can recode it as:

C : '//' ~'\n'+ '\n' ;

Can you folks give me examples that are really difficult to implement without the non-greedy operator? I'm trying to find use cases to push me one direction or the other. Assume you will have lexical states.  The /* ... */ comment is an obvious one I guess that you can implement without a non-greedy loop or a semantic predicate or lexical states.  Hmm...seems a shame to destroy my beautiful DFA for this one case that I can solve easily enough, cutting and pasting again for the rest of my life ;) (or importing it with grammar import statement).

any thoughts are welcome.

Terence

From parrt at cs.usfca.edu  Sun Apr 18 14:29:02 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 14:29:02 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
Message-ID: <23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>


On Apr 18, 2010, at 2:02 PM, Terence Parr wrote:
>  More importantly, I'm approximating recursive lexer rules with a DFA and then will invoke the recursive method at runtime after I've distinguished the input from other rules.  What I mean is that, I really kind of need to build a DFA :)

Hmm...if we allow a stack of lexical states ("modes") then we don't need recursive lexer rules, which I rarely use anyway.  Here's how we could do nested comments:

ID : ... ;
INT : ... ; // usual stuff 
CMT_START : '/*' {pushMode(COMMENTS);} ;

mode COMMENTS:

NESTED_CMT_START : '/*' {pushMode(COMMENTS);} ;
CMT_STOP : '*/' {popMode();} ;
ANY : . ;

That's not as "cool" as this though:

ID : ... ;
INT : ... ; // usual stuff 
CMT : '/*' (CMT | .)* '*/' ;

That said, my current thoughts on impl would match CMT approximately and then rewind to call the generated CMT method and exec it as if it were a parser rule.  Less efficient.  Worse, if approx predicted two recursive methods, I'd have to try both with backtracking...hmm...so maybe we really should avoid recursive lexer rules in favor of states, which handles nongreedy situations and recursion.

Ter



From kferrio at gmail.com  Sun Apr 18 15:17:54 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Sun, 18 Apr 2010 22:17:54 +0000
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu><23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
Message-ID: <1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>

I do not understand what I perceive between the lines as reticence toward lexer states.  Perhaps states seem "clunky" to some folks.  States are elegant -- or at least clean -- to me, provided the state stack frames are strictly scoped by design.   If communication across frames is allowed via anything but globals I can imagine chaos.  

 And although the non-greedy loop is an annoying use case, I think it is rare enough that your high standard for elegance could be relaxed a bit.

Kyle 

Sent from my Verizon Wireless BlackBerry

-----Original Message-----
From: Terence Parr <parrt at cs.usfca.edu>
Date: Sun, 18 Apr 2010 14:29:02 
To: antlr-interest interest<antlr-interest at antlr.org>
Subject: Re: [antlr-interest] greedy vs nongreedy lexer rules


On Apr 18, 2010, at 2:02 PM, Terence Parr wrote:
>  More importantly, I'm approximating recursive lexer rules with a DFA and then will invoke the recursive method at runtime after I've distinguished the input from other rules.  What I mean is that, I really kind of need to build a DFA :)

Hmm...if we allow a stack of lexical states ("modes") then we don't need recursive lexer rules, which I rarely use anyway.  Here's how we could do nested comments:

ID : ... ;
INT : ... ; // usual stuff 
CMT_START : '/*' {pushMode(COMMENTS);} ;

mode COMMENTS:

NESTED_CMT_START : '/*' {pushMode(COMMENTS);} ;
CMT_STOP : '*/' {popMode();} ;
ANY : . ;

That's not as "cool" as this though:

ID : ... ;
INT : ... ; // usual stuff 
CMT : '/*' (CMT | .)* '*/' ;

That said, my current thoughts on impl would match CMT approximately and then rewind to call the generated CMT method and exec it as if it were a parser rule.  Less efficient.  Worse, if approx predicted two recursive methods, I'd have to try both with backtracking...hmm...so maybe we really should avoid recursive lexer rules in favor of states, which handles nongreedy situations and recursion.

Ter



List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Sun Apr 18 15:40:15 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 15:40:15 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu><23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
Message-ID: <1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>

Hi Kyle.  Thanks for the thoughts!  I'm also having more evil thoughts.  

The ANTLR lexers are really out of control in what they allow just to support edge cases.  For MOST grammars, you have no actions in lexer rules except for skip() calls in whitespace rules etc...  Some are complicated like ANTLR's action splitter. here's a few rules:

SET_DYNAMIC_SCOPE_ATTR
	:	'$' x=ID '::' y=ID WS? '=' expr=ATTR_VALUE_EXPR ';'
		{delegate.setDynamicScopeAttr($text, $x, $y, $expr);}
	;

DYNAMIC_SCOPE_ATTR
	:	'$' x=ID '::' y=ID {delegate.dynamicScopeAttr($text, $x, $y);}
	;

QUALIFIED_ATTR
	:	'$' x=ID '.' y=ID {input.LA(1)!='('}? {delegate.qualifiedAttr($text, $x, $y);}
	;

Actions are at right edges (easy to do) but they ref labels from rule refs.  I can implement this easily enough with a DFA that saves named substrings and then ref them in the action.  But, actions sort of imply I'm going to generate code for the rules. I would LOVE to do away with lexer code gen (makes new targets easier too).  With predicates and actions in middle of rules, though, we'd have to stuff those in another "support" function somewhere and then exec them AFTER we match rules in case we have an ambiguous case.  For example:

FOO : 'f' {an-action} 'oo' ;
ID : 'a'..'z'+ ;

Here, after matching 'f', we can't distinguish FOO vs ID yet we have to exec an action!  The only way is to match FOO vs ID with the DFA and then rewind and exec FOO (the winner). Ugh. That means generating a FOO() method.  Or, we could simply disallow ambig action exec, which is easy for me to detect in the NFA->DFA conversion.

What about local variables?

DUH : {int n=0;} ('a'..'z' {n++;})+ {do something with n;} ;

can't yank {int n=0;} into its own function.  I'm thinking we need to formalize locals so I can avoid genrating code that won't compile.

What about backward compatibility?  Losing recursion breaks some grammars.  Formalizing locals breaks some.  Perhaps easy answer is to simply allow v3 lexers to hook in to v4 parsers.  The imports within the v3 lexer would have change to

import org.antlr.v4.runtime.legacy.Lexer;

etc... but we could make it work.

A tough decision.  I'm aiming for really small lexers w/o code gen except for user actions and semantic predicates.  

Ter



From marcin.rzeznicki at gmail.com  Sun Apr 18 15:40:53 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 19 Apr 2010 00:40:53 +0200
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
Message-ID: <y2v14799bf61004181540w22d08dl589225489b0f4b94@mail.gmail.com>

On Sun, Apr 18, 2010 at 11:02 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> Can you folks give me examples that are really difficult to implement without the non-greedy operator? I'm trying to find use cases to push me one direction or the other. Assume you will have lexical states. ?The /* ... */ comment is an obvious one I guess that you can implement without a non-greedy loop or a semantic predicate or lexical states. ?Hmm...seems a shame to destroy my beautiful DFA for this one case that I can solve easily enough, cutting and pasting again for the rest of my life ;) (or importing it with grammar import statement).
>
> any thoughts are welcome.
>
>

Hi,
Well, once I posted here the example of some construct which, in my
opinion, is hard to get right without non-greedy rules. Let me repost:

fragment
VerbatimString
  :
  (
    '[' BlanksOrTabs NewLine BlanksOrTabs
    ( options {greedy=false;}:
      ~(
        '\r'
        | '\n'
       )*
      NewLine BlanksOrTabs
    )*
    ']'
  )
  |
  (
    '{' BlanksOrTabs NewLine BlanksOrTabs
    ( options {greedy=false;}:
      ~(
        '\r'
        | '\n'
       )*
      NewLine BlanksOrTabs
    )*
    '}'
  )
  ;

What;s going on here is that you may have two kinds of strings -
either with '[' ']' as delimiters, or '{' '}' - there are different
semantics that depend on chosen delimiter. Lexer states can be used
for eliminating clumsy alternative, I suppose - if you see '{' on
input enter the 1st mode, otherwise enter the 2nd mode . But the inner
loop here is not solvable with lexer states unless one is willing to
duplicate it in both modes (am I right here?).

From parrt at cs.usfca.edu  Sun Apr 18 16:02:39 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 16:02:39 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <y2v14799bf61004181540w22d08dl589225489b0f4b94@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<y2v14799bf61004181540w22d08dl589225489b0f4b94@mail.gmail.com>
Message-ID: <FF087863-8246-4DB6-BDF5-5DC3702F488E@cs.usfca.edu>

Hi Marcin,

First, can you do this in v3?

fragment
VerbatimString
 :
 (
   '[' GUTS ']'
 )
 |
 (
   '{' GUTS '}'
 )
 ;

fragment
GUTS : BlanksOrTabs NewLine BlanksOrTabs
   ( options {greedy=false;}:
     ~(
       '\r'
       | '\n'
      )*
     NewLine BlanksOrTabs
   )*
;

Then, with lexical modes, you'd share the same mode for the inside/guts.

Ter
On Apr 18, 2010, at 3:40 PM, Marcin Rze?nicki wrote:
> Hi,
> Well, once I posted here the example of some construct which, in my
> opinion, is hard to get right without non-greedy rules. Let me repost:
> 
> fragment
> VerbatimString
>  :
>  (
>    '[' BlanksOrTabs NewLine BlanksOrTabs
>    ( options {greedy=false;}:
>      ~(
>        '\r'
>        | '\n'
>       )*
>      NewLine BlanksOrTabs
>    )*
>    ']'
>  )
>  |
>  (
>    '{' BlanksOrTabs NewLine BlanksOrTabs
>    ( options {greedy=false;}:
>      ~(
>        '\r'
>        | '\n'
>       )*
>      NewLine BlanksOrTabs
>    )*
>    '}'
>  )
>  ;
> 
> What;s going on here is that you may have two kinds of strings -
> either with '[' ']' as delimiters, or '{' '}' - there are different
> semantics that depend on chosen delimiter. Lexer states can be used
> for eliminating clumsy alternative, I suppose - if you see '{' on
> input enter the 1st mode, otherwise enter the 2nd mode . But the inner
> loop here is not solvable with lexer states unless one is willing to
> duplicate it in both modes (am I right here?).


From cliff.s.hudson at gmail.com  Sun Apr 18 16:04:41 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sun, 18 Apr 2010 16:04:41 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
Message-ID: <j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>

With respect to local variables and actions in ambiguous sets of rule, it
seems to me that the entire rule alternative is the scope for all actions
which appear in it, so having an action which declares a variable and then
another action later in the alternative which executes some code is really
all one method.  What would need to be dealt with is that the language
target generator would need to be able to take the state pulled from the DFA
and insert that information into the alternative's action sequence so that
each action had access to the logical state at the time it executes.

For instance, in the rule:

FOO: { int n=4; } 'a'* { n += $text.Length; } 'bcd' { System.WriteLine("{0}:
{1}", n, $text); } ;

the alternative's action function would look like:

foo_alt1(State[] states)
{
    int n=4;
    n += states[0].Text.Length;
    System.WriteLine("{0}: {1}", n, states[1].Text);
}

The State[] is an output from the DFA.  Ambiguity then doesn't have any
effect on your ability to execute actions, but language targets would need
to be rewritten.


On Sun, Apr 18, 2010 at 3:40 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Kyle.  Thanks for the thoughts!  I'm also having more evil thoughts.
>
> The ANTLR lexers are really out of control in what they allow just to
> support edge cases.  For MOST grammars, you have no actions in lexer rules
> except for skip() calls in whitespace rules etc...  Some are complicated
> like ANTLR's action splitter. here's a few rules:
>
> SET_DYNAMIC_SCOPE_ATTR
>        :       '$' x=ID '::' y=ID WS? '=' expr=ATTR_VALUE_EXPR ';'
>                {delegate.setDynamicScopeAttr($text, $x, $y, $expr);}
>        ;
>
> DYNAMIC_SCOPE_ATTR
>        :       '$' x=ID '::' y=ID {delegate.dynamicScopeAttr($text, $x,
> $y);}
>        ;
>
> QUALIFIED_ATTR
>        :       '$' x=ID '.' y=ID {input.LA(1)!='('}?
> {delegate.qualifiedAttr($text, $x, $y);}
>        ;
>
> Actions are at right edges (easy to do) but they ref labels from rule refs.
>  I can implement this easily enough with a DFA that saves named substrings
> and then ref them in the action.  But, actions sort of imply I'm going to
> generate code for the rules. I would LOVE to do away with lexer code gen
> (makes new targets easier too).  With predicates and actions in middle of
> rules, though, we'd have to stuff those in another "support" function
> somewhere and then exec them AFTER we match rules in case we have an
> ambiguous case.  For example:
>
> FOO : 'f' {an-action} 'oo' ;
> ID : 'a'..'z'+ ;
>
> Here, after matching 'f', we can't distinguish FOO vs ID yet we have to
> exec an action!  The only way is to match FOO vs ID with the DFA and then
> rewind and exec FOO (the winner). Ugh. That means generating a FOO() method.
>  Or, we could simply disallow ambig action exec, which is easy for me to
> detect in the NFA->DFA conversion.
>
> What about local variables?
>
> DUH : {int n=0;} ('a'..'z' {n++;})+ {do something with n;} ;
>
> can't yank {int n=0;} into its own function.  I'm thinking we need to
> formalize locals so I can avoid genrating code that won't compile.
>
> What about backward compatibility?  Losing recursion breaks some grammars.
>  Formalizing locals breaks some.  Perhaps easy answer is to simply allow v3
> lexers to hook in to v4 parsers.  The imports within the v3 lexer would have
> change to
>
> import org.antlr.v4.runtime.legacy.Lexer;
>
> etc... but we could make it work.
>
> A tough decision.  I'm aiming for really small lexers w/o code gen except
> for user actions and semantic predicates.
>
> Ter
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Sun Apr 18 16:08:35 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 16:08:35 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
Message-ID: <8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>

Hi Cliff, thanks for the input.  I think it might be hard to record complete "state of the lexer" for each input position efficiently.  Users could, for example, update a large global data structure as they lexed.

Hmm...yeah, i was trying this idea earlier but we sort of need to formalize arguments to parser rules to handle predicates that get generated outside of the defining function (when I need to gen cyclic DFA).  THis happens for Java as it has no goto. might as well do locals too.

T

On Apr 18, 2010, at 4:04 PM, Cliff Hudson wrote:

> With respect to local variables and actions in ambiguous sets of rule, it seems to me that the entire rule alternative is the scope for all actions which appear in it, so having an action which declares a variable and then another action later in the alternative which executes some code is really all one method.  What would need to be dealt with is that the language target generator would need to be able to take the state pulled from the DFA and insert that information into the alternative's action sequence so that each action had access to the logical state at the time it executes.
> 
> For instance, in the rule:
> 
> FOO: { int n=4; } 'a'* { n += $text.Length; } 'bcd' { System.WriteLine("{0}: {1}", n, $text); } ;
> 
> the alternative's action function would look like:
> 
> foo_alt1(State[] states)
> {
>     int n=4;
>     n += states[0].Text.Length;
>     System.WriteLine("{0}: {1}", n, states[1].Text);
> }
> 
> The State[] is an output from the DFA.  Ambiguity then doesn't have any effect on your ability to execute actions, but language targets would need to be rewritten.


From marcin.rzeznicki at gmail.com  Sun Apr 18 16:15:40 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 19 Apr 2010 01:15:40 +0200
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <FF087863-8246-4DB6-BDF5-5DC3702F488E@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<y2v14799bf61004181540w22d08dl589225489b0f4b94@mail.gmail.com>
	<FF087863-8246-4DB6-BDF5-5DC3702F488E@cs.usfca.edu>
Message-ID: <j2u14799bf61004181615xdfaa37aeqf52548977798c07d@mail.gmail.com>

On Mon, Apr 19, 2010 at 1:02 AM, Terence Parr <parrt at cs.usfca.edu> wrote:
> Hi Marcin,
>
> First, can you do this in v3?
>
> fragment
> VerbatimString
> ?:
> ?(
> ? '[' GUTS ']'
> ?)
> ?|
> ?(
> ? '{' GUTS '}'
> ?)
> ?;
>
> fragment
> GUTS : BlanksOrTabs NewLine BlanksOrTabs
> ? ( options {greedy=false;}:
> ? ? ~(
> ? ? ? '\r'
> ? ? ? | '\n'
> ? ? ?)*
> ? ? NewLine BlanksOrTabs
> ? )*
> ;
>
> Then, with lexical modes, you'd share the same mode for the inside/guts.

I am not sure whether it works: as far as I can remember I tried that
and, looking at generated code, I realized that GUTS was not using
'follows' information so it didn't really know when to leave the loop.
That was my question in the original post where I brought this issue
up - I wrote then:

My initial grammar:
fragment
VerbatimString
  :
  (
    '[' LineSequence ']'
  )
  |
  (
    '{' LineSequence '}'
  )
  ;

fragment
LineSequence
   :
NewLine
    (
      ~(
        '\r'
        | '\n'
       )+
      NewLine
    )*

The intention was to match strings starting with some separator ('['
or '{') followed by new line, extending to the closing separator
preceded by new line. Of course, it isn't exactly correct, as you
probably spotted. Problem here was that LineSequence would gladly
consume closing separator after the new line. So, it seemed logical to
make loop in LineSequence non-greedy so that it examines what follows
and leaves as soon as closing operator appears in lookahead. I tried:
fragment
LineSequence
   :
NewLine
    ( options {greedy=false;}:
      ~(
        '\r'
        | '\n'
       )+
      NewLine
    )*
;

and it occurred to me that ANTLR does not really inspect follow set,
it seems to inspect only what's left in the rule itself.


Based on this, I believe your proposal wouldn't work.



-- 
Pozdrawiam
Marcin Rze?nicki

From cliff.s.hudson at gmail.com  Sun Apr 18 16:18:48 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sun, 18 Apr 2010 16:18:48 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
Message-ID: <s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>

Hmm, it seems to me that there should be a way to record the set of
recursive actions and appropriate pointers into the lexed string such that
you can replicate the logical state of the DFA when you execute the actions
once an alternative is definitely selected.  Is there more to the state of
the system at any given possible action point than a pointer to the start of
the current substring, its length, and maybe a pointer to the already
matched token stream?  I am possibly out of my depth here on understanding
how the lexing system really works.  Or I have not adequately explained my
idea :)

On Sun, Apr 18, 2010 at 4:08 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

> Hi Cliff, thanks for the input.  I think it might be hard to record
> complete "state of the lexer" for each input position efficiently.  Users
> could, for example, update a large global data structure as they lexed.
>
> Hmm...yeah, i was trying this idea earlier but we sort of need to formalize
> arguments to parser rules to handle predicates that get generated outside of
> the defining function (when I need to gen cyclic DFA).  THis happens for
> Java as it has no goto. might as well do locals too.
>
> T
>
> On Apr 18, 2010, at 4:04 PM, Cliff Hudson wrote:
>
> > With respect to local variables and actions in ambiguous sets of rule, it
> seems to me that the entire rule alternative is the scope for all actions
> which appear in it, so having an action which declares a variable and then
> another action later in the alternative which executes some code is really
> all one method.  What would need to be dealt with is that the language
> target generator would need to be able to take the state pulled from the DFA
> and insert that information into the alternative's action sequence so that
> each action had access to the logical state at the time it executes.
> >
> > For instance, in the rule:
> >
> > FOO: { int n=4; } 'a'* { n += $text.Length; } 'bcd' {
> System.WriteLine("{0}: {1}", n, $text); } ;
> >
> > the alternative's action function would look like:
> >
> > foo_alt1(State[] states)
> > {
> >     int n=4;
> >     n += states[0].Text.Length;
> >     System.WriteLine("{0}: {1}", n, states[1].Text);
> > }
> >
> > The State[] is an output from the DFA.  Ambiguity then doesn't have any
> effect on your ability to execute actions, but language targets would need
> to be rewritten.
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Sun Apr 18 16:18:57 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 16:18:57 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <j2u14799bf61004181615xdfaa37aeqf52548977798c07d@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<y2v14799bf61004181540w22d08dl589225489b0f4b94@mail.gmail.com>
	<FF087863-8246-4DB6-BDF5-5DC3702F488E@cs.usfca.edu>
	<j2u14799bf61004181615xdfaa37aeqf52548977798c07d@mail.gmail.com>
Message-ID: <5009802C-345C-4660-A9B1-01FB0B972A20@cs.usfca.edu>


On Apr 18, 2010, at 4:15 PM, Marcin Rze?nicki wrote:
> I am not sure whether it works: as far as I can remember I tried that
> and, looking at generated code, I realized that GUTS was not using
> 'follows' information so it didn't really know when to leave the loop.

Hmm...it should since it's a fragment rule. 

Well, either way, we'd need to duplicate the GUTS then (nongreedy in v3 or modes in v4).

Wow...this is a tough decision about how to do v4 lexers...I'd really like to avoid generating recursive-descent lexer code, sticking with a state machine.

Ter


From kferrio at gmail.com  Sun Apr 18 16:26:04 2010
From: kferrio at gmail.com (kferrio at gmail.com)
Date: Sun, 18 Apr 2010 23:26:04 +0000
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu><23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry><1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
Message-ID: <219661399-1271633165-cardhu_decombobulator_blackberry.rim.net-1891177779-@bda428.bisx.prod.on.blackberry>

Yep.  Pretty complex.  I don't have answers but as a user I concur that antlr lexers have become perhaps a bit unwieldy and this probably gives the maintainers of the existing targets grief, to say nothing of the impact on new targets.  

I understand the appeal of eliminating codegen for lexers.  It would be interesting to see how that works in practice.  Seems like a dilemma worthy of Macbeth.  
I also have some appreciation of how ugly rewinding to resolve ambiguities becomes in the presence of actions.  That seems like one of those things which cannot be made elegant without giving up a lot of powerful and *common* use cases.  

Although I usually cringe at breaking changes, I say go for it if it is good for the long haul.  It's not like v3 has been out long enough to become canon and hey you can always write another book!  :)

Sorry I can't actually help...but I think I see what you're trying to do.  v4 promises to 'unify' and set us up for an extended run.  

Kyle 

Sent from my Verizon Wireless BlackBerry

-----Original Message-----
From: Terence Parr <parrt at cs.usfca.edu>
Date: Sun, 18 Apr 2010 15:40:15 
To: <kferrio at gmail.com>
Cc: ANTLR<antlr-interest at antlr.org>
Subject: Re: [antlr-interest] greedy vs nongreedy lexer rules

Hi Kyle.  Thanks for the thoughts!  I'm also having more evil thoughts.  

The ANTLR lexers are really out of control in what they allow just to support edge cases.  For MOST grammars, you have no actions in lexer rules except for skip() calls in whitespace rules etc...  Some are complicated like ANTLR's action splitter. here's a few rules:

SET_DYNAMIC_SCOPE_ATTR
	:	'$' x=ID '::' y=ID WS? '=' expr=ATTR_VALUE_EXPR ';'
		{delegate.setDynamicScopeAttr($text, $x, $y, $expr);}
	;

DYNAMIC_SCOPE_ATTR
	:	'$' x=ID '::' y=ID {delegate.dynamicScopeAttr($text, $x, $y);}
	;

QUALIFIED_ATTR
	:	'$' x=ID '.' y=ID {input.LA(1)!='('}? {delegate.qualifiedAttr($text, $x, $y);}
	;

Actions are at right edges (easy to do) but they ref labels from rule refs.  I can implement this easily enough with a DFA that saves named substrings and then ref them in the action.  But, actions sort of imply I'm going to generate code for the rules. I would LOVE to do away with lexer code gen (makes new targets easier too).  With predicates and actions in middle of rules, though, we'd have to stuff those in another "support" function somewhere and then exec them AFTER we match rules in case we have an ambiguous case.  For example:

FOO : 'f' {an-action} 'oo' ;
ID : 'a'..'z'+ ;

Here, after matching 'f', we can't distinguish FOO vs ID yet we have to exec an action!  The only way is to match FOO vs ID with the DFA and then rewind and exec FOO (the winner). Ugh. That means generating a FOO() method.  Or, we could simply disallow ambig action exec, which is easy for me to detect in the NFA->DFA conversion.

What about local variables?

DUH : {int n=0;} ('a'..'z' {n++;})+ {do something with n;} ;

can't yank {int n=0;} into its own function.  I'm thinking we need to formalize locals so I can avoid genrating code that won't compile.

What about backward compatibility?  Losing recursion breaks some grammars.  Formalizing locals breaks some.  Perhaps easy answer is to simply allow v3 lexers to hook in to v4 parsers.  The imports within the v3 lexer would have change to

import org.antlr.v4.runtime.legacy.Lexer;

etc... but we could make it work.

A tough decision.  I'm aiming for really small lexers w/o code gen except for user actions and semantic predicates.  

Ter



From marcin.rzeznicki at gmail.com  Sun Apr 18 16:26:29 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 19 Apr 2010 01:26:29 +0200
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <5009802C-345C-4660-A9B1-01FB0B972A20@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<y2v14799bf61004181540w22d08dl589225489b0f4b94@mail.gmail.com>
	<FF087863-8246-4DB6-BDF5-5DC3702F488E@cs.usfca.edu>
	<j2u14799bf61004181615xdfaa37aeqf52548977798c07d@mail.gmail.com>
	<5009802C-345C-4660-A9B1-01FB0B972A20@cs.usfca.edu>
Message-ID: <p2y14799bf61004181626h50d1f4a0w390fd6428e452bdc@mail.gmail.com>

2010/4/19 Terence Parr <parrt at cs.usfca.edu>:
>
> On Apr 18, 2010, at 4:15 PM, Marcin Rze?nicki wrote:
>> I am not sure whether it works: as far as I can remember I tried that
>> and, looking at generated code, I realized that GUTS was not using
>> 'follows' information so it didn't really know when to leave the loop.
>
> Hmm...it should since it's a fragment rule.

;-))
You replied:
The key to your question was:

"and it occurred to me that ANTLR does not really inspect follow set, it
seems to inspect only what's left in the rule itself."

That improvement/bug is what I intend to fix :)  Actually, ANTLR v4
lexers will just plain work better (i.e., more like what you expect)
;)



>
> Well, either way, we'd need to duplicate the GUTS then (nongreedy in v3 or modes in v4).
>
> Wow...this is a tough decision about how to do v4 lexers...I'd really like to avoid generating recursive-descent lexer code, sticking with a state machine.
>

The thing is that, as this example shows, you can completely get rid
of greedy/non-greedy by introducing, if you will, 'follow-awareness'.
I am not sure how hard it is, and how representative this example is,
but that's the conclusion I've come up with.

> Ter
>
>



-- 
Greetings
Marcin Rze?nicki

From parrt at cs.usfca.edu  Sun Apr 18 16:28:17 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 16:28:17 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
Message-ID: <1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>


On Apr 18, 2010, at 4:18 PM, Cliff Hudson wrote:

> Hmm, it seems to me that there should be a way to record the set of
> recursive actions and appropriate pointers into the lexed string such that
> you can replicate the logical state of the DFA when you execute the actions
> once an alternative is definitely selected.  Is there more to the state of
> the system at any given possible action point than a pointer to the start of
> the current substring, its length, and maybe a pointer to the already
> matched token stream?  I am possibly out of my depth here on understanding
> how the lexing system really works.  Or I have not adequately explained my
> idea :)

hiya. :)  Well, imagine that you are modifying "global" state as you match characters in identifier; this is something done in actions that ANTLR can analyze. There is no way to "roll this back".  ANTLR can only provide the information you specified about where it is and what character it was parsing--it can't deal with other member variables that you have updated.  Plus tracking all that information for input character could get expensive even if it was limited to that.

I'm leaning towards a trivial NFA implementation (Thompson's algorithm from the 60s as described by Russ Cox)

http://swtch.com/~rsc/regexp/regexp2.html

because it allows us to save partial matches like id=ID very easily, unlike a DFA. Unfortunately, we really need identifiers and keywords to be efficient because that's what most input streams consist of. I'm not sure I could get the NFA to go that fast compared to a DFA. On the other hand, the new NFA-based mechanism would likely be faster than the current v3 mechanism which is guaranteed to recognize the first few characters of any token twice. so, in the end I should go for the smallest implementation and the simplest that gives us the capabilities. That would spell Thompson's NFA-based algorithm. There's even a chance that I could make it go faster using two or three threads instead of just one to do the NFA simulation. 

choices choices

Ter

From marcin.rzeznicki at gmail.com  Sun Apr 18 16:33:24 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 19 Apr 2010 01:33:24 +0200
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
Message-ID: <g2p14799bf61004181633z1212527cvb6b2e3536b85cd29@mail.gmail.com>

> There's even a chance that I could make it go faster using two or three threads instead of just one to do the NFA simulation.
>

+1

I think this is truly great idea - with no shared state it should shine

From cliff.s.hudson at gmail.com  Sun Apr 18 16:50:41 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sun, 18 Apr 2010 16:50:41 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
Message-ID: <v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>

You wrote:

Well, imagine that you are modifying "global" state as you match characters
in identifier; this is something done in actions that ANTLR can analyze.
There is no way to "roll this back".

The 'global' state you are talking about is state the DFA is modifying but
which an action in a rule could examine?  Is the amount of state visible to
actions too much to store while alternatives are being evaulated?


On Sun, Apr 18, 2010 at 4:28 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> On Apr 18, 2010, at 4:18 PM, Cliff Hudson wrote:
>
> > Hmm, it seems to me that there should be a way to record the set of
> > recursive actions and appropriate pointers into the lexed string such
> that
> > you can replicate the logical state of the DFA when you execute the
> actions
> > once an alternative is definitely selected.  Is there more to the state
> of
> > the system at any given possible action point than a pointer to the start
> of
> > the current substring, its length, and maybe a pointer to the already
> > matched token stream?  I am possibly out of my depth here on
> understanding
> > how the lexing system really works.  Or I have not adequately explained
> my
> > idea :)
>
> hiya. :)  Well, imagine that you are modifying "global" state as you match
> characters in identifier; this is something done in actions that ANTLR can
> analyze. There is no way to "roll this back".  ANTLR can only provide the
> information you specified about where it is and what character it was
> parsing--it can't deal with other member variables that you have updated.
>  Plus tracking all that information for input character could get expensive
> even if it was limited to that.
>
> I'm leaning towards a trivial NFA implementation (Thompson's algorithm from
> the 60s as described by Russ Cox)
>
> http://swtch.com/~rsc/regexp/regexp2.html
>
> because it allows us to save partial matches like id=ID very easily, unlike
> a DFA. Unfortunately, we really need identifiers and keywords to be
> efficient because that's what most input streams consist of. I'm not sure I
> could get the NFA to go that fast compared to a DFA. On the other hand, the
> new NFA-based mechanism would likely be faster than the current v3 mechanism
> which is guaranteed to recognize the first few characters of any token
> twice. so, in the end I should go for the smallest implementation and the
> simplest that gives us the capabilities. That would spell Thompson's
> NFA-based algorithm. There's even a chance that I could make it go faster
> using two or three threads instead of just one to do the NFA simulation.
>
> choices choices
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cliff.s.hudson at gmail.com  Sun Apr 18 16:52:43 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sun, 18 Apr 2010 16:52:43 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
Message-ID: <k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>

On the subject of multi-threaded implementation, let me vote +1 for
providing a mechanism for target implementors to take advantage of this. :)
 Multi-core systems are the norm now.  In my job, we spend a LOT of time
determining how best to extract maximum work in minimum time, and parallel
programming is a big part of that.

On Sun, Apr 18, 2010 at 4:28 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> On Apr 18, 2010, at 4:18 PM, Cliff Hudson wrote:
>
> > Hmm, it seems to me that there should be a way to record the set of
> > recursive actions and appropriate pointers into the lexed string such
> that
> > you can replicate the logical state of the DFA when you execute the
> actions
> > once an alternative is definitely selected.  Is there more to the state
> of
> > the system at any given possible action point than a pointer to the start
> of
> > the current substring, its length, and maybe a pointer to the already
> > matched token stream?  I am possibly out of my depth here on
> understanding
> > how the lexing system really works.  Or I have not adequately explained
> my
> > idea :)
>
> hiya. :)  Well, imagine that you are modifying "global" state as you match
> characters in identifier; this is something done in actions that ANTLR can
> analyze. There is no way to "roll this back".  ANTLR can only provide the
> information you specified about where it is and what character it was
> parsing--it can't deal with other member variables that you have updated.
>  Plus tracking all that information for input character could get expensive
> even if it was limited to that.
>
> I'm leaning towards a trivial NFA implementation (Thompson's algorithm from
> the 60s as described by Russ Cox)
>
> http://swtch.com/~rsc/regexp/regexp2.html
>
> because it allows us to save partial matches like id=ID very easily, unlike
> a DFA. Unfortunately, we really need identifiers and keywords to be
> efficient because that's what most input streams consist of. I'm not sure I
> could get the NFA to go that fast compared to a DFA. On the other hand, the
> new NFA-based mechanism would likely be faster than the current v3 mechanism
> which is guaranteed to recognize the first few characters of any token
> twice. so, in the end I should go for the smallest implementation and the
> simplest that gives us the capabilities. That would spell Thompson's
> NFA-based algorithm. There's even a chance that I could make it go faster
> using two or three threads instead of just one to do the NFA simulation.
>
> choices choices
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Sun Apr 18 16:53:15 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 16:53:15 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>
Message-ID: <05BE0A5A-E9B7-4FCE-8384-15A0ED834DA9@cs.usfca.edu>


On Apr 18, 2010, at 4:50 PM, Cliff Hudson wrote:

> You wrote:
> 
> Well, imagine that you are modifying "global" state as you match characters in identifier; this is something done in actions that ANTLR can analyze. There is no way to "roll this back".
> 
> The 'global' state you are talking about is state the DFA is modifying but which an action in a rule could examine?  Is the amount of state visible to actions too much to store while alternatives are being evaulated?

It's state you set up and modify then ref:

@members {
int i = 0;
}

...

ID : ('a'..'z' {i++;})+ {System.out.println(i);} ;

ANTLR can't save i for you each char iteration.

Ter

From parrt at cs.usfca.edu  Sun Apr 18 16:56:18 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 16:56:18 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
Message-ID: <9DEE1B40-392B-4A5D-96E8-C070228D1A23@cs.usfca.edu>


On Apr 18, 2010, at 4:52 PM, Cliff Hudson wrote:

> On the subject of multi-threaded implementation, let me vote +1 for providing a mechanism for target implementors to take advantage of this. :)  Multi-core systems are the norm now.  In my job, we spend a LOT of time determining how best to extract maximum work in minimum time, and parallel programming is a big part of that.

Yeah, best we can do is linear for NFA evaluation given infinite processors, though, unless I allow lexer to race ahead of parser, buffering up all the tokens.  It's a good idea to explore.

Synchronization might kill idea of threads to handle a single token though. I need n-1 threads to die when one of the threads succeeds.  actually that could be unguarded boolean i think.  anyway, i'm still thinking about action execution. grrr. a hard nut to crack.

Ter

From cliff.s.hudson at gmail.com  Sun Apr 18 17:05:29 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sun, 18 Apr 2010 17:05:29 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <05BE0A5A-E9B7-4FCE-8384-15A0ED834DA9@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>
	<05BE0A5A-E9B7-4FCE-8384-15A0ED834DA9@cs.usfca.edu>
Message-ID: <g2x1c0448551004181705y2307fd8vedb203e1fc11b274@mail.gmail.com>

Ahh, that's what I was getting at.  In my system, the actions would not be
embedded directly in the matching code as they are now.  Instead, all of the
actions which were part of an alternative would be executed together against
the global state.  Consider the following (assuming the C# language target)
based on the example you gave above.  The implementation of the Lexer
subclass would look as follows:

public class MyLexer : Lexer
{
  int i = 0; // from @members

  ... DFA stuff, token decls, etc...
  public void ID()
  {
     // Implemented as normal, except that where {i++} would be, there would
be
     // code which instead saves the action-visible state of the parser into
a State block.
     // This visible state means only the values of those variables which
are generated by the
     // running the the DFA, not those which might be updated by the
actions.  This
     // snapshot is then enqueued.

  }

public void ID_alt1(Queue<State> states)
{
    State currentState = states.Dequeue();
    i++; // While state information was enqueued, it turns out we didn't use
it here.
           // A language target would have translated any references to
action-visible
           // token information such as $text into

}


On Sun, Apr 18, 2010 at 4:53 PM, Terence Parr <parrt at cs.usfca.edu> wrote:

>
> On Apr 18, 2010, at 4:50 PM, Cliff Hudson wrote:
>
> > You wrote:
> >
> > Well, imagine that you are modifying "global" state as you match
> characters in identifier; this is something done in actions that ANTLR can
> analyze. There is no way to "roll this back".
> >
> > The 'global' state you are talking about is state the DFA is modifying
> but which an action in a rule could examine?  Is the amount of state visible
> to actions too much to store while alternatives are being evaulated?
>
> It's state you set up and modify then ref:
>
> @members {
> int i = 0;
> }
>
> ...
>
> ID : ('a'..'z' {i++;})+ {System.out.println(i);} ;
>
> ANTLR can't save i for you each char iteration.
>
> Ter
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cliff.s.hudson at gmail.com  Sun Apr 18 17:09:45 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sun, 18 Apr 2010 17:09:45 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <g2x1c0448551004181705y2307fd8vedb203e1fc11b274@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>
	<05BE0A5A-E9B7-4FCE-8384-15A0ED834DA9@cs.usfca.edu>
	<g2x1c0448551004181705y2307fd8vedb203e1fc11b274@mail.gmail.com>
Message-ID: <x2x1c0448551004181709z9332d773gb253c97087ab46f2@mail.gmail.com>

Sorry, accidentally sent a partial message.  See below for the complete
message.

Ahh, that's what I was getting at.  In my system, the actions would not be
> embedded directly in the matching code as they are now.  Instead, all of the
> actions which were part of an alternative would be executed together against
> the global state.  Consider the following (assuming the C# language target)
> based on the example you gave above.  The implementation of the Lexer
> subclass would look as follows:
>
> public class MyLexer : Lexer
> {
>   int i = 0; // from @members
>
>   ... DFA stuff, token decls, etc...
>   public void ID()
>   {
>      // Implemented as normal, except that where {i++} would be, there
> would be
>      // code which instead saves the action-visible state of the parser
> into a State block.
>      // This visible state means only the values of those variables which
> are generated by the
>      // running the the DFA, not those which might be updated by the
> actions.  This
>      // snapshot is then enqueued.
>
>         // Once ID is definitely matched, ID_alt1 itself is enqueued along
with a the queued states.

>   }
>
> public void ID_alt1(Queue<State> states)
> {
>     State currentState = states.Dequeue();
>     i++; // While state information was enqueued, it turns out we didn't
> use it here.
>            // A language target would have translated any references to
> action-visible
>            // token information such as $text into references into
> currentState.
>
       currentState = states.Dequeue();

>     System.Console.WriteLine("{0}", i); // Again, no information is used,
> but if it were, it would be
>
                                                           // from a
reference into currentState.

> }
>
> Once a particular alternative is selected, the action function would be
executed with the enqueued states.
No alternative could be executed if it was below any incomplete alternative
(in otherwords, fragments would
not execute until the alternative referencing them itself was definitively
selected.)

Does that make more sense?

>
> On Sun, Apr 18, 2010 at 4:53 PM, Terence Parr <parrt at cs.usfca.edu> wrote:
>
>>
>> On Apr 18, 2010, at 4:50 PM, Cliff Hudson wrote:
>>
>> > You wrote:
>> >
>> > Well, imagine that you are modifying "global" state as you match
>> characters in identifier; this is something done in actions that ANTLR can
>> analyze. There is no way to "roll this back".
>> >
>> > The 'global' state you are talking about is state the DFA is modifying
>> but which an action in a rule could examine?  Is the amount of state visible
>> to actions too much to store while alternatives are being evaulated?
>>
>> It's state you set up and modify then ref:
>>
>> @members {
>> int i = 0;
>> }
>>
>> ...
>>
>> ID : ('a'..'z' {i++;})+ {System.out.println(i);} ;
>>
>> ANTLR can't save i for you each char iteration.
>>
>> Ter
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe:
>> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>

From parrt at cs.usfca.edu  Sun Apr 18 17:11:29 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Sun, 18 Apr 2010 17:11:29 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <x2x1c0448551004181709z9332d773gb253c97087ab46f2@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>
	<05BE0A5A-E9B7-4FCE-8384-15A0ED834DA9@cs.usfca.edu>
	<g2x1c0448551004181705y2307fd8vedb203e1fc11b274@mail.gmail.com>
	<x2x1c0448551004181709z9332d773gb253c97087ab46f2@mail.gmail.com>
Message-ID: <84EA3F0A-8C82-4678-8EA3-5007E8F4B885@cs.usfca.edu>

Hmm...sounds like it's more complicated than I want it to be.  I'll keep thinking...
Ter


From gwlist at grahamwideman.com  Sun Apr 18 18:03:48 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Sun, 18 Apr 2010 18:03:48 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <9DEE1B40-392B-4A5D-96E8-C070228D1A23@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
	<9DEE1B40-392B-4A5D-96E8-C070228D1A23@cs.usfca.edu>
Message-ID: <20100419010401.PTMA1969.fed1rmmtao107.cox.net@fed1rmimpo02.cox.net>

Quick question:

I noticed Ter say this:

At 4/18/2010 04:56 PM, you wrote:
>Yeah, best we can do is linear for NFA evaluation given infinite processors, though, unless I allow lexer to race ahead of parser, buffering up all the tokens. 

... was there a decision made at some point to have the lexer not slurp the entire input at once like v3?   If so I'd like to read more about pros and cons of that, and whether that facilitates more interactivity between lexer and parser... was there a thread on that at some point?

Thanks,

Graham 


From ronburk at gmail.com  Sun Apr 18 21:01:50 2010
From: ronburk at gmail.com (Ron Burk)
Date: Sun, 18 Apr 2010 21:01:50 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
Message-ID: <l2h30dde8ce1004182101r639ba9ddg149cae05f7589146@mail.gmail.com>

This makes me appreciate how many times the fact
that . does not match newline in lex made things "just work"
for me without me paying any attention.

From ronburk at gmail.com  Sun Apr 18 21:32:22 2010
From: ronburk at gmail.com (Ron Burk)
Date: Sun, 18 Apr 2010 21:32:22 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
Message-ID: <p2z30dde8ce1004182132q99eab344o6612b23e6b987b05@mail.gmail.com>

> ?Multi-core systems are the norm now. ?In my job, we spend a LOT of time
> determining how best to extract maximum work in minimum time, and parallel
> programming is a big part of that.

Splitting the work of lexical analysis across cores without ending up
slower than a simple, single-threaded state machine (due to constant
stalling on shared data)... should be a challenge. It sure is easy to
make multi-threaded solutions that are slower than single-threaded,
especially if the single-threaded solution fits in L1 cache.

IME, the ultimate in lexing speed requires tokenizing to proceed
independently. A function call per token (in C/C++ anyway, using
a deterministic state-driven lexer) tends to swamp performance gains
from having the lexer proceed in batches; the parser needs to be just
advancing a pointer to get to the next token, not calling anybody.
But that's for ultimate speed.

From martijn.reuvers at gmail.com  Mon Apr 19 01:05:37 2010
From: martijn.reuvers at gmail.com (Martijn Reuvers)
Date: Mon, 19 Apr 2010 10:05:37 +0200
Subject: [antlr-interest] 'Catching' functions --
In-Reply-To: <n2p6eb53c7e1004170941wf12a3d09vc2c2e79ca1f4f8f@mail.gmail.com>
References: <n2p6eb53c7e1004170941wf12a3d09vc2c2e79ca1f4f8f@mail.gmail.com>
Message-ID: <x2hc376e6ec1004190105tf68d2900yb6e550aadea2910@mail.gmail.com>

Hi William,

Depending on where you are when walking, lets say you're on FUNC_DECLR
(which is then the root of the tree). You could do something like:

Tree blockTree = funcDeclrTree.getChildAt(tree.getChildCount()-2) ;

In your case you just need the last child for block.

Martijn

On Sat, Apr 17, 2010 at 6:41 PM, William v Doorn
<williamvdoorn at gmail.com> wrote:
> Hello all,
>
> I'm writing a simple language where functions is a feature. To do this I
> need to somehow catch the tree of expressions/statements and execute it with
> the parameter(s) when it's needed. However, is it possible to create those
> trees when walking over the AST? Let's say I have this in the tree:
>
> ^(FUNC_DECL type ID formalParams? block)
>
> Is it possible to get the tree of the block? I only found this possible to
> do when building the AST (using $block.tree) but I can't seem to do this
> when walking over the AST.
>
> Thanks,
>
> William van Doorn
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cg0601 at hotmail.com  Mon Apr 19 01:45:04 2010
From: cg0601 at hotmail.com (Cor Geboers)
Date: Mon, 19 Apr 2010 10:45:04 +0200
Subject: [antlr-interest] Comments parser and non-alphanum characters
Message-ID: <BAY117-W52A2831CC3A10FCAB36942CC0B0@phx.gbl>


Hi, I have a problem with a parser which needs to interpret a comment in a command language. The CL uses commands inside an HTML command pair: '<!--' command '-->' and I can parse most commands, except for the REM command which is a comment remark and should be ignored.
I wrote a small test grammar, which shows the problem more or less:

grammar Remarks;

options {
  language = Java;
}

rule: commandLine+ ;

commandLine
    :   '<!--' command '-->'
    ;

command
    :   breakCommand 
    |   remarkCommand
    ;
    
remarkCommand
    :   REM (.)*
    ;
    
breakCommand
    :   BREAK
    ;
    
WS
    :   (' ' | '\t' | '\r' | '\n')+ { $channel = HIDDEN; }
    ;

REM
    :   '#' ('R'|'r') ('E'|'e') ('M'|'m')
    ;
    
BREAK
    :   '#' ('B'|'b')('R'|'r')('E'|'e')('A'|'a')('K'|'k');

IDENT : ('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '0'..'9')*;

A sample command file might look like this:

<!-- #rem some comment -->
<!--        #break -->
<!-- #rem some comment with $AAA &*&^, A9a 5eee and 99922 and .<><> -->

The parser recognizes the rem commands and the break command, but some characters are lost. It also divides the "comment" text into other tokens (IDENT in this case). Ideally I would like to get all characters back as one part, but I tried several constructs without any result.
The last line is even parsed worse: all "special" characters like $, &, etc are generating warnings and not found back into the tokens. The errors/warnings generated are like this:

line 3:28 no viable alternative at character '$'
line 3:33 no viable alternative at character '&'
line 3:34 no viable alternative at character '*'
line 3:35 no viable alternative at character '&'
line 3:36 no viable alternative at character '^'
line 3:37 no viable alternative at character ','
line 3:43 no viable alternative at character '5'
line 3:52 no viable alternative at character '9'
line 3:53 no viable alternative at character '9'

How can I create the comment, so that all characters are either ignored or returned as one rule or token ? It should do so only when inside a comment. I looked at other grammars for comments, like C with /* */ and see they do about the same.
 		 	   		  
_________________________________________________________________
Your E-mail and More On-the-Go. Get Windows Live Hotmail Free.
https://signup.live.com/signup.aspx?id=60969

From kirby.bohling at gmail.com  Mon Apr 19 06:08:29 2010
From: kirby.bohling at gmail.com (Kirby Bohling)
Date: Mon, 19 Apr 2010 08:08:29 -0500
Subject: [antlr-interest] Comments parser and non-alphanum characters
In-Reply-To: <BAY117-W52A2831CC3A10FCAB36942CC0B0@phx.gbl>
References: <BAY117-W52A2831CC3A10FCAB36942CC0B0@phx.gbl>
Message-ID: <u2w3cac8fdf1004190608o1c4c77e5y46f80136a82a4ab6@mail.gmail.com>

If you have control of the language, I'd change it to make it easier...

If you don't, that's much harder.  I'd parse it in two passes.  One
that handles <!-- --> as a single token, and one is feed the input for
<!-- --> and parses it.

That's been my plan on handling similar issues in a Wiki-like
language.  The only other way to handle (that I know of) it is with a
lot of error handling.  The fact that you're mixing two things, one
that is totally regular and structured, inside the same area is a
problem.  There's a reason every language I know of has an explicit
comment that is totally unstructured other then the delimiters.

HTH,
Kirby

On Mon, Apr 19, 2010 at 3:45 AM, Cor Geboers <cg0601 at hotmail.com> wrote:
>
> Hi, I have a problem with a parser which needs to interpret a comment in a command language. The CL uses commands inside an HTML command pair: '<!--' command '-->' and I can parse most commands, except for the REM command which is a comment remark and should be ignored.
> I wrote a small test grammar, which shows the problem more or less:
>
> grammar Remarks;
>
> options {
> ?language = Java;
> }
>
> rule: commandLine+ ;
>
> commandLine
> ? ?: ? '<!--' command '-->'
> ? ?;
>
> command
> ? ?: ? breakCommand
> ? ?| ? remarkCommand
> ? ?;
>
> remarkCommand
> ? ?: ? REM (.)*
> ? ?;
>
> breakCommand
> ? ?: ? BREAK
> ? ?;
>
> WS
> ? ?: ? (' ' | '\t' | '\r' | '\n')+ { $channel = HIDDEN; }
> ? ?;
>
> REM
> ? ?: ? '#' ('R'|'r') ('E'|'e') ('M'|'m')
> ? ?;
>
> BREAK
> ? ?: ? '#' ('B'|'b')('R'|'r')('E'|'e')('A'|'a')('K'|'k');
>
> IDENT : ('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '0'..'9')*;
>
> A sample command file might look like this:
>
> <!-- #rem some comment -->
> <!-- ? ? ? ?#break -->
> <!-- #rem some comment with $AAA &*&^, A9a 5eee and 99922 and .<><> -->
>
> The parser recognizes the rem commands and the break command, but some characters are lost. It also divides the "comment" text into other tokens (IDENT in this case). Ideally I would like to get all characters back as one part, but I tried several constructs without any result.
> The last line is even parsed worse: all "special" characters like $, &, etc are generating warnings and not found back into the tokens. The errors/warnings generated are like this:
>
> line 3:28 no viable alternative at character '$'
> line 3:33 no viable alternative at character '&'
> line 3:34 no viable alternative at character '*'
> line 3:35 no viable alternative at character '&'
> line 3:36 no viable alternative at character '^'
> line 3:37 no viable alternative at character ','
> line 3:43 no viable alternative at character '5'
> line 3:52 no viable alternative at character '9'
> line 3:53 no viable alternative at character '9'
>
> How can I create the comment, so that all characters are either ignored or returned as one rule or token ? It should do so only when inside a comment. I looked at other grammars for comments, like C with /* */ and see they do about the same.
>
> _________________________________________________________________
> Your E-mail and More On-the-Go. Get Windows Live Hotmail Free.
> https://signup.live.com/signup.aspx?id=60969
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From ron.hunter-duvar at oracle.com  Mon Apr 19 08:21:52 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Mon, 19 Apr 2010 09:21:52 -0600
Subject: [antlr-interest] @init actions executed during lookahead,
 @after actions not
In-Reply-To: <E1FBA77227279347B0AAEFA3C17DBC4836652B6359@sid00101.hsr.ch>
References: <4BC8EBB6.9080508@oracle.com>
	<E1FBA77227279347B0AAEFA3C17DBC4836652B6359@sid00101.hsr.ch>
Message-ID: <4BCC7510.4080702@oracle.com>

Hi Thomas,

I suspected that might be the explanation. If it's intended for use in 
declaring local variables, putting it inside an if would break it, at 
least in Java.

I do need a local variable declaration (I record the stack depth at the 
start to ensure the stack pop at the end is to the right level) so I 
can't just move it into an action at the start of each rule. I know I 
could leave the variable declaration in the @init, and do the push in an 
action. But the solution I have now of checking for backtracking within 
the method that does the push works well, and keeps the grammar simpler.

Thanks,
Ron


tcorbat at hsr.ch wrote:
> Hi Ron,
>
> I think this behavior is as intended. The @init block is intended to declare local variables. Therefore, it will always be executed. 
> You could move the action, manipulating your stack, out of the @init block into an action inside the rule. Then, it would not get executed during lookahead.
> I don't know if it is favorable, but if this manipulation of the stack is required in the subrules to correctly decide on alternatives, you could leave the action in @init and put the cleanup action (form @after) to the "finally" block, which will always get executed, regardless of the backtracking state.
>
> I hope this helps.
> Thomas
>
>
> ________________________________________
> Von: antlr-interest-bounces at antlr.org [antlr-interest-bounces at antlr.org] im Auftrag von Ron Hunter-Duvar [ron.hunter-duvar at oracle.com]
> Gesendet: Samstag, 17. April 2010 00:59
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] @init actions executed during lookahead,      @after actions not
>
> Hi,
>
> I just ran into something a little odd. I'm using @init actions in some
> parser rules to stack some information and @after to pop it again. In
> the generated Java code, the @after action gets wrapped in an "if (
> state.backtracking==0 ) {...}", so that it only gets executed when other
> actions are being executed, not during lookahead. This is what I
> expected. But I noticed that the @init actions are executed
> unconditionally, including during lookahead. I didn't expect this. The
> result was a lot of junk on the stack when it went into a dfa. The fix
> was easy enough, just checking state.backtracking myself. But I was
> wondering if this is an Antlr bug or if it's supposed to work this way.
>
> Ron
>
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From haruki.yamaguchi1989 at gmail.com  Mon Apr 19 09:03:25 2010
From: haruki.yamaguchi1989 at gmail.com (Haruki Yamaguchi)
Date: Mon, 19 Apr 2010 12:03:25 -0400
Subject: [antlr-interest] NetLogo, anyone?
Message-ID: <k2sf9d415a01004190903t9c4a485dy43e47eec4523dea1@mail.gmail.com>

Hi all,

Has anyone built / tried to build /is building a NetLogo lexer&parser
grammar?
I am currently trying to learn ANTLR and using this language as the first
step,
but I cannot find a solid syntax reference for NetLogo to start defining the

rules...instead the documentation tends to focus on specific examples and
goes on
a case-by-case basis...any help /pointers to reference sources, etc would be
appreciated!

MHY

From cliff.s.hudson at gmail.com  Mon Apr 19 09:19:22 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Mon, 19 Apr 2010 09:19:22 -0700
Subject: [antlr-interest] NetLogo, anyone?
In-Reply-To: <k2sf9d415a01004190903t9c4a485dy43e47eec4523dea1@mail.gmail.com>
References: <k2sf9d415a01004190903t9c4a485dy43e47eec4523dea1@mail.gmail.com>
Message-ID: <u2z1c0448551004190919we9fbafb7qa7049d2d987e43e0@mail.gmail.com>

Since it is under active development, have you considered emailing the
maintainers and asking them for a copy of the grammar file?

On Mon, Apr 19, 2010 at 9:03 AM, Haruki Yamaguchi <
haruki.yamaguchi1989 at gmail.com> wrote:

> Hi all,
>
> Has anyone built / tried to build /is building a NetLogo lexer&parser
> grammar?
> I am currently trying to learn ANTLR and using this language as the first
> step,
> but I cannot find a solid syntax reference for NetLogo to start defining
> the
>
> rules...instead the documentation tends to focus on specific examples and
> goes on
> a case-by-case basis...any help /pointers to reference sources, etc would
> be
> appreciated!
>
> MHY
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From jamesdcarrollml at verizon.net  Mon Apr 19 10:43:50 2010
From: jamesdcarrollml at verizon.net (James Carroll)
Date: Mon, 19 Apr 2010 13:43:50 -0400
Subject: [antlr-interest] Is ANTLR right for this....
Message-ID: <1271699030.2158.35.camel@Cheyenne>

I've been wanting to learn ANTLR for awhile and have the book, but its
tough for me when I don't have something 'real' to work on.  I've
recently been added to two projects at work and was wondering if ANTLR
would be right for them, even if only to have something to work on.

The first is to take XML files that are written to a DTD and convert it
into Java. The XML defines like forms, controls, workflows, etc. 

The second would be similar (but a totally different domain) in that
they want us to write the XML by hand, but I'd rather create a DSL so
that I'm not spending half my life opening and closing tags like we did
on the first one above.  The resluting XML would then be fed into a tool
that already exists and knows how to read it.

If both are possible (and assuming that my boss doesn't care which gets
done first) which would be the easiest/best to attack first?

Thanks




From scott at javadude.com  Mon Apr 19 10:53:20 2010
From: scott at javadude.com (Scott Stanchfield)
Date: Mon, 19 Apr 2010 13:53:20 -0400
Subject: [antlr-interest] Is ANTLR right for this....
In-Reply-To: <g2qd19d16481004191051uc5c8a440s57d61f76c1d21ba4@mail.gmail.com>
References: <1271699030.2158.35.camel@Cheyenne>
	<g2qd19d16481004191051uc5c8a440s57d61f76c1d21ba4@mail.gmail.com>
Message-ID: <z2zd19d16481004191053za76b6d59xb8d7a72d0e641b9d@mail.gmail.com>

For the first part, check out ANTXR (http://javadude.com/tools/antxr) Might
be just what you're looking for.

For the second part, check out xtext for eclipse. It's based on ANTLR 3 and
generates a model and editor for you from the DSL grammar. Google for "xtext
eclipse" and you'll find it.

-- Scott

On Apr 19, 2010 11:44 AM, "James Carroll" <jamesdcarrollml at verizon.net>
wrote:

I've been wanting to learn ANTLR for awhile and have the book, but its
tough for me when I don't have something 'real' to work on.  I've
recently been added to two projects at work and was wondering if ANTLR
would be right for them, even if only to have something to work on.

The first is to take XML files that are written to a DTD and convert it
into Java. The XML defines like forms, controls, workflows, etc.

The second would be similar (but a totally different domain) in that
they want us to write the XML by hand, but I'd rather create a DSL so
that I'm not spending half my life opening and closing tags like we did
on the first one above.  The resluting XML would then be fed into a tool
that already exists and knows how to read it.

If both are possible (and assuming that my boss doesn't care which gets
done first) which would be the easiest/best to attack first?

Thanks




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From troy.daniels at baesystems.com  Mon Apr 19 10:59:42 2010
From: troy.daniels at baesystems.com (Daniels, Troy (US SSA))
Date: Mon, 19 Apr 2010 13:59:42 -0400
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <x2x1c0448551004181709z9332d773gb253c97087ab46f2@mail.gmail.com>
Message-ID: <20100419180713.D438A341840D@www.antlr.org>

 

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org 
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cliff Hudson
> Sent: Sunday, April 18, 2010 8:10 PM
> To: Terence Parr
> Cc: ANTLR interest
> Subject: Re: [antlr-interest] greedy vs nongreedy lexer rules
> 
> Sorry, accidentally sent a partial message.  See below for 
> the complete message.
> 
> Ahh, that's what I was getting at.  In my system, the actions 
> would not be
> > embedded directly in the matching code as they are now.  
> Instead, all 
> > of the actions which were part of an alternative would be executed 
> > together against the global state.  Consider the following 

That fails when there are predicates in the rule that use the variables.  Consider this rule, based on something that was discusses on the list a while ago.

Fragment LETTER: 'a'..'z';

OneToFiveLetters:
@init {
 int i = 0;
}

( {i<5}? LETTER {++i;} )+ ;


The syntax probably isn't quite right, but the intent is to use a variable to accept one through five letters as a single token.  If you don't execute the actions until after you finish the rule, the predicate always passes, so aaaaaaaaaa would be lexed as a single OneToFiveLetters token.

Troy

> (assuming 
> > the C# language target) based on the example you gave above.  The 
> > implementation of the Lexer subclass would look as follows:
> >
> > public class MyLexer : Lexer
> > {
> >   int i = 0; // from @members
> >
> >   ... DFA stuff, token decls, etc...
> >   public void ID()
> >   {
> >      // Implemented as normal, except that where {i++} 
> would be, there 
> > would be
> >      // code which instead saves the action-visible state of the 
> > parser into a State block.
> >      // This visible state means only the values of those variables 
> > which are generated by the
> >      // running the the DFA, not those which might be 
> updated by the 
> > actions.  This
> >      // snapshot is then enqueued.
> >
> >         // Once ID is definitely matched, ID_alt1 itself is 
> enqueued 
> > along
> with a the queued states.
> 
> >   }
> >
> > public void ID_alt1(Queue<State> states) {
> >     State currentState = states.Dequeue();
> >     i++; // While state information was enqueued, it turns out we 
> > didn't use it here.
> >            // A language target would have translated any 
> references 
> > to action-visible
> >            // token information such as $text into references into 
> > currentState.
> >
>        currentState = states.Dequeue();
> 
> >     System.Console.WriteLine("{0}", i); // Again, no information is 
> > used, but if it were, it would be
> >
>                                                            // 
> from a reference into currentState.
> 
> > }
> >
> > Once a particular alternative is selected, the action 
> function would 
> > be
> executed with the enqueued states.
> No alternative could be executed if it was below any 
> incomplete alternative (in otherwords, fragments would not 
> execute until the alternative referencing them itself was definitively
> selected.)
> 
> Does that make more sense?
> 
> >
> > On Sun, Apr 18, 2010 at 4:53 PM, Terence Parr 
> <parrt at cs.usfca.edu> wrote:
> >
> >>
> >> On Apr 18, 2010, at 4:50 PM, Cliff Hudson wrote:
> >>
> >> > You wrote:
> >> >
> >> > Well, imagine that you are modifying "global" state as you match
> >> characters in identifier; this is something done in actions that 
> >> ANTLR can analyze. There is no way to "roll this back".
> >> >
> >> > The 'global' state you are talking about is state the DFA is 
> >> > modifying
> >> but which an action in a rule could examine?  Is the 
> amount of state 
> >> visible to actions too much to store while alternatives 
> are being evaulated?
> >>
> >> It's state you set up and modify then ref:
> >>
> >> @members {
> >> int i = 0;
> >> }
> >>
> >> ...
> >>
> >> ID : ('a'..'z' {i++;})+ {System.out.println(i);} ;
> >>
> >> ANTLR can't save i for you each char iteration.
> >>
> >> Ter
> >>
> >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> >> Unsubscribe:
> >> 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
> >> s
> >>
> >
> >
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: 
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From cliff.s.hudson at gmail.com  Mon Apr 19 11:39:26 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Mon, 19 Apr 2010 11:39:26 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <4bcc9bd2.6744f10a.5ae5.ffff83d4SMTPIN_ADDED@mx.google.com>
References: <x2x1c0448551004181709z9332d773gb253c97087ab46f2@mail.gmail.com>
	<4bcc9bd2.6744f10a.5ae5.ffff83d4SMTPIN_ADDED@mx.google.com>
Message-ID: <u2z1c0448551004191139w93ce5aaci815503d9efba01fc@mail.gmail.com>

Yes, predicates are a flaw in the plan.

On Mon, Apr 19, 2010 at 10:59 AM, Daniels, Troy (US SSA) <
troy.daniels at baesystems.com> wrote:

>
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org
> > [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Cliff Hudson
> > Sent: Sunday, April 18, 2010 8:10 PM
> > To: Terence Parr
> > Cc: ANTLR interest
> > Subject: Re: [antlr-interest] greedy vs nongreedy lexer rules
> >
> > Sorry, accidentally sent a partial message.  See below for
> > the complete message.
> >
> > Ahh, that's what I was getting at.  In my system, the actions
> > would not be
> > > embedded directly in the matching code as they are now.
> > Instead, all
> > > of the actions which were part of an alternative would be executed
> > > together against the global state.  Consider the following
>
> That fails when there are predicates in the rule that use the variables.
>  Consider this rule, based on something that was discusses on the list a
> while ago.
>
> Fragment LETTER: 'a'..'z';
>
> OneToFiveLetters:
> @init {
>  int i = 0;
> }
>
> ( {i<5}? LETTER {++i;} )+ ;
>
>
> The syntax probably isn't quite right, but the intent is to use a variable
> to accept one through five letters as a single token.  If you don't execute
> the actions until after you finish the rule, the predicate always passes, so
> aaaaaaaaaa would be lexed as a single OneToFiveLetters token.
>
> Troy
>
> > (assuming
> > > the C# language target) based on the example you gave above.  The
> > > implementation of the Lexer subclass would look as follows:
> > >
> > > public class MyLexer : Lexer
> > > {
> > >   int i = 0; // from @members
> > >
> > >   ... DFA stuff, token decls, etc...
> > >   public void ID()
> > >   {
> > >      // Implemented as normal, except that where {i++}
> > would be, there
> > > would be
> > >      // code which instead saves the action-visible state of the
> > > parser into a State block.
> > >      // This visible state means only the values of those variables
> > > which are generated by the
> > >      // running the the DFA, not those which might be
> > updated by the
> > > actions.  This
> > >      // snapshot is then enqueued.
> > >
> > >         // Once ID is definitely matched, ID_alt1 itself is
> > enqueued
> > > along
> > with a the queued states.
> >
> > >   }
> > >
> > > public void ID_alt1(Queue<State> states) {
> > >     State currentState = states.Dequeue();
> > >     i++; // While state information was enqueued, it turns out we
> > > didn't use it here.
> > >            // A language target would have translated any
> > references
> > > to action-visible
> > >            // token information such as $text into references into
> > > currentState.
> > >
> >        currentState = states.Dequeue();
> >
> > >     System.Console.WriteLine("{0}", i); // Again, no information is
> > > used, but if it were, it would be
> > >
> >                                                            //
> > from a reference into currentState.
> >
> > > }
> > >
> > > Once a particular alternative is selected, the action
> > function would
> > > be
> > executed with the enqueued states.
> > No alternative could be executed if it was below any
> > incomplete alternative (in otherwords, fragments would not
> > execute until the alternative referencing them itself was definitively
> > selected.)
> >
> > Does that make more sense?
> >
> > >
> > > On Sun, Apr 18, 2010 at 4:53 PM, Terence Parr
> > <parrt at cs.usfca.edu> wrote:
> > >
> > >>
> > >> On Apr 18, 2010, at 4:50 PM, Cliff Hudson wrote:
> > >>
> > >> > You wrote:
> > >> >
> > >> > Well, imagine that you are modifying "global" state as you match
> > >> characters in identifier; this is something done in actions that
> > >> ANTLR can analyze. There is no way to "roll this back".
> > >> >
> > >> > The 'global' state you are talking about is state the DFA is
> > >> > modifying
> > >> but which an action in a rule could examine?  Is the
> > amount of state
> > >> visible to actions too much to store while alternatives
> > are being evaulated?
> > >>
> > >> It's state you set up and modify then ref:
> > >>
> > >> @members {
> > >> int i = 0;
> > >> }
> > >>
> > >> ...
> > >>
> > >> ID : ('a'..'z' {i++;})+ {System.out.println(i);} ;
> > >>
> > >> ANTLR can't save i for you each char iteration.
> > >>
> > >> Ter
> > >>
> > >> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > >> Unsubscribe:
> > >>
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-addres
> > >> s
> > >>
> > >
> > >
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> > http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>

From parrt at cs.usfca.edu  Mon Apr 19 12:22:47 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 19 Apr 2010 12:22:47 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <20100419010401.PTMA1969.fed1rmmtao107.cox.net@fed1rmimpo02.cox.net>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
	<9DEE1B40-392B-4A5D-96E8-C070228D1A23@cs.usfca.edu>
	<20100419010401.PTMA1969.fed1rmmtao107.cox.net@fed1rmimpo02.cox.net>
Message-ID: <E7467D60-9069-4EE1-87CE-5D773EE8F1A5@cs.usfca.edu>

Actually v3 by default no longer slurps of the entire input. you have to use the buffered version :)

We definitely don't like interaction between the parser and lexer because lookahead makes it difficult to determine when you do things. best to keep them totally separate. That said, the lexer can do a lot of state tracking itself if necessary.

Ter
On Apr 18, 2010, at 6:03 PM, Graham Wideman wrote:

> Quick question:
> 
> I noticed Ter say this:
> 
> At 4/18/2010 04:56 PM, you wrote:
>> Yeah, best we can do is linear for NFA evaluation given infinite processors, though, unless I allow lexer to race ahead of parser, buffering up all the tokens. 
> 
> ... was there a decision made at some point to have the lexer not slurp the entire input at once like v3?   If so I'd like to read more about pros and cons of that, and whether that facilitates more interactivity between lexer and parser... was there a thread on that at some point?
> 
> Thanks,
> 
> Graham 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Mon Apr 19 12:32:45 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 19 Apr 2010 12:32:45 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <20100419180713.D438A341840D@www.antlr.org>
References: <20100419180713.D438A341840D@www.antlr.org>
Message-ID: <36161218-8C2A-478E-9124-FE51D357DBA0@cs.usfca.edu>


On Apr 19, 2010, at 10:59 AM, Daniels, Troy (US SSA) wrote:
> That fails when there are predicates in the rule that use the variables.  Consider this rule, based on something that was discusses on the list a while ago.
> 
> Fragment LETTER: 'a'..'z';
> 
> OneToFiveLetters:
> @init {
> int i = 0;
> }
> 
> ( {i<5}? LETTER {++i;} )+ ;

Predicates are difficult to implement because you can't really have the action executed to you are sure that the entire rule matches.  That means backtracking if there are other rules that can match that input string. The solution is to use the always executing {{++i;}} version of the action. because i it's a local  variable, the side effects are relevant.

Ter

From parrt at cs.usfca.edu  Mon Apr 19 12:58:15 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Mon, 19 Apr 2010 12:58:15 -0700
Subject: [antlr-interest] mayhaps a decision reached re v4 lexer
	implementation
Message-ID: <45DFE31A-3571-4A29-93E9-BFC412F3FF92@cs.usfca.edu>

Hiya,

Ok, Thank you all for this excellent discussion on lexer requirements.  I have updated the wiki with a simple dump of information at the bottom of this page:

http://www.antlr.org/wiki/display/~admin/ANTLR+v4+lexers

I'll clean up the entire page to be consistent once I get into the implementation of the code generation.

Ter

From marcin.rzeznicki at gmail.com  Mon Apr 19 13:01:57 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Mon, 19 Apr 2010 22:01:57 +0200
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <p2z30dde8ce1004182132q99eab344o6612b23e6b987b05@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
	<p2z30dde8ce1004182132q99eab344o6612b23e6b987b05@mail.gmail.com>
Message-ID: <i2h14799bf61004191301q49e4a48ak58c380d091d73421@mail.gmail.com>

On Mon, Apr 19, 2010 at 6:32 AM, Ron Burk <ronburk at gmail.com> wrote:
>> ?Multi-core systems are the norm now. ?In my job, we spend a LOT of time
>> determining how best to extract maximum work in minimum time, and parallel
>> programming is a big part of that.
>
> Splitting the work of lexical analysis across cores without ending up
> slower than a simple, single-threaded state machine (due to constant
> stalling on shared data)... should be a challenge. It sure is easy to
> make multi-threaded solutions that are slower than single-threaded,
> especially if the single-threaded solution fits in L1 cache.
>
> IME, the ultimate in lexing speed requires tokenizing to proceed
> independently. A function call per token (in C/C++ anyway, using
> a deterministic state-driven lexer) tends to swamp performance gains
> from having the lexer proceed in batches; the parser needs to be just
> advancing a pointer to get to the next token, not calling anybody.
> But that's for ultimate speed.
>

Out of curiosity; may i ask you why "function call per token" is
something bad for multi-core performance? I am asking because the way
i see this issue is that pursuing two different paths in NFA has no
inherent coupling. It is simply matter of state replication and
merging it back to single outcome state upon entering some barrier
marking "end of work" state. Am I missing something?


-- 
Greetings
Marcin Rze?nicki

From ronburk at gmail.com  Mon Apr 19 16:04:06 2010
From: ronburk at gmail.com (Ron Burk)
Date: Mon, 19 Apr 2010 16:04:06 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <i2h14799bf61004191301q49e4a48ak58c380d091d73421@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
	<p2z30dde8ce1004182132q99eab344o6612b23e6b987b05@mail.gmail.com>
	<i2h14799bf61004191301q49e4a48ak58c380d091d73421@mail.gmail.com>
Message-ID: <u2n30dde8ce1004191604sa9c7fc9as7c6aa48de431f60@mail.gmail.com>

> Out of curiosity; may i ask you why "function call per token" is
> something bad for multi-core performance?

That aspect is independent of multiple cores.
If you implement an efficient lexer (e.g., a minimized
DFA), then the overhead of function call tends to be
a significant percentage of the per-token work of the
lexer (based on my experience processing C/C++
source -- YMMV wrt language, though I doubt by
much).

> I am asking because the way
> i see this issue is that pursuing two different paths in NFA has no
> inherent coupling. It is simply matter of state replication and
> merging it back to single outcome state upon entering some barrier
> marking "end of work" state. Am I missing something?

I don't think so. Once you're using an NFA for lexing, you'll
likely be insanely less efficient than a minimized DFA,
so the overhead of a function call per token should be
unnoticed amidst the general slowness :-). If you were
trying to use multiple cores to follow paths in an NFA,
then "merging it back" sure sounds like a place to stall
on attempting to update memory that is shared between
cores. I wouldn't predict multiple cores would be faster for
that without measuring it first on the target CPU. If you
haven't looked at how ugly things have gotten inside
in the last few years, I recommend:

http://www.infoq.com/presentations/click-crash-course-modern-hardware

The root problem for getting anywhere close to the theoretically
possible speeds of putting lexing on a different core from
parsing is the constant stalling over the shared data (the
tokens). Last I looked, Intel did little beneath the covers
to help. Whatever else Google's Go! got wrong, they got
right that communicating sequential processes are the
the only hopeful paradigm for routinely using all that
extra core-ness in software that has any hope of getting
even modestly debugged. Intel must get some kind of
mechanism morally equivalent to a cross-core one-way
pipe working efficiently at some point.  IMHO. :-)

From gthouraya at yahoo.fr  Tue Apr 20 03:16:55 2010
From: gthouraya at yahoo.fr (Gouasmi Thouraya)
Date: Tue, 20 Apr 2010 10:16:55 +0000 (GMT)
Subject: [antlr-interest] Error in debug
Message-ID: <666090.41114.qm@web26302.mail.ukl.yahoo.com>

Please, someone can help me, 
At the time of debug of one grammar under ANTLRWorks,?an mistake of type "fichier introuvable". Is what I must install something has left the ANTLRWorks (for example: Maven,..)? please help me


      

From nazim_oztahtaci at hotmail.com  Tue Apr 20 04:41:54 2010
From: nazim_oztahtaci at hotmail.com (Nazim Oztahtaci)
Date: Tue, 20 Apr 2010 11:41:54 +0000
Subject: [antlr-interest] Runtime Library of v 3.2 for C#
In-Reply-To: <666090.41114.qm@web26302.mail.ukl.yahoo.com>
References: <666090.41114.qm@web26302.mail.ukl.yahoo.com>
Message-ID: <SNT121-W10C48D0F9EFE43CC78F453960A0@phx.gbl>


Hello,

I am sorry if I repeat this question. I have checked the history of mail list to find out current situation of C# library for v 3.2 Currently I use Java for the implementation of my grammar because when I apply theorems(DeMorgan, Distribution etc) on the tree, BottomUp function is called to apply them. However in C# v.3.1.3 there is no support and I guess I need version 3.2 library. 

I read that version 3.2 for C# can be found in repository. Is that true? I just wanted to confirm that. I assume that to use BottomUp function, it is necessary to have TreeFilter class. If I cant use C# v 3.2 library yet and I have to implement my own TreeFilter class which has BottomUp function, which files in C# version 3.1.3 source code I should make changes?Is it too complex to implement just bottomup function manually? If it is, is there any implementation of C# v 3.2 runtime dlls on the Net for Antlr?

BEst regards

 		 	   		  
_________________________________________________________________
Yeni Windows 7: G?ndelik i?lerinizi basitle?tirin. Size en uygun bilgisayar? bulun.
http://windows.microsoft.com/shop

From Giampaolo at Tomassoni.biz  Tue Apr 20 04:51:36 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Tue, 20 Apr 2010 13:51:36 +0200
Subject: [antlr-interest] mild simplification and tree grammars
Message-ID: <006e01cae07f$d4a7b6f0$7df724d0$@biz>

Well, after your good advices I could get a bit further in my grammar.

Now I have a general question and a specific one about tree grammars.

I would like to attempt a kind of mild simplification of an arithmetic and
boolean expression.

I see that a lot of interesting work can be done with a replace grammar like
the following:

s   :	^(UMINUS r=NUMBER) { shc = true; }
		-> NUMBER[num($r).negate().toString()]
    |	^(NOT FALSE) { shc = true; }
		-> TRUE		
    |	^(NOT TRUE) { shc = true; }
		-> FALSE	
    |	^(PLUS l=NUMBER r=NUMBER) { shc = true; } 
		-> NUMBER[num($l).add(num($r)).toString()]
    |	^(PLUS l=NUMBER {num($l) == BigDecimal.ZERO}? r1=.) { shc = true; }
		-> $r1
    |	^(PLUS l1=. r=NUMBER {num($r) == BigDecimal.ZERO}?) { shc = true; }
		-> $l1
...

Where 'shc' stands for "Something Has Changed" and is going to be used to
decide if a further execution of the simplifier grammar is or isn't
required. num(CommonTree) is a shorthand for "new
BigDecimal(node.getText())".

The general question is: is there a simply way to simplify things like:

	1 + a + 2

?

Of course I get something like (PLUS (PLUS NUMBER IDENT) NUMBER) and I see
it could be simplified as (PLUS (PLUS NUMBER NUMBER) IDENT). I may guess
some that constructs to obtain this are possible, but they seems to me to
increase the complexity of the grammar a lot and I don't know if I'm going
to swim in too deep waters. I mean, is this the way compilers do simplifies
expression, or instead there is something well-unknown to my knowledge? Any
acronym to spare?

The specific question is: the above (piece of) tree grammar needs to compile
with backtrack=true, which I don't like. I'm going to re-create a LLR
grammar doing the same. I see it mimes a lot the parsing grammar I used to
generate the source tree, but with a lot more cases in rules. This sounds
fine to me, but then I'm still getting some problem:


protected
conditionalOrExpression
    :	OR FALSE r=conditionalOrExpression	{shc=true;}	-> $r
    |	OR TRUE conditionalOrExpression		{shc=true;}	-> TRUE
    |	OR l=conditionalAndExpression r=conditionalOrRightSide[$l.tree] ->
$r
    |	conditionalAndExpression
    ;

protected
conditionalOrRightSide [CommonTree l]
    :	FALSE			{shc=true;}	-> $l
    |	TRUE			{shc=true;}	-> TRUE
    |	r=conditionalOrExpression		-> OR $l $r
    ;


conditionalOrExpression2 rises the error "(137): reference to undefined
label in rewrite rule: $l", which is the same I got in the parsing grammar
and which was circumvented by adopting a different notation (thanks to
John).

I have ANTLR 3.2. Is it a bug or am I the bug?

Regards,

Giampaolo


From tcorbat at hsr.ch  Tue Apr 20 05:17:41 2010
From: tcorbat at hsr.ch (tcorbat at hsr.ch)
Date: Tue, 20 Apr 2010 14:17:41 +0200
Subject: [antlr-interest] Error in debug
In-Reply-To: <666090.41114.qm@web26302.mail.ukl.yahoo.com>
References: <666090.41114.qm@web26302.mail.ukl.yahoo.com>
Message-ID: <E1FBA77227279347B0AAEFA3C17DBC483665065F07@sid00101.hsr.ch>

Hello Gouasmi

Could you provide a little more context to your problem? I think "fichier introuvable" means "file not found", am I right? What grammar are you trying do debug? Does the same error occur, when just "running" instead of "debugging" the parser? Do you have any code in your grammar, that accesses any external files? Are the paths (relative or absolute) correct?
For a generic grammar you should not be required to install additional components.

Regards
Thomas


-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Gouasmi Thouraya
Sent: Dienstag, 20. April 2010 12:17
To: ANTLR
Subject: [antlr-interest] Error in debug

Please, someone can help me, 
At the time of debug of one grammar under ANTLRWorks,?an mistake of type "fichier introuvable". Is what I must install something has left the ANTLRWorks (for example: Maven,..)? please help me


      

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From markwright at internode.on.net  Tue Apr 20 06:09:08 2010
From: markwright at internode.on.net (Mark Wright)
Date: Tue, 20 Apr 2010 23:09:08 +1000
Subject: [antlr-interest] mild simplification and tree grammars
In-Reply-To: <006e01cae07f$d4a7b6f0$7df724d0$@biz>
References: <006e01cae07f$d4a7b6f0$7df724d0$@biz>
Message-ID: <20100420130908.GE18833@internode.on.net>

On Tue, Apr 20, 2010 at 01:51:36PM +0200, Giampaolo Tomassoni wrote:

Oops, I see placed the { after the $ earlier, where it should
be outside the $paramater, like {$parameter}, as in:

protected
conditionalExpression[CommonTree TheActualASTRoot]
    :   QMARK t=expression COMMA f=expression
            -> ^(ITE {$TheActualASTRoot} $t $f)
    |
    ;

> ...
> 
> The specific question is: the above (piece of) tree grammar needs to compile
> with backtrack=true, which I don't like. I'm going to re-create a LLR
> grammar doing the same. I see it mimes a lot the parsing grammar I used to
> generate the source tree, but with a lot more cases in rules. This sounds
> fine to me, but then I'm still getting some problem:
> 
> 
> protected
> conditionalOrExpression
>     :	OR FALSE r=conditionalOrExpression	{shc=true;}	-> $r
>     |	OR TRUE conditionalOrExpression		{shc=true;}	-> TRUE
>     |	OR l=conditionalAndExpression r=conditionalOrRightSide[$l.tree] -> $r
>     |	conditionalAndExpression
>     ;
> 
> protected
> conditionalOrRightSide [CommonTree l]
>     :	FALSE			{shc=true;}	-> $l
>     |	TRUE			{shc=true;}	-> TRUE
>     |	r=conditionalOrExpression		-> OR $l $r
>     ;

So maybe it might work like:

protected
conditionalOrRightSide [CommonTree l]
    :	FALSE			{shc=true;}	-> $l
    |	TRUE			{shc=true;}	-> TRUE
    |	r=conditionalOrExpression		-> OR {$l} $r
    ;
 
> conditionalOrExpression2 rises the error "(137): reference to undefined
> label in rewrite rule: $l", which is the same I got in the parsing grammar
> and which was circumvented by adopting a different notation (thanks to
> John).
> 
> I have ANTLR 3.2. Is it a bug or am I the bug?
> 
> Regards,
> 
> Giampaolo
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From Giampaolo at Tomassoni.biz  Tue Apr 20 06:21:00 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Tue, 20 Apr 2010 15:21:00 +0200
Subject: [antlr-interest] mild simplification and tree grammars
In-Reply-To: <20100420130908.GE18833@internode.on.net>
References: <006e01cae07f$d4a7b6f0$7df724d0$@biz>
	<20100420130908.GE18833@internode.on.net>
Message-ID: <007501cae08c$52126160$f6372420$@biz>

> Oops, I see placed the { after the $ earlier, where it should
> be outside the $paramater, like {$parameter}, as in:
> 
> protected
> conditionalExpression[CommonTree TheActualASTRoot]
>     :   QMARK t=expression COMMA f=expression
>             -> ^(ITE {$TheActualASTRoot} $t $f)
>     |
>     ;

Ah, that's it!

Right, it works. Thank you.

I'm a bit astonished with that, then: why a {$var} notation is needed here?
What's the difference with $t and $f, in example?

Giampaolo


From markwright at internode.on.net  Tue Apr 20 06:46:30 2010
From: markwright at internode.on.net (Mark Wright)
Date: Tue, 20 Apr 2010 23:46:30 +1000
Subject: [antlr-interest] mild simplification and tree grammars
In-Reply-To: <007501cae08c$52126160$f6372420$@biz>
References: <006e01cae07f$d4a7b6f0$7df724d0$@biz>
	<20100420130908.GE18833@internode.on.net>
	<007501cae08c$52126160$f6372420$@biz>
Message-ID: <20100420134630.GF18833@internode.on.net>

On Tue, Apr 20, 2010 at 03:21:00PM +0200, Giampaolo Tomassoni wrote:
> > Oops, I see placed the { after the $ earlier, where it should
> > be outside the $paramater, like {$parameter}, as in:
> > 
> > protected
> > conditionalExpression[CommonTree TheActualASTRoot]
> >     :   QMARK t=expression COMMA f=expression
> >             -> ^(ITE {$TheActualASTRoot} $t $f)
> >     |
> >     ;
> 
> Ah, that's it!
> 
> Right, it works. Thank you.
> 
> I'm a bit astonished with that, then: why a {$var} notation is needed here?
> What's the difference with $t and $f, in example?
> 
> Giampaolo

There are subtle differences in syntax depending on the context
of the variable, and in this case whether it is a parameter or not.

Another extension of the example shows another ANTLR feature,
with associated subtle syntax.  Say the conditionalExpression
was being called with TheActualASTRoot being optional, then
ANTLR supports this with semantic predicates on the tree generation
options:

protected
conditionalExpression[CommonTree TheActualASTRoot]
    :   QMARK t=expression COMMA f=expression
            -> {(TheActualASTRoot != null)}? ^(ITE {$TheActualASTRoot} $t $f)
            -> {(TheActualASTRoot == null)}? ^(ITE $t $f)
            ->
    |
    ;


From tounsimolka at yahoo.fr  Tue Apr 20 07:37:51 2010
From: tounsimolka at yahoo.fr (Molka Tounsi)
Date: Tue, 20 Apr 2010 14:37:51 +0000 (GMT)
Subject: [antlr-interest] help please
Message-ID: <330590.2405.qm@web26407.mail.ukl.yahoo.com>

I tried this example on ANTLRWORK but it shows me errors.
This is the code:
class CalcParser extends Parser;
options {
	buildAST = true;	// uses CommonAST by default
}

expr
	:	mexpr (PLUS^ mexpr)* SEMI!
	;

mexpr
	:	atom (STAR^ atom)*
	;

atom:	INT
	;

class CalcLexer extends Lexer;

WS	:	(' '
	|	'\t'
	|	'\n'
	|	'\r')
		{ _ttype = Token.SKIP; }
	;

LPAREN:	'('
	;

RPAREN:	')'
	;

STAR:	'*'
	;

PLUS:	'+'
	;

SEMI:	';'
	;

protected
DIGIT
	:	'0'..'9'
	;

INT	:	(DIGIT)+
	;

class CalcTreeWalker extends TreeParser;

expr returns [float r]
{
	float a,b;
	r=0;
}
	:	#(PLUS a=expr b=expr)	{r = a+b;}
	|	#(STAR a=expr b=expr)	{r = a*b;}
	|	i:INT			{r = (float)Integer.parseInt(i.getText());}
	;

 can you help me please ???


      

From jbb at acm.org  Tue Apr 20 07:59:36 2010
From: jbb at acm.org (John B. Brodie)
Date: Tue, 20 Apr 2010 10:59:36 -0400
Subject: [antlr-interest] help please
In-Reply-To: <330590.2405.qm@web26407.mail.ukl.yahoo.com>
References: <330590.2405.qm@web26407.mail.ukl.yahoo.com>
Message-ID: <1271775576.7804.4.camel@gecko.home.org>

Greetings!

On Tue, 2010-04-20 at 14:37 +0000, Molka Tounsi wrote:
> I tried this example on ANTLRWORK but it shows me errors.
> This is the code:
> class CalcParser extends Parser;
> options {
> 	buildAST = true;	// uses CommonAST by default
> }
> 
> expr
> 	:	mexpr (PLUS^ mexpr)* SEMI!
> 	;
> 
> mexpr
> 	:	atom (STAR^ atom)*
> 	;
> 
> atom:	INT
> 	;
> 
> class CalcLexer extends Lexer;
> 
> WS	:	(' '
> 	|	'\t'
> 	|	'\n'
> 	|	'\r')
> 		{ _ttype = Token.SKIP; }
> 	;
> 
> LPAREN:	'('
> 	;
> 
> RPAREN:	')'
> 	;
> 
> STAR:	'*'
> 	;
> 
> PLUS:	'+'
> 	;
> 
> SEMI:	';'
> 	;
> 
> protected
> DIGIT
> 	:	'0'..'9'
> 	;
> 
> INT	:	(DIGIT)+
> 	;
> 
> class CalcTreeWalker extends TreeParser;
> 
> expr returns [float r]
> {
> 	float a,b;
> 	r=0;
> }
> 	:	#(PLUS a=expr b=expr)	{r = a+b;}
> 	|	#(STAR a=expr b=expr)	{r = a*b;}
> 	|	i:INT			{r = (float)Integer.parseInt(i.getText());}
> 	;
> 
>  can you help me please ???
> 

This looks like an ANTLR version 2 grammar. 

Are you sure you are using an older (e.g. v2) ANTLRWorks and not a
newwer v3 oriented ANTLRWorks?

You might consider moving up to ANTLR version 3...



From KumarR at utrc.utc.com  Tue Apr 20 10:51:32 2010
From: KumarR at utrc.utc.com (Kumar, Rajesh (Systems)   UTRC)
Date: Tue, 20 Apr 2010 13:51:32 -0400
Subject: [antlr-interest] trouble running Antlr on grammar file
Message-ID: <6B126C65D016E2439B381C6CDB783CF4024EBF4D@UUSNWEG1.na.utcmail.com>

Hi everyone,

I created a simple expression grammar in a .g file. I checked it with Antlrworks to see that there were no errors in the grammar.  The grammar is the following:

****************
grammar		 Expression; 

prog	:	 exp
	;
	
exp	: '(' exp ')' exp_t
	| atomic_expr exp_t
	| '!' atomic_expr exp_t
	;
	
exp_t	: '->' exp exp_t 
	| '&&' exp exp_t 
	| '||' exp exp_t
	|
	;

atomic_expr
	:	 ID
	|	'Unavailable' '(' GEN ')'
	|	'Powers' '(' GEN ',' ID ')'
	|       'OnlyAvailable' '(' GEN ')'
	;

ID	:	 ('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9')*
	;

NUM	:	('0'..'9')+
	;
	
GEN	:     'X_L1'
	|	'X_L2'
	|	'X_R1' 
	;
	
WS	:	(' '|'\t')+ {skip();};
********************

When I run "java antlr.Tool Expression.g" I get the following 

ANTLR Parser Generator   Version 2.7.7 (20060906)   1989-2005
Expression.g:1:1: unexpected token: grammar
error: Token stream error reading grammar(s):
Expression.g:11:13: expecting ''', found '>'
Expression.g:1:1: rule grammar trapped:
Expression.g:1:1: unexpected token: grammar
TokenStreamException: expecting ''', found '>'

Can anyone help me out?
Thanks.
Rajesh

From bkiers at gmail.com  Tue Apr 20 11:16:07 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Tue, 20 Apr 2010 20:16:07 +0200
Subject: [antlr-interest] trouble running Antlr on grammar file
In-Reply-To: <6B126C65D016E2439B381C6CDB783CF4024EBF4D@UUSNWEG1.na.utcmail.com>
References: <6B126C65D016E2439B381C6CDB783CF4024EBF4D@UUSNWEG1.na.utcmail.com>
Message-ID: <z2saf443a971004201116va53d8774u7b1a6dd6cea551b@mail.gmail.com>

On Tue, Apr 20, 2010 at 7:51 PM, Kumar, Rajesh (Systems) UTRC <
KumarR at utrc.utc.com> wrote:

> ...
>
> When I run "java antlr.Tool Expression.g" I get the following
>
> ANTLR Parser Generator   Version 2.7.7 (20060906)   1989-2005
> Expression.g:1:1: unexpected token: grammar
> error: Token stream error reading grammar(s):
> Expression.g:11:13: expecting ''', found '>'
> Expression.g:1:1: rule grammar trapped:
> Expression.g:1:1: unexpected token: grammar
> TokenStreamException: expecting ''', found '>'
> ...



I can't reproduce that.
Using ANTLR 3.2 and the grammar from your post, I get the following:

bart at hades:~/Temp/antlr$ java -cp antlr-3.2.jar org.antlr.Tool Expression.g
warning(200): Expression.g:11:9: Decision can match input such as "'&&'"
using multiple alternatives: 2, 4
As a result, alternative(s) 4 were disabled for that input
warning(200): Expression.g:11:9: Decision can match input such as "'->'"
using multiple alternatives: 1, 4
As a result, alternative(s) 4 were disabled for that input
warning(200): Expression.g:11:9: Decision can match input such as "'||'"
using multiple alternatives: 3, 4
As a result, alternative(s) 4 were disabled for that input


Note that the above are mere warnings, not errors (not that they shouldn't
be resolved of course...).

Regards,

Bart.

From jbb at acm.org  Tue Apr 20 11:20:05 2010
From: jbb at acm.org (John B. Brodie)
Date: Tue, 20 Apr 2010 14:20:05 -0400
Subject: [antlr-interest] trouble running Antlr on grammar file
In-Reply-To: <6B126C65D016E2439B381C6CDB783CF4024EBF4D@UUSNWEG1.na.utcmail.com>
References: <6B126C65D016E2439B381C6CDB783CF4024EBF4D@UUSNWEG1.na.utcmail.com>
Message-ID: <1271787605.12655.2.camel@gecko.home.org>

Greetings!

On Tue, 2010-04-20 at 13:51 -0400, Kumar, Rajesh (Systems) UTRC wrote:
> Hi everyone,
> 
> I created a simple expression grammar in a .g file. I checked it with Antlrworks to see that there were no errors in the grammar.  The grammar is the following:
> 
> ****************
> grammar		 Expression; 
> 
....stuff snipped....
> ********************
> 
> When I run "java antlr.Tool Expression.g" I get the following 
> 
> ANTLR Parser Generator   Version 2.7.7 (20060906)   1989-2005
___________________________^^^^^^^^^^^^^
> Expression.g:1:1: unexpected token: grammar
> error: Token stream error reading grammar(s):
> Expression.g:11:13: expecting ''', found '>'
> Expression.g:1:1: rule grammar trapped:
> Expression.g:1:1: unexpected token: grammar
> TokenStreamException: expecting ''', found '>'
> 

You have tried to process a v3 grammar with the v2 tool.

use: "java org.antlr.Tool Expression.g"
___________^^^^




From andyh at sunrunhome.com  Tue Apr 20 14:41:52 2010
From: andyh at sunrunhome.com (Andy Hull)
Date: Tue, 20 Apr 2010 14:41:52 -0700
Subject: [antlr-interest] Can I force a token to have precendence in the
	lexer?
Message-ID: <A61FD687-2204-4FBC-9304-A1925D5C0DF6@sunrunhome.com>

I have the following lexer tokens defined:

I have the following expression "x={1..3};"

I'm expecting the input between the braces to be recognized as FLOAT, AUTO, FLOAT but what I actually get is just a FLOAT  ".3" in the token stream of "x","=","{",".3","}",";"


AUTO  :  '...';

FLOAT
    :   ('0' .. '9')+ '.' ('0' .. '9')+ EXPONENT?
    |   '.' ( '0' .. '9' )+ EXPONENT?
    |   ('0' .. '9')+ EXPONENT
    |   ('0' .. '9')+
    ;

I think the float is matching too much. Can anyone help?

Thanks
--
Andy Hull | Senior Software Engineer
SunRun Inc.<http://www.sunrunhome.com/>
direct  415.684.9851

Review SunRun on Yelp<http://www.yelp.com/biz/sunrun-san-francisco>
click on the link above and then on ?write a review?


From parrt at cs.usfca.edu  Tue Apr 20 14:44:31 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Apr 2010 14:44:31 -0700
Subject: [antlr-interest] parser runtime error listeners
Message-ID: <186DA6A1-31D0-463E-98D9-80887331AD50@cs.usfca.edu>

Hiya. GeraldHas brought up an excellent point about our runtime. Currently, parsing errors get reported through method reportError. To do something different, you have to override that method. Gerald is suggesting that we move to an error listener mechanism so that multiple listeners can attach to a running parser and receive error events (kind of like what we do for debugging events).

I'm all for this idea, but what about backward compatibility? a lot of people have overridden reportError in their parsers or tree parsers (like me) and we want that to continue to work. How do we integrate this with a listener mechanism? Also, Gerald points out that even if someone overrides that method, his tool and other tools for integration with eclipse need to get those errors regardless of whether someone has overridden reportError. Otherwise, the ANTLR IDE couldn't get  syntax error messages when it ran. He suggested

> Preferably, the listener interface would be above anything that the end user could override.  Stuff that now calls reportError should instead call some private "reportError_intern", which fires the event listeners and then calls the public/overrideable "reportError".

any comments on the approach or what we want?

The minute I get v4 running in v3, I want to turn around and have v4 generate its own parsers. Backward compatibility will also be important for me.

Ter

From parrt at cs.usfca.edu  Tue Apr 20 14:45:29 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Apr 2010 14:45:29 -0700
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<23713C8D-8BBB-4C0B-B0B2-12F21619FD23@cs.usfca.edu>
	<1856441342-1271629075-cardhu_decombobulator_blackberry.rim.net-2062688303-@bda428.bisx.prod.on.blackberry>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<v2i1c0448551004181650r12c3ed17i452dd07ab60b514@mail.gmail.com>
Message-ID: <DB0F9174-6FA9-4E13-91ED-F7362CABDE8A@cs.usfca.edu>


On Apr 18, 2010, at 4:50 PM, Cliff Hudson wrote:

> You wrote:
> 
> Well, imagine that you are modifying "global" state as you match characters
> in identifier; this is something done in actions that ANTLR can analyze.
> There is no way to "roll this back".
> 
> The 'global' state you are talking about is state the DFA is modifying but
> which an action in a rule could examine?  Is the amount of state visible to
> actions too much to store while alternatives are being evaulated?

It's unbounded. users can put in whatever state they want with @members action.

Ter

From jimi at temporal-wave.com  Tue Apr 20 14:48:05 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 20 Apr 2010 14:48:05 -0700
Subject: [antlr-interest] Can I force a token to have precendence in the
	lexer?
In-Reply-To: <A61FD687-2204-4FBC-9304-A1925D5C0DF6@sunrunhome.com>
Message-ID: <2a4197507008fb458a4db62e13889ba2@temporal-wave.com>

This examples does everything you need and more, so you can pare it down to just your examples.

http://www.antlr.org/wiki/display/ANTLR3/Lexer+grammar+for+floating+point%2C+dot%2C+range%2C+time+specs


Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Andy Hull
> Sent: Tuesday, April 20, 2010 2:42 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Can I force a token to have precendence in
> the lexer?
> 
> I have the following lexer tokens defined:
> 
> I have the following expression "x={1..3};"
> 
> I'm expecting the input between the braces to be recognized as FLOAT,
> AUTO, FLOAT but what I actually get is just a FLOAT  ".3" in the token
> stream of "x","=","{",".3","}",";"
> 
> 
> AUTO  :  '...';
> 
> FLOAT
>     :   ('0' .. '9')+ '.' ('0' .. '9')+ EXPONENT?
>     |   '.' ( '0' .. '9' )+ EXPONENT?
>     |   ('0' .. '9')+ EXPONENT
>     |   ('0' .. '9')+
>     ;
> 
> I think the float is matching too much. Can anyone help?
> 
> Thanks
> --
> Andy Hull | Senior Software Engineer
> SunRun Inc.<http://www.sunrunhome.com/>
> direct  415.684.9851
> 
> Review SunRun on Yelp<http://www.yelp.com/biz/sunrun-san-francisco>
> click on the link above and then on 'write a review'
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From parrt at cs.usfca.edu  Tue Apr 20 17:18:47 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Tue, 20 Apr 2010 17:18:47 -0700
Subject: [antlr-interest] got modes?
Message-ID: <D2B55996-0674-4F4A-A0F8-5E01364EBEA8@cs.usfca.edu>

For v4, added lex modes/states:

lexer grammar L2;

A : 'a' ;
AA : 'aa' ;

mode FOO;

B : 'b' ;
C : 'c' ;

Actions will flip between them (push/pop/flip).
Ter

From andyh at sunrunhome.com  Tue Apr 20 17:41:39 2010
From: andyh at sunrunhome.com (Andy Hull)
Date: Tue, 20 Apr 2010 17:41:39 -0700
Subject: [antlr-interest] Non-determinism (was: Can I force a token to have
 precendence in the	lexer?)
In-Reply-To: <2a4197507008fb458a4db62e13889ba2@temporal-wave.com>
References: <2a4197507008fb458a4db62e13889ba2@temporal-wave.com>
Message-ID: <D6BA5969-4763-4C32-AC04-2ED720EDEEB4@sunrunhome.com>

Wow, thanks for the article. I was able to redefine the language to avoid the problem in order to keep the parser as simple as possible (now using "to" instead of "..." ).

My parser needs to be able to handle nested array expressions like so

{1,2,{5 to 10}, {3,6,9}, 4}

I have the following grammar:

arrayExpression
:   LEFT_BRACKET! arrayInitializer? RIGHT_BRACKET!;
arrayInitializer
:  (e+=expression (',' e+=expression)*)+ -> ^(ELEMENTLIST $e*)
|  expression AUTO expression -> ^(AUTO expression expression)
;

expression
: arrayExpression
/* | other types of expression */
;

with the expected non-LL(*) grammar because "arrayInitializer" depends on the recursive rule expression. Setting backtrack to true doesn't resolve this as I expected.

x={1,2,3,4};

yields the correct tree but...

x={1 to 3};

yields the error:

BR.recoverFromMismatchedToken
line 1:5 mismatched input 'to' expecting RIGHT_BRACKET

arrayInitializer behaves as expected when it contains only a single subrule (either the element list or the range initializer).

Is backtracking the right solution to the non-determinism? I am doing something wrong?

Thanks!

On Apr 20, 2010, at 2:48 PM, Jim Idle wrote:

This examples does everything you need and more, so you can pare it down to just your examples.

http://www.antlr.org/wiki/display/ANTLR3/Lexer+grammar+for+floating+point%2C+dot%2C+range%2C+time+specs


Jim

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
bounces at antlr.org] On Behalf Of Andy Hull
Sent: Tuesday, April 20, 2010 2:42 PM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Can I force a token to have precendence in
the lexer?

I have the following lexer tokens defined:

I have the following expression "x={1..3};"

I'm expecting the input between the braces to be recognized as FLOAT,
AUTO, FLOAT but what I actually get is just a FLOAT  ".3" in the token
stream of "x","=","{",".3","}",";"


AUTO  :  '...';

FLOAT
   :   ('0' .. '9')+ '.' ('0' .. '9')+ EXPONENT?
   |   '.' ( '0' .. '9' )+ EXPONENT?
   |   ('0' .. '9')+ EXPONENT
   |   ('0' .. '9')+
   ;

I think the float is matching too much. Can anyone help?

Thanks
--
Andy Hull | Senior Software Engineer
SunRun Inc.<http://www.sunrunhome.com/>
direct  415.684.9851

Review SunRun on Yelp<http://www.yelp.com/biz/sunrun-san-francisco>
click on the link above and then on 'write a review'


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
email-address




List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

--
Andy Hull | Senior Software Engineer
SunRun Inc.<http://www.sunrunhome.com/>
direct  415.684.9851

clean solar energy without the high upfront costs<http://www.sunrunhome.com/>





From marcin.rzeznicki at gmail.com  Tue Apr 20 17:51:28 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Wed, 21 Apr 2010 02:51:28 +0200
Subject: [antlr-interest] greedy vs nongreedy lexer rules
In-Reply-To: <u2n30dde8ce1004191604sa9c7fc9as7c6aa48de431f60@mail.gmail.com>
References: <92C5EFC5-B3C4-48F0-9FBF-EE1204736E03@cs.usfca.edu>
	<1AEDC62E-ED42-4210-BA24-08820BBA8856@cs.usfca.edu>
	<j2r1c0448551004181604l71b097e5ibd8b7f23b33155f@mail.gmail.com>
	<8092E04C-57DF-45CF-BE50-72117476800D@cs.usfca.edu>
	<s2q1c0448551004181618r80fc1693z46d4e6e2a0d80006@mail.gmail.com>
	<1A607AE1-0468-47C9-85C6-419C621AED42@cs.usfca.edu>
	<k2v1c0448551004181652qe74d5582jefed9e3728bb8ee6@mail.gmail.com>
	<p2z30dde8ce1004182132q99eab344o6612b23e6b987b05@mail.gmail.com>
	<i2h14799bf61004191301q49e4a48ak58c380d091d73421@mail.gmail.com>
	<u2n30dde8ce1004191604sa9c7fc9as7c6aa48de431f60@mail.gmail.com>
Message-ID: <x2u14799bf61004201751lfd22c8d0pd1a7d764275b8c06@mail.gmail.com>

On Tue, Apr 20, 2010 at 1:04 AM, Ron Burk <ronburk at gmail.com> wrote:
>> Out of curiosity; may i ask you why "function call per token" is
>> something bad for multi-core performance?
>
> That aspect is independent of multiple cores.
> If you implement an efficient lexer (e.g., a minimized
> DFA), then the overhead of function call tends to be
> a significant percentage of the per-token work of the
> lexer (based on my experience processing C/C++
> source -- YMMV wrt language, though I doubt by
> much).
>

I suppose, speaking of Java, that this method's size is decent enough
to be conveniently inlined. It can also be proven to be monomorphic in
most cases, I believe, so no virtual dispatch calls. Of course, it
depends and  cannot be taken for granted.

>> I am asking because the way
>> i see this issue is that pursuing two different paths in NFA has no
>> inherent coupling. It is simply matter of state replication and
>> merging it back to single outcome state upon entering some barrier
>> marking "end of work" state. Am I missing something?
>
> I don't think so. Once you're using an NFA for lexing, you'll
> likely be insanely less efficient than a minimized DFA,
> so the overhead of a function call per token should be
> unnoticed amidst the general slowness :-).

Are you thinking of costs of backtracking here?

 If you were
> trying to use multiple cores to follow paths in an NFA,
> then "merging it back" sure sounds like a place to stall
> on attempting to update memory that is shared between
> cores. I wouldn't predict multiple cores would be faster for
> that without measuring it first on the target CPU.

Actually, I don't think that this merging is going to be needed.
Pursuing every possible path till it collapses into final state or
error and may be sufficient. This is of course seriously undermined by
arbitrary user code that may be intertwined with lexer :-))


 If you
> haven't looked at how ugly things have gotten inside
> in the last few years, I recommend:
>
> http://www.infoq.com/presentations/click-crash-course-modern-hardware
>

Thx, I will take a look

> The root problem for getting anywhere close to the theoretically
> possible speeds of putting lexing on a different core from
> parsing is the constant stalling over the shared data (the
> tokens).

They actually do not "share" data. Lexer is simply providing the data
which means, in my opinion, that input can be fully tokenized and then
passed to parser.



-- 
Greetings
Marcin Rze?nicki

From bkiers at gmail.com  Tue Apr 20 23:21:43 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Wed, 21 Apr 2010 08:21:43 +0200
Subject: [antlr-interest] Non-determinism (was: Can I force a token to
	have precendence in the lexer?)
In-Reply-To: <D6BA5969-4763-4C32-AC04-2ED720EDEEB4@sunrunhome.com>
References: <2a4197507008fb458a4db62e13889ba2@temporal-wave.com>
	<D6BA5969-4763-4C32-AC04-2ED720EDEEB4@sunrunhome.com>
Message-ID: <w2gaf443a971004202321s67ed0cb5xd8016837f453cdf9@mail.gmail.com>

On Wed, Apr 21, 2010 at 2:41 AM, Andy Hull <andyh at sunrunhome.com> wrote:

> Wow, thanks for the article. I was able to redefine the language to avoid
> the problem in order to keep the parser as simple as possible (now using
> "to" instead of "..." ).
>
> My parser needs to be able to handle nested array expressions like so
>
> {1,2,{5 to 10}, {3,6,9}, 4}
>
> I have the following grammar:
>
> arrayExpression
> :   LEFT_BRACKET! arrayInitializer? RIGHT_BRACKET!;
> arrayInitializer
> :  (e+=expression (',' e+=expression)*)+ -> ^(ELEMENTLIST $e*)
> |  expression AUTO expression -> ^(AUTO expression expression)
> ;
>
> expression
> : arrayExpression
> /* | other types of expression */
> ;
>
> with the expected non-LL(*) grammar because "arrayInitializer" depends on
> the recursive rule expression. Setting backtrack to true doesn't resolve
> this as I expected.
>
> x={1,2,3,4};
>
> yields the correct tree but...
>
> x={1 to 3};
>
> yields the error:
>
> BR.recoverFromMismatchedToken
> line 1:5 mismatched input 'to' expecting RIGHT_BRACKET
>
> arrayInitializer behaves as expected when it contains only a single subrule
> (either the element list or the range initializer).
>
> Is backtracking the right solution to the non-determinism? I am doing
> something wrong?
>

How about something like this:

grammar Test;

parse
  : array ';' EOF
  ;

array
  :  '{' (arrayAtom (',' arrayAtom)*)? '}'
  ;

arrayAtom
  :  Number
  |  array
  |  range
  ;

range
  :  Number 'to' Number
  ;

Number
  :  '0'..'9'+
  ;

Space
  :  (' ' | '\t' | '\r' | '\n') {skip();}
  ;

Regards,

Bart.

From ranco.marcus at epirion.nl  Tue Apr 20 23:40:00 2010
From: ranco.marcus at epirion.nl (Ranco Marcus)
Date: Wed, 21 Apr 2010 06:40:00 +0000
Subject: [antlr-interest] Runtime Library of v 3.2 for C#
In-Reply-To: <SNT121-W10C48D0F9EFE43CC78F453960A0@phx.gbl>
References: <666090.41114.qm@web26302.mail.ukl.yahoo.com>
	<SNT121-W10C48D0F9EFE43CC78F453960A0@phx.gbl>
Message-ID: <2B65C901391C804DBB9CF9E6FE30C6F9343F3942@sun.epirion.local>

Johannes Luber, maintainer of the CSharp2 target, wrote in December 2009:

<quote>
I'm working on the 3.2 release. The major issue I'm tackling is to make the APIs of CSharp2 and CSharp3 source compatible and I have to coordinate this with the other maintainer. I'll release a beta once I've finished this.
</quote>

I don't know if it is viable to just pull the sources and compile it yourself. I have not yet tried that. If the changes were trivial, I expect it would have been in beta stage already. Until that time, I will try and keep my patience...

Best regards,

Ranco Marcus

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Nazim Oztahtaci
> Sent: dinsdag 20 april 2010 13:42
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Runtime Library of v 3.2 for C#
> 
> 
> Hello,
> 
> I am sorry if I repeat this question. I have checked the history of mail list to
> find out current situation of C# library for v 3.2 Currently I use Java for the
> implementation of my grammar because when I apply theorems(DeMorgan,
> Distribution etc) on the tree, BottomUp function is called to apply them.
> However in C# v.3.1.3 there is no support and I guess I need version 3.2
> library.
> 
> I read that version 3.2 for C# can be found in repository. Is that true? I just
> wanted to confirm that. I assume that to use BottomUp function, it is
> necessary to have TreeFilter class. If I cant use C# v 3.2 library yet and I have
> to implement my own TreeFilter class which has BottomUp function, which
> files in C# version 3.1.3 source code I should make changes?Is it too complex
> to implement just bottomup function manually? If it is, is there any
> implementation of C# v 3.2 runtime dlls on the Net for Antlr?
> 
> BEst regards
> 
> 
> __________________________________________________________
> _______
> Yeni Windows 7: G?ndelik i?lerinizi basitle?tirin. Size en uygun bilgisayar?
> bulun.
> http://windows.microsoft.com/shop
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address

From nazim_oztahtaci at hotmail.com  Wed Apr 21 00:21:57 2010
From: nazim_oztahtaci at hotmail.com (Nazim Oztahtaci)
Date: Wed, 21 Apr 2010 07:21:57 +0000
Subject: [antlr-interest] Runtime Library of v 3.2 for C#
In-Reply-To: <2B65C901391C804DBB9CF9E6FE30C6F9343F3942@sun.epirion.local>
References: <666090.41114.qm@web26302.mail.ukl.yahoo.com>,
	<SNT121-W10C48D0F9EFE43CC78F453960A0@phx.gbl>,
	<2B65C901391C804DBB9CF9E6FE30C6F9343F3942@sun.epirion.local>
Message-ID: <SNT121-W231F36CBCA44439B6281D696090@phx.gbl>


Actually I have compiled yesterday but I get errors when I use CSharp2 version, regarding "overridable set accessors" in Antlr.Runtime.RuleReturnScope class. I did not dig in yet in source code. Actually all I need is tree filter class. Maybe I can just use that part in my source code and?use  CSharp v 3.1.3 instead.
But I assume there is no schedule or exact time for the release of library yet.
Best regards

> From: ranco.marcus at epirion.nl
> To: nazim_oztahtaci at hotmail.com; antlr-interest at antlr.org
> Subject: RE: [antlr-interest] Runtime Library of v 3.2 for C#
> Date: Wed, 21 Apr 2010 06:40:00 +0000
> 
> Johannes Luber, maintainer of the CSharp2 target, wrote in December 2009:
> 
> <quote>
> I'm working on the 3.2 release. The major issue I'm tackling is to make the APIs of CSharp2 and CSharp3 source compatible and I have to coordinate this with the other maintainer. I'll release a beta once I've finished this.
> </quote>
> 
> I don't know if it is viable to just pull the sources and compile it yourself. I have not yet tried that. If the changes were trivial, I expect it would have been in beta stage already. Until that time, I will try and keep my patience...
> 
> Best regards,
> 
> Ranco Marcus
> 
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Nazim Oztahtaci
> > Sent: dinsdag 20 april 2010 13:42
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] Runtime Library of v 3.2 for C#
> > 
> > 
> > Hello,
> > 
> > I am sorry if I repeat this question. I have checked the history of mail list to
> > find out current situation of C# library for v 3.2 Currently I use Java for the
> > implementation of my grammar because when I apply theorems(DeMorgan,
> > Distribution etc) on the tree, BottomUp function is called to apply them.
> > However in C# v.3.1.3 there is no support and I guess I need version 3.2
> > library.
> > 
> > I read that version 3.2 for C# can be found in repository. Is that true? I just
> > wanted to confirm that. I assume that to use BottomUp function, it is
> > necessary to have TreeFilter class. If I cant use C# v 3.2 library yet and I have
> > to implement my own TreeFilter class which has BottomUp function, which
> > files in C# version 3.1.3 source code I should make changes?Is it too complex
> > to implement just bottomup function manually? If it is, is there any
> > implementation of C# v 3.2 runtime dlls on the Net for Antlr?
> > 
> > BEst regards
> > 
> > 
> > __________________________________________________________
> > _______
> > Yeni Windows 7: G?ndelik i?lerinizi basitle?tirin. Size en uygun bilgisayar?
> > bulun.
> > http://windows.microsoft.com/shop
> > 
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
 		 	   		  
_________________________________________________________________
Windows Live: Arkada?lar?n?z size e-posta g?nderdiklerinde Flickr, Twitter ve Digg'deki hareketlerinizi g?r?rler.
http://www.microsoft.com/windows/windowslive/see-it-in-action/social-network-basics.aspx?ocid=PID23461::T:WLMTAGL:ON:WL:tr-tr:SI_SB_3:092010

From tounsimolka at yahoo.fr  Wed Apr 21 03:11:35 2010
From: tounsimolka at yahoo.fr (Molka Tounsi)
Date: Wed, 21 Apr 2010 10:11:35 +0000 (GMT)
Subject: [antlr-interest] help "debegger ANTLRWorks"
Message-ID: <176278.94483.qm@web26402.mail.ukl.yahoo.com>



 I have try  an other grammar,  all is well,  without when I makes the debugger it shows me:  
"cannot launch the debugger.
Time-out waiting to connect to the remote parser"

 Or sometimes it shows me:
"Compiler exception:
java.io.IOException: Cannot run program"javac": CreateProcess errors=2, Le fichier sp?cifi? est introuvable"

What is the wrong??

An other question please , when I use ANTLRWorks it is necessary to install ANTLR and how? Just add ANTLR.jar in Classpath? 

Thanks for your help.


      

From tounsimolka at yahoo.fr  Wed Apr 21 03:11:58 2010
From: tounsimolka at yahoo.fr (Molka Tounsi)
Date: Wed, 21 Apr 2010 10:11:58 +0000 (GMT)
Subject: [antlr-interest] Re :  help please
Message-ID: <741631.30215.qm@web26406.mail.ukl.yahoo.com>

Thanks! It is true I use ANTLRWorks v3.

Now I have try  an other grammar,  all is well,  without when I makes the debugger it shows me:  
"cannot launch the debugger.
Time-out waiting to connect to the remote parser"

 Or sometimes it shows me:
"Compiler exception:
java.io.IOException: Cannot run program"javac": CreateProcess errors=2, Le fichier sp?cifi? est introuvable"

What is the wrong??

An other question please , when I use ANTLRWorks it is necessary to install ANTLR and how? Just add ANTLR.jar in Classpath? 
Thanks for your help.


________________________________
De : John B. Brodie <jbb at acm.org>
? : Molka Tounsi <tounsimolka at yahoo.fr>
Cc : antlr-interest <antlr-interest at antlr.org>
Envoy? le : Mar 20 avril 2010, 16 h 59 min 36 s
Objet : Re: [antlr-interest] help please

Greetings!

On Tue, 2010-04-20 at 14:37 +0000, Molka Tounsi wrote:
> I tried this example on ANTLRWORK but it shows me errors.
> This is the code:
> class CalcParser extends Parser;
> options {
>     buildAST = true;    // uses CommonAST by default
> }
> 
> expr
>     :    mexpr (PLUS^ mexpr)* SEMI!
>     ;
> 
> mexpr
>     :    atom (STAR^ atom)*
>     ;
> 
> atom:    INT
>     ;
> 
> class CalcLexer extends Lexer;
> 
> WS    :    (' '
>     |    '\t'
>     |    '\n'
>     |    '\r')
>         { _ttype = Token.SKIP; }
>     ;
> 
> LPAREN:    '('
>     ;
> 
> RPAREN:    ')'
>     ;
> 
> STAR:    '*'
>     ;
> 
> PLUS:    '+'
>     ;
> 
> SEMI:    ';'
>     ;
> 
> protected
> DIGIT
>     :    '0'..'9'
>     ;
> 
> INT    :    (DIGIT)+
>     ;
> 
> class CalcTreeWalker extends TreeParser;
> 
> expr returns [float r]
> {
>     float a,b;
>     r=0;
> }
>     :    #(PLUS a=expr b=expr)    {r = a+b;}
>     |    #(STAR a=expr b=expr)    {r = a*b;}
>     |    i:INT            {r = (float)Integer.parseInt(i.getText());}
>     ;
> 
>  can you help me please ???
> 

This looks like an ANTLR version 2 grammar. 

Are you sure you are using an older (e.g. v2) ANTLRWorks and not a
newwer v3 oriented ANTLRWorks?

You might consider moving up to ANTLR version 3...


      

From Giampaolo at Tomassoni.biz  Wed Apr 21 03:51:33 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Wed, 21 Apr 2010 12:51:33 +0200
Subject: [antlr-interest] mild simplification and tree grammars
In-Reply-To: <20100420134630.GF18833@internode.on.net>
References: <006e01cae07f$d4a7b6f0$7df724d0$@biz>	<20100420130908.GE18833@internode.on.net>	<007501cae08c$52126160$f6372420$@biz>
	<20100420134630.GF18833@internode.on.net>
Message-ID: <001301cae140$9ba72720$d2f57560$@biz>

> Another extension of the example shows another ANTLR feature,
> with associated subtle syntax.  Say the conditionalExpression
> was being called with TheActualASTRoot being optional, then
> ANTLR supports this with semantic predicates on the tree generation
> options:
> 
> protected
> conditionalExpression[CommonTree TheActualASTRoot]
>     :   QMARK t=expression COMMA f=expression
>             -> {(TheActualASTRoot != null)}? ^(ITE {$TheActualASTRoot}
> $t $f)
>             -> {(TheActualASTRoot == null)}? ^(ITE $t $f)
>             ->
>     |
>     ;

Nice.

I didn't get why you were telling me that, but now I see: this way it is
easier to avoid non-LLR notations.

Just, I can't turn on my shc (SomethingHasChanged) flag anymore: a rule
like:

condExpr
	:    QMARK c=orExpression t=condExpr f=condExpr
		-> {($c.tree.getType()==TRUE)}?  {shc=true;} $t
		-> {($c.tree.getType()==FALSE)}? {shc=true;} $f
		->
	;


Produces a java source with errors, because {shc=true;} is now interpreted
like a tree node reference, not like a java statement to be passed to the
compiler verbatim.

I had to use a function's side-effect to keep track of tree modifications:


@members {
    private boolean shc = false;

    private boolean sshc(boolean cond) {
    	shc |= cond;
    	return(cond); 
    }
}

...

protected
condExpr
    :	QMARK c=orExpression t=condExpr f=condExpr
		-> {sshc($c.tree.getType()==TRUE)}?		$t
		-> {sshc($c.tree.getType()==FALSE)}?	$f
		-> QMARK $c $t $f
    |	additiveExpression
    ;


Also note the last '->' term is non-empty, because I'm not rewriting (the
ANTLR compiler says rewrite mode implies backtrack=true).

Do you think is it fine this way or there is some workaround I can implement
to avoid the need of a side-effect function?

Giampaolo


From markwright at internode.on.net  Wed Apr 21 04:10:49 2010
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 21 Apr 2010 21:10:49 +1000
Subject: [antlr-interest] mild simplification and tree grammars
In-Reply-To: <000c01cae13e$03500c00$09f02400$@biz>
References: <006e01cae07f$d4a7b6f0$7df724d0$@biz>
	<20100420130908.GE18833@internode.on.net>
	<007501cae08c$52126160$f6372420$@biz>
	<20100420134630.GF18833@internode.on.net>
	<000c01cae13e$03500c00$09f02400$@biz>
Message-ID: <20100421111049.GH18833@internode.on.net>

On Wed, Apr 21, 2010 at 12:32:58PM +0200, Giampaolo Tomassoni wrote:
> > Another extension of the example shows another ANTLR feature,
> > with associated subtle syntax.  Say the conditionalExpression
> > was being called with TheActualASTRoot being optional, then
> > ANTLR supports this with semantic predicates on the tree generation
> > options:
> > 
> > protected
> > conditionalExpression[CommonTree TheActualASTRoot]
> >     :   QMARK t=expression COMMA f=expression
> >             -> {(TheActualASTRoot != null)}? ^(ITE {$TheActualASTRoot}
> > $t $f)
> >             -> {(TheActualASTRoot == null)}? ^(ITE $t $f)
> >             ->
> >     |
> >     ;
> 
> Nice.
> 
> I didn't get why you were telling me that, but now I see: this way it is
> easier to avoid non-LLR notations.
> 
> Just, I can't turn on my shc (SomethingHasChanged) flag anymore: a rule
> like:
> 
> condExpr
> 	:    QMARK c=orExpression t=condExpr f=condExpr
> 		-> {($c.tree.getType()==TRUE)}?  {shc=true;} $t
> 		-> {($c.tree.getType()==FALSE)}? {shc=true;} $f
> 		->
> 	;
> 
> 
> Produces a java source with errors, because {shc=true;} is now interpreted
> like a tree node reference, not like a java statement to be passed to the
> compiler verbatim.
> 
> I had to use a function's side-effect to keep track of tree modifications:
> 
> 
> @members {
>     private boolean shc = false;
> 
>     private boolean sshc(boolean cond) {
>     	shc |= cond;
>     	return(cond); 
>     }
> }
> 
> ...
> 
> protected
> condExpr
>     :	QMARK c=orExpression t=condExpr f=condExpr
> 		-> {sshc($c.tree.getType()==TRUE)}?		$t
> 		-> {sshc($c.tree.getType()==FALSE)}?	$f
> 		-> QMARK $c $t $f
>     |	additiveExpression
>     ;
> 
> 
> Also note the last '->' term is non-empty, because I'm not rewriting (the
> ANTLR compiler says rewrite mode implies backtrack=true).
> 
> Do you think is it fine this way or there is some workaround I can implement
> to avoid the need of a side-effect function?
> 
> Giampaolo

Predicates should not have observable* side effects.

The solution seems simple: the actions should be called before the
tree rewrites, like:

condExpr
	:    QMARK c=orExpression t=condExpr f=condExpr
                {shc=true;}
		-> {($c.tree.getType()==TRUE)}?   $t
		-> {($c.tree.getType()==FALSE)}?  $f
		->
	;

Regards, Mark

PS * since disambiguating semantic predicates may be called tens or
hundreds of times at the same input file position in complex
predicated parsers by antlr generated code, for performance
reasons it may be necessary for complex semantic predicates to calculate the
result once at each input file position, and cache the result, to
avoid re-computing it over and over again.

From Giampaolo at Tomassoni.biz  Wed Apr 21 04:27:02 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Wed, 21 Apr 2010 13:27:02 +0200
Subject: [antlr-interest] mild simplification and tree grammars
In-Reply-To: <20100421111049.GH18833@internode.on.net>
References: <006e01cae07f$d4a7b6f0$7df724d0$@biz>	<20100420130908.GE18833@internode.on.net>	<007501cae08c$52126160$f6372420$@biz>	<20100420134630.GF18833@internode.on.net>	<000c01cae13e$03500c00$09f02400$@biz>
	<20100421111049.GH18833@internode.on.net>
Message-ID: <001a01cae145$90a50f90$b1ef2eb0$@biz>

> > Do you think is it fine this way or there is some workaround I can
> implement
> > to avoid the need of a side-effect function?
> >
> > Giampaolo
> 
> Predicates should not have observable* side effects.
> 
> The solution seems simple: the actions should be called before the
> tree rewrites, like:
> 
> condExpr
> 	:    QMARK c=orExpression t=condExpr f=condExpr
>                 {shc=true;}
> 		-> {($c.tree.getType()==TRUE)}?   $t
> 		-> {($c.tree.getType()==FALSE)}?  $f
> 		->
> 	;
> 
> Regards, Mark

Well, I attempted that, but then the shc var is set true even when there are
no rewrites (the empty rewrite case in your example). This is probably
because the disambiguating predicates are on the right side of the rewrite
operator, while the {shc=true;} seems an action to me. So, it is of course
to its left.

I don't see a way to put an action to the right side of the rewrite
operator, since a {...} notation would be interpreted like a tree reference,
if I understand it right.

Maybe all this means there is space for an enhancement in ANTLR? ;)

Giampaolo


> PS * since disambiguating semantic predicates may be called tens or
> hundreds of times at the same input file position in complex
> predicated parsers by antlr generated code, for performance
> reasons it may be necessary for complex semantic predicates to
> calculate the
> result once at each input file position, and cache the result, to
> avoid re-computing it over and over again.


From markwright at internode.on.net  Wed Apr 21 05:14:59 2010
From: markwright at internode.on.net (Mark Wright)
Date: Wed, 21 Apr 2010 22:14:59 +1000
Subject: [antlr-interest] mild simplification and tree grammars
In-Reply-To: <001a01cae145$90a50f90$b1ef2eb0$@biz>
References: <006e01cae07f$d4a7b6f0$7df724d0$@biz>
	<20100420130908.GE18833@internode.on.net>
	<007501cae08c$52126160$f6372420$@biz>
	<20100420134630.GF18833@internode.on.net>
	<000c01cae13e$03500c00$09f02400$@biz>
	<20100421111049.GH18833@internode.on.net>
	<001a01cae145$90a50f90$b1ef2eb0$@biz>
Message-ID: <20100421121459.GI18833@internode.on.net>

On Wed, Apr 21, 2010 at 01:27:02PM +0200, Giampaolo Tomassoni wrote:
> > The solution seems simple: the actions should be called before the
> > tree rewrites, like:
> > 
> > condExpr
> > 	:    QMARK c=orExpression t=condExpr f=condExpr
> >                 {shc=true;}
> > 		-> {($c.tree.getType()==TRUE)}?   $t
> > 		-> {($c.tree.getType()==FALSE)}?  $f
> > 		->
> > 	;
> > 
> > Regards, Mark
> 
> Well, I attempted that, but then the shc var is set true even when there are
> no rewrites (the empty rewrite case in your example). This is probably
> because the disambiguating predicates are on the right side of the rewrite
> operator, while the {shc=true;} seems an action to me. So, it is of course
> to its left.
> 
> I don't see a way to put an action to the right side of the rewrite
> operator, since a {...} notation would be interpreted like a tree reference,
> if I understand it right.
> 
> Maybe all this means there is space for an enhancement in ANTLR? ;)
> 
> Giampaolo

I guess then it is necessary to repeat the predicate test in the action
code then conditionally set shc, or to call a method from the action code with
whatever parameters are necessary for it to compute whether it should set shc or not.

Regards, Mark

From Gordon.Tyler at quest.com  Wed Apr 21 07:22:55 2010
From: Gordon.Tyler at quest.com (Gordon Tyler)
Date: Wed, 21 Apr 2010 07:22:55 -0700
Subject: [antlr-interest] parser runtime error listeners
In-Reply-To: <186DA6A1-31D0-463E-98D9-80887331AD50@cs.usfca.edu>
References: <186DA6A1-31D0-463E-98D9-80887331AD50@cs.usfca.edu>
Message-ID: <1FE9A296676737419A8912A6FD22AE1D02799008A4@alvxmbw04.prod.quest.corp>

The parser itself could register a listener, which calls reportError.

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Terence Parr
Sent: April 20, 2010 5:45 PM
To: ANTLR interest
Subject: [antlr-interest] parser runtime error listeners

Hiya. GeraldHas brought up an excellent point about our runtime. Currently, parsing errors get reported through method reportError. To do something different, you have to override that method. Gerald is suggesting that we move to an error listener mechanism so that multiple listeners can attach to a running parser and receive error events (kind of like what we do for debugging events).

I'm all for this idea, but what about backward compatibility? a lot of people have overridden reportError in their parsers or tree parsers (like me) and we want that to continue to work. How do we integrate this with a listener mechanism? Also, Gerald points out that even if someone overrides that method, his tool and other tools for integration with eclipse need to get those errors regardless of whether someone has overridden reportError. Otherwise, the ANTLR IDE couldn't get  syntax error messages when it ran. He suggested

> Preferably, the listener interface would be above anything that the end user could override.  Stuff that now calls reportError should instead call some private "reportError_intern", which fires the event listeners and then calls the public/overrideable "reportError".

any comments on the approach or what we want?

The minute I get v4 running in v3, I want to turn around and have v4 generate its own parsers. Backward compatibility will also be important for me.

Ter

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From altarfinch at gmail.com  Wed Apr 21 10:14:04 2010
From: altarfinch at gmail.com (Finch Altar)
Date: Wed, 21 Apr 2010 19:14:04 +0200
Subject: [antlr-interest] Decision can match input using multiple
	alternatives
Message-ID: <j2nbb22ecc71004211014lc13be0fbyab34854d4a46741e@mail.gmail.com>

I am trying to implement a LOGO grammar, but the langage is a little bit
ambiguous and lacks several parenthesis usage.

Here is my expr grammar:

or : and (OR^ and)*;
and : eq (AND^ eq)*;
eq : rel ((EQ|NOTEQ)^ rel)*;
rel : add ((LT|GT|LTEQ|GTEQ)^ add)*;
add : mul ((PLUS|MINUS)^ mul)*;
mul : atom ((MULT|DIV|MOD)^ atom)*;
atom : INT | FUNCTION_ID ({needMoreArgs()}?or)*;

Everything goes well until I add function call grammar signaled by
FUNCTION_ID and the list of args

And here are my warnings:

[19:09:37] warning(200): Logo.g:215:18: Decision can match input such as
"OR" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[19:09:37] warning(200): Logo.g:216:18: Decision can match input such as
"AND" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[19:09:37] warning(200): Logo.g:217:26: Decision can match input such as
"EQ..NOTEQ" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[19:09:37] warning(200): Logo.g:218:34: Decision can match input such as
"LT..GTEQ" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[19:09:37] warning(200): Logo.g:219:29: Decision can match input such as
"PLUS..MINUS" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[19:09:37] warning(200): Logo.g:220:33: Decision can match input such as
"MULT..MOD" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input

From ssedai at gmail.com  Thu Apr 22 05:04:59 2010
From: ssedai at gmail.com (Sergei Smolov)
Date: Thu, 22 Apr 2010 16:04:59 +0400
Subject: [antlr-interest] required (...)+ loop did not match anything at
	input '<EOF>'
Message-ID: <t2naf1a24981004220504p6c9aa744ta8a3e2836b6bfd8d@mail.gmail.com>

Hello, List!
I try to develop a lexer\parser for SIP portocol grammar. But now I have the
following error after an attempt to parse "INVITE sip:ssedai" string:

line 1:12 mismatched character 's' expecting 'i'
line 1:13 no viable alternative at character 'e'
line 1:14 no viable alternative at character 'd'
line 1:15 no viable alternative at character 'a'
line 1:16 no viable alternative at character 'i'
line 0:-1 required (...)+ loop did not match anything at input '<EOF>'

Here is my grammar:

### grammar beginning ###

grammar testGrammar;

options {
language = Java;
backtrack = true;
  output = AST;
}

request : request_line EOF;

request_line : method SP request_uri;

method : Invite;

Invite : 'INVITE';

SIP_BEGIN : 'sip:';

SP : ' ';

request_uri : sip_url;

sip_url : SIP_BEGIN user;

user : (LOWALPHA+) -> LOWALPHA+;

fragment LOWALPHA : 'a'..'z';

#### grammar end #####

What I am doing wrong? Thanks in advance.
-- 
Sergey Smolov

From tcorbat at hsr.ch  Thu Apr 22 05:30:13 2010
From: tcorbat at hsr.ch (tcorbat at hsr.ch)
Date: Thu, 22 Apr 2010 14:30:13 +0200
Subject: [antlr-interest] required (...)+ loop did not match anything
	at	input '<EOF>'
In-Reply-To: <t2naf1a24981004220504p6c9aa744ta8a3e2836b6bfd8d@mail.gmail.com>
References: <t2naf1a24981004220504p6c9aa744ta8a3e2836b6bfd8d@mail.gmail.com>
Message-ID: <E1FBA77227279347B0AAEFA3C17DBC4836652B6363@sid00101.hsr.ch>

Hello Sergey

as LOWALPHA is declared as a "fragment" rule, it would only be included into other lexer rules and is not used to define and create a lexer token. Remove the "fragment' keyword and I guess it should work...

Regards
Thomas

________________________________________
Von: antlr-interest-bounces at antlr.org [antlr-interest-bounces at antlr.org] im Auftrag von Sergei Smolov [ssedai at gmail.com]
Gesendet: Donnerstag, 22. April 2010 14:04
An: antlr-interest at antlr.org
Betreff: [antlr-interest] required (...)+ loop did not match anything at        input '<EOF>'

Hello, List!
I try to develop a lexer\parser for SIP portocol grammar. But now I have the
following error after an attempt to parse "INVITE sip:ssedai" string:

line 1:12 mismatched character 's' expecting 'i'
line 1:13 no viable alternative at character 'e'
line 1:14 no viable alternative at character 'd'
line 1:15 no viable alternative at character 'a'
line 1:16 no viable alternative at character 'i'
line 0:-1 required (...)+ loop did not match anything at input '<EOF>'

Here is my grammar:

### grammar beginning ###

grammar testGrammar;

options {
language = Java;
backtrack = true;
  output = AST;
}

request : request_line EOF;

request_line : method SP request_uri;

method : Invite;

Invite : 'INVITE';

SIP_BEGIN : 'sip:';

SP : ' ';

request_uri : sip_url;

sip_url : SIP_BEGIN user;

user : (LOWALPHA+) -> LOWALPHA+;

fragment LOWALPHA : 'a'..'z';

#### grammar end #####

What I am doing wrong? Thanks in advance.
--
Sergey Smolov

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From list at toolazydogs.com  Thu Apr 22 05:43:25 2010
From: list at toolazydogs.com (Alan D. Cabrera)
Date: Thu, 22 Apr 2010 05:43:25 -0700
Subject: [antlr-interest] Another JUnit testing framework
Message-ID: <DE4D1A57-1F95-4201-98EC-BCD2A7935F18@toolazydogs.com>

Hello,

I started working on another JUnit testing framework for ANTLR.   
Mainly as a mechanism to learn how to write a JUnit testing and,  
secondarily, to test my grammars in a way that I was comfortable with.

It's a great mix of Jeremy D. Frens' assert code from the antlr- 
testing.sourceforge.net project and the configuration bits from PAX  
Exam, http://wiki.ops4j.org/display/paxexam/Pax+Exam.

I'm new to all this, both JUnit writing and ANTLR testing, so I would  
love any comments you may have.  You can find my project at:

http://github.com/maguro/aunit


Regards,
Alan

  

From ssedai at gmail.com  Thu Apr 22 05:47:29 2010
From: ssedai at gmail.com (Sergei Smolov)
Date: Thu, 22 Apr 2010 16:47:29 +0400
Subject: [antlr-interest] required (...)+ loop did not match anything at
	input '<EOF>'
In-Reply-To: <E1FBA77227279347B0AAEFA3C17DBC4836652B6363@sid00101.hsr.ch>
References: <t2naf1a24981004220504p6c9aa744ta8a3e2836b6bfd8d@mail.gmail.com>
	<E1FBA77227279347B0AAEFA3C17DBC4836652B6363@sid00101.hsr.ch>
Message-ID: <w2saf1a24981004220547t97fbaaa3qc8b913e3cdfc0173@mail.gmail.com>

Thomas and Kirby Bohling

Thank you, it helps me so much

2010/4/22 <tcorbat at hsr.ch>

> Hello Sergey
>
> as LOWALPHA is declared as a "fragment" rule, it would only be included
> into other lexer rules and is not used to define and create a lexer token.
> Remove the "fragment' keyword and I guess it should work...
>
> Regards
> Thomas
>
> ________________________________________
> Von: antlr-interest-bounces at antlr.org [antlr-interest-bounces at antlr.org]
> im Auftrag von Sergei Smolov [ssedai at gmail.com]
> Gesendet: Donnerstag, 22. April 2010 14:04
> An: antlr-interest at antlr.org
> Betreff: [antlr-interest] required (...)+ loop did not match anything at
>      input '<EOF>'
>
> Hello, List!
> I try to develop a lexer\parser for SIP portocol grammar. But now I have
> the
> following error after an attempt to parse "INVITE sip:ssedai" string:
>
> line 1:12 mismatched character 's' expecting 'i'
> line 1:13 no viable alternative at character 'e'
> line 1:14 no viable alternative at character 'd'
> line 1:15 no viable alternative at character 'a'
> line 1:16 no viable alternative at character 'i'
> line 0:-1 required (...)+ loop did not match anything at input '<EOF>'
>
> Here is my grammar:
>
> ### grammar beginning ###
>
> grammar testGrammar;
>
> options {
> language = Java;
> backtrack = true;
>  output = AST;
> }
>
> request : request_line EOF;
>
> request_line : method SP request_uri;
>
> method : Invite;
>
> Invite : 'INVITE';
>
> SIP_BEGIN : 'sip:';
>
> SP : ' ';
>
> request_uri : sip_url;
>
> sip_url : SIP_BEGIN user;
>
> user : (LOWALPHA+) -> LOWALPHA+;
>
> fragment LOWALPHA : 'a'..'z';
>
> #### grammar end #####
>
> What I am doing wrong? Thanks in advance.
> --
> Sergey Smolov
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



-- 
Sergey Smolov

From michael.berger at fokus.fraunhofer.de  Thu Apr 22 06:32:01 2010
From: michael.berger at fokus.fraunhofer.de (Berger, Michael)
Date: Thu, 22 Apr 2010 15:32:01 +0200
Subject: [antlr-interest] Overriding rule in imported parser grammar
	generates a faulty java code with undefined method
Message-ID: <70524A4436C03E43A293958B505008B6026E05F6@EXCHSRV.fokus.fraunhofer.de>

Title:

Overriding rule in imported parser grammar generates a faulty java code
with undefined method

 

Description:

 

Simple extended example from the article about the import introduction:

A parser 1 defines a rule that will be override by parser 2 importing
parser 1.

The combined grammar imports the parser 2.

 

Software: 

antlrworks-1.3.1.jar

 

 

-------

 

lexer grammar lex;

 

IntString : 'int' ;

FloatString : 'float' ;

Semicolon : ';' ;

Equal : '=' ;

 

ID : 'a'..'z'+ ;

INT : '0'..'9'+ ;

WS : (' '|'\n')+ {skip();} ;

--------

 

parser grammar par1;

 

type : IntString ;

decl : type ID Semicolon | type ID init Semicolon ;

init : Equal INT ;

---------

 

parser grammar par2;

 

import par1;

 

prog : decl ;

type : IntString | FloatString ; //override from p1

---------

 

grammar gram;

 

import lex, par2;

 

start : decl | init;

--------

 

 

Generated java code (snipped):

 

public class gramParser extends Parser {

 

(...)

                // delegates

    public gram_par2_par1 gpar1;

    public gram_par2 gpar2;

    // delegators

                

(...)

                

                // Delegated rules

    public void decl() throws RecognitionException { gpar1.decl(); }

    public void type() throws RecognitionException { gpar1.type(); } (*)

    public void init() throws RecognitionException { gpar1.init(); }

    public void prog() throws RecognitionException { gpar2.prog(); }

                

(...)

}

 

The part (*) produces the error line:

D:\local\mib\Compiler\de.fraunhofer.fokus.ttcn3.compiler\grammar\gramPar
ser.java:151: cannot find symbol

symbol  : method type()

location: class gram_par2_par1

public void type() throws RecognitionException { gpar1.type(); }

 

 

 

Best regards,

 

Michael Berger

Fraunhofer FOKUS

Kaiserin-Augusta-Allee 31

10589 Berlin

Tel: +49-30-3463-7176

 


From michael.berger at fokus.fraunhofer.de  Thu Apr 22 06:49:56 2010
From: michael.berger at fokus.fraunhofer.de (Berger, Michael)
Date: Thu, 22 Apr 2010 15:49:56 +0200
Subject: [antlr-interest] Imported parser grammar importing another grammar
	produces unsuspected errors
Message-ID: <70524A4436C03E43A293958B505008B6026E05F7@EXCHSRV.fokus.fraunhofer.de>

Title:

Imported parser grammar importing another grammar produces unsuspected
errors

 

Description:

The original example from the article about the import introduction:

A combined grammar imports a parser grammar importing an other parser
grammar. (without overriding)

 

Software:

antlrworks-1.3.1.jar

 

-------

 

lexer grammar lex;

 

LETTER : 'a'..'z' ;

SPACE : ' ' ;

--------

 

parser grammar par1;

 

letter : LETTER ;

spaces : SPACE+ ;

---------

 

parser grammar par2;

 

import par1;

 

letters : letter+ ;

---------

 

grammar gram;

 

import lex, par2;

 

stuff : ( letters spaces )+ ;

--------

 

 

Generated java code produces follow errors :

 

D:\local\mib\Compiler\de.fraunhofer.fokus.ttcn3.compiler\grammar\gram_pa
r2_par1.java:22: cannot find symbol

symbol  : variable ggramgpar2

location: class gram_par2_par1

        public int getRuleLevel() { return ggramgpar2.getRuleLevel(); }

                                           ^

D:\local\mib\Compiler\de.fraunhofer.fokus.ttcn3.compiler\grammar\gram_pa
r2_par1.java:23: cannot find symbol

symbol  : variable ggramgpar2

location: class gram_par2_par1

        public void incRuleLevel() { ggramgpar2.incRuleLevel(); }

                                     ^

D:\local\mib\Compiler\de.fraunhofer.fokus.ttcn3.compiler\grammar\gram_pa
r2_par1.java:24: cannot find symbol

symbol  : variable ggramgpar2

location: class gram_par2_par1

        public void decRuleLevel() { ggramgpar2.decRuleLevel(); }

                                     ^

D:\local\mib\Compiler\de.fraunhofer.fokus.ttcn3.compiler\grammar\gram_pa
r2.java:28: cannot find symbol

symbol  : constructor
gram_par2_par1(org.antlr.runtime.TokenStream,gram_par2,org.antlr.runtime
.RecognizerSharedState,gramParser)

location: class gram_par2_par1

        gpar1 = new gram_par2_par1(input, this, this.state, ggram);

 

--------

 

the generated constructor in class gram_par2_par1:

public gram_par2_par1(TokenStream input, DebugEventListener dbg,
RecognizerSharedState state, gramParser ggram, gram_par2 gpar2) {

            super(input, dbg, state);

            this.ggram = ggram;

            this.gpar2 = gpar2;

        }

 

 

best regards,

 

Michael Berger

Fraunhofer FOKUS

Kaiserin-Augusta-Allee 31

10589 Berlin

Tel: +49-30-3463-7176

 


From michael.berger at fokus.fraunhofer.de  Thu Apr 22 07:26:17 2010
From: michael.berger at fokus.fraunhofer.de (Berger, Michael)
Date: Thu, 22 Apr 2010 16:26:17 +0200
Subject: [antlr-interest] Combined grammar importing lexer and parser
	grammar could not define lexer rules
Message-ID: <70524A4436C03E43A293958B505008B6026E05F8@EXCHSRV.fokus.fraunhofer.de>

Title:

Combined grammar importing lexer and parser grammar could not define
lexer rules

 

Description:

A combined grammar with imported lexer and parser grammar is given. In
this grammar

header rules have to be set for example for package declarations.

 

Software:

antlrworks-1.3.1.jar

 

--------

 

lexer grammar lex;

 

LETTER : 'a'..'z' ;

SPACE : ' ' ;

--------

 

parser grammar par;

 

letter : LETTER ;

spaces : SPACE+ ;

--------

 

grammar gram;

 

import lex, par;

 

@parser::header{

      package grammar;

}

 

@lexer::header{

      package grammar;

}

 

letters : letter+ ;

stuff : ( letters spaces )+ ;

--------

 

 

This grammar cannot be generated because of following error:

 

Cannot generate the grammar because:

error (143):  par.g:10:15: unknown or invalid action scope for parser
grammar: lexer

 

 

note: If the combined grammar only imports the lexer grammar, all will
be fine.

 

 

Best regards,

 

Michael Berger

Fraunhofer FOKUS

Kaiserin-Augusta-Allee 31

10589 Berlin

Tel: +49-30-3463-7176

 


From kaleb.pederson at gmail.com  Thu Apr 22 11:13:48 2010
From: kaleb.pederson at gmail.com (Kaleb Pederson)
Date: Thu, 22 Apr 2010 11:13:48 -0700
Subject: [antlr-interest] Another JUnit testing framework
In-Reply-To: <DE4D1A57-1F95-4201-98EC-BCD2A7935F18@toolazydogs.com>
References: <DE4D1A57-1F95-4201-98EC-BCD2A7935F18@toolazydogs.com>
Message-ID: <201004221113.48580.kaleb.pederson@gmail.com>

Alan,

Overall your code looks very clean.  Do you have any samples that demonstrate usage? (I looked around but your README and docs directories are basically empty :).

Thanks.

--
Kaleb Pederson

Blog - http://kalebpederson.com
Twitter - http://twitter.com/kalebpederson


On Thursday 22 April 2010 05:43:25 am Alan D. Cabrera wrote:
> Hello,
> 
> I started working on another JUnit testing framework for ANTLR.   
> Mainly as a mechanism to learn how to write a JUnit testing and,  
> secondarily, to test my grammars in a way that I was comfortable with.
> 
> It's a great mix of Jeremy D. Frens' assert code from the antlr- 
> testing.sourceforge.net project and the configuration bits from PAX  
> Exam, http://wiki.ops4j.org/display/paxexam/Pax+Exam.
> 
> I'm new to all this, both JUnit writing and ANTLR testing, so I would  
> love any comments you may have.  You can find my project at:
> 
> http://github.com/maguro/aunit
> 
> 
> Regards,
> Alan

From list at toolazydogs.com  Thu Apr 22 11:15:27 2010
From: list at toolazydogs.com (Alan D. Cabrera)
Date: Thu, 22 Apr 2010 11:15:27 -0700
Subject: [antlr-interest] Another JUnit testing framework
In-Reply-To: <201004221113.48580.kaleb.pederson@gmail.com>
References: <DE4D1A57-1F95-4201-98EC-BCD2A7935F18@toolazydogs.com>
	<201004221113.48580.kaleb.pederson@gmail.com>
Message-ID: <774B93CD-593A-4EA5-83BA-C22134C66F0B@toolazydogs.com>

It's in the tests of the it directory:

http://github.com/maguro/aunit/blob/master/it/src/test/java/com/toolazydogs/aunit/CMinusTest.java


Regards,
Alan

On Apr 22, 2010, at 11:13 AM, Kaleb Pederson wrote:

> Alan,
>
> Overall your code looks very clean.  Do you have any samples that  
> demonstrate usage? (I looked around but your README and docs  
> directories are basically empty :).
>
> Thanks.
>
> --
> Kaleb Pederson
>
> Blog - http://kalebpederson.com
> Twitter - http://twitter.com/kalebpederson
>
>
> On Thursday 22 April 2010 05:43:25 am Alan D. Cabrera wrote:
>> Hello,
>>
>> I started working on another JUnit testing framework for ANTLR.
>> Mainly as a mechanism to learn how to write a JUnit testing and,
>> secondarily, to test my grammars in a way that I was comfortable  
>> with.
>>
>> It's a great mix of Jeremy D. Frens' assert code from the antlr-
>> testing.sourceforge.net project and the configuration bits from PAX
>> Exam, http://wiki.ops4j.org/display/paxexam/Pax+Exam.
>>
>> I'm new to all this, both JUnit writing and ANTLR testing, so I would
>> love any comments you may have.  You can find my project at:
>>
>> http://github.com/maguro/aunit
>>
>>
>> Regards,
>> Alan
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From bruno.lehyaric at gmail.com  Thu Apr 22 13:02:50 2010
From: bruno.lehyaric at gmail.com (bruno le hyaric)
Date: Thu, 22 Apr 2010 22:02:50 +0200
Subject: [antlr-interest]  Coding rule checking for Ada 95
Message-ID: <t2ke8be804e1004221302jff6445a1k65e10ef585faa139@mail.gmail.com>

Hum, okay...

My problem is : the better I get it running, the better it is for my ass ^^

Now, I'm evaluating the feasibility of a solution :
- based on ANTLR and Java target (thanks to Aonix & Hibachi eclipse plugin)
- with a Scala overlay to get a functionnal approach for all tree
walking/matching algorithm

I'm on the way to make a little prototype...

From kumarr at utrc.utc.com  Thu Apr 22 13:04:09 2010
From: kumarr at utrc.utc.com (kumarr)
Date: Thu, 22 Apr 2010 12:04:09 -0800 (PST)
Subject: [antlr-interest] token not recognized
Message-ID: <1271966649302-4946875.post@n2.nabble.com>


Hi all,

I have defined a token called GEN that can take on various string values.
The grammar is below.

The token is question is GEN. I'm trying to parse a very simple string
conforming to this grammar: "Unavailable(LEP)". When it sees "LEP" it
complains that it found 'LEP' when it was expecting GEN. The error message
is:

line 1:13 mismatched input 'LEP' expecting GEN

I don't understand this. I have defined "LEP" as one of the values that GEN
can take!!

The same problem happens for "Unavailable(REP)". The inputs
"Unavailable(VFSG_L1)", "Unavailable(VFSG_L2)" etc are parsed without
errors.

does anyone know what could be gong on?
Thanks.
Rajesh

**********************grammar		 Expression2; 

prog	
	:	exp

	;
	
exp	
	: atomic_expr 
	| 
	;
	

atomic_expr 
	:	 ID 
	|	ID '>' NUM 
	|	ID '<' NUM 
	|	'Unavailable' '(' GEN ')'
	;

ID	:	 ('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9')*
	;

NUM	:	('0'..'9')+
	;
	
GEN	:     'VFSG_L1'
	| 	'LEP'
	| 	'REP'
	|	'VFSG_L2'
	|	'VFSG_R1'
	|	'VFSG_R2'
	|	'ASG_L'
	|	'ASG_R' 
	;
	
BUS	:	'L1_V235_bus'
	|	'L2_V235_bus'
	|	'R1_V235_bus'
	|	'R2_V235_bus'
	|	'Backup_bus'
	;
	
WS	:	(' '|'\t'|'\n')+ {skip();};

*****************************************
-- 
View this message in context: http://antlr.1301665.n2.nabble.com/token-not-recognized-tp4946875p4946875.html
Sent from the ANTLR mailing list archive at Nabble.com.

From jbb at acm.org  Thu Apr 22 13:22:41 2010
From: jbb at acm.org (John B. Brodie)
Date: Thu, 22 Apr 2010 16:22:41 -0400
Subject: [antlr-interest] token not recognized
In-Reply-To: <1271966649302-4946875.post@n2.nabble.com>
References: <1271966649302-4946875.post@n2.nabble.com>
Message-ID: <1271967761.31165.4.camel@gecko.home.org>

Greetings!

On Thu, 2010-04-22 at 12:04 -0800, kumarr wrote:
> Hi all,
> 
> I have defined a token called GEN that can take on various string values.
> The grammar is below.
> 
> The token is question is GEN. I'm trying to parse a very simple string
> conforming to this grammar: "Unavailable(LEP)". When it sees "LEP" it
> complains that it found 'LEP' when it was expecting GEN. The error message
> is:
> 
> line 1:13 mismatched input 'LEP' expecting GEN
> 
> I don't understand this. I have defined "LEP" as one of the values that GEN
> can take!!
> 
> The same problem happens for "Unavailable(REP)". The inputs
> "Unavailable(VFSG_L1)", "Unavailable(VFSG_L2)" etc are parsed without
> errors.
> 
> does anyone know what could be gong on?
> Thanks.
> Rajesh
> 
> **********************grammar		 Expression2; 
> 
> prog	
> 	:	exp
> 
> 	;
> 	
> exp	
> 	: atomic_expr 
> 	| 
> 	;
> 	
> 
> atomic_expr 
> 	:	 ID 
> 	|	ID '>' NUM 
> 	|	ID '<' NUM 
> 	|	'Unavailable' '(' GEN ')'
> 	;
> 
> ID	:	 ('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9')*
> 	;
> 
> NUM	:	('0'..'9')+
> 	;
> 	
> GEN	:     'VFSG_L1'
> 	| 	'LEP'
> 	| 	'REP'
> 	|	'VFSG_L2'
> 	|	'VFSG_R1'
> 	|	'VFSG_R2'
> 	|	'ASG_L'
> 	|	'ASG_R' 
> 	;
> 	
> BUS	:	'L1_V235_bus'
> 	|	'L2_V235_bus'
> 	|	'R1_V235_bus'
> 	|	'R2_V235_bus'
> 	|	'Backup_bus'
> 	;
> 	
> WS	:	(' '|'\t'|'\n')+ {skip();};
> 
> *****************************************

Your ID rule overlaps with the LEP and REP keywords (but not with any
keyword that has an _ in it).

Move your ID rule to be after the keyword rules.

When two lexer rules match the same input string, ANTLR lexers select
the Token that appears first in the set of rules....

'Unavailable' worked because ANTLR puts parser created tokens implicitly
first in the set of lexer rules.

Hope this helps.
   -jbb



From KumarR at utrc.utc.com  Thu Apr 22 13:30:55 2010
From: KumarR at utrc.utc.com (Kumar, Rajesh (Systems)   UTRC)
Date: Thu, 22 Apr 2010 16:30:55 -0400
Subject: [antlr-interest] token not recognized
In-Reply-To: <1271967761.31165.4.camel@gecko.home.org>
References: <1271966649302-4946875.post@n2.nabble.com>
	<1271967761.31165.4.camel@gecko.home.org>
Message-ID: <6B126C65D016E2439B381C6CDB783CF4024EBF5C@UUSNWEG1.na.utcmail.com>

Thanks! 

I had figured out that putting an "_" fixed the problem. Now I know why it did so.

Rajesh

-----Original Message-----
From: John B. Brodie [mailto:jbb at acm.org] 
Sent: Thursday, April 22, 2010 4:23 PM
To: Kumar, Rajesh (Systems) UTRC
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] token not recognized

Greetings!

On Thu, 2010-04-22 at 12:04 -0800, kumarr wrote:
> Hi all,
> 
> I have defined a token called GEN that can take on various string values.
> The grammar is below.
> 
> The token is question is GEN. I'm trying to parse a very simple string
> conforming to this grammar: "Unavailable(LEP)". When it sees "LEP" it
> complains that it found 'LEP' when it was expecting GEN. The error message
> is:
> 
> line 1:13 mismatched input 'LEP' expecting GEN
> 
> I don't understand this. I have defined "LEP" as one of the values that GEN
> can take!!
> 
> The same problem happens for "Unavailable(REP)". The inputs
> "Unavailable(VFSG_L1)", "Unavailable(VFSG_L2)" etc are parsed without
> errors.
> 
> does anyone know what could be gong on?
> Thanks.
> Rajesh
> 
> **********************grammar		 Expression2; 
> 
> prog	
> 	:	exp
> 
> 	;
> 	
> exp	
> 	: atomic_expr 
> 	| 
> 	;
> 	
> 
> atomic_expr 
> 	:	 ID 
> 	|	ID '>' NUM 
> 	|	ID '<' NUM 
> 	|	'Unavailable' '(' GEN ')'
> 	;
> 
> ID	:	 ('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9')*
> 	;
> 
> NUM	:	('0'..'9')+
> 	;
> 	
> GEN	:     'VFSG_L1'
> 	| 	'LEP'
> 	| 	'REP'
> 	|	'VFSG_L2'
> 	|	'VFSG_R1'
> 	|	'VFSG_R2'
> 	|	'ASG_L'
> 	|	'ASG_R' 
> 	;
> 	
> BUS	:	'L1_V235_bus'
> 	|	'L2_V235_bus'
> 	|	'R1_V235_bus'
> 	|	'R2_V235_bus'
> 	|	'Backup_bus'
> 	;
> 	
> WS	:	(' '|'\t'|'\n')+ {skip();};
> 
> *****************************************

Your ID rule overlaps with the LEP and REP keywords (but not with any
keyword that has an _ in it).

Move your ID rule to be after the keyword rules.

When two lexer rules match the same input string, ANTLR lexers select
the Token that appears first in the set of rules....

'Unavailable' worked because ANTLR puts parser created tokens implicitly
first in the set of lexer rules.

Hope this helps.
   -jbb



From aziz.nantha at gmail.com  Thu Apr 22 23:06:19 2010
From: aziz.nantha at gmail.com (AZIZ NANTHAAMORNPHONG)
Date: Fri, 23 Apr 2010 01:06:19 -0500
Subject: [antlr-interest] ClassCastException in Custom CommonTree
Message-ID: <y2td88b3271004222306z5c261e86wdb873e814ce9a07@mail.gmail.com>

Hi,

I have created tree grammar and I have following

 ASTLabelType=MyAst;

I created a Class MyAst extends CommonTree.


And I also uses this following in the main method:



*final* TreeAdaptor adaptor = *new* CommonTreeAdaptor(){

*public* Object create(Token payload){

*return* *new* MyAst(payload);

}


However, I found the ClassCastException when encountered to the *UP node*.
How solve this problem?

Thank,
Z.

From kunalsawlani at gmail.com  Fri Apr 23 10:56:09 2010
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Fri, 23 Apr 2010 13:56:09 -0400
Subject: [antlr-interest] ANTLR - Detecting if parsing was successful
Message-ID: <m2t9a93847b1004231056p3067d3b2yb57eb1cc2e00d766@mail.gmail.com>

Hi,
I am a new to ANTLR and have been trying to detect if the parsing was
successful or not. As of now, I was using the @after block, which gets
executed
only if the parsing was successful. But this block gets executed, even for
incorrect inputs in the language. I think I am missing something, which I
must do
to deactivate the error recovery mechanism, to avoid the after block from
being executed. Can anyone please guide me to some material on this issue.

Any help would be greatly appreciated.
Thanks
-- 
Kunal

From williamvdoorn at gmail.com  Fri Apr 23 11:17:33 2010
From: williamvdoorn at gmail.com (William v Doorn)
Date: Fri, 23 Apr 2010 20:17:33 +0200
Subject: [antlr-interest] ANTLR examples
Message-ID: <p2h6eb53c7e1004231117r119e1ec1od6dd7e8ff692eec5@mail.gmail.com>

Hey all,

I'm looking for some ANTLR examples, I tried googling a bit but I found
certain things which didn't fit my requirments. I found the Mantra project,
but it's statically typed and is 'too' big for me at this moment, then I
found 'pie' as interpreter, which is dynamically typed, what I want, but it
uses a syntax-directed interpreter.

I'm looking for a pretty small language which is dynamically typed and uses
AST's if possible. It doesn't need to be advanced, if it would have classes
I would already be very happy.

Thanks,

William van Doorn

From jimi at temporal-wave.com  Fri Apr 23 11:19:03 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 23 Apr 2010 11:19:03 -0700
Subject: [antlr-interest] ANTLR examples
In-Reply-To: <p2h6eb53c7e1004231117r119e1ec1od6dd7e8ff692eec5@mail.gmail.com>
Message-ID: <e30c0731b56bf24eabd4409dbf477c93@temporal-wave.com>

Did you download the examples zip file from the downloads page?

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of William v Doorn
> Sent: Friday, April 23, 2010 11:18 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] ANTLR examples
> 
> Hey all,
> 
> I'm looking for some ANTLR examples, I tried googling a bit but I found
> certain things which didn't fit my requirments. I found the Mantra
> project,
> but it's statically typed and is 'too' big for me at this moment, then
> I
> found 'pie' as interpreter, which is dynamically typed, what I want,
> but it
> uses a syntax-directed interpreter.
> 
> I'm looking for a pretty small language which is dynamically typed and
> uses
> AST's if possible. It doesn't need to be advanced, if it would have
> classes
> I would already be very happy.
> 
> Thanks,
> 
> William van Doorn
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From tcorbat at hsr.ch  Fri Apr 23 13:05:40 2010
From: tcorbat at hsr.ch (tcorbat at hsr.ch)
Date: Fri, 23 Apr 2010 22:05:40 +0200
Subject: [antlr-interest] ANTLR - Detecting if parsing was successful
In-Reply-To: <m2t9a93847b1004231056p3067d3b2yb57eb1cc2e00d766@mail.gmail.com>
References: <m2t9a93847b1004231056p3067d3b2yb57eb1cc2e00d766@mail.gmail.com>
Message-ID: <E1FBA77227279347B0AAEFA3C17DBC4836652B6368@sid00101.hsr.ch>

Hi Kunal

That's not quite correct. The @after block gets executed after matching a rule. It is not executed during syntactic predicate evaluation, or backtracking respectively. So if your @after block gets executed I think the rule must have matched. Could you give an example for reproducing your observation? Input and Rules?

Regards
Thomas

________________________________________
Von: antlr-interest-bounces at antlr.org [antlr-interest-bounces at antlr.org] im Auftrag von Kunal Sawlani [kunalsawlani at gmail.com]
Gesendet: Freitag, 23. April 2010 19:56
An: antlr-interest at antlr.org
Betreff: [antlr-interest] ANTLR - Detecting if parsing was successful

Hi,
I am a new to ANTLR and have been trying to detect if the parsing was
successful or not. As of now, I was using the @after block, which gets
executed
only if the parsing was successful. But this block gets executed, even for
incorrect inputs in the language. I think I am missing something, which I
must do
to deactivate the error recovery mechanism, to avoid the after block from
being executed. Can anyone please guide me to some material on this issue.

Any help would be greatly appreciated.
Thanks
--
Kunal

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From ron.hunter-duvar at oracle.com  Fri Apr 23 13:20:54 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Fri, 23 Apr 2010 14:20:54 -0600
Subject: [antlr-interest] ANTLR - Detecting if parsing was successful
In-Reply-To: <m2t9a93847b1004231056p3067d3b2yb57eb1cc2e00d766@mail.gmail.com>
References: <m2t9a93847b1004231056p3067d3b2yb57eb1cc2e00d766@mail.gmail.com>
Message-ID: <4BD20126.7080005@oracle.com>

Hi Kunal,

There's a getNumberOfSyntaxErrors() method available on the parser 
object. If there were any errors this will return a number greater than 
zero (though I don't believe it includes lexer errors, you have to check 
separately for them). You can test this when the parsing finishes.

To detect at the end of individual rules, you can test the state.failed 
field. But just looking at the generated code, I don't think testing it 
in the @after will work, because a match failure will result in an early 
return, so the @after won't get executed. I don't know if there's a way 
to tell Antlr to put your code in the finally block to guarantee it 
always gets executed (and if so, you'd probably want to check 
state.backtracking to see if this is a real failure or a failure during 
backtracking). Otherwise, I think you'd need to check in an action in 
the calling rule (but then that action won't be executed until the 
calling rule succeeds). I'm not sure if there's a way to make this work.

Turning off recovery is a separate issue. I don't know if there's any 
other way than overriding the recover method and possibly some related 
methods in BaseRecognizer.

Ron


Kunal Sawlani wrote:
> Hi,
> I am a new to ANTLR and have been trying to detect if the parsing was
> successful or not. As of now, I was using the @after block, which gets
> executed
> only if the parsing was successful. But this block gets executed, even for
> incorrect inputs in the language. I think I am missing something, which I
> must do
> to deactivate the error recovery mechanism, to avoid the after block from
> being executed. Can anyone please guide me to some material on this issue.
>
> Any help would be greatly appreciated.
> Thanks
>   

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From rmann at latencyzero.com  Fri Apr 23 19:25:01 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Fri, 23 Apr 2010 19:25:01 -0700
Subject: [antlr-interest] Parsing floats and unary minus
Message-ID: <29876C32-F11D-4F20-8C8E-F48DC10EDB6E@latencyzero.com>

I'm trying to write a simple time interval expression parser. I want to be able to write expressions like this:

	-15/2:03:45.3 + +02:43

where

	-	15	/	2	:	03	:	45.3
	negate	days		hours		minutes		seconds

I've appended my grammar below. It was working pretty well until I tried to introduce the floating-point literals in the seconds position. I tried changing s=int to s=float. What I really want is for it to be either a float or an int. But I don't want floats anywhere else.

"s=float" interprets in ANTLRWorks to "<epsilon>", and the grammar check gets some errors for "TimeInterval.g:11:4: The following alternatives can never be matched: 2" (the first line of the interval production).

I've spent an half-hour Googling, and while I find some discussion of unary minus, it's not clear to me what I need to do make it work in my situation. I also don't know what the epsilon stuff is all about.

Any feedback would be much appreciated. Thanks!

-- 
Rick




grammar TimeInterval;

intervalExpr returns [float val]
	:	i=interval { $val = $i.val; }
	(	'+' i=interval { $val += $i.val; }
	|	'-' i=interval { $val -= $i.val; }
	)*
	;
	
interval returns [float val]
	:	( '+'? i=posInterval { $val = $i.val; }
		| '-' i=posInterval { $val = -$i.val; }
		)
		;
		
posInterval returns [float val]
	:	(d=int '/')? (h=int ':')? (m=int ':')? s=int { $val = d * 24.0 * 3600.0 + h * 3600.0 + m * 60.0 + s; }
	;
	
int returns [float val]
	:	INT { $val = Integer.parseInt($INT.text); }
	;

float returns [float val]
	:	{ $val = Float.parseFloat($FLOAT.text); }
	;
	
INT :	'0'..'9'+
    ;

FLOAT
    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    |   '.' ('0'..'9')+ EXPONENT?
    |   ('0'..'9')+ EXPONENT
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;

fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;



From rmann at latencyzero.com  Fri Apr 23 20:06:39 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Fri, 23 Apr 2010 20:06:39 -0700
Subject: [antlr-interest] Dumb question: combining all three grammars?
Message-ID: <1F1A1A5E-EE79-4E9E-9C2F-5F45A9C45267@latencyzero.com>

Can I write a single grammar file that contains all three grammars (lexer, parser, tree)? The ANTLR book says,

	"Let?s build your first tree grammar in a separate file, which we?ll call Eval.g."

which I can interpret to imply "a later tree grammar will be built in the same file".

But, looking around, I see no way to do this.

TIA,
-- 
Rick


From bkiers at gmail.com  Sat Apr 24 01:34:37 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 24 Apr 2010 10:34:37 +0200
Subject: [antlr-interest] Parsing floats and unary minus
In-Reply-To: <29876C32-F11D-4F20-8C8E-F48DC10EDB6E@latencyzero.com>
References: <29876C32-F11D-4F20-8C8E-F48DC10EDB6E@latencyzero.com>
Message-ID: <k2waf443a971004240134u67c43504x7735ca63fdaae399@mail.gmail.com>

On Sat, Apr 24, 2010 at 4:25 AM, Rick Mann <rmann at latencyzero.com> wrote:

> float returns [float val]
>        :       { $val = Float.parseFloat($FLOAT.text); }
>        ;
>

Note that you never use your 'float' rule.


On Sat, Apr 24, 2010 at 4:25 AM, Rick Mann <rmann at latencyzero.com> wrote:

> INT :   '0'..'9'+
>    ;
>
> FLOAT
>    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
>    |   '.' ('0'..'9')+ EXPONENT?
>    |   ('0'..'9')+ EXPONENT
>    ;
>

Try placing FLOAT before INT in your grammar.

Regards,

Bart.

From rmann at latencyzero.com  Sat Apr 24 04:05:12 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Sat, 24 Apr 2010 04:05:12 -0700
Subject: [antlr-interest] Parsing floats and unary minus
In-Reply-To: <m2haf443a971004240134ta2608c18w126688c34a711fa8@mail.gmail.com>
References: <29876C32-F11D-4F20-8C8E-F48DC10EDB6E@latencyzero.com>
	<m2haf443a971004240134ta2608c18w126688c34a711fa8@mail.gmail.com>
Message-ID: <329FFDCC-78C6-4D74-A96A-51B9B829EC0F@latencyzero.com>


On Apr 24, 2010, at 01:34:08, Bart Kiers wrote:

> On Sat, Apr 24, 2010 at 4:25 AM, Rick Mann <rmann at latencyzero.com> wrote:
> float returns [float val]
>        :       { $val = Float.parseFloat($FLOAT.text); }
>        ;
> 
> Note that you never use your 'float' rule. 

Yeah, I go back and forth, trying to make it work.

> INT :   '0'..'9'+
>    ;
> 
> FLOAT
>    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
>    |   '.' ('0'..'9')+ EXPONENT?
>    |   ('0'..'9')+ EXPONENT
>    ;
> 
> Try placing FLOAT before INT in your grammar.

That's straight from the ANTLRWorks grammar creation wizard. Is it incorrect?

-- 
Rick



From bkiers at gmail.com  Sat Apr 24 04:38:39 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Sat, 24 Apr 2010 13:38:39 +0200
Subject: [antlr-interest] Parsing floats and unary minus
In-Reply-To: <329FFDCC-78C6-4D74-A96A-51B9B829EC0F@latencyzero.com>
References: <29876C32-F11D-4F20-8C8E-F48DC10EDB6E@latencyzero.com>
	<m2haf443a971004240134ta2608c18w126688c34a711fa8@mail.gmail.com>
	<329FFDCC-78C6-4D74-A96A-51B9B829EC0F@latencyzero.com>
Message-ID: <q2maf443a971004240438g1b801a99v3d22e74802dcdb4e@mail.gmail.com>

On Sat, Apr 24, 2010 at 1:05 PM, Rick Mann <rmann at latencyzero.com> wrote:

>
> On Apr 24, 2010, at 01:34:08, Bart Kiers wrote:
>
> > On Sat, Apr 24, 2010 at 4:25 AM, Rick Mann <rmann at latencyzero.com>
> wrote:
> > float returns [float val]
> >        :       { $val = Float.parseFloat($FLOAT.text); }
> >        ;
> >
> > Note that you never use your 'float' rule.
>
> Yeah, I go back and forth, trying to make it work.
>

Okay, but you showed a grammar where you did not use your float-rule, but
mentioned you had problems with that rule. Could you post the grammar you're
actually having problems with?


>
> > INT :   '0'..'9'+
> >    ;
> >
> > FLOAT
> >    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
> >    |   '.' ('0'..'9')+ EXPONENT?
> >    |   ('0'..'9')+ EXPONENT
> >    ;
> >
> > Try placing FLOAT before INT in your grammar.
>
> That's straight from the ANTLRWorks grammar creation wizard. Is it
> incorrect?
>
> --
> Rick
>


If you haven't changed anything about the order, then itmust be correct.

Bart.

From rmann at latencyzero.com  Sat Apr 24 06:06:47 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Sat, 24 Apr 2010 06:06:47 -0700
Subject: [antlr-interest] Parsing a time expression
Message-ID: <D76AB042-7283-4B45-A1AC-2C49E9497358@latencyzero.com>

I posted a couple related questions earlier, but now I'm down to a more fundamental question.

I'm trying to use a complete lexer/parser/tree parser. I'd like to support two types of expressions representing time intervals. In the end, they evaluate to a value representing seconds. The two types look like this:

1)	15/
2)	15/ 23
3)	15/ 23:12
4)	15/ 23:12:07
5)	15/ 23:12:07.2

and

6)	7.2
7)	12:07.2
8)	23:12:07.2

The main difference is that if the expression starts with INT '/', then it's built up left-to-right with each value representing days, hours, minutes, and seconds, respectively. If there is no '/' in the expression, it's built up right-to-left, with seconds in the right-most position.

I'm having trouble conceptualizing what the grammar really should look like, and how the tree parser would look. When I try to write stuff out in the form of INT '/'! (INT (':'! INT)?)?, I get lots of "matches more than one alternative" warnings.

OTOH, one can think of these as arithmetic expressions. Considering example 5 above, it would be:

	  24 * 3600 * 15
	+      3600 * 23
	+        60 * 12
	+              7.2
        ------------------
                 1379527.2

But I can't figure out how to build the tree that accounts for the position of each element to allow all the alternatives 1 - 5.

Thanks for any guidance.

-- 
Rick


From cliff.s.hudson at gmail.com  Sat Apr 24 09:11:04 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Sat, 24 Apr 2010 09:11:04 -0700
Subject: [antlr-interest] Parsing a time expression
In-Reply-To: <D76AB042-7283-4B45-A1AC-2C49E9497358@latencyzero.com>
References: <D76AB042-7283-4B45-A1AC-2C49E9497358@latencyzero.com>
Message-ID: <4bd3181c.9413f30a.6d81.ffffba03@mx.google.com>

So you basically have two types of expressions, those that start with INT
'/' and those that don't.  So this would look like:

time_expr
	:	INT '/' time_ltr
	|	time_rtl
	;

time_rtl
	: 	(INT ':' (INT ':')?)? INT '.' INT;

time_ltr
	: 	INT (':' INT (':' INT ('.' INT)?)?)?
	;
	
Is this what you tried and it failed?


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Rick Mann
Sent: Saturday, April 24, 2010 6:07 AM
To: antlr-interest Interest
Subject: [antlr-interest] Parsing a time expression

I posted a couple related questions earlier, but now I'm down to a more
fundamental question.

I'm trying to use a complete lexer/parser/tree parser. I'd like to support
two types of expressions representing time intervals. In the end, they
evaluate to a value representing seconds. The two types look like this:

1)	15/
2)	15/ 23
3)	15/ 23:12
4)	15/ 23:12:07
5)	15/ 23:12:07.2

and

6)	7.2
7)	12:07.2
8)	23:12:07.2

The main difference is that if the expression starts with INT '/', then it's
built up left-to-right with each value representing days, hours, minutes,
and seconds, respectively. If there is no '/' in the expression, it's built
up right-to-left, with seconds in the right-most position.

I'm having trouble conceptualizing what the grammar really should look like,
and how the tree parser would look. When I try to write stuff out in the
form of INT '/'! (INT (':'! INT)?)?, I get lots of "matches more than one
alternative" warnings.

OTOH, one can think of these as arithmetic expressions. Considering example
5 above, it would be:

	  24 * 3600 * 15
	+      3600 * 23
	+        60 * 12
	+              7.2
        ------------------
                 1379527.2

But I can't figure out how to build the tree that accounts for the position
of each element to allow all the alternatives 1 - 5.

Thanks for any guidance.

-- 
Rick


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From rmann at latencyzero.com  Sat Apr 24 13:35:26 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Sat, 24 Apr 2010 13:35:26 -0700
Subject: [antlr-interest] Parsing a time expression
In-Reply-To: <4bd3181c.9413f30a.6d81.ffffba03@mx.google.com>
References: <D76AB042-7283-4B45-A1AC-2C49E9497358@latencyzero.com>
	<4bd3181c.9413f30a.6d81.ffffba03@mx.google.com>
Message-ID: <D36A9764-A32C-4475-BBFD-76D8EA611FEA@latencyzero.com>


On Apr 24, 2010, at 09:11:04, Cliff Hudson wrote:

> So you basically have two types of expressions, those that start with INT
> '/' and those that don't.  So this would look like:
> 
> time_expr
> 	:	INT '/' time_ltr
> 	|	time_rtl
> 	;
> 
> time_rtl
> 	: 	(INT ':' (INT ':')?)? INT '.' INT;
> 
> time_ltr
> 	: 	INT (':' INT (':' INT ('.' INT)?)?)?
> 	;
> 	
> Is this what you tried and it failed?

That seems to work, thank you. Not sure anymore what I had that was failing. I've modified it a bit to make it an AST generator, by putting '!' after the lexical tokens, and changed the INT '.' INT parts to be (INT | FLOAT), and it still parses in ANTLRWorks.

Now I'm trying to write the tree parser for it, and I've got this at one point, but I'd like to avoid writing $val = Integer.parseInt($INT.text) over and over. Is there any way to do that?

tree grammar TimeEval;

options
{
	tokenVocab=TimeInterval;
	ASTLabelType=CommonTree;
}

interval returns [float val]
	: INT intLTR;

intLTR returns [float val]
	:INT	{ $val += 24.0 * 3600.0f * Integer.parseInt($INT.text); }
	(INT	{ $val +=        3600.0f * Integer.parseInt($INT.text); }
	(INT	{ $val +=          60.0f * Integer.parseInt($INT.text); }
	(INT	{ $val +=                  Integer.parseInt($INT.text); }
	|FLOAT	{ $val +=                  Float.parseFloat($FLOAT.text); }
	)?)?)?
	;

TIA,
Rick

> 
> 
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Rick Mann
> Sent: Saturday, April 24, 2010 6:07 AM
> To: antlr-interest Interest
> Subject: [antlr-interest] Parsing a time expression
> 
> I posted a couple related questions earlier, but now I'm down to a more
> fundamental question.
> 
> I'm trying to use a complete lexer/parser/tree parser. I'd like to support
> two types of expressions representing time intervals. In the end, they
> evaluate to a value representing seconds. The two types look like this:
> 
> 1)	15/
> 2)	15/ 23
> 3)	15/ 23:12
> 4)	15/ 23:12:07
> 5)	15/ 23:12:07.2
> 
> and
> 
> 6)	7.2
> 7)	12:07.2
> 8)	23:12:07.2
> 
> The main difference is that if the expression starts with INT '/', then it's
> built up left-to-right with each value representing days, hours, minutes,
> and seconds, respectively. If there is no '/' in the expression, it's built
> up right-to-left, with seconds in the right-most position.
> 
> I'm having trouble conceptualizing what the grammar really should look like,
> and how the tree parser would look. When I try to write stuff out in the
> form of INT '/'! (INT (':'! INT)?)?, I get lots of "matches more than one
> alternative" warnings.
> 
> OTOH, one can think of these as arithmetic expressions. Considering example
> 5 above, it would be:
> 
> 	  24 * 3600 * 15
> 	+      3600 * 23
> 	+        60 * 12
> 	+              7.2
>        ------------------
>                 1379527.2
> 
> But I can't figure out how to build the tree that accounts for the position
> of each element to allow all the alternatives 1 - 5.
> 
> Thanks for any guidance.
> 
> -- 
> Rick
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 


From rmann at latencyzero.com  Sat Apr 24 20:37:28 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Sat, 24 Apr 2010 20:37:28 -0700
Subject: [antlr-interest] Parsing a time expression
In-Reply-To: <D36A9764-A32C-4475-BBFD-76D8EA611FEA@latencyzero.com>
References: <D76AB042-7283-4B45-A1AC-2C49E9497358@latencyzero.com>
	<4bd3181c.9413f30a.6d81.ffffba03@mx.google.com>
	<D36A9764-A32C-4475-BBFD-76D8EA611FEA@latencyzero.com>
Message-ID: <21C83D3F-C742-4888-97CC-689F3D4D556E@latencyzero.com>

So, starting from a basic grammar that parses the two kinds of time expression, I tried to add the ability to add two intervals. I attempted to follow the example in the book for the expr language. Here's my grammar (the lexer/parser is concatenated below the tree grammar):

	http://pastie.org/private/k9holwmls7emhfpgzo1oxw

If I uncomment line 15, it complains that:

[20:34:25] Checking Grammar TimeEval.g...
[20:34:25] warning(200): TimeEval.g:34:4: Decision can match input such as "INT INT" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input
[20:34:25] warning(200): TimeEval.g:34:3: Decision can match input such as "INT" using multiple alternatives: 1, 2
As a result, alternative(s) 2 were disabled for that input


With line 15 commented out, it works great, but I need to understand why it becomes ambiguous with the sum operation in there, and how to fix it, so that I can add some other operations.

I feel like I need to do something to let the tree walker know when it hits an RTL expression, but I wasn't able to just insert a token into the stream as I have wanted to do more than once.

Thanks much!
-- 
Rick


From ronburk at gmail.com  Sat Apr 24 22:58:35 2010
From: ronburk at gmail.com (Ron Burk)
Date: Sat, 24 Apr 2010 22:58:35 -0700
Subject: [antlr-interest] Parsing a time expression
In-Reply-To: <21C83D3F-C742-4888-97CC-689F3D4D556E@latencyzero.com>
References: <D76AB042-7283-4B45-A1AC-2C49E9497358@latencyzero.com>
	<4bd3181c.9413f30a.6d81.ffffba03@mx.google.com>
	<D36A9764-A32C-4475-BBFD-76D8EA611FEA@latencyzero.com>
	<21C83D3F-C742-4888-97CC-689F3D4D556E@latencyzero.com>
Message-ID: <m2s30dde8ce1004242258p14923960m68be63040dc4d9cd@mail.gmail.com>

I'm wondering if you meant to disallow spaces in your
"interval"s. If not, then if you allow (as it appears you intend):

 + 15/  7

Should that "7" be interpreted as the hours part of the
interval that starts with "15/" (meaning there's an error
because the user forgot to supply a second interval operand
to the '+') or should the "7" be interpreted as a second
interval (7 seconds)?

The grammar appears to be ambiguous.

From rmann at latencyzero.com  Sat Apr 24 23:54:30 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Sat, 24 Apr 2010 23:54:30 -0700
Subject: [antlr-interest] Parsing a time expression
In-Reply-To: <m2s30dde8ce1004242258p14923960m68be63040dc4d9cd@mail.gmail.com>
References: <D76AB042-7283-4B45-A1AC-2C49E9497358@latencyzero.com>
	<4bd3181c.9413f30a.6d81.ffffba03@mx.google.com>
	<D36A9764-A32C-4475-BBFD-76D8EA611FEA@latencyzero.com>
	<21C83D3F-C742-4888-97CC-689F3D4D556E@latencyzero.com>
	<m2s30dde8ce1004242258p14923960m68be63040dc4d9cd@mail.gmail.com>
Message-ID: <8DDE8716-F850-436D-8B20-B0BCAC31B70E@latencyzero.com>


On Apr 24, 2010, at 22:58:35, Ron Burk wrote:

> I'm wondering if you meant to disallow spaces in your
> "interval"s. If not, then if you allow (as it appears you intend):
> 
> + 15/  7
> 
> Should that "7" be interpreted as the hours part of the
> interval that starts with "15/" (meaning there's an error
> because the user forgot to supply a second interval operand
> to the '+') or should the "7" be interpreted as a second
> interval (7 seconds)?
> 
> The grammar appears to be ambiguous.

Thanks for the response, and you bring up another question I had: how do I disallow spaces in certain places?

In fact, I do wish to allow whitespace around the slash, but not around the colons. This is because sometimes the expression is copied from a source that puts a space between the slash and the leading hour.

My grammar rewrites something of the form a/b:c:d to (/ a b c d). This much appears to be working fine (output from my test rig):

> 15/ + 1/ + 3.1
The tree:
(+ (+ (/ 15) (/ 1)) 3.1)

But this illustrates the problem, I think. The second sum has three children, an interval, and two INTs, which should form an intRTL.

> 1/ 2:3:4.5 + 6:7 + 8.9
The tree:
(+ (+ (/ 1 2 3 4.5) 6 7) 8.9)

You can see the rewrite rules on line 60-61:

	http://pastie.org/private/k9holwmls7emhfpgzo1oxw

I wanted to rewrite the rule on line 62 to insert a token to give the tree walker a clue as to what was coming next, but I don't know how to insert a fake token (or even if it's possible).

BTW, the error points to one line, but ANTLRWorks colors the intRTL rule red when I add that sum rule on line 15. Is that a clue?

-- 
Rick


From markaren1 at xtra.co.nz  Mon Apr 26 00:52:41 2010
From: markaren1 at xtra.co.nz (Mark Atherton)
Date: Mon, 26 Apr 2010 19:52:41 +1200
Subject: [antlr-interest] Newbie question,
	3.2 Using Syntax to Drive Action Execution
Message-ID: <20100426075238.XYHP710.mta03.xtra.co.nz@mainmachine.xtra.co.nz>

Hi All,

I am making my way through "The definitive ANTLR reference" and have 
managed to get stuck on page 55. I have got through "Testing the 
Recognizer" without any problems, but adding the changes through page 
55 results in System.out.println not being recognized. Code is at 
http://www.idesignz.org/Antlr/expr.g I have been around the houses 
several times now and need a second pair of eyes to take a look. What 
am I doing that's daft ?

Thanks, Mark


From gwlist at grahamwideman.com  Mon Apr 26 01:06:01 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Mon, 26 Apr 2010 01:06:01 -0700
Subject: [antlr-interest] Newbie question,
 3.2 Using Syntax to  Drive Action Execution
In-Reply-To: <20100426075238.XYHP710.mta03.xtra.co.nz@mainmachine.xtra.c o.nz>
References: <20100426075238.XYHP710.mta03.xtra.co.nz@mainmachine.xtra.co.nz>
Message-ID: <20100426080541.ZOVA1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>


From Gordon.Tyler at quest.com  Mon Apr 26 06:49:49 2010
From: Gordon.Tyler at quest.com (Gordon Tyler)
Date: Mon, 26 Apr 2010 06:49:49 -0700
Subject: [antlr-interest] Newbie question,
 3.2 Using Syntax to Drive Action Execution
In-Reply-To: <20100426075238.XYHP710.mta03.xtra.co.nz@mainmachine.xtra.co.nz>
References: <20100426075238.XYHP710.mta03.xtra.co.nz@mainmachine.xtra.co.nz>
Message-ID: <1FE9A296676737419A8912A6FD22AE1D0279B72EEF@alvxmbw04.prod.quest.corp>

Your first System.out.println is followed by a curly brace, not a left parenthesis.

-----Original Message-----
From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Mark Atherton
Sent: April 26, 2010 3:53 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Newbie question, 3.2 Using Syntax to Drive Action Execution

Hi All,

I am making my way through "The definitive ANTLR reference" and have 
managed to get stuck on page 55. I have got through "Testing the 
Recognizer" without any problems, but adding the changes through page 
55 results in System.out.println not being recognized. Code is at 
http://www.idesignz.org/Antlr/expr.g I have been around the houses 
several times now and need a second pair of eyes to take a look. What 
am I doing that's daft ?

Thanks, Mark


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From f.massanes at gmail.com  Mon Apr 26 10:03:30 2010
From: f.massanes at gmail.com (=?ISO-8859-1?Q?Francesc_d=27Assis_Massan=E9s?=)
Date: Mon, 26 Apr 2010 12:03:30 -0500
Subject: [antlr-interest] Not processing a newline always
Message-ID: <p2wea0a30481004261003mf35832efo72af3f5a36c647a9@mail.gmail.com>

Hello,

I am trying to program a "complex" math program and to process the user
input I have been working in a grammar in antlr.

At this point it works almost as I want it to work but I am missing
something: I do not want to process newlines always.

Let me explain it better: when an expression is finished ( 4+5 ) you can
find a semi-colon or a newline, in any case you just finished this
expression.
But what happens if the expression is incomplete: ( 4+5+ ) then if you find
a semi-colon you have an error (you should not be able to parse this input)
but if you find a newline you should look the next line to follow
processing.

What I want is a rule like: Newline is HIDDEN if some other token is need to
finish the actual rule.

I do not know if it is even possible to do this with antlr or I shall go to
modify the output code.

Thanks,
Francesc Massan?s

From loic.habermacher at insa-lyon.fr  Mon Apr 26 10:58:42 2010
From: loic.habermacher at insa-lyon.fr (=?UTF-8?Q?Lo=C3=AFc_Habermacher?=)
Date: Mon, 26 Apr 2010 19:58:42 +0200
Subject: [antlr-interest] Generate an AST with virtual nodes and conditions
Message-ID: <l2pcebf2d7c1004261058oac3008b3i63a427b014bc76d9@mail.gmail.com>

Hello everybody,

I am new to ANTLR but as I have to do a quite big project with it, I have
already read a lot of docs (includig the definitive guide) and played with
my first grammars.

I need
- to parse an input like this one : table_name(elem1 blue opt, elem2 blue ,
elem3 red, elem4 red opt);

- to produce an AST like this one : (table_name (WITH_OPT (elem1 blue)
(elem4 red)) (WITHOUT_OPT (elem2 blue) (elem3 red)))
// I want to regroup under the same branch all the elements with opt at the
end and on another branch the elements without opt at the end

- to process the AST

I am stucked with the rewrite rule
table_def
 :
 table_name LEFT_PAREN elem_list RIGHT_PAREN SEMICOLON
 -> ^(table_name ^(WITH_OPT elem_list) ^(WITHOUT_OPT elem_list));

How can I communicate with the other rules to have the right content in each
list ?


Thanks
Lo?c

*Code*
*
*
*FirstGram.g (to parse and generate the AST)*
grammar FirstGram;

options {
  language = Java;
  output       = AST;
  ASTLabelType = CommonTree;
}
tokens{
WITH_OPT;
WITHOUT_OPT;
}
@header {
  package toy.draft;
}
@lexer::header {
  package toy.draft;
}

table_def
 :
 table_name LEFT_PAREN elem_list RIGHT_PAREN SEMICOLON
 -> ^(table_name ^(WITH_OPT elem_list) ^(WITHOUT_OPT elem_list));

elem_list:
elem (COMMA elem)* -> elem+;

elem :
elem_name elem_color option?
-> ^(elem_name elem_color);

table_name :ID ;
elem_name : ID ;
elem_color : ('blue'|'red');
option : 'opt'  ;

/*------------------------------------------------------------------
 * LEXER RULES
 *------------------------------------------------------------------*/

LEFT_PAREN : '(';
RIGHT_PAREN : ')';
COMMA : ',';
SEMICOLON : ';';
DOT :  '.';
NUMBER  : (DIGIT)+;
ID  : (('a'..'z'|'A'..'Z' | '_') ((DIGIT)*))+ ;
NEWLINE:'\r'? '\n' { $channel = HIDDEN; };
WS : ( '\t' | ' ' | '\r' | '\n' | '\u000C' )+   { $channel = HIDDEN; } ;
fragment DIGIT :   '0'..'9' ;

*Walker.g (to process the AST)*
tree grammar Walker;

options {
  language = Java;
  tokenVocab = FirstGram;
  ASTLabelType = CommonTree;
  output = template;
  rewrite = true;
}
@header {
  package toy.draft;
}

table_def
  :^(table_name list_with_opt list_without_opt)
  ;

list_with_opt
  : ^(WITH_OPT elem_list)
  ;

 list_without_opt
  : ^(WITHOUT_OPT elem_list)
  ;

table_name :ID ;
elem_list: elem+ ;
elem : elem_name;
elem_name : ID ;

From davidblubaugh2000 at yahoo.com  Mon Apr 26 13:02:13 2010
From: davidblubaugh2000 at yahoo.com (David Blubaugh)
Date: Mon, 26 Apr 2010 13:02:13 -0700 (PDT)
Subject: [antlr-interest] VHDL Target
Message-ID: <307176.49719.qm@web113308.mail.gq1.yahoo.com>

To All,
?
Has anyone developed a VHDL target within ANTLR??? Has any developed a translation entity with ANTLR by converting MATLAB or OCTAVE script to VHDL supporting coarse-grain parallelism and floating-point support ??? 
?
Thanks,
?
David Blubaugh
?
?
?


      

From bkiers at gmail.com  Mon Apr 26 13:06:52 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Mon, 26 Apr 2010 22:06:52 +0200
Subject: [antlr-interest] VHDL Target
In-Reply-To: <307176.49719.qm@web113308.mail.gq1.yahoo.com>
References: <307176.49719.qm@web113308.mail.gq1.yahoo.com>
Message-ID: <x2zaf443a971004261306ya14bab8bh52fde6f718f99e4e@mail.gmail.com>

On Mon, Apr 26, 2010 at 10:02 PM, David Blubaugh <
davidblubaugh2000 at yahoo.com> wrote:

> To All,
>
> Has anyone developed a VHDL target within ANTLR??


Hi, do you really mean a VHDL-target (being able to generate VHDL
sourcefiles from a given grammar?), or did you mean a VHDL-grammar?

Regards,

Bart.

From kunalsawlani at gmail.com  Mon Apr 26 13:33:19 2010
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Mon, 26 Apr 2010 16:33:19 -0400
Subject: [antlr-interest] ANTLR - Detecting if parsing was successful
In-Reply-To: <4BD20126.7080005@oracle.com>
References: <m2t9a93847b1004231056p3067d3b2yb57eb1cc2e00d766@mail.gmail.com>
	<4BD20126.7080005@oracle.com>
Message-ID: <z2h9a93847b1004261333q89ebe608qa6ef9e1792678864@mail.gmail.com>

Hi Ron,
Thanks for the reply. It helped me get few of my doubts cleared as to what I
have to do. It turns out, that the errors that I am trying to catch are the
lexer errors, and not the parser errors. I will look into that, and once I
have the solution I would post back here. If anyone has already dealt with
this issue, any help would be greatly appreciated.
Thanks


On Fri, Apr 23, 2010 at 4:20 PM, Ron Hunter-Duvar <
ron.hunter-duvar at oracle.com> wrote:

> Hi Kunal,
>
> There's a getNumberOfSyntaxErrors() method available on the parser object.
> If there were any errors this will return a number greater than zero (though
> I don't believe it includes lexer errors, you have to check separately for
> them). You can test this when the parsing finishes.
>
> To detect at the end of individual rules, you can test the state.failed
> field. But just looking at the generated code, I don't think testing it in
> the @after will work, because a match failure will result in an early
> return, so the @after won't get executed. I don't know if there's a way to
> tell Antlr to put your code in the finally block to guarantee it always gets
> executed (and if so, you'd probably want to check state.backtracking to see
> if this is a real failure or a failure during backtracking). Otherwise, I
> think you'd need to check in an action in the calling rule (but then that
> action won't be executed until the calling rule succeeds). I'm not sure if
> there's a way to make this work.
>
> Turning off recovery is a separate issue. I don't know if there's any other
> way than overriding the recover method and possibly some related methods in
> BaseRecognizer.
>
> Ron
>
>
>
> Kunal Sawlani wrote:
>
>> Hi,
>> I am a new to ANTLR and have been trying to detect if the parsing was
>> successful or not. As of now, I was using the @after block, which gets
>> executed
>> only if the parsing was successful. But this block gets executed, even for
>> incorrect inputs in the language. I think I am missing something, which I
>> must do
>> to deactivate the error recovery mechanism, to avoid the after block from
>> being executed. Can anyone please guide me to some material on this issue.
>>
>> Any help would be greatly appreciated.
>> Thanks
>>
>>
>
> --
> Ron Hunter-Duvar | Software Developer V | 403-272-6580
> Oracle Service Engineering
> Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5
>
> All opinions expressed here are mine, and do not necessarily represent
> those of my employer.
>
>


-- 
Kunal Sawlani

From kunalsawlani at gmail.com  Mon Apr 26 13:40:58 2010
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Mon, 26 Apr 2010 16:40:58 -0400
Subject: [antlr-interest] Matching Substring In Lexer
Message-ID: <u2p9a93847b1004261340n7cdde79anda4d10f590d8f543@mail.gmail.com>

Hi All,
I have been trying to solve a problem which I have been having in the lexer,
but with no luck. My example goes as follows.
I have a simple grammar with two tokens.
I want to treat the the string "$ text" as a token TEXTINPUT and everything
else as a token ANYTHING, which matches anything.
The scanning process works fine when you supply it the string "$ TEXT", the
correct token is returned. And if any other character is supplied, the token
ANYTHING is returned.
However, for the string "$1", the scanner complaints that it was looking for
' ', and no viable alternative for 1. What I want it to return is two tokens
ANYTHING for the "$", and another token ANYTHING for "1". I was reading into
the concept of syntactic
predicates to solve this issue, but I am not quiet getting it right. If
anyone could point me in the right direction, it would be great. Also, I
wanted to know if there are any other approaches to solve this issue. I got
the syntactic predicates concept after reading the following article
http://www.jguru.com/faq/view.jsp?EID=459059

<http://www.jguru.com/faq/view.jsp?EID=459059>Any help would be greatly
appreciated!
Thanks

-- 
Kunal Sawlani

From jimi at temporal-wave.com  Mon Apr 26 13:54:54 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Mon, 26 Apr 2010 13:54:54 -0700
Subject: [antlr-interest] Matching Substring In Lexer
In-Reply-To: <u2p9a93847b1004261340n7cdde79anda4d10f590d8f543@mail.gmail.com>
Message-ID: <29ef1268abb69845886c3e1edc1de4cf@temporal-wave.com>

TEXTINPUT : '$'
              (   ('a'..'z'| 'A'..'Z')+
                | { $type = ANYTHING; }
              )
          ;
ANYTHING  : . ;

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Kunal Sawlani
> Sent: Monday, April 26, 2010 1:41 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Matching Substring In Lexer
> 
> Hi All,
> I have been trying to solve a problem which I have been having in the
> lexer,
> but with no luck. My example goes as follows.
> I have a simple grammar with two tokens.
> I want to treat the the string "$ text" as a token TEXTINPUT and
> everything
> else as a token ANYTHING, which matches anything.
> The scanning process works fine when you supply it the string "$ TEXT",
> the
> correct token is returned. And if any other character is supplied, the
> token
> ANYTHING is returned.
> However, for the string "$1", the scanner complaints that it was
> looking for
> ' ', and no viable alternative for 1. What I want it to return is two
> tokens
> ANYTHING for the "$", and another token ANYTHING for "1". I was reading
> into
> the concept of syntactic
> predicates to solve this issue, but I am not quiet getting it right. If
> anyone could point me in the right direction, it would be great. Also,
> I
> wanted to know if there are any other approaches to solve this issue. I
> got
> the syntactic predicates concept after reading the following article
> http://www.jguru.com/faq/view.jsp?EID=459059
> 
> <http://www.jguru.com/faq/view.jsp?EID=459059>Any help would be greatly
> appreciated!
> Thanks
> 
> --
> Kunal Sawlani
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jbb at acm.org  Mon Apr 26 14:02:13 2010
From: jbb at acm.org (John B. Brodie)
Date: Mon, 26 Apr 2010 17:02:13 -0400
Subject: [antlr-interest] Matching Substring In Lexer
In-Reply-To: <u2p9a93847b1004261340n7cdde79anda4d10f590d8f543@mail.gmail.com>
References: <u2p9a93847b1004261340n7cdde79anda4d10f590d8f543@mail.gmail.com>
Message-ID: <1272315733.11349.1.camel@gecko.home.org>

Greetings!

On Mon, 2010-04-26 at 16:40 -0400, Kunal Sawlani wrote:
> Hi All,
> I have been trying to solve a problem which I have been having in the lexer,
> but with no luck. My example goes as follows.
> I have a simple grammar with two tokens.
> I want to treat the the string "$ text" as a token TEXTINPUT and everything
> else as a token ANYTHING, which matches anything.
> The scanning process works fine when you supply it the string "$ TEXT", the
> correct token is returned. And if any other character is supplied, the token
> ANYTHING is returned.
> However, for the string "$1", the scanner complaints that it was looking for
> ' ', and no viable alternative for 1. What I want it to return is two tokens
> ANYTHING for the "$", and another token ANYTHING for "1". I was reading into
> the concept of syntactic
> predicates to solve this issue, but I am not quiet getting it right. If
> anyone could point me in the right direction, it would be great. Also, I
> wanted to know if there are any other approaches to solve this issue. I got
> the syntactic predicates concept after reading the following article
> http://www.jguru.com/faq/view.jsp?EID=459059
> 
> <http://www.jguru.com/faq/view.jsp?EID=459059>Any help would be greatly
> appreciated!
> Thanks
> 

see attached....



-------------- next part --------------
grammar Trial;

tokens { TEXTINPUT; }

@members {
   private static final String [] x = new String[]{
      "xyz",
      "$ TEXT",
      "$xyz",
      "$ Txyz",
      "xyz$ TEXT$xyz$ Txyz"
   };

   public static void main(String [] args) {
      for( int i = 0; i < x.length; ++i ) {
         try {
            System.out.println("about to lex:`"+x[i]+"`");
            LexerOnlyLexer lexer =
               new LexerOnlyLexer(new ANTLRStringStream(x[i]));

            int j = 1;
            while( true ) {
               Token token = lexer.nextToken();
               if( token.getType() == LexerOnlyLexer.EOF ) break;
               System.out.format("\%d: type = \%s, text = `\%s`\%n",
                                 j,
                                 tokenNames[token.getType()],
                                 token.getText());
               j++;
            }
         } catch(Exception e) {
            e.printStackTrace();
         }
      }
   }
}

run_it : .+ EOF;

ANYTHING :
      '$' ( (' TEXT')=>' TEXT' { $type=TEXTINPUT; } )?
   | .
   ;


From kunalsawlani at gmail.com  Mon Apr 26 16:02:42 2010
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Mon, 26 Apr 2010 19:02:42 -0400
Subject: [antlr-interest] Matching Substring In Lexer
In-Reply-To: <1272315733.11349.1.camel@gecko.home.org>
References: <u2p9a93847b1004261340n7cdde79anda4d10f590d8f543@mail.gmail.com>
	<1272315733.11349.1.camel@gecko.home.org>
Message-ID: <r2g9a93847b1004261602hac29c76bmc401c771d2a4e277@mail.gmail.com>

Hi,
Thanks to both of you, I have something which works now. However, I am
running into a slight issue, where the parser complaints that ANYTHING is
not defined, in case of the grammar Jim suggested, and for John's grammar,
it complaints that TEXTNODE is not defined. I tried defining these using
Fragment, but to no avail. Also, I am using a combined grammar, and will
splitting it into a lexer and parser be necessary?

Thanks for the help. Really appreciate it.

On Mon, Apr 26, 2010 at 5:02 PM, John B. Brodie <jbb at acm.org> wrote:

> Greetings!
>
> On Mon, 2010-04-26 at 16:40 -0400, Kunal Sawlani wrote:
> > Hi All,
> > I have been trying to solve a problem which I have been having in the
> lexer,
> > but with no luck. My example goes as follows.
> > I have a simple grammar with two tokens.
> > I want to treat the the string "$ text" as a token TEXTINPUT and
> everything
> > else as a token ANYTHING, which matches anything.
> > The scanning process works fine when you supply it the string "$ TEXT",
> the
> > correct token is returned. And if any other character is supplied, the
> token
> > ANYTHING is returned.
> > However, for the string "$1", the scanner complaints that it was looking
> for
> > ' ', and no viable alternative for 1. What I want it to return is two
> tokens
> > ANYTHING for the "$", and another token ANYTHING for "1". I was reading
> into
> > the concept of syntactic
> > predicates to solve this issue, but I am not quiet getting it right. If
> > anyone could point me in the right direction, it would be great. Also, I
> > wanted to know if there are any other approaches to solve this issue. I
> got
> > the syntactic predicates concept after reading the following article
> > http://www.jguru.com/faq/view.jsp?EID=459059
> >
> > <http://www.jguru.com/faq/view.jsp?EID=459059>Any help would be greatly
> > appreciated!
> > Thanks
> >
>
> see attached....
>
>
>
>


-- 
Kunal Sawlani

From jbb at acm.org  Mon Apr 26 16:20:55 2010
From: jbb at acm.org (John B. Brodie)
Date: Mon, 26 Apr 2010 19:20:55 -0400
Subject: [antlr-interest] Matching Substring In Lexer
In-Reply-To: <r2g9a93847b1004261602hac29c76bmc401c771d2a4e277@mail.gmail.com>
References: <u2p9a93847b1004261340n7cdde79anda4d10f590d8f543@mail.gmail.com>
	<1272315733.11349.1.camel@gecko.home.org>
	<r2g9a93847b1004261602hac29c76bmc401c771d2a4e277@mail.gmail.com>
Message-ID: <1272324055.12967.8.camel@gecko.home.org>

Greetings!

On Mon, 2010-04-26 at 19:02 -0400, Kunal Sawlani wrote:
> Hi, 
> Thanks to both of you, I have something which works now. However, I am
> running into a slight issue, where the parser complaints that ANYTHING
> is not defined, in case of the grammar Jim suggested, and for John's
> grammar, it complaints that TEXTNODE is not defined. I tried defining
> these using Fragment, but to no avail. Also, I am using a combined
> grammar, and will splitting it into a lexer and parser be necessary?


In the complete and tested example that I posted there are 2 tokens:
ANYTHING and TEXTINPUT. TEXTINPUT is defined in a tokens {} option block
near the top of the file.

As an aside, why did you expect a TEXTNODE token?

In any case, you should be able to run my example through the
org.antlr.Tool, compile the resultant .java files, execute the parser,
and then observe the results.





From kunalsawlani at gmail.com  Mon Apr 26 19:45:36 2010
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Mon, 26 Apr 2010 22:45:36 -0400
Subject: [antlr-interest] Matching Substring In Lexer
In-Reply-To: <1272324055.12967.8.camel@gecko.home.org>
References: <u2p9a93847b1004261340n7cdde79anda4d10f590d8f543@mail.gmail.com>
	<1272315733.11349.1.camel@gecko.home.org>
	<r2g9a93847b1004261602hac29c76bmc401c771d2a4e277@mail.gmail.com>
	<1272324055.12967.8.camel@gecko.home.org>
Message-ID: <i2u9a93847b1004261945ge7a1ab2bsd89a220ae86c968@mail.gmail.com>

Hi John,
I tried out your example and it worked just as expected.
The problem I was having was with the JavaScript target. For some reason,
the statement $type = TEXTNODE, kept reporting the error, TEXTNODE is not
defined. I changed this to use the actual type value(2 in this case) and it
worked!.
I am now confused as to why this is. I know the JavaScript target is new to
ANTLR, but this is something which I guess should be standard across all
platforms. I am not sure if there is any other way to set the type of the
token in the lexer.
Thanks

On Mon, Apr 26, 2010 at 7:20 PM, John B. Brodie <jbb at acm.org> wrote:

> Greetings!
>
> On Mon, 2010-04-26 at 19:02 -0400, Kunal Sawlani wrote:
> > Hi,
> > Thanks to both of you, I have something which works now. However, I am
> > running into a slight issue, where the parser complaints that ANYTHING
> > is not defined, in case of the grammar Jim suggested, and for John's
> > grammar, it complaints that TEXTNODE is not defined. I tried defining
> > these using Fragment, but to no avail. Also, I am using a combined
> > grammar, and will splitting it into a lexer and parser be necessary?
>
>
> In the complete and tested example that I posted there are 2 tokens:
> ANYTHING and TEXTINPUT. TEXTINPUT is defined in a tokens {} option block
> near the top of the file.
>
> As an aside, why did you expect a TEXTNODE token?
>
> In any case, you should be able to run my example through the
> org.antlr.Tool, compile the resultant .java files, execute the parser,
> and then observe the results.
>
>
>
>
>


-- 
Kunal Sawlani

From bkiers at gmail.com  Mon Apr 26 22:50:16 2010
From: bkiers at gmail.com (Bart Kiers)
Date: Tue, 27 Apr 2010 07:50:16 +0200
Subject: [antlr-interest] VHDL Target
In-Reply-To: <411563.68557.qm@web113317.mail.gq1.yahoo.com>
References: <x2zaf443a971004261306ya14bab8bh52fde6f718f99e4e@mail.gmail.com>
	<411563.68557.qm@web113317.mail.gq1.yahoo.com>
Message-ID: <r2naf443a971004262250ie38d4971u14f80f840bdee7ad@mail.gmail.com>

>
>
>
>  On Mon, Apr 26, 2010 at 10:02 PM, David Blubaugh <
> davidblubaugh2000 at yahoo.com<http://us.mc1133.mail.yahoo.com/mc/compose?to=davidblubaugh2000 at yahoo.com>
> > wrote:
>
>> To All,
>>
>> Has anyone developed a VHDL target within ANTLR??
>
>
> Hi, do you really mean a VHDL-target (being able to generate VHDL
> sourcefiles from a given grammar?), or did you mean a VHDL-grammar?
>
> Regards,
>
> Bart.
>
>
> >
> Both
>
> Thank You
>
> David


The examples section has a couple of VHDL grammars:
http://www.antlr.org/grammar/list

I'm not familiar with the language itself, but I doubt there is a VHDL
target around (if even possible since it is some sort of of
hardware-modeling language). Why do you need a VHDL-target? What problem are
you trying to solve? Some more info cuold clarify things.

Bart.

From ketancmaheshwari at gmail.com  Tue Apr 27 02:45:15 2010
From: ketancmaheshwari at gmail.com (Ketan Maheshwari)
Date: Tue, 27 Apr 2010 11:45:15 +0200
Subject: [antlr-interest] Syntax Highlighter
Message-ID: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>

Hello Friends

I have a DSL for which I intend to create a syntax highlighter for editors
like vim, gedit and netbeans.

Has anyone tried this before?

Can ANTLR help in some way in this direction?


Many thanks for any other directions.

Ketan

From SVANLAER at its.jnj.com  Tue Apr 27 05:30:43 2010
From: SVANLAER at its.jnj.com (Van Laer, Sven [PRDBE Extern])
Date: Tue, 27 Apr 2010 14:30:43 +0200
Subject: [antlr-interest] tree problem (bug antlr-413)
Message-ID: <05149FF24A89394C9F535CDE5D2DD1C40759D14E@JNJBEBEGMS03.eu.jnj.com>

Hi,

 

For my internship I have to make a translator from matlab to c. 

Right now we are trying to get our information from the parser to the
tree, but we keep on getting this error.

 

node from line 0:0 required (...)+ loop did not match anything at input
'<EOF>'

 

I've noticed the error is always at  the last input of the tree.

We are using the CommonTreeNodeStream and rewrite rules.  

Is it possible if this has something to do with the bug ANTLR-413?

 

What's recommended to do?

 

Thanks,

Sven


From newsreply at areeda.com  Tue Apr 27 06:42:31 2010
From: newsreply at areeda.com (Joseph Areeda)
Date: Tue, 27 Apr 2010 06:42:31 -0700
Subject: [antlr-interest] Syntax Highlighter
In-Reply-To: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
References: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
Message-ID: <4BD6E9C7.8000500@areeda.com>

I've use Antlr for netbeans' editor.  See 
http://wiki.netbeans.org/New_Language_Support_Tutorial_Antlr

Joe

Ketan Maheshwari wrote:
> Hello Friends
>
> I have a DSL for which I intend to create a syntax highlighter for editors
> like vim, gedit and netbeans.
>
> Has anyone tried this before?
>
> Can ANTLR help in some way in this direction?
>
>
> Many thanks for any other directions.
>
> Ketan
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>   

From stefika at gmail.com  Tue Apr 27 07:14:19 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Tue, 27 Apr 2010 09:14:19 -0500
Subject: [antlr-interest] Syntax Highlighter
In-Reply-To: <4BD6E9C7.8000500@areeda.com>
References: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
	<4BD6E9C7.8000500@areeda.com>
Message-ID: <o2u1332b72e1004270714n7531c02dn3f4f17cb9b263e9d@mail.gmail.com>

The Sodbeans project (sourceforge) also implements a syntax highlighter in
NetBeans. We build on the antlr integration tutorial and have a few extra
niceties that make using antlr a little easier. For example, our tool
automatically parses the tokens file and regenerates the components NetBeans
needs, which is much more convenient if your DSL ever changes.

Stefik

On Tue, Apr 27, 2010 at 8:42 AM, Joseph Areeda <newsreply at areeda.com> wrote:

> I've use Antlr for netbeans' editor.  See
> http://wiki.netbeans.org/New_Language_Support_Tutorial_Antlr
>
> Joe
>
> Ketan Maheshwari wrote:
> > Hello Friends
> >
> > I have a DSL for which I intend to create a syntax highlighter for
> editors
> > like vim, gedit and netbeans.
> >
> > Has anyone tried this before?
> >
> > Can ANTLR help in some way in this direction?
> >
> >
> > Many thanks for any other directions.
> >
> > Ketan
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> >
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cheetomonster at gmail.com  Tue Apr 27 17:00:14 2010
From: cheetomonster at gmail.com (Chris verBurg)
Date: Tue, 27 Apr 2010 17:00:14 -0700
Subject: [antlr-interest] getting C++ to work
Message-ID: <z2g7c29484b1004271700gb04551b4oeb9865e19046223f@mail.gmail.com>

Hey guys,

I'm trying to get Antlr to generate a parser in C++, but I'm not having much
luck:

  grammar MyParser;
  options {
    language="Cpp";
  }

generates:

  error(100): src/MyParser.g:3:14: syntax error: antlr:
src/MyfParser.g:3:14: unexpected token: "Cpp"

"C++" doesn't work either, though "C" does.

I'm using Antlr 3.2 and java 1.5.0_05, on linux.

Any ideas?

Thanks!!
-Chris

From cliff.s.hudson at gmail.com  Tue Apr 27 17:12:54 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Tue, 27 Apr 2010 17:12:54 -0700
Subject: [antlr-interest] Not processing a newline always
In-Reply-To: <p2wea0a30481004261003mf35832efo72af3f5a36c647a9@mail.gmail.com>
References: <p2wea0a30481004261003mf35832efo72af3f5a36c647a9@mail.gmail.com>
Message-ID: <4bd77d8a.0d81dc0a.371d.ffffdabc@mx.google.com>

Are you sending expressions to ANTLR a line at a time, or are you sending a
while 'file' which would be complete?  Do you have a lexer rule which
consumes whitespace?  Under what situations do you not want whitespace
ignored?

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Francesc d'Assis
Massan?s
Sent: Monday, April 26, 2010 10:04 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Not processing a newline always

Hello,

I am trying to program a "complex" math program and to process the user
input I have been working in a grammar in antlr.

At this point it works almost as I want it to work but I am missing
something: I do not want to process newlines always.

Let me explain it better: when an expression is finished ( 4+5 ) you can
find a semi-colon or a newline, in any case you just finished this
expression.
But what happens if the expression is incomplete: ( 4+5+ ) then if you find
a semi-colon you have an error (you should not be able to parse this input)
but if you find a newline you should look the next line to follow
processing.

What I want is a rule like: Newline is HIDDEN if some other token is need to
finish the actual rule.

I do not know if it is even possible to do this with antlr or I shall go to
modify the output code.

Thanks,
Francesc Massan?s

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From jimi at temporal-wave.com  Tue Apr 27 17:18:31 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Tue, 27 Apr 2010 17:18:31 -0700
Subject: [antlr-interest] getting C++ to work
In-Reply-To: <z2g7c29484b1004271700gb04551b4oeb9865e19046223f@mail.gmail.com>
Message-ID: <cbb45dca95db344cbb327b298ebb983e@temporal-wave.com>

There is no Cpp target, use the C target and compile as C++ :-)

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Chris verBurg
> Sent: Tuesday, April 27, 2010 5:00 PM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] getting C++ to work
> 
> Hey guys,
> 
> I'm trying to get Antlr to generate a parser in C++, but I'm not having
> much
> luck:
> 
>   grammar MyParser;
>   options {
>     language="Cpp";
>   }
> 
> generates:
> 
>   error(100): src/MyParser.g:3:14: syntax error: antlr:
> src/MyfParser.g:3:14: unexpected token: "Cpp"
> 
> "C++" doesn't work either, though "C" does.
> 
> I'm using Antlr 3.2 and java 1.5.0_05, on linux.
> 
> Any ideas?
> 
> Thanks!!
> -Chris
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From f.massanes at gmail.com  Tue Apr 27 17:40:44 2010
From: f.massanes at gmail.com (=?ISO-8859-1?Q?Francesc_d=27Assis_Massan=E9s?=)
Date: Tue, 27 Apr 2010 19:40:44 -0500
Subject: [antlr-interest] Not processing a newline always
In-Reply-To: <4bd77d8a.0d81dc0a.371d.ffffdabc@mx.google.com>
References: <p2wea0a30481004261003mf35832efo72af3f5a36c647a9@mail.gmail.com>
	<4bd77d8a.0d81dc0a.371d.ffffdabc@mx.google.com>
Message-ID: <t2oea0a30481004271740xc96e921fwa538dea58cc45266@mail.gmail.com>

I will be feeding the lines one by one and expecting to be processed when a
full instruction is computed (not after or before).

I never want the whitespace to be processed, it is the newlines that I am
worried about. But I have "fix" the problem using:

 expression3:	expression4 ( ('+'|'-') (NEWLINE)? expression4)* ;

I know is not a good solution but works, and then I will code my ast tree to
disregard the token newline ....

Francesc Massan?s


On Tue, Apr 27, 2010 at 7:12 PM, Cliff Hudson <cliff.s.hudson at gmail.com>wrote:

> Are you sending expressions to ANTLR a line at a time, or are you sending a
> while 'file' which would be complete?  Do you have a lexer rule which
> consumes whitespace?  Under what situations do you not want whitespace
> ignored?
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Francesc d'Assis
> Massan?s
> Sent: Monday, April 26, 2010 10:04 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Not processing a newline always
>
> Hello,
>
> I am trying to program a "complex" math program and to process the user
> input I have been working in a grammar in antlr.
>
> At this point it works almost as I want it to work but I am missing
> something: I do not want to process newlines always.
>
> Let me explain it better: when an expression is finished ( 4+5 ) you can
> find a semi-colon or a newline, in any case you just finished this
> expression.
> But what happens if the expression is incomplete: ( 4+5+ ) then if you find
> a semi-colon you have an error (you should not be able to parse this input)
> but if you find a newline you should look the next line to follow
> processing.
>
> What I want is a rule like: Newline is HIDDEN if some other token is need
> to
> finish the actual rule.
>
> I do not know if it is even possible to do this with antlr or I shall go to
> modify the output code.
>
> Thanks,
> Francesc Massan?s
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>

From cheetomonster at gmail.com  Tue Apr 27 18:28:52 2010
From: cheetomonster at gmail.com (Chris verBurg)
Date: Tue, 27 Apr 2010 18:28:52 -0700
Subject: [antlr-interest] getting C++ to work
In-Reply-To: <cbb45dca95db344cbb327b298ebb983e@temporal-wave.com>
References: <z2g7c29484b1004271700gb04551b4oeb9865e19046223f@mail.gmail.com> 
	<cbb45dca95db344cbb327b298ebb983e@temporal-wave.com>
Message-ID: <y2n7c29484b1004271828s1ce4a216gd5a6f3f4cbced0b9@mail.gmail.com>

Hmm, weird, I've come across a few references to a Cpp target:

http://www.bearcave.com/software/antlr/antlr_examples.html
http://www.antlr.org/grammar/1198064893071/CPP_parser_v_3.2.zip (referenced
from http://www.antlr.org/grammar/list)
http://www.ibm.com/developerworks/aix/library/au-c_plusplus_antlr/index.html

But I did come across an equal number of references saying that there is no
C++ target for Antlr, or it's not ready yet, or whatever else.

The C target seems to generate thread-safe C struct objects, so that'll work
for me.  Thanks!

-Chris





On Tue, Apr 27, 2010 at 5:18 PM, Jim Idle <jimi at temporal-wave.com> wrote:

> There is no Cpp target, use the C target and compile as C++ :-)
>
> Jim
>
> > -----Original Message-----
> > From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> > bounces at antlr.org] On Behalf Of Chris verBurg
> > Sent: Tuesday, April 27, 2010 5:00 PM
> > To: antlr-interest at antlr.org
> > Subject: [antlr-interest] getting C++ to work
> >
> > Hey guys,
> >
> > I'm trying to get Antlr to generate a parser in C++, but I'm not having
> > much
> > luck:
> >
> >   grammar MyParser;
> >   options {
> >     language="Cpp";
> >   }
> >
> > generates:
> >
> >   error(100): src/MyParser.g:3:14: syntax error: antlr:
> > src/MyfParser.g:3:14: unexpected token: "Cpp"
> >
> > "C++" doesn't work either, though "C" does.
> >
> > I'm using Antlr 3.2 and java 1.5.0_05, on linux.
> >
> > Any ideas?
> >
> > Thanks!!
> > -Chris
> >
> > List: http://www.antlr.org/mailman/listinfo/antlr-interest
> > Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> > email-address
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From cliff.s.hudson at gmail.com  Tue Apr 27 18:37:05 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Tue, 27 Apr 2010 18:37:05 -0700
Subject: [antlr-interest] Syntax Highlighter
In-Reply-To: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
References: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
Message-ID: <4bd79144.064c640a.62c0.2aa7@mx.google.com>

I'm using ANTLR presently for a Visual Studio plugin for MSBuild files which
provides syntax highlighting among many other things.  It works quite well
for this scenario.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Ketan Maheshwari
Sent: Tuesday, April 27, 2010 2:45 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Syntax Highlighter

Hello Friends

I have a DSL for which I intend to create a syntax highlighter for editors
like vim, gedit and netbeans.

Has anyone tried this before?

Can ANTLR help in some way in this direction?


Many thanks for any other directions.

Ketan

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From cliff.s.hudson at gmail.com  Tue Apr 27 18:42:14 2010
From: cliff.s.hudson at gmail.com (Cliff Hudson)
Date: Tue, 27 Apr 2010 18:42:14 -0700
Subject: [antlr-interest] Not processing a newline always
In-Reply-To: <t2oea0a30481004271740xc96e921fwa538dea58cc45266@mail.gmail.com>
References: <p2wea0a30481004261003mf35832efo72af3f5a36c647a9@mail.gmail.com>	
	<4bd77d8a.0d81dc0a.371d.ffffdabc@mx.google.com>
	<t2oea0a30481004271740xc96e921fwa538dea58cc45266@mail.gmail.com>
Message-ID: <4bd7927a.9553f10a.2684.ffffbd18@mx.google.com>

Since you are operating much like an immediate-mode interpreter, probably
the way to do this is to write a special token stream which provides a set
of tokens to the parser when you have given each line (basically tokenize
each line separately.)

 

ANTLR?s parser uses a pull model to get tokens from the token stream, and
you are probably using a push model to provide strings to the lexer for
tokenization, so you will have to handle that hookup yourself.

 

From: Francesc d'Assis Massan?s [mailto:f.massanes at gmail.com] 
Sent: Tuesday, April 27, 2010 5:41 PM
To: Cliff Hudson
Cc: antlr-interest at antlr.org
Subject: Re: [antlr-interest] Not processing a newline always

 

I will be feeding the lines one by one and expecting to be processed when a
full instruction is computed (not after or before).

 

I never want the whitespace to be processed, it is the newlines that I am
worried about. But I have "fix" the problem using:

 
 expression3:  expression4 ( ('+'|'-') (NEWLINE)? expression4)* ;

I know is not a good solution but works, and then I will code my ast tree to
disregard the token newline ....


Francesc Massan?s



On Tue, Apr 27, 2010 at 7:12 PM, Cliff Hudson <cliff.s.hudson at gmail.com>
wrote:

Are you sending expressions to ANTLR a line at a time, or are you sending a
while 'file' which would be complete?  Do you have a lexer rule which
consumes whitespace?  Under what situations do you not want whitespace
ignored?


-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Francesc d'Assis
Massan?s
Sent: Monday, April 26, 2010 10:04 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Not processing a newline always

Hello,

I am trying to program a "complex" math program and to process the user
input I have been working in a grammar in antlr.

At this point it works almost as I want it to work but I am missing
something: I do not want to process newlines always.

Let me explain it better: when an expression is finished ( 4+5 ) you can
find a semi-colon or a newline, in any case you just finished this
expression.
But what happens if the expression is incomplete: ( 4+5+ ) then if you find
a semi-colon you have an error (you should not be able to parse this input)
but if you find a newline you should look the next line to follow
processing.

What I want is a rule like: Newline is HIDDEN if some other token is need to
finish the actual rule.

I do not know if it is even possible to do this with antlr or I shall go to
modify the output code.

Thanks,
Francesc Massan?s

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

 


From Anders.Karlsson at sybase.com  Tue Apr 27 18:43:50 2010
From: Anders.Karlsson at sybase.com (Anders.Karlsson at sybase.com)
Date: Wed, 28 Apr 2010 09:43:50 +0800
Subject: [antlr-interest] Syntax Highlighter
In-Reply-To: <4bd79144.064c640a.62c0.2aa7@mx.google.com>
References: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
	<4bd79144.064c640a.62c0.2aa7@mx.google.com>
Message-ID: <OF92192AFC.E33A1403-ON48257713.000967D2-48257713.00098F3A@sybase.com>

Yes we use ANTLR for the same purpose in PowerBuilder 12 from within
VSShell.
Works fine.

BR/Anders.


                                                                           
             Cliff Hudson                                                  
             <cliff.s.hudson at g                                             
             mail.com>                                                  To 
             Sent by:                  "'Ketan Maheshwari'"                
             <antlr-interest-b         <ketancmaheshwari at gmail.com>,       
             ounces at antlr.org>         <antlr-interest at antlr.org>          
                                                                        cc 
                                                                           
             2010/04/28 09:37                                      Subject 
                                       Re: [antlr-interest] Syntax         
                                       Highlighter                         
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           
                                                                           




I'm using ANTLR presently for a Visual Studio plugin for MSBuild files
which
provides syntax highlighting among many other things.  It works quite well
for this scenario.

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Ketan Maheshwari
Sent: Tuesday, April 27, 2010 2:45 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Syntax Highlighter

Hello Friends

I have a DSL for which I intend to create a syntax highlighter for editors
like vim, gedit and netbeans.

Has anyone tried this before?

Can ANTLR help in some way in this direction?


Many thanks for any other directions.

Ketan

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address


List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address




From baechle at cs.uni-kl.de  Wed Apr 28 01:19:06 2010
From: baechle at cs.uni-kl.de (Sebastian =?utf-8?q?B=C3=A4chle?=)
Date: Wed, 28 Apr 2010 10:19:06 +0200
Subject: [antlr-interest] Tricky tree rewrite without wildcards for subtree
	roots
Message-ID: <201004281019.06495.baechle@cs.uni-kl.de>

Hi,

I want to rewrite a subtrees of the form

     \
      A
    / | \ 
   /  |  \
  B   C   D
         / \
        E...F

to

      \
       D
     / \ \
    A   \  \
   / \   \   \
  B  C    E...F


The problem is that D may be the subtree of an "arbitrary complex" expression 
that I don't know in advance - and I don't want to know. I am just interested 
in the surrounding construct defined by A, B, and C and want to become them 
the first child subtree of D, which itself takes over the place of its former 
parent A in the resulting tree.

Is there a smart way to to do this with tree rewrite rules of antlr 3.2? Or 
must I manually modify the tree?

I can think of a tree pattern rule similar to this

^(a=A b=B c=C ^(d=. children+=.*)) -> ^({$d.token} ^($a $b $c) $children+)

but this is rejected with the error:

Wildcard invalid as root; wildcard can itself be a tree

I found a discussion from 2008 in the archives ("wildcard in tree grammar") 
about that particular topic. The design decision was to interpret "." in a 
tree grammar always as a whole subtree, forbidding constructs like the one 
above. As far as I understood, the underyling mechanism with interleaved 
UP/DOWN tokens for tree grammars, however, is potentially capable to match 
such wildcard patterns.

I appreciate your hints and comments.


Regards,

Sebastian

From razvansr at yahoo.com  Wed Apr 28 04:50:04 2010
From: razvansr at yahoo.com (Razvan Radu)
Date: Wed, 28 Apr 2010 04:50:04 -0700 (PDT)
Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
Message-ID: <964553.88928.qm@web112320.mail.gq1.yahoo.com>

Hello,
In the last days i search everywhere for an answer to this:
How can i import a class or a jar file in my .g file in ANTLRWorks.
I se that you can import thinks like:

@header {
import java.util.HashMap;
}

but i can't import classes that i created in other project, or jar files of that project.
I tried everythink, for example:

@header {
import mypackage.ClassName;
}
and i put this jar in the same location whit the .g file and the generated files, but it dosen't work.

Please help me!

Thank you.



      

From jmchuma at gmail.com  Wed Apr 28 04:46:49 2010
From: jmchuma at gmail.com (=?UTF-8?Q?Jose_Mar=C3=ADa_Chumo_Mata?=)
Date: Wed, 28 Apr 2010 13:46:49 +0200
Subject: [antlr-interest] Access token tree on rewrite rules
Message-ID: <s2w5fc92f921004280446u4da486d3gc84e825953065a03@mail.gmail.com>

Hello.
I'm writing to ask how I can access a token tree on rewrite rules. Let
me explain the situation. I have a couple of rules that look like
this:

firstRule :
    A^ {$A.tree.doSomething();} secondRule
  | B^ {$B.tree.doSomething();} thirdRule
;

secondRule :
    C { $C.tree.doSomething();} optionalRule? USELESS fourthRule* USELESS
    -> optionalRule? ^(C fourthRule*);

The thing works for the first rule (it call the doSomething() method
of the tree) but it doesn't on the second one because the tree is
null. I've read the code generated by ANTLR and I've realized that on
rewrite rules it creates the trees for the taken later on. Is there a
way to access those trees?

Thanks and sorry for my misspelling.

From jmchuma at gmail.com  Wed Apr 28 05:01:30 2010
From: jmchuma at gmail.com (=?UTF-8?Q?Jose_Mar=C3=ADa_Chumo_Mata?=)
Date: Wed, 28 Apr 2010 14:01:30 +0200
Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
In-Reply-To: <964553.88928.qm@web112320.mail.gq1.yahoo.com>
References: <964553.88928.qm@web112320.mail.gq1.yahoo.com>
Message-ID: <u2s5fc92f921004280501s522bd146zf4129e8e49185a6@mail.gmail.com>

You can specify the path and the classpath for java and javac in the
ANTLRWorks preferences. I've never done it but I think this is what
you are looking for.

On Wed, Apr 28, 2010 at 13:50, Razvan Radu <razvansr at yahoo.com> wrote:
> Hello,
> In the last days i search everywhere for an answer to this:
> How can i import a class or a jar file in my .g file in ANTLRWorks.
> I se that you can import thinks like:
>
> @header {
> import java.util.HashMap;
> }
>
> but i can't import classes that i created in other project, or jar files of that project.
> I tried everythink, for example:
>
> @header {
> import mypackage.ClassName;
> }
> and i put this jar in the same location whit the .g file and the generated files, but it dosen't work.
>
> Please help me!
>
> Thank you.
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From Giampaolo at Tomassoni.biz  Wed Apr 28 05:11:35 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Wed, 28 Apr 2010 14:11:35 +0200
Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
In-Reply-To: <964553.88928.qm@web112320.mail.gq1.yahoo.com>
References: <964553.88928.qm@web112320.mail.gq1.yahoo.com>
Message-ID: <00c101cae6cb$f321ab20$d9650160$@biz>

> Hello,
> In the last days i search everywhere for an answer to this:
> How can i import a class or a jar file in my .g file in ANTLRWorks.
> I se that you can import thinks like:
> 
> @header {
> import java.util.HashMap;
> }
> 
> but i can't import classes that i created in other project, or jar
> files of that project.
> I tried everythink, for example:
> 
> @header {
> import mypackage.ClassName;
> }
> and i put this jar in the same location whit the .g file and the
> generated files, but it dosen't work.

The "import" keyword in Java doesn't import the content of a jar: it only
makes the mypackage.ClassName available in your code as simply "ClassName",
instead of the full package path. It is more or less like a shortcut
declaration, then.

With respect to the ANTLR compiler, the content of @header{} definitions are
copied more or less verbatim to the generated parser/lexer java source, so
that your .jar file is not needed at all during grammar compilation.

Of course you need it to later compile the parser/lexer java source (with
javac or whatever you use for it) and to execute the parser/lexer classes.

So, you have to configure your development platform / java compiler as well
as your JVM in order to use the classes defined in a .jar, not the ANTLR
compiler.

Giampaolo


From razvansr at yahoo.com  Wed Apr 28 05:12:19 2010
From: razvansr at yahoo.com (Razvan Radu)
Date: Wed, 28 Apr 2010 05:12:19 -0700 (PDT)
Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
In-Reply-To: <u2s5fc92f921004280501s522bd146zf4129e8e49185a6@mail.gmail.com>
References: <964553.88928.qm@web112320.mail.gq1.yahoo.com>
	<u2s5fc92f921004280501s522bd146zf4129e8e49185a6@mail.gmail.com>
Message-ID: <178155.38378.qm@web112304.mail.gq1.yahoo.com>

Not the path for javac or java.
I need the path where i can put jar files that i created.
Concrete:
in my .g example when it maches a rule i need to create an instance of an object from one of my classe:

rule    :       case1 { Object1 o = new Object1();}

Object1, and others, are in other project made in eclipse. It is posible to see them here? i try to puth the .java file, the .class file, the .jar generated fiele in the same directory but it dosen't work. What's the solution?

Thank You





________________________________
From: Jose Mar?a Chumo Mata <jmchuma at gmail.com>
To: Razvan Radu <razvansr at yahoo.com>
Cc: antlr-interest at antlr.org
Sent: Wed, April 28, 2010 3:01:30 PM
Subject: Re: [antlr-interest] Import a class or a jar file in ANTLRWorks

You can specify the path and the classpath for java and javac in the
ANTLRWorks preferences. I've never done it but I think this is what
you are looking for.

On Wed, Apr 28, 2010 at 13:50, Razvan Radu <razvansr at yahoo.com> wrote:
> Hello,
> In the last days i search everywhere for an answer to this:
> How can i import a class or a jar file in my .g file in ANTLRWorks.
> I se that you can import thinks like:
>
> @header {
> import java.util.HashMap;
> }
>
> but i can't import classes that i created in other project, or jar files of that project.
> I tried everythink, for example:
>
> @header {
> import mypackage.ClassName;
> }
> and i put this jar in the same location whit the .g file and the generated files, but it dosen't work.
>
> Please help me!
>
> Thank you.
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>



      

From jmchuma at gmail.com  Wed Apr 28 05:39:09 2010
From: jmchuma at gmail.com (=?UTF-8?Q?Jose_Mar=C3=ADa_Chumo_Mata?=)
Date: Wed, 28 Apr 2010 14:39:09 +0200
Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
In-Reply-To: <178155.38378.qm@web112304.mail.gq1.yahoo.com>
References: <964553.88928.qm@web112320.mail.gq1.yahoo.com> 
	<u2s5fc92f921004280501s522bd146zf4129e8e49185a6@mail.gmail.com> 
	<178155.38378.qm@web112304.mail.gq1.yahoo.com>
Message-ID: <z2y5fc92f921004280539wf37df114m8a978d38b79ba4a3@mail.gmail.com>

As I said you can specify the classpath which indicates java and javac
where to find your java classes.

On Wed, Apr 28, 2010 at 14:12, Razvan Radu <razvansr at yahoo.com> wrote:
> Not the path for javac or java.
> I need the path where i can put jar files that i created.
> Concrete:
> in my .g example when it maches a rule i need to create an instance of an object from one of my classe:
>
> rule ? ?: ? ? ? case1 { Object1 o = new Object1();}
>
> Object1, and others, are in other project made in eclipse. It is posible to see them here? i try to puth the .java file, the .class file, the .jar generated fiele in the same directory but it dosen't work. What's the solution?
>
> Thank You
>
>
>
>
>
> ________________________________
> From: Jose Mar?a Chumo Mata <jmchuma at gmail.com>
> To: Razvan Radu <razvansr at yahoo.com>
> Cc: antlr-interest at antlr.org
> Sent: Wed, April 28, 2010 3:01:30 PM
> Subject: Re: [antlr-interest] Import a class or a jar file in ANTLRWorks
>
> You can specify the path and the classpath for java and javac in the
> ANTLRWorks preferences. I've never done it but I think this is what
> you are looking for.
>
> On Wed, Apr 28, 2010 at 13:50, Razvan Radu <razvansr at yahoo.com> wrote:
>> Hello,
>> In the last days i search everywhere for an answer to this:
>> How can i import a class or a jar file in my .g file in ANTLRWorks.
>> I se that you can import thinks like:
>>
>> @header {
>> import java.util.HashMap;
>> }
>>
>> but i can't import classes that i created in other project, or jar files of that project.
>> I tried everythink, for example:
>>
>> @header {
>> import mypackage.ClassName;
>> }
>> and i put this jar in the same location whit the .g file and the generated files, but it dosen't work.
>>
>> Please help me!
>>
>> Thank you.
>>
>>
>>
>>
>>
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>>
>
>
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From Giampaolo at Tomassoni.biz  Wed Apr 28 05:45:06 2010
From: Giampaolo at Tomassoni.biz (Giampaolo Tomassoni)
Date: Wed, 28 Apr 2010 14:45:06 +0200
Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
In-Reply-To: <z2y5fc92f921004280539wf37df114m8a978d38b79ba4a3@mail.gmail.com>
References: <964553.88928.qm@web112320.mail.gq1.yahoo.com>
	<u2s5fc92f921004280501s522bd146zf4129e8e49185a6@mail.gmail.com>
	<178155.38378.qm@web112304.mail.gq1.yahoo.com>
	<z2y5fc92f921004280539wf37df114m8a978d38b79ba4a3@mail.gmail.com>
Message-ID: <00c201cae6d0$a1a8f0f0$e4fad2d0$@biz>

> As I said you can specify the classpath which indicates java and javac
> where to find your java classes.
> 
> On Wed, Apr 28, 2010 at 14:12, Razvan Radu <razvansr at yahoo.com> wrote:
> > Not the path for javac or java.
> > I need the path where i can put jar files that i created.
> > Concrete:
> > in my .g example when it maches a rule i need to create an instance
> of an object from one of my classe:
> >
> > rule    :       case1 { Object1 o = new Object1();}
> >
> > Object1, and others, are in other project made in eclipse. It is
> posible to see them here? i try to puth the .java file, the .class
> file, the .jar generated fiele in the same directory but it dosen't
> work. What's the solution?
> >
> > Thank You

Which eclipse plugin are you using to compile your grammar files?



From ketancmaheshwari at gmail.com  Wed Apr 28 06:26:41 2010
From: ketancmaheshwari at gmail.com (Ketan Maheshwari)
Date: Wed, 28 Apr 2010 15:26:41 +0200
Subject: [antlr-interest] Syntax Highlighter
In-Reply-To: <OF92192AFC.E33A1403-ON48257713.000967D2-48257713.00098F3A@sybase.com>
References: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
	<4bd79144.064c640a.62c0.2aa7@mx.google.com>
	<OF92192AFC.E33A1403-ON48257713.000967D2-48257713.00098F3A@sybase.com>
Message-ID: <p2k8e487b941004280626zd0fc5797rc2db3f8c19e83c03@mail.gmail.com>

Hello All

May be my message was not clear. What I want is a syntax highlighter for my
DSL when I write programs in *that* language. Not for the ANTLR grammar
itself.

I think the netbeans and visual studio mentioned by you was for the purpose
of having syntax highlighters for the specification of ANTLR grammar.

Or, have I understood i wrong?

Cheers
Ketan


On Wed, Apr 28, 2010 at 3:43 AM, <Anders.Karlsson at sybase.com> wrote:

> Yes we use ANTLR for the same purpose in PowerBuilder 12 from within
> VSShell.
> Works fine.
>
> BR/Anders.
>
>
>
>             Cliff Hudson
>             <cliff.s.hudson at g
>             mail.com>                                                  To
>             Sent by:                  "'Ketan Maheshwari'"
>             <antlr-interest-b         <ketancmaheshwari at gmail.com>,
>             ounces at antlr.org>         <antlr-interest at antlr.org>
>                                                                        cc
>
>             2010/04/28 09:37                                      Subject
>                                       Re: [antlr-interest] Syntax
>                                       Highlighter
>
>
>
>
>
>
>
>
>
>
> I'm using ANTLR presently for a Visual Studio plugin for MSBuild files
> which
> provides syntax highlighting among many other things.  It works quite well
> for this scenario.
>
> -----Original Message-----
> From: antlr-interest-bounces at antlr.org
> [mailto:antlr-interest-bounces at antlr.org] On Behalf Of Ketan Maheshwari
> Sent: Tuesday, April 27, 2010 2:45 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Syntax Highlighter
>
> Hello Friends
>
> I have a DSL for which I intend to create a syntax highlighter for editors
> like vim, gedit and netbeans.
>
> Has anyone tried this before?
>
> Can ANTLR help in some way in this direction?
>
>
> Many thanks for any other directions.
>
> Ketan
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe:
> http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>
>
>
>

From stefika at gmail.com  Wed Apr 28 08:09:18 2010
From: stefika at gmail.com (Andreas Stefik)
Date: Wed, 28 Apr 2010 10:09:18 -0500
Subject: [antlr-interest] Syntax Highlighter
In-Reply-To: <p2k8e487b941004280626zd0fc5797rc2db3f8c19e83c03@mail.gmail.com>
References: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
	<4bd79144.064c640a.62c0.2aa7@mx.google.com>
	<OF92192AFC.E33A1403-ON48257713.000967D2-48257713.00098F3A@sybase.com>
	<p2k8e487b941004280626zd0fc5797rc2db3f8c19e83c03@mail.gmail.com>
Message-ID: <h2p1332b72e1004280809kf73bb4f3s37de4ec20893ad1c@mail.gmail.com>

Ketan,

May be my message was not clear. What I want is a syntax highlighter for my
> DSL when I write programs in *that* language. Not for the ANTLR grammar
> itself.
>
>
This is what we meant as well. For example, in the Sodbeans project, our
syntax highlighting is for our custom language (called Hop), not ANTLR.

Stefik

From jimi at temporal-wave.com  Wed Apr 28 08:18:46 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 28 Apr 2010 08:18:46 -0700
Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
In-Reply-To: <964553.88928.qm@web112320.mail.gq1.yahoo.com>
Message-ID: <6474a76733936f40b10a194fa2fc5d7c@temporal-wave.com>

Once you get to the point where you have external code in your grammar (and you should limit this to method calls to helper classes), then switch to building the grammar as part of a project (Netbeans, Maven, etc) and build the grammar with the -debug option. Then you debug remotely. It is generally the easier way to do things.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Razvan Radu
> Sent: Wednesday, April 28, 2010 4:50 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Import a class or a jar file in ANTLRWorks
> 
> Hello,
> In the last days i search everywhere for an answer to this:
> How can i import a class or a jar file in my .g file in ANTLRWorks.
> I se that you can import thinks like:
> 
> @header {
> import java.util.HashMap;
> }
> 
> but i can't import classes that i created in other project, or jar
> files of that project.
> I tried everythink, for example:
> 
> @header {
> import mypackage.ClassName;
> }
> and i put this jar in the same location whit the .g file and the
> generated files, but it dosen't work.
> 
> Please help me!
> 
> Thank you.
> 
> 
> 
> 
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jimi at temporal-wave.com  Wed Apr 28 08:29:30 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Wed, 28 Apr 2010 08:29:30 -0700
Subject: [antlr-interest] Tricky tree rewrite without wildcards for
	subtree roots
In-Reply-To: <201004281019.06495.baechle@cs.uni-kl.de>
Message-ID: <c92a6d635ae2fd4aad4be974d910fd1c@temporal-wave.com>

Well, you cannot use . as the root as that will just match everything, but in fact your root is D anyway, so wall you need is something akin to:

tree grammar T;

options
{
	output=AST;
}
a 	:	 x EOF ;

x 	:   ^(A B C ^(D c+=x)) 
	|   .
	;


With the rewrite rules added. This assumes that your representation below is accurate of course. Here you should then rewrite subtrees of D that are subtrees of A, in a recursive fashion.

Jim


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Sebastian B?chle
> Sent: Wednesday, April 28, 2010 1:19 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Tricky tree rewrite without wildcards for
> subtree roots
> 
> Hi,
> 
> I want to rewrite a subtrees of the form
> 
>      \
>       A
>     / | \
>    /  |  \
>   B   C   D
>          / \
>         E...F
> 
> to
> 
>       \
>        D
>      / \ \
>     A   \  \
>    / \   \   \
>   B  C    E...F
> 
> 
> The problem is that D may be the subtree of an "arbitrary complex"
> expression
> that I don't know in advance - and I don't want to know. I am just
> interested
> in the surrounding construct defined by A, B, and C and want to become
> them
> the first child subtree of D, which itself takes over the place of its
> former
> parent A in the resulting tree.
> 
> Is there a smart way to to do this with tree rewrite rules of antlr
> 3.2? Or
> must I manually modify the tree?
> 
> I can think of a tree pattern rule similar to this
> 
> ^(a=A b=B c=C ^(d=. children+=.*)) -> ^({$d.token} ^($a $b $c)
> $children+)
> 
> but this is rejected with the error:
> 
> Wildcard invalid as root; wildcard can itself be a tree
> 
> I found a discussion from 2008 in the archives ("wildcard in tree
> grammar")
> about that particular topic. The design decision was to interpret "."
> in a
> tree grammar always as a whole subtree, forbidding constructs like the
> one
> above. As far as I understood, the underyling mechanism with
> interleaved
> UP/DOWN tokens for tree grammars, however, is potentially capable to
> match
> such wildcard patterns.
> 
> I appreciate your hints and comments.
> 
> 
> Regards,
> 
> Sebastian
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From sharwell at pixelminegames.com  Wed Apr 28 10:19:45 2010
From: sharwell at pixelminegames.com (Sam Harwell)
Date: Wed, 28 Apr 2010 12:19:45 -0500
Subject: [antlr-interest] Syntax Highlighter
References: <n2x8e487b941004270245i8c5df9f5g89adfc543678dfe9@mail.gmail.com>
Message-ID: <DD5A5D428FE040429CCDF377FAA892840152DF0E@martini.ironwillgames.com>

Hello Ketan,

I am using ANTLR for my syntax highlighters and IntelliSense (Visual
Studio's code assistance).

First, I think you should read this "Commentary on Parsing Languages for
IDEs": http://blog.280z28.org/archives/2010/01/92/

Second, here is my answer (I'm 280Z28 there, btw) to a question on
StackOverflow "How to implement code folding in C#". The answer includes
links to two other related answers I've made on that site that you
should read.
http://stackoverflow.com/questions/2392794/how-to-implement-code-folding
-in-c/2392843#2392843

Sam

-----Original Message-----
From: antlr-interest-bounces at antlr.org
[mailto:antlr-interest-bounces at antlr.org] On Behalf Of Ketan Maheshwari
Sent: Tuesday, April 27, 2010 4:45 AM
To: antlr-interest at antlr.org
Subject: [antlr-interest] Syntax Highlighter

Hello Friends

I have a DSL for which I intend to create a syntax highlighter for
editors
like vim, gedit and netbeans.

Has anyone tried this before?

Can ANTLR help in some way in this direction?


Many thanks for any other directions.

Ketan

List: http://www.antlr.org/mailman/listinfo/antlr-interest
Unsubscribe:
http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From JPhiloon at penbaysolutions.com  Wed Apr 28 12:19:52 2010
From: JPhiloon at penbaysolutions.com (Jay Philoon)
Date: Wed, 28 Apr 2010 15:19:52 -0400
Subject: [antlr-interest] Newbie question, translator
Message-ID: <EFDC7E8065131640938641CF57DF312F42766A1E23@email.penbaymedia.com>

It seems that the answer to my question would be obvious, but I don't know language composition or ANTLR very well.  And I haven't yet read the book.

I'm trying to write a translator that will convert a date string to an alternative format, but only when the date is in a certain, specific context.  That is, I only know the date string should be converted once I get to a rule, and by then the date term is several nodes down in the tree.   How can I go about changing the date text from within the rule?

Thanks much.


________________________________
CONFIDENTIALITY NOTICE:
This e-mail message, including any attachments, is for the sole use of the intended recipient(s) and may contain confidential and privileged information. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please do not read, disclose, reproduce, distribute, disseminate or otherwise use this transmission, but contact the sender by reply e-mail and destroy all copies of the message and its attachments.

From drach at itsit.org  Wed Apr 28 15:47:18 2010
From: drach at itsit.org (Steve Drach)
Date: Wed, 28 Apr 2010 15:47:18 -0700
Subject: [antlr-interest] CharStream for unbounded input stream
Message-ID: <BB07C03A-907F-42FA-8700-0E5F1C34484C@itsit.org>

I'm reading data off a network interface.  Messages are distinct and come in bursts.  I've defined a grammar that can parse a message that doesn't depend on finding an EOF and it works when the messages are in a finite input stream, because eventually the stream is closed, but it doesn't work when I don't close the stream.  

My data is delivered via a java.io.Reader that returns either 0 characters when read or some finite number of characters that might not comprise a full message.  If the network connection is closed, it will also return -1.  However, in general the network connection is long lived and not closed.

I looked around in the mailing list for an appropriate CharStream implementation and didn't find one.  I thought I'd ask here before I embark on developing one.  Anybody have a pointer to something I can use?

Thanks
Steve

From drach at itsit.org  Wed Apr 28 16:47:47 2010
From: drach at itsit.org (Steve Drach)
Date: Wed, 28 Apr 2010 16:47:47 -0700
Subject: [antlr-interest] CharStream for unbounded input stream
In-Reply-To: <BB07C03A-907F-42FA-8700-0E5F1C34484C@itsit.org>
References: <BB07C03A-907F-42FA-8700-0E5F1C34484C@itsit.org>
Message-ID: <18A4EB9D-749B-40CA-BEDB-83EBFEF693FB@itsit.org>

Hmm, I think I've discovered it can't be done since the Lexer apparently reads until it's collected all the tokens and then the parser parses them.  Well now that is a bummer.  Anybody have any clever ideas on how to process variable length messages on unbounded input streams?  They are well formed in the sense that they have matching parenthesis (I think).

On Apr 28, 2010, at 3:47 PM, Steve Drach wrote:

> I'm reading data off a network interface.  Messages are distinct and come in bursts.  I've defined a grammar that can parse a message that doesn't depend on finding an EOF and it works when the messages are in a finite input stream, because eventually the stream is closed, but it doesn't work when I don't close the stream.  
> 
> My data is delivered via a java.io.Reader that returns either 0 characters when read or some finite number of characters that might not comprise a full message.  If the network connection is closed, it will also return -1.  However, in general the network connection is long lived and not closed.
> 
> I looked around in the mailing list for an appropriate CharStream implementation and didn't find one.  I thought I'd ask here before I embark on developing one.  Anybody have a pointer to something I can use?
> 
> Thanks
> Steve
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From marcin.rzeznicki at gmail.com  Wed Apr 28 19:20:19 2010
From: marcin.rzeznicki at gmail.com (=?UTF-8?Q?Marcin_Rze=C5=BAnicki?=)
Date: Thu, 29 Apr 2010 04:20:19 +0200
Subject: [antlr-interest] CharStream for unbounded input stream
In-Reply-To: <18A4EB9D-749B-40CA-BEDB-83EBFEF693FB@itsit.org>
References: <BB07C03A-907F-42FA-8700-0E5F1C34484C@itsit.org>
	<18A4EB9D-749B-40CA-BEDB-83EBFEF693FB@itsit.org>
Message-ID: <i2s14799bf61004281920u2de7be1l6c38e7cb6880d5c6@mail.gmail.com>

On Thu, Apr 29, 2010 at 1:47 AM, Steve Drach <drach at itsit.org> wrote:
> Hmm, I think I've discovered it can't be done since the Lexer apparently reads until it's collected all the tokens and then the parser parses them. ?Well now that is a bummer. ?Anybody have any clever ideas on how to process variable length messages on unbounded input streams? ?They are well formed in the sense that they have matching parenthesis (I think).
>

Hi
I think you're wrong on this. Lexer does not need to read all the
tokens upfront, it merely has to respond to Parser requests. It is
just the matter of TokenStream implementation (analyze Parser code,
see where it calls nextToken - if I am not mistaken - from token
source). While it is true that the "default" one buffers all tokens
till EOF, it is just an implementation detail. So probably you need to
implement/use different TokenStream as well (at least that's what I
did). What I can recommend is that, instead of buffering everything,
you should keep small "window" buffer which you will fill with tokens
from lexer - anything will do actually. I'd be extremelly aware of
backtracking in your case. If your parser needs to backtrack then you
may end up with it wanting to go back in token stream beyond what you
keep in your buffer. So you should consider either making ever
expanding buffer which does not forget old tokens, or, examining
maximum backtrack that can occur in your grammar. Good luck, it's
actually quite easy to do.


-- 
Greetings
Marcin Rze?nicki

From Thomas_Krebs at gmx.de  Thu Apr 29 00:21:11 2010
From: Thomas_Krebs at gmx.de (Thomas Krebs)
Date: Thu, 29 Apr 2010 09:21:11 +0200
Subject: [antlr-interest] getting C++ to work
In-Reply-To: <cbb45dca95db344cbb327b298ebb983e@temporal-wave.com>
References: <cbb45dca95db344cbb327b298ebb983e@temporal-wave.com>
Message-ID: <4BD93367.8050106@gmx.de>

Am 4/28/2010 2:18 AM, schrieb Jim Idle:
> There is no Cpp target, use the C target and compile as C++ :-)
>
> Jim

Wasn't there a roumour a C++ target and library are in the works - a
student project led by Terence...?

Thomas
-- 
Dr. Thomas Krebs
Merianstr. 18
90409 N?rnberg
Germany
Tel.: +49 911 563321
Mobil: +49 172 8916010

From zhangchunlin at gmail.com  Thu Apr 29 03:10:18 2010
From: zhangchunlin at gmail.com (Chunlin Zhang)
Date: Thu, 29 Apr 2010 18:10:18 +0800
Subject: [antlr-interest] bug of antlr-3.1.2 python target generated from
	Lua.g
Message-ID: <hrbltl$l0d$1@dough.gmane.org>

I got a Lua.g from http://www.antlr.org/grammar/1178608849736/Lua.g ,and 
I use "java -jar antlr-3.1.2.jar Lua.g" to generate LuaLexer.py and 
LuaParser.py.

LuaLexer.py have Syntax error(but modify all "skip()" to "self.skip()") 
will be OK
error in my computer:
'''
 > "D:\Python26\python.exe" -u "E:\DEV\luaparser\LuaLexer.py" factorial.lua
Traceback (most recent call last):
   File "E:\DEV\luaparser\LuaLexer.py", line 2980, in <module>
     main(sys.argv)
   File "E:\DEV\luaparser\LuaLexer.py", line 2976, in main
     main.execute(argv)
   File 
"D:\Python26\lib\site-packages\antlr_python_runtime-3.1.2-py2.6.egg\antlr3\main.py", 
line 151, in execute
     self.parseStream(options, inStream)
   File 
"D:\Python26\lib\site-packages\antlr_python_runtime-3.1.2-py2.6.egg\antlr3\main.py", 
line 180, in parseStream
     for token in lexer:
   File 
"D:\Python26\lib\site-packages\antlr_python_runtime-3.1.2-py2.6.egg\antlr3\recognizers.py", 
line 1055, in next
     token = self.nextToken()
   File 
"D:\Python26\lib\site-packages\antlr_python_runtime-3.1.2-py2.6.egg\antlr3\recognizers.py", 
line 1117, in nextToken
     self.mTokens()
   File "E:\DEV\luaparser\LuaLexer.py", line 2537, in mTokens
     self.mLINE_COMMENT()
   File "E:\DEV\luaparser\LuaLexer.py", line 2103, in mLINE_COMMENT
     skip();
NameError: global name 'skip' is not defined

'''

But LuaParser.py I can not use...
The error:
'''
>> "D:\Python26\python.exe" -u "E:\DEV\luaparser\LuaParser.py" bisect.lua
> Traceback (most recent call last):
>   File "E:\DEV\luaparser\LuaParser.py", line 3264, in <module>
>     main(sys.argv)
>   File "E:\DEV\luaparser\LuaParser.py", line 3260, in main
>     main.execute(argv)
>   File "D:\Python26\lib\site-packages\antlr_python_runtime-3.1.2-py2.6.egg\antlr3\main.py", line 151, in execute
>     self.parseStream(options, inStream)
>   File "D:\Python26\lib\site-packages\antlr_python_runtime-3.1.2-py2.6.egg\antlr3\main.py", line 218, in parseStream
>     result = getattr(parser, options.parserRule)()
> TypeError: getattr(): attribute name must be string
'''

Can It be fixed??
Thanks!


From nourchn at gmail.com  Thu Apr 29 03:22:20 2010
From: nourchn at gmail.com (Nourchn Nor)
Date: Thu, 29 Apr 2010 12:22:20 +0200
Subject: [antlr-interest] problem in translation with tree walker
Message-ID: <m2u2d9a1ffc1004290322x193f8febn5aa90b6c27936937@mail.gmail.com>

Hello everybody,
I want to make a translation between two languages A and B and I choose to
use the ANTLRWork, I'm writing a  grammar of A  and the string template of
B,  and I am spirit of writing the tree walker of translation with the
template which I have defines in the string template, but the problem is
that this templates don't known in this Tree walker. What can I do? Or how I
have to make or add, please?
Note that I want to use only the ANTLRWork.
Please help me

From jimi at temporal-wave.com  Thu Apr 29 06:25:17 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 29 Apr 2010 06:25:17 -0700
Subject: [antlr-interest] getting C++ to work
In-Reply-To: <4BD93367.8050106@gmx.de>
Message-ID: <cf4e1fb3778b044092c80fa052052c3a@temporal-wave.com>

Yes - it never happened. I am going to relook at it for v4 and possibly for v3.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Thomas Krebs
> Sent: Thursday, April 29, 2010 12:21 AM
> To: antlr-interest at antlr.org
> Subject: Re: [antlr-interest] getting C++ to work
> 
> Am 4/28/2010 2:18 AM, schrieb Jim Idle:
> > There is no Cpp target, use the C target and compile as C++ :-)
> >
> > Jim
> 
> Wasn't there a roumour a C++ target and library are in the works - a
> student project led by Terence...?
> 
> Thomas
> --
> Dr. Thomas Krebs
> Merianstr. 18
> 90409 N?rnberg
> Germany
> Tel.: +49 911 563321
> Mobil: +49 172 8916010
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From bruce.bauman at andesaservices.com  Thu Apr 29 06:33:18 2010
From: bruce.bauman at andesaservices.com (Bruce Bauman)
Date: Thu, 29 Apr 2010 09:33:18 -0400
Subject: [antlr-interest] exit status from ANTLR generated parser
Message-ID: <15DF771CF9BEAE418AA0C8D745F73D1509174448@exchange.andesatpa.com>

I'm using ANTLR V3 from a Pascal grammar. When I get a parse failure,
the java VM still exits with a 0 exit status, so I can't check for
failure from the shell script that is running the parser.

Any hint on how to get a proper exit status on error?

Thanks.

-- Bruce
CONFIDENTIALITY NOTICE: This e-mail is confidential and intended
solely for the use of the individual or entity to which it is addressed.  If
you are not the intended recipient, be advised that you have received 
this email in error and that any use, dissemination, forwarding, printing 
or copying of this e-mail is strictly prohibited. If you received this e-mail
in error, please delete it from your computer and contact the sender.


From jimi at temporal-wave.com  Thu Apr 29 06:48:54 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Thu, 29 Apr 2010 06:48:54 -0700
Subject: [antlr-interest] problem in translation with tree walker
In-Reply-To: <m2u2d9a1ffc1004290322x193f8febn5aa90b6c27936937@mail.gmail.com>
Message-ID: <aa82302aaf4d114f85f4b93d1e8884fc@temporal-wave.com>

Once you have created an instance of your tree walker, then you must tell it what template to use: 	

	treeWalker.setTemplateLib(jgg.getTemplates());

ANTLRWorks does not let you do this kind of development, so what you must do is move to a project such as Maven or Netbeans with Maven, then generate your grammar using the -debug option to ANTLR. You can still use ANTLRWorks in remote debugging mode - that is the point of remote debugging because you cannot use ANTLRWorks with a full blown code environment otherwise.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Nourchn Nor
> Sent: Thursday, April 29, 2010 3:22 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] problem in translation with tree walker
> 
> Hello everybody,
> I want to make a translation between two languages A and B and I choose
> to
> use the ANTLRWork, I'm writing a  grammar of A  and the string template
> of
> B,  and I am spirit of writing the tree walker of translation with the
> template which I have defines in the string template, but the problem
> is
> that this templates don't known in this Tree walker. What can I do? Or
> how I
> have to make or add, please?
> Note that I want to use only the ANTLRWork.
> Please help me
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From Todd.T.Stevenson at ge.com  Thu Apr 29 08:52:28 2010
From: Todd.T.Stevenson at ge.com (Stevenson, Todd (GE Healthcare))
Date: Thu, 29 Apr 2010 11:52:28 -0400
Subject: [antlr-interest] Parser grammar using tokens not in the tokenVocab=
	file
Message-ID: <B4B0A329ACAB3247830EA5930E0C902F071EC9B1@ALPMLVEM16.e2k.ad.ge.com>

I am writing a language with the parser and lexer in separate files. By
using the tokenVocab= directive, I would think that all the tokens used
by the parser must be defined in the lexer.  However, antlr returns no
errors when I reference a token in the parser grammar that is not
defined in the lexer grammar.   Is this correct behavior is do I have
something configured incorrectly?
 
thanks.
 
 

From ron.hunter-duvar at oracle.com  Thu Apr 29 09:57:03 2010
From: ron.hunter-duvar at oracle.com (Ron Hunter-Duvar)
Date: Thu, 29 Apr 2010 10:57:03 -0600
Subject: [antlr-interest] Feature request: Predicates that turn off
	predictive look-ahead
Message-ID: <4BD9BA5F.6050507@oracle.com>

Hi,

I keep running into difficult look-ahead problems, due to the nature of 
the language I'm dealing with (a combination of non-reserved keywords 
and sheer language complexity). In many cases I can specify a relatively 
straightforward syntactic or semantic predicate that can resolve a 
conflict. This stops Antlr from turning off the alternatives that it 
considers conflicting. But it doesn't stop Antlr from trying to generate 
predictive look-ahead. When it generates a DFA, it simply incorporates 
any semantic predicate calls into the DFA, generating special states. 
Worse, it does so in a way that sometimes creates a single method too 
big to compile. Instead of doing something like:

    if (predicate) {
       lookup mapping from token type to state
    }

it generates:

    if (token1 && predicate) state=x;
    else if (token2 && predicate) state=y;
    ...

In one recent case, there were 4,000 lines of code like this in a single 
DFA that could have been handled in less than 100. Some improvements to 
the code generation could reduce the size in these cases. But it would 
be nice for such weird cases to have a special type of predicate that 
says "trust me, I know what I'm doing, just use my predicate, don't 
generate a DFA".

Somewhat related to this I've run into times that Antlr generated 
incorrect look-ahead (due to confusion caused by non-reserved keywords), 
but with no conflict warnings. Again, an "I know what I'm doing" 
predicate would be nice for fixing this. But when Antlr doesn't detect a 
conflict, it ignores any predicates that are provided, making it 
impossible to force the correct behaviour.

I remember that when working with JavaCC this was the behaviour for all 
predicates. It assumed that the developer knew better and turned off all 
conflict warnings and generated look-ahead when a predicate was 
provided. This was a little too sweeping, and led to all kinds of parser 
bugs where the predicate wasn't specificied correctly. I wouldn't 
suggest going to this extreme, but some type of fallback for corner 
cases would be great. As it is now, when I hit one of these situations, 
I simply have to try re-arranging things to avoid the problem. In 
several cases this has so far proven impossible, and I've had to simply 
not support those features of the language.

Ron

-- 
Ron Hunter-Duvar | Software Developer V | 403-272-6580
Oracle Service Engineering
Gulf Canada Square 401 - 9th Avenue S.W., Calgary, AB, Canada T2P 3C5

All opinions expressed here are mine, and do not necessarily represent
those of my employer.


From kunalsawlani at gmail.com  Thu Apr 29 11:29:36 2010
From: kunalsawlani at gmail.com (Kunal Sawlani)
Date: Thu, 29 Apr 2010 14:29:36 -0400
Subject: [antlr-interest] Defining a function in antlr javascript
Message-ID: <o2j9a93847b1004291129ia5179e6bq6d6d8efa716cb820@mail.gmail.com>

Hi All,
I have been using the javascript target of ANTLR to generate a recognizer
for my web page. It is working as expected, so I wanted to factor the code,
to move some common functionality to a function inside the @members section.
For some reason,
this definition is not getting picked up, and the recognizer reports that
the function is not defined. Any idea whether, this a bug in the javascript
target?
I am using the normal function definition, i.e., function doSomething(){}
inside the @members section.

Has anyone run into this issue? Any help would be great!
Thanks

-- 
Kunal Sawlani

From jbb at acm.org  Thu Apr 29 11:35:18 2010
From: jbb at acm.org (John B. Brodie)
Date: Thu, 29 Apr 2010 14:35:18 -0400
Subject: [antlr-interest] Defining a function in antlr javascript
In-Reply-To: <o2j9a93847b1004291129ia5179e6bq6d6d8efa716cb820@mail.gmail.com>
References: <o2j9a93847b1004291129ia5179e6bq6d6d8efa716cb820@mail.gmail.com>
Message-ID: <1272566118.25606.4.camel@gecko.home.org>

Greetings!

On Thu, 2010-04-29 at 14:29 -0400, Kunal Sawlani wrote:
> Hi All,
> I have been using the javascript target of ANTLR to generate a recognizer
> for my web page. It is working as expected, so I wanted to factor the code,
> to move some common functionality to a function inside the @members section.
> For some reason,
> this definition is not getting picked up, and the recognizer reports that
> the function is not defined. Any idea whether, this a bug in the javascript
> target?
> I am using the normal function definition, i.e., function doSomething(){}
> inside the @members section.
> 
> Has anyone run into this issue? Any help would be great!

It is hard to really know for sure without seeing your grammar (or
rather the smallest subset of your grammar that exhibits the problem).

But off-hand are you calling your "doSomething" function from your Lexer
rule(s)?

@members only includes stuff into the parser portion of a combined
grammar. use @lexer::members to incorporate stuff into the lexer portion
of a combined grammar.

hope this helps, if not maybe post an example grammar....
   -jbb




From 100kph at gmail.com  Thu Apr 29 11:55:45 2010
From: 100kph at gmail.com (ady)
Date: Fri, 30 Apr 2010 00:25:45 +0530
Subject: [antlr-interest] a Q
Message-ID: <y2ya4408f831004291155vf9fc8566w53d378ac0bcc6a82@mail.gmail.com>

i want to contribute by writing in a grammar for extracting city state info
and phone numbers in a close range of text during my personal time at night.

The input will be a plain text, and it will have a signature some where in
it. This signature has an address in it.

I would like to ask you for your inputs on how can i approach this problem.
How can i efficiently use ANTLR (or is it the best for this).

From cheetomonster at gmail.com  Thu Apr 29 16:33:18 2010
From: cheetomonster at gmail.com (Chris verBurg)
Date: Thu, 29 Apr 2010 16:33:18 -0700
Subject: [antlr-interest] Is parser control over the lexer possible?
Message-ID: <j2y7c29484b1004291633u8ae7e03did7ec6f072f228e27@mail.gmail.com>

Hey guys,

A question was posted a few days ago about dealing with an infinite input
stream, and the suggestion was to subclass TokenStream so that it didn't
read in all of the input upfront.

I'm running into a similar problem, but before I go run off and subclass
things I thought I'd see if there's a "best practice" for my situation.  It
also overlaps with the "how do I use keywords as
identifiers<http://www.antlr.org/wiki/pages/viewpage.action?pageId=1741>"
FAQ.

I have a data-file grammar that recognizes strings, numbers, and a ton of
keywords.  Pretending "VERSION" and "LIMIT" are two keywords, here's (part
of) the .g file:

data_file:
  'VERSION' STRING ';'
  | 'LIMIT' NUMBER ';'
  ;

NUMBER:
  ('-'|'+')? ('0'..'9')+
  | ('-'|'+')? ('0'..'9')* '.' ('0'..'9')*
  ;

STRING:
  ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')+ ;


Problem input #1:

VERSION 1.2 ;

The "1.2" is lexed as a number instead of a string, so I get a parse error.

Problem input #2:

VERSION LIMIT ;

The "LIMIT" is lexed as a keyword instead of a string, so I get a parse
error.


I saw the FAQ about keywords-as-identifiers, but I don't think it's helpful
for me.  For the NUMBER-that-should-be-a-STRING problem, there's no exact
string I could pass to input.LT(1).getText().equals(), because it requires a
regex to match a NUMBER.  The other solution was to make an "identifier"
rule to match all possibilities -- is the best solution here really to
change the rule to 'VERSION' (STRING | NUMBER) ';'?

For the keyword-that-should-be-a-STRING problem, I'm hesitant to use either
of those solutions because of the sheer number of keywords in this grammar.


Ideally what I'd like to do is what I did in Flex and Bison (which I'm
porting this grammar from).  What I did there was have the parser control
how the lexer interpreted subsequent tokens.  I embedded a rule in the
parser, immediately after the 'VERSION' token, to tell Flex to enter a
"force-the-next-token-to-be-a-STRING-no-matter-what" start state.  It worked
beautifully.  I got most of the way through implementing that in my ANTLR
grammar when I found out that ANTLRFileStream reads all the tokens in before
the parser even starts up -- which means the parser can't give the lexer any
direction over token interpretation.


Thoughts, suggestions, outrageous flames?  Is there a "good" way to do this,
or maybe is there a completely different approach I should take?

Thanks!
-Chris

From gokul007 at gmail.com  Fri Apr 30 01:18:22 2010
From: gokul007 at gmail.com (Gokulakannan Somasundaram)
Date: Fri, 30 Apr 2010 16:18:22 +0800
Subject: [antlr-interest] Any plans of next ANTLR Release
Message-ID: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>

Hi,
   Just wanted to know whether there will be a ANTLR release anytime
nearby..

Thanks,
Gokul

From cometyang at gmail.com  Fri Apr 30 03:52:30 2010
From: cometyang at gmail.com (Yang Yang)
Date: Fri, 30 Apr 2010 12:52:30 +0200
Subject: [antlr-interest] How to push and pop scope using antlr3 c code
	generator
Message-ID: <m2he37a79621004300352y29603e99vf5a23f2be68cb733@mail.gmail.com>

Hi, All

I'm new to antlr3. I want to wirte a simple parser and do scope pushing and
poping during parsing.
How can i define this in antlr3 grammer rules?

Is there some way to do things like this in antlr grammer rules:

topdown:
   enterBlock|enterFunction { pushScope();}

bottomup:
   exitBlock|exitFunction { popScope(); }


Best regards

Yang

From markwright at internode.on.net  Fri Apr 30 07:30:45 2010
From: markwright at internode.on.net (Mark Wright)
Date: Sat, 1 May 2010 00:30:45 +1000
Subject: [antlr-interest] How to push and pop scope using antlr3 c code
 generator
In-Reply-To: <m2he37a79621004300352y29603e99vf5a23f2be68cb733@mail.gmail.com>
References: <m2he37a79621004300352y29603e99vf5a23f2be68cb733@mail.gmail.com>
Message-ID: <20100430143045.GE28116@internode.on.net>

There is an example in examples-v3/C/C/C.g in the examples:

http://www.antlr.org/download/examples-v3.tar.gz

Regards, Mark

On Fri, Apr 30, 2010 at 12:52:30PM +0200, Yang Yang wrote:
> Hi, All
> 
> I'm new to antlr3. I want to wirte a simple parser and do scope pushing and
> poping during parsing.
> How can i define this in antlr3 grammer rules?
> 
> Is there some way to do things like this in antlr grammer rules:
> 
> topdown:
>    enterBlock|enterFunction { pushScope();}
> 
> bottomup:
>    exitBlock|exitFunction { popScope(); }
> 
> 
> Best regards
> 
> Yang
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
> 

From jimi at temporal-wave.com  Fri Apr 30 07:49:50 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 30 Apr 2010 07:49:50 -0700
Subject: [antlr-interest] How to push and pop scope using antlr3 c code
	generator
In-Reply-To: <m2he37a79621004300352y29603e99vf5a23f2be68cb733@mail.gmail.com>
Message-ID: <1e98b7c82d82204e8bbbc7660c43ec1f@temporal-wave.com>

Just use the built in global scopes.

Jim

> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Yang Yang
> Sent: Friday, April 30, 2010 3:53 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] How to push and pop scope using antlr3 c code
> generator
> 
> Hi, All
> 
> I'm new to antlr3. I want to wirte a simple parser and do scope pushing
> and
> poping during parsing.
> How can i define this in antlr3 grammer rules?
> 
> Is there some way to do things like this in antlr grammer rules:
> 
> topdown:
>    enterBlock|enterFunction { pushScope();}
> 
> bottomup:
>    exitBlock|exitFunction { popScope(); }
> 
> 
> Best regards
> 
> Yang
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From jphiloon at penbaysolutions.com  Fri Apr 30 08:44:26 2010
From: jphiloon at penbaysolutions.com (jayp2)
Date: Fri, 30 Apr 2010 08:44:26 -0700 (PDT)
Subject: [antlr-interest] Newbie question, translator
In-Reply-To: <EFDC7E8065131640938641CF57DF312F42766A1E23@email.penbaymedia.com>
References: <EFDC7E8065131640938641CF57DF312F42766A1E23@email.penbaymedia.com>
Message-ID: <1272642266281-4986372.post@n2.nabble.com>


Well, I came up with a solution of a non-grammatical nature.  I call a
StringTemplate function from within the rule.  In the function I scan the
tokens between start and stop and change the text of the particular token
type that represents a date.
-- 
View this message in context: http://antlr.1301665.n2.nabble.com/Newbie-question-translator-tp4976301p4986372.html
Sent from the ANTLR mailing list archive at Nabble.com.

From jimi at temporal-wave.com  Fri Apr 30 09:24:54 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 30 Apr 2010 09:24:54 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
Message-ID: <18c1dd2caf7b824b9591d63b92fb902a@temporal-wave.com>

No dates yet, but there needs to be a release to bring up the various targets to the level of the 3.2 Java target. I am nearly ready with C but need to see where the other guys are to make some date plans with Ter - any such releases will be announced here. Then I guess we see how long V4 takes before deciding about bug fix releases.

Jim 


> -----Original Message-----
> From: antlr-interest-bounces at antlr.org [mailto:antlr-interest-
> bounces at antlr.org] On Behalf Of Gokulakannan Somasundaram
> Sent: Friday, April 30, 2010 1:18 AM
> To: antlr-interest at antlr.org
> Subject: [antlr-interest] Any plans of next ANTLR Release
> 
> Hi,
>    Just wanted to know whether there will be a ANTLR release anytime
> nearby..
> 
> Thanks,
> Gokul
> 
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-
> email-address




From parrt at cs.usfca.edu  Fri Apr 30 15:40:58 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 15:40:58 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
Message-ID: <9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>

On Apr 30, 2010, at 1:18 AM, Gokulakannan Somasundaram wrote:
> Hi,
>   Just wanted to know whether there will be a ANTLR release anytime
> nearby..

not soon. i'm done with analysis and working on new code gen architecture. new lexer stuff is amazing.  my goal will be super small code for parser/lexers.  I'll have some results to show soon on lexer.  E.g., current v3 lexer generated from Java.g is 136k bytes of java code.  I'm hoping to get that down to a few k in bytecodes for an NFA VM that's close in speed to an optimized DFA.  The prototype NFA VM itself (needs more opcodes though) is only about 600 bytes of Java bytecodes. :)

I learned a lot about speed of NFA/DFA from Russ Cox, super genius:

http://swtch.com/~rsc/regexp/regexp2.html

Ter

From gwlist at grahamwideman.com  Fri Apr 30 16:27:44 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Fri, 30 Apr 2010 16:27:44 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
Message-ID: <20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>

Hi Ter,


>not soon. i'm done with analysis and working on new code gen architecture. new lexer stuff is amazing.  my goal will be super small code for parser/lexers.  I'll have some results to show soon on lexer.  E.g., current v3 lexer generated from Java.g is 136k bytes of java code.  I'm hoping to get that down to a few k in bytecodes for an NFA VM that's close in speed to an optimized DFA.  The prototype NFA VM itself (needs more opcodes though) is only about 600 bytes of Java bytecodes. :)


This prompts me to wonder how debuggable these lexers will be?  Currently a certain amount of troubleshooting of lexing/parsing can be done by inspecting the generated lexer source, single-stepping it and so on.

If you move to encoding the lexer logic in bytecodes, does the generated lexer source become an inscrutable black box?  Or is there still meaningful source code to examine, trace etc?

-- Graham 


From parrt at cs.usfca.edu  Fri Apr 30 16:41:50 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 16:41:50 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
Message-ID: <B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>


On Apr 30, 2010, at 4:27 PM, Graham Wideman wrote:
> This prompts me to wonder how debuggable these lexers will be?  Currently a certain amount of troubleshooting of lexing/parsing can be done by inspecting the generated lexer source, single-stepping it and so on.
> 
> If you move to encoding the lexer logic in bytecodes, does the generated lexer source become an inscrutable black box?  Or is there still meaningful source code to examine, trace etc?

Yup. The bytecode is actually easier to read than the java ;)

lexer grammar L2;
A : 'ab';
B : 'a'..'z'+ ;
I : '0'..'9'+ ;

yields:

0000:	split         9, 16, 29   // says 3 paths are possible
0009:	match8        'a'
0011:	match8        'b'
0013:	accept        4
0016:	range8        'a', 'z'
0019:	split         16, 26
0026:	accept        5
0029:	range8        '0', '9'
0032:	split         29, 39 // go back or fall out of loop into accept state
0039:	accept        6

is that what you mean?  It's 1-to-1 with the grammar. taken almost verbatim from Russ Cox's description of VM-based NFA simulation.

ANTLR v4 uses 42 bytes to encode entire L2 grammar.   ANTLR v3 generates 246 lines of Java and 2709 bytes of java .class file:

/tmp $ wc -l L2.java
     246 L2.java
/tmp $ ls -l L2.class
-rw-r--r--  1 parrt  wheel  2709 Apr 30 16:39 L2.class

Ter

From gwlist at grahamwideman.com  Fri Apr 30 16:58:35 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Fri, 30 Apr 2010 16:58:35 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
Message-ID: <20100430235822.FLFV27176.fed1rmmtao104.cox.net@fed1rmimpo01.cox.net>

OOooooo!  That looks quite.... exciting!

Now I'm wondering if there could be a little more propagation of token names from the grammar to labels in the bytecode source?  Ie: could A, B and I appear in there, as labels on the  lines, and annotations or something on the destinations in split?

-- Graham


At 4/30/2010 04:41 PM, Terence Parr wrote:

>On Apr 30, 2010, at 4:27 PM, Graham Wideman wrote:
>> This prompts me to wonder how debuggable these lexers will be?  Currently a certain amount of troubleshooting of lexing/parsing can be done by inspecting the generated lexer source, single-stepping it and so on.
>> 
>> If you move to encoding the lexer logic in bytecodes, does the generated lexer source become an inscrutable black box?  Or is there still meaningful source code to examine, trace etc?
>
>Yup. The bytecode is actually easier to read than the java ;)
>
>lexer grammar L2;
>A : 'ab';
>B : 'a'..'z'+ ;
>I : '0'..'9'+ ;
>
>yields:
>
>0000:   split         9, 16, 29   // says 3 paths are possible
>0009:   match8        'a'
>0011:   match8        'b'
>0013:   accept        4
>0016:   range8        'a', 'z'
>0019:   split         16, 26
>0026:   accept        5
>0029:   range8        '0', '9'
>0032:   split         29, 39 // go back or fall out of loop into accept state
>0039:   accept        6
>
>is that what you mean?  It's 1-to-1 with the grammar. taken almost verbatim from Russ Cox's description of VM-based NFA simulation.
>
>ANTLR v4 uses 42 bytes to encode entire L2 grammar.   ANTLR v3 generates 246 lines of Java and 2709 bytes of java .class file:
>
>/tmp $ wc -l L2.java
>     246 L2.java
>/tmp $ ls -l L2.class
>-rw-r--r--  1 parrt  wheel  2709 Apr 30 16:39 L2.class
>
>Ter


From parrt at cs.usfca.edu  Fri Apr 30 17:01:16 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 17:01:16 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <20100430235822.FLFV27176.fed1rmmtao104.cox.net@fed1rmimpo01.cox.net>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<20100430235822.FLFV27176.fed1rmmtao104.cox.net@fed1rmimpo01.cox.net>
Message-ID: <72CDC9A5-5197-4FBF-B697-C1CCC7CF2653@cs.usfca.edu>


On Apr 30, 2010, at 4:58 PM, Graham Wideman wrote:

> OOooooo!  That looks quite.... exciting!
> 
> Now I'm wondering if there could be a little more propagation of token names from the grammar to labels in the bytecode source?  Ie: could A, B and I appear in there, as labels on the  lines, and annotations or something on the destinations in split?

I can easily generate the whole grammar as comments interspersed :)

Can even gen debug events so tools can show lexer grammar as NFA walks through lexer rules. like a DFA, the NFA simulator matches all viable rules simultaneously.  very efficient.

Ter


From gwlist at grahamwideman.com  Fri Apr 30 17:17:56 2010
From: gwlist at grahamwideman.com (Graham Wideman)
Date: Fri, 30 Apr 2010 17:17:56 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <72CDC9A5-5197-4FBF-B697-C1CCC7CF2653@cs.usfca.edu>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<20100430235822.FLFV27176.fed1rmmtao104.cox.net@fed1rmimpo01.cox.net>
	<72CDC9A5-5197-4FBF-B697-C1CCC7CF2653@cs.usfca.edu>
Message-ID: <20100501001743.IOMQ20564.fed1rmmtao105.cox.net@fed1rmimpo03.cox.net>

And at the same time, can it also output NXT instructions to a robot to build the parser out of Lego bricks?

:-)

-- Graham


At 4/30/2010 05:01 PM, Terence Parr wrote:

>On Apr 30, 2010, at 4:58 PM, Graham Wideman wrote:
>
>> OOooooo!  That looks quite.... exciting!
>> 
>> Now I'm wondering if there could be a little more propagation of token names from the grammar to labels in the bytecode source?  Ie: could A, B and I appear in there, as labels on the  lines, and annotations or something on the destinations in split?
>
>I can easily generate the whole grammar as comments interspersed :)
>
>Can even gen debug events so tools can show lexer grammar as NFA walks through lexer rules. like a DFA, the NFA simulator matches all viable rules simultaneously.  very efficient.
>
>Ter


From parrt at cs.usfca.edu  Fri Apr 30 17:19:36 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 17:19:36 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <20100501001743.IOMQ20564.fed1rmmtao105.cox.net@fed1rmimpo03.cox.net>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<20100430235822.FLFV27176.fed1rmmtao104.cox.net@fed1rmimpo01.cox.net>
	<72CDC9A5-5197-4FBF-B697-C1CCC7CF2653@cs.usfca.edu>
	<20100501001743.IOMQ20564.fed1rmmtao105.cox.net@fed1rmimpo03.cox.net>
Message-ID: <EBA1F9D2-5291-416B-B739-A0B0A9E1FF38@cs.usfca.edu>

On Apr 30, 2010, at 5:17 PM, Graham Wideman wrote:
> And at the same time, can it also output NXT instructions to a robot to build the parser out of Lego bricks?
> 
> :-)

Ha! :D   I'm really liking how v4 is shaping up.

Ter

From rmann at latencyzero.com  Fri Apr 30 17:25:36 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Fri, 30 Apr 2010 17:25:36 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
Message-ID: <D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>


On Apr 30, 2010, at 16:41:50, Terence Parr wrote:

> 
> On Apr 30, 2010, at 4:27 PM, Graham Wideman wrote:
>> This prompts me to wonder how debuggable these lexers will be?  Currently a certain amount of troubleshooting of lexing/parsing can be done by inspecting the generated lexer source, single-stepping it and so on.
>> 
>> If you move to encoding the lexer logic in bytecodes, does the generated lexer source become an inscrutable black box?  Or is there still meaningful source code to examine, trace etc?
> 
> Yup. The bytecode is actually easier to read than the java ;)
> 
> lexer grammar L2;
> A : 'ab';
> B : 'a'..'z'+ ;
> I : '0'..'9'+ ;
> 
> yields:
> 
> 0000:	split         9, 16, 29   // says 3 paths are possible
> 0009:	match8        'a'
> 0011:	match8        'b'
> 0013:	accept        4
> 0016:	range8        'a', 'z'
> 0019:	split         16, 26
> 0026:	accept        5
> 0029:	range8        '0', '9'
> 0032:	split         29, 39 // go back or fall out of loop into accept state
> 0039:	accept        6

This is a Java-only parser generator, then, isn't it?

-- 
Rick



From parrt at cs.usfca.edu  Fri Apr 30 17:28:07 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 17:28:07 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
Message-ID: <80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>

On Apr 30, 2010, at 5:25 PM, Rick Mann wrote:
>> 0000:	split         9, 16, 29   // says 3 paths are possible
>> 0009:	match8        'a'
>> 0011:	match8        'b'
>> 0013:	accept        4
>> 0016:	range8        'a', 'z'
>> 0019:	split         16, 26
>> 0026:	accept        5
>> 0029:	range8        '0', '9'
>> 0032:	split         29, 39 // go back or fall out of loop into accept state
>> 0039:	accept        6
> 
> This is a Java-only parser generator, then, isn't it?

Hi Rick. Nope. Those are bytecodes for a new VM that any target can implement in about 100 lines of support code :)  Those aren't java bytecodes :)

Ter

From jimi at temporal-wave.com  Fri Apr 30 17:28:13 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 30 Apr 2010 17:28:13 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
Message-ID: <43FC0DED-5984-415A-9B1F-2436006E208C@temporal-wave.com>

No. The vm model is implementable by any target andeans there is no  
code gen specific to a target to boot. This not java byte code.

Jim

On Apr 30, 2010, at 17:25, Rick Mann <rmann at latencyzero.com> wrote:

>
> On Apr 30, 2010, at 16:41:50, Terence Parr wrote:
>
>>
>> On Apr 30, 2010, at 4:27 PM, Graham Wideman wrote:
>>> This prompts me to wonder how debuggable these lexers will be?   
>>> Currently a certain amount of troubleshooting of lexing/parsing  
>>> can be done by inspecting the generated lexer source, single- 
>>> stepping it and so on.
>>>
>>> If you move to encoding the lexer logic in bytecodes, does the  
>>> generated lexer source become an inscrutable black box?  Or is  
>>> there still meaningful source code to examine, trace etc?
>>
>> Yup. The bytecode is actually easier to read than the java ;)
>>
>> lexer grammar L2;
>> A : 'ab';
>> B : 'a'..'z'+ ;
>> I : '0'..'9'+ ;
>>
>> yields:
>>
>> 0000:    split         9, 16, 29   // says 3 paths are possible
>> 0009:    match8        'a'
>> 0011:    match8        'b'
>> 0013:    accept        4
>> 0016:    range8        'a', 'z'
>> 0019:    split         16, 26
>> 0026:    accept        5
>> 0029:    range8        '0', '9'
>> 0032:    split         29, 39 // go back or fall out of loop into  
>> accept state
>> 0039:    accept        6
>
> This is a Java-only parser generator, then, isn't it?
>
> -- 
> Rick
>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rmann at latencyzero.com  Fri Apr 30 17:30:47 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Fri, 30 Apr 2010 17:30:47 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
Message-ID: <3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>


On Apr 30, 2010, at 17:28:07, Terence Parr wrote:

> On Apr 30, 2010, at 5:25 PM, Rick Mann wrote:
>>> 0000:	split         9, 16, 29   // says 3 paths are possible
>>> 0009:	match8        'a'
>>> 0011:	match8        'b'
>>> 0013:	accept        4
>>> 0016:	range8        'a', 'z'
>>> 0019:	split         16, 26
>>> 0026:	accept        5
>>> 0029:	range8        '0', '9'
>>> 0032:	split         29, 39 // go back or fall out of loop into accept state
>>> 0039:	accept        6
>> 
>> This is a Java-only parser generator, then, isn't it?
> 
> Hi Rick. Nope. Those are bytecodes for a new VM that any target can implement in about 100 lines of support code :)  Those aren't java bytecodes :)

I realized that as soon as I started to read the paper you referenced, but your earlier email says, "?is only about 600 bytes of Java bytecodes?". Now I realize that's the implementation of the VM in Java, I think.

Still sounds harder to write back-ends, but the whole idea sure is cool.

-- 
Rick


From jimi at temporal-wave.com  Fri Apr 30 17:36:32 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 30 Apr 2010 17:36:32 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
Message-ID: <1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>

It will be easier to write backends as no template code for lexers.  
Implement a simple vm and you are done. Then improvements in the vm  
will improve all lexers. I will likely do a C vm and a couple of  
assembly versions for intel etc

Jim


On Apr 30, 2010, at 17:30, Rick Mann <rmann at latencyzero.com> wrote:

>
> On Apr 30, 2010, at 17:28:07, Terence Parr wrote:
>
>> On Apr 30, 2010, at 5:25 PM, Rick Mann wrote:
>>>> 0000:    split         9, 16, 29   // says 3 paths are possible
>>>> 0009:    match8        'a'
>>>> 0011:    match8        'b'
>>>> 0013:    accept        4
>>>> 0016:    range8        'a', 'z'
>>>> 0019:    split         16, 26
>>>> 0026:    accept        5
>>>> 0029:    range8        '0', '9'
>>>> 0032:    split         29, 39 // go back or fall out of loop into  
>>>> accept state
>>>> 0039:    accept        6
>>>
>>> This is a Java-only parser generator, then, isn't it?
>>
>> Hi Rick. Nope. Those are bytecodes for a new VM that any target can  
>> implement in about 100 lines of support code :)  Those aren't java  
>> bytecodes :)
>
> I realized that as soon as I started to read the paper you  
> referenced, but your earlier email says, "?is only about 600 bytes o 
> f Java bytecodes?". Now I realize that's the implementation of the V 
> M in Java, I think.
>
> Still sounds harder to write back-ends, but the whole idea sure is  
> cool.
>
> -- 
> Rick
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From rmann at latencyzero.com  Fri Apr 30 17:38:05 2010
From: rmann at latencyzero.com (Rick Mann)
Date: Fri, 30 Apr 2010 17:38:05 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
Message-ID: <AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>


On Apr 30, 2010, at 17:36:32, Jim Idle wrote:

> It will be easier to write backends as no template code for lexers. Implement a simple vm and you are done. Then improvements in the vm will improve all lexers. I will likely do a C vm and a couple of assembly versions for intel etc

How about an ARM assembly version :-)

What's the time frame on this?

-- 
Rick

> 
> Jim
> 
> 
> On Apr 30, 2010, at 17:30, Rick Mann <rmann at latencyzero.com> wrote:
> 
>> 
>> On Apr 30, 2010, at 17:28:07, Terence Parr wrote:
>> 
>>> On Apr 30, 2010, at 5:25 PM, Rick Mann wrote:
>>>>> 0000:    split         9, 16, 29   // says 3 paths are possible
>>>>> 0009:    match8        'a'
>>>>> 0011:    match8        'b'
>>>>> 0013:    accept        4
>>>>> 0016:    range8        'a', 'z'
>>>>> 0019:    split         16, 26
>>>>> 0026:    accept        5
>>>>> 0029:    range8        '0', '9'
>>>>> 0032:    split         29, 39 // go back or fall out of loop into accept state
>>>>> 0039:    accept        6
>>>> 
>>>> This is a Java-only parser generator, then, isn't it?
>>> 
>>> Hi Rick. Nope. Those are bytecodes for a new VM that any target can implement in about 100 lines of support code :)  Those aren't java bytecodes :)
>> 
>> I realized that as soon as I started to read the paper you referenced, but your earlier email says, "?is only about 600 bytes of Java bytecodes?". Now I realize that's the implementation of the VM in Java, I think.
>> 
>> Still sounds harder to write back-ends, but the whole idea sure is cool.
>> 
>> -- 
>> Rick
>> 
>> 
>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address


From parrt at cs.usfca.edu  Fri Apr 30 17:38:48 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 17:38:48 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
Message-ID: <55F83A0E-28FA-442A-B80A-5344D65724F3@cs.usfca.edu>


On Apr 30, 2010, at 5:36 PM, Jim Idle wrote:

> It will be easier to write backends as no template code for lexers. Implement a simple vm and you are done. Then improvements in the vm will improve all lexers. I will likely do a C vm and a couple of assembly versions for intel etc

It's also all about the cache misses these days. thousands of lines of java code will likely blow out the cache.  The small VM and small lexer representation should fit nicely in instr and data caches.

Ter

From parrt at cs.usfca.edu  Fri Apr 30 17:39:53 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 17:39:53 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
	<AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
Message-ID: <8C30767A-F694-4112-8867-D5A9B2D63771@cs.usfca.edu>


On Apr 30, 2010, at 5:38 PM, Rick Mann wrote:

> 
> On Apr 30, 2010, at 17:36:32, Jim Idle wrote:
> 
>> It will be easier to write backends as no template code for lexers. Implement a simple vm and you are done. Then improvements in the vm will improve all lexers. I will likely do a C vm and a couple of assembly versions for intel etc
> 
> How about an ARM assembly version :-)
> 
> What's the time frame on this?

My lexer prototype will be done soon but of course v4 itself won't be useable for awhile.  I have to write the LL(*) paper this summer too. So, look for v4 this Fall.

Ter

From jimi at temporal-wave.com  Fri Apr 30 18:11:55 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 30 Apr 2010 18:11:55 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
	<AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
Message-ID: <CE21E231-69D0-49C2-B35E-0C909B3FF632@temporal-wave.com>

Why not? I might have access to that. Also the parser may be doable in  
the same way in certain cases. Actions and so on need care though.

Jim

On Apr 30, 2010, at 17:38, Rick Mann <rmann at latencyzero.com> wrote:

>
> On Apr 30, 2010, at 17:36:32, Jim Idle wrote:
>
>> It will be easier to write backends as no template code for lexers.  
>> Implement a simple vm and you are done. Then improvements in the vm  
>> will improve all lexers. I will likely do a C vm and a couple of  
>> assembly versions for intel etc
>
> How about an ARM assembly version :-)
>
> What's the time frame on this?
>
> -- 
> Rick
>
>>
>> Jim
>>
>>
>> On Apr 30, 2010, at 17:30, Rick Mann <rmann at latencyzero.com> wrote:
>>
>>>
>>> On Apr 30, 2010, at 17:28:07, Terence Parr wrote:
>>>
>>>> On Apr 30, 2010, at 5:25 PM, Rick Mann wrote:
>>>>>> 0000:    split         9, 16, 29   // says 3 paths are possible
>>>>>> 0009:    match8        'a'
>>>>>> 0011:    match8        'b'
>>>>>> 0013:    accept        4
>>>>>> 0016:    range8        'a', 'z'
>>>>>> 0019:    split         16, 26
>>>>>> 0026:    accept        5
>>>>>> 0029:    range8        '0', '9'
>>>>>> 0032:    split         29, 39 // go back or fall out of loop  
>>>>>> into accept state
>>>>>> 0039:    accept        6
>>>>>
>>>>> This is a Java-only parser generator, then, isn't it?
>>>>
>>>> Hi Rick. Nope. Those are bytecodes for a new VM that any target  
>>>> can implement in about 100 lines of support code :)  Those aren't  
>>>> java bytecodes :)
>>>
>>> I realized that as soon as I started to read the paper you  
>>> referenced, but your earlier email says, "?is only about 600 byt 
>>> es of Java bytecodes?". Now I realize that's the implementation  
>>> of the VM in Java, I think.
>>>
>>> Still sounds harder to write back-ends, but the whole idea sure is  
>>> cool.
>>>
>>> -- 
>>> Rick
>>>
>>>
>>> List: http://www.antlr.org/mailman/listinfo/antlr-interest
>>> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address
>

From parrt at cs.usfca.edu  Fri Apr 30 18:14:14 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 18:14:14 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <CE21E231-69D0-49C2-B35E-0C909B3FF632@temporal-wave.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
	<AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
	<CE21E231-69D0-49C2-B35E-0C909B3FF632@temporal-wave.com>
Message-ID: <FAE09190-9185-436B-8B61-2C0D6B45A40B@cs.usfca.edu>

According to Cox, Thompson's original algorithm generated machine code in the 1960s.
Ter
On Apr 30, 2010, at 6:11 PM, Jim Idle wrote:

> Why not? I might have access to that. Also the parser may be doable in  
> the same way in certain cases. Actions and so on need care though.
> 
> Jim
> 


From jimi at temporal-wave.com  Fri Apr 30 18:28:11 2010
From: jimi at temporal-wave.com (Jim Idle)
Date: Fri, 30 Apr 2010 18:28:11 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <FAE09190-9185-436B-8B61-2C0D6B45A40B@cs.usfca.edu>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
	<AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
	<CE21E231-69D0-49C2-B35E-0C909B3FF632@temporal-wave.com>
	<FAE09190-9185-436B-8B61-2C0D6B45A40B@cs.usfca.edu>
Message-ID: <35BF7302-D5F9-4961-ACD9-CAE564B07EB2@temporal-wave.com>

I think we have a lot more scope in this  space than we ever had.  
Technology moves and we can too. The nearer the machine the better the  
performance but it isn't always the lowest level you code at that  
counts.

At this very simple vm level I can code assembler better than the c  
compiler but beyond this it needs computation that humans cannot do in  
any practical time. So a simple vm and we get nearer the machine. I  
really like this path.

Jim



On Apr 30, 2010, at 18:14, Terence Parr <parrt at cs.usfca.edu> wrote:

> According to Cox, Thompson's original algorithm generated machine  
> code in the 1960s.
> Ter
> On Apr 30, 2010, at 6:11 PM, Jim Idle wrote:
>
>> Why not? I might have access to that. Also the parser may be doable  
>> in
>> the same way in certain cases. Actions and so on need care though.
>>
>> Jim
>>
>
>
> List: http://www.antlr.org/mailman/listinfo/antlr-interest
> Unsubscribe: http://www.antlr.org/mailman/options/antlr-interest/your-email-address

From parrt at cs.usfca.edu  Fri Apr 30 18:32:51 2010
From: parrt at cs.usfca.edu (Terence Parr)
Date: Fri, 30 Apr 2010 18:32:51 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <35BF7302-D5F9-4961-ACD9-CAE564B07EB2@temporal-wave.com>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<9CEE0BE9-8476-4AA0-B523-ED5B6B36E96D@cs.usfca.edu>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
	<AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
	<CE21E231-69D0-49C2-B35E-0C909B3FF632@temporal-wave.com>
	<FAE09190-9185-436B-8B61-2C0D6B45A40B@cs.usfca.edu>
	<35BF7302-D5F9-4961-ACD9-CAE564B07EB2@temporal-wave.com>
Message-ID: <3C985D3A-0AEC-48A4-9A5D-A776852006EB@cs.usfca.edu>


On Apr 30, 2010, at 6:28 PM, Jim Idle wrote:

> I think we have a lot more scope in this  space than we ever had. Technology moves and we can too. The nearer the machine the better the performance but it isn't always the lowest level you code at that counts.
> 
> At this very simple vm level I can code assembler better than the c compiler but beyond this it needs computation that humans cannot do in any practical time. So a simple vm and we get nearer the machine. I really like this path.

Me too. i just finished doing nongreedy loops

CMT : '/*' (options {greedy=false;}:.)* '*/' ;

I need to add rule invocations, which renders this effectively an LL(*) VM.

It then makes you wonder about using the VM to do backtracking in LL(*) parser prediction.  It would avoid all that "if backtracking" around each action since the VM would do all prediction. it's sweeet :)  I wish i could type in code faster. ;)  i can barely sleep at night, this VM stuff is so cool.  That says a lot after 30 years of coding.

Ter


From ronburk at gmail.com  Fri Apr 30 23:21:24 2010
From: ronburk at gmail.com (Ron Burk)
Date: Fri, 30 Apr 2010 23:21:24 -0700
Subject: [antlr-interest] Any plans of next ANTLR Release
In-Reply-To: <FAE09190-9185-436B-8B61-2C0D6B45A40B@cs.usfca.edu>
References: <m2h9362e74e1004300118h651c7124pc0eee248d9ace110@mail.gmail.com>
	<20100430232738.HUCU1969.fed1rmmtao107.cox.net@fed1rmimpo01.cox.net>
	<B2CD97C0-18B6-49E3-90AD-716348D44915@cs.usfca.edu>
	<D8B05E61-AF39-4A2F-BA7E-90030D20F51C@latencyzero.com>
	<80CE6F55-067A-4858-BE21-19C0FF7F1230@cs.usfca.edu>
	<3D8720CB-963F-4277-839C-08642F31021E@latencyzero.com>
	<1FD4F2D9-629A-4C3E-9CB9-4B00B7A9866C@temporal-wave.com>
	<AC50F4E8-CC94-44D7-A619-8A1E2607B5A9@latencyzero.com>
	<CE21E231-69D0-49C2-B35E-0C909B3FF632@temporal-wave.com>
	<FAE09190-9185-436B-8B61-2C0D6B45A40B@cs.usfca.edu>
Message-ID: <z2j30dde8ce1004302321m71742236x18b7046135b95188@mail.gmail.com>

> According to Cox, Thompson's original algorithm generated
> machine code in the 1960s.

It was a fair portion of the beauty of his paper that he could
present mostly complete code in such a short space. However,
the machine architecture of the machine he was working
on fit this algorithm very well (and Thompson was clever
in coding it). I would not be as blithe as Cox in assuming that
modern machines are fast enough to forgo that advantage
(YAMV - Your App May Vary). Lexical analysis so easily
can consume a nontrivial portion of parsing CPU cost.
E.g., in  http://tinyurl.com/yebzy5o is claimed:

  "From Intel XML Parsing Accelerator, we found that character
checking loop occupies more than 60% CPU cycles of the whole parsing
process, depending on the property of benchmark."

Of course, Thompson's algorithm (and Cox's analysis)
is oriented towards building lots of NFA's on the fly
for short-term use. Lexical analyzer generators have
the luxury of enormous CPU time to spit out optimized
(if not optimal -- though what one might be optimizing
for can vary) DFAs.

